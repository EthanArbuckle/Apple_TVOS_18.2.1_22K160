uint64_t sub_1000BE7AC()
{
  uint64_t v0;

  swift_release(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1000BE7D8(uint64_t a1, unint64_t a2, void *a3, char a4)
{
}

void sub_1000BE7E4(uint64_t a1, char a2)
{
}

void sub_1000BE800(uint64_t a1, char a2, const char *a3, uint64_t (*a4)(void), const char *a5)
{
  if ((a2 & 1) != 0)
  {
    v14 = *(void **)(v5 + 16);
    swift_errorRetain(a1);
    if (qword_1002EB080 != -1) {
      swift_once(&qword_1002EB080, sub_1000B9B18);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    sub_100072DEC(v15, (uint64_t)qword_1002EB088);
    swift_errorRetain(a1);
    uint64_t v16 = swift_errorRetain(a1);
    v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v20 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)v19 = 138412290;
      swift_errorRetain(a1);
      uint64_t v21 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v25 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v19 + 4, v19 + 12);
      uint64_t *v20 = v21;
      sub_10007EAD8(a1, 1);
      sub_10007EAD8(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, a3, v19, 0xCu);
      uint64_t v22 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
      swift_arrayDestroy(v20, 1LL, v22);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {
      sub_10007EAD8(a1, 1);
      sub_10007EAD8(a1, 1);
    }

    v23 = (void *)_convertErrorToNSError(_:)(a1);
    [v14 setError:v23];

    sub_10007EAD8(a1, 1);
  }

  else
  {
    if (qword_1002EB080 != -1) {
      swift_once(&qword_1002EB080, sub_1000B9B18);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    uint64_t v9 = sub_100072DEC(v8, (uint64_t)qword_1002EB088);
    oslog = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v10 = a4();
    if (os_log_type_enabled(oslog, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v10, a5, v11, 2u);
      swift_slowDealloc(v11, -1LL, -1LL);
    }
  }

uint64_t sub_1000BEAC4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1000BEAF8()
{
  uint64_t v2 = v0[2];
  v1 = (void *)v0[3];
  uint64_t v3 = v0[4];
  swift_beginAccess(v2 + 16, v14, 0LL, 0LL);
  uint64_t v4 = *(void *)(v2 + 16);
  swift_bridgeObjectRetain(v4);
  sub_1000BFAC4(v5, (void (*)(uint64_t, uint64_t, void *, void *, uint64_t))sub_1000BF3EC);
  swift_bridgeObjectRelease(v4);
  if (qword_1002EB080 != -1) {
    swift_once(&qword_1002EB080, sub_1000B9B18);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_100072DEC(v6, (uint64_t)qword_1002EB088);
  uint64_t v7 = swift_retain(v2);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.info.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    os_log_type_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)os_log_type_t v10 = 134217984;
    swift_beginAccess(v2 + 16, v13, 0LL, 0LL);
    uint64_t v12 = *(void *)(*(void *)(v2 + 16) + 16LL);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, v13, v10 + 4, v10 + 12);
    swift_release(v2);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "zones updates %ld", v10, 0xCu);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
    swift_release(v2);
  }

  id v11 = [v1 operationQueue];
  [v11 addOperation:v3];
}

uint64_t sub_1000BECC8(uint64_t a1, unint64_t a2, void *a3, void *a4, __int16 a5, uint64_t a6)
{
  uint64_t v57 = a6;
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1002EB080 != -1) {
    swift_once(&qword_1002EB080, sub_1000B9B18);
  }
  uint64_t v15 = sub_100072DEC(v11, (uint64_t)qword_1002EB088);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v15, v11);
  id v16 = a4;
  uint64_t v56 = v11;
  id v17 = v16;
  v58 = a3;
  id v18 = a3;
  id v19 = v17;
  id v20 = v18;
  id v21 = v19;
  swift_bridgeObjectRetain_n(a2, 2LL);
  id v22 = v20;
  id v23 = v21;
  id v24 = v22;
  uint64_t v25 = v12;
  uint64_t v26 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v27 = static os_log_type_t.info.getter(v26);
  int v28 = v27;
  if (os_log_type_enabled(v26, v27))
  {
    int v50 = HIBYTE(a5);
    uint64_t v55 = a1;
    uint64_t v29 = swift_slowAlloc(32LL, -1LL);
    int v52 = v28;
    uint64_t v30 = v29;
    uint64_t v51 = swift_slowAlloc(96LL, -1LL);
    uint64_t v60 = v51;
    *(_DWORD *)uint64_t v30 = 136315650;
    v54 = a4;
    __int16 v31 = a5;
    swift_bridgeObjectRetain(a2);
    uint64_t v59 = sub_10007C22C(v55, a2, &v60);
    uint64_t v53 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v30 + 4, v30 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v30 + 12) = 2080;
    uint64_t v32 = 1702195828LL;
    if ((a5 & 1) == 0) {
      uint64_t v32 = 0x65736C6166LL;
    }
    unint64_t v33 = 0xE400000000000000LL;
    if ((a5 & 1) == 0) {
      unint64_t v33 = 0xE500000000000000LL;
    }
    else {
      uint64_t v34 = v32;
    }
    else {
      unint64_t v35 = v33;
    }
    uint64_t v59 = sub_10007C22C(v34, v35, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v30 + 14, v30 + 22);

    swift_bridgeObjectRelease(v35);
    *(_WORD *)(v30 + 22) = 2080;
    uint64_t v36 = 0x65736C6166LL;
    if ((v31 & 0x100) != 0) {
      uint64_t v36 = 1702195828LL;
    }
    unint64_t v37 = 0xE500000000000000LL;
    if ((v31 & 0x100) != 0) {
      unint64_t v37 = 0xE400000000000000LL;
    }
    if (v50 == 2) {
      uint64_t v38 = 45LL;
    }
    else {
      uint64_t v38 = v36;
    }
    if (v50 == 2) {
      unint64_t v39 = 0xE100000000000000LL;
    }
    else {
      unint64_t v39 = v37;
    }
    uint64_t v59 = sub_10007C22C(v38, v39, &v60);
    a1 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v30 + 24, v30 + 32);

    unint64_t v40 = v39;
    a5 = v31;
    a4 = v54;
    swift_bridgeObjectRelease(v40);
    _os_log_impl( (void *)&_mh_execute_header,  v26,  (os_log_type_t)v52,  "updating zone %s: created: %s subscribed: %s",  (uint8_t *)v30,  0x20u);
    uint64_t v41 = v51;
    swift_arrayDestroy(v51, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1LL, -1LL);
    swift_slowDealloc(v30, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v53 + 8))(v14, v56);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v14, v56);
  }

  uint64_t v42 = *(void *)(v57 + OBJC_IVAR____TtC13transparencyd11KTZoneSetup_zoneHandler);
  uint64_t v43 = swift_allocObject(&unk_10027F6A0, 56LL, 7LL);
  *(void *)(v43 + 16) = v58;
  *(void *)(v43 + 24) = a4;
  *(_WORD *)(v43 + 32) = a5;
  *(void *)(v43 + 40) = a1;
  *(void *)(v43 + 48) = a2;
  v44 = *(void (**)(uint64_t, unint64_t, uint64_t (*)(id), uint64_t, __n128))(*(void *)v42 + 120LL);
  id v45 = v24;
  id v46 = v23;
  __n128 v47 = swift_bridgeObjectRetain(a2);
  v44(a1, a2, sub_1000BFCF8, v43, v47);
  return swift_release(v43);
}

void KTZoneSetup.init()()
{
}

id KTZoneSetup.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KTZoneSetup();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void destroy for KTZoneSetup.ZoneAction(id *a1)
{
}

uint64_t _s13transparencyd11KTZoneSetupC10ZoneActionVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  id v5 = v3;
  id v6 = v4;
  return a1;
}

uint64_t assignWithCopy for KTZoneSetup.ZoneAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  id v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  uint64_t v7 = *(void **)(a1 + 8);
  uint64_t v8 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v8;
  id v9 = v8;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

__n128 initializeWithTake for KTZoneSetup.ZoneAction(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for KTZoneSetup.ZoneAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for KTZoneSetup.ZoneAction(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 18)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for KTZoneSetup.ZoneAction( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 18) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 18) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for KTZoneSetup.ZoneAction()
{
  return &type metadata for KTZoneSetup.ZoneAction;
}

uint64_t sub_1000BF3EC(uint64_t a1, unint64_t a2, void *a3, void *a4, __int16 a5)
{
  return sub_1000BECC8(a1, a2, a3, a4, a5, *(void *)(v5 + 16));
}

Swift::Int sub_1000BF3F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100072CC4(&qword_1002E1610);
  char v45 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v43 = (void *)(v5 + 64);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v41 = v3;
  int64_t v42 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v42) {
      break;
    }
    id v24 = v43;
    unint64_t v25 = v43[v23];
    ++v14;
    if (!v25)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v42) {
        goto LABEL_36;
      }
      unint64_t v25 = v43[v14];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v41;
          if ((v45 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v14 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v42) {
              goto LABEL_36;
            }
            unint64_t v25 = v43[v14];
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v26;
      }
    }

void sub_1000BF738(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = (void **)v6;
  int64_t v14 = (void *)*v6;
  unint64_t v16 = sub_100079A58(a4, a5);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }

  else
  {
    char v20 = v15;
    uint64_t v21 = v14[3];
    if (v21 >= v19 && (a6 & 1) != 0)
    {
LABEL_7:
      unint64_t v22 = *v7;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        uint64_t v23 = v22[7] + 24 * v16;
        id v24 = *(void **)(v23 + 8);

        *(void *)uint64_t v23 = a1;
        *(void *)(v23 + 8) = a2;
        *(_WORD *)(v23 + 16) = a3;
        return;
      }

      goto LABEL_11;
    }

    if (v21 >= v19 && (a6 & 1) == 0)
    {
      sub_1000BF8F0();
      goto LABEL_7;
    }

    sub_1000BF3F4(v19, a6 & 1);
    unint64_t v25 = sub_100079A58(a4, a5);
    if ((v20 & 1) == (v26 & 1))
    {
      unint64_t v16 = v25;
      unint64_t v22 = *v7;
      if ((v20 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_1000BF894(v16, a4, a5, a1, a2, a3, v22);
      swift_bridgeObjectRetain(a5);
      return;
    }
  }

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

unint64_t sub_1000BF894( unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int16 a6, void *a7)
{
  a7[(result >> 6) + 8] |= 1LL << result;
  uint64_t v7 = (void *)(a7[6] + 16 * result);
  *uint64_t v7 = a2;
  v7[1] = a3;
  uint64_t v8 = a7[7] + 24 * result;
  *(void *)uint64_t v8 = a4;
  *(void *)(v8 + 8) = a5;
  *(_WORD *)(v8 + 16) = a6;
  uint64_t v9 = a7[2];
  BOOL v10 = __OFADD__(v9, 1LL);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a7[2] = v11;
  }
  return result;
}

id sub_1000BF8F0()
{
  v1 = v0;
  sub_100072CC4(&qword_1002E1610);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v27 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v27 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      int64_t v9 = v27 + 1;
      if (v27 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v6 + 8 * v9);
      if (!v28) {
        break;
      }
    }

uint64_t sub_1000BFAC4(uint64_t a1, void (*a2)(uint64_t, uint64_t, void *, void *, uint64_t))
{
  uint64_t v2 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v23 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain(a1);
  for (int64_t i = 0LL; ; int64_t i = v26)
  {
    if (v4)
    {
      unint64_t v7 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      int64_t v26 = i;
      unint64_t v8 = v7 | (i << 6);
      goto LABEL_5;
    }

    int64_t v18 = i + 1;
    if (__OFADD__(i, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v18 >= v23) {
      return swift_release(a1);
    }
    unint64_t v19 = *(void *)(v22 + 8 * v18);
    int64_t v20 = i + 1;
    if (!v19)
    {
      int64_t v20 = i + 2;
      if (i + 2 >= v23) {
        return swift_release(a1);
      }
      unint64_t v19 = *(void *)(v22 + 8 * v20);
      if (!v19)
      {
        int64_t v20 = i + 3;
        if (i + 3 >= v23) {
          return swift_release(a1);
        }
        unint64_t v19 = *(void *)(v22 + 8 * v20);
        if (!v19)
        {
          int64_t v20 = i + 4;
          if (i + 4 >= v23) {
            return swift_release(a1);
          }
          unint64_t v19 = *(void *)(v22 + 8 * v20);
          if (!v19) {
            break;
          }
        }
      }
    }

uint64_t sub_1000BFCC4()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1000BFCF8(id a1)
{
  int v3 = *(unsigned __int8 *)(v1 + 32);
  int v4 = *(unsigned __int8 *)(v1 + 33);
  uint64_t v6 = *(void *)(v1 + 40);
  unint64_t v5 = *(void *)(v1 + 48);
  if (v3 != 2) {
    [a1 setZoneCreated:v3 & 1];
  }
  if (v4 != 2) {
    [a1 setZoneSubscribed:v4 & 1];
  }
  if (qword_1002EB080 != -1) {
    swift_once(&qword_1002EB080, sub_1000B9B18);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_100072DEC(v7, (uint64_t)qword_1002EB088);
  id v8 = a1;
  swift_bridgeObjectRetain_n(v5, 2LL);
  id v9 = v8;
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.info.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc(22LL, -1LL);
    int64_t v13 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    uint64_t v19 = v14;
    *(_DWORD *)uint64_t v12 = 136315394;
    swift_bridgeObjectRetain(v5);
    uint64_t v18 = sub_10007C22C(v6, v5, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(v5, 3LL);
    *(_WORD *)(v12 + 12) = 2112;
    if (a1)
    {
      uint64_t v18 = (uint64_t)v9;
      id v15 = v9;
    }

    else
    {
      uint64_t v18 = 0LL;
    }

    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v12 + 14, v12 + 22);
    *int64_t v13 = a1;

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "zone final status %s %@", (uint8_t *)v12, 0x16u);
    uint64_t v16 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
    swift_arrayDestroy(v13, 1LL, v16);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v5, 2LL);
  }

  return 1LL;
}

int64_t sub_1000BFF94()
{
  return sub_1000C0FFC(32LL);
}

int64_t sub_1000BFFAC(int64_t a1)
{
  return sub_1000C0FFC(a1);
}

uint64_t sub_1000BFFC0()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13transparencyd22MockEligibilitySupport_iCloudAnalyticsFlag);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd22MockEligibilitySupport_iCloudAnalyticsFlag, v3, 0LL, 0LL);
  return *v1;
}

uint64_t sub_1000C0004(char a1)
{
  int v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC13transparencyd22MockEligibilitySupport_iCloudAnalyticsFlag);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  *int v3 = a1;
  return result;
}

uint64_t (*sub_1000C004C(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000C0090@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(a1, 1LL, 1LL, v2);
}

uint64_t sub_1000C01A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13transparencyd22MockEligibilitySupport_databaseDir;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_1000782E0(v3, a1);
}

uint64_t sub_1000C02F4(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13transparencyd22MockEligibilitySupport_databaseDir;
  swift_beginAccess(v3, v5, 33LL, 0LL);
  sub_1000C10E8(a1, v3);
  return swift_endAccess(v5);
}

uint64_t (*sub_1000C034C(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

id sub_1000C0390()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC13transparencyd22MockEligibilitySupport_databaseDir];
  uint64_t v2 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
  v0[OBJC_IVAR____TtC13transparencyd22MockEligibilitySupport_iCloudAnalyticsFlag] = 0;
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for MockEligibilitySupport(0LL);
  return objc_msgSendSuper2(&v4, "init");
}

uint64_t sub_1000C0484()
{
  *(void *)(v1 + 16) = v0;
  return swift_task_switch(sub_1000C049C, 0LL, 0LL);
}

uint64_t sub_1000C049C()
{
  char v1 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0x60LL))();
  return (*(uint64_t (**)(void))(v0 + 8))(v1 & 1);
}

uint64_t sub_1000C0608(const void *a1, void *a2)
{
  *(void *)(v2 + 16) = a2;
  *(void *)(v2 + 24) = _Block_copy(a1);
  id v4 = a2;
  return swift_task_switch(sub_1000C0650, 0LL, 0LL);
}

uint64_t sub_1000C0650()
{
  uint64_t v2 = *(void **)(v0 + 16);
  char v1 = *(void (***)(void, void, void))(v0 + 24);
  char v3 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x60LL))();

  v1[2](v1, v3 & 1, 0LL);
  _Block_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000C06C4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v37._object = a2;
  v37._countAndFlagsBits = a1;
  uint64_t v4 = sub_100072CC4(&qword_1002DF250);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URL.DirectoryHint(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for URL(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v15 = [(id)objc_opt_self(NSFileManager) defaultManager];
  id v16 = [v15 temporaryDirectory];
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v16);

  uint64_t v39 = 0x2D74736574LL;
  unint64_t v40 = 0xE500000000000000LL;
  String.append(_:)(v37);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for URL.DirectoryHint.isDirectory(_:), v7);
  unint64_t v17 = sub_10007F884();
  URL.appending<A>(path:directoryHint:)(&v39, v10, &type metadata for String, v17);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRelease(v40);
  URL._bridgeToObjectiveC()(v18);
  int64_t v20 = v19;
  uint64_t v39 = 0LL;
  LODWORD(v16) = [v15 removeItemAtURL:v19 error:&v39];

  uint64_t v21 = v39;
  if ((_DWORD)v16)
  {
    id v22 = (id)v39;
  }

  else
  {
    id v24 = (id)v39;
    uint64_t v25 = _convertNSErrorToError(_:)(v21);

    swift_willThrow(v26);
    swift_errorRelease(v25);
  }

  URL._bridgeToObjectiveC()(v23);
  unint64_t v28 = v27;
  uint64_t v39 = 0LL;
  unsigned int v29 = [v15 createDirectoryAtURL:v27 withIntermediateDirectories:1 attributes:0 error:&v39];

  uint64_t v30 = v39;
  if (v29)
  {
    id v31 = (id)v39;
  }

  else
  {
    id v32 = (id)v39;
    uint64_t v33 = _convertNSErrorToError(_:)(v30);

    swift_willThrow(v34);
    swift_errorRelease(v33);
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v6, a3, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v6, 0LL, 1LL, v11);
  (*(void (**)(char *))((swift_isaMask & *v38) + 0x80LL))(v6);

  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

int64_t sub_1000C09E8()
{
  int64_t result = sub_1000C0FFC(8LL);
  if (!v1)
  {
    uint64_t v4 = result;
    unint64_t v5 = v3;
    Swift::String v6 = Data.base64EncodedString(options:)(0LL);
    sub_100072BE0(v4, v5);
    (*(void (**)(uint64_t, void *))((swift_isaMask & *v0) + 0x98LL))(v6._countAndFlagsBits, v6._object);
    return swift_bridgeObjectRelease(v6._object);
  }

  return result;
}

id sub_1000C0BD8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MockEligibilitySupport(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

_BYTE *sub_1000C0C34@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    int64_t result = 0LL;
LABEL_4:
    unint64_t v5 = 0xC000000000000000LL;
    goto LABEL_5;
  }

  if (v4 <= 14)
  {
    int64_t result = (_BYTE *)sub_1000C0DAC(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }

  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    int64_t result = (_BYTE *)sub_1000C0E6C((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000LL;
  }

  else
  {
    int64_t result = (_BYTE *)sub_1000C0EE4((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000LL;
  }

char *sub_1000C0CA8(char *a1, int64_t a2, char a3)
{
  int64_t result = sub_1000C0CC4(a1, a2, a3, *v3);
  *unint64_t v3 = result;
  return result;
}

char *sub_1000C0CC4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100072CC4((uint64_t *)&unk_1002DF750);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, v8);
  }

  swift_release(a4);
  return v11;
}

uint64_t sub_1000C0DAC(_BYTE *__src, _BYTE *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0LL;
  }
  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }

  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_1000C0E6C(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = type metadata accessor for Data.RangeReference(0LL);
    uint64_t result = swift_allocObject(v6, 32LL, 7LL);
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = v3;
  }

  return result;
}

uint64_t sub_1000C0EE4(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if ((v3 & 0x80000000) == 0) {
    return v3 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1000C0F64(uint64_t a1)
{
  uint64_t v9 = sub_100072CC4(&qword_1002E1690);
  unint64_t v10 = sub_1000C12FC();
  v8[0] = a1;
  unint64_t v2 = sub_100084C04(v8, v9);
  uint64_t v3 = (_BYTE *)(*v2 + 32LL);
  uint64_t v4 = &v3[*(void *)(*v2 + 16LL)];
  swift_bridgeObjectRetain(a1);
  sub_1000C0C34(v3, v4, &v7);
  uint64_t v5 = v7;
  sub_10007EAFC(v8);
  return v5;
}

int64_t sub_1000C0FFC(int64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    int64_t v1 = result;
    unint64_t v2 = _swiftEmptyArrayStorage;
    if (result)
    {
      int64_t v8 = _swiftEmptyArrayStorage;
      sub_1000C0CA8(0LL, result, 0);
      unint64_t v2 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v7 = 0LL;
        swift_stdlib_random(&v7, 8LL);
        char v3 = v7;
        int64_t v8 = v2;
        unint64_t v5 = v2[2];
        unint64_t v4 = v2[3];
        if (v5 >= v4 >> 1)
        {
          sub_1000C0CA8((char *)(v4 > 1), v5 + 1, 1);
          unint64_t v2 = v8;
        }

        v2[2] = v5 + 1;
        *((_BYTE *)v2 + v5 + 32) = v3;
        --v1;
      }

      while (v1);
    }

    uint64_t v6 = sub_1000C0F64((uint64_t)v2);
    swift_bridgeObjectRelease(v2);
    return v6;
  }

  return result;
}

uint64_t sub_1000C10E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100072CC4(&qword_1002DF250);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for MockEligibilitySupport(uint64_t a1)
{
  uint64_t result = qword_1002EB520;
  if (!qword_1002EB520) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MockEligibilitySupport);
  }
  return result;
}

uint64_t sub_1000C116C()
{
  return type metadata accessor for MockEligibilitySupport(0LL);
}

void sub_1000C1174(uint64_t a1)
{
  v4[0] = &unk_100249188;
  sub_1000C11EC(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    swift_updateClassMetadata2(a1, 256LL, 2LL, v4, a1 + 80);
  }

void sub_1000C11EC(uint64_t a1)
{
  if (!qword_1002E1660)
  {
    uint64_t v2 = type metadata accessor for URL(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1002E1660);
    }
  }

uint64_t sub_1000C1240()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000C126C()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  unint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_1002E166C);
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10007AB68;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_1002E1668 + dword_1002E1668))(v2, v3);
}

uint64_t sub_1000C12D8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_1000C12FC()
{
  unint64_t result = qword_1002E1698;
  if (!qword_1002E1698)
  {
    uint64_t v1 = sub_10007426C(&qword_1002E1690);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002E1698);
  }

  return result;
}

uint64_t sub_1000C1348()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 16));
}

uint64_t sub_1000C1350()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain(*(void *)(v0 + 32));
  return v1;
}

uint64_t sub_1000C137C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000C13B8 + 4 * byte_1002491A0[a1]))( 0xD000000000000012LL,  0x8000000100210630LL);
}

uint64_t sub_1000C13B8()
{
  return 0x644963696C627570LL;
}

unint64_t sub_1000C13DC()
{
  return 0xD000000000000011LL;
}

uint64_t sub_1000C13F8()
{
  return 0x746E656449736469LL;
}

uint64_t sub_1000C141C()
{
  return sub_1000C137C(*v0);
}

uint64_t sub_1000C1424@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000C5AA4(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000C1448(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1000C1454(uint64_t a1)
{
  unint64_t v2 = sub_1000C1644();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000C147C(uint64_t a1)
{
  unint64_t v2 = sub_1000C1644();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C14A4(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_100072CC4((uint64_t *)&unk_1002E16A0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100084C04(a1, v9);
  unint64_t v11 = sub_1000C1644();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for StaticKeyData.CodingKeys,  &type metadata for StaticKeyData.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v26 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v26, v5);
  if (!v2)
  {
    uint64_t v25 = v3[2];
    char v24 = 1;
    uint64_t v14 = sub_100072CC4((uint64_t *)&unk_1002E0400);
    uint64_t v15 = sub_1000868CC( (unint64_t *)&unk_1002E16B0,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v25, &v24, v5, v14, v15);
    uint64_t v16 = v3[3];
    uint64_t v17 = v3[4];
    char v23 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v23, v5);
    uint64_t v18 = v3[5];
    uint64_t v19 = v3[6];
    char v22 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v22, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1000C1644()
{
  unint64_t result = qword_1002EB560[0];
  if (!qword_1002EB560[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_100249334, &type metadata for StaticKeyData.CodingKeys);
    atomic_store(result, qword_1002EB560);
  }

  return result;
}

double sub_1000C1688@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }

  return result;
}

uint64_t sub_1000C16D4(void *a1)
{
  return sub_1000C14A4(a1);
}

void sub_1000C16E8()
{
  qword_1002EF1C8 = 1635017060LL;
  unk_1002EF1D0 = 0xE400000000000000LL;
}

uint64_t *sub_1000C1704()
{
  if (qword_1002EB530 != -1) {
    swift_once(&qword_1002EB530, sub_1000C16E8);
  }
  return &qword_1002EF1C8;
}

void sub_1000C1744()
{
  qword_1002EF1D8 = 0x654B636974617453LL;
  unk_1002EF1E0 = 0xE900000000000079LL;
}

uint64_t *sub_1000C176C()
{
  if (qword_1002EB538 != -1) {
    swift_once(&qword_1002EB538, sub_1000C1744);
  }
  return &qword_1002EF1D8;
}

uint64_t sub_1000C17AC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100077D38(v0, qword_1002EB548);
  sub_100072DEC(v0, (uint64_t)qword_1002EB548);
  return Logger.init(transparencyCategory:)(0x61747364756F6C63LL, 0xEE0079656B636974LL);
}

uint64_t sub_1000C1814()
{
  if (qword_1002EB538 != -1) {
    swift_once(&qword_1002EB538, sub_1000C1744);
  }
  uint64_t v0 = qword_1002EF1D8;
  swift_bridgeObjectRetain(unk_1002EF1E0);
  return v0;
}

void *sub_1000C1870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = (void *)swift_allocObject(v4, 56LL, 7LL);
  if (qword_1002EB538 != -1) {
    swift_once(&qword_1002EB538, sub_1000C1744);
  }
  uint64_t v9 = unk_1002EF1E0;
  v8[2] = qword_1002EF1D8;
  void v8[3] = v9;
  v8[4] = a1;
  v8[5] = a2;
  v8[6] = a3;
  swift_bridgeObjectRetain(v9);
  return v8;
}

void *sub_1000C18FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1002EB538 != -1) {
    swift_once(&qword_1002EB538, sub_1000C1744);
  }
  uint64_t v7 = unk_1002EF1E0;
  v3[2] = qword_1002EF1D8;
  v3[3] = v7;
  v3[4] = a1;
  v3[5] = a2;
  v3[6] = a3;
  swift_bridgeObjectRetain(v7);
  return v3;
}

uint64_t sub_1000C1970(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SHA256(0LL);
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for SHA256Digest(0LL);
  v18[3] = *(void *)(v5 - 8);
  v18[4] = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  __chkstk_darwin(v6);
  v18[2] = (char *)v18 - v7;
  uint64_t v8 = type metadata accessor for String.Encoding(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static String.Encoding.utf8.getter(v10);
  v18[5] = String.data(using:allowLossyConversion:)(v12, 0LL, a1, a2);
  unint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  if (v14 >> 60 != 15)
  {
    uint64_t v15 = sub_100073FE0( (unint64_t *)&unk_1002E0430,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  (uint64_t)&protocol conformance descriptor for SHA256);
    dispatch thunk of HashFunction.init()(v4, v15);
    uint64_t v16 = (char *)&loc_1000C1AF8 + dword_1000C1EBC[v14 >> 62];
    v18[0] = v14;
    __asm { BR              X10 }
  }

  return 0LL;
}

void sub_1000C1ECC(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v2 = a1;
    }
    else {
      uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    __n128 v3 = swift_bridgeObjectRetain(a1);
    uint64_t v4 = __CocoaSet.makeIterator()(v2, v3);
    uint64_t v5 = sub_10007D178(0LL, &qword_1002E16E0, off_100275010);
    unint64_t v6 = sub_1000C6368();
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)Set.Iterator.init(_cocoa:)(v37, v4, v5, v6);
    uint64_t v1 = v37[0];
    uint64_t v35 = v37[1];
    uint64_t v9 = v37[2];
    uint64_t v8 = v37[3];
    unint64_t v10 = v37[4];
  }

  else
  {
    uint64_t v11 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v35 = a1 + 56;
    uint64_t v9 = ~v11;
    uint64_t v12 = -v11;
    if (v12 < 64) {
      uint64_t v13 = ~(-1LL << v12);
    }
    else {
      uint64_t v13 = -1LL;
    }
    unint64_t v10 = v13 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    uint64_t v8 = 0LL;
  }

  uint64_t v32 = v9;
  int64_t v34 = (unint64_t)(v9 + 64) >> 6;
  uint64_t v33 = _swiftEmptyArrayStorage;
  while (1)
  {
    uint64_t v14 = v8;
    if ((v1 & 0x8000000000000000LL) == 0) {
      break;
    }
    uint64_t v17 = __CocoaSet.Iterator.next()(isUniquelyReferenced_nonNull_native);
    if (!v17) {
      goto LABEL_41;
    }
    uint64_t v18 = v17;
    uint64_t v36 = v17;
    uint64_t v19 = sub_10007D178(0LL, &qword_1002E16E0, off_100275010);
    swift_unknownObjectRetain(v18);
    swift_dynamicCast(&v38, &v36, (char *)&type metadata for Swift.AnyObject + 8, v19, 7LL);
    id v20 = v38;
    swift_unknownObjectRelease(v18);
    if (!v20) {
      goto LABEL_41;
    }
LABEL_34:
    id v24 = objc_msgSend(v20, "uri", v32);
    if (v24)
    {
      uint64_t v25 = v24;
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      uint64_t v28 = v27;

      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v33);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_10008CB7C(0LL, v33[2] + 1LL, 1, v33);
        uint64_t v33 = (void *)isUniquelyReferenced_nonNull_native;
      }

      unint64_t v30 = v33[2];
      unint64_t v29 = v33[3];
      if (v30 >= v29 >> 1)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_10008CB7C((void *)(v29 > 1), v30 + 1, 1, v33);
        uint64_t v33 = (void *)isUniquelyReferenced_nonNull_native;
      }

      v33[2] = v30 + 1;
      id v31 = &v33[2 * v30];
      v31[4] = v26;
      v31[5] = v28;
    }

    else
    {
    }
  }

  if (v10)
  {
    unint64_t v15 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v16 = v15 | (v8 << 6);
LABEL_33:
    id v20 = *(id *)(*(void *)(v1 + 48) + 8 * v16);
    if (!v20) {
      goto LABEL_41;
    }
    goto LABEL_34;
  }

  int64_t v21 = v8 + 1;
  if (!__OFADD__(v8, 1LL))
  {
    if (v21 >= v34) {
      goto LABEL_41;
    }
    unint64_t v22 = *(void *)(v35 + 8 * v21);
    ++v8;
    if (!v22)
    {
      uint64_t v8 = v14 + 2;
      if (v14 + 2 >= v34) {
        goto LABEL_41;
      }
      unint64_t v22 = *(void *)(v35 + 8 * v8);
      if (!v22)
      {
        uint64_t v8 = v14 + 3;
        if (v14 + 3 >= v34) {
          goto LABEL_41;
        }
        unint64_t v22 = *(void *)(v35 + 8 * v8);
        if (!v22)
        {
          uint64_t v8 = v14 + 4;
          if (v14 + 4 >= v34) {
            goto LABEL_41;
          }
          unint64_t v22 = *(void *)(v35 + 8 * v8);
          if (!v22)
          {
            uint64_t v8 = v14 + 5;
            if (v14 + 5 >= v34) {
              goto LABEL_41;
            }
            unint64_t v22 = *(void *)(v35 + 8 * v8);
            if (!v22)
            {
              uint64_t v23 = v14 + 6;
              while (v34 != v23)
              {
                unint64_t v22 = *(void *)(v35 + 8 * v23++);
                if (v22)
                {
                  uint64_t v8 = v23 - 1;
                  goto LABEL_32;
                }
              }

id sub_1000C2238(void *a1)
{
  id result = [a1 publicId];
  if (result)
  {
    __n128 v3 = result;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    uint64_t v6 = v5;

    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1 + 168LL))(v4, v6);
    swift_bridgeObjectRelease(v6);
    return (id)v7;
  }

  return result;
}

uint64_t sub_1000C22A8(void *a1)
{
  uint64_t v2 = v1;
  if (qword_1002EB540 != -1) {
    swift_once(&qword_1002EB540, sub_1000C17AC);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_100072DEC(v4, (uint64_t)qword_1002EB548);
  id v5 = a1;
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v23 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    id v10 = [v5 recordID];
    id v11 = [v10 recordName];

    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    unint64_t v14 = v13;

    uint64_t v21 = sub_10007C22C(v12, v14, (uint64_t *)&v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v8 + 4, v8 + 12);

    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "merging cloud static key: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v23 = &_swiftEmptySetSingleton;
  unint64_t v15 = (void *)(*(uint64_t (**)(void))(*v2 + 136LL))();
  __chkstk_darwin(v15);
  NSManagedObjectContext.performAndWait<A>(_:)(sub_1000C5F6C);

  uint64_t v16 = v21;
  uint64_t v17 = v23;
  if (*((void *)v23 + 2) && (uint64_t v18 = (void *)v2[6]) != 0LL)
  {
    swift_bridgeObjectRetain(v23);
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v17);
    [v18 uriNeedsUpdate:isa];
    swift_bridgeObjectRelease(v17);
  }

  else
  {
    swift_bridgeObjectRelease(v23);
  }

  return v16;
}

void sub_1000C2578(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v152 = a3;
  uint64_t v153 = a2;
  v140 = a4;
  uint64_t v141 = type metadata accessor for Logger(0LL);
  uint64_t v142 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  v150 = (char *)&v135 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v6 = [(id)objc_opt_self(CloudStaticKey) fetchRequest];
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v7 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  uint64_t v8 = swift_allocObject(v7, 72LL, 7LL);
  *(_OWORD *)(v8 + 16) = xmmword_1002464F0;
  id v145 = a1;
  id v9 = [a1 recordID];
  id v10 = [v9 recordName];

  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  uint64_t v13 = v12;

  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = sub_1000914E8();
  *(void *)(v8 + 32) = v11;
  *(void *)(v8 + 40) = v13;
  unint64_t v14 = (void *)NSPredicate.init(format:_:)(0x444964726F636572LL, 0xED00004025203D20LL, v8);
  [v6 setPredicate:v14];

  id v156 = 0LL;
  id v139 = v6;
  id v15 = [v6 execute:&v156];
  id v16 = v156;
  if (!v15)
  {
    id v23 = v156;
    uint64_t v24 = _convertNSErrorToError(_:)(v16);

    swift_willThrow(v25);
    uint64_t v26 = swift_errorRelease(v24);
    uint64_t v149 = 0LL;
LABEL_14:
    unint64_t v29 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v153 + 136LL))(v26);
    id v30 = [objc_allocWithZone((Class)CloudStaticKey) initWithContext:v29];

    if (!v30)
    {
      char v62 = 0;
      goto LABEL_36;
    }

    id v22 = v30;
    id v31 = [v145 recordID];
    NSString v32 = [v31 recordName];

    if (!v32)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v34 = v33;
      NSString v32 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v34);
    }

    [v22 setRecordID:v32];

    goto LABEL_18;
  }

  uint64_t v17 = v15;
  uint64_t v18 = sub_10007D178(0LL, &qword_1002E18A8, off_100275008);
  uint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);
  id v20 = v16;

  if (!((unint64_t)v19 >> 62))
  {
    if (*(void *)((v19 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_4;
    }
    goto LABEL_13;
  }

  if (v19 < 0) {
    uint64_t v27 = v19;
  }
  else {
    uint64_t v27 = v19 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v19);
  uint64_t v28 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease(v19);
  if (!v28)
  {
LABEL_13:
    uint64_t v26 = swift_bridgeObjectRelease(v19);
    goto LABEL_14;
  }

LABEL_81:
      unint64_t v112 = (v117 - 1) & v117;
      unint64_t v115 = __clz(__rbit64(v117)) + (v113 << 6);
LABEL_82:
      v119 = (uint64_t *)(*(void *)(v85 + 48) + 16 * v115);
      uint64_t v121 = *v119;
      uint64_t v120 = v119[1];
      v122 = *(uint64_t (**)(__n128))(*(void *)v153 + 136LL);
      __n128 v123 = swift_bridgeObjectRetain(v120);
      v124 = (void *)v122(v123);
      id v125 = [objc_allocWithZone((Class)CloudStaticKeyURI) initWithContext:v124];

      NSString v126 = String._bridgeToObjectiveC()();
      [v125 setUri:v126];

      id v127 = [v36 uris];
      if (v127)
      {
        v128 = v127;
        uint64_t v129 = sub_10007D178(0LL, &qword_1002E16E0, off_100275010);
        unint64_t v130 = sub_1000C6368();
        v131 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v128, v129, v130);

        id v156 = v131;
        v132 = (void *)sub_1000C4AE4(v125);
        id v133 = v156;
        if (v156)
        {
          v134.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v133);
        }

        else
        {
          v134.super.Class isa = 0LL;
        }

        id v36 = v148;
        [v148 setUris:v134.super.isa];

        uint64_t v43 = v143;
        unint64_t v44 = v147;
      }

      else
      {
        [v36 setUris:0];
      }

      uint64_t v19 = v152;
      sub_100083FE4((uint64_t *)&v156, v121, v120);

      swift_bridgeObjectRelease(v157);
    }

    __break(1u);
LABEL_95:
    swift_once(&qword_1002EB530, sub_1000C16E8);
  }

  int64_t v42 = v150;
LABEL_24:
  NSString v47 = String._bridgeToObjectiveC()();
  [v36 setCkstate:v47];
LABEL_25:

  uint64_t v48 = v141;
  if (qword_1002EB540 != -1) {
    swift_once(&qword_1002EB540, sub_1000C17AC);
  }
  uint64_t v49 = sub_100072DEC(v48, (uint64_t)qword_1002EB548);
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v42, v49, v48);
  id v50 = v36;
  uint64_t v51 = v39;
  id v52 = v50;
  uint64_t v53 = (os_log_s *)Logger.logObject.getter(v50);
  os_log_type_t v54 = static os_log_type_t.info.getter(v53);
  if (os_log_type_enabled(v53, v54))
  {
    uint64_t v55 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v56 = (void *)swift_slowAlloc(32LL, -1LL);
    id v156 = v56;
    *(_DWORD *)uint64_t v55 = 136315138;
    id v57 = [v52 publicId];
    if (v57)
    {
      v58 = v57;
      uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
      unint64_t v61 = v60;
    }

    else
    {
      unint64_t v61 = 0xE100000000000000LL;
      uint64_t v59 = 45LL;
    }

    uint64_t v154 = sub_10007C22C(v59, v61, (uint64_t *)&v156);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155, v55 + 4, v55 + 12);

    swift_bridgeObjectRelease(v61);
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "merged cloud device: %s", v55, 0xCu);
    swift_arrayDestroy(v56, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1LL, -1LL);
    swift_slowDealloc(v55, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v142 + 8))(v150, v141);
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v51 + 8))(v42, v48);
  }

  uint64_t v63 = v153;
  uint64_t v64 = (*(uint64_t (**)(id, id))(*(void *)v153 + 248LL))(v52, v145);
  v65 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v63 + 136LL))(v64);
  id v156 = 0LL;
  unsigned int v66 = [v65 save:&v156];

  id v67 = v156;
  if (v66)
  {
    id v68 = v156;
    swift_release(v138);

    char v62 = 1;
LABEL_36:
    id v52 = v139;
  }

  else
  {
    id v69 = v156;
    uint64_t v70 = _convertNSErrorToError(_:)(v67);

    swift_willThrow(v71);
    swift_release(v138);

    swift_errorRelease(v70);
    uint64_t v149 = 0LL;
    char v62 = 1;
  }

  char *v140 = v62;
}

uint64_t sub_1000C3490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20, *(void *)(a3 + 40));
    String.hash(into:)(v20, a1, a2);
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1LL << *(_BYTE *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if (((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      uint64_t v12 = v11[1];
      BOOL v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0LL) & 1) != 0) {
        return 1LL;
      }
      uint64_t v15 = ~v7;
      unint64_t v16 = (v8 + 1) & v15;
      if (((*(void *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
      {
        while (1)
        {
          uint64_t v17 = (void *)(v10 + 16 * v16);
          uint64_t v18 = v17[1];
          BOOL v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0) {
            break;
          }
          uint64_t result = 0LL;
          unint64_t v16 = (v16 + 1) & v15;
          if (((*(void *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0) {
            return result;
          }
        }

        return 1LL;
      }
    }
  }

  return 0LL;
}

void sub_1000C35C4(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v2 = a1;
    }
    else {
      uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    __n128 v3 = swift_bridgeObjectRetain(a1);
    uint64_t v4 = __CocoaSet.makeIterator()(v2, v3);
    uint64_t v5 = sub_10007D178(0LL, &qword_1002E16E0, off_100275010);
    unint64_t v6 = sub_1000C6368();
    uint64_t v7 = Set.Iterator.init(_cocoa:)(v33, v4, v5, v6);
    uint64_t v1 = v33[0];
    uint64_t v31 = v33[1];
    uint64_t v8 = v33[2];
    uint64_t v9 = v33[3];
    unint64_t v10 = v33[4];
  }

  else
  {
    uint64_t v11 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v31 = a1 + 56;
    uint64_t v8 = ~v11;
    uint64_t v12 = -v11;
    if (v12 < 64) {
      uint64_t v13 = ~(-1LL << v12);
    }
    else {
      uint64_t v13 = -1LL;
    }
    unint64_t v10 = v13 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    uint64_t v9 = 0LL;
  }

  int64_t v30 = (unint64_t)(v8 + 64) >> 6;
  while (v1 < 0)
  {
    uint64_t v17 = __CocoaSet.Iterator.next()(v7);
    if (!v17) {
      goto LABEL_38;
    }
    uint64_t v18 = v17;
    uint64_t v34 = v17;
    uint64_t v19 = sub_10007D178(0LL, &qword_1002E16E0, off_100275010);
    swift_unknownObjectRetain(v18);
    swift_dynamicCast(v32, &v34, (char *)&type metadata for Swift.AnyObject + 8, v19, 7LL);
    id v20 = (id)v32[0];
    swift_unknownObjectRelease(v18);
    uint64_t v16 = v9;
    uint64_t v14 = v10;
    if (!v20) {
      goto LABEL_38;
    }
LABEL_36:
    id v24 = [v20 uri];
    if (v24)
    {
      uint64_t v25 = v24;
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      uint64_t v28 = v27;

      sub_100083FE4(v32, v26, v28);
      uint64_t v29 = v32[1];

      uint64_t v7 = (void *)swift_bridgeObjectRelease(v29);
    }

    else
    {
    }

    uint64_t v9 = v16;
    unint64_t v10 = v14;
  }

  if (v10)
  {
    uint64_t v14 = (v10 - 1) & v10;
    unint64_t v15 = __clz(__rbit64(v10)) | (v9 << 6);
    uint64_t v16 = v9;
LABEL_35:
    id v20 = *(id *)(*(void *)(v1 + 48) + 8 * v15);
    if (!v20) {
      goto LABEL_38;
    }
    goto LABEL_36;
  }

  int64_t v21 = v9 + 1;
  if (!__OFADD__(v9, 1LL))
  {
    if (v21 >= v30) {
      goto LABEL_38;
    }
    unint64_t v22 = *(void *)(v31 + 8 * v21);
    uint64_t v16 = v9 + 1;
    if (!v22)
    {
      uint64_t v16 = v9 + 2;
      if (v9 + 2 >= v30) {
        goto LABEL_38;
      }
      unint64_t v22 = *(void *)(v31 + 8 * v16);
      if (!v22)
      {
        uint64_t v16 = v9 + 3;
        if (v9 + 3 >= v30) {
          goto LABEL_38;
        }
        unint64_t v22 = *(void *)(v31 + 8 * v16);
        if (!v22)
        {
          uint64_t v16 = v9 + 4;
          if (v9 + 4 >= v30) {
            goto LABEL_38;
          }
          unint64_t v22 = *(void *)(v31 + 8 * v16);
          if (!v22)
          {
            uint64_t v16 = v9 + 5;
            if (v9 + 5 >= v30) {
              goto LABEL_38;
            }
            unint64_t v22 = *(void *)(v31 + 8 * v16);
            if (!v22)
            {
              uint64_t v23 = v9 + 6;
              while (v30 != v23)
              {
                unint64_t v22 = *(void *)(v31 + 8 * v23++);
                if (v22)
                {
                  uint64_t v16 = v23 - 1;
                  goto LABEL_34;
                }
              }

LABEL_34:
    uint64_t v14 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v16 << 6);
    goto LABEL_35;
  }

  __break(1u);
}

  __break(1u);
}

  return v14;
}

    NSString v32 = 0;
    goto LABEL_35;
  }

  id v24 = v18;
LABEL_26:
  uint64_t v13 = v45;
  uint64_t v29 = v43;
  uint64_t v31 = [v24 isEqualToData:v14];

  objc_autoreleasePoolPop(context);
  if ((v31 & 1) == 0) {
    goto LABEL_28;
  }
  NSString v32 = 1;
  unint64_t v15 = v44;
LABEL_35:

  return v32;
}

LABEL_35:
    goto LABEL_36;
  }

  uint64_t v13 = 0LL;
LABEL_36:

  return v13;
}

uint64_t sub_1000C38DC(void *a1)
{
  unint64_t v15 = &_swiftEmptySetSingleton;
  uint64_t v3 = (*(uint64_t (**)(void))(*v1 + 136LL))();
  uint64_t v4 = (void *)swift_allocObject(&unk_10027F898, 40LL, 7LL);
  void v4[2] = a1;
  v4[3] = &v15;
  v4[4] = v1;
  uint64_t v5 = swift_allocObject(&unk_10027F8C0, 32LL, 7LL);
  *(void *)(v5 + 16) = sub_1000C5F8C;
  *(void *)(v5 + 24) = v4;
  aBlock[4] = sub_1000807AC;
  uint64_t v14 = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000807CC;
  aBlock[3] = &unk_10027F8D8;
  unint64_t v6 = _Block_copy(aBlock);
  uint64_t v7 = v14;
  id v8 = a1;
  swift_retain(v1);
  swift_retain(v5);
  swift_release(v7);
  [(id)v3 performBlockAndWait:v6];

  _Block_release(v6);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation(v5, "", 123LL, 162LL, 32LL, 1LL);
  uint64_t result = swift_release(v5);
  if ((v3 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    unint64_t v10 = v15;
    if (v15[2])
    {
      uint64_t v11 = (void *)v1[6];
      if (v11)
      {
        swift_bridgeObjectRetain(v15);
        Class isa = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v10);
        [v11 uriNeedsUpdate:isa];

        unint64_t v10 = v15;
      }
    }

    swift_release(v4);
    return swift_bridgeObjectRelease(v10);
  }

  return result;
}

Class sub_1000C3A9C(void *a1)
{
  id v3 = [a1 ckrecord];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
    unint64_t v7 = v6;
  }

  else
  {
    uint64_t v5 = 0LL;
    unint64_t v7 = 0xF000000000000000LL;
  }

  uint64_t v8 = type metadata accessor for KTCloudRecords();
  Class isa = (Class)(*(uint64_t (**)(uint64_t, unint64_t))(v8 + 440))(v5, v7);
  sub_10007EB9C(v5, v7);
  if (!isa)
  {
    Class isa = (Class)(*(uint64_t (**)(void *))(*(void *)v1 + 176LL))(a1);
    if (!isa) {
      return isa;
    }
    sub_10007D178(0LL, &qword_1002E16D0, &OBJC_CLASS___CKRecord_ptr);
    v10._countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v1 + 112LL))();
    Class isa = CKRecord.init(recordType:recordID:)(v10, (CKRecordID)isa).super.isa;
  }

  id v11 = [a1 publicId];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    unint64_t v14 = v13;

    id v15 = [a1 uris];
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = sub_10007D178(0LL, &qword_1002E16E0, off_100275010);
      unint64_t v18 = sub_1000C6368();
      uint64_t v19 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v16, v17, v18);

      sub_1000C1ECC(v19);
      int64_t v21 = v20;
      swift_bridgeObjectRelease(v19);
    }

    else
    {
      int64_t v21 = _swiftEmptyArrayStorage;
    }

    id v22 = [a1 contactExternalURI];
    if (v22)
    {
      uint64_t v23 = v22;
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      uint64_t v26 = v25;
    }

    else
    {
      uint64_t v24 = 0LL;
      uint64_t v26 = 0LL;
    }

    id v27 = [a1 contactIdentifier];
    if (v27)
    {
      uint64_t v28 = v27;
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      uint64_t v31 = v30;
    }

    else
    {
      uint64_t v29 = 0LL;
      uint64_t v31 = 0LL;
    }

    uint64_t v32 = type metadata accessor for JSONEncoder(0LL);
    swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    uint64_t v33 = JSONEncoder.init()();
    uint64_t v44 = v43;
    unint64_t v45 = v14;
    uint64_t v46 = v21;
    NSString v47 = (void *)v24;
    uint64_t v48 = v26;
    uint64_t v49 = v29;
    uint64_t v50 = v31;
    unint64_t v34 = sub_1000C6324();
    uint64_t v35 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v44, &type metadata for StaticKeyData, v34);
    unint64_t v37 = v36;
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease(v31);
    id v38 = -[objc_class encryptedValues](isa, "encryptedValues");
    uint64_t ObjectType = swift_getObjectType(v38);
    if (qword_1002EB530 != -1) {
      swift_once(&qword_1002EB530, sub_1000C16E8);
    }
    uint64_t v40 = qword_1002EF1C8;
    uint64_t v41 = unk_1002EF1D0;
    NSString v47 = &type metadata for Data;
    uint64_t v48 = &protocol witness table for Data;
    uint64_t v44 = v35;
    unint64_t v45 = v37;
    swift_bridgeObjectRetain(unk_1002EF1D0);
    sub_100072B9C(v35, v37);
    CKRecordKeyValueSetting.subscript.setter(&v44, v40, v41, ObjectType);
    sub_100072BE0(v35, v37);
    swift_release(v33);
    swift_unknownObjectRelease(v38);
  }

  else
  {

    return 0LL;
  }

  return isa;
}

uint64_t sub_1000C3E40()
{
  unsigned __int8 v11 = 0;
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 136LL))();
  uint64_t v2 = swift_allocObject(&unk_10027F910, 32LL, 7LL);
  *(void *)(v2 + 16) = v0;
  *(void *)(v2 + 24) = &v11;
  uint64_t v3 = swift_allocObject(&unk_10027F938, 32LL, 7LL);
  *(void *)(v3 + 16) = sub_1000C63E4;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_100085D2C;
  uint64_t v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000807CC;
  aBlock[3] = &unk_10027F950;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = v10;
  swift_retain(v0);
  swift_retain(v3);
  swift_release(v5);
  [v1 performBlockAndWait:v4];

  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 123LL, 211LL, 32LL, 1LL);
  uint64_t result = swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = v11;
    swift_release(v2);
    return v8;
  }

  return result;
}

uint64_t sub_1000C3F8C()
{
  unsigned __int8 v11 = _swiftEmptyArrayStorage;
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 136LL))();
  uint64_t v2 = swift_allocObject(&unk_10027F988, 32LL, 7LL);
  *(void *)(v2 + 16) = &v11;
  *(void *)(v2 + 24) = v0;
  uint64_t v3 = swift_allocObject(&unk_10027F9B0, 32LL, 7LL);
  *(void *)(v3 + 16) = sub_10008F018;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_100085D2C;
  uint64_t v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000807CC;
  aBlock[3] = &unk_10027F9C8;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = v10;
  swift_retain(v0);
  swift_retain(v3);
  swift_release(v5);
  [v1 performBlockAndWait:v4];

  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 123LL, 225LL, 32LL, 1LL);
  uint64_t result = swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = v11;
    swift_release(v2);
    return (uint64_t)v8;
  }

  return result;
}

uint64_t sub_1000C40E0()
{
  unsigned __int8 v11 = _swiftEmptyArrayStorage;
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 136LL))();
  uint64_t v2 = swift_allocObject(&unk_10027FA00, 32LL, 7LL);
  *(void *)(v2 + 16) = &v11;
  *(void *)(v2 + 24) = v0;
  uint64_t v3 = swift_allocObject(&unk_10027FA28, 32LL, 7LL);
  *(void *)(v3 + 16) = sub_10008F040;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_100085D2C;
  uint64_t v10 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000807CC;
  aBlock[3] = &unk_10027FA40;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = v10;
  swift_retain(v0);
  swift_retain(v3);
  swift_release(v5);
  [v1 performBlockAndWait:v4];

  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v3, "", 123LL, 243LL, 32LL, 1LL);
  uint64_t result = swift_release(v3);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = v11;
    swift_release(v2);
    return (uint64_t)v8;
  }

  return result;
}

uint64_t sub_1000C4234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = (void *)(*(uint64_t (**)(void))(*(void *)v3 + 136LL))();
  uint64_t v8 = (void *)swift_allocObject(&unk_10027FA78, 48LL, 7LL);
  v8[2] = a1;
  void v8[3] = a2;
  v8[4] = a3;
  v8[5] = v3;
  uint64_t v9 = swift_allocObject(&unk_10027FAA0, 32LL, 7LL);
  *(void *)(v9 + 16) = sub_1000C662C;
  *(void *)(v9 + 24) = v8;
  v14[4] = sub_100085D2C;
  uint64_t v15 = v9;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256LL;
  v14[2] = sub_1000807CC;
  v14[3] = &unk_10027FAB8;
  uint64_t v10 = _Block_copy(v14);
  uint64_t v11 = v15;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a3);
  swift_retain(v3);
  swift_retain(v9);
  swift_release(v11);
  [v7 performBlockAndWait:v10];

  _Block_release(v10);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v9, "", 123LL, 260LL, 32LL, 1LL);
  swift_release(v8);
  uint64_t result = swift_release(v9);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000C4398(void *a1)
{
  uint64_t v14 = 0LL;
  uint64_t v3 = (void *)(*(uint64_t (**)(void))(*(void *)v1 + 136LL))();
  uint64_t v4 = (void *)swift_allocObject(&unk_10027FAF0, 40LL, 7LL);
  void v4[2] = a1;
  v4[3] = &v14;
  v4[4] = v1;
  uint64_t v5 = swift_allocObject(&unk_10027FB18, 32LL, 7LL);
  *(void *)(v5 + 16) = sub_1000C6C44;
  *(void *)(v5 + 24) = v4;
  aBlock[4] = sub_100085D2C;
  uint64_t v13 = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000807CC;
  aBlock[3] = &unk_10027FB30;
  unint64_t v6 = _Block_copy(aBlock);
  uint64_t v7 = v13;
  id v8 = a1;
  swift_retain(v1);
  swift_retain(v5);
  swift_release(v7);
  [v3 performBlockAndWait:v6];

  _Block_release(v6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v5, "", 123LL, 282LL, 32LL, 1LL);
  uint64_t result = swift_release(v5);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v11 = v14;
    swift_release(v4);
    return v11;
  }

  return result;
}

uint64_t sub_1000C44F8()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 136LL))();
  uint64_t v2 = swift_allocObject(&unk_10027FB68, 32LL, 7LL);
  *(void *)(v2 + 16) = sub_1000C720C;
  *(void *)(v2 + 24) = v0;
  v6[4] = sub_100085D2C;
  uint64_t v7 = v2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256LL;
  _OWORD v6[2] = sub_1000807CC;
  v6[3] = &unk_10027FB80;
  uint64_t v3 = _Block_copy(v6);
  uint64_t v4 = v7;
  swift_retain(v0);
  swift_retain(v2);
  swift_release(v4);
  [(id)v1 performBlockAndWait:v3];

  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v2, "", 123LL, 317LL, 32LL, 1LL);
  swift_release(v0);
  uint64_t result = swift_release(v2);
  if ((v1 & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000C4618()
{
  swift_unknownObjectRelease(*(void *)(v0 + 48));
  return v0;
}

uint64_t sub_1000C464C()
{
  swift_unknownObjectRelease(*(void *)(v0 + 48));
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t sub_1000C4688()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112LL))();
}

uint64_t sub_1000C46B0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184LL))() & 1;
}

uint64_t sub_1000C46DC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192LL))();
}

uint64_t sub_1000C4704()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 216LL))();
}

uint64_t sub_1000C472C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 224LL))();
}

uint64_t sub_1000C4754()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 208LL))() & 1;
}

uint64_t sub_1000C4780()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 232LL))();
}

uint64_t sub_1000C47A8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 240LL))();
}

uint64_t sub_1000C47D0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200LL))();
}

uint64_t sub_1000C47F8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176LL))();
}

uint64_t sub_1000C4820()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 256LL))();
}

uint64_t sub_1000C4848(Swift::Int *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v2);
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease(v6);

      uint64_t v31 = v9;
      uint64_t v10 = sub_10007D178(0LL, &qword_1002E16E0, off_100275010);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
      *a1 = v32;
      swift_unknownObjectRelease(v9);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Int v23 = sub_1000C4CB8(v7, result + 1);
    Swift::Int v32 = v23;
    unint64_t v24 = *(void *)(v23 + 16);
    if (*(void *)(v23 + 24) <= v24)
    {
      uint64_t v29 = v24 + 1;
      id v30 = v8;
      sub_1000C4EAC(v29);
      uint64_t v25 = v32;
    }

    else
    {
      uint64_t v25 = v23;
      id v26 = v8;
    }

    sub_1000C5148((uint64_t)v8, v25);
    uint64_t v28 = *v3;
    *uint64_t v3 = v25;
  }

  else
  {
    Swift::Int v12 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    Swift::Int v13 = NSObject._rawHashValue(seed:)(v12);
    uint64_t v14 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v15 = v13 & ~v14;
    if (((*(void *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) != 0)
    {
      sub_10007D178(0LL, &qword_1002E16E0, off_100275010);
      id v16 = *(id *)(*(void *)(v6 + 48) + 8 * v15);
      char v17 = static NSObject.== infix(_:_:)();

      if ((v17 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v6);
        int64_t v21 = *(void **)(*(void *)(*v3 + 48) + 8 * v15);
        *a1 = (Swift::Int)v21;
        id v22 = v21;
        return 0LL;
      }

      uint64_t v18 = ~v14;
      while (1)
      {
        unint64_t v15 = (v15 + 1) & v18;
        if (((*(void *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) == 0) {
          break;
        }
        id v19 = *(id *)(*(void *)(v6 + 48) + 8 * v15);
        char v20 = static NSObject.== infix(_:_:)();

        if ((v20 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

    swift_bridgeObjectRelease(v6);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    Swift::Int v32 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    id v8 = a2;
    sub_1000C51C8((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native);
    uint64_t v28 = *v3;
    *uint64_t v3 = v32;
  }

  swift_bridgeObjectRelease(v28);
  *a1 = (Swift::Int)v8;
  return 1LL;
}

uint64_t sub_1000C4AE4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if ((*v1 & 0xC000000000000001LL) != 0)
  {
    if (v4 < 0) {
      uint64_t v5 = *v1;
    }
    else {
      uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v4);
    id v6 = a1;
    char v7 = __CocoaSet.contains(_:)();

    if ((v7 & 1) != 0)
    {
      uint64_t v8 = sub_1000C576C(v5, (uint64_t)v6);
      swift_bridgeObjectRelease(v4);
      return v8;
    }

Swift::Int sub_1000C4CB8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100072CC4((uint64_t *)&unk_1002E18C8);
    uint64_t v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    uint64_t v24 = v4;
    uint64_t v6 = __CocoaSet.makeIterator()(a1, v5);
    uint64_t v7 = __CocoaSet.Iterator.next()(v6);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = sub_10007D178(0LL, &qword_1002E16E0, off_100275010);
      do
      {
        uint64_t v22 = v8;
        swift_dynamicCast(&v23, &v22, (char *)&type metadata for Swift.AnyObject + 8, v9, 7LL);
        uint64_t v4 = v24;
        unint64_t v17 = *(void *)(v24 + 16);
        if (*(void *)(v24 + 24) <= v17)
        {
          sub_1000C4EAC(v17 + 1);
          uint64_t v4 = v24;
        }

        uint64_t v10 = v23;
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
        uint64_t v12 = v4 + 56;
        uint64_t v13 = -1LL << *(_BYTE *)(v4 + 32);
        unint64_t v14 = result & ~v13;
        unint64_t v15 = v14 >> 6;
        if (((-1LL << v14) & ~*(void *)(v4 + 56 + 8 * (v14 >> 6))) != 0)
        {
          unint64_t v16 = __clz(__rbit64((-1LL << v14) & ~*(void *)(v4 + 56 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v18 = 0;
          unint64_t v19 = (unint64_t)(63 - v13) >> 6;
          do
          {
            if (++v15 == v19 && (v18 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v20 = v15 == v19;
            if (v15 == v19) {
              unint64_t v15 = 0LL;
            }
            v18 |= v20;
            uint64_t v21 = *(void *)(v12 + 8 * v15);
          }

          while (v21 == -1);
          unint64_t v16 = __clz(__rbit64(~v21)) + (v15 << 6);
        }

        *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
        *(void *)(*(void *)(v4 + 48) + 8 * v16) = v10;
        ++*(void *)(v4 + 16);
        uint64_t v8 = __CocoaSet.Iterator.next()(result);
      }

      while (v8);
    }

    swift_release(v6);
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  return v4;
}

Swift::Int sub_1000C4EAC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100072CC4((uint64_t *)&unk_1002E18C8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    id v30 = v2;
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v8 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1LL << v7);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v3 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v14 = 0LL;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }

      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v11) {
          goto LABEL_36;
        }
        unint64_t v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v11) {
            goto LABEL_36;
          }
          unint64_t v19 = v8[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v11) {
              goto LABEL_36;
            }
            unint64_t v19 = v8[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v30;
                uint64_t v29 = 1LL << *(_BYTE *)(v3 + 32);
                if (v29 > 63) {
                  bzero((void *)(v3 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v8 = -1LL << v29;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v14 >= v11) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v8[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v14 = v20;
            }
          }
        }

unint64_t sub_1000C5148(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40));
  unint64_t result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1LL << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1LL << *(_BYTE *)(a2 + 32)));
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

void sub_1000C51C8(uint64_t a1, unint64_t a2, char a3)
{
  Swift::Int v4 = v3;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000C4EAC(v9);
  }

  else
  {
    if (v8 > v7)
    {
      sub_1000C534C();
      goto LABEL_14;
    }

    sub_1000C54F4(v9);
  }

  uint64_t v10 = *v3;
  Swift::Int v11 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v12 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v13 = sub_10007D178(0LL, &qword_1002E16E0, off_100275010);
    id v14 = *(id *)(*(void *)(v10 + 48) + 8 * a2);
    char v15 = static NSObject.== infix(_:_:)();

    if ((v15 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }

    else
    {
      uint64_t v16 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        id v17 = *(id *)(*(void *)(v10 + 48) + 8 * a2);
        char v18 = static NSObject.== infix(_:_:)();

        if ((v18 & 1) != 0) {
          goto LABEL_13;
        }
      }
    }
  }

id sub_1000C534C()
{
  uint64_t v1 = v0;
  sub_100072CC4((uint64_t *)&unk_1002E18C8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }

Swift::Int sub_1000C54F4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100072CC4((uint64_t *)&unk_1002E18C8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  id v30 = v2;
  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v11) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v11) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }

uint64_t sub_1000C576C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRelease(*v3);
  uint64_t v6 = __CocoaSet.count.getter(a1);
  uint64_t v7 = swift_unknownObjectRetain(a1);
  Swift::Int v8 = sub_1000C4CB8(v7, v6);
  Swift::Int v19 = v8;
  Swift::Int v9 = *(void *)(v8 + 40);
  swift_retain(v8);
  Swift::Int v10 = NSObject._rawHashValue(seed:)(v9);
  uint64_t v11 = -1LL << *(_BYTE *)(v8 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0)
  {
    sub_10007D178(0LL, &qword_1002E16E0, off_100275010);
    id v13 = *(id *)(*(void *)(v8 + 48) + 8 * v12);
    char v14 = ((uint64_t (*)(void))static NSObject.== infix(_:_:))();

    if ((v14 & 1) != 0)
    {
LABEL_6:
      swift_release(v8);
      Swift::Int v8 = *(void *)(*(void *)(v8 + 48) + 8 * v12);
      sub_1000C5904(v12);
      if ((static NSObject.== infix(_:_:)(a2, v8) & 1) != 0)
      {
        *uint64_t v3 = v19;
        return v8;
      }

      __break(1u);
    }

    else
    {
      uint64_t v15 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v15;
        if (((*(void *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
          break;
        }
        id v16 = *(id *)(*(void *)(v8 + 48) + 8 * v12);
        char v17 = ((uint64_t (*)(void))static NSObject.== infix(_:_:))();

        if ((v17 & 1) != 0) {
          goto LABEL_6;
        }
      }
    }

    swift_release(v8);
    __break(1u);
  }

  uint64_t result = swift_release(v8);
  __break(1u);
  return result;
}

unint64_t sub_1000C5904(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(v3 + 40);
        id v11 = *(id *)(*(void *)(v3 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(v3 + 48);
            char v17 = (void *)(v16 + 8 * v2);
            int64_t v18 = (void *)(v16 + 8 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v17 >= v18 + 1))
            {
              void *v17 = *v18;
              int64_t v2 = v6;
            }
          }
        }

        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFSUB__(v19, 1LL);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

uint64_t sub_1000C5AA4(uint64_t a1, unint64_t a2)
{
  BOOL v3 = a1 == 0x644963696C627570LL && a2 == 0xEE00797469746E65LL;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x644963696C627570LL, 0xEE00797469746E65LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  if (a1 == 0x746E656449736469LL && a2 == 0xED00007265696669LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x746E656449736469LL, 0xED00007265696669LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  if (a1 == 0xD000000000000012LL && a2 == 0x8000000100210630LL)
  {
    unint64_t v6 = 0x8000000100210630LL;
LABEL_16:
    swift_bridgeObjectRelease(v6);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x8000000100210630LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_16;
  }

  if (a1 == 0xD000000000000011LL && a2 == 0x8000000100210650LL)
  {
    swift_bridgeObjectRelease(0x8000000100210650LL);
    return 3LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x8000000100210650LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_1000C5C74@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100072CC4(&qword_1002E18D8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100084C04(a1, v9);
  unint64_t v11 = sub_1000C1644();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for StaticKeyData.CodingKeys,  &type metadata for StaticKeyData.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return sub_10007EAFC(a1);
  }
  char v36 = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v36, v5);
  uint64_t v14 = v13;
  uint64_t v31 = v12;
  uint64_t v15 = sub_100072CC4((uint64_t *)&unk_1002E0400);
  char v35 = 1;
  uint64_t v16 = sub_1000868CC( (unint64_t *)&unk_1002E18E0,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  __n128 v17 = swift_bridgeObjectRetain(v14);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v32, v15, &v35, v5, v15, v16, v17);
  char v34 = 2;
  uint64_t v30 = v32;
  swift_bridgeObjectRetain(v32);
  uint64_t v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v34, v5);
  uint64_t v29 = v18;
  char v33 = 3;
  swift_bridgeObjectRetain(v18);
  uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v33, v5);
  uint64_t v21 = v20;
  uint64_t v22 = v19;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain(v21);
  sub_10007EAFC(a1);
  swift_bridgeObjectRelease(v21);
  uint64_t v23 = v29;
  swift_bridgeObjectRelease(v29);
  uint64_t v24 = v30;
  swift_bridgeObjectRelease(v30);
  uint64_t result = swift_bridgeObjectRelease(v14);
  *a2 = v31;
  a2[1] = v14;
  uint64_t v26 = v28;
  a2[2] = v24;
  a2[3] = v26;
  a2[4] = v23;
  a2[5] = v22;
  a2[6] = v21;
  return result;
}

void sub_1000C5F6C(char *a1@<X8>)
{
}

void sub_1000C5F8C()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v35 = *(void *)(v0 + 32);
  id v2 = [(id)objc_opt_self(CloudStaticKey) fetchRequest];
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v3 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  uint64_t v4 = swift_allocObject(v3, 72LL, 7LL);
  *(_OWORD *)(v4 + 16) = xmmword_1002464F0;
  id v5 = [v1 recordName];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;

  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_1000914E8();
  *(void *)(v4 + 32) = v6;
  *(void *)(v4 + 40) = v8;
  uint64_t v9 = (void *)NSPredicate.init(format:_:)(0x444964726F636572LL, 0xED00004025203D20LL, v4);
  [v2 setPredicate:v9];

  id v36 = 0LL;
  id v10 = [v2 execute:&v36];
  id v11 = v36;
  if (!v10)
  {
LABEL_19:
    id v32 = v36;
    uint64_t v33 = _convertNSErrorToError(_:)(v11);

    swift_willThrow(v34);
    swift_errorRelease(v33);
    return;
  }

  uint64_t v12 = v10;
  uint64_t v13 = sub_10007D178(0LL, &qword_1002E18A8, off_100275008);
  uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);
  id v15 = v11;

  if ((unint64_t)v14 >> 62)
  {
    if (v14 < 0) {
      uint64_t v27 = v14;
    }
    else {
      uint64_t v27 = v14 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v14);
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter(v27);
    if (!v16) {
      goto LABEL_17;
    }
  }

  else
  {
    uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v14);
    if (!v16) {
      goto LABEL_17;
    }
  }

  if (v16 >= 1)
  {
    uint64_t v17 = 0LL;
    uint64_t v18 = *(uint64_t (**)(void))(*(void *)v35 + 136LL);
    do
    {
      if ((v14 & 0xC000000000000001LL) != 0) {
        id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v14);
      }
      else {
        id v20 = *(id *)(v14 + 8 * v17 + 32);
      }
      uint64_t v21 = v20;
      id v22 = [v20 uris];
      if (v22)
      {
        uint64_t v23 = v22;
        uint64_t v24 = sub_10007D178(0LL, &qword_1002E16E0, off_100275010);
        unint64_t v25 = sub_1000C6368();
        uint64_t v26 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v23, v24, v25);

        sub_1000C35C4(v26);
        swift_bridgeObjectRelease(v26);
      }

      ++v17;
      uint64_t v19 = (void *)v18();
      [v19 deleteObject:v21];
    }

    while (v16 != v17);
LABEL_17:
    uint64_t v28 = swift_bridgeObjectRelease_n(v14, 2LL);
    uint64_t v29 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v35 + 136LL))(v28);
    id v36 = 0LL;
    unsigned __int8 v30 = [v29 save:&v36];

    id v11 = v36;
    if ((v30 & 1) != 0)
    {
      id v31 = v36;

      return;
    }

    goto LABEL_19;
  }

  __break(1u);
}

uint64_t sub_1000C62FC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000C630C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C631C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_1000C6324()
{
  unint64_t result = qword_1002E16D8;
  if (!qword_1002E16D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002491D8, &type metadata for StaticKeyData);
    atomic_store(result, (unint64_t *)&qword_1002E16D8);
  }

  return result;
}

unint64_t sub_1000C6368()
{
  unint64_t result = qword_1002E16E8;
  if (!qword_1002E16E8)
  {
    uint64_t v1 = sub_10007D178(255LL, &qword_1002E16E0, off_100275010);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1002E16E8);
  }

  return result;
}

uint64_t sub_1000C63C0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1000C63E4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(_BYTE **)(v0 + 24);
  id v3 = [(id)objc_opt_self(CloudDevice) fetchRequest];
  uint64_t v4 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  uint64_t v5 = swift_allocObject(v4, 112LL, 7LL);
  *(_OWORD *)(v5 + 16) = xmmword_1002464D0;
  *(void *)(v5 + 56) = &type metadata for String;
  unint64_t v6 = sub_1000914E8();
  *(void *)(v5 + 64) = v6;
  *(void *)(v5 + 32) = 0x676E696F6774756FLL;
  *(void *)(v5 + 40) = 0xE800000000000000LL;
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  *(void *)(v5 + 96) = &type metadata for String;
  *(void *)(v5 + 104) = v6;
  *(void *)(v5 + 72) = 0x646574656C6564LL;
  *(void *)(v5 + 80) = 0xE700000000000000LL;
  uint64_t v7 = (void *)NSPredicate.init(format:_:)(0xD00000000000001CLL, 0x800000010020F560LL, v5);
  [v3 setPredicate:v7];

  id v10 = (id)(*(uint64_t (**)(void))(*(void *)v1 + 136LL))();
  uint64_t v8 = sub_10007D178(0LL, (unint64_t *)&unk_1002E18B0, off_100274FF8);
  uint64_t v9 = NSManagedObjectContext.count<A>(for:)(v3, v8);

  if (v9 >= 1) {
    *uint64_t v2 = 1;
  }
}

uint64_t sub_1000C65A4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000C65B4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000C65D8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000C65E8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000C65F8()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_1000C662C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(v1);
  while (v3)
  {
    if (v3 < 1)
    {
      __break(1u);
      return;
    }

    uint64_t v49 = v2;
    uint64_t v4 = 0LL;
    unint64_t v55 = v1 & 0xC000000000000001LL;
    uint64_t v52 = v1 + 32;
    uint64_t v53 = v3;
    uint64_t v54 = v1;
    while (1)
    {
      if (v55) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v1);
      }
      else {
        id v7 = *(id *)(v52 + 8 * v4);
      }
      uint64_t v8 = v7;
      id v9 = [(id)objc_opt_self(CloudStaticKey) fetchRequest];
      sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
      uint64_t v10 = sub_100072CC4((uint64_t *)&unk_1002E0440);
      uint64_t v11 = swift_allocObject(v10, 72LL, 7LL);
      *(_OWORD *)(v11 + 16) = xmmword_1002464F0;
      id v57 = v8;
      id v12 = [v8 recordName];
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      uint64_t v15 = v14;

      *(void *)(v11 + 56) = &type metadata for String;
      *(void *)(v11 + 64) = sub_1000914E8();
      *(void *)(v11 + 32) = v13;
      *(void *)(v11 + 40) = v15;
      uint64_t v16 = (void *)NSPredicate.init(format:_:)(0x444964726F636572LL, 0xED00004025203D20LL, v11);
      [v9 setPredicate:v16];

      id v59 = 0LL;
      uint64_t v56 = v9;
      id v17 = [v9 execute:&v59];
      id v18 = v59;
      if (!v17)
      {
        id v26 = v59;
        uint64_t v27 = _convertNSErrorToError(_:)(v18);

        swift_willThrow(v28);
        if (qword_1002EB540 != -1) {
          swift_once(&qword_1002EB540, sub_1000C17AC);
        }
        uint64_t v29 = type metadata accessor for Logger(0LL);
        sub_100072DEC(v29, (uint64_t)qword_1002EB548);
        unint64_t v6 = v57;
        id v30 = v57;
        swift_errorRetain(v27);
        id v31 = v30;
        uint64_t v32 = swift_errorRetain(v27);
        uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
        os_log_type_t v34 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v33, v34))
        {
          uint64_t v35 = swift_slowAlloc(22LL, -1LL);
          id v36 = (void *)swift_slowAlloc(16LL, -1LL);
          *(_DWORD *)uint64_t v35 = 138412546;
          os_log_type_t type = v34;
          id v59 = v31;
          log = v33;
          id v37 = v31;
          unint64_t v6 = v57;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v35 + 4, v35 + 12);
          *id v36 = v31;

          *(_WORD *)(v35 + 12) = 2112;
          swift_errorRetain(v27);
          id v38 = (void *)_swift_stdlib_bridgeErrorToNSError(v27);
          id v59 = v38;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v35 + 14, v35 + 22);
          v36[1] = v38;
          swift_errorRelease(v27);
          swift_errorRelease(v27);
          _os_log_impl( (void *)&_mh_execute_header,  log,  type,  "record to update not found %@: %@",  (uint8_t *)v35,  0x16u);
          uint64_t v39 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
          swift_arrayDestroy(v36, 2LL, v39);
          swift_slowDealloc(v36, -1LL, -1LL);
          swift_slowDealloc(v35, -1LL, -1LL);

          swift_errorRelease(v27);
        }

        else
        {

          swift_errorRelease(v27);
          swift_errorRelease(v27);
          swift_errorRelease(v27);
        }

        uint64_t v5 = v53;
        uint64_t v1 = v54;
        goto LABEL_6;
      }

      uint64_t v19 = v17;
      uint64_t v20 = sub_10007D178(0LL, &qword_1002E18A8, off_100275008);
      uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, v20);
      id v21 = v18;

      uint64_t v1 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v2);
      if (v1) {
        goto LABEL_13;
      }
LABEL_5:

      swift_bridgeObjectRelease_n(v2, 2LL);
      uint64_t v5 = v53;
      uint64_t v1 = v54;
      unint64_t v6 = v57;
LABEL_6:
      ++v4;

      if (v4 == v5)
      {
        uint64_t v41 = swift_bridgeObjectRelease(v1);
        uint64_t v2 = v49;
        goto LABEL_37;
      }
    }

    if (v2 < 0) {
      uint64_t v40 = v2;
    }
    else {
      uint64_t v40 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
    uint64_t v1 = _CocoaArrayWrapper.endIndex.getter(v40);
    if (!v1) {
      goto LABEL_5;
    }
LABEL_13:
    if (v1 >= 1)
    {
      uint64_t v22 = 0LL;
      do
      {
        if ((v2 & 0xC000000000000001LL) != 0) {
          id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v2);
        }
        else {
          id v23 = *(id *)(v2 + 8 * v22 + 32);
        }
        uint64_t v24 = v23;
        ++v22;
        NSString v25 = String._bridgeToObjectiveC()();
        [v24 setCkstate:v25];
      }

      while (v1 != v22);
      goto LABEL_5;
    }

    __break(1u);
LABEL_32:
    if (v1 < 0) {
      uint64_t v42 = v1;
    }
    else {
      uint64_t v42 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v42);
  }

  uint64_t v41 = swift_bridgeObjectRelease(v1);
LABEL_37:
  uint64_t v43 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 136LL))(v41);
  id v59 = 0LL;
  unsigned __int8 v44 = [v43 save:&v59];

  if ((v44 & 1) != 0)
  {
    id v45 = v59;
  }

  else
  {
    id v58 = v59;
    id v46 = v59;
    uint64_t v47 = _convertNSErrorToError(_:)(v58);

    swift_willThrow(v48);
    swift_errorRelease(v47);
  }

uint64_t sub_1000C6C04()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000C6C18()
{
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1000C6C44()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = (id *)v0[3];
  uint64_t v3 = v0[4];
  id v4 = [(id)objc_opt_self(CloudStaticKey) fetchRequest];
  sub_10007D178(0LL, (unint64_t *)&unk_1002E07D0, &OBJC_CLASS___NSPredicate_ptr);
  uint64_t v5 = sub_100072CC4((uint64_t *)&unk_1002E0440);
  uint64_t v6 = swift_allocObject(v5, 72LL, 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_1002464F0;
  id v7 = [(id)v1 recordName];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v10 = v9;

  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 64) = sub_1000914E8();
  *(void *)(v6 + 32) = v8;
  *(void *)(v6 + 40) = v10;
  uint64_t v11 = (void *)NSPredicate.init(format:_:)(0x444964726F636572LL, 0xED00004025203D20LL, v6);
  [v4 setPredicate:v11];

  id v57 = 0LL;
  id v12 = [v4 execute:&v57];
  id v13 = v57;
  if (!v12)
  {
    id v29 = v57;
    uint64_t v30 = _convertNSErrorToError(_:)(v13);

    swift_willThrow(v31);
    swift_errorRelease(v30);
    if (qword_1002EB540 == -1)
    {
LABEL_12:
      uint64_t v32 = type metadata accessor for Logger(0LL);
      sub_100072DEC(v32, (uint64_t)qword_1002EB548);
      os_log_type_t v33 = static os_log_type_t.error.getter();
      id v34 = (id)v1;
      uint64_t v35 = (void *)Logger.logObject.getter(v34);
      os_log_type_t v36 = v33;
      if (!os_log_type_enabled((os_log_t)v35, v33))
      {

LABEL_26:
        return;
      }

      id v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v38 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v37 = 138412290;
      id v57 = v34;
      id v39 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v37 + 4, v37 + 12);
      *id v38 = v34;

      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v35, v36, "record not found %@", v37, 0xCu);
      uint64_t v40 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
      swift_arrayDestroy(v38, 1LL, v40);
      uint64_t v41 = v38;
LABEL_24:
      swift_slowDealloc(v41, -1LL, -1LL);
      swift_slowDealloc(v37, -1LL, -1LL);
      goto LABEL_26;
    }

uint64_t sub_1000C71FC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1000C720C()
{
  id v1 = objc_allocWithZone(&OBJC_CLASS___NSFetchRequest);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 initWithEntityName:v2];

  id v4 = [objc_allocWithZone(NSBatchDeleteRequest) initWithFetchRequest:v3];
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)v0 + 136LL);
  uint64_t v6 = (void *)v5();
  id v19 = 0LL;
  id v7 = [v6 executeRequest:v4 error:&v19];

  id v8 = v19;
  if (v7)
  {
    id v9 = v19;
  }

  else
  {
    id v11 = v19;
    uint64_t v12 = _convertNSErrorToError(_:)(v8);

    swift_willThrow();
    uint64_t v10 = swift_errorRelease(v12);
  }

  id v13 = (void *)((uint64_t (*)(uint64_t))v5)(v10);
  id v19 = 0LL;
  unsigned int v14 = [v13 save:&v19];

  id v15 = v19;
  if (v14)
  {
    id v16 = v19;
  }

  else
  {
    id v17 = v19;
    uint64_t v18 = _convertNSErrorToError(_:)(v15);

    swift_willThrow();
    swift_errorRelease(v18);
    id v3 = v4;
  }
}

uint64_t sub_1000C7390()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t destroy for StaticKeyData(void *a1)
{
  return swift_bridgeObjectRelease(a1[6]);
}

void *initializeWithCopy for StaticKeyData(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v5 = a2[2];
  uint64_t v4 = a2[3];
  a1[2] = v5;
  a1[3] = v4;
  uint64_t v7 = a2[4];
  uint64_t v6 = a2[5];
  a1[4] = v7;
  a1[5] = v6;
  uint64_t v8 = a2[6];
  a1[6] = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

void *assignWithCopy for StaticKeyData(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[5] = a2[5];
  uint64_t v10 = a2[6];
  uint64_t v11 = a1[6];
  a1[6] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

void *assignWithTake for StaticKeyData(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = a1[4];
  a1[3] = *(void *)(a2 + 24);
  a1[4] = v5;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = a1[6];
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v7;
  swift_bridgeObjectRelease(v8);
  return a1;
}

ValueMetadata *type metadata accessor for StaticKeyData()
{
  return &type metadata for StaticKeyData;
}

uint64_t type metadata accessor for KTCloudStaticKey()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd16KTCloudStaticKey);
}

uint64_t getEnumTagSinglePayload for StaticKeyData.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

uint64_t storeEnumTagSinglePayload for StaticKeyData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000C7650 + 4 * byte_1002491A9[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000C7684 + 4 * byte_1002491A4[v4]))();
}

uint64_t sub_1000C7684(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C768C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000C7694LL);
  }
  return result;
}

uint64_t sub_1000C76A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000C76A8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000C76AC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C76B4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StaticKeyData.CodingKeys()
{
  return &type metadata for StaticKeyData.CodingKeys;
}

unint64_t sub_1000C76D4()
{
  unint64_t result = qword_1002EB770[0];
  if (!qword_1002EB770[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10024930C, &type metadata for StaticKeyData.CodingKeys);
    atomic_store(result, qword_1002EB770);
  }

  return result;
}

unint64_t sub_1000C771C()
{
  unint64_t result = qword_1002EB880;
  if (!qword_1002EB880)
  {
    unint64_t result = swift_getWitnessTable(&unk_10024927C, &type metadata for StaticKeyData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002EB880);
  }

  return result;
}

unint64_t sub_1000C7764()
{
  unint64_t result = qword_1002EB888[0];
  if (!qword_1002EB888[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_1002492A4, &type metadata for StaticKeyData.CodingKeys);
    atomic_store(result, qword_1002EB888);
  }

  return result;
}

unint64_t sub_1000C77A8()
{
  unint64_t result = qword_1002E18C0;
  if (!qword_1002E18C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002491B0, &type metadata for StaticKeyData);
    atomic_store(result, (unint64_t *)&qword_1002E18C0);
  }

  return result;
}

uint64_t sub_1000C7820@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13transparencyd8KTBucket_lastFilltime;
  swift_beginAccess(v3, v6, 0LL, 0LL);
  uint64_t v4 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t sub_1000C7884(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13transparencyd8KTBucket_lastFilltime;
  swift_beginAccess(v3, v6, 33LL, 0LL);
  uint64_t v4 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
  return swift_endAccess(v6);
}

uint64_t (*sub_1000C78F0(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

double *KTBucket.__allocating_init(fillrate:maxTokens:)(double a1, double a2)
{
  uint64_t v5 = (double *)swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v5[3] = a1;
  v5[4] = a2;
  v5[2] = a2;
  Date.init()();
  return v5;
}

double *KTBucket.init(fillrate:maxTokens:)(double a1, double a2)
{
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin();
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v2[3] = a1;
  v2[4] = a2;
  v2[2] = a2;
  Date.init()(v7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))( (uint64_t)v2 + OBJC_IVAR____TtC13transparencyd8KTBucket_lastFilltime,  v9,  v5);
  return v2;
}

uint64_t KTBucket.description.getter()
{
  v6[0] = 0LL;
  v6[1] = 0xE000000000000000LL;
  v1._countAndFlagsBits = 91LL;
  v1._object = (void *)0xE100000000000000LL;
  String.append(_:)(v1);
  (*(void (**)(void))(*(void *)v0 + 112LL))();
  Double.write<A>(to:)( v6,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v2._countAndFlagsBits = 47LL;
  v2._object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  (*(void (**)(void))(*(void *)v0 + 160LL))();
  Double.write<A>(to:)( v6,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v3._countAndFlagsBits = 60LL;
  v3._object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
  (*(void (**)(void))(*(void *)v0 + 136LL))();
  Double.write<A>(to:)( v6,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v4._countAndFlagsBits = 23870LL;
  v4._object = (void *)0xE200000000000000LL;
  String.append(_:)(v4);
  return v6[0];
}

BOOL sub_1000C7B1C(double a1)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v1 + 240LL))();
  return (*(double (**)(uint64_t))(*(void *)v1 + 112LL))(v3) >= a1;
}

uint64_t sub_1000C7B58(double a1)
{
  char v3 = (*(uint64_t (**)(void))(*(void *)v1 + 224LL))();
  if ((v3 & 1) != 0)
  {
    Swift::String v4 = (void (*)(_BYTE *, void))(*(uint64_t (**)(_BYTE *))(*(void *)v1 + 128LL))(v7);
    *uint64_t v5 = *v5 - a1;
    v4(v7, 0LL);
  }

  return v3 & 1;
}

uint64_t sub_1000C7BC8()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = Date.init()(v6);
  (*(void (**)(uint64_t))(*(void *)v0 + 184LL))(v9);
  double v10 = Date.timeIntervalSince(_:)(v5);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t))(v2 + 8);
  uint64_t v12 = v11(v5, v1);
  double v13 = v10 * (*(double (**)(uint64_t))(*(void *)v0 + 136LL))(v12);
  double v14 = v13 + (*(double (**)(void))(*(void *)v0 + 112LL))();
  v15.n128_f64[0] = (*(double (**)(void))(*(void *)v0 + 160LL))();
  if (v15.n128_f64[0] >= v14) {
    v15.n128_f64[0] = v14;
  }
  (*(void (**)(__n128))(*(void *)v0 + 120LL))(v15);
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v8, v1);
  (*(void (**)(char *))(*(void *)v0 + 192LL))(v5);
  return v11(v8, v1);
}

uint64_t sub_1000C7D08()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120LL))();
}

void sub_1000C7D2C(double a1)
{
}

uint64_t KTBucket.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13transparencyd8KTBucket_lastFilltime;
  uint64_t v2 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  return v0;
}

uint64_t KTBucket.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13transparencyd8KTBucket_lastFilltime;
  uint64_t v2 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

unint64_t KTNetworkBucketFeedback.init(rawValue:)(unint64_t result)
{
  if (result > 2) {
    return 0LL;
  }
  return result;
}

Swift::Int sub_1000C7E18()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000C7E5C()
{
}

Swift::Int sub_1000C7E84(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t *sub_1000C7EC4@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result;
  BOOL v3 = (unint64_t)*result > 2;
  *(void *)a2 = v2;
  *(_BYTE *)(a2 + 8) = v3;
  return result;
}

id sub_1000C7EE0()
{
  id result = [objc_allocWithZone(NSOperationQueue) init];
  qword_1002EB918 = (uint64_t)result;
  return result;
}

uint64_t sub_1000C7F10()
{
  return sub_1000C7F78(&OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_quickStart);
}

uint64_t sub_1000C7F1C(uint64_t a1)
{
  return sub_1000C7FC8(a1, &OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_quickStart);
}

uint64_t (*sub_1000C7F28(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000C7F6C()
{
  return sub_1000C7F78(&OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeout);
}

uint64_t sub_1000C7F78(void *a1)
{
  uint64_t v2 = (void *)(v1 + *a1);
  swift_beginAccess(v2, v4, 0LL, 0LL);
  return swift_retain(*v2);
}

uint64_t sub_1000C7FBC(uint64_t a1)
{
  return sub_1000C7FC8(a1, &OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeout);
}

uint64_t sub_1000C7FC8(uint64_t a1, void *a2)
{
  uint64_t v4 = (uint64_t *)(v2 + *a2);
  swift_beginAccess(v4, v7, 1LL, 0LL);
  uint64_t v5 = *v4;
  *uint64_t v4 = a1;
  return swift_release(v5);
}

uint64_t (*sub_1000C8014(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

id sub_1000C8058()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_queue);
}

void *sub_1000C8068()
{
  return &unk_1002493A0;
}

double sub_1000C8074()
{
  return 1.0;
}

void *sub_1000C807C()
{
  return &unk_1002493A8;
}

void *sub_1000C8088()
{
  return &unk_1002493B0;
}

double sub_1000C8094()
{
  return 3600.0;
}

void *sub_1000C80A4()
{
  return &unk_1002493B8;
}

void *sub_1000C80B0()
{
  return &unk_1002493C0;
}

double sub_1000C80BC()
{
  return 1200.0;
}

void *sub_1000C80CC()
{
  return &unk_1002493C8;
}

double sub_1000C80D8()
{
  return 900.0;
}

id KTNetworkTimeoutBucket.init()()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v31 = *(void *)(v1 - 8);
  uint64_t v32 = v1;
  __chkstk_darwin(v1);
  uint64_t v30 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v29);
  id v28 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v4);
  id v27 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeoutDependency;
  *(void *)&v0[OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeoutDependency] = 0LL;
  uint64_t v11 = type metadata accessor for KTBucket(0LL);
  uint64_t v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  *(void *)(v12 + 32) = 0x40AC200000000000LL;
  __int128 v26 = xmmword_100249390;
  *(_OWORD *)(v12 + 16) = xmmword_100249390;
  double v13 = v0;
  Date.init()(v13);
  double v14 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
  v14(v12 + OBJC_IVAR____TtC13transparencyd8KTBucket_lastFilltime, v9, v6);
  *(void *)&v13[OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_quickStart] = v12;
  uint64_t v15 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  *(void *)(v15 + 32) = 0x40AC200000000000LL;
  *(_OWORD *)(v15 + 16) = v26;
  Date.init()(v15);
  v14(v15 + OBJC_IVAR____TtC13transparencyd8KTBucket_lastFilltime, v9, v6);
  *(void *)&v13[OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeout] = v15;
  id v16 = *(void **)&v0[v10];
  *(void *)&v0[v10] = 0LL;

  unint64_t v17 = sub_100080288();
  uint64_t v18 = v27;
  static DispatchQoS.unspecified.getter(v17);
  id v34 = _swiftEmptyArrayStorage;
  uint64_t v19 = sub_100073FE0( (unint64_t *)&unk_1002E20F0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v20 = sub_100072CC4(&qword_1002DF900);
  unint64_t v21 = sub_1000802C4();
  id v22 = v28;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v20, v21, v29, v19);
  id v23 = v30;
  (*(void (**)(char *, void, uint64_t))(v31 + 104))( v30,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v32);
  *(void *)&v13[OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_queue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000016LL,  0x80000001002493B0LL,  v18,  v22,  v23,  0LL);

  id v24 = (objc_class *)type metadata accessor for KTNetworkTimeoutBucket();
  v33.receiver = v13;
  v33.super_class = v24;
  return objc_msgSendSuper2(&v33, "init");
}

uint64_t type metadata accessor for KTBucket(uint64_t a1)
{
  uint64_t result = qword_1002EBB20;
  if (!qword_1002EBB20) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KTBucket);
  }
  return result;
}

uint64_t type metadata accessor for KTNetworkTimeoutBucket()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd22KTNetworkTimeoutBucket);
}

uint64_t KTNetworkTimeoutBucket.sysdiagnose.getter()
{
  return v1[4];
}

void sub_1000C852C(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = swift_bridgeObjectRelease(0xE000000000000000LL);
  strcpy((char *)v17, "Bucket[tokens:");
  HIBYTE(v17[1]) = -18;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0x88LL))(v4);
  v6._countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v5 + 216LL))();
  object = v6._object;
  String.append(_:)(v6);
  swift_release(v5);
  swift_bridgeObjectRelease(object);
  v8._countAndFlagsBits = 0x3A6B636975717CLL;
  v8._object = (void *)0xE700000000000000LL;
  String.append(_:)(v8);
  uint64_t v9 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x70LL))();
  v10._countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v9 + 216LL))();
  uint64_t v11 = v10._object;
  String.append(_:)(v10);
  swift_release(v9);
  swift_bridgeObjectRelease(v11);
  else {
    uint64_t v12 = 0LL;
  }
  else {
    unint64_t v13 = 0xE000000000000000LL;
  }
  unint64_t v14 = v13;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease(v13);
  v15._countAndFlagsBits = 93LL;
  v15._object = (void *)0xE100000000000000LL;
  String.append(_:)(v15);
  uint64_t v16 = v17[1];
  *a2 = v17[0];
  a2[1] = v16;
}

void sub_1000C86B8(void *a1@<X8>)
{
}

NSOperation_optional __swiftcall KTNetworkTimeoutBucket.networkTimeoutOperation()()
{
  uint64_t v0 = sub_100072CC4(&qword_1002E1910);
  OS_dispatch_queue.sync<A>(execute:)(sub_1000C8748, v5, v0);
  uint64_t v4 = (objc_class *)v5[5];
  *(void *)&result.value._private1 = v2;
  result.value._private = v1;
  result.value.super.Class isa = v4;
  result.is_nil = v3;
  return result;
}

uint64_t sub_1000C8748@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000C9290(a1);
}

NSOperation_optional __swiftcall KTNetworkTimeoutBucket.onQueueNetworkTimeoutOperation()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v47 = *(void *)(v2 - 8);
  uint64_t v48 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (uint64_t *)((char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = type metadata accessor for DispatchTime(0LL);
  uint64_t v45 = *(void *)(v5 - 8);
  uint64_t v46 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  Swift::String v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  Swift::String v10 = (char *)&v44 - v9;
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType(0LL);
  uint64_t v50 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  os_log_type_t v49 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (uint64_t *)((char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unint64_t v17 = *(void **)((char *)v1 + OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_queue);
  *uint64_t v16 = v17;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  id v18 = v17;
  char v19 = _dispatchPreconditionTest(_:)(v16);
  uint64_t v20 = (objc_class *)(*(uint64_t (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v44 = v11;
  uint64_t v24 = OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeoutDependency;
  NSString v25 = *(objc_class **)((char *)v1 + OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeoutDependency);
  __int128 v26 = v25;
  if (!v25)
  {
    id v27 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0x88LL);
    uint64_t v28 = ((uint64_t (*)(objc_class *))v27)(v20);
    uint64_t v29 = (*(unsigned __int8 (**)(uint64_t, double))(*(void *)v28 + 224LL))(v28, 900.0);
    swift_release(v28);
    if ((v29 & 1) != 0)
    {
      __int128 v26 = 0LL;
      goto LABEL_9;
    }

    __int128 v26 = (objc_class *)[objc_allocWithZone(NSOperation) init];
    NSString v30 = String._bridgeToObjectiveC()();
    -[objc_class setName:](v26, "setName:", v30);

    uint64_t v31 = v27();
    double v32 = (*(double (**)(uint64_t, double))(*(void *)v31 + 256LL))(v31, 900.0);
    swift_release(v31);
    double v33 = v32 * 1000.0;
    id v51 = v18;
    uint64_t v20 = (objc_class *)static DispatchTime.now()(v18);
    if ((~*(void *)&v33 & 0x7FF0000000000000LL) != 0)
    {
      if (v33 > -9.22337204e18)
      {
        if (v33 < 9.22337204e18)
        {
          *uint64_t v4 = (uint64_t)v33;
          uint64_t v35 = v47;
          uint64_t v34 = v48;
          (*(void (**)(void *, void, uint64_t))(v47 + 104))( v4,  enum case for DispatchTimeInterval.milliseconds(_:),  v48);
          + infix(_:_:)(v8, v4);
          (*(void (**)(void *, uint64_t))(v35 + 8))(v4, v34);
          (*(void (**)(char *, uint64_t))(v45 + 8))(v8, v46);
          os_log_type_t v36 = v49;
          OS_dispatch_queue.SchedulerTimeType.init(_:)(v10);
          uint64_t v37 = swift_allocObject(&unk_10027FD88, 24LL, 7LL);
          *(void *)(v37 + 16) = v1;
          unint64_t v38 = sub_100080288();
          uint64_t v39 = sub_100073FE0( &qword_1002E1918,  (uint64_t (*)(uint64_t))sub_100080288,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
          uint64_t v40 = v1;
          Scheduler.schedule(after:_:)(v36, sub_1000C8BF8, v37, v38, v39);
          swift_release(v37);
          (*(void (**)(char *, uint64_t))(v50 + 8))(v36, v44);

          uint64_t v41 = *(void **)((char *)v1 + v24);
          *(void *)((char *)v1 + v24) = v26;
          id v42 = v26;

          goto LABEL_9;
        }

uint64_t sub_1000C8BD4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000C8BF8()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0xD0LL))();
}

void sub_1000C8C60()
{
  uint64_t v1 = (void *)type metadata accessor for DispatchPredicate(0LL);
  uint64_t v2 = *(v1 - 1);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_queue);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, void *))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(void *, void *))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    swift_once(&qword_1002EB910, sub_1000C7EE0);
    goto LABEL_4;
  }

  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeoutDependency);
  if (!v1) {
    return;
  }
  *(void *)(v0 + OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeoutDependency) = 0LL;
  if (qword_1002EB910 != -1) {
    goto LABEL_7;
  }
LABEL_4:
  [(id)qword_1002EB918 addOperation:v1];
}

uint64_t KTNetworkTimeoutBucket.network(feedback:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType(v2);
  uint64_t v5 = *(dispatch_queue_s **)&v2[OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_queue];
  id v6 = (void *)swift_allocObject(&unk_10027FDB0, 40LL, 7LL);
  void v6[2] = a1;
  v6[3] = v2;
  v6[4] = ObjectType;
  uint64_t v7 = swift_allocObject(&unk_10027FDD8, 32LL, 7LL);
  *(void *)(v7 + 16) = sub_1000C8ED4;
  *(void *)(v7 + 24) = v6;
  v12[4] = sub_1000807AC;
  uint64_t v13 = v7;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256LL;
  v12[2] = sub_1000807CC;
  v12[3] = &unk_10027FDF0;
  Swift::String v8 = _Block_copy(v12);
  uint64_t v9 = v13;
  Swift::String v10 = v2;
  swift_retain(v7);
  swift_release(v9);
  dispatch_sync(v5, v8);
  _Block_release(v8);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation(v7, "", 102LL, 151LL, 25LL, 1LL);
  swift_release(v6);
  uint64_t result = swift_release(v7);
  return result;
}

uint64_t sub_1000C8EB0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000C8ED4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(uint64_t **)(v0 + 24);
  if (v1 != 2)
  {
    if (v1 == 1)
    {
      uint64_t v3 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x88))();
      (*(void (**)(uint64_t, double))(*(void *)v3 + 232LL))(v3, 900.0);
      return swift_release(v3);
    }

    if (v1)
    {
      uint64_t v14 = *(void *)(v0 + 16);
      uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)( &type metadata for KTNetworkBucketFeedback,  &v14,  &type metadata for KTNetworkBucketFeedback,  &type metadata for Int);
      __break(1u);
      return result;
    }

    uint64_t v11 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x88))();
    (*(void (**)(uint64_t))(*(void *)v11 + 248LL))(v11);
    uint64_t v12 = swift_release(v11);
    uint64_t v13 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0x70))(v12);
    (*(void (**)(uint64_t))(*(void *)v13 + 248LL))(v13);
    uint64_t result = swift_release(v13);
    uint64_t v9 = *v2;
    uint64_t v10 = swift_isaMask;
    return (*(uint64_t (**)(uint64_t))((v10 & v9) + 0xD0))(result);
  }

  if (*(uint64_t *)((char *)v2 + OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeoutDependency)
    || (uint64_t v5 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x88))(),
        char v6 = (*(uint64_t (**)(uint64_t, double))(*(void *)v5 + 224LL))(v5, 900.0),
        uint64_t result = swift_release(v5),
        (v6 & 1) == 0))
  {
    uint64_t v7 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x70))();
    char v8 = (*(uint64_t (**)(uint64_t, double))(*(void *)v7 + 232LL))(v7, 1200.0);
    uint64_t result = swift_release(v7);
    if ((v8 & 1) != 0)
    {
      uint64_t v9 = *v2;
      uint64_t v10 = swift_isaMask;
      return (*(uint64_t (**)(uint64_t))((v10 & v9) + 0xD0))(result);
    }
  }

  return result;
}

uint64_t sub_1000C90C0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000C90D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000C90E0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

id KTNetworkTimeoutBucket.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KTNetworkTimeoutBucket();
  return objc_msgSendSuper2(&v2, "dealloc");
}

unint64_t sub_1000C91B4()
{
  unint64_t result = qword_1002E1920;
  if (!qword_1002E1920)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for KTNetworkBucketFeedback,  &type metadata for KTNetworkBucketFeedback);
    atomic_store(result, (unint64_t *)&qword_1002E1920);
  }

  return result;
}

uint64_t sub_1000C91F8()
{
  return type metadata accessor for KTBucket(0LL);
}

uint64_t sub_1000C9200(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  void v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[3] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 4LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for KTNetworkBucketFeedback()
{
  return &type metadata for KTNetworkBucketFeedback;
}

uint64_t sub_1000C9290@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v1 + 16)) + 0xC8LL))();
  *a1 = result;
  return result;
}

void sub_1000C92E0(void *a1@<X8>)
{
}

uint64_t sub_1000C92F4()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100077D38(v0, qword_1002EBB38);
  sub_100072DEC(v0, (uint64_t)qword_1002EBB38);
  return Logger.init(transparencyCategory:)(0xD00000000000001BLL, 0x80000001002108A0LL);
}

void sub_1000C9354()
{
  byte_1002EBB58 = 1;
  qword_1002EBB60 = 0xEE00657461647055LL;
}

id KTUpdateCloudStorageOperation.__allocating_init(deps:source:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = objc_allocWithZone(v3);
  v7[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_shouldRetry] = 0;
  *(void *)&v7[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_deps] = a1;
  *(void *)&v7[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_source] = a2;
  *(void *)&v7[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_context] = a3;
  v9.receiver = v7;
  v9.super_class = v3;
  return objc_msgSendSuper2(&v9, "init");
}

id KTUpdateCloudStorageOperation.init(deps:source:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_shouldRetry] = 0;
  *(void *)&v3[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_deps] = a1;
  *(void *)&v3[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_source] = a2;
  *(void *)&v3[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_context] = a3;
  v5.receiver = v3;
  v5.super_class = (Class)type metadata accessor for KTUpdateCloudStorageOperation();
  return objc_msgSendSuper2(&v5, "init");
}

uint64_t type metadata accessor for KTUpdateCloudStorageOperation()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd29KTUpdateCloudStorageOperation);
}

Swift::Void __swiftcall KTUpdateCloudStorageOperation.groupStart()()
{
  uint64_t v1 = v0;
  id v2 = [*(id *)&v0[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_deps] ckdatabase];
  if (v2)
  {
    id v30 = v2;
    unint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_source];
    id v4 = [v3 pendingRecords];
    uint64_t v5 = sub_10007D178(0LL, &qword_1002E16D0, &OBJC_CLASS___CKRecord_ptr);
    uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

    id v7 = [v3 deletedRecords];
    uint64_t v8 = sub_10007D178(0LL, (unint64_t *)&unk_1002E0450, &OBJC_CLASS___CKRecordID_ptr);
    uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

    if ((unint64_t)v6 >> 62)
    {
      if (v6 < 0) {
        uint64_t v21 = v6;
      }
      else {
        uint64_t v21 = v6 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v6);
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter(v21);
      swift_bridgeObjectRelease(v6);
      if (v22) {
        goto LABEL_6;
      }
    }

    else if (*(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
LABEL_6:
      v32.value._rawValue = (void *)sub_10007D178( 0LL,  (unint64_t *)&qword_1002E08A0,  &OBJC_CLASS___CKModifyRecordsOperation_ptr);
      v31.value._rawValue = (void *)v6;
      v31.is_nil = v9;
      uint64_t v10 = (void *)CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v31, v32);
      [v10 setQualityOfService:25];
      id v11 = v10;
      NSString v12 = String._bridgeToObjectiveC()();
      [v11 setName:v12];

      id v13 = [objc_allocWithZone(NSBlockOperation) init];
      [v1 dependOnBeforeGroupFinished:v13];
      uint64_t v14 = swift_allocObject(&unk_10027FEB0, 24LL, 7LL);
      *(void *)(v14 + 16) = v1;
      id v15 = v1;
      CKModifyRecordsOperation.perRecordSaveBlock.setter(sub_1000C98FC, v14);
      uint64_t v16 = swift_allocObject(&unk_10027FED8, 24LL, 7LL);
      *(void *)(v16 + 16) = v15;
      id v17 = v15;
      CKModifyRecordsOperation.perRecordDeleteBlock.setter(sub_1000CAB58, v16);
      uint64_t v18 = swift_allocObject(&unk_10027FF00, 32LL, 7LL);
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = v13;
      id v19 = v17;
      id v20 = v13;
      CKModifyRecordsOperation.modifyRecordsResultBlock.setter(sub_1000CAF4C, v18);
      [v30 addOperation:v11];

      id v30 = v20;
LABEL_7:

      return;
    }

    if ((unint64_t)v9 >> 62)
    {
      if (v9 < 0) {
        uint64_t v23 = v9;
      }
      else {
        uint64_t v23 = v9 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v9);
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter(v23);
      swift_bridgeObjectRelease(v9);
      if (v24) {
        goto LABEL_6;
      }
    }

    else if (*(void *)((v9 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      goto LABEL_6;
    }

    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v6);
    if (qword_1002EBB30 != -1) {
      swift_once(&qword_1002EBB30, sub_1000C92F4);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    uint64_t v26 = sub_100072DEC(v25, (uint64_t)qword_1002EBB38);
    uint64_t v27 = static os_log_type_t.info.getter(v26);
    os_log_type_t v28 = v27;
    id v11 = (id)Logger.logObject.getter(v27);
    if (os_log_type_enabled((os_log_t)v11, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v11,  v28,  "KTUpdateCloudStorageOperation:perRecordSaveBlock: no records to upload/delete",  v29,  2u);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    goto LABEL_7;
  }

uint64_t sub_1000C98D8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1000C98FC(void *a1, void *a2, char a3)
{
  uint64_t v138 = *(char **)(v3 + 16);
  uint64_t v5 = *(void **)&v138[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_deps];
  if ((a3 & 1) != 0)
  {
    swift_errorRetain(a2);
    uint64_t v136 = v5;
    id v21 = [v5 logger];
    if (qword_1002EBB50 != -1) {
      swift_once(&qword_1002EBB50, sub_1000C9354);
    }
    NSString v22 = String._bridgeToObjectiveC()();
    uint64_t v23 = (void *)_convertErrorToNSError(_:)(a2);
    [v21 logResultForEvent:v22 hardFailure:1 result:v23];

    if (qword_1002EBB30 != -1) {
      swift_once(&qword_1002EBB30, sub_1000C92F4);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    sub_100072DEC(v24, (uint64_t)qword_1002EBB38);
    sub_10007EAE4(a2, 1);
    id v25 = a1;
    sub_10007EAE4(a2, 1);
    id v26 = v25;
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = ((uint64_t (*)(void))static os_log_type_t.error.getter)();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc(22LL, -1LL);
      id v30 = (void *)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)uint64_t v29 = 138412546;
      id v142 = v26;
      id v31 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v29 + 4, v29 + 12);
      *id v30 = v26;

      *(_WORD *)(v29 + 12) = 2112;
      swift_errorRetain(a2);
      uint64_t v32 = _swift_stdlib_bridgeErrorToNSError(a2);
      id v142 = (id)v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v29 + 14, v29 + 22);
      v30[1] = v32;
      sub_10007EAF0(a2, 1);
      sub_10007EAF0(a2, 1);
      _os_log_impl( (void *)&_mh_execute_header,  v27,  v28,  "KTUpdateCloudStorageOperation:perRecordSaveBlock: fail: %@ %@",  (uint8_t *)v29,  0x16u);
      uint64_t v33 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
      swift_arrayDestroy(v30, 2LL, v33);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    else
    {

      sub_10007EAF0(a2, 1);
      sub_10007EAF0(a2, 1);
    }

    id v142 = a2;
    swift_errorRetain(a2);
    uint64_t v44 = sub_100072CC4(&qword_1002DF260);
    type metadata accessor for CKError(0LL);
    uint64_t v46 = v45;
    if ((swift_dynamicCast(&v141, &v142, v44, v45, 6LL) & 1) == 0)
    {
      sub_10007EAE4(a2, 1);
      id v61 = v26;
      sub_10007EAE4(a2, 1);
      id v62 = v61;
      uint64_t v63 = (os_log_s *)Logger.logObject.getter(v62);
      os_log_type_t v64 = ((uint64_t (*)(void))static os_log_type_t.error.getter)();
      if (os_log_type_enabled(v63, v64))
      {
        uint64_t v65 = swift_slowAlloc(22LL, -1LL);
        unsigned int v66 = (void *)swift_slowAlloc(16LL, -1LL);
        *(_DWORD *)uint64_t v65 = 138412546;
        id v142 = v62;
        id v67 = v62;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v65 + 4, v65 + 12);
        *unsigned int v66 = v62;

        *(_WORD *)(v65 + 12) = 2112;
        swift_errorRetain(a2);
        uint64_t v68 = _swift_stdlib_bridgeErrorToNSError(a2);
        id v142 = (id)v68;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v65 + 14, v65 + 22);
        v66[1] = v68;
        sub_10007EAF0(a2, 1);
        sub_10007EAF0(a2, 1);
        _os_log_impl( (void *)&_mh_execute_header,  v63,  v64,  "KTUpdateCloudStorageOperation:perRecordSaveBlock: fail: %@ %@",  (uint8_t *)v65,  0x16u);
        uint64_t v69 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
        swift_arrayDestroy(v66, 2LL, v69);
        swift_slowDealloc(v66, -1LL, -1LL);
        swift_slowDealloc(v65, -1LL, -1LL);
      }

      else
      {

        sub_10007EAF0(a2, 1);
        sub_10007EAF0(a2, 1);
      }

      uint64_t v70 = (void *)_convertErrorToNSError(_:)(a2);
      [v138 setError:v70];
      sub_10007EAF0(a2, 1);

      return;
    }

    uint64_t v47 = v141;
    uint64_t v48 = sub_100073FE0( &qword_1002DF760,  (uint64_t (*)(uint64_t))type metadata accessor for CKError,  (uint64_t)&unk_100247F80);
    os_log_type_t v49 = _BridgedStoredNSError.code.getter(&v142, v46, v48);
    if (v142 == (id)11)
    {
      sub_10007EAE4(a2, 1);
      id v71 = v26;
      sub_10007EAE4(a2, 1);
      id v72 = v71;
      uint64_t v73 = (os_log_s *)Logger.logObject.getter(v72);
      os_log_type_t v74 = ((uint64_t (*)(void))static os_log_type_t.error.getter)();
      if (os_log_type_enabled(v73, v74))
      {
        uint64_t v75 = swift_slowAlloc(22LL, -1LL);
        NSString v76 = (void *)swift_slowAlloc(16LL, -1LL);
        *(_DWORD *)uint64_t v75 = 138412546;
        id v141 = v72;
        NSString v77 = v47;
        id v78 = v72;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v75 + 4, v75 + 12);
        *NSString v76 = v72;

        uint64_t v47 = v77;
        *(_WORD *)(v75 + 12) = 2112;
        swift_errorRetain(a2);
        uint64_t v79 = _swift_stdlib_bridgeErrorToNSError(a2);
        id v141 = (id)v79;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v75 + 14, v75 + 22);
        v76[1] = v79;
        sub_10007EAF0(a2, 1);
        sub_10007EAF0(a2, 1);
        _os_log_impl( (void *)&_mh_execute_header,  v73,  v74,  "KTUpdateCloudStorageOperation:perRecordSaveBlock: deleted: %@ %@",  (uint8_t *)v75,  0x16u);
        uint64_t v80 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
        swift_arrayDestroy(v76, 2LL, v80);
        swift_slowDealloc(v76, -1LL, -1LL);
        swift_slowDealloc(v75, -1LL, -1LL);
      }

      else
      {

        sub_10007EAF0(a2, 1);
        sub_10007EAF0(a2, 1);
      }

      uint64_t v113 = related decl 'e' for CKErrorCode.ancestorRecord.getter(v47);
      if (v113)
      {
        unint64_t v114 = (void *)v113;
        [*(id *)&v138[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_source] deleteRecordWithCkrecord:v113];
        sub_10007EAF0(a2, 1);

LABEL_50:
        return;
      }

      [*(id *)&v138[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_source] deleteRecordIDWithCkrecordID:v72];
    }

    else
    {
      if (v142 == (id)26)
      {
        type metadata accessor for KTCKZone();
        uint64_t v81 = sub_100078588((uint64_t)*(id *)&v138[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_context]);
        id v82 = [v26 zoneID];
        id v83 = [v82 zoneName];

        uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
        uint64_t v86 = v85;

        id v139 = (id)v81;
        (*(void (**)(uint64_t, uint64_t, uint64_t (*)(void *), void))(*(void *)v81 + 120LL))( v84,  v86,  sub_10007BE00,  0LL);
        swift_bridgeObjectRelease(v86);
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"CloudKitZoneRecreate");
        uint64_t v88 = v87;
        id v89 = objc_allocWithZone((Class)&OBJC_CLASS___KTPendingFlag);
        NSString v90 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v88);
        id v91 = [v89 initWithFlag:v90 delayInSeconds:0.1];

        id v92 = v26;
        uint64_t v93 = (os_log_s *)Logger.logObject.getter(v92);
        os_log_type_t v94 = ((uint64_t (*)(void))static os_log_type_t.error.getter)();
        if (os_log_type_enabled(v93, v94))
        {
          char v95 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          *(void *)typea = v47;
          uint64_t v96 = swift_slowAlloc(32LL, -1LL);
          id v141 = (id)v96;
          *(_DWORD *)char v95 = 136315138;
          id v97 = [v92 zoneID];
          id v98 = [v97 zoneName];

          uint64_t v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(v98);
          unint64_t v101 = v100;

          uint64_t v140 = sub_10007C22C(v99, v101, (uint64_t *)&v141);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v95 + 4, v95 + 12);
          swift_bridgeObjectRelease(v101);

          _os_log_impl((void *)&_mh_execute_header, v93, v94, "will recreate the zone %s", v95, 0xCu);
          swift_arrayDestroy(v96, 1LL, (char *)&type metadata for Any + 8);
          uint64_t v102 = v96;
          uint64_t v47 = *(void **)typea;
          swift_slowDealloc(v102, -1LL, -1LL);
          swift_slowDealloc(v95, -1LL, -1LL);
        }

        else
        {
        }

        id v115 = [v136 flagHandler];
        if (v115)
        {
          id v116 = v115;
          [v115 handlePendingFlag:v91];
          sub_10007EAF0(a2, 1);

          swift_unknownObjectRelease(v116);
        }

        else
        {
          sub_10007EAF0(a2, 1);
        }

        swift_release(v139);
        return;
      }

      if (v142 == (id)14)
      {
        uint64_t v50 = related decl 'e' for CKErrorCode.serverRecord.getter(v47);
        if (v50)
        {
          id v51 = (void *)v50;
          sub_10007EAE4(a2, 1);
          id v52 = v26;
          sub_10007EAE4(a2, 1);
          id v53 = v52;
          unint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
          os_log_type_t v55 = static os_log_type_t.error.getter(v54);
          if (os_log_type_enabled(v54, v55))
          {
            uint64_t v56 = swift_slowAlloc(22LL, -1LL);
            id v57 = (void *)swift_slowAlloc(16LL, -1LL);
            *(_DWORD *)uint64_t v56 = 138412546;
            os_log_type_t type = v55;
            id v141 = v53;
            uint64_t v137 = v54;
            id v58 = v53;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v56 + 4, v56 + 12);
            *id v57 = v53;

            *(_WORD *)(v56 + 12) = 2112;
            swift_errorRetain(a2);
            uint64_t v59 = _swift_stdlib_bridgeErrorToNSError(a2);
            id v141 = (id)v59;
            unint64_t v54 = v137;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v56 + 14, v56 + 22);
            v57[1] = v59;
            sub_10007EAF0(a2, 1);
            sub_10007EAF0(a2, 1);
            _os_log_impl( (void *)&_mh_execute_header,  v137,  type,  "KTUpdateCloudStorageOperation:perRecordSaveBlock: serverRecord: %@ %@",  (uint8_t *)v56,  0x16u);
            uint64_t v60 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
            swift_arrayDestroy(v57, 2LL, v60);
            swift_slowDealloc(v57, -1LL, -1LL);
            swift_slowDealloc(v56, -1LL, -1LL);
          }

          else
          {

            sub_10007EAF0(a2, 1);
            sub_10007EAF0(a2, 1);
          }

          int64_t v118 = *(void **)&v138[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_source];
          CKRecord.recordType.getter([v118 updatedRecordWithCkrecord:v51]);
          uint64_t v128 = v127;
          NSString v121 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v128);
          uint64_t v129 = sub_100072CC4(&qword_1002E0AE0);
          uint64_t v130 = swift_allocObject(v129, 40LL, 7LL);
          *(_OWORD *)(v130 + 16) = xmmword_1002487A0;
          id v131 = [v51 recordID];
          *(void *)(v130 + 32) = v131;
          id v141 = (id)v130;
          specialized Array._endMutation()(v131);
          uint64_t v132 = (uint64_t)v141;
          sub_10007D178(0LL, (unint64_t *)&unk_1002E0450, &OBJC_CLASS___CKRecordID_ptr);
          v126.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v132);
          goto LABEL_49;
        }
      }

      else
      {
        os_log_type_t v103 = static os_log_type_t.error.getter(v49);
        sub_10007EAE4(a2, 1);
        id v104 = v26;
        sub_10007EAE4(a2, 1);
        id v105 = v104;
        uint64_t v106 = (os_log_s *)Logger.logObject.getter(v105);
        if (os_log_type_enabled(v106, v103))
        {
          uint64_t v107 = swift_slowAlloc(22LL, -1LL);
          uint64_t v108 = (void *)swift_slowAlloc(16LL, -1LL);
          *(_DWORD *)uint64_t v107 = 138412546;
          id v141 = v105;
          uint64_t v109 = v47;
          id v110 = v105;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v107 + 4, v107 + 12);
          *uint64_t v108 = v105;

          uint64_t v47 = v109;
          *(_WORD *)(v107 + 12) = 2112;
          swift_errorRetain(a2);
          uint64_t v111 = _swift_stdlib_bridgeErrorToNSError(a2);
          id v141 = (id)v111;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v107 + 14, v107 + 22);
          v108[1] = v111;
          sub_10007EAF0(a2, 1);
          sub_10007EAF0(a2, 1);
          _os_log_impl( (void *)&_mh_execute_header,  v106,  v103,  "KTUpdateCloudStorageOperation:perRecordSaveBlock: ck fail: %@ %@",  (uint8_t *)v107,  0x16u);
          uint64_t v112 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
          swift_arrayDestroy(v108, 2LL, v112);
          swift_slowDealloc(v108, -1LL, -1LL);
          swift_slowDealloc(v107, -1LL, -1LL);
        }

        else
        {

          sub_10007EAF0(a2, 1);
          sub_10007EAF0(a2, 1);
        }

        uint64_t v117 = related decl 'e' for CKErrorCode.ancestorRecord.getter(v47);
        if (v117)
        {
          id v51 = (void *)v117;
          int64_t v118 = *(void **)&v138[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_source];
          CKRecord.recordType.getter(v117);
          uint64_t v120 = v119;
          NSString v121 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v120);
          uint64_t v122 = sub_100072CC4(&qword_1002E0AE0);
          uint64_t v123 = swift_allocObject(v122, 40LL, 7LL);
          *(_OWORD *)(v123 + 16) = xmmword_1002487A0;
          id v124 = [v51 recordID];
          *(void *)(v123 + 32) = v124;
          id v141 = (id)v123;
          specialized Array._endMutation()(v124);
          uint64_t v125 = (uint64_t)v141;
          sub_10007D178(0LL, (unint64_t *)&unk_1002E0450, &OBJC_CLASS___CKRecordID_ptr);
          v126.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v125);
LABEL_49:
          NSString v133 = String._bridgeToObjectiveC()();
          [v118 recordUpdateCloudStateWithType:v121 records:v126.super.isa newState:v133];
          sub_10007EAF0(a2, 1);

          goto LABEL_50;
        }
      }
    }

    sub_10007EAF0(a2, 1);
    goto LABEL_50;
  }

  id v6 = a2;
  id v7 = v5;
  id v8 = v6;
  id v9 = [v7 logger];
  if (qword_1002EBB50 != -1) {
    swift_once(&qword_1002EBB50, sub_1000C9354);
  }
  NSString v10 = String._bridgeToObjectiveC()();
  [v9 logResultForEvent:v10 hardFailure:0 result:0];

  if (qword_1002EBB30 != -1) {
    swift_once(&qword_1002EBB30, sub_1000C92F4);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = sub_100072DEC(v11, (uint64_t)qword_1002EBB38);
  os_log_type_t v13 = static os_log_type_t.info.getter(v12);
  id v14 = v8;
  id v15 = (os_log_s *)Logger.logObject.getter(v14);
  if (os_log_type_enabled(v15, v13))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v17 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v16 = 138412290;
    id v142 = v14;
    id v18 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v16 + 4, v16 + 12);
    void *v17 = a2;
    sub_10007EAF0(a2, 0);
    sub_10007EAF0(a2, 0);
    _os_log_impl( (void *)&_mh_execute_header,  v15,  v13,  "KTUpdateCloudStorageOperation:perRecordSaveBlock: success: %@",  v16,  0xCu);
    uint64_t v19 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
    swift_arrayDestroy(v17, 1LL, v19);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  else
  {
    sub_10007EAF0(a2, 0);
    sub_10007EAF0(a2, 0);
  }

  uint64_t v34 = *(void **)&v138[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_source];
  CKRecord.recordType.getter([v34 updatedRecordWithCkrecord:v14]);
  uint64_t v36 = v35;
  NSString v37 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v36);
  uint64_t v38 = sub_100072CC4(&qword_1002E0AE0);
  uint64_t v39 = swift_allocObject(v38, 40LL, 7LL);
  *(_OWORD *)(v39 + 16) = xmmword_1002487A0;
  id v40 = [v14 recordID];
  *(void *)(v39 + 32) = v40;
  id v142 = (id)v39;
  specialized Array._endMutation()(v40);
  id v41 = v142;
  sub_10007D178(0LL, (unint64_t *)&unk_1002E0450, &OBJC_CLASS___CKRecordID_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v41);
  NSString v43 = String._bridgeToObjectiveC()();
  [v34 recordUpdateCloudStateWithType:v37 records:isa newState:v43];

  sub_10007EAF0(a2, 0);
}

void sub_1000CAB58(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
  {
    swift_errorRetain(a2);
    if (qword_1002EBB30 != -1) {
      swift_once(&qword_1002EBB30, sub_1000C92F4);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    uint64_t v16 = sub_100072DEC(v15, (uint64_t)qword_1002EBB38);
    os_log_type_t v17 = static os_log_type_t.error.getter(v16);
    id v18 = a1;
    sub_1000CB5D4(a2, 1);
    id v19 = v18;
    uint64_t v20 = sub_1000CB5D4(a2, 1);
    os_log_type_t v21 = v17;
    log = (os_log_s *)Logger.logObject.getter(v20);
    if (os_log_type_enabled(log, v17))
    {
      uint64_t v22 = swift_slowAlloc(22LL, -1LL);
      uint64_t v23 = (void *)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)uint64_t v22 = 138412546;
      uint64_t v28 = (uint64_t)v19;
      id v24 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v22 + 4, v22 + 12);
      void *v23 = v19;

      *(_WORD *)(v22 + 12) = 2112;
      swift_errorRetain(a2);
      uint64_t v25 = _swift_stdlib_bridgeErrorToNSError(a2);
      uint64_t v28 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v22 + 14, v22 + 22);
      v23[1] = v25;
      sub_10007EAD8(a2, 1);
      sub_10007EAD8(a2, 1);
      _os_log_impl( (void *)&_mh_execute_header,  log,  v21,  "KTUpdateCloudStorageOperation:perRecordDeleteBlock: fail: %@ %@",  (uint8_t *)v22,  0x16u);
      uint64_t v26 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
      swift_arrayDestroy(v23, 2LL, v26);
      swift_slowDealloc(v23, -1LL, -1LL);
      swift_slowDealloc(v22, -1LL, -1LL);

      sub_10007EAD8(a2, 1);
    }

    else
    {
      sub_10007EAD8(a2, 1);

      sub_10007EAD8(a2, 1);
      sub_10007EAD8(a2, 1);
    }
  }

  else
  {
    uint64_t v5 = *(void *)(v3 + 16);
    if (qword_1002EBB30 != -1) {
      swift_once(&qword_1002EBB30, sub_1000C92F4);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    sub_100072DEC(v6, (uint64_t)qword_1002EBB38);
    id v7 = a1;
    id v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      NSString v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v11 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)NSString v10 = 138412290;
      uint64_t v28 = (uint64_t)v7;
      id v12 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v10 + 4, v10 + 12);
      void *v11 = v7;

      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "KTUpdateCloudStorageOperation:perRecordDeleteBlock: success: %@",  v10,  0xCu);
      uint64_t v13 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
      swift_arrayDestroy(v11, 1LL, v13);
      swift_slowDealloc(v11, -1LL, -1LL);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    else
    {
    }

    [*(id *)(v5 + OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_source) deleteRecordIDWithCkrecordID:v7];
  }

uint64_t sub_1000CAF20()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1000CAF4C(uint64_t a1, char a2)
{
  id v4 = *(char **)(v2 + 16);
  uint64_t v3 = *(void *)(v2 + 24);
  if ((a2 & 1) == 0)
  {
    if (qword_1002EBB30 != -1) {
      swift_once(&qword_1002EBB30, sub_1000C92F4);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    uint64_t v6 = sub_100072DEC(v5, (uint64_t)qword_1002EBB38);
    uint64_t v7 = static os_log_type_t.error.getter(v6);
    os_log_type_t v8 = v7;
    os_log_type_t v9 = (os_log_s *)Logger.logObject.getter(v7);
    if (os_log_type_enabled(v9, v8))
    {
      NSString v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)NSString v10 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  v8,  "KTUpdateCloudStorageOperation:modifyRecordsResultBlock: success",  v10,  2u);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    id v11 =  [*(id *)&v4[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_deps] networkTimeout];
    [v11 networkWithFeedback:0];
    swift_unknownObjectRelease(v11);
    goto LABEL_30;
  }

  swift_errorRetain(a1);
  uint64_t v13 = (void *)_convertErrorToNSError(_:)(a1);
  [v4 setError:v13];

  if (qword_1002EBB30 != -1) {
    swift_once(&qword_1002EBB30, sub_1000C92F4);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v15 = sub_100072DEC(v14, (uint64_t)qword_1002EBB38);
  os_log_type_t v16 = static os_log_type_t.error.getter(v15);
  swift_errorRetain(a1);
  uint64_t v17 = swift_errorRetain(a1);
  id v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = v16;
  if (os_log_type_enabled(v18, v16))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    os_log_type_t v21 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v20 = 138412290;
    swift_errorRetain(a1);
    uint64_t v22 = _swift_stdlib_bridgeErrorToNSError(a1);
    uint64_t v43 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v20 + 4, v20 + 12);
    *os_log_type_t v21 = v22;
    sub_10007EAD8(a1, 1);
    sub_10007EAD8(a1, 1);
    _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "KTUpdateCloudStorageOperation:modifyRecordsResultBlock: fail: %@",  v20,  0xCu);
    uint64_t v23 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
    swift_arrayDestroy(v21, 1LL, v23);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  else
  {
    sub_10007EAD8(a1, 1);
    sub_10007EAD8(a1, 1);
  }

  id v24 = (void *)_convertErrorToNSError(_:)(a1);
  uint64_t v25 = (void *)_convertErrorToNSError(_:)(v24);
  double v26 = CKRetryAfterSecondsForError(v25);

  uint64_t v27 = *(void **)&v4[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_deps];
  id v28 = [v27 reachabilityTracker];
  uint64_t v29 = (void *)_convertErrorToNSError(_:)(a1);
  unsigned int v30 = [v28 isNetworkError:v29];

  if (v30)
  {
    if (v26 < 0.1) {
      double v26 = 2.0;
    }
    id v31 = objc_allocWithZone((Class)&OBJC_CLASS___KTPendingFlag);
    NSString v32 = String._bridgeToObjectiveC()();
    id v33 = [v31 initWithFlag:v32 conditions:2 delayInSeconds:v26];

    if (!v33) {
      goto LABEL_27;
    }
LABEL_25:
    id v39 = v33;
    id v40 = [v27 flagHandler];
    if (v40)
    {
      id v41 = v40;
      [v40 handlePendingFlag:v39];

      sub_10007EAD8(a1, 1);
      swift_unknownObjectRelease(v41);
    }

    else
    {

      sub_10007EAD8(a1, 1);
    }

    goto LABEL_30;
  }

  id v34 = [v27 cloudKitOutgoingNFS];
  if (!v34)
  {
LABEL_27:
    sub_10007EAD8(a1, 1);

LABEL_30:
    id v42 = [v4 operationQueue];
    [v42 addOperation:v3];

    return;
  }

  uint64_t v35 = v34;
  if (v26 > 0.1)
  {
LABEL_24:
    id v36 = objc_allocWithZone((Class)&OBJC_CLASS___KTPendingFlag);
    id v37 = v35;
    NSString v38 = String._bridgeToObjectiveC()();
    id v33 = [v36 initWithFlag:v38 scheduler:v37];

    [v37 trigger];
    if (v33) {
      goto LABEL_25;
    }
    goto LABEL_27;
  }

  if ((~*(void *)&v26 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_32;
  }

  if (v26 <= -1.0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  if (v26 >= 1.84467441e19)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  if (is_mul_ok((unint64_t)v26, 0x3B9ACA00uLL))
  {
    [v34 waitUntil:1000000000 * (unint64_t)v26];
    goto LABEL_24;
  }

void KTUpdateCloudStorageOperation.init()()
{
}

id KTUpdateCloudStorageOperation.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KTUpdateCloudStorageOperation();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000CB5D4(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRetain();
  }
  return result;
}

void *sub_1000CB5E4()
{
  return &unk_100280048;
}

uint64_t sub_1000CB5F0()
{
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1002E1AF8 + dword_1002E1AF8);
  uint64_t v1 = (void *)swift_task_alloc(unk_1002E1AFC);
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_1000CB648;
  return v3();
}

uint64_t sub_1000CB648(char a1)
{
  uint64_t v4 = *(void *)(*v2 + 16);
  uint64_t v5 = *v2;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v6 = 0LL;
  }
  else {
    uint64_t v6 = a1 & 1;
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_1000CB6A4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    uint64_t v5 = sub_100072CC4(&qword_1002DF260);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *uint64_t v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else
  {
    id v12 = a2;
    uint64_t v10 = *(void *)(*(void *)(v3 + 64) + 40LL);
    id v11 = a2;
    sub_1000A9A0C((uint64_t)&v12, v10, &qword_1002E1BE8);
    return swift_continuation_throwingResume(v3);
  }

uint64_t sub_1000CB74C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    uint64_t v5 = sub_100072CC4(&qword_1002DF260);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *uint64_t v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else
  {
    if (a2)
    {
      uint64_t v11 = sub_100072CC4((uint64_t *)&unk_1002E1BD8);
      uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a2,  &type metadata for String,  v11,  &protocol witness table for String);
    }

    else
    {
      uint64_t v12 = 0LL;
    }

    uint64_t v13 = v12;
    sub_1000A9A0C((uint64_t)&v13, *(void *)(*(void *)(v3 + 64) + 40LL), &qword_1002E1BD0);
    return swift_continuation_throwingResume(v3);
  }

uint64_t sub_1000CB940(const void *a1)
{
  *(void *)(v1 + 16) = _Block_copy(a1);
  uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_1002E1AF8 + dword_1002E1AF8);
  objc_super v2 = (void *)swift_task_alloc(unk_1002E1AFC);
  *(void *)(v1 + 24) = v2;
  *objc_super v2 = v1;
  v2[1] = sub_1000CB9A0;
  return v4();
}

uint64_t sub_1000CB9A0(char a1)
{
  uint64_t v4 = *(void *)(*v2 + 24);
  uint64_t v5 = *v2;
  swift_task_dealloc(v4);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v1)
  {
    uint64_t v7 = (void *)_convertErrorToNSError(_:)(v1);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t, void, void *))(v6 + 16))(v6, 0LL, v7);
  }

  else
  {
    (*(void (**)(void, void, void))(v6 + 16))(*(void *)(v5 + 16), a1 & 1, 0LL);
  }

  _Block_release(*(const void **)(v5 + 16));
  return (*(uint64_t (**)(void))(v5 + 8))();
}

void sub_1000CBA44(char *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100072CC4(&qword_1002DF250);
  __chkstk_darwin(v6);
  id v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v9 = [(id)objc_opt_self(NSFileManager) defaultManager];
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v9 containerURLForSecurityApplicationGroupIdentifier:v10];

  if (v11)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v11);

    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v12(v8, v5, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0LL, 1LL, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1LL, v2) != 1)
    {

      v12(a1, v8, v2);
      return;
    }
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1LL, 1LL, v2);
  }

  sub_100077CFC((uint64_t)v8, &qword_1002DF250);
  unint64_t v13 = sub_100095E84();
  uint64_t v14 = swift_allocError(&type metadata for KTEligibilityError, v13, 0LL, 0LL);
  *uint64_t v15 = 2LL;
  swift_willThrow(v14);
}

id sub_1000CBD18()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EligibilitySupport();
  return objc_msgSendSuper2(&v2, "init");
}

id sub_1000CBD84()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EligibilitySupport();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000CBDB4()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  v0[42] = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  v0[43] = v2;
  v0[44] = swift_task_alloc((*(void *)(v2 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000CBE10, 0LL, 0LL);
}

uint64_t sub_1000CBE10()
{
  uint64_t v1 = v0 + 2;
  id v2 = [objc_allocWithZone(ACAccountStore) init];
  v0[45] = v2;
  v0[7] = v0 + 40;
  v0[2] = v0;
  v0[3] = sub_1000CBEC8;
  uint64_t v3 = swift_continuation_init(v0 + 2, 1LL);
  v0[23] = _NSConcreteStackBlock;
  uint64_t v4 = v0 + 23;
  v4[1] = 0x40000000LL;
  void v4[2] = sub_1000CB6A4;
  v4[3] = &unk_100280128;
  void v4[4] = v3;
  objc_msgSend(v2, "aa_primaryAppleAccountWithCompletion:", v4);
  return swift_continuation_await(v1);
}

uint64_t sub_1000CBEC8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 368LL) = v1;
  if (v1) {
    id v2 = sub_1000CC4E8;
  }
  else {
    id v2 = sub_1000CBF28;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000CBF28()
{
  uint64_t v1 = *(void **)(v0 + 320);
  *(void *)(v0 + 376) = v1;
  if (v1)
  {
    id v2 = v1;
    id v3 = objc_msgSend(v2, "aa_altDSID");
    *(void *)(v0 + 384) = v3;
    id v4 = [objc_allocWithZone(AKAppleIDAuthenticationController) init];
    *(void *)(v0 + 392) = v4;
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = v0 + 80;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      *(void *)(v0 + 400) = isa;
      *(void *)(v0 + 120) = v0 + 328;
      *(void *)(v0 + 80) = v0;
      *(void *)(v0 + 88) = sub_1000CC280;
      uint64_t v8 = swift_continuation_init(v0 + 80, 1LL);
      *(void *)(v0 + 144) = _NSConcreteStackBlock;
      id v9 = (void *)(v0 + 144);
      v9[1] = 0x40000000LL;
      v9[2] = sub_1000CB74C;
      v9[3] = &unk_100280140;
      v9[4] = v8;
      [v5 configurationInfoWithIdentifiers:isa forAltDSID:v3 completion:v9];
      return swift_continuation_await(v6);
    }

    uint64_t v17 = *(void **)(v0 + 360);

    double v26 = (void *)objc_opt_self(&OBJC_CLASS___TransparencyError);
    uint64_t v27 = sub_100093410();
    swift_beginAccess(v27, v0 + 296, 0LL, 0LL);
    uint64_t v28 = v27[1];
    swift_bridgeObjectRetain(v28);
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v28);
    NSString v30 = String._bridgeToObjectiveC()();
    [v26 errorWithDomain:v29 code:-396 underlyingError:0 userinfo:0 description:v30];

    swift_willThrow(v31);
  }

  else
  {
    uint64_t v11 = Logger.init()();
    uint64_t v12 = static os_log_type_t.error.getter(v11);
    os_log_type_t v13 = v12;
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v12);
    if (os_log_type_enabled(v14, v13))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v13, "Can't report eligibility, no primary account found", v15, 2u);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    uint64_t v16 = *(void *)(v0 + 352);
    uint64_t v17 = *(void **)(v0 + 360);
    uint64_t v18 = *(void *)(v0 + 336);
    uint64_t v19 = *(void *)(v0 + 344);

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v16, v18);
    uint64_t v20 = (void *)objc_opt_self(&OBJC_CLASS___TransparencyError);
    os_log_type_t v21 = sub_100093410();
    swift_beginAccess(v21, v0 + 272, 0LL, 0LL);
    uint64_t v22 = v21[1];
    swift_bridgeObjectRetain(v22);
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v22);
    NSString v24 = String._bridgeToObjectiveC()();
    [v20 errorWithDomain:v23 code:-396 underlyingError:0 userinfo:0 description:v24];

    swift_willThrow(v25);
  }

  swift_task_dealloc(*(void *)(v0 + 352));
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t sub_1000CC280()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112LL);
  *(void *)(*(void *)v0 + 408LL) = v1;
  if (v1) {
    id v2 = sub_1000CC534;
  }
  else {
    id v2 = sub_1000CC2E0;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1000CC2E0()
{
  uint64_t v1 = *(void **)(v0 + 400);
  uint64_t v2 = *(void *)(v0 + 328);

  if (!v2)
  {
    uint64_t v15 = v0 + 248;
    goto LABEL_8;
  }

  if (!*(void *)(v2 + 16) || (unint64_t v3 = sub_100079A58(0xD000000000000029LL, 0x80000001002108C0LL), (v4 & 1) == 0))
  {
    swift_bridgeObjectRelease(v2);
    uint64_t v15 = v0 + 224;
LABEL_8:
    uint64_t v16 = *(void **)(v0 + 392);
    uint64_t v17 = *(void **)(v0 + 376);
    uint64_t v18 = *(void **)(v0 + 360);
    uint64_t v19 = (void *)objc_opt_self(&OBJC_CLASS___TransparencyError);
    uint64_t v20 = sub_100093410();
    swift_beginAccess(v20, v15, 0LL, 0LL);
    uint64_t v21 = v20[1];
    swift_bridgeObjectRetain(v21);
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v21);
    NSString v23 = String._bridgeToObjectiveC()();
    [v19 errorWithDomain:v22 code:-396 underlyingError:0 userinfo:0 description:v23];

    swift_willThrow(v24);
    swift_task_dealloc(*(void *)(v0 + 352));
    os_log_type_t v13 = *(uint64_t (**)(BOOL))(v0 + 8);
    BOOL v14 = 0LL;
    return v13(v14);
  }

  uint64_t v5 = *(void *)(*(void *)(v2 + 56) + 8 * v3);
  swift_unknownObjectRetain(v5);
  swift_bridgeObjectRelease(v2);
  uint64_t v6 = objc_opt_self(&OBJC_CLASS___NSString);
  uint64_t v7 = (void *)swift_dynamicCastObjCClass(v5, v6);
  if (!v7)
  {
    swift_unknownObjectRelease(v5);
    uint64_t v15 = v0 + 224;
    goto LABEL_8;
  }

  uint64_t v8 = *(void **)(v0 + 392);
  id v9 = *(void **)(v0 + 376);
  uint64_t v10 = *(void *)(v0 + 352);
  uint64_t v11 = *(void **)(v0 + 360);
  unsigned int v12 = [v7 intValue];

  swift_unknownObjectRelease(v5);
  swift_task_dealloc(v10);
  os_log_type_t v13 = *(uint64_t (**)(BOOL))(v0 + 8);
  BOOL v14 = v12 != 0;
  return v13(v14);
}

uint64_t sub_1000CC4E8()
{
  uint64_t v1 = *(void **)(v0 + 360);
  swift_willThrow();

  swift_task_dealloc(*(void *)(v0 + 352));
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t sub_1000CC534()
{
  uint64_t v1 = *(void **)(v0 + 400);
  unint64_t v3 = *(void **)(v0 + 384);
  uint64_t v2 = *(void **)(v0 + 392);
  char v4 = *(void **)(v0 + 376);
  uint64_t v5 = *(void **)(v0 + 360);
  swift_willThrow();

  swift_task_dealloc(*(void *)(v0 + 352));
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t type metadata accessor for EligibilitySupport()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd18EligibilitySupport);
}

uint64_t sub_1000CC5D0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000CC5FC()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  unint64_t v3 = (void *)swift_task_alloc(dword_1002E1B34);
  *(void *)(v1 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = sub_10007AB68;
  return ((uint64_t (*)(const void *))((char *)&dword_1002E1B30 + dword_1002E1B30))(v2);
}

uint64_t sub_1000CC668()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000CC68C()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13transparencyd20EligibilityOverrides_lastIDSRec);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd20EligibilityOverrides_lastIDSRec, v3, 0LL, 0LL);
  return *v1;
}

uint64_t sub_1000CC6D0(char a1)
{
  unint64_t v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC13transparencyd20EligibilityOverrides_lastIDSRec);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  *unint64_t v3 = a1;
  return result;
}

uint64_t (*sub_1000CC718(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_1000CC75C()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13transparencyd20EligibilityOverrides_hasDoneOSUpdate);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd20EligibilityOverrides_hasDoneOSUpdate, v3, 0LL, 0LL);
  return *v1;
}

uint64_t sub_1000CC7A0(char a1)
{
  unint64_t v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC13transparencyd20EligibilityOverrides_hasDoneOSUpdate);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  *unint64_t v3 = a1;
  return result;
}

uint64_t (*sub_1000CC7E8(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000CC82C()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13transparencyd20EligibilityOverrides_overrideReportStatus);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd20EligibilityOverrides_overrideReportStatus, v3, 0LL, 0LL);
  return *v1;
}

uint64_t sub_1000CC870(char a1)
{
  unint64_t v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC13transparencyd20EligibilityOverrides_overrideReportStatus);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  *unint64_t v3 = a1;
  return result;
}

uint64_t (*sub_1000CC8B8(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000CC8FC()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13transparencyd20EligibilityOverrides_overrideTimeBetweenReports;
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd20EligibilityOverrides_overrideTimeBetweenReports, v3, 0LL, 0LL);
  return *(void *)v1;
}

uint64_t sub_1000CC944(uint64_t a1, char a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC13transparencyd20EligibilityOverrides_overrideTimeBetweenReports;
  uint64_t result = swift_beginAccess(v5, v7, 1LL, 0LL);
  *(void *)uint64_t v5 = a1;
  *(_BYTE *)(v5 + 8) = a2 & 1;
  return result;
}

uint64_t (*sub_1000CC9A0(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

id sub_1000CC9E4()
{
  v0[OBJC_IVAR____TtC13transparencyd20EligibilityOverrides_lastIDSRec] = 2;
  v0[OBJC_IVAR____TtC13transparencyd20EligibilityOverrides_hasDoneOSUpdate] = 2;
  v0[OBJC_IVAR____TtC13transparencyd20EligibilityOverrides_overrideReportStatus] = 2;
  uint64_t v1 = &v0[OBJC_IVAR____TtC13transparencyd20EligibilityOverrides_overrideTimeBetweenReports];
  *(void *)uint64_t v1 = 0LL;
  v1[8] = 1;
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for EligibilityOverrides();
  return objc_msgSendSuper2(&v3, "init");
}

uint64_t type metadata accessor for EligibilityOverrides()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd20EligibilityOverrides);
}

uint64_t sub_1000CCAF0()
{
  return (*(uint64_t (**)(void, uint64_t))((swift_isaMask & *v0) + 0xC0LL))(0LL, 1LL);
}

uint64_t sub_1000CCC30()
{
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0xA8LL))(2LL);
}

uint64_t sub_1000CCC50(char a1)
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x78LL))(a1 & 1);
}

uint64_t sub_1000CCCD0(char a1)
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x90LL))(a1 & 1);
}

uint64_t sub_1000CCD50(char a1)
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0xA8LL))(a1 & 1);
}

uint64_t sub_1000CCD70(double a1)
{
  return (*(uint64_t (**)(void, void))((swift_isaMask & *v1) + 0xC0LL))(*(void *)&a1, 0LL);
}

uint64_t sub_1000CCD94(uint64_t a1)
{
  int v3 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x70LL))();
  else {
    return ~(2 * v3) & 2;
  }
}

uint64_t sub_1000CCDE0(char a1)
{
  char v3 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0xA0LL))();
  if (v3 == 2) {
    char v4 = a1;
  }
  else {
    char v4 = v3;
  }
  return v4 & 1;
}

uint64_t sub_1000CCE28()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xB8LL))();
}

id sub_1000CCE6C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EligibilityOverrides();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_1000CCE9C()
{
  qword_1002EF1F0 = 1919247728LL;
  *(void *)algn_1002EF1F8 = 0xE400000000000000LL;
}

uint64_t *sub_1000CCEB8()
{
  if (qword_1002EBFF0 != -1) {
    swift_once(&qword_1002EBFF0, sub_1000CCE9C);
  }
  return &qword_1002EF1F0;
}

void sub_1000CCEF8()
{
  qword_1002EF200 = 1718379891LL;
  *(void *)algn_1002EF208 = 0xE400000000000000LL;
}

uint64_t *sub_1000CCF14()
{
  if (qword_1002EBFF8 != -1) {
    swift_once(&qword_1002EBFF8, sub_1000CCEF8);
  }
  return &qword_1002EF200;
}

void sub_1000CCF54()
{
  qword_1002EF210 = 0x6E6F676174636FLL;
  *(void *)algn_1002EF218 = 0xE700000000000000LL;
}

uint64_t *sub_1000CCF78()
{
  if (qword_1002EC000 != -1) {
    swift_once(&qword_1002EC000, sub_1000CCF54);
  }
  return &qword_1002EF210;
}

void sub_1000CCFB8()
{
  qword_1002EF220 = 1936419683LL;
  *(void *)algn_1002EF228 = 0xE400000000000000LL;
}

uint64_t *sub_1000CCFD4()
{
  if (qword_1002EC008 != -1) {
    swift_once(&qword_1002EC008, sub_1000CCFB8);
  }
  return &qword_1002EF220;
}

void sub_1000CD014()
{
  algn_1002EF238[7] = -18;
}

uint64_t *sub_1000CD044()
{
  if (qword_1002EC010 != -1) {
    swift_once(&qword_1002EC010, sub_1000CD014);
  }
  return &qword_1002EF230;
}

void *sub_1000CD084()
{
  return &unk_100280158;
}

void sub_1000CD090()
{
  qword_1002EF240 = 0x6F6973726556736FLL;
  *(void *)algn_1002EF248 = 0xE90000000000006ELL;
}

uint64_t *sub_1000CD0B8()
{
  if (qword_1002EC018 != -1) {
    swift_once(&qword_1002EC018, sub_1000CD090);
  }
  return &qword_1002EF240;
}

void sub_1000CD0F8()
{
  algn_1002EF258[7] = -18;
}

uint64_t *sub_1000CD128()
{
  if (qword_1002EC020 != -1) {
    swift_once(&qword_1002EC020, sub_1000CD0F8);
  }
  return &qword_1002EF250;
}

uint64_t sub_1000CD168(unint64_t a1)
{
  if (a1 < 3) {
    return *(void *)&aSuccess_1[8 * a1];
  }
  unint64_t v2 = a1;
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)( &type metadata for KTEligibilityStatusResult.Status,  &v2,  &type metadata for KTEligibilityStatusResult.Status,  &type metadata for Int);
  __break(1u);
  return result;
}

uint64_t sub_1000CD1D4()
{
  return *(void *)(v0 + OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_result);
}

void *sub_1000CD1E4()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_error);
  id v2 = v1;
  return v1;
}

uint64_t sub_1000CD210()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_element);
  swift_bridgeObjectRetain(*(void *)(v0 + OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_element + 8));
  return v1;
}

uint64_t sub_1000CD308@<X0>(uint64_t a1@<X8>)
{
  return sub_100085DFC(v1 + OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_dateStored, a1);
}

uint64_t sub_1000CD370()
{
  v20[0] = 0LL;
  v20[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(38LL);
  uint64_t v1 = (void *)0xE100000000000000LL;
  v2._countAndFlagsBits = 60LL;
  v2._object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  uint64_t ObjectType = swift_getObjectType(v0);
  v4._countAndFlagsBits = _typeName(_:qualified:)(ObjectType, 0LL);
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  v6._countAndFlagsBits = 0x6E656D656C65203ALL;
  v6._object = (void *)0xEB00000000203A74LL;
  String.append(_:)(v6);
  uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_element);
  uint64_t v8 = *(void **)(v0 + OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_element + 8);
  swift_bridgeObjectRetain(v8);
  v9._countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v8);
  v10._countAndFlagsBits = 0x3A746C7573657220LL;
  v10._object = (void *)0xE900000000000020LL;
  String.append(_:)(v10);
  uint64_t v19 = *(void *)(v0 + OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_result);
  _print_unlocked<A, B>(_:_:)( &v19,  v20,  &type metadata for KTEligibilityStatusResult.Status,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v11._countAndFlagsBits = 0x203A726F72726520LL;
  v11._object = (void *)0xE800000000000000LL;
  String.append(_:)(v11);
  unsigned int v12 = *(void **)(v0 + OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_error);
  if (v12)
  {
    id v13 = [v12 description];
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    uint64_t v1 = v15;
  }

  else
  {
    uint64_t v14 = 45LL;
  }

  v16._countAndFlagsBits = v14;
  v16._object = v1;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v1);
  v17._countAndFlagsBits = 62LL;
  v17._object = (void *)0xE100000000000000LL;
  String.append(_:)(v17);
  return v20[0];
}

id sub_1000CD528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Swift::String v11 = (char *)objc_allocWithZone(v5);
  *(void *)&v11[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_result] = a1;
  *(void *)&v11[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_error] = a4;
  unsigned int v12 = &v11[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_element];
  *(void *)unsigned int v12 = a2;
  *((void *)v12 + 1) = a3;
  sub_100085DFC(a5, (uint64_t)&v11[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_dateStored]);
  v15.receiver = v11;
  v15.super_class = v5;
  id v13 = objc_msgSendSuper2(&v15, "init");
  sub_100077CFC(a5, (uint64_t *)&unk_1002DF740);
  return v13;
}

id sub_1000CD5E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v5);
  *(void *)&v5[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_result] = a1;
  *(void *)&v5[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_error] = a4;
  unsigned int v12 = &v5[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_element];
  *(void *)unsigned int v12 = a2;
  *((void *)v12 + 1) = a3;
  sub_100085DFC(a5, (uint64_t)&v5[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_dateStored]);
  v15.receiver = v5;
  v15.super_class = ObjectType;
  id v13 = objc_msgSendSuper2(&v15, "init");
  sub_100077CFC(a5, (uint64_t *)&unk_1002DF740);
  return v13;
}

id sub_1000CD6A8(uint64_t a1, uint64_t a2)
{
  char v3 = v2;
  uint64_t v6 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  Swift::String v10 = (char *)objc_allocWithZone(v3);
  *(void *)&v10[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_result] = 0LL;
  *(void *)&v10[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_error] = 0LL;
  Swift::String v11 = &v10[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_element];
  *(void *)Swift::String v11 = a1;
  *((void *)v11 + 1) = a2;
  sub_100085DFC((uint64_t)v8, (uint64_t)&v10[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_dateStored]);
  v15.receiver = v10;
  v15.super_class = v3;
  *(void *)&double v12 = swift_bridgeObjectRetain(a2).n128_u64[0];
  id v13 = objc_msgSendSuper2(&v15, "init", v12);
  sub_100077CFC((uint64_t)v8, (uint64_t *)&unk_1002DF740);
  return v13;
}

id sub_1000CD8F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100085DFC(a3, (uint64_t)v9);
  Swift::String v10 = (char *)objc_allocWithZone(v3);
  *(void *)&v10[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_result] = 0LL;
  *(void *)&v10[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_error] = 0LL;
  Swift::String v11 = &v10[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_element];
  *(void *)Swift::String v11 = a1;
  *((void *)v11 + 1) = a2;
  sub_100085DFC((uint64_t)v9, (uint64_t)&v10[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_dateStored]);
  v15.receiver = v10;
  v15.super_class = v3;
  *(void *)&double v12 = swift_bridgeObjectRetain(a2).n128_u64[0];
  id v13 = objc_msgSendSuper2(&v15, "init", v12);
  sub_100077CFC((uint64_t)v9, (uint64_t *)&unk_1002DF740);
  return v13;
}

void sub_1000CDD10()
{
}

id sub_1000CDD68()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000CDDF4(unint64_t a1)
{
  if (a1 < 3) {
    return qword_100249880[a1];
  }
  unint64_t v2 = a1;
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)( &type metadata for Recommendation,  &v2,  &type metadata for Recommendation,  &type metadata for Int);
  __break(1u);
  return result;
}

uint64_t sub_1000CDE54(uint64_t a1, uint64_t a2)
{
  if (a1 == 49 && a2 == 0xE100000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(49LL, 0xE100000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    return 0LL;
  }

  if (a1 == 48 && a2 == 0xE100000000000000LL) {
    return 2LL;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(48LL, 0xE100000000000000LL, a1, a2, 0LL) & 1) != 0) {
    return 2LL;
  }
  return 1LL;
}

uint64_t sub_1000CDEEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(a1, 1LL, 1LL, v2);
}

uint64_t sub_1000CE004@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13transparencyd10ReportTime_lastReport;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_100085DFC(v3, a1);
}

uint64_t sub_1000CE150(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13transparencyd10ReportTime_lastReport;
  swift_beginAccess(v3, v5, 33LL, 0LL);
  sub_1000A99C4(a1, v3);
  return swift_endAccess(v5);
}

uint64_t (*sub_1000CE1A8(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

double sub_1000CE230()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13transparencyd10ReportTime_timeBetweenReports;
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd10ReportTime_timeBetweenReports, v3, 0LL, 0LL);
  return *(double *)v1;
}

uint64_t sub_1000CE2C4(double a1)
{
  uint64_t v3 = (double *)(v1 + OBJC_IVAR____TtC13transparencyd10ReportTime_timeBetweenReports);
  uint64_t result = swift_beginAccess(v1 + OBJC_IVAR____TtC13transparencyd10ReportTime_timeBetweenReports, v5, 1LL, 0LL);
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_1000CE314(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

id sub_1000CE358(uint64_t a1, double a2)
{
  id v5 = objc_allocWithZone(v2);
  uint64_t v6 = (uint64_t)v5 + OBJC_IVAR____TtC13transparencyd10ReportTime_lastReport;
  uint64_t v7 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  swift_beginAccess(v6, v12, 33LL, 0LL);
  uint64_t v8 = (char *)v5;
  sub_1000D5130(a1, v6);
  swift_endAccess(v12);
  *(double *)&v8[OBJC_IVAR____TtC13transparencyd10ReportTime_timeBetweenReports] = a2;

  v11.receiver = v8;
  v11.super_class = v2;
  id v9 = objc_msgSendSuper2(&v11, "init");
  sub_100077CFC(a1, (uint64_t *)&unk_1002DF740);
  return v9;
}

id sub_1000CE438(uint64_t a1, double a2)
{
  uint64_t v5 = (uint64_t)v2 + OBJC_IVAR____TtC13transparencyd10ReportTime_lastReport;
  uint64_t v6 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
  swift_beginAccess(v5, v11, 33LL, 0LL);
  uint64_t v7 = v2;
  sub_1000D5130(a1, v5);
  swift_endAccess(v11);
  *(double *)&v7[OBJC_IVAR____TtC13transparencyd10ReportTime_timeBetweenReports] = a2;

  v10.receiver = v7;
  v10.super_class = (Class)type metadata accessor for ReportTime(0LL);
  id v8 = objc_msgSendSuper2(&v10, "init");
  sub_100077CFC(a1, (uint64_t *)&unk_1002DF740);
  return v8;
}

void sub_1000CE514()
{
}

id sub_1000CE56C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ReportTime(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000CE5C8()
{
  return Logger.init(subsystem:category:)( 0xD000000000000022LL,  0x8000000100210B00LL,  0xD00000000000001CLL,  0x8000000100249600LL);
}

uint64_t sub_1000CE600@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_logger;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

double sub_1000CE644()
{
  uint64_t v0 = sub_100072CC4(&qword_1002E0870);
  uint64_t v1 = swift_allocObject(v0, 96LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_100246500;
  if (qword_1002EBFF0 != -1) {
    swift_once(&qword_1002EBFF0, sub_1000CCE9C);
  }
  uint64_t v2 = *(void *)algn_1002EF1F8;
  *(void *)(v1 + 32) = qword_1002EF1F0;
  *(void *)(v1 + 40) = v2;
  uint64_t v3 = qword_1002EBFF8;
  swift_bridgeObjectRetain(v2);
  if (v3 != -1) {
    swift_once(&qword_1002EBFF8, sub_1000CCEF8);
  }
  uint64_t v4 = *(void *)algn_1002EF208;
  *(void *)(v1 + 48) = qword_1002EF200;
  *(void *)(v1 + 56) = v4;
  uint64_t v5 = qword_1002EC000;
  swift_bridgeObjectRetain(v4);
  if (v5 != -1) {
    swift_once(&qword_1002EC000, sub_1000CCF54);
  }
  uint64_t v6 = *(void *)algn_1002EF218;
  *(void *)(v1 + 64) = qword_1002EF210;
  *(void *)(v1 + 72) = v6;
  uint64_t v7 = qword_1002EC008;
  swift_bridgeObjectRetain(v6);
  if (v7 != -1) {
    swift_once(&qword_1002EC008, sub_1000CCFB8);
  }
  uint64_t v8 = *(void *)algn_1002EF228;
  *(void *)(v1 + 80) = qword_1002EF220;
  *(void *)(v1 + 88) = v8;
  qword_1002EF260 = v1;
  *(void *)&double result = swift_bridgeObjectRetain(v8).n128_u64[0];
  return result;
}

uint64_t *sub_1000CE778()
{
  if (qword_1002EC028 != -1) {
    swift_once(&qword_1002EC028, sub_1000CE644);
  }
  return &qword_1002EF260;
}

double sub_1000CE7B8()
{
  if (qword_1002EC028 != -1) {
    swift_once(&qword_1002EC028, sub_1000CE644);
  }
  *(void *)&double result = swift_bridgeObjectRetain(qword_1002EF260).n128_u64[0];
  return result;
}

uint64_t sub_1000CE7F8()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_db);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_db, v3, 0LL, 0LL);
  return swift_retain(*v1);
}

uint64_t sub_1000CE840(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_db);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  return swift_release(v4);
}

uint64_t (*sub_1000CE890(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

id sub_1000CE8D4()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides);
}

uint64_t sub_1000CE8E4()
{
  return swift_unknownObjectRetain(*(void *)(v0
                                             + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_idsEventReportingManager));
}

uint64_t sub_1000CE8F4()
{
  return swift_unknownObjectRetain(*(void *)(v0 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_support));
}

double sub_1000CE904()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_timeBetweenReports;
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_timeBetweenReports, v3, 0LL, 0LL);
  return *(double *)v1;
}

uint64_t sub_1000CE948(double a1)
{
  uint64_t v3 = (double *)(v1 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_timeBetweenReports);
  uint64_t result = swift_beginAccess( v1 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_timeBetweenReports,  v5,  1LL,  0LL);
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_1000CE998(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000CE9DC()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_samplesPerDay;
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_samplesPerDay, v3, 0LL, 0LL);
  return *(void *)v1;
}

uint64_t sub_1000CEA20(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_samplesPerDay);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_1000CEA68(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000CEAAC()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_numberOfSamples;
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_numberOfSamples, v3, 0LL, 0LL);
  return *(void *)v1;
}

uint64_t sub_1000CEAF0(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_numberOfSamples);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_1000CEB38(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

void *sub_1000CEB7C(char *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CEBDC(a1, a2, a3);
}

void *sub_1000CEBDC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v30 = a2;
  uint64_t v4 = v3;
  uint64_t v31 = a3;
  uint64_t v35 = a1;
  uint64_t v5 = type metadata accessor for URL.DirectoryHint(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  id v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  objc_super v15 = (char *)v29 - v14;
  swift_defaultActor_initialize(v3);
  Swift::String v16 = (char *)v3 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_logger;
  swift_retain(v3);
  v29[0] = v16;
  Logger.init(subsystem:category:)( 0xD000000000000022LL,  0x8000000100210B00LL,  0xD00000000000001CLL,  0x8000000100249600LL);
  unint64_t v33 = 0xD000000000000012LL;
  unint64_t v34 = 0x8000000100210B30LL;
  (*(void (**)(char *, void, uint64_t))(v6 + 104))( v8,  enum case for URL.DirectoryHint.inferFromPath(_:),  v5);
  unint64_t v17 = sub_10007F884();
  URL.appending<A>(path:directoryHint:)(&v33, v8, &type metadata for String, v17);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRelease(v34);
  type metadata accessor for KTEligibilityDB(0LL);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
  uint64_t v18 = v29[1];
  uint64_t v19 = KTEligibilityDB.__allocating_init(path:)(v13);
  if (v18)
  {
    swift_unknownObjectRelease(v30);
    swift_unknownObjectRelease(v31);
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v20((uint64_t)v35, v9);
    v20((uint64_t)v15, v9);
    uint64_t v21 = type metadata accessor for Logger(0LL);
    (*(void (**)(void, uint64_t))(*(void *)(v21 - 8) + 8LL))(v29[0], v21);
    swift_release(v4);
    uint64_t v22 = type metadata accessor for KTEligibilityStatusReporting(0LL);
    swift_defaultActor_destroy(v4);
    swift_deallocPartialClassInstance( v4,  v22,  *(unsigned int *)((swift_isaMask & *v4) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v4) + 0x34LL));
  }

  else
  {
    *(void *)((char *)v3 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_db) = v19;
    type metadata accessor for EligibilityOverrides();
    id v23 = KTUpdateCloudStorageOperation.__allocating_init()();
    uint64_t v24 = *(void (**)(char *, uint64_t))(v10 + 8);
    v24(v15, v9);
    *(void *)((char *)v4 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides) = v23;
    uint64_t v26 = v30;
    uint64_t v25 = v31;
    *(void *)((char *)v4 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_idsEventReportingManager) = v30;
    *(void *)((char *)v4 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_support) = v25;
    *(void *)((char *)v4 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_samplesPerDay) = 1LL;
    *(void *)((char *)v4 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_timeBetweenReports) = 0x4122750000000000LL;
    *(void *)((char *)v4 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_numberOfSamples) = 60LL;
    swift_unknownObjectRetain(v26);
    swift_unknownObjectRetain(v25);
    swift_release(v4);
    uint64_t v27 = (objc_class *)type metadata accessor for KTEligibilityStatusReporting(0LL);
    v32.receiver = v4;
    v32.super_class = v27;
    uint64_t v4 = objc_msgSendSuper2(&v32, "init");
    swift_unknownObjectRelease(v26);
    swift_unknownObjectRelease(v25);
    v24(v35, v9);
  }

  return v4;
}

uint64_t sub_1000CF014(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for Date(0LL);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000CF074, v1, 0LL);
}

uint64_t sub_1000CF074()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 24)) + 0x98LL);
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = v2();
  if (v1) {
    uint64_t v3 = 48LL;
  }
  else {
    uint64_t v3 = 49LL;
  }
  uint64_t v4 = (void *)swift_task_alloc(dword_1002E0994);
  *(void *)(v0 + 72) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000CF114;
  return sub_100095660(0xD000000000000012LL, 0x8000000100210A90LL, v3, 0xE100000000000000LL);
}

uint64_t sub_1000CF114()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 72);
  *(void *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 24);
    uint64_t v5 = sub_1000CF318;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 64);
    uint64_t v7 = *(void *)(v2 + 24);
    swift_bridgeObjectRelease(0xE100000000000000LL);
    swift_release(v6);
    uint64_t v5 = sub_1000CF194;
    uint64_t v4 = v7;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_1000CF194()
{
  *(void *)(v0 + 88) = (*(uint64_t (**)(void))(v0 + 56))();
  if (qword_1002EC010 != -1) {
    swift_once(&qword_1002EC010, sub_1000CD014);
  }
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = qword_1002EF230;
  uint64_t v5 = *(void *)algn_1002EF238;
  uint64_t v6 = static Date.now.getter();
  double v7 = Date.timeIntervalSinceReferenceDate.getter(v6);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v9 = Double.description.getter(v8, v7);
  uint64_t v11 = v10;
  *(void *)(v0 + 96) = v10;
  uint64_t v12 = (void *)swift_task_alloc(dword_1002E0994);
  *(void *)(v0 + 104) = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_1000CF28C;
  return sub_100095660(v4, v5, v9, v11);
}

uint64_t sub_1000CF28C()
{
  uint64_t v2 = *(void *)(*v1 + 104);
  uint64_t v3 = *v1;
  *(void *)(v3 + 112) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_1000CF360, *(void *)(v3 + 24), 0LL);
  }
  uint64_t v5 = *(void *)(v3 + 88);
  uint64_t v6 = *(void *)(v3 + 48);
  swift_bridgeObjectRelease(*(void *)(v3 + 96));
  swift_release(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000CF318()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRelease(0xE100000000000000LL);
  swift_release(v1);
  swift_task_dealloc(*(void *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CF360()
{
  uint64_t v1 = *(void *)(v0 + 88);
  swift_bridgeObjectRelease(*(void *)(v0 + 96));
  swift_release(v1);
  swift_task_dealloc(*(void *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CF3A4()
{
  v1[41] = v0;
  uint64_t v2 = type metadata accessor for Date(0LL);
  v1[42] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[43] = v3;
  unint64_t v4 = (*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[44] = swift_task_alloc(v4);
  v1[45] = swift_task_alloc(v4);
  return swift_task_switch(sub_1000CF414, v0, 0LL);
}

uint64_t sub_1000CF414(uint64_t a1)
{
  uint64_t v2 = (void *)v1[41];
  uint64_t v3 = Date.init()(a1);
  unint64_t v4 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0xE0LL);
  uint64_t result = v4(v3);
  if (result == 0x8000000000000000LL)
  {
    __break(1u);
  }

  else if ((unsigned __int128)(-result * (__int128)86400LL) >> 64 == (-86400 * result) >> 63)
  {
    uint64_t v6 = v1[44];
    uint64_t v7 = v1[42];
    uint64_t v8 = v1[43];
    uint64_t v9 = (void *)v1[41];
    Date.addingTimeInterval(_:)((double)(-86400 * result));
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    v1[46] = v10;
    uint64_t v11 = v10(v6, v7);
    uint64_t v12 = v4(v11);
    id v13 = *(int **)((swift_isaMask & *v9) + 0x138LL);
    objc_super v15 = (int *)((char *)v13 + *v13);
    uint64_t v14 = (void *)swift_task_alloc(v13[1]);
    v1[47] = v14;
    void *v14 = v1;
    v14[1] = sub_1000CF524;
    return ((uint64_t (*)(uint64_t, void, void))v15)(v12, 0LL, 0LL);
  }

  __break(1u);
  return result;
}

uint64_t sub_1000CF524(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 376);
  *(void *)(*v2 + 384) = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = *(void *)(v4 + 328);
  if (v1)
  {
    uint64_t v7 = sub_1000CFD48;
  }

  else
  {
    *(_BYTE *)(v4 + 465) = a1 & 1;
    uint64_t v7 = sub_1000CF59C;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_1000CF59C()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 16;
  uint64_t v3 = *(unsigned __int8 *)(v1 + 465);
  uint64_t v4 = *(void *)(v1 + 328);
  uint64_t v5 = *(void **)(v4 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides);
  *(void *)(v1 + 392) = v5;
  (*(void (**)(uint64_t))((swift_isaMask & *v5) + 0x108LL))(v3);
  uint64_t v6 = *(void **)(v4 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_idsEventReportingManager);
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  *(void *)(v1 + 400) = isa;
  double v8 = Date.timeIntervalSince1970.getter(isa);
  *(void *)(v1 + 56) = v1 + 304;
  *(void *)(v1 + 16) = v1;
  *(void *)(v1 + 24) = sub_1000CF6B8;
  uint64_t v9 = swift_continuation_init(v2, 1LL);
  *(void *)(v1 + 120) = _NSConcreteStackBlock;
  v1 += 120LL;
  *(void *)(v1 + 8) = 0x40000000LL;
  *(void *)(v1 + 16) = sub_1000D0130;
  *(void *)(v1 + 24) = &unk_100280168;
  *(void *)(v1 + 32) = v9;
  [v6 reportResultWithSuccess:isa startFrom:v1 completionHandler:v8];
  return swift_continuation_await(v2);
}

uint64_t sub_1000CF6B8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 408) = v2;
  if (v2) {
    uint64_t v3 = sub_1000CFE98;
  }
  else {
    uint64_t v3 = sub_1000CF718;
  }
  return swift_task_switch(v3, *(void *)(v1 + 328), 0LL);
}

uint64_t sub_1000CF718()
{
  uint64_t v1 = *(void *)(v0 + 304);

  if (!v1) {
    goto LABEL_31;
  }
  *(void *)(v0 + 280) = 0x722D74726F706572LL;
  *(void *)(v0 + 288) = 0xEF65736E6F707365LL;
  AnyHashable.init<A>(_:)(v0 + 280, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v1 + 16) && (unint64_t v2 = sub_1000D4DF0(v0 + 160), (v3 & 1) != 0))
  {
    sub_100079A14(*(void *)(v1 + 56) + 32 * v2, v0 + 232);
  }

  else
  {
    *(_OWORD *)(v0 + 232) = 0u;
    *(_OWORD *)(v0 + 248) = 0u;
  }

  swift_bridgeObjectRelease(v1);
  sub_1000D51A0(v0 + 160);
  if (!*(void *)(v0 + 256))
  {
    uint64_t v9 = v0 + 232;
LABEL_30:
    sub_100077CFC(v9, &qword_1002DF918);
    goto LABEL_31;
  }

  uint64_t v4 = sub_100072CC4(&qword_1002E1CC0);
  if ((swift_dynamicCast(v0 + 296, v0 + 232, (char *)&type metadata for Any + 8, v4, 6LL) & 1) == 0)
  {
LABEL_31:
    unint64_t v23 = sub_100095E84();
    uint64_t v24 = swift_allocError(&type metadata for KTEligibilityError, v23, 0LL, 0LL);
    *uint64_t v25 = 7LL;
    uint64_t v26 = swift_willThrow(v24);
    *(void *)(v0 + 440) = v24;
    os_log_type_t v27 = static os_log_type_t.error.getter(v26);
    swift_errorRetain(v24);
    uint64_t v28 = swift_errorRetain(v24);
    NSString v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = v27;
    if (os_log_type_enabled(v29, v27))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      objc_super v32 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v31 = 138412290;
      swift_errorRetain(v24);
      uint64_t v33 = _swift_stdlib_bridgeErrorToNSError(v24);
      *(void *)(v0 + 312) = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v31 + 4, v31 + 12);
      *objc_super v32 = v33;
      swift_errorRelease(v24);
      swift_errorRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Report to IDS finished with error %@", v31, 0xCu);
      uint64_t v34 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
      swift_arrayDestroy(v32, 1LL, v34);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    else
    {

      swift_errorRelease(v24);
      swift_errorRelease(v24);
    }

    uint64_t v35 = *(int **)((swift_isaMask & **(void **)(v0 + 328)) + 0x100LL);
    id v39 = (uint64_t (*)(uint64_t))((char *)v35 + *v35);
    id v36 = (void *)swift_task_alloc(v35[1]);
    *(void *)(v0 + 448) = v36;
    *id v36 = v0;
    v36[1] = sub_1000CFDA0;
    return v39(2LL);
  }

  uint64_t v5 = *(void *)(v0 + 296);
  if (qword_1002EC020 != -1) {
    swift_once(&qword_1002EC020, sub_1000CD0F8);
  }
  uint64_t v6 = *(void *)algn_1002EF258;
  *(void *)(v0 + 264) = qword_1002EF250;
  *(void *)(v0 + 272) = v6;
  swift_bridgeObjectRetain(v6);
  AnyHashable.init<A>(_:)(v0 + 264, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v5 + 16) && (unint64_t v7 = sub_1000D4DF0(v0 + 80), (v8 & 1) != 0))
  {
    sub_100079A14(*(void *)(v5 + 56) + 32 * v7, v0 + 200);
  }

  else
  {
    *(_OWORD *)(v0 + 200) = 0u;
    *(_OWORD *)(v0 + 216) = 0u;
  }

  swift_bridgeObjectRelease(v5);
  sub_1000D51A0(v0 + 80);
  if (!*(void *)(v0 + 224))
  {
    uint64_t v9 = v0 + 200;
    goto LABEL_30;
  }

  uint64_t v10 = swift_dynamicCast(v0 + 464, v0 + 200, (char *)&type metadata for Any + 8, &type metadata for Bool, 6LL);
  if ((v10 & 1) == 0) {
    goto LABEL_31;
  }
  int v11 = *(unsigned __int8 *)(v0 + 464);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v37 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v14 = 136315138;
    uint64_t v40 = v37;
    if (v11) {
      uint64_t v15 = 7562585LL;
    }
    else {
      uint64_t v15 = 28494LL;
    }
    if (v11) {
      unint64_t v16 = 0xE300000000000000LL;
    }
    else {
      unint64_t v16 = 0xE200000000000000LL;
    }
    *(void *)(v0 + 320) = sub_10007C22C(v15, v16, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "IDS recommendation: %s", v14, 0xCu);
    swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  if (v11) {
    uint64_t v17 = 0LL;
  }
  else {
    uint64_t v17 = 2LL;
  }
  uint64_t v18 = *(void **)(v0 + 328);
  uint64_t v19 = (*(uint64_t (**)(uint64_t))((swift_isaMask & **(void **)(v0 + 392)) + 0x100LL))(v17);
  *(void *)(v0 + 416) = v19;
  uint64_t v20 = *(int **)((swift_isaMask & *v18) + 0x100LL);
  NSString v38 = (uint64_t (*)(uint64_t))((char *)v20 + *v20);
  uint64_t v21 = (void *)swift_task_alloc(v20[1]);
  *(void *)(v0 + 424) = v21;
  *uint64_t v21 = v0;
  v21[1] = sub_1000CFC90;
  return v38(v19);
}

uint64_t sub_1000CFC90()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 424);
  *(void *)(*v1 + 432) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_1000D00D8;
  }
  else {
    uint64_t v4 = sub_1000CFCF4;
  }
  return swift_task_switch(v4, *(void *)(v2 + 328), 0LL);
}

uint64_t sub_1000CFCF4()
{
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v2 = *(void *)(v0 + 352);
  (*(void (**)(uint64_t, void))(v0 + 368))(v1, *(void *)(v0 + 336));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 416));
}

uint64_t sub_1000CFD48()
{
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v2 = *(void *)(v0 + 352);
  (*(void (**)(uint64_t, void))(v0 + 368))(v1, *(void *)(v0 + 336));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CFDA0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 448);
  *(void *)(*v1 + 456) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_1000D0078;
  }
  else {
    uint64_t v4 = sub_1000CFE04;
  }
  return swift_task_switch(v4, *(void *)(v2 + 328), 0LL);
}

uint64_t sub_1000CFE04()
{
  uint64_t v1 = *(void *)(v0 + 440);
  unint64_t v2 = sub_100095E84();
  uint64_t v3 = swift_allocError(&type metadata for KTEligibilityError, v2, 0LL, 0LL);
  *uint64_t v4 = 7LL;
  swift_willThrow(v3);
  swift_errorRelease(v1);
  uint64_t v5 = *(void *)(v0 + 360);
  uint64_t v6 = *(void *)(v0 + 352);
  (*(void (**)(uint64_t, void))(v0 + 368))(v5, *(void *)(v0 + 336));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CFE98(uint64_t a1)
{
  unint64_t v2 = *(void **)(v1 + 400);
  swift_willThrow(a1);

  uint64_t v3 = *(void *)(v1 + 408);
  *(void *)(v1 + 440) = v3;
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  swift_errorRetain(v3);
  uint64_t v6 = swift_errorRetain(v3);
  unint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = v5;
  if (os_log_type_enabled(v7, v5))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v9 = 138412290;
    swift_errorRetain(v3);
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError(v3);
    *(void *)(v1 + 312) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 312, v1 + 320, v9 + 4, v9 + 12);
    *uint64_t v10 = v11;
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Report to IDS finished with error %@", v9, 0xCu);
    uint64_t v12 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
    swift_arrayDestroy(v10, 1LL, v12);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease(v3);
    swift_errorRelease(v3);
  }

  os_log_type_t v13 = *(int **)((swift_isaMask & **(void **)(v1 + 328)) + 0x100LL);
  unint64_t v16 = (uint64_t (*)(uint64_t))((char *)v13 + *v13);
  uint64_t v14 = (void *)swift_task_alloc(v13[1]);
  *(void *)(v1 + 448) = v14;
  void *v14 = v1;
  v14[1] = sub_1000CFDA0;
  return v16(2LL);
}

uint64_t sub_1000D0078()
{
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v2 = *(void *)(v0 + 352);
  (*(void (**)(uint64_t, void))(v0 + 368))(v1, *(void *)(v0 + 336));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D00D8()
{
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v2 = *(void *)(v0 + 352);
  (*(void (**)(uint64_t, void))(v0 + 368))(v1, *(void *)(v0 + 336));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D0130(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    uint64_t v5 = sub_100072CC4(&qword_1002DF260);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *unint64_t v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else
  {
    if (a2) {
      uint64_t v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a2,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    }
    else {
      uint64_t v10 = 0LL;
    }
    uint64_t v11 = v10;
    sub_1000D5DF8((uint64_t)&v11, *(void *)(*(void *)(v3 + 64) + 40LL));
    return swift_continuation_throwingResume(v3);
  }

uint64_t sub_1000D031C(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_1002E1CBC;
  swift_retain(a2);
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000D5E4C;
  return sub_1000CF3A4();
}

uint64_t sub_1000D037C(uint64_t a1)
{
  v2[14] = a1;
  v2[15] = v1;
  uint64_t v3 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  v2[16] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Date(0LL);
  v2[17] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[18] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[19] = swift_task_alloc(v6);
  v2[20] = swift_task_alloc(v6);
  v2[21] = swift_task_alloc(v6);
  v2[22] = swift_task_alloc(v6);
  v2[23] = swift_task_alloc(v6);
  return swift_task_switch(sub_1000D0434, v1, 0LL);
}

uint64_t sub_1000D0434()
{
  if (qword_1002EC028 != -1) {
    swift_once(&qword_1002EC028, sub_1000CE644);
  }
  uint64_t v1 = (id *)(v0 + 112);
  uint64_t v2 = (uint64_t *)(*(void *)(v0 + 112) + OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_element);
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  uint64_t v5 = sub_1000D0EF4(*v2, v3, (void *)qword_1002EF260);
  if ((v5 & 1) == 0)
  {
    unint64_t v21 = sub_100095E84();
    uint64_t v22 = swift_allocError(&type metadata for KTEligibilityError, v21, 0LL, 0LL);
    void *v23 = 6LL;
    swift_willThrow(v22);
    uint64_t v24 = *(void *)(v0 + 176);
    uint64_t v26 = *(void *)(v0 + 160);
    uint64_t v25 = *(void *)(v0 + 168);
    uint64_t v27 = *(void *)(v0 + 152);
    uint64_t v28 = *(void *)(v0 + 128);
    swift_task_dealloc(*(void *)(v0 + 184));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    return (*(uint64_t (**)(void))(v0 + 8))(0LL);
  }

  Date.init()(v5);
  unint64_t v6 = eligibilityDBDataLifetimeDays.unsafeMutableAddressor();
  uint64_t result = swift_beginAccess(v6, v0 + 16, 0LL, 0LL);
  Swift::Int v8 = *v6;
  if (*v6 == 0x8000000000000000LL)
  {
    __break(1u);
  }

  else
  {
    Swift::Int v9 = -v8;
    uint64_t v10 = -86400 * v8;
    if ((unsigned __int128)(v9 * (__int128)86400LL) >> 64 == v10 >> 63)
    {
      uint64_t v96 = v4;
      unint64_t v11 = v3;
      uint64_t v12 = *(void *)(v0 + 176);
      uint64_t v13 = *(void *)(v0 + 184);
      uint64_t v14 = *(void *)(v0 + 136);
      uint64_t v15 = *(void *)(v0 + 144);
      unint64_t v16 = *(void **)(v0 + 120);
      Date.addingTimeInterval(_:)((double)v10);
      uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8);
      uint64_t v18 = v17(v12, v14);
      uint64_t v19 = *(uint64_t (**)(void))((swift_isaMask & *v16) + 0x98LL);
      uint64_t v20 = ((uint64_t (*)(uint64_t))v19)(v18);
      sub_100093FB0(v13);
      os_log_type_t v94 = v19;
      char v95 = (void (*)(uint64_t, uint64_t))v17;
      NSString v29 = *(void **)(v0 + 120);
      swift_release(v20);
      uint64_t v30 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v29) + 0x118LL))(1LL);
      unint64_t v93 = *(void *)(*(void *)(v0 + 112) + OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_result);
      uint64_t v31 = ((uint64_t (*)(uint64_t))v19)(v30);
      unint64_t v32 = v11;
      uint64_t v33 = (void *)sub_100093FF8(v96, v11);
      NSString v90 = (uint64_t *)(v0 + 64);
      swift_release(v31);
      if (!v33)
      {
        NSString v38 = (os_log_s *)Logger.logObject.getter(*(id *)(v0 + 112));
        os_log_type_t v39 = static os_log_type_t.default.getter();
        BOOL v40 = os_log_type_enabled(v38, v39);
        id v41 = *(void **)(v0 + 112);
        uint64_t v42 = v96;
        if (v40)
        {
          loga = v38;
          uint64_t v43 = swift_slowAlloc(22LL, -1LL);
          uint64_t v85 = swift_slowAlloc(64LL, -1LL);
          v98[0] = v85;
          *(_DWORD *)uint64_t v43 = 136315394;
          swift_bridgeObjectRetain(v32);
          *(void *)(v0 + 40) = sub_10007C22C(v96, v32, v98);
          uint64_t v87 = (unint64_t *)(v0 + 48);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v43 + 4, v43 + 12);
          swift_bridgeObjectRelease(v32);

          *(_WORD *)(v43 + 12) = 2080;
          if (v93 >= 3) {
            goto LABEL_24;
          }
          id v44 = *v1;
          *(void *)(v0 + 56) = sub_10007C22C(*(void *)&aSuccess_1[8 * v93], 0xE700000000000000LL, v98);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v90, v43 + 14, v43 + 22);
          swift_bridgeObjectRelease(0xE700000000000000LL);

          _os_log_impl( (void *)&_mh_execute_header,  loga,  v39,  "Storing element %s with result %s since no previous result was found",  (uint8_t *)v43,  0x16u);
          swift_arrayDestroy(v85, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v85, -1LL, -1LL);
          swift_slowDealloc(v43, -1LL, -1LL);

          uint64_t v42 = v96;
        }

        else
        {
        }

        uint64_t v70 = *(void *)(v0 + 152);
        uint64_t v71 = *(void *)(v0 + 112);
        uint64_t v72 = v94();
        uint64_t v73 = *(void *)(v71 + OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_error);
        j___s10Foundation4DateV3nowACvgZ();
        sub_10009560C(v42, v32, v93 == 0, v73, v70);
        uint64_t v66 = *(void *)(v0 + 184);
        uint64_t v67 = *(void *)(v0 + 168);
        uint64_t v68 = *(void *)(v0 + 152);
        uint64_t v69 = *(void *)(v0 + 136);
        swift_release(v72);
LABEL_29:
        v95(v68, v69);
        v95(v67, v69);
        v95(v66, v69);
        uint64_t v74 = 1LL;
LABEL_32:
        uint64_t v79 = *(void *)(v0 + 176);
        uint64_t v81 = *(void *)(v0 + 160);
        uint64_t v80 = *(void *)(v0 + 168);
        uint64_t v82 = *(void *)(v0 + 152);
        uint64_t v83 = *(void *)(v0 + 128);
        swift_task_dealloc(*(void *)(v0 + 184));
        swift_task_dealloc(v79);
        swift_task_dealloc(v80);
        swift_task_dealloc(v81);
        swift_task_dealloc(v82);
        swift_task_dealloc(v83);
        return (*(uint64_t (**)(uint64_t))(v0 + 8))(v74);
      }

      os_log_t log = (os_log_t)(v0 + 88);
      uint64_t v34 = *(void *)(v0 + 136);
      uint64_t v35 = *(void *)(v0 + 144);
      uint64_t v36 = *(void *)(v0 + 128);
      sub_100085DFC((uint64_t)v33 + OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_dateStored, v36);
      LODWORD(v34) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v36, 1LL, v34);
      id v92 = v33;
      if ((_DWORD)v34 == 1)
      {
        sub_100077CFC(*(void *)(v0 + 128), (uint64_t *)&unk_1002DF740);
        if (!v93) {
          goto LABEL_21;
        }
        BOOL v37 = 0;
      }

      else
      {
        uint64_t v45 = *(void *)(v0 + 128);
        uint64_t v46 = *(void *)(v0 + 136);
        uint64_t v47 = Date.compare(_:)(*(void *)(v0 + 168));
        v17(v45, v46);
        BOOL v37 = v47 == 1;
        if (!v93) {
          goto LABEL_17;
        }
      }

      if (*(void *)&v92[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_result])
      {
LABEL_17:
        if (v37)
        {
          uint64_t v48 = (void *)Logger.logObject.getter(*(id *)(v0 + 112));
          os_log_type_t v49 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled((os_log_t)v48, v49))
          {
            uint64_t v75 = *(void *)(v0 + 184);
            uint64_t v76 = *(void *)(v0 + 168);
            uint64_t v77 = *(void *)(v0 + 136);
            id v78 = *(void **)(v0 + 112);

            v95(v76, v77);
            v95(v75, v77);
            goto LABEL_31;
          }

          id v50 = *v1;
          uint64_t v51 = swift_slowAlloc(22LL, -1LL);
          uint64_t v91 = swift_slowAlloc(64LL, -1LL);
          v98[0] = v91;
          *(_DWORD *)uint64_t v51 = 136315394;
          swift_bridgeObjectRetain(v11);
          *(void *)os_log_t log = sub_10007C22C(v96, v11, v98);
          uint64_t v87 = (unint64_t *)(v0 + 96);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(log, v0 + 96, v51 + 4, v51 + 12);
          swift_bridgeObjectRelease(v11);

          *(_WORD *)(v51 + 12) = 2080;
          if (v93 <= 2)
          {
            uint64_t v97 = *(void *)(v0 + 184);
            uint64_t v52 = *(void *)(v0 + 168);
            uint64_t v53 = *(void *)(v0 + 136);
            unint64_t v54 = *(void **)(v0 + 112);
            *(void *)(v0 + 104) = sub_10007C22C(*(void *)&aSuccess_1[8 * v93], 0xE700000000000000LL, v98);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v51 + 14, v51 + 22);
            swift_bridgeObjectRelease(0xE700000000000000LL);

            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v48,  v49,  "Ignoring result for element %s and result %s since there is an existing sample",  (uint8_t *)v51,  0x16u);
            swift_arrayDestroy(v91, 2LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v91, -1LL, -1LL);
            swift_slowDealloc(v51, -1LL, -1LL);

            v95(v52, v53);
            v95(v97, v53);
LABEL_31:
            uint64_t v74 = 0LL;
            goto LABEL_32;
          }

LABEL_21:
      os_log_type_t v55 = (os_log_s *)Logger.logObject.getter(*(id *)(v0 + 112));
      os_log_type_t v56 = static os_log_type_t.default.getter();
      BOOL v57 = os_log_type_enabled(v55, v56);
      id v58 = *(void **)(v0 + 112);
      if (v57)
      {
        os_log_type_t v86 = v56;
        uint64_t v59 = swift_slowAlloc(22LL, -1LL);
        uint64_t v84 = swift_slowAlloc(64LL, -1LL);
        v98[0] = v84;
        *(_DWORD *)uint64_t v59 = 136315394;
        swift_bridgeObjectRetain(v11);
        uint64_t *v90 = sub_10007C22C(v96, v11, v98);
        uint64_t v87 = (unint64_t *)(v0 + 72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v90, v0 + 72, v59 + 4, v59 + 12);
        swift_bridgeObjectRelease(v11);

        *(_WORD *)(v59 + 12) = 2080;
        uint64_t v60 = v94;
        if (v93 > 2) {
          goto LABEL_24;
        }
        id v61 = *v1;
        *(void *)(v0 + 80) = sub_10007C22C(*(void *)&aSuccess_1[8 * v93], 0xE700000000000000LL, v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, log, v59 + 14, v59 + 22);
        swift_bridgeObjectRelease(0xE700000000000000LL);

        _os_log_impl((void *)&_mh_execute_header, v55, v86, "Storing element %s with result %s", (uint8_t *)v59, 0x16u);
        swift_arrayDestroy(v84, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v84, -1LL, -1LL);
        swift_slowDealloc(v59, -1LL, -1LL);
      }

      else
      {

        uint64_t v60 = v94;
      }

      uint64_t v62 = *(void *)(v0 + 160);
      uint64_t v63 = *(void *)(v0 + 112);
      uint64_t v64 = v60();
      uint64_t v65 = *(void *)(v63 + OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_error);
      j___s10Foundation4DateV3nowACvgZ();
      sub_10009560C(v96, v11, v93 == 0, v65, v62);
      uint64_t v66 = *(void *)(v0 + 184);
      uint64_t v68 = *(void *)(v0 + 160);
      uint64_t v67 = *(void *)(v0 + 168);
      uint64_t v69 = *(void *)(v0 + 136);
      swift_release(v64);

      goto LABEL_29;
    }
  }

  __break(1u);
  return result;
}

    unint64_t v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v24 = *v23;
    uint64_t v25 = (-1LL << v3) - 1;
  }

  else
  {
    unint64_t v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v25 = *v23;
    uint64_t v24 = (-1LL << result) - 1;
  }

  void *v23 = v25 & v24;
  uint64_t v26 = *(void *)(a2 + 16);
  uint64_t v27 = __OFSUB__(v26, 1LL);
  uint64_t v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}
  }

  return v34;
}

  [v3 setPeerStateMostRecent:v15];
  BOOL v37 = (void *)objc_claimAutoreleasedReturnValue([v15 mostRecentSuccess]);

  if (v37)
  {
    NSString v38 = (void *)objc_claimAutoreleasedReturnValue([v15 mostRecentSuccess]);
    os_log_type_t v39 = (void *)objc_claimAutoreleasedReturnValue([v38 accountKey]);
    if ([v39 isEqual:*(void *)(a1 + 56)])
    {
      BOOL v40 = (void *)objc_claimAutoreleasedReturnValue([v15 mostRecentSuccess]);
      id v41 = (void *)objc_claimAutoreleasedReturnValue([v40 serverLoggableDatas]);
      uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v3 serverLoggableDatas]);
      uint64_t v43 = [v41 isEqual:v42];

      if ((v43 & 1) != 0) {
        goto LABEL_27;
      }
    }

    else
    {
    }

    [v15 setMostRecentSuccess:0];
  }

    goto LABEL_22;
  }

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained idsRegistrationInterface]);
  [v13 triggerRegistrationDataNeedsUpdate:@"missing"];

  [WeakRetained setCheckIDSError:2];
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
  [v6 addOperation:v14];
LABEL_23:
}
}
}

uint64_t sub_1000D0EF4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0LL;
  }
  uint64_t v7 = a3[4];
  uint64_t v8 = a3[5];
  if (v7 == a1 && v8 == a2) {
    return 1LL;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0LL);
  if ((result & 1) != 0) {
    return 1LL;
  }
  if (v3 == 1) {
    return 0LL;
  }
  unint64_t v11 = a3 + 7;
  for (uint64_t i = 1LL; ; ++i)
  {
    uint64_t v13 = i + 1;
    if (__OFADD__(i, 1LL)) {
      break;
    }
    uint64_t v14 = *(v11 - 1);
    uint64_t v15 = *v11;
    BOOL v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0LL) & 1) != 0) {
      return 1LL;
    }
    uint64_t result = 0LL;
    v11 += 2;
    if (v13 == v3) {
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1000D10EC(void *a1, void *aBlock, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  uint64_t v6 = dword_1002E1CCC;
  id v7 = a1;
  swift_retain(a3);
  uint64_t v8 = (void *)swift_task_alloc(v6);
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_1000D1168;
  return sub_1000D037C((uint64_t)v7);
}

uint64_t sub_1000D1168(char a1)
{
  uint64_t v4 = *(void *)(*v2 + 40);
  uint64_t v6 = *(void **)(*v2 + 16);
  uint64_t v5 = *(void *)(*v2 + 24);
  uint64_t v7 = *v2;
  swift_task_dealloc(v4);

  swift_release(v5);
  uint64_t v8 = *(void *)(v7 + 32);
  if (v1)
  {
    Swift::Int v9 = (void *)_convertErrorToNSError(_:)(v1);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0LL, v9);
  }

  else
  {
    (*(void (**)(void, void, void))(v8 + 16))(*(void *)(v7 + 32), a1 & 1, 0LL);
  }

  _Block_release(*(const void **)(v7 + 32));
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_1000D1224(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x120LL))(v5);
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }

  uint64_t v9 = result;
  uint64_t result = Date.init()(result);
  uint64_t v10 = 3600 * (24 / v9);
  uint64_t v11 = v10 * a1;
  if ((unsigned __int128)(v10 * (__int128)a1) >> 64 != (v10 * a1) >> 63)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (v11 != 0x8000000000000000LL)
  {
    Date.addingTimeInterval(_:)((double)-v11);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }

uint64_t sub_1000D1328()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xC8LL))();
}

uint64_t sub_1000D1344()
{
  *(void *)(v1 + 120) = v0;
  return swift_task_switch(sub_1000D135C, v0, 0LL);
}

uint64_t sub_1000D135C()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = *(void **)(v0[15] + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_support);
  v0[7] = v0 + 17;
  v0[2] = v0;
  v0[3] = sub_1000D13FC;
  uint64_t v3 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v4 = v0 + 10;
  v4[1] = 0x40000000LL;
  void v4[2] = sub_1000D14AC;
  v4[3] = &unk_100280180;
  void v4[4] = v3;
  [v2 checkiCloudAnalyticsWithCompletionHandler:v4];
  return swift_continuation_await(v1);
}

uint64_t sub_1000D13FC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 128) = v2;
  if (v2) {
    uint64_t v3 = sub_1000D146C;
  }
  else {
    uint64_t v3 = sub_1000D145C;
  }
  return swift_task_switch(v3, *(void *)(v1 + 120), 0LL);
}

uint64_t sub_1000D145C()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(v0 + 136));
}

uint64_t sub_1000D146C()
{
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t sub_1000D14AC(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    uint64_t v5 = sub_100072CC4(&qword_1002DF260);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *uint64_t v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else
  {
    **(_BYTE **)(*(void *)(v3 + 64) + 4_swift_stdlib_reportUnimplementedInitializer("transparencyd.ReportTime", 24LL, "init()", 6LL, 0LL) = a2;
    return swift_continuation_throwingResume(v3);
  }

uint64_t sub_1000D164C(const void *a1, uint64_t a2)
{
  *(void *)(v2 + 120) = a2;
  *(void *)(v2 + 128) = _Block_copy(a1);
  swift_retain(a2);
  return swift_task_switch(sub_1000D1698, a2, 0LL);
}

uint64_t sub_1000D1698()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = *(void **)(v0[15] + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_support);
  v0[7] = v0 + 18;
  v0[2] = v0;
  v0[3] = sub_1000D1738;
  uint64_t v3 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v4 = v0 + 10;
  v4[1] = 0x40000000LL;
  void v4[2] = sub_1000D14AC;
  v4[3] = &unk_100280908;
  void v4[4] = v3;
  [v2 checkiCloudAnalyticsWithCompletionHandler:v4];
  return swift_continuation_await(v1);
}

uint64_t sub_1000D1738()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 136) = v2;
  if (v2) {
    uint64_t v3 = sub_1000D17E8;
  }
  else {
    uint64_t v3 = sub_1000D1798;
  }
  return swift_task_switch(v3, *(void *)(v1 + 120), 0LL);
}

uint64_t sub_1000D1798()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 144);
  swift_release(*(void *)(v0 + 120));
  (*(void (**)(uint64_t, uint64_t, void))(v1 + 16))(v1, v2, 0LL);
  _Block_release(*(const void **)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D17E8()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 120);
  swift_willThrow();
  swift_release(v3);
  uint64_t v4 = (void *)_convertErrorToNSError(_:)(v2);
  swift_errorRelease(v2);
  (*(void (**)(uint64_t, void, void *))(v1 + 16))(v1, 0LL, v4);

  _Block_release(*(const void **)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D186C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch(sub_1000D1888, v2, 0LL);
}

uint64_t sub_1000D1888()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 32)) + 0x98LL))();
  uint64_t v4 = sub_100093FF8(v2, v1);
  swift_release(v3);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t sub_1000D1A50(uint64_t a1, void *aBlock, uint64_t a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v3[4] = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v3[5] = v6;
  swift_retain(a3);
  return swift_task_switch(sub_1000D1AB0, a3, 0LL);
}

uint64_t sub_1000D1AB0()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void **)(v0 + 16);
  uint64_t v4 = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0x98LL))();
  uint64_t v5 = (void *)sub_100093FF8(v1, v2);
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  uint64_t v6 = *(void (***)(void, void, void))(v0 + 24);
  ((void (**)(void, void *, void))v6)[2](v6, v5, 0LL);
  _Block_release(v6);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D1BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  v4[5] = v3;
  void v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for Date(0LL);
  v4[6] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[7] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[8] = swift_task_alloc(v7);
  void v4[9] = swift_task_alloc(v7);
  return swift_task_switch(sub_1000D1C14, v3, 0LL);
}

uint64_t sub_1000D1C14()
{
  uint64_t v1 = *(void **)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x98LL))();
  uint64_t v4 = *(void (**)(uint64_t))((swift_isaMask & *v1) + 0x118LL);
  v4(v2);
  v4(1LL);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v8 = *(void *)(v0 + 56);
  uint64_t v7 = *(void *)(v0 + 64);
  uint64_t v9 = *(void *)(v0 + 48);
  LOBYTE(v1) = sub_1000944E4(*(void *)(v0 + 24), *(void *)(v0 + 32), v5, v7, *(void *)(v0 + 16), 0.9);
  swift_release(v3);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v10(v7, v9);
  v10(v5, v9);
  uint64_t v11 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 72));
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))(v1 & 1);
}

uint64_t sub_1000D1E98(uint64_t a1, uint64_t a2, void *aBlock, uint64_t a4)
{
  void v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  if (a2)
  {
    a2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
    uint64_t v9 = v8;
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  void v4[4] = v9;
  uint64_t v10 = dword_1002E1CE4;
  swift_retain(a4);
  uint64_t v11 = (void *)swift_task_alloc(v10);
  v4[5] = v11;
  void *v11 = v4;
  v11[1] = sub_1000D1F40;
  return sub_1000D1BA0(a1, a2, v9);
}

uint64_t sub_1000D1F40(char a1)
{
  uint64_t v4 = *(void *)(*v2 + 40);
  uint64_t v5 = *(void *)(*v2 + 16);
  uint64_t v6 = *v2;
  swift_task_dealloc(v4);
  swift_release(v5);
  uint64_t v7 = *(void *)(v6 + 24);
  swift_bridgeObjectRelease(*(void *)(v6 + 32));
  if (v1)
  {
    uint64_t v8 = (void *)_convertErrorToNSError(_:)(v1);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0LL, v8);
  }

  else
  {
    (*(void (**)(uint64_t, void, void))(v7 + 16))(v7, a1 & 1, 0LL);
  }

  _Block_release(*(const void **)(v6 + 24));
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1000D1FF4()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)(v0 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_db);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_db, v7, 0LL, 0LL);
  uint64_t v3 = *v2;
  swift_retain(*v2);
  sub_100093EA8();
  swift_release(v3);
  uint64_t v4 = v1 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_logger;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  swift_release(*v2);

  swift_unknownObjectRelease(*(void *)(v1
                                       + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_idsEventReportingManager));
  swift_unknownObjectRelease(*(void *)(v1 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_support));
  swift_defaultActor_destroy(v1);
  return v1;
}

uint64_t sub_1000D20C4()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)(v0 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_db);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_db, v7, 0LL, 0LL);
  uint64_t v3 = *v2;
  swift_retain(*v2);
  sub_100093EA8();
  swift_release(v3);
  uint64_t v4 = v1 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_logger;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  swift_release(*v2);

  swift_unknownObjectRelease(*(void *)(v1
                                       + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_idsEventReportingManager));
  swift_unknownObjectRelease(*(void *)(v1 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_support));
  swift_defaultActor_destroy(v1);
  return swift_defaultActor_deallocate(v1);
}

uint64_t sub_1000D2198(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch(sub_1000D21B4, v2, 0LL);
}

uint64_t sub_1000D21B4()
{
  *(void *)(v0 + 40) = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 32)) + 0x98LL))();
  if (qword_1002EC018 != -1) {
    swift_once(&qword_1002EC018, sub_1000CD090);
  }
  uint64_t v1 = qword_1002EF240;
  uint64_t v2 = *(void *)algn_1002EF248;
  uint64_t v3 = (void *)swift_task_alloc(dword_1002E0994);
  *(void *)(v0 + 48) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000D226C;
  return sub_100095660(v1, v2, *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000D226C()
{
  uint64_t v2 = *(void *)(*v1 + 48);
  uint64_t v3 = *v1;
  *(void *)(v3 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_1000D22E0, *(void *)(v3 + 32), 0LL);
  }
  swift_release(*(void *)(v3 + 40));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000D22E0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D2448(uint64_t a1, void *aBlock, uint64_t a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v3[4] = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v3[5] = v6;
  swift_retain(a3);
  return swift_task_switch(sub_1000D24A8, a3, 0LL);
}

uint64_t sub_1000D24A8()
{
  *(void *)(v0 + 48) = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0x98LL))();
  if (qword_1002EC018 != -1) {
    swift_once(&qword_1002EC018, sub_1000CD090);
  }
  uint64_t v1 = qword_1002EF240;
  uint64_t v2 = *(void *)algn_1002EF248;
  uint64_t v3 = (void *)swift_task_alloc(dword_1002E0994);
  *(void *)(v0 + 56) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000D2560;
  return sub_100095660(v1, v2, *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1000D2560()
{
  uint64_t v2 = *(void *)(*v1 + 56);
  uint64_t v3 = *v1;
  *(void *)(v3 + 64) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_1000D260C, *(void *)(v3 + 16), 0LL);
  }
  uint64_t v5 = *(void *)(v3 + 40);
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v6 = *(void *)(v3 + 24);
  swift_release(*(void *)(v3 + 48));
  swift_release(v7);
  swift_bridgeObjectRelease(v5);
  (*(void (**)(uint64_t, void))(v6 + 16))(v6, 0LL);
  _Block_release(*(const void **)(v3 + 24));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000D260C()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  swift_release(*(void *)(v0 + 48));
  swift_release(v4);
  swift_bridgeObjectRelease(v2);
  uint64_t v5 = (void *)_convertErrorToNSError(_:)(v1);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v5);

  _Block_release(*(const void **)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D268C()
{
  *(void *)(v1 + 16) = v0;
  return swift_task_switch(sub_1000D26A4, v0, 0LL);
}

uint64_t sub_1000D26A4()
{
  *(void *)(v0 + 24) = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0x98LL))();
  if (qword_1002EC018 != -1) {
    swift_once(&qword_1002EC018, sub_1000CD090);
  }
  uint64_t v1 = qword_1002EF240;
  uint64_t v2 = *(void *)algn_1002EF248;
  uint64_t v3 = (void *)swift_task_alloc(dword_1002E0984);
  *(void *)(v0 + 32) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000D2758;
  return sub_100095528(v1, v2);
}

uint64_t sub_1000D2758(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(*v3 + 32);
  uint64_t v7 = *v3;
  *(void *)(v7 + 40) = v2;
  swift_task_dealloc(v6);
  if (v2) {
    return swift_task_switch(sub_1000D27E8, *(void *)(v7 + 16), 0LL);
  }
  swift_release(*(void *)(v7 + 24));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
}

uint64_t sub_1000D27E8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D293C(const void *a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  *(void *)(v2 + 24) = _Block_copy(a1);
  swift_retain(a2);
  return swift_task_switch(sub_1000D2988, a2, 0LL);
}

uint64_t sub_1000D2988()
{
  *(void *)(v0 + 32) = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0x98LL))();
  if (qword_1002EC018 != -1) {
    swift_once(&qword_1002EC018, sub_1000CD090);
  }
  uint64_t v1 = qword_1002EF240;
  uint64_t v2 = *(void *)algn_1002EF248;
  uint64_t v3 = (void *)swift_task_alloc(dword_1002E0984);
  *(void *)(v0 + 40) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000D2A3C;
  return sub_100095528(v1, v2);
}

uint64_t sub_1000D2A3C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(*v3 + 40);
  uint64_t v6 = *v3;
  *(void *)(v6 + 48) = v2;
  swift_task_dealloc(v5);
  if (v2) {
    return swift_task_switch(sub_1000D2B18, *(void *)(v6 + 16), 0LL);
  }
  uint64_t v8 = *(void *)(v6 + 16);
  swift_release(*(void *)(v6 + 32));
  swift_release(v8);
  if (a2)
  {
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    NSString v9 = 0LL;
  }

  uint64_t v10 = *(void (***)(void, void, void))(v6 + 24);
  ((void (**)(void, NSString, void))v10)[2](v10, v9, 0LL);

  _Block_release(v10);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1000D2B18()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 16);
  swift_release(*(void *)(v0 + 32));
  swift_release(v2);
  uint64_t v3 = (void *)_convertErrorToNSError(_:)(v1);
  swift_errorRelease(v1);
  uint64_t v4 = *(void (***)(void, void, void))(v0 + 24);
  ((void (**)(void, void, void *))v4)[2](v4, 0LL, v3);

  _Block_release(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D2B90()
{
  *(void *)(v1 + 80) = v0;
  uint64_t v2 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  *(void *)(v1 + 88) = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000D2BEC, v0, 0LL);
}

uint64_t sub_1000D2BEC()
{
  *(void *)(v0 + 96) = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 80)) + 0x98LL))();
  if (qword_1002EC010 != -1) {
    swift_once(&qword_1002EC010, sub_1000CD014);
  }
  uint64_t v1 = qword_1002EF230;
  uint64_t v2 = *(void *)algn_1002EF238;
  uint64_t v3 = (void *)swift_task_alloc(dword_1002E0984);
  *(void *)(v0 + 104) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000D2CA0;
  return sub_100095528(v1, v2);
}

uint64_t sub_1000D2CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void *)(*(void *)v3 + 104LL);
  v4[14] = a1;
  v4[15] = a2;
  v4[16] = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    uint64_t v6 = v4[10];
    uint64_t v7 = sub_1000D30E8;
  }

  else
  {
    uint64_t v8 = v4[10];
    swift_release(v4[12]);
    uint64_t v7 = sub_1000D2D20;
    uint64_t v6 = v8;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_1000D2D20()
{
  void (*v7)(uint64_t *__return_ptr);
  uint64_t v8;
  uint64_t result;
  id v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  double v20;
  void *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t, uint64_t);
  objc_class *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  unsigned __int8 *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v1 = *(void *)(v0 + 120);
  if (!v1)
  {
    uint64_t v10 = 0LL;
LABEL_10:
    swift_task_dealloc(*(void *)(v0 + 88));
    return (*(uint64_t (**)(id))(v0 + 8))(v10);
  }

  *(void *)(v0 + 72) = 0LL;
  uint64_t v2 = swift_task_alloc(32LL);
  *(void *)(v2 + 16) = v0 + 72;
  uint64_t v3 = *(void *)(v0 + 112);
  if ((v1 & 0x1000000000000000LL) == 0)
  {
    uint64_t v4 = *(void *)(v0 + 120);
    if (v4 & 0x2000000000000000LL | v3 & 0x1000000000000000LL)
    {
      uint64_t v5 = swift_task_alloc(32LL);
      *(void *)(v5 + 16) = sub_1000D51D4;
      *(void *)(v5 + 24) = v2;
      if ((v4 & 0x2000000000000000LL) != 0)
      {
        uint64_t v11 = *(void *)(v0 + 112);
        uint64_t v12 = *(void *)(v0 + 120) & 0xFFFFFFFFFFFFFFLL;
        *(void *)(v0 + 56) = v11;
        *(void *)(v0 + 64) = v12;
        if (v11 <= 0x20u && ((1LL << v11) & 0x100003E01LL) != 0
          || (uint64_t v30 = (unsigned __int8 *)_swift_stdlib_strtod_clocale(v0 + 56, v0 + 72)) == 0LL)
        {
          swift_bridgeObjectRelease(v1);
          swift_task_dealloc(v5);
          swift_task_dealloc(v2);
        }

        else
        {
          uint64_t v31 = *v30;
          swift_bridgeObjectRelease(v1);
          swift_task_dealloc(v5);
          uint64_t v17 = swift_task_dealloc(v2);
          if (!v31) {
            goto LABEL_18;
          }
        }

uint64_t sub_1000D30E8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D3244(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_1002E1CFC;
  swift_retain(a2);
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000D32A4;
  return sub_1000D2B90();
}

uint64_t sub_1000D32A4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void *)(*v2 + 32);
  uint64_t v6 = *(void *)(*v2 + 16);
  uint64_t v7 = *v2;
  swift_task_dealloc(v5);
  swift_release(v6);
  uint64_t v8 = *(void (***)(void, void, void))(v7 + 24);
  if (v3)
  {
    NSString v9 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(void, void, void *))v8)[2](v8, 0LL, v9);

    _Block_release(v8);
  }

  else
  {
    ((void (**)(void, void *, void))v8)[2](*(void *)(v7 + 24), a1, 0LL);
    _Block_release(v8);
  }

  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_1000D3364()
{
  *(void *)(v1 + 16) = v0;
  return swift_task_switch(sub_1000D337C, v0, 0LL);
}

uint64_t sub_1000D337C()
{
  *(void *)(v0 + 24) = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0x98LL))();
  uint64_t v1 = (void *)swift_task_alloc(dword_1002E0984);
  *(void *)(v0 + 32) = v1;
  void *v1 = v0;
  v1[1] = sub_1000D3404;
  return sub_100095528(0xD000000000000012LL, 0x8000000100210A90LL);
}

uint64_t sub_1000D3404(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void *)(*(void *)v3 + 32LL);
  v4[5] = a1;
  v4[6] = a2;
  v4[7] = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    uint64_t v6 = v4[2];
    uint64_t v7 = sub_1000D3550;
  }

  else
  {
    uint64_t v8 = v4[2];
    swift_release(v4[3]);
    uint64_t v7 = sub_1000D3480;
    uint64_t v6 = v8;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_1000D3480()
{
  uint64_t v1 = *(void *)(v0 + 48);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 40);
    if (v1 == 0xE100000000000000LL && v2 == 49
      || (_stringCompareWithSmolCheck(_:_:expecting:)(49LL, 0xE100000000000000LL, v2, *(void *)(v0 + 48), 0LL) & 1) != 0)
    {
      swift_bridgeObjectRelease(v1);
      uint64_t v3 = 0LL;
    }

    else
    {
      uint64_t v5 = *(void *)(v0 + 40);
      if (v1 == 0xE100000000000000LL && v5 == 48)
      {
        swift_bridgeObjectRelease(0xE100000000000000LL);
        uint64_t v3 = 2LL;
      }

      else
      {
        char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(48LL, 0xE100000000000000LL, v5, v1, 0LL);
        swift_bridgeObjectRelease(v1);
        if ((v6 & 1) != 0) {
          uint64_t v3 = 2LL;
        }
        else {
          uint64_t v3 = 1LL;
        }
      }
    }
  }

  else
  {
    uint64_t v3 = 1LL;
  }

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t sub_1000D3550()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D36A4(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_1002E1D04;
  swift_retain(a2);
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000D371C;
  v5[2] = a2;
  return swift_task_switch(sub_1000D337C, a2, 0LL);
}

uint64_t sub_1000D371C(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 32);
  uint64_t v5 = *(void *)(*v2 + 16);
  uint64_t v6 = *v2;
  swift_task_dealloc(v4);
  swift_release(v5);
  uint64_t v7 = *(void *)(v6 + 24);
  if (v1)
  {
    uint64_t v8 = (void *)_convertErrorToNSError(_:)(v1);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t))(v7 + 16))(v7);
  }

  else
  {
    (*(void (**)(void, uint64_t, void))(v7 + 16))(*(void *)(v6 + 24), a1, 0LL);
  }

  _Block_release(*(const void **)(v6 + 24));
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1000D37C8()
{
  *(void *)(v1 + 16) = v0;
  return swift_task_switch(sub_1000D37E0, v0, 0LL);
}

uint64_t sub_1000D37E0()
{
  (*(void (**)(void))((swift_isaMask & **(void **)(*(void *)(v0 + 16)
                                                   + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides))
                    + 0xD0LL))();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D3954(const void *a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  *(void *)(v2 + 24) = _Block_copy(a1);
  swift_retain(a2);
  return swift_task_switch(sub_1000D39A0, a2, 0LL);
}

uint64_t sub_1000D39A0()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void (***)(void))(v0 + 24);
  (*(void (**)(void))((swift_isaMask & **(void **)(v2
                                                   + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides))
                    + 0xD0LL))();
  swift_release(v2);
  v1[2](v1);
  _Block_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D3A18()
{
  *(void *)(v1 + 16) = v0;
  return swift_task_switch(sub_1000D3A30, v0, 0LL);
}

uint64_t sub_1000D3A30()
{
  (*(void (**)(void))((swift_isaMask & **(void **)(*(void *)(v0 + 16)
                                                   + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides))
                    + 0xD8LL))();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D3BA4(const void *a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  *(void *)(v2 + 24) = _Block_copy(a1);
  swift_retain(a2);
  return swift_task_switch(sub_1000D3BF0, a2, 0LL);
}

uint64_t sub_1000D3BF0()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void (***)(void))(v0 + 24);
  (*(void (**)(void))((swift_isaMask & **(void **)(v2
                                                   + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides))
                    + 0xD8LL))();
  swift_release(v2);
  v1[2](v1);
  _Block_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D3C68(char a1)
{
  *(void *)(v2 + 16) = v1;
  *(_BYTE *)(v2 + 24) = a1;
  return swift_task_switch(sub_1000D3C84, v1, 0LL);
}

uint64_t sub_1000D3C84()
{
  (*(void (**)(void))((swift_isaMask & **(void **)(*(void *)(v0 + 16)
                                                                + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides))
                                 + 0xF0LL))(*(unsigned __int8 *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D3E0C(char a1, void *aBlock, uint64_t a3)
{
  *(void *)(v3 + 16) = a3;
  *(_BYTE *)(v3 + 32) = a1;
  *(void *)(v3 + 24) = _Block_copy(aBlock);
  swift_retain(a3);
  return swift_task_switch(sub_1000D3E60, a3, 0LL);
}

uint64_t sub_1000D3E60()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void (***)(void))(v0 + 24);
  (*(void (**)(void))((swift_isaMask & **(void **)(v2
                                                                + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides))
                                 + 0xF0LL))(*(unsigned __int8 *)(v0 + 32));
  swift_release(v2);
  v1[2](v1);
  _Block_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D3EDC(char a1)
{
  *(void *)(v2 + 16) = v1;
  *(_BYTE *)(v2 + 24) = a1;
  return swift_task_switch(sub_1000D3EF8, v1, 0LL);
}

uint64_t sub_1000D3EF8()
{
  (*(void (**)(void))((swift_isaMask & **(void **)(*(void *)(v0 + 16)
                                                                + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides))
                                 + 0xE0LL))(*(unsigned __int8 *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D4080(char a1, void *aBlock, uint64_t a3)
{
  *(void *)(v3 + 16) = a3;
  *(_BYTE *)(v3 + 32) = a1;
  *(void *)(v3 + 24) = _Block_copy(aBlock);
  swift_retain(a3);
  return swift_task_switch(sub_1000D40D4, a3, 0LL);
}

uint64_t sub_1000D40D4()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void (***)(void))(v0 + 24);
  (*(void (**)(void))((swift_isaMask & **(void **)(v2
                                                                + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides))
                                 + 0xE0LL))(*(unsigned __int8 *)(v0 + 32));
  swift_release(v2);
  v1[2](v1);
  _Block_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D4150(char a1)
{
  *(void *)(v2 + 16) = v1;
  *(_BYTE *)(v2 + 24) = a1;
  return swift_task_switch(sub_1000D416C, v1, 0LL);
}

uint64_t sub_1000D416C()
{
  (*(void (**)(void))((swift_isaMask & **(void **)(*(void *)(v0 + 16)
                                                                + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides))
                                 + 0xE8LL))(*(unsigned __int8 *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D42F4(char a1, void *aBlock, uint64_t a3)
{
  *(void *)(v3 + 16) = a3;
  *(_BYTE *)(v3 + 32) = a1;
  *(void *)(v3 + 24) = _Block_copy(aBlock);
  swift_retain(a3);
  return swift_task_switch(sub_1000D4348, a3, 0LL);
}

uint64_t sub_1000D4348()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void (***)(void))(v0 + 24);
  (*(void (**)(void))((swift_isaMask & **(void **)(v2
                                                                + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides))
                                 + 0xE8LL))(*(unsigned __int8 *)(v0 + 32));
  swift_release(v2);
  v1[2](v1);
  _Block_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D43C4(double a1)
{
  *(void *)(v2 + 24) = v1;
  *(double *)(v2 + 16) = a1;
  return swift_task_switch(sub_1000D43E0, v1, 0LL);
}

uint64_t sub_1000D43E0()
{
  (*(void (**)(double))((swift_isaMask & **(void **)(*(void *)(v0 + 24)
                                                                + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides))
                                 + 0xF8LL))(*(double *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D4568(const void *a1, uint64_t a2, double a3)
{
  *(void *)(v3 + 24) = a2;
  *(double *)(v3 + 16) = a3;
  *(void *)(v3 + 32) = _Block_copy(a1);
  swift_retain(a2);
  return swift_task_switch(sub_1000D45B8, a2, 0LL);
}

uint64_t sub_1000D45B8()
{
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v1 = *(void (***)(void))(v0 + 32);
  (*(void (**)(double))((swift_isaMask & **(void **)(v2
                                                                + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides))
                                 + 0xF8LL))(*(double *)(v0 + 16));
  swift_release(v2);
  v1[2](v1);
  _Block_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D4634(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_BYTE *)(v5 + 72) = a4;
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + 40) = v4;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  uint64_t v6 = type metadata accessor for Date(0LL);
  *(void *)(v5 + 48) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v5 + 56) = v7;
  *(void *)(v5 + 64) = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000D469C, v4, 0LL);
}

uint64_t sub_1000D469C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(void **)(v0 + 40);
  uint64_t v3 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x98LL))();
  (*(void (**)(uint64_t))((swift_isaMask & *v1) + 0x118LL))(v2);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v6 = *(void *)(v0 + 48);
  sub_10009560C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(_BYTE *)(v0 + 72), 0LL, v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_release(v3);
  swift_task_dealloc(*(void *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D48D8(uint64_t a1, uint64_t a2, char a3, const void *a4, uint64_t a5)
{
  *(_BYTE *)(v5 + 88) = a3;
  *(void *)(v5 + 32) = a2;
  *(void *)(v5 + 40) = a5;
  uint64_t v9 = type metadata accessor for Date(0LL);
  *(void *)(v5 + 48) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v5 + 56) = v10;
  *(void *)(v5 + 64) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v5 + 72) = _Block_copy(a4);
  *(void *)(v5 + 16) = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  *(void *)(v5 + 24) = v11;
  *(void *)(v5 + 80) = v11;
  swift_retain(a5);
  return swift_task_switch(sub_1000D4974, a5, 0LL);
}

uint64_t sub_1000D4974()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(void **)(v0 + 40);
  uint64_t v3 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x98LL))();
  (*(void (**)(uint64_t))((swift_isaMask & *v1) + 0x118LL))(v2);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v6 = *(void *)(v0 + 48);
  sub_10009560C(*(void *)(v0 + 16), *(void *)(v0 + 80), *(_BYTE *)(v0 + 88), 0LL, v4);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v10 = *(void *)(v0 + 72);
  uint64_t v9 = *(void *)(v0 + 80);
  uint64_t v11 = *(void *)(v0 + 40);
  swift_release(v3);
  swift_release(v11);
  swift_bridgeObjectRelease(v9);
  (*(void (**)(uint64_t, void))(v10 + 16))(v10, 0LL);
  uint64_t v7 = *(void *)(v0 + 64);
  _Block_release(*(const void **)(v0 + 72));
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D4AC0()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xD0LL))();
}

uint64_t sub_1000D4ADC()
{
  *(void *)(v1 + 16) = v0;
  return swift_task_switch(sub_1000D4AF4, v0, 0LL);
}

uint64_t sub_1000D4AF4()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0x98LL))();
  sub_100093EA8();
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D4C70(const void *a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  *(void *)(v2 + 24) = _Block_copy(a1);
  swift_retain(a2);
  return swift_task_switch(sub_1000D4CBC, a2, 0LL);
}

uint64_t sub_1000D4CBC()
{
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t v1 = *(void (***)(void, void))(v0 + 24);
  uint64_t v3 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x98LL))();
  sub_100093EA8();
  swift_release(v3);
  swift_release(v2);
  v1[2](v1, 0LL);
  _Block_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000D4D40()
{
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  swift_defaultActor_initialize(v1);
  _swift_stdlib_reportUnimplementedInitializer("transparencyd.KTEligibilityStatusReporting", 42LL, "init()", 6LL, 0LL);
  __break(1u);
}

void sub_1000D4D80()
{
}

uint64_t sub_1000D4DE4()
{
  return v0;
}

unint64_t sub_1000D4DF0(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1000D4E20(a1, v4);
}

unint64_t sub_1000D4E20(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_1000D5DBC(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_1000D51A0((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

id sub_1000D4EE4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100085DFC(a4, (uint64_t)v10);
  uint64_t v11 = (objc_class *)type metadata accessor for KTEligibilityStatusResult(0LL);
  uint64_t v12 = (char *)objc_allocWithZone(v11);
  *(void *)&v12[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_result] = 2LL;
  *(void *)&v12[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_error] = a3;
  uint64_t v13 = &v12[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_element];
  *(void *)uint64_t v13 = a1;
  *((void *)v13 + 1) = a2;
  sub_100085DFC((uint64_t)v10, (uint64_t)&v12[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_dateStored]);
  v17.receiver = v12;
  v17.super_class = v11;
  swift_bridgeObjectRetain(a2);
  id v14 = a3;
  id v15 = objc_msgSendSuper2(&v17, "init");
  sub_100077CFC((uint64_t)v10, (uint64_t *)&unk_1002DF740);
  return v15;
}

id sub_1000D5000(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  uint64_t v10 = (objc_class *)type metadata accessor for KTEligibilityStatusResult(0LL);
  uint64_t v11 = (char *)objc_allocWithZone(v10);
  *(void *)&v11[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_result] = 2LL;
  *(void *)&v11[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_error] = a3;
  uint64_t v12 = &v11[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_element];
  *(void *)uint64_t v12 = a1;
  *((void *)v12 + 1) = a2;
  sub_100085DFC((uint64_t)v8, (uint64_t)&v11[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_dateStored]);
  v16.receiver = v11;
  v16.super_class = v10;
  swift_bridgeObjectRetain(a2);
  id v13 = a3;
  id v14 = objc_msgSendSuper2(&v16, "init");
  sub_100077CFC((uint64_t)v8, (uint64_t *)&unk_1002DF740);
  return v14;
}

uint64_t sub_1000D5130(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ReportTime(uint64_t a1)
{
  return sub_100072DB8(a1, (uint64_t *)&unk_1002EC3C0, (uint64_t)&nominal type descriptor for ReportTime);
}

uint64_t type metadata accessor for KTEligibilityStatusReporting(uint64_t a1)
{
  return sub_100072DB8( a1,  (uint64_t *)&unk_1002EC3D0,  (uint64_t)&nominal type descriptor for KTEligibilityStatusReporting);
}

uint64_t sub_1000D51A0(uint64_t a1)
{
  return a1;
}

_BYTE *sub_1000D51D4@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1LL << v3) & 0x100003E01LL;
  BOOL v6 = v4 || v5 == 0;
  BOOL v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0LL && *result == 0;
  *a2 = v7;
  return result;
}

unint64_t sub_1000D5244()
{
  unint64_t result = qword_1002E1D48;
  if (!qword_1002E1D48)
  {
    unint64_t result = swift_getWitnessTable(&unk_100249640, &type metadata for KTEligibilityStatusResult.Status);
    atomic_store(result, (unint64_t *)&qword_1002E1D48);
  }

  return result;
}

unint64_t sub_1000D528C()
{
  unint64_t result = qword_1002E1D50;
  if (!qword_1002E1D50)
  {
    unint64_t result = swift_getWitnessTable(&unk_1002496E0, &type metadata for Recommendation);
    atomic_store(result, (unint64_t *)&qword_1002E1D50);
  }

  return result;
}

uint64_t sub_1000D52D0()
{
  return type metadata accessor for KTEligibilityStatusResult(0LL);
}

uint64_t type metadata accessor for KTEligibilityStatusResult(uint64_t a1)
{
  return sub_100072DB8(a1, (uint64_t *)&unk_1002EC3B0, (uint64_t)&nominal type descriptor for KTEligibilityStatusResult);
}

void sub_1000D52EC(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = "\b";
  void v4[2] = &unk_1002497F8;
  sub_100090D84(319LL);
  if (v3 <= 0x3F)
  {
    v4[3] = *(void *)(v2 - 8) + 64LL;
    swift_updateClassMetadata2(a1, 256LL, 4LL, v4, a1 + 80);
  }

ValueMetadata *type metadata accessor for KTEligibilityStatusResult.Status()
{
  return &type metadata for KTEligibilityStatusResult.Status;
}

ValueMetadata *type metadata accessor for Recommendation()
{
  return &type metadata for Recommendation;
}

uint64_t sub_1000D539C()
{
  return type metadata accessor for ReportTime(0LL);
}

void sub_1000D53A4(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_updateClassMetadata2(a1, 256LL, 2LL, v4, a1 + 80);
  }

uint64_t sub_1000D541C()
{
  return type metadata accessor for KTEligibilityStatusReporting(0LL);
}

uint64_t sub_1000D5424(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    void v4[4] = &unk_100249850;
    v4[5] = &unk_100249850;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[8] = (char *)&value witness table for Builtin.Int64 + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 9LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000D54D8()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  BOOL v4 = (void *)swift_task_alloc(dword_1002E1DD4);
  *(void *)(v1 + 16) = v4;
  *BOOL v4 = v1;
  v4[1] = sub_10007ADC4;
  return ((uint64_t (*)(const void *, uint64_t))((char *)&dword_1002E1DD0 + dword_1002E1DD0))(v2, v3);
}

uint64_t sub_1000D5544()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000D5568()
{
  _Block_release(*(const void **)(v0 + 40));
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1000D559C()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  char v4 = *(_BYTE *)(v0 + 32);
  BOOL v6 = *(const void **)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 48);
  BOOL v7 = (void *)swift_task_alloc(dword_1002E1DFC);
  *(void *)(v1 + 16) = v7;
  *BOOL v7 = v1;
  v7[1] = sub_10007AB68;
  return ((uint64_t (*)(uint64_t, uint64_t, char, const void *, uint64_t))((char *)&dword_1002E1DF8
                                                                                + dword_1002E1DF8))( v2,  v3,  v4,  v6,  v5);
}

uint64_t sub_1000D5628()
{
  double v2 = v0[2];
  uint64_t v3 = (const void *)*((void *)v0 + 3);
  uint64_t v4 = *((void *)v0 + 4);
  uint64_t v5 = (void *)swift_task_alloc(dword_1002E1E1C);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10007ADC4;
  return ((uint64_t (*)(const void *, uint64_t, double))((char *)&dword_1002E1E18 + dword_1002E1E18))( v3,  v4,  v2);
}

uint64_t sub_1000D56A0()
{
  char v2 = *(_BYTE *)(v0 + 16);
  uint64_t v4 = *(void **)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v5 = (void *)swift_task_alloc(dword_1002E1E3C);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10007ADC4;
  return ((uint64_t (*)(char, void *, uint64_t))((char *)&dword_1002E1E38 + dword_1002E1E38))(v2, v4, v3);
}

uint64_t sub_1000D5718()
{
  char v2 = *(_BYTE *)(v0 + 16);
  uint64_t v4 = *(void **)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v5 = (void *)swift_task_alloc(dword_1002E1E5C);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10007ADC4;
  return ((uint64_t (*)(char, void *, uint64_t))((char *)&dword_1002E1E58 + dword_1002E1E58))(v2, v4, v3);
}

uint64_t sub_1000D5790()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000D57BC()
{
  char v2 = *(_BYTE *)(v0 + 16);
  uint64_t v4 = *(void **)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v5 = (void *)swift_task_alloc(dword_1002E1E7C);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10007ADC4;
  return ((uint64_t (*)(char, void *, uint64_t))((char *)&dword_1002E1E78 + dword_1002E1E78))(v2, v4, v3);
}

uint64_t sub_1000D5834()
{
  char v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_1002E1E9C);
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10007ADC4;
  return ((uint64_t (*)(const void *, uint64_t))((char *)&dword_1002E1E98 + dword_1002E1E98))(v2, v3);
}

uint64_t sub_1000D58A4()
{
  char v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_1002E1EBC);
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10007ADC4;
  return ((uint64_t (*)(const void *, uint64_t))((char *)&dword_1002E1EB8 + dword_1002E1EB8))(v2, v3);
}

uint64_t sub_1000D5914()
{
  char v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_1002E1EDC);
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10007ADC4;
  return ((uint64_t (*)(const void *, uint64_t))((char *)&dword_1002E1ED8 + dword_1002E1ED8))(v2, v3);
}

uint64_t sub_1000D5984()
{
  char v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_1002E1EFC);
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10007ADC4;
  return ((uint64_t (*)(const void *, uint64_t))((char *)&dword_1002E1EF8 + dword_1002E1EF8))(v2, v3);
}

uint64_t sub_1000D59F4()
{
  char v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_1002E1F1C);
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10007ADC4;
  return ((uint64_t (*)(const void *, uint64_t))((char *)&dword_1002E1F18 + dword_1002E1F18))(v2, v3);
}

uint64_t sub_1000D5A64()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_1002E1F3C);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10007ADC4;
  return ((uint64_t (*)(uint64_t, void *, uint64_t))((char *)&dword_1002E1F38 + dword_1002E1F38))(v2, v3, v4);
}

uint64_t sub_1000D5AD8()
{
  _Block_release(*(const void **)(v0 + 32));
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000D5B0C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  BOOL v6 = (void *)swift_task_alloc(dword_1002E1F5C);
  *(void *)(v1 + 16) = v6;
  *BOOL v6 = v1;
  v6[1] = sub_10007ADC4;
  return ((uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))((char *)&dword_1002E1F58 + dword_1002E1F58))( v2,  v3,  v5,  v4);
}

uint64_t sub_1000D5B90()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_1002E1F7C);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10007ADC4;
  return ((uint64_t (*)(uint64_t, void *, uint64_t))((char *)&dword_1002E1F78 + dword_1002E1F78))(v2, v3, v4);
}

uint64_t sub_1000D5C08()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_1002E1F9C);
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10007ADC4;
  return ((uint64_t (*)(const void *, uint64_t))((char *)&dword_1002E1F98 + dword_1002E1F98))(v2, v3);
}

uint64_t sub_1000D5C78()
{
  _Block_release(*(const void **)(v0 + 24));
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000D5CAC()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_1002E1FBC);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10007ADC4;
  return ((uint64_t (*)(void *, void *, uint64_t))((char *)&dword_1002E1FB8 + dword_1002E1FB8))(v2, v3, v4);
}

uint64_t sub_1000D5D24()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000D5D50()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_1002E1FDC);
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10007ADC4;
  return ((uint64_t (*)(const void *, uint64_t))((char *)&dword_1002E1FD8 + dword_1002E1FD8))(v2, v3);
}

uint64_t sub_1000D5DBC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000D5DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100072CC4(&qword_1002E1FF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D5E58()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_watchers);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_watchers, v3, 0LL, 0LL);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t sub_1000D5EA0(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_watchers);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_1000D5EF0(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000D5F34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_log;
  swift_beginAccess(v3, v6, 0LL, 0LL);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t sub_1000D5F98(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_log;
  swift_beginAccess(v3, v6, 33LL, 0LL);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
  return swift_endAccess(v6);
}

uint64_t (*sub_1000D6004(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t (*sub_1000D6048())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

id sub_1000D6060()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_queue);
}

id sub_1000D6070()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_workQueue);
}

uint64_t sub_1000D6080()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_intervalTimer);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_intervalTimer, v3, 0LL, 0LL);
  return swift_unknownObjectRetain(*v1);
}

uint64_t sub_1000D60C8(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_intervalTimer);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  return swift_unknownObjectRelease(v4);
}

uint64_t (*sub_1000D6118(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_1000D615C()
{
  return swift_unknownObjectRetain(*(void *)(v0 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_dep));
}

id KTWatchdog.__allocating_init(control:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = sub_1000D8A38(a1);
  swift_unknownObjectRelease(a1);
  return v4;
}

id KTWatchdog.init(control:)(uint64_t a1)
{
  id v2 = sub_1000D8A38(a1);
  swift_unknownObjectRelease(a1);
  return v2;
}

unint64_t sub_1000D61DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    id v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100072CC4(&qword_1002E20D8);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  id v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  BOOL v6 = (_OWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *((void *)v6 - 2);
    uint64_t v8 = *((void *)v6 - 1);
    __int128 v15 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_retain(*((void *)&v15 + 1));
    unint64_t result = sub_100079A58(v7, v8);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v11 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v11 = v7;
    v11[1] = v8;
    *(_OWORD *)(v4[7] + 16 * result) = v15;
    uint64_t v12 = v4[2];
    BOOL v13 = __OFADD__(v12, 1LL);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    void v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t KTWatchdog.description.getter()
{
  uint64_t v10 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x88LL))();
  uint64_t v1 = sub_100072CC4(&qword_1002E2008);
  uint64_t v2 = sub_1000A9AA4( (unint64_t *)&unk_1002E2010,  &qword_1002E2008,  (uint64_t)&protocol conformance descriptor for [A : B].Keys);
  unint64_t v3 = sub_10007F884();
  uint64_t v4 = Sequence<>.joined(separator:)(44LL, 0xE100000000000000LL, v1, v2, v3);
  BOOL v6 = v5;
  swift_bridgeObjectRelease(v10);
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  v8._countAndFlagsBits = 62LL;
  v8._object = (void *)0xE100000000000000LL;
  String.append(_:)(v8);
  return 0x446863746157544BLL;
}

id sub_1000D6580()
{
  uint64_t v63 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v53 = *(void *)(v63 - 8);
  uint64_t v1 = __chkstk_darwin(v63);
  uint64_t v51 = (void **)((char *)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v1);
  id v61 = (void **)((char *)&v51 - v3);
  uint64_t v54 = type metadata accessor for DispatchTime(0LL);
  uint64_t v52 = *(void *)(v54 - 8);
  uint64_t v4 = __chkstk_darwin(v54);
  os_log_type_t v56 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v62 = (char *)&v51 - v6;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v59 = *(uint64_t (**)(char *, uint64_t))(v7 - 8);
  uint64_t v60 = (void *)v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v57 = *(void *)(v10 - 8);
  uint64_t v58 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for OS_dispatch_source.TimerFlags(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  objc_super v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10007D178(0LL, &qword_1002E2020, &OBJC_CLASS___OS_dispatch_source_ptr);
  uint64_t v17 = *(void *)(v0 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_queue);
  aBlock[0] = _swiftEmptyArrayStorage;
  uint64_t v18 = sub_100073FE0( &qword_1002E2028,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags,  (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  uint64_t v19 = sub_100072CC4(&qword_1002E2030);
  uint64_t v20 = sub_1000A9AA4( (unint64_t *)&unk_1002E2038,  &qword_1002E2030,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v19, v20, v13, v18);
  uint64_t v21 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v16, v17);
  uint64_t v22 = v13;
  unint64_t v23 = v56;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v22);
  uint64_t ObjectType = swift_getObjectType(v21);
  uint64_t v25 = swift_allocObject(&unk_100280A88, 24LL, 7LL);
  uint64_t v26 = v55;
  *(void *)(v25 + 16) = v55;
  aBlock[4] = sub_1000D9184;
  uint64_t v65 = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000A2010;
  aBlock[3] = &unk_100280AA0;
  uint64_t v27 = _Block_copy(aBlock);
  uint64_t v28 = v26;
  static DispatchQoS.unspecified.getter(v28);
  sub_1000D6AC8();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v12, v9, v27, ObjectType);
  _Block_release(v27);
  (*((void (**)(char *, void *))v59 + 1))(v9, v60);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v12, v58);
  uint64_t v29 = swift_release(v65);
  static DispatchTime.now()(v29);
  uint64_t v30 = *(void **)((char *)v28 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_dep);
  id result = [v30 watchdogInterval];
  double v33 = v32 * 1000.0;
  if ((~*(void *)&v33 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v33 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if (v33 >= 9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v60 = v28;
  uint64_t v34 = v61;
  *id v61 = (uint64_t)v33;
  uint64_t v35 = enum case for DispatchTimeInterval.milliseconds(_:);
  uint64_t v36 = v53;
  BOOL v37 = *(void (**)(void *, uint64_t, uint64_t))(v53 + 104);
  uint64_t v38 = v63;
  v37(v34, enum case for DispatchTimeInterval.milliseconds(_:), v63);
  + infix(_:_:)(v23, v34);
  os_log_type_t v39 = *(void (**)(void *, uint64_t))(v36 + 8);
  v39(v34, v38);
  BOOL v40 = *(void (**)(char *, uint64_t))(v52 + 8);
  uint64_t v41 = v54;
  v40(v23, v54);
  id result = [v30 watchdogInterval];
  double v43 = v42 * 1000.0;
  if ((~*(void *)&v43 & 0x7FF0000000000000LL) == 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if (v43 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  if (v43 < 9.22337204e18)
  {
    id v44 = v61;
    *id v61 = (uint64_t)v43;
    uint64_t v45 = v63;
    v37(v44, v35, v63);
    uint64_t v59 = (uint64_t (*)(char *, uint64_t))v40;
    uint64_t v46 = ObjectType;
    uint64_t v47 = v51;
    *uint64_t v51 = 100LL;
    v37(v47, v35, v45);
    uint64_t v48 = v62;
    OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v62, v44, v47, v46);
    v39(v47, v45);
    v39(v44, v45);
    OS_dispatch_source.resume()();
    os_log_type_t v49 = *(void (**)(uint64_t))((swift_isaMask & *v60) + 0xC0LL);
    uint64_t v50 = swift_unknownObjectRetain(v21);
    v49(v50);
    swift_unknownObjectRelease(v21);
    return (id)v59(v48, v41);
  }

uint64_t sub_1000D6AC8()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v1 = sub_100073FE0( &qword_1002E1060,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v2 = sub_100072CC4(&qword_1002E1068);
  uint64_t v3 = sub_1000A9AA4( (unint64_t *)&unk_1002E1070,  &qword_1002E1068,  (uint64_t)&protocol conformance descriptor for [A]);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

Swift::Void __swiftcall KTWatchdog.resume()()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xB8LL))();
  swift_unknownObjectRelease(v1);
  if (!v1) {
    (*(void (**)(void))((swift_isaMask & *v0) + 0xD8LL))();
  }
}

uint64_t KTWatchdog.add(named:watcher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v25 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v24[1] = *(void *)&v4[OBJC_IVAR____TtC13transparencyd10KTWatchdog_workQueue];
  objc_super v16 = (void *)swift_allocObject(&unk_100280AD8, 56LL, 7LL);
  void v16[2] = v4;
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = a3;
  v16[6] = a4;
  aBlock[4] = sub_1000D9208;
  uint64_t v28 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000A2010;
  aBlock[3] = &unk_100280AF0;
  uint64_t v17 = _Block_copy(aBlock);
  uint64_t v18 = v4;
  swift_bridgeObjectRetain(a2);
  uint64_t v19 = swift_retain(a4);
  static DispatchQoS.unspecified.getter(v19);
  uint64_t v26 = _swiftEmptyArrayStorage;
  uint64_t v20 = sub_100073FE0( &qword_1002E1060,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v21 = sub_100072CC4(&qword_1002E1068);
  uint64_t v22 = sub_1000A9AA4( (unint64_t *)&unk_1002E1070,  &qword_1002E1068,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v21, v22, v9, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v15, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release(v28);
}

uint64_t sub_1000D6F10()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = *(void **)((char *)v0 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_workQueue);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x88LL))(result);
    uint64_t v9 = v0;
    sub_1000D92F8((uint64_t)_swiftEmptyArrayStorage, v8, v9);
    uint64_t v11 = v10;
    swift_bridgeObjectRelease(v8);

    return v11;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000D7020(void *a1, uint64_t *a2, void *a3)
{
  void *(*v12)(uint64_t *__return_ptr, __n128);
  uint64_t v13;
  __n128 v14;
  void *v15;
  uint64_t result;
  uint64_t v17;
  os_log_s *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint8_t *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *a2;
  unint64_t v10 = a2[1];
  uint64_t v12 = (void *(*)(uint64_t *__return_ptr, __n128))a2[2];
  uint64_t v13 = a2[3];
  swift_retain_n(v13, 2LL);
  uint64_t v14 = swift_bridgeObjectRetain(v10);
  uint64_t v15 = v12(&v34, v14);
  if ((v34 & 1) != 0)
  {
    swift_release_n(v13, 2LL);
    return swift_bridgeObjectRelease(v10);
  }

  else
  {
    double v32 = v11;
    (*(void (**)(void *))((swift_isaMask & *a3) + 0xA0LL))(v15);
    uint64_t v17 = swift_bridgeObjectRetain_n(v10, 2LL);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    uint64_t v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      uint64_t v31 = a1;
      uint64_t v22 = v21;
      uint64_t v34 = v21;
      *(_DWORD *)uint64_t v20 = 136315138;
      uint64_t v30 = v20 + 4;
      swift_bridgeObjectRetain(v10);
      double v33 = sub_10007C22C(v32, v10, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v30, v20 + 12);
      swift_bridgeObjectRelease_n(v10, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "watcher %s failed", v20, 0xCu);
      swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
      unint64_t v23 = v22;
      a1 = v31;
      swift_slowDealloc(v23, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v10, 2LL);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    swift_release_n(v13, 2LL);
    uint64_t v24 = (void *)*a1;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(*a1);
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_10008CB7C(0LL, v24[2] + 1LL, 1, v24);
      uint64_t v24 = (void *)result;
    }

    uint64_t v25 = v32;
    uint64_t v27 = v24[2];
    uint64_t v26 = v24[3];
    if (v27 >= v26 >> 1)
    {
      uint64_t result = (uint64_t)sub_10008CB7C((void *)(v26 > 1), v27 + 1, 1, v24);
      uint64_t v24 = (void *)result;
    }

    void v24[2] = v27 + 1;
    uint64_t v28 = &v24[2 * v27];
    v28[4] = v25;
    v28[5] = v10;
    *a1 = v24;
  }

  return result;
}

Swift::Void __swiftcall KTWatchdog.shutdown(reason:)(Swift::String reason)
{
  uint64_t v2 = v1;
  Swift::String v43 = reason;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v49 = *(void *)(v3 - 8);
  uint64_t v50 = v3;
  __chkstk_darwin(v3);
  uint64_t v48 = (char *)v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v46 = *(void *)(v5 - 8);
  uint64_t v47 = v5;
  __chkstk_darwin(v5);
  uint64_t v45 = (char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (void *)((char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v44 = type metadata accessor for DispatchTime(0LL);
  uint64_t v11 = *(void *)(v44 - 8);
  uint64_t v12 = __chkstk_darwin(v44);
  uint64_t v14 = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)v42 - v16;
  uint64_t v18 = *(uint64_t (**)(void))((swift_isaMask & *(void *)v1) + 0xB8LL);
  uint64_t v19 = ((uint64_t (*)(uint64_t))v18)(v15);
  if (!v19
    || (uint64_t v20 = v19,
        uint64_t ObjectType = swift_getObjectType(v19),
        char v22 = OS_dispatch_source.isCancelled.getter(ObjectType),
        swift_unknownObjectRelease(v20),
        (v22 & 1) == 0))
  {
    uint64_t v23 = v18();
    if (v23)
    {
      uint64_t v24 = v23;
      swift_getObjectType(v23);
      OS_dispatch_source.cancel()();
      swift_unknownObjectRelease(v24);
    }

    uint64_t v25 = *(void **)&v2[OBJC_IVAR____TtC13transparencyd10KTWatchdog_dep];
    static DispatchTime.now()([v25 watchdogNiceExit]);
    [v25 watchdogNiceWaitTime];
    double v27 = v26 * 1000.0;
    if ((~*(void *)&v27 & 0x7FF0000000000000LL) != 0)
    {
      if (v27 > -9.22337204e18)
      {
        if (v27 < 9.22337204e18)
        {
          *unint64_t v10 = (uint64_t)v27;
          (*(void (**)(void *, void, uint64_t))(v8 + 104))( v10,  enum case for DispatchTimeInterval.milliseconds(_:),  v7);
          + infix(_:_:)(v14, v10);
          (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
          uint64_t v28 = *(void (**)(char *, uint64_t))(v11 + 8);
          uint64_t v29 = v44;
          v28(v14, v44);
          v42[1] = *(void *)&v2[OBJC_IVAR____TtC13transparencyd10KTWatchdog_queue];
          uint64_t v30 = (void *)swift_allocObject(&unk_100280B28, 40LL, 7LL);
          uint64_t countAndFlagsBits = v43._countAndFlagsBits;
          object = v43._object;
          v30[2] = v2;
          v30[3] = countAndFlagsBits;
          v30[4] = object;
          aBlock[4] = sub_1000D9510;
          uint64_t v53 = v30;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256LL;
          aBlock[2] = sub_1000A2010;
          aBlock[3] = &unk_100280B40;
          double v33 = _Block_copy(aBlock);
          uint64_t v34 = v2;
          swift_bridgeObjectRetain(object);
          uint64_t v35 = v45;
          static DispatchQoS.unspecified.getter(v36);
          uint64_t v51 = _swiftEmptyArrayStorage;
          uint64_t v37 = sub_100073FE0( &qword_1002E1060,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          uint64_t v38 = sub_100072CC4(&qword_1002E1068);
          uint64_t v39 = sub_1000A9AA4( (unint64_t *)&unk_1002E1070,  &qword_1002E1068,  (uint64_t)&protocol conformance descriptor for [A]);
          BOOL v40 = v48;
          uint64_t v41 = v50;
          dispatch thunk of SetAlgebra.init<A>(_:)(&v51, v38, v39, v50, v37);
          OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v17, v35, v40, v33);
          _Block_release(v33);
          (*(void (**)(char *, uint64_t))(v49 + 8))(v40, v41);
          (*(void (**)(char *, uint64_t))(v46 + 8))(v35, v47);
          v28(v17, v29);
          swift_release(v53);
          return;
        }

void sub_1000D780C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v37 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v35 = *(void *)(v5 - 8);
  uint64_t v36 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v38 = *(void *)(v8 - 8);
  uint64_t v39 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v35 - v12;
  uint64_t v14 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = *(void **)((char *)v1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_queue);
  void *v17 = v18;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  id v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v17);
  (*(void (**)(void *, uint64_t))(v15 + 8))(v17, v14);
  if ((v18 & 1) != 0)
  {
    uint64_t v20 = *(void **)((char *)v1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_dep);
    if (([v20 watchdogDisableDebuggerCheck] & 1) != 0
      || (_s13transparencyd10KTWatchdogC12isInDebuggerSbyFZ_0() & 1) == 0)
    {
      if ((*((_BYTE *)v1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_pending) & 1) != 0)
      {
        uint64_t v30 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0xA0LL))();
        uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
        os_log_type_t v32 = static os_log_type_t.error.getter(v31);
        if (os_log_type_enabled(v31, v32))
        {
          double v33 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)double v33 = 0;
          _os_log_impl((void *)&_mh_execute_header, v31, v32, "watch is still pending, shuting down", v33, 2u);
          swift_slowDealloc(v33, -1LL, -1LL);
        }

        (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v39);
        if ([v20 watchDogFastRudeExit])
        {
          NSString v34 = String._bridgeToObjectiveC()();
          [v20 watchdogRudeExitWithReason:v34];
        }

        else
        {
          (*(void (**)(uint64_t, unint64_t))((swift_isaMask & *v1) + 0xF8LL))( 0x676E69646E6570LL,  0xE700000000000000LL);
        }
      }

      else
      {
        *((_BYTE *)v1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_pending) = 1;
        uint64_t v25 = swift_allocObject(&unk_100280B78, 24LL, 7LL);
        *(void *)(v25 + 16) = v1;
        aBlock[4] = sub_1000D9564;
        uint64_t v42 = v25;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256LL;
        aBlock[2] = sub_1000A2010;
        aBlock[3] = &unk_100280B90;
        double v26 = _Block_copy(aBlock);
        static DispatchQoS.unspecified.getter(v1);
        BOOL v40 = _swiftEmptyArrayStorage;
        uint64_t v27 = sub_100073FE0( &qword_1002E1060,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v28 = sub_100072CC4(&qword_1002E1068);
        uint64_t v29 = sub_1000A9AA4( (unint64_t *)&unk_1002E1070,  &qword_1002E1068,  (uint64_t)&protocol conformance descriptor for [A]);
        dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v28, v29, v2, v27);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v7, v4, v26);
        _Block_release(v26);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v4, v2);
        (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v36);
        swift_release(v42);
      }
    }

    else
    {
      uint64_t v21 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0xA0LL))();
      char v22 = (os_log_s *)Logger.logObject.getter(v21);
      os_log_type_t v23 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "skipping watchdog since we are in debugger", v24, 2u);
        swift_slowDealloc(v24, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v38 + 8))(v13, v39);
    }
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1000D7CE4(void *a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xF0LL))(v8);
  *((_BYTE *)a1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_pending) = 0;
  uint64_t v18 = *(void *)((char *)a1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_queue);
  uint64_t v12 = swift_allocObject(&unk_100280BF0, 32LL, 7LL);
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = a1;
  aBlock[4] = sub_1000D96EC;
  uint64_t v21 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000A2010;
  aBlock[3] = &unk_100280C08;
  uint64_t v13 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(a1);
  id v19 = _swiftEmptyArrayStorage;
  uint64_t v14 = sub_100073FE0( &qword_1002E1060,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v15 = sub_100072CC4(&qword_1002E1068);
  uint64_t v16 = sub_1000A9AA4( (unint64_t *)&unk_1002E1070,  &qword_1002E1068,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v15, v16, v2, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v5, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return swift_release(v21);
}

uint64_t sub_1000D7F00(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(void *)(a1 + 16))
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a2) + 0xA0LL))(result);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "watchdog failed, shuting down", v12, 2u);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    uint64_t v16 = 0x3A72656863746177LL;
    unint64_t v17 = 0xE900000000000020LL;
    v13._uint64_t countAndFlagsBits = Array.description.getter(a1, &type metadata for String);
    object = v13._object;
    String.append(_:)(v13);
    swift_bridgeObjectRelease(object);
    unint64_t v15 = v17;
    (*(void (**)(uint64_t, unint64_t))((swift_isaMask & *a2) + 0xF8LL))(v16, v17);
    return swift_bridgeObjectRelease(v15);
  }

  return result;
}

uint64_t sub_1000D80C8()
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xB8LL))();
  if (result)
  {
    uint64_t v2 = result;
    swift_getObjectType(result);
    OS_dispatch_source.cancel()();
    return swift_unknownObjectRelease(v2);
  }

  return result;
}

void KTWatchdog.init()()
{
}

id KTWatchdog.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KTWatchdog(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

void *sub_1000D82DC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100072CC4((uint64_t *)&unk_1002E20E0);
      os_log_type_t v11 = (void *)swift_allocObject(v10, 4 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 29;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 2);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      os_log_type_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1000D8DD8(0LL, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_1000D83E8(void *a1)
{
  return sub_1000D82DC(0LL, a1[2], 0, a1);
}

Swift::Int sub_1000D83FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100072CC4(&qword_1002E20D8);
  char v7 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v9 = v8;
  if (*(void *)(v5 + 16))
  {
    uint64_t v36 = v3;
    uint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v38 = (void *)(v5 + 64);
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v37 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = v8 + 64;
    Swift::Int result = swift_retain(v5);
    int64_t v15 = 0LL;
    while (1)
    {
      if (v12)
      {
        unint64_t v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v23 = v22 | (v15 << 6);
      }

      else
      {
        int64_t v24 = v15 + 1;
        if (__OFADD__(v15, 1LL))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }

        if (v24 >= v37) {
          goto LABEL_36;
        }
        unint64_t v25 = v38[v24];
        ++v15;
        if (!v25)
        {
          int64_t v15 = v24 + 1;
          if (v24 + 1 >= v37) {
            goto LABEL_36;
          }
          unint64_t v25 = v38[v15];
          if (!v25)
          {
            int64_t v26 = v24 + 2;
            if (v26 >= v37)
            {
LABEL_36:
              swift_release(v5);
              uint64_t v3 = v36;
              if ((v7 & 1) != 0)
              {
                uint64_t v35 = 1LL << *(_BYTE *)(v5 + 32);
                if (v35 >= 64) {
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v38 = -1LL << v35;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            unint64_t v25 = v38[v26];
            if (!v25)
            {
              while (1)
              {
                int64_t v15 = v26 + 1;
                if (__OFADD__(v26, 1LL)) {
                  goto LABEL_43;
                }
                if (v15 >= v37) {
                  goto LABEL_36;
                }
                unint64_t v25 = v38[v15];
                ++v26;
                if (v25) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v15 = v26;
          }
        }

void sub_1000D8704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_100079A58(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1000D8878();
LABEL_7:
    uint64_t v20 = (void *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = (void *)(v20[7] + 16 * v14);
      swift_release(v21[1]);
      *uint64_t v21 = a1;
      v21[1] = a2;
      return;
    }

void *sub_1000D8878()
{
  uint64_t v1 = v0;
  sub_100072CC4(&qword_1002E20D8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    Swift::Int result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  Swift::Int result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }

id sub_1000D8A38(uint64_t a1)
{
  uint64_t v36 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v3 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v35 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v37 = &v1[OBJC_IVAR____TtC13transparencyd10KTWatchdog_intervalTimer];
  *(void *)&v1[OBJC_IVAR____TtC13transparencyd10KTWatchdog_intervalTimer] = 0LL;
  *(void *)&v1[OBJC_IVAR____TtC13transparencyd10KTWatchdog_dep] = a1;
  unint64_t v15 = v1;
  uint64_t v34 = v15;
  swift_unknownObjectRetain(a1);
  *(void *)&v15[OBJC_IVAR____TtC13transparencyd10KTWatchdog_watchers] = sub_1000D61DC((uint64_t)_swiftEmptyArrayStorage);
  Logger.init(transparencyCategory:)(0x676F646863746177LL, 0xE800000000000000LL);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))( &v15[OBJC_IVAR____TtC13transparencyd10KTWatchdog_log],  v14,  v11);
  v15[OBJC_IVAR____TtC13transparencyd10KTWatchdog_pending] = 0;
  uint64_t v16 = sub_10007D178(0LL, (unint64_t *)&qword_1002DF8F8, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v17 = v10;
  static DispatchQoS.unspecified.getter(v16);
  v39[0] = _swiftEmptyArrayStorage;
  uint64_t v18 = sub_100073FE0( (unint64_t *)&unk_1002E20F0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v32 = v18;
  uint64_t v19 = sub_100072CC4(&qword_1002DF900);
  uint64_t v31 = v19;
  uint64_t v33 = sub_1000A9AA4( (unint64_t *)&qword_1002E2100,  &qword_1002DF900,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v20 = v7;
  dispatch thunk of SetAlgebra.init<A>(_:)(v39, v19, v33, v5, v18);
  uint64_t v21 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  unint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  int64_t v23 = v35;
  uint64_t v24 = v36;
  v22(v35, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v36);
  uint64_t v25 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0x676F446863746157LL,  0xED00006575657551LL,  v17,  v20,  v23,  0LL);
  uint64_t v26 = v34;
  *(void *)&v34[OBJC_IVAR____TtC13transparencyd10KTWatchdog_queue] = v25;
  static DispatchQoS.unspecified.getter(v25);
  v39[0] = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(v39, v31, v33, v5, v32);
  v22(v23, v21, v24);
  *(void *)&v26[OBJC_IVAR____TtC13transparencyd10KTWatchdog_workQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000011LL,  0x8000000100211190LL,  v17,  v20,  v23,  0LL);
  BOOL v27 = v37;
  swift_beginAccess(v37, v39, 1LL, 0LL);
  uint64_t v28 = *(void *)v27;
  *(void *)BOOL v27 = 0LL;

  swift_unknownObjectRelease(v28);
  BOOL v29 = (objc_class *)type metadata accessor for KTWatchdog(0LL);
  v38.receiver = v26;
  v38.super_class = v29;
  return objc_msgSendSuper2(&v38, "init");
}

char *sub_1000D8DD8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      Swift::Int result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    uint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }

  Swift::Int result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t _s13transparencyd10KTWatchdogC12isInDebuggerSbyFZ_0()
{
  uint64_t v10 = 0LL;
  int v11 = 0;
  uint64_t v18 = 0LL;
  int v19 = 0;
  uint64_t v20 = 0LL;
  int v21 = 0;
  uint64_t v25 = 0LL;
  uint64_t v38 = 0LL;
  __int16 v39 = 0;
  int v44 = 0;
  uint64_t v51 = 0LL;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  int v14 = 0;
  int v17 = 0;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  uint64_t v23 = 0LL;
  int v24 = 0;
  __int128 v22 = 0u;
  __int128 v27 = 0u;
  memset(v28, 0, sizeof(v28));
  __int128 v29 = 0u;
  int v26 = 0;
  int v30 = 0;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  memset(v37, 0, sizeof(v37));
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v45 = 0u;
  int v47 = 0;
  uint64_t v46 = 0LL;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  __int16 v50 = 0;
  __int128 v52 = 0u;
  __int16 v54 = 0;
  uint64_t v53 = 0LL;
  __int128 v55 = 0u;
  __int128 v56 = 0u;
  size_t v8 = 648LL;
  id v0 = [(id)objc_opt_self(NSProcessInfo) processInfo];
  unsigned int v1 = [v0 processIdentifier];

  size_t v7 = 12LL;
  uint64_t v2 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(12LL, &type metadata for Int32);
  v2[2] = 12LL;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *(_OWORD *)size_t v6 = xmmword_1002498D0;
  sysctlnametomib(v6, (int *)v2 + 8, &v7);
  size_t v3 = v7;
  int64_t v4 = v7 + 1;
  if (__OFADD__(v7, 1LL))
  {
    __break(1u);
  }

  else
  {
    if (v4 >= 12)
    {
      swift_bridgeObjectRelease(v2);
      return 0LL;
    }

    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) != 0)
    {
      if ((v3 & 0x8000000000000000LL) == 0) {
        goto LABEL_5;
      }
LABEL_12:
      __break(1u);
LABEL_13:
      __break(1u);
    }
  }

  uint64_t v2 = sub_1000D83E8(v2);
  if ((v3 & 0x8000000000000000LL) != 0) {
    goto LABEL_12;
  }
LABEL_5:
  if (v3 >= v2[2]) {
    goto LABEL_13;
  }
  *((_DWORD *)v2 + v3 + 8) = v1;
  size_t v7 = v4;
  if (v4 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    __break(1u);
  }

  else
  {
    sysctl((int *)v2 + 8, v4, v9, &v8, 0LL, 0LL);
    swift_bridgeObjectRelease(v2);
    return (v9[33] >> 3) & 1;
  }

  return result;
}

uint64_t sub_1000D9160()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000D9184()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0x100LL))();
}

uint64_t sub_1000D91BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000D91CC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000D91D4()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1000D9208()
{
  unsigned int v1 = (void *)v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[6];
  uint64_t v6 = swift_allocObject(&unk_100280C40, 32LL, 7LL);
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v5;
  size_t v7 = *(uint64_t (**)(_BYTE *))((swift_isaMask & *v1) + 0x98LL);
  swift_bridgeObjectRetain(v3);
  swift_retain(v5);
  size_t v8 = (uint64_t (*)(_BYTE *, void))v7(v15);
  uint64_t v10 = v9;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
  uint64_t v14 = *v10;
  *uint64_t v10 = 0x8000000000000000LL;
  sub_1000D8704((uint64_t)sub_1000D9718, v6, v2, v3, isUniquelyReferenced_nonNull_native);
  uint64_t v12 = *v10;
  *uint64_t v10 = v14;
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v3);
  return v8(v15, 0LL);
}

void sub_1000D92F8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v25 = a1;
  uint64_t v6 = a2 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a2 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  int64_t v11 = 0LL;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    uint64_t v17 = 16 * i;
    uint64_t v18 = *(void *)(a2 + 56);
    int v19 = (uint64_t *)(*(void *)(a2 + 48) + v17);
    uint64_t v20 = v19[1];
    v23[0] = *v19;
    v23[1] = v20;
    __int128 v24 = *(_OWORD *)(v18 + v17);
    uint64_t v22 = *((void *)&v24 + 1);
    swift_bridgeObjectRetain(v20);
    swift_retain(v22);
    sub_1000D7020(&v25, v23, a3);
    if (v3)
    {
      uint64_t v21 = v25;
      swift_release(a2);
      swift_release(v22);
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease(v21);
      return;
    }

    swift_release(v22);
    swift_bridgeObjectRelease(v20);
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v14 >= v10) {
      goto LABEL_25;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v10) {
        goto LABEL_25;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v10) {
          goto LABEL_25;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v11);
        if (!v15)
        {
          int64_t v11 = v14 + 3;
          if (v14 + 3 >= v10) {
            goto LABEL_25;
          }
          unint64_t v15 = *(void *)(v6 + 8 * v11);
          if (!v15) {
            break;
          }
        }
      }
    }

uint64_t sub_1000D94E4()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1000D9510()
{
  unsigned int v1 = *(void **)(*(void *)(v0 + 16) + OBJC_IVAR____TtC13transparencyd10KTWatchdog_dep);
  id v2 = String._bridgeToObjectiveC()();
  [v1 watchdogRudeExitWithReason:v2];
}

uint64_t sub_1000D9564()
{
  return sub_1000D7CE4(*(void **)(v0 + 16));
}

uint64_t type metadata accessor for KTWatchdog(uint64_t a1)
{
  uint64_t result = qword_1002EC3E0;
  if (!qword_1002EC3E0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KTWatchdog);
  }
  return result;
}

uint64_t sub_1000D95A8()
{
  return type metadata accessor for KTWatchdog(0LL);
}

uint64_t sub_1000D95B0(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = &unk_100249900;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    void v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[5] = &unk_100249918;
    v4[6] = &unk_100249930;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 7LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

char *sub_1000D9658()
{
  if (&swift_runtimeSupportsNoncopyableTypes) {
    return (char *)sub_100072CC4(&qword_1002E2048);
  }
  else {
    return (char *)&type metadata for () + 8;
  }
}

uint64_t sub_1000D9680()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000D96A4()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t sub_1000D96C0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000D96EC()
{
  return sub_1000D7F00(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000D96F4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000D9718@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result & 1;
  return result;
}

uint64_t *sub_1000D9768()
{
  return &qword_1002E2170;
}

uint64_t sub_1000D9774()
{
  uint64_t v0 = qword_1002E2170;
  swift_bridgeObjectRetain(off_1002E2178);
  return v0;
}

uint64_t sub_1000D9828(uint64_t a1, char *a2)
{
  uint64_t v4 = off_1002E2178;
  qword_1002E2170 = a1;
  off_1002E2178 = a2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_1000D98E0(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

id sub_1000D9920()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd31KTFixupRemoveMacAppSupportFiles_deps);
}

id sub_1000D9938(uint64_t a1)
{
  unint64_t v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR____TtC13transparencyd31KTFixupRemoveMacAppSupportFiles_deps] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, "init");
}

id sub_1000D9984(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR____TtC13transparencyd31KTFixupRemoveMacAppSupportFiles_deps] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for KTFixupRemoveMacAppSupportFiles();
  return objc_msgSendSuper2(&v3, "init");
}

uint64_t type metadata accessor for KTFixupRemoveMacAppSupportFiles()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd31KTFixupRemoveMacAppSupportFiles);
}

void sub_1000D9A34()
{
}

id sub_1000D9A8C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KTFixupRemoveMacAppSupportFiles();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t Logger.init(transparencyCategory:)(uint64_t a1, uint64_t a2)
{
  return Logger.init(subsystem:category:)(0xD000000000000016LL, 0x8000000100211320LL, a1, a2);
}

const char *TransparencyFeatureFlags.domain.getter()
{
  return "Transparency";
}

const char *TransparencyFeatureFlags.feature.getter(char a1)
{
  if (!a1) {
    return "KTDisableKVSSyncedData";
  }
  if (a1 == 1) {
    return "KTUseKVSOptInRecords";
  }
  return "KTEligibilityServerReporting";
}

BOOL static TransparencyFeatureFlags.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void TransparencyFeatureFlags.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int TransparencyFeatureFlags.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

const char *sub_1000D9BC4()
{
  uint64_t v1 = "KTUseKVSOptInRecords";
  if (*v0 != 1) {
    uint64_t v1 = "KTEligibilityServerReporting";
  }
  if (*v0) {
    return v1;
  }
  else {
    return "KTDisableKVSSyncedData";
  }
}

uint64_t sub_1000D9C0C(uint64_t a1)
{
  return sub_1000DB08C(a1);
}

uint64_t sub_1000D9C24@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000DB08C(*a1);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1000D9C54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for KTError(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = a1 - 1;
  uint64_t v9 = 5LL;
  switch(v8)
  {
    case 0LL:
      goto LABEL_17;
    case 2LL:
      uint64_t v10 = sub_100072CC4(&qword_1002E21C0);
      int64_t v11 = (char *)v7 + *(int *)(v10 + 48);
      unint64_t v12 = (char *)v7 + *(int *)(v10 + 64);
      *uint64_t v7 = 0LL;
      v7[1] = 0xE000000000000000LL;
      uint64_t v13 = type metadata accessor for Date(0LL);
      int64_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL);
      uint64_t v9 = 1LL;
      v14(v11, 1LL, 1LL, v13);
      v14(v12, 1LL, 1LL, v13);
      goto LABEL_17;
    case 3LL:
      uint64_t v9 = 6LL;
      goto LABEL_17;
    case 4LL:
      uint64_t v9 = 7LL;
      goto LABEL_17;
    case 5LL:
      uint64_t v9 = 8LL;
      goto LABEL_17;
    case 6LL:
      *uint64_t v7 = _swiftEmptyArrayStorage;
      uint64_t v9 = 2LL;
      goto LABEL_17;
    case 7LL:
      uint64_t v9 = 9LL;
      goto LABEL_17;
    case 8LL:
      uint64_t v9 = 10LL;
      goto LABEL_17;
    case 9LL:
      uint64_t v9 = 11LL;
      goto LABEL_17;
    case 10LL:
      uint64_t v9 = 12LL;
      goto LABEL_17;
    case 11LL:
      uint64_t v9 = 13LL;
      goto LABEL_17;
    case 12LL:
      uint64_t v9 = 14LL;
      goto LABEL_17;
    case 13LL:
      uint64_t v9 = 15LL;
      goto LABEL_17;
    case 14LL:
      *uint64_t v7 = 0LL;
      v7[1] = 0xE000000000000000LL;
      uint64_t v9 = 3LL;
      goto LABEL_17;
    case 15LL:
      *uint64_t v7 = 0LL;
      v7[1] = 0xE000000000000000LL;
      uint64_t v9 = 4LL;
LABEL_17:
      swift_storeEnumTagMultiPayload(v7, v4, v9);
      sub_1000DB0DC((uint64_t)v7, a2);
      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(a2, 0LL, 1LL, v4);
      break;
    default:
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1LL, 1LL, v4);
      break;
  }

  return result;
}

void sub_1000D9E48()
{
  uint64_t v1 = type metadata accessor for KTError(0LL);
  __chkstk_darwin(v1);
  objc_super v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000DB120(v0, (uint64_t)v3);
  uint64_t v4 = (char *)sub_1000D9ECC + 4 * byte_1002499A0[swift_getEnumCaseMultiPayload(v3, v1)];
  __asm { BR              X10 }

uint64_t sub_1000D9ECC()
{
  return 2LL;
}

uint64_t *sub_1000D9FB4()
{
  return &qword_1002E21B0;
}

uint64_t sub_1000D9FC0()
{
  uint64_t v0 = qword_1002E21B0;
  swift_bridgeObjectRetain(off_1002E21B8);
  return v0;
}

uint64_t sub_1000DA010(uint64_t a1, void *a2)
{
  uint64_t v4 = off_1002E21B8;
  qword_1002E21B0 = a1;
  off_1002E21B8 = a2;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_1000DA068(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

unint64_t sub_1000DA0A8()
{
  uint64_t v1 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = &v51[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = &v51[-v6];
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = &v51[-v9];
  __chkstk_darwin(v8);
  unint64_t v12 = &v51[-v11];
  uint64_t v13 = type metadata accessor for KTError(0LL);
  __chkstk_darwin(v13);
  unint64_t v15 = (uint64_t *)&v51[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_1000DB120(v0, (uint64_t)v15);
  switch(swift_getEnumCaseMultiPayload(v15, v13))
  {
    case 1u:
      uint64_t v16 = *v15;
      uint64_t v17 = v15[1];
      uint64_t v18 = sub_100072CC4(&qword_1002E21C0);
      uint64_t v19 = (uint64_t)v15 + *(int *)(v18 + 64);
      sub_100086884((uint64_t)v15 + *(int *)(v18 + 48), (uint64_t)v12);
      sub_100086884(v19, (uint64_t)v10);
      unint64_t v20 = sub_1000AFFF4((uint64_t)_swiftEmptyArrayStorage);
      __int128 v55 = &type metadata for String;
      *(void *)&__int128 v54 = v16;
      *((void *)&v54 + 1) = v17;
      sub_10007ADB4(&v54, v53);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v20);
      unint64_t v52 = v20;
      sub_1000DAD10(v53, 6910581LL, 0xE300000000000000LL, isUniquelyReferenced_nonNull_native);
      unint64_t v56 = v52;
      swift_bridgeObjectRelease(0x8000000000000000LL);
      sub_100085CA8((uint64_t)v12, (uint64_t)v7, (uint64_t *)&unk_1002DF740);
      uint64_t v22 = type metadata accessor for Date(0LL);
      uint64_t v23 = *(void *)(v22 - 8);
      __int128 v24 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v23 + 48);
      if (v24(v7, 1LL, v22) == 1)
      {
        sub_100077CFC((uint64_t)v7, (uint64_t *)&unk_1002DF740);
        sub_1000DA750(0x73656D6954746D73LL, 0xEC000000706D6174LL, &v54);
        sub_100077CFC((uint64_t)&v54, &qword_1002DF918);
      }

      else
      {
        __int128 v55 = (void *)v22;
        int v44 = sub_100084C28(&v54);
        (*(void (**)(void *, _BYTE *, uint64_t))(v23 + 32))(v44, v7, v22);
        sub_10007ADB4(&v54, v53);
        unint64_t v45 = v56;
        char v46 = swift_isUniquelyReferenced_nonNull_native(v56);
        unint64_t v52 = v45;
        sub_1000DAD10(v53, 0x73656D6954746D73LL, 0xEC000000706D6174LL, v46);
        unint64_t v56 = v52;
        swift_bridgeObjectRelease(0x8000000000000000LL);
      }

      sub_100085CA8((uint64_t)v10, (uint64_t)v4, (uint64_t *)&unk_1002DF740);
      if (v24(v4, 1LL, v22) == 1)
      {
        sub_100077CFC((uint64_t)v4, (uint64_t *)&unk_1002DF740);
        sub_1000DA750(0x63655264756F6C63LL, 0xEB0000000064726FLL, &v54);
        sub_100077CFC((uint64_t)&v54, &qword_1002DF918);
        unint64_t v25 = v56;
      }

      else
      {
        __int128 v55 = (void *)v22;
        int v47 = sub_100084C28(&v54);
        (*(void (**)(void *, _BYTE *, uint64_t))(v23 + 32))(v47, v4, v22);
        sub_10007ADB4(&v54, v53);
        unint64_t v48 = v56;
        char v49 = swift_isUniquelyReferenced_nonNull_native(v56);
        unint64_t v52 = v48;
        sub_1000DAD10(v53, 0x63655264756F6C63LL, 0xEB0000000064726FLL, v49);
        unint64_t v25 = v52;
        swift_bridgeObjectRelease(0x8000000000000000LL);
      }

      sub_100077CFC((uint64_t)v10, (uint64_t *)&unk_1002DF740);
      sub_100077CFC((uint64_t)v12, (uint64_t *)&unk_1002DF740);
      return v25;
    case 2u:
      uint64_t v26 = *v15;
      __int128 v27 = _swiftEmptyArrayStorage;
      *(void *)&__int128 v54 = _swiftEmptyArrayStorage;
      uint64_t v28 = *(void *)(v26 + 16);
      if (v28)
      {
        swift_bridgeObjectRetain(v26);
        for (uint64_t i = 0LL; i != v28; ++i)
        {
          uint64_t v30 = *(void *)(v26 + 8 * i + 32);
          swift_errorRetain(v30);
          uint64_t v31 = _convertErrorToNSError(_:)(v30);
          uint64_t v32 = swift_errorRelease(v30);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v32);
          unint64_t v34 = *(void *)((v54 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          unint64_t v33 = *(void *)((v54 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v34 >= v33 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1LL);
          }
          uint64_t v35 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v34, v31);
          specialized Array._endMutation()(v35);
        }

        swift_bridgeObjectRelease(v26);
        __int128 v27 = (void *)v54;
      }

      swift_bridgeObjectRelease(v26);
      uint64_t v41 = sub_100072CC4(&qword_1002E11D8);
      uint64_t inited = swift_initStackObject(v41, v51);
      *(_OWORD *)(inited + 16) = xmmword_1002464F0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSMultipleUnderlyingErrorsKey);
      *(void *)(inited + 40) = v43;
      *(void *)(inited + 72) = sub_100072CC4(&qword_1002E21C8);
      *(void *)(inited + 48) = v27;
      uint64_t v40 = inited;
      goto LABEL_15;
    case 3u:
      uint64_t v36 = *v15;
      uint64_t v37 = v15[1];
      uint64_t v38 = sub_100072CC4(&qword_1002E11D8);
      __int16 v39 = &v57;
      goto LABEL_13;
    case 4u:
      uint64_t v36 = *v15;
      uint64_t v37 = v15[1];
      uint64_t v38 = sub_100072CC4(&qword_1002E11D8);
      __int16 v39 = (uint64_t *)&v58;
LABEL_13:
      uint64_t v40 = swift_initStackObject(v38, v39);
      *(_OWORD *)(v40 + 16) = xmmword_1002464F0;
      *(void *)(v40 + 32) = 6910581LL;
      *(void *)(v40 + 40) = 0xE300000000000000LL;
      *(void *)(v40 + 72) = &type metadata for String;
      *(void *)(v40 + 48) = v36;
      *(void *)(v40 + 56) = v37;
LABEL_15:
      unint64_t v25 = sub_1000AFFF4(v40);
      break;
    default:
      unint64_t v25 = sub_1000AFFF4((uint64_t)_swiftEmptyArrayStorage);
      sub_1000DB164((uint64_t)v15);
      break;
  }

  return v25;
}

uint64_t sub_1000DA62C(uint64_t a1)
{
  uint64_t v2 = sub_1000DBFA8(&qword_1002E2280, (uint64_t)&unk_100249B4C);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000DA664(uint64_t a1)
{
  uint64_t v2 = sub_1000DBFA8(&qword_1002E2280, (uint64_t)&unk_100249B4C);
  uint64_t v3 = sub_1000DBFA8(&qword_1002E2278, (uint64_t)&unk_100249B8C);
  unint64_t v4 = sub_100079920();
  return Error<>._code.getter(a1, v2, v3, v4);
}

uint64_t sub_1000DA6CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000DBFA8(&qword_1002E2278, (uint64_t)&unk_100249B8C);
  unint64_t v5 = sub_100079920();
  return CustomNSError<>.errorCode.getter(a1, a2, v4, v5);
}

uint64_t sub_1000DA724@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000D9C54(*a1, a2);
}

void sub_1000DA72C(void *a1@<X8>)
{
  *a1 = v2;
}

double sub_1000DA750@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  unint64_t v9 = sub_100079A58(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v12 = *v4;
    uint64_t v15 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000DAEA8();
      uint64_t v12 = v15;
    }

    swift_bridgeObjectRelease(*(void *)(*(void *)(v12 + 48) + 16 * v9 + 8));
    sub_10007ADB4((_OWORD *)(*(void *)(v12 + 56) + 32 * v9), a3);
    sub_1000DAB3C(v9, v12);
    uint64_t v13 = *v4;
    *uint64_t v4 = v12;
    swift_bridgeObjectRelease(v13);
  }

  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }

  return result;
}

uint64_t sub_1000DA840(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100072CC4(&qword_1002E0F28);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    unint64_t v34 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain(v5);
    int64_t v14 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v14 << 6);
      }

      else
      {
        int64_t v19 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        if (v19 >= v35) {
          goto LABEL_37;
        }
        unint64_t v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          int64_t v14 = v19 + 1;
          if (v19 + 1 >= v35) {
            goto LABEL_37;
          }
          unint64_t v20 = v36[v14];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              uint64_t v3 = v34;
              if ((a2 & 1) != 0)
              {
                uint64_t v33 = 1LL << *(_BYTE *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v36 = -1LL << v33;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            unint64_t v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v14 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_44;
                }
                if (v14 >= v35) {
                  goto LABEL_37;
                }
                unint64_t v20 = v36[v14];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v14 = v21;
          }
        }

unint64_t sub_1000DAB3C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v10 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v27, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease(v12);
        unint64_t v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(a2 + 48);
          uint64_t v16 = (_OWORD *)(v15 + 16 * v3);
          unint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1) {
            *uint64_t v16 = *v17;
          }
          uint64_t v18 = *(void *)(a2 + 56);
          int64_t v19 = (_OWORD *)(v18 + 32 * v3);
          unint64_t v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v19 >= v20 + 2))
          {
            __int128 v9 = v20[1];
            _OWORD *v19 = *v20;
            v19[1] = v9;
            int64_t v3 = v6;
          }
        }

void sub_1000DAD10(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100079A58(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        int64_t v19 = (void *)(v18[7] + 32 * v12);
        sub_10007EAFC(v19);
        sub_10007ADB4(a1, v19);
        return;
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1000DAEA8();
      goto LABEL_7;
    }

    sub_1000DA840(v15, a4 & 1);
    unint64_t v20 = sub_100079A58(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      unint64_t v12 = v20;
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_1000DAE40(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

_OWORD *sub_1000DAE40(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  unint64_t v6 = (void *)(a5[6] + 16 * a1);
  *unint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_10007ADB4(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

void sub_1000DAEA8()
{
  uint64_t v1 = v0;
  sub_100072CC4(&qword_1002E0F28);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    uint64_t *v1 = v4;
    return;
  }

  BOOL v25 = v1;
  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

uint64_t sub_1000DB08C(uint64_t result)
{
  return result;
}

uint64_t type metadata accessor for KTError(uint64_t a1)
{
  uint64_t result = qword_1002EC870;
  if (!qword_1002EC870) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KTError);
  }
  return result;
}

uint64_t sub_1000DB0DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KTError(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000DB120(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KTError(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000DB164(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for KTError(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_1000DB1A4()
{
  unint64_t result = qword_1002E21D0;
  if (!qword_1002E21D0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for TransparencyFeatureFlags,  &type metadata for TransparencyFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_1002E21D0);
  }

  return result;
}

unint64_t sub_1000DB1EC()
{
  unint64_t result = qword_1002E21D8;
  if (!qword_1002E21D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100249A6C, &type metadata for KTErrorOBJC);
    atomic_store(result, (unint64_t *)&qword_1002E21D8);
  }

  return result;
}

uint64_t sub_1000DB230()
{
  return sub_1000DBFA8((unint64_t *)&qword_1002E0F10, (uint64_t)&unk_100249B0C);
}

uint64_t getEnumTagSinglePayload for TransparencyFeatureFlags(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

uint64_t storeEnumTagSinglePayload for TransparencyFeatureFlags(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000DB330 + 4 * byte_1002499B9[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000DB364 + 4 * byte_1002499B4[v4]))();
}

uint64_t sub_1000DB364(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DB36C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000DB374LL);
  }
  return result;
}

uint64_t sub_1000DB380(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000DB388LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000DB38C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DB394(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TransparencyFeatureFlags()
{
  return &type metadata for TransparencyFeatureFlags;
}

ValueMetadata *type metadata accessor for KTErrorOBJC()
{
  return &type metadata for KTErrorOBJC;
}

void *sub_1000DB3C0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v9);
  }

  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        uint64_t v8 = a2[1];
        *a1 = *a2;
        a1[1] = v8;
        *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
        swift_bridgeObjectRetain(v8);
        swift_storeEnumTagMultiPayload(a1, a3, 0LL);
        break;
      case 1u:
        uint64_t v11 = a2[1];
        *a1 = *a2;
        a1[1] = v11;
        swift_bridgeObjectRetain(v11);
        uint64_t v12 = sub_100072CC4(&qword_1002E21C0);
        uint64_t v13 = *(int *)(v12 + 48);
        unint64_t v14 = (char *)a1 + v13;
        unint64_t v15 = (char *)a2 + v13;
        uint64_t v16 = type metadata accessor for Date(0LL);
        uint64_t v17 = *(void *)(v16 - 8);
        uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
        if (v18(v15, 1LL, v16))
        {
          uint64_t v19 = sub_100072CC4((uint64_t *)&unk_1002DF740);
          memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
        }

        uint64_t v23 = *(int *)(v12 + 64);
        int64_t v24 = (char *)a1 + v23;
        BOOL v25 = (char *)a2 + v23;
        if (v18(v25, 1LL, v16))
        {
          uint64_t v26 = sub_100072CC4((uint64_t *)&unk_1002DF740);
          memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v24, v25, v16);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v24, 0LL, 1LL, v16);
        }

        swift_storeEnumTagMultiPayload(a1, a3, 1LL);
        break;
      case 2u:
        uint64_t v20 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v20);
        swift_storeEnumTagMultiPayload(a1, a3, 2LL);
        break;
      case 3u:
        uint64_t v21 = a2[1];
        *a1 = *a2;
        a1[1] = v21;
        swift_bridgeObjectRetain(v21);
        swift_storeEnumTagMultiPayload(a1, a3, 3LL);
        break;
      case 4u:
        uint64_t v22 = a2[1];
        *a1 = *a2;
        a1[1] = v22;
        swift_bridgeObjectRetain(v22);
        swift_storeEnumTagMultiPayload(a1, a3, 4LL);
        break;
      default:
        memcpy(a1, a2, *(void *)(v5 + 64));
        break;
    }
  }

  return a1;
}

uint64_t sub_1000DB620(uint64_t *a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
    case 3:
    case 4:
      uint64_t v4 = a1[1];
      goto LABEL_8;
    case 1:
      swift_bridgeObjectRelease(a1[1]);
      uint64_t v5 = sub_100072CC4(&qword_1002E21C0);
      int v6 = (char *)a1 + *(int *)(v5 + 48);
      uint64_t v7 = type metadata accessor for Date(0LL);
      uint64_t v8 = *(void *)(v7 - 8);
      uint64_t v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
      if (!v9(v6, 1LL, v7)) {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
      }
      uint64_t v10 = (char *)a1 + *(int *)(v5 + 64);
      uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v9)(v10, 1LL, v7);
      if (!(_DWORD)result) {
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      }
      break;
    case 2:
      uint64_t v4 = *a1;
LABEL_8:
      uint64_t result = swift_bridgeObjectRelease(v4);
      break;
    default:
      return result;
  }

  return result;
}

void *sub_1000DB728(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
      swift_bridgeObjectRetain(v6);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 0LL;
      goto LABEL_14;
    case 1u:
      uint64_t v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      swift_bridgeObjectRetain(v10);
      uint64_t v11 = sub_100072CC4(&qword_1002E21C0);
      uint64_t v12 = *(int *)(v11 + 48);
      uint64_t v13 = (char *)a1 + v12;
      unint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for Date(0LL);
      uint64_t v16 = *(void *)(v15 - 8);
      uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
      if (v17(v14, 1LL, v15))
      {
        uint64_t v18 = sub_100072CC4((uint64_t *)&unk_1002DF740);
        memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
      }

      uint64_t v22 = *(int *)(v11 + 64);
      uint64_t v23 = (char *)a1 + v22;
      int64_t v24 = (char *)a2 + v22;
      if (v17(v24, 1LL, v15))
      {
        uint64_t v25 = sub_100072CC4((uint64_t *)&unk_1002DF740);
        memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v23, v24, v15);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v23, 0LL, 1LL, v15);
      }

      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 1LL;
      goto LABEL_14;
    case 2u:
      uint64_t v19 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v19);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 2LL;
      goto LABEL_14;
    case 3u:
      uint64_t v20 = a2[1];
      *a1 = *a2;
      a1[1] = v20;
      swift_bridgeObjectRetain(v20);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 3LL;
      goto LABEL_14;
    case 4u:
      uint64_t v21 = a2[1];
      *a1 = *a2;
      a1[1] = v21;
      swift_bridgeObjectRetain(v21);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 4LL;
LABEL_14:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
      break;
  }

  return a1;
}

void *sub_1000DB950(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000DB164((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        *a1 = *a2;
        uint64_t v6 = a2[1];
        a1[1] = v6;
        *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
        swift_bridgeObjectRetain(v6);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 0LL;
        goto LABEL_15;
      case 1u:
        *a1 = *a2;
        uint64_t v10 = a2[1];
        a1[1] = v10;
        swift_bridgeObjectRetain(v10);
        uint64_t v11 = sub_100072CC4(&qword_1002E21C0);
        uint64_t v12 = *(int *)(v11 + 48);
        uint64_t v13 = (char *)a1 + v12;
        unint64_t v14 = (char *)a2 + v12;
        uint64_t v15 = type metadata accessor for Date(0LL);
        uint64_t v16 = *(void *)(v15 - 8);
        uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
        if (v17(v14, 1LL, v15))
        {
          uint64_t v18 = sub_100072CC4((uint64_t *)&unk_1002DF740);
          memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
        }

        uint64_t v22 = *(int *)(v11 + 64);
        uint64_t v23 = (char *)a1 + v22;
        int64_t v24 = (char *)a2 + v22;
        if (v17(v24, 1LL, v15))
        {
          uint64_t v25 = sub_100072CC4((uint64_t *)&unk_1002DF740);
          memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v23, v24, v15);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v23, 0LL, 1LL, v15);
        }

        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 1LL;
        goto LABEL_15;
      case 2u:
        uint64_t v19 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v19);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 2LL;
        goto LABEL_15;
      case 3u:
        *a1 = *a2;
        uint64_t v20 = a2[1];
        a1[1] = v20;
        swift_bridgeObjectRetain(v20);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 3LL;
        goto LABEL_15;
      case 4u:
        *a1 = *a2;
        uint64_t v21 = a2[1];
        a1[1] = v21;
        swift_bridgeObjectRetain(v21);
        uint64_t v7 = a1;
        uint64_t v8 = a3;
        uint64_t v9 = 4LL;
LABEL_15:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

_OWORD *sub_1000DBBA8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    *a1 = *a2;
    uint64_t v6 = sub_100072CC4(&qword_1002E21C0);
    uint64_t v7 = *(int *)(v6 + 48);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Date(0LL);
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    if (v12(v9, 1LL, v10))
    {
      uint64_t v13 = sub_100072CC4((uint64_t *)&unk_1002DF740);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
    }

    uint64_t v14 = *(int *)(v6 + 64);
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    if (v12(v16, 1LL, v10))
    {
      uint64_t v17 = sub_100072CC4((uint64_t *)&unk_1002DF740);
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v15, v16, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v15, 0LL, 1LL, v10);
    }

    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

_OWORD *sub_1000DBD38(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000DB164((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *a1 = *a2;
      uint64_t v6 = sub_100072CC4(&qword_1002E21C0);
      uint64_t v7 = *(int *)(v6 + 48);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for Date(0LL);
      uint64_t v11 = *(void *)(v10 - 8);
      uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
      if (v12(v9, 1LL, v10))
      {
        uint64_t v13 = sub_100072CC4((uint64_t *)&unk_1002DF740);
        memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
      }

      uint64_t v14 = *(int *)(v6 + 64);
      uint64_t v15 = (char *)a1 + v14;
      uint64_t v16 = (char *)a2 + v14;
      if (v12(v16, 1LL, v10))
      {
        uint64_t v17 = sub_100072CC4((uint64_t *)&unk_1002DF740);
        memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v15, v16, v10);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v15, 0LL, 1LL, v10);
      }

      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t sub_1000DBED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t sub_1000DBEE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t sub_1000DBEF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

void sub_1000DBF04(uint64_t a1)
{
  v5[0] = &unk_100249C10;
  sub_100090D84(319LL);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout3(v4, &unk_100249C28, *(void *)(v2 - 8) + 64LL, *(void *)(v2 - 8) + 64LL);
    v5[1] = v4;
    v5[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[3] = &unk_100249C28;
    v5[4] = &unk_100249C28;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 5LL, v5);
  }

uint64_t sub_1000DBFA8(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for KTError(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1000DBFE8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100077D38(v0, qword_1002EC888);
  sub_100072DEC(v0, (uint64_t)qword_1002EC888);
  return Logger.init(transparencyCategory:)(0x74704F65726F7453LL, 0xEA00000000006E49LL);
}

uint64_t KTStoreOptInOperation.storedRecords.getter()
{
  __int16 v1 = (void *)(v0 + OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_storedRecords);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_storedRecords, v3, 0LL, 0LL);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t KTStoreOptInOperation.storedRecords.setter(uint64_t a1)
{
  unint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_storedRecords);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *unint64_t v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*KTStoreOptInOperation.storedRecords.modify(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

id KTStoreOptInOperation.__allocating_init(database:context:records:type:overwrite:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v13 = objc_allocWithZone(v6);
  *(void *)&v13[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_storedRecords] = &_swiftEmptyArrayStorage;
  *(void *)&v13[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_context] = a2;
  *(void *)&v13[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_records] = a3;
  *(void *)&v13[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_database] = a1;
  v13[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_overwrite] = a6;
  uint64_t v14 = &v13[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_type];
  void *v14 = a4;
  v14[1] = a5;
  v16.receiver = v13;
  v16.super_class = v6;
  return objc_msgSendSuper2(&v16, "init");
}

id KTStoreOptInOperation.init(database:context:records:type:overwrite:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(void *)&v6[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_storedRecords] = _swiftEmptyArrayStorage;
  *(void *)&v6[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_context] = a2;
  *(void *)&v6[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_records] = a3;
  *(void *)&v6[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_database] = a1;
  v6[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_overwrite] = a6;
  uint64_t v7 = &v6[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_type];
  *uint64_t v7 = a4;
  v7[1] = a5;
  v9.receiver = v6;
  v9.super_class = (Class)type metadata accessor for KTStoreOptInOperation();
  return objc_msgSendSuper2(&v9, "init");
}

uint64_t type metadata accessor for KTStoreOptInOperation()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd21KTStoreOptInOperation);
}

Swift::Void __swiftcall KTStoreOptInOperation.groupStart()()
{
  uint64_t v1 = v0;
  id v2 = [objc_allocWithZone(NSBlockOperation) init];
  [v0 dependOnBeforeGroupFinished:v2];
  sub_1000DC480();
  swift_bridgeObjectRetain(*(void *)&v0[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_records]);
  unint64_t v3 = _swiftEmptyArrayStorage;
  uint64_t v4 = (void *)CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)( *(Swift::OpaquePointer_optional *)(&v3 - 1),  v16);
  uint64_t v5 = v4;
  if (v1[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_overwrite] == 1) {
    [v4 setSavePolicy:2];
  }
  [v5 setQualityOfService:25];
  uint64_t v6 = *(void *)&v1[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_type];
  uint64_t v7 = *(void **)&v1[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_type + 8];
  id v15 = v5;
  swift_bridgeObjectRetain(v7);
  v8._uint64_t countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v7);
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xEC0000002D65726FLL);
  [v15 setName:v9];

  uint64_t v10 = swift_allocObject(&unk_100280DD8, 24LL, 7LL);
  *(void *)(v10 + 16) = v1;
  uint64_t v11 = v1;
  CKModifyRecordsOperation.perRecordSaveBlock.setter(sub_1000DC4E0, v10);
  uint64_t v12 = swift_allocObject(&unk_100280E00, 32LL, 7LL);
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = v2;
  uint64_t v13 = v11;
  id v14 = v2;
  CKModifyRecordsOperation.modifyRecordsResultBlock.setter(sub_1000DC7A4, v12);
  [*(id *)&v13[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_database] addOperation:v15];
}

unint64_t sub_1000DC480()
{
  unint64_t result = qword_1002E08A0;
  if (!qword_1002E08A0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___CKModifyRecordsOperation);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002E08A0);
  }

  return result;
}

uint64_t sub_1000DC4BC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1000DC4E0(uint64_t a1, void *a2, char a3)
{
  uint64_t v5 = *(void **)(v3 + 16);
  if ((a3 & 1) != 0)
  {
    swift_errorRetain(a2);
    id v14 = (void *)_convertErrorToNSError(_:)(a2);
    [v5 setError:v14];

    if (qword_1002EC880 != -1) {
      swift_once(&qword_1002EC880, sub_1000DBFE8);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    uint64_t v16 = sub_100072DEC(v15, (uint64_t)qword_1002EC888);
    os_log_type_t v17 = static os_log_type_t.error.getter(v16);
    swift_errorRetain(a2);
    uint64_t v18 = swift_errorRetain(a2);
    os_log_t log = (os_log_s *)Logger.logObject.getter(v18);
    if (os_log_type_enabled(log, v17))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v20 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v19 = 138412290;
      swift_errorRetain(a2);
      uint64_t v21 = _swift_stdlib_bridgeErrorToNSError(a2);
      uint64_t v24 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v19 + 4, v19 + 12);
      uint64_t *v20 = v21;
      sub_10007EAF0(a2, 1);
      sub_10007EAF0(a2, 1);
      _os_log_impl( (void *)&_mh_execute_header,  log,  v17,  "KTStoreOptInOperation:perRecordSaveBlock: fail: %@",  v19,  0xCu);
      uint64_t v22 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
      swift_arrayDestroy(v20, 1LL, v22);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);

      sub_10007EAF0(a2, 1);
    }

    else
    {
      sub_10007EAF0(a2, 1);
      sub_10007EAF0(a2, 1);
      swift_errorRelease(a2);
    }
  }

  else
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t *))((swift_isaMask & *v5) + 0x90LL);
    id v7 = a2;
    Swift::String v8 = (void (*)(uint64_t *, void))v6(&v24);
    uint64_t v10 = v9;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v8);
    unint64_t v12 = *(void *)((*v10 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v11 = *(void *)((*v10 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v12 >= v11 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1LL);
    }
    uint64_t v13 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v7);
    specialized Array._endMutation()(v13);
    v8(&v24, 0LL);
  }

uint64_t sub_1000DC778()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1000DC7A4(uint64_t a1, char a2)
{
}

void KTStoreOptInOperation.init()()
{
}

id KTStoreOptInOperation.__deallocating_deinit()
{
  return sub_1000B605C(type metadata accessor for KTStoreOptInOperation);
}

void *KTDeleteOptInOperation.deletedRecordID.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_deletedRecordID);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_deletedRecordID, v5, 0LL, 0LL);
  id v2 = *v1;
  id v3 = v2;
  return v2;
}

void KTDeleteOptInOperation.deletedRecordID.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_deletedRecordID);
  swift_beginAccess(v3, v5, 1LL, 0LL);
  uint64_t v4 = *v3;
  *id v3 = a1;
}

uint64_t (*KTDeleteOptInOperation.deletedRecordID.modify(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

id KTDeleteOptInOperation.__allocating_init(database:context:recordID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = (char *)objc_allocWithZone(v3);
  *(void *)&v7[OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_deletedRecordID] = 0LL;
  *(void *)&v7[OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_context] = a2;
  *(void *)&v7[OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_recordID] = a3;
  *(void *)&v7[OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_database] = a1;
  v9.receiver = v7;
  v9.super_class = v3;
  return objc_msgSendSuper2(&v9, "init");
}

id KTDeleteOptInOperation.init(database:context:recordID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v3[OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_deletedRecordID] = 0LL;
  *(void *)&v3[OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_context] = a2;
  *(void *)&v3[OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_recordID] = a3;
  *(void *)&v3[OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_database] = a1;
  v5.receiver = v3;
  v5.super_class = (Class)type metadata accessor for KTDeleteOptInOperation();
  return objc_msgSendSuper2(&v5, "init");
}

uint64_t type metadata accessor for KTDeleteOptInOperation()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd22KTDeleteOptInOperation);
}

Swift::Void __swiftcall KTDeleteOptInOperation.groupStart()()
{
  uint64_t v1 = v0;
  id v2 = [objc_allocWithZone(NSBlockOperation) init];
  [v0 dependOnBeforeGroupFinished:v2];
  sub_1000DC480();
  uint64_t v3 = sub_100072CC4(&qword_1002E0AE0);
  uint64_t v4 = swift_allocObject(v3, 40LL, 7LL);
  *(_OWORD *)(v4 + 16) = xmmword_1002487A0;
  objc_super v5 = *(void **)&v0[OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_recordID];
  *(void *)(v4 + 32) = v5;
  Swift::Bool v15 = v4;
  specialized Array._endMutation()(v4);
  id v6 = v5;
  v16.value._rawValue = _swiftEmptyArrayStorage;
  v16.is_nil = v15;
  id v7 = (void *)CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v16, v17);
  [v7 setQualityOfService:25];
  id v14 = v7;
  NSString v8 = String._bridgeToObjectiveC()();
  [v14 setName:v8];

  uint64_t v9 = swift_allocObject(&unk_100280E28, 24LL, 7LL);
  *(void *)(v9 + 16) = v1;
  id v10 = v1;
  CKModifyRecordsOperation.perRecordDeleteBlock.setter(sub_1000DCC64, v9);
  uint64_t v11 = swift_allocObject(&unk_100280E50, 32LL, 7LL);
  *(void *)(v11 + 16) = v10;
  *(void *)(v11 + 24) = v2;
  unint64_t v12 = (char *)v10;
  id v13 = v2;
  CKModifyRecordsOperation.modifyRecordsResultBlock.setter(sub_1000DCEA8, v11);
  [*(id *)&v12[OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_database] addOperation:v14];
}

void sub_1000DCC64(void *a1, uint64_t a2, char a3)
{
  uint64_t v4 = *(void **)(v3 + 16);
  if ((a3 & 1) != 0)
  {
    swift_errorRetain(a2);
    uint64_t v9 = (void *)_convertErrorToNSError(_:)(a2);
    [v4 setError:v9];

    if (qword_1002EC880 != -1) {
      swift_once(&qword_1002EC880, sub_1000DBFE8);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = sub_100072DEC(v10, (uint64_t)qword_1002EC888);
    os_log_type_t v12 = static os_log_type_t.error.getter(v11);
    swift_errorRetain(a2);
    uint64_t v13 = swift_errorRetain(a2);
    os_log_t log = (os_log_s *)Logger.logObject.getter(v13);
    if (os_log_type_enabled(log, v12))
    {
      id v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      Swift::Bool v15 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v14 = 138412290;
      swift_errorRetain(a2);
      uint64_t v16 = _swift_stdlib_bridgeErrorToNSError(a2);
      uint64_t v19 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v14 + 4, v14 + 12);
      *Swift::Bool v15 = v16;
      sub_10007EAD8(a2, 1);
      sub_10007EAD8(a2, 1);
      _os_log_impl( (void *)&_mh_execute_header,  log,  v12,  "KTDeleteOptInOperation:perRecordSaveBlock: fail: %@",  v14,  0xCu);
      uint64_t v17 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
      swift_arrayDestroy(v15, 1LL, v17);
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);

      sub_10007EAD8(a2, 1);
    }

    else
    {
      sub_10007EAD8(a2, 1);
      sub_10007EAD8(a2, 1);
      swift_errorRelease(a2);
    }
  }

  else
  {
    id v6 = *(void (**)(void *))((swift_isaMask & *v4) + 0x78LL);
    id v7 = a1;
    v6(a1);
  }

void sub_1000DCEA8(uint64_t a1, char a2)
{
}

void sub_1000DCEBC(uint64_t a1, char a2, const char *a3, const char *a4)
{
  objc_super v5 = *(void **)(v4 + 16);
  uint64_t v6 = *(void *)(v4 + 24);
  if ((a2 & 1) == 0)
  {
    if (qword_1002EC880 != -1) {
      swift_once(&qword_1002EC880, sub_1000DBFE8);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    uint64_t v9 = sub_100072DEC(v8, (uint64_t)qword_1002EC888);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      os_log_type_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, a4, v12, 2u);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    goto LABEL_11;
  }

  swift_errorRetain(a1);
  Swift::Bool v15 = (void *)_convertErrorToNSError(_:)(a1);
  [v5 setError:v15];

  if (qword_1002EC880 != -1) {
    swift_once(&qword_1002EC880, sub_1000DBFE8);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = sub_100072DEC(v16, (uint64_t)qword_1002EC888);
  os_log_type_t v18 = static os_log_type_t.error.getter(v17);
  swift_errorRetain(a1);
  uint64_t v19 = swift_errorRetain(a1);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v20 = v18;
  if (!os_log_type_enabled(v10, v18))
  {
    sub_10007EAD8(a1, 1);
    sub_10007EAD8(a1, 1);
    swift_errorRelease(a1);
LABEL_11:

    goto LABEL_12;
  }

  uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v27 = v6;
  uint64_t v22 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
  *(_DWORD *)uint64_t v21 = 138412290;
  swift_errorRetain(a1);
  uint64_t v23 = _swift_stdlib_bridgeErrorToNSError(a1);
  uint64_t v28 = v23;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v21 + 4, v21 + 12);
  *uint64_t v22 = v23;
  sub_10007EAD8(a1, 1);
  sub_10007EAD8(a1, 1);
  _os_log_impl((void *)&_mh_execute_header, v10, v20, a3, v21, 0xCu);
  uint64_t v24 = sub_100072CC4((uint64_t *)&unk_1002E08D0);
  swift_arrayDestroy(v22, 1LL, v24);
  uint64_t v25 = v22;
  uint64_t v6 = v27;
  swift_slowDealloc(v25, -1LL, -1LL);
  swift_slowDealloc(v21, -1LL, -1LL);

  sub_10007EAD8(a1, 1);
LABEL_12:
  id v26 = objc_msgSend(v5, "operationQueue", v27);
  [v26 addOperation:v6];
}

void KTDeleteOptInOperation.init()()
{
}

id KTDeleteOptInOperation.__deallocating_deinit()
{
  return sub_1000B605C(type metadata accessor for KTDeleteOptInOperation);
}

BOOL sub_1000DD298(uint64_t a1)
{
  return a1 == 1;
}

uint64_t sub_1000DD2A4()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_optInRecords);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_optInRecords, v3, 0LL, 0LL);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t sub_1000DD2EC(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_optInRecords);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_1000DD33C(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_1000DD380()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_uriToSMT));
}

uint64_t sub_1000DD390()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_intendedState);
  swift_beginAccess(v0 + OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_intendedState, v3, 0LL, 0LL);
  return *v1;
}

uint64_t sub_1000DD3D4(char a1)
{
  uint64_t v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_intendedState);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_1000DD41C(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000DD460()
{
  return *(void *)v0;
}

uint64_t sub_1000DD46C(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t sub_1000DD480@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for KTOptIOValidator.OptInResult(0LL);
  return sub_100085CA8(v1 + *(int *)(v3 + 20), a1, (uint64_t *)&unk_1002DF740);
}

uint64_t sub_1000DD4BC(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for KTOptIOValidator.OptInResult(0LL) + 20);
  return sub_1000A99C4(a1, v3);
}

uint64_t (*sub_1000DD4EC())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_1000DD514()
{
  return 0LL;
}

uint64_t sub_1000DD520()
{
  uint64_t v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for KTOptIOValidator.OptInResult(0LL) + 24));
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_1000DD55C(uint64_t a1, uint64_t a2)
{
  objc_super v5 = (void *)(v2 + *(int *)(type metadata accessor for KTOptIOValidator.OptInResult(0LL) + 24));
  uint64_t result = swift_bridgeObjectRelease(v5[1]);
  *objc_super v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_1000DD5A0())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_1000DD5C8@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + 8) = 1;
  uint64_t v2 = type metadata accessor for KTOptIOValidator.OptInResult(0LL);
  uint64_t v3 = a1 + *(int *)(v2 + 20);
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))( v3,  1LL,  1LL,  v4);
  uint64_t v6 = (void *)(a1 + *(int *)(v2 + 24));
  *uint64_t v6 = 0LL;
  v6[1] = 0LL;
  return result;
}

uint64_t sub_1000DD63C@<X0>( uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = a1;
  *(_BYTE *)(a6 + 8) = a2 & 1;
  uint64_t v10 = type metadata accessor for KTOptIOValidator.OptInResult(0LL);
  uint64_t result = sub_100086884(a3, a6 + *(int *)(v10 + 20));
  os_log_type_t v12 = (void *)(a6 + *(int *)(v10 + 24));
  *os_log_type_t v12 = a4;
  v12[1] = a5;
  return result;
}

id KTOptIOValidator.__allocating_init(optInRecords:uriToSMT:)(uint64_t a1, uint64_t a2)
{
  objc_super v5 = (char *)objc_allocWithZone(v2);
  uint64_t v6 = &v5[OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_intendedState];
  *uint64_t v6 = 2;
  *(void *)&v5[OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_optInRecords] = a1;
  *(void *)&v5[OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_uriToSMT] = a2;
  swift_beginAccess(v6, v9, 1LL, 0LL);
  *uint64_t v6 = 2;
  v8.receiver = v5;
  v8.super_class = v2;
  return objc_msgSendSuper2(&v8, "init");
}

id KTOptIOValidator.init(optInRecords:uriToSMT:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = &v2[OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_intendedState];
  *uint64_t v3 = 2;
  *(void *)&v2[OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_optInRecords] = a1;
  *(void *)&v2[OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_uriToSMT] = a2;
  swift_beginAccess(v3, v6, 1LL, 0LL);
  *uint64_t v3 = 2;
  v5.receiver = v2;
  v5.super_class = (Class)type metadata accessor for KTOptIOValidator();
  return objc_msgSendSuper2(&v5, "init");
}

Swift::Void __swiftcall KTOptIOValidator.setIntendedState(state:)(Swift::Bool state)
{
}

void sub_1000DD918(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v45 = a2;
  uint64_t v9 = type metadata accessor for KTOptIOValidator.OptInResult(0LL);
  __chkstk_darwin(v9);
  char v49 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  os_log_type_t v11 = (void *)type metadata accessor for Date(0LL);
  uint64_t v12 = *(v11 - 1);
  __chkstk_darwin(v11);
  uint64_t v51 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  __chkstk_darwin(v14);
  uint64_t v16 = (uint64_t)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = _swiftEmptyArrayStorage;
  uint64_t v50 = a1;
  uint64_t v17 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (2)
  {
    uint64_t v44 = a4;
    unint64_t v47 = a3;
    uint64_t v48 = v9;
    uint64_t v46 = v5;
    if (!v17)
    {
      swift_bridgeObjectRelease(v50);
      BOOL v31 = _swiftEmptyArrayStorage;
      goto LABEL_17;
    }

    if (v17 < 1)
    {
      __break(1u);
LABEL_40:
      swift_release(v53);
      __break(1u);
      return;
    }

    uint64_t v18 = 0LL;
    uint64_t v19 = v50;
    unint64_t v52 = v50 & 0xC000000000000001LL;
    do
    {
      if (v52) {
        id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v19);
      }
      else {
        id v20 = *(id *)(v19 + 8 * v18 + 32);
      }
      uint64_t v21 = v20;
      id v22 = [v20 smtTimestamp];
      if (!v22)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(v12 + 56))(v16, 1LL, 1LL, v11);
LABEL_7:
        sub_10009691C(v16);

        goto LABEL_8;
      }

      uint64_t v23 = v22;
      uint64_t v24 = v17;
      uint64_t v25 = v51;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v22);

      id v26 = v25;
      uint64_t v17 = v24;
      (*(void (**)(uint64_t, char *, void *))(v12 + 32))(v16, v26, v11);
      (*(void (**)(uint64_t, void, uint64_t, void *))(v12 + 56))(v16, 0LL, 1LL, v11);
      uint64_t v27 = sub_10009691C(v16);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v27);
      uint64_t v28 = v53[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v28);
      uint64_t v29 = v28;
      uint64_t v19 = v50;
      uint64_t v30 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v21);
      specialized ContiguousArray._endMutation()(v30);
LABEL_8:
      ++v18;
    }

    while (v17 != v18);
    swift_bridgeObjectRelease(v19);
    BOOL v31 = v53;
LABEL_17:
    uint64_t v32 = v47;
    swift_bridgeObjectRetain(v47);
    uint64_t v33 = v46;
    unint64_t v34 = (unint64_t)sub_1000E27A0((uint64_t)v31, v45, v32);
    swift_release(v31);
    swift_bridgeObjectRelease(v32);
    uint64_t v35 = (uint64_t)v49;
    if ((v34 & 0x8000000000000000LL) != 0 || (v34 & 0x4000000000000000LL) != 0)
    {
      swift_bridgeObjectRetain(v34);
      uint64_t v36 = sub_1000A20CC(v41);
      swift_bridgeObjectRelease(v34);
    }

    else
    {
      uint64_t v36 = (void *)(v34 & 0xFFFFFFFFFFFFFF8LL);
      swift_bridgeObjectRetain(v34);
    }

    uint64_t v53 = v36;
    sub_1000E027C((uint64_t *)&v53);
    if (v33) {
      goto LABEL_40;
    }
    a4 = 0LL;
    swift_bridgeObjectRelease(v34);
    uint64_t v9 = (uint64_t)v53;
    *(void *)uint64_t v35 = 0LL;
    *(_BYTE *)(v35 + 8) = 1;
    uint64_t v37 = v48;
    (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(v12 + 56))(v35 + *(int *)(v48 + 20), 1LL, 1LL, v11);
    uint64_t v38 = (void *)(v35 + *(int *)(v37 + 24));
    *uint64_t v38 = 0LL;
    v38[1] = 0LL;
    if (v9 < 0 || (v9 & 0x4000000000000000LL) != 0)
    {
      uint64_t v42 = swift_retain(v9);
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v42);
      if (v5) {
        goto LABEL_24;
      }
    }

    else
    {
      uint64_t v5 = *(void *)(v9 + 16);
      swift_retain(v9);
      if (v5)
      {
LABEL_24:
        a3 = v9 & 0xC000000000000001LL;
        uint64_t v16 = 4LL;
        while (1)
        {
          __int16 v39 = a3
              ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v16 - 4, v9)
              : *(id *)(v9 + 8 * v16);
          os_log_type_t v11 = v39;
          a1 = v16 - 3;
          if (__OFADD__(v16 - 4, 1LL)) {
            break;
          }
          uint64_t v53 = v39;
          sub_1000DDD64(v35, (id *)&v53);

          ++v16;
          if (a1 == v5) {
            goto LABEL_30;
          }
        }

        __break(1u);
LABEL_32:
        if (a1 < 0) {
          uint64_t v40 = a1;
        }
        else {
          uint64_t v40 = a1 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(a1);
        uint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v40);
        continue;
      }
    }

    break;
  }

id sub_1000DDD64(uint64_t a1, id *a2)
{
  uint64_t v49 = a1;
  uint64_t v3 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  objc_super v8 = (char *)&v48 - v7;
  uint64_t v48 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v48 - 8);
  uint64_t v10 = __chkstk_darwin(v48);
  uint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v48 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v48 - v16;
  id v18 = *a2;
  id result = [*a2 state];
  id v20 = result;
  if (!result)
  {
    id v29 = *(id *)v49;
    char v30 = *(_BYTE *)(v49 + 8);
    id result = [v18 state];
    if ((v30 & 1) == 0 && v29 == result) {
      goto LABEL_13;
    }
    id v31 = [v18 smtTimestamp];
    if (v31)
    {
      uint64_t v32 = v31;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v31);

      uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      uint64_t v34 = v48;
      v33(v6, v15, v48);
      uint64_t v35 = *(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56);
      v35(v6, 0LL, 1LL, v34);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1LL, v34) != 1)
      {
        v33(v12, v6, v34);
        uint64_t v36 = v49 + *(int *)(type metadata accessor for KTOptIOValidator.OptInResult(0LL) + 20);
        sub_10009691C(v36);
        v33((char *)v36, v12, v34);
        id result = (id)((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v35)(v36, 0LL, 1LL, v34);
        goto LABEL_13;
      }
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v6, 1LL, 1LL, v48);
    }

    sub_10009691C((uint64_t)v6);
    uint64_t v44 = type metadata accessor for KTError(0LL);
    unint64_t v45 = sub_1000E29D8();
    swift_allocError(v44, v45, 0LL, 0LL);
    uint64_t v41 = v46;
    uint64_t v42 = v44;
    uint64_t v43 = 5LL;
    goto LABEL_19;
  }

  if (result != (id)1) {
    return result;
  }
  id v21 = *(id *)v49;
  char v22 = *(_BYTE *)(v49 + 8);
  id result = [v18 state];
  if ((v22 & 1) != 0 || v21 != result)
  {
    id v23 = [v18 smtTimestamp];
    if (v23)
    {
      uint64_t v24 = v23;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v23);

      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      uint64_t v26 = v48;
      v25(v8, v15, v48);
      uint64_t v27 = *(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56);
      v27(v8, 0LL, 1LL, v26);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1LL, v26) != 1)
      {
        v25(v17, v8, v26);
        uint64_t v28 = v49 + *(int *)(type metadata accessor for KTOptIOValidator.OptInResult(0LL) + 20);
        sub_10009691C(v28);
        v25((char *)v28, v17, v26);
        id result = (id)((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v27)(v28, 0LL, 1LL, v26);
        goto LABEL_13;
      }
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v8, 1LL, 1LL, v48);
    }

    sub_10009691C((uint64_t)v8);
    uint64_t v38 = type metadata accessor for KTError(0LL);
    unint64_t v39 = sub_1000E29D8();
    swift_allocError(v38, v39, 0LL, 0LL);
    uint64_t v41 = v40;
    uint64_t v42 = v38;
    uint64_t v43 = 9LL;
LABEL_19:
    uint64_t v47 = swift_storeEnumTagMultiPayload(v41, v42, v43);
    return (id)swift_willThrow(v47);
  }

void *sub_1000DE144(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v18))
  {
    uint64_t v6 = 4LL;
    while (1)
    {
      id v7 = (v4 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, v4)
         : *(id *)(v4 + 8 * v6);
      objc_super v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1LL)) {
        break;
      }
      id v10 = [v7 uri];
      if (v10)
      {
        uint64_t v11 = v10;
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
        uint64_t v14 = v13;

        if (v12 == a2 && v14 == a3)
        {
          uint64_t v17 = v4;
          uint64_t v4 = a3;
          swift_bridgeObjectRelease(v17);
LABEL_17:
          swift_bridgeObjectRelease(v4);
          return v8;
        }

        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, a2, a3, 0LL);
        swift_bridgeObjectRelease(v14);
        if ((v16 & 1) != 0) {
          goto LABEL_17;
        }
      }

      ++v6;
      if (v9 == v5) {
        goto LABEL_23;
      }
    }

    __break(1u);
LABEL_19:
    if (v4 < 0) {
      uint64_t v18 = v4;
    }
    else {
      uint64_t v18 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v4);
  }

void KTOptIOValidator.evaluateLogData(application:)(unint64_t a1, id a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v180 = *(void *)(v6 - 8);
  v181 = (void *)v6;
  uint64_t v7 = __chkstk_darwin(v6);
  v166 = (char *)&v151 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  v168 = (char *)&v151 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  v175 = (char *)&v151 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  v173 = (char *)&v151 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  v174 = (char *)&v151 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  v172 = (char *)&v151 - v18;
  __chkstk_darwin(v17);
  v184 = (char *)&v151 - v19;
  id v20 = (int *)type metadata accessor for KTOptIOValidator.OptInResult(0LL);
  uint64_t v21 = __chkstk_darwin(v20);
  id v23 = (char *)&v151 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v25 = (uint64_t)&v151 - v24;
  uint64_t v26 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  uint64_t v27 = __chkstk_darwin(v26);
  v170 = (char *)&v151 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = __chkstk_darwin(v27);
  v164 = (char *)&v151 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  v165 = (char *)&v151 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  v169 = (char *)&v151 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  v167 = (char *)&v151 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v39 = (uint64_t)&v151 - v38;
  uint64_t v40 = __chkstk_darwin(v37);
  uint64_t v177 = (uint64_t)&v151 - v41;
  v185 = *(uint64_t (**)(__n128))((swift_isaMask & *v2) + 0x68LL);
  uint64_t v42 = ((uint64_t (*)(uint64_t))v185)(v40);
  if ((unint64_t)v42 >> 62)
  {
LABEL_113:
    if (v42 < 0) {
      uint64_t v150 = v42;
    }
    else {
      uint64_t v150 = v42 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v43 = _CocoaArrayWrapper.endIndex.getter(v150);
  }

  else
  {
    uint64_t v43 = *(void *)((v42 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v44 = swift_bridgeObjectRelease(v42);
  if (v43)
  {
    uint64_t v45 = ((uint64_t (*)(uint64_t))v185)(v44);
    uint64_t v46 = v176;
    (*(void (**)(uint64_t, unint64_t, id))((swift_isaMask & *v3) + 0xA8LL))(v45, a1, a2);
    swift_bridgeObjectRelease(v45);
    if (v46) {
      return;
    }
    uint64_t v176 = 0LL;
    sub_1000E2994((uint64_t)v23, v25);
    if ((*(_BYTE *)(v25 + 8) & 1) != 0)
    {
      uint64_t v47 = type metadata accessor for KTError(0LL);
      unint64_t v48 = sub_1000E29D8();
      swift_allocError(v47, v48, 0LL, 0LL);
      uint64_t v50 = v49;
      uint64_t v51 = v47;
      uint64_t v52 = 7LL;
LABEL_105:
      uint64_t v145 = swift_storeEnumTagMultiPayload(v50, v51, v52);
      swift_willThrow(v145);
      sub_1000E2958(v25);
      return;
    }

    unint64_t v179 = *(void *)v25;
    if (v179 > 1)
    {
      uint64_t v142 = type metadata accessor for KTError(0LL);
      unint64_t v143 = sub_1000E29D8();
      swift_allocError(v142, v143, 0LL, 0LL);
      uint64_t v50 = v144;
      uint64_t v51 = v142;
      uint64_t v52 = 6LL;
      goto LABEL_105;
    }

    sub_100085CA8(v25 + v20[5], v39, (uint64_t *)&unk_1002DF740);
    uint64_t v133 = v180;
    a2 = v181;
    if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(v180 + 48))(v39, 1LL, v181) == 1)
    {
      sub_10009691C(v39);
      uint64_t v134 = type metadata accessor for KTError(0LL);
      unint64_t v135 = sub_1000E29D8();
      swift_allocError(v134, v135, 0LL, 0LL);
      uint64_t v50 = v136;
      uint64_t v51 = v134;
      uint64_t v52 = 8LL;
      goto LABEL_105;
    }

    id v20 = (int *)v184;
    (*(void (**)(char *, uint64_t, id))(v133 + 32))(v184, v39, a2);
    uint64_t v42 = v177;
    (*(void (**)(uint64_t, int *, id))(v133 + 16))(v177, v20, a2);
    uint64_t v158 = *(void (**)(uint64_t, uint64_t, uint64_t, id))(v133 + 56);
    v158(v42, 0LL, 1LL, a2);
    if (v179 == 1
      && !*(void *)(*(void *)((char *)v3 + OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_uriToSMT) + 16LL))
    {
      uint64_t v146 = type metadata accessor for KTError(0LL);
      unint64_t v147 = sub_1000E29D8();
      swift_allocError(v146, v147, 0LL, 0LL);
      uint64_t v149 = swift_storeEnumTagMultiPayload(v148, v146, 11LL);
      swift_willThrow(v149);
      (*(void (**)(int *, id))(v133 + 8))(v20, a2);
      sub_1000E2958(v25);
      sub_10009691C(v177);
      return;
    }

    (*(void (**)(int *, id))(v133 + 8))(v20, a2);
    sub_1000E2958(v25);
  }

  else
  {
    uint64_t v158 = *(void (**)(uint64_t, uint64_t, uint64_t, id))(v180 + 56);
    v158(v177, 1LL, 1LL, v181);
    unint64_t v179 = 0LL;
  }

  v178 = _swiftEmptyArrayStorage;
  unint64_t v162 = sub_1000DF530((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v53 = *(char **)((char *)v3 + OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_uriToSMT);
  uint64_t v54 = *((void *)v53 + 8);
  v182 = v53 + 64;
  uint64_t v55 = 1LL << v53[32];
  uint64_t v56 = -1LL;
  if (v55 < 64) {
    uint64_t v56 = ~(-1LL << v55);
  }
  a1 = v56 & v54;
  int64_t v183 = (unint64_t)(v55 + 63) >> 6;
  v184 = v53;
  swift_bridgeObjectRetain(v53);
  int v159 = 0;
  uint64_t v39 = 0LL;
  while (1)
  {
    while (1)
    {
      uint64_t v85 = v185;
LABEL_11:
      if (a1)
      {
        unint64_t v57 = __clz(__rbit64(a1));
        a1 &= a1 - 1;
        unint64_t v58 = v57 | (v39 << 6);
      }

      else
      {
        BOOL v59 = __OFADD__(v39++, 1LL);
        if (v59)
        {
          __break(1u);
LABEL_112:
          __break(1u);
          goto LABEL_113;
        }

        if (v39 >= v183) {
          goto LABEL_95;
        }
        unint64_t v60 = *(void *)&v182[8 * v39];
        if (!v60)
        {
          uint64_t v61 = v39 + 1;
          if (v39 + 1 >= v183) {
            goto LABEL_95;
          }
          unint64_t v60 = *(void *)&v182[8 * v61];
          if (!v60)
          {
            uint64_t v61 = v39 + 2;
            if (v39 + 2 >= v183) {
              goto LABEL_95;
            }
            unint64_t v60 = *(void *)&v182[8 * v61];
            if (!v60)
            {
              uint64_t v61 = v39 + 3;
              if (v39 + 3 >= v183)
              {
LABEL_95:
                swift_release(v184);
                uint64_t v124 = v180;
                uint64_t v125 = v181;
                uint64_t v126 = (uint64_t)v170;
                if (v178[2])
                {
                  uint64_t v127 = v178;
                  swift_bridgeObjectRelease(v162);
                  uint64_t v128 = type metadata accessor for KTError(0LL);
                  unint64_t v129 = sub_1000E29D8();
                  swift_allocError(v128, v129, 0LL, 0LL);
                  *uint64_t v130 = v127;
                  uint64_t v131 = swift_storeEnumTagMultiPayload(v130, v128, 2LL);
                  swift_willThrow(v131);
                  sub_10009691C(v177);
                }

                else
                {
                  swift_bridgeObjectRelease(v178);
                  sub_100085CA8(v177, v126, (uint64_t *)&unk_1002DF740);
                  if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(v124 + 48))(v126, 1LL, v125) == 1)
                  {
                    Class isa = 0LL;
                  }

                  else
                  {
                    Class isa = Date._bridgeToObjectiveC()().super.isa;
                    (*(void (**)(uint64_t, void *))(v124 + 8))(v126, v125);
                  }

                  id v137 = objc_allocWithZone(&OBJC_CLASS___KTOptIOValidatorResult);
                  unint64_t v138 = v179;
                  id v139 = [v137 initWithState:v179 timestamp:isa];

                  (*(void (**)(unint64_t, id))((swift_isaMask & *v3) + 0xC8LL))(v138, v139);
                  unint64_t v140 = v162;
                  Class v141 = Dictionary._bridgeToObjectiveC()().super.isa;
                  swift_bridgeObjectRelease(v140);
                  [v139 setUriNeedsOptInChange:v141];

                  [v139 setUsedIntendedState:v159 & 1];
                  sub_10009691C(v177);
                }

                return;
              }

              unint64_t v60 = *(void *)&v182[8 * v61];
              if (!v60)
              {
                while (1)
                {
                  uint64_t v39 = v61 + 1;
                  if (__OFADD__(v61, 1LL)) {
                    goto LABEL_112;
                  }
                  if (v39 >= v183) {
                    goto LABEL_95;
                  }
                  unint64_t v60 = *(void *)&v182[8 * v39];
                  ++v61;
                  if (v60) {
                    goto LABEL_23;
                  }
                }
              }
            }
          }

          uint64_t v39 = v61;
        }

unint64_t sub_1000DF530(uint64_t a1)
{
  uint64_t v2 = sub_100072CC4(&qword_1002E2400);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v8;
  }

  sub_100072CC4(&qword_1002E23F0);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    goto LABEL_9;
  }
  uint64_t v10 = (char *)v5 + *(int *)(v2 + 48);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v28 = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100085CA8(v13, (uint64_t)v5, &qword_1002E2400);
    uint64_t v15 = *v5;
    uint64_t v16 = v5[1];
    unint64_t result = sub_100079A58(*v5, v16);
    if ((v18 & 1) != 0) {
      break;
    }
    unint64_t v19 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    id v20 = (uint64_t *)(v8[6] + 16 * result);
    uint64_t *v20 = v15;
    v20[1] = v16;
    uint64_t v21 = v8[7];
    uint64_t v22 = type metadata accessor for Date(0LL);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v22 - 8) + 32LL))( v21 + *(void *)(*(void *)(v22 - 8) + 72LL) * v19,  v10,  v22);
    uint64_t v23 = v8[2];
    BOOL v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_12;
    }
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      uint64_t v26 = v28;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

id KTOptIOValidator.evaluateCloudData(application:)(uint64_t a1, void *a2)
{
  id v3 = v2;
  uint64_t v39 = a1;
  uint64_t v40 = a2;
  uint64_t v4 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v38 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v37 = (uint64_t)&v37 - v7;
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for KTOptIOValidator.OptInResult(0LL);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0x68LL))(v13);
  uint64_t v17 = v41;
  (*(void (**)(uint64_t, uint64_t, void *))((swift_isaMask & *v2) + 0xA8LL))(v16, v39, v40);
  swift_bridgeObjectRelease(v16);
  if (!v17)
  {
    uint64_t v40 = v2;
    uint64_t v41 = 0LL;
    uint64_t v18 = v37;
    id v3 = v38;
    uint64_t v19 = (uint64_t)v15;
    if ((v15[8] & 1) != 0)
    {
      uint64_t v20 = type metadata accessor for KTError(0LL);
      unint64_t v21 = sub_1000E29D8();
      swift_allocError(v20, v21, 0LL, 0LL);
      uint64_t v23 = v22;
      uint64_t v24 = v20;
      uint64_t v25 = 7LL;
LABEL_6:
      uint64_t v33 = swift_storeEnumTagMultiPayload(v23, v24, v25);
      swift_willThrow(v33);
      sub_1000E2958(v19);
      return v3;
    }

    uint64_t v26 = v9;
    uint64_t v27 = *(void *)v15;
    sub_100085CA8((uint64_t)&v15[*(int *)(v12 + 20)], v37, (uint64_t *)&unk_1002DF740);
    uint64_t v28 = v26;
    uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
    if (v29(v18, 1LL, v8) == 1)
    {
      sub_10009691C(v18);
      uint64_t v30 = type metadata accessor for KTError(0LL);
      unint64_t v31 = sub_1000E29D8();
      swift_allocError(v30, v31, 0LL, 0LL);
      uint64_t v23 = v32;
      uint64_t v24 = v30;
      uint64_t v25 = 8LL;
      goto LABEL_6;
    }

    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 32))(v11, v18, v8);
    (*(void (**)(id, char *, uint64_t))(v28 + 16))(v3, v11, v8);
    (*(void (**)(id, void, uint64_t, uint64_t))(v28 + 56))(v3, 0LL, 1LL, v8);
    if (v29((uint64_t)v3, 1LL, v8) == 1)
    {
      Class isa = 0LL;
    }

    else
    {
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(id, uint64_t))(v28 + 8))(v3, v8);
    }

    uint64_t v36 = v40;
    id v3 = [objc_allocWithZone(KTOptIOValidatorResult) initWithState:v27 timestamp:isa];

    (*(void (**)(uint64_t, id))((swift_isaMask & *v36) + 0xC8LL))(v27, v3);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v8);
    sub_1000E2958(v19);
  }

  return v3;
}

id sub_1000DFA28(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v9 = v8;
  id v10 = a1;
  uint64_t v11 = (void *)a5(v7, v9);
  swift_bridgeObjectRelease(v9);

  return v11;
}

void sub_1000DFAE0(id a1, void *a2)
{
  uint64_t v5 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x68LL))();
  uint64_t v6 = v5;
  if (!((unint64_t)v5 >> 62))
  {
    uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v7) {
      goto LABEL_3;
    }
LABEL_17:
    swift_bridgeObjectRelease(v6);
    uint64_t v28 = a2;
    goto LABEL_18;
  }

  if (v5 >= 0) {
    v5 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v5);
  if (!v7) {
    goto LABEL_17;
  }
LABEL_3:
  if (v7 < 1)
  {
    __break(1u);
    goto LABEL_37;
  }

  for (uint64_t i = 0LL; i != v7; ++i)
  {
    if ((v6 & 0xC000000000000001LL) != 0) {
      id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v6);
    }
    else {
      id v11 = *(id *)(v6 + 8 * i + 32);
    }
    uint64_t v12 = v11;
    id v13 = [v11 state];
    if (v13 == a1)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
      uint64_t v9 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
      uint64_t v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v12);
      specialized ContiguousArray._endMutation()(v10);
    }

    else
    {
    }
  }

  swift_bridgeObjectRelease(v6);
  uint64_t v28 = a2;
LABEL_18:
  if (((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000LL) == 0)
  {
    uint64_t v14 = _swiftEmptyArrayStorage[2];
    swift_retain(_swiftEmptyArrayStorage);
    if (!v14)
    {
LABEL_34:
      uint64_t v16 = _swiftEmptyArrayStorage;
LABEL_35:
      swift_release_n(_swiftEmptyArrayStorage, 2LL);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v16);
      [v28 setUris:isa];

      return;
    }

    goto LABEL_20;
  }

uint64_t KTOptIOValidator.urisNeedOptIn(application:)()
{
  id v3 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xC0LL))();
  if (v1) {
    return (uint64_t)v2;
  }
  uint64_t v4 = v3;
  if ([v3 state] == (id)1)
  {

    return (uint64_t)_swiftEmptyArrayStorage;
  }

  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x68LL))();
  uint64_t v6 = result;
  if (!((unint64_t)result >> 62))
  {
    uint64_t v7 = *(void *)((result & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v7) {
      goto LABEL_6;
    }
LABEL_20:
    swift_bridgeObjectRelease(v6);
    uint64_t v27 = v4;
    goto LABEL_21;
  }

  if (result >= 0) {
    result &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter(result);
  uint64_t v7 = result;
  if (!result) {
    goto LABEL_20;
  }
LABEL_6:
  if (v7 < 1)
  {
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v8 = v4;
  for (uint64_t i = 0LL; i != v7; ++i)
  {
    if ((v6 & 0xC000000000000001LL) != 0) {
      id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v6);
    }
    else {
      id v12 = *(id *)(v6 + 8 * i + 32);
    }
    id v13 = v12;
    if ([v12 state])
    {
    }

    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(0LL);
      uint64_t v10 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
      uint64_t v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v13);
      specialized ContiguousArray._endMutation()(v11);
    }
  }

  swift_bridgeObjectRelease(v6);
  uint64_t v27 = v8;
LABEL_21:
  if (((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000LL) == 0)
  {
    uint64_t v14 = _swiftEmptyArrayStorage[2];
    uint64_t result = swift_retain(_swiftEmptyArrayStorage);
    if (!v14)
    {
LABEL_37:
      uint64_t v2 = _swiftEmptyArrayStorage;
LABEL_38:

      swift_release_n(_swiftEmptyArrayStorage, 2LL);
      return (uint64_t)v2;
    }

    goto LABEL_23;
  }

void KTOptIOValidator.init()()
{
}

id KTOptIOValidator.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KTOptIOValidator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for KTOptIOValidator.OptInResult(uint64_t a1)
{
  uint64_t result = qword_1002EC8A0;
  if (!qword_1002EC8A0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KTOptIOValidator.OptInResult);
  }
  return result;
}

uint64_t type metadata accessor for KTOptIOValidator()
{
  return objc_opt_self(&OBJC_CLASS____TtC13transparencyd16KTOptIOValidator);
}

uint64_t sub_1000E027C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_1000A4780(v2);
    *a1 = v2;
  }

  uint64_t v4 = *(void *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  sub_1000E02F4(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

void sub_1000E02F4(uint64_t *a1)
{
  uint64_t v2 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  uint64_t v3 = __chkstk_darwin(v2);
  v218 = (char *)&v196 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v196 - v6;
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v196 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  v209 = (char *)&v196 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v196 - v14;
  __chkstk_darwin(v13);
  id v17 = (char *)&v196 - v16;
  uint64_t v18 = type metadata accessor for Date(0LL);
  v224 = *(void **)(v18 - 8);
  uint64_t v19 = __chkstk_darwin(v18);
  v217 = (char *)&v196 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v19);
  v223 = (char *)&v196 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  unint64_t v25 = (char *)&v196 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  v213 = (char *)&v196 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  v204 = (char *)&v196 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  v221 = (char *)&v196 - v31;
  __chkstk_darwin(v30);
  v205 = (char *)&v196 - v32;
  Swift::Int v33 = a1[1];
  Swift::Int v34 = _minimumMergeRunLength(_:)(v33);
  if (v34 >= v33)
  {
    if (v33 < 0) {
      goto LABEL_167;
    }
    if (v33) {
      sub_1000E11CC(0LL, v33, 1LL, a1);
    }
    return;
  }

  if (v33 >= 0) {
    uint64_t v35 = v33;
  }
  else {
    uint64_t v35 = v33 + 1;
  }
  if (v33 < -1) {
    goto LABEL_166;
  }
  v208 = v25;
  v202 = v17;
  v203 = v15;
  Swift::Int v211 = v33;
  Swift::Int v201 = v34;
  v197 = a1;
  if (v33 <= 1)
  {
    uint64_t v40 = (char *)_swiftEmptyArrayStorage;
    uint64_t v225 = (uint64_t)_swiftEmptyArrayStorage;
    v214 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 32);
    uint64_t v39 = v10;
    if (v33 != 1)
    {
      unint64_t v44 = _swiftEmptyArrayStorage[2];
LABEL_133:
      uint64_t v188 = v215;
      if (v44 >= 2)
      {
        uint64_t v189 = *v197;
        do
        {
          unint64_t v190 = v44 - 2;
          if (v44 < 2) {
            goto LABEL_161;
          }
          if (!v189) {
            goto LABEL_174;
          }
          uint64_t v191 = *(void *)&v40[16 * v190 + 32];
          uint64_t v192 = *(void *)&v40[16 * v44 + 24];
          sub_1000E1550( (void **)(v189 + 8 * v191),  (void **)(v189 + 8LL * *(void *)&v40[16 * v44 + 16]),  (void **)(v189 + 8 * v192),  v214);
          if (v188) {
            break;
          }
          if (v192 < v191) {
            goto LABEL_162;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v40) & 1) == 0) {
            uint64_t v40 = sub_1000A3E38((uint64_t)v40);
          }
          if (v190 >= *((void *)v40 + 2)) {
            goto LABEL_163;
          }
          v193 = &v40[16 * v190 + 32];
          *(void *)v193 = v191;
          *((void *)v193 + 1) = v192;
          unint64_t v194 = *((void *)v40 + 2);
          if (v44 > v194) {
            goto LABEL_164;
          }
          memmove(&v40[16 * v44 + 16], &v40[16 * v44 + 32], 16 * (v194 - v44));
          *((void *)v40 + 2) = v194 - 1;
          unint64_t v44 = v194 - 1;
        }

        while (v194 > 2);
      }

LABEL_144:
      uint64_t v195 = swift_bridgeObjectRelease(v40);
      *(void *)((v225 & 0xFFFFFFFFFFFFF8LL) + 0x10) = 0LL;
      specialized Array._endMutation()(v195);
      swift_bridgeObjectRelease(v225);
      return;
    }
  }

  else
  {
    uint64_t v36 = v35 >> 1;
    unint64_t v37 = sub_1000E31B4();
    uint64_t v38 = static Array._allocateBufferUninitialized(minimumCapacity:)(v36, v37);
    *(void *)((v38 & 0xFFFFFFFFFFFFFF8LL) + 0x10) = v36;
    v214 = (void **)((v38 & 0xFFFFFFFFFFFFFF8LL) + 32);
    uint64_t v225 = v38;
    uint64_t v39 = v10;
  }

  uint64_t v41 = *a1;
  uint64_t v42 = 0LL;
  uint64_t v199 = *a1 + 16;
  uint64_t v198 = v41 - 8;
  uint64_t v40 = (char *)_swiftEmptyArrayStorage;
  v216 = v7;
  uint64_t v207 = (uint64_t)v39;
  Swift::Int v43 = v211;
  uint64_t v220 = v41;
  while (2)
  {
    Swift::Int v45 = v42 + 1;
    uint64_t v210 = v42;
    if (v42 + 1 >= v43)
    {
      unint64_t v57 = (char *)v211;
      uint64_t v56 = (uint64_t)v218;
      goto LABEL_54;
    }

    uint64_t v46 = *(void **)(v41 + 8 * v42);
    uint64_t v47 = (char *)*(id *)(v41 + 8 * v45);
    unint64_t v48 = v46;
    id v49 = [v47 smtTimestamp];
    v206 = v47;
    if (!v49)
    {
      uint64_t v54 = (uint64_t)v202;
      v222 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v224[7];
      uint64_t v55 = v222(v202, 1LL, 1LL, v18);
      uint64_t v56 = (uint64_t)v218;
      goto LABEL_21;
    }

    uint64_t v50 = v49;
    v219 = v48;
    uint64_t v51 = v221;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v49);

    uint64_t v52 = v224;
    uint64_t v53 = (void (*)(char *, char *, uint64_t))v224[4];
    uint64_t v54 = (uint64_t)v202;
    v53(v202, v51, v18);
    v222 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v52[7];
    v222((char *)v54, 0LL, 1LL, v18);
    uint64_t v55 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v52[6])(v54, 1LL, v18);
    if ((_DWORD)v55 == 1)
    {
      uint64_t v56 = (uint64_t)v218;
      unint64_t v48 = v219;
LABEL_21:
      static Date.distantPast.getter(v55);
      sub_10009691C(v54);
      goto LABEL_23;
    }

    v53(v205, (char *)v54, v18);
    uint64_t v56 = (uint64_t)v218;
    unint64_t v48 = v219;
LABEL_23:
    id v58 = [v48 smtTimestamp];
    if (!v58)
    {
      uint64_t v63 = (uint64_t)v203;
      uint64_t v65 = v222(v203, 1LL, 1LL, v18);
      goto LABEL_27;
    }

    BOOL v59 = v58;
    unint64_t v60 = v221;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v58);

    uint64_t v61 = v48;
    uint64_t v62 = v224;
    uint64_t v63 = (uint64_t)v203;
    v219 = (char *)v224[4];
    ((void (*)(char *, char *, uint64_t))v219)(v203, v60, v18);
    v222((char *)v63, 0LL, 1LL, v18);
    uint64_t v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v62[6];
    unint64_t v48 = v61;
    uint64_t v65 = v64(v63, 1LL, v18);
    if ((_DWORD)v65 == 1)
    {
LABEL_27:
      unint64_t v66 = v204;
      static Date.distantPast.getter(v65);
      sub_10009691C(v63);
      goto LABEL_28;
    }

    unint64_t v66 = v204;
    ((void (*)(char *, uint64_t, uint64_t))v219)(v204, v63, v18);
LABEL_28:
    id v67 = v205;
    LODWORD(v219) = static Date.< infix(_:_:)(v205, v66);
    int v68 = (void (*)(char *, uint64_t))v224[1];
    v68(v66, v18);
    v212 = v68;
    v68(v67, v18);

    if (v42 + 2 >= v211)
    {
      Swift::Int v45 = v42 + 2;
      unint64_t v57 = (char *)v211;
      goto LABEL_46;
    }

    uint64_t v69 = v42;
    uint64_t v70 = v42 + 2;
    v200 = v40;
    id v71 = (id *)(v199 + 8 * v69);
    while (1)
    {
      uint64_t v72 = *(v71 - 1);
      id v73 = *v71;
      id v74 = v72;
      id v75 = [v73 smtTimestamp];
      if (v75)
      {
        uint64_t v76 = v75;
        uint64_t v77 = v221;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v75);

        unsigned int v78 = v224;
        id v79 = (void (*)(char *, char *, uint64_t))v224[4];
        uint64_t v80 = (uint64_t)v209;
        v79(v209, v77, v18);
        v222((char *)v80, 0LL, 1LL, v18);
        uint64_t v81 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v78[6])(v80, 1LL, v18);
        if ((_DWORD)v81 != 1)
        {
          v79(v213, (char *)v80, v18);
          goto LABEL_35;
        }
      }

      else
      {
        uint64_t v80 = (uint64_t)v209;
        uint64_t v81 = v222(v209, 1LL, 1LL, v18);
      }

      static Date.distantPast.getter(v81);
      sub_10009691C(v80);
LABEL_35:
      id v82 = [v74 smtTimestamp];
      if (v82)
      {
        uint64_t v83 = v82;
        unsigned int v84 = v221;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v82);

        uint64_t v85 = v224;
        uint64_t v86 = (void (*)(uint64_t, char *, uint64_t))v224[4];
        uint64_t v87 = v207;
        v86(v207, v84, v18);
        v222((char *)v87, 0LL, 1LL, v18);
        unint64_t v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v85[6];
        uint64_t v89 = v87;
        uint64_t v90 = v88(v87, 1LL, v18);
        if ((_DWORD)v90 != 1)
        {
          uint64_t v91 = v208;
          v86((uint64_t)v208, (char *)v89, v18);
          goto LABEL_40;
        }
      }

      else
      {
        uint64_t v89 = v207;
        uint64_t v90 = v222((char *)v207, 1LL, 1LL, v18);
      }

      uint64_t v91 = v208;
      static Date.distantPast.getter(v90);
      sub_10009691C(v89);
LABEL_40:
      id v92 = v213;
      int v93 = static Date.< infix(_:_:)(v213, v91);
      os_log_type_t v94 = v91;
      int v95 = v93;
      uint64_t v96 = v212;
      v212(v94, v18);
      v96(v92, v18);

      ++v71;
      if (v211 == ++v70)
      {
        unint64_t v57 = (char *)v211;
        Swift::Int v45 = v211;
        uint64_t v40 = v200;
        uint64_t v56 = (uint64_t)v218;
        goto LABEL_45;
      }
    }

    uint64_t v40 = v200;
    unint64_t v57 = (char *)v211;
    uint64_t v56 = (uint64_t)v218;
    Swift::Int v45 = v70;
LABEL_45:
    uint64_t v42 = v210;
LABEL_46:
    uint64_t v41 = v220;
    if ((v219 & 1) != 0)
    {
      if (v45 < v42) {
        goto LABEL_168;
      }
      Swift::Int v97 = v45;
      if (v42 < v45)
      {
        id v98 = (uint64_t *)(v198 + 8 * v45);
        uint64_t v99 = v42;
        unint64_t v100 = (uint64_t *)(v220 + 8 * v42);
        do
        {
          if (v99 != --v97)
          {
            if (!v41) {
              goto LABEL_173;
            }
            uint64_t v101 = *v100;
            *unint64_t v100 = *v98;
            *id v98 = v101;
          }

          ++v99;
          --v98;
          ++v100;
        }

        while (v99 < v97);
      }
    }

LABEL_54:
    if (__OFSUB__(v45, v42)) {
      goto LABEL_165;
    }
    if (v45 - v42 >= v201)
    {
LABEL_81:
      if (v45 < v42) {
        goto LABEL_160;
      }
      goto LABEL_82;
    }

    if (__OFADD__(v42, v201)) {
      goto LABEL_169;
    }
    else {
      unint64_t v102 = (char *)(v42 + v201);
    }
    if ((uint64_t)v102 >= v42)
    {
      v200 = v40;
      uint64_t v103 = (void (*)(char *, uint64_t))(v198 + 8 * v45);
      v206 = v102;
      while (2)
      {
        v219 = (char *)v45;
        uint64_t v104 = *(void **)(v41 + 8 * v45);
        unint64_t v105 = (char *)v42;
        v212 = v103;
        uint64_t v106 = (char *)v103;
        while (2)
        {
          uint64_t v107 = *(void **)v106;
          uint64_t v108 = v104;
          id v109 = v107;
          v222 = v108;
          id v110 = [v108 smtTimestamp];
          if (v110)
          {
            id v111 = v110;
            uint64_t v112 = v221;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v110);

            uint64_t v113 = v224;
            uint64_t v114 = (void (*)(char *, char *, uint64_t))v224[4];
            uint64_t v115 = (uint64_t)v216;
            v114(v216, v112, v18);
            char v116 = (void (*)(uint64_t, void, uint64_t, uint64_t))v113[7];
            v116(v115, 0LL, 1LL, v18);
            uint64_t v117 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v113[6])(v115, 1LL, v18);
            if ((_DWORD)v117 != 1)
            {
              v114(v223, (char *)v115, v18);
              goto LABEL_72;
            }
          }

          else
          {
            char v116 = (void (*)(uint64_t, void, uint64_t, uint64_t))v224[7];
            uint64_t v115 = (uint64_t)v216;
            uint64_t v117 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v116)(v216, 1LL, 1LL, v18);
          }

          static Date.distantPast.getter(v117);
          sub_10009691C(v115);
LABEL_72:
          id v118 = [v109 smtTimestamp];
          uint64_t v119 = v217;
          if (v118)
          {
            uint64_t v120 = v118;
            uint64_t v121 = v18;
            uint64_t v122 = v221;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v118);

            char v123 = v105;
            id v124 = v109;
            uint64_t v125 = v224;
            uint64_t v126 = v122;
            uint64_t v18 = v121;
            uint64_t v127 = (void (*)(uint64_t, char *, uint64_t))v224[4];
            v127(v56, v126, v18);
            v116(v56, 0LL, 1LL, v18);
            uint64_t v128 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v125[6];
            id v109 = v124;
            unint64_t v105 = v123;
            uint64_t v129 = v128(v56, 1LL, v18);
            if ((_DWORD)v129 != 1)
            {
              v127((uint64_t)v119, (char *)v56, v18);
              goto LABEL_77;
            }
          }

          else
          {
            uint64_t v129 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v116)(v56, 1LL, 1LL, v18);
          }

          static Date.distantPast.getter(v129);
          sub_10009691C(v56);
LABEL_77:
          uint64_t v130 = v223;
          char v131 = static Date.< infix(_:_:)(v223, v119);
          uint64_t v132 = (void (*)(char *, uint64_t))v224[1];
          v132(v119, v18);
          v132(v130, v18);

          if ((v131 & 1) != 0)
          {
            uint64_t v41 = v220;
            if (!v220) {
              goto LABEL_171;
            }
            uint64_t v133 = *(void **)v106;
            uint64_t v104 = (void *)*((void *)v106 + 1);
            *(void *)uint64_t v106 = v104;
            *((void *)v106 + 1) = v133;
            v106 -= 8;
            ++v105;
            uint64_t v56 = (uint64_t)v218;
            if (v219 == v105) {
              goto LABEL_65;
            }
            continue;
          }

          break;
        }

        uint64_t v56 = (uint64_t)v218;
        uint64_t v41 = v220;
LABEL_65:
        Swift::Int v45 = (Swift::Int)(v219 + 1);
        uint64_t v103 = (void (*)(char *, uint64_t))((char *)v212 + 8);
        uint64_t v42 = v210;
        if (v219 + 1 != v206) {
          continue;
        }
        break;
      }

      Swift::Int v45 = (Swift::Int)v206;
      uint64_t v40 = v200;
LABEL_82:
      v219 = (char *)v45;
      if ((swift_isUniquelyReferenced_nonNull_native(v40) & 1) == 0) {
        uint64_t v40 = sub_1000A3C98(0LL, *((void *)v40 + 2) + 1LL, 1, v40);
      }
      unint64_t v135 = *((void *)v40 + 2);
      unint64_t v134 = *((void *)v40 + 3);
      unint64_t v44 = v135 + 1;
      uint64_t v41 = v220;
      if (v135 >= v134 >> 1)
      {
        v187 = sub_1000A3C98((char *)(v134 > 1), v135 + 1, 1, v40);
        uint64_t v41 = v220;
        uint64_t v40 = v187;
      }

      *((void *)v40 + 2) = v44;
      uint64_t v136 = v40 + 32;
      id v137 = &v40[16 * v135 + 32];
      unint64_t v138 = v219;
      *(void *)id v137 = v42;
      *((void *)v137 + 1) = v138;
      if (v135)
      {
        while (2)
        {
          unint64_t v139 = v44 - 1;
          if (v44 >= 4)
          {
            uint64_t v144 = &v136[16 * v44];
            uint64_t v145 = *((void *)v144 - 8);
            uint64_t v146 = *((void *)v144 - 7);
            BOOL v150 = __OFSUB__(v146, v145);
            uint64_t v147 = v146 - v145;
            if (v150) {
              goto LABEL_149;
            }
            uint64_t v149 = *((void *)v144 - 6);
            uint64_t v148 = *((void *)v144 - 5);
            BOOL v150 = __OFSUB__(v148, v149);
            uint64_t v142 = v148 - v149;
            char v143 = v150;
            if (v150) {
              goto LABEL_150;
            }
            unint64_t v151 = v44 - 2;
            uint64_t v152 = &v136[16 * v44 - 32];
            uint64_t v154 = *(void *)v152;
            uint64_t v153 = *((void *)v152 + 1);
            BOOL v150 = __OFSUB__(v153, v154);
            uint64_t v155 = v153 - v154;
            if (v150) {
              goto LABEL_151;
            }
            BOOL v150 = __OFADD__(v142, v155);
            uint64_t v156 = v142 + v155;
            if (v150) {
              goto LABEL_153;
            }
            if (v156 >= v147)
            {
              v174 = &v136[16 * v139];
              uint64_t v176 = *(void *)v174;
              uint64_t v175 = *((void *)v174 + 1);
              BOOL v150 = __OFSUB__(v175, v176);
              uint64_t v177 = v175 - v176;
              if (v150) {
                goto LABEL_159;
              }
              BOOL v167 = v142 < v177;
            }

            else
            {
LABEL_100:
              if ((v143 & 1) != 0) {
                goto LABEL_152;
              }
              unint64_t v151 = v44 - 2;
              unint64_t v157 = &v136[16 * v44 - 32];
              uint64_t v159 = *(void *)v157;
              uint64_t v158 = *((void *)v157 + 1);
              BOOL v160 = __OFSUB__(v158, v159);
              uint64_t v161 = v158 - v159;
              char v162 = v160;
              if (v160) {
                goto LABEL_154;
              }
              unint64_t v163 = &v136[16 * v139];
              uint64_t v165 = *(void *)v163;
              uint64_t v164 = *((void *)v163 + 1);
              BOOL v150 = __OFSUB__(v164, v165);
              uint64_t v166 = v164 - v165;
              if (v150) {
                goto LABEL_156;
              }
              if (__OFADD__(v161, v166)) {
                goto LABEL_158;
              }
              if (v161 + v166 < v142) {
                goto LABEL_112;
              }
              BOOL v167 = v142 < v166;
            }

            if (v167) {
              unint64_t v139 = v151;
            }
          }

          else
          {
            if (v44 == 3)
            {
              uint64_t v141 = *((void *)v40 + 4);
              uint64_t v140 = *((void *)v40 + 5);
              BOOL v150 = __OFSUB__(v140, v141);
              uint64_t v142 = v140 - v141;
              char v143 = v150;
              goto LABEL_100;
            }

            uint64_t v168 = *((void *)v40 + 4);
            uint64_t v169 = *((void *)v40 + 5);
            BOOL v150 = __OFSUB__(v169, v168);
            uint64_t v161 = v169 - v168;
            char v162 = v150;
LABEL_112:
            if ((v162 & 1) != 0) {
              goto LABEL_155;
            }
            v170 = &v136[16 * v139];
            uint64_t v172 = *(void *)v170;
            uint64_t v171 = *((void *)v170 + 1);
            BOOL v150 = __OFSUB__(v171, v172);
            uint64_t v173 = v171 - v172;
            if (v150) {
              goto LABEL_157;
            }
            if (v173 < v161) {
              goto LABEL_14;
            }
          }

          unint64_t v178 = v139 - 1;
          if (v139 - 1 >= v44)
          {
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
LABEL_160:
            __break(1u);
LABEL_161:
            __break(1u);
LABEL_162:
            __break(1u);
LABEL_163:
            __break(1u);
LABEL_164:
            __break(1u);
LABEL_165:
            __break(1u);
LABEL_166:
            __break(1u);
LABEL_167:
            __break(1u);
LABEL_168:
            __break(1u);
LABEL_169:
            __break(1u);
            goto LABEL_170;
          }

          if (!v41) {
            goto LABEL_172;
          }
          unint64_t v179 = v40;
          uint64_t v180 = &v136[16 * v178];
          uint64_t v181 = *(void *)v180;
          v182 = v136;
          int64_t v183 = &v136[16 * v139];
          uint64_t v184 = *((void *)v183 + 1);
          uint64_t v185 = v215;
          sub_1000E1550( (void **)(v41 + 8LL * *(void *)v180),  (void **)(v41 + 8LL * *(void *)v183),  (void **)(v41 + 8 * v184),  v214);
          uint64_t v215 = v185;
          if (v185)
          {
            uint64_t v40 = v179;
            goto LABEL_144;
          }

          if (v184 < v181) {
            goto LABEL_146;
          }
          if (v139 > *((void *)v179 + 2)) {
            goto LABEL_147;
          }
          *(void *)uint64_t v180 = v181;
          *(void *)&v182[16 * v178 + 8] = v184;
          unint64_t v186 = *((void *)v179 + 2);
          if (v139 >= v186) {
            goto LABEL_148;
          }
          uint64_t v40 = v179;
          unint64_t v44 = v186 - 1;
          memmove(v183, v183 + 16, 16 * (v186 - 1 - v139));
          uint64_t v136 = v182;
          *((void *)v179 + 2) = v186 - 1;
          uint64_t v41 = v220;
          if (v186 <= 2) {
            goto LABEL_14;
          }
          continue;
        }
      }

      unint64_t v44 = 1LL;
LABEL_14:
      Swift::Int v43 = v211;
      uint64_t v42 = (uint64_t)v219;
      continue;
    }

    break;
  }
        }

        else
        {
          uint64_t v72 = v12;
          id v73 = v13;
          uint64_t v69 = 0LL;
          id v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "kt_hexString"));
          id v75 = (void *)objc_claimAutoreleasedReturnValue([v17 deviceID]);
          uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v75, "kt_hexString"));
          int v68 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  @"TransparencyErrorVerify",  -94LL,  @"No transparent data for accountKey %@ and deviceId %@",  v74,  v76));

          if (qword_1002EE8E8 != -1) {
            dispatch_once(&qword_1002EE8E8, &stru_100283CE0);
          }
          uint64_t v13 = v73;
          uint64_t v77 = (void *)qword_1002EE8F0;
          if (os_log_type_enabled((os_log_t)qword_1002EE8F0, OS_LOG_TYPE_ERROR))
          {
            unsigned int v78 = v77;
            id v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "kt_hexString"));
            uint64_t v80 = (void *)objc_claimAutoreleasedReturnValue([v17 deviceID]);
            uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "kt_hexString"));
            *(_DWORD *)buf = 138412546;
            char v123 = v79;
            id v124 = 2112;
            uint64_t v125 = (uint64_t)v81;
            _os_log_impl( (void *)&_mh_execute_header,  v78,  OS_LOG_TYPE_ERROR,  "No transparent data for accountKey %@ and deviceId %@",  buf,  0x16u);

            uint64_t v13 = v73;
          }

          id v82 = (void *)objc_claimAutoreleasedReturnValue( -[KTTransparentData failureResult:loggableData:]( v111,  "failureResult:loggableData:",  v11,  v17));
          [v13 addObject:v82];

          [v17 setResult:0];
          [v17 setFailure:v68];
          uint64_t v15 = off_100275000;
          if (!v110)
          {
            uint64_t v14 = v68;
            uint64_t v70 = v106;
            uint64_t v12 = v72;
            goto LABEL_56;
          }

          uint64_t v70 = v106;
          uint64_t v12 = v72;
          if (v68)
          {
            uint64_t v14 = v68;
            *id v110 = v14;
            goto LABEL_56;
          }
        }

        uint64_t v14 = v68;
LABEL_56:

        uint64_t v16 = v70 + 1;
      }

      while (v16 != v103);
      uint64_t v103 = [obj countByEnumeratingWithState:&v118 objects:v131 count:16];
      if (!v103)
      {
LABEL_58:

        if ([v13 count]) {
          int v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](&OBJC_CLASS___NSArray, "arrayWithArray:", v13));
        }
        else {
          int v93 = 0LL;
        }
        uint64_t v10 = v99;
        goto LABEL_70;
      }
    }
  }

  os_log_type_t v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "kt_hexString"));
  uint64_t v14 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  @"TransparencyErrorVerify",  -93LL,  @"No transparent data for accountKey %@",  v94));

  +[KTTransparentData addResult:failure:toLoggableDatas:]( &OBJC_CLASS___KTTransparentData,  "addResult:failure:toLoggableDatas:",  0LL,  v14,  v10);
  if (a6 && v14) {
    *a6 = v14;
  }
  if (qword_1002EE8E8 != -1) {
    dispatch_once(&qword_1002EE8E8, &stru_100283CC0);
  }
  int v95 = (void *)qword_1002EE8F0;
  if (os_log_type_enabled((os_log_t)qword_1002EE8F0, OS_LOG_TYPE_ERROR))
  {
    uint64_t v96 = v95;
    Swift::Int v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "kt_hexString"));
    *(_DWORD *)buf = 138412290;
    char v123 = v97;
    _os_log_impl( (void *)&_mh_execute_header,  v96,  OS_LOG_TYPE_ERROR,  "No transparent data for accountKey %@",  buf,  0xCu);
  }

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(-[KTTransparentData failureResult:loggableData:](v111, "failureResult:loggableData:", v11, 0LL));
  uint64_t v132 = v13;
  int v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v132, 1LL));
LABEL_70:

  return v93;
}

LABEL_170:
  __break(1u);
LABEL_171:
  __break(1u);
LABEL_172:
  __break(1u);
LABEL_173:
  __break(1u);
LABEL_174:
  __break(1u);
}

void sub_1000E11CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v48 = a1;
  uint64_t v7 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v52 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v46 - v10;
  uint64_t v12 = type metadata accessor for Date(0LL);
  id v58 = *(void **)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v55 = (char *)&v46 - v17;
  __chkstk_darwin(v16);
  unint64_t v57 = (char *)&v46 - v18;
  uint64_t v47 = a2;
  if (a3 != a2)
  {
    uint64_t v53 = *a4;
    uint64_t v19 = v53 + 8 * a3 - 8;
    uint64_t v50 = v11;
    uint64_t v51 = v15;
LABEL_5:
    uint64_t v20 = *(void **)(v53 + 8 * a3);
    uint64_t v21 = v48;
    uint64_t v49 = v19;
    uint64_t v54 = a3;
    while (1)
    {
      uint64_t v22 = *(void **)v19;
      id v23 = v20;
      id v24 = v22;
      id v56 = v23;
      id v25 = [v23 smtTimestamp];
      if (v25)
      {
        uint64_t v26 = v25;
        uint64_t v27 = v55;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v25);

        uint64_t v28 = v58;
        uint64_t v29 = (void (*)(char *, char *, uint64_t))v58[4];
        v29(v11, v27, v12);
        uint64_t v30 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v28[7];
        v30(v11, 0LL, 1LL, v12);
        uint64_t v31 = ((uint64_t (*)(char *, uint64_t, uint64_t))v28[6])(v11, 1LL, v12);
        if ((_DWORD)v31 != 1)
        {
          v29(v57, v11, v12);
          goto LABEL_11;
        }
      }

      else
      {
        uint64_t v30 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v58[7];
        uint64_t v31 = v30(v11, 1LL, 1LL, v12);
      }

      static Date.distantPast.getter(v31);
      sub_10009691C((uint64_t)v11);
LABEL_11:
      uint64_t v32 = v24;
      id v33 = [v24 smtTimestamp];
      if (v33)
      {
        Swift::Int v34 = v33;
        uint64_t v35 = v55;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v33);

        uint64_t v36 = v58;
        unint64_t v37 = (void (*)(char *, char *, uint64_t))v58[4];
        uint64_t v38 = (uint64_t)v52;
        v37(v52, v35, v12);
        v30((char *)v38, 0LL, 1LL, v12);
        uint64_t v39 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v36[6])(v38, 1LL, v12);
        if ((_DWORD)v39 != 1)
        {
          uint64_t v40 = v51;
          v37(v51, (char *)v38, v12);
          goto LABEL_16;
        }
      }

      else
      {
        uint64_t v38 = (uint64_t)v52;
        uint64_t v39 = v30(v52, 1LL, 1LL, v12);
      }

      uint64_t v40 = v51;
      static Date.distantPast.getter(v39);
      sub_10009691C(v38);
LABEL_16:
      uint64_t v41 = v57;
      char v42 = static Date.< infix(_:_:)(v57, v40);
      Swift::Int v43 = (void (*)(char *, uint64_t))v58[1];
      v43(v40, v12);
      v43(v41, v12);

      uint64_t v44 = v54;
      uint64_t v11 = v50;
      if ((v42 & 1) == 0) {
        goto LABEL_4;
      }
      if (!v53)
      {
        __break(1u);
        return;
      }

      Swift::Int v45 = *(void **)v19;
      uint64_t v20 = *(void **)(v19 + 8);
      *(void *)uint64_t v19 = v20;
      *(void *)(v19 + 8) = v45;
      v19 -= 8LL;
      if (v44 == ++v21)
      {
LABEL_4:
        a3 = v44 + 1;
        uint64_t v19 = v49 + 8;
        if (a3 == v47) {
          return;
        }
        goto LABEL_5;
      }
    }
  }

uint64_t sub_1000E1550(void **a1, void **a2, void **a3, void **a4)
{
  uint64_t v8 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  uint64_t v9 = __chkstk_darwin(v8);
  int v95 = (char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v89 = (char *)&v87 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  id v92 = (char *)&v87 - v14;
  __chkstk_darwin(v13);
  uint64_t v91 = (char *)&v87 - v15;
  uint64_t v16 = type metadata accessor for Date(0LL);
  uint64_t v99 = *(void **)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v90 = (char *)&v87 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  os_log_type_t v94 = (char *)&v87 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  id v23 = (char *)&v87 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v96 = (char *)&v87 - v25;
  __chkstk_darwin(v24);
  Swift::Int v97 = (char *)&v87 - v26;
  uint64_t v27 = (char *)a2 - (char *)a1;
  uint64_t v28 = (char *)a2 - (char *)a1 + 7;
  uint64_t v29 = v28 >> 3;
  int v93 = a3;
  uint64_t v30 = (char *)a3 - (char *)a2;
  uint64_t v31 = v30 / 8;
  if (v28 >> 3 < v30 / 8)
  {
    uint64_t v32 = a1;
    if (a4 != a1 || &a1[v29] <= a4) {
      memmove(a4, a1, 8 * v29);
    }
    id v33 = &a4[v29];
    if (v27 >= 8)
    {
      Swift::Int v34 = a2;
      if (a2 < v93)
      {
        os_log_type_t v94 = v23;
        while (1)
        {
          id v98 = v32;
          uint64_t v35 = *a4;
          uint64_t v36 = (char *)*v34;
          id v37 = v35;
          int v95 = v36;
          id v38 = [v36 smtTimestamp];
          if (!v38) {
            break;
          }
          uint64_t v39 = v38;
          uint64_t v40 = v96;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v38);

          uint64_t v41 = v99;
          char v42 = (void (*)(char *, char *, uint64_t))v99[4];
          Swift::Int v43 = v91;
          v42(v91, v40, v16);
          uint64_t v44 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v41[7];
          v44(v43, 0LL, 1LL, v16);
          uint64_t v45 = ((uint64_t (*)(char *, uint64_t, uint64_t))v41[6])(v43, 1LL, v16);
          if ((_DWORD)v45 == 1)
          {
            id v23 = v94;
LABEL_14:
            static Date.distantPast.getter(v45);
            sub_10009691C((uint64_t)v43);
            goto LABEL_16;
          }

          v42(v97, v43, v16);
          id v23 = v94;
LABEL_16:
          id v46 = [v37 smtTimestamp];
          if (v46)
          {
            uint64_t v47 = v46;
            static Date._unconditionallyBridgeFromObjectiveC(_:)(v46);

            uint64_t v48 = v99;
            uint64_t v49 = (void (*)(void))v99[4];
            uint64_t v50 = (uint64_t)v92;
            v49();
            v44((char *)v50, 0LL, 1LL, v16);
            uint64_t v51 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v48[6];
            id v23 = v94;
            uint64_t v52 = v51(v50, 1LL, v16);
            if ((_DWORD)v52 != 1)
            {
              ((void (*)(char *, uint64_t, uint64_t))v49)(v23, v50, v16);
              goto LABEL_21;
            }
          }

          else
          {
            uint64_t v50 = (uint64_t)v92;
            uint64_t v52 = v44(v92, 1LL, 1LL, v16);
          }

          static Date.distantPast.getter(v52);
          sub_10009691C(v50);
LABEL_21:
          uint64_t v53 = v97;
          char v54 = static Date.< infix(_:_:)(v97, v23);
          uint64_t v55 = (void (*)(char *, uint64_t))v99[1];
          v55(v23, v16);
          v55(v53, v16);

          if ((v54 & 1) == 0)
          {
            id v56 = a4;
            unint64_t v57 = v98;
            BOOL v58 = v98 == a4++;
            if (v58) {
              goto LABEL_27;
            }
LABEL_26:
            *unint64_t v57 = *v56;
            goto LABEL_27;
          }

          id v56 = v34;
          unint64_t v57 = v98;
          BOOL v58 = v98 == v34++;
          if (!v58) {
            goto LABEL_26;
          }
LABEL_27:
          uint64_t v32 = v57 + 1;
          if (a4 >= v33 || v34 >= v93) {
            goto LABEL_29;
          }
        }

        uint64_t v44 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v99[7];
        Swift::Int v43 = v91;
        uint64_t v45 = v44(v91, 1LL, 1LL, v16);
        goto LABEL_14;
      }
    }

LABEL_59:
  if (v59 != a4
    || v59 >= (void **)((char *)a4
                      + (((char *)v33 - (char *)a4 + ((char *)v33 - (char *)a4 < 0 ? 7uLL : 0)) & 0xFFFFFFFFFFFFFFF8LL)))
  {
    memmove(v59, a4, 8 * (v33 - a4));
  }

  return 1LL;
}

Swift::Int sub_1000E1CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v46 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v45 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_100072CC4(&qword_1002E23F0);
  int v44 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v41 = v3;
  uint64_t v11 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  Swift::Int v43 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1LL << v11);
  }
  else {
    uint64_t v13 = -1LL;
  }
  unint64_t v14 = v13 & v12;
  int64_t v42 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  Swift::Int result = swift_retain(v8);
  int64_t v17 = 0LL;
  while (1)
  {
    if (v14)
    {
      unint64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_24;
    }

    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }

    if (v22 >= v42) {
      goto LABEL_36;
    }
    unint64_t v23 = v43[v22];
    ++v17;
    if (!v23)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v42) {
        goto LABEL_36;
      }
      unint64_t v23 = v43[v17];
      if (!v23) {
        break;
      }
    }

unint64_t sub_1000E205C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    Swift::Int result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v29, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v29, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        Swift::Int result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v13 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v14 = *(void *)(a2 + 48);
        uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
        uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
        if (v3 != v6 || v15 >= v16 + 1) {
          *uint64_t v15 = *v16;
        }
        uint64_t v17 = *(void *)(a2 + 56);
        uint64_t v18 = *(void *)(*(void *)(type metadata accessor for Date(0LL) - 8) + 72LL);
        int64_t v19 = v18 * v3;
        Swift::Int result = v17 + v18 * v3;
        int64_t v20 = v18 * v6;
        unint64_t v21 = v17 + v18 * v6 + v18;
        if (v19 < v20 || result >= v21)
        {
          Swift::Int result = swift_arrayInitWithTakeFrontToBack();
        }

        else
        {
          int64_t v3 = v6;
          if (v19 == v20) {
            goto LABEL_6;
          }
          Swift::Int result = swift_arrayInitWithTakeBackToFront();
        }

        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }

      if (v13 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      goto LABEL_12;
    }

void sub_1000E2258(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100079A58(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = v18[7];
        uint64_t v20 = type metadata accessor for Date(0LL);
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 40LL))( v19 + *(void *)(*(void *)(v20 - 8) + 72LL) * v12,  a1,  v20);
        return;
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1000E2424();
      goto LABEL_7;
    }

    sub_1000E1CF4(v15, a4 & 1);
    unint64_t v21 = sub_100079A58(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_1000E2394(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_1000E2394(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  unint64_t v8 = (void *)(a5[6] + 16 * a1);
  *unint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))( v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * a1,  a4,  v10);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1LL);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

void sub_1000E2424()
{
  uint64_t v34 = type metadata accessor for Date(0LL);
  uint64_t v1 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  int64_t v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100072CC4(&qword_1002E23F0);
  uint64_t v31 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v35 = v5;
  if (!v6)
  {
    swift_release(v4);
    uint64_t v29 = v35;
    uint64_t v28 = v31;
LABEL_28:
    *uint64_t v28 = v29;
    return;
  }

  uint64_t v7 = v5;
  unint64_t v8 = (void *)(v5 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)v8 >= v4 + 64 + 8 * v9)
  {
    memmove(v8, (const void *)(v4 + 64), 8 * v9);
    uint64_t v7 = v35;
  }

  uint64_t v32 = v4 + 64;
  int64_t v11 = 0LL;
  *(void *)(v7 + 16) = *(void *)(v4 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v4 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v4 + 64);
  int64_t v33 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v15 = v34;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v25 >= v33) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v32 + 8 * v25);
    ++v11;
    if (!v26)
    {
      int64_t v11 = v25 + 1;
      if (v25 + 1 >= v33) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v32 + 8 * v11);
      if (!v26) {
        break;
      }
    }

void *sub_1000E2680(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100072CC4(&qword_1002E23F8);
    int64_t v11 = (void *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }

  else
  {
    int64_t v11 = _swiftEmptyArrayStorage;
  }

  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v11 + 4 >= &a4[v8 + 4]) {
      memmove(v11 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0LL;
  }

  else
  {
    sub_100072CC4(&qword_1002DF260);
    swift_arrayInitWithCopy(v11 + 4);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_1000E27A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v5)
  {
    while (1)
    {
      unint64_t v6 = 0LL;
      while ((a1 & 0xC000000000000001LL) != 0)
      {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
LABEL_9:
        uint64_t v8 = v7;
        unint64_t v9 = v6 + 1;
        if (__OFADD__(v6, 1LL)) {
          goto LABEL_21;
        }
        uint64_t v10 = v5;
        id v11 = [v7 application];
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
        uint64_t v14 = v13;

        if (v12 == a2 && v14 == a3)
        {
          uint64_t v17 = swift_bridgeObjectRelease(a3);
LABEL_17:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v17);
          uint64_t v18 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v18);
          uint64_t v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v8);
          specialized ContiguousArray._endMutation()(v19);
          goto LABEL_5;
        }

        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, a2, a3, 0LL);
        uint64_t v17 = swift_bridgeObjectRelease(v14);
        if ((v16 & 1) != 0) {
          goto LABEL_17;
        }

LABEL_5:
        ++v6;
        uint64_t v5 = v10;
        if (v9 == v10) {
          return _swiftEmptyArrayStorage;
        }
      }

      if (v6 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      if (a1 < 0) {
        uint64_t v21 = a1;
      }
      else {
        uint64_t v21 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v21);
      if (!v5) {
        return _swiftEmptyArrayStorage;
      }
    }

    id v7 = *(id *)(a1 + 8 * v6 + 32);
    goto LABEL_9;
  }

  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000E2958(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for KTOptIOValidator.OptInResult(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000E2994(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KTOptIOValidator.OptInResult(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000E29D8()
{
  unint64_t result = qword_1002E0F10;
  if (!qword_1002E0F10)
  {
    uint64_t v1 = type metadata accessor for KTError(255LL);
    unint64_t result = swift_getWitnessTable(&unk_100249B0C, v1);
    atomic_store(result, (unint64_t *)&qword_1002E0F10);
  }

  return result;
}

void *sub_1000E2A20(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v13);
  }

  else
  {
    *(void *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (void *)(a1 + v7);
    unint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Date(0LL);
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10))
    {
      uint64_t v12 = sub_100072CC4((uint64_t *)&unk_1002DF740);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
    }

    uint64_t v14 = *(int *)(a3 + 24);
    uint64_t v15 = (void *)((char *)v4 + v14);
    char v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    swift_bridgeObjectRetain(v17);
  }

  return v4;
}

uint64_t sub_1000E2B38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  return swift_bridgeObjectRelease(*(void *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t sub_1000E2BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9))
  {
    uint64_t v11 = sub_100072CC4((uint64_t *)&unk_1002DF740);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  return a1;
}

uint64_t sub_1000E2CA0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }

  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_100072CC4((uint64_t *)&unk_1002DF740);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 24);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (uint64_t *)((char *)a2 + v16);
  void *v17 = *v18;
  uint64_t v19 = v18[1];
  uint64_t v20 = v17[1];
  v17[1] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  return a1;
}

uint64_t sub_1000E2DEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9))
  {
    uint64_t v11 = sub_100072CC4((uint64_t *)&unk_1002DF740);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  *(_OWORD *)(a1 + *(int *)(a3 + swift_release(*(void *)(v0 + 24)) = *(_OWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1000E2ECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1LL, v9);
  int v13 = v11(v8, 1LL, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }

  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_100072CC4((uint64_t *)&unk_1002DF740);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  uint64_t v20 = v16[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease(v20);
  return a1;
}

uint64_t sub_1000E3008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E3014);
}

uint64_t sub_1000E3014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100072CC4((uint64_t *)&unk_1002DF740);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  int v10 = v9 - 1;
  if (v10 < 0) {
    int v10 = -1;
  }
  return (v10 + 1);
}

uint64_t sub_1000E30A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E30B4);
}

uint64_t sub_1000E30B4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100072CC4((uint64_t *)&unk_1002DF740);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))( a1 + *(int *)(a4 + 20),  a2,  a2,  result);
  }
  *(void *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  return result;
}

void sub_1000E3138(uint64_t a1)
{
  v4[0] = "\t";
  sub_100090D84(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    void v4[2] = &unk_100249CE8;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
  }

unint64_t sub_1000E31B4()
{
  unint64_t result = qword_1002E1220;
  if (!qword_1002E1220)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___KTOptInState);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002E1220);
  }

  return result;
}

unint64_t sub_1000E31F0()
{
  unint64_t result = qword_1002E0F40;
  if (!qword_1002E0F40)
  {
    uint64_t v1 = sub_10007426C(&qword_1002E0AB8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002E0F40);
  }

  return result;
}

void sub_1000E323C()
{
}

void sub_1000E325C()
{
  qword_1002EF2F0 = (uint64_t)&off_100280EC8;
}

uint64_t *sub_1000E3270()
{
  if (qword_1002EC9B0 != -1) {
    swift_once(&qword_1002EC9B0, sub_1000E325C);
  }
  return &qword_1002EF2F0;
}

double sub_1000E32B0()
{
  if (qword_1002EC9B0 != -1) {
    swift_once(&qword_1002EC9B0, sub_1000E325C);
  }
  *(void *)&double result = swift_bridgeObjectRetain(qword_1002EF2F0).n128_u64[0];
  return result;
}

void sub_1000E32F0(uint64_t a1@<X8>)
{
  *(void *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
}

double sub_1000E3320@<D0>(void *a1@<X8>)
{
  if (qword_1002EC9B0 != -1) {
    swift_once(&qword_1002EC9B0, sub_1000E325C);
  }
  uint64_t v2 = qword_1002EF2F0;
  *a1 = qword_1002EF2F0;
  *(void *)&double result = swift_bridgeObjectRetain(v2).n128_u64[0];
  return result;
}

void sub_1000E3370(uint64_t a1@<X8>)
{
  *(void *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
}

uint64_t sub_1000E33A4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000ED85C();
  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000E33DC@<X0>(uint64_t a1@<X8>)
{
  return sub_10006DA58(type metadata accessor for CloudConfiguration, a1);
}

uint64_t sub_1000E33E8(uint64_t a1)
{
  return sub_10006DAB0(a1, type metadata accessor for CloudConfiguration);
}

uint64_t (*sub_1000E33F4())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_1000E341C@<X0>(void *a1@<X8>)
{
  return sub_1000E3520((void (*)(void))type metadata accessor for CloudConfiguration, a1);
}

uint64_t sub_1000E3428@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100072CC4(&qword_1002E2408);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DewValue(0LL);
  sub_100085CA8(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_1002E2408);
  uint64_t v7 = type metadata accessor for Conditions(0LL);
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v5, 1LL, v7);
  if ((_DWORD)v8 != 1) {
    return sub_100085C04((uint64_t)v5, (uint64_t)a1, type metadata accessor for Conditions);
  }
  *a1 = _swiftEmptyArrayStorage;
  UnknownStorage.init()(v8);
  return sub_100077CFC((uint64_t)v5, &qword_1002E2408);
}

uint64_t sub_1000E3514@<X0>(void *a1@<X8>)
{
  return sub_1000E3520((void (*)(void))type metadata accessor for Conditions, a1);
}

uint64_t sub_1000E3520@<X0>(void (*a1)(void)@<X0>, void *a2@<X8>)
{
  *a2 = _swiftEmptyArrayStorage;
  a1(0LL);
  return UnknownStorage.init()();
}

uint64_t sub_1000E3560(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for DewValue(0LL) + 28);
  sub_100077CFC(v3, &qword_1002E2408);
  sub_100085C04(a1, v3, type metadata accessor for Conditions);
  uint64_t v4 = type metadata accessor for Conditions(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 0LL, 1LL, v4);
}

void (*sub_1000E35D0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100072CC4(&qword_1002E2408);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Conditions(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for DewValue(0LL) + 28);
  *((_DWORD *)v3 + 12) = v10;
  sub_100085CA8(v1 + v10, (uint64_t)v5, &qword_1002E2408);
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  if ((_DWORD)v11 == 1)
  {
    *uint64_t v9 = _swiftEmptyArrayStorage;
    UnknownStorage.init()(v11);
    sub_100077CFC((uint64_t)v5, &qword_1002E2408);
  }

  else
  {
    sub_100085C04((uint64_t)v5, (uint64_t)v9, type metadata accessor for Conditions);
  }

  return sub_1000E36FC;
}

void sub_1000E36FC(uint64_t a1, char a2)
{
}

BOOL sub_1000E3710()
{
  uint64_t v1 = sub_100072CC4(&qword_1002E2408);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DewValue(0LL);
  sub_100085CA8(v0 + *(int *)(v4 + 28), (uint64_t)v3, &qword_1002E2408);
  uint64_t v5 = type metadata accessor for Conditions(0LL);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v3, 1LL, v5) != 1;
  sub_100077CFC((uint64_t)v3, &qword_1002E2408);
  return v6;
}

uint64_t sub_1000E37C4()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for DewValue(0LL) + 28);
  sub_100077CFC(v1, &qword_1002E2408);
  uint64_t v2 = type metadata accessor for Conditions(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
}

uint64_t sub_1000E381C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100072CC4(&qword_1002E2410);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DewValue(0LL);
  sub_100085CA8(v1 + *(int *)(v6 + 32), (uint64_t)v5, &qword_1002E2410);
  uint64_t v7 = type metadata accessor for ConfigurationValue(0LL);
  uint64_t v8 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(a1, 1LL, 1LL, v8);
  UnknownStorage.init()(v9);
  return sub_100077CFC((uint64_t)v5, &qword_1002E2410);
}

uint64_t sub_1000E3920@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(a1, 1LL, 1LL, v2);
  uint64_t v3 = type metadata accessor for ConfigurationValue(0LL);
  return UnknownStorage.init()(v3);
}

uint64_t sub_1000E3974(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for DewValue(0LL) + 32);
  sub_100077CFC(v3, &qword_1002E2410);
  sub_100085C04(a1, v3, type metadata accessor for ConfigurationValue);
  uint64_t v4 = type metadata accessor for ConfigurationValue(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 0LL, 1LL, v4);
}

void (*sub_1000E39E4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100072CC4(&qword_1002E2410);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for ConfigurationValue(0LL);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v3[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[5] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for DewValue(0LL) + 32);
  *((_DWORD *)v3 + 12) = v10;
  sub_100085CA8(v1 + v10, (uint64_t)v5, &qword_1002E2410);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    uint64_t v11 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
    uint64_t v12 = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))( v9,  1LL,  1LL,  v11);
    UnknownStorage.init()(v12);
    sub_100077CFC((uint64_t)v5, &qword_1002E2410);
  }

  else
  {
    sub_100085C04((uint64_t)v5, (uint64_t)v9, type metadata accessor for ConfigurationValue);
  }

  return sub_1000E3B28;
}

void sub_1000E3B28(uint64_t a1, char a2)
{
}

void sub_1000E3B3C(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(int *)(*(void *)a1 + 48LL);
  size_t v8 = *(void **)(*(void *)a1 + 32LL);
  uint64_t v9 = *(void **)(*(void *)a1 + 40LL);
  uint64_t v10 = *(void *)(*(void *)a1 + 16LL);
  uint64_t v11 = *(void *)(*(void *)a1 + 24LL);
  uint64_t v12 = *(void **)(*(void *)a1 + 8LL);
  uint64_t v13 = **(void **)a1 + v7;
  if ((a2 & 1) != 0)
  {
    sub_100077C7C(*(void *)(*(void *)a1 + 40LL), (uint64_t)v8, a4);
    sub_100077CFC(v13, a3);
    sub_100085C04((uint64_t)v8, v13, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v13, 0LL, 1LL, v10);
    sub_100077CC0((uint64_t)v9, a4);
  }

  else
  {
    sub_100077CFC(**(void **)a1 + v7, a3);
    sub_100085C04((uint64_t)v9, v13, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v13, 0LL, 1LL, v10);
  }

  free(v9);
  free(v8);
  free(v12);
  free(v6);
}

BOOL sub_1000E3C3C()
{
  uint64_t v1 = sub_100072CC4(&qword_1002E2410);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DewValue(0LL);
  sub_100085CA8(v0 + *(int *)(v4 + 32), (uint64_t)v3, &qword_1002E2410);
  uint64_t v5 = type metadata accessor for ConfigurationValue(0LL);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v3, 1LL, v5) != 1;
  sub_100077CFC((uint64_t)v3, &qword_1002E2410);
  return v6;
}

uint64_t sub_1000E3CF0()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for DewValue(0LL) + 32);
  sub_100077CFC(v1, &qword_1002E2410);
  uint64_t v2 = type metadata accessor for ConfigurationValue(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
}

uint64_t sub_1000E3D48@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E5C78(type metadata accessor for DewValue, a1);
}

uint64_t sub_1000E3D54(uint64_t a1)
{
  return sub_1000E5CD0(a1, type metadata accessor for DewValue);
}

uint64_t (*sub_1000E3D60())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_1000E3D88@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0xE000000000000000LL;
  a1[2] = 0LL;
  uint64_t v2 = type metadata accessor for DewValue(0LL);
  UnknownStorage.init()(v2);
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 28);
  uint64_t v4 = type metadata accessor for Conditions(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  uint64_t v5 = (char *)a1 + *(int *)(v2 + 32);
  uint64_t v6 = type metadata accessor for ConfigurationValue(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
}

uint64_t sub_1000E3E24@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E3E3C(type metadata accessor for Conditions, a1);
}

uint64_t sub_1000E3E30@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E3E3C(type metadata accessor for ConfigurationValue, a1);
}

uint64_t sub_1000E3E3C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(a2, 1LL, 1LL, v3);
}

uint64_t sub_1000E3E7C@<X0>(uint64_t a1@<X8>)
{
  return sub_10006DA58(type metadata accessor for Conditions, a1);
}

uint64_t sub_1000E3E88(uint64_t a1)
{
  return sub_10006DAB0(a1, type metadata accessor for Conditions);
}

uint64_t (*sub_1000E3E94())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_1000E3EBC@<X0>(uint64_t a1@<X8>)
{
  return sub_10006DA58(type metadata accessor for Strings, a1);
}

uint64_t sub_1000E3EC8(uint64_t a1)
{
  return sub_10006DAB0(a1, type metadata accessor for Strings);
}

uint64_t (*sub_1000E3ED4())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_1000E3EFC@<X0>(void *a1@<X8>)
{
  return sub_1000E3520((void (*)(void))type metadata accessor for Strings, a1);
}

uint64_t sub_1000E3F08@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E3E3C(type metadata accessor for ConfigurationValue.OneOf_Value, a1);
}

uint64_t sub_1000E3F14@<X0>(uint64_t a1@<X8>)
{
  return sub_100085CA8(v1, a1, &qword_1002E03B8);
}

uint64_t sub_1000E3F38(uint64_t a1)
{
  return sub_1000ED7F0(a1, v1, &qword_1002E03B8);
}

uint64_t sub_1000E3F58()
{
  uint64_t v1 = sub_100072CC4(&qword_1002E03B8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100085CA8(v0, (uint64_t)v3, &qword_1002E03B8);
  uint64_t v4 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(v3, 1LL, v4) == 1)
  {
    sub_100077CFC((uint64_t)v3, &qword_1002E03B8);
    return 0LL;
  }

  else if (swift_getEnumCaseMultiPayload(v3, v4))
  {
    sub_100077CC0((uint64_t)v3, type metadata accessor for ConfigurationValue.OneOf_Value);
    return 0LL;
  }

  else
  {
    return *(void *)v3;
  }

uint64_t sub_1000E4038(uint64_t a1)
{
  void *v1 = a1;
  uint64_t v3 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  swift_storeEnumTagMultiPayload(v1, v3, 0LL);
  return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v1, 0LL, 1LL, v3);
}

void (*sub_1000E409C(void *a1))(uint64_t **a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[1] = v2;
  uint64_t v5 = sub_100072CC4(&qword_1002E03B8);
  uint64_t v6 = (uint64_t *)malloc(*(void *)(*(void *)(v5 - 8) + 64LL));
  void v4[2] = v6;
  sub_100085CA8(v2, (uint64_t)v6, &qword_1002E03B8);
  uint64_t v7 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  void v4[3] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  void v4[4] = v8;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
  {
    sub_100077CFC((uint64_t)v6, &qword_1002E03B8);
  }

  else
  {
    if (!swift_getEnumCaseMultiPayload(v6, v7))
    {
      uint64_t v9 = *v6;
      goto LABEL_7;
    }

    sub_100077CC0((uint64_t)v6, type metadata accessor for ConfigurationValue.OneOf_Value);
  }

  uint64_t v9 = 0LL;
LABEL_7:
  *uint64_t v4 = v9;
  return sub_1000E4190;
}

void sub_1000E4190(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (*a1)[3];
  uint64_t v3 = (*a1)[4];
  uint64_t v5 = (void *)(*a1)[1];
  uint64_t v4 = (void *)(*a1)[2];
  uint64_t v6 = **a1;
  sub_100077CFC((uint64_t)v5, &qword_1002E03B8);
  *uint64_t v5 = v6;
  swift_storeEnumTagMultiPayload(v5, v2, 0LL);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v3 + 56))(v5, 0LL, 1LL, v2);
  free(v4);
  free(v1);
}

uint64_t sub_1000E4210()
{
  uint64_t v1 = sub_100072CC4(&qword_1002E03B8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100085CA8(v0, (uint64_t)v3, &qword_1002E03B8);
  uint64_t v4 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(v3, 1LL, v4) == 1)
  {
    sub_100077CFC((uint64_t)v3, &qword_1002E03B8);
  }

  else
  {
    sub_100077CC0((uint64_t)v3, type metadata accessor for ConfigurationValue.OneOf_Value);
  }

  return 0LL;
}

uint64_t sub_1000E42F4(uint64_t a1, uint64_t a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
  uint64_t v5 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  swift_storeEnumTagMultiPayload(v2, v5, 1LL);
  return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v2, 0LL, 1LL, v5);
}

void (*sub_1000E4364(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  void v4[2] = v2;
  uint64_t v5 = sub_100072CC4(&qword_1002E03B8);
  uint64_t v6 = (uint64_t *)malloc(*(void *)(*(void *)(v5 - 8) + 64LL));
  void v4[3] = v6;
  sub_100085CA8(v2, (uint64_t)v6, &qword_1002E03B8);
  uint64_t v7 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  void v4[4] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[5] = v8;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
  {
    sub_100077CFC((uint64_t)v6, &qword_1002E03B8);
LABEL_6:
    uint64_t v9 = 0LL;
    unint64_t v10 = 0xE000000000000000LL;
    goto LABEL_7;
  }

  if (swift_getEnumCaseMultiPayload(v6, v7) != 1)
  {
    sub_100077CC0((uint64_t)v6, type metadata accessor for ConfigurationValue.OneOf_Value);
    goto LABEL_6;
  }

  uint64_t v9 = *v6;
  unint64_t v10 = v6[1];
LABEL_7:
  *uint64_t v4 = v9;
  v4[1] = v10;
  return sub_1000E4460;
}

void sub_1000E4460(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v5 = (*a1)[4];
  uint64_t v6 = (*a1)[5];
  uint64_t v8 = (void *)(*a1)[2];
  uint64_t v7 = (void *)(*a1)[3];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain((*a1)[1]);
    sub_100077CFC((uint64_t)v8, &qword_1002E03B8);
    *uint64_t v8 = v4;
    v8[1] = v3;
    swift_storeEnumTagMultiPayload(v8, v5, 1LL);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v8, 0LL, 1LL, v5);
    swift_bridgeObjectRelease(v2[1]);
  }

  else
  {
    sub_100077CFC((*a1)[2], &qword_1002E03B8);
    *uint64_t v8 = v4;
    v8[1] = v3;
    swift_storeEnumTagMultiPayload(v8, v5, 1LL);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v8, 0LL, 1LL, v5);
  }

  free(v7);
  free(v2);
}

uint64_t sub_1000E453C()
{
  uint64_t v1 = sub_100072CC4(&qword_1002E03B8);
  __chkstk_darwin(v1);
  uint64_t v3 = (unsigned __int8 *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100085CA8(v0, (uint64_t)v3, &qword_1002E03B8);
  uint64_t v4 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(v3, 1LL, v4) == 1)
  {
    sub_100077CFC((uint64_t)v3, &qword_1002E03B8);
  }

  else
  {
    sub_100077CC0((uint64_t)v3, type metadata accessor for ConfigurationValue.OneOf_Value);
  }

  return 0LL;
}

uint64_t sub_1000E461C(char a1)
{
  _BYTE *v1 = a1;
  uint64_t v3 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  swift_storeEnumTagMultiPayload(v1, v3, 2LL);
  return (*(uint64_t (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v1, 0LL, 1LL, v3);
}

void (*sub_1000E4680(void *a1))(_BYTE ***a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = sub_100072CC4(&qword_1002E03B8);
  uint64_t v6 = (char *)malloc(*(void *)(*(void *)(v5 - 8) + 64LL));
  v4[1] = v6;
  sub_100085CA8(v2, (uint64_t)v6, &qword_1002E03B8);
  uint64_t v7 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  void v4[2] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  void v4[3] = v8;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
  {
    sub_100077CFC((uint64_t)v6, &qword_1002E03B8);
LABEL_6:
    char v9 = 0;
    goto LABEL_7;
  }

  if (swift_getEnumCaseMultiPayload(v6, v7) != 2)
  {
    sub_100077CC0((uint64_t)v6, type metadata accessor for ConfigurationValue.OneOf_Value);
    goto LABEL_6;
  }

  char v9 = *v6;
LABEL_7:
  *((_BYTE *)v4 + 32) = v9;
  return sub_1000E4784;
}

void sub_1000E4784(_BYTE ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (*a1)[2];
  uint64_t v3 = (*a1)[3];
  uint64_t v5 = **a1;
  uint64_t v4 = (*a1)[1];
  char v6 = *((_BYTE *)*a1 + 32);
  sub_100077CFC((uint64_t)v5, &qword_1002E03B8);
  *uint64_t v5 = v6;
  swift_storeEnumTagMultiPayload(v5, v2, 2LL);
  (*((void (**)(_BYTE *, void, uint64_t, _BYTE *))v3 + 7))(v5, 0LL, 1LL, v2);
  free(v4);
  free(v1);
}

double sub_1000E4804()
{
  uint64_t v1 = sub_100072CC4(&qword_1002E03B8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100085CA8(v0, (uint64_t)v3, &qword_1002E03B8);
  uint64_t v4 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(v3, 1LL, v4) == 1)
  {
    sub_100077CFC((uint64_t)v3, &qword_1002E03B8);
  }

  else
  {
    sub_100077CC0((uint64_t)v3, type metadata accessor for ConfigurationValue.OneOf_Value);
  }

  return 0.0;
}

uint64_t sub_1000E48E4(double a1)
{
  double *v1 = a1;
  uint64_t v3 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  swift_storeEnumTagMultiPayload(v1, v3, 3LL);
  return (*(uint64_t (**)(double *, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v1, 0LL, 1LL, v3);
}

void (*sub_1000E4950(void *a1))(uint64_t **a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[1] = v2;
  uint64_t v5 = sub_100072CC4(&qword_1002E03B8);
  uint64_t v6 = (uint64_t *)malloc(*(void *)(*(void *)(v5 - 8) + 64LL));
  void v4[2] = v6;
  sub_100085CA8(v2, (uint64_t)v6, &qword_1002E03B8);
  uint64_t v7 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  void v4[3] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  void v4[4] = v8;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
  {
    sub_100077CFC((uint64_t)v6, &qword_1002E03B8);
LABEL_6:
    uint64_t v9 = 0LL;
    goto LABEL_7;
  }

  if (swift_getEnumCaseMultiPayload(v6, v7) != 3)
  {
    sub_100077CC0((uint64_t)v6, type metadata accessor for ConfigurationValue.OneOf_Value);
    goto LABEL_6;
  }

  uint64_t v9 = *v6;
LABEL_7:
  *uint64_t v4 = v9;
  return sub_1000E4A48;
}

void sub_1000E4A48(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (*a1)[3];
  uint64_t v3 = (*a1)[4];
  uint64_t v5 = (void *)(*a1)[1];
  uint64_t v4 = (void *)(*a1)[2];
  uint64_t v6 = **a1;
  sub_100077CFC((uint64_t)v5, &qword_1002E03B8);
  *uint64_t v5 = v6;
  swift_storeEnumTagMultiPayload(v5, v2, 3LL);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v3 + 56))(v5, 0LL, 1LL, v2);
  free(v4);
  free(v1);
}

uint64_t sub_1000E4AD0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100072CC4(&qword_1002E03B8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100085CA8(v2, (uint64_t)v6, &qword_1002E03B8);
  uint64_t v7 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7) == 1)
  {
    sub_100077CFC((uint64_t)v6, &qword_1002E03B8);
  }

  else
  {
    sub_100077CC0((uint64_t)v6, type metadata accessor for ConfigurationValue.OneOf_Value);
  }

  *a1 = _swiftEmptyArrayStorage;
  uint64_t v9 = type metadata accessor for Strings(0LL);
  return UnknownStorage.init()(v9);
}

uint64_t sub_1000E4BE4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  swift_storeEnumTagMultiPayload(v1, v3, 4LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v1, 0LL, 1LL, v3);
}

void (*sub_1000E4C58(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100072CC4(&qword_1002E03B8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for Strings(0LL) - 8) + 64LL);
  v3[2] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[3] = v7;
  sub_100085CA8(v1, (uint64_t)v5, &qword_1002E03B8);
  uint64_t v8 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  v3[4] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[5] = v9;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v5, 1LL, v8) == 1)
  {
    uint64_t v10 = sub_100077CFC((uint64_t)v5, &qword_1002E03B8);
LABEL_6:
    *uint64_t v7 = _swiftEmptyArrayStorage;
    UnknownStorage.init()(v10);
    return sub_1000E4DA8;
  }

  if (swift_getEnumCaseMultiPayload(v5, v8) != 4)
  {
    uint64_t v10 = sub_100077CC0((uint64_t)v5, type metadata accessor for ConfigurationValue.OneOf_Value);
    goto LABEL_6;
  }

  sub_100085C04((uint64_t)v5, (uint64_t)v7, type metadata accessor for Strings);
  return sub_1000E4DA8;
}

void sub_1000E4DA8(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  size_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  uint64_t v7 = (void *)(*a1)[1];
  if ((a2 & 1) != 0)
  {
    sub_100077C7C((*a1)[3], (uint64_t)v5, type metadata accessor for Strings);
    sub_100077CFC(v8, &qword_1002E03B8);
    sub_100085C04((uint64_t)v5, v8, type metadata accessor for Strings);
    swift_storeEnumTagMultiPayload(v8, v3, 4LL);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0LL, 1LL, v3);
    sub_100077CC0((uint64_t)v6, type metadata accessor for Strings);
  }

  else
  {
    sub_100077CFC(**a1, &qword_1002E03B8);
    sub_100085C04((uint64_t)v6, v8, type metadata accessor for Strings);
    swift_storeEnumTagMultiPayload(v8, v3, 4LL);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0LL, 1LL, v3);
  }

  free(v6);
  free(v5);
  free(v7);
  free(v2);
}

uint64_t sub_1000E4EC4@<X0>(uint64_t a1@<X8>)
{
  return sub_10006DA58(type metadata accessor for ConfigurationValue, a1);
}

uint64_t sub_1000E4ED0(uint64_t a1)
{
  return sub_10006DAB0(a1, type metadata accessor for ConfigurationValue);
}

uint64_t (*sub_1000E4EDC())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_1000E4F08(void *a1, char *a2)
{
  return sub_1000ED23C( a1,  a2,  (uint64_t (*)(void, void))sub_1000EB3C0,  type metadata accessor for Strings) & 1;
}

uint64_t sub_1000E4F34()
{
  return *v0;
}

uint64_t sub_1000E4F3C(uint64_t result)
{
  _BYTE *v1 = result;
  return result;
}

uint64_t sub_1000E4F44@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E3E3C(type metadata accessor for Condition.OneOf_Condition, a1);
}

uint64_t sub_1000E4F50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Condition(0LL);
  return sub_100085CA8(v1 + *(int *)(v3 + 20), a1, &qword_1002E2418);
}

uint64_t sub_1000E4F8C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Condition(0LL);
  return sub_1000ED7F0(a1, v1 + *(int *)(v3 + 20), &qword_1002E2418);
}

uint64_t (*sub_1000E4FC8())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_1000E4FF0@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100072CC4(&qword_1002E2418);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Condition(0LL);
  sub_100085CA8(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_1002E2418);
  uint64_t v7 = type metadata accessor for Condition.OneOf_Condition(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v5, 1LL, v7) == 1)
  {
    sub_100077CFC((uint64_t)v5, &qword_1002E2418);
LABEL_5:
    *a1 = _swiftEmptyArrayStorage;
    uint64_t v8 = type metadata accessor for Conditions(0LL);
    return UnknownStorage.init()(v8);
  }

  if (swift_getEnumCaseMultiPayload(v5, v7))
  {
    sub_100077CC0((uint64_t)v5, type metadata accessor for Condition.OneOf_Condition);
    goto LABEL_5;
  }

  return sub_100085C04((uint64_t)v5, (uint64_t)a1, type metadata accessor for Conditions);
}

uint64_t sub_1000E5108(uint64_t a1)
{
  return sub_1000E5944(a1, type metadata accessor for Conditions, 0LL);
}

void (*sub_1000E5118(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100072CC4(&qword_1002E2418);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for Conditions(0LL) - 8) + 64LL);
  v3[2] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[3] = v7;
  uint64_t v8 = *(int *)(type metadata accessor for Condition(0LL) + 20);
  *((_DWORD *)v3 + 12) = v8;
  sub_100085CA8(v1 + v8, (uint64_t)v5, &qword_1002E2418);
  uint64_t v9 = type metadata accessor for Condition.OneOf_Condition(0LL);
  v3[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1LL, v9) == 1)
  {
    uint64_t v11 = sub_100077CFC((uint64_t)v5, &qword_1002E2418);
  }

  else
  {
    if (!swift_getEnumCaseMultiPayload(v5, v9))
    {
      sub_100085C04((uint64_t)v5, (uint64_t)v7, type metadata accessor for Conditions);
      return sub_1000E5270;
    }

    uint64_t v11 = sub_100077CC0((uint64_t)v5, type metadata accessor for Condition.OneOf_Condition);
  }

  *uint64_t v7 = _swiftEmptyArrayStorage;
  UnknownStorage.init()(v11);
  return sub_1000E5270;
}

void sub_1000E5270(uint64_t a1, char a2)
{
}

uint64_t sub_1000E5280@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100072CC4(&qword_1002E2418);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Condition(0LL);
  sub_100085CA8(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_1002E2418);
  uint64_t v7 = type metadata accessor for Condition.OneOf_Condition(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v5, 1LL, v7) == 1)
  {
    sub_100077CFC((uint64_t)v5, &qword_1002E2418);
  }

  else
  {
    sub_100077CC0((uint64_t)v5, type metadata accessor for Condition.OneOf_Condition);
  }

  *a1 = _swiftEmptyArrayStorage;
  uint64_t v9 = type metadata accessor for Conditions(0LL);
  return UnknownStorage.init()(v9);
}

uint64_t sub_1000E539C(uint64_t a1)
{
  return sub_1000E5944(a1, type metadata accessor for Conditions, 1LL);
}

void (*sub_1000E53AC(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100072CC4(&qword_1002E2418);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for Conditions(0LL) - 8) + 64LL);
  v3[2] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[3] = v7;
  uint64_t v8 = *(int *)(type metadata accessor for Condition(0LL) + 20);
  *((_DWORD *)v3 + 12) = v8;
  sub_100085CA8(v1 + v8, (uint64_t)v5, &qword_1002E2418);
  uint64_t v9 = type metadata accessor for Condition.OneOf_Condition(0LL);
  v3[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1LL, v9) == 1)
  {
    uint64_t v11 = sub_100077CFC((uint64_t)v5, &qword_1002E2418);
LABEL_6:
    *uint64_t v7 = _swiftEmptyArrayStorage;
    UnknownStorage.init()(v11);
    return sub_1000E5508;
  }

  if (swift_getEnumCaseMultiPayload(v5, v9) != 1)
  {
    uint64_t v11 = sub_100077CC0((uint64_t)v5, type metadata accessor for Condition.OneOf_Condition);
    goto LABEL_6;
  }

  sub_100085C04((uint64_t)v5, (uint64_t)v7, type metadata accessor for Conditions);
  return sub_1000E5508;
}

void sub_1000E5508(uint64_t a1, char a2)
{
}

uint64_t sub_1000E5518@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100072CC4(&qword_1002E2418);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Condition(0LL);
  sub_100085CA8(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_1002E2418);
  uint64_t v7 = type metadata accessor for Condition.OneOf_Condition(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v5, 1LL, v7) == 1)
  {
    sub_100077CFC((uint64_t)v5, &qword_1002E2418);
  }

  else
  {
    sub_100077CC0((uint64_t)v5, type metadata accessor for Condition.OneOf_Condition);
  }

  uint64_t v9 = type metadata accessor for ConditionDSID(0LL);
  *a1 = 0LL;
  a1[1] = 0LL;
  return UnknownStorage.init()(v9);
}

uint64_t sub_1000E562C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ConditionDSID(0LL);
  *a1 = 0LL;
  a1[1] = 0LL;
  return UnknownStorage.init()(v2);
}

uint64_t sub_1000E5660(uint64_t a1)
{
  return sub_1000E5944(a1, type metadata accessor for ConditionDSID, 2LL);
}

void (*sub_1000E5670(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100072CC4(&qword_1002E2418);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for ConditionDSID(0LL) - 8) + 64LL);
  v3[2] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[3] = v7;
  uint64_t v8 = *(int *)(type metadata accessor for Condition(0LL) + 20);
  *((_DWORD *)v3 + 12) = v8;
  sub_100085CA8(v1 + v8, (uint64_t)v5, &qword_1002E2418);
  uint64_t v9 = type metadata accessor for Condition.OneOf_Condition(0LL);
  v3[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1LL, v9) == 1)
  {
    uint64_t v11 = sub_100077CFC((uint64_t)v5, &qword_1002E2418);
LABEL_6:
    *uint64_t v7 = 0LL;
    v7[1] = 0LL;
    UnknownStorage.init()(v11);
    return sub_1000E57C4;
  }

  if (swift_getEnumCaseMultiPayload(v5, v9) != 2)
  {
    uint64_t v11 = sub_100077CC0((uint64_t)v5, type metadata accessor for Condition.OneOf_Condition);
    goto LABEL_6;
  }

  sub_100085C04((uint64_t)v5, (uint64_t)v7, type metadata accessor for ConditionDSID);
  return sub_1000E57C4;
}

void sub_1000E57C4(uint64_t a1, char a2)
{
}

uint64_t sub_1000E57D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100072CC4(&qword_1002E2418);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Condition(0LL);
  sub_100085CA8(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_1002E2418);
  uint64_t v7 = type metadata accessor for Condition.OneOf_Condition(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v5, 1LL, v7) == 1)
  {
    sub_100077CFC((uint64_t)v5, &qword_1002E2418);
  }

  else
  {
    sub_100077CC0((uint64_t)v5, type metadata accessor for Condition.OneOf_Condition);
  }

  *(void *)a1 = 0LL;
  *(_WORD *)(a1 + 8) = 1;
  uint64_t v9 = type metadata accessor for ConditionVersion(0LL);
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  return UnknownStorage.init()(v9);
}

uint64_t sub_1000E58F4@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_WORD *)(a1 + 8) = 1;
  uint64_t v2 = type metadata accessor for ConditionVersion(0LL);
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  return UnknownStorage.init()(v2);
}

uint64_t sub_1000E5934(uint64_t a1)
{
  return sub_1000E5944(a1, type metadata accessor for ConditionVersion, 3LL);
}

uint64_t sub_1000E5944(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v7 = v3 + *(int *)(type metadata accessor for Condition(0LL) + 20);
  sub_100077CFC(v7, &qword_1002E2418);
  sub_100085C04(a1, v7, a2);
  uint64_t v8 = type metadata accessor for Condition.OneOf_Condition(0LL);
  swift_storeEnumTagMultiPayload(v7, v8, a3);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 0LL, 1LL, v8);
}

void (*sub_1000E59D4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100072CC4(&qword_1002E2418);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64LL));
  v3[1] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for ConditionVersion(0LL) - 8) + 64LL);
  v3[2] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[3] = v7;
  uint64_t v8 = *(int *)(type metadata accessor for Condition(0LL) + 20);
  *((_DWORD *)v3 + 12) = v8;
  sub_100085CA8(v1 + v8, (uint64_t)v5, &qword_1002E2418);
  uint64_t v9 = type metadata accessor for Condition.OneOf_Condition(0LL);
  v3[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1LL, v9) == 1)
  {
    uint64_t v11 = sub_100077CFC((uint64_t)v5, &qword_1002E2418);
LABEL_6:
    *(void *)uint64_t v7 = 0LL;
    v7[4] = 1;
    *((void *)v7 + 2) = 0LL;
    *((void *)v7 + 3) = 0LL;
    UnknownStorage.init()(v11);
    return sub_1000E5B34;
  }

  if (swift_getEnumCaseMultiPayload(v5, v9) != 3)
  {
    uint64_t v11 = sub_100077CC0((uint64_t)v5, type metadata accessor for Condition.OneOf_Condition);
    goto LABEL_6;
  }

  sub_100085C04((uint64_t)v5, (uint64_t)v7, type metadata accessor for ConditionVersion);
  return sub_1000E5B34;
}

void sub_1000E5B34(uint64_t a1, char a2)
{
}

void sub_1000E5B44(uint64_t a1, char a2, uint64_t (*a3)(void), uint64_t a4)
{
  size_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)(*(void *)a1 + 32LL);
  uint64_t v8 = *(void *)(*(void *)a1 + 40LL);
  uint64_t v9 = *(int *)(*(void *)a1 + 48LL);
  uint64_t v10 = *(void **)(*(void *)a1 + 16LL);
  uint64_t v11 = *(void **)(*(void *)a1 + 24LL);
  uint64_t v12 = *(void **)(*(void *)a1 + 8LL);
  uint64_t v13 = **(void **)a1 + v9;
  if ((a2 & 1) != 0)
  {
    sub_100077C7C(*(void *)(*(void *)a1 + 24LL), (uint64_t)v10, a3);
    sub_100077CFC(v13, &qword_1002E2418);
    sub_100085C04((uint64_t)v10, v13, a3);
    swift_storeEnumTagMultiPayload(v13, v7, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v13, 0LL, 1LL, v7);
    sub_100077CC0((uint64_t)v11, a3);
  }

  else
  {
    sub_100077CFC(**(void **)a1 + v9, &qword_1002E2418);
    sub_100085C04((uint64_t)v11, v13, a3);
    swift_storeEnumTagMultiPayload(v13, v7, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v13, 0LL, 1LL, v7);
  }

  free(v11);
  free(v10);
  free(v12);
  free(v6);
}

uint64_t sub_1000E5C6C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E5C78(type metadata accessor for Condition, a1);
}

uint64_t sub_1000E5C78@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0LL) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_1000E5CC4(uint64_t a1)
{
  return sub_1000E5CD0(a1, type metadata accessor for Condition);
}

uint64_t sub_1000E5CD0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0LL) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(v4, a1, v5);
}

uint64_t (*sub_1000E5D18())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_1000E5D44(void *a1, char *a2)
{
  return sub_1000ED23C(a1, a2, sub_1000EB5C0, type metadata accessor for Conditions) & 1;
}

uint64_t sub_1000E5D78@<X0>(_BYTE *a1@<X8>)
{
  *a1 = 0;
  uint64_t v1 = &a1[*(int *)(type metadata accessor for Condition(0LL) + 20)];
  uint64_t v2 = type metadata accessor for Condition.OneOf_Condition(0LL);
  uint64_t v3 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
  return UnknownStorage.init()(v3);
}

uint64_t sub_1000E5DE4()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_1000E5DEC(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t sub_1000E5DF4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E5C78(type metadata accessor for ConditionDSID, a1);
}

uint64_t sub_1000E5E00(uint64_t a1)
{
  return sub_1000E5CD0(a1, type metadata accessor for ConditionDSID);
}

uint64_t (*sub_1000E5E0C())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_1000E5E34()
{
  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t sub_1000E5E3C(uint64_t result)
{
  *(_BYTE *)(v1 + 9) = result;
  return result;
}

uint64_t (*sub_1000E5E44())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_1000E5E54()
{
  return *(void *)(v0 + 24);
}

uint64_t sub_1000E5E5C(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t sub_1000E5E64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ConditionVersion(0LL) + 32);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, v3, v4);
}

uint64_t sub_1000E5EAC(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ConditionVersion(0LL) + 32);
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(v3, a1, v4);
}

uint64_t (*sub_1000E5EF4())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_1000E5F1C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100077D38(v0, qword_1002EF2F8);
  sub_100072DEC(v0, (uint64_t)qword_1002EF2F8);
  uint64_t v1 = sub_100072CC4(&qword_1002DF238);
  uint64_t v2 = sub_100072CC4((uint64_t *)&unk_1002DF240);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_100248AF0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 0LL;
  *(void *)uint64_t v9 = "macos";
  *(void *)(v9 + 8) = 5LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 1LL;
  *(void *)uint64_t v13 = "iphoneos";
  *(void *)(v13 + 8) = 8LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  void *v14 = 2LL;
  *(void *)uint64_t v15 = "watchos";
  *((void *)v15 + 1) = 7LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 3LL;
  *(void *)uint64_t v17 = "tvos";
  *((void *)v17 + 1) = 4LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v8 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 4LL;
  *(void *)uint64_t v18 = "visionos";
  *(void *)(v18 + 8) = 8LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000E6118()
{
  return sub_10006E120(&qword_1002EC9B8, (uint64_t)qword_1002EF2F8, (uint64_t)sub_1000E5F1C);
}

uint64_t sub_1000E6134@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E17C(&qword_1002EC9B8, (uint64_t)qword_1002EF2F8, (uint64_t)sub_1000E5F1C, a1);
}

uint64_t sub_1000E6150@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E200(&qword_1002EC9B8, (uint64_t)qword_1002EF2F8, (uint64_t)sub_1000E5F1C, a1);
}

void *sub_1000E616C()
{
  return &unk_100280E98;
}

unint64_t sub_1000E6178()
{
  return 0xD000000000000012LL;
}

uint64_t sub_1000E6194(uint64_t a1)
{
  return sub_1000E70F8(a1, qword_1002EF310, (uint64_t)"configurations", 14LL);
}

uint64_t sub_1000E61AC()
{
  return sub_10006E120(&qword_1002EC9C0, (uint64_t)qword_1002EF310, (uint64_t)sub_1000E6194);
}

uint64_t sub_1000E61C8@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E17C(&qword_1002EC9C0, (uint64_t)qword_1002EF310, (uint64_t)sub_1000E6194, a1);
}

uint64_t sub_1000E61E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E6D88(a1, a2, a3, type metadata accessor for DewValue, &qword_1002E2420, (uint64_t)&unk_10024A114);
}

uint64_t sub_1000E6210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E6E84( a1,  a2,  a3,  type metadata accessor for DewValue,  &qword_1002E2420,  (uint64_t)&unk_10024A114,  (void (*)(void))type metadata accessor for CloudConfiguration);
}

uint64_t sub_1000E6244(void *a1, char *a2)
{
  return sub_1000ED23C(a1, a2, sub_1000EB484, type metadata accessor for CloudConfiguration) & 1;
}

Swift::Int sub_1000E626C()
{
  return sub_100071C3C(type metadata accessor for CloudConfiguration, &qword_1002E2428, (uint64_t)&unk_10024A0AC);
}

uint64_t sub_1000E6288(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002E2B00, type metadata accessor for CloudConfiguration, (uint64_t)&unk_10024A024);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E62D8@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E200(&qword_1002EC9C0, (uint64_t)qword_1002EF310, (uint64_t)sub_1000E6194, a1);
}

uint64_t sub_1000E62F4(uint64_t a1)
{
  uint64_t v2 = sub_100073FE0(&qword_1002DF930, type metadata accessor for CloudConfiguration, (uint64_t)&unk_100249FAC);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E6334(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002DF930, type metadata accessor for CloudConfiguration, (uint64_t)&unk_100249FAC);
  return Message.hash(into:)(a1, a2, v4);
}

const char *sub_1000E6384()
{
  return "DewValue";
}

uint64_t sub_1000E6390()
{
  return 0x65756C6156776544LL;
}

uint64_t sub_1000E63A8()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100077D38(v0, qword_1002EF328);
  sub_100072DEC(v0, (uint64_t)qword_1002EF328);
  uint64_t v1 = sub_100072CC4(&qword_1002DF238);
  uint64_t v2 = sub_100072CC4((uint64_t *)&unk_1002DF240);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_100246500;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "name";
  *(void *)(v9 + 8) = 4LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "version";
  *(void *)(v13 + 8) = 7LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  void *v14 = 3LL;
  *(void *)uint64_t v15 = "conditions";
  *((void *)v15 + 1) = 10LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)uint64_t v17 = "value";
  *((void *)v17 + 1) = 5LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000E656C()
{
  return sub_10006E120(&qword_1002EC9C8, (uint64_t)qword_1002EF328, (uint64_t)sub_1000E63A8);
}

uint64_t sub_1000E6588@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E17C(&qword_1002EC9C8, (uint64_t)qword_1002EF328, (uint64_t)sub_1000E63A8, a1);
}

uint64_t sub_1000E65A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          uint64_t v10 = v9;
          dispatch thunk of Decoder.decodeSingularStringField(value:)(v3, a2, a3);
          goto LABEL_5;
        case 2LL:
          uint64_t v10 = v9;
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)(v3 + 16, a2, a3);
          goto LABEL_5;
        case 3LL:
          uint64_t v11 = v3 + *(int *)(type metadata accessor for DewValue(0LL) + 28);
          uint64_t v12 = type metadata accessor for Conditions(0LL);
          uint64_t v13 = (unint64_t *)&unk_1002E24C8;
          uint64_t v14 = type metadata accessor for Conditions;
          uint64_t v15 = &unk_10024A27C;
          goto LABEL_12;
        case 4LL:
          uint64_t v11 = v3 + *(int *)(type metadata accessor for DewValue(0LL) + 32);
          uint64_t v12 = type metadata accessor for ConfigurationValue(0LL);
          uint64_t v13 = (unint64_t *)&unk_1002E24F8;
          uint64_t v14 = type metadata accessor for ConfigurationValue;
          uint64_t v15 = &unk_10024A54C;
LABEL_12:
          uint64_t v16 = sub_100073FE0(v13, v14, (uint64_t)v15);
          uint64_t v10 = v9;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v11, v12, v16, a2, a3);
LABEL_5:
          uint64_t v9 = v10;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000E6710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = v3[1];
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000LL) == 0) {
    uint64_t v9 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    uint64_t v11 = v3[2];
    if (!v11 || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(v11, 2LL, a2, a3), !v4))
    {
      uint64_t result = sub_1000E6818((uint64_t)v3, a1, a2, a3);
      if (!v4)
      {
        sub_1000E698C((uint64_t)v3, a1, a2, a3);
        type metadata accessor for DewValue(0LL);
        return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
      }
    }
  }

  return result;
}

uint64_t sub_1000E6818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100072CC4(&qword_1002E2408);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Conditions(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DewValue(0LL);
  sub_100085CA8(a1 + *(int *)(v13 + 28), (uint64_t)v8, &qword_1002E2408);
  sub_100085C04((uint64_t)v8, (uint64_t)v12, type metadata accessor for Conditions);
  uint64_t v15 = sub_100073FE0(&qword_1002E24C8, type metadata accessor for Conditions, (uint64_t)&unk_10024A27C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 3LL, v9, v15, a3, v17);
  return sub_100077CC0((uint64_t)v12, type metadata accessor for Conditions);
}

uint64_t sub_1000E698C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = sub_100072CC4(&qword_1002E2410);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for ConfigurationValue(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DewValue(0LL);
  sub_100085CA8(a1 + *(int *)(v13 + 32), (uint64_t)v8, &qword_1002E2410);
  sub_100085C04((uint64_t)v8, (uint64_t)v12, type metadata accessor for ConfigurationValue);
  uint64_t v15 = sub_100073FE0(&qword_1002E24F8, type metadata accessor for ConfigurationValue, (uint64_t)&unk_10024A54C);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 4LL, v9, v15, a3, v17);
  return sub_100077CC0((uint64_t)v12, type metadata accessor for ConfigurationValue);
}

Swift::Int sub_1000E6B04()
{
  return sub_100071C3C(type metadata accessor for DewValue, &qword_1002E2430, (uint64_t)&unk_10024A214);
}

uint64_t sub_1000E6B20@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0xE000000000000000LL;
  a2[2] = 0LL;
  UnknownStorage.init()(a1);
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for Conditions(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = (char *)a2 + *(int *)(a1 + 32);
  uint64_t v7 = type metadata accessor for ConfigurationValue(0LL);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
}

uint64_t sub_1000E6BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E65A4(a1, a2, a3);
}

uint64_t sub_1000E6BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E6710(a1, a2, a3);
}

uint64_t sub_1000E6BE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002E2AF8, type metadata accessor for DewValue, (uint64_t)&unk_10024A18C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E6C34@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E200(&qword_1002EC9C8, (uint64_t)qword_1002EF328, (uint64_t)sub_1000E63A8, a1);
}

uint64_t sub_1000E6C50(uint64_t a1)
{
  uint64_t v2 = sub_100073FE0(&qword_1002E2420, type metadata accessor for DewValue, (uint64_t)&unk_10024A114);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E6C90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002E2420, type metadata accessor for DewValue, (uint64_t)&unk_10024A114);
  return Message.hash(into:)(a1, a2, v4);
}

const char *sub_1000E6CE4()
{
  return "Conditions";
}

uint64_t sub_1000E6CF0()
{
  return 0x6F697469646E6F43LL;
}

uint64_t sub_1000E6D0C(uint64_t a1)
{
  return sub_1000E70F8(a1, qword_1002EF340, (uint64_t)"matchConditions", 15LL);
}

uint64_t sub_1000E6D24()
{
  return sub_10006E120(&qword_1002EC9D0, (uint64_t)qword_1002EF340, (uint64_t)sub_1000E6D0C);
}

uint64_t sub_1000E6D40@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E17C(&qword_1002EC9D0, (uint64_t)qword_1002EF340, (uint64_t)sub_1000E6D0C, a1);
}

uint64_t sub_1000E6D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E6D88(a1, a2, a3, type metadata accessor for Condition, &qword_1002E2438, (uint64_t)&unk_10024A6B4);
}

uint64_t sub_1000E6D88( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  uint64_t v13 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v13, i);
    if (v7 || (v16 & 1) != 0) {
      break;
    }
    if (result == 1)
    {
      uint64_t v17 = a4(0LL);
      uint64_t v18 = sub_100073FE0(a5, a4, a6);
      dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)(v6, v17, v18, a2, a3);
    }

    uint64_t v7 = 0LL;
    uint64_t v13 = a2;
  }

  return result;
}

uint64_t sub_1000E6E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E6E84( a1,  a2,  a3,  type metadata accessor for Condition,  &qword_1002E2438,  (uint64_t)&unk_10024A6B4,  (void (*)(void))type metadata accessor for Conditions);
}

uint64_t sub_1000E6E84( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6, void (*a7)(void))
{
  uint64_t v9 = v7;
  uint64_t v10 = a3;
  uint64_t v13 = *v9;
  if (*(void *)(*v9 + 16))
  {
    uint64_t v23 = a7;
    uint64_t v17 = a4(0LL);
    uint64_t v18 = sub_100073FE0(a5, a4, a6);
    uint64_t v19 = v17;
    uint64_t v10 = a3;
    uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(v13, 1LL, v19, v18, a2, a3);
    a7 = v23;
    uint64_t v21 = a1;
    if (v8) {
      return result;
    }
  }

  else
  {
    uint64_t v21 = a1;
  }

  a7(0LL);
  return UnknownStorage.traverse<A>(visitor:)(v21, a2, v10);
}

Swift::Int sub_1000E6F7C()
{
  return sub_100071C3C(type metadata accessor for Conditions, &qword_1002E2440, (uint64_t)&unk_10024A37C);
}

uint64_t sub_1000E6F98@<X0>(void *a1@<X8>)
{
  *a1 = _swiftEmptyArrayStorage;
  return UnknownStorage.init()();
}

uint64_t sub_1000E6FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002E2AF0, type metadata accessor for Conditions, (uint64_t)&unk_10024A2F4);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E7010@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E200(&qword_1002EC9D0, (uint64_t)qword_1002EF340, (uint64_t)sub_1000E6D0C, a1);
}

uint64_t sub_1000E702C(uint64_t a1)
{
  uint64_t v2 = sub_100073FE0(&qword_1002E24C8, type metadata accessor for Conditions, (uint64_t)&unk_10024A27C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E706C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002E24C8, type metadata accessor for Conditions, (uint64_t)&unk_10024A27C);
  return Message.hash(into:)(a1, a2, v4);
}

const char *sub_1000E70BC()
{
  return "Strings";
}

uint64_t sub_1000E70C8()
{
  return 0x73676E69727453LL;
}

uint64_t sub_1000E70E0(uint64_t a1)
{
  return sub_1000E70F8(a1, qword_1002EF358, (uint64_t)"strings", 7LL);
}

uint64_t sub_1000E70F8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for _NameMap(0LL);
  sub_100077D38(v7, a2);
  sub_100072DEC(v7, (uint64_t)a2);
  uint64_t v8 = sub_100072CC4(&qword_1002DF238);
  uint64_t v9 = sub_100072CC4((uint64_t *)&unk_1002DF240);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 32) & ~v12;
  uint64_t v14 = swift_allocObject(v8, v13 + v11, v12 | 7);
  *(_OWORD *)(v14 + 16) = xmmword_1002464F0;
  uint64_t v15 = v14 + v13 + *(int *)(v9 + 48);
  *(void *)(v14 + v13) = 1LL;
  *(void *)uint64_t v15 = a3;
  *(void *)(v15 + 8) = a4;
  *(_BYTE *)(v15 + 16) = 2;
  uint64_t v16 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v17 = type metadata accessor for _NameMap.NameDescription(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104LL))(v15, v16, v17);
  return _NameMap.init(dictionaryLiteral:)(v14);
}

uint64_t sub_1000E71FC()
{
  return sub_10006E120(&qword_1002EC9D8, (uint64_t)qword_1002EF358, (uint64_t)sub_1000E70E0);
}

uint64_t sub_1000E7218@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E17C(&qword_1002EC9D8, (uint64_t)qword_1002EF358, (uint64_t)sub_1000E70E0, a1);
}

uint64_t sub_1000E7234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  for (uint64_t i = a3; ; uint64_t i = a3)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(v7, i);
    if (v4 || (v10 & 1) != 0) {
      break;
    }
    if (result == 1) {
      dispatch thunk of Decoder.decodeRepeatedStringField(value:)(v3, a2, a3);
    }
    uint64_t v7 = a2;
  }

  return result;
}

uint64_t sub_1000E72A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(*(void *)v3 + 16LL)
    || (uint64_t result = dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)(), !v4))
  {
    type metadata accessor for Strings(0LL);
    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

Swift::Int sub_1000E7334()
{
  return sub_100071C3C(type metadata accessor for Strings, &qword_1002E2448, (uint64_t)&unk_10024A4E4);
}

uint64_t sub_1000E7350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E7234(a1, a2, a3);
}

uint64_t sub_1000E7364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E72A0(a1, a2, a3);
}

uint64_t sub_1000E7378(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002E2AE8, type metadata accessor for Strings, (uint64_t)&unk_10024A45C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E73C8@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E200(&qword_1002EC9D8, (uint64_t)qword_1002EF358, (uint64_t)sub_1000E70E0, a1);
}

uint64_t sub_1000E73E4(uint64_t a1)
{
  uint64_t v2 = sub_100073FE0(&qword_1002E24E0, type metadata accessor for Strings, (uint64_t)&unk_10024A3E4);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E7424(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002E24E0, type metadata accessor for Strings, (uint64_t)&unk_10024A3E4);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000E7474()
{
  return &unk_100280EA8;
}

unint64_t sub_1000E7480()
{
  return 0xD000000000000012LL;
}

uint64_t sub_1000E749C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100077D38(v0, qword_1002EF370);
  sub_100072DEC(v0, (uint64_t)qword_1002EF370);
  uint64_t v1 = sub_100072CC4(&qword_1002DF238);
  uint64_t v2 = sub_100072CC4((uint64_t *)&unk_1002DF240);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_100248AF0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 100LL;
  *(void *)uint64_t v9 = "integer";
  *(void *)(v9 + 8) = 7LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 101LL;
  *(void *)uint64_t v13 = "string";
  *(void *)(v13 + 8) = 6LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v7 + v6 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  void *v14 = 102LL;
  *(void *)uint64_t v15 = "BOOL";
  *((void *)v15 + 1) = 4LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v7 + v6 + 3 * v4);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 103LL;
  *(void *)uint64_t v17 = "timeInterval";
  *((void *)v17 + 1) = 12LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v7 + v6 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 104LL;
  *(void *)uint64_t v18 = "strings";
  *(void *)(v18 + 8) = 7LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000E76A4()
{
  return sub_10006E120(&qword_1002EC9E0, (uint64_t)qword_1002EF370, (uint64_t)sub_1000E749C);
}

uint64_t sub_1000E76C0@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E17C(&qword_1002EC9E0, (uint64_t)qword_1002EF370, (uint64_t)sub_1000E749C, a1);
}

uint64_t sub_1000E76DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 'd':
          sub_1000E77E8(a1, v5, a2, a3);
          break;
        case 'e':
          sub_1000E795C(a1, v5, a2, a3);
          break;
        case 'f':
          sub_1000E7AE8(a1, v5, a2, a3);
          break;
        case 'g':
          sub_1000E7C5C(a1, v5, a2, a3);
          break;
        case 'h':
          sub_1000E7DD0((uint64_t)v5, a1, a2, a3);
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000E77E8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100072CC4(&qword_1002E03B8);
  __chkstk_darwin(v8);
  char v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = 0LL;
  char v16 = 1;
  uint64_t result = dispatch thunk of Decoder.decodeSingularInt64Field(value:)(&v15, a3, a4);
  if (!v4 && (v16 & 1) == 0)
  {
    uint64_t v17 = v15;
    sub_100085CA8((uint64_t)a2, (uint64_t)v10, &qword_1002E03B8);
    uint64_t v12 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
    uint64_t v13 = *(void *)(v12 - 8);
    int v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1LL, v12);
    sub_100077CFC((uint64_t)v10, &qword_1002E03B8);
    if (v14 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()(a3, a4);
    }
    sub_100077CFC((uint64_t)a2, &qword_1002E03B8);
    *a2 = v17;
    swift_storeEnumTagMultiPayload(a2, v12, 0LL);
    return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(a2, 0LL, 1LL, v12);
  }

  return result;
}

uint64_t sub_1000E795C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100072CC4(&qword_1002E03B8);
  __chkstk_darwin(v8);
  char v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = 0LL;
  uint64_t v18 = 0LL;
  uint64_t result = dispatch thunk of Decoder.decodeSingularStringField(value:)(&v17, a3, a4);
  if (v4) {
    return swift_bridgeObjectRelease(v18);
  }
  uint64_t v12 = v18;
  if (v18)
  {
    uint64_t v19 = v17;
    sub_100085CA8((uint64_t)a2, (uint64_t)v10, &qword_1002E03B8);
    uint64_t v13 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
    uint64_t v16 = *(void *)(v13 - 8);
    int v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v10, 1LL, v13);
    sub_100077CFC((uint64_t)v10, &qword_1002E03B8);
    if (v14 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()(a3, a4);
    }
    sub_100077CFC((uint64_t)a2, &qword_1002E03B8);
    *a2 = v19;
    a2[1] = v12;
    swift_storeEnumTagMultiPayload(a2, v13, 1LL);
    return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(a2, 0LL, 1LL, v13);
  }

  return result;
}

uint64_t sub_1000E7AE8(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100072CC4(&qword_1002E03B8);
  __chkstk_darwin(v8);
  char v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v17 = 2;
  uint64_t result = dispatch thunk of Decoder.decodeSingularBoolField(value:)(&v17, a3, a4);
  if (!v4)
  {
    char v12 = v17;
    if (v17 != 2)
    {
      sub_100085CA8((uint64_t)a2, (uint64_t)v10, &qword_1002E03B8);
      uint64_t v13 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
      uint64_t v16 = *(void *)(v13 - 8);
      int v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v10, 1LL, v13);
      sub_100077CFC((uint64_t)v10, &qword_1002E03B8);
      if (v14 != 1) {
        dispatch thunk of Decoder.handleConflictingOneOf()(a3, a4);
      }
      sub_100077CFC((uint64_t)a2, &qword_1002E03B8);
      *a2 = v12 & 1;
      swift_storeEnumTagMultiPayload(a2, v13, 2LL);
      return (*(uint64_t (**)(_BYTE *, void, uint64_t, uint64_t))(v16 + 56))(a2, 0LL, 1LL, v13);
    }
  }

  return result;
}

uint64_t sub_1000E7C5C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100072CC4(&qword_1002E03B8);
  __chkstk_darwin(v8);
  char v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = 0LL;
  char v17 = 1;
  uint64_t result = dispatch thunk of Decoder.decodeSingularDoubleField(value:)(&v16, a3, a4);
  if (!v4 && (v17 & 1) == 0)
  {
    uint64_t v12 = v16;
    sub_100085CA8((uint64_t)a2, (uint64_t)v10, &qword_1002E03B8);
    uint64_t v13 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
    uint64_t v14 = *(void *)(v13 - 8);
    int v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v10, 1LL, v13);
    sub_100077CFC((uint64_t)v10, &qword_1002E03B8);
    if (v15 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()(a3, a4);
    }
    sub_100077CFC((uint64_t)a2, &qword_1002E03B8);
    *a2 = v12;
    swift_storeEnumTagMultiPayload(a2, v13, 3LL);
    return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(a2, 0LL, 1LL, v13);
  }

  return result;
}

uint64_t sub_1000E7DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a3;
  uint64_t v50 = a4;
  uint64_t v51 = a2;
  uint64_t v5 = type metadata accessor for Strings(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  Swift::Int v43 = &v39[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v7);
  uint64_t v46 = &v39[-v9];
  uint64_t v10 = sub_100072CC4(&qword_1002E03B8);
  __chkstk_darwin(v10);
  uint64_t v12 = &v39[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  char v17 = &v39[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v15);
  uint64_t v19 = &v39[-v18];
  uint64_t v20 = sub_100072CC4(&qword_1002E2B28);
  uint64_t v21 = __chkstk_darwin(v20);
  int v44 = &v39[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v21);
  uint64_t v24 = &v39[-v23];
  uint64_t v45 = v6;
  int64_t v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  uint64_t v47 = v5;
  v25(&v39[-v23], 1LL, 1LL, v5);
  uint64_t v42 = a1;
  sub_100085CA8(a1, (uint64_t)v12, &qword_1002E03B8);
  uint64_t v41 = v14;
  int v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13);
  int v27 = v26;
  if (v26 == 1)
  {
    sub_100077CFC((uint64_t)v12, &qword_1002E03B8);
    uint64_t v29 = v49;
    uint64_t v28 = v50;
    uint64_t v30 = v13;
    uint64_t v32 = v47;
    uint64_t v31 = v48;
  }

  else
  {
    int v40 = v26;
    uint64_t v33 = (uint64_t)v46;
    sub_100085C04((uint64_t)v12, (uint64_t)v19, type metadata accessor for ConfigurationValue.OneOf_Value);
    sub_100085C04((uint64_t)v19, (uint64_t)v17, type metadata accessor for ConfigurationValue.OneOf_Value);
    uint64_t v30 = v13;
    if (swift_getEnumCaseMultiPayload(v17, v13) == 4)
    {
      sub_100077CFC((uint64_t)v24, &qword_1002E2B28);
      sub_100085C04((uint64_t)v17, v33, type metadata accessor for Strings);
      sub_100085C04(v33, (uint64_t)v24, type metadata accessor for Strings);
      uint64_t v32 = v47;
      v25(v24, 0LL, 1LL, v47);
      uint64_t v29 = v49;
      uint64_t v28 = v50;
    }

    else
    {
      sub_100077CC0((uint64_t)v17, type metadata accessor for ConfigurationValue.OneOf_Value);
      uint64_t v29 = v49;
      uint64_t v28 = v50;
      uint64_t v32 = v47;
    }

    uint64_t v31 = v48;
    int v27 = v40;
  }

  uint64_t v34 = sub_100073FE0(&qword_1002E24E0, type metadata accessor for Strings, (uint64_t)&unk_10024A3E4);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v24, v32, v34, v29, v28);
  if (v31) {
    return sub_100077CFC((uint64_t)v24, &qword_1002E2B28);
  }
  unint64_t v36 = v44;
  sub_100085CA8((uint64_t)v24, (uint64_t)v44, &qword_1002E2B28);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v45 + 48))(v36, 1LL, v32) == 1)
  {
    sub_100077CFC((uint64_t)v24, &qword_1002E2B28);
    return sub_100077CFC((uint64_t)v36, &qword_1002E2B28);
  }

  else
  {
    BOOL v37 = v43;
    sub_100085C04((uint64_t)v36, (uint64_t)v43, type metadata accessor for Strings);
    if (v27 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()(v29, v28);
    }
    sub_100077CFC((uint64_t)v24, &qword_1002E2B28);
    uint64_t v38 = v42;
    sub_100077CFC(v42, &qword_1002E03B8);
    sub_100085C04((uint64_t)v37, v38, type metadata accessor for Strings);
    swift_storeEnumTagMultiPayload(v38, v30, 4LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v38, 0LL, 1LL, v30);
  }

uint64_t sub_1000E8214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100072CC4(&qword_1002E03B8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100085CA8(v3, (uint64_t)v9, &qword_1002E03B8);
  uint64_t v10 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))(v9, 1LL, v10) != 1)
  {
    uint64_t v11 = (char *)&loc_1000E82E0 + 4 * byte_100249D19[swift_getEnumCaseMultiPayload(v9, v10)];
    __asm { BR              X10 }
  }

  type metadata accessor for ConfigurationValue(0LL);
  return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
}

void sub_1000E83AC()
{
  if (!v0) {
    JUMPOUT(0x1000E8364LL);
  }
  JUMPOUT(0x1000E838CLL);
}

uint64_t sub_1000E83E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100072CC4(&qword_1002E03B8);
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t *)((char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_100085CA8(a1, (uint64_t)v9, &qword_1002E03B8);
  uint64_t v10 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))(v9, 1LL, v10) == 1)
  {
    sub_100077CFC((uint64_t)v9, &qword_1002E03B8);
    __break(1u);
  }

  else if (!swift_getEnumCaseMultiPayload(v9, v10))
  {
    return dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(*v9, 100LL, a3, a4);
  }

  uint64_t result = sub_100077CC0((uint64_t)v9, type metadata accessor for ConfigurationValue.OneOf_Value);
  __break(1u);
  return result;
}

uint64_t sub_1000E84F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100072CC4(&qword_1002E03B8);
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t *)((char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_100085CA8(a1, (uint64_t)v9, &qword_1002E03B8);
  uint64_t v10 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))(v9, 1LL, v10) == 1)
  {
    sub_100077CFC((uint64_t)v9, &qword_1002E03B8);
    __break(1u);
  }

  else if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    uint64_t v11 = *v9;
    uint64_t v12 = v9[1];
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(v11, v12, 101LL, a3, a4);
    return swift_bridgeObjectRelease(v12);
  }

  uint64_t result = sub_100077CC0((uint64_t)v9, type metadata accessor for ConfigurationValue.OneOf_Value);
  __break(1u);
  return result;
}

uint64_t sub_1000E8618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100072CC4(&qword_1002E03B8);
  __chkstk_darwin(v7);
  uint64_t v9 = (unsigned __int8 *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100085CA8(a1, (uint64_t)v9, &qword_1002E03B8);
  uint64_t v10 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))(v9, 1LL, v10) == 1)
  {
    sub_100077CFC((uint64_t)v9, &qword_1002E03B8);
    __break(1u);
  }

  else if (swift_getEnumCaseMultiPayload(v9, v10) == 2)
  {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(*v9, 102LL, a3, a4);
  }

  uint64_t result = sub_100077CC0((uint64_t)v9, type metadata accessor for ConfigurationValue.OneOf_Value);
  __break(1u);
  return result;
}

uint64_t sub_1000E872C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100072CC4(&qword_1002E03B8);
  __chkstk_darwin(v7);
  uint64_t v9 = (double *)((char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_100085CA8(a1, (uint64_t)v9, &qword_1002E03B8);
  uint64_t v10 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  if ((*(unsigned int (**)(double *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))(v9, 1LL, v10) == 1)
  {
    sub_100077CFC((uint64_t)v9, &qword_1002E03B8);
    __break(1u);
  }

  else if (swift_getEnumCaseMultiPayload(v9, v10) == 3)
  {
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(103LL, a3, a4, *v9);
  }

  uint64_t result = sub_100077CC0((uint64_t)v9, type metadata accessor for ConfigurationValue.OneOf_Value);
  __break(1u);
  return result;
}

uint64_t sub_1000E8840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100072CC4(&qword_1002E03B8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Strings(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100085CA8(a1, (uint64_t)v9, &qword_1002E03B8);
  uint64_t v13 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48LL))(v9, 1LL, v13) == 1)
  {
    sub_100077CFC((uint64_t)v9, &qword_1002E03B8);
    __break(1u);
  }

  else if (swift_getEnumCaseMultiPayload(v9, v13) == 4)
  {
    sub_100085C04((uint64_t)v9, (uint64_t)v12, type metadata accessor for Strings);
    uint64_t v14 = sub_100073FE0(&qword_1002E24E0, type metadata accessor for Strings, (uint64_t)&unk_10024A3E4);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 104LL, v10, v14, a3, a4);
    return sub_100077CC0((uint64_t)v12, type metadata accessor for Strings);
  }

  uint64_t result = sub_100077CC0((uint64_t)v9, type metadata accessor for ConfigurationValue.OneOf_Value);
  __break(1u);
  return result;
}

Swift::Int sub_1000E89E4()
{
  return sub_100071C3C(type metadata accessor for ConfigurationValue, &qword_1002E2450, (uint64_t)&unk_10024A64C);
}

uint64_t sub_1000E8A00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(a1, 1LL, 1LL, v2);
  return UnknownStorage.init()(v3);
}

uint64_t sub_1000E8A50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E76DC(a1, a2, a3);
}

uint64_t sub_1000E8A64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E8214(a1, a2, a3);
}

uint64_t sub_1000E8A78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002E2AE0, type metadata accessor for ConfigurationValue, (uint64_t)&unk_10024A5C4);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000E8AC8@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E200(&qword_1002EC9E0, (uint64_t)qword_1002EF370, (uint64_t)sub_1000E749C, a1);
}

uint64_t sub_1000E8AE4(uint64_t a1)
{
  uint64_t v2 = sub_100073FE0(&qword_1002E24F8, type metadata accessor for ConfigurationValue, (uint64_t)&unk_10024A54C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E8B24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002E24F8, type metadata accessor for ConfigurationValue, (uint64_t)&unk_10024A54C);
  return Message.hash(into:)(a1, a2, v4);
}

const char *sub_1000E8B74()
{
  return "Condition";
}

uint64_t sub_1000E8B80()
{
  return 0x6F697469646E6F43LL;
}

uint64_t sub_1000E8B9C()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100077D38(v0, qword_1002EF388);
  sub_100072DEC(v0, (uint64_t)qword_1002EF388);
  uint64_t v1 = sub_100072CC4(&qword_1002DF238);
  uint64_t v2 = sub_100072CC4((uint64_t *)&unk_1002DF240);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 5 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_100248AF0;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "exclude";
  *(void *)(v9 + 8) = 7LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v7 + v6 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 100LL;
  *(void *)uint64_t v13 = "and";
  *(void *)(v13 + 8) = 3LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v7 + v6 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  void *v14 = 101LL;
  *(void *)uint64_t v15 = "or";
  *((void *)v15 + 1) = 2LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v7 + v6 + 3 * v4);
  char v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 102LL;
  *(void *)char v17 = "dsid";
  *((void *)v17 + 1) = 4LL;
  v17[16] = 2;
  v12();
  uint64_t v18 = v7 + v6 + 4 * v4 + *(int *)(v2 + 48);
  *(void *)(v8 + 4 * v4) = 103LL;
  *(void *)uint64_t v18 = "version";
  *(void *)(v18 + 8) = 7LL;
  *(_BYTE *)(v18 + 16) = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000E8DA0()
{
  return sub_10006E120(&qword_1002EC9E8, (uint64_t)qword_1002EF388, (uint64_t)sub_1000E8B9C);
}

uint64_t sub_1000E8DBC@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E17C(&qword_1002EC9E8, (uint64_t)qword_1002EF388, (uint64_t)sub_1000E8B9C, a1);
}

uint64_t sub_1000E8DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 'd':
          sub_1000E8EE8(v5, a1, a2, a3);
          break;
        case 'e':
          sub_1000E9304(v5, a1, a2, a3);
          break;
        case 'f':
          sub_1000E9724(v5, a1, a2, a3);
          break;
        case 'g':
          sub_1000E9B44(v5, a1, a2, a3);
          break;
        default:
          if (result == 1) {
            dispatch thunk of Decoder.decodeSingularBoolField(value:)(v5, a2, a3);
          }
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000E8EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v42 = a2;
  uint64_t v43 = a3;
  uint64_t v44 = a4;
  uint64_t v45 = a1;
  uint64_t v4 = type metadata accessor for Conditions(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v38 = (uint64_t)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v35 - v8;
  uint64_t v10 = sub_100072CC4(&qword_1002E2418);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Condition.OneOf_Condition(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  char v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v35 - v18;
  uint64_t v20 = sub_100072CC4(&qword_1002E2408);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v39 = (uint64_t)&v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v35 - v23;
  uint64_t v40 = v5;
  int64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v35 - v23, 1LL, 1LL, v4);
  uint64_t v36 = v45 + *(int *)(type metadata accessor for Condition(0LL) + 20);
  sub_100085CA8(v36, (uint64_t)v12, &qword_1002E2418);
  uint64_t v37 = v14;
  LODWORD(v45) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13);
  if ((_DWORD)v45 == 1)
  {
    sub_100077CFC((uint64_t)v12, &qword_1002E2418);
    uint64_t v27 = v43;
    uint64_t v26 = v44;
    uint64_t v28 = v13;
  }

  else
  {
    sub_100085C04((uint64_t)v12, (uint64_t)v19, type metadata accessor for Condition.OneOf_Condition);
    sub_100085C04((uint64_t)v19, (uint64_t)v17, type metadata accessor for Condition.OneOf_Condition);
    uint64_t v28 = v13;
    if (swift_getEnumCaseMultiPayload(v17, v13))
    {
      sub_100077CC0((uint64_t)v17, type metadata accessor for Condition.OneOf_Condition);
    }

    else
    {
      sub_100077CFC((uint64_t)v24, &qword_1002E2408);
      sub_100085C04((uint64_t)v17, (uint64_t)v9, type metadata accessor for Conditions);
      sub_100085C04((uint64_t)v9, (uint64_t)v24, type metadata accessor for Conditions);
      v25(v24, 0LL, 1LL, v4);
    }

    uint64_t v27 = v43;
    uint64_t v26 = v44;
  }

  uint64_t v29 = v41;
  uint64_t v30 = sub_100073FE0(&qword_1002E24C8, type metadata accessor for Conditions, (uint64_t)&unk_10024A27C);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v24, v4, v30, v27, v26);
  if (v29) {
    return sub_100077CFC((uint64_t)v24, &qword_1002E2408);
  }
  uint64_t v32 = v39;
  sub_100085CA8((uint64_t)v24, v39, &qword_1002E2408);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v32, 1LL, v4) == 1)
  {
    sub_100077CFC((uint64_t)v24, &qword_1002E2408);
    return sub_100077CFC(v32, &qword_1002E2408);
  }

  else
  {
    uint64_t v33 = v38;
    sub_100085C04(v32, v38, type metadata accessor for Conditions);
    if ((_DWORD)v45 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()(v27, v26);
    }
    sub_100077CFC((uint64_t)v24, &qword_1002E2408);
    uint64_t v34 = v36;
    sub_100077CFC(v36, &qword_1002E2418);
    sub_100085C04(v33, v34, type metadata accessor for Conditions);
    swift_storeEnumTagMultiPayload(v34, v28, 0LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v34, 0LL, 1LL, v28);
  }

uint64_t sub_1000E9304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v42 = a2;
  uint64_t v43 = a3;
  uint64_t v44 = a4;
  uint64_t v45 = a1;
  uint64_t v4 = type metadata accessor for Conditions(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v38 = (uint64_t)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v35 - v8;
  uint64_t v10 = sub_100072CC4(&qword_1002E2418);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Condition.OneOf_Condition(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  char v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v35 - v18;
  uint64_t v20 = sub_100072CC4(&qword_1002E2408);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v39 = (uint64_t)&v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v35 - v23;
  uint64_t v40 = v5;
  int64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v35 - v23, 1LL, 1LL, v4);
  uint64_t v36 = v45 + *(int *)(type metadata accessor for Condition(0LL) + 20);
  sub_100085CA8(v36, (uint64_t)v12, &qword_1002E2418);
  uint64_t v37 = v14;
  LODWORD(v45) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13);
  if ((_DWORD)v45 == 1)
  {
    sub_100077CFC((uint64_t)v12, &qword_1002E2418);
    uint64_t v27 = v43;
    uint64_t v26 = v44;
    uint64_t v28 = v13;
  }

  else
  {
    sub_100085C04((uint64_t)v12, (uint64_t)v19, type metadata accessor for Condition.OneOf_Condition);
    sub_100085C04((uint64_t)v19, (uint64_t)v17, type metadata accessor for Condition.OneOf_Condition);
    uint64_t v28 = v13;
    if (swift_getEnumCaseMultiPayload(v17, v13) == 1)
    {
      sub_100077CFC((uint64_t)v24, &qword_1002E2408);
      sub_100085C04((uint64_t)v17, (uint64_t)v9, type metadata accessor for Conditions);
      sub_100085C04((uint64_t)v9, (uint64_t)v24, type metadata accessor for Conditions);
      v25(v24, 0LL, 1LL, v4);
    }

    else
    {
      sub_100077CC0((uint64_t)v17, type metadata accessor for Condition.OneOf_Condition);
    }

    uint64_t v27 = v43;
    uint64_t v26 = v44;
  }

  uint64_t v29 = v41;
  uint64_t v30 = sub_100073FE0(&qword_1002E24C8, type metadata accessor for Conditions, (uint64_t)&unk_10024A27C);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v24, v4, v30, v27, v26);
  if (v29) {
    return sub_100077CFC((uint64_t)v24, &qword_1002E2408);
  }
  uint64_t v32 = v39;
  sub_100085CA8((uint64_t)v24, v39, &qword_1002E2408);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v32, 1LL, v4) == 1)
  {
    sub_100077CFC((uint64_t)v24, &qword_1002E2408);
    return sub_100077CFC(v32, &qword_1002E2408);
  }

  else
  {
    uint64_t v33 = v38;
    sub_100085C04(v32, v38, type metadata accessor for Conditions);
    if ((_DWORD)v45 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()(v27, v26);
    }
    sub_100077CFC((uint64_t)v24, &qword_1002E2408);
    uint64_t v34 = v36;
    sub_100077CFC(v36, &qword_1002E2418);
    sub_100085C04(v33, v34, type metadata accessor for Conditions);
    swift_storeEnumTagMultiPayload(v34, v28, 1LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v34, 0LL, 1LL, v28);
  }

uint64_t sub_1000E9724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v42 = a2;
  uint64_t v43 = a3;
  uint64_t v44 = a4;
  uint64_t v45 = a1;
  uint64_t v4 = type metadata accessor for ConditionDSID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v38 = (uint64_t)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v35 - v8;
  uint64_t v10 = sub_100072CC4(&qword_1002E2418);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Condition.OneOf_Condition(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  char v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v35 - v18;
  uint64_t v20 = sub_100072CC4(&qword_1002E2B10);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v39 = (uint64_t)&v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v35 - v23;
  uint64_t v40 = v5;
  int64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v35 - v23, 1LL, 1LL, v4);
  uint64_t v36 = v45 + *(int *)(type metadata accessor for Condition(0LL) + 20);
  sub_100085CA8(v36, (uint64_t)v12, &qword_1002E2418);
  uint64_t v37 = v14;
  LODWORD(v45) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13);
  if ((_DWORD)v45 == 1)
  {
    sub_100077CFC((uint64_t)v12, &qword_1002E2418);
    uint64_t v27 = v43;
    uint64_t v26 = v44;
    uint64_t v28 = v13;
  }

  else
  {
    sub_100085C04((uint64_t)v12, (uint64_t)v19, type metadata accessor for Condition.OneOf_Condition);
    sub_100085C04((uint64_t)v19, (uint64_t)v17, type metadata accessor for Condition.OneOf_Condition);
    uint64_t v28 = v13;
    if (swift_getEnumCaseMultiPayload(v17, v13) == 2)
    {
      sub_100077CFC((uint64_t)v24, &qword_1002E2B10);
      sub_100085C04((uint64_t)v17, (uint64_t)v9, type metadata accessor for ConditionDSID);
      sub_100085C04((uint64_t)v9, (uint64_t)v24, type metadata accessor for ConditionDSID);
      v25(v24, 0LL, 1LL, v4);
    }

    else
    {
      sub_100077CC0((uint64_t)v17, type metadata accessor for Condition.OneOf_Condition);
    }

    uint64_t v27 = v43;
    uint64_t v26 = v44;
  }

  uint64_t v29 = v41;
  uint64_t v30 = sub_100073FE0(&qword_1002E2520, type metadata accessor for ConditionDSID, (uint64_t)&unk_10024A81C);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v24, v4, v30, v27, v26);
  if (v29) {
    return sub_100077CFC((uint64_t)v24, &qword_1002E2B10);
  }
  uint64_t v32 = v39;
  sub_100085CA8((uint64_t)v24, v39, &qword_1002E2B10);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v32, 1LL, v4) == 1)
  {
    sub_100077CFC((uint64_t)v24, &qword_1002E2B10);
    return sub_100077CFC(v32, &qword_1002E2B10);
  }

  else
  {
    uint64_t v33 = v38;
    sub_100085C04(v32, v38, type metadata accessor for ConditionDSID);
    if ((_DWORD)v45 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()(v27, v26);
    }
    sub_100077CFC((uint64_t)v24, &qword_1002E2B10);
    uint64_t v34 = v36;
    sub_100077CFC(v36, &qword_1002E2418);
    sub_100085C04(v33, v34, type metadata accessor for ConditionDSID);
    swift_storeEnumTagMultiPayload(v34, v28, 2LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v34, 0LL, 1LL, v28);
  }

uint64_t sub_1000E9B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v42 = a2;
  uint64_t v43 = a3;
  uint64_t v44 = a4;
  uint64_t v45 = a1;
  uint64_t v4 = type metadata accessor for ConditionVersion(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v38 = (uint64_t)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v35 - v8;
  uint64_t v10 = sub_100072CC4(&qword_1002E2418);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Condition.OneOf_Condition(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  char v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v35 - v18;
  uint64_t v20 = sub_100072CC4(&qword_1002E2B18);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v39 = (uint64_t)&v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v35 - v23;
  uint64_t v40 = v5;
  int64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v25((char *)&v35 - v23, 1LL, 1LL, v4);
  uint64_t v36 = v45 + *(int *)(type metadata accessor for Condition(0LL) + 20);
  sub_100085CA8(v36, (uint64_t)v12, &qword_1002E2418);
  uint64_t v37 = v14;
  LODWORD(v45) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13);
  if ((_DWORD)v45 == 1)
  {
    sub_100077CFC((uint64_t)v12, &qword_1002E2418);
    uint64_t v27 = v43;
    uint64_t v26 = v44;
    uint64_t v28 = v13;
  }

  else
  {
    sub_100085C04((uint64_t)v12, (uint64_t)v19, type metadata accessor for Condition.OneOf_Condition);
    sub_100085C04((uint64_t)v19, (uint64_t)v17, type metadata accessor for Condition.OneOf_Condition);
    uint64_t v28 = v13;
    if (swift_getEnumCaseMultiPayload(v17, v13) == 3)
    {
      sub_100077CFC((uint64_t)v24, &qword_1002E2B18);
      sub_100085C04((uint64_t)v17, (uint64_t)v9, type metadata accessor for ConditionVersion);
      sub_100085C04((uint64_t)v9, (uint64_t)v24, type metadata accessor for ConditionVersion);
      v25(v24, 0LL, 1LL, v4);
    }

    else
    {
      sub_100077CC0((uint64_t)v17, type metadata accessor for Condition.OneOf_Condition);
    }

    uint64_t v27 = v43;
    uint64_t v26 = v44;
  }

  uint64_t v29 = v41;
  uint64_t v30 = sub_100073FE0(&qword_1002E2538, type metadata accessor for ConditionVersion, (uint64_t)&unk_10024A984);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)(v24, v4, v30, v27, v26);
  if (v29) {
    return sub_100077CFC((uint64_t)v24, &qword_1002E2B18);
  }
  uint64_t v32 = v39;
  sub_100085CA8((uint64_t)v24, v39, &qword_1002E2B18);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v32, 1LL, v4) == 1)
  {
    sub_100077CFC((uint64_t)v24, &qword_1002E2B18);
    return sub_100077CFC(v32, &qword_1002E2B18);
  }

  else
  {
    uint64_t v33 = v38;
    sub_100085C04(v32, v38, type metadata accessor for ConditionVersion);
    if ((_DWORD)v45 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()(v27, v26);
    }
    sub_100077CFC((uint64_t)v24, &qword_1002E2B18);
    uint64_t v34 = v36;
    sub_100077CFC(v36, &qword_1002E2418);
    sub_100085C04(v33, v34, type metadata accessor for ConditionVersion);
    swift_storeEnumTagMultiPayload(v34, v28, 3LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v34, 0LL, 1LL, v28);
  }

uint64_t sub_1000E9F64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = sub_100072CC4(&qword_1002E2418);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*v3 != 1
    || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1LL, 1LL, a2, a3), !v4))
  {
    uint64_t v12 = type metadata accessor for Condition(0LL);
    sub_100085CA8((uint64_t)&v3[*(int *)(v12 + 20)], (uint64_t)v10, &qword_1002E2418);
    uint64_t v13 = type metadata accessor for Condition.OneOf_Condition(0LL);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48LL))(v10, 1LL, v13) != 1)
    {
      uint64_t v14 = (char *)&loc_1000EA074 + 4 * byte_100249D22[swift_getEnumCaseMultiPayload(v10, v13)];
      __asm { BR              X10 }
    }

    return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
  }

  return result;
}

uint64_t sub_1000EA13C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100072CC4(&qword_1002E2418);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Conditions(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Condition(0LL);
  sub_100085CA8(a1 + *(int *)(v13 + 20), (uint64_t)v9, &qword_1002E2418);
  uint64_t v14 = type metadata accessor for Condition.OneOf_Condition(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48LL))(v9, 1LL, v14) == 1)
  {
    sub_100077CFC((uint64_t)v9, &qword_1002E2418);
    __break(1u);
  }

  else if (!swift_getEnumCaseMultiPayload(v9, v14))
  {
    sub_100085C04((uint64_t)v9, (uint64_t)v12, type metadata accessor for Conditions);
    uint64_t v15 = sub_100073FE0(&qword_1002E24C8, type metadata accessor for Conditions, (uint64_t)&unk_10024A27C);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 100LL, v10, v15, a3, a4);
    return sub_100077CC0((uint64_t)v12, type metadata accessor for Conditions);
  }

  uint64_t result = sub_100077CC0((uint64_t)v9, type metadata accessor for Condition.OneOf_Condition);
  __break(1u);
  return result;
}

uint64_t sub_1000EA2E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100072CC4(&qword_1002E2418);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Conditions(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Condition(0LL);
  sub_100085CA8(a1 + *(int *)(v13 + 20), (uint64_t)v9, &qword_1002E2418);
  uint64_t v14 = type metadata accessor for Condition.OneOf_Condition(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48LL))(v9, 1LL, v14) == 1)
  {
    sub_100077CFC((uint64_t)v9, &qword_1002E2418);
    __break(1u);
  }

  else if (swift_getEnumCaseMultiPayload(v9, v14) == 1)
  {
    sub_100085C04((uint64_t)v9, (uint64_t)v12, type metadata accessor for Conditions);
    uint64_t v15 = sub_100073FE0(&qword_1002E24C8, type metadata accessor for Conditions, (uint64_t)&unk_10024A27C);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 101LL, v10, v15, a3, a4);
    return sub_100077CC0((uint64_t)v12, type metadata accessor for Conditions);
  }

  uint64_t result = sub_100077CC0((uint64_t)v9, type metadata accessor for Condition.OneOf_Condition);
  __break(1u);
  return result;
}

uint64_t sub_1000EA490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100072CC4(&qword_1002E2418);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for ConditionDSID(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Condition(0LL);
  sub_100085CA8(a1 + *(int *)(v13 + 20), (uint64_t)v9, &qword_1002E2418);
  uint64_t v14 = type metadata accessor for Condition.OneOf_Condition(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48LL))(v9, 1LL, v14) == 1)
  {
    sub_100077CFC((uint64_t)v9, &qword_1002E2418);
    __break(1u);
  }

  else if (swift_getEnumCaseMultiPayload(v9, v14) == 2)
  {
    sub_100085C04((uint64_t)v9, (uint64_t)v12, type metadata accessor for ConditionDSID);
    uint64_t v15 = sub_100073FE0(&qword_1002E2520, type metadata accessor for ConditionDSID, (uint64_t)&unk_10024A81C);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 102LL, v10, v15, a3, a4);
    return sub_100077CC0((uint64_t)v12, type metadata accessor for ConditionDSID);
  }

  uint64_t result = sub_100077CC0((uint64_t)v9, type metadata accessor for Condition.OneOf_Condition);
  __break(1u);
  return result;
}

uint64_t sub_1000EA63C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100072CC4(&qword_1002E2418);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for ConditionVersion(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Condition(0LL);
  sub_100085CA8(a1 + *(int *)(v13 + 20), (uint64_t)v9, &qword_1002E2418);
  uint64_t v14 = type metadata accessor for Condition.OneOf_Condition(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48LL))(v9, 1LL, v14) == 1)
  {
    sub_100077CFC((uint64_t)v9, &qword_1002E2418);
    __break(1u);
  }

  else if (swift_getEnumCaseMultiPayload(v9, v14) == 3)
  {
    sub_100085C04((uint64_t)v9, (uint64_t)v12, type metadata accessor for ConditionVersion);
    uint64_t v15 = sub_100073FE0(&qword_1002E2538, type metadata accessor for ConditionVersion, (uint64_t)&unk_10024A984);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)(v12, 103LL, v10, v15, a3, a4);
    return sub_100077CC0((uint64_t)v12, type metadata accessor for ConditionVersion);
  }

  uint64_t result = sub_100077CC0((uint64_t)v9, type metadata accessor for Condition.OneOf_Condition);
  __break(1u);
  return result;
}

Swift::Int sub_1000EA7EC()
{
  return sub_100071C3C(type metadata accessor for Condition, &qword_1002E2458, (uint64_t)&unk_10024A7B4);
}

uint64_t sub_1000EA808@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = 0;
  uint64_t v2 = &a2[*(int *)(a1 + 20)];
  uint64_t v3 = type metadata accessor for Condition.OneOf_Condition(0LL);
  uint64_t v4 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
  return UnknownStorage.init()(v4);
}

uint64_t sub_1000EA86C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E8DD8(a1, a2, a3);
}

uint64_t sub_1000EA880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E9F64(a1, a2, a3);
}

uint64_t sub_1000EA894(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002E2AD8, type metadata accessor for Condition, (uint64_t)&unk_10024A72C);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000EA8E4@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E200(&qword_1002EC9E8, (uint64_t)qword_1002EF388, (uint64_t)sub_1000E8B9C, a1);
}

uint64_t sub_1000EA900(uint64_t a1)
{
  uint64_t v2 = sub_100073FE0(&qword_1002E2438, type metadata accessor for Condition, (uint64_t)&unk_10024A6B4);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000EA940(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002E2438, type metadata accessor for Condition, (uint64_t)&unk_10024A6B4);
  return Message.hash(into:)(a1, a2, v4);
}

const char *sub_1000EA990()
{
  return "ConditionDSID";
}

uint64_t sub_1000EA99C()
{
  return 0x6F697469646E6F43LL;
}

uint64_t sub_1000EA9C0()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100077D38(v0, qword_1002EF3A0);
  sub_100072DEC(v0, (uint64_t)qword_1002EF3A0);
  uint64_t v1 = sub_100072CC4(&qword_1002DF238);
  uint64_t v2 = sub_100072CC4((uint64_t *)&unk_1002DF240);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 2 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_1002464D0;
  uint64_t v8 = (void *)(v7 + v6);
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *uint64_t v8 = 1LL;
  *(void *)uint64_t v9 = "mod";
  *(void *)(v9 + 8) = 3LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v4 + *(int *)(v2 + 48);
  *(void *)((char *)v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "limit";
  *((void *)v13 + 1) = 5LL;
  v13[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000EAB10()
{
  return sub_10006E120(&qword_1002EC9F0, (uint64_t)qword_1002EF3A0, (uint64_t)sub_1000EA9C0);
}

uint64_t sub_1000EAB2C@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E17C(&qword_1002EC9F0, (uint64_t)qword_1002EF3A0, (uint64_t)sub_1000EA9C0, a1);
}

uint64_t sub_1000EAB48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  if (!v4)
  {
    while (1)
    {
      if ((v8 & 1) != 0) {
        return result;
      }
      if (result == 2) {
        break;
      }
      if (result == 1)
      {
        uint64_t v9 = v3;
        goto LABEL_5;
      }

uint64_t sub_1000EABD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(*v3, 1LL, a2, a3), !v4))
  {
    uint64_t v9 = v3[1];
    if (!v9 || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(v9, 2LL, a2, a3), !v4))
    {
      type metadata accessor for ConditionDSID(0LL);
      return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
    }
  }

  return result;
}

Swift::Int sub_1000EAC90()
{
  return sub_100071C3C(type metadata accessor for ConditionDSID, &qword_1002E2460, (uint64_t)&unk_10024A91C);
}

uint64_t sub_1000EACAC@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  return UnknownStorage.init()();
}

uint64_t sub_1000EACCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EAB48(a1, a2, a3);
}

uint64_t sub_1000EACE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EABD8(a1, a2, a3);
}

uint64_t sub_1000EACF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002E2AD0, type metadata accessor for ConditionDSID, (uint64_t)&unk_10024A894);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000EAD44@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E200(&qword_1002EC9F0, (uint64_t)qword_1002EF3A0, (uint64_t)sub_1000EA9C0, a1);
}

uint64_t sub_1000EAD60(uint64_t a1)
{
  uint64_t v2 = sub_100073FE0(&qword_1002E2520, type metadata accessor for ConditionDSID, (uint64_t)&unk_10024A81C);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000EADA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002E2520, type metadata accessor for ConditionDSID, (uint64_t)&unk_10024A81C);
  return Message.hash(into:)(a1, a2, v4);
}

void *sub_1000EADF0()
{
  return &unk_100280EB8;
}

unint64_t sub_1000EADFC()
{
  return 0xD000000000000010LL;
}

uint64_t sub_1000EAE18()
{
  uint64_t v0 = type metadata accessor for _NameMap(0LL);
  sub_100077D38(v0, qword_1002EF3B8);
  sub_100072DEC(v0, (uint64_t)qword_1002EF3B8);
  uint64_t v1 = sub_100072CC4(&qword_1002DF238);
  uint64_t v2 = sub_100072CC4((uint64_t *)&unk_1002DF240);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v1, v6 + 4 * v4, v5 | 7);
  *(_OWORD *)(v7 + 16) = xmmword_100246500;
  uint64_t v8 = v7 + v6;
  uint64_t v9 = v7 + v6 + *(int *)(v2 + 48);
  *(void *)(v7 + v6) = 1LL;
  *(void *)uint64_t v9 = "platform";
  *(void *)(v9 + 8) = 8LL;
  *(_BYTE *)(v9 + 16) = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription(0LL);
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104LL);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = v8 + v4 + *(int *)(v2 + 48);
  *(void *)(v8 + v4) = 2LL;
  *(void *)uint64_t v13 = "seed";
  *(void *)(v13 + 8) = 4LL;
  *(_BYTE *)(v13 + 16) = 2;
  v12();
  uint64_t v14 = (void *)(v8 + 2 * v4);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 48);
  void *v14 = 3LL;
  *(void *)uint64_t v15 = "major";
  *((void *)v15 + 1) = 5LL;
  v15[16] = 2;
  v12();
  uint64_t v16 = (void *)(v8 + 3 * v4);
  char v17 = (char *)v16 + *(int *)(v2 + 48);
  *uint64_t v16 = 4LL;
  *(void *)char v17 = "minor";
  *((void *)v17 + 1) = 5LL;
  v17[16] = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)(v7);
}

uint64_t sub_1000EAFDC()
{
  return sub_10006E120(qword_1002EC9F8, (uint64_t)qword_1002EF3B8, (uint64_t)sub_1000EAE18);
}

uint64_t sub_1000EAFF8@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E17C(qword_1002EC9F8, (uint64_t)qword_1002EF3B8, (uint64_t)sub_1000EAE18, a1);
}

uint64_t sub_1000EB014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
  uint64_t v9 = v4;
  if (!v4)
  {
    while ((v8 & 1) == 0)
    {
      switch(result)
      {
        case 1LL:
          unint64_t v10 = sub_1000ED85C();
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)( v3,  &type metadata for ConditionPlatform,  v10,  a2,  a3);
          goto LABEL_5;
        case 2LL:
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)(v3 + 9, a2, a3);
          goto LABEL_5;
        case 3LL:
          uint64_t v12 = v3 + 16;
          goto LABEL_12;
        case 4LL:
          uint64_t v12 = v3 + 24;
LABEL_12:
          uint64_t v11 = v9;
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)(v12, a2, a3);
LABEL_5:
          uint64_t v9 = v11;
          break;
        default:
          break;
      }

      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()(a2, a3);
    }
  }

  return result;
}

uint64_t sub_1000EB128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  if (!*v5
    || (char v9 = *((_BYTE *)v5 + 8),
        uint64_t v14 = *v5,
        char v15 = v9,
        unint64_t v10 = sub_1000ED85C(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)( &v14,  1LL,  &type metadata for ConditionPlatform,  v10,  a2,  a3),  !v4))
  {
    if (*((_BYTE *)v5 + 9) != 1
      || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(1LL, 2LL, a2, a3), !v4))
    {
      uint64_t v12 = v5[2];
      if (!v12
        || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(v12, 3LL, a2, a3), !v4))
      {
        uint64_t v13 = v5[3];
        if (!v13
          || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(v13, 4LL, a2, a3), !v4))
        {
          type metadata accessor for ConditionVersion(0LL);
          return UnknownStorage.traverse<A>(visitor:)(a1, a2, a3);
        }
      }
    }
  }

  return result;
}

Swift::Int sub_1000EB254()
{
  return sub_100071C3C(type metadata accessor for ConditionVersion, &qword_1002E2470, (uint64_t)&unk_10024AA84);
}

uint64_t sub_1000EB270@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_WORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  return UnknownStorage.init()();
}

uint64_t sub_1000EB29C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EB014(a1, a2, a3);
}

uint64_t sub_1000EB2B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EB128(a1, a2, a3);
}

uint64_t sub_1000EB2C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002E2AC8, type metadata accessor for ConditionVersion, (uint64_t)&unk_10024A9FC);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000EB314@<X0>(uint64_t a1@<X8>)
{
  return sub_10006E200(qword_1002EC9F8, (uint64_t)qword_1002EF3B8, (uint64_t)sub_1000EAE18, a1);
}

uint64_t sub_1000EB330(uint64_t a1)
{
  uint64_t v2 = sub_100073FE0(&qword_1002E2538, type metadata accessor for ConditionVersion, (uint64_t)&unk_10024A984);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000EB370(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100073FE0(&qword_1002E2538, type metadata accessor for ConditionVersion, (uint64_t)&unk_10024A984);
  return Message.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000EB3C0(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  BOOL v9 = v5 == v7 && v6 == v8;
  if (v9 || (char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0LL), result = 0LL, (v10 & 1) != 0))
  {
    uint64_t v12 = v2 - 1;
    if (!v12) {
      return 1LL;
    }
    uint64_t v13 = a2 + 7;
    for (uint64_t i = a1 + 7; ; i += 2)
    {
      uint64_t v15 = *(i - 1);
      uint64_t v16 = *i;
      uint64_t v17 = *(v13 - 1);
      uint64_t v18 = *v13;
      BOOL v19 = v15 == v17 && v16 == v18;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0LL) & 1) == 0) {
        break;
      }
      v13 += 2;
      if (!--v12) {
        return 1LL;
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_1000EB484(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DewValue(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v5);
  char v10 = (uint64_t *)((char *)&v19 - v9);
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }

    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_100077C7C(a1 + v12, (uint64_t)v10, type metadata accessor for DewValue);
        sub_100077C7C(a2 + v12, (uint64_t)v7, type metadata accessor for DewValue);
        char v15 = sub_1000EC1F0(v10, v7);
        sub_100077CC0((uint64_t)v7, type metadata accessor for DewValue);
        sub_100077CC0((uint64_t)v10, type metadata accessor for DewValue);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }

      while (v17);
    }
  }

  else
  {
    char v15 = 0;
  }

  return v15 & 1;
}

uint64_t sub_1000EB5C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Condition.OneOf_Condition(0LL);
  uint64_t v38 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v35 = (uint64_t)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100072CC4(&qword_1002E2418);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = sub_100072CC4(&qword_1002E2B08);
  __chkstk_darwin(v37);
  char v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = type metadata accessor for Condition(0LL);
  uint64_t v11 = __chkstk_darwin(v42);
  uint64_t v13 = (unsigned __int8 *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v16 = (unsigned __int8 *)&v35 - v15;
  uint64_t v39 = a1;
  uint64_t v40 = a2;
  uint64_t v17 = *(void *)(a1 + 16);
  if (v17 != *(void *)(a2 + 16))
  {
LABEL_18:
    char v33 = 0;
    return v33 & 1;
  }

  if (v17 && v39 != v40)
  {
    unint64_t v18 = (*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    uint64_t v36 = *(void *)(v14 + 72);
    uint64_t v19 = v17 - 1;
    while (1)
    {
      uint64_t v41 = v19;
      sub_100077C7C(v39 + v18, (uint64_t)v16, type metadata accessor for Condition);
      sub_100077C7C(v40 + v18, (uint64_t)v13, type metadata accessor for Condition);
      if (*v16 != *v13) {
        break;
      }
      uint64_t v20 = *(int *)(v42 + 20);
      uint64_t v21 = (uint64_t)&v13[v20];
      uint64_t v22 = (uint64_t)&v10[*(int *)(v37 + 48)];
      sub_100085CA8((uint64_t)&v16[v20], (uint64_t)v10, &qword_1002E2418);
      sub_100085CA8(v21, v22, &qword_1002E2418);
      uint64_t v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
      if (v23((uint64_t)v10, 1LL, v4) == 1)
      {
        if (v23(v22, 1LL, v4) != 1) {
          goto LABEL_16;
        }
        sub_100077CFC((uint64_t)v10, &qword_1002E2418);
      }

      else
      {
        sub_100085CA8((uint64_t)v10, (uint64_t)v8, &qword_1002E2418);
        if (v23(v22, 1LL, v4) == 1)
        {
          sub_100077CC0((uint64_t)v8, type metadata accessor for Condition.OneOf_Condition);
LABEL_16:
          sub_100077CFC((uint64_t)v10, &qword_1002E2B08);
          break;
        }

        uint64_t v24 = v35;
        sub_100085C04(v22, v35, type metadata accessor for Condition.OneOf_Condition);
        sub_1000ECC5C((uint64_t)v8, v24);
        char v26 = v25;
        sub_100077CC0(v24, type metadata accessor for Condition.OneOf_Condition);
        sub_100077CC0((uint64_t)v8, type metadata accessor for Condition.OneOf_Condition);
        sub_100077CFC((uint64_t)v10, &qword_1002E2418);
        if ((v26 & 1) == 0) {
          break;
        }
      }

      uint64_t v27 = v10;
      uint64_t v28 = *(int *)(v42 + 24);
      uint64_t v29 = &v16[v28];
      uint64_t v30 = &v13[v28];
      uint64_t v31 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v32 = sub_100073FE0( &qword_1002DF228,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
      char v33 = dispatch thunk of static Equatable.== infix(_:_:)(v29, v30, v31, v32);
      sub_100077CC0((uint64_t)v13, type metadata accessor for Condition);
      sub_100077CC0((uint64_t)v16, type metadata accessor for Condition);
      uint64_t v19 = v41 - 1;
      if ((v33 & 1) != 0)
      {
        v18 += v36;
        char v10 = v27;
        if (v41) {
          continue;
        }
      }

      return v33 & 1;
    }

    sub_100077CC0((uint64_t)v13, type metadata accessor for Condition);
    sub_100077CC0((uint64_t)v16, type metadata accessor for Condition);
    goto LABEL_18;
  }

  char v33 = 1;
  return v33 & 1;
}

  ;
}

uint64_t type metadata accessor for CloudConfiguration(uint64_t a1)
{
  return sub_100072DB8(a1, (uint64_t *)&unk_1002EE600, (uint64_t)&nominal type descriptor for CloudConfiguration);
}

uint64_t type metadata accessor for DewValue(uint64_t a1)
{
  return sub_100072DB8(a1, (uint64_t *)&unk_1002EE610, (uint64_t)&nominal type descriptor for DewValue);
}

uint64_t type metadata accessor for Conditions(uint64_t a1)
{
  return sub_100072DB8(a1, (uint64_t *)&unk_1002EE620, (uint64_t)&nominal type descriptor for Conditions);
}

uint64_t type metadata accessor for ConfigurationValue(uint64_t a1)
{
  return sub_100072DB8(a1, (uint64_t *)&unk_1002EE640, (uint64_t)&nominal type descriptor for ConfigurationValue);
}

uint64_t type metadata accessor for ConfigurationValue.OneOf_Value(uint64_t a1)
{
  return sub_100072DB8( a1,  (uint64_t *)&unk_1002EE650,  (uint64_t)&nominal type descriptor for ConfigurationValue.OneOf_Value);
}

uint64_t type metadata accessor for Strings(uint64_t a1)
{
  return sub_100072DB8(a1, (uint64_t *)&unk_1002EE630, (uint64_t)&nominal type descriptor for Strings);
}

uint64_t sub_1000EBA24()
{
  uint64_t v0 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v50 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v49 = (char *)&v43 - v4;
  uint64_t v5 = type metadata accessor for Condition.OneOf_Condition(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100072CC4(&qword_1002E2B08);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100072CC4(&qword_1002E2418);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  unint64_t v18 = (char *)&v43 - v17;
  __chkstk_darwin(v16);
  uint64_t v22 = (char *)&v43 - v21;
  if (*v20 != *v19) {
    goto LABEL_10;
  }
  uint64_t v43 = v8;
  uint64_t v47 = v1;
  uint64_t v48 = v0;
  uint64_t v23 = v20;
  uint64_t v24 = v19;
  uint64_t v25 = type metadata accessor for Condition(0LL);
  uint64_t v26 = *(int *)(v25 + 20);
  uint64_t v45 = v23;
  sub_100085CA8((uint64_t)&v23[v26], (uint64_t)v22, &qword_1002E2418);
  uint64_t v44 = v25;
  uint64_t v27 = *(int *)(v25 + 20);
  uint64_t v46 = v24;
  sub_100085CA8((uint64_t)&v24[v27], (uint64_t)v18, &qword_1002E2418);
  uint64_t v28 = (uint64_t)&v11[*(int *)(v9 + 48)];
  sub_100085CA8((uint64_t)v22, (uint64_t)v11, &qword_1002E2418);
  sub_100085CA8((uint64_t)v18, v28, &qword_1002E2418);
  uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v29((uint64_t)v11, 1LL, v5) != 1)
  {
    sub_100085CA8((uint64_t)v11, (uint64_t)v15, &qword_1002E2418);
    if (v29(v28, 1LL, v5) != 1)
    {
      uint64_t v30 = (uint64_t)v43;
      sub_100085C04(v28, (uint64_t)v43, type metadata accessor for Condition.OneOf_Condition);
      sub_1000ECC5C((uint64_t)v15, v30);
      char v32 = v31;
      sub_100077CC0(v30, type metadata accessor for Condition.OneOf_Condition);
      sub_100077CFC((uint64_t)v18, &qword_1002E2418);
      sub_100077CFC((uint64_t)v22, &qword_1002E2418);
      sub_100077CC0((uint64_t)v15, type metadata accessor for Condition.OneOf_Condition);
      sub_100077CFC((uint64_t)v11, &qword_1002E2418);
      if ((v32 & 1) != 0) {
        goto LABEL_9;
      }
LABEL_10:
      char v40 = 0;
      return v40 & 1;
    }

    sub_100077CFC((uint64_t)v18, &qword_1002E2418);
    sub_100077CFC((uint64_t)v22, &qword_1002E2418);
    sub_100077CC0((uint64_t)v15, type metadata accessor for Condition.OneOf_Condition);
LABEL_7:
    sub_100077CFC((uint64_t)v11, &qword_1002E2B08);
    goto LABEL_10;
  }

  sub_100077CFC((uint64_t)v18, &qword_1002E2418);
  sub_100077CFC((uint64_t)v22, &qword_1002E2418);
  if (v29(v28, 1LL, v5) != 1) {
    goto LABEL_7;
  }
  sub_100077CFC((uint64_t)v11, &qword_1002E2418);
LABEL_9:
  uint64_t v33 = v44;
  uint64_t v35 = v47;
  uint64_t v34 = v48;
  uint64_t v36 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v47 + 16);
  uint64_t v37 = v49;
  v36(v49, &v45[*(int *)(v44 + 24)], v48);
  uint64_t v38 = v50;
  v36(v50, &v46[*(int *)(v33 + 24)], v34);
  uint64_t v39 = sub_100073FE0( &qword_1002DF228,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v40 = dispatch thunk of static Equatable.== infix(_:_:)(v37, v38, v34, v39);
  uint64_t v41 = *(void (**)(char *, uint64_t))(v35 + 8);
  v41(v38, v34);
  v41(v37, v34);
  return v40 & 1;
}

uint64_t sub_1000EBE28(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v44 = *(void *)(v40 - 8);
  uint64_t v4 = __chkstk_darwin(v40);
  uint64_t v43 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v42 = (char *)&v37 - v6;
  uint64_t v7 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v38 = (uint64_t)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100072CC4(&qword_1002E2B20);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100072CC4(&qword_1002E03B8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v37 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v37 - v20;
  uint64_t v39 = a1;
  sub_100085CA8(a1, (uint64_t)&v37 - v20, &qword_1002E03B8);
  uint64_t v41 = a2;
  sub_100085CA8(a2, (uint64_t)v19, &qword_1002E03B8);
  uint64_t v22 = (uint64_t)&v12[*(int *)(v10 + 48)];
  sub_100085CA8((uint64_t)v21, (uint64_t)v12, &qword_1002E03B8);
  sub_100085CA8((uint64_t)v19, v22, &qword_1002E03B8);
  uint64_t v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v23((uint64_t)v12, 1LL, v7) != 1)
  {
    sub_100085CA8((uint64_t)v12, (uint64_t)v16, &qword_1002E03B8);
    if (v23(v22, 1LL, v7) != 1)
    {
      uint64_t v24 = v38;
      sub_100085C04(v22, v38, type metadata accessor for ConfigurationValue.OneOf_Value);
      sub_1000ED378((uint64_t)v16, v24);
      char v26 = v25;
      sub_100077CC0(v24, type metadata accessor for ConfigurationValue.OneOf_Value);
      sub_100077CFC((uint64_t)v19, &qword_1002E03B8);
      sub_100077CFC((uint64_t)v21, &qword_1002E03B8);
      sub_100077CC0((uint64_t)v16, type metadata accessor for ConfigurationValue.OneOf_Value);
      sub_100077CFC((uint64_t)v12, &qword_1002E03B8);
      if ((v26 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_9:
      char v34 = 0;
      return v34 & 1;
    }

    sub_100077CFC((uint64_t)v19, &qword_1002E03B8);
    sub_100077CFC((uint64_t)v21, &qword_1002E03B8);
    sub_100077CC0((uint64_t)v16, type metadata accessor for ConfigurationValue.OneOf_Value);
LABEL_6:
    sub_100077CFC((uint64_t)v12, &qword_1002E2B20);
    goto LABEL_9;
  }

  sub_100077CFC((uint64_t)v19, &qword_1002E03B8);
  sub_100077CFC((uint64_t)v21, &qword_1002E03B8);
  if (v23(v22, 1LL, v7) != 1) {
    goto LABEL_6;
  }
  sub_100077CFC((uint64_t)v12, &qword_1002E03B8);
LABEL_8:
  uint64_t v27 = type metadata accessor for ConfigurationValue(0LL);
  uint64_t v28 = v40;
  uint64_t v29 = v44;
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
  char v31 = v42;
  v30(v42, v39 + *(int *)(v27 + 20), v40);
  char v32 = v43;
  v30(v43, v41 + *(int *)(v27 + 20), v28);
  uint64_t v33 = sub_100073FE0( &qword_1002DF228,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
  char v34 = dispatch thunk of static Equatable.== infix(_:_:)(v31, v32, v28, v33);
  uint64_t v35 = *(void (**)(char *, uint64_t))(v29 + 8);
  v35(v32, v28);
  v35(v31, v28);
  return v34 & 1;
}

uint64_t sub_1000EC1F0(void *a1, void *a2)
{
  uint64_t v77 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v75 = *(void *)(v77 - 8);
  uint64_t v4 = __chkstk_darwin(v77);
  id v74 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v73 = (char *)&v69 - v6;
  uint64_t v82 = type metadata accessor for ConfigurationValue(0LL);
  uint64_t v79 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v72 = (uint64_t)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v78 = sub_100072CC4(&qword_1002E2B30);
  __chkstk_darwin(v78);
  uint64_t v83 = (uint64_t)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100072CC4(&qword_1002E2410);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v76 = (uint64_t)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v80 = (uint64_t)&v69 - v13;
  __chkstk_darwin(v12);
  uint64_t v81 = (uint64_t)&v69 - v14;
  uint64_t v15 = type metadata accessor for Conditions(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v19 = sub_100072CC4(&qword_1002E2B38);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_100072CC4(&qword_1002E2408);
  uint64_t v23 = __chkstk_darwin(v22);
  char v25 = (uint64_t *)((char *)&v69 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v26 = __chkstk_darwin(v23);
  uint64_t v28 = (char *)&v69 - v27;
  __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v69 - v29;
  uint64_t v31 = *a1;
  uint64_t v32 = a1[1];
  uint64_t v33 = *a2;
  uint64_t v34 = a2[1];
  char v84 = a2;
  if (v31 == v33 && v32 == v34
    || (char v35 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, v33, v34, 0LL) & 1) != 0))
  {
    if (a1[2] != v84[2])
    {
LABEL_22:
      char v35 = 0;
      return v35 & 1;
    }

    uint64_t v69 = v18;
    uint64_t v36 = a1;
    uint64_t v37 = v84;
    uint64_t v38 = type metadata accessor for DewValue(0LL);
    uint64_t v39 = *(int *)(v38 + 28);
    uint64_t v71 = v36;
    sub_100085CA8((uint64_t)v36 + v39, (uint64_t)v30, &qword_1002E2408);
    uint64_t v70 = v38;
    sub_100085CA8((uint64_t)v37 + *(int *)(v38 + 28), (uint64_t)v28, &qword_1002E2408);
    uint64_t v40 = (uint64_t)&v21[*(int *)(v19 + 48)];
    sub_100085CA8((uint64_t)v30, (uint64_t)v21, &qword_1002E2408);
    sub_100085CA8((uint64_t)v28, v40, &qword_1002E2408);
    uint64_t v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
    if (v41((uint64_t)v21, 1LL, v15) == 1)
    {
      sub_100077CFC((uint64_t)v28, &qword_1002E2408);
      sub_100077CFC((uint64_t)v30, &qword_1002E2408);
      if (v41(v40, 1LL, v15) == 1)
      {
        sub_100077CFC((uint64_t)v21, &qword_1002E2408);
LABEL_8:
        uint64_t v43 = v70;
        uint64_t v42 = v71;
        uint64_t v44 = v81;
        sub_100085CA8((uint64_t)v71 + *(int *)(v70 + 32), v81, &qword_1002E2410);
        uint64_t v45 = v80;
        sub_100085CA8((uint64_t)v84 + *(int *)(v43 + 32), v80, &qword_1002E2410);
        uint64_t v46 = v83;
        uint64_t v47 = v83 + *(int *)(v78 + 48);
        sub_100085CA8(v44, v83, &qword_1002E2410);
        sub_100085CA8(v45, v47, &qword_1002E2410);
        uint64_t v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48);
        uint64_t v49 = v82;
        if (v48(v46, 1LL, v82) == 1)
        {
          sub_100077CFC(v45, &qword_1002E2410);
          sub_100077CFC(v44, &qword_1002E2410);
          if (v48(v47, 1LL, v49) == 1)
          {
            sub_100077CFC(v46, &qword_1002E2410);
LABEL_25:
            uint64_t v61 = (uint64_t)v42 + *(int *)(v43 + 24);
            uint64_t v62 = v75;
            uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t))(v75 + 16);
            uint64_t v64 = v73;
            uint64_t v65 = v77;
            v63(v73, v61, v77);
            id v66 = v74;
            v63(v74, (uint64_t)v84 + *(int *)(v43 + 24), v65);
            uint64_t v67 = sub_100073FE0( &qword_1002DF228,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
            char v35 = dispatch thunk of static Equatable.== infix(_:_:)(v64, v66, v65, v67);
            int v68 = *(void (**)(char *, uint64_t))(v62 + 8);
            v68(v66, v65);
            v68(v64, v65);
            return v35 & 1;
          }
        }

        else
        {
          uint64_t v57 = v76;
          sub_100085CA8(v46, v76, &qword_1002E2410);
          if (v48(v47, 1LL, v49) != 1)
          {
            uint64_t v59 = v72;
            sub_100085C04(v47, v72, type metadata accessor for ConfigurationValue);
            char v60 = sub_1000EBE28(v57, v59);
            sub_100077CC0(v59, type metadata accessor for ConfigurationValue);
            sub_100077CFC(v45, &qword_1002E2410);
            sub_100077CFC(v44, &qword_1002E2410);
            sub_100077CC0(v57, type metadata accessor for ConfigurationValue);
            sub_100077CFC(v46, &qword_1002E2410);
            if ((v60 & 1) != 0) {
              goto LABEL_25;
            }
            goto LABEL_22;
          }

          sub_100077CFC(v45, &qword_1002E2410);
          sub_100077CFC(v44, &qword_1002E2410);
          sub_100077CC0(v57, type metadata accessor for ConfigurationValue);
        }

        uint64_t v50 = &qword_1002E2B30;
        uint64_t v51 = v46;
        goto LABEL_21;
      }
    }

    else
    {
      sub_100085CA8((uint64_t)v21, (uint64_t)v25, &qword_1002E2408);
      if (v41(v40, 1LL, v15) != 1)
      {
        uint64_t v52 = v69;
        sub_100085C04(v40, (uint64_t)v69, type metadata accessor for Conditions);
        if ((sub_1000EB5C0(*v25, *v52) & 1) != 0)
        {
          uint64_t v53 = *(int *)(v15 + 20);
          char v54 = (char *)v25 + v53;
          uint64_t v55 = (char *)v52 + v53;
          uint64_t v56 = sub_100073FE0( &qword_1002DF228,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
          LOBYTE(v54) = dispatch thunk of static Equatable.== infix(_:_:)(v54, v55, v77, v56);
          sub_100077CC0((uint64_t)v52, type metadata accessor for Conditions);
          sub_100077CFC((uint64_t)v28, &qword_1002E2408);
          sub_100077CFC((uint64_t)v30, &qword_1002E2408);
          sub_100077CC0((uint64_t)v25, type metadata accessor for Conditions);
          sub_100077CFC((uint64_t)v21, &qword_1002E2408);
          goto LABEL_8;
        }

        sub_100077CC0((uint64_t)v52, type metadata accessor for Conditions);
        sub_100077CFC((uint64_t)v28, &qword_1002E2408);
        sub_100077CFC((uint64_t)v30, &qword_1002E2408);
        sub_100077CC0((uint64_t)v25, type metadata accessor for Conditions);
        uint64_t v51 = (uint64_t)v21;
        uint64_t v50 = &qword_1002E2408;
LABEL_21:
        sub_100077CFC(v51, v50);
        goto LABEL_22;
      }

      sub_100077CFC((uint64_t)v28, &qword_1002E2408);
      sub_100077CFC((uint64_t)v30, &qword_1002E2408);
      sub_100077CC0((uint64_t)v25, type metadata accessor for Conditions);
    }

    uint64_t v50 = &qword_1002E2B38;
    uint64_t v51 = (uint64_t)v21;
    goto LABEL_21;
  }

  return v35 & 1;
}

uint64_t sub_1000EC95C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *a2;
  if (*((_BYTE *)a2 + 8) == 1) {
    __asm { BR              X11 }
  }

  if (*(void *)a1 == v11
    && *(unsigned __int8 *)(a1 + 9) == *((unsigned __int8 *)a2 + 9)
    && *(void *)(a1 + 16) == a2[2]
    && *(void *)(a1 + 24) == a2[3])
  {
    uint64_t v12 = type metadata accessor for ConditionVersion(0LL);
    uint64_t v13 = a1 + *(int *)(v12 + 32);
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v14(v10, v13, v4);
    v14(v8, (uint64_t)a2 + *(int *)(v12 + 32), v4);
    uint64_t v15 = sub_100073FE0( &qword_1002DF228,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v16 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v15);
    uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }

  else
  {
    char v16 = 0;
  }

  return v16 & 1;
}

uint64_t sub_1000ECB18(void *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v18 - v9;
  if (*a1 == *(void *)a2 && a1[1] == *((void *)a2 + 1))
  {
    uint64_t v11 = type metadata accessor for ConditionDSID(0LL);
    uint64_t v12 = (char *)a1 + *(int *)(v11 + 24);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, &a2[*(int *)(v11 + 24)], v4);
    uint64_t v14 = sub_100073FE0( &qword_1002DF228,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v15 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v14);
    char v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }

  else
  {
    char v15 = 0;
  }

  return v15 & 1;
}

void sub_1000ECC5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ConditionVersion(0LL);
  __chkstk_darwin(v4);
  uint64_t v22 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v20[0] = type metadata accessor for ConditionDSID(0LL);
  __chkstk_darwin(v20[0]);
  uint64_t v24 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for Conditions(0LL);
  uint64_t v7 = __chkstk_darwin(v21);
  uint64_t v23 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  v20[1] = (char *)v20 - v9;
  uint64_t v10 = type metadata accessor for Condition.OneOf_Condition(0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v13 = __chkstk_darwin(v12);
  __chkstk_darwin(v13);
  uint64_t v14 = sub_100072CC4(&qword_1002E2B40);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = (uint64_t)&v17[*(int *)(v15 + 48)];
  sub_100077C7C(a1, (uint64_t)v17, type metadata accessor for Condition.OneOf_Condition);
  sub_100077C7C(a2, v18, type metadata accessor for Condition.OneOf_Condition);
  uint64_t v19 = (char *)sub_1000ECE70 + 4 * byte_100249D2F[swift_getEnumCaseMultiPayload(v17, v10)];
  __asm { BR              X10 }

uint64_t sub_1000ECE70()
{
  if (swift_getEnumCaseMultiPayload(v2, v1))
  {
    sub_100077CC0((uint64_t)v3, type metadata accessor for Conditions);
    sub_100077CFC(v0, &qword_1002E2B40);
LABEL_7:
    char v11 = 0;
    return v11 & 1;
  }

  uint64_t v5 = *(void **)(v4 - 120);
  sub_100085C04(v2, (uint64_t)v5, type metadata accessor for Conditions);
  if ((((uint64_t (*)(void, void))sub_1000EB5C0)(*v3, *v5) & 1) == 0
    || (uint64_t v6 = *(int *)(*(void *)(v4 - 112) + 20LL),
        uint64_t v7 = (char *)v3 + v6,
        uint64_t v8 = (char *)v5 + v6,
        uint64_t v9 = type metadata accessor for UnknownStorage(0LL),
        uint64_t v10 = sub_100073FE0( &qword_1002DF228,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage),  (dispatch thunk of static Equatable.== infix(_:_:)(v7, v8, v9, v10) & 1) == 0))
  {
    sub_100077CC0((uint64_t)v5, type metadata accessor for Conditions);
    sub_100077CC0((uint64_t)v3, type metadata accessor for Conditions);
    sub_100077CC0(v0, type metadata accessor for Condition.OneOf_Condition);
    goto LABEL_7;
  }

  sub_100077CC0((uint64_t)v5, type metadata accessor for Conditions);
  sub_100077CC0((uint64_t)v3, type metadata accessor for Conditions);
  sub_100077CC0(v0, type metadata accessor for Condition.OneOf_Condition);
  char v11 = 1;
  return v11 & 1;
}

uint64_t sub_1000ED23C( void *a1, char *a2, uint64_t (*a3)(void, void), uint64_t (*a4)(void))
{
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v22 - v13;
  if ((a3(*a1, *(void *)a2) & 1) != 0)
  {
    uint64_t v15 = a4(0LL);
    uint64_t v16 = (char *)a1 + *(int *)(v15 + 20);
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v17(v14, v16, v8);
    v17(v12, &a2[*(int *)(v15 + 20)], v8);
    uint64_t v18 = sub_100073FE0( &qword_1002DF228,  (uint64_t (*)(uint64_t))&type metadata accessor for UnknownStorage,  (uint64_t)&protocol conformance descriptor for UnknownStorage);
    char v19 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v12, v8, v18);
    uint64_t v20 = *(void (**)(char *, uint64_t))(v9 + 8);
    v20(v12, v8);
    v20(v14, v8);
  }

  else
  {
    char v19 = 0;
  }

  return v19 & 1;
}

void sub_1000ED378(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = type metadata accessor for Strings(0LL);
  __chkstk_darwin(v18);
  char v19 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v20 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v10 = __chkstk_darwin(v9);
  __chkstk_darwin(v10);
  uint64_t v11 = sub_100072CC4(&qword_1002E2B48);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = (uint64_t)&v14[*(int *)(v12 + 48)];
  sub_100077C7C(a1, (uint64_t)v14, type metadata accessor for ConfigurationValue.OneOf_Value);
  sub_100077C7C(a2, v15, type metadata accessor for ConfigurationValue.OneOf_Value);
  uint64_t v16 = (char *)sub_1000ED518 + 4 * byte_100249D33[swift_getEnumCaseMultiPayload(v14, v5)];
  __asm { BR              X10 }

BOOL sub_1000ED518()
{
  if (swift_getEnumCaseMultiPayload(v3, v2))
  {
    sub_100077CFC(v0, &qword_1002E2B48);
    return 0;
  }

  else
  {
    BOOL v4 = *v1 == *v3;
    sub_100077CC0(v0, type metadata accessor for ConfigurationValue.OneOf_Value);
  }

  return v4;
}

uint64_t type metadata accessor for Condition.OneOf_Condition(uint64_t a1)
{
  return sub_100072DB8(a1, (uint64_t *)&unk_1002EE670, (uint64_t)&nominal type descriptor for Condition.OneOf_Condition);
}

uint64_t type metadata accessor for Condition(uint64_t a1)
{
  return sub_100072DB8(a1, (uint64_t *)&unk_1002EE660, (uint64_t)&nominal type descriptor for Condition);
}

uint64_t sub_1000ED7F0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100072CC4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for ConditionDSID(uint64_t a1)
{
  return sub_100072DB8(a1, (uint64_t *)&unk_1002EE680, (uint64_t)&nominal type descriptor for ConditionDSID);
}

uint64_t type metadata accessor for ConditionVersion(uint64_t a1)
{
  return sub_100072DB8(a1, (uint64_t *)&unk_1002EE690, (uint64_t)&nominal type descriptor for ConditionVersion);
}

unint64_t sub_1000ED85C()
{
  unint64_t result = qword_1002E2468;
  if (!qword_1002E2468)
  {
    unint64_t result = swift_getWitnessTable(&unk_100249E14, &type metadata for ConditionPlatform);
    atomic_store(result, (unint64_t *)&qword_1002E2468);
  }

  return result;
}

unint64_t sub_1000ED8A4()
{
  unint64_t result = qword_1002E2478;
  if (!qword_1002E2478)
  {
    unint64_t result = swift_getWitnessTable(&unk_100249ECC, &type metadata for ConditionPlatform);
    atomic_store(result, (unint64_t *)&qword_1002E2478);
  }

  return result;
}

unint64_t sub_1000ED8EC()
{
  unint64_t result = qword_1002E2480;
  if (!qword_1002E2480)
  {
    unint64_t result = swift_getWitnessTable(&unk_100249E94, &type metadata for ConditionPlatform);
    atomic_store(result, (unint64_t *)&qword_1002E2480);
  }

  return result;
}

unint64_t sub_1000ED934()
{
  unint64_t result = qword_1002E2488;
  if (!qword_1002E2488)
  {
    uint64_t v1 = sub_10007426C(&qword_1002E2490);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002E2488);
  }

  return result;
}

unint64_t sub_1000ED984()
{
  unint64_t result = qword_1002E2498;
  if (!qword_1002E2498)
  {
    unint64_t result = swift_getWitnessTable(&unk_100249F0C, &type metadata for ConditionPlatform);
    atomic_store(result, (unint64_t *)&qword_1002E2498);
  }

  return result;
}

uint64_t sub_1000ED9C8()
{
  return sub_100073FE0(&qword_1002E24A0, type metadata accessor for CloudConfiguration, (uint64_t)&unk_10024A084);
}

uint64_t sub_1000ED9F4()
{
  return sub_100073FE0(&qword_1002DF930, type metadata accessor for CloudConfiguration, (uint64_t)&unk_100249FAC);
}

uint64_t sub_1000EDA20()
{
  return sub_100073FE0(&qword_1002E2428, type metadata accessor for CloudConfiguration, (uint64_t)&unk_10024A0AC);
}

uint64_t sub_1000EDA4C()
{
  return sub_100073FE0(&qword_1002E24A8, type metadata accessor for CloudConfiguration, (uint64_t)&unk_10024A0EC);
}

uint64_t sub_1000EDA78()
{
  return sub_100073FE0(&qword_1002E24B0, type metadata accessor for DewValue, (uint64_t)&unk_10024A1EC);
}

uint64_t sub_1000EDAA4()
{
  return sub_100073FE0(&qword_1002E2420, type metadata accessor for DewValue, (uint64_t)&unk_10024A114);
}

uint64_t sub_1000EDAD0()
{
  return sub_100073FE0(&qword_1002E2430, type metadata accessor for DewValue, (uint64_t)&unk_10024A214);
}

uint64_t sub_1000EDAFC()
{
  return sub_100073FE0(&qword_1002E24B8, type metadata accessor for DewValue, (uint64_t)&unk_10024A254);
}

uint64_t sub_1000EDB28()
{
  return sub_100073FE0(&qword_1002E24C0, type metadata accessor for Conditions, (uint64_t)&unk_10024A354);
}

uint64_t sub_1000EDB54()
{
  return sub_100073FE0(&qword_1002E24C8, type metadata accessor for Conditions, (uint64_t)&unk_10024A27C);
}

uint64_t sub_1000EDB80()
{
  return sub_100073FE0(&qword_1002E2440, type metadata accessor for Conditions, (uint64_t)&unk_10024A37C);
}

uint64_t sub_1000EDBAC()
{
  return sub_100073FE0(&qword_1002E24D0, type metadata accessor for Conditions, (uint64_t)&unk_10024A3BC);
}

uint64_t sub_1000EDBD8()
{
  return sub_100073FE0(&qword_1002E24D8, type metadata accessor for Strings, (uint64_t)&unk_10024A4BC);
}

uint64_t sub_1000EDC04()
{
  return sub_100073FE0(&qword_1002E24E0, type metadata accessor for Strings, (uint64_t)&unk_10024A3E4);
}

uint64_t sub_1000EDC30()
{
  return sub_100073FE0(&qword_1002E2448, type metadata accessor for Strings, (uint64_t)&unk_10024A4E4);
}

uint64_t sub_1000EDC5C()
{
  return sub_100073FE0(&qword_1002E24E8, type metadata accessor for Strings, (uint64_t)&unk_10024A524);
}

uint64_t sub_1000EDC88()
{
  return sub_100073FE0(&qword_1002E24F0, type metadata accessor for ConfigurationValue, (uint64_t)&unk_10024A624);
}

uint64_t sub_1000EDCB4()
{
  return sub_100073FE0(&qword_1002E24F8, type metadata accessor for ConfigurationValue, (uint64_t)&unk_10024A54C);
}

uint64_t sub_1000EDCE0()
{
  return sub_100073FE0(&qword_1002E2450, type metadata accessor for ConfigurationValue, (uint64_t)&unk_10024A64C);
}

uint64_t sub_1000EDD0C()
{
  return sub_100073FE0(&qword_1002E2500, type metadata accessor for ConfigurationValue, (uint64_t)&unk_10024A68C);
}

uint64_t sub_1000EDD38()
{
  return sub_100073FE0(&qword_1002E2508, type metadata accessor for Condition, (uint64_t)&unk_10024A78C);
}

uint64_t sub_1000EDD64()
{
  return sub_100073FE0(&qword_1002E2438, type metadata accessor for Condition, (uint64_t)&unk_10024A6B4);
}

uint64_t sub_1000EDD90()
{
  return sub_100073FE0(&qword_1002E2458, type metadata accessor for Condition, (uint64_t)&unk_10024A7B4);
}

uint64_t sub_1000EDDBC()
{
  return sub_100073FE0(&qword_1002E2510, type metadata accessor for Condition, (uint64_t)&unk_10024A7F4);
}

uint64_t sub_1000EDDE8()
{
  return sub_100073FE0(&qword_1002E2518, type metadata accessor for ConditionDSID, (uint64_t)&unk_10024A8F4);
}

uint64_t sub_1000EDE14()
{
  return sub_100073FE0(&qword_1002E2520, type metadata accessor for ConditionDSID, (uint64_t)&unk_10024A81C);
}

uint64_t sub_1000EDE40()
{
  return sub_100073FE0(&qword_1002E2460, type metadata accessor for ConditionDSID, (uint64_t)&unk_10024A91C);
}

uint64_t sub_1000EDE6C()
{
  return sub_100073FE0(&qword_1002E2528, type metadata accessor for ConditionDSID, (uint64_t)&unk_10024A95C);
}

uint64_t sub_1000EDE98()
{
  return sub_100073FE0(&qword_1002E2530, type metadata accessor for ConditionVersion, (uint64_t)&unk_10024AA5C);
}

uint64_t sub_1000EDEC4()
{
  return sub_100073FE0(&qword_1002E2538, type metadata accessor for ConditionVersion, (uint64_t)&unk_10024A984);
}

uint64_t sub_1000EDEF0()
{
  return sub_100073FE0(&qword_1002E2470, type metadata accessor for ConditionVersion, (uint64_t)&unk_10024AA84);
}

uint64_t sub_1000EDF1C()
{
  return sub_100073FE0(&qword_1002E2540, type metadata accessor for ConditionVersion, (uint64_t)&unk_10024AAC4);
}

ValueMetadata *type metadata accessor for ConditionPlatform()
{
  return &type metadata for ConditionPlatform;
}

uint64_t sub_1000EDF70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EDF7C);
}

uint64_t sub_1000EDF80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EDF8C);
}

uint64_t *sub_1000EDF94(uint64_t *a1, uint64_t *a2, int *a3)
{
  BOOL v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *BOOL v4 = *a2;
    BOOL v4 = (uint64_t *)(v20 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v20);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    uint64_t v8 = a3[6];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v11 - 8) + 16LL);
    __n128 v13 = swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11, v13);
    uint64_t v14 = a3[7];
    uint64_t v15 = (uint64_t *)((char *)v4 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for Conditions(0LL);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17))
    {
      uint64_t v19 = sub_100072CC4(&qword_1002E2408);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64LL));
    }

    else
    {
      uint64_t v21 = *v16;
      *uint64_t v15 = *v16;
      uint64_t v22 = *(int *)(v17 + 20);
      uint64_t v23 = (char *)v15 + v22;
      uint64_t v24 = (char *)v16 + v22;
      __n128 v25 = swift_bridgeObjectRetain(v21);
      v12(v23, v24, v11, v25);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
    }

    uint64_t v26 = a3[8];
    uint64_t v27 = (uint64_t *)((char *)v4 + v26);
    uint64_t v28 = (uint64_t *)((char *)a2 + v26);
    uint64_t v29 = type metadata accessor for ConfigurationValue(0LL);
    uint64_t v30 = *(void *)(v29 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v30 + 48))(v28, 1LL, v29))
    {
      uint64_t v31 = sub_100072CC4(&qword_1002E2410);
      memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64LL));
    }

    else
    {
      uint64_t v32 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
      uint64_t v33 = *(void *)(v32 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v33 + 48))(v28, 1LL, v32))
      {
        uint64_t v34 = sub_100072CC4(&qword_1002E03B8);
        memcpy(v27, v28, *(void *)(*(void *)(v34 - 8) + 64LL));
      }

      else
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v28, v32);
        if (EnumCaseMultiPayload == 4)
        {
          uint64_t v37 = *v28;
          *uint64_t v27 = *v28;
          uint64_t v38 = *(int *)(type metadata accessor for Strings(0LL) + 20);
          uint64_t v41 = (char *)v28 + v38;
          uint64_t v42 = (char *)v27 + v38;
          __n128 v39 = swift_bridgeObjectRetain(v37);
          v12(v42, v41, v11, v39);
          swift_storeEnumTagMultiPayload(v27, v32, 4LL);
        }

        else if (EnumCaseMultiPayload == 1)
        {
          uint64_t v36 = v28[1];
          *uint64_t v27 = *v28;
          v27[1] = v36;
          swift_bridgeObjectRetain(v36);
          swift_storeEnumTagMultiPayload(v27, v32, 1LL);
        }

        else
        {
          memcpy(v27, v28, *(void *)(v33 + 64));
        }

        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v33 + 56))(v27, 0LL, 1LL, v32);
      }

      ((void (*)(char *, char *, uint64_t))v12)( (char *)v27 + *(int *)(v29 + 20),  (char *)v28 + *(int *)(v29 + 20),  v11);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0LL, 1LL, v29);
    }
  }

  return v4;
}

uint64_t sub_1000EE26C(uint64_t a1, int *a2)
{
  BOOL v4 = (char *)(a1 + a2[6]);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v14 = *(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v14(v4, v5);
  uint64_t v6 = (char *)(a1 + a2[7]);
  uint64_t v7 = type metadata accessor for Conditions(0LL);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7))
  {
    swift_bridgeObjectRelease(*(void *)v6);
    v14(&v6[*(int *)(v7 + 20)], v5);
  }

  uint64_t v8 = (char *)(a1 + a2[8]);
  uint64_t v9 = type metadata accessor for ConfigurationValue(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9);
  if (!(_DWORD)result)
  {
    uint64_t v11 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v8, 1LL, v11))
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v11);
      if (EnumCaseMultiPayload == 4)
      {
        swift_bridgeObjectRelease(*(void *)v8);
        uint64_t v13 = type metadata accessor for Strings(0LL);
        v14(&v8[*(int *)(v13 + 20)], v5);
      }

      else if (EnumCaseMultiPayload == 1)
      {
        swift_bridgeObjectRelease(*((void *)v8 + 1));
      }
    }

    return ((uint64_t (*)(char *, uint64_t))v14)(&v8[*(int *)(v9 + 20)], v5);
  }

  return result;
}

void *sub_1000EE3F4(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v10 - 8) + 16LL);
  __n128 v12 = swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10, v12);
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for Conditions(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16))
  {
    uint64_t v18 = sub_100072CC4(&qword_1002E2408);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    uint64_t v19 = *v15;
    uint64_t *v14 = *v15;
    uint64_t v20 = *(int *)(v16 + 20);
    uint64_t v21 = (char *)v14 + v20;
    uint64_t v22 = (char *)v15 + v20;
    __n128 v23 = swift_bridgeObjectRetain(v19);
    v11(v21, v22, v10, v23);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
  }

  uint64_t v24 = a3[8];
  __n128 v25 = (void *)((char *)a1 + v24);
  uint64_t v26 = (void *)((char *)a2 + v24);
  uint64_t v27 = type metadata accessor for ConfigurationValue(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v28 + 48))(v26, 1LL, v27))
  {
    uint64_t v29 = sub_100072CC4(&qword_1002E2410);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64LL));
  }

  else
  {
    uint64_t v30 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
    uint64_t v31 = *(void *)(v30 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v31 + 48))(v26, 1LL, v30))
    {
      uint64_t v32 = sub_100072CC4(&qword_1002E03B8);
      memcpy(v25, v26, *(void *)(*(void *)(v32 - 8) + 64LL));
    }

    else
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v26, v30);
      if (EnumCaseMultiPayload == 4)
      {
        uint64_t v35 = *v26;
        *__n128 v25 = *v26;
        uint64_t v36 = *(int *)(type metadata accessor for Strings(0LL) + 20);
        __n128 v39 = (char *)v26 + v36;
        uint64_t v40 = (char *)v25 + v36;
        __n128 v37 = swift_bridgeObjectRetain(v35);
        v11(v40, v39, v10, v37);
        swift_storeEnumTagMultiPayload(v25, v30, 4LL);
      }

      else if (EnumCaseMultiPayload == 1)
      {
        uint64_t v34 = v26[1];
        *__n128 v25 = *v26;
        v25[1] = v34;
        swift_bridgeObjectRetain(v34);
        swift_storeEnumTagMultiPayload(v25, v30, 1LL);
      }

      else
      {
        memcpy(v25, v26, *(void *)(v31 + 64));
      }

      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v31 + 56))(v25, 0LL, 1LL, v30);
    }

    ((void (*)(char *, char *, uint64_t))v11)( (char *)v25 + *(int *)(v27 + 20),  (char *)v26 + *(int *)(v27 + 20),  v10);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0LL, 1LL, v27);
  }

  return a1;
}

void *sub_1000EE6A0(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v73 = *(void *)(v11 - 8);
  uint64_t v71 = *(void (**)(char *, char *, uint64_t))(v73 + 24);
  v71(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for Conditions(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1LL, v15);
  int v19 = v17(v14, 1LL, v15);
  if (v18)
  {
    if (!v19)
    {
      uint64_t v20 = *v14;
      *uint64_t v13 = *v14;
      uint64_t v21 = *(int *)(v15 + 20);
      uint64_t v22 = (char *)v13 + v21;
      __n128 v23 = (char *)v14 + v21;
      uint64_t v24 = *(void (**)(char *, char *, uint64_t, __n128))(v73 + 16);
      __n128 v25 = swift_bridgeObjectRetain(v20);
      v24(v22, v23, v11, v25);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v19)
  {
    sub_100077CC0((uint64_t)v13, type metadata accessor for Conditions);
LABEL_6:
    uint64_t v26 = sub_100072CC4(&qword_1002E2408);
    memcpy(v13, v14, *(void *)(*(void *)(v26 - 8) + 64LL));
    goto LABEL_7;
  }

  uint64_t v39 = *v14;
  uint64_t v40 = *v13;
  *uint64_t v13 = *v14;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease(v40);
  v71((char *)v13 + *(int *)(v15 + 20), (char *)v14 + *(int *)(v15 + 20), v11);
LABEL_7:
  uint64_t v27 = a3[8];
  uint64_t v28 = (void *)((char *)a1 + v27);
  uint64_t v29 = (void *)((char *)a2 + v27);
  uint64_t v30 = type metadata accessor for ConfigurationValue(0LL);
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v31 + 48);
  int v33 = v32(v28, 1LL, v30);
  int v34 = v32(v29, 1LL, v30);
  if (!v33)
  {
    if (v34)
    {
      sub_100077CC0((uint64_t)v28, type metadata accessor for ConfigurationValue);
      goto LABEL_13;
    }

    uint64_t v41 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
    uint64_t v42 = *(void *)(v41 - 8);
    uint64_t v43 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v42 + 48);
    int v44 = v43(v28, 1LL, v41);
    int v45 = v43(v29, 1LL, v41);
    if (v44)
    {
      if (!v45)
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v29, v41);
        if (EnumCaseMultiPayload == 4)
        {
          uint64_t v57 = *v29;
          *uint64_t v28 = *v29;
          uint64_t v58 = *(int *)(type metadata accessor for Strings(0LL) + 20);
          uint64_t v59 = (char *)v28 + v58;
          uint64_t v70 = (char *)v29 + v58;
          char v60 = *(void (**)(char *, char *, uint64_t, __n128))(v73 + 16);
          __n128 v61 = swift_bridgeObjectRetain(v57);
          v60(v59, v70, v11, v61);
          swift_storeEnumTagMultiPayload(v28, v41, 4LL);
        }

        else if (EnumCaseMultiPayload == 1)
        {
          *uint64_t v28 = *v29;
          uint64_t v47 = v29[1];
          v28[1] = v47;
          swift_bridgeObjectRetain(v47);
          swift_storeEnumTagMultiPayload(v28, v41, 1LL);
        }

        else
        {
          memcpy(v28, v29, *(void *)(v42 + 64));
        }

        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v42 + 56))(v28, 0LL, 1LL, v41);
        goto LABEL_38;
      }
    }

    else
    {
      if (!v45)
      {
        if (a1 == a2) {
          goto LABEL_38;
        }
        sub_100077CC0((uint64_t)v28, type metadata accessor for ConfigurationValue.OneOf_Value);
        int v55 = swift_getEnumCaseMultiPayload(v29, v41);
        if (v55 == 4)
        {
          uint64_t v63 = *v29;
          *uint64_t v28 = *v29;
          uint64_t v64 = *(int *)(type metadata accessor for Strings(0LL) + 20);
          uint64_t v65 = (char *)v28 + v64;
          id v66 = (char *)v29 + v64;
          uint64_t v67 = *(void (**)(char *, char *, uint64_t, __n128))(v73 + 16);
          __n128 v68 = swift_bridgeObjectRetain(v63);
          v67(v65, v66, v11, v68);
          swift_storeEnumTagMultiPayload(v28, v41, 4LL);
          goto LABEL_38;
        }

        if (v55 == 1)
        {
          *uint64_t v28 = *v29;
          uint64_t v56 = v29[1];
          v28[1] = v56;
          swift_bridgeObjectRetain(v56);
          swift_storeEnumTagMultiPayload(v28, v41, 1LL);
          goto LABEL_38;
        }

        size_t v50 = *(void *)(v42 + 64);
LABEL_26:
        memcpy(v28, v29, v50);
LABEL_38:
        v71((char *)v28 + *(int *)(v30 + 20), (char *)v29 + *(int *)(v30 + 20), v11);
        return a1;
      }

      sub_100077CC0((uint64_t)v28, type metadata accessor for ConfigurationValue.OneOf_Value);
    }

    size_t v50 = *(void *)(*(void *)(sub_100072CC4(&qword_1002E03B8) - 8) + 64LL);
    goto LABEL_26;
  }

  if (v34)
  {
LABEL_13:
    uint64_t v38 = sub_100072CC4(&qword_1002E2410);
    memcpy(v28, v29, *(void *)(*(void *)(v38 - 8) + 64LL));
    return a1;
  }

  uint64_t v35 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  uint64_t v36 = *(void *)(v35 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v36 + 48))(v29, 1LL, v35))
  {
    uint64_t v37 = sub_100072CC4(&qword_1002E03B8);
    memcpy(v28, v29, *(void *)(*(void *)(v37 - 8) + 64LL));
  }

  else
  {
    int v48 = swift_getEnumCaseMultiPayload(v29, v35);
    if (v48 == 4)
    {
      uint64_t v51 = *v29;
      *uint64_t v28 = *v29;
      uint64_t v52 = *(int *)(type metadata accessor for Strings(0LL) + 20);
      uint64_t v69 = (char *)v29 + v52;
      uint64_t v72 = (char *)v28 + v52;
      uint64_t v53 = *(void (**)(char *, char *, uint64_t, __n128))(v73 + 16);
      __n128 v54 = swift_bridgeObjectRetain(v51);
      v53(v72, v69, v11, v54);
      swift_storeEnumTagMultiPayload(v28, v35, 4LL);
    }

    else if (v48 == 1)
    {
      *uint64_t v28 = *v29;
      uint64_t v49 = v29[1];
      v28[1] = v49;
      swift_bridgeObjectRetain(v49);
      swift_storeEnumTagMultiPayload(v28, v35, 1LL);
    }

    else
    {
      memcpy(v28, v29, *(void *)(v36 + 64));
    }

    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v36 + 56))(v28, 0LL, 1LL, v35);
  }

  (*(void (**)(char *, char *, uint64_t))(v73 + 16))( (char *)v28 + *(int *)(v30 + 20),  (char *)v29 + *(int *)(v30 + 20),  v11);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0LL, 1LL, v30);
  return a1;
}

uint64_t sub_1000EEC18(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Conditions(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = sub_100072CC4(&qword_1002E2408);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    *uint64_t v12 = *v13;
    v10((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v17 = a3[8];
  int v18 = (void *)(a1 + v17);
  int v19 = (void *)(a2 + v17);
  uint64_t v20 = type metadata accessor for ConfigurationValue(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(v19, 1LL, v20))
  {
    uint64_t v22 = sub_100072CC4(&qword_1002E2410);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
  }

  else
  {
    uint64_t v23 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v24 + 48))(v19, 1LL, v23))
    {
      uint64_t v25 = sub_100072CC4(&qword_1002E03B8);
      memcpy(v18, v19, *(void *)(*(void *)(v25 - 8) + 64LL));
    }

    else
    {
      if (swift_getEnumCaseMultiPayload(v19, v23) == 4)
      {
        *int v18 = *v19;
        uint64_t v26 = type metadata accessor for Strings(0LL);
        v10((char *)v18 + *(int *)(v26 + 20), (char *)v19 + *(int *)(v26 + 20), v9);
        swift_storeEnumTagMultiPayload(v18, v23, 4LL);
      }

      else
      {
        memcpy(v18, v19, *(void *)(v24 + 64));
      }

      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v18, 0LL, 1LL, v23);
    }

    v10((char *)v18 + *(int *)(v20 + 20), (char *)v19 + *(int *)(v20 + 20), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
  }

  return a1;
}

void *sub_1000EEE70(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v45 = *(void *)(v11 - 8);
  int v44 = *(void (**)(char *, char *, uint64_t))(v45 + 40);
  v44(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for Conditions(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1LL, v15);
  int v19 = v17(v14, 1LL, v15);
  if (v18)
  {
    if (!v19)
    {
      *(void *)uint64_t v13 = *(void *)v14;
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))( &v13[*(int *)(v15 + 20)],  &v14[*(int *)(v15 + 20)],  v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v19)
  {
    sub_100077CC0((uint64_t)v13, type metadata accessor for Conditions);
LABEL_6:
    uint64_t v20 = sub_100072CC4(&qword_1002E2408);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64LL));
    goto LABEL_7;
  }

  uint64_t v33 = *(void *)v13;
  *(void *)uint64_t v13 = *(void *)v14;
  swift_bridgeObjectRelease(v33);
  v44(&v13[*(int *)(v15 + 20)], &v14[*(int *)(v15 + 20)], v11);
LABEL_7:
  uint64_t v21 = a3[8];
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = type metadata accessor for ConfigurationValue(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1LL, v24);
  int v28 = v26(v23, 1LL, v24);
  if (!v27)
  {
    if (v28)
    {
      sub_100077CC0((uint64_t)v22, type metadata accessor for ConfigurationValue);
      goto LABEL_13;
    }

    uint64_t v34 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
    uint64_t v35 = *(void *)(v34 - 8);
    uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
    int v37 = v36(v22, 1LL, v34);
    int v38 = v36(v23, 1LL, v34);
    if (v37)
    {
      if (!v38)
      {
        if (swift_getEnumCaseMultiPayload(v23, v34) == 4)
        {
          *(void *)uint64_t v22 = *(void *)v23;
          uint64_t v39 = type metadata accessor for Strings(0LL);
          (*(void (**)(char *, char *, uint64_t))(v45 + 32))( &v22[*(int *)(v39 + 20)],  &v23[*(int *)(v39 + 20)],  v11);
          swift_storeEnumTagMultiPayload(v22, v34, 4LL);
        }

        else
        {
          memcpy(v22, v23, *(void *)(v35 + 64));
        }

        (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v22, 0LL, 1LL, v34);
        goto LABEL_33;
      }
    }

    else
    {
      if (!v38)
      {
        if (a1 == a2) {
          goto LABEL_33;
        }
        sub_100077CC0((uint64_t)v22, type metadata accessor for ConfigurationValue.OneOf_Value);
        if (swift_getEnumCaseMultiPayload(v23, v34) == 4)
        {
          *(void *)uint64_t v22 = *(void *)v23;
          uint64_t v42 = type metadata accessor for Strings(0LL);
          (*(void (**)(char *, char *, uint64_t))(v45 + 32))( &v22[*(int *)(v42 + 20)],  &v23[*(int *)(v42 + 20)],  v11);
          swift_storeEnumTagMultiPayload(v22, v34, 4LL);
          goto LABEL_33;
        }

        size_t v41 = *(void *)(v35 + 64);
LABEL_24:
        memcpy(v22, v23, v41);
LABEL_33:
        v44(&v22[*(int *)(v24 + 20)], &v23[*(int *)(v24 + 20)], v11);
        return a1;
      }

      sub_100077CC0((uint64_t)v22, type metadata accessor for ConfigurationValue.OneOf_Value);
    }

    size_t v41 = *(void *)(*(void *)(sub_100072CC4(&qword_1002E03B8) - 8) + 64LL);
    goto LABEL_24;
  }

  if (v28)
  {
LABEL_13:
    uint64_t v32 = sub_100072CC4(&qword_1002E2410);
    memcpy(v22, v23, *(void *)(*(void *)(v32 - 8) + 64LL));
    return a1;
  }

  uint64_t v29 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v23, 1LL, v29))
  {
    uint64_t v31 = sub_100072CC4(&qword_1002E03B8);
    memcpy(v22, v23, *(void *)(*(void *)(v31 - 8) + 64LL));
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(v23, v29) == 4)
    {
      *(void *)uint64_t v22 = *(void *)v23;
      uint64_t v40 = type metadata accessor for Strings(0LL);
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))( &v22[*(int *)(v40 + 20)],  &v23[*(int *)(v40 + 20)],  v11);
      swift_storeEnumTagMultiPayload(v22, v29, 4LL);
    }

    else
    {
      memcpy(v22, v23, *(void *)(v30 + 64));
    }

    (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v22, 0LL, 1LL, v29);
  }

  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(&v22[*(int *)(v24 + 20)], &v23[*(int *)(v24 + 20)], v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0LL, 1LL, v24);
  return a1;
}

uint64_t sub_1000EF300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EF30C);
}

uint64_t sub_1000EF30C(uint64_t a1, uint64_t a2, int *a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a3[6];
    }

    else
    {
      uint64_t v12 = sub_100072CC4(&qword_1002E2408);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a3[7];
      }

      else
      {
        uint64_t v10 = sub_100072CC4(&qword_1002E2410);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a3[8];
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t sub_1000EF3D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EF3E4);
}

uint64_t sub_1000EF3E4(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a4[6];
    }

    else
    {
      uint64_t v12 = sub_100072CC4(&qword_1002E2408);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a4[7];
      }

      else
      {
        uint64_t v10 = sub_100072CC4(&qword_1002E2410);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a4[8];
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

void sub_1000EF4AC(uint64_t a1)
{
  v8[0] = &unk_10024AB20;
  v8[1] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t v2 = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v8[2] = *(void *)(v2 - 8) + 64LL;
    sub_1000EF584(319LL, &qword_1002E2620, type metadata accessor for Conditions);
    if (v5 <= 0x3F)
    {
      void v8[3] = *(void *)(v4 - 8) + 64LL;
      sub_1000EF584(319LL, (unint64_t *)&unk_1002E2628, type metadata accessor for ConfigurationValue);
      if (v7 <= 0x3F)
      {
        v8[4] = *(void *)(v6 - 8) + 64LL;
        swift_initStructMetadata(a1, 256LL, 5LL, v8, a1 + 16);
      }
    }
  }

void sub_1000EF584(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  if (!*a2)
  {
    uint64_t v5 = a3(255LL);
    unint64_t v6 = type metadata accessor for Optional(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

uint64_t sub_1000EF5D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EF5DC);
}

uint64_t sub_1000EF5E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EF5EC);
}

uint64_t *sub_1000EF5F0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    v10(v7, v8, v9);
  }

  return v5;
}

uint64_t sub_1000EF688(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t *sub_1000EF6D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t *sub_1000EF740(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  return a1;
}

void *sub_1000EF7B4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t *sub_1000EF810(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  return a1;
}

uint64_t sub_1000EF87C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EF888);
}

uint64_t sub_1000EF88C(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 20)],  a2,  v8);
  }

uint64_t sub_1000EF908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EF914);
}

char *sub_1000EF918(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1000EF98C(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *sub_1000EFA04(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v10);
  }

  else
  {
    uint64_t v7 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1LL, v7))
    {
      uint64_t v9 = sub_100072CC4(&qword_1002E03B8);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64LL));
    }

    else
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v7);
      if (EnumCaseMultiPayload == 4)
      {
        uint64_t v13 = *a2;
        *a1 = *a2;
        uint64_t v14 = *(int *)(type metadata accessor for Strings(0LL) + 20);
        uint64_t v15 = (char *)a1 + v14;
        uint64_t v16 = (char *)a2 + v14;
        uint64_t v17 = type metadata accessor for UnknownStorage(0LL);
        int v18 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v17 - 8) + 16LL);
        __n128 v19 = swift_bridgeObjectRetain(v13);
        v18(v15, v16, v17, v19);
        swift_storeEnumTagMultiPayload(a1, v7, 4LL);
      }

      else if (EnumCaseMultiPayload == 1)
      {
        uint64_t v12 = a2[1];
        *a1 = *a2;
        a1[1] = v12;
        swift_bridgeObjectRetain(v12);
        swift_storeEnumTagMultiPayload(a1, v7, 1LL);
      }

      else
      {
        memcpy(a1, a2, *(void *)(v8 + 64));
      }

      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0LL, 1LL, v7);
    }

    uint64_t v20 = *(int *)(a3 + 20);
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16LL))(v21, v22, v23);
  }

  return a1;
}

uint64_t sub_1000EFBB0(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  if (!(*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, 1LL, v4))
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, v4);
    if (EnumCaseMultiPayload == 4)
    {
      swift_bridgeObjectRelease(*a1);
      uint64_t v9 = (char *)a1 + *(int *)(type metadata accessor for Strings(0LL) + 20);
      uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
      (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8LL))(v9, v10);
    }

    else if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease(a1[1]);
    }
  }

  int v5 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
}

uint64_t *sub_1000EFC80(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1LL, v6))
  {
    uint64_t v8 = sub_100072CC4(&qword_1002E03B8);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    if (EnumCaseMultiPayload == 4)
    {
      uint64_t v11 = *a2;
      *a1 = *a2;
      uint64_t v12 = *(int *)(type metadata accessor for Strings(0LL) + 20);
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v16 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v15 - 8) + 16LL);
      __n128 v17 = swift_bridgeObjectRetain(v11);
      v16(v13, v14, v15, v17);
      swift_storeEnumTagMultiPayload(a1, v6, 4LL);
    }

    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      swift_bridgeObjectRetain(v10);
      swift_storeEnumTagMultiPayload(a1, v6, 1LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(v7 + 64));
    }

    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
  }

  uint64_t v18 = *(int *)(a3 + 20);
  __n128 v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16LL))(v19, v20, v21);
  return a1;
}

uint64_t *sub_1000EFE00(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1LL, v6);
  int v10 = v8(a2, 1LL, v6);
  if (!v9)
  {
    if (!v10)
    {
      if (a1 == a2) {
        goto LABEL_17;
      }
      sub_100077CC0((uint64_t)a1, type metadata accessor for ConfigurationValue.OneOf_Value);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
      if (EnumCaseMultiPayload == 4)
      {
        uint64_t v28 = *a2;
        *a1 = *a2;
        uint64_t v29 = *(int *)(type metadata accessor for Strings(0LL) + 20);
        uint64_t v30 = (char *)a1 + v29;
        uint64_t v31 = (char *)a2 + v29;
        uint64_t v32 = type metadata accessor for UnknownStorage(0LL);
        uint64_t v33 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v32 - 8) + 16LL);
        __n128 v34 = swift_bridgeObjectRetain(v28);
        v33(v30, v31, v32, v34);
        swift_storeEnumTagMultiPayload(a1, v6, 4LL);
        goto LABEL_17;
      }

      if (EnumCaseMultiPayload == 1)
      {
        *a1 = *a2;
        uint64_t v15 = a2[1];
        a1[1] = v15;
        swift_bridgeObjectRetain(v15);
        swift_storeEnumTagMultiPayload(a1, v6, 1LL);
        goto LABEL_17;
      }

      size_t v13 = *(void *)(v7 + 64);
      goto LABEL_9;
    }

    sub_100077CC0((uint64_t)a1, type metadata accessor for ConfigurationValue.OneOf_Value);
LABEL_8:
    size_t v13 = *(void *)(*(void *)(sub_100072CC4(&qword_1002E03B8) - 8) + 64LL);
LABEL_9:
    memcpy(a1, a2, v13);
    goto LABEL_17;
  }

  if (v10) {
    goto LABEL_8;
  }
  int v11 = swift_getEnumCaseMultiPayload(a2, v6);
  if (v11 == 4)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    uint64_t v17 = *(int *)(type metadata accessor for Strings(0LL) + 20);
    uint64_t v18 = (char *)a1 + v17;
    __n128 v19 = (char *)a2 + v17;
    uint64_t v20 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v21 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v20 - 8) + 16LL);
    __n128 v22 = swift_bridgeObjectRetain(v16);
    v21(v18, v19, v20, v22);
    swift_storeEnumTagMultiPayload(a1, v6, 4LL);
  }

  else if (v11 == 1)
  {
    *a1 = *a2;
    uint64_t v12 = a2[1];
    a1[1] = v12;
    swift_bridgeObjectRetain(v12);
    swift_storeEnumTagMultiPayload(a1, v6, 1LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(v7 + 64));
  }

  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
LABEL_17:
  uint64_t v23 = *(int *)(a3 + 20);
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  uint64_t v26 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 24LL))(v24, v25, v26);
  return a1;
}

void *sub_1000F0074(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1LL, v6))
  {
    uint64_t v8 = sub_100072CC4(&qword_1002E03B8);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(a2, v6) == 4)
    {
      *a1 = *a2;
      uint64_t v9 = *(int *)(type metadata accessor for Strings(0LL) + 20);
      int v10 = (char *)a1 + v9;
      int v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32LL))(v10, v11, v12);
      swift_storeEnumTagMultiPayload(a1, v6, 4LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(v7 + 64));
    }

    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
  }

  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32LL))(v14, v15, v16);
  return a1;
}

void *sub_1000F01B8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ConfigurationValue.OneOf_Value(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1LL, v6);
  int v10 = v8(a2, 1LL, v6);
  if (!v9)
  {
    if (!v10)
    {
      if (a1 == a2) {
        goto LABEL_14;
      }
      sub_100077CC0((uint64_t)a1, type metadata accessor for ConfigurationValue.OneOf_Value);
      if (swift_getEnumCaseMultiPayload(a2, v6) == 4)
      {
        *a1 = *a2;
        uint64_t v16 = *(int *)(type metadata accessor for Strings(0LL) + 20);
        uint64_t v17 = (char *)a1 + v16;
        uint64_t v18 = (char *)a2 + v16;
        uint64_t v19 = type metadata accessor for UnknownStorage(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32LL))(v17, v18, v19);
        swift_storeEnumTagMultiPayload(a1, v6, 4LL);
        goto LABEL_14;
      }

      size_t v15 = *(void *)(v7 + 64);
      goto LABEL_8;
    }

    sub_100077CC0((uint64_t)a1, type metadata accessor for ConfigurationValue.OneOf_Value);
LABEL_7:
    size_t v15 = *(void *)(*(void *)(sub_100072CC4(&qword_1002E03B8) - 8) + 64LL);
LABEL_8:
    memcpy(a1, a2, v15);
    goto LABEL_14;
  }

  if (v10) {
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload(a2, v6) == 4)
  {
    *a1 = *a2;
    uint64_t v11 = *(int *)(type metadata accessor for Strings(0LL) + 20);
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32LL))(v12, v13, v14);
    swift_storeEnumTagMultiPayload(a1, v6, 4LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(v7 + 64));
  }

  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
LABEL_14:
  uint64_t v20 = *(int *)(a3 + 20);
  uint64_t v21 = (char *)a1 + v20;
  __n128 v22 = (char *)a2 + v20;
  uint64_t v23 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 40LL))(v21, v22, v23);
  return a1;
}

uint64_t sub_1000F03AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F03B8);
}

uint64_t sub_1000F03B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100072CC4(&qword_1002E03B8);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }

  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_1000F0430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F043C);
}

uint64_t sub_1000F043C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_100072CC4(&qword_1002E03B8);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

void sub_1000F04BC(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    uint64_t v4 = type metadata accessor for UnknownStorage(319LL);
    if (v5 <= 0x3F)
    {
      v6[1] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 2LL, v6, a1 + 16);
    }
  }

uint64_t *sub_1000F0550(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v10);
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 4)
    {
      uint64_t v11 = *a2;
      *a1 = *a2;
      uint64_t v12 = *(int *)(type metadata accessor for Strings(0LL) + 20);
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v16 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v15 - 8) + 16LL);
      __n128 v17 = swift_bridgeObjectRetain(v11);
      v16(v13, v14, v15, v17);
      swift_storeEnumTagMultiPayload(a1, a3, 4LL);
    }

    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      swift_bridgeObjectRetain(v9);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }
  }

  return a1;
}

uint64_t sub_1000F0664(void *a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 4)
  {
    swift_bridgeObjectRelease(*a1);
    uint64_t v4 = (char *)a1 + *(int *)(type metadata accessor for Strings(0LL) + 20);
    uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  }

  else if ((_DWORD)result == 1)
  {
    return swift_bridgeObjectRelease(a1[1]);
  }

  return result;
}

uint64_t *sub_1000F06E0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 4)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    uint64_t v9 = *(int *)(type metadata accessor for Strings(0LL) + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v12 - 8) + 16LL);
    __n128 v14 = swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12, v14);
    swift_storeEnumTagMultiPayload(a1, a3, 4LL);
  }

  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    swift_bridgeObjectRetain(v7);
    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

uint64_t *sub_1000F07CC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100077CC0((uint64_t)a1, type metadata accessor for ConfigurationValue.OneOf_Value);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 4)
    {
      uint64_t v8 = *a2;
      *a1 = *a2;
      uint64_t v9 = *(int *)(type metadata accessor for Strings(0LL) + 20);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v13 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v12 - 8) + 16LL);
      __n128 v14 = swift_bridgeObjectRetain(v8);
      v13(v10, v11, v12, v14);
      swift_storeEnumTagMultiPayload(a1, a3, 4LL);
    }

    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

void *sub_1000F08D8(void *a1, void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 4)
  {
    *a1 = *a2;
    uint64_t v6 = *(int *)(type metadata accessor for Strings(0LL) + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
    swift_storeEnumTagMultiPayload(a1, a3, 4LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *sub_1000F0980(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100077CC0((uint64_t)a1, type metadata accessor for ConfigurationValue.OneOf_Value);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 4)
    {
      *a1 = *a2;
      uint64_t v6 = *(int *)(type metadata accessor for Strings(0LL) + 20);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for UnknownStorage(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
      swift_storeEnumTagMultiPayload(a1, a3, 4LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t sub_1000F0A40(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = &unk_10024AB20;
  void v4[2] = &unk_10024AB58;
  void v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = type metadata accessor for Strings(319LL);
  if (v3 <= 0x3F)
  {
    void v4[4] = *(void *)(result - 8) + 64LL;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 5LL, v4);
    return 0LL;
  }

  return result;
}

uint64_t *sub_1000F0AC8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v12);
  }

  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Condition.OneOf_Condition(0LL);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))(v9, 1LL, v10))
    {
      uint64_t v13 = (char *)&loc_1000F0BAC + 4 * byte_100249D38[swift_getEnumCaseMultiPayload(v9, v10)];
      __asm { BR              X10 }
    }

    uint64_t v11 = sub_100072CC4(&qword_1002E2418);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64LL));
    uint64_t v14 = *(int *)(a3 + 24);
    uint64_t v15 = (char *)v4 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16LL))(v15, v16, v17);
  }

  return v4;
}

uint64_t sub_1000F0CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a1 + *(int *)(a2 + 20));
  uint64_t v5 = type metadata accessor for Condition.OneOf_Condition(0LL);
  if (!(*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v4, 1LL, v5))
  {
    switch(swift_getEnumCaseMultiPayload(v4, v5))
    {
      case 0u:
      case 1u:
        swift_bridgeObjectRelease(*v4);
        uint64_t v6 = *(int *)(type metadata accessor for Conditions(0LL) + 20);
        goto LABEL_6;
      case 2u:
        uint64_t v6 = *(int *)(type metadata accessor for ConditionDSID(0LL) + 24);
        goto LABEL_6;
      case 3u:
        uint64_t v6 = *(int *)(type metadata accessor for ConditionVersion(0LL) + 32);
LABEL_6:
        uint64_t v7 = (char *)v4 + v6;
        uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
        (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
        break;
      default:
        break;
    }
  }

  uint64_t v9 = a1 + *(int *)(a2 + 24);
  uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(v9, v10);
}

_BYTE *sub_1000F0DD0(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Condition.OneOf_Condition(0LL);
  if (!(*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9))
  {
    uint64_t v11 = (char *)&loc_1000F0E88 + 4 * byte_100249D40[swift_getEnumCaseMultiPayload(v8, v9)];
    __asm { BR              X10 }
  }

  uint64_t v10 = sub_100072CC4(&qword_1002E2418);
  memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
  return a1;
}

_BYTE *sub_1000F0FB0(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Condition.OneOf_Condition(0LL);
  uint64_t v10 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL);
  int v11 = v10(v7, 1LL, v9);
  int v12 = v10(v8, 1LL, v9);
  if (v11)
  {
    if (!v12)
    {
      uint64_t v13 = (char *)&loc_1000F105C + 4 * byte_100249D44[swift_getEnumCaseMultiPayload(v8, v9)];
      __asm { BR              X10 }
    }

    goto LABEL_6;
  }

  if (v12)
  {
    sub_100077CC0((uint64_t)v7, type metadata accessor for Condition.OneOf_Condition);
LABEL_6:
    uint64_t v14 = sub_100072CC4(&qword_1002E2418);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_9;
  }

  if (a1 != a2)
  {
    sub_100077CC0((uint64_t)v7, type metadata accessor for Condition.OneOf_Condition);
    uint64_t v15 = (char *)&loc_1000F1120 + 4 * byte_100249D48[swift_getEnumCaseMultiPayload(v8, v9)];
    __asm { BR              X10 }
  }

void sub_1000F1270()
{
  uint64_t v3 = *v2;
  *uint64_t v0 = *v2;
  uint64_t v4 = *(int *)(type metadata accessor for Conditions(0LL) + 20);
  uint64_t v5 = (char *)v0 + v4;
  uint64_t v6 = (char *)v2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v8 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v7 - 8) + 16LL);
  __n128 v9 = swift_bridgeObjectRetain(v3);
  v8(v5, v6, v7, v9);
  swift_storeEnumTagMultiPayload(v0, v1, 1LL);
  JUMPOUT(0x1000F1220LL);
}

void sub_1000F12CC()
{
  *uint64_t v0 = *v2;
  v0[1] = v2[1];
  uint64_t v3 = *(int *)(type metadata accessor for ConditionDSID(0LL) + 24);
  uint64_t v4 = (char *)v0 + v3;
  uint64_t v5 = (char *)v2 + v3;
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v4, v5, v6);
  swift_storeEnumTagMultiPayload(v0, v1, 2LL);
  JUMPOUT(0x1000F1220LL);
}

void sub_1000F1324()
{
  uint64_t v3 = *v2;
  *(_BYTE *)(v0 + 8) = *((_BYTE *)v2 + 8);
  *(void *)uint64_t v0 = v3;
  *(_BYTE *)(v0 + 9) = *((_BYTE *)v2 + 9);
  *(void *)(v0 + 16) = v2[2];
  *(void *)(v0 + 24) = v2[3];
  uint64_t v4 = *(int *)(type metadata accessor for ConditionVersion(0LL) + 32);
  uint64_t v5 = v0 + v4;
  uint64_t v6 = (uint64_t)v2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(v5, v6, v7);
  swift_storeEnumTagMultiPayload(v0, v1, 3LL);
  JUMPOUT(0x1000F1220LL);
}

_BYTE *sub_1000F1394(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Condition.OneOf_Condition(0LL);
  if (!(*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v8, 1LL, v9))
  {
    int v11 = (char *)&loc_1000F1448 + 4 * byte_100249D4C[swift_getEnumCaseMultiPayload(v8, v9)];
    __asm { BR              X10 }
  }

  uint64_t v10 = sub_100072CC4(&qword_1002E2418);
  memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64LL));
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v15 - 8) + 32LL))(v13, v14, v15);
  return a1;
}

_BYTE *sub_1000F1538(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Condition.OneOf_Condition(0LL);
  uint64_t v10 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL);
  int v11 = v10(v7, 1LL, v9);
  int v12 = v10(v8, 1LL, v9);
  if (v11)
  {
    if (!v12)
    {
      uint64_t v13 = (char *)&loc_1000F15E0 + 4 * byte_100249D50[swift_getEnumCaseMultiPayload(v8, v9)];
      __asm { BR              X10 }
    }

    goto LABEL_6;
  }

  if (v12)
  {
    sub_100077CC0((uint64_t)v7, type metadata accessor for Condition.OneOf_Condition);
LABEL_6:
    uint64_t v14 = sub_100072CC4(&qword_1002E2418);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_9;
  }

  if (a1 != a2)
  {
    sub_100077CC0((uint64_t)v7, type metadata accessor for Condition.OneOf_Condition);
    uint64_t v15 = (char *)&loc_1000F1670 + 4 * byte_100249D54[swift_getEnumCaseMultiPayload(v8, v9)];
    __asm { BR              X10 }
  }

void sub_1000F1798()
{
  *uint64_t v0 = *v2;
  uint64_t v3 = *(int *)(type metadata accessor for Conditions(0LL) + 20);
  uint64_t v4 = (char *)v0 + v3;
  uint64_t v5 = (char *)v2 + v3;
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v4, v5, v6);
  swift_storeEnumTagMultiPayload(v0, v1, 1LL);
  JUMPOUT(0x1000F174CLL);
}

void sub_1000F17E8()
{
  *uint64_t v0 = *v2;
  uint64_t v3 = *(int *)(type metadata accessor for ConditionDSID(0LL) + 24);
  uint64_t v4 = (char *)v0 + v3;
  uint64_t v5 = (char *)v2 + v3;
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v4, v5, v6);
  swift_storeEnumTagMultiPayload(v0, v1, 2LL);
  JUMPOUT(0x1000F174CLL);
}

void sub_1000F1838()
{
  *(void *)uint64_t v0 = *(void *)v2;
  *(_WORD *)(v0 + 8) = *(_WORD *)(v2 + 8);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v2 + 16);
  uint64_t v3 = *(int *)(type metadata accessor for ConditionVersion(0LL) + 32);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = v2 + v3;
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(v4, v5, v6);
  swift_storeEnumTagMultiPayload(v0, v1, 3LL);
  JUMPOUT(0x1000F174CLL);
}

uint64_t sub_1000F1898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F18A4);
}

uint64_t sub_1000F18A4(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v10 = sub_100072CC4(&qword_1002E2418);
    uint64_t v11 = *(void *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      uint64_t v12 = v10;
      uint64_t v13 = *(int *)(a3 + 20);
    }

    else
    {
      uint64_t v12 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v11 = *(void *)(v12 - 8);
      uint64_t v13 = *(int *)(a3 + 24);
    }

    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v11 + 48))(&a1[v13], a2, v12);
  }

uint64_t sub_1000F1948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F1954);
}

_BYTE *sub_1000F1954(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    *uint64_t result = a2 + 1;
  }

  else
  {
    uint64_t v8 = sub_100072CC4(&qword_1002E2418);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 20);
    }

    else
    {
      uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 24);
    }

    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }

  return result;
}

void sub_1000F19F0(uint64_t a1)
{
  v6[0] = &unk_10024AB58;
  sub_1000EF584(319LL, (unint64_t *)&unk_1002E28E0, type metadata accessor for Condition.OneOf_Condition);
  if (v3 <= 0x3F)
  {
    v6[1] = *(void *)(v2 - 8) + 64LL;
    uint64_t v4 = type metadata accessor for UnknownStorage(319LL);
    if (v5 <= 0x3F)
    {
      void v6[2] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 3LL, v6, a1 + 16);
    }
  }

uint64_t sub_1000F1A90(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) == 0)
  {
    unint64_t v5 = (char *)&loc_1000F1AE8 + 4 * byte_100249D58[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }

  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = v6 + ((v4 + 16LL) & ~(unint64_t)v4);
  swift_retain(v6);
  return v7;
}

uint64_t sub_1000F1C7C(void *a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
    case 1:
      swift_bridgeObjectRelease(*a1);
      uint64_t v4 = *(int *)(type metadata accessor for Conditions(0LL) + 20);
      goto LABEL_5;
    case 2:
      uint64_t v4 = *(int *)(type metadata accessor for ConditionDSID(0LL) + 24);
      goto LABEL_5;
    case 3:
      uint64_t v4 = *(int *)(type metadata accessor for ConditionVersion(0LL) + 32);
LABEL_5:
      unint64_t v5 = (char *)a1 + v4;
      uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
      break;
    default:
      return result;
  }

  return result;
}

void sub_1000F1D1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = (char *)sub_1000F1D68 + 4 * byte_100249D60[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }

uint64_t *sub_1000F1D68()
{
  uint64_t v3 = *v2;
  *uint64_t v0 = *v2;
  uint64_t v4 = *(int *)(type metadata accessor for Conditions(0LL) + 20);
  unint64_t v5 = (char *)v0 + v4;
  uint64_t v6 = (char *)v2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  uint64_t v8 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v7 - 8) + 16LL);
  __n128 v9 = swift_bridgeObjectRetain(v3);
  v8(v5, v6, v7, v9);
  swift_storeEnumTagMultiPayload(v0, v1, 0LL);
  return v0;
}

uint64_t sub_1000F1EDC(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    sub_100077CC0(result, type metadata accessor for Condition.OneOf_Condition);
    unint64_t v5 = (char *)&loc_1000F1F40 + 4 * byte_100249D64[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }

  return result;
}

void sub_1000F20CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (char *)sub_1000F2110 + 4 * byte_100249D68[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }

void *sub_1000F2110()
{
  *uint64_t v0 = *v2;
  uint64_t v3 = *(int *)(type metadata accessor for Conditions(0LL) + 20);
  uint64_t v4 = (char *)v0 + v3;
  unint64_t v5 = (char *)v2 + v3;
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(v4, v5, v6);
  swift_storeEnumTagMultiPayload(v0, v1, 0LL);
  return v0;
}

uint64_t sub_1000F2264(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    sub_100077CC0(result, type metadata accessor for Condition.OneOf_Condition);
    unint64_t v5 = (char *)&loc_1000F22C0 + 4 * byte_100249D6C[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }

  return result;
}

uint64_t sub_1000F2414(uint64_t a1)
{
  uint64_t result = type metadata accessor for Conditions(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(result - 8) + 64LL;
    v6[1] = v6[0];
    uint64_t result = type metadata accessor for ConditionDSID(319LL);
    if (v4 <= 0x3F)
    {
      void v6[2] = *(void *)(result - 8) + 64LL;
      uint64_t result = type metadata accessor for ConditionVersion(319LL);
      if (v5 <= 0x3F)
      {
        void v6[3] = *(void *)(result - 8) + 64LL;
        swift_initEnumMetadataMultiPayload(a1, 256LL, 4LL, v6);
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t *sub_1000F24B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v9 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v9);
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v5 = *(int *)(a3 + 24);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
  }

  return v3;
}

uint64_t sub_1000F2538(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  uint64_t v3 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
}

_OWORD *sub_1000F2570(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v5, v6, v7);
  return a1;
}

void *sub_1000F25CC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24LL))(v5, v6, v7);
  return a1;
}

_OWORD *sub_1000F2630(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

_OWORD *sub_1000F268C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_1000F26E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F26F4);
}

uint64_t sub_1000F26F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v4, a2, v5);
}

uint64_t sub_1000F2734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F2740);
}

uint64_t sub_1000F2740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 24);
  uint64_t v6 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, a2, a2, v6);
}

uint64_t sub_1000F2784(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void *sub_1000F27FC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (void *)(v9 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v9);
  }

  else
  {
    *(void *)a1 = *a2;
    *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    uint64_t v5 = *(int *)(a3 + 32);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL))(v6, v7, v8);
  }

  return v3;
}

uint64_t sub_1000F2894(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 32);
  uint64_t v3 = type metadata accessor for UnknownStorage(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(v2, v3);
}

uint64_t sub_1000F28CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_1000F2938(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v4;
  *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  uint64_t v5 = *(int *)(a3 + 32);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = (uint64_t)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 24LL))(v6, v7, v8);
  return a1;
}

uint64_t sub_1000F29B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_1000F2A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_1000F2A94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F2AA0);
}

uint64_t sub_1000F2AA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 9);
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))( a1 + *(int *)(a3 + 32),  a2,  v10);
  }

uint64_t sub_1000F2B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F2B28);
}

uint64_t sub_1000F2B28(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 9) = a2 + 1;
  }

  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 32),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1000F2B98(uint64_t a1)
{
  v4[0] = "\t";
  v4[1] = &unk_10024AB58;
  void v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  void v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = type metadata accessor for UnknownStorage(319LL);
  if (v3 <= 0x3F)
  {
    void v4[4] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1000F2C38()
{
  int v2 = -1;
  uint64_t v0 = ccrng(&v2);
  sub_100102604(v0 != 0, 22, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform_lib.c");
  sub_100102604(v2 == 0, 23, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform_lib.c");
  return v0;
}

uint64_t sub_1000F2CA4(uint64_t a1, unsigned int a2)
{
  unsigned int v4 = *(unsigned int (**)(uint64_t, void, uint64_t))sub_100106460();
  uint64_t v5 = sub_100106460();
  BOOL v6 = v4(v5, a2, a1) == 0;
  return sub_100102604(v6, 31, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform_lib.c");
}

uint64_t sub_1000F2CF8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void *, uint64_t *, uint64_t *, uint64_t), uint64_t *a5, unint64_t a6, void *a7, unint64_t *a8)
{
  uint64_t v42 = a1;
  uint64_t v43 = a3;
  memset(__s, 0, sizeof(__s));
  uint64_t v14 = (void *)ccaes_cbc_encrypt_mode();
  __chkstk_darwin(v14);
  uint64_t v44 = (uint64_t)&v37 - v15;
  bzero((char *)&v37 - v15, v15);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v37 - v17;
  bzero((char *)&v37 - v17, v17);
  uint64_t v19 = 0xFFFFFFFFLL;
  uint64_t v40 = &v37;
  size_t v41 = a8;
  uint64_t v39 = a7;
  if (!a4)
  {
    BOOL v21 = (a2 & 0xFFFFFFFFFFFFFFF7LL) == 0x10 || a2 == 32;
    if (!v21 || !a8 || *a8 < a6 + 8)
    {
      memset_s(__s, 0x40uLL, 0, 0x40uLL);
      goto LABEL_31;
    }

    unint64_t v38 = a6 + 8;
    cccbc_init(v14, v44, a2, v42);
    goto LABEL_15;
  }

  if (a8)
  {
    unint64_t v20 = *v41;
    unint64_t v38 = a6 + 8;
    if (v20 >= a6 + 8)
    {
LABEL_15:
      uint64_t v22 = 0LL;
      unsigned int v23 = a6 >> 3;
      else {
        uint64_t v24 = v23;
      }
      do
      {
        uint64_t v25 = *a5++;
        *((void *)&__s[v22++] + 1) = v25;
      }

      while (v24 != v22);
      uint64_t v26 = 0LL;
      *(void *)&__s[0] = v43;
      uint64_t v27 = 1LL;
      uint64_t v42 = v23;
      do
      {
        uint64_t v43 = v26;
        uint64_t v28 = 0LL;
        uint64_t v29 = (uint64_t *)__s;
        do
        {
          if (a4)
          {
            if ((a4(1LL, &unk_1002EF3E0, v29, v29, 16LL) & 1) == 0) {
              goto LABEL_6;
            }
          }

          else
          {
            cccbc_clear_iv(v18, v14[1]);
            sub_100102FE4((uint64_t)v14, v44, (uint64_t)v18, 0x10uLL);
          }

          uint64_t v30 = *v29;
          v29 += 2;
          unint64_t v31 = v30 ^ bswap64(v27 + v28++);
          *(void *)&__s[v28 % v23] = v31;
        }

        while (v24 != v28);
        uint64_t v26 = v43 + 1;
        v27 += v42;
      }

      while (v43 != 5);
      uint64_t v32 = v39;
      *uint64_t v39 = *(void *)&__s[0];
      uint64_t v33 = v32 + 1;
      __n128 v34 = (uint64_t *)__s + 1;
      do
      {
        uint64_t v35 = *v34;
        v34 += 2;
        *v33++ = v35;
        --v24;
      }

      while (v24);
      uint64_t v19 = 0LL;
      *size_t v41 = v38 & 0xFFFFFFF8;
LABEL_30:
      memset_s(__s, 0x40uLL, 0, 0x40uLL);
      if (a4) {
        return v19;
      }
LABEL_31:
      cc_clear(*v14, v44);
      return v19;
    }
  }

uint64_t sub_1000F3004( uint64_t a1, unsigned int a2, uint64_t a3, uint64_t (*a4)(uint64_t, void *, uint64_t *, uint64_t *, uint64_t), uint64_t *a5, unsigned int a6, void *a7, _DWORD *a8)
{
  unint64_t v11 = *a8;
  uint64_t v9 = sub_1000F2CF8(a1, a2, a3, a4, a5, a6, a7, &v11);
  sub_100102604(HIDWORD(v11) == 0, 171, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/aeskeywrap.c");
  *a8 = v11;
  return v9;
}

uint64_t sub_1000F306C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void *, unint64_t *, unint64_t *, uint64_t), void *a5, unint64_t a6, void *a7, void *a8)
{
  uint64_t v46 = a5;
  uint64_t v44 = a1;
  memset(__s, 0, sizeof(__s));
  uint64_t v14 = (void *)ccaes_cbc_decrypt_mode();
  __chkstk_darwin(v14);
  uint64_t v47 = (uint64_t)&v38 - v15;
  bzero((char *)&v38 - v15, v15);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v38 - v17;
  bzero((char *)&v38 - v17, v17);
  uint64_t v19 = 0xFFFFFFFFLL;
  if (HIDWORD(a6)) {
    goto LABEL_33;
  }
  uint64_t v40 = a3;
  unsigned int v20 = a6 >> 3;
  size_t v41 = &v38;
  uint64_t v42 = a8;
  uint64_t v39 = a7;
  unint64_t v45 = a6;
  if (!a4)
  {
    BOOL v21 = (a2 & 0xFFFFFFFFFFFFFFF7LL) == 0x10 || a2 == 32;
    if (!v21 || !a8 || *a8 < a6 - 8)
    {
      memset_s(__s, 0x40uLL, 0, 0x40uLL);
      goto LABEL_34;
    }

    cccbc_init(v14, v47, a2, v44);
    goto LABEL_15;
  }

  if (a8 && *v42 >= v45 - 8)
  {
LABEL_15:
    *(void *)&__s[0] = *v46;
    uint64_t v22 = v20 - 1;
    if (v20 != 1)
    {
      unsigned int v23 = (void *)__s + 1;
      uint64_t v24 = v46 + 1;
      uint64_t v25 = v20 - 1;
      do
      {
        uint64_t v26 = *v24++;
        void *v23 = v26;
        v23 += 2;
        --v25;
      }

      while (v25);
    }

    int v27 = 6 * v20 - 6;
    LODWORD(v44) = 1 - v20;
    int v28 = 5;
    uint64_t v43 = (unint64_t *)&__s[v20 - 2];
    do
    {
      LODWORD(v46) = v28;
      if (v45 >= 0x10)
      {
        uint64_t v29 = v43;
        int v30 = v22;
        unsigned int v31 = v27;
        do
        {
          *uint64_t v29 = *(void *)&__s[v30 % v22] ^ bswap64(v31);
          if (a4)
          {
            if ((a4(0LL, &unk_1002EF3E0, v29, v29, 16LL) & 1) == 0) {
              goto LABEL_6;
            }
          }

          else
          {
            cccbc_clear_iv(v18, v14[1]);
            sub_100102FE4((uint64_t)v14, v47, (uint64_t)v18, 0x10uLL);
          }

          --v31;
          v29 -= 2;
          BOOL v32 = __OFSUB__(v30--, 1);
        }

        while (!((v30 < 0) ^ v32 | (v30 == 0)));
      }

      int v28 = (_DWORD)v46 - 1;
      v27 += v44;
    }

    while ((_DWORD)v46);
    if (*(void *)&__s[0] == v40)
    {
      uint64_t v33 = v39;
      if ((_DWORD)v22)
      {
        __n128 v34 = (uint64_t *)__s + 1;
        uint64_t v35 = v22;
        do
        {
          uint64_t v36 = *v34;
          v34 += 2;
          *v33++ = v36;
          --v35;
        }

        while (v35);
      }

      uint64_t v19 = 0LL;
      *uint64_t v42 = (8 * v22);
    }

    else
    {
      uint64_t v19 = 0xFFFFFFFFLL;
    }

uint64_t sub_1000F33C8( uint64_t a1, unsigned int a2, uint64_t a3, uint64_t (*a4)(void, void *, unint64_t *, unint64_t *, uint64_t), void *a5, unsigned int a6, void *a7, _DWORD *a8)
{
  uint64_t v11 = *a8;
  uint64_t v9 = sub_1000F306C(a1, a2, a3, a4, a5, a6, a7, &v11);
  sub_100102604(HIDWORD(v11) == 0, 261, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/aeskeywrap.c");
  *a8 = v11;
  return v9;
}

uint64_t sub_1000F3430(unsigned int a1, _DWORD *a2)
{
  uint64_t v2 = a1 + 15LL;
  uint64_t v3 = v2 << 31 >> 31;
  BOOL v4 = v3 != v2 || v3 < 0;
  int v5 = v4;
  if (!v4) {
    *a2 = v3 & 0xFFFFFFF8;
  }
  return v5 ^ 1u;
}

uint64_t sub_1000F345C(unint64_t a1, unint64_t *a2)
{
  uint64_t v2 = a1 >= 0xFFFFFFFFFFFFFFF1LL;
  BOOL v3 = v2 << 63 >> 63 != v2 || v2 << 63 >> 63 == -1;
  int v4 = v3;
  if (!v3) {
    *a2 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  }
  return v4 ^ 1u;
}

BOOL sub_1000F348C(unsigned int a1, unsigned int *a2)
{
  unsigned int v2 = a1 - 8;
  BOOL result = a1 > 7;
  *a2 = v2;
  return result;
}

BOOL sub_1000F34A0(unint64_t a1, unint64_t *a2)
{
  unint64_t v2 = a1 - 8;
  BOOL result = a1 > 7;
  *a2 = v2;
  return result;
}

uint64_t sub_1000F34B4(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)&__int128 v18 = __s;
  *((void *)&v18 + 1) = v22;
  size_t v19 = 4096LL;
  uint64_t v12 = 3758097090LL;
  if (a4 && a5)
  {
    mach_port_t v13 = sub_1000F3714();
    if (!v13)
    {
      fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fv_new_vek",  ":",  179,  "",  0,  "",  "");
      uint64_t v12 = 3758097084LL;
      goto LABEL_16;
    }

    mach_port_t v14 = v13;
    if (!ccder_blob_encode_body_tl(&v18, 4LL, 16LL, a4)
      || !sub_100104D0C(&v18, a3)
      || !sub_100104D0C(&v18, a2)
      || !sub_100104E24(&v18, a1)
      || !ccder_blob_encode_tl(&v18, 0x2000000000000010LL, (char *)v22 - *((void *)&v18 + 1)))
    {
      goto LABEL_14;
    }

    input[0] = *((void *)&v18 + 1);
    input[1] = (uint64_t)v22 - *((void *)&v18 + 1);
    uint64_t v15 = IOConnectCallMethod(v14, 0x4Au, input, 2u, 0LL, 0LL, 0LL, 0LL, __s, &v19);
    if ((_DWORD)v15)
    {
      uint64_t v12 = v15;
      goto LABEL_16;
    }

    *(void *)&__int128 v17 = __s;
    *((void *)&v17 + 1) = &__s[v19];
    if (!ccder_blob_decode_range(&v17, 0x2000000000000010LL, &v17)
      || !sub_100104D78(&v17, 0, a5))
    {
      goto LABEL_14;
    }

    if (!a6)
    {
      uint64_t v12 = 0LL;
      goto LABEL_16;
    }

    uint64_t v12 = 0LL;
    if ((sub_100104B70(&v17, 0, a6) & 1) == 0) {
LABEL_14:
    }
      uint64_t v12 = 3758097098LL;
  }

uint64_t sub_1000F3714()
{
  if (qword_1002EE6B0 != -1) {
    dispatch_once(&qword_1002EE6B0, &stru_100282708);
  }
  dispatch_sync((dispatch_queue_t)qword_1002EE6B8, &stru_100282688);
  uint64_t result = dword_1002EE6A0;
  if (!dword_1002EE6A0)
  {
    syslog(3, "failed to open connection to %s\n", "AppleKeyStore");
    return dword_1002EE6A0;
  }

  return result;
}

unint64_t sub_1000F379C(char *a1, const void *a2, size_t a3)
{
  unint64_t v3 = (unint64_t)a1;
  if (a1)
  {
    int v6 = open_dprotected_np(a1, 1793, 4, 0, 384LL);
    if (v6 == -1)
    {
      uint64_t v10 = __error();
      uint64_t v11 = strerror(*v10);
      syslog(3, "could not create file: %s (%s)\n", (const char *)v3, v11);
      return 0LL;
    }

    else
    {
      int v7 = v6;
      ssize_t v8 = write(v6, a2, a3);
      unint64_t v3 = v8 != -1;
      if (v8 == -1)
      {
        uint64_t v12 = __error();
        mach_port_t v13 = strerror(*v12);
        syslog(3, "failed to write restore bag to disk %s\n", v13);
      }

      close(v7);
    }
  }

  return v3;
}

const char *sub_1000F386C(char *a1, void *a2, off_t *a3)
{
  unint64_t v3 = a1;
  memset(&v14, 0, sizeof(v14));
  if (a1)
  {
    if (!stat(a1, &v14))
    {
      off_t st_size = v14.st_size;
      int v7 = open(v3, 0);
      if (v7 == -1)
      {
        uint64_t v12 = __error();
        mach_port_t v13 = strerror(*v12);
        syslog(3, "could not open file: %s (%s)\n", v3, v13);
      }

      else
      {
        int v8 = v7;
        uint64_t v9 = calloc(st_size, 1uLL);
        unint64_t v3 = (const char *)(v9 != 0LL);
        if (!v9)
        {
LABEL_7:
          close(v8);
          return v3;
        }

        uint64_t v10 = v9;
        if (read(v8, v9, st_size) == st_size)
        {
          *a2 = v10;
          *a3 = st_size;
          goto LABEL_7;
        }

        close(v8);
        free(v10);
      }
    }

    return 0LL;
  }

  return v3;
}

uint64_t sub_1000F3974(unsigned int a1, const void *a2)
{
  uint64_t input = a1;
  mach_port_t v3 = sub_1000F3714();
  if (v3) {
    return IOConnectCallMethod(v3, 0x6Cu, &input, 1u, a2, 0x10uLL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_delete_xart_leak",  ":",  268,  "",  0,  "",  "");
  return 3758097084LL;
}

char *sub_1000F3A58(char *result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    v9[0] = result;
    v9[1] = 0LL;
    uint64_t result = (char *)fts_open(v9, 84, 0LL);
    if (result)
    {
      int v5 = (FTS *)result;
      int v6 = fts_read((FTS *)result);
      if (v6)
      {
        int v7 = v6;
        do
        {
          int fts_info = v7->fts_info;
          if (fts_info != 6)
          {
            if (fts_info == 1)
            {
              if (a2)
              {
              }
            }

            else if (a3 && fts_info == 8)
            {
              (*(void (**)(uint64_t, FTSENT *))(a3 + 16))(a3, v7);
            }
          }

          int v7 = fts_read(v5);
        }

        while (v7);
      }

      return (char *)fts_close(v5);
    }
  }

  return result;
}

char *sub_1000F3B54(char *result, int a2)
{
  if (result)
  {
    mach_port_t v3 = result;
    bzero(v8, 0x400uLL);
    uint64_t result = realpath_DARWIN_EXTSN(v3, v8);
    if (result)
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 0x40000000LL;
      void v6[2] = sub_1000F3C30;
      void v6[3] = &unk_1002825C8;
      int v7 = a2;
      v4[0] = _NSConcreteStackBlock;
      v4[1] = 0x40000000LL;
      void v4[2] = sub_1000F3CE0;
      void v4[3] = &unk_1002825E8;
      int v5 = a2;
      return sub_1000F3A58(v8, (uint64_t)v6, (uint64_t)v4);
    }
  }

  return result;
}

uint64_t sub_1000F3C30(uint64_t a1, uint64_t a2)
{
  int v4 = sub_1000F3C88(*(const char **)(a2 + 48));
  int v5 = *(_DWORD *)(a1 + 32);
  if (v5 == -1 || v4 == v5) {
    printf(" dir: %s %i\n", *(const char **)(a2 + 48), v4);
  }
  return 1LL;
}

uint64_t sub_1000F3C88(const char *a1)
{
  int v1 = open_dprotected_np(a1, 0, 0, 1);
  if (v1 == -1) {
    return 0xFFFFFFFFLL;
  }
  int v2 = v1;
  uint64_t v3 = fcntl(v1, 63);
  if ((v2 & 0x80000000) == 0) {
    close(v2);
  }
  return v3;
}

uint64_t sub_1000F3CE0(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1000F3C88(*(const char **)(a2 + 48));
  int v5 = *(_DWORD *)(a1 + 32);
  if (v5 == -1 || (_DWORD)result == v5) {
    return printf("file: %s %i\n", *(const char **)(a2 + 48), result);
  }
  return result;
}

uint64_t sub_1000F3D34()
{
  io_registry_entry_t v0 = IORegistryEntryFromPath(kIOMasterPortDefault, "IODeviceTree:/filesystems");
  if (v0)
  {
    io_object_t v1 = v0;
    CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v0, @"e-apfs", kCFAllocatorDefault, 0);
    BOOL v3 = CFProperty != 0LL;
    if (CFProperty) {
      CFRelease(CFProperty);
    }
    IOObjectRelease(v1);
  }

  else
  {
    BOOL v3 = 0;
  }

  size_t __len = 1023LL;
  bzero(__big, 0x400uLL);
  if ((byte_1002EE6A8 & 1) == 0)
  {
    if (!sysctlbyname("kern.bootargs", __big, &__len, 0LL, 0LL) && strnstr(__big, "-apfs_shared_datavolume", __len)) {
      byte_1002EE6A9 = 1;
    }
    byte_1002EE6A8 = 1;
  }

  unsigned int v4 = byte_1002EE6A9;
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s ioreg: %d, boot_arg: %d%s\n",  "aks",  "",  "",  "",  "aks_fs_supports_enhanced_apfs",  ":",  437,  "",  0,  "",  v3,  byte_1002EE6A9,  "");
  return v3 | v4;
}

uint64_t sub_1000F3EB4(const char *a1)
{
  if (realpath_DARWIN_EXTSN(a1, v4))
  {
    snprintf(__str, 0x400uLL, "%s/mobile", v4);
    sub_1000F3F84(v4, (uint64_t)&off_1002811A8, 35LL);
    if ((sub_1000F3D34() & 1) == 0) {
      sub_1000F3F84(__str, (uint64_t)&off_100281838, 72LL);
    }
  }

  return 0LL;
}

void sub_1000F3F84(const char *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v6 = a2 + 16;
    do
    {
      snprintf(__str, 0x400uLL, "%s%s", a1, *(const char **)(v6 - 16));
      if (stat(__str, &v7))
      {
        printf("stat failed: %s\n");
      }

      else
      {
        sub_1000F3C88(__str);
        printf("%s: mode=%o, u/g=%i:%i class=%i%s\n");
      }

      v6 += 48LL;
      --a3;
    }

    while (a3);
  }

uint64_t sub_1000F40C4(const char *a1)
{
  if (realpath_DARWIN_EXTSN(a1, v3)) {
    sub_1000F3F84(v3, (uint64_t)&off_100281838, 72LL);
  }
  return 0LL;
}

const char *sub_1000F4148()
{
  return sub_1000F419C("<user>", (uint64_t)&off_100281838, 72LL);
}

const char *sub_1000F419C(const char *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    unsigned int v4 = result;
    int v5 = (const char **)(a2 + 16);
    uint64_t v6 = (const char **)(a2 + 16);
    do
    {
      char v7 = *(_BYTE *)v6;
      v6 += 6;
      if ((v7 & 1) != 0) {
        uint64_t result = (const char *)printf("%s%s\n", v4, *(v5 - 2));
      }
      int v5 = v6;
      --v3;
    }

    while (v3);
  }

  return result;
}

uint64_t sub_1000F4204(uint64_t a1, unsigned int a2, void *a3, uint64_t a4, uint64_t a5)
{
  *(void *)&__int128 v16 = __s;
  *((void *)&v16 + 1) = &v20;
  size_t v17 = 4096LL;
  uint64_t v10 = 3758097090LL;
  if (a4 && a5)
  {
    mach_port_t v11 = sub_1000F3714();
    if (v11)
    {
      mach_port_t v12 = v11;
      if (!ccder_blob_encode_body_tl(&v16, 4LL, 16LL, a4)
        || !sub_100104D0C(&v16, a3)
        || !sub_100104E24(&v16, a1)
        || !ccder_blob_encode_tl(&v16, 0x2000000000000010LL, (char *)&v20 - *((void *)&v16 + 1)))
      {
        goto LABEL_10;
      }

      input[0] = a2;
      input[1] = *((void *)&v16 + 1);
      uint64_t input[2] = (uint64_t)&v20 - *((void *)&v16 + 1);
      uint64_t v13 = IOConnectCallMethod(v12, 0x4Cu, input, 3u, 0LL, 0LL, 0LL, 0LL, __s, &v17);
      if ((_DWORD)v13)
      {
        uint64_t v10 = v13;
        goto LABEL_12;
      }

      *(void *)&__int128 v15 = __s;
      *((void *)&v15 + 1) = &__s[v17];
      if (!ccder_blob_decode_range(&v15, 0x2000000000000010LL, &v15)
        || (uint64_t v10 = 0LL, (sub_100104D78(&v15, 0, a5) & 1) == 0))
      {
LABEL_10:
        uint64_t v10 = 3758097098LL;
      }
    }

    else
    {
      fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fv_new_kek",  ":",  508,  "",  0,  "",  "");
      uint64_t v10 = 3758097084LL;
    }
  }

uint64_t sub_1000F443C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)&__int128 v16 = __s;
  *((void *)&v16 + 1) = &v20;
  size_t v17 = 4096LL;
  uint64_t v10 = 3758097090LL;
  if (a3 && a4)
  {
    mach_port_t v11 = sub_1000F3714();
    if (!v11)
    {
      fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fv_new_sibling_vek",  ":",  543,  "",  0,  "",  "");
      uint64_t v10 = 3758097084LL;
      goto LABEL_15;
    }

    mach_port_t v12 = v11;
    if (!ccder_blob_encode_body_tl(&v16, 4LL, 16LL, a3)
      || !sub_100104D0C(&v16, a2)
      || !sub_100104E24(&v16, a1)
      || !ccder_blob_encode_tl(&v16, 0x2000000000000010LL, (char *)&v20 - *((void *)&v16 + 1)))
    {
      goto LABEL_13;
    }

    input[0] = *((void *)&v16 + 1);
    input[1] = (uint64_t)&v20 - *((void *)&v16 + 1);
    uint64_t v13 = IOConnectCallMethod(v12, 0x63u, input, 2u, 0LL, 0LL, 0LL, 0LL, __s, &v17);
    if ((_DWORD)v13)
    {
      uint64_t v10 = v13;
      goto LABEL_15;
    }

    *(void *)&__int128 v15 = __s;
    *((void *)&v15 + 1) = &__s[v17];
    if (!ccder_blob_decode_range(&v15, 0x2000000000000010LL, &v15)
      || !sub_100104D78(&v15, 0, a4))
    {
      goto LABEL_13;
    }

    if (!a5)
    {
      uint64_t v10 = 0LL;
      goto LABEL_15;
    }

    uint64_t v10 = 0LL;
    if ((sub_100104B70(&v15, 0, a5) & 1) == 0) {
LABEL_13:
    }
      uint64_t v10 = 3758097098LL;
  }

uint64_t sub_1000F4688(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, uint64_t a6)
{
  *(void *)&__int128 v18 = __s;
  *((void *)&v18 + 1) = v22;
  size_t v19 = 4096LL;
  uint64_t v12 = 3758097090LL;
  if (a3 && a4 && a5 && a6)
  {
    mach_port_t v13 = sub_1000F3714();
    if (v13)
    {
      mach_port_t v14 = v13;
      if (!sub_100104D0C(&v18, a5)
        || !ccder_blob_encode_body_tl(&v18, 4LL, 16LL, a4)
        || !sub_100104D0C(&v18, a3)
        || !sub_100104D0C(&v18, a2)
        || !sub_100104E24(&v18, a1)
        || !ccder_blob_encode_tl(&v18, 0x2000000000000010LL, (char *)v22 - *((void *)&v18 + 1)))
      {
        goto LABEL_14;
      }

      input[0] = *((void *)&v18 + 1);
      input[1] = (uint64_t)v22 - *((void *)&v18 + 1);
      uint64_t v15 = IOConnectCallMethod(v14, 0x4Du, input, 2u, 0LL, 0LL, 0LL, 0LL, __s, &v19);
      if ((_DWORD)v15)
      {
        uint64_t v12 = v15;
        goto LABEL_16;
      }

      *(void *)&__int128 v17 = __s;
      *((void *)&v17 + 1) = &__s[v19];
      if (!ccder_blob_decode_range(&v17, 0x2000000000000010LL, &v17)
        || (uint64_t v12 = 0LL, (sub_100104D78(&v17, 0, a6) & 1) == 0))
      {
LABEL_14:
        uint64_t v12 = 3758097098LL;
      }
    }

    else
    {
      fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fv_rewrap_kek",  ":",  582,  "",  0,  "",  "");
      uint64_t v12 = 3758097084LL;
    }
  }

uint64_t sub_1000F48E4( uint64_t a1, unsigned int a2, uint64_t a3, void *a4, void *a5, void *a6, uint64_t a7)
{
  uint64_t v13 = 3758097098LL;
  bzero(__s, 0x1000uLL);
  *(void *)&__int128 v20 = __s;
  *((void *)&v20 + 1) = v24;
  size_t v21 = 4096LL;
  mach_port_t v14 = sub_1000F3714();
  if (!v14)
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fv_set_protection",  ":",  616,  "",  0,  "",  "");
    uint64_t v13 = 3758097084LL;
    goto LABEL_14;
  }

  mach_port_t v15 = v14;
  if (sub_100104D0C(&v20, a6)
    && sub_100104D0C(&v20, a5)
    && sub_100104D0C(&v20, a4)
    && sub_100104E24(&v20, a1)
    && ccder_blob_encode_tl(&v20, 0x2000000000000010LL, (char *)v24 - *((void *)&v20 + 1)))
  {
    input[0] = a2;
    input[1] = a3;
    uint64_t input[2] = *((void *)&v20 + 1);
    uint64_t input[3] = (uint64_t)v24 - *((void *)&v20 + 1);
    uint64_t v16 = IOConnectCallMethod(v15, 0x54u, input, 4u, 0LL, 0LL, 0LL, 0LL, __s, &v21);
    if ((_DWORD)v16)
    {
      uint64_t v13 = v16;
      goto LABEL_14;
    }

    *(void *)&__int128 v19 = __s;
    *((void *)&v19 + 1) = &__s[v21];
    if (!v21) {
      goto LABEL_13;
    }
    if (!a7)
    {
LABEL_13:
      uint64_t v13 = 0LL;
      goto LABEL_14;
    }

    uint64_t v13 = 0LL;
    if ((sub_100104D78(&v19, 0, a7) & 1) == 0) {
      uint64_t v13 = 3758097098LL;
    }
  }

uint64_t sub_1000F4B2C( uint64_t a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7)
{
  *(void *)&__int128 v20 = __s;
  *((void *)&v20 + 1) = v24;
  size_t v21 = 4096LL;
  if (!a5)
  {
    uint64_t v17 = 3758097090LL;
    goto LABEL_15;
  }

  mach_port_t v14 = sub_1000F3714();
  if (!v14)
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fv_unwrap_vek_with_acm",  ":",  653,  "",  0,  "",  "");
    uint64_t v17 = 3758097084LL;
    goto LABEL_15;
  }

  mach_port_t v15 = v14;
  if (!sub_100104D0C(&v20, a6)
    || !sub_100104D0C(&v20, a5)
    || !sub_100104D0C(&v20, a4)
    || !sub_100104D0C(&v20, a3)
    || !sub_100104E24(&v20, a1)
    || !ccder_blob_encode_tl(&v20, 0x2000000000000010LL, (char *)v24 - *((void *)&v20 + 1)))
  {
    goto LABEL_13;
  }

  input[0] = *((void *)&v20 + 1);
  input[1] = (uint64_t)v24 - *((void *)&v20 + 1);
  uint64_t input[2] = a2;
  uint64_t v16 = IOConnectCallMethod(v15, 0x4Bu, input, 3u, 0LL, 0LL, 0LL, 0LL, __s, &v21);
  if ((_DWORD)v16)
  {
    uint64_t v17 = v16;
    goto LABEL_15;
  }

  *(void *)&__int128 v19 = __s;
  *((void *)&v19 + 1) = &__s[v21];
  if (!a7)
  {
    uint64_t v17 = 0LL;
    goto LABEL_15;
  }

  uint64_t v17 = 0LL;
  if ((sub_100104B70(&v19, 0, a7) & 1) == 0) {
LABEL_13:
  }
    uint64_t v17 = 3758097098LL;
LABEL_15:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v17;
}

uint64_t sub_1000F4D94(uint64_t a1, unsigned int a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  return sub_1000F4B2C(a1, a2, a3, a4, a5, 0LL, a6);
}

void sub_1000F4DA0(const char *a1, char a2)
{
  if (a1)
  {
    bzero(&v13, 0x878uLL);
    bzero(v12, 0x400uLL);
    if (realpath_DARWIN_EXTSN(a1, v12))
    {
      unsigned int v4 = (char *)malloc(0x818uLL);
      memset_s(v4, 0x818uLL, 0, 0x818uLL);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 0x40000000LL;
      v11[2] = sub_1000F500C;
      v11[3] = &unk_100282648;
      v11[4] = v4;
      sub_1000F3A58(v12, (uint64_t)&stru_100282628, (uint64_t)v11);
      if (!statfs(v12, &v13))
      {
        if ((a2 & 1) != 0) {
          printf("Free Blocks:%lld blocks of size:%d\n");
        }
        else {
          printf("%lld,%d\n");
        }
      }

      int v5 = v4 + 340;
      for (uint64_t i = 1LL; i != 5; ++i)
      {
        if ((a2 & 1) != 0)
        {
          uint64_t v9 = &v4[296 * i];
          printf( "%s:\n \tNum files:\t%u,\n \tNum hardlinks:\t%u,\n \tNum compressed:\t%u,\n \tTotal Size:\t%lld,\n \tMin File Size:\t%lld,\n \tMax File Size:\t%lld,\n",  off_1002E2B50[i],  *(_DWORD *)v9,  *((_DWORD *)v9 + 2),  *((_DWORD *)v9 + 1),  *((void *)v9 + 2),  *((void *)v9 + 3),  *((void *)v9 + 4));
          printf("\tSize Distribution:");
          printf("%i", *((_DWORD *)v9 + 10));
          for (uint64_t j = 0LL; j != 252; j += 4LL)
          {
            putchar(44);
            printf("%i", *(_DWORD *)&v5[j]);
          }
        }

        else
        {
          char v7 = &v4[296 * i];
          printf( "%i,%u,%u,%u,%lld,%lld,%lld,",  i,  *(_DWORD *)v7,  *((_DWORD *)v7 + 2),  *((_DWORD *)v7 + 1),  *((void *)v7 + 2),  *((void *)v7 + 3),  *((void *)v7 + 4));
          printf("%i", *((_DWORD *)v7 + 10));
          for (uint64_t k = 0LL; k != 252; k += 4LL)
          {
            putchar(44);
            printf("%i", *(_DWORD *)&v5[k]);
          }
        }

        putchar(10);
        v5 += 296;
      }

      free(v4);
    }
  }

BOOL sub_1000F5004(id a1, _ftsent *a2)
{
  return 1;
}

uint64_t sub_1000F500C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1000F3C88(*(const char **)(a2 + 48));
  if ((result - 7) >= 0xFFFFFFFA)
  {
    uint64_t v5 = *(void *)(a2 + 96);
    int64_t v6 = *(void *)(v5 + 96);
    uint64_t v7 = *(void *)(a1 + 32);
    ++*(_DWORD *)(v7 + 296LL * result);
    if ((*(_BYTE *)(v5 + 116) & 0x20) != 0) {
      ++*(_DWORD *)(v7 + 296LL * result + 4);
    }
    uint64_t v8 = v7 + 296LL * result;
    int64_t v10 = *(void *)(v8 + 32);
    uint64_t v9 = (int64_t *)(v8 + 32);
    *(v9 - 2) += v6;
    if (v6 > v10) {
      *uint64_t v9 = v6;
    }
    uint64_t v11 = v7 + 296LL * result;
    int64_t v14 = *(void *)(v11 + 24);
    uint64_t v12 = (int64_t *)(v11 + 24);
    int64_t v13 = v14;
    if (v14) {
      BOOL v15 = v6 < v13;
    }
    else {
      BOOL v15 = 1;
    }
    if (v15) {
      *uint64_t v12 = v6;
    }
    if (v6) {
      unint64_t v16 = v7 + 296LL * result + 4 * (63 - __clz(v6));
    }
    else {
      unint64_t v16 = v7 + 296LL * result;
    }
    ++*(_DWORD *)(v16 + 40);
  }

  return result;
}

uint64_t sub_1000F5114(unsigned int a1, uint64_t a2)
{
  input[0] = 1LL;
  input[1] = a1;
  uint64_t input[2] = a2;
  uint64_t output = 0LL;
  uint32_t outputCnt = 1;
  mach_port_t v2 = sub_1000F3714();
  if (v2) {
    return IOConnectCallMethod(v2, 0x56u, input, 3u, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_kext_set_options",  ":",  820,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_1000F51FC(unsigned int a1, uint64_t *a2)
{
  uint64_t v2 = 3758097084LL;
  if (!a2) {
    return 3758097090LL;
  }
  input[0] = 0LL;
  input[1] = a1;
  uint64_t input[2] = 0LL;
  uint64_t output = 0LL;
  uint32_t outputCnt = 1;
  mach_port_t v4 = sub_1000F3714();
  if (v4)
  {
    uint64_t v2 = IOConnectCallMethod(v4, 0x56u, input, 3u, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
    if (!(_DWORD)v2) {
      *a2 = output;
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_kext_get_options",  ":",  841,  "",  0,  "",  "");
  }

  return v2;
}

uint64_t sub_1000F5310()
{
  mach_port_t v0 = sub_1000F3714();
  if (v0) {
    return IOConnectCallMethod(v0, 0x10u, 0LL, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_internal_state",  ":",  857,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_1000F53B4(unsigned int a1)
{
  mach_port_t v2 = sub_1000F3714();
  if (v2)
  {
    uint64_t input = a1;
    return IOConnectCallMethod(v2, 0x86u, &input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_run_internal_test",  ":",  871,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t sub_1000F5498( int a1, unsigned int a2, uint64_t a3, int a4, const void *a5, int a6, void *a7, _DWORD *a8)
{
  size_t __count = 0x8000LL;
  mach_port_t v16 = sub_1000F3714();
  if (v16)
  {
    input[0] = a1;
    input[1] = a2;
    uint64_t input[2] = a3;
    uint64_t input[3] = a4;
    if (!a2 || (uint64_t v17 = 3758097090LL, a7) && a8)
    {
      uint64_t v17 = IOConnectCallMethod(v16, 0x36u, input, 4u, a5, a6, 0LL, 0LL, __src, &__count);
      if (!(_DWORD)v17 && a2)
      {
        __int128 v18 = calloc(__count, 1uLL);
        *a7 = v18;
        if (v18)
        {
          memcpy(v18, __src, __count);
          uint64_t v17 = 0LL;
          *a8 = __count;
        }

        else
        {
          uint64_t v17 = 3758097085LL;
        }
      }
    }
  }

  else
  {
    uint64_t v17 = 3758097084LL;
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_stash_escrow",  ":",  890,  "",  0,  "",  "");
  }

  memset_s(__src, 0x8000uLL, 0, 0x8000uLL);
  return v17;
}

void sub_1000F5670(id a1)
{
  if (!dword_1002EE6A0) {
    dword_1002EE6A0 = sub_1000F6148("IOService:/IOResources/AppleKeyStore", "AppleKeyStore");
  }
}

uint64_t sub_1000F56AC()
{
  if (qword_1002EE6B0 != -1) {
    dispatch_once(&qword_1002EE6B0, &stru_100282708);
  }
  dispatch_sync((dispatch_queue_t)qword_1002EE6B8, &stru_1002826C8);
  uint64_t result = dword_1002EE6A4;
  if (!dword_1002EE6A4)
  {
    syslog(3, "failed to open connection to %s\n", "AppleKeyStoreTest");
    return dword_1002EE6A4;
  }

  return result;
}

void sub_1000F5734(id a1)
{
  if (!dword_1002EE6A4) {
    dword_1002EE6A4 = sub_1000F6148("IOService:/IOResources/AppleKeyStoreTest", "AppleKeyStoreTest");
  }
}

uint64_t sub_1000F5770( mach_port_t a1, const void *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  input[0] = a4;
  input[1] = a3;
  uint64_t output = 0LL;
  uint32_t outputCnt = 1;
  bzero(outputStruct, 0x400uLL);
  size_t v19 = 1024LL;
  uint64_t v11 = IOConnectCallMethod(a1, 0xFu, input, 2u, a2, 0x10uLL, &output, &outputCnt, outputStruct, &v19);
  if ((_DWORD)v11) {
    return v11;
  }
  uint64_t v17 = 3758097084LL;
  if (outputCnt == 1)
  {
    *a7 = output;
    else {
      return 0LL;
    }
  }

  return v17;
}

uint64_t sub_1000F58A4( mach_port_t a1, const void *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8, uint64_t a9, _DWORD *a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  input[0] = a4;
  input[1] = a3;
  uint64_t output = 0LL;
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  uint32_t outputCnt = 3;
  bzero(outputStruct, 0x400uLL);
  size_t v26 = 1024LL;
  uint64_t v17 = IOConnectCallMethod(a1, 0x13u, input, 2u, a2, 0x10uLL, &output, &outputCnt, outputStruct, &v26);
  if ((_DWORD)v17) {
    return v17;
  }
  uint64_t v23 = 3758097084LL;
  if (outputCnt == 3)
  {
    int v24 = v30;
    *a7 = output;
    *a10 = v24;
    *a13 = v31;
    else {
      return 0LL;
    }
  }

  return v23;
}

uint64_t sub_1000F59FC( mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, size_t *a8)
{
  uint64_t input = a3;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  sub_100106DFC((char **)&inputStructCnt[1], inputStructCnt, 2, a4, a5, a6, (uint64_t)a7, (uint64_t)a8, a2);
  uint64_t v11 = IOConnectCallMethod( a1,  0x14u,  &input,  1u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  a7,  a8);
  free(*(void **)&inputStructCnt[1]);
  return v11;
}

uint64_t sub_1000F5AB8( mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, uint64_t a11, unsigned int a12, void *outputStruct, size_t *a14, _DWORD *a15)
{
  input[0] = a3;
  input[1] = a6;
  uint64_t input[2] = a9;
  uint64_t input[3] = a12;
  uint64_t output = 0LL;
  uint32_t outputCnt = 1;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  sub_100106DFC((char **)&inputStructCnt[1], inputStructCnt, 4, a4, a5, a6, a7, a8, a2);
  uint64_t v16 = IOConnectCallMethod( a1,  0x15u,  input,  4u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  &output,  &outputCnt,  outputStruct,  a14);
  if ((_DWORD)v16)
  {
    uint64_t v17 = v16;
  }

  else if (outputCnt == 1)
  {
    uint64_t v17 = 0LL;
    *a15 = output;
  }

  else
  {
    uint64_t v17 = 3758097084LL;
  }

  free(*(void **)&inputStructCnt[1]);
  return v17;
}

uint64_t sub_1000F5BC8( mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  input[0] = a3;
  input[1] = a6;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  bzero(outputStruct, 0x400uLL);
  size_t outputStructCnt = 1024LL;
  sub_100106DFC((char **)&inputStructCnt[1], inputStructCnt, 2, v10, v11, v12, v13, v14, a2);
  uint64_t v15 = IOConnectCallMethod( a1,  0x10u,  input,  2u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  outputStruct,  &outputStructCnt);
  if ((_DWORD)v15)
  {
    uint64_t v21 = v15;
  }

  else if (sub_100106ED8(outputStruct, outputStructCnt, 2u, v16, v17, v18, v19, v20, a7))
  {
    uint64_t v21 = 3758097084LL;
  }

  else
  {
    uint64_t v21 = 0LL;
  }

  free(*(void **)&inputStructCnt[1]);
  return v21;
}

uint64_t sub_1000F5D00( mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10)
{
  input[0] = a3;
  input[1] = a6;
  uint64_t input[2] = a9;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  bzero(outputStruct, 0x400uLL);
  size_t v25 = 1024LL;
  sub_100106DFC((char **)&inputStructCnt[1], inputStructCnt, 3, v12, v13, v14, v15, v16, a2);
  uint64_t v17 = IOConnectCallMethod( a1,  0x17u,  input,  3u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  outputStruct,  &v25);
  if ((_DWORD)v17)
  {
    uint64_t v23 = v17;
  }

  else if (sub_100106ED8(outputStruct, v25, 2u, v18, v19, v20, v21, v22, a10))
  {
    uint64_t v23 = 3758097084LL;
  }

  else
  {
    uint64_t v23 = 0LL;
  }

  free(*(void **)&inputStructCnt[1]);
  return v23;
}

uint64_t sub_1000F5E48(mach_port_t a1, void *inputStruct, unsigned int a3)
{
  uint64_t input = a3;
  return IOConnectCallMethod(a1, 0x11u, &input, 1u, inputStruct, 0x10uLL, 0LL, 0LL, 0LL, 0LL);
}

uint64_t sub_1000F5EB8( mach_port_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t input = a2;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  sub_100106DFC((char **)&inputStructCnt[1], inputStructCnt, 1, a4, a5, a6, a7, a8, a3);
  uint64_t v9 = IOConnectCallMethod( a1,  0x12u,  &input,  1u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  0LL,  0LL);
  free(*(void **)&inputStructCnt[1]);
  return v9;
}

uint64_t sub_1000F5F64(int a1, const void *a2, void *a3, size_t *a4)
{
  uint64_t input = a1;
  bzero(__src, 0x8000uLL);
  size_t __count = 0x8000LL;
  mach_port_t v7 = sub_1000F3714();
  if (v7)
  {
    if (a2) {
      size_t v8 = 18LL;
    }
    else {
      size_t v8 = 0LL;
    }
    uint64_t v9 = IOConnectCallMethod(v7, 0x5Du, &input, 1u, a2, v8, 0LL, 0LL, __src, &__count);
    size_t v10 = __count;
    if ((_DWORD)v9)
    {
      uint64_t v12 = v9;
    }

    else if (__count - 32769 < 0xFFFFFFFFFFFF8000LL)
    {
      uint64_t v12 = 3758097090LL;
    }

    else
    {
      uint64_t v11 = calloc(__count, 1uLL);
      *a3 = v11;
      size_t v10 = __count;
      if (v11)
      {
        *a4 = __count;
        memcpy(v11, __src, v10);
        uint64_t v12 = 0LL;
        size_t v10 = __count;
      }

      else
      {
        uint64_t v12 = 3758097085LL;
      }
    }
  }

  else
  {
    uint64_t v12 = 3758097084LL;
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_get_internal_info_for_key",  ":",  1246,  "",  0,  "",  "");
    size_t v10 = 0x8000LL;
  }

  memset_s(__src, v10, 0, v10);
  return v12;
}

void sub_1000F6120(id a1)
{
  qword_1002EE6B8 = (uint64_t)dispatch_queue_create("aks-client-queue", 0LL);
}

uint64_t sub_1000F6148(char *path, const char *a2)
{
  kern_return_t v5;
  CFDictionaryRef v6;
  io_service_t MatchingService;
  io_object_t v8;
  uint64_t result;
  kern_return_t v10;
  io_connect_t connect;
  connect = 0;
  io_service_t v3 = IORegistryEntryFromPath(kIOMasterPortDefault, path);
  if (!v3 || (io_object_t v4 = v3, v5 = IOServiceOpen(v3, mach_task_self_, 0, &connect), IOObjectRelease(v4), v5))
  {
    int64_t v6 = IOServiceMatching(a2);
    MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v6);
    if (MatchingService)
    {
      size_t v8 = MatchingService;
      IOServiceOpen(MatchingService, mach_task_self_, 0, &connect);
      IOObjectRelease(v8);
    }
  }

  uint64_t result = connect;
  if (connect)
  {
    size_t v10 = IOConnectCallMethod(connect, 0, 0LL, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
    uint64_t result = connect;
    if (v10)
    {
      IOServiceClose(connect);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000F623C(void *a1)
{
  uint64_t v2 = ccder_sizeof_implicit_uint64(0x8000000000000004LL, a1[10]);
  uint64_t v3 = ccder_sizeof_raw_octet_string(16LL);
  uint64_t v4 = ccder_sizeof_raw_octet_string(40LL);
  uint64_t v5 = v4 + v2 + 2 * v3 + ccder_sizeof_implicit_uint64(0x8000000000000000LL, *a1);
  return ccder_sizeof(0x2000000000000010LL, v5);
}

uint64_t sub_1000F62AC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2 + a3;
  uint64_t v7 = a2;
  uint64_t v8 = a2 + a3;
  if (!ccder_blob_encode_implicit_uint64(&v7, 0x8000000000000004LL, a1[10])
    || !ccder_blob_encode_implicit_raw_octet_string(&v7, 0x8000000000000003LL, 16LL, a1 + 8)
    || !ccder_blob_encode_implicit_raw_octet_string(&v7, 0x8000000000000002LL, 40LL, a1 + 3)
    || !ccder_blob_encode_implicit_raw_octet_string(&v7, 0x8000000000000001LL, 16LL, a1 + 1)
    || !ccder_blob_encode_implicit_uint64(&v7, 0x8000000000000000LL, *a1))
  {
    return 4294967273LL;
  }

  int v5 = ccder_blob_encode_tl(&v7, 0x2000000000000010LL, v4 - v8);
  uint64_t result = 4294967273LL;
  if (v5)
  {
    if (v7 == v8) {
      return 0LL;
    }
    else {
      return 4294967273LL;
    }
  }

  return result;
}

uint64_t sub_1000F638C(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)&__int128 v6 = a1;
  *((void *)&v6 + 1) = a1 + a2;
  if (!ccder_blob_decode_range(&v6, 0x2000000000000010LL, &v6)
    || !sub_1001061A4(&v6, 0x8000000000000000LL, a3)
    || !sub_1001039D4(&v6, 0x8000000000000001LL, a3 + 1, 16)
    || !sub_1001039D4(&v6, 0x8000000000000002LL, a3 + 3, 40)
    || !sub_1001039D4(&v6, 0x8000000000000003LL, a3 + 8, 16))
  {
    return 4294967277LL;
  }

  int v4 = sub_1001061A4(&v6, 0x8000000000000004LL, a3 + 10);
  uint64_t result = 4294967277LL;
  if (v4)
  {
    if ((void)v6 == *((void *)&v6 + 1)) {
      return 0LL;
    }
    else {
      return 4294967277LL;
    }
  }

  return result;
}

uint64_t sub_1000F6468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v13 = 40;
  *(void *)a4 = 0LL;
  uuid_copy((unsigned __int8 *)(a4 + 8), (const unsigned __int8 *)(a1 + 32));
  *(void *)(a4 + 80) = 1LL;
  uint64_t v8 = sub_1001064BC(a4 + 64, 0x10u);
  uint64_t v9 = ccsha256_di(v8);
  if (j__ccpbkdf2_hmac(v9, a3, a2, 16LL, a4 + 64, *(void *)(a4 + 80), 32LL, __s))
  {
    uint64_t v11 = 4294967286LL;
  }

  else
  {
    uint64_t v10 = sub_1000F3004((uint64_t)__s, 0x20u, 0xA6A6A6A6A6A6A6A6LL, 0LL, (uint64_t *)a1, 0x20u, (void *)(a4 + 24), &v13);
    if ((_DWORD)v10)
    {
      uint64_t v11 = v10;
    }

    else if (v13 == 40)
    {
      uint64_t v11 = 0LL;
    }

    else
    {
      uint64_t v11 = 4294967286LL;
    }
  }

  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  return v11;
}

uint64_t sub_1000F659C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v12 = 32;
  if (*(void *)a1)
  {
    uint64_t v10 = 4294967284LL;
  }

  else
  {
    uint64_t v8 = ccsha256_di(a1);
    uint64_t v9 = sub_1000F33C8((uint64_t)__s, 0x20u, 0xA6A6A6A6A6A6A6A6LL, 0LL, (void *)(a1 + 24), 0x28u, (void *)a4, &v12);
    if ((_DWORD)v9)
    {
      uint64_t v10 = v9;
      goto LABEL_8;
    }

    if (v12 != 32)
    {
LABEL_9:
      uint64_t v10 = 4294967286LL;
    }

    else
    {
      cccurve25519_make_pub(a4 + 32, a4);
      else {
        uint64_t v10 = 0LL;
      }
    }
  }

uint64_t sub_1000F66D4(int a1, unsigned int a2, unsigned int a3, uint64_t a4, int a5, void *a6)
{
  uint64_t v12 = 3758097098LL;
  bzero(v18, 0x1000uLL);
  *(void *)&__int128 v16 = v18;
  *((void *)&v16 + 1) = &v19;
  mach_port_t v13 = sub_1000F3714();
  if (v13)
  {
    mach_port_t v14 = v13;
    if (sub_100104D0C(&v16, a6)
      && ccder_blob_encode_tl(&v16, 0x2000000000000010LL, (char *)&v19 - *((void *)&v16 + 1)))
    {
      input[0] = a1;
      input[1] = a2;
      uint64_t input[2] = a4;
      uint64_t input[3] = a5;
      uint64_t input[4] = a3;
      input[5] = *((void *)&v16 + 1);
      input[6] = (uint64_t)&v19 - *((void *)&v16 + 1);
      return IOConnectCallMethod(v14, 0x21u, input, 7u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_stash_create_for_bag_and_kek",  ":",  50,  "",  0,  "",  "");
    return 3758097084LL;
  }

  return v12;
}

uint64_t sub_1000F687C(int a1, unsigned int a2, uint64_t a3, int a4)
{
  v5[0] = 0LL;
  v5[1] = 0LL;
  return sub_1000F66D4(a1, a2, 0, a3, a4, v5);
}

uint64_t sub_1000F68AC(int a1)
{
  return sub_1000F68B8(a1, 0, 0LL);
}

uint64_t sub_1000F68B8(int a1, unsigned int a2, BOOL *a3)
{
  mach_port_t v6 = sub_1000F3714();
  if (v6)
  {
    input[0] = a1;
    input[1] = a2;
    uint64_t output = 0LL;
    uint32_t outputCnt = 1;
    uint64_t result = IOConnectCallMethod(v6, 0x22u, input, 2u, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
    if (!(_DWORD)result)
    {
      uint64_t result = 0LL;
      if (a3) {
        *a3 = output != 0;
      }
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "_aks_stash_load",  ":",  77,  "",  0,  "",  "");
    return 3758097084LL;
  }

  return result;
}

uint64_t sub_1000F69D8(int a1, _BYTE *a2)
{
  BOOL v4 = 0;
  if (!a2) {
    return sub_1000F68B8(a1, 1u, &v4);
  }
  *a2 = 0;
  uint64_t result = sub_1000F68B8(a1, 1u, &v4);
  if (!(_DWORD)result) {
    *a2 = v4;
  }
  return result;
}

uint64_t sub_1000F6A30()
{
  mach_port_t v0 = sub_1000F3714();
  if (v0) {
    return IOConnectCallMethod(v0, 0x25u, 0LL, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_stash_destroy",  ":",  125,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_1000F6AD4(int a1)
{
  mach_port_t v2 = sub_1000F3714();
  if (v2)
  {
    uint64_t input = a1;
    return IOConnectCallMethod(v2, 0x24u, &input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_stash_commit",  ":",  138,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t sub_1000F6BB8(int a1)
{
  mach_port_t v2 = sub_1000F3714();
  if (v2)
  {
    uint64_t input = a1;
    return IOConnectCallMethod(v2, 0x33u, &input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_stash_enable",  ":",  154,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t sub_1000F6C9C(int a1)
{
  mach_port_t v2 = sub_1000F3714();
  if (v2)
  {
    uint64_t input = a1;
    return IOConnectCallMethod(v2, 0x35u, &input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_stash_persist",  ":",  170,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t sub_1000F6D80(void **a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)a1 != 1634431856) {
    return 0xFFFFFFFFLL;
  }
  free(a1[1]);
  free(a1);
  return 0LL;
}

uint64_t sub_1000F6DD8(int a1, uint64_t a2, unint64_t a3, int a4, void *a5)
{
  mach_port_t v14 = 0LL;
  if (!a2 && a3) {
    return 0xFFFFFFFFLL;
  }
  if (sub_1000F6EDC(a4, &v14) || (uint64_t v9 = calloc(0x20uLL, 1uLL)) == 0LL)
  {
    uint64_t v12 = 0xFFFFFFFFLL;
  }

  else
  {
    uint64_t v10 = v9;
    int v11 = sub_1000F6FBC((uint64_t)v14, a2, a3, (uint64_t)v9);
    uint64_t v12 = 0xFFFFFFFFLL;
    if (a3 <= 0x7FFFFFFE && !v11 && !sub_1000F705C(a1, a2, a3, (uint64_t)v10, (uint64_t)v14))
    {
      uint64_t v12 = 0LL;
      if (a5)
      {
        *a5 = v14;
        mach_port_t v14 = 0LL;
      }
    }

    memset_s(v10, 0x20uLL, 0, 0x20uLL);
    free(v10);
  }

  if (v14) {
    sub_1000F6D80(v14);
  }
  return v12;
}

uint64_t sub_1000F6EDC(int a1, void *a2)
{
  mach_port_t v6 = calloc(0x20uLL, 1uLL);
  if (!v6) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = v6;
  *((void *)v6 + 2) = 20LL;
  uint64_t v8 = calloc(0x14uLL, 1uLL);
  *((void *)v7 + 1) = v8;
  if (!v8)
  {
LABEL_19:
    free(v7);
    return 0xFFFFFFFFLL;
  }

  *uint64_t v7 = 1634431856;
  v7[6] = a1;
  uint64_t result = CCRandomCopyBytes(kCCRandomDefault, v8, *((void *)v7 + 2));
  if ((_DWORD)result)
  {
    uint64_t v10 = (void *)*((void *)v7 + 1);
    if (v10) {
      free(v10);
    }
    goto LABEL_19;
  }

  if (a1 == 3) {
    int v9 = 2000;
  }
  else {
    int v9 = 10000000;
  }
  if (a1 == 2) {
    int v9 = 1000;
  }
  v7[1] = v9;
  *a2 = v7;
  return result;
}

uint64_t sub_1000F6FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)a1 != 1634431856 || !a2 && a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0xFFFFFFFFLL;
  if (a4 && (*(_DWORD *)(a1 + 24) - 4) >= 0xFFFFFFFD)
  {
    uint64_t v9 = ccsha256_di(0xFFFFFFFFLL);
    if (ccpbkdf2_hmac( v9,  a3,  a2,  *(void *)(a1 + 16),  *(void *)(a1 + 8),  *(unsigned int *)(a1 + 4),  32LL,  a4)) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000F705C(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  rsize_t __n = 0LL;
  __s = 0LL;
  uint64_t v10 = 3758097090LL;
  mach_port_t v14 = 0LL;
  if ((a2 || !a3) && a4 && a5)
  {
    mach_port_t v11 = sub_1000F3714();
    if (v11)
    {
      mach_port_t v12 = v11;
      if (!sub_10010417C(&v14, (uint64_t)off_1002E2F18, *(void *)(a5 + 8), *(void *)(a5 + 16))
        && !sub_10010417C(&v14, (uint64_t)off_1002E2F10, a4, 32LL)
        && !sub_100104538(&v14, (uint64_t)off_1002E2F20, *(unsigned int *)(a5 + 4))
        && !sub_100104538(&v14, (uint64_t)off_1002E2F28, *(unsigned int *)(a5 + 24))
        && (a3 < 1 || !sub_10010417C(&v14, (uint64_t)off_1002E2BE0, a2, a3))
        && !sub_100104A5C(&v14)
        && !sub_100103E3C(&v14, &__s, &__n))
      {
        input[0] = a1;
        input[1] = (uint64_t)__s;
        uint64_t input[2] = __n;
        uint64_t v10 = IOConnectCallMethod(v12, 0x1Eu, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
      }
    }

    else
    {
      fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "_set_prederived_configuration",  ":",  218,  "",  0,  "",  "");
      uint64_t v10 = 3758097084LL;
    }
  }

  sub_10010376C(&v14);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v10;
}

uint64_t sub_1000F7284(int a1, uint64_t *a2)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t result = (uint64_t)calloc(0x20uLL, 1uLL);
  if (!result) {
    return result;
  }
  uint64_t v5 = result;
  *(_DWORD *)uint64_t result = 1634431856;
  mach_port_t v6 = sub_1000F3714();
  if (!v6)
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "_get_prederived_configuration",  ":",  384,  "",  0,  "",  "");
LABEL_16:
    sub_1000F6D80((void **)v5);
    return 0LL;
  }

  mach_port_t v7 = v6;
  bzero(outputStruct, 0x8000uLL);
  size_t v19 = 0x8000LL;
  uint64_t input = a1;
  if (IOConnectCallMethod(v7, 0x1Fu, &input, 1u, 0LL, 0LL, 0LL, 0LL, outputStruct, &v19) || v19 > 0x8000) {
    goto LABEL_16;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  uint64_t v9 = &outputStruct[v19];
  __int128 v22 = 0u;
  __int128 v24 = 0u;
  uint64_t v25 = 0LL;
  __int128 v21 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  uint64_t v20 = off_1002E2F18;
  __int128 v23 = (unint64_t)off_1002E2F20;
  size_t v26 = off_1002E2F28;
  __int128 v16 = xmmword_10024B9B0;
  uint64_t v17 = 0LL;
  uint64_t v18 = &v20;
  sub_100103260( (uint64_t)outputStruct,  (uint64_t)&outputStruct[v19],  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100103098,  (uint64_t)&v16);
  uint64_t v10 = *((void *)&v23 + 1);
  uint64_t v11 = v27;
  uint64_t v12 = ccder_decode_tl(4LL, v5 + 16, v21, v9);
  if (v12)
  {
    mach_port_t v13 = (const void *)v12;
    mach_port_t v14 = calloc(*(void *)(v5 + 16), 1uLL);
    *(void *)(v5 + 8) = v14;
    if (!v14)
    {
      int v15 = 0;
      if (!Mutable) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }

    memcpy(v14, v13, *(void *)(v5 + 16));
    *(_DWORD *)(v5 + 4) = sub_100103478(v10, (uint64_t)v9);
    *(_DWORD *)(v5 + 24) = sub_100103478(v11, (uint64_t)v9);
  }

  int v15 = 1;
  if (Mutable) {
LABEL_10:
  }
    CFRelease(Mutable);
LABEL_11:
  if (!v15 || !*(void *)(v5 + 16)) {
    goto LABEL_16;
  }
  *a2 = v5;
  return 1LL;
}

uint64_t sub_1000F7544(int a1, uint64_t a2, int a3, _DWORD *a4)
{
  if (a3) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  BOOL v5 = v4 || a4 == 0LL;
  else {
    uint64_t v7 = sub_1000F760C(a1, (uint64_t)v9, 32);
  }
  memset_s(v9, 0x20uLL, 0, 0x20uLL);
  return v7;
}

uint64_t sub_1000F760C(int a1, uint64_t a2, int a3)
{
  mach_port_t v6 = sub_1000F3714();
  if (v6)
  {
    input[0] = a1;
    input[1] = a2;
    uint64_t input[2] = a3;
    return IOConnectCallMethod(v6, 0xCu, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_unlock_bag",  ":",  807,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t sub_1000F7708(int a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t *a6)
{
  __int128 v16 = 0LL;
  if (!a6) {
    goto LABEL_17;
  }
  uint64_t v7 = *a6;
  if (!*a6 || *(_DWORD *)v7 != 1634431856 || !a2 && a3) {
    goto LABEL_17;
  }
  int v11 = sub_1000F6EDC(*(_DWORD *)(v7 + 24), &v16);
  uint64_t v12 = v16;
  if (v11 || (v13 = sub_1000F6FBC((uint64_t)v16, a4, a5, (uint64_t)v17), uint64_t v12 = v16, v13))
  {
LABEL_15:
    if (v12) {
      sub_1000F6D80(v12);
    }
LABEL_17:
    uint64_t v14 = 0xFFFFFFFFLL;
    goto LABEL_13;
  }

  if (sub_1000F705C(a1, (uint64_t)__s, 32, (uint64_t)v17, (uint64_t)v16))
  {
    uint64_t v12 = v16;
    goto LABEL_15;
  }

  sub_1000F6D80((void **)v7);
  uint64_t v14 = 0LL;
  *a6 = (uint64_t)v16;
LABEL_13:
  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  memset_s(v17, 0x20uLL, 0, 0x20uLL);
  return v14;
}

uint64_t sub_1000F7868(uint64_t a1, int a2, unsigned int a3, _DWORD *a4)
{
  return sub_1000F7880(a1, a2, 0LL, 0, a3, -1, a4);
}

uint64_t sub_1000F7880(uint64_t a1, int a2, uint64_t a3, int a4, unsigned int a5, int a6, _DWORD *a7)
{
  uint64_t v14 = 3758097084LL;
  mach_port_t v15 = sub_1000F3714();
  if (v15)
  {
    if (a7)
    {
      input[0] = a5;
      input[1] = a6;
      uint64_t input[2] = a1;
      uint64_t input[3] = a2;
      uint64_t input[4] = a3;
      input[5] = a4;
      uint64_t output = 0LL;
      uint32_t outputCnt = 1;
      uint64_t v14 = IOConnectCallMethod(v15, 2u, input, 6u, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
      if (!(_DWORD)v14) {
        *a7 = output;
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "_create_bag",  ":",  187,  "",  0,  "",  "");
  }

  return v14;
}

uint64_t sub_1000F79D4(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  return sub_1000F7880(a1, a2, 0LL, 0, 2u, a3, a4);
}

uint64_t sub_1000F79EC(uint64_t a1, int a2, uint64_t a3, int a4, int a5, _DWORD *a6)
{
  return sub_1000F7880(a3, a4, a1, a2, 2u, a5, a6);
}

uint64_t sub_1000F7A14(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  return sub_1000F7880(a1, a2, 0LL, 0, 0x8000002u, a3, a4);
}

uint64_t sub_1000F7A30(uint64_t a1, int a2, uint64_t a3, int a4, int a5, _DWORD *a6)
{
  return sub_1000F7880(a3, a4, a1, a2, 0x8000002u, a5, a6);
}

uint64_t sub_1000F7A5C()
{
  mach_port_t v0 = sub_1000F3714();
  if (v0) {
    return IOConnectCallMethod(v0, 0x42u, 0LL, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_invalidate_sync_bags",  ":",  544,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_1000F7B00(const void *a1, int a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10 = 3758097084LL;
  mach_port_t v11 = sub_1000F3714();
  if (v11)
  {
    if (a1)
    {
      input[0] = a5;
      input[1] = a3;
      uint64_t input[2] = a4;
      return IOConnectCallMethod(v11, 0x43u, input, 3u, a1, a2, 0LL, 0LL, 0LL, 0LL);
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_unlock_with_sync_bag",  ":",  557,  "",  0,  "",  "");
  }

  return v10;
}

uint64_t sub_1000F7C20(const void *a1, int a2, _DWORD *a3)
{
  uint64_t v6 = 3758097084LL;
  mach_port_t v7 = sub_1000F3714();
  if (v7)
  {
    uint64_t v6 = 3758097090LL;
    if (a1)
    {
      if (a3)
      {
        uint64_t output = 0LL;
        uint32_t outputCnt = 1;
        uint64_t v6 = IOConnectCallMethod(v7, 6u, 0LL, 0, a1, a2, &output, &outputCnt, 0LL, 0LL);
        if (!(_DWORD)v6) {
          *a3 = output;
        }
      }
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_load_bag",  ":",  574,  "",  0,  "",  "");
  }

  return v6;
}

uint64_t sub_1000F7D38(const void *a1, int a2)
{
  uint64_t v4 = 3758097084LL;
  mach_port_t v5 = sub_1000F3714();
  if (v5)
  {
    if (a1) {
      return IOConnectCallMethod(v5, 0x57u, 0LL, 0, a1, a2, 0LL, 0LL, 0LL, 0LL);
    }
    return 3758097090LL;
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_invalidate_bag",  ":",  596,  "",  0,  "",  "");
  }

  return v4;
}

uint64_t sub_1000F7E04(int a1)
{
  mach_port_t v2 = sub_1000F3714();
  if (v2)
  {
    uint64_t input = a1;
    return IOConnectCallMethod(v2, 4u, &input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_unload_bag",  ":",  612,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t sub_1000F7EE8(int a1)
{
  mach_port_t v2 = sub_1000F3714();
  if (v2)
  {
    uint64_t input = a1;
    return IOConnectCallMethod(v2, 0x37u, &input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_unload_session_bags",  ":",  629,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t sub_1000F7FCC(int a1, void *a2, _DWORD *a3)
{
  mach_port_t v6 = sub_1000F3714();
  if (v6)
  {
    mach_port_t v7 = v6;
    uint64_t result = 3758097090LL;
    if (a2)
    {
      if (a3)
      {
        bzero(__src, 0x8000uLL);
        size_t __count = 0x8000LL;
        uint64_t input = a1;
        uint64_t result = IOConnectCallMethod(v7, 3u, &input, 1u, 0LL, 0LL, 0LL, 0LL, __src, &__count);
        if (!(_DWORD)result)
        {
          uint64_t v9 = calloc(__count, 1uLL);
          *a2 = v9;
          if (v9)
          {
            memcpy(v9, __src, __count);
            uint64_t result = 0LL;
            *a3 = __count;
          }

          else
          {
            return 3758097085LL;
          }
        }
      }
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_save_bag",  ":",  646,  "",  0,  "",  "");
    return 3758097084LL;
  }

  return result;
}

uint64_t sub_1000F8154( int a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9, unsigned __int8 a10, unsigned int a11, unsigned int a12, _DWORD *a13)
{
  mach_port_t v21 = sub_1000F3714();
  if (v21)
  {
    input[0] = a1;
    input[1] = a11;
    uint64_t input[2] = a10;
    uint64_t input[3] = a2;
    uint64_t input[4] = a3;
    input[5] = a4;
    uint64_t input[6] = a5;
    uint64_t input[7] = a6;
    input[8] = a7;
    input[9] = a8;
    input[10] = a9;
    input[11] = a12;
    uint64_t output = 0LL;
    uint32_t outputCnt = 1;
    uint64_t result = IOConnectCallMethod(v21, 0xFu, input, 0xCu, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
    if (a13)
    {
      if (!(_DWORD)result) {
        *a13 = output;
      }
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_change_secret_opts",  ":",  678,  "",  0,  "",  "");
    return 3758097084LL;
  }

  return result;
}

uint64_t sub_1000F82C4( int a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9, unsigned __int8 a10, unsigned int a11, _DWORD *a12)
{
  return sub_1000F8154(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0, a12);
}

uint64_t sub_1000F82E8(int a1, uint64_t a2, int a3, uint64_t a4, int a5, unsigned int a6, _DWORD *a7)
{
  return sub_1000F8154(a1, a2, a3, a4, a5, 0LL, 0, 0LL, 0, 0xFFu, a6, 0, a7);
}

uint64_t sub_1000F8324(int a1, _OWORD *a2)
{
  uint64_t v4 = 3758097084LL;
  size_t v7 = 16LL;
  mach_port_t v5 = sub_1000F3714();
  if (v5)
  {
    if (a2)
    {
      __int128 outputStruct = 0uLL;
      uint64_t input = a1;
      uint64_t v4 = IOConnectCallMethod(v5, 0x17u, &input, 1u, 0LL, 0LL, 0LL, 0LL, &outputStruct, &v7);
      if (!(_DWORD)v4) {
        *a2 = outputStruct;
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_get_bag_uuid",  ":",  729,  "",  0,  "",  "");
  }

  return v4;
}

uint64_t sub_1000F8448(int a1, void *a2, size_t *a3)
{
  return sub_1000F845C(a1, (uint64_t)&unk_10024BA00, a2, a3);
}

uint64_t sub_1000F845C(int a1, uint64_t a2, void *a3, size_t *a4)
{
  __int16 v23 = 0;
  memset(__src, 0, sizeof(__src));
  size_t __count = 34LL;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  mach_port_t v8 = sub_1000F3714();
  if (v8)
  {
    uint64_t v14 = 3758097090LL;
    if (a3 && a4)
    {
      mach_port_t v15 = v8;
      uint64_t input = a1;
      sub_100106DFC((char **)&inputStructCnt[1], inputStructCnt, 1, v9, v10, v11, v12, v13, a2);
      if (*(void *)&inputStructCnt[1])
      {
        uint64_t v16 = IOConnectCallMethod( v15,  0x44u,  &input,  1u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  __src,  &__count);
        if ((_DWORD)v16)
        {
          uint64_t v14 = v16;
        }

        else
        {
          uint64_t v17 = calloc(__count, 1uLL);
          *a3 = v17;
          uint64_t v14 = 3758097085LL;
          if (v17)
          {
            memcpy(v17, __src, __count);
            uint64_t v14 = 0LL;
            *a4 = __count;
          }
        }
      }

      else
      {
        uint64_t v14 = 3758097085LL;
      }
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_copy_volume_cookie_persona",  ":",  760,  "",  0,  "",  "");
    uint64_t v14 = 3758097084LL;
  }

  free(*(void **)&inputStructCnt[1]);
  return v14;
}

uint64_t sub_1000F8608(int a1)
{
  mach_port_t v2 = sub_1000F3714();
  if (v2)
  {
    uint64_t input = a1;
    return IOConnectCallMethod(v2, 0xDu, &input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_lock_bag",  ":",  790,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t sub_1000F86EC(int a1, _DWORD *a2)
{
  uint64_t v4 = 3758097084LL;
  mach_port_t v5 = sub_1000F3714();
  if (v5)
  {
    if (a2)
    {
      uint64_t output = 0LL;
      uint64_t input = a1;
      uint32_t outputCnt = 1;
      uint64_t v4 = IOConnectCallMethod(v5, 7u, &input, 1u, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
      if (!(_DWORD)v4) {
        *a2 = output;
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_get_lock_state",  ":",  824,  "",  0,  "",  "");
  }

  return v4;
}

uint64_t sub_1000F8804(const void *a1, int a2, int a3, int a4, void *a5, int *a6, _DWORD *a7)
{
  uint64_t v14 = 3758097084LL;
  mach_port_t v15 = sub_1000F3714();
  if (v15)
  {
    uint64_t v14 = 3758097090LL;
    if (a1 && a5 && a6)
    {
      input[0] = a4;
      input[1] = a3;
      uint64_t output = 0LL;
      uint32_t outputCnt = 1;
      size_t v18 = *a6;
      uint64_t v16 = IOConnectCallMethod(v15, 0xAu, input, 2u, a1, a2, &output, &outputCnt, a5, &v18);
      if ((_DWORD)v16)
      {
        return v16;
      }

      else
      {
        *a6 = v18;
        uint64_t v14 = 0LL;
        if (a7) {
          *a7 = output;
        }
      }
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_wrap_key",  ":",  848,  "",  0,  "",  "");
  }

  return v14;
}

uint64_t sub_1000F896C(const void *a1, int a2, int a3, int a4, void *a5, int *a6)
{
  uint64_t v12 = 3758097084LL;
  mach_port_t v13 = sub_1000F3714();
  if (v13)
  {
    uint64_t v12 = 3758097090LL;
    if (a1)
    {
      if (a5)
      {
        if (a6)
        {
          input[0] = a4;
          input[1] = a3;
          size_t v15 = *a6;
          uint64_t v12 = IOConnectCallMethod(v13, 0xBu, input, 2u, a1, a2, 0LL, 0LL, a5, &v15);
          if (!(_DWORD)v12) {
            *a6 = v15;
          }
        }
      }
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_unwrap_key",  ":",  877,  "",  0,  "",  "");
  }

  return v12;
}

uint64_t sub_1000F8AB0(const void *a1, int a2, int a3, int a4, uint64_t a5, unsigned int a6, void *a7)
{
  uint64_t v14 = 3758097084LL;
  mach_port_t v15 = sub_1000F3714();
  if (v15)
  {
    uint64_t v14 = 3758097090LL;
    if (a1 && a7)
    {
      input[0] = a3;
      input[1] = a4;
      uint64_t input[2] = a5;
      uint64_t input[3] = a6;
      size_t v17 = 108LL;
      return IOConnectCallMethod(v15, 0x18u, input, 4u, a1, a2, 0LL, 0LL, a7, &v17);
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_rewrap_key_for_backup",  ":",  901,  "",  0,  "",  "");
  }

  return v14;
}

uint64_t sub_1000F8BF0(int a1, _DWORD *a2)
{
  uint64_t v4 = 3758097084LL;
  mach_port_t v5 = sub_1000F3714();
  if (v5)
  {
    if (a2)
    {
      uint64_t output = 0LL;
      uint64_t input = a1;
      uint32_t outputCnt = 1;
      uint64_t v4 = IOConnectCallMethod(v5, 0xEu, &input, a1 != 0, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
      if (!(_DWORD)v4) {
        *a2 = output;
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_get_system",  ":",  922,  "",  0,  "",  "");
  }

  return v4;
}

uint64_t sub_1000F8D0C(int a1, int a2, uint64_t a3, int a4)
{
  mach_port_t v8 = sub_1000F3714();
  if (v8)
  {
    input[0] = a1;
    input[1] = a2;
    uint64_t input[2] = a3;
    uint64_t input[3] = a4;
    return IOConnectCallMethod(v8, 5u, input, 4u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_set_system_with_passcode",  ":",  950,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t sub_1000F8E10(int a1, int a2)
{
  return sub_1000F8D0C(a1, a2, 0LL, 0);
}

uint64_t sub_1000F8E1C(int a1, uint64_t a2, unsigned int a3)
{
  return sub_1000F8E3C(a1, a2, a3);
}

uint64_t sub_1000F8E30(int a1, uint64_t a2, unsigned int a3)
{
  return sub_1000F8E3C(a1, a2, a3);
}

uint64_t sub_1000F8E3C(int a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = 3758097084LL;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  mach_port_t v7 = sub_1000F3714();
  if (v7)
  {
    mach_port_t v13 = v7;
    input[0] = a1;
    input[1] = a3;
    sub_100106DFC((char **)&inputStructCnt[1], inputStructCnt, 3, v8, v9, v10, v11, v12, a2);
    if (*(void *)&inputStructCnt[1])
    {
      uint64_t v6 = IOConnectCallMethod( v13,  0x41u,  input,  2u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  0LL,  0LL);
      uint64_t v14 = *(void **)&inputStructCnt[1];
    }

    else
    {
      uint64_t v14 = 0LL;
      uint64_t v6 = 3758097085LL;
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_set_keybag_for_volume_with_cookie_persona",  ":",  987,  "",  0,  "",  "");
    uint64_t v14 = 0LL;
  }

  free(v14);
  return v6;
}

uint64_t sub_1000F8FA4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, size_t *a5)
{
  uint64_t v10 = 3758097085LL;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  bzero(__src, 0x8000uLL);
  size_t __count = 0x8000LL;
  mach_port_t v11 = sub_1000F3714();
  if (v11)
  {
    mach_port_t v17 = v11;
    input[0] = a2;
    input[1] = a3;
    sub_100106DFC((char **)&inputStructCnt[1], inputStructCnt, 1, v12, v13, v14, v15, v16, a1);
    if (*(void *)&inputStructCnt[1])
    {
      uint64_t v18 = IOConnectCallMethod( v17,  0x6Eu,  input,  2u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  __src,  &__count);
      if ((_DWORD)v18)
      {
        uint64_t v10 = v18;
      }

      else
      {
        size_t v19 = calloc(__count, 1uLL);
        *a4 = v19;
        if (v19)
        {
          memcpy(v19, __src, __count);
          uint64_t v10 = 0LL;
          *a5 = __count;
        }
      }
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_backup_enable_volume",  ":",  1014,  "",  0,  "",  "");
    uint64_t v10 = 3758097084LL;
  }

  free(*(void **)&inputStructCnt[1]);
  return v10;
}

uint64_t sub_1000F9154(uint64_t a1)
{
  uint64_t v2 = 3758097084LL;
  uint64_t v13 = 0LL;
  int v12 = 0;
  mach_port_t v3 = sub_1000F3714();
  if (v3)
  {
    mach_port_t v9 = v3;
    sub_100106DFC(&v13, (unsigned int *)&v12, 1, v4, v5, v6, v7, v8, a1);
    if (v13)
    {
      uint64_t v2 = IOConnectCallMethod(v9, 0x6Fu, 0LL, 0, v13, v12, 0LL, 0LL, 0LL, 0LL);
      uint64_t v10 = v13;
    }

    else
    {
      uint64_t v10 = 0LL;
      uint64_t v2 = 3758097085LL;
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_backup_disable_volume",  ":",  1044,  "",  0,  "",  "");
    uint64_t v10 = 0LL;
  }

  free(v10);
  return v2;
}

uint64_t sub_1000F9258(uint64_t a1, void *a2)
{
  uint64_t v4 = 3758097084LL;
  uint64_t v16 = 0LL;
  int v15 = 0;
  size_t v14 = 16LL;
  mach_port_t v5 = sub_1000F3714();
  if (v5)
  {
    mach_port_t v11 = v5;
    sub_100106DFC(&v16, (unsigned int *)&v15, 1, v6, v7, v8, v9, v10, a1);
    if (v16)
    {
      uint64_t v4 = IOConnectCallMethod(v11, 0x70u, 0LL, 0, v16, v15, 0LL, 0LL, a2, &v14);
      int v12 = v16;
    }

    else
    {
      int v12 = 0LL;
      uint64_t v4 = 3758097085LL;
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_backup_copy_current_bag_uuid",  ":",  1066,  "",  0,  "",  "");
    int v12 = 0LL;
  }

  free(v12);
  return v4;
}

uint64_t sub_1000F936C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6, void *a7)
{
  uint64_t v13 = 3758097084LL;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  mach_port_t v14 = sub_1000F3714();
  if (v14)
  {
    mach_port_t v20 = v14;
    mach_port_t v21 = 0LL;
    uint64_t v13 = 3758097090LL;
    if (a2 && a7)
    {
      input[0] = a4;
      input[1] = a5;
      uint64_t input[2] = a6;
      sub_100106DFC((char **)&inputStructCnt[1], inputStructCnt, 2, v15, v16, v17, v18, v19, a1);
      size_t v23 = 108LL;
      uint64_t v13 = IOConnectCallMethod( v20,  0x71u,  input,  3u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  a7,  &v23);
      mach_port_t v21 = *(void **)&inputStructCnt[1];
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_backup_rewrap_key",  ":",  1087,  "",  0,  "",  "");
    mach_port_t v21 = 0LL;
  }

  free(v21);
  return v13;
}

uint64_t sub_1000F94EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, void *outputStruct)
{
  uint64_t v15 = 3758097084LL;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  mach_port_t v16 = sub_1000F3714();
  if (v16)
  {
    mach_port_t v22 = v16;
    size_t v23 = 0LL;
    uint64_t v15 = 3758097090LL;
    if (a2 && a4 && outputStruct)
    {
      input[0] = a6;
      input[1] = a7;
      uint64_t input[2] = a8;
      sub_100106DFC((char **)&inputStructCnt[1], inputStructCnt, 3, v17, v18, v19, v20, v21, a1);
      size_t v25 = 108LL;
      uint64_t v15 = IOConnectCallMethod( v22,  0x71u,  input,  3u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  outputStruct,  &v25);
      size_t v23 = *(void **)&inputStructCnt[1];
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_backup_rewrap_ek",  ":",  1113,  "",  0,  "",  "");
    size_t v23 = 0LL;
  }

  free(v23);
  return v15;
}

uint64_t sub_1000F9680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 __s = 0u;
  __int128 v16 = 0u;
  uint64_t v14 = 0LL;
  memset(v13, 0, sizeof(v13));
  uint64_t v8 = sub_1000F638C(a1, a2, v13);
  if ((_DWORD)v8)
  {
    uint64_t v9 = v8;
  }

  else
  {
    uint64_t v9 = sub_1000F659C((uint64_t)v13, a3, a4, (uint64_t)&__s);
    if (!(_DWORD)v9)
    {
      __int128 v10 = v16;
      *a5 = __s;
      a5[1] = v10;
      __int128 v11 = v18;
      a5[2] = v17;
      a5[3] = v11;
    }
  }

  memset_s(v13, 0x58uLL, 0, 0x58uLL);
  memset_s(&__s, 0x40uLL, 0, 0x40uLL);
  return sub_100102554(v9);
}

uint64_t sub_1000F976C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v7 = 0LL;
  memset(v6, 0, sizeof(v6));
  uint64_t v4 = sub_1000F638C(a1, a2, v6);
  if (!(_DWORD)v4) {
    uuid_copy(a3, (const unsigned __int8 *)v6 + 8);
  }
  memset_s(v6, 0x58uLL, 0, 0x58uLL);
  return sub_100102554(v4);
}

uint64_t sub_1000F9814(__int128 *a1, void *a2, unsigned int a3, void *a4, void *a5)
{
  __int128 v6 = a1[1];
  __int128 v12 = *a1;
  __int128 v13 = v6;
  __int128 v7 = a1[3];
  __int128 v14 = a1[2];
  __int128 v15 = v7;
  unsigned int v10 = *a5;
  int __s = 1;
  uint64_t v8 = sub_100102B80((uint64_t)&__s, 0LL, 0, a2, a3, a4, &v10);
  *a5 = v10;
  memset_s(&__s, 0x44uLL, 0, 0x44uLL);
  return sub_100102554(v8);
}

uint64_t sub_1000F98D0(uint64_t a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  uint64_t v10 = 3758097084LL;
  mach_port_t v11 = sub_1000F3714();
  if (v11)
  {
    uint64_t v10 = 3758097090LL;
    if (a2 && a4)
    {
      input[0] = a1;
      input[1] = 64LL;
      return IOConnectCallMethod(v11, 0x82u, input, 2u, a2, a3, 0LL, 0LL, a4, a5);
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_unwrap_key",  ":",  1193,  "",  0,  "",  "");
  }

  return v10;
}

uint64_t sub_1000F99E8(int a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  uint64_t v10 = 3758097084LL;
  mach_port_t v11 = sub_1000F3714();
  if (v11)
  {
    uint64_t v10 = 3758097090LL;
    if (a2 && a4)
    {
      uint64_t input = a1;
      return IOConnectCallMethod(v11, 0x81u, &input, 1u, a2, a3, 0LL, 0LL, a4, a5);
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_wrap_key",  ":",  1212,  "",  0,  "",  "");
  }

  return v10;
}

uint64_t sub_1000F9B00(int a1, _DWORD *a2)
{
  uint64_t v4 = 3758097084LL;
  mach_port_t v5 = sub_1000F3714();
  if (v5)
  {
    if (a2)
    {
      uint64_t output = 0LL;
      uint64_t input = a1;
      uint32_t outputCnt = 1;
      uint64_t v4 = IOConnectCallMethod(v5, 0x83u, &input, 1u, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
      if (!(_DWORD)v4) {
        *a2 = output;
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_get_handle",  ":",  1231,  "",  0,  "",  "");
  }

  return v4;
}

uint64_t sub_1000F9C18(int a1, unsigned __int8 *a2)
{
  uint64_t v4 = 3758097084LL;
  mach_port_t v5 = sub_1000F3714();
  if (v5)
  {
    if (a2)
    {
      uint64_t v10 = 0LL;
      uint64_t input = a1;
      size_t v8 = 16LL;
      *(void *)src = 0LL;
      uint64_t v6 = IOConnectCallMethod(v5, 0x84u, &input, 1u, 0LL, 0LL, 0LL, 0LL, src, &v8);
      if ((_DWORD)v6)
      {
        return v6;
      }

      else if (v8 == 16)
      {
        uuid_copy(a2, src);
        return 0LL;
      }

      else
      {
        return 3758604298LL;
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_get_uuid",  ":",  1253,  "",  0,  "",  "");
  }

  return v4;
}

uint64_t sub_1000F9D5C(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, _OWORD *a6)
{
  __int128 v17 = 0LL;
  if (a5)
  {
    int v7 = a4;
    int v9 = a2;
    *a5 = -1;
    int v11 = sub_1000F9680((uint64_t)a1, a2, a3, a4, a6);
    if (!v11)
    {
      fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s Unwrapped DER backup bag%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_open_keybag",  ":",  1302,  "",  0,  "",  "");
      uint64_t v15 = 0LL;
      goto LABEL_9;
    }

    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s Failed to unwrap backup bag as DER: 0x%08x%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_open_keybag",  ":",  1290,  "",  0,  "",  v11,  "");
    uint64_t v12 = sub_1000F7C20(a1, v9, a5);
    if ((_DWORD)v12)
    {
      uint64_t v15 = v12;
      fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s Failed to load in-kernel backup bag: 0x%08x%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_open_keybag",  ":",  1292,  "",  0,  "",  v12,  "");
    }

    else
    {
      int v13 = sub_1000F7284(*a5, (uint64_t *)&v17);
      int v14 = *a5;
      if (v13)
      {
        uint64_t v15 = sub_1000F7544(v14, a3, v7, v17);
        if (!(_DWORD)v15) {
          goto LABEL_9;
        }
        fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s Failed to unlock in-kernel backup bag with prederived secret: 0x%08x%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_open_keybag",  ":");
      }

      else
      {
        uint64_t v15 = sub_1000F760C(v14, a3, v7);
        if (!(_DWORD)v15) {
          goto LABEL_9;
        }
        fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s Failed to unlock in-kernel backup bag: 0x%08x%s\n",  "aks",  "",  "",  "",  "aks_kc_backup_open_keybag",  ":");
      }
    }
  }

  else
  {
    uint64_t v15 = 3758097090LL;
  }

  if (*a5 != -1)
  {
    sub_1000F7E04(*a5);
    *a5 = -1;
  }

uint64_t sub_1000F9F88(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = 3758097084LL;
  uint64_t v19 = 0LL;
  int v18 = 0;
  mach_port_t v9 = sub_1000F3714();
  if (v9)
  {
    mach_port_t v15 = v9;
    input[0] = a1;
    input[1] = a2;
    uint64_t input[2] = a3;
    sub_100106DFC(&v19, (unsigned int *)&v18, 1, v10, v11, v12, v13, v14, a4);
    if (v19)
    {
      uint64_t v8 = IOConnectCallMethod(v15, 0x60u, input, 3u, v19, v18, 0LL, 0LL, 0LL, 0LL);
      __int128 v16 = v19;
    }

    else
    {
      __int128 v16 = 0LL;
      uint64_t v8 = 3758097085LL;
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_keybag_persona_create",  ":",  1324,  "",  0,  "",  "");
    __int128 v16 = 0LL;
  }

  free(v16);
  return v8;
}

uint64_t sub_1000FA0D8(int a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v10 = 3758097084LL;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  mach_port_t v11 = sub_1000F3714();
  if (v11)
  {
    mach_port_t v17 = v11;
    input[0] = a1;
    input[1] = a2;
    uint64_t input[2] = a3;
    uint64_t input[3] = a5;
    sub_100106DFC((char **)&inputStructCnt[1], inputStructCnt, 1, v12, v13, v14, v15, v16, a4);
    if (*(void *)&inputStructCnt[1])
    {
      uint64_t v10 = IOConnectCallMethod( v17,  0x75u,  input,  4u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  0LL,  0LL);
      int v18 = *(void **)&inputStructCnt[1];
    }

    else
    {
      int v18 = 0LL;
      uint64_t v10 = 3758097085LL;
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_keybag_persona_create_with_flags",  ":",  1346,  "",  0,  "",  "");
    int v18 = 0LL;
  }

  free(v18);
  return v10;
}

uint64_t sub_1000FA238(int a1, void *a2, size_t *a3)
{
  size_t __count = 0x2000LL;
  uint64_t input = a1;
  uint64_t v6 = 3758097090LL;
  if (a2 && a3)
  {
    mach_port_t v7 = sub_1000F3714();
    if (v7)
    {
      uint64_t v8 = IOConnectCallMethod(v7, 0x61u, &input, 1u, 0LL, 0LL, 0LL, 0LL, __src, &__count);
      if ((_DWORD)v8)
      {
        uint64_t v6 = v8;
      }

      else
      {
        if (__count)
        {
          mach_port_t v9 = calloc(__count, 1uLL);
          *a2 = v9;
          if (!v9)
          {
            uint64_t v6 = 3758097085LL;
            goto LABEL_10;
          }

          memcpy(v9, __src, __count);
          size_t v10 = __count;
        }

        else
        {
          size_t v10 = 0LL;
          *a2 = 0LL;
        }

        uint64_t v6 = 0LL;
        *a3 = v10;
      }
    }

    else
    {
      fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_keybag_persona_list",  ":",  1372,  "",  0,  "",  "");
      uint64_t v6 = 3758097084LL;
    }
  }

LABEL_10:
  memset_s(__src, 0x2000uLL, 0, 0x2000uLL);
  return v6;
}

    uint64_t v14 = v13 | !v12;
  }

  return v14 & 1;
}

LABEL_29:
        goto LABEL_30;
      }

      if (a4)
      {
        uint64_t v31 = kTransparencyErrorDecode;
        BOOL v32 = @"failed to parse timestampMs from OptInOut";
        uint64_t v33 = -275LL;
        goto LABEL_17;
      }

  if (qword_1002EECF0 != -1) {
    dispatch_once(&qword_1002EECF0, &stru_100287950);
  }
  uint64_t v14 = (os_log_s *)qword_1002EECF8;
  if (os_log_type_enabled((os_log_t)qword_1002EECF8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v16 = 138412290;
    mach_port_t v17 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "skipping eventId %@ due to unknown type",  (uint8_t *)&v16,  0xCu);
  }

  return v13;
}

uint64_t sub_1000FA3E0(int a1, uint64_t a2)
{
  uint64_t v4 = 3758097084LL;
  uint64_t v15 = 0LL;
  int v14 = 0;
  mach_port_t v5 = sub_1000F3714();
  if (v5)
  {
    mach_port_t v11 = v5;
    uint64_t input = a1;
    sub_100106DFC(&v15, (unsigned int *)&v14, 1, v6, v7, v8, v9, v10, a2);
    if (v15)
    {
      uint64_t v4 = IOConnectCallMethod(v11, 0x62u, &input, 1u, v15, v14, 0LL, 0LL, 0LL, 0LL);
      uint64_t v12 = v15;
    }

    else
    {
      uint64_t v12 = 0LL;
      uint64_t v4 = 3758097085LL;
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_keybag_persona_delete",  ":",  1394,  "",  0,  "",  "");
    uint64_t v12 = 0LL;
  }

  free(v12);
  return v4;
}

uint64_t sub_1000FA51C(int a1, uint64_t a2, int a3, unsigned int a4, void *a5, size_t *a6)
{
  uint64_t v12 = 3758097084LL;
  mach_port_t v13 = sub_1000F3714();
  if (v13)
  {
    uint64_t v12 = 3758097090LL;
    if (a5 && a6)
    {
      input[0] = a1;
      input[1] = a4;
      uint64_t input[2] = a2;
      uint64_t input[3] = a3;
      return IOConnectCallMethod(v13, 0x26u, input, 4u, 0LL, 0LL, 0LL, 0LL, a5, a6);
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_auth_token_create",  ":",  1415,  "",  0,  "",  "");
  }

  return v12;
}

uint64_t sub_1000FA64C(int a1, uint64_t a2, int a3, const __CFDictionary *a4)
{
  rsize_t __n = 0LL;
  int __s = 0LL;
  uint64_t v8 = 3758097090LL;
  uint64_t v21 = 0LL;
  mach_port_t v9 = sub_1000F3714();
  if (v9)
  {
    mach_port_t v10 = v9;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (!sub_1000FA984(a4, @"GracePeriod", TypeID, (uint64_t)off_1002E2D38, &v21))
    {
      CFTypeID v12 = CFNumberGetTypeID();
      if (!sub_1000FA984(a4, @"BackOffDelay", v12, (uint64_t)off_1002E2D40, &v21))
      {
        CFTypeID v13 = CFNumberGetTypeID();
        if (!sub_1000FA984(a4, @"MaxUnlockAttempts", v13, (uint64_t)off_1002E2D48, &v21))
        {
          CFTypeID v14 = CFNumberGetTypeID();
          if (!sub_1000FA984(a4, @"EscrowPasscodePeriod", v14, (uint64_t)off_1002E2D50, &v21))
          {
            CFTypeID v15 = CFNumberGetTypeID();
            if (!sub_1000FA984(a4, @"EscrowTokenPeriod", v15, (uint64_t)off_1002E2D58, &v21))
            {
              CFTypeID v16 = CFDataGetTypeID();
              if (!sub_1000FA984(a4, @"UserUUID", v16, (uint64_t)off_1002E2F40, &v21))
              {
                CFTypeID v17 = CFDataGetTypeID();
                if (!sub_1000FA984(a4, @"BindKEKToKB", v17, (uint64_t)off_1002E2F80, &v21))
                {
                  CFTypeID v18 = CFBooleanGetTypeID();
                  if (!sub_1000FA984( a4,  @"InactivityRebootEnabled",  v18,  (uint64_t)off_1002E3158,  &v21))
                  {
                    CFTypeID v19 = CFBooleanGetTypeID();
                    if (!sub_1000FA984( a4,  @"OnenessAutomaticMode",  v19,  (uint64_t)off_1002E3160,  &v21)
                      && !sub_100104A5C(&v21)
                      && (!a2 || !sub_10010417C(&v21, (uint64_t)off_1002E2BE0, a2, a3))
                      && !sub_100103E3C(&v21, &__s, &__n))
                    {
                      input[0] = a1;
                      input[1] = (uint64_t)__s;
                      uint64_t input[2] = __n;
                      uint64_t v8 = IOConnectCallMethod(v10, 0x1Eu, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_set_configuration",  ":",  1488,  "",  0,  "",  "");
    uint64_t v8 = 3758097084LL;
  }

  sub_10010376C(&v21);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  return v8;
}

uint64_t sub_1000FA984(const __CFDictionary *a1, const void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  value = 0LL;
  uint64_t result = CFDictionaryGetValueIfPresent(a1, a2, (const void **)&value);
  if ((_DWORD)result)
  {
    if (CFGetTypeID(value) == a3)
    {
      if (CFNumberGetTypeID() == a3)
      {
        uint64_t v12 = 0LL;
        if (!CFNumberGetValue((CFNumberRef)value, kCFNumberSInt64Type, &v12)
          || sub_100104538(a5, a4, v12))
        {
          return 0xFFFFFFFFLL;
        }

        return 0LL;
      }

      if (CFBooleanGetTypeID() == a3)
      {
        BOOL v9 = CFBooleanGetValue((CFBooleanRef)value) != 0;
      }

      else
      {
        if (CFDataGetTypeID() != a3) {
          return 0xFFFFFFFFLL;
        }
        BytePtr = CFDataGetBytePtr((CFDataRef)value);
        CFIndex Length = CFDataGetLength((CFDataRef)value);
      }

      return 0LL;
    }

    return 0xFFFFFFFFLL;
  }

  return result;
}

uint64_t sub_1000FAA88(int a1, __CFDictionary **a2)
{
  uint64_t v4 = 3758097084LL;
  mach_port_t v5 = sub_1000F3714();
  if (v5)
  {
    if (a2)
    {
      mach_port_t v6 = v5;
      bzero(outputStruct, 0x8000uLL);
      size_t v48 = 0x8000LL;
      uint64_t input = a1;
      uint64_t v7 = IOConnectCallMethod(v6, 0x1Fu, &input, 1u, 0LL, 0LL, 0LL, 0LL, outputStruct, &v48);
      if ((_DWORD)v7)
      {
        return v7;
      }

      else if (v48 > 0x8000)
      {
        return 3758604298LL;
      }

      else
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( kCFAllocatorDefault,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
        BOOL v9 = &outputStruct[v48];
        bzero(v50, 0x250uLL);
        uint64_t v49 = off_1002E2D38;
        v50[4] = off_1002E2D40;
        v50[9] = off_1002E2D48;
        v50[14] = off_1002E2D50;
        v50[19] = off_1002E2D58;
        v50[24] = off_1002E2D60;
        v50[29] = off_1002E2F40;
        v50[34] = off_1002E2F78;
        v50[39] = off_1002E2F88;
        v50[44] = off_1002E2F90;
        v50[49] = off_1002E2F98;
        v50[54] = off_1002E3118;
        v50[59] = off_1002E3120;
        v50[64] = off_1002E3150;
        v50[69] = off_1002E3148;
        __int128 v45 = xmmword_10024B9C0;
        uint64_t v46 = 0LL;
        uint64_t v47 = &v49;
        sub_100103260( (uint64_t)outputStruct,  (uint64_t)v9,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100103098,  (uint64_t)&v45);
        uint64_t v10 = v50[0];
        uint64_t v11 = v50[5];
        uint64_t v12 = v50[10];
        uint64_t v13 = v50[15];
        uint64_t v14 = v50[20];
        uint64_t v15 = v50[25];
        uint64_t v16 = v50[30];
        uint64_t v44 = a2;
        uint64_t v17 = v50[35];
        uint64_t v37 = v50[40];
        uint64_t v38 = v50[45];
        uint64_t v39 = v50[50];
        uint64_t v40 = v50[55];
        uint64_t v41 = v50[60];
        uint64_t v42 = v50[65];
        uint64_t v43 = v50[70];
        CFTypeID TypeID = CFNumberGetTypeID();
        sub_1000FB000(Mutable, @"GracePeriod", TypeID, v10, (uint64_t)v9);
        CFTypeID v19 = CFNumberGetTypeID();
        sub_1000FB000(Mutable, @"BackOffDelay", v19, v11, (uint64_t)v9);
        CFTypeID v20 = CFNumberGetTypeID();
        sub_1000FB000(Mutable, @"MaxUnlockAttempts", v20, v12, (uint64_t)v9);
        CFTypeID v21 = CFNumberGetTypeID();
        sub_1000FB000(Mutable, @"EscrowPasscodePeriod", v21, v13, (uint64_t)v9);
        CFTypeID v22 = CFNumberGetTypeID();
        sub_1000FB000(Mutable, @"EscrowTokenPeriod", v22, v14, (uint64_t)v9);
        CFTypeID v23 = CFNumberGetTypeID();
        sub_1000FB000(Mutable, @"ConfigFlags", v23, v15, (uint64_t)v9);
        CFTypeID v24 = CFDataGetTypeID();
        sub_1000FB000(Mutable, @"UserUUID", v24, v16, (uint64_t)v9);
        CFTypeID v25 = CFDataGetTypeID();
        sub_1000FB000(Mutable, @"GroupUUID", v25, v17, (uint64_t)v9);
        CFTypeID v26 = CFNumberGetTypeID();
        sub_1000FB000(Mutable, @"RecoveryIterations", v26, v37, (uint64_t)v9);
        CFTypeID v27 = CFNumberGetTypeID();
        sub_1000FB000(Mutable, @"RecoveryFlags", v27, v38, (uint64_t)v9);
        CFTypeID v28 = CFNumberGetTypeID();
        sub_1000FB000(Mutable, @"RecoveryTargetIterations", v28, v39, (uint64_t)v9);
        CFTypeID v29 = CFBooleanGetTypeID();
        sub_1000FB000(Mutable, @"MementoSupported", v29, v40, (uint64_t)v9);
        CFTypeID v30 = CFBooleanGetTypeID();
        sub_1000FB000(Mutable, @"MementoBlobExists", v30, v41, (uint64_t)v9);
        CFTypeID v31 = CFNumberGetTypeID();
        sub_1000FB000(Mutable, @"MementoPasscodeGeneration", v31, v42, (uint64_t)v9);
        CFTypeID v32 = CFNumberGetTypeID();
        sub_1000FB000(Mutable, @"PasscodeGeneration", v32, v43, (uint64_t)v9);
        char v33 = sub_100103478(v15, (uint64_t)v9);
        if ((v33 & 2) != 0) {
          CFBooleanRef v34 = kCFBooleanTrue;
        }
        else {
          CFBooleanRef v34 = kCFBooleanFalse;
        }
        CFDictionarySetValue(Mutable, @"InactivityRebootEnabled", v34);
        if ((v33 & 8) != 0) {
          CFBooleanRef v35 = kCFBooleanTrue;
        }
        else {
          CFBooleanRef v35 = kCFBooleanFalse;
        }
        CFDictionarySetValue(Mutable, @"OnenessAutomaticMode", v35);
        uint64_t v4 = 0LL;
        *uint64_t v44 = Mutable;
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_get_configuration",  ":",  1556,  "",  0,  "",  "");
  }

  return v4;
}

void sub_1000FB000(__CFDictionary *a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a4)
  {
    if (CFNumberGetTypeID() == a3)
    {
      CFIndex valuePtr = sub_100103478(a4, a5);
      CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, &valuePtr);
      if (!v10) {
        return;
      }
LABEL_12:
      CFNumberRef v14 = v10;
      CFDictionaryAddValue(a1, a2, v10);
      CFRelease(v14);
      return;
    }

    if (CFBooleanGetTypeID() == a3)
    {
      BOOL v11 = sub_100103714(a4, a5);
      uint64_t v12 = (const void **)&kCFBooleanTrue;
      if (!v11) {
        uint64_t v12 = (const void **)&kCFBooleanFalse;
      }
      CFDictionaryAddValue(a1, a2, *v12);
    }

    else if (CFDataGetTypeID() == a3)
    {
      CFIndex valuePtr = 0LL;
      uint64_t v13 = (const UInt8 *)ccder_decode_tl(4LL, &valuePtr, a4, a5);
      if (v13)
      {
        CFNumberRef v10 = CFDataCreate(kCFAllocatorDefault, v13, valuePtr);
        goto LABEL_12;
      }
    }
  }

uint64_t sub_1000FB134(int a1, unsigned int a2, uint64_t a3)
{
  input[0] = a2;
  input[1] = a3;
  uint64_t input[2] = a1;
  mach_port_t v3 = sub_1000F3714();
  if (v3) {
    return IOConnectCallMethod(v3, 0x1Au, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_assert_hold",  ":",  1654,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_1000FB214(int a1, unsigned int a2)
{
  input[0] = a2;
  input[1] = a1;
  mach_port_t v2 = sub_1000F3714();
  if (v2) {
    return IOConnectCallMethod(v2, 0x1Bu, input, 2u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_assert_drop",  ":",  1672,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_1000FB2F0(int a1, unsigned int a2)
{
  mach_port_t v4 = sub_1000F3714();
  if (v4)
  {
    input[0] = a2;
    input[1] = a1;
    return IOConnectCallMethod(v4, 0x64u, input, 2u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_assert_promote",  ":",  1687,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t sub_1000FB3DC(int a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_1000F3714();
  if (v1) {
    return IOConnectCallMethod(v1, 0x91u, &input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_oneness_heartbeat",  ":",  1707,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_1000FB4B4(int a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_1000F3714();
  if (v1) {
    return IOConnectCallMethod(v1, 0x65u, &input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_assert_consume",  ":",  1722,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_1000FB58C(int a1, uint64_t a2)
{
  uint64_t v15 = 0LL;
  int v14 = 0;
  mach_port_t v4 = sub_1000F3714();
  if (v4)
  {
    mach_port_t v10 = v4;
    sub_100106DFC((char **)&v15, (unsigned int *)&v14, 3, v5, v6, v7, v8, v9, a2);
    input[0] = a1;
    input[1] = (uint64_t)v15;
    uint64_t input[2] = v14;
    uint64_t v11 = IOConnectCallMethod(v10, 0x12u, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
    uint64_t v12 = v15;
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_recover_with_escrow_bag",  ":",  1739,  "",  0,  "",  "");
    uint64_t v12 = 0LL;
    uint64_t v11 = 3758097084LL;
  }

  free(v12);
  return v11;
}

uint64_t sub_1000FB6EC(const void *a1, int a2, void *a3, _DWORD *a4)
{
  uint64_t v8 = 3758097090LL;
  bzero(__src, 0x8000uLL);
  size_t __count = 0x8000LL;
  mach_port_t v9 = sub_1000F3714();
  if (v9)
  {
    if (a1 && a3 && a4)
    {
      uint64_t v10 = IOConnectCallMethod(v9, 0x29u, 0LL, 0, a1, a2, 0LL, 0LL, __src, &__count);
      if ((_DWORD)v10)
      {
        uint64_t v8 = v10;
      }

      else
      {
        uint64_t v11 = calloc(__count, 1uLL);
        *a3 = v11;
        if (v11)
        {
          memcpy(v11, __src, __count);
          uint64_t v8 = 0LL;
          *a4 = __count;
        }

        else
        {
          uint64_t v8 = 3758097085LL;
        }
      }
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fdr_hmac_data",  ":",  1758,  "",  0,  "",  "");
    uint64_t v8 = 3758097084LL;
  }

  memset_s(__src, 0x8000uLL, 0, 0x8000uLL);
  return v8;
}

uint64_t sub_1000FB888(int a1, unsigned int a2, _DWORD *a3)
{
  mach_port_t v6 = sub_1000F3714();
  if (v6)
  {
    input[0] = a1;
    input[1] = a2;
    uint64_t output = 0LL;
    uint32_t outputCnt = 1;
    uint64_t result = IOConnectCallMethod(v6, 0x28u, input, 2u, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
    if (a3)
    {
      if (!(_DWORD)result) {
        *a3 = output;
      }
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_generation",  ":",  1781,  "",  0,  "",  "");
    return 3758097084LL;
  }

  return result;
}

uint64_t sub_1000FB99C(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v9 = 3758097084LL;
  CFTypeID v21 = 0LL;
  int v20 = 0;
  mach_port_t v10 = sub_1000F3714();
  if (v10)
  {
    mach_port_t v16 = v10;
    if (a2) {
      uint64_t v17 = a2;
    }
    else {
      uint64_t v17 = "";
    }
    sub_100106DFC((char **)&v21, (unsigned int *)&v20, 2, v11, v12, v13, v14, v15, (uint64_t)v17);
    if (v21)
    {
      input[0] = a1;
      input[1] = a6;
      uint64_t input[2] = (uint64_t)v21;
      uint64_t input[3] = v20;
      uint64_t v9 = IOConnectCallMethod(v16, 0x2Au, input, 4u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
      CFTypeID v18 = v21;
    }

    else
    {
      CFTypeID v18 = 0LL;
      uint64_t v9 = 3758097085LL;
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "_aks_verify_password",  ":",  1807,  "",  0,  "",  "");
    CFTypeID v18 = 0LL;
  }

  free(v18);
  return v9;
}

uint64_t sub_1000FBB24(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000FB99C(a1, a2, a3, a4, a5, 0);
}

uint64_t sub_1000FBB2C(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000FB99C(a1, a2, a3, a4, a5, 1u);
}

uint64_t sub_1000FBB34(mach_port_t a1, uintptr_t a2)
{
  io_connect_t v4 = sub_1000F3714();
  if (v4) {
    return IOConnectSetNotificationPort(v4, 0, a1, a2);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_register_for_notifications",  ":",  1840,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_1000FBBDC(int a1, int a2, void *a3, size_t *a4)
{
  size_t __count = 256LL;
  input[0] = a1;
  input[1] = a2;
  uint64_t result = 3758097090LL;
  if (a3 && a4)
  {
    mach_port_t v7 = sub_1000F3714();
    if (v7)
    {
      memset(__src, 0, sizeof(__src));
      uint64_t result = IOConnectCallMethod(v7, 0x31u, input, 2u, 0LL, 0LL, 0LL, 0LL, __src, &__count);
      if (!(_DWORD)result)
      {
        if (__count > 0x100)
        {
          return 3758604298LL;
        }

        else
        {
          uint64_t v8 = calloc(__count, 1uLL);
          *a3 = v8;
          if (v8)
          {
            memcpy(v8, __src, __count);
            uint64_t result = 0LL;
            *a4 = __count;
          }

          else
          {
            return 3758097085LL;
          }
        }
      }
    }

    else
    {
      fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_create_signing_key",  ":",  1859,  "",  0,  "",  "");
      return 3758097084LL;
    }
  }

  return result;
}

uint64_t sub_1000FBD6C(int a1, int a2, const void *a3, size_t a4, void *a5, size_t *a6)
{
  size_t __count = 0x8000LL;
  input[0] = a1;
  input[1] = a2;
  uint64_t result = 3758097090LL;
  if (a5 && a6)
  {
    mach_port_t v11 = sub_1000F3714();
    if (v11)
    {
      mach_port_t v12 = v11;
      bzero(__src, 0x8000uLL);
      uint64_t result = IOConnectCallMethod(v12, 0x31u, input, 2u, a3, a4, 0LL, 0LL, __src, &__count);
      if (!(_DWORD)result)
      {
        if (__count > 0x8000)
        {
          return 3758604298LL;
        }

        else
        {
          uint64_t v13 = calloc(__count, 1uLL);
          *a5 = v13;
          if (v13)
          {
            memcpy(v13, __src, __count);
            uint64_t result = 0LL;
            *a6 = __count;
          }

          else
          {
            return 3758097085LL;
          }
        }
      }
    }

    else
    {
      fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_create_signing_key_with_params",  ":",  1881,  "",  0,  "",  "");
      return 3758097084LL;
    }
  }

  return result;
}

uint64_t sub_1000FBF14(int a1)
{
  return sub_1000FBF2C(a1, 0x6Du, 0LL, 0LL, 0LL, 0LL);
}

uint64_t sub_1000FBF2C(int a1, uint32_t a2, uint64_t a3, uint64_t a4, void *a5, size_t *a6)
{
  size_t __count = 15360LL;
  input[0] = a1;
  input[1] = a3;
  uint64_t input[2] = a4;
  mach_port_t v9 = sub_1000F3714();
  if (v9)
  {
    mach_port_t v10 = v9;
    bzero(__src, 0x3C00uLL);
    uint64_t v11 = IOConnectCallMethod(v10, a2, input, 3u, 0LL, 0LL, 0LL, 0LL, __src, &__count);
    if ((_DWORD)v11)
    {
      return v11;
    }

    else if (__count > 0x3C00)
    {
      return 3758604298LL;
    }

    else
    {
      uint64_t v12 = 0LL;
      if (a5 && a6)
      {
        if (__count)
        {
          uint64_t v13 = calloc(__count, 1uLL);
          *a5 = v13;
          if (!v13) {
            return 3758097085LL;
          }
          memcpy(v13, __src, __count);
          size_t v14 = __count;
        }

        else
        {
          size_t v14 = 0LL;
        }

        uint64_t v12 = 0LL;
        *a6 = v14;
      }
    }
  }

  else
  {
    uint64_t v12 = 3758097084LL;
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "remote_session_operate",  ":",  2017,  "",  0,  "",  "");
  }

  return v12;
}

uint64_t sub_1000FC0E4( int a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, void *a8, size_t *a9)
{
  size_t __count = 256LL;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  input[0] = a1;
  input[1] = a2;
  uint64_t v9 = 3758097090LL;
  uint64_t input[2] = a5;
  if (a8 && a9)
  {
    mach_port_t v12 = sub_1000F3714();
    if (v12)
    {
      mach_port_t v18 = v12;
      sub_100106DFC((char **)&inputStructCnt[1], inputStructCnt, 2, v13, v14, v15, v16, v17, a3);
      if (*(void *)&inputStructCnt[1])
      {
        uint64_t v19 = IOConnectCallMethod( v18,  0x32u,  input,  3u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  __src,  &__count);
        if ((_DWORD)v19)
        {
          uint64_t v9 = v19;
        }

        else if (__count > 0x100)
        {
          uint64_t v9 = 3758604298LL;
        }

        else
        {
          int v20 = calloc(__count, 1uLL);
          *a8 = v20;
          uint64_t v9 = 3758097085LL;
          if (v20)
          {
            memcpy(v20, __src, __count);
            uint64_t v9 = 0LL;
            *a9 = __count;
          }
        }
      }

      else
      {
        uint64_t v9 = 3758097085LL;
      }
    }

    else
    {
      fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_sign_signing_key",  ":",  1911,  "",  0,  "",  "");
      uint64_t v9 = 3758097084LL;
    }
  }

  free(*(void **)&inputStructCnt[1]);
  return v9;
}

uint64_t sub_1000FC2E4( int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  uint64_t v10 = 3758097084LL;
  input[0] = a2;
  input[1] = a1;
  uint64_t output = 0LL;
  uint32_t outputCnt = 1;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  mach_port_t v11 = sub_1000F3714();
  if (v11)
  {
    mach_port_t v17 = v11;
    sub_100106DFC((char **)&inputStructCnt[1], inputStructCnt, 3, v12, v13, v14, v15, v16, a3);
    if (*(void *)&inputStructCnt[1])
    {
      uint64_t v18 = IOConnectCallMethod( v17,  0x2Cu,  input,  2u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  &output,  &outputCnt,  0LL,  0LL);
      uint64_t v10 = v18;
      if (a9 && !(_DWORD)v18) {
        *a9 = output;
      }
    }

    else
    {
      uint64_t v10 = 3758097085LL;
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_remote_session",  ":",  1938,  "",  0,  "",  "");
  }

  free(*(void **)&inputStructCnt[1]);
  return v10;
}

uint64_t sub_1000FC45C(int a1, int a2, uint64_t a3, uint64_t a4)
{
  mach_port_t v17 = 0LL;
  int __s = 0LL;
  uint64_t v4 = 3758097084LL;
  rsize_t __n = 0LL;
  uint64_t v16 = 0LL;
  uint64_t v5 = 3758097090LL;
  rsize_t __smax = 0LL;
  if (!a3 || !a4) {
    goto LABEL_12;
  }
  int v8 = -536870212;
  *(void *)&__int128 v19 = a3;
  *((void *)&v19 + 1) = a3 + a4;
  if (!(a3 + a4)) {
    goto LABEL_19;
  }
  uint64_t v16 = 0LL;
  if ((ccder_blob_decode_range(&v19, 0x2000000000000010LL, &v19) & 1) == 0)
  {
    int v8 = -536870198;
LABEL_19:
    syslog(3, "error parsing signing key: %d", v8);
    uint64_t v5 = 3758097084LL;
LABEL_12:
    uint64_t v12 = __s;
    uint64_t v4 = v5;
    goto LABEL_13;
  }

  sub_1001061A4(&v19, 0x8000000000000001LL, &v16);
  if (v16)
  {
    uint64_t v5 = sub_1000FBF2C(a1, 0x74u, a3, a4, 0LL, 0LL);
    if ((_DWORD)v5) {
      syslog(3, "error: validating v1 local signing key failed: %d");
    }
    goto LABEL_12;
  }

  uint64_t v11 = sub_1000FBBDC(a1, 11, &__s, &__n);
  if ((_DWORD)v11)
  {
    uint64_t v5 = v11;
    syslog(3, "error: validating (create) v0 local signing key failed: %d", v11);
    goto LABEL_12;
  }

  uint64_t v12 = __s;
  if (__s && __n)
  {
    uint64_t v5 = sub_1000FC0E4(a1, a2, a3, a4, 11, (uint64_t)__s, __n, &v17, &__smax);
    if ((_DWORD)v5) {
      syslog(3, "error: validating (sign) v0 local signing key failed: %d");
    }
    goto LABEL_12;
  }

uint64_t sub_1000FC630(int a1, uint64_t a2, uint64_t a3, void *a4, size_t *a5)
{
  return sub_1000FBF2C(a1, 0x2Du, a2, a3, a4, a5);
}

uint64_t sub_1000FC648(int a1, uint64_t a2, uint64_t a3, void *a4, size_t *a5)
{
  return sub_1000FBF2C(a1, 0x2Eu, a2, a3, a4, a5);
}

uint64_t sub_1000FC660(int a1, uint64_t a2, int a3, void *a4, size_t *a5)
{
  return sub_1000FBF2C(a1, 0x94u, a2, a3, a4, a5);
}

uint64_t sub_1000FC67C(int a1, void *a2, size_t *a3)
{
  return sub_1000FBF2C(a1, 0x30u, 0LL, 0LL, a2, a3);
}

uint64_t sub_1000FC694(int a1, void *a2, size_t *a3)
{
  return sub_1000FBF2C(a1, 0x38u, 0LL, 0LL, a2, a3);
}

uint64_t sub_1000FC6AC(int a1, void *a2, _DWORD *a3)
{
  mach_port_t v6 = sub_1000F3714();
  if (v6)
  {
    mach_port_t v7 = v6;
    uint64_t result = 3758097090LL;
    if (a2)
    {
      if (a3)
      {
        bzero(__src, 0x8000uLL);
        size_t __count = 0x8000LL;
        input[0] = a1;
        input[1] = 0LL;
        uint64_t result = IOConnectCallMethod(v7, 0x14u, input, 2u, 0LL, 0LL, 0LL, 0LL, __src, &__count);
        if (!(_DWORD)result)
        {
          if (__count)
          {
            uint64_t v9 = calloc(__count, 1uLL);
            *a2 = v9;
            if (v9)
            {
              memcpy(v9, __src, __count);
              uint64_t result = 0LL;
              *a3 = __count;
            }

            else
            {
              return 3758097085LL;
            }
          }

          else
          {
            return 3758097136LL;
          }
        }
      }
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_drain_backup_keys",  ":",  2072,  "",  0,  "",  "");
    return 3758097084LL;
  }

  return result;
}

uint64_t sub_1000FC844(int a1, void *a2, size_t *a3)
{
  mach_port_t v6 = sub_1000F3714();
  if (v6)
  {
    mach_port_t v7 = v6;
    uint64_t result = 3758097090LL;
    if (a2)
    {
      if (a3)
      {
        bzero(__src, 0x8000uLL);
        size_t __count = 0x8000LL;
        input[0] = a1;
        input[1] = 1LL;
        uint64_t result = IOConnectCallMethod(v7, 0x14u, input, 2u, 0LL, 0LL, 0LL, 0LL, __src, &__count);
        if (!(_DWORD)result)
        {
          if (__count)
          {
            if (__ROR8__(0xEF7BDEF7BDEF7BDFLL * __count, 2) > 0x210842108421084uLL)
            {
              return 3758604298LL;
            }

            else
            {
              uint64_t v9 = calloc(__count, 1uLL);
              *a2 = v9;
              if (v9)
              {
                memcpy(v9, __src, __count);
                uint64_t result = 0LL;
                *a3 = __count / 0x7C;
              }

              else
              {
                return 3758097085LL;
              }
            }
          }

          else
          {
            return 3758097136LL;
          }
        }
      }
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_drain_backup_keys_info",  ":",  2100,  "",  0,  "",  "");
    return 3758097084LL;
  }

  return result;
}

uint64_t sub_1000FCA38(int a1)
{
  mach_port_t v2 = sub_1000F3714();
  if (v2)
  {
    uint64_t input = a1;
    return IOConnectCallMethod(v2, 0x16u, &input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_clear_backup_bag",  ":",  2129,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t sub_1000FCB1C(int a1, int a2, uint64_t a3, int a4, void *a5, _DWORD *a6)
{
  mach_port_t v12 = sub_1000F3714();
  if (!v12)
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_set_backup_bag",  ":",  2146,  "",  0,  "",  "");
    return 3758097084LL;
  }

  mach_port_t v13 = v12;
  if (a5)
  {
    if (!a6) {
      return 3758097090LL;
    }
    __int128 outputStruct = __src;
    p_count = &__count;
    uint64_t v16 = 1LL;
  }

  else
  {
    p_count = 0LL;
    __int128 outputStruct = 0LL;
    uint64_t v16 = 0LL;
  }

  bzero(__src, 0x8000uLL);
  size_t __count = 0x8000LL;
  input[0] = a1;
  input[1] = a2;
  uint64_t input[2] = v16;
  uint64_t input[3] = a3;
  uint64_t input[4] = a4;
  uint64_t result = IOConnectCallMethod(v13, 0x15u, input, 5u, 0LL, 0LL, 0LL, 0LL, outputStruct, p_count);
  if (a5 && !(_DWORD)result)
  {
    uint64_t v18 = calloc(__count, 1uLL);
    *a5 = v18;
    if (v18)
    {
      memcpy(v18, __src, __count);
      uint64_t result = 0LL;
      *a6 = __count;
    }

    else
    {
      return 3758097085LL;
    }
  }

  return result;
}

uint64_t sub_1000FCCF0(int a1, _DWORD *a2)
{
  uint64_t v4 = 3758097084LL;
  mach_port_t v5 = sub_1000F3714();
  if (v5)
  {
    if (a2)
    {
      uint64_t output = 0LL;
      uint64_t input = a1;
      uint32_t outputCnt = 1;
      uint64_t v4 = IOConnectCallMethod(v5, 0x52u, &input, 1u, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
      if (!(_DWORD)v4) {
        *a2 = output;
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_make_public_backup_bag",  ":",  2178,  "",  0,  "",  "");
  }

  return v4;
}

uint64_t sub_1000FCE08(int a1)
{
  return sub_1000FBF2C(a1, 0x34u, 0LL, 0LL, 0LL, 0LL);
}

uint64_t sub_1000FCE20()
{
  return sub_1000FBF2C(0, 0x40u, 0LL, 0LL, 0LL, 0LL);
}

uint64_t sub_1000FCE3C(int a1, uint64_t a2)
{
  return sub_1000FCE48(a1, 0x11u, a2);
}

uint64_t sub_1000FCE48(int a1, uint32_t a2, uint64_t a3)
{
  uint64_t input = a1;
  *(void *)mach_port_t v12 = 4096LL;
  uint64_t v5 = 3758097084LL;
  int v18 = 0;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 __s = 0u;
  mach_port_t v6 = sub_1000F3714();
  if (v6)
  {
    if (a3)
    {
      mach_port_t v7 = v6;
      bzero(outputStruct, 0x1000uLL);
      uint64_t v8 = IOConnectCallMethod(v7, a2, &input, 1u, 0LL, 0LL, 0LL, 0LL, outputStruct, (size_t *)v12);
      if ((_DWORD)v8)
      {
        return v8;
      }

      else
      {
        uint64_t v5 = 0LL;
        if (!sub_100105120((uint64_t)outputStruct, v12[0], (char *)&__s))
        {
          __int128 v9 = v16;
          *(_OWORD *)(a3 + 32) = v15;
          *(_OWORD *)(a3 + 48) = v9;
          *(_WORD *)(a3 + 64) = v17;
          __int128 v10 = v14;
          *(_OWORD *)a3 = __s;
          *(_OWORD *)(a3 + 16) = v10;
        }
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "_get_device_state",  ":",  2224,  "",  0,  "",  "");
  }

  return v5;
}

uint64_t sub_1000FCFDC(int a1, uint64_t a2)
{
  return sub_1000FCE48(a1, 0x23u, a2);
}

uint64_t sub_1000FCFE8(int a1, const void *a2, size_t a3, _DWORD *a4)
{
  uint64_t v7 = 3758097084LL;
  size_t v20 = 4096LL;
  uint64_t input = a1;
  mach_port_t v8 = sub_1000F3714();
  if (v8)
  {
    if (a4)
    {
      mach_port_t v9 = v8;
      bzero(outputStruct, 0x1000uLL);
      memset_s(a4, 0x10uLL, 0, 0x10uLL);
      uint64_t v10 = IOConnectCallMethod(v9, 0x39u, &input, 1u, a2, a3, 0LL, 0LL, outputStruct, &v20);
      if ((_DWORD)v10)
      {
        return v10;
      }

      else
      {
        uint64_t v11 = &outputStruct[v20];
        uint64_t v26 = 0LL;
        __int128 v30 = 0u;
        __int128 v22 = 0u;
        __int128 v23 = 0u;
        __int128 v25 = 0u;
        __int128 v28 = 0u;
        __int128 v29 = 0u;
        __int128 v31 = 0u;
        uint64_t v32 = 0LL;
        CFTypeID v21 = off_1002E2E80;
        __int128 v24 = (unint64_t)off_1002E2E88;
        CFTypeID v27 = off_1002E2E90;
        *(void *)&__int128 v30 = off_1002E2E98;
        __int128 v17 = xmmword_10024B9D0;
        uint64_t v18 = 0LL;
        __int128 v19 = &v21;
        sub_100103260( (uint64_t)outputStruct,  (uint64_t)&outputStruct[v20],  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100103098,  (uint64_t)&v17);
        uint64_t v12 = *((void *)&v24 + 1);
        uint64_t v13 = v28;
        uint64_t v14 = *((void *)&v30 + 1);
        *a4 = sub_100103478(v22, (uint64_t)v11);
        a4[1] = sub_100103478(v12, (uint64_t)v11);
        a4[2] = sub_100103478(v13, (uint64_t)v11);
        int v15 = sub_100103478(v14, (uint64_t)v11);
        uint64_t v7 = 0LL;
        a4[3] = v15;
      }
    }

    else
    {
      return 3758097090LL;
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_remote_peer_get_state",  ":",  2255,  "",  0,  "",  "");
  }

  return v7;
}

uint64_t sub_1000FD24C(int a1, const void *a2, size_t a3)
{
  uint64_t input = a1;
  mach_port_t v5 = sub_1000F3714();
  if (v5) {
    return IOConnectCallMethod(v5, 0x3Au, &input, 1u, a2, a3, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_remote_peer_drop",  ":",  2292,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_1000FD334(int a1, int a2)
{
  uint64_t input = a1;
  mach_port_t v3 = sub_1000F3714();
  if (v3)
  {
    if (a2) {
      uint32_t v4 = 32;
    }
    else {
      uint32_t v4 = 8;
    }
    return IOConnectCallMethod(v3, v4, &input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_lock_device",  ":",  2307,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t sub_1000FD424(int a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_1000F3714();
  if (v1) {
    return IOConnectCallMethod(v1, 0x8Du, &input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_lock_cx",  ":",  2327,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_1000FD4FC(int a1, uint64_t a2, int a3)
{
  input[0] = a1;
  input[1] = a2;
  uint64_t input[2] = a3;
  mach_port_t v3 = sub_1000F3714();
  if (v3) {
    return IOConnectCallMethod(v3, 9u, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_unlock_device",  ":",  2342,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_1000FD5DC()
{
  mach_port_t v0 = sub_1000F3714();
  if (v0) {
    return IOConnectCallMethod(v0, 0x13u, 0LL, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_obliterate_class_d",  ":",  2355,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_1000FD680(int a1, unsigned int a2, uint64_t a3, unsigned int a4, const void *a5, int a6)
{
  mach_port_t v12 = sub_1000F3714();
  if (v12)
  {
    input[0] = a1;
    input[1] = a2;
    uint64_t input[2] = a3;
    uint64_t input[3] = a4;
    return IOConnectCallMethod(v12, 0x3Fu, input, 4u, a5, a6, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_migrate_s_key",  ":",  2367,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t sub_1000FD794( int a1, uint64_t a2, uint64_t a3, unsigned int a4, const void *a5, size_t a6, void *a7, size_t *a8)
{
  input[0] = a1;
  input[1] = a4;
  uint64_t input[2] = a2;
  uint64_t input[3] = a3;
  size_t __count = 2048LL;
  mach_port_t v12 = sub_1000F3714();
  if (v12)
  {
    mach_port_t v13 = v12;
    bzero(__src, 0x800uLL);
    uint64_t v14 = IOConnectCallMethod(v13, 0x3Bu, input, 4u, a5, a6, 0LL, 0LL, __src, &__count);
    if ((_DWORD)v14)
    {
      return v14;
    }

    else if (__count > 0x800)
    {
      return 3758604298LL;
    }

    else
    {
      uint64_t v15 = 0LL;
      if (a7 && a8)
      {
        if (__count)
        {
          __int128 v16 = calloc(__count, 1uLL);
          *a7 = v16;
          if (!v16) {
            return 3758097085LL;
          }
          memcpy(v16, __src, __count);
          size_t v17 = __count;
        }

        else
        {
          size_t v17 = 0LL;
        }

        uint64_t v15 = 0LL;
        *a8 = v17;
      }
    }
  }

  else
  {
    uint64_t v15 = 3758097084LL;
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_smartcard_register",  ":",  2388,  "",  0,  "",  "");
  }

  return v15;
}

uint64_t sub_1000FD940(int a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_1000F3714();
  if (v1) {
    return IOConnectCallMethod(v1, 0x3Cu, &input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_smartcard_unregister",  ":",  2412,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_1000FDA18(int a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  uint64_t input = a1;
  size_t __count = 2048LL;
  mach_port_t v9 = sub_1000F3714();
  if (v9)
  {
    mach_port_t v10 = v9;
    bzero(__src, 0x800uLL);
    uint64_t v11 = IOConnectCallMethod(v10, 0x3Du, &input, 1u, a2, a3, 0LL, 0LL, __src, &__count);
    if ((_DWORD)v11)
    {
      return v11;
    }

    else if (__count > 0x800)
    {
      return 3758604298LL;
    }

    else
    {
      uint64_t v12 = 0LL;
      if (a4 && a5)
      {
        if (__count)
        {
          mach_port_t v13 = calloc(__count, 1uLL);
          *a4 = v13;
          if (!v13) {
            return 3758097085LL;
          }
          memcpy(v13, __src, __count);
          size_t v14 = __count;
        }

        else
        {
          size_t v14 = 0LL;
        }

        uint64_t v12 = 0LL;
        *a5 = v14;
      }
    }
  }

  else
  {
    uint64_t v12 = 3758097084LL;
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_smartcard_request_unlock",  ":",  2429,  "",  0,  "",  "");
  }

  return v12;
}

uint64_t sub_1000FDBBC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, size_t *a7)
{
  uint64_t input = a1;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  bzero(__src, 0x800uLL);
  size_t __count = 2048LL;
  sub_100106DFC((char **)&inputStructCnt[1], inputStructCnt, 2, v10, v11, v12, v13, v14, a2);
  if (!*(void *)&inputStructCnt[1])
  {
    uint64_t v17 = 3758097085LL;
    goto LABEL_12;
  }

  mach_port_t v15 = sub_1000F3714();
  if (!v15)
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_smartcard_unlock",  ":",  2460,  "",  0,  "",  "");
    uint64_t v17 = 3758097084LL;
    goto LABEL_12;
  }

  uint64_t v16 = IOConnectCallMethod( v15,  0x3Eu,  &input,  1u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  __src,  &__count);
  if ((_DWORD)v16)
  {
    uint64_t v17 = v16;
    goto LABEL_12;
  }

  if (__count > 0x800)
  {
    uint64_t v17 = 3758604298LL;
    goto LABEL_12;
  }

  uint64_t v17 = 0LL;
  if (a6 && a7)
  {
    if (!__count)
    {
      size_t v19 = 0LL;
      goto LABEL_11;
    }

    uint64_t v18 = calloc(__count, 1uLL);
    *a6 = v18;
    uint64_t v17 = 3758097085LL;
    if (v18)
    {
      memcpy(v18, __src, __count);
      size_t v19 = __count;
LABEL_11:
      uint64_t v17 = 0LL;
      *a7 = v19;
    }
  }

uint64_t sub_1000FDDA0(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a3 && a4)
  {
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000FDDE8(uint64_t a1, int a2, unint64_t a3, uint64_t a4, uint64_t *a5, void *a6)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a6)
  {
    if (a3)
    {
      if (a4)
      {
        if (a5)
        {
          uint64_t v9 = a3 + a4;
          if (a3 + a4 > a3)
          {
            __int128 v21 = 0u;
            __int128 v20 = 0u;
            uint64_t v19 = a1;
            __int128 v16 = xmmword_10024B9E0;
            uint64_t v17 = 0LL;
            uint64_t v18 = &v19;
            sub_100103260( a3,  v9,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100103098,  (uint64_t)&v16);
            if (a2)
            {
              if (*a6 == 8LL)
              {
                uint64_t v12 = sub_100103478(v20, v9);
                uint64_t result = 0LL;
                *a5 = v12;
                return result;
              }

              return 0xFFFFFFFFLL;
            }

            uint64_t v15 = 0LL;
            uint64_t v13 = ccder_decode_tl(4LL, &v15, v20, v9);
            if (!v13) {
              return 0xFFFFFFFFLL;
            }
            uint64_t v14 = v13;
            uint64_t result = 0LL;
            *a5 = v14;
            *a6 = v15;
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_1000FDF10(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a3 && a4)
  {
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000FDF58(unint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = 8LL;
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = 0LL;
  uint64_t result = sub_1000FDDE8((uint64_t)off_1002E2EC0, 1, a1, a2, &v6, &v5);
  if ((_DWORD)result) {
    return 0xFFFFFFFFLL;
  }
  *a3 = v6;
  return result;
}

uint64_t sub_1000FDFC4(unint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = 8LL;
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = 0LL;
  uint64_t result = sub_1000FDDE8((uint64_t)off_1002E2EB8, 1, a1, a2, &v6, &v5);
  if ((_DWORD)result) {
    return 0xFFFFFFFFLL;
  }
  *a3 = v6;
  return result;
}

uint64_t sub_1000FE030(int a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_1000F3714();
  if (v1) {
    return IOConnectCallMethod(v1, 0x47u, &input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_fail",  ":",  2589,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_1000FE108(int a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_1000F3714();
  if (v1) {
    return IOConnectCallMethod(v1, 0x49u, &input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_set_healthy",  ":",  2605,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_1000FE1E0(int a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FE1E8(a1, a2, a3, 0x45u);
}

uint64_t sub_1000FE1E8(int a1, uint64_t a2, uint64_t a3, uint32_t a4)
{
  input[0] = a1;
  input[1] = a2;
  uint64_t input[2] = a3;
  mach_port_t v5 = sub_1000F3714();
  if (v5) {
    return IOConnectCallMethod(v5, a4, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "__aks_se_set_secret",  ":",  2621,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_1000FE2D0(int a1, uint64_t a2, uint64_t a3)
{
  return sub_1000FE1E8(a1, a2, a3, 0x8Cu);
}

uint64_t sub_1000FE2D8(int a1, uint64_t a2, uint64_t a3)
{
  input[0] = a1;
  input[1] = a2;
  uint64_t input[2] = a3;
  mach_port_t v3 = sub_1000F3714();
  if (v3) {
    return IOConnectCallMethod(v3, 0x46u, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_recover",  ":",  2649,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_1000FE3B4(int a1, uint64_t a2, uint64_t a3)
{
  input[0] = a1;
  input[1] = a2;
  uint64_t input[2] = a3;
  mach_port_t v3 = sub_1000F3714();
  if (v3) {
    return IOConnectCallMethod(v3, 0x69u, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_change_secret_epilogue",  ":",  2665,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_1000FE490(int a1, uint64_t a2, uint64_t a3, void *a4, _BYTE *a5)
{
  input[0] = a1;
  input[1] = a2;
  uint64_t input[2] = a3;
  bzero(__s, 0x1000uLL);
  rsize_t __n = 4096LL;
  mach_port_t v7 = sub_1000F3714();
  if (!v7)
  {
    uint64_t v15 = 3758097084LL;
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_get_reset_token_for_memento_secret",  ":",  2683,  "",  0,  "",  "");
    goto LABEL_12;
  }

  uint64_t v8 = IOConnectCallMethod(v7, 0x48u, input, 3u, 0LL, 0LL, 0LL, 0LL, __s, &__n);
  if ((_DWORD)v8)
  {
    uint64_t v15 = v8;
    goto LABEL_12;
  }

  if (__n - 4097 < 0xFFFFFFFFFFFFF000LL)
  {
    uint64_t v15 = 3758604298LL;
    goto LABEL_12;
  }

  uint64_t v9 = &__s[__n];
  uint64_t v27 = 0LL;
  __int128 v26 = 0u;
  __int128 v24 = 0u;
  __int128 v23 = 0u;
  __int128 v22 = off_1002E2F30;
  __int128 v25 = (unint64_t)off_1002E2F38;
  __int128 v18 = xmmword_10024B9F0;
  uint64_t v19 = 0LL;
  __int128 v20 = &v22;
  sub_100103260( (uint64_t)__s,  (uint64_t)&__s[__n],  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100103098,  (uint64_t)&v18);
  uint64_t v10 = *((void *)&v25 + 1);
  if ((void)v23)
  {
    uint64_t v17 = 0LL;
    uint64_t v11 = ccder_decode_tl(4LL, &v17, v23, v9);
    if (v17 != 16)
    {
LABEL_11:
      uint64_t v15 = 0LL;
      goto LABEL_12;
    }

    uint64_t v12 = v11;
    uint64_t v13 = calloc(0x10uLL, 1uLL);
    *a4 = v13;
    if (!v13)
    {
      uint64_t v15 = 3758097085LL;
      goto LABEL_12;
    }

    __memcpy_chk(v13, v12, v17, 16LL);
  }

  if (!v10) {
    goto LABEL_11;
  }
  unint64_t v14 = sub_100103478(v10, (uint64_t)v9);
  if (v14 > 0xFF) {
    goto LABEL_11;
  }
  uint64_t v15 = 0LL;
  *a5 = v14;
LABEL_12:
  memset_s(__s, __n, 0, __n);
  return v15;
}

uint64_t sub_1000FE6FC(int a1, void *a2, _BYTE *a3)
{
  return sub_1000FE490(a1, 0LL, 0LL, a2, a3);
}

uint64_t sub_1000FE710(int a1, const void *a2, size_t a3)
{
  uint64_t input = a1;
  mach_port_t v5 = sub_1000F3714();
  if (v5)
  {
    if (a2) {
      size_t v6 = a3;
    }
    else {
      size_t v6 = 0LL;
    }
    return IOConnectCallMethod(v5, 0x58u, &input, 1u, a2, v6, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_set_nonce",  ":",  2737,  "",  0,  "",  "");
    return 3758097084LL;
  }

uint64_t sub_1000FE7FC(int a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t input = a1;
  bzero(&__s, 0x1000uLL);
  size_t __n = 4096LL;
  uint64_t v9 = 3758097090LL;
  if (a2)
  {
    if (a3)
    {
      uint64_t v9 = 3758097090LL;
      if (a4)
      {
        if (a5)
        {
          mach_port_t v10 = sub_1000F3714();
          if (v10)
          {
            uint64_t v11 = IOConnectCallMethod(v10, 0x5Au, &input, 1u, 0LL, 0LL, 0LL, 0LL, &__s, &__n);
            if ((_DWORD)v11)
            {
              uint64_t v9 = v11;
            }

            else if (__n - 4097 < 0xFFFFFFFFFFFFF005LL)
            {
              uint64_t v9 = 3758604298LL;
            }

            else
            {
              uint64_t v12 = calloc(5uLL, 1uLL);
              *a4 = v12;
              if (v12)
              {
                *a5 = 5LL;
                int v13 = __s;
                v12[4] = v19;
                *(_DWORD *)uint64_t v12 = v13;
                unint64_t v14 = calloc(__n - 5, 1uLL);
                *a2 = v14;
                uint64_t v9 = 3758097085LL;
                if (v14)
                {
                  size_t v15 = __n;
                  *a3 = __n - 5;
                  memcpy(v14, v20, v15);
                  uint64_t v9 = 0LL;
                }
              }

              else
              {
                uint64_t v9 = 3758097085LL;
              }
            }
          }

          else
          {
            fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_get_reset_sig",  ":",  2759,  "",  0,  "",  "");
            uint64_t v9 = 3758097084LL;
          }
        }
      }
    }
  }

  memset_s(&__s, __n, 0, __n);
  return v9;
}

uint64_t sub_1000FEA0C(int a1, void *a2, size_t *a3)
{
  uint64_t input = a1;
  size_t v5 = 4096LL;
  bzero(__src, 0x1000uLL);
  size_t __count = 4096LL;
  uint64_t v6 = 3758097090LL;
  if (a2 && a3)
  {
    mach_port_t v7 = sub_1000F3714();
    if (v7)
    {
      uint64_t v8 = IOConnectCallMethod(v7, 0x59u, &input, 1u, 0LL, 0LL, 0LL, 0LL, __src, &__count);
      size_t v5 = __count;
      if ((_DWORD)v8)
      {
        uint64_t v6 = v8;
      }

      else if (__count - 4097 < 0xFFFFFFFFFFFFF000LL)
      {
        uint64_t v6 = 3758604298LL;
      }

      else
      {
        uint64_t v9 = calloc(__count, 1uLL);
        *a2 = v9;
        size_t v5 = __count;
        if (v9)
        {
          *a3 = __count;
          memcpy(v9, __src, v5);
          uint64_t v6 = 0LL;
          size_t v5 = __count;
        }

        else
        {
          uint64_t v6 = 3758097085LL;
        }
      }
    }

    else
    {
      fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_get_reset_pubkey",  ":",  2791,  "",  0,  "",  "");
      size_t v5 = 4096LL;
      uint64_t v6 = 3758097084LL;
    }
  }

  memset_s(__src, v5, 0, v5);
  return v6;
}

uint64_t sub_1000FEBCC(int a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_1000F3714();
  if (v1) {
    return IOConnectCallMethod(v1, 0x5Bu, &input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_delete_reset_token",  ":",  2815,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_1000FECA4(unsigned int a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_1000F3714();
  if (v1) {
    return IOConnectCallMethod(v1, 0x5Eu, &input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_support_in_rm",  ":",  2832,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_1000FED7C(BOOL *a1)
{
  uint64_t output = 0LL;
  uint32_t outputCnt = 1;
  mach_port_t v2 = sub_1000F3714();
  if (v2)
  {
    uint64_t result = IOConnectCallMethod(v2, 0x6Bu, 0LL, 0, 0LL, 0LL, &output, &outputCnt, 0LL, 0LL);
    if (a1)
    {
      if (!(_DWORD)result) {
        *a1 = output != 0;
      }
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_support_in_rm_is_set",  ":",  2848,  "",  0,  "",  "");
    return 3758097084LL;
  }

  return result;
}

uint64_t sub_1000FEE7C()
{
  mach_port_t v0 = sub_1000F3714();
  if (v0) {
    return IOConnectCallMethod(v0, 0x5Fu, 0LL, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_stage_stash",  ":",  2865,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_1000FEF20(void *a1)
{
  return sub_1000F48E4(0LL, 0x19u, 0LL, 0LL, 0LL, a1, 0LL);
}

uint64_t sub_1000FEF40(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  return sub_1000F4B2C(a1, 0, a2, a3, a4, 0LL, a5);
}

uint64_t sub_1000FEF5C(uint64_t a1, void *a2, char *a3)
{
  *(void *)&__int128 v11 = __s;
  *((void *)&v11 + 1) = &v14;
  *(void *)uint64_t v12 = 4096LL;
  uint64_t v6 = 3758097090LL;
  if (a2 && a3)
  {
    mach_port_t v7 = sub_1000F3714();
    if (v7)
    {
      mach_port_t v8 = v7;
      if (sub_100104D0C(&v11, a2) && sub_100104E24(&v11, a1))
      {
        uint64_t v6 = 3758097098LL;
        if (ccder_blob_encode_tl(&v11, 0x2000000000000010LL, (char *)&v14 - *((void *)&v11 + 1)))
        {
          uint64_t v9 = IOConnectCallMethod( v8,  0x55u,  0LL,  0,  *((const void **)&v11 + 1),  (size_t)&v14 - *((void *)&v11 + 1),  0LL,  0LL,  __s,  (size_t *)v12);
          if (!(_DWORD)v9) {
            uint64_t v9 = sub_100105664((uint64_t)__s, *(uint64_t *)v12, a3);
          }
          uint64_t v6 = v9;
        }
      }

      else
      {
        uint64_t v6 = 3758097098LL;
      }
    }

    else
    {
      fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fv_get_blob_state",  ":",  2900,  "",  0,  "",  "");
      uint64_t v6 = 3758097084LL;
    }
  }

  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v6;
}

uint64_t sub_1000FF130(__int128 *a1, char *a2)
{
  char v7 = 0;
  v6[0] = &v7;
  v6[1] = 1LL;
  __int128 v4 = 0uLL;
  uint64_t v5 = 0LL;
  if (a1)
  {
    __int128 v4 = *a1;
    uint64_t v5 = *((void *)a1 + 2);
    uint64_t v2 = *((void *)&v4 + 1) | 0x10LL;
  }

  else
  {
    uint64_t v2 = 16LL;
  }

  *((void *)&v4 + 1) = v2;
  return sub_1000FEF5C((uint64_t)&v4, v6, a2);
}

uint64_t sub_1000FF198(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5 = 3758097098LL;
  uint64_t output = 0LL;
  uint64_t input = a2;
  uint32_t outputCnt = 1;
  bzero(__s, 0x1000uLL);
  *(void *)&__int128 v9 = __s;
  *((void *)&v9 + 1) = &output;
  if (a3)
  {
    mach_port_t v6 = sub_1000F3714();
    if (v6)
    {
      mach_port_t v7 = v6;
      if (sub_100104E24(&v9, a1))
      {
        if (ccder_blob_encode_tl(&v9, 0x2000000000000010LL, (char *)&output - *((void *)&v9 + 1)))
        {
          uint64_t v5 = IOConnectCallMethod( v7,  0x4Eu,  &input,  1u,  *((const void **)&v9 + 1),  (size_t)&output - *((void *)&v9 + 1),  &output,  &outputCnt,  0LL,  0LL);
          if (!(_DWORD)v5) {
            *a3 = output;
          }
        }
      }
    }

    else
    {
      fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fv_get_size",  ":",  2943,  "",  0,  "",  "");
      uint64_t v5 = 3758097084LL;
    }
  }

  else
  {
    uint64_t v5 = 3758097090LL;
  }

  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v5;
}

uint64_t sub_1000FF334(uint64_t a1, unsigned int a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t input = a2;
  bzero(__s, 0x1000uLL);
  *(void *)&__int128 v15 = __s;
  *((void *)&v15 + 1) = &input;
  size_t v16 = 4096LL;
  uint64_t v9 = 3758097090LL;
  if (a3 && a4)
  {
    mach_port_t v10 = sub_1000F3714();
    if (!v10)
    {
      fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fv_import",  ":",  2971,  "",  0,  "",  "");
      uint64_t v9 = 3758097084LL;
      goto LABEL_14;
    }

    mach_port_t v11 = v10;
    if (!ccder_blob_encode_body_tl(&v15, 4LL, 16LL, a4)
      || !sub_100104D0C(&v15, a3)
      || !sub_100104E24(&v15, a1)
      || !ccder_blob_encode_tl(&v15, 0x2000000000000010LL, (char *)&input - *((void *)&v15 + 1)))
    {
      goto LABEL_12;
    }

    uint64_t v12 = IOConnectCallMethod( v11,  0x4Fu,  &input,  1u,  *((const void **)&v15 + 1),  (size_t)&input - *((void *)&v15 + 1),  0LL,  0LL,  __s,  &v16);
    if ((_DWORD)v12)
    {
      uint64_t v9 = v12;
      goto LABEL_14;
    }

    *(void *)&__int128 v14 = __s;
    *((void *)&v14 + 1) = &__s[v16];
    if (!a5)
    {
      uint64_t v9 = 0LL;
      goto LABEL_14;
    }

    uint64_t v9 = 0LL;
    if ((sub_100104D78(&v14, 0, a5) & 1) == 0) {
LABEL_12:
    }
      uint64_t v9 = 3758097098LL;
  }

uint64_t sub_1000FF564(uint64_t *a1)
{
  return sub_1000FF198(0LL, 2u, a1);
}

uint64_t sub_1000FF574(uint64_t *a1)
{
  return sub_1000FF198(0LL, 1u, a1);
}

uint64_t sub_1000FF584(unsigned int a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000F4204(0LL, a1, a2, a3, a4);
}

uint64_t sub_1000FF59C(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  return sub_1000F4688(0LL, a1, a2, a3, a4, a5);
}

uint64_t sub_1000FF5B8(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  v5[0] = 0LL;
  v5[1] = 2LL;
  void v5[2] = 0LL;
  return sub_1000F34B4((uint64_t)v5, a1, a2, a3, a4, 0LL);
}

uint64_t sub_1000FF5F8(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 130LL;
  if ((a1 & 6) == 0) {
    uint64_t v3 = 2LL;
  }
  v5[0] = 0LL;
  v5[1] = v3;
  void v5[2] = 0LL;
  return sub_1000F34B4((uint64_t)v5, 0LL, 0LL, a2, a3, 0LL);
}

uint64_t sub_1000FF644(void *a1, void *a2, void *a3, uint64_t a4)
{
  return sub_1000F48E4(0LL, 3u, 0LL, a1, a2, a3, a4);
}

uint64_t sub_1000FF664(void *a1, BOOL *a2)
{
  uint64_t v9 = 0LL;
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v6 = 0u;
  memset(v5, 0, sizeof(v5));
  if (!a2) {
    return 3758097090LL;
  }
  uint64_t result = sub_1000FEF5C((uint64_t)v4, a1, (char *)v5);
  if (!(_DWORD)result)
  {
    if (LODWORD(v5[0]) == 1)
    {
      uint64_t result = 0LL;
      *a2 = (DWORD1(v6) & 0x8000000) != 0;
    }

    else
    {
      return 3758604312LL;
    }
  }

  return result;
}

uint64_t sub_1000FF71C(void *a1, void *a2, void *a3)
{
  return sub_1000F48E4(0LL, 0x12u, 4uLL, a1, a2, a3, 0LL);
}

uint64_t sub_1000FF73C(void *a1, void *a2, void *a3, void *a4, unsigned int a5)
{
  return sub_1000F4B2C(0LL, a5, a1, a2, a3, a4, 0LL);
}

uint64_t sub_1000FF760(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v10 = 3758097098LL;
  bzero(v17, 0x1000uLL);
  bzero(v16, 0x1000uLL);
  *(void *)&__int128 v15 = v17;
  *((void *)&v15 + 1) = v18;
  *(void *)&__int128 v14 = v16;
  *((void *)&v14 + 1) = v17;
  if (sub_100104D0C(&v15, a2)
    && sub_100104D0C(&v15, a3)
    && ccder_blob_encode_tl(&v15, 0x2000000000000010LL, (char *)v18 - *((void *)&v15 + 1))
    && sub_100104D0C(&v14, a4)
    && sub_100104D0C(&v14, a5)
    && ccder_blob_encode_tl(&v14, 0x2000000000000010LL, &v17[-*((void *)&v14 + 1)]))
  {
    v13[0] = *((void *)&v15 + 1);
    v13[1] = (char *)v18 - *((void *)&v15 + 1);
    v12[0] = *((void *)&v14 + 1);
    v12[1] = &v17[-*((void *)&v14 + 1)];
    return sub_1000F48E4(a1, 0x10u, 0LL, v13, v12, 0LL, 0LL);
  }

  return v10;
}

uint64_t sub_1000FF8F0(uint64_t a1)
{
  return sub_1000F48E4(a1, 0x11u, 0LL, 0LL, 0LL, 0LL, 0LL);
}

uint64_t sub_1000FF90C(uint64_t a1)
{
  uint64_t v4 = a1;
  memset(v3, 0, sizeof(v3));
  v2[0] = &v4;
  v2[1] = 16LL;
  return sub_1000F48E4((uint64_t)v3, 0x1Cu, 0LL, v2, 0LL, 0LL, 0LL);
}

uint64_t sub_1000FF95C(uint64_t a1, BOOL *a2, _BYTE *a3)
{
  __int128 v14 = v16;
  uint64_t v15 = 0x4000LL;
  uint64_t result = sub_1000F48E4(a1, 0x1Au, 0LL, 0LL, 0LL, 0LL, (uint64_t)&v14);
  if (!(_DWORD)result)
  {
    memset(v13, 0, 21);
    mach_port_t v11 = &v14[v15];
    unint64_t v12 = 0LL;
    uint64_t v7 = ccder_decode_sequence_tl(&v11);
    if (v7 && (uint64_t v8 = ccder_decode_tl(4LL, &v12, v7, v11)) != 0)
    {
      if (v12 >= 0x15) {
        uint64_t v9 = 21LL;
      }
      else {
        uint64_t v9 = v12;
      }
      __memcpy_chk(v13, v8, v9, 21LL);
      if (a2)
      {
        if (v13[1]) {
          BOOL v10 = 1;
        }
        else {
          BOOL v10 = HIDWORD(v13[0]) != 0;
        }
        *a2 = v10;
      }

      if (a3) {
        *a3 = v13[2];
      }
      return 0LL;
    }

    else
    {
      return 3758097084LL;
    }
  }

  return result;
}

uint64_t sub_1000FFAB4()
{
  return sub_1000F48E4(0LL, 7u, 0LL, 0LL, 0LL, 0LL, 0LL);
}

uint64_t sub_1000FFAD4(int a1, void *a2, void *a3)
{
  uint64_t v3 = 8LL;
  if (a1) {
    uint64_t v3 = 12LL;
  }
  uint64_t v6 = 0LL;
  uint64_t v7 = v3;
  uint64_t v8 = 0LL;
  uint64_t v4 = sub_1000F48E4((uint64_t)&v6, 7u, 0LL, a2, a3, 0LL, 0LL);
  syslog(6, "aks_fv_prot_cmd_stash_kek(%llu) = %d", v7, v4);
  return v4;
}

uint64_t sub_1000FFB4C()
{
  uint64_t v0 = sub_1000F48E4(0LL, 0xDu, 0LL, 0LL, 0LL, 0LL, 0LL);
  syslog(6, "aks_fv_prot_cmd_stash_commit = %d", v0);
  return v0;
}

uint64_t sub_1000FFBA8()
{
  uint64_t v0 = sub_1000F48E4(0LL, 8u, 0LL, 0LL, 0LL, 0LL, 0LL);
  syslog(6, "aks_fv_prot_cmd_stash_destroy = %d", v0);
  return v0;
}

uint64_t sub_1000FFC04(void *a1, void *a2, void *a3, void *a4)
{
  return sub_1000F4B2C(0LL, 0, a1, a2, a3, a4, 0LL);
}

uint64_t sub_1000FFC24(void *a1)
{
  return sub_1000F48E4(0LL, 0xBu, 0LL, 0LL, a1, 0LL, 0LL);
}

uint64_t sub_1000FFC44( unsigned int a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v10 = 3758097084LL;
  uint64_t input = a1;
  bzero(__src, 0x8000uLL);
  size_t __count = 0x8000LL;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  if (a6)
  {
    mach_port_t v11 = sub_1000F3714();
    if (v11)
    {
      mach_port_t v17 = v11;
      if (a4) {
        __int128 v18 = a4;
      }
      else {
        __int128 v18 = "";
      }
      sub_100106DFC((char **)&inputStructCnt[1], inputStructCnt, 2, v12, v13, v14, v15, v16, (uint64_t)v18);
      uint64_t v19 = IOConnectCallMethod( v17,  0x50u,  &input,  1u,  *(const void **)&inputStructCnt[1],  (int)inputStructCnt[0],  0LL,  0LL,  __src,  &__count);
      if ((_DWORD)v19)
      {
        uint64_t v10 = v19;
      }

      else
      {
        __int128 v20 = calloc(__count, 1uLL);
        *a6 = v20;
        if (v20)
        {
          memcpy(v20, __src, __count);
          uint64_t v10 = 0LL;
          *a7 = (int)__count;
        }

        else
        {
          uint64_t v10 = 3758097085LL;
        }
      }
    }

    else
    {
      fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_absinthe_collection",  ":",  3220,  "",  0,  "",  "");
    }
  }

  else
  {
    uint64_t v10 = 3758097090LL;
  }

  memset_s(__src, 0x8000uLL, 0, 0x8000uLL);
  free(*(void **)&inputStructCnt[1]);
  return v10;
}

uint64_t sub_1000FFE44(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, size_t *a7)
{
  __int128 v21 = 0LL;
  uint64_t input = a1;
  int v20 = 0;
  uint64_t v7 = 3758097090LL;
  if (a2 && a6 && a7)
  {
    mach_port_t v11 = sub_1000F3714();
    if (v11)
    {
      mach_port_t v17 = v11;
      sub_100106DFC(&v21, (unsigned int *)&v20, 2, v12, v13, v14, v15, v16, a2);
      size_t v19 = *a7;
      uint64_t v7 = IOConnectCallMethod(v17, 0x51u, &input, 1u, v21, v20, 0LL, 0LL, a6, &v19);
      if (!(_DWORD)v7) {
        *a7 = (int)v19;
      }
    }

    else
    {
      fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_absinthe_generate",  ":",  3253,  "",  0,  "",  "");
      uint64_t v7 = 3758097084LL;
    }
  }

  free(v21);
  return v7;
}

uint64_t sub_1000FFFCC(unsigned int a1)
{
  input[0] = 0LL;
  input[1] = a1;
  mach_port_t v1 = sub_1000F3714();
  if (v1) {
    return IOConnectCallMethod(v1, 0x53u, input, 2u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_drop_auxiliary_auth_by_uid",  ":",  3280,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_1001000A4(int a1)
{
  input[0] = 1LL;
  input[1] = a1;
  mach_port_t v1 = sub_1000F3714();
  if (v1) {
    return IOConnectCallMethod(v1, 0x53u, input, 2u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_drop_auxiliary_auth_by_handle",  ":",  3296,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_100100180()
{
  mach_port_t v0 = sub_1000F3714();
  if (v0) {
    return IOConnectCallMethod(v0, 0x5Cu, 0LL, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_lower_iteration_count",  ":",  3310,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_100100224(int a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_1000F3714();
  if (v1) {
    return IOConnectCallMethod(v1, 0x6Au, &input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_se_secret_drop",  ":",  3326,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_1001002FC(void *a1, size_t *a2)
{
  size_t v11 = 0LL;
  uint64_t v12 = 0LL;
  uint64_t v2 = 3758097084LL;
  size_t __count = 0LL;
  __src = 0LL;
  if (a1 && a2 && !sub_1000F5F64(-1, off_1002E30B8, &v12, &v11))
  {
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      size_t v6 = __count;
      if (__count)
      {
        *a2 = __count;
        uint64_t v7 = calloc(v6, 1uLL);
        *a1 = v7;
        if (v7)
        {
          memcpy(v7, __src, *a2);
          uint64_t v2 = 0LL;
        }
      }
    }
  }

  free(v12);
  return v2;
}

uint64_t sub_1001003C4(int a1, void *a2, size_t *a3)
{
  return sub_1000F5F64(a1, 0LL, a2, a3);
}

uint64_t sub_1001003D4(int a1, void *a2)
{
  uint64_t v3 = 3758097084LL;
  size_t v8 = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v7 = 0LL;
  if (!sub_1000F5F64(a1, off_1002E3138, &v9, &v8)
    && sub_100103400((uint64_t)off_1002E3138, (uint64_t)v9, (uint64_t)v9 + v8, &v7))
  {
    if (a2)
    {
      time_t v4 = time(0LL);
      uint64_t v3 = 0LL;
      time_t v5 = v4 - v7;
      if (v4 <= v7) {
        time_t v5 = 0LL;
      }
      *a2 = v5;
    }

    else
    {
      uint64_t v3 = 0LL;
    }
  }

  free(v9);
  return v3;
}

uint64_t sub_100100478(int a1, char *a2)
{
  uint64_t v3 = 3758097090LL;
  uint64_t input = a1;
  bzero(__s, 0x1000uLL);
  rsize_t __n = 4096LL;
  mach_port_t v4 = sub_1000F3714();
  if (!v4)
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_get_internal_state",  ":",  3405,  "",  0,  "",  "");
    uint64_t v3 = 3758097084LL;
    goto LABEL_11;
  }

  if (!a2)
  {
LABEL_11:
    rsize_t v6 = 4096LL;
    goto LABEL_9;
  }

  uint64_t v5 = IOConnectCallMethod(v4, 0x8Eu, &input, 1u, 0LL, 0LL, 0LL, 0LL, __s, &__n);
  rsize_t v6 = __n;
  if ((_DWORD)v5)
  {
    uint64_t v3 = v5;
  }

  else if (__n - 4097 >= 0xFFFFFFFFFFFFF000LL)
  {
    else {
      uint64_t v3 = 0LL;
    }
    rsize_t v6 = __n;
  }

uint64_t sub_1001005F0(const void *a1, size_t a2, void *a3, size_t *a4)
{
  uint64_t input = 266LL;
  uint64_t result = 3758097090LL;
  if (a3 && a4)
  {
    mach_port_t v9 = sub_1000F3714();
    if (v9)
    {
      size_t v10 = *a4;
      uint64_t result = IOConnectCallMethod(v9, 0x68u, &input, 1u, a1, a2, 0LL, 0LL, a3, &v10);
      if (!(_DWORD)result) {
        *a4 = (int)v10;
      }
    }

    else
    {
      fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_fairplay_wrap",  ":",  3431,  "",  0,  "",  "");
      return 3758097084LL;
    }
  }

  return result;
}

uint64_t sub_100100714(unsigned int a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  uint64_t input = ((unint64_t)a1 << 8) | 1;
  uint64_t result = 3758097090LL;
  if (a4 && a5)
  {
    mach_port_t v10 = sub_1000F3714();
    if (v10)
    {
      size_t v11 = *a5;
      uint64_t result = IOConnectCallMethod(v10, 0x68u, &input, 1u, a2, a3, 0LL, 0LL, a4, &v11);
      if (!(_DWORD)result) {
        *a5 = (int)v11;
      }
    }

    else
    {
      fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "_fairplay_generate_csk_internal",  ":",  3455,  "",  0,  "",  "");
      return 3758097084LL;
    }
  }

  return result;
}

uint64_t sub_100100840(const void *a1, size_t a2, void *a3, size_t *a4)
{
  return sub_100100714(0, a1, a2, a3, a4);
}

uint64_t sub_100100858(const void *a1, size_t a2, void *a3, size_t *a4)
{
  return sub_100100714(1u, a1, a2, a3, a4);
}

uint64_t sub_100100870(uint64_t a1, const void *a2, size_t a3, void *a4, void *a5)
{
  size_t v16 = 0x4000LL;
  input[0] = 1LL;
  input[1] = a1;
  mach_port_t v10 = sub_1000F3714();
  if (v10)
  {
    uint64_t v11 = IOConnectCallMethod(v10, 0x87u, input, 2u, a2, a3, 0LL, 0LL, __s, &v16);
    if ((_DWORD)v11)
    {
      uint64_t v14 = v11;
    }

    else
    {
      if (v16 >= 0x2C) {
        size_t v12 = 44LL;
      }
      else {
        size_t v12 = v16;
      }
      __memcpy_chk(v19, __s, v12, 44LL);
      *a5 = 44LL;
      uint64_t v13 = calloc(0x2CuLL, 1uLL);
      *a4 = v13;
      if (v13)
      {
        __memcpy_chk(v13, v19, *a5, 44LL);
        uint64_t v14 = 0LL;
      }

      else
      {
        uint64_t v14 = 3758097085LL;
      }
    }
  }

  else
  {
    uint64_t v14 = 3758097084LL;
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_bak_get_beacon_internal",  ":",  3491,  "",  0,  "",  "");
  }

  memset_s(__s, 0x4000uLL, 0, 0x4000uLL);
  return v14;
}

uint64_t sub_100100A40( int a1, unsigned int a2, const void *a3, size_t a4, void *a5, void *a6, void *a7)
{
  mach_port_t v17 = 0LL;
  memset(__n, 0, 44);
  uint64_t v10 = sub_100100870(a1 ^ 1u | ((unint64_t)a2 << 16), a3, a4, &v17, __n);
  if ((_DWORD)v10)
  {
    uint64_t v15 = v10;
    uint64_t v11 = v17;
    goto LABEL_10;
  }

  uint64_t v11 = v17;
  if (__n[0] != 44)
  {
    uint64_t v15 = 3758604312LL;
LABEL_10:
    if (!v11) {
      return v15;
    }
    goto LABEL_6;
  }

  __int128 v12 = v17[1];
  *(_OWORD *)&__n[1] = *v17;
  *(_OWORD *)&__n[3] = v12;
  LODWORD(__n[5]) = *((_DWORD *)v17 + 8);
  uint64_t v13 = *(void *)((char *)v17 + 36);
  uint64_t v14 = calloc(0x1CuLL, 1uLL);
  *a5 = v14;
  if (v14)
  {
    *a6 = 28LL;
    _OWORD *v14 = *(_OWORD *)&__n[2];
    *(_OWORD *)((char *)v14 + 12) = *(_OWORD *)((char *)&__n[3] + 4);
    uint64_t v15 = 0LL;
    if (a7) {
      *a7 = v13;
    }
  }

  else
  {
    uint64_t v15 = 3758097085LL;
  }

uint64_t sub_100100B80(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  input[0] = 2LL;
  input[1] = a1;
  int v37 = 0;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v28 = 0u;
  memset(v27, 0, sizeof(v27));
  bzero(__s, 0x4000uLL);
  size_t v25 = 0x4000LL;
  mach_port_t v9 = sub_1000F3714();
  if (v9)
  {
    uint64_t v10 = IOConnectCallMethod(v9, 0x87u, input, 2u, 0LL, 0LL, 0LL, 0LL, __s, &v25);
    if ((_DWORD)v10)
    {
      uint64_t v11 = v10;
    }

    else
    {
      uint64_t v11 = 3758097085LL;
      if (v25 >= 0xC4) {
        size_t v12 = 196LL;
      }
      else {
        size_t v12 = v25;
      }
      __memcpy_chk(v27, __s, v12, 196LL);
      uint64_t v13 = calloc(0x28uLL, 1uLL);
      *a2 = v13;
      if (v13)
      {
        *a3 = 40LL;
        __int128 v14 = *(_OWORD *)&v27[1];
        __int128 v15 = *(_OWORD *)&v27[3];
        v13[4] = v27[5];
        *(_OWORD *)uint64_t v13 = v14;
        *((_OWORD *)v13 + 1) = v15;
        size_t v16 = calloc(0x91uLL, 1uLL);
        *a4 = v16;
        if (v16)
        {
          uint64_t v11 = 0LL;
          *a5 = 145LL;
          __int128 v17 = v29;
          *size_t v16 = v28;
          v16[1] = v17;
          __int128 v18 = v30;
          __int128 v19 = v31;
          __int128 v20 = v33;
          v16[4] = v32;
          v16[5] = v20;
          void v16[2] = v18;
          v16[3] = v19;
          __int128 v21 = v34;
          __int128 v22 = v35;
          __int128 v23 = v36;
          *((_BYTE *)v16 + 1memset(v19, 0, 44) = v37;
          v16[7] = v22;
          v16[8] = v23;
          v16[6] = v21;
        }
      }
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_bak_get_swizzler_internal",  ":",  3551,  "",  0,  "",  "");
    uint64_t v11 = 3758097084LL;
  }

  memset_s(__s, 0x4000uLL, 0, 0x4000uLL);
  memset_s(v27, 0xC4uLL, 0, 0xC4uLL);
  return v11;
}

uint64_t sub_100100DD0(void *a1, void *a2, void *a3, void *a4)
{
  return sub_100100B80(0LL, a1, a2, a3, a4);
}

uint64_t sub_100100DE8(uint64_t a1)
{
  mach_port_t v2 = sub_1000F56AC();
  if (v2) {
    return IOConnectCallMethod(v2, 0xCu, 0LL, 0, *(const void **)a1, *(void *)(a1 + 8), 0LL, 0LL, 0LL, 0LL);
  }
  else {
    return 3758097084LL;
  }
}

uint64_t sub_100100E40(void *a1, size_t *a2)
{
  size_t __count = 0x4000LL;
  mach_port_t v4 = sub_1000F3714();
  if (v4)
  {
    uint64_t v5 = 3758097090LL;
    if (a1 && a2)
    {
      uint64_t v6 = IOConnectCallMethod(v4, 0x96u, 0LL, 0, 0LL, 0LL, 0LL, 0LL, __src, &__count);
      if ((_DWORD)v6)
      {
        uint64_t v5 = v6;
      }

      else
      {
        uint64_t v7 = calloc(__count, 1uLL);
        *a1 = v7;
        if (v7)
        {
          size_t v8 = __count;
          *a2 = __count;
          memcpy(v7, __src, v8);
          uint64_t v5 = 0LL;
        }

        else
        {
          uint64_t v5 = 3758097085LL;
        }
      }
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_get_dsme_key",  ":",  3600,  "",  0,  "",  "");
    uint64_t v5 = 3758097084LL;
  }

  memset_s(__src, 0x4000uLL, 0, 0x4000uLL);
  return v5;
}

BOOL sub_100100FCC(uint64_t a1, uint64_t a2)
{
  return a2 == 4 || a2 == 32;
}

uint64_t sub_100100FE0()
{
  mach_port_t v0 = sub_1000F3714();
  if (v0) {
    return IOConnectCallMethod(v0, 0x73u, 0LL, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_prewarm_sps",  ":",  3627,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_100101084(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = 4294967285LL;
  if (a3 && a4 <= 0x30)
  {
    uint64_t v4 = 3758097084LL;
    mach_port_t v9 = sub_1000F3714();
    if (v9)
    {
      mach_port_t v10 = v9;
      int v11 = ccder_sizeof_raw_octet_string(16LL);
      uint64_t v12 = a2;
      int v13 = ccder_sizeof_uint64(a2);
      int v14 = ccder_sizeof_raw_octet_string(a4);
      uint64_t v15 = ccder_sizeof(0x2000000000000010LL, (v13 + v11 + v14));
      int v16 = v15;
      size_t v17 = v15;
      __chkstk_darwin(v15);
      __int128 v19 = (char *)&v25 - v18;
      bzero((char *)&v25 - v18, v17);
      __int128 v20 = &v19[v16];
      uint64_t v21 = ccder_encode_raw_octet_string(a4, a3, v19, v20);
      uint64_t v22 = ccder_encode_uint64(v12, v19, v21);
      uint64_t v23 = ccder_encode_raw_octet_string(16LL, a1, v19, v22);
      else {
        return 3758097090LL;
      }
    }

    else
    {
      fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_sealed_hashes_set",  ":",  3644,  "",  0,  "",  "");
    }
  }

  return v4;
}

uint64_t sub_100101294(const void *a1, size_t a2)
{
  mach_port_t v4 = sub_1000F3714();
  if (v4) {
    return IOConnectCallMethod(v4, 0x90u, 0LL, 0, a1, a2, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_measure_and_seal_cryptex_manifest",  ":",  3674,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_100101348()
{
  mach_port_t v0 = sub_1000F3714();
  if (v0) {
    return IOConnectCallMethod(v0, 0x95u, 0LL, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_seal_cryptex_manifest_lock",  ":",  3688,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_1001013EC(int a1, uint64_t a2, uint64_t a3)
{
  input[0] = a1;
  input[1] = a2;
  uint64_t input[2] = a3;
  mach_port_t v3 = sub_1000F3714();
  if (v3) {
    return IOConnectCallMethod(v3, 0x85u, input, 3u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_lkgp_recover",  ":",  3704,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_1001014C8(int a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_1000F3714();
  if (v1) {
    return IOConnectCallMethod(v1, 0x8Au, &input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_memento_efface_blob",  ":",  3720,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_1001015A0(int a1, _BYTE *a2)
{
  uint64_t input = a1;
  bzero(__s, 0x1000uLL);
  rsize_t __n = 4096LL;
  mach_port_t v3 = sub_1000F3714();
  if (v3)
  {
    uint64_t v4 = IOConnectCallMethod(v3, 0x8Bu, &input, 1u, 0LL, 0LL, 0LL, 0LL, __s, &__n);
    rsize_t v5 = __n;
    if ((_DWORD)v4)
    {
      uint64_t v6 = v4;
    }

    else
    {
      uint64_t v6 = 3758097090LL;
      if (__n - 4097 >= 0xFFFFFFFFFFFFF000LL)
      {
        else {
          uint64_t v6 = 0LL;
        }
        rsize_t v5 = __n;
      }
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_memento_get_state",  ":",  3738,  "",  0,  "",  "");
    uint64_t v6 = 3758097084LL;
    rsize_t v5 = 4096LL;
  }

  memset_s(__s, v5, 0, v5);
  return v6;
}

uint64_t sub_10010171C()
{
  mach_port_t v0 = sub_1000F3714();
  if (v0) {
    return IOConnectCallMethod(v0, 0x89u, &input, 0, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_set_jcop_supports_updated_kud_policy",  ":",  3758,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_1001017C0(uint64_t a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_1000F3714();
  if (v1) {
    return IOConnectCallMethod(v1, 0x97u, &input, 1u, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }
  fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_set_cx_window",  ":",  3774,  "",  0,  "",  "");
  return 3758097084LL;
}

uint64_t sub_100101894(void *a1)
{
  size_t v5 = 4096LL;
  if (!a1) {
    return 4294967285LL;
  }
  mach_port_t v2 = sub_1000F3714();
  if (v2)
  {
    mach_port_t v3 = v2;
    bzero(outputStruct, 0x1000uLL);
    uint64_t result = IOConnectCallMethod(v3, 0x98u, 0LL, 0, 0LL, 0LL, 0LL, 0LL, outputStruct, &v5);
    if (!(_DWORD)result)
    {
      if (v5 == 8)
      {
        uint64_t result = 0LL;
        *a1 = outputStruct[0];
      }

      else
      {
        return 3758604298LL;
      }
    }
  }

  else
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n",  "aks",  "",  "",  "",  "aks_get_cx_window",  ":",  3791,  "",  0,  "",  "");
    return 3758097084LL;
  }

  return result;
}

uint64_t sub_1001019EC(uint64_t a1)
{
  uint64_t v2 = ccsha256_di(a1);
  ccdigest(v2, 16LL, a1, v4);
  return LODWORD(v4[0]);
}

unint64_t sub_100101A5C(unsigned int a1)
{
  mach_timebase_info info = 0LL;
  mach_timebase_info(&info);
  return 1000000000 * info.denom * (unint64_t)a1 / info.numer;
}

unint64_t sub_100101AA4(uint64_t a1)
{
  mach_timebase_info info = 0LL;
  mach_timebase_info(&info);
  return (unint64_t)info.numer * a1 / info.denom;
}

uint64_t sub_100101AE0()
{
  mach_timebase_info info = 0LL;
  mach_timebase_info(&info);
  return mach_continuous_time() * info.numer / info.denom / 0x3E8;
}

__darwin_time_t sub_100101B30()
{
  v1.tv_sec = 0LL;
  *(void *)&v1.tv_usec = 0LL;
  gettimeofday(&v1, 0LL);
  return v1.tv_sec;
}

uint64_t sub_100101B5C(uint64_t a1)
{
  return 1000000 * a1;
}

unint64_t sub_100101B6C(uint64_t a1)
{
  return (a1 + 999999) / 0xF4240uLL;
}

void *sub_100101B84(unsigned int a1, unsigned int a2)
{
  uint64_t v2 = a1 + 1LL;
  uint64_t v3 = v2 << 31 >> 31;
  if (v3 != v2 || v3 < 0)
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s overflow%s\n",  "aks",  "",  "",  "",  "circular_queue_init",  ":",  341,  "",  0,  "",  "");
    return 0LL;
  }

  else
  {
    size_t v5 = calloc(0x20uLL, 1uLL);
    uint64_t v6 = v5;
    if (v5)
    {
      v5[1] = 0LL;
      size_t v7 = (v3 & 0x1FFFFFFFFLL) * a2;
      *(_DWORD *)size_t v5 = a2;
      *((_DWORD *)v5 + 1) = v2;
      size_t v8 = calloc(v7, 1uLL);
      void v6[2] = v7;
      void v6[3] = v8;
    }
  }

  return v6;
}

uint64_t sub_100101C60(_DWORD *a1)
{
  unsigned int v3 = a1[2];
  unsigned int v2 = a1[3];
  uint64_t result = v2 - v3;
  if (v2 < v3) {
    return (result + a1[1]);
  }
  return result;
}

uint64_t sub_100101C7C(unsigned int *a1, const void *a2)
{
  unsigned int v3 = a1[3];
  unsigned int v4 = (v3 + 1) % a1[1];
  memcpy((void *)(*((void *)a1 + 3) + *a1 * v3), a2, *a1);
  a1[3] = v4;
  if (v4 == a1[2]) {
    a1[2] = (v4 + 1) % a1[1];
  }
  return 0LL;
}

uint64_t sub_100101CE4(unsigned int *a1, void *__dst)
{
  unsigned int v2 = a1[2];
  if (v2 == a1[3]) {
    return 0xFFFFFFFFLL;
  }
  if (__dst)
  {
    memcpy(__dst, (const void *)(*((void *)a1 + 3) + *a1 * v2), *a1);
    unsigned int v2 = a1[2];
  }

  memset_s((void *)(*((void *)a1 + 3) + *a1 * v2), *a1, 0, *a1);
  uint64_t result = 0LL;
  a1[2] = (a1[2] + 1) % a1[1];
  return result;
}

uint64_t sub_100101D6C(unsigned int *a1, void *__dst)
{
  unsigned int v2 = a1[2];
  if (v2 == a1[3]) {
    return 0xFFFFFFFFLL;
  }
  memcpy(__dst, (const void *)(*((void *)a1 + 3) + *a1 * v2), *a1);
  return 0LL;
}

uint64_t sub_100101DB0(int *a1, void *a2, unsigned int *a3)
{
  unsigned int v7 = a1[2];
  unsigned int v6 = a1[3];
  unsigned int v8 = v6 - v7;
  if (v6 < v7) {
    v8 += a1[1];
  }
  if (!v8) {
    return 0LL;
  }
  unsigned int v9 = *a1 * v8;
  mach_port_t v10 = (char *)calloc(v9, 1uLL);
  if (!v10) {
    return 0xFFFFFFFFLL;
  }
  int v11 = v10;
  unsigned int v12 = a1[2];
  unsigned int v13 = a1[3];
  if (v13 <= v12)
  {
    if (v12 <= v13) {
      goto LABEL_13;
    }
    unsigned int v17 = a1[1] - v12;
    memcpy(v10, (const void *)(*((void *)a1 + 3) + *a1 * v12), *a1 * v17);
    if (v8 <= v17) {
      goto LABEL_13;
    }
    mach_port_t v10 = &v11[*a1 * v17];
    int v14 = (const void *)*((void *)a1 + 3);
    size_t v15 = *a1 * (v8 - v17);
  }

  else
  {
    int v14 = (const void *)(*((void *)a1 + 3) + *a1 * v12);
    size_t v15 = *a1 * v8;
  }

  memcpy(v10, v14, v15);
LABEL_13:
  unsigned int v18 = a1[1];
  int v19 = *a1;
  a1[2] = (a1[2] + v8) % v18;
  memset_s(*((void **)a1 + 3), v19 * v18, 0, v19 * v18);
  uint64_t result = 0LL;
  *a2 = v11;
  *a3 = v9;
  return result;
}

uint64_t sub_100101ED8(uint64_t a1)
{
  *(void *)(a1 + 8) = 0LL;
  rsize_t v1 = (*(_DWORD *)a1 * *(_DWORD *)(a1 + 4));
  return memset_s(*(void **)(a1 + 24), v1, 0, v1);
}

void sub_100101EF8(void *a1)
{
  *((void *)a1 + 1) = 0LL;
  rsize_t v2 = (*(_DWORD *)a1 * *((_DWORD *)a1 + 1));
  memset_s(*((void **)a1 + 3), v2, 0, v2);
  memset_s(*((void **)a1 + 3), *((void *)a1 + 2), 0, *((void *)a1 + 2));
  free(*((void **)a1 + 3));
  memset_s(a1, 0x20uLL, 0, 0x20uLL);
  free(a1);
}

uint64_t sub_100101F60(unsigned int a1)
{
  return (a1 >> 5) & 1;
}

BOOL sub_100101F68(uint8x16_t *a1)
{
  int8x16_t v1 = (int8x16_t)vmovl_high_u8(*a1);
  int8x16_t v2 = (int8x16_t)vmovl_u8(*(uint8x8_t *)a1->i8);
  int8x16_t v3 = (int8x16_t)vmovl_u16((uint16x4_t)vorr_s8( vorr_s8(*(int8x8_t *)v2.i8, *(int8x8_t *)v1.i8),  vorr_s8( (int8x8_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL),  (int8x8_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL))));
  return vorr_s8(*(int8x8_t *)v3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)) != 0LL;
}

BOOL sub_100101FAC(unsigned __int8 *a1, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  int v2 = 0;
  do
  {
    int v3 = *a1++;
    v2 |= v3;
    --a2;
  }

  while (a2);
  return v2 != 0;
}

_DWORD *sub_100101FD8(_DWORD *result)
{
  if (result) {
    return (_DWORD *)(*result != 0);
  }
  return result;
}

uint64_t sub_100101FEC(char a1, int a2)
{
  return a1 & 0x1F | (32 * a2);
}

uint64_t sub_100101FF4(unsigned int a1)
{
  return (a1 >> 6) & 1;
}

uint64_t sub_100101FFC(int a1)
{
  return a1 & 0xFFFFFFBF;
}

uint64_t sub_100102004(int a1)
{
  return a1 | 0x40u;
}

uint64_t sub_10010200C(char a1)
{
  char v1 = a1 & 0x1F;
  if ((a1 & 0x1Fu) >= 0x14) {
    char v1 = -1;
  }
  return ((a1 & 0x1Fu) < 0x14) & (0xC3FC0u >> v1);
}

uint64_t sub_100102034(char a1)
{
  if ((a1 & 0x1Fu) > 0x13) {
    return 0xFFFFFFFFLL;
  }
  else {
    return a1 & 0x1F;
  }
}

uint64_t sub_100102044(char a1)
{
  unsigned int v1 = a1 & 0x1F;
  if (v1 > 0x13) {
    unsigned int v1 = -1;
  }
  return (v1 < 0x12) & (0x2E03Eu >> v1);
}

uint64_t sub_10010206C(char a1)
{
  return a1 & 0xF;
}

BOOL sub_100102074(int a1, int a2)
{
  return ((a2 ^ a1) & 0xF) == 0;
}

uint64_t sub_100102084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return cc_cmp_safe(a3, a1, a2);
}

uint64_t sub_100102098(const char *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  unsigned int v4 = a1;
  char v24 = 0;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  *(_OWORD *)__str = 0u;
  __int128 v17 = 0u;
  size_t v5 = &__stdoutp;
  if (a3 >= 0x41)
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s %sdump %s (len = %zd)%s%s\n",  "aks",  "",  "",  "",  "dump_bytes_internal",  ":",  786,  "",  0,  "",  "",  a1,  a3,  "",  "");
    unsigned int v4 = "";
  }

  else if (!a3)
  {
    return memset_s(__str, 0x81uLL, 0, 0x81uLL);
  }

  unint64_t v6 = 0LL;
  unint64_t v15 = v3;
  do
  {
    unsigned int v7 = v5;
    if (v3 - v6 >= 0x40) {
      uint64_t v8 = 64LL;
    }
    else {
      uint64_t v8 = v3 - v6;
    }
    if (v8)
    {
      unsigned int v9 = (unsigned __int8 *)(a2 + v6);
      mach_port_t v10 = __str;
      uint64_t v11 = v8;
      do
      {
        int v12 = *v9++;
        snprintf(v10, 3uLL, "%02x", v12);
        v10 += 2;
        --v11;
      }

      while (v11);
    }

    size_t v5 = v7;
    fprintf( *v7,  "%s%s:%s%s%s%s%u:%s%u:%s %s%s%s[%04zu,%04zu): %s%s%s%s\n",  "aks",  "",  "",  "",  "dump_bytes_internal",  ":",  796,  "",  0,  "",  "",  v4,  "",  v6,  v8 + v6,  "",  __str,  "",  "");
    v6 += v8;
    unint64_t v3 = v15;
  }

  while (v6 < v15);
  return memset_s(__str, 0x81uLL, 0, 0x81uLL);
}

_BYTE *sub_100102274(unsigned __int8 *a1, unint64_t a2)
{
  if (a2 >= 0x10) {
    uint64_t v2 = 16LL;
  }
  else {
    uint64_t v2 = a2;
  }
  if (v2)
  {
    unsigned int v4 = byte_1002EE6C0;
    uint64_t v5 = v2;
    do
    {
      int v6 = *a1++;
      snprintf(v4, 3uLL, "%02x", v6);
      v4 += 2;
      --v5;
    }

    while (v5);
  }

  byte_1002EE6C0[2 * v2] = 0;
  return byte_1002EE6C0;
}

uint64_t sub_100102304(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  v10[0] = 0x101010101010101LL;
  v10[1] = 0x101010101010101LL;
  if (a4 == 3)
  {
    uint64_t v7 = ccsha256_di(a1);
    cchmac(v7, a2 >> 1, a1, 16LL, v10, __s);
    uint64_t v8 = 0LL;
    *(_WORD *)a3 = __s[0];
    *(_BYTE *)(a3 + 2) = BYTE2(__s[0]);
  }

  else
  {
    uint64_t v8 = 0xFFFFFFFFLL;
  }

  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  return v8;
}

uint64_t sub_1001023CC(const char *a1, uint64_t a2, unint64_t a3)
{
  char v6 = 0;
  __int16 v5 = 0;
  sub_100102304(a2, a3, (uint64_t)&v5, 3LL);
  return sub_100102098(a1, (uint64_t)&v5, 3uLL);
}

char *sub_100102420(char *result, unint64_t a2)
{
  if (a2 >= 2)
  {
    unint64_t v2 = a2 >> 1;
    unint64_t v3 = &result[a2 - 1];
    do
    {
      char v4 = *result;
      *result++ = *v3;
      *v3-- = v4;
      --v2;
    }

    while (v2);
  }

  return result;
}

uint64_t sub_100102450(unsigned __int8 *a1, unint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v5 = 0xFFFFFFFFLL;
  if ((a2 & 1) == 0)
  {
    char v6 = a1;
    if (a1)
    {
      if (a3 && a4)
      {
        unint64_t v9 = a2 >> 1;
        mach_port_t v10 = calloc(a2 >> 1, 1uLL);
        if (v10)
        {
          if (a2 >= 2)
          {
            if (v9 <= 1) {
              uint64_t v11 = 1LL;
            }
            else {
              uint64_t v11 = a2 >> 1;
            }
            int v12 = v10;
            do
            {
              int v13 = *v6;
              unsigned int v14 = v13 - 48;
              unsigned int v15 = v13 - 97;
              else {
                char v16 = v13 - 55;
              }
              char v17 = v13 - 87;
              if (v15 > 5) {
                char v17 = v16;
              }
              if (v14 < 0xA) {
                char v17 = v14;
              }
              char v18 = 16 * v17;
              int v19 = v6[1];
              unsigned int v20 = v19 - 48;
              unsigned int v21 = v19 - 97;
              else {
                char v22 = v19 - 55;
              }
              char v23 = v19 - 87;
              if (v21 > 5) {
                char v23 = v22;
              }
              if (v20 < 0xA) {
                char v23 = v20;
              }
              *v12++ = v23 | v18;
              v6 += 2;
              --v11;
            }

            while (v11);
          }

          uint64_t v5 = 0LL;
          *a3 = v10;
          *a4 = v9;
        }

        else
        {
          return 4294967279LL;
        }
      }
    }
  }

  return v5;
}

uint64_t sub_100102554(uint64_t result)
{
  return result;
}

uint64_t sub_100102570(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return 4294967285LL;
  }
  if (a2 && *(void *)a2 && (size_t v7 = *(void *)(a2 + 8)) != 0)
  {
    uint64_t v8 = calloc(v7, 1uLL);
    if (v8)
    {
      *a1 = v8;
      unint64_t v9 = *(const void **)a2;
      a1[1] = *(void *)(a2 + 8);
      memcpy(v8, v9, *(void *)(a2 + 8));
      return 0LL;
    }

    else
    {
      return 4294967279LL;
    }
  }

  else
  {
    uint64_t result = 0LL;
    *a1 = 0LL;
    a1[1] = 0LL;
  }

  return result;
}

uint64_t sub_100102604(uint64_t result, int a2, const char *a3)
{
  if ((result & 1) == 0)
  {
    fprintf( __stdoutp,  "%s%s:%s%s%s%s%u:%s%u:%s failed REQUIRE condition (%s:%d)\n%s\n",  "aks",  "",  "",  "",  "REQUIRE_func",  ":",  1047,  "",  0,  "",  a3,  a2,  "");
    abort();
  }

  return result;
}

uint64_t sub_100102674(_OWORD *a1, _OWORD *a2)
{
  int __s = 0x1000000;
  __int128 v4 = a2[1];
  void v10[2] = *a2;
  v10[3] = v4;
  __int128 v5 = a1[1];
  v10[4] = *a1;
  v10[5] = v5;
  uint64_t v6 = cccurve25519(v10, v11, a1);
  uint64_t v7 = ccsha256_di(v6);
  ccdigest(v7, 100LL, &__s, a2 + 2);
  memset_s(&__s, 0x64uLL, 0, 0x64uLL);
  memset_s(v11, 0x20uLL, 0, 0x20uLL);
  return 0LL;
}

uint64_t sub_10010275C( uint64_t a1, uint64_t (*a2)(uint64_t, void *, uint64_t *, uint64_t *, uint64_t), char a3, uint64_t *a4, unsigned int a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v38 = 0;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  memset(__s, 0, sizeof(__s));
  uint64_t v8 = 0xFFFFFFFFLL;
  if (!a6 || !a7) {
    goto LABEL_46;
  }
  uint64_t v13 = a1;
  if ((a3 & 0x10) != 0) {
    unsigned int v14 = "SEP derived_key";
  }
  else {
    unsigned int v14 = "derived_key";
  }
  if ((a3 & 0x10) != 0) {
    uint64_t v15 = 16LL;
  }
  else {
    uint64_t v15 = 12LL;
  }
  if (!a1)
  {
LABEL_20:
    if (a2)
    {
      if (sub_1000F3430(a5, &v38))
      {
        if (*a7 < v38) {
          goto LABEL_46;
        }
        unsigned int v20 = 0LL;
        unsigned int v21 = 0;
        char v22 = a2;
        char v23 = a4;
        goto LABEL_44;
      }
    }

    else
    {
      if ((a3 & 4) != 0)
      {
        if ((a5 & 0xF) != 0 || *a7 < a5) {
          goto LABEL_46;
        }
        unsigned int v38 = a5;
        uint64_t v32 = ccaes_cbc_encrypt_mode(a1);
        sub_100102FD4(v32, 32LL, v13 + 8, (uint64_t)&unk_1002EF3E0, a5 & 0xFFFFFFF0);
LABEL_45:
        uint64_t v8 = 0LL;
        *a7 = v38;
        goto LABEL_46;
      }

      uint64_t v25 = sub_1000F3430(a5, &v38);
      if ((_DWORD)v25)
      {
        if (*a7 < v38) {
          goto LABEL_46;
        }
        if ((a3 & 8) != 0)
        {
          uint64_t v34 = ccsha256_di(v25);
          cchkdf(v34, 32LL, v13 + 8, 0LL, 0LL, v15, v14, 32LL, __s);
          unsigned int v20 = __s;
        }

        else
        {
          unsigned int v20 = (_OWORD *)(v13 + 8);
        }

        unsigned int v21 = 32;
        char v22 = 0LL;
        char v23 = a4;
LABEL_44:
        goto LABEL_45;
      }
    }

    uint64_t v8 = 4294967285LL;
    if ((a3 & 8) == 0) {
      goto LABEL_48;
    }
    goto LABEL_47;
  }

  int v16 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 - 1) >= 2)
  {
    if (v16) {
      goto LABEL_46;
    }
    goto LABEL_20;
  }

  __int128 v36 = v14;
  if ((a3 & 4) != 0) {
    unsigned int v17 = 64;
  }
  else {
    unsigned int v17 = 72;
  }
  unsigned int v38 = v17;
  if (!a2 && a5 == 32 && *a7 >= v17)
  {
    if (v16 == 1)
    {
      a1 = sub_100102674((_OWORD *)(a1 + 36), &v40);
    }

    else
    {
      __int128 v26 = *(_OWORD *)(a1 + 20);
      __int128 v40 = *(_OWORD *)(a1 + 4);
      __int128 v41 = v26;
      __int128 v27 = *(_OWORD *)(a1 + 52);
      __int128 v42 = *(_OWORD *)(a1 + 36);
      __int128 v43 = v27;
    }

    if ((a3 & 0x80) == 0)
    {
      __int128 v28 = v41;
      *(_OWORD *)a6 = v40;
      *(_OWORD *)(a6 + 16) = v28;
      if ((a3 & 4) != 0)
      {
        uint64_t v31 = ccaes_cbc_encrypt_mode(a1);
        sub_100102FD4(v31, 32LL, (uint64_t)&v42, (uint64_t)&unk_1002EF3E0, 0x20uLL);
        goto LABEL_40;
      }

      int v37 = 40;
      if ((a3 & 8) != 0)
      {
        uint64_t v33 = ccsha256_di(a1);
        cchkdf(v33, 32LL, &v42, 0LL, 0LL, v15, v36, 32LL, __s);
        __int128 v30 = (void *)(a6 + 32);
        __int128 v29 = __s;
      }

      else
      {
        __int128 v29 = &v42;
        __int128 v30 = (void *)(a6 + 32);
      }

      if (!sub_1000F3004((uint64_t)v29, 0x20u, 0xA6A6A6A6A6A6A6A6LL, 0LL, a4, 0x20u, v30, &v37))
      {
LABEL_40:
        uint64_t v8 = 0LL;
        *a7 = v17;
        if ((a3 & 8) == 0) {
          goto LABEL_48;
        }
        goto LABEL_47;
      }
    }
  }

LABEL_46:
  if ((a3 & 8) != 0) {
LABEL_47:
  }
    memset_s(__s, 0x20uLL, 0, 0x20uLL);
LABEL_48:
  memset_s(&v40, 0x40uLL, 0, 0x40uLL);
  return v8;
}

  if ((v33 & 1) == 0)
  {
    uint64_t v59 = kTransparencyErrorDecode;
    char v60 = (void *)objc_claimAutoreleasedReturnValue(-[TransparencyPublicKeyBag application](v81, "application"));
    __n128 v61 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  v59,  v32,  @"PublicKeysResponse for %@ missing or invalid content: %ld",  v60,  v32));

    if (qword_1002EE9F8 != -1) {
      dispatch_once(&qword_1002EE9F8, &stru_100284068);
    }
    uint64_t v62 = (void *)qword_1002EEA00;
    if (os_log_type_enabled((os_log_t)qword_1002EEA00, OS_LOG_TYPE_ERROR))
    {
      uint64_t v63 = v62;
      uint64_t v64 = v81;
      uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue(-[TransparencyPublicKeyBag application](v81, "application"));
      *(_DWORD *)buf = 138543618;
      char v84 = v65;
      uint64_t v85 = 2048;
      uint64_t v86 = v32;
      _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_ERROR,  "PublicKeysResponse for %{public}@ missing or invalid content: %ld",  buf,  0x16u);

      id v66 = 0LL;
      if (!a7) {
        goto LABEL_72;
      }
      goto LABEL_70;
    }

    goto LABEL_56;
  }

  if ([v12 status] != 1)
  {
    __n128 v61 = v14;
LABEL_56:
    id v66 = 0LL;
    uint64_t v64 = v81;
    if (!a7) {
      goto LABEL_72;
    }
    goto LABEL_70;
  }

  uint64_t v75 = a7;
  size_t v48 = (void *)objc_claimAutoreleasedReturnValue([v12 patConfigProof]);
  uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v12 metadata]);
  size_t v50 = kTransparencyResponseMetadataKeyServerHint;
  uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([v49 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint]);
  [v48 setMetadataValue:v51 key:v50];

  uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([v12 tltConfigProof]);
  uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([v12 metadata]);
  __n128 v54 = (void *)objc_claimAutoreleasedReturnValue([v53 objectForKeyedSubscript:v50]);
  [v52 setMetadataValue:v54 key:v50];

  int v55 = objc_claimAutoreleasedReturnValue([v12 appLeafsArray]);
  uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue([v12 tltLeafsArray]);
  uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue([v12 intermediatesArray]);
  uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue([v12 patConfigProof]);
  uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v12 tltConfigProof]);
  uint64_t v57 = [v12 hasPatClosedProof];
  if (v57) {
    uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue([v12 patClosedProof]);
  }
  else {
    uint64_t v58 = 0LL;
  }
  uint64_t v67 = [v12 hasPamHeadInPatProof];
  if (v67) {
    __n128 v68 = (void *)objc_claimAutoreleasedReturnValue([v12 pamHeadInPatProof]);
  }
  else {
    __n128 v68 = 0LL;
  }
  uint64_t v82 = v14;
  LOBYTE(v74) = v8;
  uint64_t v69 = (void *)v55;
  uint64_t v70 = -[TransparencyPublicKeyBag initWithKeyData:tltLeafs:intermediates:patConfigProof:tltConfigProof:patClosedProof:pamHeadInPatProof:application:allowOldKeys:settings:error:]( v81,  "initWithKeyData:tltLeafs:intermediates:patConfigProof:tltConfigProof:patClosedProof:pamHeadInPatProof:applicat ion:allowOldKeys:settings:error:",  v55,  v78,  v77,  v76,  v56,  v58,  v68,  v80,  v74,  v79,  &v82);
  __n128 v61 = v82;

  id v66 = v70;
  if (v67) {

  }
  if (v57) {
  if (v66)
  }
  {
    uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue([v12 treeRollInfoURL]);
    -[TransparencyPublicKeyBag setTreeRollInfoURL:](v66, "setTreeRollInfoURL:", v71);

    uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    -[TransparencyPublicKeyBag setReceiptTime:](v66, "setReceiptTime:", v72);

    uint64_t v64 = v66;
  }

  else
  {
    uint64_t v64 = 0LL;
  }

  a7 = v75;
  if (v75)
  {
LABEL_70:
    if (v61) {
      *a7 = v61;
    }
  }

uint64_t sub_100102AC4(_OWORD *a1, uint64_t a2, _OWORD *a3, uint64_t a4)
{
  __int128 v5 = a1[1];
  _OWORD v11[2] = *a1;
  v11[3] = v5;
  __int128 v6 = a3[1];
  v11[4] = *a3;
  int __s = 0x1000000;
  void v11[5] = v6;
  uint64_t v7 = cccurve25519(v11, a2, a1);
  uint64_t v8 = ccsha256_di(v7);
  ccdigest(v8, 100LL, &__s, a4);
  memset_s(&__s, 0x64uLL, 0, 0x64uLL);
  return 0LL;
}

uint64_t sub_100102B80( uint64_t a1, uint64_t (*a2)(void, void *, unint64_t *, unint64_t *, uint64_t), char a3, void *a4, unsigned int a5, void *a6, unsigned int *a7)
{
  HIDWORD(v30) = 0;
  memset(v33, 0, sizeof(v33));
  uint64_t v8 = 0xFFFFFFFFLL;
  if (a4 && a5)
  {
    if ((a3 & 0x10) != 0) {
      uint64_t v15 = "SEP derived_key";
    }
    else {
      uint64_t v15 = "derived_key";
    }
    if ((a3 & 0x10) != 0) {
      uint64_t v16 = 16LL;
    }
    else {
      uint64_t v16 = 12LL;
    }
    if (!a1)
    {
LABEL_12:
      if (a5 <= 0x28)
      {
        if (a2)
        {
          if (sub_1000F348C(a5, (unsigned int *)&v30 + 1) && *a7 >= HIDWORD(v30))
          {
            unsigned int v17 = 0LL;
            unsigned int v18 = 0;
            int v19 = a2;
            goto LABEL_36;
          }
        }

        else if ((a3 & 4) != 0)
        {
          if ((a5 & 0xF) == 0 && *a7 >= a5)
          {
            HIDWORD(v30) = a5;
            uint64_t v24 = ccaes_cbc_decrypt_mode(a1);
            sub_100102FD4(v24, 32LL, a1 + 8, (uint64_t)&unk_1002EF3E0, a5 & 0xFFFFFFF0);
LABEL_37:
            uint64_t v8 = 0LL;
            *a7 = HIDWORD(v30);
            goto LABEL_41;
          }
        }

        else
        {
          BOOL v20 = sub_1000F348C(a5, (unsigned int *)&v30 + 1);
          if (v20 && *a7 >= HIDWORD(v30))
          {
            if ((a3 & 8) != 0)
            {
              uint64_t v27 = ccsha256_di(v20);
              ((void (*)(uint64_t, uint64_t, uint64_t, void, void, uint64_t, const char *, uint64_t, _OWORD *, uint64_t, void, void, void, void))cchkdf)( v27,  32LL,  a1 + 8,  0LL,  0LL,  v16,  v15,  32LL,  v33,  v30,  __s,  *((void *)&__s + 1),  v32,  *((void *)&v32 + 1));
              unsigned int v17 = v33;
            }

            else
            {
              unsigned int v17 = (_OWORD *)(a1 + 8);
            }

            unsigned int v18 = 32;
            int v19 = 0LL;
LABEL_36:
            if (!sub_1000F33C8( (uint64_t)v17,  v18,  0xA6A6A6A6A6A6A6A6LL,  v19,  a4,  a5,  a6,  (_DWORD *)&v30 + 1)) {
              goto LABEL_37;
            }
            goto LABEL_46;
          }
        }
      }

LABEL_44:
      uint64_t v8 = 4294967285LL;
      goto LABEL_41;
    }

    if (*(_DWORD *)a1 != 1)
    {
      if (!*(_DWORD *)a1) {
        goto LABEL_12;
      }
LABEL_28:
      uint64_t v8 = 0xFFFFFFFFLL;
      goto LABEL_41;
    }

    HIDWORD(v30) = 32;
    if (*a7 < 0x20) {
      goto LABEL_44;
    }
    __int128 __s = 0uLL;
    __int128 v32 = 0uLL;
    if ((a3 & 4) != 0)
    {
      if (a5 != 64) {
        goto LABEL_44;
      }
      uint64_t v25 = sub_100102AC4(a4, a1 + 4, (_OWORD *)(a1 + 36), (uint64_t)&__s);
      uint64_t v26 = ccaes_cbc_decrypt_mode(v25);
      sub_100102FD4(v26, 32LL, (uint64_t)&__s, (uint64_t)&unk_1002EF3E0, 0x20uLL);
    }

    else
    {
      if (a5 != 72) {
        goto LABEL_44;
      }
      uint64_t v21 = sub_100102AC4(a4, a1 + 4, (_OWORD *)(a1 + 36), (uint64_t)&__s);
      if (a3 < 0) {
        goto LABEL_28;
      }
      LODWORD(v30) = 32;
      if ((a3 & 8) != 0)
      {
        uint64_t v28 = ccsha256_di(v21);
        ((void (*)(uint64_t, uint64_t, __int128 *, void, void, uint64_t, const char *, uint64_t, _OWORD *, uint64_t))cchkdf)( v28,  32LL,  &__s,  0LL,  0LL,  v16,  v15,  32LL,  v33,  v30);
        char v22 = a4 + 4;
        p_s = v33;
      }

      else
      {
        char v22 = a4 + 4;
        p_s = &__s;
      }

      if (sub_1000F33C8((uint64_t)p_s, 0x20u, 0xA6A6A6A6A6A6A6A6LL, 0LL, v22, 0x28u, a6, &v30))
      {
        memset_s(&__s, 0x20uLL, 0, 0x20uLL);
LABEL_46:
        uint64_t v8 = 4294967277LL;
        goto LABEL_41;
      }
    }

    memset_s(&__s, 0x20uLL, 0, 0x20uLL);
    uint64_t v8 = 0LL;
    *a7 = 32;
  }

uint64_t sub_100102ED0(void *a1, void *a2, size_t *a3)
{
  size_t v6 = ((unint64_t)(cczp_bitlen(*a1) + 7) >> 2) | 1;
  uint64_t v7 = calloc(v6, 1uLL);
  if (!v7) {
    return 4294967279LL;
  }
  uint64_t v8 = v7;
  ccec_export_pub(a1, v7);
  uint64_t result = 0LL;
  *a2 = v8;
  *a3 = v6;
  return result;
}

unint64_t sub_100102F4C(uint64_t a1)
{
  return (unint64_t)(cczp_bitlen(a1) + 7) >> 3;
}

unint64_t sub_100102F6C(uint64_t a1)
{
  return (((unint64_t)(cczp_bitlen(a1) + 7) >> 2) & 0x3FFFFFFFFFFFFFFELL) + 9;
}

unint64_t sub_100102F90(void *a1)
{
  return ((unint64_t)(cczp_bitlen(*a1) + 7) >> 2) | 1;
}

unint64_t sub_100102FB4(void *a1)
{
  return (unint64_t)(cczp_bitlen(*a1) + 7) >> 3;
}

uint64_t sub_100102FD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return cccbc_one_shot(a1, a2, a3, a4, a5 >> 4);
}

uint64_t sub_100102FDC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ccecb_one_shot(a1, a2, a3, a4 >> 4);
}

uint64_t sub_100102FE4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return cccbc_update(a1, a2, a3, a4 >> 4);
}

BOOL sub_100102FEC(void *a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

uint64_t sub_100103064(void *a1, void **a2)
{
  return 1LL;
}

uint64_t sub_100103098(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)(a5 + 8) >= *(void *)a5)
  {
    char v14 = 0;
  }

  else
  {
    uint64_t v9 = 0LL;
    unint64_t v10 = 0LL;
    uint64_t v11 = (uint64_t)a1 + a2;
    while (1)
    {
      BOOL v12 = sub_100103194( *(const void **)(*(void *)(a5 + 24) + v9),  *(void *)(*(void *)(a5 + 24) + v9)
            + *(unsigned __int8 *)(*(void *)(*(void *)(a5 + 24) + v9) + 1LL)
            + 2LL,
              a1,
              v11);
      if (v12) {
        break;
      }
      ++v10;
      v9 += 40LL;
      if (v10 >= *(void *)a5) {
        goto LABEL_10;
      }
    }

    uint64_t v15 = (void *)(*(void *)(a5 + 24) + v9);
    if (v15[1])
    {
      char v13 = 0;
      *(_BYTE *)(a5 + 16) = 1;
    }

    else
    {
      ++*(void *)(a5 + 8);
      v15[1] = a3;
      v15[2] = a3 + a4;
      v15[3] = a3;
      v15[4] = a3 + a4;
      char v13 = 1;
    }

BOOL sub_10010317C(unsigned __int8 *a1, const void *a2, uint64_t a3)
{
  return sub_100103194(a1, (uint64_t)&a1[a1[1] + 2], a2, a3);
}

BOOL sub_100103194(const void *a1, uint64_t a2, const void *a3, uint64_t a4)
{
  size_t v7 = sub_1001031FC((uint64_t)a1, a2);
  return v7 == sub_1001031FC((uint64_t)a3, a4) && memcmp(a1, a3, v7) == 0;
}

uint64_t sub_1001031FC(uint64_t a1, uint64_t a2)
{
  v6[0] = a1;
  v6[1] = a2;
  uint64_t v4 = 0LL;
  uint64_t v5 = 0LL;
  else {
    return 0LL;
  }
}

uint64_t sub_100103260( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  v11[0] = a1;
  v11[1] = a2;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t result = ccder_blob_decode_range(v11, 0x2000000000000011LL, v11);
  if ((_DWORD)result)
  {
    if (ccder_blob_decode_sequence_tl(v11, &v9))
    {
      while (1)
      {
        uint64_t v7 = v9;
        uint64_t result = ccder_blob_decode_tl(&v9, 12LL, &v8);
        if (!(_DWORD)result) {
          break;
        }
        if (v9 - v7 != 2) {
          return 0LL;
        }
        uint64_t result = a3(v7, v10 - v7, v9 + v8, v10 - (v9 + v8), a4);
        if (!(_DWORD)result) {
          return result;
        }
        v11[0] = v10;
        if ((ccder_blob_decode_sequence_tl(v11, &v9) & 1) == 0) {
          return 1LL;
        }
      }
    }

    else
    {
      return 1LL;
    }
  }

  return result;
}

uint64_t sub_100103334(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v10 = a1;
  uint64_t v11 = 0LL;
  if (a1)
  {
    sub_100103260( a4,  a5,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1001033A0,  (uint64_t)&v10);
    if (a2)
    {
      if (a3)
      {
        uint64_t v7 = v11;
        uint64_t v8 = v12;
        *a2 = v11;
        *a3 = v8 - v7;
      }
    }
  }

  return v13;
}

BOOL sub_1001033A0(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v8 = sub_100103194( *(const void **)a5,  *(void *)a5 + *(unsigned __int8 *)(*(void *)a5 + 1LL) + 2LL,  a1,  (uint64_t)a1 + a2);
  if (v8)
  {
    *(_BYTE *)(a5 + 24) = 1;
    *(void *)(a5 + 8) = a3;
    *(void *)(a5 + 16) = a3 + a4;
  }

  return !v8;
}

uint64_t sub_100103400(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (!a4) {
    return 0LL;
  }
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v5 = result;
  uint64_t v6 = 0LL;
  if (result)
  {
    sub_100103260( a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1001033A0,  (uint64_t)&v5);
    if ((_BYTE)v8)
    {
      *a4 = sub_100103478(v6, v7);
      return 1LL;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100103478(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0LL;
  v6[0] = a1;
  v6[1] = a2;
  uint64_t v2 = v7;
  unint64_t v3 = (unsigned __int8 *)v6[0];
  uint64_t result = (uint64_t)*(char *)v6[0] >> 7;
  do
  {
    unsigned int v5 = *v3++;
    uint64_t result = v5 | (unint64_t)(result << 8);
    --v2;
  }

  while (v2);
  return result;
}

uint64_t sub_1001034E0(uint64_t result, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  uint64_t v8 = result;
  uint64_t v9 = 0LL;
  if (result)
  {
    sub_100103260( a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1001033A0,  (uint64_t)&v8);
    if ((_BYTE)v11 && (uint64_t v8 = v9, v9 = v10, v12 = 0LL, v13 = 0LL, (ccder_blob_decode_range(&v8, 4LL, &v12) & 1) != 0))
    {
      uint64_t result = 1LL;
      if (a4)
      {
        if (a5)
        {
          uint64_t v7 = (v13 - v12);
          *a4 = v12;
          *a5 = v7;
        }
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

double sub_10010357C(__int128 *a1, uint64_t a2, _DWORD *a3, void *a4)
{
  __int128 v11 = *a1;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  if (ccder_blob_decode_range(&v11, a2, &v9))
  {
    int v8 = v9;
    *a4 = v9;
    *a3 = v10 - v8;
    double result = *(double *)&v11;
    *a1 = v11;
  }

  return result;
}

uint64_t sub_1001035E8( uint64_t a1, uint64_t a2, unsigned int (*a3)(uint64_t, void, uint64_t), uint64_t a4)
{
  *(void *)&__int128 v12 = a1;
  *((void *)&v12 + 1) = a2;
  uint64_t v6 = ccder_blob_decode_range(&v12, 0x2000000000000010LL, &v12);
  if ((_DWORD)v6)
  {
    uint64_t v11 = 0LL;
    uint64_t v7 = v12;
    if (sub_100103698(&v12, &v10, &v11))
    {
      do
      {
        uint64_t v8 = v12 + v11;
        if (!a3(v7, v12 + v11 - v7, a4)) {
          break;
        }
        *(void *)&__int128 v12 = v8;
        uint64_t v7 = v8;
      }

      while ((sub_100103698(&v12, &v10, &v11) & 1) != 0);
    }
  }

  return v6;
}

uint64_t sub_100103698(__int128 *a1, void *a2, void *a3)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  __int128 v7 = *a1;
  uint64_t result = ccder_blob_decode_tag(&v7, &v9);
  if ((_DWORD)result)
  {
    uint64_t result = ccder_blob_decode_len(&v7, &v8);
    if ((_DWORD)result)
    {
      *a1 = v7;
      *a2 = v9;
      *a3 = v8;
      return 1LL;
    }
  }

  return result;
}

BOOL sub_100103714(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0LL;
  v4[0] = a1;
  v4[1] = a2;
  int v2 = ccder_blob_decode_tl(v4, 1LL, &v5);
  BOOL result = 0LL;
  if (v2)
  {
    if (v5 == 1) {
      return *(_BYTE *)v4[0] != 0;
    }
  }

  return result;
}

uint64_t sub_10010376C(void **a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    int v2 = *a1;
    if (!*a1) {
      break;
    }
    unint64_t v3 = (void *)*((void *)v2 + 1);
    *a1 = *(void **)v2;
    if (v3)
    {
      memset_s(v3, *((void *)v2 + 2), 0, *((void *)v2 + 2));
      free(*((void **)v2 + 1));
    }

    memset_s(v2, 0x18uLL, 0, 0x18uLL);
    free(v2);
  }

  return 0LL;
}

uint64_t sub_1001037E4(void *a1, unsigned __int8 *a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  int v2 = (void **)a1;
  uint64_t result = (uint64_t)sub_100103878(a1, a2);
  if (result)
  {
    uint64_t v4 = result;
    for (uint64_t i = *v2; i != (void *)result; uint64_t i = (void *)*i)
      int v2 = (void **)i;
    *int v2 = *(void **)result;
    uint64_t v6 = *(void **)(result + 8);
    if (v6)
    {
      memset_s(v6, *(void *)(v4 + 16), 0, *(void *)(v4 + 16));
      free(*(void **)(v4 + 8));
    }

    memset_s((void *)v4, 0x18uLL, 0, 0x18uLL);
    free((void *)v4);
    return 0LL;
  }

  return result;
}

void *sub_100103878(void *a1, unsigned __int8 *a2)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  int v2 = (void *)*a1;
  if (*a1)
  {
    do
    {
      uint64_t v4 = v2[1] + v2[2];
      uint64_t v6 = (const void *)v2[1];
      uint64_t v7 = v4;
      int v2 = (void *)*v2;
    }

    while (v2);
  }

  return v2;
}

uint64_t sub_1001038F8(void *a1, unsigned __int8 *a2, int a3, void *a4, void *a5)
{
  uint64_t v8 = sub_100103878(a1, a2);
  if (!v8) {
    return 0LL;
  }
  uint64_t v9 = 1LL;
  if (a4)
  {
    if (a5)
    {
      uint64_t v10 = v8[1] + v8[2];
      *(void *)&__int128 v17 = v8[1];
      *((void *)&v17 + 1) = v10;
      uint64_t v9 = ccder_blob_decode_sequence_tl(&v17, &v17);
      if ((_DWORD)v9)
      {
        if (sub_1001039D4(&v17, 12LL, 0LL, 0))
        {
          uint64_t v11 = v17;
          uint64_t v15 = 0LL;
          uint64_t v16 = 0LL;
          if (ccder_blob_decode_tag(&v17, &v15))
          {
            if (ccder_blob_decode_len(&v17, &v16))
            {
              uint64_t v13 = v16;
              uint64_t v12 = v17;
              if (a3)
              {
                uint64_t v13 = (v17 + v16 - v11);
                uint64_t v12 = v11;
              }

              *a4 = v12;
              *a5 = v13;
            }
          }
        }
      }
    }
  }

  return v9;
}

uint64_t sub_1001039D4(__int128 *a1, uint64_t a2, void *a3, int a4)
{
  __int128 v11 = *a1;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  if ((ccder_blob_decode_range(&v11, a2, &v9) & 1) == 0) {
    return 0LL;
  }
  __int128 v8 = v11;
  if (a3)
  {
    if ((_DWORD)v10 - (_DWORD)v9 == a4)
    {
      memcpy(a3, v9, (v10 - (_DWORD)v9));
      goto LABEL_5;
    }

    return 0LL;
  }

uint64_t sub_100103A60(void *a1, char *__s, void *a3, size_t a4)
{
  v12[0] = 12;
  v12[1] = strlen(__s);
  __int128 v8 = (unsigned __int8 *)sub_100103B88((uint64_t)v12, (uint64_t)&v14);
  uint64_t result = 0xFFFFFFFFLL;
  if (a3 && v8)
  {
    __memcpy_chk(v13, __s, v8[1], 127LL);
    __src = 0LL;
    uint64_t v11 = 0LL;
    if (sub_1001038F8(a1, v8, 0, &__src, &v11))
    {
      if (v11 == a4)
      {
        memcpy(a3, __src, a4);
        return 0LL;
      }

      else
      {
        return 4294967277LL;
      }
    }

    else
    {
      return 4294967293LL;
    }
  }

  return result;
}

uint64_t sub_100103B88(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  v4[1] = a2;
  unint64_t v5 = 0LL;
  v4[0] = a1;
  if ((ccder_blob_decode_tl(v4, 12LL, &v5) & 1) == 0)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s bad 1%s\n", "aks", "", "", "", "der_key_validate");
    return 0LL;
  }

  if (v5 >= 0x11)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s bad 2%s\n", "aks", "", "", "", "der_key_validate");
    return 0LL;
  }

  return v2;
}

uint64_t sub_100103C84(void *a1, unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v4 = sub_1001038F8(a1, a2, 1, &v7, &v8);
  uint64_t v5 = v4;
  if (a3 && (_DWORD)v4) {
    *a3 = sub_100103478(v7, v7 + v8);
  }
  return v5;
}

uint64_t sub_100103CDC(void *a1, unsigned __int8 *a2, BOOL *a3)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v4 = sub_1001038F8(a1, a2, 1, &v7, &v8);
  uint64_t v5 = v4;
  if (a3 && (_DWORD)v4) {
    *a3 = sub_100103714(v7, v7 + v8);
  }
  return v5;
}

uint64_t sub_100103D34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    return sub_100103260( a2,  a3,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100103D70,  a1)
  }
         - 1;
  else {
    return 4294967285LL;
  }
}

uint64_t sub_100103D70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = (unsigned __int8 *)sub_100103B88(a1, a1 + a2);
  if (v8)
  {
    uint64_t v9 = (uint64_t)v8;
  }

  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s fail%s\n", "aks", "", "", "", "_merge_dict_cb", ":", 647, "", 0, "", "");
  return 0LL;
}

uint64_t sub_100103E3C(void *a1, void *a2, size_t *a3)
{
  uint64_t v3 = 0xFFFFFFFFLL;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t v7 = (void *)*a1;
        if (*a1)
        {
          unint64_t v8 = 0LL;
          uint64_t v9 = 0LL;
          uint64_t v10 = 0LL;
          do
          {
            v10 += v7[2];
            uint64_t v7 = (void *)*v7;
            v9 -= 16LL;
            --v8;
          }

          while (v7);
          if (v8 >= 0xF000000000000001LL && (rsize_t v11 = -v9, (v12 = (char *)calloc(-v9, 1uLL)) != 0LL))
          {
            uint64_t v13 = v12;
            uint64_t v14 = (void *)*a1;
            if (*a1)
            {
              uint64_t v15 = v12;
              do
              {
                *(_OWORD *)uint64_t v15 = *(_OWORD *)(v14 + 1);
                v15 += 16;
                uint64_t v14 = (void *)*v14;
              }

              while (v14);
            }

            qsort(v12, -(uint64_t)v8, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_10010622C);
            size_t v16 = ccder_sizeof(0x2000000000000011LL, v10);
            __int128 v17 = (char *)calloc(v16, 1uLL);
            unsigned int v18 = v17;
            if (v17)
            {
              uint64_t v25 = v17;
              uint64_t v26 = &v17[v16];
              unint64_t v19 = v8 - 1;
              BOOL v20 = &v13[-v9 - 8];
              while (!__CFADD__(v19++, 1LL))
              {
                char v22 = v20 - 16;
                char v23 = ccder_blob_encode_body(&v25, *(void *)v20, *((void *)v20 - 1));
                BOOL v20 = v22;
                if ((v23 & 1) == 0) {
                  goto LABEL_16;
                }
              }

              if (!ccder_blob_encode_tl(&v25, 0x2000000000000011LL, v10) || v25 != v26)
              {
LABEL_16:
                uint64_t v3 = 0xFFFFFFFFLL;
                goto LABEL_20;
              }

              uint64_t v3 = 0LL;
              *a2 = v18;
              *a3 = v16;
              unsigned int v18 = 0LL;
            }

            else
            {
              uint64_t v3 = 4294967279LL;
            }

uint64_t sub_100104000(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2 && a3 && a4)
  {
    unint64_t v9 = sub_1001031FC(a3, a4);
    if (v9 <= a4 - a3)
    {
      unint64_t v10 = v9;
      size_t v11 = ccder_sizeof(0x2000000000000010LL, v9 + *(unsigned __int8 *)(a2 + 1) + 2);
      uint64_t v12 = (char *)calloc(v11, 1uLL);
      if (!v12) {
        return 4294967279LL;
      }
      uint64_t v13 = v12;
      uint64_t v14 = &v12[v11];
      char v22 = v12;
      char v23 = &v12[v11];
      if (ccder_blob_encode_body(&v22, v10, a3))
      {
        uint64_t v24 = v13;
        uint64_t v25 = v23;
        int v15 = ccder_blob_encode_body(&v24, *(unsigned __int8 *)(a2 + 1) + 2LL, a2);
        size_t v16 = v25;
        if (!v15) {
          size_t v16 = 0LL;
        }
        uint64_t v24 = v13;
        uint64_t v25 = v16;
        int v17 = ccder_blob_encode_tl(&v24, 0x2000000000000010LL, v14 - v16);
        unsigned int v18 = v25;
        if (!v17) {
          unsigned int v18 = 0LL;
        }
        if (v18 && v18 == v13)
        {
          BOOL v20 = calloc(0x18uLL, 1uLL);
          if (v20)
          {
            uint64_t v21 = v20;
            uint64_t result = 0LL;
            v21[1] = v13;
            v21[2] = v11;
            *uint64_t v21 = *a1;
            *a1 = v21;
            return result;
          }
        }
      }

      memset_s(v13, v11, 0, v11);
      free(v13);
    }

    return 0xFFFFFFFFLL;
  }

  return result;
}

uint64_t sub_10010416C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100104000(a1, a2, a3, a3 + *(unsigned __int8 *)(a3 + 1) + 2);
}

uint64_t sub_10010417C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2 && a3)
  {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 1);
    uint64_t v10 = ccder_sizeof(4LL, a4);
    size_t v11 = ccder_sizeof(0x2000000000000010LL, v9 + v10 + 2);
    uint64_t v12 = (char *)calloc(v11, 1uLL);
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = &v12[v11];
      char v22 = v12;
      char v23 = &v12[v11];
      uint64_t v24 = v13;
      uint64_t v25 = v23;
      int v15 = ccder_blob_encode_body(&v24, *(unsigned __int8 *)(a2 + 1) + 2LL, a2);
      size_t v16 = v25;
      if (!v15) {
        size_t v16 = 0LL;
      }
      uint64_t v24 = v13;
      uint64_t v25 = v16;
      int v17 = ccder_blob_encode_tl(&v24, 0x2000000000000010LL, v14 - v16);
      unsigned int v18 = v25;
      if (!v17) {
        unsigned int v18 = 0LL;
      }
      BOOL v19 = v18 && v18 == v13;
      if (v19 && (BOOL v20 = calloc(0x18uLL, 1uLL)) != 0LL)
      {
        uint64_t v21 = v20;
        uint64_t result = 0LL;
        v21[1] = v13;
        v21[2] = v11;
        *uint64_t v21 = *a1;
        *a1 = v21;
      }

      else
      {
LABEL_19:
        memset_s(v13, v11, 0, v11);
        free(v13);
        return 0xFFFFFFFFLL;
      }
    }

    else
    {
      return 4294967279LL;
    }
  }

  return result;
}

uint64_t sub_1001042E8(void *a1, char *__s, uint64_t a3, uint64_t a4)
{
  v10[0] = 12;
  v10[1] = strlen(__s);
  uint64_t v8 = sub_100103B88((uint64_t)v10, (uint64_t)&v12);
  uint64_t result = 4294967285LL;
  if (a3)
  {
    if (v8)
    {
      __memcpy_chk(v11, __s, *(unsigned __int8 *)(v8 + 1), 127LL);
      return sub_10010417C(a1, v8, a3, a4);
    }
  }

  return result;
}

uint64_t sub_1001043D4(void *a1, uint64_t a2, int a3)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 1);
    uint64_t v8 = ccder_sizeof(1LL, 1LL);
    size_t v9 = ccder_sizeof(0x2000000000000010LL, v7 + v8 + 2);
    uint64_t v10 = (char *)calloc(v9, 1uLL);
    if (v10)
    {
      size_t v11 = v10;
      uint64_t v12 = &v10[v9];
      uint64_t v21 = v10;
      char v22 = &v10[v9];
      char v20 = a3 << 31 >> 31;
      char v23 = v11;
      uint64_t v24 = v22;
      int v13 = ccder_blob_encode_body(&v23, *(unsigned __int8 *)(a2 + 1) + 2LL, a2);
      uint64_t v14 = v24;
      if (!v13) {
        uint64_t v14 = 0LL;
      }
      char v23 = v11;
      uint64_t v24 = v14;
      int v15 = ccder_blob_encode_tl(&v23, 0x2000000000000010LL, v12 - v14);
      size_t v16 = v24;
      if (!v15) {
        size_t v16 = 0LL;
      }
      BOOL v17 = v16 && v16 == v11;
      if (v17 && (unsigned int v18 = calloc(0x18uLL, 1uLL)) != 0LL)
      {
        BOOL v19 = v18;
        uint64_t result = 0LL;
        v19[1] = v11;
        v19[2] = v9;
        void *v19 = *a1;
        *a1 = v19;
      }

      else
      {
LABEL_18:
        memset_s(v11, v9, 0, v9);
        free(v11);
        return 0xFFFFFFFFLL;
      }
    }

    else
    {
      return 4294967279LL;
    }
  }

  return result;
}

uint64_t sub_100104538(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unint64_t v6 = HIBYTE(a3);
  if ((HIBYTE(a3) + 1) > 1u)
  {
    uint64_t v11 = 8LL;
  }

  else
  {
    uint64_t v7 = 9LL;
    uint64_t v8 = 48LL;
    uint64_t v9 = 1LL;
    while ((unint64_t)(v7 - 2) >= 2)
    {
      uint64_t v10 = a3 >> v8;
      --v7;
      v8 -= 8LL;
      if ((_DWORD)v6 != v10)
      {
        uint64_t v9 = v7 - 1;
        goto LABEL_8;
      }
    }

    uint64_t v7 = 2LL;
LABEL_8:
    else {
      uint64_t v11 = v9;
    }
  }

  uint64_t v30 = 0LL;
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    uint64_t v13 = *(unsigned __int8 *)(a2 + 1);
    uint64_t v14 = ccder_sizeof(2LL, v11);
    size_t v15 = ccder_sizeof(0x2000000000000010LL, v13 + v14 + 2);
    size_t v16 = (char *)calloc(v15, 1uLL);
    if (v16)
    {
      BOOL v17 = v16;
      uint64_t v18 = v11;
      do
      {
        *((_BYTE *)&v30 + v18 - 1) = v3;
        v3 >>= 8;
        --v18;
      }

      while (v18);
      uint64_t v26 = v16;
      uint64_t v27 = &v16[v15];
      uint64_t v28 = v17;
      __int128 v29 = v27;
      int v19 = ccder_blob_encode_body(&v28, *(unsigned __int8 *)(a2 + 1) + 2LL, a2);
      char v20 = v29;
      if (!v19) {
        char v20 = 0LL;
      }
      uint64_t v28 = v17;
      __int128 v29 = v20;
      int v21 = ccder_blob_encode_tl(&v28, 0x2000000000000010LL, &v17[v15] - v20);
      char v22 = v29;
      if (!v21) {
        char v22 = 0LL;
      }
      BOOL v23 = v22 && v22 == v17;
      if (v23 && (uint64_t v24 = calloc(0x18uLL, 1uLL)) != 0LL)
      {
        uint64_t v25 = v24;
        uint64_t result = 0LL;
        v25[1] = v17;
        v25[2] = v15;
        *uint64_t v25 = *a1;
        *a1 = v25;
      }

      else
      {
LABEL_30:
        memset_s(v17, v15, 0, v15);
        free(v17);
        return 0xFFFFFFFFLL;
      }
    }

    else
    {
      return 4294967279LL;
    }
  }

  return result;
}

uint64_t sub_10010474C(void *a1, uint64_t a2, char *__s)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2 && __s)
  {
    size_t v7 = strlen(__s);
    uint64_t v8 = *(unsigned __int8 *)(a2 + 1);
    uint64_t v9 = ccder_sizeof(12LL, v7);
    size_t v10 = ccder_sizeof(0x2000000000000010LL, v8 + v9 + 2);
    uint64_t v11 = (char *)calloc(v10, 1uLL);
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = &v11[v10];
      int v21 = v11;
      char v22 = &v11[v10];
      BOOL v23 = v12;
      uint64_t v24 = v22;
      int v14 = ccder_blob_encode_body(&v23, *(unsigned __int8 *)(a2 + 1) + 2LL, a2);
      size_t v15 = v24;
      if (!v14) {
        size_t v15 = 0LL;
      }
      BOOL v23 = v12;
      uint64_t v24 = v15;
      int v16 = ccder_blob_encode_tl(&v23, 0x2000000000000010LL, v13 - v15);
      BOOL v17 = v24;
      if (!v16) {
        BOOL v17 = 0LL;
      }
      BOOL v18 = v17 && v17 == v12;
      if (v18 && (int v19 = calloc(0x18uLL, 1uLL)) != 0LL)
      {
        char v20 = v19;
        uint64_t result = 0LL;
        v20[1] = v12;
        void v20[2] = v10;
        void *v20 = *a1;
        *a1 = v20;
      }

      else
      {
LABEL_19:
        memset_s(v12, v10, 0, v10);
        free(v12);
        return 0xFFFFFFFFLL;
      }
    }

    else
    {
      return 4294967279LL;
    }
  }

  return result;
}

uint64_t sub_1001048C0(void *a1, uint64_t a2, void *a3)
{
  uint64_t v3 = 0LL;
  __int128 __s = 0LL;
  rsize_t __n = 0LL;
  uint64_t v4 = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    size_t v6 = 0LL;
    if (a3)
    {
      if (sub_100103E3C(a3, &__s, &__n))
      {
        uint64_t v3 = 0LL;
        size_t v6 = 0LL;
      }

      else
      {
        size_t v6 = ccder_sizeof(0x2000000000000010LL, *(unsigned __int8 *)(a2 + 1) + __n + 2);
        uint64_t v8 = (char *)calloc(v6, 1uLL);
        uint64_t v3 = v8;
        if (v8)
        {
          int v16 = v8;
          BOOL v17 = &v8[v6];
          char v20 = v3;
          int v21 = v17;
          int v9 = ccder_blob_encode_body(&v20, *(unsigned __int8 *)(a2 + 1) + 2LL, a2);
          size_t v10 = v21;
          if (!v9) {
            size_t v10 = 0LL;
          }
          char v20 = v3;
          int v21 = v10;
          int v11 = ccder_blob_encode_tl(&v20, 0x2000000000000010LL, &v3[v6] - v10);
          uint64_t v12 = v21;
          if (!v11) {
            uint64_t v12 = 0LL;
          }
          BOOL v13 = v12 && v12 == v3;
          if (v13 && (int v14 = calloc(0x18uLL, 1uLL)) != 0LL)
          {
            uint64_t v4 = 0LL;
            v14[1] = v3;
            v14[2] = v6;
            void *v14 = *a1;
            *a1 = v14;
            uint64_t v3 = 0LL;
          }

          else
          {
LABEL_23:
            uint64_t v4 = 0xFFFFFFFFLL;
          }
        }

        else
        {
          uint64_t v4 = 4294967279LL;
        }
      }
    }
  }

  else
  {
    size_t v6 = 0LL;
  }

  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }

  if (v3)
  {
    memset_s(v3, v6, 0, v6);
    free(v3);
  }

  return v4;
}

BOOL sub_100104A5C(void *a1)
{
  return *a1 == 0LL;
}

uint64_t sub_100104A6C(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  else {
    uint64_t v1 = 0LL;
  }
  return ccder_sizeof(4LL, v1);
}

uint64_t sub_100104A84(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  else {
    uint64_t v1 = 0LL;
  }
  uint64_t v2 = ccder_sizeof(4LL, v1);
  return ccder_sizeof(4LL, 4LL) + v2;
}

uint64_t sub_100104AC8(__int128 *a1, void *a2)
{
  __int128 v6 = *a1;
  if (a2)
  {
    uint64_t result = ccder_blob_encode_body_tl(&v6, 4LL, 4LL, a2 + 2);
    if (!(_DWORD)result) {
      return result;
    }
    if ((ccder_blob_encode_body_tl(&v6, 4LL, a2[1], *a2) & 1) == 0) {
      return 0LL;
    }
  }

  else
  {
    int v5 = 0;
  }

  *a1 = v6;
  return 1LL;
}

uint64_t sub_100104B70(__int128 *a1, int a2, uint64_t a3)
{
  __int128 v6 = *(int **)a3;
  uint64_t v5 = *(void *)(a3 + 8);
  int v7 = *(_DWORD *)(a3 + 20);
  __int128 v11 = *a1;
  if (a2)
  {
    __int128 v14 = *a1;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    if ((ccder_blob_decode_range(&v14, 4LL, &v12) & 1) == 0) {
      return 0LL;
    }
    __int128 v6 = v12;
    unsigned int v8 = v13 - (_DWORD)v12;
    __int128 v11 = v14;
  }

  else
  {
    LODWORD(v14) = v5;
    uint64_t result = sub_100104C74(&v11, 4LL, v6, &v14);
    if (!(_DWORD)result) {
      return result;
    }
    unsigned int v8 = v14;
  }

  __int128 v14 = v11;
  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  if ((ccder_blob_decode_range(&v14, 4LL, &v12) & 1) == 0) {
    return 0LL;
  }
  __int128 v11 = v14;
  int v10 = *v12;
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v8;
  *(_DWORD *)(a3 + 16) = v10;
  *(_DWORD *)(a3 + 20) = v7;
  *a1 = v11;
  return 1LL;
}

uint64_t sub_100104C74(__int128 *a1, uint64_t a2, void *a3, _DWORD *a4)
{
  __int128 v12 = *a1;
  int v10 = 0LL;
  uint64_t v11 = 0LL;
  if ((ccder_blob_decode_range(&v12, a2, &v10) & 1) == 0) {
    return 0LL;
  }
  __int128 v9 = v12;
  if (!a3 || !a4) {
    goto LABEL_6;
  }
  int v7 = v11 - (_DWORD)v10;
  memcpy(a3, v10, (v11 - (_DWORD)v10));
  *a4 = v7;
LABEL_6:
  *a1 = v9;
  return 1LL;
}

uint64_t sub_100104D0C(__int128 *a1, void *a2)
{
  __int128 v4 = *a1;
  if (a2)
  {
    if ((ccder_blob_encode_body_tl(&v4, 4LL, a2[1], *a2) & 1) == 0) {
      return 0LL;
    }
  }

  else
  {
    uint64_t result = ccder_blob_encode_tl(&v4, 4LL, 0LL);
    if (!(_DWORD)result) {
      return result;
    }
  }

  *a1 = v4;
  return 1LL;
}

uint64_t sub_100104D78(__int128 *a1, int a2, uint64_t a3)
{
  __int128 v6 = *(void **)a3;
  uint64_t v5 = *(void *)(a3 + 8);
  __int128 v9 = *a1;
  if (a2)
  {
    __int128 v12 = *a1;
    int v10 = 0LL;
    uint64_t v11 = 0LL;
    uint64_t result = ccder_blob_decode_range(&v12, 4LL, &v10);
    if (!(_DWORD)result) {
      return result;
    }
    __int128 v6 = v10;
    unsigned int v8 = v11 - (_DWORD)v10;
    __int128 v9 = v12;
  }

  else
  {
    LODWORD(v12) = v5;
    uint64_t result = sub_100104C74(&v9, 4LL, v6, &v12);
    if (!(_DWORD)result) {
      return result;
    }
    unsigned int v8 = v12;
  }

  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v8;
  *a1 = v9;
  return 1LL;
}

uint64_t sub_100104E24(__int128 *a1, uint64_t a2)
{
  __int128 v4 = *a1;
  if (a2)
  {
    if ((ccder_blob_encode_body_tl(&v4, 4LL, 24LL, a2) & 1) == 0) {
      return 0LL;
    }
  }

  else
  {
    uint64_t result = ccder_blob_encode_tl(&v4, 4LL, 0LL);
    if (!(_DWORD)result) {
      return result;
    }
  }

  *a1 = v4;
  return 1LL;
}

uint64_t sub_100104E94(__int128 *a1, void *a2)
{
  __int128 v8 = *a1;
  __int128 v6 = 0LL;
  uint64_t v7 = 0LL;
  if ((ccder_blob_decode_range(&v8, 4LL, &v6) & 1) == 0) {
    return 0LL;
  }
  __int128 v5 = v8;
  memcpy(a2, v6, (v7 - (_DWORD)v6));
  *a1 = v5;
  return 1LL;
}

uint64_t sub_100104F14(unsigned int *a1, int a2, void *a3, _DWORD *a4)
{
  __int128 v12 = 0LL;
  if (sub_100104538(&v12, (uint64_t)off_1002E2E28, *a1)
    || sub_100104538(&v12, (uint64_t)off_1002E2E30, a1[1])
    || sub_100104538(&v12, (uint64_t)off_1002E2E38, *((void *)a1 + 1))
    || sub_100104538(&v12, (uint64_t)off_1002E2E48, a1[4])
    || sub_100104538(&v12, (uint64_t)off_1002E2E58, a1[5])
    || sub_100104538(&v12, (uint64_t)off_1002E2E70, *(void *)((char *)a1 + 26))
    || sub_100104538(&v12, (uint64_t)off_1002E2E78, *(void *)((char *)a1 + 34))
    || sub_100104538(&v12, (uint64_t)off_1002E2B80, *(int *)((char *)a1 + 42))
    || sub_100104538(&v12, (uint64_t)off_1002E2D48, *(unsigned int *)((char *)a1 + 46))
    || sub_10010417C(&v12, (uint64_t)off_1002E2F40, (uint64_t)a1 + 50, 16LL)
    || a2
    && (sub_100104538(&v12, (uint64_t)off_1002E2E60, *((char *)a1 + 66))
     || sub_100104538(&v12, (uint64_t)off_1002E2E68, *((char *)a1 + 67))
     || sub_100104538(&v12, (uint64_t)off_1002E3140, *(void *)(a1 + 17))
     || sub_100104538(&v12, (uint64_t)off_1002E3188, *(void *)(a1 + 19)))
    || (uint64_t v10 = 0LL, v11 = 0LL, sub_100103E3C(&v12, &v10, &v11)))
  {
    uint64_t v8 = 0xFFFFFFFFLL;
  }

  else
  {
    uint64_t v8 = 0LL;
    *a3 = v10;
    *a4 = v11;
  }

  sub_10010376C(&v12);
  return v8;
}

uint64_t sub_100105120(uint64_t a1, unsigned int a2, char *__s)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a2 && a1)
  {
    if (__s)
    {
      memset_s(__s, 0x54uLL, 0, 0x54uLL);
      bzero(v12, 0x228uLL);
      size_t v11 = off_1002E2E28;
      v12[4] = (uint64_t)off_1002E2E30;
      v12[9] = (uint64_t)off_1002E2E38;
      v12[14] = (uint64_t)off_1002E2E48;
      v12[19] = (uint64_t)off_1002E2E58;
      _BYTE v12[24] = (uint64_t)off_1002E2E60;
      v12[29] = (uint64_t)off_1002E2E68;
      v12[34] = (uint64_t)off_1002E2E70;
      v12[39] = (uint64_t)off_1002E2E78;
      v12[44] = (uint64_t)off_1002E2B80;
      v12[49] = (uint64_t)off_1002E2D48;
      v12[54] = (uint64_t)off_1002E2F40;
      __int128 v14 = off_1002E3140;
      BOOL v17 = off_1002E3188;
      __int128 v8 = xmmword_10024BAE0;
      uint64_t v9 = 0LL;
      uint64_t v10 = &v11;
      sub_100103260( a1,  a1 + a2,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100103098,  (uint64_t)&v8);
      *(_DWORD *)__int128 __s = sub_100103478(v12[0], v12[1]);
      *((_DWORD *)__s + 1) = sub_100103478(v12[5], v12[6]);
      *((void *)__s + 1) = sub_100103478(v12[10], v12[11]);
      *((_DWORD *)__s + 4) = sub_100103478(v12[15], v12[16]);
      *((_DWORD *)__s + 5) = sub_100103478(v12[20], v12[21]);
      *(void *)(__s + 26) = sub_100103478(v12[35], v12[36]);
      *(void *)(__s + 34) = sub_100103478(v12[40], v12[41]);
      *(_DWORD *)(__s + 42) = sub_100103478(v12[45], v12[46]);
      *(_DWORD *)(__s + 46) = sub_100103478(v12[50], v12[51]);
      sub_1001039D4(&v13, 4LL, __s + 50, 16);
      __s[66] = sub_100103478(v12[25], v12[26]);
      __s[67] = sub_100103478(v12[30], v12[31]);
      *(void *)(__s + 68) = sub_100103478(v15, v16);
      uint64_t v7 = sub_100103478(v18, v19);
      uint64_t result = 0LL;
      *(void *)(__s + 76) = v7;
    }
  }

  return result;
}

uint64_t sub_100105384(uint64_t a1, unsigned int a2, _BYTE *__s)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a2 && a1 && __s)
  {
    memset_s(__s, 0x10uLL, 0, 0x10uLL);
    __int128 v13 = 0u;
    __int128 v15 = 0u;
    uint64_t v16 = 0LL;
    __int128 v20 = 0u;
    __int128 v12 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v21 = 0u;
    uint64_t v22 = 0LL;
    size_t v11 = off_1002E2F38;
    __int128 v14 = (unint64_t)off_1002E2E48;
    BOOL v17 = off_1002E2D48;
    *(void *)&__int128 v20 = off_1002E2E28;
    __int128 v8 = xmmword_10024B9D0;
    uint64_t v9 = 0LL;
    uint64_t v10 = &v11;
    if (sub_100103260( a1,  a1 + a2,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100103098,  (uint64_t)&v8))
    {
      void *__s = sub_100103478(v12, *((uint64_t *)&v12 + 1));
      *((_DWORD *)__s + 1) = sub_100103478(*((uint64_t *)&v14 + 1), v15);
      *((_DWORD *)__s + 2) = sub_100103478(v18, *((uint64_t *)&v18 + 1));
      int v7 = sub_100103478(*((uint64_t *)&v20 + 1), v21);
      uint64_t result = 0LL;
      *((_DWORD *)__s + 3) = v7;
    }

    else
    {
      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

uint64_t sub_1001054E8(uint64_t a1, unsigned int a2, void *__s, void *a4, void *a5)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a2 && a1 && __s && a4)
  {
    uint64_t v10 = a1 + a2;
    memset_s(__s, 0x10uLL, 0, 0x10uLL);
    memset_s(a4, 0x10uLL, 0, 0x10uLL);
    uint64_t v18 = 0LL;
    __int128 v15 = 0u;
    v16[0] = 0u;
    __int128 v17 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v14 = off_1002E30E0;
    v16[1] = (unint64_t)off_1002E30E8;
    __int128 v19 = off_1002E2C20;
    __int128 v11 = xmmword_10024B9B0;
    uint64_t v12 = 0LL;
    __int128 v13 = &v14;
    sub_100103260( a1,  v10,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100103098,  (uint64_t)&v11);
    if (sub_1001039D4(v16, 4LL, __s, 16)
      && sub_1001039D4((__int128 *)((char *)&v17 + 8), 4LL, a4, 16))
    {
      return sub_1001039D4(&v21, 4LL, a5, 16) - 1;
    }

    else
    {
      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

uint64_t sub_100105664(uint64_t a1, uint64_t a2, char *__s)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a2 && a1 && __s)
  {
    uint64_t v6 = a1 + a2;
    memset_s(__s, 0x58uLL, 0, 0x58uLL);
    __int128 v32 = 0u;
    uint64_t v34 = 0LL;
    __int128 v35 = 0u;
    uint64_t v36 = 0LL;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    uint64_t v41 = 0LL;
    __int128 v42 = 0u;
    uint64_t v43 = 0LL;
    __int128 v45 = 0u;
    __int128 v46 = 0u;
    uint64_t v48 = 0LL;
    __int128 v49 = 0u;
    uint64_t v50 = 0LL;
    __int128 v52 = 0u;
    __int128 v53 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    __int128 v16 = 0u;
    uint64_t v17 = 0LL;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    uint64_t v23 = 0LL;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    uint64_t v29 = 0LL;
    __int128 v31 = 0u;
    uint64_t v12 = off_1002E2C10;
    __int128 v15 = (unint64_t)off_1002E2C20;
    uint64_t v18 = off_1002E2C00;
    *(void *)&__int128 v21 = off_1002E2BF8;
    uint64_t v24 = off_1002E2C18;
    *(void *)&__int128 v27 = off_1002E2EA0;
    uint64_t v30 = off_1002E2E48;
    uint64_t v33 = off_1002E2E50;
    int v37 = off_1002E2D48;
    __int128 v40 = off_1002E2E38;
    uint64_t v44 = off_1002E2E40;
    uint64_t v47 = off_1002E3000;
    uint64_t v51 = off_1002E3068;
    __int128 v9 = xmmword_10024BAF0;
    uint64_t v10 = 0LL;
    __int128 v11 = &v12;
    sub_100103260( a1,  v6,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100103098,  (uint64_t)&v9);
    *(_DWORD *)__int128 __s = sub_100103478(v13, *((uint64_t *)&v13 + 1));
    if (sub_1001039D4((__int128 *)((char *)&v16 + 8), 4LL, __s + 4, 16)
      && sub_1001039D4(&v20, 4LL, __s + 20, 16)
      && (*((_DWORD *)__s + 9) = sub_100103478(*((uint64_t *)&v21 + 1), v22),
          *((_DWORD *)__s + 10) = sub_100103478(v25, *((uint64_t *)&v25 + 1)),
          *((_DWORD *)__s + 11) = sub_100103478(v31, *((uint64_t *)&v31 + 1)),
          *((_DWORD *)__s + 12) = sub_100103478(v34, v35),
          *((_DWORD *)__s + 15) = sub_100103478(v38, *((uint64_t *)&v38 + 1)),
          *((_DWORD *)__s + 13) = sub_100103478(v41, v42),
          *((_DWORD *)__s + 14) = sub_100103478(v45, *((uint64_t *)&v45 + 1)),
          sub_100105948((__int128 *)((char *)&v28 + 8), 4LL, __s + 64, 8u)))
    {
      int v7 = *((_DWORD *)__s + 9);
      if ((v7 & 0x400) != 0)
      {
        *((void *)__s + 9) = sub_100103478(v48, v49);
        int v7 = *((_DWORD *)__s + 9);
      }

      if ((v7 & 0x800) != 0)
      {
        int v8 = sub_100103478(v52, *((uint64_t *)&v52 + 1));
        uint64_t result = 0LL;
        *((_DWORD *)__s + 20) = v8;
      }

      else
      {
        return 0LL;
      }
    }

    else
    {
      return 0xFFFFFFFFLL;
    }
  }

  return result;
}

uint64_t sub_100105948(__int128 *a1, uint64_t a2, void *a3, unsigned int a4)
{
  __int128 v13 = *a1;
  __int128 v11 = 0LL;
  uint64_t v12 = 0LL;
  uint64_t v7 = ccder_blob_decode_range(&v13, a2, &v11);
  if ((v7 & 1) != 0)
  {
    __int128 v10 = v13;
    if (a3)
    {
      else {
        size_t v8 = (v12 - (_DWORD)v11);
      }
      memcpy(a3, v11, v8);
    }

    *a1 = v10;
  }

  return v7;
}

uint64_t sub_1001059CC(int *a1, void *a2, _DWORD *a3)
{
  __int128 v11 = 0LL;
  uint64_t v3 = 4294967273LL;
  if (a2 && a3)
  {
    if (a1 && (int v7 = *a1) != 0)
    {
      if ((v7 & 1) != 0)
      {
        sub_1001042E8(&v11, "persona_uuid", (uint64_t)(a1 + 1), 16LL);
        int v7 = *a1;
      }

      if ((v7 & 2) != 0) {
        sub_1001042E8(&v11, "volume_uuid", (uint64_t)(a1 + 5), 16LL);
      }
      uint64_t v9 = 0LL;
      size_t v10 = 0LL;
      if (!sub_100103E3C(&v11, &v9, &v10))
      {
        uint64_t v3 = 0LL;
        *a2 = v9;
        *a3 = v10;
      }
    }

    else
    {
      uint64_t v3 = 0LL;
      *a2 = 0LL;
      *a3 = 0;
    }
  }

  sub_10010376C(&v11);
  return v3;
}

uint64_t sub_100105AA0(uint64_t a1, uint64_t a2, char *__s)
{
  size_t v8 = 0LL;
  uint64_t v3 = 0xFFFFFFFFLL;
  if (a2 && a1 && __s)
  {
    uint64_t v6 = a1 + a2;
    memset_s(__s, 0x24uLL, 0, 0x24uLL);
    if (sub_100103260( a1,  v6,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100103D70,  (uint64_t)&v8))
    {
      uint64_t v3 = 0LL;
    }

    else
    {
      uint64_t v3 = 0xFFFFFFFFLL;
    }
  }

  sub_10010376C(&v8);
  return v3;
}

uint64_t sub_100105B80(uint64_t a1, void *a2, _DWORD *a3)
{
  size_t v10 = 0LL;
  uint64_t v3 = 4294967273LL;
  if (a2 && a3)
  {
    if (a1)
    {
      if (!sub_1001042E8(&v10, "options", a1, 8LL)
        && !sub_1001042E8(&v10, "kc", a1 + 8, 4LL))
      {
        uint64_t v8 = 0LL;
        size_t v9 = 0LL;
        if (!sub_100103E3C(&v10, &v8, &v9))
        {
          uint64_t v3 = 0LL;
          *a2 = v8;
          *a3 = v9;
        }
      }
    }

    else
    {
      uint64_t v3 = 0LL;
      *a2 = 0LL;
      *a3 = 0;
    }
  }

  sub_10010376C(&v10);
  return v3;
}

uint64_t sub_100105C48(uint64_t a1, uint64_t a2, char *__s)
{
  uint64_t v8 = 0LL;
  uint64_t v3 = 0xFFFFFFFFLL;
  if (a2 && a1 && __s)
  {
    uint64_t v6 = a1 + a2;
    memset_s(__s, 0x10uLL, 0, 0x10uLL);
    if (sub_100103260( a1,  v6,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100103D70,  (uint64_t)&v8))
    {
      sub_100103A60(&v8, "options", __s, 8uLL);
      sub_100103A60(&v8, "kc", __s + 8, 4uLL);
      uint64_t v3 = 0LL;
    }

    else
    {
      uint64_t v3 = 0xFFFFFFFFLL;
    }
  }

  sub_10010376C(&v8);
  return v3;
}

uint64_t sub_100105D08(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0LL;
  if (a1 && a2)
  {
    uint64_t v9 = 0LL;
    uint64_t v10 = 0LL;
    int v7 = off_1002E2B78;
    uint64_t v8 = 0LL;
    if (off_1002E2B78
      && (sub_100103260( a1,  a1 + a2,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1001033A0,  (uint64_t)&v7),  (_BYTE)v10))
    {
      uint64_t v4 = 0LL;
      v11[0] = 6LL;
      v11[1] = off_1002E2CD0;
      void v11[2] = 10LL;
      v11[3] = off_1002E2CF0;
      v11[4] = 17LL;
      void v11[5] = off_1002E2D08;
      _OWORD v11[6] = 1LL;
      v11[7] = off_1002E2C98;
      v11[8] = 2LL;
      v11[9] = off_1002E2CB0;
      v11[10] = 3LL;
      v11[11] = off_1002E2CC0;
      v11[12] = 4LL;
      v11[13] = off_1002E2CC8;
      v11[14] = 5LL;
      v11[15] = off_1002E2CA8;
      v11[16] = 7LL;
      v11[17] = off_1002E2CD8;
      v11[18] = 8LL;
      v11[19] = off_1002E2CE0;
      v11[20] = 9LL;
      v11[21] = off_1002E2CE8;
      v11[22] = 11LL;
      v11[23] = off_1002E2CF8;
      _BYTE v11[24] = 12LL;
      v11[25] = off_1002E2D70;
      v11[26] = 13LL;
      v11[27] = off_1002E2D68;
      v11[28] = 14LL;
      v11[29] = off_1002E2D78;
      v11[30] = 15LL;
      v11[31] = off_1002E2D80;
      v11[32] = 16LL;
      v11[33] = off_1002E2D00;
      v11[34] = 18LL;
      v11[35] = off_1002E2D88;
      v11[36] = 19LL;
      v11[37] = off_1002E2D90;
      v11[38] = 20LL;
      v11[39] = off_1002E2D98;
      v11[40] = 21LL;
      v11[41] = off_1002E2DA0;
      v11[42] = 22LL;
      v11[43] = off_1002E2DA8;
      v11[44] = 23LL;
      v11[45] = off_1002E2D10;
      v11[46] = 24LL;
      v11[47] = off_1002E2D18;
      v11[48] = 25LL;
      v11[49] = off_1002E2D20;
      v11[50] = 26LL;
      v11[51] = off_1002E2D28;
      v11[52] = 27LL;
      v11[53] = off_1002E30C8;
      v11[54] = 28LL;
      v11[55] = off_1002E3190;
      v11[56] = 29LL;
      v11[57] = off_1002E3198;
      __int128 v5 = v8;
      uint64_t v6 = v9;
      while (!sub_100103194( (const void *)v11[v4 + 1],  v11[v4 + 1] + *(unsigned __int8 *)(v11[v4 + 1] + 1LL) + 2LL,  v5,  v6))
      {
        v4 += 2LL;
        if (v4 == 58) {
          return 0LL;
        }
      }

      return LODWORD(v11[v4]);
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1001060EC(__int128 *a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  __int128 v15 = *a1;
  __int128 v13 = 0LL;
  uint64_t v14 = 0LL;
  if ((ccder_blob_decode_range(&v15, a2, &v13) & 1) == 0) {
    return 0LL;
  }
  int v7 = v13;
  __int128 v12 = v15;
  if (a3 && a4)
  {
    int v8 = v14 - (_DWORD)v13;
    size_t v9 = (v14 - (_DWORD)v13);
    uint64_t result = (uint64_t)calloc(v9, 1uLL);
    if (!result) {
      return result;
    }
    uint64_t v11 = result;
    memcpy((void *)result, v7, v9);
    *a3 = v11;
    *a4 = v8;
  }

  *a1 = v12;
  return 1LL;
}

uint64_t sub_1001061A4(__int128 *a1, uint64_t a2, void *a3)
{
  uint64_t v9 = 0LL;
  if (a3) {
    *a3 = 0LL;
  }
  __int128 v8 = *a1;
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  uint64_t result = ccder_blob_decode_range(&v8, a2, &v6);
  if ((_DWORD)result)
  {
    if (ccn_read_uint(1LL, &v9, v7 - v6, v6))
    {
      return 0LL;
    }

    else
    {
      *a1 = v8;
      if (a3) {
        *a3 = v9;
      }
      return 1LL;
    }
  }

  return result;
}

uint64_t sub_10010622C(void *a1, void **a2)
{
  uint64_t v2 = *a1 + a1[1];
  v13[0] = *a1;
  v13[1] = v2;
  uint64_t v3 = (char *)a2[1] + (void)*a2;
  __s2[0] = *a2;
  __s2[1] = v3;
  unint64_t v17 = 0LL;
  unint64_t v15 = 0LL;
  unint64_t v16 = 0LL;
  unint64_t v14 = 0LL;
  uint64_t v4 = (const void *)v13[0];
  if (!v13[0]
    || !ccder_blob_decode_tag(__s2, &v15)
    || !ccder_blob_decode_len(__s2, &v14)
    || !__s2[0])
  {
    return 4294967293LL;
  }

  if (v17 > v15) {
    return 1LL;
  }
  if (v15 > v17) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v6 = v16;
  unint64_t v7 = v14;
  size_t v8 = v16 >= v14 ? v14 : v16;
  int v9 = memcmp(v4, __s2[0], v8);
  if (v9 > 0 || !v9 && v6 > v7) {
    return 1LL;
  }
  int v11 = v9 < 0 || v6 < v7;
  return (v11 << 31 >> 31);
}

uint64_t sub_100106354()
{
  sub_100102604( &off_100281110 != 0LL,  36,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return 4294967284LL;
}

uint64_t sub_100106460()
{
  sub_100102604( &off_100281110 != 0LL,  62,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_100102604( sub_1000F2C38 != 0LL,  63,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return sub_1000F2C38();
}

uint64_t sub_1001064BC(uint64_t a1, unsigned int a2)
{
  sub_100102604( &off_100281110 != 0LL,  70,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_100102604( sub_1000F2CA4 != 0LL,  71,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return sub_1000F2CA4(a1, a2);
}

uint64_t sub_100106530( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100102604( &off_100281110 != 0LL,  78,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_100102604(0LL, 79, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1001065EC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_100102604( &off_100281110 != 0LL,  86,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_100102604(0LL, 87, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_1001066B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_100102604( &off_100281110 != 0LL,  94,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_100102604(0LL, 95, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_100106774( unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  sub_100102604( &off_100281110 != 0LL,  106,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_100102604(0LL, 107, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_100106840( uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  sub_100102604( &off_100281110 != 0LL,  115,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_100102604(0LL, 116, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_10010690C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_100102604( &off_100281110 != 0LL,  123,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_100102604(0LL, 124, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1, a2, a3, a4, a5);
}

uint64_t sub_1001069A8()
{
  sub_100102604( &off_100281110 != 0LL,  131,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_100102604(0LL, 132, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0]();
}

uint64_t sub_100106A04(uint64_t a1, uint64_t a2)
{
  sub_100102604( &off_100281110 != 0LL,  139,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_100102604(0LL, 140, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1, a2);
}

uint64_t sub_100106A78(uint64_t a1)
{
  sub_100102604( &off_100281110 != 0LL,  147,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_100102604(0LL, 148, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1);
}

uint64_t sub_100106AE4(uint64_t a1)
{
  sub_100102604( &off_100281110 != 0LL,  155,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_100102604(0LL, 156, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1);
}

uint64_t sub_100106B50(uint64_t a1)
{
  sub_100102604( &off_100281110 != 0LL,  163,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_100102604(0LL, 164, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1);
}

uint64_t sub_100106BBC(uint64_t a1)
{
  sub_100102604( &off_100281110 != 0LL,  171,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_100102604(0LL, 172, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1);
}

uint64_t sub_100106C28(uint64_t a1)
{
  sub_100102604( &off_100281110 != 0LL,  179,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_100102604(0LL, 180, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1);
}

uint64_t sub_100106C94(uint64_t a1)
{
  sub_100102604( &off_100281110 != 0LL,  187,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_100102604(0LL, 188, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1);
}

uint64_t sub_100106D00(uint64_t a1)
{
  sub_100102604( &off_100281110 != 0LL,  195,  "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_100102604(0LL, 196, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return MEMORY[0](a1);
}

uint64_t sub_100106D6C(int a1)
{
  return -a1 & 3;
}

char *sub_100106D78(_DWORD *a1, const void *a2, int a3)
{
  uint64_t v3 = (char *)(a1 + 1);
  if (a2)
  {
    *a1 = a3;
    memcpy(a1 + 1, a2, a3);
    v3 += a3;
    int v5 = -a3;
    size_t v6 = -a3 & 3;
    if ((v5 & 3) != 0)
    {
      int __s = 0;
      memset_s(&__s, 4uLL, 0, 4uLL);
      memcpy(v3, &__s, v6);
      v3 += v6;
    }
  }

  else
  {
    *a1 = 0;
  }

  return v3;
}

char *sub_100106DFC( char **a1, unsigned int *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __int128 v21 = &a9;
  unsigned int v12 = 4;
  if (a3)
  {
    int v13 = a3;
    do
    {
      unint64_t v14 = v21;
      v21 += 2;
      v12 += *((_DWORD *)v14 + 2) + (-*((_DWORD *)v14 + 2) & 3) + 4;
      --v13;
    }

    while (v13);
  }

  uint64_t result = (char *)calloc(1uLL, v12);
  unint64_t v16 = result;
  __int128 v22 = (const void **)&a9;
  int v17 = 0;
  if (a3)
  {
    uint64_t v18 = 4LL;
    do
    {
      __int128 v19 = v22;
      __int128 v20 = *v22;
      v22 += 2;
      uint64_t result = sub_100106D78(&v16[v18], v20, *((_DWORD *)v19 + 2));
      uint64_t v18 = result - v16;
      ++v17;
    }

    while (a3 != v17);
  }

  *(_DWORD *)unint64_t v16 = v17;
  *a1 = v16;
  *a2 = v12;
  return result;
}

uint64_t sub_100106ED8( unsigned int *a1, unint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a2 < 4) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v9 = a3;
  if (*a1 >= a3)
  {
    __int128 v19 = (void **)&a9;
    if (!a3) {
      return 0LL;
    }
    int v11 = (char *)(a1 + 1);
    while (1)
    {
      unsigned int v12 = v19;
      int v13 = *v19;
      v19 += 2;
      unsigned int v16 = *(_DWORD *)v11;
      unint64_t v14 = v11 + 4;
      size_t v15 = v16;
      if (v16 > a2) {
        break;
      }
      if (v13)
      {
        int v17 = (size_t *)v12[1];
        if (*v17 < v15) {
          return 0xFFFFFFFFLL;
        }
        memcpy(v13, v14, v15);
        size_t *v17 = v15;
      }

      int v11 = &v14[v15];
      if (!--v9) {
        return 0LL;
      }
    }
  }

  return 0xFFFFFFFFLL;
}

BOOL sub_10010AC88(int a1)
{
  return a1 != -72499473;
}

double sub_10010BB34(void *a1)
{
  uint64_t v2 = a1[2];
  double result = *(double *)(*a1 + v2);
  a1[2] = v2 + 8;
  return result;
}

float sub_10010BB6C(void *a1)
{
  uint64_t v2 = a1[2];
  float result = *(float *)(*a1 + v2);
  a1[2] = v2 + 4;
  return result;
}

uint64_t sub_10010BBA8(uint64_t *a1)
{
  unint64_t v2 = 0LL;
  uint64_t v3 = 0LL;
  while (v2 <= 0x3F)
  {
    sub_10010BF44(a1, 1LL);
    uint64_t v4 = *a1;
    uint64_t v5 = a1[2];
    a1[2] = v5 + 1;
    LOBYTE(v4) = *(_BYTE *)(v4 + v5);
    v3 |= (v4 & 0x7F) << v2;
    v2 += 7LL;
    if ((v4 & 0x80) == 0) {
      return v3;
    }
  }

  sub_10010BDC0(-105LL, @"Invalid VarInt64");
  return 0LL;
}

uint64_t sub_10010BC2C(uint64_t *a1)
{
  return sub_10010BBA8(a1);
}

uint64_t sub_10010BC40(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t result = *(void *)(*a1 + v2);
  a1[2] = v2 + 8;
  return result;
}

uint64_t sub_10010BC78(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t result = *(unsigned int *)(*a1 + v2);
  a1[2] = v2 + 4;
  return result;
}

uint64_t sub_10010BCB0(uint64_t *a1)
{
  unsigned int v1 = sub_10010BBA8(a1);
  return -(v1 & 1) ^ (v1 >> 1);
}

unint64_t sub_10010BCD0(uint64_t *a1)
{
  unint64_t v1 = sub_10010BBA8(a1);
  return -(uint64_t)(v1 & 1) ^ (v1 >> 1);
}

BOOL sub_10010BCF0(uint64_t *a1)
{
  return sub_10010BBA8(a1) != 0;
}

uint64_t sub_10010BD0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a1 + 8) || v2 == *(void *)(a1 + 24))
  {
    uint64_t v3 = 0LL;
    *(_DWORD *)(a1 + memset(v11, 0, 32) = 0;
  }

  else
  {
    uint64_t v3 = sub_10010BBA8((uint64_t *)a1);
    *(_DWORD *)(a1 + memset(v11, 0, 32) = v3;
    if (!sub_10013B0E0(v3))
    {
      sub_10010BDC0(-103LL, @"Invalid wireformat in tag.");
      uint64_t v3 = *(unsigned int *)(a1 + 32);
    }

    if (!sub_10013B0D8(v3))
    {
      sub_10010BDC0(-103LL, @"A zero field number on the wire is invalid.");
      return *(unsigned int *)(a1 + 32);
    }
  }

  return v3;
}

BOOL sub_10010BD9C(void *a1)
{
  uint64_t v1 = a1[2];
  return v1 == a1[1] || v1 == a1[3];
}

id sub_10010BDC0(uint64_t a1, void *a2)
{
  if ([a2 length])
  {
    size_t v8 = @"Reason";
    unsigned int v9 = a2;
    uint64_t v4 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v9,  &v8,  1LL);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  size_t v6 = @"TransparencyGPBCodedInputStreamUnderlyingErrorKey";
  unint64_t v7 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"TransparencyGPBCodedInputStreamErrorDomain",  a1,  v4);
  return -[NSException raise]( +[NSException exceptionWithName:reason:userInfo:]( &OBJC_CLASS___NSException,  "exceptionWithName:reason:userInfo:",  @"TransparencyGPBCodedInputStreamException",  a2,  +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v7,  &v6,  1LL)),  "raise");
}

CFStringRef sub_10010BEB4(uint64_t *a1)
{
  int v2 = sub_10010BBA8(a1);
  if (!v2) {
    return &stru_10028E390;
  }
  sub_10010BF44(a1, v2);
  uint64_t result = -[NSString initWithBytes:length:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytes:length:encoding:",  *a1 + a1[2],  v2,  4LL);
  a1[2] += v2;
  if (!result)
  {
    sub_10010BDC0(-104LL, 0LL);
    return 0LL;
  }

  return result;
}

void *sub_10010BF44(void *result, uint64_t a2)
{
  int v2 = result;
  unint64_t v3 = result[2] + a2;
  if (v3 > result[1]) {
    uint64_t result = sub_10010BDC0(-100LL, 0LL);
  }
  unint64_t v4 = v2[3];
  if (v3 > v4)
  {
    void v2[2] = v4;
    return sub_10010BDC0(-101LL, 0LL);
  }

  return result;
}

NSData *sub_10010BFA0(uint64_t *a1)
{
  unsigned int v2 = sub_10010BBA8(a1);
  if ((v2 & 0x80000000) != 0) {
    return 0LL;
  }
  sub_10010BF44(a1, v2);
  uint64_t result = -[NSData initWithBytes:length:](objc_alloc(&OBJC_CLASS___NSData), "initWithBytes:length:", *a1 + a1[2], v2);
  a1[2] += v2;
  return result;
}

NSData *sub_10010C014(uint64_t *a1)
{
  unsigned int v2 = sub_10010BBA8(a1);
  if ((v2 & 0x80000000) != 0) {
    return 0LL;
  }
  sub_10010BF44(a1, v2);
  uint64_t result = -[NSData initWithBytesNoCopy:length:freeWhenDone:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBytesNoCopy:length:freeWhenDone:",  *a1 + a1[2],  v2,  0LL);
  a1[2] += v2;
  return result;
}

unint64_t sub_10010C08C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 24);
  unint64_t v4 = *(void *)(a1 + 16) + a2;
  if (v4 > v3) {
    sub_10010BDC0(-102LL, 0LL);
  }
  *(void *)(a1 + 24) = v4;
  return v3;
}

uint64_t sub_10010C0D4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t sub_10010C0DC(uint64_t a1)
{
  return *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

_DWORD *sub_10010C0E8(_DWORD *result, int a2)
{
  if (result[8] != a2) {
    return sub_10010BDC0(-103LL, @"Unexpected tag read");
  }
  return result;
}

uint64_t *sub_10010CA90(uint64_t *result, uint64_t a2)
{
  unint64_t v3 = result;
  uint64_t v4 = result[2];
  if (v4 == result[1])
  {
    uint64_t result = sub_10010F4CC(result);
    uint64_t v4 = v3[2];
  }

  uint64_t v5 = *v3;
  v3[2] = v4 + 1;
  *(_BYTE *)(v5 + v4) = a2;
  uint64_t v6 = v3[2];
  if (v6 == v3[1])
  {
    uint64_t result = sub_10010F4CC(v3);
    uint64_t v6 = v3[2];
  }

  uint64_t v7 = *v3;
  v3[2] = v6 + 1;
  *(_BYTE *)(v7 + v6) = BYTE1(a2);
  uint64_t v8 = v3[2];
  if (v8 == v3[1])
  {
    uint64_t result = sub_10010F4CC(v3);
    uint64_t v8 = v3[2];
  }

  uint64_t v9 = *v3;
  v3[2] = v8 + 1;
  *(_BYTE *)(v9 + v8) = BYTE2(a2);
  uint64_t v10 = v3[2];
  if (v10 == v3[1])
  {
    uint64_t result = sub_10010F4CC(v3);
    uint64_t v10 = v3[2];
  }

  uint64_t v11 = *v3;
  v3[2] = v10 + 1;
  *(_BYTE *)(v11 + v10) = BYTE3(a2);
  uint64_t v12 = v3[2];
  if (v12 == v3[1])
  {
    uint64_t result = sub_10010F4CC(v3);
    uint64_t v12 = v3[2];
  }

  uint64_t v13 = *v3;
  v3[2] = v12 + 1;
  *(_BYTE *)(v13 + v12) = BYTE4(a2);
  uint64_t v14 = v3[2];
  if (v14 == v3[1])
  {
    uint64_t result = sub_10010F4CC(v3);
    uint64_t v14 = v3[2];
  }

  uint64_t v15 = *v3;
  v3[2] = v14 + 1;
  *(_BYTE *)(v15 + v14) = BYTE5(a2);
  uint64_t v16 = v3[2];
  if (v16 == v3[1])
  {
    uint64_t result = sub_10010F4CC(v3);
    uint64_t v16 = v3[2];
  }

  uint64_t v17 = *v3;
  v3[2] = v16 + 1;
  *(_BYTE *)(v17 + v16) = BYTE6(a2);
  uint64_t v18 = v3[2];
  if (v18 == v3[1])
  {
    uint64_t result = sub_10010F4CC(v3);
    uint64_t v18 = v3[2];
  }

  uint64_t v19 = *v3;
  v3[2] = v18 + 1;
  *(_BYTE *)(v19 + v18) = HIBYTE(a2);
  return result;
}

uint64_t *sub_10010CC60(uint64_t *result, int a2)
{
  unint64_t v3 = result;
  uint64_t v4 = result[2];
  if (v4 == result[1])
  {
    uint64_t result = sub_10010F4CC(result);
    uint64_t v4 = v3[2];
  }

  uint64_t v5 = *v3;
  v3[2] = v4 + 1;
  *(_BYTE *)(v5 + v4) = a2;
  uint64_t v6 = v3[2];
  if (v6 == v3[1])
  {
    uint64_t result = sub_10010F4CC(v3);
    uint64_t v6 = v3[2];
  }

  uint64_t v7 = *v3;
  v3[2] = v6 + 1;
  *(_BYTE *)(v7 + v6) = BYTE1(a2);
  uint64_t v8 = v3[2];
  if (v8 == v3[1])
  {
    uint64_t result = sub_10010F4CC(v3);
    uint64_t v8 = v3[2];
  }

  uint64_t v9 = *v3;
  v3[2] = v8 + 1;
  *(_BYTE *)(v9 + v8) = BYTE2(a2);
  uint64_t v10 = v3[2];
  if (v10 == v3[1])
  {
    uint64_t result = sub_10010F4CC(v3);
    uint64_t v10 = v3[2];
  }

  uint64_t v11 = *v3;
  v3[2] = v10 + 1;
  *(_BYTE *)(v11 + v10) = HIBYTE(a2);
  return result;
}

uint64_t *sub_10010CD80(uint64_t *result, unint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v3 = result;
  if (a2 >= 0x80)
  {
    do
    {
      uint64_t v5 = v3[2];
      if (v5 == v3[1])
      {
        uint64_t result = sub_10010F4CC(v3);
        uint64_t v5 = v3[2];
      }

      uint64_t v6 = *v3;
      v3[2] = v5 + 1;
      *(_BYTE *)(v6 + sub_1000E8840(v2, v3, v1, v5) = v2 | 0x80;
      unint64_t v4 = v2 >> 7;
      BOOL v7 = v2 >= 0x4000;
      v2 >>= 7;
    }

    while (v7);
  }

  else
  {
    LOBYTE(v4) = a2;
  }

  uint64_t v8 = v3[2];
  if (v8 == v3[1])
  {
    uint64_t result = sub_10010F4CC(v3);
    uint64_t v8 = v3[2];
  }

  uint64_t v9 = *v3;
  v3[2] = v8 + 1;
  *(_BYTE *)(v9 + v8) = v4;
  return result;
}

uint64_t *sub_10010CEB4(uint64_t *result, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    return sub_10010CD80(result, (int)a2);
  }
  else {
    return sub_10010D188(result, a2);
  }
}

uint64_t *sub_10010D188(uint64_t *result, unsigned int a2)
{
  unsigned int v2 = a2;
  unint64_t v3 = result;
  if (a2 >= 0x80)
  {
    do
    {
      uint64_t v5 = v3[2];
      if (v5 == v3[1])
      {
        uint64_t result = sub_10010F4CC(v3);
        uint64_t v5 = v3[2];
      }

      uint64_t v6 = *v3;
      v3[2] = v5 + 1;
      *(_BYTE *)(v6 + sub_1000E8840(v2, v3, v1, v5) = v2 | 0x80;
      unsigned int v4 = v2 >> 7;
      BOOL v7 = v2 >= 0x4000;
      v2 >>= 7;
    }

    while (v7);
  }

  else
  {
    LOBYTE(v4) = a2;
  }

  uint64_t v8 = v3[2];
  if (v8 == v3[1])
  {
    uint64_t result = sub_10010F4CC(v3);
    uint64_t v8 = v3[2];
  }

  uint64_t v9 = *v3;
  v3[2] = v8 + 1;
  *(_BYTE *)(v9 + v8) = v4;
  return result;
}

uint64_t *sub_10010D4E4(uint64_t *a1, int a2, unsigned int a3)
{
  unsigned int v5 = sub_10013B0C8(a2, 0);
  sub_10010D188(a1, v5);
  return sub_10010D188(a1, a3);
}

void sub_10010D7F4(_Unwind_Exception *a1)
{
}

uint64_t sub_10010D80C(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) += 8LL;
  return result;
}

uint64_t sub_10010D824()
{
  return 8LL;
}

id sub_10010D82C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeDoubleNoTag:");
}

id sub_10010D834(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeDouble:value:", *(unsigned int *)(a1 + 40));
}

void sub_10010D988(_Unwind_Exception *a1)
{
}

uint64_t sub_10010D9A0(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) += 4LL;
  return result;
}

uint64_t sub_10010D9B8()
{
  return 4LL;
}

id sub_10010D9C0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeFloatNoTag:");
}

id sub_10010D9C8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "writeFloat:value:", *(unsigned int *)(a1 + 40));
}

void sub_10010DB1C(_Unwind_Exception *a1)
{
}

uint64_t sub_10010DB34(uint64_t a1, unint64_t a2)
{
  uint64_t result = sub_10010F74C(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += result;
  return result;
}

id sub_10010DB70(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeUInt64NoTag:a2];
}

id sub_10010DB7C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeUInt64:*(unsigned int *)(a1 + 40) value:a2];
}

void sub_10010DCD4(_Unwind_Exception *a1)
{
}

uint64_t sub_10010DCEC(uint64_t a1, unint64_t a2)
{
  uint64_t result = sub_10010F74C(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += result;
  return result;
}

id sub_10010DD24(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeInt64NoTag:a2];
}

id sub_10010DD30(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) writeInt64:*(unsigned int *)(a1 + 40) value:a2];
}

void sub_10010DE88(_Unwind_Exception *a1)
{
}

uint64_t sub_10010DEA0(uint64_t result, unsigned int a2)
{
  uint64_t v2 = 10LL;
  uint64_t v3 = 1LL;
  uint64_t v4 = 2LL;
  uint64_t v5 = 3LL;
  uint64_t v6 = 4LL;
  if (a2 >> 28) {
    uint64_t v6 = 5LL;
  }
  if (a2 >= 0x200000) {
    uint64_t v5 = v6;
  }
  if (a2 >= 0x4000) {
    uint64_t v4 = v5;
  }
  if (a2 >= 0x80) {
    uint64_t v3 = v4;
  }
  if ((a2 & 0x80000000) == 0) {
    uint64_t v2 = v3;
  }
  *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) += v2;
  return result;
}

uint64_t sub_10010DEF8(unsigned int a1)
{
  uint64_t v1 = 1LL;
  uint64_t v2 = 2LL;
  uint64_t v3 = 3LL;
  uint64_t v4 = 4LL;
  if (a1 >> 28) {
    uint64_t v4 = 5LL;
  }
  if (a1 >= 0x200000) {
    uint64_t v3 = v4;
  }
  if (a1 >= 0x4000) {
    uint64_t v2 = v3;
  }
  if (a1 >= 0x80) {
    uint64_t v1 = v2;
  }
  if ((a1 & 0x80000000) == 0) {
    return v1;
  }
  else {
    return 10LL;
  }
}

id sub_10010DF3C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeInt32NoTag:a2];
}

id sub_10010DF48(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) writeInt32:*(unsigned int *)(a1 + 40) value:a2];
}

void sub_10010E0A0(_Unwind_Exception *a1)
{
}

uint64_t sub_10010E0B8(uint64_t result, unsigned int a2)
{
  uint64_t v2 = 1LL;
  uint64_t v3 = 2LL;
  uint64_t v4 = 3LL;
  uint64_t v5 = 4LL;
  if (a2 >> 28) {
    uint64_t v5 = 5LL;
  }
  if (a2 >= 0x200000) {
    uint64_t v4 = v5;
  }
  if (a2 >= 0x4000) {
    uint64_t v3 = v4;
  }
  if (a2 >= 0x80) {
    uint64_t v2 = v3;
  }
  *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) += v2;
  return result;
}

uint64_t sub_10010E104(unsigned int a1)
{
  uint64_t v1 = 2LL;
  uint64_t v2 = 3LL;
  uint64_t v3 = 4LL;
  if (a1 >> 28) {
    uint64_t v3 = 5LL;
  }
  if (a1 >= 0x200000) {
    uint64_t v2 = v3;
  }
  if (a1 >= 0x4000) {
    uint64_t v1 = v2;
  }
  if (a1 >= 0x80) {
    return v1;
  }
  else {
    return 1LL;
  }
}

id sub_10010E13C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeUInt32NoTag:a2];
}

id sub_10010E148(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeUInt32:*(unsigned int *)(a1 + 40) value:a2];
}

void sub_10010E2A0(_Unwind_Exception *a1)
{
}

uint64_t sub_10010E2B8(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) += 8LL;
  return result;
}

id sub_10010E2D0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeFixed64NoTag:a2];
}

id sub_10010E2DC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeFixed64:*(unsigned int *)(a1 + 40) value:a2];
}

void sub_10010E434(_Unwind_Exception *a1)
{
}

uint64_t sub_10010E44C(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) += 4LL;
  return result;
}

id sub_10010E464(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeFixed32NoTag:a2];
}

id sub_10010E470(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeFixed32:*(unsigned int *)(a1 + 40) value:a2];
}

void sub_10010E5C8(_Unwind_Exception *a1)
{
}

uint64_t sub_10010E5E0(uint64_t result, int a2)
{
  unsigned int v2 = (2 * a2) ^ (a2 >> 31);
  uint64_t v3 = 2LL;
  uint64_t v4 = 3LL;
  uint64_t v5 = 4LL;
  if (v2 >> 28) {
    uint64_t v5 = 5LL;
  }
  if (v2 >= 0x200000) {
    uint64_t v4 = v5;
  }
  if (v2 >= 0x4000) {
    uint64_t v3 = v4;
  }
  if (v2 >= 0x80) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = 1LL;
  }
  *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) += v6;
  return result;
}

uint64_t sub_10010E634(int a1)
{
  unsigned int v1 = (2 * a1) ^ (a1 >> 31);
  uint64_t v2 = 2LL;
  uint64_t v3 = 3LL;
  uint64_t v4 = 4LL;
  if (v1 >> 28) {
    uint64_t v4 = 5LL;
  }
  if (v1 >= 0x200000) {
    uint64_t v3 = v4;
  }
  if (v1 >= 0x4000) {
    uint64_t v2 = v3;
  }
  if (v1 >= 0x80) {
    return v2;
  }
  else {
    return 1LL;
  }
}

id sub_10010E674(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeSInt32NoTag:a2];
}

id sub_10010E680(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) writeSInt32:*(unsigned int *)(a1 + 40) value:a2];
}

void sub_10010E7D8(_Unwind_Exception *a1)
{
}

uint64_t sub_10010E7F0(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10010F74C((2 * a2) ^ (a2 >> 63));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += result;
  return result;
}

uint64_t sub_10010E82C(uint64_t a1)
{
  return sub_10010F74C((2 * a1) ^ (a1 >> 63));
}

id sub_10010E838(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeSInt64NoTag:a2];
}

id sub_10010E844(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) writeSInt64:*(unsigned int *)(a1 + 40) value:a2];
}

void sub_10010E99C(_Unwind_Exception *a1)
{
}

uint64_t sub_10010E9B4(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) += 8LL;
  return result;
}

id sub_10010E9CC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeSFixed64NoTag:a2];
}

id sub_10010E9D8(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) writeSFixed64:*(unsigned int *)(a1 + 40) value:a2];
}

void sub_10010EB30(_Unwind_Exception *a1)
{
}

uint64_t sub_10010EB48(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) += 4LL;
  return result;
}

id sub_10010EB60(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeSFixed32NoTag:a2];
}

id sub_10010EB6C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) writeSFixed32:*(unsigned int *)(a1 + 40) value:a2];
}

void sub_10010ECC4(_Unwind_Exception *a1)
{
}

uint64_t sub_10010ECDC(uint64_t result)
{
  return result;
}

id sub_10010ECF4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeBoolNoTag:a2];
}

id sub_10010ED00(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeBool:*(unsigned int *)(a1 + 40) value:a2];
}

void sub_10010EE58(_Unwind_Exception *a1)
{
}

uint64_t sub_10010EE70(uint64_t result, unsigned int a2)
{
  uint64_t v2 = 10LL;
  uint64_t v3 = 1LL;
  uint64_t v4 = 2LL;
  uint64_t v5 = 3LL;
  uint64_t v6 = 4LL;
  if (a2 >> 28) {
    uint64_t v6 = 5LL;
  }
  if (a2 >= 0x200000) {
    uint64_t v5 = v6;
  }
  if (a2 >= 0x4000) {
    uint64_t v4 = v5;
  }
  if (a2 >= 0x80) {
    uint64_t v3 = v4;
  }
  if ((a2 & 0x80000000) == 0) {
    uint64_t v2 = v3;
  }
  *(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) += v2;
  return result;
}

id sub_10010EEC8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeEnumNoTag:a2];
}

id sub_10010EED4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeEnum:*(unsigned int *)(a1 + 40) value:a2];
}

void *sub_10010F4CC(void *result)
{
  uint64_t v1 = result;
  if (!result[3]) {
    uint64_t result = +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  @"OutOfSpace",  &stru_10028E390);
  }
  if (v1[2])
  {
    uint64_t result = objc_msgSend((id)v1[3], "write:maxLength:", *v1);
    if (result != (void *)v1[2]) {
      uint64_t result = +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  @"WriteFailed",  &stru_10028E390);
    }
    v1[2] = 0LL;
  }

  return result;
}

uint64_t sub_10010F74C(unint64_t a1)
{
  if (a1 < 0x80) {
    return 1LL;
  }
  if (a1 < 0x4000) {
    return 2LL;
  }
  if (a1 < 0x200000) {
    return 3LL;
  }
  if (!(a1 >> 28)) {
    return 4LL;
  }
  if (!(a1 >> 35)) {
    return 5LL;
  }
  if (!(a1 >> 42)) {
    return 6LL;
  }
  if (!(a1 >> 49)) {
    return 7LL;
  }
  uint64_t v2 = 9LL;
  if ((a1 & 0x8000000000000000LL) != 0LL) {
    uint64_t v2 = 10LL;
  }
  if (HIBYTE(a1)) {
    return v2;
  }
  else {
    return 8LL;
  }
}

char *sub_10010F7DC(void *a1)
{
  uint64_t v1 = (char *)[a1 lengthOfBytesUsingEncoding:4];
  uint64_t v2 = 1LL;
  uint64_t v3 = 2LL;
  uint64_t v4 = 3LL;
  uint64_t v5 = 4LL;
  return &v1[v2];
}

char *sub_10010F830(void *a1)
{
  uint64_t v1 = (char *)[a1 serializedSize];
  uint64_t v2 = 1LL;
  uint64_t v3 = 2LL;
  uint64_t v4 = 3LL;
  uint64_t v5 = 4LL;
  return &v1[v2];
}

char *sub_10010F87C(void *a1)
{
  uint64_t v1 = (char *)[a1 length];
  uint64_t v2 = 1LL;
  uint64_t v3 = 2LL;
  uint64_t v4 = 3LL;
  uint64_t v5 = 4LL;
  return &v1[v2];
}

uint64_t sub_10010F8C8(int a1)
{
  unsigned int v1 = sub_10013B0C8(a1, 0);
  uint64_t v2 = 10LL;
  uint64_t v3 = 11LL;
  uint64_t v4 = 12LL;
  if (v1 >> 28) {
    uint64_t v4 = 13LL;
  }
  if (v1 >= 0x200000) {
    uint64_t v3 = v4;
  }
  if (v1 >= 0x4000) {
    uint64_t v2 = v3;
  }
  if (v1 >= 0x80) {
    return v2;
  }
  else {
    return 9LL;
  }
}

uint64_t sub_10010F914(int a1)
{
  unsigned int v1 = sub_10013B0C8(a1, 0);
  uint64_t v2 = 2LL;
  uint64_t v3 = 3LL;
  uint64_t v4 = 4LL;
  if (v1 >> 28) {
    uint64_t v4 = 5LL;
  }
  if (v1 >= 0x200000) {
    uint64_t v3 = v4;
  }
  if (v1 >= 0x4000) {
    uint64_t v2 = v3;
  }
  if (v1 >= 0x80) {
    return v2;
  }
  else {
    return 1LL;
  }
}

uint64_t sub_10010F960(int a1)
{
  unsigned int v1 = sub_10013B0C8(a1, 0);
  uint64_t v2 = 6LL;
  uint64_t v3 = 7LL;
  uint64_t v4 = 8LL;
  if (v1 >> 28) {
    uint64_t v4 = 9LL;
  }
  if (v1 >= 0x200000) {
    uint64_t v3 = v4;
  }
  if (v1 >= 0x4000) {
    uint64_t v2 = v3;
  }
  if (v1 >= 0x80) {
    return v2;
  }
  else {
    return 5LL;
  }
}

uint64_t sub_10010F9AC(int a1, unint64_t a2)
{
  unsigned int v3 = sub_10013B0C8(a1, 0);
  uint64_t v4 = 2LL;
  uint64_t v5 = 3LL;
  uint64_t v6 = 4LL;
  if (v3 >> 28) {
    uint64_t v6 = 5LL;
  }
  if (v3 >= 0x200000) {
    uint64_t v5 = v6;
  }
  if (v3 >= 0x4000) {
    uint64_t v4 = v5;
  }
  if (v3 >= 0x80) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = 1LL;
  }
  return sub_10010F74C(a2) + v7;
}

uint64_t sub_10010FA10(int a1, unsigned int a2)
{
  unsigned int v3 = sub_10013B0C8(a1, 0);
  uint64_t v4 = 1LL;
  uint64_t v5 = 2LL;
  uint64_t v6 = 3LL;
  uint64_t v7 = 4LL;
  if (v3 >> 28) {
    uint64_t v7 = 5LL;
  }
  if (v3 >= 0x200000) {
    uint64_t v6 = v7;
  }
  if (v3 >= 0x4000) {
    uint64_t v5 = v6;
  }
  if (v3 >= 0x80) {
    uint64_t v4 = v5;
  }
  uint64_t v8 = 10LL;
  uint64_t v9 = 1LL;
  uint64_t v10 = 2LL;
  uint64_t v11 = 3LL;
  uint64_t v12 = 4LL;
  if (a2 >> 28) {
    uint64_t v12 = 5LL;
  }
  if (a2 >= 0x200000) {
    uint64_t v11 = v12;
  }
  if (a2 >= 0x4000) {
    uint64_t v10 = v11;
  }
  if (a2 >= 0x80) {
    uint64_t v9 = v10;
  }
  if ((a2 & 0x80000000) == 0) {
    uint64_t v8 = v9;
  }
  return v8 + v4;
}

uint64_t sub_10010FAAC(int a1)
{
  unsigned int v1 = sub_10013B0C8(a1, 0);
  uint64_t v2 = 3LL;
  uint64_t v3 = 4LL;
  uint64_t v4 = 5LL;
  if (v1 >> 28) {
    uint64_t v4 = 6LL;
  }
  if (v1 >= 0x200000) {
    uint64_t v3 = v4;
  }
  if (v1 >= 0x4000) {
    uint64_t v2 = v3;
  }
  if (v1 >= 0x80) {
    return v2;
  }
  else {
    return 2LL;
  }
}

char *sub_10010FAF8(int a1, void *a2)
{
  unsigned int v3 = sub_10013B0C8(a1, 0);
  uint64_t v4 = 2LL;
  uint64_t v5 = 3LL;
  uint64_t v6 = 4LL;
  if (v3 >> 28) {
    uint64_t v6 = 5LL;
  }
  if (v3 >= 0x200000) {
    uint64_t v5 = v6;
  }
  if (v3 >= 0x4000) {
    uint64_t v4 = v5;
  }
  if (v3 >= 0x80) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = 1LL;
  }
  uint64_t v8 = (char *)[a2 lengthOfBytesUsingEncoding:4];
  uint64_t v9 = 1LL;
  uint64_t v10 = 2LL;
  uint64_t v11 = 3LL;
  uint64_t v12 = 4LL;
  return &v8[v7 + v9];
}

char *sub_10010FB98(int a1, void *a2)
{
  unsigned int v3 = sub_10013B0C8(a1, 0);
  uint64_t v4 = 4LL;
  uint64_t v5 = 6LL;
  uint64_t v6 = 10LL;
  if (!(v3 >> 28)) {
    uint64_t v6 = 8LL;
  }
  if (v3 >= 0x200000) {
    uint64_t v5 = v6;
  }
  if (v3 >= 0x4000) {
    uint64_t v4 = v5;
  }
  if (v3 >= 0x80) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = 2LL;
  }
  return (char *)[a2 serializedSize] + v7;
}

char *sub_10010FC00(int a1, void *a2)
{
  unsigned int v3 = sub_10013B0C8(a1, 0);
  uint64_t v4 = 2LL;
  uint64_t v5 = 3LL;
  uint64_t v6 = 4LL;
  if (v3 >> 28) {
    uint64_t v6 = 5LL;
  }
  if (v3 >= 0x200000) {
    uint64_t v5 = v6;
  }
  if (v3 >= 0x4000) {
    uint64_t v4 = v5;
  }
  if (v3 >= 0x80) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = 1LL;
  }
  uint64_t v8 = (char *)[a2 serializedSize];
  uint64_t v9 = 1LL;
  uint64_t v10 = 2LL;
  uint64_t v11 = 3LL;
  uint64_t v12 = 4LL;
  return &v8[v7 + v9];
}

char *sub_10010FC9C(int a1, void *a2)
{
  unsigned int v3 = sub_10013B0C8(a1, 0);
  uint64_t v4 = 2LL;
  uint64_t v5 = 3LL;
  uint64_t v6 = 4LL;
  if (v3 >> 28) {
    uint64_t v6 = 5LL;
  }
  if (v3 >= 0x200000) {
    uint64_t v5 = v6;
  }
  if (v3 >= 0x4000) {
    uint64_t v4 = v5;
  }
  if (v3 >= 0x80) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = 1LL;
  }
  uint64_t v8 = (char *)[a2 length];
  uint64_t v9 = 1LL;
  uint64_t v10 = 2LL;
  uint64_t v11 = 3LL;
  uint64_t v12 = 4LL;
  return &v8[v7 + v9];
}

uint64_t sub_10010FD38(int a1, unsigned int a2)
{
  unsigned int v3 = sub_10013B0C8(a1, 0);
  uint64_t v4 = 1LL;
  uint64_t v5 = 2LL;
  uint64_t v6 = 3LL;
  uint64_t v7 = 4LL;
  if (v3 >> 28) {
    uint64_t v7 = 5LL;
  }
  if (v3 >= 0x200000) {
    uint64_t v6 = v7;
  }
  if (v3 >= 0x4000) {
    uint64_t v5 = v6;
  }
  if (v3 >= 0x80) {
    uint64_t v4 = v5;
  }
  uint64_t v8 = 1LL;
  uint64_t v9 = 2LL;
  uint64_t v10 = 3LL;
  uint64_t v11 = 4LL;
  if (a2 >> 28) {
    uint64_t v11 = 5LL;
  }
  if (a2 >= 0x200000) {
    uint64_t v10 = v11;
  }
  if (a2 >= 0x4000) {
    uint64_t v9 = v10;
  }
  if (a2 >= 0x80) {
    uint64_t v8 = v9;
  }
  return v8 + v4;
}

uint64_t sub_10010FDC8(int a1, int a2)
{
  unsigned int v3 = sub_10013B0C8(a1, 0);
  uint64_t v4 = 1LL;
  uint64_t v5 = 2LL;
  uint64_t v6 = 3LL;
  uint64_t v7 = 4LL;
  if (v3 >> 28) {
    uint64_t v7 = 5LL;
  }
  if (v3 >= 0x200000) {
    uint64_t v6 = v7;
  }
  if (v3 >= 0x4000) {
    uint64_t v5 = v6;
  }
  if (v3 >= 0x80) {
    uint64_t v4 = v5;
  }
  unsigned int v8 = (2 * a2) ^ (a2 >> 31);
  uint64_t v9 = 2LL;
  uint64_t v10 = 3LL;
  uint64_t v11 = 4LL;
  if (v8 >> 28) {
    uint64_t v11 = 5LL;
  }
  if (v8 >= 0x200000) {
    uint64_t v10 = v11;
  }
  if (v8 >= 0x4000) {
    uint64_t v9 = v10;
  }
  if (v8 >= 0x80) {
    uint64_t v12 = v9;
  }
  else {
    uint64_t v12 = 1LL;
  }
  return v12 + v4;
}

uint64_t sub_10010FE60(int a1, uint64_t a2)
{
  unsigned int v3 = sub_10013B0C8(a1, 0);
  uint64_t v4 = 2LL;
  uint64_t v5 = 3LL;
  uint64_t v6 = 4LL;
  if (v3 >> 28) {
    uint64_t v6 = 5LL;
  }
  if (v3 >= 0x200000) {
    uint64_t v5 = v6;
  }
  if (v3 >= 0x4000) {
    uint64_t v4 = v5;
  }
  if (v3 >= 0x80) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = 1LL;
  }
  return sub_10010F74C((2 * a2) ^ (a2 >> 63)) + v7;
}

char *sub_10010FEC8(unsigned int a1, void *a2)
{
  unsigned int v4 = sub_10013B0C8(1, 0);
  uint64_t v5 = 4LL;
  uint64_t v6 = 6LL;
  uint64_t v7 = 10LL;
  if (!(v4 >> 28)) {
    uint64_t v7 = 8LL;
  }
  if (v4 >= 0x200000) {
    uint64_t v6 = v7;
  }
  if (v4 >= 0x4000) {
    uint64_t v5 = v6;
  }
  if (v4 >= 0x80) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = 2LL;
  }
  uint64_t v9 = sub_10010FD38(2, a1) + v8;
  return &sub_10010FC00(3, a2)[v9];
}

char *sub_10010FF54(unsigned int a1, void *a2)
{
  unsigned int v4 = sub_10013B0C8(1, 0);
  uint64_t v5 = 4LL;
  uint64_t v6 = 6LL;
  uint64_t v7 = 10LL;
  if (!(v4 >> 28)) {
    uint64_t v7 = 8LL;
  }
  if (v4 >= 0x200000) {
    uint64_t v6 = v7;
  }
  if (v4 >= 0x4000) {
    uint64_t v5 = v6;
  }
  if (v4 >= 0x80) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = 2LL;
  }
  uint64_t v9 = sub_10010FD38(2, a1) + v8;
  return &sub_10010FC9C(3, a2)[v9];
}

uint64_t sub_10010FFE0(int a1, int a2)
{
  unsigned int v3 = sub_10013B0C8(a1, 0);
  uint64_t v4 = 1LL;
  uint64_t v5 = 2LL;
  uint64_t v6 = 3LL;
  uint64_t v7 = 4LL;
  if (v3 >> 28) {
    uint64_t v7 = 5LL;
  }
  if (v3 >= 0x200000) {
    uint64_t v6 = v7;
  }
  if (v3 >= 0x4000) {
    uint64_t v5 = v6;
  }
  if (v3 >= 0x80) {
    uint64_t v4 = v5;
  }
  return v4 << (a2 == 16);
}

void sub_100110840(_Unwind_Exception *a1)
{
}

SEL sub_1001110C4(char *__s, char *str, const char *a3, int a4)
{
  if (!__s && !a3 && (a4 & 1) == 0) {
    return sel_getUid(str);
  }
  if (__s) {
    size_t v9 = strlen(__s);
  }
  else {
    size_t v9 = 0LL;
  }
  size_t v10 = strlen(str);
  size_t v11 = v10;
  if (a3)
  {
    size_t v10 = strlen(a3);
    size_t v12 = v10;
  }

  else
  {
    size_t v12 = 0LL;
  }

  uint64_t v18 = (uint64_t)&v18;
  size_t v13 = v11 + v9 + v12;
  uint64_t v14 = 1LL;
  if (a4) {
    uint64_t v14 = 2LL;
  }
  size_t v15 = v13 + v14;
  __chkstk_darwin(v10);
  uint64_t v17 = (char *)&v18 - v16;
  bzero((char *)&v18 - v16, v15);
  if (!__s)
  {
    memcpy(v17, str, v11);
    if (!a3) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }

  memcpy(v17, __s, v9);
  memcpy(&v17[v9], str, v11);
  v17[v9] = __toupper(v17[v9]);
  if (a3) {
LABEL_15:
  }
    memcpy(&v17[v9 + v11], a3, v12);
LABEL_16:
  if (a4) {
    v17[v13] = 58;
  }
  v17[v15 - 1] = 0;
  return sel_getUid(v17);
}

uint64_t sub_1001114F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  unsigned int v2 = *(unsigned __int16 *)(v1 + 28);
  if ((v2 & 0xF00) != 0)
  {
    int v3 = 15;
    LOBYTE(v4) = 0;
  }

  else
  {
    int v3 = *(unsigned __int8 *)(v1 + 30);
    int v4 = (v2 >> 2) & 1;
  }

  int v5 = sub_10013B0F0(v3, v4);
  return sub_10013B0C8(*(_DWORD *)(v1 + 16), v5);
}

uint64_t sub_10011153C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  int v2 = sub_10013B0F0(*(unsigned __int8 *)(v1 + 30), (*(_WORD *)(v1 + 28) & 4) == 0);
  return sub_10013B0C8(*(_DWORD *)(v1 + 16), v2);
}

uint64_t sub_1001123E8(void *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(*(void *)(a2 + 8) + 30LL);
  id v5 = [a1 keyEnumerator];
  id v6 = [v5 nextObject];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = 0LL;
    do
    {
      id v9 = [a1 objectForKeyedSubscript:v7];
      size_t v10 = sub_10010FAF8(1, v7);
      size_t v11 = &v10[(void)sub_1001124C8(v9, v4)];
      v8 += (uint64_t)&v11[sub_10010E104(v11)];
      id v7 = [v5 nextObject];
    }

    while (v7);
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  uint64_t v12 = sub_10010FFE0(*(_DWORD *)(*(void *)(a2 + 8) + 16LL), 15);
  return v8 + (void)[a1 count] * v12;
}

char *sub_1001124C8(void *a1, int a2)
{
  switch(a2)
  {
    case 13:
      return sub_10010FC9C(2, a1);
    case 14:
      return sub_10010FAF8(2, a1);
    case 15:
      return sub_10010FC00(2, a1);
  }

  return 0LL;
}

id sub_100112510(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 8);
  int v6 = *(unsigned __int8 *)(v5 + 30);
  uint64_t v7 = sub_10013B0C8(*(_DWORD *)(v5 + 16), 2);
  id v8 = [a2 keyEnumerator];
  id result = [v8 nextObject];
  if (result)
  {
    size_t v10 = result;
    do
    {
      id v11 = [a2 objectForKeyedSubscript:v10];
      [a1 writeInt32NoTag:v7];
      unsigned int v12 = sub_10010FAF8(1, v10);
      objc_msgSend(a1, "writeInt32NoTag:", sub_1001124C8(v11, v6) + v12);
      [a1 writeString:1 value:v10];
      sub_1001125F8(a1, (const char *)v11, v6);
      id result = [v8 nextObject];
      size_t v10 = result;
    }

    while (result);
  }

  return result;
}

void *sub_1001125F8(void *a1, const char *a2, int a3)
{
  switch(a3)
  {
    case 13:
      return [a1 writeBytes:2 value:a2];
    case 14:
      return [a1 writeString:2 value:a2];
    case 15:
      return [a1 writeMessage:2 value:a2];
  }

  return a1;
}

BOOL sub_100112638(void *a1)
{
  id v1 = [a1 objectEnumerator];
  do
  {
    id v2 = [v1 nextObject];
    id v3 = v2;
  }

  while (v2 && ([v2 isInitialized] & 1) != 0);
  return v3 == 0LL;
}

void sub_10011267C(void *a1, uint64_t *a2, uint64_t a3, void *a4, void *a5)
{
  id v9 = [a4 mapKeyDataType];
  int v10 = *(unsigned __int8 *)(a4[1] + 30LL);
  uint64_t v24 = 0LL;
  __int128 v25 = 0LL;
  if (v10 == 17) {
    uint64_t v24 = (__CFString *)[a4 defaultValue];
  }
  int v11 = sub_10013B0F0((int)v9, 0);
  int v12 = sub_10013B0C8(1, v11);
  int v13 = sub_10013B0F0(v10, 0);
  int v14 = sub_10013B0C8(2, v13);
  while (1)
  {
    while (1)
    {
      uint64_t v15 = sub_10010BD0C((uint64_t)(a2 + 1));
      if ((_DWORD)v15 == v12)
      {
        uint64_t v16 = (id *)&v25;
        uint64_t v17 = a2;
        int v18 = (int)v9;
        goto LABEL_8;
      }

      uint64_t v19 = v15;
      if ((_DWORD)v15 != v14) {
        break;
      }
      uint64_t v16 = (id *)&v24;
      uint64_t v17 = a2;
      int v18 = v10;
LABEL_8:
      sub_1001128F8(v17, v16, v18, a3, a4);
    }

    if (!(_DWORD)v15) {
      break;
    }
  }

  __int128 v20 = v25;
  if ((_DWORD)v9 == 14 && !v25)
  {
    __int128 v20 = &stru_10028E390;
    __int128 v25 = v20;
  }

  __int128 v21 = v24;
  switch(v10)
  {
    case 13:
      __int128 v22 = (__CFString *)(id)sub_100137998();
LABEL_23:
      __int128 v21 = v22;
      uint64_t v24 = v22;
      goto LABEL_25;
    case 15:
      __int128 v22 = (__CFString *)objc_alloc_init((Class)objc_msgSend(a4, "msgClass", v19));
      goto LABEL_23;
    case 14:
      __int128 v22 = &stru_10028E390;
      goto LABEL_23;
  }

  __int128 v21 = 0LL;
LABEL_25:
  if ((_DWORD)v9 == 14 && (v10 - 13) <= 3u)
  {
    [a1 setObject:v21 forKey:v20];
    goto LABEL_34;
  }

  if (v10 == 17
    && (*(_WORD *)(a4[1] + 28LL) & 0x1000) != 0
    && ![a4 isValidEnumValue:v21])
  {
    objc_msgSend( a5,  "addUnknownMapEntry:value:",  *(unsigned int *)(a4[1] + 16),  objc_msgSend(a1, "serializedDataForUnknownValue:forKey:keyDataType:", v21, &v25, v9));
  }

  else
  {
    [a1 setTransparencyGPBGenericValue:&v24 forTransparencyGPBGenericValueKey:&v25];
  }

void sub_1001128F8(uint64_t *a1, id *a2, int a3, uint64_t a4, void *a5)
{
  switch(a3)
  {
    case 0:
      *(_BYTE *)a2 = sub_10010BCF0(a1 + 1);
      return;
    case 1:
    case 2:
      int v7 = sub_10010BC78(a1 + 1);
      goto LABEL_15;
    case 3:
      *(float *)a2 = sub_10010BB6C(a1 + 1);
      return;
    case 4:
    case 5:
      uint64_t v8 = sub_10010BC40(a1 + 1);
      goto LABEL_12;
    case 6:
      *(double *)a2 = sub_10010BB34(a1 + 1);
      return;
    case 7:
    case 11:
    case 17:
      int v7 = sub_10010BC2C(a1 + 1);
      goto LABEL_15;
    case 8:
    case 12:
      uint64_t v8 = sub_10010BBA4(a1 + 1);
      goto LABEL_12;
    case 9:
      int v7 = sub_10010BCB0(a1 + 1);
LABEL_15:
      *(_DWORD *)a2 = v7;
      return;
    case 10:
      uint64_t v8 = sub_10010BCD0(a1 + 1);
      goto LABEL_12;
    case 13:

      uint64_t v8 = (uint64_t)sub_10010BFA0(a1 + 1);
      goto LABEL_12;
    case 14:

      uint64_t v8 = (uint64_t)sub_10010BEB4(a1 + 1);
LABEL_12:
      *a2 = (id)v8;
      break;
    case 15:
      id v10 = objc_alloc_init((Class)[a5 msgClass]);
      [a1 readMessage:v10 extensionRegistry:a4];

      *a2 = v10;
      break;
    default:
      return;
  }

uint64_t sub_100112F20(unsigned int a1, int a2, int a3)
{
  if (a3 == 1) {
    return sub_10010F960(a2);
  }
  if (a3 == 11) {
    return sub_10010FD38(a2, a1);
  }
  return 0LL;
}

uint64_t sub_10011316C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, NSString *, NSString *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%u", a2),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%u", a3));
}

uint64_t sub_100113744(unsigned int a1, int a2, int a3)
{
  switch(a3)
  {
    case 2:
      return sub_10010F960(a2);
    case 9:
      return sub_10010FDC8(a2, a1);
    case 7:
      return sub_10010FA10(a2, a1);
  }

  return 0LL;
}

id sub_1001138E0(id result, uint64_t a2, uint64_t a3, int a4)
{
  switch(a4)
  {
    case 2:
      return _[result writeSFixed32:a3 value:a2];
    case 9:
      return _[result writeSInt32:a3 value:a2];
    case 7:
      return _[result writeInt32:a3 value:a2];
  }

  return result;
}

uint64_t sub_1001139B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, NSString *, NSString *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%u", a2),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%d", a3));
}

uint64_t sub_100113F88(unint64_t a1, int a2, int a3)
{
  if (a3 == 4) {
    return sub_10010F8C8(a2);
  }
  if (a3 == 12) {
    return sub_10010F9AC(a2, a1);
  }
  return 0LL;
}

uint64_t sub_1001141D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, NSString *, NSString *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%u", a2),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%llu", a3));
}

uint64_t sub_1001147A4(unint64_t a1, int a2, int a3)
{
  switch(a3)
  {
    case 5:
      return sub_10010F8C8(a2);
    case 10:
      return sub_10010FE60(a2, a1);
    case 8:
      return sub_10010F9AC(a2, a1);
  }

  return 0LL;
}

id sub_100114940(id result, uint64_t a2, uint64_t a3, int a4)
{
  switch(a4)
  {
    case 5:
      return _[result writeSFixed64:a3 value:a2];
    case 10:
      return _[result writeSInt64:a3 value:a2];
    case 8:
      return _[result writeInt64:a3 value:a2];
  }

  return result;
}

uint64_t sub_100114A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, NSString *, NSString *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%u", a2),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%lld", a3));
}

uint64_t sub_1001151B0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%u", a2);
  if (a3) {
    int v6 = @"true";
  }
  else {
    int v6 = @"false";
  }
  return (*(uint64_t (**)(uint64_t, NSString *, const __CFString *))(v4 + 16))(v4, v5, v6);
}

uint64_t sub_10011593C(uint64_t a1, uint64_t a2, float a3)
{
  return (*(uint64_t (**)(void, NSString *, NSString *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%u", a2),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%.*g", 6LL, a3));
}

uint64_t sub_1001160E8(uint64_t a1, uint64_t a2, double a3)
{
  return (*(uint64_t (**)(void, NSString *, NSString *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%u", a2),  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%.*lg",  15LL,  *(void *)&a3));
}

BOOL sub_1001163BC(int a1)
{
  return a1 != -72499473;
}

uint64_t sub_1001169A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, NSString *, NSNumber *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%u", a2),  +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a3));
}

uint64_t sub_1001174EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, NSString *, uint64_t))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%u", a2),  a3);
}

uint64_t sub_100117C78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, NSString *, NSString *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%d", a2),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%u", a3));
}

uint64_t sub_100118420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, NSString *, NSString *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%d", a2),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%d", a3));
}

uint64_t sub_100118BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, NSString *, NSString *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%d", a2),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%llu", a3));
}

uint64_t sub_100119398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, NSString *, NSString *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%d", a2),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%lld", a3));
}

uint64_t sub_100119B10(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%d", a2);
  if (a3) {
    int v6 = @"true";
  }
  else {
    int v6 = @"false";
  }
  return (*(uint64_t (**)(uint64_t, NSString *, const __CFString *))(v4 + 16))(v4, v5, v6);
}

uint64_t sub_10011A27C(uint64_t a1, uint64_t a2, float a3)
{
  return (*(uint64_t (**)(void, NSString *, NSString *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%d", a2),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%.*g", 6LL, a3));
}

uint64_t sub_10011AA08(uint64_t a1, uint64_t a2, double a3)
{
  return (*(uint64_t (**)(void, NSString *, NSString *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%d", a2),  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%.*lg",  15LL,  *(void *)&a3));
}

uint64_t sub_10011B274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, NSString *, NSNumber *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%d", a2),  +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a3));
}

uint64_t sub_10011BD98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, NSString *, uint64_t))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%d", a2),  a3);
}

uint64_t sub_10011C544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, NSString *, NSString *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%llu", a2),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%u", a3));
}

uint64_t sub_10011CD0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, NSString *, NSString *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%llu", a2),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%d", a3));
}

uint64_t sub_10011D4F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, NSString *, NSString *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%llu", a2),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%llu", a3));
}

uint64_t sub_10011DCC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, NSString *, NSString *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%llu", a2),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%lld", a3));
}

uint64_t sub_10011E45C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%llu", a2);
  if (a3) {
    int v6 = @"true";
  }
  else {
    int v6 = @"false";
  }
  return (*(uint64_t (**)(uint64_t, NSString *, const __CFString *))(v4 + 16))(v4, v5, v6);
}

uint64_t sub_10011EBE8(uint64_t a1, uint64_t a2, float a3)
{
  return (*(uint64_t (**)(void, NSString *, NSString *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%llu", a2),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%.*g", 6LL, a3));
}

uint64_t sub_10011F394(uint64_t a1, uint64_t a2, double a3)
{
  return (*(uint64_t (**)(void, NSString *, NSString *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%llu", a2),  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%.*lg",  15LL,  *(void *)&a3));
}

uint64_t sub_10011FC40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, NSString *, NSNumber *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%llu", a2),  +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a3));
}

uint64_t sub_100120784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, NSString *, uint64_t))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%llu", a2),  a3);
}

uint64_t sub_100120F10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, NSString *, NSString *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%lld", a2),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%u", a3));
}

uint64_t sub_1001216B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, NSString *, NSString *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%lld", a2),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%d", a3));
}

uint64_t sub_100121E80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, NSString *, NSString *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%lld", a2),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%llu", a3));
}

uint64_t sub_100122628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, NSString *, NSString *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%lld", a2),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%lld", a3));
}

uint64_t sub_100122DA8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%lld", a2);
  if (a3) {
    int v6 = @"true";
  }
  else {
    int v6 = @"false";
  }
  return (*(uint64_t (**)(uint64_t, NSString *, const __CFString *))(v4 + 16))(v4, v5, v6);
}

uint64_t sub_100123514(uint64_t a1, uint64_t a2, float a3)
{
  return (*(uint64_t (**)(void, NSString *, NSString *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%lld", a2),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%.*g", 6LL, a3));
}

uint64_t sub_100123CA0(uint64_t a1, uint64_t a2, double a3)
{
  return (*(uint64_t (**)(void, NSString *, NSString *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%lld", a2),  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%.*lg",  15LL,  *(void *)&a3));
}

uint64_t sub_10012450C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, NSString *, NSNumber *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%lld", a2),  +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a3));
}

uint64_t sub_100125030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, NSString *, uint64_t))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%lld", a2),  a3);
}

uint64_t sub_100125784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, NSString *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  a2,  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%u", a3));
}

uint64_t sub_100125EA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, NSString *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  a2,  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%d", a3));
}

uint64_t sub_1001265EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, NSString *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  a2,  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%llu", a3));
}

uint64_t sub_100126D10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, NSString *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  a2,  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%lld", a3));
}

uint64_t sub_10012740C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3) {
    uint64_t v4 = @"true";
  }
  else {
    uint64_t v4 = @"false";
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, const __CFString *))(v3 + 16))(v3, a2, v4);
}

uint64_t sub_100127AD4(uint64_t a1, uint64_t a2, float a3)
{
  return (*(uint64_t (**)(void, uint64_t, NSString *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  a2,  +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%.*g", 6LL, a3));
}

uint64_t sub_1001281E0(uint64_t a1, uint64_t a2, double a3)
{
  return (*(uint64_t (**)(void, uint64_t, NSString *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  a2,  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%.*lg",  15LL,  *(void *)&a3));
}

uint64_t sub_1001289C0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, NSNumber *))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  a2,  +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:"));
}

id sub_10012CE18(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if ((*(_BYTE *)(v5 + 45) & 1) == 0) {
    return sub_10012D268(a2, v5, a3);
  }
  if ((*(_BYTE *)(v5 + 45) & 2) != 0)
  {
    [a3 writeTag:*(unsigned int *)(v5 + 40) format:2];
    unint64_t v10 = *(char *)(v5 + 44);
    if (v10 > 6)
    {
      __int128 v26 = 0u;
      __int128 v27 = 0u;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      id v13 = [a2 countByEnumeratingWithState:&v24 objects:v32 count:16];
      if (v13)
      {
        id v14 = v13;
        uint64_t v12 = 0LL;
        uint64_t v15 = *(void *)v25;
        do
        {
          for (uint64_t i = 0LL; i != v14; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v25 != v15) {
              objc_enumerationMutation(a2);
            }
            v12 += (uint64_t)sub_10012D97C( (id)*(unsigned __int8 *)(v5 + 44),  *(void **)(*((void *)&v24 + 1) + 8LL * (void)i));
          }

          id v14 = [a2 countByEnumeratingWithState:&v24 objects:v32 count:16];
        }

        while (v14);
      }

      else
      {
        uint64_t v12 = 0LL;
      }
    }

    else
    {
      uint64_t v11 = qword_10024BBA8[v10];
      uint64_t v12 = (void)[a2 count] * v11;
    }

    [a3 writeRawVarintSizeTAs32:v12];
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    id result = [a2 countByEnumeratingWithState:&v20 objects:&v28 count:16];
    if (result)
    {
      id v17 = result;
      uint64_t v18 = *(void *)v21;
      do
      {
        uint64_t v19 = 0LL;
        do
        {
          if (*(void *)v21 != v18) {
            objc_enumerationMutation(a2);
          }
          switch(*(_BYTE *)(v5 + 44))
          {
            case 0:
              objc_msgSend( a3,  "writeBoolNoTag:",  objc_msgSend(*(id *)(*((void *)&v20 + 1) + 8 * (void)v19), "BOOLValue"));
              break;
            case 1:
              objc_msgSend( a3,  "writeFixed32NoTag:",  objc_msgSend(*(id *)(*((void *)&v20 + 1) + 8 * (void)v19), "unsignedIntValue"));
              break;
            case 2:
              objc_msgSend( a3,  "writeSFixed32NoTag:",  objc_msgSend(*(id *)(*((void *)&v20 + 1) + 8 * (void)v19), "intValue"));
              break;
            case 3:
              [*(id *)(*((void *)&v20 + 1) + 8 * (void)v19) floatValue];
              objc_msgSend(a3, "writeFloatNoTag:");
              break;
            case 4:
              objc_msgSend( a3,  "writeFixed64NoTag:",  objc_msgSend(*(id *)(*((void *)&v20 + 1) + 8 * (void)v19), "unsignedLongLongValue"));
              break;
            case 5:
              objc_msgSend( a3,  "writeSFixed64NoTag:",  objc_msgSend(*(id *)(*((void *)&v20 + 1) + 8 * (void)v19), "longLongValue"));
              break;
            case 6:
              [*(id *)(*((void *)&v20 + 1) + 8 * (void)v19) doubleValue];
              objc_msgSend(a3, "writeDoubleNoTag:");
              break;
            case 7:
              objc_msgSend( a3,  "writeInt32NoTag:",  objc_msgSend(*(id *)(*((void *)&v20 + 1) + 8 * (void)v19), "intValue"));
              break;
            case 8:
              objc_msgSend( a3,  "writeInt64NoTag:",  objc_msgSend(*(id *)(*((void *)&v20 + 1) + 8 * (void)v19), "longLongValue"));
              break;
            case 9:
              objc_msgSend( a3,  "writeSInt32NoTag:",  objc_msgSend(*(id *)(*((void *)&v20 + 1) + 8 * (void)v19), "intValue"));
              break;
            case 0xA:
              objc_msgSend( a3,  "writeSInt64NoTag:",  objc_msgSend(*(id *)(*((void *)&v20 + 1) + 8 * (void)v19), "longLongValue"));
              break;
            case 0xB:
              objc_msgSend( a3,  "writeUInt32NoTag:",  objc_msgSend(*(id *)(*((void *)&v20 + 1) + 8 * (void)v19), "unsignedIntValue"));
              break;
            case 0xC:
              objc_msgSend( a3,  "writeUInt64NoTag:",  objc_msgSend(*(id *)(*((void *)&v20 + 1) + 8 * (void)v19), "unsignedLongLongValue"));
              break;
            case 0xD:
              [a3 writeBytesNoTag:*(void *)(*((void *)&v20 + 1) + 8 * (void)v19)];
              break;
            case 0xE:
              [a3 writeStringNoTag:*(void *)(*((void *)&v20 + 1) + 8 * (void)v19)];
              break;
            case 0xF:
              [a3 writeMessageNoTag:*(void *)(*((void *)&v20 + 1) + 8 * (void)v19)];
              break;
            case 0x10:
              [a3 writeGroupNoTag:*(unsigned int *)(v5 + 40) value:*(void *)(*((void *)&v20 + 1) + 8 * (void)v19)];
              break;
            case 0x11:
              objc_msgSend( a3,  "writeEnumNoTag:",  objc_msgSend(*(id *)(*((void *)&v20 + 1) + 8 * (void)v19), "intValue"));
              break;
            default:
              break;
          }

          uint64_t v19 = (char *)v19 + 1;
        }

        while (v17 != v19);
        id result = [a2 countByEnumeratingWithState:&v20 objects:&v28 count:16];
        id v17 = result;
      }

      while (result);
    }
  }

  else
  {
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    id result = [a2 countByEnumeratingWithState:&v28 objects:v32 count:16];
    if (result)
    {
      id v7 = result;
      uint64_t v8 = *(void *)v29;
      do
      {
        id v9 = 0LL;
        do
        {
          if (*(void *)v29 != v8) {
            objc_enumerationMutation(a2);
          }
          sub_10012D268(*(id *)(*((void *)&v28 + 1) + 8LL * (void)v9), v5, a3);
          id v9 = (char *)v9 + 1;
        }

        while (v7 != v9);
        id result = [a2 countByEnumeratingWithState:&v28 objects:v32 count:16];
        id v7 = result;
      }

      while (result);
    }
  }

  return result;
}

id sub_10012D268(id result, uint64_t a2, void *a3)
{
  switch(*(_BYTE *)(a2 + 44))
  {
    case 0:
      id result = objc_msgSend(a3, "writeBool:value:", *(unsigned int *)(a2 + 40), objc_msgSend(result, "BOOLValue"));
      break;
    case 1:
      id result = objc_msgSend( a3,  "writeFixed32:value:",  *(unsigned int *)(a2 + 40),  objc_msgSend(result, "unsignedIntValue"));
      break;
    case 2:
      id result = _objc_msgSend(a3, "writeSFixed32:value:", *(unsigned int *)(a2 + 40), objc_msgSend(result, "intValue"));
      break;
    case 3:
      uint64_t v4 = *(unsigned int *)(a2 + 40);
      [result floatValue];
      id result = objc_msgSend(a3, "writeFloat:value:", v4);
      break;
    case 4:
      id result = objc_msgSend( a3,  "writeFixed64:value:",  *(unsigned int *)(a2 + 40),  objc_msgSend(result, "unsignedLongLongValue"));
      break;
    case 5:
      id result = _objc_msgSend( a3,  "writeSFixed64:value:",  *(unsigned int *)(a2 + 40),  objc_msgSend(result, "longLongValue"));
      break;
    case 6:
      uint64_t v5 = *(unsigned int *)(a2 + 40);
      [result doubleValue];
      id result = objc_msgSend(a3, "writeDouble:value:", v5);
      break;
    case 7:
      id result = _objc_msgSend(a3, "writeInt32:value:", *(unsigned int *)(a2 + 40), objc_msgSend(result, "intValue"));
      break;
    case 8:
      id result = _objc_msgSend(a3, "writeInt64:value:", *(unsigned int *)(a2 + 40), objc_msgSend(result, "longLongValue"));
      break;
    case 9:
      id result = _objc_msgSend(a3, "writeSInt32:value:", *(unsigned int *)(a2 + 40), objc_msgSend(result, "intValue"));
      break;
    case 0xA:
      id result = _objc_msgSend( a3,  "writeSInt64:value:",  *(unsigned int *)(a2 + 40),  objc_msgSend(result, "longLongValue"));
      break;
    case 0xB:
      id result = objc_msgSend( a3,  "writeUInt32:value:",  *(unsigned int *)(a2 + 40),  objc_msgSend(result, "unsignedIntValue"));
      break;
    case 0xC:
      id result = objc_msgSend( a3,  "writeUInt64:value:",  *(unsigned int *)(a2 + 40),  objc_msgSend(result, "unsignedLongLongValue"));
      break;
    case 0xD:
      id result = [a3 writeBytes:*(unsigned int *)(a2 + 40) value:result];
      break;
    case 0xE:
      id result = [a3 writeString:*(unsigned int *)(a2 + 40) value:result];
      break;
    case 0xF:
      uint64_t v6 = *(unsigned int *)(a2 + 40);
      if ((*(_BYTE *)(a2 + 45) & 4) != 0) {
        id result = _[a3 writeMessageSetExtension:v6 value:result];
      }
      else {
        id result = [a3 writeMessage:v6 value:result];
      }
      break;
    case 0x10:
      id result = [a3 writeGroup:*(unsigned int *)(a2 + 40) value:result];
      break;
    case 0x11:
      id result = objc_msgSend(a3, "writeEnum:value:", *(unsigned int *)(a2 + 40), objc_msgSend(result, "intValue"));
      break;
    default:
      return result;
  }

  return result;
}

uint64_t sub_10012D500(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((*(_BYTE *)(v3 + 45) & 1) == 0) {
    return sub_10012D734(*(void *)(a1 + 8), a2);
  }
  if ((*(_BYTE *)(v3 + 45) & 2) != 0)
  {
    unint64_t v10 = *(char *)(v3 + 44);
    if (v10 > 6)
    {
      __int128 v20 = 0u;
      __int128 v21 = 0u;
      __int128 v18 = 0u;
      __int128 v19 = 0u;
      id v13 = [a2 countByEnumeratingWithState:&v18 objects:v22 count:16];
      if (v13)
      {
        id v14 = v13;
        uint64_t v12 = 0LL;
        uint64_t v15 = *(void *)v19;
        do
        {
          for (uint64_t i = 0LL; i != v14; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v19 != v15) {
              objc_enumerationMutation(a2);
            }
            v12 += (uint64_t)sub_10012D97C( (id)*(unsigned __int8 *)(v3 + 44),  *(void **)(*((void *)&v18 + 1) + 8LL * (void)i));
          }

          id v14 = [a2 countByEnumeratingWithState:&v18 objects:v22 count:16];
        }

        while (v14);
      }

      else
      {
        uint64_t v12 = 0LL;
      }
    }

    else
    {
      uint64_t v11 = qword_10024BBA8[v10];
      uint64_t v12 = (void)[a2 count] * v11;
    }

    uint64_t v17 = sub_10010F914(*(_DWORD *)(v3 + 40));
    return v17 + v12 + sub_10010E104(v12);
  }

  else
  {
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    id v5 = [a2 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = 0LL;
      uint64_t v8 = *(void *)v19;
      do
      {
        for (uint64_t j = 0LL; j != v6; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v19 != v8) {
            objc_enumerationMutation(a2);
          }
          v7 += sub_10012D734(v3, *(void **)(*((void *)&v18 + 1) + 8LL * (void)j));
        }

        id v6 = [a2 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }

      while (v6);
    }

    else
    {
      return 0LL;
    }
  }

  return v7;
}

uint64_t sub_10012D734(uint64_t result, void *a2)
{
  switch(*(_BYTE *)(result + 44))
  {
    case 0:
      int v2 = *(_DWORD *)(result + 40);
      [a2 BOOLValue];
      id result = sub_10010FAAC(v2);
      break;
    case 1:
      int v5 = *(_DWORD *)(result + 40);
      [a2 unsignedIntValue];
      id result = sub_10010F960(v5);
      break;
    case 2:
      int v3 = *(_DWORD *)(result + 40);
      [a2 intValue];
      id result = sub_10010F960(v3);
      break;
    case 3:
      int v6 = *(_DWORD *)(result + 40);
      [a2 floatValue];
      id result = sub_10010F960(v6);
      break;
    case 4:
      int v4 = *(_DWORD *)(result + 40);
      [a2 unsignedLongLongValue];
      id result = sub_10010F8C8(v4);
      break;
    case 5:
      int v7 = *(_DWORD *)(result + 40);
      [a2 longLongValue];
      id result = sub_10010F8C8(v7);
      break;
    case 6:
      int v8 = *(_DWORD *)(result + 40);
      [a2 doubleValue];
      id result = sub_10010F8C8(v8);
      break;
    case 7:
    case 0x11:
      id result = sub_10010FA10(*(_DWORD *)(result + 40), [a2 intValue]);
      break;
    case 8:
      id result = sub_10010F9AC(*(_DWORD *)(result + 40), (unint64_t)[a2 longLongValue]);
      break;
    case 9:
      id result = sub_10010FDC8(*(_DWORD *)(result + 40), (int)[a2 intValue]);
      break;
    case 0xA:
      id result = sub_10010FE60(*(_DWORD *)(result + 40), (uint64_t)[a2 longLongValue]);
      break;
    case 0xB:
      id result = sub_10010FD38(*(_DWORD *)(result + 40), [a2 unsignedIntValue]);
      break;
    case 0xC:
      id result = sub_10010F9AC(*(_DWORD *)(result + 40), (unint64_t)[a2 unsignedLongLongValue]);
      break;
    case 0xD:
      id result = (uint64_t)sub_10010FC9C(*(_DWORD *)(result + 40), a2);
      break;
    case 0xE:
      id result = (uint64_t)sub_10010FAF8(*(_DWORD *)(result + 40), a2);
      break;
    case 0xF:
      char v9 = *(_BYTE *)(result + 45);
      unsigned int v10 = *(_DWORD *)(result + 40);
      if ((v9 & 4) != 0) {
        id result = (uint64_t)sub_10010FEC8(v10, a2);
      }
      else {
        id result = (uint64_t)sub_10010FC00(v10, a2);
      }
      break;
    case 0x10:
      id result = (uint64_t)sub_10010FB98(*(_DWORD *)(result + 40), a2);
      break;
    default:
      return result;
  }

  return result;
}

id sub_10012D97C(id result, void *a2)
{
  switch((int)result)
  {
    case 0:
      [a2 BOOLValue];
      return (id)variable initialization expression of KTEligibilityDB.schemaVersion();
    case 1:
      [a2 unsignedIntValue];
      return (id)sub_10010D9B8();
    case 2:
      [a2 intValue];
      return (id)sub_10010D9B8();
    case 3:
      [a2 floatValue];
      return (id)sub_10010D9B8();
    case 4:
      [a2 unsignedLongLongValue];
      return (id)sub_10010D824();
    case 5:
      [a2 longLongValue];
      return (id)sub_10010D824();
    case 6:
      [a2 doubleValue];
      return (id)sub_10010D824();
    case 7:
    case 17:
      return (id)sub_10010DEF8([a2 intValue]);
    case 8:
      id v2 = [a2 longLongValue];
      goto LABEL_13;
    case 9:
      return (id)sub_10010E634((int)[a2 intValue]);
    case 10:
      return (id)sub_10010E82C((uint64_t)[a2 longLongValue]);
    case 11:
      return (id)sub_10010E104([a2 unsignedIntValue]);
    case 12:
      id v2 = [a2 unsignedLongLongValue];
LABEL_13:
      id result = (id)sub_10010DB6C((unint64_t)v2);
      break;
    case 13:
      id result = sub_10010F87C(a2);
      break;
    case 14:
      id result = sub_10010F7DC(a2);
      break;
    case 15:
      id result = sub_10010F830(a2);
      break;
    case 16:
      id result = [a2 serializedSize];
      break;
    default:
      return result;
  }

  return result;
}

void sub_10012DCBC(void *key, const __CFDictionary *a2, CFDictionaryRef theDict)
{
  Value = (void *)CFDictionaryGetValue(theDict, key);
  if (Value)
  {
    CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)sub_10012DD48, Value);
  }

  else
  {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0LL, a2);
    CFDictionarySetValue(theDict, key, MutableCopy);
    CFRelease(MutableCopy);
  }

void sub_10012DD48(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

void *sub_10012DDC8(objc_class *a1, uint64_t a2, void *a3)
{
  int v5 = objc_alloc_init(a1);
  v5[4] = a2;
  void v5[5] = a3;
  return v5;
}

BOOL sub_10012DE08(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 32) == a2;
}

id sub_10012DE18(void *a1)
{
  id result = (id)a1[4];
  if (result)
  {
    int v3 = (void *)a1[5];
    if (v3) {
      return (id)sub_100138468((uint64_t)result, v3, a1);
    }
    else {
      return objc_msgSend(result, "setExtension:value:", a1[6]);
    }
  }

  return result;
}

id sub_10012DE40(void *a1, uint64_t a2)
{
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  int v4 = (void *)*((void *)objc_msgSend((id)objc_opt_class(a1, a2), "descriptor") + 1);
  id result = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (result)
  {
    id v6 = result;
    uint64_t v7 = *(void *)v12;
    while (2)
    {
      int v8 = 0LL;
      do
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        char v9 = *(void **)(*((void *)&v11 + 1) + 8LL * (void)v8);
        if ([v9 fieldType] == 1 && sub_100137E7C((uint64_t)a1, (uint64_t)v9) == a2)
        {
          else {
            unsigned int v10 = &OBJC_IVAR___TransparencyGPBAutocreatedArray__autocreator;
          }
          *(void *)(a2 + *v10) = 0LL;
          return sub_10012DE18(a1);
        }

        int v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id result = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
      id v6 = result;
      if (result) {
        continue;
      }
      break;
    }
  }

  return result;
}

id sub_10012DFA8(void *a1, uint64_t a2)
{
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  int v4 = (void *)*((void *)objc_msgSend((id)objc_opt_class(a1, a2), "descriptor") + 1);
  id result = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (result)
  {
    id v6 = result;
    uint64_t v7 = *(void *)v12;
    while (2)
    {
      int v8 = 0LL;
      do
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        char v9 = *(void **)(*((void *)&v11 + 1) + 8LL * (void)v8);
        if ([v9 fieldType] == 2 && sub_100137E7C((uint64_t)a1, (uint64_t)v9) == a2)
        {
          if ([v9 mapKeyDataType] == 14
            && *(unsigned __int8 *)(v9[1] + 30LL) - 13 < 4)
          {
            unsigned int v10 = &OBJC_IVAR___TransparencyGPBAutocreatedDictionary__autocreator;
          }

          else
          {
            unsigned int v10 = &OBJC_IVAR___TransparencyGPBInt32Int32Dictionary__autocreator;
          }

          *(void *)(a2 + *v10) = 0LL;
          return sub_10012DE18(a1);
        }

        int v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id result = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
      id v6 = result;
      if (result) {
        continue;
      }
      break;
    }
  }

  return result;
}

void sub_10012E124(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)(a1 + 32))
    {
      *(void *)(a1 + memset(v11, 0, 32) = 0LL;

      *(void *)(a1 + 40) = 0LL;
      *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 96), 8) = 0LL;
    }
  }

NSError *sub_10012E3D0(void *a1)
{
  if (!objc_msgSend( objc_msgSend(a1, "name"),  "isEqual:",  @"TransparencyGPBCodedInputStreamException")
    || (id result = (NSError *)objc_msgSend( objc_msgSend(a1, "userInfo"),  "objectForKeyedSubscript:",  @"TransparencyGPBCodedInputStreamUnderlyingErrorKey")) == 0)
  {
    id v3 = [a1 reason];
    if ([v3 length])
    {
      int v5 = @"Reason";
      id v6 = v3;
      int v4 = +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v6,  &v5,  1LL);
    }

    else
    {
      int v4 = 0LL;
    }

    return +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"TransparencyGPBMessageErrorDomain",  -100LL,  v4);
  }

  return result;
}

void sub_10012E97C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = [a3 copyWithZone:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) setObject:v5 forKey:a2];
}

NSMutableDictionary *sub_10012EA48(void *a1, uint64_t a2)
{
  if (![a1 count]) {
    return 0LL;
  }
  int v4 = -[NSMutableDictionary initWithCapacity:]( +[NSMutableDictionary allocWithZone:](NSMutableDictionary, "allocWithZone:", a2),  "initWithCapacity:",  [a1 count]);
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  id v5 = [a1 countByEnumeratingWithState:&v28 objects:v33 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v29;
    uint64_t v21 = *(void *)v29;
    __int128 v22 = v4;
    do
    {
      int v8 = 0LL;
      id v23 = v6;
      do
      {
        if (*(void *)v29 != v7) {
          objc_enumerationMutation(a1);
        }
        char v9 = *(void **)(*((void *)&v28 + 1) + 8LL * (void)v8);
        id v10 = [a1 objectForKey:v9];
        unsigned int v11 = *(unsigned __int8 *)(v9[1] + 44LL) - 15;
        if ([v9 isRepeated])
        {
          if (v11 > 1)
          {
            id v18 = [v10 mutableCopyWithZone:a2];
            goto LABEL_20;
          }

          __int128 v12 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [v10 count]);
          __int128 v24 = 0u;
          __int128 v25 = 0u;
          __int128 v26 = 0u;
          __int128 v27 = 0u;
          id v13 = [v10 countByEnumeratingWithState:&v24 objects:v32 count:16];
          if (v13)
          {
            id v14 = v13;
            uint64_t v15 = *(void *)v25;
            do
            {
              for (uint64_t i = 0LL; i != v14; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v25 != v15) {
                  objc_enumerationMutation(v10);
                }
                id v17 = [*(id *)(*((void *)&v24 + 1) + 8 * (void)i) copyWithZone:a2];
                -[NSMutableArray addObject:](v12, "addObject:", v17);
              }

              id v14 = [v10 countByEnumeratingWithState:&v24 objects:v32 count:16];
            }

            while (v14);
          }

          int v4 = v22;
          -[NSMutableDictionary setObject:forKey:](v22, "setObject:forKey:", v12, v9);

          uint64_t v7 = v21;
          id v6 = v23;
        }

        else
        {
          if (v11 <= 1)
          {
            id v18 = [v10 copyWithZone:a2];
LABEL_20:
            __int128 v19 = v18;
            -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v18, v9);

            goto LABEL_22;
          }

          -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v10, v9);
        }

void *sub_10012F03C(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[1];
  if (*(unsigned __int8 *)(v4 + 30) - 15 >= 2)
  {
    if (sub_100138364(a1, *(_DWORD *)(v4 + 20), *(_DWORD *)(v4 + 16))) {
      return *(void **)(*(void *)(a1 + 64) + *(unsigned int *)(a2[1] + 24LL));
    }
    else {
      return [a2 defaultValue];
    }
  }

  else
  {
    id v5 = (unint64_t *)(*(void *)(a1 + 64) + *(unsigned int *)(v4 + 24));
    id v6 = (void *)atomic_load(v5);
    if (!v6)
    {
      id v6 = objc_alloc_init((Class)[a2 msgClass]);
      void v6[4] = a1;
      _OWORD v6[5] = a2;
      while (1)
      {
        unint64_t v7 = __ldaxr(v5);
        if (v7) {
          break;
        }
      }

      __clrex();
      sub_10012E124((uint64_t)v6);

      return (void *)v7;
    }
  }

  return v6;
}

void sub_10012F424( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void *sub_10012F444(void *result, void *a2, void *a3, _BYTE *a4)
{
  if (*(unsigned __int8 *)(a2[1] + 44LL) - 15 <= 1)
  {
    id v6 = result;
    if ([a2 isRepeated])
    {
      __int128 v12 = 0u;
      __int128 v13 = 0u;
      __int128 v10 = 0u;
      __int128 v11 = 0u;
      id result = [a3 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (!result) {
        return result;
      }
      id v7 = result;
      uint64_t v8 = *(void *)v11;
LABEL_5:
      uint64_t v9 = 0LL;
      while (1)
      {
        if (*(void *)v11 != v8) {
          objc_enumerationMutation(a3);
        }
        id result = [*(id *)(*((void *)&v10 + 1) + 8 * v9) isInitialized];
        if (!(_DWORD)result) {
          break;
        }
        if (v7 == (id)++v9)
        {
          id result = [a3 countByEnumeratingWithState:&v10 objects:v14 count:16];
          id v7 = result;
          if (result) {
            goto LABEL_5;
          }
          return result;
        }
      }
    }

    else
    {
      id result = [a3 isInitialized];
    }

    *(_BYTE *)(*(void *)(v6[4] + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 0;
    *a4 = 1;
  }

  return result;
}

uint64_t sub_100130414(uint64_t a1, void *a2)
{
  uint64_t result = objc_opt_isKindOfClass(a1, [a2 containingMessageClass]);
  if ((result & 1) == 0)
  {
    id v5 = [a2 singletonName];
    return (uint64_t)+[NSException raise:format:]( NSException,  "raise:format:",  NSInvalidArgumentException,  @"Extension %@ used on wrong class (%@ instead of %@)",  v5,  objc_opt_class(a1, v6),  [a2 containingMessageClass]);
  }

  return result;
}

void sub_100130CF4(void *a1, int a2, uint64_t *a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    int v9 = sub_10010BC2C(a3 + 1);
    unint64_t v10 = sub_10010C08C((uint64_t)(a3 + 1), v9);
    while (sub_10010C0DC((uint64_t)(a3 + 1)))
    {
      __int128 v11 = sub_100134358(a1, a5, a3, a4, 0LL);
      if (v11)
      {
        __int128 v12 = v11;
        [a5 addExtension:a1 value:v11];
      }
    }

    sub_10010C0D4((uint64_t)(a3 + 1), v10);
  }

  else
  {
    uint64_t v13 = a1[1];
    if ((*(_BYTE *)(v13 + 45) & 1) != 0)
    {
      uint64_t v15 = sub_100134358(a1, a5, a3, a4, 0LL);
      if (v15)
      {
        id v17 = v15;
        [a5 addExtension:a1 value:v15];
      }
    }

    else
    {
      else {
        id v14 = [a5 getExistingExtension:a1];
      }
      uint64_t v16 = sub_100134358(a1, a5, a3, a4, v14);
      if (v16)
      {
        id v18 = v16;
        [a5 setExtension:a1 value:v16];
      }
    }
  }

uint64_t sub_100130E98(void *a1)
{
  uint64_t result = a1[1];
  if (!result)
  {
    a1[1] = objc_alloc_init(&OBJC_CLASS___TransparencyGPBUnknownFieldSet);
    sub_10012DE18(a1);
    return a1[1];
  }

  return result;
}

LABEL_57:
        ++v10;
      }

      else
      {
LABEL_15:
        if (!-[TransparencyGPBMessage parseUnknownField:extensionRegistry:tag:]( self,  "parseUnknownField:extensionRegistry:tag:",  a3,  a4,  v9)) {
          return;
        }
      }

LABEL_58:
      int v9 = sub_10010BD0C((uint64_t)a3 + 8);
    }

    while ((_DWORD)v9);
  }

    uint64_t v36 = 0LL;
    __int128 v22 = v51;
LABEL_59:

LABEL_60:
    goto LABEL_61;
  }

  if (qword_1002EEE60 != -1) {
    dispatch_once(&qword_1002EEE60, &stru_100289540);
  }
  uint64_t v33 = (os_log_s *)qword_1002EEE68;
  if (os_log_type_enabled((os_log_t)qword_1002EEE68, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "could not get KTApplicationPublicKeyStore",  buf,  2u);
  }

  uint64_t v21 = 0LL;
LABEL_61:

  return v21;
}

uint64_t sub_100131590(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(a2[1] + 30LL);
  uint64_t v6 = (uint64_t *)(a3 + 8);
  id v7 = sub_1001320DC((uint64_t)a1, a2);
  int v8 = sub_10010BC2C(v6);
  unint64_t v9 = sub_10010C08C((uint64_t)v6, v8);
  while (sub_10010C0DC((uint64_t)v6))
  {
    switch(v5)
    {
      case 0:
        uint64_t v10 = sub_10010BCF0(v6);
        goto LABEL_16;
      case 1:
      case 2:
        uint64_t v10 = sub_10010BC78(v6);
        goto LABEL_16;
      case 3:
        *(float *)&double v12 = sub_10010BB6C(v6);
        [v7 addValue:v12];
        break;
      case 4:
      case 5:
        uint64_t v10 = sub_10010BC40(v6);
        goto LABEL_16;
      case 6:
        [v7 addValue:sub_10010BB34(v6)];
        break;
      case 7:
      case 11:
        uint64_t v10 = sub_10010BC2C(v6);
        goto LABEL_16;
      case 8:
      case 12:
        uint64_t v10 = sub_10010BBA4(v6);
        goto LABEL_16;
      case 9:
        uint64_t v10 = sub_10010BCB0(v6);
        goto LABEL_16;
      case 10:
        uint64_t v10 = sub_10010BCD0(v6);
LABEL_16:
        [v7 addValue:v10];
        break;
      case 17:
        uint64_t v11 = sub_10010BC2C(v6);
        else {
          [v7 addRawValue:v11];
        }
        break;
      default:
        break;
    }
  }

  return sub_10010C0D4((uint64_t)v6, v9);
}

void sub_100131774(void *a1, void *a2, uint64_t *a3, uint64_t a4)
{
  int v8 = sub_1001320DC((uint64_t)a1, a2);
  unint64_t v9 = a3 + 1;
  switch(*(_BYTE *)(a2[1] + 30LL))
  {
    case 0:
      sub_10010BCF0(v9);
      goto LABEL_20;
    case 1:
    case 2:
      sub_10010BC78(v9);
      goto LABEL_20;
    case 3:
      *(float *)&double v10 = sub_10010BB6C(v9);
      uint64_t v11 = v8;
      goto LABEL_5;
    case 4:
    case 5:
      sub_10010BC40(v9);
      goto LABEL_20;
    case 6:
      double v10 = sub_10010BB34(v9);
      uint64_t v11 = v8;
      goto LABEL_5;
    case 7:
    case 0xB:
      sub_10010BC2C(v9);
      goto LABEL_20;
    case 8:
    case 0xC:
      sub_10010BBA4(v9);
      goto LABEL_20;
    case 9:
      sub_10010BCB0(v9);
      goto LABEL_20;
    case 0xA:
      sub_10010BCD0(v9);
LABEL_20:
      uint64_t v11 = v8;
LABEL_5:
      [v11 addValue:v10];
      return;
    case 0xD:
      double v12 = sub_10010BFA0(v9);
      goto LABEL_22;
    case 0xE:
      double v12 = (void *)sub_10010BEB4(v9);
LABEL_22:
      id v14 = v12;
      id v16 = v12;
      uint64_t v13 = v8;
      goto LABEL_23;
    case 0xF:
      id v16 = objc_alloc_init((Class)[a2 msgClass]);
      [a3 readMessage:v16 extensionRegistry:a4];
      goto LABEL_14;
    case 0x10:
      id v16 = objc_alloc_init((Class)[a2 msgClass]);
      [a3 readGroup:*(unsigned int *)(a2[1] + 16) message:v16 extensionRegistry:a4];
LABEL_14:
      uint64_t v13 = v8;
      id v14 = v16;
LABEL_23:
      [v13 addObject:v14];

      break;
    case 0x11:
      uint64_t v15 = sub_10010BC2C(v9);
      else {
        [v8 addRawValue:v15];
      }
      break;
    default:
      return;
  }

void *sub_100131A00(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)sub_100137E7C(a1, (uint64_t)a2);
  if (!v4)
  {
    uint64_t v4 = sub_100134724(a2, 0LL);
    sub_100138498(a1, a2, v4);
  }

  return v4;
}

LABEL_69:
        __int128 v40 = (char *)v40 + 1;
      }

      while (v40 != v38);
      __int128 v38 = [obja countByEnumeratingWithState:&v62 objects:v71 count:16];
    }

    while (v38);
  }

      uint64_t v6 = (char *)v6 + 1;
    }

    while (v6 != v5);
    __int128 v46 = [v3 countByEnumeratingWithState:&v99 objects:v108 count:16];
    int v5 = v46;
  }

  while (v46);
LABEL_85:
  uint64_t v47 = [v57 isWireFormat];
  unknownFields = self->unknownFields_;
  if (v47) {
    __int128 v49 = -[TransparencyGPBUnknownFieldSet serializedSizeAsMessageSet](unknownFields, "serializedSizeAsMessageSet");
  }
  else {
    __int128 v49 = -[TransparencyGPBUnknownFieldSet serializedSize](unknownFields, "serializedSize");
  }
  uint64_t v50 = v49;
  uint64_t v63 = 0u;
  uint64_t v64 = 0u;
  __n128 v61 = 0u;
  uint64_t v62 = 0u;
  extensionMap = self->extensionMap_;
  __int128 v52 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( extensionMap,  "countByEnumeratingWithState:objects:count:",  &v61,  v103,  16LL);
  __int128 v53 = v50 + v4;
  if (v52)
  {
    __n128 v54 = *(void *)v62;
    do
    {
      for (n = 0LL; n != v52; n = (char *)n + 1)
      {
        if (*(void *)v62 != v54) {
          objc_enumerationMutation(extensionMap);
        }
        v53 += sub_10012D500( *(void *)(*((void *)&v61 + 1) + 8LL * (void)n),  -[NSMutableDictionary objectForKey:]( self->extensionMap_,  "objectForKey:",  *(void *)(*((void *)&v61 + 1) + 8LL * (void)n)));
      }

      __int128 v52 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( extensionMap,  "countByEnumeratingWithState:objects:count:",  &v61,  v103,  16LL);
    }

    while (v52);
  }

  return v53;
}

void *sub_1001320DC(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)sub_100137E7C(a1, (uint64_t)a2);
  if (!v4)
  {
    uint64_t v4 = sub_100134B74(a2, 0LL);
    sub_100138498(a1, a2, v4);
  }

  return v4;
}

void sub_1001331C8(_Unwind_Exception *a1)
{
}

uint64_t sub_100133250(uint64_t a1)
{
  uint64_t result = variable initialization expression of KTEligibilityDB.schemaVersion();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += result;
  return result;
}

uint64_t sub_100133288(uint64_t a1)
{
  uint64_t result = sub_10010D9B8();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += result;
  return result;
}

uint64_t sub_1001332C0(uint64_t a1)
{
  uint64_t result = sub_10010D9B8();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += result;
  return result;
}

uint64_t sub_1001332F8(uint64_t a1)
{
  uint64_t result = sub_10010D9B8();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += result;
  return result;
}

uint64_t sub_10013332C(uint64_t a1)
{
  uint64_t result = sub_10010D824();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += result;
  return result;
}

uint64_t sub_100133364(uint64_t a1)
{
  uint64_t result = sub_10010D824();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += result;
  return result;
}

uint64_t sub_10013339C(uint64_t a1)
{
  uint64_t result = sub_10010D824();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += result;
  return result;
}

uint64_t sub_1001333D0(uint64_t a1, unsigned int a2)
{
  uint64_t result = sub_10010DEF8(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += result;
  return result;
}

uint64_t sub_100133408(uint64_t a1, unint64_t a2)
{
  uint64_t result = sub_10010DB6C(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += result;
  return result;
}

uint64_t sub_100133440(uint64_t a1, int a2)
{
  uint64_t result = sub_10010E634(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += result;
  return result;
}

uint64_t sub_100133478(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10010E82C(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += result;
  return result;
}

uint64_t sub_1001334B0(uint64_t a1, unsigned int a2)
{
  uint64_t result = sub_10010E104(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += result;
  return result;
}

uint64_t sub_1001334E8(uint64_t a1, unint64_t a2)
{
  uint64_t result = sub_10010DB6C(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += result;
  return result;
}

uint64_t sub_100133520(uint64_t a1, unsigned int a2)
{
  uint64_t result = sub_10010DEF8(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += result;
  return result;
}

LABEL_70:
  if (!v19) {
    goto LABEL_73;
  }
  __int128 v26 = 1;
  __int128 v27 = sub_100138FF4(v20, 1);
  __int128 v28 = (objc_class *)[v30 messageClass];
  if (!class_addMethod(v28, name, v19, v27)) {
    return sub_10013A1E0(v28, name);
  }
  return v26;
}

BOOL sub_100133FCC(uint64_t a1, uint64_t a2)
{
  return sub_100138364(a2, *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36));
}

void sub_100133FDC(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v5 = objc_opt_class(a2, a2);
    +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInvalidArgumentException,  @"%@: %@ can only be set to NO (to clear field).",  v5,  NSStringFromSelector(*(SEL *)(*(void *)(a1 + 32) + 48LL)));
  }

  sub_1001380F4(a2, *(void *)(a1 + 32));
}

uint64_t sub_100134070(uint64_t a1, uint64_t a2)
{
  return sub_1001383B0(a2, *(_DWORD *)(a1 + 32));
}

TransparencyGPBAutocreatedArray *sub_100134080(uint64_t a1, objc_class *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (unint64_t *)((char *)a2[8].isa + *(unsigned int *)(v2[1] + 24LL));
  uint64_t result = (TransparencyGPBAutocreatedArray *)atomic_load(v3);
  if (!result)
  {
    uint64_t result = sub_100134B74(v2, a2);
    while (1)
    {
      unint64_t v5 = __ldaxr(v3);
      if (v5) {
        break;
      }
    }

    __clrex();
    else {
      uint64_t v6 = &OBJC_IVAR___TransparencyGPBAutocreatedArray__autocreator;
    }
    *(Class *)((char *)&result->super.super.super.isa + *v6) = 0LL;

    return (TransparencyGPBAutocreatedArray *)v5;
  }

  return result;
}

TransparencyGPBAutocreatedDictionary *sub_100134130(uint64_t a1, objc_class *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (unint64_t *)((char *)a2[8].isa + *(unsigned int *)(v2[1] + 24LL));
  uint64_t v4 = (TransparencyGPBAutocreatedDictionary *)atomic_load(v3);
  if (!v4)
  {
    unint64_t v5 = sub_100134724(*(void **)(a1 + 32), a2);
    uint64_t v4 = v5;
    while (1)
    {
      unint64_t v6 = __ldaxr(v3);
      if (v6) {
        break;
      }
    }

    __clrex();
    if ([v2 mapKeyDataType] == 14
      && *(unsigned __int8 *)(v2[1] + 30LL) - 13 < 4)
    {
      id v7 = &OBJC_IVAR___TransparencyGPBAutocreatedDictionary__autocreator;
    }

    else
    {
      id v7 = &OBJC_IVAR___TransparencyGPBInt32Int32Dictionary__autocreator;
    }

    *(Class *)((char *)&v4->super.super.super.isa + *v7) = 0LL;

    return (TransparencyGPBAutocreatedDictionary *)v6;
  }

  return v4;
}

uint64_t sub_100134204(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_100138468(a2, *(void **)(a1 + 32), a3);
}

id sub_100134214(uint64_t a1, uint64_t a2)
{
  return objc_msgSend((id)sub_100137E7C(a2, *(void *)(a1 + 32)), "count");
}

NSData *sub_100134358(void *a1, void *a2, uint64_t *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1[1];
  int v8 = a3 + 1;
  switch(*(_BYTE *)(v5 + 44))
  {
    case 0:
      uint64_t v11 = objc_alloc(&OBJC_CLASS___NSNumber);
      BOOL v12 = sub_10010BCF0(v8);
      return (NSData *)-[NSNumber initWithBool:](v11, "initWithBool:", v12);
    case 1:
      uint64_t v13 = objc_alloc(&OBJC_CLASS___NSNumber);
      uint64_t v14 = sub_10010BC78(v8);
      return (NSData *)-[NSNumber initWithUnsignedInt:](v13, "initWithUnsignedInt:", v14);
    case 2:
      uint64_t v15 = objc_alloc(&OBJC_CLASS___NSNumber);
      uint64_t v16 = sub_10010BC78(v8);
      goto LABEL_11;
    case 3:
      id v17 = objc_alloc(&OBJC_CLASS___NSNumber);
      sub_10010BB6C(v8);
      return (NSData *)-[NSNumber initWithFloat:](v17, "initWithFloat:", v31);
    case 4:
      id v18 = objc_alloc(&OBJC_CLASS___NSNumber);
      uint64_t v19 = sub_10010BC40(v8);
      return (NSData *)-[NSNumber initWithUnsignedLongLong:](v18, "initWithUnsignedLongLong:", v19);
    case 5:
      __int128 v25 = objc_alloc(&OBJC_CLASS___NSNumber);
      uint64_t v26 = sub_10010BC40(v8);
      return (NSData *)-[NSNumber initWithLongLong:](v25, "initWithLongLong:", v26);
    case 6:
      __int128 v27 = objc_alloc(&OBJC_CLASS___NSNumber);
      sub_10010BB34(v8);
      return (NSData *)-[NSNumber initWithDouble:](v27, "initWithDouble:", v29);
    case 7:
      uint64_t v15 = objc_alloc(&OBJC_CLASS___NSNumber);
      uint64_t v16 = sub_10010BC2C(v8);
      goto LABEL_11;
    case 8:
      __int128 v25 = objc_alloc(&OBJC_CLASS___NSNumber);
      uint64_t v26 = sub_10010BBA4(v8);
      return (NSData *)-[NSNumber initWithLongLong:](v25, "initWithLongLong:", v26);
    case 9:
      uint64_t v15 = objc_alloc(&OBJC_CLASS___NSNumber);
      uint64_t v16 = sub_10010BCB0(v8);
LABEL_11:
      uint64_t v20 = v16;
      uint64_t v21 = v15;
      return (NSData *)-[NSNumber initWithInt:](v21, "initWithInt:", v20);
    case 0xA:
      __int128 v25 = objc_alloc(&OBJC_CLASS___NSNumber);
      uint64_t v26 = sub_10010BCD0(v8);
      return (NSData *)-[NSNumber initWithLongLong:](v25, "initWithLongLong:", v26);
    case 0xB:
      uint64_t v13 = objc_alloc(&OBJC_CLASS___NSNumber);
      uint64_t v14 = sub_10010BC2C(v8);
      return (NSData *)-[NSNumber initWithUnsignedInt:](v13, "initWithUnsignedInt:", v14);
    case 0xC:
      id v18 = objc_alloc(&OBJC_CLASS___NSNumber);
      uint64_t v19 = sub_10010BBA4(v8);
      return (NSData *)-[NSNumber initWithUnsignedLongLong:](v18, "initWithUnsignedLongLong:", v19);
    case 0xD:
      return sub_10010BFA0(a3 + 1);
    case 0xE:
      return (NSData *)sub_10010BEB4(a3 + 1);
    case 0xF:
    case 0x10:
      if (a5) {
        id v10 = a5;
      }
      else {
        id v10 = objc_alloc_init((Class)objc_msgSend( objc_msgSend(objc_msgSend(a1, "msgClass"), "descriptor"),  "messageClass"));
      }
      id v28 = v10;
      if (*(_BYTE *)(v5 + 44) == 16)
      {
        [a3 readGroup:*(unsigned int *)(v5 + 40) message:v10 extensionRegistry:a4];
      }

      else if ((*(_BYTE *)(v5 + 45) & 4) != 0)
      {
        [v10 mergeFromCodedInputStream:a3 extensionRegistry:a4];
      }

      else
      {
        [a3 readMessage:v10 extensionRegistry:a4];
      }

      return (NSData *)v28;
    case 0x11:
      uint64_t v23 = sub_10010BC2C(a3 + 1);
      id v24 = [a1 enumDescriptor];
      if ([v24 isClosed]
        && !((unsigned int (*)(uint64_t))[v24 enumVerifier])(v23))
      {
        [(id)sub_100130E98(a2) mergeVarintField:*(unsigned int *)(a1[1] + 40) value:v23];
        return 0LL;
      }

      else
      {
        uint64_t v21 = objc_alloc(&OBJC_CLASS___NSNumber);
        uint64_t v20 = v23;
        return (NSData *)-[NSNumber initWithInt:](v21, "initWithInt:", v20);
      }

    default:
      return 0LL;
  }

TransparencyGPBAutocreatedDictionary *sub_100134724(void *a1, objc_class *a2)
{
  unsigned int v4 = [a1 mapKeyDataType];
  uint64_t result = 0LL;
  int v6 = *(unsigned __int8 *)(a1[1] + 30LL);
  switch(v4)
  {
    case 0u:
      uint64_t result = 0LL;
      switch(*(_BYTE *)(a1[1] + 30LL))
      {
        case 0:
          id v7 = &OBJC_CLASS___TransparencyGPBBoolBoolDictionary;
          goto LABEL_63;
        case 1:
        case 0xB:
          id v7 = &OBJC_CLASS___TransparencyGPBBoolUInt32Dictionary;
          goto LABEL_63;
        case 2:
        case 7:
        case 9:
          id v7 = &OBJC_CLASS___TransparencyGPBBoolInt32Dictionary;
          goto LABEL_63;
        case 3:
          id v7 = &OBJC_CLASS___TransparencyGPBBoolFloatDictionary;
          goto LABEL_63;
        case 4:
        case 0xC:
          id v7 = &OBJC_CLASS___TransparencyGPBBoolUInt64Dictionary;
          goto LABEL_63;
        case 5:
        case 8:
        case 0xA:
          id v7 = &OBJC_CLASS___TransparencyGPBBoolInt64Dictionary;
          goto LABEL_63;
        case 6:
          id v7 = &OBJC_CLASS___TransparencyGPBBoolDoubleDictionary;
          goto LABEL_63;
        case 0xD:
        case 0xE:
        case 0xF:
          id v7 = &OBJC_CLASS___TransparencyGPBBoolObjectDictionary;
          goto LABEL_63;
        case 0x10:
          return result;
        case 0x11:
          int v8 = &OBJC_CLASS___TransparencyGPBBoolEnumDictionary;
          goto LABEL_72;
        default:
          goto LABEL_64;
      }

    case 1u:
    case 0xBu:
      uint64_t result = 0LL;
      switch(*(_BYTE *)(a1[1] + 30LL))
      {
        case 0:
          id v7 = &OBJC_CLASS___TransparencyGPBUInt32BoolDictionary;
          goto LABEL_63;
        case 1:
        case 0xB:
          id v7 = &OBJC_CLASS___TransparencyGPBUInt32UInt32Dictionary;
          goto LABEL_63;
        case 2:
        case 7:
        case 9:
          id v7 = &OBJC_CLASS___TransparencyGPBUInt32Int32Dictionary;
          goto LABEL_63;
        case 3:
          id v7 = &OBJC_CLASS___TransparencyGPBUInt32FloatDictionary;
          goto LABEL_63;
        case 4:
        case 0xC:
          id v7 = &OBJC_CLASS___TransparencyGPBUInt32UInt64Dictionary;
          goto LABEL_63;
        case 5:
        case 8:
        case 0xA:
          id v7 = &OBJC_CLASS___TransparencyGPBUInt32Int64Dictionary;
          goto LABEL_63;
        case 6:
          id v7 = &OBJC_CLASS___TransparencyGPBUInt32DoubleDictionary;
          goto LABEL_63;
        case 0xD:
        case 0xE:
        case 0xF:
          id v7 = &OBJC_CLASS___TransparencyGPBUInt32ObjectDictionary;
          goto LABEL_63;
        case 0x10:
          return result;
        case 0x11:
          int v8 = &OBJC_CLASS___TransparencyGPBUInt32EnumDictionary;
          goto LABEL_72;
        default:
          goto LABEL_64;
      }

    case 2u:
    case 7u:
    case 9u:
      uint64_t result = 0LL;
      switch(*(_BYTE *)(a1[1] + 30LL))
      {
        case 0:
          id v7 = &OBJC_CLASS___TransparencyGPBInt32BoolDictionary;
          goto LABEL_63;
        case 1:
        case 0xB:
          id v7 = &OBJC_CLASS___TransparencyGPBInt32UInt32Dictionary;
          goto LABEL_63;
        case 2:
        case 7:
        case 9:
          id v7 = &OBJC_CLASS___TransparencyGPBInt32Int32Dictionary;
          goto LABEL_63;
        case 3:
          id v7 = &OBJC_CLASS___TransparencyGPBInt32FloatDictionary;
          goto LABEL_63;
        case 4:
        case 0xC:
          id v7 = &OBJC_CLASS___TransparencyGPBInt32UInt64Dictionary;
          goto LABEL_63;
        case 5:
        case 8:
        case 0xA:
          id v7 = &OBJC_CLASS___TransparencyGPBInt32Int64Dictionary;
          goto LABEL_63;
        case 6:
          id v7 = &OBJC_CLASS___TransparencyGPBInt32DoubleDictionary;
          goto LABEL_63;
        case 0xD:
        case 0xE:
        case 0xF:
          id v7 = &OBJC_CLASS___TransparencyGPBInt32ObjectDictionary;
          goto LABEL_63;
        case 0x10:
          return result;
        case 0x11:
          int v8 = &OBJC_CLASS___TransparencyGPBInt32EnumDictionary;
          goto LABEL_72;
        default:
          goto LABEL_64;
      }

    case 3u:
    case 6u:
    case 0xDu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
      return result;
    case 4u:
    case 0xCu:
      uint64_t result = 0LL;
      switch(*(_BYTE *)(a1[1] + 30LL))
      {
        case 0:
          id v7 = &OBJC_CLASS___TransparencyGPBUInt64BoolDictionary;
          goto LABEL_63;
        case 1:
        case 0xB:
          id v7 = &OBJC_CLASS___TransparencyGPBUInt64UInt32Dictionary;
          goto LABEL_63;
        case 2:
        case 7:
        case 9:
          id v7 = &OBJC_CLASS___TransparencyGPBUInt64Int32Dictionary;
          goto LABEL_63;
        case 3:
          id v7 = &OBJC_CLASS___TransparencyGPBUInt64FloatDictionary;
          goto LABEL_63;
        case 4:
        case 0xC:
          id v7 = &OBJC_CLASS___TransparencyGPBUInt64UInt64Dictionary;
          goto LABEL_63;
        case 5:
        case 8:
        case 0xA:
          id v7 = &OBJC_CLASS___TransparencyGPBUInt64Int64Dictionary;
          goto LABEL_63;
        case 6:
          id v7 = &OBJC_CLASS___TransparencyGPBUInt64DoubleDictionary;
          goto LABEL_63;
        case 0xD:
        case 0xE:
        case 0xF:
          id v7 = &OBJC_CLASS___TransparencyGPBUInt64ObjectDictionary;
          goto LABEL_63;
        case 0x10:
          return result;
        case 0x11:
          int v8 = &OBJC_CLASS___TransparencyGPBUInt64EnumDictionary;
          goto LABEL_72;
        default:
          goto LABEL_64;
      }

    case 5u:
    case 8u:
    case 0xAu:
      uint64_t result = 0LL;
      switch(*(_BYTE *)(a1[1] + 30LL))
      {
        case 0:
          id v7 = &OBJC_CLASS___TransparencyGPBInt64BoolDictionary;
          goto LABEL_63;
        case 1:
        case 0xB:
          id v7 = &OBJC_CLASS___TransparencyGPBInt64UInt32Dictionary;
          goto LABEL_63;
        case 2:
        case 7:
        case 9:
          id v7 = &OBJC_CLASS___TransparencyGPBInt64Int32Dictionary;
          goto LABEL_63;
        case 3:
          id v7 = &OBJC_CLASS___TransparencyGPBInt64FloatDictionary;
          goto LABEL_63;
        case 4:
        case 0xC:
          id v7 = &OBJC_CLASS___TransparencyGPBInt64UInt64Dictionary;
          goto LABEL_63;
        case 5:
        case 8:
        case 0xA:
          id v7 = &OBJC_CLASS___TransparencyGPBInt64Int64Dictionary;
          goto LABEL_63;
        case 6:
          id v7 = &OBJC_CLASS___TransparencyGPBInt64DoubleDictionary;
          goto LABEL_63;
        case 0xD:
        case 0xE:
        case 0xF:
          id v7 = &OBJC_CLASS___TransparencyGPBInt64ObjectDictionary;
          goto LABEL_63;
        case 0x10:
          return result;
        case 0x11:
          int v8 = &OBJC_CLASS___TransparencyGPBInt64EnumDictionary;
          goto LABEL_72;
        default:
          goto LABEL_64;
      }

    case 0xEu:
      uint64_t result = 0LL;
      switch(*(_BYTE *)(a1[1] + 30LL))
      {
        case 0:
          id v7 = &OBJC_CLASS___TransparencyGPBStringBoolDictionary;
          goto LABEL_63;
        case 1:
        case 0xB:
          id v7 = &OBJC_CLASS___TransparencyGPBStringUInt32Dictionary;
          goto LABEL_63;
        case 2:
        case 7:
        case 9:
          id v7 = &OBJC_CLASS___TransparencyGPBStringInt32Dictionary;
          goto LABEL_63;
        case 3:
          id v7 = &OBJC_CLASS___TransparencyGPBStringFloatDictionary;
          goto LABEL_63;
        case 4:
        case 0xC:
          id v7 = &OBJC_CLASS___TransparencyGPBStringUInt64Dictionary;
          goto LABEL_63;
        case 5:
        case 8:
        case 0xA:
          id v7 = &OBJC_CLASS___TransparencyGPBStringInt64Dictionary;
          goto LABEL_63;
        case 6:
          id v7 = &OBJC_CLASS___TransparencyGPBStringDoubleDictionary;
LABEL_63:
          uint64_t result = (TransparencyGPBAutocreatedDictionary *)objc_alloc_init(v7);
          goto LABEL_64;
        case 0xD:
        case 0xE:
        case 0xF:
          if (a2)
          {
            uint64_t result = objc_alloc_init(&OBJC_CLASS___TransparencyGPBAutocreatedDictionary);
            goto LABEL_67;
          }

          uint64_t result = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
          break;
        case 0x10:
          return result;
        case 0x11:
          int v8 = &OBJC_CLASS___TransparencyGPBStringEnumDictionary;
LABEL_72:
          uint64_t result = (TransparencyGPBAutocreatedDictionary *)objc_msgSend( [v8 alloc],  "initWithValidationFunction:",  objc_msgSend( objc_msgSend(a1, "enumDescriptor"),  "enumVerifier"));
          if (a2) {
            goto LABEL_65;
          }
          return result;
        default:
          goto LABEL_64;
      }

      break;
    default:
LABEL_64:
      if (a2)
      {
LABEL_65:
        if (v4 == 14 && (v6 - 13) <= 3) {
LABEL_67:
        }
          unint64_t v9 = &OBJC_IVAR___TransparencyGPBAutocreatedDictionary__autocreator;
        else {
          unint64_t v9 = &OBJC_IVAR___TransparencyGPBInt32Int32Dictionary__autocreator;
        }
        *(Class *)((char *)&result->super.super.super.isa + *v9) = a2;
      }

      break;
  }

  return result;
}

TransparencyGPBAutocreatedArray *sub_100134B74(void *a1, objc_class *a2)
{
  int v3 = *(unsigned __int8 *)(a1[1] + 30LL);
  switch(*(_BYTE *)(a1[1] + 30LL))
  {
    case 0:
      uint64_t v5 = &OBJC_CLASS___TransparencyGPBBoolArray;
      goto LABEL_14;
    case 1:
    case 0xB:
      uint64_t v5 = &OBJC_CLASS___TransparencyGPBUInt32Array;
      goto LABEL_14;
    case 2:
    case 7:
    case 9:
      uint64_t v5 = &OBJC_CLASS___TransparencyGPBInt32Array;
      goto LABEL_14;
    case 3:
      uint64_t v5 = &OBJC_CLASS___TransparencyGPBFloatArray;
      goto LABEL_14;
    case 4:
    case 0xC:
      uint64_t v5 = &OBJC_CLASS___TransparencyGPBUInt64Array;
      goto LABEL_14;
    case 5:
    case 8:
    case 0xA:
      uint64_t v5 = &OBJC_CLASS___TransparencyGPBInt64Array;
      goto LABEL_14;
    case 6:
      uint64_t v5 = &OBJC_CLASS___TransparencyGPBDoubleArray;
LABEL_14:
      uint64_t result = (TransparencyGPBAutocreatedArray *)objc_alloc_init(v5);
      if (a2) {
        goto LABEL_15;
      }
      return result;
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
      if (!a2) {
        return (TransparencyGPBAutocreatedArray *)objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      }
      uint64_t result = objc_alloc_init(&OBJC_CLASS___TransparencyGPBAutocreatedArray);
LABEL_16:
      int v6 = &OBJC_IVAR___TransparencyGPBAutocreatedArray__autocreator;
LABEL_18:
      *(Class *)((char *)&result->super.super.super.isa + *v6) = a2;
      return result;
    case 0x11:
      uint64_t result = -[TransparencyGPBEnumArray initWithValidationFunction:]( [TransparencyGPBEnumArray alloc],  "initWithValidationFunction:",  objc_msgSend(objc_msgSend(a1, "enumDescriptor"), "enumVerifier"));
      if (!a2) {
        return result;
      }
      goto LABEL_15;
    default:
      uint64_t result = 0LL;
      if (!a2) {
        return result;
      }
LABEL_15:
      int v6 = &OBJC_IVAR___TransparencyGPBInt32Array__autocreator;
      goto LABEL_18;
  }

BOOL sub_100134CB8(uint64_t a1, uint64_t a2)
{
  return sub_100138914(a2, *(void **)(a1 + 32));
}

id sub_100134CC8(uint64_t a1, uint64_t a2)
{
  return sub_100138708(a2, *(void **)(a1 + 32));
}

id sub_100134CD8(uint64_t a1, uint64_t a2)
{
  return sub_100138708(a2, *(void **)(a1 + 32));
}

float sub_100134CE8(uint64_t a1, uint64_t a2)
{
  return sub_100138C60(a2, *(void **)(a1 + 32));
}

id sub_100134CF8(uint64_t a1, uint64_t a2)
{
  return sub_100138AF8(a2, *(void **)(a1 + 32));
}

id sub_100134D08(uint64_t a1, uint64_t a2)
{
  return sub_100138AF8(a2, *(void **)(a1 + 32));
}

double sub_100134D18(uint64_t a1, uint64_t a2)
{
  return sub_100138DE0(a2, *(void **)(a1 + 32));
}

id sub_100134D28(uint64_t a1, uint64_t a2)
{
  return sub_100138708(a2, *(void **)(a1 + 32));
}

id sub_100134D38(uint64_t a1, uint64_t a2)
{
  return sub_100138AF8(a2, *(void **)(a1 + 32));
}

id sub_100134D48(uint64_t a1, uint64_t a2)
{
  return sub_100138708(a2, *(void **)(a1 + 32));
}

id sub_100134D58(uint64_t a1, uint64_t a2)
{
  return sub_100138AF8(a2, *(void **)(a1 + 32));
}

id sub_100134D68(uint64_t a1, uint64_t a2)
{
  return sub_100138708(a2, *(void **)(a1 + 32));
}

id sub_100134D78(uint64_t a1, uint64_t a2)
{
  return sub_100138AF8(a2, *(void **)(a1 + 32));
}

void *sub_100134D88(uint64_t a1, uint64_t a2)
{
  return sub_10012F03C(a2, *(void **)(a1 + 32));
}

void *sub_100134D98(uint64_t a1, uint64_t a2)
{
  return sub_10012F03C(a2, *(void **)(a1 + 32));
}

void *sub_100134DA8(uint64_t a1, uint64_t a2)
{
  return sub_10012F03C(a2, *(void **)(a1 + 32));
}

void *sub_100134DB8(uint64_t a1, uint64_t a2)
{
  return sub_10012F03C(a2, *(void **)(a1 + 32));
}

uint64_t sub_100134DC8(uint64_t a1, uint64_t a2)
{
  return sub_1001386AC(a2, *(void **)(a1 + 32));
}

id sub_100134DD8(uint64_t a1, void *a2, int a3)
{
  return sub_1001389C8(a2, *(void *)(a1 + 32), a3);
}

id sub_100134DE8(uint64_t a1, void *a2, int a3)
{
  return sub_100138828(a2, *(void *)(a1 + 32), a3);
}

id sub_100134DF8(uint64_t a1, void *a2, int a3)
{
  return sub_100138828(a2, *(void *)(a1 + 32), a3);
}

id sub_100134E08(uint64_t a1, void *a2, float a3)
{
  return sub_100138CF8(a2, *(void *)(a1 + 32), a3);
}

id sub_100134E18(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_100138B7C(a2, *(void *)(a1 + 32), a3);
}

id sub_100134E28(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_100138B7C(a2, *(void *)(a1 + 32), a3);
}

id sub_100134E38(uint64_t a1, void *a2, double a3)
{
  return sub_100138E78(a2, *(void *)(a1 + 32), a3);
}

id sub_100134E48(uint64_t a1, void *a2, int a3)
{
  return sub_100138828(a2, *(void *)(a1 + 32), a3);
}

id sub_100134E58(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_100138B7C(a2, *(void *)(a1 + 32), a3);
}

id sub_100134E68(uint64_t a1, void *a2, int a3)
{
  return sub_100138828(a2, *(void *)(a1 + 32), a3);
}

id sub_100134E78(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_100138B7C(a2, *(void *)(a1 + 32), a3);
}

id sub_100134E88(uint64_t a1, void *a2, int a3)
{
  return sub_100138828(a2, *(void *)(a1 + 32), a3);
}

id sub_100134E98(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_100138B7C(a2, *(void *)(a1 + 32), a3);
}

uint64_t sub_100134EA8(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_100138498(a2, *(void **)(a1 + 32), [a3 copy]);
}

uint64_t sub_100134EDC(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_100138498(a2, *(void **)(a1 + 32), [a3 copy]);
}

uint64_t sub_100134F10(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_100138468(a2, *(void **)(a1 + 32), a3);
}

uint64_t sub_100134F20(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_100138468(a2, *(void **)(a1 + 32), a3);
}

id sub_100134F30(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_100138790(a2, *(void **)(a1 + 32), a3);
}

uint64_t sub_100134FE8(uint64_t a1, uint64_t a2)
{
  return a2;
}

CFStringRef sub_100134FF4(char *cStr)
{
  return CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
}

BOOL sub_100135010(const char *a1, const char *a2)
{
  return strcmp(a1, a2) == 0;
}

uint64_t sub_10013502C(_BYTE *a1)
{
  LOBYTE(v1) = *a1;
  if (*a1)
  {
    unsigned int v2 = 0;
    unsigned int v3 = 1;
    do
    {
      unsigned int v2 = (1025 * (v2 + (char)v1)) ^ ((1025 * (v2 + (char)v1)) >> 6);
      int v1 = a1[v3++];
    }

    while (v1);
    unsigned int v4 = 9 * v2;
  }

  else
  {
    unsigned int v4 = 0;
  }

  return 32769 * (v4 ^ (v4 >> 11));
}

uint64_t sub_1001350D0(objc_class *a1, const char *a2)
{
  uint64_t result = (uint64_t)sub_100135194(a1, a2);
  if (result)
  {
    uint64_t v5 = result;
    int v6 = sub_100138FF4("getClassValue", 0);
    Name = class_getName(a1);
    MetaClass = objc_getMetaClass(Name);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001352E0;
    block[3] = &unk_100283408;
    block[4] = v5;
    unint64_t v9 = imp_implementationWithBlock(block);
    return class_addMethod(MetaClass, a2, v9, v6) || sub_10013A1E0(MetaClass, a2);
  }

  return result;
}

const void *sub_100135194(objc_class *a1, SEL sel)
{
  Name = sel_getName(sel);
  int v4 = *(unsigned __int8 *)Name;
  if (v4 != 95)
  {
    int v6 = Name;
    uint64_t v7 = 1LL;
    if (!*Name)
    {
LABEL_6:
      int v8 = class_getName(a1);
      size_t v9 = strlen(v8);
      __chkstk_darwin(v9);
      uint64_t v11 = (char *)&v14 - v10;
      bzero((char *)&v14 - v10, v12);
      memcpy(v11, v8, v9);
      v11[v9] = 95;
      memcpy(&v11[v9 + 1], v6, v7 - 1);
      v11[v9 + v7] = 0;
      os_unfair_lock_lock((os_unfair_lock_t)&unk_1002EE720);
      Value = CFDictionaryGetValue((CFDictionaryRef)qword_1002EE710, v11);
      os_unfair_lock_unlock((os_unfair_lock_t)&unk_1002EE720);
      return Value;
    }

    while (v4 != 58)
    {
      int v4 = Name[v7++];
      if (!v4) {
        goto LABEL_6;
      }
    }
  }

  return 0LL;
}

uint64_t sub_1001352E0(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

unint64_t sub_1001353B0()
{
  if (!atomic_load(&qword_1002EE730))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:valueNames:values:count:enumVerifier:flags:]( &OBJC_CLASS___TransparencyGPBEnumDescriptor,  "allocDescriptorForName:valueNames:values:count:enumVerifier:flags:",  @"TransparencyGPBNullValue",  "NullValue",  &unk_10024BD9C,  1LL,  sub_10013542C,  0LL);
    while (!__ldaxr(&qword_1002EE730))
    {
    }

    __clrex();
  }

  return atomic_load(&qword_1002EE730);
}

BOOL sub_10013542C(int a1)
{
  return a1 == 0;
}

id sub_10013552C(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[TransparencyGPBValue descriptor](TransparencyGPBValue, "descriptor"),  "fieldWithNumber:",  1));
}

id sub_100135564(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[TransparencyGPBValue descriptor](TransparencyGPBValue, "descriptor"),  "fieldWithNumber:",  1),  a2);
}

void sub_1001355A4(uint64_t a1)
{
}

unint64_t sub_1001356B8()
{
  if (!atomic_load(&qword_1002EE758))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:valueNames:values:count:enumVerifier:flags:]( &OBJC_CLASS___TransparencyGPBEnumDescriptor,  "allocDescriptorForName:valueNames:values:count:enumVerifier:flags:",  @"TransparencyGPBSyntax",  "SyntaxProto2",  &unk_10024BDBC,  2LL,  sub_100135734,  0LL);
    while (!__ldaxr(&qword_1002EE758))
    {
    }

    __clrex();
  }

  return atomic_load(&qword_1002EE758);
}

BOOL sub_100135734(unsigned int a1)
{
  return a1 < 2;
}

unint64_t sub_100135740()
{
  if (!atomic_load(&qword_1002EE760))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:valueNames:values:count:enumVerifier:flags:]( &OBJC_CLASS___TransparencyGPBEnumDescriptor,  "allocDescriptorForName:valueNames:values:count:enumVerifier:flags:",  @"TransparencyGPBField_Kind",  "TypeUnknown",  &unk_10024BE98,  19LL,  sub_1001357BC,  0LL);
    while (!__ldaxr(&qword_1002EE760))
    {
    }

    __clrex();
  }

  return atomic_load(&qword_1002EE760);
}

BOOL sub_1001357BC(unsigned int a1)
{
  return a1 < 0x13;
}

unint64_t sub_1001357C8()
{
  if (!atomic_load(&qword_1002EE768))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:valueNames:values:count:enumVerifier:flags:]( &OBJC_CLASS___TransparencyGPBEnumDescriptor,  "allocDescriptorForName:valueNames:values:count:enumVerifier:flags:",  @"TransparencyGPBField_Cardinality",  "CardinalityUnknown",  &unk_10024BF34,  4LL,  sub_100135844,  0LL);
    while (!__ldaxr(&qword_1002EE768))
    {
    }

    __clrex();
  }

  return atomic_load(&qword_1002EE768);
}

BOOL sub_100135844(unsigned int a1)
{
  return a1 < 4;
}

id sub_1001358BC(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[TransparencyGPBType descriptor](TransparencyGPBType, "descriptor"),  "fieldWithNumber:",  6));
}

id sub_1001358F4(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[TransparencyGPBType descriptor](TransparencyGPBType, "descriptor"),  "fieldWithNumber:",  6),  a2);
}

id sub_1001359B4(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[TransparencyGPBField descriptor](TransparencyGPBField, "descriptor"),  "fieldWithNumber:",  1));
}

id sub_1001359EC(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[TransparencyGPBField descriptor](TransparencyGPBField, "descriptor"),  "fieldWithNumber:",  1),  a2);
}

id sub_100135A2C(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[TransparencyGPBField descriptor](TransparencyGPBField, "descriptor"),  "fieldWithNumber:",  2));
}

id sub_100135A64(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[TransparencyGPBField descriptor](TransparencyGPBField, "descriptor"),  "fieldWithNumber:",  2),  a2);
}

id sub_100135B10(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[TransparencyGPBEnum descriptor](TransparencyGPBEnum, "descriptor"),  "fieldWithNumber:",  5));
}

id sub_100135B48(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[TransparencyGPBEnum descriptor](TransparencyGPBEnum, "descriptor"),  "fieldWithNumber:",  5),  a2);
}

void sub_10013637C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, char a44)
{
}

uint64_t sub_1001363AC(uint64_t a1, unint64_t a2)
{
  uint64_t result = sub_10010F9AC(*(_DWORD *)(a1 + 40), a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += result;
  return result;
}

uint64_t sub_1001363E4(uint64_t a1)
{
  uint64_t result = sub_10010F960(*(_DWORD *)(a1 + 40));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += result;
  return result;
}

uint64_t sub_10013641C(uint64_t a1)
{
  uint64_t result = sub_10010F8C8(*(_DWORD *)(a1 + 40));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += result;
  return result;
}

id sub_1001368BC(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "appendFormat:", @"\t%llu\n", a2);
}

id sub_1001368E8(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "appendFormat:", @"\t%u\n", a2);
}

id sub_100136914(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "appendFormat:", @"\t%llu\n", a2);
}

void sub_100136D9C(uint64_t a1, void *a2, void *a3)
{
  id v4 = [a2 copy];
  [a3 addField:v4];
}

int sub_1001370A0(id a1, const void *a2, const void *a3)
{
  if (*(void *)a2 == *(void *)a3) {
    int v3 = 0;
  }
  else {
    int v3 = -1;
  }
  if (*(void *)a2 > *(void *)a3) {
    return 1;
  }
  else {
    return v3;
  }
}

int sub_100137210(id a1, const void *a2, const void *a3)
{
  if (*(void *)a2 == *(void *)a3) {
    int v3 = 0;
  }
  else {
    int v3 = -1;
  }
  if (*(void *)a2 > *(void *)a3) {
    return 1;
  }
  else {
    return v3;
  }
}

id sub_1001372D8(uint64_t a1, void *a2, void *a3)
{
  id result = [a2 serializedSize];
  *a3 += result;
  return result;
}

id sub_100137320(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "writeAsMessageSetExtensionToOutput:");
}

id sub_100137360(uint64_t a1, void *a2, void *a3)
{
  id result = [a2 serializedSizeAsMessageSetExtension];
  *a3 += result;
  return result;
}

void sub_10013754C(uint64_t a1, void *a2, void *a3)
{
  id v5 = [a2 number];
  if (!(_DWORD)v5) {
    +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInvalidArgumentException,  @"Zero is not a valid field number.");
  }
  id v6 = [a3 mutableFieldForNumber:v5 create:0];
  if (v6)
  {
    _[v6 mergeFromField:a2];
  }

  else
  {
    id v7 = [a2 copy];
    [a3 addField:v7];
  }

uint64_t sub_100137998()
{
  if (qword_1002EE798 != -1) {
    dispatch_once(&qword_1002EE798, &stru_1002834D8);
  }
  return qword_1002EE7A0;
}

void sub_1001379D8(id a1)
{
  qword_1002EE7A0 = objc_alloc_init(&OBJC_CLASS___NSData);
}

id sub_1001379FC(id result)
{
  if (!result) {
    return result;
  }
  id v1 = +[NSMutableArray arrayWithObject:](&OBJC_CLASS___NSMutableArray, "arrayWithObject:", result);
  id result = -[NSMutableArray count](v1, "count");
  if (!result) {
    return result;
  }
  do
  {
    unsigned int v2 = -[NSMutableArray lastObject](v1, "lastObject");
    -[NSMutableArray removeLastObject](v1, "removeLastObject");
    [v2 setUnknownFields:0];
    id v4 = objc_msgSend((id)objc_opt_class(v2, v3), "descriptor");
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    id v5 = (void *)v4[1];
    id v6 = [v5 countByEnumeratingWithState:&v38 objects:v43 count:16];
    if (!v6) {
      goto LABEL_35;
    }
    id v7 = v6;
    uint64_t v8 = *(void *)v39;
    do
    {
      for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v39 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void **)(*((void *)&v38 + 1) + 8LL * (void)i);
        if (*(unsigned __int8 *)(v10[1] + 30LL) - 15 <= 1)
        {
          unsigned int v11 = [*(id *)(*((void *)&v38 + 1) + 8 * (void)i) fieldType];
          if (v11 == 2)
          {
            uint64_t v17 = v2[8];
            if (v17) {
              id v18 = *(void **)(v17 + *(unsigned int *)(v10[1] + 24LL));
            }
            else {
              id v18 = 0LL;
            }
            switch([v10 mapKeyDataType])
            {
              case 0u:
                v37[0] = _NSConcreteStackBlock;
                v37[1] = 3221225472LL;
                v37[2] = sub_100137EB4;
                v37[3] = &unk_100283500;
                v37[4] = v1;
                uint64_t v19 = v37;
                goto LABEL_32;
              case 1u:
              case 0xBu:
                v36[0] = _NSConcreteStackBlock;
                v36[1] = 3221225472LL;
                v36[2] = sub_100137EBC;
                v36[3] = &unk_100283528;
                v36[4] = v1;
                uint64_t v19 = v36;
                goto LABEL_32;
              case 2u:
              case 7u:
              case 9u:
                v35[0] = _NSConcreteStackBlock;
                v35[1] = 3221225472LL;
                v35[2] = sub_100137EC4;
                v35[3] = &unk_100283550;
                v35[4] = v1;
                uint64_t v19 = v35;
                goto LABEL_32;
              case 4u:
              case 0xCu:
                v34[0] = _NSConcreteStackBlock;
                v34[1] = 3221225472LL;
                v34[2] = sub_100137ECC;
                v34[3] = &unk_100283578;
                v34[4] = v1;
                uint64_t v19 = v34;
                goto LABEL_32;
              case 5u:
              case 8u:
              case 0xAu:
                v33[0] = _NSConcreteStackBlock;
                v33[1] = 3221225472LL;
                _OWORD v33[2] = sub_100137ED4;
                v33[3] = &unk_1002835A0;
                v33[4] = v1;
                uint64_t v19 = v33;
                goto LABEL_32;
              case 0xEu:
                v32[0] = _NSConcreteStackBlock;
                v32[1] = 3221225472LL;
                uint64_t v32[2] = sub_100137EDC;
                v32[3] = &unk_1002835C8;
                v32[4] = v1;
                uint64_t v19 = v32;
LABEL_32:
                [v18 enumerateKeysAndObjectsUsingBlock:v19];
                break;
              default:
                continue;
            }
          }

          else if (v11 == 1)
          {
            uint64_t v15 = v2[8];
            if (v15) {
              uint64_t v16 = *(void **)(v15 + *(unsigned int *)(v10[1] + 24LL));
            }
            else {
              uint64_t v16 = 0LL;
            }
            if ([v16 count]) {
              -[NSMutableArray addObjectsFromArray:](v1, "addObjectsFromArray:", v16);
            }
          }

          else
          {
            if (v11) {
              continue;
            }
            size_t v12 = (_DWORD *)v10[1];
            unint64_t v13 = v12[5];
            if ((v13 & 0x80000000) != 0)
            {
              uint64_t v14 = v2[8];
LABEL_23:
              -[NSMutableArray addObject:](v1, "addObject:", *(void *)(v14 + v12[6]));
              continue;
            }

            uint64_t v14 = v2[8];
            if (((*(_DWORD *)(v14 + ((v13 >> 3) & 0x1FFFFFFC)) >> v13) & 1) != 0) {
              goto LABEL_23;
            }
          }
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v38 objects:v43 count:16];
    }

    while (v7);
LABEL_35:
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    id v20 = objc_msgSend(v2, "extensionsCurrentlySet", 0);
    id v21 = [v20 countByEnumeratingWithState:&v28 objects:v42 count:16];
    if (v21)
    {
      id v22 = v21;
      uint64_t v23 = *(void *)v29;
      do
      {
        for (uint64_t j = 0LL; j != v22; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v29 != v23) {
            objc_enumerationMutation(v20);
          }
          __int128 v25 = *(void **)(*((void *)&v28 + 1) + 8LL * (void)j);
          if ([v25 dataType] - 15 <= 1)
          {
            unsigned int v26 = [v25 isRepeated];
            id v27 = [v2 getExtension:v25];
            if (v26) {
              -[NSMutableArray addObjectsFromArray:](v1, "addObjectsFromArray:", v27);
            }
            else {
              -[NSMutableArray addObject:](v1, "addObject:", v27);
            }
          }
        }

        id v22 = [v20 countByEnumeratingWithState:&v28 objects:v42 count:16];
      }

      while (v22);
    }

    id result = -[NSMutableArray count](v1, "count");
  }

  while (result);
  return result;
}

uint64_t sub_100137E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2) {
    return *(void *)(v2 + *(unsigned int *)(*(void *)(a2 + 8) + 24LL));
  }
  else {
    return 0LL;
  }
}

id sub_100137EB4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:");
}

id sub_100137EBC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:");
}

id sub_100137EC4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:");
}

id sub_100137ECC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:");
}

id sub_100137ED4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:");
}

id sub_100137EDC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:");
}

id sub_100137EE4(id result)
{
  if ((int)result >= 30008) {
    return +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInternalInconsistencyException,  @"Linked to ProtocolBuffer runtime version %d, but code compiled needing at least %d!",  30007LL,  result);
  }
  if ((int)result <= 30000) {
    return +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInternalInconsistencyException,  @"Proto generation source compiled against runtime version %d, but this version of the runtime only supports back to %d!",  result,  30001LL);
  }
  return result;
}

id sub_100137F68()
{
  return +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInternalInconsistencyException,  @"Proto generation source appears to have been from a version newer that this runtime (%d).",  30007LL);
}

id sub_100137FA8(id result)
{
  if ((_DWORD)result != 30001) {
    return +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInternalInconsistencyException,  @"Linked to ProtocolBuffer runtime version %d, but code compiled with version %d!",  30001LL,  result,  v1,  v2);
  }
  return result;
}

BOOL sub_100137FF8(void *a1, uint64_t a2)
{
  return sub_10013802C((uint64_t)a1, (uint64_t)objc_msgSend(objc_msgSend(a1, "descriptor"), "fieldWithNumber:", a2));
}

BOOL sub_10013802C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0LL;
  if (a1 && a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    if ((*(_WORD *)(v3 + 28) & 0xF02) != 0)
    {
      uint64_t v4 = *(void *)(a1 + 64);
      if (v4) {
        id v5 = *(void **)(v4 + *(unsigned int *)(v3 + 24));
      }
      else {
        id v5 = 0LL;
      }
      return [v5 count] != 0;
    }

    else
    {
      unint64_t v6 = *(unsigned int *)(v3 + 20);
      if ((v6 & 0x80000000) != 0) {
        return *(_DWORD *)(*(void *)(a1 + 64) + 4LL * -(int)v6) == *(_DWORD *)(v3 + 16);
      }
      else {
        return (*(_DWORD *)(*(void *)(a1 + 64) + ((v6 >> 3) & 0x1FFFFFFC)) >> v6) & 1;
      }
    }
  }

  return v2;
}

void sub_1001380F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(unsigned int *)(v3 + 20);
  if ((v4 & 0x80000000) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 64);
  }

  else
  {
    uint64_t v5 = *(void *)(a1 + 64);
    if (((*(_DWORD *)(v5 + ((v4 >> 3) & 0x1FFFFFFC)) >> v4) & 1) == 0) {
      return;
    }
  }

  if ((*(_WORD *)(v3 + 28) & 0xF02) != 0 || *(unsigned __int8 *)(v3 + 30) - 13 <= 3)
  {
    uint64_t v6 = *(unsigned int *)(v3 + 24);

    *(void *)(v5 + v6) = 0LL;
    LODWORD(v4) = *(_DWORD *)(v3 + 20);
  }

  uint64_t v7 = *(void *)(a1 + 64);
  if ((v4 & 0x80000000) != 0) {
    *(_DWORD *)(v7 + 4LL * -(int)v4) = 0;
  }
  else {
    *(_DWORD *)(v7 + 4LL * (v4 >> 5)) &= ~(1 << v4);
  }
}

uint64_t sub_1001381E0(uint64_t result, unsigned int a2, int a3, int a4)
{
  uint64_t v4 = *(void *)(result + 64);
  if ((a2 & 0x80000000) != 0)
  {
    if (!a4) {
      a3 = 0;
    }
    *(_DWORD *)(v4 + 4LL * -a2) = a3;
  }

  else
  {
    unsigned int v5 = a2 >> 5;
    int v6 = 1 << a2;
    if (a4) {
      int v7 = *(_DWORD *)(v4 + 4LL * v5) | v6;
    }
    else {
      int v7 = *(_DWORD *)(v4 + 4LL * v5) & ~v6;
    }
    *(_DWORD *)(v4 + 4LL * sub_1000E8840(v2, v3, v1, v5) = v7;
  }

  return result;
}

void sub_100138234(uint64_t a1, id *a2)
{
}

void sub_10013828C(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  int v5 = *(_DWORD *)(*(void *)(a1 + 64) - 4LL * (int)a3);
  if (v5 != a4 && v5 != 0)
  {
    uint64_t v8 = objc_msgSend(a2, "fieldWithNumber:");
    if (v8)
    {
      uint64_t v9 = v8[1];
      if ((*(_WORD *)(v9 + 28) & 0xF02) != 0 || *(unsigned __int8 *)(v9 + 30) - 13 <= 3)
      {
        uint64_t v10 = *(void *)(a1 + 64);
        uint64_t v11 = *(unsigned int *)(v9 + 24);

        *(void *)(v10 + v11) = 0LL;
      }
    }

    uint64_t v12 = *(void *)(a1 + 64);
    if ((a3 & 0x80000000) != 0) {
      *(_DWORD *)(v12 + 4LL * -a3) = 0;
    }
    else {
      *(_DWORD *)(v12 + 4LL * (a3 >> 5)) &= ~(1 << a3);
    }
  }

BOOL sub_100138364(uint64_t a1, unsigned int a2, int a3)
{
  if ((a2 & 0x80000000) != 0) {
    return *(_DWORD *)(*(void *)(a1 + 64) + 4LL * -a2) == a3;
  }
  else {
    return (*(_DWORD *)(*(void *)(a1 + 64) + 4LL * (a2 >> 5)) >> a2) & 1;
  }
}

uint64_t sub_1001383B0(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(void *)(a1 + 64) - 4LL * a2);
}

void sub_1001383CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)(a2 + 8);
  unint64_t v3 = v2[5];
  if ((v3 & 0x80000000) == 0)
  {
    uint64_t v4 = *(void *)(a1 + 64);
    if (((*(_DWORD *)(v4 + ((v3 >> 3) & 0x1FFFFFFC)) >> v3) & 1) != 0) {
      return;
    }
LABEL_5:
    uint64_t v5 = v2[6];
    uint64_t v6 = *(void *)(v4 + v5);
    id v7 = (id)v6;
    *(void *)(v4 + sub_1000E8840(v2, v3, v1, v5) = 0LL;
    sub_10012E124(v6);

    return;
  }

  uint64_t v4 = *(void *)(a1 + 64);
}

uint64_t sub_100138468(uint64_t a1, void *a2, void *a3)
{
  return sub_100138498(a1, a2, a3);
}

uint64_t sub_100138498(uint64_t a1, void *a2, void *a3)
{
  unint64_t v3 = a3;
  uint64_t v6 = a2[1];
  int v7 = *(unsigned __int8 *)(v6 + 30);
  __int16 v8 = *(_WORD *)(v6 + 28);
  if ((v8 & 0xF02) != 0)
  {
    uint64_t v9 = *(void *)(a1 + 64);
    uint64_t v10 = *(unsigned int *)(v6 + 24);
    uint64_t v11 = *(char **)(v9 + v10);
    *(void *)(v9 + v10) = a3;
    if (v11)
    {
      if ([a2 fieldType] == 1)
      {
        if ((v7 - 13) <= 3)
        {
          uint64_t v13 = objc_opt_class(&OBJC_CLASS___TransparencyGPBAutocreatedArray, v12);
          if ((objc_opt_isKindOfClass(v11, v13) & 1) != 0)
          {
            uint64_t v14 = &OBJC_IVAR___TransparencyGPBAutocreatedArray__autocreator;
            goto LABEL_29;
          }

uint64_t sub_1001386AC(uint64_t a1, void *a2)
{
  id v3 = sub_100138708(a1, a2);
  if ((*(_WORD *)(a2[1] + 28LL) & 0x1000) == 0)
  {
    else {
      return 4222467823LL;
    }
  }

  return (uint64_t)v3;
}

id sub_100138708(uint64_t a1, void *a2)
{
  uint64_t v2 = (_DWORD *)a2[1];
  unint64_t v3 = v2[5];
  if ((v3 & 0x80000000) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 64);
  }

  else
  {
    uint64_t v4 = *(void *)(a1 + 64);
    if (((*(_DWORD *)(v4 + ((v3 >> 3) & 0x1FFFFFFC)) >> v3) & 1) != 0) {
      return (id)*(unsigned int *)(v4 + v2[6]);
    }
  }

  return [a2 defaultValue];
}

id sub_100138790(void *a1, void *a2, uint64_t a3)
{
  if ((objc_msgSend(a2, "isValidEnumValue:") & 1) == 0) {
    +[NSException raise:format:]( NSException,  "raise:format:",  NSInvalidArgumentException,  @"%@.%@: Attempt to set an unknown enum value (%d)",  objc_opt_class(a1, v6),  [a2 name],  a3);
  }
  return sub_100138828(a1, (uint64_t)a2, a3);
}

id sub_100138828(void *a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void **)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 8);
  if (v6) {
    sub_10013828C((uint64_t)a1, v6, *(_DWORD *)(v7 + 20), *(_DWORD *)(v7 + 16));
  }
  *(_DWORD *)(a1[8] + *(unsigned int *)(v7 + swift_release(*(void *)(v0 + 24)) = a3;
  if (a3) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = (*(_WORD *)(v7 + 28) & 0x20) == 0;
  }
  unint64_t v9 = *(unsigned int *)(v7 + 20);
  uint64_t v10 = a1[8];
  if ((v9 & 0x80000000) != 0)
  {
    if (v8) {
      int v13 = *(_DWORD *)(v7 + 16);
    }
    else {
      int v13 = 0;
    }
    *(_DWORD *)(v10 + 4LL * -(int)v9) = v13;
  }

  else
  {
    unint64_t v11 = v9 >> 5;
    int v12 = 1 << v9;
    if (v8) {
      *(_DWORD *)(v10 + 4 * v11) |= v12;
    }
    else {
      *(_DWORD *)(v10 + 4LL * v11) &= ~v12;
    }
  }

  return sub_10012DE18(a1);
}

BOOL sub_100138914(uint64_t a1, void *a2)
{
  uint64_t v2 = (_DWORD *)a2[1];
  int v3 = v2[4];
  unint64_t v4 = v2[5];
  if ((v4 & 0x80000000) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 64);
    if (((*(_DWORD *)(v5 + ((v4 >> 3) & 0x1FFFFFFC)) >> v4) & 1) != 0) {
      goto LABEL_3;
    }
    return (unint64_t)[a2 defaultValue] & 1;
  }

  uint64_t v5 = *(void *)(a1 + 64);
LABEL_3:
  unint64_t v6 = v2[6];
  if ((v6 & 0x80000000) != 0) {
    return *(_DWORD *)(v5 + 4LL * -(int)v6) == v3;
  }
  else {
    return (*(_DWORD *)(v5 + ((v6 >> 3) & 0x1FFFFFFC)) >> v6) & 1;
  }
}

void *sub_1001389B8(void *a1, uint64_t a2, int a3)
{
  if (a1)
  {
    if (a2) {
      return sub_1001389C8(a1, a2, a3);
    }
  }

  return a1;
}

id sub_1001389C8(void *a1, uint64_t a2, int a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  unint64_t v6 = *(void **)(a2 + 16);
  if (v6) {
    sub_10013828C((uint64_t)a1, v6, *(_DWORD *)(v5 + 20), *(_DWORD *)(v5 + 16));
  }
  unint64_t v7 = *(unsigned int *)(v5 + 24);
  uint64_t v8 = a1[8];
  if ((v7 & 0x80000000) != 0)
  {
    int v11 = *(_DWORD *)(v5 + 16);
    if (!a3) {
      int v11 = 0;
    }
    *(_DWORD *)(v8 + 4LL * -(int)v7) = v11;
    if ((a3 & 1) != 0) {
      goto LABEL_9;
    }
  }

  else
  {
    unint64_t v9 = v7 >> 5;
    int v10 = 1 << v7;
    if (a3)
    {
      *(_DWORD *)(v8 + 4 * v9) |= v10;
LABEL_9:
      BOOL v12 = 1;
      goto LABEL_12;
    }

    *(_DWORD *)(v8 + 4LL * v9) &= ~v10;
  }

  BOOL v12 = (*(_WORD *)(v5 + 28) & 0x20) == 0;
LABEL_12:
  unint64_t v13 = *(unsigned int *)(v5 + 20);
  uint64_t v14 = a1[8];
  if ((v13 & 0x80000000) != 0)
  {
    if (v12) {
      int v17 = *(_DWORD *)(v5 + 16);
    }
    else {
      int v17 = 0;
    }
    *(_DWORD *)(v14 + 4LL * -(int)v13) = v17;
  }

  else
  {
    unint64_t v15 = v13 >> 5;
    int v16 = 1 << v13;
    if (v12) {
      *(_DWORD *)(v14 + 4 * v15) |= v16;
    }
    else {
      *(_DWORD *)(v14 + 4LL * v15) &= ~v16;
    }
  }

  return sub_10012DE18(a1);
}

void *sub_100138AE8(void *a1, uint64_t a2, int a3)
{
  if (a1)
  {
    if (a2) {
      return sub_100138828(a1, a2, a3);
    }
  }

  return a1;
}

id sub_100138AF8(uint64_t a1, void *a2)
{
  uint64_t v2 = (_DWORD *)a2[1];
  unint64_t v3 = v2[5];
  if ((v3 & 0x80000000) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 64);
  }

  else
  {
    uint64_t v4 = *(void *)(a1 + 64);
    if (((*(_DWORD *)(v4 + ((v3 >> 3) & 0x1FFFFFFC)) >> v3) & 1) != 0) {
      return *(id *)(v4 + v2[6]);
    }
  }

  return [a2 defaultValue];
}

void *sub_100138B6C(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (a2) {
      return sub_100138B7C(a1, a2, a3);
    }
  }

  return a1;
}

id sub_100138B7C(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void **)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 8);
  if (v6) {
    sub_10013828C((uint64_t)a1, v6, *(_DWORD *)(v7 + 20), *(_DWORD *)(v7 + 16));
  }
  *(void *)(a1[8] + *(unsigned int *)(v7 + swift_release(*(void *)(v0 + 24)) = a3;
  if (a3) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = (*(_WORD *)(v7 + 28) & 0x20) == 0;
  }
  unint64_t v9 = *(unsigned int *)(v7 + 20);
  uint64_t v10 = a1[8];
  if ((v9 & 0x80000000) != 0)
  {
    if (v8) {
      int v13 = *(_DWORD *)(v7 + 16);
    }
    else {
      int v13 = 0;
    }
    *(_DWORD *)(v10 + 4LL * -(int)v9) = v13;
  }

  else
  {
    unint64_t v11 = v9 >> 5;
    int v12 = 1 << v9;
    if (v8) {
      *(_DWORD *)(v10 + 4 * v11) |= v12;
    }
    else {
      *(_DWORD *)(v10 + 4LL * v11) &= ~v12;
    }
  }

  return sub_10012DE18(a1);
}

float sub_100138C60(uint64_t a1, void *a2)
{
  uint64_t v2 = (_DWORD *)a2[1];
  unint64_t v3 = v2[5];
  if ((v3 & 0x80000000) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 64);
  }

  else
  {
    uint64_t v4 = *(void *)(a1 + 64);
    if (((*(_DWORD *)(v4 + ((v3 >> 3) & 0x1FFFFFFC)) >> v3) & 1) != 0) {
      return *(float *)(v4 + v2[6]);
    }
  }

  LODWORD(result) = [a2 defaultValue];
  return result;
}

void *sub_100138CE8(void *a1, uint64_t a2, float a3)
{
  if (a1)
  {
    if (a2) {
      return sub_100138CF8(a1, a2, a3);
    }
  }

  return a1;
}

id sub_100138CF8(void *a1, uint64_t a2, float a3)
{
  unint64_t v6 = *(void **)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 8);
  if (v6) {
    sub_10013828C((uint64_t)a1, v6, *(_DWORD *)(v7 + 20), *(_DWORD *)(v7 + 16));
  }
  *(float *)(a1[8] + *(unsigned int *)(v7 + swift_release(*(void *)(v0 + 24)) = a3;
  BOOL v8 = a3 != 0.0 || (*(_WORD *)(v7 + 28) & 0x20) == 0;
  unint64_t v9 = *(unsigned int *)(v7 + 20);
  uint64_t v10 = a1[8];
  if ((v9 & 0x80000000) != 0)
  {
    if (v8) {
      int v13 = *(_DWORD *)(v7 + 16);
    }
    else {
      int v13 = 0;
    }
    *(_DWORD *)(v10 + 4LL * -(int)v9) = v13;
  }

  else
  {
    unint64_t v11 = v9 >> 5;
    int v12 = 1 << v9;
    if (v8) {
      *(_DWORD *)(v10 + 4 * v11) |= v12;
    }
    else {
      *(_DWORD *)(v10 + 4LL * v11) &= ~v12;
    }
  }

  return sub_10012DE18(a1);
}

double sub_100138DE0(uint64_t a1, void *a2)
{
  uint64_t v2 = (_DWORD *)a2[1];
  unint64_t v3 = v2[5];
  if ((v3 & 0x80000000) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 64);
  }

  else
  {
    uint64_t v4 = *(void *)(a1 + 64);
    if (((*(_DWORD *)(v4 + ((v3 >> 3) & 0x1FFFFFFC)) >> v3) & 1) != 0) {
      return *(double *)(v4 + v2[6]);
    }
  }

  return COERCE_DOUBLE([a2 defaultValue]);
}

void *sub_100138E68(void *a1, uint64_t a2, double a3)
{
  if (a1)
  {
    if (a2) {
      return sub_100138E78(a1, a2, a3);
    }
  }

  return a1;
}

id sub_100138E78(void *a1, uint64_t a2, double a3)
{
  unint64_t v6 = *(void **)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 8);
  if (v6) {
    sub_10013828C((uint64_t)a1, v6, *(_DWORD *)(v7 + 20), *(_DWORD *)(v7 + 16));
  }
  *(double *)(a1[8] + *(unsigned int *)(v7 + swift_release(*(void *)(v0 + 24)) = a3;
  BOOL v8 = a3 != 0.0 || (*(_WORD *)(v7 + 28) & 0x20) == 0;
  unint64_t v9 = *(unsigned int *)(v7 + 20);
  uint64_t v10 = a1[8];
  if ((v9 & 0x80000000) != 0)
  {
    if (v8) {
      int v13 = *(_DWORD *)(v7 + 16);
    }
    else {
      int v13 = 0;
    }
    *(_DWORD *)(v10 + 4LL * -(int)v9) = v13;
  }

  else
  {
    unint64_t v11 = v9 >> 5;
    int v12 = 1 << v9;
    if (v8) {
      *(_DWORD *)(v10 + 4 * v11) |= v12;
    }
    else {
      *(_DWORD *)(v10 + 4LL * v11) &= ~v12;
    }
  }

  return sub_10012DE18(a1);
}

uint64_t sub_100138F64(uint64_t result, void *a2, void *a3)
{
  if (result)
  {
    if (a2) {
      return sub_100138498(result, a2, [a3 copy]);
    }
  }

  return result;
}

uint64_t sub_100138FB0(uint64_t result, void *a2, void *a3)
{
  if (result)
  {
    if (a2) {
      return sub_100138498(result, a2, a3);
    }
  }

  return result;
}

char *sub_100138FF4(const char *a1, BOOL a2)
{
  Protocol = objc_getProtocol("TransparencyGPBMessageSignatureProtocol");
  return protocol_getMethodDescription(Protocol, a1, 0, a2).types;
}

__CFString *sub_100139034(void *a1, __CFString *a2)
{
  uint64_t v2 = &stru_10028E390;
  if (a1)
  {
    if (a2) {
      uint64_t v4 = a2;
    }
    else {
      uint64_t v4 = &stru_10028E390;
    }
    uint64_t v2 = (__CFString *)+[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
    sub_100139090(a1, v2, v4);
  }

  return v2;
}

id sub_100139090(void *a1, void *a2, __CFString *a3)
{
  unint64_t v6 = [a1 descriptor];
  id v66 = (void *)v6[1];
  uint64_t v7 = (char *)[v66 count];
  BOOL v8 = [v6 extensionRanges];
  unsigned int v9 = [v6 extensionRangesCount];
  __n128 v68 = a1;
  id v10 = objc_msgSend(objc_msgSend(a1, "extensionsCurrentlySet"), "sortedArrayUsingSelector:", "compareByFieldNumber:");
  if (v7) {
    BOOL v11 = 0;
  }
  else {
    BOOL v11 = v9 == 0;
  }
  if (!v11)
  {
    int v12 = v10;
    unint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    unint64_t v15 = v9;
    id v60 = v10;
    __n128 v61 = v8;
    uint64_t v62 = v7;
    unint64_t v64 = v9;
    uint64_t v59 = a3;
    do
    {
      if (v14 == v7)
      {
        sub_10013A260(v68, v12, v8[v13], a2, a3);
        uint64_t v14 = v7;
        ++v13;
        continue;
      }

      if (v13 != v15)
      {
        int v16 = [v66 objectAtIndexedSubscript:v14];
        int v17 = &v8[v13];
        if (*(_DWORD *)(v16[1] + 16LL) >= *(_DWORD *)v17)
        {
          ++v13;
          sub_10013A260(v68, v12, *v17, a2, a3);
          continue;
        }
      }

      uint64_t v18 = v14 + 1;
      uint64_t v67 = [v66 objectAtIndexedSubscript:v14];
      unsigned int v19 = [v67 fieldType];
      unsigned int v20 = v19;
      if (v19 == 2 || v19 == 1)
      {
        unint64_t v65 = v13;
        uint64_t v24 = v68[8];
        if (v24) {
          uint64_t v25 = *(void **)(v24 + *(unsigned int *)(v67[1] + 24LL));
        }
        else {
          uint64_t v25 = 0LL;
        }
        unint64_t v26 = (unint64_t)[v25 count];
        if (v26) {
          goto LABEL_21;
        }
      }

      else
      {
        if (v19)
        {
          ++v14;
          unint64_t v15 = v64;
          continue;
        }

        uint64_t v21 = v67[1];
        unint64_t v22 = *(unsigned int *)(v21 + 20);
        unint64_t v65 = v13;
        if ((v22 & 0x80000000) != 0) {
          unsigned int v23 = *(_DWORD *)(v68[8] + 4LL * -(int)v22) == *(_DWORD *)(v21 + 16);
        }
        else {
          unsigned int v23 = (*(_DWORD *)(v68[8] + ((v22 >> 3) & 0x1FFFFFFC)) >> v22) & 1;
        }
        uint64_t v25 = 0LL;
        unint64_t v26 = v23;
        if (v23)
        {
LABEL_21:
          id v27 = (NSString *)[v67 textFormatName];
          if (-[NSString length](v27, "length"))
          {
            __int128 v28 = &stru_10028E390;
          }

          else
          {
            id v27 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%u",  *(unsigned int *)(v67[1] + 16LL));
            if (v26 < 2)
            {
              __int128 v28 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"  # %@",  [v67 name]);
            }

            else
            {
              [a2 appendFormat:@"%@# %@\n", a3, objc_msgSend(v67, "name")];
              __int128 v28 = &stru_10028E390;
            }
          }

          uint64_t v63 = v18;
          if (v20 == 2)
          {
            unsigned int v29 = [v67 mapKeyDataType];
            int v30 = *(unsigned __int8 *)(v67[1] + 30LL);
            uint64_t v58 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@%@ {%@\n",  a3,  v27,  v28);
            __int128 v31 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@%@ {\n", a3, v27);
            __int128 v32 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@}\n", a3);
            uint64_t v33 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@  key: ", a3);
            uint64_t v34 = ":";
            __int128 v35 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@  value%s ",  a3,  v34);
            v84[0] = 0LL;
            v84[1] = v84;
            v84[2] = 0x2020000000LL;
            char v85 = 1;
            if (v29 == 14 && (v30 - 13) <= 3)
            {
              uint64_t v69 = _NSConcreteStackBlock;
              uint64_t v70 = 3221225472LL;
              uint64_t v71 = sub_10013A7D8;
              uint64_t v72 = &unk_100283640;
              uint64_t v73 = a2;
              id v74 = v58;
              uint64_t v75 = v31;
              uint64_t v76 = v33;
              LOBYTE(v81) = v30;
              uint64_t v77 = v35;
              uint64_t v78 = a3;
              uint64_t v79 = v32;
              uint64_t v80 = (NSString *)v84;
              [v25 enumerateKeysAndObjectsUsingBlock:&v69];
              uint64_t v14 = v18;
            }

            else
            {
              uint64_t v69 = _NSConcreteStackBlock;
              uint64_t v70 = 3221225472LL;
              uint64_t v71 = sub_10013A910;
              uint64_t v72 = &unk_100283668;
              uint64_t v80 = v32;
              uint64_t v81 = v84;
              uint64_t v73 = a2;
              id v74 = v58;
              char v82 = v29;
              uint64_t v75 = v31;
              uint64_t v76 = v33;
              char v83 = v30;
              uint64_t v77 = v35;
              uint64_t v78 = a3;
              uint64_t v79 = (NSString *)v67;
              [v25 enumerateForTextFormat:&v69];
              uint64_t v14 = v18;
            }

            _Block_object_dispose(v84, 8);
            BOOL v8 = v61;
            uint64_t v7 = v62;
            int v12 = v60;
            unint64_t v15 = v64;
            unint64_t v13 = v65;
            continue;
          }

          uint64_t v36 = 0LL;
          int v37 = *(unsigned __int8 *)(v67[1] + 30LL);
          else {
            __int128 v38 = "";
          }
          do
          {
            [a2 appendFormat:@"%@%@%s ", a3, v27, v38];
            switch(v37)
            {
              case 0:
                if (v25) {
                  unsigned int v44 = [v25 valueAtIndex:v36];
                }
                else {
                  unsigned int v44 = sub_100138914((uint64_t)v68, v67);
                }
                if (v44) {
                  __int128 v52 = @"true";
                }
                else {
                  __int128 v52 = @"false";
                }
                [a2 appendString:v52];
                break;
              case 1:
              case 11:
                if (v25) {
                  id v41 = [v25 valueAtIndex:v36];
                }
                else {
                  id v41 = sub_100138708((uint64_t)v68, v67);
                }
                objc_msgSend(a2, "appendFormat:", @"%u", v41, v57);
                break;
              case 2:
              case 7:
              case 9:
                if (v25) {
                  id v39 = [v25 valueAtIndex:v36];
                }
                else {
                  id v39 = sub_100138708((uint64_t)v68, v67);
                }
                objc_msgSend(a2, "appendFormat:", @"%d", v39, v57);
                break;
              case 3:
                if (v25) {
                  [v25 valueAtIndex:v36];
                }
                else {
                  float v45 = sub_100138C60((uint64_t)v68, v67);
                }
                objc_msgSend(a2, "appendFormat:", @"%.*g", 6, v45);
                break;
              case 4:
              case 12:
                if (v25) {
                  id v42 = [v25 valueAtIndex:v36];
                }
                else {
                  id v42 = sub_100138AF8((uint64_t)v68, v67);
                }
                objc_msgSend(a2, "appendFormat:", @"%llu", v42, v57);
                break;
              case 5:
              case 8:
              case 10:
                if (v25) {
                  id v40 = [v25 valueAtIndex:v36];
                }
                else {
                  id v40 = sub_100138AF8((uint64_t)v68, v67);
                }
                objc_msgSend(a2, "appendFormat:", @"%lld", v40, v57);
                break;
              case 6:
                if (v25) {
                  [v25 valueAtIndex:v36];
                }
                else {
                  double v46 = sub_100138DE0((uint64_t)v68, v67);
                }
                objc_msgSend(a2, "appendFormat:", @"%.*lg", 15, *(void *)&v46);
                break;
              case 13:
                if (v25) {
                  uint64_t v47 = [v25 objectAtIndex:v36];
                }
                else {
                  uint64_t v47 = sub_10012F03C((uint64_t)v68, v67);
                }
                sub_100139D6C(v47, a2);
                break;
              case 14:
                if (v25) {
                  uint64_t v48 = [v25 objectAtIndex:v36];
                }
                else {
                  uint64_t v48 = sub_10012F03C((uint64_t)v68, v67);
                }
                sub_10013A654(v48, a2);
                break;
              case 15:
              case 16:
                if (v25) {
                  uint64_t v43 = [v25 objectAtIndex:v36];
                }
                else {
                  uint64_t v43 = sub_10012F03C((uint64_t)v68, v67);
                }
                uint64_t v51 = v43;
                [a2 appendFormat:@"{%@\n", v28];
                sub_100139090( v51,  a2,  -[__CFString stringByAppendingString:](a3, "stringByAppendingString:", @"  "));
                [a2 appendFormat:@"%@}", a3];
                __int128 v28 = &stru_10028E390;
                break;
              case 17:
                if (v25)
                {
                  id v49 = [v25 rawValueAtIndex:v36];
                  uint64_t v50 = v67;
                }

                else
                {
                  uint64_t v50 = v67;
                  id v49 = sub_100138708((uint64_t)v68, v67);
                }

                id v53 = [v50 enumDescriptor];
                if (v53 && (id v54 = [v53 textFormatNameForValue:v49]) != 0) {
                  [a2 appendString:v54];
                }
                else {
                  objc_msgSend(a2, "appendFormat:", @"%d", v49);
                }
                a3 = v59;
                break;
              default:
                break;
            }

            [a2 appendFormat:@"%@\n", v28];
            ++v36;
          }

          while (v26 != v36);
          uint64_t v7 = v62;
          uint64_t v14 = v63;
          int v12 = v60;
          BOOL v8 = v61;
          goto LABEL_92;
        }
      }

      uint64_t v14 = v18;
LABEL_92:
      unint64_t v15 = v64;
      unint64_t v13 = v65;
    }

    while (v14 < v7 || v13 < v15);
  }

  int v55 = sub_100139944([v68 unknownFields], a3);
  id result = -[__CFString length](v55, "length");
  if (result)
  {
    [a2 appendFormat:@"%@# --- Unknown fields ---\n", a3];
    return [a2 appendString:v55];
  }

  return result;
}

void sub_100139928(_Unwind_Exception *a1)
{
}

__CFString *sub_100139944(void *a1, const __CFString *a2)
{
  uint64_t v2 = &stru_10028E390;
  if (a1)
  {
    uint64_t v4 = a2 ? (__CFString *)a2 : &stru_10028E390;
    uint64_t v2 = (__CFString *)+[NSMutableString string](&OBJC_CLASS___NSMutableString, "string");
    __int128 v43 = 0u;
    __int128 v44 = 0u;
    __int128 v45 = 0u;
    __int128 v46 = 0u;
    obuint64_t j = [a1 sortedFields];
    id v26 = [obj countByEnumeratingWithState:&v43 objects:v49 count:16];
    if (v26)
    {
      uint64_t v25 = *(void *)v44;
      do
      {
        uint64_t v5 = 0LL;
        do
        {
          if (*(void *)v44 != v25) {
            objc_enumerationMutation(obj);
          }
          uint64_t v28 = v5;
          unint64_t v6 = *(void **)(*((void *)&v43 + 1) + 8 * v5);
          id v7 = [v6 number];
          id v8 = [v6 varintList];
          v41[0] = _NSConcreteStackBlock;
          v41[1] = 3221225472LL;
          v41[2] = sub_100139CC4;
          v41[3] = &unk_1002835F0;
          v41[4] = v2;
          v41[5] = v4;
          int v42 = (int)v7;
          [v8 enumerateValuesWithBlock:v41];
          id v9 = [v6 fixed32List];
          v39[0] = _NSConcreteStackBlock;
          v39[1] = 3221225472LL;
          v39[2] = sub_100139CFC;
          void v39[3] = &unk_100283618;
          v39[4] = v2;
          v39[5] = v4;
          int v40 = (int)v7;
          [v9 enumerateValuesWithBlock:v39];
          id v10 = [v6 fixed64List];
          v37[0] = _NSConcreteStackBlock;
          v37[1] = 3221225472LL;
          v37[2] = sub_100139D34;
          v37[3] = &unk_1002835F0;
          v37[4] = v2;
          void v37[5] = v4;
          int v38 = (int)v7;
          [v10 enumerateValuesWithBlock:v37];
          __int128 v35 = 0u;
          __int128 v36 = 0u;
          __int128 v33 = 0u;
          __int128 v34 = 0u;
          id v27 = v6;
          id v11 = [v6 lengthDelimitedList];
          id v12 = [v11 countByEnumeratingWithState:&v33 objects:v48 count:16];
          if (v12)
          {
            id v13 = v12;
            uint64_t v14 = *(void *)v34;
            do
            {
              for (uint64_t i = 0LL; i != v13; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v34 != v14) {
                  objc_enumerationMutation(v11);
                }
                int v16 = *(void **)(*((void *)&v33 + 1) + 8LL * (void)i);
                -[__CFString appendFormat:](v2, "appendFormat:", @"%@%d: ", v4, v7);
                sub_100139D6C(v16, v2);
                -[__CFString appendString:](v2, "appendString:", @"\n");
              }

              id v13 = [v11 countByEnumeratingWithState:&v33 objects:v48 count:16];
            }

            while (v13);
          }

          __int128 v31 = 0u;
          __int128 v32 = 0u;
          __int128 v29 = 0u;
          __int128 v30 = 0u;
          id v17 = [v27 groupList];
          id v18 = [v17 countByEnumeratingWithState:&v29 objects:v47 count:16];
          if (v18)
          {
            id v19 = v18;
            uint64_t v20 = *(void *)v30;
            do
            {
              for (uint64_t j = 0LL; j != v19; uint64_t j = (char *)j + 1)
              {
                if (*(void *)v30 != v20) {
                  objc_enumerationMutation(v17);
                }
                uint64_t v22 = *(void *)(*((void *)&v29 + 1) + 8LL * (void)j);
                -[__CFString appendFormat:](v2, "appendFormat:", @"%@%d: {\n", v4, v7);
                -[__CFString appendString:]( v2,  "appendString:",  sub_100139944( v22,  -[__CFString stringByAppendingString:](v4, "stringByAppendingString:", @"  ")));
                -[__CFString appendFormat:](v2, "appendFormat:", @"%@}\n", v4);
              }

              id v19 = [v17 countByEnumeratingWithState:&v29 objects:v47 count:16];
            }

            while (v19);
          }

          uint64_t v5 = v28 + 1;
        }

        while ((id)(v28 + 1) != v26);
        id v26 = [obj countByEnumeratingWithState:&v43 objects:v49 count:16];
      }

      while (v26);
    }
  }

  return v2;
}

id sub_100139CC4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) appendFormat:@"%@%d: %llu\n", *(void *)(a1 + 40), *(unsigned int *)(a1 + 48), a2];
}

id sub_100139CFC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) appendFormat:@"%@%d: 0x%X\n", *(void *)(a1 + 40), *(unsigned int *)(a1 + 48), a2];
}

id sub_100139D34(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) appendFormat:@"%@%d: 0x%llX\n", *(void *)(a1 + 40), *(unsigned int *)(a1 + 48), a2];
}

id sub_100139D6C(void *a1, void *a2)
{
  uint64_t v4 = (char *)[a1 bytes];
  uint64_t v5 = (uint64_t)[a1 length];
  [a2 appendString:@""];
  if (v5 >= 1)
  {
    unint64_t v6 = &v4[v5];
    do
    {
      uint64_t v7 = *v4;
      if ((int)v7 > 33)
      {
        switch((_DWORD)v7)
        {
          case '""':
            id v8 = a2;
            id v9 = @"\\";
            goto LABEL_16;
          case '\'':
            id v8 = a2;
            id v9 = @"\\'";
            goto LABEL_16;
          case '\\':
            id v8 = a2;
            id v9 = @"\\\\"";
            goto LABEL_16;
        }
      }

      else
      {
        switch((_DWORD)v7)
        {
          case 9:
            id v8 = a2;
            id v9 = @"\\t";
            goto LABEL_16;
          case 0xA:
            id v8 = a2;
            id v9 = @"\\n";
            goto LABEL_16;
          case 0xD:
            id v8 = a2;
            id v9 = @"\\r";
LABEL_16:
            [v8 appendString:v9];
            goto LABEL_17;
        }
      }

      if ((v7 & 0x80000000) != 0)
      {
        if (!__maskrune(*v4, 0x40000uLL))
        {
LABEL_23:
          objc_msgSend(a2, "appendFormat:", @"\\%03o", v7);
          goto LABEL_17;
        }
      }

      else if ((_DefaultRuneLocale.__runetype[v7] & 0x40000) == 0)
      {
        goto LABEL_23;
      }

      objc_msgSend(a2, "appendFormat:", @"%c", v7);
LABEL_17:
      ++v4;
    }

    while (v4 < v6);
  }

  return [a2 appendString:@""];
}

NSString *sub_100139F10(char *a1, int a2, void *a3)
{
  unint64_t v3 = 0LL;
  if (a1 && a3)
  {
    unsigned int v23 = a1;
    int v6 = sub_10013A0F0(&v23);
    if (v6 < 1)
    {
      return 0LL;
    }

    else
    {
      int v7 = v6;
      while (1)
      {
        int v8 = sub_10013A0F0(&v23);
        id v9 = v23;
        if (v8 == a2) {
          break;
        }
        id v10 = v23 + 1;
        while (*v10++)
          ;
        unsigned int v23 = v10;
        if (v7-- < 2) {
          return 0LL;
        }
      }

      if (*v23)
      {
        unint64_t v3 = +[NSMutableString stringWithCapacity:]( NSMutableString,  "stringWithCapacity:",  [a3 length]);
        char v14 = *v9;
        if (*v9)
        {
          uint64_t v15 = 0LL;
          while (1)
          {
            if (v14 < 0)
            {
              -[NSMutableString appendString:](v3, "appendString:", @"_");
              char v14 = *v9;
            }

            int v16 = v14 & 0x1F;
            int v17 = v14 & 0x60;
            if (v17 == 32) {
              break;
            }
            if (v17 == 64)
            {
              uint64_t v18 = __toupper((char)[a3 characterAtIndex:v15]);
LABEL_21:
              -[NSMutableString appendFormat:](v3, "appendFormat:", @"%c", v18);
              ++v15;
              --v16;
            }

            if (v16 >= 1)
            {
              uint64_t v19 = v16;
              uint64_t v20 = v15;
              do
              {
                id v21 = [a3 characterAtIndex:v20];
                if (v17 == 96) {
                  -[NSMutableString appendFormat:](v3, "appendFormat:", @"%c", __toupper((char)v21));
                }
                else {
                  -[NSMutableString appendFormat:](v3, "appendFormat:", @"%C", v21);
                }
                ++v20;
                --v19;
              }

              while (v19);
            }

            v15 += v16;
            int v22 = *++v9;
            char v14 = v22;
            if (!v22) {
              return (NSString *)v3;
            }
          }

          uint64_t v18 = __tolower((char)[a3 characterAtIndex:v15]);
          goto LABEL_21;
        }
      }

      else
      {
        return +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v23 + 1);
      }
    }
  }

  return (NSString *)v3;
}

uint64_t sub_10013A0F0(char **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(*a1)++;
  if ((v2 & 0x80000000) != 0)
  {
    unsigned int v3 = v2 & 0x7F;
    int v4 = v1[1];
    *a1 = v1 + 2;
    int v5 = v4 << 7;
    if ((v4 & 0x80000000) == 0) {
      return v5 | v3;
    }
    v3 |= v5 & 0x3F80;
    int v6 = v1[2];
    *a1 = v1 + 3;
    int v5 = v6 << 14;
    if ((v6 & 0x80000000) == 0) {
      return v5 | v3;
    }
    v3 |= v5 & 0x1FC000;
    int v7 = v1[3];
    *a1 = v1 + 4;
    int v5 = v7 << 21;
    if (v7 < 0)
    {
      int v9 = v1[4];
      *a1 = v1 + 5;
      uint64_t v2 = v5 & 0xFE00000 | (v9 << 28) | v3;
      if (v9 < 0)
      {
        uint64_t v10 = 0LL;
        while (1)
        {
          int v11 = v1[v10 + 5];
          *a1 = &v1[v10 + 6];
          if ((v11 & 0x80000000) == 0) {
            break;
          }
          if ((_DWORD)++v10 == 5)
          {
            +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSParseErrorException,  @"Unable to read varint32");
            return v2;
          }
        }
      }
    }

    else
    {
      return v5 | v3;
    }
  }

  return v2;
}

void sub_10013A1D8(uint64_t a1, void *a2, unsigned int a3)
{
}

BOOL sub_10013A1E0(objc_class *a1, const char *a2)
{
  unsigned int outCount = 0;
  unsigned int v3 = class_copyMethodList(a1, &outCount);
  if (outCount)
  {
    for (unint64_t i = 0LL; i < outCount; ++i)
    {
      SEL Name = method_getName(v3[i]);
      BOOL v6 = Name == a2;
      if (Name == a2) {
        break;
      }
    }
  }

  else
  {
    BOOL v6 = 0LL;
  }

  free(v3);
  return v6;
}

id sub_10013A260(void *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  id result = [a2 countByEnumeratingWithState:&v32 objects:v36 count:16];
  id v28 = result;
  if (result)
  {
    uint64_t v27 = *(void *)v33;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v33 != v27) {
          objc_enumerationMutation(a2);
        }
        uint64_t v30 = v7;
        int v8 = *(void **)(*((void *)&v32 + 1) + 8 * v7);
        id result = [v8 fieldNumber];
        if (result >= a3)
        {
          id v9 = result;
          id v10 = [a1 getExtension:v8];
          unsigned int v11 = [v8 isRepeated];
          if ((v11 & 1) != 0)
          {
            uint64_t v12 = (uint64_t)[v10 count];
            id v13 = [v8 singletonName];
            if (v12 != 1)
            {
              [a4 appendFormat:@"%@# [%@]\n", a5, v13];
              unsigned int v14 = [v8 dataType];
              if (!v12) {
                goto LABEL_7;
              }
              unsigned int v15 = v14;
              int v16 = &stru_10028E390;
              goto LABEL_16;
            }
          }

          else
          {
            id v13 = [v8 singletonName];
          }

          int v16 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"  # [%@]", v13);
          unsigned int v15 = [v8 dataType];
          uint64_t v12 = 1LL;
LABEL_16:
          uint64_t v17 = 0LL;
          if (v15 - 15 >= 2) {
            uint64_t v18 = ":";
          }
          else {
            uint64_t v18 = "";
          }
          do
          {
            id v19 = v10;
            if (v11) {
              id v19 = [v10 objectAtIndex:v17];
            }
            [a4 appendFormat:@"%@%u%s ", a5, v9, v18];
            switch(v15)
            {
              case 0u:
                else {
                  int v22 = @"false";
                }
                [a4 appendString:v22];
                break;
              case 1u:
              case 0xBu:
                objc_msgSend(a4, "appendFormat:", @"%u", objc_msgSend(v19, "unsignedIntValue"), v24);
                break;
              case 2u:
                id v20 = [v19 unsignedIntValue];
                goto LABEL_34;
              case 3u:
                [v19 floatValue];
                objc_msgSend(a4, "appendFormat:", @"%.*g", 6, v21);
                break;
              case 4u:
              case 0xCu:
                objc_msgSend(a4, "appendFormat:", @"%llu", objc_msgSend(v19, "unsignedLongLongValue"), v24);
                break;
              case 5u:
              case 8u:
              case 0xAu:
                objc_msgSend(a4, "appendFormat:", @"%lld", objc_msgSend(v19, "longLongValue"), v24);
                break;
              case 6u:
                [v19 doubleValue];
                objc_msgSend(a4, "appendFormat:", @"%.*lg", 15, v23);
                break;
              case 7u:
              case 9u:
              case 0x11u:
                id v20 = [v19 intValue];
LABEL_34:
                objc_msgSend(a4, "appendFormat:", @"%d", v20, v24);
                break;
              case 0xDu:
                sub_100139D6C(v19, a4);
                break;
              case 0xEu:
                sub_10013A654(v19, a4);
                break;
              case 0xFu:
              case 0x10u:
                [a4 appendFormat:@"{%@\n", v16];
                sub_100139090(v19, a4, [a5 stringByAppendingString:@"  "]);
                [a4 appendFormat:@"%@}", a5];
                int v16 = &stru_10028E390;
                break;
              default:
                break;
            }

            [a4 appendFormat:@"%@\n", v16];
            ++v17;
          }

          while (v12 != v17);
        }

id sub_10013A654(void *a1, void *a2)
{
  int v4 = (char *)[a1 length];
  if (v4)
  {
    int v5 = v4;
    for (unint64_t i = 0LL; v5 != i; ++i)
    {
      id v7 = [a1 characterAtIndex:i];
      if ((int)v7 > 33)
      {
        switch((_DWORD)v7)
        {
          case '""':
            int v8 = a2;
            id v9 = @"\\";
            break;
          case '\'':
            int v8 = a2;
            id v9 = @"\\'";
            break;
          case '\\':
            int v8 = a2;
            id v9 = @"\\\\"";
            break;
          default:
LABEL_19:
            else {
              objc_msgSend(a2, "appendFormat:", @"\\%d%d%d", 0, v7 >> 3, v7 & 7);
            }
            continue;
        }
      }

      else
      {
        switch((_DWORD)v7)
        {
          case 9:
            int v8 = a2;
            id v9 = @"\\t";
            break;
          case 0xA:
            int v8 = a2;
            id v9 = @"\\n";
            break;
          case 0xD:
            int v8 = a2;
            id v9 = @"\\r";
            break;
          default:
            goto LABEL_19;
        }
      }

      [v8 appendString:v9];
    }
  }

  return [a2 appendString:@""];
}

id sub_10013A7D8(uint64_t a1, void *a2, void *a3)
{
  BOOL v6 = *(void **)(a1 + 32);
  uint64_t v7 = 40LL;
  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL)) {
    uint64_t v7 = 48LL;
  }
  [v6 appendString:*(void *)(a1 + v7)];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 88) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 0;
  [*(id *)(a1 + 32) appendString:*(void *)(a1 + 56)];
  sub_10013A654(a2, *(void **)(a1 + 32));
  [*(id *)(a1 + 32) appendString:@"\n"];
  [*(id *)(a1 + 32) appendString:*(void *)(a1 + 64)];
  int v8 = *(unsigned __int8 *)(a1 + 96);
  switch(v8)
  {
    case 13:
      sub_100139D6C(a3, *(void **)(a1 + 32));
      break;
    case 15:
      [*(id *)(a1 + 32) appendString:@"{\n"];
      sub_100139090(a3, *(void *)(a1 + 32), [*(id *)(a1 + 72) stringByAppendingString:@"    "]);
      [*(id *)(a1 + 32) appendFormat:@"%@  }", *(void *)(a1 + 72)];
      break;
    case 14:
      sub_10013A654(a3, *(void **)(a1 + 32));
      break;
  }

  [*(id *)(a1 + 32) appendString:@"\n"];
  return [*(id *)(a1 + 32) appendString:*(void *)(a1 + 80)];
}

id sub_10013A910(uint64_t a1, void *a2, void *a3)
{
  BOOL v6 = *(void **)(a1 + 32);
  uint64_t v7 = 40LL;
  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 24LL)) {
    uint64_t v7 = 48LL;
  }
  [v6 appendString:*(void *)(a1 + v7)];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 96) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 0;
  int v8 = *(void **)(a1 + 32);
  if (*(_BYTE *)(a1 + 104) == 14)
  {
    [v8 appendString:*(void *)(a1 + 56)];
    sub_10013A654(a2, *(void **)(a1 + 32));
    [*(id *)(a1 + 32) appendString:@"\n"];
  }

  else
  {
    [v8 appendFormat:@"%@%@\n", *(void *)(a1 + 56), a2];
  }

  [*(id *)(a1 + 32) appendString:*(void *)(a1 + 64)];
  switch(*(_BYTE *)(a1 + 105))
  {
    case 0xD:
      sub_100139D6C(a3, *(void **)(a1 + 32));
      break;
    case 0xE:
      sub_10013A654(a3, *(void **)(a1 + 32));
      break;
    case 0xF:
      [*(id *)(a1 + 32) appendString:@"{\n"];
      sub_100139090(a3, *(void *)(a1 + 32), [*(id *)(a1 + 72) stringByAppendingString:@"    "]);
      [*(id *)(a1 + 32) appendFormat:@"%@  }", *(void *)(a1 + 72)];
      break;
    case 0x11:
      id v11 = [a3 intValue];
      id v12 = [*(id *)(a1 + 80) enumDescriptor];
      if (v12)
      {
        id v13 = [v12 textFormatNameForValue:v11];
        if (v13)
        {
          id v10 = v13;
          id v9 = *(void **)(a1 + 32);
          goto LABEL_14;
        }
      }

      objc_msgSend(*(id *)(a1 + 32), "appendFormat:", @"%d", v11);
      break;
    default:
      id v9 = *(void **)(a1 + 32);
      id v10 = a3;
LABEL_14:
      [v9 appendString:v10];
      break;
  }

  [*(id *)(a1 + 32) appendString:@"\n"];
  return [*(id *)(a1 + 32) appendString:*(void *)(a1 + 88)];
}

uint64_t sub_10013B0C8(int a1, int a2)
{
  return a2 | (8 * a1);
}

uint64_t sub_10013B0D0(char a1)
{
  return a1 & 7;
}

uint64_t sub_10013B0D8(unsigned int a1)
{
  return a1 >> 3;
}

BOOL sub_10013B0E0(int a1)
{
  return (~a1 & 6) != 0;
}

uint64_t sub_10013B0F0(int a1, char a2)
{
  if ((a2 & 1) != 0) {
    return 2LL;
  }
  else {
    return dword_10024BF90[a1];
  }
}

id sub_10013B5C4(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[TransparencyGPBApi descriptor](TransparencyGPBApi, "descriptor"),  "fieldWithNumber:",  7));
}

id sub_10013B5FC(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[TransparencyGPBApi descriptor](TransparencyGPBApi, "descriptor"),  "fieldWithNumber:",  7),  a2);
}

id sub_10013B6BC(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[TransparencyGPBMethod descriptor](TransparencyGPBMethod, "descriptor"),  "fieldWithNumber:",  7));
}

id sub_10013B6F4(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[TransparencyGPBMethod descriptor](TransparencyGPBMethod, "descriptor"),  "fieldWithNumber:",  7),  a2);
}

void sub_10013BA3C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10013BA60(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EE818;
  qword_1002EE818 = (uint64_t)v1;
}

void sub_10013BA90(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  int v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue([v5 logger]);
  [v6 logResultForEvent:@"ForceSyncKVS" hardFailure:1 result:v3];

  if (v3)
  {
    if (qword_1002EE810 != -1) {
      dispatch_once(&qword_1002EE810, &stru_1002836B0);
    }
    uint64_t v7 = qword_1002EE818;
    if (os_log_type_enabled((os_log_t)qword_1002EE818, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v16 = 138412290;
      *(void *)&v16[4] = v3;
      int v8 = "ForceSyncKVS failed with error: %@";
      id v9 = (os_log_s *)v7;
      os_log_type_t v10 = OS_LOG_TYPE_ERROR;
      uint32_t v11 = 12;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, v16, v11);
    }
  }

  else
  {
    if (qword_1002EE810 != -1) {
      dispatch_once(&qword_1002EE810, &stru_1002836D0);
    }
    uint64_t v12 = qword_1002EE818;
    if (os_log_type_enabled((os_log_t)qword_1002EE818, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int v16 = 0;
      int v8 = "ForceSyncKVS success";
      id v9 = (os_log_s *)v12;
      os_log_type_t v10 = OS_LOG_TYPE_DEBUG;
      uint32_t v11 = 2;
      goto LABEL_10;
    }
  }

  id v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "intendedState", *(_OWORD *)v16));
  [WeakRetained setNextState:v13];

  unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
  unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
  [v14 addOperation:v15];
}

void sub_10013BC60(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EE818;
  qword_1002EE818 = (uint64_t)v1;
}

void sub_10013BC90(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EE818;
  qword_1002EE818 = (uint64_t)v1;
}

__CFString *sub_10013BDAC(uint64_t a1)
{
  if (!a1)
  {
    BOOL v6 = @"none";
    return v6;
  }

  uint64_t v1 = a1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  id v3 = v2;
  if ((v1 & 1) == 0)
  {
    if ((v1 & 2) == 0) {
      goto LABEL_4;
    }
LABEL_10:
    [v3 addObject:@"network"];
    v1 &= ~2uLL;
    if (!v1) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  [v2 addObject:@"unlock"];
  v1 &= ~1uLL;
  if ((v1 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_4:
  if (v1)
  {
LABEL_5:
    int v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unknown conditions: 0x%x",  v1));
    [v3 addObject:v4];
  }

LABEL_74:
      uint64_t v24 = 0LL;
      int v16 = v81;
      uint64_t v17 = v78;
      goto LABEL_26;
    }

    id v26 = v22;
    if (qword_1002EE820 != -1) {
      dispatch_once(&qword_1002EE820, &stru_100283758);
    }
    uint64_t v30 = (os_log_s *)qword_1002EE828;
    if (os_log_type_enabled((os_log_t)qword_1002EE828, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      uint64_t v89 = (uint64_t)v17;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "BatchQueryResponse for fetchId %{public}@ exceeded MMD",  buf,  0xCu);
    }

void sub_10013D16C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EE828;
  qword_1002EE828 = (uint64_t)v1;
}

void sub_10013D19C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EE828;
  qword_1002EE828 = (uint64_t)v1;
}

void sub_10013D1CC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EE828;
  qword_1002EE828 = (uint64_t)v1;
}

void sub_10013D1FC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EE828;
  qword_1002EE828 = (uint64_t)v1;
}

void sub_10013D22C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EE828;
  qword_1002EE828 = (uint64_t)v1;
}

void sub_10013D25C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EE828;
  qword_1002EE828 = (uint64_t)v1;
}

void sub_10013D28C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EE828;
  qword_1002EE828 = (uint64_t)v1;
}

void sub_10013D2BC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EE828;
  qword_1002EE828 = (uint64_t)v1;
}

void sub_10013D2EC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EE828;
  qword_1002EE828 = (uint64_t)v1;
}

void sub_10013D5A8(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (!v8)
  {
    (*(void (**)(void))(a1[7] + 16LL))();
    goto LABEL_17;
  }

  os_log_type_t v10 = (void *)a1[4];
  id v22 = 0LL;
  uint32_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 createTransparentDataFromQueryInfo:v8 error:&v22]);
  id v12 = v22;
  id v13 = v12;
  if (!v11)
  {
    if (qword_1002EE820 != -1) {
      dispatch_once(&qword_1002EE820, &stru_100283838);
    }
    uint64_t v17 = (os_log_s *)qword_1002EE828;
    if (os_log_type_enabled((os_log_t)qword_1002EE828, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = a1[5];
      *(_DWORD *)buf = 141558786;
      uint64_t v24 = 1752392040LL;
      __int16 v25 = 2112;
      id v26 = v7;
      __int16 v27 = 2114;
      uint64_t v28 = v18;
      __int16 v29 = 2112;
      id v30 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Failed to build transparentData for %{mask.hash}@ fetchId %{public}@: %@",  buf,  0x2Au);
    }

    (*(void (**)(void))(a1[7] + 16LL))();
    goto LABEL_16;
  }

  uint64_t v14 = a1[6];
  id v21 = v12;
  unsigned __int8 v15 = [v11 verifyServerInvariantsAt:v14 error:&v21];
  id v16 = v21;

  if ((v15 & 1) == 0)
  {
    if (qword_1002EE820 != -1) {
      dispatch_once(&qword_1002EE820, &stru_100283858);
    }
    id v19 = (os_log_s *)qword_1002EE828;
    if (os_log_type_enabled((os_log_t)qword_1002EE828, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = a1[5];
      *(_DWORD *)buf = 141558786;
      uint64_t v24 = 1752392040LL;
      __int16 v25 = 2112;
      id v26 = v7;
      __int16 v27 = 2114;
      uint64_t v28 = v20;
      __int16 v29 = 2112;
      id v30 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "Failed server invariant verification for %{mask.hash}@ fetchId %{public}@: %@",  buf,  0x2Au);
    }

    (*(void (**)(void))(a1[7] + 16LL))();
    id v13 = v16;
LABEL_16:

    goto LABEL_17;
  }

  (*(void (**)(void))(a1[7] + 16LL))();

LABEL_17:
}

void sub_10013D868(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EE828;
  qword_1002EE828 = (uint64_t)v1;
}

void sub_10013D898(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EE828;
  qword_1002EE828 = (uint64_t)v1;
}

void sub_10013DC48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10013DC6C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10013DC7C(uint64_t a1)
{
}

void sub_10013DC84(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  obuint64_t j = *(id *)(v3 + 40);
  unsigned __int8 v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if ((v4 & 1) != 0)
  {
    int v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  @"KTTreeHead"));
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"isMapHead == YES && application == %@ && logBeginTime == %llu && signatureVerified == %d && inclusionVerified == %d && mmdVerified = %d",  *(void *)(a1 + 40),  *(void *)(a1 + 72),  1LL,  1LL,  1LL));
    [v5 setPredicate:v6];

    uint64_t v46 = *(void *)(a1 + 48);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v46, 1LL));
    [v5 setPropertiesToFetch:v7];

    [v5 setReturnsDistinctResults:1];
    [v5 setResultType:2];
    [v5 setFetchLimit:1];
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  @"revision",  0LL));
    __int128 v45 = v8;
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v45, 1LL));
    [v5 setSortDescriptors:v9];

    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v38 = *(id *)(v11 + 40);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 executeFetchRequest:v5 error:&v38]);
    objc_storeStrong((id *)(v11 + 40), v38);

    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v37 = *(id *)(v13 + 40);
    +[TransparencyManagedDataStore cleanseError:](&OBJC_CLASS___TransparencyManagedDataStore, "cleanseError:", &v37);
    objc_storeStrong((id *)(v13 + 40), v37);
    if (v12 && [v12 count])
    {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v12 objectAtIndexedSubscript:0]);
      unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKeyedSubscript:*(void *)(a1 + 48)]);
      *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = [v15 BOOLValue];

      if (qword_1002EE830 != -1) {
        dispatch_once(&qword_1002EE830, &stru_1002838D0);
      }
      id v16 = (os_log_s *)qword_1002EE838;
      if (os_log_type_enabled((os_log_t)qword_1002EE838, OS_LOG_TYPE_INFO))
      {
        uint64_t v17 = *(void *)(a1 + 48);
        int v18 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
        *(_DWORD *)buf = 138412546;
        uint64_t v42 = v17;
        __int16 v43 = 1024;
        int v44 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "latest verified map has property %@ = %d",  buf,  0x12u);
      }

      id v19 = v12;
    }

    else
    {
      id v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"isMapHead == YES && application == %@ && logBeginTime == %llu && signatureVerified == %d && inclusionVerified == %d && mmdVerified = %d",  *(void *)(a1 + 40),  *(void *)(a1 + 72),  1LL,  2LL,  1LL));
      [v5 setPredicate:v21];

      id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  @"revision",  0LL));
      int v40 = v22;
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v40, 1LL));
      [v5 setSortDescriptors:v23];

      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
      uint64_t v25 = *(void *)(*(void *)(a1 + 56) + 8LL);
      id v36 = *(id *)(v25 + 40);
      id v19 = (void *)objc_claimAutoreleasedReturnValue([v24 executeFetchRequest:v5 error:&v36]);
      objc_storeStrong((id *)(v25 + 40), v36);

      uint64_t v26 = *(void *)(*(void *)(a1 + 56) + 8LL);
      id v35 = *(id *)(v26 + 40);
      +[TransparencyManagedDataStore cleanseError:](&OBJC_CLASS___TransparencyManagedDataStore, "cleanseError:", &v35);
      objc_storeStrong((id *)(v26 + 40), v35);
      if (v19 && [v19 count])
      {
        __int16 v27 = (void *)objc_claimAutoreleasedReturnValue([v19 objectAtIndexedSubscript:0]);
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v27 objectForKeyedSubscript:*(void *)(a1 + 48)]);
        *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = [v28 BOOLValue];

        if (qword_1002EE830 != -1) {
          dispatch_once(&qword_1002EE830, &stru_1002838F0);
        }
        __int16 v29 = (os_log_s *)qword_1002EE838;
        if (os_log_type_enabled((os_log_t)qword_1002EE838, OS_LOG_TYPE_INFO))
        {
          uint64_t v30 = *(void *)(a1 + 48);
          int v31 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
          *(_DWORD *)buf = 138412546;
          uint64_t v42 = v30;
          __int16 v43 = 1024;
          int v44 = v31;
          _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_INFO,  "no fully verified map; latest pending map had property %@ = %d",
            buf,
            0x12u);
        }
      }

      else
      {
        uint64_t v32 = objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:errorLevel:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:errorLevel:underlyingError:description:",  kTransparencyErrorDatabase,  -128LL,  2LL,  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL),  @"no previous map heads stored"));
        uint64_t v33 = *(void *)(*(void *)(a1 + 56) + 8LL);
        __int128 v34 = *(void **)(v33 + 40);
        *(void *)(v33 + 40) = v32;
      }
    }
  }

  else
  {
    if (qword_1002EE830 != -1) {
      dispatch_once(&qword_1002EE830, &stru_1002838B0);
    }
    uint64_t v20 = (os_log_s *)qword_1002EE838;
    if (os_log_type_enabled((os_log_t)qword_1002EE838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "failed to get latest map head", buf, 2u);
    }
  }

void sub_10013E220(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EE838;
  qword_1002EE838 = (uint64_t)v1;
}

void sub_10013E250(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EE838;
  qword_1002EE838 = (uint64_t)v1;
}

void sub_10013E280(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EE838;
  qword_1002EE838 = (uint64_t)v1;
}

void sub_10013E414( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_10013E438(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  obuint64_t j = *(id *)(v3 + 40);
  unsigned __int8 v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if ((v4 & 1) != 0)
  {
    int v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  @"KTTreeHead"));
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"isMapHead == YES && application == %@ && logBeginTime == %llu && signatureVerified == %d && inclusionVerified == %d && mmdVerified = %d",  *(void *)(a1 + 40),  *(void *)(a1 + 72),  1LL,  1LL,  1LL));
    [v5 setPredicate:v6];

    uint64_t v47 = *(void *)(a1 + 48);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v47, 1LL));
    [v5 setPropertiesToFetch:v7];

    [v5 setReturnsDistinctResults:1];
    [v5 setResultType:2];
    [v5 setFetchLimit:1];
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  @"revision",  0LL));
    uint64_t v46 = v8;
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v46, 1LL));
    [v5 setSortDescriptors:v9];

    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v39 = *(id *)(v11 + 40);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 executeFetchRequest:v5 error:&v39]);
    objc_storeStrong((id *)(v11 + 40), v39);

    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v38 = *(id *)(v13 + 40);
    +[TransparencyManagedDataStore cleanseError:](&OBJC_CLASS___TransparencyManagedDataStore, "cleanseError:", &v38);
    objc_storeStrong((id *)(v13 + 40), v38);
    if (v12 && [v12 count])
    {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v12 objectAtIndexedSubscript:0]);
      uint64_t v15 = objc_claimAutoreleasedReturnValue([v14 objectForKeyedSubscript:*(void *)(a1 + 48)]);
      uint64_t v16 = *(void *)(*(void *)(a1 + 64) + 8LL);
      uint64_t v17 = *(void **)(v16 + 40);
      *(void *)(v16 + 40) = v15;

      if (qword_1002EE830 != -1) {
        dispatch_once(&qword_1002EE830, &stru_100283958);
      }
      int v18 = (os_log_s *)qword_1002EE838;
      if (os_log_type_enabled((os_log_t)qword_1002EE838, OS_LOG_TYPE_INFO))
      {
        uint64_t v19 = *(void *)(a1 + 48);
        uint64_t v20 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
        *(_DWORD *)buf = 138412546;
        uint64_t v43 = v19;
        __int16 v44 = 2112;
        uint64_t v45 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "latest verified map has property %@ = %@",  buf,  0x16u);
      }
    }

    else
    {
      id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"isMapHead == YES && application == %@ && logBeginTime == %llu && signatureVerified == %d && inclusionVerified == %d && mmdVerified = %d",  *(void *)(a1 + 40),  *(void *)(a1 + 72),  1LL,  2LL,  1LL));
      [v5 setPredicate:v22];

      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  @"revision",  0LL));
      id v41 = v23;
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v41, 1LL));
      [v5 setSortDescriptors:v24];

      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
      uint64_t v26 = *(void *)(*(void *)(a1 + 56) + 8LL);
      id v37 = *(id *)(v26 + 40);
      __int16 v27 = (void *)objc_claimAutoreleasedReturnValue([v25 executeFetchRequest:v5 error:&v37]);
      objc_storeStrong((id *)(v26 + 40), v37);

      uint64_t v28 = *(void *)(*(void *)(a1 + 56) + 8LL);
      id v36 = *(id *)(v28 + 40);
      +[TransparencyManagedDataStore cleanseError:](&OBJC_CLASS___TransparencyManagedDataStore, "cleanseError:", &v36);
      objc_storeStrong((id *)(v28 + 40), v36);
      if (v27)
      {
        if ([v27 count])
        {
          __int16 v29 = (void *)objc_claimAutoreleasedReturnValue([v27 objectAtIndexedSubscript:0]);
          uint64_t v30 = objc_claimAutoreleasedReturnValue([v29 objectForKeyedSubscript:*(void *)(a1 + 48)]);
          uint64_t v31 = *(void *)(*(void *)(a1 + 64) + 8LL);
          uint64_t v32 = *(void **)(v31 + 40);
          *(void *)(v31 + 40) = v30;

          if (qword_1002EE830 != -1) {
            dispatch_once(&qword_1002EE830, &stru_100283978);
          }
          uint64_t v33 = (os_log_s *)qword_1002EE838;
          if (os_log_type_enabled((os_log_t)qword_1002EE838, OS_LOG_TYPE_INFO))
          {
            uint64_t v34 = *(void *)(a1 + 48);
            uint64_t v35 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
            *(_DWORD *)buf = 138412546;
            uint64_t v43 = v34;
            __int16 v44 = 2112;
            uint64_t v45 = v35;
            _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_INFO,  "no fully verified map; latest pending map had property %@ = %@",
              buf,
              0x16u);
          }
        }

        id v12 = v27;
      }

      else
      {
        id v12 = 0LL;
      }
    }
  }

  else
  {
    if (qword_1002EE830 != -1) {
      dispatch_once(&qword_1002EE830, &stru_100283938);
    }
    id v21 = (os_log_s *)qword_1002EE838;
    if (os_log_type_enabled((os_log_t)qword_1002EE838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "failed to get latest map head", buf, 2u);
    }
  }

void sub_10013E984(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EE838;
  qword_1002EE838 = (uint64_t)v1;
}

void sub_10013E9B4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EE838;
  qword_1002EE838 = (uint64_t)v1;
}

void sub_10013E9E4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EE838;
  qword_1002EE838 = (uint64_t)v1;
}

void sub_10013EC10( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10013EC34(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v36 = *(id *)(v3 + 40);
  unsigned __int8 v4 = [v2 persistWithError:&v36];
  objc_storeStrong((id *)(v3 + 40), v36);
  if ((v4 & 1) != 0)
  {
    int v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  @"KTTreeHead"));
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"isMapHead == YES && application == %@ && logBeginTime == %llu && signatureVerified == %d && inclusionVerified == %d && mmdVerified = %d",  *(void *)(a1 + 40),  *(void *)(a1 + 72),  1LL,  1LL,  1LL));
    [v5 setPredicate:v6];

    [v5 setReturnsDistinctResults:1];
    [v5 setFetchLimit:1];
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  @"revision",  0LL));
    id v37 = v7;
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v37, 1LL));
    [v5 setSortDescriptors:v8];

    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8LL);
    obuint64_t j = *(id *)(v10 + 40);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 executeFetchRequest:v5 error:&obj]);
    objc_storeStrong((id *)(v10 + 40), obj);

    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v33 = *(id *)(v12 + 40);
    +[TransparencyManagedDataStore cleanseError:](&OBJC_CLASS___TransparencyManagedDataStore, "cleanseError:", &v33);
    objc_storeStrong((id *)(v12 + 40), v33);
    if (v11 && [v11 count])
    {
      uint64_t v13 = v11;
    }

    else
    {
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"isMapHead == YES && application == %@ && logBeginTime == %llu && signatureVerified == %d && inclusionVerified == %d && mmdVerified = %d",  *(void *)(a1 + 40),  *(void *)(a1 + 72),  1LL,  2LL,  1LL));
      [v5 setPredicate:v15];

      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
      uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8LL);
      id v32 = *(id *)(v17 + 40);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v16 executeFetchRequest:v5 error:&v32]);
      objc_storeStrong((id *)(v17 + 40), v32);

      uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8LL);
      id v31 = *(id *)(v18 + 40);
      +[TransparencyManagedDataStore cleanseError:](&OBJC_CLASS___TransparencyManagedDataStore, "cleanseError:", &v31);
      objc_storeStrong((id *)(v18 + 40), v31);
      if (!v13 || ![v13 count])
      {
        uint64_t v25 = objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:errorLevel:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:errorLevel:underlyingError:description:",  kTransparencyErrorDatabase,  -128LL,  2LL,  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL),  @"no previous map heads stored"));
        uint64_t v26 = *(void *)(*(void *)(a1 + 56) + 8LL);
        __int16 v27 = *(void **)(v26 + 40);
        *(void *)(v26 + 40) = v25;

        goto LABEL_14;
      }
    }

    uint64_t v19 = objc_claimAutoreleasedReturnValue([v13 objectAtIndexedSubscript:0]);
    if (v19)
    {
      uint64_t v20 = (void *)v19;
      uint64_t v21 = *(void *)(a1 + 48);
      uint64_t v22 = *(void *)(*(void *)(a1 + 56) + 8LL);
      id v30 = *(id *)(v22 + 40);
      char v23 = (*(uint64_t (**)(void))(v21 + 16))();
      objc_storeStrong((id *)(v22 + 40), v30);
      *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v23;
      uint64_t v24 = *(void *)(*(void *)(a1 + 56) + 8LL);
      id v29 = *(id *)(v24 + 40);
      +[TransparencyManagedDataStore cleanseError:](&OBJC_CLASS___TransparencyManagedDataStore, "cleanseError:", &v29);
      objc_storeStrong((id *)(v24 + 40), v29);

LABEL_18:
      return;
    }

void sub_10013F090(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EE838;
  qword_1002EE838 = (uint64_t)v1;
}

void sub_10013F0C0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EE838;
  qword_1002EE838 = (uint64_t)v1;
}

void sub_10013F26C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EE838;
  qword_1002EE838 = (uint64_t)v1;
}

id *sub_10013F880(id *result, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return (id *)_[result[4] setPendingFlag:@"FetchIDMS" stateMachine:result[5]];
  }
  return result;
}

unint64_t BatchUpdateRequest_UpdateData_UpdateType_EnumDescriptor()
{
  if (!atomic_load(&qword_1002EE840))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:valueNames:values:count:enumVerifier:flags:]( &OBJC_CLASS___TransparencyGPBEnumDescriptor,  "allocDescriptorForName:valueNames:values:count:enumVerifier:flags:",  @"BatchUpdateRequest_UpdateData_UpdateType",  "Insert",  &unk_10024C010,  3LL,  BatchUpdateRequest_UpdateData_UpdateType_IsValidValue,  0LL);
    while (!__ldaxr(&qword_1002EE840))
    {
    }

    __clrex();
  }

  return atomic_load(&qword_1002EE840);
}

BOOL BatchUpdateRequest_UpdateData_UpdateType_IsValidValue(unsigned int a1)
{
  return a1 < 3;
}

id BatchUpdateRequest_Version_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[BatchUpdateRequest descriptor](BatchUpdateRequest, "descriptor"),  "fieldWithNumber:",  1));
}

id SetBatchUpdateRequest_Version_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[BatchUpdateRequest descriptor](BatchUpdateRequest, "descriptor"),  "fieldWithNumber:",  1),  a2);
}

id BatchUpdateRequest_UpdateData_Type_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[BatchUpdateRequest_UpdateData descriptor](BatchUpdateRequest_UpdateData, "descriptor"),  "fieldWithNumber:",  1));
}

id SetBatchUpdateRequest_UpdateData_Type_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[BatchUpdateRequest_UpdateData descriptor]( BatchUpdateRequest_UpdateData,  "descriptor"),  "fieldWithNumber:",  1),  a2);
}

id BatchUpdateRequest_UpdateData_Application_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[BatchUpdateRequest_UpdateData descriptor](BatchUpdateRequest_UpdateData, "descriptor"),  "fieldWithNumber:",  2));
}

id SetBatchUpdateRequest_UpdateData_Application_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[BatchUpdateRequest_UpdateData descriptor]( BatchUpdateRequest_UpdateData,  "descriptor"),  "fieldWithNumber:",  2),  a2);
}

id BatchUpdateResponse_Status_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[BatchUpdateResponse descriptor](BatchUpdateResponse, "descriptor"),  "fieldWithNumber:",  1));
}

id SetBatchUpdateResponse_Status_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[BatchUpdateResponse descriptor](BatchUpdateResponse, "descriptor"),  "fieldWithNumber:",  1),  a2);
}

void BatchUpdateResponse_UpdateResponseData_ClearResponseDataOneOfCase(uint64_t a1)
{
}

id InsertResponse_Status_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[InsertResponse descriptor](InsertResponse, "descriptor"),  "fieldWithNumber:",  1));
}

id SetInsertResponse_Status_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[InsertResponse descriptor](InsertResponse, "descriptor"),  "fieldWithNumber:",  1),  a2);
}

id MarkForDeletionResponse_Status_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[MarkForDeletionResponse descriptor](MarkForDeletionResponse, "descriptor"),  "fieldWithNumber:",  1));
}

id SetMarkForDeletionResponse_Status_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[MarkForDeletionResponse descriptor](MarkForDeletionResponse, "descriptor"),  "fieldWithNumber:",  1),  a2);
}

id OptInOutResponse_Status_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[OptInOutResponse descriptor](OptInOutResponse, "descriptor"),  "fieldWithNumber:",  1));
}

id SetOptInOutResponse_Status_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[OptInOutResponse descriptor](OptInOutResponse, "descriptor"),  "fieldWithNumber:",  1),  a2);
}

id VerifySyncRequest_Version_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[VerifySyncRequest descriptor](VerifySyncRequest, "descriptor"),  "fieldWithNumber:",  1));
}

id SetVerifySyncRequest_Version_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[VerifySyncRequest descriptor](VerifySyncRequest, "descriptor"),  "fieldWithNumber:",  1),  a2);
}

id VerifySyncRequest_Application_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[VerifySyncRequest descriptor](VerifySyncRequest, "descriptor"),  "fieldWithNumber:",  4));
}

id SetVerifySyncRequest_Application_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[VerifySyncRequest descriptor](VerifySyncRequest, "descriptor"),  "fieldWithNumber:",  4),  a2);
}

id VerifySyncResponse_Status_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[VerifySyncResponse descriptor](VerifySyncResponse, "descriptor"),  "fieldWithNumber:",  1));
}

id SetVerifySyncResponse_Status_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[VerifySyncResponse descriptor](VerifySyncResponse, "descriptor"),  "fieldWithNumber:",  1),  a2);
}

id ConsistencyProofRequest_Version_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[ConsistencyProofRequest descriptor](ConsistencyProofRequest, "descriptor"),  "fieldWithNumber:",  1));
}

id SetConsistencyProofRequest_Version_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[ConsistencyProofRequest descriptor](ConsistencyProofRequest, "descriptor"),  "fieldWithNumber:",  1),  a2);
}

id ConsistencyProofRequest_LogType_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[ConsistencyProofRequest descriptor](ConsistencyProofRequest, "descriptor"),  "fieldWithNumber:",  3));
}

id SetConsistencyProofRequest_LogType_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[ConsistencyProofRequest descriptor](ConsistencyProofRequest, "descriptor"),  "fieldWithNumber:",  3),  a2);
}

id ConsistencyProofRequest_Application_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[ConsistencyProofRequest descriptor](ConsistencyProofRequest, "descriptor"),  "fieldWithNumber:",  4));
}

id SetConsistencyProofRequest_Application_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[ConsistencyProofRequest descriptor](ConsistencyProofRequest, "descriptor"),  "fieldWithNumber:",  4),  a2);
}

id ConsistencyProofResponse_Status_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[ConsistencyProofResponse descriptor](ConsistencyProofResponse, "descriptor"),  "fieldWithNumber:",  1));
}

id SetConsistencyProofResponse_Status_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[ConsistencyProofResponse descriptor](ConsistencyProofResponse, "descriptor"),  "fieldWithNumber:",  1),  a2);
}

id ConsistencyProofResponse_LogType_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[ConsistencyProofResponse descriptor](ConsistencyProofResponse, "descriptor"),  "fieldWithNumber:",  4));
}

id SetConsistencyProofResponse_LogType_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[ConsistencyProofResponse descriptor](ConsistencyProofResponse, "descriptor"),  "fieldWithNumber:",  4),  a2);
}

id ConsistencyProofResponse_Application_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[ConsistencyProofResponse descriptor](ConsistencyProofResponse, "descriptor"),  "fieldWithNumber:",  5));
}

id SetConsistencyProofResponse_Application_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[ConsistencyProofResponse descriptor](ConsistencyProofResponse, "descriptor"),  "fieldWithNumber:",  5),  a2);
}

id RevisionLogInclusionProofRequest_Version_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[RevisionLogInclusionProofRequest descriptor]( RevisionLogInclusionProofRequest,  "descriptor"),  "fieldWithNumber:",  1));
}

id SetRevisionLogInclusionProofRequest_Version_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[RevisionLogInclusionProofRequest descriptor]( RevisionLogInclusionProofRequest,  "descriptor"),  "fieldWithNumber:",  1),  a2);
}

id RevisionLogInclusionProofRequest_Application_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[RevisionLogInclusionProofRequest descriptor]( RevisionLogInclusionProofRequest,  "descriptor"),  "fieldWithNumber:",  2));
}

id SetRevisionLogInclusionProofRequest_Application_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[RevisionLogInclusionProofRequest descriptor]( RevisionLogInclusionProofRequest,  "descriptor"),  "fieldWithNumber:",  2),  a2);
}

id RevisionLogInclusionProofRequest_LogType_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[RevisionLogInclusionProofRequest descriptor]( RevisionLogInclusionProofRequest,  "descriptor"),  "fieldWithNumber:",  3));
}

id SetRevisionLogInclusionProofRequest_LogType_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[RevisionLogInclusionProofRequest descriptor]( RevisionLogInclusionProofRequest,  "descriptor"),  "fieldWithNumber:",  3),  a2);
}

id RevisionLogInclusionProofResponse_Status_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[RevisionLogInclusionProofResponse descriptor]( RevisionLogInclusionProofResponse,  "descriptor"),  "fieldWithNumber:",  1));
}

id SetRevisionLogInclusionProofResponse_Status_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[RevisionLogInclusionProofResponse descriptor]( RevisionLogInclusionProofResponse,  "descriptor"),  "fieldWithNumber:",  1),  a2);
}

id PublicKeysRequest_Version_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[PublicKeysRequest descriptor](PublicKeysRequest, "descriptor"),  "fieldWithNumber:",  1));
}

id SetPublicKeysRequest_Version_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[PublicKeysRequest descriptor](PublicKeysRequest, "descriptor"),  "fieldWithNumber:",  1),  a2);
}

id PublicKeysRequest_Application_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[PublicKeysRequest descriptor](PublicKeysRequest, "descriptor"),  "fieldWithNumber:",  2));
}

id SetPublicKeysRequest_Application_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[PublicKeysRequest descriptor](PublicKeysRequest, "descriptor"),  "fieldWithNumber:",  2),  a2);
}

id PublicKeysResponse_Status_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[PublicKeysResponse descriptor](PublicKeysResponse, "descriptor"),  "fieldWithNumber:",  1));
}

id SetPublicKeysResponse_Status_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[PublicKeysResponse descriptor](PublicKeysResponse, "descriptor"),  "fieldWithNumber:",  1),  a2);
}

id Gossip_Version_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend(+[Gossip descriptor](Gossip, "descriptor"), "fieldWithNumber:", 1));
}

id SetGossip_Version_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend(+[Gossip descriptor](Gossip, "descriptor"), "fieldWithNumber:", 1),  a2);
}

void sub_100141450( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_100141470(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001417FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_10014181C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100141B80( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100141B94(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if ([WeakRetained timeoutCanOccur])
  {
    [WeakRetained setTimeoutCanOccur:0];
    id v1 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained transitionOperation]);
    id v2 = [v1 timeout:0];

    uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSOperationQueue);
    unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained transitionOperation]);
    -[NSOperationQueue addOperation:](v3, "addOperation:", v4);
  }
}

void sub_100143530( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10014354C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v5 mutationMs];
  if (v7 > [v6 mutationMs])
  {
    uint64_t v8 = 1LL;
    goto LABEL_40;
  }

  id v9 = [v5 mutationMs];
  if (v9 != [v6 mutationMs])
  {
    uint64_t v8 = -1LL;
    goto LABEL_40;
  }

  if ([v5 isEqual:v6])
  {
LABEL_39:
    uint64_t v8 = 0LL;
    goto LABEL_40;
  }

  unsigned int v10 = [v5 getSimpleMutationType];
  unsigned int v11 = [v6 getSimpleMutationType];
  if ((v10 == 3 || [v5 hasOptInExtension])
    && (v11 == 3 || [v6 hasOptInExtension]))
  {
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v5 accountKeyHash]);
    uint64_t v13 = objc_claimAutoreleasedReturnValue([v6 accountKeyHash]);
    uint64_t v14 = (void *)v13;
    if (!v12 || !v13 || [v12 isEqualToData:v13])
    {
      unsigned int v15 = [v5 getOptIn];
      if (v15 != [v6 getOptIn])
      {
        *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
        if (qword_1002EE8E8 != -1) {
          dispatch_once(&qword_1002EE8E8, &stru_100283A58);
        }
        uint64_t v16 = (void *)qword_1002EE8F0;
        if (os_log_type_enabled((os_log_t)qword_1002EE8F0, OS_LOG_TYPE_ERROR))
        {
          uint64_t v17 = v16;
          *(_DWORD *)buf = 134217984;
          id v48 = [v5 mutationMs];
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Error sorting SMTS: different OptInOut states for %llu ms",  buf,  0xCu);
        }
      }
    }
  }

  unsigned int v18 = v10 - 1;
  if (v10 == 1 && v11 == 1)
  {
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v5 idsDeviceMutation]);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 accountKeyHash]);
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v6 idsDeviceMutation]);
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v21 accountKeyHash]);
    unsigned __int8 v23 = [v20 isEqual:v22];

    if ((v23 & 1) == 0)
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
      if (qword_1002EE8E8 != -1) {
        dispatch_once(&qword_1002EE8E8, &stru_100283A78);
      }
      id v39 = (void *)qword_1002EE8F0;
      if (!os_log_type_enabled((os_log_t)qword_1002EE8F0, OS_LOG_TYPE_ERROR)) {
        goto LABEL_39;
      }
      id v36 = v39;
      id v40 = [v5 mutationMs];
      *(_DWORD *)buf = 134217984;
      id v48 = v40;
      id v38 = "Error sorting SMTS: two Add mutations with different account key for %llu ms";
LABEL_35:
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, v38, buf, 0xCu);

      goto LABEL_39;
    }
  }

  uint64_t v8 = 0LL;
  if (v18 <= 1 && v11 - 1 <= 1)
  {
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v5 idsDeviceMutation]);
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 accountKeyHash]);
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v6 idsDeviceMutation]);
    __int16 v27 = (void *)objc_claimAutoreleasedReturnValue([v26 accountKeyHash]);
    if ([v25 isEqual:v27])
    {
      uint64_t v45 = v25;
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v5 idsDeviceMutation]);
      id v29 = (void *)objc_claimAutoreleasedReturnValue([v28 deviceIdHash]);
      id v30 = (void *)objc_claimAutoreleasedReturnValue([v6 idsDeviceMutation]);
      id v31 = (void *)objc_claimAutoreleasedReturnValue([v30 deviceIdHash]);
      uint64_t v46 = v29;
      if ([v29 isEqual:v31])
      {
        uint64_t v42 = v28;
        id v32 = (void *)objc_claimAutoreleasedReturnValue([v5 idsDeviceMutation]);
        id v33 = [v32 appVersion];
        __int16 v44 = v24;
        uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v6 idsDeviceMutation]);
        id v43 = [v34 appVersion];

        if (v33 != v43) {
          goto LABEL_39;
        }
        *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
        if (qword_1002EE8E8 != -1) {
          dispatch_once(&qword_1002EE8E8, &stru_100283A98);
        }
        uint64_t v35 = (void *)qword_1002EE8F0;
        if (!os_log_type_enabled((os_log_t)qword_1002EE8F0, OS_LOG_TYPE_ERROR)) {
          goto LABEL_39;
        }
        id v36 = v35;
        id v37 = [v5 mutationMs];
        *(_DWORD *)buf = 134217984;
        id v48 = v37;
        id v38 = "Error sorting SMTS: different Add/Mark mutations for %llu ms for entry";
        goto LABEL_35;
      }
    }

    else
    {
    }

    goto LABEL_39;
  }

void sub_100143A5C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE8F0;
  qword_1002EE8F0 = (uint64_t)v1;
}

void sub_100143A8C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE8F0;
  qword_1002EE8F0 = (uint64_t)v1;
}

void sub_100143ABC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE8F0;
  qword_1002EE8F0 = (uint64_t)v1;
}

void sub_100144814(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE8F0;
  qword_1002EE8F0 = (uint64_t)v1;
}

void sub_100144844(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE8F0;
  qword_1002EE8F0 = (uint64_t)v1;
}

void sub_100144874(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE8F0;
  qword_1002EE8F0 = (uint64_t)v1;
}

void sub_1001448A4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE8F0;
  qword_1002EE8F0 = (uint64_t)v1;
}

void sub_1001448D4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE8F0;
  qword_1002EE8F0 = (uint64_t)v1;
}

void sub_100144904(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE8F0;
  qword_1002EE8F0 = (uint64_t)v1;
}

void sub_100145ABC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE8F0;
  qword_1002EE8F0 = (uint64_t)v1;
}

void sub_100145AEC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE8F0;
  qword_1002EE8F0 = (uint64_t)v1;
}

void sub_100145B1C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE8F0;
  qword_1002EE8F0 = (uint64_t)v1;
}

void sub_100145B4C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE8F0;
  qword_1002EE8F0 = (uint64_t)v1;
}

void sub_100145B7C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE8F0;
  qword_1002EE8F0 = (uint64_t)v1;
}

void sub_100145BAC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE8F0;
  qword_1002EE8F0 = (uint64_t)v1;
}

void sub_100145BDC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE8F0;
  qword_1002EE8F0 = (uint64_t)v1;
}

void sub_100145EE8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE8F0;
  qword_1002EE8F0 = (uint64_t)v1;
}

void sub_100146294(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE8F0;
  qword_1002EE8F0 = (uint64_t)v1;
}

void sub_1001474AC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE8F0;
  qword_1002EE8F0 = (uint64_t)v1;
}

void sub_1001474DC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE8F0;
  qword_1002EE8F0 = (uint64_t)v1;
}

void sub_10014750C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE8F0;
  qword_1002EE8F0 = (uint64_t)v1;
}

void sub_10014753C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE8F0;
  qword_1002EE8F0 = (uint64_t)v1;
}

void sub_10014756C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE8F0;
  qword_1002EE8F0 = (uint64_t)v1;
}

void sub_100147E34(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE8F0;
  qword_1002EE8F0 = (uint64_t)v1;
}

void sub_10014814C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE8F0;
  qword_1002EE8F0 = (uint64_t)v1;
}

unint64_t ProtocolVersion_EnumDescriptor()
{
  if (!atomic_load(&qword_1002EE8F8))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:valueNames:values:count:enumVerifier:flags:]( &OBJC_CLASS___TransparencyGPBEnumDescriptor,  "allocDescriptorForName:valueNames:values:count:enumVerifier:flags:",  @"ProtocolVersion",  "UnknownVersion",  &unk_10024C16C,  5LL,  ProtocolVersion_IsValidValue,  0LL);
    while (!__ldaxr(&qword_1002EE8F8))
    {
    }

    __clrex();
  }

  return atomic_load(&qword_1002EE8F8);
}

BOOL ProtocolVersion_IsValidValue(unsigned int a1)
{
  return a1 < 4 || a1 == 999999999;
}

unint64_t Application_EnumDescriptor()
{
  if (!atomic_load(&qword_1002EE900))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:valueNames:values:count:enumVerifier:flags:]( &OBJC_CLASS___TransparencyGPBEnumDescriptor,  "allocDescriptorForName:valueNames:values:count:enumVerifier:flags:",  @"Application",  "UnknownApplication",  &unk_10024C1FC,  7LL,  Application_IsValidValue,  0LL);
    while (!__ldaxr(&qword_1002EE900))
    {
    }

    __clrex();
  }

  return atomic_load(&qword_1002EE900);
}

BOOL Application_IsValidValue(unsigned int a1)
{
  return a1 < 7;
}

unint64_t Status_EnumDescriptor()
{
  if (!atomic_load(&qword_1002EE908))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:valueNames:values:count:enumVerifier:flags:]( &OBJC_CLASS___TransparencyGPBEnumDescriptor,  "allocDescriptorForName:valueNames:values:count:enumVerifier:flags:",  @"Status",  "UnknownStatus",  &unk_10024C260,  6LL,  Status_IsValidValue,  0LL);
    while (!__ldaxr(&qword_1002EE908))
    {
    }

    __clrex();
  }

  return atomic_load(&qword_1002EE908);
}

uint64_t Status_IsValidValue(unsigned int a1)
{
  return (a1 < 8) & (0xEBu >> a1);
}

unint64_t VRFType_EnumDescriptor()
{
  if (!atomic_load(&qword_1002EE910))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:valueNames:values:count:enumVerifier:flags:extraTextFormatInfo:]( &OBJC_CLASS___TransparencyGPBEnumDescriptor,  "allocDescriptorForName:valueNames:values:count:enumVerifier:flags:extraTextFormatInfo:",  @"VRFType",  "UnknownVrf",  &unk_10024C2A4,  2LL,  VRFType_IsValidValue,  0LL,  &unk_10024C2AC);
    while (!__ldaxr(&qword_1002EE910))
    {
    }

    __clrex();
  }

  return atomic_load(&qword_1002EE910);
}

BOOL VRFType_IsValidValue(int a1)
{
  return !a1 || a1 == 3;
}

unint64_t LogType_EnumDescriptor()
{
  if (!atomic_load(&qword_1002EE918))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:valueNames:values:count:enumVerifier:flags:]( &OBJC_CLASS___TransparencyGPBEnumDescriptor,  "allocDescriptorForName:valueNames:values:count:enumVerifier:flags:",  @"LogType",  "UnknownLog",  &unk_10024C310,  7LL,  LogType_IsValidValue,  0LL);
    while (!__ldaxr(&qword_1002EE918))
    {
    }

    __clrex();
  }

  return atomic_load(&qword_1002EE918);
}

BOOL LogType_IsValidValue(unsigned int a1)
{
  return a1 < 7;
}

unint64_t MapType_EnumDescriptor()
{
  if (!atomic_load(&qword_1002EE920))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:valueNames:values:count:enumVerifier:flags:]( &OBJC_CLASS___TransparencyGPBEnumDescriptor,  "allocDescriptorForName:valueNames:values:count:enumVerifier:flags:",  @"MapType",  "UnknownMap",  &unk_10024C35C,  3LL,  MapType_IsValidValue,  0LL);
    while (!__ldaxr(&qword_1002EE920))
    {
    }

    __clrex();
  }

  return atomic_load(&qword_1002EE920);
}

BOOL MapType_IsValidValue(unsigned int a1)
{
  return a1 < 3;
}

unint64_t NodeType_EnumDescriptor()
{
  if (!atomic_load(&qword_1002EE928))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:valueNames:values:count:enumVerifier:flags:]( &OBJC_CLASS___TransparencyGPBEnumDescriptor,  "allocDescriptorForName:valueNames:values:count:enumVerifier:flags:",  @"NodeType",  "PaclNode",  &unk_10024C3C4,  9LL,  NodeType_IsValidValue,  0LL);
    while (!__ldaxr(&qword_1002EE928))
    {
    }

    __clrex();
  }

  return atomic_load(&qword_1002EE928);
}

BOOL NodeType_IsValidValue(unsigned int a1)
{
  return a1 < 9;
}

unint64_t Signature_SignatureAlgorithm_EnumDescriptor()
{
  if (!atomic_load(&qword_1002EE930))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:valueNames:values:count:enumVerifier:flags:]( &OBJC_CLASS___TransparencyGPBEnumDescriptor,  "allocDescriptorForName:valueNames:values:count:enumVerifier:flags:",  @"Signature_SignatureAlgorithm",  "Unknown",  &unk_10024C400,  2LL,  Signature_SignatureAlgorithm_IsValidValue,  0LL);
    while (!__ldaxr(&qword_1002EE930))
    {
    }

    __clrex();
  }

  return atomic_load(&qword_1002EE930);
}

BOOL Signature_SignatureAlgorithm_IsValidValue(unsigned int a1)
{
  return a1 < 2;
}

id VRFWitness_Type_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend(+[VRFWitness descriptor](VRFWitness, "descriptor"), "fieldWithNumber:", 1));
}

id SetVRFWitness_Type_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[VRFWitness descriptor](VRFWitness, "descriptor"),  "fieldWithNumber:",  1),  a2);
}

id VRFPublicKey_Type_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend(+[VRFPublicKey descriptor](VRFPublicKey, "descriptor"), "fieldWithNumber:", 2));
}

id SetVRFPublicKey_Type_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[VRFPublicKey descriptor](VRFPublicKey, "descriptor"),  "fieldWithNumber:",  2),  a2);
}

id Signature_Algorithm_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend(+[Signature descriptor](Signature, "descriptor"), "fieldWithNumber:", 3));
}

id SetSignature_Algorithm_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[Signature descriptor](Signature, "descriptor"),  "fieldWithNumber:",  3),  a2);
}

id LogHead_LogType_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend(+[LogHead descriptor](LogHead, "descriptor"), "fieldWithNumber:", 5));
}

id SetLogHead_LogType_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend(+[LogHead descriptor](LogHead, "descriptor"), "fieldWithNumber:", 5),  a2);
}

id LogHead_Application_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend(+[LogHead descriptor](LogHead, "descriptor"), "fieldWithNumber:", 6));
}

id SetLogHead_Application_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend(+[LogHead descriptor](LogHead, "descriptor"), "fieldWithNumber:", 6),  a2);
}

id LogEntry_LogType_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend(+[LogEntry descriptor](LogEntry, "descriptor"), "fieldWithNumber:", 1));
}

id SetLogEntry_LogType_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend(+[LogEntry descriptor](LogEntry, "descriptor"), "fieldWithNumber:", 1),  a2);
}

id LogEntry_NodeType_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend(+[LogEntry descriptor](LogEntry, "descriptor"), "fieldWithNumber:", 6));
}

id SetLogEntry_NodeType_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend(+[LogEntry descriptor](LogEntry, "descriptor"), "fieldWithNumber:", 6),  a2);
}

id MapHead_Application_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend(+[MapHead descriptor](MapHead, "descriptor"), "fieldWithNumber:", 3));
}

id SetMapHead_Application_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend(+[MapHead descriptor](MapHead, "descriptor"), "fieldWithNumber:", 3),  a2);
}

id MapHead_MapType_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend(+[MapHead descriptor](MapHead, "descriptor"), "fieldWithNumber:", 6));
}

id SetMapHead_MapType_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend(+[MapHead descriptor](MapHead, "descriptor"), "fieldWithNumber:", 6),  a2);
}

id PerApplicationTreeConfigNode_EarliestVersion_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[PerApplicationTreeConfigNode descriptor](PerApplicationTreeConfigNode, "descriptor"),  "fieldWithNumber:",  3));
}

id SetPerApplicationTreeConfigNode_EarliestVersion_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[PerApplicationTreeConfigNode descriptor]( PerApplicationTreeConfigNode,  "descriptor"),  "fieldWithNumber:",  3),  a2);
}

id TopLevelTreeConfigNode_EarliestVersion_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[TopLevelTreeConfigNode descriptor](TopLevelTreeConfigNode, "descriptor"),  "fieldWithNumber:",  3));
}

id SetTopLevelTreeConfigNode_EarliestVersion_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[TopLevelTreeConfigNode descriptor](TopLevelTreeConfigNode, "descriptor"),  "fieldWithNumber:",  3),  a2);
}

id LogClosedNode_EarliestVersionForNextTree_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend(+[LogClosedNode descriptor](LogClosedNode, "descriptor"), "fieldWithNumber:", 3));
}

id SetLogClosedNode_EarliestVersionForNextTree_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[LogClosedNode descriptor](LogClosedNode, "descriptor"),  "fieldWithNumber:",  3),  a2);
}

void sub_10014970C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE9C0;
  qword_1002EE9C0 = (uint64_t)v1;
}

void sub_100149CE0(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (!v12 && v9 && v10 && v11)
  {
    +[TransparencyNetworkRequest addDeviceAuthentication:signature:timestamp:certs:]( &OBJC_CLASS___TransparencyNetworkRequest,  "addDeviceAuthentication:signature:timestamp:certs:",  *(void *)(a1 + 32),  v9,  v10,  v11);
    uint64_t v13 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  else
  {
    if (qword_1002EE9B8 != -1) {
      dispatch_once(&qword_1002EE9B8, &stru_100283DC0);
    }
    uint64_t v14 = (os_log_s *)qword_1002EE9C0;
    if (os_log_type_enabled((os_log_t)qword_1002EE9C0, OS_LOG_TYPE_DEBUG))
    {
      int v15 = 138412290;
      id v16 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "device identity authentication failed: %@",  (uint8_t *)&v15,  0xCu);
    }

    uint64_t v13 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  v13();
}

void sub_100149E40(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE9C0;
  qword_1002EE9C0 = (uint64_t)v1;
}

void sub_10014ACB0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE9D0;
  qword_1002EE9D0 = (uint64_t)v1;
}

void sub_10014B0EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10014B118(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE9E0;
  qword_1002EE9E0 = (uint64_t)v1;
}

void sub_10014B148(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (v3)
  {
    if (qword_1002EE9D8 != -1) {
      dispatch_once(&qword_1002EE9D8, &stru_100283E48);
    }
    id v6 = (os_log_s *)qword_1002EE9E0;
    if (os_log_type_enabled((os_log_t)qword_1002EE9E0, OS_LOG_TYPE_ERROR))
    {
      int v13 = 138412290;
      id v14 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "updatePublicKeyStores: failed with: %@",  (uint8_t *)&v13,  0xCu);
    }

    [v5 setError:v3];
  }

  else
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained intendedState]);
    [v5 setNextState:v7];
  }

  uint64_t v8 = -[KTPendingFlag initWithFlag:delayInSeconds:]( objc_alloc(&OBJC_CLASS___KTPendingFlag),  "initWithFlag:delayInSeconds:",  @"StatusUpdate",  0.0);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 deps]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 flagHandler]);
  [v10 handlePendingFlag:v8];

  id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 operationQueue]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v5 finishedOp]);
  [v11 addOperation:v12];
}

void sub_10014B2F4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE9E0;
  qword_1002EE9E0 = (uint64_t)v1;
}

void sub_10014B58C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10014B5B0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10014B5C0(uint64_t a1)
{
}

void sub_10014B5C8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue( +[NSEntityDescription insertNewObjectForEntityForName:inManagedObjectContext:]( &OBJC_CLASS___NSEntityDescription,  "insertNewObjectForEntityForName:inManagedObjectContext:",  @"KTSelfState",  v2));
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  id v6 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
  if (v6)
  {
    [v6 setApplication:*(void *)(a1 + 40)];
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setUri:*(void *)(a1 + 48)];
    id v7 = *(void **)(a1 + 32);
    uint64_t v8 = *(void *)(*(void *)(a1 + 64) + 8LL);
    obuint64_t j = *(id *)(v8 + 40);
    [v7 persistWithError:&obj];
    objc_storeStrong((id *)(v8 + 40), obj);
    uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8LL);
    id v10 = *(id *)(v9 + 40);
    +[TransparencyManagedDataStore cleanseError:](&OBJC_CLASS___TransparencyManagedDataStore, "cleanseError:", &v10);
    objc_storeStrong((id *)(v9 + 40), v10);
  }

void sub_10014B830( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_10014B854(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  obuint64_t j = *(id *)(v3 + 40);
  unsigned __int8 v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if ((v4 & 1) != 0)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[KTSelfState fetchRequest](&OBJC_CLASS___KTSelfState, "fetchRequest"));
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"application == %@ && uri == %@",  *(void *)(a1 + 40),  *(void *)(a1 + 48)));
    [v5 setPredicate:v6];

    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v18 = *(id *)(v8 + 40);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 executeFetchRequest:v5 error:&v18]);
    objc_storeStrong((id *)(v8 + 40), v18);

    uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v17 = *(id *)(v10 + 40);
    +[TransparencyManagedDataStore cleanseError:](&OBJC_CLASS___TransparencyManagedDataStore, "cleanseError:", &v17);
    objc_storeStrong((id *)(v10 + 40), v17);
    if (v9 && [v9 count] == (id)1)
    {
      uint64_t v11 = objc_claimAutoreleasedReturnValue([v9 objectAtIndexedSubscript:0]);
      uint64_t v12 = *(void *)(a1 + 64);
    }

    else
    {
      if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL))
      {
LABEL_9:

        goto LABEL_10;
      }

      uint64_t v11 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kTransparencyErrorDatabase,  -128LL,  0LL));
      uint64_t v12 = *(void *)(a1 + 56);
    }

    uint64_t v15 = *(void *)(v12 + 8);
    id v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v11;

    goto LABEL_9;
  }

  uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v19 = *(id *)(v13 + 40);
  +[TransparencyManagedDataStore cleanseError:](&OBJC_CLASS___TransparencyManagedDataStore, "cleanseError:", &v19);
  id v14 = v19;
  id v5 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v14;
LABEL_10:
}

void sub_10014BC70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10014BC94(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  uint64_t v5 = *(void *)(a1[8] + 8LL);
  obuint64_t j = *(id *)(v5 + 40);
  unsigned int v6 = [v2 initSelfState:v3 uri:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  if (v6)
  {
    id v7 = (void *)a1[4];
    uint64_t v8 = a1[5];
    uint64_t v9 = a1[6];
    uint64_t v10 = *(void *)(a1[8] + 8LL);
    id v24 = *(id *)(v10 + 40);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v7 fetchSelfValidationState:v8 uri:v9 error:&v24]);
    objc_storeStrong((id *)(v10 + 40), v24);
    if (v11)
    {
      uint64_t v12 = a1[7];
      uint64_t v13 = *(void *)(a1[8] + 8LL);
      id v23 = *(id *)(v13 + 40);
      char v14 = (*(uint64_t (**)(void))(v12 + 16))();
      objc_storeStrong((id *)(v13 + 40), v23);
      *(_BYTE *)(*(void *)(a1[9] + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v14;
      if (*(_BYTE *)(*(void *)(a1[9] + 8LL) + 24LL))
      {
        uint64_t v15 = *(void *)(a1[8] + 8LL);
        uint64_t v17 = *(void *)(v15 + 40);
        uint64_t v16 = (id *)(v15 + 40);
        if (!v17)
        {
          id v18 = (void *)a1[4];
          id v22 = 0LL;
          unsigned __int8 v19 = [v18 persistWithError:&v22];
          objc_storeStrong(v16, v22);
          *(_BYTE *)(*(void *)(a1[9] + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v19;
          uint64_t v20 = *(void *)(a1[8] + 8LL);
          id v21 = *(id *)(v20 + 40);
          +[TransparencyManagedDataStore cleanseError:]( &OBJC_CLASS___TransparencyManagedDataStore,  "cleanseError:",  &v21);
          objc_storeStrong((id *)(v20 + 40), v21);
        }
      }
    }
  }

BOOL sub_10014BEB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 followupTicket]);

  if (!v4)
  {
    +[TransparencySettings defaultSelfFollowupTicketLifetime]( &OBJC_CLASS___TransparencySettings,  "defaultSelfFollowupTicketLifetime");
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeInterval:sinceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeInterval:sinceDate:",  *(void *)(a1 + 32)));
    [v3 setFollowupTicket:v5];
  }

  return v4 == 0LL;
}

BOOL sub_10014C084(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 followupTicket]);

  if (v6)
  {
    uint64_t v7 = a1[6];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 followupTicket]);
    uint64_t v9 = v8;
    if (v7)
    {
      id v10 = [v8 compare:a1[6]];
    }

    else
    {
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
      id v10 = [v9 compare:v15];
    }

    BOOL v14 = (unint64_t)v10 + 1 < 2;
  }

  else if (a3)
  {
    uint64_t v11 = kTransparencyErrorDatabase;
    v17[0] = @"application";
    v17[1] = @"uri";
    uint64_t v12 = a1[5];
    v18[0] = a1[4];
    v18[1] = v12;
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v18,  v17,  2LL));
    BOOL v14 = 1LL;
    *a3 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:errorLevel:underlyingError:userinfo:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:errorLevel:underlyingError:userinfo:description:",  v11,  -338LL,  1LL,  0LL,  v13,  @"checked followup ticket when none exists"));
  }

  else
  {
    BOOL v14 = 1LL;
  }

  return v14;
}

BOOL sub_10014C214(id a1, KTSelfState *a2, id *a3)
{
  uint64_t v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[KTSelfState followupTicket](v4, "followupTicket"));

  if (v5)
  {
    -[KTSelfState setFollowupTicket:](v4, "setFollowupTicket:", 0LL);
  }

  else if (a3)
  {
    *a3 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:errorLevel:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:errorLevel:underlyingError:description:",  kTransparencyErrorDatabase,  -128LL,  2LL,  0LL,  @"tried to clear followup ticket when none exists"));
  }

  return v5 != 0LL;
}

void sub_10014C550(_Unwind_Exception *a1)
{
}

void sub_10014C580(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);

  if (!v2)
  {
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue([WeakRetained intendedState]);
    [WeakRetained setNextState:v4];
    goto LABEL_7;
  }

  if (qword_1002EE9E8 != -1) {
    dispatch_once(&qword_1002EE9E8, &stru_100283F48);
  }
  uint64_t v3 = (void *)qword_1002EE9F0;
  if (os_log_type_enabled((os_log_t)qword_1002EE9F0, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = v3;
    id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
    int v6 = 138412290;
    uint64_t v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "FetchKTSelf: error: %@", (uint8_t *)&v6, 0xCu);

LABEL_7:
  }
}

void sub_10014C6AC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE9F0;
  qword_1002EE9F0 = (uint64_t)v1;
}

void sub_10014C6DC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!v6)
  {
    if (qword_1002EE9E8 != -1) {
      dispatch_once(&qword_1002EE9E8, &stru_100283F68);
    }
    uint64_t v25 = (os_log_s *)qword_1002EE9F0;
    if (os_log_type_enabled((os_log_t)qword_1002EE9F0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v37 = (uint64_t)v7;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "FetchKTSelf: failed to fetch self verification info: %@",  buf,  0xCu);
    }

    uint64_t v26 = objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:description:",  kTransparencyErrorInterface,  -337LL,  v7,  @"fetchSelfVerificationInfoForApplication failed"));
    goto LABEL_25;
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 uriToServerLoggableDatas]);
  id v10 = [v9 count];

  if (!v10)
  {
    if (qword_1002EE9E8 != -1) {
      dispatch_once(&qword_1002EE9E8, &stru_100283F88);
    }
    __int16 v27 = (os_log_s *)qword_1002EE9F0;
    if (os_log_type_enabled((os_log_t)qword_1002EE9F0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "FetchKTSelf: no uriToServerLoggableDatas",  buf,  2u);
    }

    uint64_t v26 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kTransparencyErrorServer,  -336LL,  0LL));
LABEL_25:
    uint64_t v28 = (void *)v26;
    [WeakRetained setError:v26];

    id v23 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
    id v24 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
    [v23 addOperation:v24];
    goto LABEL_26;
  }

  id v29 = v7;
  id v30 = v6;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue([v6 uriToServerLoggableDatas]);
  id v11 = [obj countByEnumeratingWithState:&v32 objects:v40 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v33;
    do
    {
      BOOL v14 = 0LL;
      do
      {
        if (*(void *)v33 != v13) {
          objc_enumerationMutation(obj);
        }
        uint64_t v15 = *(void *)(*((void *)&v32 + 1) + 8LL * (void)v14);
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained application]);
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyApplication addApplicationPrefixForIdentifier:uri:]( &OBJC_CLASS___TransparencyApplication,  "addApplicationPrefixForIdentifier:uri:",  v16,  v15));

        if (qword_1002EE9E8 != -1) {
          dispatch_once(&qword_1002EE9E8, &stru_100283FA8);
        }
        id v18 = (os_log_s *)qword_1002EE9F0;
        if (os_log_type_enabled((os_log_t)qword_1002EE9F0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 141558274;
          uint64_t v37 = 1752392040LL;
          __int16 v38 = 2112;
          id v39 = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "FetchKTSelf: looking up %{mask.hash}@",  buf,  0x16u);
        }

        unsigned __int8 v19 = objc_alloc(&OBJC_CLASS___KTFetchURIOperation);
        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained application]);
        id v21 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
        id v22 = -[KTFetchURIOperation initWithURI:application:dependencies:]( v19,  "initWithURI:application:dependencies:",  v17,  v20,  v21);

        [WeakRetained runBeforeGroupFinished:v22];
        BOOL v14 = (char *)v14 + 1;
      }

      while (v12 != v14);
      id v12 = [obj countByEnumeratingWithState:&v32 objects:v40 count:16];
    }

    while (v12);
  }

  id v23 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
  id v24 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
  [v23 addOperation:v24];
  id v7 = v29;
  id v6 = v30;
LABEL_26:
}

void sub_10014CB08(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE9F0;
  qword_1002EE9F0 = (uint64_t)v1;
}

void sub_10014CB38(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE9F0;
  qword_1002EE9F0 = (uint64_t)v1;
}

void sub_10014CB68(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EE9F0;
  qword_1002EE9F0 = (uint64_t)v1;
}

id sub_10014D168(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onqueueSetFlag:*(void *)(a1 + 40)];
}

LABEL_72:
  return v66;
}

void sub_10014DBCC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_10014DBFC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_10014DC2C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_10014DC5C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_10014DC8C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_10014DCBC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_10014E3B8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_10014E3E8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_10014E418(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_10014E448(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_10014EBD0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_10014EC00(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_10014EC30(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_10014EC60(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_10014EE10(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_10014F464(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_10014F494(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_10014F4C4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_10014FAEC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_10014FB1C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_10014FB4C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_10014FB7C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_10014FBAC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_1001500D4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_100150104(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_100150134(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_100150164(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_1001505A8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_1001505D8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_100150AD0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_100150B00(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_100150B30(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_100150B60(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_100150D9C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA00;
  qword_1002EEA00 = (uint64_t)v1;
}

void sub_100151528( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id location)
{
}

void sub_100151568(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = objc_alloc_init(&OBJC_CLASS___KTCondition);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mutableStateConditions]);
  [v4 setObject:v5 forKeyedSubscript:v3];
}

void sub_1001515D8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100151664;
  block[3] = &unk_100276740;
  id v5 = WeakRetained;
  id v3 = WeakRetained;
  dispatch_sync(v2, block);
}

id sub_100151664(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onqueueSendAnyPendingFlags];
}

void sub_100151734( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10015174C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10015175C(uint64_t a1)
{
}

void sub_100151764(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mutableStateConditions]);
  id v2 = [v5 copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100151D9C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA10;
  qword_1002EEA10 = (uint64_t)v1;
}

void sub_100152188(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA10;
  qword_1002EEA10 = (uint64_t)v1;
}

void sub_1001521B8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA10;
  qword_1002EEA10 = (uint64_t)v1;
}

void sub_1001521E8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA10;
  qword_1002EEA10 = (uint64_t)v1;
}

void sub_100152324(_Unwind_Exception *a1)
{
}

void sub_100152344(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001523DC;
  block[3] = &unk_1002777A0;
  id v5 = *(id *)(a1 + 32);
  id v6 = WeakRetained;
  dispatch_sync(v2, block);
}

id sub_1001523DC(uint64_t a1)
{
  if (qword_1002EEA08 != -1) {
    dispatch_once(&qword_1002EEA08, &stru_1002844F8);
  }
  uint64_t v2 = (void *)qword_1002EEA10;
  if (os_log_type_enabled((os_log_t)qword_1002EEA10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = v2;
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 nextState]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) intendedState]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) currentFlags]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 contentsAsString]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) pendingFlagsString]);
    id v10 = *(void **)(a1 + 32);
    uint64_t v11 = objc_claimAutoreleasedReturnValue([v10 error]);
    id v12 = (void *)v11;
    *(_DWORD *)buf = 138544642;
    uint64_t v13 = @"(no error)";
    id v41 = v5;
    if (v11) {
      uint64_t v13 = (const __CFString *)v11;
    }
    __int16 v42 = 2114;
    id v43 = v6;
    __int16 v44 = 2114;
    uint64_t v45 = v8;
    __int16 v46 = 2114;
    uint64_t v47 = v9;
    __int16 v48 = 2114;
    id v49 = v10;
    __int16 v50 = 2114;
    uint64_t v51 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Finishing state transition attempt (ending in %{public}@, intended: %{public}@, f:[%{public}@], p:[%{public}@]): % {public}@ %{public}@",  buf,  0x3Eu);
  }

  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  BOOL v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) stateMachineWatchers]);
  id v15 = [v14 countByEnumeratingWithState:&v35 objects:v39 count:16];
  if (v15)
  {
    id v17 = v15;
    uint64_t v18 = *(void *)v36;
    *(void *)&__int128 v16 = 138543362LL;
    __int128 v34 = v16;
    do
    {
      unsigned __int8 v19 = 0LL;
      do
      {
        if (*(void *)v36 != v18) {
          objc_enumerationMutation(v14);
        }
        uint64_t v20 = *(void **)(*((void *)&v35 + 1) + 8LL * (void)v19);
        if (qword_1002EEA08 != -1) {
          dispatch_once(&qword_1002EEA08, &stru_100284518);
        }
        id v21 = (os_log_s *)qword_1002EEA10;
        if (os_log_type_enabled((os_log_t)qword_1002EEA10, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = v34;
          id v41 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "notifying watcher: %{public}@",  buf,  0xCu);
        }

        objc_msgSend(v20, "onqueueHandleTransition:", *(void *)(a1 + 32), v34);
        unsigned __int8 v19 = (char *)v19 + 1;
      }

      while (v17 != v19);
      id v17 = [v14 countByEnumeratingWithState:&v35 objects:v39 count:16];
    }

    while (v17);
  }

  id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) stateMachineWatchers]);
  id v23 = [v22 count];

  if (v23)
  {
    id v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) stateMachineWatchers]);
    uint64_t v25 = (uint64_t)[v24 count];

    if (v25 >= 1)
    {
      unint64_t v26 = v25 + 1;
      do
      {
        __int16 v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) stateMachineWatchers]);
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v27 objectAtIndexedSubscript:v26 - 2]);
        id v29 = (void *)objc_claimAutoreleasedReturnValue([v28 result]);
        unsigned int v30 = [v29 isFinished];

        if (v30)
        {
          id v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) stateMachineWatchers]);
          [v31 removeObjectAtIndex:v26 - 2];
        }

        --v26;
      }

      while (v26 > 1);
    }
  }

  __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) nextState]);
  [*(id *)(a1 + 40) setCurrentState:v32];

  [*(id *)(a1 + 40) setNextStateMachineCycleOperation:0];
  return [*(id *)(a1 + 40) _onqueueStartNextStateMachineOperation:1];
}

void sub_10015279C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEA10;
  qword_1002EEA10 = (uint64_t)v1;
}

void sub_1001527CC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEA10;
  qword_1002EEA10 = (uint64_t)v1;
}

id sub_100152868(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onqueuePokeStateMachine];
}

id sub_100152940(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onqueueHandleFlag:*(void *)(a1 + 40)];
}

id sub_100152A4C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _onqueueHandlePendingFlag:*(void *)(a1 + 40)];
}

id sub_100152B08(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _onqueueHandlePendingFlag:*(void *)(a1 + 40)];
}

id sub_100152C38(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onqueueCancelPendingFlag:*(void *)(a1 + 40)];
}

void sub_100152DB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100152DD8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  os_log_t v1 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100152E58;
  block[3] = &unk_100276740;
  void block[4] = WeakRetained;
  dispatch_sync(v1, block);
}

id sub_100152E58(uint64_t a1)
{
  if (qword_1002EEA08 != -1) {
    dispatch_once(&qword_1002EEA08, &stru_100284560);
  }
  uint64_t v2 = (os_log_s *)qword_1002EEA10;
  if (os_log_type_enabled((os_log_t)qword_1002EEA10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Finished waiting for operation", v4, 2u);
  }

  return [*(id *)(a1 + 32) _onqueueSendAnyPendingFlags];
}

void sub_100152EEC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEA10;
  qword_1002EEA10 = (uint64_t)v1;
}

id sub_100152F88(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAllowPendingFlags:0];
}

void sub_100153074( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10015308C(uint64_t a1)
{
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pendingFlags", 0));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 allKeys]);

  id v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v13;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v12 + 1) + 8LL * (void)v7);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pendingFlags]);
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v8]);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 description]);
        [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v11 forKeyedSubscript:v8];

        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }

    while (v5);
  }
}

void sub_1001532CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1001532E4(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentFlags", 0));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 dumpFlags]);

  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:*(void *)(*((void *)&v8 + 1) + 8 * (void)v7) forKeyedSubscript:*(void *)(*((void *)&v8 + 1) + 8 * (void)v7)];
        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v5);
  }
}

void sub_1001539D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_100153A34(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEA10;
  qword_1002EEA10 = (uint64_t)v1;
}

void sub_100153A64(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    uint64_t v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100153AE8;
    block[3] = &unk_100276740;
    void block[4] = v3;
    dispatch_sync(v2, block);

    id WeakRetained = v3;
  }
}

id sub_100153AE8(uint64_t a1)
{
  if (qword_1002EEA08 != -1) {
    dispatch_once(&qword_1002EEA08, &stru_1002845A0);
  }
  uint64_t v2 = (os_log_s *)qword_1002EEA10;
  if (os_log_type_enabled((os_log_t)qword_1002EEA10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Unlock occurred", v4, 2u);
  }

  objc_msgSend( *(id *)(a1 + 32),  "setConditionChecksInFlight:",  (unint64_t)objc_msgSend(*(id *)(a1 + 32), "conditionChecksInFlight") & 0xFFFFFFFFFFFFFFFELL);
  [*(id *)(a1 + 32) _onqueueRecheckConditions];
  return [*(id *)(a1 + 32) _onqueueSendAnyPendingFlags];
}

void sub_100153B9C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEA10;
  qword_1002EEA10 = (uint64_t)v1;
}

void sub_100153BCC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEA10;
  qword_1002EEA10 = (uint64_t)v1;
}

void sub_100153BFC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    uint64_t v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100153C80;
    block[3] = &unk_100276740;
    void block[4] = v3;
    dispatch_sync(v2, block);

    id WeakRetained = v3;
  }
}

id sub_100153C80(uint64_t a1)
{
  if (qword_1002EEA08 != -1) {
    dispatch_once(&qword_1002EEA08, &stru_1002845E0);
  }
  uint64_t v2 = (os_log_s *)qword_1002EEA10;
  if (os_log_type_enabled((os_log_t)qword_1002EEA10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Network is reachable", v4, 2u);
  }

  objc_msgSend( *(id *)(a1 + 32),  "setConditionChecksInFlight:",  (unint64_t)objc_msgSend(*(id *)(a1 + 32), "conditionChecksInFlight") & 0xFFFFFFFFFFFFFFFDLL);
  [*(id *)(a1 + 32) _onqueueRecheckConditions];
  return [*(id *)(a1 + 32) _onqueueSendAnyPendingFlags];
}

void sub_100153D34(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEA10;
  qword_1002EEA10 = (uint64_t)v1;
}

void sub_1001542C4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEA10;
  qword_1002EEA10 = (uint64_t)v1;
}

void sub_1001542F4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEA10;
  qword_1002EEA10 = (uint64_t)v1;
}

void sub_100154324(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEA10;
  qword_1002EEA10 = (uint64_t)v1;
}

void sub_1001543EC(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) testHoldStates]);
  [v2 addObject:*(void *)(a1 + 40)];
}

id sub_1001544C4(uint64_t a1)
{
  if (qword_1002EEA08 != -1) {
    dispatch_once(&qword_1002EEA08, &stru_100284660);
  }
  id v2 = (os_log_s *)qword_1002EEA10;
  if (os_log_type_enabled((os_log_t)qword_1002EEA10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Releasing state machine test pause from %@",  (uint8_t *)&v6,  0xCu);
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) testHoldStates]);
  [v4 removeObject:*(void *)(a1 + 32)];

  return [*(id *)(a1 + 40) _onqueuePokeStateMachine];
}

void sub_1001545B0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA10;
  qword_1002EEA10 = (uint64_t)v1;
}

void sub_100154684( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10015469C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) nextStateMachineCycleOperation]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v2 == 0LL;
}

void sub_1001547A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1001547C0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) nextStateMachineCycleOperation]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v2 == 0LL;
}

void sub_100154868(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) holdStateMachineOperation]);

  if (v2)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationQueue]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) holdStateMachineOperation]);
    [v3 addOperation:v4];

    [*(id *)(a1 + 32) setHoldStateMachineOperation:0];
  }

id sub_100154974(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) holdStateMachineOperation]);

  if (v2)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationQueue]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) holdStateMachineOperation]);
    [v3 addOperation:v4];

    [*(id *)(a1 + 32) setHoldStateMachineOperation:0];
  }

  [*(id *)(a1 + 32) setHalted:1];
  [*(id *)(a1 + 32) setAllowPendingFlags:0];
  return [*(id *)(a1 + 32) _onqueuePokeStateMachine];
}

id sub_100154AA4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateMachineRequests]);
  [v2 addObject:*(void *)(a1 + 40)];

  return [*(id *)(a1 + 32) _onqueuePokeStateMachine];
}

id sub_100154B78(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateMachineWatchers]);
  [v2 addObject:*(void *)(a1 + 40)];

  return [*(id *)(a1 + 32) _onqueuePokeStateMachine];
}

id sub_100154C4C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _onqueueRegisterMultiStateArrivalWatcher:*(void *)(a1 + 40)];
}

void sub_100154FA4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA10;
  qword_1002EEA10 = (uint64_t)v1;
}

void sub_100154FD4(uint64_t a1)
{
  if (qword_1002EEA08 != -1) {
    dispatch_once(&qword_1002EEA08, &stru_1002846A0);
  }
  id v2 = (void *)qword_1002EEA10;
  if (os_log_type_enabled((os_log_t)qword_1002EEA10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v3 = *(void **)(a1 + 40);
    id v5 = v2;
    uint64_t v6 = objc_claimAutoreleasedReturnValue([v3 error]);
    uint64_t v7 = (void *)v6;
    __int128 v8 = @"no error";
    if (v6) {
      __int128 v8 = (const __CFString *)v6;
    }
    int v11 = 138543618;
    uint64_t v12 = v4;
    __int16 v13 = 2114;
    __int128 v14 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Returning '%{public}@' result: %{public}@",  (uint8_t *)&v11,  0x16u);
  }

  uint64_t v9 = *(void *)(a1 + 48);
  __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);
}

void sub_100155104(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA10;
  qword_1002EEA10 = (uint64_t)v1;
}

void sub_100155588(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA10;
  qword_1002EEA10 = (uint64_t)v1;
}

void sub_1001555B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_1002EEA08 != -1) {
    dispatch_once(&qword_1002EEA08, &stru_1002846E0);
  }
  uint64_t v4 = (void *)qword_1002EEA10;
  if (os_log_type_enabled((os_log_t)qword_1002EEA10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    id v5 = *(void **)(a1 + 40);
    uint64_t v7 = v4;
    __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([v5 result]);
    uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 error]);
    __int128 v10 = (void *)v9;
    int v11 = @"no error";
    if (v9) {
      int v11 = (const __CFString *)v9;
    }
    int v17 = 138543618;
    uint64_t v18 = v6;
    __int16 v19 = 2114;
    uint64_t v20 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Returning '%{public}@' result: %{public}@",  (uint8_t *)&v17,  0x16u);
  }

  uint64_t v12 = *(void *)(a1 + 48);
  if (v12)
  {
    __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) result]);
    __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v13 error]);
    (*(void (**)(uint64_t, void *))(v12 + 16))(v12, v14);
  }

  __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) result]);
  __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v15 error]);
  [v3 setError:v16];
}

void sub_100155754(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA10;
  qword_1002EEA10 = (uint64_t)v1;
}

void sub_100156418( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void sub_10015644C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

uint64_t sub_10015647C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10015648C(uint64_t a1)
{
}

void sub_100156494(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[6] + 8LL);
  obuint64_t j = *(id *)(v4 + 40);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 executeFetchRequest:v3 error:&obj]);
  objc_storeStrong((id *)(v4 + 40), obj);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 firstObject]);
  uint64_t v7 = v6;
  if (v6)
  {
    uint64_t v8 = objc_claimAutoreleasedReturnValue([v6 data]);
    uint64_t v9 = *(void *)(a1[7] + 8LL);
    __int128 v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    uint64_t v11 = objc_claimAutoreleasedReturnValue([v7 updated]);
    uint64_t v12 = *(void *)(a1[8] + 8LL);
    __int16 v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v7 error]);
    uint64_t v16 = objc_opt_class(&OBJC_CLASS___NSData, v15);
    char isKindOfClass = objc_opt_isKindOfClass(v14, v16);

    if ((isKindOfClass & 1) != 0)
    {
      uint64_t v19 = objc_opt_class(&OBJC_CLASS___NSError, v18);
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v7 error]);
      uint64_t v21 = objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  v19,  v20,  0LL));
      uint64_t v22 = *(void *)(a1[6] + 8LL);
      id v23 = *(void **)(v22 + 40);
      *(void *)(v22 + 40) = v21;
    }
  }
}

void sub_1001565E0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_100156A84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100156AB0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_100156AE0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_100156B10(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_100156B40(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_100156B70(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[CachedData fetchRequest](&OBJC_CLASS___CachedData, "fetchRequest"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"key = %@ AND application = %@ AND unique = %@",  @"SelfVerificationInfo",  a1[4],  &stru_10028E390));
  [v2 setPredicate:v3];

  uint64_t v4 = (void *)a1[5];
  uint64_t v5 = *(void *)(a1[7] + 8LL);
  obuint64_t j = *(id *)(v5 + 40);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 executeFetchRequest:v2 error:&obj]);
  objc_storeStrong((id *)(v5 + 40), obj);
  if (![v6 count])
  {
    if (qword_1002EEA18 != -1) {
      dispatch_once(&qword_1002EEA18, &stru_100284810);
    }
    uint64_t v9 = (os_log_s *)qword_1002EEA20;
    if (os_log_type_enabled((os_log_t)qword_1002EEA20, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "storeSelfVerificationInfo: new", buf, 2u);
    }

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSEntityDescription insertNewObjectForEntityForName:inManagedObjectContext:]( &OBJC_CLASS___NSEntityDescription,  "insertNewObjectForEntityForName:inManagedObjectContext:",  @"CachedData",  a1[5]));
    [v8 setKey:@"SelfVerificationInfo"];
    [v8 setApplication:a1[4]];
    [v8 setUnique:&stru_10028E390];
    goto LABEL_13;
  }

  if (qword_1002EEA18 != -1) {
    dispatch_once(&qword_1002EEA18, &stru_100284830);
  }
  uint64_t v7 = (os_log_s *)qword_1002EEA20;
  if (os_log_type_enabled((os_log_t)qword_1002EEA20, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "storeSelfVerificationInfo: update", buf, 2u);
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);
  if (v8)
  {
LABEL_13:
    [v8 setError:0];
    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v8 setUpdated:v10];

    [v8 setData:a1[6]];
    uint64_t v11 = (void *)a1[5];
    uint64_t v12 = *(void *)(a1[7] + 8LL);
    id v16 = *(id *)(v12 + 40);
    unsigned __int8 v13 = [v11 save:&v16];
    objc_storeStrong((id *)(v12 + 40), v16);
    if ((v13 & 1) != 0)
    {
      *(_BYTE *)(*(void *)(a1[8] + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
    }

    else
    {
      if (qword_1002EEA18 != -1) {
        dispatch_once(&qword_1002EEA18, &stru_100284850);
      }
      uint64_t v14 = (os_log_s *)qword_1002EEA20;
      if (os_log_type_enabled((os_log_t)qword_1002EEA20, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = *(void *)(*(void *)(a1[7] + 8LL) + 40LL);
        *(_DWORD *)buf = 138412290;
        uint64_t v19 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "storeSelfVerificationInfo: save %@",  buf,  0xCu);
      }
    }
  }
}

void sub_100156E98(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_100156EC8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_100156EF8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_100156F28(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_100157004(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[CachedData fetchRequest](&OBJC_CLASS___CachedData, "fetchRequest"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"key = %@ AND application = %@ AND unique = %@",  @"SelfVerificationInfo",  *(void *)(a1 + 32),  &stru_10028E390));
  [v2 setPredicate:v3];

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) executeFetchRequest:v2 error:*(void *)(a1 + 48)]);
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      uint64_t v8 = 0LL;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        [*(id *)(a1 + 40) deleteObject:*(void *)(*((void *)&v9 + 1) + 8 * (void)v8)];
        uint64_t v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v6);
  }
}

void sub_100157538( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

void sub_100157574(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_1001575A4(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[6] + 8LL);
  obuint64_t j = *(id *)(v4 + 40);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 executeFetchRequest:v3 error:&obj]);
  objc_storeStrong((id *)(v4 + 40), obj);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 firstObject]);
  if (qword_1002EEA18 != -1) {
    dispatch_once(&qword_1002EEA18, &stru_1002848B0);
  }
  uint64_t v7 = (os_log_s *)qword_1002EEA20;
  if (os_log_type_enabled((os_log_t)qword_1002EEA20, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL);
    *(_DWORD *)buf = 138412546;
    __int16 v27 = v6;
    __int16 v28 = 2112;
    uint64_t v29 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "fetchIDMSDeviceList: %@ %@", buf, 0x16u);
  }

  if (v6)
  {
    uint64_t v9 = objc_claimAutoreleasedReturnValue([v6 data]);
    uint64_t v10 = *(void *)(a1[7] + 8LL);
    __int128 v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;

    uint64_t v12 = objc_claimAutoreleasedReturnValue([v6 updated]);
    uint64_t v13 = *(void *)(a1[8] + 8LL);
    uint64_t v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;

    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v6 error]);
    uint64_t v17 = objc_opt_class(&OBJC_CLASS___NSData, v16);
    char isKindOfClass = objc_opt_isKindOfClass(v15, v17);

    if ((isKindOfClass & 1) != 0)
    {
      uint64_t v20 = objc_opt_class(&OBJC_CLASS___NSError, v19);
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v6 error]);
      uint64_t v22 = objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  v20,  v21,  0LL));
      uint64_t v23 = *(void *)(a1[6] + 8LL);
      id v24 = *(void **)(v23 + 40);
      *(void *)(v23 + 40) = v22;
    }
  }
}

void sub_1001577A8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_1001577D8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_100157B0C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100157B38(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_100157B68(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_100157B98(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[CachedData fetchRequest](&OBJC_CLASS___CachedData, "fetchRequest"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"key = %@ AND application = %@ AND unique = %@",  @"IDMSDeviceList",  @"global",  &stru_10028E390));
  [v2 setPredicate:v3];

  uint64_t v4 = (void *)a1[4];
  uint64_t v5 = *(void *)(a1[6] + 8LL);
  obuint64_t j = *(id *)(v5 + 40);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 executeFetchRequest:v2 error:&obj]);
  objc_storeStrong((id *)(v5 + 40), obj);
  if (![v6 count])
  {
    if (qword_1002EEA18 != -1) {
      dispatch_once(&qword_1002EEA18, &stru_100284930);
    }
    uint64_t v9 = (os_log_s *)qword_1002EEA20;
    if (os_log_type_enabled((os_log_t)qword_1002EEA20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "storeIDMSDeviceList: new", buf, 2u);
    }

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSEntityDescription insertNewObjectForEntityForName:inManagedObjectContext:]( &OBJC_CLASS___NSEntityDescription,  "insertNewObjectForEntityForName:inManagedObjectContext:",  @"CachedData",  a1[4]));
    [v8 setKey:@"IDMSDeviceList"];
    [v8 setApplication:@"global"];
    goto LABEL_13;
  }

  if (qword_1002EEA18 != -1) {
    dispatch_once(&qword_1002EEA18, &stru_100284950);
  }
  uint64_t v7 = (os_log_s *)qword_1002EEA20;
  if (os_log_type_enabled((os_log_t)qword_1002EEA20, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "storeIDMSDeviceList: update", buf, 2u);
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);
  if (v8)
  {
LABEL_13:
    [v8 setUnique:&stru_10028E390];
    [v8 setError:0];
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v8 setUpdated:v10];

    [v8 setData:a1[5]];
    __int128 v11 = (void *)a1[4];
    uint64_t v12 = *(void *)(a1[6] + 8LL);
    id v16 = *(id *)(v12 + 40);
    unsigned __int8 v13 = [v11 save:&v16];
    objc_storeStrong((id *)(v12 + 40), v16);
    if ((v13 & 1) != 0)
    {
      *(_BYTE *)(*(void *)(a1[7] + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
    }

    else
    {
      if (qword_1002EEA18 != -1) {
        dispatch_once(&qword_1002EEA18, &stru_100284970);
      }
      uint64_t v14 = (os_log_s *)qword_1002EEA20;
      if (os_log_type_enabled((os_log_t)qword_1002EEA20, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL);
        *(_DWORD *)buf = 138412290;
        uint64_t v19 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "storeIDMSDeviceList: save %@", buf, 0xCu);
      }
    }
  }
}

void sub_100157EC8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_100157EF8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_100157F28(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_100157F58(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_100158124(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_100158154(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v29 = 0LL;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 executeFetchRequest:v3 error:&v29]);
  id v5 = v29;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 firstObject]);
  uint64_t v7 = v6;
  if (!v6)
  {
    if (qword_1002EEA18 != -1) {
      dispatch_once(&qword_1002EEA18, &stru_1002849F8);
    }
    uint64_t v25 = (os_log_s *)qword_1002EEA20;
    if (!os_log_type_enabled((os_log_t)qword_1002EEA20, OS_LOG_TYPE_INFO)) {
      goto LABEL_15;
    }
    *(_WORD *)buf = 0;
    unint64_t v26 = "fetchKTInfoForApplication: no cached data";
    goto LABEL_14;
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 error]);
  uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSData, v9);
  char isKindOfClass = objc_opt_isKindOfClass(v8, v10);

  if ((isKindOfClass & 1) != 0)
  {
    uint64_t v13 = objc_opt_class(&OBJC_CLASS___NSError, v12);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v7 error]);
    uint64_t v15 = objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  v13,  v14,  0LL));

    id v5 = (id)v15;
  }

  id v16 = (void *)objc_claimAutoreleasedReturnValue([v7 data]);

  if (!v16)
  {
    if (qword_1002EEA18 != -1) {
      dispatch_once(&qword_1002EEA18, &stru_100284A18);
    }
    uint64_t v25 = (os_log_s *)qword_1002EEA20;
    if (!os_log_type_enabled((os_log_t)qword_1002EEA20, OS_LOG_TYPE_INFO)) {
      goto LABEL_15;
    }
    *(_WORD *)buf = 0;
    unint64_t v26 = "fetchKTInfoForApplication: no data";
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, v26, buf, 2u);
LABEL_15:
    (*(void (**)(void))(a1[6] + 16LL))();
    goto LABEL_16;
  }

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v7 data]);
  id v27 = v5;
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyGPBMessage parseFromData:error:]( &OBJC_CLASS___KTQueryInfo,  "parseFromData:error:",  v17,  &v27));
  id v19 = v27;

  uint64_t v20 = a1[6];
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v18 queryRequest]);
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v18 queryResponse]);
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v7 updated]);
  id v24 = (void *)objc_claimAutoreleasedReturnValue([v18 serverHint]);
  (*(void (**)(uint64_t, void *, void *, void *, void *, id))(v20 + 16))(v20, v21, v22, v23, v24, v19);

  id v5 = v19;
LABEL_16:
}

void sub_100158424(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_100158454(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_1001587C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_1001587F4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_100158824(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[CachedData fetchRequest](&OBJC_CLASS___CachedData, "fetchRequest"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"key = %@ AND application = %@ AND unique = %@",  @"QueryResponse",  a1[4],  a1[5]));
  [v2 setPredicate:v3];

  uint64_t v4 = (void *)a1[6];
  uint64_t v5 = *(void *)(a1[8] + 8LL);
  obuint64_t j = *(id *)(v5 + 40);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 executeFetchRequest:v2 error:&obj]);
  objc_storeStrong((id *)(v5 + 40), obj);
  if (![v6 count])
  {
    if (qword_1002EEA18 != -1) {
      dispatch_once(&qword_1002EEA18, &stru_100284A58);
    }
    uint64_t v9 = (os_log_s *)qword_1002EEA20;
    if (os_log_type_enabled((os_log_t)qword_1002EEA20, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "storeQueryResponse: new", buf, 2u);
    }

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSEntityDescription insertNewObjectForEntityForName:inManagedObjectContext:]( &OBJC_CLASS___NSEntityDescription,  "insertNewObjectForEntityForName:inManagedObjectContext:",  @"CachedData",  a1[6]));
    [v8 setKey:@"QueryResponse"];
    [v8 setApplication:a1[4]];
    [v8 setUnique:a1[5]];
    goto LABEL_13;
  }

  if (qword_1002EEA18 != -1) {
    dispatch_once(&qword_1002EEA18, &stru_100284A78);
  }
  uint64_t v7 = (os_log_s *)qword_1002EEA20;
  if (os_log_type_enabled((os_log_t)qword_1002EEA20, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "storeQueryResponse: update", buf, 2u);
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);
  if (v8)
  {
LABEL_13:
    [v8 setError:0];
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v8 setUpdated:v10];

    [v8 setData:a1[7]];
    __int128 v11 = (void *)a1[6];
    uint64_t v12 = *(void *)(a1[8] + 8LL);
    id v16 = *(id *)(v12 + 40);
    unsigned __int8 v13 = [v11 save:&v16];
    objc_storeStrong((id *)(v12 + 40), v16);
    if ((v13 & 1) != 0)
    {
      *(_BYTE *)(*(void *)(a1[9] + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
    }

    else
    {
      if (qword_1002EEA18 != -1) {
        dispatch_once(&qword_1002EEA18, &stru_100284A98);
      }
      uint64_t v14 = (os_log_s *)qword_1002EEA20;
      if (os_log_type_enabled((os_log_t)qword_1002EEA20, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = *(void *)(*(void *)(a1[8] + 8LL) + 40LL);
        *(_DWORD *)buf = 138412290;
        uint64_t v19 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "storeQueryResponse: save %@", buf, 0xCu);
      }
    }
  }
}

void sub_100158B40(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_100158B70(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_100158BA0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_100158BD0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_100158DAC(uint64_t a1, void *a2, void *a3)
{
  id v12 = a2;
  id v5 = a3;
  uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSString, v6);
  if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0)
  {
    [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:v12];
  }

  else
  {
    uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSError, v8);
    if ((objc_opt_isKindOfClass(v5, v9) & 1) != 0) {
      uint64_t v10 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) jsonifyError:v5]);
    }
    else {
      uint64_t v10 = objc_claimAutoreleasedReturnValue([v5 description]);
    }
    __int128 v11 = (void *)v10;
    [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:v12];
  }
}

void sub_100159090(uint64_t a1, void *a2, void *a3)
{
  id v12 = a2;
  id v5 = a3;
  uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSString, v6);
  if ((objc_opt_isKindOfClass(v12, v7) & 1) != 0)
  {
    uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSDictionary, v8);
    if ((objc_opt_isKindOfClass(v5, v9) & 1) != 0) {
      uint64_t v10 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) errorFromJson:v5]);
    }
    else {
      uint64_t v10 = objc_claimAutoreleasedReturnValue([v5 description]);
    }
    __int128 v11 = (void *)v10;
    [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:v12];
  }
}

void sub_100159290( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1001592B0(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = [a2 mutableCopy];
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v3 forKeyedSubscript:*(void *)(a1 + 32)];
  }

void sub_100159438( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10015945C(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[DeviceSignature fetchRequest](&OBJC_CLASS___DeviceSignature, "fetchRequest"));
  if (a1[4])
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"application IN %@",  a1[4]));
    [v2 setPredicate:v3];
  }

  id v42 = 0LL;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 execute:&v42]);
  id v5 = v42;
  id v6 = v42;
  uint64_t v7 = v6;
  if (v4)
  {
    id v36 = v6;
    uint64_t v8 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    uint64_t v9 = *(void *)(a1[7] + 8LL);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    __int128 v40 = 0u;
    __int128 v41 = 0u;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    __int128 v37 = v4;
    id v11 = v4;
    id v12 = [v11 countByEnumeratingWithState:&v38 objects:v43 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v39;
      do
      {
        for (unint64_t i = 0LL; i != v13; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v39 != v14) {
            objc_enumerationMutation(v11);
          }
          id v16 = *(void **)(*((void *)&v38 + 1) + 8LL * (void)i);
          uint64_t v17 = objc_alloc(&OBJC_CLASS___TransparencyIDSRegistrationData);
          uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v16 application]);
          uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v16 registrationData]);
          uint64_t v20 = -[TransparencyIDSRegistrationData initWithApplication:registrationData:]( v17,  "initWithApplication:registrationData:",  v18,  v19);

          uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v16 signature]);
          -[TransparencyIDSRegistrationData setSignature:](v20, "setSignature:", v21);

          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v16 publicKey]);
          -[TransparencyIDSRegistrationData setPublicKey:](v20, "setPublicKey:", v22);

          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v16 pushToken]);
          -[TransparencyIDSRegistrationData setPushToken:](v20, "setPushToken:", v23);

          id v24 = (void *)objc_claimAutoreleasedReturnValue([v16 createdAt]);
          -[TransparencyIDSRegistrationData setCreatedAt:](v20, "setCreatedAt:", v24);

          uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v16 signedAt]);
          -[TransparencyIDSRegistrationData setSignedAt:](v20, "setSignedAt:", v25);

          unint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v16 uploadedAt]);
          -[TransparencyIDSRegistrationData setUploadedAt:](v20, "setUploadedAt:", v26);

          id v27 = (void *)objc_claimAutoreleasedReturnValue([v16 state]);
          -[TransparencyIDSRegistrationData setState:](v20, "setState:", v27);

          __int16 v28 = (void *)objc_claimAutoreleasedReturnValue([v16 currentItemPointerModificationTime]);
          -[TransparencyIDSRegistrationData setOrderedTimestamp:](v20, "setOrderedTimestamp:", v28);

          id v29 = (void *)a1[5];
          unsigned int v30 = (void *)objc_claimAutoreleasedReturnValue([v16 error]);
          id v31 = (void *)objc_claimAutoreleasedReturnValue([v29 errorFromData:v30]);
          -[TransparencyIDSRegistrationData setError:](v20, "setError:", v31);

          __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([v16 altDSID]);
          -[TransparencyIDSRegistrationData setAltDSID:](v20, "setAltDSID:", v32);

          __int128 v33 = (void *)objc_claimAutoreleasedReturnValue([v16 dsid]);
          -[TransparencyIDSRegistrationData setDsid:](v20, "setDsid:", v33);

          __int128 v34 = *(void **)(*(void *)(a1[7] + 8LL) + 40LL);
          __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([v16 application]);
          [v34 setObject:v20 forKeyedSubscript:v35];
        }

        id v13 = [v11 countByEnumeratingWithState:&v38 objects:v43 count:16];
      }

      while (v13);
    }

    uint64_t v4 = v37;
    uint64_t v7 = v36;
  }

  else
  {
    objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), v5);
  }
}

void sub_100159A4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100159A6C(uint64_t a1)
{
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  obuint64_t j = *(id *)(a1 + 32);
  id v31 = [obj countByEnumeratingWithState:&v34 objects:v38 count:16];
  if (v31)
  {
    p_vtable = (objc_class *)&OBJC_METACLASS___TransparencyDistributedReadNotificationCenter.vtable;
    uint64_t v30 = *(void *)v35;
    do
    {
      for (unint64_t i = 0LL; i != v31; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v35 != v30) {
          objc_enumerationMutation(obj);
        }
        uint64_t v4 = *(void **)(*((void *)&v34 + 1) + 8LL * (void)i);
        id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 application]);
        id v6 = (void *)objc_claimAutoreleasedReturnValue([&p_vtable[247] fetchRequest]);
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"application = %@",  v5));
        [v6 setPredicate:v7];

        id v33 = 0LL;
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 execute:&v33]);
        id v9 = v33;
        if ([v8 count])
        {
          id v10 = (id)objc_claimAutoreleasedReturnValue([v8 firstObject]);
        }

        else
        {
          id v10 = [objc_alloc(p_vtable + 247) initWithContext:*(void *)(a1 + 40)];
          [v10 setApplication:v5];
          id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
          [v10 setCreatedAt:v11];
        }

        id v12 = (void *)objc_claimAutoreleasedReturnValue([v4 signature]);

        if (v12)
        {
          id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
          [v10 setSignedAt:v13];

          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v4 signature]);
          [v10 setSignature:v14];
        }

        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v4 tbsKTIDSRegistrationData]);
        [v10 setRegistrationData:v15];

        id v16 = (void *)objc_claimAutoreleasedReturnValue([v4 publicKey]);
        [v10 setPublicKey:v16];

        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v4 pushToken]);
        [v10 setPushToken:v17];

        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v10 signature]);
        if (v18) {
          uint64_t v19 = @"done";
        }
        else {
          uint64_t v19 = @"tbs";
        }
        [v10 setState:v19];
        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v4 orderedTimestamp]);
        [v10 setCurrentItemPointerModificationTime:v20];

        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v4 altDSID]);
        [v10 setAltDSID:v21];

        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v4 dsid]);
        [v10 setDsid:v22];

        uint64_t v23 = *(void **)(a1 + 48);
        id v24 = (void *)objc_claimAutoreleasedReturnValue([v4 error]);
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v23 jsonifyError:v24]);

        if (v25)
        {
          unint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization dataWithJSONObject:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "dataWithJSONObject:options:error:",  v25,  0LL,  0LL));
          [v10 setError:v26];
        }

        p_vtable = (objc_class *)(&OBJC_METACLASS___TransparencyDistributedReadNotificationCenter + 24);
      }

      id v31 = [obj countByEnumeratingWithState:&v34 objects:v38 count:16];
    }

    while (v31);
  }

  if ([*(id *)(a1 + 40) hasChanges])
  {
    id v27 = *(void **)(a1 + 40);
    uint64_t v28 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v32 = *(id *)(v28 + 40);
    [v27 save:&v32];
    objc_storeStrong((id *)(v28 + 40), v32);
  }

void sub_100159FB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100159FCC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[DeviceSignature fetchRequest](&OBJC_CLASS___DeviceSignature, "fetchRequest"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"pushToken = %@ AND registrationData = %@",  *(void *)(a1 + 32),  *(void *)(a1 + 40)));
  [v2 setPredicate:v3];

  id v30 = 0LL;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 execute:&v30]);
  id v5 = v30;
  id v6 = v5;
  if (!v4)
  {
    uint64_t v18 = (void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
    uint64_t v20 = v5;
    goto LABEL_16;
  }

  id v23 = v5;
  id v24 = v2;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  id v7 = v4;
  id v8 = [v7 countByEnumeratingWithState:&v26 objects:v33 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v27;
    do
    {
      id v11 = 0LL;
      do
      {
        if (*(void *)v27 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(void **)(*((void *)&v26 + 1) + 8LL * (void)v11);
        if (qword_1002EEA18 != -1) {
          dispatch_once(&qword_1002EEA18, &stru_100284BA0);
        }
        id v13 = (void *)qword_1002EEA20;
        if (os_log_type_enabled((os_log_t)qword_1002EEA20, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v14 = v13;
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v12 application]);
          *(_DWORD *)buf = 138543362;
          id v32 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Marking record as uploaded for application %{public}@",  buf,  0xCu);
        }

        [v12 setUploadedAt:*(void *)(a1 + 48)];
        id v11 = (char *)v11 + 1;
      }

      while (v9 != v11);
      id v9 = [v7 countByEnumeratingWithState:&v26 objects:v33 count:16];
    }

    while (v9);
  }

  id v2 = v24;
  id v6 = v23;
  if ([*(id *)(a1 + 56) hasChanges])
  {
    id v16 = *(void **)(a1 + 56);
    uint64_t v17 = *(void *)(*(void *)(a1 + 64) + 8LL);
    uint64_t v19 = *(void **)(v17 + 40);
    uint64_t v18 = (void **)(v17 + 40);
    uint64_t v25 = v19;
    [v16 save:&v25];
    uint64_t v20 = v25;
LABEL_16:
    id v21 = v20;
    uint64_t v22 = *v18;
    *uint64_t v18 = v21;
  }
}

void sub_10015A244(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_10015A3B8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_10015A5FC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_10015A808( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10015A834(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  obuint64_t j = *(id *)(v3 + 40);
  unsigned __int8 v4 = [v2 save:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v4;
}

void sub_10015A8A0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_10015AB1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10015AB48(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_10015AB78(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[CachedData fetchRequest](&OBJC_CLASS___CachedData, "fetchRequest"));
  [v2 delete:v3 onMOC:*(void *)(a1 + 40)];

  unsigned __int8 v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8LL);
  obuint64_t j = *(id *)(v5 + 40);
  LOBYTE(v3) = [v4 save:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = (_BYTE)v3;
}

void sub_10015AC10(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_10015ACDC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSEntityDescription insertNewObjectForEntityForName:inManagedObjectContext:]( &OBJC_CLASS___NSEntityDescription,  "insertNewObjectForEntityForName:inManagedObjectContext:",  @"CachedData",  *(void *)(a1 + 32)));
  [v2 setKey:@"FixUps"];
  [v2 setApplication:*(void *)(a1 + 40)];
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSData data](&OBJC_CLASS___NSData, "data"));
  [v2 setData:v3];

  uint64_t v4 = objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v2 setUpdated:v4];

  uint64_t v5 = *(void **)(a1 + 32);
  id v8 = 0LL;
  LOBYTE(v4) = [v5 save:&v8];
  id v6 = v8;
  if ((v4 & 1) == 0)
  {
    if (qword_1002EEA18 != -1) {
      dispatch_once(&qword_1002EEA18, &stru_100284CB0);
    }
    id v7 = (os_log_s *)qword_1002EEA20;
    if (os_log_type_enabled((os_log_t)qword_1002EEA20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "storeFixup: save %@", buf, 0xCu);
    }
  }
}

void sub_10015AE54(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_10015B068(_Unwind_Exception *a1)
{
}

void sub_10015B080(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v7 = 0LL;
  id v4 = [v2 countForFetchRequest:v3 error:&v7];
  id v5 = v7;
  *(void *)(*(void *)(a1[6] + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v4;
  if (*(void *)(*(void *)(a1[6] + 8LL) + 24LL) == 0x7FFFFFFFFFFFFFFFLL)
  {
    if (qword_1002EEA18 != -1) {
      dispatch_once(&qword_1002EEA18, &stru_100284CD0);
    }
    id v6 = (os_log_s *)qword_1002EEA20;
    if (os_log_type_enabled((os_log_t)qword_1002EEA20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v9 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "haveDoneFixup: countForFetchRequest %@",  buf,  0xCu);
    }
  }
}

void sub_10015B198(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_10015B380(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_10015B3B0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[CachedData fetchRequest](&OBJC_CLASS___CachedData, "fetchRequest"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"key = %@ AND application = %@",  @"SettingsDate",  *(void *)(a1 + 32)));
  [v2 setPredicate:v3];

  id v4 = *(void **)(a1 + 48);
  if (*(void *)(a1 + 40))
  {
    id v17 = 0LL;
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 executeFetchRequest:v2 error:&v17]);
    id v6 = v17;
    if ([v5 count])
    {
      id v7 = (id)objc_claimAutoreleasedReturnValue([v5 firstObject]);
      if (!v7)
      {

        goto LABEL_20;
      }
    }

    else
    {
      id v7 = (id)objc_claimAutoreleasedReturnValue( +[NSEntityDescription insertNewObjectForEntityForName:inManagedObjectContext:]( &OBJC_CLASS___NSEntityDescription,  "insertNewObjectForEntityForName:inManagedObjectContext:",  @"CachedData",  *(void *)(a1 + 48)));
      [v7 setKey:@"SettingsDate"];
      [v7 setApplication:*(void *)(a1 + 32)];
    }

    [v7 setData:*(void *)(a1 + 56)];
    id v9 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v7 setUpdated:v9];
  }

  else
  {
    id v22 = 0LL;
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 executeFetchRequest:v2 error:&v22]);
    id v6 = v22;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    id v9 = v8;
    id v7 = [v9 countByEnumeratingWithState:&v18 objects:v25 count:16];
    if (v7)
    {
      uint64_t v10 = *(void *)v19;
      do
      {
        for (unint64_t i = 0LL; i != v7; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v10) {
            objc_enumerationMutation(v9);
          }
          [*(id *)(a1 + 48) deleteObject:*(void *)(*((void *)&v18 + 1) + 8 * (void)i)];
        }

        id v7 = [v9 countByEnumeratingWithState:&v18 objects:v25 count:16];
      }

      while (v7);
    }

    id v5 = v9;
  }

  uint64_t v12 = v6;

  uint64_t v13 = *(void **)(a1 + 48);
  id v16 = v6;
  unsigned __int8 v14 = [v13 save:&v16];
  id v6 = v16;

  if ((v14 & 1) == 0)
  {
    if (qword_1002EEA18 != -1) {
      dispatch_once(&qword_1002EEA18, &stru_100284D10);
    }
    uint64_t v15 = (os_log_s *)qword_1002EEA20;
    if (os_log_type_enabled((os_log_t)qword_1002EEA20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v24 = v6;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "setSettingsDate: save %@", buf, 0xCu);
    }
  }

void sub_10015B688(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_10015B808( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_10015B824(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v17 = 0LL;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 executeFetchRequest:v3 error:&v17]);
  id v5 = v17;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 firstObject]);
  id v7 = v6;
  if (v6 && (id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 data]), v8, v8))
  {
    uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSDate, v9);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 data]);
    uint64_t v12 = objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  v10,  v11,  0LL));
    uint64_t v13 = *(void *)(a1[6] + 8LL);
    unsigned __int8 v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;
  }

  else
  {
    if (qword_1002EEA18 != -1) {
      dispatch_once(&qword_1002EEA18, &stru_100284D30);
    }
    uint64_t v15 = (os_log_s *)qword_1002EEA20;
    if (os_log_type_enabled((os_log_t)qword_1002EEA20, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "getSettingsDate: no cached data", v16, 2u);
    }
  }
}

void sub_10015B984(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_10015BA7C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[CachedData fetchRequest](&OBJC_CLASS___CachedData, "fetchRequest"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"key = %@ AND application = %@",  @"SettingsData",  *(void *)(a1 + 32)));
  [v2 setPredicate:v3];

  id v4 = *(void **)(a1 + 48);
  if (*(void *)(a1 + 40))
  {
    id v17 = 0LL;
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 executeFetchRequest:v2 error:&v17]);
    id v6 = v17;
    if ([v5 count])
    {
      id v7 = (id)objc_claimAutoreleasedReturnValue([v5 firstObject]);
      if (!v7)
      {

        goto LABEL_20;
      }
    }

    else
    {
      id v7 = (id)objc_claimAutoreleasedReturnValue( +[NSEntityDescription insertNewObjectForEntityForName:inManagedObjectContext:]( &OBJC_CLASS___NSEntityDescription,  "insertNewObjectForEntityForName:inManagedObjectContext:",  @"CachedData",  *(void *)(a1 + 48)));
      [v7 setKey:@"SettingsData"];
      [v7 setApplication:*(void *)(a1 + 32)];
    }

    [v7 setData:*(void *)(a1 + 40)];
    id v9 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v7 setUpdated:v9];
  }

  else
  {
    id v22 = 0LL;
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 executeFetchRequest:v2 error:&v22]);
    id v6 = v22;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    id v9 = v8;
    id v7 = [v9 countByEnumeratingWithState:&v18 objects:v25 count:16];
    if (v7)
    {
      uint64_t v10 = *(void *)v19;
      do
      {
        for (unint64_t i = 0LL; i != v7; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v10) {
            objc_enumerationMutation(v9);
          }
          [*(id *)(a1 + 48) deleteObject:*(void *)(*((void *)&v18 + 1) + 8 * (void)i)];
        }

        id v7 = [v9 countByEnumeratingWithState:&v18 objects:v25 count:16];
      }

      while (v7);
    }

    id v5 = v9;
  }

  uint64_t v12 = v6;

  uint64_t v13 = *(void **)(a1 + 48);
  id v16 = v6;
  unsigned __int8 v14 = [v13 save:&v16];
  id v6 = v16;

  if ((v14 & 1) == 0)
  {
    if (qword_1002EEA18 != -1) {
      dispatch_once(&qword_1002EEA18, &stru_100284D78);
    }
    uint64_t v15 = (os_log_s *)qword_1002EEA20;
    if (os_log_type_enabled((os_log_t)qword_1002EEA20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v24 = v6;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "setSettingsData: save %@", buf, 0xCu);
    }
  }

void sub_10015BD54(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_10015BED4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_10015BEF0(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v14 = 0LL;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 executeFetchRequest:v3 error:&v14]);
  id v5 = v14;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 firstObject]);
  id v7 = v6;
  if (v6 && (id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 data]), v8, v8))
  {
    uint64_t v9 = objc_claimAutoreleasedReturnValue([v7 data]);
    uint64_t v10 = *(void *)(a1[6] + 8LL);
    id v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;
  }

  else
  {
    if (qword_1002EEA18 != -1) {
      dispatch_once(&qword_1002EEA18, &stru_100284D98);
    }
    uint64_t v12 = (os_log_s *)qword_1002EEA20;
    if (os_log_type_enabled((os_log_t)qword_1002EEA20, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "getSettingsData: no cached data", v13, 2u);
    }
  }
}

void sub_10015C010(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_10015C1F8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_10015C228(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[CachedData fetchRequest](&OBJC_CLASS___CachedData, "fetchRequest"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"key = %@ AND application = %@",  @"SettingsNumber",  *(void *)(a1 + 32)));
  [v2 setPredicate:v3];

  id v4 = *(void **)(a1 + 48);
  if (*(void *)(a1 + 40))
  {
    id v17 = 0LL;
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 executeFetchRequest:v2 error:&v17]);
    id v6 = v17;
    if ([v5 count])
    {
      id v7 = (id)objc_claimAutoreleasedReturnValue([v5 firstObject]);
      if (!v7)
      {

        goto LABEL_20;
      }
    }

    else
    {
      id v7 = (id)objc_claimAutoreleasedReturnValue( +[NSEntityDescription insertNewObjectForEntityForName:inManagedObjectContext:]( &OBJC_CLASS___NSEntityDescription,  "insertNewObjectForEntityForName:inManagedObjectContext:",  @"CachedData",  *(void *)(a1 + 48)));
      [v7 setKey:@"SettingsNumber"];
      [v7 setApplication:*(void *)(a1 + 32)];
    }

    [v7 setData:*(void *)(a1 + 56)];
    id v9 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v7 setUpdated:v9];
  }

  else
  {
    id v22 = 0LL;
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 executeFetchRequest:v2 error:&v22]);
    id v6 = v22;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    id v9 = v8;
    id v7 = [v9 countByEnumeratingWithState:&v18 objects:v25 count:16];
    if (v7)
    {
      uint64_t v10 = *(void *)v19;
      do
      {
        for (unint64_t i = 0LL; i != v7; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v10) {
            objc_enumerationMutation(v9);
          }
          [*(id *)(a1 + 48) deleteObject:*(void *)(*((void *)&v18 + 1) + 8 * (void)i)];
        }

        id v7 = [v9 countByEnumeratingWithState:&v18 objects:v25 count:16];
      }

      while (v7);
    }

    id v5 = v9;
  }

  uint64_t v12 = v6;

  uint64_t v13 = *(void **)(a1 + 48);
  id v16 = v6;
  unsigned __int8 v14 = [v13 save:&v16];
  id v6 = v16;

  if ((v14 & 1) == 0)
  {
    if (qword_1002EEA18 != -1) {
      dispatch_once(&qword_1002EEA18, &stru_100284DD8);
    }
    uint64_t v15 = (os_log_s *)qword_1002EEA20;
    if (os_log_type_enabled((os_log_t)qword_1002EEA20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v24 = v6;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "setSettingsNumber: save %@", buf, 0xCu);
    }
  }

void sub_10015C500(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_10015C680( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_10015C69C(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v17 = 0LL;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 executeFetchRequest:v3 error:&v17]);
  id v5 = v17;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 firstObject]);
  id v7 = v6;
  if (v6 && (id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 data]), v8, v8))
  {
    uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSNumber, v9);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 data]);
    uint64_t v12 = objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  v10,  v11,  0LL));
    uint64_t v13 = *(void *)(a1[6] + 8LL);
    unsigned __int8 v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;
  }

  else
  {
    if (qword_1002EEA18 != -1) {
      dispatch_once(&qword_1002EEA18, &stru_100284DF8);
    }
    uint64_t v15 = (os_log_s *)qword_1002EEA20;
    if (os_log_type_enabled((os_log_t)qword_1002EEA20, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "getSettingsNumber: no cached data", v16, 2u);
    }
  }
}

void sub_10015C7FC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA20;
  qword_1002EEA20 = (uint64_t)v1;
}

void sub_10015D8B8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA30;
  qword_1002EEA30 = (uint64_t)v1;
}

void sub_10015DBA4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA30;
  qword_1002EEA30 = (uint64_t)v1;
}

void sub_10015DDB8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA30;
  qword_1002EEA30 = (uint64_t)v1;
}

void sub_10015ED14(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA30;
  qword_1002EEA30 = (uint64_t)v1;
}

void sub_10015ED44(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA30;
  qword_1002EEA30 = (uint64_t)v1;
}

void sub_10015ED74(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA30;
  qword_1002EEA30 = (uint64_t)v1;
}

void sub_10015EDA4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA30;
  qword_1002EEA30 = (uint64_t)v1;
}

void sub_10015F244(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA30;
  qword_1002EEA30 = (uint64_t)v1;
}

void sub_10015F274(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA30;
  qword_1002EEA30 = (uint64_t)v1;
}

id sub_10015F6B8(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 deviceIDHash]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceIdHash]);

  id v6 = [v4 isEqualToData:v5];
  return v6;
}

BOOL sub_100161628(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientDataHash]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 clientDataHash]);
  if ([v4 isEqual:v5])
  {
    id v6 = [*(id *)(a1 + 32) applicationVersion];
    BOOL v7 = v6 == [v3 appVersion];
  }

  else
  {
    BOOL v7 = 0LL;
  }

  return v7;
}

void sub_100161CCC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_100161CF0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v8 = WeakRetained;
  if (v6)
  {
    [WeakRetained setError:v6];
    id v9 = (id)objc_claimAutoreleasedReturnValue([v8 operationQueue]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 finishedOp]);
    [v9 addOperation:v10];
  }

  else
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 smDataStore]);
    id v16 = 0LL;
    unsigned __int8 v13 = [v12 storeIDMSDeviceList:v5 error:&v16];
    id v9 = v16;

    if ((v13 & 1) != 0)
    {
      unsigned __int8 v14 = (void *)objc_claimAutoreleasedReturnValue([v8 intendedState]);
      [v8 setNextState:v14];
    }

    else
    {
      [v8 setError:v9];
    }

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 operationQueue]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v8 finishedOp]);
    [v10 addOperation:v15];
  }
}

void sub_100162130( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100162154(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  os_log_t v1 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained intendedState]);
  [WeakRetained setNextState:v1];

  id v2 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
  [v2 addOperation:v3];
}

void sub_100162898( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_1001628BC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001628CC(uint64_t a1)
{
}

void sub_1001628D4(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
  obuint64_t j = *(id *)(v4 + 40);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 fetchServerRpcById:v3 error:&obj]);
  objc_storeStrong((id *)(v4 + 40), obj);
  if (v5) {
    [*(id *)(a1 + 32) deleteObject:v5];
  }
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v12 = *(id *)(v7 + 40);
  unsigned __int8 v8 = [v6 persistWithError:&v12];
  objc_storeStrong((id *)(v7 + 40), v12);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v8;
  uint64_t v9 = objc_claimAutoreleasedReturnValue( +[SecXPCHelper cleanseErrorForXPC:]( &OBJC_CLASS___SecXPCHelper,  "cleanseErrorForXPC:",  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL)));
  uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;
}

void sub_1001629AC(uint64_t a1)
{
  if (qword_1002EEA38 != -1) {
    dispatch_once(&qword_1002EEA38, &stru_100284F88);
  }
  id v2 = (os_log_s *)qword_1002EEA40;
  if (os_log_type_enabled((os_log_t)qword_1002EEA40, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "failed to delete server rpc for UUID %@: %@",  (uint8_t *)&v5,  0x16u);
  }

void sub_100162A88(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA40;
  qword_1002EEA40 = (uint64_t)v1;
}

void sub_100162EAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100162ED0(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[7] + 8LL);
  obuint64_t j = *(id *)(v4 + 40);
  int v5 = (void *)objc_claimAutoreleasedReturnValue([v2 fetchServerRpcById:v3 error:&obj]);
  objc_storeStrong((id *)(v4 + 40), obj);
  uint64_t v6 = objc_claimAutoreleasedReturnValue( +[SecXPCHelper cleanseErrorForXPC:]( &OBJC_CLASS___SecXPCHelper,  "cleanseErrorForXPC:",  *(void *)(*(void *)(a1[7] + 8LL) + 40LL)));
  uint64_t v7 = *(void *)(a1[7] + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  if (v5)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 rpcId]);
    unsigned int v10 = [v9 isEqual:a1[5]];

    if (v10)
    {
      (*(void (**)(void))(a1[6] + 16LL))();
      *(_BYTE *)(*(void *)(a1[8] + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
    }
  }

  else
  {
    uint64_t v11 = objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorDatabase,  -330LL,  @"no server rpc found for %@",  a1[5]));
    uint64_t v12 = *(void *)(a1[7] + 8LL);
    unsigned __int8 v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    if (qword_1002EEA38 != -1) {
      dispatch_once(&qword_1002EEA38, &stru_100284FA8);
    }
    unsigned __int8 v14 = (os_log_s *)qword_1002EEA40;
    if (os_log_type_enabled((os_log_t)qword_1002EEA40, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = a1[5];
      *(_DWORD *)buf = 138543362;
      uint64_t v18 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "no server rpc found for rpcId %{public}@",  buf,  0xCu);
    }
  }
}

void sub_100163098(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA40;
  qword_1002EEA40 = (uint64_t)v1;
}

void sub_100163214( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_10016322C(void *a1, void *a2)
{
  id v3 = a2;
  [v3 setState:0];
  [v3 setFailure:a1[4]];
  if (qword_1002EEA38 != -1) {
    dispatch_once(&qword_1002EEA38, &stru_100284FF0);
  }
  uint64_t v4 = (void *)qword_1002EEA40;
  if (os_log_type_enabled((os_log_t)qword_1002EEA40, OS_LOG_TYPE_ERROR))
  {
    int v5 = v4;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 rpcId]);
    id v7 = [v3 rpcType];
    uint64_t v8 = a1[4];
    *(_DWORD *)buf = 138412802;
    unsigned __int8 v13 = v6;
    __int16 v14 = 2048;
    id v15 = v7;
    __int16 v16 = 2112;
    uint64_t v17 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "ServerRPC failed. rpcId: %@, rpcType: %lld -- %@",  buf,  0x20u);
  }

  uint64_t v9 = (void *)a1[5];
  uint64_t v10 = *(void *)(a1[6] + 8LL);
  obuint64_t j = *(id *)(v10 + 40);
  [v9 persistWithError:&obj];
  objc_storeStrong((id *)(v10 + 40), obj);
}

void sub_100163380(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA40;
  qword_1002EEA40 = (uint64_t)v1;
}

void sub_100163560( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_100163578(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setResponse:*(void *)(a1 + 32)];
  objc_msgSend(v3, "setResponseStatus:", objc_msgSend(*(id *)(a1 + 40), "integerValue"));
  [v3 setUsedReversePush:*(unsigned __int8 *)(a1 + 72)];
  [v3 setServerHint:*(void *)(a1 + 48)];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  [v3 setResponseTime:v4];

  if (([*(id *)(a1 + 40) isEqualToNumber:&off_100299BA0] & 1) != 0
    || [*(id *)(a1 + 40) isEqualToNumber:&off_100299BB8])
  {
    [v3 setState:1];
    if (qword_1002EEA38 != -1) {
      dispatch_once(&qword_1002EEA38, &stru_100285038);
    }
    int v5 = (void *)qword_1002EEA40;
    if (os_log_type_enabled((os_log_t)qword_1002EEA40, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = v5;
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 rpcId]);
      *(_DWORD *)buf = 138412546;
      id v15 = v7;
      __int16 v16 = 2048;
      id v17 = [v3 rpcType];
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "ServerRPC succeeded. rpcId: %@, rpcType: %lld",  buf,  0x16u);

LABEL_11:
    }
  }

  else
  {
    [v3 setState:0];
    if (qword_1002EEA38 != -1) {
      dispatch_once(&qword_1002EEA38, &stru_100285058);
    }
    uint64_t v8 = (void *)qword_1002EEA40;
    if (os_log_type_enabled((os_log_t)qword_1002EEA40, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = v8;
      id v9 = [v3 responseStatus];
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 rpcId]);
      *(_DWORD *)buf = 134218498;
      id v15 = v9;
      __int16 v16 = 2112;
      id v17 = v10;
      __int16 v18 = 2048;
      id v19 = [v3 rpcType];
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "ServerRPC failed. responseStatus: %lld, rpcId: %@, rpcType: %lld",  buf,  0x20u);

      goto LABEL_11;
    }
  }

  uint64_t v11 = *(void **)(a1 + 56);
  uint64_t v12 = *(void *)(*(void *)(a1 + 64) + 8LL);
  obuint64_t j = *(id *)(v12 + 40);
  [v11 persistWithError:&obj];
  objc_storeStrong((id *)(v12 + 40), obj);
}

void sub_100163808(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA40;
  qword_1002EEA40 = (uint64_t)v1;
}

void sub_100163838(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA40;
  qword_1002EEA40 = (uint64_t)v1;
}

void sub_100163A5C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100163A7C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA40;
  qword_1002EEA40 = (uint64_t)v1;
}

void sub_100163AAC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  @"RPCSingleQuery"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"uri == %@ && application == %@ && requestTime > %@ && state == %@",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  &off_100299BD0));
  [v2 setPredicate:v3];

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  @"requestTime",  0LL));
  uint64_t v12 = v4;
  int v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v12, 1LL));
  [v2 setSortDescriptors:v5];

  [v2 setResultType:2];
  [v2 setFetchLimit:1];
  [v2 setPropertiesToFetch:&off_10029A268];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) context]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 executeFetchRequest:v2 error:*(void *)(a1 + 72)]);

  +[TransparencyManagedDataStore cleanseError:]( &OBJC_CLASS___TransparencyManagedDataStore,  "cleanseError:",  *(void *)(a1 + 72));
  if (v7 && [v7 count])
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectAtIndexedSubscript:0]);
    uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"rpcId"]);
    uint64_t v10 = *(void *)(*(void *)(a1 + 64) + 8LL);
    uint64_t v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;
  }
}

void sub_100163DA4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100163DBC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  @"RPCBatchQuery"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"application == %@ && requestTime > %@ && state == %@",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  &off_100299BD0));
  [v2 setPredicate:v3];

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  @"requestTime",  0LL));
  id v23 = v4;
  int v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v23, 1LL));
  [v2 setSortDescriptors:v5];

  [v2 setResultType:2];
  [v2 setPropertiesToFetch:&off_10029A280];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) context]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 executeFetchRequest:v2 error:*(void *)(a1 + 72)]);

  +[TransparencyManagedDataStore cleanseError:]( &OBJC_CLASS___TransparencyManagedDataStore,  "cleanseError:",  *(void *)(a1 + 72));
  if (v7 && [v7 count])
  {
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    id v8 = v7;
    id v9 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v19;
      while (2)
      {
        for (unint64_t i = 0LL; i != v10; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v11) {
            objc_enumerationMutation(v8);
          }
          unsigned __int8 v13 = *(void **)(*((void *)&v18 + 1) + 8LL * (void)i);
          __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:@"uris"]);
          if ([v14 containsObject:*(void *)(a1 + 56)])
          {
            uint64_t v15 = objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:@"rpcId"]);
            uint64_t v16 = *(void *)(*(void *)(a1 + 64) + 8LL);
            id v17 = *(void **)(v16 + 40);
            *(void *)(v16 + 40) = v15;

            goto LABEL_13;
          }
        }

        id v10 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
        if (v10) {
          continue;
        }
        break;
      }
    }

void sub_100164250( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10016427C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  @"RPCSingleQuery"));
  [*(id *)(a1 + 32) serverRPCTimeoutSeconds];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:", -v3));
  int v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"uri == %@ && application == %@ && state == %@ && requestTime > %@",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  &off_100299BE8,  v4));
  [v2 setPredicate:v5];

  [v2 setResultType:4];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  uint64_t v7 = *(void *)(*(void *)(a1 + 64) + 8LL);
  obuint64_t j = *(id *)(v7 + 40);
  id v8 = [v6 countForFetchRequest:v2 error:&obj];
  objc_storeStrong((id *)(v7 + 40), obj);
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v8;

  uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id v10 = *(id *)(v9 + 40);
  +[TransparencyManagedDataStore cleanseError:](&OBJC_CLASS___TransparencyManagedDataStore, "cleanseError:", &v10);
  objc_storeStrong((id *)(v9 + 40), v10);
}

void sub_1001643BC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA40;
  qword_1002EEA40 = (uint64_t)v1;
}

void sub_1001645FC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA40;
  qword_1002EEA40 = (uint64_t)v1;
}

void sub_10016462C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA40;
  qword_1002EEA40 = (uint64_t)v1;
}

void sub_100164744(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA40;
  qword_1002EEA40 = (uint64_t)v1;
}

void sub_1001648F4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEA40;
  qword_1002EEA40 = (uint64_t)v1;
}

id QueryRequest_Version_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend(+[QueryRequest descriptor](QueryRequest, "descriptor"), "fieldWithNumber:", 1));
}

id SetQueryRequest_Version_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[QueryRequest descriptor](QueryRequest, "descriptor"),  "fieldWithNumber:",  1),  a2);
}

id QueryRequest_Application_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend(+[QueryRequest descriptor](QueryRequest, "descriptor"), "fieldWithNumber:", 2));
}

id SetQueryRequest_Application_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[QueryRequest descriptor](QueryRequest, "descriptor"),  "fieldWithNumber:",  2),  a2);
}

id QueryResponse_Status_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend(+[QueryResponse descriptor](QueryResponse, "descriptor"), "fieldWithNumber:", 1));
}

id SetQueryResponse_Status_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[QueryResponse descriptor](QueryResponse, "descriptor"),  "fieldWithNumber:",  1),  a2);
}

id BatchQueryRequest_Version_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[BatchQueryRequest descriptor](BatchQueryRequest, "descriptor"),  "fieldWithNumber:",  1));
}

id SetBatchQueryRequest_Version_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[BatchQueryRequest descriptor](BatchQueryRequest, "descriptor"),  "fieldWithNumber:",  1),  a2);
}

id BatchQueryRequest_Application_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[BatchQueryRequest descriptor](BatchQueryRequest, "descriptor"),  "fieldWithNumber:",  2));
}

id SetBatchQueryRequest_Application_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[BatchQueryRequest descriptor](BatchQueryRequest, "descriptor"),  "fieldWithNumber:",  2),  a2);
}

id BatchQueryResponse_Status_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[BatchQueryResponse descriptor](BatchQueryResponse, "descriptor"),  "fieldWithNumber:",  1));
}

id SetBatchQueryResponse_Status_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[BatchQueryResponse descriptor](BatchQueryResponse, "descriptor"),  "fieldWithNumber:",  1),  a2);
}

id BatchQueryInfo_Status_RawValue(uint64_t a1)
{
  return sub_10013890C( a1,  objc_msgSend( +[BatchQueryInfo descriptor](BatchQueryInfo, "descriptor"),  "fieldWithNumber:",  1));
}

id SetBatchQueryInfo_Status_RawValue(void *a1, int a2)
{
  return sub_100138910( a1,  (uint64_t)objc_msgSend( +[BatchQueryInfo descriptor](BatchQueryInfo, "descriptor"),  "fieldWithNumber:",  1),  a2);
}

void sub_100164F6C(id a1)
{
  uint64_t v1 = xpc_transaction_exit_clean(a1);
  xpc_transaction_try_exit_clean(v1);
}

id sub_1001652D8(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)double v3 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "Received signal SIGTERM. Will terminate when clean.",  v3,  2u);
  }

  return [*(id *)(a1 + 32) signalEventHander];
}

uint64_t sub_100165450(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100165DC4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, char a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51)
{
}

void sub_100165E18(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEAA8;
  qword_1002EEAA8 = (uint64_t)v1;
}

void sub_100165E48(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEAA8;
  qword_1002EEAA8 = (uint64_t)v1;
}

void sub_100165E78(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 logger]);
    [v8 logResultForEvent:@"KTEnrollFetch" hardFailure:1 result:v6];

    [*(id *)(a1 + 32) setError:v6];
  }

  else
  {
    if (qword_1002EEAA0 != -1) {
      dispatch_once(&qword_1002EEAA0, &stru_100285230);
    }
    uint64_t v9 = &qword_1002EC9F8[705];
    id v10 = (void *)qword_1002EEAA8;
    if (os_log_type_enabled((os_log_t)qword_1002EEAA8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = v10;
      *(_DWORD *)buf = 67109120;
      LODWORD(v9_Block_object_dispose(va, 8) = [v5 count];
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Processing %d registrations requests",  buf,  8u);
    }

    __int128 v95 = 0u;
    __int128 v96 = 0u;
    __int128 v93 = 0u;
    __int128 v94 = 0u;
    id v76 = v5;
    id v12 = v5;
    id v84 = [v12 countByEnumeratingWithState:&v93 objects:v101 count:16];
    if (v84)
    {
      uint64_t v83 = *(void *)v94;
      id v81 = v12;
      do
      {
        unsigned __int8 v13 = 0LL;
        do
        {
          if (*(void *)v94 != v83) {
            objc_enumerationMutation(v12);
          }
          uint64_t v14 = *(void **)(*((void *)&v93 + 1) + 8LL * (void)v13);
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:v14]);
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 tbsKTIDSRegistrationData]);

          if (v16)
          {
            id v17 = (void *)objc_claimAutoreleasedReturnValue([v15 pushToken]);

            if (v17)
            {
              if (qword_1002EEAA0 != -1) {
                dispatch_once(&qword_1002EEAA0, &stru_100285270);
              }
              __int128 v18 = (void *)v9[341];
              if (os_log_type_enabled((os_log_t)v18, OS_LOG_TYPE_INFO))
              {
                __int128 v19 = v18;
                __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v15 pushToken]);
                __int128 v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "kt_hexString"));
                *(_DWORD *)buf = 138412290;
                id v98 = v21;
                _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Adding device to set: %@", buf, 0xCu);
              }

              id v22 = *(void **)(a1 + 40);
              id v23 = (void *)objc_claimAutoreleasedReturnValue([v15 pushToken]);
              id v24 = (void *)objc_claimAutoreleasedReturnValue([v15 tbsKTIDSRegistrationData]);
              id v17 = (void *)objc_claimAutoreleasedReturnValue([v22 addDevice:v23 registationData:v24 app:v14]);
            }

            uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
            __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([v25 accountKeyService]);
            __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([v15 application]);
            __int128 v28 = (void *)objc_claimAutoreleasedReturnValue([v26 accountKeyService:v27]);

            if (v28)
            {
              id v92 = 0LL;
              char v82 = v28;
              __int128 v29 = (void *)objc_claimAutoreleasedReturnValue([v28 publicPublicKey:&v92]);
              id v30 = v92;
              if (v29)
              {
                id v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) idsRegistrationInterface]);
                unsigned int v32 = [v31 isKTKeyDifferent:v29];

                if (v32)
                {
                  if (qword_1002EEAA0 != -1) {
                    dispatch_once(&qword_1002EEAA0, &stru_1002852D0);
                  }
                  id v33 = (os_log_s *)v9[341];
                  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "isKTKeyDifferent, forcing update",  buf,  2u);
                  }

                  [*(id *)(a1 + 32) setForceUpdate:1];
                }

                id v80 = v30;
                __int128 v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
                __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([v34 accountKeyService]);
                __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v15 validateSignature:v35 withPublicKey:v29]);

                if (v36)
                {
                  if (qword_1002EEAA0 != -1) {
                    dispatch_once(&qword_1002EEAA0, &stru_1002852F0);
                  }
                  __int128 v37 = v82;
                  __int128 v38 = (void *)v9[341];
                  if (os_log_type_enabled((os_log_t)v38, OS_LOG_TYPE_ERROR))
                  {
                    __int128 v39 = v38;
                    __int128 v40 = (void *)objc_claimAutoreleasedReturnValue([v15 application]);
                    *(_DWORD *)buf = 138412546;
                    id v98 = v40;
                    __int16 v99 = 2112;
                    unint64_t v100 = v36;
                    _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_ERROR,  "Performing signing of data in %@ for reason: %@",  buf,  0x16u);
                  }

                  __int128 v41 = (void *)objc_claimAutoreleasedReturnValue([v15 tbsKTIDSRegistrationData]);
                  v85[0] = _NSConcreteStackBlock;
                  v85[1] = 3221225472LL;
                  v85[2] = sub_100166A94;
                  v85[3] = &unk_100285358;
                  v85[4] = *(void *)(a1 + 32);
                  id v86 = v15;
                  id v87 = *(id *)(a1 + 48);
                  id v88 = *(id *)(a1 + 56);
                  id v89 = *(id *)(a1 + 64);
                  id v42 = v17;
                  uint64_t v43 = *(void *)(a1 + 72);
                  id v90 = v42;
                  uint64_t v91 = v43;
                  [v82 signData:v41 completionBlock:v85];
                }

                else
                {
                  id v60 = *(void **)(a1 + 32);
                  __n128 v61 = (void *)objc_claimAutoreleasedReturnValue([v15 application]);
                  [v60 recordKeyState:1 application:v61];

                  [v17 markedSigned];
                  uint64_t v62 = objc_claimAutoreleasedReturnValue([v15 pushToken]);
                  if (v62)
                  {
                    uint64_t v63 = (void *)v62;
                    uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
                    unint64_t v64 = (void *)objc_claimAutoreleasedReturnValue([v78 cloudRecords]);
                    uint64_t v79 = v29;
                    unint64_t v65 = (void *)objc_claimAutoreleasedReturnValue([v15 pushToken]);
                    id v66 = (void *)objc_claimAutoreleasedReturnValue([v15 tbsKTIDSRegistrationData]);
                    unsigned int v77 = [v64 cloudDeviceNeedUpdateWithPushToken:v65 tbsRegistrationData:v66];

                    __int128 v29 = v79;
                    if (v77)
                    {
                      if (qword_1002EEAA0 != -1) {
                        dispatch_once(&qword_1002EEAA0, &stru_100285378);
                      }
                      uint64_t v67 = (void *)qword_1002EEAA8;
                      if (os_log_type_enabled((os_log_t)qword_1002EEAA8, OS_LOG_TYPE_INFO))
                      {
                        __n128 v68 = v67;
                        uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue([v15 pushToken]);
                        uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "kt_hexString"));
                        *(_DWORD *)buf = 138412546;
                        id v98 = v14;
                        __int16 v99 = 2112;
                        unint64_t v100 = v70;
                        _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_INFO,  "Service (%@) need update %@",  buf,  0x16u);
                      }

                      *(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
                    }
                  }

                  uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue([v15 uploadedAt]);

                  uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
                  uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue([v72 logger]);
                  id v74 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"TBS-%@-%@",  @"c",  v14));
                  if (v71) {
                    uint64_t v75 = &off_100299C00;
                  }
                  else {
                    uint64_t v75 = &off_100299C18;
                  }
                  [v73 setNumberProperty:v75 forKey:v74];

                  uint64_t v9 = qword_1002EC9F8 + 5640;
                  __int128 v37 = v82;
                }

                uint64_t v58 = v80;
              }

              else
              {
                if (qword_1002EEAA0 != -1) {
                  dispatch_once(&qword_1002EEAA0, &stru_1002852B0);
                }
                __int128 v37 = v82;
                id v53 = (os_log_s *)v9[341];
                if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412290;
                  id v98 = v30;
                  _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_ERROR,  "publicPublicKey failed: %@",  buf,  0xCu);
                }

                [v15 setError:v30];
                [*(id *)(a1 + 48) addObject:v15];
                [*(id *)(a1 + 32) setError:v30];
                id v54 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
                int v55 = (void *)objc_claimAutoreleasedReturnValue([v54 lockStateTracker]);
                [v55 isLockedError:v30];

                uint64_t v56 = *(void **)(a1 + 32);
                uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue([v15 application]);
                [v56 recordKeyState:3 application:v57];

                uint64_t v58 = v30;
                __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
                uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([v36 logger]);
                [v59 logResultForEvent:@"KTValidateEnrollPublicKey" hardFailure:1 result:v58];
              }

              id v12 = v81;
            }

            else
            {
              __int16 v48 = *(void **)(a1 + 32);
              id v49 = (void *)objc_claimAutoreleasedReturnValue([v15 application]);
              [v48 recordKeyState:2 application:v49];

              if (qword_1002EEAA0 != -1) {
                dispatch_once(&qword_1002EEAA0, &stru_100285290);
              }
              id v12 = v81;
              __int128 v37 = 0LL;
              __int16 v50 = (void *)v9[341];
              if (os_log_type_enabled((os_log_t)v50, OS_LOG_TYPE_ERROR))
              {
                uint64_t v51 = v50;
                __int128 v52 = (void *)objc_claimAutoreleasedReturnValue([v15 application]);
                *(_DWORD *)buf = 138412290;
                id v98 = v52;
                _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "No key server for %@", buf, 0xCu);
              }
            }
          }

          else
          {
            if (qword_1002EEAA0 != -1) {
              dispatch_once(&qword_1002EEAA0, &stru_100285250);
            }
            __int16 v44 = (void *)v9[341];
            if (os_log_type_enabled((os_log_t)v44, OS_LOG_TYPE_ERROR))
            {
              uint64_t v45 = v44;
              __int16 v46 = (void *)objc_claimAutoreleasedReturnValue([v15 application]);
              *(_DWORD *)buf = 138412290;
              id v98 = v46;
              _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_ERROR,  "No registration data for %@",  buf,  0xCu);
            }

            uint64_t v47 = *(void **)(a1 + 32);
            id v17 = (void *)objc_claimAutoreleasedReturnValue([v15 application]);
            [v47 recordKeyState:5 application:v17];
          }

          unsigned __int8 v13 = (char *)v13 + 1;
        }

        while (v84 != v13);
        id v84 = [v12 countByEnumeratingWithState:&v93 objects:v101 count:16];
      }

      while (v84);
    }

    id v6 = 0LL;
    id v5 = v76;
  }
}

void sub_100166944(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEAA8;
  qword_1002EEAA8 = (uint64_t)v1;
}

void sub_100166974(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEAA8;
  qword_1002EEAA8 = (uint64_t)v1;
}

void sub_1001669A4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEAA8;
  qword_1002EEAA8 = (uint64_t)v1;
}

void sub_1001669D4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEAA8;
  qword_1002EEAA8 = (uint64_t)v1;
}

void sub_100166A04(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEAA8;
  qword_1002EEAA8 = (uint64_t)v1;
}

void sub_100166A34(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEAA8;
  qword_1002EEAA8 = (uint64_t)v1;
}

void sub_100166A64(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEAA8;
  qword_1002EEAA8 = (uint64_t)v1;
}

void sub_100166A94(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (v12)
  {
    if (qword_1002EEAA0 != -1) {
      dispatch_once(&qword_1002EEAA0, &stru_100285310);
    }
    unsigned __int8 v13 = (os_log_s *)qword_1002EEAA8;
    if (os_log_type_enabled((os_log_t)qword_1002EEAA8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v30 = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "signData failed: %@", buf, 0xCu);
    }

    [*(id *)(a1 + 32) setError:v12];
    [*(id *)(a1 + 40) setError:v12];
    [*(id *)(a1 + 48) addObject:*(void *)(a1 + 40)];
    uint64_t v14 = *(void **)(a1 + 32);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) application]);
    [v14 recordKeyState:6 application:v15];

    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deps]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 logger]);
    [v17 logResultForEvent:@"KTEnrollSign" hardFailure:1 result:v12];
  }

  else
  {
    [*(id *)(a1 + 40) setSignature:v10];
    [*(id *)(a1 + 40) setPublicKey:v9];
    [*(id *)(a1 + 40) setOrderedTimestamp:v11];
    [*(id *)(a1 + 40) setDsid:*(void *)(a1 + 56)];
    [*(id *)(a1 + 40) setAltDSID:*(void *)(a1 + 64)];
    if (qword_1002EEAA0 != -1) {
      dispatch_once(&qword_1002EEAA0, &stru_100285330);
    }
    __int128 v18 = (void *)qword_1002EEAA8;
    if (os_log_type_enabled((os_log_t)qword_1002EEAA8, OS_LOG_TYPE_INFO))
    {
      __int128 v19 = *(void **)(a1 + 40);
      os_log_t log = v18;
      id v28 = v10;
      __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v19 application]);
      __int128 v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "kt_hexString"));
      __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) pushToken]);
      id v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "kt_hexString"));
      id v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) tbsKTIDSRegistrationData]);
      id v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "kt_hexString"));
      *(_DWORD *)buf = 138413058;
      id v30 = v20;
      __int16 v31 = 2112;
      unsigned int v32 = v26;
      __int16 v33 = 2112;
      __int128 v34 = v22;
      __int16 v35 = 2112;
      __int128 v36 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_INFO,  "New signature for: %@ with key: %@. Push token %@, TBS %@",  buf,  0x2Au);

      id v10 = v28;
    }

    [*(id *)(a1 + 48) addObject:*(void *)(a1 + 40)];
    [*(id *)(a1 + 72) markedSigned];
    *(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
    uint64_t v25 = *(void **)(a1 + 32);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) application]);
    [v25 recordKeyState:1 application:v16];
  }
}

void sub_100166DDC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEAA8;
  qword_1002EEAA8 = (uint64_t)v1;
}

void sub_100166E0C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEAA8;
  qword_1002EEAA8 = (uint64_t)v1;
}

void sub_100166E3C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEAA8;
  qword_1002EEAA8 = (uint64_t)v1;
}

void sub_100166E6C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEAA8;
  qword_1002EEAA8 = (uint64_t)v1;
}

void sub_100166E9C(uint64_t a1, void *a2)
{
  double v3 = *(void **)(a1 + 32);
  id v6 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 deps]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 logger]);
  [v5 logResultForEvent:@"KTEnrollStore" hardFailure:1 result:v6];

  [*(id *)(a1 + 32) setError:v6];
}

void sub_100166F1C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEAA8;
  qword_1002EEAA8 = (uint64_t)v1;
}

void sub_100166F4C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signatureTracker]);
  double v3 = (void *)objc_claimAutoreleasedReturnValue([v2 signaturesComplete]);
  [v3 fulfill];

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signatureTracker]);
  LODWORD(v3) = [v4 shouldPokeIDSUponSigning];

  if ((_DWORD)v3)
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) idsRegistrationInterface]);
    [v5 triggerRegistrationDataNeedsUpdate:@"updated"];
  }

void sub_1001673E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_100167414(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEAB8;
  qword_1002EEAB8 = (uint64_t)v1;
}

void sub_100167444(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "Retrying CK account state fetch",  v4,  2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = [WeakRetained notifyCKAccountStatusChange:0];
}

void sub_100167764(id *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([a1[4] ckChangeListeners]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectEnumerator]);

  uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 nextObject]);
  if (v4)
  {
    id v5 = (id)v4;
    char v6 = 0;
    do
    {
      v6 |= v5 == a1[5];
      uint64_t v7 = objc_claimAutoreleasedReturnValue([v3 nextObject]);

      id v5 = (id)v7;
    }

    while (v7);
  }

  else
  {
    char v6 = 0;
  }

  if (a1[5] && (v6 & 1) == 0)
  {
    id v8 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString, "stringWithFormat:", @"ck-account-state-%@", a1[5]));
    id v9 = (const char *)[v8 UTF8String];
    dispatch_queue_attr_t v10 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    id v11 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v10);
    dispatch_queue_t v12 = dispatch_queue_create(v9, v11);

    unsigned __int8 v13 = (void *)objc_claimAutoreleasedReturnValue([a1[4] ckChangeListeners]);
    [v13 setObject:a1[5] forKey:v12];

    if (qword_1002EEAB0 != -1) {
      dispatch_once(&qword_1002EEAB0, &stru_100285420);
    }
    uint64_t v14 = (os_log_s *)qword_1002EEAB8;
    if (os_log_type_enabled((os_log_t)qword_1002EEAB8, OS_LOG_TYPE_INFO))
    {
      id v15 = a1[5];
      *(_DWORD *)buf = 138412290;
      id v28 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "adding a new listener: %@", buf, 0xCu);
    }

    if ([a1[4] firstCKAccountFetch])
    {
      if (qword_1002EEAB0 != -1) {
        dispatch_once(&qword_1002EEAB0, &stru_100285440);
      }
      uint64_t v16 = (void *)qword_1002EEAB8;
      if (os_log_type_enabled((os_log_t)qword_1002EEAB8, OS_LOG_TYPE_INFO))
      {
        id v17 = a1[4];
        id v18 = a1[5];
        __int128 v19 = v16;
        __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v17 currentCKAccountInfo]);
        *(_DWORD *)buf = 138412546;
        id v28 = v18;
        __int16 v29 = 2112;
        id v30 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "notifying new listener %@ of current state %@",  buf,  0x16u);
      }

      dispatch_group_t v21 = dispatch_group_create();
      if (v21)
      {
        id v22 = v21;
        [a1[4] _onqueueDeliverCurrentCloudKitState:a1[5] listenerQueue:v12 oldStatus:0 group:v21];
        id v23 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1[4] queue]);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_100167B7C;
        block[3] = &unk_100276740;
        id v26 = a1[6];
        dispatch_group_notify(v22, v23, block);

LABEL_25:
        goto LABEL_26;
      }

      if (qword_1002EEAB0 != -1) {
        dispatch_once(&qword_1002EEAB0, &stru_100285460);
      }
      id v24 = (os_log_s *)qword_1002EEAB8;
      if (os_log_type_enabled((os_log_t)qword_1002EEAB8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Unable to get dispatch group.", buf, 2u);
      }
    }

    dispatch_semaphore_signal((dispatch_semaphore_t)a1[6]);
    goto LABEL_25;
  }

  dispatch_semaphore_signal((dispatch_semaphore_t)a1[6]);
LABEL_26:
}

void sub_100167AEC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEAB8;
  qword_1002EEAB8 = (uint64_t)v1;
}

void sub_100167B1C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEAB8;
  qword_1002EEAB8 = (uint64_t)v1;
}

void sub_100167B4C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEAB8;
  qword_1002EEAB8 = (uint64_t)v1;
}

uint64_t sub_100167B7C(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100167D3C(_Unwind_Exception *a1)
{
}

void sub_100167D68(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v8 = WeakRetained;
  if (v6)
  {
    if (qword_1002EEAB0 != -1) {
      dispatch_once(&qword_1002EEAB0, &stru_100285480);
    }
    id v9 = (void *)qword_1002EEAB8;
    if (os_log_type_enabled((os_log_t)qword_1002EEAB8, OS_LOG_TYPE_INFO))
    {
      dispatch_queue_attr_t v10 = v9;
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 container]);
      dispatch_queue_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 options]);
      unsigned __int8 v13 = (void *)objc_claimAutoreleasedReturnValue([v12 accountOverrideInfo]);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 altDSID]);
      *(_DWORD *)buf = 138412546;
      dispatch_group_t v21 = v14;
      __int16 v22 = 2112;
      id v23 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "error getting account info(altDSID: %@): %@",  buf,  0x16u);
    }

    id v15 = (void *)objc_claimAutoreleasedReturnValue([v8 fetchCKAccountStatusScheduler]);
    [v15 trigger];

    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  }

  else
  {
    uint64_t v16 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100167FA0;
    block[3] = &unk_100279558;
    void block[4] = v8;
    id v18 = v5;
    id v19 = *(id *)(a1 + 32);
    dispatch_async(v16, block);
  }
}

void sub_100167F70(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEAB8;
  qword_1002EEAB8 = (uint64_t)v1;
}

id sub_100167FA0(uint64_t a1)
{
  if (qword_1002EEAB0 != -1) {
    dispatch_once(&qword_1002EEAB0, &stru_1002854A0);
  }
  id v2 = (void *)qword_1002EEAB8;
  if (os_log_type_enabled((os_log_t)qword_1002EEAB8, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = v2;
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 container]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 options]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 accountOverrideInfo]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 altDSID]);
    uint64_t v9 = *(void *)(a1 + 40);
    int v11 = 138412546;
    dispatch_queue_t v12 = v8;
    __int16 v13 = 2112;
    uint64_t v14 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "received CK Account info(altDSID: %@): %@",  (uint8_t *)&v11,  0x16u);
  }

  return [*(id *)(a1 + 32) _onqueueUpdateAccountState:*(void *)(a1 + 40) deliveredSemaphore:*(void *)(a1 + 48)];
}

void sub_1001680F0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEAB8;
  qword_1002EEAB8 = (uint64_t)v1;
}

void sub_100168120(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v5 = WeakRetained;
  if (v3)
  {
    if (qword_1002EEAB0 != -1) {
      dispatch_once(&qword_1002EEAB0, &stru_1002854E8);
    }
    id v6 = (void *)qword_1002EEAB8;
    if (os_log_type_enabled((os_log_t)qword_1002EEAB8, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = v6;
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 container]);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 options]);
      dispatch_queue_attr_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 accountOverrideInfo]);
      int v11 = (void *)objc_claimAutoreleasedReturnValue([v10 altDSID]);
      int v14 = 138412546;
      id v15 = v11;
      __int16 v16 = 2112;
      id v17 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "error reloading account info(altDSID: %@): %@",  (uint8_t *)&v14,  0x16u);
    }

    dispatch_queue_t v12 = (void *)objc_claimAutoreleasedReturnValue([v5 fetchCKAccountStatusScheduler]);
    [v12 trigger];

    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  }

  else
  {
    __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained container]);
    [v13 accountInfoWithCompletionHandler:*(void *)(a1 + 40)];
  }
}

void sub_1001682B8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEAB8;
  qword_1002EEAB8 = (uint64_t)v1;
}

void sub_10016843C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEAB8;
  qword_1002EEAB8 = (uint64_t)v1;
}

uint64_t sub_10016846C(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100168784(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEAB8;
  qword_1002EEAB8 = (uint64_t)v1;
}

void sub_1001687B4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEAB8;
  qword_1002EEAB8 = (uint64_t)v1;
}

void sub_1001689EC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) currentCKAccountInfo]);
  [WeakRetained cloudkitAccountStateChange:v2 to:v3];
}

void sub_100168C10(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEAB8;
  qword_1002EEAB8 = (uint64_t)v1;
}

void sub_100168C40(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) ckChangeListeners]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 keyEnumerator]);

  uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 nextObject]);
  if (v4)
  {
    id v6 = (dispatch_queue_s *)v4;
    *(void *)&__int128 v5 = 138412290LL;
    __int128 v12 = v5;
    do
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ckChangeListeners", v12));
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:v6]);

      if (qword_1002EEAB0 != -1) {
        dispatch_once(&qword_1002EEAB0, &stru_1002855B0);
      }
      uint64_t v9 = (os_log_s *)qword_1002EEAB8;
      if (os_log_type_enabled((os_log_t)qword_1002EEAB8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = v12;
        *(void *)&uint8_t buf[4] = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Starting blocking for listener %@", buf, 0xCu);
      }

      *(void *)buf = 0LL;
      objc_initWeak((id *)buf, v8);
      dispatch_queue_attr_t v10 = *(dispatch_group_s **)(a1 + 40);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100168E58;
      block[3] = &unk_100276D20;
      objc_copyWeak(&v14, (id *)buf);
      dispatch_group_async(v10, v6, block);
      objc_destroyWeak(&v14);
      objc_destroyWeak((id *)buf);

      uint64_t v11 = objc_claimAutoreleasedReturnValue([v3 nextObject]);
      id v6 = (dispatch_queue_s *)v11;
    }

    while (v11);
  }
}

void sub_100168E28(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEAB8;
  qword_1002EEAB8 = (uint64_t)v1;
}

void sub_100168E58(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (qword_1002EEAB0 != -1) {
    dispatch_once(&qword_1002EEAB0, &stru_1002855D0);
  }
  uint64_t v2 = (os_log_s *)qword_1002EEAB8;
  if (os_log_type_enabled((os_log_t)qword_1002EEAB8, OS_LOG_TYPE_INFO))
  {
    int v3 = 138412290;
    id v4 = WeakRetained;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_INFO,  "Done blocking for listener %@",  (uint8_t *)&v3,  0xCu);
  }
}

void sub_100168F28(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEAB8;
  qword_1002EEAB8 = (uint64_t)v1;
}

unint64_t sub_100169410(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    id result = 0LL;
    do
    {
      ++result;
      BOOL v2 = v1 > 0xFF;
      v1 >>= 8;
    }

    while (v2);
  }

  return result;
}

unsigned __int8 *sub_100169434( unint64_t a1, unsigned __int8 *a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v4 = 0LL;
  if (a1)
  {
    do
    {
      ++v4;
      BOOL v5 = a1 > 0xFF;
      a1 >>= 8;
    }

    while (v5);
  }

  id result = 0LL;
  if (a3 >= (unint64_t)a2 && a2 && a3 && a3 - (unint64_t)a2 >= v4)
  {
    unint64_t v7 = 0LL;
    if (v4)
    {
      id v8 = a2;
      unint64_t v9 = v4;
      do
      {
        unsigned int v10 = *v8++;
        unint64_t v7 = v10 | (v7 << 8);
        --v9;
      }

      while (v9);
    }

    if (a4) {
      *a4 = v7;
    }
    return &a2[v4];
  }

  return result;
}

void sub_100169F48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100169F74(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  BOOL v2 = (void *)qword_1002EEAC8;
  qword_1002EEAC8 = (uint64_t)v1;
}

void sub_100169FA4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (qword_1002EEAC0 != -1) {
    dispatch_once(&qword_1002EEAC0, &stru_100285610);
  }
  id v8 = (void *)qword_1002EEAC8;
  if (os_log_type_enabled((os_log_t)qword_1002EEAC8, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v9 = v8;
    unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained uri]);
    *(_DWORD *)buf = 141558530;
    uint64_t v35 = 1752392040LL;
    __int16 v36 = 2112;
    __int128 v37 = v10;
    __int16 v38 = 2112;
    id v39 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "FetchKTSelf: fetched %{mask.hash}@: %@",  buf,  0x20u);
  }

  [WeakRetained setQueryResponse:v5];
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained queryResponse]);

  if (v6 || !v11)
  {
    if (!v6) {
      id v6 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:description:",  kTransparencyErrorNetwork,  -344LL,  0LL,  @"FetchQuery data missing, and no error"));
    }
    if (qword_1002EEAC0 != -1) {
      dispatch_once(&qword_1002EEAC0, &stru_100285630);
    }
    __int128 v27 = (void *)qword_1002EEAC8;
    if (os_log_type_enabled((os_log_t)qword_1002EEAC8, OS_LOG_TYPE_ERROR))
    {
      id v28 = v27;
      __int16 v29 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained uri]);
      *(_DWORD *)buf = 141558530;
      uint64_t v35 = 1752392040LL;
      __int16 v36 = 2112;
      __int128 v37 = v29;
      __int16 v38 = 2114;
      id v39 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "FetchKTSelf: no query response for %{mask.hash}@: %{public}@",  buf,  0x20u);
    }

    [WeakRetained setError:v6];
    id v26 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
    id v24 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
    [v26 addOperation:v24];
  }

  else
  {
    id v32 = v5;
    __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v5 metadata]);
    uint64_t v13 = objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint]);

    id v30 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v30 smDataStore]);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained queryRequest]);
    __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([v15 data]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained queryResponse]);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 data]);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained uri]);
    __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained application]);
    id v33 = 0LL;
    __int16 v31 = (void *)v13;
    LOBYTE(v13) = [v14 storeQueryRequest:v16 queryResponse:v18 serverHint:v13 uri:v19 application:v20 error:&v33];
    id v6 = v33;

    if ((v13 & 1) == 0)
    {
      if (qword_1002EEAC0 != -1) {
        dispatch_once(&qword_1002EEAC0, &stru_100285650);
      }
      dispatch_group_t v21 = (void *)qword_1002EEAC8;
      if (os_log_type_enabled((os_log_t)qword_1002EEAC8, OS_LOG_TYPE_ERROR))
      {
        __int16 v22 = v21;
        id v23 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained uri]);
        *(_DWORD *)buf = 141558530;
        uint64_t v35 = 1752392040LL;
        __int16 v36 = 2112;
        __int128 v37 = v23;
        __int16 v38 = 2112;
        id v39 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "FetchKTSelf: failed to store KT response for %{mask.hash}@: %@",  buf,  0x20u);
      }

      [WeakRetained setError:v6];
    }

    id v24 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
    [v24 addOperation:v25];

    id v26 = v31;
    id v5 = v32;
  }
}

void sub_10016A430(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  BOOL v2 = (void *)qword_1002EEAC8;
  qword_1002EEAC8 = (uint64_t)v1;
}

void sub_10016A460(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  BOOL v2 = (void *)qword_1002EEAC8;
  qword_1002EEAC8 = (uint64_t)v1;
}

void sub_10016A490(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  BOOL v2 = (void *)qword_1002EEAC8;
  qword_1002EEAC8 = (uint64_t)v1;
}

void sub_100170504( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28)
{
}

uint64_t sub_100170528(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100170538(uint64_t a1)
{
}

void sub_100170540(uint64_t a1)
{
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  int v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSEntityDescription insertNewObjectForEntityForName:inManagedObjectContext:]( &OBJC_CLASS___NSEntityDescription,  "insertNewObjectForEntityForName:inManagedObjectContext:",  @"IDSKTVerification",  v2));

  unint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  [v3 setCreationTime:v4];

  [v3 setUri:*(void *)(a1 + 40)];
  [v3 setApplication:*(void *)(a1 + 48)];
  [v3 setAccountKey:*(void *)(a1 + 56)];
  [v3 setUnsigned:"idsOptedIn" value:*(void *)(a1 + 112)];
  if (*(void *)(a1 + 64))
  {
    objc_msgSend(v3, "setIdsResponseTime:");
  }

  else
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 creationTime]);
    [v3 setIdsResponseTime:v5];
  }

  id v6 = -[KTLoggableDataArray initWithLoggableDatas:]( objc_alloc(&OBJC_CLASS___KTLoggableDataArray),  "initWithLoggableDatas:",  *(void *)(a1 + 72));
  [v3 setServerLoggableDatas:v6];

  [v3 setUnsigned:"type" value:*(void *)(a1 + 120)];
  if (*(void *)(a1 + 80))
  {
    unint64_t v7 = -[KTLoggableDataArray initWithLoggableDatas:]( objc_alloc(&OBJC_CLASS___KTLoggableDataArray),  "initWithLoggableDatas:",  *(void *)(a1 + 80));
    [v3 setSyncedLoggableDatas:v7];
  }

  if (*(void *)(a1 + 88))
  {
    objc_msgSend(v3, "setVerificationId:");
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
    [v3 setVerificationId:v8];
  }

  unint64_t v9 = *(void **)(a1 + 32);
  unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([v3 verificationId]);
  [v9 createIDSVerificationID:v10 verification:v3];

  uint64_t v11 = *(void **)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v14 = *(void *)(*(void *)(a1 + 96) + 8LL);
  obuint64_t j = *(id *)(v14 + 40);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([v11 fetchPeer:v12 application:v13 error:&obj]);
  objc_storeStrong((id *)(v14 + 40), obj);
  if (!v15)
  {
    __int16 v16 = *(void **)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 40);
    uint64_t v18 = *(void *)(a1 + 48);
    uint64_t v19 = *(void *)(*(void *)(a1 + 96) + 8LL);
    id v56 = *(id *)(v19 + 40);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v16 createPeerState:v17 application:v18 error:&v56]);
    objc_storeStrong((id *)(v19 + 40), v56);
    if (!v15)
    {
      uint64_t v28 = (void *)objc_opt_class(*(void *)(a1 + 32), v20);
      uint64_t v29 = *(void *)(*(void *)(a1 + 96) + 8LL);
      id v55 = *(id *)(v29 + 40);
      [v28 cleanseError:&v55];
      id v30 = v55;
      id v15 = *(void **)(v29 + 40);
      *(void *)(v29 + 40) = v30;
      goto LABEL_30;
    }
  }

  [v3 setPeerState:v15];
  dispatch_group_t v21 = (void *)objc_claimAutoreleasedReturnValue([v15 mostRecentVerification]);

  if (v21)
  {
    if (*(void *)(a1 + 64))
    {
      __int16 v22 = (void *)objc_claimAutoreleasedReturnValue([v15 mostRecentVerification]);
      uint64_t v23 = objc_claimAutoreleasedReturnValue([v22 idsResponseTime]);
      if (v23)
      {
        id v24 = (void *)v23;
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v15 mostRecentVerification]);
        id v26 = (void *)objc_claimAutoreleasedReturnValue([v25 idsResponseTime]);
        id v27 = [v26 compare:*(void *)(a1 + 64)];

        if (v27 == (id)-1LL) {
          goto LABEL_21;
        }
      }

      else
      {
      }
    }

    __int16 v31 = (void *)objc_claimAutoreleasedReturnValue([v15 mostRecentVerification]);
    id v32 = (void *)objc_claimAutoreleasedReturnValue([v31 idsResponseTime]);
    if (v32)
    {

      goto LABEL_27;
    }

    id v33 = (void *)objc_claimAutoreleasedReturnValue([v15 mostRecentVerification]);
    __int128 v34 = (void *)objc_claimAutoreleasedReturnValue([v33 creationTime]);
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v3 creationTime]);
    id v36 = [v34 compare:v35];

    if (v36 != (id)-1LL) {
      goto LABEL_27;
    }
  }

void sub_100170DB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100170DD4(void *a1)
{
  BOOL v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[7] + 8LL);
  obuint64_t j = *(id *)(v4 + 40);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 onMocFetchVerificationForVerificationId:v3 error:&obj]);
  objc_storeStrong((id *)(v4 + 40), obj);
  unint64_t v7 = (void *)objc_opt_class(a1[4], v6);
  uint64_t v8 = *(void *)(a1[7] + 8LL);
  id v9 = *(id *)(v8 + 40);
  [v7 cleanseError:&v9];
  objc_storeStrong((id *)(v8 + 40), v9);
  if (v5)
  {
    (*(void (**)(void))(a1[6] + 16LL))();
    *(_BYTE *)(*(void *)(a1[8] + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  }
}

void sub_100171040( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100171060(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  obuint64_t j = *(id *)(v3 + 40);
  unsigned int v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    uint64_t v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v25 = *(id *)(v8 + 40);
    [v6 deleteNonRecentVerificationsForApplication:v7 error:&v25];
    objc_storeStrong((id *)(v8 + 40), v25);
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSBatchUpdateRequest batchUpdateRequestWithEntityName:]( &OBJC_CLASS___NSBatchUpdateRequest,  "batchUpdateRequestWithEntityName:",  @"IDSKTVerification"));
    unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"application == %@",  *(void *)(a1 + 40)));
    [v9 setPredicate:v10];

    v29[0] = @"verificationResult";
    v29[1] = @"reported";
    v30[0] = &off_100299C30;
    v30[1] = &__kCFBooleanFalse;
    void v29[2] = @"failure";
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    v30[2] = v11;
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v30,  v29,  3LL));
    [v9 setPropertiesToUpdate:v12];

    [v9 setResultType:1];
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v24 = *(id *)(v14 + 40);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v13 executeRequest:v9 error:&v24]);
    objc_storeStrong((id *)(v14 + 40), v24);

    __int16 v16 = *(void **)(a1 + 32);
    uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v23 = *(id *)(v17 + 40);
    [v16 persistWithError:&v23];
    objc_storeStrong((id *)(v17 + 40), v23);
    if (!v15)
    {
      if (qword_1002EEAD0 != -1) {
        dispatch_once(&qword_1002EEAD0, &stru_1002856C0);
      }
      uint64_t v18 = (os_log_s *)qword_1002EEAD8;
      if (os_log_type_enabled((os_log_t)qword_1002EEAD8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
        *(_DWORD *)buf = 138412290;
        uint64_t v28 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "resetVerificationsToPending delete: %@",  buf,  0xCu);
      }
    }
  }

  uint64_t v20 = (void *)objc_opt_class(*(void *)(a1 + 32), v5);
  uint64_t v21 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v22 = *(id *)(v21 + 40);
  [v20 cleanseError:&v22];
  objc_storeStrong((id *)(v21 + 40), v22);
}

void sub_100171318(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  BOOL v2 = (void *)qword_1002EEAD8;
  qword_1002EEAD8 = (uint64_t)v1;
}

void sub_100171348(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  BOOL v2 = (void *)qword_1002EEAD8;
  qword_1002EEAD8 = (uint64_t)v1;
}

void sub_1001715E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_100171610(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 72) + 8LL);
  obuint64_t j = *(id *)(v3 + 40);
  unsigned int v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"uri = %@ && verificationResult == %d && application = %@ && idsResponseTime < %@",  *(void *)(a1 + 40),  2LL,  *(void *)(a1 + 48),  *(void *)(a1 + 56)));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  @"IDSKTVerification"));
    [v7 setPredicate:v6];
    [v7 setFetchBatchSize:*(void *)(a1 + 88)];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    uint64_t v9 = *(void *)(*(void *)(a1 + 72) + 8LL);
    id v14 = *(id *)(v9 + 40);
    unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([v8 executeFetchRequest:v7 error:&v14]);
    objc_storeStrong((id *)(v9 + 40), v14);

    if ([v10 count])
    {
      (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
      *(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
    }
  }

  uint64_t v11 = (void *)objc_opt_class(*(void *)(a1 + 32), v5);
  uint64_t v12 = *(void *)(*(void *)(a1 + 72) + 8LL);
  id v13 = *(id *)(v12 + 40);
  [v11 cleanseError:&v13];
  objc_storeStrong((id *)(v12 + 40), v13);
}

void sub_10017177C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  BOOL v2 = (void *)qword_1002EEAD8;
  qword_1002EEAD8 = (uint64_t)v1;
}

void sub_1001718DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100171900(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  obuint64_t j = *(id *)(v3 + 40);
  unsigned int v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    uint64_t v6 = objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"verificationResult == %d && application = %@",  2LL,  *(void *)(a1 + 40)));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  @"IDSKTVerification"));
    id v23 = (void *)v6;
    [v7 setPredicate:v6];
    [v7 setPropertiesToFetch:&off_10029A2B0];
    [v7 setReturnsDistinctResults:1];
    [v7 setResultType:2];
    if (*(void *)(a1 + 64)) {
      objc_msgSend(v7, "setFetchLimit:");
    }
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v29 = *(id *)(v9 + 40);
    unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([v8 executeFetchRequest:v7 error:&v29]);
    objc_storeStrong((id *)(v9 + 40), v29);

    if (v10 && [v10 count])
    {
      uint64_t v11 = objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [v10 count]));
      uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8LL);
      id v13 = *(void **)(v12 + 40);
      *(void *)(v12 + 40) = v11;
    }

    __int128 v27 = 0u;
    __int128 v28 = 0u;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v10 reverseObjectEnumerator]);
    id v15 = [v14 countByEnumeratingWithState:&v25 objects:v31 count:16];
    if (v15)
    {
      id v16 = v15;
      uint64_t v17 = *(void *)v26;
      do
      {
        uint64_t v18 = 0LL;
        do
        {
          if (*(void *)v26 != v17) {
            objc_enumerationMutation(v14);
          }
          uint64_t v19 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
          uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*((void *)&v25 + 1) + 8 * (void)v18) objectForKeyedSubscript:@"uri"]);
          [v19 addObject:v20];

          uint64_t v18 = (char *)v18 + 1;
        }

        while (v16 != v18);
        id v16 = [v14 countByEnumeratingWithState:&v25 objects:v31 count:16];
      }

      while (v16);
    }
  }

  uint64_t v21 = (void *)objc_opt_class(*(void *)(a1 + 32), v5);
  uint64_t v22 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v24 = *(id *)(v22 + 40);
  [v21 cleanseError:&v24];
  objc_storeStrong((id *)(v22 + 40), v24);
}

void sub_100171DA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_100171DCC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) accountKey]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( NSPredicate,  "predicateWithFormat:",  @"application == %@ && type == %d && uri == %@ && creationTime > %@ && accountKey == %@ && allowCacheHit == YES && idsOptedIn == %d",  v2,  0,  v3,  v4,  v5,  [*(id *)(a1 + 56) optedIn]));

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  @"IDSKTVerification"));
  [v7 setPredicate:v6];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  @"creationTime",  0LL));
  __int128 v34 = v8;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v34, 1LL));
  [v7 setSortDescriptors:v9];

  unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) context]);
  uint64_t v11 = *(void *)(*(void *)(a1 + 80) + 8LL);
  obuint64_t j = *(id *)(v11 + 40);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v10 executeFetchRequest:v7 error:&obj]);
  objc_storeStrong((id *)(v11 + 40), obj);

  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  id v13 = v12;
  id v14 = [v13 countByEnumeratingWithState:&v28 objects:v33 count:16];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = *(void *)v29;
    while (2)
    {
      for (unint64_t i = 0LL; i != v15; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v29 != v16) {
          objc_enumerationMutation(v13);
        }
        uint64_t v18 = *(void **)(*((void *)&v28 + 1) + 8LL * (void)i);
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 serverLoggableDatas]);
        unsigned int v20 = [v19 isEqual:*(void *)(a1 + 72)];

        if (v20)
        {
          uint64_t v21 = objc_claimAutoreleasedReturnValue([v18 verificationId]);
          uint64_t v22 = *(void *)(*(void *)(a1 + 88) + 8LL);
          id v23 = *(void **)(v22 + 40);
          *(void *)(v22 + 40) = v21;

          goto LABEL_11;
        }
      }

      id v15 = [v13 countByEnumeratingWithState:&v28 objects:v33 count:16];
      if (v15) {
        continue;
      }
      break;
    }
  }

void sub_100172340(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEAD8;
  qword_1002EEAD8 = (uint64_t)v1;
}

void sub_100172370(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEAD8;
  qword_1002EEAD8 = (uint64_t)v1;
}

void sub_1001723A0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEAD8;
  qword_1002EEAD8 = (uint64_t)v1;
}

void sub_100172510(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEAD8;
  qword_1002EEAD8 = (uint64_t)v1;
}

void sub_100172844( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_100172864(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEAD8;
  qword_1002EEAD8 = (uint64_t)v1;
}

void sub_100172894(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  obuint64_t j = *(id *)(v3 + 40);
  unsigned int v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSBatchUpdateRequest batchUpdateRequestWithEntityName:]( &OBJC_CLASS___NSBatchUpdateRequest,  "batchUpdateRequestWithEntityName:",  @"IDSKTVerification"));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"uri IN %@ && application == %@",  *(void *)(a1 + 40),  *(void *)(a1 + 48)));
    [v6 setPredicate:v7];

    [v6 setPropertiesToUpdate:&off_10029A3D0];
    [v6 setResultType:1];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v19 = *(id *)(v9 + 40);
    unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([v8 executeRequest:v6 error:&v19]);
    objc_storeStrong((id *)(v9 + 40), v19);

    uint64_t v11 = *(void **)(a1 + 32);
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v18 = *(id *)(v12 + 40);
    [v11 persistWithError:&v18];
    objc_storeStrong((id *)(v12 + 40), v18);
    if (!v10)
    {
      if (qword_1002EEAD0 != -1) {
        dispatch_once(&qword_1002EEAD0, &stru_100285838);
      }
      id v13 = (os_log_s *)qword_1002EEAD8;
      if (os_log_type_enabled((os_log_t)qword_1002EEAD8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
        *(_DWORD *)buf = 138412290;
        uint64_t v22 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "disableCacheHitsForUris: %@", buf, 0xCu);
      }
    }
  }

  id v15 = (void *)objc_opt_class(*(void *)(a1 + 32), v5);
  uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v17 = *(id *)(v16 + 40);
  [v15 cleanseError:&v17];
  objc_storeStrong((id *)(v16 + 40), v17);
}

void sub_100172AB4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEAD8;
  qword_1002EEAD8 = (uint64_t)v1;
}

void sub_100172AE4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEAD8;
  qword_1002EEAD8 = (uint64_t)v1;
}

void sub_100172EEC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEAD8;
  qword_1002EEAD8 = (uint64_t)v1;
}

void sub_100172F1C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEAD8;
  qword_1002EEAD8 = (uint64_t)v1;
}

void sub_1001731F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_100173218(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100173228(uint64_t a1)
{
}

void sub_100173230(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  @"KTDeviceRecord"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"deviceId == %@ && (application == %@ || request.application == %@)",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 40)));
  [v2 setPredicate:v3];

  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) context]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 64) + 8LL);
  obuint64_t j = *(id *)(v5 + 40);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 executeFetchRequest:v2 error:&obj]);
  objc_storeStrong((id *)(v5 + 40), obj);

  if (v6 && [v6 count] == (id)1)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectAtIndexedSubscript:0]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 loggableData]);
    uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8LL);
    id v27 = *(id *)(v9 + 40);
    unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyManagedDataStore deserializeLoggableDatas:error:]( &OBJC_CLASS___TransparencyManagedDataStore,  "deserializeLoggableDatas:error:",  v8,  &v27));
    objc_storeStrong((id *)(v9 + 40), v27);

    if (!*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) && v10 && [v10 count] == (id)1)
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectAtIndexedSubscript:0]);
      (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
      *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
    }

    else
    {
      if (qword_1002EEAE0 != -1) {
        dispatch_once(&qword_1002EEAE0, &stru_1002858D8);
      }
      id v19 = (os_log_s *)qword_1002EEAE8;
      if (os_log_type_enabled((os_log_t)qword_1002EEAE8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        uint64_t v31 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "failed to decode loggable data for %@",  buf,  0xCu);
      }

      uint64_t v21 = objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:description:",  kTransparencyErrorDatabase,  -303LL,  *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL),  @"failed to decode loggable data for %@",  *(void *)(a1 + 32)));
      uint64_t v22 = *(void *)(*(void *)(a1 + 64) + 8LL);
      id v23 = *(void **)(v22 + 40);
      *(void *)(v22 + 40) = v21;

      uint64_t v24 = *(void *)(*(void *)(a1 + 64) + 8LL);
      id v26 = *(id *)(v24 + 40);
      +[TransparencyManagedDataStore cleanseError:](&OBJC_CLASS___TransparencyManagedDataStore, "cleanseError:", &v26);
      id v25 = v26;
      uint64_t v11 = *(void **)(v24 + 40);
      *(void *)(v24 + 40) = v25;
    }
  }

  else
  {
    if (qword_1002EEAE0 != -1) {
      dispatch_once(&qword_1002EEAE0, &stru_1002858B8);
    }
    uint64_t v12 = (os_log_s *)qword_1002EEAE8;
    if (os_log_type_enabled((os_log_t)qword_1002EEAE8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v31 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "failed to find device record for %@",  buf,  0xCu);
    }

    uint64_t v14 = objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:description:",  kTransparencyErrorDatabase,  -302LL,  *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL),  @"failed to find device record for %@",  *(void *)(a1 + 32)));
    uint64_t v15 = *(void *)(*(void *)(a1 + 64) + 8LL);
    uint64_t v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;

    uint64_t v17 = *(void *)(*(void *)(a1 + 64) + 8LL);
    id v28 = *(id *)(v17 + 40);
    +[TransparencyManagedDataStore cleanseError:](&OBJC_CLASS___TransparencyManagedDataStore, "cleanseError:", &v28);
    id v18 = v28;
    uint64_t v7 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = v18;
  }
}

void sub_100173604(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEAE8;
  qword_1002EEAE8 = (uint64_t)v1;
}

void sub_100173634(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEAE8;
  qword_1002EEAE8 = (uint64_t)v1;
}

void sub_100173B08(_Unwind_Exception *a1)
{
}

uint64_t sub_100173B2C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100173B3C(uint64_t a1)
{
}

void sub_100173B44(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) createRequest]);
  uint64_t v3 = v2;
  if (v2)
  {
    [v2 setUri:*(void *)(a1 + 40)];
    [v3 setApplication:*(void *)(a1 + 48)];
    [v3 setAccountKey:*(void *)(a1 + 56)];
    if (*(void *)(a1 + 64))
    {
      objc_msgSend(v3, "setRequestId:");
    }

    else
    {
      uint64_t v8 = objc_opt_new(&OBJC_CLASS___NSUUID);
      [v3 setRequestId:v8];
    }

    [v3 setQueryRequest:*(void *)(a1 + 72)];
    [v3 setQueryResponse:*(void *)(a1 + 80)];
    if (*(void *)(a1 + 80))
    {
      if (*(void *)(a1 + 88))
      {
        objc_msgSend(v3, "setResponseTime:");
      }

      else
      {
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v3 setResponseTime:v9];
      }
    }

    [v3 setIdsResponseTime:*(void *)(a1 + 96)];
    [v3 setClientLoggableDatas:*(void *)(a1 + 104)];
    [v3 setServerLoggableDatas:*(void *)(a1 + 112)];
    unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) controller]);
    uint64_t v11 = (unint64_t *)[v10 sequenceId];
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    objc_msgSend(v3, "setSequenceId:");

    [v3 setUnsigned:"type" value:*(void *)(a1 + 136)];
    [v3 setRequestTime:CFAbsoluteTimeGetCurrent()];
    [v3 setServerHint:0];
    uint64_t v13 = *(void **)(a1 + 32);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v3 requestId]);
    [v13 createKTRequestID:v14 request:v3];

    uint64_t v15 = *(void **)(a1 + 32);
    uint64_t v16 = *(void *)(*(void *)(a1 + 120) + 8LL);
    obuint64_t j = *(id *)(v16 + 40);
    LODWORD(v14) = [v15 persistWithError:&obj];
    objc_storeStrong((id *)(v16 + 40), obj);
    if ((_DWORD)v14)
    {
      uint64_t v17 = objc_claimAutoreleasedReturnValue([v3 requestId]);
      uint64_t v18 = *(void *)(*(void *)(a1 + 128) + 8LL);
      id v19 = *(void **)(v18 + 40);
      *(void *)(v18 + 40) = v17;
    }

    uint64_t v20 = *(void *)(*(void *)(a1 + 120) + 8LL);
    id v21 = *(id *)(v20 + 40);
    +[TransparencyManagedDataStore cleanseError:](&OBJC_CLASS___TransparencyManagedDataStore, "cleanseError:", &v21);
    objc_storeStrong((id *)(v20 + 40), v21);
  }

  else
  {
    uint64_t v4 = objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorAlloc,  -56LL,  @"failed to create KTRequest entity"));
    uint64_t v5 = *(void *)(*(void *)(a1 + 120) + 8LL);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    [*(id *)(a1 + 32) reportCoreDataEventForEntity:@"KTRequest" write:1 code:-56 underlyingError:0];
    if (qword_1002EEAF0 != -1) {
      dispatch_once(&qword_1002EEAF0, &stru_1002858F8);
    }
    uint64_t v7 = (os_log_s *)qword_1002EEAF8;
    if (os_log_type_enabled((os_log_t)qword_1002EEAF8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "failed to create KTRequest entity", buf, 2u);
    }
  }
}

void sub_100173E20(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEAF8;
  qword_1002EEAF8 = (uint64_t)v1;
}

void sub_100174288(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEAF8;
  qword_1002EEAF8 = (uint64_t)v1;
}

void sub_1001742B8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEAF8;
  qword_1002EEAF8 = (uint64_t)v1;
}

void sub_100174808(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEAF8;
  qword_1002EEAF8 = (uint64_t)v1;
}

void sub_100174960(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v7 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v15;
    do
    {
      for (unint64_t i = 0LL; i != v8; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void **)(*((void *)&v14 + 1) + 8LL * (void)i);
        unint64_t v12 = *(void **)(a1 + 32);
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 requestId]);
        [v12 createKTRequestID:v13 request:v11];
      }

      id v8 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }

    while (v8);
  }

  [*(id *)(a1 + 32) persistAndRefaultObjects:v6 error:a4];
}

void sub_100174A90(uint64_t a1)
{
  if (qword_1002EEAF0 != -1) {
    dispatch_once(&qword_1002EEAF0, &stru_1002859C8);
  }
  uint64_t v2 = (os_log_s *)qword_1002EEAF8;
  if (os_log_type_enabled((os_log_t)qword_1002EEAF8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138412290;
    uint64_t v5 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "failed to populate KTRequests to KTRequestID lookup table: %@",  (uint8_t *)&v4,  0xCu);
  }

void sub_100174B58(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEAF8;
  qword_1002EEAF8 = (uint64_t)v1;
}

void sub_100174D70(uint64_t a1, void *a2, _BYTE *a3, uint64_t a4)
{
  id v6 = a2;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v7 = [v6 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v20;
    do
    {
      for (unint64_t i = 0LL; i != v8; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v20 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)i);
        [v11 setQueryResponse:0];
        [v11 setQueryRequest:0];
        [v11 setResponseTime:0];
        unint64_t v12 = *(void **)(a1 + 32);
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 failures]);
        __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v13 allObjects]);
        [v12 deleteObjectSet:v14];

        __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v11 failureEvent]);
        if (v15)
        {
          __int128 v16 = *(void **)(a1 + 32);
          __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v11 failureEvent]);
          [v16 deleteObject:v17];
        }

        [v11 setServerHint:0];
      }

      id v8 = [v6 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }

    while (v8);
  }
}

void sub_10017530C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEAF8;
  qword_1002EEAF8 = (uint64_t)v1;
}

void sub_10017533C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEAF8;
  qword_1002EEAF8 = (uint64_t)v1;
}

void sub_1001754D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1001754FC(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[7] + 8LL);
  obuint64_t j = *(id *)(v4 + 40);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v2 fetchRequestForUUID:v3 error:&obj]);
  objc_storeStrong((id *)(v4 + 40), obj);
  uint64_t v6 = objc_claimAutoreleasedReturnValue( +[SecXPCHelper cleanseErrorForXPC:]( &OBJC_CLASS___SecXPCHelper,  "cleanseErrorForXPC:",  *(void *)(*(void *)(a1[7] + 8LL) + 40LL)));
  uint64_t v7 = *(void *)(a1[7] + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  if (v5)
  {
    (*(void (**)(void))(a1[6] + 16LL))();
    *(_BYTE *)(*(void *)(a1[8] + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  }
}

void sub_100175678(uint64_t a1)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:", -v2));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[KTRequest fetchRequest](&OBJC_CLASS___KTRequest, "fetchRequest"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  @"responseTime",  0LL));
  __int128 v16 = v5;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v16, 1LL));
  [v4 setSortDescriptors:v6];

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"application == %@ && type == %d && accountKey == %@ && responseTime > %@",  *(void *)(a1 + 32),  1LL,  *(void *)(a1 + 40),  v3));
  [v4 setPredicate:v7];

  [v4 setFetchLimit:1];
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) context]);
  id v15 = 0LL;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 executeFetchRequest:v4 error:&v15]);
  id v10 = v15;

  if (v9 && [v9 count])
  {
    uint64_t v11 = *(void *)(a1 + 56);
    unint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v9 objectAtIndexedSubscript:0]);
    (*(void (**)(uint64_t, void *, void))(v11 + 16))(v11, v12, 0LL);
  }

  else
  {
    id v14 = v10;
    +[TransparencyManagedDataStore cleanseError:](&OBJC_CLASS___TransparencyManagedDataStore, "cleanseError:", &v14);
    id v13 = v14;

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    id v10 = v13;
  }
}

void sub_100176288(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEB08;
  qword_1002EEB08 = (uint64_t)v1;
}

void sub_1001762B8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEB08;
  qword_1002EEB08 = (uint64_t)v1;
}

void sub_1001764C8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEB08;
  qword_1002EEB08 = (uint64_t)v1;
}

void sub_1001764F8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEB08;
  qword_1002EEB08 = (uint64_t)v1;
}

void sub_100176770( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

uint64_t sub_10017679C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001767AC(uint64_t a1)
{
}

void sub_1001767B4(uint64_t a1)
{
  double v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 8LL);
  obuint64_t j = *(id *)(v3 + 40);
  unsigned int v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"uri == %@ && signatureResult == %d && mergeResult == %d && application == %@",  *(void *)(a1 + 40),  1LL,  2LL,  *(void *)(a1 + 48)));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[KTMutation fetchRequest](&OBJC_CLASS___KTMutation, "fetchRequest"));
    [v7 setPredicate:v6];
    [v7 setFetchBatchSize:*(void *)(a1 + 80)];
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  @"mutationMs",  1LL));
    uint64_t v18 = v8;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v18, 1LL));
    [v7 setSortDescriptors:v9];

    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    uint64_t v11 = *(void *)(*(void *)(a1 + 64) + 8LL);
    id v16 = *(id *)(v11 + 40);
    unint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v10 executeFetchRequest:v7 error:&v16]);
    objc_storeStrong((id *)(v11 + 40), v16);

    if ([v12 count])
    {
      (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
      *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
    }
  }

  id v13 = (void *)objc_opt_class(*(void *)(a1 + 32), v5);
  uint64_t v14 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id v15 = *(id *)(v14 + 40);
  [v13 cleanseError:&v15];
  objc_storeStrong((id *)(v14 + 40), v15);
}

void sub_10017699C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEB08;
  qword_1002EEB08 = (uint64_t)v1;
}

void sub_100176AFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100176B20(uint64_t a1)
{
  double v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  obuint64_t j = *(id *)(v3 + 40);
  unsigned int v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    uint64_t v6 = objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"signatureResult == %d && mergeResult == %d && application == %@",  1LL,  2LL,  *(void *)(a1 + 40)));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[KTMutation fetchRequest](&OBJC_CLASS___KTMutation, "fetchRequest"));
    id v23 = (void *)v6;
    [v7 setPredicate:v6];
    [v7 setPropertiesToFetch:&off_10029A2F8];
    [v7 setReturnsDistinctResults:1];
    [v7 setResultType:2];
    if (*(void *)(a1 + 64)) {
      objc_msgSend(v7, "setFetchLimit:");
    }
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v29 = *(id *)(v9 + 40);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 executeFetchRequest:v7 error:&v29]);
    objc_storeStrong((id *)(v9 + 40), v29);

    if (v10 && [v10 count])
    {
      uint64_t v11 = objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [v10 count]));
      uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8LL);
      id v13 = *(void **)(v12 + 40);
      *(void *)(v12 + 40) = v11;
    }

    __int128 v27 = 0u;
    __int128 v28 = 0u;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v10 reverseObjectEnumerator]);
    id v15 = [v14 countByEnumeratingWithState:&v25 objects:v31 count:16];
    if (v15)
    {
      id v16 = v15;
      uint64_t v17 = *(void *)v26;
      do
      {
        uint64_t v18 = 0LL;
        do
        {
          if (*(void *)v26 != v17) {
            objc_enumerationMutation(v14);
          }
          __int128 v19 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
          __int128 v20 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*((void *)&v25 + 1) + 8 * (void)v18) objectForKeyedSubscript:@"uri"]);
          [v19 addObject:v20];

          uint64_t v18 = (char *)v18 + 1;
        }

        while (v16 != v18);
        id v16 = [v14 countByEnumeratingWithState:&v25 objects:v31 count:16];
      }

      while (v16);
    }
  }

  __int128 v21 = (void *)objc_opt_class(*(void *)(a1 + 32), v5);
  uint64_t v22 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v24 = *(id *)(v22 + 40);
  [v21 cleanseError:&v24];
  objc_storeStrong((id *)(v22 + 40), v24);
}

void sub_100176F04(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEB08;
  qword_1002EEB08 = (uint64_t)v1;
}

void sub_100177210(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) copyManagedObject:0];
  if (v2)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
    [v3 onMocSetMapHead:v2 inclusionResult:*(void *)(a1 + 48) inclusionError:*(void *)(a1 + 40)];

    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
    id v16 = 0LL;
    unsigned __int8 v5 = [v4 persistWithError:&v16];
    id v6 = v16;

    if ((v5 & 1) == 0)
    {
      if (qword_1002EEB10 != -1) {
        dispatch_once(&qword_1002EEB10, &stru_100285B38);
      }
      uint64_t v7 = (os_log_s *)qword_1002EEB18;
      if (os_log_type_enabled((os_log_t)qword_1002EEB18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v18 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "failed to save inclusion state for map head: %@",  buf,  0xCu);
      }

      id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
      [v8 reportCoreDataPersistEventForLocation:@"mapHeadIncusionState" underlyingError:v6];
    }

    double Current = CFAbsoluteTimeGetCurrent();
    [v2 receiptTime];
    double v11 = Current - v10;
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v2 application]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyAnalytics formatEventName:application:]( &OBJC_CLASS___TransparencyAnalytics,  "formatEventName:application:",  @"PatInclusionProofTime",  v12));

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v11));
    [v14 logMetric:v15 withName:v13];
  }
}

void sub_100177410(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEB18;
  qword_1002EEB18 = (uint64_t)v1;
}

void sub_1001776C0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEB18;
  qword_1002EEB18 = (uint64_t)v1;
}

uint64_t sub_1001776F0(id *a1, void *a2, void *a3)
{
  if (+[TransparencyAnalytics hasInternalDiagnostics]( &OBJC_CLASS___TransparencyAnalytics,  "hasInternalDiagnostics"))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([a1[4] metadata]);
    uint64_t v8 = kTransparencyResponseMetadataKeyServerHint;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint]);

    if (v9)
    {
      double v10 = (void *)objc_claimAutoreleasedReturnValue([a1[4] metadata]);
      double v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:v8]);
      [v6 setObject:v11 forKeyedSubscript:v8];
    }

    if ([v6 count]) {
      *a3 = v6;
    }
  }

  id v12 = a1[4];
  id v28 = 0LL;
  uint64_t v13 = (uint64_t)[v12 verifyWithError:&v28];
  id v14 = v28;
  if (v13 == 1)
  {
    id v15 = (void *)objc_claimAutoreleasedReturnValue([a1[4] nodeBytes]);
    id v27 = v14;
    id v16 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyGPBMessage parseFromData:error:]( &OBJC_CLASS___PerApplicationTreeNode,  "parseFromData:error:",  v15,  &v27));
    id v17 = v27;

    if (v16)
    {
      if ([v16 hasObjectMapHead]
        && (id v18 = (void *)objc_claimAutoreleasedReturnValue([v16 objectMapHead]),
            __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v18 object]),
            __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([a1[5] mapHead]),
            unsigned __int8 v21 = [v19 isEqualToData:v20],
            v20,
            v19,
            v18,
            (v21 & 1) != 0))
      {
        uint64_t v13 = 1LL;
        [a1[6] setInclusionResult:1 mapHead:a1[5] failure:0];
        id v22 = v17;
      }

      else
      {
        id v22 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  @"TransparencyErrorVerify",  -62LL,  @"per-app tree entry does not contain the SMH in the map entry"));

        if (a2 && v22) {
          *a2 = v22;
        }
        if (qword_1002EEB10 != -1) {
          dispatch_once(&qword_1002EEB10, &stru_100285BB8);
        }
        id v24 = (os_log_s *)qword_1002EEB18;
        if (os_log_type_enabled((os_log_t)qword_1002EEB18, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "per-app tree entry does not contain the SMH in the map entry",  buf,  2u);
        }

        [a1[6] setInclusionResult:0 mapHead:a1[5] failure:v22];
        uint64_t v13 = 0LL;
      }
    }

    else
    {
      id v22 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:description:",  kTransparencyErrorDecode,  -140LL,  v17,  @"failed to decode per-app tree node: %@",  v17));

      if (qword_1002EEB10 != -1) {
        dispatch_once(&qword_1002EEB10, &stru_100285B98);
      }
      __int128 v25 = (os_log_s *)qword_1002EEB18;
      if (os_log_type_enabled((os_log_t)qword_1002EEB18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v30 = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "failed to decode per-app tree node: %@",  buf,  0xCu);
      }

      uint64_t v13 = 0LL;
      if (a2 && v22)
      {
        id v22 = v22;
        uint64_t v13 = 0LL;
        *a2 = v22;
      }
    }
  }

  else
  {
    id v22 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:description:",  @"TransparencyErrorVerify",  -13LL,  v14,  @"per-app tree verification failed"));

    if (a2 && v22) {
      *a2 = v22;
    }
    if (qword_1002EEB10 != -1) {
      dispatch_once(&qword_1002EEB10, &stru_100285B78);
    }
    id v23 = (os_log_s *)qword_1002EEB18;
    if (os_log_type_enabled((os_log_t)qword_1002EEB18, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "per-app tree verification failed", buf, 2u);
    }
  }

  return v13;
}

void sub_100177B48(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEB18;
  qword_1002EEB18 = (uint64_t)v1;
}

void sub_100177B78(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEB18;
  qword_1002EEB18 = (uint64_t)v1;
}

void sub_100177BA8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEB18;
  qword_1002EEB18 = (uint64_t)v1;
}

void sub_100177BD8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEB18;
  qword_1002EEB18 = (uint64_t)v1;
}

id sub_100177EAC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = [*(id *)(a1 + 32) verifyWithError:a2];
  if (!v5
    && +[TransparencyAnalytics hasInternalDiagnostics]( &OBJC_CLASS___TransparencyAnalytics,  "hasInternalDiagnostics"))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metadata]);
    uint64_t v8 = kTransparencyResponseMetadataKeyServerHint;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint]);

    if (v9)
    {
      double v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metadata]);
      double v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:v8]);
      [v6 setObject:v11 forKeyedSubscript:v8];
    }

    if ([v6 count]) {
      *a3 = v6;
    }
  }

  return v5;
}

void sub_100177FAC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEB18;
  qword_1002EEB18 = (uint64_t)v1;
}

id sub_100178218(uint64_t a1, void *a2, void *a3)
{
  if (+[TransparencyAnalytics hasInternalDiagnostics]( &OBJC_CLASS___TransparencyAnalytics,  "hasInternalDiagnostics"))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metadata]);
    uint64_t v8 = kTransparencyResponseMetadataKeyServerHint;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint]);

    if (v9)
    {
      double v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metadata]);
      double v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:v8]);
      [v6 setObject:v11 forKeyedSubscript:v8];
    }

    if ([v6 count]) {
      *a3 = v6;
    }
  }

  id v12 = [*(id *)(a1 + 32) verifyWithError:a2];
  if (v12 != (id)1)
  {
    if (a2) {
      *a2 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:description:",  @"TransparencyErrorVerify",  -13LL,  *a2,  @"per-app tree verification failed"));
    }
    if (qword_1002EEB20 != -1) {
      dispatch_once(&qword_1002EEB20, &stru_100285C68);
    }
    uint64_t v13 = (os_log_s *)qword_1002EEB28;
    if (os_log_type_enabled((os_log_t)qword_1002EEB28, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "per-app tree verification failed", v15, 2u);
    }
  }

  return v12;
}

void sub_1001783C8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEB28;
  qword_1002EEB28 = (uint64_t)v1;
}

int64_t sub_100178E94(id a1, OptInOut *a2, OptInOut *a3)
{
  unsigned int v4 = a2;
  id v5 = a3;
  id v6 = -[OptInOut timestampMs](v4, "timestampMs");
  if (v6 <= (id)-[OptInOut timestampMs](v5, "timestampMs"))
  {
    id v8 = -[OptInOut timestampMs](v4, "timestampMs");
    if (v8 == (id)-[OptInOut timestampMs](v5, "timestampMs")) {
      int64_t v7 = 0LL;
    }
    else {
      int64_t v7 = -1LL;
    }
  }

  else
  {
    int64_t v7 = 1LL;
  }

  return v7;
}

void sub_100179C98(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEB38;
  qword_1002EEB38 = (uint64_t)v1;
}

void sub_10017A048( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10017A06C(uint64_t a1, void *a2)
{
  id v31 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v31)
  {
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v31 ktApplicationToKTRegStatus]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained application]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v5]);

    if (!v6)
    {
      [WeakRetained setCheckIDSError:2];
LABEL_22:
      id v14 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
      id v30 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
      [v14 addOperation:v30];

      goto LABEL_23;
    }

    uint64_t v7 = objc_claimAutoreleasedReturnValue([v6 registeredKTData]);
    uint64_t v8 = objc_claimAutoreleasedReturnValue([v6 unregisteredKTData]);
    uint64_t v9 = (void *)v8;
    if (!(v7 | v8))
    {
      double v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained idsRegistrationInterface]);
      [v10 triggerRegistrationDataNeedsUpdate:@"reg"];

LABEL_5:
      double v11 = WeakRetained;
      uint64_t v12 = 2LL;
LABEL_20:
      [v11 setCheckIDSError:v12];
      goto LABEL_21;
    }

    if (v8)
    {
      if (![WeakRetained hasRecentlyDoneHSA2Upsell])
      {
        double v11 = WeakRetained;
        uint64_t v12 = 0LL;
        goto LABEL_20;
      }

      id v15 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained idsRegistrationInterface]);
      [v15 triggerRegistrationDataNeedsUpdate:@"hsa2upsell"];
    }

    else
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue([(id)v7 ktDataForRegistration]);

      if (!v16) {
        goto LABEL_5;
      }
      id v17 = (void *)objc_claimAutoreleasedReturnValue([(id)v7 ktPublicAccountKey]);

      if (!v17)
      {
        id v28 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained idsRegistrationInterface]);
        [v28 triggerRegistrationDataNeedsUpdate:@"publickey-missing"];

        double v11 = WeakRetained;
        uint64_t v12 = 6LL;
        goto LABEL_20;
      }

      id v18 = (void *)objc_claimAutoreleasedReturnValue([(id)v7 ktPublicAccountKey]);
      unsigned __int8 v19 = [v18 isEqual:*(void *)(a1 + 32)];

      if ((v19 & 1) == 0)
      {
        id v29 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained idsRegistrationInterface]);
        [v29 triggerRegistrationDataNeedsUpdate:@"publickey"];

        double v11 = WeakRetained;
        uint64_t v12 = 5LL;
        goto LABEL_20;
      }

      unsigned __int8 v21 = (void *)objc_opt_class(WeakRetained, v20);
      id v22 = (void *)objc_claimAutoreleasedReturnValue([(id)v7 ktPublicAccountKey]);
      id v23 = (void *)objc_claimAutoreleasedReturnValue([(id)v7 ktDataForRegistration]);
      id v24 = (void *)objc_claimAutoreleasedReturnValue([(id)v7 ktDataSignature]);
      unsigned __int8 v25 = [v21 checkPCSKTSignature:v22 data:v23 signature:v24];

      __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained idsRegistrationInterface]);
      id v27 = v26;
      if ((v25 & 1) == 0)
      {
        [v26 triggerRegistrationDataNeedsUpdate:@"signature"];

        double v11 = WeakRetained;
        uint64_t v12 = 4LL;
        goto LABEL_20;
      }

      [v26 notifyIDSRegistrationCorrect];

      [WeakRetained setCheckIDSResult:1];
    }

void sub_10017B8E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

uint64_t sub_10017B97C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10017B98C(uint64_t a1)
{
}

void sub_10017B994(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEB48;
  qword_1002EEB48 = (uint64_t)v1;
}

void sub_10017B9C4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEB48;
  qword_1002EEB48 = (uint64_t)v1;
}

void sub_10017B9F4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEB48;
  qword_1002EEB48 = (uint64_t)v1;
}

void sub_10017BA24(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEB48;
  qword_1002EEB48 = (uint64_t)v1;
}

void sub_10017BA54(uint64_t a1, void *a2)
{
  if (a2) {
    id v3 = [a2 mutableCopy];
  }
  else {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  }
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_10017BAA0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEB48;
  qword_1002EEB48 = (uint64_t)v1;
}

void sub_10017BAD0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEB48;
  qword_1002EEB48 = (uint64_t)v1;
}

void sub_10017BB00(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEB48;
  qword_1002EEB48 = (uint64_t)v1;
}

void sub_10017BB30(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEB48;
  qword_1002EEB48 = (uint64_t)v1;
}

void sub_10017BB60(uint64_t a1, void *a2)
{
  id v4 = a2;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
}

void sub_10017BE20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10017BE44(uint64_t a1, void *a2, void *a3)
{
  id v6 = a3;
  if (v6)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 0;
  }

  else
  {
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    obuint64_t j = (id)objc_claimAutoreleasedReturnValue([a2 allValues]);
    id v7 = [obj countByEnumeratingWithState:&v27 objects:v31 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v28;
      uint64_t v24 = kTransparencyErrorInternal;
      while (2)
      {
        for (unint64_t i = 0LL; i != v8; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v28 != v9) {
            objc_enumerationMutation(obj);
          }
          double v11 = *(void **)(*((void *)&v27 + 1) + 8LL * (void)i);
          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountKeyService]);
          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 application]);
          id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 accountKeyService:v13]);

          if (!v14)
          {
            *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 0;
            goto LABEL_20;
          }

          id v26 = 0LL;
          id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 publicPublicKey:&v26]);
          id v16 = v26;
          if (v15)
          {
            id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountKeyService]);
            id v18 = (void *)objc_claimAutoreleasedReturnValue([v11 validateSignature:v17 withPublicKey:v15]);

            if (v18)
            {
              *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 0;
              unsigned __int8 v19 = (void *)objc_claimAutoreleasedReturnValue([v11 application]);
              uint64_t v20 = objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:errorLevel:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:errorLevel:underlyingError:description:",  v24,  -349LL,  3LL,  0LL,  @"%@ failed with %@",  v19,  v18));
              uint64_t v21 = *(void *)(*(void *)(a1 + 40) + 8LL);
              id v22 = *(void **)(v21 + 40);
              *(void *)(v21 + 40) = v20;

              int v23 = 1;
            }

            else
            {
              int v23 = 0;
            }
          }

          else
          {
            *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 0;
            int v23 = 1;
          }

          if (v23) {
            goto LABEL_20;
          }
        }

        id v8 = [obj countByEnumeratingWithState:&v27 objects:v31 count:16];
        if (v8) {
          continue;
        }
        break;
      }
    }

void sub_10017C46C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_10017C488(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _onqueueRecheck];
}

void sub_10017C4B4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _onqueueRecheck];
}

uint64_t sub_10017C5C0(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 8LL);
  return result;
}

void sub_10017C69C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10017C6B4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10017C6C4(uint64_t a1)
{
}

void sub_10017C6CC(uint64_t a1)
{
  if ([*(id *)(a1 + 32) queueIsLocked])
  {
    uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastUnlockedTime]);
    uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v2;
  }

  else
  {
    uint64_t v5 = objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;

    [*(id *)(a1 + 32) setLastUnlockedTime:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
  }

void sub_10017C8FC(id a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)os_log_t v1 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "Keybag unlocked",  v1,  2u);
  }

id sub_10017CBB0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) lockStateChangeNotification:*(unsigned __int8 *)(a1 + 40)];
}

id sub_10017CC2C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onqueueRecheck];
}

id sub_10017CDF0(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) queueIsLocked];
  return result;
}

void sub_10017CEC0(uint64_t a1)
{
  char v2 = [*(id *)(a1 + 32) queueIsLocked] ^ 1;
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(21LL, 0LL);
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _OWORD v5[2] = sub_10017CF6C;
  void v5[3] = &unk_100285EB0;
  id v6 = *(id *)(a1 + 40);
  char v7 = v2;
  dispatch_async(v4, v5);
}

id sub_10017CF6C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) lockStateChangeNotification:*(unsigned __int8 *)(a1 + 40)];
}

void sub_10017CFBC(id a1)
{
  os_log_t v1 = objc_alloc(&OBJC_CLASS___KTLockStateTracker);
  id v4 = objc_alloc_init(&OBJC_CLASS___KTActualLockStateProvider);
  char v2 = -[KTLockStateTracker initWithProvider:](v1, "initWithProvider:", v4);
  uint64_t v3 = (void *)qword_1002EEB58;
  qword_1002EEB58 = (uint64_t)v2;
}

void sub_10017D53C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  char v2 = (void *)qword_1002EEB70;
  qword_1002EEB70 = (uint64_t)v1;
}

void sub_10017D56C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  char v2 = (void *)qword_1002EEB70;
  qword_1002EEB70 = (uint64_t)v1;
}

void sub_10017DB38(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  char v2 = (void *)qword_1002EEB70;
  qword_1002EEB70 = (uint64_t)v1;
}

void sub_10017E160(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  char v2 = (void *)qword_1002EEB80;
  qword_1002EEB80 = (uint64_t)v1;
}

void sub_10017E190(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  char v2 = (void *)qword_1002EEB80;
  qword_1002EEB80 = (uint64_t)v1;
}

void sub_10017E7E8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  char v2 = (void *)qword_1002EEB90;
  qword_1002EEB90 = (uint64_t)v1;
}

void sub_10017E818(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  char v2 = (void *)qword_1002EEB90;
  qword_1002EEB90 = (uint64_t)v1;
}

void sub_10017E848(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  char v2 = (void *)qword_1002EEB90;
  qword_1002EEB90 = (uint64_t)v1;
}

void sub_10017ED00(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  char v2 = (void *)qword_1002EEB90;
  qword_1002EEB90 = (uint64_t)v1;
}

void sub_10017EE30(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  char v2 = (void *)qword_1002EEB90;
  qword_1002EEB90 = (uint64_t)v1;
}

void sub_10017F050(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  char v2 = (void *)qword_1002EEBA0;
  qword_1002EEBA0 = (uint64_t)v1;
}

void sub_100180150(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  char v2 = (void *)qword_1002EEBB0;
  qword_1002EEBB0 = (uint64_t)v1;
}

void sub_100180478(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  char v2 = (void *)qword_1002EEBB0;
  qword_1002EEBB0 = (uint64_t)v1;
}

void sub_1001804A8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  char v2 = (void *)qword_1002EEBB0;
  qword_1002EEBB0 = (uint64_t)v1;
}

uint64_t sub_100180650(uint64_t a1, void *a2)
{
  if (![*(id *)(a1 + 32) hasSignature]
    || (id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signature]),
        v4,
        !v4))
  {
    uint64_t v30 = -3LL;
    if (!a2) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }

  uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mutation]);
  if (!v5
    || (id v6 = (void *)v5,
        char v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mutation]),
        id v8 = [v7 length],
        v7,
        v6,
        !v8))
  {
    uint64_t v30 = -4LL;
    if (!a2) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signature]);
  uint64_t v10 = objc_claimAutoreleasedReturnValue([v9 signature]);
  if (!v10)
  {
    uint64_t v30 = -6LL;
    goto LABEL_26;
  }

  double v11 = (void *)v10;
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signature]);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 signature]);
  id v14 = [v13 length];

  if (!v14)
  {
    uint64_t v30 = -6LL;
    if (!a2) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signature]);
  uint64_t v15 = objc_claimAutoreleasedReturnValue([v9 signingKeySpkihash]);
  if (!v15)
  {
    uint64_t v30 = -5LL;
LABEL_26:

    if (!a2) {
      goto LABEL_28;
    }
LABEL_27:
    *a2 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorDecode,  v30,  @"SMT missing data required for verification"));
    goto LABEL_28;
  }

  id v16 = (void *)v15;
  id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signature]);
  id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 signingKeySpkihash]);
  id v19 = [v18 length];

  if (v19)
  {
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) verifier]);
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mutation]);
    id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signature]);
    int v23 = (void *)objc_claimAutoreleasedReturnValue([v22 signature]);
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signature]);
    unsigned __int8 v25 = (void *)objc_claimAutoreleasedReturnValue([v24 signingKeySpkihash]);
    id v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signature]);
    id v33 = 0LL;
    unsigned int v27 = objc_msgSend( v20,  "verifyMessage:signature:spkiHash:algorithm:error:",  v21,  v23,  v25,  +[TransparencySignatureVerifier secKeyAlgorithmForProtoAlgorithm:]( TransparencySignatureVerifier,  "secKeyAlgorithmForProtoAlgorithm:",  objc_msgSend(v26, "algorithm")),  &v33);
    id v28 = v33;

    uint64_t v29 = v27;
    if (+[TransparencyError hasUnknownSPKIHashError:]( &OBJC_CLASS___TransparencyError,  "hasUnknownSPKIHashError:",  v28)) {
      uint64_t v29 = 2LL;
    }
    if (a2 && v28) {
      *a2 = v28;
    }
    if (a2 && v27 != 1) {
      *a2 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:description:",  @"TransparencyErrorVerify",  -137LL,  *a2));
    }

    return v29;
  }

  uint64_t v30 = -5LL;
  if (a2) {
    goto LABEL_27;
  }
LABEL_28:
  if (qword_1002EEBA8 != -1) {
    dispatch_once(&qword_1002EEBA8, &stru_1002860B0);
  }
  id v31 = (os_log_s *)qword_1002EEBB0;
  if (os_log_type_enabled((os_log_t)qword_1002EEBB0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_ERROR,  "SMT missing data required for verification",  buf,  2u);
  }

  return 0LL;
}

void sub_1001809D0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  char v2 = (void *)qword_1002EEBB0;
  qword_1002EEBB0 = (uint64_t)v1;
}

void sub_100180E9C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  char v2 = (void *)qword_1002EEBC0;
  qword_1002EEBC0 = (uint64_t)v1;
}

void sub_100180ECC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  char v2 = (void *)qword_1002EEBC0;
  qword_1002EEBC0 = (uint64_t)v1;
}

void sub_100180EFC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  char v2 = (void *)qword_1002EEBC0;
  qword_1002EEBC0 = (uint64_t)v1;
}

void sub_10018121C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  char v2 = (void *)qword_1002EEBC0;
  qword_1002EEBC0 = (uint64_t)v1;
}

void sub_10018124C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  char v2 = (void *)qword_1002EEBC0;
  qword_1002EEBC0 = (uint64_t)v1;
}

void sub_100181508(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  char v2 = (void *)qword_1002EEBC0;
  qword_1002EEBC0 = (uint64_t)v1;
}

void sub_100181538(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  char v2 = (void *)qword_1002EEBC0;
  qword_1002EEBC0 = (uint64_t)v1;
}

void sub_1001817F4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  char v2 = (void *)qword_1002EEBC0;
  qword_1002EEBC0 = (uint64_t)v1;
}

void sub_100181824(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  char v2 = (void *)qword_1002EEBC0;
  qword_1002EEBC0 = (uint64_t)v1;
}

void sub_100181AEC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  char v2 = (void *)qword_1002EEBC0;
  qword_1002EEBC0 = (uint64_t)v1;
}

void sub_100181B1C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  char v2 = (void *)qword_1002EEBC0;
  qword_1002EEBC0 = (uint64_t)v1;
}

void sub_100181FB4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  char v2 = (void *)qword_1002EEBC0;
  qword_1002EEBC0 = (uint64_t)v1;
}

void sub_100182284(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  char v2 = (void *)qword_1002EEBC0;
  qword_1002EEBC0 = (uint64_t)v1;
}

void sub_1001824B4(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  char v2 = (void *)qword_1002EEBD0;
  qword_1002EEBD0 = v1;

  [(id)qword_1002EEBD0 setObject:@"com.apple.KTAccountKey" forKeyedSubscript:kKTApplicationIdentifierIDS];
  [(id)qword_1002EEBD0 setObject:@"com.apple.KTAccountKey" forKeyedSubscript:kKTApplicationIdentifierIDSMultiplex];
  [(id)qword_1002EEBD0 setObject:@"com.apple.KTAccountKey" forKeyedSubscript:kKTApplicationIdentifierIDSFaceTime];
  [(id)qword_1002EEBD0 setObject:@"com.apple.KTAccountKey" forKeyedSubscript:kKTApplicationIdentifierCloudKit];
  [(id)qword_1002EEBD0 setObject:@"com.apple.KTAccountKey" forKeyedSubscript:kKTApplicationIdentifierTLT];
}

void sub_100182720(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  char v2 = (void *)qword_1002EEBE0;
  qword_1002EEBE0 = (uint64_t)v1;
}

void sub_100182750(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  char v2 = (void *)qword_1002EEBE0;
  qword_1002EEBE0 = (uint64_t)v1;
}

uint64_t sub_1001829D0(uint64_t a1)
{
  dispatch_queue_attr_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v3 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v2);
  dispatch_queue_t v4 = dispatch_queue_create("KTAccountKeyServer", v3);
  uint64_t v5 = (void *)qword_1002EEC00;
  qword_1002EEC00 = (uint64_t)v4;

  uint64_t v6 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  char v7 = (void *)qword_1002EEBF0;
  qword_1002EEBF0 = v6;

  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_100182AA4;
  handler[3] = &unk_100286308;
  handler[4] = *(void *)(a1 + 32);
  return notify_register_dispatch( "com.apple.security.view-change.Manatee",  (int *)&unk_1002EEC08,  (dispatch_queue_t)qword_1002EEC00,  handler);
}

id sub_100182AA4(uint64_t a1)
{
  if (qword_1002EEBD8 != -1) {
    dispatch_once(&qword_1002EEBD8, &stru_1002862E8);
  }
  dispatch_queue_attr_t v2 = (os_log_s *)qword_1002EEBE0;
  if (os_log_type_enabled((os_log_t)qword_1002EEBE0, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)dispatch_queue_t v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "got notice that view changed; clearing cached account key",
      v4,
      2u);
  }

  return [*(id *)(a1 + 32) clearCachedPCSIdentities];
}

void sub_100182B38(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEBE0;
  qword_1002EEBE0 = (uint64_t)v1;
}

void sub_100182C88(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEBE0;
  qword_1002EEBE0 = (uint64_t)v1;
}

void sub_100182E34( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

id sub_100182E50(uint64_t a1)
{
  dispatch_queue_attr_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  dispatch_queue_t v4 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", PCSReportManateeStatus(@"Manatee"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  [v2 setObject:v5 forKeyedSubscript:@"manateeStatus"];

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained numberPropertyForKey:@"KTAccountKeyRetry"]);
  [v2 setObject:v6 forKeyedSubscript:@"KTAccountKeyRetry"];

  char v7 = *(void **)(a1 + 32);
  id v14 = _NSConcreteStackBlock;
  uint64_t v15 = 3221225472LL;
  id v16 = sub_100182FC0;
  id v17 = &unk_100286350;
  id v8 = v2;
  id v18 = v8;
  id v19 = WeakRetained;
  id v9 = WeakRetained;
  [v7 enumerateObjectsUsingBlock:&v14];
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[KTKVSStore strictStore](&OBJC_CLASS___KTKVSStore, "strictStore", v14, v15, v16, v17));
  double v11 = (void *)objc_claimAutoreleasedReturnValue([v10 accountMetricID]);

  [v9 setMetricsAccountID:v11];
  id v12 = v8;

  return v12;
}

void sub_100182FC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_queue_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"KTAccountKey-%@",  v3));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[KTAccountKeyServer sharedKeyServiceForApplication:]( &OBJC_CLASS___KTAccountKeyServer,  "sharedKeyServiceForApplication:",  v3));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v5 haveIdentity]));
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v4];

  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  char v7 = (void *)objc_claimAutoreleasedReturnValue( +[KTEnrollmentSignatureSupport enrollementLoggingKeys:]( &OBJC_CLASS___KTEnrollmentSignatureSupport,  "enrollementLoggingKeys:",  v3));
  id v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v15;
    do
    {
      for (unint64_t i = 0LL; i != v9; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void *)(*((void *)&v14 + 1) + 8LL * (void)i);
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) numberPropertyForKey:v12]);
        [*(id *)(a1 + 32) setObject:v13 forKeyedSubscript:v12];
      }

      id v9 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }

    while (v9);
  }
}

void sub_100183370(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEBE0;
  qword_1002EEBE0 = (uint64_t)v1;
}

void sub_1001833A0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEBE0;
  qword_1002EEBE0 = (uint64_t)v1;
}

void sub_100183578(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEBE0;
  qword_1002EEBE0 = (uint64_t)v1;
}

void sub_10018372C(_Unwind_Exception *a1)
{
}

id sub_100183740(uint64_t a1)
{
  return [*(id *)(a1 + 32) getPCSIdentity:*(void *)(a1 + 40)];
}

void sub_10018374C(uint64_t a1)
{
  dispatch_queue_attr_t v2 = *(void **)(a1 + 32);
  id v14 = 0LL;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 pcsOptions:&v14]);
  id v4 = v14;
  id v5 = [v3 mutableCopy];

  if (v5)
  {
    if (*(_BYTE *)(a1 + 56)) {
      [v5 setObject:&__kCFBooleanTrue forKeyedSubscript:kPCSSetupRollIdentity];
    }
    [v5 setObject:&__kCFBooleanTrue forKeyedSubscript:kPCSSetupSyncIdentity];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) creationGroup]);
    objc_sync_enter(v6);
    char v7 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) creationGroup]);
    dispatch_group_enter(v7);

    [*(id *)(a1 + 32) setOutstandingCreationSignal:1];
    objc_sync_exit(v6);

    id v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 48);
    id v10 = [v8 service];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    _BYTE v12[2] = sub_1001838E0;
    v12[3] = &unk_100286420;
    double v11 = *(void **)(a1 + 40);
    v12[4] = *(void *)(a1 + 32);
    id v13 = v11;
    [v8 wrapperPCSIdentitySetCreateManatee:v9 service:v10 options:v5 block:v12];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_1001838CC(_Unwind_Exception *a1)
{
}

void sub_1001838E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  char v7 = objc_autoreleasePoolPush();
  if (v5)
  {
    id v8 = (void *)PCSIdentityCopyPublicKeyInfo([v5 identity]);
    if (qword_1002EEBD8 != -1) {
      dispatch_once(&qword_1002EEBD8, &stru_1002863F8);
    }
    uint64_t v9 = (void *)qword_1002EEBE0;
    if (os_log_type_enabled((os_log_t)qword_1002EEBE0, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = v9;
      double v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "kt_hexString"));
      int v14 = 138412290;
      __int128 v15 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "created new account key identity: %@",  (uint8_t *)&v14,  0xCu);
    }

    [*(id *)(a1 + 32) cachePCSIdentity:v5];
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) creationGroup]);
  objc_sync_enter(v12);
  id v13 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) creationGroup]);
  dispatch_group_leave(v13);

  [*(id *)(a1 + 32) setOutstandingCreationSignal:0];
  objc_sync_exit(v12);

  objc_autoreleasePoolPop(v7);
}

void sub_100183A88(_Unwind_Exception *a1)
{
}

void sub_100183AA4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEBE0;
  qword_1002EEBE0 = (uint64_t)v1;
}

void sub_100183B6C(uint64_t a1, const void *a2, void *a3)
{
  id v5 = a3;
  CFTypeRef cf = 0LL;
  if (a2)
  {
    uint64_t v6 = PCSIdentitySetCopyCurrentIdentityPointer(*(void *)(a1 + 48), [*(id *)(a1 + 32) service], &cf);
    char v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    id v8 = v7;
    if (v7 && [v7 identity] && CFEqual(a2, objc_msgSend(v8, "identity")))
    {
      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    }

    else
    {
      uint64_t v9 = *(void *)(a1 + 40);
      id v10 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:errorLevel:underlyingError:description:]( TransparencyError,  "errorWithDomain:code:errorLevel:underlyingError:description:",  kTransparencyErrorInternal,  -352,  4,  cf,  @"Identity created %@ is not current %@",  a2,  [v8 identity]));
      (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0LL, v10);

      CFTypeRef v11 = cf;
      if (cf)
      {
        CFTypeRef cf = 0LL;
        CFRelease(v11);
      }
    }
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    id v8 = 0LL;
  }
}

void sub_10018413C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEBE0;
  qword_1002EEBE0 = (uint64_t)v1;
}

void sub_10018416C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEBE0;
  qword_1002EEBE0 = (uint64_t)v1;
}

void sub_10018419C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEBE0;
  qword_1002EEBE0 = (uint64_t)v1;
}

void sub_1001842E4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEBE0;
  qword_1002EEBE0 = (uint64_t)v1;
}

void sub_1001844E8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEBE0;
  qword_1002EEBE0 = (uint64_t)v1;
}

void sub_1001846B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1001846C8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEBE0;
  qword_1002EEBE0 = (uint64_t)v1;
}

void sub_1001846F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    CFRetain(v5);
    char v7 = (void *)PCSIdentityCopyPublicKeyInfo(v5);
    if (qword_1002EEBD8 != -1) {
      dispatch_once(&qword_1002EEBD8, &stru_100286550);
    }
    id v8 = (void *)qword_1002EEBE0;
    if (os_log_type_enabled((os_log_t)qword_1002EEBE0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = v8;
      id v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "kt_hexString"));
      *(_DWORD *)buf = 138412290;
      id v20 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "rolled account key identity to %@", buf, 0xCu);
    }

    CFTypeRef v11 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    [v11 logSuccessForEventNamed:@"KTAccountKeyRoll"];

    id v18 = 0LL;
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[KTAccountKeyServer publicKeyInfoFromIdentity:error:]( &OBJC_CLASS___KTAccountKeyServer,  "publicKeyInfoFromIdentity:error:",  v5,  &v18));
    id v13 = v18;

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
    CFRelease(v5);
  }

  else
  {
    if (qword_1002EEBD8 != -1) {
      dispatch_once(&qword_1002EEBD8, &stru_100286570);
    }
    int v14 = (os_log_s *)qword_1002EEBE0;
    if (os_log_type_enabled((os_log_t)qword_1002EEBE0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v20 = v6;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "account key roll failed: %@", buf, 0xCu);
    }

    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    [v15 logResultForEvent:@"KTAccountKeyRoll" hardFailure:1 result:v6];

    id v13 = v6;
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8LL);
  __int128 v17 = *(const void **)(v16 + 24);
  if (v17)
  {
    *(void *)(v16 + 24) = 0LL;
    CFRelease(v17);
  }
}

void sub_100184970(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEBE0;
  qword_1002EEBE0 = (uint64_t)v1;
}

void sub_1001849A0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEBE0;
  qword_1002EEBE0 = (uint64_t)v1;
}

void sub_100184C04(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEBE0;
  qword_1002EEBE0 = (uint64_t)v1;
}

void sub_100184CD8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v26 = 0LL;
    char v7 = (void *)objc_claimAutoreleasedReturnValue( +[KTAccountKeyServer publicKeyInfoFromIdentity:error:]( KTAccountKeyServer,  "publicKeyInfoFromIdentity:error:",  [v5 identity],  &v26));
    id v8 = v26;
    if (!v7)
    {
      id v18 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
      [v18 logResultForEvent:@"KTAccountKeySign" hardFailure:1 result:v8];

      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
LABEL_26:

      goto LABEL_27;
    }

    uint64_t v25 = 0LL;
    if (*(void *)(a1 + 32))
    {
      uint64_t v9 = (void *)PCSIdentityCreateSignature([v5 identity], 1, *(void *)(a1 + 32), &v25);
      if (!v9 || v25)
      {
        if (qword_1002EEBD8 != -1) {
          dispatch_once(&qword_1002EEBD8, &stru_1002865F8);
        }
        id v22 = (os_log_s *)qword_1002EEBE0;
        if (os_log_type_enabled((os_log_t)qword_1002EEBE0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v28 = v25;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "failed to sign data with account key: %@",  buf,  0xCu);
        }

        uint64_t v23 = v25;

        if (!v23) {
          uint64_t v23 = objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorInternal,  -266LL,  @"failed to sign data with account key"));
        }
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger", v25));
        [v24 logResultForEvent:@"KTAccountKeySign" hardFailure:1 result:v23];

        (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
        id v8 = (id)v23;
        goto LABEL_25;
      }

      if (qword_1002EEBD8 != -1) {
        dispatch_once(&qword_1002EEBD8, &stru_100286618);
      }
      id v10 = (void *)qword_1002EEBE0;
      if (os_log_type_enabled((os_log_t)qword_1002EEBE0, OS_LOG_TYPE_DEFAULT))
      {
        CFTypeRef v11 = *(void **)(a1 + 32);
        uint64_t v12 = v10;
        id v13 = [v11 length];
        int v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "kt_hexString"));
        __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v5 currentItemPointerModificationTime]);
        *(_DWORD *)buf = 134218498;
        uint64_t v28 = (uint64_t)v13;
        __int16 v29 = 2114;
        uint64_t v30 = v14;
        __int16 v31 = 2114;
        id v32 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Successfully signed %lu bytes with account key: %{public}@ CIPmTime: %{public}@",  buf,  0x20u);
      }
    }

    else
    {
      uint64_t v9 = 0LL;
    }

    id v19 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger", v25));
    [v19 logSuccessForEventNamed:@"KTAccountKeySign"];

    uint64_t v20 = *(void *)(a1 + 40);
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v5 currentItemPointerModificationTime]);
    (*(void (**)(uint64_t, void *, void *, void *, void))(v20 + 16))(v20, v7, v9, v21, 0LL);

LABEL_25:
    goto LABEL_26;
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
  [v16 logResultForEvent:@"KTAccountKeySign" hardFailure:1 result:v6];

  if (qword_1002EEBD8 != -1) {
    dispatch_once(&qword_1002EEBD8, &stru_1002865D8);
  }
  __int128 v17 = (os_log_s *)qword_1002EEBE0;
  if (os_log_type_enabled((os_log_t)qword_1002EEBE0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v28 = (uint64_t)v6;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "failed to get PCS identity: %@", buf, 0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
LABEL_27:
}

void sub_100185114(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEBE0;
  qword_1002EEBE0 = (uint64_t)v1;
}

void sub_100185144(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEBE0;
  qword_1002EEBE0 = (uint64_t)v1;
}

void sub_100185174(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEBE0;
  qword_1002EEBE0 = (uint64_t)v1;
}

void sub_100185294( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1001852B8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001852C8(uint64_t a1)
{
}

void sub_1001852D0(uint64_t a1, void *a2, void *a3)
{
  id v6 = a3;
  uint64_t v7 = v6;
  if (!a2 || v6)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a3);
  }

  else
  {
    id v8 = [a2 identity];
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8LL);
    obuint64_t j = *(id *)(v9 + 40);
    uint64_t v10 = objc_claimAutoreleasedReturnValue( +[KTAccountKeyServer publicKeyInfoFromIdentity:error:]( &OBJC_CLASS___KTAccountKeyServer,  "publicKeyInfoFromIdentity:error:",  v8,  &obj));
    objc_storeStrong((id *)(v9 + 40), obj);
    uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v10;
  }
}

void sub_100185620(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEBE0;
  qword_1002EEBE0 = (uint64_t)v1;
}

void sub_100185650(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEBE0;
  qword_1002EEBE0 = (uint64_t)v1;
}

void sub_100185E50( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
}

void sub_100185E88(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEC18;
  qword_1002EEC18 = (uint64_t)v1;
}

void sub_100185EB8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEC18;
  qword_1002EEC18 = (uint64_t)v1;
}

uint64_t sub_100185EE8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100185EF8(uint64_t a1)
{
}

void sub_100185F00(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_100185F54(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
}

void sub_100186264(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEC28;
  qword_1002EEC28 = (uint64_t)v1;
}

void sub_100186294(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEC28;
  qword_1002EEC28 = (uint64_t)v1;
}

void sub_1001864D0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = objc_autoreleasePoolPush();
  if (qword_1002EEC20 != -1) {
    dispatch_once(&qword_1002EEC20, &stru_100286770);
  }
  uint64_t v7 = (void *)qword_1002EEC28;
  if (os_log_type_enabled((os_log_t)qword_1002EEC28, OS_LOG_TYPE_INFO))
  {
    id v8 = *(void **)(a1 + 32);
    uint64_t v9 = v7;
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 dsid]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) altDSID]);
    int v12 = 138413058;
    id v13 = v10;
    __int16 v14 = 2112;
    __int128 v15 = v11;
    __int16 v16 = 2112;
    uint64_t v17 = a2;
    __int16 v18 = 2112;
    id v19 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "PCSIdentitySetCreateManatee: %@[%@] %@: %@",  (uint8_t *)&v12,  0x2Au);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  objc_autoreleasePoolPop(v6);
}

void sub_100186634(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEC28;
  qword_1002EEC28 = (uint64_t)v1;
}

void sub_100186D54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_100186D74(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100186D84(uint64_t a1)
{
}

void sub_100186D8C(uint64_t a1)
{
  dispatch_queue_attr_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) applicationID]);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(*(void *)(a1 + 64) + 8LL);
  obuint64_t j = *(id *)(v6 + 40);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v2 createManagedObject:v3 uri:v4 serverHint:v5 error:&obj]);
  objc_storeStrong((id *)(v6 + 40), obj);

  if (v7)
  {
    [v7 setSignatureResult:1];
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dataStore]);
    [v8 saveAndRefaultObject:v7];
  }

  uint64_t v9 = objc_claimAutoreleasedReturnValue( +[SecXPCHelper cleanseErrorForXPC:]( &OBJC_CLASS___SecXPCHelper,  "cleanseErrorForXPC:",  *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL)));
  uint64_t v10 = *(void *)(*(void *)(a1 + 64) + 8LL);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;
}

void sub_100187970(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEC38;
  qword_1002EEC38 = (uint64_t)v1;
}

void sub_1001879A0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEC38;
  qword_1002EEC38 = (uint64_t)v1;
}

void sub_100188034(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEC38;
  qword_1002EEC38 = (uint64_t)v1;
}

void sub_100188064(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEC38;
  qword_1002EEC38 = (uint64_t)v1;
}

void sub_1001889D4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEC38;
  qword_1002EEC38 = (uint64_t)v1;
}

void sub_100189314(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEC38;
  qword_1002EEC38 = (uint64_t)v1;
}

void sub_100189344(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEC38;
  qword_1002EEC38 = (uint64_t)v1;
}

void sub_100189374(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEC38;
  qword_1002EEC38 = (uint64_t)v1;
}

void sub_1001893A4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEC38;
  qword_1002EEC38 = (uint64_t)v1;
}

void sub_1001893D4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEC38;
  qword_1002EEC38 = (uint64_t)v1;
}

void sub_100189A50(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEC48;
  qword_1002EEC48 = (uint64_t)v1;
}

void sub_10018A174(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEC48;
  qword_1002EEC48 = (uint64_t)v1;
}

void sub_10018A360(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEC48;
  qword_1002EEC48 = (uint64_t)v1;
}

void sub_10018A534(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEC48;
  qword_1002EEC48 = (uint64_t)v1;
}

void sub_10018AB40( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10018AB64(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (v6)
  {
    if (qword_1002EEC50 != -1) {
      dispatch_once(&qword_1002EEC50, &stru_1002869A0);
    }
    id v8 = (os_log_s *)qword_1002EEC58;
    if (os_log_type_enabled((os_log_t)qword_1002EEC58, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      id v27 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "fetchSelfVerificationInfo: error: %{public}@",  buf,  0xCu);
    }

    [WeakRetained setError:v6];
    id v9 = (id)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
    [v9 addOperation:v10];
  }

  else
  {
    if (qword_1002EEC50 != -1) {
      dispatch_once(&qword_1002EEC50, &stru_1002869C0);
    }
    uint64_t v11 = (void *)qword_1002EEC58;
    if (os_log_type_enabled((os_log_t)qword_1002EEC58, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = v11;
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v5 selfDeviceID]);
      __int16 v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "kt_hexString"));
      *(_DWORD *)buf = 138543362;
      id v27 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "fetchSelfVerificationInfo: selfInfo: deviceID: %{public}@",  buf,  0xCu);
    }

    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v5 uriToServerLoggableDatas]);
    [v15 enumerateKeysAndObjectsUsingBlock:&stru_100286A00];

    __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 smDataStore]);
    __int16 v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v17 setSettingsDate:@"KTIDSLastSelfFetch" date:v18];

    id v19 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 smDataStore]);
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained application]);
    id v25 = 0LL;
    unsigned __int8 v22 = [v20 storeSelfVerificationInfo:v5 application:v21 error:&v25];
    id v9 = v25;

    if ((v22 & 1) != 0)
    {
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained intendedState]);
      [WeakRetained setNextState:v23];
    }

    else
    {
      [WeakRetained setError:v9];
    }

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
    [v10 addOperation:v24];
  }
}

void sub_10018AE7C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEC58;
  qword_1002EEC58 = (uint64_t)v1;
}

void sub_10018AEAC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEC58;
  qword_1002EEC58 = (uint64_t)v1;
}

void sub_10018AEDC(id a1, NSString *a2, KTVerificationInfo *a3, BOOL *a4)
{
  id v5 = a2;
  id v6 = a3;
  if (qword_1002EEC50 != -1) {
    dispatch_once(&qword_1002EEC50, &stru_100286A20);
  }
  uint64_t v7 = (void *)qword_1002EEC58;
  if (os_log_type_enabled((os_log_t)qword_1002EEC58, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = v7;
    id v9 = (void *)objc_claimAutoreleasedReturnValue(-[KTVerificationInfo accountKey](v6, "accountKey"));
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "kt_hexString"));
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(-[KTVerificationInfo idsResponseTime](v6, "idsResponseTime"));
    int v12 = (void *)objc_claimAutoreleasedReturnValue(-[KTVerificationInfo serverLoggableDatas](v6, "serverLoggableDatas"));
    int v13 = 141559042;
    uint64_t v14 = 1752392040LL;
    __int16 v15 = 2112;
    __int16 v16 = v5;
    __int16 v17 = 2114;
    __int16 v18 = v10;
    __int16 v19 = 2112;
    uint64_t v20 = v11;
    __int16 v21 = 1024;
    unsigned int v22 = [v12 count];
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "fetchSelfVerificationInfo: uri: %{mask.hash}@ public: %{public}@ idsResp: %@ devices: %d",  (uint8_t *)&v13,  0x30u);
  }
}

void sub_10018B060(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEC58;
  qword_1002EEC58 = (uint64_t)v1;
}

void sub_10018B4E4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEC68;
  qword_1002EEC68 = (uint64_t)v1;
}

void sub_10018B6E8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEC68;
  qword_1002EEC68 = (uint64_t)v1;
}

void sub_10018B718(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_1002EEC60 != -1) {
    dispatch_once(&qword_1002EEC60, &stru_100286AC8);
  }
  uint64_t v4 = (os_log_s *)qword_1002EEC68;
  if (os_log_type_enabled((os_log_t)qword_1002EEC68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "KTKVSStore calling synchronizeWithCompletionHandler",  v5,  2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10018B7C8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEC68;
  qword_1002EEC68 = (uint64_t)v1;
}

void sub_10018B8C4(id a1)
{
  os_log_t v1 = -[KTKVSSoftStore initWithStore:](objc_alloc(&OBJC_CLASS___KTKVSSoftStore), "initWithStore:", 0LL);
  dispatch_queue_attr_t v2 = (void *)qword_1002EEC78;
  qword_1002EEC78 = (uint64_t)v1;
}

void sub_10018BAFC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEC68;
  qword_1002EEC68 = (uint64_t)v1;
}

void sub_10018BFE4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, id a25)
{
}

void sub_10018C034(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained manateeChanged];
}

void sub_10018C060(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained checkAllCKKSMonitoredViews];
}

void sub_10018C08C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  os_log_t v1 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained nfs]);
  [v1 trigger];
}

void sub_10018C32C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10018C34C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  dispatch_queue_attr_t v2 = (void *)qword_1002EEC90;
  qword_1002EEC90 = (uint64_t)v1;
}

void sub_10018C37C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) views]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = [v2 containsObject:*(void *)(a1 + 40)];
}

id sub_10018C4AC(uint64_t a1)
{
  id v2 = *(id *)(a1 + 40);
  id result = [*(id *)(a1 + 32) octagonTrusted];
  if (v2 != result)
  {
    if (qword_1002EEC88 != -1) {
      dispatch_once(&qword_1002EEC88, &stru_100286B48);
    }
    uint64_t v4 = (os_log_s *)qword_1002EEC90;
    if (os_log_type_enabled((os_log_t)qword_1002EEC90, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v5 = *(void *)(a1 + 40) == 1LL;
      v11[0] = 67109120;
      v11[1] = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Manatee status changed to: %{BOOL}d",  (uint8_t *)v11,  8u);
    }

    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) octagonObserver]);

    if (v6)
    {
      uint64_t v7 = (void (**)(void, void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) octagonObserver]);
      ((void (**)(void, BOOL))v7)[2](v7, *(void *)(a1 + 40) != 0LL);
    }

    uint64_t v8 = *(void *)(a1 + 40);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) views]);
    uint64_t v10 = v9;
    if (v8 == 1) {
      [v9 addObject:@"Manatee"];
    }
    else {
      [v9 removeAllObjects];
    }

    return [*(id *)(a1 + 32) setOctagonTrusted:*(void *)(a1 + 40)];
  }

  return result;
}

void sub_10018C614(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEC90;
  qword_1002EEC90 = (uint64_t)v1;
}

uint64_t sub_10018C794(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_10018C7BC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEC90;
  qword_1002EEC90 = (uint64_t)v1;
}

void sub_10018C964(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEC90;
  qword_1002EEC90 = (uint64_t)v1;
}

void sub_10018CB00(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEC90;
  qword_1002EEC90 = (uint64_t)v1;
}

void sub_10018CE40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_10018CE60(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEC90;
  qword_1002EEC90 = (uint64_t)v1;
}

void sub_10018CE90(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = v5;
  if (!a3)
  {
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    id v7 = [v5 countByEnumeratingWithState:&v19 objects:v27 count:16];
    if (v7)
    {
      id v9 = v7;
      uint64_t v10 = *(void *)v20;
      *(void *)&__int128 v8 = 138412546LL;
      __int128 v18 = v8;
      do
      {
        uint64_t v11 = 0LL;
        do
        {
          if (*(void *)v20 != v10) {
            objc_enumerationMutation(v6);
          }
          int v12 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)v11);
          int v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", @"view", v18));
          unsigned __int8 v14 = [v13 isEqualToString:@"global"];

          if ((v14 & 1) == 0)
          {
            __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:@"keystate"]);
            if ([v15 isEqualToString:@"ready"])
            {
              *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
            }

            else
            {
              if (qword_1002EEC88 != -1) {
                dispatch_once(&qword_1002EEC88, &stru_100286BE8);
              }
              __int16 v16 = (os_log_s *)qword_1002EEC90;
              if (os_log_type_enabled((os_log_t)qword_1002EEC90, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v17 = *(void *)(a1 + 40);
                *(_DWORD *)buf = v18;
                uint64_t v24 = v15;
                __int16 v25 = 2112;
                uint64_t v26 = v17;
                _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "View state %@ for view: %@",  buf,  0x16u);
              }
            }
          }

          uint64_t v11 = (char *)v11 + 1;
        }

        while (v9 != v11);
        id v9 = [v6 countByEnumeratingWithState:&v19 objects:v27 count:16];
      }

      while (v9);
    }
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10018D0A0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEC90;
  qword_1002EEC90 = (uint64_t)v1;
}

void sub_10018D0D0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEC90;
  qword_1002EEC90 = (uint64_t)v1;
}

void sub_10018D100(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEC90;
  qword_1002EEC90 = (uint64_t)v1;
}

void sub_10018D1C8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) views]);
  [v2 addObject:*(void *)(a1 + 40)];
}

void sub_10018D2B8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) views]);
  [v2 addObject:*(void *)(a1 + 40)];
}

void sub_10018D520( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_10018D550(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10018D560(uint64_t a1)
{
}

void sub_10018D568(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) views]);
  id v2 = [v5 copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10018D5B8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEC90;
  qword_1002EEC90 = (uint64_t)v1;
}

void sub_10018D844(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEC90;
  qword_1002EEC90 = (uint64_t)v1;
}

void sub_10018D874(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEC90;
  qword_1002EEC90 = (uint64_t)v1;
}

void sub_10018D8A4(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) views]);
  [v2 removeObject:*(void *)(a1 + 40)];
}

void sub_10018D9C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_1002EEC88 != -1) {
    dispatch_once(&qword_1002EEC88, &stru_100286CD0);
  }
  uint64_t v4 = (os_log_s *)qword_1002EEC90;
  if (os_log_type_enabled((os_log_t)qword_1002EEC90, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412290;
    id v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CKKS sync completed: %@", (uint8_t *)&v7, 0xCu);
  }

  if (v3)
  {
    v5.n128_u64[0] = 0x4082C00000000000LL;
    id v6 = v3;
  }

  else
  {
    v5.n128_u64[0] = 0LL;
    id v6 = 0LL;
  }

  (*(void (**)(void, id, __n128))(*(void *)(a1 + 32) + 16LL))(*(void *)(a1 + 32), v6, v5);
}

void sub_10018DAC4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEC90;
  qword_1002EEC90 = (uint64_t)v1;
}

void sub_10018DCAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

uint64_t sub_10018DCC4(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = a2;
  if (qword_1002EEC88 != -1) {
    dispatch_once(&qword_1002EEC88, &stru_100286CF0);
  }
  uint64_t v4 = (os_log_s *)qword_1002EEC90;
  if (os_log_type_enabled((os_log_t)qword_1002EEC90, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v7 = 134218242;
    uint64_t v8 = a2;
    __int16 v9 = 2112;
    uint64_t v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Known state state %lu for view: %@",  (uint8_t *)&v7,  0x16u);
  }

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_10018DDB8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEC90;
  qword_1002EEC90 = (uint64_t)v1;
}

void sub_10018DDE8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEC90;
  qword_1002EEC90 = (uint64_t)v1;
}

void sub_10018E454(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v5 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 configBag]);
  [v4 doubleForKey:@"idms-fetch-time"];
  objc_msgSend(*(id *)(a1 + 32), "setOverrideIDMSFetchTime:");

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10018E55C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v5 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 configBag]);
  [v4 doubleForKey:@"idms-fetch-time"];
  objc_msgSend(*(id *)(a1 + 32), "setOverrideIDMSFetchTime:");

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_10018E6C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10018ECFC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EECA8;
  qword_1002EECA8 = (uint64_t)v1;
}

void sub_10018ED2C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EECA8;
  qword_1002EECA8 = (uint64_t)v1;
}

void sub_10018ED5C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EECA8;
  qword_1002EECA8 = (uint64_t)v1;
}

void sub_10018EE9C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [*(id *)(a1 + 32) application]));
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyApplication applicationIdentifierForValue:]( &OBJC_CLASS___TransparencyApplication,  "applicationIdentifierForValue:",  v3));

    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    id v6 = objc_alloc(&OBJC_CLASS___KTLogNetworkRequest);
    int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) publicKeysURI]);
    id v8 = -[KTLogNetworkRequest initGETWithURL:application:](v6, "initGETWithURL:application:", v7, v4);

    [v8 setAuthenticated:0];
    [v8 setUseReversePush:0];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    _DWORD v11[2] = sub_10018F008;
    v11[3] = &unk_100286E28;
    __int16 v9 = *(void **)(a1 + 48);
    id v12 = *(id *)(a1 + 40);
    id v13 = v4;
    CFAbsoluteTime v15 = Current;
    id v14 = v9;
    id v10 = v4;
    [v12 fetchRequest:v8 completionHandler:v11];
  }

void sub_10018F008(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  double Current = CFAbsoluteTimeGetCurrent();
  id v8 = @"Failed";
  if (!v6) {
    id v8 = @"Success";
  }
  __int16 v9 = v8;
  id v10 = v6;
  uint64_t v49 = v9;
  if (v6)
  {
    if (qword_1002EECA0 != -1) {
      dispatch_once(&qword_1002EECA0, &stru_100286E00);
    }
    uint64_t v11 = (void *)qword_1002EECA8;
    if (os_log_type_enabled((os_log_t)qword_1002EECA8, OS_LOG_TYPE_ERROR))
    {
      id v12 = v11;
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v5 serverHint]);
      *(_DWORD *)buf = 138543618;
      uint64_t v52 = v13;
      __int16 v53 = 2112;
      id v54 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "public keys request failed with ServerHint %{public}@: %@",  buf,  0x16u);
    }

    id v14 = 0LL;
    id v15 = v10;
    __int16 v16 = v10;
  }

  else
  {
    if (qword_1002EECA0 != -1) {
      dispatch_once(&qword_1002EECA0, &stru_100286DE0);
    }
    id v48 = v10;
    uint64_t v17 = (void *)qword_1002EECA8;
    if (os_log_type_enabled((os_log_t)qword_1002EECA8, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v18 = v17;
      __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v5 serverHint]);
      *(_DWORD *)buf = 138543362;
      uint64_t v52 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "public keys request succeeded with ServerHint %{public}@",  buf,  0xCu);
    }

    __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transparencyAnalytics]);
    id v22 = objc_msgSend((id)objc_opt_class(v20, v21), "logger");
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v5 data]);
    __int16 v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v24 length]));
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transparencyAnalytics]);
    id v28 = objc_msgSend( (id)objc_opt_class(v26, v27),  "formatEventName:application:",  @"NetworkPublicKeysSize",  *(void *)(a1 + 40));
    __int16 v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
    [v23 logMetric:v25 withName:v29];

    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v5 data]);
    id v50 = 0LL;
    id v14 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyGPBMessage parseFromData:error:]( &OBJC_CLASS___PublicKeysResponse,  "parseFromData:error:",  v30,  &v50));
    id v15 = v50;

    __int16 v31 = (void *)objc_claimAutoreleasedReturnValue([v5 serverHint]);
    [v14 setMetadataValue:v31 key:kTransparencyResponseMetadataKeyServerHint];

    id v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    id v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "kt_dateToString"));
    [v14 setMetadataValue:v33 key:@"ResponseTime"];

    __int16 v16 = v48;
  }

  __int128 v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transparencyAnalytics]);
  id v36 = objc_msgSend((id)objc_opt_class(v34, v35), "logger");
  __int128 v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
  __int16 v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transparencyAnalytics]);
  id v40 = objc_msgSend( (id)objc_opt_class(v38, v39),  "formatEventName:application:",  @"NetworkPublicKeysEvent",  *(void *)(a1 + 40));
  __int128 v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
  [v37 logResultForEvent:v41 hardFailure:1 result:v15];

  id v42 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transparencyAnalytics]);
  id v44 = objc_msgSend((id)objc_opt_class(v42, v43), "logger");
  uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
  unsigned int v46 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  Current - *(double *)(a1 + 56)));
  uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue( +[KTLogClient formatEventName:application:state:]( &OBJC_CLASS___KTLogClient,  "formatEventName:application:state:",  @"NetworkPublicKeysTime",  *(void *)(a1 + 40),  v49));
  [v45 logMetric:v46 withName:v47];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10018F478(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EECA8;
  qword_1002EECA8 = (uint64_t)v1;
}

void sub_10018F4A8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EECA8;
  qword_1002EECA8 = (uint64_t)v1;
}

void sub_10018F694(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EECA8;
  qword_1002EECA8 = (uint64_t)v1;
}

void sub_10018F6C4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    id v3 = objc_alloc(&OBJC_CLASS___KTLogNetworkRequest);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) reportToAppleURI]);
    id v5 = -[KTLogNetworkRequest initPOSTWithURL:data:uuid:application:]( v3,  "initPOSTWithURL:data:uuid:application:",  v4,  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56));

    [v5 setAdditionalHeaders:&off_10029A3F8];
    [v5 setAllowEmptyData:1];
    [v5 setAuthenticated:1];
    objc_msgSend(v5, "setUseReversePush:", objc_msgSend(*(id *)(a1 + 32), "shouldUseReversePush:", 1));
    id v6 = *(void **)(a1 + 32);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    uint64_t v7[2] = sub_10018F7E4;
    v7[3] = &unk_100286E98;
    id v8 = *(id *)(a1 + 64);
    [v6 fetchRequest:v5 completionHandler:v7];
  }

void sub_10018F7E4(uint64_t a1, void *a2, void *a3)
{
  if (a3)
  {
    id v5 = a3;
    id v6 = a2;
    int v7 = (void *)objc_claimAutoreleasedReturnValue([v5 userInfo]);
    id v8 = [v7 mutableCopy];

    __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([v6 serverHint]);
    [v8 setObject:v9 forKeyedSubscript:kTransparencyResponseMetadataKeyServerHint];

    id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 domain]);
    id v11 = [v5 code];

    id v12 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v10,  v11,  v8));
  }

  else
  {
    id v12 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10018FAA0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  double Current = CFAbsoluteTimeGetCurrent();
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transparencyAnalytics]);
  id v10 = (void *)objc_opt_class(v8, v9);
  if (*(_BYTE *)(a1 + 72)) {
    id v11 = @"ReversePushFetchEvent";
  }
  else {
    id v11 = @"NetworkFetchEvent";
  }
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 formatEventName:v11 application:*(void *)(a1 + 40)]);

  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transparencyAnalytics]);
  id v15 = (void *)objc_opt_class(v13, v14);
  id v43 = 0LL;
  id v32 = _NSConcreteStackBlock;
  uint64_t v33 = 3221225472LL;
  __int128 v34 = sub_10018FD08;
  uint64_t v35 = &unk_100286F28;
  id v16 = v5;
  id v36 = v16;
  id v17 = v6;
  id v37 = v17;
  id v38 = *(id *)(a1 + 48);
  id v18 = *(id *)(a1 + 56);
  uint64_t v19 = *(void *)(a1 + 32);
  __int128 v20 = *(void **)(a1 + 40);
  id v41 = v18;
  uint64_t v39 = v19;
  char v42 = *(_BYTE *)(a1 + 72);
  id v40 = v20;
  [v15 doWithAnalyticsForEventName:v12 error:&v43 block:&v32];
  id v21 = v43;

  id v22 = @"Failed";
  if (!v17)
  {
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "data", v32, v33, v34, v35, v36, v37, v38, v39));
    uint64_t v24 = @"Success";
    if (!v23) {
      uint64_t v24 = @"Failed";
    }
    id v22 = v24;
  }

  __int16 v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transparencyAnalytics", v32, v33, v34, v35));
  id v27 = objc_msgSend((id)objc_opt_class(v25, v26), "logger");
  id v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
  __int16 v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  Current - *(double *)(a1 + 64)));
  if (*(_BYTE *)(a1 + 72)) {
    uint64_t v30 = @"ReversePushFetchTime";
  }
  else {
    uint64_t v30 = @"NetworkFetchTime";
  }
  __int16 v31 = (void *)objc_claimAutoreleasedReturnValue( +[KTLogClient formatEventName:application:state:]( &OBJC_CLASS___KTLogClient,  "formatEventName:application:state:",  v30,  *(void *)(a1 + 40),  v22));
  [v28 logMetric:v29 withName:v31];
}

uint64_t sub_10018FD08(uint64_t a1, void *a2, void *a3)
{
  id v6 = *(void **)(a1 + 32);
  if (v6
    && (int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 data])) != 0
    && (uint64_t v8 = *(void *)(a1 + 40), v7, !v8))
  {
    if (qword_1002EECA0 != -1) {
      dispatch_once(&qword_1002EECA0, &stru_100286F00);
    }
    uint64_t v19 = (void *)qword_1002EECA8;
    if (os_log_type_enabled((os_log_t)qword_1002EECA8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = *(void *)(a1 + 48);
      id v21 = *(void **)(a1 + 32);
      id v22 = v19;
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v21 request]);
      else {
        uint64_t v24 = &stru_10028E390;
      }
      __int16 v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serverHint]);
      int v37 = 138543874;
      uint64_t v38 = v20;
      __int16 v39 = 2114;
      id v40 = v24;
      __int16 v41 = 2114;
      char v42 = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "fetchId %{public}@%{public}@ succeeded with ServerHint %{public}@",  (uint8_t *)&v37,  0x20u);
    }

    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) transparencyAnalytics]);
    id v28 = objc_msgSend((id)objc_opt_class(v26, v27), "logger");
    __int16 v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) data]);
    __int16 v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v30 length]));
    id v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) transparencyAnalytics]);
    __int128 v34 = (void *)objc_opt_class(v32, v33);
    if (*(_BYTE *)(a1 + 80)) {
      uint64_t v35 = @"ReversePushFetchSize";
    }
    else {
      uint64_t v35 = @"NetworkFetchSize";
    }
    id v36 = (void *)objc_claimAutoreleasedReturnValue([v34 formatEventName:v35 application:*(void *)(a1 + 64)]);
    [v29 logMetric:v31 withName:v36];

    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
    return 1LL;
  }

  else
  {
    if (a3)
    {
      uint64_t v45 = @"requestUUID";
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) UUIDString]);
      unsigned int v46 = v9;
      *a3 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v46,  &v45,  1LL));
    }

    if (qword_1002EECA0 != -1) {
      dispatch_once(&qword_1002EECA0, &stru_100286EE0);
    }
    id v10 = (void *)qword_1002EECA8;
    if (os_log_type_enabled((os_log_t)qword_1002EECA8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 48);
      id v12 = *(void **)(a1 + 32);
      id v13 = v10;
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v12 request]);
      else {
        id v15 = &stru_10028E390;
      }
      id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serverHint]);
      uint64_t v17 = *(void *)(a1 + 40);
      int v37 = 138544130;
      uint64_t v38 = v11;
      __int16 v39 = 2114;
      id v40 = v15;
      __int16 v41 = 2114;
      char v42 = v16;
      __int16 v43 = 2112;
      uint64_t v44 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "fetchId %{public}@%{public}@ failed with ServerHint %{public}@: %@",  (uint8_t *)&v37,  0x2Au);
    }

    if (a2) {
      *a2 = *(id *)(a1 + 40);
    }
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
    return 0LL;
  }

void sub_1001900B0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EECA8;
  qword_1002EECA8 = (uint64_t)v1;
}

void sub_1001900E0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EECA8;
  qword_1002EECA8 = (uint64_t)v1;
}

void sub_1001902B8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EECA8;
  qword_1002EECA8 = (uint64_t)v1;
}

void sub_1001902E8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [*(id *)(a1 + 32) application]));
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyApplication applicationIdentifierForValue:]( &OBJC_CLASS___TransparencyApplication,  "applicationIdentifierForValue:",  v3));

    uint64_t v6 = *(void *)(a1 + 32);
    id v5 = *(void **)(a1 + 40);
    int v7 = (void *)objc_claimAutoreleasedReturnValue([v5 batchQueryURI]);
    uint64_t v8 = *(unsigned __int8 *)(a1 + 64);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    _BYTE v10[2] = sub_100190430;
    v10[3] = &unk_100286F98;
    uint64_t v9 = *(void *)(a1 + 48);
    id v12 = *(id *)(a1 + 56);
    id v11 = *(id *)(a1 + 32);
    [v5 fetchMessage:v6 uri:v7 uuid:v9 application:v4 userInitiated:v8 completionHandler:v10];
  }

void sub_100190430(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5 && (int v7 = (void *)objc_claimAutoreleasedReturnValue([v5 data]), v7, !v6) && v7)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 data]);
    id v15 = 0LL;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyGPBMessage parseFromData:error:]( &OBJC_CLASS___BatchQueryResponse,  "parseFromData:error:",  v8,  &v15));
    id v10 = v15;

    id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 serverHint]);
    [v9 setMetadataValue:v11 key:kTransparencyResponseMetadataKeyServerHint];
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    id v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "kt_dateToString"));
    [v9 setMetadataValue:v13 key:@"ResponseTime"];

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v5 request]);
    LODWORD(v13) = [v14 useReversePush];

    if ((_DWORD)v13) {
      [v9 setMetadataValue:@"YES" key:@"APS"];
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_1001909C0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EECA8;
  qword_1002EECA8 = (uint64_t)v1;
}

void sub_1001909F0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EECA8;
  qword_1002EECA8 = (uint64_t)v1;
}

void sub_100190A20(uint64_t a1)
{
}

uint64_t sub_100190A54(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100190BAC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EECA8;
  qword_1002EECA8 = (uint64_t)v1;
}

void sub_100190D80(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EECA8;
  qword_1002EECA8 = (uint64_t)v1;
}

void sub_100190DB0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [*(id *)(a1 + 32) application]));
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyApplication applicationIdentifierForValue:]( &OBJC_CLASS___TransparencyApplication,  "applicationIdentifierForValue:",  v3));

    uint64_t v6 = *(void *)(a1 + 32);
    id v5 = *(void **)(a1 + 40);
    int v7 = (void *)objc_claimAutoreleasedReturnValue([v5 queryURI]);
    uint64_t v8 = *(unsigned __int8 *)(a1 + 64);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    _BYTE v10[2] = sub_100190EE0;
    v10[3] = &unk_100286E98;
    uint64_t v9 = *(void *)(a1 + 48);
    id v11 = *(id *)(a1 + 56);
    [v5 fetchMessage:v6 uri:v7 uuid:v9 application:v4 userInitiated:v8 completionHandler:v10];
  }

void sub_100190EE0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5 && (int v7 = (void *)objc_claimAutoreleasedReturnValue([v5 data]), v7, !v6) && v7)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 data]);
    id v15 = 0LL;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyGPBMessage parseFromData:error:]( &OBJC_CLASS___QueryResponse,  "parseFromData:error:",  v8,  &v15));
    id v10 = v15;

    id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 serverHint]);
    [v9 setMetadataValue:v11 key:kTransparencyResponseMetadataKeyServerHint];
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    id v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "kt_dateToString"));
    [v9 setMetadataValue:v13 key:@"ResponseTime"];

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v5 request]);
    LODWORD(v13) = [v14 useReversePush];

    if ((_DWORD)v13) {
      [v9 setMetadataValue:@"YES" key:@"APS"];
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

void sub_1001911C0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EECA8;
  qword_1002EECA8 = (uint64_t)v1;
}

void sub_100191388(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EECA8;
  qword_1002EECA8 = (uint64_t)v1;
}

void sub_1001913B8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 consistencyProofURI]);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    uint64_t v7[2] = sub_100191490;
    v7[3] = &unk_100286E98;
    uint64_t v6 = *(void *)(a1 + 48);
    id v8 = *(id *)(a1 + 56);
    [v3 fetchMessage:v4 uri:v5 uuid:v6 application:0 userInitiated:0 completionHandler:v7];
  }

void sub_100191490(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5 && (int v7 = (void *)objc_claimAutoreleasedReturnValue([v5 data]), v7, !v6) && v7)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 data]);
    id v15 = 0LL;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyGPBMessage parseFromData:error:]( &OBJC_CLASS___ConsistencyProofResponse,  "parseFromData:error:",  v8,  &v15));
    id v10 = v15;

    id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 serverHint]);
    [v9 setMetadataValue:v11 key:kTransparencyResponseMetadataKeyServerHint];
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    id v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "kt_dateToString"));
    [v9 setMetadataValue:v13 key:@"ResponseTime"];

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v5 request]);
    LODWORD(v13) = [v14 useReversePush];

    if ((_DWORD)v13) {
      [v9 setMetadataValue:@"YES" key:@"APS"];
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

void sub_1001917C0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EECA8;
  qword_1002EECA8 = (uint64_t)v1;
}

void sub_1001917F0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 revisionLogProofURI]);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    uint64_t v7[2] = sub_1001918C8;
    v7[3] = &unk_100286E98;
    uint64_t v6 = *(void *)(a1 + 48);
    id v8 = *(id *)(a1 + 56);
    [v3 fetchMessage:v4 uri:v5 uuid:v6 application:0 userInitiated:0 completionHandler:v7];
  }

void sub_1001918C8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5 && (int v7 = (void *)objc_claimAutoreleasedReturnValue([v5 data]), v7, !v6) && v7)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 data]);
    id v15 = 0LL;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyGPBMessage parseFromData:error:]( &OBJC_CLASS___RevisionLogInclusionProofResponse,  "parseFromData:error:",  v8,  &v15));
    id v10 = v15;

    id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 serverHint]);
    [v9 setMetadataValue:v11 key:kTransparencyResponseMetadataKeyServerHint];
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    id v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "kt_dateToString"));
    [v9 setMetadataValue:v13 key:@"ResponseTime"];

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v5 request]);
    LODWORD(v13) = [v14 useReversePush];

    if ((_DWORD)v13) {
      [v9 setMetadataValue:@"YES" key:@"APS"];
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

void sub_100191CC8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

id sub_100191CF0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _onQueueResetReachabilityDependency];
}

void sub_100191CF8(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  nw_path_status_t status = nw_path_get_status(v3);

  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = @"unavailable";
    if (status == nw_path_status_satisfied) {
      id v6 = @"available";
    }
    int v7 = 138412290;
    id v8 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "nw_path update: network is %@",  (uint8_t *)&v7,  0xCu);
  }

  [WeakRetained _onqueueSetNetworkReachability:status == nw_path_status_satisfied];
}

void sub_100191EE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_100191F00(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) haveNetwork];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

void sub_100192250(_Unwind_Exception *a1)
{
}

void sub_100192280(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v2 = [WeakRetained haveNetwork];
  BOOL v3 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v3)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "Network available",  buf,  2u);
    }
  }

  else
  {
    if (v3)
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v7 = 0x4028000000000000LL;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "Network still not available, retrying after waiting %2.1f hours",  buf,  0xCu);
    }

    uint64_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001923B8;
    block[3] = &unk_100276740;
    void block[4] = WeakRetained;
    dispatch_async(v4, block);
  }
}

id sub_1001923B8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _onQueueResetReachabilityDependency];
}

void sub_1001923C0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained timer]);

    id WeakRetained = v3;
    if (v2)
    {
      [v3 _onQueueRunReachabilityDependency];
      id WeakRetained = v3;
    }
  }
}

id sub_100192528(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onqueueSetNetworkReachability:*(unsigned __int8 *)(a1 + 40)];
}

LABEL_3:
  uint64_t v4 = 1;
LABEL_13:

  return v4;
}

void sub_10019319C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  unsigned int v2 = (void *)qword_1002EECB8;
  qword_1002EECB8 = (uint64_t)v1;
}

void sub_100193424(void *a1)
{
  unsigned int v2 = (void *)a1[7];
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  id v13 = 0LL;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 getOptInHistory:v3 store:v4 error:&v13]);
  unint64_t v6 = (unint64_t)v13;
  uint64_t v7 = objc_claimAutoreleasedReturnValue([v5 lastObject]);

  if (!(v7 | v6))
  {
    id v12 = *(void (**)(void))(a1[6] + 16LL);
LABEL_6:
    v12();
    goto LABEL_7;
  }

  if (!v7)
  {
    id v12 = *(void (**)(void))(a1[6] + 16LL);
    goto LABEL_6;
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue([(id)v7 objectAtIndexedSubscript:1]);
  id v9 = [v8 BOOLValue];

  uint64_t v10 = a1[6];
  id v11 = (void *)objc_claimAutoreleasedReturnValue([(id)v7 objectAtIndexedSubscript:0]);
  (*(void (**)(uint64_t, id, void *, void))(v10 + 16))(v10, v9, v11, 0LL);

LABEL_7:
}

uint64_t sub_100193530(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

int64_t sub_100193AE8(id a1, NSArray *a2, NSArray *a3)
{
  uint64_t v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray objectAtIndexedSubscript:](a2, "objectAtIndexedSubscript:", 0LL));
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray objectAtIndexedSubscript:](v4, "objectAtIndexedSubscript:", 0LL));

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

void sub_100193FEC(uint64_t a1)
{
  uint64_t v2 = kTransparencyErrorInterface;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) applicationId]);
  id v4 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  v2,  -285LL,  @"tvOS KT opt-in not supported for {public}%@",  v3));

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1001943C4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECB8;
  qword_1002EECB8 = (uint64_t)v1;
}

void sub_1001943F4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECB8;
  qword_1002EECB8 = (uint64_t)v1;
}

void sub_100194424(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECB8;
  qword_1002EECB8 = (uint64_t)v1;
}

void sub_100194560(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECB8;
  qword_1002EECB8 = (uint64_t)v1;
}

void sub_100194704(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](&OBJC_CLASS___NSString, "stringWithCString:encoding:", v3.machine, 4LL));
  uint64_t v2 = (void *)qword_1002EECC0;
  qword_1002EECC0 = v1;
}

void sub_100194D10( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100194D34(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECD8;
  qword_1002EECD8 = (uint64_t)v1;
}

void sub_100194D64(uint64_t a1, char a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  utsname v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained intendedState]);
  [WeakRetained setNextState:v3];

  if ((a2 & 1) == 0)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained stateMachine]);
    id v5 = -[KTPendingFlag initWithFlag:conditions:delayInSeconds:]( objc_alloc(&OBJC_CLASS___KTPendingFlag),  "initWithFlag:conditions:delayInSeconds:",  @"RepairIDSFlag",  2LL,  43200.0);
    [v4 handlePendingFlag:v5];
  }

  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained finishedOp]);
  [v6 addOperation:v7];
}

void sub_100195460(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_100195490(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_1001954C0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_1001954F0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_100195650(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_10019589C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_100195910( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_100196074(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_1001963A8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_1001963D8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_100196408(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_100196438(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_1001965BC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_100196AE8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_100196B18(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_100196B48(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_100196B78(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_100196BA8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_100196DA0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_100196DD0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_100196F78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100196F90(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100196FA0(uint64_t a1)
{
}

id sub_100196FA8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyAnalytics formatEventName:application:]( &OBJC_CLASS___TransparencyAnalytics,  "formatEventName:application:",  @"LogBeginMs",  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL)));
  utsname v3 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyAnalytics formatEventName:application:]( &OBJC_CLASS___TransparencyAnalytics,  "formatEventName:application:",  @"InResetWindow",  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL)));
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyAnalytics formatEventName:application:]( &OBJC_CLASS___TransparencyAnalytics,  "formatEventName:application:",  @"ktTLTLogBeginMs",  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL)));
  v12[0] = v4;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keyBag]);
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v5 tltLogBeginningMs]));
  v13[0] = v6;
  v12[1] = v2;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keyBag]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v7 patLogBeginningMs]));
  v13[1] = v8;
  _BYTE v12[2] = v3;
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [*(id *)(a1 + 32) inResetWindow]));
  void v13[2] = v9;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v13,  v12,  3LL));

  return v10;
}

void sub_100197334(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_100197938(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_100197968(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_100197998(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v13 = 0LL;
  id v3 = (id)objc_claimAutoreleasedReturnValue([v2 createManagedObjectWithError:&v13]);
  id v4 = v13;
  if (!v3)
  {
    id v5 = *(void **)(a1 + 32);
    id v12 = v4;
    id v3 = [v5 copyManagedObject:&v12];
    id v6 = v12;

    id v4 = v6;
  }

  [v3 setUnsigned:"signatureVerified" value:1];
  [v3 setUnsigned:"inclusionVerified" value:1];
  id v7 = *(void **)(a1 + 40);
  id v11 = v4;
  unsigned __int8 v8 = [v7 persistWithError:&v11];
  id v9 = v11;

  if ((v8 & 1) == 0)
  {
    if (qword_1002EECE0 != -1) {
      dispatch_once(&qword_1002EECE0, &stru_100287598);
    }
    uint64_t v10 = (os_log_s *)qword_1002EECE8;
    if (os_log_type_enabled((os_log_t)qword_1002EECE8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v15 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "failed to save signature result for STH: %@",  buf,  0xCu);
    }

    [*(id *)(a1 + 40) reportCoreDataPersistEventForLocation:@"verifySTHSignature" underlyingError:v9];
  }
}

void sub_100197B28(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_100197B58(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_100197B88(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_100197BB8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v11 = 0LL;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 createManagedObjectWithError:&v11]);
  id v4 = v11;
  if (v3)
  {
    [*(id *)(a1 + 40) onMocSetMapHead:v3 signatureResult:1 signatureError:0];
    [*(id *)(a1 + 40) onMocSetMapHead:v3 inclusionResult:1 inclusionError:0];
    [*(id *)(a1 + 40) onMocSetMapHead:v3 mmdResult:1 mmdError:0];
    id v5 = *(void **)(a1 + 40);
    id v10 = v4;
    unsigned __int8 v6 = [v5 persistWithError:&v10];
    id v7 = v10;

    if ((v6 & 1) == 0)
    {
      if (qword_1002EECE0 != -1) {
        dispatch_once(&qword_1002EECE0, &stru_100287618);
      }
      unsigned __int8 v8 = (os_log_s *)qword_1002EECE8;
      if (os_log_type_enabled((os_log_t)qword_1002EECE8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v13 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "failed persist SMH: %@", buf, 0xCu);
      }
    }

    id v4 = v7;
  }

  else
  {
    if (qword_1002EECE0 != -1) {
      dispatch_once(&qword_1002EECE0, &stru_1002875F8);
    }
    id v9 = (os_log_s *)qword_1002EECE8;
    if (os_log_type_enabled((os_log_t)qword_1002EECE8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "failed to create SMH object: %@", buf, 0xCu);
    }
  }
}

void sub_100197D94(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_100197DC4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_100197FEC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_100198360(_Unwind_Exception *a1)
{
}

void sub_1001983FC(_Unwind_Exception *a1)
{
}

void sub_100198488(_Unwind_Exception *a1)
{
}

void sub_100198920( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
}

uint64_t sub_1001989F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100198D84(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_100198DB4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_100199298(_Unwind_Exception *a1)
{
}

void sub_1001993D4(_Unwind_Exception *a1)
{
}

void sub_100199538(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    unsigned __int8 v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) applicationKeyStores]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:*(void *)(a1 + 40)]);

    if (v7)
    {
      unsigned int v8 = [v7 readyWithRefresh:0];
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 contextStore]);

      if (!v9)
      {
        if (qword_1002EECE0 != -1) {
          dispatch_once(&qword_1002EECE0, &stru_100287698);
        }
        id v10 = (os_log_s *)qword_1002EECE8;
        if (os_log_type_enabled((os_log_t)qword_1002EECE8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "fetchKeyStore: application key store present with no context",  buf,  2u);
        }

        if (qword_1002EECE0 != -1) {
          dispatch_once(&qword_1002EECE0, &stru_1002876B8);
        }
        id v11 = (void *)qword_1002EECE8;
        if (os_log_type_enabled((os_log_t)qword_1002EECE8, OS_LOG_TYPE_DEBUG))
        {
          id v12 = *(void **)(a1 + 56);
          id v13 = v11;
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v12 followup]);
          id v15 = @"YES";
          if (!v14) {
            id v15 = @"NO";
          }
          *(_DWORD *)buf = 138412290;
          int v37 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "fetchKeyStore: followup controller exists? %@",  buf,  0xCu);
        }

        [v7 setContextStore:*(void *)(a1 + 56)];
      }

      id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) dataStore]);
      uint64_t v34 = 0LL;
      uint64_t v17 = (id *)&v34;
      [v7 updateWithPublicKeyResponse:v5 dataStore:v16 error:&v34];
    }

    else
    {
      id v18 = *(void **)(a1 + 32);
      uint64_t v19 = *(void *)(a1 + 40);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) dataStore]);
      uint64_t v20 = *(void *)(a1 + 56);
      uint64_t v35 = 0LL;
      uint64_t v17 = (id *)&v35;
      id v7 = (void *)objc_claimAutoreleasedReturnValue( [v18 createApplicationKeyStore:v19 keyStoreResponse:v5 dataStore:v16 contextStore:v20 error:&v35]);
      unsigned int v8 = 1;
    }

    id v21 = (__CFString *)*v17;

    [*(id *)(a1 + 32) updateTLTKeyStoreWithApplicationKeyStore:v7];
    if (!v7 || v21)
    {
      if (qword_1002EECE0 != -1) {
        dispatch_once(&qword_1002EECE0, &stru_1002876D8);
      }
      id v28 = (void *)qword_1002EECE8;
      if (os_log_type_enabled((os_log_t)qword_1002EECE8, OS_LOG_TYPE_ERROR))
      {
        __int16 v29 = *(const __CFString **)(a1 + 40);
        uint64_t v30 = v28;
        __int16 v31 = (void *)objc_claimAutoreleasedReturnValue([v5 data]);
        id v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "kt_hexString"));
        *(_DWORD *)buf = 138412802;
        int v37 = v29;
        __int16 v38 = 2112;
        __int16 v39 = v32;
        __int16 v40 = 2112;
        __int16 v41 = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "failed to configure application '%@' keystore with PublicKeysResponse: %@. Error: %@",  buf,  0x20u);
      }
    }

    else
    {
      if (((v8 | [v7 readyWithRefresh:0] ^ 1) & 1) == 0)
      {
        if (qword_1002EECE0 != -1) {
          dispatch_once(&qword_1002EECE0, &stru_1002876F8);
        }
        id v22 = (os_log_s *)qword_1002EECE8;
        if (os_log_type_enabled((os_log_t)qword_1002EECE8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v23 = *(const __CFString **)(a1 + 40);
          *(_DWORD *)buf = 138412290;
          int v37 = v23;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Retrying pending validations after refreshing old %@ key store",  buf,  0xCu);
        }

        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v7 delegate]);
        [v24 retryPendingValidations:*(void *)(a1 + 40)];
      }

      uint64_t v25 = objc_claimAutoreleasedReturnValue([v7 delegate]);
      [(id)v25 triggerStatusUpdate:*(void *)(a1 + 40)];

      [*(id *)(a1 + 32) setForceRefresh:0];
      uint64_t v26 = *(void **)(a1 + 32);
      id v33 = 0LL;
      LOBYTE(v25) = [v26 saveDiskApplicationKeyStore:v7 error:&v33];
      id v21 = (__CFString *)v33;
      if ((v25 & 1) == 0)
      {
        if (qword_1002EECE0 != -1) {
          dispatch_once(&qword_1002EECE0, &stru_100287718);
        }
        uint64_t v27 = (os_log_s *)qword_1002EECE8;
        if (os_log_type_enabled((os_log_t)qword_1002EECE8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          int v37 = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "failed to write keys to disk: %@",  buf,  0xCu);
        }
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }
}

void sub_100199A14(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_100199A44(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_100199A74(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_100199AA4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_100199AD4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_100199E98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t, void, uint64_t))(v3 + 16))(v3, *(void *)(a1 + 32), a2);
  }
  id v4 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) configureGroup]);
  dispatch_group_leave(v4);
}

uint64_t sub_100199EEC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0LL);
  }
  return result;
}

void sub_10019A450(_Unwind_Exception *a1)
{
}

void sub_10019A47C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_10019A4AC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_10019A4DC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_10019A50C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_10019A7FC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_10019A82C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_10019A9D0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_10019AD0C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_10019AD3C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_10019AD6C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_10019B328(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_10019B358(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_10019B388(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECE8;
  qword_1002EECE8 = (uint64_t)v1;
}

void sub_10019BA28( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10019BA40(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10019BA50(uint64_t a1)
{
}

void sub_10019BA58(uint64_t a1, void *a2)
{
}

void sub_10019C2E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36)
{
}

void sub_10019C31C(uint64_t a1, uint64_t a2)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue( +[KTStatusServer auditorReportForKTRequest:]( &OBJC_CLASS___KTStatusServer,  "auditorReportForKTRequest:",  a2));
  if (v4)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) UUIDString]);
    [v4 setObject:v3 forKeyedSubscript:kTransparencyAuditorReportUUID];
  }

  [*(id *)(a1 + 40) addObject:v4];
}

void sub_10019C398(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 request]);

  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 request]);
    uint64_t v6 = objc_claimAutoreleasedReturnValue(+[KTStatusServer auditorReportForKTRequest:](&OBJC_CLASS___KTStatusServer, "auditorReportForKTRequest:", v5));
  }

  else
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 mutation]);

    if (v7)
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 mutation]);
      uint64_t v6 = objc_claimAutoreleasedReturnValue(+[KTStatusServer auditorReportForKTSMT:](&OBJC_CLASS___KTStatusServer, "auditorReportForKTSMT:", v5));
    }

    else
    {
      unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([v3 sth]);

      if (!v8)
      {
        uint64_t v11 = objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorDatabase,  -299LL,  @"failure event with no associated entity"));
        uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8LL);
        id v13 = *(void **)(v12 + 40);
        *(void *)(v12 + 40) = v11;

        goto LABEL_10;
      }

      id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 sth]);
      uint64_t v6 = objc_claimAutoreleasedReturnValue(+[KTStatusServer auditorReportForSTH:](&OBJC_CLASS___KTStatusServer, "auditorReportForSTH:", v5));
    }
  }

  id v9 = (void *)v6;

  if (v9)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) UUIDString]);
    [v9 setObject:v10 forKeyedSubscript:kTransparencyAuditorReportUUID];

    [*(id *)(a1 + 40) addObject:v9];
    goto LABEL_14;
  }

void sub_10019C5C0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EECF8;
  qword_1002EECF8 = (uint64_t)v1;
}

void sub_10019C730( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10019C754(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained transaction]);

  if (v2)
  {
    if (qword_1002EED00 != -1) {
      dispatch_once(&qword_1002EED00, &stru_1002879B0);
    }
    id v3 = (os_log_s *)qword_1002EED08;
    if (os_log_type_enabled((os_log_t)qword_1002EED08, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v4 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "StaticKeyContactsSync: aborting transaction for syncing",  v4,  2u);
    }

    [WeakRetained setTransaction:0];
  }
}

void sub_10019C80C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EED08;
  qword_1002EED08 = (uint64_t)v1;
}

void sub_10019C96C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) started])
  {
    if (qword_1002EED00 != -1) {
      dispatch_once(&qword_1002EED00, &stru_1002879D0);
    }
    uint64_t v2 = (os_log_s *)qword_1002EED08;
    if (os_log_type_enabled((os_log_t)qword_1002EED08, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "StaticKeyContactsSync: resumed more then once",  buf,  2u);
    }
  }

  else
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v3 addObserver:*(void *)(a1 + 32) selector:"contactStoreDidChange:" name:CNContactStoreDidChangeNotification object:0];
    [*(id *)(a1 + 32) setStarted:1];
  }

void sub_10019CA58(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EED08;
  qword_1002EED08 = (uint64_t)v1;
}

void sub_10019CA88(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EED08;
  qword_1002EED08 = (uint64_t)v1;
}

void sub_10019CB98(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EED08;
  qword_1002EED08 = (uint64_t)v1;
}

void sub_10019CDA4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EED08;
  qword_1002EED08 = (uint64_t)v1;
}

void sub_10019CDD4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EED08;
  qword_1002EED08 = (uint64_t)v1;
}

id sub_10019CE04(uint64_t a1)
{
  uint64_t v2 = (void *)os_transaction_create("com.apple.transparency.merge.contacts");
  [*(id *)(a1 + 32) setTransaction:v2];

  [*(id *)(a1 + 32) onQueueMergeChangesFromContacts];
  return [*(id *)(a1 + 32) setTransaction:0];
}

void sub_10019CF18(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EED08;
  qword_1002EED08 = (uint64_t)v1;
}

void sub_10019D798(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EED08;
  qword_1002EED08 = (uint64_t)v1;
}

void sub_10019D7C8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EED08;
  qword_1002EED08 = (uint64_t)v1;
}

void sub_10019D7F8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EED08;
  qword_1002EED08 = (uint64_t)v1;
}

void sub_10019D828(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EED08;
  qword_1002EED08 = (uint64_t)v1;
}

void sub_10019D858(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EED08;
  qword_1002EED08 = (uint64_t)v1;
}

void sub_10019D888(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EED08;
  qword_1002EED08 = (uint64_t)v1;
}

void sub_10019D8B8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EED08;
  qword_1002EED08 = (uint64_t)v1;
}

void sub_10019D8E8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EED08;
  qword_1002EED08 = (uint64_t)v1;
}

void sub_10019D918(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EED08;
  qword_1002EED08 = (uint64_t)v1;
}

void sub_10019D948(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EED08;
  qword_1002EED08 = (uint64_t)v1;
}

void sub_10019E0A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10019E0D0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained idsControllerQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10019E15C;
  block[3] = &unk_100276740;
  id v5 = WeakRetained;
  id v3 = WeakRetained;
  dispatch_async(v2, block);
}

id sub_10019E15C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) checkAccountChange];
}

id sub_10019E1F0(uint64_t a1)
{
  return [*(id *)(a1 + 32) onQueueDrain];
}

void sub_10019E4D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, id location)
{
}

void sub_10019E518(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) idsQueue]);
  dispatch_assert_queue_V2(v7);

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v6)
  {
    if (qword_1002EED10 != -1) {
      dispatch_once(&qword_1002EED10, &stru_100287C10);
    }
    id v9 = (os_log_s *)qword_1002EED18;
    if (os_log_type_enabled((os_log_t)qword_1002EED18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v27 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "KTIDSActualOperations: statusOfUsersOnService error: %@",  buf,  0xCu);
    }

    goto LABEL_26;
  }

  if (qword_1002EED10 != -1) {
    dispatch_once(&qword_1002EED10, &stru_100287C30);
  }
  id v10 = (os_log_s *)qword_1002EED18;
  if (os_log_type_enabled((os_log_t)qword_1002EED18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v27 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "KTIDSActualOperations: statusOfUsersOnService %@",  buf,  0xCu);
  }

  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v5 serviceUserInfos]);
  id v12 = [v11 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (!v12)
  {

    goto LABEL_25;
  }

  id v13 = v12;
  id v20 = v5;
  char v14 = 0;
  uint64_t v15 = *(void *)v22;
  do
  {
    for (unint64_t i = 0LL; i != v13; unint64_t i = (char *)i + 1)
    {
      if (*(void *)v22 != v15) {
        objc_enumerationMutation(v11);
      }
      uint64_t v17 = *(void **)(*((void *)&v21 + 1) + 8LL * (void)i);
      if ([v17 type] == (id)1)
      {
        id v18 = -[KTIDSSignInServiceUserInfo initWithUserInfo:]( objc_alloc(&OBJC_CLASS___KTIDSSignInServiceUserInfo),  "initWithUserInfo:",  v17);
        char v14 = 1;
      }

      else
      {
        if ([v17 type]) {
          continue;
        }
        id v18 = -[KTIDSSignInServiceUserInfo initWithType:status:]( [KTIDSSignInServiceUserInfo alloc],  "initWithType:status:",  0,  [v17 status]);
      }

      [WeakRetained onQueueProcessStatus:v18];
    }

    id v13 = [v11 countByEnumeratingWithState:&v21 objects:v25 count:16];
  }

  while (v13);

  id v5 = v20;
  if ((v14 & 1) != 0) {
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v19 = -[KTIDSSignInServiceUserInfo initWithType:status:]( objc_alloc(&OBJC_CLASS___KTIDSSignInServiceUserInfo),  "initWithType:status:",  1LL,  0LL);
  [WeakRetained onQueueProcessStatus:v19];

LABEL_26:
}

void sub_10019E7F4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EED18;
  qword_1002EED18 = (uint64_t)v1;
}

void sub_10019E824(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EED18;
  qword_1002EED18 = (uint64_t)v1;
}

uint64_t sub_10019ED3C(uint64_t a1, int a2)
{
  if (qword_1002EED10 != -1) {
    dispatch_once(&qword_1002EED10, &stru_100287C78);
  }
  id v4 = (os_log_s *)qword_1002EED18;
  if (os_log_type_enabled((os_log_t)qword_1002EED18, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "IDS self heal returned: %{BOOL}d",  (uint8_t *)v6,  8u);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10019EE24(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EED18;
  qword_1002EED18 = (uint64_t)v1;
}

uint64_t sub_10019EF44(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10019F024(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10019F184(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v10 = objc_alloc_init(&OBJC_CLASS___IDSKTOptInOutStatusData);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 optInStatus]);
  [v10 setOptInStatus:v7];

  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([v5 publicAccountKey]);
  [v10 setPublicAccountKey:v8];

  id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 ktApplication]);
  [v10 setKtApplication:v9];

  [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:v6];
}

void sub_10019F344(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EED18;
  qword_1002EED18 = (uint64_t)v1;
}

void sub_10019F834(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EED18;
  qword_1002EED18 = (uint64_t)v1;
}

void sub_10019F864(uint64_t a1)
{
  if (qword_1002EED10 != -1) {
    dispatch_once(&qword_1002EED10, &stru_100287D50);
  }
  uint64_t v2 = (os_log_s *)qword_1002EED18;
  if (os_log_type_enabled((os_log_t)qword_1002EED18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "worker: %@", (uint8_t *)&v5, 0xCu);
  }

  id v4 = (void (**)(void, void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) idsObserver]);
  v4[2](v4, *(void *)(a1 + 32));
}

void sub_10019F94C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EED18;
  qword_1002EED18 = (uint64_t)v1;
}

void sub_10019FA94(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EED18;
  qword_1002EED18 = (uint64_t)v1;
}

void sub_10019FC20(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EED18;
  qword_1002EED18 = (uint64_t)v1;
}

void sub_10019FD84(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EED18;
  qword_1002EED18 = (uint64_t)v1;
}

void sub_10019FEE8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EED18;
  qword_1002EED18 = (uint64_t)v1;
}

void sub_1001A004C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EED18;
  qword_1002EED18 = (uint64_t)v1;
}

void sub_1001A01B0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EED18;
  qword_1002EED18 = (uint64_t)v1;
}

void sub_1001A06AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_1001A06E8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    if ([WeakRetained allDependentsSuccessful])
    {
      [v2 groupStart];
    }

    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 error]);
        int v4 = 138412290;
        int v5 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "Not running due to some failed dependent: %@",  (uint8_t *)&v4,  0xCu);
      }

      [v2 cancel];
    }
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v4) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "received callback for released object",  (uint8_t *)&v4,  2u);
  }
}

void sub_1001A080C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained completeOperation];
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "received callback for released object",  v3,  2u);
  }
}

void sub_1001A0F4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1001A0F64(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 72LL);
  return result;
}

void sub_1001A1024( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1001A103C(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 73LL);
  return result;
}

uint64_t sub_1001A1190(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 73LL) = 1;
  return result;
}

uint64_t sub_1001A11A8(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 72LL) = 1;
  return result;
}

void sub_1001A1574(uint64_t a1)
{
  if ([*(id *)(a1 + 32) fillInError])
  {
    uint64_t v2 = *(void **)(a1 + 32);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 internalSuccesses]);
    [v2 allSuccessful:v3];
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 72LL) = 0;
  *(_BYTE *)(*(void *)(a1 + 32) + 73LL) = 1;
}

void sub_1001A1A5C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1001A1A7C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001A1FB4(_Unwind_Exception *a1)
{
}

void sub_1001A1FC8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v3 = WeakRetained;
  if (WeakRetained)
  {
    int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue([WeakRetained log]);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v7 = 138412290;
      uint64_t v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "registerPushReceiver: %@", (uint8_t *)&v7, 0xCu);
    }

    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) receivers]);
    [v6 addObject:*(void *)(a1 + 32)];
  }
}

void sub_1001A2220(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) receivers]);
  id v3 = [v2 copy];

  int v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deliveryQueue]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1001A22F4;
  void v8[3] = &unk_100278E78;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 40);
  id v9 = v3;
  uint64_t v10 = v5;
  id v11 = v6;
  id v12 = *(id *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v4, v8);
}

void sub_1001A22F4(uint64_t a1)
{
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v12 objects:v18 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v13;
    *(void *)&__int128 v4 = 138412290LL;
    __int128 v11 = v4;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = *(void **)(*((void *)&v12 + 1) + 8LL * (void)v7);
        id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "log", v11, (void)v12));
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = v11;
          uint64_t v17 = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "didReceiveIncomingMessage: recv %@",  buf,  0xCu);
        }

        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) topic]);
        [v8 notifyPushChange:v10 userInfo:*(void *)(a1 + 56)];

        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v2 countByEnumeratingWithState:&v12 objects:v18 count:16];
    }

    while (v5);
  }
}

void sub_1001A258C(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale ISOCountryCodes](&OBJC_CLASS___NSLocale, "ISOCountryCodes"));
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      for (unint64_t i = 0LL; i != v4; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v10 + 1) + 8LL * (void)i);
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%ld",  +[NSLocale ITUCountryCodeForISOCountryCode:]( &OBJC_CLASS___NSLocale,  "ITUCountryCodeForISOCountryCode:",  v7)));
        [v1 setValue:v7 forKey:v8];
      }

      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v4);
  }

  id v9 = (void *)qword_1002EED30;
  qword_1002EED30 = (uint64_t)v1;
}

void sub_1001A2CEC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EED48;
  qword_1002EED48 = (uint64_t)v1;
}

void sub_1001A2D1C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EED48;
  qword_1002EED48 = (uint64_t)v1;
}

void sub_1001A2D4C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EED48;
  qword_1002EED48 = (uint64_t)v1;
}

void sub_1001A2D7C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EED48;
  qword_1002EED48 = (uint64_t)v1;
}

void sub_1001A2DAC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EED48;
  qword_1002EED48 = (uint64_t)v1;
}

void sub_1001A3948( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id location)
{
}

void sub_1001A3978(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v8 = WeakRetained;
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transitionOperation]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

    if (v4)
    {
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 domain]);
      if (![v5 isEqualToString:@"KTResultOperationError"])
      {
LABEL_6:

        goto LABEL_7;
      }

      id v6 = [v4 code];

      if (v6 == (id)3)
      {
        uint64_t v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v8 queue]);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_1001A3A88;
        block[3] = &unk_1002777A0;
        id v10 = v8;
        id v11 = v4;
        dispatch_sync(v7, block);

        uint64_t v5 = v10;
        goto LABEL_6;
      }
    }

id sub_1001A3A88(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onqueuePerformTimeoutWithUnderlyingError:*(void *)(a1 + 40)];
}

void sub_1001A3A94(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = WeakRetained;
  if (WeakRetained)
  {
    id v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001A3B24;
    block[3] = &unk_100276740;
    id v5 = v2;
    dispatch_async(v3, block);
  }
}

void sub_1001A3B24(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:description:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:description:",  @"KTResultOperationError",  4LL,  @"SIGTERM happened"));
  [*(id *)(a1 + 32) _onqueuePerformTimeoutWithUnderlyingError:v2];
}

void sub_1001A3F88( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1001A3FAC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _onqueuePerformTimeoutWithUnderlyingError:0];
}

void sub_1001A50BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1001A50D0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _onqueuePerformTimeoutWithUnderlyingError];
}

id sub_1001A5240(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) completed];
  return result;
}

LABEL_43:
  return v25;
}

  return v20;
}

    __int16 v41 = 0;
    goto LABEL_44;
  }

  __int16 v41 = 1;
  __int128 v13 = v53;
LABEL_44:

  return v41;
}

void sub_1001A5F00(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EED58;
  qword_1002EED58 = (uint64_t)v1;
}

void sub_1001A5F30(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EED58;
  qword_1002EED58 = (uint64_t)v1;
}

void sub_1001A5F60(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EED58;
  qword_1002EED58 = (uint64_t)v1;
}

void sub_1001A5F90(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EED58;
  qword_1002EED58 = (uint64_t)v1;
}

void sub_1001A5FC0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EED58;
  qword_1002EED58 = (uint64_t)v1;
}

void sub_1001A5FF0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EED58;
  qword_1002EED58 = (uint64_t)v1;
}

void sub_1001A6120(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  if (!v12)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    goto LABEL_17;
  }

  id v28 = 0LL;
  int v16 = -[KTTransparentData initWithUriVRFOutput:mapLeaf:pendingSMTs:error:]( objc_alloc(&OBJC_CLASS___KTTransparentData),  "initWithUriVRFOutput:mapLeaf:pendingSMTs:error:",  v12,  v13,  v14,  &v28);
  id v17 = v28;
  id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) applicationKeyStore]);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSince1970:]( NSDate,  "dateWithTimeIntervalSince1970:",  (double)(unint64_t)[v18 patLogBeginningMs] / 1000.0));
  -[KTTransparentData setCurrentTreeEpochBeginDate:](v16, "setCurrentTreeEpochBeginDate:", v19);

  if (!v16)
  {
    if (qword_1002EED50 != -1) {
      dispatch_once(&qword_1002EED50, &stru_100288010);
    }
    __int128 v23 = (os_log_s *)qword_1002EED58;
    if (os_log_type_enabled((os_log_t)qword_1002EED58, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      uint64_t v30 = v24;
      __int16 v31 = 2112;
      id v32 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "QueryResponse for fetchId %{public}@ failed to build transparentData: %@",  buf,  0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    goto LABEL_16;
  }

  uint64_t v20 = *(void *)(a1 + 48);
  id v27 = v17;
  unsigned __int8 v21 = -[KTTransparentData verifyServerInvariantsAt:error:](v16, "verifyServerInvariantsAt:error:", v20, &v27);
  id v22 = v27;

  if ((v21 & 1) == 0)
  {
    if (qword_1002EED50 != -1) {
      dispatch_once(&qword_1002EED50, &stru_100288030);
    }
    uint64_t v25 = (os_log_s *)qword_1002EED58;
    if (os_log_type_enabled((os_log_t)qword_1002EED58, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      uint64_t v30 = v26;
      __int16 v31 = 2112;
      id v32 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "QueryResponse for fetchId %{public}@ failed server invariant verification: %@",  buf,  0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    id v17 = v22;
LABEL_16:

    goto LABEL_17;
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();

LABEL_17:
}

void sub_1001A641C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EED58;
  qword_1002EED58 = (uint64_t)v1;
}

void sub_1001A644C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EED58;
  qword_1002EED58 = (uint64_t)v1;
}

void sub_1001A6A6C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EED68;
  qword_1002EED68 = (uint64_t)v1;
}

void sub_1001A6A9C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EED68;
  qword_1002EED68 = (uint64_t)v1;
}

void sub_1001A6ACC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EED68;
  qword_1002EED68 = (uint64_t)v1;
}

void sub_1001A6AFC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EED68;
  qword_1002EED68 = (uint64_t)v1;
}

void sub_1001A6B2C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EED68;
  qword_1002EED68 = (uint64_t)v1;
}

void sub_1001A6B5C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EED68;
  qword_1002EED68 = (uint64_t)v1;
}

void sub_1001A6DBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1001A6DE0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001A6DF0(uint64_t a1)
{
}

void sub_1001A6DF8(uint64_t a1)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:", -v2));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serverLoggableDatas]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyManagedDataStore serializeLoggableDatas:]( &OBJC_CLASS___TransparencyManagedDataStore,  "serializeLoggableDatas:",  v4));

  id v6 = *(void **)(a1 + 40);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uri]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) application]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountKey]);
  uint64_t v10 = *(void *)(*(void *)(a1 + 64) + 8LL);
  obuint64_t j = *(id *)(v10 + 40);
  uint64_t v11 = objc_claimAutoreleasedReturnValue( [v6 fetchRequestWithUri:v7 application:v8 accountKey:v9 loggableDatas:v5 youngerThan:v3 error:&obj]);
  objc_storeStrong((id *)(v10 + 40), obj);
  uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;

  uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
  if (v14)
  {
    uint64_t v15 = *(void *)(*(void *)(a1 + 64) + 8LL);
    id v48 = *(id *)(v15 + 40);
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472LL;
    v43[2] = sub_1001A71F0;
    v43[3] = &unk_100288180;
    int v16 = *(void **)(a1 + 40);
    id v17 = *(id *)(a1 + 48);
    uint64_t v18 = *(void *)(a1 + 56);
    id v44 = v17;
    uint64_t v46 = v18;
    id v19 = *(id *)(a1 + 40);
    uint64_t v20 = *(void *)(a1 + 64);
    id v45 = v19;
    uint64_t v47 = v20;
    [v16 performAndWaitForRequestId:v14 error:&v48 block:v43];
    objc_storeStrong((id *)(v15 + 40), v48);

    unsigned __int8 v21 = v44;
  }

  else
  {
    if (qword_1002EED70 != -1) {
      dispatch_once(&qword_1002EED70, &stru_1002881A0);
    }
    id v22 = (void *)qword_1002EED78;
    if (os_log_type_enabled((os_log_t)qword_1002EED78, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = *(void *)(a1 + 48);
      uint64_t v24 = *(void **)(a1 + 32);
      uint64_t v25 = v22;
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v24 uri]);
      id v27 = [*(id *)(a1 + 32) type];
      *(_DWORD *)buf = 138544130;
      uint64_t v51 = v23;
      __int16 v52 = 2160;
      uint64_t v53 = 1752392040LL;
      __int16 v54 = 2112;
      id v55 = v26;
      __int16 v56 = 2048;
      id v57 = v27;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Creating requestId %{public}@ for %{mask.hash}@ of type %lu",  buf,  0x2Au);
    }

    unsigned __int8 v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientLoggableDatas]);

    __int16 v41 = v3;
    if (v21)
    {
      id v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientLoggableDatas]);
      unsigned __int8 v21 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyManagedDataStore serializeLoggableDatas:]( &OBJC_CLASS___TransparencyManagedDataStore,  "serializeLoggableDatas:",  v28));
    }

    __int16 v29 = *(void **)(a1 + 40);
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uri]);
    __int16 v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) application]);
    id v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountKey]);
    id v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queryRequest]);
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queryResponse]);
    id v35 = [*(id *)(a1 + 32) type];
    uint64_t v36 = *(void *)(a1 + 48);
    uint64_t v37 = *(void *)(*(void *)(a1 + 64) + 8LL);
    id v42 = *(id *)(v37 + 40);
    uint64_t v38 = objc_claimAutoreleasedReturnValue( [v29 createRequestWithUri:v30 application:v31 accountKey:v32 serverData:v5 syncedData:v21 queryRequest:v33 queryResponse:v34 type:v35 clientId:v36 error:&v42]);
    objc_storeStrong((id *)(v37 + 40), v42);
    uint64_t v39 = *(void *)(*(void *)(a1 + 56) + 8LL);
    __int16 v40 = *(void **)(v39 + 40);
    *(void *)(v39 + 40) = v38;

    id v3 = v41;
  }
}

void sub_1001A71F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_1002EED70 != -1) {
    dispatch_once(&qword_1002EED70, &stru_100288138);
  }
  id v4 = (os_log_s *)qword_1002EED78;
  if (os_log_type_enabled((os_log_t)qword_1002EED78, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    *(_DWORD *)buf = 138543618;
    uint64_t v14 = v5;
    __int16 v15 = 2114;
    uint64_t v16 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Mapping requestId %{public}@ to cached requestId %{public}@",  buf,  0x16u);
  }

  [*(id *)(a1 + 40) createKTRequestID:*(void *)(a1 + 32) request:v3];
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8LL);
  obuint64_t j = *(id *)(v8 + 40);
  unsigned __int8 v9 = [v7 persistWithError:&obj];
  objc_storeStrong((id *)(v8 + 40), obj);
  if ((v9 & 1) == 0)
  {
    if (qword_1002EED70 != -1) {
      dispatch_once(&qword_1002EED70, &stru_100288158);
    }
    uint64_t v10 = (os_log_s *)qword_1002EED78;
    if (os_log_type_enabled((os_log_t)qword_1002EED78, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
      *(_DWORD *)buf = 138412290;
      uint64_t v14 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "failed to save RequestID for request: %@",  buf,  0xCu);
    }

    [*(id *)(a1 + 40) reportCoreDataPersistEventForLocation:@"requestIdLink" underlyingError:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  }
}

void sub_1001A73BC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EED78;
  qword_1002EED78 = (uint64_t)v1;
}

void sub_1001A73EC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EED78;
  qword_1002EED78 = (uint64_t)v1;
}

void sub_1001A741C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EED78;
  qword_1002EED78 = (uint64_t)v1;
}

void sub_1001A93F4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EED98;
  qword_1002EED98 = (uint64_t)v1;
}

void sub_1001A9554( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1001A9578(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001A9588(uint64_t a1)
{
}

void sub_1001A9590(uint64_t a1)
{
  double v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  obuint64_t j = *(id *)(v3 + 40);
  unsigned __int8 v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if ((v4 & 1) != 0)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[KTFailureEvent fetchRequest](&OBJC_CLASS___KTFailureEvent, "fetchRequest"));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"application == %@",  *(void *)(a1 + 40)));
    [v5 setPredicate:v6];

    [v5 setPropertiesToFetch:&off_10029A340];
    [v5 setReturnsDistinctResults:1];
    [v5 setResultType:2];
    [v5 setFetchLimit:*(void *)(a1 + 64)];
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  @"failureTime",  0LL));
    uint64_t v36 = v7;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v36, 1LL));
    [v5 setSortDescriptors:v8];

    unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v32 = *(id *)(v10 + 40);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 executeFetchRequest:v5 error:&v32]);
    objc_storeStrong((id *)(v10 + 40), v32);

    uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v31 = *(id *)(v12 + 40);
    +[TransparencyManagedDataStore cleanseError:](&OBJC_CLASS___TransparencyManagedDataStore, "cleanseError:", &v31);
    objc_storeStrong((id *)(v12 + 40), v31);
    if (v11 && [v11 count])
    {
      uint64_t v13 = objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [v11 count]));
      uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8LL);
      __int16 v15 = *(void **)(v14 + 40);
      *(void *)(v14 + 40) = v13;
    }

    __int128 v29 = 0u;
    __int128 v30 = 0u;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v11 reverseObjectEnumerator]);
    id v17 = [v16 countByEnumeratingWithState:&v27 objects:v35 count:16];
    if (v17)
    {
      id v18 = v17;
      uint64_t v19 = *(void *)v28;
      do
      {
        for (unint64_t i = 0LL; i != v18; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v28 != v19) {
            objc_enumerationMutation(v16);
          }
          unsigned __int8 v21 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
          id v22 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*((void *)&v27 + 1) + 8 * (void)i) objectForKeyedSubscript:@"eventId"]);
          [v21 addObject:v22];
        }

        id v18 = [v16 countByEnumeratingWithState:&v27 objects:v35 count:16];
      }

      while (v18);
    }
  }

  else
  {
    if (qword_1002EED90 != -1) {
      dispatch_once(&qword_1002EED90, &stru_100288208);
    }
    uint64_t v23 = (os_log_s *)qword_1002EED98;
    if (os_log_type_enabled((os_log_t)qword_1002EED98, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
      *(_DWORD *)buf = 138412290;
      uint64_t v38 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "failed to get : %@", buf, 0xCu);
    }

    uint64_t v25 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v33 = *(id *)(v25 + 40);
    +[TransparencyManagedDataStore cleanseError:](&OBJC_CLASS___TransparencyManagedDataStore, "cleanseError:", &v33);
    id v26 = v33;
    uint64_t v5 = *(void **)(v25 + 40);
    *(void *)(v25 + 40) = v26;
  }
}

void sub_1001A9930(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EED98;
  qword_1002EED98 = (uint64_t)v1;
}

void sub_1001A9A08(uint64_t a1)
{
  double v2 = *(void **)(a1 + 32);
  id v39 = 0LL;
  unsigned __int8 v3 = [v2 persistWithError:&v39];
  id v4 = v39;
  if ((v3 & 1) != 0)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  @"KTFailureEvent"));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"eventId IN %@",  *(void *)(a1 + 40)));
    [v5 setPredicate:v6];

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    id v37 = v4;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 executeFetchRequest:v5 error:&v37]);
    id v9 = v37;

    if (v8 && [v8 count])
    {
      __int128 v29 = v5;
      uint64_t v30 = a1;
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
      __int128 v33 = 0u;
      __int128 v34 = 0u;
      __int128 v35 = 0u;
      __int128 v36 = 0u;
      __int128 v28 = v8;
      obuint64_t j = v8;
      id v11 = [obj countByEnumeratingWithState:&v33 objects:v40 count:16];
      if (v11)
      {
        id v12 = v11;
        uint64_t v13 = *(void *)v34;
        while (2)
        {
          uint64_t v14 = 0LL;
          __int16 v15 = v9;
          do
          {
            if (*(void *)v34 != v13) {
              objc_enumerationMutation(obj);
            }
            uint64_t v16 = *(void **)(*((void *)&v33 + 1) + 8LL * (void)v14);
            id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 encodedError]);
            id v32 = v15;
            id v18 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyManagedDataStore deserializeNSError:error:]( &OBJC_CLASS___TransparencyManagedDataStore,  "deserializeNSError:error:",  v17,  &v32));
            id v9 = v32;

            if (!v18)
            {
              if (qword_1002EED90 != -1) {
                dispatch_once(&qword_1002EED90, &stru_100288268);
              }
              uint64_t v5 = v29;
              uint64_t v8 = v28;
              uint64_t v23 = (void *)qword_1002EED98;
              if (os_log_type_enabled((os_log_t)qword_1002EED98, OS_LOG_TYPE_ERROR))
              {
                uint64_t v24 = v23;
                uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v16 eventId]);
                *(_DWORD *)buf = 138543362;
                id v42 = v25;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "failed to decode failure event error for %{public}@",  buf,  0xCu);
              }

              uint64_t v26 = kTransparencyErrorDecode;
              __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([v16 eventId]);
              id v19 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:description:",  v26,  -300LL,  v9,  @"failed to decode stored error for event %@",  v27));

              (*(void (**)(void))(*(void *)(v30 + 48) + 16LL))();
              goto LABEL_28;
            }

            [v10 addObject:v18];

            uint64_t v14 = (char *)v14 + 1;
            __int16 v15 = v9;
          }

          while (v12 != v14);
          id v12 = [obj countByEnumeratingWithState:&v33 objects:v40 count:16];
          if (v12) {
            continue;
          }
          break;
        }
      }

      (*(void (**)(void))(*(void *)(v30 + 48) + 16LL))();
      id v19 = v9;
      uint64_t v8 = v28;
      uint64_t v5 = v29;
LABEL_28:
    }

    else
    {
      if (qword_1002EED90 != -1) {
        dispatch_once(&qword_1002EED90, &stru_100288248);
      }
      unsigned __int8 v21 = (os_log_s *)qword_1002EED98;
      if (os_log_type_enabled((os_log_t)qword_1002EED98, OS_LOG_TYPE_ERROR))
      {
        id v22 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138543362;
        id v42 = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "failed to find any failure event for %{public}@",  buf,  0xCu);
      }

      id v19 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:description:",  kTransparencyErrorDatabase,  -299LL,  v9,  @"failed to find any failure event for %@",  *(void *)(a1 + 40)));

      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    }
  }

  else
  {
    if (qword_1002EED90 != -1) {
      dispatch_once(&qword_1002EED90, &stru_100288228);
    }
    uint64_t v20 = (os_log_s *)qword_1002EED98;
    if (os_log_type_enabled((os_log_t)qword_1002EED98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v42 = v4;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "failed to get : %@", buf, 0xCu);
    }

    id v38 = v4;
    +[TransparencyManagedDataStore cleanseError:](&OBJC_CLASS___TransparencyManagedDataStore, "cleanseError:", &v38);
    id v19 = v38;

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_1001A9F14(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EED98;
  qword_1002EED98 = (uint64_t)v1;
}

void sub_1001A9F44(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EED98;
  qword_1002EED98 = (uint64_t)v1;
}

void sub_1001A9F74(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EED98;
  qword_1002EED98 = (uint64_t)v1;
}

void sub_1001AA0F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1001AA114(uint64_t a1)
{
  double v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  @"KTFailureEvent"));
  unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"eventId = %@",  *(void *)(a1 + 32)));
  [v2 setPredicate:v3];

  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8LL);
  obuint64_t j = *(id *)(v5 + 40);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 executeFetchRequest:v2 error:&obj]);
  objc_storeStrong((id *)(v5 + 40), obj);

  if (v6 && [v6 count] == (id)1)
  {
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 objectAtIndexedSubscript:0]);
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);

    *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  }

  else
  {
    if (qword_1002EED90 != -1) {
      dispatch_once(&qword_1002EED90, &stru_1002882B0);
    }
    id v9 = (os_log_s *)qword_1002EED98;
    if (os_log_type_enabled((os_log_t)qword_1002EED98, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v18 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "failed to find failure event for eventId %{public}@",  buf,  0xCu);
    }

    uint64_t v11 = objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:description:",  kTransparencyErrorDatabase,  -299LL,  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL),  @"failed to find failure event for %@",  *(void *)(a1 + 32)));
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8LL);
    uint64_t v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v15 = *(id *)(v14 + 40);
    +[TransparencyManagedDataStore cleanseError:](&OBJC_CLASS___TransparencyManagedDataStore, "cleanseError:", &v15);
    objc_storeStrong((id *)(v14 + 40), v15);
  }
}

void sub_1001AA358(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EED98;
  qword_1002EED98 = (uint64_t)v1;
}

void sub_1001AA484(uint64_t a1)
{
  if (qword_1002EED90 != -1) {
    dispatch_once(&qword_1002EED90, &stru_1002882D0);
  }
  double v2 = (os_log_s *)qword_1002EED98;
  if (os_log_type_enabled((os_log_t)qword_1002EED98, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138412290;
    uint64_t v5 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "failed to clear all failure events: %@",  (uint8_t *)&v4,  0xCu);
  }

void sub_1001AA54C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EED98;
  qword_1002EED98 = (uint64_t)v1;
}

void sub_1001AA624(uint64_t a1)
{
  double v2 = *(void **)(a1 + 32);
  id v32 = 0LL;
  unsigned __int8 v3 = [v2 persistWithError:&v32];
  id v4 = v32;
  if ((v3 & 1) != 0)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  @"KTFailureEvent"));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"eventId IN %@",  *(void *)(a1 + 40)));
    [v5 setPredicate:v6];

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    id v30 = v4;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 executeFetchRequest:v5 error:&v30]);
    id v9 = v30;

    if (v8)
    {
      __int128 v28 = 0u;
      __int128 v29 = 0u;
      __int128 v26 = 0u;
      __int128 v27 = 0u;
      id v10 = v8;
      id v11 = [v10 countByEnumeratingWithState:&v26 objects:v37 count:16];
      if (v11)
      {
        id v12 = v11;
        uint64_t v13 = *(void *)v27;
        do
        {
          for (unint64_t i = 0LL; i != v12; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v27 != v13) {
              objc_enumerationMutation(v10);
            }
            uint64_t v15 = *(void *)(*((void *)&v26 + 1) + 8LL * (void)i);
            uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
            [v16 deleteObject:v15];
          }

          id v12 = [v10 countByEnumeratingWithState:&v26 objects:v37 count:16];
        }

        while (v12);
      }
    }

    id v17 = *(void **)(a1 + 32);
    id v25 = v9;
    unsigned __int8 v18 = [v17 persistAndRefaultObjects:v8 error:&v25];
    id v19 = v25;

    if ((v18 & 1) == 0)
    {
      if (qword_1002EED90 != -1) {
        dispatch_once(&qword_1002EED90, &stru_100288310);
      }
      uint64_t v20 = (os_log_s *)qword_1002EED98;
      if (os_log_type_enabled((os_log_t)qword_1002EED98, OS_LOG_TYPE_ERROR))
      {
        unsigned __int8 v21 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138543618;
        id v34 = v21;
        __int16 v35 = 2112;
        id v36 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "failed to delete failed eventId %{public}@ : %@",  buf,  0x16u);
      }

      id v24 = v19;
      +[TransparencyManagedDataStore cleanseError:](&OBJC_CLASS___TransparencyManagedDataStore, "cleanseError:", &v24);
      id v22 = v24;

      id v19 = v22;
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    if (qword_1002EED90 != -1) {
      dispatch_once(&qword_1002EED90, &stru_1002882F0);
    }
    uint64_t v23 = (os_log_s *)qword_1002EED98;
    if (os_log_type_enabled((os_log_t)qword_1002EED98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v34 = v4;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "failed to get : %@", buf, 0xCu);
    }

    id v31 = v4;
    +[TransparencyManagedDataStore cleanseError:](&OBJC_CLASS___TransparencyManagedDataStore, "cleanseError:", &v31);
    id v19 = v31;

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_1001AA988(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EED98;
  qword_1002EED98 = (uint64_t)v1;
}

void sub_1001AA9B8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EED98;
  qword_1002EED98 = (uint64_t)v1;
}

void sub_1001AAC1C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EED98;
  qword_1002EED98 = (uint64_t)v1;
}

void sub_1001AAC4C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EED98;
  qword_1002EED98 = (uint64_t)v1;
}

void sub_1001AAF5C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDA8;
  qword_1002EEDA8 = (uint64_t)v1;
}

void sub_1001AAF8C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDA8;
  qword_1002EEDA8 = (uint64_t)v1;
}

void sub_1001AB0E0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDA8;
  qword_1002EEDA8 = (uint64_t)v1;
}

void sub_1001AB110(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDA8;
  qword_1002EEDA8 = (uint64_t)v1;
}

void sub_1001AB3F0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDA8;
  qword_1002EEDA8 = (uint64_t)v1;
}

void sub_1001AB420(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDA8;
  qword_1002EEDA8 = (uint64_t)v1;
}

void sub_1001AB450(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDA8;
  qword_1002EEDA8 = (uint64_t)v1;
}

void sub_1001AB63C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDA8;
  qword_1002EEDA8 = (uint64_t)v1;
}

void sub_1001ABF38(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDA8;
  qword_1002EEDA8 = (uint64_t)v1;
}

void sub_1001ABF68(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDA8;
  qword_1002EEDA8 = (uint64_t)v1;
}

void sub_1001AC340(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDA8;
  qword_1002EEDA8 = (uint64_t)v1;
}

void sub_1001AC370(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDA8;
  qword_1002EEDA8 = (uint64_t)v1;
}

void sub_1001AC7B0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDA8;
  qword_1002EEDA8 = (uint64_t)v1;
}

void sub_1001AC7E0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDA8;
  qword_1002EEDA8 = (uint64_t)v1;
}

void sub_1001AC810(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDA8;
  qword_1002EEDA8 = (uint64_t)v1;
}

void sub_1001AC840(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDA8;
  qword_1002EEDA8 = (uint64_t)v1;
}

void sub_1001ACDB8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDA8;
  qword_1002EEDA8 = (uint64_t)v1;
}

void sub_1001ACDE8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDA8;
  qword_1002EEDA8 = (uint64_t)v1;
}

void sub_1001ACE18(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDA8;
  qword_1002EEDA8 = (uint64_t)v1;
}

void sub_1001ACE48(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDA8;
  qword_1002EEDA8 = (uint64_t)v1;
}

void sub_1001AD02C(_Unwind_Exception *a1)
{
}

void sub_1001AD050(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDA8;
  qword_1002EEDA8 = (uint64_t)v1;
}

void sub_1001AD198(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDA8;
  qword_1002EEDA8 = (uint64_t)v1;
}

void sub_1001AD440(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (!v5)
  {
    uint64_t v6 = *(void **)(a1 + 32);
    id v7 = 0LL;
    [v6 configureFromNetworkBagData:a2 error:&v7];
    id v5 = v7;
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1001AD788(_Unwind_Exception *a1)
{
}

void sub_1001AD79C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDA8;
  qword_1002EEDA8 = (uint64_t)v1;
}

void sub_1001AD7CC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDA8;
  qword_1002EEDA8 = (uint64_t)v1;
}

void sub_1001AD7FC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDA8;
  qword_1002EEDA8 = (uint64_t)v1;
}

void sub_1001AD82C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDA8;
  qword_1002EEDA8 = (uint64_t)v1;
}

void sub_1001ADA30(_Unwind_Exception *exception_object)
{
}

void sub_1001ADA4C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDA8;
  qword_1002EEDA8 = (uint64_t)v1;
}

void sub_1001ADEFC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDB8;
  qword_1002EEDB8 = (uint64_t)v1;
}

void sub_1001AE7BC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDB8;
  qword_1002EEDB8 = (uint64_t)v1;
}

void sub_1001AE7EC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDB8;
  qword_1002EEDB8 = (uint64_t)v1;
}

void sub_1001AEA74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1001AEA98(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001AEAA8(uint64_t a1)
{
}

void sub_1001AEAB0(uint64_t a1)
{
  double v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  @"KTTreeHead"));
  unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"isMapHead == NO && application == %@ && logBeginTime == %llu && consistencyVerified == %d",  *(void *)(a1 + 32),  *(void *)(a1 + 64),  1LL));
  [v2 setPredicate:v3];

  [v2 setPropertiesToFetch:&off_10029A358];
  [v2 setReturnsDistinctResults:1];
  [v2 setResultType:2];
  [v2 setFetchLimit:1];
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  @"revision",  0LL));
  __int16 v40 = v4;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v40, 1LL));
  [v2 setSortDescriptors:v5];

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8LL);
  obuint64_t j = *(id *)(v7 + 40);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 executeFetchRequest:v2 error:&obj]);
  objc_storeStrong((id *)(v7 + 40), obj);

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v33 = *(id *)(v9 + 40);
  +[TransparencyManagedDataStore cleanseError:](&OBJC_CLASS___TransparencyManagedDataStore, "cleanseError:", &v33);
  objc_storeStrong((id *)(v9 + 40), v33);
  if (v8 && [v8 count])
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 objectAtIndexedSubscript:0]);
    uint64_t v11 = objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:@"revision"]);
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8LL);
    uint64_t v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    if (qword_1002EEDB0 != -1) {
      dispatch_once(&qword_1002EEDB0, &stru_100288760);
    }
    uint64_t v14 = (os_log_s *)qword_1002EEDB8;
    if (os_log_type_enabled((os_log_t)qword_1002EEDB8, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
      uint64_t v16 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      uint64_t v37 = v15;
      __int16 v38 = 2112;
      uint64_t v39 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "latest verified revision %@ for %@", buf, 0x16u);
    }

    id v17 = v8;
  }

  else
  {
    unsigned __int8 v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"isMapHead == NO && application == %@ && logBeginTime == %llu && signatureVerified == %d && consistencyVerified == %d",  *(void *)(a1 + 32),  *(void *)(a1 + 64),  1LL,  2LL));
    [v2 setPredicate:v18];

    id v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  @"revision",  1LL));
    __int16 v35 = v19;
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v35, 1LL));
    [v2 setSortDescriptors:v20];

    unsigned __int8 v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
    uint64_t v22 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v32 = *(id *)(v22 + 40);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v21 executeFetchRequest:v2 error:&v32]);
    objc_storeStrong((id *)(v22 + 40), v32);

    if (v17 && [v17 count])
    {
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v17 objectAtIndexedSubscript:0]);
      uint64_t v24 = objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:@"revision"]);
      uint64_t v25 = *(void *)(*(void *)(a1 + 56) + 8LL);
      __int128 v26 = *(void **)(v25 + 40);
      *(void *)(v25 + 40) = v24;

      if (qword_1002EEDB0 != -1) {
        dispatch_once(&qword_1002EEDB0, &stru_100288780);
      }
      __int128 v27 = (os_log_s *)qword_1002EEDB8;
      if (os_log_type_enabled((os_log_t)qword_1002EEDB8, OS_LOG_TYPE_INFO))
      {
        uint64_t v28 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
        uint64_t v29 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        uint64_t v37 = v28;
        __int16 v38 = 2112;
        uint64_t v39 = v29;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_INFO,  "earliest pending revision %@ for %@",  buf,  0x16u);
      }
    }

    uint64_t v30 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v31 = *(id *)(v30 + 40);
    +[TransparencyManagedDataStore cleanseError:](&OBJC_CLASS___TransparencyManagedDataStore, "cleanseError:", &v31);
    objc_storeStrong((id *)(v30 + 40), v31);
  }
}

void sub_1001AEF38(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDB8;
  qword_1002EEDB8 = (uint64_t)v1;
}

void sub_1001AEF68(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDB8;
  qword_1002EEDB8 = (uint64_t)v1;
}

void sub_1001AF0CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1001AF0F0(uint64_t a1)
{
  double v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  obuint64_t j = *(id *)(v3 + 40);
  unsigned __int8 v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if ((v4 & 1) != 0)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  @"KTTreeHead"));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"isMapHead == NO && application == %@ && logBeginTime == %llu && signatureVerified == %d && consistencyVerified == %d",  *(void *)(a1 + 40),  *(void *)(a1 + 64),  1LL,  1LL));
    [v5 setPredicate:v6];

    [v5 setPropertiesToFetch:&off_10029A370];
    [v5 setReturnsDistinctResults:1];
    [v5 setResultType:2];
    [v5 setFetchLimit:1];
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  @"revision",  0LL));
    id v44 = v7;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v44, 1LL));
    [v5 setSortDescriptors:v8];

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v37 = *(id *)(v10 + 40);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 executeFetchRequest:v5 error:&v37]);
    objc_storeStrong((id *)(v10 + 40), v37);

    uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v36 = *(id *)(v12 + 40);
    +[TransparencyManagedDataStore cleanseError:](&OBJC_CLASS___TransparencyManagedDataStore, "cleanseError:", &v36);
    objc_storeStrong((id *)(v12 + 40), v36);
    if (v11 && [v11 count])
    {
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 objectAtIndexedSubscript:0]);
      uint64_t v14 = objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:@"sth"]);
      uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8LL);
      uint64_t v16 = *(void **)(v15 + 40);
      *(void *)(v15 + 40) = v14;

      if (qword_1002EEDB0 != -1) {
        dispatch_once(&qword_1002EEDB0, &stru_1002887E8);
      }
      id v17 = (os_log_s *)qword_1002EEDB8;
      if (os_log_type_enabled((os_log_t)qword_1002EEDB8, OS_LOG_TYPE_INFO))
      {
        uint64_t v18 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
        uint64_t v19 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        uint64_t v41 = v18;
        __int16 v42 = 2112;
        uint64_t v43 = v19;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "latest verified STH %@ for %@", buf, 0x16u);
      }

      uint64_t v20 = v11;
    }

    else
    {
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"isMapHead == NO && application == %@ && logBeginTime == %llu && signatureVerified == %d && consistencyVerified == %d",  *(void *)(a1 + 40),  *(void *)(a1 + 64),  1LL,  2LL));
      [v5 setPredicate:v22];

      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  @"revision",  1LL));
      uint64_t v39 = v23;
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v39, 1LL));
      [v5 setSortDescriptors:v24];

      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v25 executeFetchRequest:v5 error:*(void *)(a1 + 72)]);

      if (v20 && [v20 count])
      {
        __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([v20 objectAtIndexedSubscript:0]);
        uint64_t v27 = objc_claimAutoreleasedReturnValue([v26 objectForKeyedSubscript:@"sth"]);
        uint64_t v28 = *(void *)(*(void *)(a1 + 56) + 8LL);
        uint64_t v29 = *(void **)(v28 + 40);
        *(void *)(v28 + 40) = v27;

        if (qword_1002EEDB0 != -1) {
          dispatch_once(&qword_1002EEDB0, &stru_100288808);
        }
        uint64_t v30 = (os_log_s *)qword_1002EEDB8;
        if (os_log_type_enabled((os_log_t)qword_1002EEDB8, OS_LOG_TYPE_INFO))
        {
          uint64_t v31 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
          uint64_t v32 = *(void *)(a1 + 40);
          *(_DWORD *)buf = 138412546;
          uint64_t v41 = v31;
          __int16 v42 = 2112;
          uint64_t v43 = v32;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "latest verified STH %@ for %@", buf, 0x16u);
        }
      }

      else
      {
        uint64_t v33 = objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorGossip,  -226LL,  @"TLT STH doesn't exist in local database"));
        uint64_t v34 = *(void *)(*(void *)(a1 + 48) + 8LL);
        __int16 v35 = *(void **)(v34 + 40);
        *(void *)(v34 + 40) = v33;
      }
    }
  }

  else
  {
    if (qword_1002EEDB0 != -1) {
      dispatch_once(&qword_1002EEDB0, &stru_1002887C8);
    }
    unsigned __int8 v21 = (os_log_s *)qword_1002EEDB8;
    if (os_log_type_enabled((os_log_t)qword_1002EEDB8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "failed to get latest tree head STH", buf, 2u);
    }
  }

void sub_1001AF608(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDB8;
  qword_1002EEDB8 = (uint64_t)v1;
}

void sub_1001AF638(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDB8;
  qword_1002EEDB8 = (uint64_t)v1;
}

void sub_1001AF668(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDB8;
  qword_1002EEDB8 = (uint64_t)v1;
}

void sub_1001AF7DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1001AF800(uint64_t a1)
{
  double v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  @"KTTreeHead"));
  if (*(_BYTE *)(a1 + 72))
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 73)));
    unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"isMapHead == %@ && application == %@ && logBeginTime == %llu && signatureVerified == %d && inclusionVerified == %d",  v3,  *(void *)(a1 + 32),  *(void *)(a1 + 64),  1LL,  2LL));
    [v2 setPredicate:v4];
  }

  else
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"isMapHead == NO && application == %@ && logBeginTime == %llu && signatureVerified == %d && consistencyVerified == %d",  *(void *)(a1 + 32),  *(void *)(a1 + 64),  1LL,  2LL));
    [v2 setPredicate:v3];
  }

  [v2 setPropertiesToFetch:&off_10029A388];
  [v2 setReturnsDistinctResults:1];
  [v2 setResultType:2];
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  @"revision",  1LL));
  uint64_t v28 = v5;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v28, 1LL));
  [v2 setSortDescriptors:v6];

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8LL);
  obuint64_t j = *(id *)(v8 + 40);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 executeFetchRequest:v2 error:&obj]);
  objc_storeStrong((id *)(v8 + 40), obj);

  uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v25 = *(id *)(v10 + 40);
  +[TransparencyManagedDataStore cleanseError:](&OBJC_CLASS___TransparencyManagedDataStore, "cleanseError:", &v25);
  objc_storeStrong((id *)(v10 + 40), v25);
  if (v9 && [v9 count])
  {
    uint64_t v11 = objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [v9 count]));
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8LL);
    uint64_t v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;
  }

  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v14 = v9;
  id v15 = [v14 countByEnumeratingWithState:&v21 objects:v27 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = *(void *)v22;
    do
    {
      uint64_t v18 = 0LL;
      do
      {
        if (*(void *)v22 != v17) {
          objc_enumerationMutation(v14);
        }
        uint64_t v19 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*((void *)&v21 + 1) + 8 * (void)v18) objectForKeyedSubscript:@"revision"]);
        [v19 addObject:v20];

        uint64_t v18 = (char *)v18 + 1;
      }

      while (v16 != v18);
      id v16 = [v14 countByEnumeratingWithState:&v21 objects:v27 count:16];
    }

    while (v16);
  }
}

void sub_1001AFC54(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  obuint64_t j = a2;
  id v22 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v22)
  {
    uint64_t v21 = *(void *)v24;
    uint64_t v19 = a1;
    uint64_t v20 = a4;
    do
    {
      for (unint64_t i = 0LL; i != v22; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v24 != v21) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void **)(*((void *)&v23 + 1) + 8LL * (void)i);
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 sth]);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[SignedObjectHolder parseFromData:error:]( &OBJC_CLASS___SignedLogHead,  "parseFromData:error:",  v8,  a4));

        if (v9)
        {
          uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 parsedLogHead]);
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 logHeadHash]);

          uint64_t v12 = *(void **)(a1 + 32);
          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v7 application]);
          id v14 = [v7 getUnsigned:"logBeginTime"];
          id v15 = [v7 logType];
          id v16 = [v7 getUnsigned:"revision"];
          LOBYTE(v17) = [v7 gossip] != 0;
          LODWORD(v16) = [v12 haveTreeHead:v11 isMapHead:0 application:v13 logBeginTime:v14 logType:v15 revision:v16 gossip:v17 error:a4];

          if ((_DWORD)v16)
          {
            a1 = v19;
            [*(id *)(v19 + 32) deleteObject:v7];
          }

          else
          {
            [v7 setLogHeadHash:v11];
            a1 = v19;
          }

          a4 = v20;
        }

        else
        {
          [*(id *)(a1 + 32) deleteObject:v7];
        }
      }

      id v22 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
    }

    while (v22);
  }

  [*(id *)(a1 + 32) persistAndRefaultObjects:obj error:a4];
}

void sub_1001AFEA0(uint64_t a1)
{
  if (qword_1002EEDB0 != -1) {
    dispatch_once(&qword_1002EEDB0, &stru_100288878);
  }
  double v2 = (os_log_s *)qword_1002EEDB8;
  if (os_log_type_enabled((os_log_t)qword_1002EEDB8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138412290;
    uint64_t v5 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "failed to populate log head hash in KTTreeHead: %@",  (uint8_t *)&v4,  0xCu);
  }

void sub_1001AFF68(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDB8;
  qword_1002EEDB8 = (uint64_t)v1;
}

void sub_1001B0650( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1001B0668(uint64_t a1)
{
  double v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v31 = 0LL;
  id v4 = [v2 countOutstandingSTHsForApplication:v3 error:&v31];
  id v5 = v31;
  if (v4 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    if (qword_1002EEDB0 != -1) {
      dispatch_once(&qword_1002EEDB0, &stru_100288898);
    }
    uint64_t v6 = (os_log_s *)qword_1002EEDB8;
    if (os_log_type_enabled((os_log_t)qword_1002EEDB8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      uint64_t v33 = v7;
      __int16 v34 = 2112;
      id v35 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "failed to get outstanding STHs for %@: %@",  buf,  0x16u);
    }

    if (*(void *)(a1 + 56) && v5) {
      **(void **)(a1 + 56) = v5;
    }
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 0;
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logger]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v4));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyAnalytics formatEventName:application:]( &OBJC_CLASS___TransparencyAnalytics,  "formatEventName:application:",  @"OutstandingSTHs",  *(void *)(a1 + 40)));
  [v8 logMetric:v9 withName:v10];

  uint64_t v11 = *(void **)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  id v30 = v5;
  id v13 = [v11 countOutstandingSMHsForApplication:v12 error:&v30];
  id v14 = v30;

  if (v13 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    if (qword_1002EEDB0 != -1) {
      dispatch_once(&qword_1002EEDB0, &stru_1002888B8);
    }
    id v15 = (os_log_s *)qword_1002EEDB8;
    if (os_log_type_enabled((os_log_t)qword_1002EEDB8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      uint64_t v33 = v16;
      __int16 v34 = 2112;
      id v35 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "failed to get outstanding SMHs for %@: %@",  buf,  0x16u);
    }

    if (*(void *)(a1 + 56) && v14) {
      **(void **)(a1 + 56) = v14;
    }
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 0;
  }

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logger]);
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v13));
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyAnalytics formatEventName:application:]( &OBJC_CLASS___TransparencyAnalytics,  "formatEventName:application:",  @"OutstandingSMHs",  *(void *)(a1 + 40)));
  [v17 logMetric:v18 withName:v19];

  uint64_t v20 = *(void **)(a1 + 32);
  uint64_t v21 = *(void *)(a1 + 40);
  id v29 = v14;
  id v22 = [v20 countTotalSTHsForApplication:v21 error:&v29];
  id v23 = v29;

  if (v22 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    if (qword_1002EEDB0 != -1) {
      dispatch_once(&qword_1002EEDB0, &stru_1002888D8);
    }
    __int128 v24 = (os_log_s *)qword_1002EEDB8;
    if (os_log_type_enabled((os_log_t)qword_1002EEDB8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      uint64_t v33 = v25;
      __int16 v34 = 2112;
      id v35 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "failed to get total STHs for %@: %@",  buf,  0x16u);
    }

    if (*(void *)(a1 + 56) && v23) {
      **(void **)(a1 + 56) = v23;
    }
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 0;
  }

  __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logger]);
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v22));
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyAnalytics formatEventName:application:]( &OBJC_CLASS___TransparencyAnalytics,  "formatEventName:application:",  @"TotalSTHs",  *(void *)(a1 + 40)));
  [v26 logMetric:v27 withName:v28];
}

void sub_1001B0A78(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDB8;
  qword_1002EEDB8 = (uint64_t)v1;
}

void sub_1001B0AA8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDB8;
  qword_1002EEDB8 = (uint64_t)v1;
}

void sub_1001B0AD8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDB8;
  qword_1002EEDB8 = (uint64_t)v1;
}

void sub_1001B0C04(uint64_t a1)
{
  if (qword_1002EEDB0 != -1) {
    dispatch_once(&qword_1002EEDB0, &stru_100288920);
  }
  double v2 = (os_log_s *)qword_1002EEDB8;
  if (os_log_type_enabled((os_log_t)qword_1002EEDB8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138412290;
    uint64_t v5 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "failed to delete tree heads from prior epoch: %@",  (uint8_t *)&v4,  0xCu);
  }

void sub_1001B0CCC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDB8;
  qword_1002EEDB8 = (uint64_t)v1;
}

void sub_1001B12F4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDB8;
  qword_1002EEDB8 = (uint64_t)v1;
}

void sub_1001B1324(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDB8;
  qword_1002EEDB8 = (uint64_t)v1;
}

void sub_1001B1354(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDB8;
  qword_1002EEDB8 = (uint64_t)v1;
}

void sub_1001B1384(uint64_t a1, void *a2, _BYTE *a3, void **a4)
{
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  obuint64_t j = a2;
  id v6 = [obj countByEnumeratingWithState:&v25 objects:v31 count:16];
  if (v6)
  {
    id v8 = v6;
    uint64_t v9 = *(void *)v26;
    *(void *)&__int128 v7 = 138412290LL;
    __int128 v22 = v7;
    do
    {
      uint64_t v10 = 0LL;
      do
      {
        if (*(void *)v26 != v9) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(void *)(*((void *)&v25 + 1) + 8LL * (void)v10);
        unint64_t v12 = *(void *)(a1 + 56) - 1LL;
        if (v12 >= 3)
        {
          if (qword_1002EEDB0 != -1) {
            dispatch_once(&qword_1002EEDB0, &stru_1002889A0);
          }
          uint64_t v18 = (void *)qword_1002EEDB8;
          if (os_log_type_enabled((os_log_t)qword_1002EEDB8, OS_LOG_TYPE_ERROR))
          {
            uint64_t v19 = *(void **)(a1 + 32);
            uint64_t v20 = v18;
            uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v19 downloadId]);
            *(_DWORD *)buf = 138543362;
            id v30 = v21;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "invalid download type for fail head downloadId %{public}@",  buf,  0xCu);
          }

          objc_msgSend(*(id *)(a1 + 40), "refaultObject:", v11, v22);
        }

        else
        {
          uint64_t v13 = qword_10024C5E0[v12];
          id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) createSignedTreeHeadFailure]);
          id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) domain]);
          [v14 setErrorDomain:v15];

          objc_msgSend(v14, "setErrorCode:", objc_msgSend(*(id *)(a1 + 48), "code"));
          [v14 setUnsigned:"verificationType" value:v13];
          [v14 setSth:v11];
          if (([*(id *)(a1 + 40) persistAndRefaultObject:v11 error:a4] & 1) == 0)
          {
            if (qword_1002EEDB0 != -1) {
              dispatch_once(&qword_1002EEDB0, &stru_1002889C0);
            }
            uint64_t v16 = (os_log_s *)qword_1002EEDB8;
            if (os_log_type_enabled((os_log_t)qword_1002EEDB8, OS_LOG_TYPE_ERROR))
            {
              if (a4) {
                uint64_t v17 = *a4;
              }
              else {
                uint64_t v17 = 0LL;
              }
              *(_DWORD *)buf = v22;
              id v30 = v17;
              _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "failed to persist failed head download: %@",  buf,  0xCu);
            }

            if (a4 && *a4) {
              objc_msgSend( *(id *)(a1 + 40),  "reportCoreDataPersistEventForLocation:underlyingError:",  @"failHeadDownloadRecord");
            }
            *a3 = 1;
          }
        }

        uint64_t v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      id v8 = [obj countByEnumeratingWithState:&v25 objects:v31 count:16];
    }

    while (v8);
  }
}

void sub_1001B1688(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDB8;
  qword_1002EEDB8 = (uint64_t)v1;
}

void sub_1001B16B8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDB8;
  qword_1002EEDB8 = (uint64_t)v1;
}

void sub_1001B1848(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDB8;
  qword_1002EEDB8 = (uint64_t)v1;
}

void sub_1001B1878(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v11 = 0LL;
  [v3 failHeadDownloadRecord:a2 failure:v4 error:&v11];
  id v5 = v11;
  id v6 = *(void **)(a1 + 32);
  id v10 = v5;
  unsigned __int8 v7 = [v6 persistWithError:&v10];
  id v8 = v10;

  if ((v7 & 1) == 0)
  {
    if (qword_1002EEDB0 != -1) {
      dispatch_once(&qword_1002EEDB0, &stru_100288A28);
    }
    uint64_t v9 = (os_log_s *)qword_1002EEDB8;
    if (os_log_type_enabled((os_log_t)qword_1002EEDB8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v13 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "failed to save inclusion proof failure: %@",  buf,  0xCu);
    }

    [*(id *)(a1 + 32) reportCoreDataPersistEventForLocation:@"failSTHDownload" underlyingError:v8];
  }
}

void sub_1001B19A8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDB8;
  qword_1002EEDB8 = (uint64_t)v1;
}

void sub_1001B1AD4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1001B1AEC(uint64_t a1)
{
  double v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  @"KTTreeHead"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"application = %@ AND signatureVerified = %d AND revision IN %@",  *(void *)(a1 + 32),  0LL,  *(void *)(a1 + 40)));
  [v2 setPredicate:v3];

  [v2 setPropertiesToFetch:&off_10029A3A0];
  [v2 setReturnsDistinctResults:1];
  [v2 setResultType:2];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) context]);
  id v22 = 0LL;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 executeFetchRequest:v2 error:&v22]);
  id v6 = v22;

  if (v5 && [v5 count])
  {
    id v17 = v6;
    unsigned __int8 v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [v5 count]));
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    id v8 = v5;
    id v9 = [v8 countByEnumeratingWithState:&v18 objects:v23 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v19;
      do
      {
        unint64_t v12 = 0LL;
        do
        {
          if (*(void *)v19 != v11) {
            objc_enumerationMutation(v8);
          }
          id v13 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*((void *)&v18 + 1) + 8 * (void)v12) objectForKeyedSubscript:@"sth"]);
          [v7 addObject:v13];

          unint64_t v12 = (char *)v12 + 1;
        }

        while (v10 != v12);
        id v10 = [v8 countByEnumeratingWithState:&v18 objects:v23 count:16];
      }

      while (v10);
    }

    uint64_t v14 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](&OBJC_CLASS___NSArray, "arrayWithArray:", v7));
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8LL);
    uint64_t v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;

    id v6 = v17;
  }
}

void sub_1001B2330( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1001B2354(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001B2364(uint64_t a1)
{
}

void sub_1001B236C(void *a1)
{
  double v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[6] + 8LL);
  obuint64_t j = *(id *)(v4 + 40);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 fetchDownloadRecordById:v3 error:&obj]);
  objc_storeStrong((id *)(v4 + 40), obj);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 downloadId]);
  unsigned int v7 = [v6 isEqual:a1[5]];

  if (v7) {
    *(_BYTE *)(*(void *)(a1[7] + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  }
  uint64_t v8 = *(void *)(a1[6] + 8LL);
  id v9 = *(id *)(v8 + 40);
  +[TransparencyManagedDataStore cleanseError:](&OBJC_CLASS___TransparencyManagedDataStore, "cleanseError:", &v9);
  objc_storeStrong((id *)(v8 + 40), v9);
}

void sub_1001B256C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1001B2590(uint64_t a1)
{
  double v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  @"DownloadRecord"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"downloadId = %@",  *(void *)(a1 + 32)));
  [v2 setPredicate:v3];

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8LL);
  obuint64_t j = *(id *)(v5 + 40);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 executeFetchRequest:v2 error:&obj]);
  objc_storeStrong((id *)(v5 + 40), obj);

  if (v6 && [v6 count])
  {
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    id v7 = v6;
    id v8 = [v7 countByEnumeratingWithState:&v20 objects:v27 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v21;
      do
      {
        for (unint64_t i = 0LL; i != v9; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v21 != v10) {
            objc_enumerationMutation(v7);
          }
          [*(id *)(*((void *)&v20 + 1) + 8 * (void)i) setResponse:*(void *)(a1 + 48)];
        }

        id v9 = [v7 countByEnumeratingWithState:&v20 objects:v27 count:16];
      }

      while (v9);
    }
  }

  else
  {
    if (qword_1002EEDC0 != -1) {
      dispatch_once(&qword_1002EEDC0, &stru_100288AA8);
    }
    unint64_t v12 = (os_log_s *)qword_1002EEDC8;
    if (os_log_type_enabled((os_log_t)qword_1002EEDC8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v26 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "received response for deleted downloadId %{public}@",  buf,  0xCu);
    }
  }

  uint64_t v14 = *(void **)(a1 + 40);
  uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v19 = *(id *)(v15 + 40);
  unsigned __int8 v16 = [v14 persistWithError:&v19];
  objc_storeStrong((id *)(v15 + 40), v19);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v16;
  uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v18 = *(id *)(v17 + 40);
  +[TransparencyManagedDataStore cleanseError:](&OBJC_CLASS___TransparencyManagedDataStore, "cleanseError:", &v18);
  objc_storeStrong((id *)(v17 + 40), v18);
}

void sub_1001B2810(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDC8;
  qword_1002EEDC8 = (uint64_t)v1;
}

void sub_1001B29E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_1001B2A08(uint64_t a1)
{
  double v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
  obuint64_t j = *(id *)(v4 + 40);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v2 fetchDownloadRecordById:v3 error:&obj]);
  objc_storeStrong((id *)(v4 + 40), obj);
  if (v5) {
    [*(id *)(a1 + 32) deleteObject:v5];
  }
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v12 = *(id *)(v7 + 40);
  unsigned __int8 v8 = [v6 persistWithError:&v12];
  objc_storeStrong((id *)(v7 + 40), v12);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v8;
  uint64_t v9 = objc_claimAutoreleasedReturnValue( +[SecXPCHelper cleanseErrorForXPC:]( &OBJC_CLASS___SecXPCHelper,  "cleanseErrorForXPC:",  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL)));
  uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;
}

void sub_1001B2AE0(uint64_t a1)
{
  if (qword_1002EEDC0 != -1) {
    dispatch_once(&qword_1002EEDC0, &stru_100288AC8);
  }
  double v2 = (os_log_s *)qword_1002EEDC8;
  if (os_log_type_enabled((os_log_t)qword_1002EEDC8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "failed to delete download record for UUID %@: %@",  (uint8_t *)&v5,  0x16u);
  }

void sub_1001B2BBC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDC8;
  qword_1002EEDC8 = (uint64_t)v1;
}

void sub_1001B2D7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_1001B2DA0(uint64_t a1)
{
  double v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  @"DownloadRecord"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"application == %@",  *(void *)(a1 + 32)));
  [v2 setPredicate:v3];

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
  obuint64_t j = *(id *)(v5 + 40);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 executeFetchRequest:v2 error:&obj]);
  objc_storeStrong((id *)(v5 + 40), obj);

  [*(id *)(a1 + 40) deleteObjectSet:v6];
  __int16 v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v11 = *(id *)(v8 + 40);
  LOBYTE(sub_1000E8840(v2, v3, v1, v5) = [v7 persistWithError:&v11];
  objc_storeStrong((id *)(v8 + 40), v11);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v5;
  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v10 = *(id *)(v9 + 40);
  +[TransparencyManagedDataStore cleanseError:](&OBJC_CLASS___TransparencyManagedDataStore, "cleanseError:", &v10);
  objc_storeStrong((id *)(v9 + 40), v10);
}

void sub_1001B2EDC(uint64_t a1)
{
  if (qword_1002EEDC0 != -1) {
    dispatch_once(&qword_1002EEDC0, &stru_100288AE8);
  }
  double v2 = (os_log_s *)qword_1002EEDC8;
  if (os_log_type_enabled((os_log_t)qword_1002EEDC8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "failed to delete download record for %@: %@",  (uint8_t *)&v5,  0x16u);
  }

void sub_1001B2FB8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  double v2 = (void *)qword_1002EEDC8;
  qword_1002EEDC8 = (uint64_t)v1;
}

void sub_1001B3184( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

void sub_1001B31A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
  obuint64_t j = *(id *)(v5 + 40);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 fetchDownloadRecord:v2 application:v4 error:&obj]);
  objc_storeStrong((id *)(v5 + 40), obj);
  if (v6) {
    [*(id *)(a1 + 32) deleteObject:v6];
  }
  __int16 v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v12 = *(id *)(v8 + 40);
  unsigned __int8 v9 = [v7 persistWithError:&v12];
  objc_storeStrong((id *)(v8 + 40), v12);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v9;
  uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v11 = *(id *)(v10 + 40);
  +[TransparencyManagedDataStore cleanseError:](&OBJC_CLASS___TransparencyManagedDataStore, "cleanseError:", &v11);
  objc_storeStrong((id *)(v10 + 40), v11);
}

void sub_1001B3280(uint64_t a1)
{
  if (qword_1002EEDC0 != -1) {
    dispatch_once(&qword_1002EEDC0, &stru_100288B08);
  }
  uint64_t v2 = (os_log_s *)qword_1002EEDC8;
  if (os_log_type_enabled((os_log_t)qword_1002EEDC8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "failed to delete download record for %@: %@",  (uint8_t *)&v5,  0x16u);
  }

void sub_1001B335C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDC8;
  qword_1002EEDC8 = (uint64_t)v1;
}

void sub_1001B34DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1001B3500(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[7] + 8LL);
  obuint64_t j = *(id *)(v4 + 40);
  int v5 = (void *)objc_claimAutoreleasedReturnValue([v2 fetchDownloadRecordById:v3 error:&obj]);
  objc_storeStrong((id *)(v4 + 40), obj);
  uint64_t v6 = objc_claimAutoreleasedReturnValue( +[SecXPCHelper cleanseErrorForXPC:]( &OBJC_CLASS___SecXPCHelper,  "cleanseErrorForXPC:",  *(void *)(*(void *)(a1[7] + 8LL) + 40LL)));
  uint64_t v7 = *(void *)(a1[7] + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  if (v5)
  {
    unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue([v5 downloadId]);
    unsigned int v10 = [v9 isEqual:a1[5]];

    if (v10)
    {
      (*(void (**)(void))(a1[6] + 16LL))();
      *(_BYTE *)(*(void *)(a1[8] + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
    }
  }
}

void sub_1001B3958( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1001B397C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001B398C(uint64_t a1)
{
}

void sub_1001B3994(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[7] + 8LL);
  obuint64_t j = *(id *)(v4 + 40);
  int v5 = (void *)objc_claimAutoreleasedReturnValue([v2 fetchFetchRecordById:v3 error:&obj]);
  objc_storeStrong((id *)(v4 + 40), obj);
  uint64_t v6 = objc_claimAutoreleasedReturnValue( +[SecXPCHelper cleanseErrorForXPC:]( &OBJC_CLASS___SecXPCHelper,  "cleanseErrorForXPC:",  *(void *)(*(void *)(a1[7] + 8LL) + 40LL)));
  uint64_t v7 = *(void *)(a1[7] + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  if (v5)
  {
    unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue([v5 fetchId]);
    unsigned int v10 = [v9 isEqual:a1[5]];

    if (v10)
    {
      (*(void (**)(void))(a1[6] + 16LL))();
      *(_BYTE *)(*(void *)(a1[8] + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
    }
  }

  else
  {
    uint64_t v11 = objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorDatabase,  -225LL,  @"no fetch record found for %@",  a1[5]));
    uint64_t v12 = *(void *)(a1[7] + 8LL);
    uint64_t v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    if (qword_1002EEDD0 != -1) {
      dispatch_once(&qword_1002EEDD0, &stru_100288B28);
    }
    uint64_t v14 = (os_log_s *)qword_1002EEDD8;
    if (os_log_type_enabled((os_log_t)qword_1002EEDD8, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = a1[5];
      *(_DWORD *)buf = 138543362;
      uint64_t v18 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "no fetch record found for fetchId %{public}@",  buf,  0xCu);
    }
  }
}

void sub_1001B3B5C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDD8;
  qword_1002EEDD8 = (uint64_t)v1;
}

void sub_1001B407C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1001B4098(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001B40A8(uint64_t a1)
{
}

void sub_1001B40B0(uint64_t a1, void *a2)
{
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  __int128 v52 = 0u;
  obuint64_t j = a2;
  id v45 = [obj countByEnumeratingWithState:&v49 objects:v63 count:16];
  if (v45)
  {
    uint64_t v3 = 0LL;
    uint64_t v47 = 0LL;
    uint64_t v44 = *(void *)v50;
    while (1)
    {
      uint64_t v4 = 0LL;
      do
      {
        if (*(void *)v50 != v44) {
          objc_enumerationMutation(obj);
        }
        int v5 = *(void **)(*((void *)&v49 + 1) + 8LL * (void)v4);
        uint64_t v6 = *(void *)(a1 + 56);
        if (v6 == 2)
        {
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v49 + 1) + 8 * (void)v4) application]);
          unsigned __int8 v9 = (const __CFString *)objc_claimAutoreleasedReturnValue( +[TransparencyAnalytics formatEventName:application:]( &OBJC_CLASS___TransparencyAnalytics,  "formatEventName:application:",  @"VerifyConsistencyProofEvent",  v11));

          [v5 setConsistencyVerified:0];
          uint64_t v3 = -196LL;
        }

        else if (v6 == 1)
        {
          if ([*(id *)(*((void *)&v49 + 1) + 8 * (void)v4) isMapHead])
          {
            unsigned int v10 = (__CFString *)objc_claimAutoreleasedReturnValue([v5 application]);
            unsigned __int8 v9 = (const __CFString *)objc_claimAutoreleasedReturnValue( +[TransparencyAnalytics formatEventName:application:]( &OBJC_CLASS___TransparencyAnalytics,  "formatEventName:application:",  @"VerifyPATInclusionProofEvent",  v10));
          }

          else
          {
            unsigned __int8 v9 = @"ktTLTVerifyInclusionProofEvent";
            unsigned int v10 = v47;
          }

          [v5 setInclusionVerified:0];
          uint64_t v3 = -202LL;
        }

        else
        {
          if (v6) {
            goto LABEL_22;
          }
          else {
            uint64_t v3 = -198LL;
          }
          else {
            uint64_t v7 = @"VerifySTHEvent";
          }
          uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 application]);
          unsigned __int8 v9 = (const __CFString *)objc_claimAutoreleasedReturnValue( +[TransparencyAnalytics formatEventName:application:]( &OBJC_CLASS___TransparencyAnalytics,  "formatEventName:application:",  v7,  v8));

          [v5 setSignatureVerified:0];
        }

        uint64_t v47 = (__CFString *)v9;
LABEL_22:
        uint64_t v12 = *(void **)(a1 + 32);
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v5 failures]);
        uint64_t v14 = objc_claimAutoreleasedReturnValue([v12 createChainOfErrorsFromSTHFailures:v13 type:*(void *)(a1 + 56)]);

        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
        unsigned __int8 v16 = (void *)objc_claimAutoreleasedReturnValue([v15 createSignedTreeHeadFailure]);

        [v16 setSth:v5];
        [v16 setErrorCode:v3];
        [v16 setErrorDomain:@"TransparencyErrorVerify"];
        [v16 setUnsigned:"verificationType" value:*(void *)(a1 + 56)];
        if (qword_1002EEDE0 != -1) {
          dispatch_once(&qword_1002EEDE0, &stru_100288B48);
        }
        uint64_t v17 = (void *)qword_1002EEDE8;
        uint64_t v46 = (void *)v14;
        if (os_log_type_enabled((os_log_t)qword_1002EEDE8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v18 = v17;
          id v19 = [v5 revision];
          __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v5 application]);
          *(_DWORD *)buf = 134218754;
          id v56 = v19;
          uint64_t v14 = (uint64_t)v46;
          __int16 v57 = 2114;
          uint64_t v58 = v20;
          __int16 v59 = 2048;
          uint64_t v60 = v3;
          __int16 v61 = 2112;
          uint64_t v62 = v46;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "STH verification failure after maximum proof delay for revision %lld of %{public}@, %ld: %@",  buf,  0x2Au);
        }

        __int128 v21 = *(uint64_t **)(a1 + 64);
        if (v21) {
          uint64_t v22 = *v21;
        }
        else {
          uint64_t v22 = 0LL;
        }
        __int128 v23 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithError:underlyingError:]( &OBJC_CLASS___TransparencyError,  "errorWithError:underlyingError:",  v22,  v14));
        id v24 = [v5 revision];
        __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([v5 application]);
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:description:",  @"TransparencyErrorVerify",  v3,  v23,  @"STH verification failure after maximum verification delay for revision %lld of %@",  v24,  v25));

        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), v26);
        __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
        __int128 v28 = (void *)objc_claimAutoreleasedReturnValue([v27 settings]);
        LODWORD(v25) = [v28 allowsInternalSecurityPolicies];

        if ((_DWORD)v25)
        {
          uint64_t v53 = @"failedRevision";
          id v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v5 revision]));
          __int16 v54 = v29;
          id v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v54,  &v53,  1LL));
        }

        else
        {
          id v30 = 0LL;
        }

        id v31 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
        [v31 logResultForEvent:v47 hardFailure:1 result:v26 withAttributes:v30];

        uint64_t v32 = *(void **)(a1 + 40);
        uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v5 revision]));
        [v32 addObject:v33];

        __int16 v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
        id v48 = 0LL;
        unsigned __int8 v35 = [v34 persistAndRefaultObject:v5 error:&v48];
        id v36 = v48;
        id v37 = v48;

        if ((v35 & 1) == 0)
        {
          if (qword_1002EEDE0 != -1) {
            dispatch_once(&qword_1002EEDE0, &stru_100288B68);
          }
          __int16 v38 = (os_log_s *)qword_1002EEDE8;
          if (os_log_type_enabled((os_log_t)qword_1002EEDE8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            id v56 = v37;
            _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_ERROR,  "failed to save expired STH: %@",  buf,  0xCu);
          }

          uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
          [v39 reportCoreDataPersistEventForLocation:@"failExpiredSTHs" underlyingError:v37];

          uint64_t v40 = *(void *)(*(void *)(a1 + 48) + 8LL);
          uint64_t v42 = *(void *)(v40 + 40);
          uint64_t v41 = (id *)(v40 + 40);
          if (!v42) {
            objc_storeStrong(v41, v36);
          }
        }

        uint64_t v4 = (char *)v4 + 1;
      }

      while (v45 != v4);
      id v45 = [obj countByEnumeratingWithState:&v49 objects:v63 count:16];
      if (!v45) {
        goto LABEL_43;
      }
    }
  }

  uint64_t v47 = 0LL;
LABEL_43:
}

void sub_1001B4730(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDE8;
  qword_1002EEDE8 = (uint64_t)v1;
}

void sub_1001B4760(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDE8;
  qword_1002EEDE8 = (uint64_t)v1;
}

void sub_1001B4FF0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDE8;
  qword_1002EEDE8 = (uint64_t)v1;
}

void sub_1001B5020(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDE8;
  qword_1002EEDE8 = (uint64_t)v1;
}

void sub_1001B5554(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDE8;
  qword_1002EEDE8 = (uint64_t)v1;
}

void sub_1001B5A84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_1001B5AD8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDE8;
  qword_1002EEDE8 = (uint64_t)v1;
}

void sub_1001B5B08(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDE8;
  qword_1002EEDE8 = (uint64_t)v1;
}

void sub_1001B5B38(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectMapHead]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[SignedMapHead signedTypeWithObject:](&OBJC_CLASS___SignedMapHead, "signedTypeWithObject:", v2));

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dataStore]);
  [v3 setDataStore:v4];

  [v3 setOverrideBeginTimeFromLogEntry:*(void *)(a1 + 48)];
  uint64_t v5 = *(void *)(*(void *)(a1 + 64) + 8LL);
  obuint64_t j = *(id *)(v5 + 40);
  id v6 = [v3 copyManagedObject:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  if (v6)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dataStore]);
    [v7 onMocSetMapHead:v6 inclusionResult:*(void *)(a1 + 88) inclusionError:*(void *)(a1 + 56)];

    [v6 setUnsigned:"inclusionVerified" value:*(void *)(a1 + 88)];
    [v6 setConsistencyVerified:1];
    if (*(void *)(a1 + 96) && !*(void *)(a1 + 88))
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dataStore]);
      uint64_t v9 = **(void **)(a1 + 96);
      unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) applicationID]);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 optInServer]);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v8 createFailureEvent:v9 application:v10 optInServer:v12]);

      [v6 setFailureEvent:v13];
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 optInServer]);
      unsigned __int8 v16 = (void *)objc_claimAutoreleasedReturnValue([v15 getAggregateOptInState:0]);

      if (qword_1002EEDE0 != -1) {
        dispatch_once(&qword_1002EEDE0, &stru_100288C70);
      }
      uint64_t v17 = (void *)qword_1002EEDE8;
      if (os_log_type_enabled((os_log_t)qword_1002EEDE8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = v17;
        id v19 = (void *)objc_claimAutoreleasedReturnValue([v13 eventId]);
        __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) applicationID]);
        *(_DWORD *)buf = 138543874;
        id v37 = v19;
        __int16 v38 = 2112;
        uint64_t v39 = v20;
        __int16 v40 = 2112;
        uint64_t v41 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Created failure eventId %{public}@ for %{pubic}@ SMH inclusion validation: %@",  buf,  0x20u);
      }

      __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v21 followUp]);
      __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) applicationID]);
      id v24 = (void *)objc_claimAutoreleasedReturnValue([v13 eventId]);
      objc_msgSend( v22,  "postFollowup:type:eventId:errorCode:optInState:infoLink:additionalInfo:error:",  v23,  2,  v24,  objc_msgSend(**(id **)(a1 + 96), "code"),  v16,  0,  0,  0);
    }

    [v6 receiptTime];
    *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v25;
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dataStore]);
    uint64_t v27 = *(void *)(*(void *)(a1 + 64) + 8LL);
    id v34 = *(id *)(v27 + 40);
    unsigned __int8 v28 = [v26 persistAndRefaultObject:v6 error:&v34];
    objc_storeStrong((id *)(v27 + 40), v34);

    if ((v28 & 1) == 0)
    {
      if (qword_1002EEDE0 != -1) {
        dispatch_once(&qword_1002EEDE0, &stru_100288C90);
      }
      id v29 = (os_log_s *)qword_1002EEDE8;
      if (os_log_type_enabled((os_log_t)qword_1002EEDE8, OS_LOG_TYPE_ERROR))
      {
        id v30 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
        *(_DWORD *)buf = 138412290;
        id v37 = v30;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_ERROR,  "failed to update inclusion state for map head: %@",  buf,  0xCu);
      }

      id v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dataStore]);
      [v31 reportCoreDataPersistEventForLocation:@"mapHeadRevisionLogProof" underlyingError:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];

      if (*(void *)(a1 + 96)) {
        **(void **)(a1 + 96) = (id)objc_claimAutoreleasedReturnValue( +[SecXPCHelper cleanseErrorForXPC:]( &OBJC_CLASS___SecXPCHelper,  "cleanseErrorForXPC:",  *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL)));
      }
      *(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 0;
    }
  }

  else
  {
    if (qword_1002EEDE0 != -1) {
      dispatch_once(&qword_1002EEDE0, &stru_100288C50);
    }
    uint64_t v32 = (os_log_s *)qword_1002EEDE8;
    if (os_log_type_enabled((os_log_t)qword_1002EEDE8, OS_LOG_TYPE_INFO))
    {
      uint64_t v33 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
      *(_DWORD *)buf = 138412290;
      id v37 = v33;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_INFO,  "No stored map head for revision log proof response: %@",  buf,  0xCu);
    }
  }
}

void sub_1001B6044(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDE8;
  qword_1002EEDE8 = (uint64_t)v1;
}

void sub_1001B6074(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDE8;
  qword_1002EEDE8 = (uint64_t)v1;
}

void sub_1001B60A4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDE8;
  qword_1002EEDE8 = (uint64_t)v1;
}

void sub_1001B6544( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 160), 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1001B6594(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDE8;
  qword_1002EEDE8 = (uint64_t)v1;
}

void sub_1001B65C4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDE8;
  qword_1002EEDE8 = (uint64_t)v1;
}

void sub_1001B65F4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) patHead]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[SignedLogHead signedTypeWithObject:](&OBJC_CLASS___SignedLogHead, "signedTypeWithObject:", v2));

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dataStore]);
  [v3 setDataStore:v4];

  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
  obuint64_t j = *(id *)(v5 + 40);
  id v6 = [v3 copyManagedObject:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  if (v6)
  {
    [v6 setUnsigned:"inclusionVerified" value:*(void *)(a1 + 72)];
    if (*(void *)(a1 + 80) && !*(void *)(a1 + 72))
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dataStore]);
      uint64_t v8 = **(void **)(a1 + 80);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) applicationID]);
      unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 optInServer]);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v7 createFailureEvent:v8 application:v9 optInServer:v11]);

      [v6 setFailureEvent:v12];
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 optInServer]);
      id v39 = 0LL;
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 getAggregateOptInState:&v39]);
      id v37 = v39;

      if (qword_1002EEDE0 != -1) {
        dispatch_once(&qword_1002EEDE0, &stru_100288D38);
      }
      unsigned __int8 v16 = (void *)qword_1002EEDE8;
      if (os_log_type_enabled((os_log_t)qword_1002EEDE8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = v16;
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v12 eventId]);
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) applicationID]);
        *(_DWORD *)buf = 138543874;
        uint64_t v42 = v18;
        __int16 v43 = 2114;
        uint64_t v44 = v19;
        __int16 v45 = 2112;
        id v46 = v37;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Created failure eventId %{public}@ for %{public}@ STH inclusion validation %@",  buf,  0x20u);
      }

      if (qword_1002EEDE0 != -1) {
        dispatch_once(&qword_1002EEDE0, &stru_100288D58);
      }
      __int128 v20 = (void *)qword_1002EEDE8;
      if (os_log_type_enabled((os_log_t)qword_1002EEDE8, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v21 = v20;
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v12 eventId]);
        __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) applicationID]);
        *(_DWORD *)buf = 138543618;
        uint64_t v42 = v22;
        __int16 v43 = 2114;
        uint64_t v44 = v23;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Created failure eventId %{public}@ for %{public}@ STH inclusion validation",  buf,  0x16u);
      }

      id v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) context]);
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 followUp]);
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) applicationID]);
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v12 eventId]);
      objc_msgSend( v25,  "postFollowup:type:eventId:errorCode:optInState:infoLink:additionalInfo:error:",  v26,  2,  v27,  objc_msgSend(**(id **)(a1 + 80), "code"),  v15,  0,  0,  0);
    }

    [v6 receiptTime];
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v28;
    id v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dataStore]);
    uint64_t v30 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v38 = *(id *)(v30 + 40);
    unsigned __int8 v31 = [v29 persistAndRefaultObject:v6 error:&v38];
    objc_storeStrong((id *)(v30 + 40), v38);

    if ((v31 & 1) == 0)
    {
      if (qword_1002EEDE0 != -1) {
        dispatch_once(&qword_1002EEDE0, &stru_100288D78);
      }
      uint64_t v32 = (os_log_s *)qword_1002EEDE8;
      if (os_log_type_enabled((os_log_t)qword_1002EEDE8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
        *(_DWORD *)buf = 138412290;
        uint64_t v42 = v33;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "failed to update inclusion state for map head: %@",  buf,  0xCu);
      }

      id v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dataStore]);
      [v34 reportCoreDataPersistEventForLocation:@"patHeadRevisionLogProof" underlyingError:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];

      if (*(void *)(a1 + 80)) {
        **(void **)(a1 + 80) = (id)objc_claimAutoreleasedReturnValue( +[SecXPCHelper cleanseErrorForXPC:]( &OBJC_CLASS___SecXPCHelper,  "cleanseErrorForXPC:",  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL)));
      }
      *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 0;
    }
  }

  else
  {
    if (qword_1002EEDE0 != -1) {
      dispatch_once(&qword_1002EEDE0, &stru_100288D18);
    }
    unsigned __int8 v35 = (os_log_s *)qword_1002EEDE8;
    if (os_log_type_enabled((os_log_t)qword_1002EEDE8, OS_LOG_TYPE_INFO))
    {
      id v36 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
      *(_DWORD *)buf = 138412290;
      uint64_t v42 = v36;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_INFO,  "No stored PAT head for revision log proof response: %@",  buf,  0xCu);
    }
  }
}

void sub_1001B6B90(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDE8;
  qword_1002EEDE8 = (uint64_t)v1;
}

void sub_1001B6BC0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDE8;
  qword_1002EEDE8 = (uint64_t)v1;
}

void sub_1001B6BF0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDE8;
  qword_1002EEDE8 = (uint64_t)v1;
}

void sub_1001B6C20(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDE8;
  qword_1002EEDE8 = (uint64_t)v1;
}

void sub_1001B70FC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDE8;
  qword_1002EEDE8 = (uint64_t)v1;
}

void sub_1001B712C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDE8;
  qword_1002EEDE8 = (uint64_t)v1;
}

void sub_1001B715C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDE8;
  qword_1002EEDE8 = (uint64_t)v1;
}

void sub_1001B7444(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDE8;
  qword_1002EEDE8 = (uint64_t)v1;
}

void sub_1001B7474(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDE8;
  qword_1002EEDE8 = (uint64_t)v1;
}

void sub_1001B79D4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dataStore]);
  [v2 setDataStore:v3];

  uint64_t v4 = *(void **)(a1 + 32);
  id v14 = 0LL;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 createManagedObjectWithError:&v14]);
  id v6 = v14;
  uint64_t v7 = v6;
  if (v5)
  {
    [v5 setInclusionVerified:2];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dataStore]);
    id v13 = v7;
    unsigned __int8 v9 = [v8 persistAndRefaultObject:v5 error:&v13];
    id v10 = v13;

    if ((v9 & 1) == 0)
    {
      if (qword_1002EEDE0 != -1) {
        dispatch_once(&qword_1002EEDE0, &stru_100288E60);
      }
      uint64_t v11 = (os_log_s *)qword_1002EEDE8;
      if (os_log_type_enabled((os_log_t)qword_1002EEDE8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v16 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "failed to save unverified PAT STH from revision log inclusion proof: %@",  buf,  0xCu);
      }

      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dataStore]);
      [v12 reportCoreDataPersistEventForLocation:@"revisionMissingTLTProof" underlyingError:v10];

      if (*(void *)(a1 + 48)) {
        **(void **)(a1 + 4_Block_object_dispose((const void *)(v27 - 160), 8) = (id)objc_claimAutoreleasedReturnValue( +[SecXPCHelper cleanseErrorForXPC:]( &OBJC_CLASS___SecXPCHelper,  "cleanseErrorForXPC:",  v10));
      }
    }
  }

  else
  {
    id v10 = v6;
  }
}

void sub_1001B7B94(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDE8;
  qword_1002EEDE8 = (uint64_t)v1;
}

void sub_1001B7EB0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDE8;
  qword_1002EEDE8 = (uint64_t)v1;
}

void sub_1001B7EE0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDE8;
  qword_1002EEDE8 = (uint64_t)v1;
}

void sub_1001B8348(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDE8;
  qword_1002EEDE8 = (uint64_t)v1;
}

void sub_1001B8378(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDE8;
  qword_1002EEDE8 = (uint64_t)v1;
}

BOOL sub_1001B842C(uint64_t a1)
{
  return a1 && (a1 & (a1 - 1)) == 0;
}

void sub_1001B89B4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDF8;
  qword_1002EEDF8 = (uint64_t)v1;
}

void sub_1001B89E4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDF8;
  qword_1002EEDF8 = (uint64_t)v1;
}

void sub_1001B8C0C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEDF8;
  qword_1002EEDF8 = (uint64_t)v1;
}

void sub_1001B9318(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE08;
  qword_1002EEE08 = (uint64_t)v1;
}

void sub_1001B9348(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE08;
  qword_1002EEE08 = (uint64_t)v1;
}

void sub_1001B9378(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE08;
  qword_1002EEE08 = (uint64_t)v1;
}

void sub_1001B93A8(uint64_t a1, void *a2, void *a3)
{
  id v7 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a2 deviceList]);
  if (v5) {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) updateDevicesList:v5]);
  }
  else {
    id v6 = 0LL;
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1001B997C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE18;
  qword_1002EEE18 = (uint64_t)v1;
}

void sub_1001B99AC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE18;
  qword_1002EEE18 = (uint64_t)v1;
}

void sub_1001B9B80(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE18;
  qword_1002EEE18 = (uint64_t)v1;
}

void sub_1001BA3C8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE28;
  qword_1002EEE28 = (uint64_t)v1;
}

void sub_1001BA3F8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE28;
  qword_1002EEE28 = (uint64_t)v1;
}

void sub_1001BA4E4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v13 = 0LL;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 createManagedObjectWithError:&v13]);
  id v4 = v13;
  if (v3)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
    [v5 onMocSetMapHead:v3 signatureResult:*(void *)(a1 + 48) signatureError:*(void *)(a1 + 40)];

    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
    id v12 = v4;
    unsigned __int8 v7 = [v6 persistWithError:&v12];
    id v8 = v12;

    if ((v7 & 1) == 0)
    {
      if (qword_1002EEE20 != -1) {
        dispatch_once(&qword_1002EEE20, &stru_1002890A8);
      }
      unsigned __int8 v9 = (os_log_s *)qword_1002EEE28;
      if (os_log_type_enabled((os_log_t)qword_1002EEE28, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v15 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "failed persist SMH signature failure: %@",  buf,  0xCu);
      }

      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
      [v10 reportCoreDataPersistEventForLocation:@"mapHeadSignature" underlyingError:v8];
    }
  }

  else
  {
    if (qword_1002EEE20 != -1) {
      dispatch_once(&qword_1002EEE20, &stru_100289088);
    }
    uint64_t v11 = (os_log_s *)qword_1002EEE28;
    if (os_log_type_enabled((os_log_t)qword_1002EEE28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v15 = v4;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "failed to create SMH object: %@", buf, 0xCu);
    }

    id v8 = v4;
  }
}

void sub_1001BA6E0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE28;
  qword_1002EEE28 = (uint64_t)v1;
}

void sub_1001BA710(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE28;
  qword_1002EEE28 = (uint64_t)v1;
}

void sub_1001BA920(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE28;
  qword_1002EEE28 = (uint64_t)v1;
}

void sub_1001BAAB8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE38;
  qword_1002EEE38 = (uint64_t)v1;
}

void sub_1001BABD8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE38;
  qword_1002EEE38 = (uint64_t)v1;
}

void sub_1001BB038(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE38;
  qword_1002EEE38 = (uint64_t)v1;
}

void sub_1001BB068(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE38;
  qword_1002EEE38 = (uint64_t)v1;
}

void sub_1001BB2DC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE48;
  qword_1002EEE48 = (uint64_t)v1;
}

void sub_1001BB30C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE48;
  qword_1002EEE48 = (uint64_t)v1;
}

void sub_1001BBAF0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE48;
  qword_1002EEE48 = (uint64_t)v1;
}

void sub_1001BC184(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE58;
  qword_1002EEE58 = (uint64_t)v1;
}

void sub_1001BC798(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE58;
  qword_1002EEE58 = (uint64_t)v1;
}

uint64_t sub_1001BC914(uint64_t a1, void *a2, void *a3)
{
  if (![*(id *)(a1 + 32) hasStartSlh]
    || (id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) startSlh]), v6, !v6))
  {
    uint64_t v35 = -181LL;
    if (!a2) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }

  if (![*(id *)(a1 + 32) hasEndSlh]
    || (unsigned __int8 v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) endSlh]), v7, !v7))
  {
    uint64_t v35 = -182LL;
    if (!a2) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) proofHashesArray]);
  if (v8)
  {
    id v9 = objc_msgSend(*(id *)(a1 + 32), "proofHashesArray_Count");

    if (v9)
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) startSlh]);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) verifier]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 trustedKeyStore]);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 signatureVerifier]);
      id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
      id v38 = (void *)objc_claimAutoreleasedReturnValue( +[SignedLogHead signedTypeWithObject:verifier:dataStore:]( &OBJC_CLASS___SignedLogHead,  "signedTypeWithObject:verifier:dataStore:",  v10,  v13,  v14));

      id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) endSlh]);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) verifier]);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 trustedKeyStore]);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 signatureVerifier]);
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
      __int128 v20 = (void *)objc_claimAutoreleasedReturnValue( +[SignedLogHead signedTypeWithObject:verifier:dataStore:]( &OBJC_CLASS___SignedLogHead,  "signedTypeWithObject:verifier:dataStore:",  v15,  v18,  v19));

      *(void *)&__int128 buf = 0LL;
      *((void *)&buf + 1) = &buf;
      uint64_t v50 = 0x3032000000LL;
      __int128 v51 = sub_1001BCE50;
      __int128 v52 = sub_1001BCE60;
      id v53 = 0LL;
      uint64_t v45 = 0LL;
      id v46 = &v45;
      uint64_t v47 = 0x2020000000LL;
      id v48 = 0LL;
      __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) verifier]);
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) proofHashesArray]);
      __int128 v23 = (id *)(*((void *)&buf + 1) + 40LL);
      obuint64_t j = *(id *)(*((void *)&buf + 1) + 40LL);
      id v24 = [v21 verifyConsistencyProof:v22 startLogHead:v38 endLogHead:v20 error:&obj];
      objc_storeStrong(v23, obj);

      id v48 = v24;
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472LL;
      v39[2] = sub_1001BCE68;
      void v39[3] = &unk_100278F60;
      v39[4] = *(void *)(a1 + 32);
      id v26 = v38;
      id v40 = v26;
      p___int128 buf = &buf;
      id v27 = v20;
      id v41 = v27;
      __int16 v43 = &v45;
      [v25 performBlockAndWait:v39];

      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      id v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metadata]);
      uint64_t v30 = kTransparencyResponseMetadataKeyServerHint;
      unsigned __int8 v31 = (void *)objc_claimAutoreleasedReturnValue([v29 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint]);

      if (v31)
      {
        uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metadata]);
        uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v32 objectForKeyedSubscript:v30]);
        [v28 setObject:v33 forKeyedSubscript:v30];
      }

      if ([v28 count]) {
        *a3 = v28;
      }
      if (a2) {
        *a2 = *(id *)(*((void *)&buf + 1) + 40LL);
      }
      uint64_t v34 = v46[3];

      _Block_object_dispose(&v45, 8);
      _Block_object_dispose(&buf, 8);

      return v34;
    }
  }

  uint64_t v35 = -183LL;
  if (a2) {
LABEL_19:
  }
    *a2 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorDecode,  v35,  @"log consistency response missing data required for verification"));
LABEL_20:
  if (qword_1002EEE50 != -1) {
    dispatch_once(&qword_1002EEE50, &stru_100289210);
  }
  id v36 = (os_log_s *)qword_1002EEE58;
  if (os_log_type_enabled((os_log_t)qword_1002EEE58, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v35;
    _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_ERROR,  "log consistency response missing data required for verification: %ld",  (uint8_t *)&buf,  0xCu);
  }

  return 0LL;
}

void sub_1001BCDE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1001BCE20(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE58;
  qword_1002EEE58 = (uint64_t)v1;
}

uint64_t sub_1001BCE50(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001BCE60(uint64_t a1)
{
}

void sub_1001BCE68(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) forwards];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v6 = *(void **)(v3 + 40);
  uint64_t v5 = (id *)(v3 + 40);
  id v4 = v6;
  if (v2)
  {
    unsigned __int8 v7 = *(void **)(a1 + 40);
    obuint64_t j = v4;
    id v8 = [v7 copyManagedObject:&obj];
    objc_storeStrong(v5, obj);
    id v9 = *(void **)(a1 + 48);
    uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v12 = *(void **)(v10 + 40);
    uint64_t v11 = (void **)(v10 + 40);
    uint64_t v35 = v12;
    id v13 = [v9 copyManagedObject:&v35];
    uint64_t v14 = v35;
  }

  else
  {
    id v15 = *(void **)(a1 + 48);
    id v34 = v4;
    id v8 = [v15 copyManagedObject:&v34];
    objc_storeStrong(v5, v34);
    uint64_t v16 = *(void **)(a1 + 40);
    uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8LL);
    uint64_t v18 = *(void **)(v17 + 40);
    uint64_t v11 = (void **)(v17 + 40);
    uint64_t v33 = v18;
    id v13 = [v16 copyManagedObject:&v33];
    uint64_t v14 = v33;
  }

  id v19 = v14;
  __int128 v20 = *v11;
  void *v11 = v19;

  if (!v8 || !v13)
  {
    if (qword_1002EEE50 != -1) {
      dispatch_once(&qword_1002EEE50, &stru_100289230);
    }
    __int128 v21 = (os_log_s *)qword_1002EEE58;
    if (os_log_type_enabled((os_log_t)qword_1002EEE58, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v38 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "failed to get SLHs from data store: %@",  buf,  0xCu);
    }
  }

  if ([*(id *)(a1 + 32) forwards])
  {
    if ([v8 consistencyVerified] == (id)2)
    {
      id v23 = [v8 revision];
      id v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) startRevision]);
      id v25 = [v24 longLongValue];

      if (v23 == v25) {
        [*(id *)(a1 + 32) setResult:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) treeHead:v8 error:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
      }
    }
  }

  if ([v8 consistencyVerified] == (id)1) {
    [*(id *)(a1 + 32) setResult:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) treeHead:v13 error:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) == 1LL) {
    [*(id *)(a1 + 32) checkSplitsFor:v13];
  }
  id v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
  uint64_t v27 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v32 = *(id *)(v27 + 40);
  unsigned __int8 v28 = [v26 persistWithError:&v32];
  objc_storeStrong((id *)(v27 + 40), v32);

  if ((v28 & 1) == 0)
  {
    if (qword_1002EEE50 != -1) {
      dispatch_once(&qword_1002EEE50, &stru_100289250);
    }
    id v29 = (os_log_s *)qword_1002EEE58;
    if (os_log_type_enabled((os_log_t)qword_1002EEE58, OS_LOG_TYPE_ERROR))
    {
      uint64_t v30 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v38 = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_ERROR,  "failed to save consistency results: %@",  buf,  0xCu);
    }

    unsigned __int8 v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
    [v31 reportCoreDataPersistEventForLocation:@"verifyConsistency" underlyingError:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  }
}

void sub_1001BD1B0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  unsigned int v2 = (void *)qword_1002EEE58;
  qword_1002EEE58 = (uint64_t)v1;
}

void sub_1001BD1E0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  unsigned int v2 = (void *)qword_1002EEE58;
  qword_1002EEE58 = (uint64_t)v1;
}

void sub_1001BD674(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  unsigned int v2 = (void *)qword_1002EEE68;
  qword_1002EEE68 = (uint64_t)v1;
}

void sub_1001BD6A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) setResult:v3];
  if (qword_1002EEE60 != -1) {
    dispatch_once(&qword_1002EEE60, &stru_100289290);
  }
  id v4 = (os_log_s *)qword_1002EEE68;
  if (os_log_type_enabled((os_log_t)qword_1002EEE68, OS_LOG_TYPE_INFO))
  {
    int v7 = 138412290;
    id v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "opt-in result from IDS: %@", (uint8_t *)&v7, 0xCu);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) operationQueue]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) finishedOp]);
  [v5 addOperation:v6];
}

void sub_1001BD7BC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  unsigned int v2 = (void *)qword_1002EEE68;
  qword_1002EEE68 = (uint64_t)v1;
}

void sub_1001BDB34(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  unsigned int v2 = (void *)qword_1002EEE68;
  qword_1002EEE68 = (uint64_t)v1;
}

void sub_1001BE168(_Unwind_Exception *a1)
{
}

void sub_1001BE190(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE68;
  qword_1002EEE68 = (uint64_t)v1;
}

void sub_1001BE1C4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE68;
  qword_1002EEE68 = (uint64_t)v1;
}

void sub_1001BE1F4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);

  if (v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) error]);
    [*(id *)(a1 + 40) setError:v3];

    id v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained optInStates]);
    [v4 completedCurrentTarget];

LABEL_5:
    int v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
    [v7 addOperation:*(void *)(a1 + 48)];
    goto LABEL_6;
  }

  if ([*(id *)(a1 + 40) targetState] == (id)2)
  {
    [WeakRetained clearOptInStateAndPushToCloud];
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 stateMonitor]);
    [v6 setOptInState:0 everOptIn:1];

    [*(id *)(a1 + 40) setTargetState:1];
    [WeakRetained setNextState:@"ValidateSelfOptIn"];
    goto LABEL_5;
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained applicationId]);
  int v7 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyAnalytics formatEventName:application:]( &OBJC_CLASS___TransparencyAnalytics,  "formatEventName:application:",  @"OptInServerSet",  v8));

  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) result]);
  [WeakRetained processResponse:v9 watcher:*(void *)(a1 + 40) finishOp:*(void *)(a1 + 48)];

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 logger]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
  [v11 logResultForEvent:v7 hardFailure:1 result:v12];

  id v13 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained error]);
  [*(id *)(a1 + 40) setError:v13];

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) error]);
  if (!v14)
  {
    id v15 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained deps]);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 stateMonitor]);
    objc_msgSend(v16, "setOptInState:everOptIn:", objc_msgSend(*(id *)(a1 + 40), "targetState") == (id)1, 1);
  }

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained optInStates]);
  [v17 completedCurrentTarget];

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained operationQueue]);
  [v18 addOperation:*(void *)(a1 + 48)];

LABEL_6:
}

LABEL_79:
}

void sub_1001BF1B0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE68;
  qword_1002EEE68 = (uint64_t)v1;
}

void sub_1001BF1E0(id *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v7 = (id)objc_claimAutoreleasedReturnValue([a2 prefixedURI]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( a1[4],  "verifyResponse:uri:expectedState:",  v5,  v7,  objc_msgSend(a1[5], "targetState") != 0));

  [a1[6] setObject:v6 forKeyedSubscript:v7];
}

void sub_1001BF26C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE68;
  qword_1002EEE68 = (uint64_t)v1;
}

void sub_1001BF29C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE68;
  qword_1002EEE68 = (uint64_t)v1;
}

void sub_1001BF2CC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE68;
  qword_1002EEE68 = (uint64_t)v1;
}

void sub_1001BF2FC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE68;
  qword_1002EEE68 = (uint64_t)v1;
}

void sub_1001BF32C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE68;
  qword_1002EEE68 = (uint64_t)v1;
}

void sub_1001BF35C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE68;
  qword_1002EEE68 = (uint64_t)v1;
}

void sub_1001BF5A4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE68;
  qword_1002EEE68 = (uint64_t)v1;
}

void sub_1001BF8D0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE68;
  qword_1002EEE68 = (uint64_t)v1;
}

uint64_t sub_1001BF900(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 deps]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 logger]);
  [v6 logResultForEvent:@"optInSync" hardFailure:1 result:v4];

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_1001BFAA4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE68;
  qword_1002EEE68 = (uint64_t)v1;
}

void sub_1001BFBE0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE68;
  qword_1002EEE68 = (uint64_t)v1;
}

void sub_1001C000C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE68;
  qword_1002EEE68 = (uint64_t)v1;
}

void sub_1001C003C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE68;
  qword_1002EEE68 = (uint64_t)v1;
}

void sub_1001C006C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE68;
  qword_1002EEE68 = (uint64_t)v1;
}

void sub_1001C08F0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE68;
  qword_1002EEE68 = (uint64_t)v1;
}

void sub_1001C0920(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE68;
  qword_1002EEE68 = (uint64_t)v1;
}

void sub_1001C0950(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE68;
  qword_1002EEE68 = (uint64_t)v1;
}

void sub_1001C0980(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE68;
  qword_1002EEE68 = (uint64_t)v1;
}

void sub_1001C09B0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE68;
  qword_1002EEE68 = (uint64_t)v1;
}

void sub_1001C09E0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE68;
  qword_1002EEE68 = (uint64_t)v1;
}

void sub_1001C0A10(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE68;
  qword_1002EEE68 = (uint64_t)v1;
}

void sub_1001C1280(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE78;
  qword_1002EEE78 = (uint64_t)v1;
}

void sub_1001C140C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1001C1438(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001C1448(uint64_t a1)
{
}

void sub_1001C1450(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v42 = 0LL;
  id v3 = [v2 copyManagedObject:&v42];
  id v4 = v42;
  if (!v3)
  {
    if (qword_1002EEE70 != -1) {
      dispatch_once(&qword_1002EEE70, &stru_100289658);
    }
    id v9 = (os_log_s *)qword_1002EEE78;
    if (os_log_type_enabled((os_log_t)qword_1002EEE78, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v44 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "failed to find tree head after inclusion verification: %@",  buf,  0xCu);
    }

    *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 0LL;
    uint64_t v10 = objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:", v4));
    uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v10;
    id v13 = v4;
    goto LABEL_31;
  }

  [v3 setUnsigned:"inclusionVerified" value:*(void *)(a1 + 64)];
  if (*(void *)(a1 + 64) != 1LL)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dataStore]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 createSignedTreeHeadFailure]);

    id v7 = *(id **)(a1 + 72);
    if (v7 && *v7) {
      uint64_t v8 = (uint64_t)[*v7 code];
    }
    else {
      uint64_t v8 = -120LL;
    }
    [v6 setErrorCode:v8];
    uint64_t v14 = *(id **)(a1 + 72);
    if (v14 && *v14)
    {
      id v15 = (void *)objc_claimAutoreleasedReturnValue([*v14 domain]);
      [v6 setErrorDomain:v15];
    }

    else
    {
      [v6 setErrorDomain:kTransparencyErrorUnknown];
    }

    [v6 setSth:v3];
    [v6 setVerificationType:1];
    if (!*(void *)(a1 + 64))
    {
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dataStore]);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v3 application]);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) optInServer]);
      id v19 = (void *)objc_claimAutoreleasedReturnValue([v16 createFailureEvent:v4 application:v17 optInServer:v18]);

      [v3 setFailureEvent:v19];
      __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) optInServer]);
      __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([v20 getAggregateOptInState:0]);

      if (qword_1002EEE70 != -1) {
        dispatch_once(&qword_1002EEE70, &stru_100289678);
      }
      uint64_t v22 = (void *)qword_1002EEE78;
      if (os_log_type_enabled((os_log_t)qword_1002EEE78, OS_LOG_TYPE_DEFAULT))
      {
        id v23 = v22;
        id v24 = (void *)objc_claimAutoreleasedReturnValue([v19 eventId]);
        *(_DWORD *)__int128 buf = 138543362;
        id v44 = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Created failure eventId %{public}@ for STH inclusion validation",  buf,  0xCu);
      }

      id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) followUp]);
      id v26 = (void *)objc_claimAutoreleasedReturnValue([v3 application]);
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v19 eventId]);
      objc_msgSend( v25,  "postFollowup:type:eventId:errorCode:optInState:infoLink:additionalInfo:error:",  v26,  2,  v27,  objc_msgSend(v4, "code"),  v21,  0,  0,  0);
    }
  }

  unsigned __int8 v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dataStore]);
  id v41 = v4;
  unsigned __int8 v29 = [v28 persistWithError:&v41];
  id v13 = v41;

  if ((v29 & 1) == 0)
  {
    if (qword_1002EEE70 != -1) {
      dispatch_once(&qword_1002EEE70, &stru_100289698);
    }
    uint64_t v30 = (os_log_s *)qword_1002EEE78;
    if (os_log_type_enabled((os_log_t)qword_1002EEE78, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v44 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "failed to save inclusion verification state to PAT head after TLT entry verification: %@",  buf,  0xCu);
    }

    unsigned __int8 v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dataStore]);
    [v31 reportCoreDataPersistEventForLocation:@"verifyPatHeadInclusion" underlyingError:v13];

    *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 0LL;
    uint64_t v32 = objc_claimAutoreleasedReturnValue(+[SecXPCHelper cleanseErrorForXPC:](&OBJC_CLASS___SecXPCHelper, "cleanseErrorForXPC:", v13));
    uint64_t v33 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v34 = *(void **)(v33 + 40);
    *(void *)(v33 + 40) = v32;
  }

  double Current = CFAbsoluteTimeGetCurrent();
  [v3 receiptTime];
  if (Current - v36 > 1.0)
  {
    double v37 = CFAbsoluteTimeGetCurrent();
    [v3 receiptTime];
    double v39 = v37 - v38;
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    id v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v39));
    [v12 logMetric:v40 withName:@"ktTLTInclusionProofTime"];

LABEL_31:
  }
}

void sub_1001C197C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE78;
  qword_1002EEE78 = (uint64_t)v1;
}

void sub_1001C19AC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE78;
  qword_1002EEE78 = (uint64_t)v1;
}

void sub_1001C19DC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE78;
  qword_1002EEE78 = (uint64_t)v1;
}

id sub_1001C1ABC(uint64_t a1, void *a2, void *a3)
{
  if (+[TransparencyAnalytics hasInternalDiagnostics]( &OBJC_CLASS___TransparencyAnalytics,  "hasInternalDiagnostics"))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metadata]);
    uint64_t v8 = kTransparencyResponseMetadataKeyServerHint;
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint]);

    if (v9)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metadata]);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:v8]);
      [v6 setObject:v11 forKeyedSubscript:v8];
    }

    if ([v6 count]) {
      *a3 = v6;
    }
  }

  id v12 = [*(id *)(a1 + 32) verifyWithError:a2];
  if (v12 == (id)1)
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) nodeBytes]);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyGPBMessage parseFromData:error:]( &OBJC_CLASS___TopLevelTreeNode,  "parseFromData:error:",  v13,  a2));

    if (v14)
    {
      if ([v14 hasPatHead])
      {
        id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 patHead]);
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 object]);
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) logHead]);
        unsigned __int8 v18 = [v16 isEqualToData:v17];

        if ((v18 & 1) != 0)
        {
          uint64_t v19 = 1LL;
LABEL_36:
          id v22 = [*(id *)(a1 + 32) setInclusionResult:v19 signedLogHead:*(void *)(a1 + 40) error:a2];

          return v22;
        }
      }

      if (a2) {
        *a2 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  @"TransparencyErrorVerify",  -63LL,  @"top-level tree entry does not contain the SLH in the per-app tree entry"));
      }
      if (qword_1002EEE70 != -1) {
        dispatch_once(&qword_1002EEE70, &stru_100289720);
      }
      uint64_t v23 = qword_1002EEE78;
      if (!os_log_type_enabled((os_log_t)qword_1002EEE78, OS_LOG_TYPE_ERROR))
      {
LABEL_35:
        uint64_t v19 = 0LL;
        goto LABEL_36;
      }

      *(_WORD *)__int128 buf = 0;
      id v24 = "top-level tree entry does not contain the SLH in the per-app tree entry";
      id v25 = (os_log_s *)v23;
      uint32_t v26 = 2;
    }

    else
    {
      if (a2) {
        *a2 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:description:",  kTransparencyErrorDecode,  -141LL,  *a2));
      }
      if (qword_1002EEE70 != -1) {
        dispatch_once(&qword_1002EEE70, &stru_100289700);
      }
      uint64_t v27 = qword_1002EEE78;
      if (!os_log_type_enabled((os_log_t)qword_1002EEE78, OS_LOG_TYPE_ERROR)) {
        goto LABEL_35;
      }
      if (a2) {
        uint64_t v28 = *a2;
      }
      else {
        uint64_t v28 = 0LL;
      }
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v31 = v28;
      id v24 = "failed to decode top-level tree node: %@";
      id v25 = (os_log_s *)v27;
      uint32_t v26 = 12;
    }

    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, v24, buf, v26);
    goto LABEL_35;
  }

  id v20 = v12;
  if (a2) {
    *a2 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:description:",  @"TransparencyErrorVerify",  -14LL,  *a2,  @"top-level tree verification failed"));
  }
  if (qword_1002EEE70 != -1) {
    dispatch_once(&qword_1002EEE70, &stru_1002896E0);
  }
  __int128 v21 = (os_log_s *)qword_1002EEE78;
  if (os_log_type_enabled((os_log_t)qword_1002EEE78, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "top level tree verification failed", buf, 2u);
  }

  return [*(id *)(a1 + 32) setInclusionResult:v20 signedLogHead:*(void *)(a1 + 40) error:a2];
}

void sub_1001C1EBC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE78;
  qword_1002EEE78 = (uint64_t)v1;
}

void sub_1001C1EEC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE78;
  qword_1002EEE78 = (uint64_t)v1;
}

void sub_1001C1F1C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE78;
  qword_1002EEE78 = (uint64_t)v1;
}

void sub_1001C232C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE88;
  qword_1002EEE88 = (uint64_t)v1;
}

void sub_1001C2948(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE98;
  qword_1002EEE98 = (uint64_t)v1;
}

void sub_1001C2978(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE98;
  qword_1002EEE98 = (uint64_t)v1;
}

void sub_1001C2CF0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v17 = 0LL;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 createManagedObjectWithError:&v17]);
  id v4 = v17;
  [v3 getUnsigned:"signatureVerified"];
  [v3 setUnsigned:"signatureVerified" value:*(void *)(a1 + 40)];
  objc_msgSend(v3, "setGossip:", objc_msgSend(*(id *)(a1 + 32), "gossip"));
  if (!*(void *)(a1 + 40))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 createSignedTreeHeadFailure]);

    id v7 = *(id **)(a1 + 48);
    if (v7 && *v7) {
      uint64_t v8 = (uint64_t)[*v7 code];
    }
    else {
      uint64_t v8 = -120LL;
    }
    [v6 setErrorCode:v8];
    id v9 = *(id **)(a1 + 48);
    if (v9 && *v9)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*v9 domain]);
      [v6 setErrorDomain:v10];
    }

    else
    {
      [v6 setErrorDomain:kTransparencyErrorUnknown];
    }

    [v6 setSth:v3];
    [v6 setVerificationType:0];
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
  id v16 = v4;
  unsigned __int8 v12 = [v11 persistWithError:&v16];
  id v13 = v16;

  if ((v12 & 1) == 0)
  {
    if (qword_1002EEE90 != -1) {
      dispatch_once(&qword_1002EEE90, &stru_1002897D0);
    }
    uint64_t v14 = (os_log_s *)qword_1002EEE98;
    if (os_log_type_enabled((os_log_t)qword_1002EEE98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v19 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "failed to save signature result for STH: %@",  buf,  0xCu);
    }

    id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
    [v15 reportCoreDataPersistEventForLocation:@"verifySTHSignature" underlyingError:v13];
  }
}

void sub_1001C2F34(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE98;
  qword_1002EEE98 = (uint64_t)v1;
}

uint64_t sub_1001C307C(uint64_t a1, uint64_t *a2)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logHead]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyGPBMessage parseFromData:error:](&OBJC_CLASS___LogHead, "parseFromData:error:", v4, a2));

  if (![*(id *)(a1 + 32) hasSignature]
    || (id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signature]),
        v6,
        !v6))
  {
    uint64_t v36 = -27LL;
    goto LABEL_24;
  }

  uint64_t v7 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logHead]);
  if (!v7
    || (uint64_t v8 = (void *)v7,
        id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logHead]),
        id v10 = [v9 length],
        v9,
        v8,
        !v10))
  {
    uint64_t v36 = -26LL;
    goto LABEL_24;
  }

  if (!v5)
  {
    uint64_t v36 = -208LL;
    goto LABEL_24;
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signature]);
  uint64_t v12 = objc_claimAutoreleasedReturnValue([v11 signature]);
  if (!v12)
  {
    uint64_t v36 = -46LL;
LABEL_36:

    goto LABEL_24;
  }

  id v13 = (void *)v12;
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signature]);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 signature]);
  id v16 = [v15 length];

  if (!v16)
  {
    uint64_t v36 = -46LL;
    goto LABEL_24;
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signature]);
  uint64_t v17 = objc_claimAutoreleasedReturnValue([v11 signingKeySpkihash]);
  if (!v17)
  {
    uint64_t v36 = -47LL;
    goto LABEL_36;
  }

  unsigned __int8 v18 = (void *)v17;
  id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signature]);
  id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 signingKeySpkihash]);
  id v21 = [v20 length];

  if (v21)
  {
    id v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) verifier]);
    id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logHead]);
    id v42 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signature]);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v42 signature]);
    id v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signature]);
    id v25 = (void *)objc_claimAutoreleasedReturnValue([v24 signingKeySpkihash]);
    uint32_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signature]);
    id v43 = 0LL;
    unsigned int v27 = objc_msgSend( v41,  "verifyMessage:signature:spkiHash:algorithm:error:",  v22,  v23,  v25,  +[TransparencySignatureVerifier secKeyAlgorithmForProtoAlgorithm:]( TransparencySignatureVerifier,  "secKeyAlgorithmForProtoAlgorithm:",  objc_msgSend(v26, "algorithm")),  &v43);
    id v28 = v43;

    uint64_t v29 = v27;
    unsigned int v30 = +[TransparencyError hasUnknownSPKIHashError:]( &OBJC_CLASS___TransparencyError,  "hasUnknownSPKIHashError:",  v28);
    if (v30) {
      uint64_t v29 = 2LL;
    }
    if (a2 && v28) {
      *a2 = (uint64_t)v28;
    }
    if (![*(id *)(a1 + 32) gossip] || v29)
    {
      [*(id *)(a1 + 32) storeSignatureResult:v29 signatureError:a2];
      if ((v27 & ~v30 & 1) == 0)
      {
        if (a2) {
          *a2 = (uint64_t)(id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:description:",  @"TransparencyErrorVerify",  -139LL,  *a2));
        }
        if (qword_1002EEE90 != -1) {
          dispatch_once(&qword_1002EEE90, &stru_100289858);
        }
        double v39 = (os_log_s *)qword_1002EEE98;
        if (os_log_type_enabled((os_log_t)qword_1002EEE98, OS_LOG_TYPE_ERROR))
        {
          if (a2) {
            uint64_t v40 = *a2;
          }
          else {
            uint64_t v40 = 0LL;
          }
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v45 = v40;
          _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_ERROR,  "Signed log head signature verification failed: %@",  buf,  0xCu);
        }
      }
    }

    else
    {
      if (qword_1002EEE90 != -1) {
        dispatch_once(&qword_1002EEE90, &stru_100289838);
      }
      uint64_t v31 = (os_log_s *)qword_1002EEE98;
      if (os_log_type_enabled((os_log_t)qword_1002EEE98, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_ERROR,  "gossiped signed log head failed signature validation, will not store result",  buf,  2u);
      }

      uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:description:",  @"TransparencyErrorVerify",  -139LL,  *a2));
      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyAnalytics formatEventName:application:]( &OBJC_CLASS___TransparencyAnalytics,  "formatEventName:application:",  @"GossipSignatureVerificationFailed",  kKTApplicationIdentifierTLT));
      id v34 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
      [v34 logResultForEvent:v33 hardFailure:1 result:v32];

      id v35 = v32;
      *a2 = (uint64_t)v35;
    }

    goto LABEL_31;
  }

  uint64_t v36 = -47LL;
LABEL_24:
  if (a2) {
    *a2 = (uint64_t)(id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:description:",  kTransparencyErrorDecode,  v36,  *a2,  @"SLH missing data required for verification"));
  }
  if (qword_1002EEE90 != -1) {
    dispatch_once(&qword_1002EEE90, &stru_100289818);
  }
  double v37 = (os_log_s *)qword_1002EEE98;
  if (os_log_type_enabled((os_log_t)qword_1002EEE98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 134217984;
    uint64_t v45 = v36;
    _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "SLH missing data required for verification: %ld",  buf,  0xCu);
  }

  uint64_t v29 = 0LL;
LABEL_31:

  return v29;
}

void sub_1001C3620(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE98;
  qword_1002EEE98 = (uint64_t)v1;
}

void sub_1001C3650(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE98;
  qword_1002EEE98 = (uint64_t)v1;
}

void sub_1001C3680(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEE98;
  qword_1002EEE98 = (uint64_t)v1;
}

void sub_1001C4084(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEEA8;
  qword_1002EEEA8 = (uint64_t)v1;
}

void sub_1001C40B4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEEA8;
  qword_1002EEEA8 = (uint64_t)v1;
}

uint64_t sub_1001C41FC(uint64_t a1, uint64_t *a2)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mapHead]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyGPBMessage parseFromData:error:](&OBJC_CLASS___MapHead, "parseFromData:error:", v4, a2));

  if (![*(id *)(a1 + 32) hasSignature]
    || (id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signature]),
        v6,
        !v6))
  {
    uint64_t v39 = -22LL;
    goto LABEL_36;
  }

  uint64_t v7 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mapHead]);
  if (!v7
    || (uint64_t v8 = (void *)v7,
        id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mapHead]),
        id v10 = [v9 length],
        v9,
        v8,
        !v10))
  {
    uint64_t v39 = -21LL;
    goto LABEL_36;
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signature]);
  uint64_t v12 = objc_claimAutoreleasedReturnValue([v11 signature]);
  if (!v12)
  {
    uint64_t v39 = -51LL;
LABEL_35:

    goto LABEL_36;
  }

  id v13 = (void *)v12;
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signature]);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 signature]);
  id v16 = [v15 length];

  if (!v16)
  {
    uint64_t v39 = -51LL;
    goto LABEL_36;
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signature]);
  uint64_t v17 = objc_claimAutoreleasedReturnValue([v11 signingKeySpkihash]);
  if (!v17)
  {
    uint64_t v39 = -52LL;
    goto LABEL_35;
  }

  unsigned __int8 v18 = (void *)v17;
  id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signature]);
  id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 signingKeySpkihash]);
  id v21 = [v20 length];

  if (v21)
  {
    if (v5)
    {
      uint64_t v22 = objc_claimAutoreleasedReturnValue([v5 mapHeadHash]);
      if (v22
        && (uint64_t v23 = (void *)v22,
            id v24 = (void *)objc_claimAutoreleasedReturnValue([v5 mapHeadHash]),
            id v25 = [v24 length],
            v24,
            v23,
            v25))
      {
        if ([v5 application] && objc_msgSend(v5, "application"))
        {
          if ([v5 hasChangeLogHead]
            && (uint32_t v26 = (void *)objc_claimAutoreleasedReturnValue([v5 changeLogHead]),
                v26,
                v26))
          {
            if ([v5 timestampMs])
            {
              unsigned int v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) verifier]);
              id v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mapHead]);
              id v42 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signature]);
              uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v42 signature]);
              unsigned int v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signature]);
              uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v30 signingKeySpkihash]);
              uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signature]);
              id v43 = 0LL;
              unsigned int v33 = objc_msgSend( v27,  "verifyMessage:signature:spkiHash:algorithm:error:",  v28,  v29,  v31,  +[TransparencySignatureVerifier secKeyAlgorithmForProtoAlgorithm:]( TransparencySignatureVerifier,  "secKeyAlgorithmForProtoAlgorithm:",  objc_msgSend(v32, "algorithm")),  &v43);
              id v34 = v43;

              uint64_t v35 = v33;
              unsigned int v36 = +[TransparencyError hasUnknownSPKIHashError:]( &OBJC_CLASS___TransparencyError,  "hasUnknownSPKIHashError:",  v34);
              if (v36) {
                uint64_t v35 = 2LL;
              }
              if (a2 && v34) {
                *a2 = (uint64_t)v34;
              }
              if ((v33 & ~v36 & 1) == 0)
              {
                if (a2) {
                  *a2 = (uint64_t)(id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:description:",  @"TransparencyErrorVerify",  -138LL,  *a2));
                }
                if (qword_1002EEEA0 != -1) {
                  dispatch_once(&qword_1002EEEA0, &stru_1002898D8);
                }
                double v37 = (os_log_s *)qword_1002EEEA8;
                if (os_log_type_enabled((os_log_t)qword_1002EEEA8, OS_LOG_TYPE_ERROR))
                {
                  if (a2) {
                    uint64_t v38 = *a2;
                  }
                  else {
                    uint64_t v38 = 0LL;
                  }
                  *(_DWORD *)__int128 buf = 138412290;
                  uint64_t v45 = v38;
                  _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "SMH signature verification failed: %@",  buf,  0xCu);
                }
              }

              goto LABEL_43;
            }

            uint64_t v39 = -227LL;
          }

          else
          {
            uint64_t v39 = -25LL;
          }
        }

        else
        {
          uint64_t v39 = -24LL;
        }
      }

      else
      {
        uint64_t v39 = -23LL;
      }
    }

    else
    {
      uint64_t v39 = -207LL;
    }
  }

  else
  {
    uint64_t v39 = -52LL;
  }

void sub_1001C4718(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEEA8;
  qword_1002EEEA8 = (uint64_t)v1;
}

void sub_1001C4748(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEEA8;
  qword_1002EEEA8 = (uint64_t)v1;
}

void sub_1001C4818(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) copyManagedObject:0];
  if (v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
    [v3 onMocSetMapHead:v2 mmdResult:*(void *)(a1 + 48) mmdError:*(void *)(a1 + 40)];

    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
    id v9 = 0LL;
    unsigned __int8 v5 = [v4 persistWithError:&v9];
    id v6 = v9;

    if ((v5 & 1) == 0)
    {
      if (qword_1002EEEA0 != -1) {
        dispatch_once(&qword_1002EEEA0, &stru_1002898F8);
      }
      uint64_t v7 = (os_log_s *)qword_1002EEEA8;
      if (os_log_type_enabled((os_log_t)qword_1002EEEA8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v11 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "failed to save inclusion state for map head: %@",  buf,  0xCu);
      }

      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataStore]);
      [v8 reportCoreDataPersistEventForLocation:@"mapHeadMMDState" underlyingError:v6];
    }
  }
}

void sub_1001C4980(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEEA8;
  qword_1002EEEA8 = (uint64_t)v1;
}

uint64_t sub_1001C4B28(uint64_t a1, void *a2)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mapHead]);
  unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyGPBMessage parseFromData:error:](&OBJC_CLASS___MapHead, "parseFromData:error:", v4, a2));

  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  *(double *)(a1 + 40)));
  [v6 timeIntervalSince1970];
  unint64_t v8 = (unint64_t)(v7 * 1000.0);

  id v9 = [v5 timestampMs];
  if ((unint64_t)v9 + kKTMaximumMergeDelayMs >= v8)
  {
    if (qword_1002EEEA0 != -1) {
      dispatch_once(&qword_1002EEEA0, &stru_100289938);
    }
    uint64_t v14 = (os_log_s *)qword_1002EEEA8;
    if (os_log_type_enabled((os_log_t)qword_1002EEEA8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "SMH MMD verified", buf, 2u);
    }

    id v15 = *(void **)(a1 + 32);
    uint64_t v13 = 1LL;
    [v15 setMMDVerifiedForMapHead:1 mmdError:0];
  }

  else
  {
    if (qword_1002EEEA0 != -1) {
      dispatch_once(&qword_1002EEEA0, &stru_100289918);
    }
    id v10 = (void *)qword_1002EEEA8;
    if (os_log_type_enabled((os_log_t)qword_1002EEEA8, OS_LOG_TYPE_ERROR))
    {
      id v11 = v10;
      *(_DWORD *)__int128 buf = 134217984;
      id v18 = [v5 timestampMs];
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "SMH timestamp exceeds MMD: %lld", buf, 0xCu);
    }

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( TransparencyError,  "errorWithDomain:code:underlyingError:description:",  @"TransparencyErrorVerify",  -228,  *a2,  @"SMH timestamp exceeds MMD: %lld",  [v5 timestampMs]));
    [*(id *)(a1 + 32) setMMDVerifiedForMapHead:0 mmdError:v12];
    if (v12) {
      *a2 = v12;
    }

    uint64_t v13 = 0LL;
  }

  return v13;
}

void sub_1001C4D88(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEEA8;
  qword_1002EEEA8 = (uint64_t)v1;
}

void sub_1001C4DB8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEEA8;
  qword_1002EEEA8 = (uint64_t)v1;
}

void sub_1001C5004(_Unwind_Exception *a1)
{
}

void sub_1001C5020(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEEB8;
  qword_1002EEEB8 = (uint64_t)v1;
}

void sub_1001C51B0(_Unwind_Exception *a1)
{
}

void sub_1001C51CC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEEB8;
  qword_1002EEEB8 = (uint64_t)v1;
}

void sub_1001C5248(_Unwind_Exception *a1)
{
}

void sub_1001C54D0(_Unwind_Exception *a1)
{
}

void sub_1001C54F4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEEB8;
  qword_1002EEEB8 = (uint64_t)v1;
}

void sub_1001C5BD8(id a1)
{
  os_log_t v1 = objc_alloc_init(&OBJC_CLASS___TransparencyIDSConfigBag);
  id v2 = (void *)qword_1002EEEC8;
  qword_1002EEEC8 = (uint64_t)v1;
}

void sub_1001C6160(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEED8;
  qword_1002EEED8 = (uint64_t)v1;
}

void sub_1001C6448(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEEE8;
  qword_1002EEEE8 = (uint64_t)v1;
}

void sub_1001C68CC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEEE8;
  qword_1002EEEE8 = (uint64_t)v1;
}

void sub_1001C68FC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEEE8;
  qword_1002EEEE8 = (uint64_t)v1;
}

void sub_1001C692C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEEE8;
  qword_1002EEEE8 = (uint64_t)v1;
}

void sub_1001C695C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEEE8;
  qword_1002EEEE8 = (uint64_t)v1;
}

void sub_1001C6C78(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEEE8;
  qword_1002EEEE8 = (uint64_t)v1;
}

void sub_1001C6CA8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEEE8;
  qword_1002EEEE8 = (uint64_t)v1;
}

void sub_1001C6D60(id a1)
{
  os_log_t v1 = objc_alloc_init(&OBJC_CLASS___TransparencyAccount);
  id v2 = (void *)qword_1002EEEF0;
  qword_1002EEEF0 = (uint64_t)v1;
}

void sub_1001C6EE0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEEE8;
  qword_1002EEEE8 = (uint64_t)v1;
}

id sub_1001C6F10(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAccount primaryAccount:](&OBJC_CLASS___TransparencyAccount, "primaryAccount:", 0LL));
  if (qword_1002EEEE0 != -1) {
    dispatch_once(&qword_1002EEEE0, &stru_100289B40);
  }
  id v4 = (os_log_s *)qword_1002EEEE8;
  if (os_log_type_enabled((os_log_t)qword_1002EEEE8, OS_LOG_TYPE_INFO))
  {
    unsigned __int8 v5 = @"yes";
    if (!v3) {
      unsigned __int8 v5 = @"no";
    }
    int v21 = 138543362;
    uint64_t v22 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "TransparencyAccount Primary account found %{public}@",  (uint8_t *)&v21,  0xCu);
  }

  if (v3)
  {
    unint64_t v6 = +[TransparencyAccount accountLevel:](&OBJC_CLASS___TransparencyAccount, "accountLevel:", v3);
    double v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "aa_personID"));
    unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  +[CDPAccount isICDPEnabledForDSID:](&OBJC_CLASS___CDPAccount, "isICDPEnabledForDSID:", v7)));
    [v2 setObject:v8 forKeyedSubscript:@"CDPEnabled"];

    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v6 == 4));
    [v2 setObject:v9 forKeyedSubscript:@"ktAccountIsHSA2"];

    if (v6 == 4)
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAccount cloudKitAccount:](&OBJC_CLASS___TransparencyAccount, "cloudKitAccount:", v3));
      id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) messagesStatus]);

      if (v7) {
        id v12 = [*(id *)(a1 + 32) haveIDSAccount:v7];
      }
      else {
        id v12 = 0LL;
      }
      id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v10 != 0LL));
      [v2 setObject:v15 forKeyedSubscript:@"ktAccountCloudKit"];

      id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v11 != 0LL));
      [v2 setObject:v16 forKeyedSubscript:@"ktAccountIDS"];

      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v12));
      [v2 setObject:v17 forKeyedSubscript:@"ktAccountCKIDSame"];

      id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 32) idsAccountType]));
      [v2 setObject:v18 forKeyedSubscript:@"ktPhoneOnly"];

      id v19 = v2;
    }

    else
    {
      id v14 = v2;
    }
  }

  else
  {
    id v13 = v2;
  }

  return v2;
}

void sub_1001C720C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEEE8;
  qword_1002EEEE8 = (uint64_t)v1;
}

void sub_1001C7824(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEEE8;
  qword_1002EEEE8 = (uint64_t)v1;
}

void sub_1001C7854(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEEE8;
  qword_1002EEEE8 = (uint64_t)v1;
}

void sub_1001C7884(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEEE8;
  qword_1002EEEE8 = (uint64_t)v1;
}

void sub_1001C78B4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEEE8;
  qword_1002EEEE8 = (uint64_t)v1;
}

void sub_1001C78E4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEEE8;
  qword_1002EEEE8 = (uint64_t)v1;
}

void sub_1001C7914(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEEE8;
  qword_1002EEEE8 = (uint64_t)v1;
}

void sub_1001C7F58(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEEE8;
  qword_1002EEEE8 = (uint64_t)v1;
}

void sub_1001C7F88(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEEE8;
  qword_1002EEEE8 = (uint64_t)v1;
}

void sub_1001C7FB8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEEE8;
  qword_1002EEEE8 = (uint64_t)v1;
}

void sub_1001C7FE8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEEE8;
  qword_1002EEEE8 = (uint64_t)v1;
}

void sub_1001C8018(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEEE8;
  qword_1002EEEE8 = (uint64_t)v1;
}

void sub_1001C8238(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEEE8;
  qword_1002EEEE8 = (uint64_t)v1;
}

void sub_1001C8268(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  switch(a2)
  {
    case 2LL:
      if (qword_1002EEEE0 != -1) {
        dispatch_once(&qword_1002EEEE0, &stru_100289D48);
      }
      double v7 = (os_log_s *)qword_1002EEEE8;
      if (os_log_type_enabled((os_log_t)qword_1002EEEE8, OS_LOG_TYPE_ERROR))
      {
        int v12 = 138412290;
        id v13 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Primary account credentials renewal request failed: %@",  (uint8_t *)&v12,  0xCu);
      }

      uint64_t v8 = kTransparencyErrorAccount;
      uint64_t v9 = -176LL;
      goto LABEL_19;
    case 1LL:
      if (qword_1002EEEE0 != -1) {
        dispatch_once(&qword_1002EEEE0, &stru_100289D28);
      }
      id v10 = (os_log_s *)qword_1002EEEE8;
      if (os_log_type_enabled((os_log_t)qword_1002EEEE8, OS_LOG_TYPE_ERROR))
      {
        int v12 = 138412290;
        id v13 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Primary account credentials renewal request rejected: %@",  (uint8_t *)&v12,  0xCu);
      }

      uint64_t v8 = kTransparencyErrorAccount;
      uint64_t v9 = -175LL;
LABEL_19:
      id v11 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:description:",  v8,  v9,  v5,  @"Account credential renewal failed"));
      (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();

      break;
    case 0LL:
      if (qword_1002EEEE0 != -1) {
        dispatch_once(&qword_1002EEEE0, &stru_100289D08);
      }
      unint64_t v6 = (os_log_s *)qword_1002EEEE8;
      if (os_log_type_enabled((os_log_t)qword_1002EEEE8, OS_LOG_TYPE_INFO))
      {
        LOWORD(v12) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "Primary account credentials successfully renewed",  (uint8_t *)&v12,  2u);
      }

      (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
      break;
  }
}

void sub_1001C84B0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEEE8;
  qword_1002EEEE8 = (uint64_t)v1;
}

void sub_1001C84E0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEEE8;
  qword_1002EEEE8 = (uint64_t)v1;
}

void sub_1001C8510(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEEE8;
  qword_1002EEEE8 = (uint64_t)v1;
}

void sub_1001C8A8C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEF08;
  qword_1002EEF08 = (uint64_t)v1;
}

void sub_1001C8ABC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEF08;
  qword_1002EEF08 = (uint64_t)v1;
}

id sub_1001C8AEC(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "evalCurrentOptInState:optInStateError:", a2);
}

void sub_1001C916C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEF08;
  qword_1002EEF08 = (uint64_t)v1;
}

void sub_1001C919C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEF08;
  qword_1002EEF08 = (uint64_t)v1;
}

void sub_1001C91CC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEF08;
  qword_1002EEF08 = (uint64_t)v1;
}

void sub_1001C91FC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEF08;
  qword_1002EEF08 = (uint64_t)v1;
}

void sub_1001C922C(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  double v7 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyAnalytics formatEventName:application:]( &OBJC_CLASS___TransparencyAnalytics,  "formatEventName:application:",  @"OptInServerSet",  *(void *)(a1 + 32)));
  if (qword_1002EEF00 != -1) {
    dispatch_once(&qword_1002EEF00, &stru_100289E28);
  }
  uint64_t v8 = (os_log_s *)qword_1002EEF08;
  if (os_log_type_enabled((os_log_t)qword_1002EEF08, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = 67109378;
    LODWORD(v21[0]) = a2;
    WORD2(v21[0]) = 2112;
    *(void *)((char *)v21 + 6) = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "getKeyTransparencyOptInEligiblityForApplication: %d error: %@",  (uint8_t *)&v20,  0x12u);
  }

  if (v6 || (a2 & 1) == 0)
  {
    if (qword_1002EEF00 != -1) {
      dispatch_once(&qword_1002EEF00, &stru_100289E48);
    }
    id v11 = (os_log_s *)qword_1002EEF08;
    if (os_log_type_enabled((os_log_t)qword_1002EEF08, OS_LOG_TYPE_ERROR))
    {
      int v20 = 138412290;
      v21[0] = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "IDS reports that this account is ineligible to opt-in to KT: %@",  (uint8_t *)&v20,  0xCu);
    }

    int v12 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:description:",  kTransparencyErrorAccount,  -290LL,  v6,  @"IDS reports that this account is ineligible to opt-in to KT"));

    [*(id *)(a1 + 40) setError:v12];
    [*(id *)(a1 + 48) setError:v12];
    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) optInStates]);
    [v13 completedCurrentTarget];

    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) errorState]);
    [*(id *)(a1 + 48) setNextState:v14];

    id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) operationQueue]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) finishedOp]);
    [v15 addOperation:v16];

    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) error]);
    [v17 logResultForEvent:v7 hardFailure:0 result:v18];
  }

  else
  {
    if ([*(id *)(a1 + 40) targetState] == (id)2)
    {
      if (qword_1002EEF00 != -1) {
        dispatch_once(&qword_1002EEF00, &stru_100289E68);
      }
      uint64_t v9 = (os_log_s *)qword_1002EEF08;
      if (os_log_type_enabled((os_log_t)qword_1002EEF08, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v20) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "going for reset before opting in",  (uint8_t *)&v20,  2u);
      }

      id v10 = off_10028AC90;
    }

    else
    {
      if (qword_1002EEF00 != -1) {
        dispatch_once(&qword_1002EEF00, &stru_100289E88);
      }
      id v19 = (os_log_s *)qword_1002EEF08;
      if (os_log_type_enabled((os_log_t)qword_1002EEF08, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v20) = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "going for opt-in", (uint8_t *)&v20, 2u);
      }

      id v10 = off_10028ACA0;
    }

    [*(id *)(a1 + 48) setNextState:*v10];
    int v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) operationQueue]);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) finishedOp]);
    [v12 addOperation:v17];
  }
}

void sub_1001C95D0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEF08;
  qword_1002EEF08 = (uint64_t)v1;
}

void sub_1001C9600(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEF08;
  qword_1002EEF08 = (uint64_t)v1;
}

void sub_1001C9630(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEF08;
  qword_1002EEF08 = (uint64_t)v1;
}

void sub_1001C9660(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEF08;
  qword_1002EEF08 = (uint64_t)v1;
}

void sub_1001C981C(id a1)
{
  int v2 = 0;
  size_t v1 = 4LL;
  if (!sysctlbyname("kern.hv_vmm_present", &v2, &v1, 0LL, 0LL)) {
    byte_1002EEF18 = v2 == 1;
  }
}

void sub_1001C9998(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 validBAAKey])
  {
    if (qword_1002EEF20 != -1) {
      dispatch_once(&qword_1002EEF20, &stru_100289EF0);
    }
    id v4 = (os_log_s *)qword_1002EEF28;
    if (os_log_type_enabled((os_log_t)qword_1002EEF28, OS_LOG_TYPE_INFO))
    {
      LOWORD(v1_Block_object_dispose((const void *)(v11 - 80), 8) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Successfully fetched BAA cert",  (uint8_t *)&v18,  2u);
    }

    id v5 = *(id *)(a1 + 32);
    objc_sync_enter(v5);
    [*(id *)(a1 + 32) setBaaKey:v3];
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [*(id *)(a1 + 32) setLastLocalFetchTime:v6];

    objc_sync_exit(v5);
  }

  else
  {
    if (qword_1002EEF20 != -1) {
      dispatch_once(&qword_1002EEF20, &stru_100289F10);
    }
    double v7 = (void *)qword_1002EEF28;
    if (os_log_type_enabled((os_log_t)qword_1002EEF28, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = v7;
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
      int v18 = 138412290;
      id v19 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Failed to get BAA cert: %@",  (uint8_t *)&v18,  0xCu);
    }

    id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    int HasDomainAndErrorCode = mobileactivationErrorHasDomainAndErrorCode(v10, MobileActivationErrorDomain, -3LL);

    if (HasDomainAndErrorCode)
    {
      if (qword_1002EEF20 != -1) {
        dispatch_once(&qword_1002EEF20, &stru_100289F30);
      }
      int v12 = (os_log_s *)qword_1002EEF28;
      if (os_log_type_enabled((os_log_t)qword_1002EEF28, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v1_Block_object_dispose((const void *)(v11 - 80), 8) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "device identity authentication unsupported; will use account auth",
          (uint8_t *)&v18,
          2u);
      }

      [*(id *)(a1 + 32) setIsSupported:0];
    }
  }

  if ([*(id *)(a1 + 32) isSupported])
  {
    if (os_variant_allows_internal_security_policies("com.apple.Transparency"))
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 userInfo]);
    }

    else
    {
      id v14 = 0LL;
    }

    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    [v15 logResultForEvent:@"TransparencyAuthentication" hardFailure:1 result:v16 withAttributes:v14];
  }

  uint64_t v17 = *(void *)(a1 + 40);
  if (v17) {
    (*(void (**)(uint64_t, id))(v17 + 16))(v17, v3);
  }
}

void sub_1001C9C8C(_Unwind_Exception *a1)
{
}

void sub_1001C9CA8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  int v2 = (void *)qword_1002EEF28;
  qword_1002EEF28 = (uint64_t)v1;
}

void sub_1001C9CD8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  int v2 = (void *)qword_1002EEF28;
  qword_1002EEF28 = (uint64_t)v1;
}

void sub_1001C9D08(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  int v2 = (void *)qword_1002EEF28;
  qword_1002EEF28 = (uint64_t)v1;
}

void sub_1001C9F30(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  int v2 = (void *)qword_1002EEF28;
  qword_1002EEF28 = (uint64_t)v1;
}

void sub_1001CA100(_Unwind_Exception *a1)
{
}

void sub_1001CA114(void *a1, void *a2)
{
  id v8 = a2;
  if ([v8 validBAAKey])
  {
    id v3 = (void *)a1[4];
    uint64_t v4 = a1[5];
    id v5 = [v8 referenceKey];
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v8 certificates]);
    [v3 signData:v4 key:v5 certs:v6 completionHandler:a1[6]];
  }

  else
  {
    uint64_t v7 = a1[6];
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v8 error]);
    (*(void (**)(uint64_t, void, void, void *))(v7 + 16))(v7, 0LL, 0LL, v6);
  }
}

uint64_t sub_1001CA338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  a2,  *(void *)(a1 + 32),  a3,  a4);
}

void sub_1001CA4E4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  int v2 = (void *)qword_1002EEF38;
  qword_1002EEF38 = (uint64_t)v1;
}

void sub_1001CA780(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  int v2 = (void *)qword_1002EEF38;
  qword_1002EEF38 = (uint64_t)v1;
}

void sub_1001CA7B0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  int v2 = (void *)qword_1002EEF38;
  qword_1002EEF38 = (uint64_t)v1;
}

void sub_1001CA7E0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  int v2 = (void *)qword_1002EEF38;
  qword_1002EEF38 = (uint64_t)v1;
}

void sub_1001CAB14(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  int v2 = (void *)qword_1002EEF38;
  qword_1002EEF38 = (uint64_t)v1;
}

void sub_1001CAD58(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  int v2 = (void *)qword_1002EEF38;
  qword_1002EEF38 = (uint64_t)v1;
}

void sub_1001CAD88(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  int v2 = (void *)qword_1002EEF38;
  qword_1002EEF38 = (uint64_t)v1;
}

void sub_1001CB270(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  int v2 = (void *)qword_1002EEF48;
  qword_1002EEF48 = (uint64_t)v1;
}

void sub_1001CB2A0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  int v2 = (void *)qword_1002EEF48;
  qword_1002EEF48 = (uint64_t)v1;
}

void sub_1001CB4CC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  int v2 = (void *)qword_1002EEF48;
  qword_1002EEF48 = (uint64_t)v1;
}

void sub_1001CBBE8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1001CBC0C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  os_log_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:", 0.0));
  [WeakRetained setFinishDate:v1];
}

void sub_1001CBF4C(_Unwind_Exception *a1)
{
}

void sub_1001CBF68(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v4 = (void (**)(void))objc_claimAutoreleasedReturnValue([WeakRetained finishingBlock]);
    v4[2]();

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 completionHandlerDidRunCondition]);
    [v5 fulfill];

    __int128 v13 = 0u;
    __int128 v14 = 0u;
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dependencies", 0));
    id v7 = [v6 countByEnumeratingWithState:&v11 objects:v16 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v12;
      do
      {
        for (unint64_t i = 0LL; i != v8; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v12 != v9) {
            objc_enumerationMutation(v6);
          }
          [v3 removeDependency:*(void *)(*((void *)&v11 + 1) + 8 * (void)i)];
        }

        id v8 = [v6 countByEnumeratingWithState:&v11 objects:v16 count:16];
      }

      while (v8);
    }
  }

  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "completion handler called on deallocated operation instance",  buf,  2u);
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

id sub_1001CC254(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isCancelled];
  return result;
}

BOOL sub_1001CC430(id a1, id a2, unint64_t a3, BOOL *a4)
{
  return objc_msgSend(a2, "isFinished", a3, a4) ^ 1;
}

void sub_1001CC6C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1001CC6D8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if ([WeakRetained timeoutCanOccur])
  {
    os_log_t v1 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained _onqueueTimeoutError]);
    [WeakRetained setError:v1];

    [WeakRetained setTimeoutCanOccur:0];
    [WeakRetained cancel];
  }
}

void sub_1001CC7BC(_Unwind_Exception *a1)
{
}

void sub_1001CCBDC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id obj)
{
}

void sub_1001CCD80(_Unwind_Exception *a1)
{
}

void sub_1001CCDA0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001CD320(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEF58;
  qword_1002EEF58 = (uint64_t)v1;
}

void sub_1001CD4A0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEF58;
  qword_1002EEF58 = (uint64_t)v1;
}

void sub_1001CD790(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEF58;
  qword_1002EEF58 = (uint64_t)v1;
}

void sub_1001CD7C0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEF58;
  qword_1002EEF58 = (uint64_t)v1;
}

void sub_1001CD7F0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEF58;
  qword_1002EEF58 = (uint64_t)v1;
}

void sub_1001CD948(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEF58;
  qword_1002EEF58 = (uint64_t)v1;
}

void sub_1001CDCE8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEF68;
  qword_1002EEF68 = (uint64_t)v1;
}

void sub_1001CDD18(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEF68;
  qword_1002EEF68 = (uint64_t)v1;
}

void sub_1001CDE44(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEF68;
  qword_1002EEF68 = (uint64_t)v1;
}

id sub_1001CE110(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
  else {
    return [*(id *)(a1 + 32) fetch:*(void *)(a1 + 40) shouldRetry:0 allowEmptyData:*(unsigned __int8 *)(a1 + 56) useReversePush:*(unsigned __int8 *)(a1 + 57) completionHandler:*(void *)(a1 + 48)];
  }
}

void sub_1001CE144(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEF68;
  qword_1002EEF68 = (uint64_t)v1;
}

void sub_1001CE26C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v35 = @"sessionAuthIsSupported";
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) session]);
  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 auth]);
  __int128 v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v11 isSupported]));
  unsigned int v36 = v12;
  __int128 v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v36,  &v35,  1LL));
  id v14 = [v13 mutableCopy];

  id v15 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"x-auth-status"]);
  if (v15)
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"x-auth-status"]);
    [v14 setObject:v16 forKeyedSubscript:@"transparencyResponseAuthStatus"];
  }

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transparencyAnalytics]);
  [v17 logResultForEvent:@"TransparencyAuthentication" hardFailure:0 result:v9 withAttributes:v14];

  if ([*(id *)(a1 + 32) needsRetry:v9] && *(_BYTE *)(a1 + 56))
  {
    int v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) session]);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 auth]);
    unsigned int v20 = [v19 isSupported];

    if (v20)
    {
      int v21 = -[TransparencyNetworkRequest initWithRequest:]( objc_alloc(&OBJC_CLASS___TransparencyNetworkRequest),  "initWithRequest:",  *(void *)(a1 + 40));
      -[TransparencyNetworkRequest setAuthenticated:](v21, "setAuthenticated:", 1LL);
      id v22 = [*(id *)(a1 + 32) needsReauthorization:v9 metadata:v8];
      double v23 = 0.0;
      if ([*(id *)(a1 + 32) needsTimeShift:v9 metadata:v8])
      {
        +[TransparencyLogClient timeShift:](&OBJC_CLASS___TransparencyLogClient, "timeShift:", v8);
        double v23 = v24;
      }

      id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) session]);
      uint32_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 auth]);
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472LL;
      void v29[2] = sub_1001CE59C;
      void v29[3] = &unk_10028A300;
      id v33 = *(id *)(a1 + 48);
      id v30 = v7;
      id v27 = v8;
      uint64_t v28 = *(void *)(a1 + 32);
      id v31 = v27;
      uint64_t v32 = v28;
      __int16 v34 = *(_WORD *)(a1 + 57);
      -[TransparencyNetworkRequest createRequestForAuthentication:fetchAuthNow:timeShift:completionHandler:]( v21,  "createRequestForAuthentication:fetchAuthNow:timeShift:completionHandler:",  v26,  v22,  v29,  v23);
    }

    else
    {
      [*(id *)(a1 + 32) renewAccountTokenForFetch:*(void *)(a1 + 40) allowEmptyData:*(unsigned __int8 *)(a1 + 57) useReversePush:*(unsigned __int8 *)(a1 + 58) completionHandler:*(void *)(a1 + 48)];
    }
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_1001CE59C(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  id v6 = v5;
  if (!v7 || v5)
  {
    if (!v5) {
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorInternal,  -191LL,  @"TransparencyRequest failed to produce URLRequest"));
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    [*(id *)(a1 + 48) fetch:v7 shouldRetry:0 allowEmptyData:*(unsigned __int8 *)(a1 + 64) useReversePush:*(unsigned __int8 *)(a1 + 65) completionHandler:*(void *)(a1 + 56)];
  }
}

void sub_1001CE74C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    if (!v6) {
      id v7 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorInternal,  -191LL,  @"TransparencyRequest failed to produce URLRequest"));
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    id v8 = *(void **)(a1 + 32);
    id v9 = [*(id *)(a1 + 40) allowEmptyData];
    id v10 = [*(id *)(a1 + 40) useReversePush];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    _DWORD v11[2] = sub_1001CE86C;
    v11[3] = &unk_10028A350;
    id v12 = *(id *)(a1 + 40);
    id v13 = *(id *)(a1 + 48);
    [v8 fetch:v5 allowEmptyData:v9 useReversePush:v10 completionHandler:v11];

    id v7 = v12;
  }
}

void sub_1001CE86C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  id v10 = -[TransparencyResponse initWithRequest:responseData:metadata:]( objc_alloc(&OBJC_CLASS___TransparencyResponse),  "initWithRequest:responseData:metadata:",  *(void *)(a1 + 32),  v9,  v8);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1001CEA9C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEF68;
  qword_1002EEF68 = (uint64_t)v1;
}

void sub_1001CEACC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEF68;
  qword_1002EEF68 = (uint64_t)v1;
}

id sub_1001CEE10(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    double v3 = (double)*(unint64_t *)(a1 + 48) / (double)v2;
  }
  else {
    double v3 = 1.0;
  }
  [*(id *)(a1 + 32) setBackoff:v3];
  return _[*(id *)(a1 + 32) setMaximumDelay:*(void *)(a1 + 48)];
}

id sub_1001CF0EC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onqueueTrigger:*(void *)(a1 + 40) maximumDelay:-1];
}

void sub_1001CF1B0(_Unwind_Exception *a1)
{
}

void sub_1001CF1C4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setLiveRequest:1];
  unint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained liveRequestReceived]);
  [v2 fulfill];

  if (*(void *)(a1 + 40) == -1LL) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 40);
  }
  objc_msgSend(WeakRetained, "_onqueueTrigger:maximumDelay:", v3);
}

void sub_1001CF4F4(_Unwind_Exception *a1)
{
}

void sub_1001CF508(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setLiveRequest:1];
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained liveRequestReceived]);
  [v1 fulfill];

  [WeakRetained _onqueueTrigger:0 maximumDelay:-1];
}

void sub_1001CF90C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1001CF938(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _onqueueTimerTick];
}

void sub_1001CF9D0(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) timer]);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t v4 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) timer]);
    uint64_t v5 = dispatch_source_testcancel(v4);

    if (!v5)
    {
      id v6 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) timer]);
      dispatch_source_cancel(v6);
    }
  }

void sub_1001CFF14(_Unwind_Exception *a1)
{
}

void sub_1001D0098(_Unwind_Exception *a1)
{
}

BOOL sub_1001D01A8(id a1, id a2, unint64_t a3, BOOL *a4)
{
  return objc_msgSend(a2, "isFinished", a3, a4) ^ 1;
}

void sub_1001D049C(_Unwind_Exception *a1)
{
}

void sub_1001D04B8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "dependencies", 0));
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        [WeakRetained removeDependency:*(void *)(*((void *)&v7 + 1) + 8 * (void)v6)];
        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }

    while (v4);
  }
}

void sub_1001D0844(id a1)
{
  if (+[TransparencySettings getBool:]( &OBJC_CLASS___TransparencySettings,  "getBool:",  kTransparencyFlagDisablePinning)) {
    byte_1002EEF70 = 1;
  }
}

void sub_1001D0FB8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEF88;
  qword_1002EEF88 = (uint64_t)v1;
}

void sub_1001D0FE8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEF88;
  qword_1002EEF88 = (uint64_t)v1;
}

void sub_1001D1018(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEF88;
  qword_1002EEF88 = (uint64_t)v1;
}

void sub_1001D12E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1001D1314(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001D1324(uint64_t a1)
{
}

void sub_1001D132C(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = a3;
  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyLogSession createErrorFromURLResonse:data:allowEmptyData:error:]( &OBJC_CLASS___TransparencyLogSession,  "createErrorFromURLResonse:data:allowEmptyData:error:",  v8,  v7,  *(unsigned __int8 *)(a1 + 56),  a4));
  __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) callbackWorkloop]);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  void v17[2] = sub_1001D1464;
  v17[3] = &unk_10028A4D8;
  id v18 = v9;
  id v11 = *(id *)(a1 + 40);
  id v20 = v8;
  id v21 = v11;
  id v19 = v7;
  id v12 = v8;
  id v13 = v7;
  id v16 = v9;
  +[TransparencyLogSession dispatchToQueue:block:]( &OBJC_CLASS___TransparencyLogSession,  "dispatchToQueue:block:",  v10,  v17);

  uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v15 = *(void **)(v14 + 40);
  *(void *)(v14 + 40) = 0LL;
}

void sub_1001D1464(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) metadata]);
    id v3 = *(void (**)(uint64_t, uint64_t))(v1 + 16);
    uint64_t v4 = v1;
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) metadata]);
    id v3 = *(void (**)(uint64_t, uint64_t))(v1 + 16);
    uint64_t v4 = v1;
    uint64_t v5 = v6;
  }

  id v7 = (id)v2;
  v3(v4, v5);
}

void sub_1001D14EC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEF88;
  qword_1002EEF88 = (uint64_t)v1;
}

void sub_1001D1638( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1001D1650(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0LL;
}

void sub_1001D194C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEF98;
  qword_1002EEF98 = (uint64_t)v1;
}

void sub_1001D1B88(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 application]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyAnalytics formatEventName:application:]( &OBJC_CLASS___TransparencyAnalytics,  "formatEventName:application:",  @"NetworkDownloadEvent",  v4));

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 application]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyAnalytics formatEventName:application:]( &OBJC_CLASS___TransparencyAnalytics,  "formatEventName:application:",  @"NetworkDownloadSize",  v6));

  [v3 setResponse:*(void *)(a1 + 32)];
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint]);
  [v3 setServerHint:v8];

  __int128 v9 = (char *)[v3 downloadType];
  if ((unint64_t)(v9 - 1) < 2)
  {
    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) contextStore]);
    uint64_t v11 = *(void *)(a1 + 56);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v3 application]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) logClient]);
    [v10 verifyHeadInclusionDownload:v11 application:v12 logClient:v13];
    goto LABEL_5;
  }

  if (v9 == (char *)3)
  {
    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) contextStore]);
    uint64_t v14 = *(void *)(a1 + 56);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v3 application]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) logClient]);
    [v10 verifyHeadConsistencyDownload:v14 application:v12 logClient:v13];
LABEL_5:

    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    id v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 32) length]));
    [v15 logMetric:v16 withName:v7];

    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    [v17 logSuccessForEventNamed:v5];

    id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) dataStore]);
    id v27 = 0LL;
    unsigned __int8 v19 = [v18 persistWithError:&v27];
    id v20 = v27;

    if ((v19 & 1) == 0)
    {
      id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) dataStore]);
      [v21 reportCoreDataPersistEventForLocation:@"handleDownloadRecord" underlyingError:v20];

      if (qword_1002EEF90 != -1) {
        dispatch_once(&qword_1002EEF90, &stru_10028A580);
      }
      id v22 = (os_log_s *)qword_1002EEF98;
      if (os_log_type_enabled((os_log_t)qword_1002EEF98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v29 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "failed to store results after successful download: %@",  buf,  0xCu);
      }
    }

    goto LABEL_15;
  }

  if (qword_1002EEF90 != -1) {
    dispatch_once(&qword_1002EEF90, &stru_10028A560);
  }
  double v23 = (void *)qword_1002EEF98;
  if (os_log_type_enabled((os_log_t)qword_1002EEF98, OS_LOG_TYPE_ERROR))
  {
    double v24 = v23;
    *(_DWORD *)__int128 buf = 134217984;
    id v29 = [v3 downloadType];
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "record has unsupported downloadType: %lld",  buf,  0xCu);
  }

  id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) dataStore]);
  [v25 deleteDownloadRecordById:*(void *)(a1 + 56) error:0];

  id v20 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:description:]( TransparencyError,  "errorWithDomain:code:description:",  kTransparencyErrorDatabase,  -212,  @"record has unsupported downloadType: %lld",  [v3 downloadType]));
  uint32_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
  [v26 logResultForEvent:v5 hardFailure:1 result:v20];

LABEL_15:
}

void sub_1001D1FB0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEF98;
  qword_1002EEF98 = (uint64_t)v1;
}

void sub_1001D1FE0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEF98;
  qword_1002EEF98 = (uint64_t)v1;
}

void sub_1001D2010(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEF98;
  qword_1002EEF98 = (uint64_t)v1;
}

void sub_1001D2310(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEF98;
  qword_1002EEF98 = (uint64_t)v1;
}

void sub_1001D2340(uint64_t a1)
{
  if ([*(id *)(a1 + 32) successful])
  {
    uint64_t v2 = *(void *)(a1 + 48);
    uint64_t v3 = *(void *)(a1 + 56);
    uint64_t v4 = *(void **)(a1 + 40);
    id v9 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metadata]);
    objc_msgSend(v4, "handleDownloadRecord:downloadData:downloadMetadata:", v2, v3);
  }

  else
  {
    id v9 = (id)objc_claimAutoreleasedReturnValue( +[TransparencyLogSession createErrorFromURLResonse:data:allowEmptyData:error:]( &OBJC_CLASS___TransparencyLogSession,  "createErrorFromURLResonse:data:allowEmptyData:error:",  *(void *)(a1 + 32),  0LL,  1LL,  0LL));
    uint64_t v6 = *(void **)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 64);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metadata]);
    [v6 handleDownloadRecordFailure:v5 task:v7 downloadMetadata:v8 error:v9];
  }
}

void sub_1001D2400(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEF98;
  qword_1002EEF98 = (uint64_t)v1;
}

void sub_1001D26DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 application]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyAnalytics formatEventName:application:]( &OBJC_CLASS___TransparencyAnalytics,  "formatEventName:application:",  @"NetworkDownloadEvent",  v5));
  [v4 logResultForEvent:v6 hardFailure:0 result:*(void *)(a1 + 32)];

  if (qword_1002EEF90 != -1) {
    dispatch_once(&qword_1002EEF90, &stru_10028A650);
  }
  uint64_t v7 = (os_log_s *)qword_1002EEF98;
  if (os_log_type_enabled((os_log_t)qword_1002EEF98, OS_LOG_TYPE_ERROR))
  {
    id v9 = *(void **)(a1 + 40);
    id v8 = *(void **)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138412802;
    id v32 = v9;
    __int16 v33 = 2114;
    id v34 = v8;
    __int16 v35 = 2112;
    uint64_t v36 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "download task %@ for downloadId %{public}@ failed: %@",  buf,  0x20u);
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint]);
  [v3 setServerHint:v11];

  if ((char *)[v3 downloadType] - 1 > (char *)2)
  {
    if (qword_1002EEF90 != -1) {
      dispatch_once(&qword_1002EEF90, &stru_10028A670);
    }
    uint64_t v17 = (void *)qword_1002EEF98;
    if (os_log_type_enabled((os_log_t)qword_1002EEF98, OS_LOG_TYPE_ERROR))
    {
      id v18 = v17;
      id v19 = [v3 downloadType];
      *(_DWORD *)__int128 buf = 134217984;
      id v32 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "record has unsupported downloadType: %lld",  buf,  0xCu);
    }

    id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) dataStore]);
    uint64_t v21 = *(void *)(a1 + 48);
    id v30 = 0LL;
    [v20 deleteDownloadRecordById:v21 error:&v30];
    id v12 = v30;

    if (v12)
    {
      if (qword_1002EEF90 != -1) {
        dispatch_once(&qword_1002EEF90, &stru_10028A690);
      }
      id v22 = (os_log_s *)qword_1002EEF98;
      if (os_log_type_enabled((os_log_t)qword_1002EEF98, OS_LOG_TYPE_ERROR))
      {
        double v23 = *(void **)(a1 + 48);
        *(_DWORD *)__int128 buf = 138543618;
        id v32 = v23;
        __int16 v33 = 2112;
        id v34 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "Failed deleting download record for downloadId %{public}@: %@",  buf,  0x16u);
      }
    }
  }

  else
  {
    id v12 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) contextStore]);
    uint64_t v13 = *(void *)(a1 + 48);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v3 application]);
    uint64_t v15 = *(void *)(a1 + 32);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) logClient]);
    [v12 failHeadDownload:v13 application:v14 failure:v15 retry:1 logClient:v16];
  }

  double v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) dataStore]);
  id v29 = 0LL;
  unsigned __int8 v25 = [v24 persistWithError:&v29];
  id v26 = v29;

  if ((v25 & 1) == 0)
  {
    id v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) dataStore]);
    [v27 reportCoreDataPersistEventForLocation:@"handleDownloadRecordFailure" underlyingError:v26];

    if (qword_1002EEF90 != -1) {
      dispatch_once(&qword_1002EEF90, &stru_10028A6B0);
    }
    uint64_t v28 = (os_log_s *)qword_1002EEF98;
    if (os_log_type_enabled((os_log_t)qword_1002EEF98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v32 = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "failed to store results after failed download: %@",  buf,  0xCu);
    }
  }
}

void sub_1001D2AEC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEF98;
  qword_1002EEF98 = (uint64_t)v1;
}

void sub_1001D2B1C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEF98;
  qword_1002EEF98 = (uint64_t)v1;
}

void sub_1001D2B4C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEF98;
  qword_1002EEF98 = (uint64_t)v1;
}

void sub_1001D2B7C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEF98;
  qword_1002EEF98 = (uint64_t)v1;
}

void sub_1001D2BAC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEF98;
  qword_1002EEF98 = (uint64_t)v1;
}

void sub_1001D2BDC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEF98;
  qword_1002EEF98 = (uint64_t)v1;
}

void sub_1001D2D80(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) metadata]);
  [v2 handleDownloadRecordFailure:v3 task:v4 downloadMetadata:v5 error:*(void *)(a1 + 64)];
}

void sub_1001D3404(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEFA8;
  qword_1002EEFA8 = (uint64_t)v1;
}

void sub_1001D3748( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1001D3770(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001D3780(uint64_t a1)
{
}

void sub_1001D3788(uint64_t a1)
{
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v24 objects:v30 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v25;
    *(void *)&__int128 v4 = 138412290LL;
    __int128 v21 = v4;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v25 != v6) {
          objc_enumerationMutation(v2);
        }
        id v8 = *(void **)(*((void *)&v24 + 1) + 8LL * (void)v7);
        id v9 = *(void **)(a1 + 40);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "name", v21));
        LOBYTE(v9) = [v9 containsObject:v10];

        if ((v9 & 1) == 0)
        {
          uint64_t v11 = objc_alloc_init(&OBJC_CLASS___NSFetchRequest);
          -[NSFetchRequest setEntity:](v11, "setEntity:", v8);
          id v12 = -[NSBatchDeleteRequest initWithFetchRequest:]( objc_alloc(&OBJC_CLASS___NSBatchDeleteRequest),  "initWithFetchRequest:",  v11);
          -[NSBatchDeleteRequest setResultType:](v12, "setResultType:", 1LL);
          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) context]);
          uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8LL);
          obuint64_t j = *(id *)(v14 + 40);
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v13 executeRequest:v12 error:&obj]);
          objc_storeStrong((id *)(v14 + 40), obj);

          if (!v15)
          {
            if (qword_1002EEFA0 != -1) {
              dispatch_once(&qword_1002EEFA0, &stru_10028A758);
            }
            id v16 = (os_log_s *)qword_1002EEFA8;
            if (os_log_type_enabled((os_log_t)qword_1002EEFA8, OS_LOG_TYPE_ERROR))
            {
              uint64_t v17 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
              *(_DWORD *)__int128 buf = v21;
              uint64_t v29 = v17;
              _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "clearState deleted nothing: %@",  buf,  0xCu);
            }
          }
        }

        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v2 countByEnumeratingWithState:&v24 objects:v30 count:16];
    }

    while (v5);
  }

  id v18 = *(void **)(a1 + 48);
  uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v22 = *(id *)(v19 + 40);
  unsigned int v20 = [v18 persistWithError:&v22];
  objc_storeStrong((id *)(v19 + 40), v22);
  if (v20) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  }
}

void sub_1001D3A00(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEFA8;
  qword_1002EEFA8 = (uint64_t)v1;
}

void sub_1001D3C24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1001D3C44(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  *(void *)(a1 + 32)));
  [v2 setPredicate:*(void *)(a1 + 40)];
  id v3 = -[NSBatchDeleteRequest initWithFetchRequest:]( objc_alloc(&OBJC_CLASS___NSBatchDeleteRequest),  "initWithFetchRequest:",  v2);
  -[NSBatchDeleteRequest setResultType:](v3, "setResultType:", 1LL);
  __int128 v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) context]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8LL);
  obuint64_t j = *(id *)(v5 + 40);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 executeRequest:v3 error:&obj]);
  objc_storeStrong((id *)(v5 + 40), obj);

  if (!v6)
  {
    if (qword_1002EEFA0 != -1) {
      dispatch_once(&qword_1002EEFA0, &stru_10028A778);
    }
    uint64_t v7 = (os_log_s *)qword_1002EEFA8;
    if (os_log_type_enabled((os_log_t)qword_1002EEFA8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v20 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "garbageCollectEntityBatchDelete deleted nothing: %@",  buf,  0xCu);
    }
  }

  id v9 = *(void **)(a1 + 48);
  uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v17 = *(id *)(v10 + 40);
  unsigned int v11 = [v9 persistWithError:&v17];
  objc_storeStrong((id *)(v10 + 40), v17);
  if (v11)
  {
    if (qword_1002EEFA0 != -1) {
      dispatch_once(&qword_1002EEFA0, &stru_10028A798);
    }
    id v12 = (os_log_s *)qword_1002EEFA8;
    if (os_log_type_enabled((os_log_t)qword_1002EEFA8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v20 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "garbageCollectEntityBatchDelete failed to save: %@",  buf,  0xCu);
    }
  }

  uint64_t v14 = objc_claimAutoreleasedReturnValue( +[SecXPCHelper cleanseErrorForXPC:]( &OBJC_CLASS___SecXPCHelper,  "cleanseErrorForXPC:",  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL)));
  uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v14;
}

void sub_1001D3E94(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEFA8;
  qword_1002EEFA8 = (uint64_t)v1;
}

void sub_1001D3EC4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEFA8;
  qword_1002EEFA8 = (uint64_t)v1;
}

void sub_1001D3EF4(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEFA8;
  qword_1002EEFA8 = (uint64_t)v1;
}

void sub_1001D4148( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1001D4168(uint64_t a1, void *a2)
{
  id v3 = a2;
  while (1)
  {
    __int128 v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  *(void *)(a1 + 32)));
    [v4 setPredicate:*(void *)(a1 + 40)];
    [v4 setPropertiesToFetch:&__NSArray0__struct];
    [v4 setFetchLimit:20];
    uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8LL);
    obuint64_t j = *(id *)(v5 + 40);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 executeFetchRequest:v4 error:&obj]);
    objc_storeStrong((id *)(v5 + 40), obj);
    if (!v6) {
      break;
    }
    id v7 = [v6 count];
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    id v8 = v6;
    id v9 = [v8 countByEnumeratingWithState:&v20 objects:v25 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v21;
      do
      {
        id v12 = 0LL;
        do
        {
          if (*(void *)v21 != v11) {
            objc_enumerationMutation(v8);
          }
          [v3 deleteObject:*(void *)(*((void *)&v20 + 1) + 8 * (void)v12)];
          id v12 = (char *)v12 + 1;
        }

        while (v10 != v12);
        id v10 = [v8 countByEnumeratingWithState:&v20 objects:v25 count:16];
      }

      while (v10);
    }

    uint64_t v13 = *(void **)(a1 + 48);
    uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v19 = *(id *)(v14 + 40);
    unsigned __int8 v15 = [v13 persistWithError:&v19];
    objc_storeStrong((id *)(v14 + 40), v19);
    if ((v15 & 1) == 0) {
      break;
    }
    id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) logger]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v8 count]));
    id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"kt%@GCCount",  *(void *)(a1 + 32)));
    [v16 logMetric:v17 withName:v18];

    if (v7 != (id)20) {
      goto LABEL_14;
    }
  }

LABEL_14:
}

void sub_1001D43B0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEFA8;
  qword_1002EEFA8 = (uint64_t)v1;
}

void sub_1001D4578(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEFA8;
  qword_1002EEFA8 = (uint64_t)v1;
}

void sub_1001D45A8(void *a1, void *a2)
{
  id v3 = a2;
  __int128 v4 = (void *)objc_claimAutoreleasedReturnValue(+[CachedData fetchRequest](&OBJC_CLASS___CachedData, "fetchRequest"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"key = %@ AND application = %@",  @"TapToRadarDate",  a1[4]));
  [v4 setPredicate:v5];

  if (a1[5])
  {
    id v17 = 0LL;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 executeFetchRequest:v4 error:&v17]);
    id v7 = v17;
    if ([v6 count])
    {
      id v8 = (id)objc_claimAutoreleasedReturnValue([v6 firstObject]);
      if (!v8)
      {

        goto LABEL_20;
      }
    }

    else
    {
      id v8 = (id)objc_claimAutoreleasedReturnValue( +[NSEntityDescription insertNewObjectForEntityForName:inManagedObjectContext:]( &OBJC_CLASS___NSEntityDescription,  "insertNewObjectForEntityForName:inManagedObjectContext:",  @"CachedData",  v3));
      [v8 setKey:@"TapToRadarDate"];
      [v8 setApplication:a1[4]];
    }

    [v8 setData:a1[6]];
    id v10 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v8 setUpdated:v10];
  }

  else
  {
    id v22 = 0LL;
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 executeFetchRequest:v4 error:&v22]);
    id v7 = v22;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    id v10 = v9;
    id v8 = [v10 countByEnumeratingWithState:&v18 objects:v25 count:16];
    if (v8)
    {
      uint64_t v11 = *(void *)v19;
      do
      {
        for (unint64_t i = 0LL; i != v8; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v11) {
            objc_enumerationMutation(v10);
          }
          [v3 deleteObject:*(void *)(*((void *)&v18 + 1) + 8 * (void)i)];
        }

        id v8 = [v10 countByEnumeratingWithState:&v18 objects:v25 count:16];
      }

      while (v8);
    }

    uint64_t v6 = v10;
  }

  uint64_t v13 = v7;

  id v16 = v7;
  unsigned __int8 v14 = [v3 save:&v16];
  id v7 = v16;

  if ((v14 & 1) == 0)
  {
    if (qword_1002EEFA0 != -1) {
      dispatch_once(&qword_1002EEFA0, &stru_10028A868);
    }
    unsigned __int8 v15 = (os_log_s *)qword_1002EEFA8;
    if (os_log_type_enabled((os_log_t)qword_1002EEFA8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v24 = v7;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "storeTTR: save %@", buf, 0xCu);
    }
  }

void sub_1001D4894(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEFA8;
  qword_1002EEFA8 = (uint64_t)v1;
}

void sub_1001D49F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1001D4A08(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v17 = 0LL;
  __int128 v4 = (void *)objc_claimAutoreleasedReturnValue([a2 executeFetchRequest:v3 error:&v17]);
  id v5 = v17;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 firstObject]);
  id v7 = v6;
  if (v6 && (id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 data]), v8, v8))
  {
    uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSDate, v9);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v7 data]);
    uint64_t v12 = objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  v10,  v11,  0LL));
    uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8LL);
    unsigned __int8 v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;
  }

  else
  {
    if (qword_1002EEFA0 != -1) {
      dispatch_once(&qword_1002EEFA0, &stru_10028A8B0);
    }
    unsigned __int8 v15 = (os_log_s *)qword_1002EEFA8;
    if (os_log_type_enabled((os_log_t)qword_1002EEFA8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "getTapToRadarDate: no cached data", v16, 2u);
    }
  }
}

void sub_1001D4B68(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEFA8;
  qword_1002EEFA8 = (uint64_t)v1;
}

void sub_1001D4D58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1001D4D7C(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[6] + 8LL);
  obuint64_t j = *(id *)(v4 + 40);
  unsigned int v5 = [v2 logRequestMetricsForApplication:v3 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  if (!v5) {
    goto LABEL_5;
  }
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = *(void *)(a1[6] + 8LL);
  id v23 = *(id *)(v8 + 40);
  unsigned int v9 = [v6 logSMTMetricsForApplication:v7 error:&v23];
  objc_storeStrong((id *)(v8 + 40), v23);
  if (!v9) {
    goto LABEL_5;
  }
  uint64_t v10 = (void *)a1[4];
  uint64_t v11 = a1[5];
  uint64_t v12 = *(void *)(a1[6] + 8LL);
  id v22 = *(id *)(v12 + 40);
  unsigned int v13 = [v10 logSTHMetricsForApplication:v11 error:&v22];
  objc_storeStrong((id *)(v12 + 40), v22);
  if (!v13
    || (unsigned __int8 v14 = (void *)a1[4],
        uint64_t v15 = a1[5],
        uint64_t v16 = *(void *)(a1[6] + 8LL),
        id v21 = *(id *)(v16 + 40),
        unsigned __int8 v17 = [v14 onMocLogVerificationMetricsForApplication:v15 error:&v21],
        objc_storeStrong((id *)(v16 + 40), v21),
        (v17 & 1) == 0))
  {
LABEL_5:
    *(_BYTE *)(*(void *)(a1[7] + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 0;
  }

  uint64_t v18 = objc_claimAutoreleasedReturnValue( +[SecXPCHelper cleanseErrorForXPC:]( &OBJC_CLASS___SecXPCHelper,  "cleanseErrorForXPC:",  *(void *)(*(void *)(a1[6] + 8LL) + 40LL)));
  uint64_t v19 = *(void *)(a1[6] + 8LL);
  __int128 v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = v18;
}

void sub_1001D5320( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1001D5344(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = *(void *)(a1[6] + 8LL);
  obuint64_t j = *(id *)(v3 + 40);
  id v4 = [v2 requestCount:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v4));
  [*(id *)(*(void *)(a1[5] + 8) + 40) setObject:v5 forKeyedSubscript:@"KTRequest"];

  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = *(void *)(a1[6] + 8LL);
  id v33 = *(id *)(v7 + 40);
  id v8 = [v6 requestFailureCount:&v33];
  objc_storeStrong((id *)(v7 + 40), v33);
  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v8));
  [*(id *)(*(void *)(a1[5] + 8) + 40) setObject:v9 forKeyedSubscript:@"KTRequestFailure"];

  uint64_t v10 = (void *)a1[4];
  uint64_t v11 = *(void *)(a1[6] + 8LL);
  id v32 = *(id *)(v11 + 40);
  id v12 = [v10 signedMutationTimestampCount:&v32];
  objc_storeStrong((id *)(v11 + 40), v32);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v12));
  [*(id *)(*(void *)(a1[5] + 8) + 40) setObject:v13 forKeyedSubscript:@"KTMutation"];

  uint64_t v14 = (void *)a1[4];
  uint64_t v15 = *(void *)(a1[6] + 8LL);
  id v31 = *(id *)(v15 + 40);
  id v16 = [v14 signedMutationTimestampsFailureCount:&v31];
  objc_storeStrong((id *)(v15 + 40), v31);
  unsigned __int8 v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v16));
  [*(id *)(*(void *)(a1[5] + 8) + 40) setObject:v17 forKeyedSubscript:@"KTSMTFailure"];

  uint64_t v18 = (void *)a1[4];
  uint64_t v19 = *(void *)(a1[6] + 8LL);
  id v30 = *(id *)(v19 + 40);
  id v20 = [v18 treeHeadCount:&v30];
  objc_storeStrong((id *)(v19 + 40), v30);
  id v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v20));
  [*(id *)(*(void *)(a1[5] + 8) + 40) setObject:v21 forKeyedSubscript:@"KTTreeHead"];

  id v22 = (void *)a1[4];
  uint64_t v23 = *(void *)(a1[6] + 8LL);
  id v29 = *(id *)(v23 + 40);
  id v24 = [v22 signedTreeHeadFailureCount:&v29];
  objc_storeStrong((id *)(v23 + 40), v29);
  __int128 v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v24));
  [*(id *)(*(void *)(a1[5] + 8) + 40) setObject:v25 forKeyedSubscript:@"KTSTHFailure"];

  uint64_t v26 = objc_claimAutoreleasedReturnValue( +[SecXPCHelper cleanseErrorForXPC:]( &OBJC_CLASS___SecXPCHelper,  "cleanseErrorForXPC:",  *(void *)(*(void *)(a1[6] + 8LL) + 40LL)));
  uint64_t v27 = *(void *)(a1[6] + 8LL);
  uint64_t v28 = *(void **)(v27 + 40);
  *(void *)(v27 + 40) = v26;
}

void sub_1001D5810( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_1001D5834(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 8LL);
  obuint64_t j = *(id *)(v3 + 40);
  unsigned int v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSFetchRequest fetchRequestWithEntityName:]( &OBJC_CLASS___NSFetchRequest,  "fetchRequestWithEntityName:",  *(void *)(a1 + 40)));
    [v5 setReturnsDistinctResults:1];
    [v5 setPredicate:*(void *)(a1 + 48)];
    [v5 setFetchBatchSize:20];
    if (*(_BYTE *)(a1 + 80)) {
      [v5 setFetchLimit:100];
    }
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
    uint64_t v7 = *(void *)(*(void *)(a1 + 64) + 8LL);
    id v27 = *(id *)(v7 + 40);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 executeFetchRequest:v5 error:&v27]);
    objc_storeStrong((id *)(v7 + 40), v27);

    char v26 = 0;
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = *(void *)(*(void *)(a1 + 72) + 8LL);
    id v25 = *(id *)(v10 + 40);
    (*(void (**)(void))(v9 + 16))();
    objc_storeStrong((id *)(v10 + 40), v25);
    if (*(_BYTE *)(a1 + 80))
    {
      if ([v8 count] == (id)100)
      {
        [v5 setFetchLimit:0];
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
        uint64_t v12 = *(void *)(*(void *)(a1 + 64) + 8LL);
        id v24 = *(id *)(v12 + 40);
        id v13 = [v11 countForFetchRequest:v5 error:&v24];
        objc_storeStrong((id *)(v12 + 40), v24);

        if ((unint64_t)v13 >= 0x65)
        {
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logger]);
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v13));
          id v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"kt%@MaxBatchesExceeded",  *(void *)(a1 + 40)));
          [v14 logMetric:v15 withName:v16];

          if (qword_1002EEFA0 != -1) {
            dispatch_once(&qword_1002EEFA0, &stru_10028A950);
          }
          unsigned __int8 v17 = (os_log_s *)qword_1002EEFA8;
          if (os_log_type_enabled((os_log_t)qword_1002EEFA8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 134217984;
            id v30 = v13;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "performOnBatchesOfEntity hit max number of batches: %llu total entries",  buf,  0xCu);
          }
        }
      }
    }
  }

  uint64_t v18 = objc_claimAutoreleasedReturnValue( +[SecXPCHelper cleanseErrorForXPC:]( &OBJC_CLASS___SecXPCHelper,  "cleanseErrorForXPC:",  *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL)));
  uint64_t v19 = *(void *)(*(void *)(a1 + 72) + 8LL);
  id v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = v18;

  uint64_t v21 = objc_claimAutoreleasedReturnValue( +[SecXPCHelper cleanseErrorForXPC:]( &OBJC_CLASS___SecXPCHelper,  "cleanseErrorForXPC:",  *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL)));
  uint64_t v22 = *(void *)(*(void *)(a1 + 64) + 8LL);
  uint64_t v23 = *(void **)(v22 + 40);
  *(void *)(v22 + 40) = v21;
}

void sub_1001D5B40(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEFA8;
  qword_1002EEFA8 = (uint64_t)v1;
}

void sub_1001D5B70(void *a1)
{
  if (qword_1002EEFA0 != -1) {
    dispatch_once(&qword_1002EEFA0, &stru_10028A998);
  }
  id v2 = (os_log_s *)qword_1002EEFA8;
  if (os_log_type_enabled((os_log_t)qword_1002EEFA8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = a1[5];
    uint64_t v5 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL);
    int v6 = 138412802;
    uint64_t v7 = v3;
    __int16 v8 = 2112;
    uint64_t v9 = v4;
    __int16 v10 = 2112;
    uint64_t v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_ERROR,  "performOnBatchesOfEntity unable to read entity %@ for predicate %@: %@",  (uint8_t *)&v6,  0x20u);
  }

void sub_1001D5C58(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  id v2 = (void *)qword_1002EEFA8;
  qword_1002EEFA8 = (uint64_t)v1;
}

void sub_1001D5D30(_Unwind_Exception *a1)
{
}

void sub_1001D5DB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1001D5E3C(_Unwind_Exception *a1)
{
}

uint64_t sub_1001D5EFC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

uint64_t sub_1001D5F84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001D607C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1001D6094(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0LL;
}

void sub_1001D623C(void *a1, const char *a2)
{
  id v9 = a1;
  if ((objc_opt_respondsToSelector(v9, a2) & 1) == 0)
  {
    uint64_t v3 = NSStringFromSelector(a2);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInternalInconsistencyException,  @"Selector is not available: %@",  v4);
  }

  id v5 = objc_claimAutoreleasedReturnValue([v9 methodSignatureForSelector:a2]);
  int v6 = strcmp((const char *)[v5 methodReturnType], "q");

  if (v6)
  {
    uint64_t v7 = NSStringFromSelector(a2);
    __int16 v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInternalInconsistencyException,  @"Selector doesn't return an int64_t: %@",  v8);
  }
}

uint64_t sub_1001D6330(void *a1, const char *a2)
{
  id v3 = a1;
  sub_1001D623C(v3, a2);
  uint64_t v10 = 0LL;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 methodSignatureForSelector:a2]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSInvocation invocationWithMethodSignature:]( &OBJC_CLASS___NSInvocation,  "invocationWithMethodSignature:",  v4));

  [v5 setSelector:a2];
  [v5 setTarget:v3];

  [v5 invoke];
  [v5 getReturnValue:&v10];
  uint64_t v6 = v10;
  if (v10 < 0)
  {
    uint64_t v7 = NSStringFromSelector(a2);
    __int16 v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInternalInconsistencyException,  @"Negative value from selector: %@",  v8);

    uint64_t v6 = v10;
  }

  return v6;
}

uint64_t sub_1001D6428(void *a1, const char *a2, unint64_t a3)
{
  id v5 = a1;
  sub_1001D623C(v5, a2);
  if (a3 >= 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v6 = NSStringFromSelector(a2);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInternalInconsistencyException,  @"Value too large from selector: %@",  v7);
  }

  __int16 v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a3));
  id v9 = NSStringFromSelector(a2);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  [v5 setValue:v8 forKey:v10];

  return 1LL;
}

id sub_1001D7750(TransparencyNetworkRequest *self, SEL a2, id a3, double a4, id a5, id *a6)
{
  id v8 = a5;
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableURLRequest requestWithURL:](&OBJC_CLASS___NSMutableURLRequest, "requestWithURL:", a3));
  [v9 setHTTPMethod:@"GET"];
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id v10 = v8;
  id v11 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v20;
    do
    {
      for (unint64_t i = 0LL; i != v12; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v20 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = *(void *)(*((void *)&v19 + 1) + 8LL * (void)i);
        id v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v15, (void)v19));
        [v9 setValue:v16 forHTTPHeaderField:v15];
      }

      id v12 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }

    while (v12);
  }

  unsigned __int8 v17 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencySettings automatedDeviceGroup]( &OBJC_CLASS___TransparencySettings,  "automatedDeviceGroup"));
  if (v17) {
    [v9 setValue:v17 forHTTPHeaderField:off_1002E6258];
  }
  if (a4 != 0.0) {
    [v9 setTimeoutInterval:a4];
  }

  return v9;
}

void sub_1001D7D38( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1001D7D60(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained triggerRemoteBAACertFetch];
}

void sub_1001D7E88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1001D7EA0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001D7EB0(uint64_t a1)
{
}

void sub_1001D7EB8(uint64_t a1, const void *a2, void *a3, void *a4)
{
  id v13 = a3;
  id v7 = a4;
  if (v7)
  {
    id v8 = v7;
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[TransparencyError errorWithDomain:code:underlyingError:description:]( &OBJC_CLASS___TransparencyError,  "errorWithDomain:code:underlyingError:description:",  kTransparencyErrorBAACertFetch,  -393LL,  v7,  @"Error fetching BAA cert"));
  }

  else
  {
    id v9 = 0LL;
  }

  id v10 = -[KTBAAKey initWithKey:certificates:failure:]( objc_alloc(&OBJC_CLASS___KTBAAKey),  "initWithKey:certificates:failure:",  a2,  v13,  v9);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = 0LL;

  if (a2) {
    CFRelease(a2);
  }
}

void sub_1001D835C(_Unwind_Exception *a1)
{
}

void sub_1001D837C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEFB8;
  qword_1002EEFB8 = (uint64_t)v1;
}

id sub_1001D83AC(uint64_t a1)
{
  return [*(id *)(a1 + 32) fetchCacheOnly:1 completion:*(void *)(a1 + 40)];
}

void sub_1001D83BC(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (!*(_BYTE *)(a1 + 48))
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) issuanceGroup]);
    objc_sync_enter(v3);
    uint64_t v4 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) issuanceGroup]);
    dispatch_group_leave(v4);

    [*(id *)(a1 + 32) setOutstandingRemoteFetchSignal:0];
    objc_sync_exit(v3);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1001D8454(_Unwind_Exception *a1)
{
}

void sub_1001D84BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (v4)
  {
    if (qword_1002EEFB0 != -1) {
      dispatch_once(&qword_1002EEFB0, &stru_10028AA78);
    }
    id v5 = (void *)qword_1002EEFB8;
    if (os_log_type_enabled((os_log_t)qword_1002EEFB8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = v5;
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
      int v9 = 138543362;
      id v10 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Error fetching BAA cert, starting exponential backoff to request a new cert. %{public}@",  (uint8_t *)&v9,  0xCu);
    }

    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) BAACertFetcher]);
    [v8 trigger];
  }
}

void sub_1001D85E0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEFB8;
  qword_1002EEFB8 = (uint64_t)v1;
}

void sub_1001D869C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

  if (v4)
  {
    if (qword_1002EEFB0 != -1) {
      dispatch_once(&qword_1002EEFB0, &stru_10028AAC0);
    }
    id v5 = (void *)qword_1002EEFB8;
    if (os_log_type_enabled((os_log_t)qword_1002EEFB8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = v5;
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
      int v9 = 138412290;
      id v10 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Error fetching BAA cert, starting exponential backoff to request a new cert. %@",  (uint8_t *)&v9,  0xCu);
    }

    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) BAACertFetcher]);
    [v8 trigger];
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1001D87D0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEFB8;
  qword_1002EEFB8 = (uint64_t)v1;
}

void sub_1001D8C14(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEFC8;
  qword_1002EEFC8 = (uint64_t)v1;
}

void sub_1001D9764(_Unwind_Exception *a1)
{
}

void sub_1001D9880(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEFD8;
  qword_1002EEFD8 = (uint64_t)v1;
}

void sub_1001D99B8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEFD8;
  qword_1002EEFD8 = (uint64_t)v1;
}

void sub_1001D9B1C(id a1)
{
  os_log_t v1 = os_log_create("com.apple.Transparency", "default");
  uint64_t v2 = (void *)qword_1002EEFD8;
  qword_1002EEFD8 = (uint64_t)v1;
}

void sub_1001D9C9C(_Unwind_Exception *a1)
{
}

void sub_1001D9CB8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 serialize]);
  [v2 addObject:v3];
}

void sub_1001DA868(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v18 = a1;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateInit]);
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v20;
    do
    {
      for (unint64_t i = 0LL; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v20 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)i);
        int v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectAtIndexedSubscript:0]);
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 objectAtIndexedSubscript:1]);
        uint64_t v12 = objc_opt_class(&OBJC_CLASS___NSString, v11);
        if ((objc_opt_isKindOfClass(v9, v12) & 1) == 0)
        {
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
          [v15 handleFailureInMethod:*(void *)(v18 + 40) object:*(void *)(v18 + 32) file:@"KTStates.m" lineNumber:178 description:@"stateName should be string"];
        }

        uint64_t v14 = objc_opt_class(&OBJC_CLASS___NSNumber, v13);
        if ((objc_opt_isKindOfClass(v10, v14) & 1) == 0)
        {
          id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
          [v16 handleFailureInMethod:*(void *)(v18 + 40) object:*(void *)(v18 + 32) file:@"KTStates.m" lineNumber:179 description:@"stateNum should be number"];
        }

        -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v10, v9);
      }

      id v5 = [v3 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }

    while (v5);
  }

  unsigned __int8 v17 = (void *)qword_1002EEFE0;
  qword_1002EEFE0 = (uint64_t)v2;
}

void sub_1001DAAF0(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v18 = a1;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateInit]);
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v20;
    do
    {
      for (unint64_t i = 0LL; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v20 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)i);
        int v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectAtIndexedSubscript:0]);
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 objectAtIndexedSubscript:1]);
        uint64_t v12 = objc_opt_class(&OBJC_CLASS___NSString, v11);
        if ((objc_opt_isKindOfClass(v9, v12) & 1) == 0)
        {
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
          [v15 handleFailureInMethod:*(void *)(v18 + 40) object:*(void *)(v18 + 32) file:@"KTStates.m" lineNumber:197 description:@"stateName should be string"];
        }

        uint64_t v14 = objc_opt_class(&OBJC_CLASS___NSNumber, v13);
        if ((objc_opt_isKindOfClass(v10, v14) & 1) == 0)
        {
          id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
          [v16 handleFailureInMethod:*(void *)(v18 + 40) object:*(void *)(v18 + 32) file:@"KTStates.m" lineNumber:198 description:@"stateNum should be number"];
        }

        -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v9, v10);
      }

      id v5 = [v3 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }

    while (v5);
  }

  unsigned __int8 v17 = (void *)qword_1002EEFF0;
  qword_1002EEFF0 = (uint64_t)v2;
}

void sub_1001DAD44(id a1)
{
  os_log_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  [v1 addObject:@"Unlocked"];
  [v1 addObject:@"AccountChanged"];
  [v1 addObject:@"CKAccountChanged"];
  [v1 addObject:@"RepairIDSFlag"];
  [v1 addObject:@"ConfigBagFetch"];
  [v1 addObject:@"ManateeViewChanged"];
  [v1 addObject:@"FetchIDMS"];
  [v1 addObject:@"ValidateSelf"];
  [v1 addObject:@"CheckAccountSignatures"];
  [v1 addObject:@"FetchSelf"];
  [v1 addObject:@"FetchPublicKeys"];
  [v1 addObject:@"CheckIDSRegistration"];
  [v1 addObject:@"ValidateSelfOptIn"];
  [v1 addObject:@"ChangeOptInState"];
  [v1 addObject:@"EnsureIdentity"];
  [v1 addObject:@"CloudKitOutgoing"];
  [v1 addObject:@"CloudKitIncoming"];
  [v1 addObject:@"CloudKitZoneRecreate"];
  [v1 addObject:@"OctagonTrustChanged"];
  [v1 addObject:@"CheckKTAccountKey"];
  [v1 addObject:@"StatusUpdate"];
  [v1 addObject:@"CheckKTAccountKeyChanged"];
  [v1 addObject:@"IDSStatusChanged"];
  [v1 addObject:@"CheckServerOptIn"];
  [v1 addObject:@"PokeIDS"];
  uint64_t v2 = (void *)qword_1002EF000;
  qword_1002EF000 = (uint64_t)v1;
}

void sub_1001DB4DC()
{
}

void sub_1001DB53C()
{
}

void sub_1001DB59C()
{
}

void sub_1001DB5C8()
{
}

void sub_1001DB628()
{
}

void sub_1001DB688()
{
}

void sub_1001DB6B4()
{
}

void sub_1001DB714()
{
}

void sub_1001DB774()
{
}

void sub_1001DB7D4()
{
}

void sub_1001DB834()
{
}

id objc_msgSend_AllKTFlags(void *a1, const char *a2, ...)
{
  return _[a1 AllKTFlags];
}

id objc_msgSend_BAACertFetcher(void *a1, const char *a2, ...)
{
  return _[a1 BAACertFetcher];
}

id objc_msgSend_HTTPBody(void *a1, const char *a2, ...)
{
  return _[a1 HTTPBody];
}

id objc_msgSend_HTTPMethod(void *a1, const char *a2, ...)
{
  return _[a1 HTTPMethod];
}

id objc_msgSend_ISOCountryCodes(void *a1, const char *a2, ...)
{
  return _[a1 ISOCountryCodes];
}

id objc_msgSend_ITUCountryCodeForISOCountryCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ITUCountryCodeForISOCountryCode:");
}

id objc_msgSend_JSONObjectWithData_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "JSONObjectWithData:options:error:");
}

id objc_msgSend_KTStateMap(void *a1, const char *a2, ...)
{
  return _[a1 KTStateMap];
}

id objc_msgSend_URIWithUnprefixedURI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URIWithUnprefixedURI:");
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _[a1 URL];
}

id objc_msgSend_URLByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:");
}

id objc_msgSend_URLByAppendingPathComponent_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:isDirectory:");
}

id objc_msgSend_URLForResource_withExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForResource:withExtension:");
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_URLsForDirectory_inDomains_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLsForDirectory:inDomains:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend___verifiedLogHeads(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__verifiedLogHeads");
}

id objc_msgSend__applicationKeyStores(void *a1, const char *a2, ...)
{
  return _[a1 _applicationKeyStores];
}

id objc_msgSend__contexts(void *a1, const char *a2, ...)
{
  return _[a1 _contexts];
}

id objc_msgSend__enableStrictSecureDecodingMode(void *a1, const char *a2, ...)
{
  return _[a1 _enableStrictSecureDecodingMode];
}

id objc_msgSend__events(void *a1, const char *a2, ...)
{
  return _[a1 _events];
}

id objc_msgSend__onQueueClearDeviceSignatureSignatures(void *a1, const char *a2, ...)
{
  return _[a1 _onQueueClearDeviceSignatureSignatures];
}

id objc_msgSend__onQueueRunReachabilityDependency(void *a1, const char *a2, ...)
{
  return _[a1 _onQueueRunReachabilityDependency];
}

id objc_msgSend__onqueueCancelPendingFlag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onqueueCancelPendingFlag:");
}

id objc_msgSend__onqueueContains_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onqueueContains:");
}

id objc_msgSend__onqueueCreateNewCKFetch(void *a1, const char *a2, ...)
{
  return _[a1 _onqueueCreateNewCKFetch];
}

id objc_msgSend__onqueueCreateNewServerOptInFetch(void *a1, const char *a2, ...)
{
  return _[a1 _onqueueCreateNewServerOptInFetch];
}

id objc_msgSend__onqueueDeliverCloudKitStateChanges_dispatchGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onqueueDeliverCloudKitStateChanges:dispatchGroup:");
}

id objc_msgSend__onqueueDeliverCurrentCloudKitState_listenerQueue_oldStatus_group_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onqueueDeliverCurrentCloudKitState:listenerQueue:oldStatus:group:");
}

id objc_msgSend__onqueueHandleFlag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onqueueHandleFlag:");
}

id objc_msgSend__onqueueHandlePendingFlagLater_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onqueueHandlePendingFlagLater:");
}

id objc_msgSend__onqueueNextStateMachineTransition(void *a1, const char *a2, ...)
{
  return _[a1 _onqueueNextStateMachineTransition];
}

id objc_msgSend__onqueueNextStateMachineTransition_flags_pendingFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onqueueNextStateMachineTransition:flags:pendingFlags:");
}

id objc_msgSend__onqueuePerformTimeoutWithUnderlyingError(void *a1, const char *a2, ...)
{
  return _[a1 _onqueuePerformTimeoutWithUnderlyingError];
}

id objc_msgSend__onqueuePerformTimeoutWithUnderlyingError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onqueuePerformTimeoutWithUnderlyingError:");
}

id objc_msgSend__onqueuePokeStateMachine(void *a1, const char *a2, ...)
{
  return _[a1 _onqueuePokeStateMachine];
}

id objc_msgSend__onqueueRecheck(void *a1, const char *a2, ...)
{
  return _[a1 _onqueueRecheck];
}

id objc_msgSend__onqueueRecheckConditions(void *a1, const char *a2, ...)
{
  return _[a1 _onqueueRecheckConditions];
}

id objc_msgSend__onqueueRemoveFlag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onqueueRemoveFlag:");
}

id objc_msgSend__onqueueSendAnyPendingFlags(void *a1, const char *a2, ...)
{
  return _[a1 _onqueueSendAnyPendingFlags];
}

id objc_msgSend__onqueueSetFlag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onqueueSetFlag:");
}

id objc_msgSend__onqueueSetNetworkReachability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onqueueSetNetworkReachability:");
}

id objc_msgSend__onqueueStart(void *a1, const char *a2, ...)
{
  return _[a1 _onqueueStart];
}

id objc_msgSend__onqueueStartNextStateMachineOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onqueueStartNextStateMachineOperation:");
}

id objc_msgSend__onqueueTimeoutError(void *a1, const char *a2, ...)
{
  return _[a1 _onqueueTimeoutError];
}

id objc_msgSend__onqueueTimerTick(void *a1, const char *a2, ...)
{
  return _[a1 _onqueueTimerTick];
}

id objc_msgSend__onqueueTrigger_maximumDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onqueueTrigger:maximumDelay:");
}

id objc_msgSend__onqueueUpdateAccountState_deliveredSemaphore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onqueueUpdateAccountState:deliveredSemaphore:");
}

id objc_msgSend__onqueueUpdateAccountState_dispatchGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onqueueUpdateAccountState:dispatchGroup:");
}

id objc_msgSend__pcsIdentity(void *a1, const char *a2, ...)
{
  return _[a1 _pcsIdentity];
}

id objc_msgSend__pcsIdentityCachedTime(void *a1, const char *a2, ...)
{
  return _[a1 _pcsIdentityCachedTime];
}

id objc_msgSend__serviceTypeForName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_serviceTypeForName:");
}

id objc_msgSend__setEnabledTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setEnabledTopics:");
}

id objc_msgSend__setFileNameLocalizationEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setFileNameLocalizationEnabled:");
}

id objc_msgSend__setPrivacyProxyFailClosed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPrivacyProxyFailClosed:");
}

id objc_msgSend__setQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setQueue:");
}

id objc_msgSend__waitForIDSRegistration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_waitForIDSRegistration:");
}

id objc_msgSend_aa_altDSID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_altDSID");
}

id objc_msgSend_aa_appleAccountsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_appleAccountsWithError:");
}

id objc_msgSend_aa_errorWithCode_underlyingError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_errorWithCode:underlyingError:");
}

id objc_msgSend_aa_isAccountClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_isAccountClass:");
}

id objc_msgSend_aa_personID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_personID");
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _[a1 absoluteString];
}

id objc_msgSend_absoluteURL(void *a1, const char *a2, ...)
{
  return _[a1 absoluteURL];
}

id objc_msgSend_accountChanged_to_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountChanged:to:");
}

id objc_msgSend_accountController(void *a1, const char *a2, ...)
{
  return _[a1 accountController];
}

id objc_msgSend_accountEverOptedIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountEverOptedIn:");
}

id objc_msgSend_accountFirstSeenDate(void *a1, const char *a2, ...)
{
  return _[a1 accountFirstSeenDate];
}

id objc_msgSend_accountForAccountKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountForAccountKey:");
}

id objc_msgSend_accountForAccountKeyHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountForAccountKeyHash:");
}

id objc_msgSend_accountInfoWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountInfoWithCompletionHandler:");
}

id objc_msgSend_accountKey(void *a1, const char *a2, ...)
{
  return _[a1 accountKey];
}

id objc_msgSend_accountKeyHash(void *a1, const char *a2, ...)
{
  return _[a1 accountKeyHash];
}

id objc_msgSend_accountKeyServer(void *a1, const char *a2, ...)
{
  return _[a1 accountKeyServer];
}

id objc_msgSend_accountKeyService(void *a1, const char *a2, ...)
{
  return _[a1 accountKeyService];
}

id objc_msgSend_accountKeyService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountKeyService:");
}

id objc_msgSend_accountLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountLevel:");
}

id objc_msgSend_accountLevelErrorCodeForLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountLevelErrorCodeForLevel:");
}

id objc_msgSend_accountMetricID(void *a1, const char *a2, ...)
{
  return _[a1 accountMetricID];
}

id objc_msgSend_accountMismatch(void *a1, const char *a2, ...)
{
  return _[a1 accountMismatch];
}

id objc_msgSend_accountOperations(void *a1, const char *a2, ...)
{
  return _[a1 accountOperations];
}

id objc_msgSend_accountOptInHistory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountOptInHistory:");
}

id objc_msgSend_accountOptInRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountOptInRecord:");
}

id objc_msgSend_accountOptInState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountOptInState:");
}

id objc_msgSend_accountOverrideInfo(void *a1, const char *a2, ...)
{
  return _[a1 accountOverrideInfo];
}

id objc_msgSend_accountRecentlyOptedIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountRecentlyOptedIn:");
}

id objc_msgSend_accountStateHolder(void *a1, const char *a2, ...)
{
  return _[a1 accountStateHolder];
}

id objc_msgSend_accountStatus(void *a1, const char *a2, ...)
{
  return _[a1 accountStatus];
}

id objc_msgSend_accountType(void *a1, const char *a2, ...)
{
  return _[a1 accountType];
}

id objc_msgSend_accounts(void *a1, const char *a2, ...)
{
  return _[a1 accounts];
}

id objc_msgSend_accountsArray(void *a1, const char *a2, ...)
{
  return _[a1 accountsArray];
}

id objc_msgSend_accountsdRetryTimeout(void *a1, const char *a2, ...)
{
  return _[a1 accountsdRetryTimeout];
}

id objc_msgSend_active(void *a1, const char *a2, ...)
{
  return _[a1 active];
}

id objc_msgSend_active_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "active:");
}

id objc_msgSend_addAccountAuthentication_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAccountAuthentication:error:");
}

id objc_msgSend_addAccountHealableError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAccountHealableError:");
}

id objc_msgSend_addAccountsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAccountsObject:");
}

id objc_msgSend_addApplication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addApplication:");
}

id objc_msgSend_addApplicationPrefixForIdentifier_uri_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addApplicationPrefixForIdentifier:uri:");
}

id objc_msgSend_addClientDatasObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addClientDatasObject:");
}

id objc_msgSend_addDelegate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDelegate:queue:");
}

id objc_msgSend_addDependency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDependency:");
}

id objc_msgSend_addDevice_clientData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDevice:clientData:error:");
}

id objc_msgSend_addDevice_registationData_app_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDevice:registationData:app:");
}

id objc_msgSend_addDeviceAuthentication_signature_timestamp_certs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDeviceAuthentication:signature:timestamp:certs:");
}

id objc_msgSend_addDeviceHealableError_deviceId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDeviceHealableError:deviceId:");
}

id objc_msgSend_addDevicesObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDevicesObject:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addErrorToBackgroundOp_smDataStore_failureDataString_type_serverHint_failure_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addErrorToBackgroundOp:smDataStore:failureDataString:type:serverHint:failure:");
}

id objc_msgSend_addEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEvent:");
}

id objc_msgSend_addExecutionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addExecutionBlock:");
}

id objc_msgSend_addExtension_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addExtension:value:");
}

id objc_msgSend_addExtensions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addExtensions:");
}

id objc_msgSend_addFailures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFailures:");
}

id objc_msgSend_addField_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addField:");
}

id objc_msgSend_addFixed32_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFixed32:");
}

id objc_msgSend_addFixed64_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFixed64:");
}

id objc_msgSend_addGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addGroup:");
}

id objc_msgSend_addHealableState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addHealableState:");
}

id objc_msgSend_addLengthDelimited_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLengthDelimited:");
}

id objc_msgSend_addMultiSamplerForName_withTimeInterval_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMultiSamplerForName:withTimeInterval:block:");
}

id objc_msgSend_addNFSReporting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addNFSReporting:");
}

id objc_msgSend_addNullableDependency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addNullableDependency:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_selector_name_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperation:");
}

id objc_msgSend_addOptInStateWithURI_smtTimestamp_application_state_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOptInStateWithURI:smtTimestamp:application:state:error:");
}

id objc_msgSend_addRawEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRawEntriesFromDictionary:");
}

id objc_msgSend_addRawValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRawValue:");
}

id objc_msgSend_addRawValues_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRawValues:count:");
}

id objc_msgSend_addRawValuesFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRawValuesFromArray:");
}

id objc_msgSend_addResult_failure_toLoggableDatas_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addResult:failure:toLoggableDatas:");
}

id objc_msgSend_addSuccessDependency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSuccessDependency:");
}

id objc_msgSend_addTrustedCertificate_trustedKeys_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTrustedCertificate:trustedKeys:error:");
}

id objc_msgSend_addUnknownMapEntry_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addUnknownMapEntry:value:");
}

id objc_msgSend_addValidateRequest_dataStore_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addValidateRequest:dataStore:error:");
}

id objc_msgSend_addValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addValue:");
}

id objc_msgSend_addValues_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addValues:count:");
}

id objc_msgSend_addValuesFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addValuesFromArray:");
}

id objc_msgSend_addVarint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addVarint:");
}

id objc_msgSend_addWithNamed_watcher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addWithNamed:watcher:");
}

id objc_msgSend_addedDate(void *a1, const char *a2, ...)
{
  return _[a1 addedDate];
}

id objc_msgSend_addedMs(void *a1, const char *a2, ...)
{
  return _[a1 addedMs];
}

id objc_msgSend_additionalHeaders(void *a1, const char *a2, ...)
{
  return _[a1 additionalHeaders];
}

id objc_msgSend_afterFirstUnlock(void *a1, const char *a2, ...)
{
  return _[a1 afterFirstUnlock];
}

id objc_msgSend_afterOperation(void *a1, const char *a2, ...)
{
  return _[a1 afterOperation];
}

id objc_msgSend_aggregateResultWithSamples_element_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aggregateResultWithSamples:element:completionHandler:");
}

id objc_msgSend_algorithm(void *a1, const char *a2, ...)
{
  return _[a1 algorithm];
}

id objc_msgSend_allDependentsSuccessful(void *a1, const char *a2, ...)
{
  return _[a1 allDependentsSuccessful];
}

id objc_msgSend_allHTTPHeaderFields(void *a1, const char *a2, ...)
{
  return _[a1 allHTTPHeaderFields];
}

id objc_msgSend_allHeaderFields(void *a1, const char *a2, ...)
{
  return _[a1 allHeaderFields];
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _[a1 allKeys];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _[a1 allObjects];
}

id objc_msgSend_allSuccessful_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allSuccessful:");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _[a1 allValues];
}

id objc_msgSend_alloc(void *a1, const char *a2, ...)
{
  return _[a1 alloc];
}

id objc_msgSend_allocDescriptorForClass_messageName_fileDescription_fields_fieldCount_storageSize_flags_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allocDescriptorForClass:messageName:fileDescription:fields:fieldCount:storageSize:flags:");
}

id objc_msgSend_allocDescriptorForClass_rootClass_file_fields_fieldCount_storageSize_flags_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allocDescriptorForClass:rootClass:file:fields:fieldCount:storageSize:flags:");
}

id objc_msgSend_allocDescriptorForName_valueNames_values_count_enumVerifier_flags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allocDescriptorForName:valueNames:values:count:enumVerifier:flags:");
}

id objc_msgSend_allocDescriptorForName_valueNames_values_count_enumVerifier_flags_extraTextFormatInfo_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allocDescriptorForName:valueNames:values:count:enumVerifier:flags:extraTextFormatInfo:");
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_allowEmptyData(void *a1, const char *a2, ...)
{
  return _[a1 allowEmptyData];
}

id objc_msgSend_allowOldKeys(void *a1, const char *a2, ...)
{
  return _[a1 allowOldKeys];
}

id objc_msgSend_allowPendingFlags(void *a1, const char *a2, ...)
{
  return _[a1 allowPendingFlags];
}

id objc_msgSend_allowableFlags(void *a1, const char *a2, ...)
{
  return _[a1 allowableFlags];
}

id objc_msgSend_allowableStates(void *a1, const char *a2, ...)
{
  return _[a1 allowableStates];
}

id objc_msgSend_allowsInternalSecurityPolicies(void *a1, const char *a2, ...)
{
  return _[a1 allowsInternalSecurityPolicies];
}

id objc_msgSend_altDSID(void *a1, const char *a2, ...)
{
  return _[a1 altDSID];
}

id objc_msgSend_altDSIDForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "altDSIDForAccount:");
}

id objc_msgSend_alternateWireType(void *a1, const char *a2, ...)
{
  return _[a1 alternateWireType];
}

id objc_msgSend_analyticsApplications(void *a1, const char *a2, ...)
{
  return _[a1 analyticsApplications];
}

id objc_msgSend_analyticsErrorData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyticsErrorData:");
}

id objc_msgSend_analyticsForDecodeFailure_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyticsForDecodeFailure:error:");
}

id objc_msgSend_analyticsForParseFailure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyticsForParseFailure:");
}

id objc_msgSend_analyticsForPredateLogBeginningMs_expectedLogBeginningMS_sth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyticsForPredateLogBeginningMs:expectedLogBeginningMS:sth:");
}

id objc_msgSend_analyticsForResponse_type_uri_result_ktCapable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyticsForResponse:type:uri:result:ktCapable:");
}

id objc_msgSend_analyticsForTooNewLogBeginningMs_expectedLogBeginningMS_sth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyticsForTooNewLogBeginningMs:expectedLogBeginningMS:sth:");
}

id objc_msgSend_analyticsForType_uri_accountKey_serverLoggableDatas_syncedLoggableDatas_transparentData_selfVerificationInfo_responseTime_result_failure_responseMetadata_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "analyticsForType:uri:accountKey:serverLoggableDatas:syncedLoggableDatas:transparentData:selfVerificationInfo: responseTime:result:failure:responseMetadata:");
}

id objc_msgSend_analyticsForUnsupportedProtocol_expected_sth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyticsForUnsupportedProtocol:expected:sth:");
}

id objc_msgSend_analyticsLogger(void *a1, const char *a2, ...)
{
  return _[a1 analyticsLogger];
}

id objc_msgSend_analyticsSelfFlagNames(void *a1, const char *a2, ...)
{
  return _[a1 analyticsSelfFlagNames];
}

id objc_msgSend_analyticsSuccessNames(void *a1, const char *a2, ...)
{
  return _[a1 analyticsSuccessNames];
}

id objc_msgSend_anyStoreExpired(void *a1, const char *a2, ...)
{
  return _[a1 anyStoreExpired];
}

id objc_msgSend_appLeafsArray(void *a1, const char *a2, ...)
{
  return _[a1 appLeafsArray];
}

id objc_msgSend_appLeafsArray_Count(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appLeafsArray_Count");
}

id objc_msgSend_appSmtKeyStore(void *a1, const char *a2, ...)
{
  return _[a1 appSmtKeyStore];
}

id objc_msgSend_appSthKeyStore(void *a1, const char *a2, ...)
{
  return _[a1 appSthKeyStore];
}

id objc_msgSend_appVersion(void *a1, const char *a2, ...)
{
  return _[a1 appVersion];
}

id objc_msgSend_appendBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendBytes:length:");
}

id objc_msgSend_appendData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendData:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_application(void *a1, const char *a2, ...)
{
  return _[a1 application];
}

id objc_msgSend_applicationID(void *a1, const char *a2, ...)
{
  return _[a1 applicationID];
}

id objc_msgSend_applicationId(void *a1, const char *a2, ...)
{
  return _[a1 applicationId];
}

id objc_msgSend_applicationIdentifierForValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationIdentifierForValue:");
}

id objc_msgSend_applicationKeyStore(void *a1, const char *a2, ...)
{
  return _[a1 applicationKeyStore];
}

id objc_msgSend_applicationKeyStores(void *a1, const char *a2, ...)
{
  return _[a1 applicationKeyStores];
}

id objc_msgSend_applicationPrefixForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationPrefixForIdentifier:");
}

id objc_msgSend_applicationPublicKeyStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationPublicKeyStore:");
}

id objc_msgSend_applicationToService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationToService:");
}

id objc_msgSend_applicationValueForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationValueForIdentifier:");
}

id objc_msgSend_applicationVersion(void *a1, const char *a2, ...)
{
  return _[a1 applicationVersion];
}

id objc_msgSend_applications(void *a1, const char *a2, ...)
{
  return _[a1 applications];
}

id objc_msgSend_applyPeerOverrides_peer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyPeerOverrides:peer:");
}

id objc_msgSend_apps(void *a1, const char *a2, ...)
{
  return _[a1 apps];
}

id objc_msgSend_apsConnection(void *a1, const char *a2, ...)
{
  return _[a1 apsConnection];
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_areKeysAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "areKeysAvailable:");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_asPathStep(void *a1, const char *a2, ...)
{
  return _[a1 asPathStep];
}

id objc_msgSend_atEnvironment(void *a1, const char *a2, ...)
{
  return _[a1 atEnvironment];
}

id objc_msgSend_auditorReportForKTRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "auditorReportForKTRequest:");
}

id objc_msgSend_auditorReportForKTSMT_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "auditorReportForKTSMT:");
}

id objc_msgSend_auditorReportForSTH_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "auditorReportForSTH:");
}

id objc_msgSend_auditorReportsForFailedEvents_dataStore_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "auditorReportsForFailedEvents:dataStore:completionBlock:");
}

id objc_msgSend_auth(void *a1, const char *a2, ...)
{
  return _[a1 auth];
}

id objc_msgSend_authKitAccountWithAltDSID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authKitAccountWithAltDSID:error:");
}

id objc_msgSend_authToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authToken:");
}

id objc_msgSend_authenticated(void *a1, const char *a2, ...)
{
  return _[a1 authenticated];
}

id objc_msgSend_autoVacuumSetting(void *a1, const char *a2, ...)
{
  return _[a1 autoVacuumSetting];
}

id objc_msgSend_automatedDeviceGroup(void *a1, const char *a2, ...)
{
  return _[a1 automatedDeviceGroup];
}

id objc_msgSend_baaKey(void *a1, const char *a2, ...)
{
  return _[a1 baaKey];
}

id objc_msgSend_backgroundContext(void *a1, const char *a2, ...)
{
  return _[a1 backgroundContext];
}

id objc_msgSend_backgroundFollowupDelayPeriod(void *a1, const char *a2, ...)
{
  return _[a1 backgroundFollowupDelayPeriod];
}

id objc_msgSend_backgroundFollowupFailureCount(void *a1, const char *a2, ...)
{
  return _[a1 backgroundFollowupFailureCount];
}

id objc_msgSend_backgroundNetworkTimeout(void *a1, const char *a2, ...)
{
  return _[a1 backgroundNetworkTimeout];
}

id objc_msgSend_backgroundOpId(void *a1, const char *a2, ...)
{
  return _[a1 backgroundOpId];
}

id objc_msgSend_backgroundSession(void *a1, const char *a2, ...)
{
  return _[a1 backgroundSession];
}

id objc_msgSend_backgroundSessionConfigurationWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundSessionConfigurationWithIdentifier:");
}

id objc_msgSend_backoff(void *a1, const char *a2, ...)
{
  return _[a1 backoff];
}

id objc_msgSend_bag(void *a1, const char *a2, ...)
{
  return _[a1 bag];
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_batchQueryMaxURIs(void *a1, const char *a2, ...)
{
  return _[a1 batchQueryMaxURIs];
}

id objc_msgSend_batchQueryURI(void *a1, const char *a2, ...)
{
  return _[a1 batchQueryURI];
}

id objc_msgSend_batchUpdateRequestWithEntityName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batchUpdateRequestWithEntityName:");
}

id objc_msgSend_bestVerificationResultToUIStatusForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bestVerificationResultToUIStatusForDate:");
}

id objc_msgSend_bindNullAtColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bindNullAtColumn:");
}

id objc_msgSend_blobAtColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blobAtColumn:");
}

id objc_msgSend_blockOperationWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blockOperationWithBlock:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_build(void *a1, const char *a2, ...)
{
  return _[a1 build];
}

id objc_msgSend_buildBatchQueryRequest_application_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildBatchQueryRequest:application:error:");
}

id objc_msgSend_buildBatchQueryRequests_application_maxURIsPerBatch_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildBatchQueryRequests:application:maxURIsPerBatch:error:");
}

id objc_msgSend_buildConsistencyProofRequest_revisions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildConsistencyProofRequest:revisions:error:");
}

id objc_msgSend_buildNumber(void *a1, const char *a2, ...)
{
  return _[a1 buildNumber];
}

id objc_msgSend_buildPublicKeysRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildPublicKeysRequest:error:");
}

id objc_msgSend_buildQueryRequest_application_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildQueryRequest:application:error:");
}

id objc_msgSend_buildRevisionLogInclusionProofRequest_logType_revisions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildRevisionLogInclusionProofRequest:logType:revisions:error:");
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 bundleIdentifier];
}

id objc_msgSend_bundleURL(void *a1, const char *a2, ...)
{
  return _[a1 bundleURL];
}

id objc_msgSend_bundleWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleWithIdentifier:");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _[a1 bytes];
}

id objc_msgSend_cacheClearRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cacheClearRequest:");
}

id objc_msgSend_cachePCSIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachePCSIdentity:");
}

id objc_msgSend_cachedDevices(void *a1, const char *a2, ...)
{
  return _[a1 cachedDevices];
}

id objc_msgSend_cachedGossip(void *a1, const char *a2, ...)
{
  return _[a1 cachedGossip];
}

id objc_msgSend_cachedNotification(void *a1, const char *a2, ...)
{
  return _[a1 cachedNotification];
}

id objc_msgSend_cachedTimeOfLastReportWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedTimeOfLastReportWithCompletionHandler:");
}

id objc_msgSend_cachedTimes(void *a1, const char *a2, ...)
{
  return _[a1 cachedTimes];
}

id objc_msgSend_calcValueNameOffsets(void *a1, const char *a2, ...)
{
  return _[a1 calcValueNameOffsets];
}

id objc_msgSend_callStackSymbols(void *a1, const char *a2, ...)
{
  return _[a1 callStackSymbols];
}

id objc_msgSend_callbackWorkloop(void *a1, const char *a2, ...)
{
  return _[a1 callbackWorkloop];
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _[a1 cancel];
}

id objc_msgSend_cancelAllOperations(void *a1, const char *a2, ...)
{
  return _[a1 cancelAllOperations];
}

id objc_msgSend_cancelPendingFlag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelPendingFlag:");
}

id objc_msgSend_certFetcher(void *a1, const char *a2, ...)
{
  return _[a1 certFetcher];
}

id objc_msgSend_certificateFromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "certificateFromData:error:");
}

id objc_msgSend_certificates(void *a1, const char *a2, ...)
{
  return _[a1 certificates];
}

id objc_msgSend_cfPrefsJson(void *a1, const char *a2, ...)
{
  return _[a1 cfPrefsJson];
}

id objc_msgSend_chain(void *a1, const char *a2, ...)
{
  return _[a1 chain];
}

id objc_msgSend_changeLogHead(void *a1, const char *a2, ...)
{
  return _[a1 changeLogHead];
}

id objc_msgSend_changeOptInState_application_logClient_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changeOptInState:application:logClient:completionBlock:");
}

id objc_msgSend_changeOptInState_dataStore_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changeOptInState:dataStore:completionBlock:");
}

id objc_msgSend_changeType(void *a1, const char *a2, ...)
{
  return _[a1 changeType];
}

id objc_msgSend_changedObjectID(void *a1, const char *a2, ...)
{
  return _[a1 changedObjectID];
}

id objc_msgSend_changes(void *a1, const char *a2, ...)
{
  return _[a1 changes];
}

id objc_msgSend_characterAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterAtIndex:");
}

id objc_msgSend_checkAccountKeyChanged(void *a1, const char *a2, ...)
{
  return _[a1 checkAccountKeyChanged];
}

id objc_msgSend_checkAccountNFS(void *a1, const char *a2, ...)
{
  return _[a1 checkAccountNFS];
}

id objc_msgSend_checkAllCKKSMonitoredViews(void *a1, const char *a2, ...)
{
  return _[a1 checkAllCKKSMonitoredViews];
}

id objc_msgSend_checkAndLogHardErrorIfNecessary_type_logger_error_applicationID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkAndLogHardErrorIfNecessary:type:logger:error:applicationID:");
}

id objc_msgSend_checkBagKeyClass_keys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkBagKeyClass:keys:");
}

id objc_msgSend_checkBatchQueryResponseEpochs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkBatchQueryResponseEpochs:");
}

id objc_msgSend_checkBatchQueryResponseFreshness_receiptDate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkBatchQueryResponseFreshness:receiptDate:error:");
}

id objc_msgSend_checkCKKSAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkCKKSAvailable:");
}

id objc_msgSend_checkErrorChainForLockState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkErrorChainForLockState:");
}

id objc_msgSend_checkFollowupTicket_uri_checkTime_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkFollowupTicket:uri:checkTime:error:");
}

id objc_msgSend_checkHeadEpoch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkHeadEpoch:");
}

id objc_msgSend_checkIDSHealth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkIDSHealth:");
}

id objc_msgSend_checkIDSRegistration(void *a1, const char *a2, ...)
{
  return _[a1 checkIDSRegistration];
}

id objc_msgSend_checkIDSResult(void *a1, const char *a2, ...)
{
  return _[a1 checkIDSResult];
}

id objc_msgSend_checkIDSTimeoutSeconds(void *a1, const char *a2, ...)
{
  return _[a1 checkIDSTimeoutSeconds];
}

id objc_msgSend_checkIDSTimer(void *a1, const char *a2, ...)
{
  return _[a1 checkIDSTimer];
}

id objc_msgSend_checkKTAccountKey_complete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkKTAccountKey:complete:");
}

id objc_msgSend_checkKTAccountKeyScheduler(void *a1, const char *a2, ...)
{
  return _[a1 checkKTAccountKeyScheduler];
}

id objc_msgSend_checkKTSignatureScheduler(void *a1, const char *a2, ...)
{
  return _[a1 checkKTSignatureScheduler];
}

id objc_msgSend_checkLastTagWas_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkLastTagWas:");
}

id objc_msgSend_checkMissingBagKeys_keys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkMissingBagKeys:keys:");
}

id objc_msgSend_checkNetworkError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkNetworkError:");
}

id objc_msgSend_checkPCSKTSignature_data_signature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkPCSKTSignature:data:signature:");
}

id objc_msgSend_checkQueryInfoFreshness_receiptDate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkQueryInfoFreshness:receiptDate:error:");
}

id objc_msgSend_checkQueryResponseEpochs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkQueryResponseEpochs:");
}

id objc_msgSend_checkQueryResponseFreshness_receiptDate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkQueryResponseFreshness:receiptDate:error:");
}

id objc_msgSend_checkReachabilityOperation(void *a1, const char *a2, ...)
{
  return _[a1 checkReachabilityOperation];
}

id objc_msgSend_checkResponseFreshness_smh_receiptDate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkResponseFreshness:smh:receiptDate:error:");
}

id objc_msgSend_checkServerStatus_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkServerStatus:error:");
}

id objc_msgSend_checkServerStatus_isInsert_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkServerStatus:isInsert:error:");
}

id objc_msgSend_checkSplitsFor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkSplitsFor:");
}

id objc_msgSend_checkUnlockOperation(void *a1, const char *a2, ...)
{
  return _[a1 checkUnlockOperation];
}

id objc_msgSend_childAccountsWithAccountTypeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "childAccountsWithAccountTypeIdentifier:");
}

id objc_msgSend_chunkArray_chunkSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chunkArray:chunkSize:");
}

id objc_msgSend_ckAccountInfoInitialized(void *a1, const char *a2, ...)
{
  return _[a1 ckAccountInfoInitialized];
}

id objc_msgSend_ckChangeListeners(void *a1, const char *a2, ...)
{
  return _[a1 ckChangeListeners];
}

id objc_msgSend_ckFetchReasons(void *a1, const char *a2, ...)
{
  return _[a1 ckFetchReasons];
}

id objc_msgSend_ckFetchScheduler(void *a1, const char *a2, ...)
{
  return _[a1 ckFetchScheduler];
}

id objc_msgSend_ckdatabase(void *a1, const char *a2, ...)
{
  return _[a1 ckdatabase];
}

id objc_msgSend_ckksCheckerNFS(void *a1, const char *a2, ...)
{
  return _[a1 ckksCheckerNFS];
}

id objc_msgSend_ckksControl_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ckksControl:");
}

id objc_msgSend_ckksControlInterface(void *a1, const char *a2, ...)
{
  return _[a1 ckksControlInterface];
}

id objc_msgSend_ckksGetKnownBadState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ckksGetKnownBadState:");
}

id objc_msgSend_ckksRequestViewSync_complete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ckksRequestViewSync:complete:");
}

id objc_msgSend_ckksTimeout(void *a1, const char *a2, ...)
{
  return _[a1 ckksTimeout];
}

id objc_msgSend_ckksViewObserver(void *a1, const char *a2, ...)
{
  return _[a1 ckksViewObserver];
}

id objc_msgSend_ckksViewReady_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ckksViewReady:error:");
}

id objc_msgSend_cleanseError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanseError:");
}

id objc_msgSend_cleanseErrorForXPC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanseErrorForXPC:");
}

id objc_msgSend_cleanupAccounts(void *a1, const char *a2, ...)
{
  return _[a1 cleanupAccounts];
}

id objc_msgSend_cleanupDevices(void *a1, const char *a2, ...)
{
  return _[a1 cleanupDevices];
}

id objc_msgSend_cleanupRecords(void *a1, const char *a2, ...)
{
  return _[a1 cleanupRecords];
}

id objc_msgSend_clearAccountMetadata(void *a1, const char *a2, ...)
{
  return _[a1 clearAccountMetadata];
}

id objc_msgSend_clearAccountMetrics(void *a1, const char *a2, ...)
{
  return _[a1 clearAccountMetrics];
}

id objc_msgSend_clearAllFailureEvents_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearAllFailureEvents:error:");
}

id objc_msgSend_clearAllFollowups_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearAllFollowups:");
}

id objc_msgSend_clearApplicationState_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearApplicationState:error:");
}

id objc_msgSend_clearApplicationState_logClient_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearApplicationState:logClient:completionBlock:");
}

id objc_msgSend_clearCachedPCSIdentities(void *a1, const char *a2, ...)
{
  return _[a1 clearCachedPCSIdentities];
}

id objc_msgSend_clearCachedPCSIdentity(void *a1, const char *a2, ...)
{
  return _[a1 clearCachedPCSIdentity];
}

id objc_msgSend_clearCoreFollowUp(void *a1, const char *a2, ...)
{
  return _[a1 clearCoreFollowUp];
}

id objc_msgSend_clearDataForPAT_dataStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearDataForPAT:dataStore:");
}

id objc_msgSend_clearDataForTLT_dataStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearDataForTLT:dataStore:");
}

id objc_msgSend_clearDataStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearDataStore:");
}

id objc_msgSend_clearDeviceSignatures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearDeviceSignatures:");
}

id objc_msgSend_clearDiskApplicationKeyStore_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearDiskApplicationKeyStore:error:");
}

id objc_msgSend_clearEligibilityOverrides_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearEligibilityOverrides:");
}

id objc_msgSend_clearEligibilityOverridesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearEligibilityOverridesWithCompletionHandler:");
}

id objc_msgSend_clearFailureEvents(void *a1, const char *a2, ...)
{
  return _[a1 clearFailureEvents];
}

id objc_msgSend_clearFollowupTicket_uri_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearFollowupTicket:uri:error:");
}

id objc_msgSend_clearFollowupsByType_type_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearFollowupsByType:type:error:");
}

id objc_msgSend_clearForEnvironmentChange(void *a1, const char *a2, ...)
{
  return _[a1 clearForEnvironmentChange];
}

id objc_msgSend_clearGossip(void *a1, const char *a2, ...)
{
  return _[a1 clearGossip];
}

id objc_msgSend_clearIDSCacheForUri_application_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearIDSCacheForUri:application:");
}

id objc_msgSend_clearLocalCloudState(void *a1, const char *a2, ...)
{
  return _[a1 clearLocalCloudState];
}

id objc_msgSend_clearOptInStateAndPushToCloud(void *a1, const char *a2, ...)
{
  return _[a1 clearOptInStateAndPushToCloud];
}

id objc_msgSend_clearOptInStateForURI_application_complete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearOptInStateForURI:application:complete:");
}

id objc_msgSend_clearOptInStateForURI_application_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearOptInStateForURI:application:error:");
}

id objc_msgSend_clearPeerOverride_application_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearPeerOverride:application:");
}

id objc_msgSend_clearPeerState_uris_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearPeerState:uris:error:");
}

id objc_msgSend_clearReportOverridesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearReportOverridesWithCompletionHandler:");
}

id objc_msgSend_clearSelfFailureRelatedData_uri_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearSelfFailureRelatedData:uri:error:");
}

id objc_msgSend_clearSelfTicketState_responseTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearSelfTicketState:responseTime:");
}

id objc_msgSend_clearState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearState:");
}

id objc_msgSend_clearStateForApplication_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearStateForApplication:error:");
}

id objc_msgSend_clearTapToRadarWithUnique_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearTapToRadarWithUnique:");
}

id objc_msgSend_clientData(void *a1, const char *a2, ...)
{
  return _[a1 clientData];
}

id objc_msgSend_clientDataArray(void *a1, const char *a2, ...)
{
  return _[a1 clientDataArray];
}

id objc_msgSend_clientDataHash(void *a1, const char *a2, ...)
{
  return _[a1 clientDataHash];
}

id objc_msgSend_clientDatas(void *a1, const char *a2, ...)
{
  return _[a1 clientDatas];
}

id objc_msgSend_clientLoggableDatas(void *a1, const char *a2, ...)
{
  return _[a1 clientLoggableDatas];
}

id objc_msgSend_clientRecordForAppVersion_clientDataHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientRecordForAppVersion:clientDataHash:");
}

id objc_msgSend_clientRecordsForHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientRecordsForHash:");
}

id objc_msgSend_close(void *a1, const char *a2, ...)
{
  return _[a1 close];
}

id objc_msgSend_closeDatabaseWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closeDatabaseWithCompletionHandler:");
}

id objc_msgSend_cloudContainer(void *a1, const char *a2, ...)
{
  return _[a1 cloudContainer];
}

id objc_msgSend_cloudDeviceNeedUpdateWithPushToken_tbsRegistrationData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudDeviceNeedUpdateWithPushToken:tbsRegistrationData:");
}

id objc_msgSend_cloudDevices(void *a1, const char *a2, ...)
{
  return _[a1 cloudDevices];
}

id objc_msgSend_cloudFetchOperationWithDeps_initialFetch_userInteractive_reason_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudFetchOperationWithDeps:initialFetch:userInteractive:reason:context:");
}

id objc_msgSend_cloudKitAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudKitAccount:");
}

id objc_msgSend_cloudKitAccountInfo(void *a1, const char *a2, ...)
{
  return _[a1 cloudKitAccountInfo];
}

id objc_msgSend_cloudKitAccountTracker(void *a1, const char *a2, ...)
{
  return _[a1 cloudKitAccountTracker];
}

id objc_msgSend_cloudKitZones(void *a1, const char *a2, ...)
{
  return _[a1 cloudKitZones];
}

id objc_msgSend_cloudPersistentStoreDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudPersistentStoreDescription:");
}

id objc_msgSend_cloudRecords(void *a1, const char *a2, ...)
{
  return _[a1 cloudRecords];
}

id objc_msgSend_cloudkitAccountStateChange_to_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudkitAccountStateChange:to:");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _[a1 code];
}

id objc_msgSend_columnCount(void *a1, const char *a2, ...)
{
  return _[a1 columnCount];
}

id objc_msgSend_columnNameAtColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "columnNameAtColumn:");
}

id objc_msgSend_columnTypeAtColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "columnTypeAtColumn:");
}

id objc_msgSend_combineLoggableDatasForUI_byAdding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "combineLoggableDatasForUI:byAdding:");
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:");
}

id objc_msgSend_complete(void *a1, const char *a2, ...)
{
  return _[a1 complete];
}

id objc_msgSend_completeOperation(void *a1, const char *a2, ...)
{
  return _[a1 completeOperation];
}

id objc_msgSend_completed(void *a1, const char *a2, ...)
{
  return _[a1 completed];
}

id objc_msgSend_completedCurrentTarget(void *a1, const char *a2, ...)
{
  return _[a1 completedCurrentTarget];
}

id objc_msgSend_completionHandlerDidRunCondition(void *a1, const char *a2, ...)
{
  return _[a1 completionHandlerDidRunCondition];
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_computeHashesForSalt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeHashesForSalt:");
}

id objc_msgSend_computeSerializedSizeAsField_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeSerializedSizeAsField:");
}

id objc_msgSend_conditionChecksInFlight(void *a1, const char *a2, ...)
{
  return _[a1 conditionChecksInFlight];
}

id objc_msgSend_conditions(void *a1, const char *a2, ...)
{
  return _[a1 conditions];
}

id objc_msgSend_config(void *a1, const char *a2, ...)
{
  return _[a1 config];
}

id objc_msgSend_configApp(void *a1, const char *a2, ...)
{
  return _[a1 configApp];
}

id objc_msgSend_configBag(void *a1, const char *a2, ...)
{
  return _[a1 configBag];
}

id objc_msgSend_configBagFileName(void *a1, const char *a2, ...)
{
  return _[a1 configBagFileName];
}

id objc_msgSend_configBagRequest(void *a1, const char *a2, ...)
{
  return _[a1 configBagRequest];
}

id objc_msgSend_configBagURL(void *a1, const char *a2, ...)
{
  return _[a1 configBagURL];
}

id objc_msgSend_configurationExpired(void *a1, const char *a2, ...)
{
  return _[a1 configurationExpired];
}

id objc_msgSend_configurationStore(void *a1, const char *a2, ...)
{
  return _[a1 configurationStore];
}

id objc_msgSend_configure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configure:");
}

id objc_msgSend_configureFromNetwork_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureFromNetwork:");
}

id objc_msgSend_configureFromNetworkBagData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureFromNetworkBagData:error:");
}

id objc_msgSend_configureFromNetworkWithFetcher_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureFromNetworkWithFetcher:completionHandler:");
}

id objc_msgSend_configureGroup(void *a1, const char *a2, ...)
{
  return _[a1 configureGroup];
}

id objc_msgSend_configureQueue(void *a1, const char *a2, ...)
{
  return _[a1 configureQueue];
}

id objc_msgSend_configureWithClient_applicationHandler_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureWithClient:applicationHandler:completionHandler:");
}

id objc_msgSend_configureWithClient_force_applicationHandler_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureWithClient:force:applicationHandler:completionHandler:");
}

id objc_msgSend_configureWithClient_ignoreCachedKeys_dataStore_contextStore_applicationHandler_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "configureWithClient:ignoreCachedKeys:dataStore:contextStore:applicationHandler:completionHandler:");
}

id objc_msgSend_configureWithDisk_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureWithDisk:");
}

id objc_msgSend_configureWithDisk_contextStore_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureWithDisk:contextStore:error:");
}

id objc_msgSend_configureWithFetcher_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureWithFetcher:completionHandler:");
}

id objc_msgSend_configured(void *a1, const char *a2, ...)
{
  return _[a1 configured];
}

id objc_msgSend_conflictingObjects(void *a1, const char *a2, ...)
{
  return _[a1 conflictingObjects];
}

id objc_msgSend_consistencyMaxProofs(void *a1, const char *a2, ...)
{
  return _[a1 consistencyMaxProofs];
}

id objc_msgSend_consistencyProofURI(void *a1, const char *a2, ...)
{
  return _[a1 consistencyProofURI];
}

id objc_msgSend_consistencyVerified(void *a1, const char *a2, ...)
{
  return _[a1 consistencyVerified];
}

id objc_msgSend_consumeContactsChangeHistory(void *a1, const char *a2, ...)
{
  return _[a1 consumeContactsChangeHistory];
}

id objc_msgSend_contact(void *a1, const char *a2, ...)
{
  return _[a1 contact];
}

id objc_msgSend_contactExternalIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 contactExternalIdentifier];
}

id objc_msgSend_contactExternalURI(void *a1, const char *a2, ...)
{
  return _[a1 contactExternalURI];
}

id objc_msgSend_contactIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 contactIdentifier];
}

id objc_msgSend_contactStore(void *a1, const char *a2, ...)
{
  return _[a1 contactStore];
}

id objc_msgSend_contacts(void *a1, const char *a2, ...)
{
  return _[a1 contacts];
}

id objc_msgSend_container(void *a1, const char *a2, ...)
{
  return _[a1 container];
}

id objc_msgSend_containingMessageClass(void *a1, const char *a2, ...)
{
  return _[a1 containingMessageClass];
}

id objc_msgSend_containingType(void *a1, const char *a2, ...)
{
  return _[a1 containingType];
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_contentsAsString(void *a1, const char *a2, ...)
{
  return _[a1 contentsAsString];
}

id objc_msgSend_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:");
}

id objc_msgSend_context(void *a1, const char *a2, ...)
{
  return _[a1 context];
}

id objc_msgSend_contextForApplication_logClient_fetchState_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextForApplication:logClient:fetchState:completionHandler:");
}

id objc_msgSend_contextRefCount(void *a1, const char *a2, ...)
{
  return _[a1 contextRefCount];
}

id objc_msgSend_contextShouldGossip(void *a1, const char *a2, ...)
{
  return _[a1 contextShouldGossip];
}

id objc_msgSend_contextStore(void *a1, const char *a2, ...)
{
  return _[a1 contextStore];
}

id objc_msgSend_contexts(void *a1, const char *a2, ...)
{
  return _[a1 contexts];
}

id objc_msgSend_controlObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controlObject:");
}

id objc_msgSend_controller(void *a1, const char *a2, ...)
{
  return _[a1 controller];
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_copyCachedPCSIdentity(void *a1, const char *a2, ...)
{
  return _[a1 copyCachedPCSIdentity];
}

id objc_msgSend_copyCachedPCSIdentityForApplication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyCachedPCSIdentityForApplication:");
}

id objc_msgSend_copyConfigurationBag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyConfigurationBag:");
}

id objc_msgSend_copyFieldsInto_zone_descriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyFieldsInto:zone:descriptor:");
}

id objc_msgSend_copyKeyStoreState(void *a1, const char *a2, ...)
{
  return _[a1 copyKeyStoreState];
}

id objc_msgSend_copyManagedObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyManagedObject:");
}

id objc_msgSend_copyMetadata(void *a1, const char *a2, ...)
{
  return _[a1 copyMetadata];
}

id objc_msgSend_copyPCSIdentitySet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyPCSIdentitySet:");
}

id objc_msgSend_copyState(void *a1, const char *a2, ...)
{
  return _[a1 copyState];
}

id objc_msgSend_copyStatistics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyStatistics:");
}

id objc_msgSend_copyTltBag(void *a1, const char *a2, ...)
{
  return _[a1 copyTltBag];
}

id objc_msgSend_copyTrustedKeysFromDataArray_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyTrustedKeysFromDataArray:error:");
}

id objc_msgSend_copyVRFKeyFromConfigProof_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyVRFKeyFromConfigProof:error:");
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyWithZone:");
}

id objc_msgSend_coreDataInitialDelaySync(void *a1, const char *a2, ...)
{
  return _[a1 coreDataInitialDelaySync];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countForFetchRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countForFetchRequest:error:");
}

id objc_msgSend_countOfFields(void *a1, const char *a2, ...)
{
  return _[a1 countOfFields];
}

id objc_msgSend_countOutstandingRequestsForApplication_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countOutstandingRequestsForApplication:error:");
}

id objc_msgSend_countOutstandingSMHsForApplication_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countOutstandingSMHsForApplication:error:");
}

id objc_msgSend_countOutstandingSMTsForApplication_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countOutstandingSMTsForApplication:error:");
}

id objc_msgSend_countOutstandingSTHsForApplication_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countOutstandingSTHsForApplication:error:");
}

id objc_msgSend_countOutstandingVerificationsForApplication_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countOutstandingVerificationsForApplication:error:");
}

id objc_msgSend_countTotalRequestsForApplication_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countTotalRequestsForApplication:error:");
}

id objc_msgSend_countTotalSMTsForApplication_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countTotalSMTsForApplication:error:");
}

id objc_msgSend_countTotalSTHsForApplication_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countTotalSTHsForApplication:error:");
}

id objc_msgSend_countTotalVerificationsForApplication_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countTotalVerificationsForApplication:error:");
}

id objc_msgSend_countryCode(void *a1, const char *a2, ...)
{
  return _[a1 countryCode];
}

id objc_msgSend_createApplicationKeyStore_keyStoreData_dataStore_contextStore_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createApplicationKeyStore:keyStoreData:dataStore:contextStore:error:");
}

id objc_msgSend_createApplicationKeyStore_keyStoreResponse_dataStore_contextStore_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createApplicationKeyStore:keyStoreResponse:dataStore:contextStore:error:");
}

id objc_msgSend_createAuthToken_authToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createAuthToken:authToken:");
}

id objc_msgSend_createAuthenticatedForegroundSession(void *a1, const char *a2, ...)
{
  return _[a1 createAuthenticatedForegroundSession];
}

id objc_msgSend_createAuthkitSession(void *a1, const char *a2, ...)
{
  return _[a1 createAuthkitSession];
}

id objc_msgSend_createBatchQuery(void *a1, const char *a2, ...)
{
  return _[a1 createBatchQuery];
}

id objc_msgSend_createCACertificatesArray_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createCACertificatesArray:error:");
}

id objc_msgSend_createChainOfErrorsFromRequestFailures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createChainOfErrorsFromRequestFailures:");
}

id objc_msgSend_createChainOfErrorsFromSMTFailures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createChainOfErrorsFromSMTFailures:");
}

id objc_msgSend_createChainOfErrorsFromSTHFailures_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createChainOfErrorsFromSTHFailures:type:");
}

id objc_msgSend_createContextForApplication_dataStore_staticKeyStore_logClient_stateMachine_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createContextForApplication:dataStore:staticKeyStore:logClient:stateMachine:");
}

id objc_msgSend_createContextForTLT_staticKeyStore_logClient_stateMachine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createContextForTLT:staticKeyStore:logClient:stateMachine:");
}

id objc_msgSend_createContexts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createContexts:");
}

id objc_msgSend_createDataStores_followup_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDataStores:followup:error:");
}

id objc_msgSend_createDirectoryAtURL_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createDownloadRecord_moc_application_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDownloadRecord:moc:application:");
}

id objc_msgSend_createErrorFromRequestFailure_underlyingError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createErrorFromRequestFailure:underlyingError:");
}

id objc_msgSend_createErrorFromSMTFailure_underlyingError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createErrorFromSMTFailure:underlyingError:");
}

id objc_msgSend_createErrorFromSTHFailure_underlyingError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createErrorFromSTHFailure:underlyingError:");
}

id objc_msgSend_createErrorFromURLResonse_data_allowEmptyData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createErrorFromURLResonse:data:allowEmptyData:error:");
}

id objc_msgSend_createFailureEvent_application_optInServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFailureEvent:application:optInServer:");
}

id objc_msgSend_createFetchRecord(void *a1, const char *a2, ...)
{
  return _[a1 createFetchRecord];
}

id objc_msgSend_createFetchRecordForRequestData_request_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFetchRecordForRequestData:request:error:");
}

id objc_msgSend_createFileAtPath_contents_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFileAtPath:contents:attributes:");
}

id objc_msgSend_createFollowupTicket_uri_startTime_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFollowupTicket:uri:startTime:error:");
}

id objc_msgSend_createGETRequestForURL_timeout_additionalHeaders_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createGETRequestForURL:timeout:additionalHeaders:error:");
}

id objc_msgSend_createGETRequestForURL_timeout_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createGETRequestForURL:timeout:error:");
}

id objc_msgSend_createIDSKTVerification_application_accountKey_idsResponseTime_serverLoggableDatas_optedIn_type_syncedLoggableDatas_verificationId_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "createIDSKTVerification:application:accountKey:idsResponseTime:serverLoggableDatas:optedIn:type:syncedLoggabl eDatas:verificationId:error:");
}

id objc_msgSend_createIDSKTVerification_application_verificationInfo_type_syncedLoggableDatas_verificationId_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "createIDSKTVerification:application:verificationInfo:type:syncedLoggableDatas:verificationId:error:");
}

id objc_msgSend_createIDSVerificationID_verification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createIDSVerificationID:verification:");
}

id objc_msgSend_createIdentityForSet_roll_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createIdentityForSet:roll:completionBlock:");
}

id objc_msgSend_createKTRequestID_request_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createKTRequestID:request:");
}

id objc_msgSend_createManagedObject_uri_serverHint_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createManagedObject:uri:serverHint:error:");
}

id objc_msgSend_createManagedObjectWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createManagedObjectWithError:");
}

id objc_msgSend_createManateeIdentity_service_complete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createManateeIdentity:service:complete:");
}

id objc_msgSend_createMapHead_application_logBeginTime_logHeadHash_logType_revision_populating_gossip_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createMapHead:application:logBeginTime:logHeadHash:logType:revision:populating:gossip:");
}

id objc_msgSend_createMutation_application_uri_mutationMs_spkiHash_receiptTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createMutation:application:uri:mutationMs:spkiHash:receiptTime:");
}

id objc_msgSend_createOperationToFinishAttempt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createOperationToFinishAttempt:");
}

id objc_msgSend_createPeerIDSKTVerification_application_verificationInfo_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createPeerIDSKTVerification:application:verificationInfo:error:");
}

id objc_msgSend_createPeerOverrides(void *a1, const char *a2, ...)
{
  return _[a1 createPeerOverrides];
}

id objc_msgSend_createPeerState_application_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createPeerState:application:error:");
}

id objc_msgSend_createQueryRequestForKTRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createQueryRequestForKTRequest:error:");
}

id objc_msgSend_createRecordFromLoggableData_application_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createRecordFromLoggableData:application:");
}

id objc_msgSend_createRequest(void *a1, const char *a2, ...)
{
  return _[a1 createRequest];
}

id objc_msgSend_createRequestFailure(void *a1, const char *a2, ...)
{
  return _[a1 createRequestFailure];
}

id objc_msgSend_createRequestForAuthentication_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createRequestForAuthentication:completionHandler:");
}

id objc_msgSend_createRequestForAuthentication_fetchAuthNow_timeShift_additionalHeaders_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createRequestForAuthentication:fetchAuthNow:timeShift:additionalHeaders:completionHandler:");
}

id objc_msgSend_createRequestForAuthentication_fetchAuthNow_timeShift_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createRequestForAuthentication:fetchAuthNow:timeShift:completionHandler:");
}

id objc_msgSend_createRequestForURL_timeout_contents_authentication_fetchAuthNow_timeShift_additionalHeaders_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "createRequestForURL:timeout:contents:authentication:fetchAuthNow:timeShift:additionalHeaders:completionHandler:");
}

id objc_msgSend_createRequestWithUri_application_accountKey_serverData_syncedData_idsResponseTime_queryRequest_queryResponse_responseDate_type_clientId_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "createRequestWithUri:application:accountKey:serverData:syncedData:idsResponseTime:queryRequest:queryResponse: responseDate:type:clientId:error:");
}

id objc_msgSend_createRequestWithUri_application_accountKey_serverData_syncedData_queryRequest_queryResponse_type_clientId_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "createRequestWithUri:application:accountKey:serverData:syncedData:queryRequest:queryResponse:type:clientId:error:");
}

id objc_msgSend_createSelfValidationState_uri_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSelfValidationState:uri:error:");
}

id objc_msgSend_createSignedMutationTimestampsFailure(void *a1, const char *a2, ...)
{
  return _[a1 createSignedMutationTimestampsFailure];
}

id objc_msgSend_createSignedTreeHeadFailure(void *a1, const char *a2, ...)
{
  return _[a1 createSignedTreeHeadFailure];
}

id objc_msgSend_createSingleQuery(void *a1, const char *a2, ...)
{
  return _[a1 createSingleQuery];
}

id objc_msgSend_createSingleQuery_backgroundOpId_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSingleQuery:backgroundOpId:error:");
}

id objc_msgSend_createSuccesfulCKFetchDependency(void *a1, const char *a2, ...)
{
  return _[a1 createSuccesfulCKFetchDependency];
}

id objc_msgSend_createTLTApplicationPublicKeyStore(void *a1, const char *a2, ...)
{
  return _[a1 createTLTApplicationPublicKeyStore];
}

id objc_msgSend_createTransparentDataFromQueryInfo_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createTransparentDataFromQueryInfo:error:");
}

id objc_msgSend_createTreeHead(void *a1, const char *a2, ...)
{
  return _[a1 createTreeHead];
}

id objc_msgSend_createTreeHead_isMapHead_application_logBeginTime_logHeadHash_logType_revision_gossip_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createTreeHead:isMapHead:application:logBeginTime:logHeadHash:logType:revision:gossip:");
}

id objc_msgSend_createTrustedSthKeyStoreFromProofSPKI_signingKeysMap_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createTrustedSthKeyStoreFromProofSPKI:signingKeysMap:error:");
}

id objc_msgSend_createdAt(void *a1, const char *a2, ...)
{
  return _[a1 createdAt];
}

id objc_msgSend_creationGroup(void *a1, const char *a2, ...)
{
  return _[a1 creationGroup];
}

id objc_msgSend_creationQueue(void *a1, const char *a2, ...)
{
  return _[a1 creationQueue];
}

id objc_msgSend_creationTime(void *a1, const char *a2, ...)
{
  return _[a1 creationTime];
}

id objc_msgSend_credential(void *a1, const char *a2, ...)
{
  return _[a1 credential];
}

id objc_msgSend_credentialItemForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "credentialItemForKey:");
}

id objc_msgSend_currentAccountOptInState(void *a1, const char *a2, ...)
{
  return _[a1 currentAccountOptInState];
}

id objc_msgSend_currentCKAccountInfo(void *a1, const char *a2, ...)
{
  return _[a1 currentCKAccountInfo];
}

id objc_msgSend_currentCKFetch(void *a1, const char *a2, ...)
{
  return _[a1 currentCKFetch];
}

id objc_msgSend_currentConditions(void *a1, const char *a2, ...)
{
  return _[a1 currentConditions];
}

id objc_msgSend_currentDelay(void *a1, const char *a2, ...)
{
  return _[a1 currentDelay];
}

id objc_msgSend_currentEnvironment(void *a1, const char *a2, ...)
{
  return _[a1 currentEnvironment];
}

id objc_msgSend_currentFlags(void *a1, const char *a2, ...)
{
  return _[a1 currentFlags];
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _[a1 currentHandler];
}

id objc_msgSend_currentHistoryToken(void *a1, const char *a2, ...)
{
  return _[a1 currentHistoryToken];
}

id objc_msgSend_currentItemPointerModificationTime(void *a1, const char *a2, ...)
{
  return _[a1 currentItemPointerModificationTime];
}

id objc_msgSend_currentPublicID(void *a1, const char *a2, ...)
{
  return _[a1 currentPublicID];
}

id objc_msgSend_currentReachability(void *a1, const char *a2, ...)
{
  return _[a1 currentReachability];
}

id objc_msgSend_currentRequest(void *a1, const char *a2, ...)
{
  return _[a1 currentRequest];
}

id objc_msgSend_currentSequenceId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentSequenceId:");
}

id objc_msgSend_currentServerOptInFetch(void *a1, const char *a2, ...)
{
  return _[a1 currentServerOptInFetch];
}

id objc_msgSend_currentState(void *a1, const char *a2, ...)
{
  return _[a1 currentState];
}

id objc_msgSend_currentStates(void *a1, const char *a2, ...)
{
  return _[a1 currentStates];
}

id objc_msgSend_currentTarget(void *a1, const char *a2, ...)
{
  return _[a1 currentTarget];
}

id objc_msgSend_currentTreeEpochBeginDate(void *a1, const char *a2, ...)
{
  return _[a1 currentTreeEpochBeginDate];
}

id objc_msgSend_daemonContext(void *a1, const char *a2, ...)
{
  return _[a1 daemonContext];
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _[a1 data];
}

id objc_msgSend_dataFromHistoryToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataFromHistoryToken:");
}

id objc_msgSend_dataStore(void *a1, const char *a2, ...)
{
  return _[a1 dataStore];
}

id objc_msgSend_dataStoreController(void *a1, const char *a2, ...)
{
  return _[a1 dataStoreController];
}

id objc_msgSend_dataStoreFailedToLoad_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataStoreFailedToLoad:");
}

id objc_msgSend_dataTaskWithRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataTaskWithRequest:completionHandler:");
}

id objc_msgSend_dataType(void *a1, const char *a2, ...)
{
  return _[a1 dataType];
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_dataWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfURL:");
}

id objc_msgSend_dataWithContentsOfURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfURL:options:error:");
}

id objc_msgSend_dataWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithData:");
}

id objc_msgSend_dataWithJSONObject_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithJSONObject:options:error:");
}

id objc_msgSend_dataWithLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithLength:");
}

id objc_msgSend_databaseObject(void *a1, const char *a2, ...)
{
  return _[a1 databaseObject];
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _[a1 date];
}

id objc_msgSend_dateByAddingTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingTimeInterval:");
}

id objc_msgSend_dateFromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateFromString:");
}

id objc_msgSend_datePropertyForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "datePropertyForKey:");
}

id objc_msgSend_dateWithTimeInterval_sinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeInterval:sinceDate:");
}

id objc_msgSend_dateWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSince1970:");
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_db(void *a1, const char *a2, ...)
{
  return _[a1 db];
}

id objc_msgSend_debugDescription(void *a1, const char *a2, ...)
{
  return _[a1 debugDescription];
}

id objc_msgSend_decodeAndVerifyOptInOutResponse_optInOutState_optInOutTime_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeAndVerifyOptInOutResponse:optInOutState:optInOutTime:error:");
}

id objc_msgSend_decodeAndVerifySMT_optInOutState_optInOutTime_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeAndVerifySMT:optInOutState:optInOutTime:error:");
}

id objc_msgSend_decodeBoolForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeBoolForKey:");
}

id objc_msgSend_decodeDoubleForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeDoubleForKey:");
}

id objc_msgSend_decodeIntegerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeIntegerForKey:");
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_decodePublicKeyInfo_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodePublicKeyInfo:error:");
}

id objc_msgSend_decodeTopLevelObjectOfClasses_forKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeTopLevelObjectOfClasses:forKey:error:");
}

id objc_msgSend_deepCopyWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deepCopyWithZone:");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultManager];
}

id objc_msgSend_defaultNetworkTimeout(void *a1, const char *a2, ...)
{
  return _[a1 defaultNetworkTimeout];
}

id objc_msgSend_defaultQueryCacheTimeout(void *a1, const char *a2, ...)
{
  return _[a1 defaultQueryCacheTimeout];
}

id objc_msgSend_defaultSelfFollowupTicketLifetime(void *a1, const char *a2, ...)
{
  return _[a1 defaultSelfFollowupTicketLifetime];
}

id objc_msgSend_defaultSessionConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 defaultSessionConfiguration];
}

id objc_msgSend_defaultValue(void *a1, const char *a2, ...)
{
  return _[a1 defaultValue];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _[a1 delegate];
}

id objc_msgSend_delete_onMOC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "delete:onMOC:");
}

id objc_msgSend_deleteCompletedSingleQueryForUris_application_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteCompletedSingleQueryForUris:application:error:");
}

id objc_msgSend_deleteContact_contactExternalURI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteContact:contactExternalURI:");
}

id objc_msgSend_deleteDownloadId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteDownloadId:");
}

id objc_msgSend_deleteDownloadRecordById_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteDownloadRecordById:error:");
}

id objc_msgSend_deleteDownloadRecords_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteDownloadRecords:error:");
}

id objc_msgSend_deleteFile_inDirectory_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteFile:inDirectory:error:");
}

id objc_msgSend_deleteMarkedEntries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteMarkedEntries:");
}

id objc_msgSend_deleteNonRecentVerificationsForApplication_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteNonRecentVerificationsForApplication:error:");
}

id objc_msgSend_deleteObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteObject:");
}

id objc_msgSend_deleteObjectSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteObjectSet:");
}

id objc_msgSend_deleteOptInIntentForApplication_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteOptInIntentForApplication:error:");
}

id objc_msgSend_deleteSMT_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteSMT:error:");
}

id objc_msgSend_deleteSMTsWithSPKINotIn_application_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteSMTsWithSPKINotIn:application:error:");
}

id objc_msgSend_deleteSTHs_logBeginMsLessThan_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteSTHs:logBeginMsLessThan:error:");
}

id objc_msgSend_deleteServerRPCs_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteServerRPCs:error:");
}

id objc_msgSend_deleteStaticKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteStaticKey:error:");
}

id objc_msgSend_deleteStaticKeyByContactExternalURI_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteStaticKeyByContactExternalURI:error:");
}

id objc_msgSend_deleteStaticKeyByContactIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteStaticKeyByContactIdentifier:error:");
}

id objc_msgSend_deliveryQueue(void *a1, const char *a2, ...)
{
  return _[a1 deliveryQueue];
}

id objc_msgSend_dependOnBeforeGroupFinished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dependOnBeforeGroupFinished:");
}

id objc_msgSend_dependencies(void *a1, const char *a2, ...)
{
  return _[a1 dependencies];
}

id objc_msgSend_dependenciesDescriptionError(void *a1, const char *a2, ...)
{
  return _[a1 dependenciesDescriptionError];
}

id objc_msgSend_deps(void *a1, const char *a2, ...)
{
  return _[a1 deps];
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _[a1 description];
}

id objc_msgSend_descriptionError(void *a1, const char *a2, ...)
{
  return _[a1 descriptionError];
}

id objc_msgSend_descriptionErrorCode(void *a1, const char *a2, ...)
{
  return _[a1 descriptionErrorCode];
}

id objc_msgSend_descriptionInternal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionInternal:");
}

id objc_msgSend_descriptor(void *a1, const char *a2, ...)
{
  return _[a1 descriptor];
}

id objc_msgSend_deserializeLoggableDatas_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deserializeLoggableDatas:error:");
}

id objc_msgSend_deserializeNSError_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deserializeNSError:error:");
}

id objc_msgSend_deserializeServerLoggableDatas_loggableDatas_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deserializeServerLoggableDatas:loggableDatas:error:");
}

id objc_msgSend_deserializeSyncedLoggableDatas_loggableDatas_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deserializeSyncedLoggableDatas:loggableDatas:error:");
}

id objc_msgSend_destroyPersistentStoreAtURL_withType_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "destroyPersistentStoreAtURL:withType:options:error:");
}

id objc_msgSend_detectEpochChangeAndResetData_patLogBeginningMs_mapStillPopulating_dataStore_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "detectEpochChangeAndResetData:patLogBeginningMs:mapStillPopulating:dataStore:");
}

id objc_msgSend_detectResetForPAT_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "detectResetForPAT:");
}

id objc_msgSend_detectResetForTLT_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "detectResetForTLT:");
}

id objc_msgSend_deviceForDeviceIdHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceForDeviceIdHash:");
}

id objc_msgSend_deviceID(void *a1, const char *a2, ...)
{
  return _[a1 deviceID];
}

id objc_msgSend_deviceIDHash(void *a1, const char *a2, ...)
{
  return _[a1 deviceIDHash];
}

id objc_msgSend_deviceIdHash(void *a1, const char *a2, ...)
{
  return _[a1 deviceIdHash];
}

id objc_msgSend_deviceIdentityIssuerCert_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceIdentityIssuerCert:completionHandler:");
}

id objc_msgSend_deviceInformation(void *a1, const char *a2, ...)
{
  return _[a1 deviceInformation];
}

id objc_msgSend_deviceList(void *a1, const char *a2, ...)
{
  return _[a1 deviceList];
}

id objc_msgSend_deviceListWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceListWithContext:completion:");
}

id objc_msgSend_devicePlatform(void *a1, const char *a2, ...)
{
  return _[a1 devicePlatform];
}

id objc_msgSend_deviceToDeviceEncryptionAvailability(void *a1, const char *a2, ...)
{
  return _[a1 deviceToDeviceEncryptionAvailability];
}

id objc_msgSend_deviceUserAgent(void *a1, const char *a2, ...)
{
  return _[a1 deviceUserAgent];
}

id objc_msgSend_devices(void *a1, const char *a2, ...)
{
  return _[a1 devices];
}

id objc_msgSend_devicesArray(void *a1, const char *a2, ...)
{
  return _[a1 devicesArray];
}

id objc_msgSend_dew(void *a1, const char *a2, ...)
{
  return _[a1 dew];
}

id objc_msgSend_dewConfig(void *a1, const char *a2, ...)
{
  return _[a1 dewConfig];
}

id objc_msgSend_diagnosticError_depth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "diagnosticError:depth:");
}

id objc_msgSend_diagnosticsJsonDictionary(void *a1, const char *a2, ...)
{
  return _[a1 diagnosticsJsonDictionary];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _[a1 dictionary];
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_dictionaryWithContentsOfURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithContentsOfURL:error:");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObject:forKey:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_didChangeValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChangeValueForKey:");
}

id objc_msgSend_didUpdateStaticKeyStore_application_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUpdateStaticKeyStore:application:");
}

id objc_msgSend_digits(void *a1, const char *a2, ...)
{
  return _[a1 digits];
}

id objc_msgSend_directory(void *a1, const char *a2, ...)
{
  return _[a1 directory];
}

id objc_msgSend_directorySizeInKB_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "directorySizeInKB:");
}

id objc_msgSend_disableCacheHitsForUris_application_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableCacheHitsForUris:application:error:");
}

id objc_msgSend_disableKTSyncabledKVSStore(void *a1, const char *a2, ...)
{
  return _[a1 disableKTSyncabledKVSStore];
}

id objc_msgSend_diskStoreDictionary(void *a1, const char *a2, ...)
{
  return _[a1 diskStoreDictionary];
}

id objc_msgSend_dismissFailureAfterSeenPeriod(void *a1, const char *a2, ...)
{
  return _[a1 dismissFailureAfterSeenPeriod];
}

id objc_msgSend_dispatchToQueue_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchToQueue:block:");
}

id objc_msgSend_dnc(void *a1, const char *a2, ...)
{
  return _[a1 dnc];
}

id objc_msgSend_doFixupOperation(void *a1, const char *a2, ...)
{
  return _[a1 doFixupOperation];
}

id objc_msgSend_doKTResultWithAnalyticsForEventName_error_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doKTResultWithAnalyticsForEventName:error:block:");
}

id objc_msgSend_doKTResultWithAnalyticsForEventName_validateType_error_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doKTResultWithAnalyticsForEventName:validateType:error:block:");
}

id objc_msgSend_doSimpleStateMachineRPC_op_sourceStates_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doSimpleStateMachineRPC:op:sourceStates:reply:");
}

id objc_msgSend_doWatchedStateMachineRPC_sourceStates_path_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doWatchedStateMachineRPC:sourceStates:path:reply:");
}

id objc_msgSend_doWatchedStateMachineRPC_sourceStates_path_transitionOp_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doWatchedStateMachineRPC:sourceStates:path:transitionOp:reply:");
}

id objc_msgSend_doWithAnalyticsForEventName_error_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doWithAnalyticsForEventName:error:block:");
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _[a1 domain];
}

id objc_msgSend_doubleAtColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleAtColumn:");
}

id objc_msgSend_doubleForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleForKey:");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_downloadConsistencyProofRequest_lastVerifiedRevision_application_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadConsistencyProofRequest:lastVerifiedRevision:application:error:");
}

id objc_msgSend_downloadId(void *a1, const char *a2, ...)
{
  return _[a1 downloadId];
}

id objc_msgSend_downloadInclusionProofChunk_application_downloadType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadInclusionProofChunk:application:downloadType:error:");
}

id objc_msgSend_downloadInclusionProofsForRevisions_application_downloadType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadInclusionProofsForRevisions:application:downloadType:error:");
}

id objc_msgSend_downloadType(void *a1, const char *a2, ...)
{
  return _[a1 downloadType];
}

id objc_msgSend_drainContactsSyncing(void *a1, const char *a2, ...)
{
  return _[a1 drainContactsSyncing];
}

id objc_msgSend_drainDataStore(void *a1, const char *a2, ...)
{
  return _[a1 drainDataStore];
}

id objc_msgSend_dsid(void *a1, const char *a2, ...)
{
  return _[a1 dsid];
}

id objc_msgSend_dumpFlags(void *a1, const char *a2, ...)
{
  return _[a1 dumpFlags];
}

id objc_msgSend_dumpPendingFlags(void *a1, const char *a2, ...)
{
  return _[a1 dumpPendingFlags];
}

id objc_msgSend_earlierDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "earlierDate:");
}

id objc_msgSend_earliestAddedDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "earliestAddedDate:");
}

id objc_msgSend_earliestCurrentTreeVersionWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "earliestCurrentTreeVersionWithError:");
}

id objc_msgSend_earliestNextTreeVersionWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "earliestNextTreeVersionWithError:");
}

id objc_msgSend_eligibilityContainerPathAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eligibilityContainerPathAndReturnError:");
}

id objc_msgSend_eligibilityQueue(void *a1, const char *a2, ...)
{
  return _[a1 eligibilityQueue];
}

id objc_msgSend_eligibilityStatusReporter(void *a1, const char *a2, ...)
{
  return _[a1 eligibilityStatusReporter];
}

id objc_msgSend_eligibilitySupport(void *a1, const char *a2, ...)
{
  return _[a1 eligibilitySupport];
}

id objc_msgSend_eligibleForOptIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eligibleForOptIn:");
}

id objc_msgSend_emailAddresses(void *a1, const char *a2, ...)
{
  return _[a1 emailAddresses];
}

id objc_msgSend_emptyAtDepth_leafIndex_treeId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emptyAtDepth:leafIndex:treeId:");
}

id objc_msgSend_enablePinning(void *a1, const char *a2, ...)
{
  return _[a1 enablePinning];
}

id objc_msgSend_enableSelfValidationXPCActivity(void *a1, const char *a2, ...)
{
  return _[a1 enableSelfValidationXPCActivity];
}

id objc_msgSend_encodeBool_buffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeBool:buffer:");
}

id objc_msgSend_encodeBool_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeBool:forKey:");
}

id objc_msgSend_encodeByte_buffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeByte:buffer:");
}

id objc_msgSend_encodeByteArray_minLength_maxLength_buffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeByteArray:minLength:maxLength:buffer:");
}

id objc_msgSend_encodeDouble_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeDouble:forKey:");
}

id objc_msgSend_encodeExtensions_buffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeExtensions:buffer:");
}

id objc_msgSend_encodeHashValue_buffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeHashValue:buffer:");
}

id objc_msgSend_encodeInteger_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInteger:forKey:");
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_encodeUint64_buffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeUint64:buffer:");
}

id objc_msgSend_encodeVRFOutput_buffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeVRFOutput:buffer:");
}

id objc_msgSend_encodedData(void *a1, const char *a2, ...)
{
  return _[a1 encodedData];
}

id objc_msgSend_encodedError(void *a1, const char *a2, ...)
{
  return _[a1 encodedError];
}

id objc_msgSend_endSlh(void *a1, const char *a2, ...)
{
  return _[a1 endSlh];
}

id objc_msgSend_enforceCKOptInRecords(void *a1, const char *a2, ...)
{
  return _[a1 enforceCKOptInRecords];
}

id objc_msgSend_enrollementLoggingKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enrollementLoggingKeys:");
}

id objc_msgSend_ensureContactFieldsPresent_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ensureContactFieldsPresent:error:");
}

id objc_msgSend_entities(void *a1, const char *a2, ...)
{
  return _[a1 entities];
}

id objc_msgSend_entity(void *a1, const char *a2, ...)
{
  return _[a1 entity];
}

id objc_msgSend_entityName(void *a1, const char *a2, ...)
{
  return _[a1 entityName];
}

id objc_msgSend_entryPosition(void *a1, const char *a2, ...)
{
  return _[a1 entryPosition];
}

id objc_msgSend_enumDescriptor(void *a1, const char *a2, ...)
{
  return _[a1 enumDescriptor];
}

id objc_msgSend_enumVerifier(void *a1, const char *a2, ...)
{
  return _[a1 enumVerifier];
}

id objc_msgSend_enumerateColumnsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateColumnsUsingBlock:");
}

id objc_msgSend_enumerateContactsWithFetchRequest_error_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateContactsWithFetchRequest:error:usingBlock:");
}

id objc_msgSend_enumerateForTextFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateForTextFormat:");
}

id objc_msgSend_enumerateKeysAndBoolsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndBoolsUsingBlock:");
}

id objc_msgSend_enumerateKeysAndDoublesUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndDoublesUsingBlock:");
}

id objc_msgSend_enumerateKeysAndFloatsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndFloatsUsingBlock:");
}

id objc_msgSend_enumerateKeysAndInt32sUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndInt32sUsingBlock:");
}

id objc_msgSend_enumerateKeysAndInt64sUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndInt64sUsingBlock:");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateKeysAndRawValuesUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndRawValuesUsingBlock:");
}

id objc_msgSend_enumerateKeysAndUInt32sUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndUInt32sUsingBlock:");
}

id objc_msgSend_enumerateKeysAndUInt64sUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndUInt64sUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumerateRawValuesWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateRawValuesWithBlock:");
}

id objc_msgSend_enumerateValuesWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateValuesWithBlock:");
}

id objc_msgSend_enumeratorForChangeHistoryFetchRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratorForChangeHistoryFetchRequest:error:");
}

id objc_msgSend_environment(void *a1, const char *a2, ...)
{
  return _[a1 environment];
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return _[a1 error];
}

id objc_msgSend_errorCode(void *a1, const char *a2, ...)
{
  return _[a1 errorCode];
}

id objc_msgSend_errorDomain(void *a1, const char *a2, ...)
{
  return _[a1 errorDomain];
}

id objc_msgSend_errorFromData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorFromData:");
}

id objc_msgSend_errorFromJson_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorFromJson:");
}

id objc_msgSend_errorState(void *a1, const char *a2, ...)
{
  return _[a1 errorState];
}

id objc_msgSend_errorWithDomain_code_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:description:");
}

id objc_msgSend_errorWithDomain_code_description_underlying_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:description:underlying:");
}

id objc_msgSend_errorWithDomain_code_errorLevel_underlyingError_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:errorLevel:underlyingError:description:");
}

id objc_msgSend_errorWithDomain_code_errorLevel_underlyingError_userinfo_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:errorLevel:underlyingError:userinfo:description:");
}

id objc_msgSend_errorWithDomain_code_underlyingError_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:underlyingError:description:");
}

id objc_msgSend_errorWithDomain_code_underlyingError_userinfo_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:underlyingError:userinfo:description:");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_errorWithDomain_code_userInfo_description_underlying_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:description:underlying:");
}

id objc_msgSend_errorWithError_underlyingError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithError:underlyingError:");
}

id objc_msgSend_errors(void *a1, const char *a2, ...)
{
  return _[a1 errors];
}

id objc_msgSend_errorsForFailedEvents_dataStore_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorsForFailedEvents:dataStore:completionBlock:");
}

id objc_msgSend_escrowExpiry(void *a1, const char *a2, ...)
{
  return _[a1 escrowExpiry];
}

id objc_msgSend_escrowExpiryMs(void *a1, const char *a2, ...)
{
  return _[a1 escrowExpiryMs];
}

id objc_msgSend_evalCurrentOptInState_optInStateError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "evalCurrentOptInState:optInStateError:");
}

id objc_msgSend_evaluateCloudDataWithApplication_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "evaluateCloudDataWithApplication:error:");
}

id objc_msgSend_evaluateKTLogData_application_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "evaluateKTLogData:application:error:");
}

id objc_msgSend_evaluateWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "evaluateWithObject:");
}

id objc_msgSend_eventId(void *a1, const char *a2, ...)
{
  return _[a1 eventId];
}

id objc_msgSend_eventsByTime(void *a1, const char *a2, ...)
{
  return _[a1 eventsByTime];
}

id objc_msgSend_everCompletedVerification(void *a1, const char *a2, ...)
{
  return _[a1 everCompletedVerification];
}

id objc_msgSend_everOptIn(void *a1, const char *a2, ...)
{
  return _[a1 everOptIn];
}

id objc_msgSend_everOptedIn(void *a1, const char *a2, ...)
{
  return _[a1 everOptedIn];
}

id objc_msgSend_exceptionWithName_reason_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exceptionWithName:reason:userInfo:");
}

id objc_msgSend_execute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "execute:");
}

id objc_msgSend_executeFetchRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeFetchRequest:error:");
}

id objc_msgSend_executeRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeRequest:error:");
}

id objc_msgSend_executeSQL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeSQL:");
}

id objc_msgSend_executeSQL_arguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeSQL:arguments:");
}

id objc_msgSend_existingObjectWithID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingObjectWithID:error:");
}

id objc_msgSend_expectedFailure(void *a1, const char *a2, ...)
{
  return _[a1 expectedFailure];
}

id objc_msgSend_expectedSelfResolutionDate_requestDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expectedSelfResolutionDate:requestDate:");
}

id objc_msgSend_expirationTime(void *a1, const char *a2, ...)
{
  return _[a1 expirationTime];
}

id objc_msgSend_expired_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expired:");
}

id objc_msgSend_expiry(void *a1, const char *a2, ...)
{
  return _[a1 expiry];
}

id objc_msgSend_expiryMs(void *a1, const char *a2, ...)
{
  return _[a1 expiryMs];
}

id objc_msgSend_exportToCloud(void *a1, const char *a2, ...)
{
  return _[a1 exportToCloud];
}

id objc_msgSend_extensionData(void *a1, const char *a2, ...)
{
  return _[a1 extensionData];
}

id objc_msgSend_extensionForDescriptor_fieldNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extensionForDescriptor:fieldNumber:");
}

id objc_msgSend_extensionRanges(void *a1, const char *a2, ...)
{
  return _[a1 extensionRanges];
}

id objc_msgSend_extensionRangesCount(void *a1, const char *a2, ...)
{
  return _[a1 extensionRangesCount];
}

id objc_msgSend_extensionRegistry(void *a1, const char *a2, ...)
{
  return _[a1 extensionRegistry];
}

id objc_msgSend_extensionType(void *a1, const char *a2, ...)
{
  return _[a1 extensionType];
}

id objc_msgSend_extensions(void *a1, const char *a2, ...)
{
  return _[a1 extensions];
}

id objc_msgSend_extensionsCurrentlySet(void *a1, const char *a2, ...)
{
  return _[a1 extensionsCurrentlySet];
}

id objc_msgSend_externalURI(void *a1, const char *a2, ...)
{
  return _[a1 externalURI];
}

id objc_msgSend_failExpiredRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failExpiredRequest:error:");
}

id objc_msgSend_failExpiredSTHsForType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failExpiredSTHsForType:error:");
}

id objc_msgSend_failHeadDownload_application_failure_retry_logClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failHeadDownload:application:failure:retry:logClient:");
}

id objc_msgSend_failHeadDownload_failure_logClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failHeadDownload:failure:logClient:");
}

id objc_msgSend_failHeadDownloadRecord_failure_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failHeadDownloadRecord:failure:error:");
}

id objc_msgSend_failRpcId_failure_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failRpcId:failure:error:");
}

id objc_msgSend_failSMTsIfOverMMD_proof_underlyingError_errorCode_analyticsData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failSMTsIfOverMMD:proof:underlyingError:errorCode:analyticsData:");
}

id objc_msgSend_failSMTsIfOverMMD_skipOptInOut_proof_underlyingError_errorCode_analyticsData_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failSMTsIfOverMMD:skipOptInOut:proof:underlyingError:errorCode:analyticsData:");
}

id objc_msgSend_failStates(void *a1, const char *a2, ...)
{
  return _[a1 failStates];
}

id objc_msgSend_failedHeadSignaturesWithRevisions_application_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failedHeadSignaturesWithRevisions:application:");
}

id objc_msgSend_failedRecordsForSyncedLoggableDatas_accountKey_cloudDevices_requestDate_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failedRecordsForSyncedLoggableDatas:accountKey:cloudDevices:requestDate:error:");
}

id objc_msgSend_failedRevs(void *a1, const char *a2, ...)
{
  return _[a1 failedRevs];
}

id objc_msgSend_failedSMHs(void *a1, const char *a2, ...)
{
  return _[a1 failedSMHs];
}

id objc_msgSend_failedServerLoggableDatas_accountKey_idsResponseTime_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failedServerLoggableDatas:accountKey:idsResponseTime:error:");
}

id objc_msgSend_failedSigs(void *a1, const char *a2, ...)
{
  return _[a1 failedSigs];
}

id objc_msgSend_failure(void *a1, const char *a2, ...)
{
  return _[a1 failure];
}

id objc_msgSend_failureEvent(void *a1, const char *a2, ...)
{
  return _[a1 failureEvent];
}

id objc_msgSend_failureIgnorePeriod(void *a1, const char *a2, ...)
{
  return _[a1 failureIgnorePeriod];
}

id objc_msgSend_failureResult_loggableData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failureResult:loggableData:");
}

id objc_msgSend_failures(void *a1, const char *a2, ...)
{
  return _[a1 failures];
}

id objc_msgSend_fastWatchdogExit(void *a1, const char *a2, ...)
{
  return _[a1 fastWatchdogExit];
}

id objc_msgSend_fetch_allowEmptyData_useReversePush_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetch:allowEmptyData:useReversePush:completionHandler:");
}

id objc_msgSend_fetch_shouldRetry_allowEmptyData_useReversePush_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetch:shouldRetry:allowEmptyData:useReversePush:completionHandler:");
}

id objc_msgSend_fetchAccountsRetryingWithTimeout_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAccountsRetryingWithTimeout:error:");
}

id objc_msgSend_fetchAndStoreContactsSyncTokenWithConfigStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAndStoreContactsSyncTokenWithConfigStore:");
}

id objc_msgSend_fetchAndValidateEnrollKTRequest_transparentData_loggableDatas_cloudOptIn_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAndValidateEnrollKTRequest:transparentData:loggableDatas:cloudOptIn:error:");
}

id objc_msgSend_fetchAndValidatePeerKTRequest_fetchNow_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAndValidatePeerKTRequest:fetchNow:completionHandler:");
}

id objc_msgSend_fetchBatchQueries_userInitiated_responseHandler_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchBatchQueries:userInitiated:responseHandler:completionHandler:");
}

id objc_msgSend_fetchBatchQuery_uuid_userInitiated_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchBatchQuery:uuid:userInitiated:completionHandler:");
}

id objc_msgSend_fetchBatchQueryDiagnostics_application_userInitiated_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchBatchQueryDiagnostics:application:userInitiated:completionHandler:");
}

id objc_msgSend_fetchCKAccountStatusScheduler(void *a1, const char *a2, ...)
{
  return _[a1 fetchCKAccountStatusScheduler];
}

id objc_msgSend_fetchCacheOnly_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchCacheOnly:completion:");
}

id objc_msgSend_fetchCliqueStatus_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchCliqueStatus:error:");
}

id objc_msgSend_fetchCloudData_updateField_complete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchCloudData:updateField:complete:");
}

id objc_msgSend_fetchCloudKit(void *a1, const char *a2, ...)
{
  return _[a1 fetchCloudKit];
}

id objc_msgSend_fetchCloudStorage(void *a1, const char *a2, ...)
{
  return _[a1 fetchCloudStorage];
}

id objc_msgSend_fetchConfigBag_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchConfigBag:completionHandler:");
}

id objc_msgSend_fetchConsistencyProof_uuid_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchConsistencyProof:uuid:completionHandler:");
}

id objc_msgSend_fetchContactsSyncToken(void *a1, const char *a2, ...)
{
  return _[a1 fetchContactsSyncToken];
}

id objc_msgSend_fetchCount(void *a1, const char *a2, ...)
{
  return _[a1 fetchCount];
}

id objc_msgSend_fetchDeviceSignature_complete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDeviceSignature:complete:");
}

id objc_msgSend_fetchDownloadRecord_application_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDownloadRecord:application:error:");
}

id objc_msgSend_fetchDownloadRecordById_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDownloadRecordById:error:");
}

id objc_msgSend_fetchFetchRecordById_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchFetchRecordById:error:");
}

id objc_msgSend_fetchGroup(void *a1, const char *a2, ...)
{
  return _[a1 fetchGroup];
}

id objc_msgSend_fetchHandles_moc_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchHandles:moc:error:");
}

id objc_msgSend_fetchHistoryAfterToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchHistoryAfterToken:");
}

id objc_msgSend_fetchIDMSDeviceList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchIDMSDeviceList:");
}

id objc_msgSend_fetchId(void *a1, const char *a2, ...)
{
  return _[a1 fetchId];
}

id objc_msgSend_fetchKTInfoForApplication_uri_complete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchKTInfoForApplication:uri:complete:");
}

id objc_msgSend_fetchKTRegistrationStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchKTRegistrationStatus:");
}

id objc_msgSend_fetchKTRegistrationStatusWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchKTRegistrationStatusWithCompletion:");
}

id objc_msgSend_fetchKeyStore_application_contextStore_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchKeyStore:application:contextStore:completionHandler:");
}

id objc_msgSend_fetchMessage_uri_uuid_application_userInitiated_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchMessage:uri:uuid:application:userInitiated:completionHandler:");
}

id objc_msgSend_fetchNumericPropertyOnMostRecentMapHead_logBeginMs_propertyName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchNumericPropertyOnMostRecentMapHead:logBeginMs:propertyName:error:");
}

id objc_msgSend_fetchOrCreateVerification_application_verificationInfo_fetchNow_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchOrCreateVerification:application:verificationInfo:fetchNow:error:");
}

id objc_msgSend_fetchPeer_application_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchPeer:application:error:");
}

id objc_msgSend_fetchPeerHandles_application_complete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchPeerHandles:application:complete:");
}

id objc_msgSend_fetchPeerVerificationInfos_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchPeerVerificationInfos:completionBlock:");
}

id objc_msgSend_fetchPublicKeys_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchPublicKeys:completionHandler:");
}

id objc_msgSend_fetchQuery_uuid_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchQuery:uuid:completionHandler:");
}

id objc_msgSend_fetchQuery_uuid_userInitiated_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchQuery:uuid:userInitiated:completionHandler:");
}

id objc_msgSend_fetchQueryForKTRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchQueryForKTRequest:completionHandler:");
}

id objc_msgSend_fetchQueryForKTRequest_userInitiated_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchQueryForKTRequest:userInitiated:completionHandler:");
}

id objc_msgSend_fetchQueue(void *a1, const char *a2, ...)
{
  return _[a1 fetchQueue];
}

id objc_msgSend_fetchRPCSingleQuery_userInitiated_cachedYoungerThan_backgroundOpId_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRPCSingleQuery:userInitiated:cachedYoungerThan:backgroundOpId:completionHandler:");
}

id objc_msgSend_fetchRequest(void *a1, const char *a2, ...)
{
  return _[a1 fetchRequest];
}

id objc_msgSend_fetchRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRequest:completionHandler:");
}

id objc_msgSend_fetchRequestForUUID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRequestForUUID:error:");
}

id objc_msgSend_fetchRequestWithEntityName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRequestWithEntityName:");
}

id objc_msgSend_fetchRequestWithUri_application_accountKey_loggableDatas_youngerThan_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRequestWithUri:application:accountKey:loggableDatas:youngerThan:error:");
}

id objc_msgSend_fetchRevisionLogInclusionProof_uuid_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRevisionLogInclusionProof:uuid:completionHandler:");
}

id objc_msgSend_fetchSelfValidationState_uri_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchSelfValidationState:uri:error:");
}

id objc_msgSend_fetchSelfVerificationInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchSelfVerificationInfo:");
}

id objc_msgSend_fetchSelfVerificationInfo_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchSelfVerificationInfo:completionBlock:");
}

id objc_msgSend_fetchSelfVerificationInfoForApplication_complete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchSelfVerificationInfoForApplication:complete:");
}

id objc_msgSend_fetchServerRpcById_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchServerRpcById:error:");
}

id objc_msgSend_fetchSettings_force_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchSettings:force:");
}

id objc_msgSend_fetchSyncedLoggableDataByDeviceIdHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchSyncedLoggableDataByDeviceIdHash:");
}

id objc_msgSend_fetchSyncedLoggableDataByPushToken_registrationData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchSyncedLoggableDataByPushToken:registrationData:");
}

id objc_msgSend_fetchTreeHead_isMapHead_application_logBeginTime_logType_revision_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchTreeHead:isMapHead:application:logBeginTime:logType:revision:error:");
}

id objc_msgSend_fetchTreeHeadsWithoutHash_isMapHead_application_logBeginTime_logType_revision_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchTreeHeadsWithoutHash:isMapHead:application:logBeginTime:logType:revision:error:");
}

id objc_msgSend_fieldNumber(void *a1, const char *a2, ...)
{
  return _[a1 fieldNumber];
}

id objc_msgSend_fieldType(void *a1, const char *a2, ...)
{
  return _[a1 fieldType];
}

id objc_msgSend_fieldWithNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fieldWithNumber:");
}

id objc_msgSend_file(void *a1, const char *a2, ...)
{
  return _[a1 file];
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 fileSystemRepresentation];
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:");
}

id objc_msgSend_fillBackgroundStatus(void *a1, const char *a2, ...)
{
  return _[a1 fillBackgroundStatus];
}

id objc_msgSend_fillInError(void *a1, const char *a2, ...)
{
  return _[a1 fillInError];
}

id objc_msgSend_fillOptInState(void *a1, const char *a2, ...)
{
  return _[a1 fillOptInState];
}

id objc_msgSend_fillSelfStatus(void *a1, const char *a2, ...)
{
  return _[a1 fillSelfStatus];
}

id objc_msgSend_fillStatus(void *a1, const char *a2, ...)
{
  return _[a1 fillStatus];
}

id objc_msgSend_fillSystemStatus(void *a1, const char *a2, ...)
{
  return _[a1 fillSystemStatus];
}

id objc_msgSend_filterLoggableDatas_clientDataHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filterLoggableDatas:clientDataHash:");
}

id objc_msgSend_filterLoggableDatas_deviceIdHash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filterLoggableDatas:deviceIdHash:");
}

id objc_msgSend_findStaticKeyByContact_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findStaticKeyByContact:error:");
}

id objc_msgSend_findStaticKeyByContactExternalURI_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findStaticKeyByContactExternalURI:error:");
}

id objc_msgSend_findStaticKeyByContactIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findStaticKeyByContactIdentifier:error:");
}

id objc_msgSend_findStaticKeyByHandle_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findStaticKeyByHandle:error:");
}

id objc_msgSend_findStaticKeyByKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findStaticKeyByKey:error:");
}

id objc_msgSend_findStaticKeyStoreMappingByKey_complete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findStaticKeyStoreMappingByKey:complete:");
}

id objc_msgSend_finishDate(void *a1, const char *a2, ...)
{
  return _[a1 finishDate];
}

id objc_msgSend_finishOperation(void *a1, const char *a2, ...)
{
  return _[a1 finishOperation];
}

id objc_msgSend_finishedInitialDispatches(void *a1, const char *a2, ...)
{
  return _[a1 finishedInitialDispatches];
}

id objc_msgSend_finishedOp(void *a1, const char *a2, ...)
{
  return _[a1 finishedOp];
}

id objc_msgSend_finishingBlock(void *a1, const char *a2, ...)
{
  return _[a1 finishingBlock];
}

id objc_msgSend_fireTime(void *a1, const char *a2, ...)
{
  return _[a1 fireTime];
}

id objc_msgSend_firstCKAccountFetch(void *a1, const char *a2, ...)
{
  return _[a1 firstCKAccountFetch];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_fixed32List(void *a1, const char *a2, ...)
{
  return _[a1 fixed32List];
}

id objc_msgSend_fixed64List(void *a1, const char *a2, ...)
{
  return _[a1 fixed64List];
}

id objc_msgSend_fixupName(void *a1, const char *a2, ...)
{
  return _[a1 fixupName];
}

id objc_msgSend_flag(void *a1, const char *a2, ...)
{
  return _[a1 flag];
}

id objc_msgSend_flagConditions(void *a1, const char *a2, ...)
{
  return _[a1 flagConditions];
}

id objc_msgSend_flagHandler(void *a1, const char *a2, ...)
{
  return _[a1 flagHandler];
}

id objc_msgSend_flags(void *a1, const char *a2, ...)
{
  return _[a1 flags];
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _[a1 floatValue];
}

id objc_msgSend_flush(void *a1, const char *a2, ...)
{
  return _[a1 flush];
}

id objc_msgSend_followStates(void *a1, const char *a2, ...)
{
  return _[a1 followStates];
}

id objc_msgSend_followUp(void *a1, const char *a2, ...)
{
  return _[a1 followUp];
}

id objc_msgSend_followup(void *a1, const char *a2, ...)
{
  return _[a1 followup];
}

id objc_msgSend_followupTicket(void *a1, const char *a2, ...)
{
  return _[a1 followupTicket];
}

id objc_msgSend_forceRefresh(void *a1, const char *a2, ...)
{
  return _[a1 forceRefresh];
}

id objc_msgSend_forceReload(void *a1, const char *a2, ...)
{
  return _[a1 forceReload];
}

id objc_msgSend_forceSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceSync:");
}

id objc_msgSend_forceUpdate(void *a1, const char *a2, ...)
{
  return _[a1 forceUpdate];
}

id objc_msgSend_forceValidateUUID_uri_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceValidateUUID:uri:completionBlock:");
}

id objc_msgSend_forcedConfigure_logClient_applicationHandler_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forcedConfigure:logClient:applicationHandler:completionHandler:");
}

id objc_msgSend_foregroundSession(void *a1, const char *a2, ...)
{
  return _[a1 foregroundSession];
}

id objc_msgSend_formatEventName_application_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "formatEventName:application:");
}

id objc_msgSend_formatEventName_application_state_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "formatEventName:application:state:");
}

id objc_msgSend_forwards(void *a1, const char *a2, ...)
{
  return _[a1 forwards];
}

id objc_msgSend_fulfill(void *a1, const char *a2, ...)
{
  return _[a1 fulfill];
}

id objc_msgSend_fullName(void *a1, const char *a2, ...)
{
  return _[a1 fullName];
}

id objc_msgSend_futureBlock(void *a1, const char *a2, ...)
{
  return _[a1 futureBlock];
}

id objc_msgSend_fuzzyInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fuzzyInteger:");
}

id objc_msgSend_fuzzyNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fuzzyNumber:");
}

id objc_msgSend_fuzzyTimeSinceDateKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fuzzyTimeSinceDateKey:");
}

id objc_msgSend_fuzzyTimeSinceLastSuccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fuzzyTimeSinceLastSuccess:");
}

id objc_msgSend_garbageCollectEntity_predicate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "garbageCollectEntity:predicate:error:");
}

id objc_msgSend_garbageCollectHeads_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "garbageCollectHeads:error:");
}

id objc_msgSend_garbageCollectRequests_olderThan_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "garbageCollectRequests:olderThan:error:");
}

id objc_msgSend_garbageCollectSMHs_logBeginMs_olderThanRevision_olderThanDate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "garbageCollectSMHs:logBeginMs:olderThanRevision:olderThanDate:error:");
}

id objc_msgSend_garbageCollectSMTs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "garbageCollectSMTs:");
}

id objc_msgSend_garbageCollectSTHs_logBeginMs_olderThanDate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "garbageCollectSTHs:logBeginMs:olderThanDate:error:");
}

id objc_msgSend_garbageCollectServerRPCs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "garbageCollectServerRPCs:");
}

id objc_msgSend_garbageCollectVerifications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "garbageCollectVerifications:");
}

id objc_msgSend_generateDone(void *a1, const char *a2, ...)
{
  return _[a1 generateDone];
}

id objc_msgSend_generateError_method_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateError:method:");
}

id objc_msgSend_getAggregateOptInState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAggregateOptInState:");
}

id objc_msgSend_getAggregateOptInStateForApplication_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAggregateOptInStateForApplication:error:");
}

id objc_msgSend_getAggregateResult_element_complete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAggregateResult:element:complete:");
}

id objc_msgSend_getAllOptInStates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAllOptInStates:");
}

id objc_msgSend_getAllOptInStatesAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAllOptInStatesAndReturnError:");
}

id objc_msgSend_getBAAValidity(void *a1, const char *a2, ...)
{
  return _[a1 getBAAValidity];
}

id objc_msgSend_getBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBool:");
}

id objc_msgSend_getBool_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBool:defaultValue:");
}

id objc_msgSend_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:");
}

id objc_msgSend_getCachedOctagonStatus(void *a1, const char *a2, ...)
{
  return _[a1 getCachedOctagonStatus];
}

id objc_msgSend_getCachedValidatePeerResults_application_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCachedValidatePeerResults:application:");
}

id objc_msgSend_getConfigBagEnvironment(void *a1, const char *a2, ...)
{
  return _[a1 getConfigBagEnvironment];
}

id objc_msgSend_getCurrentKTPCSIdentity_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCurrentKTPCSIdentity:error:");
}

id objc_msgSend_getCurrentOptInEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCurrentOptInEntry:");
}

id objc_msgSend_getDeviceCertWithForcedFetch_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getDeviceCertWithForcedFetch:completionHandler:");
}

id objc_msgSend_getEnumTextFormatNameForIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getEnumTextFormatNameForIndex:");
}

id objc_msgSend_getEnvironment(void *a1, const char *a2, ...)
{
  return _[a1 getEnvironment];
}

id objc_msgSend_getExistingExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getExistingExtension:");
}

id objc_msgSend_getExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getExtension:");
}

id objc_msgSend_getKeyTransparencyOptInEligiblityForApplication_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getKeyTransparencyOptInEligiblityForApplication:withCompletion:");
}

id objc_msgSend_getLastRebootTime(void *a1, const char *a2, ...)
{
  return _[a1 getLastRebootTime];
}

id objc_msgSend_getLatestSuccessfulSingleQueryForUri_application_requestYoungerThan_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getLatestSuccessfulSingleQueryForUri:application:requestYoungerThan:error:");
}

id objc_msgSend_getLogDataForAccountKey_uri_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getLogDataForAccountKey:uri:");
}

id objc_msgSend_getOptIn(void *a1, const char *a2, ...)
{
  return _[a1 getOptIn];
}

id objc_msgSend_getOptInForURI_application_complete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getOptInForURI:application:complete:");
}

id objc_msgSend_getOptInHistory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getOptInHistory:");
}

id objc_msgSend_getOptInHistory_store_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getOptInHistory:store:error:");
}

id objc_msgSend_getOptInHistoryDiagnostic_store_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getOptInHistoryDiagnostic:store:");
}

id objc_msgSend_getOptInOutWithExt(void *a1, const char *a2, ...)
{
  return _[a1 getOptInOutWithExt];
}

id objc_msgSend_getOptInState_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getOptInState:completionBlock:");
}

id objc_msgSend_getOptInStateForAccount_complete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getOptInStateForAccount:complete:");
}

id objc_msgSend_getOptInStateForApplication_complete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getOptInStateForApplication:complete:");
}

id objc_msgSend_getOptInStateWithUri_application_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getOptInStateWithUri:application:error:");
}

id objc_msgSend_getOverride_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getOverride:");
}

id objc_msgSend_getPCSIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPCSIdentity:");
}

id objc_msgSend_getPendingSmtUris_fetchLimit_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPendingSmtUris:fetchLimit:error:");
}

id objc_msgSend_getQueryRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getQueryRequest:");
}

id objc_msgSend_getQueryResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getQueryResponse:");
}

id objc_msgSend_getResourceValue_forKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getResourceValue:forKey:error:");
}

id objc_msgSend_getReturnValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getReturnValue:");
}

id objc_msgSend_getSettings(void *a1, const char *a2, ...)
{
  return _[a1 getSettings];
}

id objc_msgSend_getSettingsData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSettingsData:");
}

id objc_msgSend_getSettingsDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSettingsDate:");
}

id objc_msgSend_getSettingsNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSettingsNumber:");
}

id objc_msgSend_getSimpleMutationType(void *a1, const char *a2, ...)
{
  return _[a1 getSimpleMutationType];
}

id objc_msgSend_getStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStatus:");
}

id objc_msgSend_getUIStatusForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getUIStatusForDate:");
}

id objc_msgSend_getUUIDBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getUUIDBytes:");
}

id objc_msgSend_getUnsigned_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getUnsigned:");
}

id objc_msgSend_globalSettings(void *a1, const char *a2, ...)
{
  return _[a1 globalSettings];
}

id objc_msgSend_globalTracker(void *a1, const char *a2, ...)
{
  return _[a1 globalTracker];
}

id objc_msgSend_gossip(void *a1, const char *a2, ...)
{
  return _[a1 gossip];
}

id objc_msgSend_groupList(void *a1, const char *a2, ...)
{
  return _[a1 groupList];
}

id objc_msgSend_groupStart(void *a1, const char *a2, ...)
{
  return _[a1 groupStart];
}

id objc_msgSend_haltOperation(void *a1, const char *a2, ...)
{
  return _[a1 haltOperation];
}

id objc_msgSend_haltStateMachine(void *a1, const char *a2, ...)
{
  return _[a1 haltStateMachine];
}

id objc_msgSend_halted(void *a1, const char *a2, ...)
{
  return _[a1 halted];
}

id objc_msgSend_handleBatchQueryResponse_queryRequest_receiptDate_fetchId_application_logClient_transparentDataHandler_completionHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "handleBatchQueryResponse:queryRequest:receiptDate:fetchId:application:logClient:transparentDataHandler:completionHandler:");
}

id objc_msgSend_handleBatchQueryResponse_queryRequest_receiptDate_fetchId_error_queryInfoHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleBatchQueryResponse:queryRequest:receiptDate:fetchId:error:queryInfoHandler:");
}

id objc_msgSend_handleBatchQueryResponse_queryRequest_receiptDate_fetchId_error_transparentDataHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleBatchQueryResponse:queryRequest:receiptDate:fetchId:error:transparentDataHandler:");
}

id objc_msgSend_handleDownloadRecord_downloadData_downloadMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleDownloadRecord:downloadData:downloadMetadata:");
}

id objc_msgSend_handleDownloadRecordFailure_task_downloadMetadata_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleDownloadRecordFailure:task:downloadMetadata:error:");
}

id objc_msgSend_handleExternalRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleExternalRequest:");
}

id objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInMethod:object:file:lineNumber:description:");
}

id objc_msgSend_handleFlag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFlag:");
}

id objc_msgSend_handleInsertResponse_uri_fetchId_error_transparentDataHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleInsertResponse:uri:fetchId:error:transparentDataHandler:");
}

id objc_msgSend_handleKTRequest_queryRequest_queryResponse_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleKTRequest:queryRequest:queryResponse:completionHandler:");
}

id objc_msgSend_handleKTRequestDownload_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleKTRequestDownload:context:");
}

id objc_msgSend_handleOperationResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleOperationResults:");
}

id objc_msgSend_handlePeerStateChange_application_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handlePeerStateChange:application:");
}

id objc_msgSend_handlePendingFlag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handlePendingFlag:");
}

id objc_msgSend_handlePendingMapHeadMMDs_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handlePendingMapHeadMMDs:error:");
}

id objc_msgSend_handleQueryResponse_queryRequest_receiptDate_fetchId_error_rawDataHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleQueryResponse:queryRequest:receiptDate:fetchId:error:rawDataHandler:");
}

id objc_msgSend_handleQueryResponse_queryRequest_receiptDate_fetchId_error_transparentDataHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleQueryResponse:queryRequest:receiptDate:fetchId:error:transparentDataHandler:");
}

id objc_msgSend_handleQueryResponse_queryRequest_receiptDate_fetchId_validateType_ktCapable_error_transparentDataHandler_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "handleQueryResponse:queryRequest:receiptDate:fetchId:validateType:ktCapable:error:transparentDataHandler:");
}

id objc_msgSend_handles(void *a1, const char *a2, ...)
{
  return _[a1 handles];
}

id objc_msgSend_hasAccountMismatch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasAccountMismatch:");
}

id objc_msgSend_hasBeenEnabled(void *a1, const char *a2, ...)
{
  return _[a1 hasBeenEnabled];
}

id objc_msgSend_hasBeenUnlocked(void *a1, const char *a2, ...)
{
  return _[a1 hasBeenUnlocked];
}

id objc_msgSend_hasChangeLogHead(void *a1, const char *a2, ...)
{
  return _[a1 hasChangeLogHead];
}

id objc_msgSend_hasChanges(void *a1, const char *a2, ...)
{
  return _[a1 hasChanges];
}

id objc_msgSend_hasDeviceErrorForUri_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasDeviceErrorForUri:");
}

id objc_msgSend_hasEndSlh(void *a1, const char *a2, ...)
{
  return _[a1 hasEndSlh];
}

id objc_msgSend_hasInclusionProof(void *a1, const char *a2, ...)
{
  return _[a1 hasInclusionProof];
}

id objc_msgSend_hasInternalDiagnostics(void *a1, const char *a2, ...)
{
  return _[a1 hasInternalDiagnostics];
}

id objc_msgSend_hasMapEntry(void *a1, const char *a2, ...)
{
  return _[a1 hasMapEntry];
}

id objc_msgSend_hasObjectMapHead(void *a1, const char *a2, ...)
{
  return _[a1 hasObjectMapHead];
}

id objc_msgSend_hasOptInAfter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasOptInAfter:");
}

id objc_msgSend_hasOptInExtension(void *a1, const char *a2, ...)
{
  return _[a1 hasOptInExtension];
}

id objc_msgSend_hasPamHeadInPatProof(void *a1, const char *a2, ...)
{
  return _[a1 hasPamHeadInPatProof];
}

id objc_msgSend_hasPatClosedProof(void *a1, const char *a2, ...)
{
  return _[a1 hasPatClosedProof];
}

id objc_msgSend_hasPatConfigProof(void *a1, const char *a2, ...)
{
  return _[a1 hasPatConfigProof];
}

id objc_msgSend_hasPatHead(void *a1, const char *a2, ...)
{
  return _[a1 hasPatHead];
}

id objc_msgSend_hasPendingSingleQueryForUri_application_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPendingSingleQueryForUri:application:error:");
}

id objc_msgSend_hasPerApplicationTreeEntry(void *a1, const char *a2, ...)
{
  return _[a1 hasPerApplicationTreeEntry];
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasReachedEligibilityThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasReachedEligibilityThreshold:");
}

id objc_msgSend_hasRecentlyDoneHSA2Upsell(void *a1, const char *a2, ...)
{
  return _[a1 hasRecentlyDoneHSA2Upsell];
}

id objc_msgSend_hasSignature(void *a1, const char *a2, ...)
{
  return _[a1 hasSignature];
}

id objc_msgSend_hasSlh(void *a1, const char *a2, ...)
{
  return _[a1 hasSlh];
}

id objc_msgSend_hasSmh(void *a1, const char *a2, ...)
{
  return _[a1 hasSmh];
}

id objc_msgSend_hasStartSlh(void *a1, const char *a2, ...)
{
  return _[a1 hasStartSlh];
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_hasTltConfigProof(void *a1, const char *a2, ...)
{
  return _[a1 hasTltConfigProof];
}

id objc_msgSend_hasTopLevelTreeEntry(void *a1, const char *a2, ...)
{
  return _[a1 hasTopLevelTreeEntry];
}

id objc_msgSend_hasUnknownSPKIHashError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasUnknownSPKIHashError:");
}

id objc_msgSend_hasUriWitness(void *a1, const char *a2, ...)
{
  return _[a1 hasUriWitness];
}

id objc_msgSend_hasVrfPublicKey(void *a1, const char *a2, ...)
{
  return _[a1 hasVrfPublicKey];
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _[a1 hash];
}

id objc_msgSend_hashesOfPeersInPathToRootArray(void *a1, const char *a2, ...)
{
  return _[a1 hashesOfPeersInPathToRootArray];
}

id objc_msgSend_hashesOfPeersInPathToRootArray_Count(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hashesOfPeersInPathToRootArray_Count");
}

id objc_msgSend_haveContact_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "haveContact:error:");
}

id objc_msgSend_haveDoneFixup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "haveDoneFixup:");
}

id objc_msgSend_haveIDSAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "haveIDSAccount:");
}

id objc_msgSend_haveIdentity(void *a1, const char *a2, ...)
{
  return _[a1 haveIdentity];
}

id objc_msgSend_haveNetwork(void *a1, const char *a2, ...)
{
  return _[a1 haveNetwork];
}

id objc_msgSend_havePendingRecords(void *a1, const char *a2, ...)
{
  return _[a1 havePendingRecords];
}

id objc_msgSend_haveTreeHead_isMapHead_application_logBeginTime_logType_revision_gossip_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "haveTreeHead:isMapHead:application:logBeginTime:logType:revision:gossip:error:");
}

id objc_msgSend_healSelf_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "healSelf:completionBlock:");
}

id objc_msgSend_healableError_selfValidationResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "healableError:selfValidationResult:");
}

id objc_msgSend_historyTokenFromData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "historyTokenFromData:");
}

id objc_msgSend_holdStateMachineOperation(void *a1, const char *a2, ...)
{
  return _[a1 holdStateMachineOperation];
}

id objc_msgSend_httpMethod(void *a1, const char *a2, ...)
{
  return _[a1 httpMethod];
}

id objc_msgSend_iCloudAnalyticsEnabledWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iCloudAnalyticsEnabledWithCompletionHandler:");
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _[a1 identifier];
}

id objc_msgSend_identity(void *a1, const char *a2, ...)
{
  return _[a1 identity];
}

id objc_msgSend_identityCreated(void *a1, const char *a2, ...)
{
  return _[a1 identityCreated];
}

id objc_msgSend_idmsFetchTime(void *a1, const char *a2, ...)
{
  return _[a1 idmsFetchTime];
}

id objc_msgSend_idmsOperations(void *a1, const char *a2, ...)
{
  return _[a1 idmsOperations];
}

id objc_msgSend_idsAccountStatus(void *a1, const char *a2, ...)
{
  return _[a1 idsAccountStatus];
}

id objc_msgSend_idsAccountTracker(void *a1, const char *a2, ...)
{
  return _[a1 idsAccountTracker];
}

id objc_msgSend_idsAccountType(void *a1, const char *a2, ...)
{
  return _[a1 idsAccountType];
}

id objc_msgSend_idsAccounts(void *a1, const char *a2, ...)
{
  return _[a1 idsAccounts];
}

id objc_msgSend_idsConfigBag(void *a1, const char *a2, ...)
{
  return _[a1 idsConfigBag];
}

id objc_msgSend_idsControllerQueue(void *a1, const char *a2, ...)
{
  return _[a1 idsControllerQueue];
}

id objc_msgSend_idsDSID(void *a1, const char *a2, ...)
{
  return _[a1 idsDSID];
}

id objc_msgSend_idsDelegate(void *a1, const char *a2, ...)
{
  return _[a1 idsDelegate];
}

id objc_msgSend_idsDeviceMutation(void *a1, const char *a2, ...)
{
  return _[a1 idsDeviceMutation];
}

id objc_msgSend_idsID(void *a1, const char *a2, ...)
{
  return _[a1 idsID];
}

id objc_msgSend_idsKTData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idsKTData:");
}

id objc_msgSend_idsKTVerification(void *a1, const char *a2, ...)
{
  return _[a1 idsKTVerification];
}

id objc_msgSend_idsMutation(void *a1, const char *a2, ...)
{
  return _[a1 idsMutation];
}

id objc_msgSend_idsObserver(void *a1, const char *a2, ...)
{
  return _[a1 idsObserver];
}

id objc_msgSend_idsOperations(void *a1, const char *a2, ...)
{
  return _[a1 idsOperations];
}

id objc_msgSend_idsQueue(void *a1, const char *a2, ...)
{
  return _[a1 idsQueue];
}

id objc_msgSend_idsRegistrationInterface(void *a1, const char *a2, ...)
{
  return _[a1 idsRegistrationInterface];
}

id objc_msgSend_idsReporting(void *a1, const char *a2, ...)
{
  return _[a1 idsReporting];
}

id objc_msgSend_idsResponseTime(void *a1, const char *a2, ...)
{
  return _[a1 idsResponseTime];
}

id objc_msgSend_idsServerReportKTKeyWrong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idsServerReportKTKeyWrong:");
}

id objc_msgSend_idsServerReportedWrong(void *a1, const char *a2, ...)
{
  return _[a1 idsServerReportedWrong];
}

id objc_msgSend_idsServerReportedWrongPublicKey(void *a1, const char *a2, ...)
{
  return _[a1 idsServerReportedWrongPublicKey];
}

id objc_msgSend_idsServiceForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idsServiceForIdentifier:");
}

id objc_msgSend_idsSignInController(void *a1, const char *a2, ...)
{
  return _[a1 idsSignInController];
}

id objc_msgSend_idsURI(void *a1, const char *a2, ...)
{
  return _[a1 idsURI];
}

id objc_msgSend_ignoreFailedEvents_dataStore_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ignoreFailedEvents:dataStore:completionBlock:");
}

id objc_msgSend_ignoreFailure_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ignoreFailure:error:");
}

id objc_msgSend_ignoreFailureForResults_application_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ignoreFailureForResults:application:completionBlock:");
}

id objc_msgSend_ignoreFailureForResults_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ignoreFailureForResults:error:");
}

id objc_msgSend_ignoreFailureForUri_application_status_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ignoreFailureForUri:application:status:error:");
}

id objc_msgSend_ignoredFailureExpiry(void *a1, const char *a2, ...)
{
  return _[a1 ignoredFailureExpiry];
}

id objc_msgSend_importFromCloud(void *a1, const char *a2, ...)
{
  return _[a1 importFromCloud];
}

id objc_msgSend_inResetWindow(void *a1, const char *a2, ...)
{
  return _[a1 inResetWindow];
}

id objc_msgSend_inclusionProof(void *a1, const char *a2, ...)
{
  return _[a1 inclusionProof];
}

id objc_msgSend_inclusionVerified(void *a1, const char *a2, ...)
{
  return _[a1 inclusionVerified];
}

id objc_msgSend_incrementIntegerPropertyForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incrementIntegerPropertyForKey:");
}

id objc_msgSend_index(void *a1, const char *a2, ...)
{
  return _[a1 index];
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_indexOfObjectPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObjectPassingTest:");
}

id objc_msgSend_indexesOfObjectsPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexesOfObjectsPassingTest:");
}

id objc_msgSend_inflightCKFetchDependencies(void *a1, const char *a2, ...)
{
  return _[a1 inflightCKFetchDependencies];
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _[a1 init];
}

id objc_msgSend_init_nsnotificationCenterClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "init:nsnotificationCenterClass:");
}

id objc_msgSend_init_sourceStates_serialQueue_timeout_transitionOp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "init:sourceStates:serialQueue:timeout:transitionOp:");
}

id objc_msgSend_initAsSuccess(void *a1, const char *a2, ...)
{
  return _[a1 initAsSuccess];
}

id objc_msgSend_initForReadingFromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initForReadingFromData:error:");
}

id objc_msgSend_initGETWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initGETWithURL:");
}

id objc_msgSend_initGETWithURL_application_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initGETWithURL:application:");
}

id objc_msgSend_initIntending_errorState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initIntending:errorState:");
}

id objc_msgSend_initNamed_serialQueue_path_initialRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initNamed:serialQueue:path:initialRequest:");
}

id objc_msgSend_initPOSTWithURL_data_uuid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initPOSTWithURL:data:uuid:");
}

id objc_msgSend_initPOSTWithURL_data_uuid_application_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initPOSTWithURL:data:uuid:application:");
}

id objc_msgSend_initPUSHWithURL_data_uuid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initPUSHWithURL:data:uuid:");
}

id objc_msgSend_initPendingForUri_application_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initPendingForUri:application:");
}

id objc_msgSend_initRequiringSecureCoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initRequiringSecureCoding:");
}

id objc_msgSend_initSelfState_uri_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initSelfState:uri:error:");
}

id objc_msgSend_initUnavailableForUri_application_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initUnavailableForUri:application:");
}

id objc_msgSend_initWithACAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithACAccount:");
}

id objc_msgSend_initWithAKRemoteDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAKRemoteDevice:");
}

id objc_msgSend_initWithApplication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithApplication:");
}

id objc_msgSend_initWithApplication_context_stateMachine_account_store_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithApplication:context:stateMachine:account:store:");
}

id objc_msgSend_initWithApplication_dataStore_diskState_contextStore_settings_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithApplication:dataStore:diskState:contextStore:settings:error:");
}

id objc_msgSend_initWithApplication_dataStore_response_contextStore_settings_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithApplication:dataStore:response:contextStore:settings:error:");
}

id objc_msgSend_initWithApplication_dependencies_intendedState_errorState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithApplication:dependencies:intendedState:errorState:");
}

id objc_msgSend_initWithApplication_dependencies_isOptInSelfValidation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithApplication:dependencies:isOptInSelfValidation:");
}

id objc_msgSend_initWithApplication_dependencies_opId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithApplication:dependencies:opId:");
}

id objc_msgSend_initWithApplication_initialFill_dependencies_intendedState_errorState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithApplication:initialFill:dependencies:intendedState:errorState:");
}

id objc_msgSend_initWithApplication_opId_dependencies_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithApplication:opId:dependencies:");
}

id objc_msgSend_initWithApplication_registrationData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithApplication:registrationData:");
}

id objc_msgSend_initWithApplicationID_dependencies_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithApplicationID:dependencies:");
}

id objc_msgSend_initWithApplicationKeyStore_dataStore_applicationID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithApplicationKeyStore:dataStore:applicationID:");
}

id objc_msgSend_initWithApplicationKeyStore_dataStore_applicationID_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithApplicationKeyStore:dataStore:applicationID:context:");
}

id objc_msgSend_initWithApplicationKeyStore_dataStore_smDataStore_staticKeyStore_logClient_applicationID_contextStore_accountKeyServer_stateMachine_kvs_cloudRecords_followup_settings_analyticsLogger_tapToRadar_eligibilityStatusReporter_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithApplicationKeyStore:dataStore:smDataStore:staticKeyStore:logClient:applicationID:contextStore:account KeyServer:stateMachine:kvs:cloudRecords:followup:settings:analyticsLogger:tapToRadar:eligibilityStatusReporter:");
}

id objc_msgSend_initWithBackgroundSession_transparencyAnalytics_dataStore_settings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBackgroundSession:transparencyAnalytics:dataStore:settings:");
}

id objc_msgSend_initWithBools_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBools:forKeys:count:");
}

id objc_msgSend_initWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytes:length:");
}

id objc_msgSend_initWithBytes_length_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytes:length:encoding:");
}

id objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytesNoCopy:length:freeWhenDone:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithCkdatabase_analytics_context_zoneCreate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCkdatabase:analytics:context:zoneCreate:");
}

id objc_msgSend_initWithClass_messageName_fileDescription_fields_storageSize_wireFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClass:messageName:fileDescription:fields:storageSize:wireFormat:");
}

id objc_msgSend_initWithCodedInputStream_extensionRegistry_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCodedInputStream:extensionRegistry:error:");
}

id objc_msgSend_initWithConcurrencyType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConcurrencyType:");
}

id objc_msgSend_initWithContactStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContactStore:");
}

id objc_msgSend_initWithContainer_dew_logger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContainer:dew:logger:");
}

id objc_msgSend_initWithContainer_logger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContainer:logger:");
}

id objc_msgSend_initWithContainerIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContainerIdentifier:");
}

id objc_msgSend_initWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsOfURL:");
}

id objc_msgSend_initWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContext:");
}

id objc_msgSend_initWithContext_settings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContext:settings:");
}

id objc_msgSend_initWithContext_zone_database_hostInfo_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContext:zone:database:hostInfo:delegate:");
}

id objc_msgSend_initWithContextData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContextData:");
}

id objc_msgSend_initWithControl_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithControl:");
}

id objc_msgSend_initWithController_followup_logger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:followup:logger:");
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:error:");
}

id objc_msgSend_initWithData_extensionRegistry_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:extensionRegistry:error:");
}

id objc_msgSend_initWithDataStore_configBag_dewConfig_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDataStore:configBag:dewConfig:");
}

id objc_msgSend_initWithDataStore_notificationCenter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDataStore:notificationCenter:");
}

id objc_msgSend_initWithDataStore_settings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDataStore:settings:");
}

id objc_msgSend_initWithDataStore_staticKeyStore_keyStore_cloudRecords_accountKeyServer_settings_followup_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDataStore:staticKeyStore:keyStore:cloudRecords:accountKeyServer:settings:followup:");
}

id objc_msgSend_initWithDataStore_staticKeyStore_keyStore_cloudRecords_accountKeyServer_stateMachine_kvs_settings_followup_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithDataStore:staticKeyStore:keyStore:cloudRecords:accountKeyServer:stateMachine:kvs:settings:followup:");
}

id objc_msgSend_initWithDataStore_workloop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDataStore:workloop:");
}

id objc_msgSend_initWithDependencies_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDependencies:");
}

id objc_msgSend_initWithDependencies_application_pcs_idsRegistrationInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDependencies:application:pcs:idsRegistrationInterface:");
}

id objc_msgSend_initWithDependencies_forceUpdate_intendedState_errorState_idsRegistrationInterface_signatureTracker_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithDependencies:forceUpdate:intendedState:errorState:idsRegistrationInterface:signatureTracker:");
}

id objc_msgSend_initWithDependencies_initialFetch_intendedState_errorState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDependencies:initialFetch:intendedState:errorState:");
}

id objc_msgSend_initWithDependencies_intendedState_errorState_selfValidationResult_stateMachine_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDependencies:intendedState:errorState:selfValidationResult:stateMachine:");
}

id objc_msgSend_initWithDependencies_intendedState_errorState_stateMachine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDependencies:intendedState:errorState:stateMachine:");
}

id objc_msgSend_initWithDependencies_intendedState_errorState_triggerInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDependencies:intendedState:errorState:triggerInterface:");
}

id objc_msgSend_initWithDependencies_opId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDependencies:opId:");
}

id objc_msgSend_initWithDependencies_pcsOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDependencies:pcsOperation:");
}

id objc_msgSend_initWithDependencies_reason_retryScheduler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDependencies:reason:retryScheduler:");
}

id objc_msgSend_initWithDependencies_specificUser_intendedState_errorState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDependencies:specificUser:intendedState:errorState:");
}

id objc_msgSend_initWithDependencies_timeout_intendedState_errorState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDependencies:timeout:intendedState:errorState:");
}

id objc_msgSend_initWithDependenics_intendedState_errorState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDependenics:intendedState:errorState:");
}

id objc_msgSend_initWithDependenics_intendedState_errorState_optinStates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDependenics:intendedState:errorState:optinStates:");
}

id objc_msgSend_initWithDependenics_optInRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDependenics:optInRequest:");
}

id objc_msgSend_initWithDeps_application_uris_logClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDeps:application:uris:logClient:");
}

id objc_msgSend_initWithDeps_initialFetch_userInteractive_reason_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDeps:initialFetch:userInteractive:reason:context:");
}

id objc_msgSend_initWithDew_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDew:");
}

id objc_msgSend_initWithDiskKeyStore_application_settings_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDiskKeyStore:application:settings:error:");
}

id objc_msgSend_initWithDistributedNotificationCenter_octagonControl_ckksControl_logger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDistributedNotificationCenter:octagonControl:ckksControl:logger:");
}

id objc_msgSend_initWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:code:userInfo:");
}

id objc_msgSend_initWithDoubles_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDoubles:forKeys:count:");
}

id objc_msgSend_initWithEnvironmentName_namedDelegatePort_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironmentName:namedDelegatePort:queue:");
}

id objc_msgSend_initWithFetchRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFetchRequest:");
}

id objc_msgSend_initWithFieldDescription_descriptorFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFieldDescription:descriptorFlags:");
}

id objc_msgSend_initWithFileStorage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFileStorage:");
}

id objc_msgSend_initWithFlag_after_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFlag:after:");
}

id objc_msgSend_initWithFlag_conditions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFlag:conditions:");
}

id objc_msgSend_initWithFlag_conditions_delayInSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFlag:conditions:delayInSeconds:");
}

id objc_msgSend_initWithFlag_conditions_scheduler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFlag:conditions:scheduler:");
}

id objc_msgSend_initWithFlag_delayInSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFlag:delayInSeconds:");
}

id objc_msgSend_initWithFloats_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFloats:forKeys:count:");
}

id objc_msgSend_initWithFormat_arguments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:arguments:");
}

id objc_msgSend_initWithIDSAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIDSAccount:");
}

id objc_msgSend_initWithIDSAccountController_lockStateTracker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIDSAccountController:lockStateTracker:");
}

id objc_msgSend_initWithIDSDSID_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIDSDSID:type:");
}

id objc_msgSend_initWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:");
}

id objc_msgSend_initWithIdsAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdsAccount:");
}

id objc_msgSend_initWithIdsDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdsDevice:");
}

id objc_msgSend_initWithInt32s_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInt32s:forKeys:count:");
}

id objc_msgSend_initWithInt64s_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInt64s:forKeys:count:");
}

id objc_msgSend_initWithKTLogClient_dataStoreController_keyStore_staticKeyStore_transcript_cloudKitContainer_workloop_logger_apsConnection_settings_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithKTLogClient:dataStoreController:keyStore:staticKeyStore:transcript:cloudKitContainer:workloop:logger: apsConnection:settings:");
}

id objc_msgSend_initWithKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKey:");
}

id objc_msgSend_initWithKey_certificates_failure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKey:certificates:failure:");
}

id objc_msgSend_initWithKeyBag_application_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKeyBag:application:");
}

id objc_msgSend_initWithKeyData_tltLeafs_intermediates_patConfigProof_tltConfigProof_patClosedProof_pamHeadInPatProof_application_allowOldKeys_settings_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithKeyData:tltLeafs:intermediates:patConfigProof:tltConfigProof:patClosedProof:pamHeadInPatProof:applica tion:allowOldKeys:settings:error:");
}

id objc_msgSend_initWithKeyStore_application_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKeyStore:application:");
}

id objc_msgSend_initWithKeysToFetch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKeysToFetch:");
}

id objc_msgSend_initWithLoggableDatas_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLoggableDatas:");
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:");
}

id objc_msgSend_initWithMessage_typeURLPrefix_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMessage:typeURLPrefix:error:");
}

id objc_msgSend_initWithMutation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMutation:");
}

id objc_msgSend_initWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:");
}

id objc_msgSend_initWithName_delay_keepProcessAlive_dependencyDescriptionCode_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:delay:keepProcessAlive:dependencyDescriptionCode:block:");
}

id objc_msgSend_initWithName_fields_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:fields:");
}

id objc_msgSend_initWithName_initialDelay_continuingDelay_keepProcessAlive_dependencyDescriptionCode_block_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithName:initialDelay:continuingDelay:keepProcessAlive:dependencyDescriptionCode:block:");
}

id objc_msgSend_initWithName_initialDelay_exponentialBackoff_maximumDelay_keepProcessAlive_dependencyDescriptionCode_block_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithName:initialDelay:exponentialBackoff:maximumDelay:keepProcessAlive:dependencyDescriptionCode:block:");
}

id objc_msgSend_initWithName_managedObjectModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:managedObjectModel:");
}

id objc_msgSend_initWithName_states_flags_initialState_queue_stateEngine_lockStateTracker_reachabilityTracker_idsConfigBag_( void *a1, const char *a2, ...)
{
  return _objc_msgSend( a1,  "initWithName:states:flags:initialState:queue:stateEngine:lockStateTracker:reachabilityTracker:idsConfigBag:");
}

id objc_msgSend_initWithName_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:value:");
}

id objc_msgSend_initWithNamedDelegatePort_apsConnectionClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNamedDelegatePort:apsConnectionClass:");
}

id objc_msgSend_initWithNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNumber:");
}

id objc_msgSend_initWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjects:count:");
}

id objc_msgSend_initWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjects:forKeys:count:");
}

id objc_msgSend_initWithOptInRecords_uriToSMT_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOptInRecords:uriToSMT:");
}

id objc_msgSend_initWithOptions_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOptions:completionBlock:");
}

id objc_msgSend_initWithOutputStream_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOutputStream:");
}

id objc_msgSend_initWithOutputStream_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOutputStream:data:");
}

id objc_msgSend_initWithPackage_objcPrefix_syntax_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPackage:objcPrefix:syntax:");
}

id objc_msgSend_initWithPackage_syntax_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPackage:syntax:");
}

id objc_msgSend_initWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPath:");
}

id objc_msgSend_initWithPath_idsReporting_eligibilitySupport_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPath:idsReporting:eligibilitySupport:error:");
}

id objc_msgSend_initWithPersistentContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersistentContainer:");
}

id objc_msgSend_initWithPositon_trustedKeyStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPositon:trustedKeyStore:");
}

id objc_msgSend_initWithPrefixedURI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPrefixedURI:");
}

id objc_msgSend_initWithProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProvider:");
}

id objc_msgSend_initWithPublicKeysResponse_application_settings_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPublicKeysResponse:application:settings:error:");
}

id objc_msgSend_initWithPushToken_registrationData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPushToken:registrationData:");
}

id objc_msgSend_initWithQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:");
}

id objc_msgSend_initWithQueue_flags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:flags:");
}

id objc_msgSend_initWithRecordIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordIDs:");
}

id objc_msgSend_initWithRecordName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordName:");
}

id objc_msgSend_initWithRecords_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecords:");
}

id objc_msgSend_initWithReport_reportType_timeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithReport:reportType:timeout:");
}

id objc_msgSend_initWithRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequest:");
}

id objc_msgSend_initWithRequest_responseData_metadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequest:responseData:metadata:");
}

id objc_msgSend_initWithRequiredKeys_settings_directory_configApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequiredKeys:settings:directory:configApp:");
}

id objc_msgSend_initWithRocketName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRocketName:");
}

id objc_msgSend_initWithSIGTERMNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSIGTERMNotification:");
}

id objc_msgSend_initWithService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithService:");
}

id objc_msgSend_initWithSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSettings:");
}

id objc_msgSend_initWithSingleDataRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSingleDataRecord:");
}

id objc_msgSend_initWithSpecificUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSpecificUser:");
}

id objc_msgSend_initWithState_pathStep_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithState:pathStep:");
}

id objc_msgSend_initWithStatement_db_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStatement:db:error:");
}

id objc_msgSend_initWithStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStore:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithStringValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStringValue:");
}

id objc_msgSend_initWithTargetState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTargetState:");
}

id objc_msgSend_initWithTrustedKeyStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTrustedKeyStore:");
}

id objc_msgSend_initWithTrustedKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTrustedKeys:");
}

id objc_msgSend_initWithType_application_uri_accountKey_serverLoggableDatas_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:application:uri:accountKey:serverLoggableDatas:");
}

id objc_msgSend_initWithType_status_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:status:");
}

id objc_msgSend_initWithUInt32s_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUInt32s:forKeys:count:");
}

id objc_msgSend_initWithUInt64s_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUInt64s:forKeys:count:");
}

id objc_msgSend_initWithURI_application_dependencies_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURI:application:dependencies:");
}

id objc_msgSend_initWithURI_smtTimestamp_optIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURI:smtTimestamp:optIn:");
}

id objc_msgSend_initWithURL_data_timeout_httpMethod_uuid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:data:timeout:httpMethod:uuid:");
}

id objc_msgSend_initWithUUIDBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUIDBytes:");
}

id objc_msgSend_initWithUUIDString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUIDString:");
}

id objc_msgSend_initWithUri_application_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUri:application:");
}

id objc_msgSend_initWithUri_application_failure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUri:application:failure:");
}

id objc_msgSend_initWithUri_application_ktResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUri:application:ktResult:");
}

id objc_msgSend_initWithUri_application_ktResult_failure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUri:application:ktResult:failure:");
}

id objc_msgSend_initWithUri_application_ktResult_transparentData_loggableDatas_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUri:application:ktResult:transparentData:loggableDatas:");
}

id objc_msgSend_initWithUriVRFOutput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUriVRFOutput:");
}

id objc_msgSend_initWithUriVRFOutput_mapLeaf_pendingSMTs_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUriVRFOutput:mapLeaf:pendingSMTs:error:");
}

id objc_msgSend_initWithUserInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUserInfo:");
}

id objc_msgSend_initWithValidationFunction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithValidationFunction:");
}

id objc_msgSend_initWithValidationFunction_capacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithValidationFunction:capacity:");
}

id objc_msgSend_initWithValidationFunction_rawValues_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithValidationFunction:rawValues:count:");
}

id objc_msgSend_initWithValidationFunction_rawValues_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithValidationFunction:rawValues:forKeys:count:");
}

id objc_msgSend_initWithValueArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithValueArray:");
}

id objc_msgSend_initWithValues_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithValues:count:");
}

id objc_msgSend_initWithWorkloop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWorkloop:");
}

id objc_msgSend_initWithWorkloop_sessionDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWorkloop:sessionDelegate:");
}

id objc_msgSend_initialDelay(void *a1, const char *a2, ...)
{
  return _[a1 initialDelay];
}

id objc_msgSend_initialFetch(void *a1, const char *a2, ...)
{
  return _[a1 initialFetch];
}

id objc_msgSend_initialFill(void *a1, const char *a2, ...)
{
  return _[a1 initialFill];
}

id objc_msgSend_initialState(void *a1, const char *a2, ...)
{
  return _[a1 initialState];
}

id objc_msgSend_initializeCloudKitSchemaWithOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initializeCloudKitSchemaWithOptions:error:");
}

id objc_msgSend_initializeServerRPC_application_backgroundOpId_request_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initializeServerRPC:application:backgroundOpId:request:");
}

id objc_msgSend_initializedComplete(void *a1, const char *a2, ...)
{
  return _[a1 initializedComplete];
}

id objc_msgSend_initializingOperation(void *a1, const char *a2, ...)
{
  return _[a1 initializingOperation];
}

id objc_msgSend_initiallyFetched(void *a1, const char *a2, ...)
{
  return _[a1 initiallyFetched];
}

id objc_msgSend_initiateCredentialRenewal_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initiateCredentialRenewal:completionHandler:");
}

id objc_msgSend_injectSelfVerificationFailure_failing_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "injectSelfVerificationFailure:failing:error:");
}

id objc_msgSend_insertNewObjectForEntityForName_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertNewObjectForEntityForName:inManagedObjectContext:");
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertObject:atIndex:");
}

id objc_msgSend_insertResultForElement_samplesAgo_success_complete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertResultForElement:samplesAgo:success:complete:");
}

id objc_msgSend_insertResultWithElement_samplesAgo_success_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertResultWithElement:samplesAgo:success:completionHandler:");
}

id objc_msgSend_inspectErrorForRetryAfter_trigger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inspectErrorForRetryAfter:trigger:");
}

id objc_msgSend_instance(void *a1, const char *a2, ...)
{
  return _[a1 instance];
}

id objc_msgSend_int64AtColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "int64AtColumn:");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _[a1 intValue];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _[a1 integerValue];
}

id objc_msgSend_intendedPath(void *a1, const char *a2, ...)
{
  return _[a1 intendedPath];
}

id objc_msgSend_intendedState(void *a1, const char *a2, ...)
{
  return _[a1 intendedState];
}

id objc_msgSend_interface(void *a1, const char *a2, ...)
{
  return _[a1 interface];
}

id objc_msgSend_interiorNodeForLeftData_rightData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interiorNodeForLeftData:rightData:");
}

id objc_msgSend_intermediatesArray(void *a1, const char *a2, ...)
{
  return _[a1 intermediatesArray];
}

id objc_msgSend_internalClear_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "internalClear:");
}

id objc_msgSend_internalResizeToCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "internalResizeToCapacity:");
}

id objc_msgSend_internalSuccesses(void *a1, const char *a2, ...)
{
  return _[a1 internalSuccesses];
}

id objc_msgSend_invalidateContactsSyncing(void *a1, const char *a2, ...)
{
  return _[a1 invalidateContactsSyncing];
}

id objc_msgSend_invalidateTimeout(void *a1, const char *a2, ...)
{
  return _[a1 invalidateTimeout];
}

id objc_msgSend_invocationWithMethodSignature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invocationWithMethodSignature:");
}

id objc_msgSend_invoke(void *a1, const char *a2, ...)
{
  return _[a1 invoke];
}

id objc_msgSend_isAccountIdentity_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAccountIdentity:error:");
}

id objc_msgSend_isAccountKTCapable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAccountKTCapable:");
}

id objc_msgSend_isAccountsErrorRetryable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAccountsErrorRetryable:");
}

id objc_msgSend_isActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isActive:");
}

id objc_msgSend_isCancelled(void *a1, const char *a2, ...)
{
  return _[a1 isCancelled];
}

id objc_msgSend_isClosed(void *a1, const char *a2, ...)
{
  return _[a1 isClosed];
}

id objc_msgSend_isCloudKitManateeAcountAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isCloudKitManateeAcountAvailable];
}

id objc_msgSend_isCurrentlyEligible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCurrentlyEligible:");
}

id objc_msgSend_isDeleted(void *a1, const char *a2, ...)
{
  return _[a1 isDeleted];
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToArray:");
}

id objc_msgSend_isEqualToData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToData:");
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToNumber:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isExecuting(void *a1, const char *a2, ...)
{
  return _[a1 isExecuting];
}

id objc_msgSend_isExpectedFailure_expected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isExpectedFailure:expected:");
}

id objc_msgSend_isFailureIgnoredForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFailureIgnoredForDate:");
}

id objc_msgSend_isFailureResolvedAndSeenByDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFailureResolvedAndSeenByDate:");
}

id objc_msgSend_isFieldTag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFieldTag:");
}

id objc_msgSend_isFinished(void *a1, const char *a2, ...)
{
  return _[a1 isFinished];
}

id objc_msgSend_isICDPEnabledForDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isICDPEnabledForDSID:");
}

id objc_msgSend_isInitialFetch(void *a1, const char *a2, ...)
{
  return _[a1 isInitialFetch];
}

id objc_msgSend_isInitialized(void *a1, const char *a2, ...)
{
  return _[a1 isInitialized];
}

id objc_msgSend_isKTDisabled(void *a1, const char *a2, ...)
{
  return _[a1 isKTDisabled];
}

id objc_msgSend_isKTKeyDifferent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isKTKeyDifferent:");
}

id objc_msgSend_isKeyAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isKeyAvailable:");
}

id objc_msgSend_isKindOfEntity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isKindOfEntity:");
}

id objc_msgSend_isLocked(void *a1, const char *a2, ...)
{
  return _[a1 isLocked];
}

id objc_msgSend_isLockedError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLockedError:");
}

id objc_msgSend_isMapHead(void *a1, const char *a2, ...)
{
  return _[a1 isMapHead];
}

id objc_msgSend_isMapStillPopulating_logBeginMs_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMapStillPopulating:logBeginMs:error:");
}

id objc_msgSend_isNetworkError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNetworkError:");
}

id objc_msgSend_isNetworkFailureError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNetworkFailureError:");
}

id objc_msgSend_isOptInSelfValidation(void *a1, const char *a2, ...)
{
  return _[a1 isOptInSelfValidation];
}

id objc_msgSend_isPackable(void *a1, const char *a2, ...)
{
  return _[a1 isPackable];
}

id objc_msgSend_isPending(void *a1, const char *a2, ...)
{
  return _[a1 isPending];
}

id objc_msgSend_isReady(void *a1, const char *a2, ...)
{
  return _[a1 isReady];
}

id objc_msgSend_isRepeated(void *a1, const char *a2, ...)
{
  return _[a1 isRepeated];
}

id objc_msgSend_isRequired(void *a1, const char *a2, ...)
{
  return _[a1 isRequired];
}

id objc_msgSend_isSubclassOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSubclassOfClass:");
}

id objc_msgSend_isSupported(void *a1, const char *a2, ...)
{
  return _[a1 isSupported];
}

id objc_msgSend_isValidEnumValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValidEnumValue:");
}

id objc_msgSend_isValidJSONObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValidJSONObject:");
}

id objc_msgSend_isVirtualMachine(void *a1, const char *a2, ...)
{
  return _[a1 isVirtualMachine];
}

id objc_msgSend_isWireFormat(void *a1, const char *a2, ...)
{
  return _[a1 isWireFormat];
}

id objc_msgSend_issuanceGroup(void *a1, const char *a2, ...)
{
  return _[a1 issuanceGroup];
}

id objc_msgSend_issuanceQueue(void *a1, const char *a2, ...)
{
  return _[a1 issuanceQueue];
}

id objc_msgSend_issueCert_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "issueCert:completionHandler:");
}

id objc_msgSend_jsonDictFromPlistDict_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jsonDictFromPlistDict:");
}

id objc_msgSend_jsonifyError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jsonifyError:");
}

id objc_msgSend_kbInfoArticleUrl(void *a1, const char *a2, ...)
{
  return _[a1 kbInfoArticleUrl];
}

id objc_msgSend_keepProcessAlive(void *a1, const char *a2, ...)
{
  return _[a1 keepProcessAlive];
}

id objc_msgSend_key(void *a1, const char *a2, ...)
{
  return _[a1 key];
}

id objc_msgSend_keyBag(void *a1, const char *a2, ...)
{
  return _[a1 keyBag];
}

id objc_msgSend_keyEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 keyEnumerator];
}

id objc_msgSend_keyStore(void *a1, const char *a2, ...)
{
  return _[a1 keyStore];
}

id objc_msgSend_keyStoreFileName(void *a1, const char *a2, ...)
{
  return _[a1 keyStoreFileName];
}

id objc_msgSend_ktAccountKeyErrorCode(void *a1, const char *a2, ...)
{
  return _[a1 ktAccountKeyErrorCode];
}

id objc_msgSend_ktAccountKeyTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 ktAccountKeyTimestamp];
}

id objc_msgSend_ktAccountPublicIDWithPublicKeyInfo_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ktAccountPublicIDWithPublicKeyInfo:error:");
}

id objc_msgSend_ktAccountPublicIDWithStorageString_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ktAccountPublicIDWithStorageString:error:");
}

id objc_msgSend_ktAccountStatus_idsAccountsTracker_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ktAccountStatus:idsAccountsTracker:error:");
}

id objc_msgSend_ktApplication(void *a1, const char *a2, ...)
{
  return _[a1 ktApplication];
}

id objc_msgSend_ktApplicationToKTRegStatus(void *a1, const char *a2, ...)
{
  return _[a1 ktApplicationToKTRegStatus];
}

id objc_msgSend_ktCapable(void *a1, const char *a2, ...)
{
  return _[a1 ktCapable];
}

id objc_msgSend_ktDataForRegistration(void *a1, const char *a2, ...)
{
  return _[a1 ktDataForRegistration];
}

id objc_msgSend_ktDataSignature(void *a1, const char *a2, ...)
{
  return _[a1 ktDataSignature];
}

id objc_msgSend_ktDisable(void *a1, const char *a2, ...)
{
  return _[a1 ktDisable];
}

id objc_msgSend_ktLogClient(void *a1, const char *a2, ...)
{
  return _[a1 ktLogClient];
}

id objc_msgSend_ktLogData_accountKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ktLogData:accountKey:");
}

id objc_msgSend_ktOptInErrorCode(void *a1, const char *a2, ...)
{
  return _[a1 ktOptInErrorCode];
}

id objc_msgSend_ktOptInStatus(void *a1, const char *a2, ...)
{
  return _[a1 ktOptInStatus];
}

id objc_msgSend_ktOptInTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 ktOptInTimestamp];
}

id objc_msgSend_ktPublicAccountKey(void *a1, const char *a2, ...)
{
  return _[a1 ktPublicAccountKey];
}

id objc_msgSend_ktResult(void *a1, const char *a2, ...)
{
  return _[a1 ktResult];
}

id objc_msgSend_ktStatus(void *a1, const char *a2, ...)
{
  return _[a1 ktStatus];
}

id objc_msgSend_ktStorageString(void *a1, const char *a2, ...)
{
  return _[a1 ktStorageString];
}

id objc_msgSend_ktVerifyError_code_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ktVerifyError:code:");
}

id objc_msgSend_kt_currentTimeMs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "kt_currentTimeMs");
}

id objc_msgSend_kt_dataWithHexString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "kt_dataWithHexString:");
}

id objc_msgSend_kt_dataWithUint64_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "kt_dataWithUint64:length:");
}

id objc_msgSend_kt_dateFromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "kt_dateFromString:");
}

id objc_msgSend_kt_dateToString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "kt_dateToString");
}

id objc_msgSend_kt_fuzzyDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "kt_fuzzyDate");
}

id objc_msgSend_kt_hexString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "kt_hexString");
}

id objc_msgSend_kt_isEqualWithinOneMillisecond_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "kt_isEqualWithinOneMillisecond:");
}

id objc_msgSend_kt_random(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "kt_random");
}

id objc_msgSend_kt_requestId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "kt_requestId");
}

id objc_msgSend_kt_sha256(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "kt_sha256");
}

id objc_msgSend_kt_sha256WithSalt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "kt_sha256WithSalt:");
}

id objc_msgSend_kt_toISO_8601_UTCString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "kt_toISO_8601_UTCString");
}

id objc_msgSend_kvs(void *a1, const char *a2, ...)
{
  return _[a1 kvs];
}

id objc_msgSend_kvsOptInOutEntry_before_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "kvsOptInOutEntry:before:");
}

id objc_msgSend_lastCKFetch(void *a1, const char *a2, ...)
{
  return _[a1 lastCKFetch];
}

id objc_msgSend_lastCKFetchWithDeps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastCKFetchWithDeps:");
}

id objc_msgSend_lastCheckIDSRegistration(void *a1, const char *a2, ...)
{
  return _[a1 lastCheckIDSRegistration];
}

id objc_msgSend_lastDutyCycle(void *a1, const char *a2, ...)
{
  return _[a1 lastDutyCycle];
}

id objc_msgSend_lastDutyCycle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastDutyCycle:");
}

id objc_msgSend_lastDutyCycleSuccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastDutyCycleSuccess:");
}

id objc_msgSend_lastFetchIDMS(void *a1, const char *a2, ...)
{
  return _[a1 lastFetchIDMS];
}

id objc_msgSend_lastFetchIDSSelf(void *a1, const char *a2, ...)
{
  return _[a1 lastFetchIDSSelf];
}

id objc_msgSend_lastFetchKTSelf(void *a1, const char *a2, ...)
{
  return _[a1 lastFetchKTSelf];
}

id objc_msgSend_lastForceSyncKVS(void *a1, const char *a2, ...)
{
  return _[a1 lastForceSyncKVS];
}

id objc_msgSend_lastIDSCacheUIStatus(void *a1, const char *a2, ...)
{
  return _[a1 lastIDSCacheUIStatus];
}

id objc_msgSend_lastLocalFetchTime(void *a1, const char *a2, ...)
{
  return _[a1 lastLocalFetchTime];
}

id objc_msgSend_lastMessagesStatus(void *a1, const char *a2, ...)
{
  return _[a1 lastMessagesStatus];
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _[a1 lastObject];
}

id objc_msgSend_lastPhoneAccountStatus(void *a1, const char *a2, ...)
{
  return _[a1 lastPhoneAccountStatus];
}

id objc_msgSend_lastPublicKeyRefresh(void *a1, const char *a2, ...)
{
  return _[a1 lastPublicKeyRefresh];
}

id objc_msgSend_lastPush(void *a1, const char *a2, ...)
{
  return _[a1 lastPush];
}

id objc_msgSend_lastRegistration(void *a1, const char *a2, ...)
{
  return _[a1 lastRegistration];
}

id objc_msgSend_lastReport(void *a1, const char *a2, ...)
{
  return _[a1 lastReport];
}

id objc_msgSend_lastSelfIDSFetch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastSelfIDSFetch:");
}

id objc_msgSend_lastSelfValidate(void *a1, const char *a2, ...)
{
  return _[a1 lastSelfValidate];
}

id objc_msgSend_lastSignalIDS(void *a1, const char *a2, ...)
{
  return _[a1 lastSignalIDS];
}

id objc_msgSend_lastUnlockedTime(void *a1, const char *a2, ...)
{
  return _[a1 lastUnlockedTime];
}

id objc_msgSend_lastValidateSelf(void *a1, const char *a2, ...)
{
  return _[a1 lastValidateSelf];
}

id objc_msgSend_lastValidateSelfOptIn(void *a1, const char *a2, ...)
{
  return _[a1 lastValidateSelfOptIn];
}

id objc_msgSend_latestConsistencyVerifiedTreeHeadRevision_logBeginMs_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "latestConsistencyVerifiedTreeHeadRevision:logBeginMs:error:");
}

id objc_msgSend_latestConsistencyVerifiedTreeHeadSTH_logBeginMs_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "latestConsistencyVerifiedTreeHeadSTH:logBeginMs:error:");
}

id objc_msgSend_launch(void *a1, const char *a2, ...)
{
  return _[a1 launch];
}

id objc_msgSend_launchCloudSyncing_initialDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchCloudSyncing:initialDelay:");
}

id objc_msgSend_leafHash_index_treeId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leafHash:index:treeId:");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_lengthDelimitedList(void *a1, const char *a2, ...)
{
  return _[a1 lengthDelimitedList];
}

id objc_msgSend_lengthOfBytesUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lengthOfBytesUsingEncoding:");
}

id objc_msgSend_listPeerOverrides(void *a1, const char *a2, ...)
{
  return _[a1 listPeerOverrides];
}

id objc_msgSend_listStaticKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listStaticKey:");
}

id objc_msgSend_liveRequest(void *a1, const char *a2, ...)
{
  return _[a1 liveRequest];
}

id objc_msgSend_liveRequestReceived(void *a1, const char *a2, ...)
{
  return _[a1 liveRequestReceived];
}

id objc_msgSend_loadAccountMetadata(void *a1, const char *a2, ...)
{
  return _[a1 loadAccountMetadata];
}

id objc_msgSend_loadComplete(void *a1, const char *a2, ...)
{
  return _[a1 loadComplete];
}

id objc_msgSend_loadPersistentStores(void *a1, const char *a2, ...)
{
  return _[a1 loadPersistentStores];
}

id objc_msgSend_loadPersistentStoresWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadPersistentStoresWithCompletionHandler:");
}

id objc_msgSend_loadedStore(void *a1, const char *a2, ...)
{
  return _[a1 loadedStore];
}

id objc_msgSend_localNC(void *a1, const char *a2, ...)
{
  return _[a1 localNC];
}

id objc_msgSend_localeWithLocaleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localeWithLocaleIdentifier:");
}

id objc_msgSend_lockStateProvider(void *a1, const char *a2, ...)
{
  return _[a1 lockStateProvider];
}

id objc_msgSend_lockStateTracker(void *a1, const char *a2, ...)
{
  return _[a1 lockStateTracker];
}

id objc_msgSend_lockedError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockedError:");
}

id objc_msgSend_log(void *a1, const char *a2, ...)
{
  return _[a1 log];
}

id objc_msgSend_logBeginTime(void *a1, const char *a2, ...)
{
  return _[a1 logBeginTime];
}

id objc_msgSend_logBeginningMs(void *a1, const char *a2, ...)
{
  return _[a1 logBeginningMs];
}

id objc_msgSend_logClient(void *a1, const char *a2, ...)
{
  return _[a1 logClient];
}

id objc_msgSend_logEntryArray(void *a1, const char *a2, ...)
{
  return _[a1 logEntryArray];
}

id objc_msgSend_logFinishFailureEvent_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logFinishFailureEvent:error:");
}

id objc_msgSend_logFinishSuccessEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logFinishSuccessEvent:");
}

id objc_msgSend_logHardFailureForEventNamed_withAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logHardFailureForEventNamed:withAttributes:");
}

id objc_msgSend_logHead(void *a1, const char *a2, ...)
{
  return _[a1 logHead];
}

id objc_msgSend_logHeadHash(void *a1, const char *a2, ...)
{
  return _[a1 logHeadHash];
}

id objc_msgSend_logMetric_withName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logMetric:withName:");
}

id objc_msgSend_logMetricsForApplication_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logMetricsForApplication:error:");
}

id objc_msgSend_logRequestMetricsForApplication_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logRequestMetricsForApplication:error:");
}

id objc_msgSend_logResultForEvent_hardFailure_result_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logResultForEvent:hardFailure:result:");
}

id objc_msgSend_logResultForEvent_hardFailure_result_withAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logResultForEvent:hardFailure:result:withAttributes:");
}

id objc_msgSend_logSMTMetricsForApplication_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logSMTMetricsForApplication:error:");
}

id objc_msgSend_logSTHMetricsForApplication_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logSTHMetricsForApplication:error:");
}

id objc_msgSend_logSharedMetrics(void *a1, const char *a2, ...)
{
  return _[a1 logSharedMetrics];
}

id objc_msgSend_logSize(void *a1, const char *a2, ...)
{
  return _[a1 logSize];
}

id objc_msgSend_logSoftFailureForEventNamed_withAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logSoftFailureForEventNamed:withAttributes:");
}

id objc_msgSend_logStartEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logStartEvent:");
}

id objc_msgSend_logSuccessForEventNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logSuccessForEventNamed:");
}

id objc_msgSend_logType(void *a1, const char *a2, ...)
{
  return _[a1 logType];
}

id objc_msgSend_loggableData(void *a1, const char *a2, ...)
{
  return _[a1 loggableData];
}

id objc_msgSend_loggableDatas(void *a1, const char *a2, ...)
{
  return _[a1 loggableDatas];
}

id objc_msgSend_logger(void *a1, const char *a2, ...)
{
  return _[a1 logger];
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _[a1 longLongValue];
}

id objc_msgSend_longValue(void *a1, const char *a2, ...)
{
  return _[a1 longValue];
}

id objc_msgSend_machineId(void *a1, const char *a2, ...)
{
  return _[a1 machineId];
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _[a1 mainBundle];
}

id objc_msgSend_mainQueue(void *a1, const char *a2, ...)
{
  return _[a1 mainQueue];
}

id objc_msgSend_mainQueueDataStore(void *a1, const char *a2, ...)
{
  return _[a1 mainQueueDataStore];
}

id objc_msgSend_mainRunLoop(void *a1, const char *a2, ...)
{
  return _[a1 mainRunLoop];
}

id objc_msgSend_makeOperationDependency(void *a1, const char *a2, ...)
{
  return _[a1 makeOperationDependency];
}

id objc_msgSend_makeReports_additionalData_auditorURI_logClient_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeReports:additionalData:auditorURI:logClient:completionBlock:");
}

id objc_msgSend_managedObjectContext(void *a1, const char *a2, ...)
{
  return _[a1 managedObjectContext];
}

id objc_msgSend_managedObjectContextWithMergePolicy(void *a1, const char *a2, ...)
{
  return _[a1 managedObjectContextWithMergePolicy];
}

id objc_msgSend_managedObjectModel(void *a1, const char *a2, ...)
{
  return _[a1 managedObjectModel];
}

id objc_msgSend_manager(void *a1, const char *a2, ...)
{
  return _[a1 manager];
}

id objc_msgSend_manateeChanged(void *a1, const char *a2, ...)
{
  return _[a1 manateeChanged];
}

id objc_msgSend_manateeStatusForReporting(void *a1, const char *a2, ...)
{
  return _[a1 manateeStatusForReporting];
}

id objc_msgSend_manateeViewChangedScheduler(void *a1, const char *a2, ...)
{
  return _[a1 manateeViewChangedScheduler];
}

id objc_msgSend_mapContactsToIDS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mapContactsToIDS:");
}

id objc_msgSend_mapEntry(void *a1, const char *a2, ...)
{
  return _[a1 mapEntry];
}

id objc_msgSend_mapHead(void *a1, const char *a2, ...)
{
  return _[a1 mapHead];
}

id objc_msgSend_mapHeadHash(void *a1, const char *a2, ...)
{
  return _[a1 mapHeadHash];
}

id objc_msgSend_mapHeadUpdated_populating_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mapHeadUpdated:populating:");
}

id objc_msgSend_mapKeyDataType(void *a1, const char *a2, ...)
{
  return _[a1 mapKeyDataType];
}

id objc_msgSend_mapLeaf(void *a1, const char *a2, ...)
{
  return _[a1 mapLeaf];
}

id objc_msgSend_mapLeafWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mapLeafWithError:");
}

id objc_msgSend_mapStaticKeyToStoreEntry_handles_moc_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mapStaticKeyToStoreEntry:handles:moc:error:");
}

id objc_msgSend_mapStillPopulating(void *a1, const char *a2, ...)
{
  return _[a1 mapStillPopulating];
}

id objc_msgSend_mapType(void *a1, const char *a2, ...)
{
  return _[a1 mapType];
}

id objc_msgSend_mappings(void *a1, const char *a2, ...)
{
  return _[a1 mappings];
}

id objc_msgSend_markAccountsWithMutationMs_except_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markAccountsWithMutationMs:except:");
}

id objc_msgSend_markClientDatasForAppVersion_mutationMs_except_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markClientDatasForAppVersion:mutationMs:except:");
}

id objc_msgSend_markWithMutationMs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markWithMutationMs:");
}

id objc_msgSend_marked_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "marked:");
}

id objc_msgSend_markedForDeletion(void *a1, const char *a2, ...)
{
  return _[a1 markedForDeletion];
}

id objc_msgSend_markedForDeletionMs(void *a1, const char *a2, ...)
{
  return _[a1 markedForDeletionMs];
}

id objc_msgSend_markedSigned(void *a1, const char *a2, ...)
{
  return _[a1 markedSigned];
}

id objc_msgSend_maximumDelay(void *a1, const char *a2, ...)
{
  return _[a1 maximumDelay];
}

id objc_msgSend_maybeCreateNewCKFetch(void *a1, const char *a2, ...)
{
  return _[a1 maybeCreateNewCKFetch];
}

id objc_msgSend_maybeCreateServerOptInFetch(void *a1, const char *a2, ...)
{
  return _[a1 maybeCreateServerOptInFetch];
}

id objc_msgSend_maybeDoFastExit(void *a1, const char *a2, ...)
{
  return _[a1 maybeDoFastExit];
}

id objc_msgSend_maybeUpdateMonitorState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maybeUpdateMonitorState:");
}

id objc_msgSend_member_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "member:");
}

id objc_msgSend_memoizedKTSelfStatusResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "memoizedKTSelfStatusResult:");
}

id objc_msgSend_mergeByPropertyStoreTrumpMergePolicy(void *a1, const char *a2, ...)
{
  return _[a1 mergeByPropertyStoreTrumpMergePolicy];
}

id objc_msgSend_mergeDelimitedFromCodedInputStream_extensionRegistry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeDelimitedFromCodedInputStream:extensionRegistry:");
}

id objc_msgSend_mergeFieldFrom_input_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeFieldFrom:input:");
}

id objc_msgSend_mergeFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeFrom:");
}

id objc_msgSend_mergeFromCodedInputStream_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeFromCodedInputStream:");
}

id objc_msgSend_mergeFromCodedInputStream_extensionRegistry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeFromCodedInputStream:extensionRegistry:");
}

id objc_msgSend_mergeFromData_extensionRegistry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeFromData:extensionRegistry:");
}

id objc_msgSend_mergeResult(void *a1, const char *a2, ...)
{
  return _[a1 mergeResult];
}

id objc_msgSend_mergeUnknownFields_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeUnknownFields:");
}

id objc_msgSend_mergeVarintField_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeVarintField:value:");
}

id objc_msgSend_message(void *a1, const char *a2, ...)
{
  return _[a1 message];
}

id objc_msgSend_messageClass(void *a1, const char *a2, ...)
{
  return _[a1 messageClass];
}

id objc_msgSend_messagesStatus(void *a1, const char *a2, ...)
{
  return _[a1 messagesStatus];
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return _[a1 metadata];
}

id objc_msgSend_metadataForInsertResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metadataForInsertResponse:");
}

id objc_msgSend_methodReturnType(void *a1, const char *a2, ...)
{
  return _[a1 methodReturnType];
}

id objc_msgSend_methodSignatureForSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "methodSignatureForSelector:");
}

id objc_msgSend_metricsForResult_type_logger_applicationID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metricsForResult:type:logger:applicationID:");
}

id objc_msgSend_metricsQueue(void *a1, const char *a2, ...)
{
  return _[a1 metricsQueue];
}

id objc_msgSend_metricsRegistration_idsView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metricsRegistration_idsView");
}

id objc_msgSend_metricsRegistration_ktView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metricsRegistration_ktView");
}

id objc_msgSend_metricsTimeToCreate(void *a1, const char *a2, ...)
{
  return _[a1 metricsTimeToCreate];
}

id objc_msgSend_minusSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minusSet:");
}

id objc_msgSend_missingValidateSelfFallbackDiagnostics(void *a1, const char *a2, ...)
{
  return _[a1 missingValidateSelfFallbackDiagnostics];
}

id objc_msgSend_mmdVerified(void *a1, const char *a2, ...)
{
  return _[a1 mmdVerified];
}

id objc_msgSend_model(void *a1, const char *a2, ...)
{
  return _[a1 model];
}

id objc_msgSend_mostRecentCompleted(void *a1, const char *a2, ...)
{
  return _[a1 mostRecentCompleted];
}

id objc_msgSend_mostRecentSuccess(void *a1, const char *a2, ...)
{
  return _[a1 mostRecentSuccess];
}

id objc_msgSend_mostRecentVerification(void *a1, const char *a2, ...)
{
  return _[a1 mostRecentVerification];
}

id objc_msgSend_moveAsideDatabase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveAsideDatabase:");
}

id objc_msgSend_movedDatabase(void *a1, const char *a2, ...)
{
  return _[a1 movedDatabase];
}

id objc_msgSend_msgClass(void *a1, const char *a2, ...)
{
  return _[a1 msgClass];
}

id objc_msgSend_mutableBytes(void *a1, const char *a2, ...)
{
  return _[a1 mutableBytes];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_mutableCopyWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableCopyWithZone:");
}

id objc_msgSend_mutableFieldForNumber_create_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableFieldForNumber:create:");
}

id objc_msgSend_mutableStateConditions(void *a1, const char *a2, ...)
{
  return _[a1 mutableStateConditions];
}

id objc_msgSend_mutation(void *a1, const char *a2, ...)
{
  return _[a1 mutation];
}

id objc_msgSend_mutationMs(void *a1, const char *a2, ...)
{
  return _[a1 mutationMs];
}

id objc_msgSend_mutationType(void *a1, const char *a2, ...)
{
  return _[a1 mutationType];
}

id objc_msgSend_mutationVersion(void *a1, const char *a2, ...)
{
  return _[a1 mutationVersion];
}

id objc_msgSend_mutationsFromSMTs_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutationsFromSMTs:error:");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_named_entering_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "named:entering:");
}

id objc_msgSend_named_intending_errorState_withBlockTakingSelf_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "named:intending:errorState:withBlockTakingSelf:");
}

id objc_msgSend_named_withBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "named:withBlock:");
}

id objc_msgSend_named_withBlockTakingSelf_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "named:withBlockTakingSelf:");
}

id objc_msgSend_nanos(void *a1, const char *a2, ...)
{
  return _[a1 nanos];
}

id objc_msgSend_needReset(void *a1, const char *a2, ...)
{
  return _[a1 needReset];
}

id objc_msgSend_needsReauthorization_metadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsReauthorization:metadata:");
}

id objc_msgSend_needsRefresh(void *a1, const char *a2, ...)
{
  return _[a1 needsRefresh];
}

id objc_msgSend_needsRetry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsRetry:");
}

id objc_msgSend_needsTimeShift_metadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsTimeShift:metadata:");
}

id objc_msgSend_networkMonitor(void *a1, const char *a2, ...)
{
  return _[a1 networkMonitor];
}

id objc_msgSend_networkTimeout(void *a1, const char *a2, ...)
{
  return _[a1 networkTimeout];
}

id objc_msgSend_networkTimeoutOperation(void *a1, const char *a2, ...)
{
  return _[a1 networkTimeoutOperation];
}

id objc_msgSend_networkWithFeedback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "networkWithFeedback:");
}

id objc_msgSend_networkingWorkloop(void *a1, const char *a2, ...)
{
  return _[a1 networkingWorkloop];
}

id objc_msgSend_newBackgroundContext(void *a1, const char *a2, ...)
{
  return _[a1 newBackgroundContext];
}

id objc_msgSend_newCKFetch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newCKFetch:");
}

id objc_msgSend_newCKRequests(void *a1, const char *a2, ...)
{
  return _[a1 newCKRequests];
}

id objc_msgSend_newServerOptInFetch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newServerOptInFetch:");
}

id objc_msgSend_newServerOptInRequests(void *a1, const char *a2, ...)
{
  return _[a1 newServerOptInRequests];
}

id objc_msgSend_newestMapRevision_logBeginMs_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newestMapRevision:logBeginMs:error:");
}

id objc_msgSend_nextFireTime(void *a1, const char *a2, ...)
{
  return _[a1 nextFireTime];
}

id objc_msgSend_nextObject(void *a1, const char *a2, ...)
{
  return _[a1 nextObject];
}

id objc_msgSend_nextState(void *a1, const char *a2, ...)
{
  return _[a1 nextState];
}

id objc_msgSend_nextStateMachineCycleOperation(void *a1, const char *a2, ...)
{
  return _[a1 nextStateMachineCycleOperation];
}

id objc_msgSend_nextStep_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextStep:");
}

id objc_msgSend_nfs(void *a1, const char *a2, ...)
{
  return _[a1 nfs];
}

id objc_msgSend_nfsReporting(void *a1, const char *a2, ...)
{
  return _[a1 nfsReporting];
}

id objc_msgSend_nodeBytes(void *a1, const char *a2, ...)
{
  return _[a1 nodeBytes];
}

id objc_msgSend_nodePosition(void *a1, const char *a2, ...)
{
  return _[a1 nodePosition];
}

id objc_msgSend_nodeType(void *a1, const char *a2, ...)
{
  return _[a1 nodeType];
}

id objc_msgSend_noteEventNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteEventNamed:");
}

id objc_msgSend_noteLaunchSequence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "noteLaunchSequence:");
}

id objc_msgSend_notificationCenter(void *a1, const char *a2, ...)
{
  return _[a1 notificationCenter];
}

id objc_msgSend_notificationKey(void *a1, const char *a2, ...)
{
  return _[a1 notificationKey];
}

id objc_msgSend_notificationKeyForApplication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationKeyForApplication:");
}

id objc_msgSend_notifyBackgroundValidationFailure_data_type_serverHint_failure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyBackgroundValidationFailure:data:type:serverHint:failure:");
}

id objc_msgSend_notifyCKAccountStatusChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyCKAccountStatusChange:");
}

id objc_msgSend_notifyIDSRegistrationCorrect(void *a1, const char *a2, ...)
{
  return _[a1 notifyIDSRegistrationCorrect];
}

id objc_msgSend_notifyOptInStatusChanged(void *a1, const char *a2, ...)
{
  return _[a1 notifyOptInStatusChanged];
}

id objc_msgSend_notifyPushChange_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyPushChange:userInfo:");
}

id objc_msgSend_notifyTreeResetDetected_logTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyTreeResetDetected:logTimestamp:");
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return _[a1 now];
}

id objc_msgSend_nsDNC(void *a1, const char *a2, ...)
{
  return _[a1 nsDNC];
}

id objc_msgSend_nsnotificationCenterClass(void *a1, const char *a2, ...)
{
  return _[a1 nsnotificationCenterClass];
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _[a1 null];
}

id objc_msgSend_number(void *a1, const char *a2, ...)
{
  return _[a1 number];
}

id objc_msgSend_numberPropertyForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberPropertyForKey:");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithFloat:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLong:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_numberWithUnsignedChar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedChar:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_objcPrefix(void *a1, const char *a2, ...)
{
  return _[a1 objcPrefix];
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return _[a1 object];
}

id objc_msgSend_objectAtColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtColumn:");
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 objectEnumerator];
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_objectMapHead(void *a1, const char *a2, ...)
{
  return _[a1 objectMapHead];
}

id objc_msgSend_objectsAtIndexes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectsAtIndexes:");
}

id objc_msgSend_octagonControl(void *a1, const char *a2, ...)
{
  return _[a1 octagonControl];
}

id objc_msgSend_octagonObserver(void *a1, const char *a2, ...)
{
  return _[a1 octagonObserver];
}

id objc_msgSend_octagonOperations(void *a1, const char *a2, ...)
{
  return _[a1 octagonOperations];
}

id objc_msgSend_octagonStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "octagonStatus:");
}

id objc_msgSend_octagonToken(void *a1, const char *a2, ...)
{
  return _[a1 octagonToken];
}

id objc_msgSend_octagonTrusted(void *a1, const char *a2, ...)
{
  return _[a1 octagonTrusted];
}

id objc_msgSend_oldAppRootCertsArray(void *a1, const char *a2, ...)
{
  return _[a1 oldAppRootCertsArray];
}

id objc_msgSend_oldAppRootCertsArray_Count(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "oldAppRootCertsArray_Count");
}

id objc_msgSend_oldTltRootCertsArray(void *a1, const char *a2, ...)
{
  return _[a1 oldTltRootCertsArray];
}

id objc_msgSend_oldTltRootCertsArray_Count(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "oldTltRootCertsArray_Count");
}

id objc_msgSend_onMocCountEntity_predicate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMocCountEntity:predicate:error:");
}

id objc_msgSend_onMocFetchVerificationForVerificationId_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMocFetchVerificationForVerificationId:error:");
}

id objc_msgSend_onMocLogVerificationMetricsForApplication_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMocLogVerificationMetricsForApplication:error:");
}

id objc_msgSend_onMocSetMapHead_inclusionResult_inclusionError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMocSetMapHead:inclusionResult:inclusionError:");
}

id objc_msgSend_onMocSetMapHead_mmdResult_mmdError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMocSetMapHead:mmdResult:mmdError:");
}

id objc_msgSend_onMocSetMapHead_signatureResult_signatureError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMocSetMapHead:signatureResult:signatureError:");
}

id objc_msgSend_onMocSetPendingResultForVerification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMocSetPendingResultForVerification:");
}

id objc_msgSend_onQueueDrain(void *a1, const char *a2, ...)
{
  return _[a1 onQueueDrain];
}

id objc_msgSend_onQueueMergeChangesFromContacts(void *a1, const char *a2, ...)
{
  return _[a1 onQueueMergeChangesFromContacts];
}

id objc_msgSend_onQueueProcessStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onQueueProcessStatus:");
}

id objc_msgSend_oneofs(void *a1, const char *a2, ...)
{
  return _[a1 oneofs];
}

id objc_msgSend_onqueueCheckExpectedFailure_attempt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onqueueCheckExpectedFailure:attempt:");
}

id objc_msgSend_onqueueEnterState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onqueueEnterState:");
}

id objc_msgSend_onqueueHandleTransition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onqueueHandleTransition:");
}

id objc_msgSend_onqueueProcessTransition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onqueueProcessTransition:");
}

id objc_msgSend_onqueueStartFinishOperation(void *a1, const char *a2, ...)
{
  return _[a1 onqueueStartFinishOperation];
}

id objc_msgSend_onqueueStartFinishOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onqueueStartFinishOperation:");
}

id objc_msgSend_opUUID(void *a1, const char *a2, ...)
{
  return _[a1 opUUID];
}

id objc_msgSend_opUUIDData(void *a1, const char *a2, ...)
{
  return _[a1 opUUIDData];
}

id objc_msgSend_open(void *a1, const char *a2, ...)
{
  return _[a1 open];
}

id objc_msgSend_operatingSystemVersion(void *a1, const char *a2, ...)
{
  return _[a1 operatingSystemVersion];
}

id objc_msgSend_operatingSystemVersionString(void *a1, const char *a2, ...)
{
  return _[a1 operatingSystemVersionString];
}

id objc_msgSend_operationCount(void *a1, const char *a2, ...)
{
  return _[a1 operationCount];
}

id objc_msgSend_operationDependency(void *a1, const char *a2, ...)
{
  return _[a1 operationDependency];
}

id objc_msgSend_operationDependencyDescriptionCode(void *a1, const char *a2, ...)
{
  return _[a1 operationDependencyDescriptionCode];
}

id objc_msgSend_operationQueue(void *a1, const char *a2, ...)
{
  return _[a1 operationQueue];
}

id objc_msgSend_operationStateString(void *a1, const char *a2, ...)
{
  return _[a1 operationStateString];
}

id objc_msgSend_operationWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationWithBlock:");
}

id objc_msgSend_operations(void *a1, const char *a2, ...)
{
  return _[a1 operations];
}

id objc_msgSend_optIn(void *a1, const char *a2, ...)
{
  return _[a1 optIn];
}

id objc_msgSend_optInAfter_accountKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "optInAfter:accountKey:");
}

id objc_msgSend_optInDate(void *a1, const char *a2, ...)
{
  return _[a1 optInDate];
}

id objc_msgSend_optInHistory(void *a1, const char *a2, ...)
{
  return _[a1 optInHistory];
}

id objc_msgSend_optInHistoryDescription(void *a1, const char *a2, ...)
{
  return _[a1 optInHistoryDescription];
}

id objc_msgSend_optInKey(void *a1, const char *a2, ...)
{
  return _[a1 optInKey];
}

id objc_msgSend_optInKeyForApplication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "optInKeyForApplication:");
}

id objc_msgSend_optInManagerOptInState_sync_store_complete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "optInManagerOptInState:sync:store:complete:");
}

id objc_msgSend_optInOut(void *a1, const char *a2, ...)
{
  return _[a1 optInOut];
}

id objc_msgSend_optInOutHistory(void *a1, const char *a2, ...)
{
  return _[a1 optInOutHistory];
}

id objc_msgSend_optInOutHistoryJsonArray(void *a1, const char *a2, ...)
{
  return _[a1 optInOutHistoryJsonArray];
}

id objc_msgSend_optInOutMutation(void *a1, const char *a2, ...)
{
  return _[a1 optInOutMutation];
}

id objc_msgSend_optInRecord(void *a1, const char *a2, ...)
{
  return _[a1 optInRecord];
}

id objc_msgSend_optInServer(void *a1, const char *a2, ...)
{
  return _[a1 optInServer];
}

id objc_msgSend_optInState(void *a1, const char *a2, ...)
{
  return _[a1 optInState];
}

id objc_msgSend_optInStateForKeyStore_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "optInStateForKeyStore:error:");
}

id objc_msgSend_optInStateForUri_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "optInStateForUri:completionHandler:");
}

id objc_msgSend_optInStates(void *a1, const char *a2, ...)
{
  return _[a1 optInStates];
}

id objc_msgSend_optInStatus(void *a1, const char *a2, ...)
{
  return _[a1 optInStatus];
}

id objc_msgSend_optInTernaryState(void *a1, const char *a2, ...)
{
  return _[a1 optInTernaryState];
}

id objc_msgSend_optOutWhenNotEligble_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "optOutWhenNotEligble:error:");
}

id objc_msgSend_optedIn(void *a1, const char *a2, ...)
{
  return _[a1 optedIn];
}

id objc_msgSend_options(void *a1, const char *a2, ...)
{
  return _[a1 options];
}

id objc_msgSend_orderedTimestamp(void *a1, const char *a2, ...)
{
  return _[a1 orderedTimestamp];
}

id objc_msgSend_originalRequest(void *a1, const char *a2, ...)
{
  return _[a1 originalRequest];
}

id objc_msgSend_osVersion(void *a1, const char *a2, ...)
{
  return _[a1 osVersion];
}

id objc_msgSend_output(void *a1, const char *a2, ...)
{
  return _[a1 output];
}

id objc_msgSend_outstandingCreationSignal(void *a1, const char *a2, ...)
{
  return _[a1 outstandingCreationSignal];
}

id objc_msgSend_outstandingRemoteFetchSignal(void *a1, const char *a2, ...)
{
  return _[a1 outstandingRemoteFetchSignal];
}

id objc_msgSend_overrideBeginTime(void *a1, const char *a2, ...)
{
  return _[a1 overrideBeginTime];
}

id objc_msgSend_overrideReversePushConfig(void *a1, const char *a2, ...)
{
  return _[a1 overrideReversePushConfig];
}

id objc_msgSend_overrideReversePushPercentage(void *a1, const char *a2, ...)
{
  return _[a1 overrideReversePushPercentage];
}

id objc_msgSend_packWithMessage_typeURLPrefix_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "packWithMessage:typeURLPrefix:error:");
}

id objc_msgSend_package(void *a1, const char *a2, ...)
{
  return _[a1 package];
}

id objc_msgSend_pamHeadInPatProof(void *a1, const char *a2, ...)
{
  return _[a1 pamHeadInPatProof];
}

id objc_msgSend_parseBool_end_result_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseBool:end:result:");
}

id objc_msgSend_parseByte_end_result_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseByte:end:result:");
}

id objc_msgSend_parseByteArray_end_minLength_maxLength_result_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseByteArray:end:minLength:maxLength:result:");
}

id objc_msgSend_parseExtensions_end_result_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseExtensions:end:result:");
}

id objc_msgSend_parseFromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseFromData:error:");
}

id objc_msgSend_parseHashValue_end_result_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseHashValue:end:result:");
}

id objc_msgSend_parseMessageSet_extensionRegistry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseMessageSet:extensionRegistry:");
}

id objc_msgSend_parseOptInOutExtension_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseOptInOutExtension:error:");
}

id objc_msgSend_parseQueryRequestFromKTRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseQueryRequestFromKTRequest:error:");
}

id objc_msgSend_parseQueryResponseFromKTRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseQueryResponseFromKTRequest:error:");
}

id objc_msgSend_parseSTHData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseSTHData:error:");
}

id objc_msgSend_parseUint64_end_result_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseUint64:end:result:");
}

id objc_msgSend_parseUnknownField_extensionRegistry_tag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseUnknownField:extensionRegistry:tag:");
}

id objc_msgSend_parseVRFOutput_end_result_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseVRFOutput:end:result:");
}

id objc_msgSend_parsedLength(void *a1, const char *a2, ...)
{
  return _[a1 parsedLength];
}

id objc_msgSend_parsedLogHead(void *a1, const char *a2, ...)
{
  return _[a1 parsedLogHead];
}

id objc_msgSend_parsedMapHead(void *a1, const char *a2, ...)
{
  return _[a1 parsedMapHead];
}

id objc_msgSend_parsedMutationWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parsedMutationWithError:");
}

id objc_msgSend_patClosedProof(void *a1, const char *a2, ...)
{
  return _[a1 patClosedProof];
}

id objc_msgSend_patConfigProof(void *a1, const char *a2, ...)
{
  return _[a1 patConfigProof];
}

id objc_msgSend_patEarliestVersion(void *a1, const char *a2, ...)
{
  return _[a1 patEarliestVersion];
}

id objc_msgSend_patHead(void *a1, const char *a2, ...)
{
  return _[a1 patHead];
}

id objc_msgSend_patLogBeginningMs(void *a1, const char *a2, ...)
{
  return _[a1 patLogBeginningMs];
}

id objc_msgSend_patSigningKeyWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "patSigningKeyWithError:");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _[a1 path];
}

id objc_msgSend_pathFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathFromDictionary:");
}

id objc_msgSend_pathStep(void *a1, const char *a2, ...)
{
  return _[a1 pathStep];
}

id objc_msgSend_paused(void *a1, const char *a2, ...)
{
  return _[a1 paused];
}

id objc_msgSend_pcsOperation(void *a1, const char *a2, ...)
{
  return _[a1 pcsOperation];
}

id objc_msgSend_pcsOperationsClass(void *a1, const char *a2, ...)
{
  return _[a1 pcsOperationsClass];
}

id objc_msgSend_pcsOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pcsOptions:");
}

id objc_msgSend_peerIndexAtDepth_leafIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "peerIndexAtDepth:leafIndex:");
}

id objc_msgSend_peerOverrides(void *a1, const char *a2, ...)
{
  return _[a1 peerOverrides];
}

id objc_msgSend_peerOverridesStore(void *a1, const char *a2, ...)
{
  return _[a1 peerOverridesStore];
}

id objc_msgSend_peerQueue(void *a1, const char *a2, ...)
{
  return _[a1 peerQueue];
}

id objc_msgSend_peerState(void *a1, const char *a2, ...)
{
  return _[a1 peerState];
}

id objc_msgSend_peerStaticKeyFallback_accountKey_transparentData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "peerStaticKeyFallback:accountKey:transparentData:");
}

id objc_msgSend_peerVerificationFinishedWithResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "peerVerificationFinishedWithResults:");
}

id objc_msgSend_peerVerificationIdForUri_application_verificationInfo_newerThan_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "peerVerificationIdForUri:application:verificationInfo:newerThan:error:");
}

id objc_msgSend_peerVerificationUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "peerVerificationUpdated:");
}

id objc_msgSend_peers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "peers:");
}

id objc_msgSend_pendingDependenciesString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingDependenciesString:");
}

id objc_msgSend_pendingFlags(void *a1, const char *a2, ...)
{
  return _[a1 pendingFlags];
}

id objc_msgSend_pendingFlagsScheduler(void *a1, const char *a2, ...)
{
  return _[a1 pendingFlagsScheduler];
}

id objc_msgSend_pendingFlagsString(void *a1, const char *a2, ...)
{
  return _[a1 pendingFlagsString];
}

id objc_msgSend_pendingSmtsArray(void *a1, const char *a2, ...)
{
  return _[a1 pendingSmtsArray];
}

id objc_msgSend_pendingSmtsArray_Count(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingSmtsArray_Count");
}

id objc_msgSend_pendingStatusChanges(void *a1, const char *a2, ...)
{
  return _[a1 pendingStatusChanges];
}

id objc_msgSend_pendingValidationsComplete(void *a1, const char *a2, ...)
{
  return _[a1 pendingValidationsComplete];
}

id objc_msgSend_pendingVerificationURIs_fetchLimit_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingVerificationURIs:fetchLimit:error:");
}

id objc_msgSend_perApplicationTreeEntry(void *a1, const char *a2, ...)
{
  return _[a1 perApplicationTreeEntry];
}

id objc_msgSend_percentageForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "percentageForKey:");
}

id objc_msgSend_performAndWaitForDeviceId_application_error_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAndWaitForDeviceId:application:error:block:");
}

id objc_msgSend_performAndWaitForDownloadId_error_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAndWaitForDownloadId:error:block:");
}

id objc_msgSend_performAndWaitForFailedEventId_error_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAndWaitForFailedEventId:error:block:");
}

id objc_msgSend_performAndWaitForFetchId_error_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAndWaitForFetchId:error:block:");
}

id objc_msgSend_performAndWaitForLatestSelfRequest_accountKey_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAndWaitForLatestSelfRequest:accountKey:block:");
}

id objc_msgSend_performAndWaitForPeer_application_error_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAndWaitForPeer:application:error:block:");
}

id objc_msgSend_performAndWaitForRequestId_error_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAndWaitForRequestId:error:block:");
}

id objc_msgSend_performAndWaitForRpcId_error_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAndWaitForRpcId:error:block:");
}

id objc_msgSend_performAndWaitForSelfValidate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAndWaitForSelfValidate:");
}

id objc_msgSend_performAndWaitForVerificationId_error_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performAndWaitForVerificationId:error:block:");
}

id objc_msgSend_performBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlock:");
}

id objc_msgSend_performBlockAndWait_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlockAndWait:");
}

id objc_msgSend_performBlockAndWaitWithMoc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlockAndWaitWithMoc:");
}

id objc_msgSend_performBlockWithSelfState_uri_error_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlockWithSelfState:uri:error:block:");
}

id objc_msgSend_performForPendingSMTs_uri_error_batchSize_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performForPendingSMTs:uri:error:batchSize:block:");
}

id objc_msgSend_performForPendingSTHs_olderThan_type_error_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performForPendingSTHs:olderThan:type:error:block:");
}

id objc_msgSend_performForPendingVerfications_uri_responseOlderThan_error_batchSize_block_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performForPendingVerfications:uri:responseOlderThan:error:batchSize:block:");
}

id objc_msgSend_performForRequestsWithPendingResponses_error_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performForRequestsWithPendingResponses:error:block:");
}

id objc_msgSend_performForSMHsWithUnverifiedMMD_error_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performForSMHsWithUnverifiedMMD:error:block:");
}

id objc_msgSend_performForSMTsWithUnverifiedSignature_error_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performForSMTsWithUnverifiedSignature:error:block:");
}

id objc_msgSend_performForSTHs_isMapHead_revision_error_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performForSTHs:isMapHead:revision:error:block:");
}

id objc_msgSend_performForSTHsWithUnverifiedSignature_error_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performForSTHsWithUnverifiedSignature:error:block:");
}

id objc_msgSend_performOnBatchesOfEntity_predicate_enforceMax_error_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performOnBatchesOfEntity:predicate:enforceMax:error:block:");
}

id objc_msgSend_performOnRequestsForPredicate_enforceMax_error_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performOnRequestsForPredicate:enforceMax:error:block:");
}

id objc_msgSend_performRegistrationSignatures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performRegistrationSignatures:");
}

id objc_msgSend_persistAccountChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistAccountChanges:");
}

id objc_msgSend_persistAndRefaultObject_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistAndRefaultObject:error:");
}

id objc_msgSend_persistAndRefaultObjects_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistAndRefaultObjects:error:");
}

id objc_msgSend_persistWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistWithError:");
}

id objc_msgSend_persistentContainer(void *a1, const char *a2, ...)
{
  return _[a1 persistentContainer];
}

id objc_msgSend_persistentContainerWithName_managedObjectModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentContainerWithName:managedObjectModel:");
}

id objc_msgSend_persistentStoreCoordinator(void *a1, const char *a2, ...)
{
  return _[a1 persistentStoreCoordinator];
}

id objc_msgSend_persistentStoreDescriptionWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentStoreDescriptionWithURL:");
}

id objc_msgSend_persistentStoreDescriptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentStoreDescriptions:");
}

id objc_msgSend_persistentStoreForURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentStoreForURL:");
}

id objc_msgSend_phoneNumbers(void *a1, const char *a2, ...)
{
  return _[a1 phoneNumbers];
}

id objc_msgSend_pointerValue(void *a1, const char *a2, ...)
{
  return _[a1 pointerValue];
}

id objc_msgSend_pokeIDS(void *a1, const char *a2, ...)
{
  return _[a1 pokeIDS];
}

id objc_msgSend_populateExistingRequestsToLookupTable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "populateExistingRequestsToLookupTable:");
}

id objc_msgSend_populateMissingLogHeadHashes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "populateMissingLogHeadHashes:");
}

id objc_msgSend_populating(void *a1, const char *a2, ...)
{
  return _[a1 populating];
}

id objc_msgSend_postChangeForEntry_publicAccountIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postChangeForEntry:publicAccountIdentity:");
}

id objc_msgSend_postFollowup_type_eventId_errorCode_optInState_infoLink_additionalInfo_error_( void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postFollowup:type:eventId:errorCode:optInState:infoLink:additionalInfo:error:");
}

id objc_msgSend_postKTDisabledFollowup(void *a1, const char *a2, ...)
{
  return _[a1 postKTDisabledFollowup];
}

id objc_msgSend_postNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotification:");
}

id objc_msgSend_postNotificationName_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:");
}

id objc_msgSend_postNotificationName_object_userInfo_deliverImmediately_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postNotificationName:object:userInfo:deliverImmediately:");
}