uint64_t start()
{
  void *v0;
  uint64_t v1;
  os_log_s *v2;
  void *v3;
  void *v4;
  dispatch_queue_s *v5;
  dispatch_source_s *v6;
  dispatch_source_s *v7;
  dispatch_source_s *v8;
  dispatch_source_s *v9;
  void *v10;
  void *v11;
  void v13[5];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  dispatch_source_t v19;
  void v20[5];
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  dispatch_source_t v26;
  void v27[5];
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  void (*v32)(uint64_t);
  dispatch_source_t v33;
  void handler[5];
  uint8_t buf[8];
  uint8_t *v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t);
  void (*v39)(uint64_t);
  dispatch_source_t v40;
  v0 = objc_autoreleasePoolPush();
  v1 = daemon_log(v0);
  v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Starting Up...", buf, 2u);
  }

  _set_user_dir_suffix([@"com.apple.sharingd" UTF8String]);
  sub_1001171A8();
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:@"OneTimeAirDropReset2"]);

  if (!v4)
  {
    [v3 removeObjectForKey:kSFOperationDiscoverableModeKey];
    [v3 setObject:&__kCFBooleanTrue forKey:@"OneTimeAirDropReset2"];
  }

  v5 = &_dispatch_main_q;
  *(void *)buf = 0LL;
  v36 = buf;
  v37 = 0x3032000000LL;
  v38 = sub_100006EC0;
  v39 = sub_100006ED0;
  v40 = 0LL;
  v40 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0xFuLL, 0LL, &_dispatch_main_q);
  dispatch_source_set_event_handler(*((dispatch_source_t *)v36 + 5), &stru_1005CAF58);
  v6 = (dispatch_source_s *)*((void *)v36 + 5);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_100006F34;
  handler[3] = &unk_1005CAF80;
  handler[4] = buf;
  dispatch_source_set_cancel_handler(v6, handler);
  dispatch_resume(*((dispatch_object_t *)v36 + 5));
  v28 = 0LL;
  v29 = &v28;
  v30 = 0x3032000000LL;
  v31 = sub_100006EC0;
  v32 = sub_100006ED0;
  v33 = 0LL;
  v33 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0x1DuLL, 0LL, &_dispatch_main_q);
  dispatch_source_set_event_handler((dispatch_source_t)v29[5], &stru_1005CAFA0);
  v7 = (dispatch_source_s *)v29[5];
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472LL;
  v27[2] = sub_100006FDC;
  v27[3] = &unk_1005CAF80;
  v27[4] = &v28;
  dispatch_source_set_cancel_handler(v7, v27);
  dispatch_resume((dispatch_object_t)v29[5]);
  signal(30, (void (__cdecl *)(int))1);
  v21 = 0LL;
  v22 = &v21;
  v23 = 0x3032000000LL;
  v24 = sub_100006EC0;
  v25 = sub_100006ED0;
  v26 = 0LL;
  v26 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0x1EuLL, 0LL, &_dispatch_main_q);
  dispatch_source_set_event_handler((dispatch_source_t)v22[5], &stru_1005CAFC0);
  v8 = (dispatch_source_s *)v22[5];
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_100007080;
  v20[3] = &unk_1005CAF80;
  v20[4] = &v21;
  dispatch_source_set_cancel_handler(v8, v20);
  dispatch_resume((dispatch_object_t)v22[5]);
  signal(31, (void (__cdecl *)(int))1);
  v14 = 0LL;
  v15 = &v14;
  v16 = 0x3032000000LL;
  v17 = sub_100006EC0;
  v18 = sub_100006ED0;
  v19 = 0LL;
  v19 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0x1FuLL, 0LL, &_dispatch_main_q);
  dispatch_source_set_event_handler((dispatch_source_t)v15[5], &stru_1005CAFE0);
  v9 = (dispatch_source_s *)v15[5];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100007124;
  v13[3] = &unk_1005CAF80;
  v13[4] = &v14;
  dispatch_source_set_cancel_handler(v9, v13);
  dispatch_resume((dispatch_object_t)v15[5]);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[SharingDaemon sharedDaemon](&OBJC_CLASS___SharingDaemon, "sharedDaemon"));
  [v10 start];

  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v21, 8);

  _Block_object_dispose(&v28, 8);
  _Block_object_dispose(buf, 8);

  objc_autoreleasePoolPop(v0);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop mainRunLoop](&OBJC_CLASS___NSRunLoop, "mainRunLoop"));
  [v11 run];

  return 1LL;
}

void sub_100006E74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36)
{
}

uint64_t sub_100006EC0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100006ED0(uint64_t a1)
{
}

void sub_100006ED8(id a1)
{
  uint64_t v1 = daemon_log(a1);
  v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SIGTERM received, shutting down.", v3, 2u);
  }

  exit(0);
}

void sub_100006F34(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8LL);
  v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0LL;
}

void sub_100006F48(id a1)
{
  uint64_t v1 = daemon_log(a1);
  v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "SIGINFO received, requesting debug output.",  v4,  2u);
  }

  sub_1001171A8();
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v3 postNotificationName:@"com.apple.sharingd.DebugInfoRequested" object:0];
}

void sub_100006FDC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8LL);
  v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0LL;
}

void sub_100006FF0(id a1)
{
  uint64_t v1 = daemon_log(a1);
  v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "SIGUSR1 received, requesting reset state.",  v4,  2u);
  }

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v3 postNotificationName:@"com.apple.sharingd.ResetState" object:0];
}

void sub_100007080(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8LL);
  v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0LL;
}

void sub_100007094(id a1)
{
  uint64_t v1 = daemon_log(a1);
  v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "SIGUSR2 received, requesting reset state 2.",  v4,  2u);
  }

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v3 postNotificationName:@"com.apple.sharingd.ResetState2" object:0];
}

void sub_100007124(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8LL);
  v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0LL;
}

void *acm_mem_alloc_data(size_t __size)
{
  result = calloc(1uLL, __size);
  if (result) {
    qword_100656CB8 += __size;
  }
  return result;
}

void acm_mem_free_data(void *a1, rsize_t __n)
{
  if (a1)
  {
    memset_s(a1, __n, 0, __n);
    free(a1);
    uint64_t v4 = qword_100656CB8 - __n;
    if (qword_100656CB8 < __n) {
      uint64_t v4 = 0LL;
    }
    qword_100656CB8 = v4;
  }
}

void *acm_mem_alloc(size_t __size)
{
  result = calloc(1uLL, __size);
  if (result) {
    qword_100656CC0 += __size;
  }
  return result;
}

void acm_mem_free(void *a1, rsize_t __n)
{
  if (a1)
  {
    memset_s(a1, __n, 0, __n);
    free(a1);
    uint64_t v4 = qword_100656CC0 - __n;
    if (qword_100656CC0 < __n) {
      uint64_t v4 = 0LL;
    }
    qword_100656CC0 = v4;
  }

const char *acm_mem_alloc_info( const char *result, const void *a2, uint64_t a3, const char *a4, int a5, const char *a6)
{
  if (a2) {
    qword_100656CB0 += a3;
  }
  if (gACMLoggingLevel <= 0x1Eu)
  {
    v6 = "NULL";
    if (result) {
      v7 = result;
    }
    else {
      v7 = "NULL";
    }
    if (a4) {
      v8 = a4;
    }
    else {
      v8 = "NULL";
    }
    if (a6) {
      v6 = a6;
    }
    return (const char *)printf( "%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n",  "ACM",  "acm_mem_alloc_info",  v7,  a2,  a3,  qword_100656CB0,  0,  qword_100656CB8,  qword_100656CC0,  v8,  a5,  v6);
  }

  return result;
}

const char *acm_mem_free_info( const char *result, const void *a2, unint64_t a3, const char *a4, int a5, const char *a6)
{
  if (a2)
  {
    uint64_t v6 = qword_100656CB0 - a3;
    if (qword_100656CB0 < a3) {
      uint64_t v6 = 0LL;
    }
    qword_100656CB0 = v6;
  }

  if (gACMLoggingLevel <= 0x1Eu)
  {
    v7 = "NULL";
    if (result) {
      v8 = result;
    }
    else {
      v8 = "NULL";
    }
    if (a4) {
      v9 = a4;
    }
    else {
      v9 = "NULL";
    }
    if (a6) {
      v7 = a6;
    }
    return (const char *)printf( "%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n",  "ACM",  "acm_mem_free_info",  v8,  a2,  a3,  qword_100656CB0,  0,  qword_100656CB8,  qword_100656CC0,  v9,  a5,  v7);
  }

  return result;
}

uint64_t ACMContextCreate(uint64_t *a1)
{
  if (byte_1006413B1 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v8 = "ACMLib";
    __int16 v9 = 2080;
    v10 = "ACMContextCreate";
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: called.\n",  buf,  0x16u);
  }

  uint64_t v6 = 0LL;
  uint64_t v2 = LibCall_ACMContextCreate( (uint64_t (*)(uint64_t, uint64_t, void, void, void, _BYTE *, uint64_t *))sub_1000075C4,  (uint64_t)&v6,  a1,  &byte_1006413B1,  1);
  if ((_DWORD)v2)
  {
    sub_100008554();
    unsigned int v3 = 70;
  }

  else
  {
    unsigned int v3 = 10;
    if (a1 && byte_1006413B1 <= 0x28u)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
      {
        uint64_t v4 = *a1;
        if (*a1) {
          LODWORD(v4) = *(_DWORD *)(v4 + 16);
        }
        *(_DWORD *)buf = 136315650;
        v8 = "ACMLib";
        __int16 v9 = 2080;
        v10 = "ACMContextCreate";
        __int16 v11 = 1024;
        LODWORD(v12) = v4;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: CS[%u] created.\n",  buf,  0x1Cu);
      }

      unsigned int v3 = 10;
    }
  }

  if (v3 >= byte_1006413B1 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v8 = "ACMLib";
    __int16 v9 = 2080;
    v10 = "ACMContextCreate";
    __int16 v11 = 2048;
    uint64_t v12 = (int)v2;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: returning, err = %ld.\n",  buf,  0x20u);
  }

  return v2;
}

uint64_t sub_1000075C4(uint64_t *a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  if (byte_1006413B1 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v18 = 136315394;
    v19 = "ACMLib";
    __int16 v20 = 2080;
    v21 = "ioKitTransport";
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: called.\n",  (uint8_t *)&v18,  0x16u);
  }

  if (a1)
  {
    uint64_t v14 = sub_100007D94();
    unsigned int v15 = 70;
    if ((_DWORD)v14)
    {
      uint64_t v16 = v14;
    }

    else
    {
      uint64_t v16 = sub_100007F74(*a1, a2, a3, a4, a5, a6, a7);
      if ((_DWORD)v16) {
        unsigned int v15 = 70;
      }
      else {
        unsigned int v15 = 10;
      }
    }
  }

  else
  {
    unsigned int v15 = 70;
    uint64_t v16 = 4294967293LL;
  }

  if (v15 >= byte_1006413B1 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v18 = 136315650;
    v19 = "ACMLib";
    __int16 v20 = 2080;
    v21 = "ioKitTransport";
    __int16 v22 = 2048;
    uint64_t v23 = (int)v16;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: returning, err = %ld.\n",  (uint8_t *)&v18,  0x20u);
  }

  return v16;
}

_DWORD *ACMContextCreateWithExternalForm(_OWORD *a1, uint64_t a2)
{
  if (byte_1006413B1 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v10 = "ACMLib";
    __int16 v11 = 2080;
    uint64_t v12 = "ACMContextCreateWithExternalForm";
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: called.\n",  buf,  0x16u);
  }

  uint64_t v8 = 0LL;
  uint64_t v4 = LibCall_ACMContextCreateWithExternalForm( (uint64_t (*)(uint64_t, uint64_t, void, _OWORD *, uint64_t, void *, uint64_t *))sub_1000075C4,  (uint64_t)&v8,  a1,  a2,  &byte_1006413B1,  1);
  if (v4)
  {
    if (byte_1006413B1 <= 0x28u && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      int v5 = v4[4];
      *(_DWORD *)buf = 136315650;
      v10 = "ACMLib";
      __int16 v11 = 2080;
      uint64_t v12 = "ACMContextCreateWithExternalForm";
      __int16 v13 = 1024;
      LODWORD(v14) = v5;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: CS[%u] acquired.\n",  buf,  0x1Cu);
    }

    unsigned int v6 = 30;
  }

  else
  {
    sub_100008554();
    unsigned int v6 = 70;
  }

  if (v6 >= byte_1006413B1 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v10 = "ACMLib";
    __int16 v11 = 2080;
    uint64_t v12 = "ACMContextCreateWithExternalForm";
    __int16 v13 = 2048;
    uint64_t v14 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: returning, -> ctx = %p.\n",  buf,  0x20u);
  }

  return v4;
}

uint64_t ACMContextDelete(_DWORD *a1, int a2)
{
  unsigned int v4 = byte_1006413B1;
  if (byte_1006413B1 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v12 = "ACMLib";
    __int16 v13 = 2080;
    uint64_t v14 = "ACMContextDelete";
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: called.\n",  buf,  0x16u);
    unsigned int v4 = byte_1006413B1;
  }

  if (a1 && v4 <= 0x28 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v5 = a1[4];
    unsigned int v6 = "deleted";
    *(_DWORD *)buf = 136315906;
    uint64_t v12 = "ACMLib";
    uint64_t v14 = "ACMContextDelete";
    __int16 v13 = 2080;
    if (a2) {
      unsigned int v6 = "destroyed";
    }
    __int16 v15 = 1024;
    LODWORD(v16[0]) = v5;
    WORD2(v16[0]) = 2080;
    *(void *)((char *)v16 + 6) = v6;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: CS[%u] %s.\n",  buf,  0x26u);
  }

  v10 = a1;
  uint64_t v7 = LibCall_ACMContextDelete( (void (*)(uint64_t, uint64_t, void, void *, uint64_t, void, void))sub_1000075C4,  (uint64_t)&v10,  a1,  a2);
  if ((_DWORD)v7) {
    unsigned int v8 = 70;
  }
  else {
    unsigned int v8 = 10;
  }
  if (v8 >= byte_1006413B1 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v12 = "ACMLib";
    __int16 v13 = 2080;
    uint64_t v14 = "ACMContextDelete";
    __int16 v15 = 2048;
    v16[0] = (int)v7;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: returning, err = %ld.\n",  buf,  0x20u);
  }

  return v7;
}

void ACMContextGetExternalForm(const void *a1, uint64_t a2)
{
  if (byte_1006413B1 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    int v5 = "ACMLib";
    __int16 v6 = 2080;
    uint64_t v7 = "ACMContextGetExternalForm";
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: called.\n",  (uint8_t *)&v4,  0x16u);
  }

  if (!a1
    || !a2
    || sub_100007D94()
    || sub_100007F74((uint64_t)a1, 19, 0, a1, 0x10uLL, 0LL, 0LL))
  {
    (*(void (**)(uint64_t, void, void))(a2 + 16))(a2, 0LL, 0LL);
  }

  else
  {
    (*(void (**)(uint64_t, const void *, uint64_t))(a2 + 16))(a2, a1, 16LL);
  }

  if (byte_1006413B1 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    int v5 = "ACMLib";
    __int16 v6 = 2080;
    uint64_t v7 = "ACMContextGetExternalForm";
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: returning.\n",  (uint8_t *)&v4,  0x16u);
  }

uint64_t sub_100007D94()
{
  if (byte_1006413B1 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    uint64_t v7 = "ACMLib";
    __int16 v8 = 2080;
    __int16 v9 = "init";
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: called.\n",  (uint8_t *)&v6,  0x16u);
  }

  if ((byte_100656CCC & 1) != 0)
  {
    uint64_t v0 = 0LL;
  }

  else
  {
    uint64_t v1 = IOServiceMatching("AppleCredentialManager");
    io_service_t MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v1);
    if (!MatchingService)
    {
      unsigned int v4 = 70;
      uint64_t v0 = 4294967291LL;
      goto LABEL_10;
    }

    io_object_t v3 = MatchingService;
    uint64_t v0 = IOServiceOpen(MatchingService, mach_task_self_, 0, (io_connect_t *)&dword_100656CC8);
    if ((_DWORD)v0)
    {
      unsigned int v4 = 70;
      goto LABEL_10;
    }

    IOObjectRelease(v3);
    byte_100656CCC = 1;
  }

  unsigned int v4 = 10;
LABEL_10:
  if (v4 >= byte_1006413B1 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315650;
    uint64_t v7 = "ACMLib";
    __int16 v8 = 2080;
    __int16 v9 = "init";
    __int16 v10 = 2048;
    uint64_t v11 = (int)v0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: returning, err = %ld.\n",  (uint8_t *)&v6,  0x20u);
  }

  return v0;
}

uint64_t sub_100007F74(uint64_t a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  if (byte_1006413B1 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v25 = "ACMLib";
    __int16 v26 = 2080;
    v27 = "performCommand";
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: called.\n",  buf,  0x16u);
  }

  size_t inputStructCnt = 0LL;
  uint64_t v14 = LibCall_BuildCommand(a2, 0, a3, a4, a5, &inputStructCnt);
  if (v14)
  {
    __int16 v15 = v14;
    if (!a6 && a7)
    {
      uint64_t v18 = 4294967293LL;
    }

    else
    {
      if (a7) {
        size_t v16 = *a7;
      }
      else {
        size_t v16 = 0LL;
      }
      size_t v22 = v16;
      uint64_t v17 = IOConnectCallStructMethod(dword_100656CC8, 0, v14, inputStructCnt, a6, &v22);
      uint64_t v18 = v17;
      if (a1) {
        LODWORD(a1) = *(_DWORD *)(a1 + 16);
      }
      if ((_DWORD)v17)
      {
        if (byte_1006413B1 <= 0x46u
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136316418;
          v25 = "ACMLib";
          __int16 v26 = 2080;
          v27 = "performCommand";
          __int16 v28 = 1024;
          *(_DWORD *)v29 = a2;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = a1;
          __int16 v30 = 1024;
          int v31 = v18;
          __int16 v32 = 1024;
          int v33 = v18;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: cmd(%u) on CS[%u] -> err 0x%x (%d).\n",  buf,  0x2Eu);
        }
      }

      else
      {
        if (byte_1006413B1 <= 0x28u
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315906;
          v25 = "ACMLib";
          __int16 v26 = 2080;
          v27 = "performCommand";
          __int16 v28 = 1024;
          *(_DWORD *)v29 = a2;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = a1;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: cmd(%u) on CS[%u] -> ok.\n",  buf,  0x22u);
        }

        uint64_t v18 = 0LL;
        if (a7) {
          *a7 = v22;
        }
      }
    }

    size_t v19 = inputStructCnt;
    acm_mem_free_info( "<data>",  v15,  inputStructCnt,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c",  134,  "performCommand");
    acm_mem_free_data(v15, v19);
    if ((_DWORD)v18) {
      unsigned int v20 = 70;
    }
    else {
      unsigned int v20 = 10;
    }
  }

  else
  {
    unsigned int v20 = 70;
    uint64_t v18 = 4294967291LL;
  }

  if (v20 >= byte_1006413B1 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v25 = "ACMLib";
    __int16 v26 = 2080;
    v27 = "performCommand";
    __int16 v28 = 2048;
    *(void *)v29 = (int)v18;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: returning, err = %ld.\n",  buf,  0x20u);
  }

  return v18;
}

uint64_t ACMContextContainsCredentialTypeEx(_OWORD *a1, int a2, int a3)
{
  if (byte_1006413B1 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    size_t v16 = "ACMLib";
    __int16 v17 = 2080;
    uint64_t v18 = "ACMContextContainsCredentialTypeEx";
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: called.\n",  buf,  0x16u);
  }

  int v14 = 0;
  size_t v13 = 4LL;
  if (a1)
  {
    uint64_t v6 = sub_100007D94();
    if ((_DWORD)v6)
    {
      uint64_t v11 = v6;
      unsigned int v8 = 70;
    }

    else
    {
      uint64_t v7 = acm_mem_alloc_data(0x18uLL);
      acm_mem_alloc_info( "<data>",  v7,  24LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c",  576,  "ACMContextContainsCredentialTypeEx");
      unsigned int v8 = 70;
      if (v7)
      {
        *(_OWORD *)uint64_t v7 = *a1;
        v7[4] = a2;
        v7[5] = a3;
        unsigned int v9 = sub_100007F74((uint64_t)a1, 4, 0, v7, 0x18uLL, &v14, &v13);
        if (v14) {
          unsigned int v10 = 0;
        }
        else {
          unsigned int v10 = -7;
        }
        if (v9) {
          uint64_t v11 = v9;
        }
        else {
          uint64_t v11 = v10;
        }
        acm_mem_free_info( "<data>",  v7,  0x18uLL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c",  590,  "ACMContextContainsCredentialTypeEx");
        acm_mem_free_data(v7, 0x18uLL);
        if ((_DWORD)v11) {
          unsigned int v8 = 70;
        }
        else {
          unsigned int v8 = 10;
        }
      }

      else
      {
        uint64_t v11 = 4294967292LL;
      }
    }
  }

  else
  {
    unsigned int v8 = 70;
    uint64_t v11 = 4294967293LL;
  }

  if (v8 >= byte_1006413B1 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    size_t v16 = "ACMLib";
    __int16 v17 = 2080;
    uint64_t v18 = "ACMContextContainsCredentialTypeEx";
    __int16 v19 = 2048;
    uint64_t v20 = (int)v11;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: returning, err = %ld.\n",  buf,  0x20u);
  }

  return v11;
}

void sub_100008554()
{
  if (byte_1006413B1 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    int v5 = "ACMLib";
    __int16 v6 = 2080;
    uint64_t v7 = "updateLogLevelFromKext";
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: called.\n",  buf,  0x16u);
  }

  uint32_t outputCnt = 1;
  if (IOConnectCallScalarMethod(dword_100656CC8, 2u, 0LL, 0, &output, &outputCnt)) {
    goto LABEL_8;
  }
  unsigned __int8 v0 = output;
  unsigned int v1 = output;
  byte_1006413B1 = output;
  if (output <= 0x1EuLL && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    int v5 = "ACMLib";
    __int16 v6 = 2080;
    uint64_t v7 = "updateLogLevelFromKext";
    __int16 v8 = 1024;
    int v9 = v0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: log level set to %d.\n",  buf,  0x1Cu);
LABEL_8:
    unsigned int v1 = byte_1006413B1;
  }

  if (v1 <= 0xA && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    int v5 = "ACMLib";
    __int16 v6 = 2080;
    uint64_t v7 = "updateLogLevelFromKext";
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "%s: %s: returning.\n",  buf,  0x16u);
  }

_BYTE *LibCall_BuildCommand(char a1, char a2, char a3, const void *a4, size_t a5, void *a6)
{
  uint64_t v12 = 0LL;
  if (a5) {
    BOOL v13 = a4 == 0LL;
  }
  else {
    BOOL v13 = 0;
  }
  if (!v13 && a6)
  {
    if (a5 >= 0xFFFFFFFFFFFFFFF8LL)
    {
      uint64_t v12 = 0LL;
    }

    else
    {
      uint64_t v12 = acm_mem_alloc_data(a5 + 8);
      acm_mem_alloc_info( "<data>",  v12,  a5 + 8,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  22,  "LibCall_BuildCommand");
      if (v12)
      {
        *a6 = a5 + 8;
        *(_DWORD *)uint64_t v12 = 1396920900;
        v12[4] = a1;
        v12[5] = a2;
        v12[6] = a3;
        if (a5) {
          memcpy(v12 + 8, a4, a5);
        }
      }
    }
  }

  return v12;
}

uint64_t LibCall_ACMContextCreate( uint64_t (*a1)(uint64_t, uint64_t, void, void, void, _BYTE *, uint64_t *), uint64_t a2, void *a3, _BYTE *a4, int a5)
{
  unsigned int v10 = 70;
  uint64_t v11 = 4294967293LL;
  if (!a1 || !a3) {
    goto LABEL_25;
  }
  uint64_t v12 = acm_mem_alloc(0x14uLL);
  acm_mem_alloc_info( "ACMHandleWithPayload",  v12,  20LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  50,  "LibCall_ACMContextCreate");
  if (!v12)
  {
    unsigned int v10 = 70;
    uint64_t v11 = 4294967292LL;
    goto LABEL_25;
  }

  memset(v19, 0, sizeof(v19));
  if (a5)
  {
    uint64_t v18 = 21LL;
    uint64_t v13 = a1(a2, 36LL, 0LL, 0LL, 0LL, v19, &v18);
    if (!(_DWORD)v13)
    {
      if (v18 != 21)
      {
        uint64_t v11 = 4294967291LL;
        goto LABEL_23;
      }

      uint64_t v11 = 0LL;
      goto LABEL_20;
    }

    uint64_t v11 = v13;
    if ((_DWORD)v13 != -3)
    {
LABEL_23:
      acm_mem_free_info( "ACMHandleWithPayload",  v12,  0x14uLL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  89,  "LibCall_ACMContextCreate");
      acm_mem_free(v12, 0x14uLL);
      unsigned int v10 = 70;
      goto LABEL_25;
    }
  }

  uint64_t v18 = 17LL;
  unsigned int v14 = a1(a2, 1LL, 0LL, 0LL, 0LL, v19, &v18);
  if (v18 == 17) {
    unsigned int v15 = 0;
  }
  else {
    unsigned int v15 = -5;
  }
  if (v14) {
    uint64_t v11 = v14;
  }
  else {
    uint64_t v11 = v15;
  }
  if (!v14 && v18 == 17)
  {
LABEL_20:
    int v16 = *(_DWORD *)&v19[17];
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v19;
    v12[4] = v16;
    *a3 = v12;
    if (a4) {
      *a4 = v19[16];
    }
  }

  if ((_DWORD)v11) {
    goto LABEL_23;
  }
  unsigned int v10 = 10;
LABEL_25:
  return v11;
}

_DWORD *LibCall_ACMContextCreateWithExternalForm( uint64_t (*a1)(uint64_t, uint64_t, void, _OWORD *, uint64_t, void *, uint64_t *), uint64_t a2, _OWORD *a3, uint64_t a4, _BYTE *a5, int a6)
{
  uint64_t v12 = 0LL;
  unsigned int v13 = 70;
  int v14 = -3;
  if (a1 && a3 && a4 == 16)
  {
    memset(v21, 0, 9);
    if (a6)
    {
      uint64_t v20 = 9LL;
      int v15 = a1(a2, 37LL, 0LL, a3, 16LL, v21, &v20);
      if (!v15)
      {
        if (v20 == 9)
        {
          int v14 = 0;
          goto LABEL_19;
        }

        int v14 = -5;
        goto LABEL_28;
      }

      int v14 = v15;
      if (v15 != -3) {
        goto LABEL_28;
      }
    }

    uint64_t v20 = 5LL;
    int v16 = a1(a2, 18LL, 0LL, a3, 16LL, v21, &v20);
    if (v20 == 5) {
      int v17 = 0;
    }
    else {
      int v17 = -5;
    }
    if (v16) {
      int v14 = v16;
    }
    else {
      int v14 = v17;
    }
    if (!v16 && v20 == 5)
    {
LABEL_19:
      if (LODWORD(v21[0]))
      {
        uint64_t v12 = acm_mem_alloc(0x14uLL);
        acm_mem_alloc_info( "ACMHandleWithPayload",  v12,  20LL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  128,  "LibCall_ACMContextCreateWithExternalForm");
        if (!v12)
        {
          unsigned int v13 = 70;
          int v14 = -4;
          goto LABEL_31;
        }

        int v18 = *(_DWORD *)((char *)v21 + 5);
        *(_OWORD *)uint64_t v12 = *a3;
        v12[4] = v18;
        if (a5) {
          *a5 = BYTE4(v21[0]);
        }
        if (v14)
        {
          acm_mem_free_info( "ACMHandleWithPayload",  v12,  0x14uLL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  147,  "LibCall_ACMContextCreateWithExternalForm");
          acm_mem_free(v12, 0x14uLL);
LABEL_29:
          unsigned int v13 = 70;
          goto LABEL_31;
        }
      }

      else
      {
        uint64_t v12 = 0LL;
      }

      goto LABEL_30;
    }

LABEL_28:
    uint64_t v12 = 0LL;
    if (v14) {
      goto LABEL_29;
    }
LABEL_30:
    int v14 = 0;
    unsigned int v13 = 10;
  }

  __int16 v28 = auto_unlock_log(v23);
  v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Authorization Test: Starting authorization session",  buf,  2u);
  }

  __int16 v30 = v77;
  int v31 = v75;
  __int16 v32 = v72;
  int v33 = v70;
  int v5 = v5;
  if (!aks_remote_session( 4294967293,  7,  v30,  v31,  v32,  v33,  [v5 bytes],  objc_msgSend(v5, "length"),  (char *)&v69 + 4)
    && !aks_remote_session(v78[0], 135LL, v76, v74, v73, v71, v68, v67, &v69)
    && !sub_100014628(HIDWORD(v69), v69)
    && !aks_remote_session_reset(HIDWORD(v69)))
  {
    v34 = aks_remote_session_reset(v69);
    if (!(_DWORD)v34)
    {
      v35 = auto_unlock_log(v34);
      uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "Authorization Test: Session complete checking for credential",  buf,  2u);
      }

      v37 = ACMContextContainsCredentialTypeEx(v66, 9, 0);
      if ((_DWORD)v37)
      {
        v49 = auto_unlock_log(v37);
        v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
          sub_100014F78();
        }
      }

      else
      {
        v55[0] = _NSConcreteStackBlock;
        v55[1] = 3221225472LL;
        v55[2] = sub_100014760;
        v55[3] = &unk_1005CB298;
        v55[4] = &v62;
        v55[5] = &v58;
        ACMContextGetExternalForm(v66, (uint64_t)v55);
        if (v59[3])
        {
          v39 = objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v63[3]));
          v40 = (void *)v39;
          if (v39)
          {
            v41 = auto_unlock_log(v39);
            v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Authorization Test: Returning credential",  buf,  2u);
            }

            goto LABEL_42;
          }

          v51 = auto_unlock_log(0LL);
          v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
            sub_100014F4C();
          }
        }

        else
        {
          v50 = auto_unlock_log(v38);
          v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
            sub_100014F20();
          }
        }
      }

  return v8;
}

    -[SDAutoFillAgent _proximityEnsureStarted](self, "_proximityEnsureStarted");
    goto LABEL_30;
  }

  if (v4) {
    goto LABEL_28;
  }
LABEL_29:
  -[SDAutoFillAgent _proximityEnsureStopped](self, "_proximityEnsureStopped");
LABEL_30:
  if (self->_remoteMonitoringEnabled) {
    -[SDAutoFillAgent _siriRemoteMonitorEnsureStarted](self, "_siriRemoteMonitorEnsureStarted");
  }
  else {
    -[SDAutoFillAgent _siriRemoteMonitorEnsureStopped](self, "_siriRemoteMonitorEnsureStopped");
  }
  if (-[SDAutoFillAgent _serviceShouldRequestAutoFill](self, "_serviceShouldRequestAutoFill")) {
    -[SDAutoFillAgent _serviceEnsureStarted](self, "_serviceEnsureStarted");
  }
  else {
    -[SDAutoFillAgent _serviceEnsureStopped](self, "_serviceEnsureStopped");
  }
}

LABEL_29:
            break;
          }

          int v15 = [v13 code];

          if (v15 != (id)17) {
            goto LABEL_24;
          }
          int v17 = (void *)objc_claimAutoreleasedReturnValue(-[__CFURL lastPathComponent](v10, "lastPathComponent"));
          if (!v17)
          {
            uint64_t v36 = airdrop_log(0LL);
            v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
            if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
              sub_1000D8888(&v54, v55, v35);
            }
            goto LABEL_28;
          }

          int v18 = v17;
          __int16 v19 = sub_1001159F8(v17);
          uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
          v21 = airdrop_log(v20);
          size_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
          {
            destination = v2->_destination;
            *(_DWORD *)buf = 138412802;
            v60 = v18;
            v61 = 2112;
            v62 = destination;
            v63 = 2112;
            v64 = v20;
            _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "SDAirDropFileZipper: Placeholder filename %@ already exists at destination: %@. Creating as new filename: %@",  buf,  0x20u);
          }

          v24 = [v5 mutableCopy];
          [v24 setObject:v20 forKeyedSubscript:v53];
          v25 = [v18 isEqual:v20];
          __int16 v26 = (char)v25;
          if ((v25 & 1) != 0)
          {
            v27 = airdrop_log(v25);
            __int16 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
            if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
              sub_1000D88BC(&v56, v57, v28);
            }
          }

          else
          {
            v52 = objc_claimAutoreleasedReturnValue(-[SDAirDropFileZipper URLFromFileInfo:](v2, "URLFromFileInfo:", v24));

            alternateNames = v2->_alternateNames;
            __int16 v30 = v2;
            int v31 = v5;
            __int16 v32 = v4;
            int v33 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:v51]);
            -[NSMutableDictionary setObject:forKeyedSubscript:]( alternateNames,  "setObject:forKeyedSubscript:",  v20,  v33);

            unsigned int v4 = v32;
            int v5 = v31;
            uint64_t v2 = v30;
            -[NSMutableArray setObject:atIndexedSubscript:]( v30->_placeholderFiles,  "setObject:atIndexedSubscript:",  v24,  v4);
            unsigned int v10 = (const __CFURL *)v52;
          }

          if ((v26 & 1) != 0) {
            break;
          }
        }

        if ((id)++v4 == v49) {
          return 1;
        }
      }

      v41 = airdrop_log(0LL);
      v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
        sub_1000D87C4(v4, v40, v42, v43, v44, v45, v46, v47);
      }
LABEL_41:
    }

    else
    {
      v38 = airdrop_log(0LL);
      int v5 = (void *)objc_claimAutoreleasedReturnValue(v38);
      if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR)) {
        sub_1000D8798();
      }
    }
  }

  else
  {
    v37 = airdrop_log(0LL);
    int v5 = (void *)objc_claimAutoreleasedReturnValue(v37);
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR)) {
      sub_1000D876C();
    }
  }

  return 0;
}
}

        size_t v22 = 0LL;
      }

      return;
    default:
      if (dword_100643408 <= 60
        && (dword_100643408 != -1 || _LogCategory_Initialize(&dword_100643408, 60LL)))
      {
        LogPrintF( &dword_100643408,  "-[SDNotificationManager _addRequestWithID:content:type:isHomePodMini:]",  60LL,  "### Unsupported notification type: %d\n");
      }

      goto LABEL_28;
  }

    uint64_t v11 = 0LL;
    goto LABEL_17;
  }

  __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:@"altDsID"]);
  [*(id *)(a1 + 48) setAltDSID:v8];

  objc_msgSend( *(id *)(a1 + 48),  "setSuggestedValidDuration:",  CFDictionaryGetInt64(v6, @"SuggestValidDuration", 0));
  int v9 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:@"ValidatedEmailHashes"]);
  if ([v9 count]) {
    unsigned int v10 = v9;
  }
  else {
    unsigned int v10 = 0LL;
  }
  [*(id *)(a1 + 48) setValidatedEmailHashes:v10];
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:@"ValidatedPhoneHashes"]);

  if ([v11 count]) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0LL;
  }
  [*(id *)(a1 + 48) setValidatedPhoneHashes:v12];
  unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:@"ValidAsOf"]);
  [*(id *)(a1 + 48) setValidStartDate:v13];

  if (dword_1006435F8 <= 30 && (dword_1006435F8 != -1 || _LogCategory_Initialize(&dword_1006435F8, 30LL))) {
    LogPrintF( &dword_1006435F8,  "-[SDAppleIDAgent _handleInfoResponse:forAppleID:infoRequest:certificateSerialNumber:withError:completion:]_block_invoke",  30LL,  "Validation record for %{mask} is valid\n",  *(void *)(a1 + 40));
  }
  [*(id *)(a1 + 32) _setCurrentAppleIDContactInfo:*(void *)(a1 + 56) validationRecord:*(void *)(a1 + 48)];
  int v14 = *(void *)(a1 + 64);
  if (v14)
  {
    int v15 = 0LL;
    int v16 = 1;
LABEL_15:
    (*(void (**)(uint64_t, void *))(v14 + 16))(v14, v15);
    if ((v16 & 1) == 0)
    {
    }
  }

  return v22;
}
}

      int v17 = 0LL;
LABEL_31:

      goto LABEL_32;
    }

    if (dword_1006439C8 <= 90
      && (dword_1006439C8 != -1 || _LogCategory_Initialize(&dword_1006439C8, 90LL)))
    {
      LogPrintF( &dword_1006439C8,  "-[SDAutoUnlockMacIconCache iconImageDataForHash:]",  90LL,  "### Icon cache isn't a dictionary");
    }
  }

  else if (dword_1006439C8 <= 50 {
         && (dword_1006439C8 != -1 || _LogCategory_Initialize(&dword_1006439C8, 50LL)))
  }
  {
    LogPrintF( &dword_1006439C8,  "-[SDAutoUnlockMacIconCache iconImageDataForHash:]",  50LL,  "No icon cache for hash: %@",  v4);
  }

  int v17 = 0LL;
LABEL_33:

  return v17;
}

  if (a3) {
    *a3 = v10;
  }
  if (a4) {
    *a4 = v8 <= (double)self->_activityRecentSeconds;
  }
  return v11;
}

        __int16 v8 = v24;
        int v5 = v25;
        uint64_t v7 = v26;
LABEL_29:

LABEL_30:
        int v9 = (char *)v9 + 1;
      }

      while (v9 != v7);
      uint64_t v7 = [obj countByEnumeratingWithState:&v34 objects:v39 count:16];
    }

    while (v7);
  }
}

    v21 = 0LL;
    v27 = 1LL;
    int v17 = v35;
    goto LABEL_4;
  }

  v21 = 0LL;
  v27 = 1LL;
  v17 += 3LL;
LABEL_4:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v13, v27, 1LL, v3);
  *unsigned int v1 = v14;
  v1[1] = v15;
  v1[2] = v40;
  v1[3] = v17;
  v1[4] = v21;
  __int16 v28 = (void (*)(uint64_t))v1[5];
  sub_1001870BC((uint64_t)v13, (uint64_t)v10, &qword_100645018);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1LL, v3) == 1)
  {
    v29 = sub_100183098(&qword_100645020);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL))( a1,  1LL,  1LL,  v29);
  }

  else
  {
    __int16 v30 = (uint64_t)v37;
    sub_1001870BC((uint64_t)v10, (uint64_t)v37, &qword_100645010);
    v28(v30);
    sub_100187100(v30, &qword_100645010);
    int v31 = sub_100183098(&qword_100645020);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))( a1,  0LL,  1LL,  v31);
  }

  swift_release(v126);
  v51 = *(const __CFString **)(v110 + 16);
  v129 = *(void **)(v110 + 24);
  v130 = v51;
  unsigned int v1 = sub_100186E3C(v51, (unint64_t)v129);
  type metadata accessor for CFString(0LL);
  sub_100183F14( (unint64_t *)&qword_100644D10,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1004CCE0C);
  v52 = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
  uint64_t v2 = SecItemDelete(v52);

  if (!v2)
  {
    swift_bridgeObjectRelease(v1);
    goto LABEL_35;
  }

  if (qword_100643F30 != -1) {
    goto LABEL_53;
  }
LABEL_30:
  v53 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v53, (uint64_t)qword_100647DF0);
  v54 = swift_bridgeObjectRetain(v1);
  v55 = (os_log_s *)Logger.logObject.getter(v54);
  v56 = static os_log_type_t.error.getter(v55);
  if (os_log_type_enabled(v55, v56))
  {
    v57 = swift_slowAlloc(18LL, -1LL);
    v58 = (Class *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)v57 = v111;
    v59 = Dictionary._bridgeToObjectiveC()().super.isa;
    v133 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v57 + 4, v57 + 12);
    *v58 = v59;
    swift_bridgeObjectRelease_n(v1, 2LL);
    *(_WORD *)(v57 + 12) = 1024;
    LODWORD(v133) = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, (char *)&v133 + 4, v57 + 14, v57 + 18);
    _os_log_impl( (void *)&_mh_execute_header,  v55,  v56,  "Failed to delete keychain item: %@, error:%d",  (uint8_t *)v57,  0x12u);
    v60 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v58, 1LL, v60);
    swift_slowDealloc(v58, -1LL, -1LL);
    v61 = v57;
    __int16 v8 = v124;
    swift_slowDealloc(v61, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v1, 2LL);
  }

  int v5 = v125;
LABEL_35:
  v63 = *(void (**)(const __CFString *, void *, uint64_t))(v110 + 40);
  v62 = *(void *)(v110 + 48);
  v64 = *(unsigned __int8 *)(v110 + 32);
  v65 = v64 == 2;
  v66 = 0x1020100u >> (8 * v64);
  if (*(_BYTE *)(v110 + 33)) {
    v67 = v65;
  }
  else {
    v67 = v66;
  }
  swift_retain(*(void *)(v110 + 48));
  v63(v130, v129, v67);
  swift_release(v62);
  v68 = v109;
  v69 = v107;
  v70 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v109 + 48))(v5, 1LL, v107);
  v71 = v108;
  if (v70 == 1)
  {
    sub_100187100((uint64_t)v5, (uint64_t *)&unk_100645130);
    if (qword_100643F30 != -1) {
      swift_once(&qword_100643F30, sub_100205FB8);
    }
    v72 = type metadata accessor for Logger(0LL);
    v73 = sub_100186DE4(v72, (uint64_t)qword_100647DF0);
    v74 = (os_log_s *)Logger.logObject.getter(v73);
    v75 = static os_log_type_t.error.getter(v74);
    if (os_log_type_enabled(v74, v75))
    {
      v76 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v76 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Failed to get LocalLTK plist path", v76, 2u);
      swift_slowDealloc(v76, -1LL, -1LL);
    }
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v108, v5, v69);
    v77 = [(id)objc_opt_self(NSFileManager) defaultManager];
    URL._bridgeToObjectiveC()(v78);
    v80 = v79;
    v133 = 0LL;
    v81 = v68;
    v82 = [v77 removeItemAtURL:v79 error:&v133];

    v83 = v133;
    if (v82)
    {
      v84 = *(void (**)(char *, uint64_t))(v81 + 8);
      v85 = v133;
      v84(v71, v69);
    }

    else
    {
      v86 = v133;
      v87 = _convertNSErrorToError(_:)(v83);

      swift_willThrow(v88);
      if (qword_100643F30 != -1) {
        swift_once(&qword_100643F30, sub_100205FB8);
      }
      v89 = type metadata accessor for Logger(0LL);
      sub_100186DE4(v89, (uint64_t)qword_100647DF0);
      v90 = v109;
      (*(void (**)(char *, char *, uint64_t))(v109 + 16))(v8, v71, v69);
      swift_errorRetain(v87);
      v91 = swift_errorRetain(v87);
      v92 = (os_log_s *)Logger.logObject.getter(v91);
      v93 = static os_log_type_t.error.getter(v92);
      v94 = v93;
      if (os_log_type_enabled(v92, v93))
      {
        v95 = swift_slowAlloc(22LL, -1LL);
        v129 = (void *)swift_slowAlloc(8LL, -1LL);
        v130 = (const __CFString *)swift_slowAlloc(32LL, -1LL);
        v133 = (Class)v130;
        *(_DWORD *)v95 = 136315394;
        v96 = sub_100183F14( (unint64_t *)&qword_100645408,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
        LODWORD(v12_Block_object_dispose((const void *)(v36 - 144), 8) = v94;
        v97 = dispatch thunk of CustomStringConvertible.description.getter(v69, v96);
        v99 = v98;
        v131 = sub_10018CDB4(v97, v98, (uint64_t *)&v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, &v132, v95 + 4, v95 + 12);
        v100 = swift_bridgeObjectRelease(v99);
        v101 = *(void (**)(char *, uint64_t, __n128))(v90 + 8);
        v101(v8, v69, v100);
        *(_WORD *)(v95 + 12) = 2112;
        swift_errorRetain(v87);
        v102 = _swift_stdlib_bridgeErrorToNSError(v87);
        v131 = v102;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, &v132, v95 + 14, v95 + 22);
        v103 = v129;
        *v129 = v102;
        swift_errorRelease(v87);
        swift_errorRelease(v87);
        _os_log_impl( (void *)&_mh_execute_header,  v92,  (os_log_type_t)v128,  "Failed to delete %s, error: %@",  (uint8_t *)v95,  0x16u);
        v104 = sub_100183098(&qword_1006454E0);
        swift_arrayDestroy(v103, 1LL, v104);
        swift_slowDealloc(v103, -1LL, -1LL);
        v105 = v130;
        swift_arrayDestroy(v130, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v105, -1LL, -1LL);
        swift_slowDealloc(v95, -1LL, -1LL);

        swift_errorRelease(v87);
        ((void (*)(char *, uint64_t))v101)(v108, v69);
      }

      else
      {

        swift_errorRelease(v87);
        swift_errorRelease(v87);
        v106 = *(void (**)(char *, uint64_t))(v90 + 8);
        v106(v8, v69);
        swift_errorRelease(v87);
        v106(v71, v69);
      }
    }
  }

      __int16 v26 = v27;
      v24 = v28;
      swift_release(a2);
      v25 = 1LL;
LABEL_29:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56))(v24, v25, 1LL, v26);
      return;
    }

      v43 = sub_100183098(&qword_1006453B0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56LL))(v25, 1LL, 1LL, v43);
      v24 = 0LL;
LABEL_29:
      sub_1001870BC((uint64_t)v25, (uint64_t)v10, (uint64_t *)&unk_10064CB60);
      v44 = sub_100183098(&qword_1006453B0);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v44 - 8) + 48LL))(v10, 1LL, v44) == 1)
      {
        swift_release(v71);
        return;
      }

      v45 = v18;
      v47 = *v10;
      v46 = (const char *)v10[1];
      v48 = (char *)v10 + *(int *)(v44 + 48);
      v49 = *(uint64_t (**)(char *, char *, uint64_t))(v4 + 32);
      v50 = v74;
      v51 = v49(v74, v48, v3);
      v31.n128_f64[0] = Date.timeIntervalSinceNow.getter(v51);
      __int16 v32 = v50;
      if (v31.n128_f64[0] <= 0.0)
      {
        *(void *)&v52 = swift_beginAccess(v45, v76, 33LL, 0LL).n128_u64[0];
        v53 = *v45;
        swift_bridgeObjectRetain(*v45, v52);
        v72 = v47;
        v54 = sub_1003AD53C(v47, (uint64_t)v46);
        v56 = v55;
        swift_bridgeObjectRelease(v53);
        if ((v56 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v45);
          v58 = *v45;
          v75 = *v45;
          *v45 = (const char *)0x8000000000000000LL;
          if (!isUniquelyReferenced_nonNull_native)
          {
            sub_1003AF3E8();
            v58 = v75;
          }

          v59 = swift_bridgeObjectRelease((const char *)*(void *)(*((void *)v58 + 6) + 16 * v54 + 8));
          __int16 v28 = v65;
          unsigned int v4 = v66;
          v27 = (uint64_t)v69;
          ((void (*)(char *, unint64_t, uint64_t, __n128))v49)( v69,  *((void *)v58 + 7) + *(void *)(v66 + 72) * v54,  v65,  v59);
          sub_1001CBD74(v54, (uint64_t)v58);
          v60 = *v45;
          *v45 = v58;
          swift_bridgeObjectRelease(v60);
          __int16 v26 = 0LL;
        }

        else
        {
          __int16 v26 = 1LL;
          v27 = (uint64_t)v69;
          __int16 v28 = v65;
          unsigned int v4 = v66;
        }

        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v27, v26, 1LL, v28);
        sub_100187100(v27, &qword_1006457E8);
        swift_endAccess(v76);
        swift_beginAccess(v67, v76, 33LL, 0LL);
        sub_1003BDC14(v72, (uint64_t)v46);
        __int16 v30 = v29;
        swift_endAccess(v76);
        int v31 = swift_bridgeObjectRelease(v30);
        io_object_t v3 = v28;
        __int16 v32 = v74;
        v25 = v70;
        unsigned int v10 = v68;
      }

      (*(void (**)(char *, uint64_t, __n128))(v4 + 8))(v32, v3, v31);
      swift_bridgeObjectRelease(v46);
      int v18 = v45;
    }

    int v33 = __clz(__rbit64(v24));
    v24 &= v24 - 1;
    v34 = v33 | (v73 << 6);
    goto LABEL_10;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

          v37 = (v47 - 1) & v47;
          v45 = __clz(__rbit64(v47)) + (v34 << 6);
        }

        v50 = *(void *)(v1 + 56);
        v49 = *(void *)(v1 + 64);
        v51 = *(void *)(v1 + 40);
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v30 + 16))( v49,  *((void *)log + 6) + *(void *)(v30 + 72) * v45,  v51);
        v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v50, v49, v51);
        SFAirDropReceive.AskRequest.ItemInfo.fileType.getter(v52);
        v54 = v53;
        v55 = String._bridgeToObjectiveC()();
        int v17 = SFIsPhotosAssetBundle(v55);

        if ((_DWORD)v17)
        {
          swift_bridgeObjectRelease(v54);
          SFAirDropReceive.AskRequest.ItemInfo.fileSubType.getter(v56);
          if (!v57)
          {
            (*(void (**)(void, void))(v30 + 8))(*(void *)(v1 + 56), *(void *)(v1 + 40));
LABEL_35:
            swift_release(log);
            break;
          }

          v54 = v57;
        }

        v38 = *(void *)(v1 + 56);
        v39 = *(void *)(v1 + 40);
        v40 = String._bridgeToObjectiveC()();
        v41 = SFIsImage(v40);

        v42 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v54);
        v43 = SFIsVideo(v42);

        __int16 v30 = v63;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 8))(v38, v39);
        *(_BYTE *)(v60 + v62) = (*(_BYTE *)(v60 + v62) | v41) & 1;
        *(_BYTE *)(v60 + v61) = (*(_BYTE *)(v60 + v61) | v43) & 1;
      }
    }
  }

  else
  {
    (*(void (**)(void, void))(v11 + 8))(*(void *)(v1 + 88), *(void *)(v1 + 72));
  }

  v27 = 0LL;
LABEL_8:
  v29 = *(void *)(v1 + 56);
  __int16 v28 = *(void *)(v1 + 64);
  swift_task_dealloc(*(void *)(v1 + 88));
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v27);
}
}

    swift_once(&qword_100644408, sub_100458568);
    goto LABEL_7;
  }

  uint64_t v23 = v22;
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  __int16 v26 = v25;

  UUID.init(uuidString:)(v24, v26);
  v27 = swift_bridgeObjectRelease(v26);
  __int16 v28 = v12;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48))(v10, 1LL, v11, v27) == 1)
  {
    sub_100187100((uint64_t)v10, &qword_10064DA60);
    goto LABEL_6;
  }

  v42 = (uint64_t)v70;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v70, v10, v11);
  v43 = sub_1003500F4([v14 type]);
  if ((v44 & 1) != 0)
  {
    if (qword_100644408 != -1) {
      swift_once(&qword_100644408, sub_100458568);
    }
    v55 = type metadata accessor for Logger(0LL);
    v56 = sub_100186DE4(v55, (uint64_t)qword_100656748);
    v57 = (os_log_s *)Logger.logObject.getter(v56);
    v58 = static os_log_type_t.error.getter(v57);
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Message does not have authentication type", v59, 2u);
      swift_slowDealloc(v59, -1LL, -1LL);
    }

    goto LABEL_25;
  }

  v45 = v43;
  v46 = (uint64_t *)(v69 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_sessions);
  swift_beginAccess(v69 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_sessions, v74, 32LL, 0LL);
  v47 = *v46;
  if (*(void *)(v47 + 16))
  {
    v48 = sub_1003AD618(v42);
    if ((v49 & 1) != 0)
    {
      sub_10019A6C4(*(void *)(v47 + 56) + 40 * v48, (uint64_t)&v71);
      sub_1001CE0D0(&v71, (uint64_t)v75);
      swift_endAccess(v74);
      v50 = type metadata accessor for TaskPriority(0LL);
      v51 = (uint64_t)v68;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56LL))(v68, 1LL, 1LL, v50);
      sub_10019A6C4((uint64_t)v75, (uint64_t)&v71);
      v52 = (void *)swift_allocObject(&unk_1005E3408, 80LL, 7LL);
      v52[2] = 0LL;
      v52[3] = 0LL;
      sub_1001CE0D0(&v71, (uint64_t)(v52 + 4));
      v52[9] = v14;
      v53 = v14;
      v54 = sub_1001B37E8(v51, (uint64_t)&unk_100656B90, (uint64_t)v52);
      swift_release(v54);

      sub_10018709C(v75);
LABEL_25:
      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v42, v11);
      return;
    }
  }

  swift_endAccess(v74);
  v60 = [objc_allocWithZone(SFAuthenticationOptions) init];
  v72 = sub_100183168(0LL, &qword_1006569F0, &OBJC_CLASS___SFAuthenticationOptions_ptr);
  v73 = &off_1005DC590;
  *(void *)&v71 = v60;
  sub_100462B08(v42, v67, v45, (v45 < 0xF) & (0x658Eu >> v45), (uint64_t)&v71, (uint64_t)v75);
  sub_100187100((uint64_t)&v71, &qword_1006569F8);
  v61 = type metadata accessor for TaskPriority(0LL);
  v62 = (uint64_t)v68;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56LL))(v68, 1LL, 1LL, v61);
  sub_10019A6C4((uint64_t)v75, (uint64_t)&v71);
  v63 = (void *)swift_allocObject(&unk_1005E33E0, 80LL, 7LL);
  v63[2] = 0LL;
  v63[3] = 0LL;
  sub_1001CE0D0(&v71, (uint64_t)(v63 + 4));
  v63[9] = v14;
  v64 = v14;
  v65 = sub_1001B37E8(v62, (uint64_t)&unk_100656B80, (uint64_t)v63);
  swift_release(v65);

  sub_10018709C(v75);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v42, v11);
}

LABEL_31:
  return v12;
}

  [v12 appendString:@"_TEXT"];
  v29 = [v12 copy];

  return v29;
}

  return v6;
}

    v43 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v12,  v13,  v11));
    -[SDAutoUnlockPairingLockSession notifyDelegateWithError:](self, "notifyDelegateWithError:", v43);

    goto LABEL_32;
  }

  -[SDAutoUnlockPairingLockSession notifyDelegateWithError:](self, "notifyDelegateWithError:", v3);
LABEL_32:
}

      if (self->_createRetryCount >= 3) {
        goto LABEL_66;
      }
      -[SDAppleIDIdentityRequest _scheduleCreateRetryWithDelay:](self, "_scheduleCreateRetryWithDelay:", 5LL);
      goto LABEL_33;
    case 1:
      size_t v22 = CFDateGetTypeID();
      uint64_t v23 = CFDictionaryGetTypedValue(v6, @"CertificateExpirationDate", v22, 0LL);
      v24 = (NSDate *)objc_claimAutoreleasedReturnValue(v23);
      certificateExpirationDate = self->_certificateExpirationDate;
      self->_certificateExpirationDate = v24;

      if (!self->_certificateExpirationDate)
      {
        v65 = NSOSStatusErrorDomain;
        v91 = NSLocalizedDescriptionKey;
        v73 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  DebugGetErrorString(4294960584LL, 0LL, 0LL));
        v74 = objc_claimAutoreleasedReturnValue(v73);
        v68 = (void *)v74;
        v75 = @"?";
        if (v74) {
          v75 = (const __CFString *)v74;
        }
        v92 = v75;
        v70 = &v92;
        v71 = &v91;
        goto LABEL_65;
      }

      __int16 v26 = CFStringGetTypeID();
      v27 = CFDictionaryGetTypedValue(v6, @"CertificatePEM", v26, 0LL);
      __int16 v28 = (NSString *)objc_claimAutoreleasedReturnValue(v27);
      certificatePEM = self->_certificatePEM;
      self->_certificatePEM = v28;

      if (!self->_certificatePEM)
      {
        v65 = NSOSStatusErrorDomain;
        v89 = NSLocalizedDescriptionKey;
        v76 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  DebugGetErrorString(4294960584LL, 0LL, 0LL));
        v77 = objc_claimAutoreleasedReturnValue(v76);
        v68 = (void *)v77;
        v78 = @"?";
        if (v77) {
          v78 = (const __CFString *)v77;
        }
        v90 = v78;
        v70 = &v90;
        v71 = &v89;
        goto LABEL_65;
      }

      __int16 v30 = CFStringGetTypeID();
      int v31 = CFDictionaryGetTypedValue(v6, @"CertificateSerialNumber", v30, 0LL);
      __int16 v32 = (NSString *)objc_claimAutoreleasedReturnValue(v31);
      certificateSerialNumber = self->_certificateSerialNumber;
      self->_certificateSerialNumber = v32;

      if (!self->_certificateSerialNumber)
      {
        v65 = NSOSStatusErrorDomain;
        v87 = NSLocalizedDescriptionKey;
        v79 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  DebugGetErrorString(4294960584LL, 0LL, 0LL));
        v80 = objc_claimAutoreleasedReturnValue(v79);
        v68 = (void *)v80;
        v81 = @"?";
        if (v80) {
          v81 = (const __CFString *)v80;
        }
        v88 = v81;
        v70 = &v88;
        v71 = &v87;
        goto LABEL_65;
      }

      v34 = CFStringGetTypeID();
      v35 = CFDictionaryGetTypedValue(v6, @"IntermediateCertificate", v34, 0LL);
      uint64_t v36 = (NSString *)objc_claimAutoreleasedReturnValue(v35);
      intermediateCertificatePEM = self->_intermediateCertificatePEM;
      self->_intermediateCertificatePEM = v36;

      if (!self->_intermediateCertificatePEM)
      {
        v65 = NSOSStatusErrorDomain;
        v85 = NSLocalizedDescriptionKey;
        v82 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  DebugGetErrorString(4294960584LL, 0LL, 0LL));
        v83 = objc_claimAutoreleasedReturnValue(v82);
        v68 = (void *)v83;
        v84 = @"?";
        if (v83) {
          v84 = (const __CFString *)v83;
        }
        v86 = v84;
        v70 = &v86;
        v71 = &v85;
        goto LABEL_65;
      }

      -[SDAppleIDIdentityRequest _handleReceivedCertificate](self, "_handleReceivedCertificate");
      goto LABEL_33;
    case 2:
      if (dword_100642C08 > 60) {
        goto LABEL_37;
      }
      if (dword_100642C08 != -1)
      {
        v38 = @"Pending";
        v39 = 2LL;
LABEL_26:
        LogPrintF( &dword_100642C08,  "-[SDAppleIDIdentityRequest _handleCertificateFetchResponseWithInfo:error:]",  60LL,  "### Certificate status %d/%@\n",  v39,  v38);
        goto LABEL_37;
      }

      if (_LogCategory_Initialize(&dword_100642C08, 60LL))
      {
        v39 = self->_certificateStatus;
        if (v39 > 5) {
          v38 = @"?";
        }
        else {
          v38 = *(&off_1005CDA98 + v39);
        }
        goto LABEL_26;
      }

          v44 = SFNormalizeEmailAddress(v39, 1LL);
          v42 = (id)objc_claimAutoreleasedReturnValue(v44);
          goto LABEL_32;
        }

        if (v40 == (id)2) {
          goto LABEL_31;
        }
        if (v40 != (id)1)
        {
          v45 = 0LL;
          goto LABEL_34;
        }

        v41 = SFNormalizePhoneNumber(v39);
        v42 = (id)objc_claimAutoreleasedReturnValue(v41);
LABEL_32:
        v45 = v42;
LABEL_34:
        v46 = (void *)objc_claimAutoreleasedReturnValue([v38 personId]);
        v47 = objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v33, "objectForKeyedSubscript:", v38));
        v48 = (void *)v47;
        if (v45)
        {
          if (v46 && v47 != 0)
          {
            if (dword_100642CD8 <= 40
              && (dword_100642CD8 != -1 || _LogCategory_Initialize(&dword_100642CD8, 40LL)))
            {
              LogPrintF( &dword_100642CD8,  "-[SDXPCConnection _getInteractionsFromDBPerPeopleSuggestion:completion:]",  40LL,  "hybridSuggester: ContactID %@, Handle %@ <-> SKA %@",  v46,  v45,  v48);
            }

            v50 = objc_alloc_init(&OBJC_CLASS___SFPeopleSuggesterResult);
            [v50 setContactID:v46];
            v77 = 0LL;
            v51 = (void *)objc_claimAutoreleasedReturnValue( -[CNContactStore unifiedContactWithIdentifier:keysToFetch:error:]( v32,  "unifiedContactWithIdentifier:keysToFetch:error:",  v46,  v72,  &v77));
            if (!v51 || v77)
            {
              [v50 setFlags:2];
              ++v69;
            }

            else
            {
              v52 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
              v53 = [v52 contactIsBlocked:v51];

              if (v53)
              {
                [v50 setFlags:1];
                ++v66;
              }

              else
              {
                v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](&OBJC_CLASS___NSArray, "arrayWithObject:", v45));
                [v50 setHandles:v54];

                [v50 setSendersKnownAlias:v48];
              }

              uint64_t v36 = v67;
              __int16 v32 = v65;
            }

            -[NSMutableArray addObject:](v36, "addObject:", v50);

            int v33 = v68;
            v35 = v74;
          }
        }

        v37 = (char *)v37 + 1;
      }

      while (v35 != v37);
      v35 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v33,  "countByEnumeratingWithState:objects:count:",  &v78,  v91,  16LL);
      if (!v35) {
        goto LABEL_56;
      }
    }
  }

  v66 = 0LL;
  v69 = 0LL;
  uint64_t v36 = v67;
LABEL_56:

  if (dword_100642CD8 <= 30 && (dword_100642CD8 != -1 || _LogCategory_Initialize(&dword_100642CD8, 30LL))) {
    LogPrintF( &dword_100642CD8,  "-[SDXPCConnection _getInteractionsFromDBPerPeopleSuggestion:completion:]",  30LL,  "hybridSuggester: calling completion on %zu total results, %zu removed, %zu blocked",  (size_t)-[NSMutableArray count](v36, "count"),  v69,  v66);
  }
  v64[2](v64, v36, 0LL);
}

            v50 = 0;
          }

  v67 = sub_10020CF94();
  v69 = v68;
  v70 = sub_10020CF94();
  v72 = v71;
  if (!v69)
  {
    sub_1001A4BC8((uint64_t)v23, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
    sub_1001A4BC8(v58, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
    if (!v72) {
      goto LABEL_40;
    }
    swift_bridgeObjectRelease(v72);
    goto LABEL_42;
  }

  if (!v71)
  {
    swift_bridgeObjectRetain(v69);
    sub_1001A4BC8((uint64_t)v23, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
    sub_1001A4BC8(v58, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
    swift_bridgeObjectRelease_n(v69, 2LL);
LABEL_42:
    v63 = (uint64_t)v109;
    v61 = (uint64_t)v110;
    v60 = (uint64_t)v111;
    v62 = v113;
    goto LABEL_19;
  }

  if (v67 == v70 && v69 == v71)
  {
    swift_bridgeObjectRelease(v71);
    sub_1001A4BC8((uint64_t)v23, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
    sub_1001A4BC8(v58, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
    swift_bridgeObjectRelease(v69);
LABEL_40:
    sub_1001A4B84(v42, v113, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
    v74 = sub_1001A4B84(v41, v114, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
    v61 = (uint64_t)v110;
    v60 = (uint64_t)v111;
    goto LABEL_44;
  }

  v75 = _stringCompareWithSmolCheck(_:_:expecting:)(v67, v69, v70, v71, 0LL);
  swift_bridgeObjectRelease(v72);
  sub_1001A4BC8((uint64_t)v23, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
  sub_1001A4BC8(v58, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
  swift_bridgeObjectRelease(v69);
  v76 = v113;
  sub_1001A4B84(v42, v113, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
  v64 = v114;
  v62 = v76;
  v74 = sub_1001A4B84(v41, v114, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
  v63 = (uint64_t)v109;
  v61 = (uint64_t)v110;
  v60 = (uint64_t)v111;
  if ((v75 & 1) == 0)
  {
LABEL_20:
    sub_1001A4BC8(v64, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
    sub_1001A4BC8(v62, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
LABEL_21:
    sub_1001A4B84(v42, v59, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
    sub_1001A4B84(v41, v61, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
    goto LABEL_22;
  }

  v21 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v21,  1046LL,  0);
  __break(1u);
  return result;
}

uint64_t LibCall_ACMContextDelete( void (*a1)(uint64_t, uint64_t, void, void *, uint64_t, void, void), uint64_t a2, void *a3, int a4)
{
  if (a1 && a3)
  {
    if (a4) {
      a1(a2, 2LL, 0LL, a3, 16LL, 0LL, 0LL);
    }
    goto LABEL_7;
  }

  if (a3)
  {
LABEL_7:
    acm_mem_free_info( "ACMHandleWithPayload",  a3,  0x14uLL,  "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c",  172,  "LibCall_ACMContextDelete");
    acm_mem_free(a3, 0x14uLL);
    uint64_t v8 = 0LL;
    unsigned int v9 = 10;
    goto LABEL_8;
  }

  unsigned int v9 = 70;
  uint64_t v8 = 4294967293LL;
LABEL_8:
  return v8;
}

uint64_t SDUnlockRelockRequestReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0LL;
      *(_BYTE *)(a1 + 12) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_30:
      *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v36 - 144), 8) = v14;
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

LABEL_6:
    unint64_t v6 = 0;
  }

    unint64_t v6 = 0;
  }

  BOOL v9 = -[NSData copyWithZone:](self->_extraInfoData, "copyWithZone:", a3);
  int v10 = (void *)v5[2];
  v5[2] = v9;

  return v5;
}

    unint64_t v6 = 0;
  }

    unint64_t v6 = 0;
  }

    unint64_t v6 = 0;
  }

    unint64_t v6 = 0;
  }
}

    unint64_t v6 = 0;
  }
}
}
}

  int v10 = (int)v8;
  int v17 = NSLocalizedDescriptionKey;
  uint64_t v11 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  DebugGetErrorString(v8, 0LL, 0LL));
  char v12 = objc_claimAutoreleasedReturnValue(v11);
  unsigned int v13 = (void *)v12;
  uint64_t v14 = @"?";
  if (v12) {
    uint64_t v14 = (const __CFString *)v12;
  }
  int v18 = v14;
  unint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v18,  &v17,  1LL));
  char v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v10,  v15));
  ((void (**)(id, void *))v7)[2](v7, v16);

LABEL_10:
}

  unint64_t v15 = (int)v13;
  size_t v22 = NSLocalizedDescriptionKey;
  char v16 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  DebugGetErrorString(v13, 0LL, 0LL));
  int v17 = objc_claimAutoreleasedReturnValue(v16);
  int v18 = (void *)v17;
  __int16 v19 = @"?";
  if (v17) {
    __int16 v19 = (const __CFString *)v17;
  }
  uint64_t v23 = v19;
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v23,  &v22,  1LL));
  v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v15,  v20));
  ((void (**)(id, void *))v12)[2](v12, v21);

LABEL_10:
}

  int v10 = (int)v8;
  int v17 = NSLocalizedDescriptionKey;
  uint64_t v11 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  DebugGetErrorString(v8, 0LL, 0LL));
  char v12 = objc_claimAutoreleasedReturnValue(v11);
  unsigned int v13 = (void *)v12;
  uint64_t v14 = @"?";
  if (v12) {
    uint64_t v14 = (const __CFString *)v12;
  }
  int v18 = v14;
  unint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v18,  &v17,  1LL));
  char v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v10,  v15));
  ((void (**)(id, void *))v7)[2](v7, v16);

LABEL_10:
}

  int v10 = (int)v8;
  int v17 = NSLocalizedDescriptionKey;
  uint64_t v11 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  DebugGetErrorString(v8, 0LL, 0LL));
  char v12 = objc_claimAutoreleasedReturnValue(v11);
  unsigned int v13 = (void *)v12;
  uint64_t v14 = @"?";
  if (v12) {
    uint64_t v14 = (const __CFString *)v12;
  }
  int v18 = v14;
  unint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v18,  &v17,  1LL));
  char v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v10,  v15));
  ((void (**)(id, void *))v7)[2](v7, v16);

LABEL_10:
}

  unsigned int v13 = (int)v11;
  uint64_t v20 = NSLocalizedDescriptionKey;
  uint64_t v14 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  DebugGetErrorString(v11, 0LL, 0LL));
  unint64_t v15 = objc_claimAutoreleasedReturnValue(v14);
  char v16 = (void *)v15;
  int v17 = @"?";
  if (v15) {
    int v17 = (const __CFString *)v15;
  }
  v21 = v17;
  int v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v21,  &v20,  1LL));
  __int16 v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v13,  v18));
  ((void (**)(id, void *))v10)[2](v10, v19);

LABEL_10:
}

    unsigned int v5 = 0;
  }

    unsigned int v5 = 0;
  }

    *(_DWORD *)(v2 + 852) = v1;
    unint64_t v6 = *((void *)v4 + 4);
    unint64_t v7 = *(void **)(v6 + 112);
    *(void *)(v6 + 112) = 0LL;

    return [*((id *)v4 + 4) _update];
  }

  return result;
}

  uint64_t v11 = v7;
  char v12 = (void *)v3;
  unsigned int v13 = (uint64_t)v4;
  uint64_t v14 = v5;
  result.value.emailOrPhone._object = v14;
  result.value.emailOrPhone._countAndFlagsBits = v13;
  result.value.id._object = v12;
  result.value.id._countAndFlagsBits = v11;
  return result;
}

LABEL_7:
  return v6;
}
}
}

  unsigned int v5 = 0LL;
LABEL_8:
  unint64_t v6 = (unint64_t)-[NSData hash](self->_key, "hash");
  if ((*(_BYTE *)&self->_has & 1) != 0) {
    unint64_t v7 = 2654435761LL * self->_errorCode;
  }
  else {
    unint64_t v7 = 0LL;
  }
  return v4 ^ v3 ^ v5 ^ v7 ^ v6;
}

  return v6;
}

  return v6;
}

  uint64_t v2 = (SDSetupAgent *)FatalErrorF("PINPair still active during dealloc", a2);
  -[SDSetupAgent setPreventRepair:](v2, v3, v4);
}

  return v6;
}

    char v12 = @"UNLOCK_WATCH_ALUMINUM";
    goto LABEL_8;
  }

  if (v10 >= 6) {
    goto LABEL_7;
  }
  uint64_t v11 = &off_1005CCDF0;
LABEL_6:
  char v12 = v11[v10];
LABEL_8:
  unsigned int v13 = SFLocalizedStringForKey(v12, v9);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);

  return v14;
}

  return v6;
}

  return v6;
}

  return v6;
}

    goto LABEL_8;
  }

  if (v7)
  {
    uint64_t v20 = NSLocalizedDescriptionKey;
    v21 = @"Cannot send messages of these streams";
    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v21,  &v20,  1LL));
    unsigned int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSPOSIXErrorDomain,  94LL,  v9));
    v7[2](v7, 0LL, v13);
    goto LABEL_7;
  }

  return v7;
}

  return v12;
}

    CFRelease(discoverRequest);
    self->_discoverRequest = 0LL;
    goto LABEL_8;
  }

  if (!self->_connectionClosed)
  {
    self->_stopDeferred = 1;
    -[SDAirDropConnection sendAskResponse:](self, "sendAskResponse:", 401LL);
    goto LABEL_27;
  }

  CFRelease(askRequest);
  self->_askRequest = 0LL;
  discoverRequest = self->_discoverRequest;
  if (discoverRequest) {
    goto LABEL_7;
  }
LABEL_8:
  uploadRequest = self->_uploadRequest;
  if (uploadRequest)
  {
    CFRelease(uploadRequest);
    self->_uploadRequest = 0LL;
  }

  zipper = self->_zipper;
  if (zipper)
  {
    -[SDAirDropFileZipper setDelegate:](zipper, "setDelegate:", 0LL);
    -[SDAirDropFileZipper stop](self->_zipper, "stop");
    unint64_t v7 = self->_zipper;
    self->_zipper = 0LL;
  }

  readStream = self->_readStream;
  if (readStream)
  {
    CFReadStreamSetClient(readStream, 0LL, 0LL, 0LL);
    CFReadStreamSetDispatchQueue(self->_readStream, 0LL);
    CFReadStreamClose(self->_readStream);
    CFRelease(self->_readStream);
    self->_readStream = 0LL;
  }

  connection = self->_connection;
  if (connection)
  {
    int v10 = sub_1000345F0(connection);
    uint64_t v11 = airdrop_log(v10);
    char v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v13 = self->_connection;
      int v18 = 134217984;
      __int16 v19 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Invalidated AirDrop connection %p",  (uint8_t *)&v18,  0xCu);
    }

    _CFHTTPServerConnectionInvalidate(self->_connection);
    CFRelease(self->_connection);
    self->_connection = 0LL;
  }

  if (self->_queueSuspended)
  {
    sub_100034400(self);
    uint64_t v14 = sub_100033F4C();
    unint64_t v15 = (dispatch_object_s *)objc_claimAutoreleasedReturnValue(v14);
    dispatch_resume(v15);

    self->_queueSuspended = 0;
  }

  if (self->_personAdded)
  {
    char v16 = (void *)objc_claimAutoreleasedReturnValue(+[SDConnectedBrowser sharedBrowser](&OBJC_CLASS___SDConnectedBrowser, "sharedBrowser"));
    [v16 removeAirDropPerson:self->_person];

    self->_personAdded = 0;
  }

  if (self->_transactionStarted)
  {
    self->_transactionStarted = 0;
    -[SDStatusMonitor airDropTransactionEnd:](self->_monitor, "airDropTransactionEnd:", 0LL);
  }

  -[SDAirDropConnection releaseIdleSleepAssertion](self, "releaseIdleSleepAssertion");
LABEL_27:
  transaction = self->_transaction;
  self->_transaction = 0LL;
}

  return v5;
}

  return v5;
}
}

    [result _idsMeDeviceChanged];
    return [*(id *)(a1 + 32) _update];
  }

  return result;
}

    unint64_t v15 = *(_OWORD *)v13;
    char v16 = *((_OWORD *)v13 + 1);
    *((void *)v12 + 4) = *((void *)v13 + 4);
    *(_OWORD *)char v12 = v15;
    *((_OWORD *)v12 + 1) = v16;
    goto LABEL_8;
  }

  if (!v14)
  {
    sub_10018709C(v12);
    goto LABEL_7;
  }

  sub_10019DB24(v12, v13);
LABEL_8:
  sub_10019DB24((void *)((char *)a1 + a3[5]), (void *)((char *)a2 + a3[5]));
  int v17 = a3[6];
  int v18 = *(void *)((char *)a2 + v17);
  __int16 v19 = *(void *)((char *)a1 + v17);
  *(void *)((char *)a1 + v17) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = a3[7];
  v21 = *(void *)((char *)a2 + v20);
  size_t v22 = *(void *)((char *)a1 + v20);
  *(void *)((char *)a1 + v20) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  return a1;
}

    char v16 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v16 >= v12) {
      break;
    }
    int v17 = *(void *)(v7 + 8 * v16);
    ++v5;
    if (v17) {
      goto LABEL_20;
    }
    unsigned int v5 = v16 + 1;
    if (v16 + 1 >= v12) {
      break;
    }
    int v17 = *(void *)(v7 + 8 * v5);
    if (v17) {
      goto LABEL_20;
    }
    unsigned int v5 = v16 + 2;
    if (v16 + 2 >= v12) {
      break;
    }
    int v17 = *(void *)(v7 + 8 * v5);
    if (v17) {
      goto LABEL_20;
    }
    int v18 = v16 + 3;
    if (v18 >= v12) {
      break;
    }
    int v17 = *(void *)(v7 + 8 * v18);
    if (!v17)
    {
      while (1)
      {
        unsigned int v5 = v18 + 1;
        if (__OFADD__(v18, 1LL)) {
          break;
        }
        if (v5 >= v12) {
          goto LABEL_27;
        }
        int v17 = *(void *)(v7 + 8 * v5);
        ++v18;
        if (v17) {
          goto LABEL_20;
        }
      }

  uint64_t v14 = a4(v10, v11, a3);
  swift_bridgeObjectRelease(v9);
  return v14;
}

  __break(1u);
  return result;
}

      __int16 v28 = &selRef_rssi;
      goto LABEL_29;
    }

    int v31 = v29;
    __int16 v32 = sub_100183168(0LL, &qword_10064A488, &OBJC_CLASS___LSClaimBinding_ptr);
    int v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v31, v32);
    v34 = v30;

    v134 = (uint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v33 >> 62)
    {
      if (v33 < 0) {
        v100 = v33;
      }
      else {
        v100 = v33 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain((const char *)v33, v121, v122, v123);
      v35 = _CocoaArrayWrapper.endIndex.getter(v100);
    }

    else
    {
      v35 = *(void *)((v33 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      *(void *)&uint64_t v36 = swift_bridgeObjectRetain((const char *)v33).n128_u64[0];
    }

    if (v35)
    {
      if (v35 < 1) {
        goto LABEL_73;
      }
      for (i = 0LL; i != v35; ++i)
      {
        if ((v33 & 0xC000000000000001LL) != 0) {
          v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v33);
        }
        else {
          v39 = *(id *)(v33 + 8 * i + 32);
        }
        v40 = v39;
        v41 = objc_msgSend(v39, "bundleRecord", (void)v121);

        if (v41)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v42);
          v44 = *(void *)((v134 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          v43 = *(void *)((v134 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v44 >= v43 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1LL);
          }
          v38 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v44, v41);
          specialized Array._endMutation()(v38);
        }
      }

      v45 = swift_bridgeObjectRelease((const char *)v33).n128_u64[0];
      v46 = (const char *)v134;
    }

    else
    {
      v45 = swift_bridgeObjectRelease((const char *)v33, v36).n128_u64[0];
      v46 = (const char *)_swiftEmptyArrayStorage;
    }

    swift_bridgeObjectRelease((const char *)v33, *(double *)&v45, (void)v121);
    v58 = (const char *)sub_1002DE294((uint64_t)v46);
    swift_bridgeObjectRelease(v46);
    isa = Array._bridgeToObjectiveC()().super.isa;
    *(void *)&v60 = swift_bridgeObjectRelease(v58).n128_u64[0];
    objc_msgSend(v131, "addObjectsFromArray:", isa, v60);

    __int16 v28 = &selRef_rssi;
LABEL_29:
    v61 = objc_msgSend(v131, v28[220], (void)v121);
    v62 = static Set._unconditionallyBridgeFromObjectiveC(_:)( v61,  &type metadata for AnyHashable,  &protocol witness table for AnyHashable);

    v63 = *(void *)(v62 + 16);
    *(void *)&v64 = swift_bridgeObjectRelease((const char *)v62).n128_u64[0];
    if (!v63)
    {
      v134 = 0LL;
      v65 = objc_msgSend(v130, "availableClaimBindingsReturningError:", &v134, v64);
      v66 = (id)v134;
      if (v65)
      {
        v67 = v65;
        v68 = sub_100183168(0LL, &qword_10064A488, &OBJC_CLASS___LSClaimBinding_ptr);
        v69 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v67, v68);
        v70 = v66;

        v134 = (uint64_t)_swiftEmptyArrayStorage;
        if ((unint64_t)v69 >> 62)
        {
          if (v69 < 0) {
            v101 = v69;
          }
          else {
            v101 = v69 & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain((const char *)v69);
          v71 = _CocoaArrayWrapper.endIndex.getter(v101);
        }

        else
        {
          v71 = *(void *)((v69 & 0xFFFFFFFFFFFFF8LL) + 0x10);
          *(void *)&v72 = swift_bridgeObjectRetain((const char *)v69).n128_u64[0];
        }

        if (v71)
        {
          if (v71 < 1) {
            goto LABEL_74;
          }
          for (j = 0LL; j != v71; ++j)
          {
            if ((v69 & 0xC000000000000001LL) != 0) {
              v75 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v69);
            }
            else {
              v75 = *(id *)(v69 + 8 * j + 32);
            }
            v76 = v75;
            v77 = [v75 bundleRecord];

            if (v77)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v78);
              v80 = *(void *)((v134 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
              v79 = *(void *)((v134 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
              if (v80 >= v79 >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v80 + 1, 1LL);
              }
              v74 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v80, v77);
              specialized Array._endMutation()(v74);
            }
          }

          v81 = swift_bridgeObjectRelease((const char *)v69).n128_u64[0];
          v82 = (const char *)v134;
        }

        else
        {
          v81 = swift_bridgeObjectRelease((const char *)v69, v72).n128_u64[0];
          v82 = (const char *)_swiftEmptyArrayStorage;
        }

        swift_bridgeObjectRelease((const char *)v69, *(double *)&v81);
        v94 = (const char *)sub_1002DE294((uint64_t)v82);
        swift_bridgeObjectRelease(v82);
        v88 = Array._bridgeToObjectiveC()().super.isa;
        *(void *)&v95 = swift_bridgeObjectRelease(v94).n128_u64[0];
        objc_msgSend(v131, "addObjectsFromArray:", v88, v95);
        goto LABEL_53;
      }

      v83 = (id)v134;
      v84 = _convertNSErrorToError(_:)(v66);

      swift_willThrow(v85);
      if (qword_100644068 != -1) {
        swift_once(&qword_100644068, sub_1002678E4);
      }
      v123 = 0LL;
      v86 = type metadata accessor for Logger(0LL);
      sub_100186DE4(v86, (uint64_t)qword_10064A340);
      swift_errorRetain(v84);
      v87 = swift_errorRetain(v84);
      v88 = (Class)Logger.logObject.getter(v87);
      v89 = static os_log_type_t.error.getter(v88);
      if (!os_log_type_enabled((os_log_t)v88, v89))
      {
        swift_errorRelease(v84);
        swift_errorRelease(v84);
        swift_errorRelease(v84);
LABEL_53:

        __int16 v28 = &selRef_rssi;
        goto LABEL_54;
      }

      v90 = swift_slowAlloc(12LL, -1LL);
      v91 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)v90 = v121;
      swift_errorRetain(v84);
      v92 = _swift_stdlib_bridgeErrorToNSError(v84);
      *(void *)(v90 + 4) = v92;
      *v91 = v92;
      swift_errorRelease(v84);
      swift_errorRelease(v84);
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v88,  v89,  "Failed to get airdrop available applications for opening: %@",  (uint8_t *)v90,  0xCu);
      v93 = sub_100183098(&qword_1006454E0);
      swift_arrayDestroy(v91, 1LL, v93);
      swift_slowDealloc(v91, -1LL, -1LL);
      swift_slowDealloc(v90, -1LL, -1LL);

      swift_errorRelease(v84);
      __int16 v28 = &selRef_rssi;
    }

  __break(1u);
  return result;
}

    uint64_t v14 = *(_OWORD *)v12;
    unint64_t v15 = *((_OWORD *)v12 + 1);
    *((void *)v11 + 4) = *((void *)v12 + 4);
    *(_OWORD *)uint64_t v11 = v14;
    *((_OWORD *)v11 + 1) = v15;
    return a1;
  }

  if (!v13)
  {
    sub_10018709C(v11);
    goto LABEL_7;
  }

  sub_10019DB24(v11, v12);
  return a1;
}

  if (v28)
  {
    v38 = v28;
    v39 = a15;
    v34 = _NSConcreteStackBlock;
    v35 = 1107296256LL;
    uint64_t v36 = sub_1001B9FE4;
    v37 = &unk_1005D8ED0;
    v29 = _Block_copy(&v34);
    swift_release(v39);
  }

  else
  {
    v29 = 0LL;
  }

  __int16 v30 = [v33 initWithAwdlInfo:v22.super.isa isRangingInitiator:a2 & 1 rangingPeer:a3 queueAvailableHandler:v23 awdlStartedHandler:v24 peerFoundHandler:a8 rang ingStartedHandler:v27 rangingCompletedHandler:v26 invalidationHandler:v29];

  _Block_release(v29);
  _Block_release(v26);
  _Block_release(v27);
  _Block_release(a8);
  _Block_release(v24);
  _Block_release(v23);
  swift_release(v41);
  return v30;
}

    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }

  *a1 = *a2;
  unint64_t v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

  char v12 = (unsigned __int16)sub_10031E788(v8, v9, a3);
  swift_bridgeObjectRelease((const char *)v7);
  return v12 & 0x1FF;
}

  swift_bridgeObjectRelease(v1);
  unsigned int v13 = 1LL;
LABEL_10:
  swift_task_dealloc(*(void *)(v0 + 48));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v13);
}

uint64_t SDUnlockStashConfirmationReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      char v18 = 0;
      unsigned int v19 = 0;
      uint64_t v20 = 0LL;
      *(_BYTE *)(a1 + 20) |= 4u;
      while (1)
      {
        unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v21 == -1LL || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v22 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
        v20 |= (unint64_t)(v22 & 0x7F) << v18;
        if ((v22 & 0x80) == 0) {
          goto LABEL_48;
        }
        v18 += 7;
        BOOL v9 = v19++ >= 9;
        if (v9)
        {
          uint64_t v20 = 0LL;
          goto LABEL_50;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_48:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v20 = 0LL;
      }
LABEL_50:
      *(_BYTE *)(a1 + 16) = v20 != 0;
    }

    else
    {
      if ((_DWORD)v12 == 2)
      {
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v15 = 0LL;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          unint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 == -1LL || v25 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v26 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
          v15 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0) {
            goto LABEL_52;
          }
          v23 += 7;
          BOOL v9 = v24++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_54;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_52:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_54:
        uint64_t v28 = 8LL;
      }

      else
      {
        if ((_DWORD)v12 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result) {
            return result;
          }
          continue;
        }

        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0LL;
        *(_BYTE *)(a1 + 20) |= 2u;
        while (1)
        {
          unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1LL || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v17 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0) {
            goto LABEL_44;
          }
          v13 += 7;
          BOOL v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_46;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_44:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_46:
        uint64_t v28 = 12LL;
      }

      *(_DWORD *)(a1 + v2_Block_object_dispose((const void *)(v36 - 144), 8) = v15;
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

LABEL_5:
}
}
}

  key = self->_key;
  if (key) {
    [v3 setObject:key forKey:@"key"];
  }
  if ((*(_BYTE *)&self->_has & 1) != 0)
  {
    unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_errorCode));
    [v3 setObject:v7 forKey:@"errorCode"];
  }

  return v3;
}

  if (self->_key)
  {
    unint64_t v6 = v4;
    objc_msgSend(v4, "setKey:");
    char v4 = v6;
  }

  if ((*(_BYTE *)&self->_has & 1) != 0)
  {
    v4[2] = self->_errorCode;
    *((_BYTE *)v4 + 36) |= 1u;
  }
}

  char v8 = -[NSData copyWithZone:](self->_key, "copyWithZone:", a3);
  BOOL v9 = (void *)v6[2];
  v6[2] = v8;

  if ((*(_BYTE *)&self->_has & 1) != 0)
  {
    *((_DWORD *)v6 + 2) = self->_errorCode;
    *((_BYTE *)v6 + 36) |= 1u;
  }

  return v6;
}

  if (*((void *)v4 + 2))
  {
    unint64_t v6 = v4;
    -[SDUnlockSessionKeyExchangeRequest setKey:](self, "setKey:");
    char v4 = v6;
  }

  if ((*((_BYTE *)v4 + 36) & 1) != 0)
  {
    self->_errorCode = *((_DWORD *)v4 + 2);
    *(_BYTE *)&self->_has |= 1u;
  }
}

  errorString = self->_errorString;
  if (errorString) {
    [v3 setObject:errorString forKey:@"errorString"];
  }
  return v3;
}

  errorString = self->_errorString;
  if (errorString)
  {
    PBDataWriterWriteStringField(v7, errorString, 4LL);
    char v4 = v7;
  }
}

  if (self->_errorString)
  {
    unint64_t v6 = v4;
    objc_msgSend(v4, "setErrorString:");
    char v4 = v6;
  }
}

  char v8 = -[NSString copyWithZone:](self->_errorString, "copyWithZone:", a3);
  BOOL v9 = (void *)v6[1];
  v6[1] = v8;

  return v6;
}

  if (*((void *)v4 + 1))
  {
    unint64_t v6 = v4;
    -[SDUnlockReset setErrorString:](self, "setErrorString:");
    char v4 = v6;
  }
}

  char v18 = sub_10008D728(a1);
  if (a2) {
    a2 = CFURLCreateStringByAddingPercentEscapes(0LL, a2, 0LL, @";:@?/", 0x8000100u);
  }
  if (a3) {
    a3 = CFURLCreateStringByAddingPercentEscapes(0LL, a3, 0LL, @";:@?/", 0x8000100u);
  }
  if (CFStringHasPrefix(MutableCopy, @"[") && CFStringHasSuffix(MutableCopy, @"]"))
  {
    Length = CFStringGetLength(MutableCopy);
    MutableCopy = CFStringCreateMutableCopy(0LL, Length, MutableCopy);
    v45.length = CFStringGetLength(MutableCopy);
    v45.location = 0LL;
    CFStringFindAndReplace(MutableCopy, @"%", @"%25", v45, 0LL);
  }

  else if (MutableCopy)
  {
    MutableCopy = (__CFString *)CFURLCreateStringByAddingPercentEscapes( 0LL,  MutableCopy,  0LL,  @";:@?/",
                                  0x8000100u);
  }

  Mutable = CFStringCreateMutable(0LL, 0LL);
  CFStringAppendFormat(Mutable, 0LL, @"%@://", v17);
  if (!a2)
  {
    if (!a3)
    {
      unint64_t v21 = 1;
      goto LABEL_20;
    }

    goto LABEL_18;
  }

  CFStringAppend(Mutable, a2);
  if (a3)
  {
LABEL_18:
    CFStringAppendFormat(Mutable, 0LL, @":%@", a3);
    unint64_t v21 = 0;
    goto LABEL_19;
  }

  unint64_t v21 = 1;
LABEL_19:
  CFStringAppend(Mutable, @"@");
LABEL_20:
  CFStringAppend(Mutable, MutableCopy);
  if (a5 >= 1 && v18 != a5) {
    CFStringAppendFormat(Mutable, 0LL, @":%ld", a5);
  }
  if (a6)
  {
    if (CFStringHasPrefix(a6, @"/"))
    {
      v44.length = CFStringGetLength(a6) - 1;
      v44.location = 1LL;
      char v22 = CFStringCreateWithSubstring(0LL, a6, v44);
    }

    else
    {
      char v22 = (const __CFString *)CFRetain(a6);
    }

    char v23 = v22;
    if (v22) {
      unsigned int v24 = CFURLCreateStringByAddingPercentEscapes(0LL, v22, 0LL, 0LL, 0x8000100u);
    }
    else {
      unsigned int v24 = 0LL;
    }
    CFStringAppendFormat(Mutable, 0LL, @"/%@", v24);
    CFRelease(v23);
    CFRelease(v24);
  }

  if (a7)
  {
    Count = CFDictionaryGetCount(a7);
    if (Count)
    {
      char v26 = Count;
      v40 = v21;
      v41 = a3;
      v42 = a8;
      v39 = (uint64_t)&v39;
      __chkstk_darwin(Count);
      uint64_t v28 = (const void **)((char *)&v39 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      bzero(v28, v27);
      v29 = CFStringCreateMutable(0LL, 0LL);
      CFDictionaryGetKeysAndValues(a7, v28, 0LL);
      __int16 v30 = v26 - 1;
      if (v26 >= 1)
      {
        while (1)
        {
          int v31 = *v28;
          Value = CFDictionaryGetValue(a7, *v28);
          CFStringAppendFormat(v29, 0LL, @"%@=%@", v31, Value);
          if (!v30) {
            break;
          }
          CFStringAppend(v29, @"&");
          --v30;
          ++v28;
        }
      }

      CFStringAppendFormat(Mutable, 0LL, @"?%@", v29);
      CFRelease(v29);
      a8 = v42;
      a3 = v41;
      LOBYTE(v21) = v40;
    }
  }

  int v33 = CFURLCreateWithString(0LL, Mutable, 0LL);
  v34 = v33;
  if (a8)
  {
    error = 0LL;
    if (!CFURLSetResourcePropertyForKey(v33, kCFURLIsDirectoryKey, kCFBooleanTrue, &error))
    {
      v35 = v21;
      uint64_t v36 = (os_log_s *)utilities_log();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
        sub_10008EB1C((uint64_t *)&error, v36);
      }
      CFRelease(error);
      LOBYTE(v21) = v35;
    }
  }

  CFRelease(Mutable);
  CFRelease(MutableCopy);
  if (a2) {
    CFRelease(a2);
  }
  if ((v21 & 1) == 0) {
    CFRelease(a3);
  }
  return v34;
}

  token = self->_token;
  if (token) {
    [v3 setObject:token forKey:@"token"];
  }
  pairedDeviceID = self->_pairedDeviceID;
  if (pairedDeviceID) {
    [v3 setObject:pairedDeviceID forKey:@"pairedDeviceID"];
  }
  return v3;
}

  token = self->_token;
  if (token)
  {
    PBDataWriterWriteDataField(v8, token, 4LL);
    char v4 = v8;
  }

  pairedDeviceID = self->_pairedDeviceID;
  if (pairedDeviceID)
  {
    PBDataWriterWriteStringField(v8, pairedDeviceID, 5LL);
    char v4 = v8;
  }
}

  unint64_t v6 = v4;
  if (self->_token)
  {
    objc_msgSend(v4, "setToken:");
    char v4 = v6;
  }

  if (self->_pairedDeviceID)
  {
    objc_msgSend(v6, "setPairedDeviceID:");
    char v4 = v6;
  }
}

  char v8 = -[NSData copyWithZone:](self->_token, "copyWithZone:", a3);
  BOOL v9 = (void *)v6[4];
  v6[4] = v8;

  int v10 = -[NSString copyWithZone:](self->_pairedDeviceID, "copyWithZone:", a3);
  uint64_t v11 = (void *)v6[2];
  v6[2] = v10;

  return v6;
}

  unint64_t v6 = v4;
  if (*((void *)v4 + 4))
  {
    -[SDUnlockSetupCreateRecord setToken:](self, "setToken:");
    char v4 = v6;
  }

  if (*((void *)v4 + 2))
  {
    -[SDUnlockSetupCreateRecord setPairedDeviceID:](self, "setPairedDeviceID:");
    char v4 = v6;
  }
}
}
}
}
}

  -[SDAppleIDIdentityRequest _scheduleCreateCertificateTaskWithDelay:]( self,  "_scheduleCreateCertificateTaskWithDelay:",  a3);
}

  -[SDAppleIDIdentityRequest _scheduleFetchCertificateTaskWithDelay:]( self,  "_scheduleFetchCertificateTaskWithDelay:",  a3);
}

  if (v7) {
    -[SDAirDropFileZipper addParentChain:file:base:](self, "addParentChain:file:base:", a3, a4, a5);
  }
  char v17 = -[SDAirDropFileZipper addFile:withBase:toBom:](self, "addFile:withBase:toBom:", a4, a5, a3);
  if (v17) {
    ++self->_fileCount;
  }
  if (sub_1001144B0(a4))
  {
    *(void *)&v23[0] = 0LL;
    char v18 = CFURLEnumeratorCreateForDirectoryURL(0LL, a4, 0LL, v12);
    while (1)
    {
      NextURL = CFURLEnumeratorGetNextURL(v18, (CFURLRef *)v23, 0LL);
      if (NextURL == kCFURLEnumeratorSuccess) {
        -[SDAirDropFileZipper addFileURLToBom:file:base:propertyKeys:topLevel:]( self,  "addFileURLToBom:file:base:propertyKeys:topLevel:",  a3,  *(void *)&v23[0],  a5,  v12,  0LL);
      }
      uint64_t v20 = objc_loadWeakRetained((id *)&self->_delegate);
      if (NextURL == kCFURLEnumeratorEnd || !v20) {
        break;
      }

      if (NextURL == kCFURLEnumeratorError) {
        goto LABEL_23;
      }
    }

LABEL_23:
    CFRelease(v18);
  }

  else
  {
    unint64_t v21 = -[SDAirDropFileZipper totalFileSize:](self, "totalFileSize:", a4);
    if (v21 >= 1) {
      self->_totalBytes += v21;
    }
  }

      unint64_t v7 = 0LL;
      char v8 = 0LL;
      if (!a3) {
        goto LABEL_19;
      }
      goto LABEL_13;
    }

    if (v23) {
      goto LABEL_5;
    }
    char v8 = (id)objc_claimAutoreleasedReturnValue([v5 objectAtIndexedSubscript:0]);

    if (v8)
    {
      char v22 = 0LL;
      BOOL v9 = SFAppleIDCommonNameForCertificate(v8, &v22);
      char v8 = v22;
      char v23 = v9;
      if (v9)
      {
        unint64_t v7 = 0LL;
        if (!a3) {
          goto LABEL_19;
        }
        goto LABEL_13;
      }

      int v10 = (void *)objc_claimAutoreleasedReturnValue([v6 accountIdentifier]);
      uint64_t v11 = [v8 isEqualToString:v10];

      if ((v11 & 1) != 0)
      {
        char v23 = 0;
        unint64_t v7 = 1LL;
        if (!a3) {
          goto LABEL_19;
        }
        goto LABEL_13;
      }

      if (dword_100643C58 <= 90
        && (dword_100643C58 != -1 || _LogCategory_Initialize(&dword_100643C58, 90LL)))
      {
        LogPrintF( &dword_100643C58,  "BOOL SDAppleIDAuthenticateCertificateChainSync(NSArray * _Nonnull __strong, SDAppleIDVerifiedIdentity * _Nonnu ll __strong, NSError * _Nullable __autoreleasing * _Nullable)",  90LL,  "Account identifier check failed");
      }

      unint64_t v7 = 0LL;
      unint64_t v21 = 201238;
    }

    else
    {
      unint64_t v7 = 0LL;
      unint64_t v21 = -6762;
    }
  }

  else
  {
    unint64_t v7 = 0LL;
    char v8 = 0LL;
    unint64_t v21 = -6705;
  }

  char v23 = v21;
  if (!a3) {
    goto LABEL_19;
  }
LABEL_13:
  unint64_t v12 = v23;
  if (v23)
  {
    unsigned int v24 = NSLocalizedDescriptionKey;
    char v13 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  DebugGetErrorString(v23, 0LL, 0LL));
    unsigned int v14 = objc_claimAutoreleasedReturnValue(v13);
    uint64_t v15 = (void *)v14;
    unint64_t v16 = @"?";
    if (v14) {
      unint64_t v16 = (const __CFString *)v14;
    }
    unint64_t v25 = v16;
    char v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v25,  &v24,  1LL));
    char v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v12,  v17));
  }

  else
  {
    char v18 = 0LL;
  }

  unsigned int v19 = v18;
  *a3 = v19;

LABEL_19:
  return v7;
}

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    char v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    char v23 = *v22;
    unsigned int v24 = (-1LL << v3) - 1;
  }

  else
  {
    char v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    unsigned int v24 = *v22;
    char v23 = (-1LL << result) - 1;
  }

  *char v22 = v24 & v23;
  unint64_t v25 = *(void *)(a2 + 16);
  char v26 = __OFSUB__(v25, 1LL);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    unint64_t v21 = *v20;
    char v22 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    char v22 = *v20;
    unint64_t v21 = (-1LL << result) - 1;
  }

  *uint64_t v20 = v22 & v21;
  char v23 = *(void *)(a2 + 16);
  unsigned int v24 = __OFSUB__(v23, 1LL);
  unint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    unint64_t v21 = *v20;
    char v22 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    char v22 = *v20;
    unint64_t v21 = (-1LL << result) - 1;
  }

  *uint64_t v20 = v22 & v21;
  char v23 = *(void *)(a2 + 16);
  unsigned int v24 = __OFSUB__(v23, 1LL);
  unint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    unint64_t v21 = *v20;
    char v22 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    char v22 = *v20;
    unint64_t v21 = (-1LL << result) - 1;
  }

  *uint64_t v20 = v22 & v21;
  char v23 = *(void *)(a2 + 16);
  unsigned int v24 = __OFSUB__(v23, 1LL);
  unint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    unint64_t v21 = *v20;
    char v22 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    char v22 = *v20;
    unint64_t v21 = (-1LL << result) - 1;
  }

  *uint64_t v20 = v22 & v21;
  char v23 = *(void *)(a2 + 16);
  unsigned int v24 = __OFSUB__(v23, 1LL);
  unint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    char v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    char v18 = *v17;
    unsigned int v19 = (-1LL << v3) - 1;
  }

  else
  {
    char v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    unsigned int v19 = *v17;
    char v18 = (-1LL << result) - 1;
  }

  *char v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  unint64_t v21 = __OFSUB__(v20, 1LL);
  char v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

  char v8 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  BOOL v9 = &v3[v8 + 32];
  memcpy(v9, (const void *)(a1 + 32), v2);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease((const char *)a1);
    *unsigned int v1 = v3;
    return;
  }

  uint64_t v11 = *((void *)v3 + 2);
  unint64_t v12 = __OFADD__(v11, v2);
  char v13 = v11 + v2;
  if (!v12)
  {
    *((void *)v3 + 2) = v13;
    goto LABEL_19;
  }

  char v8 = *(void *)(v3 + 16);
  BOOL v9 = (*(void *)(v3 + 24) >> 1) - v8;
  int v10 = type metadata accessor for URL(0LL);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v11 = *(void *)(v10 - 8);
  unint64_t v12 = (*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  char v13 = *(void *)(v11 + 72);
  unsigned int v14 = v3 + v12 + v13 * v8;
  uint64_t v15 = a1 + v12;
  unint64_t v16 = v13 * v2;
  char v17 = v14 + v16;
  char v18 = v15 + v16;
  if (v15 < v17 && v14 < v18) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy(v14);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease((const char *)a1);
    *unsigned int v1 = v3;
    return;
  }

  uint64_t v20 = *(void *)(v3 + 16);
  unint64_t v21 = __OFADD__(v20, v2);
  char v22 = v20 + v2;
  if (!v21)
  {
    *(void *)(v3 + 16) = v22;
    goto LABEL_19;
  }

  char v8 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  BOOL v9 = (unint64_t)&v3[16 * v8 + 32];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease((const char *)a1);
    *unsigned int v1 = v3;
    return;
  }

  uint64_t v11 = *((void *)v3 + 2);
  unint64_t v12 = __OFADD__(v11, v2);
  char v13 = v11 + v2;
  if (!v12)
  {
    *((void *)v3 + 2) = v13;
    goto LABEL_19;
  }

  char v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  BOOL v9 = (unint64_t)&v3[9 * v8 + 4];
  if (a1 + 32 < v9 + 72 * v2 && v9 < a1 + 32 + 72 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease((const char *)a1);
    *unsigned int v1 = v3;
    return;
  }

  uint64_t v11 = v3[2];
  unint64_t v12 = __OFADD__(v11, v2);
  char v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }

  if ((v5 & 0xC000000000000001LL) != 0)
  {
    char v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v5);
    swift_bridgeObjectRelease(v5);
    char v8 = *(void *)(v13 + OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_bundleID + 8);
    swift_bridgeObjectRetain(v8);
    swift_unknownObjectRelease(v13);
  }

  else
  {
    if (!*(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      __break(1u);
      goto LABEL_29;
    }

    unint64_t v7 = (char *)*(id *)(v5 + 32);
    swift_bridgeObjectRelease(v5);
    char v8 = *(void *)&v7[OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_bundleID + 8];
    swift_bridgeObjectRetain(v8);
  }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  char v18 = *(void *)(v3 + 16);
  unsigned int v19 = __OFSUB__(v18, 1LL);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  char v18 = *(void *)(v3 + 16);
  unsigned int v19 = __OFSUB__(v18, 1LL);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

  *a3 = result;
  a3[1] = v5;
  return result;
}

  if ((v3 & 0xC000000000000001LL) != 0)
  {
    unint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v3);
    *(void *)&char v13 = swift_bridgeObjectRelease((const char *)v3).n128_u64[0];
    io_object_t v3 = *(void *)(v12 + OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_bundleID + 8);
    swift_bridgeObjectRetain((const char *)v3, v13);
    swift_unknownObjectRelease(v12);
    unsigned __int8 v0 = *(void *)(v2 + 24);
    if (!v0) {
      goto LABEL_29;
    }
  }

  else
  {
    if (!*(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      __break(1u);
      goto LABEL_24;
    }

    unint64_t v6 = (char *)*(id *)(v3 + 32);
    *(void *)&unint64_t v7 = swift_bridgeObjectRelease((const char *)v3).n128_u64[0];
    io_object_t v3 = *(void *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_bundleID + 8];
    swift_bridgeObjectRetain((const char *)v3, v7);

    unsigned __int8 v0 = *(void *)(v2 + 24);
    if (!v0) {
      goto LABEL_29;
    }
  }

  if ((v3 & 0xC000000000000001LL) != 0)
  {
    unint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v3);
    *(void *)&char v13 = swift_bridgeObjectRelease((const char *)v3).n128_u64[0];
    io_object_t v3 = *(void *)(v12 + OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_bundleID + 8);
    swift_bridgeObjectRetain((const char *)v3, v13);
    swift_unknownObjectRelease(v12);
    unsigned __int8 v0 = *(void *)(v2 + 24);
    if (!v0) {
      goto LABEL_29;
    }
  }

  else
  {
    if (!*(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      __break(1u);
      goto LABEL_24;
    }

    unint64_t v6 = (char *)*(id *)(v3 + 32);
    *(void *)&unint64_t v7 = swift_bridgeObjectRelease((const char *)v3).n128_u64[0];
    io_object_t v3 = *(void *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_bundleID + 8];
    swift_bridgeObjectRetain((const char *)v3, v7);

    unsigned __int8 v0 = *(void *)(v2 + 24);
    if (!v0) {
      goto LABEL_29;
    }
  }

LABEL_15:
  return v6;
}

    char v18 = objc_opt_new(&OBJC_CLASS___NSDate);
    unsigned int v19 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingLockSession tokenExchangeDate](self, "tokenExchangeDate"));
    -[NSDate timeIntervalSinceDate:](v18, "timeIntervalSinceDate:", v19);
    -[SDAutoUnlockPairingLockSession setTokenExchangeInterval:](self, "setTokenExchangeInterval:");

    unint64_t v21 = auto_unlock_log(v20);
    char v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Received SDUnlockSetupCreateRecord", v23, 2u);
    }

    -[SDAutoUnlockPairingSession invalidateResponseTimer](self, "invalidateResponseTimer");
    -[SDAutoUnlockPairingLockSession handleSetupCreateRecord:](self, "handleSetupCreateRecord:", v8);
    goto LABEL_18;
  }

  char v13 = objc_opt_new(&OBJC_CLASS___NSDate);
  unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingLockSession keyExchangeDate](self, "keyExchangeDate"));
  -[NSDate timeIntervalSinceDate:](v13, "timeIntervalSinceDate:", v14);
  -[SDAutoUnlockPairingLockSession setKeyExchangeInterval:](self, "setKeyExchangeInterval:");

  unint64_t v16 = auto_unlock_log(v15);
  char v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Received SDUnlockSetupSessionCreated", v24, 2u);
  }

  -[SDAutoUnlockPairingSession invalidateResponseTimer](self, "invalidateResponseTimer");
  -[SDAutoUnlockPairingLockSession handleSetupSessionCreated:fromDeviceID:]( self,  "handleSetupSessionCreated:fromDeviceID:",  v8,  v9);
LABEL_18:
}

  return v8;
}

    -[SFDeviceDiscovery setOverrideScreenOff:]( self->_deviceDiscovery,  "setOverrideScreenOff:",  [v7 count] != 0);

    goto LABEL_21;
  }

  BOOL v9 = objc_alloc_init(&OBJC_CLASS___SFDeviceDiscovery);
  deviceDiscovery = self->_deviceDiscovery;
  self->_deviceDiscovery = v9;

  -[SFDeviceDiscovery setChangeFlags:](self->_deviceDiscovery, "setChangeFlags:", 5LL);
  cloudPairedOnly = self->_cloudPairedOnly;
  unint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[SDNearbyAgent sharedNearbyAgent](&OBJC_CLASS___SDNearbyAgent, "sharedNearbyAgent"));
  char v13 = v12;
  if (cloudPairedOnly)
  {
    unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue([v12 idsBluetoothDeviceIDsForSharing]);

    -[SFDeviceDiscovery setDeviceFilter:](self->_deviceDiscovery, "setDeviceFilter:", v14);
  }

  else
  {
    unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue([v12 idsDeviceIDsForRIServers]);
  }

  -[SFDeviceDiscovery setOverrideScreenOff:]( self->_deviceDiscovery,  "setOverrideScreenOff:",  [v14 count] != 0);

  -[SFDeviceDiscovery setDiscoveryFlags:](self->_deviceDiscovery, "setDiscoveryFlags:", 64LL);
  -[SFDeviceDiscovery setPurpose:](self->_deviceDiscovery, "setPurpose:", @"RIA");
  -[SFDeviceDiscovery setRssiThreshold:](self->_deviceDiscovery, "setRssiThreshold:", self->_rssiThreshold);
  -[SFDeviceDiscovery setScanRate:](self->_deviceDiscovery, "setScanRate:", 10LL);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472LL;
  v24[2] = sub_10009CF9C;
  v24[3] = &unk_1005CB8C8;
  v24[4] = self;
  -[SFDeviceDiscovery setDeviceFoundHandler:](self->_deviceDiscovery, "setDeviceFoundHandler:", v24);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  v23[2] = sub_10009D048;
  v23[3] = &unk_1005CB8C8;
  v23[4] = self;
  -[SFDeviceDiscovery setDeviceLostHandler:](self->_deviceDiscovery, "setDeviceLostHandler:", v23);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_10009D0F4;
  v22[3] = &unk_1005CB8F0;
  v22[4] = self;
  -[SFDeviceDiscovery setDeviceChangedHandler:](self->_deviceDiscovery, "setDeviceChangedHandler:", v22);
  -[SFDeviceDiscovery activateWithCompletion:](self->_deviceDiscovery, "activateWithCompletion:", &stru_1005CD1F0);
LABEL_21:
  if (!self->_notificationManager)
  {
    uint64_t v15 = (SDNotificationManager *)objc_claimAutoreleasedReturnValue( +[SDNotificationManager sharedManager]( &OBJC_CLASS___SDNotificationManager,  "sharedManager"));
    notificationManager = self->_notificationManager;
    self->_notificationManager = v15;

    -[SDNotificationManager activate](self->_notificationManager, "activate");
  }

  if (!self->_clinkClient)
  {
    if (dword_100642860 <= 30
      && (dword_100642860 != -1 || _LogCategory_Initialize(&dword_100642860, 30LL)))
    {
      LogPrintF(&dword_100642860, "-[SDRemoteInteractionAgent _clientEnsureStarted]", 30LL, "CompanionLink start\n");
    }

    char v17 = objc_alloc_init(&OBJC_CLASS___RPCompanionLinkClient);
    clinkClient = self->_clinkClient;
    self->_clinkClient = v17;

    -[RPCompanionLinkClient setControlFlags:]( self->_clinkClient,  "setControlFlags:",  (unint64_t)-[RPCompanionLinkClient controlFlags](self->_clinkClient, "controlFlags") | 0x2004);
    -[RPCompanionLinkClient setDispatchQueue:](self->_clinkClient, "setDispatchQueue:", self->_dispatchQueue);
    -[RPCompanionLinkClient setInterruptionHandler:](self->_clinkClient, "setInterruptionHandler:", &stru_1005CD210);
    -[RPCompanionLinkClient setInvalidationHandler:](self->_clinkClient, "setInvalidationHandler:", &stru_1005CD230);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    void v21[2] = sub_10009D344;
    v21[3] = &unk_1005CC598;
    v21[4] = self;
    -[RPCompanionLinkClient setDeviceFoundHandler:](self->_clinkClient, "setDeviceFoundHandler:", v21);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_10009D350;
    v20[3] = &unk_1005CC598;
    v20[4] = self;
    -[RPCompanionLinkClient setDeviceLostHandler:](self->_clinkClient, "setDeviceLostHandler:", v20);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_10009D35C;
    v19[3] = &unk_1005CC5C0;
    v19[4] = self;
    -[RPCompanionLinkClient setDeviceChangedHandler:](self->_clinkClient, "setDeviceChangedHandler:", v19);
    -[RPCompanionLinkClient activateWithCompletion:](self->_clinkClient, "activateWithCompletion:", &stru_1005CD250);
  }

LABEL_16:
  unsigned int v14 = objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](self->_devices, "objectForKeyedSubscript:", v5));
  if (v14)
  {
    uint64_t v15 = (void *)v14;
    -[SDRemoteInteractionAgent _clientUpdateCoalesceTimerForDevice:identifier:]( self,  "_clientUpdateCoalesceTimerForDevice:identifier:",  v22,  v5);
  }

  else if (!self->_preventNotifications && [v22 needsKeyboardOnly])
  {
    unint64_t v16 = [v4 smoothedRSSI];
    rssiThreshold = 0x8000000000000000LL;
    else {
      char v18 = (unint64_t)v16;
    }
    if (self->_rssiThreshold > 0x8000000000000000LL) {
      rssiThreshold = self->_rssiThreshold;
    }
    if (v18 < rssiThreshold)
    {
      if (dword_100642860 <= 9
        && (dword_100642860 != -1 || _LogCategory_Initialize(&dword_100642860, 9LL)))
      {
        LogPrintF( &dword_100642860,  "-[SDRemoteInteractionAgent _clientDeviceFound:]",  9LL,  "Ignoring far away NeedsKeyboard: %@\n",  v4);
      }
    }

    else
    {
      if (dword_100642860 <= 50
        && (dword_100642860 != -1 || _LogCategory_Initialize(&dword_100642860, 50LL)))
      {
        LogPrintF( &dword_100642860,  "-[SDRemoteInteractionAgent _clientDeviceFound:]",  50LL,  "Device NeedsKeyboard new: %@\n",  v4);
      }

      devices = self->_devices;
      if (!devices)
      {
        uint64_t v20 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        unint64_t v21 = self->_devices;
        self->_devices = v20;

        devices = self->_devices;
      }

      -[NSMutableDictionary setObject:forKeyedSubscript:](devices, "setObject:forKeyedSubscript:", v22, v5);
      -[SDRemoteInteractionAgent clientNotificationPostIfNeededForDevice:]( self,  "clientNotificationPostIfNeededForDevice:",  v22);
    }
  }

  encryptedPayload = self->_encryptedPayload;
  if (encryptedPayload) {
    [v3 setObject:encryptedPayload forKey:@"encryptedPayload"];
  }
  authTag = self->_authTag;
  if (authTag) {
    [v3 setObject:authTag forKey:@"authTag"];
  }
  nonce = self->_nonce;
  if (nonce) {
    [v3 setObject:nonce forKey:@"nonce"];
  }
  return v3;
}

  encryptedPayload = self->_encryptedPayload;
  if (encryptedPayload)
  {
    PBDataWriterWriteDataField(v12, encryptedPayload, 9LL);
    char v4 = v12;
  }

  authTag = self->_authTag;
  if (authTag)
  {
    PBDataWriterWriteDataField(v12, authTag, 10LL);
    char v4 = v12;
  }

  nonce = self->_nonce;
  if (nonce)
  {
    PBDataWriterWriteDataField(v12, nonce, 11LL);
    char v4 = v12;
  }
}

  if (self->_encryptedPayload)
  {
    objc_msgSend(v6, "setEncryptedPayload:");
    char v4 = v6;
  }

  if (self->_authTag)
  {
    objc_msgSend(v6, "setAuthTag:");
    char v4 = v6;
  }

  if (self->_nonce)
  {
    objc_msgSend(v6, "setNonce:");
    char v4 = v6;
  }
}

  if (*((void *)v4 + 4))
  {
    -[SDAutoUnlockSessionWrapper setEncryptedPayload:](self, "setEncryptedPayload:");
    char v4 = v6;
  }

  if (*((void *)v4 + 2))
  {
    -[SDAutoUnlockSessionWrapper setAuthTag:](self, "setAuthTag:");
    char v4 = v6;
  }

  if (*((void *)v4 + 6))
  {
    -[SDAutoUnlockSessionWrapper setNonce:](self, "setNonce:");
    char v4 = v6;
  }
}

    uint64_t v11 = 2LL;
    goto LABEL_16;
  }

  if (v10)
  {
    *(_WORD *)buf = 0;
    unint64_t v7 = "Using key class A for mac";
    char v8 = buf;
    goto LABEL_8;
  }

        BOOL v9 = (char *)v9 + 1;
      }

      while (v6 != v9);
      char v26 = [obj countByEnumeratingWithState:&v36 objects:v40 count:16];
      unint64_t v6 = v26;
    }

    while (v26);
  }

  return v4;
}

    char v23 = v20;
    uint64_t v20 = v23;
LABEL_18:
    unint64_t v25 = v23;

    char v26 = (void *)objc_claimAutoreleasedReturnValue([v7 header]);
    uint64_t v28 = v26;
    if (v26)
    {
      v29 = v26;
    }

    else
    {
      __int16 v30 = SFLocalizedStringForKey(@"HOMEPOD_HANDOFF_HEADER_DEFAULT", v27);
      v29 = (id)objc_claimAutoreleasedReturnValue(v30);
    }

    int v31 = v29;

    __int16 v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
    int v33 = (void *)objc_claimAutoreleasedReturnValue([v32 UUIDString]);

    v34 = objc_alloc_init(off_1006434B8());
    [v34 setBody:v18];
    [v34 setCategoryIdentifier:@"HomePodHandoffCategory"];
    if ([v7 homePodType] == (id)2)
    {
      [v34 setCategoryIdentifier:@"60909dfe8f8c461e619cf5ffef54b503"];
      v35 = @"homepodmini.fill";
    }

    else
    {
      v35 = @"homepod.fill";
    }

    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue( +[UNNotificationIcon iconForSystemImageNamed:]( &OBJC_CLASS___UNNotificationIcon,  "iconForSystemImageNamed:",  v35));
    [v34 setIcon:v36];

    [v34 setTitle:v31];
    [v34 setShouldBackgroundDefaultAction:1];
    [v34 setShouldHideTime:1];
    [v34 setShouldHideDate:1];
    [v34 setShouldIgnoreDoNotDisturb:1];
    [v34 setSound:0];
    [v34 setSubtitle:v25];
    v44[0] = @"deviceIdentifier";
    v44[1] = @"sessionID";
    v45[0] = v6;
    v45[1] = v33;
    v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v45,  v44,  2LL));
    [v34 setUserInfo:v37];

    v38 = (void *)objc_claimAutoreleasedReturnValue([v7 attachmentURL]);
    v39 = (void *)objc_claimAutoreleasedReturnValue(-[SDNotificationManager attachmentFromURL:](self, "attachmentFromURL:", v38));

    if (v39)
    {
      v43 = v39;
      v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v43, 1LL));
      [v34 setAttachments:v40];
    }

    else if (dword_100643408 <= 90 {
           && (dword_100643408 != -1 || _LogCategory_Initialize(&dword_100643408, 90LL)))
    }
    {
      LogPrintF( &dword_100643408,  "-[SDNotificationManager homePodHandoffContentForDevice:info:]",  90LL,  "### No attachment???");
    }

    v41 = v34;

    goto LABEL_33;
  }

  if (v8 == 3)
  {
    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v7 body]);
    uint64_t v11 = v9;
    if (v9)
    {
      unint64_t v12 = v9;
    }

    else
    {
      char v17 = SFLocalizedStringForKey(@"HOMEPOD_HANDOFF_MESSAGE_CALL_GENERIC", v10);
      unint64_t v12 = (id)objc_claimAutoreleasedReturnValue(v17);
    }

    char v18 = v12;

    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v7 title]);
    if (!v20)
    {
      unint64_t v21 = @"HOMEPOD_HANDOFF_SUBTITLE_TALK_HOMEPOD";
LABEL_17:
      unsigned int v24 = SFLocalizedStringForKey(v21, v19);
      char v23 = (id)objc_claimAutoreleasedReturnValue(v24);
      goto LABEL_18;
    }

    goto LABEL_15;
  }

  if (dword_100643408 <= 90 && (dword_100643408 != -1 || _LogCategory_Initialize(&dword_100643408, 90LL))) {
    LogPrintF( &dword_100643408,  "-[SDNotificationManager homePodHandoffContentForDevice:info:]",  90,  "### Cannot create HomePod content for unknown variant: %ld\n",  [v7 notificationType]);
  }
  v41 = 0LL;
LABEL_33:

  return v41;
}

  return v17;
}

  ltkHash = self->_ltkHash;
  if (ltkHash) {
    [v3 setObject:ltkHash forKey:@"ltkHash"];
  }
  return v3;
}

  ltkHash = self->_ltkHash;
  if (ltkHash)
  {
    PBDataWriterWriteDataField(v10, ltkHash, 10LL);
    char v4 = v10;
  }
}

  if (self->_ltkHash)
  {
    objc_msgSend(v7, "setLtkHash:");
    char v4 = v7;
  }
}

  if (*((void *)v4 + 3))
  {
    -[SDUnlockSetupSessionCreated setLtkHash:](self, "setLtkHash:");
    char v4 = v7;
  }
}

    self->_activityPollSeconds = v6;
  }

  char v8 = CFPrefs_GetInt64(@"com.apple.Sharing", @"activityRecentSeconds", &v168);
  BOOL v9 = 1000LL;
  if (v8 < 1000) {
    BOOL v9 = v8;
  }
  int v10 = v9 & ~(v9 >> 63);
  if (v168) {
    uint64_t v11 = 25;
  }
  else {
    uint64_t v11 = v10;
  }
  activityRecentSeconds = self->_activityRecentSeconds;
  if (v11 != activityRecentSeconds)
  {
    if (dword_100643B70 <= 40)
    {
      if (dword_100643B70 == -1)
      {
        activityRecentSeconds = self->_activityRecentSeconds;
      }

      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent prefsChanged]",  40LL,  "Activity recent seconds: %d -> %d\n",  activityRecentSeconds,  v11);
    }

  sub_1001A4BC8((uint64_t)v2, type metadata accessor for AuthenticationDevice);
  sub_1001A4BC8((uint64_t)v1, type metadata accessor for AuthenticationDevice);
LABEL_16:
  sub_1001A4BC8(v0, _s30IndividualPersonaVolumeManagerC5StateOMa);
  return 1LL;
}

  v75 = (uint64_t)v92;
  v76 = v35 + OBJC_IVAR____TtCV16DaemoniOSLibrary16SDAuthentication9RemoteLTK_registrationSessionID;
  swift_beginAccess( v35 + OBJC_IVAR____TtCV16DaemoniOSLibrary16SDAuthentication9RemoteLTK_registrationSessionID,  v98,  0LL,  0LL);
  sub_1001915A4(v76, v75, &qword_10064DA60);
  v78 = v89;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v89, v75, v15);
  v79 = static UUID.== infix(_:_:)(v78, v94);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v78, v15);
  if ((v79 & 1) != 0)
  {
    v80 = (uint64_t)v90;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v90, 1LL, 1LL, v15);
    swift_beginAccess(v76, &v96, 33LL, 0LL);
    sub_1001C9860(v80, v76, &qword_10064DA60);
    swift_endAccess(&v96);
    v81 = type metadata accessor for Date(0LL);
    v82 = (uint64_t)v91;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56LL))(v91, 1LL, 1LL, v81);
    v83 = v35 + OBJC_IVAR____TtCV16DaemoniOSLibrary16SDAuthentication9RemoteLTK_registrationStartDate;
    swift_beginAccess( v35 + OBJC_IVAR____TtCV16DaemoniOSLibrary16SDAuthentication9RemoteLTK_registrationStartDate,  &v96,  33LL,  0LL);
    sub_1001C9860(v82, v83, &qword_1006457E8);
    return swift_endAccess(&v96);
  }

  return result;
}

  unsigned int v5 = (uint64_t)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  unint64_t v6 = *(void *)(v4 + 24);
  if (!v6)
  {
LABEL_26:
    sub_10002FA6C((uint64_t)@"ApplicationServiceBrowse", (uint64_t)@"Stop", v5, v6);

    swift_release(v3);
    unint64_t v12 = *(void *)(v1 + v2);
    *(void *)(v1 + v2) = 0LL;
    swift_release(v12);
    return;
  }

  if (!((unint64_t)v6 >> 62))
  {
    BOOL v9 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(*(void *)(v4 + 24));
    if (v9) {
      goto LABEL_18;
    }
LABEL_25:
    swift_bridgeObjectRelease(v6);
    unint64_t v6 = 0LL;
    goto LABEL_26;
  }

  if (v6 < 0) {
    uint64_t v11 = *(void *)(v4 + 24);
  }
  else {
    uint64_t v11 = v6 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*(void *)(v4 + 24));
  if (!_CocoaArrayWrapper.endIndex.getter(v11)) {
    goto LABEL_25;
  }
LABEL_18:
  if ((v6 & 0xC000000000000001LL) != 0)
  {
LABEL_29:
    unsigned int v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v6);
    swift_bridgeObjectRelease(v6);
    unint64_t v6 = *(unsigned int *)(v14 + OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_pid);
    swift_unknownObjectRelease(v14);
    goto LABEL_26;
  }

  if (*(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    int v10 = (char *)*(id *)(v6 + 32);
    swift_bridgeObjectRelease(v6);
    unint64_t v6 = *(unsigned int *)&v10[OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_pid];

    goto LABEL_26;
  }

  __break(1u);
}

    unsigned int v24 = 1;
    return v24 & 1;
  }

  if (!v21)
  {
    sub_1001A4BC8((uint64_t)v5, type metadata accessor for SDAirDropDiscoveredEndpoint);
    swift_bridgeObjectRelease(v19);
    goto LABEL_20;
  }

  if (v17 == v20 && v19 == v21) {
    unsigned int v24 = 1;
  }
  else {
    unsigned int v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, v20, v21, 0LL);
  }
  swift_bridgeObjectRelease(v22);
  sub_1001A4BC8((uint64_t)v5, type metadata accessor for SDAirDropDiscoveredEndpoint);
  swift_bridgeObjectRelease(v19);
  return v24 & 1;
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
  __break(1u);
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for SDAuthenticationType);
  __break(1u);
}

    swift_bridgeObjectRelease((const char *)v4);
    return 0LL;
  }

  BOOL v9 = *(void *)(v4 + 40);
  swift_bridgeObjectRetain((const char *)v4);
  int v10 = NSObject._rawHashValue(seed:)(v9);
  uint64_t v11 = -1LL << *(_BYTE *)(v4 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
    goto LABEL_15;
  }
  type metadata accessor for SDAirDropSendConnection(0LL);
  char v13 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
  unsigned int v14 = static NSObject.== infix(_:_:)(v13, a1);

  if ((v14 & 1) == 0)
  {
    uint64_t v15 = ~v11;
    do
    {
      unint64_t v12 = (v12 + 1) & v15;
      if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
        goto LABEL_15;
      }
      unint64_t v16 = *(id *)(*(void *)(v4 + 48) + 8 * v12);
      char v17 = static NSObject.== infix(_:_:)(v16, a1);
    }

    while ((v17 & 1) == 0);
  }

  swift_bridgeObjectRelease((const char *)v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  unsigned int v19 = *v2;
  char v22 = *v2;
  void *v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1003BBF4C(&qword_100646C78);
    unsigned int v19 = v22;
  }

  char v8 = *(void *)(*(void *)(v19 + 48) + 8 * v12);
  sub_1003BF594(v12);
  uint64_t v20 = (const char *)*v2;
  void *v2 = v22;
  swift_bridgeObjectRelease(v20);
  return v8;
}

        __int16 v32 = 1;
        return v32 & 1;
      }

      char v17 = &off_1005D1F38;
    }

    else
    {
      char v17 = &off_1005D1EF8;
    }

    __int16 v32 = sub_10046AC7C(v17) ^ 1;
    return v32 & 1;
  }

  unint64_t v12 = SFDeviceClassCodeGet(v8, v9);
  if (!v12) {
    goto LABEL_15;
  }
  char v13 = v12;
  unsigned int v14 = (const char *)sub_1001DD1C4((uint64_t)&off_1005D1ED0);
  uint64_t v15 = sub_1003A0760(v13, (uint64_t)v14);
  unint64_t v16 = swift_bridgeObjectRelease(v14);
  if (qword_100644088 != -1) {
    swift_once(&qword_100644088, sub_100270494);
  }
  sub_1002712F8(3);
  unsigned int v19 = v18;
  *(&v37 - 6) = __chkstk_darwin(v18);
  *(&v37 - 5) = a2;
  *(&v37 - 4) = a3;
  *(&v37 - 3) = (uint64_t)sub_100206840;
  *(&v37 - 2) = 0LL;
  unint64_t v21 = v20 + 4;
  os_unfair_lock_lock(v20 + 4);
  sub_1002737FC(v22, sub_10020B660);
  os_unfair_lock_unlock(v21);
  swift_release(v19);
  int v31 = type metadata accessor for UUID(0LL);
  __int16 v32 = (*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48LL))(v11, 1LL, v31) == 1;
  sub_100187100((uint64_t)v11, &qword_10064DA60);
  return v32 & 1;
}

uint64_t SDAuthenticationTokenReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 36) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_38;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_40;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_40:
        uint64_t v27 = 32LL;
        goto LABEL_45;
      case 2u:
        uint64_t String = PBReaderReadString(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(String);
        uint64_t v20 = 24LL;
        goto LABEL_29;
      case 3u:
        uint64_t Data = PBReaderReadData(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(Data);
        uint64_t v20 = 8LL;
LABEL_29:
        char v22 = *(void **)(a1 + v20);
        *(void *)(a1 + v20) = v19;

        continue;
      case 4u:
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 36) |= 1u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      unint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v25 == -1LL || v25 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v26 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
      v14 |= (unint64_t)(v26 & 0x7F) << v23;
      if ((v26 & 0x80) == 0) {
        goto LABEL_42;
      }
      v23 += 7;
      BOOL v9 = v24++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_44;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v14) = 0;
    }
LABEL_44:
    uint64_t v27 = 16LL;
LABEL_45:
    *(_DWORD *)(a1 + v27) = v14;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

LABEL_16:
  return v8;
}
      }

      unint64_t v6 = [v4 countByEnumeratingWithState:&v34 objects:v40 count:16];
    }

    while (v6);
  }

  return (NSSet *)v33;
}

  os_activity_scope_leave(&state);
}
}
}
}
}

        if (dword_100643B70 <= 30
          && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 30LL)))
        {
          LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _deviceCanTriggerEnhancedDiscovery:]",  30LL,  "Device triggered enhanced discovery for Wombat: %@\n",  v4);
        }

        goto LABEL_40;
      }
    }

    goto LABEL_16;
  }

  unsigned int v5 = 0;
LABEL_3:

  return v5;
}
  }

  return self->_idsHasActiveWatchCache != 0;
}

  char v22 = *(void *)(v0 + 336);
  char v23 = *(void *)(v0 + 344);
  unsigned int v24 = *(void *)(v0 + 320) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askContinuation;
  swift_beginAccess(v24, v0 + 248, 0LL, 0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v24, 1LL, v22))
  {
    char v26 = *(void *)(v0 + 344);
    unint64_t v25 = *(void *)(v0 + 352);
    uint64_t v27 = *(void *)(v0 + 336);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v25, v24, v27);
    uint64_t v28 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 184) = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 200) = v28;
    *(void *)(v0 + 216) = *(void *)(v0 + 112);
    v29 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 120) = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v0 + 136) = v29;
    __int16 v30 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 152) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 16_Block_object_dispose((const void *)(v36 - 144), 8) = v30;
    SFProgressContinuation.finish(with:)(v0 + 120, v27);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
  }

  sub_1001FC264((void *)(v0 + 16));
  int v31 = *(void *)(v0 + 368);
  int v33 = *(void *)(v0 + 320);
  __int16 v32 = *(void *)(v0 + 328);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 344) + 56LL))( v32,  1LL,  1LL,  *(void *)(v0 + 336));
  v34 = v33 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askContinuation;
  swift_beginAccess(v34, v0 + 224, 33LL, 0LL);
  sub_1001C9860(v32, v34, &qword_1006475C0);
  swift_endAccess(v0 + 224);
  swift_release(v31);
  v35 = *(void *)(v0 + 328);
  swift_task_dealloc(*(void *)(v0 + 352));
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

  v49 = static String.localizedStringWithFormat(_:_:)(v48, v45, v47);
  swift_bridgeObjectRelease(v45);
  swift_bridgeObjectRelease(v47);
  return v49;
}

    Date.init()(v21);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v5, 0LL, 1LL, v8);
    v34 = v1 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationLockSession_metrics;
    swift_beginAccess(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationLockSession_metrics, v67, 33LL, 0LL);
    v35 = type metadata accessor for SDAuthenticationLockSession.Metrics(0LL);
    sub_1001C9860((uint64_t)v5, v34 + *(int *)(v35 + 32), &qword_1006457E8);
    swift_endAccess(v67);
    if (v18)
    {
      uint64_t v36 = [(id)v18 data];
      if (v36)
      {
        v37 = v36;
        v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v36);
        v40 = v39;

        if (qword_1006441B0 != -1) {
          swift_once(&qword_1006441B0, sub_10032E7C0);
        }
        v41 = type metadata accessor for Logger(0LL);
        v42 = sub_100186DE4(v41, (uint64_t)qword_10064F140);
        v43 = (os_log_s *)Logger.logObject.getter(v42);
        v44 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v43, v44))
        {
          v45 = v18;
          v46 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)v46 = 0;
          _os_log_impl((void *)&_mh_execute_header, v43, v44, "Sending authentication request", v46, 2u);
          v47 = v46;
          char v18 = v45;
          swift_slowDealloc(v47, -1LL, -1LL);
        }

        v48 = v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice;
        swift_beginAccess(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice, v64, 0LL, 0LL);
        sub_1001915A4(v48, (uint64_t)&v65, &qword_100654080);
        if (v66)
        {
          sub_1001CE0D0(&v65, (uint64_t)v67);
          v49 = v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate;
          swift_beginAccess(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate, v63, 0LL, 0LL);
          sub_1001915A4(v49, (uint64_t)&v65, &qword_100650630);
          if (v66)
          {
            sub_10019A6C4((uint64_t)&v65, (uint64_t)v62);
            sub_100187100((uint64_t)&v65, &qword_100650630);
            sub_10019A708(v62, v62[3]);
            sub_1004641AC(v38, v40, (uint64_t)v67, 0LL, *v59);
            sub_10018709C(v67);
            sub_10018709C(v62);
LABEL_34:
            sub_10034E05C(0LL, 1);

            sub_100189B0C(v13, v15);
            return sub_100189B20(v38, v40);
          }

          sub_10018709C(v67);
          v58 = &v65;
        }

        else
        {
          sub_100187100((uint64_t)&v65, &qword_100654080);
          v57 = v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate;
          swift_beginAccess(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate, v62, 0LL, 0LL);
          sub_1001915A4(v57, (uint64_t)v67, &qword_100650630);
          if (v67[3])
          {
            sub_10019A6C4((uint64_t)v67, (uint64_t)&v65);
            sub_100187100((uint64_t)v67, &qword_100650630);
            sub_10019A708(&v65, v66);
            sub_1004775FC(v38, v40, 0LL, *v59);
            sub_10018709C(&v65);
            goto LABEL_34;
          }

          v58 = (__int128 *)v67;
        }

        sub_100187100((uint64_t)v58, &qword_100650630);
        goto LABEL_34;
      }
    }

    if (qword_1006441B0 == -1) {
      goto LABEL_26;
    }
    goto LABEL_36;
  }

  __break(1u);
LABEL_36:
  swift_once(&qword_1006441B0, sub_10032E7C0);
LABEL_26:
  v50 = type metadata accessor for Logger(0LL);
  v51 = sub_100186DE4(v50, (uint64_t)qword_10064F140);
  v52 = (os_log_s *)Logger.logObject.getter(v51);
  v53 = static os_log_type_t.error.getter(v52);
  if (os_log_type_enabled(v52, v53))
  {
    v54 = v18;
    v55 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)v55 = 0;
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "Error converting request to data", v55, 2u);
    v56 = v55;
    char v18 = v54;
    swift_slowDealloc(v56, -1LL, -1LL);
  }

  sub_100330178(10LL);
  return sub_100189B0C(v13, v15);
}

  v34 = (uint64_t)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate];
  swift_beginAccess(&v4[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate], v51, 0LL, 0LL);
  sub_1001915A4(v34, (uint64_t)&v56, &qword_100650630);
  if (v57[2])
  {
    sub_10019A6C4((uint64_t)&v56, (uint64_t)&v54);
    sub_100187100((uint64_t)&v56, &qword_100650630);
    v35 = *sub_10019A708(&v54, v55);
    uint64_t v36 = v4;
    sub_1002D8E14(v36, a1, a2, (uint64_t)a3, v35);

    sub_10018709C(&v54);
  }

  else
  {
    sub_100187100((uint64_t)&v56, &qword_100650630);
  }

  if (v10[54] != -1) {
    swift_once(&qword_1006441B0, sub_10032E7C0);
  }
  v37 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v37, (uint64_t)qword_10064F140);
  swift_bridgeObjectRetain_n(a3, 2LL);
  v39 = (os_log_s *)Logger.logObject.getter(v38);
  v40 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v39, v40))
  {
    v41 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v50 = v9;
    v42 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)v41 = 138412290;
    v43 = sub_100187014();
    v44 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v43, 0LL, 0LL);
    *(_DWORD *)v45 = a1;
    *(void *)(v45 + _Block_object_dispose((const void *)(v36 - 144), 8) = a2;
    *(void *)(v45 + 16) = a3;
    swift_bridgeObjectRetain(a3);
    v46 = _swift_stdlib_bridgeErrorToNSError(v44);
    v56 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v41 + 4, v41 + 12);
    *v42 = v46;
    swift_bridgeObjectRelease_n(a3, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Session failed with error: %@", v41, 0xCu);
    v47 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v42, 1LL, v47);
    swift_slowDealloc(v42, -1LL, -1LL);
    swift_slowDealloc(v41, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
    v39 = (os_log_s *)v9;
  }
}

            swift_bridgeObjectRelease(v18, v19);
          }

          unint64_t v25 = *(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashDB);
          char v26 = *(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashDB + 8);
          ObjectType = swift_getObjectType(v25);
          uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 112);
          swift_unknownObjectRetain(v25);
          unint64_t v21 = v28(v15, ObjectType, v26);
          swift_unknownObjectRelease(v25);
          return v21 & 1;
        }

        unint64_t v21 = 5;
      }

      else
      {
        unint64_t v21 = 0;
      }

      char v22 = sub_10038FFB4();
      char v23 = swift_allocError(&type metadata for SDAirDropHashError, v22, 0LL, 0LL);
      *unsigned int v24 = v21;
      swift_willThrow(v23);
      return v21 & 1;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

    *(void *)(v33 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a1) - 1;
    uint64_t result = swift_release(v10);
    io_object_t v3 = v30;
  }

  else
  {
    *(void *)(v11 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a1) - 1;
  }

  unint64_t v25 = *v3;
  char v26 = *(void *)(*v3 + 16);
  uint64_t v27 = __OFSUB__(v26, 1LL);
  uint64_t v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v25 + 16) = v28;
    ++*(_DWORD *)(v25 + 36);
  }

  return result;
}

  if (!((unint64_t)v0 >> 62))
  {
    BOOL v9 = *(void *)((v0 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    *(void *)&int v10 = swift_bridgeObjectRetain((const char *)v0).n128_u64[0];
    if (v9) {
      goto LABEL_18;
    }
LABEL_28:
    swift_bridgeObjectRelease((const char *)v0, v10);
    unsigned __int8 v0 = 0LL;
    goto LABEL_29;
  }

  if (!((unint64_t)v0 >> 62))
  {
    BOOL v9 = *(void *)((v0 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    *(void *)&int v10 = swift_bridgeObjectRetain((const char *)v0).n128_u64[0];
    if (v9) {
      goto LABEL_18;
    }
LABEL_28:
    swift_bridgeObjectRelease((const char *)v0, v10);
    unsigned __int8 v0 = 0LL;
    goto LABEL_29;
  }

LABEL_20:
  return v9;
}

    goto LABEL_21;
  }

  unint64_t v7 = airdrop_log(self);
  char v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
    sub_1000251D0();
  }

  retryCount = self->_retryCount;
  self->_retryCount = retryCount + 1;
  uint64_t v11 = airdrop_log(v10);
  char v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  unsigned int v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  if (retryCount > 8)
  {
    if (v13)
    {
      *(_WORD *)int v31 = 0;
      uint64_t v28 = "Giving up trying to advertise with Bonjour";
      v29 = v12;
      __int16 v30 = 2;
      goto LABEL_19;
    }

    goto LABEL_20;
  }

  if (v13)
  {
    *(_WORD *)int v31 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Retrying Bonjour advertise in 3 seconds...",  v31,  2u);
  }

  uint64_t v14 = self->_restartTimer;
  unint64_t v15 = sub_100114580(3.0);
  sub_100114638((dispatch_source_s *)v14, v15);
LABEL_21:
  -[SDStatusMonitor setAirDropPublished:](self->_monitor, "setAirDropPublished:", *p_var1 == 0, *(_OWORD *)v31);
}

  return v8;
}
  }

  else
  {
    uint64_t v14 = airdrop_log(v5);
    unint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled((os_log_t)v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      unint64_t v25 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v15,  OS_LOG_TYPE_DEFAULT,  "Failed to get app links with error %@",  buf,  0xCu);
    }

    LOBYTE(v9) = 0;
  }

  return (char)v9;
}

            uint64_t v20 = v12;
            char v4 = v22;
            goto LABEL_21;
          }
        }

        else
        {
        }
      }

      BOOL v9 = [obj countByEnumeratingWithState:&v25 objects:v29 count:16];
      uint64_t v20 = 0LL;
      char v4 = v22;
      if (v9) {
        continue;
      }
      break;
    }
  }

  else
  {
    uint64_t v20 = 0LL;
  }

    unsigned int v5 = 0;
    goto LABEL_21;
  }

  if (!-[SDProxHandoffAgent _throttleMediumAllowsTrigger](self, "_throttleMediumAllowsTrigger"))
  {
    if (dword_100642038 <= 30
      && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 30LL)))
    {
      LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent _shouldMediumPromptWithInfo:]",  30LL,  "Shouldn't prompt medium, recently triggered\n");
    }

    goto LABEL_20;
  }

  unsigned int v5 = [v4 interactionBehavior] == 2;
LABEL_21:

  return v5;
}

            uint64_t v20 = v12;
            char v4 = v22;
            goto LABEL_21;
          }
        }

        else
        {
        }
      }

      BOOL v9 = [obj countByEnumeratingWithState:&v25 objects:v29 count:16];
      uint64_t v20 = 0LL;
      char v4 = v22;
      if (v9) {
        continue;
      }
      break;
    }
  }

  else
  {
    uint64_t v20 = 0LL;
  }

      v42 = v31;
      v34 = sub_100012864((void *)v14, v19, v17, 1LL);
      __int16 v32 = (void *)objc_claimAutoreleasedReturnValue(v34);
      if (v32)
      {
        v35 = sub_100114DC0((void *)v14);
        uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
        if (v36)
        {
LABEL_24:
          v37 = self;
          v38 = (void *)v43;
          -[SDAutoUnlockAKSManager addRemoteLTK:ltkHash:ltkModDate:modernLTK:modernLTKHash:modernLTKModeDate:deviceID:]( v37,  "addRemoteLTK:ltkHash:ltkModDate:modernLTK:modernLTKHash:modernLTKModeDate:deviceID:",  v29,  v43,  v13,  v32,  v36,  v15,  v16);

          char v23 = 1;
LABEL_27:

LABEL_28:
          goto LABEL_29;
        }

        if (v42)
        {
LABEL_23:
          uint64_t v36 = 0LL;
          goto LABEL_24;
        }
      }

      else if (v42)
      {
        goto LABEL_23;
      }

      -[SDBonjourBrowser cleanupAirDropRequest:](self, "cleanupAirDropRequest:", v9);
      break;
    default:
      uint64_t v27 = airdrop_log(v13);
      uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        __int16 v32 = NSStringFromSelector(a2);
        int v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
        *(_DWORD *)buf = 138413058;
        v38 = v33;
        v39 = 2112;
        v40 = sub_1000D0D98(a4);
        v41 = 1024;
        v42 = a4;
        v43 = 2112;
        v44 = v10;
        _os_log_error_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "%@: UNHANDLED EVENT %@ [%d] %@",  buf,  0x26u);
      }

      break;
  }
}

    BOOL v9 = 0;
  }

  [*(id *)(a1 + 32) startBomCopy:0 destination:*(void *)(*(void *)(a1 + 32) + 40) options:v2];
}

  return v8;
}

  unint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", self->_ltkSyncing));
  [v3 setObject:v15 forKey:@"ltkSyncing"];

  BOOL v9 = (char)self->_has;
  if ((v9 & 0x20) == 0)
  {
LABEL_13:
    if ((v9 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }

  PBDataWriterWriteBOOLField(v10, self->_ltkSyncing, 7LL);
  char v4 = v10;
  char v8 = (char)self->_has;
  if ((v8 & 0x20) == 0)
  {
LABEL_13:
    if ((v8 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }

  *((_BYTE *)v4 + 60) = self->_ltkSyncing;
  *((_BYTE *)v4 + 64) |= 0x40u;
  unint64_t v6 = (char)self->_has;
  if ((v6 & 0x20) == 0)
  {
LABEL_13:
    if ((v6 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }

  self->_ltkSyncing = *((_BYTE *)v4 + 60);
  *(_BYTE *)&self->_has |= 0x40u;
  unint64_t v6 = *((_BYTE *)v4 + 64);
  if ((v6 & 0x20) == 0)
  {
LABEL_13:
    if ((v6 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }

    uint64_t v20 = 0LL;
    goto LABEL_21;
  }

  uint64_t v20 = 0LL;
LABEL_22:

  return v20;
}
}

  return v7;
}

        v35 = (void *)objc_claimAutoreleasedReturnValue([v11 nsuuid]);

        if (v35)
        {
          uint64_t v36 = -[IDSService initWithService:](objc_alloc(&OBJC_CLASS___IDSService), "initWithService:", v53);
          v62 = 0u;
          v63 = 0u;
          v64 = 0u;
          v65 = 0u;
          v59 = v36;
          v37 = (void *)objc_claimAutoreleasedReturnValue(-[IDSService devices](v36, "devices"));
          v38 = [v37 countByEnumeratingWithState:&v62 objects:v74 count:16];
          if (v38)
          {
            v39 = v38;
            v40 = *(void *)v63;
            while (2)
            {
              for (j = 0LL; j != v39; j = (char *)j + 1)
              {
                if (*(void *)v63 != v40) {
                  objc_enumerationMutation(v37);
                }
                v42 = *(void **)(*((void *)&v62 + 1) + 8LL * (void)j);
                if (([v42 supportsSMSRelay] & 1) != 0
                  || [v42 supportsMMSRelay])
                {
                  v43 = objc_claimAutoreleasedReturnValue([v11 uniqueIDOverride]);
                  if (!v43
                    || (v44 = (void *)v43,
                        v45 = (void *)objc_claimAutoreleasedReturnValue([v42 uniqueIDOverride]),
                        v46 = (void *)objc_claimAutoreleasedReturnValue([v11 uniqueIDOverride]),
                        v47 = [v45 isEqual:v46],
                        v46,
                        v45,
                        v44,
                        v47))
                  {
                    v48 = objc_claimAutoreleasedReturnValue([v11 nsuuid]);
                    if (!v48
                      || (v49 = (void *)v48,
                          v50 = (void *)objc_claimAutoreleasedReturnValue([v42 nsuuid]),
                          v51 = (void *)objc_claimAutoreleasedReturnValue([v11 nsuuid]),
                          v52 = [v50 isEqual:v51],
                          v51,
                          v50,
                          v49,
                          (v52 & 1) != 0))
                    {

                      a3 = v60;
                      NSAppendPrintF(v60, ", SMS");
                      goto LABEL_36;
                    }
                  }
                }
              }

              v39 = [v37 countByEnumeratingWithState:&v62 objects:v74 count:16];
              if (v39) {
                continue;
              }
              break;
            }
          }

          a3 = v60;
        }

    v59 = 0LL;
    return v64(v59);
  }

  if (!a2)
  {
    if (qword_100643FB0 != -1) {
      swift_once(&qword_100643FB0, sub_100225504);
    }
    v48 = type metadata accessor for Logger(0LL);
    sub_100186DE4(v48, (uint64_t)qword_100649480);
    v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v17, a4, v10);
    v50 = (os_log_s *)Logger.logObject.getter(v49);
    v51 = static os_log_type_t.error.getter(v50);
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v53 = swift_slowAlloc(32LL, -1LL);
      v66 = v53;
      *(_DWORD *)v52 = 136315138;
      v54 = sub_100183F14( (unint64_t *)&qword_100645408,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      v55 = dispatch thunk of CustomStringConvertible.description.getter(v10, v54);
      v57 = (const char *)v56;
      v65 = sub_10018CDB4(v55, v56, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v52 + 4, v52 + 12);
      v58 = swift_bridgeObjectRelease(v57);
      (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v17, v10, v58);
      _os_log_impl( (void *)&_mh_execute_header,  v50,  v51,  "IPA Handler: No error or success bundle ID for installing: %s",  v52,  0xCu);
      swift_arrayDestroy(v53, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1LL, -1LL);
      swift_slowDealloc(v52, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    }

    goto LABEL_20;
  }

  uint64_t v36 = qword_100643FB0;
  swift_bridgeObjectRetain(a2);
  if (v36 != -1) {
    swift_once(&qword_100643FB0, sub_100225504);
  }
  v37 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v37, (uint64_t)qword_100649480);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a4, v10);
  v38 = swift_bridgeObjectRetain(a2);
  v39 = (os_log_s *)Logger.logObject.getter(v38);
  v40 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v39, v40))
  {
    v41 = swift_slowAlloc(22LL, -1LL);
    v62 = swift_slowAlloc(64LL, -1LL);
    v66 = v62;
    *(_DWORD *)v41 = 136315394;
    swift_bridgeObjectRetain(a2);
    v65 = sub_10018CDB4(a1, (unint64_t)a2, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v41 + 4, v41 + 12);
    v42 = swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v41 + 12) = 2080;
    v43 = URL.description.getter(v42);
    v45 = (const char *)v44;
    v65 = sub_10018CDB4(v43, v44, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v41 + 14, v41 + 22);
    v46 = swift_bridgeObjectRelease(v45);
    (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v14, v10, v46);
    _os_log_impl( (void *)&_mh_execute_header,  v39,  v40,  "IPA Handler: Successful app install '%s' for URL %s",  (uint8_t *)v41,  0x16u);
    v47 = v62;
    swift_arrayDestroy(v62, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1LL, -1LL);
    swift_slowDealloc(v41, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a2, 2LL);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }

  v59 = 1LL;
  return v64(v59);
}

    uint64_t v14 = (v20 - 1) & v20;
  }

  unint64_t v21 = v19 + 4;
  if (v21 >= v33)
  {
LABEL_25:
    swift_release(v37);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v31, 1LL, 1LL, v36);
  }

  uint64_t v20 = *(void *)(v32 + 8 * v21);
  if (v20)
  {
    char v16 = v21;
    goto LABEL_20;
  }

  while (1)
  {
    char v16 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v16 >= v33) {
      goto LABEL_25;
    }
    uint64_t v20 = *(void *)(v32 + 8 * v16);
    ++v21;
    if (v20) {
      goto LABEL_20;
    }
  }

    v52 = (v31 - 1) & v31;
    v53 = v32;
    unint64_t v21 = __clz(__rbit64(v31)) + (v32 << 6);
LABEL_5:
    char v22 = v51;
    char v23 = *(void (**)(char *, unint64_t, uint64_t))(v54 + 16);
    v23(v15, v51[6] + *(void *)(v54 + 72) * v21, v18);
    unsigned int v24 = v22[7];
    unint64_t v25 = *(void *)(v17 + 72);
    v50 = v21;
    char v26 = *(void (**)(char *, unint64_t, uint64_t))(v17 + 16);
    v26(v20, v24 + v25 * v21, v16);
    uint64_t v27 = (uint64_t)v48;
    v23(v48, (unint64_t)v15, v18);
    uint64_t v28 = v27 + *(int *)(v49 + 48);
    v26((char *)v28, (unint64_t)v20, v16);
    (*(void (**)(char *, void, uint64_t))(v17 + 104))(v19, v41, v16);
    LOBYTE(v2_Block_object_dispose((const void *)(v36 - 144), 8) = static SFNWInterfaceType.== infix(_:_:)(v28, v19);
    v29 = *(void (**)(char *, uint64_t))(v17 + 8);
    v29(v19, v16);
    sub_100187100(v27, &qword_100645010);
    v29(v20, v16);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v15, v18);
    uint64_t v14 = v52;
    int v10 = v53;
    if ((v28 & 1) != 0)
    {
      *(unint64_t *)((char *)v37 + ((v50 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v50;
      if (__OFADD__(v38++, 1LL))
      {
        __break(1u);
        return sub_100248774(v37, v36, v38, v51);
      }
    }
  }

  int v33 = v10 + 4;
  if (v10 + 4 >= v40) {
    return sub_100248774(v37, v36, v38, v51);
  }
  int v31 = *(void *)(v39 + 8 * v33);
  if (v31)
  {
    __int16 v32 = v10 + 4;
    goto LABEL_20;
  }

  while (1)
  {
    __int16 v32 = v33 + 1;
    if (__OFADD__(v33, 1LL)) {
      break;
    }
    if (v32 >= v40) {
      return sub_100248774(v37, v36, v38, v51);
    }
    int v31 = *(void *)(v39 + 8 * v32);
    ++v33;
    if (v31) {
      goto LABEL_20;
    }
  }

    BOOL v9 = (v16 - 1) & v16;
    char v12 = __clz(__rbit64(v16)) + (v6 << 6);
LABEL_5:
    unsigned int v13 = *(id *)(*(void *)(a3 + 48) + 8 * v12);
    uint64_t v14 = static NSObject.== infix(_:_:)(v13, a4);

    if ((v14 & 1) == 0)
    {
      *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
      if (__OFADD__(v21++, 1LL))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        sub_1004817F8(a1, a2, v21, a3);
        return;
      }
    }
  }

  char v17 = v15 + 3;
  if (v17 >= v10) {
    goto LABEL_24;
  }
  char v16 = *(void *)(v22 + 8 * v17);
  if (v16)
  {
    unint64_t v6 = v17;
    goto LABEL_20;
  }

  while (1)
  {
    unint64_t v6 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v6 >= v10) {
      goto LABEL_24;
    }
    char v16 = *(void *)(v22 + 8 * v6);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }

    v59 = 0LL;
    return v64(v59);
  }

  if (!a2)
  {
    if (qword_100644090 != -1) {
      swift_once(&qword_100644090, sub_1002723FC);
    }
    v48 = type metadata accessor for Logger(0LL);
    sub_100186DE4(v48, (uint64_t)qword_10064A638);
    v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v17, a4, v10);
    v50 = (os_log_s *)Logger.logObject.getter(v49);
    v51 = static os_log_type_t.error.getter(v50);
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v53 = swift_slowAlloc(32LL, -1LL);
      v66 = v53;
      *(_DWORD *)v52 = 136315138;
      v54 = sub_100183F14( (unint64_t *)&qword_100645408,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      v55 = dispatch thunk of CustomStringConvertible.description.getter(v10, v54);
      v57 = (const char *)v56;
      v65 = sub_10018CDB4(v55, v56, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v52 + 4, v52 + 12);
      v58 = swift_bridgeObjectRelease(v57);
      (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v17, v10, v58);
      _os_log_impl( (void *)&_mh_execute_header,  v50,  v51,  "IPA Handler: No error or success bundle ID for installing: %s",  v52,  0xCu);
      swift_arrayDestroy(v53, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1LL, -1LL);
      swift_slowDealloc(v52, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    }

    goto LABEL_20;
  }

  uint64_t v36 = qword_100644090;
  swift_bridgeObjectRetain(a2);
  if (v36 != -1) {
    swift_once(&qword_100644090, sub_1002723FC);
  }
  v37 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v37, (uint64_t)qword_10064A638);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a4, v10);
  swift_bridgeObjectRetain(a2);
  v39 = (os_log_s *)Logger.logObject.getter(v38);
  v40 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v39, v40))
  {
    v41 = swift_slowAlloc(22LL, -1LL);
    v62 = swift_slowAlloc(64LL, -1LL);
    v66 = v62;
    *(_DWORD *)v41 = 136315394;
    swift_bridgeObjectRetain(a2);
    v65 = sub_10018CDB4(a1, (unint64_t)a2, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v41 + 4, v41 + 12);
    v42 = swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v41 + 12) = 2080;
    v43 = URL.description.getter(v42);
    v45 = (const char *)v44;
    v65 = sub_10018CDB4(v43, v44, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v41 + 14, v41 + 22);
    v46 = swift_bridgeObjectRelease(v45);
    (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v14, v10, v46);
    _os_log_impl( (void *)&_mh_execute_header,  v39,  v40,  "IPA Handler: Successful app install '%s' for URL %s",  (uint8_t *)v41,  0x16u);
    v47 = v62;
    swift_arrayDestroy(v62, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1LL, -1LL);
    swift_slowDealloc(v41, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a2, 2LL);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }

  v59 = 1LL;
  return v64(v59);
}

  __break(1u);
LABEL_21:
  char v17 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v17,  1092LL,  0);
  __break(1u);
}

    *(void *)(v5 + *(int *)(*(void *)(v6 - 104) + 36LL)) = v14;
    sub_100187100(v5, &qword_10064D760);
    sub_100189B20(v4, v3);
    uint64_t v20 = *(int8x16_t **)(v6 - 72);
    unint64_t v21 = v20[1].u64[0];
    if (v21)
    {
      if (v21 >= 4)
      {
        char v22 = v21 & 0x7FFFFFFFFFFFFFFCLL;
        char v23 = v20 + 3;
        unsigned int v24 = 0uLL;
        unint64_t v25 = v21 & 0x7FFFFFFFFFFFFFFCLL;
        char v26 = 0uLL;
        do
        {
          unsigned int v24 = vorrq_s8(v23[-1], v24);
          char v26 = vorrq_s8(*v23, v26);
          v23 += 2;
          v25 -= 4LL;
        }

        while (v25);
        uint64_t v27 = vorrq_s8(v26, v24);
        BOOL v9 = (uint64_t)vorr_s8(*(int8x8_t *)v27.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL));
        if (v21 == v22) {
          goto LABEL_29;
        }
      }

      else
      {
        char v22 = 0LL;
        BOOL v9 = 0LL;
      }

      uint64_t v28 = v21 - v22;
      v29 = &v20[2].i64[v22];
      do
      {
        __int16 v30 = *v29++;
        v9 |= v30;
        --v28;
      }

      while (v28);
    }

    else
    {
      BOOL v9 = 0LL;
    }

  sub_10020EEE0();
  *(void *)(v0 + 824) = v34;
  *(void *)(v0 + 832) = v35;
  if (v35)
  {
    uint64_t v36 = v34;
    v37 = v35;
    v38 = (_OWORD *)(v0 + 208);
    v39 = *(void *)(v0 + 704);
    v40 = OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropEndpointService_allDiscovered;
    *(void *)(v0 + 840) = OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropEndpointService_allDiscovered;
    v41 = (uint64_t *)(v39 + v40);
    *(void *)&v42 = swift_beginAccess(v39 + v40, v0 + 472, 32LL, 0LL).n128_u64[0];
    v43 = *v41;
    if (*(void *)(v43 + 16))
    {
      swift_bridgeObjectRetain(v37, v42);
      v44 = sub_1003AD53C(v36, (uint64_t)v37);
      if ((v45 & 1) != 0)
      {
        sub_1002499DC(*(void *)(v43 + 56) + 48 * v44, v0 + 208);
      }

      else
      {
        *(_OWORD *)(v0 + 224) = 0u;
        *(_OWORD *)(v0 + 240) = 0u;
        *v38 = 0u;
      }

      swift_bridgeObjectRelease(v37);
      if (*(void *)(v0 + 232))
      {
        sub_1001CCE4C((__int128 *)(v0 + 208), (_OWORD *)(v0 + 304));
        swift_endAccess(v0 + 472);
        v46 = *(void *)(v0 + 328);
        v47 = *(void *)(v0 + 336);
        sub_10019A708((void *)(v0 + 304), v46);
        v48 = *(int **)(v47 + 56);
        v103 = (int *)((char *)v48 + *v48);
        v49 = (void *)swift_task_alloc(v48[1]);
        *(void *)(v0 + 84_Block_object_dispose((const void *)(v36 - 144), 8) = v49;
        v50 = sub_1002F1000;
LABEL_39:
        *v49 = v0;
        v49[1] = v50;
        return ((uint64_t (*)(void, uint64_t, uint64_t))v103)(*(void *)(v0 + 696), v46, v47);
      }
    }

    else
    {
      *(_OWORD *)(v0 + 224) = 0u;
      *(_OWORD *)(v0 + 240) = 0u;
      *v38 = 0u;
    }

    sub_100187100(v0 + 208, &qword_10064DA48);
    swift_endAccess(v0 + 472);
    swift_bridgeObjectRelease(v37);
  }

  v51 = *(void *)(v0 + 744);
  v52 = *(void *)(v0 + 736);
  sub_1001A4B84(*(void *)(v0 + 696), v51, type metadata accessor for SDAirDropDiscoveredEndpoint);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v51, v52);
  v54 = *(uint64_t **)(v0 + 744);
  if (EnumCaseMultiPayload == 3)
  {
    v55 = (_OWORD *)(v0 + 352);
    v56 = *(void *)(v0 + 704);
    v57 = *v54;
    *(void *)(v0 + 872) = *v54;
    v58 = (const char *)v54[1];
    *(void *)(v0 + 880) = v58;
    v59 = (const char *)v54[3];
    *(void *)(v0 + 88_Block_object_dispose((const void *)(v36 - 144), 8) = v59;
    v60 = v54[4];
    *(void *)(v0 + 896) = v60;
    v61 = v54[5];
    *(void *)(v0 + 904) = v61;
    v62 = OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropEndpointService_allDiscovered;
    *(void *)(v0 + 912) = OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropEndpointService_allDiscovered;
    v63 = (uint64_t *)(v56 + v62);
    *(void *)&v64 = swift_beginAccess(v56 + v62, v0 + 448, 32LL, 0LL).n128_u64[0];
    v65 = *v63;
    if (*(void *)(v65 + 16))
    {
      swift_bridgeObjectRetain(v58, v64);
      v66 = sub_1003AD53C(v57, (uint64_t)v58);
      if ((v67 & 1) != 0)
      {
        sub_1002499DC(*(void *)(v65 + 56) + 48 * v66, v0 + 352);
      }

      else
      {
        *(_OWORD *)(v0 + 36_Block_object_dispose((const void *)(v36 - 144), 8) = 0u;
        *(_OWORD *)(v0 + 384) = 0u;
        *v55 = 0u;
      }

      swift_bridgeObjectRelease(v58);
      if (*(void *)(v0 + 376))
      {
        sub_1001CCE4C((__int128 *)(v0 + 352), (_OWORD *)(v0 + 256));
        swift_endAccess(v0 + 448);
        v46 = *(void *)(v0 + 280);
        v47 = *(void *)(v0 + 288);
        sub_10019A708((void *)(v0 + 256), v46);
        v69 = *(int **)(v47 + 56);
        v103 = (int *)((char *)v69 + *v69);
        v49 = (void *)swift_task_alloc(v69[1]);
        *(void *)(v0 + 920) = v49;
        v50 = sub_1002F1320;
        goto LABEL_39;
      }
    }

    else
    {
      *(_OWORD *)(v0 + 36_Block_object_dispose((const void *)(v36 - 144), 8) = 0u;
      *(_OWORD *)(v0 + 384) = 0u;
      *v55 = 0u;
    }

    sub_100187100(v0 + 352, &qword_10064DA48);
    swift_endAccess(v0 + 448);
    *(void *)&v71 = swift_bridgeObjectRelease(v58).n128_u64[0];
    swift_bridgeObjectRelease(v59, v71);
    sub_100189B0C(v60, v61);
  }

  else
  {
    sub_1001A4BC8((uint64_t)v54, type metadata accessor for SDAirDropDiscoveredEndpoint);
  }

  v72 = *(void *)(v0 + 704);
  sub_10020C5CC();
  v74 = v73;
  v76 = v75;
  v77 = (uint64_t *)(v72 + OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropEndpointService_allDiscovered);
  swift_beginAccess( v72 + OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropEndpointService_allDiscovered,  v0 + 616,  32LL,  0LL);
  v78 = *v77;
  if (*(void *)(*v77 + 16) && (v79 = sub_1003AD53C(v74, (uint64_t)v76), (v80 & 1) != 0))
  {
    sub_1002499DC(*(void *)(v78 + 56) + 48 * v79, v0 + 112);
  }

  else
  {
    *(_OWORD *)(v0 + 12_Block_object_dispose((const void *)(v36 - 144), 8) = 0u;
    *(_OWORD *)(v0 + 144) = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
  }

  swift_bridgeObjectRelease(v76);
  if (*(void *)(v0 + 136))
  {
    v81 = *(void *)(v0 + 728);
    v82 = *(void *)(v0 + 720);
    v83 = *(void *)(v0 + 712);
    v84 = *(void *)(v0 + 704);
    sub_1001CCE4C((__int128 *)(v0 + 112), (_OWORD *)(v0 + 16));
    swift_endAccess(v0 + 616);
    v85 = (const char **)(v84 + OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropEndpointService_transferringConnectables);
    swift_beginAccess( v84 + OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropEndpointService_transferringConnectables,  v0 + 568,  0LL,  0LL);
    v86 = *v85;
    v87 = *(void *)(v0 + 40);
    v88 = *(void *)(v0 + 48);
    sub_10019A708((void *)(v0 + 16), v87);
    v89 = *(void (**)(uint64_t, uint64_t, __n128))(v88 + 32);
    v90 = swift_bridgeObjectRetain(v86);
    v89(v87, v88, v90);
    v91 = sub_1003A036C(v81, (uint64_t)v86);
    v92 = swift_bridgeObjectRelease(v86);
    v93 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v82 + 8))(v81, v83, v92);
    if ((v91 & 1) != 0)
    {
      v94 = (os_log_s *)Logger.logObject.getter(v93);
      v95 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v94, v95))
      {
        v96 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)v96 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v94,  v95,  "Skipping remove from allDiscovered endpoints because it's in a transfer",  v96,  2u);
        swift_slowDealloc(v96, -1LL, -1LL);
      }
    }

    else
    {
      sub_10020C5CC();
      v98 = v97;
      v100 = v99;
      memset(v104, 0, sizeof(v104));
      swift_beginAccess(v77, v0 + 496, 33LL, 0LL);
      sub_1002E5104((uint64_t)v104, v98, v100);
      swift_endAccess(v0 + 496);
    }

    sub_10018709C((void *)(v0 + 16));
  }

  else
  {
    sub_100187100(v0 + 112, &qword_10064DA48);
    swift_endAccess(v0 + 616);
  }

  v101 = *(void *)(v0 + 744);
  v102 = *(void *)(v0 + 728);
  swift_task_dealloc(*(void *)(v0 + 752));
  swift_task_dealloc(v101);
  swift_task_dealloc(v102);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

        v193 = v51;
        v196 = v50;
        v56 = (os_log_s *)Logger.logObject.getter(v43);
        v57 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v56, v57))
        {
          v58 = *(_DWORD *)(v1 + 904);
          v59 = swift_slowAlloc(14LL, -1LL);
          *(_DWORD *)v59 = 67109376;
          *(_DWORD *)(v1 + 864) = v58;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 864, v1 + 868, v59 + 4, v59 + 8);
          *(_WORD *)(v59 + _Block_object_dispose((const void *)(v36 - 144), 8) = 1024;
          *(_DWORD *)(v1 + 86_Block_object_dispose((const void *)(v36 - 144), 8) = v42 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 868, v1 + 872, v59 + 10, v59 + 14);
          _os_log_impl( (void *)&_mh_execute_header,  v56,  v57,  "Ask request END - Accept {didAutoAccept: %{BOOL}d, shouldExtractMedia: %{BOOL}d}",  (uint8_t *)v59,  0xEu);
          swift_slowDealloc(v59, -1LL, -1LL);
        }

        v190 = v42;
        v60 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 736);
        v61 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 728);
        v184 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 712);
        v62 = *(void *)(v1 + 624);
        v178 = *(void *)(v1 + 608);
        v63 = *(void *)(v1 + 600);
        v64 = *(void *)(v1 + 552);
        v65 = *(void *)(v1 + 520);
        v66 = *(void *)(v1 + 504);

        v68 = CurrentValueSubject.value.getter(v67);
        SFAirDropReceive.Transfer.askRequest.getter(v68);
        v69 = v61(v63, v64);
        SFAirDropReceive.AskRequest.type.getter(v69);
        v70 = v60(v65, v66);
        v71 = SFAirDrop.TransferType.isFiles.getter(v70);
        v72 = v184(v62, v178);
        if ((v71 & 1) != 0)
        {
          v73 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 736);
          v74 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 728);
          v75 = *(void *)(v1 + 600);
          v76 = *(void *)(v1 + 552);
          v77 = *(void *)(v1 + 520);
          v78 = *(void *)(v1 + 504);
          v79 = CurrentValueSubject.value.getter(v72);
          SFAirDropReceive.Transfer.askRequest.getter(v79);
          v80 = v74(v75, v76);
          v81 = SFAirDropReceive.AskRequest.senderIsMe.getter(v80);
          v82 = v73(v77, v78);
          if ((v81 & 1) == 0)
          {
            v83 = *(void (**)(uint64_t, uint64_t))(v1 + 728);
            v84 = *(void *)(v1 + 600);
            v85 = *(void *)(v1 + 552);
            v86 = CurrentValueSubject.value.getter(v82);
            SFAirDropReceive.Transfer.isPreviewSensitive.getter(v86);
            v83(v84, v85);
          }
        }

        v87 = *(void *)(v1 + 456);
        v185 = *(void (**)(void, uint64_t, uint64_t))(*(void *)(v1 + 640) + 16LL);
        v185(*(void *)(v1 + 648), *(void *)(v1 + 680), *(void *)(v1 + 632));
        v88 = swift_retain_n(v87, 2LL);
        v89 = (os_log_s *)Logger.logObject.getter(v88);
        v90 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v89, v90))
        {
          v91 = *(void (**)(uint64_t, uint64_t))(v1 + 728);
          v179 = *(void *)(v1 + 640);
          v162 = *(void *)(v1 + 632);
          v164 = *(void *)(v1 + 648);
          v92 = *(void *)(v1 + 600);
          v93 = *(void *)(v1 + 552);
          v94 = *(void *)(v1 + 520);
          v154 = *(void *)(v1 + 504);
          v156 = *(void *)(v1 + 456);
          v158 = *(void (**)(uint64_t, uint64_t))(v1 + 736);
          v95 = swift_slowAlloc(34LL, -1LL);
          v171 = swift_slowAlloc(64LL, -1LL);
          v198[0] = v171;
          *(_DWORD *)v95 = 67109890;
          type = v90;
          v96 = CurrentValueSubject.value.getter(v171);
          v97 = SFAirDropReceive.Transfer.isPreviewSensitive.getter(v96);
          v91(v92, v93);
          *(_DWORD *)(v1 + 876) = v97 & 1;
          v98 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 876, v1 + 880, v95 + 4, v95 + 8);
          *(_WORD *)(v95 + _Block_object_dispose((const void *)(v36 - 144), 8) = 1024;
          v99 = CurrentValueSubject.value.getter(v98);
          SFAirDropReceive.Transfer.askRequest.getter(v99);
          v100 = ((uint64_t (*)(uint64_t, uint64_t))v91)(v92, v93);
          v101 = SFAirDropReceive.AskRequest.senderIsMe.getter(v100);
          v158(v94, v154);
          swift_release(v156);
          *(_DWORD *)(v1 + 872) = v101 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 872, v1 + 876, v95 + 10, v95 + 14);
          swift_release(v156);
          *(_WORD *)(v95 + 14) = 2080;
          *(void *)(v1 + 424) = sub_10018CDB4(0xD000000000000021LL, 0x8000000100507330LL, v198);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 424, v1 + 432, v95 + 16, v95 + 24);
          *(_WORD *)(v95 + 24) = 2080;
          v102 = sub_100183F14( &qword_100650C20,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
          v103 = dispatch thunk of CustomStringConvertible.description.getter(v162, v102);
          v105 = (const char *)v104;
          *(void *)(v1 + 432) = sub_10018CDB4(v103, v104, v198);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 432, v1 + 440, v95 + 26, v95 + 34);
          v106 = swift_bridgeObjectRelease(v105);
          v107 = *(void (**)(uint64_t, uint64_t, __n128))(v179 + 8);
          v107(v164, v162, v106);
          _os_log_impl( (void *)&_mh_execute_header,  v89,  type,  "Ask sensitive preview SKIP. {transfer.isPreviewSensitive: %{BOOL}d, isSenderMe: %{BOOL}d, userSafetyMode: %s , askStepDestination: %s}",  (uint8_t *)v95,  0x22u);
          swift_arrayDestroy(v171, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v171, -1LL, -1LL);
          swift_slowDealloc(v95, -1LL, -1LL);
        }

        else
        {
          v108 = *(void *)(v1 + 648);
          v109 = *(void *)(v1 + 640);
          v110 = *(void *)(v1 + 632);
          v111 = *(void *)(v1 + 456);

          swift_release_n(v111, 2LL);
          v107 = *(void (**)(uint64_t, uint64_t, __n128))(v109 + 8);
          ((void (*)(uint64_t, uint64_t))v107)(v108, v110);
        }

        v112 = v185;
        v113 = *(void *)(v1 + 680);
        v114 = *(void *)(v1 + 672);
        v115 = *(void *)(v1 + 664);
        v116 = *(void *)(v1 + 656);
        v117 = *(void *)(v1 + 648);
        v118 = *(void *)(v1 + 632);
        v119 = *(void *)(v1 + 624);
        v155 = *(void *)(v1 + 600);
        v157 = *(void *)(v1 + 592);
        v159 = *(void *)(v1 + 584);
        v160 = *(void *)(v1 + 576);
        v161 = *(void *)(v1 + 568);
        v163 = *(void *)(v1 + 544);
        v165 = *(void *)(v1 + 536);
        *(void *)typea = *(void *)(v1 + 528);
        v172 = *(void *)(v1 + 520);
        v175 = *(void *)(v1 + 496);
        v180 = *(void *)(v1 + 472);
        v186 = *(void *)(v1 + 464);
        v112(*(void *)(v1 + 440), v113, v118);
        SFAirDropReceive.AcceptContext.init(shouldExtractMedia:customPayload:)(v190 & 1, v196, v193);
        ((void (*)(uint64_t, uint64_t))v107)(v113, v118);
        swift_task_dealloc(v113);
        swift_task_dealloc(v114);
        swift_task_dealloc(v115);
        swift_task_dealloc(v116);
        swift_task_dealloc(v117);
        swift_task_dealloc(v119);
        swift_task_dealloc(v155);
        swift_task_dealloc(v157);
        swift_task_dealloc(v159);
        swift_task_dealloc(v160);
        swift_task_dealloc(v161);
        swift_task_dealloc(v163);
        swift_task_dealloc(v165);
        swift_task_dealloc(*(void *)typea);
        swift_task_dealloc(v172);
        swift_task_dealloc(v175);
        swift_task_dealloc(v180);
        swift_task_dealloc(v186);
        v120 = *(uint64_t (**)(void))(v1 + 8);
        return v120();
      }

      v50 = 0LL;
    }

    else
    {
      v45 = v1 + 908;
      v46 = *v195;
      *(_OWORD *)(v1 + 336) = 0u;
      *(_OWORD *)(v1 + 352) = 0u;
      *(void *)(v1 + 36_Block_object_dispose((const void *)(v36 - 144), 8) = 0LL;
      v43 = sub_100187100(v1 + 336, &qword_100650CA8);
      if (v46 == 1)
      {
        v42 = 0;
        v44 = *(void *)(v1 + 640);
        v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 16);
        goto LABEL_12;
      }

      v50 = 0LL;
      v42 = 0;
    }

    v51 = 0xF000000000000000LL;
    goto LABEL_20;
  }

  char v4 = *(unsigned __int8 *)(v1 + 909);
  unsigned int v5 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
  *(_DWORD *)unsigned int v5 = 67109120;
  *(_DWORD *)(v1 + 880) = v4;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 880, v1 + 884, v5 + 4, v5 + 8);
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v2,  v3,  "Content overrides canAutoAccept - willAutoAccept = %{BOOL}d",  v5,  8u);
  swift_slowDealloc(v5, -1LL, -1LL);

  if ((v4 & 1) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  unint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  char v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    BOOL v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)BOOL v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Waiting for permission request task", v9, 2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  int v10 = *(void *)(v1 + 744);
  char v12 = *(void *)(v1 + 456);
  uint64_t v11 = *(void *)(v1 + 464);

  sub_10019A6C4(v12 + v10, v1 + 216);
  unsigned int v13 = *(void *)(v1 + 240);
  uint64_t v14 = *(void *)(v1 + 248);
  unint64_t v15 = sub_10019A708((void *)(v1 + 216), v13);
  CurrentValueSubject.value.getter(v15);
  char v16 = *(void *)(v12 + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine6Runner_receiveHandler)
      + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_transferContinuation;
  char v17 = sub_100183098(&qword_1006457D8);
  char v18 = *(void *)(v17 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v11, v16, v17);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v11, 0LL, 1LL, v17);
  uint64_t v19 = (void *)swift_task_alloc(dword_10065297C);
  *(void *)(v1 + 776) = v19;
  const char *v19 = v1;
  v19[1] = sub_100357A64;
  return sub_1003C7634(*(void *)(v1 + 472), *(void *)(v1 + 568), *(void *)(v1 + 464), v13, v14);
}

        v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1032);
        v87 = *(void *)(v0 + 776);
        v88 = *(void *)(v0 + 624);
        v89 = *(void *)(v0 + 592);
        v90 = *(void *)(v0 + 584);

        v86(v90, v88, v87);
        v91 = _s14descr1005DEB71C15ExchangeRequestVMa(0LL);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v91 - 8) + 56LL))(v89, 1LL, 1LL, v91);
        swift_errorRelease(*(void *)(v0 + 544));
        sub_10018709C(v132);
        v103 = 0;
        v40 = _swiftEmptyArrayStorage;
        goto LABEL_8;
      }

      (*(void (**)(void, void))(*(void *)(v0 + 648) + 8LL))( *(void *)(v0 + 656),  *(void *)(v0 + 640));
    }

    swift_errorRelease(*(void *)(v0 + 544));
    v92 = *(void *)(v0 + 944);
    v93 = *(void *)(v0 + 936);
    v94 = *(void *)(v0 + 928);
    v95 = *(void *)(v0 + 904);
    v96 = *(void *)(v0 + 896);
    v97 = *(void *)(v0 + 872);
    v98 = *(void *)(v0 + 864);
    v99 = *(void *)(v0 + 840);
    v100 = *(void *)(v0 + 832);
    v102 = *(void *)(v0 + 824);
    v104 = *(void *)(v0 + 816);
    v106 = *(void *)(v0 + 808);
    v108 = *(void *)(v0 + 800);
    v110 = *(void *)(v0 + 792);
    v112 = *(void *)(v0 + 768);
    v114 = *(void *)(v0 + 760);
    v117 = *(void *)(v0 + 736);
    v121 = *(void *)(v0 + 728);
    v124 = *(void *)(v0 + 720);
    v127 = *(void *)(v0 + 696);
    v131 = *(void *)(v0 + 688);
    v138 = *(void *)(v0 + 664);
    v142 = *(void *)(v0 + 656);
    sub_10018709C(v132);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v102);
    swift_task_dealloc(v104);
    swift_task_dealloc(v106);
    swift_task_dealloc(v108);
    swift_task_dealloc(v110);
    swift_task_dealloc(v112);
    swift_task_dealloc(v114);
    swift_task_dealloc(v117);
    swift_task_dealloc(v121);
    swift_task_dealloc(v124);
    swift_task_dealloc(v127);
    swift_task_dealloc(v131);
    swift_task_dealloc(v138);
    swift_task_dealloc(v142);
    return (*(uint64_t (**)(void))(v0 + 8))(0LL);
  }

  else
  {
    v137 = *(void *)(v0 + 944);
    v71 = *(void *)(v0 + 776);
    v72 = *(void *)(v0 + 728);
    v116 = *(void *)(v0 + 736);
    v120 = *(void *)(v0 + 712);
    v126 = *(void *)(v0 + 704);
    v130 = *(void *)(v0 + 912);
    v73 = *(void *)(v0 + 624);
    v74 = *(const char **)(v0 + 616);
    v75 = *(const char **)(v0 + 608);
    v61(*(void *)(v0 + 928));
    sub_10018709C(v140);
    v76 = (int *)sub_100183098((uint64_t *)&unk_10064B760);
    v77 = v76[12];
    v78 = v76[16];
    v79 = v72 + v76[20];
    v122(v72, v73, v71);
    *(void *)(v72 + v77) = v75;
    *(void *)(v72 + v7_Block_object_dispose((const void *)(v36 - 144), 8) = v74;
    v80 = sub_100183098(&qword_1006451B0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 16LL))(v79, v116, v80);
    v81 = enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:);
    v82 = *(void (**)(uint64_t, uint64_t, uint64_t))(v120 + 104);
    *(void *)(v0 + 104_Block_object_dispose((const void *)(v36 - 144), 8) = v82;
    v82(v72, v81, v126);
    *(void *)&v83 = swift_bridgeObjectRetain(v75).n128_u64[0];
    swift_bridgeObjectRetain(v74, v83);
    sub_10044E6FC(v72, v137);
    ((void (*)(uint64_t, uint64_t))v61)(v137, v130);
    v84 = (void *)swift_task_alloc(dword_100650BCC);
    *(void *)(v0 + 1056) = v84;
    *v84 = v0;
    v84[1] = sub_100360BD8;
    return sub_10036D160(*(void *)(v0 + 816), *(void *)(v0 + 696), *(void *)(v0 + 736), *(void *)(v0 + 624));
  }

    char v4 = (v12 - 1) & v12;
  }

  unsigned int v13 = v11 + 4;
  if (v13 >= v5)
  {
LABEL_27:
    swift_release(a1);
    return;
  }

  char v12 = *(void *)(v20 + 8 * v13);
  if (v12)
  {
    unint64_t v7 = v13;
    goto LABEL_20;
  }

  while (1)
  {
    unint64_t v7 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v7 >= v5) {
      goto LABEL_27;
    }
    char v12 = *(void *)(v20 + 8 * v7);
    ++v13;
    if (v12) {
      goto LABEL_20;
    }
  }

  __break(1u);
  return result;
}

  v35 = (uint64_t)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate];
  swift_beginAccess(&v4[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate], v51, 0LL, 0LL);
  sub_1001915A4(v35, (uint64_t)&v56, &qword_100650630);
  if (v57[2])
  {
    sub_10019A6C4((uint64_t)&v56, (uint64_t)&v54);
    sub_100187100((uint64_t)&v56, &qword_100650630);
    uint64_t v36 = *sub_10019A708(&v54, v55);
    v37 = v4;
    sub_1002D8E70(v37, a1, a2, a3, v36);

    sub_10018709C(&v54);
  }

  else
  {
    sub_100187100((uint64_t)&v56, &qword_100650630);
  }

  if (v10[92] != -1) {
    swift_once(&qword_1006442E0, sub_1003D43E4);
  }
  v38 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v38, (uint64_t)qword_100652B70);
  v39 = swift_bridgeObjectRetain_n(a3, 2LL);
  v40 = (os_log_s *)Logger.logObject.getter(v39);
  v41 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v43 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)v42 = 138412290;
    v44 = sub_100187014();
    v45 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v44, 0LL, 0LL);
    *(_DWORD *)v46 = a1;
    *(void *)(v46 + _Block_object_dispose((const void *)(v36 - 144), 8) = a2;
    *(void *)(v46 + 16) = a3;
    swift_bridgeObjectRetain(a3);
    v47 = _swift_stdlib_bridgeErrorToNSError(v45);
    v56 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v42 + 4, v42 + 12);
    *v43 = v47;
    swift_bridgeObjectRelease_n(a3, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Session failed with error: %@", v42, 0xCu);
    v48 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v43, 1LL, v48);
    swift_slowDealloc(v43, -1LL, -1LL);
    swift_slowDealloc(v42, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
    v40 = (os_log_s *)v9;
  }
}

    unint64_t v15 = (v20 - 1) & v20;
    char v18 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_21:
    char v22 = *(void *)(v1 + 120);
    char v23 = *(void *)(v1 + 96);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16))( v22,  *(void *)(v10 + 48) + *(void *)(v8 + 72) * v18,  v23);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v22, 0LL, 1LL, v23);
    unsigned int v24 = *(void *)(v1 + 112);
    unint64_t v25 = *(void *)(v1 + 96);
    (*(void (**)(uint64_t, void, uint64_t))(v8 + 32))(v24, *(void *)(v1 + 120), v25);
    URL._bridgeToObjectiveC()(v26);
    uint64_t v28 = v27;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v24, v25);
    LOBYTE(v24) = SFIsNewsLink(v28);

    if ((v24 & 1) == 0)
    {
      swift_release(v10);
      goto LABEL_32;
    }
  }

  unint64_t v21 = v19 + 3;
  if (v21 >= v16)
  {
LABEL_24:
    (*(void (**)(void, uint64_t, uint64_t, void))(v8 + 56))( *(void *)(v1 + 120),  1LL,  1LL,  *(void *)(v1 + 96));
LABEL_25:
    swift_release(v10);
    v29 = objc_allocWithZone(&OBJC_CLASS___LSApplicationRecord);
    __int16 v30 = sub_10043C098(0x6C7070612E6D6F63LL, 0xEE007377656E2E65LL, 1);
    v53 = *(void *)(v1 + 40);
    v54 = *(void **)(v53 + 16);
    *(void *)(v53 + 16) = v30;

    goto LABEL_29;
  }

  uint64_t v20 = *(void *)(v12 + 8 * v21);
  if (v20)
  {
    uint64_t v11 = v21;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v11 >= v16) {
      goto LABEL_24;
    }
    uint64_t v20 = *(void *)(v12 + 8 * v11);
    ++v21;
    if (v20) {
      goto LABEL_20;
    }
  }

  uint64_t v20 = *(void *)(v0 + 344);
  unint64_t v21 = *(void **)(v0 + 192);

  char v22 = type metadata accessor for SFAirDropReceive.Failure(0LL);
  char v23 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
  swift_allocError(v22, v23, 0LL, 0LL);
  unint64_t v25 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v22 - 8) + 104LL))( v24,  enum case for SFAirDropReceive.Failure.badRequest(_:),  v22);
  swift_willThrow(v25);
  sub_10025F56C( v21,  (void (*)(void, void, void, void, void, void, void, void, void, void, void))sub_10025F4D4);
  sub_1001A4BC8(v20, type metadata accessor for SDAirDropServerConnection);
  swift_bridgeObjectRelease(v5);
  char v26 = *(void *)(v0 + 336);
  uint64_t v27 = *(void *)(v0 + 312);
  swift_task_dealloc(*(void *)(v0 + 344));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

    int v10 = (v15 - 1) & v15;
    unsigned int v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_5:
    uint64_t result = (unint64_t *)[*(id *)(*(void *)(a3 + 48) + 8 * v13) type];
    if (result == (unint64_t *)2)
    {
      *(unint64_t *)((char *)v4 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      if (__OFADD__(v5++, 1LL))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        return (unint64_t *)sub_100481804(v4, a2, v5, a3, &qword_100652550);
      }
    }
  }

  char v16 = v14 + 3;
  if (v16 >= v11) {
    goto LABEL_24;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    unint64_t v6 = v16;
    goto LABEL_20;
  }

  while (1)
  {
    unint64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v6 >= v11) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }

    int v10 = (v15 - 1) & v15;
    unsigned int v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_5:
    uint64_t result = (unint64_t *)[*(id *)(*(void *)(a3 + 48) + 8 * v13) type];
    if (result == (unint64_t *)4)
    {
      *(unint64_t *)((char *)v4 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      if (__OFADD__(v5++, 1LL))
      {
        __break(1u);
LABEL_24:
        swift_retain(a3);
        return (unint64_t *)sub_100481804(v4, a2, v5, a3, &qword_100652550);
      }
    }
  }

  char v16 = v14 + 3;
  if (v16 >= v11) {
    goto LABEL_24;
  }
  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    unint64_t v6 = v16;
    goto LABEL_20;
  }

  while (1)
  {
    unint64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v6 >= v11) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }

LABEL_9:
  unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 possibleActions]);
  char v8 = (void *)objc_claimAutoreleasedReturnValue( -[SDAirDropHandler cancelActionTitleToAccompanyActions:]( self,  "cancelActionTitleToAccompanyActions:",  v7));

  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v15 cancelAction]);
  [v9 setLocalizedTitle:v8];

  int v10 = (void *)objc_claimAutoreleasedReturnValue([v15 cancelAction]);
  [v10 setSingleItemLocalizedTitle:v8];

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(-[SDAirDropHandler suitableContentsTitle](self, "suitableContentsTitle"));
  [v15 setContentsTitle:v11];

  char v12 = (void *)objc_claimAutoreleasedReturnValue(-[SDAirDropHandler suitableContentsDescription](self, "suitableContentsDescription"));
  [v15 setContentsDescription:v12];
}

  char v4 = 0LL;
  if ((*(_BYTE *)&self->_has & 8) == 0) {
    goto LABEL_10;
  }
LABEL_5:
  unsigned int v5 = 2654435761LL * self->_supportsACK;
  if ((*(_BYTE *)&self->_has & 0x10) == 0) {
    goto LABEL_11;
  }
LABEL_6:
  unint64_t v6 = 2654435761LL * self->_suppressNotification;
  return v3 ^ v2 ^ v4 ^ v5 ^ v6;
}

  unint64_t v15 = 0;
LABEL_10:
  if (dword_1006417A0 >= 31)
  {
    char v16 = v15;
    goto LABEL_24;
  }

  if (dword_1006417A0 == -1)
  {
    char v16 = v15;
  }

  else
  {
    char v16 = v15;
  }

  unint64_t v25 = IsAppleInternalBuild();
  char v26 = @"*";
  if (v25) {
    char v26 = v4;
  }
  uint64_t v27 = "yes";
  if (!v15) {
    uint64_t v27 = "no";
  }
  LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _shouldOfferPassword:]",  30LL,  "WPS: Should share network %@: %s",  v26,  v27);
LABEL_24:

  return v16;
}
}

      -[SDAirDropServer stopScanningAndStartServer](self, "stopScanningAndStartServer");
      goto LABEL_10;
    }

    if (v16)
    {
      char v17 = 138412290;
      char v18 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Hashes %@ not recognized",  (uint8_t *)&v17,  0xCu);
    }
  }

  char v12 = -[NSString copyWithZone:](self->_appName, "copyWithZone:", a3);
  unsigned int v13 = (void *)v6[2];
  v6[2] = v12;

  uint64_t v14 = (char)self->_has;
  if ((v14 & 1) == 0)
  {
    if ((*(_BYTE *)&self->_has & 0x20) == 0) {
      goto LABEL_11;
    }
LABEL_18:
    *((_BYTE *)v6 + 54) = self->_skipMotionCheck;
    *((_BYTE *)v6 + 60) |= 0x20u;
    if ((*(_BYTE *)&self->_has & 0x10) == 0) {
      return v6;
    }
    goto LABEL_12;
  }

  v6[1] = *(void *)&self->_phoneUnlockDate;
  *((_BYTE *)v6 + 60) |= 1u;
  uint64_t v14 = (char)self->_has;
  if ((v14 & 0x20) != 0) {
    goto LABEL_18;
  }
LABEL_11:
  if ((v14 & 0x10) != 0)
  {
LABEL_12:
    *((_BYTE *)v6 + 53) = self->_isAuthenticatingForSiri;
    *((_BYTE *)v6 + 60) |= 0x10u;
  }

  return v6;
}

  if (v9) {
    v9[2](v9, v13, v6);
  }
}

  uint64_t v14 = -[NSData copyWithZone:](self->_encryptedPayload, "copyWithZone:", a3);
  unint64_t v15 = (void *)v6[4];
  v6[4] = v14;

  char v16 = -[NSData copyWithZone:](self->_authTag, "copyWithZone:", a3);
  char v17 = (void *)v6[2];
  v6[2] = v16;

  char v18 = -[NSData copyWithZone:](self->_nonce, "copyWithZone:", a3);
  uint64_t v19 = (void *)v6[6];
  v6[6] = v18;

  return v6;
}

  uint64_t v11 = 1LL;
LABEL_16:

  return v11;
}

  BOOL v9 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  if (v9) {
    CFRelease(v9);
  }
  int v10 = *(const void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  if (v10) {
    CFRelease(v10);
  }
  if (v2)
  {
    uint64_t v11 = *(void **)(a1 + 32);
    char v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v2,  0LL));
    [v11 _responseHandlerWithIdentity:0 error:v12];
  }
}

  return v6;
}
}

  uint64_t result = [*(id *)(a1 + 32) activateCalled];
  if ((result & 1) == 0)
  {
    uint64_t result = [*(id *)(a1 + 32) invalidated];
    if ((result & 1) == 0)
    {
      [*(id *)(a1 + 32) setActivateCalled:1];
      return _[*(id *)(a1 + 40) _addWiFiRequest:*(void *)(a1 + 32)];
    }
  }

  return result;
}

  return v11;
}

  if ((_os_feature_enabled_impl("Sharing", "pu_lock_button_all") & 1) != 0)
  {
    -[SDUnlockKeyManager setAutoUnlockEnabledUpdatedAfterFirstUnlock:]( self,  "setAutoUnlockEnabledUpdatedAfterFirstUnlock:",  1LL);
    if ((v12 & 1) == 0)
    {
LABEL_26:
      if (self->_unlockingForKeybagUnlock)
      {
        unsigned int v24 = -[SDUnlockKeyManager unlockingState](self, "unlockingState");
        if (v24 <= 1)
        {
          char v26 = paired_unlock_log(v24, v25);
          uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v30) = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Device locked before auth token sent. Cancelling",  (uint8_t *)&v30,  2u);
          }

          uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(-[SDUnlockSessionManager metrics](self, "metrics"));
          if (v28)
          {
            v29 = (void *)objc_claimAutoreleasedReturnValue(-[SDUnlockSessionManager metrics](self, "metrics"));
            [v29 setFailureReason:14];
          }

          -[SDUnlockKeyManager resetAndClearState](self, "resetAndClearState");
        }
      }

      -[SDUnlockSessionManager logMetrics](self, "logMetrics");
      return;
    }
  }

  else
  {
    unint64_t v15 = -[SDUnlockKeyManager autoUnlockEnabledUpdatedAfterFirstUnlock]( self,  "autoUnlockEnabledUpdatedAfterFirstUnlock");
    if (v15)
    {
      if (!v12) {
        goto LABEL_26;
      }
      if (!-[SDUnlockKeyManager shouldUseTwoPartPill](self, "shouldUseTwoPartPill"))
      {
        char v17 = -[SDUnlockKeyManager startUnlockIfNeeded](self, "startUnlockIfNeeded");
        self->_unlockingForKeybagUnlock = v17;
        uint64_t v19 = paired_unlock_log(v17, v18);
        uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          if (self->_unlockingForKeybagUnlock) {
            unint64_t v21 = @"YES";
          }
          else {
            unint64_t v21 = @"NO";
          }
          __int16 v30 = 138412290;
          int v31 = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Paired Unlock started: %@",  (uint8_t *)&v30,  0xCu);
        }
      }
    }

    else
    {
      char v22 = paired_unlock_log(v15, v16);
      char v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v30) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Not starting Paired Unlock until we can verify whether Auto Unlock is enabled",  (uint8_t *)&v30,  2u);
      }

      -[SDUnlockKeyManager setWaitingForAutoUnlockStateUpdateToStartPairedUnlock:]( self,  "setWaitingForAutoUnlockStateUpdateToStartPairedUnlock:",  1LL);
      if ((v12 & 1) == 0) {
        goto LABEL_26;
      }
    }
  }

  if (!self->_unlockingForKeybagUnlock) {
    -[SDUnlockKeyManager beginUnlockIfNotOnLockScreen](self, "beginUnlockIfNotOnLockScreen");
  }
}

  uint64_t v20 = paired_unlock_log(v12, v13);
  unint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
    sub_10002AAFC();
  }

  -[SDUnlockKeyManager sendSetupSessionCreatedWithLocalKey:stepData:sessionID:errorCode:]( self,  "sendSetupSessionCreatedWithLocalKey:stepData:sessionID:errorCode:",  0LL,  0LL,  v5,  v19);
  -[SDUnlockKeyManager disableUnlockPairing](self, "disableUnlockPairing");
  -[SDUnlockKeyManager resetSetupState](self, "resetSetupState");
}

  [v5 updateWithRPIdentity:v20];
LABEL_39:
  unsigned int v13 = 0LL;
LABEL_40:
  [v5 setAudioRoutingScore:0];
  if (v11) {
    v34 = v20 == 0LL;
  }
  else {
    v34 = 1;
  }
  v35 = !v34;
  if (!v34)
  {
    uint64_t v36 = CFDataGetTypeID();
    v37 = CFDictionaryGetTypedValue(v8, @"ars", v36, 0LL);
    v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
    if (v38) {
      -[SDNearbyAgent _identificationDecryptAudioRoutingScoreData:device:authTag:identity:]( self,  "_identificationDecryptAudioRoutingScoreData:device:authTag:identity:",  v38,  v5,  v11,  v20);
    }
  }

  if ((a4 & 0x10) != 0 && self->_contactHashesEnabled && [v5 deviceActionType] == 8)
  {
    v39 = CFDataGetTypeID();
    v40 = CFDictionaryGetTypedValue(v8, @"ach", v39, 0LL);
    v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
    if ((unint64_t)[v41 length] >= 9)
    {
      v72 = v6;
      v42 = v7;
      v43 = v11;
      v44 = v8;
      v45 = (void *)objc_claimAutoreleasedReturnValue( -[SDStatusMonitor contactIdentifierForMediumHashes:]( self->_statusMonitor,  "contactIdentifierForMediumHashes:",  v41));
      [v5 setContactIdentifier:v45];

      char v8 = v44;
      uint64_t v11 = v43;
      unint64_t v7 = v42;
      unint64_t v6 = v72;
    }
  }

  [v5 setHotspotInfo:0];
  if (v35)
  {
    v46 = CFDataGetTypeID();
    v47 = CFDictionaryGetTypedValue(v8, @"hsi", v46, 0LL);
    v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
    if (v48) {
      -[SDNearbyAgent _identificationDecryptHotspotData:device:authTag:identity:]( self,  "_identificationDecryptHotspotData:device:authTag:identity:",  v48,  v5,  v11,  v20);
    }
  }

  v75 = 0;
  Int64Ranged = CFDictionaryGetInt64Ranged(v8, @"al", 0LL, 255LL, &v75);
  v50 = -[SDNearbyAgent _idsShouldEncryptActivityLevel](self, "_idsShouldEncryptActivityLevel");
  v51 = v75;
  if (v50 < 1)
  {
    if (v75)
    {
      v53 = v7;
      v54 = 16LL;
    }

    else
    {
      v54 = Int64Ranged;
      v53 = v7;
    }

    [v53 setDecryptedActivityLevel:v54];
    goto LABEL_87;
  }

  if (v11 && !v75 && v20)
  {
    v52 = -[SDNearbyAgent _identificationDecryptActivityLevel:device:authTag:identity:]( self,  "_identificationDecryptActivityLevel:device:authTag:identity:",  Int64Ranged,  v5,  v11,  v20);
    [v7 setDecryptedActivityLevel:v52];
    if (dword_100643B70 <= 30
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 30LL)))
    {
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _identificationHandleDeviceFound:flags:]",  30LL,  "NearbyInfo received activity level: 0x%x after decryption",  v52);
    }

    goto LABEL_87;
  }

  v55 = v11;
  if (v75) {
    v56 = 1;
  }
  else {
    v56 = v11 == 0LL;
  }
  if (v56) {
    v57 = 90LL;
  }
  else {
    v57 = 30LL;
  }
  if ((int)v57 >= dword_100643B70)
  {
    if (dword_100643B70 != -1)
    {
LABEL_77:
      v58 = "no";
      if (v55) {
        v59 = "yes";
      }
      else {
        v59 = "no";
      }
      if (v20) {
        v58 = "yes";
      }
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _identificationHandleDeviceFound:flags:]",  v57,  "### Unable to decrypt activity level with authTag %s identity %s error %d for device %@\n",  v59,  v58,  v51,  v5);
      goto LABEL_86;
    }

    if (_LogCategory_Initialize(&dword_100643B70, v57))
    {
      v51 = v75;
      goto LABEL_77;
    }
  }

      char v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 672);
      char v17 = *(void *)(v0 + 472);
      char v18 = *(void *)(v0 + 368);
      uint64_t v19 = *(void *)(v0 + 344);

      v16(v19, v18, v17);
      swift_errorRelease(*(void *)(v0 + 304));
      sub_10018709C((void *)(v0 + 56));
      uint64_t v20 = *(void *)(v0 + 632);
      unint64_t v21 = *(void *)(v0 + 624);
      char v22 = *(void *)(v0 + 600);
      char v23 = *(void *)(v0 + 592);
      unsigned int v24 = *(void *)(v0 + 568);
      unint64_t v25 = *(void *)(v0 + 560);
      char v26 = *(void *)(v0 + 536);
      uint64_t v27 = *(void *)(v0 + 528);
      uint64_t v28 = *(void *)(v0 + 520);
      v40 = *(void *)(v0 + 512);
      v42 = *(void *)(v0 + 504);
      v44 = *(void *)(v0 + 496);
      v46 = *(void *)(v0 + 488);
      v48 = *(void *)(v0 + 464);
      v50 = *(void *)(v0 + 456);
      v52 = *(void *)(v0 + 448);
      v54 = *(void *)(v0 + 424);
      v56 = *(void *)(v0 + 400);
      swift_task_dealloc(*(void *)(v0 + 640));
      swift_task_dealloc(v20);
      swift_task_dealloc(v21);
      swift_task_dealloc(v22);
      swift_task_dealloc(v23);
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      swift_task_dealloc(v27);
      swift_task_dealloc(v28);
      swift_task_dealloc(v40);
      swift_task_dealloc(v42);
      swift_task_dealloc(v44);
      swift_task_dealloc(v46);
      swift_task_dealloc(v48);
      swift_task_dealloc(v50);
      swift_task_dealloc(v52);
      swift_task_dealloc(v54);
      swift_task_dealloc(v56);
      return (*(uint64_t (**)(void, void *))(v0 + 8))(0LL, _swiftEmptyArrayStorage);
    }

    (*(void (**)(void, void))(*(void *)(v0 + 392) + 8LL))(*(void *)(v0 + 400), *(void *)(v0 + 384));
  }

  __int16 v30 = *(void *)(v0 + 640);
  int v31 = *(void *)(v0 + 632);
  __int16 v32 = *(void *)(v0 + 624);
  int v33 = *(void *)(v0 + 600);
  v34 = *(void *)(v0 + 592);
  v35 = *(void *)(v0 + 568);
  uint64_t v36 = *(void *)(v0 + 560);
  v37 = *(void *)(v0 + 536);
  v38 = *(void *)(v0 + 528);
  v39 = *(void *)(v0 + 520);
  v41 = *(void *)(v0 + 512);
  v43 = *(void *)(v0 + 504);
  v45 = *(void *)(v0 + 496);
  v47 = *(void *)(v0 + 488);
  v49 = *(void *)(v0 + 464);
  v51 = *(void *)(v0 + 456);
  v53 = *(void *)(v0 + 448);
  v55 = *(void *)(v0 + 424);
  v57 = *(void *)(v0 + 400);
  swift_errorRelease(*(void *)(v0 + 304));
  sub_10018709C((void *)(v0 + 56));
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v47);
  swift_task_dealloc(v49);
  swift_task_dealloc(v51);
  swift_task_dealloc(v53);
  swift_task_dealloc(v55);
  swift_task_dealloc(v57);
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

      char v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 672);
      unsigned int v13 = *(void *)(v0 + 472);
      uint64_t v14 = *(void *)(v0 + 368);
      unint64_t v15 = *(void *)(v0 + 344);

      v12(v15, v14, v13);
      swift_errorRelease(*(void *)(v0 + 304));
      sub_10018709C((void *)(v0 + 56));
      char v16 = *(void *)(v0 + 632);
      char v17 = *(void *)(v0 + 624);
      char v18 = *(void *)(v0 + 600);
      uint64_t v19 = *(void *)(v0 + 592);
      uint64_t v20 = *(void *)(v0 + 568);
      unint64_t v21 = *(void *)(v0 + 560);
      char v22 = *(void *)(v0 + 536);
      char v23 = *(void *)(v0 + 528);
      unsigned int v24 = *(void *)(v0 + 520);
      uint64_t v36 = *(void *)(v0 + 512);
      v38 = *(void *)(v0 + 504);
      v40 = *(void *)(v0 + 496);
      v42 = *(void *)(v0 + 488);
      v44 = *(void *)(v0 + 464);
      v46 = *(void *)(v0 + 456);
      v48 = *(void *)(v0 + 448);
      v50 = *(void *)(v0 + 424);
      v52 = *(void *)(v0 + 400);
      swift_task_dealloc(*(void *)(v0 + 640));
      swift_task_dealloc(v16);
      swift_task_dealloc(v17);
      swift_task_dealloc(v18);
      swift_task_dealloc(v19);
      swift_task_dealloc(v20);
      swift_task_dealloc(v21);
      swift_task_dealloc(v22);
      swift_task_dealloc(v23);
      swift_task_dealloc(v24);
      swift_task_dealloc(v36);
      swift_task_dealloc(v38);
      swift_task_dealloc(v40);
      swift_task_dealloc(v42);
      swift_task_dealloc(v44);
      swift_task_dealloc(v46);
      swift_task_dealloc(v48);
      swift_task_dealloc(v50);
      swift_task_dealloc(v52);
      return (*(uint64_t (**)(void, void *))(v0 + 8))(0LL, _swiftEmptyArrayStorage);
    }

    (*(void (**)(void, void))(*(void *)(v0 + 392) + 8LL))(*(void *)(v0 + 400), *(void *)(v0 + 384));
  }

  char v26 = *(void *)(v0 + 640);
  uint64_t v27 = *(void *)(v0 + 632);
  uint64_t v28 = *(void *)(v0 + 624);
  v29 = *(void *)(v0 + 600);
  __int16 v30 = *(void *)(v0 + 592);
  int v31 = *(void *)(v0 + 568);
  __int16 v32 = *(void *)(v0 + 560);
  int v33 = *(void *)(v0 + 536);
  v34 = *(void *)(v0 + 528);
  v35 = *(void *)(v0 + 520);
  v37 = *(void *)(v0 + 512);
  v39 = *(void *)(v0 + 504);
  v41 = *(void *)(v0 + 496);
  v43 = *(void *)(v0 + 488);
  v45 = *(void *)(v0 + 464);
  v47 = *(void *)(v0 + 456);
  v49 = *(void *)(v0 + 448);
  v51 = *(void *)(v0 + 424);
  v53 = *(void *)(v0 + 400);
  swift_errorRelease(*(void *)(v0 + 304));
  sub_10018709C((void *)(v0 + 56));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v47);
  swift_task_dealloc(v49);
  swift_task_dealloc(v51);
  swift_task_dealloc(v53);
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

      unsigned int v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1032);
      uint64_t v14 = *(void *)(v0 + 776);
      unint64_t v15 = *(void *)(v0 + 624);
      char v16 = *(void *)(v0 + 592);
      char v17 = *(void *)(v0 + 584);

      v13(v17, v15, v14);
      char v18 = _s14descr1005DEB71C15ExchangeRequestVMa(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v16, 1LL, 1LL, v18);
      swift_errorRelease(*(void *)(v0 + 544));
      sub_10018709C((void *)(v0 + 56));
      uint64_t v19 = *(void *)(v0 + 936);
      uint64_t v20 = *(void *)(v0 + 928);
      unint64_t v21 = *(void *)(v0 + 904);
      char v22 = *(void *)(v0 + 896);
      char v23 = *(void *)(v0 + 872);
      unsigned int v24 = *(void *)(v0 + 864);
      unint64_t v25 = *(void *)(v0 + 840);
      char v26 = *(void *)(v0 + 832);
      uint64_t v27 = *(void *)(v0 + 824);
      v39 = *(void *)(v0 + 816);
      v41 = *(void *)(v0 + 808);
      v43 = *(void *)(v0 + 800);
      v45 = *(void *)(v0 + 792);
      v47 = *(void *)(v0 + 768);
      v49 = *(void *)(v0 + 760);
      v51 = *(void *)(v0 + 736);
      v53 = *(void *)(v0 + 728);
      v55 = *(void *)(v0 + 720);
      v57 = *(void *)(v0 + 696);
      v59 = *(void *)(v0 + 688);
      v61 = *(void *)(v0 + 664);
      v63 = *(void *)(v0 + 656);
      swift_task_dealloc(*(void *)(v0 + 944));
      swift_task_dealloc(v19);
      swift_task_dealloc(v20);
      swift_task_dealloc(v21);
      swift_task_dealloc(v22);
      swift_task_dealloc(v23);
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      swift_task_dealloc(v27);
      swift_task_dealloc(v39);
      swift_task_dealloc(v41);
      swift_task_dealloc(v43);
      swift_task_dealloc(v45);
      swift_task_dealloc(v47);
      swift_task_dealloc(v49);
      swift_task_dealloc(v51);
      swift_task_dealloc(v53);
      swift_task_dealloc(v55);
      swift_task_dealloc(v57);
      swift_task_dealloc(v59);
      swift_task_dealloc(v61);
      swift_task_dealloc(v63);
      return (*(uint64_t (**)(void, void *))(v0 + 8))(0LL, _swiftEmptyArrayStorage);
    }

    (*(void (**)(void, void))(*(void *)(v0 + 648) + 8LL))(*(void *)(v0 + 656), *(void *)(v0 + 640));
  }

  swift_errorRelease(*(void *)(v0 + 544));
  v29 = *(void *)(v0 + 944);
  __int16 v30 = *(void *)(v0 + 936);
  int v31 = *(void *)(v0 + 928);
  __int16 v32 = *(void *)(v0 + 904);
  int v33 = *(void *)(v0 + 896);
  v34 = *(void *)(v0 + 872);
  v35 = *(void *)(v0 + 864);
  uint64_t v36 = *(void *)(v0 + 840);
  v37 = *(void *)(v0 + 832);
  v38 = *(void *)(v0 + 824);
  v40 = *(void *)(v0 + 816);
  v42 = *(void *)(v0 + 808);
  v44 = *(void *)(v0 + 800);
  v46 = *(void *)(v0 + 792);
  v48 = *(void *)(v0 + 768);
  v50 = *(void *)(v0 + 760);
  v52 = *(void *)(v0 + 736);
  v54 = *(void *)(v0 + 728);
  v56 = *(void *)(v0 + 720);
  v58 = *(void *)(v0 + 696);
  v60 = *(void *)(v0 + 688);
  v62 = *(void *)(v0 + 664);
  v64 = *(void *)(v0 + 656);
  sub_10018709C((void *)(v0 + 56));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  swift_task_dealloc(v52);
  swift_task_dealloc(v54);
  swift_task_dealloc(v56);
  swift_task_dealloc(v58);
  swift_task_dealloc(v60);
  swift_task_dealloc(v62);
  swift_task_dealloc(v64);
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

      uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1032);
      uint64_t v20 = *(void *)(v0 + 776);
      unint64_t v21 = *(void *)(v0 + 624);
      char v22 = *(void *)(v0 + 592);
      char v23 = *(void *)(v0 + 584);

      v19(v23, v21, v20);
      unsigned int v24 = _s14descr1005DEB71C15ExchangeRequestVMa(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56LL))(v22, 1LL, 1LL, v24);
      swift_errorRelease(*(void *)(v0 + 544));
      sub_10018709C((void *)(v0 + 56));
      unint64_t v25 = *(void *)(v0 + 936);
      char v26 = *(void *)(v0 + 928);
      uint64_t v27 = *(void *)(v0 + 904);
      uint64_t v28 = *(void *)(v0 + 896);
      v29 = *(void *)(v0 + 872);
      __int16 v30 = *(void *)(v0 + 864);
      int v31 = *(void *)(v0 + 840);
      __int16 v32 = *(void *)(v0 + 832);
      int v33 = *(void *)(v0 + 824);
      v45 = *(void *)(v0 + 816);
      v47 = *(void *)(v0 + 808);
      v49 = *(void *)(v0 + 800);
      v51 = *(void *)(v0 + 792);
      v53 = *(void *)(v0 + 768);
      v55 = *(void *)(v0 + 760);
      v57 = *(void *)(v0 + 736);
      v59 = *(void *)(v0 + 728);
      v61 = *(void *)(v0 + 720);
      v63 = *(void *)(v0 + 696);
      v65 = *(void *)(v0 + 688);
      v67 = *(void *)(v0 + 664);
      v69 = *(void *)(v0 + 656);
      swift_task_dealloc(*(void *)(v0 + 944));
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      swift_task_dealloc(v27);
      swift_task_dealloc(v28);
      swift_task_dealloc(v29);
      swift_task_dealloc(v30);
      swift_task_dealloc(v31);
      swift_task_dealloc(v32);
      swift_task_dealloc(v33);
      swift_task_dealloc(v45);
      swift_task_dealloc(v47);
      swift_task_dealloc(v49);
      swift_task_dealloc(v51);
      swift_task_dealloc(v53);
      swift_task_dealloc(v55);
      swift_task_dealloc(v57);
      swift_task_dealloc(v59);
      swift_task_dealloc(v61);
      swift_task_dealloc(v63);
      swift_task_dealloc(v65);
      swift_task_dealloc(v67);
      swift_task_dealloc(v69);
      return (*(uint64_t (**)(void, void *))(v0 + 8))(0LL, _swiftEmptyArrayStorage);
    }

    (*(void (**)(void, void))(*(void *)(v0 + 648) + 8LL))(*(void *)(v0 + 656), *(void *)(v0 + 640));
  }

  swift_errorRelease(*(void *)(v0 + 544));
  v35 = *(void *)(v0 + 944);
  uint64_t v36 = *(void *)(v0 + 936);
  v37 = *(void *)(v0 + 928);
  v38 = *(void *)(v0 + 904);
  v39 = *(void *)(v0 + 896);
  v40 = *(void *)(v0 + 872);
  v41 = *(void *)(v0 + 864);
  v42 = *(void *)(v0 + 840);
  v43 = *(void *)(v0 + 832);
  v44 = *(void *)(v0 + 824);
  v46 = *(void *)(v0 + 816);
  v48 = *(void *)(v0 + 808);
  v50 = *(void *)(v0 + 800);
  v52 = *(void *)(v0 + 792);
  v54 = *(void *)(v0 + 768);
  v56 = *(void *)(v0 + 760);
  v58 = *(void *)(v0 + 736);
  v60 = *(void *)(v0 + 728);
  v62 = *(void *)(v0 + 720);
  v64 = *(void *)(v0 + 696);
  v66 = *(void *)(v0 + 688);
  v68 = *(void *)(v0 + 664);
  v70 = *(void *)(v0 + 656);
  sub_10018709C((void *)(v0 + 56));
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  swift_task_dealloc(v52);
  swift_task_dealloc(v54);
  swift_task_dealloc(v56);
  swift_task_dealloc(v58);
  swift_task_dealloc(v60);
  swift_task_dealloc(v62);
  swift_task_dealloc(v64);
  swift_task_dealloc(v66);
  swift_task_dealloc(v68);
  swift_task_dealloc(v70);
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

      uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1032);
      unint64_t v21 = *(void *)(v0 + 776);
      char v22 = *(void *)(v0 + 624);
      char v23 = *(void *)(v0 + 592);
      unsigned int v24 = *(void *)(v0 + 584);

      v20(v24, v22, v21);
      unint64_t v25 = _s14descr1005DEB71C15ExchangeRequestVMa(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56LL))(v23, 1LL, 1LL, v25);
      swift_errorRelease(*(void *)(v0 + 544));
      sub_10018709C(v71);
      char v26 = *(void *)(v0 + 936);
      uint64_t v27 = *(void *)(v0 + 928);
      uint64_t v28 = *(void *)(v0 + 904);
      v29 = *(void *)(v0 + 896);
      __int16 v30 = *(void *)(v0 + 872);
      int v31 = *(void *)(v0 + 864);
      __int16 v32 = *(void *)(v0 + 840);
      int v33 = *(void *)(v0 + 832);
      v34 = *(void *)(v0 + 824);
      v47 = *(void *)(v0 + 816);
      v49 = *(void *)(v0 + 808);
      v51 = *(void *)(v0 + 800);
      v53 = *(void *)(v0 + 792);
      v55 = *(void *)(v0 + 768);
      v57 = *(void *)(v0 + 760);
      v59 = *(void *)(v0 + 736);
      v61 = *(void *)(v0 + 728);
      v63 = *(void *)(v0 + 720);
      v65 = *(void *)(v0 + 696);
      v67 = *(void *)(v0 + 688);
      v69 = *(void *)(v0 + 664);
      v72 = *(void *)(v0 + 656);
      swift_task_dealloc(*(void *)(v0 + 944));
      swift_task_dealloc(v26);
      swift_task_dealloc(v27);
      swift_task_dealloc(v28);
      swift_task_dealloc(v29);
      swift_task_dealloc(v30);
      swift_task_dealloc(v31);
      swift_task_dealloc(v32);
      swift_task_dealloc(v33);
      swift_task_dealloc(v34);
      swift_task_dealloc(v47);
      swift_task_dealloc(v49);
      swift_task_dealloc(v51);
      swift_task_dealloc(v53);
      swift_task_dealloc(v55);
      swift_task_dealloc(v57);
      swift_task_dealloc(v59);
      swift_task_dealloc(v61);
      swift_task_dealloc(v63);
      swift_task_dealloc(v65);
      swift_task_dealloc(v67);
      swift_task_dealloc(v69);
      swift_task_dealloc(v72);
      return (*(uint64_t (**)(void, void *))(v0 + 8))(0LL, _swiftEmptyArrayStorage);
    }

    (*(void (**)(void, void))(*(void *)(v0 + 648) + 8LL))(*(void *)(v0 + 656), *(void *)(v0 + 640));
  }

  swift_errorRelease(*(void *)(v0 + 544));
  uint64_t v36 = *(void *)(v0 + 944);
  v37 = *(void *)(v0 + 936);
  v38 = *(void *)(v0 + 928);
  v39 = *(void *)(v0 + 904);
  v40 = *(void *)(v0 + 896);
  v41 = *(void *)(v0 + 872);
  v42 = *(void *)(v0 + 864);
  v43 = *(void *)(v0 + 840);
  v44 = *(void *)(v0 + 832);
  v45 = *(void *)(v0 + 824);
  v46 = *(void *)(v0 + 816);
  v48 = *(void *)(v0 + 808);
  v50 = *(void *)(v0 + 800);
  v52 = *(void *)(v0 + 792);
  v54 = *(void *)(v0 + 768);
  v56 = *(void *)(v0 + 760);
  v58 = *(void *)(v0 + 736);
  v60 = *(void *)(v0 + 728);
  v62 = *(void *)(v0 + 720);
  v64 = *(void *)(v0 + 696);
  v66 = *(void *)(v0 + 688);
  v68 = *(void *)(v0 + 664);
  v70 = *(void *)(v0 + 656);
  sub_10018709C(v71);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  swift_task_dealloc(v52);
  swift_task_dealloc(v54);
  swift_task_dealloc(v56);
  swift_task_dealloc(v58);
  swift_task_dealloc(v60);
  swift_task_dealloc(v62);
  swift_task_dealloc(v64);
  swift_task_dealloc(v66);
  swift_task_dealloc(v68);
  swift_task_dealloc(v70);
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}
}

    uint64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      break;
    }
    if (v14 >= v10)
    {
      char v16 = v11;
    }

    else
    {
      unint64_t v15 = *(void *)(v21 + 8 * v14);
      if (v15) {
        goto LABEL_12;
      }
      uint64_t v19 = v11 + 2;
      char v16 = v11 + 1;
      if (v11 + 2 < v10)
      {
        unint64_t v15 = *(void *)(v21 + 8 * v19);
        if (v15) {
          goto LABEL_22;
        }
        uint64_t v20 = v11 + 3;
        char v16 = v11 + 2;
        if (v11 + 3 < v10)
        {
          unint64_t v15 = *(void *)(v21 + 8 * v20);
          if (v15) {
            goto LABEL_25;
          }
          uint64_t v19 = v11 + 4;
          char v16 = v11 + 3;
          if (v11 + 4 < v10)
          {
            unint64_t v15 = *(void *)(v21 + 8 * v19);
            if (v15)
            {
LABEL_22:
              uint64_t v14 = v19;
LABEL_12:
              unint64_t v7 = (v15 - 1) & v15;
              unsigned int v13 = __clz(__rbit64(v15)) + (v14 << 6);
              uint64_t v11 = v14;
              goto LABEL_8;
            }

            uint64_t v20 = v11 + 5;
            char v16 = v11 + 4;
            if (v11 + 5 < v10)
            {
              unint64_t v15 = *(void *)(v21 + 8 * v20);
              if (v15)
              {
LABEL_25:
                uint64_t v14 = v20;
                goto LABEL_12;
              }

              uint64_t v14 = v11 + 6;
              char v16 = v11 + 5;
              if (v11 + 6 < v10)
              {
                unint64_t v15 = *(void *)(v21 + 8 * v14);
                if (v15) {
                  goto LABEL_12;
                }
                while (v10 - 7 != v11)
                {
                  unint64_t v15 = *(void *)(v1 + 112 + 8 * v11++);
                  if (v15)
                  {
                    uint64_t v14 = v11 + 6;
                    goto LABEL_12;
                  }
                }

                char v16 = v10 - 1;
              }
            }
          }
        }
      }
    }

    unint64_t v7 = 0LL;
    int v31 = 0LL;
    uint64_t v11 = v16;
    memset(v30, 0, sizeof(v30));
  }

  __break(1u);
}

void sub_10000B17C(uint64_t a1, int a2)
{
  io_object_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transfer]);
  id v5 = v3;
  if (a2) {
    uint64_t v4 = 1LL;
  }
  else {
    uint64_t v4 = 2LL;
  }
  [v3 setUserResponse:v4];
}

LABEL_17:
  }
}

  if (v23) {
    free(v23);
  }
  return v17;
}

    char v8 = 0;
  }

LABEL_18:
      }

      else
      {
LABEL_15:
        -[SDAutoUnlockAKSSession setupAuthorizationSession](self, "setupAuthorizationSession");
      }
}

    char v12 = v5 < 1 && v4 > 0;
    if (self->_unansweredCall != v12)
    {
      if (dword_100642038 <= 30
        && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 30LL)))
      {
        unsigned int v13 = "yes";
        if (v12) {
          uint64_t v14 = "no";
        }
        else {
          uint64_t v14 = "yes";
        }
        if (!v12) {
          unsigned int v13 = "no";
        }
        LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent _commonCallCountChanged]",  30LL,  "Unanswered call %s -> %s\n",  v14,  v13);
      }

      self->_unansweredCall = v12;
    }

    if (!userOnCall || self->_userOnCall)
    {
      if (userOnCall || !self->_userOnCall || self->_prefForceOnCall) {
        goto LABEL_50;
      }
      if (dword_100642038 <= 30
        && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 30LL)))
      {
        LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent _commonCallCountChanged]",  30LL,  "Trigger notification for call\n");
      }
    }

    else
    {
      if (self->_prefForceOnCall)
      {
LABEL_50:
        -[SDProxHandoffAgent _update](self, "_update");
        io_object_t v3 = v16;
        goto LABEL_51;
      }

      if (dword_100642038 <= 30
        && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 30LL)))
      {
        LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent _commonCallCountChanged]",  30LL,  "User no longer on call, cleaning up notifications\n");
      }

      uiDevice = self->_uiDevice;
      if (uiDevice) {
        -[SDProxHandoffAgent _uiStopIfNeeded:reason:](self, "_uiStopIfNeeded:reason:", uiDevice, 4LL);
      }
    }

    -[SDProxHandoffAgent _resetAllStates](self, "_resetAllStates");
    goto LABEL_50;
  }

    unint64_t v6 = 0;
  }
}
}
  }

  return v5;
}
}

  if (v30) {
    free(v30);
  }

  return v21;
}

  objc_sync_exit(v7);
}
}
      }

      break;
    case 8uLL:
      unint64_t v15 = streams_log(v6, v7);
      int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_1001329E8(v8, v10);
      }
      goto LABEL_12;
    default:
      if (a4 == 16)
      {
        BOOL v9 = streams_log(v6, v7);
        int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v19 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Stream end encountered, closing streams",  v19,  2u);
        }

  activityLevel = self->_activityLevel;
  if (v11 == activityLevel) {
    goto LABEL_28;
  }
  if (dword_100643B70 <= 40)
  {
    if (dword_100643B70 == -1)
    {
      activityLevel = self->_activityLevel;
    }

    if (activityLevel > 0xE) {
      char v17 = "?";
    }
    else {
      char v17 = off_1005D0678[(char)activityLevel];
    }
    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _activityMonitorCurrentLevelAndNeedsPoll:recentUserActivity:]",  40LL,  "Activity level changed %d (%s) -> %d (%s)\n",  activityLevel,  v17,  v11,  off_1005CFEE8[(char)v11 - 1]);
  }
}

  char v23 = 0LL;
  if (!v11) {
    goto LABEL_24;
  }
LABEL_22:
  if (v12)
  {
    unsigned int v24 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@-%@-%@",  v7,  v11,  v12);
    TypeID = CFDictionaryGetTypeID();
    TypedValue = CFDictionaryGetTypedValue(v9, v24, TypeID, 0LL);
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(TypedValue);

    if (v27) {
      goto LABEL_51;
    }
  }

  unint64_t v6 = *a1;
  unint64_t v7 = v6 >= 4;
  char v8 = v6 - 4;
  if (!v7) {
    char v8 = -1;
  }
  return (v8 + 1);
}

  unint64_t v6 = *a1;
  unint64_t v7 = v6 >= 5;
  char v8 = v6 - 5;
  if (!v7) {
    char v8 = -1;
  }
  return (v8 + 1);
}

  unint64_t v6 = *a1;
  unint64_t v7 = v6 >= 6;
  char v8 = v6 - 6;
  if (!v7) {
    char v8 = -1;
  }
  return (v8 + 1);
}

  unint64_t v6 = *a1;
  unint64_t v7 = v6 >= 3;
  char v8 = v6 - 3;
  if (!v7) {
    char v8 = -1;
  }
  return (v8 + 1);
}

    char v16 = (v21 - 1) & v21;
  }

  __break(1u);
LABEL_31:
  __break(1u);
}

  unint64_t v6 = *a1;
  unint64_t v7 = v6 >= 2;
  char v8 = v6 - 2;
  if (!v7) {
    char v8 = -1;
  }
  return (v8 + 1);
}

  unint64_t v6 = *a1;
  unint64_t v7 = v6 >= 9;
  char v8 = v6 - 9;
  if (!v7) {
    char v8 = -1;
  }
  return (v8 + 1);
}

              v40 = v42;
LABEL_14:
              unsigned int v24 = (v41 - 1) & v41;
              v34 = __clz(__rbit64(v41)) + (v40 << 6);
              v73 = v40;
LABEL_10:
              v35 = *((void *)v71 + 7);
              uint64_t v36 = (void *)(*((void *)v71 + 6) + 16 * v34);
              v37 = (const char *)v36[1];
              *(void *)unint64_t v25 = *v36;
              *((void *)v25 + 1) = v37;
              v38 = v35 + *(void *)(v4 + 72) * v34;
              v39 = sub_100183098(&qword_1006453B0);
              (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(&v25[*(int *)(v39 + 48)], v38, v3);
              (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56LL))( v25,  0LL,  1LL,  v39);
              swift_bridgeObjectRetain(v37);
              goto LABEL_29;
            }
          }
        }
      }

  unint64_t v6 = *a1;
  unint64_t v7 = v6 >= 7;
  char v8 = v6 - 7;
  if (!v7) {
    char v8 = -1;
  }
  return (v8 + 1);
}

  unint64_t v6 = *a1;
  unint64_t v7 = v6 >= 0x10;
  char v8 = v6 - 16;
  if (!v7) {
    char v8 = -1;
  }
  return (v8 + 1);
}

  unint64_t v6 = *a1;
  unint64_t v7 = v6 >= 0xC;
  char v8 = v6 - 12;
  if (!v7) {
    char v8 = -1;
  }
  return (v8 + 1);
}

  unint64_t v6 = *a1;
  unint64_t v7 = v6 >= 0xE;
  char v8 = v6 - 14;
  if (!v7) {
    char v8 = -1;
  }
  return (v8 + 1);
}

  if (v20 < 0) {
    unsigned int v24 = v20;
  }
  else {
    unsigned int v24 = v20 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain((const char *)v20);
  unint64_t v25 = _CocoaArrayWrapper.endIndex.getter(v24);
  uint64_t result = swift_bridgeObjectRelease((const char *)v20);
  if (!v25) {
LABEL_10:
  }
    [v17 invalidate];
  return result;
}

  unint64_t v6 = *a1;
  unint64_t v7 = v6 >= 0xD;
  char v8 = v6 - 13;
  if (!v7) {
    char v8 = -1;
  }
  return (v8 + 1);
}

  char v26 = [a1 pairingID];
  if (!v26)
  {
    if (v11) {
      goto LABEL_24;
    }
LABEL_29:
    if (qword_1006443F8 != -1) {
      swift_once(&qword_1006443F8, sub_100449368);
    }
    v34 = type metadata accessor for Logger(0LL);
    v35 = sub_100186DE4(v34, (uint64_t)qword_100655DD8);
    uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
    v37 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v38 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "Successfully matched pairing key for key in aks manager",  v38,  2u);
      swift_slowDealloc(v38, -1LL, -1LL);
    }

    unint64_t v15 = 1;
    return v15 & 1;
  }

  uint64_t v27 = v26;
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  __int16 v30 = v29;

  if (!v11)
  {
    if (v30)
    {
      swift_bridgeObjectRelease(v30);
      __int16 v32 = 1;
      goto LABEL_34;
    }

    goto LABEL_29;
  }

  if (!v30)
  {
LABEL_24:
    __int16 v32 = 0;
    goto LABEL_34;
  }

  if (v9 == v28 && v11 == v30)
  {
    int v31 = swift_bridgeObjectRelease(v11).n128_u64[0];
LABEL_28:
    swift_bridgeObjectRelease(v30, *(double *)&v31);
    goto LABEL_29;
  }

  int v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v11, v28, v30, 0LL);
  int v31 = swift_bridgeObjectRelease(v30).n128_u64[0];
  __int16 v32 = 0;
  __int16 v30 = v11;
  if ((v33 & 1) != 0) {
    goto LABEL_28;
  }
LABEL_34:
  if (qword_1006443F8 != -1) {
    swift_once(&qword_1006443F8, sub_100449368);
  }
  v39 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v39, (uint64_t)qword_100655DD8);
  swift_bridgeObjectRetain(v11);
  v40 = a1;
  v41 = (os_log_s *)Logger.logObject.getter(v40);
  v42 = static os_log_type_t.error.getter(v41);
  if (os_log_type_enabled(v41, v42))
  {
    v54 = v42;
    v43 = swift_slowAlloc(22LL, -1LL);
    v52 = swift_slowAlloc(64LL, -1LL);
    v57 = v52;
    *(_DWORD *)v43 = 136315394;
    v44 = v11;
    if (v32)
    {
      BOOL v9 = 0xD000000000000015LL;
      v55 = 0LL;
      v56 = (const char *)0xE000000000000000LL;
      _StringGuts.grow(_:)(17LL);
      swift_bridgeObjectRelease((const char *)0xE000000000000000LL);
      v44 = (const char *)0x80000001005046B0LL;
    }

    swift_bridgeObjectRetain(v11, v52);
    v55 = sub_10018CDB4(v9, (unint64_t)v44, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v43 + 4, v43 + 12);
    swift_bridgeObjectRelease_n(v11, 2LL);
    *(void *)&v45 = swift_bridgeObjectRelease(v44).n128_u64[0];
    *(_WORD *)(v43 + 12) = 2080;
    v46 = objc_msgSend(v40, "pairingID", v45);
    if (v46)
    {
      v47 = v46;
      v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      v50 = v49;
    }

    else
    {
      v48 = 0xD000000000000015LL;
      v55 = 0LL;
      v56 = (const char *)0xE000000000000000LL;
      _StringGuts.grow(_:)(17LL);
      swift_bridgeObjectRelease(v56);
      v50 = (const char *)0x80000001005046B0LL;
    }

    v55 = sub_10018CDB4(v48, (unint64_t)v50, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v43 + 14, v43 + 22);

    swift_bridgeObjectRelease(v50);
    _os_log_impl( (void *)&_mh_execute_header,  v41,  v54,  "Not disabling (local pairingID: %s, received pairingID: %s)",  (uint8_t *)v43,  0x16u);
    swift_arrayDestroy(v53, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1LL, -1LL);
    swift_slowDealloc(v43, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v11, 2LL);
  }

  unint64_t v15 = 0;
  return v15 & 1;
}

      v167 = type metadata accessor for Date(0LL);
      v168 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v167 - 8) + 56LL);
      v168(v76, 1LL, 1LL, v167);
      v168(&v76[v57[5]], 1LL, 1LL, v167);
      v168(&v76[v57[6]], 1LL, 1LL, v167);
      v168(&v76[v57[7]], 1LL, 1LL, v167);
      v168(&v76[v57[8]], 1LL, 1LL, v167);
      v168(&v76[v57[9]], 1LL, 1LL, v167);
      v168(&v76[v57[10]], 1LL, 1LL, v167);
      v168(&v76[v57[11]], 1LL, 1LL, v167);
      v168(&v76[v57[12]], 1LL, 1LL, v167);
      v76[v57[13]] = 0;
      v168(&v76[v57[14]], 1LL, 1LL, v167);
      v168(&v76[v57[15]], 1LL, 1LL, v167);
      v168(&v76[v57[16]], 1LL, 1LL, v167);
      v168(&v76[v57[17]], 1LL, 1LL, v167);
      v169 = &v76[v57[18]];
      *(_DWORD *)v169 = 0;
      v169[4] = 1;
      v76[v57[19]] = 2;
      v170 = &v76[v57[20]];
      *(void *)v170 = 0LL;
      *((void *)v170 + 1) = 0LL;
      v171 = &v76[v57[21]];
      *(void *)v171 = 0LL;
      *((void *)v171 + 1) = 0LL;
      v172 = v477;
      sub_100298F74((uint64_t)v76, v477);
      v173 = (int *)_s6UnpairV4FlowVMa(0LL);
      v494 = (uint64_t)v173;
      v495 = (char **)&off_1005D80C8;
      v174 = sub_1001A4B04(&v493);
      v175 = (void *)((char *)v174 + v173[5]);
      v175[3] = v475;
      v175[4] = &off_1005D80B0;
      v176 = sub_1001A4B04(v175);
      v177 = _s6UnpairV23InitialInitiatorContextVMa;
      goto LABEL_52;
    case 12LL:
      v154 = (uint64_t)v80;
      v198 = type metadata accessor for Date(0LL);
      v199 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v198 - 8) + 56LL);
      if ((v85 & 1) != 0)
      {
        v199(v60, 1LL, 1LL, v198);
        v199(&v60[v57[5]], 1LL, 1LL, v198);
        v199(&v60[v57[6]], 1LL, 1LL, v198);
        v199(&v60[v57[7]], 1LL, 1LL, v198);
        v199(&v60[v57[8]], 1LL, 1LL, v198);
        v199(&v60[v57[9]], 1LL, 1LL, v198);
        v199(&v60[v57[10]], 1LL, 1LL, v198);
        v199(&v60[v57[11]], 1LL, 1LL, v198);
        v199(&v60[v57[12]], 1LL, 1LL, v198);
        v60[v57[13]] = 0;
        v199(&v60[v57[14]], 1LL, 1LL, v198);
        v199(&v60[v57[15]], 1LL, 1LL, v198);
        v199(&v60[v57[16]], 1LL, 1LL, v198);
        v199(&v60[v57[17]], 1LL, 1LL, v198);
        v200 = &v60[v57[18]];
        *(_DWORD *)v200 = 0;
        v200[4] = 1;
        v60[v57[19]] = 2;
        v201 = &v60[v57[20]];
        *(void *)v201 = 0LL;
        *((void *)v201 + 1) = 0LL;
        v202 = &v60[v57[21]];
        *(void *)v202 = 0LL;
        *((void *)v202 + 1) = 0LL;
        v203 = (uint64_t)v463;
        *v463 = _swiftEmptyArrayStorage;
        if (qword_100644378 != -1) {
          swift_once(&qword_100644378, sub_100429B8C);
        }
        v204 = type metadata accessor for Logger(0LL);
        v205 = sub_100186DE4(v204, (uint64_t)qword_100654F08);
        v206 = (os_log_s *)Logger.logObject.getter(v205);
        v207 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v206, v207))
        {
          v208 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)v208 = 0;
          _os_log_impl((void *)&_mh_execute_header, v206, v207, "Start key check flow", v208, 2u);
          swift_slowDealloc(v208, -1LL, -1LL);
        }

        v209 = v461;
        sub_1001A4B40( (uint64_t)v60,  v203 + *(int *)(v461 + 20),  type metadata accessor for SDAuthenticationSessionMetrics);
        v210 = (int *)_s8KeyCheckV4FlowVMa(0LL);
        v494 = (uint64_t)v210;
        v495 = (char **)&off_1005E1810;
        v211 = sub_1001A4B04(&v493);
        v212 = (void *)((char *)v211 + v210[5]);
        v212[3] = v209;
        v212[4] = &off_1005E17F8;
        v213 = sub_1001A4B04(v212);
        sub_1001A4B84(v203, (uint64_t)v213, _s8KeyCheckV17InitialKeyContextVMa);
        sub_1001A4B84(v154, (uint64_t)v211, type metadata accessor for SDAuthenticationCommonOperationInput);
        *(void *)((char *)v211 + v210[6]) = _swiftEmptyArrayStorage;
        *(void *)((char *)v211 + v210[7]) = _swiftEmptyArrayStorage;
        v135 = v203;
        v136 = _s8KeyCheckV17InitialKeyContextVMa;
      }

      else
      {
        v199(v76, 1LL, 1LL, v198);
        v199(&v76[v57[5]], 1LL, 1LL, v198);
        v199(&v76[v57[6]], 1LL, 1LL, v198);
        v199(&v76[v57[7]], 1LL, 1LL, v198);
        v199(&v76[v57[8]], 1LL, 1LL, v198);
        v199(&v76[v57[9]], 1LL, 1LL, v198);
        v199(&v76[v57[10]], 1LL, 1LL, v198);
        v199(&v76[v57[11]], 1LL, 1LL, v198);
        v199(&v76[v57[12]], 1LL, 1LL, v198);
        v76[v57[13]] = 0;
        v199(&v76[v57[14]], 1LL, 1LL, v198);
        v199(&v76[v57[15]], 1LL, 1LL, v198);
        v199(&v76[v57[16]], 1LL, 1LL, v198);
        v199(&v76[v57[17]], 1LL, 1LL, v198);
        v299 = &v76[v57[18]];
        *(_DWORD *)v299 = 0;
        v299[4] = 1;
        v76[v57[19]] = 2;
        v300 = &v76[v57[20]];
        *(void *)v300 = 0LL;
        *((void *)v300 + 1) = 0LL;
        v301 = &v76[v57[21]];
        *(void *)v301 = 0LL;
        *((void *)v301 + 1) = 0LL;
        v302 = &v485[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_securityManager];
        swift_beginAccess( &v485[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_securityManager],  &v489,  0LL,  0LL);
        v303 = *sub_10019A708(v302, *((void *)v302 + 3))
             + OBJC_IVAR____TtC16DaemoniOSLibrary31SDAuthenticationSecurityManager_lastUnlockDate;
        swift_beginAccess(v303, v492, 0LL, 0LL);
        v304 = v303;
        v305 = v472;
        sub_1001915A4(v304, v472, &qword_1006457E8);
        v172 = v458;
        sub_100429C1C((uint64_t)v76, v305, v458);
        v173 = (int *)_s8KeyCheckV4FlowVMa(0LL);
        v494 = (uint64_t)v173;
        v495 = (char **)&off_1005E1810;
        v174 = sub_1001A4B04(&v493);
        v306 = (void *)((char *)v174 + v173[5]);
        v306[3] = v457;
        v306[4] = &off_1005E17E0;
        v176 = sub_1001A4B04(v306);
        v177 = _s8KeyCheckV18InitialLockContextVMa;
LABEL_52:
        sub_1001A4B84((uint64_t)v172, (uint64_t)v176, v177);
        sub_1001A4B84(v154, (uint64_t)v174, type metadata accessor for SDAuthenticationCommonOperationInput);
        *(void *)((char *)v174 + v173[6]) = _swiftEmptyArrayStorage;
        *(void *)((char *)v174 + v173[7]) = _swiftEmptyArrayStorage;
        v135 = (uint64_t)v172;
        v136 = v177;
      }

      goto LABEL_58;
    default:
      goto LABEL_100;
  }

    return;
  }

  char v22 = [v14 sessionID];
  if (!v22)
  {
LABEL_6:
    if (qword_100644408 == -1)
    {
LABEL_7:
      v29 = type metadata accessor for Logger(0LL);
      __int16 v30 = sub_100186DE4(v29, (uint64_t)qword_100656748);
      int v31 = (os_log_s *)Logger.logObject.getter(v30);
      __int16 v32 = static os_log_type_t.error.getter(v31);
      if (os_log_type_enabled(v31, v32))
      {
        int v33 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)int v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Message does not have a session ID", v33, 2u);
        swift_slowDealloc(v33, -1LL, -1LL);

        return;
      }

      goto LABEL_17;
    }

void sub_10000B938( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10000B960(uint64_t a1)
{
  uint64_t v2 = airdrop_ui_log();
  io_object_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "User clicked on Open button", v7, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained transfer]);
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 completedURLs]);
  [WeakRetained openURLs:v6];
}

uint64_t sub_10000BC94(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_10000C564(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleIdentifier]);
  if (![v4 containsObject:v5])
  {
    if ([*(id *)(a1 + 40) handlingAppInstalled])
    {
    }

    else
    {
      unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleIdentifier]);
      unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) handlingAppBundleID]);
      unsigned int v8 = [v6 isEqualToString:v7];

      if (v8) {
        goto LABEL_6;
      }
    }

    id v9 = 0LL;
    goto LABEL_8;
  }

LABEL_6:
  id v9 = v3;
LABEL_8:

  return v9;
}

LABEL_27:
        -[SDAirDropHandler logReceiverBundleID:forAppProxy:andURL:]( v30,  "logReceiverBundleID:forAppProxy:andURL:",  0LL,  0LL,  v32);
        int v31 = (char *)v31 + 1;
      }

      while (v29 != v31);
      v46 = -[os_log_s countByEnumeratingWithState:objects:count:]( v18,  "countByEnumeratingWithState:objects:count:",  &v59,  v63,  16LL);
      v29 = v46;
      char v26 = 1;
      if (!v46)
      {
LABEL_35:
        unint64_t v6 = v51;
        goto LABEL_37;
      }
    }
  }

  char v26 = 0;
LABEL_37:
  unint64_t v7 = v52;
LABEL_38:

  return v26;
}

    if (!v12) {
      return;
    }
    v42 = auto_unlock_log(v41);
    v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
      sub_10002AAFC();
    }

    v44 = SFAutoUnlockErrorDomain;
    v45 = v62;
    v63 = NSLocalizedDescriptionKey;
    v64 = @"Request failure";
    v46 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v64,  &v63,  1LL));
    v47 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v44,  v45,  v46));
    -[SDAutoUnlockPairingLockSession notifyDelegateWithError:](self, "notifyDelegateWithError:", v47);

LABEL_15:
    return;
  }

  v48 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingLockSession sessionCreatedMessage](self, "sessionCreatedMessage"));
  v49 = [v48 ltkSyncing];

  if (v49)
  {
    -[SDAutoUnlockPairingLockSession restartLTKTimer](self, "restartLTKTimer");
  }

  else
  {
    v51 = auto_unlock_log(v50);
    v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
    {
      v53 = @"NO";
      if (v27) {
        v54 = @"YES";
      }
      else {
        v54 = @"NO";
      }
      if (v24) {
        v53 = @"YES";
      }
      *(_DWORD *)buf = 138412546;
      v66 = v54;
      v67 = 2112;
      v68 = v53;
      _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "LTK invalid (exists: %@, hash matches: %@)",  buf,  0x16u);
    }

    if (v27) {
      v55 = 193LL;
    }
    else {
      v55 = 148LL;
    }
    v62 = v55;
    v56 = SFAutoUnlockErrorDomain;
    v57 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingLockSession userInfoForMissingLTK](self, "userInfoForMissingLTK"));
    v58 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v56,  v55,  v57));
    -[SDAutoUnlockPairingLockSession notifyDelegateWithError:](self, "notifyDelegateWithError:", v58);
  }
}
}
}
}

  uint64_t v11 = v2->_idsIsSignedInCache != 0;
  objc_sync_exit(v2);

  return v11;
}

    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    sub_100187094(v49);
    return swift_release(v55);
  }

  sub_1003A74F0(v20, a4 & 1);
  char v22 = sub_1003AD484((uint64_t)v14);
  if ((v21 & 1) == (v23 & 1))
  {
    char v17 = v22;
    if ((v21 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    sub_100187058((uint64_t)v46, (uint64_t)v45);
    sub_10018709C(v46);

    unsigned int v24 = (void *)(*(void *)(*(void *)a5 + 56LL) + 32 * v17);
    sub_10018709C(v24);
    sub_100186D8C(v45, v24);
    goto LABEL_16;
  }

      unint64_t v21 = 0LL;
      uint64_t v27 = 1LL;
      char v17 = v32;
      goto LABEL_4;
    }

    uint64_t v14 = (v24 - 1) & v24;
    char v22 = __clz(__rbit64(v24)) + (v25 << 6);
    char v17 = v25;
LABEL_28:
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))( v8,  *(void *)(v37 + 48) + *(void *)(v3 + 72) * v22,  v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v8, v2);
    swift_dynamicCast(v41, v6, v2, &type metadata for AnyHashable, 7LL);
    v38 = v41[0];
    v39 = v41[1];
    v40 = v42;
    uint64_t result = AnyHashable._rawHashValue(seed:)(v10[5]);
    uint64_t v27 = -1LL << *((_BYTE *)v10 + 32);
    uint64_t v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1LL << v28) & ~*(void *)&v15[8 * (v28 >> 6)]) != 0)
    {
      char v18 = __clz(__rbit64((-1LL << v28) & ~*(void *)&v15[8 * (v28 >> 6)])) | v28 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      __int16 v30 = 0;
      int v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        __int16 v32 = v29 == v31;
        if (v29 == v31) {
          v29 = 0LL;
        }
        v30 |= v32;
        int v33 = *(void *)&v15[8 * v29];
      }

      while (v33 == -1);
      char v18 = __clz(__rbit64(~v33)) + (v29 << 6);
    }

    *(void *)&v15[(v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v18;
    uint64_t v19 = v10[6] + 40 * v18;
    uint64_t v20 = v39;
    *(_OWORD *)uint64_t v19 = v38;
    *(_OWORD *)(v19 + 16) = v20;
    *(void *)(v19 + 32) = v40;
    ++v10[2];
  }

  char v26 = v17 + 5;
  if (v17 + 5 >= v35)
  {
LABEL_37:
    swift_release(v10);
    sub_100187094(v37);
    return (Swift::Int)v10;
  }

  unsigned int v24 = *(void *)(v36 + 8 * v26);
  if (v24)
  {
    unint64_t v25 = v17 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    unint64_t v25 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v25 >= v35) {
      goto LABEL_37;
    }
    unsigned int v24 = *(void *)(v36 + 8 * v25);
    ++v26;
    if (v24) {
      goto LABEL_27;
    }
  }

  swift_release(v3);
  LOWORD(v1) = v34;
  if ((v34 & 0x80) == 0) {
    goto LABEL_32;
  }
  if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0) {
    goto LABEL_41;
  }
LABEL_29:
  unint64_t v25 = *((void *)v13 + 2);
  unsigned int v24 = *((void *)v13 + 3);
  if (v25 >= v24 >> 1) {
    unsigned int v13 = sub_10018BC54((char *)(v24 > 1), v25 + 1, 1, v13);
  }
  *((void *)v13 + 2) = v25 + 1;
  char v26 = &v13[16 * v25];
  *((void *)v26 + 4) = 0x74616E696769726FLL;
  *((void *)v26 + 5) = 0xEA0000000000726FLL;
LABEL_32:
  if ((v1 & 0x100) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0) {
      unsigned int v13 = sub_10018BC54(0LL, *((void *)v13 + 2) + 1LL, 1, v13);
    }
    uint64_t v28 = *((void *)v13 + 2);
    uint64_t v27 = *((void *)v13 + 3);
    if (v28 >= v27 >> 1) {
      unsigned int v13 = sub_10018BC54((char *)(v27 > 1), v28 + 1, 1, v13);
    }
    *((void *)v13 + 2) = v28 + 1;
    v29 = &v13[16 * v28];
    *((void *)v29 + 4) = 0x6665524D4341LL;
    *((void *)v29 + 5) = 0xE600000000000000LL;
  }

  __int16 v30 = sub_100183098((uint64_t *)&unk_10064D7D0);
  int v31 = sub_1001FF494();
  __int16 v32 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v30, v31);
  swift_bridgeObjectRelease(v13);
  return v32;
}

    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    char v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }

    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

  v68 = *(void *)(v0 + 136);
  v69 = *(void *)(v0 + 144);
  v71 = *(void *)(v0 + 120);
  v70 = *(void *)(v0 + 128);
  v72 = *(void *)(v0 + 96);
  v74 = *(void *)(v0 + 64);
  v73 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 168));
  swift_task_dealloc(v69);
  swift_task_dealloc(v68);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

  __break(1u);
  return result;
}

  v34 = *(void *)(v0 + 848);
  v35 = *(char **)(v0 + 712);
  uint64_t v36 = *(int **)(v0 + 704);
  v37 = *(void *)(v0 + 696);
  v38 = *(void *)(v0 + 688);
  v39 = *(void *)(v0 + 680);
  v40 = *(void *)(v0 + 320);
  v41 = *(void *)(v0 + 328);
  *(void *)v35 = *(void *)(v0 + 840);
  *((void *)v35 + 1) = v34;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v38 + 32))(&v35[v36[5]], v37, v39, v27);
  v42 = &v35[v36[6]];
  *(void *)v42 = v81;
  v42[8] = 0;
  v43 = &v35[v36[7]];
  *(void *)v43 = v79;
  *((void *)v43 + 1) = v28;
  v44 = &v35[v36[8]];
  *(void *)v44 = v31;
  *((void *)v44 + 1) = v32;
  v45 = &v35[v36[9]];
  *(void *)v45 = v75;
  *((void *)v45 + 1) = v29;
  v46 = (uint64_t *)&v35[v36[10]];
  *v46 = v84;
  v46[1] = (uint64_t)v82;
  v47 = &v35[v36[11]];
  *(void *)v47 = v74;
  *((void *)v47 + 1) = v30;
  v48 = &v35[v36[12]];
  *(void *)v48 = v77;
  *((void *)v48 + 1) = v78;
  v35[v36[13]] = v85 & 1;
  v49 = (uint64_t *)&v35[v36[14]];
  *v49 = v40;
  v49[1] = v41;
  v35[v36[15]] = 1;
  v35[v36[16]] = 1;
  if (v83 && *(void *)(v0 + 392) >> 60 != 15LL && (v81 & 0x2000) != 0)
  {
    v50 = *(const char **)(v0 + 872);
    v51 = *(const char **)(v0 + 848);
    *(void *)&v52 = swift_bridgeObjectRetain(v29).n128_u64[0];
    *(void *)&v53 = swift_bridgeObjectRetain(v50, v52).n128_u64[0];
    swift_bridgeObjectRetain(v51, v53);
    sub_1001A4C04(v40, v41);
    v54 = dword_10064A2EC;
    swift_bridgeObjectRetain(v82);
    v55 = (void *)swift_task_alloc(v54);
    *(void *)(v0 + 912) = v55;
    *v55 = v0;
    v55[1] = sub_10026247C;
    return sub_100265230();
  }

  else
  {
    v57 = *(const char **)(v0 + 848);
    *(void *)&v58 = swift_bridgeObjectRetain(v29).n128_u64[0];
    swift_bridgeObjectRetain(v57, v58);
    sub_1001A4C04(v40, v41);
    swift_bridgeObjectRetain(v82);
    v60 = (os_log_s *)Logger.logObject.getter(v59);
    v61 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v60, v61))
    {
      v62 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v62 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v60,  v61,  "No receiver deviceIRKData or contactID or unsupported client - skipping IDENTITY-SHARE",  v62,  2u);
      swift_slowDealloc(v62, -1LL, -1LL);
    }

    v64 = (os_log_s *)Logger.logObject.getter(v63);
    v65 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v64, v65))
    {
      v66 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v66 = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "Finished DISCOVER", v66, 2u);
      swift_slowDealloc(v66, -1LL, -1LL);
    }

    v67 = *(void *)(v0 + 432);
    v68 = *(_BYTE *)(v0 + 440);
    v69 = *(void *)(v0 + 448);
    v70 = *(void *)(v0 + 456);
    v71 = (void *)swift_task_alloc(dword_10064A2E4);
    *(void *)(v0 + 936) = v71;
    *v71 = v0;
    v71[1] = sub_100262834;
    v72 = *(void *)(v0 + 872);
    v73 = *(void *)(v0 + 864);
    v86[12] = v69;
    v86[13] = v70;
    return sub_10026329C(v0 + 472, v84, (uint64_t)v82, v73, v72, v85 & 1, v67, v68);
  }

    unint64_t v6 = (v14 - 1) & v14;
    char v12 = __clz(__rbit64(v14)) + (v15 << 6);
    id v9 = v15;
LABEL_28:
    char v17 = *(void **)(*(void *)(a1 + 48) + 8 * v12);
    sub_1001CE1D0(*(void *)(a1 + 56) + 40 * v12, (uint64_t)v38);
    v37 = v17;
    v34[0] = v38[0];
    v34[1] = v38[1];
    v35 = v39;
    *(void *)&v36[0] = v17;
    char v18 = v17;
    swift_dynamicCast((char *)v36 + 8, v34, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, 7LL);
    uint64_t v19 = *(void *)&v36[0];
    sub_100186D8C((_OWORD *)((char *)v36 + 8), v33);
    sub_100186D8C(v33, v36);
    sub_100186D8C(v36, v34);
    Hasher.init(_seed:)(&v32);
    type metadata accessor for CFString(0LL);
    unint64_t v21 = v20;
    char v22 = sub_100183F14( &qword_100645530,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1004CCC0C);
    _CFObject.hash(into:)(&v32, v21, v22);
    uint64_t result = Hasher._finalize()();
    char v23 = -1LL << v3[32];
    unsigned int v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1LL << v24) & ~*(void *)&v7[8 * (v24 >> 6)]) != 0)
    {
      int v10 = __clz(__rbit64((-1LL << v24) & ~*(void *)&v7[8 * (v24 >> 6)])) | v24 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        uint64_t v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0LL;
        }
        v26 |= v28;
        v29 = *(void *)&v7[8 * v25];
      }

      while (v29 == -1);
      int v10 = __clz(__rbit64(~v29)) + (v25 << 6);
    }

    *(void *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v10;
    *(void *)(*((void *)v3 + 6) + 8 * v10) = v19;
    uint64_t result = (uint64_t)sub_100186D8C(v34, (_OWORD *)(*((void *)v3 + 7) + 32 * v10));
    ++*((void *)v3 + 2);
  }

  char v16 = v9 + 5;
  if (v9 + 5 >= v30)
  {
LABEL_37:
    swift_release(v3);
    sub_100187094(a1);
    return (uint64_t)v3;
  }

  uint64_t v14 = *(void *)(v31 + 8 * v16);
  if (v14)
  {
    unint64_t v15 = v9 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    unint64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v15 >= v30) {
      goto LABEL_37;
    }
    uint64_t v14 = *(void *)(v31 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }

    unint64_t v6 = (v15 - 1) & v15;
    unsigned int v13 = __clz(__rbit64(v15)) + (v16 << 6);
    id v9 = v16;
LABEL_28:
    char v18 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v13);
    uint64_t v20 = *v18;
    uint64_t v19 = (const char *)v18[1];
    sub_100187058(*(void *)(a1 + 56) + 32 * v13, (uint64_t)v41);
    *(void *)&v40 = v20;
    *((void *)&v40 + 1) = v19;
    v38[2] = v40;
    v39[0] = v41[0];
    v39[1] = v41[1];
    *(void *)&v38[0] = v20;
    *((void *)&v38[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v30, v38, &type metadata for String, &type metadata for AnyHashable, 7LL);
    sub_100186D8C(v39, v33);
    v34 = v30;
    v35 = v31;
    uint64_t v36 = v32;
    sub_100186D8C(v33, v37);
    __int16 v30 = v34;
    int v31 = v35;
    __int16 v32 = v36;
    sub_100186D8C(v37, v38);
    sub_100186D8C(v38, &v34);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v3[5]);
    unint64_t v21 = -1LL << *((_BYTE *)v3 + 32);
    char v22 = result & ~v21;
    char v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)&v7[8 * (v22 >> 6)]) != 0)
    {
      int v10 = __clz(__rbit64((-1LL << v22) & ~*(void *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unsigned int v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        char v26 = v23 == v25;
        if (v23 == v25) {
          char v23 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)&v7[8 * v23];
      }

      while (v27 == -1);
      int v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v10;
    uint64_t v11 = v3[6] + 40 * v10;
    *(_OWORD *)uint64_t v11 = v30;
    *(_OWORD *)(v11 + 16) = v31;
    *(void *)(v11 + 32) = v32;
    uint64_t result = (uint64_t)sub_100186D8C(&v34, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }

  char v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_100187094(a1);
    return (uint64_t)v3;
  }

  unint64_t v15 = *(void *)(v29 + 8 * v17);
  if (v15)
  {
    char v16 = v9 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    char v16 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v16 >= v28) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v29 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_27;
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  swift_release(v14);
  swift_bridgeObjectRelease((const char *)v14);
  return v20 & 1;
}

  swift_release(v14);
  swift_bridgeObjectRelease((const char *)v14);
  return v20 & 1;
}

  __break(1u);
}

            sub_10002FA6C((uint64_t)@"BonjourBrowse", (uint64_t)@"Stop", v7, v4);

            unint64_t v15 = *(void *)(v3 + v1);
            *(void *)(v3 + v1) = 0LL;
            swift_release(v15);
            char v16 = *(void **)((char *)v5 + v3);
            *(uint64_t *)((char *)v5 + v3) = 0LL;

            unint64_t v7 = v3
               + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropBonjourBrowser_serviceNamesToCurrentDiscoverConnections;
            swift_beginAccess( v3 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropBonjourBrowser_serviceNamesToCurrentDiscoverConnections,  v42,  1LL,  0LL);
            v37 = (uint64_t *)v7;
            char v17 = *(void *)v7;
            char v18 = *(void *)v7 + 64LL;
            uint64_t v19 = 1LL << *(_BYTE *)(*(void *)v7 + 32LL);
            uint64_t v20 = -1LL;
            if (v19 < 64) {
              uint64_t v20 = ~(-1LL << v19);
            }
            unint64_t v21 = v20 & *(void *)(*(void *)v7 + 64LL);
            unsigned int v1 = (unint64_t)(v19 + 63) >> 6;
            swift_bridgeObjectRetain(*(void *)v7);
            char v22 = 0LL;
            id v5 = &OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropBonjourDiscoverConnection_discoverConnection;
            uint64_t v2 = &OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropBonjourDiscoverConnection_identityShareConnection;
            while (v21)
            {
              while (1)
              {
                char v23 = __clz(__rbit64(v21));
                v21 &= v21 - 1;
                unsigned int v24 = v23 | (v22 << 6);
LABEL_49:
                uint64_t v4 = *(void *)(*(void *)(v17 + 56) + 8 * v24);
                uint64_t v28 = *(void *)(v4
                                + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropBonjourDiscoverConnection_discoverConnection);
                v29 = (id)v4;
                if (v28)
                {
                  swift_retain(v28);
                  NWConnection.forceCancel()();
                  swift_release(v28);
                }

                unint64_t v7 = *(void *)(v4
                               + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropBonjourDiscoverConnection_identityShareConnection);
                if (!v7) {
                  break;
                }
                swift_retain(*(void *)(v4
                                       + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropBonjourDiscoverConnection_identityShareConnection));
                NWConnection.forceCancel()();

                swift_release(v7);
                if (!v21) {
                  goto LABEL_33;
                }
              }
            }

  __break(1u);
}

  if (v23 < 0) {
    v50 = v23;
  }
  else {
    v50 = v23 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain((const char *)v23);
  uint64_t v27 = _CocoaArrayWrapper.endIndex.getter(v50);
  swift_bridgeObjectRelease((const char *)v23);
  if (!v27) {
    goto LABEL_31;
  }
LABEL_10:
  swift_bridgeObjectRetain((const char *)v23);
  *(void *)&uint64_t v28 = swift_beginAccess(v15, v81, 33LL, 0LL).n128_u64[0];
  if (v23)
  {
    swift_bridgeObjectRetain(v13, v28);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v15);
    v79 = *v15;
    *unint64_t v15 = 0x8000000000000000LL;
    sub_1003B3AC4(v23, v14, v13, isUniquelyReferenced_nonNull_native);
    __int16 v30 = (const char *)*v15;
    *unint64_t v15 = v79;
    *(void *)&int v31 = swift_bridgeObjectRelease(v13).n128_u64[0];
    swift_bridgeObjectRelease(v30, v31);
    swift_endAccess(v81);
LABEL_33:
    swift_bridgeObjectRelease((const char *)v23);
LABEL_55:
    sub_1003964DC();

    return;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

    char v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    char v16 = 16 * v15;
    char v17 = (void *)(*(void *)(v2 + 48) + v16);
    char v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    const char *v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  char v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    id v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    id v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

    uint64_t v19 = (v25 - 1) & v25;
    char v22 = __clz(__rbit64(v25)) + (v16 << 6);
LABEL_12:
    char v23 = *(void *)(v6 + 72) * v22;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(void *)(v9 + 48) + v23, v5);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))( *(void *)(v11 + 48) + v23,  v8,  v5);
  }

  char v26 = v24 + 3;
  if (v26 >= v20)
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v9);
    uint64_t v4 = v28;
    goto LABEL_30;
  }

  unint64_t v25 = *(void *)(v13 + 8 * v26);
  if (v25)
  {
    char v16 = v26;
    goto LABEL_27;
  }

  while (1)
  {
    char v16 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v16 >= v20) {
      goto LABEL_28;
    }
    unint64_t v25 = *(void *)(v13 + 8 * v16);
    ++v26;
    if (v25) {
      goto LABEL_27;
    }
  }

    char v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    char v16 = 16 * v15;
    char v17 = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = (void *)sub_10019BA8C(v17, *((unint64_t *)&v17 + 1));
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    id v9 = v20;
    goto LABEL_27;
  }

  while (1)
  {
    id v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }

    char v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }

  char v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  char v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    id v9 = v18;
    goto LABEL_27;
  }

  while (1)
  {
    id v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    char v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }

    char v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    char v16 = 8 * v15;
    char v17 = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = (void *)swift_retain(v17);
  }

  uint64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    id v9 = v20;
    goto LABEL_27;
  }

  while (1)
  {
    id v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }

    uint64_t v20 = (v26 - 1) & v26;
    char v23 = __clz(__rbit64(v26)) + (v17 << 6);
LABEL_12:
    unsigned int v24 = *(void *)(v7 + 72) * v23;
    sub_1001A4B84(*(void *)(v10 + 48) + v24, (uint64_t)v9, a1);
    uint64_t result = (void *)sub_1001A4B40((uint64_t)v9, *(void *)(v12 + 48) + v24, a1);
  }

  uint64_t v27 = v25 + 3;
  if (v27 >= v21)
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v10);
    id v5 = v29;
    goto LABEL_30;
  }

  char v26 = *(void *)(v14 + 8 * v27);
  if (v26)
  {
    char v17 = v27;
    goto LABEL_27;
  }

  while (1)
  {
    char v17 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v17 >= v21) {
      goto LABEL_28;
    }
    char v26 = *(void *)(v14 + 8 * v17);
    ++v27;
    if (v26) {
      goto LABEL_27;
    }
  }

    char v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    char v16 = 32 * v15;
    char v17 = (void *)(*(void *)(v2 + 48) + v16);
    char v18 = (const char *)v17[1];
    uint64_t v19 = v17[2];
    uint64_t v20 = (const char *)v17[3];
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    const char *v21 = *v17;
    v21[1] = v18;
    void v21[2] = v19;
    v21[3] = v20;
    *(void *)&char v22 = swift_bridgeObjectRetain(v18).n128_u64[0];
    swift_bridgeObjectRetain(v20, v22);
  }

  unint64_t v25 = v23 + 3;
  if (v25 >= v13) {
    goto LABEL_28;
  }
  unsigned int v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    id v9 = v25;
    goto LABEL_27;
  }

  while (1)
  {
    id v9 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unsigned int v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_27;
    }
  }

    unsigned int v13 = (v20 - 1) & v20;
    char v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    char v17 = 8 * v16;
    char v18 = *(void **)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    uint64_t result = v18;
  }

  unint64_t v21 = v19 + 3;
  if (v21 >= v14) {
    goto LABEL_28;
  }
  uint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int v10 = v21;
    goto LABEL_27;
  }

  while (1)
  {
    int v10 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    uint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_27;
    }
  }

    char v17 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v19 << 6);
LABEL_10:
    [*(id *)(*(void *)(v14 + 56) + 8 * v21) stateDidChange];
  }

  unsigned int v24 = v22 + 4;
  if (v24 < v18)
  {
    char v23 = *(void *)&v0[8 * v24];
    if (!v23)
    {
      while (1)
      {
        uint64_t v19 = v24 + 1;
        if (__OFADD__(v24, 1LL)) {
          goto LABEL_30;
        }
        if (v19 >= v18) {
          return swift_release(v14);
        }
        char v23 = *(void *)&v0[8 * v19];
        ++v24;
        if (v23) {
          goto LABEL_27;
        }
      }
    }

    uint64_t v19 = v24;
    goto LABEL_27;
  }

  return swift_release(v14);
}

uint64_t sub_10000CEE0(uint64_t a1, uint64_t a2)
{
  if (qword_100656CD0 != -1) {
    dispatch_once(&qword_100656CD0, &stru_1005CB0E0);
  }
  off_1006413B8 = (uint64_t (*)())dlsym((void *)qword_100656CD8, "ADClientAddValueForScalarKey");
  return ((uint64_t (*)(uint64_t, uint64_t))off_1006413B8)(a1, a2);
}

void sub_10000CF50(id a1)
{
  qword_100656CD8 = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/AggregateDictionary.framework/AggregateDictionary",  2);
}

void sub_10000CF78( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10000CF88( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10000CFBC(void *a1, os_log_s *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a1 path]);
  int v4 = 138412290;
  id v5 = v3;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "failed to remove item at %@",  (uint8_t *)&v4,  0xCu);
}

void sub_10000D050( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

LABEL_14:
      }

      uint64_t v11 = [v9 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }

    while (v11);
  }
}

  if (v10) {
    free(v10);
  }
  return v5;
}

          if (!v22) {
            return;
          }
          uint64_t v27 = auto_unlock_log(v26);
          uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
            sub_10002AAFC();
          }

          v29 = SFAutoUnlockErrorDomain;
          __int16 v30 = *(void *)buf;
          v42 = NSLocalizedDescriptionKey;
          v43 = @"Request failure";
          int v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v43,  &v42,  1LL));
          __int16 v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v29,  v30,  v31));
          -[SDAutoUnlockPairingLockSession notifyDelegateWithError:](self, "notifyDelegateWithError:", v32);

          goto LABEL_29;
        }

        if (*(void *)buf == 148LL)
        {
          char v22 = (__CFString *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingLockSession userInfoForMissingLTK](self, "userInfoForMissingLTK"));
        }

        else
        {
          v44 = NSLocalizedDescriptionKey;
          v45 = @"Invalid AKS session";
          char v22 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v45,  &v44,  1LL));
          v38 = auto_unlock_log(v22);
          v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
            sub_10002AB5C();
          }
        }

        uint64_t v36 = SFAutoUnlockErrorDomain;
        v37 = *(void *)buf;
      }

      else
      {
        int v33 = auto_unlock_log(v11);
        v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
          sub_10002AB88();
        }

        v35 = SFAutoUnlockErrorDomain;
        char v22 = (__CFString *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingLockSession userInfoForMissingLTK](self, "userInfoForMissingLTK"));
        uint64_t v36 = v35;
        v37 = 148LL;
      }

      int v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v36,  v37,  v22));
      -[SDAutoUnlockPairingLockSession notifyDelegateWithError:](self, "notifyDelegateWithError:", v31);
LABEL_29:

      return;
    }

    *(void *)buf = 155LL;
    uint64_t v20 = (id)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingLockSession sessionCreatedMessage](self, "sessionCreatedMessage"));
    else {
      char v23 = @"NO";
    }
    unsigned int v24 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingLockSession sessionCreatedMessage](self, "sessionCreatedMessage"));
    unint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 token]);
    char v22 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Auto Unlock: Missing information for escrow session (has token = %@, token = %@)",  v23,  v25));

    goto LABEL_14;
  }

  int v4 = auto_unlock_log(v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Pairing session canceled for session request",  buf,  2u);
  }
}

    uint64_t v19 = (void *)v40;
LABEL_18:
    id v9 = v39;
    goto LABEL_19;
  }

  char v17 = airdrop_log(0LL);
  char v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v44 = v41;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "No contact for node with id = %@", buf, 0xCu);
  }

  uint64_t v14 = 0LL;
  uint64_t v19 = (void *)v40;
LABEL_19:

  if (v14)
  {
LABEL_22:
    SFNodeSetIconData(a1, v14);
    CFRelease(v14);
    goto LABEL_23;
  }

  v29 = (const __CFData *)sub_100034B30(0LL, 0LL, 0LL, v5);
  if (v29)
  {
    uint64_t v14 = v29;
    SFNodeAddKind(a1, v6);
    goto LABEL_22;
  }

  __int16 v30 = airdrop_log(0LL);
  int v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    int v33 = (void *)SFNodeCopyRealName(a1, v32);
    *(_DWORD *)buf = 138412290;
    v44 = v33;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "No icon data for node with id = %@", buf, 0xCu);
  }

LABEL_23:
}

    return 0;
  }

  id v5 = *((_DWORD *)BytePtr + 6);
  if (!v5)
  {
    unint64_t v15 = airdrop_log(BytePtr);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue(-[SDAirDropClient personID](self, "personID"));
      char v16 = 138412290;
      char v17 = v13;
      uint64_t v14 = "AirDrop sending to %@ over IPv6";
      goto LABEL_11;
    }

    goto LABEL_14;
  }

  *(void *)uint64_t v20 = 0LL;
  unint64_t v21 = 0LL;
  unint64_t v6 = if_indextoname(v5, v20);
  unint64_t v7 = airdrop_log(v6);
  unsigned int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = v8;
  if (!v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_10004D680(v5, v9);
    }
    goto LABEL_14;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = (void *)objc_claimAutoreleasedReturnValue(-[SDAirDropClient personID](self, "personID"));
    char v16 = 138412546;
    char v17 = v10;
    char v18 = 2080;
    uint64_t v19 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "AirDrop sending to %@ over %s",  (uint8_t *)&v16,  0x16u);
  }

  return strncasecmp(v20, "p2p", 3uLL) == 0;
}

    goto LABEL_15;
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    sub_100067ED4();
  }

  [*(id *)(a1 + 32) invalidateAttempt];
  [*(id *)(a1 + 32) setScanErrorString:0];
LABEL_15:
}

    -[SDAutoFillAgent _discoveryEnsureStarted](self, "_discoveryEnsureStarted");
    goto LABEL_16;
  }

  if (v3) {
    goto LABEL_14;
  }
LABEL_15:
  -[SDAutoFillAgent _discoveryEnsureStopped](self, "_discoveryEnsureStopped");
LABEL_16:
  if (self->_prefRequestingEnabled) {
    -[SDAutoFillAgent _rtiEnsureStarted](self, "_rtiEnsureStarted");
  }
  else {
    -[SDAutoFillAgent _rtiEnsureStopped](self, "_rtiEnsureStopped");
  }
  -[SDAutoFillAgent _bulletinsEnsureStopped](self, "_bulletinsEnsureStopped");
  int v4 = -[SDStatusMonitor screenOn](self->_statusMonitor, "screenOn")
    && -[SDStatusMonitor deviceUIUnlocked](self->_statusMonitor, "deviceUIUnlocked")
    && self->_proximityEnabled;
  if (-[SDStatusMonitor screenOn](self->_statusMonitor, "screenOn"))
  {
    if (!v4)
    {
      if (self->_proximityEnabled) {
        goto LABEL_30;
      }
      goto LABEL_29;
    }

    char v23 = handoff_log(v17, v18);
    char v22 = (void *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled((os_log_t)v22, OS_LOG_TYPE_DEBUG)) {
      sub_1000C6BFC();
    }
    goto LABEL_16;
  }

    id v9 = -6762;
    goto LABEL_9;
  }

  id v5 = 0LL;
LABEL_7:
  char v12 = @"csr";
  unsigned int v13 = csrPEM;
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v13,  &v12,  1LL));
  unint64_t v7 = -[SDAppleIDServerTask initWithType:appleID:info:]( objc_alloc(&OBJC_CLASS___SDAppleIDServerTask),  "initWithType:appleID:info:",  0LL,  self->_appleID,  v6);
  certificateCreateTask = self->_certificateCreateTask;
  self->_certificateCreateTask = v7;

  -[SDAppleIDServerTask setDispatchQueue:](self->_certificateCreateTask, "setDispatchQueue:", self->_dispatchQueue);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_1000C91D0;
  v11[3] = &unk_1005CDA28;
  v11[4] = self;
  -[SDAppleIDServerTask setResponseHandler:](self->_certificateCreateTask, "setResponseHandler:", v11);
  -[SDAppleIDServerTask activate](self->_certificateCreateTask, "activate");
LABEL_10:
}

  return v8;
}

  tvNotifCenter = self->_tvNotifCenter;
  char v23 = v17;
  unsigned int v24 = tvNotifCenter;
  if (v24 == v23)
  {

    goto LABEL_19;
  }

  unint64_t v25 = v24;
  if ((v12 == 0LL) == (v24 != 0LL))
  {

    goto LABEL_21;
  }

  char v26 = -[UNUserNotificationCenter isEqual:](v23, "isEqual:", v24);

  if (v26)
  {
LABEL_19:
    uint64_t v27 = _os_activity_create( (void *)&_mh_execute_header,  "Sharing/SDNotificationManager/didReceiveNotificationResponse/tv",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    state.opaque[0] = 0LL;
    state.opaque[1] = 0LL;
    os_activity_scope_enter(v27, &state);
    -[SDNotificationManager _tvHandleResponse:completion:](self, "_tvHandleResponse:completion:", v9, v10);
    os_activity_scope_leave(&state);

    goto LABEL_12;
  }

  *((_BYTE *)v6 + 60) = self->_ltkSyncing;
  *((_BYTE *)v6 + 64) |= 0x40u;
  char v12 = (char)self->_has;
  if ((v12 & 0x20) != 0) {
    goto LABEL_15;
  }
LABEL_9:
  if ((v12 & 0x10) != 0)
  {
LABEL_10:
    *((_DWORD *)v6 + 13) = self->_watchNewLTKSyncStatus;
    *((_BYTE *)v6 + 64) |= 0x10u;
  }

  id v9 = 0LL;
  if ((*(_BYTE *)&self->_has & 0x20) == 0) {
    goto LABEL_15;
  }
LABEL_10:
  int v10 = 2654435761LL * self->_watchOldLTKSyncStatus;
  if ((*(_BYTE *)&self->_has & 0x10) == 0) {
    goto LABEL_16;
  }
LABEL_11:
  uint64_t v11 = 2654435761LL * self->_watchNewLTKSyncStatus;
  return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ (unint64_t)-[NSData hash](self->_ltkHash, "hash");
}

  return v7;
}

  unint64_t v21 = [v8 deviceClassCode];
  if (v21)
  {
    if (v21 > 8) {
      char v22 = "?";
    }
    else {
      char v22 = off_1005D0520[(char)(v21 - 1)];
    }
    char v18 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v22));
LABEL_21:
    char v23 = (void *)v18;
    if (!v11) {
      goto LABEL_24;
    }
    goto LABEL_22;
  }

    unint64_t v25 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v17 >> 6) + 64) |= 1LL << v17;
    *(void *)(v25[6] + 8 * v17) = v14;
    sub_100186D8C(v46, (_OWORD *)(v25[7] + 32 * v17));
    char v26 = v25[2];
    uint64_t v27 = __OFADD__(v26, 1LL);
    uint64_t v28 = v26 + 1;
    if (v27)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }

    v25[2] = v28;
LABEL_16:
    sub_10018553C((uint64_t)&v47);
    for (i = v47; v47; i = v47)
    {
      sub_100186D8C(v48, v46);
      int v31 = *(void **)a5;
      int v33 = sub_1003AD484((uint64_t)i);
      v34 = v31[2];
      v35 = (v32 & 1) == 0;
      uint64_t v36 = v34 + v35;
      if (__OFADD__(v34, v35)) {
        goto LABEL_28;
      }
      v37 = v32;
      if (v31[3] < v36)
      {
        sub_1003A74F0(v36, 1LL);
        v38 = sub_1003AD484((uint64_t)i);
        if ((v37 & 1) != (v39 & 1)) {
          goto LABEL_30;
        }
        int v33 = v38;
      }

      if ((v37 & 1) != 0)
      {
        sub_100187058((uint64_t)v46, (uint64_t)v45);
        sub_10018709C(v46);

        __int16 v30 = (void *)(*(void *)(*(void *)a5 + 56LL) + 32 * v33);
        sub_10018709C(v30);
        sub_100186D8C(v45, v30);
      }

      else
      {
        v40 = *(void **)a5;
        *(void *)(*(void *)a5 + 8 * (v33 >> 6) + 64) |= 1LL << v33;
        *(void *)(v40[6] + 8 * v33) = i;
        sub_100186D8C(v46, (_OWORD *)(v40[7] + 32 * v33));
        v41 = v40[2];
        uint64_t v27 = __OFADD__(v41, 1LL);
        v42 = v41 + 1;
        if (v27) {
          goto LABEL_29;
        }
        v40[2] = v42;
      }

      sub_10018553C((uint64_t)&v47);
    }

      char v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);

      return (const __CFString *)v16;
    }
  }

            char v26 = v28;
            goto LABEL_21;
          }

  __break(1u);
  return result;
}

  sub_10020EEE0();
  if (!v32) {
    goto LABEL_19;
  }
  int v33 = v31;
  v34 = v32;
  v35 = (uint64_t *)(*(void *)(v0 + 752) + v17[313]);
  swift_beginAccess(v35, v0 + 592, 32LL, 0LL);
  uint64_t v36 = *v35;
  if (!*(void *)(v36 + 16) || (v37 = sub_1003AD53C(v33, (uint64_t)v34), (v38 & 1) == 0))
  {
    swift_endAccess(v0 + 592);
    swift_bridgeObjectRelease(v34);
LABEL_19:
    v44 = *(void *)(v0 + 776);
    v45 = *(void *)(v0 + 760);
    sub_1001A4B84(*(void *)(v0 + 744), v44, type metadata accessor for SDAirDropDiscoveredEndpoint);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v44, v45);
    v47 = *(uint64_t **)(v0 + 776);
    if (EnumCaseMultiPayload == 3)
    {
      v97 = v1;
      v48 = (_OWORD *)(v0 + 16);
      v49 = *(void *)(v0 + 752);
      v50 = *v47;
      v51 = (const char *)v47[1];
      *(void *)(v0 + 832) = v51;
      v52 = v17;
      v53 = (const char *)v47[3];
      *(void *)(v0 + 840) = v53;
      v54 = v47[4];
      *(void *)(v0 + 84_Block_object_dispose((const void *)(v36 - 144), 8) = v54;
      v55 = v47[5];
      *(void *)(v0 + 856) = v55;
      v56 = v52;
      v57 = (uint64_t *)(v49 + v52[313]);
      *(void *)&v58 = swift_beginAccess(v57, v0 + 712, 32LL, 0LL).n128_u64[0];
      v59 = *v57;
      if (*(void *)(v59 + 16))
      {
        swift_bridgeObjectRetain(v51, v58);
        v60 = sub_1003AD53C(v50, (uint64_t)v51);
        if ((v61 & 1) != 0)
        {
          sub_1002499DC(*(void *)(v59 + 56) + 48 * v60, v0 + 16);
        }

        else
        {
          *(_OWORD *)(v0 + 32) = 0u;
          *(_OWORD *)(v0 + 4_Block_object_dispose((const void *)(v36 - 144), 8) = 0u;
          *v48 = 0u;
        }

        swift_bridgeObjectRelease(v51);
        if (*(void *)(v0 + 40))
        {
          sub_1001CCE4C((__int128 *)(v0 + 16), (_OWORD *)(v0 + 304));
          swift_endAccess(v0 + 712);
          v39 = *(void *)(v0 + 328);
          v40 = *(void *)(v0 + 336);
          sub_10019A708((void *)(v0 + 304), v39);
          v62 = *(int **)(v40 + 48);
          v98 = (int *)((char *)v62 + *v62);
          v42 = (void *)swift_task_alloc(v62[1]);
          *(void *)(v0 + 864) = v42;
          v43 = sub_1002F01BC;
          goto LABEL_49;
        }
      }

      else
      {
        *(_OWORD *)(v0 + 32) = 0u;
        *(_OWORD *)(v0 + 4_Block_object_dispose((const void *)(v36 - 144), 8) = 0u;
        *v48 = 0u;
      }

      sub_100187100(v0 + 16, &qword_10064DA48);
      swift_endAccess(v0 + 712);
      *(void *)&v63 = swift_bridgeObjectRelease(v51).n128_u64[0];
      swift_bridgeObjectRelease(v53, v63);
      sub_100189B0C(v54, v55);
      unsigned int v1 = v97;
      char v17 = v56;
    }

    else
    {
      sub_1001A4BC8((uint64_t)v47, type metadata accessor for SDAirDropDiscoveredEndpoint);
    }

    v64 = *(void *)(v0 + 752);
    sub_10020C5CC();
    v66 = v65;
    v68 = v67;
    v69 = (uint64_t *)(v64 + v17[313]);
    swift_beginAccess(v69, v0 + 688, 32LL, 0LL);
    v70 = *v69;
    if (*(void *)(*v69 + 16) && (v71 = sub_1003AD53C(v66, (uint64_t)v68), (v72 & 1) != 0))
    {
      sub_1002499DC(*(void *)(v70 + 56) + 48 * v71, v0 + 112);
    }

    else
    {
      *(_OWORD *)(v0 + 12_Block_object_dispose((const void *)(v36 - 144), 8) = 0u;
      *(_OWORD *)(v0 + 144) = 0u;
      *(_OWORD *)(v0 + 112) = 0u;
    }

    swift_bridgeObjectRelease(v68);
    swift_endAccess(v0 + 688);
    v73 = *(void *)(v0 + 136);
    sub_100187100(v0 + 112, &qword_10064DA48);
    if (v73)
    {
      sub_10020C5CC();
      v75 = v74;
      v77 = v76;
      sub_10020EB1C();
      v79 = v78;
      swift_bridgeObjectRelease(v78);
      if (!v79)
      {
        v88 = (os_log_s *)Logger.logObject.getter(v80);
        v89 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v88, v89))
        {
          v90 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)v90 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v88,  v89,  "Discovered endpoint no longer has a device name, removing",  v90,  2u);
          swift_slowDealloc(v90, -1LL, -1LL);
        }

        v100 = 0u;
        v101 = 0u;
        v99 = 0u;
        swift_beginAccess(v69, v0 + 640, 33LL, 0LL);
        sub_1002E5104((uint64_t)&v99, v75, v77);
        swift_endAccess(v0 + 640);
        goto LABEL_42;
      }

      v81 = *(void *)(v0 + 768);
      sub_1001A4B84(*(void *)(v0 + 744), v81, type metadata accessor for SDAirDropDiscoveredEndpoint);
      v82 = type metadata accessor for SDAirDropDiscoveredDevice(0LL);
      swift_allocObject(v82, *(unsigned int *)(v82 + 48), *(unsigned __int16 *)(v82 + 52));
      v83 = sub_1002FEF90(v81);
      v84 = v77;
      v85 = v1;
      v86 = v83;
      *((void *)&v100 + 1) = v82;
      v87 = sub_100183F14( &qword_10064DBB8,  type metadata accessor for SDAirDropDiscoveredDevice,  (uint64_t)&unk_1004D4AD8);
      *(void *)&v101 = v87;
      *((void *)&v101 + 1) = &off_1005DA158;
      *(void *)&v99 = v86;
      swift_beginAccess(v69, v0 + 616, 33LL, 0LL);
      swift_retain(v86);
      sub_1002E5104((uint64_t)&v99, v75, v84);
      swift_endAccess(v0 + 616);
      *(void *)(v0 + 376) = v82;
      *(void *)(v0 + 384) = v87;
      *(void *)(v0 + 352) = v86;
      unsigned int v1 = v85;
      sub_100187100(v85, &qword_10064DBB0);
      sub_1001870BC(v0 + 352, v85, &qword_10064DBB0);
    }

    if (*(_BYTE *)(v0 + 872) == 1)
    {
      sub_1001915A4(v1, v0 + 552, &qword_10064DBB0);
      if (!*(void *)(v0 + 576))
      {
        sub_100187100(v1, &qword_10064DBB0);
        v91 = v0 + 552;
        goto LABEL_43;
      }

      sub_1001CE0D0((__int128 *)(v0 + 552), v0 + 512);
      sub_1002F2D4C((void *)(v0 + 512));
      sub_10018709C((void *)(v0 + 512));
    }

  *a2 = v13;
}

  v48 = *(void *)(v1 + 144);
  v49 = *(void *)(v1 + 120);
  v50 = *(void *)(v1 + 96);
  v51 = *(void *)(v1 + 72);
  v52 = *(void *)(v1 + 48);
  swift_task_dealloc(*(void *)(v1 + 152));
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

  uint64_t v14 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v14 + 48) + 8 * a2) = v5;
  unint64_t v15 = *(void *)(v14 + 16);
  char v16 = __OFADD__(v15, 1LL);
  char v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    *(void *)(v14 + 16) = v17;
  }
  return result;
}

  uint64_t v19 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v19 + 48) + 8 * a2) = a1;
  uint64_t v20 = *(void *)(v19 + 16);
  unint64_t v21 = __OFADD__(v20, 1LL);
  char v22 = v20 + 1;
  if (v21) {
    __break(1u);
  }
  else {
    *(void *)(v19 + 16) = v22;
  }
}

  unsigned int v24 = *v9;
  *(void *)(*v9 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v24 + 48) + 8 * a2) = a1;
  unint64_t v25 = *(void *)(v24 + 16);
  char v26 = __OFADD__(v25, 1LL);
  uint64_t v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v24 + 16) = v27;
  }
}

void sub_10000E7A8(_Unwind_Exception *a1)
{
}

void sub_10000E7D0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = airdrop_log(WeakRetained);
  int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "SDAirDropSession: cancellation handler called for sessionID: %@",  (uint8_t *)&v6,  0xCu);
  }

  [WeakRetained stop];
}

id sub_10000EBE8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) observeValueForKeyPath:*(void *)(a1 + 40) ofObject:*(void *)(a1 + 48) change:*(void *)(a1 + 56) context:*(void *)(a1 + 64)];
}

void sub_10000ED54(uint64_t a1, uint64_t a2, os_log_t log)
{
  else {
    uint64_t v3 = off_1005CB188[a1 - 1];
  }
  int v4 = 138412547;
  uint64_t v5 = v3;
  __int16 v6 = 2113;
  uint64_t v7 = a2;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "SDAirDropSession: Received event %@, properties = %{private}@",  (uint8_t *)&v4,  0x16u);
}

void sub_10000EDFC(os_log_t log)
{
  *(_WORD *)unsigned int v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "SDAirDropSession: startProgress sessionID is NULL",  v1,  2u);
}

uint64_t SDUnlockSetupCreateSecretReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      uint64_t Data = PBReaderReadData(a2);
      uint64_t v19 = objc_claimAutoreleasedReturnValue(Data);
      uint64_t v20 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v19;
    }

    else
    {
      if ((_DWORD)v12 == 2)
      {
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v15 = 0LL;
        *(_BYTE *)(a1 + 28) |= 1u;
        while (1)
        {
          unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1LL || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v24 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
          v15 |= (unint64_t)(v24 & 0x7F) << v21;
          if ((v24 & 0x80) == 0) {
            goto LABEL_42;
          }
          v21 += 7;
          BOOL v9 = v22++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_44;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_44:
        uint64_t v26 = 8LL;
      }

      else
      {
        if ((_DWORD)v12 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result) {
            return result;
          }
          continue;
        }

        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0LL;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (1)
        {
          unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1LL || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v17 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0) {
            goto LABEL_38;
          }
          v13 += 7;
          BOOL v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_40;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_40:
        uint64_t v26 = 24LL;
      }

      *(_DWORD *)(a1 + v26) = v15;
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100010438(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = objc_autoreleasePoolPush();
  if (a2 && a4) {
    [a2 handleEvent:a4];
  }
  objc_autoreleasePoolPop(v6);
}

void sub_1000110B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1000110D8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleTimerFired];
}

void sub_10001138C(uint64_t a1)
{
  if (*(unsigned __int16 *)(a1 + 56) - 2002 <= 2)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = auto_unlock_log(a1);
    char v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    unsigned int v5 = v4;
    if (v2)
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = *(unsigned __int16 *)(a1 + 56);
        unsigned int v7 = [*(id *)(a1 + 40) length];
        int v22 = 67109376;
        *(_DWORD *)unint64_t v23 = v6;
        *(_WORD *)&v23[4] = 1024;
        *(_DWORD *)&v23[6] = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Received protobuf (type = %d, size = %u)",  (uint8_t *)&v22,  0xEu);
      }

      unsigned int v5 = -[SDAutoUnlockSessionWrapper initWithData:]( objc_alloc(&OBJC_CLASS___SDAutoUnlockSessionWrapper),  "initWithData:",  *(void *)(a1 + 40));
      id v8 = -[os_log_s hasSessionID](v5, "hasSessionID");
      if ((_DWORD)v8
        && (BOOL v9 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s sessionID](v5, "sessionID")),
            id v10 = [v9 length],
            v9,
            v10 == (id)16))
      {
        uint64_t v11 = objc_alloc(&OBJC_CLASS___NSUUID);
        id v12 = objc_claimAutoreleasedReturnValue(-[os_log_s sessionID](v5, "sessionID"));
        char v13 = -[NSUUID initWithUUIDBytes:](v11, "initWithUUIDBytes:", [v12 bytes]);

        unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) sessionID]);
        unsigned int v15 = -[NSUUID isEqual:](v13, "isEqual:", v14);

        if (v15)
        {
          char v17 = *(void **)(a1 + 48);
          char v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[os_log_s payload](v5, "payload"));
          [v17 handleMessage:v18 fromDeviceID:*(void *)(a1 + 32) type:*(unsigned __int16 *)(a1 + 56)];
        }

        else
        {
          uint64_t v20 = auto_unlock_log(v16);
          char v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            char v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) sessionID]);
            int v22 = 138412546;
            *(void *)unint64_t v23 = v13;
            *(_WORD *)&v23[8] = 2112;
            char v24 = v21;
            _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Incoming message session ID (%@) doesn't match current one (%@)",  (uint8_t *)&v22,  0x16u);
          }
        }
      }

      else
      {
        uint64_t v19 = auto_unlock_log(v8);
        char v13 = (NSUUID *)objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_ERROR)) {
          sub_100011744(v5, (uint64_t *)(a1 + 40), (os_log_s *)v13);
        }
      }
    }

    else if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      sub_100011704(v5);
    }
  }

void sub_100011704(os_log_t log)
{
  *(_WORD *)unsigned int v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "Incoming message from unknown device",  v1,  2u);
}

void sub_100011744(void *a1, uint64_t *a2, os_log_s *a3)
{
  int v6 = (void *)objc_claimAutoreleasedReturnValue([a1 sessionID]);
  uint64_t v7 = *a2;
  int v8 = 138412802;
  BOOL v9 = v6;
  __int16 v10 = 2112;
  uint64_t v11 = a1;
  __int16 v12 = 2112;
  uint64_t v13 = v7;
  _os_log_error_impl( (void *)&_mh_execute_header,  a3,  OS_LOG_TYPE_ERROR,  "Incoming message missing info (session = %@, wrapper = %@, data = %@)",  (uint8_t *)&v8,  0x20u);
}

void sub_100011800(uint64_t a1)
{
  uint64_t v1 = auto_unlock_log(a1);
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Locking key bag", v6, 2u);
  }

  uint64_t v3 = aks_lock_bag(4294967293LL);
  if ((_DWORD)v3)
  {
    uint64_t v4 = auto_unlock_log(v3);
    unsigned int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_100014848();
    }
  }

void sub_100011898(uint64_t *a1)
{
  uint64_t v1 = ACMContextCreate(a1);
  if ((_DWORD)v1)
  {
    uint64_t v2 = auto_unlock_log(v1);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_100014874();
    }
  }

void sub_1000118E8(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = ACMContextCreateWithExternalForm([v3 bytes], (uint64_t)objc_msgSend(v3, "length"));
  if (!v4)
  {
    uint64_t v5 = auto_unlock_log(0LL);
    int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000148D4((uint64_t)v3, v6, v7, v8, v9, v10, v11, v12);
    }
  }

  if (a2) {
    *a2 = v4;
  }
}

void sub_100011974(const void *a1, void *a2, void *a3)
{
  uint64_t v22 = 0LL;
  unint64_t v23 = &v22;
  uint64_t v24 = 0x2020000000LL;
  uint64_t v25 = 0LL;
  uint64_t v16 = 0LL;
  char v17 = &v16;
  uint64_t v18 = 0x3032000000LL;
  uint64_t v19 = sub_100011B78;
  uint64_t v20 = sub_100011B88;
  id v21 = 0LL;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100011B90;
  v12[3] = &unk_1005CB270;
  unsigned int v14 = &v22;
  unsigned int v15 = &v16;
  int v6 = dispatch_semaphore_create(0LL);
  uint64_t v13 = v6;
  ACMContextGetExternalForm(a1, (uint64_t)v12);
  dispatch_time_t v7 = dispatch_time(0LL, 5000000000LL);
  uint64_t v8 = dispatch_semaphore_wait(v6, v7);
  if (v8) {
    v23[3] = 60LL;
  }
  uint64_t v9 = auto_unlock_log(v8);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = v17[5];
    *(_DWORD *)buf = 138412290;
    uint64_t v27 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Returning context data %@", buf, 0xCu);
  }

  if (a2) {
    *a2 = (id) v17[5];
  }
  if (a3) {
    *a3 = v23[3];
  }

  _Block_object_dispose(&v16, 8);
  _Block_object_dispose(&v22, 8);
}

void sub_100011B48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100011B78(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100011B88(uint64_t a1)
{
}

uint64_t sub_100011B90(uint64_t a1, const void *a2, int64_t __size)
{
  int v6 = malloc(__size);
  if (v6)
  {
    dispatch_time_t v7 = v6;
    memcpy(v6, a2, __size);
    if (__size >= 1)
    {
      uint64_t v8 = objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v7, __size));
      uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
      uint64_t v10 = *(void **)(v9 + 40);
      *(void *)(v9 + 40) = v8;
    }

    free(v7);
  }

  else
  {
    uint64_t v11 = auto_unlock_log(0LL);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_100014938();
    }

    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 12LL;
  }

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

BOOL sub_100011C58(_OWORD *a1)
{
  uint64_t v1 = ACMContextContainsCredentialTypeEx(a1, 9, 0);
  int v2 = v1;
  uint64_t v3 = auto_unlock_log(v1);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = v4;
  if (v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100014964();
    }
  }

  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)dispatch_time_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "ACM context contains credential", v7, 2u);
  }

  return v2 == 0;
}

NSUUID *sub_100011CF8()
{
  unsigned __int8 v0 = calloc(1uLL, 0x10uLL);
  uint64_t bag_uuid = aks_get_bag_uuid(0x7FFFFFFFLL, v0);
  if ((_DWORD)bag_uuid)
  {
    uint64_t v2 = auto_unlock_log(bag_uuid);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1000149C4();
    }

    uint64_t v4 = 0LL;
  }

  else
  {
    uint64_t v4 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", v0);
  }

  free(v0);
  return v4;
}

uint64_t sub_100011D94(void *a1, uint64_t a2, int a3)
{
  id v5 = a1;
  int v6 = v5;
  else {
    uint64_t v7 = (a2 + 8);
  }
  uint64_t v8 = auto_unlock_log(v5);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = @"NO";
    int v22 = 134218499;
    uint64_t v23 = v7;
    if (a3) {
      uint64_t v10 = @"YES";
    }
    __int16 v24 = 2112;
    uint64_t v25 = v10;
    __int16 v26 = 2113;
    uint64_t v27 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Validating local LTK (aks keyclass: %ld, touch bar: %@, local LTK: %{private}@)",  (uint8_t *)&v22,  0x20u);
  }

  id v11 = v6;
  uint64_t v12 = aks_validate_local_key(0x7FFFFFFFLL, v7, [v11 bytes], objc_msgSend(v11, "length"));
  int v13 = v12;
  uint64_t v14 = auto_unlock_log(v12);
  uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    int v22 = 67109120;
    LODWORD(v23) = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Validated local LTK (status: %d)",  (uint8_t *)&v22,  8u);
  }

  uint64_t v17 = 0LL;
  if (v13 != -536362989 && v13 != -536362984)
  {
    uint64_t v17 = 0LL;
    char v18 = v13 == -536870212 ? a3 : 0;
    if ((v18 & 1) == 0 && v13 != -536362971)
    {
      if (v13)
      {
        uint64_t v19 = auto_unlock_log(v16);
        uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          int v22 = 67109120;
          LODWORD(v23) = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Validating local LTK returned unexpected status (status: %d)",  (uint8_t *)&v22,  8u);
        }
      }

      uint64_t v17 = 1LL;
    }
  }

  return v17;
}

void sub_100011FB8(uint64_t a1)
{
  uint64_t v1 = auto_unlock_log(a1);
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT)) {
    sub_100014A24();
  }

  uint64_t v3 = aks_remote_session_reset_all();
  if ((_DWORD)v3)
  {
    uint64_t v4 = auto_unlock_log(v3);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Failed to reset all sessions", v6, 2u);
    }
  }

uint64_t sub_10001204C(void *a1)
{
  id v1 = a1;
  uint64_t v2 = calloc(1uLL, 0x10uLL);
  if (v2)
  {
    uint64_t v3 = (uint64_t)v2;
    id v4 = v1;
    uint64_t state = aks_remote_peer_get_state(0x7FFFFFFFLL, [v4 bytes], objc_msgSend(v4, "length"), v3);
    int v6 = state;
    if ((_DWORD)state && (_DWORD)state != -536870184)
    {
      uint64_t v10 = auto_unlock_log(state);
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_100014A5C();
      }

      uint64_t v9 = 100LL;
    }

    else
    {
      uint64_t v7 = auto_unlock_log(state);
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
        sub_100014ABC(v3, v6, v8);
      }

      uint64_t v9 = sub_10001220C(*(void *)v3, *(void *)(v3 + 8));
    }

    free((void *)v3);
  }

  else
  {
    uint64_t v9 = 100LL;
  }

  return v9;
}

id sub_100012158(uint64_t a1, int a2)
{
  else {
    uint64_t v2 = off_1005CB2B8[(int)a1];
  }
  uint64_t v3 = @"escrow_record_not_found";
  if (HIDWORD(a1) == 1) {
    id v4 = @"escrow_record_not_found";
  }
  else {
    id v4 = 0LL;
  }
  if (HIDWORD(a1)) {
    id v5 = (__CFString *)v4;
  }
  else {
    id v5 = @"escrow_record_valid";
  }
  if (a2 != 1) {
    uint64_t v3 = 0LL;
  }
  if (a2) {
    int v6 = v3;
  }
  else {
    int v6 = @"escrow_record_valid";
  }
  uint64_t v7 = v5;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"State: {\n\ttoken status: %@,\n\tunwrapped record status: %@\n\twrapped record status: %@\n}",  v2,  v7,  v6));

  return v8;
}

uint64_t sub_10001220C(unint64_t a1, uint64_t a2)
{
  if ((_DWORD)a2) {
    return 0LL;
  }
  if (HIDWORD(a1))
  {
    switch((int)a1)
    {
      case 0:
        uint64_t v5 = 100LL;
        if ((a2 & 0x400000000LL) == 0) {
          uint64_t v5 = 9LL;
        }
        if ((a2 & 0x100000000LL) != 0) {
          uint64_t result = v5;
        }
        else {
          uint64_t result = 10LL;
        }
        break;
      case 1:
        uint64_t result = 4LL;
        break;
      case 2:
        uint64_t result = 5LL;
        break;
      case 3:
        uint64_t result = 6LL;
        break;
      case 4:
        uint64_t result = 7LL;
        break;
      case 5:
        uint64_t result = 1LL;
        break;
      case 6:
        uint64_t result = 8LL;
        break;
      default:
        uint64_t result = 100LL;
        break;
    }
  }

  else
  {
    uint64_t v3 = 100LL;
    if ((a2 & 0x400000000LL) == 0) {
      uint64_t v3 = 10LL;
    }
    uint64_t v4 = 2LL;
    if ((a2 & 0x100000000LL) != 0) {
      uint64_t v4 = v3;
    }
    if ((_DWORD)a1) {
      return v4;
    }
    else {
      return 3LL;
    }
  }

  return result;
}

void sub_1000122CC(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (uint64_t *)calloc(1uLL, 0x10uLL);
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = v1;
    uint64_t state = aks_remote_peer_get_state(0x7FFFFFFFLL, [v4 bytes], objc_msgSend(v4, "length"), v3);
    int v6 = state;
    if (!(_DWORD)state || (_DWORD)state == -536870184)
    {
      uint64_t v7 = auto_unlock_log(state);
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        id v9 = sub_100012158(*v3, v3[1]);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        id v11 = sub_100012424(*((_DWORD *)v3 + 3));
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        v13[0] = 67109634;
        v13[1] = v6;
        __int16 v14 = 2112;
        uint64_t v15 = v10;
        __int16 v16 = 2112;
        uint64_t v17 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Status %d, Peer State: %@, flags: %@",  (uint8_t *)v13,  0x1Cu);
      }
    }

    free(v3);
  }
}

id sub_100012424(char a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  uint64_t v3 = v2;
  if ((a1 & 1) == 0)
  {
    if ((a1 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_7:
    [v3 addObject:@"originator"];
    if ((a1 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }

  [v2 addObject:@"registered"];
  if ((a1 & 2) != 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((a1 & 4) != 0) {
LABEL_4:
  }
    [v3 addObject:@"armed"];
LABEL_5:
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "componentsJoinedByString:", @", "));

  return v4;
}

CFStringRef sub_1000124BC(uint64_t a1)
{
  uint64_t result = @"SDAKSPeerStateNotSetUp";
  switch(a1)
  {
    case 0LL:
      return result;
    case 1LL:
      uint64_t result = @"SDAKSPeerStateNotAvailable";
      break;
    case 2LL:
      uint64_t result = @"SDAKSPeerStateOnlyEscrowAvailable";
      break;
    case 3LL:
      uint64_t result = @"SDAKSPeerStateTokenAvailable";
      break;
    case 4LL:
      uint64_t result = @"SDAKSPeerStateNoPasscodeUnlockWithinWindow";
      break;
    case 5LL:
      uint64_t result = @"SDAKSPeerStateNoRemoteUnlockWithinWindow";
      break;
    case 6LL:
      uint64_t result = @"SDAKSPeerStateTooManyFailedPasscodeEntries";
      break;
    case 7LL:
      uint64_t result = @"SDAKSPeerStatePasscodeDisabled";
      break;
    case 8LL:
      uint64_t result = @"SDAKSPeerStateBioLockout";
      break;
    case 9LL:
      uint64_t result = @"SDAKSPeerStateNotArmed";
      break;
    default:
      if (a1 == 100) {
        uint64_t result = @"SDAKSPeerStateUnknown";
      }
      else {
        uint64_t result = @"Unexpected type";
      }
      break;
  }

  return result;
}

uint64_t sub_100012570()
{
  __int16 v12 = 0;
  memset(v11, 0, sizeof(v11));
  device_uint64_t state = aks_get_device_state(0LL, v11);
  if ((v11[0] & 0x10) != 0)
  {
    uint64_t v7 = auto_unlock_log(device_state);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      int v6 = "bio armed";
      goto LABEL_7;
    }

LABEL_8:
    uint64_t v8 = 1LL;
    goto LABEL_12;
  }

  uint64_t v1 = MKBDeviceUnlockedSinceBoot(device_state);
  int v2 = v1;
  uint64_t v3 = auto_unlock_log(v1);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v2 == 1)
  {
    if (v5)
    {
      *(_WORD *)uint64_t v10 = 0;
      int v6 = "biometric timer expired, but reporting bio armed anyway";
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v6, v10, 2u);
      goto LABEL_8;
    }

    goto LABEL_8;
  }

  if (v5)
  {
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "not armed", v10, 2u);
  }

  uint64_t v8 = 0LL;
LABEL_12:

  return v8;
}

  extraInfouint64_t Data = self->_extraInfoData;
  if (extraInfoData) {
    [v4 setObject:extraInfoData forKey:@"extraInfoData"];
  }
  return v4;
}

  extraInfouint64_t Data = self->_extraInfoData;
  if (extraInfoData)
  {
    PBDataWriterWriteDataField(v8, extraInfoData, 6LL);
    id v4 = v8;
  }
}

  if (self->_extraInfoData)
  {
    objc_msgSend(v6, "setExtraInfoData:");
    id v4 = v6;
  }
}

  if (*((void *)v4 + 2))
  {
    -[SDAutoUnlockWiFiAWDLInfo setExtraInfoData:](self, "setExtraInfoData:");
    id v4 = v6;
  }
}
}

  [v15 invalidate];
  __int16 v12 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockSessionManager proxySessions](self, "proxySessions"));
  int v13 = (void *)objc_claimAutoreleasedReturnValue([v15 bleDevice]);
  __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v13 identifier]);
  [v12 removeObjectForKey:v14];
}

    [result _update];
    uint64_t result = [*(id *)(*(void *)(a1 + 32) + 208) screenOn];
  }

  return result;
}

  int v6 = (os_log_s *)utilities_log();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
    sub_10008EC70();
  }
  return 0LL;
}
}

  return v6;
}

  return v6;
}
}
}
}
}
}
}
}
}

    __int16 v12 = v10;
LABEL_9:
    CFRelease(v12);
    goto LABEL_10;
  }

  PathComponent = CFURLCopyLastPathComponent((CFURLRef)a1);
  if (PathComponent)
  {
    uint64_t v10 = PathComponent;
    CFArrayAppendValue(v6, PathComponent);
    goto LABEL_8;
  }
}

        int v13 = paired_unlock_log(v11, v12);
        __int16 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
LABEL_11:

          return;
        }

        LOWORD(v19) = 0;
        uint64_t v15 = "Already unlocking for keybag";
LABEL_10:
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v19, 2u);
        goto LABEL_11;
      }

      self->_unlockingForKeybagUnlock = -[SDUnlockKeyManager startUnlockIfNeeded](self, "startUnlockIfNeeded");
    }

    else
    {
      __int16 v16 = paired_unlock_log(v11, v12);
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v19) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Not starting Paired Unlock until we can verify whether Auto Unlock is enabled",  (uint8_t *)&v19,  2u);
      }

      -[SDUnlockKeyManager setWaitingForAutoUnlockStateUpdateToStartPairedUnlock:]( self,  "setWaitingForAutoUnlockStateUpdateToStartPairedUnlock:",  1LL);
    }
  }
}

    LOBYTE(v7) = 0;
  }

  return v7 & 1;
}

  SFClientIdentity.connectionID.getter(v39);
  v47 = v155;
  v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v155 + 48);
  if (v48(v34, 1LL, v163) == 1)
  {
    sub_100187100((uint64_t)v34, &qword_10064DA60);
    if (qword_100644118 != -1) {
      swift_once(&qword_100644118, sub_1002C5F3C);
    }
    v49 = type metadata accessor for Logger(0LL);
    sub_100186DE4(v49, (uint64_t)qword_10064CE30);
    v50 = v160;
    v51 = v147;
    v52 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v160, v152, v147);
    v53 = (os_log_s *)Logger.logObject.getter(v52);
    v54 = static os_log_type_t.error.getter(v53);
    if (os_log_type_enabled(v53, v54))
    {
      v55 = v50;
      v56 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v57 = swift_slowAlloc(32LL, -1LL);
      v166 = v57;
      *(_DWORD *)v56 = 136315138;
      v58 = sub_100183F14( &qword_100646150,  (uint64_t (*)(uint64_t))&type metadata accessor for SFClientIdentity,  (uint64_t)&protocol conformance descriptor for SFClientIdentity);
      v59 = dispatch thunk of CustomStringConvertible.description.getter(v51, v58);
      v61 = (const char *)v60;
      v164 = sub_10018CDB4(v59, v60, &v166);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, v165, v56 + 4, v56 + 12);
      v62 = swift_bridgeObjectRelease(v61);
      (*(void (**)(char *, uint64_t, __n128))(v148 + 8))(v55, v51, v62);
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "No connectionID present - %s", v56, 0xCu);
      swift_arrayDestroy(v57, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1LL, -1LL);
      swift_slowDealloc(v56, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v50, v51);
    }

    goto LABEL_21;
  }

  v160 = (char *)v48;
  v63 = v162;
  v144 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
  v144(v162, v34, v163);
  v64 = v47;
  if (qword_100644118 != -1) {
    swift_once(&qword_100644118, sub_1002C5F3C);
  }
  v65 = type metadata accessor for Logger(0LL);
  v66 = sub_100186DE4(v65, (uint64_t)qword_10064CE30);
  v67 = v157;
  v159 = *(uint64_t (**)(const char *, char *, uint64_t))(v64 + 16);
  v68 = v159(v157, v63, v163);
  v137 = v66;
  v69 = (os_log_s *)Logger.logObject.getter(v68);
  v70 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v69, v70))
  {
    v156 = v69;
    v71 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v138 = swift_slowAlloc(32LL, -1LL);
    v166 = v138;
    v136 = v71;
    *(_DWORD *)v71 = 136315138;
    v72 = v71 + 12;
    v153 = (void (*)(const char *, uint64_t, __n128))(v71 + 4);
    v73 = sub_100183F14( (unint64_t *)&qword_1006460B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    v74 = v163;
    v75 = dispatch thunk of CustomStringConvertible.description.getter(v163, v73);
    v77 = (const char *)v76;
    v164 = sub_10018CDB4(v75, v76, &v166);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, v165, v153, v72);
    v78 = swift_bridgeObjectRelease(v77);
    v64 = v155;
    v153 = *(void (**)(const char *, uint64_t, __n128))(v155 + 8);
    v153(v67, v74, v78);
    v69 = v156;
    v79 = v136;
    _os_log_impl((void *)&_mh_execute_header, v156, v70, "Becoming presenter for connectionID %s", v136, 0xCu);
    v80 = v138;
    swift_arrayDestroy(v138, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v80, -1LL, -1LL);
    swift_slowDealloc(v79, -1LL, -1LL);
  }

  else
  {
    v153 = *(void (**)(const char *, uint64_t, __n128))(v64 + 8);
    ((void (*)(const char *, uint64_t))v153)(v67, v163);
  }

  v85 = v64;
  v86 = (const char **)(v158 + OBJC_IVAR____TtC16DaemoniOSLibrary16SDAirDropService_transferPresenters);
  v87 = swift_beginAccess( v158 + OBJC_IVAR____TtC16DaemoniOSLibrary16SDAirDropService_transferPresenters,  &v166,  0LL,  0LL);
  v138 = (uint64_t)v86;
  v88 = *v86;
  v158 = *((void *)*v86 + 2);
  if (!v158)
  {
LABEL_35:
    v106 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16);
    v107 = (uint64_t)v143;
    v106(v143, v152, v147, v87);
    v108 = v145;
    v109 = v107 + *(int *)(v145 + 20);
    v110 = type metadata accessor for SFAirDropClient.Identifier(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v110 - 8) + 16LL))(v109, v167, v110);
    v111 = (double *)(v107 + *(int *)(v108 + 24));
    *v111 = a3;
    v111[1] = a4;
    v111[2] = a5;
    v111[3] = a6;
    v112 = v142;
    sub_1002D0920(v107, v142);
    v113 = (unint64_t *)v138;
    swift_beginAccess(v138, &v164, 33LL, 0LL);
    v114 = *v113;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v113);
    *v113 = v114;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v114 = sub_10018C9F4(0, *(void *)(v114 + 16) + 1LL, 1, v114);
      *v113 = v114;
    }

    v117 = *(void *)(v114 + 16);
    v116 = *(void *)(v114 + 24);
    if (v117 >= v116 >> 1)
    {
      v114 = sub_10018C9F4(v116 > 1, v117 + 1, 1, v114);
      *v113 = v114;
    }

    *(void *)(v114 + 16) = v117 + 1;
    sub_1002D0964( v112,  v114 + ((*(unsigned __int8 *)(v146 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v146 + 80))
    + *(void *)(v146 + 72) * v117);
    swift_endAccess(&v164);
    v118 = v107;
    goto LABEL_48;
  }

  v89 = (uint8_t *)((*(unsigned __int8 *)(v146 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v146 + 80));
  v156 = *(os_log_t *)(v146 + 72);
  swift_bridgeObjectRetain(v88, v87.n128_f64[0]);
  v91 = 0LL;
  v136 = v89;
  v157 = v88;
  v151 = v23;
  while (1)
  {
    SFClientIdentity.connectionID.getter(v90);
    v94 = v163;
    v159(v29, v162, v163);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v85 + 56))(v29, 0LL, 1LL, v94);
    v95 = (uint64_t)&v23[*(int *)(v161 + 48)];
    sub_1001915A4((uint64_t)v32, (uint64_t)v23, &qword_10064DA60);
    sub_1001915A4((uint64_t)v29, v95, &qword_10064DA60);
    v96 = v94;
    v97 = v160;
    v98 = (uint64_t)v23;
    v99 = v163;
    v100 = v154;
    sub_1001915A4(v98, v154, &qword_10064DA60);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v97)(v95, 1LL, v99) == 1)
    {
      sub_100187100((uint64_t)v29, &qword_10064DA60);
      sub_100187100((uint64_t)v32, &qword_10064DA60);
      ((void (*)(uint64_t, uint64_t))v153)(v100, v99);
      uint64_t v23 = v151;
      v85 = v155;
      v93 = v157;
      goto LABEL_27;
    }

    v101 = v149;
    v144(v149, (char *)v95, v99);
    v102 = sub_100183F14( &qword_100646148,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    v103 = dispatch thunk of static Equatable.== infix(_:_:)(v100, v101, v99, v102);
    v104 = v101;
    v105 = (void (*)(uint64_t, uint64_t))v153;
    ((void (*)(char *, uint64_t))v153)(v104, v99);
    sub_100187100((uint64_t)v29, &qword_10064DA60);
    sub_100187100((uint64_t)v32, &qword_10064DA60);
    v105(v100, v99);
    uint64_t v23 = v151;
    v90 = sub_100187100((uint64_t)v151, &qword_10064DA60);
    v85 = v155;
    v93 = v157;
    if ((v103 & 1) != 0) {
      goto LABEL_41;
    }
LABEL_28:
    ++v91;
    v89 = (uint8_t *)v156 + (void)v89;
    if (v158 == v91)
    {
      v87 = swift_bridgeObjectRelease(v93);
      id v11 = v148;
      goto LABEL_35;
    }
  }

  sub_100187100((uint64_t)v29, &qword_10064DA60);
  sub_100187100((uint64_t)v32, &qword_10064DA60);
  v92 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v97)(v95, 1LL, v163);
  v93 = v157;
  if (v92 != 1)
  {
LABEL_27:
    v90 = sub_100187100((uint64_t)v23, &qword_100646130);
    goto LABEL_28;
  }

  sub_100187100((uint64_t)v23, &qword_10064DA60);
LABEL_41:
  swift_bridgeObjectRelease(v93);
  v120 = Logger.logObject.getter(v119);
  v121 = static os_log_type_t.default.getter();
  if (os_log_type_enabled((os_log_t)v120, v121))
  {
    v122 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)v122 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v120,  v121,  "Presenter already exists, becoming first presenter",  v122,  2u);
    swift_slowDealloc(v122, -1LL, -1LL);
  }

  v123 = (unint64_t *)v138;
  if (v91 >= *(void *)(*(void *)v138 + 16LL))
  {
    __break(1u);
  }

  else
  {
    v124 = &v89[*(void *)v138];
    v89 = v140;
    (*(void (**)(uint8_t *, uint8_t *, uint64_t))(v148 + 16))(v140, v124, v147);
    v125 = v145;
    v126 = *(int *)(v145 + 20);
    v127 = &v124[v126];
    v128 = &v89[v126];
    v129 = type metadata accessor for SFAirDropClient.Identifier(0LL);
    (*(void (**)(uint8_t *, uint8_t *, uint64_t))(*(void *)(v129 - 8) + 16LL))(v128, v127, v129);
    v130 = (double *)&v89[*(int *)(v125 + 24)];
    *v130 = a3;
    v130[1] = a4;
    v130[2] = a5;
    v130[3] = a6;
    swift_beginAccess(v123, &v164, 33LL, 0LL);
    v131 = v139;
    sub_1001C838C(v91, v139);
    sub_1002CFD2C(v131);
    v91 = v141;
    sub_1002D0920((uint64_t)v89, v141);
    v120 = *v123;
    v132 = swift_isUniquelyReferenced_nonNull_native(*v123);
    *v123 = v120;
    if ((v132 & 1) != 0) {
      goto LABEL_45;
    }
  }

  v120 = sub_10018C9F4(0, *(void *)(v120 + 16) + 1LL, 1, v120);
  *v123 = v120;
LABEL_45:
  v134 = *(void *)(v120 + 16);
  v133 = *(void *)(v120 + 24);
  if (v134 >= v133 >> 1)
  {
    v120 = sub_10018C9F4(v133 > 1, v134 + 1, 1, v120);
    *v123 = v120;
  }

  *(void *)(v120 + 16) = v134 + 1;
  sub_1002D0964(v91, (uint64_t)&v136[v120 + v134 * (void)v156]);
  swift_endAccess(&v164);
  v118 = (uint64_t)v89;
LABEL_48:
  sub_1002CFD2C(v118);
  ((void (*)(char *, uint64_t))v153)(v162, v163);
}

  char v18 = 0LL;
  if (!v17) {
    goto LABEL_9;
  }
LABEL_12:
  swift_bridgeObjectRetain(v17);
  uint64_t v19 = String._bridgeToObjectiveC()();
  id v11 = swift_bridgeObjectRelease(v17).n128_u64[0];
LABEL_13:
  uint64_t v20 = objc_msgSend(v3, "contactsForEmailHash:phoneHash:", v18, v19, *(double *)&v11);

  if (v20)
  {
    id v21 = sub_100183168(0LL, (unint64_t *)&qword_100646C30, &OBJC_CLASS___CNContact_ptr);
    int v22 = sub_1002E28C8();
    uint64_t v23 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v20, v21, v22);

    uint64_t v10 = v9;
    id v9 = v20;
  }

  else if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0 {
         && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  }
  {
    sub_1001DD1A8((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v23 = v24;
  }

  else
  {
    uint64_t v23 = &_swiftEmptySetSingleton;
  }

  *a2 = v23;
  a2[1] = countAndFlagsBits;
  a2[2] = object;
  a2[3] = v16;
  a2[4] = v17;
}

          uint64_t v27 = __clz(__rbit64(v22));
          v22 &= v22 - 1;
          v73 = v24;
        }
      }

      v37 = v24 + 5;
      if (v24 + 5 < v68)
      {
        v35 = *(void *)(v67 + 8 * v37);
        if (v35)
        {
          uint64_t v36 = v24 + 5;
          goto LABEL_29;
        }

        while (1)
        {
          uint64_t v36 = v37 + 1;
          if (__OFADD__(v37, 1LL)) {
            goto LABEL_39;
          }
          if (v36 >= v68) {
            break;
          }
          v35 = *(void *)(v67 + 8 * v36);
          ++v37;
          if (v35) {
            goto LABEL_29;
          }
        }
      }
    }

      swift_release(a1);

      return;
    }

    uint64_t v23 = type metadata accessor for SDContactChangeHistoryAddEvent();
    __int16 v24 = swift_dynamicCastClass(a1, v23);
    if (v24)
    {
      uint64_t v25 = *(void **)(v24 + 16);
      swift_retain(a1);
      id v21 = v25;
      __int16 v26 = v46;
      sub_1003863A4(v21, a2, a6, a7);
      if (v26) {
        goto LABEL_8;
      }

      swift_release(a1);
      int v33 = v45;
      swift_beginAccess(v45, v47, 1LL, 0LL);
      v34 = *v33 + 1;
      if (!__OFADD__(*v33, 1LL))
      {
LABEL_19:
        *int v33 = v34;
        return;
      }

      __break(1u);
    }

    else
    {
      uint64_t v27 = type metadata accessor for SDContactChangeHistoryDeleteEvent();
      uint64_t v28 = swift_dynamicCastClass(a1, v27);
      if (v28)
      {
        v29 = *(void *)(v28 + 16);
        __int16 v30 = *(const char **)(v28 + 24);
        swift_retain(a1);
        swift_bridgeObjectRetain(v30);
        int v31 = v29;
        __int16 v32 = v46;
        sub_100386614(v31, v30, a2, a6, a7);
        if (v32)
        {
          swift_release(a1);
          swift_bridgeObjectRelease(v30);
          return;
        }

        swift_bridgeObjectRelease(v30);
        swift_release(a1);
        int v33 = v44;
        swift_beginAccess(v44, v47, 1LL, 0LL);
        v34 = *v33 + 1;
        if (__OFADD__(*v33, 1LL))
        {
          __break(1u);
          return;
        }

        goto LABEL_19;
      }
    }

    if (qword_100644228 == -1) {
      goto LABEL_16;
    }
    goto LABEL_23;
  }

  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  swift_once(&qword_100644228, sub_100382454);
LABEL_16:
  v35 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v35, (uint64_t)qword_100651950);
  uint64_t v36 = swift_retain_n(a1, 2LL);
  v37 = (os_log_s *)Logger.logObject.getter(v36);
  v38 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v37, v38))
  {
    v39 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v40 = swift_slowAlloc(32LL, -1LL);
    v47[0] = v40;
    *(_DWORD *)v39 = 136315138;
    v41 = _typeName(_:qualified:)(*a1, 0LL);
    v43 = (const char *)v42;
    v48 = sub_10018CDB4(v41, v42, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v39 + 4, v39 + 12);
    swift_release_n(a1, 2LL);
    swift_bridgeObjectRelease(v43);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Unexpected event: %s", v39, 0xCu);
    swift_arrayDestroy(v40, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1LL, -1LL);
    swift_slowDealloc(v39, -1LL, -1LL);
  }

  else
  {

    swift_release_n(a1, 2LL);
  }

    swift_bridgeObjectRelease(v6, v23);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v25[0] = *v3;
    void *v3 = (const char *)0x8000000000000000LL;
    uint64_t v19 = swift_retain(a2);
    sub_1003BAB40(v19, v9, isUniquelyReferenced_nonNull_native);
    uint64_t v20 = *v3;
    void *v3 = (const char *)v25[0];
    swift_bridgeObjectRelease(v20);
    *__int16 v24 = a2;
    return 1LL;
  }

  if (qword_100644368 != -1) {
    swift_once(&qword_100644368, sub_10041341C);
  }
  BOOL v5 = type metadata accessor for Logger(0LL);
  int v6 = sub_100186DE4(v5, (uint64_t)qword_100654BE0);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  uint64_t v8 = static os_log_type_t.error.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v9 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "Failed to initialize nw_interface, defaulting to loopback",  v9,  2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  uint64_t result = nw_interface_create_with_name("lo0");
  if (result) {
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

id sub_1000126A0(uint64_t a1, int a2)
{
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  else {
    uint64_t v3 = (a1 + 8);
  }
  uint64_t v4 = auto_unlock_log(a1);
  BOOL v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    int v25 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "SDAKSGenerateLocalLTK attested: %d", buf, 8u);
  }

  if (a2)
  {
    uint64_t v7 = auto_unlock_log(v6);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100014BF0(v8, v9, v10, v11, v12, v13, v14, v15);
    }

    goto LABEL_14;
  }

  uint64_t v16 = aks_create_signing_key(0x7FFFFFFFLL, v3, &v23, &v22);
  if ((_DWORD)v16 == -536870212 || !v22)
  {
LABEL_14:
    uint64_t v20 = auto_unlock_log(v16);
    uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      sub_100014B84();
    }
    uint64_t v17 = 0LL;
    goto LABEL_17;
  }

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v23));
  uint64_t v18 = auto_unlock_log(v17);
  uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Generated local key", buf, 2u);
  }

id sub_100012864(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a1;
  id v8 = a3;
  uint64_t v9 = v8;
  uint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  else {
    uint64_t v10 = (a4 + 8);
  }
  else {
    uint64_t v11 = (a2 + 8);
  }
  uint64_t v12 = auto_unlock_log(v8);
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = @"YES";
    *(_DWORD *)buf = 67110659;
    int v29 = 0x7FFFFFFF;
    __int16 v30 = 1024;
    if (v9) {
      uint64_t v15 = @"YES";
    }
    else {
      uint64_t v15 = @"NO";
    }
    int v31 = v10;
    if (!v7) {
      uint64_t v14 = @"NO";
    }
    __int16 v32 = 2112;
    int v33 = v15;
    __int16 v34 = 2113;
    v35 = v9;
    __int16 v36 = 1024;
    int v37 = v11;
    __int16 v38 = 2112;
    v39 = v14;
    __int16 v40 = 2113;
    id v41 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Signing (handle = %d, local class %d, local exists %@, local data %{private}@, remote class %d, remote exists %@, remote data %{private}@)",  buf,  0x3Cu);
  }

  id v16 = v9;
  id v17 = [v16 bytes];
  id v18 = [v16 length];
  id v19 = v7;
  uint64_t v20 = aks_sign_signing_key( 0x7FFFFFFFLL,  v10,  v17,  v18,  v11,  [v19 bytes],  objc_msgSend(v19, "length"),  &v27,  &v26);
  if ((_DWORD)v20 == -536870212 || !v26)
  {
    uint64_t v24 = auto_unlock_log(v20);
    uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      sub_100014C58();
    }
    id v21 = 0LL;
  }

  else
  {
    id v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v27));
    uint64_t v22 = auto_unlock_log(v21);
    uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Signed remote key", buf, 2u);
    }
  }

  if (v27) {
    free(v27);
  }

  return v21;
}

void sub_100012AE4(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = auto_unlock_log(v1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Beginning DCRT retrieval", v4, 2u);
  }

  v1[2](v1, 0LL);
}

uint64_t sub_100012B64(void *a1, void *a2, int a3, _DWORD *a4, int a5)
{
  if (a5) {
    unsigned int v5 = 4;
  }
  else {
    unsigned int v5 = 10;
  }
  if (a3) {
    uint64_t v6 = v5 | 0x80;
  }
  else {
    uint64_t v6 = v5;
  }
  return sub_100012B90(a1, a2, v6, 0LL, 0, a4);
}

uint64_t sub_100012B90(void *a1, void *a2, uint64_t a3, void *a4, int a5, _DWORD *a6)
{
  id v10 = a1;
  id v11 = a2;
  id v12 = a4;
  uint64_t v13 = v12;
  int v60 = 0;
  int v58 = a5;
  if ((a5 & 1) == 0)
  {
    uint64_t v14 = auto_unlock_log(v12);
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v62 = a3;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "SDAKSCreateSession flags: %d", buf, 8u);
    }
  }

  id v57 = v11;
  if (!v10 || !v11)
  {
    uint64_t v16 = auto_unlock_log(v12);
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      if (v10) {
        v50 = @"YES";
      }
      else {
        v50 = @"NO";
      }
      if (v11) {
        v51 = @"YES";
      }
      else {
        v51 = @"NO";
      }
      v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](&OBJC_CLASS___NSThread, "callStackSymbols"));
      *(_DWORD *)buf = 138413571;
      *(void *)v62 = v50;
      *(_WORD *)&v62[8] = 2113;
      *(void *)v63 = v10;
      *(_WORD *)&v63[8] = 2112;
      *(void *)v64 = v51;
      *(_WORD *)&v64[8] = 2113;
      *(void *)v65 = v57;
      *(_WORD *)&v65[8] = 1024;
      *(_DWORD *)v66 = a3;
      *(_WORD *)&v66[4] = 2112;
      *(void *)&v66[6] = v52;
      _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Either local or remoteLTK is nil. This shouldn't happen; expect AKS to throw an error. local exists %@, localKey"
        " = %{private}@,\n"
        " remote exists %@, remoteKey = %{private}@, flags: %d. Callstack:\n"
        "%@",
        buf,
        0x3Au);

      id v11 = v57;
    }
  }

  id v56 = v10;
  id v18 = v10;
  id v19 = [v18 bytes];
  id v20 = [v18 length];
  id v21 = v11;
  id v22 = [v21 bytes];
  id v23 = [v21 length];
  id v24 = v13;
  uint64_t v25 = aks_remote_session( 0x7FFFFFFFLL,  a3,  v19,  v20,  v22,  v23,  [v24 bytes],  objc_msgSend(v24, "length"),  &v60);
  int v26 = v25;
  uint64_t v27 = a6;
  if ((_DWORD)v25 == -536870211)
  {
    uint64_t v28 = auto_unlock_log(v25);
    int v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Received no memory error when creating session, clearing and retrying",  buf,  2u);
    }

    sub_100011FB8(v30);
    int v60 = 0;
    id v31 = v18;
    id v32 = [v31 bytes];
    id v33 = [v31 length];
    id v34 = v21;
    id v35 = [v34 bytes];
    id v36 = [v34 length];
    id v37 = v24;
    uint64_t v25 = aks_remote_session( 0x7FFFFFFFLL,  a3,  v32,  v33,  v35,  v36,  [v37 bytes],  objc_msgSend(v37, "length"),  &v60);
    int v26 = v25;
    uint64_t v27 = a6;
  }

  uint64_t v38 = auto_unlock_log(v25);
  v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v62 = v60;
    _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "Auth session -- create (session id: %d)",  buf,  8u);
  }

  if (!v26)
  {
    uint64_t v43 = v60;
    if (!v27) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }

  if (!v58)
  {
    uint64_t v44 = auto_unlock_log(v40);
    v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
    v46 = v45;
    if (v26 == -536870160)
    {
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)v62 = -536870160;
        _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "Escrow record not found status = %d",  buf,  8u);
      }
    }

    else
    {
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        v53 = @"NO";
        *(_DWORD *)buf = 67110915;
        *(_DWORD *)v62 = v26;
        *(_WORD *)&v62[4] = 1024;
        if (v56) {
          v54 = @"YES";
        }
        else {
          v54 = @"NO";
        }
        *(_DWORD *)&v62[6] = a3;
        if (v57) {
          v55 = @"YES";
        }
        else {
          v55 = @"NO";
        }
        *(_WORD *)v63 = 2112;
        if (v24) {
          v53 = @"YES";
        }
        *(void *)&v63[2] = v54;
        *(_WORD *)v64 = 2113;
        *(void *)&v64[2] = v18;
        *(_WORD *)v65 = 2112;
        *(void *)&v65[2] = v55;
        *(_WORD *)v66 = 2113;
        *(void *)&v66[2] = v21;
        *(_WORD *)&v66[10] = 2112;
        *(void *)&v66[12] = v53;
        __int16 v67 = 2113;
        id v68 = v24;
        _os_log_error_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_ERROR,  "AKS session failure: (status = %d, flags = %d,\n local exists %@, localKey = %{private}@,\n remote exists %@, remoteKey = %{private}@\n secret exists: %@, secret = %{private}@)",  buf,  0x4Au);
      }

      sub_1000122CC(v21);
    }

LABEL_34:
    uint64_t v43 = -1LL;
    if (!v27) {
      goto LABEL_36;
    }
LABEL_35:
    _DWORD *v27 = v26;
    goto LABEL_36;
  }

  if (v26 != -536363000 && v26 != -536870184)
  {
    uint64_t v47 = auto_unlock_log(v40);
    v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v62 = v26;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "got error: %d", buf, 8u);
    }

    goto LABEL_34;
  }

  uint64_t v41 = auto_unlock_log(v40);
  v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Record exists, but not available", buf, 2u);
  }

  uint64_t v43 = 0LL;
  if (v27) {
    goto LABEL_35;
  }
LABEL_36:

  return v43;
}
}

    uint64_t v9 = 0LL;
    goto LABEL_23;
  }

  id v32 = @"ssid";
  id v33 = v4;
  uint64_t v9 = (void *)WiFiCopyNetworkInfo( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v33,  &v32,  1LL),  3LL,  &v29);
  id v10 = v29;
  if (v29 == -6727) {
    goto LABEL_9;
  }
  if (v29)
  {
    if (dword_1006417A0 <= 60)
    {
      if (dword_1006417A0 == -1)
      {
        id v10 = v29;
        if (!v29)
        {
          LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _shouldOfferPassword:]",  60LL,  "### WPS: Unexpected error checking pws sharable: %@\n",  0LL);
          goto LABEL_23;
        }
      }

      id v17 = (int)v10;
      uint64_t v30 = NSLocalizedDescriptionKey;
      id v18 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  DebugGetErrorString(v10, 0LL, 0LL));
      id v19 = objc_claimAutoreleasedReturnValue(v18);
      id v20 = (void *)v19;
      id v21 = @"?";
      if (v19) {
        id v21 = (const __CFString *)v19;
      }
      id v31 = v21;
      id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v31,  &v30,  1LL));
      id v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v17,  v22));
      LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _shouldOfferPassword:]",  60LL,  "### WPS: Unexpected error checking pws sharable: %@\n",  v23);
    }

    id v7 = "?";
    goto LABEL_35;
  }

  if ((int)a3 > 79)
  {
    switch(a3)
    {
      case 'P':
        id v7 = "PasswordSending";
        break;
      case 'Q':
      case 'U':
        goto LABEL_34;
      case 'R':
        id v7 = "PasswordSent";
        break;
      case 'S':
        id v7 = "PasswordReceived";
        break;
      case 'T':
        id v7 = "PasswordAccepted";
        break;
      case 'V':
        id v7 = "PasswordDeclined";
        break;
      default:
        if (a3 != 100) {
          goto LABEL_34;
        }
        id v7 = "Finished";
        break;
    }

    goto LABEL_35;
  }

  if (a3 == 50)
  {
    id v7 = "PreAuthFinish";
    goto LABEL_35;
  }

  if (a3 == 60)
  {
    id v7 = "SecurityStart";
    goto LABEL_35;
  }

  if (a3 != 70) {
    goto LABEL_34;
  }
  id v7 = "SecurityFinished";
LABEL_35:
  uint64_t v9 = &stru_1005E3958;
  if (v6) {
    uint64_t v9 = v6;
  }
  LogPrintF(&dword_1006417A0, "-[SDSetupAgent _pwsHandleProgressEvent:info:]", 30LL, "PWS progress: %s, %@", v7, v9);
  uint64_t v6 = v10;
LABEL_38:
}
  }

    id v8 = 0LL;
    unsigned int v5 = 0LL;
    goto LABEL_23;
  }

  uint64_t v4 = a3;
  if (a3)
  {
    if (dword_1006435F8 <= 30
      && (dword_1006435F8 != -1 || _LogCategory_Initialize(&dword_1006435F8, 30LL)))
    {
      LogPrintF( &dword_1006435F8,  "-[SDAppleIDAgent _ensureThrottledRetryTimerStartedWithSuggestedDelay:]",  30LL,  "Using server suggested delay of %d seconds\n",  v4);
    }

    id v8 = 0LL;
    unsigned int v5 = 0LL;
  }

  else
  {
    sub_1000ED504();
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    uint64_t v6 = sub_1000ED678();
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    id v8 = v7;
    if (!v5 || !v7) {
      goto LABEL_23;
    }
    [v7 timeIntervalSinceDate:v5];
    uint64_t v4 = (unint64_t)v9;
  }

  id v10 = 16LL;
  if (v4 > 0x10) {
    id v10 = v4;
  }
  if (v10 >= 0x15180) {
    id v10 = 86400LL;
  }
  if (v4) {
    id v11 = v10;
  }
  else {
    id v11 = 3600LL;
  }
  id v12 = (OS_dispatch_source *)dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  (dispatch_queue_t)self->_dispatchQueue);
  throttledRetryTimer = self->_throttledRetryTimer;
  self->_throttledRetryTimer = v12;

  uint64_t v14 = self->_throttledRetryTimer;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_100106FB0;
  handler[3] = &unk_1005CB2F8;
  handler[4] = self;
  dispatch_source_set_event_handler((dispatch_source_t)v14, handler);
  SFDispatchTimerSet(self->_throttledRetryTimer, (double)v11, -1.0, -4.0);
  dispatch_resume((dispatch_object_t)self->_throttledRetryTimer);
  if (dword_1006435F8 <= 30 && (dword_1006435F8 != -1 || _LogCategory_Initialize(&dword_1006435F8, 30LL))) {
    LogPrintF( &dword_1006435F8,  "-[SDAppleIDAgent _ensureThrottledRetryTimerStartedWithSuggestedDelay:]",  30LL,  "Started throttled retry timer with delay: %d seconds\n",  v11);
  }
LABEL_23:
}

  caRequests = self->_caRequests;
  if (!caRequests)
  {
    uint64_t v15 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    uint64_t v16 = self->_caRequests;
    self->_caRequests = v15;

    caRequests = self->_caRequests;
  }

  -[NSMutableSet addObject:](caRequests, "addObject:", v4);
  -[SDNearbyAgent _update](self, "_update");
  if ([v4 type] == (id)1)
  {
    id v8 = 0LL;
    id v12 = 0LL;
    ++self->_caMessageScans;
    caMessageNoScans = self->_caMessageNoScans;
    id v18 = 1;
    goto LABEL_53;
  }

          id v17 = 0LL;
LABEL_15:

          goto LABEL_16;
        }

        if (dword_100643B70 <= 60
          && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 60LL)))
        {
          LogPrintF( &dword_100643B70,  "-[SDNearbyAgent sessionSendEvent:session:]",  60LL,  "### Send Remote app message to %@ with no connection\n",  v13);
        }
      }

      else if (dword_100643B70 <= 60 {
             && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 60LL)))
      }
      {
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent sessionSendEvent:session:]",  60LL,  "### Send Remote app message with no device identifier\n");
      }

      uint64_t v15 = 0LL;
      goto LABEL_34;
    }
  }

  -[SDNearbyAgent _sendMessage:frameType:service:session:]( self,  "_sendMessage:frameType:service:session:",  v6,  8LL,  0LL,  v7);
LABEL_16:
}
      }

      uint64_t v15 = [obj countByEnumeratingWithState:&v37 objects:v42 count:16];
      if (v15) {
        continue;
      }
      break;
    }
  }

  else
  {
    uint64_t v9 = 0LL;
    uint64_t v16 = 0LL;
  }

  id v7 = 0LL;
  uint64_t v25 = 201204;
  id v8 = v16;
  id v11 = v29;
  a2 = v30;
  id v10 = v28;
LABEL_44:
  if (a2) {
    *a2 = v25;
  }
  int v26 = v7;

  return v26;
}

    id v10 = (v24 - 1) & v24;
    id v18 = __clz(__rbit64(v24)) + (v8 << 6);
    goto LABEL_35;
  }

  __break(1u);
}

  swift_release(v34);
  v48 = v56;
  v49 = (uint64_t *)(v56 + OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropEndpointService_transferringConnectables);
  swift_beginAccess( v56 + OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropEndpointService_transferringConnectables,  v60,  1LL,  0LL);
  v50 = *v49;
  *v49 = (uint64_t)&_swiftEmptySetSingleton;
  swift_bridgeObjectRelease(v50);
  v51 = *v55;
  CFStringRef v55 = (uint64_t)&_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(v51);
  v52 = (uint64_t *)(v48 + OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropEndpointService_receivingDisplayables);
  swift_beginAccess( v48 + OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropEndpointService_receivingDisplayables,  v59,  1LL,  0LL);
  v53 = *v52;
  void *v52 = (uint64_t)&_swiftEmptyDictionarySingleton;
  return swift_bridgeObjectRelease(v53);
}

  __break(1u);
}

        v258 = v119;
        v262 = v118;
        v124 = (os_log_s *)Logger.logObject.getter(v111);
        v125 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v124, v125))
        {
          v126 = *(_DWORD *)(v1 + 904);
          v127 = swift_slowAlloc(14LL, -1LL);
          *(_DWORD *)v127 = 67109376;
          *(_DWORD *)(v1 + 864) = v126;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 864, v1 + 868, v127 + 4, v127 + 8);
          *(_WORD *)(v127 + _Block_object_dispose((const void *)(v36 - 144), 8) = 1024;
          *(_DWORD *)(v1 + 86_Block_object_dispose((const void *)(v36 - 144), 8) = v110 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 868, v1 + 872, v127 + 10, v127 + 14);
          _os_log_impl( (void *)&_mh_execute_header,  v124,  v125,  "Ask request END - Accept {didAutoAccept: %{BOOL}d, shouldExtractMedia: %{BOOL}d}",  (uint8_t *)v127,  0xEu);
          swift_slowDealloc(v127, -1LL, -1LL);
        }

        v255 = v110;
        v128 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 736);
        v129 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 728);
        v248 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 712);
        v130 = *(void *)(v1 + 624);
        v241 = *(void *)(v1 + 608);
        v131 = *(void *)(v1 + 600);
        v132 = *(void *)(v1 + 552);
        v133 = *(void *)(v1 + 520);
        v134 = *(void *)(v1 + 504);

        v136 = CurrentValueSubject.value.getter(v135);
        SFAirDropReceive.Transfer.askRequest.getter(v136);
        v137 = v129(v131, v132);
        SFAirDropReceive.AskRequest.type.getter(v137);
        v138 = v128(v133, v134);
        v139 = SFAirDrop.TransferType.isFiles.getter(v138);
        v140 = v248(v130, v241);
        if ((v139 & 1) != 0)
        {
          v141 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 736);
          v142 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 728);
          v143 = *(void *)(v1 + 600);
          v144 = *(void *)(v1 + 552);
          v145 = *(void *)(v1 + 520);
          v146 = *(void *)(v1 + 504);
          v147 = CurrentValueSubject.value.getter(v140);
          SFAirDropReceive.Transfer.askRequest.getter(v147);
          v148 = v142(v143, v144);
          v149 = SFAirDropReceive.AskRequest.senderIsMe.getter(v148);
          v150 = v141(v145, v146);
          if ((v149 & 1) == 0)
          {
            v151 = *(void (**)(uint64_t, uint64_t))(v1 + 728);
            v152 = *(void *)(v1 + 600);
            v153 = *(void *)(v1 + 552);
            v154 = CurrentValueSubject.value.getter(v150);
            SFAirDropReceive.Transfer.isPreviewSensitive.getter(v154);
            v151(v152, v153);
          }
        }

        v155 = *(void *)(v1 + 456);
        v249 = *(void (**)(void, uint64_t, uint64_t))(*(void *)(v1 + 640) + 16LL);
        v249(*(void *)(v1 + 648), *(void *)(v1 + 680), *(void *)(v1 + 632));
        v156 = swift_retain_n(v155, 2LL);
        v157 = (os_log_s *)Logger.logObject.getter(v156);
        v158 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v157, v158))
        {
          v159 = *(void (**)(uint64_t, uint64_t))(v1 + 728);
          v242 = *(void *)(v1 + 640);
          v221 = *(void *)(v1 + 632);
          v223 = *(void *)(v1 + 648);
          v160 = *(void *)(v1 + 600);
          v161 = *(void *)(v1 + 552);
          v162 = *(void *)(v1 + 520);
          v213 = *(void *)(v1 + 504);
          v215 = *(void *)(v1 + 456);
          v217 = *(void (**)(uint64_t, uint64_t))(v1 + 736);
          v163 = swift_slowAlloc(34LL, -1LL);
          v232 = swift_slowAlloc(64LL, -1LL);
          v264[0] = v232;
          *(_DWORD *)v163 = 67109890;
          typea = v158;
          v164 = CurrentValueSubject.value.getter(v232);
          v165 = SFAirDropReceive.Transfer.isPreviewSensitive.getter(v164);
          v159(v160, v161);
          *(_DWORD *)(v1 + 876) = v165 & 1;
          v166 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 876, v1 + 880, v163 + 4, v163 + 8);
          *(_WORD *)(v163 + _Block_object_dispose((const void *)(v36 - 144), 8) = 1024;
          v167 = CurrentValueSubject.value.getter(v166);
          SFAirDropReceive.Transfer.askRequest.getter(v167);
          v168 = ((uint64_t (*)(uint64_t, uint64_t))v159)(v160, v161);
          v169 = SFAirDropReceive.AskRequest.senderIsMe.getter(v168);
          v217(v162, v213);
          swift_release(v215);
          *(_DWORD *)(v1 + 872) = v169 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 872, v1 + 876, v163 + 10, v163 + 14);
          swift_release(v215);
          *(_WORD *)(v163 + 14) = 2080;
          *(void *)(v1 + 424) = sub_10018CDB4(0xD000000000000021LL, 0x8000000100507330LL, v264);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 424, v1 + 432, v163 + 16, v163 + 24);
          *(_WORD *)(v163 + 24) = 2080;
          v170 = sub_100183F14( &qword_100650C20,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
          v171 = dispatch thunk of CustomStringConvertible.description.getter(v221, v170);
          v173 = (const char *)v172;
          *(void *)(v1 + 432) = sub_10018CDB4(v171, v172, v264);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 432, v1 + 440, v163 + 26, v163 + 34);
          v174 = swift_bridgeObjectRelease(v173);
          v175 = *(void (**)(uint64_t, uint64_t, __n128))(v242 + 8);
          v175(v223, v221, v174);
          _os_log_impl( (void *)&_mh_execute_header,  v157,  typea,  "Ask sensitive preview SKIP. {transfer.isPreviewSensitive: %{BOOL}d, isSenderMe: %{BOOL}d, userSafetyMode: %s , askStepDestination: %s}",  (uint8_t *)v163,  0x22u);
          swift_arrayDestroy(v232, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v232, -1LL, -1LL);
          swift_slowDealloc(v163, -1LL, -1LL);
        }

        else
        {
          v176 = *(void *)(v1 + 648);
          v177 = *(void *)(v1 + 640);
          v178 = *(void *)(v1 + 632);
          v179 = *(void *)(v1 + 456);

          swift_release_n(v179, 2LL);
          v175 = *(void (**)(uint64_t, uint64_t, __n128))(v177 + 8);
          ((void (*)(uint64_t, uint64_t))v175)(v176, v178);
        }

        v180 = v249;
        v181 = *(void *)(v1 + 680);
        v182 = *(void *)(v1 + 672);
        v183 = *(void *)(v1 + 664);
        v184 = *(void *)(v1 + 656);
        v185 = *(void *)(v1 + 648);
        v186 = *(void *)(v1 + 632);
        v187 = *(void *)(v1 + 624);
        v214 = *(void *)(v1 + 600);
        v216 = *(void *)(v1 + 592);
        v218 = *(void *)(v1 + 584);
        v219 = *(void *)(v1 + 576);
        v220 = *(void *)(v1 + 568);
        v222 = *(void *)(v1 + 544);
        v224 = *(void *)(v1 + 536);
        *(void *)typeb = *(void *)(v1 + 528);
        v233 = *(void *)(v1 + 520);
        v237 = *(void *)(v1 + 496);
        v243 = *(void *)(v1 + 472);
        v250 = *(void *)(v1 + 464);
        v180(*(void *)(v1 + 440), v181, v186);
        SFAirDropReceive.AcceptContext.init(shouldExtractMedia:customPayload:)(v255 & 1, v262, v258);
        ((void (*)(uint64_t, uint64_t))v175)(v181, v186);
        swift_task_dealloc(v181);
        swift_task_dealloc(v182);
        swift_task_dealloc(v183);
        swift_task_dealloc(v184);
        swift_task_dealloc(v185);
        swift_task_dealloc(v187);
        swift_task_dealloc(v214);
        swift_task_dealloc(v216);
        swift_task_dealloc(v218);
        swift_task_dealloc(v219);
        swift_task_dealloc(v220);
        swift_task_dealloc(v222);
        swift_task_dealloc(v224);
        swift_task_dealloc(*(void *)typeb);
        swift_task_dealloc(v233);
        swift_task_dealloc(v237);
        swift_task_dealloc(v243);
        swift_task_dealloc(v250);
        v188 = *(uint64_t (**)(void))(v1 + 8);
        return v188();
      }

      v118 = 0LL;
    }

    else
    {
      v113 = v1 + 908;
      v114 = *v256;
      *(_OWORD *)(v1 + 336) = 0u;
      *(_OWORD *)(v1 + 352) = 0u;
      *(void *)(v1 + 36_Block_object_dispose((const void *)(v36 - 144), 8) = 0LL;
      v111 = sub_100187100(v1 + 336, &qword_100650CA8);
      if (v114 == 1)
      {
        v110 = 0;
        v112 = *(void *)(v1 + 640);
        v107 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v112 + 16);
        goto LABEL_26;
      }

      v118 = 0LL;
      v110 = 0;
    }

    v119 = 0xF000000000000000LL;
    goto LABEL_34;
  }

  v77 = (os_log_s *)Logger.logObject.getter(v76);
  v78 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v77, v78))
  {
    v79 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)v79 = 0;
    _os_log_impl((void *)&_mh_execute_header, v77, v78, "Waiting for permission request task", v79, 2u);
    swift_slowDealloc(v79, -1LL, -1LL);
  }

  v80 = *(void *)(v1 + 744);
  v82 = *(void *)(v1 + 456);
  v81 = *(void *)(v1 + 464);

  sub_10019A6C4(v82 + v80, v1 + 216);
  v83 = *(void *)(v1 + 240);
  v84 = *(void *)(v1 + 248);
  v85 = sub_10019A708((void *)(v1 + 216), v83);
  CurrentValueSubject.value.getter(v85);
  v86 = *(void *)(v82 + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine6Runner_receiveHandler)
      + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_transferContinuation;
  v87 = sub_100183098(&qword_1006457D8);
  v88 = *(void *)(v87 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 16))(v81, v86, v87);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v88 + 56))(v81, 0LL, 1LL, v87);
  v89 = (void *)swift_task_alloc(dword_10065297C);
  *(void *)(v1 + 776) = v89;
  *v89 = v1;
  v89[1] = sub_100357A64;
  return sub_1003C7634(*(void *)(v1 + 472), *(void *)(v1 + 568), *(void *)(v1 + 464), v83, v84);
}

  __break(1u);
  return result;
}

  id v36 = SFAirDropReceive.AskRequest.files.getter(v10);
  id v37 = *(void *)(v36 + 16);
  swift_bridgeObjectRelease((const char *)v36);
  if (*(_BYTE *)(v3 + v13) == 1)
  {
    uint64_t v38 = sub_100183098((uint64_t *)&unk_100650440);
    v39 = swift_initStackObject(v38, v110);
    *(_OWORD *)(v39 + 16) = xmmword_1004CDCA0;
    *(void *)(v39 + 32) = 0x4F544F4850LL;
    uint64_t v40 = v39 + 32;
    *(void *)(v39 + 40) = 0xE500000000000000LL;
    *(void *)(v39 + 4_Block_object_dispose((const void *)(v36 - 144), 8) = v37;
    v111 = 0x545F4E5245444F4DLL;
    v112 = 0xEF524546534E4152LL;
    *(void *)&uint64_t v41 = swift_bridgeObjectRetain((const char *)0xE500000000000000LL).n128_u64[0];
    swift_bridgeObjectRetain((const char *)v39, v41);
    v42._countAndFlagsBits = 95LL;
    v42._object = (void *)0xE100000000000000LL;
    String.append(_:)(v42);
    uint64_t v43 = 1414482000LL;
  }

  else
  {
    if (*(_BYTE *)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary29SDAirDropContentHandlerPhotos_hasVideos) != 1) {
      return;
    }
    uint64_t v44 = sub_100183098((uint64_t *)&unk_100650440);
    v39 = swift_initStackObject(v44, v113);
    *(_OWORD *)(v39 + 16) = xmmword_1004CDCA0;
    *(void *)(v39 + 32) = 0x4F45444956LL;
    uint64_t v40 = v39 + 32;
    *(void *)(v39 + 40) = 0xE500000000000000LL;
    *(void *)(v39 + 4_Block_object_dispose((const void *)(v36 - 144), 8) = v37;
    v111 = 0x545F4E5245444F4DLL;
    v112 = 0xEF524546534E4152LL;
    *(void *)&v45 = swift_bridgeObjectRetain((const char *)0xE500000000000000LL).n128_u64[0];
    swift_bridgeObjectRetain((const char *)v39, v45);
    v46._countAndFlagsBits = 95LL;
    v46._object = (void *)0xE100000000000000LL;
    String.append(_:)(v46);
    uint64_t v43 = 1162103126LL;
  }

  v47._countAndFlagsBits = v43 & 0xFFFF0000FFFFFFFFLL | 0x4F00000000LL;
  v47._object = (void *)0xE500000000000000LL;
  String.append(_:)(v47);
  swift_bridgeObjectRelease((const char *)0xE500000000000000LL);
  if (v37 > 1)
  {
    v48._countAndFlagsBits = 0x4C4152554C505FLL;
    v48._object = (void *)0xE700000000000000LL;
    String.append(_:)(v48);
  }

  swift_bridgeObjectRelease((const char *)v39);
  if ((v4 & 1) != 0)
  {
    v49._countAndFlagsBits = 0x4C4154495041435FLL;
    v49._object = (void *)0xEC00000044455A49LL;
    String.append(_:)(v49);
  }

  v50._countAndFlagsBits = 0x545845545FLL;
  v50._object = (void *)0xE500000000000000LL;
  String.append(_:)(v50);
  v51 = (const char *)v112;
  swift_setDeallocating(v39);
  v52 = *(void *)(v39 + 16);
  v53 = sub_100183098(&qword_100646EA0);
  swift_arrayDestroy(v40, v52, v53);
  v54 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v51);
  id v56 = (id)SFLocalizedStringForKey(v54, v55);

  if (v56)
  {
    id v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
    v59 = v58;

    int v60 = sub_100183098(&qword_1006483E0);
    v61 = swift_allocObject(v60, 72LL, 7LL);
    *(_OWORD *)(v61 + 16) = xmmword_1004CDCA0;
    *(void *)(v61 + 56) = &type metadata for Int;
    *(void *)(v61 + 64) = &protocol witness table for Int;
    *(void *)(v61 + 32) = v37;
    v62 = v57;
    goto LABEL_44;
  }

              sub_100187094(v2);
              return;
            }
          }
        }
      }
    }

      static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

      return v1;
    case 5:
      goto LABEL_5;
    case 12:
      goto LABEL_8;
    case 17:
      goto LABEL_11;
    case 18:
      goto LABEL_14;
    case 19:
      goto LABEL_17;
    case 20:
      goto LABEL_20;
    case 23:
      return v1;
    case 25:
      goto LABEL_23;
    case 26:
      goto LABEL_26;
    case 27:
      goto LABEL_29;
    default:
      goto LABEL_32;
  }

uint64_t sub_100013154(void *a1, void *a2, int a3, _DWORD *a4)
{
  if (a3) {
    uint64_t v4 = 129LL;
  }
  else {
    uint64_t v4 = 1LL;
  }
  return sub_100012B90(a1, a2, v4, 0LL, 0, a4);
}

uint64_t sub_100013170(void *a1, void *a2, int a3, int a4, int a5, void *a6, _DWORD *a7)
{
  return sub_1000131A0(a1, a2, a3, a4, a5, 0, a6, 0, a7);
}

uint64_t sub_1000131A0(void *a1, void *a2, int a3, int a4, int a5, int a6, void *a7, int a8, _DWORD *a9)
{
  if (a3) {
    int v15 = 128;
  }
  else {
    int v15 = 0;
  }
  if (a5) {
    v15 |= 7u;
  }
  if (a7) {
    int v16 = 1;
  }
  else {
    int v16 = a4;
  }
  if (v16) {
    int v17 = 5;
  }
  else {
    int v17 = 2;
  }
  unsigned int v18 = v17 | v15;
  unsigned int v19 = v15 | 0x100;
  if (a6) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = v18;
  }
  id v21 = a7;
  id v22 = a2;
  id v23 = a1;
  uint64_t v24 = auto_unlock_log(v23);
  uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    int v26 = @"NO";
    if (a3) {
      uint64_t v27 = @"YES";
    }
    else {
      uint64_t v27 = @"NO";
    }
    if (a5) {
      uint64_t v28 = @"YES";
    }
    else {
      uint64_t v28 = @"NO";
    }
    int v32 = 138413058;
    id v33 = v27;
    if (a4) {
      int v29 = @"YES";
    }
    else {
      int v29 = @"NO";
    }
    __int16 v34 = 2112;
    id v35 = v28;
    __int16 v36 = 2112;
    id v37 = v29;
    if (v21) {
      int v26 = @"YES";
    }
    __int16 v38 = 2112;
    v39 = v26;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Creating auth session. originator: %@, usingAuthRecord: %@, usingEscrow: %@, escrowSecret: %@",  (uint8_t *)&v32,  0x2Au);
  }

  uint64_t v30 = sub_100012B90(v23, v22, v20, v21, a8, a9);
  return v30;
}

uint64_t sub_10001334C(void *a1, void *a2, int a3, int a4, int a5, void *a6, int a7, _DWORD *a8)
{
  id v15 = a6;
  id v16 = a2;
  id v17 = a1;
  uint64_t v18 = auto_unlock_log(v17);
  unsigned int v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = @"NO";
    if (a3) {
      id v21 = @"YES";
    }
    else {
      id v21 = @"NO";
    }
    if (a5) {
      id v22 = @"YES";
    }
    else {
      id v22 = @"NO";
    }
    int v28 = 138413058;
    int v29 = v21;
    if (a4) {
      id v23 = @"YES";
    }
    else {
      id v23 = @"NO";
    }
    __int16 v30 = 2112;
    id v31 = v22;
    __int16 v32 = 2112;
    id v33 = v23;
    if (v15) {
      uint64_t v20 = @"YES";
    }
    __int16 v34 = 2112;
    id v35 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Creating bio arm session. originator: %@, usingAuthRecord: %@, usingEscrow: %@, escrowSecret: %@",  (uint8_t *)&v28,  0x2Au);
  }

  if (a3) {
    int v24 = 128;
  }
  else {
    int v24 = 0;
  }
  if (a5) {
    v24 |= 4u;
  }
  uint64_t v25 = v24 | 0xBu;

  uint64_t v26 = sub_100012B90(v17, v16, v25, v15, a7, a8);
  return v26;
}

uint64_t sub_1000134D8(void *a1, void *a2, int a3, int a4, int a5, void *a6, int a7, _DWORD *a8)
{
  id v15 = a6;
  id v16 = a2;
  id v17 = a1;
  uint64_t v18 = auto_unlock_log(v17);
  unsigned int v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = @"NO";
    if (a3) {
      id v21 = @"YES";
    }
    else {
      id v21 = @"NO";
    }
    if (a5) {
      id v22 = @"YES";
    }
    else {
      id v22 = @"NO";
    }
    int v28 = 138413058;
    int v29 = v21;
    if (a4) {
      id v23 = @"YES";
    }
    else {
      id v23 = @"NO";
    }
    __int16 v30 = 2112;
    id v31 = v22;
    __int16 v32 = 2112;
    id v33 = v23;
    if (v15) {
      uint64_t v20 = @"YES";
    }
    __int16 v34 = 2112;
    id v35 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Creating assert delay session. originator: %@, usingAuthRecord: %@, usingEscrow: %@, escrowSecret: %@",  (uint8_t *)&v28,  0x2Au);
  }

  if (a3) {
    int v24 = 128;
  }
  else {
    int v24 = 0;
  }
  if (a5) {
    v24 |= 3u;
  }
  uint64_t v25 = v24 | 0xCu;

  uint64_t v26 = sub_100012B90(v17, v16, v25, v15, a7, a8);
  return v26;
}

uint64_t sub_100013660(void *a1, void *a2, void *a3, _DWORD *a4)
{
  return sub_100012B90(a1, a2, 7LL, a3, 0, a4);
}

id sub_100013674(uint64_t a1)
{
  uint64_t v6 = 0LL;
  id v7 = 0LL;
  uint64_t v1 = aks_remote_session_token(a1, &v7, &v6);
  if ((_DWORD)v1 == -536870212)
  {
    uint64_t v2 = auto_unlock_log(v1);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_100014CC4();
    }

    uint64_t v4 = 0LL;
  }

  else
  {
    if (!v7)
    {
      uint64_t v4 = 0LL;
      return v4;
    }

    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v7, v6));
  }

  if (v7) {
    free(v7);
  }
  return v4;
}

BOOL sub_10001371C(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = auto_unlock_log(v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Disabling AKS escrow record", buf, 2u);
  }

  id v7 = v4;
  id v8 = [v7 bytes];
  id v9 = [v7 length];

  id v10 = v3;
  id v11 = [v10 bytes];
  id v12 = [v10 length];

  uint64_t v13 = aks_remote_session(0x7FFFFFFFLL, 3LL, v8, v9, v11, v12, 0LL, 0LL, 0LL);
  int v14 = v13;
  if ((_DWORD)v13 == -536870212)
  {
    uint64_t v15 = auto_unlock_log(v13);
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      sub_100014CF0();
    }
  }

  return v14 != -536870212;
}

BOOL sub_100013858(uint64_t a1, id a2, void *a3)
{
  uint64_t v16 = 0LL;
  id v17 = 0LL;
  id v5 = a2;
  id v6 = [v5 bytes];
  id v7 = [v5 length];

  uint64_t v8 = aks_remote_session_step(a1, v6, v7, &v17, &v16);
  int v9 = v8;
  uint64_t v10 = auto_unlock_log(v8);
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    int v19 = v9;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Step status: %d", buf, 8u);
  }

  if (v9)
  {
    uint64_t v13 = auto_unlock_log(v12);
    int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_100014D1C();
    }
  }

  else if (a3)
  {
    *a3 = (id)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  v17,  v16));
  }

  if (v17) {
    free(v17);
  }
  return v9 == 0;
}

id sub_1000139BC(uint64_t a1)
{
  uint64_t v13 = 0LL;
  int v14 = 0LL;
  uint64_t v1 = aks_remote_peer_confirm(a1, &v14, &v13);
  if ((_DWORD)v1 == -536870212 || v13 == 0)
  {
    uint64_t v3 = auto_unlock_log(v1);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100014D48((uint64_t)&v13, v4, v5, v6, v7, v8, v9, v10);
    }

    id v11 = 0LL;
  }

  else
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v14));
  }

  if (v14) {
    free(v14);
  }
  return v11;
}

uint64_t sub_100013A60(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3 && (id v3 = [v3 length]) != 0)
  {
    id v5 = objc_claimAutoreleasedReturnValue([v4 dataUsingEncoding:4]);
    uint64_t v6 = aks_remote_peer_setup(a1, [v5 bytes], objc_msgSend(v5, "length"), 0, 0);
    uint64_t v7 = v6;
    if ((_DWORD)v6)
    {
      if ((_DWORD)v6 == -536870194)
      {
        uint64_t v8 = auto_unlock_log(v6);
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          sub_100014E10();
        }
        uint64_t v7 = 147LL;
      }

      else
      {
        uint64_t v12 = auto_unlock_log(v6);
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          sub_100014DB0();
        }
        uint64_t v7 = 172LL;
      }
    }
  }

  else
  {
    uint64_t v10 = auto_unlock_log(v3);
    id v5 = (id)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = @"YES";
      if (!v4) {
        id v11 = @"NO";
      }
      int v14 = 138412290;
      uint64_t v15 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v5,  OS_LOG_TYPE_DEFAULT,  "Missing passcode (exists: %@)",  (uint8_t *)&v14,  0xCu);
    }

    uint64_t v7 = 175LL;
  }

  return v7;
}

uint64_t sub_100013BFC(uint64_t a1)
{
  uint64_t v1 = aks_remote_peer_setup(a1, 0LL, 0LL, 0LL, 0LL);
  if (!(_DWORD)v1) {
    return 0LL;
  }
  uint64_t v2 = auto_unlock_log(v1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_100014E3C();
  }

  return 172LL;
}

BOOL sub_100013C68(uint64_t a1)
{
  int v1 = a1;
  uint64_t v2 = aks_remote_peer_confirm(a1, 0LL, 0LL);
  int v3 = v2;
  uint64_t v4 = auto_unlock_log(v2);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109376;
    v7[1] = v1;
    __int16 v8 = 1024;
    int v9 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Auth session -- peer_confirm (session id: %d), status=%d",  (uint8_t *)v7,  0xEu);
  }

  return v3 != -536870212;
}

BOOL sub_100013D3C(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log(a1);
  int v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a1;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Auth session -- reset (session id: %d)",  (uint8_t *)v5,  8u);
  }

  return aks_reset_session(a1) != -536870212;
}

id sub_100013DF4(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  v78[0] = 0;
  uint64_t v76 = 0LL;
  uint64_t v77 = 0LL;
  uint64_t v74 = 0LL;
  uint64_t v75 = 0LL;
  uint64_t v72 = 0LL;
  uint64_t v73 = 0LL;
  uint64_t v70 = 0LL;
  uint64_t v71 = 0LL;
  uint64_t v68 = 0LL;
  uint64_t v69 = 0LL;
  uint64_t v67 = 0LL;
  uint64_t v65 = 0LL;
  v66 = 0LL;
  uint64_t v62 = 0LL;
  v63 = &v62;
  uint64_t v64 = 0x2020000000LL;
  uint64_t v58 = 0LL;
  v59 = &v58;
  uint64_t v60 = 0x2020000000LL;
  uint64_t v61 = 0LL;
  v54 = v3;
  if (!v3)
  {
    uint64_t v44 = auto_unlock_log(v4);
    uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      sub_100014E9C();
    }
    goto LABEL_70;
  }

  id v6 = v3;
  id v7 = [v6 UTF8String];
  id v8 = [v6 length];
  uint64_t v9 = auto_unlock_log(v8);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Authorization Test: Creating keybags", buf, 2u);
  }

  uint64_t v11 = aks_remote_session_reset_all();
  if ((_DWORD)v11) {
    goto LABEL_48;
  }
  uint64_t v12 = auto_unlock_log(v11);
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Authorization Test: Creating LTKs", buf, 2u);
  }

  uint64_t v14 = aks_create_signing_key(4294967293LL, 11LL, &v77, &v75);
  if ((_DWORD)v14)
  {
    uint64_t v45 = auto_unlock_log(v14);
    uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      sub_100015114();
    }
    goto LABEL_70;
  }

  uint64_t v15 = aks_create_signing_key(v78[0], 9LL, &v76, &v74);
  if ((_DWORD)v15)
  {
    uint64_t v46 = auto_unlock_log(v15);
    uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      sub_1000150A8();
    }
    goto LABEL_70;
  }

  uint64_t v16 = aks_sign_signing_key(4294967293LL, 11LL, v77, v75, 9LL, v76, v74, &v72, &v70, v3);
  if ((_DWORD)v16)
  {
    uint64_t v47 = auto_unlock_log(v16);
    uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      sub_10001503C();
    }
    goto LABEL_70;
  }

  uint64_t v17 = aks_sign_signing_key(v78[0], 9LL, v76, v74, 11LL, v77, v75, &v73, &v71, v54);
  if ((_DWORD)v17)
  {
    uint64_t v48 = auto_unlock_log(v17);
    uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      sub_100014FD0();
    }
    goto LABEL_70;
  }

  uint64_t v18 = auto_unlock_log(v17);
  int v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Authorization Test: Enabling test keybag",  buf,  2u);
  }

  uint64_t v20 = aks_remote_peer_confirm(v69, &v68, &v67);
  if ((_DWORD)v20) {
    goto LABEL_48;
  }
  uint64_t v21 = auto_unlock_log(v20);
  id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Authorization Test: Creating ACM context",  buf,  2u);
  }

  if (!v5)
  {
    ACMContextCreate((uint64_t *)&v66);
    v56[0] = _NSConcreteStackBlock;
    v56[1] = 3221225472LL;
    v56[2] = sub_1000146F8;
    v56[3] = &unk_1005CB298;
    v56[4] = &v62;
    v56[5] = &v58;
    ACMContextGetExternalForm(v66, (uint64_t)v56);
    if (v63[3])
    {
      uint64_t v27 = ACMContextContainsCredentialTypeEx(v66, 9, 0);
      if ((_DWORD)v27)
      {
        id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v63[3], v59[3]));
        free((void *)v63[3]);
        v63[3] = 0LL;
        goto LABEL_28;
      }

      uint64_t v53 = auto_unlock_log(v27);
      uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
        sub_100014EF4();
      }
    }

    else
    {
      uint64_t v52 = auto_unlock_log(v26);
      uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
        sub_100014EC8();
      }
    }

    id v5 = 0LL;
    goto LABEL_70;
  }

  id v5 = v5;
  id v23 = ACMContextCreateWithExternalForm([v5 bytes], (uint64_t)objc_msgSend(v5, "length"));
  v66 = v23;
  if (!v23)
  {
    uint64_t v24 = auto_unlock_log(0LL);
    uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      sub_100014FA4();
    }
    goto LABEL_70;
  }

LABEL_70:
      uint64_t v40 = 0LL;
LABEL_42:

      goto LABEL_43;
    }
  }

                      v177 = (v73 - 1) & v73;
                      v178 = v72;
                      uint64_t v70 = __clz(__rbit64(v73)) + (v72 << 6);
                    }

                    break;
                  }

                  uint64_t v75 = *(void *)(*(void *)(v175 + 48) + 8 * v70);
                  uint64_t v76 = *(uint64_t (**)(uint64_t))v172;
                  uint64_t v77 = *(void *)(v172 + 8);
                  swift_retain();
                  v174 = v75;
                  v78 = v76(v75);
                  swift_release(v77);
                  if ((v78 & 0xC000000000000001LL) != 0)
                  {
                    id v3 = (uint64_t)&_swiftEmptySetSingleton;
                    v191[0] = (uint64_t)&_swiftEmptySetSingleton;
                    if (v78 < 0) {
                      v79 = v78;
                    }
                    else {
                      v79 = v78 & 0xFFFFFFFFFFFFFF8LL;
                    }
                    v80 = __CocoaSet.makeIterator()(v79);
                    v81 = __CocoaSet.Iterator.next()(v80);
                    if (v81)
                    {
                      v82 = v81;
                      v83 = sub_100183168(0LL, (unint64_t *)&unk_10064B7B0, &OBJC_CLASS___SFAutoUnlockDevice_ptr);
LABEL_79:
                      _DWORD *v66 = v82;
                      swift_dynamicCast(v65, v66, (char *)&type metadata for Swift.AnyObject + 8, v83, 7LL);
                      uint64_t v52 = 0LL;
                      v84 = sub_10046165C(v65, v1);
                      v85 = *v65;
                      if ((v84 & 1) == 0)
                      {

                        goto LABEL_78;
                      }

                      v86 = *(void *)(v3 + 16);
                      if (*(void *)(v3 + 24) <= v86)
                      {
                        sub_1003B8014(v86 + 1);
                        id v3 = v191[0];
                      }

                      v63 = NSObject._rawHashValue(seed:)(*(void *)(v3 + 40));
                      v87 = v3 + 56;
                      v88 = -1LL << *(_BYTE *)(v3 + 32);
                      v89 = v63 & ~v88;
                      v90 = v89 >> 6;
                      if (((-1LL << v89) & ~*(void *)(v3 + 56 + 8 * (v89 >> 6))) != 0)
                      {
                        v91 = __clz(__rbit64((-1LL << v89) & ~*(void *)(v3 + 56 + 8 * (v89 >> 6)))) | v89 & 0x7FFFFFFFFFFFFFC0LL;
                        goto LABEL_92;
                      }

                      v92 = 0;
                      v93 = (unint64_t)(63 - v88) >> 6;
                      while (++v90 != v93 || (v92 & 1) == 0)
                      {
                        v94 = v90 == v93;
                        if (v90 == v93) {
                          v90 = 0LL;
                        }
                        v92 |= v94;
                        v95 = *(void *)(v87 + 8 * v90);
                        if (v95 != -1)
                        {
                          v91 = __clz(__rbit64(~v95)) + (v90 << 6);
LABEL_92:
                          *(void *)(v87 + ((v91 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v91;
                          *(void *)(*(void *)(v3 + 48) + 8 * v91) = v85;
                          ++*(void *)(v3 + 16);
LABEL_78:
                          v82 = __CocoaSet.Iterator.next()(v63);
                          if (!v82) {
                            goto LABEL_93;
                          }
                          goto LABEL_79;
                        }
                      }

                      __break(1u);
                      goto LABEL_159;
                    }

LABEL_48:
  uint64_t v40 = 0LL;
LABEL_43:
  v42 = (void *)v63[3];
  if (v42) {
    free(v42);
  }
  if (v66) {
    ACMContextDelete(v66, 0);
  }
  _Block_object_dispose(&v58, 8);
  _Block_object_dispose(&v62, 8);

  return v40;
}

    int v19 = -[SDAutoUnlockPairingLockSession setErrorType:](v54, "setErrorType:", v55);
    uint64_t v16 = 119;
    goto LABEL_49;
  }

  uint64_t v26 = auto_unlock_log(v14);
  uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingLockSession sessionCreatedMessage](self, "sessionCreatedMessage"));
    uint64_t v73 = 67109120;
    LODWORD(v74) = [v28 version];
    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Pairing session version is %d",  (uint8_t *)&v73,  8u);
  }

  int v29 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingLockSession sessionCreatedMessage](self, "sessionCreatedMessage"));
  uint64_t v30 = [v29 version];

  if (v30 == 4LL)
  {
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockAKSManager sharedManager](&OBJC_CLASS___SDAutoUnlockAKSManager, "sharedManager"));
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingLockSession sessionCreatedMessage](self, "sessionCreatedMessage"));
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v32 longTermKey]);
    [v31 signAndStoreRemoteLTK:v33 forDeviceID:v7];

    -[SDAutoUnlockPairingLockSession handleDeviceAuthenticationSetupRequest]( self,  "handleDeviceAuthenticationSetupRequest");
  }

  else
  {
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingLockSession sessionCreatedMessage](self, "sessionCreatedMessage"));
    uint64_t v35 = [v34 hasWatchOldLTKSyncStatus];

    if (v35)
    {
      __int16 v36 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingLockSession sessionCreatedMessage](self, "sessionCreatedMessage"));
      -[SDAutoUnlockPairingLockSession setWatchOldLTKSyncStatus:]( self,  "setWatchOldLTKSyncStatus:",  [v36 watchOldLTKSyncStatus]);
    }

    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingLockSession sessionCreatedMessage](self, "sessionCreatedMessage"));
    uint64_t v38 = [v37 hasWatchNewLTKSyncStatus];

    if (v38)
    {
      uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingLockSession sessionCreatedMessage](self, "sessionCreatedMessage"));
      -[SDAutoUnlockPairingLockSession setWatchNewLTKSyncStatus:]( self,  "setWatchNewLTKSyncStatus:",  [v39 watchNewLTKSyncStatus]);
    }

    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingLockSession sessionCreatedMessage](self, "sessionCreatedMessage"));
    uint64_t v41 = [v40 hasLtkHash];

    if (v41)
    {
      v42 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingLockSession sessionCreatedMessage](self, "sessionCreatedMessage"));
      uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v42 ltkHash]);
      -[SDAutoUnlockPairingLockSession setRemoteLTKHash:](self, "setRemoteLTKHash:", v43);

      uint64_t v45 = auto_unlock_log(v44);
      uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingLockSession remoteLTKHash](self, "remoteLTKHash"));
        uint64_t v73 = 138412290;
        uint64_t v74 = v47;
        _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "Remote LTK Hash: %@",  (uint8_t *)&v73,  0xCu);
      }
    }

    if (!-[SDAutoUnlockPairingLockSession ltkHashMatches](self, "ltkHashMatches"))
    {
      uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockAKSManager sharedManager](&OBJC_CLASS___SDAutoUnlockAKSManager, "sharedManager"));
      uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingSession deviceID](self, "deviceID"));
      [v48 checkRemoteLTKForDeviceID:v49];

      uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockAKSManager sharedManager](&OBJC_CLASS___SDAutoUnlockAKSManager, "sharedManager"));
      uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingSession deviceID](self, "deviceID"));
      [v50 updatePreferredRemoteLTKForDeviceID:v51];
    }

    uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockAKSManager sharedManager](&OBJC_CLASS___SDAutoUnlockAKSManager, "sharedManager"));
    [v52 updateLTKs];

    -[SDAutoUnlockPairingLockSession handleEscrowSessionRequest](self, "handleEscrowSessionRequest");
  }

  v55 = -[NSMutableSet copy](v57, "copy");

  return v55;
}

  return (int)self;
}

    uint64_t v72 = 0LL;
    uint64_t v73 = v4 >> 6;
    if (v73 <= 5) {
      uint64_t v73 = 5LL;
    }
    uint64_t v74 = v73 - 5;
    while (v74 != v72)
    {
      uint64_t v71 = *(void *)(v3 + 96 + 8 * v72++);
      if (v71)
      {
        uint64_t v51 = v72 + 4;
        goto LABEL_37;
      }
    }

    goto LABEL_54;
  }

  uint64_t v37 = *(void *)(v36 + 8 * v45);
  if (v37)
  {
    id v4 = v45;
    goto LABEL_11;
  }

  while (1)
  {
    id v4 = v45 + 1;
    if (__OFADD__(v45, 1LL)) {
      break;
    }
    uint64_t v37 = *(void *)(v36 + 8 * v4);
    ++v45;
    if (v37) {
      goto LABEL_11;
    }
  }

  __break(1u);
  return result;
}

    uint64_t v24 = type metadata accessor for NWTXTRecord(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8LL))(a1, v24);
LABEL_49:
    id v6 = 0LL;
    goto LABEL_50;
  }

  v48[0] = v4;
  v48[1] = v6 & 0xFFFFFFFFFFFFFFLL;
  if (v4 == 43)
  {
    if (!v7) {
      goto LABEL_74;
    }
    uint64_t v11 = (BYTE1(v4) - 48);
    if (v7 != 2)
    {
      uint64_t v11 = 10LL * (BYTE1(v4) - 48) + (BYTE2(v4) - 48);
      uint64_t v15 = v7 - 3;
      if (v15)
      {
        uint64_t v16 = (unsigned __int8 *)v48 + 3;
        while (1)
        {
          uint64_t v17 = *v16 - 48;
          if (v17 > 9) {
            goto LABEL_33;
          }
          uint64_t v18 = 10 * v11;
          uint64_t v11 = v18 + v17;
          uint64_t v13 = 0;
          ++v16;
          if (!--v15) {
            goto LABEL_46;
          }
        }
      }
    }

  __break(1u);
  return result;
}

void sub_1000145BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

uint64_t sub_100014628(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  while (1)
  {
    uint64_t v5 = aks_remote_session_step(a2, v10, v4, &v11, &v9);
    if (v10)
    {
      free(v10);
      uint64_t v10 = 0LL;
    }

    if ((_DWORD)v5) {
      break;
    }
    id v6 = v11;
    if (!v9) {
      goto LABEL_12;
    }
    uint64_t v5 = aks_remote_session_step(a1, v11, v9, &v10, &v8);
    if (v11)
    {
      free(v11);
      uint64_t v11 = 0LL;
    }

    if ((_DWORD)v5) {
      goto LABEL_14;
    }
    uint64_t v4 = v8;
    if (!v8)
    {
      uint64_t v5 = 0LL;
      goto LABEL_14;
    }
  }

  id v6 = v11;
LABEL_12:
  if (v6)
  {
    free(v6);
    uint64_t v11 = 0LL;
  }

void *sub_1000146F8(uint64_t a1, const void *a2, size_t __size)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = malloc(__size);
  uint64_t result = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (result)
  {
    uint64_t result = memcpy(result, a2, __size);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = __size;
  }

  return result;
}

void *sub_100014760(uint64_t a1, const void *a2, size_t __size)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = malloc(__size);
  uint64_t result = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  if (result)
  {
    uint64_t result = memcpy(result, a2, __size);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = __size;
  }

  return result;
}

  ;
}

void sub_1000147D0( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_1000147EC(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

  ;
}

  ;
}

void sub_100014820( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_100014848()
{
}

void sub_100014874()
{
}

void sub_1000148D4( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100014938()
{
}

void sub_100014964()
{
}

void sub_1000149C4()
{
}

void sub_100014A24()
{
}

void sub_100014A5C()
{
  sub_1000147D0((void *)&_mh_execute_header, v0, v1, "Failed to get peer state (status = %d)", v2, v3, v4, v5, v6);
  sub_1000147C8();
}

void sub_100014ABC(uint64_t a1, int a2, os_log_s *a3)
{
  id v6 = sub_100012158(*(void *)a1, *(void *)(a1 + 8));
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  int v8 = *(_DWORD *)(a1 + 12);
  v9[0] = 67109634;
  v9[1] = a2;
  __int16 v10 = 2112;
  uint64_t v11 = v7;
  __int16 v12 = 1024;
  int v13 = v8;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a3,  OS_LOG_TYPE_DEBUG,  "Status %d, Peer State: %@, flags %d",  (uint8_t *)v9,  0x18u);
}

void sub_100014B84()
{
  sub_1000147EC( (void *)&_mh_execute_header,  v0,  (uint64_t)v0,  "Local key generation failed (error %d, output length = %d)",  v1);
  sub_10001480C();
}

void sub_100014BF0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100014C58()
{
  sub_1000147EC( (void *)&_mh_execute_header,  v0,  (uint64_t)v0,  "Failed to sign remote key (error = %d, output length = %d)",  v1);
  sub_10001480C();
}

void sub_100014CC4()
{
}

void sub_100014CF0()
{
}

void sub_100014D1C()
{
}

void sub_100014D48( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000147D0((void *)&_mh_execute_header, a2, a3, "Escrow generation failed (length = %d)", a5, a6, a7, a8, 0);
  sub_1000147C8();
}

void sub_100014DB0()
{
}

void sub_100014E10()
{
}

void sub_100014E3C()
{
}

void sub_100014E9C()
{
}

void sub_100014EC8()
{
}

void sub_100014EF4()
{
}

void sub_100014F20()
{
}

void sub_100014F4C()
{
}

void sub_100014F78()
{
}

void sub_100014FA4()
{
}

void sub_100014FD0()
{
  v2[0] = 67109376;
  sub_1000147F8();
  sub_1000147EC( (void *)&_mh_execute_header,  v0,  v1,  "Authorization Test: Failed to sign real signing key, aks_sign_signing_key()@%d expect:0, got:%x",  (uint8_t *)v2);
  sub_10001480C();
}

void sub_10001503C()
{
  v2[0] = 67109376;
  sub_1000147F8();
  sub_1000147EC( (void *)&_mh_execute_header,  v0,  v1,  "Authorization Test: Failed to sign test signing key, aks_sign_signing_key()@%d expect:0, got:%x",  (uint8_t *)v2);
  sub_10001480C();
}

void sub_1000150A8()
{
  v2[0] = 67109376;
  sub_1000147F8();
  sub_1000147EC( (void *)&_mh_execute_header,  v0,  v1,  "Authorization Test: Failed to create test signing key, aks_create_signing_key()@%d expect:0, got:%x",  (uint8_t *)v2);
  sub_10001480C();
}

void sub_100015114()
{
  v2[0] = 67109376;
  sub_1000147F8();
  sub_1000147EC( (void *)&_mh_execute_header,  v0,  v1,  "Authorization Test: Failed to create local signing key, aks_create_signing_key()@%d expect:0, got:%x",  (uint8_t *)v2);
  sub_10001480C();
}

LABEL_10:
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", self->_success));
  [v3 setObject:v9 forKey:@"success"];

  has = (char)self->_has;
  if ((has & 8) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((has & 0x10) != 0)
  {
LABEL_6:
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", self->_suppressNotification));
    [v3 setObject:v5 forKey:@"suppressNotification"];
  }

  return v3;
}

  PBDataWriterWriteBOOLField(v5, self->_success, 3LL);
  has = (char)self->_has;
  if ((has & 8) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((has & 0x10) != 0) {
LABEL_6:
  }
    PBDataWriterWriteBOOLField(v5, self->_suppressNotification, 5LL);
LABEL_7:
}

  *((_BYTE *)v4 + 16) = self->_success;
  *((_BYTE *)v4 + 20) |= 4u;
  has = (char)self->_has;
  if ((has & 8) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((has & 0x10) != 0)
  {
LABEL_6:
    *((_BYTE *)v4 + 1_Block_object_dispose((const void *)(v36 - 144), 8) = self->_suppressNotification;
    *((_BYTE *)v4 + 20) |= 0x10u;
  }

  *((_BYTE *)result + 16) = self->_success;
  *((_BYTE *)result + 20) |= 4u;
  has = (char)self->_has;
  if ((has & 8) == 0)
  {
LABEL_5:
    if ((has & 0x10) == 0) {
      return result;
    }
    goto LABEL_6;
  }

  self->_success = *((_BYTE *)v4 + 16);
  *(_BYTE *)&self->_has |= 4u;
  uint64_t v5 = *((_BYTE *)v4 + 20);
  if ((v5 & 8) != 0) {
    goto LABEL_11;
  }
LABEL_5:
  if ((v5 & 0x10) != 0)
  {
LABEL_6:
    self->_suppressNotification = *((_BYTE *)v4 + 18);
    *(_BYTE *)&self->_has |= 0x10u;
  }
}
}

  return v6;
}

  return v6;
}

  return (char)v9;
}
}

  if (v8)
  {
    if ((_DWORD)v9)
    {
      __int16 v10 = (int)v9;
      uint64_t v20 = NSLocalizedDescriptionKey;
      uint64_t v11 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  DebugGetErrorString(v9, 0LL, 0LL));
      __int16 v12 = objc_claimAutoreleasedReturnValue(v11);
      int v13 = (void *)v12;
      uint64_t v14 = @"?";
      if (v12) {
        uint64_t v14 = (const __CFString *)v12;
      }
      uint64_t v21 = v14;
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v21,  &v20,  1LL));
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v10,  v15));
      v8[2](v8, v16);
    }

    else
    {
      v8[2](v8, 0LL);
    }
  }
}

  if (v8)
  {
    if ((_DWORD)v9)
    {
      __int16 v10 = (int)v9;
      uint64_t v21 = NSLocalizedDescriptionKey;
      uint64_t v11 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  DebugGetErrorString(v9, 0LL, 0LL));
      __int16 v12 = objc_claimAutoreleasedReturnValue(v11);
      int v13 = (void *)v12;
      uint64_t v14 = @"?";
      if (v12) {
        uint64_t v14 = (const __CFString *)v12;
      }
      id v22 = v14;
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v22,  &v21,  1LL));
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v10,  v15));
      v8[2](v8, v16);
    }

    else
    {
      v8[2](v8, 0LL);
    }
  }
}

  CFArrayAppendValue(v6, @".");
  Count = CFArrayGetCount(v6);
  uint64_t v15 = Count - 1;
  if (Count >= 1)
  {
    uint64_t v16 = Count;
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v6, v15);
    CFStringAppend(Mutable, ValueAtIndex);
    if (v15)
    {
      uint64_t v18 = v16 - 2;
      do
      {
        CFStringAppend(Mutable, @"/");
        int v19 = (const __CFString *)CFArrayGetValueAtIndex(v6, v18);
        CFStringAppend(Mutable, v19);
        --v18;
      }

      while (v18 != -1);
    }
  }

  uint64_t v20 = sub_100114CAC(Mutable);
  CFRelease(v6);
  CFRelease(Mutable);
  if (v7) {
    CFRelease(v7);
  }
  if (v9) {
    CFRelease(v9);
  }
  return v20;
}

  return v7;
}

              if (-[__CFString isEqual:](v15, "isEqual:", v18))
              {
                int v19 = sub_100116B8C(v15);
                uint64_t v20 = (const void *)SFNodeCreate(0LL, v19, v18);
                CFRelease(v19);
              }

              else
              {
                uint64_t v20 = (const void *)SFNodeCreate(0LL, v18, v18);
              }

              uint64_t v26 = v44;
              uint64_t v27 = v45;
              uint64_t v28 = v18;
              if ((v12 & 1) == 0)
              {
                int v29 = (void *)objc_claimAutoreleasedReturnValue([v14 port]);
                uint64_t v30 = [v29 intValue];

                SFNodeSetHostName(v20, v15);
                uint64_t v31 = sub_10008D8A8(v48, 0LL, 0LL, v15, v30, 0LL, 0LL, 0);
                uint64_t v27 = v39;
                uint64_t v26 = v40;
                uint64_t v28 = v15;
                if (v31)
                {
                  uint64_t v32 = v31;
                  SFNodeSetURL(v20, v31);
                  CFRelease(v32);
                  uint64_t v27 = v39;
                  uint64_t v26 = v40;
                  uint64_t v28 = v15;
                }
              }

              SFNodeAddKind(v20, v41);
              -[SDConnectedBrowser setNodeModel:protocol:url:](v47, "setNodeModel:protocol:url:", v20, v48, v14);
              -[NSMutableDictionary setValue:forKey:](v26, "setValue:forKey:", v20, v28);
              CFRelease(v20);
              uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v27, "objectForKeyedSubscript:", v18));
              if (!v33)
              {
                uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
                -[NSMutableDictionary setValue:forKey:](v27, "setValue:forKey:", v33, v18);
              }

              [v33 addObject:v11];

              int v8 = v46;
              self = v47;
              uint64_t v9 = v42;
              uint8_t v6 = v43;
            }
          }
        }

        __int16 v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      int v8 = [v6 countByEnumeratingWithState:&v49 objects:v53 count:16];
    }

    while (v8);
  }

  -[SDStatusMonitor setODiskMountPoints:](self->_monitor, "setODiskMountPoints:", v45);
  -[SDStatusMonitor setServerMountPoints:](self->_monitor, "setServerMountPoints:", v39);
  -[SDConnectedBrowser setODiskServers:](self, "setODiskServers:", v44);
  uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allValues](v40, "allValues"));

  return v34;
}
}

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  if (([v6 hasBytesAvailable] & 1) == 0)
  {
    if (qword_100643EA8 != -1) {
      swift_once(&qword_100643EA8, sub_10019570C);
    }
    int v19 = type metadata accessor for Logger(0LL);
    uint64_t v20 = sub_100186DE4(v19, (uint64_t)qword_100645590);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    id v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      id v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Closing output stream", v23, 2u);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    [v5 close];
    uint64_t v9 = (os_log_s *)*v1;
    *uint64_t v1 = 0LL;
    goto LABEL_10;
  }

  if (qword_100643EA8 != -1) {
    swift_once(&qword_100643EA8, sub_10019570C);
  }
  int v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = sub_100186DE4(v13, (uint64_t)qword_100645590);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  uint64_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Still bytes present on input stream", v17, 2u);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  uint64_t v18 = (void *)swift_task_alloc(dword_1006457B4);
  *(void *)(v0 + 104) = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_100197CC0;
  return sub_100197900();
}

  uint64_t result = *(void *)(v5 + v3);
  if (result)
  {
    uint64_t result = (uint64_t)[(id)result v6[282]];
    if (result)
    {
      uint64_t v20 = (void *)result;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
      id v23 = v22;

      uint64_t v24 = (void *)(a1 + *(int *)(type metadata accessor for SDNearFieldTap(0LL) + 40));
      uint64_t v25 = v24[1];
      if (*v24 == 0xD000000000000013LL && v25 == 0x8000000100504630LL
        || (_stringCompareWithSmolCheck(_:_:expecting:)(*v24, v25, 0xD000000000000013LL, 0x8000000100504630LL, 0LL) & 1) != 0
        || (type metadata accessor for SFAirDropClient(0LL),
            v26._countAndFlagsBits = static SFAirDropClient.nearFieldApplicationLabel.getter(),
            uint64_t v27 = v26._object,
            uint64_t v28 = String.hasPrefix(_:)(v26),
            swift_bridgeObjectRelease(v27),
            v28))
      {
        if (v21 == 0xD000000000000013LL && v23 == 0x8000000100504630LL)
        {
          swift_bridgeObjectRelease(0x8000000100504630LL);
          return 0LL;
        }

        if ((_stringCompareWithSmolCheck(_:_:expecting:)(v21, v23, 0xD000000000000013LL, 0x8000000100504630LL, 0LL) & 1) != 0)
        {
          swift_bridgeObjectRelease(v23);
          return 0LL;
        }

        type metadata accessor for SFAirDropClient(0LL);
        v29._countAndFlagsBits = static SFAirDropClient.nearFieldApplicationLabel.getter();
        object = v29._object;
        uint64_t v31 = String.hasPrefix(_:)(v29);
        swift_bridgeObjectRelease(v23);
        swift_bridgeObjectRelease(object);
        if (v31) {
          return 0LL;
        }
      }

      else
      {
        swift_bridgeObjectRelease(v23);
      }

      return 1LL;
    }
  }

  return result;
}

      *(void *)&v139 = v24;
      swift_errorRetain(v24);
      uint64_t v25 = sub_100183098(&qword_100645710);
      if (swift_dynamicCast(&v144, &v139, v25, &type metadata for SFAuthenticationErrorMessage, 0LL))
      {
        swift_errorRelease(v24);
        uint64_t v26 = v145;
        sub_10023C300(v144, *((uint64_t *)&v144 + 1), v145);
        swift_bridgeObjectRelease(v26);
        swift_errorRelease(v139);
      }

      else
      {
        swift_errorRelease(v139);
        *(void *)&v144 = v24;
        swift_errorRetain(v24);
        type metadata accessor for SFAuthenticationError(0LL);
        if (swift_dynamicCast(&v139, &v144, v25, v62, 0LL))
        {
          swift_errorRelease(v24);
          sub_10023C300(v139, 0LL, (const char *)0xE000000000000000LL);
          swift_errorRelease(v144);
        }

        else
        {
          swift_errorRelease(v144);
          sub_10023C300(10, 0LL, (const char *)0xE000000000000000LL);
          swift_errorRelease(v24);
        }
      }

      return;
    }

    v133 = v48;
    v49.super.isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v50 = v2;
    uint64_t v51 = (uint64_t)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice];
    swift_beginAccess(&v2[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice], v137, 0LL, 0LL);
    sub_1001915A4(v51, (uint64_t)&v144, &qword_100654080);
    uint64_t v52 = v146;
    if (v146)
    {
      uint64_t v53 = v147;
      v54 = sub_10019A708(&v144, v146);
      v132 = v130;
      v55 = *(void *)(v52 - 8);
      __chkstk_darwin(v54);
      id v57 = (char *)v130 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v55 + 16))(v57);
      sub_100187100((uint64_t)&v144, &qword_100654080);
      isa = (Class)(*(uint64_t (**)(uint64_t, uint64_t))(v53 + 8))(v52, v53);
      v59 = v58;
      (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v52);
      if (v59)
      {
        uint64_t v61 = String._bridgeToObjectiveC()();
        *(void *)&uint64_t v60 = swift_bridgeObjectRelease(v59).n128_u64[0];
LABEL_49:
        uint64_t v2 = v50;
        uint64_t v47 = v134;
        v110 = v133;
        objc_msgSend(v133, "signAndStoreRemoteLTK:forDeviceID:", v49.super.isa, v61, v60, v130[0]);

        uint64_t v40 = v136;
        uint64_t v45 = v135;
        goto LABEL_50;
      }
    }

    else
    {
      sub_100187100((uint64_t)&v144, &qword_100654080);
    }

    uint64_t v61 = 0LL;
    goto LABEL_49;
  }

  uint64_t v28 = [(id)objc_opt_self(SDAutoUnlockTransport) sharedTransport];
  if (!v28)
  {
    __break(1u);
    return;
  }

  int v29 = v28;
  uint64_t v30 = [v28 enabledAutoUnlockDevices];

  if (v30)
  {
    uint64_t v32 = sub_100183168(0LL, (unint64_t *)&unk_10064B7B0, &OBJC_CLASS___SFAutoUnlockDevice_ptr);
    uint64_t v33 = sub_10023F574();
    uint64_t v34 = (const char *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v30, v32, v33);

    uint64_t v35 = v2;
    sub_10023F5CC((uint64_t)v34, (uint64_t)v35);
    uint64_t v37 = v36;
    swift_bridgeObjectRelease(v34);

    if ((v37 & 1) == 0)
    {
      *(void *)&v144 = 0LL;
      *((void *)&v144 + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(26LL);
      v139 = v144;
      v69._object = (void *)0x8000000100506D40LL;
      v69._countAndFlagsBits = 0xD000000000000018LL;
      String.append(_:)(v69);
      uint64_t v70 = (uint64_t)&v35[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice];
      swift_beginAccess(&v35[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice], v142, 0LL, 0LL);
      sub_1001915A4(v70, (uint64_t)&v144, &qword_100654080);
      uint64_t v71 = v146;
      if (v146)
      {
        uint64_t v72 = v147;
        uint64_t v73 = sub_10019A708(&v144, v146);
        uint64_t v74 = *(void *)(v71 - 8);
        __chkstk_darwin(v73);
        uint64_t v76 = (char *)v130 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *))(v74 + 16))(v76);
        sub_100187100((uint64_t)&v144, &qword_100654080);
        uint64_t v77 = (*(uint64_t (**)(uint64_t, uint64_t))(v72 + 8))(v71, v72);
        v79 = v78;
        (*(void (**)(char *, uint64_t))(v74 + 8))(v76, v71);
      }

      else
      {
        sub_100187100((uint64_t)&v144, &qword_100654080);
        uint64_t v77 = 0LL;
        v79 = 0LL;
      }

      *(void *)&v144 = v77;
      *((void *)&v144 + 1) = v79;
      DefaultStringInterpolation.appendInterpolation<A>(_:)( &v144,  &type metadata for String,  &protocol witness table for String);
      swift_bridgeObjectRelease(v79);
      uint64_t v20 = *((void *)&v139 + 1);
      int v19 = v139;
      v80 = sub_100187014();
      id v22 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v80, 0LL, 0LL);
      uint64_t v24 = v22;
      *(_DWORD *)id v23 = 33;
      goto LABEL_8;
    }

    goto LABEL_16;
  }

  v66 = (os_log_s *)Logger.logObject.getter(v31);
  uint64_t v67 = static os_log_type_t.error.getter(v66);
  if (os_log_type_enabled(v66, (os_log_type_t)v67))
  {
    uint64_t v68 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v68 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v66,  (os_log_type_t)v67,  "No devices enabled to unlock this device",  v68,  2u);
    swift_slowDealloc(v68, -1LL, -1LL);
  }
}

  uint64_t v16 = 0LL;
  uint64_t v17 = 0LL;
  if (object)
  {
LABEL_11:
    swift_bridgeObjectRetain(object);
    uint64_t v18 = String._bridgeToObjectiveC()();
    uint64_t v11 = swift_bridgeObjectRelease(object).n128_u64[0];
    if (v17) {
      goto LABEL_12;
    }
LABEL_9:
    int v19 = 0LL;
    goto LABEL_13;
  }

      sub_10019A708( &v2[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_contactStore],  *(void *)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_contactStore + 24]);
      return sub_1003DBFB8(v19, a2);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

  swift_release(a2);
  swift_bridgeObjectRelease(v6);
  id v22 = *(void *)(*((void *)*v3 + 6) + 8 * v9);
  *a1 = v22;
  swift_retain(v22);
  return 0LL;
}

  __int16 v12 = *v4;
  *(void *)(*v4 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  int v13 = (Swift::Int *)(*(void *)(v12 + 48) + 16 * a3);
  *int v13 = v7;
  v13[1] = a2;
  uint64_t v14 = *(void *)(v12 + 16);
  uint64_t v15 = __OFADD__(v14, 1LL);
  uint64_t v16 = v14 + 1;
  if (v15)
  {
    __break(1u);
    JUMPOUT(0x1003BA784LL);
  }

  *(void *)(v12 + 16) = v16;
  return result;
}

    id v23 = &_swiftEmptyArrayStorage;
LABEL_20:
    void *v2 = (uint64_t)v23;
    goto LABEL_21;
  }

  if ((_DWORD)v11 == enum case for SFAirDrop.TransferType.peerPayment(_:))
  {
    if (qword_1006442B8 != -1) {
      swift_once(&qword_1006442B8, sub_1003C6F90);
    }
    uint64_t v25 = qword_100652858;
    goto LABEL_15;
  }

  uint64_t v43 = *(void *)(v1 + 192);
  v42 = *(void *)(v1 + 200);
  uint64_t v44 = *(void *)(v1 + 184);
  *(void *)(v1 + 72) = &_swiftEmptyArrayStorage;
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
LABEL_21:
  if (qword_1006442B0 != -1) {
    swift_once(&qword_1006442B0, sub_1003C6F0C);
  }
  uint64_t v26 = swift_bridgeObjectRetain(qword_100652850);
  sub_10028A4C8(v26);
  uint64_t v27 = *(void **)(v1 + 72);
  *(void *)(v1 + 256) = v27;
  uint64_t v28 = v27[2];
  *(void *)(v1 + 264) = v28;
  if (v28)
  {
    *(void *)(v1 + 272) = 0LL;
    int v29 = v27[5];
    *(void *)(v1 + 280) = v29;
    uint64_t v30 = v27[4];
    *(void *)(v1 + 28_Block_object_dispose((const void *)(v36 - 144), 8) = v30;
    uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t))(v29 + 40);
    *(void *)(v1 + 40) = v30;
    *(void *)(v1 + 4_Block_object_dispose((const void *)(v36 - 144), 8) = v29;
    sub_1001A4B04((void *)(v1 + 16));
    uint64_t v32 = v31(v30, v29);
    SFAirDropReceive.Transfer.askRequest.getter(v32);
    uint64_t v33 = *(int **)(v29 + 48);
    uint64_t v45 = (int *)((char *)v33 + *v33);
    uint64_t v34 = (void *)swift_task_alloc(v33[1]);
    *(void *)(v1 + 296) = v34;
    *uint64_t v34 = v1;
    v34[1] = sub_1003C6728;
    return ((uint64_t (*)(void, uint64_t, uint64_t))v45)(*(void *)(v1 + 224), v30, v29);
  }

  else
  {
    swift_bridgeObjectRelease(v27);
    __int16 v36 = *(void *)(v1 + 96);
    *(void *)(v36 + 32) = 0LL;
    *(_OWORD *)__int16 v36 = 0u;
    *(_OWORD *)(v36 + 16) = 0u;
    uint64_t v37 = *(void *)(v1 + 224);
    uint64_t v38 = *(void *)(v1 + 200);
    uint64_t v39 = *(void *)(v1 + 176);
    uint64_t v40 = *(void *)(v1 + 152);
    uint64_t v41 = *(void *)(v1 + 128);
    swift_task_dealloc(*(void *)(v1 + 232));
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

  uint64_t v33 = v41;
  swift_release(v15);
  return v33;
}

uint64_t SDUnlockSessionConfirmationReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 20) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_56;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_58;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_56:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_58:
        uint64_t v37 = 12LL;
        goto LABEL_63;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1LL || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_62;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_62:
        uint64_t v37 = 8LL;
LABEL_63:
        *(_DWORD *)(a1 + v37) = v14;
        continue;
      case 3u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0LL;
        *(_BYTE *)(a1 + 20) |= 4u;
        while (2)
        {
          unint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 == -1LL || v25 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v26 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
            v24 |= (unint64_t)(v26 & 0x7F) << v22;
            if (v26 < 0)
            {
              v22 += 7;
              BOOL v9 = v23++ >= 9;
              if (v9)
              {
                uint64_t v24 = 0LL;
                goto LABEL_67;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v24 = 0LL;
        }
LABEL_67:
        BOOL v38 = v24 != 0;
        uint64_t v39 = 16LL;
        goto LABEL_76;
      case 4u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v29 = 0LL;
        *(_BYTE *)(a1 + 20) |= 8u;
        while (2)
        {
          unint64_t v30 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v30 == -1LL || v30 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v31 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 1;
            v29 |= (unint64_t)(v31 & 0x7F) << v27;
            if (v31 < 0)
            {
              v27 += 7;
              BOOL v9 = v28++ >= 9;
              if (v9)
              {
                uint64_t v29 = 0LL;
                goto LABEL_71;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v29 = 0LL;
        }
LABEL_71:
        BOOL v38 = v29 != 0;
        uint64_t v39 = 17LL;
        goto LABEL_76;
      case 5u:
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v34 = 0LL;
        *(_BYTE *)(a1 + 20) |= 0x10u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      unint64_t v35 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v35 == -1LL || v35 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v36 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35 + 1;
      v34 |= (unint64_t)(v36 & 0x7F) << v32;
      if ((v36 & 0x80) == 0) {
        goto LABEL_73;
      }
      v32 += 7;
      BOOL v9 = v33++ >= 9;
      if (v9)
      {
        uint64_t v34 = 0LL;
        goto LABEL_75;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_73:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v34 = 0LL;
    }
LABEL_75:
    BOOL v38 = v34 != 0;
    uint64_t v39 = 18LL;
LABEL_76:
    *(_BYTE *)(a1 + v39) = v38;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

LABEL_11:
  *((_BYTE *)result + 17) = self->_supportsACK;
  *((_BYTE *)result + 20) |= 8u;
  if ((*(_BYTE *)&self->_has & 0x10) == 0) {
    return result;
  }
LABEL_6:
  *((_BYTE *)result + 1_Block_object_dispose((const void *)(v36 - 144), 8) = self->_suppressNotification;
  *((_BYTE *)result + 20) |= 0x10u;
  return result;
}

  return v3;
}

  return v7;
}

  return v6;
}

  return (NSString *)v4;
}

  if (dword_100642038 <= 90)
  {
    if (dword_100642038 != -1 || (uint64_t v11 = _LogCategory_Initialize(&dword_100642038, 90LL), v5 = v14, v11))
    {
      LogPrintF( &dword_100642038,  "-[SFNotificationProxy handleNotificationWasTapped:]",  90LL,  "### NotifProxy: Unrecognized notification ID tapped: %@\n",  v5);
LABEL_20:
      unsigned int v5 = v14;
    }
  }
}

      unint64_t v6 = 0LL;
      unint64_t v7 = 1;
      char v8 = 201239;
LABEL_12:
      if (dword_1006429A8 <= 30
        && (dword_1006429A8 != -1 || _LogCategory_Initialize(&dword_1006429A8, 30LL)))
      {
        BOOL v9 = a1[6];
        if (v9 > 3) {
          int v10 = @"?";
        }
        else {
          int v10 = *(&off_1005CD500 + v9);
        }
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v6 absoluteString]);
        LogPrintF( &dword_1006429A8,  "-[SDAppleIDServerTask _urlWithCompletion:]_block_invoke",  30LL,  "URL for task type %@: %@",  v10,  v11);
      }

      if (v6) {
        char v12 = 1;
      }
      else {
        char v12 = v7;
      }
      if (v12) {
        unsigned int v13 = v8;
      }
      else {
        unsigned int v13 = 201200;
      }
      uint64_t v14 = (void *)a1[5];
      unint64_t v15 = *(dispatch_queue_s **)(a1[4] + 16LL);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1000A5D2C;
      block[3] = &unk_1005CD418;
      char v18 = v6;
      unsigned int v19 = v14;
      unint64_t v20 = v13;
      char v16 = v6;
      dispatch_async(v15, block);

      return;
  }

  return v7;
}

  unsigned int v23 = handoff_log(v11, v12);
  uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v10 requestIdentifier]);
    unint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 UUIDString]);
    char v26 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString uniqueIDOverride](v51, "uniqueIDOverride"));
    *(_DWORD *)buf = 138412802;
    uint64_t v53 = v50;
    v54 = 2112;
    v55 = v25;
    id v56 = 2112;
    id v57 = v26;
    _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Activity payload received via %@ for requestIdentifier %@ not/no longer wanted from %@",  buf,  0x20u);
  }

  return v4;
}

  return v18;
}

  return v7;
}

  return v7;
}

  return v6;
}
}

  return v4;
}

  return v7;
}

  unsigned int v13 = -[NSData copyWithZone:](self->_ltkHash, "copyWithZone:", a3);
  uint64_t v14 = (void *)v6[3];
  v6[3] = v13;

  return v6;
}

  BOOL v9 = auto_unlock_log(v8);
  int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    char v12 = @"NO";
    wifiDevice = self->_wifiDevice;
    *(_DWORD *)buf = 138412802;
    if ((_DWORD)v5) {
      char v12 = @"YES";
    }
    unsigned int v19 = v12;
    unint64_t v20 = 2112;
    char v21 = v4;
    char v22 = 2112;
    unsigned int v23 = wifiDevice;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "Device supports ranging %@, capabilities: %@, wifiDevice: %@",  buf,  0x20u);
  }

  return (char)v5;
}

  unint64_t v20 = paired_unlock_log(v8, v9);
  char v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
    sub_10014B204();
  }

  -[SDUnlockKeyManager sendSetupCreateEscrowRecordWithSessionID:stepData:errorCode:]( self,  "sendSetupCreateEscrowRecordWithSessionID:stepData:errorCode:",  -[SDUnlockSetupCreateSecret sessionID](v5, "sessionID"),  0LL,  v19);
  -[SDUnlockKeyManager disableUnlockPairing](self, "disableUnlockPairing");
  -[SDUnlockKeyManager resetSetupState](self, "resetSetupState");

LABEL_14:
}

    int v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v10 postNotificationName:@"SDNotificationNameNearbyBLEAuthTagChanged" object:self userInfo:0];

LABEL_12:
LABEL_13:
  }

    v5->_inDiscoverySession = v4;
  }

  return (char)v9;
}

  return (char)v3;
}

  return (char)v5;
}

      int v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10) {
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
      goto LABEL_5;
    }

    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }

    v24[(v17 >> 6) + 8] |= 1LL << v17;
    char v27 = (uint64_t *)(v24[6] + 16 * v17);
    CFStringRef v27 = v12;
    v27[1] = (uint64_t)v13;
    *(void *)(v24[7] + 8 * v17) = v14;
    unsigned int v28 = v24[2];
    uint64_t v29 = __OFADD__(v28, 1LL);
    unint64_t v30 = v28 + 1;
    if (v29)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }

    v24[2] = v30;
LABEL_13:
    sub_100185A68();
    if (v32)
    {
      uint64_t v34 = v31;
      unint64_t v35 = v32;
      char v36 = v33;
      do
      {
        v42 = (void *)*a5;
        uint64_t v44 = sub_1003AD53C(v34, (uint64_t)v35);
        uint64_t v45 = v42[2];
        uint64_t v46 = (v43 & 1) == 0;
        uint64_t v47 = v45 + v46;
        if (__OFADD__(v45, v46)) {
          goto LABEL_25;
        }
        uint64_t v48 = v43;
        if (v42[3] < v47)
        {
          sub_1003A8FFC(v47, 1LL);
          uint64_t v49 = sub_1003AD53C(v34, (uint64_t)v35);
          if ((v48 & 1) != (v50 & 1)) {
            goto LABEL_27;
          }
          uint64_t v44 = v49;
        }

        uint64_t v51 = (void *)*a5;
        if ((v48 & 1) != 0)
        {
          swift_bridgeObjectRelease(v35);
          uint64_t v37 = v51[7];
          BOOL v38 = 8 * v44;

          *(void *)(v37 + v3_Block_object_dispose((const void *)(v36 - 144), 8) = v36;
        }

        else
        {
          v51[(v44 >> 6) + 8] |= 1LL << v44;
          uint64_t v52 = (uint64_t *)(v51[6] + 16 * v44);
          void *v52 = v34;
          v52[1] = (uint64_t)v35;
          *(void *)(v51[7] + 8 * v44) = v36;
          uint64_t v53 = v51[2];
          uint64_t v29 = __OFADD__(v53, 1LL);
          v54 = v53 + 1;
          if (v29) {
            goto LABEL_26;
          }
          v51[2] = v54;
        }

        sub_100185A68();
        uint64_t v34 = v39;
        unint64_t v35 = v40;
        char v36 = v41;
      }

      while (v40);
    }

        __break(1u);
        goto LABEL_12;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_11;
  }

  return v2;
}

    v20[(v14 >> 6) + 8] |= 1LL << v14;
    uint64_t v24 = (uint64_t *)(v20[6] + 16 * v14);
    *uint64_t v24 = a2;
    v24[1] = (uint64_t)a3;
    *(void *)(v20[7] + 8 * v14) = a1;
    unint64_t v25 = v20[2];
    char v26 = __OFADD__(v25, 1LL);
    char v27 = v25 + 1;
    if (!v26)
    {
      v20[2] = v27;
      swift_bridgeObjectRetain(a3);
      return;
    }

    goto LABEL_14;
  }

  sub_1003AB470(v17, a4 & 1, a5);
  char v22 = sub_1003AD7E0( a2,  (uint64_t)a3,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1003B1508);
  if ((v18 & 1) == (v23 & 1))
  {
    uint64_t v14 = v22;
    unint64_t v20 = (void *)*v7;
    if ((v18 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    unint64_t v20 = (uint64_t *)(v18[6] + 16 * v12);
    *unint64_t v20 = a2;
    v20[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    char v21 = v18[2];
    char v22 = __OFADD__(v21, 1LL);
    unsigned int v23 = v21 + 1;
    if (!v22)
    {
      v18[2] = v23;
      return swift_bridgeObjectRetain(a3);
    }

    goto LABEL_14;
  }

  sub_1003AB784(result, a4 & 1, &qword_100651E28);
  uint64_t result = sub_1003AD7E0( a2,  a3,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1003B1508);
  if ((v16 & 1) == (v19 & 1))
  {
    char v12 = result;
    char v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v20[(v14 >> 6) + 8] |= 1LL << v14;
    uint64_t v24 = (uint64_t *)(v20[6] + 16 * v14);
    *uint64_t v24 = a3;
    v24[1] = (uint64_t)a4;
    unint64_t v25 = (void *)(v20[7] + 16 * v14);
    os_log_s *v25 = a1;
    v25[1] = a2;
    char v26 = v20[2];
    char v27 = __OFADD__(v26, 1LL);
    unsigned int v28 = v26 + 1;
    if (!v27)
    {
      v20[2] = v28;
      swift_bridgeObjectRetain(a4);
      return;
    }

    goto LABEL_14;
  }

  sub_1003A9008(v17, a5 & 1);
  char v22 = sub_1003AD7E0( a3,  (uint64_t)a4,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1003B1508);
  if ((v18 & 1) == (v23 & 1))
  {
    uint64_t v14 = v22;
    unint64_t v20 = (void *)*v6;
    if ((v18 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v20[(v14 >> 6) + 8] |= 1LL << v14;
    uint64_t v24 = (uint64_t *)(v20[6] + 16 * v14);
    *uint64_t v24 = a2;
    v24[1] = (uint64_t)a3;
    *(void *)(v20[7] + 8 * v14) = a1;
    unint64_t v25 = v20[2];
    char v26 = __OFADD__(v25, 1LL);
    char v27 = v25 + 1;
    if (!v26)
    {
      v20[2] = v27;
      swift_bridgeObjectRetain(a3);
      return;
    }

    goto LABEL_14;
  }

  sub_1003AADF4(v17, a4 & 1, a5);
  char v22 = sub_1003AD7E0( a2,  (uint64_t)a3,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1003B1508);
  if ((v18 & 1) == (v23 & 1))
  {
    uint64_t v14 = v22;
    unint64_t v20 = (void *)*v7;
    if ((v18 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v20[(v14 >> 6) + 8] |= 1LL << v14;
    unint64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
    os_log_s *v25 = a2;
    v25[1] = a3;
    *(void *)(v20[7] + 8 * v14) = a1;
    char v26 = v20[2];
    char v27 = __OFADD__(v26, 1LL);
    unsigned int v28 = v26 + 1;
    if (!v27)
    {
      v20[2] = v28;
      return swift_bridgeObjectRetain(a3);
    }

    goto LABEL_14;
  }

  sub_1003ABDF8(v17, a4 & 1, a5);
  unsigned int v23 = sub_1003AD7E0( a2,  a3,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1003B1508);
  if ((v18 & 1) == (v24 & 1))
  {
    uint64_t v14 = v23;
    unint64_t v20 = (void *)*v7;
    if ((v18 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    char v22 = (uint64_t *)(v18[6] + 16 * v12);
    *char v22 = a2;
    v22[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    unsigned int v23 = v18[2];
    uint64_t v24 = __OFADD__(v23, 1LL);
    unint64_t v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      sub_10019BA8C(a2, a3);
      return;
    }

    goto LABEL_14;
  }

  sub_1003AC108(v15, a4 & 1);
  unint64_t v20 = sub_1003AD7E0(a2, a3, (void (*)(void *, uint64_t, uint64_t))&Data.hash(into:), sub_1003B1AE0);
  if ((v16 & 1) == (v21 & 1))
  {
    char v12 = v20;
    char v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    *(void *)(v18[6] + 8 * v12) = a3;
    char v22 = (void *)(v18[7] + 16 * v12);
    *char v22 = a1;
    v22[1] = a2;
    unsigned int v23 = v18[2];
    uint64_t v24 = __OFADD__(v23, 1LL);
    unint64_t v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      return;
    }

    goto LABEL_14;
  }

  sub_1003ACAAC(v15, a4 & 1);
  unint64_t v20 = sub_1003AD708(a3);
  if ((v16 & 1) == (v21 & 1))
  {
    char v12 = v20;
    char v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

      char v22 = type metadata accessor for RegistrationState(0LL);
      unsigned int v23 = *(void *)(v22 - 8);
      uint64_t v24 = 1LL;
      goto LABEL_12;
    }

    if (v20 >= v18 && (a4 & 1) == 0)
    {
      sub_1003AF1B8(type metadata accessor for RegistrationState, &qword_100651DC8);
      goto LABEL_7;
    }

    sub_1003AA318(v18, a4 & 1, type metadata accessor for RegistrationState, &qword_100651DC8);
    unint64_t v25 = sub_1003AD7E0( a2,  a3,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1003B1508);
    if ((v19 & 1) == (v26 & 1))
    {
      unint64_t v15 = v25;
      v10[4] = v25;
      if ((v19 & 1) != 0) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }

  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

      unsigned int v19 = 0LL;
      goto LABEL_12;
    }

    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_1003B0444();
      goto LABEL_7;
    }

    sub_1003AC108(v16, a4 & 1);
    unint64_t v20 = sub_1003AD7E0(a2, a3, (void (*)(void *, uint64_t, uint64_t))&Data.hash(into:), sub_1003B1AE0);
    if ((v17 & 1) == (v21 & 1))
    {
      unsigned int v13 = v20;
      v10[4] = v20;
      if ((v17 & 1) != 0) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }

  uint64_t result = (void (*)(const char ***))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
  __break(1u);
  return result;
}

  static Date.distantPast.getter(v18, v19);
  char v27 = *(void **)(a2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_queue);
  *char v16 = v27;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  unsigned int v28 = v27;
  LOBYTE(v27) = _dispatchPreconditionTest(_:)(v16);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  if ((v27 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v33);
    return v35(v34);
  }

  else
  {
    __break(1u);
  }

  return result;
}

  uint64_t v50 = v187[0];
  uint64_t v51 = [v187[0] v33[433]];
  if (!v51)
  {
    uint64_t v65 = sub_10019A6C4((uint64_t)v187, (uint64_t)&v183);
    v66 = (os_log_s *)Logger.logObject.getter(v65);
    uint64_t v67 = static os_log_type_t.error.getter(v66);
    if (os_log_type_enabled(v66, v67))
    {
      v176 = a5;
      uint64_t v68 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v69 = swift_slowAlloc(32LL, -1LL);
      *(void *)&v181[0] = v69;
      *(_DWORD *)uint64_t v68 = 136315138;
      uint64_t v70 = objc_msgSend((id)*sub_10019A708(&v183, v185), "description");
      uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
      uint64_t v73 = v72;

      v182 = sub_10018CDB4(v71, (unint64_t)v73, (uint64_t *)v181);
      a5 = v176;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, &v183, v68 + 4, v68 + 12);
      swift_bridgeObjectRelease(v73);
      sub_10018709C(&v183);
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "No uniqueIDOverride in SDIDSDevice %s", v68, 0xCu);
      swift_arrayDestroy(v69, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v69, -1LL, -1LL);
      swift_slowDealloc(v68, -1LL, -1LL);
    }

    else
    {
      sub_10018709C(&v183);
    }

    v97 = 10LL;
LABEL_28:
    v98 = sub_100487C98(v97, 0LL, 0xE000000000000000LL);
    Strong = swift_unknownObjectWeakLoadStrong( &a5[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_delegate],  v99);
    if (Strong)
    {
      v101 = (void *)Strong;
      isa = UUID._bridgeToObjectiveC()().super.isa;
      [v101 manager:a5 didFailAuthenticationFor:isa error:v98];
      swift_unknownObjectRelease(v101);
    }

    else
    {
    }

    goto LABEL_35;
  }

  uint64_t v52 = v51;
  uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
  v55 = v54;

  LOBYTE(v52) = sub_10046928C(v49, v53, (uint64_t)v55);
  swift_bridgeObjectRelease(v55);
  if ((v52 & 1) == 0)
  {
    uint64_t v74 = a5;
    uint64_t v75 = (os_log_s *)Logger.logObject.getter(v74);
    uint64_t v76 = static os_log_type_t.error.getter(v75);
    if (os_log_type_enabled(v75, v76))
    {
      v175 = a3;
      uint64_t v77 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v78 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v77 = 136315138;
      *(void *)&v181[0] = v78;
      v79 = v29;
      v80 = (const char **)&v74[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_sessionAuthTypes];
      swift_beginAccess( &v74[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_sessionAuthTypes],  &v183,  0LL,  0LL);
      v81 = *v80;
      v82 = sub_100183F14( &qword_100646108,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      swift_bridgeObjectRetain(v81);
      v84 = Dictionary.description.getter(v83, v79, &type metadata for SDAuthenticationType, v82);
      v86 = v85;
      swift_bridgeObjectRelease(v81);
      v182 = sub_10018CDB4(v84, (unint64_t)v86, (uint64_t *)v181);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, &v183, v77 + 4, v77 + 12);
      swift_bridgeObjectRelease(v86);

      _os_log_impl( (void *)&_mh_execute_header,  v75,  v76,  "Already processing authentication session, ongoing seesions: %s",  v77,  0xCu);
      swift_arrayDestroy(v78, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v78, -1LL, -1LL);
      swift_slowDealloc(v77, -1LL, -1LL);
    }

    else
    {
    }

    v103 = sub_100487C98(10LL, 0LL, 0xE000000000000000LL);
    v105 = swift_unknownObjectWeakLoadStrong( &v74[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_delegate],  v104);
    if (v105)
    {
      v106 = (void *)v105;
      v107 = UUID._bridgeToObjectiveC()().super.isa;
      [v106 manager:v74 didFailAuthenticationFor:v107 error:v103];
      swift_unknownObjectRelease(v106);
    }

    else
    {
    }

    goto LABEL_35;
  }

  if (v49 <= 7 && ((1LL << v49) & 0xC4) != 0)
  {
LABEL_15:
    sub_100462B08((uint64_t)a3, (uint64_t)v187, v49, (v49 > 0xE) | (0x1B73u >> v49) & 1, v173, (uint64_t)&v183);
    id v57 = type metadata accessor for TaskPriority(0LL);
    uint64_t v58 = (uint64_t)v174;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56LL))(v174, 1LL, 1LL, v57);
    sub_10019A6C4((uint64_t)&v183, (uint64_t)v181);
    v59 = v171;
    v170(v171, a3, v29);
    uint64_t v60 = *(unsigned __int8 *)(v28 + 80);
    uint64_t v61 = (v60 + 88) & ~v60;
    uint64_t v62 = (char *)swift_allocObject(&unk_1005E3520, v61 + v172, v60 | 7);
    *((void *)v62 + 2) = 0LL;
    *((void *)v62 + 3) = 0LL;
    sub_1001CE0D0(v181, (uint64_t)(v62 + 32));
    *((void *)v62 + 9) = v49;
    *((void *)v62 + 10) = a5;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(&v62[v61], v59, v29);
    v63 = a5;
    uint64_t v64 = sub_1001B37E8(v58, (uint64_t)&unk_100656BF0, (uint64_t)v62);
    swift_release(v64);
    sub_10018709C(&v183);
LABEL_35:
    sub_10018709C(v187);
    return;
  }

  if (v49 > 8)
  {
LABEL_39:
    if (v49 > 7 || ((1LL << v49) & 0xC4) == 0)
    {
      if (v49 < 9)
      {
        sub_1004863E0(v49, v50, a3, (uint64_t)a5);
        goto LABEL_35;
      }

      if (v49 - 9 < 6) {
        sub_100407724(3LL, v56);
      }
    }

    goto LABEL_15;
  }

  v108 = *(uint64_t (**)(uint64_t))&a5[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_isWifiEnabled];
  v109 = *(void *)&a5[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_isWifiEnabled + 8];
  v110 = swift_retain();
  LOBYTE(v10_Block_object_dispose((const void *)(v36 - 144), 8) = v108(v110);
  v111 = swift_release(v109);
  if ((v108 & 1) != 0)
  {
    v112 = *(uint64_t (**)(uint64_t))&a5[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_isBluetoothEnabled];
    v113 = *(void *)&a5[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_isBluetoothEnabled + 8];
    v114 = swift_retain();
    LOBYTE(v112) = v112(v114);
    v115 = swift_release(v113);
  }

  else
  {
    v133 = (os_log_s *)Logger.logObject.getter(v111);
    v134 = static os_log_type_t.error.getter(v133);
    if (os_log_type_enabled(v133, v134))
    {
      v135 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v135 = 0;
      _os_log_impl((void *)&_mh_execute_header, v133, v134, "Wifi is disabled", v135, 2u);
      swift_slowDealloc(v135, -1LL, -1LL);
    }

    v136 = sub_100487C98(16LL, 0LL, 0xE000000000000000LL);
    v138 = swift_unknownObjectWeakLoadStrong( &a5[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_delegate],  v137);
    v140 = v162;
    if (v138)
    {
      v141 = (void *)v138;
      v142 = UUID._bridgeToObjectiveC()().super.isa;
      [v141 manager:a5 didFailAuthenticationFor:v142 error:v136];
      swift_unknownObjectRelease(v141);
    }

    v143 = v169;
    static Date.distantPast.getter(v138, v139);
    a5 = v167;
    v144 = v164;
    *(void *)v167 = v164;
    v145 = v168;
    v166(a5, v165, v168);
    v146 = v144;
    LOBYTE(v144) = _dispatchPreconditionTest(_:)(a5);
    v161(a5, v145);

    __break(1u);
  }

  v147 = (os_log_s *)Logger.logObject.getter(v115);
  v148 = static os_log_type_t.error.getter(v147);
  if (os_log_type_enabled(v147, v148))
  {
    v149 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)v149 = 0;
    _os_log_impl((void *)&_mh_execute_header, v147, v148, "Bluetooth is disabled", v149, 2u);
    swift_slowDealloc(v149, -1LL, -1LL);
  }

  v150 = sub_100487C98(17LL, 0LL, 0xE000000000000000LL);
  v152 = swift_unknownObjectWeakLoadStrong( &a5[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_delegate],  v151);
  v140 = v162;
  if (v152)
  {
    v154 = (void *)v152;
    v155 = UUID._bridgeToObjectiveC()().super.isa;
    [v154 manager:a5 didFailAuthenticationFor:v155 error:v150];
    swift_unknownObjectRelease(v154);
  }

  v143 = v169;
  static Date.distantPast.getter(v152, v153);
  v156 = v167;
  v157 = v164;
  *(void *)v167 = v164;
  v158 = v168;
  v166(v156, v165, v168);
  v159 = v157;
  LOBYTE(v157) = _dispatchPreconditionTest(_:)(v156);
  v161(v156, v158);

  if ((v157 & 1) != 0)
  {
LABEL_67:
    (*(void (**)(char *, uint64_t))(v163 + 8))(v143, v140);
    goto LABEL_35;
  }

  __break(1u);
}

  uint64_t v51 = (*(uint64_t (**)(uint8_t *, uint64_t))(v47 + 8))(v180, v47);
  if (!v52)
  {
    uint64_t v65 = sub_10019A6C4((uint64_t)v188, (uint64_t)&v184);
    v66 = (os_log_s *)Logger.logObject.getter(v65);
    uint64_t v67 = static os_log_type_t.error.getter(v66);
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v69 = a5;
      uint64_t v70 = swift_slowAlloc(32LL, -1LL);
      *(void *)&v182[0] = v70;
      *(_DWORD *)uint64_t v68 = 136315138;
      sub_10019A708(&v184, v186);
      uint64_t v71 = (*(uint64_t (**)(uint8_t *, uint64_t))(v47 + 72))(v180, v47);
      uint64_t v73 = (const char *)v72;
      v183 = sub_10018CDB4(v71, v72, (uint64_t *)v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, &v184, v68 + 4, v68 + 12);
      swift_bridgeObjectRelease(v73);
      sub_10018709C(&v184);
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "No uniqueIDOverride in SDIDSDevice %s", v68, 0xCu);
      swift_arrayDestroy(v70, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v74 = v70;
      a5 = v69;
      swift_slowDealloc(v74, -1LL, -1LL);
      swift_slowDealloc(v68, -1LL, -1LL);
    }

    else
    {
      sub_10018709C(&v184);
    }

    v97 = 10LL;
LABEL_28:
    v98 = sub_100487C98(v97, 0LL, 0xE000000000000000LL);
    Strong = swift_unknownObjectWeakLoadStrong( &a5[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_delegate],  v99);
    if (Strong)
    {
      v101 = (void *)Strong;
      isa = UUID._bridgeToObjectiveC()().super.isa;
      [v101 manager:a5 didFailAuthenticationFor:isa error:v98];
      swift_unknownObjectRelease(v101);
    }

    else
    {
    }

    goto LABEL_35;
  }

  uint64_t v53 = (const char *)v52;
  v54 = sub_10046928C(a1, v51, v52);
  swift_bridgeObjectRelease(v53);
  if ((v54 & 1) == 0)
  {
    uint64_t v75 = a5;
    uint64_t v76 = (os_log_s *)Logger.logObject.getter(v75);
    uint64_t v77 = static os_log_type_t.error.getter(v76);
    if (os_log_type_enabled(v76, v77))
    {
      v78 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v79 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)v78 = 136315138;
      *(void *)&v182[0] = v79;
      v180 = v78 + 4;
      v80 = (const char **)&v75[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_sessionAuthTypes];
      swift_beginAccess( &v75[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_sessionAuthTypes],  &v184,  0LL,  0LL);
      v81 = *v80;
      v82 = sub_100183F14( &qword_100646108,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      swift_bridgeObjectRetain(v81);
      v84 = Dictionary.description.getter(v83, v181, &type metadata for SDAuthenticationType, v82);
      v86 = v85;
      swift_bridgeObjectRelease(v81);
      v183 = sub_10018CDB4(v84, (unint64_t)v86, (uint64_t *)v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v183, &v184, v180, v78 + 12);
      swift_bridgeObjectRelease(v86);

      _os_log_impl( (void *)&_mh_execute_header,  v76,  v77,  "Already processing authentication session, ongoing seesions: %s",  v78,  0xCu);
      swift_arrayDestroy(v79, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v79, -1LL, -1LL);
      swift_slowDealloc(v78, -1LL, -1LL);
    }

    else
    {
    }

    v103 = sub_100487C98(10LL, 0LL, 0xE000000000000000LL);
    v105 = swift_unknownObjectWeakLoadStrong( &v75[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_delegate],  v104);
    if (v105)
    {
      v106 = (void *)v105;
      v107 = UUID._bridgeToObjectiveC()().super.isa;
      [v106 manager:v75 didFailAuthenticationFor:v107 error:v103];
      swift_unknownObjectRelease(v106);
    }

    else
    {
    }

    goto LABEL_35;
  }

  if (a1 <= 7 && ((1LL << a1) & 0xC4) != 0)
  {
LABEL_15:
    sub_100462B08((uint64_t)v32, (uint64_t)v188, a1, (a1 > 0xE) | (0x1B73u >> a1) & 1, v173, (uint64_t)&v184);
    id v56 = type metadata accessor for TaskPriority(0LL);
    id v57 = (uint64_t)v175;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56LL))(v175, 1LL, 1LL, v56);
    sub_10019A6C4((uint64_t)&v184, (uint64_t)v182);
    uint64_t v58 = v174;
    v171(v174, v32, v33);
    v59 = v179;
    uint64_t v60 = *(unsigned __int8 *)(v179 + 80);
    uint64_t v61 = (v60 + 88) & ~v60;
    uint64_t v62 = (char *)swift_allocObject(&unk_1005E34A8, v61 + v172, v60 | 7);
    *((void *)v62 + 2) = 0LL;
    *((void *)v62 + 3) = 0LL;
    sub_1001CE0D0(v182, (uint64_t)(v62 + 32));
    *((void *)v62 + 9) = a1;
    *((void *)v62 + 10) = a5;
    (*(void (**)(char *, char *, uint64_t))(v59 + 32))(&v62[v61], v58, v33);
    v63 = a5;
    uint64_t v64 = sub_1001B37E8(v57, (uint64_t)&unk_100656BE0, (uint64_t)v62);
    swift_release(v64);
    sub_10018709C(&v184);
LABEL_35:
    sub_10018709C(v188);
    return;
  }

  if (a1 > 8)
  {
LABEL_39:
    if (a1 > 7 || ((1LL << a1) & 0xC4) == 0)
    {
      if (a1 < 9)
      {
        sub_1004865C8(a1, (uint64_t)v178, v32, (uint64_t)a5, (uint64_t)v180, v47);
        goto LABEL_35;
      }

      if (a1 - 9 < 6) {
        sub_100407724(3LL, v55);
      }
    }

    goto LABEL_15;
  }

  v108 = *(uint64_t (**)(uint64_t))&a5[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_isWifiEnabled];
  v109 = *(void *)&a5[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_isWifiEnabled + 8];
  v110 = swift_retain();
  v111 = v108(v110);
  v112 = swift_release(v109);
  if ((v111 & 1) != 0)
  {
    v113 = *(uint64_t (**)(uint64_t))&a5[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_isBluetoothEnabled];
    v114 = *(void *)&a5[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_isBluetoothEnabled + 8];
    v115 = swift_retain();
    v116 = v113(v115);
    v117 = swift_release(v114);
    uint64_t v47 = v177;
    if ((v116 & 1) != 0) {
      goto LABEL_39;
    }
  }

  else
  {
    v132 = (os_log_s *)Logger.logObject.getter(v112);
    v133 = static os_log_type_t.error.getter(v132);
    if (os_log_type_enabled(v132, v133))
    {
      v134 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v134 = 0;
      _os_log_impl((void *)&_mh_execute_header, v132, v133, "Wifi is disabled", v134, 2u);
      swift_slowDealloc(v134, -1LL, -1LL);
    }

    v135 = sub_100487C98(16LL, 0LL, 0xE000000000000000LL);
    v137 = swift_unknownObjectWeakLoadStrong( &a5[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_delegate],  v136);
    if (v137)
    {
      v139 = (void *)v137;
      v140 = UUID._bridgeToObjectiveC()().super.isa;
      [v139 manager:a5 didFailAuthenticationFor:v140 error:v135];
      swift_unknownObjectRelease(v139);
    }

    v141 = v169;
    static Date.distantPast.getter(v137, v138);
    v142 = v167;
    v143 = v164;
    *v167 = v164;
    v144 = v168;
    v166(v142, v165, v168);
    v145 = v143;
    LOBYTE(v143) = _dispatchPreconditionTest(_:)(v142);
    v161(v142, v144);

    __break(1u);
  }

  v146 = (os_log_s *)Logger.logObject.getter(v117);
  v147 = static os_log_type_t.error.getter(v146);
  if (os_log_type_enabled(v146, v147))
  {
    v148 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)v148 = 0;
    _os_log_impl((void *)&_mh_execute_header, v146, v147, "Bluetooth is disabled", v148, 2u);
    swift_slowDealloc(v148, -1LL, -1LL);
  }

  v149 = sub_100487C98(17LL, 0LL, 0xE000000000000000LL);
  v151 = swift_unknownObjectWeakLoadStrong( &a5[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_delegate],  v150);
  if (v151)
  {
    v153 = (void *)v151;
    v154 = UUID._bridgeToObjectiveC()().super.isa;
    [v153 manager:a5 didFailAuthenticationFor:v154 error:v149];
    swift_unknownObjectRelease(v153);
  }

  v141 = v169;
  static Date.distantPast.getter(v151, v152);
  v155 = v167;
  v156 = v164;
  *v167 = v164;
  v157 = v168;
  v166(v155, v165, v168);
  v158 = v156;
  LOBYTE(v156) = _dispatchPreconditionTest(_:)(v155);
  v161(v155, v157);

  if ((v156 & 1) != 0)
  {
LABEL_61:
    (*(void (**)(char *, uint64_t))(v162 + 8))(v141, v163);
    goto LABEL_35;
  }

  __break(1u);
}

LABEL_30:
    unint64_t v6 = 0;
  }

  if (self->_shouldScan)
  {
    if (!self->_deviceDiscovery)
    {
      if (dword_1006417A0 <= 30
        && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 30LL)))
      {
        LogPrintF(&dword_1006417A0, "-[SDSetupAgent _ensureClientStarted]", 30LL, "Discovery start\n");
      }

      unsigned int v28 = objc_alloc_init(&OBJC_CLASS___SFDeviceDiscovery);
      deviceDiscovery = self->_deviceDiscovery;
      self->_deviceDiscovery = v28;

      -[SFDeviceDiscovery setChangeFlags:](self->_deviceDiscovery, "setChangeFlags:", 5LL);
      -[SFDeviceDiscovery setDiscoveryFlags:](self->_deviceDiscovery, "setDiscoveryFlags:", 100794240LL);
      -[SFDeviceDiscovery setFastScanMode:](self->_deviceDiscovery, "setFastScanMode:", 2LL);
      -[SFDeviceDiscovery setPurpose:](self->_deviceDiscovery, "setPurpose:", @"SetupAgent");
      -[SFDeviceDiscovery setScanRate:](self->_deviceDiscovery, "setScanRate:", 20LL);
      -[SFDeviceDiscovery setRssiThreshold:](self->_deviceDiscovery, "setRssiThreshold:", -70LL);
      v46[0] = _NSConcreteStackBlock;
      v46[1] = 3221225472LL;
      v46[2] = sub_10003C08C;
      v46[3] = &unk_1005CB8C8;
      v46[4] = self;
      -[SFDeviceDiscovery setDeviceFoundHandler:](self->_deviceDiscovery, "setDeviceFoundHandler:", v46);
      v45[0] = _NSConcreteStackBlock;
      v45[1] = 3221225472LL;
      v45[2] = sub_10003C098;
      v45[3] = &unk_1005CB8C8;
      v45[4] = self;
      -[SFDeviceDiscovery setDeviceLostHandler:](self->_deviceDiscovery, "setDeviceLostHandler:", v45);
      v44[0] = _NSConcreteStackBlock;
      v44[1] = 3221225472LL;
      v44[2] = sub_10003C0A4;
      v44[3] = &unk_1005CB8F0;
      v44[4] = self;
      -[SFDeviceDiscovery setDeviceChangedHandler:](self->_deviceDiscovery, "setDeviceChangedHandler:", v44);
      -[SFDeviceDiscovery activateWithCompletion:](self->_deviceDiscovery, "activateWithCompletion:", &stru_1005CB930);
    }

    if (self->_watchSetupEnabled && !self->_watchSetupScanner)
    {
      if (dword_1006417A0 <= 30
        && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 30LL)))
      {
        LogPrintF(&dword_1006417A0, "-[SDSetupAgent _ensureClientStarted]", 30LL, "WatchScan start\n");
      }

      BOOL v38 = -[SFBLEScanner initWithType:](objc_alloc(&OBJC_CLASS___SFBLEScanner), "initWithType:", 17LL);
      watchSetupScanner = self->_watchSetupScanner;
      self->_watchSetupScanner = v38;

      -[SFBLEScanner setDispatchQueue:](self->_watchSetupScanner, "setDispatchQueue:", self->_dispatchQueue);
      -[SFBLEScanner setChangeFlags:](self->_watchSetupScanner, "setChangeFlags:", 13LL);
      -[SFBLEScanner setRssiThreshold:](self->_watchSetupScanner, "setRssiThreshold:", -60LL);
      v43[0] = _NSConcreteStackBlock;
      v43[1] = 3221225472LL;
      v43[2] = sub_10003C184;
      v43[3] = &unk_1005CB958;
      v43[4] = self;
      -[SFBLEScanner setDeviceFoundHandler:](self->_watchSetupScanner, "setDeviceFoundHandler:", v43);
      -[SFBLEScanner setDeviceLostHandler:](self->_watchSetupScanner, "setDeviceLostHandler:", &stru_1005CB998);
      v42[0] = _NSConcreteStackBlock;
      v42[1] = 3221225472LL;
      v42[2] = sub_10003C29C;
      v42[3] = &unk_1005CB9C0;
      v42[4] = self;
      -[SFBLEScanner setDeviceChangedHandler:](self->_watchSetupScanner, "setDeviceChangedHandler:", v42);
      -[SFBLEScanner activateWithCompletion:](self->_watchSetupScanner, "activateWithCompletion:", &stru_1005CB9E0);
      if (!self->_proximityController)
      {
        uint64_t v40 = (SDProximityController *)objc_claimAutoreleasedReturnValue( +[SDProximityController sharedController]( &OBJC_CLASS___SDProximityController,  "sharedController"));
        proximityController = self->_proximityController;
        self->_proximityController = v40;
      }
    }
  }

  else
  {
    unint64_t v25 = self->_scanTimer;
    if (v25)
    {
      char v26 = v25;
      dispatch_source_cancel(v26);
      char v27 = self->_scanTimer;
      self->_scanTimer = 0LL;
    }

    if (self->_deviceDiscovery)
    {
      if (dword_1006417A0 <= 30
        && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 30LL)))
      {
        LogPrintF(&dword_1006417A0, "-[SDSetupAgent _ensureClientStarted]", 30LL, "Discovery stop (shouldn't scan)\n");
      }

      -[SFDeviceDiscovery invalidate](self->_deviceDiscovery, "invalidate");
      unint64_t v30 = self->_deviceDiscovery;
      self->_deviceDiscovery = 0LL;

      -[NSMutableDictionary removeAllObjects](self->_devices, "removeAllObjects");
      devices = self->_devices;
      self->_devices = 0LL;

      -[SDSetupAgent _resetTriggers](self, "_resetTriggers");
    }

    -[CUUserNotificationSession invalidate](self->_unoteTVLatencySetup, "invalidate");
    unoteTVLatencySetup = self->_unoteTVLatencySetup;
    self->_unoteTVLatencySetup = 0LL;

    watchFastScanTimer = self->_watchFastScanTimer;
    if (watchFastScanTimer)
    {
      uint64_t v34 = watchFastScanTimer;
      dispatch_source_cancel(v34);
      unint64_t v35 = self->_watchFastScanTimer;
      self->_watchFastScanTimer = 0LL;
    }

    if (self->_watchSetupScanner)
    {
      if (dword_1006417A0 <= 30
        && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 30LL)))
      {
        LogPrintF(&dword_1006417A0, "-[SDSetupAgent _ensureClientStarted]", 30LL, "WatchScan stop (shouldn't scan)\n");
      }

      -[SFBLEScanner invalidate](self->_watchSetupScanner, "invalidate");
      char v36 = self->_watchSetupScanner;
      self->_watchSetupScanner = 0LL;

      -[NSMutableDictionary removeAllObjects](self->_watchSetupDevices, "removeAllObjects");
      watchSetupDevices = self->_watchSetupDevices;
      self->_watchSetupDevices = 0LL;

      self->_triggeredUIWatchSetup = 0;
    }
  }

    BOOL v9 = 0LL;
    goto LABEL_31;
  }

  if (([v16 needsSetup] & 1) == 0)
  {
    -[SDAutoFillAgent _deviceStoppedRequesting:](self, "_deviceStoppedRequesting:", v16);
    goto LABEL_31;
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:](self->_triggeredDevices, "setObject:forKeyedSubscript:", v16, v4);
  if (v5 != 19) {
    -[SDAutoFillAgent _deviceStoppedRequesting:](self, "_deviceStoppedRequesting:", v16);
  }
  if (self->_prefRateLimitDisabled && !gSDProxCardsSuppressed) {
    goto LABEL_14;
  }
LABEL_31:
  -[SDAutoFillAgent _update](self, "_update");
}

    goto LABEL_31;
  }

  uint64_t v17 = &stru_1005E3958;
LABEL_31:
  char v18 = (__CFString *)_LSCreateDeviceTypeIdentifierWithModelCode(v5);
  unsigned int v19 = auto_unlock_log(v18);
  unint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    uint64_t v73 = v18;
    uint64_t v74 = 2112;
    uint64_t v75 = v5;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "UTI %@ for modelIdentifier %@", buf, 0x16u);
  }

  if (v18)
  {
    char v22 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString componentsSeparatedByString:](v18, "componentsSeparatedByString:", @"-"));
    if (-[__CFString length](v10, "length"))
    {
      uint64_t v60 = v10;
    }

    else
    {
      uint64_t v68 = 0u;
      uint64_t v69 = 0u;
      v66 = 0u;
      uint64_t v67 = 0u;
      unsigned int v23 = v22;
      uint64_t v24 = [v23 countByEnumeratingWithState:&v66 objects:v71 count:16];
      if (!v24) {
        goto LABEL_51;
      }
      unint64_t v25 = v24;
      uint64_t v58 = v17;
      uint64_t v61 = v10;
      id v56 = a2;
      char v26 = *(void *)v67;
      while (2)
      {
        for (i = 0LL; i != v25; i = (char *)i + 1)
        {
          if (*(void *)v67 != v26) {
            objc_enumerationMutation(v23);
          }
          unsigned int v28 = *(void **)(*((void *)&v66 + 1) + 8LL * (void)i);
          if ([v28 containsString:@"mm"])
          {
            if ([v28 containsString:@"38"])
            {
              unint64_t v30 = @"UNLOCK_WATCH_COMPACT_SIZE";
              a2 = v56;
              uint64_t v17 = v58;
              int v10 = v61;
            }

            else
            {
              uint64_t v17 = v58;
              int v10 = v61;
              if (([v28 containsString:@"42"] & 1) == 0)
              {
                a2 = v56;
                goto LABEL_51;
              }

              unint64_t v30 = @"UNLOCK_WATCH_REGULAR_SIZE";
              a2 = v56;
            }

            char v31 = SFLocalizedStringForKey(v30, v29);
            char v32 = objc_claimAutoreleasedReturnValue(v31);

            int v10 = (__CFString *)v32;
            goto LABEL_51;
          }
        }

        unint64_t v25 = [v23 countByEnumeratingWithState:&v66 objects:v71 count:16];
        if (v25) {
          continue;
        }
        break;
      }

      a2 = v56;
      uint64_t v17 = v58;
      int v10 = v61;
LABEL_51:
      uint64_t v60 = v10;
    }

    unsigned int v33 = a3;
    uint64_t v34 = (__CFString *)UTTypeCopyDescription(v18);
    unint64_t v35 = auto_unlock_log(v34);
    char v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v73 = v34;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Description %@", buf, 0xCu);
    }

    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceCharacterSet](&OBJC_CLASS___NSCharacterSet, "whitespaceCharacterSet"));
    BOOL v38 = (void *)objc_claimAutoreleasedReturnValue( -[__CFString componentsSeparatedByCharactersInSet:]( v34,  "componentsSeparatedByCharactersInSet:",  v37));

    if (!-[__CFString length](v17, "length"))
    {
      uint64_t v64 = 0u;
      uint64_t v65 = 0u;
      uint64_t v62 = 0u;
      v63 = 0u;
      uint64_t v39 = v38;
      uint64_t v40 = [v39 countByEnumeratingWithState:&v62 objects:v70 count:16];
      if (!v40) {
        goto LABEL_78;
      }
      uint64_t v41 = v40;
      id v57 = a2;
      v59 = v17;
      v55 = v33;
      v42 = 0;
      uint64_t v43 = *(void *)v63;
      while (2)
      {
        for (j = 0LL; j != v41; j = (char *)j + 1)
        {
          if (*(void *)v63 != v43) {
            objc_enumerationMutation(v39);
          }
          uint64_t v45 = *(void **)(*((void *)&v62 + 1) + 8LL * (void)j);
          if ((v42 & 1) != 0)
          {
            if ([*(id *)(*((void *)&v62 + 1) + 8 * (void)j) containsString:@"1"])
            {
              uint64_t v47 = @"UNLOCK_WATCH_SERIES_ONE";
              unsigned int v33 = v55;
              a2 = v57;
              uint64_t v17 = v59;
            }

            else
            {
              unsigned int v33 = v55;
              uint64_t v17 = v59;
              if ([v45 containsString:@"2"])
              {
                uint64_t v47 = @"UNLOCK_WATCH_SERIES_TWO";
              }

              else if ([v45 containsString:@"3"])
              {
                uint64_t v47 = @"UNLOCK_WATCH_SERIES_THREE";
              }

              else if ([v45 containsString:@"4"])
              {
                uint64_t v47 = @"UNLOCK_WATCH_SERIES_FOUR";
              }

              else if ([v45 containsString:@"5"])
              {
                uint64_t v47 = @"UNLOCK_WATCH_SERIES_FIVE";
              }

              else
              {
                if (([v45 containsString:@"6"] & 1) == 0)
                {
                  a2 = v57;
                  goto LABEL_78;
                }

                uint64_t v47 = @"UNLOCK_WATCH_SERIES_SIX";
              }

              a2 = v57;
            }

            uint64_t v48 = SFLocalizedStringForKey(v47, v46);
            uint64_t v49 = objc_claimAutoreleasedReturnValue(v48);

            uint64_t v17 = (__CFString *)v49;
            goto LABEL_78;
          }

          v42 = [*(id *)(*((void *)&v62 + 1) + 8 * (void)j) containsString:@"Series"];
        }

        uint64_t v41 = [v39 countByEnumeratingWithState:&v62 objects:v70 count:16];
        if (v41) {
          continue;
        }
        break;
      }

      unsigned int v33 = v55;
      a2 = v57;
      uint64_t v17 = v59;
LABEL_78:
    }

    a3 = v33;
    int v10 = v60;
  }

  uint64_t v50 = auto_unlock_log(v21);
  uint64_t v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
  if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v73 = v10;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_INFO, "Watch Size %@", buf, 0xCu);
  }

  uint64_t v53 = auto_unlock_log(v52);
  v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
  if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v73 = v17;
    _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_INFO, "Series %@", buf, 0xCu);
  }

  if (a2) {
    *a2 = v10;
  }
  if (a3) {
    *a3 = v17;
  }
}

        self->_idsShouldAdvertiseNearbyInfo = 1;

        goto LABEL_31;
      }
}

  type metadata accessor for CFString(0LL);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v44);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

        unsigned int v5 = v44;
        goto LABEL_31;
      }

        BOOL v9 = v50;
        goto LABEL_31;
      }

            uint64_t v72 = *(int *)(v0 + 620);
            uint64_t v64 = *(int *)(v0 + 616);
            uint64_t v67 = *(int *)(v0 + 612);
            uint64_t v45 = *(void **)(v0 + 592);
            uint64_t v46 = *(void *)(v0 + 448);
            v78 = *(void *)(v0 + 432);
            v80 = *(void *)(v0 + 408);
            uint64_t v47 = *(void *)(v0 + 376);
            uint64_t v48 = *(int **)(v0 + 384);
            uint64_t v49 = *(int **)(v0 + 368);
            uint64_t v77 = *(void *)(v0 + 320);
            uint64_t v75 = *(void *)(v0 + 312);
            v63 = (uint64_t)v48 + *(int *)(v0 + 608);
            uint64_t v61 = (uint64_t)v48 + *(int *)(v0 + 604);
            v59 = (uint64_t)v48 + *(int *)(v0 + 600);
            uint64_t v50 = *(void *)(v0 + 296);
            v66 = *(void *)(v0 + 304);
            sub_100187094(v22);

            swift_release(v46);
            uint64_t v51 = v47 + v49[12];
            uint64_t v52 = v47 + v49[20];
            uint64_t v53 = v47 + v49[32];
            v82 = *v48;
            uint64_t v69 = *((_BYTE *)v48 + 4);
            sub_1001A4B40(v59, v51, _s14descr1005DF7D1C10AskRequestVMa);
            uint64_t v68 = *(void *)((char *)v48 + v67);
            sub_1001A4B40(v61, v52, type metadata accessor for SDAirDropDiscoveredEndpoint);
            uint64_t v65 = *(void *)((char *)v48 + v64);
            uint64_t v62 = *(_OWORD *)(v70 + 8);
            uint64_t v60 = *(void *)(v70 + 24);
            uint64_t v58 = *(_BYTE *)(v70 + 32);
            id v56 = *(_OWORD *)(v70 + 56);
            id v57 = *(_OWORD *)(v70 + 40);
            v55 = *(_OWORD *)(v70 + 72);
            v54 = *(void *)(v70 + 88);
            uint64_t v71 = *(void *)(v70 + 96);
            uint64_t v73 = *(void *)((char *)v48 + v72);
            sub_1001870BC(v63, v53, &qword_100649F80);
            sub_1001A4B40(v51, v66, _s14descr1005DF7D1C10AskRequestVMa);
            sub_1001A4B40(v52, v75, type metadata accessor for SDAirDropDiscoveredEndpoint);
            sub_1001870BC(v53, v77, &qword_100649F80);
            swift_task_dealloc(v78);
            swift_task_dealloc(v80);
            swift_task_dealloc(v48);
            swift_task_dealloc(v47);
            *(_BYTE *)(v50 + 4) = v69;
            *(_DWORD *)uint64_t v50 = v82;
            *(void *)(v50 + _Block_object_dispose((const void *)(v36 - 144), 8) = v68;
            *(void *)(v50 + 16) = v65;
            *(_OWORD *)(v50 + 24) = v62;
            *(void *)(v50 + 40) = v60;
            *(_BYTE *)(v50 + 4_Block_object_dispose((const void *)(v36 - 144), 8) = v58;
            *(_OWORD *)(v50 + 56) = v57;
            *(_OWORD *)(v50 + 72) = v56;
            *(_OWORD *)(v50 + 8_Block_object_dispose((const void *)(v36 - 144), 8) = v55;
            *(void *)(v50 + 104) = v54;
            *(void *)(v50 + 112) = v71;
            *(void *)(v50 + 120) = v73;
            (*(void (**)(void))(v0 + 8))();
            return;
          }
        }
      }
    }

  __break(1u);
  return result;
}

  if (isUniquelyReferenced_nonNull_native < 0) {
    id v56 = isUniquelyReferenced_nonNull_native;
  }
  else {
    id v56 = isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t v51 = _CocoaArrayWrapper.endIndex.getter(v56);
LABEL_25:
  swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
  uint64_t result = sub_1003961FC(v51);
  uint64_t v53 = *(void (**)(void))(v22 + OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropEndpointService_endpointsChangedHandler);
  if (v53)
  {
    v54 = *(void *)(v22 + OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropEndpointService_endpointsChangedHandler + 8);
    swift_retain(v54);
    v55 = sub_1002EEB54();
    v53();
    sub_100224FF8((uint64_t)v53, v54);
    return swift_bridgeObjectRelease(v55);
  }

  return result;
}

  unint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 336) + 56LL);
  v30(*(void *)(v0 + 312), 1LL, 1LL, *(void *)(v0 + 328));
  uint64_t v64 = v20;
LABEL_31:
  swift_release(v64);
  if (qword_100644138 != -1) {
    swift_once(&qword_100644138, sub_1002E9860);
  }
  uint64_t v65 = *(void *)(v0 + 248);
  v66 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v66, (uint64_t)qword_10064D970);
  uint64_t v67 = swift_bridgeObjectRetain_n(v65, 2LL);
  uint64_t v68 = (os_log_s *)Logger.logObject.getter(v67);
  uint64_t v69 = static os_log_type_t.error.getter(v68);
  uint64_t v70 = os_log_type_enabled(v68, v69);
  uint64_t v71 = *(const char **)(v0 + 248);
  if (v70)
  {
    v117 = *(void *)(v0 + 240);
    uint64_t v72 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v73 = swift_slowAlloc(32LL, -1LL);
    v119[0] = v73;
    *(_DWORD *)uint64_t v72 = 136315138;
    swift_bridgeObjectRetain(v71);
    *(void *)(v0 + 216) = sub_10018CDB4(v117, (unint64_t)v71, v119);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v112, v0 + 224, v72 + 4, v72 + 12);
    swift_bridgeObjectRelease_n(v71, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v68, v69, "No matching connectables for %s", v72, 0xCu);
    swift_arrayDestroy(v73, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v73, -1LL, -1LL);
    swift_slowDealloc(v72, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(*(void *)(v0 + 248), 2LL);
  }

  uint64_t v74 = (os_log_s *)Logger.logObject.getter(*(id *)(v0 + 256));
  uint64_t v75 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v74, v75))
  {
    uint64_t v76 = *(void *)(v0 + 384);
    uint64_t v77 = *(void *)(v0 + 328);
    v78 = *(char **)(v0 + 256);
    v79 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v113 = swift_slowAlloc(32LL, -1LL);
    v119[0] = v113;
    *(_DWORD *)v79 = 136315138;
    v80 = *(const char **)&v78[v76];
    v81 = sub_100183F14( &qword_100646108,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    v82 = swift_bridgeObjectRetain(v80);
    v83 = Set.description.getter(v82, v77, v81);
    v85 = v84;
    swift_bridgeObjectRelease(v80);
    *(void *)(v0 + 200) = sub_10018CDB4(v83, (unint64_t)v85, v119);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v111, v114, v79 + 4, v79 + 12);
    swift_bridgeObjectRelease(v85);

    _os_log_impl((void *)&_mh_execute_header, v74, v75, "Current displayableIDs %s", v79, 0xCu);
    swift_arrayDestroy(v113, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v113, -1LL, -1LL);
    swift_slowDealloc(v79, -1LL, -1LL);
  }

  else
  {
    v86 = *(void **)(v0 + 256);
  }

  v87 = (os_log_s *)Logger.logObject.getter(*(id *)(v0 + 256));
  v88 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v87, v88))
  {
    v89 = *(void *)(v0 + 328);
    v90 = *(char **)(v0 + 256);
    v91 = (const char **)&v90[*(void *)(v0 + 400)];
    v92 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v118 = swift_slowAlloc(32LL, -1LL);
    v119[0] = v118;
    *(_DWORD *)v92 = 136315138;
    *(void *)&v93 = swift_beginAccess(v91, v0 + 120, 0LL, 0LL).n128_u64[0];
    v94 = *v91;
    swift_bridgeObjectRetain(v94, v93);
    v95 = sub_100183098((uint64_t *)&unk_10064DA90);
    v96 = sub_100183F14( &qword_100646108,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    v97 = Dictionary.Keys.description.getter(v94, v89, v95, v96);
    v99 = v98;
    swift_bridgeObjectRelease(v94);
    *(void *)(v0 + 192) = sub_10018CDB4(v97, (unint64_t)v99, v119);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v111, v92 + 4, v92 + 12);
    swift_bridgeObjectRelease(v99);

    _os_log_impl((void *)&_mh_execute_header, v87, v88, "Current connectable mapping %s", v92, 0xCu);
    swift_arrayDestroy(v118, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v118, -1LL, -1LL);
    swift_slowDealloc(v92, -1LL, -1LL);
  }

  else
  {
    v100 = *(void **)(v0 + 256);
  }

  v30(*(void *)(v0 + 232), 1LL, 1LL, *(void *)(v0 + 328));
LABEL_43:
  v101 = *(void *)(v0 + 352);
  v102 = *(void *)(v0 + 344);
  v104 = *(void *)(v0 + 312);
  v103 = *(void *)(v0 + 320);
  v106 = *(void *)(v0 + 296);
  v105 = *(void *)(v0 + 304);
  v108 = *(void *)(v0 + 280);
  v107 = *(void *)(v0 + 288);
  swift_task_dealloc(*(void *)(v0 + 360));
  swift_task_dealloc(v101);
  swift_task_dealloc(v102);
  swift_task_dealloc(v103);
  swift_task_dealloc(v104);
  swift_task_dealloc(v105);
  swift_task_dealloc(v106);
  swift_task_dealloc(v107);
  swift_task_dealloc(v108);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

    unsigned int v13 = (v21 - 1) & v21;
    uint64_t v14 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_31:
    unsigned int v19 = (char *)*(id *)(*(void *)(v2 + 48) + 8 * v14);
    if (!v19) {
      goto LABEL_34;
    }
    while (1)
    {
      sub_1003B6FA0(v25, v19);

      unint64_t v7 = v15;
      char v8 = v13;
      if ((v2 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_12:
      char v16 = __CocoaSet.Iterator.next()(a1);
      if (v16)
      {
        uint64_t v17 = v16;
        uint64_t v24 = v16;
        char v18 = sub_100183168(0LL, (unint64_t *)&unk_10064B7B0, &OBJC_CLASS___SFAutoUnlockDevice_ptr);
        swift_unknownObjectRetain(v17);
        swift_dynamicCast(v25, &v24, (char *)&type metadata for Swift.AnyObject + 8, v18, 7LL);
        unsigned int v19 = (char *)v25[0];
        swift_unknownObjectRelease(v17);
        unint64_t v15 = v7;
        unsigned int v13 = v8;
        if (v19) {
          continue;
        }
      }

      goto LABEL_34;
    }
  }

  __break(1u);
}

      uint64_t v39 = (v44 - 1) & v44;
      v42 = __clz(__rbit64(v44)) + (v34 << 6);
LABEL_31:
      sub_1004613A8(3LL, *(void *)(*(void *)(v32 + 48) + 8 * v42));
      sub_10028B078(v46);
      if (v39) {
        goto LABEL_16;
      }
    }

    uint64_t v45 = v43 + 3;
    if (v45 >= v40) {
      goto LABEL_40;
    }
    uint64_t v44 = *(void *)(v36 + 8 * v45);
    if (v44)
    {
      uint64_t v34 = v45;
      goto LABEL_30;
    }

    while (1)
    {
      uint64_t v34 = v45 + 1;
      if (__OFADD__(v45, 1LL)) {
        break;
      }
      if (v34 >= v40) {
        goto LABEL_40;
      }
      uint64_t v44 = *(void *)(v36 + 8 * v34);
      ++v45;
      if (v44) {
        goto LABEL_30;
      }
    }

    __break(1u);
    while (2)
    {
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      swift_once(&qword_100644088, sub_100270494);
LABEL_47:
      char v18 = 0LL;
      sub_1002712F8(3);
LABEL_156:
      v157 = v61;
      v158 = *(os_unfair_lock_s **)(v61 + 112);
      v159 = swift_task_alloc(32LL);
      *(void *)(v159 + 16) = sub_10034BF48;
      *(void *)(v159 + 24) = v157;
      os_unfair_lock_lock(v158 + 4);
      (*(void (**)(uint64_t *__return_ptr))(v159 + 16))(v188);
      uint64_t v60 = (const char *)v188[0];
      os_unfair_lock_unlock(v158 + 4);
      swift_release(v157);
      swift_task_dealloc(v159);
LABEL_51:
      uint64_t v62 = 0LL;
      v160 = v2 + 7;
      v161 = v2 + 2;
      v170 = v2 + 10;
      v164 = v2 + 15;
      v165 = v2 + 14;
      v162 = v2 + 17;
      v163 = v2 + 16;
      v182 = (id *)(v2 + 18);
      v181 = v2 + 19;
      v63 = v2 + 21;
      v166 = (id *)(v2 + 20);
      v167 = v174 + 56;
      uint64_t v64 = -1LL << *(_BYTE *)(v174 + 32);
      if (-v64 < 64) {
        uint64_t v65 = ~(-1LL << -(char)v64);
      }
      else {
        uint64_t v65 = -1LL;
      }
      v66 = v65 & *(void *)(v174 + 56);
      v171 = v2[26] + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_autoUnlockEligibleDevices;
      v168 = (unint64_t)(63 - v64) >> 6;
      v186 = (char *)(v60 + 56);
      v187 = v60;
      v180 = v2 + 21;
LABEL_56:
      if (v66)
      {
        v176 = (v66 - 1) & v66;
        v177 = v62;
        uint64_t v67 = __clz(__rbit64(v66)) | (v62 << 6);
      }

      else
      {
        uint64_t v68 = __OFADD__(v62, 1LL);
        uint64_t v69 = v62 + 1;
        if (v68) {
          continue;
        }
        if (v69 >= v168)
        {
LABEL_155:
          swift_release(v174);
          swift_bridgeObjectRelease(v60);
          *(void *)&v153 = swift_beginAccess(v172, v160, 0LL, 0LL).n128_u64[0];
          v154 = *v172;
          swift_bridgeObjectRetain(*v172, v153);
          sub_1001902E8(v155);
          id v57 = v156;
          swift_bridgeObjectRelease_n(v154, 2LL);
          return ((uint64_t (*)(void *, __n128))v2[1])(v57, v58);
        }

        uint64_t v70 = *(void *)(v167 + 8 * v69);
        if (!v70)
        {
          uint64_t v71 = v69 + 1;
          if (v69 + 1 >= v168) {
            goto LABEL_155;
          }
          uint64_t v70 = *(void *)(v167 + 8 * v71);
          if (!v70)
          {
            uint64_t v71 = v69 + 2;
            if (v69 + 2 >= v168) {
              goto LABEL_155;
            }
            uint64_t v70 = *(void *)(v167 + 8 * v71);
            if (!v70)
            {
              uint64_t v71 = v69 + 3;
              if (v69 + 3 >= v168) {
                goto LABEL_155;
              }
              uint64_t v70 = *(void *)(v167 + 8 * v71);
              if (!v70)
              {
                while (1)
                {
                  uint64_t v69 = v71 + 1;
                  if (__OFADD__(v71, 1LL)) {
                    goto LABEL_162;
                  }
                  if (v69 >= v168) {
                    goto LABEL_155;
                  }
                  uint64_t v70 = *(void *)(v167 + 8 * v69);
                  ++v71;
                  if (v70) {
                    goto LABEL_68;
                  }
                }
              }
            }
          }

          uint64_t v69 = v71;
        }

  uint64_t v45 = (os_log_s *)v2;
  uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
  uint64_t v47 = static os_log_type_t.default.getter(v46);
  if (os_log_type_enabled(v46, v47))
  {
    uint64_t v48 = swift_slowAlloc(12LL, -1LL);
    uint64_t v49 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v48 = 138412290;
    *(void *)(v48 + 4) = v45;
    *uint64_t v49 = v1;
    _os_log_impl( (void *)&_mh_execute_header,  v46,  v47,  "%@ not enabled to be unlocked by this device",  (uint8_t *)v48,  0xCu);
    uint64_t v50 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v49, 1LL, v50);
    swift_slowDealloc(v49, -1LL, -1LL);
    swift_slowDealloc(v48, -1LL, -1LL);
  }

  else
  {

    uint64_t v46 = v45;
  }

  uint64_t v51 = (void *)swift_task_alloc(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
  *(void *)(v0 + 36_Block_object_dispose((const void *)(v36 - 144), 8) = v51;
  CFStringRef v51 = v0;
  v51[1] = sub_10046721C;
  return (id)_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v0 + 184, 0LL, 0LL, *(void *)(v0 + 320), v0 + 168);
}

    swift_once(&qword_100644408, sub_100458568);
    goto LABEL_7;
  }

  char v26 = v25;
  char v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  uint64_t v29 = v28;

  UUID.init(uuidString:)(v27, v29);
  unint64_t v30 = v92;
  char v31 = v12;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v11, 1LL, v12) == 1)
  {
    swift_bridgeObjectRelease(v29);
    sub_100187100((uint64_t)v11, &qword_10064DA60);
    goto LABEL_6;
  }

  uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
  uint64_t v46 = v16;
  v45(v16, v11, v31);
  if (![v17 hasType]
    || (uint64_t v47 = sub_1003500F4([v17 type]), (v48 & 1) != 0))
  {
    swift_bridgeObjectRelease(v29);
    if (qword_100644408 != -1) {
      swift_once(&qword_100644408, sub_100458568);
    }
    uint64_t v60 = type metadata accessor for Logger(0LL);
    uint64_t v61 = sub_100186DE4(v60, (uint64_t)qword_100656748);
    uint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
    v63 = static os_log_type_t.error.getter(v62);
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v64 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Message missing authenticationType", v64, 2u);
      swift_slowDealloc(v64, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v30 + 8))(v46, v31);
  }

  else
  {
    v83 = v47;
    v85 = v27;
    if (qword_100644408 != -1) {
      swift_once(&qword_100644408, sub_100458568);
    }
    v84 = v45;
    uint64_t v49 = type metadata accessor for Logger(0LL);
    sub_100186DE4(v49, (uint64_t)qword_100656748);
    uint64_t v50 = v17;
    swift_bridgeObjectRetain_n(v29, 2LL);
    v86 = v50;
    uint64_t v51 = (os_log_s *)Logger.logObject.getter(v86);
    uint64_t v52 = static os_log_type_t.default.getter(v51);
    uint64_t v53 = v52;
    if (os_log_type_enabled(v51, v52))
    {
      v54 = swift_slowAlloc(22LL, -1LL);
      v81 = v53;
      v55 = v54;
      v79 = (void *)swift_slowAlloc(8LL, -1LL);
      v82 = swift_slowAlloc(32LL, -1LL);
      *(void *)&v93[0] = v82;
      *(_DWORD *)v55 = 138412546;
      v80 = v51;
      v94 = (uint64_t)v86;
      id v56 = v86;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v55 + 4, v55 + 12);
      id v57 = v79;
      *v79 = v17;

      unint64_t v30 = v92;
      *(_WORD *)(v55 + 12) = 2080;
      swift_bridgeObjectRetain(v29);
      v94 = sub_10018CDB4(v85, (unint64_t)v29, (uint64_t *)v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v55 + 14, v55 + 22);
      swift_bridgeObjectRelease_n(v29, 3LL);
      uint64_t v51 = v80;
      _os_log_impl( (void *)&_mh_execute_header,  v80,  (os_log_type_t)v81,  "Received %@ for sessionID %s",  (uint8_t *)v55,  0x16u);
      uint64_t v58 = sub_100183098(&qword_1006454E0);
      swift_arrayDestroy(v57, 1LL, v58);
      swift_slowDealloc(v57, -1LL, -1LL);
      v59 = v82;
      swift_arrayDestroy(v82, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1LL, -1LL);
      swift_slowDealloc(v55, -1LL, -1LL);
    }

    else
    {
      uint64_t v65 = v86;

      swift_bridgeObjectRelease_n(v29, 2LL);
    }

    v66 = type metadata accessor for TaskPriority(0LL);
    uint64_t v67 = (uint64_t)v89;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56LL))(v89, 1LL, 1LL, v66);
    sub_10019A6C4(v88, (uint64_t)v93);
    uint64_t v68 = v87;
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v87, v46, v31);
    uint64_t v69 = *(unsigned __int8 *)(v30 + 80);
    uint64_t v70 = v31;
    uint64_t v71 = (v69 + 104) & ~v69;
    uint64_t v72 = (v13 + v71 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v73 = (void *)swift_allocObject(&unk_1005E2EB8, v72 + 8, v69 | 7);
    v73[2] = 0LL;
    v73[3] = 0LL;
    v73[4] = v83;
    sub_1001CE0D0(v93, (uint64_t)(v73 + 5));
    v73[10] = v85;
    v73[11] = v29;
    uint64_t v74 = (char *)v73 + v71;
    uint64_t v75 = v91;
    v73[12] = v91;
    v84(v74, v68, v70);
    *(void *)((char *)v73 + v72) = ObjectType;
    uint64_t v76 = v75;
    uint64_t v77 = sub_1001B37E8(v67, (uint64_t)&unk_100656A60, (uint64_t)v73);
    swift_release(v77);

    (*(void (**)(char *, uint64_t))(v30 + 8))(v46, v70);
  }

void sub_1000163FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10001641C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained triggerAppStoreSearch];
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained transfer]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 cancelAction]);
  [WeakRetained actionSelected:v2];
}

uint64_t SDUnlockSessionKeyExchangeResponseReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_43;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_45;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_43:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_45:
        uint64_t v30 = 20LL;
        goto LABEL_50;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 28) |= 1u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1LL || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_49;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_49:
        uint64_t v30 = 16LL;
LABEL_50:
        *(_DWORD *)(a1 + v30) = v14;
        continue;
      case 3u:
        uint64_t Data = PBReaderReadData(a2);
        uint64_t v23 = objc_claimAutoreleasedReturnValue(Data);
        uint64_t v24 = *(void **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose((const void *)(v36 - 144), 8) = v23;

        continue;
      case 4u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0LL;
        *(_BYTE *)(a1 + 28) |= 4u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      unint64_t v28 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v28 == -1LL || v28 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v29 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
      v27 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0) {
        goto LABEL_52;
      }
      v25 += 7;
      BOOL v9 = v26++ >= 9;
      if (v9)
      {
        uint64_t v27 = 0LL;
        goto LABEL_54;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_52:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v27 = 0LL;
    }
LABEL_54:
    *(_BYTE *)(a1 + 24) = v27 != 0;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

LABEL_18:
  return v8;
}

  if (!scanEligible)
  {
    self->_shouldScan = 1;
    scanTimer = self->_scanTimer;
    if (scanTimer)
    {
      char v16 = scanTimer;
      dispatch_source_cancel(v16);
      uint64_t v17 = self->_scanTimer;
      self->_scanTimer = 0LL;
    }

    scanSeconds = self->_scanSeconds;
    if ((int)scanSeconds >= 1)
    {
      if (dword_1006417A0 <= 30)
      {
        if (dword_1006417A0 == -1)
        {
          scanSeconds = self->_scanSeconds;
        }

        LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _ensureClientStarted]",  30LL,  "Start scan timer for %{dur}\n",  scanSeconds);
      }

    unint64_t v15 = 0;
    goto LABEL_19;
  }

  char v12 = SFHexStringForData(v6);
  unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v13]);
  if (dword_100642660 <= 50 && (dword_100642660 != -1 || _LogCategory_Initialize(&dword_100642660, 50LL))) {
    LogPrintF( &dword_100642660,  "-[SDAutoUnlockIconTransferStore imageCachedForHash:device:]",  50LL,  "Looking for transfer state for device %@ hash: %@ app: %@, store %@",  v7,  v13,  v14,  v9);
  }
  unint64_t v15 = v14 != 0LL;

LABEL_19:
  return v15;
}

  return v6;
}

    BOOL v9 = v62;
  }

  else
  {
    uint64_t v37 = handoff_log(v13, v14);
    unsigned int v19 = (id)objc_claimAutoreleasedReturnValue(v37);
    if (os_log_type_enabled((os_log_t)v19, OS_LOG_TYPE_ERROR)) {
      sub_1000C6168();
    }
  }

  if (v15)
  {
    uint64_t v40 = handoff_log(v38, v39);
    uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      v42 = (void *)objc_claimAutoreleasedReturnValue([v12 name]);
      uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v8 deviceIdentifier]);
      uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v8 requestIdentifier]);
      uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v44 UUIDString]);
      *(_DWORD *)buf = 138413058;
      uint64_t v75 = v42;
      uint64_t v76 = 2112;
      uint64_t v77 = v43;
      v78 = 2112;
      v79 = v45;
      v80 = 2048;
      v81 = a5;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "Requesting Encryption key via IDS from %@ %@ with message GUID: %@ and timeout: %f",  buf,  0x2Au);
    }

    v63 = v12;

    uint64_t v48 = handoff_log(v46, v47);
    uint64_t v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG)) {
      sub_1000C6108();
    }

    uint64_t v50 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([v8 requestIdentifier]);
    uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(-[SDActivityPayloadManager dataFromUUID:](v65, "dataFromUUID:", v51));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v50,  "setObject:forKeyedSubscript:",  v52,  IDSSendMessageOptionUUIDKey);

    -[NSMutableDictionary setObject:forKeyedSubscript:]( v50,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  IDSSendMessageOptionExpectsPeerResponseKey);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v50,  "setObject:forKeyedSubscript:",  &__kCFBooleanFalse,  IDSSendMessageOptionEnforceRemoteTimeoutsKey);
    uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a5));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v50,  "setObject:forKeyedSubscript:",  v53,  IDSSendMessageOptionTimeoutKey);

    -[NSMutableDictionary setObject:forKeyedSubscript:]( v50,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  IDSSendMessageOptionLocalDeliveryKey);
    v54 = [[IDSProtobuf alloc] initWithProtobufData:v9 type:4 isResponse:0];
    encryptionService = v65->_encryptionService;
    v66 = 0LL;
    uint64_t v67 = 0LL;
    id v56 = -[IDSService sendProtobuf:toDestinations:priority:options:identifier:error:]( encryptionService,  "sendProtobuf:toDestinations:priority:options:identifier:error:",  v54,  v15,  300LL,  v50,  &v67,  &v66);
    id v57 = v67;
    uint64_t v58 = v66;
    v59 = v9;
    uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue([v8 requestIdentifier]);
    -[SDActivityPayloadManager messageWithIdentifier:didSendWithSuccess:error:]( v65,  "messageWithIdentifier:didSendWithSuccess:error:",  v60,  v56,  v58);

    BOOL v9 = v59;
    char v12 = v63;
  }

  else
  {
    uint64_t v72 = NSLocalizedDescriptionKey;
    uint64_t v73 = @"Failed to find device to request encryption key from";
    uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v73,  &v72,  1LL));
    id v57 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSPOSIXErrorDomain,  65LL,  v61));

    uint64_t v50 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([v8 requestIdentifier]);
    -[SDActivityPayloadManager messageWithIdentifier:didSendWithSuccess:error:]( v65,  "messageWithIdentifier:didSendWithSuccess:error:",  v50,  0LL,  v57);
  }
}

    BOOL v9 = v60;
  }

  else
  {
    uint64_t v34 = handoff_log(v12, v13);
    char v18 = (id)objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled((os_log_t)v18, OS_LOG_TYPE_ERROR)) {
      sub_1000C6390();
    }
  }

  if (v14)
  {
    uint64_t v37 = handoff_log(v35, v36);
    BOOL v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v8 advertisementPayload]);
      uint64_t v40 = SFHexStringForData(v39);
      uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
      v42 = (void *)objc_claimAutoreleasedReturnValue([v8 requestIdentifier]);
      uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v42 UUIDString]);
      uint64_t v44 = [v8 timeoutTimeInterval];
      *(_DWORD *)buf = 138412802;
      uint64_t v71 = v41;
      uint64_t v72 = 2112;
      uint64_t v73 = v43;
      uint64_t v74 = 1024;
      uint64_t v75 = v44;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "Requesting Handoff payload via IDS for %@ with message GUID: %@ and timeout: %d",  buf,  0x1Cu);
    }

    uint64_t v47 = handoff_log(v45, v46);
    uint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG)) {
      sub_1000C6328();
    }

    uint64_t v49 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v8 requestIdentifier]);
    uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue(-[SDActivityPayloadManager dataFromUUID:](self, "dataFromUUID:", v50));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v49,  "setObject:forKeyedSubscript:",  v51,  IDSSendMessageOptionUUIDKey);

    -[NSMutableDictionary setObject:forKeyedSubscript:]( v49,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  IDSSendMessageOptionExpectsPeerResponseKey);
    uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a5));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v49,  "setObject:forKeyedSubscript:",  v52,  IDSSendMessageOptionTimeoutKey);

    -[NSMutableDictionary setObject:forKeyedSubscript:]( v49,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  IDSSendMessageOptionFireAndForgetKey);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v49,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  IDSSendMessageOptionActivityContinuationKey);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v49,  "setObject:forKeyedSubscript:",  &__kCFBooleanFalse,  IDSSendMessageOptionEnforceRemoteTimeoutsKey);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v49,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  IDSSendMessageOptionLocalDeliveryKey);
    uint64_t v53 = [[IDSProtobuf alloc] initWithProtobufData:v9 type:1 isResponse:0];
    kdebug_trace(722141184LL, 0LL, 0LL, 0LL, 0LL);
    v54 = self->_activityService;
    uint64_t v62 = 0LL;
    v63 = 0LL;
    v55 = -[IDSService sendProtobuf:toDestinations:priority:options:identifier:error:]( v54,  "sendProtobuf:toDestinations:priority:options:identifier:error:",  v53,  v14,  300LL,  v49,  &v63,  &v62);
    id v56 = v63;
    id v57 = v62;
    uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue([v8 requestIdentifier]);
    -[SDActivityPayloadManager messageWithIdentifier:didSendWithSuccess:error:]( self,  "messageWithIdentifier:didSendWithSuccess:error:",  v58,  v55,  v57);
  }

  else
  {
    uint64_t v68 = NSLocalizedDescriptionKey;
    uint64_t v69 = @"Failed to find device to request activity payload from";
    v59 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v69,  &v68,  1LL));
    id v56 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSPOSIXErrorDomain,  65LL,  v59));

    uint64_t v49 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([v8 requestIdentifier]);
    -[SDActivityPayloadManager messageWithIdentifier:didSendWithSuccess:error:]( self,  "messageWithIdentifier:didSendWithSuccess:error:",  v49,  0LL,  v56);
  }
}
}
}

  return v25;
}

    uint64_t v71 = v127;
    if (qword_100643EB8 != -1) {
      swift_once(&qword_100643EB8, sub_1001B3AC8);
    }
    uint64_t v72 = type metadata accessor for Logger(0LL);
    sub_100186DE4(v72, (uint64_t)qword_100645E00);
    uint64_t v73 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 16))(v71, v59, v39);
    uint64_t v74 = (os_log_s *)Logger.logObject.getter(v73);
    uint64_t v75 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v74, v75))
    {
      uint64_t v76 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v77 = swift_slowAlloc(32LL, -1LL);
      v136[0] = v77;
      *(_DWORD *)uint64_t v76 = 136315138;
      v78 = sub_100183F14( (unint64_t *)&qword_1006460B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      v79 = dispatch thunk of CustomStringConvertible.description.getter(v39, v78);
      v81 = v80;
      v135 = sub_10018CDB4(v79, v80, v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, v136, v76 + 4, v76 + 12);
      swift_bridgeObjectRelease(v81);
      v82 = *(void (**)(char *, uint64_t))(v38 + 8);
      v82(v71, v39);
      _os_log_impl( (void *)&_mh_execute_header,  v74,  v75,  "SDAirDropNearFieldService: Failed to release nearby sharing assertion %s because we don't have any active assertions for it.",  v76,  0xCu);
      swift_arrayDestroy(v77, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v77, -1LL, -1LL);
      swift_slowDealloc(v76, -1LL, -1LL);
    }

    else
    {

      v82 = *(void (**)(char *, uint64_t))(v38 + 8);
      v82(v71, v39);
    }

    v82(v124, v39);
LABEL_24:
    swift_bridgeObjectRelease(v137);
    return;
  }

  sub_100187100((uint64_t)v9, &qword_100645EE0);
  BOOL v38 = v130;
  uint64_t v37 = (uint64_t)v131;
  uint64_t v39 = v134;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v130 + 56))(v131, 1LL, 1LL, v134);
LABEL_4:
  sub_100187100(v37, &qword_10064DA60);
  uint64_t v44 = v133;
  if (qword_100643EB8 != -1) {
    swift_once(&qword_100643EB8, sub_1001B3AC8);
  }
  uint64_t v45 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v45, (uint64_t)qword_100645E00);
  uint64_t v46 = v129;
  uint64_t v47 = (*(uint64_t (**)(void (**)(uint64_t, uint64_t, uint64_t, char *), uint64_t, uint64_t))(v38 + 16))( v129,  v44,  v39);
  uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
  uint64_t v49 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v50 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v51 = v38;
    uint64_t v52 = swift_slowAlloc(32LL, -1LL);
    v136[0] = v52;
    *(_DWORD *)uint64_t v50 = 136315138;
    uint64_t v53 = sub_100183F14( (unint64_t *)&qword_1006460B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    v54 = dispatch thunk of CustomStringConvertible.description.getter(v39, v53);
    id v56 = v55;
    v137 = sub_10018CDB4(v54, v55, v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v50 + 4, v50 + 12);
    swift_bridgeObjectRelease(v56);
    (*(void (**)(void (**)(uint64_t, uint64_t, uint64_t, char *), uint64_t))(v51 + 8))(v46, v39);
    _os_log_impl( (void *)&_mh_execute_header,  v48,  v49,  "SDAirDropNearFieldService: Failed to release assertion:%s because there is no active nearby sharing interaction",  v50,  0xCu);
    swift_arrayDestroy(v52, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1LL, -1LL);
    swift_slowDealloc(v50, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(void (**)(uint64_t, uint64_t, uint64_t, char *), uint64_t))(v38 + 8))(v46, v39);
  }
}

    char v25 = (os_log_s *)Logger.logObject.getter(v22);
    unsigned int v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v27 = v15;
      unint64_t v28 = swift_slowAlloc(32LL, -1LL);
      char v36 = v28;
      *(_DWORD *)uint64_t v14 = 136315138;
      unint64_t v35 = sub_10018CDB4(0xD000000000000020LL, 0x8000000100506C70LL, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v14 + 4, v14 + 12);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "%s", v14, 0xCu);
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      char v29 = v28;
      unint64_t v15 = v27;
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    uint64_t v30 = sub_100187014();
    char v31 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v30, 0LL, 0LL);
    *(_DWORD *)char v32 = 10;
    *(void *)(v32 + _Block_object_dispose((const void *)(v36 - 144), 8) = 0xD000000000000020LL;
    *(void *)(v32 + 16) = 0x8000000100506C70LL;
    swift_willThrow(v31);

    return (uint64_t)v14;
  }

  [v5 setVersion:1];
  unint64_t v7 = v6;
  UUID.uuidString.getter(v7);
  BOOL v9 = v8;
  int v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v7, "setSessionID:", v10, swift_bridgeObjectRelease(v9).n128_f64[0]);

  uint64_t v11 = v7;
  if (a2 >> 60 == 15) {
    isa = 0LL;
  }
  else {
    isa = Data._bridgeToObjectiveC()().super.isa;
  }
  [v11 setLongTermKey:isa];

  if (!HIDWORD(*(void *)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type)))
  {
    objc_msgSend(v11, "setType:");
    goto LABEL_7;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
}

    unsigned int v19 = (v25 - 1) & v25;
    uint64_t v23 = __clz(__rbit64(v25)) + (v24 << 6);
    unint64_t v20 = v24;
  }

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
}

LABEL_19:
  swift_beginAccess(v8, &v51, 0LL, 0LL);
  BOOL v38 = *v8;
  if (!*v8)
  {
LABEL_23:
    v42 = sub_100187014();
    uint64_t v43 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v42, 0LL, 0LL);
    *(_DWORD *)uint64_t v44 = 10;
    *(void *)(v44 + _Block_object_dispose((const void *)(v36 - 144), 8) = 0xD00000000000001CLL;
    *(void *)(v44 + 16) = 0x8000000100508EC0LL;
    swift_willThrow(v43);
    goto LABEL_24;
  }

  swift_errorRetain(*v8);
  if ((sub_1002B6344(v38) & 1) == 0)
  {
    swift_errorRelease(v38);
    goto LABEL_23;
  }

  uint64_t v39 = sub_100187014();
  uint64_t v40 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v39, 0LL, 0LL);
  *(_DWORD *)uint64_t v41 = 39;
  *(void *)(v41 + _Block_object_dispose((const void *)(v36 - 144), 8) = 0xD000000000000027LL;
  *(void *)(v41 + 16) = 0x8000000100508EE0LL;
  swift_willThrow(v40);
  swift_errorRelease(v38);
LABEL_24:
  swift_release(v7);

  return v6;
}

    BOOL v9 = (v16 - 1) & v16;
    uint64_t v14 = __clz(__rbit64(v16)) + (v12 << 6);
LABEL_19:
    unsigned int v19 = *(_BYTE *)(*(void *)(a3 + 56) + v14);
    uint64_t result = a1(&v19);
    if (v3)
    {
      swift_release(a3);
      return v18 & 1;
    }

    if ((result & 1) != 0)
    {
      swift_release(a3);
      char v18 = 1;
      return v18 & 1;
    }
  }

  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

  *(void *)(v0 + 416) = v26;
  uint64_t v58 = *(void *)(v0 + 408);
  uint64_t v61 = *(void *)(v0 + 400);
  char v36 = v26;
  BOOL v38 = *(void *)(v0 + 384);
  uint64_t v37 = *(void *)(v0 + 392);
  uint64_t v60 = v37;
  uint64_t v39 = swift_allocObject(&unk_1005D8E68, 24LL, 7LL);
  *(void *)(v0 + 424) = v39;
  swift_weakInit(v39 + 16);
  uint64_t v40 = swift_allocObject(&unk_1005D8E68, 24LL, 7LL);
  *(void *)(v0 + 432) = v40;
  swift_weakInit(v40 + 16);
  uint64_t v41 = swift_allocObject(&unk_1005D8E68, 24LL, 7LL);
  swift_weakInit(v41 + 16);
  v42 = swift_allocObject(&unk_1005D8FD0, 32LL, 7LL);
  *(void *)(v0 + 440) = v42;
  *(void *)(v42 + 16) = v41;
  *(void *)(v42 + 24) = v37;
  uint64_t v43 = swift_allocObject(&unk_1005D8E68, 24LL, 7LL);
  *(void *)(v0 + 44_Block_object_dispose((const void *)(v36 - 144), 8) = v43;
  swift_weakInit(v43 + 16);
  swift_beginAccess(v62, v0 + 272, 0LL, 0LL);
  uint64_t v44 = *(const char **)(v0 + 352);
  objc_allocWithZone((Class)&OBJC_CLASS___SDAutoUnlockWiFiRequest);
  uint64_t v45 = v36;
  swift_retain(v39);
  swift_retain(v40);
  swift_retain(v42);
  swift_retain(v43);
  swift_bridgeObjectRetain(v44);
  uint64_t v47 = sub_1002C54EC( v46,  1,  v36,  (uint64_t)sub_1002C1914,  0LL,  sub_1002C5D7C,  v39,  sub_1002C5D84,  v40,  sub_1002C5DB0,  v42,  sub_1002C5DB8,  v43,  sub_1002C2548,  0LL);
  *(void *)(v0 + 456) = v47;
  Date.init()([v47 setRangingTimeout:5]);
  uint64_t v48 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56LL))(v58, 0LL, 1LL, v48);
  uint64_t v49 = v38 + OBJC_IVAR____TtC16DaemoniOSLibrary30SDAuthenticationRangingSession_metrics;
  swift_beginAccess( v38 + OBJC_IVAR____TtC16DaemoniOSLibrary30SDAuthenticationRangingSession_metrics,  v0 + 248,  33LL,  0LL);
  sub_1001C9860(v58, v49, &qword_1006457E8);
  swift_endAccess(v0 + 248);
  uint64_t v50 = *(void **)(v38 + OBJC_IVAR____TtC16DaemoniOSLibrary30SDAuthenticationRangingSession_wifiRequest);
  *(void *)(v38 + OBJC_IVAR____TtC16DaemoniOSLibrary30SDAuthenticationRangingSession_wifiRequest) = v47;
  uint64_t v51 = v47;

  uint64_t v52 = [(id)objc_opt_self(SDAutoUnlockWiFiManager) sharedManager];
  [v52 scheduleWiFiRequest:v51];

  uint64_t v53 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56LL))(v61, 1LL, 1LL, v53);
  v54 = (void *)swift_allocObject(&unk_1005D8FF8, 48LL, 7LL);
  v54[2] = 0LL;
  v54[3] = 0LL;
  v54[4] = v38;
  v54[5] = v60;
  swift_retain(v38);
  v55 = sub_1001B37E8(v61, (uint64_t)&unk_10064CE18, (uint64_t)v54);
  swift_release(v55);
  id v56 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 464) = v56;
  *id v56 = v0;
  v56[1] = sub_1002C1784;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 480,  0LL,  0LL,  0xD00000000000002ELL,  0x8000000100509470LL,  sub_1002C5E24,  *(void *)(v0 + 384),  &type metadata for Bool);
}

  *a2 = v12;
  a2[1] = (uint64_t)v13;
  a2[2] = v14;
  a2[3] = v15;
  a2[4] = (uint64_t)v16;
  a2[5] = (uint64_t)v17;
}

    uint64_t v27 = swift_once(&qword_100643F68, sub_100220C68);
    goto LABEL_9;
  }

  if (qword_1006441B0 != -1) {
    swift_once(&qword_1006441B0, sub_10032E7C0);
  }
  BOOL v38 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v38, (uint64_t)qword_10064F140);
  uint64_t v39 = v1;
  uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
  uint64_t v41 = static os_log_type_t.error.getter(v40);
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v43 = swift_slowAlloc(32LL, -1LL);
    v49[0] = v43;
    *(_DWORD *)v42 = 136315138;
    uint64_t v44 = sub_10034F010(*(void *)&v1[v20]);
    uint64_t v46 = (const char *)v45;
    uint64_t v50 = sub_10018CDB4(v44, v45, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v42 + 4, v42 + 12);

    swift_bridgeObjectRelease(v46);
    _os_log_impl( (void *)&_mh_execute_header,  v40,  v41,  "Authentication type %s does not support this method",  v42,  0xCu);
    swift_arrayDestroy(v43, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1LL, -1LL);
    swift_slowDealloc(v42, -1LL, -1LL);
  }

  else
  {
  }

    return;
  }

  uint64_t v37 = -[Class sessionID](a4, "sessionID");
  if (!v37)
  {
LABEL_6:
    if (qword_100644408 == -1)
    {
LABEL_7:
      uint64_t v45 = type metadata accessor for Logger(0LL);
      uint64_t v46 = sub_100186DE4(v45, (uint64_t)qword_100656748);
      uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
      uint64_t v48 = static os_log_type_t.error.getter(v47);
      if (!os_log_type_enabled(v47, v48))
      {

        return;
      }

      uint64_t v49 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Message does not have a session ID", v49, 2u);
      swift_slowDealloc(v49, -1LL, -1LL);

      goto LABEL_18;
    }

  if (v19[129] != -1) {
    swift_once(&qword_100644408, sub_100458568);
  }
  BOOL v38 = type metadata accessor for Logger(0LL);
  uint64_t v39 = sub_100186DE4(v38, (uint64_t)qword_100656748);
  uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
  uint64_t v41 = static os_log_type_t.default.getter(v40);
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Delaying callback", v42, 2u);
    swift_slowDealloc(v42, -1LL, -1LL);
  }

  uint64_t v43 = v103;
  uint64_t v44 = v104;
  (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v18, a6, v104);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v18, 0LL, 1LL, v44);
  uint64_t v45 = a4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_macUnlockPhoneSessionIDThatNeedsArmingUI;
  swift_beginAccess( a4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_macUnlockPhoneSessionIDThatNeedsArmingUI,  v112,  33LL,  0LL);
  sub_1001C9860((uint64_t)v18, v45, &qword_10064DA60);
  swift_endAccess(v112);
  uint64_t v46 = (const char **)(a4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_pairingKeySessions);
  *(void *)&uint64_t v47 = swift_beginAccess( a4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_pairingKeySessions,  v116,  0LL,  0LL).n128_u64[0];
  uint64_t v48 = *v46;
  swift_bridgeObjectRetain(v48, v47);
  uint64_t v50 = sub_1002DED0C(v49);
  swift_bridgeObjectRelease(v48);
  uint64_t v51 = (const char **)(a4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_pairingLockSessions);
  *(void *)&uint64_t v52 = swift_beginAccess( a4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_pairingLockSessions,  v115,  0LL,  0LL).n128_u64[0];
  uint64_t v53 = *v51;
  swift_bridgeObjectRetain(v53, v52);
  v55 = sub_1002DED30(v54);
  swift_bridgeObjectRelease(v53);
  v112[0] = (uint64_t)v50;
  sub_10028B674((uint64_t)v55);
  id v57 = (const char *)v112[0];
  uint64_t v58 = *(void *)(v112[0] + 16);
  if (v58)
  {
    v97 = v112[0];
    v59 = v112[0] + 32;
    *(void *)&id v56 = 136315138LL;
    v101 = v56;
    v100 = (char *)&type metadata for Any + 8;
    uint64_t v60 = v102;
    do
    {
      sub_10019A6C4(v59, (uint64_t)v112);
      v63 = v113;
      uint64_t v64 = v114;
      sub_10019A708(v112, v113);
      if ((*(uint64_t (**)(uint64_t))(*(void *)(v64 + 8) + 40LL))(v63) == 8)
      {
        uint64_t v65 = sub_10019A6C4((uint64_t)v112, (uint64_t)&v108);
        v66 = (os_log_s *)Logger.logObject.getter(v65);
        uint64_t v67 = static os_log_type_t.default.getter(v66);
        if (os_log_type_enabled(v66, v67))
        {
          uint64_t v68 = swift_slowAlloc(12LL, -1LL);
          v105 = swift_slowAlloc(32LL, -1LL);
          v107[0] = v105;
          *(_DWORD *)uint64_t v68 = v101;
          swift_beginAccess(&v108, v106, 0LL, 0LL);
          uint64_t v70 = v110;
          uint64_t v69 = v111;
          sub_10019A708(&v108, v110);
          (*(void (**)(uint64_t))(*(void *)(v69 + 8) + 32LL))(v70);
          uint64_t v71 = sub_100183F14( (unint64_t *)&qword_1006460B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v72 = v39;
          uint64_t v73 = v104;
          uint64_t v74 = dispatch thunk of CustomStringConvertible.description.getter(v104, v71);
          uint64_t v76 = v75;
          uint64_t v77 = v73;
          uint64_t v39 = v72;
          (*(void (**)(char *, uint64_t))(v103 + 8))(v60, v77);
          *(void *)(v68 + 4) = sub_10018CDB4(v74, (unint64_t)v76, v107);
          swift_bridgeObjectRelease(v76);
          _os_log_impl( (void *)&_mh_execute_header,  v66,  v67,  "Setting requestArmingUI to true for pairingSession %s",  (uint8_t *)v68,  0xCu);
          v78 = v105;
          swift_arrayDestroy(v105, 1LL, v100);
          swift_slowDealloc(v78, -1LL, -1LL);
          swift_slowDealloc(v68, -1LL, -1LL);
        }

        swift_beginAccess(&v108, v107, 33LL, 0LL);
        uint64_t v61 = v110;
        uint64_t v62 = v111;
        sub_1002499B4((uint64_t)&v108, v110);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 24))(1LL, v61, v62);
        swift_endAccess(v107);
        sub_10018709C(&v108);
      }

      sub_10018709C(v112);
      v59 += 40LL;
      --v58;
    }

    while (v58);
    id v57 = (const char *)v97;
  }

  swift_bridgeObjectRelease(v57, v97, v98);
  v79 = 0;
  unsigned int v19 = &qword_100644000;
LABEL_32:
  if (v19[129] != -1) {
    swift_once(&qword_100644408, sub_100458568);
  }
  v80 = type metadata accessor for Logger(0LL);
  v81 = sub_100186DE4(v80, (uint64_t)qword_100656748);
  v82 = (os_log_s *)Logger.logObject.getter(v81);
  v83 = static os_log_type_t.error.getter(v82);
  if (os_log_type_enabled(v82, v83))
  {
    v84 = swift_slowAlloc(12LL, -1LL);
    LODWORD(v105) = v79;
    v85 = (uint8_t *)v84;
    v86 = swift_slowAlloc(32LL, -1LL);
    v112[0] = v86;
    *(_DWORD *)v85 = 136315138;
    v87 = (id)SFAuthenticationErrorToString(11LL);
    v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
    v90 = v89;

    v108 = sub_10018CDB4(v88, (unint64_t)v90, v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, v109, v85 + 4, v85 + 12);
    swift_bridgeObjectRelease(v90);
    _os_log_impl( (void *)&_mh_execute_header,  v82,  v83,  "Error occurred during or after lock was supposed to consume auth token, reregistering to sync secrets and reportin g error to client as %s",  v85,  0xCu);
    swift_arrayDestroy(v86, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v86, -1LL, -1LL);
    v91 = v85;
    v79 = v105;
    swift_slowDealloc(v91, -1LL, -1LL);
  }

  v92 = sub_100487C98(11LL, 0LL, 0xE000000000000000LL);
  v93 = v92;
  if (v79)
  {
    v99(v92);
  }

  else
  {
    v94 = (os_log_s *)Logger.logObject.getter(v92);
    v95 = static os_log_type_t.default.getter(v94);
    if (os_log_type_enabled(v94, (os_log_type_t)v95))
    {
      v96 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v96 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v94,  (os_log_type_t)v95,  "Not calling back to delegate until after manual arm requested",  v96,  2u);
      swift_slowDealloc(v96, -1LL, -1LL);
    }
  }
}

id sub_1000178BC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

id sub_100017AB4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) logAutoUnlockEnd];
}

void sub_100018240(_Unwind_Exception *a1)
{
}

id sub_100018258(uint64_t a1)
{
  return [*(id *)(a1 + 32) beginAKSSession];
}

void sub_1000185F0(_Unwind_Exception *a1)
{
}

void sub_10001861C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(dispatch_queue_s **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1000186C0;
  v6[3] = &unk_1005CB320;
  objc_copyWeak(&v8, (id *)(a1 + 40));
  id v7 = v3;
  id v5 = v3;
  dispatch_async(v4, v6);

  objc_destroyWeak(&v8);
}

void sub_1000186C0(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Starting wifi request", v5, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "nq_handleWiFiRequestStartedWithStartAWDLHandler:", *(void *)(a1 + 32));
}

void sub_100018740(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(dispatch_queue_s **)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000187D0;
  block[3] = &unk_1005CB370;
  v6[1] = a3;
  objc_copyWeak(v6, (id *)(a1 + 48));
  block[4] = *(void *)(a1 + 40);
  dispatch_async(v4, block);
  objc_destroyWeak(v6);
}

void sub_1000187D0(uint64_t a1)
{
  if (*(void *)(a1 + 48))
  {
    uint64_t v2 = auto_unlock_log(a1);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_10001C454(a1, v3);
    }

    uint64_t v4 = (id *)(a1 + 40);
    id WeakRetained = objc_loadWeakRetained(v4);
    [WeakRetained invalidateResponseTimer];

    id v6 = objc_loadWeakRetained(v4);
    uint64_t v7 = SFAutoUnlockErrorDomain;
    NSErrorUserInfoKey v11 = NSLocalizedDescriptionKey;
    char v12 = @"Starting AWDL failed";
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v12,  &v11,  1LL));
    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v7,  114LL,  v8));
    [v6 notifyDelegateWithError:v9];
  }

  else
  {
    id v10 = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(v10, "nq_awdlNetworkStarted");
  }

void sub_100018940(uint64_t a1)
{
  uint64_t v1 = *(dispatch_queue_s **)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000189B8;
  block[3] = &unk_1005CB220;
  objc_copyWeak(&v3, (id *)(a1 + 40));
  dispatch_async(v1, block);
  objc_destroyWeak(&v3);
}

void sub_1000189B8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "nq_handleWiFiRequestInvalidated");
}

void sub_100019224(_Unwind_Exception *a1)
{
}

void sub_100019A58(_Unwind_Exception *a1)
{
}

void sub_10001AAA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = auto_unlock_log(v3);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v14 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Error sending SDAutoUnlockAWDLInfo (error: %@)",  buf,  0xCu);
    }

    [*(id *)(a1 + 32) invalidateResponseTimer];
    uint64_t v7 = *(void **)(a1 + 32);
    uint64_t v8 = SFAutoUnlockErrorDomain;
    NSErrorUserInfoKey v11 = NSLocalizedDescriptionKey;
    char v12 = @"AWDL info exchange failed";
    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v12,  &v11,  1LL));
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v8,  103LL,  v9));
    [v7 notifyDelegateWithError:v10];
  }
}

void sub_10001AD54(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = auto_unlock_log(v3);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_10001C9AC();
  }

  [*(id *)(a1 + 32) invalidateResponseTimer];
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = SFAutoUnlockErrorDomain;
  NSErrorUserInfoKey v10 = NSLocalizedDescriptionKey;
  NSErrorUserInfoKey v11 = @"Exchange request failed";
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v11,  &v10,  1LL));
  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v7,  201LL,  v8));
  [v6 notifyDelegateWithError:v9];
}

void sub_10001AFF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = auto_unlock_log(v3);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_10001CA0C();
  }

  [*(id *)(a1 + 32) invalidateResponseTimer];
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = SFAutoUnlockErrorDomain;
  NSErrorUserInfoKey v10 = NSLocalizedDescriptionKey;
  NSErrorUserInfoKey v11 = @"Exchange request failed";
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v11,  &v10,  1LL));
  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v7,  103LL,  v8));
  [v6 notifyDelegateWithError:v9];
}

void sub_10001B2D8(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) sessionCompleted];
  if ((v4 & 1) != 0)
  {
    uint64_t v5 = auto_unlock_log(v4);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "AuthToken ack after session completed",  buf,  2u);
    }
  }

  else
  {
    if (a2)
    {
      [*(id *)(a1 + 32) invalidateResponseTimer];
      uint64_t v7 = *(void **)(a1 + 32);
      uint64_t v8 = SFAutoUnlockErrorDomain;
      NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
      unint64_t v15 = @"Exchange request failed";
      BOOL v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
      NSErrorUserInfoKey v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v8,  103LL,  v9));
      [v7 notifyDelegateWithError:v10];

      return;
    }

    if (*(void *)(a1 + 40))
    {
      id v12 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) exchangeResponse]);
      if ([v12 version] < 2
        || ![*(id *)(a1 + 32) userRequestRequired])
      {
        uint64_t v11 = *(void *)(a1 + 48);

        if (v11) {
          return;
        }
        id v12 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) wifiRequestStartedHandler]);
        (*((void (**)(id, uint64_t))v12 + 2))(v12, 1LL);
      }
    }
  }

void sub_10001B5F0(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 setShouldAlertOnNotify:0];
  [*(id *)(a1 + 32) alertOfUnlock];
  [*(id *)(a1 + 32) invalidateResponseTimer];
  [*(id *)(a1 + 32) notifyDelegateWithError:v4];
}

id sub_10001BA88(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Assertion timer fired", v5, 2u);
  }

  [*(id *)(a1 + 32) setAssertionTimer:0];
  return [*(id *)(a1 + 32) releaseIdleSleepAssertion];
}

void sub_10001C444( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10001C454(uint64_t a1, os_log_s *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) wifiRequest]);
  int v4 = 136315650;
  uint64_t v5 = "-[SDAutoUnlockKeySession createWiFiRequest]_block_invoke_2";
  __int16 v6 = 2112;
  uint64_t v7 = @"Starting AWDL failed";
  __int16 v8 = 2112;
  BOOL v9 = v3;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "%s error %@ request:%@",  (uint8_t *)&v4,  0x20u);
}

void sub_10001C510()
{
}

void sub_10001C53C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10001C5AC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10001C614()
{
}

void sub_10001C640(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412546;
  uint64_t v3 = @"Auth prompt request missing info";
  __int16 v4 = 2112;
  uint64_t v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%@ (request: %@)", (uint8_t *)&v2, 0x16u);
  sub_10001480C();
}

void sub_10001C6C4()
{
}

void sub_10001C6F0()
{
}

void sub_10001C750()
{
}

void sub_10001C7B0()
{
}

void sub_10001C810()
{
}

void sub_10001C870()
{
}

void sub_10001C89C()
{
}

void sub_10001C8FC()
{
}

void sub_10001C928()
{
}

void sub_10001C954()
{
}

void sub_10001C980()
{
}

void sub_10001C9AC()
{
}

void sub_10001CA0C()
{
}

void sub_10001CA6C(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "IOPMAssertionDeclareSystemActivity for key session returned %x",  (uint8_t *)v2,  8u);
  sub_1000147C8();
}

uint64_t SDAuthenticationResponseReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 44) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_39;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_41;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_39:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_41:
        uint64_t v28 = 40LL;
        goto LABEL_46;
      case 2u:
        uint64_t String = PBReaderReadString(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(String);
        uint64_t v20 = 32LL;
        goto LABEL_37;
      case 3u:
        uint64_t Data = PBReaderReadData(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(Data);
        uint64_t v20 = 16LL;
        goto LABEL_37;
      case 4u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 44) |= 1u;
        break;
      case 5u:
        uint64_t v26 = PBReaderReadData(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(v26);
        uint64_t v20 = 8LL;
LABEL_37:
        uint64_t v27 = *(void **)(a1 + v20);
        *(void *)(a1 + v20) = v19;

        continue;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v24 == -1LL || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v25 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
      v14 |= (unint64_t)(v25 & 0x7F) << v22;
      if ((v25 & 0x80) == 0) {
        goto LABEL_43;
      }
      v22 += 7;
      BOOL v9 = v23++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_45;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_43:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v14) = 0;
    }
LABEL_45:
    uint64_t v28 = 24LL;
LABEL_46:
    *(_DWORD *)(a1 + v2_Block_object_dispose((const void *)(v36 - 144), 8) = v14;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10001D8F4(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___SDUnlockIDSController);
  uint64_t v2 = (void *)qword_100656CE0;
  qword_100656CE0 = (uint64_t)v1;
}

LABEL_12:
  BOOL v9 = paired_unlock_log(v7, v8);
  int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = @"NO";
    if ((_DWORD)v3) {
      uint64_t v11 = @"YES";
    }
    *(_DWORD *)buf = 138412290;
    char v18 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Default paired device nearby = %@", buf, 0xCu);
  }

  return (char)v3;
}

  return v6;
}
  }

  else
  {
    BOOL v9 = 0LL;
  }

  return v9;
}

    unsigned int v13 = sub_100036584(-2, 0LL);
    uint64_t v14 = objc_claimAutoreleasedReturnValue(v13);
    goto LABEL_28;
  }

  unint64_t v24 = NSPOSIXErrorDomain;
  char v25 = 32LL;
LABEL_27:
  uint64_t v14 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v24,  v25,  0LL));
LABEL_28:
  uint64_t v30 = (void *)v14;
  if (!v14) {
    goto LABEL_47;
  }
LABEL_29:
  -[SDAirDropClient notifyClientForEvent:withProperty:](self, "notifyClientForEvent:withProperty:", 10LL, v30, v41);
  v10[2](v10, 0LL);

LABEL_48:
}
}

    char v8 = 0;
  }
}

    unint64_t v15 = 1;
    goto LABEL_13;
  }

  uint64_t v11 = SecItemUpdate(v7, v8);
  if (!(_DWORD)v11)
  {
    uint64_t v19 = auto_unlock_log(v11);
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      uint64_t v17 = "Updated keychain item";
      char v18 = buf;
      goto LABEL_11;
    }

    goto LABEL_12;
  }

  SecItemDelete(v7);
  char v12 = SecItemAdd(v9, 0LL);
  if (!(_DWORD)v12)
  {
    unint64_t v15 = 1;
    goto LABEL_14;
  }

  unsigned int v13 = auto_unlock_log(v12);
  uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
    sub_1000BB3C8();
  }
  unint64_t v15 = 0;
LABEL_13:

LABEL_14:
  return v15;
}

  if (v7)
  {
    if (v10)
    {
      v7[2](v7, v10);
      goto LABEL_18;
    }

    char v8 = 0LL;
    goto LABEL_16;
  }

  if (v8)
  {
    if ((_DWORD)v9)
    {
      int v10 = (int)v9;
      uint64_t v27 = NSLocalizedDescriptionKey;
      uint64_t v11 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  DebugGetErrorString(v9, 0LL, 0LL));
      char v12 = objc_claimAutoreleasedReturnValue(v11);
      unsigned int v13 = (void *)v12;
      uint64_t v14 = @"?";
      if (v12) {
        uint64_t v14 = (const __CFString *)v12;
      }
      uint64_t v28 = v14;
      unint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v28,  &v27,  1LL));
      char v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v10,  v15));
      v8[2](v8, v16);
    }

    else
    {
      v8[2](v8, 0LL);
    }
  }
}

  uint64_t v39 = v21;
  [v17 invalidate];
  -[NSMutableArray removeObject:](self->_findPersonRequests, "removeObject:", v17);

  if ((_DWORD)v19)
  {
    v42 = v15;
    BOOL v38 = v13;
    uint64_t v28 = v22;
    char v29 = (int)v19;
    uint64_t v44 = NSLocalizedDescriptionKey;
    uint64_t v30 = v14;
    char v31 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  DebugGetErrorString(v19, 0LL, 0LL));
    char v32 = objc_claimAutoreleasedReturnValue(v31);
    unsigned int v33 = (void *)v32;
    uint64_t v34 = @"?";
    if (v32) {
      uint64_t v34 = (const __CFString *)v32;
    }
    uint64_t v45 = v34;
    unint64_t v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v45,  &v44,  1LL));
    char v36 = v29;
    char v22 = v28;
    uint64_t v37 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v36,  v35));

    uint64_t v14 = v30;
    uint64_t v20 = (id)v37;
    unsigned int v13 = v38;
    unint64_t v15 = v42;
  }

  if (v20
    && dword_1006435F8 <= 90
    && (dword_1006435F8 != -1 || _LogCategory_Initialize(&dword_1006435F8, 90LL)))
  {
    LogPrintF( &dword_1006435F8,  "-[SDAppleIDAgent _handleFindPersonResponse:forRequest:emailOrPhone:withError:queue:completion:]",  90LL,  "### Find Person request failed with error %@\n",  v20);
  }

  if (v40) {
    ((void (**)(void, id, id))v40)[2](v40, v16, v20);
  }
}

        -[SDCompanionStream stop](self, "stop");
      }

      break;
  }
}

    *(_BYTE *)(v2 + 840) = v1;
    return [(id)v4[4] _update];
  }

  return result;
}

    *(_BYTE *)(v2 + 841) = v1;
    return [(id)v4[4] _update];
  }

  return result;
}

    -[SDNearbyAgent _activityMonitorEnsureStarted](self, "_activityMonitorEnsureStarted");
    unsigned int v5 = 1;
    goto LABEL_13;
  }

  return v12;
}

  if (!v2->_idsIsSignedInCache)
  {
    char v8 = (void *)objc_claimAutoreleasedReturnValue(-[SDNearbyAgent _idsDeviceArrayLocked](v2, "_idsDeviceArrayLocked"));
    if ([v8 count])
    {
    }

    else
    {
      BOOL v9 = (void *)objc_claimAutoreleasedReturnValue(-[IDSService devices](v2->_idsService, "devices"));
      int v10 = [v9 count] == 0;

      if (v10) {
        goto LABEL_13;
      }
    }

    v2->_idsIsSignedInCache = 1;
    if (dword_100643B70 > 90) {
      goto LABEL_27;
    }
    if (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 90LL)) {
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent idsIsSignedIn]",  90LL,  "### No active IDS accounts, but has devices\n");
    }
  }

  if ((v2 & 4) != 0)
  {
    unint64_t v6 = *((void *)v1 + 4);
    if (((*((_DWORD *)v1 + 10) >> 2) & 1) != *(_BYTE *)(v6 + 761))
    {
      *(_BYTE *)(v6 + 761) = (*((_DWORD *)v1 + 10) & 4) != 0;
      char v4 = 1;
    }
  }

  if ((v2 & 8) != 0)
  {
    unint64_t v7 = *((void *)v1 + 4);
    if (((*((_DWORD *)v1 + 10) >> 3) & 1) != *(_BYTE *)(v7 + 765))
    {
      *(_BYTE *)(v7 + 765) = (*((_DWORD *)v1 + 10) & 8) != 0;
      char v4 = 1;
    }
  }

  if ((v2 & 0x10) != 0)
  {
    char v8 = *((void *)v1 + 4);
    if (((*((_DWORD *)v1 + 10) >> 4) & 1) != *(_BYTE *)(v8 + 760))
    {
      *(_BYTE *)(v8 + 760) = (*((_DWORD *)v1 + 10) & 0x10) != 0;
      char v4 = 1;
    }
  }

  if ((v2 & 0x20) != 0)
  {
    BOOL v9 = *((void *)v1 + 4);
    if (((*((_DWORD *)v1 + 10) >> 5) & 1) != *(_BYTE *)(v9 + 763))
    {
      *(_BYTE *)(v9 + 763) = (*((_DWORD *)v1 + 10) & 0x20) != 0;
      return [*((id *)v1 + 4) _update];
    }
  }

  if (v4) {
    return [*((id *)v1 + 4) _update];
  }
  return result;
}

  v59 = [(id)objc_opt_self(SDStatusMonitor) sharedMonitor];
  if (v59)
  {
    uint64_t v60 = v59;
    uint64_t v61 = [v59 deviceKeyBagLocked];

    uint64_t v62 = v91;
    sub_1001A4B84(v34, v91, type metadata accessor for SDNearFieldTap);
    uint64_t v64 = (uint64_t)v92;
    v63 = v93;
    if (v61)
    {
      uint64_t v65 = *(unsigned __int8 *)(v62 + v17[12]);
      v66 = v87;
      sub_1001A4B40(v62, v87, type metadata accessor for SDNearFieldTap);
      if (v65 == 1)
      {
        sub_1001A4BC8(v66, type metadata accessor for SDNearFieldTap);
LABEL_22:
        v78 = type metadata accessor for UUID(0LL);
        v79 = *(void *)(v78 - 8);
        v80 = (uint64_t)v94;
        (*(void (**)(char *, uint64_t, uint64_t))(v79 + 16))(v94, v85, v78);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v79 + 56))(v80, 0LL, 1LL, v78);
        sub_1001B455C(v80);
        sub_100187100(v80, &qword_10064DA60);
        return;
      }

      uint64_t v77 = *(void *)(v66 + v17[6] + 8);
      sub_1001A4BC8(v66, type metadata accessor for SDNearFieldTap);
      if (v77) {
        goto LABEL_22;
      }
    }

    else
    {
      sub_1001A4BC8(v62, type metadata accessor for SDNearFieldTap);
    }

    uint64_t v67 = &v95[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction];
    swift_beginAccess( &v95[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction],  v98,  0LL,  0LL);
    sub_1001915A4((uint64_t)v67, v64, &qword_100645EE0);
    uint64_t v68 = v89;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v64, 1LL, v89) == 1)
    {
      sub_100187100(v64, &qword_100645EE0);
    }

    else
    {
      uint64_t v69 = v81;
      (*(void (**)(char *, uint64_t, uint64_t))(v63 + 32))(v81, v64, v68);
      uint64_t v70 = v69;
      uint64_t v71 = v63;
      uint64_t v72 = (uint64_t)v83;
      (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v83, v70, v68);
      v84 = a1;
      uint64_t v73 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56);
      v73(v72, 0LL, 1LL, v68);
      KeyPath = swift_getKeyPath(&unk_1004CDC48);
      uint64_t v75 = swift_getKeyPath(&unk_1004CDC70);
      uint64_t v76 = v82;
      sub_1001915A4(v72, v82, &qword_100645EE0);
      static Published.subscript.setter(v76, v95, KeyPath, v75);
      sub_100187100(v72, &qword_100645EE0);
      (*(void (**)(char *, uint64_t))(v71 + 8))(v70, v68);
      v73(v72, 1LL, 1LL, v68);
      a1 = v84;
      swift_beginAccess(v67, &v96, 33LL, 0LL);
      sub_1001C9860(v72, (uint64_t)v67, &qword_100645EE0);
      swift_endAccess(&v96);
    }

    sub_1001B52F0(v34, v90, a1);
  }

  else
  {
    __break(1u);
  }

      swift_bridgeObjectRelease(v29);
    }
  }

  if (v10)
  {
    uint64_t v17 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    char v18 = v17 | (v8 << 6);
LABEL_35:
    char v22 = *(id *)(*(void *)(v2 + 48) + 8 * v18);
    if (!v22) {
      goto LABEL_52;
    }
    goto LABEL_36;
  }

  unsigned int v23 = v8 + 1;
  if (!__OFADD__(v8, 1LL))
  {
    if (v23 >= v48) {
      goto LABEL_52;
    }
    unint64_t v24 = *(void *)(v49 + 8 * v23);
    ++v8;
    if (!v24)
    {
      char v8 = v16 + 2;
      if (v16 + 2 >= v48) {
        goto LABEL_52;
      }
      unint64_t v24 = *(void *)(v49 + 8 * v8);
      if (!v24)
      {
        char v8 = v16 + 3;
        if (v16 + 3 >= v48) {
          goto LABEL_52;
        }
        unint64_t v24 = *(void *)(v49 + 8 * v8);
        if (!v24)
        {
          char v8 = v16 + 4;
          if (v16 + 4 >= v48) {
            goto LABEL_52;
          }
          unint64_t v24 = *(void *)(v49 + 8 * v8);
          if (!v24)
          {
            char v8 = v16 + 5;
            if (v16 + 5 >= v48) {
              goto LABEL_52;
            }
            unint64_t v24 = *(void *)(v49 + 8 * v8);
            if (!v24)
            {
              char v25 = v16 + 6;
              while (v48 != v25)
              {
                unint64_t v24 = *(void *)(v49 + 8 * v25++);
                if (v24)
                {
                  char v8 = v25 - 1;
                  goto LABEL_34;
                }
              }

              goto LABEL_52;
            }
          }
        }
      }
    }

  *(void *)(v0 + v11) = 0LL;
LABEL_13:
  uint64_t v14 = *(void (**)(uint64_t))(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary19SDTempPairingClient_objectChanged);
  if (v14)
  {
    unint64_t v15 = *(void *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary19SDTempPairingClient_objectChanged + 8);
    char v16 = swift_retain(v15);
    v14(v16);
    sub_100224FF8((uint64_t)v14, v15);
  }

          __break(1u);
          JUMPOUT(0x1002DDC00LL);
        }

  uint64_t v37 = *(void *)(v1 + 136);
  BOOL v38 = *(void *)(v1 + 112);
  uint64_t v39 = *(void *)(v1 + 88);
  uint64_t v40 = *(void *)(v1 + 64);
  swift_task_dealloc(*(void *)(v1 + 144));
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  return (*(uint64_t (**)(BOOL))(v1 + 8))(v36);
}

    __break(1u);
  }

  swift_unknownObjectRelease(v12);
  v50[0] = (const char *)_swiftEmptyArrayStorage;
  sub_10038E958();
  return sub_1003A0B70(v50[0]);
}

  unsigned int v23 = v30;
  unint64_t v24 = *v29;
  *(void *)(*v29 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))( *(void *)(v24 + 48) + *(void *)(v7 + 72) * a2,  v23,  v6);
  uint64_t v26 = *(void *)(v24 + 16);
  uint64_t v27 = __OFADD__(v26, 1LL);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

  unsigned int v23 = v30;
  unint64_t v24 = *v29;
  *(void *)(*v29 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))( *(void *)(v24 + 48) + *(void *)(v7 + 72) * a2,  v23,  v6);
  uint64_t v26 = *(void *)(v24 + 16);
  uint64_t v27 = __OFADD__(v26, 1LL);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

  char v22 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t result = sub_1001A4B40( a1,  *(void *)(v22 + 48) + *(void *)(v29 + 72) * a2,  type metadata accessor for SDAirDropDiscoveredEndpoint);
  unint64_t v24 = *(void *)(v22 + 16);
  char v25 = __OFADD__(v24, 1LL);
  uint64_t v26 = v24 + 1;
  if (!v25)
  {
    *(void *)(v22 + 16) = v26;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v28);
  __break(1u);
  return result;
}

  unsigned int v23 = v30;
  unint64_t v24 = *v29;
  *(void *)(*v29 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))( *(void *)(v24 + 48) + *(void *)(v7 + 72) * a2,  v23,  v6);
  uint64_t v26 = *(void *)(v24 + 16);
  uint64_t v27 = __OFADD__(v26, 1LL);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

  unsigned int v23 = v30;
  unint64_t v24 = *v29;
  *(void *)(*v29 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))( *(void *)(v24 + 48) + *(void *)(v7 + 72) * a2,  v23,  v6);
  uint64_t v26 = *(void *)(v24 + 16);
  uint64_t v27 = __OFADD__(v26, 1LL);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

  uint64_t v27 = *v33;
  *(void *)(*v33 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t result = sub_1001A4B40(a1, *(void *)(v27 + 48) + *(void *)(v34 + 72) * a2, a4);
  char v29 = *(void *)(v27 + 16);
  uint64_t v30 = __OFADD__(v29, 1LL);
  char v31 = v29 + 1;
  if (!v30)
  {
    *(void *)(v27 + 16) = v31;
    return result;
  }

  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v32);
  __break(1u);
  return result;
}

    Strong = swift_unknownObjectWeakLoadStrong( *(void *)(v2 + 136) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_delegate,  v18);
    if (Strong)
    {
      unsigned int v23 = (void *)Strong;
      unint64_t v24 = *(void *)(v2 + 216);
      if (v24 <= 9 && ((1LL << v24) & 0x228) != 0)
      {
        if (qword_100644408 != -1) {
          swift_once(&qword_100644408, sub_100458568);
        }
        char v25 = type metadata accessor for Logger(0LL);
        uint64_t v26 = sub_100186DE4(v25, (uint64_t)qword_100656748);
        uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
        uint64_t v28 = static os_log_type_t.default.getter(v27);
        if (os_log_type_enabled(v27, v28))
        {
          char v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)char v29 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  v28,  "Calling back to delegate didEnableAuthenticationFor",  v29,  2u);
          swift_slowDealloc(v29, -1LL, -1LL);
        }

        uint64_t v30 = *(void *)(v2 + 136);

        isa = (os_log_s *)UUID._bridgeToObjectiveC()().super.isa;
        [v23 manager:v30 didEnableAuthenticationFor:isa];
      }

      else
      {
        if (qword_100644408 != -1) {
          swift_once(&qword_100644408, sub_100458568);
        }
        BOOL v38 = type metadata accessor for Logger(0LL);
        uint64_t v39 = sub_100186DE4(v38, (uint64_t)qword_100656748);
        uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
        uint64_t v41 = static os_log_type_t.default.getter(v40);
        if (os_log_type_enabled(v40, v41))
        {
          v42 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)v42 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v40,  v41,  "Calling back to delegate didCompleteAuthenticationFor",  v42,  2u);
          swift_slowDealloc(v42, -1LL, -1LL);
        }

        uint64_t v43 = *(void *)(v2 + 136);

        isa = (os_log_s *)UUID._bridgeToObjectiveC()().super.isa;
        [v23 manager:v43 didCompleteAuthenticationFor:isa];
      }

      swift_unknownObjectRelease(v23);
      goto LABEL_33;
    }

    char v21 = 1;
LABEL_21:
    if (qword_100644408 != -1) {
      swift_once(&qword_100644408, sub_100458568);
    }
    char v31 = *(void **)(v2 + 136);
    char v32 = type metadata accessor for Logger(0LL);
    sub_100186DE4(v32, (uint64_t)qword_100656748);
    isa = (os_log_s *)Logger.logObject.getter(v31);
    unsigned int v33 = static os_log_type_t.default.getter(isa);
    uint64_t v34 = os_log_type_enabled(isa, v33);
    unint64_t v35 = *(char **)(v2 + 136);
    if (!v34)
    {

      isa = *(os_log_s **)(v2 + 136);
      goto LABEL_33;
    }

    char v8 = swift_slowAlloc(14LL, -1LL);
    *(_DWORD *)char v8 = 67109376;
    *(_DWORD *)(v2 + 232) = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 232, v2 + 236, v8 + 4, v8 + 8);
    *(_WORD *)(v8 + _Block_object_dispose((const void *)(v36 - 144), 8) = 1024;
    uint64_t v37 = swift_unknownObjectWeakLoadStrong( &v35[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_delegate],  v36);
    swift_unknownObjectRelease(v37);

    *(_DWORD *)(v2 + 236) = v37 == 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 236, v2 + 240, v8 + 10, v8 + 14);

    BOOL v9 = "Not calling back to delegate (isInitiator: %{BOOL}d, delegate is nil: %{BOOL}d)";
    int v10 = isa;
    uint64_t v11 = v33;
    char v12 = (uint8_t *)v8;
    unsigned int v13 = 14;
    goto LABEL_25;
  }

  if (qword_100644408 != -1) {
    swift_once(&qword_100644408, sub_100458568);
  }
  char v4 = type metadata accessor for Logger(0LL);
  unsigned int v5 = sub_100186DE4(v4, (uint64_t)qword_100656748);
  isa = (os_log_s *)Logger.logObject.getter(v5);
  unint64_t v7 = static os_log_type_t.default.getter(isa);
  if (os_log_type_enabled(isa, v7))
  {
    char v8 = swift_slowAlloc(2LL, -1LL);
    *(_WORD *)char v8 = 0;
    BOOL v9 = "Registration type does not have a delegate to call back";
    int v10 = isa;
    uint64_t v11 = v7;
    char v12 = (uint8_t *)v8;
    unsigned int v13 = 2;
LABEL_25:
    _os_log_impl((void *)&_mh_execute_header, v10, v11, v9, v12, v13);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

void sub_10001DE10(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    [v2 setObject:v4 forKeyedSubscript:IDSSendMessageOptionTimeoutKey];
  }

  else
  {
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", IDSMaxMessageTimeout));
    [v3 setObject:v5 forKeyedSubscript:IDSSendMessageOptionTimeoutKey];
  }

  [v3 setObject:&__kCFBooleanFalse forKeyedSubscript:IDSSendMessageOptionEnforceRemoteTimeoutsKey];
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    [v3 setObject:v6 forKeyedSubscript:IDSSendMessageOptionQueueOneIdentifierKey];
  }
  uint64_t v7 = *(void *)(a1 + 72);
  char v8 = &IDSSendMessageOptionLocalDeliveryKey;
  if (v7 != 1)
  {
    if (v7) {
      goto LABEL_10;
    }
    [v3 setObject:&__kCFBooleanTrue forKeyedSubscript:IDSSendMessageOptionLocalDeliveryKey];
    char v8 = &IDSSendMessageOptionRequireBluetoothKey;
  }

  [v3 setObject:&__kCFBooleanTrue forKeyedSubscript:*v8];
LABEL_10:
  id v9 = [[IDSProtobuf alloc] initWithProtobufData:*(void *)(a1 + 48) type:*(unsigned __int16 *)(a1 + 88) isResponse:0];
  uint64_t v10 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) idsService]);
  char v12 = (void *)v10;
  if (*(void *)(a1 + 80) == 2LL)
  {
    uint64_t v13 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) idsServiceClassA]);

    char v12 = (void *)v13;
  }

  uint64_t v14 = paired_unlock_log(v10, v11);
  unint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = *(unsigned __int16 *)(a1 + 88);
    id v17 = [*(id *)(a1 + 48) length];
    char v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) dataClassStringForDataClass:*(void *)(a1 + 80)]);
    uint64_t v19 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)uint64_t v40 = v16;
    *(_WORD *)&v40[4] = 2048;
    *(void *)&v40[6] = v17;
    __int16 v41 = 2112;
    v42 = v18;
    __int16 v43 = 2112;
    uint64_t v44 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Sending protobuf (type = %d, size = %lu, data class = %@, data = %@)",  buf,  0x26u);
  }

  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", IDSDefaultPairedDevice));
  id v37 = 0LL;
  id v38 = 0LL;
  [v12 sendProtobuf:v9 toDestinations:v20 priority:300 options:v3 identifier:&v38 error:&v37];
  id v21 = v38;
  id v22 = v37;

  uint64_t v25 = paired_unlock_log(v23, v24);
  uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
  uint64_t v27 = v26;
  if (v22)
  {
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      sub_10001F334((uint64_t)v22, v27, v28, v29, v30, v31, v32, v33);
    }

    uint64_t v34 = *(void *)(a1 + 64);
    if (v34) {
      (*(void (**)(uint64_t, id))(v34 + 16))(v34, v22);
    }
  }

  else
  {
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)uint64_t v40 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Sent message with identifier = %@",  buf,  0xCu);
    }

    unint64_t v35 = *(void **)(a1 + 64);
    if (v35)
    {
      id v36 = [v35 copy];
      [*(id *)(*(void *)(a1 + 56) + 64) setObject:v36 forKeyedSubscript:v21];
    }
  }
}

void sub_10001E220(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegates]);
  [v2 addObject:*(void *)(a1 + 40)];
}

void sub_10001E2F8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegates]);
  [v2 removeObject:*(void *)(a1 + 40)];
}

void sub_10001F334( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100014820((void *)&_mh_execute_header, a2, a3, "IDS send error = %@", a5, a6, a7, a8, 2u);
}

void sub_10001F39C( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10001F404( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10001F438( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

id sub_10001F638(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onqueue_start");
}

id sub_10001F718(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onqueue_cancel");
}

void sub_100020718(id a1, BOOL a2, NSError *a3)
{
  if (a3)
  {
    uint64_t v3 = auto_unlock_log(a1);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1000214E0(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }

void sub_100020B78(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = SFAutoUnlockErrorDomain;
  NSErrorUserInfoKey v6 = NSLocalizedDescriptionKey;
  uint64_t v7 = @"Setup created response failed";
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v7,  &v6,  1LL));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v3,  103LL,  v4));
  [v2 notifyDelegateWithError:v5];
}

void sub_100020E20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    [*(id *)(a1 + 32) invalidateResponseTimer];
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = SFAutoUnlockErrorDomain;
    NSErrorUserInfoKey v8 = NSLocalizedDescriptionKey;
    uint64_t v9 = @"Setup created response failed";
    NSErrorUserInfoKey v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v9,  &v8,  1LL));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v5,  103LL,  v6));
    [v4 notifyDelegateWithError:v7];
  }

void sub_100021088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    [*(id *)(a1 + 32) invalidateResponseTimer];
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = SFAutoUnlockErrorDomain;
    NSErrorUserInfoKey v8 = NSLocalizedDescriptionKey;
    uint64_t v9 = @"Setup created response failed";
    NSErrorUserInfoKey v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v9,  &v8,  1LL));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v5,  103LL,  v6));
    [v4 notifyDelegateWithError:v7];
  }

id sub_100021238(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleMessage:*(void *)(a1 + 40) fromDeviceID:*(void *)(a1 + 48) type:*(unsigned __int16 *)(a1 + 56)];
}

void sub_100021400(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_FAULT,  "Hash from setup doesn't match preferred LTK",  v1,  2u);
  sub_1000147C8();
}

void sub_10002143C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10002146C(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "handleCreateEscrowSecret: %@",  (uint8_t *)&v2,  0xCu);
}

void sub_1000214E0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t SDAuthenticationPairingCreateSecretReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      uint64_t Data = PBReaderReadData(a2);
      uint64_t v19 = objc_claimAutoreleasedReturnValue(Data);
      uint64_t v20 = 16LL;
    }

    else
    {
      if ((_DWORD)v12 != 2)
      {
        if ((_DWORD)v12 == 1)
        {
          char v13 = 0;
          unsigned int v14 = 0;
          uint64_t v15 = 0LL;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v16 == -1LL || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v17 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
            v15 |= (unint64_t)(v17 & 0x7F) << v13;
            if ((v17 & 0x80) == 0) {
              goto LABEL_33;
            }
            v13 += 7;
            BOOL v9 = v14++ >= 9;
            if (v9)
            {
              LODWORD(v15) = 0;
              goto LABEL_35;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_33:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v15) = 0;
          }
LABEL_35:
          *(_DWORD *)(a1 + 24) = v15;
        }

        else
        {
          uint64_t result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result) {
            return result;
          }
        }

        continue;
      }

      uint64_t String = PBReaderReadString(a2);
      uint64_t v19 = objc_claimAutoreleasedReturnValue(String);
      uint64_t v20 = 8LL;
    }

    id v22 = *(void **)(a1 + v20);
    *(void *)(a1 + v20) = v19;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

LABEL_19:
      _Block_object_dispose(&v36, 8);
      return;
    case 0xALL:
      char v13 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockAKSSession localLTK](self, "localLTK"));
      unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockAKSSession remoteLTK](self, "remoteLTK"));
      uint64_t v30 = -[SDAutoUnlockAKSSession originator](self, "originator");
      -[SDAutoUnlockAKSSession setAksSessionID:]( self,  "setAksSessionID:",  sub_100013170(v13, v14, v30, 0, 0, 0LL, (_DWORD *)v37 + 6));
      goto LABEL_18;
    default:
      goto LABEL_19;
  }

  if (!-[SDStatusMonitor disablePipelining](self->_monitor, "disablePipelining") && sub_100035FEC())
  {
    uint64_t v20 = v7;
    CFURLRequestSetShouldPipelineHTTP([v20 _CFURLRequest], 1, 0);
    id v21 = v20;
    _CFURLRequestSetShouldSkipPipelineProbe([v21 _CFURLRequest], 1);
    _CFURLRequestSetShouldPipelineNonIdempotentHTTP([v21 _CFURLRequest], 1);
  }

  if ([v4 isEqual:@"Discover"])
  {
    id v22 = (NSURLSessionUploadTask *)(id)objc_claimAutoreleasedReturnValue( -[NSURLSession uploadTaskWithRequest:fromData:]( self->_session,  "uploadTaskWithRequest:fromData:",  v7,  v5));
    discoverTask = self->_discoverTask;
    self->_discoverTask = v22;
LABEL_28:

    goto LABEL_29;
  }

  if ([v4 isEqual:@"Ask"])
  {
    id v22 = (NSURLSessionUploadTask *)(id)objc_claimAutoreleasedReturnValue( -[NSURLSession uploadTaskWithRequest:fromData:]( self->_session,  "uploadTaskWithRequest:fromData:",  v7,  v5));
    discoverTask = self->_askTask;
    self->_askTask = v22;
    goto LABEL_28;
  }

  uint64_t v24 = [v4 isEqual:@"Upload"];
  if ((_DWORD)v24)
  {
    id v22 = (NSURLSessionUploadTask *)(id)objc_claimAutoreleasedReturnValue( -[NSURLSession uploadTaskWithStreamedRequest:]( self->_session,  "uploadTaskWithStreamedRequest:",  v7));
    discoverTask = self->_uploadTask;
    self->_uploadTask = v22;
    goto LABEL_28;
  }

  id v22 = 0LL;
LABEL_29:
  uint64_t v25 = airdrop_log(v24);
  uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(-[SDAirDropClient personID](self, "personID"));
    uint64_t v31 = 138412546;
    uint64_t v32 = v4;
    uint64_t v33 = 2112;
    uint64_t v34 = v27;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Sending %@ request to %@",  (uint8_t *)&v31,  0x16u);
  }

  -[NSURLSessionUploadTask resume](v22, "resume");
}

  char v18 = -[NSMutableArray count](v3, "count");
  uint64_t v19 = airdrop_log(v18);
  uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    id v21 = [*(id *)(*(void *)(a1 + 32) + 104) count];
    *(_DWORD *)buf = 134218240;
    *(void *)&uint8_t buf[4] = v18;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "validateAirDropItems validated %lu/%lu items for transfer",  buf,  0x16u);
  }

  [*(id *)(*(void *)(a1 + 32) + 216) setObject:v3 forKeyedSubscript:kSFOperationFilesKey];
  id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 112) allValues]);
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v22 containsObject:&__kCFBooleanTrue]));
  [*(id *)(*(void *)(a1 + 32) + 216) setObject:v23 forKeyedSubscript:kSFOperationConvertMediaFormatsKey];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}
}
}

  if (!self->_resolver)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100094574;
    block[3] = &unk_1005CB2F8;
    void block[4] = self;
    dispatch_async(&_dispatch_main_q, block);
  }

  return 0;
}

  return v8;
}

    goto LABEL_20;
  }

  unint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( -[SDAutoUnlockAKSManager baseLocalKeysDictionaryForDevice:type:]( self,  "baseLocalKeysDictionaryForDevice:type:",  v4,  0LL));
  unint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockAKSManager keychainDataForQuery:](self, "keychainDataForQuery:", v16));

  char v18 = auto_unlock_log(v17);
  uint64_t v11 = (SDAutoUnlockEscrowSecretInfo *)objc_claimAutoreleasedReturnValue(v18);
  uint64_t v19 = os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    if (v19)
    {
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v11, OS_LOG_TYPE_DEFAULT, "Migrating escrow secret", v27, 2u);
    }

    uint64_t v11 = (SDAutoUnlockEscrowSecretInfo *)objc_claimAutoreleasedReturnValue( -[SDAutoUnlockAKSManager baseLocalKeysDictionaryForDevice:type:]( self,  "baseLocalKeysDictionaryForDevice:type:",  v4,  0LL));
    unsigned int v14 = -[NSMutableDictionary initWithDictionary:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithDictionary:",  v11);
    -[os_log_s setObject:forKeyedSubscript:](v14, "setObject:forKeyedSubscript:", &off_1005F7888, kSecAttrKeyType);
    uint64_t v20 = objc_opt_new(&OBJC_CLASS___SDAutoUnlockEscrowSecretInfo);
    -[SDAutoUnlockEscrowSecretInfo setSecret:](v20, "setSecret:", v12);
    id v21 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockEscrowSecretInfo data](v20, "data"));
    -[os_log_s setObject:forKeyedSubscript:](v14, "setObject:forKeyedSubscript:", v21, kSecValueData);

    SecItemDelete((CFDictionaryRef)v11);
    id v22 = SecItemAdd(v14, 0LL);
    if ((_DWORD)v22)
    {
      uint64_t v23 = auto_unlock_log(v22);
      uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_1000BB3C8();
      }
    }

    goto LABEL_19;
  }

  if (v19)
  {
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v11, OS_LOG_TYPE_DEFAULT, "No secret", v26, 2u);
  }

  unint64_t v12 = 0LL;
LABEL_20:

  return v12;
}
}

  return RandomKey;
}
}

    -[SDAutoUnlockSuggestionManager restartScanTimer:](self, "restartScanTimer:", sub_100114580(30.0));
    goto LABEL_20;
  }

  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockTransport sharedTransport](&OBJC_CLASS___SDAutoUnlockTransport, "sharedTransport"));
  int v10 = (void *)objc_claimAutoreleasedReturnValue([v9 autoUnlockEligibleWatches]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 allObjects]);

  unint64_t v12 = objc_opt_new(&OBJC_CLASS___NSMutableSet);
  uint64_t v40 = 0u;
  __int16 v41 = 0u;
  v42 = 0u;
  __int16 v43 = 0u;
  char v8 = v11;
  char v13 = -[os_log_s countByEnumeratingWithState:objects:count:]( v8,  "countByEnumeratingWithState:objects:count:",  &v40,  v46,  16LL);
  if (v13)
  {
    unsigned int v14 = *(void *)v41;
    do
    {
      for (i = 0LL; i != v13; i = (char *)i + 1)
      {
        if (*(void *)v41 != v14) {
          objc_enumerationMutation(v8);
        }
        unint64_t v16 = *(void **)(*((void *)&v40 + 1) + 8LL * (void)i);
        char v17 = (void *)objc_claimAutoreleasedReturnValue([v16 uniqueID]);
        char v18 = [v4 containsObject:v17];

        if (v18)
        {
          uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v16 bluetoothID]);
          -[NSMutableSet addObject:](v12, "addObject:", v19);
        }
      }

      char v13 = -[os_log_s countByEnumeratingWithState:objects:count:]( v8,  "countByEnumeratingWithState:objects:count:",  &v40,  v46,  16LL);
    }

    while (v13);
  }

  if (-[NSMutableSet count](v12, "count"))
  {
    location = 0LL;
    objc_initWeak(&location, self);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockSuggestionManager scanner](self, "scanner"));

    if (v20)
    {
      id v21 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockSuggestionManager scanner](self, "scanner"));
      [v21 invalidate];
    }

    id v22 = -[SFBLEScanner initWithType:](objc_alloc(&OBJC_CLASS___SFBLEScanner), "initWithType:", 16LL);
    -[SDAutoUnlockSuggestionManager setScanner:](self, "setScanner:", v22);

    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockSuggestionManager suggestionManagerQueue](self, "suggestionManagerQueue"));
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockSuggestionManager scanner](self, "scanner"));
    [v24 setDispatchQueue:v23];

    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472LL;
    v37[2] = sub_100134BE0;
    v37[3] = &unk_1005CF418;
    objc_copyWeak(&v38, &location);
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockSuggestionManager scanner](self, "scanner"));
    [v25 setDeviceFoundHandler:v37];

    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockSuggestionManager scanner](self, "scanner"));
    [v26 setInvalidationHandler:&stru_1005CF438];

    uint64_t v28 = auto_unlock_log(v27);
    uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v45 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Suggestion scanning for bluetooth IDs %@",  buf,  0xCu);
    }

    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v12, "allObjects"));
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockSuggestionManager scanner](self, "scanner"));
    [v31 setDeviceFilter:v30];

    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v12, "allObjects"));
    -[SDAutoUnlockSuggestionManager setCurrentBluetoothIDs:](self, "setCurrentBluetoothIDs:", v32);

    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockSuggestionManager scanner](self, "scanner"));
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472LL;
    v36[2] = sub_100134CA0;
    v36[3] = &unk_1005CB3E8;
    v36[4] = self;
    [v33 activateWithCompletion:v36];

    objc_destroyWeak(&v38);
    objc_destroyWeak(&location);

    goto LABEL_19;
  }

  uint64_t v34 = auto_unlock_log(0LL);
  unint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "No devices to scan for, not starting suggetion scanner",  buf,  2u);
  }

LABEL_20:
}

  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_20:
  __break(1u);
}

  uint64_t v74 = v198;
  uint64_t v75 = SFAirDropReceive.Transfer.id.getter(v34);
  SFAirDrop.TransferIdentifier.stringValue.getter(v75);
  uint64_t v77 = v76;
  (*(void (**)(char *, uint64_t))(v199 + 8))(v74, v200);
  v78 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v77);
  if (v37)
  {
    swift_errorRetain(v37);
    v79 = (void *)_convertErrorToNSError(_:)(v37);
    swift_errorRelease(v37);
  }

  else
  {
    v79 = 0LL;
  }

  v80 = v197;
  sub_1001915A4((uint64_t)v213, v197, (uint64_t *)&unk_100645130);
  v81 = v214;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v80, 1LL, v214) == 1)
  {
    v83 = 0LL;
  }

  else
  {
    URL._bridgeToObjectiveC()(v82);
    v83 = v84;
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v80, v81);
  }

  v85 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease((const char *)0xE700000000000000LL);
  if (v36)
  {
    v86 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v36);
  }

  else
  {
    v86 = 0LL;
  }

  v87 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v204));
  v88 = v205;
  v89 = v212;
  SFAirDropReceive.Transfer.askRequest.getter(v87);
  v91 = (const char *)SFAirDropReceive.AskRequest.urlItems.getter(v90);
  (*(void (**)(char *, uint64_t))(v206 + 8))(v88, v207);
  v92 = sub_10018D21C((uint64_t)v91);
  swift_bridgeObjectRelease(v91);
  v216 = v209;
  sub_10028A9C0((uint64_t)v92);
  v93 = v216;
  isa = Array._bridgeToObjectiveC()().super.isa;
  *(void *)&v95 = swift_bridgeObjectRelease(v93).n128_u64[0];
  v96 = v201;
  v97 = objc_msgSend( v87,  "initWithIdentifier:metaData:userResponse:transferState:failureReason:error:customDestinationURL:contentsTitle: contentsDescription:selectedAction:possibleActions:cancelAction:completedURLs:",  v78,  v201,  v211,  v208,  v210,  v79,  v95,  v83,  v85,  v86,  0,  0,  0,  isa);

  swift_errorRelease(v37);
  (*(void (**)(uint64_t, uint64_t))(v202 + 8))(v89, v203);
  sub_100187100((uint64_t)v213, (uint64_t *)&unk_100645130);
  return (uint64_t)v97;
}

  if (v19 < 0) {
    uint64_t v28 = v19;
  }
  else {
    uint64_t v28 = v19 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain((const char *)v19);
  uint64_t v29 = _CocoaArrayWrapper.endIndex.getter(v28);
  swift_bridgeObjectRelease((const char *)v19);
  if (v29) {
    goto LABEL_11;
  }
LABEL_10:
  [v18 invalidate];
LABEL_11:
  *(void *)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary19SDTempPairingClient_connectionState) = 2LL;
  uint64_t v23 = *(void (**)(uint64_t))(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary19SDTempPairingClient_objectChanged);
  if (v23)
  {
    uint64_t v24 = *(void *)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary19SDTempPairingClient_objectChanged + 8);
    uint64_t v25 = swift_retain(v24);
    v23(v25);
    sub_100224FF8((uint64_t)v23, v24);
  }

  return sub_1003EA12C();
}

    unsigned int v14 = (v24 - 1) & v24;
    uint64_t v19 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_20:
    *(void *)(v0 + 416) = v13;
    *(void *)(v0 + 424) = v14;
    uint64_t v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 376);
    uint64_t v27 = *(void *)(v0 + 328);
    uint64_t v28 = *(void *)(v0 + 336);
    uint64_t v29 = *(void *)(v0 + 312);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v28 + 16))( v29,  *(void *)(v20 + 48) + *(void *)(v28 + 72) * v19,  v27);
    uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56);
    *(void *)(v0 + 432) = v30;
    v30(v29, 0LL, 1LL, v27);
    if (v26(v29, 1LL, v27) == 1)
    {
      uint64_t v64 = *(void *)(v0 + 392);
      goto LABEL_31;
    }

    uint64_t v31 = *(void *)(v0 + 344);
    uint64_t v32 = *(void *)(v0 + 328);
    uint64_t v33 = *(void *)(v0 + 312);
    uint64_t v34 = (uint64_t *)(*(void *)(v0 + 256) + *(void *)(v0 + 400));
    unint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 336) + 32LL);
    *(void *)(v0 + 440) = v35;
    v35(v31, v33, v32);
    swift_beginAccess(v34, v0 + 168, 32LL, 0LL);
    id v36 = *v34;
    if (*(void *)(v36 + 16))
    {
      id v37 = sub_1003AD618(*(void *)(v0 + 344));
      if ((v38 & 1) != 0)
      {
        sub_10019A6C4(*(void *)(v36 + 56) + 40 * v37, (uint64_t)v109);
        sub_1001CE0D0(v109, (uint64_t)v115);
        swift_endAccess(v0 + 168);
        uint64_t v39 = *(void *)(v0 + 40);
        uint64_t v40 = *(void *)(v0 + 48);
        sub_10019A708(v115, v39);
        __int16 v41 = *(int **)(v40 + 40);
        v116 = (uint64_t (*)(uint64_t, uint64_t))((char *)v41 + *v41);
        v42 = (void *)swift_task_alloc(v41[1]);
        *(void *)(v0 + 44_Block_object_dispose((const void *)(v36 - 144), 8) = v42;
        void *v42 = v0;
        v42[1] = sub_1002F742C;
        return v116(v39, v40);
      }
    }

    unint64_t v16 = *(void *)(v0 + 336);
    uint64_t v15 = *(void *)(v0 + 344);
    char v17 = *(void *)(v0 + 328);
    swift_endAccess(v0 + 168);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  }

  uint64_t v25 = v21 + 3;
  if (v25 < v22)
  {
    uint64_t v24 = *(void *)(v23 + 8 * v25);
    if (!v24)
    {
      while (1)
      {
        char v13 = v25 + 1;
        if (__OFADD__(v25, 1LL)) {
          goto LABEL_45;
        }
        if (v13 >= v22) {
          goto LABEL_30;
        }
        uint64_t v24 = *(void *)(v23 + 8 * v13);
        ++v25;
        if (v24) {
          goto LABEL_19;
        }
      }
    }

    char v13 = v25;
    goto LABEL_19;
  }

  swift_release(v40);
  return 0LL;
}

  swift_retain(a3);
  return sub_100481A5C(v23, v22, v24, a3);
}

  uint64_t v67 = *(void *)(v0 + 1088);
  uint64_t v68 = *(void *)(v0 + 1072);
  swift_task_dealloc(*(void *)(v0 + 1096));
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

      swift_once(&qword_100644228, sub_100382454);
      goto LABEL_14;
    }
  }

  else
  {
    *(void *)&id v21 = swift_bridgeObjectRelease(v18).n128_u64[0];
  }

  id v22 = objc_msgSend(a1, "identifier", v21);
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  uint64_t v25 = v24;

  sub_100386614(v23, v25, a2, a3, a4);
  swift_bridgeObjectRelease(v25);
  if (!v4) {
    sub_1003863A4(a1, a2, a3, a4);
  }
}

      swift_once(&qword_100644228, sub_100382454);
      goto LABEL_14;
    }
  }

  else
  {
    swift_bridgeObjectRelease(v18);
  }

  sub_100386838(a1);
  if (!v4)
  {
    id v22 = v21;
    uint64_t v23 = a2 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashDB;
    uint64_t v24 = *(void *)(a2 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashDB);
    uint64_t v25 = *(void *)(v23 + 8);
    ObjectType = swift_getObjectType(v24);
    uint64_t v27 = *(void (**)(const char *, uint64_t, uint64_t))(v25 + 24);
    swift_unknownObjectRetain(v24);
    v27(v22, ObjectType, v25);
    swift_bridgeObjectRelease(v22);
    swift_unknownObjectRelease(v24);
  }

    char v4 = (v11 - 1) & v11;
  }

  while (1)
  {
    unint64_t v6 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      break;
    }
    if (v6 >= v23) {
      goto LABEL_45;
    }
    uint64_t v11 = *(void *)(v22 + 8 * v6);
    ++v12;
    if (v11) {
      goto LABEL_19;
    }
  }

  swift_bridgeObjectRelease((const char *)v10, v12);
  if (qword_100644308 != -1) {
    swift_once(&qword_100644308, sub_1003EA8BC);
  }
  sub_1003EA818();
  unint64_t v16 = (void (*)(uint64_t))v1[3];
  if (v16)
  {
    char v17 = v1[4];
    char v18 = swift_retain(v17);
    v16(v18);
    sub_100224FF8((uint64_t)v16, v17);
  }

    return;
  }

  id v22 = [v14 sessionID];
  if (!v22)
  {
LABEL_6:
    if (qword_100644408 == -1)
    {
LABEL_7:
      uint64_t v29 = type metadata accessor for Logger(0LL);
      uint64_t v30 = sub_100186DE4(v29, (uint64_t)qword_100656748);
      uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
      uint64_t v32 = static os_log_type_t.error.getter(v31);
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Message does not have a session ID", v33, 2u);
        swift_slowDealloc(v33, -1LL, -1LL);

        return;
      }

      goto LABEL_19;
    }

void sub_1000225CC(_Unwind_Exception *a1)
{
}

void sub_1000225E4(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localLTK]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remoteLTK]);
  objc_msgSend( *(id *)(a1 + 32),  "setAksSessionID:",  sub_100012B64( v2,  v3,  (int)objc_msgSend(*(id *)(a1 + 32), "originator"),  (_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24),  1));

  uint64_t v5 = auto_unlock_log(v4);
  unint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v7 = [*(id *)(a1 + 32) sessionIsValid];
    char v8 = @"NO";
    if (v7) {
      char v8 = @"YES";
    }
    int v9 = 138412290;
    int v10 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Fix worked for pairing session: %@",  (uint8_t *)&v9,  0xCu);
  }
}

void sub_100022708(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localLTK]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remoteLTK]);
  int v4 = [*(id *)(a1 + 32) originator];
  int v5 = [*(id *)(a1 + 32) usingEscrow];
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) escrowSecret]);
  objc_msgSend( *(id *)(a1 + 32),  "setAksSessionID:",  sub_100013170(v2, v3, v4, v5, 0, v6, (_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)));

  uint64_t v8 = auto_unlock_log(v7);
  int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v10 = [*(id *)(a1 + 32) sessionIsValid];
    uint64_t v11 = @"NO";
    if (v10) {
      uint64_t v11 = @"YES";
    }
    int v12 = 138412290;
    char v13 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Fix worked for auth session: %@",  (uint8_t *)&v12,  0xCu);
  }
}

void sub_100022860(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localLTK]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remoteLTK]);
  int v4 = [*(id *)(a1 + 32) originator];
  int v5 = [*(id *)(a1 + 32) usingEscrow];
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) escrowSecret]);
  objc_msgSend( *(id *)(a1 + 32),  "setAksSessionID:",  sub_100013170(v2, v3, v4, v5, 0, v6, (_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)));

  uint64_t v8 = auto_unlock_log(v7);
  int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v10 = [*(id *)(a1 + 32) sessionIsValid];
    uint64_t v11 = @"NO";
    if (v10) {
      uint64_t v11 = @"YES";
    }
    int v12 = 138412290;
    char v13 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Fix worked for auth session: %@",  (uint8_t *)&v12,  0xCu);
  }
}

void sub_100023058(uint64_t *a1, os_log_s *a2)
{
  uint64_t v2 = *a1;
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "Error creating authorization record: %d",  (uint8_t *)v3,  8u);
}

LABEL_24:
}

    goto LABEL_25;
  }

  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockSessionManager scanPhoneIDs](self, "scanPhoneIDs"));
  id v21 = [v20 containsObject:v7];

  if (v21)
  {
    uint64_t v33 = 0u;
    uint64_t v34 = 0u;
    uint64_t v31 = 0u;
    uint64_t v32 = 0u;
    id v22 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockSessionManager proxySessions](self, "proxySessions", 0LL));
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v22 allValues]);

    uint64_t v23 = [v11 countByEnumeratingWithState:&v31 objects:v39 count:16];
    if (v23)
    {
      uint64_t v24 = v23;
      uint64_t v25 = *(void *)v32;
      do
      {
        for (j = 0LL; j != v24; j = (char *)j + 1)
        {
          if (*(void *)v32 != v25) {
            objc_enumerationMutation(v11);
          }
          uint64_t v27 = *(void **)(*((void *)&v31 + 1) + 8LL * (void)j);
          uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v27 bleDevice]);
          uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v28 identifier]);
          uint64_t v30 = [v29 isEqual:v7];

          if (v30) {
            [v27 handleFoundBLEDevice:v4];
          }
        }

        uint64_t v24 = [v11 countByEnumeratingWithState:&v31 objects:v39 count:16];
      }

      while (v24);
    }

    goto LABEL_24;
  }

    self->_clientShouldAdvertise = v10;
  }

  -[SDProxHandoffAgent _update](self, "_update");
}

  return v17;
}
}

  ResponseMessage = (__CFHTTPMessage *)_CFHTTPServerRequestCreateResponseMessage(self->_askRequest, a3);
  if (a3 == 200)
  {
    *(void *)cf = 0LL;
    int v9 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
    unsigned int v10 = [(id)objc_opt_class(self) disambiguatedModelName];
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v9,  "setObject:forKeyedSubscript:",  v11,  kSFOperationReceiverModelNameKey);

    int v12 = (void *)objc_claimAutoreleasedReturnValue(-[SDStatusMonitor someComputerName](self->_monitor, "someComputerName"));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v9,  "setObject:forKeyedSubscript:",  v12,  kSFOperationReceiverComputerNameKey);

    char v13 = -[SDStatusMonitor enableXML](self->_monitor, "enableXML");
    if (v13) {
      unsigned int v14 = kCFPropertyListXMLFormat_v1_0;
    }
    else {
      unsigned int v14 = kCFPropertyListBinaryFormat_v1_0;
    }
    uint64_t v15 = off_1005CEA58;
    if (!v13) {
      uint64_t v15 = off_1005CEA50;
    }
    CFHTTPMessageSetHeaderFieldValue(ResponseMessage, @"Content-Type", *v15);
    uint64_t Data = CFPropertyListCreateData(0LL, v9, v14, 0LL, (CFErrorRef *)cf);
    if (Data)
    {
      char v17 = Data;
      char v18 = (const void *)_CFHTTPServerResponseCreateWithData(self->_askRequest, ResponseMessage, Data);
      CFRelease(v17);
    }

    else
    {
      uint64_t v19 = airdrop_log(0LL);
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        sub_1001240F4();
      }

      CFRelease(*(CFTypeRef *)cf);
      char v18 = (const void *)_CFHTTPServerResponseCreateWithData(self->_askRequest, ResponseMessage, 0LL);
    }
  }

  else
  {
    char v18 = (const void *)_CFHTTPServerResponseCreateWithData(self->_askRequest, ResponseMessage, 0LL);
  }

  _CFHTTPServerResponseEnqueue(v18);
  CFRelease(self->_askRequest);
  CFRelease(v18);
  CFRelease(ResponseMessage);
  self->_askRequest = 0LL;
}

  if (v15 && v12)
  {
    uint64_t v28 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@-%@-%@",  v7,  v15,  v12);
    uint64_t v29 = CFDictionaryGetTypeID();
    uint64_t v30 = CFDictionaryGetTypedValue(v9, v28, v29, 0LL);
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v30);

    if (v27) {
      goto LABEL_51;
    }
  }

  else if (!v12)
  {
    goto LABEL_30;
  }

  uint64_t v31 = -[NSString initWithFormat:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"%@-*-%@", v7, v12);
  uint64_t v32 = CFDictionaryGetTypeID();
  uint64_t v33 = CFDictionaryGetTypedValue(v9, v31, v32, 0LL);
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v33);

  if (v27) {
    goto LABEL_51;
  }
LABEL_30:
  if (v11 && v23)
  {
    uint64_t v34 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@-%@-%@",  v7,  v11,  v23);
    unint64_t v35 = CFDictionaryGetTypeID();
    id v36 = CFDictionaryGetTypedValue(v9, v34, v35, 0LL);
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v36);

    if (v27) {
      goto LABEL_51;
    }
  }

  else if (!v11)
  {
    goto LABEL_36;
  }

  id v37 = -[NSString initWithFormat:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"%@-%@-*", v7, v11);
  id v38 = CFDictionaryGetTypeID();
  uint64_t v39 = CFDictionaryGetTypedValue(v9, v37, v38, 0LL);
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v39);

  if (v27) {
    goto LABEL_51;
  }
LABEL_36:
  if (v15 && v23)
  {
    uint64_t v40 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@-%@-%@",  v7,  v15,  v23);
    __int16 v41 = CFDictionaryGetTypeID();
    v42 = CFDictionaryGetTypedValue(v9, v40, v41, 0LL);
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v42);

    if (v27) {
      goto LABEL_51;
    }
    goto LABEL_47;
  }

  if (v23)
  {
LABEL_47:
    uint64_t v46 = -[NSString initWithFormat:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"%@-*-%@", v7, v23);
    uint64_t v47 = CFDictionaryGetTypeID();
    uint64_t v48 = CFDictionaryGetTypedValue(v9, v46, v47, 0LL);
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v48);

    if (v27) {
      goto LABEL_51;
    }
  }

  if (!v15
    || (v49 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@-%@-*",  v7,  v15),  v50 = CFDictionaryGetTypeID(),  v51 = CFDictionaryGetTypedValue(v9, v49, v50, 0LL),  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v51),  v49,  !v27))
  {
    uint64_t v52 = -[NSString initWithFormat:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"%@", v7);
    uint64_t v53 = CFDictionaryGetTypeID();
    v54 = CFDictionaryGetTypedValue(v9, v52, v53, 0LL);
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v54);
  }

          sub_1001A4BC8(v60, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
          sub_1001A4BC8(v63, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
          sub_1001A4B84(v42, v65, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
          sub_1001A4B84(v41, v52, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
          goto LABEL_25;
        }

        goto LABEL_75;
      }

      v63 = (uint64_t)v109;
    }

    else
    {
      v63 = (uint64_t)v109;
      if (v94)
      {
LABEL_75:
        swift_bridgeObjectRetain(v94);
        sub_1001A4BC8(v61, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
        sub_1001A4BC8(v112, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
        swift_bridgeObjectRelease_n(v94, 2LL);
        goto LABEL_23;
      }

      v100 = 0LL;
    }

    sub_1001A4BC8(v61, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
    sub_1001A4BC8(v112, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
    if (!v100) {
      goto LABEL_80;
    }
    swift_bridgeObjectRelease(v100);
    goto LABEL_23;
  }

    v308 = (const __CFString *)((v74 - 1) & v74);
    v309 = v75;
    uint64_t v71 = __clz(__rbit64(v74)) + (v75 << 6);
LABEL_25:
    uint64_t v77 = v300;
    v78 = *(void *)(v300 + 48);
    v79 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
    v80 = *(void **)(v79 - 8);
    v81 = (void (*)(void))v80[2];
    v82 = v294;
    ((void (*)(char *, unint64_t, uint64_t))v81)(v294, v78 + v80[9] * v71, v79);
    v83 = *(void *)(v77 + 56);
    v84 = type metadata accessor for SFAirDropSend.Transfer(0LL);
    v310 = *(const __CFString **)(v84 - 8);
    v85 = v296;
    data = v310->data;
    ((void (*)(char *, unint64_t, uint64_t))data)( &v82[*(int *)(v296 + 48)],  v83 + v310[2].info * v71,  v84);
    v87 = (uint64_t)v82;
    v88 = v311;
    sub_1001870BC(v87, v311, &qword_100649DC8);
    v89 = *(int *)(v85 + 48);
    v90 = v295;
    v91 = (const __CFString *)&v295[v89];
    v92 = v88 + v89;
    ((void (*)(char *, uint64_t, uint64_t))v81)(v295, v88, v79);
    v307 = v91;
    v93 = v91;
    v94 = v84;
    v95 = v79;
    v96 = ((uint64_t (*)(const __CFString *, uint64_t, uint64_t))data)(v93, v92, v94);
    SFAirDrop.TransferIdentifier.id.getter(v96);
    v97 = (void (*)(char *, uint64_t))v80[1];
    v97(v90, v79);
    v98 = &v312[*(int *)(v85 + 48)];
    v81();
    v99 = ((uint64_t (*)(char *, uint64_t, uint64_t))data)(v98, v92, v94);
    v100 = (uint64_t)v298;
    SFAirDropSend.Transfer.activeInterfaceType.getter(v99);
    info = (void (*)(char *, uint64_t))v310->info;
    info(v98, v94);
    v102 = v318;
    a1 = *(void *)(v318 + 48);
    v103 = v315;
    if (((unsigned int (*)(uint64_t, uint64_t, void (*)(void, void, void, void)))a1)( v100,  1LL,  v315) == 1)
    {
      v104 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v102 + 56);
      v105 = (uint64_t)v297;
      v104(v297, 1LL, 1LL, (uint64_t)v103);
      sub_100187100(v100, &qword_100656490);
    }

    else
    {
      v105 = (uint64_t)v297;
      (*(void (**)(char *, uint64_t, void (*)(void, void, void, void)))(v102 + 32))( v297,  v100,  v103);
      v104 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v102 + 56);
      v104((char *)v105, 0LL, 1LL, (uint64_t)v103);
    }

    v106 = (void *)v306;
    v97(v312, v95);
    char v17 = (uint64_t)v103;
    if (((unsigned int (*)(uint64_t, uint64_t, void (*)(void, void, void, void)))a1)( v105,  1LL,  v103) != 1)
    {
      v115 = *(void (**)(void, void, void))(v102 + 32);
      v115(v293, v105, v103);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v106);
      v322 = (unint64_t)v106;
      v117 = v313;
      v119 = sub_1003AD618(v313);
      v120 = v106[2];
      v121 = (v118 & 1) == 0;
      v122 = v120 + v121;
      if (__OFADD__(v120, v121))
      {
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
        goto LABEL_164;
      }

      a1 = v118;
      if (v106[3] < v122)
      {
        sub_1003A9F00(v122, isUniquelyReferenced_nonNull_native);
        v123 = sub_1003AD618(v117);
        if ((a1 & 1) != (v124 & 1))
        {
LABEL_167:
          uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v316);
          __break(1u);
          return result;
        }

        v119 = v123;
        v125 = (void *)v322;
        if ((a1 & 1) == 0) {
          goto LABEL_37;
        }
LABEL_41:
        char v17 = (uint64_t)v315;
        (*(void (**)(unint64_t, char *, void (*)(void, void, void, void)))(v102 + 40))( v125[7] + *(void *)(v102 + 72) * v119,  v293,  v315);
LABEL_42:
        v306 = v322;
        swift_bridgeObjectRelease(0x8000000000000000LL);
        uint64_t v50 = v316;
        (*((void (**)(uint64_t, uint64_t))v319 + 1))(v117, v316);
        id v38 = v314;
        goto LABEL_6;
      }

      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v125 = (void *)v322;
        if ((v118 & 1) != 0) {
          goto LABEL_41;
        }
      }

      else
      {
        sub_1003AEE9C();
        v125 = (void *)v322;
        if ((a1 & 1) != 0) {
          goto LABEL_41;
        }
      }

    v314 = (const __CFString *)((v74 - 1) & v74);
    v315 = v75;
    uint64_t v71 = __clz(__rbit64(v74)) + (v75 << 6);
LABEL_25:
    uint64_t v77 = v306;
    v78 = *(void *)(v306 + 48);
    v79 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
    v80 = *(void **)(v79 - 8);
    v81 = (void (*)(void))v80[2];
    v82 = v300;
    ((void (*)(char *, unint64_t, uint64_t))v81)(v300, v78 + v80[9] * v71, v79);
    v83 = *(void *)(v77 + 56);
    v84 = type metadata accessor for SFAirDropSend.Transfer(0LL);
    v316 = *(const __CFString **)(v84 - 8);
    v85 = v302;
    data = v316->data;
    ((void (*)(char *, unint64_t, uint64_t))data)( &v82[*(int *)(v302 + 48)],  v83 + v316[2].info * v71,  v84);
    v87 = (uint64_t)v82;
    v88 = v317;
    sub_1001870BC(v87, v317, &qword_100649DC8);
    v89 = *(int *)(v85 + 48);
    v90 = v301;
    v91 = &v301[v89];
    v92 = v88 + v89;
    ((void (*)(char *, uint64_t, uint64_t))v81)(v301, v88, v79);
    v313 = v91;
    v93 = v91;
    v94 = v84;
    v95 = v79;
    v96 = ((uint64_t (*)(const char *, uint64_t, uint64_t))data)(v93, v92, v94);
    SFAirDrop.TransferIdentifier.id.getter(v96);
    v97 = (void (*)(char *, uint64_t))v80[1];
    v97(v90, v79);
    v98 = &v318[*(int *)(v85 + 48)];
    v81();
    v99 = ((uint64_t (*)(char *, uint64_t, uint64_t))data)(v98, v92, v94);
    v100 = (uint64_t)v304;
    SFAirDropSend.Transfer.activeInterfaceType.getter(v99);
    info = (void (*)(char *, uint64_t))v316->info;
    info(v98, v94);
    v102 = v324;
    a1 = *(void *)(v324 + 48);
    v103 = v321;
    if (((unsigned int (*)(uint64_t, uint64_t, void (*)(void, void, void, void)))a1)( v100,  1LL,  v321) == 1)
    {
      v104 = *(void (**)(char *, uint64_t, uint64_t, void))(v102 + 56);
      v105 = (uint64_t)v303;
      v104(v303, 1LL, 1LL, v103);
      sub_100187100(v100, &qword_100656490);
    }

    else
    {
      v105 = (uint64_t)v303;
      (*(void (**)(char *, uint64_t, void (*)(void, void, void, void)))(v102 + 32))( v303,  v100,  v103);
      v104 = *(void (**)(char *, uint64_t, uint64_t, void))(v102 + 56);
      v104((char *)v105, 0LL, 1LL, v103);
    }

    v106 = v312;
    v97(v318, v95);
    char v17 = (uint64_t)v103;
    if (((unsigned int (*)(uint64_t, uint64_t, void (*)(void, void, void, void)))a1)( v105,  1LL,  v103) != 1)
    {
      v116 = *(void (**)(void, void, void))(v102 + 32);
      v116(v299, v105, v103);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v106);
      v328 = (unint64_t)v106;
      v118 = v319;
      v120 = sub_1003AD618(v319);
      v121 = *((void *)v106 + 2);
      v122 = (v119 & 1) == 0;
      v123 = v121 + v122;
      if (__OFADD__(v121, v122))
      {
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
        goto LABEL_164;
      }

      a1 = v119;
      if (*((void *)v106 + 3) < v123)
      {
        sub_1003A9F00(v123, isUniquelyReferenced_nonNull_native);
        v124 = sub_1003AD618(v118);
        if ((a1 & 1) != (v125 & 1))
        {
LABEL_167:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v322);
          __break(1u);
          return;
        }

        v120 = v124;
        v126 = (void *)v328;
        if ((a1 & 1) == 0) {
          goto LABEL_37;
        }
LABEL_41:
        char v17 = (uint64_t)v321;
        (*(void (**)(unint64_t, char *, void (*)(void, void, void, void)))(v102 + 40))( v126[7] + *(void *)(v102 + 72) * v120,  v299,  v321);
LABEL_42:
        v312 = (const char *)v328;
        v130 = swift_bridgeObjectRelease((const char *)0x8000000000000000LL);
        uint64_t v50 = v322;
        (*((void (**)(uint64_t, uint64_t, __n128))v325 + 1))(v118, v322, v130);
        id v38 = v320;
        goto LABEL_6;
      }

      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v126 = (void *)v328;
        if ((v119 & 1) != 0) {
          goto LABEL_41;
        }
      }

      else
      {
        sub_1003AEE9C();
        v126 = (void *)v328;
        if ((a1 & 1) != 0) {
          goto LABEL_41;
        }
      }

      unsigned int v10 = (v16 - 1) & v16;
      unsigned int v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }

    char v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    sub_1002499DC(*(void *)(v4 + 56) + 48 * v14, (uint64_t)v34);
    sub_1001CCE4C(v34, v33);
    Hasher.init(_seed:)(v32);
    swift_bridgeObjectRetain(v19);
    String.hash(into:)(v32, v20, v19);
    uint64_t result = Hasher._finalize()();
    id v21 = -1LL << *(_BYTE *)(v9 + 32);
    id v22 = result & ~v21;
    uint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v12 + 8 * (v22 >> 6))) != 0)
    {
      uint64_t v24 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v25 = 0;
      uint64_t v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v27 = v23 == v26;
        if (v23 == v26) {
          uint64_t v23 = 0LL;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v12 + 8 * v23);
      }

      while (v28 == -1);
      uint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }

    *(void *)(v12 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v24;
    uint64_t v29 = (void *)(*(void *)(v9 + 48) + 16 * v24);
    *uint64_t v29 = v20;
    v29[1] = v19;
    uint64_t result = (uint64_t)sub_1001CCE4C(v33, (_OWORD *)(*(void *)(v9 + 56) + 48 * v24));
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1LL)) {
      break;
    }
    if (!v5) {
      return v9;
    }
  }

      v54 = (v23 - 1) & v23;
      v55 = v24;
      id v21 = __clz(__rbit64(v23)) + (v24 << 6);
    }

    uint64_t v26 = v50;
    uint64_t v27 = v51;
    uint64_t v28 = *(void *)(v51 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v51 + 16))(v50, a4[6] + v28 * v21, v11);
    uint64_t v29 = a4[7];
    uint64_t v30 = v53;
    uint64_t v31 = *(void *)(v53 + 72);
    uint64_t v32 = v29 + v31 * v21;
    uint64_t v33 = v59;
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v20, v32, v59);
    uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    v34(v57, v26, v11);
    unint64_t v35 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    v35(v58, v20, v33);
    unint64_t v16 = v49;
    id v36 = *(void *)(v49 + 40);
    id v37 = sub_100183F14( &qword_100646108,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v36, v11, v37);
    id v38 = -1LL << *(_BYTE *)(v16 + 32);
    uint64_t v39 = result & ~v38;
    uint64_t v40 = v39 >> 6;
    if (((-1LL << v39) & ~*(void *)(v19 + 8 * (v39 >> 6))) != 0)
    {
      __int16 v41 = __clz(__rbit64((-1LL << v39) & ~*(void *)(v19 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v42 = 0;
      __int16 v43 = (unint64_t)(63 - v38) >> 6;
      do
      {
        if (++v40 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v44 = v40 == v43;
        if (v40 == v43) {
          uint64_t v40 = 0LL;
        }
        v42 |= v44;
        uint64_t v45 = *(void *)(v19 + 8 * v40);
      }

      while (v45 == -1);
      __int16 v41 = __clz(__rbit64(~v45)) + (v40 << 6);
    }

    *(void *)(v19 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v41;
    v34((char *)(*(void *)(v16 + 48) + v41 * v28), v57, v11);
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v35)( *(void *)(v16 + 56) + v41 * v31,  v58,  v59);
    ++*(void *)(v16 + 16);
    a3 = v56 - 1;
    if (__OFSUB__(v56, 1LL)) {
      break;
    }
    a4 = v48;
    char v17 = v54;
    char v18 = v55;
    if (v56 == 1) {
      return v16;
    }
  }

    swift_release(v56);
    swift_bridgeObjectRelease(a1);
    sub_100187094(v57);
    return swift_release(v56);
  }

  sub_1003A8FFC(v20, a4 & 1);
  id v22 = sub_1003AD53C(v12, (uint64_t)v13);
  if ((v21 & 1) == (v23 & 1))
  {
    char v17 = v22;
    uint64_t v24 = (void *)*a5;
    if ((v21 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_9:
    swift_bridgeObjectRelease(v13, a3, v57, v58);
    uint64_t v25 = v24[7];
    uint64_t v26 = 8 * v17;

    *(void *)(v25 + v26) = v14;
    goto LABEL_13;
  }

          __break(1u);
          return;
        }

        swift_bridgeObjectRelease(v30);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      }
    }

    uint64_t v47 = sub_100183098((uint64_t *)&unk_100650440);
    inited = swift_initStackObject(v47, v71);
    *(_OWORD *)(inited + 16) = xmmword_1004CDCA0;
    *(void *)(inited + 32) = 0x494C5F4B524F5749LL;
    uint64_t v49 = inited + 32;
    *(void *)(inited + 40) = 0xEA00000000004B4ELL;
    *(void *)(inited + 4_Block_object_dispose((const void *)(v1 - 96), 8) = v15;
    uint64_t v69 = 0x545F4E5245444F4DLL;
    uint64_t v70 = 0xEF524546534E4152LL;
    *(void *)&uint64_t v50 = swift_bridgeObjectRetain((const char *)0xEA00000000004B4ELL).n128_u64[0];
    swift_bridgeObjectRetain((const char *)inited, v50);
    v51._countAndFlagsBits = 95LL;
    v51._object = (void *)0xE100000000000000LL;
    String.append(_:)(v51);
    v52._countAndFlagsBits = 0x494C5F4B524F5749LL;
    v52._object = (void *)0xEA00000000004B4ELL;
    String.append(_:)(v52);
    swift_bridgeObjectRelease((const char *)0xEA00000000004B4ELL);
    if (v15 > 1)
    {
      v53._countAndFlagsBits = 0x4C4152554C505FLL;
      v53._object = (void *)0xE700000000000000LL;
      String.append(_:)(v53);
    }

    swift_bridgeObjectRelease((const char *)inited);
    if ((a2 & 1) != 0)
    {
      v54._countAndFlagsBits = 0x4C4154495041435FLL;
      v54._object = (void *)0xEC00000044455A49LL;
      String.append(_:)(v54);
    }

    v55._countAndFlagsBits = 0x545845545FLL;
    v55._object = (void *)0xE500000000000000LL;
    String.append(_:)(v55);
    id v56 = (const char *)v70;
    swift_setDeallocating(inited);
    id v57 = *(void *)(inited + 16);
    uint64_t v58 = sub_100183098(&qword_100646EA0);
    swift_arrayDestroy(v49, v57, v58);
    v59 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v56);
    uint64_t v61 = (id)SFLocalizedStringForKey(v59, v60);

    if (v61)
    {
      uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
      uint64_t v64 = v63;

      uint64_t v65 = sub_100183098(&qword_1006483E0);
      v66 = swift_allocObject(v65, 112LL, 7LL);
      *(_OWORD *)(v66 + 16) = xmmword_1004CD530;
      *(void *)(v66 + 56) = &type metadata for Int;
      *(void *)(v66 + 64) = &protocol witness table for Int;
      *(void *)(v66 + 32) = v15;
      *(void *)(v66 + 96) = &type metadata for String;
      *(void *)(v66 + 104) = sub_10021366C();
      *(void *)(v66 + 72) = v12;
      *(void *)(v66 + 80) = v11;
      static String.localizedStringWithFormat(_:_:)(v62, v64, v66);
      *(void *)&uint64_t v67 = swift_bridgeObjectRelease(v64).n128_u64[0];
      swift_bridgeObjectRelease((const char *)v66, v67);
      return;
    }

    __break(1u);
    goto LABEL_24;
  }

  if (qword_1006440B0 != -1) {
    swift_once(&qword_1006440B0, sub_100287848);
  }
  uint64_t v19 = type metadata accessor for Logger(0LL);
  uint64_t v20 = sub_100186DE4(v19, (uint64_t)qword_10064B5D8);
  id v21 = (os_log_s *)Logger.logObject.getter(v20);
  id v22 = static os_log_type_t.error.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "Called localizedDescription on SDAirDropContentHandleriWorkLinks without an appName",  v23,  2u);
    swift_slowDealloc(v23, -1LL, -1LL);
  }
}

    char v18 = (v24 - 1) & v24;
    id v22 = __clz(__rbit64(v24)) + (v19 << 6);
LABEL_25:
    sub_1001A4B84( *(void *)(v14 + 48) + *(void *)(v4 + 72) * v22,  (uint64_t)v12,  type metadata accessor for SDAirDropDiscoveredEndpoint);
    sub_1001A4B40((uint64_t)v12, (uint64_t)v10, type metadata accessor for SDAirDropDiscoveredEndpoint);
    if ((v20 & 1) == 0)
    {
      sub_1001A4B84((uint64_t)v10, (uint64_t)v7, type metadata accessor for SDAirDropDiscoveredEndpoint);
      uint64_t v26 = (char *)&loc_10028E270 + *((int *)qword_10028E3A8 + swift_getEnumCaseMultiPayload(v7, v32));
      __asm { BR              X9 }
    }

    uint64_t v20 = 1;
    sub_1001A4BC8((uint64_t)v10, type metadata accessor for SDAirDropDiscoveredEndpoint);
  }

  uint64_t v25 = v23 + 5;
  if (v25 < v33)
  {
    uint64_t v24 = *(void *)(v15 + 8 * v25);
    if (!v24)
    {
      while (1)
      {
        uint64_t v19 = v25 + 1;
        if (__OFADD__(v25, 1LL)) {
          break;
        }
        if (v19 >= v33) {
          goto LABEL_27;
        }
        uint64_t v24 = *(void *)(v15 + 8 * v19);
        ++v25;
        if (v24) {
          goto LABEL_24;
        }
      }

  id v21 = (const char *)_swiftEmptyArrayStorage;
LABEL_25:
  id v22 = Array._bridgeToObjectiveC()().super.isa;
  uint64_t v23 = swift_bridgeObjectRelease(v15);
  uint64_t v24 = (id)SFCombinedHashFromArray(v22, v23);

  uint64_t v25 = Array._bridgeToObjectiveC()().super.isa;
  uint64_t v26 = swift_bridgeObjectRelease(v21);
  uint64_t v27 = (id)SFCombinedHashFromArray(v25, v26);

  uint64_t v28 = [a1 contactsForEmailHash:v24 phoneHash:v27];
  if (v28)
  {
    uint64_t v29 = sub_100183168(0LL, (unint64_t *)&qword_100646C30, &OBJC_CLASS___CNContact_ptr);
    uint64_t v30 = sub_1002E28C8();
    uint64_t v31 = (const char *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v28, v29, v30);

    unsigned int v14 = sub_1002E0A74((uint64_t)v31, a1);
    swift_bridgeObjectRelease(v31);
  }

  else
  {

    return 0LL;
  }

  return v14;
}

    char v18 = (v24 - 1) & v24;
    id v22 = __clz(__rbit64(v24)) + (v19 << 6);
LABEL_25:
    sub_10019140C(*(void *)(v14 + 48) + *(void *)(v4 + 72) * v22, (uint64_t)v12);
    sub_1001A4B40((uint64_t)v12, (uint64_t)v10, type metadata accessor for SDAirDropDiscoveredEndpoint);
    if ((v20 & 1) == 0)
    {
      sub_10019140C((uint64_t)v10, (uint64_t)v7);
      uint64_t v26 = (char *)&loc_100301804 + dword_10030192C[swift_getEnumCaseMultiPayload(v7, v32)];
      __asm { BR              X9 }
    }

    uint64_t v20 = 1;
    sub_1001A4BC8((uint64_t)v10, type metadata accessor for SDAirDropDiscoveredEndpoint);
  }

  uint64_t v25 = v23 + 5;
  if (v25 < v33)
  {
    uint64_t v24 = *(void *)(v15 + 8 * v25);
    if (!v24)
    {
      while (1)
      {
        uint64_t v19 = v25 + 1;
        if (__OFADD__(v25, 1LL)) {
          break;
        }
        if (v19 >= v33) {
          goto LABEL_27;
        }
        uint64_t v24 = *(void *)(v15 + 8 * v19);
        ++v25;
        if (v24) {
          goto LABEL_24;
        }
      }

    int v9 = (v13 - 1) & v13;
LABEL_5:
    Task.cancel()();
  }

  unsigned int v14 = v12 + 5;
  if (v14 >= v10)
  {
LABEL_25:
    swift_release(v5);
    swift_bridgeObjectRelease(v5);
    uint64_t v15 = *v4;
    *int v4 = &_swiftEmptySetSingleton;
    swift_bridgeObjectRelease(v15);
    return;
  }

  char v13 = *(void *)(v6 + 8 * v14);
  if (v13)
  {
    uint64_t v11 = v14;
    goto LABEL_24;
  }

  while (1)
  {
    uint64_t v11 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v11 >= v10) {
      goto LABEL_25;
    }
    char v13 = *(void *)(v6 + 8 * v11);
    ++v14;
    if (v13) {
      goto LABEL_24;
    }
  }

    __break(1u);
    return;
  }

  sub_1001A4BC8((uint64_t)v12, type metadata accessor for SDAirDropDiscoveredEndpoint);
  sub_1001A4BC8((uint64_t)v15, type metadata accessor for SDAirDropDiscoveredEndpoint);
  if ((v22 & 1) == 0) {
    return;
  }
LABEL_11:
  if (qword_100644180 != -1) {
    swift_once(&qword_100644180, sub_1003187D4);
  }
  __int16 v43 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v43, (uint64_t)qword_10064E8A0);
  uint64_t v44 = sub_1001A4B84(a1, (uint64_t)v7, type metadata accessor for SDAirDropDiscoveredEndpoint);
  uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
  uint64_t v46 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v47 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v48 = swift_slowAlloc(32LL, -1LL);
    v65[0] = v48;
    *(_DWORD *)uint64_t v47 = 136315138;
    sub_10020E23C();
    uint64_t v50 = (const char *)v49;
    v66 = sub_10018CDB4(v51, v49, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v47 + 4, v47 + 12);
    swift_bridgeObjectRelease(v50);
    sub_1001A4BC8((uint64_t)v7, type metadata accessor for SDAirDropDiscoveredEndpoint);
    _os_log_impl( (void *)&_mh_execute_header,  v45,  v46,  "Endpoint already exists in runner endpoints, ignoring %s",  v47,  0xCu);
    swift_arrayDestroy(v48, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1LL, -1LL);
    swift_slowDealloc(v47, -1LL, -1LL);
  }

  else
  {
    sub_1001A4BC8((uint64_t)v7, type metadata accessor for SDAirDropDiscoveredEndpoint);
  }
}

    unint64_t v6 = (v16 - 1) & v16;
LABEL_5:
    sub_10020A668();
    unsigned int v10 = v9;
    int v12 = v11;
    swift_bridgeObjectRetain((const char *)0xE000000000000000LL);
    v13._countAndFlagsBits = v10;
    v13._object = v12;
    String.append(_:)(v13);
    *(void *)&unsigned int v14 = swift_bridgeObjectRelease((const char *)0xE000000000000000LL).n128_u64[0];
    swift_bridgeObjectRelease((const char *)v12, v14);
  }

  char v17 = v15 + 5;
  if (v17 >= v7)
  {
LABEL_25:
    swift_release(v2);
    *(void *)&char v18 = swift_bridgeObjectRelease(v2).n128_u64[0];
    swift_bridgeObjectRetain(v20, v18);
    v19._countAndFlagsBits = 0LL;
    v19._object = (void *)0xE000000000000000LL;
    String.append(_:)(v19);
    swift_bridgeObjectRelease((const char *)0xE000000000000000LL);
    return;
  }

  unint64_t v16 = *(void *)(v3 + 8 * v17);
  if (v16)
  {
    uint64_t v8 = v17;
    goto LABEL_24;
  }

  while (1)
  {
    uint64_t v8 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v8 >= v7) {
      goto LABEL_25;
    }
    unint64_t v16 = *(void *)(v3 + 8 * v8);
    ++v17;
    if (v16) {
      goto LABEL_24;
    }
  }

    uint64_t v11 = (v21 - 1) & v21;
    char v18 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_25:
    uint64_t v23 = *(void **)(*(void *)(v5 + 48) + 8 * v18);
    uint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v18);
    if ((a2 & 1) != 0)
    {
      sub_100186D8C(v24, v39);
    }

    else
    {
      sub_100187058((uint64_t)v24, (uint64_t)v39);
      uint64_t v25 = v23;
    }

    Hasher.init(_seed:)(v38);
    type metadata accessor for CFString(0LL);
    uint64_t v27 = v26;
    uint64_t v28 = sub_100183F14( &qword_100645530,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1004CCC0C);
    _CFObject.hash(into:)(v38, v27, v28);
    uint64_t result = Hasher._finalize()();
    uint64_t v29 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v30 = result & ~v29;
    uint64_t v31 = v30 >> 6;
    if (((-1LL << v30) & ~*(void *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1LL << v30) & ~*(void *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v32 = 0;
      uint64_t v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        uint64_t v34 = v31 == v33;
        if (v31 == v33) {
          uint64_t v31 = 0LL;
        }
        v32 |= v34;
        unint64_t v35 = *(void *)(v13 + 8 * v31);
      }

      while (v35 == -1);
      unint64_t v16 = __clz(__rbit64(~v35)) + (v31 << 6);
    }

    *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
    *(void *)(*(void *)(v8 + 48) + 8 * v16) = v23;
    uint64_t result = (uint64_t)sub_100186D8C(v39, (_OWORD *)(*(void *)(v8 + 56) + 32 * v16));
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v20 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  id v36 = 1LL << *(_BYTE *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v20, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v20 = -1LL << v36;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_44:
  uint64_t result = swift_release(v5);
  void *v3 = v8;
  return result;
}

    uint64_t v11 = (v24 - 1) & v24;
    id v21 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_25:
    uint64_t v26 = *(void *)(v5 + 48) + 40 * v21;
    if ((a2 & 1) != 0)
    {
      uint64_t v27 = *(_OWORD *)v26;
      uint64_t v28 = *(_OWORD *)(v26 + 16);
      __int16 v41 = *(void *)(v26 + 32);
      uint64_t v39 = v27;
      uint64_t v40 = v28;
      sub_100186D8C((_OWORD *)(*(void *)(v5 + 56) + 32 * v21), v38);
    }

    else
    {
      sub_1001CE1D0(v26, (uint64_t)&v39);
      sub_100187058(*(void *)(v5 + 56) + 32 * v21, (uint64_t)v38);
    }

    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v8 + 40));
    uint64_t v29 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v30 = result & ~v29;
    uint64_t v31 = v30 >> 6;
    if (((-1LL << v30) & ~*(void *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1LL << v30) & ~*(void *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v32 = 0;
      uint64_t v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        uint64_t v34 = v31 == v33;
        if (v31 == v33) {
          uint64_t v31 = 0LL;
        }
        v32 |= v34;
        unint64_t v35 = *(void *)(v13 + 8 * v31);
      }

      while (v35 == -1);
      unint64_t v16 = __clz(__rbit64(~v35)) + (v31 << 6);
    }

    *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
    char v17 = *(void *)(v8 + 48) + 40 * v16;
    char v18 = v39;
    uint64_t v19 = v40;
    *(void *)(v17 + 32) = v41;
    *(_OWORD *)char v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    uint64_t result = (uint64_t)sub_100186D8C(v38, (_OWORD *)(*(void *)(v8 + 56) + 32 * v16));
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  id v36 = 1LL << *(_BYTE *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v36;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_44:
  uint64_t result = swift_release(v5);
  void *v3 = v8;
  return result;
}

    uint64_t v11 = (v21 - 1) & v21;
    char v18 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_25:
    uint64_t v23 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
    uint64_t v25 = *v23;
    uint64_t v24 = v23[1];
    uint64_t v26 = (__int128 *)(*(void *)(v5 + 56) + 48 * v18);
    if ((v38 & 1) != 0)
    {
      sub_1001CCE4C(v26, v40);
    }

    else
    {
      sub_1002499DC((uint64_t)v26, (uint64_t)v40);
      swift_bridgeObjectRetain(v24);
    }

    Hasher.init(_seed:)(v39);
    String.hash(into:)(v39, v25, v24);
    uint64_t result = Hasher._finalize()();
    uint64_t v27 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v28 = result & ~v27;
    uint64_t v29 = v28 >> 6;
    if (((-1LL << v28) & ~*(void *)(v12 + 8 * (v28 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v30 = 0;
      uint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        uint64_t v32 = v29 == v31;
        if (v29 == v31) {
          uint64_t v29 = 0LL;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v12 + 8 * v29);
      }

      while (v33 == -1);
      uint64_t v15 = __clz(__rbit64(~v33)) + (v29 << 6);
    }

    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    unint64_t v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
    *unint64_t v16 = v25;
    v16[1] = v24;
    uint64_t result = (uint64_t)sub_1001CCE4C(v40, (_OWORD *)(*(void *)(v8 + 56) + 48 * v15));
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v35;
  uint64_t v20 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_44;
  }
LABEL_40:
  uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v20, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v20 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_44:
  uint64_t result = swift_release(v5);
  void *v3 = v8;
  return result;
}

    uint64_t v19 = (v29 - 1) & v29;
    uint64_t v24 = __clz(__rbit64(v29)) + (v22 << 6);
LABEL_9:
    uint64_t v25 = *(void *)(v10 + 72);
    sub_1001A4B40(*(void *)(v13 + 48) + v25 * v24, (uint64_t)v12, a2);
    Hasher.init(_seed:)(v37);
    v36(v37);
    uint64_t v26 = Hasher._finalize()();
    uint64_t v27 = _HashTable.nextHole(atOrAfter:)( v26 & ~(-1LL << *(_BYTE *)(v15 + 32)),  v15 + 56,  ~(-1LL << *(_BYTE *)(v15 + 32)));
    *(void *)(v20 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v27;
    uint64_t result = sub_1001A4B40((uint64_t)v12, *(void *)(v15 + 48) + v27 * v25, a2);
    ++*(void *)(v15 + 16);
  }

  uint64_t v30 = v28 + 3;
  if (v30 < v35)
  {
    uint64_t v29 = v34[v30];
    if (!v29)
    {
      while (1)
      {
        id v22 = v30 + 1;
        if (__OFADD__(v30, 1LL)) {
          goto LABEL_31;
        }
        if (v22 >= v35) {
          goto LABEL_25;
        }
        uint64_t v29 = v34[v22];
        ++v30;
        if (v29) {
          goto LABEL_24;
        }
      }
    }

    id v22 = v30;
    goto LABEL_24;
  }

    uint64_t v19 = (v29 - 1) & v29;
    uint64_t v24 = __clz(__rbit64(v29)) + (v22 << 6);
LABEL_9:
    uint64_t v25 = *(void *)(v10 + 72);
    sub_1001A4B84(*(void *)(v13 + 48) + v25 * v24, (uint64_t)v12, a2);
    Hasher.init(_seed:)(v36);
    v35(v36);
    uint64_t v26 = Hasher._finalize()();
    uint64_t v27 = _HashTable.nextHole(atOrAfter:)( v26 & ~(-1LL << *(_BYTE *)(v15 + 32)),  v15 + 56,  ~(-1LL << *(_BYTE *)(v15 + 32)));
    *(void *)(v20 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v27;
    uint64_t result = sub_1001A4B40((uint64_t)v12, *(void *)(v15 + 48) + v27 * v25, a2);
    ++*(void *)(v15 + 16);
  }

  uint64_t v30 = v28 + 3;
  if (v30 >= v34)
  {
LABEL_25:
    uint64_t result = swift_release_n(v13, 2LL);
    uint64_t v7 = v32;
    goto LABEL_27;
  }

  uint64_t v29 = *(void *)(v33 + 8 * v30);
  if (v29)
  {
    id v22 = v30;
    goto LABEL_24;
  }

  while (1)
  {
    id v22 = v30 + 1;
    if (__OFADD__(v30, 1LL)) {
      break;
    }
    if (v22 >= v34) {
      goto LABEL_25;
    }
    uint64_t v29 = *(void *)(v33 + 8 * v22);
    ++v30;
    if (v29) {
      goto LABEL_24;
    }
  }

  if (v0 < 0) {
    unsigned int v14 = v0;
  }
  else {
    unsigned int v14 = v0 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain((const char *)v0);
  if (!_CocoaArrayWrapper.endIndex.getter(v14)) {
    goto LABEL_28;
  }
LABEL_18:
  if ((v0 & 0xC000000000000001LL) != 0)
  {
    unint64_t v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v0);
    swift_bridgeObjectRelease((const char *)v0);
    os_log_t v0 = *(unsigned int *)(v16 + OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_pid);
    swift_unknownObjectRelease(v16);
    goto LABEL_29;
  }

  if (*(void *)((v0 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    uint64_t v11 = (char *)*(id *)(v0 + 32);
    swift_bridgeObjectRelease((const char *)v0);
    os_log_t v0 = *(unsigned int *)&v11[OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_pid];

    goto LABEL_29;
  }

  __break(1u);
}

  if (v0 < 0) {
    unsigned int v14 = v0;
  }
  else {
    unsigned int v14 = v0 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain((const char *)v0);
  if (!_CocoaArrayWrapper.endIndex.getter(v14)) {
    goto LABEL_28;
  }
LABEL_18:
  if ((v0 & 0xC000000000000001LL) != 0)
  {
    unint64_t v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v0);
    swift_bridgeObjectRelease((const char *)v0);
    os_log_t v0 = *(unsigned int *)(v16 + OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_pid);
    swift_unknownObjectRelease(v16);
    goto LABEL_29;
  }

  if (*(void *)((v0 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    uint64_t v11 = (char *)*(id *)(v0 + 32);
    swift_bridgeObjectRelease((const char *)v0);
    os_log_t v0 = *(unsigned int *)&v11[OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_pid];

    goto LABEL_29;
  }

  __break(1u);
}

  if (qword_100644318 != -1) {
    swift_once(&qword_100644318, sub_1003F0BB4);
  }
  unint64_t v35 = type metadata accessor for Logger(0LL);
  id v36 = sub_100186DE4(v35, (uint64_t)qword_100653550);
  id v37 = (os_log_s *)Logger.logObject.getter(v36);
  id v38 = static os_log_type_t.error.getter(v37);
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Received corrupt wrapper", v39, 2u);
    swift_slowDealloc(v39, -1LL, -1LL);
  }
}

    swift_once(&qword_100644408, sub_100458568);
    goto LABEL_7;
  }

  uint64_t v23 = v22;
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  uint64_t v26 = v25;

  UUID.init(uuidString:)(v24, v26);
  uint64_t v27 = swift_bridgeObjectRelease(v26);
  uint64_t v28 = v61;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v11 + 48))(v10, 1LL, v61, v27) == 1)
  {
    sub_100187100((uint64_t)v10, &qword_10064DA60);
    goto LABEL_6;
  }

  v42 = v13;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, v28);
  __int16 v43 = sub_1003500F4([v14 type]);
  if ((v44 & 1) != 0)
  {
    if (qword_100644408 != -1) {
      swift_once(&qword_100644408, sub_100458568);
    }
    uint64_t v53 = type metadata accessor for Logger(0LL);
    v54 = sub_100186DE4(v53, (uint64_t)qword_100656748);
    v55 = (os_log_s *)Logger.logObject.getter(v54);
    id v56 = static os_log_type_t.error.getter(v55);
    if (os_log_type_enabled(v55, v56))
    {
      id v57 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Message does not have authentication type", v57, 2u);
      swift_slowDealloc(v57, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v61);
  }

  else
  {
    uint64_t v45 = v43;
    uint64_t v46 = (v43 < 0xF) & (0x658Eu >> v43);
    uint64_t v47 = [objc_allocWithZone(SFAuthenticationOptions) init];
    v63 = sub_100183168(0LL, &qword_1006569F0, &OBJC_CLASS___SFAuthenticationOptions_ptr);
    uint64_t v64 = &off_1005DC590;
    *(void *)&uint64_t v62 = v47;
    sub_100462B08((uint64_t)v13, v59, v45, v46, (uint64_t)&v62, (uint64_t)v65);
    sub_100187100((uint64_t)&v62, &qword_1006569F8);
    uint64_t v48 = type metadata accessor for TaskPriority(0LL);
    uint64_t v49 = (uint64_t)v60;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56LL))(v60, 1LL, 1LL, v48);
    sub_10019A6C4((uint64_t)v65, (uint64_t)&v62);
    uint64_t v50 = (void *)swift_allocObject(&unk_1005E32F0, 80LL, 7LL);
    v50[2] = 0LL;
    v50[3] = 0LL;
    sub_1001CE0D0(&v62, (uint64_t)(v50 + 4));
    v50[9] = v14;
    uint64_t v51 = v14;
    uint64_t v52 = sub_1001B37E8(v49, (uint64_t)&unk_100656B10, (uint64_t)v50);
    swift_release(v52);

    sub_10018709C(v65);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v28);
  }

      char v13 = (v19 - 1) & v19;
      char v17 = __clz(__rbit64(v19)) + (v14 << 6);
    }

    id v21 = *(void *)(v33 + 72);
    sub_1001A4B84( *(void *)(a4 + 48) + v21 * v17,  (uint64_t)v10,  type metadata accessor for SDAirDropDiscoveredEndpoint);
    Hasher.init(_seed:)(v34);
    sub_10020DC2C();
    uint64_t result = Hasher._finalize()();
    id v22 = -1LL << *(_BYTE *)(v11 + 32);
    uint64_t v23 = result & ~v22;
    uint64_t v24 = v23 >> 6;
    if (((-1LL << v23) & ~*(void *)(v15 + 8 * (v23 >> 6))) != 0)
    {
      uint64_t v25 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v15 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v28 = v24 == v27;
        if (v24 == v27) {
          uint64_t v24 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v15 + 8 * v24);
      }

      while (v29 == -1);
      uint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
    }

    *(void *)(v15 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v25;
    uint64_t result = sub_1001A4B40( (uint64_t)v10,  *(void *)(v11 + 48) + v25 * v21,  type metadata accessor for SDAirDropDiscoveredEndpoint);
    ++*(void *)(v11 + 16);
    if (__OFSUB__(a3--, 1LL)) {
      break;
    }
    if (!a3) {
      goto LABEL_37;
    }
  }

void sub_100023B70(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100023C64;
  block[3] = &unk_1005CB538;
  id v14 = v5;
  id v7 = *(id *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  int v9 = *(void **)(a1 + 48);
  id v15 = v7;
  uint64_t v16 = v8;
  id v17 = v9;
  char v21 = *(_BYTE *)(a1 + 66);
  id v10 = *(id *)(a1 + 56);
  __int16 v20 = *(_WORD *)(a1 + 64);
  id v18 = v6;
  id v19 = v10;
  id v11 = v6;
  id v12 = v5;
  dispatch_async(&_dispatch_main_q, block);
}

void sub_100023C64(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[SDActivityEncryptionManager sharedEncryptionManager]( &OBJC_CLASS___SDActivityEncryptionManager,  "sharedEncryptionManager"));
    id v3 = [v2 newDecryptionKeyFromDataRepresentation:*(void *)(a1 + 32)];

    if (v3)
    {
      if ([v3 isEqual:*(void *)(a1 + 40)])
      {
        unsigned int v4 = *(unsigned __int16 *)(a1 + 80);
        unsigned int v5 = [*(id *)(a1 + 48) lastCounter];
        uint64_t v6 = handoff_log();
        id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
        BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
        if (v4 <= v5)
        {
          if (v8)
          {
            int v15 = *(unsigned __int16 *)(a1 + 80);
            unsigned int v16 = [*(id *)(a1 + 48) lastCounter];
            id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 24) uniqueIDOverride]);
            uint64_t v18 = SFHexStringForData(*(void *)(a1 + 56));
            id v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
            v20[0] = 67109890;
            v20[1] = v15;
            __int16 v21 = 1024;
            unsigned int v22 = v16;
            __int16 v23 = 2112;
            uint64_t v24 = v17;
            __int16 v25 = 2112;
            uint64_t v26 = v19;
            _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "New counter %d is not greater than previous %d from %@ with rawAdvertisementData %@. New key is same. Replay!",  (uint8_t *)v20,  0x22u);
          }
        }

        else if (v8)
        {
          sub_1000243C8(a1 + 48, a1);
        }
      }

      else
      {
        uint64_t v11 = *(void *)(a1 + 48);
        id v12 = *(void **)(v11 + 48);
        *(void *)(v11 + 4_Block_object_dispose((const void *)(v1 - 96), 8) = 0LL;

        char v13 = (void *)objc_claimAutoreleasedReturnValue( +[SDActivityEncryptionManager sharedEncryptionManager]( &OBJC_CLASS___SDActivityEncryptionManager,  "sharedEncryptionManager"));
        id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 24) uniqueIDOverride]);
        [v13 setDecryptionKey:v3 forDeviceIdentifier:v14];

        [*(id *)(a1 + 48) updateWithRawAdvertisementData:*(void *)(a1 + 56) receivedViaScanning:*(unsigned __int8 *)(a1 + 82) isReplay:1 newAdvertisementHandler:*(void *)(a1 + 72)];
      }
    }
  }

  else
  {
    uint64_t v9 = handoff_log();
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10002432C(a1, v10);
    }

    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

void sub_1000241C0( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

void sub_1000241FC(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 24) uniqueIDOverride]);
  uint64_t v4 = SFHexStringForData(a2);
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_1000241D4();
  sub_1000241C0( (void *)&_mh_execute_header,  v6,  v7,  "Failed to decrypt advertisement with new key from %@ with rawAdvertisementData %@. Discarding advertisement",  v8,  v9,  v10,  v11,  v12);

  sub_1000241EC();
}

void sub_100024294(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 24) uniqueIDOverride]);
  uint64_t v4 = SFHexStringForData(a2);
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_1000241D4();
  sub_1000241C0( (void *)&_mh_execute_header,  v6,  v7,  "Failed to decrypt advertisement from %@ with rawAdvertisementData %@. Requesting new key",  v8,  v9,  v10,  v11,  v12);

  sub_1000241EC();
}

void sub_10002432C(uint64_t a1, os_log_s *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 24) uniqueIDOverride]);
  int v4 = 138412290;
  unsigned int v5 = v3;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "Failed to retrieve new key from %@",  (uint8_t *)&v4,  0xCu);
}

void sub_1000243C8(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)a1 + 24) uniqueIDOverride]);
  uint64_t v4 = SFHexStringForData(*(void *)(a2 + 56));
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_1000241D4();
  sub_1000241C0( (void *)&_mh_execute_header,  v6,  v7,  "Failed to decrypt advertisement from %@ with rawAdvertisementData %@. New key is same. Replay?",  v8,  v9,  v10,  v11,  v12);

  sub_1000241EC();
}

void sub_1000244A4(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___SDClassroomBrowser);
  uint64_t v2 = (void *)qword_100656CF8;
  qword_100656CF8 = (uint64_t)v1;
}

id sub_1000246C4(uint64_t a1)
{
  return [*(id *)(a1 + 32) start];
}

void sub_100024B90(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 80LL));
  [WeakRetained bonjourPublisher:*(void *)(a1 + 32) propertiesDidChange:*(void *)(*(void *)(a1 + 32) + 64)];
}

id sub_100024F04(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 publishCallBack:a2];
}

id sub_100024F68(uint64_t a1)
{
  return [*(id *)(a1 + 32) publish];
}

void sub_100025160(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_10002516C( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000251D0()
{
}

void sub_100025240( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000252A8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000CF78( (void *)&_mh_execute_header,  a1,  a3,  "SDAirDropPublisher: dataFromTXTRecordDictionary returned nil",  a5,  a6,  a7,  a8,  0);
}

void sub_1000252DC( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000CF78( (void *)&_mh_execute_header,  a1,  a3,  "SDAirDropPublisher: copyAirDropID returned NULL",  a5,  a6,  a7,  a8,  0);
}

void sub_100025310()
{
  sub_100025160( (void *)&_mh_execute_header,  v0,  v1,  "SDAirDropPublisher: CFNetServiceRegisterWithOptions returned (%ld, %d)",  v2);
  sub_10001480C();
}

id sub_10002570C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onqueue_start");
}

id sub_100025BE8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onqueue_cancel");
}

id sub_100025D4C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onqueue_updateForCloudPairing");
}

LABEL_23:
  char v13 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingSession delegate](self, "delegate"));
  id v14 = objc_opt_respondsToSelector(v13, "session:didCompleteWithError:");

  if ((v14 & 1) != 0)
  {
    int v15 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingSession delegate](self, "delegate"));
    [v15 session:self didCompleteWithError:v4];
  }

  unsigned int v16 = objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingLockSession setupError](self, "setupError"));
  id v17 = (void *)v16;
  if (v16) {
    uint64_t v18 = (void *)v16;
  }
  else {
    uint64_t v18 = v4;
  }
  id v19 = v18;

  if ([v4 code] == (id)150)
  {
    __int16 v20 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockTransport sharedTransport](&OBJC_CLASS___SDAutoUnlockTransport, "sharedTransport"));
    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v20 watchExistedInUnlockList]);
    unsigned int v22 = [v21 BOOLValue];

    if (v22) {
      __int16 v23 = objc_claimAutoreleasedReturnValue([v20 lastSeenWatchDate]);
    }
    else {
      __int16 v23 = 0LL;
    }
    v54 = (void *)v23;

    uint64_t v53 = v22;
  }

  else
  {
    v54 = 0LL;
    uint64_t v53 = 1;
  }

  uint64_t v52 = v4 == 0LL;
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockAKSManager sharedManager](&OBJC_CLASS___SDAutoUnlockAKSManager, "sharedManager"));
  __int16 v25 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingSession deviceID](self, "deviceID"));
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingLockSession remoteLTKHash](self, "remoteLTKHash"));
  uint64_t v51 = [v24 ltkSyncStatusForDeviceID:v25 hash:v26 modern:0] != 0;

  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockAKSManager sharedManager](&OBJC_CLASS___SDAutoUnlockAKSManager, "sharedManager"));
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingSession deviceID](self, "deviceID"));
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingLockSession remoteLTKHash](self, "remoteLTKHash"));
  uint64_t v50 = [v27 ltkSyncStatusForDeviceID:v28 hash:v29 modern:1] != 0;

  uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingLockSession keyDeviceModel](self, "keyDeviceModel"));
  uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingLockSession companionDeviceModel](self, "companionDeviceModel"));
  -[SDAutoUnlockPairingLockSession keyExchangeInterval](self, "keyExchangeInterval");
  uint64_t v31 = v30;
  -[SDAutoUnlockPairingLockSession tokenExchangeInterval](self, "tokenExchangeInterval");
  uint64_t v33 = v32;
  uint64_t v47 = -[SDAutoUnlockPairingLockSession keyDeviceLocked](self, "keyDeviceLocked");
  uint64_t v46 = -[SDAutoUnlockPairingLockSession errorType](self, "errorType");
  uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v19 domain]);
  uint64_t v44 = [v19 code];
  __int16 v41 = -[SDAutoUnlockPairingLockSession upsellDevice](self, "upsellDevice");
  uint64_t v40 = -[SDAutoUnlockPairingLockSession responseTimeout](self, "responseTimeout");
  LOBYTE(v27) = -[SDAutoUnlockPairingLockSession responseTimeoutFromServer](self, "responseTimeoutFromServer") != 0;
  uint64_t v34 = -[SDAutoUnlockPairingLockSession messageTimeout](self, "messageTimeout");
  unint64_t v35 = -[SDAutoUnlockPairingLockSession messageTimeoutFromServer](self, "messageTimeoutFromServer") != 0;
  __int16 v43 = v19;
  id v36 = -[SDAutoUnlockPairingLockSession setupRetryDevice](self, "setupRetryDevice");
  LODWORD(v29) = -[SDAutoUnlockPairingLockSession watchOldLTKSyncStatus](self, "watchOldLTKSyncStatus");
  v42 = v4;
  id v37 = -[SDAutoUnlockPairingLockSession watchNewLTKSyncStatus](self, "watchNewLTKSyncStatus");
  id v38 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingLockSession watchBuildVersion](self, "watchBuildVersion"));
  uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockPairingLockSession watchOSVersion](self, "watchOSVersion"));
  sub_100089774( v49,  v48,  v47,  v52,  v46,  v45,  v44,  v53,  v31,  v33,  v54,  v41,  v40,  v27,  v34,  v35,  v36,  v51,  v50,  v29,  v37,  v38,  v39,  -[SDAutoUnlockPairingLockSession receivedSetupACK](self, "receivedSetupACK"),  -[SDAutoUnlockPairingLockSession receivedTokenACK](self, "receivedTokenACK"));
}

  return v8;
}

    unsigned int v16 = 0;
    goto LABEL_24;
  }

  uint64_t v28 = 0;
  Int64Ranged = CFDictionaryGetInt64Ranged(v9, @"shareMode", 0xFFFFFFFF80000000LL, 0x7FFFFFFFLL, &v28);
  uint8_t v12 = v28;
  if (v28)
  {
    if (dword_1006417A0 <= 60)
    {
      if (dword_1006417A0 == -1)
      {
        uint8_t v12 = v28;
      }

      LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _shouldOfferPassword:]",  60LL,  "### WPS: Get network share mode failed: %#m\n",  v12);
    }

    goto LABEL_23;
  }

  if (Int64Ranged == 3)
  {
    char v13 = SFShareablePasswordForSSID(v4);
    id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    int v15 = v14 != 0LL;

    goto LABEL_10;
  }

  self->_numBlocksProcessed = 0LL;
  self->_totalBytesSent = 0;
  id v19 = 7LL;
  self->_totalNetworkDelay = 0.0;
LABEL_24:
  *(double *)&(&self->super.isa)[v19] = lastCompressionRatio;
}
      }

      char v13 = [obj countByEnumeratingWithState:&v38 objects:v43 count:16];
    }

    while (v13);
  }

  if (dword_100642CD8 <= 30 && (dword_100642CD8 != -1 || _LogCategory_Initialize(&dword_100642CD8, 30LL))) {
    LogPrintF( &dword_100642CD8,  "-[SDXPCConnection _getPeopleSuggestions:completion:]",  30,  "GetPeopleSuggestions from CoreDuet finish: max %d, suggestions %d, results %d\n",  v7,  [obj count],  -[NSMutableSet count](v11, "count"));
  }
  if (-[NSMutableSet count](v11, "count"))
  {
    unsigned int v22 = v29;
    if (dword_100642CD8 <= 30
      && (dword_100642CD8 != -1 || _LogCategory_Initialize(&dword_100642CD8, 30LL)))
    {
      LogPrintF( &dword_100642CD8,  "-[SDXPCConnection _getPeopleSuggestions:completion:]",  30LL,  "PeopleSuggestions: narrowing CD suggestions based on 1000 recent interactions");
    }

    __int16 v23 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v11, "allObjects"));
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472LL;
    v32[2] = sub_1000DD73C;
    v32[3] = &unk_1005CDD88;
    uint64_t v33 = v28;
    -[SDXPCConnection _getInteractionsFromDBPerPeopleSuggestion:completion:]( self,  "_getInteractionsFromDBPerPeopleSuggestion:completion:",  v23,  v32);
  }

  else
  {
    unsigned int v22 = v29;
    if (dword_100642CD8 <= 90
      && (dword_100642CD8 != -1 || _LogCategory_Initialize(&dword_100642CD8, 90LL)))
    {
      LogPrintF( &dword_100642CD8,  "-[SDXPCConnection _getPeopleSuggestions:completion:]",  90LL,  "### GetPeopleSuggestions from CoreDuet had no results, skipping interaction DB query + exiting early");
    }

    (*((void (**)(id, void *, void))v28 + 2))(v28, &__NSArray0__struct, 0LL);
  }
}

    id v19 = 0LL;
    if (!v11)
    {
      unsigned int v16 = 0LL;
      id v17 = 0LL;
      uint64_t v18 = 0LL;
      goto LABEL_20;
    }

    __int16 v21 = -6705;
    id v17 = 0LL;
    uint64_t v18 = 0LL;
LABEL_12:
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472LL;
    v27[2] = sub_10010ACE0;
    v27[3] = &unk_1005CE5C8;
    uint64_t v28 = v11;
    uint64_t v29 = v21;
    dispatch_async((dispatch_queue_t)v12, v27);

    int v15 = 0LL;
    unsigned int v16 = 0LL;
    goto LABEL_19;
  }

  uint8_t v12 = (OS_dispatch_queue *)v10;
  if (!v9) {
    goto LABEL_23;
  }
LABEL_6:
  if (!v11)
  {
    id v19 = 0LL;
    unsigned int v16 = 0LL;
    id v17 = 0LL;
    uint64_t v18 = 0LL;
    goto LABEL_20;
  }

  char v13 = objc_claimAutoreleasedReturnValue( -[SDAppleIDDatabaseManager cachedPersonInfoWithEmailOrPhone:]( self->_dbManager,  "cachedPersonInfoWithEmailOrPhone:",  v9));
  if (!v13)
  {
    id v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    if (v19)
    {
      uint64_t v39 = v9;
      __int16 v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v39, 1LL));
      unint64_t v35 = 0LL;
      __int16 v21 = sub_100171AD0(v20, 0, &v35);
      uint64_t v18 = v35;

      if (v21)
      {
        id v17 = 0LL;
      }

      else
      {
        if (v18 && [v18 count] == (id)1)
        {
          unsigned int v22 = [v9 containsString:@"@"];
          __int16 v23 = @"phones";
          if (v22) {
            __int16 v23 = @"emails";
          }
          id v17 = v23;
          [v19 setObject:v18 forKeyedSubscript:v17];
          uint64_t v24 = -[SDAppleIDServerTask initWithType:appleID:info:]( objc_alloc(&OBJC_CLASS___SDAppleIDServerTask),  "initWithType:appleID:info:",  3LL,  self->_appleID,  v19);
          if (v24)
          {
            __int16 v25 = v24;
            -[SDAppleIDServerTask setDispatchQueue:](v24, "setDispatchQueue:", v12);
            v30[0] = _NSConcreteStackBlock;
            v30[1] = 3221225472LL;
            v30[2] = sub_10010AC50;
            v30[3] = &unk_1005CE6B8;
            v30[4] = self;
            unsigned int v16 = v25;
            uint64_t v31 = v16;
            uint64_t v32 = v9;
            uint64_t v33 = v12;
            uint64_t v34 = v11;
            -[SDAppleIDServerTask setResponseHandler:](v16, "setResponseHandler:", v30);

            -[NSMutableArray addObject:](self->_findPersonRequests, "addObject:", v16);
            -[SDAppleIDServerTask activate](v16, "activate");
            int v15 = 0LL;
            goto LABEL_19;
          }
        }

        else
        {
          id v17 = 0LL;
        }

        __int16 v21 = -6762;
      }
    }

    else
    {
      id v17 = 0LL;
      uint64_t v18 = 0LL;
      __int16 v21 = -6728;
    }

    goto LABEL_12;
  }

  id v14 = (void *)v13;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10010AC3C;
  block[3] = &unk_1005CC1B0;
  id v38 = v11;
  int v15 = v14;
  id v37 = v15;
  dispatch_async((dispatch_queue_t)v12, block);

  unsigned int v16 = 0LL;
  id v17 = 0LL;
  uint64_t v18 = 0LL;
  id v19 = v38;
LABEL_19:

  id v19 = v15;
LABEL_20:
}

  return v8;
}
}
}

  v78 = v2;
  uint64_t v31 = (uint64_t *)(v2
                  + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAirDropReceiveConnectionManager_nearFieldServersByTransactionID);
  swift_beginAccess( v3 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAirDropReceiveConnectionManager_nearFieldServersByTransactionID,  &v83,  1LL,  0LL);
  unsigned int v5 = *v31;
  uint64_t v32 = *(void *)(*v31 + 64);
  v79 = *v31 + 64;
  uint64_t v33 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v34 = -1LL;
  if (v33 < 64) {
    uint64_t v34 = ~(-1LL << v33);
  }
  unint64_t v35 = v34 & v32;
  id v3 = (unint64_t)(v33 + 63) >> 6;
  uint64_t v76 = v3 - 1;
  uint64_t v77 = v31;
  swift_bridgeObjectRetain(v5);
  uint64_t v4 = 0LL;
  if (!v35) {
    goto LABEL_30;
  }
LABEL_28:
  __int16 v41 = __clz(__rbit64(v35));
  v35 &= v35 - 1;
  v42 = v41 | (v4 << 6);
LABEL_29:
  __int16 v43 = *(void *)(v5 + 48);
  uint64_t v44 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v44 - 8) + 16LL))( v9,  v43 + *(void *)(*(void *)(v44 - 8) + 72LL) * v42,  v44);
  uint64_t v45 = *(void *)(v5 + 56);
  uint64_t v46 = sub_100183098(&qword_100649768);
  uint64_t v47 = *(int *)(v46 + 48);
  v80 = *(_OWORD *)(v45 + 16 * v42);
  *(_OWORD *)&v9[v47] = v80;
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56LL))(v9, 0LL, 1LL, v46);
  swift_unknownObjectRetain(v80);
  while (1)
  {
    sub_1001870BC((uint64_t)v9, (uint64_t)v11, &qword_100649760);
    uint64_t v52 = sub_100183098(&qword_100649768);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v52 - 8) + 48LL))(v11, 1LL, v52) == 1)
    {
      swift_release(v5);
      uint64_t v53 = *v77;
      *uint64_t v77 = (uint64_t)&_swiftEmptyDictionarySingleton;
      swift_bridgeObjectRelease(v53);
      v54 = (uint64_t *)(v78 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAirDropReceiveConnectionManager_nearFieldTransactions);
      swift_beginAccess( v78 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAirDropReceiveConnectionManager_nearFieldTransactions,  &v81,  1LL,  0LL);
      v55 = *v54;
      void *v54 = (uint64_t)&_swiftEmptySetSingleton;
      swift_bridgeObjectRelease(v55);
      return;
    }

    id v36 = &v11[*(int *)(v52 + 48)];
    id v37 = *(void *)v36;
    id v38 = *((void *)v36 + 1);
    ObjectType = swift_getObjectType(*(void *)v36);
    (*(void (**)(uint64_t, uint64_t))(v38 + 64))(ObjectType, v38);
    swift_unknownObjectRelease(v37);
    uint64_t v40 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v40 - 8) + 8LL))(v11, v40);
    if (v35) {
      goto LABEL_28;
    }
LABEL_30:
    uint64_t v48 = v4 + 1;
    if (__OFADD__(v4, 1LL)) {
      break;
    }
    if (v48 < v3)
    {
      uint64_t v49 = *(void *)(v79 + 8 * v48);
      if (v49) {
        goto LABEL_33;
      }
      uint64_t v50 = v4 + 2;
      ++v4;
      if (v48 + 1 < v3)
      {
        uint64_t v49 = *(void *)(v79 + 8 * v50);
        if (v49) {
          goto LABEL_36;
        }
        uint64_t v4 = v48 + 1;
        if (v48 + 2 < v3)
        {
          uint64_t v49 = *(void *)(v79 + 8 * (v48 + 2));
          if (v49)
          {
            v48 += 2LL;
            goto LABEL_33;
          }

          uint64_t v50 = v48 + 3;
          uint64_t v4 = v48 + 2;
          if (v48 + 3 < v3)
          {
            uint64_t v49 = *(void *)(v79 + 8 * v50);
            if (!v49)
            {
              while (1)
              {
                uint64_t v48 = v50 + 1;
                if (__OFADD__(v50, 1LL)) {
                  break;
                }
                if (v48 >= v3)
                {
                  uint64_t v4 = v76;
                  goto LABEL_47;
                }

                uint64_t v49 = *(void *)(v79 + 8 * v48);
                ++v50;
                if (v49) {
                  goto LABEL_33;
                }
              }

              __break(1u);
              return;
            }

  id v57 = (uint64_t *)(v1
                  + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAirDropReceiveConnectionManager_nearFieldServersByTransactionID);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t *, void, void))swift_beginAccess)( v1 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAirDropReceiveConnectionManager_nearFieldServersByTransactionID,  &v121,  0LL,  0LL);
  v59 = *v57;
  uint64_t v60 = v108;
  if (*(void *)(*v57 + 16))
  {
    uint64_t v61 = *(void *)(v59 + 64);
    v104 = v59 + 64;
    uint64_t v50 = 1LL << *(_BYTE *)(v59 + 32);
    uint64_t v62 = -1LL;
    if (v50 < 64) {
      uint64_t v62 = ~(-1LL << v50);
    }
    v63 = v62 & v61;
    uint64_t v64 = v1 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAirDropReceiveConnectionManager_nearFieldServerErrors;
    swift_bridgeObjectRetain((const char *)v59);
    v107 = v64;
    uint64_t v65 = swift_beginAccess(v64, v120, 0LL, 0LL);
    v66 = 0LL;
    uint64_t v67 = v63;
    uint64_t v68 = (unint64_t)(v50 + 63) >> 6;
    v101 = v68 - 1;
    v109 = v68;
    v102 = v68 - 5;
    v103 = v59 + 104;
    v65.n128_u64[0] = 136315650LL;
    v106 = v65;
    v105 = (char *)&type metadata for Any + 8;
    v111 = v59;
    while (!v67)
    {
      uint64_t v73 = v66 + 1;
      if (__OFADD__(v66, 1LL))
      {
        __break(1u);
LABEL_61:
        swift_once(&qword_100643FB8, sub_100227D00);
LABEL_19:
        uint64_t v51 = type metadata accessor for Logger(0LL);
        sub_100186DE4(v51, (uint64_t)qword_1006494F0);
        uint64_t v52 = swift_retain(v1);
        uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
        v54 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v53, v54))
        {
          v55 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          *(_DWORD *)v55 = 134217984;
          v121 = *(void *)(*(void *)v50 + 16LL);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122, v55 + 4, v55 + 12);
          swift_release(v1);
          _os_log_impl((void *)&_mh_execute_header, v53, v54, "NearField Transactions %ld", v55, 0xCu);
          id v56 = v55;
          uint64_t v10 = v110;
          swift_slowDealloc(v56, -1LL, -1LL);
        }

        else
        {

          swift_release(v1);
        }

        uint8_t v12 = v112;
        goto LABEL_23;
      }

      if (v73 >= v109)
      {
        uint64_t v75 = v66;
      }

      else
      {
        uint64_t v74 = *(void *)(v104 + 8 * v73);
        if (v74) {
          goto LABEL_35;
        }
        uint64_t v75 = v66 + 1;
        if (v66 + 2 < v109)
        {
          uint64_t v74 = *(void *)(v104 + 8 * (v66 + 2));
          if (v74)
          {
            uint64_t v73 = v66 + 2;
            goto LABEL_35;
          }

          uint64_t v75 = v66 + 2;
          if (v66 + 3 < v109)
          {
            uint64_t v74 = *(void *)(v104 + 8 * (v66 + 3));
            if (v74)
            {
              uint64_t v73 = v66 + 3;
LABEL_35:
              v115 = (v74 - 1) & v74;
              v116 = v73;
              uint64_t v69 = __clz(__rbit64(v74)) + (v73 << 6);
LABEL_31:
              (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))( v10,  *(void *)(v59 + 48) + *(void *)(v3 + 72) * v69,  v2);
              uint64_t v70 = *(void *)(v59 + 56);
              uint64_t v71 = sub_100183098(&qword_100649768);
              uint64_t v72 = *(int *)(v71 + 48);
              v113 = *(_OWORD *)(v70 + 16 * v69);
              *(_OWORD *)&v10[v72] = v113;
              (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v71 - 8) + 56LL))( v10,  0LL,  1LL,  v71);
              swift_unknownObjectRetain(v113);
              goto LABEL_38;
            }

            uint64_t v73 = v66 + 4;
            uint64_t v75 = v66 + 3;
            if (v66 + 4 < v109)
            {
              uint64_t v74 = *(void *)(v104 + 8 * v73);
              if (v74) {
                goto LABEL_35;
              }
              while (v102 != v66)
              {
                uint64_t v74 = *(void *)(v103 + 8 * v66++);
                if (v74)
                {
                  uint64_t v73 = v66 + 4;
                  goto LABEL_35;
                }
              }

              uint64_t v75 = v101;
            }
          }
        }
      }

      uint64_t v76 = sub_100183098(&qword_100649768);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56LL))(v10, 1LL, 1LL, v76);
      v115 = 0LL;
      v116 = v75;
LABEL_38:
      sub_1001870BC((uint64_t)v10, (uint64_t)v12, &qword_100649760);
      uint64_t v77 = sub_100183098(&qword_100649768);
      v78 = &v12[*(int *)(v77 + 48)];
      v79 = *(void *)v78;
      uint64_t v50 = *((void *)v78 + 1);
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v60, v12, v2);
      v80 = swift_getObjectType(v79);
      v81 = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 32))(v80, v50);
      if (v81)
      {
        v82 = v81;
        if (qword_100643FB8 != -1) {
          swift_once(&qword_100643FB8, sub_100227D00);
        }
        v83 = type metadata accessor for Logger(0LL);
        sub_100186DE4(v83, (uint64_t)qword_1006494F0);
        (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v114, v60, v2);
        swift_retain_n(v1, 2LL);
        v84 = swift_retain_n(v82, 2LL);
        uint64_t v50 = Logger.logObject.getter(v84);
        v85 = static os_log_type_t.default.getter();
        if (os_log_type_enabled((os_log_t)v50, v85))
        {
          v86 = swift_slowAlloc(32LL, -1LL);
          v87 = swift_slowAlloc(64LL, -1LL);
          v119 = v87;
          *(_DWORD *)v86 = v106.n128_u32[0];
          v88 = NWListener.debugDescription.getter();
          v90 = (const char *)v89;
          *(void *)(v86 + 4) = sub_10018CDB4(v88, v89, &v119);
          swift_release_n(v82, 2LL);
          swift_bridgeObjectRelease(v90);
          *(_WORD *)(v86 + 12) = 2080;
          v91 = sub_100183F14( (unint64_t *)&qword_1006460B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          v92 = dispatch thunk of CustomStringConvertible.description.getter(v2, v91);
          v94 = (const char *)v93;
          *(void *)(v86 + 14) = sub_10018CDB4(v92, v93, &v119);
          v95 = swift_bridgeObjectRelease(v94);
          *(void *)&v113 = *(void *)(v3 + 8);
          ((void (*)(char *, uint64_t, __n128))v113)(v114, v2, v95);
          *(_WORD *)(v86 + 22) = 2048;
          v96 = v3;
          v97 = v2;
          v98 = *(void *)(*(void *)v107 + 16LL);
          swift_release(v1);
          *(void *)(v86 + 24) = v98;
          uint64_t v2 = v97;
          id v3 = v96;
          swift_release(v1);
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v50,  v85,  "NearField Server %s - TransactionID %s - errors: %ld",  (uint8_t *)v86,  0x20u);
          swift_arrayDestroy(v87, 2LL, v105);
          swift_slowDealloc(v87, -1LL, -1LL);
          v99 = v86;
          uint64_t v60 = v108;
          swift_slowDealloc(v99, -1LL, -1LL);
          swift_release(v82);
          swift_unknownObjectRelease(v79);

          ((void (*)(char *, uint64_t))v113)(v60, v2);
        }

        else
        {
          swift_unknownObjectRelease(v79);

          swift_release_n(v1, 2LL);
          uint64_t v50 = *(void *)(v3 + 8);
          ((void (*)(char *, uint64_t))v50)(v114, v2);
          swift_release_n(v82, 3LL);
          ((void (*)(char *, uint64_t))v50)(v60, v2);
        }

        uint64_t v10 = v110;
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v3 + 8))(v60, v2);
        swift_unknownObjectRelease(v79);
      }

      uint8_t v12 = v112;
      v59 = v111;
      uint64_t v67 = v115;
      v66 = v116;
    }

    v115 = (v67 - 1) & v67;
    v116 = v66;
    uint64_t v69 = __clz(__rbit64(v67)) | (v66 << 6);
    goto LABEL_31;
  }

  return result;
}

        id v17 = (v23 - 1) & v23;
        __int16 v21 = __clz(__rbit64(v23)) + (v19 << 6);
      }

      __int16 v25 = *(void *)(*(void *)(v2 + 56) + 8 * v21);
      uint64_t v26 = (os_unfair_lock_s *)(*(void *)(v25
                                           + OBJC_IVAR____TtCV16DaemoniOSLibrary16SDAuthentication13LTKCollection_ltkLock)
                               + 16LL);
      swift_retain(v25);
      os_unfair_lock_lock(v26);
      sub_100271B04(&v29);
      uint64_t v27 = v29;
      os_unfair_lock_unlock(v26);
      if ((v27 & 1) != 0) {
        sub_1003498F0();
      }
      swift_release(v25);
    }
  }

  return result;
}

  __break(1u);
LABEL_24:
  id v17 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v17,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_24:
  int v15 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v15,  1092LL,  0);
  __break(1u);
}

  __break(1u);
LABEL_24:
  uint64_t v24 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v24,  1092LL,  0);
  __break(1u);
}

  __break(1u);
LABEL_24:
  int v15 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v15,  1092LL,  0);
  __break(1u);
}

  __break(1u);
LABEL_24:
  int v15 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v15,  1092LL,  0);
  __break(1u);
}

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  id v17 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    sub_100183098(a4);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

  swift_release(v66);
  unsigned int v22 = v57;
  uint64_t v49 = (uint64_t *)(v57 + OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropEndpointService_connectableByDisplayableID);
  swift_beginAccess( v57 + OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropEndpointService_connectableByDisplayableID,  v79,  1LL,  0LL);
  uint64_t v50 = *v49;
  *uint64_t v49 = (uint64_t)v21;
  swift_bridgeObjectRelease(v50);
  isUniquelyReferenced_nonNull_native = sub_1002EEB54();
  if (!((unint64_t)isUniquelyReferenced_nonNull_native >> 62))
  {
    uint64_t v51 = *(void *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFF8LL) + 0x10);
    goto LABEL_25;
  }

  sub_10020EEE0();
  *(void *)(v0 + 1160) = v38;
  *(void *)(v0 + 116_Block_object_dispose((const void *)(v1 - 96), 8) = v39;
  if (!v39)
  {
    uint64_t v58 = *(void *)(v0 + 1080);
    v59 = *(void *)(v0 + 1072);
    sub_1001A4B84(*(void *)(v0 + 1056), v58, type metadata accessor for SDAirDropDiscoveredEndpoint);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v58, v59);
    uint64_t v61 = *(uint64_t **)(v0 + 1080);
    if (EnumCaseMultiPayload == 3)
    {
      uint64_t v62 = (_OWORD *)(v0 + 352);
      v63 = *(void *)(v0 + 1064);
      uint64_t v64 = *v61;
      *(void *)(v0 + 1200) = *v61;
      uint64_t v65 = (const char *)v61[1];
      *(void *)(v0 + 120_Block_object_dispose((const void *)(v1 - 96), 8) = v65;
      *(void *)(v0 + 1216) = v61[3];
      *(void *)(v0 + 1224) = v61[4];
      *(void *)(v0 + 1232) = v61[5];
      v66 = OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropEndpointService_allDiscovered;
      *(void *)(v0 + 1240) = OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropEndpointService_allDiscovered;
      uint64_t v67 = (uint64_t *)(v63 + v66);
      *(void *)&uint64_t v68 = swift_beginAccess(v63 + v66, v0 + 944, 32LL, 0LL).n128_u64[0];
      uint64_t v69 = *v67;
      if (*(void *)(v69 + 16))
      {
        swift_bridgeObjectRetain(v65, v68);
        uint64_t v70 = sub_1003AD53C(v64, (uint64_t)v65);
        if ((v71 & 1) != 0)
        {
          sub_1002499DC(*(void *)(v69 + 56) + 48 * v70, v0 + 352);
        }

        else
        {
          *(_OWORD *)(v0 + 36_Block_object_dispose((const void *)(v1 - 96), 8) = 0u;
          *(_OWORD *)(v0 + 384) = 0u;
          *uint64_t v62 = 0u;
        }
      }

      else
      {
        *(_OWORD *)(v0 + 36_Block_object_dispose((const void *)(v1 - 96), 8) = 0u;
        *(_OWORD *)(v0 + 384) = 0u;
        *uint64_t v62 = 0u;
        swift_bridgeObjectRetain(v65);
      }

      sub_1001870BC(v0 + 352, v0 + 400, &qword_10064DA48);
      if (*(void *)(v0 + 424))
      {
        sub_1001CCE4C((__int128 *)(v0 + 400), (_OWORD *)(v0 + 256));
      }

      else
      {
        v114 = type metadata accessor for SDAirDropDiscoveredClassroom(0LL);
        swift_allocObject(v114, *(unsigned int *)(v114 + 48), *(unsigned __int16 *)(v114 + 52));
        swift_bridgeObjectRetain(v65);
        v115 = sub_100390434(v64, v65);
        *(void *)(v0 + 280) = v114;
        *(void *)(v0 + 28_Block_object_dispose((const void *)(v1 - 96), 8) = sub_100183F14( &qword_10064DBC0,  type metadata accessor for SDAirDropDiscoveredClassroom,  (uint64_t)&unk_1004D80C8);
        *(void *)(v0 + 296) = &off_1005DDD10;
        *(void *)(v0 + 256) = v115;
        sub_100187100(v0 + 400, &qword_10064DA48);
      }

      swift_bridgeObjectRelease(v65);
      swift_endAccess(v0 + 944);
      v89 = *(void *)(v0 + 280);
      v90 = *(void *)(v0 + 288);
      sub_10019A708((void *)(v0 + 256), v89);
      v116 = *(int **)(v90 + 48);
      v117 = (int *)((char *)v116 + *v116);
      v92 = (void *)swift_task_alloc(v116[1]);
      *(void *)(v0 + 124_Block_object_dispose((const void *)(v1 - 96), 8) = v92;
      v93 = sub_1002F2944;
      goto LABEL_67;
    }

    sub_1001A4BC8((uint64_t)v61, type metadata accessor for SDAirDropDiscoveredEndpoint);
    sub_10020EB1C();
    if (v94)
    {
      v95 = *(void *)(v0 + 1088);
      v96 = *(void *)(v0 + 1064);
      v97 = *(void *)(v0 + 1056);
      swift_bridgeObjectRelease(v94);
      sub_10020C5CC();
      v99 = v98;
      v101 = v100;
      sub_1001A4B84(v97, v95, type metadata accessor for SDAirDropDiscoveredEndpoint);
      v102 = type metadata accessor for SDAirDropDiscoveredDevice(0LL);
      v103 = v13;
      swift_allocObject(v102, *(unsigned int *)(v102 + 48), *(unsigned __int16 *)(v102 + 52));
      v104 = sub_1002FEF90(v95);
      v118[3] = v102;
      v105 = sub_100183F14( &qword_10064DBB8,  type metadata accessor for SDAirDropDiscoveredDevice,  (uint64_t)&unk_1004D4AD8);
      v118[4] = v105;
      v118[5] = (uint64_t)&off_1005DA158;
      v118[0] = v104;
      swift_beginAccess( v96 + OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropEndpointService_allDiscovered,  v0 + 920,  33LL,  0LL);
      swift_retain(v104);
      sub_1002E5104((uint64_t)v118, v99, v101);
      swift_endAccess(v0 + 920);
      *(void *)(v0 + 816) = v102;
      *(void *)(v0 + 824) = v105;
      char v13 = v103;
      *(void *)(v0 + 792) = v104;
      sub_100187100(v103, &qword_10064DBB0);
      sub_1001870BC(v0 + 792, v103, &qword_10064DBB0);
    }

    if (*(_BYTE *)(v0 + 1256) == 1)
    {
      sub_1001915A4(v13, v0 + 752, &qword_10064DBB0);
      if (!*(void *)(v0 + 776))
      {
        sub_100187100(v13, &qword_10064DBB0);
        v106 = v0 + 752;
        goto LABEL_51;
      }

      sub_1001CE0D0((__int128 *)(v0 + 752), v0 + 712);
      sub_1002F2D4C((void *)(v0 + 712));
      sub_10018709C((void *)(v0 + 712));
    }

    v106 = v13;
LABEL_51:
    sub_100187100(v106, &qword_10064DBB0);
LABEL_55:
    v107 = *(void *)(v0 + 1096);
    v108 = *(void *)(v0 + 1088);
    v109 = *(void *)(v0 + 1080);
    swift_task_dealloc(*(void *)(v0 + 1104));
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v109);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v40 = v38;
  __int16 v41 = v39;
  v42 = (_OWORD *)(v0 + 16);
  __int16 v43 = *(void *)(v0 + 1064);
  uint64_t v44 = OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropEndpointService_allDiscovered;
  *(void *)(v0 + 1176) = OBJC_IVAR____TtC16DaemoniOSLibrary24SDAirDropEndpointService_allDiscovered;
  uint64_t v45 = (uint64_t *)(v43 + v44);
  *(void *)&uint64_t v46 = swift_beginAccess(v43 + v44, v0 + 1016, 32LL, 0LL).n128_u64[0];
  uint64_t v47 = *v45;
  if (*(void *)(v47 + 16))
  {
    swift_bridgeObjectRetain(v41, v46);
    uint64_t v48 = sub_1003AD53C(v40, (uint64_t)v41);
    if ((v49 & 1) != 0)
    {
      sub_1002499DC(*(void *)(v47 + 56) + 48 * v48, v0 + 16);
    }

    else
    {
      *(_OWORD *)(v0 + 32) = 0u;
      *(_OWORD *)(v0 + 4_Block_object_dispose((const void *)(v1 - 96), 8) = 0u;
      void *v42 = 0u;
    }
  }

  else
  {
    *(_OWORD *)(v0 + 32) = 0u;
    *(_OWORD *)(v0 + 4_Block_object_dispose((const void *)(v1 - 96), 8) = 0u;
    void *v42 = 0u;
    swift_bridgeObjectRetain(v41);
  }

  sub_1001870BC(v0 + 16, v0 + 496, &qword_10064DA48);
  if (*(void *)(v0 + 520))
  {
    sub_1001CCE4C((__int128 *)(v0 + 496), (_OWORD *)(v0 + 544));
  }

  else
  {
    v86 = *(void *)(v0 + 1088);
    sub_1001A4B84(*(void *)(v0 + 1056), v86, type metadata accessor for SDAirDropDiscoveredEndpoint);
    v87 = type metadata accessor for SDAirDropDiscoveredDevice(0LL);
    swift_allocObject(v87, *(unsigned int *)(v87 + 48), *(unsigned __int16 *)(v87 + 52));
    v88 = sub_1002FEF90(v86);
    *(void *)(v0 + 56_Block_object_dispose((const void *)(v1 - 96), 8) = v87;
    *(void *)(v0 + 576) = sub_100183F14( &qword_10064DBB8,  type metadata accessor for SDAirDropDiscoveredDevice,  (uint64_t)&unk_1004D4AD8);
    *(void *)(v0 + 584) = &off_1005DA158;
    *(void *)(v0 + 544) = v88;
    sub_100187100(v0 + 496, &qword_10064DA48);
  }

  swift_bridgeObjectRelease(v41);
  swift_endAccess(v0 + 1016);
  v89 = *(void *)(v0 + 568);
  v90 = *(void *)(v0 + 576);
  sub_10019A708((void *)(v0 + 544), v89);
  v91 = *(int **)(v90 + 48);
  v117 = (int *)((char *)v91 + *v91);
  v92 = (void *)swift_task_alloc(v91[1]);
  *(void *)(v0 + 1184) = v92;
  v93 = sub_1002F2680;
LABEL_67:
  *v92 = v0;
  v92[1] = v93;
  return ((uint64_t (*)(void, uint64_t, uint64_t))v117)(*(void *)(v0 + 1056), v89, v90);
}

    a1 = v135;
    if ((v129 & 1) == 0) {
      break;
    }
    if (v13 < v16) {
      goto LABEL_138;
    }
    if (v16 >= v13) {
      break;
    }
    unint64_t v35 = v16;
    id v36 = v13;
    id v37 = v14;
    id v38 = 48 * v36 - 48;
    uint64_t v39 = 48 * v35;
    uint64_t v40 = v36;
    __int16 v41 = v35;
    do
    {
      if (v41 != --v36)
      {
        if (!v127) {
          goto LABEL_143;
        }
        v42 = (_OWORD *)(v127 + v39);
        __int16 v43 = (_OWORD *)(v127 + v38);
        sub_1001CCE4C((__int128 *)(v127 + v39), &v141);
        uint64_t v45 = v43[1];
        uint64_t v44 = v43[2];
        void *v42 = *v43;
        v42[1] = v45;
        v42[2] = v44;
        sub_1001CCE4C(&v141, v43);
      }

      ++v41;
      v38 -= 48LL;
      v39 += 48LL;
    }

    while (v41 < v36);
    id v14 = v37;
    a1 = v135;
    char v13 = v40;
    uint64_t v4 = v132;
    uint64_t v7 = v133;
    unsigned int v16 = v130;
    if (v13 < v133) {
      goto LABEL_33;
    }
LABEL_52:
    if (v13 < v16) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0) {
      id v14 = sub_1002FA994(0LL, *((void *)v14 + 2) + 1LL, 1, v14);
    }
    uint64_t v61 = *((void *)v14 + 2);
    uint64_t v60 = *((void *)v14 + 3);
    int v15 = v61 + 1;
    if (v61 >= v60 >> 1) {
      id v14 = sub_1002FA994((char *)(v60 > 1), v61 + 1, 1, v14);
    }
    *((void *)v14 + 2) = v15;
    uint64_t v62 = v14 + 32;
    v63 = &v14[16 * v61 + 32];
    *(void *)v63 = v16;
    *((void *)v63 + 1) = v13;
    if (v61)
    {
      a1 = v135;
      while (1)
      {
        uint64_t v64 = v15 - 1;
        if (v15 >= 4)
        {
          uint64_t v69 = &v62[16 * v15];
          uint64_t v70 = *((void *)v69 - 8);
          uint64_t v71 = *((void *)v69 - 7);
          uint64_t v75 = __OFSUB__(v71, v70);
          uint64_t v72 = v71 - v70;
          if (v75) {
            goto LABEL_120;
          }
          uint64_t v74 = *((void *)v69 - 6);
          uint64_t v73 = *((void *)v69 - 5);
          uint64_t v75 = __OFSUB__(v73, v74);
          uint64_t v67 = v73 - v74;
          uint64_t v68 = v75;
          if (v75) {
            goto LABEL_121;
          }
          uint64_t v76 = v15 - 2;
          uint64_t v77 = &v62[16 * v15 - 32];
          v79 = *(void *)v77;
          v78 = *((void *)v77 + 1);
          uint64_t v75 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          if (v75) {
            goto LABEL_123;
          }
          uint64_t v75 = __OFADD__(v67, v80);
          v81 = v67 + v80;
          if (v75) {
            goto LABEL_126;
          }
          if (v81 >= v72)
          {
            v99 = &v62[16 * v64];
            v101 = *(void *)v99;
            v100 = *((void *)v99 + 1);
            uint64_t v75 = __OFSUB__(v100, v101);
            v102 = v100 - v101;
            if (v75) {
              goto LABEL_130;
            }
            v92 = v67 < v102;
            goto LABEL_90;
          }
        }

        else
        {
          if (v15 != 3)
          {
            v93 = *((void *)v14 + 4);
            v94 = *((void *)v14 + 5);
            uint64_t v75 = __OFSUB__(v94, v93);
            v86 = v94 - v93;
            v87 = v75;
            goto LABEL_84;
          }

          v66 = *((void *)v14 + 4);
          uint64_t v65 = *((void *)v14 + 5);
          uint64_t v75 = __OFSUB__(v65, v66);
          uint64_t v67 = v65 - v66;
          uint64_t v68 = v75;
        }

        if ((v68 & 1) != 0) {
          goto LABEL_122;
        }
        uint64_t v76 = v15 - 2;
        v82 = &v62[16 * v15 - 32];
        v84 = *(void *)v82;
        v83 = *((void *)v82 + 1);
        v85 = __OFSUB__(v83, v84);
        v86 = v83 - v84;
        v87 = v85;
        if (v85) {
          goto LABEL_125;
        }
        v88 = &v62[16 * v64];
        v90 = *(void *)v88;
        v89 = *((void *)v88 + 1);
        uint64_t v75 = __OFSUB__(v89, v90);
        v91 = v89 - v90;
        if (v75) {
          goto LABEL_128;
        }
        if (__OFADD__(v86, v91)) {
          goto LABEL_129;
        }
        if (v86 + v91 >= v67)
        {
          v92 = v67 < v91;
LABEL_90:
          if (v92) {
            uint64_t v64 = v76;
          }
          goto LABEL_92;
        }

    sub_100187100(v96, (uint64_t *)&unk_100645130);
    uint64_t v72 = 0;
    goto LABEL_24;
  }

  __break(1u);
  return result;
}

        swift_endAccess(v61);
        *(void *)&uint64_t v30 = swift_bridgeObjectRelease(v17).n128_u64[0];
        swift_bridgeObjectRelease(v19, v30);
        if (v26 >= v29)
        {
          uint64_t v32 = v15;
          if (v15 != v14) {
            *(_OWORD *)int v15 = *(_OWORD *)v14;
          }
          v14 += 2;
          v63 = v14;
          uint64_t v31 = v6;
        }

        else
        {
          uint64_t v31 = v6 + 2;
          uint64_t v32 = v15;
          if (v15 < v6 || v15 >= v31 || v15 != v6) {
            *(_OWORD *)int v15 = *(_OWORD *)v6;
          }
        }

        uint64_t v7 = v32 + 2;
        if (v14 < (uint64_t *)v55)
        {
          uint64_t v6 = v31;
        }

        uint64_t v64 = v7;
        goto LABEL_63;
      }
    }

    goto LABEL_63;
  }

    unsigned int v16 = (v25 - 1) & v25;
    unsigned int v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    uint64_t v27 = *(void *)(v7 + 72);
    uint64_t v28 = *(void *)(v10 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      uint64_t v29 = *(id *)(*(void *)(v10 + 56) + 8 * v22);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      uint64_t v29 = *(id *)(*(void *)(v10 + 56) + 8 * v22);
    }

    uint64_t v30 = *(void *)(v12 + 40);
    uint64_t v31 = sub_100183F14( &qword_100646250,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    uint64_t v32 = -1LL << *(_BYTE *)(v12 + 32);
    uint64_t v33 = result & ~v32;
    uint64_t v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      __int16 v20 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v35 = 0;
      id v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        id v37 = v34 == v36;
        if (v34 == v36) {
          uint64_t v34 = 0LL;
        }
        v35 |= v37;
        id v38 = *(void *)(v17 + 8 * v34);
      }

      while (v38 == -1);
      __int16 v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))( *(void *)(v12 + 48) + v27 * v20,  v9,  v6);
    *(void *)(*(void *)(v12 + 56) + 8 * v20) = v29;
    ++*(void *)(v12 + 16);
  }

  swift_release(v10);
  id v3 = v41;
  uint64_t v24 = v43;
  if ((v45 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v39 = 1LL << *(_BYTE *)(v10 + 32);
  if (v39 >= 64) {
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v39;
  }
  *(void *)(v10 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v10);
  void *v3 = v12;
  return result;
}

    unsigned int v16 = (v25 - 1) & v25;
    unsigned int v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    uint64_t v27 = *(void *)(v7 + 72);
    uint64_t v28 = *(void *)(v10 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      uint64_t v29 = *(void *)(*(void *)(v10 + 56) + 8 * v22);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      uint64_t v29 = *(void *)(*(void *)(v10 + 56) + 8 * v22);
      swift_bridgeObjectRetain(v29);
    }

    uint64_t v30 = *(void *)(v12 + 40);
    uint64_t v31 = sub_100183F14( &qword_100646108,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    uint64_t v32 = -1LL << *(_BYTE *)(v12 + 32);
    uint64_t v33 = result & ~v32;
    uint64_t v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      __int16 v20 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v35 = 0;
      id v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        id v37 = v34 == v36;
        if (v34 == v36) {
          uint64_t v34 = 0LL;
        }
        v35 |= v37;
        id v38 = *(void *)(v17 + 8 * v34);
      }

      while (v38 == -1);
      __int16 v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))( *(void *)(v12 + 48) + v27 * v20,  v9,  v6);
    *(void *)(*(void *)(v12 + 56) + 8 * v20) = v29;
    ++*(void *)(v12 + 16);
  }

  swift_release(v10);
  id v3 = v41;
  uint64_t v24 = v43;
  if ((v45 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v39 = 1LL << *(_BYTE *)(v10 + 32);
  if (v39 >= 64) {
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v39;
  }
  *(void *)(v10 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v10);
  void *v3 = v12;
  return result;
}

    int v15 = (v25 - 1) & v25;
    unsigned int v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_24:
    uint64_t v27 = *(void *)(v48 + 72);
    uint64_t v28 = *(void *)(v9 + 48) + v27 * v22;
    if ((v47 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 32))(v8, v28, v6);
      uint64_t v29 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      uint64_t v31 = *v29;
      uint64_t v30 = v29[1];
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(v8, v28, v6);
      uint64_t v32 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      uint64_t v31 = *v32;
      uint64_t v30 = v32[1];
      swift_bridgeObjectRetain(v30);
    }

    uint64_t v33 = *(void *)(v11 + 40);
    uint64_t v34 = sub_100183F14( &qword_100646108,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v6, v34);
    unint64_t v35 = -1LL << *(_BYTE *)(v11 + 32);
    id v36 = result & ~v35;
    id v37 = v36 >> 6;
    if (((-1LL << v36) & ~*(void *)(v16 + 8 * (v36 >> 6))) != 0)
    {
      id v19 = __clz(__rbit64((-1LL << v36) & ~*(void *)(v16 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v38 = 0;
      uint64_t v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v40 = v37 == v39;
        if (v37 == v39) {
          id v37 = 0LL;
        }
        v38 |= v40;
        __int16 v41 = *(void *)(v16 + 8 * v37);
      }

      while (v41 == -1);
      id v19 = __clz(__rbit64(~v41)) + (v37 << 6);
    }

    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v48 + 32))( *(void *)(v11 + 48) + v27 * v19,  v8,  v6);
    __int16 v20 = (void *)(*(void *)(v11 + 56) + 16 * v19);
    *__int16 v20 = v31;
    v20[1] = v30;
    ++*(void *)(v11 + 16);
  }

  swift_release(v9);
  id v3 = v43;
  uint64_t v24 = v45;
  if ((v47 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  v42 = 1LL << *(_BYTE *)(v9 + 32);
  if (v42 >= 64) {
    bzero(v24, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v42;
  }
  *(void *)(v9 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v9);
  void *v3 = v11;
  return result;
}

        uint64_t v18 = (v28 - 1) & v28;
        __int16 v25 = __clz(__rbit64(v28)) + (v21 << 6);
      }

      uint64_t v30 = *(void *)(v9 + 72);
      uint64_t v31 = *(void *)(v22 + 48) + v30 * v25;
      if ((v52 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v9 + 32))(v11, v31, v8);
        uint64_t v32 = *(void *)(v22 + 56);
        uint64_t v33 = *(void *)(v50 + 72);
        sub_1001A4B40(v32 + v33 * v25, v53, type metadata accessor for SDAirDropLegacySessionLogger.Transfer);
      }

      else
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, v31, v8);
        uint64_t v34 = *(void *)(v22 + 56);
        uint64_t v33 = *(void *)(v50 + 72);
        sub_1001A4B84(v34 + v33 * v25, v53, type metadata accessor for SDAirDropLegacySessionLogger.Transfer);
      }

      unint64_t v35 = *(void *)(v14 + 40);
      id v36 = sub_100183F14( &qword_100646250,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v35, v8, v36);
      id v37 = -1LL << *(_BYTE *)(v14 + 32);
      id v38 = result & ~v37;
      uint64_t v39 = v38 >> 6;
      if (((-1LL << v38) & ~*(void *)(v19 + 8 * (v38 >> 6))) != 0)
      {
        __int16 v23 = __clz(__rbit64((-1LL << v38) & ~*(void *)(v19 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v40 = 0;
        __int16 v41 = (unint64_t)(63 - v37) >> 6;
        do
        {
          if (++v39 == v41 && (v40 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }

          v42 = v39 == v41;
          if (v39 == v41) {
            uint64_t v39 = 0LL;
          }
          v40 |= v42;
          __int16 v43 = *(void *)(v19 + 8 * v39);
        }

        while (v43 == -1);
        __int16 v23 = __clz(__rbit64(~v43)) + (v39 << 6);
      }

      *(void *)(v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
      (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(void *)(v14 + 48) + v30 * v23, v11, v8);
      uint64_t result = sub_1001A4B40( v53,  *(void *)(v14 + 56) + v33 * v23,  type metadata accessor for SDAirDropLegacySessionLogger.Transfer);
      ++*(void *)(v14 + 16);
    }
  }

  uint64_t v44 = v12;
LABEL_44:
  uint64_t result = swift_release(v44);
  void *v3 = v14;
  return result;
}

    uint64_t v18 = (v27 - 1) & v27;
    uint64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_24:
    uint64_t v29 = *(void *)(v9 + 72);
    uint64_t v30 = *(void *)(v12 + 48) + v29 * v24;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 32))(v11, v30, v8);
      uint64_t v45 = *(_OWORD *)(*(void *)(v12 + 56) + 16 * v24);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, v30, v8);
      uint64_t v45 = *(_OWORD *)(*(void *)(v12 + 56) + 16 * v24);
      swift_unknownObjectRetain(v45);
    }

    uint64_t v31 = *(void *)(v14 + 40);
    uint64_t v32 = sub_100183F14( &qword_100646108,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v31, v8, v32);
    uint64_t v33 = -1LL << *(_BYTE *)(v14 + 32);
    uint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1LL << v34) & ~*(void *)(v19 + 8 * (v34 >> 6))) != 0)
    {
      unsigned int v22 = __clz(__rbit64((-1LL << v34) & ~*(void *)(v19 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v36 = 0;
      id v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        id v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0LL;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v19 + 8 * v35);
      }

      while (v39 == -1);
      unsigned int v22 = __clz(__rbit64(~v39)) + (v35 << 6);
    }

    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))( *(void *)(v14 + 48) + v29 * v22,  v11,  v8);
    *(_OWORD *)(*(void *)(v14 + 56) + 16 * v22) = v45;
    ++*(void *)(v14 + 16);
  }

  swift_release(v12);
  unsigned int v5 = v41;
  uint64_t v26 = v43;
  if ((v44 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v40 = 1LL << *(_BYTE *)(v12 + 32);
  if (v40 >= 64) {
    bzero(v26, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v26 = -1LL << v40;
  }
  *(void *)(v12 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v12);
  *unsigned int v5 = v14;
  return result;
}

    uint64_t v18 = (v28 - 1) & v28;
    __int16 v25 = __clz(__rbit64(v28)) + (v21 << 6);
LABEL_24:
    uint64_t v30 = (uint64_t *)(*(void *)(v12 + 48) + 16 * v25);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(v47 + 72);
    uint64_t v34 = *(void *)(v12 + 56) + v33 * v25;
    if ((v48 & 1) != 0)
    {
      sub_1001A4B40(v34, (uint64_t)v11, v49);
    }

    else
    {
      sub_1001A4B84(v34, (uint64_t)v11, v49);
      swift_bridgeObjectRetain(v31);
    }

    Hasher.init(_seed:)(v50);
    String.hash(into:)(v50, v32, v31);
    uint64_t result = Hasher._finalize()();
    unint64_t v35 = -1LL << *(_BYTE *)(v14 + 32);
    id v36 = result & ~v35;
    id v37 = v36 >> 6;
    if (((-1LL << v36) & ~*(void *)(v19 + 8 * (v36 >> 6))) != 0)
    {
      unsigned int v22 = __clz(__rbit64((-1LL << v36) & ~*(void *)(v19 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v38 = 0;
      uint64_t v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v40 = v37 == v39;
        if (v37 == v39) {
          id v37 = 0LL;
        }
        v38 |= v40;
        __int16 v41 = *(void *)(v19 + 8 * v37);
      }

      while (v41 == -1);
      unsigned int v22 = __clz(__rbit64(~v41)) + (v37 << 6);
    }

    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
    __int16 v23 = (void *)(*(void *)(v14 + 48) + 16 * v22);
    *__int16 v23 = v32;
    v23[1] = v31;
    uint64_t result = sub_1001A4B40((uint64_t)v11, *(void *)(v14 + 56) + v33 * v22, v49);
    ++*(void *)(v14 + 16);
  }

  swift_release(v12);
  uint64_t v6 = v44;
  uint64_t v27 = v46;
  if ((v48 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  v42 = 1LL << *(_BYTE *)(v12 + 32);
  if (v42 >= 64) {
    bzero(v27, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    os_log_s *v27 = -1LL << v42;
  }
  *(void *)(v12 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v12);
  void *v6 = v14;
  return result;
}

    id v19 = (v28 - 1) & v28;
    __int16 v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_24:
    uint64_t v30 = *(void *)(v10 + 72);
    uint64_t v31 = *(void *)(v13 + 48) + v30 * v25;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 32))(v12, v31, v9);
      v46(*(void *)(v13 + 56) + 40 * v25, v47);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v12, v31, v9);
      sub_10019A6C4(*(void *)(v13 + 56) + 40 * v25, (uint64_t)v47);
    }

    uint64_t v32 = *(void *)(v15 + 40);
    uint64_t v33 = sub_100183F14( &qword_100646108,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v9, v33);
    uint64_t v34 = -1LL << *(_BYTE *)(v15 + 32);
    unint64_t v35 = result & ~v34;
    id v36 = v35 >> 6;
    if (((-1LL << v35) & ~*(void *)(v20 + 8 * (v35 >> 6))) != 0)
    {
      __int16 v23 = __clz(__rbit64((-1LL << v35) & ~*(void *)(v20 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v37 = 0;
      id v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v39 = v36 == v38;
        if (v36 == v38) {
          id v36 = 0LL;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v20 + 8 * v36);
      }

      while (v40 == -1);
      __int16 v23 = __clz(__rbit64(~v40)) + (v36 << 6);
    }

    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(*(void *)(v15 + 48) + v30 * v23, v12, v9);
    uint64_t result = ((uint64_t (*)(_BYTE *, unint64_t))v46)(v47, *(void *)(v15 + 56) + 40 * v23);
    ++*(void *)(v15 + 16);
  }

  swift_release(v13);
  uint64_t v6 = v42;
  uint64_t v27 = v44;
  if ((v45 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  __int16 v41 = 1LL << *(_BYTE *)(v13 + 32);
  if (v41 >= 64) {
    bzero(v27, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    os_log_s *v27 = -1LL << v41;
  }
  *(void *)(v13 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v13);
  void *v6 = v15;
  return result;
}

    id v14 = (v23 - 1) & v23;
    __int16 v21 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_24:
    __int16 v25 = *(void *)(v8 + 56);
    uint64_t v26 = v8;
    uint64_t v27 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v21);
    uint64_t v29 = *v27;
    uint64_t v28 = (const char *)v27[1];
    uint64_t v30 = *(void *)(v6 + 72);
    uint64_t v31 = v25 + v30 * v21;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v45, v31, v46);
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v45, v31, v46);
      swift_bridgeObjectRetain(v28);
    }

    Hasher.init(_seed:)(v47);
    String.hash(into:)(v47, v29, v28);
    uint64_t result = Hasher._finalize()();
    uint64_t v32 = -1LL << *(_BYTE *)(v10 + 32);
    uint64_t v33 = result & ~v32;
    uint64_t v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v15 + 8 * (v33 >> 6))) != 0)
    {
      uint64_t v18 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v15 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v35 = 0;
      id v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }

        id v37 = v34 == v36;
        if (v34 == v36) {
          uint64_t v34 = 0LL;
        }
        v35 |= v37;
        id v38 = *(void *)(v15 + 8 * v34);
      }

      while (v38 == -1);
      uint64_t v18 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    id v19 = (void *)(*(void *)(v10 + 48) + 16 * v18);
    void *v19 = v29;
    v19[1] = v28;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))( *(void *)(v10 + 56) + v30 * v18,  v45,  v46);
    ++*(void *)(v10 + 16);
    uint64_t v8 = v26;
  }

  uint64_t v24 = v22 + 2;
  if (v24 < v42)
  {
    __int16 v23 = v43[v24];
    if (!v23)
    {
      while (1)
      {
        id v17 = v24 + 1;
        if (__OFADD__(v24, 1LL)) {
          goto LABEL_43;
        }
        if (v17 >= v42) {
          goto LABEL_36;
        }
        __int16 v23 = v43[v17];
        ++v24;
        if (v23) {
          goto LABEL_23;
        }
      }
    }

    id v17 = v24;
    goto LABEL_23;
  }

    id v17 = (v26 - 1) & v26;
    uint64_t v24 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_24:
    uint64_t v28 = *(void *)(v11 + 56);
    uint64_t v29 = v11;
    uint64_t v30 = (uint64_t *)(*(void *)(v11 + 48) + 16 * v24);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(v9 + 72);
    uint64_t v34 = v28 + v33 * v24;
    if ((v47 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v48, v34, v49);
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v48, v34, v49);
      swift_bridgeObjectRetain(v31);
    }

    Hasher.init(_seed:)(v50);
    String.hash(into:)(v50, v32, v31);
    uint64_t result = Hasher._finalize()();
    unint64_t v35 = -1LL << *(_BYTE *)(v13 + 32);
    id v36 = result & ~v35;
    id v37 = v36 >> 6;
    if (((-1LL << v36) & ~*(void *)(v18 + 8 * (v36 >> 6))) != 0)
    {
      __int16 v21 = __clz(__rbit64((-1LL << v36) & ~*(void *)(v18 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v38 = 0;
      uint64_t v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }

        uint64_t v40 = v37 == v39;
        if (v37 == v39) {
          id v37 = 0LL;
        }
        v38 |= v40;
        __int16 v41 = *(void *)(v18 + 8 * v37);
      }

      while (v41 == -1);
      __int16 v21 = __clz(__rbit64(~v41)) + (v37 << 6);
    }

    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
    unsigned int v22 = (void *)(*(void *)(v13 + 48) + 16 * v21);
    *unsigned int v22 = v32;
    v22[1] = v31;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))( *(void *)(v13 + 56) + v33 * v21,  v48,  v49);
    ++*(void *)(v13 + 16);
    uint64_t v11 = v29;
  }

  uint64_t v27 = v25 + 2;
  if (v27 < v45)
  {
    uint64_t v26 = v46[v27];
    if (!v26)
    {
      while (1)
      {
        __int16 v20 = v27 + 1;
        if (__OFADD__(v27, 1LL)) {
          goto LABEL_43;
        }
        if (v20 >= v45) {
          goto LABEL_36;
        }
        uint64_t v26 = v46[v20];
        ++v27;
        if (v26) {
          goto LABEL_23;
        }
      }
    }

    __int16 v20 = v27;
    goto LABEL_23;
  }

    unsigned int v16 = (v25 - 1) & v25;
    unsigned int v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    uint64_t v27 = *(void *)(v7 + 72);
    uint64_t v28 = *(void *)(v10 + 48) + v27 * v22;
    if ((v42 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      __int16 v43 = *(_OWORD *)(*(void *)(v10 + 56) + 16 * v22);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      __int16 v43 = *(_OWORD *)(*(void *)(v10 + 56) + 16 * v22);
      swift_retain(*((void *)&v43 + 1));
    }

    uint64_t v29 = *(void *)(v12 + 40);
    uint64_t v30 = sub_100183F14( &qword_100646108,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v6, v30);
    uint64_t v31 = -1LL << *(_BYTE *)(v12 + 32);
    uint64_t v32 = result & ~v31;
    uint64_t v33 = v32 >> 6;
    if (((-1LL << v32) & ~*(void *)(v17 + 8 * (v32 >> 6))) != 0)
    {
      __int16 v20 = __clz(__rbit64((-1LL << v32) & ~*(void *)(v17 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        id v36 = v33 == v35;
        if (v33 == v35) {
          uint64_t v33 = 0LL;
        }
        v34 |= v36;
        id v37 = *(void *)(v17 + 8 * v33);
      }

      while (v37 == -1);
      __int16 v20 = __clz(__rbit64(~v37)) + (v33 << 6);
    }

    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))( *(void *)(v12 + 48) + v27 * v20,  v9,  v6);
    *(_OWORD *)(*(void *)(v12 + 56) + 16 * v20) = v43;
    ++*(void *)(v12 + 16);
  }

  swift_release(v10);
  id v3 = v39;
  uint64_t v24 = v41;
  if ((v42 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  id v38 = 1LL << *(_BYTE *)(v10 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v38;
  }
  *(void *)(v10 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v10);
  void *v3 = v12;
  return result;
}

    unsigned int v16 = (v25 - 1) & v25;
    unsigned int v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    uint64_t v27 = *(void *)(v7 + 72);
    uint64_t v28 = *(void *)(v10 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      uint64_t v29 = *(void *)(*(void *)(v10 + 56) + 8 * v22);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      uint64_t v29 = *(void *)(*(void *)(v10 + 56) + 8 * v22);
      swift_unknownObjectRetain(v29);
    }

    uint64_t v30 = *(void *)(v12 + 40);
    uint64_t v31 = sub_100183F14( &qword_100646108,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    uint64_t v32 = -1LL << *(_BYTE *)(v12 + 32);
    uint64_t v33 = result & ~v32;
    uint64_t v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      __int16 v20 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v35 = 0;
      id v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        id v37 = v34 == v36;
        if (v34 == v36) {
          uint64_t v34 = 0LL;
        }
        v35 |= v37;
        id v38 = *(void *)(v17 + 8 * v34);
      }

      while (v38 == -1);
      __int16 v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))( *(void *)(v12 + 48) + v27 * v20,  v9,  v6);
    *(void *)(*(void *)(v12 + 56) + 8 * v20) = v29;
    ++*(void *)(v12 + 16);
  }

  swift_release(v10);
  id v3 = v41;
  uint64_t v24 = v43;
  if ((v45 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v39 = 1LL << *(_BYTE *)(v10 + 32);
  if (v39 >= 64) {
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v39;
  }
  *(void *)(v10 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v10);
  void *v3 = v12;
  return result;
}

    id v17 = (v27 - 1) & v27;
    unsigned int v22 = __clz(__rbit64(v27)) + (v20 << 6);
LABEL_6:
    __int16 v23 = *(void *)(v13 + 56) + 16 * v22;
    __int16 v25 = *(void (**)(uint64_t *, char *))v23;
    uint64_t v24 = *(void *)(v23 + 8);
    uint64_t v31 = a1;
    uint64_t v30 = v19;
    swift_retain(v24);
    v25(&v31, &v30);
    uint64_t result = swift_release(v24);
  }

  uint64_t v28 = v26 + 4;
  if (v28 >= v18) {
    return swift_release(v13);
  }
  uint64_t v27 = *(void *)(v14 + 8 * v28);
  if (v27)
  {
    __int16 v20 = v28;
    goto LABEL_23;
  }

  while (1)
  {
    __int16 v20 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v20 >= v18) {
      return swift_release(v13);
    }
    uint64_t v27 = *(void *)(v14 + 8 * v20);
    ++v28;
    if (v27) {
      goto LABEL_23;
    }
  }

    sub_1001956C8(v96);
    uint64_t v72 = 0;
    goto LABEL_24;
  }

  __break(1u);
  return result;
}

    uint64_t v11 = (v17 - 1) & v17;
    int v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    id v19 = v10[5];
    __int16 v20 = *(id *)(*(void *)(v5 + 48) + 8 * v15);
    uint64_t result = NSObject._rawHashValue(seed:)(v19);
    __int16 v21 = -1LL << *((_BYTE *)v10 + 32);
    unsigned int v22 = result & ~v21;
    __int16 v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      uint64_t v24 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      __int16 v25 = 0;
      uint64_t v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        uint64_t v27 = v23 == v26;
        if (v23 == v26) {
          __int16 v23 = 0LL;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v13 + 8 * v23);
      }

      while (v28 == -1);
      uint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }

    *(void *)(v13 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v24;
    *(void *)(v10[6] + 8 * v24) = v20;
    ++v10[2];
    if (__OFSUB__(v6--, 1LL))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (!v6) {
      goto LABEL_36;
    }
  }

  uint64_t v18 = v16 + 3;
  if (v18 >= a2) {
    goto LABEL_36;
  }
  id v17 = v30[v18];
  if (v17)
  {
    uint8_t v12 = v18;
    goto LABEL_23;
  }

  while (1)
  {
    uint8_t v12 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v12 >= a2) {
      goto LABEL_36;
    }
    id v17 = v30[v12];
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }

void sub_1000269FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100026A24(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleLTKTimerFired];
}

LABEL_52:
}

        unsigned int v5 = (char *)v5 + 1;
      }

      while (v101 != v5);
      id v57 = -[NSArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v118,  v127,  16LL);
      v101 = v57;
    }

    while (v57);
  }

  v116 = 0u;
  v117 = 0u;
  v114 = 0u;
  v115 = 0u;
  v104 = (id)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allValues](v98, "allValues"));
  v110 = [v104 countByEnumeratingWithState:&v114 objects:v122 count:16];
  if (!v110) {
    goto LABEL_100;
  }
  v108 = *(void *)v115;
  do
  {
    uint64_t v58 = 0LL;
    do
    {
      if (*(void *)v115 != v108) {
        objc_enumerationMutation(v104);
      }
      v59 = *(void *)(*((void *)&v114 + 1) + 8LL * (void)v58);
      uint64_t v60 = sub_100034824(v59);
      uint64_t v61 = (void *)SFNodeCopyContactIdentifier(v59);
      if (!v61)
      {
        uint64_t v62 = sub_100034970(v59);
        uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue(v62);
      }

      v63 = SFNodeCopyUserName(v59);
      uint64_t v64 = (void *)v63;
      if (v61) {
        uint64_t v65 = v60;
      }
      else {
        uint64_t v65 = 1;
      }
      if (((v61 == 0LL) & ~v60) != 0) {
        v66 = (void *)v63;
      }
      else {
        v66 = v61;
      }
      if ((v65 & 1) != 0)
      {
        uint64_t v67 = 0LL;
      }

      else
      {
        uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue( -[SDNodeCoalescer mappedContactIdentifierForContactIdentifier:]( v102,  "mappedContactIdentifierForContactIdentifier:",  v61));
        v66 = v61;
      }

      uint64_t v68 = v66;
      if (v68)
      {
        uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v105, "objectForKeyedSubscript:", v68));
        uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v69,  1LL,  0LL));
      }

      else
      {
        uint64_t v70 = 0LL;
        uint64_t v69 = 0LL;
      }

      SFNodeSetRangingData(v59, v70);
      uint64_t v71 = sub_100034824(v59);
      if ((_DWORD)v71)
      {
        v112 = v64;
        uint64_t v72 = v69;
        uint64_t v73 = v67;
        uint64_t v74 = (void *)SFNodeCopyIDSDeviceIdentifier(v59);
        if (!v74) {
          uint64_t v74 = (void *)SFNodeCopyComputerName(v59);
        }
        uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v106, "objectForKeyedSubscript:", v74));
        SFNodeSetSiblingNodes(v59, v75);
        uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v96, "objectForKeyedSubscript:", v74));
        if (v76) {
          SFNodeSetIconData(v59, v76);
        }

        uint64_t v67 = v73;
        uint64_t v69 = v72;
        uint64_t v64 = v112;
        goto LABEL_90;
      }

      if (v67)
      {
        uint64_t v77 = v97;
        v78 = v67;
LABEL_89:
        uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v77, "objectForKeyedSubscript:", v78));
        SFNodeSetSiblingNodes(v59, v75);
        goto LABEL_90;
      }

      if (v64)
      {
        uint64_t v77 = v94;
        v78 = v64;
        goto LABEL_89;
      }

      v82 = airdrop_log(v71);
      v83 = (os_log_s *)objc_claimAutoreleasedReturnValue(v82);
      if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v124 = v59;
        _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "Coalesced node %@ not handled", buf, 0xCu);
      }

      uint64_t v75 = 0LL;
LABEL_90:
      v79 = [v75 count];
      if ((unint64_t)v79 >= 2)
      {
        v80 = airdrop_log(v79);
        v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
        if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
        {
          v84 = NSPrintF("%##@", v75);
          v113 = v64;
          v85 = v69;
          v86 = v67;
          v87 = (void *)objc_claimAutoreleasedReturnValue(v84);
          *(_DWORD *)buf = 138412546;
          v124 = v59;
          v125 = 2112;
          v126 = v87;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_DEBUG,  "Coalesced node %@ represents nodes %@",  buf,  0x16u);

          uint64_t v67 = v86;
          uint64_t v69 = v85;
          uint64_t v64 = v113;
        }
      }

      uint64_t v58 = (char *)v58 + 1;
    }

    while (v110 != v58);
    v88 = [v104 countByEnumeratingWithState:&v114 objects:v122 count:16];
    v110 = v88;
  }

  while (v88);
LABEL_100:

  v89 = objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allValues](v98, "allValues"));
  coalescedNodes = v102->_coalescedNodes;
  v102->_coalescedNodes = (NSArray *)v89;

  v91 = v102->_coalescedNodes;
  return v91;
}

        goto LABEL_23;
      case 0x15u:
      case 0x17u:
      case 0x40u:
      case 0x41u:
        unsigned int v16 = 0;
        goto LABEL_5;
      case 0x16u:
      case 0x18u:
      case 0x1Eu:
      case 0x30u:
      case 0x31u:
        int v15 = 0;
LABEL_5:
        if ((unint64_t)v12 > 1)
        {
          id v17 = *v14;
          if (dword_100643B70 <= 20
            && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 20LL)))
          {
            else {
              uint64_t v18 = off_1005CFF58[(char)(v13 - 5)];
            }
            __int16 v20 = sub_10015643C(v17);
            LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleNearbyInfoReceivedData:cnx:peer:]",  20,  "BLE NearbyInfo frame %s, %s, %ld bytes, peer %@\n",  v18,  v20,  (char *)[v34 length] - 2,  v10);
          }

          __int16 v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "subdataWithRange:", 2, (char *)objc_msgSend(v34, "length") - 2));
          if (v15) {
            -[SDNearbyAgent serviceReceivedFrameType:serviceType:data:peer:]( self,  "serviceReceivedFrameType:serviceType:data:peer:",  v13,  v17,  v21,  v10);
          }
          if (v16) {
            -[SDNearbyAgent sessionReceivedFrameType:serviceType:data:peer:]( self,  "sessionReceivedFrameType:serviceType:data:peer:",  v13,  v17,  v21,  v10);
          }

          goto LABEL_23;
        }

        if (dword_100643B70 > 50) {
          goto LABEL_23;
        }
        if (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 50LL))
        {
          sub_100157FFC(v13);
          LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleNearbyInfoReceivedData:cnx:peer:]",  50LL,  "### BLE NearbyInfo frame %s, no service type\n");
        }

        break;
      case 0x20u:
        -[SDNearbyAgent _setupHandleCreateSession:data:](self, "_setupHandleCreateSession:data:", v9, v34);
        goto LABEL_23;
      case 0x21u:
        -[SDNearbyAgent _setupHandleSessionCreated:data:](self, "_setupHandleSessionCreated:data:", v9, v34);
        goto LABEL_23;
      case 0x22u:
      case 0x23u:
      case 0x24u:
        -[SDNearbyAgent _setupHandleSessionEncryptedFrame:type:cnx:]( self,  "_setupHandleSessionEncryptedFrame:type:cnx:",  v34,  *v11,  v9);
        goto LABEL_23;
      default:
        if (dword_100643B70 <= 50
          && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 50LL)))
        {
          LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleNearbyInfoReceivedData:cnx:peer:]",  50LL,  "### BLE NearbyInfo unsupported frame type 0x%02X\n");
        }

        goto LABEL_23;
    }
  }

  if (dword_100643B70 <= 50 && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 50LL))) {
    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleNearbyInfoReceivedData:cnx:peer:]",  50LL,  "### BLE NearbyInfo frame error: %#m\n");
  }
LABEL_23:
}

              uint64_t v9 = v64;
              goto LABEL_53;
            }
          }

          else if ((v67 & 1) == 0)
          {

            uint64_t v61 = 0LL;
          }

          uint64_t v67 = 1;
          goto LABEL_23;
        }
      }

      __break(1u);
LABEL_53:
      swift_once(&qword_100643F30, sub_100205FB8);
      goto LABEL_30;
    }

    __int16 v20 = (int64_t)&v15->isa + 4;
    goto LABEL_21;
  }

    swift_once(&qword_100644228, sub_100382454);
    goto LABEL_18;
  }

          __break(1u);
LABEL_53:
          __break(1u);
          goto LABEL_54;
        }

        __break(1u);
      }

      else
      {
        uint64_t v40 = *(void *)(v24 + 16);
        uint64_t v39 = *(void *)(v24 + 24);
        __int16 v41 = __OFSUB__(v39, v40);
        id v38 = v39 - v40;
        if (!v41) {
          goto LABEL_11;
        }
      }

      __break(1u);
      goto LABEL_52;
    }

    id v38 = BYTE6(v21);
    goto LABEL_11;
  }

  __int16 v25 = sub_1003C0970(v22, v20);
  if (!v23)
  {
    uint64_t v29 = v25;
    object = v26;
    uint64_t v31 = v27;
    uint64_t v32 = v28;
    uint64_t v33 = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v34 = (id)SFHexStringForData(v33);

    if (v34)
    {
      unint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      id v37 = v36;
    }

    else
    {
      unint64_t v35 = 0LL;
      id v37 = 0LL;
    }

    _StringGuts.grow(_:)(20LL);
    swift_bridgeObjectRelease((const char *)0xE000000000000000LL);
    if (v37) {
      uint64_t v50 = v35;
    }
    else {
      uint64_t v50 = 0x3E3F3F3F3CLL;
    }
    if (v37) {
      uint64_t v51 = v37;
    }
    else {
      uint64_t v51 = (const char *)0xE500000000000000LL;
    }
    uint64_t v52 = v51;
    String.append(_:)(*(Swift::String *)&v50);
    swift_bridgeObjectRelease(v51);
    v53._countAndFlagsBits = 0x3A646963202CLL;
    v53._object = (void *)0xE600000000000000LL;
    String.append(_:)(v53);
    swift_bridgeObjectRetain(object);
    v54._countAndFlagsBits = v29;
    v54._object = object;
    String.append(_:)(v54);
    swift_bridgeObjectRelease(object);
    v55._countAndFlagsBits = 0x3A702F65202CLL;
    v55._object = (void *)0xE600000000000000LL;
    String.append(_:)(v55);
    swift_bridgeObjectRetain(v32);
    id v56 = v31;
LABEL_49:
    uint64_t v75 = v32;
    String.append(_:)(*(Swift::String *)&v56);
    swift_bridgeObjectRelease_n(v32, 2LL);
    swift_bridgeObjectRelease(object);
  }

void sub_100028D5C(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___SDUnlockSetupRequest);
  -[SDUnlockSetupRequest setVersion:]( v2,  "setVersion:",  objc_msgSend((id)objc_opt_class(*(void *)(a1 + 32), v3), "setupRequestVersion"));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockAKSManager sharedManager](&OBJC_CLASS___SDAutoUnlockAKSManager, "sharedManager"));
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 ltkHashForLocalLTK]);

  if (v5) {
    -[SDUnlockSetupRequest setLtkHash:](v2, "setLtkHash:", v5);
  }
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockAKSManager sharedManager](&OBJC_CLASS___SDAutoUnlockAKSManager, "sharedManager"));
  [v6 updateLTKs];

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockAKSManager sharedManager](&OBJC_CLASS___SDAutoUnlockAKSManager, "sharedManager"));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceID]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 remoteLTKForDeviceID:v8]);
  BOOL v10 = v9 == 0LL;

  -[SDUnlockSetupRequest setRemoteNeedsLTK:](v2, "setRemoteNeedsLTK:", v10);
  uint64_t v11 = objc_opt_new(&OBJC_CLASS___NSDate);
  [*(id *)(a1 + 32) setKeyExchangeDate:v11];

  uint64_t v13 = auto_unlock_log(v12);
  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v29 = v2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Sending SDUnlockSetupRequest %@", buf, 0xCu);
  }

  unsigned int v15 = [*(id *)(a1 + 32) useAttestedProtocol];
  unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transport]);
  id v17 = (void *)objc_claimAutoreleasedReturnValue(-[SDUnlockSetupRequest data](v2, "data"));
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceID]);
  id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sessionID]);
  __int16 v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [*(id *)(a1 + 32) messageTimeout]));
  uint64_t v24 = 3221225472LL;
  __int16 v25 = sub_100029034;
  uint64_t v26 = &unk_1005CB4E8;
  uint64_t v27 = *(void *)(a1 + 32);
  __int16 v23 = _NSConcreteStackBlock;
  if (v15) {
    uint64_t v21 = 2001LL;
  }
  else {
    uint64_t v21 = 101LL;
  }
  unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v16,  "sendAutoUnlockPayload:toDevice:type:sessionID:queueOneID:timeout:completion:",  v17,  v18,  v21,  v19,  0,  v20,  &v23,  v23,  v24,  v25,  v26,  v27));
  [*(id *)(a1 + 32) setSetupMessageIdentifier:v22];

  objc_msgSend( *(id *)(a1 + 32),  "restartResponseTimer:",  sub_100114580((double)(uint64_t)objc_msgSend(*(id *)(a1 + 32), "responseTimeout")));
}

void sub_100029034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 32), "setSetupError:");
    [*(id *)(a1 + 32) setErrorType:5];
    [*(id *)(a1 + 32) invalidateResponseTimer];
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = SFAutoUnlockErrorDomain;
    NSErrorUserInfoKey v8 = NSLocalizedDescriptionKey;
    uint64_t v9 = @"Setup request failed";
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v9,  &v8,  1LL));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v5,  151LL,  v6));
    [v4 notifyDelegateWithError:v7];
  }

void sub_100029328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 32), "setSetupError:");
    [*(id *)(a1 + 32) setErrorType:6];
    [*(id *)(a1 + 32) invalidateResponseTimer];
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = SFAutoUnlockErrorDomain;
    NSErrorUserInfoKey v8 = NSLocalizedDescriptionKey;
    uint64_t v9 = @"Setup request failed";
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v9,  &v8,  1LL));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v5,  152LL,  v6));
    [v4 notifyDelegateWithError:v7];
  }

id sub_1000294EC(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleMessage:*(void *)(a1 + 40) fromDeviceID:*(void *)(a1 + 48) type:*(unsigned __int16 *)(a1 + 56)];
}

void sub_10002A89C( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10002A8AC()
{
}

void sub_10002A8D8(void *a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1 passcode]);
  uint64_t v4 = @"YES";
  if (!v3) {
    uint64_t v4 = @"NO";
  }
  int v5 = 138412290;
  uint8_t v6 = v4;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "Invalid parameters (passcode = %@)",  (uint8_t *)&v5,  0xCu);
}

void sub_10002A984()
{
}

void sub_10002A9B0()
{
}

void sub_10002A9DC()
{
}

void sub_10002AA08(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "Error in session created response: %d",  (uint8_t *)v2,  8u);
  sub_1000147C8();
}

void sub_10002AA78()
{
}

void sub_10002AAA4()
{
}

void sub_10002AAD0()
{
}

void sub_10002AAFC()
{
}

void sub_10002AB5C()
{
}

void sub_10002AB88()
{
}

void sub_10002ABB4()
{
}

void sub_10002AC14()
{
}

void sub_10002AC40()
{
}

uint64_t SDAutoUnlockAuthPromptResponseReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 32) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_43;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_45;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_43:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_45:
        uint64_t v30 = 24LL;
        goto LABEL_54;
      case 2u:
        uint64_t Data = PBReaderReadData(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(Data);
        __int16 v20 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v19;

        continue;
      case 3u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0LL;
        *(_BYTE *)(a1 + 32) |= 4u;
        while (2)
        {
          unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1LL || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v25 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v23 |= (unint64_t)(v25 & 0x7F) << v21;
            if (v25 < 0)
            {
              v21 += 7;
              BOOL v9 = v22++ >= 9;
              if (v9)
              {
                uint64_t v23 = 0LL;
                goto LABEL_49;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v23 = 0LL;
        }
LABEL_49:
        *(_BYTE *)(a1 + 2_Block_object_dispose((const void *)(v1 - 96), 8) = v23 != 0;
        continue;
      case 4u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 32) |= 1u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      unint64_t v28 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v28 == -1LL || v28 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v29 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
      v14 |= (unint64_t)(v29 & 0x7F) << v26;
      if ((v29 & 0x80) == 0) {
        goto LABEL_51;
      }
      v26 += 7;
      BOOL v9 = v27++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_53;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_51:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v14) = 0;
    }
LABEL_53:
    uint64_t v30 = 8LL;
LABEL_54:
    *(_DWORD *)(a1 + v30) = v14;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

LABEL_22:
    char v8 = 0;
    goto LABEL_23;
  }

  if ((*((_BYTE *)v4 + 32) & 4) != 0) {
    goto LABEL_22;
  }
LABEL_18:
  char v8 = (*((_BYTE *)v4 + 32) & 1) == 0;
  if ((has & 1) != 0)
  {
    if ((*((_BYTE *)v4 + 32) & 1) == 0 || self->_errorCode != *((_DWORD *)v4 + 2)) {
      goto LABEL_22;
    }
    char v8 = 1;
  }

    if (dword_100642038 <= 30
      && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 30LL)))
    {
      LogPrintF( &dword_100642038,  "-[SFNotificationProxy requestRemove:withReason:]",  30LL,  "NotifProxy: Remove actual notification per request\n");
    }

    unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue(+[SDNotificationManager sharedManager](&OBJC_CLASS___SDNotificationManager, "sharedManager"));
    [v22 homePodHandoffRemove:v6 reason:a4];
LABEL_43:

    goto LABEL_44;
  }

  if (dword_100642038 <= 90 && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 90LL))) {
    LogPrintF( &dword_100642038,  "-[SFNotificationProxy requestRemove:withReason:]",  90LL,  "### NotifProxy: RequestRemove failed, unrecognized ID: %@\n",  v24);
  }
LABEL_45:
}

    unsigned int v13 = @"UNLOCK_WATCH_SE";
    goto LABEL_23;
  }

  uint64_t v11 = SFMinorWatchHardwareVersion(v5);
  if ((v11 - 1) < 4)
  {
    unsigned int v13 = @"UNLOCK_WATCH_SERIES_FIVE";
LABEL_23:
    char v16 = SFLocalizedStringForKey(v13, v12);
    id v17 = (__CFString *)objc_claimAutoreleasedReturnValue(v16);
    goto LABEL_31;
  }
}
}

  if (v4)
  {
    unsigned int v13 = (int)v6;
    __int16 v20 = NSLocalizedDescriptionKey;
    uint64_t v14 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  DebugGetErrorString(v6, 0LL, 0LL));
    unint64_t v15 = objc_claimAutoreleasedReturnValue(v14);
    char v16 = (void *)v15;
    id v17 = @"?";
    if (v15) {
      id v17 = (const __CFString *)v15;
    }
    char v21 = v17;
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v21,  &v20,  1LL));
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v13,  v18));
    ((void (**)(id, void *, uint64_t, void *))v4)[2](v4, 0LL, 0LL, v19);
  }

  char v12 = 0LL;
LABEL_7:
}

LABEL_23:
      goto LABEL_24;
    }
  }

  char v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) emailAddress]);
  if (v4)
  {
    v63 = v3;
    uint64_t v77 = 0u;
    v78 = 0u;
    v79 = 0u;
    v80 = 0u;
    unint64_t v6 = (id)objc_claimAutoreleasedReturnValue([v2 contactsWithPhoneNumberOrEmail:v4 keys:v3]);
    char v12 = [v6 countByEnumeratingWithState:&v77 objects:v84 count:16];
    if (v12)
    {
      unsigned int v13 = v12;
      uint64_t v14 = *(void *)v78;
      while (2)
      {
        for (i = 0LL; i != v13; i = (char *)i + 1)
        {
          if (*(void *)v78 != v14) {
            objc_enumerationMutation(v6);
          }
          if (*(_BYTE *)(a1 + 48))
          {
            char v16 = *(void *)(*((void *)&v77 + 1) + 8LL * (void)i);
            id v17 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
            LOBYTE(v16) = [v17 contactIsBlocked:v16];

            if ((v16 & 1) != 0)
            {
              __int16 v20 = *(void *)(a1 + 40);
              char v21 = NSErrorWithOSStatusF(4294896150LL, "Contact is blocked");
              unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
              (*(void (**)(uint64_t, void, void *))(v20 + 16))(v20, 0LL, v22);

              uint64_t v18 = v6;
              goto LABEL_20;
            }
          }
        }

        unsigned int v13 = [v6 countByEnumeratingWithState:&v77 objects:v84 count:16];
        if (v13) {
          continue;
        }
        break;
      }
    }

    if ([v6 count])
    {
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v2 contactWithPreferredIdentifierForContacts:v6]);
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 identifier]);
      [*(id *)(a1 + 32) setContactIdentifier:v19];

      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
LABEL_20:
      uint64_t v3 = v63;
LABEL_21:

      goto LABEL_22;
    }

    uint64_t v62 = v2;
    uint64_t v23 = @"@icloud.com";
    if ([v4 rangeOfString:@"@icloud.com" options:13] == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v23 = @"@mac.com";
      uint64_t v3 = v63;
      if ([v4 rangeOfString:@"@mac.com" options:13] == (id)0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v23 = @"@me.com";
        if ([v4 rangeOfString:@"@me.com" options:13] == (id)0x7FFFFFFFFFFFFFFFLL)
        {
          uint64_t v23 = @"@gmail.com";
          if ([v4 rangeOfString:@"@gmail.com" options:13] == (id)0x7FFFFFFFFFFFFFFFLL)
          {
            uint64_t v23 = @"@googlemail.com";
            if ([v4 rangeOfString:@"@googlemail.com" options:13] == (id)0x7FFFFFFFFFFFFFFFLL)
            {
              uint64_t v23 = 0LL;
              unint64_t v24 = 0LL;
            }

            else
            {
              unint64_t v24 = &off_1005FAEF8;
            }
          }

          else
          {
            unint64_t v24 = &off_1005FAEE0;
          }
        }

        else
        {
          unint64_t v24 = &off_1005FAEC8;
        }
      }

      else
      {
        unint64_t v24 = &off_1005FAEB0;
      }
    }

    else
    {
      unint64_t v24 = &off_1005FAE98;
      uint64_t v3 = v63;
    }

    uint64_t v75 = 0u;
    uint64_t v76 = 0u;
    uint64_t v73 = 0u;
    uint64_t v74 = 0u;
    char v25 = [v24 countByEnumeratingWithState:&v73 objects:v83 count:16];
    if (v25)
    {
      char v26 = *(void *)v74;
      id v57 = v24;
      uint64_t v58 = v23;
      id v56 = *(void *)v74;
      while (2)
      {
        unsigned int v27 = 0LL;
        v59 = v25;
        do
        {
          if (*(void *)v74 != v26) {
            objc_enumerationMutation(v24);
          }
          uint64_t v60 = v27;
          uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( [v4 stringByReplacingOccurrencesOfString:v23 withString:*(void *)(*((void *)&v73 + 1) + 8 * v27)]);
          unint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v2 contactsWithPhoneNumberOrEmail:v18 keys:v3]);

          uint64_t v71 = 0u;
          uint64_t v72 = 0u;
          uint64_t v69 = 0u;
          uint64_t v70 = 0u;
          unint64_t v6 = v28;
          char v29 = [v6 countByEnumeratingWithState:&v69 objects:v82 count:16];
          if (v29)
          {
            uint64_t v30 = v29;
            uint64_t v31 = *(void *)v70;
            while (2)
            {
              for (j = 0LL; j != v30; j = (char *)j + 1)
              {
                if (*(void *)v70 != v31) {
                  objc_enumerationMutation(v6);
                }
                uint64_t v33 = *(void *)(*((void *)&v69 + 1) + 8LL * (void)j);
                uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
                LODWORD(v33) = [v34 contactIsBlocked:v33];

                if ((_DWORD)v33)
                {
                  uint64_t v51 = *(void *)(a1 + 40);
                  uint64_t v52 = NSErrorWithOSStatusF(4294896150LL, "Contact is blocked");
                  uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
                  (*(void (**)(uint64_t, void, void *))(v51 + 16))(v51, 0LL, v53);

                  v54 = v6;
                  uint64_t v2 = v62;
                  goto LABEL_72;
                }
              }

              uint64_t v30 = [v6 countByEnumeratingWithState:&v69 objects:v82 count:16];
              if (v30) {
                continue;
              }
              break;
            }
          }

          if ([v6 count])
          {
            uint64_t v2 = v62;
            v54 = (void *)objc_claimAutoreleasedReturnValue([v62 contactWithPreferredIdentifierForContacts:v6]);
            v55 = (void *)objc_claimAutoreleasedReturnValue([v54 identifier]);
            [*(id *)(a1 + 32) setContactIdentifier:v55];

            [*(id *)(a1 + 32) setEmailAddress:v18];
            (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
LABEL_72:
            uint64_t v3 = v63;

            goto LABEL_21;
          }

          unsigned int v27 = v60 + 1;
          uint64_t v2 = v62;
          uint64_t v3 = v63;
          unint64_t v24 = v57;
          uint64_t v23 = v58;
          char v26 = v56;
        }

        while ((id)(v60 + 1) != v59);
        char v25 = [v57 countByEnumeratingWithState:&v73 objects:v83 count:16];
        if (v25) {
          continue;
        }
        break;
      }
    }
  }

  unint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) phoneNumber]);
  id v36 = v35 != 0LL;
  if (v35)
  {
    id v37 = (void *)objc_claimAutoreleasedReturnValue([v2 contactsWithPhoneNumberOrEmail:v35 keys:v3]);
    if ([v37 count])
    {
      uint64_t v64 = v3;
      uint64_t v67 = 0u;
      uint64_t v68 = 0u;
      uint64_t v65 = 0u;
      v66 = 0u;
      uint64_t v61 = v37;
      id v38 = v37;
      uint64_t v39 = [v38 countByEnumeratingWithState:&v65 objects:v81 count:16];
      if (v39)
      {
        uint64_t v40 = v39;
        __int16 v41 = *(void *)v66;
        while (2)
        {
          for (k = 0LL; k != v40; k = (char *)k + 1)
          {
            if (*(void *)v66 != v41) {
              objc_enumerationMutation(v38);
            }
            if (*(_BYTE *)(a1 + 48))
            {
              __int16 v43 = *(void *)(*((void *)&v65 + 1) + 8LL * (void)k);
              uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
              LOBYTE(v43) = [v44 contactIsBlocked:v43];

              if ((v43 & 1) != 0)
              {
                uint64_t v46 = *(void *)(a1 + 40);
                uint64_t v47 = NSErrorWithOSStatusF(4294896150LL, "Contact is blocked");
                uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
                (*(void (**)(uint64_t, void, void *))(v46 + 16))(v46, 0LL, v48);

                goto LABEL_67;
              }
            }
          }

          uint64_t v40 = [v38 countByEnumeratingWithState:&v65 objects:v81 count:16];
          if (v40) {
            continue;
          }
          break;
        }
      }

      id v38 = (id)objc_claimAutoreleasedReturnValue([v2 contactWithPreferredIdentifierForContacts:v38]);
      uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v38 identifier]);
      [*(id *)(a1 + 32) setContactIdentifier:v45];

      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
LABEL_67:

      uint64_t v3 = v64;
      id v36 = v35 != 0LL;
      id v37 = v61;
    }

    else
    {
      id v36 = 0;
    }
  }

  if (!v36)
  {
    uint64_t v49 = *(void *)(a1 + 40);
    uint64_t v50 = NSErrorWithOSStatusF(4294960569LL, "Contact not found");
    char v4 = (void *)objc_claimAutoreleasedReturnValue(v50);
    (*(void (**)(uint64_t, void, void *))(v49 + 16))(v49, 0LL, v4);
    goto LABEL_23;
  }
}
}
      }

      int v10 = [obj countByEnumeratingWithState:&v62 objects:v68 count:16];
    }

    while (v10);
  }

  if (a4 == 1)
  {
    unint64_t v28 = -[NSMutableSet count](v57, "count");
    char v29 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockTransport lastSeenWatchDate](self, "lastSeenWatchDate"));
    uint64_t v30 = v29;
    if (!v28)
    {

      if (v30)
      {
        uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockTransport watchCurrentlyInList](self, "watchCurrentlyInList"));
        uint64_t v47 = [v46 BOOLValue];

        if (!v47) {
          goto LABEL_48;
        }
        uint64_t v49 = auto_unlock_log(v48);
        uint64_t v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "Last watch removed from list -- updating watchCurrentlyInList and lastSeenWatchDate",  buf,  2u);
        }

        -[SDAutoUnlockTransport setWatchCurrentlyInList:](self, "setWatchCurrentlyInList:", &__kCFBooleanFalse);
      }

      else
      {
        uint64_t v51 = -[SDAutoUnlockTransport activityServiceHasWatch](self, "activityServiceHasWatch");
        if (!v51) {
          goto LABEL_48;
        }
        uint64_t v52 = auto_unlock_log(v51);
        uint64_t v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "Activity service has a Watch updating last seen date",  buf,  2u);
        }
      }

      v54 = objc_opt_new(&OBJC_CLASS___NSDate);
      -[SDAutoUnlockTransport setLastSeenWatchDate:](self, "setLastSeenWatchDate:", v54);

      goto LABEL_48;
    }

    if (!v30)
    {
      uint64_t v32 = auto_unlock_log(v31);
      uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Updating last seen date", buf, 2u);
      }

      uint64_t v34 = objc_opt_new(&OBJC_CLASS___NSDate);
      -[SDAutoUnlockTransport setLastSeenWatchDate:](self, "setLastSeenWatchDate:", v34);
    }

    unint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockTransport watchCurrentlyInList](self, "watchCurrentlyInList"));
    id v36 = [v35 BOOLValue];

    if ((v36 & 1) == 0)
    {
      id v38 = auto_unlock_log(v37);
      uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "Watch added to list -- updating watchCurrentlyInList and lastSeenWatchDate",  buf,  2u);
      }

      -[SDAutoUnlockTransport setWatchCurrentlyInList:](self, "setWatchCurrentlyInList:", &__kCFBooleanTrue);
      uint64_t v40 = objc_opt_new(&OBJC_CLASS___NSDate);
      -[SDAutoUnlockTransport setLastSeenWatchDate:](self, "setLastSeenWatchDate:", v40);
    }

    __int16 v41 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockTransport watchExistedInUnlockList](self, "watchExistedInUnlockList"));
    v42 = [v41 BOOLValue];

    if ((v42 & 1) == 0)
    {
      uint64_t v44 = auto_unlock_log(v43);
      uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Updating existed in list", buf, 2u);
      }

      -[SDAutoUnlockTransport setWatchExistedInUnlockList:](self, "setWatchExistedInUnlockList:", &__kCFBooleanTrue);
    }
  }

    char v8 = 0;
    goto LABEL_23;
  }

  if ((*((_BYTE *)v4 + 32) & 4) != 0) {
    goto LABEL_22;
  }
LABEL_18:
  char v8 = (*((_BYTE *)v4 + 32) & 1) == 0;
  if ((has & 1) != 0)
  {
    if ((*((_BYTE *)v4 + 32) & 1) == 0 || self->_errorCode != *((_DWORD *)v4 + 2)) {
      goto LABEL_22;
    }
    char v8 = 1;
  }

    unint64_t v7 = @"?";
    goto LABEL_23;
  }

    unint64_t v7 = @"?";
    goto LABEL_23;
  }

  if (v10)
  {
  }

LABEL_25:
  return v12;
}

    *(_BYTE *)(v5 + 842) = v7;
    return [(id)v1[4] _update];
  }

  if (dword_100643B70 > 30) {
    return result;
  }
  if (dword_100643B70 == -1)
  {
    uint64_t result = (void *)_LogCategory_Initialize(&dword_100643B70, 30LL);
    if (!(_DWORD)result) {
      return result;
    }
    unsigned int v13 = v1[4];
    char v8 = *(unsigned __int8 *)(v13 + 842);
    unint64_t v6 = *(_DWORD *)(v13 + 476);
  }

  if (v8) {
    BOOL v9 = "enabled";
  }
  else {
    BOOL v9 = "disabled";
  }
  return (void *)LogPrintF( &dword_100643B70,  "-[SDNearbyAgent setEnhancedDiscovery:]_block_invoke",  30LL,  "Enhanced discovery %s, reference count %d\n",  v9,  v6);
}

      uint64_t v18 = 0LL;
LABEL_24:
      self->_ddFastScanLastEndTicks = v18;
      goto LABEL_25;
    }
  }

  else
  {
  }

  if (v10) {
    goto LABEL_22;
  }
LABEL_25:
  ddFastScanTimer = self->_ddFastScanTimer;
  if (ddFastScanTimer)
  {
    __int16 v20 = ddFastScanTimer;
    dispatch_source_cancel(v20);
    char v21 = self->_ddFastScanTimer;
    self->_ddFastScanTimer = 0LL;
  }

  -[SDNearbyAgent _update](self, "_update");
}

    int v10 = (v15 - 1) & v15;
    unsigned int v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_5:
    sub_1003B52B0(v17, *(id *)(*(void *)(a1 + 56) + 8 * v13));
  }

  char v16 = v14 + 4;
  if (v16 >= v11)
  {
LABEL_23:
    swift_release(a1);
    return;
  }

  unint64_t v15 = *(void *)(v7 + 8 * v16);
  if (v15)
  {
    unint64_t v6 = v16;
    goto LABEL_22;
  }

  while (1)
  {
    unint64_t v6 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v6 >= v11) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v6);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }

    unint64_t v6 = (v14 - 1) & v14;
    BOOL v9 = __clz(__rbit64(v14)) + (v2 << 6);
LABEL_5:
    int v10 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v9);
    uint64_t v11 = *v10;
    char v12 = v10[1];
    swift_bridgeObjectRetain(v12);
    sub_1003B572C(v16, v11, v12);
    swift_bridgeObjectRelease(v16[1]);
  }

  unint64_t v15 = v13 + 4;
  if (v15 >= v7)
  {
LABEL_23:
    swift_release(a1);
    return;
  }

  uint64_t v14 = *(void *)(v3 + 8 * v15);
  if (v14)
  {
    uint64_t v2 = v15;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v2 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v2 >= v7) {
      goto LABEL_23;
    }
    uint64_t v14 = *(void *)(v3 + 8 * v2);
    ++v15;
    if (v14) {
      goto LABEL_22;
    }
  }

    unint64_t v7 = (v18 - 1) & v18;
    uint64_t v11 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_5:
    char v12 = *(void *)(*(void *)(v3 + 56) + 8 * v11);
    swift_retain(v12);
    sub_100342428();
    object = v13._object;
    String.append(_:)(v13);
    swift_bridgeObjectRelease(object);
    v15._countAndFlagsBits = 10LL;
    v15._object = (void *)0xE100000000000000LL;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 9LL;
    v16._object = (void *)0xE100000000000000LL;
    String.append(_:)(v16);
    swift_release(v12);
    swift_bridgeObjectRelease(0xE100000000000000LL);
  }

  uint64_t v19 = v17 + 4;
  if (v19 >= v8)
  {
LABEL_23:
    swift_release(v3);
    __int16 v20 = v24;
    *a2 = v23;
    a2[1] = v20;
    return;
  }

  uint64_t v18 = *(void *)(v4 + 8 * v19);
  if (v18)
  {
    BOOL v9 = v19;
    goto LABEL_22;
  }

  while (1)
  {
    BOOL v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v8) {
      goto LABEL_23;
    }
    uint64_t v18 = *(void *)(v4 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }

  __break(1u);
}

  unsigned int v22 = *(void *)(v1 + OBJC_IVAR____TtCV16DaemoniOSLibrary16SDAuthentication10LTKManager_localLTKByKeyClass);
  if (*(void *)(v22 + 16))
  {
    uint64_t v23 = sub_1003AD6B0(2u);
    if ((v24 & 1) != 0)
    {
      char v25 = *(void *)(*(void *)(v22 + 56) + 8 * v23);
      char v26 = (os_unfair_lock_s *)(*(void *)(v25
                                           + OBJC_IVAR____TtCV16DaemoniOSLibrary16SDAuthentication13LTKCollection_ltkLock)
                               + 16LL);
      swift_retain();
      os_unfair_lock_lock(v26);
      sub_100271B04(&v31);
      unsigned int v27 = v31;
      os_unfair_lock_unlock(v26);
      if ((v27 & 1) != 0) {
        sub_1003498F0();
      }
      swift_release(v25);
    }
  }

    uint64_t v67 = (v46 - 1) & v46;
    uint64_t v68 = v47;
    uint64_t v23 = __clz(__rbit64(v46)) + (v47 << 6);
LABEL_5:
    sub_1002499DC(*(void *)(v66 + 56) + 48 * v23, (uint64_t)v79);
    sub_1001CCE4C(v79, &v76);
    char v25 = *((void *)&v77 + 1);
    unint64_t v24 = v77;
    sub_10019A708(&v76, v77);
    char v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 32))(v24, v25);
    unsigned int v27 = UUID.uuidString.getter(v26);
    char v29 = v28;
    uint64_t v30 = v64;
    uint64_t v31 = *(void (**)(char *, uint64_t))(v64 + 8);
    v31(v8, v3);
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
    uint64_t v33 = (uint64_t)v65;
    v32(v65, v60, v3);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 56))(v33, 0LL, 1LL, v3);
    sub_100411A2C(v33, v27, v29, v22);
    swift_bridgeObjectRelease(v29);
    sub_100187100(v33, &qword_10064DA60);
    uint64_t v34 = v63;
    v32(v63, v22, v3);
    swift_beginAccess(v61, v75, 33LL, 0LL);
    sub_1003B54D0((uint64_t)v8, v34);
    swift_endAccess(v75);
    v31(v8, v3);
    v32(v8, v22, v3);
    uint64_t v69 = v77;
    unint64_t v35 = v77;
    id v36 = sub_10019A708(&v76, v77);
    *(_OWORD *)&v75[3] = v69;
    id v37 = sub_1001A4B04(v75);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v35 - 8) + 16LL))(v37, v36, v35);
    sub_1001CE0D0((__int128 *)v75, (uint64_t)v72);
    id v38 = v70;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v70);
    uint64_t v71 = v38;
    uint64_t v39 = v73;
    uint64_t v40 = v74;
    __int16 v41 = sub_1002499B4((uint64_t)v72, v73);
    __chkstk_darwin(v41);
    __int16 v43 = (char *)&v57 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *))(v44 + 16))(v43);
    sub_1002FAD64((uint64_t)v43, (uint64_t)v8, isUniquelyReferenced_nonNull_native, &v71, v39, v40);
    sub_10018709C(v72);
    char v21 = v71;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    v31(v8, v3);
    v31((char *)v22, v3);
    sub_10018709C(&v76);
    uint64_t v18 = v67;
    __int16 v20 = v68;
  }

  uint64_t v48 = v20 + 5;
  if (v20 + 5 < v59)
  {
    uint64_t v46 = v58[v48];
    if (!v46)
    {
      while (1)
      {
        uint64_t v47 = v48 + 1;
        if (__OFADD__(v48, 1LL)) {
          goto LABEL_29;
        }
        if (v47 >= v59) {
          goto LABEL_23;
        }
        uint64_t v46 = v58[v47];
        ++v48;
        if (v46) {
          goto LABEL_22;
        }
      }
    }

    uint64_t v47 = v20 + 5;
    goto LABEL_22;
  }

  v80 = (char *)v35;
  v81 = [v67 aksToken];
  v82 = v183;
  v83 = v182;
  if (!v81)
  {
    v94 = sub_100187014();
    uint64_t v58 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v94, 0LL, 0LL);
    *(_DWORD *)v95 = 10;
    *(void *)(v95 + _Block_object_dispose((const void *)(v1 - 96), 8) = 0xD00000000000001FLL;
    *(void *)(v95 + 16) = 0x800000010050AEB0LL;
    swift_willThrow(v58);
    v96 = swift_bridgeObjectRelease(v69);
    (*(void (**)(char *, char *, __n128))(v186 + 8))(v187, v80, v96);
    sub_10018709C(&v198);
    goto LABEL_29;
  }

  v84 = v81;
  v181 = (char *)v69;
  v185 = v80;
  v85 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v81);
  v87 = v86;

  sub_10019A6C4((uint64_t)&v198, (uint64_t)&aBlock);
  (*(void (**)(uint64_t, char *, uint64_t))(v82 + 16))( v83,  &v70[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_sessionID],  v71);
  v88 = v83;
  v89 = *(void *)&v70[v37];
  v90 = type metadata accessor for SDAuthenticationAKSAuthSession(0LL);
  v91 = swift_allocObject(v90, *(unsigned int *)(v90 + 48), *(unsigned __int16 *)(v90 + 52));
  *(void *)(v91 + OBJC_IVAR____TtC16DaemoniOSLibrary30SDAuthenticationAKSAuthSession_aksSession) = 0LL;
  v92 = [(id)objc_opt_self(SDAutoUnlockAKSManager) sharedManager];
  if (!v92)
  {
    __break(1u);
    return;
  }

  *(void *)(v91 + OBJC_IVAR____TtC16DaemoniOSLibrary30SDAuthenticationAKSAuthSession_aksManager) = v92;
  *(_BYTE *)(v91 + OBJC_IVAR____TtC16DaemoniOSLibrary30SDAuthenticationAKSAuthSession_role) = 0;
  sub_1001CE0D0(&aBlock, v91 + OBJC_IVAR____TtC16DaemoniOSLibrary30SDAuthenticationAKSAuthSession_peerDevice);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 32))( v91 + OBJC_IVAR____TtC16DaemoniOSLibrary30SDAuthenticationAKSAuthSession_sessionID,  v88,  v71);
  *(void *)(v91 + OBJC_IVAR____TtC16DaemoniOSLibrary30SDAuthenticationAKSAuthSession_type) = v89;
  v93 = *(void *)&v70[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationLockSession_aksAuthSession];
  *(void *)&v70[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationLockSession_aksAuthSession] = v91;
  swift_retain(v91);
  swift_release(v93);
  sub_10019BA8C(v85, v87);
  sub_10043E788(0LL, 0xF000000000000000LL);
  sub_10043E438(v85, v87);
  v102 = v101;
  sub_100189B20(v85, v87);
  v184 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v102);
  v104 = v103;

  v105 = sub_10043E64C();
  v170 = v106;
  v183 = v104;
  v172 = (void *)v91;
  v182 = v85;
  v107 = [objc_allocWithZone((Class)SDAuthenticationResponse) init];
  if (!v107)
  {
    v118 = sub_100187014();
    uint64_t v58 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v118, 0LL, 0LL);
    *(_DWORD *)v119 = 10;
    *(void *)(v119 + _Block_object_dispose((const void *)(v1 - 96), 8) = 0xD000000000000031LL;
    *(void *)(v119 + 16) = 0x800000010050AED0LL;
    swift_willThrow(v58);
    swift_bridgeObjectRelease(v181);
    sub_100189B20(v184, v183);
    sub_100189B20((uint64_t)v105, v170);
LABEL_45:
    sub_100189B20(v182, v87);
    swift_release(v172);
    (*(void (**)(char *, char *))(v186 + 8))(v187, v185);
    goto LABEL_28;
  }

  v108 = v107;
  v169 = (uint64_t)v105;
  UUID.uuidString.getter(v107);
  v110 = v109;
  v111 = String._bridgeToObjectiveC()();
  objc_msgSend(v108, "setSessionID:", v111, swift_bridgeObjectRelease(v110).n128_f64[0]);

  [v108 setVersion:1];
  v112 = v183;
  v113 = Data._bridgeToObjectiveC()().super.isa;
  [v108 setAksToken:v113];

  if ((unint64_t)(*(void *)&v171[v37] - 1LL) < 4)
  {
    v114 = *(void *)&v171[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationAuthSession_rangingSession];
    if (v114)
    {
      v115 = *(void *)(v114 + 16);
      v116 = *(void *)(v114 + 24);
      sub_10019BA8C(v115, v116);
      v117.super.isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100189B20(v115, v116);
    }

    else
    {
      v117.super.isa = 0LL;
    }

    [v108 setAwdlInfo:v117.super.isa];
  }

  v120 = [v108 data];
  if (!v120)
  {
    v132 = sub_100187014();
    uint64_t v58 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v132, 0LL, 0LL);
    *(_DWORD *)v133 = 10;
    *(void *)(v133 + _Block_object_dispose((const void *)(v1 - 96), 8) = 0xD000000000000022LL;
    *(void *)(v133 + 16) = 0x800000010050AF10LL;
    swift_willThrow(v58);
    swift_bridgeObjectRelease(v181);
    sub_100189B20(v184, v112);
    sub_100189B20(v169, v170);

    goto LABEL_45;
  }

  v121 = v120;
  v166 = v87;
  v168 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v120);
  v123 = v122;

  v124 = v108;
  v125 = (os_log_s *)Logger.logObject.getter(v124);
  v126 = static os_log_type_t.default.getter();
  v127 = os_log_type_enabled(v125, v126);
  v167 = v123;
  v165 = v124;
  if (v127)
  {
    v128 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v129 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)v128 = 138412290;
    *(void *)&aBlock = v124;
    v130 = v124;
    v123 = v167;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v128 + 4, v128 + 12);
    *v129 = v108;

    _os_log_impl((void *)&_mh_execute_header, v125, v126, "Sending authentication response: %@", v128, 0xCu);
    v131 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v129, 1LL, v131);
    swift_slowDealloc(v129, -1LL, -1LL);
    swift_slowDealloc(v128, -1LL, -1LL);
  }

  else
  {

    v125 = (os_log_s *)v124;
  }

  v134 = v180;
  v135 = v179;

  sub_10019A6C4((uint64_t)&v198, (uint64_t)&v195);
  v136 = (void *)swift_allocObject(&unk_1005DBC00, 80LL, 7LL);
  v137 = v171;
  v138 = v168;
  v136[2] = v171;
  v136[3] = v138;
  v136[4] = v123;
  sub_1001CE0D0(&v195, (uint64_t)(v136 + 5));
  v193 = sub_10033CABC;
  v194 = v136;
  *(void *)&aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256LL;
  v191 = sub_1001B9FE4;
  v192 = &unk_1005DBC18;
  v139 = _Block_copy(&aBlock);
  v180 = v137;
  v140 = sub_10019BA8C(v138, v123);
  v141 = v176;
  static DispatchQoS.unspecified.getter(v140);
  v189 = _swiftEmptyArrayStorage;
  v142 = sub_100183F14( (unint64_t *)&qword_100646510,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v143 = sub_100183098((uint64_t *)&unk_1006460D0);
  v144 = sub_1001CD538( (unint64_t *)&qword_100646520,  (uint64_t *)&unk_1006460D0,  (uint64_t)&protocol conformance descriptor for [A]);
  v145 = v143;
  v146 = v175;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v189, v145, v144, v175, v142);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v141, v135, v139);
  _Block_release(v139);
  (*((void (**)(char *, uint64_t))v134 + 1))(v135, v146);
  (*(void (**)(char *, uint64_t))(v177 + 8))(v141, v178);
  swift_release(v194);
  v147 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  v148 = String._bridgeToObjectiveC()();
  LOBYTE(v146) = [v147 BOOLForKey:v148];

  if ((v146 & 1) != 0 || (unint64_t)(*(void *)&v137[v37] - 1LL) >= 4)
  {
    swift_bridgeObjectRelease(v181, v165);
    v158 = (os_log_s *)Logger.logObject.getter(v157);
    v159 = static os_log_type_t.default.getter();
    v160 = os_log_type_enabled(v158, v159);
    v161 = v166;
    v162 = v182;
    v163 = v183;
    if (v160)
    {
      v164 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v164 = 0;
      _os_log_impl((void *)&_mh_execute_header, v158, v159, "Skipping ranging", v164, 2u);
      swift_slowDealloc(v164, -1LL, -1LL);
    }

    sub_100189B20(v184, v163);

    sub_100189B20(v169, v170);
    sub_100189B20(v168, v167);

    sub_100189B20(v162, v161);
    swift_release(v172);
    (*(void (**)(char *, char *))(v186 + 8))(v187, v185);
    sub_10018709C(&v198);
    v180[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationLockSession_rangingSucceeded] = 1;
  }

  else
  {
    v149 = type metadata accessor for TaskPriority(0LL);
    v150 = (uint64_t)v173;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v149 - 8) + 56LL))(v173, 1LL, 1LL, v149);
    v151 = (void *)swift_allocObject(&unk_1005DBC50, 64LL, 7LL);
    v151[2] = 0LL;
    v151[3] = 0LL;
    v152 = v180;
    v151[4] = v181;
    v151[5] = v152;
    v153 = v169;
    v154 = v170;
    v151[6] = v169;
    v151[7] = v154;
    v155 = v152;
    sub_10019BA8C(v153, v154);
    v156 = sub_1001B37E8(v150, (uint64_t)&unk_10064F2B8, (uint64_t)v151);
    sub_100189B20(v184, v183);
    swift_release(v156);
    sub_100189B20(v153, v154);
    sub_100189B20(v168, v167);

    sub_100189B20(v182, v166);
    swift_release(v172);
    (*(void (**)(char *, char *))(v186 + 8))(v187, v185);
    sub_10018709C(&v198);
  }

  if (qword_1006441D8 != -1) {
    swift_once(&qword_1006441D8, sub_1003445C0);
  }
  uint64_t v62 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v62, (uint64_t)qword_10064FE00);
  swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v64 = (os_log_s *)Logger.logObject.getter(v63);
  uint64_t v65 = static os_log_type_t.error.getter(v64);
  if (os_log_type_enabled(v64, v65))
  {
    v66 = swift_slowAlloc(22LL, -1LL);
    uint64_t v67 = swift_slowAlloc(8LL, -1LL);
    v135 = v4 + 14;
    uint64_t v68 = (void *)v67;
    uint64_t v69 = swift_slowAlloc(32LL, -1LL);
    v151 = v69;
    *(_DWORD *)v66 = 138412546;
    uint64_t v70 = sub_100187014();
    uint64_t v71 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v70, 0LL, 0LL);
    *(_DWORD *)uint64_t v72 = v143;
    *(void *)(v72 + _Block_object_dispose((const void *)(v1 - 96), 8) = v142;
    *(void *)(v72 + 16) = a3;
    swift_bridgeObjectRetain(a3);
    uint64_t v73 = _swift_stdlib_bridgeErrorToNSError(v71);
    v149 = v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, v150, v66 + 4, v66 + 12);
    *uint64_t v68 = v73;
    swift_bridgeObjectRelease_n(a3, 2LL);
    *(_WORD *)(v66 + 12) = 2080;
    v149 = sub_10018CDB4(0x65736C6166LL, 0xE500000000000000LL, &v151);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, v150, v66 + 14, v66 + 22);
    _os_log_impl( (void *)&_mh_execute_header,  v64,  v65,  "Not sending error: %@ to remote device since sendError is %s",  (uint8_t *)v66,  0x16u);
    uint64_t v74 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v68, 1LL, v74);
    uint64_t v75 = v68;
    __int16 v20 = v135;
    swift_slowDealloc(v75, -1LL, -1LL);
    swift_arrayDestroy(v69, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v69, -1LL, -1LL);
    swift_slowDealloc(v66, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
  }

    unint64_t v6 = (v18 - 1) & v18;
    BOOL v9 = __clz(__rbit64(v18)) + (v2 << 6);
LABEL_5:
    int v10 = (uint64_t *)(*(void *)(a1 + 48) + 32 * v9);
    uint64_t v11 = *v10;
    char v12 = (const char *)v10[1];
    unsigned int v13 = v10[2];
    uint64_t v14 = (const char *)v10[3];
    *(void *)&unint64_t v15 = swift_bridgeObjectRetain(v12).n128_u64[0];
    swift_bridgeObjectRetain(v14, v15);
    sub_1003B6D58(v20, v11, v12, v13, v14);
    *(void *)&char v16 = swift_bridgeObjectRelease((const char *)v20[1]).n128_u64[0];
    swift_bridgeObjectRelease((const char *)v20[3], v16);
  }

  uint64_t v19 = v17 + 4;
  if (v19 >= v7)
  {
LABEL_23:
    swift_release(a1);
    return;
  }

  uint64_t v18 = *(void *)(v3 + 8 * v19);
  if (v18)
  {
    uint64_t v2 = v19;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v2 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v2 >= v7) {
      goto LABEL_23;
    }
    uint64_t v18 = *(void *)(v3 + 8 * v2);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }

    uint64_t v14 = (v25 - 1) & v25;
    __int16 v20 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_9:
    unsigned int v22 = *(void *)(v3 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v16, *(void *)(v21 + 48) + v22, v15);
    uint64_t v23 = *(void *)(v36 + 72) * v20;
    sub_1001A4B84(*(void *)(v21 + 56) + v23, v17, type metadata accessor for SDAirDropLegacySessionLogger.Transfer);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(i + 48) + v22, v16, v15);
  }

  char v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    uint64_t result = (void *)swift_release(v37);
    unsigned int v27 = v30;
    unint64_t v28 = v38;
    goto LABEL_25;
  }

  char v25 = *(void *)(v31 + 8 * v26);
  if (v25)
  {
    uint64_t v11 = v26;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v11 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v11 >= v32) {
      goto LABEL_23;
    }
    char v25 = *(void *)(v31 + 8 * v11);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }

    uint64_t v18 = (v33 - 1) & v33;
    uint64_t v49 = v34;
    char v26 = __clz(__rbit64(v33)) + (v34 << 6);
LABEL_9:
    unint64_t v28 = *(void *)(v19 + 72) * v26;
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v22, *(void *)(v27 + 48) + v28, v21);
    char v29 = *(void *)(v20 + 72) * v26;
    uint64_t v30 = *(void *)(v27 + 56) + v29;
    uint64_t v31 = v45;
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v45, v30, v23);
    (*(void (**)(unint64_t, char *, uint64_t))(v19 + 32))(*(void *)(v24 + 48) + v28, v22, v21);
    uint64_t result = (char *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v20 + 32))( *(void *)(v24 + 56) + v29,  v31,  v23);
    unint64_t v15 = v49;
  }

  unint64_t v35 = v32 + 2;
  if (v35 >= v40)
  {
LABEL_23:
    uint64_t result = (char *)swift_release(v47);
    id v36 = v38;
    id v37 = v48;
    goto LABEL_25;
  }

  uint64_t v33 = *(void *)(v39 + 8 * v35);
  if (v33)
  {
    uint64_t v34 = v35;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v34 = v35 + 1;
    if (__OFADD__(v35, 1LL)) {
      break;
    }
    if (v34 >= v40) {
      goto LABEL_23;
    }
    uint64_t v33 = *(void *)(v39 + 8 * v34);
    ++v35;
    if (v33) {
      goto LABEL_22;
    }
  }

    unsigned int v13 = (v25 - 1) & v25;
    char v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_9:
    id v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v16);
    __int16 v20 = *v18;
    uint64_t v19 = (const char *)v18[1];
    char v21 = *(void *)(v1 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(void *)(v4 + 56) + v21, v14);
    unsigned int v22 = v34;
    uint64_t v23 = (void *)(*(void *)(v34 + 48) + v17);
    *uint64_t v23 = v20;
    v23[1] = v19;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v22 + 56) + v21, v3, v14);
    swift_bridgeObjectRetain(v19);
  }

  char v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    swift_release(v4);
    unsigned int v27 = v30;
    unint64_t v28 = v34;
    goto LABEL_25;
  }

  char v25 = *(void *)(v31 + 8 * v26);
  if (v25)
  {
    int v10 = v26;
    goto LABEL_22;
  }

  while (1)
  {
    int v10 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v10 >= v32) {
      goto LABEL_23;
    }
    char v25 = *(void *)(v31 + 8 * v10);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }

    uint64_t v18 = (v33 - 1) & v33;
    uint64_t v49 = v34;
    char v26 = __clz(__rbit64(v33)) + (v34 << 6);
LABEL_9:
    unint64_t v28 = *(void *)(v19 + 72) * v26;
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v22, *(void *)(v27 + 48) + v28, v21);
    char v29 = *(void *)(v20 + 72) * v26;
    uint64_t v30 = *(void *)(v27 + 56) + v29;
    uint64_t v31 = v45;
    (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v45, v30, v23);
    (*(void (**)(unint64_t, char *, uint64_t))(v19 + 32))(*(void *)(v24 + 48) + v28, v22, v21);
    uint64_t result = (char *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v20 + 32))( *(void *)(v24 + 56) + v29,  v31,  v23);
    unint64_t v15 = v49;
  }

  unint64_t v35 = v32 + 2;
  if (v35 >= v40)
  {
LABEL_23:
    uint64_t result = (char *)swift_release(v47);
    id v36 = v38;
    id v37 = v48;
    goto LABEL_25;
  }

  uint64_t v33 = *(void *)(v39 + 8 * v35);
  if (v33)
  {
    uint64_t v34 = v35;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v34 = v35 + 1;
    if (__OFADD__(v35, 1LL)) {
      break;
    }
    if (v34 >= v40) {
      goto LABEL_23;
    }
    uint64_t v33 = *(void *)(v39 + 8 * v34);
    ++v35;
    if (v33) {
      goto LABEL_22;
    }
  }

  uint64_t v23 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  unint64_t v24 = (uint64_t *)(*(void *)(v23 + 48) + 16 * a3);
  *unint64_t v24 = v8;
  v24[1] = a2;
  char v25 = *(void *)(v23 + 16);
  char v26 = __OFADD__(v25, 1LL);
  unsigned int v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v23 + 16) = v27;
  }
  return result;
}

  unint64_t v28 = *v33;
  *(void *)(*v33 + 8 * (a5 >> 6) + 56) |= 1LL << a5;
  char v29 = (void *)(*(void *)(v28 + 48) + 32 * a5);
  *char v29 = a1;
  v29[1] = a2;
  v29[2] = a3;
  v29[3] = a4;
  uint64_t v30 = *(void *)(v28 + 16);
  uint64_t v31 = __OFADD__(v30, 1LL);
  uint64_t v32 = v30 + 1;
  if (v31) {
    __break(1u);
  }
  else {
    *(void *)(v28 + 16) = v32;
  }
}

          uint64_t v3 = (v22 - 1) & v22;
          __int16 v20 = __clz(__rbit64(v22)) + (v15 << 6);
        }

        (*(void (**)(_BYTE *, unint64_t, uint64_t))(v6 + 16))( v12,  *(void *)(v108 + 48) + *(void *)(v6 + 72) * v20,  v5);
        unint64_t v24 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(v9, v12, v5);
        unsigned int v13 = SFAirDropReceive.AskRequest.ItemInfo.fileType.getter(v24);
        char v26 = v25;
        unsigned int v27 = String._bridgeToObjectiveC()();
        unint64_t v28 = SFIsPhotosAssetBundle(v27);

        if (v28) {
          break;
        }
LABEL_26:
        char v4 = String._bridgeToObjectiveC()();
        uint64_t v32 = SFIsImage(v4);

        if (v32)
        {
          (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
          swift_bridgeObjectRelease(v26);
          unint64_t v35 = __OFADD__(v105++, 1LL);
          if (v35)
          {
            __break(1u);
            goto LABEL_34;
          }
        }

        else
        {
          uint64_t v33 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v26);
          uint64_t v34 = SFIsVideo(v33);

          (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
          if (v34)
          {
            unint64_t v35 = __OFADD__(v104++, 1LL);
            if (v35) {
              goto LABEL_65;
            }
          }
        }
      }

      swift_bridgeObjectRelease(v26);
      uint64_t v30 = SFAirDropReceive.AskRequest.ItemInfo.fileSubType.getter(v29);
      if (v31)
      {
        unsigned int v13 = v30;
        char v26 = v31;
        goto LABEL_26;
      }

      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
    }
  }

    uint64_t v19 = (v24 - 1) & v24;
    unsigned int v22 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_5:
    sub_1001A4B84( *(void *)(a1 + 48) + *(void *)(v5 + 72) * v22,  (uint64_t)v14,  type metadata accessor for SDAirDropDiscoveredEndpoint);
    sub_1001A4B40((uint64_t)v14, (uint64_t)v8, type metadata accessor for SDAirDropDiscoveredEndpoint);
    sub_1003B52D4((uint64_t)v11, (uint64_t)v8);
    uint64_t result = sub_1001A4BC8((uint64_t)v11, type metadata accessor for SDAirDropDiscoveredEndpoint);
  }

  char v25 = v23 + 4;
  if (v25 >= v20)
  {
LABEL_23:
    swift_release(a1);
    return v27;
  }

  unint64_t v24 = *(void *)(v26 + 8 * v25);
  if (v24)
  {
    unint64_t v15 = v25;
    goto LABEL_22;
  }

  while (1)
  {
    unint64_t v15 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v15 >= v20) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v26 + 8 * v15);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }

      BOOL v9 = (v15 - 1) & v15;
      char v12 = __clz(__rbit64(v15)) + (v5 << 6);
      unsigned int v13 = a1[2];
    }

    while (!v13);
LABEL_23:
    id v17 = *(void *)(*(void *)(*(void *)v3 + 56LL) + 8 * v12);
    if (a1[4] == v17) {
      return 1LL;
    }
    if (v13 != 1)
    {
      if (a1[5] == v17) {
        return 1LL;
      }
      if (v13 != 2) {
        break;
      }
    }
  }

  uint64_t v18 = 6LL;
  while (1)
  {
    uint64_t v19 = v18 - 3;
    if (__OFADD__(v18 - 4, 1LL)) {
      break;
    }
    if (a1[v18] == v17) {
      return 1LL;
    }
    ++v18;
    if (v19 == v13) {
      goto LABEL_4;
    }
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

    return;
  }

  unint64_t v28 = [v20 sessionID];
  if (!v28)
  {
LABEL_6:
    if (qword_100644408 == -1)
    {
LABEL_7:
      id v36 = type metadata accessor for Logger(0LL);
      id v37 = sub_100186DE4(v36, (uint64_t)qword_100656748);
      id v38 = (os_log_s *)Logger.logObject.getter(v37);
      uint64_t v39 = static os_log_type_t.error.getter(v38);
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v40 = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Message does not have a session ID", v40, 2u);
        swift_slowDealloc(v40, -1LL, -1LL);

        return;
      }

      goto LABEL_22;
    }

uint64_t SDUnlockSessionKeyExchangeRequestReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 36) |= 4u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_50;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_52;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_50:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_52:
        uint64_t v34 = 28LL;
        goto LABEL_65;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 36) |= 2u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1LL || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_56;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_56:
        uint64_t v34 = 24LL;
        goto LABEL_65;
      case 3u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0LL;
        *(_BYTE *)(a1 + 36) |= 8u;
        while (2)
        {
          unint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 == -1LL || v25 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v26 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
            v24 |= (unint64_t)(v26 & 0x7F) << v22;
            if (v26 < 0)
            {
              v22 += 7;
              BOOL v9 = v23++ >= 9;
              if (v9)
              {
                uint64_t v24 = 0LL;
                goto LABEL_60;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v24 = 0LL;
        }
LABEL_60:
        *(_BYTE *)(a1 + 32) = v24 != 0;
        continue;
      case 4u:
        uint64_t Data = PBReaderReadData(a2);
        uint64_t v28 = objc_claimAutoreleasedReturnValue(Data);
        char v29 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v28;

        continue;
      case 5u:
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 36) |= 1u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      unint64_t v32 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v32 == -1LL || v32 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v33 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v32);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v32 + 1;
      v14 |= (unint64_t)(v33 & 0x7F) << v30;
      if ((v33 & 0x80) == 0) {
        goto LABEL_62;
      }
      v30 += 7;
      BOOL v9 = v31++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_64;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_62:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v14) = 0;
    }
LABEL_64:
    uint64_t v34 = 8LL;
LABEL_65:
    *(_DWORD *)(a1 + v34) = v14;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SDAutoUnlockRelockRequestReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0LL;
      *(_BYTE *)(a1 + 12) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_30:
      *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 96), 8) = v14;
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

LABEL_13:
  char v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_preferredChannel));
  [v4 setObject:v12 forKey:@"preferredChannel"];

  if ((*(_BYTE *)&self->_has & 1) != 0)
  {
LABEL_7:
    unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_channelFlags));
    [v4 setObject:v7 forKey:@"channelFlags"];
  }

  PBDataWriterWriteUint32Field(v8, self->_preferredChannel, 4LL);
  char v4 = v8;
  if ((*(_BYTE *)&self->_has & 1) != 0)
  {
LABEL_7:
    PBDataWriterWriteUint32Field(v8, self->_channelFlags, 5LL);
    char v4 = v8;
  }

  *((_DWORD *)v4 + 9) = self->_preferredChannel;
  *((_BYTE *)v4 + 40) |= 8u;
  if ((*(_BYTE *)&self->_has & 1) != 0)
  {
LABEL_7:
    *((_DWORD *)v4 + 2) = self->_channelFlags;
    *((_BYTE *)v4 + 40) |= 1u;
  }

  self->_preferredChannel = v4[9];
  *(_BYTE *)&self->_has |= 8u;
  if ((v4[10] & 1) != 0)
  {
LABEL_7:
    self->_channelFlags = v4[2];
    *(_BYTE *)&self->_has |= 1u;
  }
}
}

  return v8;
}

  appName = self->_appName;
  if (appName) {
    [v3 setObject:appName forKey:@"appName"];
  }
  uint64_t v11 = (char)self->_has;
  if ((v11 & 1) == 0)
  {
    if ((*(_BYTE *)&self->_has & 0x20) == 0) {
      goto LABEL_17;
    }
LABEL_24:
    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", self->_skipMotionCheck));
    [v3 setObject:v17 forKey:@"skipMotionCheck"];

    if ((*(_BYTE *)&self->_has & 0x10) == 0) {
      return v3;
    }
    goto LABEL_18;
  }

  char v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", self->_phoneUnlockDate));
  [v3 setObject:v16 forKey:@"phoneUnlockDate"];

  uint64_t v11 = (char)self->_has;
  if ((v11 & 0x20) != 0) {
    goto LABEL_24;
  }
LABEL_17:
  if ((v11 & 0x10) != 0)
  {
LABEL_18:
    char v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  self->_isAuthenticatingForSiri));
    [v3 setObject:v12 forKey:@"isAuthenticatingForSiri"];
  }

  return v3;
}

  if (self->_appName)
  {
    objc_msgSend(v7, "setAppName:");
    char v4 = v7;
  }

  unint64_t v6 = (char)self->_has;
  if ((v6 & 1) == 0)
  {
    if ((*(_BYTE *)&self->_has & 0x20) == 0) {
      goto LABEL_17;
    }
LABEL_24:
    *((_BYTE *)v4 + 54) = self->_skipMotionCheck;
    *((_BYTE *)v4 + 60) |= 0x20u;
    if ((*(_BYTE *)&self->_has & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }

  *((void *)v4 + 1) = *(void *)&self->_phoneUnlockDate;
  *((_BYTE *)v4 + 60) |= 1u;
  unint64_t v6 = (char)self->_has;
  if ((v6 & 0x20) != 0) {
    goto LABEL_24;
  }
LABEL_17:
  if ((v6 & 0x10) != 0)
  {
LABEL_18:
    *((_BYTE *)v4 + 53) = self->_isAuthenticatingForSiri;
    *((_BYTE *)v4 + 60) |= 0x10u;
  }

  char v8 = 0LL;
LABEL_14:
  BOOL v9 = -[NSString hash](self->_appName, "hash");
  has = (char)self->_has;
  if ((has & 1) != 0)
  {
    phoneUnlockDate = self->_phoneUnlockDate;
    unsigned int v13 = -phoneUnlockDate;
    if (phoneUnlockDate >= 0.0) {
      unsigned int v13 = self->_phoneUnlockDate;
    }
    uint64_t v14 = floor(v13 + 0.5);
    unint64_t v15 = (v13 - v14) * 1.84467441e19;
    uint64_t v11 = 2654435761u * (unint64_t)fmod(v14, 1.84467441e19);
    if (v15 >= 0.0)
    {
      if (v15 > 0.0) {
        v11 += (unint64_t)v15;
      }
    }

    else
    {
      v11 -= (unint64_t)fabs(v15);
    }
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  if ((has & 0x20) != 0)
  {
    char v16 = 2654435761LL * self->_skipMotionCheck;
    if ((has & 0x10) != 0) {
      goto LABEL_24;
    }
LABEL_26:
    id v17 = 0LL;
    return v3 ^ v19 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v11 ^ v16 ^ v17;
  }

  char v16 = 0LL;
  if ((has & 0x10) == 0) {
    goto LABEL_26;
  }
LABEL_24:
  id v17 = 2654435761LL * self->_isAuthenticatingForSiri;
  return v3 ^ v19 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v11 ^ v16 ^ v17;
}

  if (*((void *)v4 + 2))
  {
    -[SDAutoUnlockAWDLInfo setAppName:](self, "setAppName:");
    char v4 = v7;
  }

  unint64_t v6 = v4[60];
  if ((v6 & 1) == 0)
  {
    if ((v4[60] & 0x20) == 0) {
      goto LABEL_17;
    }
LABEL_24:
    self->_skipMotionCheck = v4[54];
    *(_BYTE *)&self->_has |= 0x20u;
    if ((v4[60] & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }

  self->_phoneUnlockDate = *((double *)v4 + 1);
  *(_BYTE *)&self->_has |= 1u;
  unint64_t v6 = v4[60];
  if ((v6 & 0x20) != 0) {
    goto LABEL_24;
  }
LABEL_17:
  if ((v6 & 0x10) != 0)
  {
LABEL_18:
    self->_isAuthenticatingForSiri = v4[53];
    *(_BYTE *)&self->_has |= 0x10u;
  }

    [self->_operation setDelegate:0];
    [self->_operation stop];
    goto LABEL_14;
  }

  [self->_operation setDelegate:0];
  [self->_operation invalidate];
LABEL_14:
  operation = self->_operation;
  self->_operation = 0LL;

LABEL_15:
  sandboxExtensionHandle = self->_sandboxExtensionHandle;
  if (sandboxExtensionHandle) {
    sandbox_extension_release(sandboxExtensionHandle);
  }
}

      BOOL v9 = 0LL;
      uint64_t v11 = -6756;
      if (a4) {
LABEL_10:
      }
        *a4 = v11;
LABEL_11:

      return v9;
  }
}

    goto LABEL_14;
  }

  uint64_t v14 = paired_unlock_log(0LL, v3);
  unint64_t v7 = (id)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_ERROR)) {
    sub_1000F8B88(self, (os_log_s *)v7);
  }
LABEL_14:
}
}
    }
  }

  else
  {
    char v16 = streams_log(v3, v4);
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Network buffer is full, waiting to read from client",  buf,  2u);
    }
  }

    *(_DWORD *)(v1 + 84_Block_object_dispose((const void *)(v1 - 96), 8) = *((_DWORD *)v3 + 10);
    char v8 = v3[4];
    BOOL v9 = *(void **)(v8 + 72);
    *(void *)(v8 + 72) = 0LL;

    return [(id)v3[4] _update];
  }

  return result;
}

        unsigned int v5 = 1;
        goto LABEL_19;
      }

      unsigned int v5 = 0;
LABEL_19:
      if ((objc_opt_respondsToSelector(v8, "acl") & 1) != 0)
      {
        BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v8 performSelector:"acl"]);

        if (v9)
        {
          int v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"com.apple.developer"]);
          uint64_t v11 = [v10 BOOLValue];

          if (v11)
          {
            if (dword_100643B70 <= 30
              && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 30LL)))
            {
              LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _identificationCheckFlagsAndACL]",  30LL,  "enabled CoreDevice with identity: %@\n",  v8);
            }

            LOBYTE(v1_Block_object_dispose((const void *)(v1 - 96), 8) = 1;
          }

          char v4 = v9;
        }

        else
        {
          char v4 = 0LL;
        }
      }
    }

    uint64_t v3 = -[NSArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v20,  v24,  16LL);
  }

  while (v3);
LABEL_35:

  char v12 = BYTE4(v18) & 1;
  fitnessPairingEnabled = self->_fitnessPairingEnabled;
  if (fitnessPairingEnabled != v12)
  {
    if (dword_100643B70 <= 30)
    {
      if (dword_100643B70 != -1) {
        goto LABEL_38;
      }
      if (_LogCategory_Initialize(&dword_100643B70, 30LL))
      {
        fitnessPairingEnabled = self->_fitnessPairingEnabled;
LABEL_38:
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _identificationCheckFlagsAndACL]",  30LL,  "fitness pairing changed from %d to %d",  fitnessPairingEnabled,  v12);
      }
    }

    self->_fitnessPairingEnabled = v12;
  }

  sessionPairingEnabled = self->_sessionPairingEnabled;
  if (sessionPairingEnabled != v5)
  {
    if (dword_100643B70 <= 30)
    {
      if (dword_100643B70 != -1) {
        goto LABEL_44;
      }
      if (_LogCategory_Initialize(&dword_100643B70, 30LL))
      {
        sessionPairingEnabled = self->_sessionPairingEnabled;
LABEL_44:
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _identificationCheckFlagsAndACL]",  30LL,  "session pairing changed from %d to %d",  sessionPairingEnabled,  v5);
      }
    }

    self->_sessionPairingEnabled = v5;
  }

  unint64_t v15 = v18 & 1;
  coreDeviceEnabled = self->_coreDeviceEnabled;
  if (coreDeviceEnabled != v15)
  {
    if (dword_100643B70 <= 30)
    {
      if (dword_100643B70 != -1) {
        goto LABEL_50;
      }
      if (_LogCategory_Initialize(&dword_100643B70, 30LL))
      {
        coreDeviceEnabled = self->_coreDeviceEnabled;
LABEL_50:
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _identificationCheckFlagsAndACL]",  30LL,  "CoreDevice changed from %d to %d",  coreDeviceEnabled,  v15);
      }
    }

    self->_coreDeviceEnabled = v15;
  }
}

    uint64_t v11 = v15;
LABEL_14:
    -[SDNearbyAgent _identificationIdentifyDevice:sfDevice:](self, "_identificationIdentifyDevice:sfDevice:", v13, v5);
    unint64_t v20 = (id)objc_claimAutoreleasedReturnValue(-[SDBLEIdentifiedDevice identity](v13, "identity"));
    -[SDBLEIdentifiedDevice setDiscoveryFlags:]( v13,  "setDiscoveryFlags:",  -[SDBLEIdentifiedDevice discoveryFlags](v13, "discoveryFlags") | a4);
    goto LABEL_40;
  }

  if (![v5 paired])
  {
    if ((unint64_t)-[NSMutableDictionary count](self->_idDevices, "count") > 0x257)
    {
      if (dword_100643B70 <= 30
        && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 30LL)))
      {
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _identificationHandleDeviceFound:flags:]",  30LL,  "### Max identification devices reached, skipping %@ (%d total)\n",  v5,  -[NSMutableDictionary count](self->_idDevices, "count"));
      }

      unint64_t v20 = 0LL;
      goto LABEL_39;
    }

    unsigned int v13 = objc_alloc_init(&OBJC_CLASS___SDBLEIdentifiedDevice);
    -[SDBLEIdentifiedDevice setAuthTag:](v13, "setAuthTag:", v11);
    char v22 = CFDataGetTypeID();
    -[SDBLEIdentifiedDevice setBtAddr:](v13, "setBtAddr:", CFDictionaryGetTypedValue(v8, @"bdAddr", v22, 0LL));
    -[SDBLEIdentifiedDevice setIdentifier:](v13, "setIdentifier:", v6);
    idDevices = self->_idDevices;
    if (!idDevices)
    {
      uint64_t v24 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      unint64_t v25 = self->_idDevices;
      self->_idDevices = v24;

      idDevices = self->_idDevices;
    }

    -[NSMutableDictionary setObject:forKeyedSubscript:](idDevices, "setObject:forKeyedSubscript:", v13, v6);
    if (v13) {
      goto LABEL_14;
    }
LABEL_34:
    unint64_t v20 = 0LL;
    goto LABEL_40;
  }

  unint64_t v20 = (id)objc_claimAutoreleasedReturnValue([v7 rpIdentity]);
  if (!v20)
  {
    unsigned int v13 = (SDBLEIdentifiedDevice *)objc_claimAutoreleasedReturnValue([v5 idsIdentifier]);
    if (v13)
    {
      uint64_t v68 = v11;
      uint64_t v69 = v8;
      uint64_t v70 = v7;
      uint64_t v71 = v6;
      v78 = 0u;
      v79 = 0u;
      uint64_t v76 = 0u;
      uint64_t v77 = 0u;
      char v26 = self->_idIdentityArray;
      unsigned int v27 = -[NSArray countByEnumeratingWithState:objects:count:]( v26,  "countByEnumeratingWithState:objects:count:",  &v76,  v80,  16LL);
      if (!v27)
      {
LABEL_33:

        unint64_t v20 = 0LL;
        unsigned int v13 = 0LL;
        unint64_t v7 = v70;
        unint64_t v6 = v71;
        uint64_t v11 = v68;
        char v8 = v69;
        goto LABEL_40;
      }

      uint64_t v28 = v27;
      char v29 = *(void *)v77;
LABEL_26:
      char v30 = 0LL;
      while (1)
      {
        if (*(void *)v77 != v29) {
          objc_enumerationMutation(v26);
        }
        unsigned int v31 = *(void **)(*((void *)&v76 + 1) + 8 * v30);
        if ([v31 type] == 2)
        {
          unint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v31 idsDeviceID]);
          char v33 = [v32 isEqual:v13];

          if ((v33 & 1) != 0) {
            break;
          }
        }

        if (v28 == (id)++v30)
        {
          uint64_t v28 = -[NSArray countByEnumeratingWithState:objects:count:]( v26,  "countByEnumeratingWithState:objects:count:",  &v76,  v80,  16LL);
          if (v28) {
            goto LABEL_26;
          }
          goto LABEL_33;
        }
      }

      unint64_t v20 = v31;
      unint64_t v7 = v70;
      [v70 setRpIdentity:v20];

      unint64_t v6 = v71;
      uint64_t v11 = v68;
      char v8 = v69;
      if (v20) {
        goto LABEL_9;
      }
      goto LABEL_39;
    }

    goto LABEL_34;
  }

  if (dword_100643B70 <= 30 && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 30LL)))
  {
    if (v2->_idsIsSignedInCache) {
      unint64_t v7 = "yes";
    }
    else {
      unint64_t v7 = "no";
    }
    LogPrintF(&dword_100643B70, "-[SDNearbyAgent idsIsSignedIn]", 30LL, "IsSignedIn: %s\n", v7);
  }

  if (dword_100643B70 <= 60 && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 60LL)))
  {
    char v26 = (void *)objc_claimAutoreleasedReturnValue([v8 peerDevice]);
    unsigned int v27 = (void *)objc_claimAutoreleasedReturnValue([v26 identifier]);
    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _setupHandleSessionEncryptedFrame:type:cnx:]",  60LL,  "### BLE SetupEMsg type 0x%02X received from %@ failed: %#m\n",  v31,  v27,  v25);
  }
}

    uint64_t result = sub_10018D03C(a5, a6);
    *a1 = v13;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    char v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  char v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v14,  1173LL,  0);
    __break(1u);
    return result;
  }

  uint64_t result = @"application/x-cpio";
  if (@"application/x-cpio") {
    goto LABEL_14;
  }
  __break(1u);
  return result;
}
}

    __break(1u);
    return;
  }

  BOOL v9 = v26;
  int v10 = *(void **)&a2[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_queue];
  char v12 = v27;
  uint64_t v11 = v28;
  void *v7 = v10;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  unsigned int v13 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v14 = (uint64_t)&a2[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate];
  swift_beginAccess(&a2[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate], v25, 0LL, 0LL);
  sub_1001915A4(v14, (uint64_t)&v26, &qword_100650630);
  if (v29)
  {
    sub_10019A6C4((uint64_t)&v26, (uint64_t)v23);
    sub_100187100((uint64_t)&v26, &qword_100650630);
    unint64_t v15 = *sub_10019A708(v23, v24);
    char v16 = a2;
    sub_1002D8ECC( v16,  v9,  v12,  (uint64_t)v11,  v15,  type metadata accessor for SDAuthenticationKeySession,  (uint64_t (*)(uint64_t))sub_1002DABB0,  (uint64_t (*)(uint64_t))sub_1002DABB0,  (uint64_t (*)(uint64_t))sub_1002DABB0,  (uint64_t (*)(uint64_t))sub_1002DABB0,  sub_1002DB064,  sub_1002DABCC);

    sub_10018709C(v23);
  }

  else
  {
    sub_100187100((uint64_t)&v26, &qword_100650630);
  }

  swift_bridgeObjectRelease(v11);
}

  uint64_t v2 = (uint64_t)String._bridgeToObjectiveC()();
  *(void *)&char v8 = swift_bridgeObjectRelease(v7).n128_u64[0];
  uint64_t v3 = *(void *)(v1 + 24);
  if (!v3)
  {
LABEL_24:
    sub_10002FA6C((uint64_t)@"ApplicationServiceBrowse", (uint64_t)@"Start", v2, v3);

    (*(void (**)(void))(v0 + 8))();
    return;
  }

  if (!((unint64_t)v3 >> 62))
  {
    BOOL v9 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    *(void *)&int v10 = swift_bridgeObjectRetain((const char *)*(void *)(v1 + 24), v8).n128_u64[0];
    if (v9) {
      goto LABEL_16;
    }
LABEL_23:
    swift_bridgeObjectRelease((const char *)v3, v10);
    uint64_t v3 = 0LL;
    goto LABEL_24;
  }

  if (v3 < 0) {
    char v12 = *(void *)(v1 + 24);
  }
  else {
    char v12 = v3 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*(const char **)(v1 + 24), v8);
  if (!_CocoaArrayWrapper.endIndex.getter(v12)) {
    goto LABEL_23;
  }
LABEL_16:
  if ((v3 & 0xC000000000000001LL) != 0)
  {
LABEL_27:
    unint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v3);
    swift_bridgeObjectRelease((const char *)v3);
    uint64_t v3 = *(unsigned int *)(v15 + OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_pid);
    swift_unknownObjectRelease(v15);
    goto LABEL_24;
  }

  if (*(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    uint64_t v11 = (char *)*(id *)(v3 + 32);
    swift_bridgeObjectRelease((const char *)v3);
    uint64_t v3 = *(unsigned int *)&v11[OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_pid];

    goto LABEL_24;
  }

  __break(1u);
}

  uint64_t v2 = (uint64_t)String._bridgeToObjectiveC()();
  *(void *)&char v8 = swift_bridgeObjectRelease(v7).n128_u64[0];
  uint64_t v3 = *(void *)(v1 + 24);
  if (!v3)
  {
LABEL_24:
    sub_10002FA6C((uint64_t)@"BonjourBrowse", (uint64_t)@"Start", v2, v3);

    (*(void (**)(void))(v0 + 8))();
    return;
  }

  if (!((unint64_t)v3 >> 62))
  {
    BOOL v9 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    *(void *)&int v10 = swift_bridgeObjectRetain((const char *)*(void *)(v1 + 24), v8).n128_u64[0];
    if (v9) {
      goto LABEL_16;
    }
LABEL_23:
    swift_bridgeObjectRelease((const char *)v3, v10);
    uint64_t v3 = 0LL;
    goto LABEL_24;
  }

  if (v3 < 0) {
    char v12 = *(void *)(v1 + 24);
  }
  else {
    char v12 = v3 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*(const char **)(v1 + 24), v8);
  if (!_CocoaArrayWrapper.endIndex.getter(v12)) {
    goto LABEL_23;
  }
LABEL_16:
  if ((v3 & 0xC000000000000001LL) != 0)
  {
LABEL_27:
    unint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v3);
    swift_bridgeObjectRelease((const char *)v3);
    uint64_t v3 = *(unsigned int *)(v15 + OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_pid);
    swift_unknownObjectRelease(v15);
    goto LABEL_24;
  }

  if (*(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    uint64_t v11 = (char *)*(id *)(v3 + 32);
    swift_bridgeObjectRelease((const char *)v3);
    uint64_t v3 = *(unsigned int *)&v11[OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_pid];

    goto LABEL_24;
  }

  __break(1u);
}

  unsigned int v19 = *v24;
  *(void *)(*v24 + 8 * (i >> 6) + 56) |= 1LL << i;
  *(void *)(*(void *)(v19 + 48) + 8 * i) = v5;
  unint64_t v20 = *(void *)(v19 + 16);
  char v21 = __OFADD__(v20, 1LL);
  char v22 = v20 + 1;
  if (!v21)
  {
    *(void *)(v19 + 16) = v22;
    return result;
  }

  __break(1u);
LABEL_16:
  unsigned int v23 = sub_100183098(&qword_100652620);
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v23);
  __break(1u);
  return result;
}

      NWInterface.init(_:)();
      uint64_t v11 = type metadata accessor for NWInterface(0LL);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))( a1,  0LL,  1LL,  v11);
    }
  }

LABEL_14:
  (*(void (**)(void, void))(*(void *)(v0 + 448) + 8LL))(*(void *)(v0 + 456), *(void *)(v0 + 440));
  char v18 = *(void *)(v0 + 336);
  unsigned int v19 = *(void *)(v0 + 344);
  unint64_t v20 = *(void *)(v0 + 280);
  uint64_t v76 = *(void *)(v0 + 272);
  char v22 = *(void *)(v0 + 208);
  char v21 = *(char **)(v0 + 216);
  unsigned int v23 = *(void *)(v0 + 200);
  sub_1001A4B84(v23, v19, _s14descr1005D9BD1C13UploadRequestVMa);
  uint64_t v24 = (int *)_s14descr1005D9BD1C13UploadRequestVMa(0LL);
  (*(void (**)(uint64_t, void, uint64_t, int *))(*((void *)v24 - 1) + 56LL))(v19, 0LL, 1LL, v24);
  unint64_t v25 = (uint64_t)&v21[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_uploadRequest];
  swift_beginAccess(&v21[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_uploadRequest], v0 + 64, 33LL, 0LL);
  sub_1001C9860(v19, v25, &qword_1006475C8);
  swift_endAccess(v0 + 64);
  char v26 = &v21[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_totalBytes];
  *(void *)char v26 = *(void *)(v23 + v24[5]);
  v26[8] = 0;
  sub_1001A4B84(v22, v18, type metadata accessor for SDAirDropServerConnection);
  unsigned int v27 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56);
  *(void *)(v0 + 496) = v27;
  v27(v18, 0LL, 1LL, v76);
  uint64_t v28 = (uint64_t)&v21[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_uploadConnection];
  swift_beginAccess( &v21[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_uploadConnection],  v0 + 88,  33LL,  0LL);
  sub_1001C9860(v18, v28, &qword_100650B48);
  swift_endAccess(v0 + 88);
  char v29 = v24[10];
  char v30 = (uint64_t *)(v23 + v24[9]);
  unsigned int v31 = *v30;
  unint64_t v32 = (char *)v30[1];
  uint64_t v34 = *(void *)(v23 + v29);
  char v33 = *(char **)(v23 + v29 + 8);
  swift_bridgeObjectRetain_n(v33, 2LL);
  unint64_t v35 = v21;
  swift_bridgeObjectRetain_n(v32, 2LL);
  id v36 = (os_log_s *)Logger.logObject.getter(v35);
  id v37 = static os_log_type_t.default.getter();
  id v38 = os_log_type_enabled(v36, v37);
  uint64_t v39 = *(char **)(v0 + 216);
  if (v38)
  {
    uint64_t v73 = v37;
    log = v36;
    uint64_t v75 = v33;
    v78 = v34;
    v79 = v0 + 184;
    uint64_t v40 = v31;
    __int16 v41 = v32;
    v42 = swift_slowAlloc(32LL, -1LL);
    uint64_t v72 = swift_slowAlloc(96LL, -1LL);
    v80 = v72;
    *(_DWORD *)v42 = 136315650;
    __int16 v43 = *(void *)&v39[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_idsSessionID];
    uint64_t v44 = *(const char **)&v39[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_idsSessionID + 8];
    swift_bridgeObjectRetain(v44);
    *(void *)(v0 + 16_Block_object_dispose((const void *)(v1 - 96), 8) = sub_10018CDB4(v43, (unint64_t)v44, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v42 + 4, v42 + 12);
    swift_bridgeObjectRelease(v44);

    *(_WORD *)(v42 + 12) = 2080;
    uint64_t v77 = v40;
    uint64_t v45 = v41;
    if (!v41)
    {
      uint64_t v40 = 0xD000000000000015LL;
      v81 = 0LL;
      v82 = (const char *)0xE000000000000000LL;
      _StringGuts.grow(_:)(17LL);
      swift_bridgeObjectRelease(v82);
      uint64_t v45 = (const char *)0x80000001005046B0LL;
    }

    swift_bridgeObjectRetain(v41);
    *(void *)(v0 + 176) = sub_10018CDB4(v40, (unint64_t)v45, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v79, v42 + 14, v42 + 22);
    swift_bridgeObjectRelease(v45);
    uint64_t v46 = v41;
    swift_bridgeObjectRelease_n(v41, 2LL);
    *(_WORD *)(v42 + 22) = 2080;
    uint64_t v34 = v78;
    uint64_t v47 = v78;
    char v33 = (char *)v75;
    uint64_t v48 = v75;
    if (!v75)
    {
      uint64_t v47 = 0xD000000000000015LL;
      v81 = 0LL;
      v82 = (const char *)0xE000000000000000LL;
      _StringGuts.grow(_:)(17LL);
      swift_bridgeObjectRelease(v82);
      uint64_t v48 = (const char *)0x80000001005046B0LL;
    }

    swift_bridgeObjectRetain(v75);
    *(void *)(v0 + 184) = sub_10018CDB4(v47, (unint64_t)v48, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v79, v0 + 192, v42 + 24, v42 + 32);
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease_n(v75, 2LL);
    _os_log_impl( (void *)&_mh_execute_header,  log,  v73,  "Receiver extracted IDS session ID %s, pseudonym: %s, push token: %s from upload request",  (uint8_t *)v42,  0x20u);
    swift_arrayDestroy(v72, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v72, -1LL, -1LL);
    swift_slowDealloc(v42, -1LL, -1LL);

    uint64_t v49 = v0 + 112;
    unsigned int v31 = v77;
    unint64_t v32 = (char *)v46;
  }

  else
  {

    swift_bridgeObjectRelease_n(v32, 2LL);
    swift_bridgeObjectRelease_n(v33, 2LL);

    uint64_t v49 = v0 + 112;
  }

  uint64_t v50 = *(void *)(v0 + 328);
  uint64_t v51 = *(void *)(v0 + 272);
  uint64_t v52 = *(void *)(v0 + 280);
  uint64_t v53 = *(void *)(v0 + 216) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_askConnection;
  swift_beginAccess(v53, v49, 0LL, 0LL);
  sub_1001915A4(v53, v50, &qword_100650B48);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v50, 1LL, v51) == 1)
  {
    v54 = sub_100187100(*(void *)(v0 + 328), &qword_100650B48);
    v55 = (os_log_s *)Logger.logObject.getter(v54);
    id v56 = static os_log_type_t.error.getter(v55);
    if (os_log_type_enabled(v55, v56))
    {
      id v57 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v57 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v55,  v56,  "ASK connection no longer exists to set Internet fallback endpoint",  v57,  2u);
      swift_slowDealloc(v57, -1LL, -1LL);
    }
  }

  else
  {
    v59 = *(void *)(v0 + 288);
    uint64_t v60 = *(void *)(v0 + 296);
    uint64_t v61 = *(void *)(v0 + 272);
    sub_1001A4B40(*(void *)(v0 + 328), v60, type metadata accessor for SDAirDropServerConnection);
    sub_1001A4B84(v60, v59, type metadata accessor for SDAirDropServerConnection);
    if (swift_getEnumCaseMultiPayload(v59, v61) > 1)
    {
      v63 = *(uint64_t **)(v0 + 288);
      uint64_t v62 = *v63;
      uint64_t v64 = (char *)v63 + *(int *)(sub_100183098(&qword_100649710) + 48);
      uint64_t v65 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, uint64_t))(*(void *)(v65 - 8) + 8LL))(v64, v65);
    }

    else
    {
      uint64_t v62 = **(void **)(v0 + 288);
    }

    v66 = *(void *)(v0 + 296);
    sub_100411330( *(void *)(*(void *)(v0 + 216) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_idsSessionID),  *(void **)(*(void *)(v0 + 216) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_idsSessionID + 8),  v31,  v32,  v34,  v33);
    swift_release(v62);
    uint64_t v58 = sub_1001A4BC8(v66, type metadata accessor for SDAirDropServerConnection);
  }

  uint64_t v67 = *(void *)(v0 + 264);
  uint64_t v68 = *(void *)(v0 + 216);
  static Date.now.getter(v58);
  uint64_t v69 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56LL))(v67, 0LL, 1LL, v69);
  uint64_t v70 = v68 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_transferStart;
  swift_beginAccess(v70, v0 + 136, 33LL, 0LL);
  sub_1001C9860(v67, v70, &qword_1006457E8);
  swift_endAccess(v0 + 136);
  uint64_t v71 = (void *)swift_task_alloc(dword_100654EAC);
  *(void *)(v0 + 504) = v71;
  *uint64_t v71 = v0;
  v71[1] = sub_10041E3E0;
  return sub_100424D48(*(void *)(v0 + 200));
}

    uint64_t v40 = 0LL;
    __int16 v41 = (const char *)0xE000000000000000LL;
    _StringGuts.grow(_:)(33LL);
    swift_bridgeObjectRelease(v41);
    uint64_t v40 = 0xD00000000000001FLL;
    __int16 v41 = (const char *)0x8000000100510570LL;
    id v38 = v17;
    v39[0] = 0;
    unsigned int v23 = sub_100183098(&qword_100655ED8);
    v24._countAndFlagsBits = String.init<A>(describing:)(&v38, v23);
    object = (const char *)v24._object;
    String.append(_:)(v24);
    swift_bridgeObjectRelease(object);
    unsigned int v13 = v40;
    char v18 = v41;
    goto LABEL_18;
  }

  if (([v16 sessionIsValid] & 1) == 0)
  {
    char v26 = sub_100187014();
    unsigned int v27 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v26, 0LL, 0LL);
    *(_DWORD *)uint64_t v28 = 10;
    *(void *)(v28 + _Block_object_dispose((const void *)(v1 - 96), 8) = 0xD000000000000013LL;
    *(void *)(v28 + 16) = 0x800000010050FEA0LL;
LABEL_24:
    swift_willThrow(v27);
  }
}

  Strong = swift_unknownObjectWeakLoadStrong( *(void *)(v0 + 456) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_delegate,  v29);
  if (Strong)
  {
    unint64_t v35 = (void *)Strong;
    id v36 = *(void *)(v0 + 632);
    if (v36 <= 9 && ((1LL << v36) & 0x228) != 0)
    {
      if (qword_100644408 != -1) {
        swift_once(&qword_100644408, sub_100458568);
      }
      id v37 = type metadata accessor for Logger(0LL);
      id v38 = sub_100186DE4(v37, (uint64_t)qword_100656748);
      uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
      uint64_t v40 = static os_log_type_t.default.getter(v39);
      if (os_log_type_enabled(v39, v40))
      {
        __int16 v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)__int16 v41 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v39,  v40,  "Calling back to delegate didFailToEnableDeviceFor",  v41,  2u);
        swift_slowDealloc(v41, -1LL, -1LL);
      }

      v42 = *(void *)(v0 + 656);
      __int16 v43 = *(void *)(v0 + 608);
      uint64_t v44 = *(void *)(v0 + 456);

      isa = UUID._bridgeToObjectiveC()().super.isa;
      [v35 manager:v44 didFailToEnableDeviceFor:isa error:v43];

      swift_unknownObjectRelease(v35);
    }

    else
    {
      if (qword_100644408 != -1) {
        swift_once(&qword_100644408, sub_100458568);
      }
      uint64_t v53 = type metadata accessor for Logger(0LL);
      v54 = sub_100186DE4(v53, (uint64_t)qword_100656748);
      v55 = (os_log_s *)Logger.logObject.getter(v54);
      id v56 = static os_log_type_t.default.getter(v55);
      if (os_log_type_enabled(v55, v56))
      {
        id v57 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)id v57 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v55,  v56,  "Calling back to delegate didFailAuthenticationFor",  v57,  2u);
        swift_slowDealloc(v57, -1LL, -1LL);
      }

      v42 = *(void *)(v0 + 656);
      uint64_t v58 = *(void *)(v0 + 608);
      v59 = *(void *)(v0 + 456);

      uint64_t v60 = UUID._bridgeToObjectiveC()().super.isa;
      [v35 manager:v59 didFailAuthenticationFor:v60 error:v58];
      swift_unknownObjectRelease(v35);
    }

    char v30 = v42;
    goto LABEL_34;
  }

  char v33 = 1;
LABEL_22:
  if (qword_100644408 != -1) {
    swift_once(&qword_100644408, sub_100458568);
  }
  uint64_t v46 = *(void **)(v0 + 456);
  uint64_t v47 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v47, (uint64_t)qword_100656748);
  unsigned int v13 = (os_log_s *)Logger.logObject.getter(v46);
  uint64_t v48 = static os_log_type_t.default.getter(v13);
  uint64_t v49 = os_log_type_enabled(v13, v48);
  char v16 = *(void *)(v0 + 656);
  id v17 = *(void **)(v0 + 608);
  uint64_t v50 = *(char **)(v0 + 456);
  if (!v49)
  {

    swift_release(v16);
    unsigned int v13 = *(os_log_s **)(v0 + 456);
    goto LABEL_35;
  }

  char v18 = (uint8_t *)swift_slowAlloc(14LL, -1LL);
  *(_DWORD *)char v18 = 67109376;
  *(_DWORD *)(v0 + 676) = v33;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 676, v0 + 680, v18 + 4, v18 + 8);
  *((_WORD *)v18 + 4) = 1024;
  uint64_t v52 = swift_unknownObjectWeakLoadStrong( &v50[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_delegate],  v51);

  swift_unknownObjectRelease(v52);
  *(_DWORD *)(v0 + 672) = v52 == 0;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 672, v0 + 676, v18 + 10, v18 + 14);

  unsigned int v19 = "Not calling back to delegate (isInitiator: %{BOOL}d, delegate is nil: %{BOOL}d)";
  unint64_t v20 = v13;
  char v21 = v48;
  char v22 = v18;
  unsigned int v23 = 14;
LABEL_26:
  _os_log_impl((void *)&_mh_execute_header, v20, v21, v19, v22, v23);
  swift_slowDealloc(v18, -1LL, -1LL);
  swift_release(v16);

LABEL_35:
  uint64_t v61 = *(void *)(v0 + 600);
  uint64_t v62 = *(void *)(v0 + 592);
  v63 = *(void *)(v0 + 576);
  uint64_t v64 = *(void *)(v0 + 568);
  uint64_t v65 = *(void *)(v0 + 560);
  v66 = *(void *)(v0 + 528);
  uint64_t v67 = *(void *)(v0 + 504);
  uint64_t v68 = *(void *)(v0 + 480);

  sub_10018709C((void *)(v0 + 280));
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SDAutoUnlockWiFiAWDLInfoReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        uint64_t Data = PBReaderReadData(a2);
        uint64_t v13 = objc_claimAutoreleasedReturnValue(Data);
        uint64_t v14 = 24LL;
        goto LABEL_50;
      case 2u:
        char v16 = 0;
        unsigned int v17 = 0;
        uint64_t v18 = 0LL;
        *(_BYTE *)(a1 + 40) |= 2u;
        while (2)
        {
          unint64_t v19 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v19 == -1LL || v19 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v20 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19 + 1;
            v18 |= (unint64_t)(v20 & 0x7F) << v16;
            if (v20 < 0)
            {
              v16 += 7;
              BOOL v9 = v17++ >= 9;
              if (v9)
              {
                LODWORD(v1_Block_object_dispose((const void *)(v1 - 96), 8) = 0;
                goto LABEL_54;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v1_Block_object_dispose((const void *)(v1 - 96), 8) = 0;
        }
LABEL_54:
        uint64_t v35 = 12LL;
        goto LABEL_67;
      case 3u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v18 = 0LL;
        *(_BYTE *)(a1 + 40) |= 4u;
        while (2)
        {
          unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1LL || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v24 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
            v18 |= (unint64_t)(v24 & 0x7F) << v21;
            if (v24 < 0)
            {
              v21 += 7;
              BOOL v9 = v22++ >= 9;
              if (v9)
              {
                LODWORD(v1_Block_object_dispose((const void *)(v1 - 96), 8) = 0;
                goto LABEL_58;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v1_Block_object_dispose((const void *)(v1 - 96), 8) = 0;
        }
LABEL_58:
        uint64_t v35 = 32LL;
        goto LABEL_67;
      case 4u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v18 = 0LL;
        *(_BYTE *)(a1 + 40) |= 8u;
        while (2)
        {
          unint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v27 == -1LL || v27 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v28 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 1;
            v18 |= (unint64_t)(v28 & 0x7F) << v25;
            if (v28 < 0)
            {
              v25 += 7;
              BOOL v9 = v26++ >= 9;
              if (v9)
              {
                LODWORD(v1_Block_object_dispose((const void *)(v1 - 96), 8) = 0;
                goto LABEL_62;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v1_Block_object_dispose((const void *)(v1 - 96), 8) = 0;
        }
LABEL_62:
        uint64_t v35 = 36LL;
        goto LABEL_67;
      case 5u:
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v18 = 0LL;
        *(_BYTE *)(a1 + 40) |= 1u;
        break;
      case 6u:
        uint64_t v33 = PBReaderReadData(a2);
        uint64_t v13 = objc_claimAutoreleasedReturnValue(v33);
        uint64_t v14 = 16LL;
LABEL_50:
        uint64_t v34 = *(void **)(a1 + v14);
        *(void *)(a1 + v14) = v13;

        continue;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      unint64_t v31 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v31 == -1LL || v31 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v32 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v31);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v31 + 1;
      v18 |= (unint64_t)(v32 & 0x7F) << v29;
      if ((v32 & 0x80) == 0) {
        goto LABEL_64;
      }
      v29 += 7;
      BOOL v9 = v30++ >= 9;
      if (v9)
      {
        LODWORD(v1_Block_object_dispose((const void *)(v1 - 96), 8) = 0;
        goto LABEL_66;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_64:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v1_Block_object_dispose((const void *)(v1 - 96), 8) = 0;
    }
LABEL_66:
    uint64_t v35 = 8LL;
LABEL_67:
    *(_DWORD *)(a1 + v35) = v18;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SDUnlockStashKeyExchangeResponseReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 32) |= 4u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_43;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_45;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_43:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_45:
        uint64_t v29 = 28LL;
        goto LABEL_54;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 32) |= 2u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1LL || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_49;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_49:
        uint64_t v29 = 24LL;
        goto LABEL_54;
      case 3u:
        uint64_t Data = PBReaderReadData(a2);
        uint64_t v23 = objc_claimAutoreleasedReturnValue(Data);
        char v24 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v23;

        continue;
      case 4u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 32) |= 1u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      unint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v27 == -1LL || v27 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v28 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 1;
      v14 |= (unint64_t)(v28 & 0x7F) << v25;
      if ((v28 & 0x80) == 0) {
        goto LABEL_51;
      }
      v25 += 7;
      BOOL v9 = v26++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_53;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_51:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v14) = 0;
    }
LABEL_53:
    uint64_t v29 = 8LL;
LABEL_54:
    *(_DWORD *)(a1 + v29) = v14;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10002EAC4(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, double a7, double a8)
{
  unint64_t v14 = (unint64_t)fmax(a7, 0.0);
  int v15 = sub_10002ED28(a8);
  id v16 = a6;
  unsigned int v17 = a2;
  char v18 = a1;
  unsigned int v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  a3,  @"sender"));
  v34[0] = v19;
  v34[1] = &__kCFBooleanTrue;
  v33[1] = @"success";
  v33[2] = @"bytesPerSec";
  uint64_t v20 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v14));
  char v21 = (void *)v20;
  if (v17) {
    unsigned int v22 = v17;
  }
  else {
    unsigned int v22 = &stru_1005E3958;
  }
  v34[2] = v20;
  v34[3] = v22;
  v33[3] = @"modelCode";
  v33[4] = @"bundleID";
  if (v18) {
    uint64_t v23 = v18;
  }
  else {
    uint64_t v23 = &stru_1005E3958;
  }
  v34[4] = v23;
  v34[5] = &__kCFBooleanFalse;
  v33[5] = @"legacy";
  v33[6] = @"totalBytesBucket";
  char v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  (&off_1005CB630)[v15]));
  v34[6] = v24;
  v33[7] = @"discoverabilityLevel";
  char v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a4));
  v34[7] = v25;
  v33[8] = @"fromShareSheet";
  unsigned int v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", a5));
  v34[8] = v26;
  unint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v34,  v33,  9LL));

  id v28 = sub_1001132E0(v16, v27);
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(v28);

  uint64_t v31 = airdrop_log(v30);
  char v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
    sub_10002FF30();
  }

  SFMetricsLog(@"com.apple.sharing.AirDrop.TransferResult", v29);
}

uint64_t sub_10002ED28(double a1)
{
  if (a1 < 0.0) {
    return 0LL;
  }
  if (a1 == 0.0) {
    return 1LL;
  }
  if (a1 <= 1000000.0) {
    return 2LL;
  }
  if (a1 <= 5000000.0) {
    return 3LL;
  }
  if (a1 <= 20000000.0) {
    return 4LL;
  }
  if (a1 <= 50000000.0) {
    return 5LL;
  }
  if (a1 <= 100000000.0) {
    return 6LL;
  }
  if (a1 <= 250000000.0) {
    return 7LL;
  }
  if (a1 <= 500000000.0) {
    return 8LL;
  }
  if (a1 <= 1000000000.0) {
    return 9LL;
  }
  if (a1 <= 5000000000.0) {
    return 10LL;
  }
  if (a1 <= 1.0e10) {
    return 11LL;
  }
  if (a1 <= 1.5e10) {
    return 12LL;
  }
  if (a1 <= 2.0e10) {
    return 13LL;
  }
  return 14LL;
}

void sub_10002EE68( void *a1, void *a2, uint64_t a3, __CFError *a4, uint64_t a5, unsigned int a6, void *a7, double a8)
{
  unint64_t v14 = a1;
  int v15 = a2;
  id v34 = a7;
  int v16 = sub_10002ED28(a8);
  if (a4)
  {
    CFIndex Code = CFErrorGetCode(a4);
    Domain = (__CFString *)CFErrorGetDomain(a4);
  }

  else
  {
    CFIndex Code = 0LL;
    Domain = &stru_1005E3958;
  }

  v35[0] = @"sender";
  unsigned int v19 = Domain;
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", a3));
  v36[0] = v20;
  v36[1] = &__kCFBooleanFalse;
  v35[1] = @"success";
  v35[2] = @"modelCode";
  if (v15) {
    char v21 = v15;
  }
  else {
    char v21 = &stru_1005E3958;
  }
  if (v14) {
    unsigned int v22 = v14;
  }
  else {
    unsigned int v22 = &stru_1005E3958;
  }
  v36[2] = v21;
  v36[3] = v22;
  v35[3] = @"bundleID";
  v35[4] = @"legacy";
  v36[4] = &__kCFBooleanFalse;
  v35[5] = @"errorCode";
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", Code));
  v36[5] = v23;
  v36[6] = v19;
  v35[6] = @"errorDomain";
  v35[7] = @"totalBytesBucket";
  char v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  (&off_1005CB630)[v16]));
  v36[7] = v24;
  v35[8] = @"discoverabilityLevel";
  char v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a5));
  v36[8] = v25;
  v35[9] = @"fromShareSheet";
  unsigned int v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", a6));
  v36[9] = v26;
  unint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v36,  v35,  10LL));

  id v28 = sub_1001132E0(v34, v27);
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(v28);

  uint64_t v31 = airdrop_log(v30);
  char v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
    sub_10002FF90();
  }

  SFMetricsLog(@"com.apple.sharing.AirDrop.TransferResult", v29);
}

void sub_10002F108(double a1)
{
  v3[0] = @"_cat";
  v3[1] = @"_op";
  v4[0] = @"AD";
  v4[1] = @"TimeSpent";
  _DWORD v3[2] = @"time";
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", (uint64_t)(a1 * 1000.0)));
  v4[2] = v1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  3LL));
  SFDashboardLogJSON();
}

void sub_10002F1DC(uint64_t a1, uint64_t a2)
{
  v6[0] = @"_cat";
  v6[1] = @"_op";
  v7[0] = @"AD";
  v7[1] = @"TransferredCount";
  id v6[2] = @"sender";
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", a1));
  _DWORD v7[2] = v3;
  v6[3] = @"count";
  char v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a2));
  v7[3] = v4;
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v7,  v6,  4LL));
  SFDashboardLogJSON();
}

void sub_10002F2D8( __CFString *a1, __CFString *a2, __CFString *a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15)
{
  uint64_t v17 = (int)(a8 * 1000.0);
  uint64_t v18 = (int)(a9 * 1000.0);
  uint64_t v19 = (int)(a10 * 1000.0);
  uint64_t v20 = (int)(a11 * 1000.0);
  uint64_t v21 = (int)(a12 * 1000.0);
  uint64_t v22 = (int)(a13 * 1000.0);
  unsigned int v38 = (int)(a14 * 1000.0);
  unsigned int v39 = (int)(a15 * 1000.0);
  uint64_t v23 = &stru_1005E3958;
  if (a1) {
    char v24 = a1;
  }
  else {
    char v24 = &stru_1005E3958;
  }
  v51[0] = @"sid";
  v51[1] = @"browserID";
  if (a2) {
    char v25 = a2;
  }
  else {
    char v25 = &stru_1005E3958;
  }
  v52[0] = v24;
  v52[1] = v25;
  if (a3) {
    uint64_t v23 = a3;
  }
  v52[2] = v23;
  v51[2] = @"modelName";
  v51[3] = @"bonjourPTRDiscoveryMs";
  __int16 v43 = a3;
  v42 = a2;
  __int16 v41 = a1;
  uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v17));
  v52[3] = v50;
  v51[4] = @"bonjourTXTDiscoveryMs";
  uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v18));
  v52[4] = v47;
  v51[5] = @"bonjourResolveMs";
  uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v19));
  v52[5] = v45;
  v51[6] = @"tcpConnectionMs";
  uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v20));
  v52[6] = v40;
  v51[7] = @"tlsHandshakeMs";
  unsigned int v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v21));
  v52[7] = v26;
  v51[8] = @"idQueryMs";
  unint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v22));
  v52[8] = v27;
  v51[9] = @"totalDiscoveryWithoutBonjourPTRMs";
  id v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v38));
  v52[9] = v28;
  v51[10] = @"totalDiscoveryMs";
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v39));
  v52[10] = v29;
  v51[11] = @"verifiableID";
  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a4));
  v52[11] = v30;
  v51[12] = @"awdlVersion";
  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a5));
  v52[12] = v31;
  v51[13] = @"platform";
  char v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a6));
  v52[13] = v32;
  v51[14] = @"rssi";
  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a7));
  v52[14] = v33;
  id v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v52,  v51,  15LL));

  uint64_t v36 = airdrop_log(v35);
  id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG)) {
    sub_10002FFFC();
  }

  SFMetricsLog(@"com.apple.sharing.AirDrop.PeerDiscoveredInfo", v34);
}

void sub_10002F674( __CFString *a1, __CFString *a2, __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, unsigned int a11)
{
  uint64_t v20 = &stru_1005E3958;
  if (a1) {
    uint64_t v21 = a1;
  }
  else {
    uint64_t v21 = &stru_1005E3958;
  }
  v40[0] = @"sid";
  v40[1] = @"browserID";
  if (a2) {
    uint64_t v22 = a2;
  }
  else {
    uint64_t v22 = &stru_1005E3958;
  }
  v41[0] = v21;
  v41[1] = v22;
  if (a3) {
    uint64_t v20 = a3;
  }
  v41[2] = v20;
  v40[2] = @"bid";
  v40[3] = @"startTimestamp";
  id v37 = a3;
  uint64_t v36 = a2;
  uint64_t v23 = a1;
  char v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a4));
  v41[3] = v24;
  v40[4] = @"durationMs";
  char v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a9));
  v41[4] = v25;
  v40[5] = @"firstDiscoveryMs";
  unsigned int v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a10));
  v41[5] = v26;
  v40[6] = @"totalPeersDiscovered";
  unint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a6));
  v41[6] = v27;
  v40[7] = @"maxPeersDiscovered";
  id v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a5));
  v41[7] = v28;
  v40[8] = @"transfersInitiated";
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a7));
  v41[8] = v29;
  v40[9] = @"transfersCompleted";
  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a8));
  v41[9] = v30;
  v41[10] = &__kCFBooleanFalse;
  v40[10] = @"legacy";
  v40[11] = @"discoveryLevel";
  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a11));
  v41[11] = v31;
  char v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v41,  v40,  12LL));

  uint64_t v34 = airdrop_log(v33);
  uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138477827;
    unsigned int v39 = v32;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "AirDropSessionInfo: %{private}@", buf, 0xCu);
  }

  SFMetricsLog(@"com.apple.sharing.AirDrop.SessionInfo", v32);
}

void sub_10002F960(__CFString *a1, __CFString *a2)
{
  uint64_t v3 = &stru_1005E3958;
  if (a1) {
    uint64_t v3 = a1;
  }
  v11[0] = @"sid";
  v11[1] = @"activityType";
  char v4 = @"No user action";
  if (a2) {
    char v4 = a2;
  }
  v12[0] = v3;
  v12[1] = v4;
  unsigned int v5 = a2;
  unint64_t v6 = a1;
  unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v12,  v11,  2LL));

  uint64_t v9 = airdrop_log(v8);
  int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
    sub_10003005C();
  }

  SFMetricsLog(@"com.apple.sharing.AirDrop.SheetActivityType", v7);
}

void sub_10002FA6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v10 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  if (a1) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", a1, @"Subevent");
  }
  if (a2) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", a2, @"State");
  }
  if ((int)a4 >= 1)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a4));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v8, @"pid");
  }

  uint64_t v9 = v10;
  if (a3)
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", a3, @"id");
    uint64_t v9 = v10;
  }

  PLLogTimeSensitiveRegisteredEvent(21LL, @"AirDrop", v9, 0LL);
}

void sub_10002FB54(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, double a5)
{
  id v14 = a3;
  uint64_t v9 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  int v10 = v9;
  if (a1) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v9, "setObject:forKeyedSubscript:", a1, @"Subevent");
  }
  if (a2) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", a2, @"State");
  }
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v14 UUIDString]);

  if (v11)
  {
    char v12 = (void *)objc_claimAutoreleasedReturnValue([v14 UUIDString]);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v12, @"TransferID");
  }

  if (a5 > 0.0)
  {
    unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a5));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v13, @"ContentSize");
  }

  if (a4) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", a4, @"Interface");
  }
  PLLogTimeSensitiveRegisteredEvent(21LL, @"AirDropSession", v10, 0LL);
}

void sub_10002FC8C(void *a1, uint64_t a2)
{
  id v3 = a1;
  char v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](&OBJC_CLASS___NSMutableArray, "arrayWithArray:", a2));
  [v4 insertObject:@"\n" atIndex:0];
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"### BEGIN: %@ #########################",  v3));
  [v4 insertObject:v5 atIndex:1];

  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"##### END: %@ #########################",  v3));
  [v4 addObject:v6];

  uint64_t v8 = daemon_log(v7);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = (void *)objc_claimAutoreleasedReturnValue([v4 componentsJoinedByString:@"\n"]);
    *(_DWORD *)buf = 138412290;
    char v12 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }
}

void sub_10002FDEC(__CFString *a1, uint64_t a2, double a3)
{
  uint64_t v4 = (uint64_t)(a3 * 1000.0);
  v10[0] = @"_cat";
  v10[1] = @"_op";
  v11[0] = @"HO";
  v11[1] = @"ConnectBack";
  unsigned int v5 = &stru_1005E3958;
  if (a1) {
    unsigned int v5 = a1;
  }
  void v11[2] = v5;
  v10[2] = @"bundleID";
  v10[3] = @"duration";
  unint64_t v6 = a1;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v4));
  v11[3] = v7;
  v10[4] = @"bytesTransferred";
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a2));
  _OWORD v11[4] = v8;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v11,  v10,  5LL));

  SFDashboardLogJSON(v9);
}

void sub_10002FF30()
{
}

void sub_10002FF90()
{
}

void sub_10002FFFC()
{
}

void sub_10003005C()
{
}

uint64_t SDUnlockStashTokenReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      uint64_t Data = PBReaderReadData(a2);
      uint64_t v19 = objc_claimAutoreleasedReturnValue(Data);
      uint64_t v20 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v19;
    }

    else
    {
      if ((_DWORD)v12 == 2)
      {
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v15 = 0LL;
        *(_BYTE *)(a1 + 28) |= 1u;
        while (1)
        {
          unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1LL || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v24 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
          v15 |= (unint64_t)(v24 & 0x7F) << v21;
          if ((v24 & 0x80) == 0) {
            goto LABEL_42;
          }
          v21 += 7;
          BOOL v9 = v22++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_44;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_44:
        uint64_t v26 = 8LL;
      }

      else
      {
        if ((_DWORD)v12 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result) {
            return result;
          }
          continue;
        }

        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0LL;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (1)
        {
          unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1LL || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v17 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0) {
            goto LABEL_38;
          }
          v13 += 7;
          BOOL v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_40;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_40:
        uint64_t v26 = 24LL;
      }

      *(_DWORD *)(a1 + v26) = v15;
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

BOOL SDAutoUnlockDecryptionFailedReadFrom(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0LL;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0LL;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0LL;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 1)
      {
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 16) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v18 = &OBJC_IVAR___SDAutoUnlockDecryptionFailed__version;
            goto LABEL_37;
          }

          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            break;
          }
          v12 += 7;
          BOOL v17 = v13++ > 8;
          if (v17)
          {
            LODWORD(v14) = 0;
            uint64_t v18 = &OBJC_IVAR___SDAutoUnlockDecryptionFailed__version;
            goto LABEL_40;
          }
        }

        uint64_t v18 = &OBJC_IVAR___SDAutoUnlockDecryptionFailed__version;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_40:
        *(_DWORD *)(a1 + *v1_Block_object_dispose((const void *)(v1 - 96), 8) = v14;
        goto LABEL_41;
      }

      if ((PBReaderSkipValueWithTag(a2) & 1) == 0) {
        return 0LL;
      }
LABEL_41:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }

    char v19 = 0;
    unsigned int v20 = 0;
    uint64_t v14 = 0LL;
    *(_BYTE *)(a1 + 16) |= 1u;
    while (1)
    {
      unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v21 == -1LL || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v22 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
      v14 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
      {
        uint64_t v18 = &OBJC_IVAR___SDAutoUnlockDecryptionFailed__errorCode;
        goto LABEL_38;
      }

      v19 += 7;
      BOOL v17 = v20++ > 8;
      if (v17)
      {
        LODWORD(v14) = 0;
        uint64_t v18 = &OBJC_IVAR___SDAutoUnlockDecryptionFailed__errorCode;
        goto LABEL_40;
      }
    }

    uint64_t v18 = &OBJC_IVAR___SDAutoUnlockDecryptionFailed__errorCode;
LABEL_37:
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
    goto LABEL_38;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SDUnlockLongTermKeyRequestReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      uint64_t Data = PBReaderReadData(a2);
      uint64_t v19 = objc_claimAutoreleasedReturnValue(Data);
      uint64_t v20 = 8LL;
    }

    else
    {
      if ((_DWORD)v12 != 2)
      {
        if ((_DWORD)v12 == 1)
        {
          char v13 = 0;
          unsigned int v14 = 0;
          uint64_t v15 = 0LL;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v16 == -1LL || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v17 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
            v15 |= (unint64_t)(v17 & 0x7F) << v13;
            if ((v17 & 0x80) == 0) {
              goto LABEL_33;
            }
            v13 += 7;
            BOOL v9 = v14++ >= 9;
            if (v9)
            {
              LODWORD(v15) = 0;
              goto LABEL_35;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_33:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v15) = 0;
          }
LABEL_35:
          *(_DWORD *)(a1 + 24) = v15;
        }

        else
        {
          uint64_t result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result) {
            return result;
          }
        }

        continue;
      }

      uint64_t String = PBReaderReadString(a2);
      uint64_t v19 = objc_claimAutoreleasedReturnValue(String);
      uint64_t v20 = 16LL;
    }

    char v22 = *(void **)(a1 + v20);
    *(void *)(a1 + v20) = v19;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100033060(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___SDAutoUnlockNotificationsManager);
  uint64_t v2 = (void *)qword_100656D00;
  qword_100656D00 = (uint64_t)v1;
}

void sub_100033178(_Unwind_Exception *a1)
{
}

void sub_1000331E4(_Unwind_Exception *a1)
{
}

void sub_10003334C(_Unwind_Exception *a1)
{
}

id sub_100033688(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Notification timer fired", v5, 2u);
  }

  [*(id *)(a1 + 32) dismissNotification];
  return [*(id *)(a1 + 32) notifyObservers:"suggestionNotificationTimedOut"];
}

uint64_t SDAutoUnlockCleanUpAWDLReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0LL;
      *(_BYTE *)(a1 + 12) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_30:
      *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 96), 8) = v14;
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_100033F4C()
{
  if (qword_100656D18 != -1) {
    dispatch_once(&qword_100656D18, &stru_1005CB700);
  }
  return (id)qword_100656D20;
}

void sub_100033F8C(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.airdrop.queue", 0LL);
  uint64_t v2 = (void *)qword_100656D20;
  qword_100656D20 = (uint64_t)v1;
}

CFStringRef sub_100033FB8(uint64_t a1, int a2)
{
  uint64_t v3 = (const __CFString *)CFPreferencesCopyValue( @"AirDropID",  kCFPreferencesCurrentApplication,  kCFPreferencesCurrentUser,  kCFPreferencesCurrentHost);
  if (v3) {
    return v3;
  }
  char v4 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 bluetoothAddress]);

  id v6 = [v5 length];
  if (!v6)
  {
    uint64_t v12 = airdrop_log(0LL);
    unsigned int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v22) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "BT address not available, force random AirDrop ID",  (uint8_t *)&v22,  2u);
    }

    goto LABEL_8;
  }

  if (a2)
  {
LABEL_8:
    uint64_t v14 = airdrop_log(v6);
    unint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v22) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Random AirDrop ID requested",  (uint8_t *)&v22,  2u);
    }

    int v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 UUIDString]);
    char v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "substringWithRange:", 24, 12));
    uint64_t v3 = (const __CFString *)objc_claimAutoreleasedReturnValue([v16 lowercaseString]);

    goto LABEL_11;
  }

  id v7 = sub_100114DC0(v5);
  char v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v9 = SFHexStringForDataEx(v8, 1LL);
  int v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 substringToIndex:12]);
  uint64_t v3 = (const __CFString *)objc_claimAutoreleasedReturnValue([v11 lowercaseString]);
LABEL_11:

  CFPreferencesSetValue( @"AirDropID",  v3,  kCFPreferencesCurrentApplication,  kCFPreferencesCurrentUser,  kCFPreferencesCurrentHost);
  uint64_t v17 = CFPreferencesSynchronize(kCFPreferencesCurrentApplication, kCFPreferencesCurrentUser, kCFPreferencesCurrentHost);
  uint64_t v18 = airdrop_log(v17);
  uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    CStringPtr = CFStringGetCStringPtr(v3, 0x600u);
    int v22 = 136315138;
    unint64_t v23 = CStringPtr;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Current AirDrop ID is %s",  (uint8_t *)&v22,  0xCu);
  }

  return v3;
}

uint64_t sub_100034244()
{
  return CFPreferencesSynchronize( kCFPreferencesCurrentApplication,  kCFPreferencesCurrentUser,  kCFPreferencesCurrentHost);
}

void sub_1000342B0(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  pthread_mutex_lock(&stru_100641660);
  unsigned int v5 = (void *)qword_100656D10;
  if (!qword_100656D10)
  {
    id v6 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
    id v7 = (void *)qword_100656D10;
    qword_100656D10 = (uint64_t)v6;

    unsigned int v5 = (void *)qword_100656D10;
  }

  char v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithNonretainedObject:](&OBJC_CLASS___NSValue, "valueWithNonretainedObject:", v3));
  [v5 setObject:v4 forKeyedSubscript:v8];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000343B0;
  block[3] = &unk_1005CB2F8;
  id v11 = v3;
  id v9 = v3;
  dispatch_async(&_dispatch_main_q, block);
  pthread_mutex_unlock(&stru_100641660);
}

void sub_1000343B0(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 postNotificationName:@"com.apple.sharingd.AirDropPeerChanged" object:*(void *)(a1 + 32) userInfo:0];
}

void sub_100034400(void *a1)
{
  id v1 = a1;
  pthread_mutex_lock(&stru_100641660);
  id v2 = (void *)qword_100656D10;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithNonretainedObject:](&OBJC_CLASS___NSValue, "valueWithNonretainedObject:", v1));
  [v2 removeObjectForKey:v3];

  if ([(id)qword_100656D10 count])
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000344D4;
    block[3] = &unk_1005CB2F8;
    id v5 = v1;
    dispatch_async(&_dispatch_main_q, block);
  }

  pthread_mutex_unlock(&stru_100641660);
}

void sub_1000344D4(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 postNotificationName:@"com.apple.sharingd.AirDropPeerChanged" object:*(void *)(a1 + 32) userInfo:0];
}

void sub_100034524(const void *a1, void *a2)
{
  id value = a2;
  pthread_mutex_lock(&stru_1006416A0);
  Mutable = (__CFDictionary *)qword_100656D28;
  if (!qword_100656D28)
  {
    Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, 0LL);
    qword_100656D28 = (uint64_t)Mutable;
  }

  CFDictionarySetValue(Mutable, a1, value);
  pthread_mutex_unlock(&stru_1006416A0);
}

id sub_10003459C(const void *a1)
{
  Value = (void *)qword_100656D28;
  if (qword_100656D28) {
    Value = (void *)CFDictionaryGetValue((CFDictionaryRef)qword_100656D28, a1);
  }
  id v3 = Value;
  pthread_mutex_unlock(&stru_1006416A0);
  return v3;
}

uint64_t sub_1000345F0(const void *a1)
{
  if (qword_100656D28) {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_100656D28, a1);
  }
  return pthread_mutex_unlock(&stru_1006416A0);
}

BOOL sub_100034634(void *a1, uint64_t a2, _BYTE *a3)
{
  id v5 = a1;
  id v6 = [v5 count];
  char v8 = (void *)SFNodeCopyModel(a2, v7);
  id v9 = [v8 length];
  id v10 = sub_10003476C(a2);
  id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  if (!v6)
  {
    uint64_t v13 = 0LL;
LABEL_12:
    BOOL v19 = v13 != 0;
    goto LABEL_15;
  }

  unint64_t v21 = a3;
  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  while (1)
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v5 objectAtIndexedSubscript:v12]);

LABEL_9:
    if (v6 == (id)++v12) {
      goto LABEL_12;
    }
  }

  id v15 = sub_10003476C((uint64_t)v14);
  char v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  if (![v16 intersectsSet:v11])
  {
LABEL_8:

    goto LABEL_9;
  }

  if (!v9) {
    goto LABEL_14;
  }
  uint64_t v18 = (void *)SFNodeCopyModel(v14, v17);
  if (![v18 isEqual:v8])
  {
    ++v13;

    goto LABEL_8;
  }

  _BYTE *v21 = 1;

LABEL_14:
  BOOL v19 = 1LL;
LABEL_15:

  return v19;
}

id sub_10003476C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
  id v3 = (void *)SFNodeCopyAppleID(a1);
  if (v3
    && (id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 verifiedIdentityForAppleID:v3]),
        v4,
        v4))
  {
    id v5 = (void *)SFNodeCopyEmailHash(a1);
    id v6 = (void *)SFNodeCopyPhoneHash(a1);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v2 contactsForEmailHash:v5 phoneHash:v6]);
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  return v7;
}

uint64_t sub_100034824(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 myAppleIDCommonName]);
  id v4 = (void *)SFNodeCopyAppleID(a1);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 verifiedIdentityForAppleID:v4]);

  if (v5) {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 accountIdentifier]);
  }
  else {
    id v6 = 0LL;
  }
  if ([v3 length]
    && [v6 length]
    && ([v3 isEqualToString:v6] & 1) != 0)
  {
    uint64_t v7 = 1LL;
  }

  else
  {
    char v8 = (void *)SFNodeCopyKinds(a1);
    else {
      uint64_t v7 = 0LL;
    }
  }

  return v7;
}

id sub_100034938(uint64_t a1)
{
  id v1 = sub_10003476C(a1);
  id v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  id v3 = sub_100113018(v2);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);

  return v4;
}

id sub_100034970(uint64_t a1)
{
  id v1 = sub_10003476C(a1);
  id v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  id v3 = sub_1000349C0(v2);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 identifier]);

  return v5;
}

id sub_1000349C0(void *a1)
{
  id v1 = a1;
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 contactWithPreferredIdentifierForContacts:v1]);

  return v3;
}

void sub_100034A1C(uint64_t a1, void *a2)
{
  id v12 = a2;
  char v13 = 0;
  int v3 = sub_100034824(a1);
  id v4 = (void *)SFNodeCopyDisplayName(a1);
  id v5 = (void *)SFNodeCopyComputerName(a1);
  if (([v4 isEqualToString:v5] & 1) != 0
    || (sub_100034634(v12, a1, &v13) | v3) != 1
    || (id v6 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor")),
        unsigned __int8 v7 = [v6 coalesceMe],
        v6,
        (v7 & 1) != 0))
  {
    id v9 = 0LL;
LABEL_5:
    id v10 = v9;
    goto LABEL_6;
  }

  id v9 = v5;
  if (v13) {
    goto LABEL_5;
  }
  id v10 = (id)SFNodeCopyModel(a1, v8);
LABEL_6:
  id v11 = v10;
  SFNodeSetSecondaryName(a1, v10);
  if (v3) {
    SFNodeAddKind(a1, kSFNodeKindMe);
  }
  else {
    SFNodeRemoveKind(a1, kSFNodeKindMe);
  }
}

void *sub_100034B30(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a1;
  id v7 = a4;
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = 0LL;
  }

  else
  {
    id v9 = (id)objc_claimAutoreleasedReturnValue( +[SDXPCHelperConnection makeActivatedConnection]( &OBJC_CLASS___SDXPCHelperConnection,  "makeActivatedConnection"));
    uint64_t v8 = v9;
  }

  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_100034C8C;
  v18[3] = &unk_1005CB2F8;
  id v10 = v9;
  id v19 = v10;
  id v11 = objc_retainBlock(v18);
  id v12 = (void *)objc_claimAutoreleasedReturnValue( [v8 monogramImageDataForContact:v6 style:2 diameter:1 monogramsAsFlatImages:a3 isContactImage:250.0]);
  char v13 = v12;
  if (v12)
  {
    id v14 = v12;
  }

  else
  {
    uint64_t v15 = airdrop_log(0LL);
    char v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      sub_100036A84();
    }
  }

  ((void (*)(void *))v11[2])(v11);
  return v13;
}

void sub_100034C6C(_Unwind_Exception *a1)
{
}

id sub_100034C8C(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

void sub_100034C94(uint64_t a1, void *a2, void *a3, int a4)
{
  id v24 = a2;
  id v7 = a3;
  uint64_t v8 = (const __CFString *)SFNodeCopyComputerName(a1);
  id v9 = sub_10003476C(a1);
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  id v11 = sub_1000349C0(v10);
  id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  char v13 = v12;
  if (!v12) {
    goto LABEL_4;
  }
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 identifier]);
  SFNodeSetContactIdentifier(a1, v14);

  uint64_t v15 = sub_100113018(v10);
  SFNodeSetContactIdentifiers(a1, v15);
  char v16 = (void *)objc_claimAutoreleasedReturnValue([v13 givenName]);
  SFNodeSetFirstName(a1, v16);

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v13 familyName]);
  SFNodeSetLastName(a1, v17);

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v13 nickname]);
  SFNodeSetNickName(a1, v18);

  id v19 = objc_alloc_init(&OBJC_CLASS___CNContactFormatter);
  id v20 = [v13 mutableCopy];
  [v20 setMiddleName:&stru_1005E3958];
  id v21 = (id)objc_claimAutoreleasedReturnValue(-[CNContactFormatter stringFromContact:](v19, "stringFromContact:", v20));

  if (v21)
  {
    SFNodeSetDisplayName(a1, v21);
    sub_100034A1C(a1, v24);
    SFNodeRemoveKind(a1, kSFNodeKindUnknown);
    CFRelease(v21);
  }

  else
  {
LABEL_4:
    SFNodeAddKind(a1, kSFNodeKindUnknown);
    if (v8) {
      unint64_t v23 = v8;
    }
    else {
      unint64_t v23 = &stru_1005E3958;
    }
    SFNodeSetDisplayName(a1, v23);
    SFNodeSetSecondaryName(a1, 0LL);
  }

  sub_100034E9C(a1, v22, a4, 0LL);

  if (v8) {
    CFRelease(v8);
  }
}

void sub_100034E9C(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v5 = a4;
  uint64_t v6 = kSFNodeKindMonogram;
  SFNodeRemoveKind(a1, kSFNodeKindMonogram);
  id v7 = (void *)SFNodeCopyKinds(a1);
  [v7 containsObject:kSFNodeKindMe];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
  id v9 = (void *)SFNodeCopyEmailHash(a1);
  uint64_t v40 = SFNodeCopyPhoneHash(a1);
  __int16 v41 = (void *)SFNodeCopyRealName(a1, v10);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 contactsForEmailHash:v9 phoneHash:v40]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v8 contactWithPreferredIdentifierForContacts:v11]);
  char v13 = v12;
  if (v12)
  {
    unsigned int v39 = v9;
    unsigned __int8 v42 = 0;
    id v14 = (const __CFData *)sub_100034B30(v12, 0LL, (uint64_t)&v42, 0LL);
    uint64_t v15 = airdrop_log(v14);
    char v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      if (v14) {
        CFIndex Length = CFDataGetLength(v14);
      }
      else {
        CFIndex Length = -1LL;
      }
      *(_DWORD *)buf = 138413058;
      uint64_t v44 = v41;
      __int16 v45 = 2048;
      CFIndex v46 = Length;
      __int16 v47 = 1024;
      int v48 = a3;
      __int16 v49 = 1024;
      int v50 = v42;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "Icon for node with id = %@: iconDataSize = %ld preferVibrant = %d isContactImage = %d",  buf,  0x22u);
    }

    if (!v14 || v42)
    {
      if (!v14) {
        goto LABEL_14;
      }
    }

    else
    {
      SFNodeAddKind(a1, v6);
    }

    id v20 = sub_10008DDB8(v14);
    if (v20)
    {
      id v21 = v20;
      uint64_t v35 = v6;
      uint64_t v36 = v7;
      id v38 = v5;
      signed int Width = CGImageGetWidth(v20);
      signed int Height = CGImageGetHeight(v21);
      id v24 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
      signed int v25 = [v24 minPersonImageSize];

      CFRelease(v21);
      if (v25 > Width || v25 > Height)
      {
        uint64_t v27 = airdrop_log(v26);
        id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
        id v5 = v38;
        id v19 = (void *)v40;
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v44 = v41;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Icon too small for node with id = %@",  buf,  0xCu);
        }

        CFRelease(v14);
        id v14 = 0LL;
        uint64_t v6 = v35;
        id v7 = v36;
        goto LABEL_18;
      }

      id v7 = v36;
      id v5 = v38;
      uint64_t v6 = v35;
    }

__CFArray *sub_100035290(__SecTrust *a1)
{
  if (a1)
  {
    CFErrorRef error = 0LL;
    if (SecTrustEvaluateWithError(a1, &error)
      || (SecTrustResultType result = kSecTrustResultInvalid,
          uint64_t TrustResult = SecTrustGetTrustResult(a1, &result),
          result == kSecTrustResultRecoverableTrustFailure))
    {
      uint64_t CertificateCount = SecTrustGetCertificateCount(a1);
      uint64_t v4 = CertificateCount;
      if (CertificateCount >= 1)
      {
        Mutable = CFArrayCreateMutable(0LL, CertificateCount, &kCFTypeArrayCallBacks);
        CFIndex v6 = 0LL;
        do
        {
          SecCertificateRef CertificateAtIndex = SecTrustGetCertificateAtIndex(a1, v6);
          CFArrayAppendValue(Mutable, CertificateAtIndex);
          ++v6;
        }

        while (v4 != v6);
LABEL_18:
        if (error) {
          CFRelease(error);
        }
        return Mutable;
      }

      uint64_t v17 = airdrop_log(CertificateCount);
      uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        sub_100036B14(v4, v18, v19, v20, v21, v22, v23, v24);
      }
    }

    else
    {
      uint64_t v25 = airdrop_log(TrustResult);
      uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
        sub_100036BE0((uint64_t)&result, v26, v27, v28, v29, v30, v31, v32);
      }

      uint64_t v34 = airdrop_log(v33);
      uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        sub_100036B78((uint64_t)&error, v18, v35, v36, v37, v38, v39, v40);
      }
    }

    Mutable = 0LL;
    goto LABEL_18;
  }

  uint64_t v8 = airdrop_log(0LL);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
    sub_100036AE4(v9, v10, v11, v12, v13, v14, v15, v16);
  }

  return 0LL;
}

uint64_t sub_100035408(void *a1, __SecTrust *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a3;
  uint64_t v11 = v10;
  if (v9)
  {
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
    id v64 = 0LL;
    unsigned __int8 v13 = [v12 verifyAndParseValidationRecordData:v9 intoDictionary:&v64];
    id v14 = v64;
    uint64_t v15 = v14;
    if ((v13 & 1) != 0)
    {
      if (v14)
      {
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKeyedSubscript:@"altDsID"]);
        uint64_t v17 = v16;
        if (v16) {
          uint64_t v18 = v16;
        }
        else {
          uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:@"encDsID"]);
        }
        uint64_t v22 = v18;

        if (-[os_log_s length](v22, "length"))
        {
          uint64_t v24 = sub_100035290(a2);
          if (-[__CFArray count](v24, "count"))
          {
            int v63 = 0;
            uint64_t v25 = SFAppleIDVerifyCertificateChainSync(v24, &v63);
            if (!(_DWORD)v25 || v63)
            {
              uint64_t v35 = airdrop_log(v25);
              uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
              if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
                sub_100036DCC();
              }
              uint64_t v20 = 0LL;
              goto LABEL_40;
            }

            uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(-[__CFArray objectAtIndexedSubscript:](v24, "objectAtIndexedSubscript:", 0LL));

            id v62 = 0LL;
            int v27 = SFAppleIDCommonNameForCertificate(v26, &v62);
            uint64_t v28 = (os_log_s *)v62;
            uint64_t v29 = v28;
            int v63 = v27;
            if (v27)
            {
              uint64_t v30 = airdrop_log(v28);
              uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
              if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
                sub_100036D68();
              }
            }

            else
            {
              id v36 = -[os_log_s hasSuffix:](v28, "hasSuffix:", v22);
              if ((v36 & 1) != 0)
              {
                id v56 = v29;
                uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:@"ValidatedEmailHashes"]);
                uint64_t v38 = objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:@"ValidatedPhoneHashes"]);
                uint64_t v39 = sub_100035994(v37);
                id v61 = (id)objc_claimAutoreleasedReturnValue(v39);
                v59 = (void *)v38;
                uint64_t v40 = (void *)v38;
                uint64_t v31 = (os_log_s *)v37;
                __int16 v41 = sub_100035994(v40);
                id v60 = (id)objc_claimAutoreleasedReturnValue(v41);
                uint64_t v42 = airdrop_log(v60);
                log = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
                if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v43 = SFShortHashArrayDescription(v37);
                  os_log_t v54 = (os_log_t)objc_claimAutoreleasedReturnValue(v43);
                  uint64_t v44 = SFShortHashArrayDescription(v59);
                  uint64_t v45 = objc_claimAutoreleasedReturnValue(v44);
                  *(_DWORD *)buf = 138478083;
                  os_log_t v66 = v54;
                  __int16 v67 = 2113;
                  uint64_t v68 = v45;
                  CFIndex v46 = (void *)v45;
                  _os_log_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEFAULT,  "Hashes in validation record: Email=[%{private}@], Phone=[%{private}@]",  buf,  0x16u);
                }

                __int16 v47 = (os_log_s *)objc_claimAutoreleasedReturnValue([v12 emailOrPhoneForEmailHash:v61 phoneHash:v60]);
                uint64_t v29 = v56;
                os_log_t loga = v47;
                if (v47)
                {
                  sub_100035B04(v24, v11, v47);
                }

                else
                {
                  uint64_t v51 = airdrop_log(0LL);
                  v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
                  if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "Hashes in validation record are not recognized.",  buf,  2u);
                  }
                }

                if (a4)
                {
                  id v48 = v61;
                  *a4 = v48;
                }

                if (a5)
                {
                  id v48 = v60;
                  *a5 = v48;
                }

                uint64_t v52 = airdrop_log(v48);
                uint64_t v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
                if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412290;
                  os_log_t v66 = (os_log_t)v11;
                  _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "Validation record data is accepted for %@",  buf,  0xCu);
                }

                uint64_t v20 = 1LL;
                goto LABEL_39;
              }

              uint64_t v49 = airdrop_log(v36);
              uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
              if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412802;
                os_log_t v66 = v22;
                __int16 v67 = 2112;
                uint64_t v68 = (uint64_t)v29;
                __int16 v69 = 2112;
                uint64_t v70 = v11;
                _os_log_error_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_ERROR,  "%@ doesn't match %@ for %@",  buf,  0x20u);
              }
            }

            uint64_t v20 = 0LL;
LABEL_39:

LABEL_40:
            goto LABEL_41;
          }

          uint64_t v33 = airdrop_log(0LL);
          uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
            sub_100036D08();
          }
        }

        else
        {
          uint64_t v32 = airdrop_log(0LL);
          uint64_t v24 = (__CFArray *)objc_claimAutoreleasedReturnValue(v32);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
            sub_100036CA8();
          }
        }

        uint64_t v20 = 0LL;
LABEL_41:

        goto LABEL_42;
      }

      uint64_t v23 = airdrop_log(0LL);
      uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        sub_100036C48();
      }
    }

    else
    {
      uint64_t v21 = airdrop_log(v14);
      uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        sub_100036E30();
      }
    }

    uint64_t v20 = 0LL;
LABEL_42:

    goto LABEL_43;
  }

  uint64_t v19 = airdrop_log(v10);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled((os_log_t)v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    os_log_t v66 = (os_log_t)v11;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v15,  OS_LOG_TYPE_DEFAULT,  "Validation record data for %@ not available",  buf,  0xCu);
  }

  uint64_t v20 = 0LL;
LABEL_43:

  return v20;
}

NSMutableString *sub_100035994(void *a1)
{
  id v1 = a1;
  id v2 = (char *)[v1 count];
  if (v2)
  {
    int v3 = v2;
    uint64_t v4 = 0LL;
    id v5 = 0LL;
    CFIndex v6 = v2 - 1;
    do
    {
      if (!v5) {
        id v5 = objc_opt_new(&OBJC_CLASS___NSMutableString);
      }
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v1 objectAtIndexedSubscript:v4]);
      unint64_t v17 = 0LL;
      char v16 = 0;
      id v8 = v7;
      id v9 = (char *)[v8 UTF8String];
      unint64_t v10 = (unint64_t)[v8 length];
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithCapacity:](&OBJC_CLASS___NSMutableData, "dataWithCapacity:", v10 >> 1));
      if (v10)
      {
        for (unint64_t i = 0LL; i < v10; i += 2LL)
        {
          *(_WORD *)__str = *(_WORD *)&v9[i];
          unint64_t v17 = strtoul(__str, 0LL, 16);
          [v11 appendBytes:&v17 length:1];
        }
      }

      if (v11) {
        unsigned __int8 v13 = (void *)objc_claimAutoreleasedReturnValue([v11 base64EncodedStringWithOptions:0]);
      }
      else {
        unsigned __int8 v13 = 0LL;
      }

      if (v13) {
        -[NSMutableString appendString:](v5, "appendString:", v13);
      }
      if (v4 != v6) {
        -[NSMutableString appendString:](v5, "appendString:", @",");
      }

      ++v4;
    }

    while (v4 != v3);
  }

  else
  {
    id v5 = 0LL;
  }

  return v5;
}

void sub_100035B04(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[SDAppleIDAgent sharedAgent](&OBJC_CLASS___SDAppleIDAgent, "sharedAgent"));
  id v19 = 0LL;
  unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 verifiedIdentityForCertificateChain:v5 emailOrPhone:v7 error:&v19]);
  id v11 = v19;

  if (v10)
  {
    uint64_t v13 = airdrop_log(v12);
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412803;
      id v21 = v6;
      __int16 v22 = 2160;
      uint64_t v23 = 1752392040LL;
      __int16 v24 = 2113;
      id v25 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Got verified identity for %@ (%{private, mask.hash}@)",  buf,  0x20u);
    }

    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v5 objectAtIndexedSubscript:0]);
    [v8 cacheIdentity:v10];
    [v8 cacheCertificate:v15 forRealName:v6];
  }

  else
  {
    uint64_t v16 = SFMetricsLogUnexpectedEvent(4, [v11 code], v7);
    uint64_t v17 = airdrop_log(v16);
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138413059;
      id v21 = v6;
      __int16 v22 = 2160;
      uint64_t v23 = 1752392040LL;
      __int16 v24 = 2113;
      id v25 = v7;
      __int16 v26 = 2112;
      id v27 = v11;
      _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "verifiedIdentityForCertificateChain failed for %@ (%{private, mask.hash}@) with error %@",  buf,  0x2Au);
    }
  }
}

id sub_100035D38(void *a1, __SecTrust *a2, uint64_t a3, void *a4)
{
  id v7 = a1;
  id v8 = a4;
  unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
  if (a3) {
    id v11 = (id)SFNodeCopyRealName(a3, v9);
  }
  else {
    id v11 = v8;
  }
  uint64_t v12 = v11;
  id v27 = 0LL;
  id v28 = 0LL;
  sub_100035408(v7, a2, v11, &v28, &v27);
  id v13 = v28;
  id v14 = v27;
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v10 emailOrPhoneForEmailHash:v13 phoneHash:v14]);
  if (!v15)
  {
    uint64_t v22 = airdrop_log(0LL);
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v30 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Contact information not available for %@",  buf,  0xCu);
    }

    goto LABEL_18;
  }

  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue([v10 verifiedIdentityForAppleID:v15]);
  uint64_t v17 = v16;
  if (!v16)
  {
    uint64_t v23 = airdrop_log(0LL);
    __int16 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      sub_100036E90((uint64_t)v15, v24);
    }

LABEL_18:
    id v21 = 0LL;
    goto LABEL_19;
  }

  if (a3)
  {
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s emailOrPhone](v16, "emailOrPhone"));
    id v19 = v18;
    if (!v18)
    {
      uint64_t v20 = airdrop_log(0LL);
      __int16 v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
        sub_100036F14();
      }

      id v19 = v15;
    }

    SFNodeSetAppleID(a3, v19);
    SFNodeSetEmailHash(a3, v13);
    SFNodeSetPhoneHash(a3, v14);
  }

  id v21 = v15;
LABEL_19:

  return v21;
}

id sub_100035F78(void *a1, __SecTrust *a2, void *a3)
{
  return sub_100035D38(a1, a2, 0LL, a3);
}

id sub_100035F84(void *a1, __SecTrust *a2, uint64_t a3)
{
  return sub_100035D38(a1, a2, a3, 0LL);
}

unint64_t sub_100035F8C()
{
  os_log_t v0 = (void *)SFNodeCopyFlags();
  unint64_t v1 = (unint64_t)[v0 longValue] & 1;

  return v1;
}

unint64_t sub_100035FBC()
{
  os_log_t v0 = (void *)SFNodeCopyFlags();
  unint64_t v1 = ((unint64_t)[v0 longValue] >> 1) & 1;

  return v1;
}

unint64_t sub_100035FEC()
{
  os_log_t v0 = (void *)SFNodeCopyFlags();
  unint64_t v1 = ((unint64_t)[v0 longValue] >> 2) & 1;

  return v1;
}

CFStringRef sub_10003601C(const __CFString *result)
{
  if (result) {
    return (const __CFString *)(CFStringGetLength(result) == 12);
  }
  return result;
}

void sub_10003603C(__CFDictionary *a1, CFDictionaryRef theDict)
{
  int v3 = (const void *)kSFOperationFilesCopiedKey;
  Value = (const __CFNumber *)CFDictionaryGetValue(theDict, kSFOperationFilesCopiedKey);
  if (!Value)
  {
    CFDictionaryRemoveValue(a1, v3);
    return;
  }

  id v5 = Value;
  CFIndex valuePtr = 0LL;
  uint64_t v6 = CFNumberGetValue(Value, kCFNumberCFIndexType, &valuePtr);
  if (!(_DWORD)v6)
  {
    uint64_t v9 = airdrop_log(v6);
    unint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_100036F74(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    goto LABEL_11;
  }

  id v7 = (const __CFArray *)CFDictionaryGetValue(a1, kSFOperationFilesKey);
  if (!v7)
  {
    uint64_t v18 = airdrop_log(0LL);
    unint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_100036FA4(v10, v19, v20, v21, v22, v23, v24, v25);
    }
LABEL_11:

    return;
  }

  CFIndex Count = CFArrayGetCount(v7);
  if (valuePtr >= Count)
  {
    CFIndex v28 = Count - 1;
    CFNumberRef v26 = CFNumberCreate(0LL, kCFNumberSInt64Type, &v28);
    if (v26)
    {
      CFNumberRef v27 = v26;
      CFDictionarySetValue(a1, v3, v26);
      CFRelease(v27);
    }
  }

  else
  {
    CFDictionarySetValue(a1, v3, v5);
  }

uint64_t sub_10003617C()
{
  IOPMAssertionID AssertionID = 0;
  Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionarySetValue(Mutable, @"FrameworkBundleID", @"com.apple.Sharing");
  CFDictionarySetValue(Mutable, @"AssertType", @"PreventUserIdleSystemSleep");
  CFDictionarySetValue(Mutable, @"AssertName", @"AirDrop");
  uint64_t v1 = IOPMAssertionCreateWithProperties(Mutable, &AssertionID);
  if ((_DWORD)v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = airdrop_log(v1);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100036FD4(v2, v4, v5, v6, v7, v8, v9, v10);
    }

    IOPMAssertionID AssertionID = 0;
  }

  CFRelease(Mutable);
  return AssertionID;
}

BOOL sub_100036260()
{
  os_log_t v0 = objc_alloc_init(&OBJC_CLASS___ACAccountStore);
  id v1 = sub_100114D1C(v0);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  if (!v2)
  {
    if (qword_100669388)
    {
      uint64_t v3 = airdrop_log(0LL);
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Missing Apple ID already presented",  buf,  2u);
      }
    }

    else
    {
      SInt32 error = 0;
      uint64_t v4 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
      -[os_log_s setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  &__kCFBooleanFalse,  SBUserNotificationDismissOnLock);
      -[os_log_s setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  SBUserNotificationDontDismissOnUnlock);
      -[os_log_s setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  kCFUserNotificationAlertTopMostKey);
      uint64_t v6 = SFLocalizedStringForKey(@"AirDrop", v5);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      -[os_log_s setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  v7,  kCFUserNotificationAlertHeaderKey);

      uint64_t v9 = SFLocalizedStringForKey(@"NO_APPLE_ID_ACCOUNT_ALERT_TEXT", v8);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      -[os_log_s setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  v10,  kCFUserNotificationAlertMessageKey);

      uint64_t v12 = SFLocalizedStringForKey(@"OPEN_SETTINGS_BUTTON_TITLE", v11);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      -[os_log_s setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  v13,  kCFUserNotificationDefaultButtonTitleKey);

      uint64_t v15 = SFLocalizedStringForKey(@"CANCEL_BUTTON_TITLE", v14);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      -[os_log_s setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  v16,  kCFUserNotificationAlternateButtonTitleKey);

      uint64_t v17 = +[NSBundle bundleForClass:]( &OBJC_CLASS___NSBundle,  "bundleForClass:",  objc_opt_class(&OBJC_CLASS___NSBundle));
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 resourceURL]);
      -[os_log_s setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  v19,  kCFUserNotificationLocalizationURLKey);

      CFUserNotificationRef v20 = CFUserNotificationCreate(0LL, 0.0, 3uLL, &error, v4);
      qword_100669388 = (uint64_t)v20;
      SInt32 v21 = error;
      uint64_t v22 = airdrop_log(v20);
      uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      uint64_t v24 = v23;
      if (v21 || !v20)
      {
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
          sub_100037038((uint64_t)&error, v24, v27, v28, v29, v30, v31, v32);
        }

        if (qword_100669388)
        {
          CFRelease((CFTypeRef)qword_100669388);
          qword_100669388 = 0LL;
        }
      }

      else
      {
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v34 = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Present missing Apple ID alert", v34, 2u);
        }

        RunLoopSource = CFUserNotificationCreateRunLoopSource( 0LL,  (CFUserNotificationRef)qword_100669388,  (CFUserNotificationCallBack)sub_1000368E0,  0LL);
        Main = CFRunLoopGetMain();
        CFRunLoopAddSource(Main, RunLoopSource, kCFRunLoopDefaultMode);
        CFRelease(RunLoopSource);
      }
    }
  }

  return v2 == 0LL;
}

uint64_t variable initialization expression of SDAirDropHashStoreCDB.destroyed()
{
  return 0LL;
}

id sub_100036584(int a1, const void *a2)
{
  uint64_t v4 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v6 = v4;
  switch(a1)
  {
    case -8:
      uint64_t v7 = @"System Sleep";
      goto LABEL_13;
    case -7:
      else {
        uint64_t v7 = @"WiFi Disabled";
      }
      goto LABEL_13;
    case -6:
      uint64_t v7 = @"File Not Readable";
      goto LABEL_11;
    case -5:
      uint64_t v7 = @"Invalid File";
      goto LABEL_13;
    case -4:
      uint64_t v7 = @"No Files";
      goto LABEL_13;
    case -3:
      uint64_t v7 = @"Authentication Failed";
LABEL_11:
      uint64_t v8 = (uint64_t)a2;
      goto LABEL_14;
    case -2:
      uint64_t v7 = @"Not Enough Space";
      goto LABEL_13;
    default:
      uint64_t v7 = @"Transfer Failed 1";
LABEL_13:
      uint64_t v8 = 0LL;
LABEL_14:
      uint64_t v9 = sub_1000366F0(v7, v8);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      if (a2)
      {
        CFTypeID v11 = CFGetTypeID(a2);
        if (v11 == CFErrorGetTypeID()) {
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v6,  "setObject:forKeyedSubscript:",  a2,  NSUnderlyingErrorKey);
        }
      }

      if (v10) {
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v6,  "setObject:forKeyedSubscript:",  v10,  NSLocalizedDescriptionKey);
      }
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  kCFErrorDomainSFOperation,  a1,  v6));

      return v12;
  }

__CFString *sub_1000366F0(const __CFString *a1, uint64_t a2)
{
  uint64_t v3 = (__CFString *)sub_10008D598(a1);
  if (v3 && a2)
  {
    CFStringRef v4 = CFStringCreateWithFormat(0LL, 0LL, v3, a2);
    CFRelease(v3);
    uint64_t v3 = (__CFString *)v4;
  }

  return v3;
}

BOOL sub_10003674C(void *a1)
{
  id v1 = a1;
  id v2 = [v1 fileSystemRepresentation];
  if (v2)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v2));
    if ([v3 length]
      && [v3 hasPrefix:@"./"]
      && ([v3 hasSuffix:@"/.."] & 1) == 0)
    {
      unsigned int v4 = [v3 containsString:@"../"];
    }

    else
    {
      unsigned int v4 = 1;
    }
  }

  else
  {
    unsigned int v4 = 1;
  }

  return v4 == 0;
}

BOOL sub_100036820(void *a1)
{
  id v1 = a1;
  id v2 = [v1 fileSystemRepresentation];
  if (v2)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v2));
    else {
      unsigned int v4 = 1;
    }
  }

  else
  {
    unsigned int v4 = 1;
  }

  return v4 == 0;
}

void sub_1000368E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = airdrop_log(a1);
  unsigned int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 67109120;
    v10[1] = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Missing Apple ID notification response handler called -> responseFlags (%d)",  (uint8_t *)v10,  8u);
  }

  if (!a2)
  {
    uint64_t v6 = airdrop_log(v5);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v10[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Request to open iCloud settings",  (uint8_t *)v10,  2u);
    }

    dispatch_queue_global_t v8 = sub_100114658();
    uint64_t v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v8);
    dispatch_async(v9, &stru_1005CB720);
  }

  CFRelease((CFTypeRef)qword_100669388);
  qword_100669388 = 0LL;
}

void sub_1000369F4(id a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSURL URLWithString:]( &OBJC_CLASS___NSURL,  "URLWithString:",  @"prefs:root=APPLE_ACCOUNT&path=ICLOUD_SERVICE"));
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](&OBJC_CLASS___LSApplicationWorkspace, "defaultWorkspace"));
  [v1 openSensitiveURL:v2 withOptions:0];
}

void sub_100036A58(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

void sub_100036A84()
{
  sub_100014820( (void *)&_mh_execute_header,  v0,  v1,  "CNMonogrammer monogramForContact:isContactImage: returned nil for %@",  v2,  v3,  v4,  v5,  v6);
  sub_10001480C();
}

void sub_100036AE4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100036B14( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000147D0( (void *)&_mh_execute_header,  a2,  a3,  "copyCertificateChainFromTrust: SecTrustGetCertificateCount returned %d",  a5,  a6,  a7,  a8,  0);
  sub_1000147C8();
}

void sub_100036B78( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100036BE0( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100036C48()
{
}

void sub_100036CA8()
{
}

void sub_100036D08()
{
}

void sub_100036D68()
{
}

void sub_100036DCC()
{
}

void sub_100036E30()
{
}

void sub_100036E90(uint64_t a1, os_log_s *a2)
{
  int v2 = 141558275;
  uint64_t v3 = 1752392040LL;
  __int16 v4 = 2113;
  uint64_t v5 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "Unable to verify identity for %{private, mask.hash}@",  (uint8_t *)&v2,  0x16u);
  sub_10001480C();
}

void sub_100036F14()
{
}

void sub_100036F74( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100036FA4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100036FD4( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000147D0((void *)&_mh_execute_header, a2, a3, "IOPMAssertionCreateWithProperties returned %x", a5, a6, a7, a8, 0);
  sub_1000147C8();
}

void sub_100037038( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000147D0( (void *)&_mh_execute_header,  a2,  a3,  "Couldn't put up the missing Apple ID alert! (SInt32 error = %d)",  a5,  a6,  a7,  a8,  0);
  sub_1000147C8();
}

void sub_1000370E0(id a1)
{
  uint64_t v1 = -[SDStreamManager initWithServiceType:]( objc_alloc(&OBJC_CLASS___SDStreamManager),  "initWithServiceType:",  @"_continuity._tcp.");
  uint64_t v2 = (void *)qword_100656D30;
  qword_100656D30 = (uint64_t)v1;
}

void sub_100037498(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"SDStreamActivityIdentifier"]);
  uint64_t v4 = streams_log(v2, v3);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [*(id *)(*(void *)(a1 + 40) + 32) count];
    int v11 = 134218242;
    id v12 = v6;
    __int16 v13 = 2112;
    uint64_t v14 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Received continuation payload sent notification with %lu clients, activity ID = %@",  (uint8_t *)&v11,  0x16u);
  }

  id v7 = [*(id *)(a1 + 40) servicesContainIdentifier:v2];
  if ((_DWORD)v7)
  {
    [*(id *)(a1 + 40) publish];
  }

  else
  {
    uint64_t v9 = streams_log(v7, v8);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Activity not stream activity, not publishing",  (uint8_t *)&v11,  2u);
    }
  }
}

uint64_t sub_100037CC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1000386A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = streams_log(a1, a2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Republishing service", v6, 2u);
  }

  return [*(id *)(a1 + 32) publish];
}

uint64_t sub_100038A5C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100038BF8(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_100038C04()
{
}

void sub_100038C30()
{
}

void sub_100038C5C()
{
}

void sub_100038C88()
{
}

void sub_100038CB4()
{
}

void sub_100038CE0()
{
}

void sub_100038D0C(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  sub_100038BF8( (void *)&_mh_execute_header,  a3,  (uint64_t)a3,  "Failed to published net service = %@, errorDict = %@",  (uint8_t *)&v3);
}

void sub_100038D88()
{
}

void sub_100038DB4(void *a1, uint64_t *a2, os_log_s *a3)
{
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1 managerID]);
  uint64_t v6 = *a2;
  int v8 = 138412546;
  uint64_t v9 = v5;
  __int16 v10 = 2112;
  uint64_t v11 = v6;
  sub_100038BF8((void *)&_mh_execute_header, a3, v7, "No manager for received ID = %@, managers = %@", (uint8_t *)&v8);
}

void sub_100038EA0(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___SDSetupAgent);
  uint64_t v2 = (void *)gSDSetupAgent;
  gSDSetupAgent = v1;
}

id sub_100039B28(uint64_t a1)
{
  return [*(id *)(a1 + 32) _activate];
}

void *sub_100039C08(void *result)
{
  if (*(_DWORD *)(result[4] + 88LL) != -1)
  {
    uint64_t v1 = result;
    if (dword_1006417A0 <= 40
      && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 40LL)))
    {
      LogPrintF(&dword_1006417A0, "-[SDSetupAgent _activate]_block_invoke", 40LL, "Profiles changed\n");
    }

    return [(id)v1[4] prefsChanged];
  }

  return result;
}

id sub_100039CEC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

void sub_100039E60(uint64_t a1)
{
  if (![*(id *)(a1 + 32) _uiShowing])
  {
    if (dword_1006417A0 <= 50
      && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 50LL)))
    {
      LogPrintF( &dword_1006417A0,  "-[SDSetupAgent nfcTagReaderUIActivateWithEndpoint:params:completion:]_block_invoke",  50LL,  "Start NFC Tag Reader UI\n");
    }

    uint64_t v6 = objc_alloc_init(&OBJC_CLASS___SFDevice);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
    -[SFDevice setIdentifier:](v6, "setIdentifier:", v4);

    [*(id *)(a1 + 32) _uiStartWithDevice:v6 viewControllerName:@"NFCTagReaderMainController" xpcEndpoint:*(void *)(a1 + 40) label:@"NFCUI" unlessApps:0 extraInfo:*(void *)(a1 + 48)];
    uint64_t v5 = *(void *)(a1 + 56);
    if (v5) {
      (*(void (**)(uint64_t, void))(v5 + 16))(v5, 0LL);
    }
    goto LABEL_15;
  }

  if (dword_1006417A0 <= 60 && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 60LL))) {
    LogPrintF( &dword_1006417A0,  "-[SDSetupAgent nfcTagReaderUIActivateWithEndpoint:params:completion:]_block_invoke",  60LL,  "### Ignoring NFC Tag Reader UI when already showing UI\n");
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2)
  {
    uint64_t v3 = NSErrorWithOSStatusF(4294960575LL, "Prox UI Already Active");
    uint64_t v6 = (SFDevice *)objc_claimAutoreleasedReturnValue(v3);
    (*(void (**)(uint64_t, SFDevice *))(v2 + 16))(v2, v6);
LABEL_15:
  }

LABEL_113:
    self->_scanSeconds = v45;
  }

  __int16 v47 = CFPrefs_GetInt64(@"com.apple.Sharing", @"saServerEnabled", &v63);
  if (v63) {
    id v48 = 0;
  }
  else {
    id v48 = v47 == 0;
  }
  uint64_t v49 = !v48;
  if (self->_serverEnabled != v49)
  {
    if (dword_1006417A0 <= 40
      && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 40LL)))
    {
      int v50 = "yes";
      if (v49) {
        uint64_t v51 = "no";
      }
      else {
        uint64_t v51 = "yes";
      }
      if (!v49) {
        int v50 = "no";
      }
      LogPrintF(&dword_1006417A0, "-[SDSetupAgent prefsChanged]", 40LL, "Server enabled: %s -> %s\n", v51, v50);
    }

    self->_serverEnabled = v49;
  }

  uint64_t v52 = CFPrefs_GetInt64(@"com.apple.Sharing", @"saWatchMigration", &v63);
  uint64_t v53 = v52 != 0;
  if (v63) {
    uint64_t v53 = (v52 != 0) & ~SFIsDevicePhone();
  }
  if (self->_watchMigrationEnabled != v53)
  {
    if (dword_1006417A0 <= 40
      && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 40LL)))
    {
      os_log_t v54 = "yes";
      if (v53) {
        v55 = "no";
      }
      else {
        v55 = "yes";
      }
      if (!v53) {
        os_log_t v54 = "no";
      }
      LogPrintF(&dword_1006417A0, "-[SDSetupAgent prefsChanged]", 40LL, "WatchMigration enabled: %s -> %s\n", v55, v54);
    }

    self->_watchMigrationEnabled = v53;
  }

  id v56 = CFPrefs_GetInt64(@"com.apple.Sharing", @"saWatch", &v63);
  id v57 = v56 != 0;
  if (v63)
  {
    uint64_t v58 = v56;
    v59 = SFIsDevicePhone();
    if (v58) {
      id v57 = 1;
    }
    else {
      id v57 = v59;
    }
  }

  if (self->_watchSetupEnabled != v57)
  {
    if (dword_1006417A0 <= 40
      && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 40LL)))
    {
      id v60 = "yes";
      if (v57) {
        id v61 = "no";
      }
      else {
        id v61 = "yes";
      }
      if (!v57) {
        id v60 = "no";
      }
      LogPrintF(&dword_1006417A0, "-[SDSetupAgent prefsChanged]", 40LL, "WatchSetup enabled: %s -> %s\n", v61, v60);
    }

    self->_watchSetupEnabled = v57;
  }

  -[SDSetupAgent _update](self, "_update");
}

  uint64_t v44 = -[NSMutableDictionary count](self->_bleNearbyInfoDevices, "count");
  if (!(_DWORD)v44
    && dword_100643B70 <= 50
    && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 50LL)))
  {
    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent coordinatedAlertRequestFinish:]",  50LL,  "CoordinatedAlert finish: no other devices found\n");
  }

  caForce = self->_caForce;
  if ((caForce & 0x80000000) == 0)
  {
    if (dword_100643B70 <= 50)
    {
      if (dword_100643B70 != -1
        || (__int16 v47 = _LogCategory_Initialize(&dword_100643B70, 50LL), caForce = self->_caForce, v47))
      {
        if (caForce) {
          CFIndex v46 = "yes";
        }
        else {
          CFIndex v46 = "no";
        }
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent coordinatedAlertRequestFinish:]",  50LL,  "*** Forcing Coordinated Alert 'bestIsMe' to %s\n",  v46);
        caForce = self->_caForce;
      }
    }

    uint64_t v42 = caForce != 0;
  }

  -[NSMutableSet removeObject:](self->_caRequests, "removeObject:", v4);
  id v48 = objc_claimAutoreleasedReturnValue([v4 completionHandler]);
  uint64_t v49 = (void *)v48;
  if (v48) {
    (*(void (**)(uint64_t, void, BOOL, void))(v48 + 16))(v48, 0LL, v42, 0LL);
  }
  -[SDNearbyAgent _update](self, "_update");
  v73[0] = @"eventType";
  int v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v4 type]));
  v74[0] = v50;
  v73[1] = @"activityLevel";
  uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v8));
  v74[1] = v51;
  v73[2] = @"otherDevicesCount";
  obja = (int)v44;
  uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v44));
  v74[2] = v52;
  v73[3] = @"bestIsMe";
  int v63 = v42;
  uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v42));
  v74[3] = v53;
  v74[4] = &__kCFBooleanFalse;
  v73[4] = @"skipScanBcPhoneCall";
  v73[5] = @"skipScanBcVeryActive";
  v74[5] = &__kCFBooleanFalse;
  v73[6] = @"MsgScans";
  os_log_t v54 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_caMessageScans));
  v74[6] = v54;
  v73[7] = @"MsgNoScans";
  v55 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  self->_caMessageNoScans));
  v74[7] = v55;
  id v56 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v74,  v73,  8LL));
  SFMetricsLog(@"com.apple.sharing.Coordinated.AlertResult", v56);

  if (dword_100643B70 <= 50 && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 50LL))) {
    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent coordinatedAlertRequestFinish:]",  50,  "CA: Finish, type %ld, level %d, devices %d, best %d, skipP %d, skipA %d, scans %u, noScans %u",  [v64 type],  v67,  obja,  v63,  0,  0,  self->_caMessageScans,  self->_caMessageNoScans);
  }
}

const char *sub_10003AAD4(int a1)
{
  SecTrustResultType result = "Unspecified";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      SecTrustResultType result = "ATVSetup";
      break;
    case 2:
    case 3:
    case 15:
    case 16:
    case 23:
    case 26:
    case 27:
    case 35:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 53:
    case 54:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
      goto LABEL_5;
    case 4:
      SecTrustResultType result = "MobileBackup";
      break;
    case 5:
      SecTrustResultType result = "WatchSetup";
      break;
    case 6:
      SecTrustResultType result = "ATVPair";
      break;
    case 7:
      SecTrustResultType result = "InternetRelay";
      break;
    case 8:
      SecTrustResultType result = "WiFiPassword";
      break;
    case 9:
      SecTrustResultType result = "iOSSetup";
      break;
    case 10:
      SecTrustResultType result = "Repair";
      break;
    case 11:
      SecTrustResultType result = "LegacyHomePodSetup";
      break;
    case 12:
      SecTrustResultType result = "ApplePay";
      break;
    case 13:
      SecTrustResultType result = "WHASetup";
      break;
    case 14:
      SecTrustResultType result = "DevToolsPair";
      break;
    case 17:
      SecTrustResultType result = "DDPing";
      break;
    case 18:
      SecTrustResultType result = "DDPong";
      break;
    case 19:
      SecTrustResultType result = "RemoteAutoFill";
      break;
    case 20:
      SecTrustResultType result = "CompanionLinkProx";
      break;
    case 21:
      SecTrustResultType result = "RemoteManagement";
      break;
    case 22:
      SecTrustResultType result = "RemoteAutoFillPong";
      break;
    case 24:
      SecTrustResultType result = "AccessorySetup";
      break;
    case 25:
      SecTrustResultType result = "TVLS";
      break;
    case 28:
      SecTrustResultType result = "AppSignIn";
      break;
    case 29:
      SecTrustResultType result = "Fitness";
      break;
    case 30:
      SecTrustResultType result = "TVCCS";
      break;
    case 31:
      SecTrustResultType result = "TVSA";
      break;
    case 32:
      SecTrustResultType result = "AuthenticateAccounts";
      break;
    case 33:
      SecTrustResultType result = "HomePodSetup";
      break;
    case 34:
      SecTrustResultType result = "CompanionAuthentication";
      break;
    case 36:
      SecTrustResultType result = "dovePeace";
      break;
    case 43:
      SecTrustResultType result = "AuthenticateAccountsV2";
      break;
    case 50:
      SecTrustResultType result = "NeedsRDLink";
      break;
    case 51:
      SecTrustResultType result = "NeedsCLink";
      break;
    case 52:
      SecTrustResultType result = "Goodbye";
      break;
    case 55:
      SecTrustResultType result = "AUAction";
      break;
    case 56:
      SecTrustResultType result = "AcceptedInvitations";
      break;
    case 84:
      SecTrustResultType result = "HasInvitations";
      break;
    default:
      if (a1 == 100) {
        SecTrustResultType result = "B238SetupAfterWiFi";
      }
      else {
LABEL_5:
      }
        SecTrustResultType result = "?";
      break;
  }

  return result;
}

uint64_t sub_10003AD78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10003AE2C(uint64_t a1)
{
  id v2 = *(id *)(*(void *)(a1 + 32) + 152LL);
  if ([v2 countByEnumeratingWithState:v12 objects:v15 count:16])
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 152) objectForKeyedSubscript:**((void **)&v12[0] + 1)]);

    if (v3)
    {
      if ([v3 deviceActionType] == 36
        && _os_feature_enabled_impl("TDGSharingViewService", "Setup"))
      {
        if ([*(id *)(a1 + 32) _deviceHandlesDovePeaceSetup])
        {
          if (dword_1006417A0 <= 50
            && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 50LL)))
          {
            LogPrintF( &dword_1006417A0,  "-[SDSetupAgent retriggerProximitySetup:]_block_invoke",  50LL,  "Re-triggering dovePeace setup UI for %@\n",  v3);
          }

          [*(id *)(a1 + 32) _uiStartSetupDovePeace:v3 autoStart:1];
        }

        else if (dword_1006417A0 <= 50 {
               && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 50LL)))
        }
        {
          LogPrintF( &dword_1006417A0,  "-[SDSetupAgent retriggerProximitySetup:]_block_invoke",  50LL,  "DovePeace setup UI not supported for %@\n",  v3);
        }
      }

      else
      {
        if (dword_1006417A0 <= 50
          && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 50LL)))
        {
          LogPrintF( &dword_1006417A0,  "-[SDSetupAgent retriggerProximitySetup:]_block_invoke",  50LL,  "Re-triggering setup UI for %@\n",  v3);
        }

        [*(id *)(a1 + 32) _uiStartSetupiOS:v3 autoStart:1];
      }

      uint64_t v11 = *(void *)(a1 + 40);
      if (v11) {
        (*(void (**)(uint64_t, void))(v11 + 16))(v11, 0LL);
      }
      goto LABEL_26;
    }
  }

  else
  {
  }

  if (dword_1006417A0 <= 90 && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 90LL))) {
    LogPrintF( &dword_1006417A0,  "-[SDSetupAgent retriggerProximitySetup:]_block_invoke",  90LL,  "### Re-trigger failed: no triggered devices\n");
  }
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    NSErrorUserInfoKey v13 = NSLocalizedDescriptionKey;
    uint64_t v5 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  DebugGetErrorString(4294960569LL, 0LL, 0LL));
    uint64_t v6 = objc_claimAutoreleasedReturnValue(v5);
    uint64_t v7 = (void *)v6;
    int v8 = @"?";
    if (v6) {
      int v8 = (const __CFString *)v6;
    }
    uint64_t v14 = v8;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v14,  &v13,  1LL));
    __int16 v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -6727LL,  v9));
    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v10);
  }

  uint64_t v3 = 0LL;
LABEL_26:
}

uint64_t sub_10003B20C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10003B2F0(uint64_t a1)
{
  if (![*(id *)(a1 + 32) _uiShowing])
  {
    if (dword_1006417A0 <= 50
      && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 50LL)))
    {
      LogPrintF( &dword_1006417A0,  "-[SDSetupAgent showDevicePickerWithInfo:completion:]_block_invoke",  50LL,  "Start Device Picker UI\n");
    }

    uint64_t v6 = objc_alloc_init(&OBJC_CLASS___SFDevice);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
    -[SFDevice setIdentifier:](v6, "setIdentifier:", v4);

    [*(id *)(a1 + 32) _uiStartWithDevice:v6 viewControllerName:@"ProfileDevicePickerMainController" label:@"DevicePicker" unlessApps:0 extraInfo:*(void *)(a1 + 40)];
    uint64_t v5 = *(void *)(a1 + 48);
    if (v5) {
      (*(void (**)(uint64_t, void))(v5 + 16))(v5, 0LL);
    }
    goto LABEL_15;
  }

  if (dword_1006417A0 <= 60 && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 60LL))) {
    LogPrintF( &dword_1006417A0,  "-[SDSetupAgent showDevicePickerWithInfo:completion:]_block_invoke",  60LL,  "### Ignoring Device Picker UI when already showing UI\n");
  }
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = NSErrorWithOSStatusF(4294960575LL, "Prox UI Already Active");
    uint64_t v6 = (SFDevice *)objc_claimAutoreleasedReturnValue(v3);
    (*(void (**)(uint64_t, SFDevice *))(v2 + 16))(v2, v6);
LABEL_15:
  }

void sub_10003B510(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _uiShowing])
  {
    if (dword_1006417A0 <= 60
      && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 60LL)))
    {
      LogPrintF( &dword_1006417A0,  "-[SDSetupAgent triggerHomeKitDeviceDetectedWithURL:completion:]_block_invoke",  60LL,  "### Ignoring HomeKit Device Detected UI when already showing UI\n");
    }

    uint64_t v2 = *(void *)(a1 + 48);
    if (v2)
    {
      NSErrorUserInfoKey v10 = NSLocalizedDescriptionKey;
      uint64_t v3 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  DebugGetErrorString(4294960575LL, 0LL, 0LL));
      uint64_t v4 = objc_claimAutoreleasedReturnValue(v3);
      uint64_t v5 = (void *)v4;
      uint64_t v6 = @"?";
      if (v4) {
        uint64_t v6 = (const __CFString *)v4;
      }
      uint64_t v11 = v6;
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v11,  &v10,  1LL));
      int v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -6721LL,  v7));
      (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v8);
    }
  }

  else
  {
    if (dword_1006417A0 <= 50
      && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 50LL)))
    {
      LogPrintF( &dword_1006417A0,  "-[SDSetupAgent triggerHomeKitDeviceDetectedWithURL:completion:]_block_invoke",  50LL,  "Triggering HomeKit Device Detected UI: '%@'\n",  *(void *)(a1 + 40));
    }

    [*(id *)(a1 + 32) _uiStartHomeKitDeviceDetectedWithURL:*(void *)(a1 + 40)];
    uint64_t v9 = *(void *)(a1 + 48);
    if (v9) {
      (*(void (**)(uint64_t, void))(v9 + 16))(v9, 0LL);
    }
  }

LABEL_29:
      uint64_t v19 = (OS_dispatch_source *)dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  (dispatch_queue_t)self->_dispatchQueue);
      CFUserNotificationRef v20 = self->_scanTimer;
      self->_scanTimer = v19;

      SInt32 v21 = self->_scanTimer;
      v47[0] = _NSConcreteStackBlock;
      v47[1] = 3221225472LL;
      v47[2] = sub_10003C084;
      v47[3] = &unk_1005CB2F8;
      v47[4] = self;
      dispatch_source_set_event_handler((dispatch_source_t)v21, v47);
      uint64_t v22 = 1000000000LL * self->_scanSeconds;
      uint64_t v23 = self->_scanTimer;
      uint64_t v24 = dispatch_time(0LL, v22);
      dispatch_source_set_timer((dispatch_source_t)v23, v24, 0xFFFFFFFFFFFFFFFFLL, v22 / 0xA);
      dispatch_resume((dispatch_object_t)self->_scanTimer);
    }
  }

        uint64_t v17 = 0LL;
LABEL_30:

        goto LABEL_31;
      }
    }

LABEL_18:
    if (dword_100642038 <= 60
      && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 60LL)))
    {
      CFUserNotificationRef v20 = (void *)objc_claimAutoreleasedReturnValue([v9 model]);
      LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent _bleUpdateMappingWithDevice:]",  60LL,  "Invalid candidate model? %@, %@\n",  v20,  v4);
    }

  return v23;
}

  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(-[SDRemoteInteractionAgent description](self->_server->_riAgent, "description"));

  if (v27)
  {
    id v62 = v19;
    NSAppendPrintF(&v62, "%@\n", v27);
    uint64_t v28 = v62;

    uint64_t v19 = v28;
  }

  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoFillAgent description](self->_server->_autoFillAgent, "description"));

  if (v29)
  {
    id v61 = v19;
    NSAppendPrintF(&v61, "%@\n", v29);
    uint64_t v30 = v61;

    uint64_t v19 = v30;
  }

  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(-[SDProxHandoffAgent description](self->_server->_proxHandoffAgent, "description"));

  if (v31)
  {
    id v60 = v19;
    NSAppendPrintF(&v60, "%@\n", v31);
    uint64_t v32 = v60;

    uint64_t v19 = v32;
  }

  if ((v16 & 1) != 0)
  {
    uint64_t v33 = 20LL;
  }

  else
  {
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[SDNotificationManager sharedManager](&OBJC_CLASS___SDNotificationManager, "sharedManager"));
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v34 description]);

    if (v35)
    {
      v59 = v19;
      NSAppendPrintF(&v59, "%@\n", v35);
      id v36 = v59;

      uint64_t v19 = v36;
    }

    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockAKSManager sharedManager](&OBJC_CLASS___SDAutoUnlockAKSManager, "sharedManager"));
    uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v37 state]);

    if (v38)
    {
      uint64_t v58 = v19;
      NSAppendPrintF(&v58, "%@\n", v38);
      uint64_t v39 = v58;

      uint64_t v19 = v39;
    }

    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue( +[SDAutoUnlockSessionManager sharedManager]( &OBJC_CLASS___SDAutoUnlockSessionManager,  "sharedManager"));
    __int16 v41 = (void *)objc_claimAutoreleasedReturnValue([v40 state]);

    if (v41)
    {
      id v57 = v19;
      NSAppendPrintF(&v57, "%@\n", v41);
      uint64_t v42 = v57;

      uint64_t v19 = v42;
    }

    uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockTransport sharedTransport](&OBJC_CLASS___SDAutoUnlockTransport, "sharedTransport"));
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v43 state]);

    if (v31)
    {
      id v56 = v19;
      NSAppendPrintF(&v56, "%@\n", v31);
      uint64_t v44 = v56;

      uint64_t v33 = 10LL;
      uint64_t v19 = v44;
    }

    else
    {
      uint64_t v33 = 10LL;
    }
  }

  uint64_t v45 = CUDescriptionWithLevel(self->_server->_setupAgent, v33);
  NSErrorUserInfoKey v13 = (void *)objc_claimAutoreleasedReturnValue(v45);

  if (v13)
  {
    v55 = v19;
    NSAppendPrintF(&v55, "%@\n", v13);
    CFIndex v46 = v55;

    uint64_t v19 = v46;
  }

  server = self->_server;
  os_log_t v54 = v19;
  -[SDXPCServer stateAppendXPCConnections:](server, "stateAppendXPCConnections:", &v54);
  NSErrorUserInfoKey v10 = v54;

  if ([v6 isEqual:@"all"])
  {
    uint64_t v53 = v10;
    NSAppendPrintF(&v53, "\n");
    id v48 = v53;

    uint64_t v52 = v48;
    NSAppendPrintF(&v52, "-- ProximityInfo --\n");
    uint64_t v49 = v52;

    uint64_t v51 = v49;
    int v50 = (void *)objc_claimAutoreleasedReturnValue(-[SDNearbyAgent bleProximityInfo](self->_server->_nearbyAgent, "bleProximityInfo"));
    NSAppendPrintF(&v51, "%@\n", v50);
    NSErrorUserInfoKey v10 = v51;
  }

  if (!v10)
  {
    if (!v7) {
      goto LABEL_17;
    }
    int v8 = 4294960568LL;
LABEL_16:
    uint64_t v14 = NSPrintF("### Error: %#m\n", v8);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    v7[2](v7, v15);

LABEL_17:
    NSErrorUserInfoKey v10 = 0LL;
    goto LABEL_18;
  }
}

  __break(1u);
}

    uint64_t v16 = (v24 - 1) & v24;
    uint64_t v17 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_30:
    uint64_t v22 = *(id *)(*(void *)(v3 + 48) + 8 * v17);
    if (!v22) {
      goto LABEL_33;
    }
    while (1)
    {
      sub_1001F3FA4(*(unsigned __int8 *)(v0 + 104));

      NSErrorUserInfoKey v10 = v18;
      uint64_t v11 = v16;
      if ((v3 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_13:
      uint64_t v19 = __CocoaSet.Iterator.next()(v8);
      if (v19)
      {
        CFUserNotificationRef v20 = v19;
        *(void *)(v0 + 8_Block_object_dispose((const void *)(v1 - 96), 8) = v19;
        SInt32 v21 = type metadata accessor for SDAirDropSendConnection(0LL);
        swift_unknownObjectRetain(v20);
        swift_dynamicCast(v0 + 80, v0 + 88, (char *)&type metadata for Swift.AnyObject + 8, v21, 7LL);
        uint64_t v22 = *(id *)(v0 + 80);
        swift_unknownObjectRelease(v20);
        uint64_t v18 = v10;
        uint64_t v16 = v11;
        if (v22) {
          continue;
        }
      }

      goto LABEL_33;
    }
  }

  __break(1u);
}

    id v57 = (v72 - 1) & v72;
    id v61 = __clz(__rbit64(v72)) + (v59 << 6);
LABEL_12:
    id v62 = *(void *)(*(void *)(v52 + 56) + 8 * v61);
    int v63 = swift_allocObject(&unk_1005D6D18, 24LL, 7LL);
    *(void *)(v63 + 16) = v52;
    id v64 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X1>, unsigned __int8@<W2>, uint64_t@<X8>))(v62 + OBJC_IVAR____TtCV16DaemoniOSLibrary16SDAuthentication13LTKCollection_cacheDirectoryBlock);
    uint64_t v65 = *(void *)(v62 + OBJC_IVAR____TtCV16DaemoniOSLibrary16SDAuthentication13LTKCollection_cacheDirectoryBlock);
    os_log_t v66 = *(void *)(v62 + OBJC_IVAR____TtCV16DaemoniOSLibrary16SDAuthentication13LTKCollection_cacheDirectoryBlock + 8);
    *id v64 = sub_100272024;
    v64[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X1>, unsigned __int8@<W2>, uint64_t@<X8>))v63;
    swift_bridgeObjectRetain(v52);
    swift_retain(v62);
    sub_100224FF8(v65, v66);
    __int16 v67 = swift_allocObject(&unk_1005D6D40, 24LL, 7LL);
    *(void *)(v67 + 16) = v52;
    uint64_t v68 = (uint64_t (**))(v62
                                                   + OBJC_IVAR____TtCV16DaemoniOSLibrary16SDAuthentication13LTKCollection_protectionClassBlock);
    __int16 v69 = *(void *)(v62 + OBJC_IVAR____TtCV16DaemoniOSLibrary16SDAuthentication13LTKCollection_protectionClassBlock);
    uint64_t v70 = *(void *)(v62 + OBJC_IVAR____TtCV16DaemoniOSLibrary16SDAuthentication13LTKCollection_protectionClassBlock + 8);
    *uint64_t v68 = sub_10027202C;
    v68[1] = (uint64_t (*))v67;
    swift_bridgeObjectRetain(v52);
    sub_100224FF8(v69, v70);
    SecTrustResultType result = (id)swift_release(v62);
  }

  uint64_t v73 = v71 + 4;
  if (v73 >= v58)
  {
LABEL_30:
    swift_release(v52);
    uint64_t v74 = v90;
    *(void *)&v90[OBJC_IVAR____TtCV16DaemoniOSLibrary16SDAuthentication10LTKManager_localLTKByKeyClass] = v52;

    uint64_t v75 = (objc_class *)_s10LTKManagerCMa();
    v93.receiver = v74;
    v93.super_class = v75;
    uint64_t v76 = objc_msgSendSuper2(&v93, "init");
    v78 = sub_100272034( &qword_10064A630,  v77,  (uint64_t (*)(uint64_t))_s10LTKManagerCMa,  (uint64_t)&unk_1004D08E8);
    v79 = v76;
    dispatch thunk of SFLockStateMonitor.delegate.setter(v76, v78);

    v80 = v85;
    v81 = *(void (**)(char *, uint64_t))(v84 + 8);
    v81(v83, v85);
    v81(v89, v80);
    v81(v88, v80);
    v81(v87, v80);
    v81(v86, v80);
    return v79;
  }

  uint64_t v72 = *(void *)(v54 + 8 * v73);
  if (v72)
  {
    v59 = v73;
    goto LABEL_29;
  }

  while (1)
  {
    v59 = v73 + 1;
    if (__OFADD__(v73, 1LL)) {
      break;
    }
    if (v59 >= v58) {
      goto LABEL_30;
    }
    uint64_t v72 = *(void *)(v54 + 8 * v59);
    ++v73;
    if (v72) {
      goto LABEL_29;
    }
  }

      __break(1u);
      JUMPOUT(0x10028E3A8LL);
    }

    uint64_t v19 = v25;
    goto LABEL_24;
  }

    return;
  }

  v59 = &v31[OBJC_IVAR___SDDeferrableOperation_timedReasons];
  id v60 = swift_beginAccess(&v31[OBJC_IVAR___SDDeferrableOperation_timedReasons], &v143, 0LL, 0LL);
  id v61 = *(void *)v59;
  if (!*(void *)(*(void *)v59 + 16LL))
  {
    __int16 v67 = (void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v17[7];
    id v64 = (uint64_t)v129;
    v67(v129, 1LL, 1LL, v16, v60);
LABEL_16:
    sub_100187100(v64, &qword_1006457E8);
    goto LABEL_17;
  }

  *(void *)&id v62 = swift_bridgeObjectRetain(v48, v60.n128_f64[0]).n128_u64[0];
  swift_bridgeObjectRetain((const char *)v61, v62);
  int v63 = sub_1003AD53C(v56, (uint64_t)v48);
  id v64 = (uint64_t)v129;
  if ((v65 & 1) != 0)
  {
    v135(v129, *(void *)(v61 + 56) + v17[9] * v63, v16);
    os_log_t v66 = v17;
    __int16 v67 = (void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v17[7];
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v67)(v64, 0LL, 1LL, v16);
  }

  else
  {
    os_log_t v66 = v17;
    __int16 v67 = (void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v17[7];
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v67)(v129, 1LL, 1LL, v16);
  }

  *(void *)&uint64_t v72 = swift_bridgeObjectRelease(v48).n128_u64[0];
  uint64_t v73 = swift_bridgeObjectRelease((const char *)v61, v72);
  v88 = (void (*)(char *, uint64_t, uint64_t))v66[4];
  v89 = v126;
  v88(v126, v64, v16);
  if ((static Date.> infix(_:_:)(a3, v89) & 1) == 0)
  {
    v107 = v122;
    v108 = ((uint64_t (*)(char *, uint64_t, uint64_t))v135)(v122, a3, v16);
    v109 = (os_log_s *)Logger.logObject.getter(v108);
    v110 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v109, v110))
    {
      v111 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v112 = v16;
      v113 = swift_slowAlloc(32LL, -1LL);
      v142[0] = v113;
      *(_DWORD *)v111 = 136315138;
      v114 = sub_1002C0A50((unint64_t *)&qword_100651A50, (uint64_t)&protocol conformance descriptor for Date);
      v115 = dispatch thunk of CustomStringConvertible.description.getter(v112, v114);
      v117 = (const char *)v116;
      v140 = sub_10018CDB4(v115, v116, v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, v141, v111 + 4, v111 + 12);
      v118 = swift_bridgeObjectRelease(v117);
      v119 = (void (*)(char *, uint64_t))v128;
      v128(v107, v112, v118);
      _os_log_impl( (void *)&_mh_execute_header,  v109,  v110,  "This function is for moving the date further into the future: %s",  v111,  0xCu);
      swift_arrayDestroy(v113, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v113, -1LL, -1LL);
      swift_slowDealloc(v111, -1LL, -1LL);

      v119(v126, v112);
    }

    else
    {

      v120 = (void (*)(char *, uint64_t))v128;
      ((void (*)(char *, uint64_t))v128)(v107, v16);
      v120(v126, v16);
    }

    return;
  }

  ((void (*)(char *, uint64_t))v128)(v89, v16);
LABEL_17:
  uint64_t v74 = (uint64_t)v130;
  v135(v130, a3, v16);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v67)(v74, 0LL, 1LL, v16);
  *(void *)&uint64_t v75 = swift_beginAccess(v59, v142, 33LL, 0LL).n128_u64[0];
  swift_bridgeObjectRetain(v48, v75);
  sub_1002E58A4(v74, v56, (uint64_t)v48);
  swift_endAccess(v142);
  uint64_t v76 = v31;
  uint64_t v77 = v16;
  v78 = (os_log_s *)Logger.logObject.getter(v76);
  v79 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v78, v79))
  {
    v80 = swift_slowAlloc(18LL, -1LL);
    v81 = swift_slowAlloc(32LL, -1LL);
    v142[0] = v81;
    *(_DWORD *)v80 = 136315394;
    v82 = &v76[OBJC_IVAR___SDDeferrableOperation_preventUntilDate];
    swift_beginAccess(&v76[OBJC_IVAR___SDDeferrableOperation_preventUntilDate], v139, 0LL, 0LL);
    v83 = (uint64_t)v82;
    v84 = v124;
    sub_1001915A4(v83, v124, &qword_1006457E8);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v136[6])(v84, 1LL, v77))
    {
      v85 = v77;
      sub_100187100(v84, &qword_1006457E8);
      v86 = (const char *)0x8000000100509260LL;
      v87 = 0xD00000000000001ALL;
    }

    else
    {
      v90 = v123;
      v135(v123, v84, v77);
      v91 = sub_100187100(v84, &qword_1006457E8);
      v87 = Date.description.getter(v91);
      v86 = v92;
      v93 = v90;
      v85 = v77;
      ((void (*)(char *, uint64_t))v128)(v93, v77);
    }

    v140 = sub_10018CDB4(v87, (unint64_t)v86, v142);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, v141, v80 + 4, v80 + 12);

    swift_bridgeObjectRelease(v86);
    *(_WORD *)(v80 + 12) = 1024;
    v94 = *(void *)&v76[OBJC_IVAR___SDDeferrableOperation_mainTimer];

    LODWORD(v140) = v94 != 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, (char *)&v140 + 4, v80 + 14, v80 + 18);

    _os_log_impl( (void *)&_mh_execute_header,  v78,  v79,  "preventUntilDate: %s, activeTimer: %{BOOL}d",  (uint8_t *)v80,  0x12u);
    swift_arrayDestroy(v81, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v81, -1LL, -1LL);
    swift_slowDealloc(v80, -1LL, -1LL);
  }

  else
  {
    v85 = v77;
  }

  v95 = (uint64_t)&v76[OBJC_IVAR___SDDeferrableOperation_preventUntilDate];
  swift_beginAccess(&v76[OBJC_IVAR___SDDeferrableOperation_preventUntilDate], v142, 0LL, 0LL);
  v96 = v127;
  sub_1001915A4(v95, v127, &qword_1006457E8);
  v97 = v136;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v136[6])(v96, 1LL, v85) == 1)
  {
    sub_100187100(v96, &qword_1006457E8);
    v98 = (uint64_t)v130;
    v135(v130, v131, v85);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v67)(v98, 0LL, 1LL, v85);
    swift_beginAccess(v95, &v140, 33LL, 0LL);
    sub_100225008(v98, v95);
    v99 = swift_endAccess(&v140);
    uint64_t v68 = (os_log_s *)Logger.logObject.getter(v99);
    __int16 v69 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v68, v69))
    {
      uint64_t v70 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v70 = 0;
      uint64_t v71 = "First time setting date";
      goto LABEL_28;
    }

    goto LABEL_29;
  }

  v100 = v125;
  ((void (*)(char *, uint64_t, uint64_t))v97[4])(v125, v96, v85);
  v101 = v131;
  v102 = static Date.> infix(_:_:)(v131, v100);
  if ((v102 & 1) != 0)
  {
    v103 = (os_log_s *)Logger.logObject.getter(v102);
    v104 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v103, v104))
    {
      v105 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v105 = 0;
      _os_log_impl((void *)&_mh_execute_header, v103, v104, "preventUntilDate updated", v105, 2u);
      swift_slowDealloc(v105, -1LL, -1LL);
    }

    v106 = (uint64_t)v130;
    v135(v130, v101, v85);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v67)(v106, 0LL, 1LL, v85);
    swift_beginAccess(v95, &v140, 33LL, 0LL);
    sub_100225008(v106, v95);
    swift_endAccess(&v140);
  }

  ((void (*)(char *, uint64_t))v128)(v100, v85);
}

      swift_release(v15);
      return v9;
    }

    uint64_t v14 = 0LL;
    while (v14 != 0x2000)
    {
      if ((v14 & 0x1FFE) != 0) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = *(unsigned __int8 *)(v6 - 82) << (8 * (v14 & 1));
      }
      *(void *)(v6 - 72) = v7;
      CFUserNotificationRef v20 = *(void *)(v7 + 16);
      uint64_t v19 = *(void *)(v7 + 24);
      if (v20 >= v19 >> 1)
      {
        sub_10018D984(v19 > 1, v20 + 1, 1);
        uint64_t v7 = *(void *)(v6 - 72);
      }

      *(void *)(v7 + 16) = v20 + 1;
      *(_WORD *)(v7 + 2 * v20 + 32) = v18;
      dispatch thunk of IteratorProtocol.next()(v12, v13);
      ++v14;
      if (*(_BYTE *)(v6 - 81) == 1) {
        goto LABEL_11;
      }
    }

    __break(1u);
LABEL_32:
    __break(1u);
    JUMPOUT(0x1002DD500LL);
  }

  uint64_t v9 = sub_100183098(&qword_10064D768);
  NSErrorUserInfoKey v10 = sub_1002DDC1C((unint64_t *)&unk_10064D770, &qword_10064D768);
  uint64_t v11 = swift_allocError(v9, v10, 0LL, 0LL);
  swift_willThrow(v11);
  return v9;
}

    swift_release(v20);
    return v9;
  }

  uint64_t v9 = sub_100183098(&qword_10064D750);
  NSErrorUserInfoKey v10 = sub_1002DDC1C(&qword_10064D758, &qword_10064D750);
  uint64_t v11 = swift_allocError(v9, v10, 0LL, 0LL);
  swift_willThrow(v11);
  return v9;
}

    uint64_t v15 = (v25 - 1) & v25;
    CFUserNotificationRef v20 = __clz(__rbit64(v25)) + (v14 << 6);
    goto LABEL_12;
  }

  __break(1u);
}

    uint64_t v40 = (v51 - 1) & v51;
    CFIndex v46 = __clz(__rbit64(v51)) + (v41 << 6);
LABEL_30:
    *(void *)(v0 + 416) = v41;
    *(void *)(v0 + 424) = v40;
    uint64_t v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 376);
    os_log_t v54 = *(void *)(v0 + 328);
    v55 = *(void *)(v0 + 336);
    id v56 = *(void *)(v0 + 312);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v55 + 16))( v56,  *(void *)(v47 + 48) + *(void *)(v55 + 72) * v46,  v54);
    uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56);
    *(void *)(v0 + 432) = v1;
    v1(v56, 0LL, 1LL, v54);
    if (v53(v56, 1LL, v54) == 1)
    {
      uint64_t v70 = *(void *)(v0 + 392);
      goto LABEL_36;
    }

    id v57 = *(void *)(v0 + 344);
    uint64_t v58 = *(void *)(v0 + 328);
    v59 = *(void *)(v0 + 312);
    id v60 = (uint64_t *)(*(void *)(v0 + 256) + *(void *)(v0 + 400));
    id v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 336) + 32LL);
    *(void *)(v0 + 440) = v61;
    v61(v57, v59, v58);
    swift_beginAccess(v60, v0 + 168, 32LL, 0LL);
    id v62 = *v60;
    if (*(void *)(v62 + 16))
    {
      int v63 = sub_1003AD618(*(void *)(v0 + 344));
      if ((v64 & 1) != 0)
      {
        sub_10019A6C4(*(void *)(v62 + 56) + 40 * v63, (uint64_t)v118);
        sub_1001CE0D0(v118, (uint64_t)v120);
        swift_endAccess(v0 + 168);
        uint64_t v65 = *(void *)(v0 + 40);
        os_log_t v66 = *(void *)(v0 + 48);
        sub_10019A708(v120, v65);
        __int16 v67 = *(int **)(v66 + 40);
        v125 = (uint64_t (*)(uint64_t, uint64_t))((char *)v67 + *v67);
        uint64_t v68 = (void *)swift_task_alloc(v67[1]);
        *(void *)(v0 + 44_Block_object_dispose((const void *)(v1 - 96), 8) = v68;
        *uint64_t v68 = v0;
        v68[1] = sub_1002F742C;
        return v125(v65, v66);
      }
    }

    uint64_t v43 = *(void *)(v0 + 336);
    uint64_t v42 = *(void *)(v0 + 344);
    uint64_t v44 = *(void *)(v0 + 328);
    swift_endAccess(v0 + 168);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
  }

  uint64_t v52 = v48 + 3;
  if (v52 < v49)
  {
    uint64_t v51 = *(void *)(v50 + 8 * v52);
    if (!v51)
    {
      while (1)
      {
        __int16 v41 = v52 + 1;
        if (__OFADD__(v52, 1LL)) {
          goto LABEL_51;
        }
        if (v41 >= v49) {
          goto LABEL_35;
        }
        uint64_t v51 = *(void *)(v50 + 8 * v41);
        ++v52;
        if (v51) {
          goto LABEL_29;
        }
      }
    }

    __int16 v41 = v52;
    goto LABEL_29;
  }

  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

      __break(1u);
      JUMPOUT(0x10030192CLL);
    }

    uint64_t v19 = v25;
    goto LABEL_24;
  }

  os_log_t v54 = *(void *)(v0 + 144);
  swift_task_dealloc(*(void *)(v0 + 168));
  swift_task_dealloc(v54);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

  __break(1u);
}

  __break(1u);
  return result;
}

  v55 = *(void **)(*(void *)(v1 + 40) + 16LL);
  if (!v55
    || (id v56 = v55,
        id v57 = [v56 applicationState],
        uint64_t v58 = [v57 isInstalled],
        v56,
        v57,
        (v58 & 1) == 0))
  {
LABEL_32:
    v59 = 0LL;
    goto LABEL_33;
  }

  v59 = 1LL;
LABEL_33:
  id v61 = *(void *)(v1 + 112);
  id v60 = *(void *)(v1 + 120);
  id v62 = *(void *)(v1 + 88);
  int v63 = *(void *)(v1 + 64);
  swift_task_dealloc(*(void *)(v1 + 144));
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v59);
}

  __break(1u);
LABEL_30:
  __break(1u);
}

  __break(1u);
LABEL_30:
  __break(1u);
}

void *sub_10003BFB4(void *result)
{
  if (*(_DWORD *)(result[4] + 264LL) != -1)
  {
    uint64_t v1 = result;
    if (dword_1006417A0 <= 40
      && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 40LL)))
    {
      LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _ensureClientStarted]_block_invoke",  40LL,  "iTunes accounts changed\n");
    }

    return _[(id)v1[4] _iTunesAccountsChanged];
  }

  return result;
}

id sub_10003C040(uint64_t a1)
{
  return [*(id *)(a1 + 32) _primaryAccountChanged];
}

id sub_10003C04C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _uiLockStatusChanged];
}

id sub_10003C054(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _wifiStateChanged];
}

id sub_10003C05C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

id sub_10003C084(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _scanTimerFired];
}

id sub_10003C08C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _deviceFound:a2];
}

id sub_10003C098(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _deviceLost:a2];
}

id sub_10003C0A4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _deviceFound:a2];
}

void sub_10003C0B0(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = v2;
  if (v2)
  {
    if (dword_1006417A0 <= 60)
    {
      int v8 = v2;
      if (dword_1006417A0 != -1 || (int v6 = _LogCategory_Initialize(&dword_1006417A0, 60LL), v3 = v8, v6))
      {
        uint64_t v4 = "### Discovery start failed: %@\n";
        uint64_t v5 = 60LL;
LABEL_8:
        LogPrintF(&dword_1006417A0, "-[SDSetupAgent _ensureClientStarted]_block_invoke_11", v5, v4);

        return;
      }
    }
  }

  else if (dword_1006417A0 <= 30)
  {
    int v8 = 0LL;
    if (dword_1006417A0 != -1 || (v7 = _LogCategory_Initialize(&dword_1006417A0, 30LL), uint64_t v3 = 0LL, v7))
    {
      uint64_t v4 = "Discovery started\n";
      uint64_t v5 = 30LL;
      goto LABEL_8;
    }
  }
}

void sub_10003C184(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (dword_100643B00 <= 30)
  {
    if (dword_100643B00 != -1 || (int v4 = _LogCategory_Initialize(&dword_100643B00, 30LL), v3 = v5, v4))
    {
      LogPrintF( &dword_100643B00,  "-[SDSetupAgent _ensureClientStarted]_block_invoke_12",  30LL,  "BLE WatchSetup found %@\n",  v3);
      id v3 = v5;
    }
  }

  [*(id *)(a1 + 32) _watchFound:v3];
}

void sub_10003C21C(id a1, SFBLEDevice *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (dword_100643B00 <= 30
    && ((v5 = v2, dword_100643B00 != -1) || (int v4 = _LogCategory_Initialize(&dword_100643B00, 30LL), v3 = v5, v4)))
  {
    LogPrintF( &dword_100643B00,  "-[SDSetupAgent _ensureClientStarted]_block_invoke_13",  30LL,  "BLE WatchSetup lost %@\n",  v3);
  }

  else
  {
  }

void sub_10003C29C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (dword_100643B00 <= 30)
  {
    if (dword_100643B00 != -1 || (int v4 = _LogCategory_Initialize(&dword_100643B00, 30LL), v3 = v5, v4))
    {
      LogPrintF( &dword_100643B00,  "-[SDSetupAgent _ensureClientStarted]_block_invoke_14",  30LL,  "BLE WatchSetup changed %@\n",  v3);
      id v3 = v5;
    }
  }

  [*(id *)(a1 + 32) _watchFound:v3];
}

void sub_10003C334(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2
    && dword_1006417A0 <= 60
    && ((v5 = v2, dword_1006417A0 != -1) || (int v4 = _LogCategory_Initialize(&dword_1006417A0, 60LL), v3 = v5, v4)))
  {
    LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _ensureClientStarted]_block_invoke_15",  60LL,  "### WatchScan start failed: %@\n",  v3);
  }

  else
  {
  }

LABEL_170:
                          if (!arc4random_uniform(0xAu))
                          {
                            v67[0] = @"_cat";
                            v67[1] = @"_op";
                            v68[0] = @"Setup";
                            v68[1] = @"Triggered";
                            v67[2] = @"action";
                            uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  v5));
                            v68[2] = v58;
                            v67[3] = @"rssi";
                            v59 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [v6 rssiEstimate]));
                            v68[3] = v59;
                            id v60 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v68,  v67,  4LL));
                            SFDashboardLogJSON();

                            v65[0] = @"action";
                            id v61 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  v5));
                            v65[1] = @"rssi";
                            v66[0] = v61;
                            id v62 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [v6 rssiEstimate]));
                            v66[1] = v62;
                            int v63 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v66,  v65,  2LL));
                            SFMetricsLog(@"com.apple.sharing.SetupTriggered", v63);
                          }

                          break;
                        }

                        if (dword_1006417A0 <= 50
                          && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 50LL)))
                        {
                          LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _deviceFound:]",  50LL,  "Ignoring proximity dovePeace setup during resume: %@\n",  v6);
                        }
                      }

                      else if (dword_1006417A0 <= 50 {
                             && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 50LL)))
                      }
                      {
                        LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _deviceFound:]",  50LL,  "Ignoring proximity dovePeace setup when not allowed for %@\n",  v6);
                      }
                    }

                    break;
                  default:
                    if ((_DWORD)v5 == 1)
                    {
                      if (self->_triggeredUIAppleTVSetup)
                      {
                        if (dword_1006417A0 <= 50
                          && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 50LL)))
                        {
                          LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _deviceFound:]",  50LL,  "Ignoring proximity AppleTVSetup with another %@\n",  v6);
                        }
                      }

                      else
                      {
                        v55 = (void *)objc_claimAutoreleasedReturnValue( +[MCProfileConnection sharedConnection]( &OBJC_CLASS___MCProfileConnection,  "sharedConnection"));
                        id v56 = [v55 isProximitySetupToNewDeviceAllowed];

                        if ((v56 & 1) != 0)
                        {
                          self->_triggeredUIAppleTVSetup = 1;
                          if (dword_1006417A0 <= 50
                            && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 50LL)))
                          {
                            LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _deviceFound:]",  50LL,  "Triggering proximity AppleTVSetup with %@\n",  v6);
                          }

                          -[SDSetupAgent _uiStartAppleTVSetup:extraInfo:]( self,  "_uiStartAppleTVSetup:extraInfo:",  v4,  0LL);
                          goto LABEL_170;
                        }

                        if (dword_1006417A0 <= 50
                          && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 50LL)))
                        {
                          LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _deviceFound:]",  50LL,  "Ignoring proximity AppleTVSetup when not allowed for %@\n",  v6);
                        }
                      }
                    }

                    else
                    {
                      if ((_DWORD)v5 != 43) {
                        break;
                      }
LABEL_57:
                      if (self->_triggeredUIAuthenticateAccounts)
                      {
                        if (dword_1006417A0 <= 50
                          && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 50LL)))
                        {
                          LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _deviceFound:]",  50LL,  "Ignoring proximity AuthenticateAccounts with another %@\n",  v6);
                        }
                      }

                      else
                      {
                        uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue( +[MCProfileConnection sharedConnection]( &OBJC_CLASS___MCProfileConnection,  "sharedConnection"));
                        uint64_t v38 = [v37 isProximitySetupToNewDeviceAllowed];

                        if ((v38 & 1) != 0)
                        {
                          self->_triggeredUIAuthenticateAccounts = 1;
                          if (dword_1006417A0 <= 50
                            && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 50LL)))
                          {
                            LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _deviceFound:]",  50LL,  "Triggering proximity AuthenticateAccounts with %@\n",  v6);
                          }

                          -[SDSetupAgent _uiStartAuthenticateAccounts:](self, "_uiStartAuthenticateAccounts:", v4);
                          goto LABEL_170;
                        }

                        if (dword_1006417A0 <= 50
                          && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 50LL)))
                        {
                          LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _deviceFound:]",  50LL,  "Ignoring proximity AuthenticateAccounts when not allowed for %@\n",  v6);
                        }
                      }
                    }

                    break;
                }
              }
            }
          }
        }
      }
    }

    else
    {
      if (v8) {
        -[SDSetupAgent _postDeviceSetupNotificationForDevice:present:]( self,  "_postDeviceSetupNotificationForDevice:present:",  v4,  1LL);
      }
      -[NSMutableDictionary removeObjectForKey:](self->_devices, "removeObjectForKey:", v7);
      if ([v8 deviceActionType] == 12
        || [v8 deviceActionType] == 17)
      {
        -[NSMutableDictionary removeObjectForKey:](self->_triggeredDevices, "removeObjectForKey:", v7);
      }

      else if ([v8 deviceActionType] == 8)
      {
        -[SDSetupAgent _uiStopIfNeededWithDevice:](self, "_uiStopIfNeededWithDevice:", v7);
      }

      unoteTVLatencySetup = self->_unoteTVLatencySetup;
      if (unoteTVLatencySetup)
      {
        NSErrorUserInfoKey v13 = (void *)objc_claimAutoreleasedReturnValue(-[CUUserNotificationSession identifier](unoteTVLatencySetup, "identifier"));
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v7 UUIDString]);
        uint64_t v15 = [v13 isEqual:v14];

        if (v15)
        {
          -[CUUserNotificationSession invalidate](self->_unoteTVLatencySetup, "invalidate");
          uint64_t v16 = self->_unoteTVLatencySetup;
          self->_unoteTVLatencySetup = 0LL;
        }
      }
    }
  }

LABEL_172:
}

void sub_10003DCFC(id a1, OS_xpc_object *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2 == (OS_xpc_object *)&_xpc_error_connection_invalid
    || dword_1006417A0 > 30
    || (v5 = v2, dword_1006417A0 == -1) && (int v4 = _LogCategory_Initialize(&dword_1006417A0, 30LL), v3 = v5, !v4))
  {
  }

  else
  {
    LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _launchAppWithMachServiceName:]_block_invoke",  30LL,  "Launch XPC event: %{xpc}\n",  v3);
  }

void sub_10003DD8C(uint64_t a1)
{
  if (dword_1006417A0 <= 30 && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 30LL))) {
    LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _launchAppWithMachServiceName:]_block_invoke_2",  30LL,  "Launch XPC '%@' finish\n",  *(void *)(a1 + 40));
  }
}

void *sub_10003DFE8(void *result)
{
  if (*(void *)(result[4] + 136LL))
  {
    uint64_t v1 = result;
    if (dword_1006417A0 <= 30
      && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 30LL)))
    {
      LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _appleAccountSignIn:]_block_invoke",  30LL,  "Apple Account signed in\n");
    }

    return [(id)v1[4] _resetTriggers];
  }

  return result;
}

void *sub_10003E324(uint64_t a1)
{
  SecTrustResultType result = *(void **)(a1 + 32);
  id v3 = (void *)result[17];
  if (v3)
  {
    if (dword_1006417A0 <= 30)
    {
      if (dword_1006417A0 != -1)
      {
LABEL_4:
        unsigned int v4 = [v3 screenOn];
        id v5 = "off";
        if (v4) {
          id v5 = "on";
        }
        LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _screenStateChanged]_block_invoke",  30LL,  "Screen state changed to %s\n",  v5);
        SecTrustResultType result = *(void **)(a1 + 32);
        return [result _update];
      }

      int v6 = _LogCategory_Initialize(&dword_1006417A0, 30LL);
      SecTrustResultType result = *(void **)(a1 + 32);
      if (v6)
      {
        id v3 = (void *)result[17];
        goto LABEL_4;
      }
    }

    return [result _update];
  }

  return result;
}

void *sub_10003E8D8(uint64_t a1)
{
  SecTrustResultType result = *(void **)(a1 + 32);
  id v3 = (void *)result[18];
  if (v3)
  {
    if (dword_1006417A0 <= 30)
    {
      if (dword_1006417A0 != -1)
      {
LABEL_4:
        unsigned int v4 = [v3 screenLocked];
        id v5 = "unlocked";
        if (v4) {
          id v5 = "locked";
        }
        LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _uiLockStatusChanged]_block_invoke",  30LL,  "UI lock status changed to %s\n",  v5);
        SecTrustResultType result = *(void **)(a1 + 32);
        return [result _update];
      }

      int v6 = _LogCategory_Initialize(&dword_1006417A0, 30LL);
      SecTrustResultType result = *(void **)(a1 + 32);
      if (v6)
      {
        id v3 = (void *)result[18];
        goto LABEL_4;
      }
    }

    return [result _update];
  }

  return result;
}

void sub_10003F7EC(uint64_t a1, unsigned int a2, void *a3)
{
  id v8 = a3;
  if (dword_1006417A0 <= 50 && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 50LL)))
  {
    if (a2 > 5) {
      id v5 = "?";
    }
    else {
      id v5 = off_1005CBD70[a2];
    }
    LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _uiStartTVLatencyBanner:forActionType:]_block_invoke",  50LL,  "UNote action: TVLatency, %s, %{error}\n",  v5,  v8);
  }

  [*(id *)(*(void *)(a1 + 32) + 168) invalidate];
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(void **)(v6 + 168);
  *(void *)(v6 + 16_Block_object_dispose((const void *)(v1 - 96), 8) = 0LL;

  if (a2 == 1 && !v8) {
    [*(id *)(a1 + 32) _uiStartTVLatencySetup:*(void *)(a1 + 40) extraInfo:0 forActionType:*(unsigned __int8 *)(a1 + 48)];
  }
}

id sub_10003FEE0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _watchFastScanStop];
}

LABEL_47:
}

    self->_rssiThreshold = (int64_t)v17;
  }

  -[SDRemoteInteractionAgent _update](self, "_update");
}

        CFNumberRef v26 = (dispatch_queue_s *)self->_dispatchQueue;
        v27[0] = _NSConcreteStackBlock;
        v27[1] = 3221225472LL;
        v27[2] = sub_100109BB8;
        v27[3] = &unk_1005CE5C8;
        uint64_t v28 = v7;
        uint64_t v29 = v25;
        dispatch_async(v26, v27);

        goto LABEL_48;
      }

      if (dword_1006435F8 <= 30
        && (dword_1006435F8 != -1 || _LogCategory_Initialize(&dword_1006435F8, 30LL)))
      {
        LogPrintF( &dword_1006435F8,  "-[SDAppleIDAgent _performOtherTaskWithInfo:completion:]",  30LL,  "Remove Apple ID Request\n");
      }

      -[SDAppleIDAgent _clearAccount](self, "_clearAccount");
      if (!v7)
      {
LABEL_35:
        uint64_t v15 = 0LL;
        uint64_t v16 = 0LL;
LABEL_36:
        uint64_t v14 = 0LL;
        uint64_t v9 = 0LL;
        goto LABEL_37;
      }

      CFUserNotificationRef v20 = (dispatch_queue_s *)self->_dispatchQueue;
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3221225472LL;
      v32[2] = sub_100109B88;
      v32[3] = &unk_1005CE278;
      uint64_t v33 = v7;
      dispatch_async(v20, v32);
      uint64_t v18 = v33;
    }

    goto LABEL_35;
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:@"appleID"]);
  if (!v9) {
    goto LABEL_46;
  }
  p_testIdentityRequest = &self->_testIdentityRequest;
  testIdentityRequest = self->_testIdentityRequest;
  if (testIdentityRequest)
  {
    -[SDAppleIDIdentityRequest invalidate](testIdentityRequest, "invalidate");
    id v12 = *p_testIdentityRequest;
    *p_testIdentityRequest = 0LL;
  }

  NSErrorUserInfoKey v13 = -[SDAppleIDIdentityRequest initWithAppleID:]( objc_alloc(&OBJC_CLASS___SDAppleIDIdentityRequest),  "initWithAppleID:",  v9);
  if (!v13)
  {
    uint64_t v25 = -6728;
    if (!v7) {
      goto LABEL_48;
    }
    goto LABEL_47;
  }

  uint64_t v14 = v13;
  -[SDAppleIDIdentityRequest setDispatchQueue:](v13, "setDispatchQueue:", self->_dispatchQueue);
  v38[0] = _NSConcreteStackBlock;
  v38[1] = 3221225472LL;
  v38[2] = sub_100109A9C;
  v38[3] = &unk_1005CE618;
  v38[4] = self;
  uint64_t v39 = v7;
  -[SDAppleIDIdentityRequest setResponseHandler:](v14, "setResponseHandler:", v38);
  objc_storeStrong((id *)&self->_testIdentityRequest, v14);
  -[SDAppleIDIdentityRequest activate](self->_testIdentityRequest, "activate");

  uint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
LABEL_37:
}

    uint64_t v51 = sub_100183098(&qword_100649768);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56LL))(v9, 1LL, 1LL, v51);
    uint64_t v35 = 0LL;
  }

  __break(1u);
LABEL_79:
  swift_once(&qword_100643FB8, sub_100227D00);
LABEL_7:
  uint64_t v15 = type metadata accessor for Logger(0LL);
  *(void *)&v80 = sub_100186DE4(v15, (uint64_t)qword_1006494F0);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v80);
  uint64_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc(18LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    v78 = v3;
    CFUserNotificationRef v20 = v19;
    v87[0] = v19;
    *(_DWORD *)uint64_t v18 = 136315394;
    if ((_BYTE)v5) {
      SInt32 v21 = 0x2072756F6A6E6F42LL;
    }
    else {
      SInt32 v21 = 0xD00000000000001ALL;
    }
    if ((_BYTE)v5) {
      uint64_t v22 = 0xEE00726576726553LL;
    }
    else {
      uint64_t v22 = 0x80000001005069C0LL;
    }
    v85 = sub_10018CDB4(v21, v22, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v86, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease(v22);
    *(_WORD *)(v18 + 12) = 1024;
    LODWORD(v85) = v4 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, (char *)&v85 + 4, v18 + 14, v18 + 18);
    _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "Attempting Stop AirDrop %s - forced: %{BOOL}d",  (uint8_t *)v18,  0x12u);
    swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v23 = v20;
    id v3 = v78;
    swift_slowDealloc(v23, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  if ((v4 & 1) != 0
    || (!(_BYTE)v5
      ? (uint64_t v24 = OBJC_IVAR____TtC16DaemoniOSLibrary33SDAirDropReceiveConnectionManager_quicReceiveHandlers)
      : (uint64_t v24 = OBJC_IVAR____TtC16DaemoniOSLibrary33SDAirDropReceiveConnectionManager_bonjourReceiveHandlers),
        int v63 = v3 + v24,
        id v64 = swift_beginAccess(v3 + v24, v87, 0LL, 0LL),
        !*(void *)(*(void *)v63 + 16LL)))
  {
    uint64_t v70 = swift_getObjectType(v9);
    (*((void (**)(uint64_t, char *))v11 + 8))(v70, v11);
    swift_unknownObjectRelease(v9);
    if ((_BYTE)v5)
    {
      uint64_t v71 = OBJC_IVAR____TtC16DaemoniOSLibrary33SDAirDropReceiveConnectionManager_bonjourServer;
    }

    else
    {
      uint64_t v71 = OBJC_IVAR____TtC16DaemoniOSLibrary33SDAirDropReceiveConnectionManager_applicationServiceServer;
    }

    uint64_t v72 = (char **)(v3 + v71);
    uint64_t v73 = *v72;
    *uint64_t v72 = 0LL;
    v72[1] = 0LL;
LABEL_69:
    swift_unknownObjectRelease(v73);
    return;
  }

  uint64_t v58 = (os_log_s *)Logger.logObject.getter(v64);
  uint64_t v65 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v58, v65))
  {

    uint64_t v73 = v9;
    goto LABEL_69;
  }

  os_log_t v66 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  __int16 v67 = swift_slowAlloc(32LL, -1LL);
  v85 = v67;
  *(_DWORD *)os_log_t v66 = 136315138;
  if ((_BYTE)v5)
  {
    else {
      uint64_t v68 = 0x656946207261654ELL;
    }
    else {
      __int16 v69 = 0xEA0000000000646CLL;
    }
  }

  else
  {
    uint64_t v68 = 0xD00000000000001ALL;
    __int16 v69 = 0x80000001005069C0LL;
  }

  v83 = sub_10018CDB4(v68, v69, &v85);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v66 + 4, v66 + 12);
  swift_bridgeObjectRelease(v69);
  _os_log_impl((void *)&_mh_execute_header, v58, v65, "%s Connections Present - Stop Ignored", v66, 0xCu);
  swift_arrayDestroy(v67, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v67, -1LL, -1LL);
  swift_slowDealloc(v66, -1LL, -1LL);
  swift_unknownObjectRelease(v9);
LABEL_76:
}

    SecTrustResultType result = [(id)objc_opt_self(v45[169]) v7[341]];
    if (!result)
    {
      __break(1u);
      goto LABEL_83;
    }

    v82 = result;
    URL._bridgeToObjectiveC()(v81);
    v84 = v83;
    v85 = [v82 openSensitiveURL:v83 withOptions:0];

    if ((v85 & 1) == 0)
    {
      (*(void (**)(void, void))(*(void *)(v0 + 232) + 8LL))( *(void *)(v0 + 240),  *(void *)(v0 + 224));
      v120 = 0;
LABEL_76:
      swift_bridgeObjectRelease(*(const char **)(v0 + 176));
      uint64_t v23 = v120 & 1;
      goto LABEL_77;
    }

    v86 = *(void **)(v0 + 184);
    if (v86 && (v87 = [v86 v5[11]]) != 0)
    {
      v88 = v87;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
      v90 = v89;

      v91 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v90);
    }

    else
    {
      v91 = 0LL;
    }

    v92 = *(void *)(v0 + 304);
    v93 = (void *)objc_opt_self(&OBJC_CLASS___SDAirDropHandler);
    URL._bridgeToObjectiveC()(v94);
    v96 = v95;
    [v93 logReceiverBundleID:v91 forURL:v95];

    v97 = v92 + 1;
    if (__OFADD__(v92, 1LL))
    {
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
      goto LABEL_81;
    }

    v98 = *(void *)(v0 + 232);
    v99 = *(void *)(v0 + 240);
    v100 = *(void *)(v0 + 224);
    v101 = *(void (**)(double *))(v0 + 160);
    v122 = (double)v97 / (double)(*(void *)(v0 + 280) + 1LL);
    v101(&v122);
    (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v99, v100);
    id v3 = *(void *)(v0 + 288);
    uint64_t v44 = *(void *)(v0 + 296);
    uint64_t v43 = 1;
  }

  v103 = [objc_allocWithZone(_LSOpenConfiguration) init];
  *(void *)(v0 + 312) = v103;
  [v103 setFrontBoardOptions:0];
  SecTrustResultType result = [(id)objc_opt_self(v45[169]) v7[341]];
  *(void *)(v0 + 320) = result;
  if (result)
  {
    v105 = result;
    v106 = v0 + 16;
    URL._bridgeToObjectiveC()(v104);
    v108 = v107;
    *(void *)(v0 + 32_Block_object_dispose((const void *)(v1 - 96), 8) = v107;
    *(void *)(v0 + 56) = v117;
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_100268F1C;
    v109 = swift_continuation_init(v0 + 16, 1LL);
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    v110 = (void *)(v0 + 80);
    v110[1] = 0x40000000LL;
    v110[2] = sub_1002697E4;
    v110[3] = &unk_1005D6C28;
    v110[4] = v109;
    [v105 openURL:v108 configuration:v103 completionHandler:v110];
    return (id)swift_continuation_await(v106);
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

BOOL sub_10004065C(id a1, NRDevice *a2)
{
  uint64_t v2 = a2;
  id v3 = off_100641818();
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[NRDevice valueForProperty:](v2, "valueForProperty:", v4));

  if ([v5 BOOLValue])
  {
    id v6 = off_100641820();
    int v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(-[NRDevice valueForProperty:](v2, "valueForProperty:", v7));

    unsigned __int8 v9 = [v8 BOOLValue];
    id v5 = v8;
  }

  else
  {
    unsigned __int8 v9 = 0;
  }

  return v9;
}

void sub_1000407A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = v3;
  if (v3)
  {
    if (dword_1006417A0 <= 60)
    {
      id v7 = v3;
      if (dword_1006417A0 != -1 || (v5 = _LogCategory_Initialize(&dword_1006417A0, 60LL), unsigned int v4 = v7, v5))
      {
        LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _watchStartMigration:]_block_invoke",  60LL,  "### Watch migration failed: %@, %{error}\n",  *(void *)(a1 + 32),  v4);
LABEL_8:
        unsigned int v4 = v7;
      }
    }
  }

  else if (dword_1006417A0 <= 50)
  {
    id v7 = 0LL;
    if (dword_1006417A0 != -1 || (v6 = _LogCategory_Initialize(&dword_1006417A0, 50LL), unsigned int v4 = 0LL, v6))
    {
      LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _watchStartMigration:]_block_invoke",  50LL,  "Watch migration started: %@\n",  *(void *)(a1 + 32));
      goto LABEL_8;
    }
  }
}

void sub_100040A84(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(*(void *)(a1 + 32) + 72LL))
  {
    id v6 = v3;
    if (dword_1006417A0 <= 30
      && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 30LL)))
    {
      LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _ensureServerStarted]_block_invoke",  30LL,  "PINPair ending session on error: %{error}\n",  v6);
    }

    [*(id *)(*(void *)(a1 + 32) + 72) invalidate];
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(void **)(v4 + 72);
    *(void *)(v4 + 72) = 0LL;

    id v3 = v6;
  }
}

void sub_100040B34(id a1)
{
}

void sub_100040B94(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (dword_1006417A0 <= 20)
  {
    if (dword_1006417A0 != -1 || (int v4 = _LogCategory_Initialize(&dword_1006417A0, 20LL), v3 = v5, v4))
    {
      LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _ensureServerStarted]_block_invoke_3",  20LL,  "Received request: %@\n",  v3);
      id v3 = v5;
    }
  }

  [*(id *)(a1 + 32) _pinPairHandleRequest:v3];
}

void sub_100040C2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (v3)
  {
    id v8 = v3;
    if (dword_1006417A0 <= 60
      && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 60LL)))
    {
      LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _ensureServerStarted]_block_invoke_4",  60LL,  "### PINPair activate failed: %@\n",  v8);
    }

    [*(id *)(*(void *)(a1 + 32) + 64) invalidate];
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(void **)(v5 + 64);
    *(void *)(v5 + 64) = 0LL;

    goto LABEL_10;
  }

  if (dword_1006417A0 <= 30)
  {
    id v8 = 0LL;
    if (dword_1006417A0 != -1 || (v7 = _LogCategory_Initialize(&dword_1006417A0, 30LL), int v4 = 0LL, v7))
    {
      LogPrintF(&dword_1006417A0, "-[SDSetupAgent _ensureServerStarted]_block_invoke_4", 30LL, "PINPair activated\n");
LABEL_10:
      int v4 = v8;
    }
  }
}

void sub_1000411BC(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (dword_1006417A0 <= 30 && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 30LL))) {
    LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _pinPairHandleRequest:]_block_invoke",  30LL,  "PINPair session %@ completed %{error}\n",  *(void *)(*(void *)(a1 + 32) + 80LL),  v5);
  }
  [*(id *)(*(void *)(a1 + 32) + 72) invalidate];
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(void **)(v3 + 72);
  *(void *)(v3 + 72) = 0LL;
}

id sub_100041268(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_pinPairHandleShowPIN:");
}

id sub_100041270(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _pinPairHandleHidePIN];
}

void sub_1000415A4(id a1, BOOL a2, NSError *a3)
{
  uint64_t v3 = a3;
  int v4 = v3;
  if (v3)
  {
    if (dword_1006417A0 <= 30)
    {
      int v7 = v3;
      if (dword_1006417A0 != -1 || (v5 = _LogCategory_Initialize(&dword_1006417A0, 30LL), int v4 = v7, v5))
      {
        LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _pinPairHandleShowPIN:]_block_invoke",  30LL,  "PINPair dialog error: %@\n",  v4);
LABEL_8:

        return;
      }
    }
  }

  else if (dword_1006417A0 <= 30)
  {
    int v7 = 0LL;
    if (dword_1006417A0 != -1 || (v6 = _LogCategory_Initialize(&dword_1006417A0, 30LL), int v4 = 0LL, v6))
    {
      LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _pinPairHandleShowPIN:]_block_invoke",  30LL,  "PINPair dialog ended %s\n");
      goto LABEL_8;
    }
  }
}

void *sub_100041EB0(void *result)
{
  if (*(_DWORD *)(result[4] + 260LL) != -1)
  {
    uint64_t v1 = result;
    if (dword_1006417A0 <= 40
      && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 40LL)))
    {
      LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _repairEnsuredStarted]_block_invoke",  40LL,  "TTF: CFU items changed\n");
    }

    return [(id)v1[4] _repairHandleCFUItemsChanged];
  }

  return result;
}

id sub_100041F3C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _repairHandleManateeChanged];
}

id sub_100041F44(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _repairHandleManateeChanged];
}

id sub_100041F4C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _repairHandleManateeChanged];
}

void *sub_100041F54(void *result, unint64_t a2)
{
  if (*(void *)(result[4] + 336LL))
  {
    uint64_t v3 = result;
    if (dword_1006417A0 <= 30)
    {
      if (dword_1006417A0 != -1 || (SecTrustResultType result = (void *)_LogCategory_Initialize(&dword_1006417A0, 30LL), (_DWORD)result))
      {
        if (a2 > 3) {
          int v4 = "?";
        }
        else {
          int v4 = off_1005CBDA0[a2];
        }
        SecTrustResultType result = (void *)LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _repairEnsuredStarted]_block_invoke_5",  30LL,  "TTF: WiFi health status changed: %s\n",  v4);
      }
    }

    uint64_t v5 = v3[4];
    if ((a2 & 0xFFFFFFFFFFFFFFFELL) == 2) {
      uint64_t v6 = *(void *)(v5 + 384) | 0x10LL;
    }
    else {
      uint64_t v6 = *(void *)(v5 + 384);
    }
    uint64_t v7 = *(void *)(v5 + 384) & 0xFFFFFFEFLL;
    if (a2 != 1) {
      uint64_t v7 = v6;
    }
    *(_BYTE *)(v5 + 344) = (v7 & 0x10) != 0;
    *(_BYTE *)(v3[4] + 345LL) = a2 == 3;
    uint64_t v8 = v3[4];
    uint64_t v9 = v7 | 0x10000;
    uint64_t v10 = v7 & 0xFFFEFFFF;
    if (*(_BYTE *)(v8 + 345)) {
      uint64_t v10 = v9;
    }
    if (v10 != *(void *)(v8 + 384))
    {
      *(void *)(v8 + 384) = v10;
      return [(id)v3[4] _repairProblemFlagsChanged];
    }
  }

  return result;
}

void *sub_10004207C(void *result)
{
  if (*(_DWORD *)(result[4] + 348LL) != -1)
  {
    uint64_t v1 = result;
    if (dword_1006417A0 <= 30
      && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 30LL)))
    {
      LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _repairEnsuredStarted]_block_invoke_6",  30LL,  "TTF: Captive status changed");
    }

    return [(id)v1[4] _repairHandleCNSStateChanged];
  }

  return result;
}

void sub_100042108(uint64_t a1, int a2, void *a3)
{
  uint64_t v7 = a3;
  if (dword_1006417A0 <= 30 && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 30LL)))
  {
    uint64_t v5 = sub_1000421BC(a2);
    uint64_t v6 = &stru_1005E3958;
    if (v7) {
      uint64_t v6 = v7;
    }
    LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _repairEnsuredStarted]_block_invoke_7",  30LL,  "TTF: Problem reporting repair progress: %s %@\n",  v5,  v6);
  }

  if (a2 == 96) {
    [*(id *)(a1 + 32) _repairHandleCompletion];
  }
}

const char *sub_1000421BC(int a1)
{
  if (a1 > 299)
  {
    if (a1 <= 799)
    {
      if (a1 <= 519)
      {
        if (a1 <= 410)
        {
          if (a1 <= 399)
          {
            if (a1 == 300) {
              return "BackupProgress";
            }
            if (a1 == 310) {
              return "SyncProgress";
            }
          }

          else
          {
            switch(a1)
            {
              case 400:
                return "StopSetup";
              case 401:
                return "PINPair";
              case 410:
                return "MigrateStart";
            }
          }
        }

        else if (a1 > 430)
        {
          switch(a1)
          {
            case 431:
              return "eSimExternal2FAStop";
            case 500:
              return "SiriWelcome";
            case 510:
              return "SiriDialogA";
          }
        }

        else
        {
          switch(a1)
          {
            case 411:
              return "MigrateStop";
            case 420:
              return "FileTransferReady";
            case 430:
              return "eSimExternal2FAStart";
          }
        }
      }

      else if (a1 > 559)
      {
        if (a1 > 599)
        {
          switch(a1)
          {
            case 600:
              return "SiriSkipDemo";
            case 700:
              return "StopSetupLEDs";
            case 710:
              return "AudioPasscodeEnded";
          }
        }

        else
        {
          switch(a1)
          {
            case 560:
              return "SiriDialogCMusic";
            case 570:
              return "SiriDialogCNews";
            case 580:
              return "SiriDialogCWeather";
          }
        }
      }

      else if (a1 > 549)
      {
        switch(a1)
        {
          case 550:
            return "SiriDialogBWeather";
          case 555:
            return "SiriDialogBClock";
          case 558:
            return "SiriDialogBMusic";
        }
      }

      else
      {
        switch(a1)
        {
          case 520:
            return "SiriDialogBStart";
          case 530:
            return "SiriDialogBHome";
          case 540:
            return "SiriDialogBNews";
        }
      }

      return "?";
    }

    if (a1 > 999)
    {
      if (a1 <= 1099)
      {
        if (a1 == 1000) {
          return "SecureIntentStart";
        }
        if (a1 == 1001) {
          return "SecureIntentFinish";
        }
      }

      else
      {
        switch(a1)
        {
          case 1100:
            return "OneTimeCodeDetected";
          case 2000:
            return "DependentStart";
          case 2001:
            return "DependentEnd";
        }
      }

      return "?";
    }

    switch(a1)
    {
      case 900:
        SecTrustResultType result = "SU-No-SetupScanAttempt";
        break;
      case 901:
        SecTrustResultType result = "SU-No-SetupStatusUpdate";
        break;
      case 902:
        SecTrustResultType result = "SU-No-SetupWipeWifi";
        break;
      case 903:
        SecTrustResultType result = "SU-No-SetupCancelled";
        break;
      case 904:
        SecTrustResultType result = "SU-No-SetupObliterate";
        break;
      case 905:
        SecTrustResultType result = "SU-No-SetupCannotCancel";
        break;
      case 906:
        SecTrustResultType result = "SysDrop AirDrop Event";
        break;
      case 907:
        SecTrustResultType result = "SysDrop Sysdiagnose Event";
        break;
      case 908:
        SecTrustResultType result = "SysDrop Cancel Event";
        break;
      case 909:
        SecTrustResultType result = "File Transfer Progress Event";
        break;
      case 910:
        SecTrustResultType result = "File Transfer Completed Event";
        break;
      case 911:
        SecTrustResultType result = "iOSWiFiSetup";
        break;
      case 912:
        SecTrustResultType result = "HKPrimaryResidentSSIDFetchStart";
        break;
      case 913:
        SecTrustResultType result = "LoggingProfileTransfer";
        break;
      default:
        switch(a1)
        {
          case 800:
            SecTrustResultType result = "AuthAccountsStart";
            break;
          case 803:
            SecTrustResultType result = "AuthAccountsiCloudProgress";
            break;
          case 804:
            SecTrustResultType result = "AuthAccountsStoreProgress";
            break;
          case 805:
            SecTrustResultType result = "AuthAccountsGameCenterProgress";
            break;
          default:
            return "?";
        }

        break;
    }
  }

  else if (a1 > 129)
  {
    if (a1 > 249)
    {
      switch(a1)
      {
        case 260:
          SecTrustResultType result = "TVLSStart";
          break;
        case 261:
        case 262:
        case 263:
        case 265:
        case 266:
        case 267:
        case 268:
        case 269:
        case 271:
        case 273:
        case 275:
          return "?";
        case 264:
          SecTrustResultType result = "TVLSFinish";
          break;
        case 270:
          SecTrustResultType result = "TVLSEstimateStart";
          break;
        case 272:
          SecTrustResultType result = "TVLSEstimateFinal";
          break;
        case 274:
          SecTrustResultType result = "TVLSEstimateFailed";
          break;
        case 276:
          SecTrustResultType result = "TVLSTryAgain";
          break;
        case 277:
          SecTrustResultType result = "TVLSToneBegan";
          break;
        case 278:
          SecTrustResultType result = "TVLCalStart";
          break;
        case 279:
          SecTrustResultType result = "TVLCalStep";
          break;
        case 280:
          SecTrustResultType result = "TVLCalFailed";
          break;
        case 281:
          SecTrustResultType result = "TVLCalTryAgain";
          break;
        case 282:
          SecTrustResultType result = "TVLCalFinal";
          break;
        default:
          if (a1 != 250) {
            return "?";
          }
          SecTrustResultType result = "ReportSuccess";
          break;
      }
    }

    else
    {
      if (a1 <= 219)
      {
        if (a1 <= 149)
        {
          if (a1 == 130) {
            return "WiFiPoweredOff";
          }
          if (a1 == 140) {
            return "RecognizeVoice";
          }
        }

        else
        {
          switch(a1)
          {
            case 150:
              return "SiriForEveryone";
            case 200:
              return "WiFiStart";
            case 210:
              return "ActivationStart";
          }
        }

        return "?";
      }

      switch(a1)
      {
        case 230:
          return "HomeKitStart";
        case 231:
        case 232:
        case 233:
        case 235:
        case 237:
        case 238:
        case 239:
          return "?";
        case 234:
          return "HomeKitSetupStart";
        case 236:
          return "CDPSetupStart";
        case 240:
          return "BuddyStarting";
        case 241:
          return "BuddyProgress";
        case 242:
          return "BuddyFinished";
        default:
          if (a1 == 220)
          {
            SecTrustResultType result = "iCloudStart";
          }

          else
          {
            if (a1 != 224) {
              return "?";
            }
            SecTrustResultType result = "AppleIDSetupStart";
          }

          break;
      }
    }
  }

  else
  {
    if (a1 <= 79)
    {
      if (a1 > 49)
      {
        if (a1 > 64)
        {
          if (a1 == 65) {
            return "SecurityAPCLoopStart";
          }
          if (a1 == 70) {
            return "SecurityFinish";
          }
        }

        else
        {
          if (a1 == 50) {
            return "PreAuthFinish";
          }
          if (a1 == 60) {
            return "SecurityStart";
          }
        }
      }

      else
      {
        if (a1 > 29)
        {
          switch(a1)
          {
            case 30:
              SecTrustResultType result = "Error";
              break;
            case 31:
              SecTrustResultType result = "SessionStarted";
              break;
            case 32:
              SecTrustResultType result = "SessionEnded";
              break;
            case 33:
              SecTrustResultType result = "SessionSecured";
              break;
            case 35:
              SecTrustResultType result = "ConnectStart";
              break;
            case 40:
              SecTrustResultType result = "PreAuthStart";
              break;
            default:
              return "?";
          }

          return result;
        }

        switch(a1)
        {
          case 0:
            return "Invalid";
          case 10:
            return "Start";
          case 20:
            return "Final";
        }
      }

      return "?";
    }

    if (a1 > 119)
    {
      switch(a1)
      {
        case 'x':
          return "CheckingiCloud";
        case 'z':
          return "CheckingAppleMusic";
        case '|':
          return "CheckingAccount";
      }

      return "?";
    }

    switch(a1)
    {
      case 'P':
        SecTrustResultType result = "BasicConfigStart";
        break;
      case 'Z':
        SecTrustResultType result = "BasicConfigFinish";
        break;
      case '\\':
        SecTrustResultType result = "StepStart";
        break;
      case '^':
        SecTrustResultType result = "StepFinish";
        break;
      case '_':
        SecTrustResultType result = "PreFinish";
        break;
        SecTrustResultType result = "SetupFinished";
        break;
      case 'a':
        SecTrustResultType result = "SetupResumed";
        break;
      case 'b':
        SecTrustResultType result = "SetupSuspend";
        break;
      case 'c':
        SecTrustResultType result = "SetupPeerSWUpdate";
        break;
      case 'd':
        SecTrustResultType result = "Finished";
        break;
      default:
        return "?";
    }
  }

  return result;
}

id sub_100042944(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _repairProblemCheck];
}

BOOL sub_100042E20(id a1, FLFollowUpItem *a2, unint64_t a3, BOOL *a4)
{
  return sub_100042E28(a2);
}

uint64_t sub_100042E28(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 uniqueIdentifier]);
  unsigned __int8 v3 = [v2 isEqual:@"com.apple.AAFollowUpIdentifier.RenewCredentials"];

  if ((v3 & 1) != 0)
  {
    uint64_t v4 = 1LL;
  }

  else
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v1 typeIdentifier]);
    unsigned int v6 = [v5 isEqual:@"com.apple.AAFollowUpIdentifier.RenewCredentials"];

    if (v6)
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore defaultStore](&OBJC_CLASS___ACAccountStore, "defaultStore"));
      id v8 = sub_100114D1C(v7);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      if (v9
        && (uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v1 accountIdentifier]),
            uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 identifier]),
            unsigned __int8 v12 = [v10 isEqual:v11],
            v11,
            v10,
            (v12 & 1) != 0))
      {
        uint64_t v4 = 1LL;
      }

      else
      {
        NSErrorUserInfoKey v13 = (void *)objc_claimAutoreleasedReturnValue([v1 accountIdentifier]);
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v7 accountWithIdentifier:v13]);

        uint64_t v4 = 0LL;
        if (v9 && v14)
        {
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "aa_altDSID"));
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "aa_altDSID"));
          uint64_t v4 = (uint64_t)[v15 isEqual:v16];
        }
      }
    }

    else
    {
      uint64_t v4 = 0LL;
    }
  }

  return v4;
}

void sub_100042FA4(uint64_t a1, int a2, void *a3)
{
  id v8 = a3;
  if (v8)
  {
    if (dword_1006417A0 <= 90
      && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 90LL)))
    {
      LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _renewAccountIfNecessaryForCFUItems:completion:]_block_invoke_2",  90LL,  "Could not renew account: %d\n",  a2);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    if (dword_1006417A0 <= 30
      && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 30LL)))
    {
      LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _renewAccountIfNecessaryForCFUItems:completion:]_block_invoke_2",  30LL,  "Account renewed successfully: %d\n",  a2);
    }

    id v5 = [*(id *)(a1 + 32) mutableCopy];
    [v5 removeObjectsAtIndexes:*(void *)(a1 + 40)];
    uint64_t v6 = *(void *)(a1 + 48);
    id v7 = [v5 copy];
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v7);
  }
}

void sub_100043150(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(dispatch_queue_s **)(v7 + 376);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100043200;
  block[3] = &unk_1005CBC20;
  void block[4] = v7;
  id v12 = v6;
  id v13 = v5;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, block);
}

void *sub_100043200(void *result)
{
  if (*(_DWORD *)(result[4] + 260LL) != -1)
  {
    id v1 = result;
    uint64_t v2 = result[5];
    if (v2)
    {
      if (dword_1006417A0 > 60) {
        return result;
      }
      if (dword_1006417A0 != -1) {
        return (void *)LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _repairHandleCFUItemsChanged]_block_invoke_2",  60LL,  "TTF: ### CFU get items failed: %{error}\n",  v2);
      }
      SecTrustResultType result = (void *)_LogCategory_Initialize(&dword_1006417A0, 60LL);
      if ((_DWORD)result)
      {
        uint64_t v2 = v1[5];
        return (void *)LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _repairHandleCFUItemsChanged]_block_invoke_2",  60LL,  "TTF: ### CFU get items failed: %{error}\n",  v2);
      }
    }

    else
    {
      if (dword_1006417A0 <= 30
        && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 30LL)))
      {
        LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _repairHandleCFUItemsChanged]_block_invoke_2",  30,  "TTF: CFU items: %ld\n",  [(id)v1[6] count]);
      }

      unsigned __int8 v3 = (void *)v1[4];
      uint64_t v4 = v1[6];
      v5[0] = _NSConcreteStackBlock;
      v5[1] = 3221225472LL;
      _DWORD v5[2] = sub_10004332C;
      v5[3] = &unk_1005CBBF8;
      v5[4] = v3;
      return [v3 _renewAccountIfNecessaryForCFUItems:v4 completion:v5];
    }
  }

  return result;
}

id sub_10004332C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _repairHandleCFUItems:a2];
}

LABEL_58:
        uint64_t v11 = (char *)v11 + 1;
      }

      while (v9 != v11);
      uint64_t v22 = [obj countByEnumeratingWithState:&v25 objects:v29 count:16];
      id v9 = v22;
    }

    while (v22);
  }

  if (v7 != self->_problemFlags)
  {
    self->_problemFlags = v7;
    -[SDSetupAgent _repairProblemFlagsChanged](self, "_repairProblemFlagsChanged");
  }
}
}

        __break(1u);
        goto LABEL_59;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_58;
  }

  __break(1u);
  return result;
}

  __break(1u);
}

id sub_10004391C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _repairHandleManateeChanged];
}

void sub_100043B18(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(dispatch_queue_s **)(v7 + 376);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100043BC8;
  block[3] = &unk_1005CBC20;
  id v12 = v6;
  id v13 = v5;
  uint64_t v14 = v7;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, block);
}

uint64_t sub_100043BC8(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 32);
  if (v2)
  {
    if (dword_1006417A0 <= 30)
    {
      if (dword_1006417A0 != -1) {
        return LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _fetchSymptomsReport]_block_invoke_2",  30LL,  "TTF: Received error trying to generate report: %@\n",  v2);
      }
      SecTrustResultType result = _LogCategory_Initialize(&dword_1006417A0, 30LL);
      if ((_DWORD)result)
      {
        uint64_t v2 = *(void *)(v1 + 32);
        return LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _fetchSymptomsReport]_block_invoke_2",  30LL,  "TTF: Received error trying to generate report: %@\n",  v2);
      }
    }
  }

  else
  {
    if (dword_1006417A0 <= 30
      && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 30LL)))
    {
      LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _fetchSymptomsReport]_block_invoke_2",  30,  "TTF: Received symptoms report with problem flags: %#ll{flags}\n",  [*(id *)(v1 + 40) combinedProblemFlags],  &unk_1004CAB56);
    }

    uint64_t v3 = *(void *)(*(void *)(v1 + 48) + 384LL) & 0xFFFDFFF9LL;
    SecTrustResultType result = (uint64_t)[*(id *)(v1 + 40) combinedProblemFlags];
    uint64_t v4 = *(void *)(v1 + 48);
    if ((result | v3) != *(void *)(v4 + 384))
    {
      *(void *)(v4 + 384) = result | v3;
      return (uint64_t)[*(id *)(v1 + 48) _repairProblemFlagsChanged];
    }
  }

  return result;
}

LABEL_26:
          goto LABEL_27;
        }
      }
    }

    if (((unint64_t)[v4 problemFlags] & 0x22001E) != 0)
    {
      -[SFDeviceRepairSession invalidate](self->_repairSession, "invalidate");
      id v8 = objc_alloc_init(&OBJC_CLASS___SFDeviceRepairSession);
      repairSession = self->_repairSession;
      self->_repairSession = v8;

      -[SFDeviceRepairSession setPeerDevice:](self->_repairSession, "setPeerDevice:", v4);
      id v10 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 myAltDSID]);
      -[SFDeviceRepairSession setAltDSID:](self->_repairSession, "setAltDSID:", v11);

      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472LL;
      v19[2] = sub_10004437C;
      v19[3] = &unk_1005CBB68;
      v19[4] = self;
      -[SFDeviceRepairSession setProgressHandler:](self->_repairSession, "setProgressHandler:", v19);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v4 bleDevice]);
      id v13 = [v12 foundTicks];

      if (v13)
      {
        uint64_t v14 = mach_absolute_time();
        uint64_t v15 = UpTicksToMilliseconds(v14 - (void)v13);
      }

      else
      {
        uint64_t v15 = 0LL;
      }

      -[SFDeviceRepairSession setTriggerMs:](self->_repairSession, "setTriggerMs:", v15);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstance](&OBJC_CLASS___IDSServerBag, "sharedInstance"));
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKey:@"SDDisableRepairSilentAuth"]);

      uint64_t v18 = objc_opt_class(&OBJC_CLASS___NSNumber, v17);
      -[SFDeviceRepairSession activate](self->_repairSession, "activate");
      goto LABEL_26;
    }

    if (dword_1006417A0 <= 50
      && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 50LL)))
    {
      LogPrintF( &dword_1006417A0,  "-[SDSetupAgent _repairSilentStart:]",  50,  "Ignoring device that has problems that are not silently fixable %#ll{flags}\n",  [v4 problemFlags],  &unk_1004CAB56);
    }
  }

    bleUnmapped = self->_bleUnmapped;
    if (!bleUnmapped)
    {
      uint64_t v24 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      uint64_t v25 = self->_bleUnmapped;
      self->_bleUnmapped = v24;

      bleUnmapped = self->_bleUnmapped;
    }

    -[NSMutableDictionary setObject:forKeyedSubscript:](bleUnmapped, "setObject:forKeyedSubscript:", v4, v5);
    goto LABEL_29;
  }

  uint64_t v17 = 0LL;
LABEL_31:

  return v17;
}

  return v9;
}

  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(-[SDAppleIDServerTask taskInfo](self, "taskInfo"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v27 objectForKeyedSubscript:@"emails"]);

  isKindOfClass = v8 != 0LL;
  if (v8)
  {
    uint64_t v29 = objc_opt_class(&OBJC_CLASS___NSArray, v28);
    if ((objc_opt_isKindOfClass(v8, v29) & 1) == 0 || [v8 count] != (id)1)
    {
LABEL_43:
      isKindOfClass = 0;
      goto LABEL_42;
    }
  }

  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(-[SDAppleIDServerTask taskInfo](self, "taskInfo"));
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v30 objectForKeyedSubscript:@"phones"]);

  if (!v16)
  {
LABEL_41:
    id v8 = 0LL;
    goto LABEL_42;
  }

  uint64_t v32 = objc_opt_class(&OBJC_CLASS___NSArray, v31);
  if ((objc_opt_isKindOfClass(v16, v32) & 1) != 0)
  {
    uint64_t v33 = [v16 count];
    if (v8) {
      uint64_t v34 = 1;
    }
    else {
      uint64_t v34 = v33 == (id)1;
    }
    isKindOfClass = v34;
  }

  else
  {
    isKindOfClass = 0;
  }

    uint64_t v38 = 0;
    goto LABEL_27;
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockAKSManager localDeviceID](self, "localDeviceID"));

  if (!v7)
  {
    uint64_t v39 = auto_unlock_log(v8);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000BA840(self, v6);
    }
    goto LABEL_26;
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockAKSManager localDeviceID](self, "localDeviceID"));
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockAKSManager ltkInfoForDeviceID:modern:](self, "ltkInfoForDeviceID:modern:", v9, 1LL));

  id v10 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s ltk](v6, "ltk"));
  -[SDAutoUnlockAKSManager setLocalLTK:](self, "setLocalLTK:", v10);

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockAKSManager localLTK](self, "localLTK"));
  if (!v11)
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockAKSManager localDeviceID](self, "localDeviceID"));
    id v13 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockAKSManager ltkInfoForDeviceID:modern:](self, "ltkInfoForDeviceID:modern:", v12, 0LL));

    if (v13)
    {
      uint64_t v15 = auto_unlock_log(v14);
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v41) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Adding existing LTK to new syncing view",  (uint8_t *)&v41,  2u);
      }

      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockAKSManager localDeviceID](self, "localDeviceID"));
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 computerName]);
      -[SDAutoUnlockAKSManager storeLongTermKey:forDeviceID:name:]( self,  "storeLongTermKey:forDeviceID:name:",  v13,  v17,  v19);

      CFUserNotificationRef v20 = (void *)objc_claimAutoreleasedReturnValue([v13 ltk]);
      -[SDAutoUnlockAKSManager setLocalLTK:](self, "setLocalLTK:", v20);

      SInt32 v21 = v13;
      id v6 = v21;
    }
  }

  uint64_t v22 = objc_claimAutoreleasedReturnValue(-[SDAutoUnlockAKSManager localLTK](self, "localLTK"));
  if (v22)
  {
    uint64_t v23 = (void *)v22;
    uint64_t v24 = -[os_log_s version](v6, "version");

    if (v24 <= 1)
    {
      CFNumberRef v26 = auto_unlock_log(v25);
      uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v41) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Updating version for local LTK",  (uint8_t *)&v41,  2u);
      }

      -[os_log_s setVersion:](v6, "setVersion:", 2LL);
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockAKSManager localDeviceID](self, "localDeviceID"));
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v29 computerName]);
      -[SDAutoUnlockAKSManager storeLongTermKey:forDeviceID:name:]( self,  "storeLongTermKey:forDeviceID:name:",  v6,  v28,  v30);
    }
  }

  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockAKSManager localLTK](self, "localLTK"));

  if (!v31) {
    uint64_t v32 = -[SDAutoUnlockAKSManager generateLocalLTKWithAttestation:](self, "generateLocalLTKWithAttestation:", 0LL);
  }
  uint64_t v33 = auto_unlock_log(v32);
  uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockAKSManager localLTK](self, "localLTK"));
    if (v35) {
      id v36 = @"YES";
    }
    else {
      id v36 = @"NO";
    }
    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockAKSManager localLTK](self, "localLTK"));
    __int16 v41 = 138412547;
    uint64_t v42 = v36;
    uint64_t v43 = 2113;
    uint64_t v44 = v37;
    _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Loaded local LTK: (%@), %{private}@",  (uint8_t *)&v41,  0x16u);
  }

  uint64_t v38 = 1;
LABEL_27:

  return v38;
}

      uint64_t v23 = 0;
      uint64_t v38 = (void *)v43;
      goto LABEL_27;
    }
  }

  else
  {
    uint64_t v23 = 0;
  }
}

        uint64_t v17 = 0LL;
LABEL_32:

        goto LABEL_33;
      }

      id v13 = CFStringGetTypeID();
      uint64_t v14 = CFDictionaryGetTypedValue(v7, @"AutoUnlockAppName", v13, &v19);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      uint64_t v16 = v19;
      if (!v19)
      {
        if (dword_1006439C8 <= 50
          && (dword_1006439C8 != -1 || _LogCategory_Initialize(&dword_1006439C8, 50LL)))
        {
          LogPrintF( &dword_1006439C8,  "-[SDAutoUnlockMacIconCache iconImageDataForHash:]",  50,  "Found cached image: %ld bytes, hash: %@, app: %@",  [v11 length],  v4,  v15);
        }

        uint64_t v17 = v11;
        goto LABEL_31;
      }

      if (dword_1006439C8 <= 90)
      {
        if (dword_1006439C8 == -1)
        {
          uint64_t v16 = v19;
        }

        LogPrintF( &dword_1006439C8,  "-[SDAutoUnlockMacIconCache iconImageDataForHash:]",  90LL,  "### Error getting image data: %x",  v16);
      }

    self->_activityRecentSeconds = v11;
  }

  id v13 = CFPrefs_GetInt64(@"com.apple.Sharing", @"btPipeEnabled", &v168);
  uint64_t v14 = v13 != 0;
  if (self->_btPipeEnabled != v14)
  {
    if (dword_100643B70 <= 40)
    {
      uint64_t v15 = v13;
      if (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 40LL))
      {
        uint64_t v16 = "yes";
        if (v15) {
          uint64_t v17 = "no";
        }
        else {
          uint64_t v17 = "yes";
        }
        if (!v15) {
          uint64_t v16 = "no";
        }
        LogPrintF(&dword_100643B70, "-[SDNearbyAgent prefsChanged]", 40LL, "BT Pipe enabled: %s -> %s\n", v17, v16);
      }
    }

    self->_btPipeEnabled = v14;
  }

  uint64_t v18 = CFPrefs_GetInt64(@"com.apple.Sharing", @"caEnabled", &v168);
  uint64_t v19 = v18 != 0;
  if (v168) {
    uint64_t v19 = SFIsDeviceAppleTV(v18) ^ 1;
  }
  if (self->_caEnabled != v19)
  {
    if (dword_100643B70 <= 40
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 40LL)))
    {
      CFUserNotificationRef v20 = "yes";
      if (v19) {
        SInt32 v21 = "no";
      }
      else {
        SInt32 v21 = "yes";
      }
      if (!v19) {
        CFUserNotificationRef v20 = "no";
      }
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent prefsChanged]",  40LL,  "Coordinated Alerts enabled: %s -> %s\n",  v21,  v20);
    }

    self->_caEnabled = v19;
  }

  uint64_t v22 = CFPrefs_GetInt64(@"com.apple.Sharing", @"caForce", &v168);
  if (v22 >= 0 && v168 == 0) {
    uint64_t v24 = v22 != 0;
  }
  else {
    uint64_t v24 = -1;
  }
  caForce = self->_caForce;
  if (v24 != caForce)
  {
    if (dword_100643B70 <= 40)
    {
      if (dword_100643B70 == -1)
      {
        caForce = self->_caForce;
      }

      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent prefsChanged]",  40LL,  "Coordinated Alerts force: %d -> %d\n",  caForce,  v24);
    }

  self->_activityLevel = v11;
  -[SDNearbyAgent _activityMonitorUpdateUserActive:](self, "_activityMonitorUpdateUserActive:", v9);
  activityLevelNotifyToken = self->_activityLevelNotifyToken;
  if (activityLevelNotifyToken != -1)
  {
    notify_set_state(activityLevelNotifyToken, v11);
    notify_post("com.apple.sharing.activity-level-changed");
  }

LABEL_29:
      idsShouldAdvertiseNearbyInfo = self->_idsShouldAdvertiseNearbyInfo;
      return idsShouldAdvertiseNearbyInfo > 0;
    }
  }

  else if (![v5 count])
  {
    goto LABEL_29;
  }

  self->_idsShouldAdvertiseNearbyInfo = 1;
LABEL_31:

  return 1;
}

    id v5 = (v12 - 1) & v12;
    id v10 = __clz(__rbit64(v12)) + (v6 << 6);
LABEL_27:
    uint64_t v14 = *(void *)(*(void *)(v1 + 48) + 16 * v10 + 8);
    uint64_t v15 = *(void **)(*(void *)(v1 + 56) + 8 * v10);
    swift_bridgeObjectRetain(v14);
    uint64_t v16 = v15;
    uint64_t v17 = String._bridgeToObjectiveC()();
    if ((v2 & 0xC000000000000001LL) != 0)
    {
      if (v2 >= 0) {
        v2 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      uint64_t v18 = v16;
      uint64_t v19 = __CocoaDictionary.count.getter(v2);
      if (__OFADD__(v19, 1LL)) {
        goto LABEL_52;
      }
      uint64_t v2 = sub_1001D8734(v2, v19 + 1);
    }

    else
    {
      CFUserNotificationRef v20 = v16;
    }

    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    id v60 = (id)v2;
    uint64_t v23 = sub_1003AD550((uint64_t)v17);
    uint64_t v24 = *(void *)(v2 + 16);
    uint64_t v25 = (v22 & 1) == 0;
    CFNumberRef v26 = v24 + v25;
    if (__OFADD__(v24, v25))
    {
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      swift_once(&qword_100643EE8, sub_1001D75FC);
      goto LABEL_48;
    }

    uint64_t v27 = v22;
    if (*(void *)(v2 + 24) >= v26)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v2 = (uint64_t)v60;
        if ((v22 & 1) != 0) {
          goto LABEL_5;
        }
      }

      else
      {
        sub_1003AE5CC();
        uint64_t v2 = (uint64_t)v60;
        if ((v27 & 1) != 0) {
          goto LABEL_5;
        }
      }
    }

    else
    {
      sub_1003A8D2C(v26, isUniquelyReferenced_nonNull_native);
      uint64_t v28 = sub_1003AD550((uint64_t)v17);
      if ((v27 & 1) != (v29 & 1))
      {
        id v56 = sub_100183168(0LL, &qword_100645168, &OBJC_CLASS___NSString_ptr);
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v56);
        __break(1u);
        return;
      }

      uint64_t v23 = v28;
      uint64_t v2 = (uint64_t)v60;
      if ((v27 & 1) != 0)
      {
LABEL_5:
        uint64_t v7 = *(void *)(v2 + 56);
        id v8 = 8 * v23;

        *(void *)(v7 + v_Block_object_dispose((const void *)(v1 - 96), 8) = v16;
        goto LABEL_6;
      }
    }

    *(void *)(v2 + 8 * (v23 >> 6) + 64) |= 1LL << v23;
    uint64_t v30 = 8 * v23;
    *(void *)(*(void *)(v2 + 48) + v30) = v17;
    *(void *)(*(void *)(v2 + 56) + v30) = v16;
    uint64_t v31 = *(void *)(v2 + 16);
    uint64_t v32 = __OFADD__(v31, 1LL);
    uint64_t v33 = v31 + 1;
    if (v32) {
      goto LABEL_53;
    }
    *(void *)(v2 + 16) = v33;
    uint64_t v34 = v17;
LABEL_6:

    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

      __int16 v69 = (v28 - 1) & v28;
      uint64_t v70 = v29;
      uint64_t v25 = __clz(__rbit64(v28)) + (v29 << 6);
    }

    uint64_t v31 = (uint64_t)v66;
    uint64_t v32 = (uint64_t *)(*(void *)(v67 + 48) + 16 * v25);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    sub_100187058(*(void *)(v67 + 56) + 32 * v25, (uint64_t)v66);
    v72[0] = v34;
    v72[1] = v33;
    sub_100187058(v31, (uint64_t)v71);
    swift_bridgeObjectRetain_n(v33, 2LL);
    sub_100187100((uint64_t)v72, &qword_100649128);
    uint64_t v35 = swift_dynamicCast(v4, v71, v65, v8, 6LL);
    id v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
    if (!v35)
    {
      v36(v4, 1LL, 1LL, v8);
      swift_bridgeObjectRelease(v33);
      sub_100187100((uint64_t)v4, &qword_1006457E8);
      sub_100187094(v67);
      swift_release(v16);
      return 0LL;
    }

    v36(v4, 0LL, 1LL, v8);
    uint64_t v37 = v4;
    uint64_t v38 = *(void (**)(char *))(v26 + 32);
    uint64_t v39 = v60;
    uint64_t v40 = v37;
    v38(v60);
    __int16 v41 = &v63[*(int *)(v64 + 48)];
    ((void (*)(char *, char *, uint64_t))v38)(v41, v39, v8);
    uint64_t v42 = v62;
    uint64_t v43 = (char *)v7 + *(int *)(v62 + 48);
    void *v7 = v34;
    v7[1] = v33;
    ((void (*)(char *, char *, uint64_t))v38)(v43, v41, v8);
    uint64_t v44 = (char *)v7 + *(int *)(v42 + 48);
    uint64_t v45 = *v7;
    CFIndex v46 = v7[1];
    __int16 v47 = v59;
    ((void (*)(char *, char *, uint64_t))v38)(v59, v44, v8);
    id v48 = v61;
    ((void (*)(char *, char *, uint64_t))v38)(v61, v47, v8);
    SecTrustResultType result = sub_1003AD53C(v45, v46);
    uint64_t v49 = result;
    if ((v50 & 1) != 0)
    {
      uint64_t v23 = (uint64_t *)(v16[6] + 16 * result);
      uint64_t v24 = swift_bridgeObjectRelease(v23[1]);
      *uint64_t v23 = v45;
      v23[1] = v46;
      SecTrustResultType result = (*(uint64_t (**)(unint64_t, char *, uint64_t, __n128))(v26 + 40))( v16[7] + *(void *)(v26 + 72) * v49,  v48,  v8,  v24);
      goto LABEL_8;
    }

    if (v16[2] >= v16[3]) {
      break;
    }
    *(void *)((char *)v56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v51 = (uint64_t *)(v16[6] + 16 * result);
    CFStringRef v51 = v45;
    v51[1] = v46;
    SecTrustResultType result = ((uint64_t (*)(unint64_t, char *, uint64_t))v38)( v16[7] + *(void *)(v68 + 72) * result,  v48,  v8);
    uint64_t v52 = v16[2];
    uint64_t v53 = __OFADD__(v52, 1LL);
    os_log_t v54 = v52 + 1;
    if (v53) {
      goto LABEL_36;
    }
    void v16[2] = v54;
LABEL_8:
    CFUserNotificationRef v20 = v69;
    uint64_t v22 = v70;
    uint64_t v4 = v40;
  }

  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

      __int16 v41 = (v22 - 1) & v22;
      uint64_t v42 = v23;
      CFUserNotificationRef v20 = __clz(__rbit64(v22)) + (v23 << 6);
    }

    uint64_t v25 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v20);
    uint64_t v27 = *v25;
    CFNumberRef v26 = (const char *)v25[1];
    sub_100187058(*(void *)(v1 + 56) + 32 * v20, (uint64_t)v7);
    v45[0] = v27;
    v45[1] = v26;
    sub_100187058((uint64_t)v7, (uint64_t)v44);
    swift_bridgeObjectRetain_n(v26, 2LL);
    sub_100187100((uint64_t)v45, v9);
    uint64_t v28 = sub_100183098(v10);
    if (!swift_dynamicCast(&v43, v44, v11, v28, 6LL))
    {
      uint64_t v43 = 0LL;
      *(void *)&uint64_t v37 = swift_bridgeObjectRelease(v26).n128_u64[0];
      swift_bridgeObjectRelease(v43, v37);
      sub_100187094(v1);
      swift_release(v3);
      return;
    }

    uint64_t v29 = v43;
    uint64_t v30 = sub_1003AD53C(v27, (uint64_t)v26);
    uint64_t v31 = v30;
    if ((v32 & 1) != 0)
    {
      uint64_t v40 = v29;
      id v12 = v11;
      id v13 = v10;
      uint64_t v14 = v7;
      uint64_t v15 = v1;
      uint64_t v16 = v9;
      uint64_t v17 = (uint64_t *)(v3[6] + 16 * v30);
      *(void *)&uint64_t v18 = swift_bridgeObjectRelease((const char *)v17[1]).n128_u64[0];
      *uint64_t v17 = v27;
      v17[1] = (uint64_t)v26;
      id v9 = v16;
      uint64_t v1 = v15;
      uint64_t v7 = v14;
      id v10 = v13;
      uint64_t v11 = v12;
      uint64_t v19 = v3[7];
      swift_bridgeObjectRelease(*(const char **)(v19 + 8 * v31), v18);
      *(void *)(v19 + 8 * v31) = v40;
      goto LABEL_8;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << v30;
    uint64_t v33 = (uint64_t *)(v3[6] + 16 * v30);
    *uint64_t v33 = v27;
    v33[1] = (uint64_t)v26;
    *(void *)(v3[7] + 8 * v30) = v29;
    uint64_t v34 = v3[2];
    uint64_t v35 = __OFADD__(v34, 1LL);
    id v36 = v34 + 1;
    if (v35) {
      goto LABEL_35;
    }
    _DWORD v3[2] = v36;
LABEL_8:
    id v6 = v41;
    id v8 = v42;
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
}

  __break(1u);
  return result;
}

    uint64_t v34 = (v42 - 1) & v42;
    uint64_t v35 = __clz(__rbit64(v42)) + (v36 << 6);
LABEL_27:
    uint64_t v40 = *(id *)(*(void *)(v22 + 48) + 8 * v35);
    if (!v40) {
      goto LABEL_30;
    }
    while (1)
    {
      sub_1001F3FA4(0);
      swift_beginAccess(v18, v0 + 256, 33LL, 0LL);
      uint64_t v44 = (void *)sub_1003BE7D4(v40);
      swift_endAccess(v0 + 256);

      uint64_t v28 = v36;
      uint64_t v29 = v34;
      if ((v22 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_10:
      uint64_t v37 = __CocoaSet.Iterator.next()(v23);
      if (v37)
      {
        uint64_t v38 = v37;
        *uint64_t v74 = v37;
        uint64_t v39 = type metadata accessor for SDAirDropSendConnection(0LL);
        swift_unknownObjectRetain(v38);
        swift_dynamicCast(v76, v74, (char *)&type metadata for Swift.AnyObject + 8, v39, 7LL);
        uint64_t v40 = *v76;
        swift_unknownObjectRelease(v38);
        id v36 = v28;
        uint64_t v34 = v29;
        if (v40) {
          continue;
        }
      }

      goto LABEL_30;
    }
  }

  __break(1u);
}

  __break(1u);
}

  uint64_t v40 = v23;
  __int16 v41 = (v22 - 1) & v22;
  for (unint64_t i = __clz(__rbit64(v22)) + (v23 << 6); ; unint64_t i = __clz(__rbit64(v6)) | (v40 << 6))
  {
    uint64_t v25 = (uint64_t *)(*(void *)(v1 + 48) + 16 * i);
    CFNumberRef v26 = (const char *)v25[1];
    uint64_t v27 = *(void **)(*(void *)(v1 + 56) + 8 * i);
    uint64_t v43 = *v25;
    uint64_t v44 = v26;
    uint64_t v42 = v27;
    uint64_t v28 = sub_100183168(0LL, v10, v11);
    swift_bridgeObjectRetain(v26);
    uint64_t v29 = v27;
    swift_dynamicCast(v7, &v42, v28, v12, 7LL);
    uint64_t v31 = v43;
    uint64_t v30 = (uint64_t)v44;
    sub_100186D8C(v7, v8);
    sub_100186D8C(v8, v48);
    sub_100186D8C(v48, &v46);
    SecTrustResultType result = sub_1003AD53C(v31, v30);
    uint64_t v32 = result;
    if ((v33 & 1) != 0)
    {
      id v13 = v8;
      uint64_t v14 = v7;
      uint64_t v15 = v1;
      uint64_t v16 = v11;
      uint64_t v17 = v10;
      uint64_t v18 = v3[6] + 16 * result;
      swift_bridgeObjectRelease(*(const char **)(v18 + 8));
      *(void *)uint64_t v18 = v31;
      *(void *)(v18 + _Block_object_dispose((const void *)(v1 - 96), 8) = v30;
      id v10 = v17;
      uint64_t v11 = v16;
      uint64_t v1 = v15;
      uint64_t v7 = v14;
      id v8 = v13;
      id v12 = (char *)&type metadata for Any + 8;
      uint64_t v19 = (void *)(v3[7] + 32 * v32);
      sub_10018709C(v19);
      SecTrustResultType result = (unint64_t)sub_100186D8C(&v46, v19);
      id v6 = v41;
      if (!v41) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v34 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v34 = v31;
    v34[1] = v30;
    SecTrustResultType result = (unint64_t)sub_100186D8C(&v46, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v35 = v3[2];
    id v36 = __OFADD__(v35, 1LL);
    uint64_t v37 = v35 + 1;
    if (v36) {
      goto LABEL_34;
    }
    _DWORD v3[2] = v37;
    id v6 = v41;
    if (!v41) {
      goto LABEL_11;
    }
LABEL_10:
    __int16 v41 = (v6 - 1) & v6;
  }

  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

    id v61 = [(id)objc_opt_self(v6[169]) v7[341]];
    if (!v61) {
      goto LABEL_54;
    }
    int v63 = v61;
    URL._bridgeToObjectiveC()(v62);
    uint64_t v65 = v64;
    os_log_t v66 = [v63 openSensitiveURL:v64 withOptions:0];

    if ((v66 & 1) == 0) {
      goto LABEL_49;
    }
  }

  uint64_t v68 = [objc_allocWithZone(_LSOpenConfiguration) init];
  *(void *)(v0 + 312) = v68;
  [v68 setFrontBoardOptions:0];
  __int16 v69 = [(id)objc_opt_self(v6[169]) v7[341]];
  *(void *)(v0 + 320) = v69;
  if (v69)
  {
    uint64_t v71 = v69;
    uint64_t v72 = v0 + 16;
    URL._bridgeToObjectiveC()(v70);
    uint64_t v74 = v73;
    *(void *)(v0 + 32_Block_object_dispose((const void *)(v1 - 96), 8) = v73;
    *(void *)(v0 + 56) = v0 + 120;
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_100268F1C;
    uint64_t v75 = swift_continuation_init(v0 + 16, 1LL);
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    uint64_t v76 = (void *)(v0 + 80);
    v76[1] = 0x40000000LL;
    v76[2] = sub_1002697E4;
    v76[3] = &unk_1005D6C28;
    v76[4] = v75;
    [v71 openURL:v74 configuration:v68 completionHandler:v76];
    swift_continuation_await(v72);
    return;
  }

  SecTrustResultType result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

        uint64_t v24 = (v26 - 1) & v26;
        uint64_t v25 = __clz(__rbit64(v26)) + (v23 << 6);
      }

      uint64_t v22 = *(id *)(*(void *)(v5 + 48) + 8 * v25);
    }
  }

  sub_100187094(v5);
}

        id v12 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v14 << 6);
      }

      CFUserNotificationRef v20 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v16);
      uint64_t v22 = *v20;
      SInt32 v21 = v20[1];
      swift_beginAccess(v6, v5, 33LL, 0LL);
      uint64_t v23 = *v6;
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v23);
      uint64_t v24 = sub_1003AD53C(v22, v21);
      CFNumberRef v26 = v25;
      swift_bridgeObjectRelease(v23);
      if ((v26 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
        uint64_t v28 = *v6;
        uint64_t v37 = *v6;
        CFStringRef v6 = 0x8000000000000000LL;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1003ADECC();
          uint64_t v28 = v37;
        }

        swift_bridgeObjectRelease(*(void *)(*(void *)(v28 + 48) + 16 * v24 + 8));
        sub_1001CCE4C((__int128 *)(*(void *)(v28 + 56) + 48 * v24), v4);
        sub_1001CB134(v24, v28);
        uint64_t v29 = *v6;
        CFStringRef v6 = v28;
        swift_bridgeObjectRelease(v29);
      }

      else
      {
        v4[1] = 0u;
        v4[2] = 0u;
        *uint64_t v4 = 0u;
      }

      swift_bridgeObjectRelease(v21);
      sub_100187100((uint64_t)v4, &qword_10064DA48);
      SecTrustResultType result = swift_endAccess(v5);
    }
  }

  sub_10018709C(v1);
  uint64_t v31 = *(void *)(v0 + 360);
  uint64_t v30 = *(void *)(v0 + 368);
  uint64_t v32 = *(void *)(v0 + 336);
  sub_1002E8668();
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

  v108 = SFAirDropReceive.AskRequest.customPayload.getter();
  v110 = v109;
  v111 = sub_100189B0C(v108, v109);
  v112 = (os_log_s *)Logger.logObject.getter(v111);
  v113 = static os_log_type_t.error.getter(v112);
  if (os_log_type_enabled(v112, v113))
  {
    if (v110 >> 60 == 15) {
      v114 = "Failed to receive senderMetadata";
    }
    else {
      v114 = "Receiver metadata was not found";
    }
    v115 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)v115 = 0;
    _os_log_impl((void *)&_mh_execute_header, v112, v113, v114, v115, 2u);
    swift_slowDealloc(v115, -1LL, -1LL);
  }

  v116 = *(void *)(v0 + 680);
  v117 = *(void *)(v0 + 640);
  v118 = *(void *)(v0 + 632);

  v119 = type metadata accessor for SFAirDropReceive.Failure(0LL);
  v120 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
  swift_allocError(v119, v120, 0LL, 0LL);
  v122 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v119 - 8) + 104LL))( v121,  enum case for SFAirDropReceive.Failure.badRequest(_:),  v119);
  swift_willThrow(v122);
  sub_100189B0C(v29, v30);
  (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v116, v118);
  v123 = *(void *)(v0 + 672);
  v124 = *(void *)(v0 + 664);
  v125 = *(void *)(v0 + 656);
  v126 = *(void *)(v0 + 648);
  v127 = *(void *)(v0 + 624);
  v128 = *(void *)(v0 + 600);
  v129 = *(void *)(v0 + 592);
  v130 = *(void *)(v0 + 584);
  v131 = *(void *)(v0 + 576);
  v144 = *(void *)(v0 + 568);
  *(void *)typeb = *(void *)(v0 + 544);
  v150 = *(void *)(v0 + 536);
  v153 = *(void *)(v0 + 528);
  v158 = *(void *)(v0 + 520);
  v163 = *(void *)(v0 + 496);
  v166 = *(void *)(v0 + 472);
  v169 = *(void *)(v0 + 464);
  swift_task_dealloc(*(void *)(v0 + 680));
  swift_task_dealloc(v123);
  swift_task_dealloc(v124);
  swift_task_dealloc(v125);
  swift_task_dealloc(v126);
  swift_task_dealloc(v127);
  swift_task_dealloc(v128);
  swift_task_dealloc(v129);
  swift_task_dealloc(v130);
  swift_task_dealloc(v131);
  swift_task_dealloc(v144);
  swift_task_dealloc(*(void *)typeb);
  swift_task_dealloc(v150);
  swift_task_dealloc(v153);
  swift_task_dealloc(v158);
  swift_task_dealloc(v163);
  swift_task_dealloc(v166);
  swift_task_dealloc(v169);
  v99 = *(uint64_t (**)(void))(v0 + 8);
  return v99();
}

    uint64_t v18 = (v29 - 1) & v29;
    CFNumberRef v26 = __clz(__rbit64(v29)) + (v21 << 6);
LABEL_27:
    uint64_t v31 = v53;
    uint64_t v32 = *(void *)(v54 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v54 + v23))(v10, *(void *)(v53 + 48) + v32 * v26, v8);
    uint64_t v33 = *(void *)(v31 + 56);
    uint64_t v34 = *(void *)(v56 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v56 + v23))(v55, v33 + v34 * v26, v57);
    uint64_t v35 = *(void *)(v14 + 40);
    id v36 = sub_100183F14( &qword_100646250,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
    SecTrustResultType result = dispatch thunk of Hashable._rawHashValue(seed:)(v35, v8, v36);
    uint64_t v37 = -1LL << *(_BYTE *)(v14 + 32);
    uint64_t v38 = result & ~v37;
    uint64_t v39 = v38 >> 6;
    if (((-1LL << v38) & ~*(void *)(v19 + 8 * (v38 >> 6))) != 0)
    {
      uint64_t v24 = __clz(__rbit64((-1LL << v38) & ~*(void *)(v19 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v40 = 0;
      __int16 v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_46;
        }

        uint64_t v42 = v39 == v41;
        if (v39 == v41) {
          uint64_t v39 = 0LL;
        }
        v40 |= v42;
        uint64_t v43 = *(void *)(v19 + 8 * v39);
      }

      while (v43 == -1);
      uint64_t v24 = __clz(__rbit64(~v43)) + (v39 << 6);
    }

    *(void *)(v19 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v24;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v54 + 32))(*(void *)(v14 + 48) + v32 * v24, v10, v8);
    SecTrustResultType result = (*(uint64_t (**)(unint64_t, _BYTE *, uint64_t))(v56 + 32))( *(void *)(v14 + 56) + v34 * v24,  v55,  v57);
    ++*(void *)(v14 + 16);
  }

  uint64_t v30 = v27 + 2;
  if (v30 >= v50)
  {
LABEL_37:
    uint64_t v45 = v53;
    swift_release(v53);
    uint64_t v3 = v49;
    if ((v48 & 1) != 0) {
      goto LABEL_40;
    }
    goto LABEL_44;
  }

  uint64_t v29 = v51[v30];
  if (v29)
  {
    SInt32 v21 = v30;
    goto LABEL_26;
  }

  while (1)
  {
    SInt32 v21 = v30 + 1;
    if (__OFADD__(v30, 1LL)) {
      break;
    }
    if (v21 >= v50) {
      goto LABEL_37;
    }
    uint64_t v29 = v51[v21];
    ++v30;
    if (v29) {
      goto LABEL_26;
    }
  }

    uint64_t v18 = (v29 - 1) & v29;
    CFNumberRef v26 = __clz(__rbit64(v29)) + (v21 << 6);
LABEL_27:
    uint64_t v31 = v53;
    uint64_t v32 = *(void *)(v54 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v54 + v23))(v10, *(void *)(v53 + 48) + v32 * v26, v8);
    uint64_t v33 = *(void *)(v31 + 56);
    uint64_t v34 = *(void *)(v56 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v56 + v23))(v55, v33 + v34 * v26, v57);
    uint64_t v35 = *(void *)(v14 + 40);
    id v36 = sub_100183F14( &qword_100646108,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    SecTrustResultType result = dispatch thunk of Hashable._rawHashValue(seed:)(v35, v8, v36);
    uint64_t v37 = -1LL << *(_BYTE *)(v14 + 32);
    uint64_t v38 = result & ~v37;
    uint64_t v39 = v38 >> 6;
    if (((-1LL << v38) & ~*(void *)(v19 + 8 * (v38 >> 6))) != 0)
    {
      uint64_t v24 = __clz(__rbit64((-1LL << v38) & ~*(void *)(v19 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v40 = 0;
      __int16 v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_46;
        }

        uint64_t v42 = v39 == v41;
        if (v39 == v41) {
          uint64_t v39 = 0LL;
        }
        v40 |= v42;
        uint64_t v43 = *(void *)(v19 + 8 * v39);
      }

      while (v43 == -1);
      uint64_t v24 = __clz(__rbit64(~v43)) + (v39 << 6);
    }

    *(void *)(v19 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v24;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v54 + 32))(*(void *)(v14 + 48) + v32 * v24, v10, v8);
    SecTrustResultType result = (*(uint64_t (**)(unint64_t, _BYTE *, uint64_t))(v56 + 32))( *(void *)(v14 + 56) + v34 * v24,  v55,  v57);
    ++*(void *)(v14 + 16);
  }

  uint64_t v30 = v27 + 2;
  if (v30 >= v50)
  {
LABEL_37:
    uint64_t v45 = v53;
    swift_release(v53);
    uint64_t v3 = v49;
    if ((v48 & 1) != 0) {
      goto LABEL_40;
    }
    goto LABEL_44;
  }

  uint64_t v29 = v51[v30];
  if (v29)
  {
    SInt32 v21 = v30;
    goto LABEL_26;
  }

  while (1)
  {
    SInt32 v21 = v30 + 1;
    if (__OFADD__(v30, 1LL)) {
      break;
    }
    if (v21 >= v50) {
      goto LABEL_37;
    }
    uint64_t v29 = v51[v21];
    ++v30;
    if (v29) {
      goto LABEL_26;
    }
  }

        id v9 = (v19 - 1) & v19;
        uint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      SInt32 v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
      uint64_t v22 = *v21;
      uint64_t v23 = v21[1];
      Hasher.init(_seed:)(v34);
      String.hash(into:)(v34, v22, v23);
      SecTrustResultType result = Hasher._finalize()();
      uint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v25 = result & ~v24;
      CFNumberRef v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v27 = 0;
        uint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v29 = v26 == v28;
          if (v26 == v28) {
            CFNumberRef v26 = 0LL;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v11 + 8 * v26);
        }

        while (v30 == -1);
        uint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      uint64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
      *uint64_t v15 = v22;
      v15[1] = v23;
      ++*(void *)(v6 + 16);
    }
  }

  SecTrustResultType result = swift_release(v3);
  void *v2 = v6;
  return result;
}

        id v9 = (v19 - 1) & v19;
        uint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      SInt32 v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
      uint64_t v22 = *v21;
      uint64_t v23 = v21[1];
      Hasher.init(_seed:)(v34);
      Data.hash(into:)(v34, v22, v23);
      SecTrustResultType result = Hasher._finalize()();
      uint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v25 = result & ~v24;
      CFNumberRef v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v27 = 0;
        uint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v29 = v26 == v28;
          if (v26 == v28) {
            CFNumberRef v26 = 0LL;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v11 + 8 * v26);
        }

        while (v30 == -1);
        uint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      uint64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
      *uint64_t v15 = v22;
      v15[1] = v23;
      ++*(void *)(v6 + 16);
    }
  }

  SecTrustResultType result = swift_release(v3);
  void *v2 = v6;
  return result;
}

        uint64_t v11 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }

      CFUserNotificationRef v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
      Hasher.init(_seed:)(v30);
      Hasher._combine(_:)(v20);
      SecTrustResultType result = Hasher._finalize()();
      SInt32 v21 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v22 = result & ~v21;
      uint64_t v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          CFNumberRef v26 = v23 == v25;
          if (v23 == v25) {
            uint64_t v23 = 0LL;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v23);
        }

        while (v27 == -1);
        uint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
      ++*(void *)(v6 + 16);
    }
  }

  SecTrustResultType result = swift_release(v3);
  void *v2 = v6;
  return result;
}

        id v9 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
      }

      CFUserNotificationRef v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
      Hasher.init(_seed:)(v30);
      Task.hash(into:)( v30,  v20,  (char *)&type metadata for () + 8,  &type metadata for Never,  &protocol witness table for Never);
      SecTrustResultType result = Hasher._finalize()();
      SInt32 v21 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v22 = result & ~v21;
      uint64_t v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v11 + 8 * (v22 >> 6))) != 0)
      {
        uint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v11 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          CFNumberRef v26 = v23 == v25;
          if (v23 == v25) {
            uint64_t v23 = 0LL;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v11 + 8 * v23);
        }

        while (v27 == -1);
        uint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
      ++*(void *)(v6 + 16);
    }
  }

  SecTrustResultType result = swift_release(v3);
  void *v2 = v6;
  return result;
}

        id v9 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }

      CFUserNotificationRef v20 = v3;
      SInt32 v21 = (uint64_t *)(*(void *)(v3 + 48) + 32 * v16);
      uint64_t v22 = *v21;
      uint64_t v23 = (const char *)v21[1];
      uint64_t v24 = v21[2];
      uint64_t v25 = (const char *)v21[3];
      Hasher.init(_seed:)(v38);
      swift_bridgeObjectRetain(v23);
      String.hash(into:)(v38, v22, v23);
      *(void *)&CFNumberRef v26 = swift_bridgeObjectRelease(v23).n128_u64[0];
      swift_bridgeObjectRetain(v25, v26);
      String.hash(into:)(v38, v24, v25);
      swift_bridgeObjectRelease(v25);
      SecTrustResultType result = Hasher._finalize()();
      uint64_t v27 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v28 = result & ~v27;
      uint64_t v29 = v28 >> 6;
      if (((-1LL << v28) & ~*(void *)(v10 + 8 * (v28 >> 6))) != 0)
      {
        id v13 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v10 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v32 = v29 == v31;
          if (v29 == v31) {
            uint64_t v29 = 0LL;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v10 + 8 * v29);
        }

        while (v33 == -1);
        id v13 = __clz(__rbit64(~v33)) + (v29 << 6);
      }

      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      uint64_t v14 = (void *)(*(void *)(v6 + 48) + 32 * v13);
      *uint64_t v14 = v22;
      v14[1] = v23;
      v14[2] = v24;
      v14[3] = v25;
      ++*(void *)(v6 + 16);
      uint64_t v3 = v20;
    }
  }

  SecTrustResultType result = swift_release(v3);
  void *v2 = v6;
  return result;
}

        uint64_t v11 = (v20 - 1) & v20;
        uint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }

      uint64_t v22 = *(void *)(*(void *)(v4 + 48) + 8 * v18);
      SecTrustResultType result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
      uint64_t v23 = -1LL << *(_BYTE *)(v7 + 32);
      uint64_t v24 = result & ~v23;
      uint64_t v25 = v24 >> 6;
      if (((-1LL << v24) & ~*(void *)(v13 + 8 * (v24 >> 6))) != 0)
      {
        uint64_t v16 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        CFNumberRef v26 = 0;
        uint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v28 = v25 == v27;
          if (v25 == v27) {
            uint64_t v25 = 0LL;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v13 + 8 * v25);
        }

        while (v29 == -1);
        uint64_t v16 = __clz(__rbit64(~v29)) + (v25 << 6);
      }

      *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v22;
      ++*(void *)(v7 + 16);
    }
  }

  SecTrustResultType result = swift_release(v4);
  void *v3 = v7;
  return result;
}

    id v10 = (v19 - 1) & v19;
    uint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    SInt32 v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    Hasher.init(_seed:)(v33);
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    SecTrustResultType result = Hasher._finalize()();
    uint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v25 = result & ~v24;
    CFNumberRef v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v29 = v26 == v28;
        if (v26 == v28) {
          CFNumberRef v26 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v26);
      }

      while (v30 == -1);
      uint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    uint64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
    *uint64_t v15 = v22;
    v15[1] = v23;
    ++*(void *)(v6 + 16);
  }

  CFUserNotificationRef v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    SecTrustResultType result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_38;
  }

  uint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    id v13 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    id v13 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_36;
    }
    uint64_t v19 = *(void *)(v8 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

    id v10 = (v19 - 1) & v19;
    uint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    SInt32 v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    Hasher.init(_seed:)(v33);
    sub_10019BA8C(v22, v23);
    Data.hash(into:)(v33, v22, v23);
    SecTrustResultType result = Hasher._finalize()();
    uint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v25 = result & ~v24;
    CFNumberRef v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v29 = v26 == v28;
        if (v26 == v28) {
          CFNumberRef v26 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v26);
      }

      while (v30 == -1);
      uint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    uint64_t v15 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v14);
    *uint64_t v15 = v22;
    v15[1] = v23;
    ++*(void *)(v6 + 16);
  }

  CFUserNotificationRef v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    SecTrustResultType result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_38;
  }

  uint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    id v13 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    id v13 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_36;
    }
    uint64_t v19 = *(void *)(v8 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

    uint64_t v11 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    CFUserNotificationRef v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    Hasher.init(_seed:)(v29);
    Hasher._combine(_:)(v20);
    SecTrustResultType result = Hasher._finalize()();
    SInt32 v21 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v22 = result & ~v21;
    uint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        CFNumberRef v26 = v23 == v25;
        if (v23 == v25) {
          uint64_t v23 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v13 + 8 * v23);
      }

      while (v27 == -1);
      uint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
    ++*(void *)(v6 + 16);
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    SecTrustResultType result = swift_release(v3);
    uint64_t v2 = v28;
    goto LABEL_38;
  }

  uint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    uint64_t v7 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_36;
    }
    uint64_t v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

    id v10 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
LABEL_27:
    CFUserNotificationRef v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    Hasher.init(_seed:)(v29);
    swift_retain(v20);
    Task.hash(into:)( v29,  v20,  (char *)&type metadata for () + 8,  &type metadata for Never,  &protocol witness table for Never);
    SecTrustResultType result = Hasher._finalize()();
    SInt32 v21 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v22 = result & ~v21;
    uint64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v11 + 8 * (v22 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v11 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        CFNumberRef v26 = v23 == v25;
        if (v23 == v25) {
          uint64_t v23 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v23);
      }

      while (v27 == -1);
      uint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
    ++*(void *)(v6 + 16);
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v28)
  {
LABEL_36:
    SecTrustResultType result = swift_release_n(v3, 2LL);
    goto LABEL_38;
  }

  uint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    id v13 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    id v13 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v13 >= v28) {
      goto LABEL_36;
    }
    uint64_t v18 = *(void *)(v8 + 8 * v13);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

    id v9 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    CFUserNotificationRef v20 = (uint64_t *)(*(void *)(v3 + 48) + 32 * v16);
    SInt32 v21 = *v20;
    uint64_t v22 = (const char *)v20[1];
    uint64_t v23 = v20[2];
    uint64_t v24 = (const char *)v20[3];
    Hasher.init(_seed:)(v37);
    *(void *)&uint64_t v25 = swift_bridgeObjectRetain_n(v22, 2LL).n128_u64[0];
    swift_bridgeObjectRetain(v24, v25);
    String.hash(into:)(v37, v21, v22);
    *(void *)&CFNumberRef v26 = swift_bridgeObjectRelease(v22).n128_u64[0];
    swift_bridgeObjectRetain(v24, v26);
    String.hash(into:)(v37, v23, v24);
    swift_bridgeObjectRelease(v24);
    SecTrustResultType result = Hasher._finalize()();
    uint64_t v27 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v28 = result & ~v27;
    uint64_t v29 = v28 >> 6;
    if (((-1LL << v28) & ~*(void *)(v10 + 8 * (v28 >> 6))) != 0)
    {
      id v13 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v10 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v30 = 0;
      uint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v32 = v29 == v31;
        if (v29 == v31) {
          uint64_t v29 = 0LL;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v10 + 8 * v29);
      }

      while (v33 == -1);
      id v13 = __clz(__rbit64(~v33)) + (v29 << 6);
    }

    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
    uint64_t v14 = (void *)(*(void *)(v6 + 48) + 32 * v13);
    *uint64_t v14 = v21;
    v14[1] = v22;
    v14[2] = v23;
    v14[3] = v24;
    ++*(void *)(v6 + 16);
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v36)
  {
LABEL_36:
    SecTrustResultType result = swift_release_n(v3, 2LL);
    uint64_t v2 = v34;
    goto LABEL_38;
  }

  uint64_t v18 = *(void *)(v35 + 8 * v19);
  if (v18)
  {
    id v12 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    id v12 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v12 >= v36) {
      goto LABEL_36;
    }
    uint64_t v18 = *(void *)(v35 + 8 * v12);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

    uint64_t v11 = (v20 - 1) & v20;
    uint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_27:
    uint64_t v22 = *(void *)(v7 + 40);
    uint64_t v23 = *(id *)(*(void *)(v4 + 48) + 8 * v18);
    SecTrustResultType result = NSObject._rawHashValue(seed:)(v22);
    uint64_t v24 = -1LL << *(_BYTE *)(v7 + 32);
    uint64_t v25 = result & ~v24;
    CFNumberRef v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v13 + 8 * (v25 >> 6))) != 0)
    {
      uint64_t v16 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v29 = v26 == v28;
        if (v26 == v28) {
          CFNumberRef v26 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v26);
      }

      while (v30 == -1);
      uint64_t v16 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
    *(void *)(*(void *)(v7 + 48) + 8 * v16) = v23;
    ++*(void *)(v7 + 16);
  }

  SInt32 v21 = v19 + 3;
  if (v21 >= v12)
  {
LABEL_36:
    SecTrustResultType result = swift_release_n(v4, 2LL);
    uint64_t v3 = v31;
    goto LABEL_38;
  }

  CFUserNotificationRef v20 = *(void *)(v9 + 8 * v21);
  if (v20)
  {
    uint64_t v15 = v21;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v15 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v15 >= v12) {
      goto LABEL_36;
    }
    CFUserNotificationRef v20 = *(void *)(v9 + 8 * v15);
    ++v21;
    if (v20) {
      goto LABEL_26;
    }
  }

  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

id sub_10004437C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _repairSilentProgress:a2 info:a3];
}

LABEL_25:
      break;
  }
}
}

    self->_prefBLEActionScanSecs = v11;
  }

  id v13 = CFPrefs_GetInt64(@"com.apple.Sharing", @"chForceShouldAdvertise", &v59);
  if (v59) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = v13 == 0;
  }
  uint64_t v15 = !v14;
  if (self->_prefForceShouldAdvertise != v15)
  {
    if (dword_100642038 <= 30
      && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 30LL)))
    {
      uint64_t v16 = "yes";
      if (v15) {
        uint64_t v17 = "no";
      }
      else {
        uint64_t v17 = "yes";
      }
      if (!v15) {
        uint64_t v16 = "no";
      }
      LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent prefsChanged]",  30LL,  "Pref force should advertise: %s -> %s\n",  v17,  v16);
    }

    self->_prefForceShouldAdvertise = v15;
    -[SDProxHandoffAgent _commonShouldAdvertiseChanged](self, "_commonShouldAdvertiseChanged");
  }

  uint64_t v18 = CFPrefs_GetInt64(@"com.apple.Sharing", @"chForceStationary", &v59);
  if (v59) {
    uint64_t v19 = 1;
  }
  else {
    uint64_t v19 = v18 == 0;
  }
  CFUserNotificationRef v20 = !v19;
  if (self->_prefForceStationary != v20)
  {
    if (dword_100642038 <= 30
      && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 30LL)))
    {
      SInt32 v21 = "yes";
      if (v20) {
        uint64_t v22 = "no";
      }
      else {
        uint64_t v22 = "yes";
      }
      if (!v20) {
        SInt32 v21 = "no";
      }
      LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent prefsChanged]",  30LL,  "Pref force stationary: %s -> %s\n",  v22,  v21);
    }

    self->_prefForceStationary = v20;
  }

  uint64_t v23 = CFPrefs_GetInt64(@"com.apple.Sharing", @"chHighNormal", &v59);
  if (v59) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = v23 == 0;
  }
  uint64_t v25 = !v24;
  if (self->_prefHighNormal != v25)
  {
    if (dword_100642038 <= 30
      && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 30LL)))
    {
      CFNumberRef v26 = "yes";
      if (v25) {
        uint64_t v27 = "no";
      }
      else {
        uint64_t v27 = "yes";
      }
      if (!v25) {
        CFNumberRef v26 = "no";
      }
      LogPrintF(&dword_100642038, "-[SDProxHandoffAgent prefsChanged]", 30LL, "Pref HighNormal: %s -> %s\n", v27, v26);
    }

    self->_prefHighNormal = v25;
    -[SDProxHandoffAgent _bleActionDiscoveryEnsureStopped](self, "_bleActionDiscoveryEnsureStopped");
  }

  uint64_t v28 = CFPrefs_GetInt64(@"com.apple.Sharing", @"chForceOnCall", &v59);
  if (v59) {
    uint64_t v29 = 1;
  }
  else {
    uint64_t v29 = v28 == 0;
  }
  uint64_t v30 = !v29;
  if (self->_prefForceOnCall != v30)
  {
    if (dword_100642038 <= 30
      && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 30LL)))
    {
      uint64_t v31 = "yes";
      if (v30) {
        uint64_t v32 = "no";
      }
      else {
        uint64_t v32 = "yes";
      }
      if (!v30) {
        uint64_t v31 = "no";
      }
      LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent prefsChanged]",  30LL,  "Pref force on call: %s -> %s\n",  v32,  v31);
    }

    self->_prefForceOnCall = v30;
    -[SDProxHandoffAgent _commonCallCountChanged](self, "_commonCallCountChanged");
  }

  uint64_t v33 = CFPrefs_GetInt64(@"com.apple.Sharing", @"chIgnoreMediumThrottle", &v59);
  if (v59) {
    uint64_t v34 = 1;
  }
  else {
    uint64_t v34 = v33 == 0;
  }
  uint64_t v35 = !v34;
  prefIgnoreMediumThrottle = self->_prefIgnoreMediumThrottle;
  if (prefIgnoreMediumThrottle != v35)
  {
    if (dword_100642038 <= 30)
    {
      if (dword_100642038 != -1)
      {
LABEL_103:
        uint64_t v37 = "yes";
        if (prefIgnoreMediumThrottle) {
          uint64_t v38 = "yes";
        }
        else {
          uint64_t v38 = "no";
        }
        if (!v35) {
          uint64_t v37 = "no";
        }
        LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent prefsChanged]",  30LL,  "Pref ignore medium throttle: %s -> %s\n",  v38,  v37);
        goto LABEL_110;
      }

      if (_LogCategory_Initialize(&dword_100642038, 30LL))
      {
        prefIgnoreMediumThrottle = self->_prefIgnoreMediumThrottle;
        goto LABEL_103;
      }
    }

        uint64_t v3 = v8;
      }
    }
  }
}
}

  if (a5)
  {
    uint64_t v11 = SFAppleIDErrorUserInfoRetryDelaySecondsKey;
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a5));
    id v12 = v10;
    a5 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v12,  &v11,  1LL));
  }

  -[SDAppleIDServerTask _callResponseHandlerWithInfo:errorInfo:error:]( self,  "_callResponseHandlerWithInfo:errorInfo:error:",  0LL,  a5,  v9);
}

  self->_ddNearbyInfoScreenOff = v10 & 1;
  if ((v11 & 1) == 0)
  {
    self->_ddProximityPairingEnabled = 0;
    -[NSMutableDictionary removeAllObjects](self->_ddProximityPairingDevices, "removeAllObjects");
    ddProximityPairingDevices = self->_ddProximityPairingDevices;
    self->_ddProximityPairingDevices = 0LL;
  }

  self->_ddProximityPairingScreenOff = v12 & 1;
  -[SDNearbyAgent _identificationHandleDiscoveryStop](self, "_identificationHandleDiscoveryStop");
  -[SDNearbyAgent _update](self, "_update");
}

  __break(1u);
}

  __break(1u);
}

        int v63 = objc_msgSend(v44, "defaultWorkspace", v51);
        if (!v63) {
          goto LABEL_46;
        }
        uint64_t v65 = v63;
        URL._bridgeToObjectiveC()(v64);
        __int16 v67 = v66;
        uint64_t v68 = [v65 URLOverrideForURL:v66];

        if (v68)
        {
          __int16 v69 = v109;
          static URL._unconditionallyBridgeFromObjectiveC(_:)(v68);

          uint64_t v70 = 0LL;
        }

        else
        {
          uint64_t v70 = 1LL;
          __int16 v69 = v109;
        }

        uint64_t v71 = (uint64_t)v110;
        v40(v69, v70, 1LL, v4);
        uint64_t v72 = (uint64_t)v69;
        uint64_t v73 = v112;
        sub_1001870BC(v72, v112, (uint64_t *)&unk_100645130);
        sub_1001915A4(v73, v71, (uint64_t *)&unk_100645130);
        uint64_t v74 = v41((char *)v71, 1LL, v4);
        uint64_t v11 = v115;
        if (v74 == 1)
        {
          sub_100187100(v71, (uint64_t *)&unk_100645130);
        }

        else
        {
          uint64_t v75 = v107;
          uint64_t v76 = v42(v107, (char *)v71, v4);
          uint64_t v77 = URL.scheme.getter(v76);
          if (v78)
          {
            v79 = v78;
            sub_10018BA38(v77, v78, 0LL, 0LL, 0, v117);
            v80 = swift_bridgeObjectRelease(v79);
            v81 = *(void (**)(char *, uint64_t, __n128))(v5 + 8);
            v81(v75, v4, v80);
            sub_100187100(v112, (uint64_t *)&unk_100645130);
            ((void (*)(char *, uint64_t))v81)(v11, v4);
            goto LABEL_39;
          }

          (*(void (**)(char *, uint64_t))(v5 + 8))(v75, v4);
        }

        v82 = v108;
        if (qword_100643E98 != -1) {
          swift_once(&qword_100643E98, sub_100187374);
        }
        v83 = type metadata accessor for Logger(0LL);
        sub_100186DE4(v83, (uint64_t)qword_100645110);
        v84 = ((uint64_t (*)(char *, char *, uint64_t))v116)(v82, v11, v4);
        v85 = (os_log_s *)Logger.logObject.getter(v84);
        v86 = v11;
        v87 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v85, v87))
        {
          v88 = swift_slowAlloc(12LL, -1LL);
          v89 = swift_slowAlloc(32LL, -1LL);
          v118[0] = v89;
          *(_DWORD *)v88 = v104.n128_u32[0];
          v90 = sub_100183F14( (unint64_t *)&qword_100645408,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
          v91 = dispatch thunk of CustomStringConvertible.description.getter(v4, v90);
          v93 = (const char *)v92;
          *(void *)(v88 + 4) = sub_10018CDB4(v91, v92, v118);
          v94 = swift_bridgeObjectRelease(v93);
          v95 = *(void (**)(char *, uint64_t, __n128))(v113 + 8);
          v95(v82, v4, v94);
          _os_log_impl( (void *)&_mh_execute_header,  v85,  v87,  "Failed to create item SFAirDropTransferItem from url. {url: %s}",  (uint8_t *)v88,  0xCu);
          swift_arrayDestroy(v89, 1LL, v103);
          swift_slowDealloc(v89, -1LL, -1LL);
          v96 = v88;
          id v5 = v113;
          swift_slowDealloc(v96, -1LL, -1LL);

          sub_100187100(v112, (uint64_t *)&unk_100645130);
          uint64_t v11 = v115;
          ((void (*)(char *, uint64_t))v95)(v115, v4);
        }

        else
        {

          v97 = *(void (**)(char *, uint64_t))(v5 + 8);
          v97(v82, v4);
          sub_100187100(v112, (uint64_t *)&unk_100645130);
          v97(v86, v4);
          uint64_t v11 = v86;
        }

        goto LABEL_39;
      }
    }

    else if (*(void *)((v53 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      goto LABEL_15;
    }

    *(void *)&uint64_t v51 = swift_bridgeObjectRelease((const char *)v53).n128_u64[0];
    goto LABEL_25;
  }

  v98 = (const char *)a2;
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v39 = swift_bridgeObjectRetain(v98);
  uint64_t v38 = v111;
LABEL_42:
  ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v40)(v38, 1LL, 1LL, v4, v39);
LABEL_43:
  swift_bridgeObjectRelease(v106);
  *(void *)&v99 = swift_beginAccess(v105, v118, 0LL, 0LL).n128_u64[0];
  v100 = v117;
  swift_bridgeObjectRetain(*(const char **)(v117 + 16), v99);
  sub_100189B64(v101);
  swift_release(v100);
}

      uint64_t v30 = sub_100183098((uint64_t *)&unk_100646530);
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v7, 1LL, 1LL, v30);
      uint64_t v17 = 0LL;
    }

    uint64_t v28 = v36[v29];
    if (v28)
    {
LABEL_14:
      uint64_t v27 = v29;
LABEL_11:
      uint64_t v17 = (v28 - 1) & v28;
      SInt32 v21 = __clz(__rbit64(v28)) + (v27 << 6);
      uint64_t v18 = v27;
      continue;
    }

    break;
  }

  while (1)
  {
    uint64_t v27 = v29 + 1;
    if (__OFADD__(v29, 1LL)) {
      break;
    }
    if (v27 >= v37)
    {
      uint64_t v18 = v34;
      goto LABEL_25;
    }

    uint64_t v28 = v36[v27];
    ++v29;
    if (v28) {
      goto LABEL_11;
    }
  }

    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }

  os_log_t v54 = v105;
  v55 = (*(uint64_t (**)(char *, char *, uint64_t))(v41 + 16))(v105, v26, v19);
  id v56 = v26;
  id v57 = (os_log_s *)Logger.logObject.getter(v55);
  uint64_t v58 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v57, v58))
  {
    v112 = v56;
    v59 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v60 = swift_slowAlloc(32LL, -1LL);
    v117 = v60;
    *(_DWORD *)v59 = 136315138;
    id v61 = sub_100183F14( &qword_100646588,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskRequest,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.AskRequest);
    id v62 = dispatch thunk of CustomStringConvertible.description.getter(v19, v61);
    id v64 = v63;
    v115 = sub_10018CDB4(v62, v63, &v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116, v59 + 4, v59 + 12);
    swift_bridgeObjectRelease(v64);
    uint64_t v65 = *(void (**)(char *, uint64_t))(v41 + 8);
    v65(v54, v19);
    _os_log_impl( (void *)&_mh_execute_header,  v57,  v58,  "Repeated ask requests for the same transfer. Dropping {askInfo: %s}",  v59,  0xCu);
    swift_arrayDestroy(v60, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1LL, -1LL);
    swift_slowDealloc(v59, -1LL, -1LL);

    return (Class)((uint64_t (*)(char *, uint64_t))v65)(v112, v19);
  }

  else
  {

    os_log_t v66 = *(void (**)(char *, uint64_t))(v41 + 8);
    v66(v54, v19);
    return (Class)((uint64_t (*)(char *, uint64_t))v66)(v56, v19);
  }

  __break(1u);
}

            os_log_t v66 = 0LL;
LABEL_26:
            sub_1001A4BC8(v52, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
            sub_1001A4BC8(v65, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
            return v66;
          }

  sub_100230334(*(void *)(v0 + 248));
LABEL_26:
  id v57 = *(void *)(v0 + 328);
  v59 = *(void *)(v0 + 312);
  uint64_t v58 = *(void *)(v0 + 320);
  id v60 = *(void *)(v0 + 304);
  id v61 = *(void *)(v0 + 288);
  swift_task_dealloc(*(void *)(v0 + 336));
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

    uint64_t v29 = (v33 - 1) & v33;
    uint64_t v31 = __clz(__rbit64(v33)) + (v26 << 6);
LABEL_26:
    uint64_t v35 = *(void *)(v1 + 48);
    id v36 = *(void *)(v1 + 32);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v24 + 16))( v36,  *(void *)(v25 + 48) + *(void *)(v24 + 72) * v31,  v35);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56))(v36, 0LL, 1LL, v35);
    uint64_t v37 = *(void *)(v1 + 64);
    uint64_t v38 = *(void *)(v1 + 48);
    v53(v37, *(void *)(v1 + 32), v38);
    URL._bridgeToObjectiveC()(v39);
    __int16 v41 = v40;
    uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v42(v37, v38);
    LOBYTE(v37) = [v41 isiWorkURL];

    if ((v37 & 1) == 0)
    {
      uint64_t v43 = *(void *)(v1 + 72);
      uint64_t v44 = *(void *)(v1 + 48);
      swift_release(v25);
      v42(v43, v44);
      goto LABEL_4;
    }
  }

  uint64_t v34 = v32 + 3;
  if (v34 >= v52)
  {
LABEL_31:
    (*(void (**)(void, uint64_t, uint64_t, void))(v24 + 56))( *(void *)(v1 + 32),  1LL,  1LL,  *(void *)(v1 + 48));
LABEL_32:
    swift_release(v25);
    (*(void (**)(void, void))(v24 + 8))(*(void *)(v1 + 72), *(void *)(v1 + 48));
    uint64_t v14 = 1LL;
    goto LABEL_5;
  }

  uint64_t v33 = *(void *)(v51 + 8 * v34);
  if (v33)
  {
    CFNumberRef v26 = v34;
    goto LABEL_25;
  }

  while (1)
  {
    CFNumberRef v26 = v34 + 1;
    if (__OFADD__(v34, 1LL)) {
      break;
    }
    if (v26 >= v52) {
      goto LABEL_31;
    }
    uint64_t v33 = *(void *)(v51 + 8 * v26);
    ++v34;
    if (v33) {
      goto LABEL_25;
    }
  }

      swift_once(&qword_100644110, sub_1002C0C6C);
      goto LABEL_10;
    }
  }

  if (qword_100644110 != -1) {
    swift_once(&qword_100644110, sub_1002C0C6C);
  }
  uint64_t v35 = type metadata accessor for Logger(0LL);
  id v36 = sub_100186DE4(v35, (uint64_t)qword_10064CB80);
  uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
  uint64_t v38 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Peer out of range", v39, 2u);
    swift_slowDealloc(v39, -1LL, -1LL);
  }

  sub_1002C5C08((uint64_t)v14, (uint64_t)v9);
  uint64_t v40 = sub_100183098(&qword_1006457B8);
  __int16 v41 = *(void *)(v40 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v41 + 48))(v9, 1LL, v40) == 1)
  {
    sub_100187100((uint64_t)v14, &qword_10064CE00);
    uint64_t v34 = (uint64_t)v9;
    return sub_100187100(v34, &qword_10064CE00);
  }

  v45[0] = 0;
  CheckedContinuation.resume(returning:)(v45, v40);
  sub_100187100((uint64_t)v14, &qword_10064CE00);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v41 + 8))(v9, v40);
}

  __break(1u);
}

    uint64_t v30 = 0LL;
    uint64_t v31 = v150;
LABEL_28:
    swift_endAccess(v164);
    *(void *)&uint64_t v32 = swift_bridgeObjectRelease(v18).n128_u64[0];
    swift_bridgeObjectRelease(v21, v32);
    uint64_t v4 = v15 + 2;
    if (v15 + 2 >= v31) {
      goto LABEL_46;
    }
    uint64_t v33 = v145 + 16 * v15;
    uint64_t v34 = v33;
    while (1)
    {
      uint64_t v35 = v4;
      uint64_t v37 = *(const char **)(v34 + 16);
      v34 += 16LL;
      id v36 = v37;
      uint64_t v38 = *(void *)(v33 - 8);
      uint64_t v39 = *(const char **)v33;
      uint64_t v40 = *(void *)(v33 + 8);
      *(void *)&__int16 v41 = swift_beginAccess(v162, v164, 32LL, 0LL).n128_u64[0];
      uint64_t v42 = *(void *)v162;
      uint64_t v43 = *(void *)(*(void *)v162 + 16LL);
      *(void *)&uint64_t v44 = swift_bridgeObjectRetain(v37, v41).n128_u64[0];
      swift_bridgeObjectRetain(v39, v44);
      if (!v43)
      {
        __int16 v47 = 0LL;
LABEL_38:
        int v50 = 0LL;
        uint64_t v51 = v150;
        goto LABEL_41;
      }

      uint64_t v45 = sub_1003AD53C(v40, (uint64_t)v36);
      if ((v46 & 1) != 0)
      {
        __int16 v47 = *(void *)(*(void *)(v42 + 56) + 8 * v45);
        if (!*(void *)(v42 + 16)) {
          goto LABEL_38;
        }
      }

      else
      {
        __int16 v47 = 0LL;
        if (!*(void *)(v42 + 16)) {
          goto LABEL_38;
        }
      }

      swift_bridgeObjectRetain(v39);
      id v48 = sub_1003AD53C(v38, (uint64_t)v39);
      int v50 = (v49 & 1) != 0 ? *(void *)(*(void *)(v42 + 56) + 8 * v48) : 0LL;
      uint64_t v51 = v150;
      swift_bridgeObjectRelease(v39);
LABEL_41:
      swift_endAccess(v164);
      *(void *)&uint64_t v52 = swift_bridgeObjectRelease(v36).n128_u64[0];
      swift_bridgeObjectRelease(v39, v52);
      if (v158 < v30 == v47 >= v50) {
        break;
      }
      uint64_t v4 = v35 + 1;
      uint64_t v33 = v34;
      if (v51 == v35 + 1)
      {
        uint64_t v4 = v51;
        goto LABEL_45;
      }
    }

    uint64_t v4 = v35;
LABEL_45:
    uint64_t v15 = v151;
LABEL_46:
    id v13 = v155;
    id v12 = v165;
    if (v158 < v30)
    {
      if ((uint64_t)v4 >= v15)
      {
        if (v15 < (uint64_t)v4)
        {
          uint64_t v53 = 2 * v4;
          os_log_t v54 = 2 * v15;
          v55 = v4;
          id v56 = v15;
          while (1)
          {
            if (v56 != --v55)
            {
              if (!v12) {
                goto LABEL_178;
              }
              id v57 = &v12[v53];
              uint64_t v58 = v12[v54];
              v59 = v12[v54 + 1];
              *(_OWORD *)&v12[v54] = *(_OWORD *)&v12[v53 - 2];
              *(v57 - 2) = v58;
              *(v57 - 1) = v59;
            }

            ++v56;
            v53 -= 2LL;
            v54 += 2LL;
            if (v56 >= v55) {
              goto LABEL_55;
            }
          }
        }

        goto LABEL_55;
      }

  __break(1u);
}

  swift_bridgeObjectRelease((const char *)v31);
LABEL_26:
  uint64_t v42 = swift_allocObject(&unk_1005DE700, 24LL, 7LL);
  *(void *)(v42 + 16) = 0LL;
  id v5 = v42 + 16;
  uint64_t v43 = (const char *)sub_1002DC36C(a1, a2, a3, a4);
  uint64_t v44 = sub_1003C08D8(v43);
  CFIndex v46 = v45;
  swift_bridgeObjectRelease(v43);
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100189B20(v44, v46);
  id v48 = *(void **)(v60 + 16);
  uint64_t v49 = (void *)swift_allocObject(&unk_1005DE7A0, 40LL, 7LL);
  v49[2] = v60;
  v49[3] = v10;
  v49[4] = v42;
  aBlock[4] = sub_1003C23D8;
  v78 = v49;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1003A55CC;
  aBlock[3] = &unk_1005DE7B8;
  int v50 = _Block_copy(aBlock);
  uint64_t v51 = v78;
  uint64_t v52 = v48;
  uint64_t v53 = isa;
  swift_retain(v60);
  swift_retain(v10);
  swift_retain(v42);
  swift_release(v51);
  aBlock[0] = 0LL;
  LODWORD(v51) = [v52 enumerateValuesForKey:v53 error:aBlock handler:v50];
  _Block_release(v50);

  os_log_t v54 = aBlock[0];
  if ((_DWORD)v51)
  {
    swift_beginAccess(v5, aBlock, 0LL, 0LL);
    if (*(void *)v5)
    {
      v55 = swift_errorRetain(*(void *)v5);
      swift_willThrow(v55);
      swift_release(v10);
      swift_release(v42);
    }

    else
    {

      *(void *)&uint64_t v58 = swift_beginAccess(v59, &v76, 0LL, 0LL).n128_u64[0];
      id v5 = *(void *)(v10 + 16);
      swift_bridgeObjectRetain((const char *)v5, v58);
      swift_release(v10);
      swift_release(v42);
    }
  }

  else
  {
    id v56 = v54;
    id v5 = _convertNSErrorToError(_:)(v54);

    swift_willThrow(v57);
    swift_release(v10);
    swift_release(v42);
  }

  return v5;
}

    CFUserNotificationRef v20 = (v31 - 1) & v31;
    uint64_t v28 = __clz(__rbit64(v31)) + (v23 << 6);
LABEL_26:
    uint64_t v33 = v55;
    uint64_t v34 = *(void *)(v56 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v56 + v25))( v13,  *(void *)(v55 + 48) + v34 * v28,  v11);
    uint64_t v35 = *(void *)(v33 + 56);
    id v36 = *(void *)(v58 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v58 + v25))(v57, v35 + v36 * v28, v59);
    uint64_t v37 = *(void *)(v16 + 40);
    uint64_t v38 = sub_100183F14( &qword_100646250,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
    SecTrustResultType result = dispatch thunk of Hashable._rawHashValue(seed:)(v37, v11, v38);
    uint64_t v39 = -1LL << *(_BYTE *)(v16 + 32);
    uint64_t v40 = result & ~v39;
    __int16 v41 = v40 >> 6;
    if (((-1LL << v40) & ~*(void *)(v21 + 8 * (v40 >> 6))) != 0)
    {
      CFNumberRef v26 = __clz(__rbit64((-1LL << v40) & ~*(void *)(v21 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v42 = 0;
      uint64_t v43 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        uint64_t v44 = v41 == v43;
        if (v41 == v43) {
          __int16 v41 = 0LL;
        }
        v42 |= v44;
        uint64_t v45 = *(void *)(v21 + 8 * v41);
      }

      while (v45 == -1);
      CFNumberRef v26 = __clz(__rbit64(~v45)) + (v41 << 6);
    }

    *(void *)(v21 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v26;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v56 + 32))(*(void *)(v16 + 48) + v34 * v26, v13, v11);
    SecTrustResultType result = (*(uint64_t (**)(unint64_t, _BYTE *, uint64_t))(v58 + 32))( *(void *)(v16 + 56) + v36 * v26,  v57,  v59);
    ++*(void *)(v16 + 16);
  }

  uint64_t v32 = v29 + 2;
  if (v32 >= v52)
  {
LABEL_36:
    __int16 v47 = v55;
    swift_release(v55);
    id v6 = v51;
    if ((v50 & 1) != 0) {
      goto LABEL_39;
    }
    goto LABEL_43;
  }

  uint64_t v31 = v53[v32];
  if (v31)
  {
    uint64_t v23 = v32;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v23 = v32 + 1;
    if (__OFADD__(v32, 1LL)) {
      break;
    }
    if (v23 >= v52) {
      goto LABEL_36;
    }
    uint64_t v31 = v53[v23];
    ++v32;
    if (v31) {
      goto LABEL_25;
    }
  }

    uint64_t v14 = (v24 - 1) & v24;
    SInt32 v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_26:
    CFNumberRef v26 = *(void *)(v45 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v45 + v44))(v7, *(void *)(v8 + 48) + v26 * v21, v5);
    uint64_t v27 = v8;
    uint64_t v28 = *(void *)(*(void *)(v8 + 56) + 8 * v21);
    uint64_t v29 = *(void *)(v10 + 40);
    uint64_t v30 = sub_100183F14( &qword_100646108,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    SecTrustResultType result = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v5, v30);
    uint64_t v31 = -1LL << *(_BYTE *)(v10 + 32);
    uint64_t v32 = result & ~v31;
    uint64_t v33 = v32 >> 6;
    if (((-1LL << v32) & ~*(void *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      uint64_t v19 = __clz(__rbit64((-1LL << v32) & ~*(void *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v34 = 0;
      uint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }

        id v36 = v33 == v35;
        if (v33 == v35) {
          uint64_t v33 = 0LL;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v15 + 8 * v33);
      }

      while (v37 == -1);
      uint64_t v19 = __clz(__rbit64(~v37)) + (v33 << 6);
    }

    *(void *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    SecTrustResultType result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v45 + 32))( *(void *)(v10 + 48) + v26 * v19,  v7,  v5);
    *(void *)(*(void *)(v10 + 56) + 8 * v19) = v28;
    ++*(void *)(v10 + 16);
    id v8 = v27;
  }

  uint64_t v25 = v22 + 2;
  if (v25 >= v42)
  {
LABEL_36:
    swift_release(v8);
    uint64_t v38 = v41;
    if ((v40 & 0x100000000LL) != 0) {
      goto LABEL_39;
    }
    goto LABEL_43;
  }

  uint64_t v24 = v43[v25];
  if (v24)
  {
    uint64_t v17 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v17 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v17 >= v42) {
      goto LABEL_36;
    }
    uint64_t v24 = v43[v17];
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

    id v12 = (v20 - 1) & v20;
    uint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    sub_100187058(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    sub_100186D8C(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
    SecTrustResultType result = v17;
  }

  SInt32 v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  CFUserNotificationRef v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    id v9 = v21;
    goto LABEL_25;
  }

  while (1)
  {
    id v9 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    CFUserNotificationRef v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }

    id v12 = (v22 - 1) & v22;
    uint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_1001CE1D0(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    sub_100187058(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    uint64_t v19 = v25[0];
    CFUserNotificationRef v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    SecTrustResultType result = sub_100186D8C(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }

  uint64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  uint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    id v9 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    id v9 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    uint64_t v14 = (v21 - 1) & v21;
    uint64_t v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    uint64_t v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v17, v1);
    uint64_t v18 = 8 * v16;
    uint64_t v19 = *(void **)(*(void *)(v5 + 56) + v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v17, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v1_Block_object_dispose((const void *)(v1 - 96), 8) = v19;
    SecTrustResultType result = v19;
  }

  uint64_t v22 = v20 + 2;
  if (v22 >= v26) {
    goto LABEL_26;
  }
  SInt32 v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    uint64_t v11 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_26;
    }
    SInt32 v21 = *(void *)(v25 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    id v12 = (v23 - 1) & v23;
    uint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    CFUserNotificationRef v20 = 48 * v15;
    sub_1002499DC(*(void *)(v2 + 56) + 48 * v15, (uint64_t)v26);
    SInt32 v21 = (void *)(*(void *)(v4 + 48) + v16);
    CGImage *v21 = v19;
    v21[1] = v18;
    sub_1001CCE4C(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    SecTrustResultType result = (void *)swift_bridgeObjectRetain(v18);
  }

  uint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    SecTrustResultType result = (void *)swift_release(v2);
    uint64_t v1 = v25;
    goto LABEL_28;
  }

  uint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    id v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    id v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v14 = (v21 - 1) & v21;
    uint64_t v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    uint64_t v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v17, v1);
    uint64_t v18 = 8 * v16;
    uint64_t v19 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v17, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v1_Block_object_dispose((const void *)(v1 - 96), 8) = v19;
    SecTrustResultType result = (void *)swift_bridgeObjectRetain(v19);
  }

  uint64_t v22 = v20 + 2;
  if (v22 >= v26) {
    goto LABEL_26;
  }
  SInt32 v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    uint64_t v11 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_26;
    }
    SInt32 v21 = *(void *)(v25 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    id v13 = (v27 - 1) & v27;
    uint64_t v18 = __clz(__rbit64(v27)) + (v10 << 6);
LABEL_12:
    CFUserNotificationRef v20 = *(void *)(v1 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v15, *(void *)(v19 + 48) + v20, v14);
    SInt32 v21 = 16 * v18;
    uint64_t v22 = (uint64_t *)(*(void *)(v19 + 56) + 16 * v18);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v16 + 48) + v20, v15, v14);
    uint64_t v25 = (void *)(*(void *)(v16 + 56) + v21);
    void *v25 = v23;
    v25[1] = v24;
    SecTrustResultType result = (void *)swift_bridgeObjectRetain(v24);
  }

  uint64_t v28 = v26 + 2;
  if (v28 >= v33)
  {
LABEL_26:
    SecTrustResultType result = (void *)swift_release(v37);
    uint64_t v29 = v32;
    uint64_t v30 = v38;
    goto LABEL_28;
  }

  uint64_t v27 = *((void *)v34 + v28);
  if (v27)
  {
    id v10 = v28;
    goto LABEL_25;
  }

  while (1)
  {
    id v10 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v10 >= v33) {
      goto LABEL_26;
    }
    uint64_t v27 = *((void *)v34 + v10);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }

    id v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    uint64_t v19 = v17;
    SecTrustResultType result = v18;
  }

  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  SInt32 v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    id v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    id v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    SInt32 v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    id v12 = (v26 - 1) & v26;
    uint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = (const char *)v17[1];
    CFUserNotificationRef v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    SInt32 v21 = *v20;
    uint64_t v22 = (const char *)v20[1];
    uint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v23 = v19;
    v23[1] = v18;
    uint64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *uint64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain(v18);
    SecTrustResultType result = (void *)swift_bridgeObjectRetain(v22);
  }

  uint64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  CFNumberRef v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    id v9 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    id v9 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    CFNumberRef v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    uint64_t v17 = (v27 - 1) & v27;
    CFUserNotificationRef v20 = __clz(__rbit64(v27)) + (v14 << 6);
LABEL_12:
    SInt32 v21 = *(void *)(v5 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v21, v4);
    uint64_t v22 = 16 * v20;
    uint64_t v23 = *(void *)(v10 + 48) + v21;
    uint64_t v24 = *(void (**)(unint64_t, char *, uint64_t))(v5 + 32);
    uint64_t v31 = *(_OWORD *)(*(void *)(v8 + 56) + v22);
    v24(v23, v7, v4);
    uint64_t v25 = v31;
    *(_OWORD *)(*(void *)(v10 + 56) + v22) = v31;
    SecTrustResultType result = (void *)swift_unknownObjectRetain(v25);
  }

  uint64_t v28 = v26 + 2;
  if (v28 >= v18)
  {
LABEL_26:
    SecTrustResultType result = (void *)swift_release(v8);
    uint64_t v3 = v29;
    goto LABEL_28;
  }

  uint64_t v27 = *(void *)(v30 + 8 * v28);
  if (v27)
  {
    uint64_t v14 = v28;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v14 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v14 >= v18) {
      goto LABEL_26;
    }
    uint64_t v27 = *(void *)(v30 + 8 * v14);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }

    uint64_t v17 = (v27 - 1) & v27;
    uint64_t v19 = __clz(__rbit64(v27)) + (v14 << 6);
LABEL_12:
    CFUserNotificationRef v20 = 16 * v19;
    SInt32 v21 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v19);
    uint64_t v23 = *v21;
    uint64_t v22 = v21[1];
    uint64_t v24 = *(void *)(v32 + 72) * v19;
    sub_1001A4B84(*(void *)(v8 + 56) + v24, (uint64_t)v7, a1);
    uint64_t v25 = (void *)(*(void *)(v10 + 48) + v20);
    void *v25 = v23;
    v25[1] = v22;
    sub_1001A4B40((uint64_t)v7, *(void *)(v10 + 56) + v24, a1);
    SecTrustResultType result = (void *)swift_bridgeObjectRetain(v22);
  }

  uint64_t v28 = v26 + 2;
  if (v28 >= v31) {
    goto LABEL_26;
  }
  uint64_t v27 = *(void *)(v30 + 8 * v28);
  if (v27)
  {
    uint64_t v14 = v28;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v14 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v14 >= v31) {
      goto LABEL_26;
    }
    uint64_t v27 = *(void *)(v30 + 8 * v14);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }

    uint64_t v18 = (v25 - 1) & v25;
    SInt32 v21 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_12:
    uint64_t v22 = *(void *)(v6 + 72) * v21;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(void *)(v9 + 48) + v22, v5);
    uint64_t v23 = 40 * v21;
    sub_10019A6C4(*(void *)(v9 + 56) + v23, (uint64_t)v30);
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v11 + 48) + v22, v8, v5);
    SecTrustResultType result = (void *)v29(v30, *(void *)(v11 + 56) + v23);
  }

  CFNumberRef v26 = v24 + 2;
  if (v26 >= v19)
  {
LABEL_26:
    SecTrustResultType result = (void *)swift_release(v9);
    uint64_t v4 = v27;
    goto LABEL_28;
  }

  uint64_t v25 = *(void *)(v28 + 8 * v26);
  if (v25)
  {
    uint64_t v15 = v26;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v15 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v15 >= v19) {
      goto LABEL_26;
    }
    uint64_t v25 = *(void *)(v28 + 8 * v15);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }

    uint64_t v14 = (v21 - 1) & v21;
    uint64_t v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    uint64_t v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v17, v1);
    uint64_t v18 = 8 * v16;
    uint64_t v19 = *(void *)(*(void *)(v5 + 56) + v18);
    SecTrustResultType result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))( *(void *)(v7 + 48) + v17,  v4,  v1);
    *(void *)(*(void *)(v7 + 56) + v1_Block_object_dispose((const void *)(v1 - 96), 8) = v19;
  }

  uint64_t v22 = v20 + 2;
  if (v22 >= v26) {
    goto LABEL_26;
  }
  SInt32 v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    uint64_t v11 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_26;
    }
    SInt32 v21 = *(void *)(v25 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    id v13 = (v25 - 1) & v25;
    uint64_t v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = (const char *)v18[1];
    CFUserNotificationRef v20 = 8 * v16;
    SInt32 v21 = *(const char **)(*(void *)(v3 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *uint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    *(void *)&uint64_t v23 = swift_bridgeObjectRetain(v19).n128_u64[0];
    swift_bridgeObjectRetain(v21, v23);
  }

  CFNumberRef v26 = v24 + 2;
  if (v26 >= v14) {
    goto LABEL_26;
  }
  uint64_t v25 = *(void *)(v7 + 8 * v26);
  if (v25)
  {
    id v10 = v26;
    goto LABEL_25;
  }

  while (1)
  {
    id v10 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    uint64_t v25 = *(void *)(v7 + 8 * v10);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }

    id v13 = (v24 - 1) & v24;
    uint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    CFUserNotificationRef v20 = 8 * v16;
    SInt32 v21 = *(void **)(*(void *)(v3 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *uint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    SecTrustResultType result = v21;
  }

  uint64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  uint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    id v10 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    id v10 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

    id v13 = (v25 - 1) & v25;
    uint64_t v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v16);
    CFUserNotificationRef v20 = *v18;
    uint64_t v19 = v18[1];
    SInt32 v21 = 8 * v16;
    uint64_t v22 = *(void *)(*(void *)(v3 + 56) + v21);
    uint64_t v23 = (void *)(*(void *)(v5 + 48) + v17);
    *uint64_t v23 = v20;
    v23[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v21) = v22;
    SecTrustResultType result = (void *)swift_bridgeObjectRetain(v19);
  }

  CFNumberRef v26 = v24 + 2;
  if (v26 >= v14) {
    goto LABEL_26;
  }
  uint64_t v25 = *(void *)(v7 + 8 * v26);
  if (v25)
  {
    id v10 = v26;
    goto LABEL_25;
  }

  while (1)
  {
    id v10 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    uint64_t v25 = *(void *)(v7 + 8 * v10);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }

    uint64_t v17 = (v29 - 1) & v29;
    CFUserNotificationRef v20 = __clz(__rbit64(v29)) + (v14 << 6);
LABEL_12:
    SInt32 v21 = 16 * v20;
    uint64_t v22 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v20);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    uint64_t v25 = *(void *)(v4 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v7 + 56) + v25, v18);
    CFNumberRef v26 = v38;
    uint64_t v27 = (void *)(*(void *)(v38 + 48) + v21);
    void *v27 = v24;
    v27[1] = v23;
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v26 + 56) + v25, v6, v18);
    SecTrustResultType result = (void *)swift_bridgeObjectRetain(v23);
  }

  uint64_t v30 = v28 + 2;
  if (v30 >= v36)
  {
LABEL_26:
    SecTrustResultType result = (void *)swift_release(v7);
    uint64_t v31 = v34;
    uint64_t v32 = v38;
    goto LABEL_28;
  }

  uint64_t v29 = *(void *)(v35 + 8 * v30);
  if (v29)
  {
    uint64_t v14 = v30;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v14 = v30 + 1;
    if (__OFADD__(v30, 1LL)) {
      break;
    }
    if (v14 >= v36) {
      goto LABEL_26;
    }
    uint64_t v29 = *(void *)(v35 + 8 * v14);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }

    id v13 = (v24 - 1) & v24;
    uint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    CFUserNotificationRef v20 = 8 * v16;
    SInt32 v21 = *(void *)(*(void *)(v3 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *uint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    SecTrustResultType result = (void *)swift_retain(v21);
  }

  uint64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  uint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    id v10 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    id v10 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

    id v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(const char **)(*(void *)(v2 + 56) + 8 * v15);
    uint64_t v18 = 16 * v15;
    uint64_t v19 = *(_OWORD *)(*(void *)(v2 + 48) + v18);
    *(_OWORD *)(*(void *)(v4 + 48) + v1_Block_object_dispose((const void *)(v1 - 96), 8) = v19;
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    sub_10019BA8C(v19, *((unint64_t *)&v19 + 1));
    swift_bridgeObjectRetain(v17);
  }

  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  SInt32 v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    id v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    id v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    SInt32 v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v15 = (v25 - 1) & v25;
    uint64_t v18 = __clz(__rbit64(v25)) + (v12 << 6);
LABEL_12:
    uint64_t v19 = *(void *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v19, v2);
    CFUserNotificationRef v20 = 16 * v18;
    SInt32 v21 = *(void *)(v8 + 48) + v19;
    uint64_t v22 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 32);
    uint64_t v29 = *(_OWORD *)(*(void *)(v6 + 56) + v20);
    v22(v21, v5, v2);
    uint64_t v23 = *((void *)&v29 + 1);
    *(_OWORD *)(*(void *)(v8 + 56) + v20) = v29;
    SecTrustResultType result = (void *)swift_retain(v23);
  }

  CFNumberRef v26 = v24 + 2;
  if (v26 >= v16)
  {
LABEL_26:
    SecTrustResultType result = (void *)swift_release(v6);
    uint64_t v1 = v27;
    goto LABEL_28;
  }

  uint64_t v25 = *(void *)(v28 + 8 * v26);
  if (v25)
  {
    id v12 = v26;
    goto LABEL_25;
  }

  while (1)
  {
    id v12 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_26;
    }
    uint64_t v25 = *(void *)(v28 + 8 * v12);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }

    id v13 = (v22 - 1) & v22;
    uint64_t v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = *v17;
    uint64_t v18 = (const char *)v17[1];
    LOBYTE(v17) = *(_BYTE *)(*(void *)(v3 + 56) + v16);
    CFUserNotificationRef v20 = (void *)(*(void *)(v5 + 48) + 16 * v16);
    *CFUserNotificationRef v20 = v19;
    v20[1] = v18;
    *(_BYTE *)(*(void *)(v5 + 56) + v16) = (_BYTE)v17;
    swift_bridgeObjectRetain(v18);
  }

  uint64_t v23 = v21 + 2;
  if (v23 >= v14) {
    goto LABEL_26;
  }
  uint64_t v22 = *(void *)(v7 + 8 * v23);
  if (v22)
  {
    id v10 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    id v10 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v7 + 8 * v10);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    id v12 = (v24 - 1) & v24;
    uint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 56) + v18);
    SInt32 v21 = *v19;
    CFUserNotificationRef v20 = (const char *)v19[1];
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v22 = (void *)(*(void *)(v4 + 56) + v18);
    *uint64_t v22 = v21;
    v22[1] = v20;
    swift_bridgeObjectRetain(v20);
  }

  uint64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  uint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    id v9 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    id v9 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

    id v12 = (v22 - 1) & v22;
    uint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v24 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    CFUserNotificationRef v20 = (void *)(*(void *)(v4 + 48) + v16);
    *CFUserNotificationRef v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain(v18);
    SecTrustResultType result = (void *)swift_unknownObjectRetain(v24);
  }

  uint64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  uint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    id v9 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    id v9 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    uint64_t v14 = (v21 - 1) & v21;
    uint64_t v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    uint64_t v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v17, v1);
    uint64_t v18 = 8 * v16;
    uint64_t v19 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v17, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v1_Block_object_dispose((const void *)(v1 - 96), 8) = v19;
    SecTrustResultType result = (void *)swift_unknownObjectRetain(v19);
  }

  uint64_t v22 = v20 + 2;
  if (v22 >= v26) {
    goto LABEL_26;
  }
  SInt32 v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    uint64_t v11 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_26;
    }
    SInt32 v21 = *(void *)(v25 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v18 = (v26 - 1) & v26;
    uint64_t v24 = __clz(__rbit64(v26)) + (v21 << 6);
LABEL_26:
    uint64_t v28 = v12;
    uint64_t v29 = *(void *)(v12 + 48);
    uint64_t v30 = *(void *)(v46 + 72);
    uint64_t v31 = *(void (**)(char *, unint64_t, uint64_t))(v46 + 32);
    v31(v11, v29 + v30 * v24, v9);
    uint64_t v32 = *(void *)(v14 + 40);
    uint64_t v33 = sub_100183F14(v48, v47, v49);
    SecTrustResultType result = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v9, v33);
    uint64_t v34 = -1LL << *(_BYTE *)(v14 + 32);
    uint64_t v35 = result & ~v34;
    id v36 = v35 >> 6;
    if (((-1LL << v35) & ~*(void *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      uint64_t v22 = __clz(__rbit64((-1LL << v35) & ~*(void *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v37 = 0;
      uint64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }

        uint64_t v39 = v36 == v38;
        if (v36 == v38) {
          id v36 = 0LL;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v19 + 8 * v36);
      }

      while (v40 == -1);
      uint64_t v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }

    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
    SecTrustResultType result = ((uint64_t (*)(unint64_t, char *, uint64_t))v31)( *(void *)(v14 + 48) + v22 * v30,  v11,  v9);
    ++*(void *)(v14 + 16);
    id v12 = v28;
  }

  uint64_t v27 = v25 + 3;
  if (v27 < v44)
  {
    CFNumberRef v26 = v45[v27];
    if (!v26)
    {
      while (1)
      {
        SInt32 v21 = v27 + 1;
        if (__OFADD__(v27, 1LL)) {
          goto LABEL_41;
        }
        if (v21 >= v44) {
          goto LABEL_35;
        }
        CFNumberRef v26 = v45[v21];
        ++v27;
        if (v26) {
          goto LABEL_25;
        }
      }
    }

    SInt32 v21 = v27;
    goto LABEL_25;
  }

    id v13 = (v21 - 1) & v21;
    uint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    uint64_t v23 = *(void *)(v36 + 72);
    sub_1001A4B40(*(void *)(v7 + 48) + v23 * v19, (uint64_t)v6, type metadata accessor for SDAirDropDiscoveredEndpoint);
    Hasher.init(_seed:)(v37);
    sub_10020DC2C();
    SecTrustResultType result = Hasher._finalize()();
    uint64_t v24 = -1LL << *(_BYTE *)(v9 + 32);
    uint64_t v25 = result & ~v24;
    CFNumberRef v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v14 + 8 * (v25 >> 6))) != 0)
    {
      uint64_t v17 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v14 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }

        uint64_t v29 = v26 == v28;
        if (v26 == v28) {
          CFNumberRef v26 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v26);
      }

      while (v30 == -1);
      uint64_t v17 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
    SecTrustResultType result = sub_1001A4B40( (uint64_t)v6,  *(void *)(v9 + 48) + v17 * v23,  type metadata accessor for SDAirDropDiscoveredEndpoint);
    ++*(void *)(v9 + 16);
  }

  uint64_t v22 = v20 + 3;
  if (v22 < v34)
  {
    SInt32 v21 = v35[v22];
    if (!v21)
    {
      while (1)
      {
        uint64_t v16 = v22 + 1;
        if (__OFADD__(v22, 1LL)) {
          goto LABEL_41;
        }
        if (v16 >= v34) {
          goto LABEL_35;
        }
        SInt32 v21 = v35[v16];
        ++v22;
        if (v21) {
          goto LABEL_25;
        }
      }
    }

    uint64_t v16 = v22;
    goto LABEL_25;
  }

  swift_release(v13);
  uint64_t v31 = 1LL << *(_BYTE *)(v13 + 32);
  if (v31 > 63) {
    bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v34 = -1LL << v31;
  }
  uint64_t v7 = v33;
  *(void *)(v13 + 16) = 0LL;
LABEL_29:
  SecTrustResultType result = swift_release(v13);
  void *v7 = v15;
  return result;
}

    uint64_t v19 = (v27 - 1) & v27;
    uint64_t v25 = __clz(__rbit64(v27)) + (v22 << 6);
LABEL_26:
    uint64_t v29 = *(void *)(v10 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v12, *(void *)(v13 + 48) + v29 * v25, v9);
    uint64_t v30 = *(void *)(v15 + 40);
    uint64_t v31 = sub_100183F14(v43, v42, v44);
    SecTrustResultType result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v9, v31);
    uint64_t v32 = -1LL << *(_BYTE *)(v15 + 32);
    uint64_t v33 = result & ~v32;
    uint64_t v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v20 + 8 * (v33 >> 6))) != 0)
    {
      uint64_t v23 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v20 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v35 = 0;
      id v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        uint64_t v37 = v34 == v36;
        if (v34 == v36) {
          uint64_t v34 = 0LL;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v20 + 8 * v34);
      }

      while (v38 == -1);
      uint64_t v23 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
    SecTrustResultType result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v10 + 32))( *(void *)(v15 + 48) + v23 * v29,  v12,  v9);
    ++*(void *)(v15 + 16);
  }

  uint64_t v28 = v26 + 3;
  if (v28 >= v41)
  {
LABEL_35:
    SecTrustResultType result = swift_release_n(v13, 2LL);
    uint64_t v7 = v39;
    goto LABEL_37;
  }

  uint64_t v27 = *(void *)(v40 + 8 * v28);
  if (v27)
  {
    uint64_t v22 = v28;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v22 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v22 >= v41) {
      goto LABEL_35;
    }
    uint64_t v27 = *(void *)(v40 + 8 * v22);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }

    id v13 = (v21 - 1) & v21;
    uint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    uint64_t v23 = *(void *)(v35 + 72);
    sub_1001A4B84(*(void *)(v7 + 48) + v23 * v19, (uint64_t)v6, type metadata accessor for SDAirDropDiscoveredEndpoint);
    Hasher.init(_seed:)(v36);
    sub_10020DC2C();
    SecTrustResultType result = Hasher._finalize()();
    uint64_t v24 = -1LL << *(_BYTE *)(v9 + 32);
    uint64_t v25 = result & ~v24;
    CFNumberRef v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v14 + 8 * (v25 >> 6))) != 0)
    {
      uint64_t v17 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v14 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        uint64_t v29 = v26 == v28;
        if (v26 == v28) {
          CFNumberRef v26 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v26);
      }

      while (v30 == -1);
      uint64_t v17 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
    SecTrustResultType result = sub_1001A4B40( (uint64_t)v6,  *(void *)(v9 + 48) + v17 * v23,  type metadata accessor for SDAirDropDiscoveredEndpoint);
    ++*(void *)(v9 + 16);
  }

  uint64_t v22 = v20 + 3;
  if (v22 >= v34)
  {
LABEL_35:
    SecTrustResultType result = swift_release_n(v7, 2LL);
    uint64_t v2 = v32;
    goto LABEL_37;
  }

  SInt32 v21 = *(void *)(v33 + 8 * v22);
  if (v21)
  {
    uint64_t v16 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v16 >= v34) {
      goto LABEL_35;
    }
    SInt32 v21 = *(void *)(v33 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

  SInt32 v21 = 2;
  SecTrustResultType result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v21,  1046LL,  0);
  __break(1u);
  return result;
}

    __break(1u);
LABEL_26:
    SecTrustResultType result = swift_bridgeObjectRelease(v8);
LABEL_27:
    uint64_t v25 = a1[3];
    if (v25 < 2) {
      return (uint64_t)a1;
    }
    CFNumberRef v26 = v25 >> 1;
    uint64_t v24 = __OFSUB__(v26, v1);
    uint64_t v27 = v26 - v1;
    if (!v24)
    {
      a1[2] = v27;
      return (uint64_t)a1;
    }

    goto LABEL_33;
  }

  __break(1u);
  return result;
}

void sub_10004473C(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 184LL);
  if (v2)
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 lastDisconnectError]);
    id v5 = (id)v3;
    if (dword_1006417A0 <= 40)
    {
      if (dword_1006417A0 != -1 || (int v4 = _LogCategory_Initialize(&dword_1006417A0, 40LL), v3 = (uint64_t)v5, v4))
      {
        LogPrintF( &dword_1006417A0,  "-[SDSetupAgent observeValueForKeyPath:ofObject:change:context:]_block_invoke",  40LL,  "TTF: VPN changed: %{error}\n",  v3);
        uint64_t v3 = (uint64_t)v5;
      }
    }

    [*(id *)(a1 + 32) _repairVPNError:v3];
  }

void sub_100044870(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:*(void *)(a1 + 40)]);

  if (v2)
  {
    if (dword_1006417A0 <= 50
      && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 50LL)))
    {
      uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) description]);
      LogPrintF( &dword_1006417A0,  "-[SDSetupAgent proximityDeviceDidTrigger:]_block_invoke",  50LL,  "#ni_estimator deviceslist: %@",  v3);
    }

    if (_os_feature_enabled_impl("Sharing", "ni_estimator"))
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:*(void *)(a1 + 40)]);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 bleDevice]);
      [v7 setTriggered:1];
    }

    if (dword_1006417A0 <= 50
      && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 50LL)))
    {
      LogPrintF( &dword_1006417A0,  "-[SDSetupAgent proximityDeviceDidTrigger:]_block_invoke",  50LL,  "#ni_estimator delegate triggered for device: %@",  *(void *)(a1 + 40));
    }

    id v9 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:*(void *)(a1 + 40)]);
    if ([v9 deviceActionType] == 5)
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v9 bleDevice]);
      if (v8) {
        [*(id *)(a1 + 32) _watchFound:v8];
      }
    }

    else
    {
      [*(id *)(a1 + 32) _deviceFound:v9];
    }

    goto LABEL_20;
  }

  if (dword_1006417A0 <= 50 && (dword_1006417A0 != -1 || _LogCategory_Initialize(&dword_1006417A0, 50LL)))
  {
    id v9 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) description]);
    id v4 = [v9 UTF8String];
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) description]);
    LogPrintF( &dword_1006417A0,  "-[SDSetupAgent proximityDeviceDidTrigger:]_block_invoke",  50LL,  "#ni_estimator SDSetup device: %s not of interest. _devices: %@",  v4,  v5);

LABEL_20:
  }

void sub_100044B68(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", @"com.apple.Home://a/s?n=Test"));
  if (v2)
  {
    uint64_t v3 = v2;
    [*(id *)(a1 + 32) _uiStartHomeKitDeviceDetectedWithURL:v2];
    uint64_t v2 = v3;
  }
}

void sub_100044C80(uint64_t a1)
{
  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___SFDevice);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  -[SFDevice setIdentifier:](v3, "setIdentifier:", v2);

  [*(id *)(a1 + 32) _uiStartWithDevice:v3 viewControllerName:@"NFCTagReaderMainController" xpcEndpoint:0 label:@"NFCUI" unlessApps:0 extraInfo:0];
}

void sub_100044E5C(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  uint64_t v3 = &stru_1005E3958;
  if (a1[6]) {
    uint64_t v3 = (const __CFString *)a1[6];
  }
  id v5 = @"testParams";
  id v6 = v3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v6,  &v5,  1LL));
  [v1 _uiStartPair:v2 extraInfo:v4];
}

id sub_100044F84(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _pinPairHandleShowPIN:*(void *)(a1 + 40)];
}

id sub_100044FE8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _pinPairHandleHidePIN];
}

id sub_1000451AC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _uiStartRepair:*(void *)(a1 + 40) flags:0];
}

void sub_100045640(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  uint64_t v3 = &stru_1005E3958;
  if (a1[6]) {
    uint64_t v3 = (const __CFString *)a1[6];
  }
  id v5 = @"testParams";
  id v6 = v3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v6,  &v5,  1LL));
  [v1 _uiStartSetupB238:v2 extraInfo:v4];
}

id sub_100045A24(uint64_t a1)
{
  return [*(id *)(a1 + 32) _uiStartSetupiOS:*(void *)(a1 + 40) autoStart:0];
}

id sub_100045C34(uint64_t a1)
{
  return [*(id *)(a1 + 32) _uiStartWiFiPasswordSharing:*(void *)(a1 + 40)];
}

id sub_100045D6C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _uiStartSetupWatch:*(void *)(a1 + 40)];
}

id sub_100046004(uint64_t a1)
{
  return [*(id *)(a1 + 32) _uiStartSetupWHA:*(void *)(a1 + 40)];
}

void sub_100046168(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  uint64_t v3 = &stru_1005E3958;
  if (a1[6]) {
    uint64_t v3 = (const __CFString *)a1[6];
  }
  id v5 = @"testParams";
  id v6 = v3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v6,  &v5,  1LL));
  [v1 _uiStartAppleTVSetup:v2 extraInfo:v4];
}

void sub_10004636C(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  uint64_t v3 = &stru_1005E3958;
  if (a1[6]) {
    uint64_t v3 = (const __CFString *)a1[6];
  }
  id v5 = @"testParams";
  id v6 = v3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v6,  &v5,  1LL));
  [v1 _uiStartTVLatencySetup:v2 extraInfo:v4 forActionType:25];
}

void sub_100046574(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  uint64_t v3 = &stru_1005E3958;
  if (a1[6]) {
    uint64_t v3 = (const __CFString *)a1[6];
  }
  id v5 = @"testParams";
  id v6 = v3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v6,  &v5,  1LL));
  [v1 _uiStartTVLatencySetup:v2 extraInfo:v4 forActionType:30];
}

id sub_100046700(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _uiStartProxCardKitTest:*(void *)(a1 + 40) extraInfo:0];
}

Class sub_100046898()
{
  if (qword_100656D90 != -1) {
    dispatch_once(&qword_100656D90, &stru_1005CBC90);
  }
  Class result = objc_getClass("NRPairedDeviceRegistry");
  qword_100656D88 = (uint64_t)result;
  off_100641810 = (uint64_t (*)())sub_1000468F4;
  return result;
}

id sub_1000468F4()
{
  return (id)qword_100656D88;
}

void sub_100046900(id a1)
{
  qword_100656D98 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry", 2);
}

id sub_100046928()
{
  if (qword_100656D90 != -1) {
    dispatch_once(&qword_100656D90, &stru_1005CBC90);
  }
  uint64_t v0 = (id *)dlsym((void *)qword_100656D98, "NRDevicePropertyIsArchived");
  if (v0) {
    objc_storeStrong((id *)&qword_100656D58, *v0);
  }
  off_100641818 = (uint64_t (*)())sub_1000469A0;
  return (id)qword_100656D58;
}

id sub_1000469A0()
{
  return (id)qword_100656D58;
}

id sub_1000469AC()
{
  if (qword_100656D90 != -1) {
    dispatch_once(&qword_100656D90, &stru_1005CBC90);
  }
  uint64_t v0 = (id *)dlsym((void *)qword_100656D98, "NRDevicePropertyMigrationConfirmed");
  if (v0) {
    objc_storeStrong((id *)&qword_100656D60, *v0);
  }
  off_100641820 = (uint64_t (*)())sub_100046A24;
  return (id)qword_100656D60;
}

id sub_100046A24()
{
  return (id)qword_100656D60;
}

id sub_100046A30()
{
  if (qword_100656D90 != -1) {
    dispatch_once(&qword_100656D90, &stru_1005CBC90);
  }
  uint64_t v0 = (id *)dlsym((void *)qword_100656D98, "_NRDevicePropertyBluetoothIdentifier");
  if (v0) {
    objc_storeStrong((id *)&qword_100656D50, *v0);
  }
  off_100641828 = (uint64_t (*)())sub_100046AA8;
  return (id)qword_100656D50;
}

id sub_100046AA8()
{
  return (id)qword_100656D50;
}

Class sub_100046AB4()
{
  if (qword_100656D90 != -1) {
    dispatch_once(&qword_100656D90, &stru_1005CBC90);
  }
  Class result = objc_getClass("NRMigrator");
  qword_100656DA0 = (uint64_t)result;
  off_100641830 = (uint64_t (*)())sub_100046B10;
  return result;
}

id sub_100046B10()
{
  return (id)qword_100656DA0;
}

Class sub_100046B1C()
{
  if (qword_100656DB0 != -1) {
    dispatch_once(&qword_100656DB0, &stru_1005CBCB0);
  }
  Class result = objc_getClass("PBSSystemServiceConnection");
  qword_100656DA8 = (uint64_t)result;
  off_100641838 = (uint64_t (*)())sub_100046B78;
  return result;
}

id sub_100046B78()
{
  return (id)qword_100656DA8;
}

void sub_100046B84(id a1)
{
  qword_100656DB8 = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/PineBoardServices.framework/PineBoardServices",  2);
}

id sub_100046BAC()
{
  if (qword_100656DB0 != -1) {
    dispatch_once(&qword_100656DB0, &stru_1005CBCB0);
  }
  uint64_t v0 = (id *)dlsym((void *)qword_100656DB8, "PBSMediaRemoteServiceDialogOptionMessageKey");
  if (v0) {
    objc_storeStrong((id *)&qword_100656D68, *v0);
  }
  off_100641840 = (uint64_t (*)())sub_100046C24;
  return (id)qword_100656D68;
}

id sub_100046C24()
{
  return (id)qword_100656D68;
}

id sub_100046C30()
{
  if (qword_100656DB0 != -1) {
    dispatch_once(&qword_100656DB0, &stru_1005CBCB0);
  }
  uint64_t v0 = (id *)dlsym((void *)qword_100656DB8, "PBSMediaRemoteServiceDialogOptionPINKey");
  if (v0) {
    objc_storeStrong((id *)&qword_100656D70, *v0);
  }
  off_100641848 = (uint64_t (*)())sub_100046CA8;
  return (id)qword_100656D70;
}

id sub_100046CA8()
{
  return (id)qword_100656D70;
}

id sub_100046CB4()
{
  if (qword_100656DB0 != -1) {
    dispatch_once(&qword_100656DB0, &stru_1005CBCB0);
  }
  uint64_t v0 = (id *)dlsym((void *)qword_100656DB8, "PBSMediaRemoteServiceDialogOptionTimeoutKey");
  if (v0) {
    objc_storeStrong((id *)&qword_100656D78, *v0);
  }
  off_100641850 = (uint64_t (*)())sub_100046D2C;
  return (id)qword_100656D78;
}

id sub_100046D2C()
{
  return (id)qword_100656D78;
}

id sub_100046D38()
{
  if (qword_100656DB0 != -1) {
    dispatch_once(&qword_100656DB0, &stru_1005CBCB0);
  }
  uint64_t v0 = (id *)dlsym((void *)qword_100656DB8, "PBSMediaRemoteServiceDialogOptionTitleKey");
  if (v0) {
    objc_storeStrong((id *)&qword_100656D80, *v0);
  }
  off_100641858 = (uint64_t (*)())sub_100046DB0;
  return (id)qword_100656D80;
}

id sub_100046DB0()
{
  return (id)qword_100656D80;
}

Class sub_100046DBC()
{
  if (qword_100656DC8 != -1) {
    dispatch_once(&qword_100656DC8, &stru_1005CBCD0);
  }
  Class result = objc_getClass("NEVPNConnection");
  qword_100656DC0 = (uint64_t)result;
  off_100641860 = (uint64_t (*)())sub_100046E18;
  return result;
}

id sub_100046E18()
{
  return (id)qword_100656DC0;
}

void sub_100046E24(id a1)
{
  qword_100656DD0 = (uint64_t)dlopen("/System/Library/Frameworks/NetworkExtension.framework/NetworkExtension", 2);
}

Class sub_100046E4C()
{
  if (qword_100656DE0 != -1) {
    dispatch_once(&qword_100656DE0, &stru_1005CBCF0);
  }
  Class result = objc_getClass("FLFollowUpController");
  qword_100656DD8 = (uint64_t)result;
  off_100641868 = (uint64_t (*)())sub_100046EA8;
  return result;
}

id sub_100046EA8()
{
  return (id)qword_100656DD8;
}

void sub_100046EB4(id a1)
{
  qword_100656DE8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CoreFollowUp.framework/CoreFollowUp", 2);
}

id sub_100046EDC()
{
  if (qword_100656DF0 != -1) {
    dispatch_once(&qword_100656DF0, &stru_1005CBD10);
  }
  uint64_t v0 = (id *)dlsym((void *)qword_100656DF8, "HMDeviceSetupFollowupIdentifier");
  if (v0) {
    objc_storeStrong((id *)&qword_100656D48, *v0);
  }
  off_100641870 = (uint64_t (*)())sub_100046F54;
  return (id)qword_100656D48;
}

id sub_100046F54()
{
  return (id)qword_100656D48;
}

void sub_100046F60(id a1)
{
  qword_100656DF8 = (uint64_t)dlopen("/System/Library/Frameworks/HomeKit.framework/HomeKit", 2);
}

Class sub_100046F88()
{
  if (qword_100656E08 != -1) {
    dispatch_once(&qword_100656E08, &stru_1005CBD30);
  }
  Class result = objc_getClass("SSAccountStore");
  qword_100656E00 = (uint64_t)result;
  off_100641878 = (uint64_t (*)())sub_100046FE4;
  return result;
}

id sub_100046FE4()
{
  return (id)qword_100656E00;
}

void sub_100046FF0(id a1)
{
  qword_100656E10 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/StoreServices.framework/StoreServices", 2);
}

Class sub_100047018()
{
  if (qword_100656E20 != -1) {
    dispatch_once(&qword_100656E20, &stru_1005CBD50);
  }
  Class result = objc_getClass("AISRepairController");
  qword_100656E18 = (uint64_t)result;
  off_100641880 = (uint64_t (*)())sub_100047074;
  return result;
}

id sub_100047074()
{
  return (id)qword_100656E18;
}

void sub_100047080(id a1)
{
  qword_100656E28 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/AppleIDSetup.framework/AppleIDSetup", 2);
}

Class sub_1000470A8()
{
  if (qword_100656E20 != -1) {
    dispatch_once(&qword_100656E20, &stru_1005CBD50);
  }
  Class result = objc_getClass("AISRepairContext");
  qword_100656E30 = (uint64_t)result;
  off_100641888 = (uint64_t (*)())sub_100047104;
  return result;
}

id sub_100047104()
{
  return (id)qword_100656E30;
}

void sub_100047450(uint64_t a1)
{
  uint64_t v2 = daemon_log(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_10004D200(a1, v3, v4, v5, v6, v7, v8, v9);
  }
}

uint64_t sub_100047B2C(uint64_t a1)
{
  return IOPMAssertionRelease(*(_DWORD *)(a1 + 32));
}

LABEL_40:
          uint64_t v30 = 0LL;
          goto LABEL_46;
        }

        uint64_t v39 = airdrop_log(v31);
        uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
          sub_10004D380();
        }
      }

      else
      {
        id v36 = CFEqual(v16, @"Upload");
        if ((_DWORD)v36)
        {
          objc_storeStrong((id *)&self->_uploadResponse, a5);
          uint64_t v38 = airdrop_log(v37);
          SInt32 v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(-[SDAirDropClient personID](self, "personID"));
            LODWORD(v41) = 138412290;
            *(void *)((char *)&v41 + 4) = v22;
            uint64_t v23 = "Got Upload response from %@";
            goto LABEL_39;
          }

          goto LABEL_40;
        }

        uint64_t v40 = airdrop_log(v36);
        uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
          sub_10004D354();
        }
      }
    }

    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSPOSIXErrorDomain,  94LL,  0LL));
LABEL_46:
    CFRelease(v16);
    if (v30) {
      goto LABEL_29;
    }
    goto LABEL_47;
  }

  if (v11 <= 499)
  {
    if (v11 != 401)
    {
      if (v11 != 417) {
        goto LABEL_20;
      }
      goto LABEL_12;
    }

    -[SDAirDropClient notifyClientForEvent:withProperty:](self, "notifyClientForEvent:withProperty:", 4LL, 0LL);
LABEL_47:
    v10[2](v10, 1LL);
    goto LABEL_48;
  }

  if (v11 != 500)
  {
    if (v11 != 507)
    {
LABEL_20:
      CFNumberRef v26 = airdrop_log(v11);
      uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        sub_10004D2C8();
      }

      uint64_t v24 = NSPOSIXErrorDomain;
      uint64_t v25 = 100LL;
      goto LABEL_27;
    }
}

      CFRelease(v9);
      CFRelease(v10);

      if (v33 == (id)++v7)
      {
        uint64_t v24 = [obj countByEnumeratingWithState:&v37 objects:v41 count:16];
        uint64_t v33 = v24;
        if (!v24)
        {
LABEL_44:

          uint64_t v4 = v25;
          goto LABEL_45;
        }

        goto LABEL_11;
      }
    }
  }

              uint64_t v5 = 1;
              goto LABEL_41;
            }

            uint64_t v16 = [v8 containsString:@"Mac"];

            if ((v16 & 1) != 0) {
              goto LABEL_28;
            }
          }

          else
          {
          }

      __break(1u);
LABEL_41:
      id v13 = sub_10018BC54(0LL, *((void *)v13 + 2) + 1LL, 1, v13);
      goto LABEL_29;
    }

    uint64_t v5 = v18;
LABEL_20:
    uint64_t v11 = (v17 - 1) & v17;
  }

    __int16 v47 = 0LL;
    goto LABEL_41;
  }

  __break(1u);
  return result;
}

  v111 = v4[17];
  v112 = v4[18];
  v113 = sub_10019A708(v20, v111);
  v114 = *(void *)(v111 - 8);
  __chkstk_darwin(v113);
  v116 = (char *)&v129 - ((v115 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v114 + 16))(v116);
  v117 = (uint64_t)v141;
  (*(void (**)(uint64_t, uint64_t))(v112 + 24))(v111, v112);
  (*(void (**)(char *, uint64_t))(v114 + 8))(v116, v111);
  sub_10019A6C4(v117, (uint64_t)&v151);
  sub_1003482C4(v117);
  sub_10019A708(&v151, v153);
  v118 = v4[17];
  v119 = v4[18];
  v120 = sub_10019A708(v20, v118);
  v121 = *(void *)(v118 - 8);
  __chkstk_darwin(v120);
  v123 = (char *)&v129 - ((v122 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v121 + 16))(v123);
  v124 = (uint64_t)v136;
  (*(void (**)(uint64_t, uint64_t))(v119 + 24))(v118, v119);
  (*(void (**)(char *, uint64_t))(v121 + 8))(v123, v118);
  v125 = v139;
  v126 = (uint64_t)v138;
  v127 = v140;
  (*(void (**)(char *, uint64_t, uint64_t))(v139 + 16))(v138, v124 + *(int *)(v137 + 24), v140);
  sub_1003482C4(v124);
  sub_100479124(v126, v143, v142, a3);
  (*(void (**)(uint64_t, uint64_t))(v125 + 8))(v126, v127);
  return sub_10018709C(&v151);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

        uint64_t v31 = 0LL;
        uint64_t v33 = 1;
        goto LABEL_58;
      }

      __break(1u);
      goto LABEL_83;
    }

    uint64_t v31 = (LOBYTE(v22._countAndFlagsBits) - 48);
    if (v27 != 1)
    {
      uint64_t v45 = v27 - 2;
      if (v45)
      {
        CFIndex v46 = (unsigned __int8 *)v72 + 2;
        while (1)
        {
          __int16 v47 = *v46 - 48;
          if (v47 > 9) {
            goto LABEL_40;
          }
          id v48 = 10 * v31;
          uint64_t v31 = v48 + v47;
          uint64_t v33 = 0;
          ++v46;
          if (!--v45) {
            goto LABEL_58;
          }
        }
      }
    }

  __break(1u);
  return result;
}

void sub_100048C6C(uint64_t a1)
{
  uint64_t v2 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  *(void *)(a1 + 32),  kSFOperationBytesCopiedKey);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  *(void *)(a1 + 40),  kSFOperationTimeRemainingKey);
  [*(id *)(a1 + 48) notifyClientForEvent:7 withProperty:v2];
}

void sub_100048D4C(uint64_t a1)
{
  uint64_t v2 = kSFOperationTotalBytesKey;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 216) objectForKeyedSubscript:kSFOperationTotalBytesKey]);
  uint64_t v4 = (uint64_t)[v3 longLongValue];

  if (!v4)
  {
    uint64_t v4 = 128LL;
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", 128LL));
    [*(id *)(*(void *)(a1 + 32) + 216) setObject:v5 forKeyedSubscript:v2];
  }

  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(dispatch_queue_s **)(v6 + 232);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100048F94;
  block[3] = &unk_1005CB2F8;
  void block[4] = v6;
  dispatch_async(v7, block);
  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v4 / 5));
  [v8 notifyClientOfBytesCopied:v9 timeRemaining:&off_1005F74C8];

  id v10 = *(void **)(a1 + 32);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", 2 * v4 / 5));
  [v10 notifyClientOfBytesCopied:v11 timeRemaining:&off_1005F74C8];

  id v12 = *(void **)(a1 + 32);
  id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", 3 * v4 / 5));
  [v12 notifyClientOfBytesCopied:v13 timeRemaining:&off_1005F74C8];

  uint64_t v14 = *(void **)(a1 + 32);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", 4 * v4 / 5));
  [v14 notifyClientOfBytesCopied:v15 timeRemaining:&off_1005F74E0];

  uint64_t v16 = *(void **)(a1 + 32);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v4));
  [v16 notifyClientOfBytesCopied:v17 timeRemaining:&off_1005F74E0];

  usleep(0x7A120u);
  uint64_t v18 = *(void *)(a1 + 32);
  uint64_t v19 = *(dispatch_queue_s **)(v18 + 232);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  _DWORD v20[2] = sub_100048FA4;
  v20[3] = &unk_1005CB2F8;
  v20[4] = v18;
  dispatch_async(v19, v20);
}

id sub_100048F94(uint64_t a1)
{
  return [*(id *)(a1 + 32) notifyClientForEvent:5 withProperty:0];
}

id sub_100048FA4(uint64_t a1)
{
  return [*(id *)(a1 + 32) notifyClientForEvent:9 withProperty:0];
}

id sub_100049078(uint64_t a1)
{
  uint64_t v2 = airdrop_log(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(_BYTE **)(a1 + 32);
    if (v4[64]) {
      uint64_t v5 = "discovery";
    }
    else {
      uint64_t v5 = "ask";
    }
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 personID]);
    int v8 = 136315394;
    uint64_t v9 = v5;
    __int16 v10 = 2112;
    uint64_t v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Retry %s request for %@", (uint8_t *)&v8, 0x16u);
  }

  return [*(id *)(a1 + 32) resolve];
}

uint64_t sub_100049870(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = airdrop_log(a1);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10004D654();
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10004A1A4(void *a1, char a2)
{
  uint64_t v4 = airdrop_log(a1);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  uint64_t v6 = v5;
  if ((a2 & 1) != 0)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      sub_10004D7D0((uint64_t)a1, v6);
    }

    if (a1[6]) {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSURLCredential credentialForTrust:](&OBJC_CLASS___NSURLCredential, "credentialForTrust:"));
    }
    else {
      uint64_t v7 = 0LL;
    }
    (*(void (**)(void))(a1[5] + 16LL))();
    int v8 = (void *)a1[4];
    if (v8[2]) {
      [v8 notifyClientForEvent:3 withProperty:0];
    }
  }

  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10004D85C((uint64_t)a1, v6);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

void sub_10004B4D8(uint64_t a1)
{
  uint64_t v2 = (void *)sub_10011488C(*(const __CFArray **)(*(void *)(a1 + 32) + 104LL));
  uint64_t v3 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  id v4 = *(id *)(*(void *)(a1 + 32) + 104LL);
  id v5 = [v4 countByEnumeratingWithState:&v24 objects:v29 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v25;
    while (2)
    {
      for (unint64_t i = 0LL; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v25 != v6) {
          objc_enumerationMutation(v4);
        }
        int v8 = *(const __CFURL **)(*((void *)&v24 + 1) + 8LL * (void)i);
        if ((objc_msgSend(*(id *)(*(void *)(a1 + 32) + 120), "containsObject:", v8, (void)v24) & 1) == 0)
        {
          uint64_t v9 = *(void *)(a1 + 32);
          __int128 v10 = *(_OWORD *)(v9 + 448);
          *(_OWORD *)buf = *(_OWORD *)(v9 + 432);
          *(_OWORD *)&uint8_t buf[16] = v10;
          if (!sub_100114F90(v8, buf))
          {
            uint64_t v11 = (const void *)sub_100115088(v8);
            if (v11)
            {
              id v12 = v11;
              id v13 = sub_100036584(-6, v11);
              id v5 = (id)objc_claimAutoreleasedReturnValue(v13);
              CFRelease(v12);
            }

            else
            {
              id v15 = sub_100036584(-5, 0LL);
              uint64_t v14 = objc_claimAutoreleasedReturnValue(v15);
              id v5 = (id)v14;
            }

            uint64_t v16 = airdrop_log(v14);
            uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
              sub_10004DA24();
            }

            goto LABEL_19;
          }
        }

        if ([*(id *)(*(void *)(a1 + 32) + 104) count] == (id)1) {
          [*(id *)(a1 + 32) generatePreviewForFileURL:v8];
        }
        [*(id *)(a1 + 32) appendFileURL:v8 withBase:v2 toItems:v3];
      }

      id v5 = [v4 countByEnumeratingWithState:&v24 objects:v29 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

void sub_10004BCDC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10004BD04(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained invalidate];
}

void sub_10004BFF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = airdrop_log(v3);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10004DB70();
    }

    [*(id *)(a1 + 32) notifyClientForEvent:10 withProperty:v4];
  }

  else
  {
    uint64_t v7 = *(void *)(a1 + 32);
    if (!*(_BYTE *)(v7 + 200) && *(_BYTE *)(v7 + 304))
    {
      int v8 = (void *)objc_claimAutoreleasedReturnValue(+[SDConnectedBrowser sharedBrowser](&OBJC_CLASS___SDConnectedBrowser, "sharedBrowser"));
      [v8 addAirDropPerson:*(void *)(*(void *)(a1 + 32) + 192)];

      *(_BYTE *)(*(void *)(a1 + 32) + 200LL) = 1;
      uint64_t v7 = *(void *)(a1 + 32);
    }

    uint64_t v9 = (void *)SFNodeCopyAppleID(*(void *)(v7 + 192));
    __int128 v10 = (void *)SFNodeCopyServiceName(*(void *)(*(void *)(a1 + 32) + 192LL));
    uint64_t v11 = (void *)SFNodeCopyComputerName(*(void *)(*(void *)(a1 + 32) + 192LL));
    if (v10) {
      [*(id *)(*(void *)(a1 + 32) + 216) setObject:v10 forKeyedSubscript:kSFOperationReceiverIDKey];
    }
    if (v11) {
      [*(id *)(*(void *)(a1 + 32) + 216) setObject:v11 forKeyedSubscript:kSFOperationReceiverComputerNameKey];
    }
    if (v9
      && (id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 168) verifiedIdentityForAppleID:v9]),
          v12,
          v12))
    {
      Name = (void *)SFNodeCopyLastName(*(void *)(*(void *)(a1 + 32) + 192LL));
      uint64_t v14 = (void *)SFNodeCopyFirstName(*(void *)(*(void *)(a1 + 32) + 192LL));
      id v15 = (void *)SFNodeCopyDisplayName(*(void *)(*(void *)(a1 + 32) + 192LL));
      if (Name) {
        [*(id *)(*(void *)(a1 + 32) + 216) setObject:Name forKeyedSubscript:kSFOperationReceiverLastNameKey];
      }
      if (v14) {
        [*(id *)(*(void *)(a1 + 32) + 216) setObject:v14 forKeyedSubscript:kSFOperationReceiverFirstNameKey];
      }
      if (v15) {
        [*(id *)(*(void *)(a1 + 32) + 216) setObject:v15 forKeyedSubscript:kSFOperationReceiverCompositeNameKey];
      }
      [*(id *)(*(void *)(a1 + 32) + 216) setObject:&__kCFBooleanTrue forKeyedSubscript:kSFOperationVerifiableIdentityKey];
    }

    else
    {
      [*(id *)(*(void *)(a1 + 32) + 216) setObject:&__kCFBooleanFalse forKeyedSubscript:kSFOperationVerifiableIdentityKey];
    }

    *(_BYTE *)(*(void *)(a1 + 32) + 256LL) = sub_100035FBC();
    if (*(_BYTE *)(a1 + 40)) {
      [*(id *)(a1 + 32) startSendingClassroom];
    }
    [*(id *)(a1 + 32) removeFileIconsFromProperties];
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 216) objectForKeyedSubscript:kSFOperationFilesKey]);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 216) objectForKeyedSubscript:kSFOperationItemsKey]);
    id v18 = [v16 count];
    id v19 = v18;
    if (!v18)
    {
      id v18 = [v17 count];
      id v19 = v18;
    }

    uint64_t v20 = airdrop_log(v18);
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      uint64_t v22 = *(void *)(*(void *)(a1 + 32) + 216LL);
      int v23 = 138412802;
      __int128 v24 = v11;
      __int16 v25 = 2048;
      id v26 = v19;
      __int16 v27 = 2112;
      uint64_t v28 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "startSending to: %@, validated %lu airdrop items. properties: %@",  (uint8_t *)&v23,  0x20u);
    }

    if (!*(_BYTE *)(a1 + 40)) {
      [*(id *)(a1 + 32) send];
    }
  }
}

void sub_10004C694(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = airdrop_log(v3);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10004DC10(a1, (uint64_t)v4, v6);
    }

    [*(id *)(a1 + 40) notifyClientForEvent:10 withProperty:v4];
  }

  else
  {
    uint64_t v7 = (void *)SFNodeCopyComputerName(*(void *)(*(void *)(a1 + 40) + 192LL));
    uint64_t v8 = airdrop_log(v7);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      id v10 = [*(id *)(*(void *)(a1 + 40) + 104) count];
      uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 104LL);
      int v12 = 134218498;
      id v13 = v10;
      __int16 v14 = 2112;
      id v15 = v7;
      __int16 v16 = 2112;
      uint64_t v17 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Starting to send %lu files to %@, fileURLs: %@",  (uint8_t *)&v12,  0x20u);
    }

    [*(id *)(a1 + 40) startSending];
  }
}

void sub_10004CDD0(uint64_t a1)
{
  id v2 = sub_100033F4C();
  id v3 = (dispatch_object_s *)objc_claimAutoreleasedReturnValue(v2);
  dispatch_resume(v3);
}

id sub_10004CE14(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 168) airDropTransactionEnd:1];
}

void sub_10004D1BC(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_10004D1C8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

  ;
}

void sub_10004D200( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10004D268()
{
}

void sub_10004D2C8()
{
}

void sub_10004D328()
{
}

void sub_10004D354()
{
}

void sub_10004D380()
{
}

void sub_10004D3AC()
{
}

void sub_10004D3D8()
{
}

void sub_10004D438()
{
}

void sub_10004D498()
{
}

void sub_10004D4F8( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10004D560()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "SDAirDropClient: CFPropertyListCreateWithData returned invalid dictionary",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_10004D58C( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10004D5F4()
{
}

void sub_10004D654()
{
}

void sub_10004D680(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "SDAirDropClient: if_indextoname(%d) failed",  (uint8_t *)v2,  8u);
  sub_1000147C8();
}

void sub_10004D6F0(void *a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1 personID]);
  sub_10001C438();
  sub_10004D1BC( (void *)&_mh_execute_header,  a2,  v4,  "SDAirDropClient: intermediate certificate not available. Sending to %@ with no Apple ID certificate",  v5);

  sub_10004D1DC();
}

void sub_10004D770()
{
  sub_100014820( (void *)&_mh_execute_header,  v0,  v1,  "SDAirDropClient: authenticationMethod returned %@",  v2,  v3,  v4,  v5,  v6);
  sub_10001480C();
}

void sub_10004D7D0(uint64_t a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) personID]);
  sub_10001C438();
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "Validated Apple ID certificate of receiver %@",  v4,  0xCu);

  sub_10004D1DC();
}

void sub_10004D85C(uint64_t a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) personID]);
  sub_10001C438();
  sub_10004D1BC((void *)&_mh_execute_header, a2, v4, "Failed to validate Apple ID certificate of receiver %@", v5);

  sub_10004D1DC();
}

void sub_10004D8E0(void *a1, uint64_t a2, os_log_s *a3)
{
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1 name]);
  int v6 = 138412546;
  uint64_t v7 = v5;
  __int16 v8 = 2112;
  uint64_t v9 = a2;
  _os_log_error_impl( (void *)&_mh_execute_header,  a3,  OS_LOG_TYPE_ERROR,  "Bonjour resolve %@ failed (%@)",  (uint8_t *)&v6,  0x16u);
}

void sub_10004D98C()
{
}

void sub_10004D9F8()
{
}

void sub_10004DA24()
{
}

void sub_10004DA84()
{
}

void sub_10004DAE4()
{
}

void sub_10004DB44()
{
}

void sub_10004DB70()
{
}

void sub_10004DBE4()
{
}

void sub_10004DC10(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = [*(id *)(*(void *)(a1 + 40) + 104) count];
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 104LL);
  int v9 = 138413058;
  uint64_t v10 = v6;
  __int16 v11 = 2048;
  id v12 = v7;
  __int16 v13 = 2112;
  uint64_t v14 = v8;
  __int16 v15 = 2112;
  uint64_t v16 = a2;
  _os_log_error_impl( (void *)&_mh_execute_header,  a3,  OS_LOG_TYPE_ERROR,  "SDAirDropClient: coordinateAccessWithIntents(%@) for %lu files %@ failed %@",  (uint8_t *)&v9,  0x2Au);
}

void sub_10004E048(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___SDProximityController);
  uint64_t v2 = (void *)qword_100656E40;
  qword_100656E40 = (uint64_t)v1;
}

id sub_10004E330()
{
  if (qword_100656E50 != -1) {
    dispatch_once(&qword_100656E50, &stru_1005CBEB8);
  }
  return (id)qword_100656E48;
}

LABEL_4:
  return v4;
}

  id v26 = a12;
  if (v25)
  {
    uint64_t v38 = v25;
    uint64_t v39 = a11;
    uint64_t v34 = _NSConcreteStackBlock;
    uint64_t v35 = 1107296256LL;
    id v36 = sub_1001B9FE4;
    uint64_t v37 = &unk_1005D8F20;
    __int16 v27 = _Block_copy(&v34);
    swift_release(v39);
    uint64_t v28 = a14;
    if (!a12) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  __int16 v27 = 0LL;
  uint64_t v28 = a14;
  if (a12)
  {
LABEL_6:
    uint64_t v38 = a12;
    uint64_t v39 = a13;
    uint64_t v34 = _NSConcreteStackBlock;
    uint64_t v35 = 1107296256LL;
    id v36 = sub_1002C58BC;
    uint64_t v37 = &unk_1005D8EF8;
    id v26 = _Block_copy(&v34);
    swift_release(v39);
  }

  if ((v2 & 0xC000000000000001LL) != 0)
  {
    __int16 v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v2);
    *(void *)&uint64_t v14 = swift_bridgeObjectRelease((const char *)v2).n128_u64[0];
    id v7 = *(const char **)(v13 + OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_bundleID + 8);
    swift_bridgeObjectRetain(v7, v14);
    swift_unknownObjectRelease(v13);
  }

  else
  {
    if (!*(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      __break(1u);
      goto LABEL_27;
    }

    uint64_t v5 = (char *)*(id *)(v2 + 32);
    *(void *)&uint64_t v6 = swift_bridgeObjectRelease((const char *)v2).n128_u64[0];
    id v7 = *(const char **)&v5[OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_bundleID + 8];
    swift_bridgeObjectRetain(v7, v6);
  }

  if ((v2 & 0xC000000000000001LL) != 0)
  {
    __int16 v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v2);
    *(void *)&uint64_t v14 = swift_bridgeObjectRelease((const char *)v2).n128_u64[0];
    id v7 = *(const char **)(v13 + OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_bundleID + 8);
    swift_bridgeObjectRetain(v7, v14);
    swift_unknownObjectRelease(v13);
  }

  else
  {
    if (!*(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      __break(1u);
      goto LABEL_27;
    }

    uint64_t v5 = (char *)*(id *)(v2 + 32);
    *(void *)&uint64_t v6 = swift_bridgeObjectRelease((const char *)v2).n128_u64[0];
    id v7 = *(const char **)&v5[OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_bundleID + 8];
    swift_bridgeObjectRetain(v7, v6);
  }

id sub_10004F8D4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _runSession];
}

void sub_10004FDAC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.sharing", "ProximityController");
  uint64_t v2 = (void *)qword_100656E48;
  qword_100656E48 = (uint64_t)v1;
}

uint64_t SDUnlockResetReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 28) |= 4u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_43;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_45;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_43:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_45:
        uint64_t v29 = 24LL;
        goto LABEL_54;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1LL || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_49;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_49:
        uint64_t v29 = 20LL;
        goto LABEL_54;
      case 3u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 28) |= 1u;
        break;
      case 4u:
        uint64_t String = PBReaderReadString(a2);
        uint64_t v27 = objc_claimAutoreleasedReturnValue(String);
        uint64_t v28 = *(void **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 96), 8) = v27;

        continue;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v24 == -1LL || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v25 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
      v14 |= (unint64_t)(v25 & 0x7F) << v22;
      if ((v25 & 0x80) == 0) {
        goto LABEL_51;
      }
      v22 += 7;
      BOOL v9 = v23++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_53;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_51:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v14) = 0;
    }
LABEL_53:
    uint64_t v29 = 16LL;
LABEL_54:
    *(_DWORD *)(a1 + v29) = v14;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_100050D60(uint64_t a1, void *a2)
{
  return [a2 updatedTransfer:*(void *)(a1 + 32)];
}

id sub_100050DE8(uint64_t a1, void *a2)
{
  return _[a2 removedTransfer:*(void *)(a1 + 32)];
}

void sub_100051E24(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  char v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "transferIdentifierToTransfer", 0));
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 allValues]);

  id v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v11;
    do
    {
      BOOL v9 = 0LL;
      do
      {
        if (*(void *)v11 != v8) {
          objc_enumerationMutation(v5);
        }
        [v3 updatedTransfer:*(void *)(*((void *)&v10 + 1) + 8 * (void)v9)];
        BOOL v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v7);
  }
}

void sub_1000521D4(uint64_t a1, uint64_t a2)
{
  char v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dispatchQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10005226C;
  block[3] = &unk_1005CBF30;
  unsigned int v5 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  uint64_t v8 = a2;
  id v7 = v5;
  dispatch_async(v4, block);
}

id sub_10005226C(uint64_t a1)
{
  return [*(id *)(a1 + 32) setTransferState:*(void *)(a1 + 48) forTransfer:*(void *)(a1 + 40) shouldNotify:1];
}

void sub_100052280(uint64_t a1, char a2, char a3, char a4)
{
  uint64_t v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dispatchQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100052330;
  block[3] = &unk_1005CBFA8;
  char v12 = a2;
  BOOL v9 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v11 = v9;
  char v13 = a3;
  char v14 = a4;
  dispatch_async(v8, block);
}

void sub_100052330(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    uint64_t v2 = *(void **)(a1 + 32);
    uint64_t v3 = *(void *)(a1 + 40);
    if (*(_BYTE *)(a1 + 49))
    {
      [v2 setTransferState:7 forTransfer:v3 shouldNotify:1];
      dispatch_time_t v4 = dispatch_time(0LL, 5000000000LL);
      unsigned int v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dispatchQueue]);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10005243C;
      block[3] = &unk_1005CBF80;
      id v6 = *(void **)(a1 + 40);
      void block[4] = *(void *)(a1 + 32);
      id v8 = v6;
      char v9 = *(_BYTE *)(a1 + 50);
      dispatch_after(v4, v5, block);
    }

    else
    {
      [v2 setTransferState:8 forTransfer:v3 shouldNotify:1 shouldCleanup:*(unsigned __int8 *)(a1 + 50)];
    }
  }

  else
  {
    _[*(id *)(a1 + 32) handlerFailedForTransfer:*(void *)(a1 + 40)];
  }

id sub_10005243C(uint64_t a1)
{
  return [*(id *)(a1 + 32) setTransferState:8 forTransfer:*(void *)(a1 + 40) shouldNotify:1 shouldCleanup:*(unsigned __int8 *)(a1 + 48)];
}

void sub_100052F60(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v11 = a2;
  id v7 = a3;
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@/%@", v11, v7));
  char v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v8]);

  if (v9)
  {
    id v10 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v8]);
    [v10 incrementCount];
  }

  else
  {
    id v10 = [[SFAirDropTransferItem alloc] initWithType:v11 subtype:v7 isFile:a4];
    [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:v8];
  }
}

void sub_10005319C()
{
}

void sub_1000531FC()
{
}

void sub_10005325C()
{
}

void sub_1000532BC()
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([v0 objectForKeyedSubscript:kSFOperationErrorKey]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 localizedDescription]);
  sub_100053178();
  sub_1000241C0((void *)&_mh_execute_header, v3, v4, "Error event %@ for recordID %@", v5, v6, v7, v8, v9);

  sub_1000241EC();
}

void sub_100053354()
{
}

void sub_1000533B4(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Unhandled user response", v1, 2u);
}

void sub_1000533F4()
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([v0 identifier]);
  sub_100053178();
  sub_1000241C0( (void *)&_mh_execute_header,  v2,  v3,  "No handler for transfer with id %@, ignore action triggered event for action %@",  v4,  v5,  v6,  v7,  v8);

  sub_1000241EC();
}

void sub_100053470(uint64_t a1, void *a2)
{
  uint8_t v8 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  sub_1000241C0((void *)&_mh_execute_header, v2, v3, "Handler %@ failed for transfer with id %@", v4, v5, v6, v7, 2u);

  sub_1000241EC();
}

void sub_100053504()
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 identifier]);
  uint64_t v3 = SFAirDropTransferFailureReasonToString(v0);
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000241C0((void *)&_mh_execute_header, v4, v5, "Transfer with id %@ failed with reason %@", v6, v7, v8, v9, 2u);

  sub_1000241EC();
}

void sub_1000535A4()
{
  uint64_t v3 = v2;
  uint64_t v4 = SFAirDropTransferStateToString([v2 transferState]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  uint64_t v6 = SFAirDropTransferStateToString(v1);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
  int v9 = 138412802;
  id v10 = v5;
  __int16 v11 = 2112;
  char v12 = v7;
  __int16 v13 = 2112;
  char v14 = v8;
  _os_log_debug_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_DEBUG,  "Set transfer state %@ -> %@ for transfer with id %@",  (uint8_t *)&v9,  0x20u);
}

void sub_100053684()
{
}

void sub_100053724(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
  unsigned int v2 = [v1 enableContinuity];

  if (v2)
  {
    uint64_t v3 = objc_alloc_init(&OBJC_CLASS___SDActivityAdvertiser);
    uint64_t v4 = (void *)qword_100656E58;
    qword_100656E58 = (uint64_t)v3;
  }

void sub_1000541B0(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  _DWORD v2[2] = sub_10005421C;
  v2[3] = &unk_1005CC0A0;
  uint64_t v1 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  [v1 _enumerateRemoteObjectProxiesUsingBlock:v2];
}

id sub_10005421C(uint64_t a1, void *a2)
{
  return _[a2 pairedDevicesChanged:*(void *)(a1 + 32)];
}

id sub_100054674(void *a1, void *a2)
{
  return [a2 didSendPayloadForActivityIdentifier:a1[4] toDevice:a1[5] error:a1[6]];
}

id sub_100054770(void *a1, void *a2)
{
  return [a2 activityPayloadForAdvertisementPayload:a1[4] command:a1[5] requestedByDevice:a1[6] withCompletionHandler:a1[7]];
}

void sub_100054F70(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 32);
  id v2 = [*(id *)(a1 + 32) invalidateGoodbyeTimer];
  uint64_t v4 = handoff_log(v2, v3);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
    sub_100056810(v1, v5);
  }

  uint64_t v6 = objc_claimAutoreleasedReturnValue( +[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:]( &OBJC_CLASS___NSTimer,  "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:",  *(double *)(*v1 + 96LL)));
  uint64_t v7 = *(void **)(*v1 + 104LL);
  *(void *)(*v1 + 104LL) = v6;
}

void sub_100055368(uint64_t a1, uint64_t a2, _BYTE *a3, int a4)
{
  uint64_t v6 = *(_BYTE **)(a1 + 40);
  v6[3] = a2;
  v6[1] = *a3;
  id v6[2] = a3[1];
  uint64_t v7 = handoff_log(a1, a2);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = SFHexStringForData(*(void *)(a1 + 32));
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    __int16 v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  *(void *)(a1 + 40) + 4LL,  10LL));
    uint64_t v12 = SFHexStringForData(v11);
    __int16 v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    int v14 = 138412802;
    unint64_t v15 = v10;
    __int16 v16 = 2112;
    uint64_t v17 = v13;
    __int16 v18 = 1024;
    int v19 = a4;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "Encrypted (sharing flags + advertisementPayload): %@ => %@, counter %u",  (uint8_t *)&v14,  0x1Cu);
  }
}

void sub_100055660( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_10005577C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_100055878( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_100055A80( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void sub_100055BE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t sub_100055CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = handoff_log(a1, a2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = SFAdvertisementDescriptionFromPayloadData(*(void *)(a1 + 32));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    uint64_t v7 = SFCompactStringFromCollection(*(void *)(a1 + 40));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    *(_DWORD *)buf = 138412546;
    uint64_t v42 = v6;
    __int16 v43 = 2112;
    uint64_t v44 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Request to advertise %@ with options %@",  buf,  0x16u);
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:@"name"]);
  if (v9)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:@"name"]);
    __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 componentsSeparatedByString:@"-"]);

    if ((unint64_t)[v11 count] >= 5)
    {
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectAtIndexedSubscript:5]);
      *(_DWORD *)(*(void *)(a1 + 48) + 156) = [v12 intValue];
    }
  }

  unint64_t v13 = *(void *)(a1 + 32);
  unint64_t v14 = v13 | *(void *)(*(void *)(a1 + 48) + 160LL);
  unsigned int v15 = objc_msgSend((id)v13, "isEqual:");
  unint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 168LL);
  id v18 = [(id)v16 isEqual:v17];
  if (v14) {
    int v20 = v15;
  }
  else {
    int v20 = 1;
  }
  unsigned int v21 = v18 ^ 1;
  if (!(v16 | v17)) {
    unsigned int v21 = 0;
  }
  if (v20 == 1 && v21 == 0)
  {
    uint64_t v36 = handoff_log(v18, v19);
    uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Advertisement contents does not differ from current, continuing previous advertising",  buf,  2u);
    }

    goto LABEL_22;
  }

  [*(id *)(a1 + 48) invalidateGoodbyeTimer];
  *(_BYTE *)(*(void *)(a1 + 48) + 120LL) = 1;
  id v23 = [*(id *)(a1 + 32) copy];
  uint64_t v24 = *(void *)(a1 + 48);
  char v25 = *(void **)(v24 + 160);
  *(void *)(v24 + 160) = v23;

  id v26 = [*(id *)(a1 + 40) copy];
  uint64_t v27 = *(void *)(a1 + 48);
  uint64_t v28 = *(void **)(v27 + 168);
  *(void *)(v27 + 16_Block_object_dispose((const void *)(v1 - 96), 8) = v26;

  if (([*(id *)(a1 + 48) updateAdvertiser] & 1) == 0)
  {
    uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
    if (!-[os_log_s alwaysSendPayload](v31, "alwaysSendPayload"))
    {
LABEL_22:

      return (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16LL))( *(void *)(a1 + 56),  0LL,  v29,  v30);
    }

    uint64_t v32 = *(void *)(*(void *)(a1 + 48) + 160LL);

    if (v32)
    {
      id v33 = [*(id *)(*(void *)(a1 + 48) + 144) copy];
      uint64_t v34 = *(void **)(a1 + 48);
      uint64_t v35 = v34[20];
      v38[0] = _NSConcreteStackBlock;
      v38[1] = 3221225472LL;
      v38[2] = sub_100056010;
      v38[3] = &unk_1005CC160;
      id v39 = v33;
      id v40 = *(id *)(a1 + 32);
      uint64_t v31 = (os_log_s *)v33;
      [v34 activityPayloadForAdvertisementPayload:v35 command:0 requestedByDevice:0 withCompletionHandler:v38];

      goto LABEL_22;
    }
  }

  return (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16LL))( *(void *)(a1 + 56),  0LL,  v29,  v30);
}

void sub_100056010(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = (id)objc_claimAutoreleasedReturnValue( +[SDActivityPayloadManager sharedPayloadManager]( &OBJC_CLASS___SDActivityPayloadManager,  "sharedPayloadManager"));
  [v7 sendActivityPayloadWithAdvertisementData:*(void *)(a1 + 32) forAdvertisementPayload:*(void *)(a1 + 40) activityIdentifier:v6 activityPayload:v5];
}

void sub_100056100(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) appleID]);
  (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0LL);
}

void sub_1000561F0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) idsDeviceFromBTIdentifier:*(void *)(a1 + 40)]);
  uint64_t v3 = v2;
  if (v2)
  {
    id v4 = sub_1000854EC(v2);
    uint64_t v5 = objc_claimAutoreleasedReturnValue(v4);
    if (v5)
    {
      id v9 = (id)v5;
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[SDActivityEncryptionManager sharedEncryptionManager]( &OBJC_CLASS___SDActivityEncryptionManager,  "sharedEncryptionManager"));
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v9 uniqueID]);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 cachedDecryptionKeyForDeviceIdentifier:v7]);

      if (v8)
      {
        objc_msgSend(v9, "setValidKey:", objc_msgSend(v8, "isValidKey"));
        objc_msgSend(v9, "setKeyCounter:", objc_msgSend(v8, "lastUsedCounter"));
      }

      uint64_t v5 = (uint64_t)v9;
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  id v10 = (id)v5;
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100056368(uint64_t a1)
{
  unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allPeerBTIdentifiers]);
  id v3 = [v2 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v17;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v17 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(a1 + 32);
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v16 + 1) + 8 * (void)v6) UUIDString]);
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 idsDeviceFromBTIdentifier:v8]);

        if (v9)
        {
          id v10 = sub_1000854EC(v9);
          __int16 v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
          if (v11)
          {
            uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[SDActivityEncryptionManager sharedEncryptionManager]( &OBJC_CLASS___SDActivityEncryptionManager,  "sharedEncryptionManager"));
            unint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 uniqueID]);
            unint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v12 cachedDecryptionKeyForDeviceIdentifier:v13]);

            if (v14)
            {
              objc_msgSend(v11, "setValidKey:", objc_msgSend(v14, "isValidKey"));
              objc_msgSend(v11, "setKeyCounter:", objc_msgSend(v14, "lastUsedCounter"));
            }

            [v15 addObject:v11];
          }
        }

        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }

    while (v4);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_100056648()
{
  if (qword_100656E70 != -1) {
    dispatch_once(&qword_100656E70, &stru_1005CC1D0);
  }
  uint64_t v0 = (id *)dlsym((void *)qword_100656E78, "UAUserActivityIsForPairedDeviceOptionKey");
  if (v0) {
    objc_storeStrong((id *)&qword_100656E68, *v0);
  }
  off_100641DD8 = (uint64_t (*)())sub_1000566C0;
  return (id)qword_100656E68;
}

id sub_1000566C0()
{
  return (id)qword_100656E68;
}

void sub_1000566CC(id a1)
{
  qword_100656E78 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserActivity.framework/UserActivity", 2);
}

void sub_1000566F4( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_100056704(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_100056710(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_10005671C()
{
}

void sub_100056748()
{
}

void sub_100056774(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "IOPMAssertionCreateWithProperties returned %x",  (uint8_t *)v2,  8u);
  sub_1000147C8();
}

void sub_1000567E4()
{
}

void sub_100056810(void *a1, os_log_s *a2)
{
  uint64_t v4 = (objc_class *)objc_opt_class(*a1, a2);
  uint64_t v5 = NSStringFromClass(v4);
  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  float v7 = *(double *)(*a1 + 96LL);
  int v9 = 138412546;
  id v10 = v6;
  __int16 v11 = 2048;
  double v12 = v7;
  sub_100056710((void *)&_mh_execute_header, a2, v8, "%@ startGoodbyeTimer with time interval %.2f", (uint8_t *)&v9);
}

void sub_1000568D4(uint64_t a1, os_log_s *a2)
{
  uint64_t v3 = (objc_class *)objc_opt_class(a1, a2);
  uint64_t v4 = NSStringFromClass(v3);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  int v7 = 138412290;
  uint64_t v8 = v5;
  sub_100056704((void *)&_mh_execute_header, a2, v6, "%@ invalidateGoodbyeTimer", (uint8_t *)&v7);

  sub_10004D1DC();
}

void sub_10005695C(uint64_t a1, os_log_s *a2)
{
  uint64_t v3 = (objc_class *)objc_opt_class(a1, a2);
  uint64_t v4 = NSStringFromClass(v3);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  int v7 = 138412290;
  uint64_t v8 = v5;
  sub_100056704((void *)&_mh_execute_header, a2, v6, "%@ goodbyeTimeoutFired", (uint8_t *)&v7);

  sub_10004D1DC();
}

void sub_1000569E4(id *a1, os_log_s *a2)
{
  unsigned int v3 = [*a1 length];
  v4[0] = 67109376;
  v4[1] = v3;
  __int16 v5 = 1024;
  int v6 = 9;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "Ignoring currentAdvertisementPayload because it is of incorrect size %d, should be %d",  (uint8_t *)v4,  0xEu);
  sub_10004D1DC();
}

void sub_100056A78()
{
}

void sub_100056AA4()
{
}

void sub_100056AD0()
{
}

void sub_100056AFC()
{
}

void sub_100056B28(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  *(_DWORD *)a2 = 136315138;
  *(void *)(a2 + 4) = a1;
  sub_100056704((void *)&_mh_execute_header, a3, (uint64_t)a3, "Did update state to %s", (uint8_t *)a2);
}

void sub_100056B64(unint64_t a1, os_log_s *a2, uint64_t a3)
{
  if (a1 > 3) {
    uint64_t v3 = "UnexpectedType";
  }
  else {
    uint64_t v3 = off_1005CC138[a1];
  }
  int v4 = 136315138;
  uint64_t v5 = v3;
  sub_100056704((void *)&_mh_execute_header, a2, a3, "IDSContinuity didStartAdvertisingOfType: %s", (uint8_t *)&v4);
  sub_10001480C();
}

void sub_100056BEC(unint64_t a1, os_log_s *a2, uint64_t a3)
{
  if (a1 > 3) {
    uint64_t v3 = "UnexpectedType";
  }
  else {
    uint64_t v3 = off_1005CC138[a1];
  }
  int v4 = 136315138;
  uint64_t v5 = v3;
  sub_100056704((void *)&_mh_execute_header, a2, a3, "IDSContinuity didStopAdvertisingOfType: %s", (uint8_t *)&v4);
  sub_10001480C();
}

void sub_100056C74(unint64_t a1, uint64_t a2, os_log_s *a3)
{
  if (a1 > 3) {
    uint64_t v3 = "UnexpectedType";
  }
  else {
    uint64_t v3 = off_1005CC138[a1];
  }
  int v4 = 136315394;
  uint64_t v5 = v3;
  __int16 v6 = 2112;
  uint64_t v7 = a2;
  sub_100056710( (void *)&_mh_execute_header,  a3,  (uint64_t)a3,  "IDSContinuity didStopAdvertisingOfType: %s withError: %@",  (uint8_t *)&v4);
  sub_10001480C();
}

void sub_100056D0C(uint64_t a1, void *a2, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 136315394;
  *(void *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2112;
  *(void *)(buf + 14) = a2;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "Did fail to start advertising for %s (%@)",  buf,  0x16u);
}

void sub_100057070( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_10005708C(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = WeakRetained;
  if (v1) {
    [WeakRetained openCompletedItemsWithFilesApp];
  }
  else {
    [WeakRetained saveCompletedItemsToiCloudDrive];
  }
}

uint64_t SDAutoUnlockProxyTriggerReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0LL;
      *(_BYTE *)(a1 + 12) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_30:
      *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 96), 8) = v14;
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000581AC(void *a1, os_log_s *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForKeyPath:@"@unionOfObjects.uniqueIDOverride"]);
  uint64_t v4 = SFCompactStringFromCollection(v3);
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  int v6 = 138412290;
  unint64_t v7 = v5;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "nearbyDevicesChanged %@",  (uint8_t *)&v6,  0xCu);
}

void sub_100058388(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24LL));
  [WeakRetained airDropStatus:*(void *)(a1 + 32) didChange:*(void *)(*(void *)(a1 + 32) + 16)];
}

void sub_100058488(id a1)
{
  int v1 = objc_alloc_init(&OBJC_CLASS___SDAutoUnlockSessionManager);
  uint64_t v2 = (void *)qword_100656E80;
  qword_100656E80 = (uint64_t)v1;
}

void sub_100058814( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

BOOL sub_100058830(id a1)
{
  int v1 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
  unsigned __int8 v2 = [v1 signedIntoPrimaryiCloudAccount];

  return v2;
}

BOOL sub_10005886C(id a1)
{
  return 1;
}

id sub_100058874(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = [WeakRetained cachedDeviceWiFiState];

  return v2;
}

BOOL sub_1000588A8(id a1)
{
  int v1 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
  unsigned __int8 v2 = [v1 bluetoothEnabled];

  return v2;
}

BOOL sub_1000588E4(id a1)
{
  return 1;
}

id sub_100058958(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onqueue_start");
}

void sub_100058C80( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100058CA4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleBioLockout];
}

void sub_100058EB0(uint64_t a1)
{
  unsigned __int8 v2 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
  unsigned int v3 = [v2 deviceKeyBagUnlocked];

  uint64_t v5 = auto_unlock_log(v4);
  int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v7)
    {
      LOWORD(v10) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Device unlocked on start up after retry",  (uint8_t *)&v10,  2u);
    }

    char v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [*(id *)(a1 + 32) setLastUnlockDate:v8];

    int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [*(id *)(a1 + 32) setLockStateChangedDate:v6];
  }

  else if (v7)
  {
    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
    int v10 = 134217984;
    id v11 = [v9 deviceKeyBagState];
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "### Device not unlocked on start up after retry (state: %ld)",  (uint8_t *)&v10,  0xCu);
  }
}

void sub_1000591D0(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log(a1);
  unsigned int v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Added SessionManager observer %@",  (uint8_t *)&v6,  0xCu);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) observerTable]);
  [v5 addObject:*(void *)(a1 + 32)];
}

void sub_100059328(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log(a1);
  unsigned int v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Removed SessionManager observer %@",  (uint8_t *)&v6,  0xCu);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) observerTable]);
  [v5 removeObject:*(void *)(a1 + 32)];
}

void sub_100059480(uint64_t a1)
{
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observerTable]);
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([v2 allObjects]);

  id v4 = [v3 countByEnumeratingWithState:&v12 objects:v18 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v13;
    do
    {
      for (unint64_t i = 0LL; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        char v8 = *(void **)(*((void *)&v12 + 1) + 8LL * (void)i);
        uint64_t v9 = objc_opt_respondsToSelector(v8, "session:didReceiveKeyDeviceLocked:");
        if ((v9 & 1) != 0)
        {
          uint64_t v10 = auto_unlock_log(v9);
          id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            __int128 v17 = v8;
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Calling key device locked %@",  buf,  0xCu);
          }

          [v8 session:*(void *)(a1 + 32) didReceiveKeyDeviceLocked:*(void *)(a1 + 40)];
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v12 objects:v18 count:16];
    }

    while (v5);
  }
}

void sub_1000596AC(uint64_t a1)
{
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observerTable]);
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([v2 allObjects]);

  id v4 = [v3 countByEnumeratingWithState:&v12 objects:v18 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v13;
    do
    {
      for (unint64_t i = 0LL; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        char v8 = *(void **)(*((void *)&v12 + 1) + 8LL * (void)i);
        uint64_t v9 = objc_opt_respondsToSelector(v8, "session:didEnableWithDevice:");
        if ((v9 & 1) != 0)
        {
          uint64_t v10 = auto_unlock_log(v9);
          id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            __int128 v17 = v8;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Calling enabled device %@", buf, 0xCu);
          }

          [v8 session:*(void *)(a1 + 32) didEnableWithDevice:*(void *)(a1 + 40)];
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v12 objects:v18 count:16];
    }

    while (v5);
  }
}

void sub_1000598FC(uint64_t a1)
{
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observerTable]);
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([v2 allObjects]);

  id v4 = [v3 countByEnumeratingWithState:&v12 objects:v18 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v13;
    do
    {
      for (unint64_t i = 0LL; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        char v8 = *(void **)(*((void *)&v12 + 1) + 8LL * (void)i);
        uint64_t v9 = objc_opt_respondsToSelector(v8, "session:didFailToEnableDevice:error:");
        if ((v9 & 1) != 0)
        {
          uint64_t v10 = auto_unlock_log(v9);
          id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            __int128 v17 = v8;
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "### Calling failed to enable %@",  buf,  0xCu);
          }

          [v8 session:*(void *)(a1 + 32) didFailToEnableDevice:*(void *)(a1 + 40) error:*(void *)(a1 + 48)];
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v12 objects:v18 count:16];
    }

    while (v5);
  }
}

void sub_100059B2C(uint64_t a1)
{
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observerTable]);
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([v2 allObjects]);

  id v4 = [v3 countByEnumeratingWithState:&v12 objects:v18 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v13;
    do
    {
      for (unint64_t i = 0LL; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        char v8 = *(void **)(*((void *)&v12 + 1) + 8LL * (void)i);
        uint64_t v9 = objc_opt_respondsToSelector(v8, "session:didBeginAttemptWithDevice:");
        if ((v9 & 1) != 0)
        {
          uint64_t v10 = auto_unlock_log(v9);
          id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            __int128 v17 = v8;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Calling began %@", buf, 0xCu);
          }

          [v8 session:*(void *)(a1 + 32) didBeginAttemptWithDevice:*(void *)(a1 + 40)];
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v12 objects:v18 count:16];
    }

    while (v5);
  }
}

void sub_100059D6C(uint64_t a1)
{
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observerTable]);
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([v2 allObjects]);

  id v4 = [v3 countByEnumeratingWithState:&v12 objects:v18 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v13;
    do
    {
      for (unint64_t i = 0LL; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        char v8 = *(void **)(*((void *)&v12 + 1) + 8LL * (void)i);
        uint64_t v9 = objc_opt_respondsToSelector(v8, "session:didCompleteUnlockWithDevice:");
        if ((v9 & 1) != 0)
        {
          uint64_t v10 = auto_unlock_log(v9);
          id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            __int128 v17 = v8;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Calling completed %@", buf, 0xCu);
          }

          [v8 session:*(void *)(a1 + 32) didCompleteUnlockWithDevice:*(void *)(a1 + 40)];
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v12 objects:v18 count:16];
    }

    while (v5);
  }
}

void sub_100059FBC(uint64_t a1)
{
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) observerTable]);
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([v2 allObjects]);

  id obj = v3;
  id v4 = [v3 countByEnumeratingWithState:&v17 objects:v23 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v18;
    do
    {
      for (unint64_t i = 0LL; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v18 != v6) {
          objc_enumerationMutation(obj);
        }
        char v8 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)i);
        uint64_t v9 = objc_opt_respondsToSelector(v8, "session:didFailUnlockWithResults:error:incrementedAttempt:");
        if ((v9 & 1) != 0)
        {
          uint64_t v10 = auto_unlock_log(v9);
          id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            char v22 = v8;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "### Calling failed %@", buf, 0xCu);
          }

          __int128 v12 = *(void **)(a1 + 32);
          uint64_t v13 = *(void *)(a1 + 40);
          uint64_t v14 = *(void *)(a1 + 48);
          __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v12 incrementedCountID]);
          [v8 session:v12 didFailUnlockWithResults:v13 error:v14 incrementedAttempt:v15 != 0];
        }
      }

      id v5 = [obj countByEnumeratingWithState:&v17 objects:v23 count:16];
    }

    while (v5);
  }
}

void sub_10005A1B0(id a1)
{
  uint64_t v1 = auto_unlock_log(a1);
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Repair cloud pairing if necessary", v4, 2u);
  }

  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockTransport sharedTransport](&OBJC_CLASS___SDAutoUnlockTransport, "sharedTransport"));
  [v3 triggerCloudPairRetryWithShortRetryDeviceIDs:0];
}

void sub_10005A51C(uint64_t a1)
{
  BOOL v2 = sub_10008AF18();
  if (v2)
  {
    uint64_t v3 = auto_unlock_log(v2);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v2_Block_object_dispose((const void *)(v1 - 96), 8) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "### No eligible devices: Auto Unlock disabled due to profile",  (uint8_t *)&v28,  2u);
    }

    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v6 = objc_opt_new(&OBJC_CLASS___NSSet);
    (*(void (**)(uint64_t, NSSet *, void))(v5 + 16))(v5, v6, 0LL);
  }

  else
  {
    uint64_t v6 = (NSSet *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) autoUnlockTransport]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( -[NSSet autoUnlockEligibleWatchesWithCloudPairing:]( v6,  "autoUnlockEligibleWatchesWithCloudPairing:",  0LL));
    id v8 = [v7 mutableCopy];

    uint64_t v10 = auto_unlock_log(v9);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v12 = (__CFString *)objc_claimAutoreleasedReturnValue([v8 allObjects]);
      int v28 = 138412290;
      uint64_t v29 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Devices %@", (uint8_t *)&v28, 0xCu);
    }

    [*(id *)(a1 + 32) eligibleDevicesFilterCompatibleDevices:v8];
    [*(id *)(a1 + 32) setEligibleDevices:v8];
    uint64_t v13 = (__CFString *)v8;
    if (([*(id *)(a1 + 40) isEqualToString:@"com.apple.preference.security.remoteservice"] & 1) != 0 || (objc_msgSend( *(id *)(a1 + 40),  "isEqualToString:",  @"com.apple.Touch-ID-Settings.extension") & 1) != 0 || (objc_msgSend(*(id *)(a1 + 40), "isEqualToString:", @"autool") & 1) != 0 || (uint64_t v14 = v13, objc_msgSend(*(id *)(a1 + 40), "isEqualToString:", @"com.apple.Preferences")))
    {
      __int128 v15 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString allObjects](v13, "allObjects"));
      char v16 = sub_10008B514(v15);
      __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
      uint64_t v14 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v17));

      uint64_t v19 = auto_unlock_log(v18);
      __int128 v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        int v28 = 138412290;
        uint64_t v29 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Devices with description %@",  (uint8_t *)&v28,  0xCu);
      }
    }

    uint64_t v21 = (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
    uint64_t v22 = auto_unlock_log(v21);
    id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
      else {
        char v25 = @"NO";
      }
      id v26 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 modelCode]);
      int v28 = 138412546;
      uint64_t v29 = v25;
      __int16 v30 = 2112;
      uint64_t v31 = v27;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Ranging supported: %@ for model: %@",  (uint8_t *)&v28,  0x16u);
    }
  }
}

id sub_10005AA84(uint64_t a1)
{
  return _[*(id *)(a1 + 32) createPairingLockSessionWithDevice:*(void *)(a1 + 40) passcode:*(void *)(a1 + 48)];
}

void sub_10005AB00(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Cancel enabling all devices", buf, 2u);
  }

  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lockPairingSessions", 0));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 allKeys]);

  id v6 = [v5 countByEnumeratingWithState:&v10 objects:v15 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v11;
    do
    {
      uint64_t v9 = 0LL;
      do
      {
        if (*(void *)v11 != v8) {
          objc_enumerationMutation(v5);
        }
        [*(id *)(a1 + 32) cancelEnablingAutoUnlockForDeviceID:*(void *)(*((void *)&v10 + 1) + 8 * (void)v9)];
        uint64_t v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v10 objects:v15 count:16];
    }

    while (v7);
  }
}

void sub_10005ACE4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uniqueID]);
  [v1 cancelEnablingAutoUnlockForDeviceID:v2];
}

void sub_10005B130(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockAKSManager sharedManager](&OBJC_CLASS___SDAutoUnlockAKSManager, "sharedManager"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
  id v9 = (id)objc_claimAutoreleasedReturnValue([v2 pairingIDForWatchID:v3]);

  id v4 = *(void **)(a1 + 40);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
  id v6 = [v4 disablePairingForDeviceID:v5 pairingID:v9];

  uint64_t v7 = *(void *)(a1 + 48);
  if (v7) {
    (*(void (**)(uint64_t, id, void))(v7 + 16))(v7, v6, 0LL);
  }
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockTransport sharedTransport](&OBJC_CLASS___SDAutoUnlockTransport, "sharedTransport"));
  [v8 updateApproveBluetoothIDs];
}

id sub_10005B474(uint64_t a1)
{
  int v2 = sub_10008A290();
  BOOL v3 = sub_10008A3E0();
  if (v2 && *(void *)(a1 + 40) == 1LL)
  {
    id v4 = *(void **)(a1 + 32);
    return _objc_msgSend(v4, "generateAttemptForType:");
  }

  if (v3 && *(void *)(a1 + 40) == 2LL)
  {
    id v4 = *(void **)(a1 + 32);
    return _objc_msgSend(v4, "generateAttemptForType:");
  }

  return _[*(id *)(a1 + 32) attemptAutoUnlock];
}

void sub_10005B6C8(uint64_t a1)
{
  int v2 = sub_10008A49C();
  id v3 = sub_10008A548();
  uint64_t v4 = objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = (void *)v4;
  id v6 = @"Test Mode";
  if (v4) {
    id v6 = (__CFString *)v4;
  }
  uint64_t v7 = v6;

  uint64_t v8 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v9 = v2 ^ 1u;
  __int128 v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v9));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  v10,  SDAutoUnlockManagerMetricSuccessKey);

  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  v11,  SDAutoUnlockManagerMetricDeviceIDKey);

  -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  *(void *)(a1 + 40),  SDAutoUnlockManagerMetricTimeKey);
  __int128 v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 56)));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  v12,  SDAutoUnlockManagerMetricConnectedBluetoothDevicesKey);

  __int128 v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 64)));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  v13,  SDAutoUnlockManagerMetricTimeSinceLastWakeKey);

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 72)));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  v14,  SDAutoUnlockManagerMetricLastSleepTypeKey);

  if ((v9 & 1) == 0)
  {
    uint64_t v15 = SFAutoUnlockErrorDomain;
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  SFAutoUnlockErrorDomain,  SDAutoUnlockManagerMetricErrorDomainKey);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  &off_1005F75A0,  SDAutoUnlockManagerMetricErrorCodeKey);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  v7,  SDAutoUnlockManagerMetricErrorStringKey);
    NSErrorUserInfoKey v41 = NSLocalizedDescriptionKey;
    uint64_t v42 = @"Test mode failure";
    char v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v42,  &v41,  1LL));
    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v15,  103LL,  v16));

    [*(id *)(a1 + 48) setCachedMetrics:v8];
    [*(id *)(a1 + 48) notifyObserversOfUnlockFailureWithResults:v8 error:v17];
    goto LABEL_22;
  }

  id v18 = sub_10008A5D8();
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  __int128 v17 = v19;
  if (v19)
  {
    if (*(_BYTE *)(a1 + 80))
    {
      __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) attemptExternalACMContext]);
      id v21 = sub_100013DF4(v17, v20);
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(v21);

      uint64_t v24 = auto_unlock_log(v23);
      char v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v40 = v22;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Test Mode: Token: %@", buf, 0xCu);
      }

      if (v22)
      {
        [*(id *)(a1 + 32) setHintToken:v22];
LABEL_21:

        [*(id *)(a1 + 32) setResults:v8];
        [*(id *)(a1 + 48) notifyObserversOfUnlockCompletionWithDevice:*(void *)(a1 + 32)];
        goto LABEL_22;
      }

      uint64_t v36 = auto_unlock_log(v26);
      uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        uint64_t v35 = "Test Mode: Unable to create hint token";
        goto LABEL_19;
      }
    }

    else
    {
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v19 dataUsingEncoding:4]);
      uint64_t v32 = MKBUnlockDevice(v22, 0LL);
      if ((_DWORD)v32) {
        goto LABEL_21;
      }
      uint64_t v33 = auto_unlock_log(v32);
      uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        uint64_t v35 = "Test Mode: Unlocked keybag";
LABEL_19:
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, v35, buf, 2u);
      }
    }

    goto LABEL_21;
  }

  uint64_t v27 = auto_unlock_log(0LL);
  int v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
    sub_100067AA8();
  }

  uint64_t v29 = SFAutoUnlockErrorDomain;
  NSErrorUserInfoKey v37 = NSLocalizedDescriptionKey;
  uint64_t v38 = @"Missing passcode";
  __int16 v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v38,  &v37,  1LL));
  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v29,  182LL,  v30));

  [*(id *)(a1 + 48) notifyObserversOfUnlockFailureWithResults:v8 error:v31];
LABEL_22:
}

LABEL_37:
    return;
  }

  uint64_t v9 = -[SDAutoUnlockSessionManager attemptInProgress](self, "attemptInProgress");
  if (v9)
  {
    __int128 v10 = auto_unlock_log(v9);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v11 = -[SDAutoUnlockSessionManager attemptInProgress](self, "attemptInProgress");
      __int128 v12 = @"NO";
      if (v11) {
        __int128 v12 = @"YES";
      }
      *(_DWORD *)buf = 138412290;
      v162 = (NSMutableSet *)v12;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v8,  OS_LOG_TYPE_DEFAULT,  "Attempt already in progress (progress state: %@)",  buf,  0xCu);
    }

    goto LABEL_37;
  }

  v139[0] = _NSConcreteStackBlock;
  v139[1] = 3221225472LL;
  v139[2] = sub_10005CD28;
  v139[3] = &unk_1005CC380;
  v139[4] = self;
  v140 = 0LL;
  __int128 v13 = objc_retainBlock(v139);
  -[SDAutoUnlockSessionManager setConnectedBluetoothDevices:]( self,  "setConnectedBluetoothDevices:",  variable initialization expression of SDAirDropHashStoreCDB.writer());
  -[SDAutoUnlockSessionManager setTimeSinceLastMachineWake:]( self,  "setTimeSinceLastMachineWake:",  (uint64_t)sub_10008B29C());
  -[SDAutoUnlockSessionManager setLastSleepType:]( self,  "setLastSleepType:",  variable initialization expression of SDAirDropHashStoreCDB.writer());
  uint64_t v14 = objc_opt_new(&OBJC_CLASS___NSDate);
  -[SDAutoUnlockSessionManager setAttemptStart:](self, "setAttemptStart:", v14);

  char v16 = auto_unlock_log(v15);
  __int128 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    id v18 = -[SDAutoUnlockSessionManager attemptCount](self, "attemptCount");
    uint64_t v19 = -[SDAutoUnlockSessionManager connectedBluetoothDevices](self, "connectedBluetoothDevices");
    __int128 v20 = -[SDAutoUnlockSessionManager timeSinceLastMachineWake](self, "timeSinceLastMachineWake");
    -[SDAutoUnlockSessionManager lastSleepType](self, "lastSleepType");
    id v21 = sub_10008B388();
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
    *(_DWORD *)buf = 134218754;
    v162 = (NSMutableSet *)v18;
    v163 = 2048;
    v164 = v19;
    v165 = 2048;
    v166 = v20;
    v167 = 2112;
    v168 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Starting attempt (attempt count: %ld, bluetooth devices: %ld, time since last wake: %ld seconds, sleep type: %@)",  buf,  0x2Au);
  }

  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockSessionManager autoUnlockTransport](self, "autoUnlockTransport"));
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v23 enabledAutoUnlockDevicesUsingCache:1]);
  char v25 = (void *)objc_claimAutoreleasedReturnValue([v24 allObjects]);

  if (![v25 count])
  {
    uint64_t v45 = auto_unlock_log(0LL);
    CFIndex v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "### No enabled devices for attempt", buf, 2u);
    }

    __int16 v47 = SFAutoUnlockErrorDomain;
    v159 = NSLocalizedDescriptionKey;
    v160 = @"No enabled devices";
    id v48 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v160,  &v159,  1LL));
    uint64_t v44 = (NSMutableSet *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v47,  117LL,  v48));

    uint64_t v49 = self;
    int v50 = v44;
    uint64_t v51 = @"No enabled devices";
    goto LABEL_27;
  }

  uint64_t v26 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue(-[SDAutoUnlockSessionManager isBluetoothEnabled](self, "isBluetoothEnabled"));
  uint64_t v27 = v26[2]();

  int v28 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue(-[SDAutoUnlockSessionManager isWifiEnabled](self, "isWifiEnabled"));
  uint64_t v29 = v28[2]();

  __int16 v30 = 0;
  if ((id)-[SDAutoUnlockSessionManager attemptType](self, "attemptType") != (id)2 && (v29 & 1) == 0) {
    __int16 v30 = -[SDAutoUnlockSessionManager presentedWiFiError](self, "presentedWiFiError");
  }
  uint64_t v31 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue(-[SDAutoUnlockSessionManager isFaceIDEnabled](self, "isFaceIDEnabled"));
  uint64_t v32 = v31[2]();

  if ((v32 & 1) == 0)
  {
    uint64_t v58 = auto_unlock_log(v33);
    v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_DEFAULT,  "### FaceID disabled. Disabling Auto Unlock for all key devices",  buf,  2u);
    }

    uint64_t v33 = -[SDAutoUnlockSessionManager disableAutoUnlockForAllWatches](self, "disableAutoUnlockForAllWatches");
    goto LABEL_41;
  }

  if ((v27 ^ 1 | v30) == 1)
  {
LABEL_41:
    id v60 = auto_unlock_log(v33);
    id v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
    if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
    {
      id v62 = @"YES";
      if ((_DWORD)v27) {
        int v63 = @"NO";
      }
      else {
        int v63 = @"YES";
      }
      if ((_DWORD)v29) {
        id v62 = @"NO";
      }
      *(_DWORD *)buf = 138412546;
      v162 = (NSMutableSet *)v63;
      v163 = 2112;
      v164 = (int64_t)v62;
      _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEFAULT,  "### Interfaces off (bluetooth off: %@, wifi off: %@)",  buf,  0x16u);
    }

    id v64 = -[SDAutoUnlockSessionManager errorCodeForBluetoothEnabled:wifiEnabled:faceIDEnabled:]( self,  "errorCodeForBluetoothEnabled:wifiEnabled:faceIDEnabled:",  v27,  v29,  v32);
    NSErrorUserInfoKey v41 = (__CFString *)objc_claimAutoreleasedReturnValue( -[SDAutoUnlockSessionManager errorStringForBluetoothEnabled:wifiEnabled:faceIDEnabled:]( self,  "errorStringForBluetoothEnabled:wifiEnabled:faceIDEnabled:",  v27,  v29,  v32));
    uint64_t v65 = -[SDAutoUnlockSessionManager shouldShowErrorForBluetoothEnabled:]( self,  "shouldShowErrorForBluetoothEnabled:",  v27);
    os_log_t v66 = SFAutoUnlockErrorDomain;
    v158[0] = v41;
    v157[0] = NSLocalizedDescriptionKey;
    v157[1] = @"SDAutoUnlockShowScreenLockError";
    __int16 v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v65));
    v158[1] = v67;
    uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v158,  v157,  2LL));
    uint64_t v44 = (NSMutableSet *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v66,  v64,  v68));

    goto LABEL_49;
  }

  uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
  uint64_t v35 = [v34 internetSharingEnabled];

  if (v35)
  {
    NSErrorUserInfoKey v37 = auto_unlock_log(v36);
    uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "### Mac is internet sharing", buf, 2u);
    }

    id v40 = SFLocalizedStringForKey(@"UNLOCK_INTERNET_SHARING", v39);
    NSErrorUserInfoKey v41 = (__CFString *)objc_claimAutoreleasedReturnValue(v40);
    uint64_t v42 = SFAutoUnlockErrorDomain;
    v155 = NSLocalizedDescriptionKey;
    v156 = v41;
    __int16 v43 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v156,  &v155,  1LL));
    uint64_t v44 = (NSMutableSet *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v42,  146LL,  v43));

LABEL_49:
    __int16 v69 = self;
    uint64_t v70 = v44;
    uint64_t v71 = v41;
    goto LABEL_50;
  }

  uint64_t v72 = (unsigned __int8 (**)(void))objc_claimAutoreleasedReturnValue(-[SDAutoUnlockSessionManager isActiveDeviceNearby](self, "isActiveDeviceNearby"));
  uint64_t v73 = v72[2]();

  if ((v73 & 1) != 0)
  {
    uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockSessionManager remotePeer](self, "remotePeer"));
    uint64_t v76 = [v75 isKeyBagLocked];

    if (!v76)
    {
      v86 = -[SDAutoUnlockSessionManager attemptCount](self, "attemptCount");
      if (v86 < 5)
      {
        v87 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockSessionManager lastUnlockDate](self, "lastUnlockDate"));

        if (v87)
        {
          v88 = -[SDAutoUnlockSessionManager lastLockedByRelock](self, "lastLockedByRelock");
          if (!v88)
          {
            sub_10008AAE4(1LL);
            -[SDAutoUnlockSessionManager setAttemptInProgress:](self, "setAttemptInProgress:", 1LL);
            v102 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
            v103 = (void *)objc_claimAutoreleasedReturnValue([v102 UUIDString]);
            -[SDAutoUnlockSessionManager setAttemptID:](self, "setAttemptID:", v103);

            v104 = objc_opt_new(&OBJC_CLASS___NSMutableSet);
            v135 = 0u;
            v136 = 0u;
            v137 = 0u;
            v138 = 0u;
            id obj = v25;
            v105 = [obj countByEnumeratingWithState:&v135 objects:v146 count:16];
            if (v105)
            {
              v106 = v105;
              v130 = *(void *)v136;
              v128 = v104;
              while (2)
              {
                for (j = 0LL; j != v106; j = (char *)j + 1)
                {
                  if (*(void *)v136 != v130) {
                    objc_enumerationMutation(obj);
                  }
                  v108 = *(void **)(*((void *)&v135 + 1) + 8LL * (void)j);
                  v109 = (void *)objc_claimAutoreleasedReturnValue([v108 uniqueID]);
                  v110 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockSessionManager remotePeer](self, "remotePeer"));
                  v111 = (void *)objc_claimAutoreleasedReturnValue([v110 deviceID]);
                  v112 = [v109 isEqualToString:v111];

                  if (v112)
                  {
                    v104 = v128;
                    -[NSMutableSet addObject:](v128, "addObject:", v108);
                    goto LABEL_90;
                  }
                }

                v106 = [obj countByEnumeratingWithState:&v135 objects:v146 count:16];
                v104 = v128;
                if (v106) {
                  continue;
                }
                break;
              }
            }

  uint64_t v8 = v16;
LABEL_42:

  return isKindOfClass & 1;
}

      id v40 = CFDictionaryGetInt64Ranged(v6, @"Delay", 0LL, 0xFFFFFFFFLL, 0LL);
      if (self->_fetchRetryCount >= 3)
      {
LABEL_66:
        __int16 v43 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  SFAppleIDErrorDomain,  201227LL,  0LL));
        goto LABEL_67;
      }

      NSErrorUserInfoKey v41 = v40;
      if (v40 >= 0x1C20uLL) {
        NSErrorUserInfoKey v41 = 7200LL;
      }
      if (v40) {
        uint64_t v42 = v41;
      }
      else {
        uint64_t v42 = 60LL;
      }
      -[SDAppleIDIdentityRequest _scheduleFetchRetryWithDelay:](self, "_scheduleFetchRetryWithDelay:", v42);
LABEL_33:

      return;
    default:
      if (dword_100642C08 <= 60)
      {
        if (dword_100642C08 == -1)
        {
          certificateStatus = self->_certificateStatus;
        }

        if (certificateStatus > 5) {
          id v21 = @"?";
        }
        else {
          id v21 = *(&off_1005CDA98 + certificateStatus);
        }
        LogPrintF( &dword_100642C08,  "-[SDAppleIDIdentityRequest _handleCertificateFetchResponseWithInfo:error:]",  60LL,  "### Certificate status %d/%@ isn't handled yet\n",  certificateStatus,  v21);
      }

      goto LABEL_33;
  }
  }

  else
  {
    uint64_t v24 = airdrop_log(0LL);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1000D276C();
    }
  }
}

  pthread_mutex_lock(&stru_100643A38);
  uint64_t v27 = self->_wifiDevice;
  int v28 = self->_wifiDeviceAttachmentRegistered;
  wifiScheduledOnRunLoop = self->_wifiScheduledOnRunLoop;
  __int16 v30 = self->_wifiManager;
  uint64_t v31 = pthread_mutex_unlock(&stru_100643A38);
  if (!v27)
  {
    if (wifiScheduledOnRunLoop) {
      return;
    }
    uint64_t v35 = daemon_log(v31);
    uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "SDStatusMonitor: WiFi device monitor started",  buf,  2u);
    }

    goto LABEL_52;
  }

  if (v28)
  {
    uint64_t v32 = daemon_log(v31);
    uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    uint64_t v34 = v33;
    if (wifiScheduledOnRunLoop)
    {
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "SDStatusMonitor: WiFi device attached",  buf,  2u);
      }

      -[SDStatusMonitor postNotification:](self, "postNotification:", @"com.apple.sharingd.WiFiDeviceAttached");
    }

    else
    {
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG)) {
        sub_100142C34();
      }
    }

    WiFiManagerClientRegisterDeviceAttachmentCallback(v30, 0LL, 0LL);
    WiFiDeviceClientRegisterHostApStateChangedCallback(v27, sub_10013ECF8, self);
    WiFiDeviceClientRegister24GHzNetworkInCriticalStateCallback(v27, sub_10013EE00, self);
    pthread_mutex_lock(&stru_100643A38);
    self->_wifiDeviceAttachmentRegistered = 0;
    pthread_mutex_unlock(&stru_100643A38);
  }

  if (!wifiScheduledOnRunLoop)
  {
LABEL_52:
    Main = CFRunLoopGetMain();
    WiFiManagerClientScheduleWithRunLoop(v30, Main, kCFRunLoopDefaultMode);
    pthread_mutex_lock(&stru_100643A38);
    self->_wifiScheduledOnRunLoop = 1;
    pthread_mutex_unlock(&stru_100643A38);
  }

      v125[(v119 >> 6) + 8] |= 1LL << v119;
      (*((void (**)(unint64_t, uint64_t, uint64_t))v319 + 2))( v125[6] + *((void *)v319 + 9) * v119,  v117,  v316);
      v115(v125[7] + *(void *)(v102 + 72) * v119, v293, v315);
      v126 = v125[2];
      v127 = __OFADD__(v126, 1LL);
      v128 = v126 + 1;
      if (v127) {
        goto LABEL_160;
      }
      v125[2] = v128;
      __int128 v17 = (uint64_t)v315;
      goto LABEL_42;
    }

    sub_100187100(v105, &qword_100656490);
    swift_bridgeObjectRetain(v106);
    v107 = v313;
    a1 = sub_1003AD618(v313);
    v109 = v108;
    swift_bridgeObjectRelease(v106);
    if ((v109 & 1) != 0)
    {
      v110 = swift_isUniquelyReferenced_nonNull_native(v106);
      v322 = (unint64_t)v106;
      if ((v110 & 1) == 0)
      {
        sub_1003AEE9C();
        v106 = (void *)v322;
      }

      v111 = v106[6] + *((void *)v319 + 9) * a1;
      uint64_t v70 = (void (*)(int64_t, uint64_t))*((void *)v319 + 1);
      int v50 = v316;
      v70(v111, v316);
      v112 = v322;
      v113 = *(void *)(v322 + 56) + *(void *)(v102 + 72) * a1;
      v114 = *(void (**)(char *, int64_t, uint64_t))(v102 + 32);
      __int16 v69 = (uint64_t)v280;
      v114(v280, v113, v17);
      v306 = v112;
      sub_1001CBD44(a1, v112);
      swift_bridgeObjectRelease(0x8000000000000000LL);
      v104((char *)v69, 0LL, 1LL, v17);
      uint64_t v38 = v314;
    }

    else
    {
      __int16 v69 = (uint64_t)v280;
      v104(v280, 1LL, 1LL, v17);
      uint64_t v70 = (void (*)(int64_t, uint64_t))*((void *)v319 + 1);
      uint64_t v38 = v314;
      int v50 = v316;
    }

    v70(v107, v50);
    sub_100187100(v69, &qword_100656490);
LABEL_6:
    __int16 v67 = (unint64_t)v308;
    info((char *)v307, v94);
    sub_100187100(v311, &qword_100649DC8);
    uint64_t v68 = v309;
  }

      v126[(v120 >> 6) + 8] |= 1LL << v120;
      (*((void (**)(unint64_t, uint64_t, uint64_t))v325 + 2))( v126[6] + *((void *)v325 + 9) * v120,  v118,  v322);
      v116(v126[7] + *(void *)(v102 + 72) * v120, v299, v321);
      v127 = v126[2];
      v128 = __OFADD__(v127, 1LL);
      v129 = v127 + 1;
      if (v128) {
        goto LABEL_160;
      }
      v126[2] = v129;
      __int128 v17 = (uint64_t)v321;
      goto LABEL_42;
    }

    sub_100187100(v105, &qword_100656490);
    swift_bridgeObjectRetain(v106);
    v107 = v319;
    a1 = sub_1003AD618(v319);
    v109 = v108;
    swift_bridgeObjectRelease(v106);
    if ((v109 & 1) != 0)
    {
      v110 = swift_isUniquelyReferenced_nonNull_native(v106);
      v328 = (unint64_t)v106;
      if ((v110 & 1) == 0)
      {
        sub_1003AEE9C();
        v106 = (const char *)v328;
      }

      v111 = *((void *)v106 + 6) + *((void *)v325 + 9) * a1;
      uint64_t v70 = (void (*)(int64_t, uint64_t))*((void *)v325 + 1);
      int v50 = v322;
      v70(v111, v322);
      v112 = (const char *)v328;
      v113 = *(void *)(v328 + 56) + *(void *)(v102 + 72) * a1;
      v114 = *(void (**)(char *, int64_t, uint64_t))(v102 + 32);
      __int16 v69 = (uint64_t)v286;
      v114(v286, v113, v17);
      v312 = v112;
      sub_1001CBD44(a1, (uint64_t)v112);
      v115 = swift_bridgeObjectRelease((const char *)0x8000000000000000LL);
      ((void (*)(uint64_t, void, uint64_t, uint64_t, __n128))v104)(v69, 0LL, 1LL, v17, v115);
      uint64_t v38 = v320;
    }

    else
    {
      __int16 v69 = (uint64_t)v286;
      v104(v286, 1LL, 1LL, v17);
      uint64_t v70 = (void (*)(int64_t, uint64_t))*((void *)v325 + 1);
      uint64_t v38 = v320;
      int v50 = v322;
    }

    v70(v107, v50);
    sub_100187100(v69, &qword_100656490);
LABEL_6:
    __int16 v67 = (unint64_t)v314;
    info((char *)v313, v94);
    sub_100187100(v317, &qword_100649DC8);
    uint64_t v68 = v315;
  }

    v87 = *(void *)(v0 + 1504);
    v88 = *(void *)(v0 + 1496);
    v89 = *(void *)(v0 + 1488);
    v90 = *(void *)(v0 + 1480);
    v91 = *(void *)(v0 + 1456);
    v92 = *(void *)(v0 + 1448);
    v93 = *(void *)(v0 + 1440);
    v94 = *(void *)(v0 + 1432);
    v95 = *(void *)(v0 + 1424);
    v172 = *(void *)(v0 + 1416);
    v173 = *(void *)(v0 + 1408);
    v174 = *(void *)(v0 + 1400);
    v175 = *(void *)(v0 + 1376);
    v176 = *(void *)(v0 + 1368);
    v177 = *(void *)(v0 + 1360);
    v178 = *(void *)(v0 + 1352);
    v179 = *(void *)(v0 + 1344);
    v180 = *(void *)(v0 + 1336);
    v181 = *(void *)(v0 + 1312);
    v182 = *(void *)(v0 + 1304);
    v183 = *(void *)(v0 + 1296);
    v184 = *(void *)(v0 + 1288);
    v186 = *(void *)(v0 + 1280);
    v188 = *(void *)(v0 + 1256);
    v191 = *(void *)(v0 + 1232);
    v194 = *(void *)(v0 + 1208);
    v197 = *(void *)(v0 + 1200);
    v199 = *(void *)(v0 + 1192);
    v202 = *(void *)(v0 + 1184);
    v206 = *(void *)(v0 + 1176);
    v210 = *(void *)(v0 + 1168);
    v216 = *(void *)(v0 + 1144);
    v221 = *(void *)(v0 + 1136);
    swift_task_dealloc(*(void *)(v0 + 1512));
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v172);
    swift_task_dealloc(v173);
    swift_task_dealloc(v174);
    swift_task_dealloc(v175);
    swift_task_dealloc(v176);
    swift_task_dealloc(v177);
    swift_task_dealloc(v178);
    swift_task_dealloc(v179);
    swift_task_dealloc(v180);
    swift_task_dealloc(v181);
    swift_task_dealloc(v182);
    swift_task_dealloc(v183);
    swift_task_dealloc(v184);
    swift_task_dealloc(v186);
    swift_task_dealloc(v188);
    swift_task_dealloc(v191);
    swift_task_dealloc(v194);
    swift_task_dealloc(v197);
    swift_task_dealloc(v199);
    swift_task_dealloc(v202);
    swift_task_dealloc(v206);
    swift_task_dealloc(v210);
    swift_task_dealloc(v216);
    swift_task_dealloc(v221);
    return (*(uint64_t (**)(void, void))(v0 + 8))(0LL, 0LL);
  }

  __int128 v10 = *(unsigned __int8 *)(v0 + 1793);
  __int128 v11 = *(uint64_t (**)(void, void, void, __n128))(*(void *)(v0 + 1472) + 16LL);
  __int128 v12 = v11(*(void *)(v0 + 1504), *(void *)(v0 + 1512), *(void *)(v0 + 1464), v9);
  __int128 v13 = *(void *)(v0 + 1504);
  uint64_t v14 = *(void *)(v0 + 1472);
  uint64_t v15 = *(void *)(v0 + 1464);
  if ((v10 & 1) != 0)
  {
    __int128 v17 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v17(*(void *)(v0 + 1504), *(void *)(v0 + 1464));
  }

  else
  {
    char v16 = SFAirDrop.TransferType.isOnlyExchange.getter(v12);
    __int128 v17 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v17(v13, v15);
    if ((v16 & 1) == 0)
    {
      id v18 = ((uint64_t (*)(void, void, void))v11)( *(void *)(v0 + 1480),  *(void *)(v0 + 1512),  *(void *)(v0 + 1464));
      uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
      __int128 v20 = static os_log_type_t.default.getter();
      id v21 = os_log_type_enabled(v19, v20);
      uint64_t v22 = *(void *)(v0 + 1512);
      uint64_t v23 = *(void *)(v0 + 1480);
      uint64_t v24 = *(void *)(v0 + 1464);
      if (v21)
      {
        v205 = v0 + 1016;
        v214 = (void (*)(uint64_t, uint64_t, __n128))v17;
        char v25 = swift_slowAlloc(22LL, -1LL);
        uint64_t v26 = swift_slowAlloc(64LL, -1LL);
        v225[0] = v26;
        *(_DWORD *)char v25 = 136315394;
        if (v10 == 2) {
          uint64_t v27 = 0xD000000000000024LL;
        }
        else {
          uint64_t v27 = 0x65736C6166LL;
        }
        v220 = v22;
        if (v10 == 2) {
          int v28 = (const char *)0x80000001005071D0LL;
        }
        else {
          int v28 = (const char *)0xE500000000000000LL;
        }
        *(void *)(v0 + 100_Block_object_dispose((const void *)(v1 - 96), 8) = sub_10018CDB4(v27, (unint64_t)v28, v225);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1008, v205, v25 + 4, v25 + 12);
        swift_bridgeObjectRelease(v28);
        *(_WORD *)(v25 + 12) = 2080;
        uint64_t v29 = sub_100183F14( (unint64_t *)&unk_100656460,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferType,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferType);
        __int16 v30 = dispatch thunk of CustomStringConvertible.description.getter(v24, v29);
        uint64_t v32 = (const char *)v31;
        *(void *)(v0 + 1016) = sub_10018CDB4(v30, v31, v225);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v205, v0 + 1024, v25 + 14, v25 + 22);
        uint64_t v33 = swift_bridgeObjectRelease(v32);
        v214(v23, v24, v33);
        _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "Send StateMachine CONTACTS SKIPPED - {receiverSupportsContactExchange: %s, type: %s} ",  (uint8_t *)v25,  0x16u);
        swift_arrayDestroy(v26, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v26, -1LL, -1LL);
        swift_slowDealloc(v25, -1LL, -1LL);

        ((void (*)(uint64_t, uint64_t))v214)(v220, v24);
      }

      else
      {
        v17(*(void *)(v0 + 1480), *(void *)(v0 + 1464));

        v17(v22, v24);
      }

      goto LABEL_37;
    }
  }

  *(void *)(v0 + 152_Block_object_dispose((const void *)(v1 - 96), 8) = v17;
  uint64_t v45 = *(void *)(v0 + 1512);
  CFIndex v46 = *(void *)(v0 + 1496);
  __int16 v47 = *(void *)(v0 + 1464);
  *(void *)(v0 + 1536) = OBJC_IVAR____TtCC16DaemoniOSLibrary25SDAirDropSendStateMachine10BaseRunner_log;
  id v48 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(v46, v45, v47);
  uint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
  int v50 = static os_log_type_t.default.getter();
  uint64_t v51 = os_log_type_enabled(v49, v50);
  uint64_t v52 = *(void *)(v0 + 1496);
  uint64_t v53 = *(void *)(v0 + 1464);
  if (v51)
  {
    v215 = (void (*)(uint64_t, uint64_t, __n128))v17;
    os_log_t v54 = swift_slowAlloc(22LL, -1LL);
    v225[0] = swift_slowAlloc(64LL, -1LL);
    v55 = v225[0];
    *(_DWORD *)os_log_t v54 = 136315394;
    id v56 = 1702195828LL;
    if ((v10 & 1) == 0) {
      id v56 = 0x65736C6166LL;
    }
    id v57 = 0xE400000000000000LL;
    if ((v10 & 1) == 0) {
      id v57 = 0xE500000000000000LL;
    }
    if (v10 == 2) {
      uint64_t v58 = 0xD000000000000024LL;
    }
    else {
      uint64_t v58 = v56;
    }
    if (v10 == 2) {
      v59 = (const char *)0x80000001005071D0LL;
    }
    else {
      v59 = (const char *)v57;
    }
    *(void *)(v0 + 1072) = sub_10018CDB4(v58, (unint64_t)v59, v225);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1072, v0 + 1080, v54 + 4, v54 + 12);
    swift_bridgeObjectRelease(v59);
    *(_WORD *)(v54 + 12) = 2080;
    id v60 = sub_100183F14( (unint64_t *)&unk_100656460,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferType,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferType);
    id v61 = dispatch thunk of CustomStringConvertible.description.getter(v53, v60);
    int v63 = (const char *)v62;
    *(void *)(v0 + 1056) = sub_10018CDB4(v61, v62, v225);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1056, v0 + 1064, v54 + 14, v54 + 22);
    id v64 = swift_bridgeObjectRelease(v63);
    v215(v52, v53, v64);
    _os_log_impl( (void *)&_mh_execute_header,  v49,  v50,  "Send StateMachine CONTACTS START {receiverSupportsContactExchange: %s, type: %s}",  (uint8_t *)v54,  0x16u);
    swift_arrayDestroy(v55, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1LL, -1LL);
    uint64_t v65 = v54;
    __int128 v17 = (void (*)(uint64_t, uint64_t))v215;
    swift_slowDealloc(v65, -1LL, -1LL);
  }

  else
  {

    v17(v52, v53);
  }

  v97 = *(void *)(v0 + 1384);
  v98 = *(void *)(v0 + 1376);
  v99 = *(void *)(v0 + 1112);
  v100 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 1392) + 48LL);
  *(void *)(v0 + 1544) = v100;
  v101 = v100(v99, 1LL, v97);
  *(_DWORD *)(v0 + 178_Block_object_dispose((const void *)(v1 - 96), 8) = v101;
  sub_1001915A4(v99, v98, &qword_100649F88);
  if (v100(v98, 1LL, v97) == 1)
  {
    v102 = *(void *)(v0 + 1328);
    v103 = *(void *)(v0 + 1320);
    v104 = *(void *)(v0 + 1312);
    sub_100187100(*(void *)(v0 + 1376), &qword_100649F88);
    sub_10024AA20(v104);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v102 + 48))(v104, 1LL, v103) == 1)
    {
      v105 = sub_100187100(*(void *)(v0 + 1312), &qword_100649F50);
      v106 = (os_log_s *)Logger.logObject.getter(v105);
      v107 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v106, v107))
      {
        v108 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)v108 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v106,  v107,  "Send StateMachine CONTACTS FAILED - Unexpectedly missing sender contact",  v108,  2u);
        swift_slowDealloc(v108, -1LL, -1LL);
      }

      v109 = *(void *)(v0 + 1512);
      v110 = *(void *)(v0 + 1464);

      v17(v109, v110);
      goto LABEL_37;
    }

    v117 = (*(uint64_t (**)(void, void, void))(*(void *)(v0 + 1328) + 32LL))( *(void *)(v0 + 1352),  *(void *)(v0 + 1312),  *(void *)(v0 + 1320));
    v118 = (os_log_s *)Logger.logObject.getter(v117);
    v119 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v118, v119))
    {
      v120 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v120 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v118,  v119,  "Send StateMachine SHARE CONTACT PERMISSION START",  v120,  2u);
      swift_slowDealloc(v120, -1LL, -1LL);
    }

    v121 = *(void *)(v0 + 1352);
    v122 = v101 == 1;
    v123 = *(void *)(v0 + 1328);
    v124 = *(void *)(v0 + 1320);
    v125 = *(void *)(v0 + 1288);
    v211 = *(void *)(v0 + 1280);
    v217 = *(void *)(v0 + 1272);
    v222 = *(void *)(v0 + 1264);
    v126 = *(void *)(v0 + 1256);
    v127 = *(void *)(v0 + 1248);
    v207 = *(void *)(v0 + 1240);

    sub_10025BDB4(v121, v122, v125);
    v128 = v126 + *(int *)(sub_100183098(&qword_10064A018) + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v123 + 16))(v126, v121, v124);
    v129 = sub_100183098(&qword_10064B750);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v129 - 8) + 16LL))(v128, v125, v129);
    v130 = enum case for SFAirDropSend.Transfer.State.waitingForShareContactPermissionResponse(_:);
    v131 = *(void (**)(uint64_t, uint64_t, uint64_t))(v127 + 104);
    *(void *)(v0 + 1552) = v131;
    v131(v126, v130, v207);
    sub_100217DD8(v126, v211);
    v132 = *(void (**)(uint64_t, uint64_t))(v127 + 8);
    *(void *)(v0 + 1560) = v132;
    v132(v126, v207);
    v133 = *(void (**)(uint64_t, uint64_t))(v217 + 8);
    *(void *)(v0 + 156_Block_object_dispose((const void *)(v1 - 96), 8) = v133;
    v133(v211, v222);
    return swift_task_switch(sub_100258E18, 0LL, 0LL);
  }

  else
  {
    v111 = (*(uint64_t (**)(void, void, void))(*(void *)(v0 + 1392) + 32LL))( *(void *)(v0 + 1440),  *(void *)(v0 + 1376),  *(void *)(v0 + 1384));
    v112 = *(void *)(v0 + 1328);
    v113 = *(void *)(v0 + 1320);
    v114 = *(void *)(v0 + 1304);
    SFAirDrop.ContactRequest.contact.getter(v111);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48))(v114, 1LL, v113) == 1)
    {
      sub_100187100(*(void *)(v0 + 1304), &qword_100649F50);
      v115 = 0LL;
      v116 = 0LL;
    }

    else
    {
      v134 = *(void *)(v0 + 1328);
      v135 = *(void *)(v0 + 1320);
      v136 = *(void *)(v0 + 1304);
      v115 = SFAirDrop.ContactInfo.accountHandle.getter();
      v116 = v137;
      (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v136, v135);
    }

    v138 = *(void *)(v0 + 1440);
    v139 = *(void *)(v0 + 1424);
    v140 = *(void *)(v0 + 1392);
    v141 = *(void *)(v0 + 1384);
    sub_1002E03F4(v115, v116, (void *)(v0 + 784));
    v142 = *(void *)(v0 + 784);
    v143 = *(const char **)(v0 + 792);
    v144 = *(void *)(v0 + 800);
    v218 = *(void *)(v0 + 816);
    v223 = *(void *)(v0 + 808);
    v208 = *(void *)(v0 + 832);
    v212 = *(void *)(v0 + 824);
    v200 = *(void *)(v0 + 848);
    v203 = *(void *)(v0 + 840);
    v192 = *(void *)(v0 + 864);
    v195 = *(const char **)(v0 + 856);
    v145 = swift_bridgeObjectRelease(v116);
    (*(void (**)(uint64_t, void, uint64_t, __n128))(v140 + 104))( v139,  enum case for SFAirDrop.ContactRequest.notNeeded(_:),  v141,  v145);
    v146 = static SFAirDrop.ContactRequest.== infix(_:_:)(v138, v139);
    v147 = *(void (**)(uint64_t, uint64_t))(v140 + 8);
    *(void *)(v0 + 160_Block_object_dispose((const void *)(v1 - 96), 8) = v147;
    v147(v139, v141);
    if ((v146 & 1) != 0)
    {
      v142 = 0LL;
      v143 = 0LL;
      v144 = 0LL;
      v148 = 0LL;
      v149 = 0LL;
      v150 = 0LL;
      v151 = 0LL;
      v152 = 0LL;
      v153 = 0LL;
      v154 = 0LL;
      v155 = 0LL;
    }

    else
    {
      sub_10025F56C( (void *)(v0 + 784),  (void (*)(void, void, void, void, void, void, void, void, void, void, void))sub_10025F43C);
      v149 = v218;
      v148 = v223;
      v151 = v208;
      v150 = v212;
      v153 = v200;
      v152 = v203;
      v155 = v192;
      v154 = v195;
    }

    v219 = v149;
    v224 = v148;
    v209 = v151;
    v213 = v150;
    v204 = v152;
    *(void *)(v0 + 1696) = v155;
    *(void *)(v0 + 168_Block_object_dispose((const void *)(v1 - 96), 8) = v154;
    *(void *)(v0 + 1680) = v153;
    *(void *)(v0 + 1672) = v152;
    *(void *)(v0 + 1664) = v151;
    *(void *)(v0 + 1656) = v150;
    *(void *)(v0 + 164_Block_object_dispose((const void *)(v1 - 96), 8) = v149;
    *(void *)(v0 + 1640) = v148;
    *(void *)(v0 + 1632) = v144;
    *(void *)(v0 + 1624) = v143;
    *(void *)(v0 + 1616) = v142;
    v185 = *(void *)(v0 + 1424);
    v156 = v153;
    v201 = v153;
    v157 = v154;
    v158 = *(void *)(v0 + 1392);
    v159 = *(void *)(v0 + 1280);
    v160 = v143;
    v187 = v143;
    v161 = *(void *)(v0 + 1272);
    v162 = *(void *)(v0 + 1264);
    v163 = *(void *)(v0 + 1192);
    v164 = v144;
    v165 = *(void *)(v0 + 1120);
    v189 = *(void *)(v0 + 1208);
    *(void *)(v0 + 696) = v142;
    *(void *)(v0 + 704) = v160;
    *(void *)(v0 + 712) = v164;
    *(void *)(v0 + 720) = v148;
    *(void *)(v0 + 72_Block_object_dispose((const void *)(v1 - 96), 8) = v149;
    *(void *)(v0 + 736) = v150;
    *(void *)(v0 + 744) = v151;
    *(void *)(v0 + 752) = v152;
    *(void *)(v0 + 760) = v156;
    *(void *)(v0 + 76_Block_object_dispose((const void *)(v1 - 96), 8) = v157;
    *(void *)(v0 + 776) = v155;
    v166 = *(void (**)(void))(v158 + 16);
    *(void *)(v0 + 1704) = v166;
    v166();
    v167 = v165 + OBJC_IVAR____TtCC16DaemoniOSLibrary25SDAirDropSendStateMachine10BaseRunner_currentTransfer;
    v168 = swift_beginAccess(v167, v0 + 960, 0LL, 0LL);
    v169 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v161 + 16))(v159, v167, v162, v168);
    SFAirDropSend.Transfer.id.getter(v169);
    v170 = *(void (**)(uint64_t, uint64_t))(v161 + 8);
    *(void *)(v0 + 1712) = v170;
    v170(v159, v162);
    sub_10025F43C(v142, v187, v164, v224, v219, v213, v209, v204, v201, v157);
    sub_1003C48A0(v185, v163, v0 + 696, v189);
    sub_1001F1F34(v189);
    v171 = (void *)swift_task_alloc(async function pointer to SFProgressTask.finalValue.getter[1]);
    *(void *)(v0 + 1720) = v171;
    *v171 = v0;
    v171[1] = sub_1002599FC;
    return SFProgressTask.finalValue.getter(*(void *)(v0 + 1184), *(void *)(v0 + 1152));
  }

          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v10, 1LL, 1LL, v11);
          uint64_t v19 = 0LL;
LABEL_38:
          sub_100187100((uint64_t)v10, (uint64_t *)&unk_100645130);
          goto LABEL_39;
        }

        v26 += 3LL;
      }
    }

  __break(1u);
LABEL_38:
  __break(1u);
}

    swift_release(a1);
    return (uint64_t)v42;
  }

  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

    swift_release(v71);
    return;
  }

  __break(1u);
LABEL_39:
  __break(1u);
}

  if (v5 < 0) {
    uint64_t v22 = v5;
  }
  else {
    uint64_t v22 = v5 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain((const char *)v5);
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease((const char *)v5);
  uint64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6)) {
    goto LABEL_42;
  }
LABEL_8:
  uint64_t v5 = (uint64_t)*v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  void *v3 = (const char *)v5;
  uint64_t v8 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000LL) == 0 && (v5 & 0x4000000000000000LL) == 0)
  {
    __int128 v11 = v5 & 0xFFFFFFFFFFFFFF8LL;
    if (v9 <= *(void *)((v5 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v8 = 1LL;
  }

  __int128 v12 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_15:
  if (v12 <= v9) {
    __int128 v12 = v9;
  }
  swift_bridgeObjectRetain((const char *)v5);
  uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1LL, v5);
  swift_bridgeObjectRelease(*v3);
  void *v3 = (const char *)v5;
  __int128 v11 = v5 & 0xFFFFFFFFFFFFFF8LL;
LABEL_18:
  __int128 v13 = type metadata accessor for SDTempPairingConnection(0LL);
  uint64_t v14 = (void *)swift_arrayDestroy(v11 + 32 + 8 * v4, v7, v13);
  if (!v6) {
    return specialized Array._endMutation()(v14);
  }
  if (!((unint64_t)v5 >> 62))
  {
    uint64_t v15 = *(void *)(v11 + 16);
    char v16 = v15 - v2;
    if (!__OFSUB__(v15, v2)) {
      goto LABEL_21;
    }
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }

  if (v5 < 0) {
    uint64_t v24 = v5;
  }
  else {
    uint64_t v24 = v11;
  }
  swift_bridgeObjectRetain((const char *)v5);
  char v25 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease((const char *)v5);
  char v16 = v25 - v2;
  if (__OFSUB__(v25, v2)) {
    goto LABEL_52;
  }
LABEL_21:
  if ((v16 & 0x8000000000000000LL) == 0)
  {
    __int128 v17 = (const void *)(v11 + 32 + 8 * v2);
    if (!((unint64_t)v5 >> 62))
    {
      id v18 = *(void *)(v11 + 16);
      uint64_t v19 = v18 + v6;
      if (!__OFADD__(v18, v6))
      {
LABEL_27:
        *(void *)(v11 + 16) = v19;
        return specialized Array._endMutation()(v14);
      }

      goto LABEL_58;
    }

  if (v5 < 0) {
    uint64_t v22 = v5;
  }
  else {
    uint64_t v22 = v5 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain((const char *)v5);
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease((const char *)v5);
  uint64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6)) {
    goto LABEL_42;
  }
LABEL_8:
  uint64_t v5 = (uint64_t)*v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  void *v3 = (const char *)v5;
  uint64_t v8 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000LL) == 0 && (v5 & 0x4000000000000000LL) == 0)
  {
    __int128 v11 = v5 & 0xFFFFFFFFFFFFFF8LL;
    if (v9 <= *(void *)((v5 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v8 = 1LL;
  }

  __int128 v12 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_15:
  if (v12 <= v9) {
    __int128 v12 = v9;
  }
  swift_bridgeObjectRetain((const char *)v5);
  uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1LL, v5);
  swift_bridgeObjectRelease(*v3);
  void *v3 = (const char *)v5;
  __int128 v11 = v5 & 0xFFFFFFFFFFFFFF8LL;
LABEL_18:
  __int128 v13 = sub_100183168(0LL, &qword_100652548, &OBJC_CLASS___CBWriteRequest_ptr);
  uint64_t v14 = (void *)swift_arrayDestroy(v11 + 32 + 8 * v4, v7, v13);
  if (!v6) {
    return specialized Array._endMutation()(v14);
  }
  if (!((unint64_t)v5 >> 62))
  {
    uint64_t v15 = *(void *)(v11 + 16);
    char v16 = v15 - v2;
    if (!__OFSUB__(v15, v2)) {
      goto LABEL_21;
    }
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }

  if (v5 < 0) {
    uint64_t v24 = v5;
  }
  else {
    uint64_t v24 = v11;
  }
  swift_bridgeObjectRetain((const char *)v5);
  char v25 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease((const char *)v5);
  char v16 = v25 - v2;
  if (__OFSUB__(v25, v2)) {
    goto LABEL_52;
  }
LABEL_21:
  if ((v16 & 0x8000000000000000LL) == 0)
  {
    __int128 v17 = (const void *)(v11 + 32 + 8 * v2);
    if (!((unint64_t)v5 >> 62))
    {
      id v18 = *(void *)(v11 + 16);
      uint64_t v19 = v18 + v6;
      if (!__OFADD__(v18, v6))
      {
LABEL_27:
        *(void *)(v11 + 16) = v19;
        return specialized Array._endMutation()(v14);
      }

      goto LABEL_58;
    }

LABEL_90:
            -[SDAutoUnlockSessionManager setScanAutoUnlockDevices:](self, "setScanAutoUnlockDevices:", v104);
            v117 = (void *)objc_claimAutoreleasedReturnValue(+[SDNearbyAgent sharedNearbyAgent](&OBJC_CLASS___SDNearbyAgent, "sharedNearbyAgent"));
            [v117 setAutoUnlockActive:1];

            v133 = 0u;
            v134 = 0u;
            v131 = 0u;
            v132 = 0u;
            uint64_t v44 = v104;
            v118 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v44,  "countByEnumeratingWithState:objects:count:",  &v131,  v145,  16LL);
            if (v118)
            {
              v119 = v118;
              LODWORD(v120) = 0;
              v121 = *(void *)v132;
              do
              {
                for (k = 0LL; k != v119; k = (char *)k + 1)
                {
                  if (*(void *)v132 != v121) {
                    objc_enumerationMutation(v44);
                  }
                  v123 = *(void **)(*((void *)&v131 + 1) + 8LL * (void)k);
                  else {
                    v124 = 1;
                  }
                  v120 = v124 | v120;
                  -[SDAutoUnlockSessionManager createLockSessionWithWatchDevice:]( self,  "createLockSessionWithWatchDevice:",  v123);
                }

                v119 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v44,  "countByEnumeratingWithState:objects:count:",  &v131,  v145,  16LL);
              }

              while (v119);
            }

            else
            {
              v120 = 0LL;
            }

            v125 = -[SDAutoUnlockSessionManager attemptType](self, "attemptType");
            if (v125 == (id)2) {
              v125 = -[SDAutoUnlockSessionManager generateAppIconImageWithOptions:]( self,  "generateAppIconImageWithOptions:",  v120);
            }
            v126 = auto_unlock_log(v125);
            v127 = (os_log_s *)objc_claimAutoreleasedReturnValue(v126);
            if (os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              v162 = v44;
              _os_log_impl( (void *)&_mh_execute_header,  v127,  OS_LOG_TYPE_DEFAULT,  "Connecting to watches: %@",  buf,  0xCu);
            }

            ((void (*)(void *, uint64_t))v13[2])(v13, 1LL);
            goto LABEL_52;
          }
        }

        v89 = auto_unlock_log(v88);
        v90 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
        if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
        {
          if (v87) {
            v91 = @"YES";
          }
          else {
            v91 = @"NO";
          }
          if (-[SDAutoUnlockSessionManager lastLockedByRelock](self, "lastLockedByRelock")) {
            v92 = @"YES";
          }
          else {
            v92 = @"NO";
          }
          *(_DWORD *)buf = 138412546;
          v162 = (NSMutableSet *)v91;
          v163 = 2112;
          v164 = (int64_t)v92;
          _os_log_impl( (void *)&_mh_execute_header,  v90,  OS_LOG_TYPE_DEFAULT,  "### Device needs to be unlocked through another method first (unlocked recently: %@, last locked by relock %@)",  buf,  0x16u);
        }

        if (v87)
        {
          NSErrorUserInfoKey v41 = @"Blocked PAU attempt due to Relock";
          v94 = 216LL;
        }

        else
        {
          NSErrorUserInfoKey v41 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"No unlocks in the last %f hrs",  0x4018000000000000LL));
          v94 = 214LL;
        }

        v113 = SFLocalizedStringForKey(@"UNLOCK_EXPIRED_TEXT", v93);
        v114 = (void *)objc_claimAutoreleasedReturnValue(v113);
        v115 = SFAutoUnlockErrorDomain;
        v147 = NSLocalizedDescriptionKey;
        v148 = v114;
        v116 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v148,  &v147,  1LL));
        uint64_t v44 = (NSMutableSet *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v115,  v94,  v116));

        -[SDAutoUnlockSessionManager failedAttemptBeforeStarting:metricErrorString:]( self,  "failedAttemptBeforeStarting:metricErrorString:",  v44,  v41);
        ((void (*)(void *, void))v13[2])(v13, 0LL);

        goto LABEL_51;
      }

      v95 = auto_unlock_log(v86);
      v96 = (os_log_s *)objc_claimAutoreleasedReturnValue(v95);
      if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
      {
        v97 = -[SDAutoUnlockSessionManager attemptCount](self, "attemptCount");
        *(_DWORD *)buf = 67109120;
        LODWORD(v162) = v97;
        _os_log_impl( (void *)&_mh_execute_header,  v96,  OS_LOG_TYPE_DEFAULT,  "### Reached limit of attempts (attempt count: %d)",  buf,  8u);
      }

      -[SDAutoUnlockSessionManager dropEscrowRecordsIfNecessary](self, "dropEscrowRecordsIfNecessary");
      v99 = SFLocalizedStringForKey(@"UNLOCK_EXPIRED_TEXT", v98);
      NSErrorUserInfoKey v41 = (__CFString *)objc_claimAutoreleasedReturnValue(v99);
      v100 = SFAutoUnlockErrorDomain;
      v149 = NSLocalizedDescriptionKey;
      v150 = v41;
      v101 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v150,  &v149,  1LL));
      uint64_t v44 = (NSMutableSet *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v100,  127LL,  v101));

      uint64_t v71 = @"Reached attempt limit";
      __int16 v69 = self;
      uint64_t v70 = v44;
LABEL_50:
      -[SDAutoUnlockSessionManager failedAttemptBeforeStarting:metricErrorString:]( v69,  "failedAttemptBeforeStarting:metricErrorString:",  v70,  v71);
      ((void (*)(void *, void))v13[2])(v13, 0LL);
LABEL_51:

      goto LABEL_52;
    }

    v78 = auto_unlock_log(v77);
    v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
    if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "### Watch needs to be unlocked", buf, 2u);
    }

    v80 = SFAutoUnlockErrorDomain;
    v151 = NSLocalizedDescriptionKey;
    v152 = @"Watch needs to be unlocked";
    v81 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v152,  &v151,  1LL));
    uint64_t v44 = (NSMutableSet *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v80,  102LL,  v81));

    uint64_t v51 = @"Watch locked and unarmed";
  }

  else
  {
    v82 = auto_unlock_log(v74);
    v83 = (os_log_s *)objc_claimAutoreleasedReturnValue(v82);
    if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "### Device is not nearby", buf, 2u);
    }

    v84 = SFAutoUnlockErrorDomain;
    v153 = NSLocalizedDescriptionKey;
    v154 = @"Device not connected";
    v85 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v154,  &v153,  1LL));
    uint64_t v44 = (NSMutableSet *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v84,  186LL,  v85));

    uint64_t v51 = @"Device not nearby";
  }

  uint64_t v49 = self;
  int v50 = v44;
LABEL_27:
  -[SDAutoUnlockSessionManager failedAttemptBeforeStarting:metricErrorString:]( v49,  "failedAttemptBeforeStarting:metricErrorString:",  v50,  v51);
  ((void (*)(void *, void))v13[2])(v13, 0LL);
LABEL_52:
}

  __break(1u);
  return result;
}

void sub_10005CD28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) attemptActivatedHandler]);

  if (v4)
  {
    uint64_t v6 = auto_unlock_log(v5);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = @"NO";
      uint64_t v9 = *(void *)(a1 + 40);
      if ((_DWORD)a2) {
        uint64_t v8 = @"YES";
      }
      int v11 = 138412546;
      __int128 v12 = v8;
      __int16 v13 = 2112;
      uint64_t v14 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Attempt started %@, error %@",  (uint8_t *)&v11,  0x16u);
    }

    __int128 v10 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) attemptActivatedHandler]);
    v10[2](v10, a2, *(void *)(a1 + 40));
  }

void sub_10005D12C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) doNotPostUnlockConfirmation])
  {
    [*(id *)(a1 + 32) setSuppressAlert:*(_BYTE *)(a1 + 40) == 0];
    unsigned int v2 = [*(id *)(a1 + 32) suppressAlert];
    id v3 = *(void **)(a1 + 32);
    if (v2)
    {
      [v3 setPeriocularStatus:2];
      __int128 v39 = 0u;
      __int128 v40 = 0u;
      __int128 v37 = 0u;
      __int128 v38 = 0u;
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lockAuthSessions]);
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 allValues]);

      id v6 = [v5 countByEnumeratingWithState:&v37 objects:v44 count:16];
      if (v6)
      {
        id v7 = v6;
        uint64_t v8 = *(void *)v38;
LABEL_5:
        uint64_t v9 = 0LL;
        while (1)
        {
          if (*(void *)v38 != v8) {
            objc_enumerationMutation(v5);
          }
          __int128 v10 = *(void **)(*((void *)&v37 + 1) + 8 * v9);
          if ([v10 doNotPostUnlockConfirmation])
          {
            id v11 = [v10 aksSuccess];
            if ((_DWORD)v11)
            {
              uint64_t v28 = auto_unlock_log(v11);
              uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
              if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Sending Unlock Confirmation, Suppress Notification",  buf,  2u);
              }

              [v10 completeAttemptPostNotification:0];
              goto LABEL_31;
            }
          }

          if (v7 == (id)++v9)
          {
            id v7 = [v5 countByEnumeratingWithState:&v37 objects:v44 count:16];
            if (v7) {
              goto LABEL_5;
            }
            goto LABEL_31;
          }
        }

        id v13 = v10;

        if (!v13) {
          goto LABEL_33;
        }
        uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v13 attemptResults]);
        id v20 = [v5 mutableCopy];
        [*(id *)(a1 + 32) setCachedMetrics:v20];

        uint64_t v21 = SFUnlockErrorDomian;
        NSErrorUserInfoKey v42 = NSLocalizedDescriptionKey;
        __int16 v43 = @"Attempt Cancelled due to Periocular Success";
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v43,  &v42,  1LL));
        uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v21,  118LL,  v22));

        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v23 code]));
        char v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cachedMetrics]);
        [v25 setObject:v24 forKeyedSubscript:SDAutoUnlockManagerMetricErrorCodeKey];

        uint64_t v26 = *(void **)(a1 + 32);
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 cachedMetrics]);
        [v26 notifyObserversOfUnlockFailureWithResults:v27 error:v23];
      }

      else
      {
LABEL_31:
        id v13 = 0LL;
      }

LABEL_33:
      [*(id *)(a1 + 32) cancelAttemptsForDeviceUnlocked];
    }

    else
    {
      [v3 setDoNotPostUnlockConfirmation:0];
      [*(id *)(a1 + 32) setPeriocularStatus:1];
      __int128 v34 = 0u;
      __int128 v35 = 0u;
      __int128 v32 = 0u;
      __int128 v33 = 0u;
      __int128 v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lockAuthSessions", 0));
      id v13 = (id)objc_claimAutoreleasedReturnValue([v12 allValues]);

      id v14 = [v13 countByEnumeratingWithState:&v32 objects:v41 count:16];
      if (v14)
      {
        id v15 = v14;
        uint64_t v16 = *(void *)v33;
        while (2)
        {
          for (unint64_t i = 0LL; i != v15; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v33 != v16) {
              objc_enumerationMutation(v13);
            }
            id v18 = *(void **)(*((void *)&v32 + 1) + 8LL * (void)i);
            if ([v18 doNotPostUnlockConfirmation])
            {
              id v19 = [v18 aksSuccess];
              if ((_DWORD)v19)
              {
                uint64_t v30 = auto_unlock_log(v19);
                uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
                if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Sending Unlock Confirmation, Show Notification",  buf,  2u);
                }

                [v18 completeAttemptPostNotification:1];
                goto LABEL_34;
              }
            }

            if ([v18 doNotPostUnlockConfirmation])
            {
              objc_msgSend( v18,  "setDoNotPostUnlockConfirmation:",  objc_msgSend(*(id *)(a1 + 32), "doNotPostUnlockConfirmation"));
              goto LABEL_34;
            }
          }

          id v15 = [v13 countByEnumeratingWithState:&v32 objects:v41 count:16];
          if (v15) {
            continue;
          }
          break;
        }
      }
    }

void sub_10005DA54(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if ((unint64_t)(v1 - 1) >= 2)
  {
    if (v1) {
      return;
    }
    uint64_t v11 = auto_unlock_log(a1);
    __int128 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_100067AD4();
    }

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
    [v8 setBool:1 forKey:@"AutoUnlockDoNotCollectTriggerMetrics"];
  }

  else
  {
    if (v1 == 2) {
      id v3 = &off_1005F75D0;
    }
    else {
      id v3 = &off_1005F75B8;
    }
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cachedMetrics]);
    uint64_t v5 = SDAutoUnlockManagerMetricUnintentionalAttemptKey;
    [v4 setObject:v3 forKeyedSubscript:SDAutoUnlockManagerMetricUnintentionalAttemptKey];

    uint64_t v7 = auto_unlock_log(v6);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cachedMetrics]);
      __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v5]);
      int v13 = 138412290;
      id v14 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v8,  OS_LOG_TYPE_DEFAULT,  "Log Unintentional AutoUnlock Attempt: %@",  (uint8_t *)&v13,  0xCu);
    }
  }
}

void sub_10005DE6C(id a1, NSError *a2)
{
  unsigned int v2 = a2;
  uint64_t v3 = auto_unlock_log(v2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_100067B00();
  }
}

void sub_10005E3EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = auto_unlock_log(v3);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_100067B60(a1, (uint64_t)v3, v5);
  }
}

void sub_10005E504(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    unsigned int v2 = -[SDUnlockDisable initWithData:]( objc_alloc(&OBJC_CLASS___SDUnlockDisable),  "initWithData:",  *(void *)(a1 + 40));
    uint64_t v3 = auto_unlock_log(v2);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[SDUnlockDisable pairingID](v2, "pairingID"));
      int v9 = 138412546;
      uint64_t v10 = v5;
      __int16 v11 = 2112;
      __int128 v12 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Received SDUnlockDisable (device ID: %@, pairingID: %@)",  (uint8_t *)&v9,  0x16u);
    }

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockAKSManager sharedManager](&OBJC_CLASS___SDAutoUnlockAKSManager, "sharedManager"));
    [v7 updateDynamicStoreEnabled];
  }

  else
  {
    uint64_t v8 = auto_unlock_log(a1);
    unsigned int v2 = (SDUnlockDisable *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v9) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v2,  OS_LOG_TYPE_DEFAULT,  "Received SDUnlockDisable but device ID is NULL",  (uint8_t *)&v9,  2u);
    }
  }
}

void sub_100060878(id *a1, uint64_t a2)
{
  id v3 = a1[4];
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___SDAutoUnlockPairingLockSession, a2);
  char isKindOfClass = objc_opt_isKindOfClass(v3, v4);
  id v7 = a1[4];
  if ((isKindOfClass & 1) != 0)
  {
    id v8 = v7;
    if ([v8 canceled])
    {
      uint64_t v9 = SFAutoUnlockErrorDomain;
      NSErrorUserInfoKey v105 = NSLocalizedDescriptionKey;
      v106 = @"Pairing canceled";
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v106,  &v105,  1LL));
      id v11 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v9,  118LL,  v10));
    }

    else
    {
      id v11 = a1[5];
    }

    if (v11)
    {
      unsigned int v26 = [v8 placeholder];
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockTransport sharedTransport](&OBJC_CLASS___SDAutoUnlockTransport, "sharedTransport"));
      uint64_t v28 = v27;
      if (v26)
      {
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v27 placeholderDevice]);
      }

      else
      {
        uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([a1[4] deviceID]);
        uint64_t v46 = objc_claimAutoreleasedReturnValue([v28 idsDeviceForUniqueID:v45]);

        __int16 v47 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockTransport sharedTransport](&OBJC_CLASS___SDAutoUnlockTransport, "sharedTransport"));
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v47 autoUnlockDeviceForIDSDevice:v46 cloudPaired:0 cached:0]);

        uint64_t v28 = (void *)v46;
      }

      id v48 = a1[6];
      uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v8 deviceID]);
      int v50 = (void *)objc_claimAutoreleasedReturnValue([v8 sessionID]);
      uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([v50 UUIDString]);
      [v48 disablePairingForDeviceID:v49 pairingID:v51];

      [a1[6] notifyObserverOfFailedToEnableDevice:v29 error:v11];
    }

    else
    {
      [a1[6] initializeRemotePeer];
      __int128 v33 = (void *)objc_claimAutoreleasedReturnValue([a1[6] remotePeer]);
      [v33 handlePairedSuccessfully];

      __int128 v34 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockTransport sharedTransport](&OBJC_CLASS___SDAutoUnlockTransport, "sharedTransport"));
      __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([a1[4] deviceID]);
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v34 autoUnlockDeviceForDeviceID:v35]);

      [a1[6] notifyObserverOfEnabledDevice:v29];
      uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([a1[6] suggestionManager]);
      __int128 v37 = (void *)objc_claimAutoreleasedReturnValue([v29 uniqueID]);
      [v36 setFeatureSuggestedForDeviceID:v37];

      __int128 v38 = (void *)objc_claimAutoreleasedReturnValue([a1[6] suggestionManager]);
      [v38 setRetriedSetup];

      __int128 v39 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockAKSManager sharedManager](&OBJC_CLASS___SDAutoUnlockAKSManager, "sharedManager"));
      [v39 updateDynamicStoreEnabled];

      LongHash.storage.getter(@"com.apple.watch.auto-unlock.enabled");
      __int128 v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
      [v40 setBool:1 forKey:@"AutoUnlockAlreadyEnabledBefore"];

      NSErrorUserInfoKey v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
      uint64_t v42 = SFDeviceProductVersion();
      __int16 v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
      [v43 floatValue];
      objc_msgSend(v41, "setFloat:forKey:", @"AutoUnlockLastSeenVersion");

      uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue( +[SDAutoUnlockNotificationsManager sharedManager]( &OBJC_CLASS___SDAutoUnlockNotificationsManager,  "sharedManager"));
      [v44 clearPhoneAutoUnlockUpsellNotification:1];
    }

    [a1[4] invalidate];
    uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([a1[6] lockPairingSessions]);
    uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([a1[4] deviceID]);
    [v52 removeObjectForKey:v53];

    os_log_t v54 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockTransport sharedTransport](&OBJC_CLASS___SDAutoUnlockTransport, "sharedTransport"));
    [v54 updateApproveBluetoothIDs];

LABEL_20:
LABEL_30:

    return;
  }

  uint64_t v12 = objc_opt_class(&OBJC_CLASS___SDAutoUnlockPairingKeySession, v6);
  if ((objc_opt_isKindOfClass(v7, v12) & 1) != 0)
  {
    if (!a1[5])
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue([a1[6] canceledPairingKeySessions]);
      id v15 = (void *)objc_claimAutoreleasedReturnValue([a1[4] sessionID]);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 UUIDString]);
      unsigned int v17 = [v14 containsObject:v16];

      if (v17)
      {
        uint64_t v19 = auto_unlock_log(v18);
        id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([a1[4] deviceID]);
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([a1[4] sessionID]);
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 UUIDString]);
          int v101 = 138412546;
          v102 = v21;
          __int16 v103 = 2112;
          v104 = v23;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Pairing session canceled (device ID: %@, session ID: %@)",  (uint8_t *)&v101,  0x16u);
        }

        id v24 = a1[6];
        char v25 = (void *)objc_claimAutoreleasedReturnValue([a1[4] deviceID]);
        [v24 disableKeyPairingForDeviceID:v25];
      }

      else
      {
        [a1[6] updateAdvertising];
      }
    }

    [a1[4] invalidate];
    id v64 = (void *)objc_claimAutoreleasedReturnValue([a1[6] canceledPairingKeySessions]);
    uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue([a1[4] sessionID]);
    [v64 removeObject:v65];

    id v8 = (id)objc_claimAutoreleasedReturnValue([a1[6] keyPairingSessions]);
    os_log_t v66 = (void *)objc_claimAutoreleasedReturnValue([a1[4] deviceID]);
    [v8 removeObjectForKey:v66];

    goto LABEL_30;
  }

  id v30 = a1[4];
  uint64_t v31 = objc_opt_class(&OBJC_CLASS___SDAutoUnlockLockSession, v13);
  if ((objc_opt_isKindOfClass(v30, v31) & 1) != 0)
  {
    _[a1[6] handleLockSessionCompleted:a1[4] error:a1[5]];
    return;
  }

  id v55 = a1[4];
  uint64_t v56 = objc_opt_class(&OBJC_CLASS___SDAutoUnlockKeySession, v32);
  char v57 = objc_opt_isKindOfClass(v55, v56);
  id v59 = a1[4];
  if ((v57 & 1) != 0)
  {
    id v8 = v59;
    id v60 = a1[5];
    if (v60)
    {
      if ([v60 code] == (id)213) {
        [a1[6] beginKeyRegistrationIfNecessary];
      }
      id v61 = (void *)objc_claimAutoreleasedReturnValue( +[SDAutoUnlockNotificationsManager sharedManager]( &OBJC_CLASS___SDAutoUnlockNotificationsManager,  "sharedManager"));
      [v61 removeAutoUnlockNotification];
    }

    else
    {
      id v61 = (void *)objc_claimAutoreleasedReturnValue([a1[6] keysWithAKSTokens]);
      uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue([v8 bleDevice]);
      v78 = (void *)objc_claimAutoreleasedReturnValue([v77 identifier]);
      [v61 addObject:v78];
    }

    uint64_t v79 = auto_unlock_log(objc_msgSend(a1[6], "setNeedsStrictMotionCheck:", objc_msgSend(v8, "needsStrictMotionCheck")));
    v80 = (os_log_s *)objc_claimAutoreleasedReturnValue(v79);
    if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
    {
      v81 = (void *)objc_claimAutoreleasedReturnValue([a1[4] sessionID]);
      int v101 = 138412290;
      v102 = v81;
      _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_DEFAULT,  "Removing key session %@",  (uint8_t *)&v101,  0xCu);
    }

    [a1[4] invalidate];
    v82 = (void *)objc_claimAutoreleasedReturnValue([a1[6] keyAuthSessions]);
    v83 = (void *)objc_claimAutoreleasedReturnValue([a1[4] sessionID]);
    v84 = (void *)objc_claimAutoreleasedReturnValue([v83 UUIDString]);
    [v82 removeObjectForKey:v84];

    uint64_t v86 = auto_unlock_log(v85);
    id v11 = (id)objc_claimAutoreleasedReturnValue(v86);
    if (os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_DEFAULT))
    {
      v87 = (void *)objc_claimAutoreleasedReturnValue([a1[6] keyAuthSessions]);
      int v101 = 138412290;
      v102 = v87;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v11,  OS_LOG_TYPE_DEFAULT,  "Removed key session %@",  (uint8_t *)&v101,  0xCu);
    }

    goto LABEL_20;
  }

  uint64_t v62 = objc_opt_class(&OBJC_CLASS___SDAutoUnlockProxySession, v58);
  if ((objc_opt_isKindOfClass(v59, v62) & 1) != 0)
  {
    _[a1[6] handleProxySessionCompleted:a1[4] error:a1[5]];
    return;
  }

  id v67 = a1[4];
  uint64_t v68 = objc_opt_class(&OBJC_CLASS___SDAutoUnlockRegistrationLockSession, v63);
  uint64_t v69 = objc_opt_isKindOfClass(v67, v68);
  if ((v69 & 1) != 0)
  {
    if (a1[5])
    {
      uint64_t v71 = auto_unlock_log(v69);
      uint64_t v72 = (os_log_s *)objc_claimAutoreleasedReturnValue(v71);
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue([a1[4] deviceID]);
        int v101 = 138412290;
        v102 = v73;
        _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_DEFAULT,  "Received error while registering key (%@), removing from list of registered devices.",  (uint8_t *)&v101,  0xCu);
      }

      id v74 = [a1[5] code];
      uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue([a1[6] remotePeer]);
      uint64_t v76 = v75;
      if (v74 == (id)102)
      {
        [v75 handleRegistrationFailedKeyLocked];
LABEL_52:

        v97 = (void *)objc_claimAutoreleasedReturnValue([a1[6] lockRegistrationSessionsByDeviceID]);
        v98 = (void *)objc_claimAutoreleasedReturnValue([a1[4] deviceID]);
        [v97 setObject:0 forKeyedSubscript:v98];

        [a1[4] invalidate];
        return;
      }

      uint64_t v96 = 0LL;
    }

    else
    {
      uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue([a1[6] remotePeer]);
      uint64_t v76 = v75;
      uint64_t v96 = 1LL;
    }

    [v75 handleRegistrationCompletedSuccessfully:v96];
    goto LABEL_52;
  }

  id v88 = a1[4];
  uint64_t v89 = objc_opt_class(&OBJC_CLASS___SDAutoUnlockRegistrationKeySession, v70);
  if ((objc_opt_isKindOfClass(v88, v89) & 1) != 0)
  {
    id v90 = a1[4];
    id v8 = v90;
    if (a1[5])
    {
      id v91 = [v90 isLocallyGenerated];
      if ((_DWORD)v91)
      {
        uint64_t v92 = auto_unlock_log(v91);
        v93 = (os_log_s *)objc_claimAutoreleasedReturnValue(v92);
        if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR)) {
          sub_100067C60();
        }

        id v94 = a1[6];
        uint64_t v95 = 1LL;
        goto LABEL_55;
      }

      if (a1[5])
      {
LABEL_56:
        v99 = (void *)objc_claimAutoreleasedReturnValue([a1[6] keyRegistrationSessionsByDeviceID]);
        v100 = (void *)objc_claimAutoreleasedReturnValue([a1[4] deviceID]);
        [v99 setObject:0 forKeyedSubscript:v100];

        [a1[4] invalidate];
        goto LABEL_30;
      }
    }

    id v94 = a1[6];
    uint64_t v95 = 0LL;
LABEL_55:
    [v94 setNeedsArming:v95];
    goto LABEL_56;
  }

id sub_10006269C(uint64_t a1)
{
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockAKSManager sharedManager](&OBJC_CLASS___SDAutoUnlockAKSManager, "sharedManager"));
  [v2 updateLocalLTK];

  return [*(id *)(a1 + 32) setIdsMacCountCache:-1];
}

void sub_100062748(uint64_t a1)
{
  unsigned int v2 = objc_opt_new(&OBJC_CLASS___NSDate);
  [*(id *)(a1 + 32) setNearbyDeviceChangedDate:v2];
}

id sub_100062870(uint64_t a1)
{
  return [*(id *)(a1 + 32) createPairingKeySessionWithIdentifier:*(void *)(a1 + 40) deviceID:*(void *)(a1 + 48) requestData:*(void *)(a1 + 56)];
}

id sub_100062964(uint64_t a1)
{
  return [*(id *)(a1 + 32) createRegistrationKeySessionWithIdentifier:*(void *)(a1 + 48) deviceID:*(void *)(a1 + 40) requestData:*(void *)(a1 + 56) locallyGenerated:0];
}

id sub_100062A7C(uint64_t a1)
{
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remotePeer]);
  [v2 handleRemoteRegistrationRequested];

  return _[*(id *)(a1 + 32) createRegistrationLockSessionWithDeviceID:*(void *)(a1 + 40) sessionID:*(void *)(a1 + 48) requestData:*(void *)(a1 + 56)];
}

void sub_100062D2C(uint64_t a1)
{
  unsigned int v2 = (id *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remotePeer]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceID]);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v5 = (uint64_t *)(a1 + 40);
  unsigned int v7 = [v4 isEqualToString:v6];

  if (v7)
  {
    _[*v2 handleRelockMessage];
  }

  else
  {
    uint64_t v9 = auto_unlock_log(v8);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_100067E28(v5, v2, v10);
    }
  }

void sub_100062DD8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) payload]);
  [v1 createPairingKeySessionWithIdentifier:v2 deviceID:v3 requestData:v4];
}

void sub_100063260(_Unwind_Exception *a1)
{
}

void sub_1000632F0(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 bleDevice]);

  id v5 = [v4 copy];
  [WeakRetained handleFoundPeer:v5];
}

void sub_100063360(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 bleDevice]);

  id v5 = [v4 copy];
  [WeakRetained handleFoundPeer:v5];
}

void sub_1000633D0(id a1)
{
  uint64_t v1 = auto_unlock_log(a1);
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Scanner invalidated", v3, 2u);
  }
}

void sub_100063434(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    int v6 = 138412290;
    id v7 = WeakRetained;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "SFBLEScanner timer fired %@",  (uint8_t *)&v6,  0xCu);
  }

  id v5 = objc_loadWeakRetained((id *)(a1 + 32));
  [v5 handleBLEScanTimerFired];
}

void sub_100063500(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    uint64_t v9 = (os_log_s *)sub_10008E36C(@"AUScanTimeout");
    uint64_t v8 = v9;
    if (v9)
    {
      uint64_t v9 = (os_log_s *)-[os_log_s integerValue](v9, "integerValue");
      double v10 = (double)(uint64_t)v9;
    }

    else
    {
      double v10 = 5.0;
    }

    uint64_t v11 = auto_unlock_log(v9);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 134217984;
      double v14 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Scanner started with timeout %.2f seconds",  (uint8_t *)&v13,  0xCu);
    }

    [*(id *)(a1 + 32) restartScanTimer:sub_100114580(v10)];
    goto LABEL_14;
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) scanner]);

  uint64_t v6 = auto_unlock_log(v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  uint64_t v8 = v7;
  if (!v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Scanner invalidated before activate",  (uint8_t *)&v13,  2u);
    }

id sub_100063BB4(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Scan timer fired", v5, 2u);
  }

  [*(id *)(a1 + 32) updateStringForProxySession];
  [*(id *)(a1 + 32) cancelAllLockSessionsForScanTimeout];
  [*(id *)(a1 + 32) handleScanTimerFired];
  [*(id *)(a1 + 32) invalidateAttempt];
  return [*(id *)(a1 + 32) setScanErrorString:0];
}

void sub_1000647B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lockAuthSessions]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v5]);

  id v7 = [v3 hasSessionID];
  if ((_DWORD)v7)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 sessionID]);
    id v9 = [v8 length];

    if (v9 == (id)16)
    {
      double v10 = objc_alloc(&OBJC_CLASS___NSUUID);
      id v11 = objc_claimAutoreleasedReturnValue([v3 sessionID]);
      uint64_t v12 = -[NSUUID initWithUUIDBytes:](v10, "initWithUUIDBytes:", [v11 bytes]);

      uint64_t v14 = auto_unlock_log(v13);
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(-[NSUUID UUIDString](v12, "UUIDString"));
        int v27 = 138412546;
        id v28 = v3;
        __int16 v29 = 2112;
        id v30 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Received wrapper %@, session ID %@",  (uint8_t *)&v27,  0x16u);
      }

      if (!v12)
      {
        uint64_t v24 = auto_unlock_log(v17);
        id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
          sub_100067F9C();
        }
        goto LABEL_15;
      }

      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keyAuthSessions]);
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(-[NSUUID UUIDString](v12, "UUIDString"));
      id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:v19]);

      if (v20)
      {
        uint64_t v22 = v20;
      }

      else
      {
        if (!v6)
        {
          uint64_t v25 = auto_unlock_log(v21);
          unsigned int v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
            sub_100067FC8();
          }

          goto LABEL_15;
        }

        uint64_t v22 = v6;
      }

      -[os_log_s handleMessageWithWrapper:](v22, "handleMessageWithWrapper:", v3);
LABEL_15:

      goto LABEL_16;
    }
  }

  uint64_t v23 = auto_unlock_log(v7);
  uint64_t v12 = (NSUUID *)objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_ERROR)) {
    sub_100068028(v3, (os_log_s *)v12);
  }
LABEL_16:
}

void sub_100064A28(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = auto_unlock_log(v2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_1000680E4();
  }
}

id sub_100064B3C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onqueue_keyBagLockStateChange:", *(void *)(a1 + 40));
}

void sub_100064F08(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 32)) {
    uint64_t v2 = @"UNLOCK_PHONE_UPGRADE_BODY_SIRI_ENABLED";
  }
  else {
    uint64_t v2 = @"UNLOCK_PHONE_UPGRADE_BODY";
  }
  uint64_t v3 = SFLocalizedStringForKey(v2, a2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = auto_unlock_log(v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412290;
    id v9 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Posting notification with text %@",  (uint8_t *)&v8,  0xCu);
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[SDAutoUnlockNotificationsManager sharedManager]( &OBJC_CLASS___SDAutoUnlockNotificationsManager,  "sharedManager"));
  [v7 showPhoneAutoUnlockNotificationWithBodyText:v4 isUpsell:0];
}

id sub_100065288(uint64_t a1)
{
  uint64_t v2 = objc_opt_new(&OBJC_CLASS___NSDate);
  [*(id *)(a1 + 32) setPipeConnectionChangedDate:v2];

  return [*(id *)(a1 + 32) updateAdvertising];
}

void sub_1000657B4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
  unsigned int v3 = [v2 pairedWatchLockState];

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remotePeer]);
  unsigned int v5 = [v4 isKeyBagLocked];

  if (v5) {
    BOOL v6 = v3 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6) {
    [*(id *)(a1 + 32) registerRemotePeerIfNecessary];
  }
}

void sub_1000658A0(uint64_t a1)
{
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "lockAuthSessions", 0));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 allValues]);

  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      BOOL v6 = 0LL;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v7 + 1) + 8 * (void)v6) tearDownAWDLIfNecessary];
        BOOL v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }

    while (v4);
  }
}

void sub_100065D08(uint64_t a1)
{
  uint64_t v2 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) magnetLinkTimer]);
  uint64_t v3 = dispatch_source_testcancel(v2);

  if (!v3)
  {
    id v4 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) magnetLinkTimer]);
    dispatch_source_cancel(v4);
  }

  [*(id *)(a1 + 32) setMagnetLinkTimer:0];
  id v5 = [*(id *)(a1 + 32) deviceCurrentlyUnlockedByWatch];
  int v6 = (int)v5;
  uint64_t v7 = auto_unlock_log(v5);
  __int128 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v9)
    {
      LOWORD(v14) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "### Requesting Relock Due To Magnet Link Disconnect",  (uint8_t *)&v14,  2u);
    }

    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localDeviceController]);
    [v10 lockDevice];

    [*(id *)(a1 + 32) setLastLockedByRelock:1];
    [*(id *)(a1 + 32) cancelAutoUnlock];
    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[SDAutoUnlockNotificationsManager sharedManager]( &OBJC_CLASS___SDAutoUnlockNotificationsManager,  "sharedManager"));
    [v11 showPhoneAutoRelockNotification];

    __int128 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cachedMetrics]);
    -[os_log_s setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  SDAutoUnlockManagerMetricAutoRelockKey);
  }

  else if (v9)
  {
    unsigned int v12 = [*(id *)(a1 + 32) deviceCurrentlyUnlockedByWatch];
    uint64_t v13 = @"NO";
    if (v12) {
      uint64_t v13 = @"YES";
    }
    int v14 = 138412290;
    id v15 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Not Requesting Relock, deviceCurrentlyUnlockedByWatch: %@",  (uint8_t *)&v14,  0xCu);
  }
}

id sub_10006687C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) dumpState];
}

void sub_10006796C( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_100067980(uint8_t *a1, void *a2, void *a3, os_log_s *a4)
{
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([a2 modelIdentifier]);
  *(_DWORD *)a1 = 138412290;
  *a3 = v7;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a4,  OS_LOG_TYPE_DEBUG,  "Unsupported hardware model identifier:%@",  a1,  0xCu);
}

void sub_1000679F4(void *a1, os_log_s *a2)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a1 modelIdentifier]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([a1 productVersion]);
  int v6 = 138412546;
  uint64_t v7 = v4;
  __int16 v8 = 2112;
  BOOL v9 = v5;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "Unsupported hardware/software model identifier:%@, version:%@",  (uint8_t *)&v6,  0x16u);

  sub_1000241EC();
}

void sub_100067AA8()
{
}

void sub_100067AD4()
{
}

void sub_100067B00()
{
}

void sub_100067B60(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 2112;
  uint64_t v7 = a2;
  sub_100038BF8( (void *)&_mh_execute_header,  a3,  (uint64_t)a3,  "### Error sending disable message (device id: %@, error: %@)",  (uint8_t *)&v4);
  sub_10001480C();
}

void sub_100067BDC()
{
}

void sub_100067C08()
{
}

void sub_100067C34()
{
}

void sub_100067C60()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "Local key registration session failed, setting needsArming = YES",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_100067C8C(void *a1)
{
}

void sub_100067D00(void *a1)
{
}

void sub_100067D74(void *a1, uint64_t a2, os_log_s *a3)
{
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a1 sessionID]);
  sub_10001C438();
  __int16 v8 = 2112;
  BOOL v9 = a1;
  __int16 v10 = 2112;
  uint64_t v11 = a2;
  _os_log_error_impl( (void *)&_mh_execute_header,  a3,  OS_LOG_TYPE_ERROR,  "Incoming message missing info (session = %@, wrapper = %@, data = %@)",  v7,  0x20u);
}

void sub_100067E28(uint64_t *a1, id *a2, os_log_s *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*a2 remotePeer]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 deviceID]);
  int v8 = 138412546;
  uint64_t v9 = v4;
  __int16 v10 = 2112;
  uint64_t v11 = v6;
  sub_100038BF8( (void *)&_mh_execute_header,  a3,  v7,  "Relock message if from %@ but current remote peer is %@",  (uint8_t *)&v8);

  sub_1000241EC();
}

void sub_100067ED4()
{
}

void sub_100067F34( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100067F9C()
{
}

void sub_100067FC8()
{
}

void sub_100068028(void *a1, os_log_s *a2)
{
  else {
    uint64_t v4 = @"NO";
  }
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1 sessionID]);
  int v7 = 138412546;
  int v8 = v4;
  __int16 v9 = 2048;
  id v10 = [v5 length];
  sub_100038BF8( (void *)&_mh_execute_header,  a2,  v6,  "Missing session ID (has session ID %@, length %ld)",  (uint8_t *)&v7);

  sub_1000241EC();
}

void sub_1000680E4()
{
}

void sub_100068144()
{
}

id sub_100068658(uint64_t a1)
{
  return [*(id *)(a1 + 32) _activate];
}

id sub_100068730(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

uint64_t sub_100068D88(uint64_t result)
{
  uint64_t v1 = result;
  if (dword_100641EA0 <= 40)
  {
    if (dword_100641EA0 != -1 || (uint64_t result = _LogCategory_Initialize(&dword_100641EA0, 40LL), (_DWORD)result))
    {
      uint64_t v2 = "yes";
      if (*(_BYTE *)(*(void *)(v1 + 32) + 264LL)) {
        uint64_t v3 = "yes";
      }
      else {
        uint64_t v3 = "no";
      }
      if (!*(_BYTE *)(v1 + 40)) {
        uint64_t v2 = "no";
      }
      uint64_t result = LogPrintF( &dword_100641EA0,  "-[SDAutoFillAgent setPreventNotifications:]_block_invoke",  40LL,  "Prevent notifications: %s -> %s\n",  v3,  v2);
    }
  }

  *(_BYTE *)(*(void *)(v1 + 32) + 264LL) = *(_BYTE *)(v1 + 40);
  return result;
}

void *sub_100069DD4(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 32);
  uint64_t v3 = (void *)result[26];
  if (v3)
  {
    if (dword_100641EA0 <= 40)
    {
      if (dword_100641EA0 != -1)
      {
LABEL_4:
        unsigned int v4 = [v3 screenOn];
        uint64_t v5 = "off";
        if (v4) {
          uint64_t v5 = "on";
        }
        LogPrintF( &dword_100641EA0,  "-[SDAutoFillAgent _screenStateChanged:]_block_invoke",  40LL,  "Screen state changed to %s\n",  v5);
        uint64_t result = *(void **)(a1 + 32);
        goto LABEL_8;
      }

      int v6 = _LogCategory_Initialize(&dword_100641EA0, 40LL);
      uint64_t result = *(void **)(a1 + 32);
      if (v6)
      {
        uint64_t v3 = (void *)result[26];
        goto LABEL_4;
      }
    }

id sub_100069F10(uint64_t a1)
{
  id result = *(id *)(*(void *)(a1 + 32) + 208LL);
  if (result)
  {
    unsigned int v3 = [result deviceUIUnlocked];
    if (dword_100641EA0 <= 40
      && (dword_100641EA0 != -1 || _LogCategory_Initialize(&dword_100641EA0, 40LL)))
    {
      unsigned int v4 = "locked";
      if (v3) {
        unsigned int v4 = "unlocked";
      }
      LogPrintF( &dword_100641EA0,  "-[SDAutoFillAgent _uiLockStatusChanged:]_block_invoke",  40LL,  "UI lock status changed to %s\n",  v4);
    }

    uint64_t v5 = *(void **)(a1 + 32);
    if (v3) {
      [v5 _activateUIDelayTimer];
    }
    else {
      [v5 _deactivateUIDelayTimer];
    }
    return [*(id *)(a1 + 32) _update];
  }

  return result;
}

id sub_10006A3D0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _deviceFound:a2];
}

id sub_10006A3DC(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _deviceLost:a2];
}

id sub_10006A3E8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _deviceChanged:a2];
}

void sub_10006A3F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (dword_100641EA0 <= 60
      && (dword_100641EA0 != -1 || _LogCategory_Initialize(&dword_100641EA0, 60LL)))
    {
      LogPrintF( &dword_100641EA0,  "-[SDAutoFillAgent _discoveryEnsureStarted]_block_invoke_4",  60LL,  "### Discovery activate failed: %@\n",  v3);
    }
  }

  else if (dword_100641EA0 <= 30 {
         && (dword_100641EA0 != -1 || _LogCategory_Initialize(&dword_100641EA0, 30LL)))
  }
  {
    LogPrintF( &dword_100641EA0,  "-[SDAutoFillAgent _discoveryEnsureStarted]_block_invoke_4",  30LL,  "Discovery activated\n");
  }

  [*(id *)(a1 + 32) _update];
}

void sub_10006A4D0(id a1)
{
  if (dword_100641EA0 <= 90 && (dword_100641EA0 != -1 || _LogCategory_Initialize(&dword_100641EA0, 90LL))) {
    LogPrintF( &dword_100641EA0,  "-[SDAutoFillAgent _discoveryEnsureStarted]_block_invoke_5",  90LL,  "### ClinkClient interrupted\n");
  }
}

void sub_10006A530(id a1)
{
  if (dword_100641EA0 <= 30 && (dword_100641EA0 != -1 || _LogCategory_Initialize(&dword_100641EA0, 30LL))) {
    LogPrintF( &dword_100641EA0,  "-[SDAutoFillAgent _discoveryEnsureStarted]_block_invoke_6",  30LL,  "ClinkClient invalidated\n");
  }
}

id sub_10006A590(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _clientClinkDeviceFound:a2];
}

id sub_10006A59C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _clientClinkDeviceLost:a2];
}

id sub_10006A5A8(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _clientClinkDeviceChanged:a2];
}

void sub_10006A5B4(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2)
  {
    if (dword_100641EA0 <= 90)
    {
      int v6 = v2;
      if (dword_100641EA0 != -1 || (int v4 = _LogCategory_Initialize(&dword_100641EA0, 90LL), v3 = v6, v4))
      {
        LogPrintF( &dword_100641EA0,  "-[SDAutoFillAgent _discoveryEnsureStarted]_block_invoke_10",  90LL,  "### CompanionLink start failed: %@\n",  v3);
LABEL_8:

        return;
      }
    }
  }

  else if (dword_100641EA0 <= 30)
  {
    int v6 = 0LL;
    if (dword_100641EA0 != -1 || (v5 = _LogCategory_Initialize(&dword_100641EA0, 30LL), id v3 = 0LL, v5))
    {
      LogPrintF( &dword_100641EA0,  "-[SDAutoFillAgent _discoveryEnsureStarted]_block_invoke_10",  30LL,  "CompanionLink started\n");
      goto LABEL_8;
    }
  }
}

LABEL_21:
  return v20;
}

  if (dword_100642730 <= 50 && (dword_100642730 != -1 || _LogCategory_Initialize(&dword_100642730, 50LL))) {
    LogPrintF( &dword_100642730,  "-[SDAppleIDDatabaseManager _readPrefs]",  50LL,  "Reading legacy preferences for AppleID and Person Info");
  }
  uint64_t v23 = (void *)CFPreferencesCopyValue( @"AppleIDAccount",  @"com.apple.sharingd",  v4,  kCFPreferencesCurrentHost);

  uint64_t v25 = objc_opt_class(&OBJC_CLASS___NSData, v24);
  if ((objc_opt_isKindOfClass(v23, v25) & 1) == 0) {
    goto LABEL_38;
  }

  uint64_t v53 = 0LL;
  int v27 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  objc_opt_class(&OBJC_CLASS___SFAppleIDAccount, v26),  v23,  &v53);
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(v27);
  id v20 = v53;
  if (!v22)
  {
    if (dword_100642730 <= 60
      && (dword_100642730 != -1 || _LogCategory_Initialize(&dword_100642730, 60LL)))
    {
      LogPrintF( &dword_100642730,  "-[SDAppleIDDatabaseManager _readPrefs]",  60LL,  "### Failed to unarchive %@ pref value with error %@\n",  @"AppleIDAccount",  v20);
    }

  return v20;
}

  return v9;
}

  return v9;
}

        int v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      unsigned int v12 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v3,  "countByEnumeratingWithState:objects:count:",  &v13,  v17,  16LL);
      int v5 = v12;
    }

    while (v12);
  }

  -[NSMutableSet removeAllObjects](self->_assertions, "removeAllObjects");
}

      int v6 = 4294960569LL;
      goto LABEL_22;
    }

    int v8 = (void *)v7;
    __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([v5 myAppleIDValidationRecord]);
    id v10 = v9;
    if (v9)
    {
      uint64_t v11 = objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"AppleIDAccountValidationRecordData"]);
      if (v11)
      {
        unsigned int v12 = (void *)v11;
        if (v4) {
          v4[2](v4, v8, v11, 0LL);
        }
        goto LABEL_7;
      }

      if (dword_100642CD8 <= 60
        && (dword_100642CD8 != -1 || _LogCategory_Initialize(&dword_100642CD8, 60LL)))
      {
        LogPrintF(&dword_100642CD8, "-[SDXPCConnection appleIDInfoWithCompletion:]", 60LL, "### No record data?\n");
      }

      goto LABEL_21;
    }

    int v6 = 4294960534LL;
  }

  watchNotifCenter = self->_watchNotifCenter;
  __int16 v29 = v23;
  id v30 = watchNotifCenter;
  if (v30 == v29)
  {

    goto LABEL_26;
  }

  uint64_t v31 = v30;
  if ((v12 == 0LL) != (v30 != 0LL))
  {
    uint64_t v32 = -[UNUserNotificationCenter isEqual:](v29, "isEqual:", v30);

    if (!v32) {
      goto LABEL_28;
    }
LABEL_26:
    __int128 v33 = _os_activity_create( (void *)&_mh_execute_header,  "Sharing/SDNotificationManager/didReceiveNotificationResponse/watch",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    state.opaque[0] = 0LL;
    state.opaque[1] = 0LL;
    os_activity_scope_enter(v33, &state);
    -[SDNotificationManager _watchHandleResponse:completion:](self, "_watchHandleResponse:completion:", v9, v10);
    os_activity_scope_leave(&state);

    goto LABEL_12;
  }

LABEL_28:
  if (dword_100643408 <= 60)
  {
    if (dword_100643408 != -1 || _LogCategory_Initialize(&dword_100643408, 60LL)) {
      LogPrintF( &dword_100643408,  "-[SDNotificationManager userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:]",  60LL,  "### Unrecognized notification center: %@ for response: %@\n",  v29,  v9);
    }
    if (dword_100643408 <= 60
      && (dword_100643408 != -1 || _LogCategory_Initialize(&dword_100643408, 60LL)))
    {
      NSErrorUserInfoKey v41 = NSLocalizedDescriptionKey;
      __int128 v34 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  DebugGetErrorString(4294960591LL, 0LL, 0LL));
      __int128 v35 = objc_claimAutoreleasedReturnValue(v34);
      uint64_t v36 = (void *)v35;
      __int128 v37 = @"?";
      if (v35) {
        __int128 v37 = (const __CFString *)v35;
      }
      uint64_t v42 = v37;
      __int128 v38 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v42,  &v41,  1LL));
      __int128 v39 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -6705LL,  v38));
      LogPrintF( &dword_100643408,  "-[SDNotificationManager userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:]",  60LL,  "### Error handling notification response: %@\n",  v39);
    }
  }

  if (v10) {
    v10[2](v10);
  }
LABEL_12:
}

          __int16 v43 = paired_unlock_log(v26, v27);
          uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
          if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            uint64_t v62 = v21;
            _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "Escrow record exists, but not available (status = %d)",  buf,  8u);
          }

          __int128 v40 = 0LL;
          goto LABEL_33;
        }

        __int16 v47 = paired_unlock_log(v26, v27);
        uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
          sub_1000F8E34();
        }
      }

      else
      {
        int v8 = v59;
        __int128 v39 = v55;
        if (v21 != -536870160)
        {
          if (v21 != -536363000)
          {
            if (!v21)
            {
              __int128 v40 = v60;
              goto LABEL_33;
            }

            goto LABEL_29;
          }

          goto LABEL_21;
        }

        uint64_t v45 = paired_unlock_log(v26, v27);
        uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          uint64_t v62 = -536870160;
          _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "Escrow record not found status = %d",  buf,  8u);
        }
      }

LABEL_32:
      __int128 v40 = -1LL;
LABEL_33:
      if (v39) {
        void *v39 = v21;
      }
      goto LABEL_35;
    }
  }

  NSErrorUserInfoKey v41 = paired_unlock_log(v9, v10);
  uint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
    sub_1000F8D90(self);
  }

  __int128 v40 = -1LL;
LABEL_35:

  return v40;
}
}

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  self->_watchOldLTKSyncStatus));
  [v3 setObject:v16 forKey:@"watchOldLTKSyncStatus"];

  if ((*(_BYTE *)&self->_has & 0x10) != 0)
  {
LABEL_14:
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  self->_watchNewLTKSyncStatus));
    [v3 setObject:v10 forKey:@"watchNewLTKSyncStatus"];
  }

  PBDataWriterWriteInt32Field(v10, self->_watchOldLTKSyncStatus, 8LL);
  int v4 = v10;
  if ((*(_BYTE *)&self->_has & 0x10) != 0)
  {
LABEL_14:
    PBDataWriterWriteInt32Field(v10, self->_watchNewLTKSyncStatus, 9LL);
    int v4 = v10;
  }

  v4[14] = self->_watchOldLTKSyncStatus;
  *((_BYTE *)v4 + 64) |= 0x20u;
  if ((*(_BYTE *)&self->_has & 0x10) != 0)
  {
LABEL_14:
    v4[13] = self->_watchNewLTKSyncStatus;
    *((_BYTE *)v4 + 64) |= 0x10u;
  }

  self->_watchOldLTKSyncStatus = *((_DWORD *)v4 + 14);
  *(_BYTE *)&self->_has |= 0x20u;
  if ((*((_BYTE *)v4 + 64) & 0x10) != 0)
  {
LABEL_14:
    self->_watchNewLTKSyncStatus = *((_DWORD *)v4 + 13);
    *(_BYTE *)&self->_has |= 0x10u;
  }

  return v13;
}

    int v27 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    id v28 = *v27;
    __int16 v29 = (-1LL << v3) - 1;
  }

  else
  {
    int v27 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    __int16 v29 = *v27;
    id v28 = (-1LL << a1) - 1;
  }

  void *v27 = v29 & v28;
  id v30 = *(void *)(a2 + 16);
  uint64_t v31 = __OFSUB__(v30, 1LL);
  uint64_t v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v32;
    ++*(_DWORD *)(a2 + 36);
  }

    uint64_t v25 = (uint64_t *)(v5 + 8 * ((unint64_t)v4 >> 6));
    unsigned int v26 = *v25;
    int v27 = (-1LL << v4) - 1;
  }

  else
  {
    uint64_t v25 = (uint64_t *)(v5 + 8 * (result >> 6));
    int v27 = *v25;
    unsigned int v26 = (-1LL << result) - 1;
  }

  void *v25 = v27 & v26;
  id v28 = *(void *)(a2 + 16);
  __int16 v29 = __OFSUB__(v28, 1LL);
  id v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

    v129 = (void *)((v19 - 1) & v19);
    v130 = (const __CFString *)v20;
    uint64_t v17 = __clz(__rbit64(v19)) + (v20 << 6);
LABEL_22:
    uint64_t v22 = *(void *)(*(void *)(v126 + 56) + 8 * v17);
    uint64_t v23 = sub_100183098(&qword_100648080);
    inited = swift_initStackObject(v23, v134);
    *(_OWORD *)(inited + 16) = v117;
    uint64_t v25 = (__CFString *)v123;
    *(void *)(inited + 32) = v123;
    type metadata accessor for CFString(0LL);
    v127 = v26;
    id v28 = (__CFString *)v121;
    int v27 = (__CFString *)v122;
    *(void *)(inited + 4sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = v122;
    *(void *)(inited + 64) = v26;
    *(void *)(inited + 72) = v28;
    __int16 v29 = v116;
    *(void *)(inited + 8sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = 0xD00000000000001BLL;
    *(void *)(inited + 8_Block_object_dispose((const void *)(v1 - 96), 8) = v29;
    uint64_t v31 = (__CFString *)v119;
    id v30 = (__CFString *)v120;
    *(void *)(inited + 104) = &type metadata for String;
    *(void *)(inited + 112) = v30;
    uint64_t v32 = v115;
    *(void *)(inited + 12sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = 0xD00000000000002CLL;
    *(void *)(inited + 12_Block_object_dispose((const void *)(v1 - 96), 8) = v32;
    *(void *)(inited + 144) = &type metadata for String;
    *(void *)(inited + 152) = v31;
    uint64_t v1 = *(void *)(v22 + 24);
    *(void *)(inited + 16sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = *(void *)(v22 + 16);
    *(void *)(inited + 16_Block_object_dispose((const void *)(v1 - 96), 8) = v1;
    __int128 v33 = (__CFString *)v118;
    *(void *)(inited + 184) = &type metadata for String;
    *(void *)(inited + 192) = v33;
    *(void *)(inited + 224) = &type metadata for Bool;
    *(_BYTE *)(inited + 20sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = 1;
    v128 = v22;
    swift_retain(v22);
    __int128 v34 = v25;
    __int128 v35 = v27;
    uint64_t v36 = v28;
    __int128 v37 = v30;
    __int128 v38 = v31;
    swift_bridgeObjectRetain(v1);
    __int128 v39 = v33;
    __int128 v40 = sub_100391DD8(inited);
    sub_100183F14( (unint64_t *)&qword_100644D10,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1004CCE0C);
    isa = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
    uint64_t v2 = SecItemDelete(isa);

    if (v2)
    {
      uint64_t v42 = v128;
      if (qword_1006441C0 != -1) {
        swift_once(&qword_1006441C0, sub_1003412E4);
      }
      __int16 v43 = type metadata accessor for Logger(0LL);
      sub_100186DE4(v43, (uint64_t)qword_10064FB18);
      uint64_t v44 = swift_bridgeObjectRetain(v40);
      uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
      uint64_t v46 = static os_log_type_t.error.getter(v45);
      uint64_t v1 = v46;
      if (os_log_type_enabled(v45, v46))
      {
        __int16 v47 = swift_slowAlloc(18LL, -1LL);
        id v48 = (NSDictionary *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)__int16 v47 = v111;
        v49.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
        *(NSDictionary *)(v47 + 4) = v49;
        v48->super.isa = v49.super.isa;
        swift_bridgeObjectRelease_n(v40, 2LL);
        *(_WORD *)(v47 + 12) = 1024;
        *(_DWORD *)(v47 + 14) = v2;
        _os_log_impl( (void *)&_mh_execute_header,  v45,  (os_log_type_t)v1,  "Failed to delete keychain item: %@, error: %d",  (uint8_t *)v47,  0x12u);
        int v50 = sub_100183098(&qword_1006454E0);
        swift_arrayDestroy(v48, 1LL, v50);
        swift_slowDealloc(v48, -1LL, -1LL);
        swift_slowDealloc(v47, -1LL, -1LL);
        swift_release(v42);
      }

      else
      {
        swift_release(v42);

        swift_bridgeObjectRelease_n(v40, 2LL);
      }
    }

    else
    {
      swift_release(v128);
      swift_bridgeObjectRelease(v40);
    }

    int v8 = v124;
    int v5 = v125;
    int v14 = (unint64_t)v129;
    id v15 = v130;
  }

  uint64_t v21 = (char *)&v15->isa + 4;
  if ((uint64_t)&v15->isa + 4 < v113)
  {
    uint64_t v19 = *(void *)(v112 + 8LL * (void)v21);
    if (!v19)
    {
      while (1)
      {
        id v20 = (int64_t)(v21 + 1);
        if (__OFADD__(v21, 1LL)) {
          break;
        }
        if (v20 >= v113) {
          goto LABEL_28;
        }
        uint64_t v19 = *(void *)(v112 + 8 * v20);
        ++v21;
        if (v19) {
          goto LABEL_21;
        }
      }

    uint64_t v19 = (v27 - 1) & v27;
    uint64_t v25 = __clz(__rbit64(v27)) + (v26 << 6);
    id v20 = v26;
  }

  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

    id v30 = v4;
    int v27 = (v34 - 1) & v34;
    v100 = v35;
    uint64_t v32 = __clz(__rbit64(v34)) + (v35 << 6);
LABEL_22:
    __int128 v37 = v91;
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v19 + 16))( v91,  *(void *)(a1 + 48) + *(void *)(v19 + 72) * v32,  v18,  v28);
    __int128 v38 = (*(uint64_t (**)(char *, char *, uint64_t))(v19 + 32))(v22, v37, v18);
    NWBrowser.Result.metadata.getter(v38);
    int v4 = v30;
    __int128 v39 = (*(uint64_t (**)(char *, uint64_t))(v30 + 88))(v6, v3);
    if (v39 == v90)
    {
      (*(void (**)(char *, uint64_t))(v30 + 96))(v6, v3);
      __int128 v40 = v82;
      NSErrorUserInfoKey v41 = v81;
      uint64_t v42 = v30;
      __int16 v43 = v85;
      (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v81, v6, v85);
      uint64_t v44 = (uint64_t)v84;
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v84, v41, v43);
      sub_10031F0AC(v44, v104);
      uint64_t v45 = sub_100298D5C((uint64_t)v104, (uint64_t)v105);
      if (*((void *)&v105[0] + 1))
      {
        v106 = v105[0];
        v107 = v105[1];
        v108 = v105[2];
        uint64_t v46 = v78;
        NWBrowser.Result.endpoint.getter(v45);
        (*(void (**)(char *, uint64_t))(v98 + 8))(v22, v18);
        (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v43);
        __int16 v47 = v77;
        id v48 = v46;
        int v6 = v88;
        (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v77, v48, v80);
        uint64_t v49 = &v47[*(int *)(v97 + 20)];
        int v50 = v107;
        *(_OWORD *)uint64_t v49 = v106;
        *((_OWORD *)v49 + 1) = v50;
        int v4 = v89;
        *((_OWORD *)v49 + 2) = v108;
        uint64_t v51 = (uint64_t)v47;
        unsigned int v12 = v95;
        sub_10029881C(v51, (uint64_t)v95);
        uint64_t v52 = 0LL;
        a1 = v83;
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v98 + 8))(v22, v18);
        (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v43);
        uint64_t v52 = 1LL;
        a1 = v83;
        unsigned int v12 = v95;
        int v4 = v42;
      }
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v3);
      uint64_t v52 = 1LL;
    }

    uint64_t v53 = v99;
    os_log_t v54 = v97;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v99 + 56))(v12, v52, 1LL, v97);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v12, 1LL, v54) == 1)
    {
      sub_1002989E4((uint64_t)v12);
      id v3 = v96;
      uint64_t v18 = v92;
      uint64_t v19 = v98;
    }

    else
    {
      id v55 = v93;
      sub_10029881C((uint64_t)v12, v93);
      sub_10029879C(v55, v94);
      uint64_t v56 = (unint64_t)v103;
      if ((swift_isUniquelyReferenced_nonNull_native(v103) & 1) == 0) {
        uint64_t v56 = sub_10018C8D4(0, *(void *)(v56 + 16) + 1LL, 1, v56);
      }
      uint64_t v19 = v98;
      uint64_t v58 = *(void *)(v56 + 16);
      char v57 = *(void *)(v56 + 24);
      if (v58 >= v57 >> 1) {
        uint64_t v56 = sub_10018C8D4(v57 > 1, v58 + 1, 1, v56);
      }
      *(void *)(v56 + 16) = v58 + 1;
      sub_10029881C( v94,  v56 + ((*(unsigned __int8 *)(v99 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80))
      + *(void *)(v99 + 72) * v58);
      __int16 v103 = (const char *)v56;
      sub_1002987E0(v93);
      id v3 = v96;
      int v4 = v89;
      int v6 = v88;
      unsigned int v12 = v95;
      uint64_t v18 = v92;
    }

    __int16 v29 = v100;
  }

  uint64_t v36 = v29 + 4;
  if (v29 + 4 < v87)
  {
    __int128 v34 = *(void *)(v86 + 8 * v36);
    if (!v34)
    {
      while (1)
      {
        __int128 v35 = v36 + 1;
        if (__OFADD__(v36, 1LL)) {
          goto LABEL_41;
        }
        if (v35 >= v87) {
          goto LABEL_33;
        }
        __int128 v34 = *(void *)(v86 + 8 * v35);
        ++v36;
        if (v34) {
          goto LABEL_21;
        }
      }
    }

    __int128 v35 = v29 + 4;
    goto LABEL_21;
  }

    return;
  }

  swift_release(v186);
  __int16 v29 = v137;
  uint64_t v75 = v177;
  if (v177)
  {
    uint64_t v76 = String.utf8CString.getter(v156, v177);
    swift_bridgeObjectRelease(v75);
    nw_endpoint_set_device_name(v29, v76 + 32);
    swift_release(v76);
  }

  int v14 = v135;
  uint64_t v77 = v176;
  v78 = v172;
  uint64_t v79 = v173;
  if (v172)
  {
    v80 = String.utf8CString.getter(v152, v172);
    swift_bridgeObjectRelease(v78);
    nw_endpoint_set_device_model(v29, v80 + 32);
    swift_release(v80);
  }

  if (v77)
  {
    v81 = v167;
    v82 = String.utf8CString.getter(v167, v77);
    nw_endpoint_set_device_id(v29, v82 + 32);
    swift_release(v82);
    swift_bridgeObjectRelease(v79);
    v83 = sub_10037C5B0(8LL, v81, (unint64_t)v77);
    uint64_t v85 = v84;
    v87 = v86;
    uint64_t v89 = v88;
    swift_bridgeObjectRelease(v77);
    id v90 = static String._fromSubstring(_:)(v83, v85, v87, v89);
    uint64_t v92 = v91;
    swift_bridgeObjectRelease(v89);
LABEL_29:
    v192 = v90;
    v193 = v92;
    v102._countAndFlagsBits = 58LL;
    v102._object = (void *)0xE100000000000000LL;
    String.append(_:)(v102);
    __int16 v103 = v193;
    v195 = v192;
    goto LABEL_30;
  }

  if (v79)
  {
    v93 = String.lowercased()();
    swift_bridgeObjectRelease(v79);
    id v94 = sub_10037C5B0(8LL, v93._countAndFlagsBits, (unint64_t)v93._object);
    uint64_t v96 = v95;
    v98 = v97;
    v100 = v99;
    swift_bridgeObjectRelease((const char *)v93._object);
    id v90 = static String._fromSubstring(_:)(v94, v96, v98, v100);
    uint64_t v92 = v101;
    swift_bridgeObjectRelease(v100);
    goto LABEL_29;
  }

  v195 = 980183406LL;
  __int16 v103 = (const char *)0xE400000000000000LL;
LABEL_30:
  v196 = v103;
  uint64_t v44 = v183;
  NSErrorUserInfoKey v105 = v180;
  v104 = v181;
  if ((v165 & 1) != 0)
  {
    v106._countAndFlagsBits = 97LL;
    v106._object = (void *)0xE100000000000000LL;
    String.append(_:)(v106);
  }

  if ((v166 & 1) != 0)
  {
    v107._countAndFlagsBits = 98LL;
    v107._object = (void *)0xE100000000000000LL;
    String.append(_:)(v107);
  }

  if ((v143 & 1) != 0)
  {
    v108._countAndFlagsBits = 99LL;
    v108._object = (void *)0xE100000000000000LL;
    String.append(_:)(v108);
  }

  v109 = v134;
  sub_100302178((uint64_t)v44, v134);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v105 + 48))(v109, 1LL, v104) == 1)
  {
    sub_100187100(v109, &qword_10064DF00);
  }

  else
  {
    v110 = v129;
    (*(void (**)(char *, uint64_t, uint64_t))(v105 + 32))(v129, v109, v104);
    v111 = v128;
    (*(void (**)(char *, char *, uint64_t))(v105 + 16))(v128, v110, v104);
    v112 = v130;
    SFAirDrop.TXTRecord.init(deviceRelationship:)(v111);
    SFAirDrop.TXTRecord.addToEndpoint(_:)(v29);
    (*(void (**)(char *, uint64_t))(v131 + 8))(v112, v132);
    (*(void (**)(char *, uint64_t))(v105 + 8))(v110, v104);
  }

  uint64_t v68 = sub_1003011D8();
  __int16 v47 = v113;
  if (v136 == v68)
  {
    v114 = v14;
    if (v14 == v113) {
      goto LABEL_43;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v136, v14, v68, v113, 0LL) & 1) != 0)
  {
    v114 = v47;
LABEL_43:
    swift_bridgeObjectRelease(v114);
    swift_unknownObjectRelease(v29);
    *(void *)&v115 = swift_bridgeObjectRelease(v14).n128_u64[0];
    swift_bridgeObjectRelease(v196, v115);
    goto LABEL_44;
  }

  if (qword_100644148 != -1) {
LABEL_53:
  }
    swift_once(&qword_100644148, sub_1002FEF00);
  v118 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v118, (uint64_t)qword_10064DDF8);
  v120 = v195;
  v119 = v196;
  *(void *)&v121 = swift_bridgeObjectRetain(v196).n128_u64[0];
  *(void *)&v122 = swift_bridgeObjectRetain(v14, v121).n128_u64[0];
  swift_bridgeObjectRetain(v47, v122);
  v124 = (os_log_s *)Logger.logObject.getter(v123);
  v125 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v124, v125))
  {
    v126 = swift_slowAlloc(32LL, -1LL);
    v127 = swift_slowAlloc(96LL, -1LL);
    v192 = v127;
    *(_DWORD *)v126 = 136315651;
    swift_bridgeObjectRetain(v119);
    v194 = sub_10018CDB4(v120, (unint64_t)v119, &v192);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v194, &v195, v126 + 4, v126 + 12);
    swift_bridgeObjectRelease_n(v119, 3LL);
    *(_WORD *)(v126 + 12) = 2081;
    swift_bridgeObjectRetain(v14);
    v194 = sub_10018CDB4(v136, (unint64_t)v14, &v192);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v194, &v195, v126 + 14, v126 + 22);
    swift_bridgeObjectRelease_n(v14, 3LL);
    *(_WORD *)(v126 + 22) = 2081;
    swift_bridgeObjectRetain(v47);
    v194 = sub_10018CDB4(v68, (unint64_t)v47, &v192);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v194, &v195, v126 + 24, v126 + 32);
    swift_bridgeObjectRelease_n(v47, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v124,  v125,  "DiscoveredDevice Updated %s [%{private}s] -> [%{private}s]",  (uint8_t *)v126,  0x20u);
    swift_arrayDestroy(v127, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v127, -1LL, -1LL);
    swift_slowDealloc(v126, -1LL, -1LL);

    swift_unknownObjectRelease(v137);
    v116 = (uint64_t)v183;
    return sub_100187100(v116, &qword_10064DF00);
  }

  swift_bridgeObjectRelease_n(v119, 2LL);
  swift_bridgeObjectRelease_n(v14, 2LL);
  swift_bridgeObjectRelease_n(v47, 2LL);

  swift_unknownObjectRelease(v29);
LABEL_44:
  v116 = (uint64_t)v44;
  return sub_100187100(v116, &qword_10064DF00);
}

    uint64_t v18 = (v26 - 1) & v26;
    id v64 = v27;
    uint64_t v24 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_22:
    __int16 v29 = v57;
    id v30 = v54;
    sub_1001A4B84( *(void *)(v63 + 48) + *(void *)(v57 + 72) * v24,  v54,  type metadata accessor for SDAirDropDiscoveredEndpoint);
    uint64_t v31 = type metadata accessor for TaskPriority(0LL);
    uint64_t v32 = *(void *)(v31 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v9, 1LL, 1LL, v31);
    __int128 v33 = (uint64_t)v9;
    __int128 v34 = v55;
    sub_1001A4B40(v30, v55, type metadata accessor for SDAirDropDiscoveredEndpoint);
    __int128 v35 = *(unsigned __int8 *)(v29 + 80);
    uint64_t v36 = (v35 + 40) & ~v35;
    __int128 v37 = (void *)swift_allocObject(v59, v36 + v56, v35 | 7);
    v37[2] = 0LL;
    __int128 v38 = v58;
    v37[3] = 0LL;
    v37[4] = v38;
    __int128 v39 = v34;
    __int16 v9 = (char *)v33;
    sub_1001A4B40(v39, (uint64_t)v37 + v36, type metadata accessor for SDAirDropDiscoveredEndpoint);
    LODWORD(v36) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v33, 1LL, v31);
    __int128 v40 = swift_retain(v38);
    if ((_DWORD)v36 == 1)
    {
      sub_100187100(v33, &qword_100646560);
      NSErrorUserInfoKey v41 = 0LL;
    }

    else
    {
      uint64_t v42 = TaskPriority.rawValue.getter(v40);
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v31);
      NSErrorUserInfoKey v41 = v42;
    }

    id v20 = v64;
    __int16 v43 = v37[2];
    if (v43)
    {
      uint64_t v44 = v37[3];
      ObjectType = swift_getObjectType(v43);
      swift_unknownObjectRetain(v43);
      uint64_t v46 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v44);
      id v48 = v47;
      swift_unknownObjectRelease(v43);
    }

    else
    {
      uint64_t v46 = 0LL;
      id v48 = 0LL;
    }

    uint64_t v49 = swift_allocObject(v60, 32LL, 7LL);
    *(void *)(v49 + 16) = v61;
    *(void *)(v49 + 24) = v37;
    int v50 = sub_100183098(&qword_100646100);
    if (v48 | v46)
    {
      v65[0] = 0LL;
      v65[1] = 0LL;
      uint64_t v21 = v65;
      v65[2] = v46;
      v65[3] = v48;
    }

    else
    {
      uint64_t v21 = 0LL;
    }

    uint64_t v22 = swift_task_create(v41 | 0x1C00, v21, v50, v62, v49);
    id result = swift_release(v22);
  }

  id v28 = v20 + 4;
  if (v20 + 4 >= v53) {
    return swift_release(v63);
  }
  unsigned int v26 = *(void *)(v52 + 8 * v28);
  if (v26)
  {
    int v27 = v20 + 4;
    goto LABEL_21;
  }

  while (1)
  {
    int v27 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v27 >= v53) {
      return swift_release(v63);
    }
    unsigned int v26 = *(void *)(v52 + 8 * v27);
    ++v28;
    if (v26) {
      goto LABEL_21;
    }
  }

    uint64_t v19 = (v25 - 1) & v25;
    uint64_t v23 = __clz(__rbit64(v25)) + (v21 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v10 + 16))( v15,  *(void *)(v43 + 48) + *(void *)(v10 + 72) * v23,  v9,  v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v15, 0LL, 1LL, v9);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
    URLComponents.init(url:resolvingAgainstBaseURL:)(v12, 1LL);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v4, 1LL, v5) == 1)
    {
      sub_100187100((uint64_t)v4, (uint64_t *)&unk_100650430);
    }

    else
    {
      int v27 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
      v27(v37, v4, v5);
      __int128 v35 = v5;
      uint64_t v36 = v27;
      v27(v38, v37, v5);
      if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0) {
        __int128 v39 = (char *)sub_10018C2C0(0, *((void *)v39 + 2) + 1LL, 1, (unint64_t)v39);
      }
      __int16 v29 = *((void *)v39 + 2);
      id v28 = *((void *)v39 + 3);
      id v30 = v29 + 1;
      int v5 = v35;
      if (v29 >= v28 >> 1)
      {
        __int128 v34 = v29 + 1;
        __int128 v33 = (char *)sub_10018C2C0(v28 > 1, v29 + 1, 1, (unint64_t)v39);
        id v30 = v34;
        __int128 v39 = v33;
      }

      uint64_t v31 = v38;
      uint64_t v32 = v39;
      *((void *)v39 + 2) = v30;
      v36( &v32[((*(unsigned __int8 *)(v42 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80))
           + *(void *)(v42 + 72) * v29],
        v31,
        v5);
    }
  }

  unsigned int v26 = v24 + 4;
  if (v26 >= v41)
  {
LABEL_30:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))(v15, 1LL, 1LL, v9, v20);
LABEL_31:
    swift_release(v43);
    return;
  }

  uint64_t v25 = *(void *)(v40 + 8 * v26);
  if (v25)
  {
    uint64_t v21 = v26;
    goto LABEL_21;
  }

  while (1)
  {
    uint64_t v21 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v21 >= v41) {
      goto LABEL_30;
    }
    uint64_t v25 = *(void *)(v40 + 8 * v21);
    ++v26;
    if (v25) {
      goto LABEL_21;
    }
  }

  if (v13)
  {
    v104 = v11;
    sub_10018DA04(0, (int64_t)v13, 0);
    int v101 = v4;
    __asm { BR              X9 }
  }

  __int128 v38 = swift_bridgeObjectRelease(v4).n128_u64[0];
  __int128 v39 = (const char *)_swiftEmptyArrayStorage;
  if (*(void *)&v102[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_meCardInfo])
  {
    NSErrorUserInfoKey v41 = *(const char **)&v102[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_meCardInfo + 8];
    *(void *)&uint64_t v42 = swift_bridgeObjectRetain((const char *)_swiftEmptyArrayStorage, *(double *)&v38).n128_u64[0];
    swift_bridgeObjectRetain(v41, v42);
    uint64_t v44 = sub_10038ED2C(v43, (uint64_t)_swiftEmptyArrayStorage);
    uint64_t v45 = v41;
    __int128 v39 = (const char *)_swiftEmptyArrayStorage;
    *(void *)&uint64_t v46 = swift_bridgeObjectRelease(v45).n128_u64[0];
    *(void *)&__int16 v47 = swift_bridgeObjectRelease((const char *)_swiftEmptyArrayStorage, v46).n128_u64[0];
    if (*(void *)(v44 + 16))
    {
      uint64_t v2 = *(_BYTE **)(v44 + 32);
      id v48 = *(const char **)(v44 + 56);
      *(void *)&uint64_t v49 = swift_bridgeObjectRetain((const char *)*(void *)(v44 + 40), v47).n128_u64[0];
      *(void *)&int v50 = swift_bridgeObjectRetain(v48, v49).n128_u64[0];
      *(void *)&uint64_t v51 = swift_bridgeObjectRelease((const char *)_swiftEmptyArrayStorage, v50).n128_u64[0];
      swift_bridgeObjectRelease((const char *)v44, v51);
      return v2;
    }

    __int128 v38 = swift_bridgeObjectRelease((const char *)v44, v47).n128_u64[0];
  }

  uint64_t v52 = (const char *)_swiftEmptyArrayStorage[2];
  if (v52)
  {
    v106 = v12;
    uint64_t v53 = v102;
    v100 = &v102[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashDB];
    swift_bridgeObjectRetain((const char *)_swiftEmptyArrayStorage, *(double *)&v38);
    v98 = v53;
    v99 = (const char *)_swiftEmptyArrayStorage;
    os_log_t v54 = (void **)&_swiftEmptyArrayStorage[7];
    id v55 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v58 = (uint64_t)*(v54 - 1);
      char v57 = *v54;
      int v101 = v52;
      v102 = v57;
      id v60 = (uint64_t)*(v54 - 3);
      id v59 = (uint64_t)*(v54 - 2);
      uint64_t v62 = (_BYTE *)*v100;
      id v61 = v100[1];
      ObjectType = swift_getObjectType(*v100);
      id v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t))(v61 + 80);
      swift_unknownObjectRetain(v62);
      uint64_t v65 = v58;
      uint64_t v2 = v62;
      os_log_t v66 = v106;
      id v67 = v64(v60, v59, v65, v102, ObjectType, v61);
      v106 = v66;
      if (v66)
      {

        swift_bridgeObjectRelease((const char *)v55);
        swift_bridgeObjectRelease_n(v99, 2LL);
        swift_unknownObjectRelease(v62);
        return v2;
      }

      uint64_t v71 = v67;
      uint64_t v72 = v68;
      uint64_t v73 = v69;
      id v74 = v70;
      swift_unknownObjectRelease(v62);
      if (v72)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v55) & 1) == 0) {
          id v55 = sub_10018CC6C(0LL, v55[2] + 1LL, 1, (uint64_t)v55);
        }
        uint64_t v76 = v55[2];
        uint64_t v75 = v55[3];
        if (v76 >= v75 >> 1) {
          id v55 = sub_10018CC6C((void *)(v75 > 1), v76 + 1, 1, (uint64_t)v55);
        }
        v55[2] = v76 + 1;
        uint64_t v56 = &v55[4 * v76];
        v56[4] = v71;
        v56[5] = v72;
        void v56[6] = v73;
        v56[7] = v74;
      }

      v54 += 4;
      uint64_t v52 = v101 - 1;
    }

    while (v101 != (const char *)1);

    __int128 v39 = v99;
    __int128 v38 = swift_bridgeObjectRelease(v99).n128_u64[0];
  }

  else
  {
    id v55 = _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease(v39, *(double *)&v38);
  uint64_t v77 = v55[2];
  v78 = _swiftEmptyArrayStorage;
  if (v77)
  {
    v104 = _swiftEmptyArrayStorage;
    sub_10018D82C(0, v77, 0);
    v78 = v104;
    uint64_t v79 = (const char *)v55;
    v80 = (const char **)(v55 + 5);
    do
    {
      v81 = (uint64_t)*(v80 - 1);
      v82 = *v80;
      v104 = v78;
      v84 = v78[2];
      v83 = v78[3];
      swift_bridgeObjectRetain(v82);
      if (v84 >= v83 >> 1)
      {
        sub_10018D82C(v83 > 1, v84 + 1, 1);
        v78 = v104;
      }

      v80 += 4;
      v78[2] = v84 + 1;
      uint64_t v85 = &v78[2 * v84];
      v85[4] = v81;
      v85[5] = v82;
      --v77;
    }

    while (v77);
  }

  else
  {
    uint64_t v79 = (const char *)v55;
  }

  uint64_t v86 = sub_100190230((uint64_t)v78);
  *(void *)&v87 = swift_bridgeObjectRelease((const char *)v78).n128_u64[0];
  id v88 = *(void *)(v86 + 16);
  swift_bridgeObjectRelease((const char *)v86, v87);
  if (v88 > 1)
  {
    if (qword_100644228 != -1) {
      swift_once(&qword_100644228, sub_100382454);
    }
    uint64_t v89 = type metadata accessor for Logger(0LL);
    id v90 = sub_100186DE4(v89, (uint64_t)qword_100651950);
    id v91 = (os_log_s *)Logger.logObject.getter(v90);
    uint64_t v92 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v91, v92))
    {
      v93 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)v93 = 134217984;
      v104 = (void *)v88;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v93 + 4, v93 + 12);
      _os_log_impl((void *)&_mh_execute_header, v91, v92, "%ld contacts match this set of hashes", v93, 0xCu);
      swift_slowDealloc(v93, -1LL, -1LL);
    }
  }

  if (*((void *)v79 + 2))
  {
    uint64_t v2 = (_BYTE *)*((void *)v79 + 4);
    id v94 = (const char *)*((void *)v79 + 7);
    *(void *)&uint64_t v95 = swift_bridgeObjectRetain((const char *)*((void *)v79 + 5)).n128_u64[0];
    *(void *)&uint64_t v96 = swift_bridgeObjectRetain(v94, v95).n128_u64[0];
    swift_bridgeObjectRelease(v79, v96);
  }

  else
  {
    swift_bridgeObjectRelease(v79);
    return 0LL;
  }

  return v2;
}

  if (v9)
  {
    v100 = (void *)v12;
    sub_10018DA04(0, v9, 0);
    v97 = v7;
    v99 = (void (*)(char *, uint64_t))v9;
    __asm { BR              X9 }
  }

  __int128 v40 = swift_bridgeObjectRelease(v7).n128_u64[0];
  NSErrorUserInfoKey v41 = (const char *)_swiftEmptyArrayStorage;
  uint64_t v42 = *(void *)&v98[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_meCardInfo];
  uint64_t v95 = (const char *)_swiftEmptyArrayStorage;
  if (v42)
  {
    __int16 v43 = *(const char **)&v98[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_meCardInfo + 8];
    *(void *)&uint64_t v44 = swift_bridgeObjectRetain((const char *)_swiftEmptyArrayStorage, *(double *)&v40).n128_u64[0];
    swift_bridgeObjectRetain(v43, v44);
    uint64_t v46 = sub_10038ED2C(v45, (uint64_t)_swiftEmptyArrayStorage);
    *(void *)&__int16 v47 = swift_bridgeObjectRelease(v43).n128_u64[0];
    *(void *)&id v48 = swift_bridgeObjectRelease((const char *)_swiftEmptyArrayStorage, v47).n128_u64[0];
    uint64_t v49 = *(void *)(v46 + 16);
    if (v49)
    {
      v99 = v13;
      v100 = (void *)v12;
      sub_10018DA20(0, v49, 0);
      int v50 = v100;
      v97 = (const char *)v46;
      uint64_t v51 = (const char **)(v46 + 56);
      do
      {
        uint64_t v52 = (uint64_t)*(v51 - 3);
        uint64_t v53 = *(v51 - 2);
        os_log_t v54 = (uint64_t)*(v51 - 1);
        id v55 = *v51;
        v100 = v50;
        char v57 = v50[2];
        uint64_t v56 = v50[3];
        *(void *)&uint64_t v58 = swift_bridgeObjectRetain(v53).n128_u64[0];
        swift_bridgeObjectRetain(v55, v58);
        if (v57 >= v56 >> 1)
        {
          sub_10018DA20(v56 > 1, v57 + 1, 1);
          int v50 = v100;
        }

        v50[2] = v57 + 1;
        id v59 = &v50[4 * v57];
        v59[4] = v52;
        v59[5] = v53;
        v59[6] = v54;
        v59[7] = v55;
        v51 += 9;
        --v49;
      }

      while (v49);
      id v60 = swift_bridgeObjectRelease(v97).n128_u64[0];
      uint64_t v13 = v99;
      id v61 = v50[2];
      if (!v61) {
        goto LABEL_34;
      }
    }

    else
    {
      id v60 = swift_bridgeObjectRelease((const char *)v46, v48).n128_u64[0];
      int v50 = _swiftEmptyArrayStorage;
      id v61 = _swiftEmptyArrayStorage[2];
      if (!v61)
      {
LABEL_34:
        __int128 v40 = swift_bridgeObjectRelease((const char *)v50, *(double *)&v60).n128_u64[0];
        NSErrorUserInfoKey v41 = v95;
        goto LABEL_35;
      }
    }

    uint64_t v62 = (const char **)(v50 + 7);
    do
    {
      uint64_t v63 = (uint64_t)*(v62 - 3);
      id v64 = *(v62 - 2);
      uint64_t v65 = (uint64_t)*(v62 - 1);
      os_log_t v66 = *v62;
      *(void *)&id v67 = swift_bridgeObjectRetain(v64, *(double *)&v60).n128_u64[0];
      swift_bridgeObjectRetain(v66, v67);
      sub_1003B6D58((uint64_t *)&v100, v63, v64, v65, v66);
      *(void *)&uint64_t v68 = swift_bridgeObjectRelease(v101).n128_u64[0];
      id v60 = swift_bridgeObjectRelease(v102, v68).n128_u64[0];
      v62 += 4;
      --v61;
    }

    while (v61);
    goto LABEL_34;
  }

    return;
  }

  uint64_t v25 = [v17 sessionID];
  if (!v25)
  {
LABEL_6:
    if (qword_100644408 == -1)
    {
LABEL_7:
      uint64_t v32 = type metadata accessor for Logger(0LL);
      __int128 v33 = sub_100186DE4(v32, (uint64_t)qword_100656748);
      __int128 v34 = (os_log_s *)Logger.logObject.getter(v33);
      __int128 v35 = static os_log_type_t.error.getter(v34);
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Message does not have a session ID", v36, 2u);
        swift_slowDealloc(v36, -1LL, -1LL);

        return;
      }

      goto LABEL_21;
    }

    return;
  }

  __int16 v103 = v3;
  if (qword_100644408 != -1) {
    goto LABEL_55;
  }
LABEL_4:
  unsigned int v26 = type metadata accessor for Logger(0LL);
  int v27 = sub_100186DE4(v26, (uint64_t)qword_100656748);
  sub_10019A6C4((uint64_t)v108, (uint64_t)&v114);
  id v28 = (os_log_s *)v19;
  __int16 v29 = (os_log_s *)Logger.logObject.getter(v28);
  id v30 = static os_log_type_t.default.getter(v29);
  if (os_log_type_enabled(v29, v30))
  {
    v98[1] = v27;
    v102 = v28;
    v100 = v13;
    int v101 = v12;
    uint64_t v31 = swift_slowAlloc(22LL, -1LL);
    uint64_t v32 = (void *)swift_slowAlloc(8LL, -1LL);
    v98[0] = swift_slowAlloc(32LL, -1LL);
    v110[0] = v98[0];
    *(_DWORD *)uint64_t v31 = 136315394;
    __int128 v33 = v115;
    __int128 v34 = v116;
    sub_10019A708(&v114, v115);
    __int128 v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v33, v34);
    v99 = v17;
    if (v36)
    {
      __int128 v37 = v36;
    }

    else
    {
      *(void *)&v111 = 0LL;
      *((void *)&v111 + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(17LL);
      swift_bridgeObjectRelease(*((const char **)&v111 + 1));
      __int128 v37 = (const char *)0x80000001005046B0LL;
      __int128 v35 = 0xD000000000000015LL;
    }

    *(void *)&v111 = sub_10018CDB4(v35, (unint64_t)v37, v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, (char *)&v111 + 8, v31 + 4, v31 + 12);
    swift_bridgeObjectRelease(v37);
    sub_10018709C(&v114);
    *(_WORD *)(v31 + 12) = 2112;
    id v28 = v102;
    *(void *)&v111 = v102;
    __int16 v47 = v102;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, (char *)&v111 + 8, v31 + 14, v31 + 22);
    *uint64_t v32 = v19;

    _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "Received Pairing/RegistrationRequest from %s: %@",  (uint8_t *)v31,  0x16u);
    id v48 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v32, 1LL, v48);
    swift_slowDealloc(v32, -1LL, -1LL);
    uint64_t v49 = v98[0];
    swift_arrayDestroy(v98[0], 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1LL, -1LL);
    swift_slowDealloc(v31, -1LL, -1LL);

    unsigned int v12 = v101;
    uint64_t v13 = v100;
    uint64_t v17 = v99;
  }

  else
  {
    sub_10018709C(&v114);
  }

  int v50 = -[os_log_s sessionID](v28, "sessionID");
  if (!v50) {
    goto LABEL_18;
  }
  uint64_t v51 = v50;
  uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
  os_log_t v54 = v53;

  id v55 = v107;
  UUID.init(uuidString:)(v52, v54);
  uint64_t v56 = swift_bridgeObjectRelease(v54);
  char v57 = *(unsigned int (**)(const char *, uint64_t, uint64_t, __n128))(v13 + 48);
  if (v57(v55, 1LL, v12, v56) == 1)
  {
    int v50 = (id)sub_100187100((uint64_t)v55, &qword_10064DA60);
LABEL_18:
    __int128 v40 = (os_log_s *)Logger.logObject.getter(v50);
    uint64_t v58 = static os_log_type_t.error.getter(v40);
    if (os_log_type_enabled(v40, v58))
    {
      id v59 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v58, "Message does not have a session ID", v59, 2u);
      swift_slowDealloc(v59, -1LL, -1LL);

      return;
    }

    goto LABEL_21;
  }

  id v60 = (uint64_t)v17;
  (*(void (**)(char *, const char *, uint64_t))(v13 + 32))(v17, v55, v12);
  id v61 = (unint64_t)-[os_log_s hasType](v28, "hasType");
  if (!(_DWORD)v61 || (id v61 = sub_1003500F4(-[os_log_s type](v28, "type")), (v62 & 1) != 0))
  {
    uint64_t v73 = (os_log_s *)Logger.logObject.getter(v61);
    id v74 = static os_log_type_t.error.getter(v73);
    if (os_log_type_enabled(v73, v74))
    {
      uint64_t v75 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v75 = 0;
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "Message does not have an authentication type", v75, 2u);
      swift_slowDealloc(v75, -1LL, -1LL);
      uint64_t v76 = v73;
    }

    else
    {
      uint64_t v76 = v28;
      id v28 = v73;
    }

LABEL_35:
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v60, v12);
    return;
  }

  uint64_t v63 = (char *)v61;
  if (v61 <= 7 && ((1LL << v61) & 0xC4) != 0 || v61 >= 9)
  {
    id v64 = (uint64_t *)(v103 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_sessions);
    swift_beginAccess(v103 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_sessions, v110, 32LL, 0LL);
    uint64_t v65 = *v64;
    if (*(void *)(*v64 + 16) && (os_log_t v66 = sub_1003AD618(v60), (v67 & 1) != 0))
    {
      sub_10019A6C4(*(void *)(v65 + 56) + 40 * v66, (uint64_t)&v111);
      sub_1001CE0D0(&v111, (uint64_t)&v114);
      swift_endAccess(v110);
      uint64_t v68 = type metadata accessor for TaskPriority(0LL);
      uint64_t v69 = (uint64_t)v105;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56LL))(v105, 1LL, 1LL, v68);
      sub_10019A6C4((uint64_t)&v114, (uint64_t)&v111);
      uint64_t v70 = (void *)swift_allocObject(&unk_1005E2FD0, 80LL, 7LL);
      v70[2] = 0LL;
      v70[3] = 0LL;
      sub_1001CE0D0(&v111, (uint64_t)(v70 + 4));
      v70[9] = v28;
      uint64_t v71 = v28;
      uint64_t v72 = &unk_100656A88;
    }

    else
    {
      swift_endAccess(v110);
      uint64_t v77 = [objc_allocWithZone(SFAuthenticationOptions) init];
      *((void *)&v112 + 1) = sub_100183168(0LL, &qword_1006569F0, &OBJC_CLASS___SFAuthenticationOptions_ptr);
      v113 = &off_1005DC590;
      *(void *)&v111 = v77;
      sub_100462B08(v60, (uint64_t)v108, (uint64_t)v63, 1, (uint64_t)&v111, (uint64_t)&v114);
      sub_100187100((uint64_t)&v111, &qword_1006569F8);
      v78 = type metadata accessor for TaskPriority(0LL);
      uint64_t v69 = (uint64_t)v105;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56LL))(v105, 1LL, 1LL, v78);
      sub_10019A6C4((uint64_t)&v114, (uint64_t)&v111);
      uint64_t v70 = (void *)swift_allocObject(&unk_1005E2FA8, 88LL, 7LL);
      v70[2] = 0LL;
      v70[3] = 0LL;
      v70[4] = v28;
      v70[5] = v63;
      sub_1001CE0D0(&v111, (uint64_t)(v70 + 6));
      uint64_t v71 = v28;
      uint64_t v72 = &unk_100656A78;
    }

    uint64_t v79 = sub_1001B37E8(v69, (uint64_t)v72, (uint64_t)v70);
    swift_release(v79);

    sub_10018709C(&v114);
    goto LABEL_35;
  }

  v102 = v28;
  v80 = (const char **)(v103 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_pairingKeySessions);
  *(void *)&v81 = swift_beginAccess( v103 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_pairingKeySessions,  v110,  0LL,  0LL).n128_u64[0];
  v82 = *v80;
  v83 = *((void *)*v80 + 2);
  v107 = *v80;
  if (v83)
  {
    v84 = (uint64_t)(v82 + 32);
    swift_bridgeObjectRetain(v82, v81);
    uint64_t v85 = v106;
    while (1)
    {
      sub_10019A6C4(v84, (uint64_t)&v114);
      v87 = v115;
      uint64_t v86 = v116;
      sub_10019A708(&v114, v115);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v86 + 8) + 8LL) + 32LL))(v87);
      LOBYTE(v86) = static UUID.== infix(_:_:)(v85, v60);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v85, v12);
      if ((v86 & 1) != 0) {
        break;
      }
      sub_10018709C(&v114);
      v84 += 40LL;
      if (!--v83) {
        goto LABEL_43;
      }
    }

    sub_1001CE0D0(&v114, (uint64_t)&v111);
  }

  else
  {
    swift_bridgeObjectRetain(v82, v81);
LABEL_43:
    v113 = 0LL;
    v111 = 0u;
    v112 = 0u;
  }

  swift_bridgeObjectRelease(v107);
  id v88 = v102;
  if (*((void *)&v112 + 1))
  {
    sub_1001CE0D0(&v111, (uint64_t)&v114);
  }

  else
  {
    sub_100187100((uint64_t)&v111, &qword_100656A68);
    sub_10046B0F0(v60, (uint64_t)v108, v63, 0, &v114);
  }

  uint64_t v89 = v103 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_macUnlockPhoneSessionIDThatNeedsArmingUI;
  swift_beginAccess( v103 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_macUnlockPhoneSessionIDThatNeedsArmingUI,  v109,  0LL,  0LL);
  id v90 = v104;
  sub_1001915A4(v89, v104, &qword_10064DA60);
  LODWORD(v89) = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v57)(v90, 1LL, v12);
  sub_100187100(v90, &qword_10064DA60);
  if ((_DWORD)v89 != 1)
  {
    id v91 = v115;
    uint64_t v92 = v116;
    sub_1002499B4((uint64_t)&v114, v115);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v92 + 8) + 24LL))(1LL, v91);
  }

  v93 = v108[3];
  id v94 = v108[4];
  sub_10019A708(v108, v93);
  uint64_t v95 = (*(uint64_t (**)(uint64_t, uint64_t))(v94 + 8))(v93, v94);
  if (v96)
  {
    v97 = (const char *)v96;
    sub_10046E020(v95, v96);
    swift_bridgeObjectRelease(v97);
LABEL_53:
    sub_10019A708(&v114, v115);
    sub_1003D4474(v88);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v60, v12);
    sub_10018709C(&v114);
    return;
  }

  __break(1u);
}

    return;
  }

  uint64_t v23 = [v15 sessionID];
  if (!v23)
  {
LABEL_6:
    if (qword_100644408 == -1)
    {
LABEL_7:
      uint64_t v31 = type metadata accessor for Logger(0LL);
      uint64_t v32 = sub_100186DE4(v31, (uint64_t)qword_100656748);
      __int128 v33 = (os_log_s *)Logger.logObject.getter(v32);
      __int128 v34 = static os_log_type_t.error.getter(v33);
      if (os_log_type_enabled(v33, v34))
      {
        __int128 v35 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)__int128 v35 = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Message does not have a session ID", v35, 2u);
        swift_slowDealloc(v35, -1LL, -1LL);

        return;
      }

      goto LABEL_21;
    }

id sub_10006BD10(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _proximityFound:a2];
}

id sub_10006BD1C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _proximityLost:a2];
}

id sub_10006BD28(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _proximityChanged:a2];
}

void sub_10006BD34(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2)
  {
    if (dword_100641EA0 <= 60)
    {
      int v6 = v2;
      if (dword_100641EA0 != -1 || (int v4 = _LogCategory_Initialize(&dword_100641EA0, 60LL), v3 = v6, v4))
      {
        LogPrintF( &dword_100641EA0,  "-[SDAutoFillAgent _proximityEnsureStarted]_block_invoke_4",  60LL,  "### Proximity discovery start failed: %@",  v3);
LABEL_8:

        return;
      }
    }
  }

  else if (dword_100641EA0 <= 30)
  {
    int v6 = 0LL;
    if (dword_100641EA0 != -1 || (v5 = _LogCategory_Initialize(&dword_100641EA0, 30LL), id v3 = 0LL, v5))
    {
      LogPrintF( &dword_100641EA0,  "-[SDAutoFillAgent _proximityEnsureStarted]_block_invoke_4",  30LL,  "Proximity discovery started\n");
      goto LABEL_8;
    }
  }
}

void sub_10006C7E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (v3)
  {
    if (dword_100641EA0 <= 60)
    {
      id v7 = v3;
      if (dword_100641EA0 != -1 || (v5 = _LogCategory_Initialize(&dword_100641EA0, 60LL), int v4 = v7, v5))
      {
        LogPrintF( &dword_100641EA0,  "-[SDAutoFillAgent _siriRemoteMonitorEnsureStarted]_block_invoke",  60LL,  "### Error activating SiriRemoteMonitor: %@\n",  v4);
        int v4 = v7;
      }
    }

    *(_DWORD *)(*(void *)(a1 + 32) + 200LL) = 3;
  }

  else
  {
    if (dword_100641EA0 <= 30
      && (dword_100641EA0 != -1 || _LogCategory_Initialize(&dword_100641EA0, 30LL)))
    {
      LogPrintF( &dword_100641EA0,  "-[SDAutoFillAgent _siriRemoteMonitorEnsureStarted]_block_invoke",  30LL,  "SiriRemoteMonitor activated\n");
    }

    *(_DWORD *)(*(void *)(a1 + 32) + 200LL) = 4;
    unsigned int v6 = [*(id *)(a1 + 32) _serviceShouldRequestAutoFill];
    int v4 = 0LL;
    if (v6)
    {
      [*(id *)(a1 + 32) _serviceStartRequestingAutoFillIfReady];
      int v4 = 0LL;
    }
  }
}

id sub_10006CB14(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _serviceHandleError:a2];
}

void sub_10006CB20(id a1)
{
  if (dword_100641EA0 <= 30 && (dword_100641EA0 != -1 || _LogCategory_Initialize(&dword_100641EA0, 30LL))) {
    LogPrintF( &dword_100641EA0,  "-[SDAutoFillAgent _serviceEnsureStarted]_block_invoke_2",  30LL,  "Requesting service hide PIN\n");
  }
}

id sub_10006CB80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[*(id *)(a1 + 32) _serviceHandleUsername:a2 password:a3 error:a4];
}

void sub_10006CB94(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (v3)
  {
    if (dword_100641EA0 <= 60)
    {
      id v6 = v3;
      if (dword_100641EA0 != -1 || (v5 = _LogCategory_Initialize(&dword_100641EA0, 60LL), int v4 = v6, v5))
      {
        LogPrintF( &dword_100641EA0,  "-[SDAutoFillAgent _serviceEnsureStarted]_block_invoke_4",  60LL,  "### Error activating requesting service: %@",  v4);
        int v4 = v6;
      }
    }

    *(_DWORD *)(*(void *)(a1 + 32) + 184LL) = 3;
  }

  else
  {
    if (dword_100641EA0 <= 30
      && (dword_100641EA0 != -1 || _LogCategory_Initialize(&dword_100641EA0, 30LL)))
    {
      LogPrintF( &dword_100641EA0,  "-[SDAutoFillAgent _serviceEnsureStarted]_block_invoke_4",  30LL,  "Requesting service activated\n");
    }

    *(_DWORD *)(*(void *)(a1 + 32) + 184LL) = 4;
    [*(id *)(a1 + 32) _serviceStartRequestingAutoFillIfReady];
    int v4 = 0LL;
  }
}

id sub_10006D2C0(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 176LL);
  if (v2)
  {
    id v3 = v2;
    dispatch_source_cancel(v3);
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(void **)(v4 + 176);
    *(void *)(v4 + 176) = 0LL;
  }

  if (dword_100641EA0 <= 30 && (dword_100641EA0 != -1 || _LogCategory_Initialize(&dword_100641EA0, 30LL))) {
    LogPrintF( &dword_100641EA0,  "-[SDAutoFillAgent _serviceTimeoutStart]_block_invoke",  30LL,  "Requesting service timeout firing\n");
  }
  *(_BYTE *)(*(void *)(a1 + 32) + 168LL) = 1;
  return [*(id *)(a1 + 32) _update];
}

id sub_10006D70C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _sessionStop:a2];
}

void sub_10006D718(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  _DWORD v2[2] = sub_10006D78C;
  v2[3] = &unk_1005CBE78;
  uint64_t v1 = *(void **)(a1 + 40);
  id v3 = *(id *)(a1 + 32);
  id v4 = v1;
  [v3 _helpersClientPairingSucceeded:1 completion:v2];
}

void sub_10006D78C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!v3)
  {
    id v6 = 0LL;
    [*(id *)(a1 + 32) _sessionHandlePairingSucceededResponse:*(void *)(a1 + 40)];
    goto LABEL_6;
  }

  if (dword_100641EA0 <= 60)
  {
    id v6 = v3;
    if (dword_100641EA0 != -1 || (v5 = _LogCategory_Initialize(&dword_100641EA0, 60LL), id v4 = v6, v5))
    {
      LogPrintF( &dword_100641EA0,  "-[SDAutoFillAgent _sessionStart:]_block_invoke_3",  60LL,  "### Client error handling pairing succeeded: %@\n",  v4);
LABEL_6:
      id v4 = v6;
    }
  }
}

void sub_10006D82C( uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  id v23 = a2;
  id v16 = a3;
  id v17 = a4;
  id v18 = a5;
  id v19 = a6;
  id v20 = a7;
  id v21 = a8;
  id v22 = a9;
  if (dword_100641EA0 <= 30 && (dword_100641EA0 != -1 || _LogCategory_Initialize(&dword_100641EA0, 30LL))) {
    LogPrintF( &dword_100641EA0,  "-[SDAutoFillAgent _sessionStart:]_block_invoke_4",  30LL,  "Granting session: PromptForPasswordPicker\n");
  }
  [*(id *)(a1 + 32) passwordPickerStart:v23 bundleID:v16 localizedAppName:v17 unlocalizedAppName:v18 associatedDomains:v19 appIconData:v20 deviceName:v21 completion:v22];
}

id sub_10006D958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _helpersClientPromptForPIN:a2 throttleSeconds:a3];
}

void sub_10006DCEC(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 104) objectForKeyedSubscript:*(void *)(a1 + 40)]);
  [*(id *)(a1 + 32) _proximityChanged:v2];
}

id sub_10006E104(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) isEqual:@"-pw"];
  id v3 = *(void **)(a1 + 40);
  if (v2) {
    return [v3 passwordPickerStart:0 bundleID:0 localizedAppName:0 unlocalizedAppName:0 associatedDomains:0 appIconData:0 deviceName:0 completion:&stru_1005CC6D8];
  }
  else {
    return [v3 _uiStart:*(void *)(a1 + 48) extraInfo:0];
  }
}

void sub_10006E184(id a1, NSString *a2, NSString *a3, NSError *a4)
{
  int v8 = a2;
  id v6 = a3;
  id v7 = a4;
  if (dword_100641EA0 <= 30 && (dword_100641EA0 != -1 || _LogCategory_Initialize(&dword_100641EA0, 30LL))) {
    LogPrintF( &dword_100641EA0,  "-[SDAutoFillAgent testUI:]_block_invoke_2",  30LL,  "Picker username: %@, pw: %@, error: %@",  v8,  v6,  v7);
  }
}

id sub_10006E33C(uint64_t a1)
{
  if (dword_100641EA0 <= 30 && (dword_100641EA0 != -1 || _LogCategory_Initialize(&dword_100641EA0, 30LL))) {
    LogPrintF( &dword_100641EA0,  "-[SDAutoFillAgent _activateUIDelayTimer]_block_invoke",  30LL,  "UI delay timer firing\n");
  }
  unsigned int v2 = *(void **)(a1 + 32);
  uint64_t v3 = v2[29];
  if (v3)
  {
    [v2 _uiStart:v3 extraInfo:0];
    unsigned int v2 = *(void **)(a1 + 32);
  }

  return [v2 _deactivateUIDelayTimer];
}

Class sub_10006EAF8()
{
  if (qword_100656E98 != -1) {
    dispatch_once(&qword_100656E98, &stru_1005CC6F8);
  }
  Class result = objc_getClass("ACAccountStore");
  qword_100656E90 = (uint64_t)result;
  off_100641F10 = (uint64_t (*)())sub_10006EB54;
  return result;
}

id sub_10006EB54()
{
  return (id)qword_100656E90;
}

void sub_10006EB60(id a1)
{
  qword_100656EA0 = (uint64_t)dlopen("/System/Library/Frameworks/Accounts.framework/Accounts", 2);
}

id sub_10006ED70(int a1)
{
  if (a1 >= 8)
  {
    if (a1 <= 9) {
      unsigned int v2 = "?";
    }
    else {
      unsigned int v2 = "User";
    }
  }

  else
  {
    unsigned int v2 = off_1005CC918[a1];
  }

  return (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  v2));
}

LABEL_38:
}

    id v22 = 0LL;
    goto LABEL_39;
  }

  -[SDAppleIDDatabaseManager _setAccount:](v2, "_setAccount:", v22);
  if (dword_100642730 <= 30 && (dword_100642730 != -1 || _LogCategory_Initialize(&dword_100642730, 30LL)))
  {
    id v28 = (void *)objc_claimAutoreleasedReturnValue(-[SDAppleIDDatabaseManager account](v2, "account"));
    LogPrintF( &dword_100642730,  "-[SDAppleIDDatabaseManager _readPrefs]",  30LL,  "Apple ID account retrieved from defaults: %@\n",  v28);
  }

          int v5 = 0;
LABEL_41:

          goto LABEL_3;
        }

      int v5 = v44;
    }

    *(void *)&v8[8 * v32] = v34 | v33;
    *(void *)(v4[6] + 8 * v31) = v28;
    __int128 v40 = v4[2];
    uint64_t v11 = __OFADD__(v40, 1LL);
    NSErrorUserInfoKey v41 = v40 + 1;
    if (v11) {
      goto LABEL_45;
    }
    _DWORD v4[2] = v41;
LABEL_31:
    if (++v26 == v5) {
      return;
    }
  }

      __int16 v9 = v50;
    }

    *(void *)&v12[8 * v36] = v38 | v37;
    *(void *)(v8[6] + 8 * v35) = v32;
    uint64_t v44 = v8[2];
    id v15 = __OFADD__(v44, 1LL);
    uint64_t v45 = v44 + 1;
    if (v15) {
      goto LABEL_45;
    }
    v8[2] = v45;
LABEL_31:
    if (++v30 == v9) {
      return;
    }
  }

    swift_once(&qword_100643F18, sub_1001FC690);
    goto LABEL_27;
  }

  return v4;
}

  uint64_t v85 = v0;
  uint64_t v86 = v0[27];
  v87 = v0[25];
  id v88 = v85[24];
  uint64_t v89 = SFAirDropSend.Request.itemPreviewData.getter();
  id v91 = v90;
  uint64_t v92 = SFAirDropSend.Request.type.getter(v89);
  v93 = SFAirDrop.TransferType.isOnlyExchange.getter(v92);
  (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v86, v88);
  if ((v93 & 1) != 0)
  {
    v256 = 0LL;
    id v94 = 0LL;
  }

  else
  {
    __int16 v103 = [(id)v85[14] computerName];
    if (v103)
    {
      v104 = v103;
      v256 = static String._unconditionallyBridgeFromObjectiveC(_:)(v103);
      id v94 = v105;
    }

    else
    {
      v256 = 0LL;
      id v94 = 0LL;
    }
  }

  sub_1001A4C04(v89, v91);
  v161 = sub_1001A4C04(v89, v91);
  v162 = (os_log_s *)Logger.logObject.getter(v161);
  v163 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v162, v163))
  {
    v264 = v94;
    v164 = (uint64_t *)(v2 - 13);
    v165 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v166 = swift_slowAlloc(32LL, -1LL);
    v269[0] = v166;
    *(_DWORD *)v165 = 136315138;
    if (v91 >> 60 == 15)
    {
      v167 = (const char *)0x800000010050E3B0LL;
      v168 = 0xD000000000000016LL;
    }

    else
    {
      v168 = Data.description.getter(v89, v91);
      v167 = v169;
    }

    *v164 = sub_10018CDB4(v168, (unint64_t)v167, v269);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v164, v48, v165 + 4, v165 + 12);
    swift_bridgeObjectRelease(v167);
    sub_100189B0C(v89, v91);
    sub_100189B0C(v89, v91);
    _os_log_impl((void *)&_mh_execute_header, v162, v163, "Adding preview data to request %s", v165, 0xCu);
    swift_arrayDestroy(v166, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v166, -1LL, -1LL);
    swift_slowDealloc(v165, -1LL, -1LL);

    id v94 = v264;
  }

  else
  {
    sub_100189B0C(v89, v91);
    sub_100189B0C(v89, v91);
  }

  v170 = SFAirDropSend.Request.id.getter();
  v171 = SFAirDropSend.Request.type.getter(v170);
  v172 = SFAirDropSend.Request.requestSource.getter(v171);
  v174 = v173;
  if (!v94)
  {
    v175 = String._bridgeToObjectiveC()();
    v177 = (id)SFLocalizedStringForKey(v175, v176);

    if (!v177) {
      goto LABEL_83;
    }
    v256 = static String._unconditionallyBridgeFromObjectiveC(_:)(v177);
    id v94 = v178;
  }

  v179 = v266;
  v246 = v174;
  v249 = v172;
  v265 = v94;
  v268 = v89;
  v253 = v91;
  v180 = [(id)v179[14] modelName];
  if (v180)
  {
    v181 = v180;
    v213 = v179[44];
    v215 = v179[41];
    v216 = v179[42];
    v218 = v179[40];
    v219 = (void (*)(uint64_t, uint64_t))v179[43];
    v221 = v179[39];
    v223 = v179[38];
    v217 = v179[36];
    v225 = v179[35];
    v227 = v179[34];
    v229 = v179[33];
    v230 = v179[30];
    v182 = v179[26];
    v233 = v179[27];
    v236 = v179[23];
    v241 = v179[22];
    v243 = v179[21];
    v183 = v179[18];
    v184 = v179[13];
    v214 = (void *)v179[14];
    v185 = v179[11];
    v186 = v179[12];
    v187 = v179[10];
    v188 = static String._unconditionallyBridgeFromObjectiveC(_:)(v180);
    v190 = v189;

    v191 = SFAirDropSend.Request.customPayload.getter();
    sub_1003E13AC( v183,  v182,  v186,  v184,  v215,  v216,  v249,  v246,  v187,  v256,  v265,  v188,  v190,  v213,  v238,  0LL,  0LL,  v268,  v253,  0LL,  0xF000000000000000LL,  0,  v191,  v192);

    v219(v185, v217);
    swift_task_dealloc(v218);
    swift_task_dealloc(v221);
    swift_task_dealloc(v223);
    swift_task_dealloc(v225);
    swift_task_dealloc(v227);
    swift_task_dealloc(v229);
    swift_task_dealloc(v230);
    swift_task_dealloc(v233);
    swift_task_dealloc(v182);
    swift_task_dealloc(v236);
    swift_task_dealloc(v241);
    swift_task_dealloc(v243);
    swift_task_dealloc(v183);
    v132 = (void (*)(void))v179[1];
    goto LABEL_71;
  }

  swift_bridgeObjectRelease(v238);
  __break(1u);
LABEL_83:
  swift_bridgeObjectRelease(v238);
  __break(1u);
}

    *((void *)&v187 + 1) = sub_100183168(0LL, &qword_1006569F0, &OBJC_CLASS___SFAuthenticationOptions_ptr);
    v188 = &off_1005DC590;
    *(void *)&v186 = v30;
    goto LABEL_39;
  }

  if (v48 - 6 < 2)
  {
    v178 = v30;
    v80 = v176;
    static SFPlatform.macOS.getter(v79);
    v81 = static SFPlatform.isPlatform(_:)(v80);
    v82 = *(uint64_t (**)(char *, uint64_t))(v173 + 8);
    v83 = v82(v80, v177);
    if ((v81 & 1) != 0)
    {
      v84 = (const char *)sub_100464758(2LL, "eligible iPhone devices: %s");
      sub_100457EC0((uint64_t)v84, (SEL *)&selRef_deviceEnabledAsKeyForIDSDeviceID_);
      uint64_t v86 = v85;
      swift_bridgeObjectRelease(v84);
    }

    else
    {
      uint64_t v86 = 0;
    }

    v100 = v176;
    static SFPlatform.iOS.getter(v83);
    int v101 = static SFPlatform.isPlatform(_:)(v100);
    v102 = v82(v100, v177);
    if ((v101 & 1) != 0)
    {
      __int16 v103 = (const char *)sub_100464758(4LL, "eligible mac devices: %s");
      sub_100457EC0((uint64_t)v103, (SEL *)&selRef_deviceEnabledAsKey_);
      NSErrorUserInfoKey v105 = v104;
      swift_bridgeObjectRelease(v103);
      if (((v86 | v105) & 1) == 0)
      {
LABEL_47:
        v106 = (os_log_s *)Logger.logObject.getter(v102);
        v107 = static os_log_type_t.error.getter(v106);
        if (os_log_type_enabled(v106, v107))
        {
          v108 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)v108 = 0;
          _os_log_impl((void *)&_mh_execute_header, v106, v107, "Mac Unlock Phone isn't enabled", v108, 2u);
          swift_slowDealloc(v108, -1LL, -1LL);
        }

        char v57 = 33LL;
        goto LABEL_14;
      }
    }

    else if ((v86 & 1) == 0)
    {
      goto LABEL_47;
    }

    if (v48 == 7)
    {
      v120 = &v4[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_lastMacThatDidMacUnlockPhone];
      swift_beginAccess( &v4[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_lastMacThatDidMacUnlockPhone],  v189,  0LL,  0LL);
      v122 = *((void *)v120 + 3);
      if (!v122) {
        goto LABEL_60;
      }
      v123 = *((void *)v120 + 4);
      v124 = sub_10019A708(v120, *((void *)v120 + 3));
      v125 = *(void *)(v122 - 8);
      __chkstk_darwin(v124);
      v127 = (char *)&v160 - ((v126 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      (*(void (**)(char *))(v125 + 16))(v127);
      v128 = (*(uint64_t (**)(uint64_t, uint64_t))(v123 + 8))(v122, v123);
      v130 = v129;
      v121 = (*(uint64_t (**)(char *, uint64_t))(v125 + 8))(v127, v122);
      if (v130)
      {
        v131 = 65538LL;
        v132 = sub_100183098(&qword_100645398);
        v133 = 7LL;
        v134 = (void *)swift_allocObject(v132, 48LL, 7LL);
        v135 = 0;
        *((_OWORD *)v134 + 1) = xmmword_1004CDCA0;
        v134[4] = v128;
        v134[5] = v130;
        v136 = 20LL;
      }

      else
      {
LABEL_60:
        v131 = 65538LL;
        v137 = (os_log_s *)Logger.logObject.getter(v121);
        v138 = static os_log_type_t.error.getter(v137);
        if (os_log_type_enabled(v137, v138))
        {
          v139 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)v139 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v137,  v138,  "No device filter set because no mac listed that performed last unlock",  v139,  2u);
          swift_slowDealloc(v139, -1LL, -1LL);
        }

        v136 = 0LL;
        v134 = _swiftEmptyArrayStorage;
        v135 = 1;
        v133 = 5LL;
      }

      id v28 = v182;
    }

    else
    {
      v136 = 0LL;
      v134 = _swiftEmptyArrayStorage;
      v135 = 1;
      v131 = 2LL;
      v133 = 5LL;
    }

    v140 = type metadata accessor for SDAuthenticationNearbyInfoTemporaryScanner();
    swift_allocObject(v140, 24LL, 7LL);
    v141 = v163;
    LOBYTE(v186) = v135;
    v183 = sub_10021C404(v141, v131, (uint64_t)v134, v136 | ((unint64_t)v135 << 32));
    v142 = v171;
    sub_10021C4EC(v133);
    v143 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v143 - 8) + 56LL))(v172, 1LL, 1LL, v143);
    v144 = v174;
    (*(void (**)(char *, char *, uint64_t))(v174 + 16))(v170, v142, v168);
    v164(v169, a2, v28);
    v145 = *(unsigned __int8 *)(v144 + 80);
    v146 = (v145 + 32) & ~v145;
    v147 = (v167 + v146 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    v148 = (v147 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    v149 = v180;
    v150 = *(unsigned __int8 *)(v180 + 80);
    v151 = (v150 + v148 + 8) & ~v150;
    v152 = (v166 + v151 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    v153 = (v152 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    v154 = swift_allocObject(&unk_1005E3480, v153 + 8, v145 | v150 | 7);
    v155 = v154 + v146;
    *(void *)(v154 + 16) = 0LL;
    *(void *)(v154 + 24) = 0LL;
    v156 = v168;
    (*(void (**)(uint64_t, char *, uint64_t))(v174 + 32))(v155, v170, v168);
    *(void *)(v154 + v147) = v48;
    *(void *)(v154 + v14_Block_object_dispose((const void *)(v1 - 96), 8) = v4;
    (*(void (**)(uint64_t, char *, uint64_t))(v149 + 32))(v154 + v151, v169, v182);
    *(void *)(v154 + v152) = v181;
    *(void *)(v154 + v153) = v165;
    v157 = v178;
    v158 = v4;
    v159 = sub_1001B341C(v172, (uint64_t)&unk_100656BD0, v154);
    swift_release(v159);
    swift_release(v183);
    (*(void (**)(char *, uint64_t))(v174 + 8))(v171, v156);
    return;
  }

  if (v48 == 4)
  {
    v87 = (os_log_s *)Logger.logObject.getter(v79);
    id v88 = static os_log_type_t.default.getter(v87);
    if (os_log_type_enabled(v87, v88))
    {
      uint64_t v89 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v89 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v87,  v88,  "Manually triggering state change for urgent arming path on companion device",  v89,  2u);
      swift_slowDealloc(v89, -1LL, -1LL);
    }

    id v90 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
    id v91 = String._bridgeToObjectiveC()();
    [v90 setBool:1 forKey:v91];
  }

  else
  {
    v109 = (os_log_s *)Logger.logObject.getter(v79);
    v110 = static os_log_type_t.error.getter(v109);
    if (os_log_type_enabled(v109, v110))
    {
      v111 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v112 = swift_slowAlloc(32LL, -1LL);
      v189[0] = v112;
      *(_DWORD *)v111 = 136315138;
      v113 = sub_10034F010(v48);
      v115 = (const char *)v114;
      *(void *)&v186 = sub_10018CDB4(v113, v114, v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, (char *)&v186 + 8, v111 + 4, v111 + 12);
      swift_bridgeObjectRelease(v115);
      _os_log_impl( (void *)&_mh_execute_header,  v109,  v110,  "Unhandled authentication type %s was not triggered",  v111,  0xCu);
      swift_arrayDestroy(v112, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v112, -1LL, -1LL);
      swift_slowDealloc(v111, -1LL, -1LL);
    }

    v117 = swift_unknownObjectWeakLoadStrong( &v4[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_delegate],  v116);
    if (v117)
    {
      v118 = (void *)v117;
      v64.super.isa = UUID._bridgeToObjectiveC()().super.isa;
      v119 = sub_100487C98(19LL, 0LL, 0xE000000000000000LL);
      [v118 manager:v4 didFailAuthenticationFor:v64.super.isa error:v119];
      swift_unknownObjectRelease(v118);

      goto LABEL_17;
    }
  }

LABEL_44:
        goto LABEL_45;
      }
    }

        CFRelease(v14);
        goto LABEL_45;
      }

      dictionary = xpc_dictionary_get_dictionary(v6, "Options");
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(dictionary);
      uint64_t v25 = (os_log_s *)_CFXPCCreateCFObjectFromXPCObject(v24);

      [v11 setOptions:v25];
    }

    goto LABEL_43;
  }

  id v15 = daemon_log(0LL);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_ERROR)) {
    sub_1000CCCF4();
  }
LABEL_46:
}

          -[SDNotificationManager homePodHandoffRemove:reason:](v35, "homePodHandoffRemove:reason:", v11, 2LL);
          goto LABEL_49;
        }

  swift_release(v1);
  swift_bridgeObjectRelease(v1);
  __int128 v35 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
  sub_100183168(0LL, &qword_100645168, &OBJC_CLASS___NSString_ptr);
  sub_100183168(0LL, &qword_1006469A8, &OBJC_CLASS___IDSPseudonym_ptr);
  sub_1001D9550();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v2);
  id v60 = 0LL;
  __int128 v37 = [v35 archivedDataWithRootObject:isa requiringSecureCoding:1 error:&v60];

  __int128 v38 = v60;
  if (v37)
  {
    __int128 v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v37);
    NSErrorUserInfoKey v41 = v40;

    uint64_t v42 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
    __int16 v43 = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v44 = String._bridgeToObjectiveC()();
    [v42 setObject:v43 forKey:v44];

    sub_100189B20(v39, v41);
    return;
  }

  uint64_t v46 = v38;
  uint64_t v1 = _convertNSErrorToError(_:)(v38);

  swift_willThrow(v47);
  if (qword_100643EE8 != -1) {
    goto LABEL_56;
  }
LABEL_48:
  id v48 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v48, (uint64_t)qword_100646980);
  swift_errorRetain(v1);
  uint64_t v49 = swift_errorRetain(v1);
  int v50 = (os_log_s *)Logger.logObject.getter(v49);
  uint64_t v51 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v50, v51))
  {
    uint64_t v52 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v53 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v52 = 138412290;
    swift_errorRetain(v1);
    os_log_t v54 = (void *)_swift_stdlib_bridgeErrorToNSError(v1);
    id v60 = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v52 + 4, v52 + 12);
    void *v53 = v54;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "Failed to persist pseudonyms to revoke error: %@", v52, 0xCu);
    id v55 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v53, 1LL, v55);
    swift_slowDealloc(v53, -1LL, -1LL);
    swift_slowDealloc(v52, -1LL, -1LL);

    swift_errorRelease(v1);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  Class result = NWEndpoint.nw.getter(v74);
  if (!result)
  {
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }

  uint64_t v77 = result;
  device_id = nw_endpoint_get_device_id();
  uint64_t v79 = swift_unknownObjectRelease(v77);
  if (device_id)
  {
    uint64_t v79 = String.init(cString:)(device_id);
    v80 = v79;
    v82 = v81;
  }

  else
  {
    v80 = 0LL;
    v82 = 0LL;
  }

  Class result = NWEndpoint.nw.getter(v79);
  if (!result) {
    goto LABEL_88;
  }
  v83 = result;
  v84 = nw_endpoint_get_device_id();
  swift_unknownObjectRelease(v83);
  if (!v84)
  {
    if (v82) {
      goto LABEL_56;
    }
    v87 = 0LL;
LABEL_58:
    uint64_t v63 = (uint64_t)v109;
    sub_1001A4BC8(v114, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
    sub_1001A4BC8(v113, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
    id v59 = v112;
    if (!v87) {
      goto LABEL_60;
    }
    swift_bridgeObjectRelease(v87);
    goto LABEL_21;
  }

  uint64_t v85 = String.init(cString:)(v84);
  v87 = v86;
  if (!v82) {
    goto LABEL_58;
  }
  if (!v86)
  {
LABEL_56:
    swift_bridgeObjectRetain(v82);
    sub_1001A4BC8(v114, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
    sub_1001A4BC8(v113, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
    swift_bridgeObjectRelease_n(v82, 2LL);
    uint64_t v63 = (uint64_t)v109;
    id v59 = v112;
    goto LABEL_21;
  }

  if (v80 == v85 && v82 == v86)
  {
    swift_bridgeObjectRelease(v86);
    sub_1001A4BC8(v114, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
    sub_1001A4BC8(v113, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
    swift_bridgeObjectRelease(v82);
    id v59 = v112;
LABEL_60:
    sub_1001A4B84(v42, v59, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
    id v88 = sub_1001A4B84(v41, v61, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
    goto LABEL_61;
  }

  uint64_t v95 = _stringCompareWithSmolCheck(_:_:expecting:)(v80, v82, v85, v86, 0LL);
  swift_bridgeObjectRelease(v87);
  sub_1001A4BC8(v114, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
  sub_1001A4BC8(v113, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
  swift_bridgeObjectRelease(v82);
  id v59 = v112;
  sub_1001A4B84(v42, v112, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
  id v88 = sub_1001A4B84(v41, v61, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
  uint64_t v63 = (uint64_t)v109;
  if ((v95 & 1) == 0)
  {
LABEL_22:
    sub_1001A4BC8(v61, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
    sub_1001A4BC8(v59, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
LABEL_23:
    uint64_t v65 = (uint64_t)v106;
    sub_1001A4B84(v42, v63, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
    sub_1001A4B84(v41, v60, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
    goto LABEL_24;
  }

    sub_1002FAA8C((void **)&v70, (const void **)&v69, &v68);
    return 1LL;
  }

      uint64_t v44 = v45;
      goto LABEL_45;
    }

    id v28 = v51;
    __int16 v29 = v51[v27];
    ++v21;
    if (!v29)
    {
      id v21 = v27 + 1;
      if (v27 + 1 >= v50) {
        goto LABEL_37;
      }
      __int16 v29 = v51[v21];
      if (!v29) {
        break;
      }
    }

      uint64_t v44 = v45;
      goto LABEL_45;
    }

    id v28 = v51;
    __int16 v29 = v51[v27];
    ++v21;
    if (!v29)
    {
      id v21 = v27 + 1;
      if (v27 + 1 >= v50) {
        goto LABEL_37;
      }
      __int16 v29 = v51[v21];
      if (!v29) {
        break;
      }
    }

                    static String.localizedStringWithFormat(_:_:)(v62, v59, v61);
                    *(void *)&uint64_t v63 = swift_bridgeObjectRelease(v59).n128_u64[0];
                    swift_bridgeObjectRelease((const char *)v61, v63);
                  }

                  return;
                }

                id v22 = *(void *)(v106 + 8 * v23);
                if (!v22)
                {
                  while (1)
                  {
                    id v15 = v23 + 1;
                    if (__OFADD__(v23, 1LL)) {
                      goto LABEL_64;
                    }
                    if (v15 >= v107) {
                      goto LABEL_45;
                    }
                    id v22 = *(void *)(v106 + 8 * v15);
                    ++v23;
                    if (v22) {
                      goto LABEL_22;
                    }
                  }
                }

                id v15 = v23;
              }
            }
          }

void sub_1000702B0(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___SDProxHandoffAgent);
  unsigned int v2 = (void *)qword_100656EB0;
  qword_100656EB0 = (uint64_t)v1;
}

id sub_1000707AC(uint64_t a1)
{
  return [*(id *)(a1 + 32) prefsChanged];
}

id sub_100070874(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

LABEL_110:
    self->_prefIgnoreMediumThrottle = v35;
  }

  __int128 v39 = CFPrefs_GetInt64(@"com.apple.Sharing", @"chMediumBubbleEnabled", &v59);
  if (v59) {
    __int128 v40 = 0;
  }
  else {
    __int128 v40 = v39 == 0;
  }
  NSErrorUserInfoKey v41 = !v40;
  if (self->_prefMediumBubbleEnabled != v41)
  {
    if (dword_100642038 <= 30
      && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 30LL)))
    {
      uint64_t v42 = "yes";
      if (v41) {
        __int16 v43 = "no";
      }
      else {
        __int16 v43 = "yes";
      }
      if (!v41) {
        uint64_t v42 = "no";
      }
      LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent prefsChanged]",  30LL,  "Pref medium bubble enabled: %s -> %s\n",  v43,  v42);
    }

    self->_prefMediumBubbleEnabled = v41;
  }

  uint64_t v44 = CFPrefs_GetInt64(@"com.apple.Sharing", @"chThrottleMediumTicks", &v59);
  if (v59) {
    uint64_t v45 = -1LL;
  }
  else {
    uint64_t v45 = v44;
  }
  prefMediumBubbleLastTicks = self->_prefMediumBubbleLastTicks;
  if (v45 != prefMediumBubbleLastTicks)
  {
    if (dword_100642038 <= 30)
    {
      if (dword_100642038 == -1)
      {
        prefMediumBubbleLastTicks = self->_prefMediumBubbleLastTicks;
      }

      LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent prefsChanged]",  30LL,  "Pref medium bubble last ticks: %d -> %d\n",  prefMediumBubbleLastTicks,  v45);
    }

  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  __break(1u);
LABEL_113:
  swift_once(&qword_100644408, sub_100458568);
LABEL_29:
  __int128 v34 = type metadata accessor for Logger(0LL);
  __int128 v35 = sub_100186DE4(v34, (uint64_t)qword_100656748);
  uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
  __int128 v37 = static os_log_type_t.error.getter(v36);
  if (os_log_type_enabled(v36, v37))
  {
    __int128 v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)__int128 v38 = 0;
    __int128 v39 = "MacUnlockPhone isn't enabled, not registering";
    goto LABEL_31;
  }

LABEL_136:
    self->_prefMediumBubbleLastTicks = v45;
  }

  CFPrefs_GetDouble(@"com.apple.Sharing", @"chRetriggerSecs", &v59);
  id v48 = 0.0;
  if (v59) {
    uint64_t v49 = 0.0;
  }
  else {
    uint64_t v49 = v47;
  }
  prefRetriggerSecs = self->_prefRetriggerSecs;
  if (v49 != prefRetriggerSecs)
  {
    if (dword_100642038 <= 30)
    {
      if (dword_100642038 == -1)
      {
        prefRetriggerSecs = self->_prefRetriggerSecs;
      }

      LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent prefsChanged]",  30LL,  "Pref retrigger secs: %f -> %f",  prefRetriggerSecs,  v49);
    }

LABEL_145:
    self->_prefRetriggerSecs = v49;
  }

  CFPrefs_GetDouble(@"com.apple.Sharing", @"chTransferSecs", &v59);
  if (!v59) {
    id v48 = v51;
  }
  prefTransferSecs = self->_prefTransferSecs;
  if (v48 != prefTransferSecs)
  {
    if (dword_100642038 <= 30)
    {
      if (dword_100642038 == -1)
      {
        prefTransferSecs = self->_prefTransferSecs;
      }

      LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent prefsChanged]",  30LL,  "Pref transfer secs: %f -> %f",  prefTransferSecs,  v48);
    }

LABEL_153:
    self->_prefTransferSecs = v48;
  }

  uint64_t v53 = CFPrefs_GetInt64(@"com.apple.Sharing", @"chThrottleEventCount", &v59);
  if (v59) {
    os_log_t v54 = 0LL;
  }
  else {
    os_log_t v54 = v53;
  }
  prefThrottleEventCFIndex Count = self->_prefThrottleEventCount;
  if (v54 != prefThrottleEventCount)
  {
    if (dword_100642038 <= 30)
    {
      if (dword_100642038 == -1)
      {
        prefThrottleEventCFIndex Count = self->_prefThrottleEventCount;
      }

      LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent prefsChanged]",  30LL,  "Pref throttle event count: %d -> %d\n",  prefThrottleEventCount,  v54);
    }

LABEL_162:
    self->_prefThrottleEventCFIndex Count = v54;
  }

  uint64_t v56 = CFPrefs_GetInt64(@"com.apple.Sharing", @"chThrottleEventMax", &v59);
  if (v59) {
    char v57 = 3LL;
  }
  else {
    char v57 = v56;
  }
  prefThrottleEventMax = self->_prefThrottleEventMax;
  if (v57 != prefThrottleEventMax)
  {
    if (dword_100642038 <= 30)
    {
      if (dword_100642038 == -1)
      {
        prefThrottleEventMax = self->_prefThrottleEventMax;
      }

      LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent prefsChanged]",  30LL,  "Pref throttle event max: %d -> %d\n",  prefThrottleEventMax,  v57);
    }

LABEL_171:
    self->_prefThrottleEventMax = v57;
  }

  -[SDProxHandoffAgent _update](self, "_update");
}

uint64_t sub_1000711E8(uint64_t result)
{
  uint64_t v1 = result;
  if (dword_100642038 <= 40)
  {
    if (dword_100642038 != -1 || (Class result = _LogCategory_Initialize(&dword_100642038, 40LL), (_DWORD)result))
    {
      unsigned int v2 = "yes";
      if (*(_BYTE *)(*(void *)(v1 + 32) + 264LL)) {
        uint64_t v3 = "yes";
      }
      else {
        uint64_t v3 = "no";
      }
      if (!*(_BYTE *)(v1 + 40)) {
        unsigned int v2 = "no";
      }
      Class result = LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent setPreventNotifications:]_block_invoke",  40LL,  "Prevent notifications: %s -> %s\n",  v3,  v2);
    }
  }

  *(_BYTE *)(*(void *)(v1 + 32) + 264LL) = *(_BYTE *)(v1 + 40);
  return result;
}

id sub_100071748(uint64_t a1)
{
  return [*(id *)(a1 + 32) _commonCallCountChanged];
}

id sub_100071750(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _commonScreenStateChanged];
}

id sub_100071758(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _commonScreenStateChanged];
}

id sub_100071760(uint64_t a1)
{
  if (dword_100642038 <= 30 && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 30LL))) {
    LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent _commonEnsureStarted]_block_invoke_4",  30LL,  "System monitor activated\n");
  }
  [*(id *)(a1 + 32) _commonCallCountChanged];
  return [*(id *)(a1 + 32) _update];
}

id sub_1000717D8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _bleUpdateMappingAndNearbyCoalesced];
}

id sub_1000717E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _proxiedNotificationDidDismiss:a2 reason:a3];
}

id sub_1000717F0(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _proxiedNotificationWasTapped:a2];
}

LABEL_51:
}

          goto LABEL_52;
        }

        if (v15)
        {
          __int128 v35 = v107;
          uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue( -[SDNodeCoalescer setMappedContactIdentifier:relatedContactIdentifiers:]( self,  "setMappedContactIdentifier:relatedContactIdentifiers:",  v111,  v107));
          __int128 v40 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_originalNodes,  "objectForKeyedSubscript:",  v32));

          if (!v40)
          {
            NSErrorUserInfoKey v41 = (const void *)SFNodeCreateCopy(0LL, v6);
            -[NSMutableDictionary setObject:forKeyedSubscript:]( self->_originalNodes,  "setObject:forKeyedSubscript:",  v41,  v32);
            CFRelease(v41);
          }

          uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_originalNodes,  "objectForKeyedSubscript:",  v32));
          -[NSMutableDictionary setObject:forKeyedSubscript:](v98, "setObject:forKeyedSubscript:", v42, v32);

          __int16 v43 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v97, "objectForKeyedSubscript:", v32));
          if (v43)
          {
            uint64_t v44 = v43;
          }

          else
          {
            uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithObject:](&OBJC_CLASS___NSMutableArray, "arrayWithObject:", v6));
          }

          -[NSMutableDictionary setObject:forKeyedSubscript:](v97, "setObject:forKeyedSubscript:", v44, v32);

          goto LABEL_51;
        }

        if (v12)
        {
          if ((v103 & 1) == 0)
          {
            uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_originalNodes,  "objectForKeyedSubscript:",  v12));

            if (!v45)
            {
              uint64_t v46 = (const void *)SFNodeCreateCopy(0LL, v6);
              -[NSMutableDictionary setObject:forKeyedSubscript:]( self->_originalNodes,  "setObject:forKeyedSubscript:",  v46,  v12);
              CFRelease(v46);
            }

            __int16 v47 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_originalNodes,  "objectForKeyedSubscript:",  v12));
            -[NSMutableDictionary setObject:forKeyedSubscript:](v98, "setObject:forKeyedSubscript:", v47, v12);
          }

          id v48 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v94, "objectForKeyedSubscript:", v12));
          if (v48)
          {
            uint64_t v49 = v48;
            __int128 v35 = v107;
          }

          else
          {
            uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithObject:](&OBJC_CLASS___NSMutableArray, "arrayWithObject:", v6));
            __int128 v35 = v107;
          }

          -[NSMutableDictionary setObject:forKeyedSubscript:](v94, "setObject:forKeyedSubscript:", v49, v12);
        }

        else
        {
          -[NSMutableDictionary setObject:forKeyedSubscript:](v98, "setObject:forKeyedSubscript:", v6, v9);
          __int128 v35 = v107;
        }

  return v27;
}

      uint64_t v51 = v34 + 2;
      swift_endAccess(v61);
      *(void *)&uint64_t v52 = swift_bridgeObjectRelease(v38).n128_u64[0];
      swift_bridgeObjectRelease(v39, v52);
      if (v47 >= v50)
      {
        uint64_t v62 = v37;
        __int128 v35 = v6;
        __int128 v33 = v37;
      }

      else
      {
        __int128 v33 = (char *)v60;
        if (v51 != v6 || v34 >= v6) {
          *(_OWORD *)__int128 v34 = *(_OWORD *)v35;
        }
        id v64 = v35;
      }

      if (v35 > v57)
      {
        v34 -= 2;
        id v6 = v35;
      }

      goto LABEL_63;
    }
  }

  if (v8 >= -15)
  {
    if (a4 != __src || &__src[2 * v10] <= a4) {
      memmove(a4, __src, 16 * v10);
    }
    id v55 = (char *)&a4[2 * v10];
    uint64_t v62 = v55;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      os_log_t v54 = &a5[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropBonjourBrowser_serviceNamesToRetryCount];
      int v14 = a4;
      while (1)
      {
        id v15 = v7;
        id v16 = *v6;
        id v17 = (const char *)v6[1];
        id v18 = *v14;
        id v19 = (const char *)v14[1];
        *(void *)&id v20 = swift_beginAccess(v54, v61, 32LL, 0LL).n128_u64[0];
        id v21 = *(void *)v54;
        id v22 = *(void *)(*(void *)v54 + 16LL);
        *(void *)&id v23 = swift_bridgeObjectRetain(v17, v20).n128_u64[0];
        swift_bridgeObjectRetain(v19, v23);
        if (v22)
        {
          uint64_t v24 = sub_1003AD53C(v16, (uint64_t)v17);
          if ((v25 & 1) != 0)
          {
            unsigned int v26 = *(void *)(*(void *)(v21 + 56) + 8 * v24);
            if (*(void *)(v21 + 16)) {
              goto LABEL_16;
            }
          }

          else
          {
            unsigned int v26 = 0LL;
            if (*(void *)(v21 + 16))
            {
LABEL_16:
              swift_bridgeObjectRetain(v19);
              int v27 = sub_1003AD53C(v18, (uint64_t)v19);
              if ((v28 & 1) != 0) {
                __int16 v29 = *(void *)(*(void *)(v21 + 56) + 8 * v27);
              }
              else {
                __int16 v29 = 0LL;
              }
              swift_bridgeObjectRelease(v19);
              goto LABEL_23;
            }
          }

          __int16 v29 = 0LL;
        }

        else
        {
          unsigned int v26 = 0LL;
          __int16 v29 = 0LL;
        }

id sub_100071EF8(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 152) systemUIFlags];
  if (dword_100642038 <= 30)
  {
    id v3 = v2;
    if (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 30LL))
    {
      else {
        id v4 = "no";
      }
      LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent commonSystemUIChanged]_block_invoke",  30LL,  "System UI Changed %#{flags}, CanTrigger %s\n",  v3,  &unk_1004CAD6E,  v4);
    }
  }

  return [*(id *)(a1 + 32) _update];
}

id sub_100072040(uint64_t a1)
{
  return [*(id *)(a1 + 32) _run];
}

LABEL_32:
        id v3 = v12;
      }
    }
  }
}
}

    unsigned int v12 = 0LL;
    goto LABEL_33;
  }

  unsigned int v12 = (void *)v11;
  uint64_t v13 = CFStringGetTypeID();
  int v14 = CFDictionaryGetTypedValue(v12, @"certificateToken", v13, 0LL);
  id v15 = objc_claimAutoreleasedReturnValue(v14);
  if (!v15)
  {
    if (dword_1006429A8 <= 90
      && (dword_1006429A8 != -1 || _LogCategory_Initialize(&dword_1006429A8, 90LL)))
    {
      LogPrintF( &dword_1006429A8,  "-[SDAppleIDServerTask _parseCreateCertificateResponse:error:]",  90LL,  "### No certificate token \n");
    }
        }

        id v17 = obj;
        os_log_t v54 = [obj countByEnumeratingWithState:&v56 objects:v65 count:16];
      }

      while (v54);
      a3 = v47;
      id v7 = v48;
      uint64_t v42 = v50;
    }

    else
    {
      uint64_t v42 = 1;
    }

    goto LABEL_46;
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
    sub_1001177F0();
  }

  if (a3) {
    *a3 = 0;
  }
  __int16 v43 = &__NSArray0__struct;
LABEL_49:

  return v43;
}

            unsigned int v12 = v23;
LABEL_33:
            __int128 v33 = v54;
LABEL_34:

LABEL_35:
            id v28 = 0LL;
            goto LABEL_36;
          }

          __int128 v38 = (void *)objc_claimAutoreleasedReturnValue([v36 requestMessageHandler]);
          __int128 v39 = (void (*)(void))v38[2];
        }

        v39();

        goto LABEL_32;
      }

      id v48 = -6727;
    }

    else
    {
      uint64_t v36 = 0LL;
      id v48 = -6700;
    }

    char v57 = v48;
    goto LABEL_32;
  }

  id v28 = v27;
  if (v21
    && (__int16 v29 = (void *)objc_claimAutoreleasedReturnValue([v27 eventMessageHandler]), v29,
                                                                                                   v29))
  {
    id v30 = (void (**)(void, void))objc_claimAutoreleasedReturnValue([v28 eventMessageHandler]);
    ((void (**)(void, void *))v30)[2](v30, v21);

    unsigned int v12 = v23;
  }

  else
  {
    unsigned int v12 = v23;
    if (!v20
      || (uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v28 requestMessageHandler]),
          v31,
          !v31))
    {
      __int128 v33 = v54;
      if (v54
        && (__int128 v40 = (void *)objc_claimAutoreleasedReturnValue([v28 responseMessageInternalHandler]),
            v40,
            v40))
      {
        NSErrorUserInfoKey v41 = (void (**)(void, void))objc_claimAutoreleasedReturnValue([v28 responseMessageInternalHandler]);
        ((void (**)(void, id))v41)[2](v41, v54);
      }

      else if (dword_100643B70 <= 60 {
             && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 60LL)))
      }
      {
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _setupHandleSessionMessageType:src:end:cnx:session:]",  60LL,  "### BLE NearbyInfo setup session receive with no handler: %@\n",  v22);
      }

      goto LABEL_36;
    }

    uint64_t v32 = (void (**)(void, void))objc_claimAutoreleasedReturnValue([v28 requestMessageHandler]);
    ((void (**)(void, void *))v32)[2](v32, v20);
  }

  __int128 v33 = v54;
LABEL_36:
  __int16 v43 = v57;
  if (v57)
  {
    if (dword_100643B70 <= 60)
    {
      if (dword_100643B70 != -1 || (v46 = _LogCategory_Initialize(&dword_100643B70, 60LL), __int16 v43 = v57, v46))
      {
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _setupHandleSessionMessageType:src:end:cnx:session:]",  60LL,  "### BLE SetupRecvMsg failed: %#m\n",  v43);
        LODWORD(v43) = v57;
      }
    }
  }

  return v43;
}

    uint64_t v45 = +[NSString localizedStringWithFormat:]( &OBJC_CLASS___NSString,  "localizedStringWithFormat:",  v44,  a4,  v50,  v51);
    goto LABEL_40;
  }

  id v17 = v54;
  if (!a10)
  {
    uint64_t v51 = a4;
LABEL_37:
    int v50 = v23;
    goto LABEL_38;
  }

  int v50 = a4;
LABEL_29:
  uint64_t v45 = +[NSString localizedStringWithFormat:](&OBJC_CLASS___NSString, "localizedStringWithFormat:", v44, v23, v50, v51);
LABEL_40:
  __int16 v47 = (void *)objc_claimAutoreleasedReturnValue(v45);

  return v47;
}

  Class result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  Class result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  Class result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  Class result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  Class result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  Class result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  Class result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  Class result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  Class result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  Class result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  Class result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  Class result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  Class result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
}

  uint64_t v65 = v129[8];
  os_log_t v66 = &v35[v65];
  id v67 = *(void *)&v35[v65 + 8];
  uint64_t v68 = &v32[v65];
  uint64_t v69 = v68[1];
  if (!v67)
  {
    swift_bridgeObjectRetain(v68[1]);
    sub_1001A4BC8((uint64_t)v32, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    sub_1001A4BC8((uint64_t)v35, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    if (!v69) {
      goto LABEL_39;
    }
    uint64_t v70 = v69;
    goto LABEL_41;
  }

  if (!v69)
  {
    swift_bridgeObjectRetain(v67);
    sub_1001A4BC8((uint64_t)v32, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    sub_1001A4BC8((uint64_t)v35, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    uint64_t v70 = v67;
LABEL_41:
    swift_bridgeObjectRelease(v70);
    goto LABEL_18;
  }

  if (*v66 == *v68 && v67 == v69)
  {
    swift_bridgeObjectRetain(v67);
    sub_1001A4BC8((uint64_t)v32, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    sub_1001A4BC8((uint64_t)v35, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    swift_bridgeObjectRelease(v67);
LABEL_39:
    sub_1001A4B84((uint64_t)a1, (uint64_t)v29, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    sub_1001A4B84((uint64_t)a2, (uint64_t)v26, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    id v55 = (uint64_t)v119;
    uint64_t v56 = (uint64_t)v120;
    goto LABEL_43;
  }

  uint64_t v71 = _stringCompareWithSmolCheck(_:_:expecting:)(*v66, v67, *v68, v68[1], 0LL);
  swift_bridgeObjectRetain(v67);
  sub_1001A4BC8((uint64_t)v32, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
  sub_1001A4BC8((uint64_t)v35, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
  swift_bridgeObjectRelease(v67);
  sub_1001A4B84((uint64_t)a1, (uint64_t)v29, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
  os_log_t v54 = v128;
  sub_1001A4B84((uint64_t)a2, (uint64_t)v26, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
  id v55 = (uint64_t)v119;
  uint64_t v56 = (uint64_t)v120;
  if ((v71 & 1) == 0)
  {
LABEL_19:
    sub_1001A4BC8((uint64_t)v26, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    sub_1001A4BC8((uint64_t)v29, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
LABEL_20:
    uint64_t v58 = (uint64_t)v121;
    char v57 = (uint64_t)v122;
    sub_1001A4B84((uint64_t)a1, v55, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    id v59 = v127;
    sub_1001A4B84((uint64_t)a2, (uint64_t)v127, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    goto LABEL_21;
  }

      v118 = v157;
      UUID.init()(v116);
      SFAirDrop.TransferIdentifier.init(_:)(v118);
      v157 = v38;
      v119 = (uint64_t)v159;
      sub_1001A4B84(v160, (uint64_t)v159, type metadata accessor for SDAirDropServerConnectionIdentity);
      v120 = *(void **)(v2 + 48);
      v121 = *(void **)(v2 + 56);
      v154 = v15;
      v123 = *(void **)(v2 + 64);
      v122 = *(void *)(v2 + 72);
      v153 = *(void (**)(char *, char *, uint64_t))(v2 + 88);
      v125 = swift_unknownObjectWeakLoadStrong(v2 + 32, v124);
      v156 = *(void *)(v2 + 40);
      v126 = objc_allocWithZone((Class)type metadata accessor for SDAirDropReceiveHandler(0LL));
      swift_retain(v2);
      v127 = v120;
      v128 = v121;
      v129 = v123;
      swift_retain(v122);
      v130 = v153;
      v131 = v119;
      v93 = v157;
      v132 = sub_100429114((uint64_t)v154, v131, v127, v128, v129, v122, v130, v2, (uint64_t)&off_1005D5E10, v125, v156);

      swift_release(v122);
      swift_release(v2);
      swift_unknownObjectRelease(v125);
      v133 = v158;
      swift_beginAccess(v158, &v162, 33LL, 0LL);
      v134 = *v133;
      swift_unknownObjectRetain(v93);
      v159 = (char *)v132;
      v135 = swift_isUniquelyReferenced_nonNull_native(v134);
      *v133 = v134;
      if ((v135 & 1) == 0)
      {
        v134 = sub_10018BD88(0LL, *((void *)v134 + 2) + 1LL, 1, v134);
        *v158 = v134;
      }

      v137 = *((void *)v134 + 2);
      v136 = *((void *)v134 + 3);
      v138 = v160;
      if (v137 >= v136 >> 1)
      {
        v134 = sub_10018BD88((char *)(v136 > 1), v137 + 1, 1, v134);
        *v158 = v134;
      }

      *((void *)v134 + 2) = v137 + 1;
      v139 = &v134[16 * v137];
      v140 = v159;
      *((void *)v139 + 4) = v93;
      *((void *)v139 + 5) = v140;
      swift_endAccess(&v162);
      if (qword_100643FB8 != -1) {
        swift_once(&qword_100643FB8, sub_100227D00);
      }
      v141 = type metadata accessor for Logger(0LL);
      sub_100186DE4(v141, (uint64_t)qword_1006494F0);
      v104 = v155;
      sub_1001A4B84(v138, v155, type metadata accessor for SDAirDropServerConnectionIdentity);
      v142 = swift_retain_n(v2, 2LL);
      v106 = (os_log_s *)Logger.logObject.getter(v142);
      v143 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v106, v143))
      {
        v108 = swift_slowAlloc(22LL, -1LL);
        v144 = swift_slowAlloc(32LL, -1LL);
        v162 = (const char *)v144;
        *(_DWORD *)v108 = 136315394;
        v145 = sub_1003E8364();
        v147 = (const char *)v146;
        v161 = sub_10018CDB4(v145, v146, (uint64_t *)&v162);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, &v162, v108 + 4, v108 + 12);
        swift_bridgeObjectRelease(v147);
        sub_1001A4BC8(v104, type metadata accessor for SDAirDropServerConnectionIdentity);
        *(_WORD *)(v108 + 12) = 2048;
        v148 = *((void *)*v158 + 2);
        swift_release(v2);
        v161 = v148;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v161, &v162, v108 + 14, v108 + 22);
        swift_release(v2);
        _os_log_impl( (void *)&_mh_execute_header,  v106,  v143,  "Added bonjour connection %s count: %ld",  (uint8_t *)v108,  0x16u);
        swift_arrayDestroy(v144, 1LL, (char *)&type metadata for Any + 8);
        v114 = v144;
        goto LABEL_40;
      }

          sub_100187094(v1);
          return (unint64_t)v3;
        }
      }
    }
  }

  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

  id v3 = *(void *)(((unint64_t)*v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  id v6 = v56;
  uint64_t v25 = v59;
  if (v56 < 0) {
    goto LABEL_42;
  }
  if (v60)
  {
    unsigned int v26 = (v60 - 1) & v60;
    int v27 = __clz(__rbit64(v60)) | (v59 << 6);
LABEL_35:
    id v28 = *(void **)(*(void *)(v56 + 48) + 8 * v27);
    a1 = v28;
    goto LABEL_36;
  }

  uint64_t v49 = v59 + 1;
  if (!__OFADD__(v59, 1LL))
  {
    int v50 = (unint64_t)(v58 + 64) >> 6;
    if (v49 >= v50)
    {
      id v28 = 0LL;
      unsigned int v26 = 0LL;
      goto LABEL_36;
    }

    uint64_t v51 = *(void *)(v57 + 8 * v49);
    if (v51) {
      goto LABEL_90;
    }
    uint64_t v52 = v59 + 2;
    if (v59 + 2 >= v50)
    {
LABEL_106:
      id v28 = 0LL;
      unsigned int v26 = 0LL;
      uint64_t v25 = v49;
      goto LABEL_36;
    }

    uint64_t v51 = *(void *)(v57 + 8 * v52);
    if (v51) {
      goto LABEL_94;
    }
    uint64_t v1 = v59 + 3;
    if (v59 + 3 < v50)
    {
      uint64_t v51 = *(void *)(v57 + 8 * v1);
      if (v51)
      {
        uint64_t v49 = v59 + 3;
        goto LABEL_90;
      }

      uint64_t v52 = v59 + 4;
      if (v59 + 4 >= v50) {
        goto LABEL_109;
      }
      uint64_t v51 = *(void *)(v57 + 8 * v52);
      if (v51)
      {
LABEL_94:
        uint64_t v49 = v52;
LABEL_90:
        unsigned int v26 = (v51 - 1) & v51;
        int v27 = __clz(__rbit64(v51)) + (v49 << 6);
        uint64_t v25 = v49;
        goto LABEL_35;
      }

      uint64_t v49 = v59 + 5;
      if (v59 + 5 < v50)
      {
        uint64_t v51 = *(void *)(v57 + 8 * v49);
        if (!v51)
        {
          uint64_t v49 = v50 - 1;
          uint64_t v53 = v59 + 6;
          do
          {
            if (v50 == v53) {
              goto LABEL_106;
            }
            uint64_t v51 = *(void *)(v57 + 8 * v53++);
          }

          while (!v51);
          uint64_t v49 = v53 - 1;
        }

        goto LABEL_90;
      }
    }

    id v28 = 0LL;
    unsigned int v26 = 0LL;
    uint64_t v25 = v52;
    goto LABEL_36;
  }

  __break(1u);
}

            sub_100187094(v5);
            return;
          }
        }
      }
    }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

      if (++v47 == v43)
      {
        swift_release_n(v46, 2LL);
        id v2 = v44;
        goto LABEL_91;
      }
    }
  }

  uint64_t v70 = v2;
  id v17 = 0LL;
  uint64_t v72 = v14;
  id v18 = v14 + 1;
  id v19 = (char **)(v6 + 7);
  uint64_t v73 = v18 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    id v20 = v17;
    if (v73 == v17)
    {
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
      goto LABEL_102;
    }

    id v21 = v6[2];
    if (v20 >= v21) {
      goto LABEL_96;
    }
    if (v20 + 1 >= v21) {
      goto LABEL_97;
    }
    id v22 = *(v19 - 2);
    id v23 = (uint64_t)*(v19 - 1);
    uint64_t v24 = *v19;
    id v74 = *(v19 - 3);
    uint64_t v75 = (uint64_t)v22;
    swift_bridgeObjectRetain_n(v22, 2LL);
    swift_bridgeObjectRetain(v24);
    v25._countAndFlagsBits = v23;
    v25._object = v24;
    String.append(_:)(v25);
    *(void *)&unsigned int v26 = swift_bridgeObjectRelease(v22).n128_u64[0];
    swift_bridgeObjectRelease(v24, v26);
    int v27 = v74;
    uint64_t v76 = v16;
    id v28 = v16[2];
    __int16 v29 = v16[3];
    if (v28 >= v29 >> 1)
    {
      sub_10018D82C(v29 > 1, v28 + 1, 1);
      id v16 = v76;
    }

    void v16[2] = v28 + 1;
    id v30 = &v16[2 * v28];
    v30[4] = v27;
    v30[5] = v22;
    v19 += 4;
    id v17 = v20 + 2;
    --v15;
  }

  while (v15);
  uint64_t v31 = v20 + 2;
  if (v20 + 2 < v72)
  {
    id v2 = v70;
    while (1)
    {
      uint64_t v32 = v6[2];
      if (v31 >= v32) {
        goto LABEL_98;
      }
      __int128 v33 = v31 + 1;
      if (v31 + 1 >= v32) {
        goto LABEL_99;
      }
      __int128 v34 = *(v19 - 2);
      __int128 v35 = (uint64_t)*(v19 - 1);
      uint64_t v36 = *v19;
      id v74 = *(v19 - 3);
      uint64_t v75 = (uint64_t)v34;
      swift_bridgeObjectRetain_n(v34, 2LL);
      swift_bridgeObjectRetain(v36);
      v37._countAndFlagsBits = v35;
      v37._object = v36;
      String.append(_:)(v37);
      *(void *)&__int128 v38 = swift_bridgeObjectRelease(v34).n128_u64[0];
      swift_bridgeObjectRelease(v36, v38);
      __int128 v39 = v74;
      uint64_t v76 = v16;
      __int128 v40 = v16[2];
      NSErrorUserInfoKey v41 = v16[3];
      if (v40 >= v41 >> 1)
      {
        sub_10018D82C(v41 > 1, v40 + 1, 1);
        id v16 = v76;
      }

      void v16[2] = v40 + 1;
      uint64_t v42 = &v16[2 * v40];
      v42[4] = v39;
      v42[5] = v34;
      v19 += 4;
      uint64_t v31 = v33 + 1;
    }
  }

  swift_bridgeObjectRelease((const char *)v6);
  id v2 = v70;
  __int16 v43 = v16[2];
  if (v43) {
    goto LABEL_30;
  }
LABEL_90:
  swift_release(v16);
  id v48 = (char *)_swiftEmptyArrayStorage;
LABEL_91:
  uint64_t v68 = String.count.getter(v71, v2);
  swift_bridgeObjectRelease(v2);
  uint64_t v69 = *((void *)v48 + 2);
  if (!v69)
  {
LABEL_102:
    __break(1u);
    goto LABEL_103;
  }

  if (v68 / v69 == 2)
  {
    sub_1003C08D8(v48);
    swift_bridgeObjectRelease(v48);
  }

  else
  {
    swift_bridgeObjectRelease(v48, v70);
  }

  swift_bridgeObjectRetain(v13, v28);
  uint64_t v51 = v27;
  uint64_t v52 = (const char *)sub_1001CA43C(v14, (uint64_t)v13);
  *(void *)&uint64_t v53 = swift_bridgeObjectRelease(v13).n128_u64[0];
  swift_bridgeObjectRelease(v52, v53);
  os_log_t v54 = swift_endAccess(v81);
  if (v51) {
    goto LABEL_33;
  }
  uint64_t v75 = v22;
  id v55 = &v22[OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_startTime];
  uint64_t v56 = Date.timeIntervalSinceNow.getter(v54);
  char v57 = v77 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_firstDiscoveredDate;
  swift_beginAccess( v77 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_firstDiscoveredDate,  v81,  0LL,  0LL);
  sub_1001915A4(v57, (uint64_t)v12, &qword_1006457E8);
  uint64_t v58 = v78;
  id v59 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v78 + 48);
  id v60 = v76;
  id v61 = v59(v12, 1LL, v76);
  sub_100187100((uint64_t)v12, &qword_1006457E8);
  if (v61 == 1)
  {
    swift_bridgeObjectRelease((const char *)v82);
    uint64_t v62 = 0.0;
    goto LABEL_38;
  }

  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v6, v55, v60);
  sub_1001915A4(v57, (uint64_t)v10, &qword_1006457E8);
  if (v59(v10, 1LL, v60) != 1)
  {
    swift_bridgeObjectRelease((const char *)v82);
    uint64_t v63 = Date.timeIntervalSince(_:)(v10);
    id v64 = *(void (**)(char *, uint64_t))(v58 + 8);
    v64(v6, v60);
    v64(v10, v60);
    uint64_t v62 = v63 * -1000.0;
LABEL_38:
    if (v62 > 0.0) {
      uint64_t v65 = v62;
    }
    else {
      uint64_t v65 = 0.0;
    }
    os_log_t v66 = *(const char **)&v75[OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_bundleID + 8];
    swift_bridgeObjectRetain(v66);
    id v67 = (__CFString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v66);
    uint64_t v69 = Date.timeIntervalSince1970.getter(v68);
    if ((~*(void *)&v69 & 0x7FF0000000000000LL) != 0)
    {
      if (v69 > -1.0)
      {
        if (v69 < 1.84467441e19)
        {
          uint64_t v70 = *(void *)(v77
                          + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_maxDisplayableEndpointCount);
          if (v70 >= (uint64_t)0xFFFFFFFF80000000LL)
          {
            if (v70 <= 0x7FFFFFFF)
            {
              uint64_t v71 = *(void *)(v77
                              + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_currentDisplayableEndpointCount);
              if (v71 >= (uint64_t)0xFFFFFFFF80000000LL)
              {
                if (v71 <= 0x7FFFFFFF)
                {
                  uint64_t v72 = *(void *)(v77
                                  + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersInitiated);
                  if (v72 >= (uint64_t)0xFFFFFFFF80000000LL)
                  {
                    if (v72 <= 0x7FFFFFFF)
                    {
                      uint64_t v73 = *(void *)(v77
                                      + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersCompleted);
                      if (v73 >= (uint64_t)0xFFFFFFFF80000000LL)
                      {
                        if (v73 <= 0x7FFFFFFF)
                        {
                          id v74 = (uint64_t)[*(id *)(v77 + 16) discoverableLevel];
                          if (v74 >= (uint64_t)0xFFFFFFFF80000000LL)
                          {
                            if (v74 <= 0x7FFFFFFF)
                            {
                              sub_10002F674( 0LL,  0LL,  v67,  (unint64_t)v69,  v70,  v71,  v72,  v73,  v56 * -1000.0,  v65,  v74);

                              id v22 = v75;
                              goto LABEL_55;
                            }

                            goto LABEL_68;
                          }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}
}

    id v10 = (v22 - 1) & v22;
    id v16 = __clz(__rbit64(v22)) + (v9 << 6);
    goto LABEL_33;
  }

  __break(1u);
LABEL_38:
  __break(1u);
}

          __int16 v43 = (v47 - 1) & v47;
          uint64_t v45 = __clz(__rbit64(v47)) + (v38 << 6);
LABEL_33:
          sub_1004613A8(3LL, *(void *)(*(void *)(v36 + 48) + 8 * v45));
          sub_10028B078(v49);
          if (v43) {
            goto LABEL_18;
          }
        }
      }
    }

    else
    {
      __int128 v34 = (const char *)sub_10034F1E0(*(void *)(v2 + 216));
      __int128 v35 = sub_1003A0760(v20, (uint64_t)v34);
      swift_bridgeObjectRelease(v34);
      if (!v35) {
        goto LABEL_9;
      }
    }

    uint64_t v24 = sub_10034F210(*(void *)(v2 + 216));
    goto LABEL_14;
  }

  unsigned int v26 = (os_log_s *)Logger.logObject.getter(v17);
  int v27 = static os_log_type_t.default.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    id v28 = *(void *)(v2 + 216);
    __int16 v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v30 = swift_slowAlloc(32LL, -1LL);
    v191[0] = v30;
    *(_DWORD *)__int16 v29 = 136315138;
    uint64_t v31 = sub_10034F010(v28);
    __int128 v33 = (const char *)v32;
    *(void *)(v2 + 176) = sub_10018CDB4(v31, v32, v191);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v3 - 24, v3 - 16, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease(v33);
    _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "listEligibleDevices is not supported for authenticationType %s",  v29,  0xCu);
    swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  id v60 = &_swiftEmptySetSingleton;
  return (*(uint64_t (**)(void *, __n128))(v2 + 8))(v60, v61);
}

LABEL_64:
LABEL_65:
LABEL_66:

        goto LABEL_67;
      }

      if (dword_100642038 <= 90
        && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 90LL)))
      {
        LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent _runNotificationReady]",  90LL,  "### Failed to generate info to present: %@\n",  v5);
      }

      id v7 = 0LL;
      goto LABEL_64;
    }

    if (dword_100642038 <= 90
      && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 90LL)))
    {
      LogPrintF(&dword_100642038, "-[SDProxHandoffAgent _runNotificationReady]", 90LL, "### System cannot present UI\n");
    }
  }

    uint64_t v25 = *(void *)(a1 + 88);
    if (v25 <= 19)
    {
      unsigned int v26 = "Invalid";
      switch(v25)
      {
        case 0LL:
          goto LABEL_81;
        case 1LL:
          unsigned int v26 = "BackgroundOld";
          break;
        case 2LL:
          unsigned int v26 = "NormalOld";
          break;
        case 3LL:
          unsigned int v26 = "HighOld";
          break;
        case 4LL:
          unsigned int v26 = "AggressiveOld";
          break;
        case 10LL:
          unsigned int v26 = "Background";
          break;
        default:
          goto LABEL_80;
      }

      goto LABEL_81;
    }

    if (v25 > 39)
    {
      if (v25 == 40)
      {
        unsigned int v26 = "High";
        goto LABEL_81;
      }

      if (v25 == 50)
      {
        unsigned int v26 = "Aggressive";
        goto LABEL_81;
      }
    }

    else
    {
      if (v25 == 20)
      {
        unsigned int v26 = "Normal";
        goto LABEL_81;
      }

      if (v25 == 30)
      {
        unsigned int v26 = "HighNormal";
LABEL_81:
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleUpdateScanner:typeFlag:]_block_invoke",  10LL,  "Updating BLEScanner %p scanRate from %s to %s",  v22,  v24,  v26);
LABEL_82:
        [*(id *)(a1 + 32) setScanRate:*(void *)(a1 + 88)];
        goto LABEL_83;
      }
    }

    return;
  }

  if ([a1 airdropConfigData])
  {
    uint64_t v73 = v105;
    *(void *)&id v74 = swift_beginAccess(v105, &v109, 32LL, 0LL).n128_u64[0];
    p_superclass = &OBJC_METACLASS___SDUnlockSetupCreateSecret.superclass;
    uint64_t v76 = &selRef_setWatchIDsMissingSessionKey_;
    if (*((void *)*v105 + 2))
    {
      swift_bridgeObjectRetain(v7, v74);
      sub_1003AD53C(v103, (uint64_t)v7);
      if ((v77 & 1) != 0)
      {
        swift_endAccess(&v109);
        swift_bridgeObjectRelease_n(v7, 2LL);
        goto LABEL_61;
      }

      swift_bridgeObjectRelease(v7);
    }

    swift_endAccess(&v109);
    v78 = [(id)objc_opt_self(SDProximityController) sharedController];
    uint64_t v79 = [v78 checkDeviceRegion:a1];

    if (v79 != (id)4)
    {
      v80 = sub_100183168(0LL, (unint64_t *)&qword_100645140, &OBJC_CLASS___NSUserDefaults_ptr);
      v81 = (void *)static NSUserDefaults.airdrop.getter(v80);
      v82 = SFAirDropUserDefaults.a2aRangingAssumeClose.getter();

      if ((v82 & 1) == 0)
      {
        if (qword_1006440C8 != -1) {
          swift_once(&qword_1006440C8, sub_100291D1C);
        }
        uint64_t v89 = type metadata accessor for Logger(0LL);
        sub_100186DE4(v89, (uint64_t)qword_10064BA00);
        id v90 = swift_bridgeObjectRetain_n(v7, 2LL);
        id v91 = (os_log_s *)Logger.logObject.getter(v90);
        uint64_t v92 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v91, v92))
        {
          v93 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          id v94 = swift_slowAlloc(32LL, -1LL);
          v109 = v94;
          *(_DWORD *)v93 = 136315138;
          swift_bridgeObjectRetain(v7);
          uint64_t v95 = v103;
          v108 = (const char *)sub_10018CDB4(v103, (unint64_t)v7, &v109);
          uint64_t v76 = &selRef_setWatchIDsMissingSessionKey_;
          uint64_t v73 = v105;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109, v93 + 4, v93 + 12);
          swift_bridgeObjectRelease_n(v7, 3LL);
          _os_log_impl( (void *)&_mh_execute_header,  v91,  v92,  "Starting to measure RSSI for Ask to AirDrop for %s",  v93,  0xCu);
          swift_arrayDestroy(v94, 1LL, (char *)&type metadata for Any + 8);
          uint64_t v96 = v94;
          p_superclass = (__objc2_class **)(&OBJC_METACLASS___SDUnlockSetupCreateSecret + 8);
          swift_slowDealloc(v96, -1LL, -1LL);
          swift_slowDealloc(v93, -1LL, -1LL);
        }

        else
        {
          swift_bridgeObjectRelease_n(v7, 2LL);

          uint64_t v95 = v103;
        }

        swift_beginAccess(v73, &v109, 33LL, 0LL);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v73);
        v108 = *v73;
        *uint64_t v73 = (const char *)0x8000000000000000LL;
        sub_1003B3944(0, v95, v7, isUniquelyReferenced_nonNull_native);
        v98 = *v73;
        *uint64_t v73 = v108;
        *(void *)&v99 = swift_bridgeObjectRelease(v98).n128_u64[0];
        swift_bridgeObjectRelease(v7, v99);
        swift_endAccess(&v109);
        v100 = *(void (**)(uint64_t))(v2
                                              + OBJC_IVAR____TtC16DaemoniOSLibrary19SDTempPairingClient_objectChanged);
        if (v100)
        {
          int v101 = *(void *)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary19SDTempPairingClient_objectChanged + 8);
          v102 = swift_retain(v101);
          v100(v102);
          sub_100224FF8((uint64_t)v100, v101);
        }

        sub_1003EA360();
        goto LABEL_61;
      }

      if (qword_1006440C8 != -1) {
        swift_once(&qword_1006440C8, sub_100291D1C);
      }
      v83 = type metadata accessor for Logger(0LL);
      v84 = sub_100186DE4(v83, (uint64_t)qword_10064BA00);
      uint64_t v85 = (os_log_s *)Logger.logObject.getter(v84);
      uint64_t v86 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v85, v86))
      {
        v87 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)v87 = 0;
        _os_log_impl((void *)&_mh_execute_header, v85, v86, "Assuming device is in range", v87, 2u);
        id v88 = v87;
        p_superclass = &OBJC_METACLASS___SDUnlockSetupCreateSecret.superclass;
        swift_slowDealloc(v88, -1LL, -1LL);
      }
    }

    sub_100295F48(v103, v7);
    swift_bridgeObjectRelease(v7);
LABEL_61:
    if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary19SDTempPairingClient_hasStartedBonjourBrowsing) & 1) == 0) {
      sub_10029484C();
    }
    uint64_t v62 = (os_log_s *)[(id)objc_opt_self(p_superclass + 384) v76[51]];
    -[os_log_s sender:notifyBluetoothSample:forType:](v62, "sender:notifyBluetoothSample:forType:", v2, a1, 3LL);
    goto LABEL_64;
  }

  *(void *)&uint64_t v65 = swift_beginAccess(v105, &v109, 32LL, 0LL).n128_u64[0];
  if (!*((void *)*v105 + 2))
  {
LABEL_41:
    swift_endAccess(&v109);
    swift_bridgeObjectRelease(v7);
    return;
  }

  swift_bridgeObjectRetain(v7, v65);
  sub_1003AD53C(v103, (uint64_t)v7);
  if ((v66 & 1) == 0)
  {
    swift_bridgeObjectRelease(v7);
    goto LABEL_41;
  }

  swift_endAccess(&v109);
  swift_bridgeObjectRelease(v7);
  if (qword_1006440C8 != -1) {
    swift_once(&qword_1006440C8, sub_100291D1C);
  }
  id v67 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v67, (uint64_t)qword_10064BA00);
  swift_bridgeObjectRetain(v7);
  uint64_t v69 = (os_log_s *)Logger.logObject.getter(v68);
  uint64_t v70 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v69, v70))
  {
    uint64_t v71 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v72 = swift_slowAlloc(32LL, -1LL);
    v109 = v72;
    *(_DWORD *)uint64_t v71 = 136315138;
    swift_bridgeObjectRetain(v7);
    v108 = (const char *)sub_10018CDB4(v103, (unint64_t)v7, &v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109, v71 + 4, v71 + 12);
    swift_bridgeObjectRelease_n(v7, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v69, v70, "Device (%s) no longer advertising Ask to AirDrop", v71, 0xCu);
    swift_arrayDestroy(v72, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v72, -1LL, -1LL);
    swift_slowDealloc(v71, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v7, 2LL);
  }

  sub_1002964A4(a1, 0);
}

  Class result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

      swift_bridgeObjectRelease(v48, v102.n128_f64[0]);
      swift_release(v163);
      v126 = v154;
      v127 = (const char **)&v154[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropBonjourBrowser_serviceNamesToBrowseResult];
      *(void *)&v128 = swift_beginAccess( &v154[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropBonjourBrowser_serviceNamesToBrowseResult],  v174,  0LL,  0LL).n128_u64[0];
      v129 = *v127;
      swift_bridgeObjectRetain(v129, v128);
      v131 = sub_10018D564(v130);
      swift_bridgeObjectRelease(v129);
      v173 = v131;
      v132 = v126;
      swift_retain(v131);
      sub_10032DB8C((uint64_t *)&v173, v132);
      swift_release(v131);

      v133 = (uint64_t)v173;
      CurrentValueSubject.send(_:)(&v173);
      return swift_release(v133);
    }

  Class result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

                    __break(1u);
                    goto LABEL_65;
                  }

LABEL_67:
}

  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000001FLL,  0x800000010050AC80LL,  "DaemoniOSLibrary/Network+SFAirDrop.swift",  40LL,  2LL,  680LL,  0);
  __break(1u);

  Class result = swift_release(v173);
  __break(1u);
  return result;
}

                          __break(1u);
LABEL_68:
                          __break(1u);
                          goto LABEL_69;
                        }

id sub_100073A34(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_runCallHandoffHandleResponse:error:", a2);
}

id sub_100073BF0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _runCallHandoffHandleDelayTimerFired];
}

id sub_100074098(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _bleActionDeviceFound:a2];
}

id sub_1000740A4(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _bleActionDeviceLost:a2];
}

id sub_1000740B0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _bleActionDeviceChanged:a2];
}

void sub_1000740BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (dword_100642038 <= 60
      && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 60LL)))
    {
      LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent _bleActionDiscoveryEnsureStarted]_block_invoke_4",  60LL,  "### BLE action discovery activate failed: %@\n",  v3);
    }
  }

  else if (dword_100642038 <= 30 {
         && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 30LL)))
  }
  {
    LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent _bleActionDiscoveryEnsureStarted]_block_invoke_4",  30LL,  "BLE action discovery activated\n");
  }

  [*(id *)(a1 + 32) _update];
}

LABEL_68:
          [v7 setState:11];
          uint64_t v25 = v7;
          unsigned int v26 = 13LL;
LABEL_69:
          [v25 setNextState:v26];
          uiDevice = self->_uiDevice;
          self->_uiDevice = 0LL;

          goto LABEL_70;
        }

        if ([v7 canTransition:16])
        {
          if (self->_stationary || !-[SDProxHandoffAgent _systemCanTrigger](self, "_systemCanTrigger"))
          {
            if (dword_100642038 <= 90
              && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 90LL)))
            {
              if (self->_stationary) {
                id v23 = "yes";
              }
              else {
                id v23 = "no";
              }
              LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent _bleActionDeviceChanged:]",  90LL,  "### %@: System state prevents transfer (%d): stationary %s, flags %#{flags}\n",  v17,  v16,  v23,  -[SDStatusMonitor systemUIFlags](self->_statusMonitor, "systemUIFlags"),  &unk_1004CAD6E);
            }

            goto LABEL_70;
          }

          if (dword_100642038 <= 30
            && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 30LL)))
          {
            LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent _bleActionDeviceChanged:]",  30LL,  "%@: Start transfer countdown (%d)\n",  v17,  v16);
          }

          [v7 setTransferPendingStartTicks:mach_absolute_time()];
          [v7 setState:16];
          uint64_t v25 = v7;
          unsigned int v26 = 17LL;
          goto LABEL_69;
        }

        if ((v14 & 1) != 0)
        {
LABEL_37:
          if (![v7 canTransition:11])
          {
LABEL_70:
            -[SDProxHandoffAgent _proximityClientDeviceUpdated:](self, "_proximityClientDeviceUpdated:", v7);
            -[NSMutableDictionary setObject:forKeyedSubscript:]( self->_mappedDevices,  "setObject:forKeyedSubscript:",  v7,  v4);
            -[SDProxHandoffAgent _run](self, "_run");

LABEL_71:
            goto LABEL_72;
          }

          if (dword_100642038 <= 30
            && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 30LL)))
          {
            LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent _bleActionDeviceChanged:]",  30LL,  "%@: Trigger (%d)",  v17,  v16);
          }

          goto LABEL_68;
        }
      }

      else if ((v14 & 1) != 0)
      {
        if ([v7 state] == 20 && objc_msgSend(v7, "canTransition:", 15))
        {
          id v18 = mach_absolute_time();
          id v19 = UpTicksToSecondsF(v18 - (void)[v7 transferDoneTicks]);
          if (v19 <= self->_prefRetriggerSecs || [v7 transferDoneTicks] == (id)-1)
          {
            if ([v7 transferDoneTicks] != (id)-1
              && dword_100642038 <= 30
              && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 30LL)))
            {
              LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent _bleActionDeviceChanged:]",  30LL,  "%@: Not yet eligible for retrigger after %f (%d)\n",  v17,  *(void *)&v19,  v16);
            }
          }

          else
          {
            if (dword_100642038 <= 30
              && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 30LL)))
            {
              LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent _bleActionDeviceChanged:]",  30LL,  "%@: Make eligible for retrigger after %f (%d)\n",  v17,  *(void *)&v19,  v16);
            }

            [v7 setNextState:15];
            [v7 setTransferDoneDurationSecs:v19];
            [v7 setTransferDoneTicks:-1];
          }

          goto LABEL_70;
        }

        goto LABEL_37;
      }

      if ([v7 state] == 12)
      {
        id v20 = mach_absolute_time();
        id v21 = UpTicksToSecondsF(v20 - (void)[v7 pendingContentTicks]);
        if (dword_100642038 <= 30)
        {
          id v22 = v21;
          if (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 30LL)) {
            LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent _bleActionDeviceChanged:]",  30LL,  "%@: Cancel pending content (%d, wait: %f)\n",  v17,  v16,  *(void *)&v22);
          }
        }

        [v7 setState:10];
        [v7 setPendingContentTicks:-1];
        [v7 setNextState:0];
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v7 effectiveID]);
        if (v24)
        {
          -[SDProxHandoffAgent _proximityClientDeviceExitedImmediate:]( self,  "_proximityClientDeviceExitedImmediate:",  v24);
          -[SDProxHandoffAgent _proximityClientDeviceDidUnTrigger:](self, "_proximityClientDeviceDidUnTrigger:", v24);
        }
      }

      else if ([v7 canTransition:10])
      {
        if (dword_100642038 <= 30
          && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 30LL)))
        {
          LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent _bleActionDeviceChanged:]",  30LL,  "%@ exited medium bubble (%d)\n",  v17,  v16);
        }

        [v7 setState:10];
        [v7 setNextState:0];
      }

      goto LABEL_70;
    }
  }

    v311 = (v139 - 1) & v139;
    v312 = (char *)v140;
    v137 = __clz(__rbit64(v139)) + (v140 << 6);
LABEL_69:
    v142 = v299;
    v143 = *(void *)(v299 + 48);
    v144 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
    v145 = *(void **)(v144 - 8);
    v146 = v143 + v145[9] * v137;
    v147 = (void (*)(void))v145[2];
    v148 = v290;
    ((void (*)(char *, uint64_t, uint64_t))v147)(v290, v146, v144);
    v149 = *(void *)(v142 + 56);
    v150 = type metadata accessor for SFAirDropReceive.Transfer(0LL);
    v313 = *(void *)(v150 - 8);
    v151 = v292;
    v152 = *(void (**)(char *, unint64_t, uint64_t))(v313 + 16);
    v152(&v148[*(int *)(v292 + 48)], v149 + *(void *)(v313 + 72) * v137, v150);
    v153 = (uint64_t)v148;
    v154 = v303;
    sub_1001870BC(v153, v303, &qword_100649DC0);
    v155 = *(int *)(v151 + 48);
    v156 = v291;
    v157 = (const __CFString *)&v291[v155];
    v158 = v154 + v155;
    ((void (*)(char *, uint64_t, uint64_t))v147)(v291, v154, v144);
    v310 = v157;
    v159 = v157;
    v160 = v150;
    v161 = v144;
    v162 = ((uint64_t (*)(const __CFString *, uint64_t, uint64_t))v152)(v159, v158, v160);
    SFAirDrop.TransferIdentifier.id.getter(v162);
    v163 = (void (*)(char *, uint64_t))v145[1];
    v163(v156, v144);
    v164 = &v304[*(int *)(v151 + 48)];
    v147();
    v165 = ((uint64_t (*)(char *, uint64_t, uint64_t))v152)(v164, v158, v160);
    v166 = (uint64_t)v289;
    SFAirDropReceive.Transfer.activeInterfaceType.getter(v165);
    v167 = *(void (**)(char *, uint64_t))(v313 + 8);
    v167(v164, v160);
    v168 = v318;
    v169 = *(unsigned int (**)(void, void, void))(v318 + 48);
    id v17 = (uint64_t)v315;
    if (v169(v166, 1LL, v315) == 1)
    {
      v170 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v168 + 56);
      v171 = (uint64_t)v288;
      v170(v288, 1LL, 1LL, v17);
      sub_100187100(v166, &qword_100656490);
    }

    else
    {
      v171 = (uint64_t)v288;
      (*(void (**)(char *, uint64_t, uint64_t))(v168 + 32))(v288, v166, v17);
      v170 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v168 + 56);
      v170((char *)v171, 0LL, 1LL, v17);
    }

    v163(v304, v161);
    v172 = v169(v171, 1LL, v17);
    a1 = v309;
    if (v172 == 1)
    {
      sub_100187100(v171, &qword_100656490);
      swift_bridgeObjectRetain(a1);
      v173 = sub_1003AD618(v317);
      v175 = v174;
      swift_bridgeObjectRelease(a1);
      if ((v175 & 1) != 0)
      {
        v313 = (uint64_t)v167;
        v176 = swift_isUniquelyReferenced_nonNull_native(a1);
        v322 = a1;
        v135 = v302;
        if ((v176 & 1) == 0)
        {
          sub_1003AEE9C();
          a1 = v322;
        }

        v134 = (void (*)(unint64_t, uint64_t))*((void *)v319 + 1);
        v136 = v316;
        v134(*(void *)(a1 + 48) + *((void *)v319 + 9) * v173, v316);
        v177 = v322;
        v133 = (uint64_t)v279;
        (*(void (**)(char *, unint64_t, uint64_t))(v168 + 32))( v279,  *(void *)(v322 + 56) + *(void *)(v168 + 72) * v173,  v17);
        v309 = v177;
        sub_1001CBD44(v173, v177);
        swift_bridgeObjectRelease(0x8000000000000000LL);
        v170((char *)v133, 0LL, 1LL, v17);
        v167 = (void (*)(char *, uint64_t))v313;
      }

      else
      {
        v133 = (uint64_t)v279;
        v170(v279, 1LL, 1LL, v17);
        v134 = (void (*)(unint64_t, uint64_t))*((void *)v319 + 1);
        v135 = v302;
        v136 = v316;
      }

      v134(v317, v136);
      sub_100187100(v133, &qword_100656490);
      __int128 v38 = v314;
      int v50 = v136;
      uint64_t v73 = (uint64_t)v135;
    }

    else
    {
      v178 = *(void (**)(char *, uint64_t, uint64_t))(v168 + 32);
      v178(v287, v171, v17);
      v179 = swift_isUniquelyReferenced_nonNull_native(a1);
      v322 = a1;
      v181 = sub_1003AD618(v317);
      v182 = *(void *)(a1 + 16);
      v183 = (v180 & 1) == 0;
      v184 = v182 + v183;
      if (__OFADD__(v182, v183)) {
        goto LABEL_157;
      }
      v185 = v180;
      if (*(void *)(a1 + 24) >= v184)
      {
        if ((v179 & 1) == 0) {
          sub_1003AEE9C();
        }
      }

      else
      {
        sub_1003A9F00(v184, v179);
        v186 = sub_1003AD618(v317);
        if ((v185 & 1) != (v187 & 1)) {
          goto LABEL_167;
        }
        v181 = v186;
      }

      v188 = v318;
      int v50 = v316;
      v189 = (void *)v322;
      if ((v185 & 1) != 0)
      {
        (*(void (**)(unint64_t, char *, uint64_t))(v318 + 40))( *(void *)(v322 + 56) + *(void *)(v318 + 72) * v181,  v287,  v17);
      }

      else
      {
        *(void *)(v322 + 8 * (v181 >> 6) + 64) |= 1LL << v181;
        (*((void (**)(unint64_t, uint64_t, uint64_t))v319 + 2))( v189[6] + *((void *)v319 + 9) * v181,  v317,  v50);
        v178((char *)(v189[7] + *(void *)(v188 + 72) * v181), (uint64_t)v287, v17);
        v190 = v189[2];
        v127 = __OFADD__(v190, 1LL);
        v191 = v190 + 1;
        if (v127) {
          goto LABEL_161;
        }
        v189[2] = v191;
      }

      v309 = v322;
      swift_bridgeObjectRelease(0x8000000000000000LL);
      (*((void (**)(uint64_t, uint64_t))v319 + 1))(v317, v50);
      uint64_t v73 = (uint64_t)v302;
      __int128 v38 = v314;
    }

    v132 = v311;
    a1 = (int64_t)v312;
    v167((char *)v310, v160);
    sub_100187100(v303, &qword_100649DC0);
  }

    v317 = (v141 - 1) & v141;
    v318 = (char *)v142;
    v139 = __clz(__rbit64(v141)) + (v142 << 6);
LABEL_69:
    v144 = v305;
    v145 = *((void *)v305 + 6);
    v146 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
    v147 = *(void **)(v146 - 8);
    v148 = v145 + v147[9] * v139;
    v149 = (void (*)(void))v147[2];
    v150 = v296;
    ((void (*)(char *, uint64_t, uint64_t))v149)(v296, v148, v146);
    v151 = *((void *)v144 + 7);
    v152 = type metadata accessor for SFAirDropReceive.Transfer(0LL);
    v319 = *(void *)(v152 - 8);
    v153 = v298;
    v154 = *(void (**)(char *, unint64_t, uint64_t))(v319 + 16);
    v154(&v150[*(int *)(v298 + 48)], v151 + *(void *)(v319 + 72) * v139, v152);
    v155 = (uint64_t)v150;
    v156 = v309;
    sub_1001870BC(v155, v309, &qword_100649DC0);
    v157 = *(int *)(v153 + 48);
    v158 = v297;
    v159 = (const __CFString *)&v297[v157];
    v160 = v156 + v157;
    ((void (*)(char *, uint64_t, uint64_t))v149)(v297, v156, v146);
    v316 = v159;
    v161 = v159;
    v162 = v152;
    v163 = v146;
    v164 = ((uint64_t (*)(const __CFString *, uint64_t, uint64_t))v154)(v161, v160, v162);
    SFAirDrop.TransferIdentifier.id.getter(v164);
    v165 = (void (*)(char *, uint64_t))v147[1];
    v165(v158, v146);
    v166 = &v310[*(int *)(v153 + 48)];
    v149();
    v167 = ((uint64_t (*)(char *, uint64_t, uint64_t))v154)(v166, v160, v162);
    v168 = (uint64_t)v295;
    SFAirDropReceive.Transfer.activeInterfaceType.getter(v167);
    v169 = *(void (**)(char *, uint64_t))(v319 + 8);
    v169(v166, v162);
    v170 = v324;
    v171 = *(unsigned int (**)(void, void, void))(v324 + 48);
    id v17 = (uint64_t)v321;
    if (v171(v168, 1LL, v321) == 1)
    {
      v172 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v170 + 56);
      v173 = (uint64_t)v294;
      v172(v294, 1LL, 1LL, v17);
      sub_100187100(v168, &qword_100656490);
    }

    else
    {
      v173 = (uint64_t)v294;
      (*(void (**)(char *, uint64_t, uint64_t))(v170 + 32))(v294, v168, v17);
      v172 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v170 + 56);
      v172((char *)v173, 0LL, 1LL, v17);
    }

    v165(v310, v163);
    v174 = v171(v173, 1LL, v17);
    a1 = v315;
    if (v174 == 1)
    {
      sub_100187100(v173, &qword_100656490);
      swift_bridgeObjectRetain((const char *)a1);
      v175 = sub_1003AD618(v323);
      v177 = v176;
      swift_bridgeObjectRelease((const char *)a1);
      if ((v177 & 1) != 0)
      {
        v319 = (uint64_t)v169;
        v178 = swift_isUniquelyReferenced_nonNull_native(a1);
        v328 = a1;
        v137 = v308;
        if ((v178 & 1) == 0)
        {
          sub_1003AEE9C();
          a1 = v328;
        }

        v136 = (void (*)(unint64_t, uint64_t))*((void *)v325 + 1);
        v138 = v322;
        v136(*(void *)(a1 + 48) + *((void *)v325 + 9) * v175, v322);
        v179 = v328;
        v135 = (uint64_t)v285;
        (*(void (**)(char *, unint64_t, uint64_t))(v170 + 32))( v285,  *(void *)(v328 + 56) + *(void *)(v170 + 72) * v175,  v17);
        v315 = v179;
        sub_1001CBD44(v175, v179);
        v180 = swift_bridgeObjectRelease((const char *)0x8000000000000000LL);
        ((void (*)(uint64_t, void, uint64_t, uint64_t, __n128))v172)(v135, 0LL, 1LL, v17, v180);
        v169 = (void (*)(char *, uint64_t))v319;
      }

      else
      {
        v135 = (uint64_t)v285;
        v172(v285, 1LL, 1LL, v17);
        v136 = (void (*)(unint64_t, uint64_t))*((void *)v325 + 1);
        v137 = v308;
        v138 = v322;
      }

      v136(v323, v138);
      sub_100187100(v135, &qword_100656490);
      __int128 v38 = v320;
      int v50 = v138;
      uint64_t v73 = (uint64_t)v137;
    }

    else
    {
      v181 = *(void (**)(char *, uint64_t, uint64_t))(v170 + 32);
      v181(v293, v173, v17);
      v182 = swift_isUniquelyReferenced_nonNull_native(a1);
      v328 = a1;
      v184 = sub_1003AD618(v323);
      v185 = *(void *)(a1 + 16);
      v186 = (v183 & 1) == 0;
      v187 = v185 + v186;
      if (__OFADD__(v185, v186)) {
        goto LABEL_157;
      }
      v188 = v183;
      if (*(void *)(a1 + 24) >= v187)
      {
        if ((v182 & 1) == 0) {
          sub_1003AEE9C();
        }
      }

      else
      {
        sub_1003A9F00(v187, v182);
        v189 = sub_1003AD618(v323);
        if ((v188 & 1) != (v190 & 1)) {
          goto LABEL_167;
        }
        v184 = v189;
      }

      v191 = v324;
      int v50 = v322;
      v192 = (void *)v328;
      if ((v188 & 1) != 0)
      {
        (*(void (**)(unint64_t, char *, uint64_t))(v324 + 40))( *(void *)(v328 + 56) + *(void *)(v324 + 72) * v184,  v293,  v17);
      }

      else
      {
        *(void *)(v328 + 8 * (v184 >> 6) + 64) |= 1LL << v184;
        (*((void (**)(unint64_t, uint64_t, uint64_t))v325 + 2))( v192[6] + *((void *)v325 + 9) * v184,  v323,  v50);
        v181((char *)(v192[7] + *(void *)(v191 + 72) * v184), (uint64_t)v293, v17);
        v193 = v192[2];
        v128 = __OFADD__(v193, 1LL);
        v194 = v193 + 1;
        if (v128) {
          goto LABEL_161;
        }
        v192[2] = v194;
      }

      v315 = v328;
      v195 = swift_bridgeObjectRelease((const char *)0x8000000000000000LL);
      (*((void (**)(uint64_t, uint64_t, __n128))v325 + 1))(v323, v50, v195);
      uint64_t v73 = (uint64_t)v308;
      __int128 v38 = v320;
    }

    v134 = v317;
    a1 = (int64_t)v318;
    v169((char *)v316, v162);
    sub_100187100(v309, &qword_100649DC0);
  }

                v201 = 0;
              }

              else
              {
                swift_bridgeObjectRelease(v116);
                v201 = 1;
              }

        v176 = (v70 - 1) & v70;
        v177 = v69;
        id v67 = __clz(__rbit64(v70)) + (v69 << 6);
      }

      break;
    }

    uint64_t v72 = *(void *)(*(void *)(v174 + 48) + 8 * v67);
    id v74 = *(uint64_t (**)(uint64_t))v171;
    uint64_t v73 = *(void *)(v171 + 8);
    swift_retain();
    v173 = v72;
    uint64_t v75 = v74(v72);
    swift_release(v73);
    if ((v75 & 0xC000000000000001LL) != 0)
    {
      id v3 = (uint64_t)&_swiftEmptySetSingleton;
      v188[0] = (uint64_t)&_swiftEmptySetSingleton;
      if (v75 < 0) {
        uint64_t v76 = v75;
      }
      else {
        uint64_t v76 = v75 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v77 = __CocoaSet.makeIterator()(v76);
      v78 = __CocoaSet.Iterator.next()(v77);
      if (v78)
      {
        uint64_t v79 = v78;
        v80 = sub_100183168(0LL, (unint64_t *)&unk_10064B7B0, &OBJC_CLASS___SFAutoUnlockDevice_ptr);
LABEL_77:
        uint64_t *v63 = v79;
        swift_dynamicCast(v166, v63, (char *)&type metadata for Swift.AnyObject + 8, v80, 7LL);
        id v18 = 0LL;
        v81 = sub_10046165C(v166, v1);
        v82 = *v166;
        if ((v81 & 1) == 0)
        {

          goto LABEL_76;
        }

        v83 = *(void *)(v3 + 16);
        if (*(void *)(v3 + 24) <= v83)
        {
          sub_1003B8014(v83 + 1);
          id v3 = v188[0];
        }

        id v61 = NSObject._rawHashValue(seed:)(*(void *)(v3 + 40));
        v84 = v3 + 56;
        uint64_t v85 = -1LL << *(_BYTE *)(v3 + 32);
        uint64_t v86 = v61 & ~v85;
        v87 = v86 >> 6;
        if (((-1LL << v86) & ~*(void *)(v3 + 56 + 8 * (v86 >> 6))) != 0)
        {
          id v88 = __clz(__rbit64((-1LL << v86) & ~*(void *)(v3 + 56 + 8 * (v86 >> 6)))) | v86 & 0x7FFFFFFFFFFFFFC0LL;
          goto LABEL_90;
        }

        uint64_t v89 = 0;
        id v90 = (unint64_t)(63 - v85) >> 6;
        while (++v87 != v90 || (v89 & 1) == 0)
        {
          id v91 = v87 == v90;
          if (v87 == v90) {
            v87 = 0LL;
          }
          v89 |= v91;
          uint64_t v92 = *(void *)(v84 + 8 * v87);
          if (v92 != -1)
          {
            id v88 = __clz(__rbit64(~v92)) + (v87 << 6);
LABEL_90:
            *(void *)(v84 + ((v88 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v88;
            *(void *)(*(void *)(v3 + 48) + 8 * v8_Block_object_dispose((const void *)(v1 - 96), 8) = v82;
            ++*(void *)(v3 + 16);
LABEL_76:
            uint64_t v79 = __CocoaSet.Iterator.next()(v61);
            if (!v79) {
              goto LABEL_91;
            }
            goto LABEL_77;
          }
        }

        __break(1u);
        goto LABEL_156;
      }

LABEL_72:
}

    uint64_t v32 = 0LL;
    __int128 v33 = 0LL;
    __int128 v34 = 0LL;
    uint64_t v31 = 0LL;
    goto LABEL_48;
  }

  uint64_t v24 = v11;
  [v13 getUUIDBytes:v79];
  -[NSMutableData appendBytes:length:](v23, "appendBytes:length:", v79, 16LL);
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v65 headerFields]);
  if (!v25) {
    uint64_t v25 = &__NSDictionary0__struct;
  }
  uint64_t v62 = v25;
  unsigned int v26 = [v25 mutableCopy];
  int v27 = v26;
  if (v22)
  {
    [v22 getUUIDBytes:&v80];
    id v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", &v80, 16LL));
    [v27 setObject:v28 forKeyedSubscript:@"_serviceUUID"];

    id v61 = v27;
    __int16 v29 = CFBinaryPlistStreamedCreateDataEx(v27, 92LL, &v76);
    id v30 = (void *)v29;
    if (v76)
    {
      uint64_t v31 = 0LL;
      __int128 v33 = v27;
      uint64_t v32 = v62;
      uint64_t v11 = v24;
      __int128 v34 = (void *)v29;
      goto LABEL_48;
    }

    -[NSMutableData appendData:](v23, "appendData:", v29);
    __int128 v35 = objc_claimAutoreleasedReturnValue([v65 bodyData]);
    uint64_t v11 = v24;
    if (!v35) {
      __int128 v35 = objc_claimAutoreleasedReturnValue(+[NSData data](&OBJC_CLASS___NSData, "data"));
    }
    id v60 = (void *)v35;
    __int128 v34 = (void *)CFBinaryPlistStreamedCreateDataEx(v35, 92LL, &v76);

    if (!v76)
    {
      -[NSMutableData appendData:](v23, "appendData:", v34);
      if (v80 != 0x10000001000000LL || v81 != 0xDF80FBF31F000080LL)
      {
        id v59 = v22;
        __int128 v37 = (void *)objc_claimAutoreleasedReturnValue([v65 deviceIDs]);
        id obj = v37;
        if (v37)
        {
          __int128 v38 = v37;
          char v57 = v34;
          __int128 v39 = v23;
          uint64_t v58 = v11;
          id v74 = 0u;
          uint64_t v75 = 0u;
          uint64_t v72 = 0u;
          uint64_t v73 = 0u;
          __int128 v40 = [v37 countByEnumeratingWithState:&v72 objects:v78 count:16];
          if (v40)
          {
            NSErrorUserInfoKey v41 = v40;
            uint64_t v42 = *(void *)v73;
            do
            {
              for (unint64_t i = 0LL; i != v41; unint64_t i = (char *)i + 1)
              {
                uint64_t v44 = v15;
                if (*(void *)v73 != v42) {
                  objc_enumerationMutation(obj);
                }
                id v15 = *(id *)(*((void *)&v72 + 1) + 8LL * (void)i);

                uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_bleConnections,  "objectForKeyedSubscript:",  v15));
                if (v45)
                {
                  v69[0] = _NSConcreteStackBlock;
                  v69[1] = 3221225472LL;
                  v69[2] = sub_10016C82C;
                  v69[3] = &unk_1005CBE78;
                  uint64_t v70 = v15;
                  uint64_t v71 = v65;
                  [v45 sendData:v39 completion:v69];
                }

                else if (dword_100643B70 <= 60 {
                       && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 60LL)))
                }
                {
                  LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _sendMessage:frameType:service:session:]",  60LL,  "### Send message no connection for device %@\n",  v15);
                }
              }

              __int128 v38 = obj;
              NSErrorUserInfoKey v41 = [obj countByEnumeratingWithState:&v72 objects:v78 count:16];
            }

            while (v41);
          }

          id v15 = 0LL;
          uint64_t v11 = v58;
          __int128 v34 = v57;
          id v23 = v39;
          __int128 v33 = v61;
          uint64_t v32 = v62;
        }

        else
        {
          int v50 = objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_bleConnections,  "objectForKeyedSubscript:",  v15));
          if (v50)
          {
            uint64_t v51 = (void *)v50;
            v66[0] = _NSConcreteStackBlock;
            v66[1] = 3221225472LL;
            v66[2] = sub_10016C8D0;
            v66[3] = &unk_1005CBE78;
            id v15 = v15;
            id v67 = v15;
            uint64_t v68 = v65;
            [v51 sendData:v23 completion:v66];
          }

          else
          {
            uint64_t v76 = -6708;
            if (dword_100643B70 <= 60
              && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 60LL)))
            {
              LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _sendMessage:frameType:service:session:]",  60LL,  "### Send message no connection\n");
            }
          }

          __int128 v33 = v61;
          uint64_t v32 = v62;
          __int128 v38 = 0LL;
        }

        id v22 = v59;
        goto LABEL_47;
      }

      uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_bleConnections,  "objectForKeyedSubscript:",  v15));
      if (v46)
      {
        __int16 v47 = v23;
        id v48 = v23;
        uint64_t v49 = -[NSMutableData mutableBytes](v48, "mutableBytes");
        uint64_t v76 = -[SDNearbyAgent _setupSendData:sessionIdentifier:cnx:clientSession:]( self,  "_setupSendData:sessionIdentifier:cnx:clientSession:",  v48,  v16,  v46,  v12);
      }

      else
      {
        __int16 v47 = v23;
        uint64_t v76 = -6708;
        if (dword_100643B70 <= 60
          && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 60LL)))
        {
          LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _sendMessage:frameType:service:session:]",  60LL,  "### Send message no connection\n");
        }
      }

      id v23 = v47;
    }

    __int128 v33 = v61;
    uint64_t v32 = v62;
LABEL_47:
    uint64_t v31 = v60;
    goto LABEL_48;
  }

  uint64_t v76 = -6708;
  if (dword_100643B70 > 60)
  {
    id v22 = 0LL;
    uint64_t v31 = 0LL;
    uint64_t v32 = v62;
    __int128 v33 = v26;
  }

  else
  {
    uint64_t v32 = v62;
    __int128 v33 = v26;
    if (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 60LL)) {
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _sendMessage:frameType:service:session:]",  60LL,  "### Send message no service UUID\n");
    }
    id v22 = 0LL;
    uint64_t v31 = 0LL;
  }

  uint64_t v11 = v24;
  __int128 v34 = 0LL;
LABEL_48:
  uint64_t v52 = (void *)v76;
  if (v76)
  {
    if (dword_100643B70 <= 60)
    {
      if (dword_100643B70 != -1
        || (v53 = v31, v54 = _LogCategory_Initialize(&dword_100643B70, 60LL), uint64_t v31 = v53, v52 = (void *)v76, v54))
      {
        uint64_t v56 = v52;
        uint64_t v52 = v31;
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _sendMessage:frameType:service:session:]",  60LL,  "### Send message failed: %#m\n",  v56);
        uint64_t v31 = v52;
        LODWORD(v52) = v76;
      }
    }
  }

  return (int)v52;
}

    v216 = v137;
    goto LABEL_73;
  }

  v140 = *(void *)(v50 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_bioArmKeyInitiator);
  v141 = *(void *)(v140 + OBJC_IVAR____TtC16DaemoniOSLibrary36SDAuthenticationBioArmUnarmedDevices_nearbyInfoScanner);
  if (!v141) {
    goto LABEL_72;
  }
  swift_beginAccess(v141 + 40, &v306, 33LL, 0LL);
  swift_retain(v140);
  swift_retain(v141);
  swift_bridgeObjectRetain(v137);
  sub_1003B572C((uint64_t *)&v301, v135, v137);
  swift_endAccess(&v306);
  v142 = v302;
LABEL_71:
  swift_release(v140);
  swift_bridgeObjectRelease(v137);
  swift_release(v141);
  v216 = v142;
LABEL_73:
  v139 = swift_bridgeObjectRelease(v216);
LABEL_74:
  v217 = v286;
  static Date.distantPast.getter(v138, v139);
  v218 = v284;
  v219 = v282;
  *v284 = v282;
  v220 = v285;
  v280(v218, v283, v285);
  v221 = v219;
  LOBYTE(v219) = _dispatchPreconditionTest(_:)(v218);
  v279(v218, v220);
  if ((v219 & 1) != 0)
  {
    v209 = *(void (**)(_BYTE *, void *))(v287 + 8);
    v210 = v217;
    v222 = v288;
    goto LABEL_76;
  }

      unsigned int v12 = 0;
      uint64_t v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 8));
    }
  }

  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        id v21 = a3 + 87;
        if (a3 > 10)
        {
          id v22 = a3 + 55;
        }

        else
        {
          id v21 = 97;
          id v22 = 65;
        }

        if (a3 <= 10) {
          id v23 = a3 + 48;
        }
        else {
          id v23 = 58;
        }
        if (result)
        {
          LOBYTE(v24) = 0;
          do
          {
            uint64_t v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                unsigned int v12 = 0;
                uint64_t v13 = 1;
                if (v25 < 0x61 || v25 >= v21) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                unsigned int v26 = -87;
              }

              else
              {
                unsigned int v26 = -55;
              }
            }

            else
            {
              unsigned int v26 = -48;
            }

            uint64_t v24 = (v24 * a3) + (v25 + v26);
            if (((v24 >> 8) & 1) != 0) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }

          while (a2);
          uint64_t v13 = 0;
          unsigned int v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }

        goto LABEL_71;
      }

      goto LABEL_72;
    }

    if (a2 >= 1)
    {
      id v4 = a2 - 1;
      if (a2 != 1)
      {
        int v5 = a3 + 87;
        if (a3 > 10)
        {
          id v6 = a3 + 55;
        }

        else
        {
          int v5 = 97;
          id v6 = 65;
        }

        if (a3 <= 10) {
          id v7 = a3 + 48;
        }
        else {
          id v7 = 58;
        }
        if (result)
        {
          LOBYTE(v_Block_object_dispose((const void *)(v1 - 96), 8) = 0;
          __int16 v9 = result + 1;
          while (1)
          {
            id v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned int v12 = 0;
                uint64_t v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                uint64_t v11 = -87;
              }

              else
              {
                uint64_t v11 = -55;
              }
            }

            else
            {
              uint64_t v11 = -48;
            }

            int v8 = (v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFFFF00) != 0) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }

id sub_100074D64(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _bleActionScanTimerFired];
}

id sub_10007506C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _bleInfoDeviceFound:a2];
}

id sub_100075078(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _bleInfoDeviceLost:a2];
}

id sub_100075084(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _bleInfoDeviceChanged:a2];
}

void sub_100075090(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (dword_100642038 <= 60
      && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 60LL)))
    {
      LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent _bleInfoDiscoveryEnsureStarted]_block_invoke_4",  60LL,  "### BLE info discovery activate failed: %@\n",  v3);
    }
  }

  else if (dword_100642038 <= 30 {
         && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 30LL)))
  }
  {
    LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent _bleInfoDiscoveryEnsureStarted]_block_invoke_4",  30LL,  "BLE info discovery activated\n");
  }

  [*(id *)(a1 + 32) _update];
}

LABEL_79:
              mappedDevices = self->_mappedDevices;
              if (!mappedDevices)
              {
                uint64_t v42 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
                __int16 v43 = self->_mappedDevices;
                self->_mappedDevices = v42;

                mappedDevices = self->_mappedDevices;
              }

              -[NSMutableDictionary setObject:forKeyedSubscript:]( mappedDevices,  "setObject:forKeyedSubscript:",  v17,  v5);
              goto LABEL_30;
            }

LABEL_59:
            if (!v32)
            {
              if (dword_100642038 <= 30
                && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 30LL)))
              {
                uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v9 effectiveIdentifier]);
                LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent _bleUpdateMappingWithDevice:]",  30LL,  "Mapped %@, CL",  v4,  v36);
              }

              -[NSMutableDictionary removeObjectForKey:](self->_bleUnmapped, "removeObjectForKey:", v5);
              id v17 = objc_alloc_init(&OBJC_CLASS___SFCombinedDevice);
              -[SFCombinedDevice setBleDevice:](v17, "setBleDevice:", v4);
              -[SFCombinedDevice setClinkDevice:](v17, "setClinkDevice:", v9);
              -[SFCombinedDevice setState:](v17, "setState:", 10LL);
              if (self->_bleActionScanTimedOut || self->_bleActionScanTimer)
              {
                if (dword_100642038 <= 30
                  && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 30LL)))
                {
                  LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent _bleUpdateMappingWithDevice:]",  30LL,  "Restarting BLE action scan timer\n");
                }

                -[SDProxHandoffAgent _bleActionScanTimerActivate](self, "_bleActionScanTimerActivate");
              }
            }

            goto LABEL_72;
          }

          -[SDProxHandoffAgent _bleDeviceNearbyExit:](self, "_bleDeviceNearbyExit:", v4);
        }

      id v3 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v2);
      goto LABEL_6;
    }
  }

  else
  {
    v98 = v1 + 120;
    if (*(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      goto LABEL_3;
    }
  }

  __int16 v9 = *(void **)(v1 + 288);
  swift_bridgeObjectRelease((const char *)v2);

  id v6 = 0LL;
  while (1)
  {
LABEL_13:
    uint64_t v11 = *(void *)(v1 + 312);
    unsigned int v12 = __OFADD__(v11, 1LL);
    uint64_t v13 = v11 + 1;
    if (v12)
    {
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }

    int v14 = *(void *)(v1 + 240);
    id v16 = *(void *)(v1 + 216);
    id v15 = *(void *)(v1 + 224);
    id v17 = *(void (**)(double *))(v1 + 136);
    id v2 = *(void *)(v1 + 144);
    int v101 = (double)v13 / (double)(*(void *)(v1 + 280) + 1LL);
    v17(&v101);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    id v18 = *(void *)(v1 + 296);
    id v19 = *(void *)(v1 + 304);
    *(void *)(v1 + 28_Block_object_dispose((const void *)(v1 - 96), 8) = v6;
    id v20 = *(void *)(v1 + 280);
    v100 = v6;
    if (v19 == v20)
    {
      id v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 224) + 56LL);
      v21(*(void *)(v1 + 208), 1LL, 1LL, *(void *)(v1 + 216));
      id v22 = *(void *)(v1 + 280);
LABEL_18:
      unsigned int v26 = *(void *)(v1 + 256);
      id v28 = *(void *)(v1 + 160);
      int v27 = *(void *)(v1 + 168);
      sub_100187100(*(void *)(v1 + 208), (uint64_t *)&unk_100645130);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v26, 1LL, 1LL, v28);
      goto LABEL_21;
    }

    if (v19 >= v20) {
      goto LABEL_57;
    }
    id v23 = *(void *)(v1 + 216);
    uint64_t v24 = *(void *)(v1 + 224);
    uint64_t v25 = *(void *)(v1 + 208);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v24 + 16))( v25,  *(void *)(v1 + 152)
    + ((*(unsigned __int8 *)(v24 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))
    + *(void *)(v24 + 72) * v19,
      v23);
    id v22 = v19 + 1;
    id v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);
    v21(v25, 0LL, 1LL, v23);
    __int16 v29 = *(void *)(v1 + 248);
    id v30 = *(void *)(v1 + 216);
    uint64_t v31 = *(void *)(v1 + 176);
    uint64_t v32 = *(void *)(v1 + 160);
    __int128 v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 224) + 32LL);
    v33(v29, *(void *)(v1 + 208), v30);
    id v2 = v31 + *(int *)(v32 + 48);
    v33(v2, v29, v30);
    if (__OFADD__(v18, 1LL)) {
      goto LABEL_58;
    }
    __int128 v34 = *(void **)(v1 + 256);
    __int128 v35 = *(void *)(v1 + 216);
    __int128 v37 = *(void *)(v1 + 160);
    uint64_t v36 = *(void *)(v1 + 168);
    __int128 v38 = (char *)v34 + *(int *)(v37 + 48);
    *__int128 v34 = v18;
    v33((uint64_t)v38, v2, v35);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v34, 0LL, 1LL, v37);
    ++v18;
LABEL_21:
    *(void *)(v1 + 296) = v18;
    *(void *)(v1 + 304) = v22;
    __int128 v39 = *(void *)(v1 + 264);
    __int128 v40 = *(void *)(v1 + 160);
    uint64_t v0 = *(uint64_t (***)(void, void, void))(v1 + 168);
    sub_1001870BC(*(void *)(v1 + 256), v39, &qword_1006494D0);
    NSErrorUserInfoKey v41 = v0[6](v39, 1LL, v40);
    uint64_t v42 = *(char **)(v1 + 264);
    if (v41 == 1)
    {
      v83 = *(void *)(v1 + 248);
      v82 = *(void *)(v1 + 256);
      uint64_t v85 = *(void *)(v1 + 232);
      v84 = *(void *)(v1 + 240);
      v87 = *(void *)(v1 + 200);
      uint64_t v86 = *(void *)(v1 + 208);
      id v88 = *(void *)(v1 + 192);
      v97 = *(void *)(v1 + 184);
      v99 = *(void *)(v1 + 176);
      uint64_t v89 = *(void **)(v1 + 128);
      swift_bridgeObjectRelease(*(const char **)(v1 + 152));
      *uint64_t v89 = v100;
      swift_task_dealloc(v42);
      swift_task_dealloc(v82);
      swift_task_dealloc(v83);
      swift_task_dealloc(v84);
      swift_task_dealloc(v85);
      swift_task_dealloc(v86);
      swift_task_dealloc(v87);
      swift_task_dealloc(v88);
      swift_task_dealloc(v97);
      swift_task_dealloc(v99);
      (*(void (**)(void))(v1 + 8))();
      return;
    }

    __int16 v43 = *(void *)(v1 + 240);
    uint64_t v44 = *(void *)(v1 + 216);
    uint64_t v45 = *(void *)(v1 + 224);
    uint64_t v46 = *(void *)(v1 + 160);
    *(void *)(v1 + 312) = *(void *)v42;
    __int16 v47 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v45 + 32))(v43, &v42[*(int *)(v46 + 48)], v44);
    URL.scheme.getter(v47);
    if (!v48) {
      goto LABEL_29;
    }
    uint64_t v49 = v48;
    int v50 = String.lowercased()();
    *(void *)&uint64_t v51 = swift_bridgeObjectRelease(v49).n128_u64[0];
    if (v50._countAndFlagsBits == 1886680168 && v50._object == (void *)0xE400000000000000LL)
    {
      swift_bridgeObjectRelease((const char *)0xE400000000000000LL, v51);
      goto LABEL_54;
    }

    if ((_stringCompareWithSmolCheck(_:_:expecting:)( v50._countAndFlagsBits,  v50._object,  1886680168LL,  0xE400000000000000LL,  0LL) & 1) != 0)
    {
      swift_bridgeObjectRelease((const char *)v50._object, v52);
      goto LABEL_54;
    }

    uint64_t v53 = _stringCompareWithSmolCheck(_:_:expecting:)( v50._countAndFlagsBits,  v50._object,  0x7370747468LL,  0xE500000000000000LL,  0LL);
    swift_bridgeObjectRelease((const char *)v50._object);
    if ((v53 & 1) != 0) {
      goto LABEL_54;
    }
LABEL_29:
    os_log_t v54 = (void *)objc_opt_self(&OBJC_CLASS___LSApplicationWorkspace);
    id v55 = [v54 defaultWorkspace];
    if (!v55) {
      goto LABEL_61;
    }
    char v57 = v55;
    URL._bridgeToObjectiveC()(v56);
    id v59 = v58;
    id v60 = [v57 URLOverrideForURL:v58];

    if (v60)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v60);

      id v61 = 0LL;
    }

    else
    {
      id v61 = 1LL;
    }

    uint64_t v63 = *(void *)(v1 + 192);
    uint64_t v62 = *(void *)(v1 + 200);
    v21(v63, v61, 1LL, *(void *)(v1 + 216));
    sub_1001870BC(v63, v62, (uint64_t *)&unk_100645130);
    id v64 = [v54 defaultWorkspace];
    if (!v64) {
      goto LABEL_62;
    }
    uint64_t v65 = v64;
    id v67 = *(void *)(v1 + 216);
    os_log_t v66 = *(void *)(v1 + 224);
    uint64_t v68 = *(void *)(v1 + 184);
    sub_10026D9AC(*(void *)(v1 + 200), v68);
    uint64_t v0 = (uint64_t (**)(void, void, void))v100;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v68, 1LL, v67) == 1)
    {
      uint64_t v70 = 0LL;
    }

    else
    {
      uint64_t v72 = *(void *)(v1 + 216);
      uint64_t v71 = *(void *)(v1 + 224);
      uint64_t v73 = *(void *)(v1 + 184);
      URL._bridgeToObjectiveC()(v69);
      uint64_t v70 = v74;
      (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v73, v72);
    }

    uint64_t v75 = [v65 applicationsAvailableForOpeningURL:v70];

    if (!v75) {
      goto LABEL_63;
    }
    uint64_t v76 = sub_100183168(0LL, &qword_100645410, &OBJC_CLASS___LSApplicationProxy_ptr);
    id v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v75, v76);

    if ((unint64_t)v2 >> 62)
    {
      if (v2 < 0) {
        v80 = v2;
      }
      else {
        v80 = v2 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain((const char *)v2);
      v81 = _CocoaArrayWrapper.endIndex.getter(v80);
      swift_bridgeObjectRelease((const char *)v2);
      if (!v81) {
        goto LABEL_12;
      }
LABEL_40:
      if ((v2 & 0xC000000000000001LL) != 0)
      {
        uint64_t v77 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v2);
      }

      else
      {
        if (!*(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
          goto LABEL_56;
        }
        uint64_t v77 = *(id *)(v2 + 32);
      }

      v78 = v77;
      uint64_t v79 = *(void *)(v1 + 200);
      id v6 =  objc_msgSend( v77,  "correspondingApplicationRecord",  swift_bridgeObjectRelease((const char *)v2).n128_f64[0]);

      sub_100187100(v79, (uint64_t *)&unk_100645130);
    }

    else
    {
      if (*(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
        goto LABEL_40;
      }
LABEL_12:
      id v10 = *(void *)(v1 + 200);
      swift_bridgeObjectRelease((const char *)v2);
      sub_100187100(v10, (uint64_t *)&unk_100645130);

      id v6 = 0LL;
    }
  }

  swift_bridgeObjectRelease((const char *)0xE500000000000000LL, v52);
LABEL_54:
  id v90 = v1 + 16;
  id v91 = (void *)objc_opt_self(&OBJC_CLASS___LSAppLink);
  URL._bridgeToObjectiveC()(v92);
  id v94 = v93;
  *(void *)(v1 + 32sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = v93;
  *(void *)(v1 + 56) = v98;
  *(void *)(v1 + 16) = v1;
  *(void *)(v1 + 24) = sub_10026F084;
  uint64_t v95 = swift_continuation_init(v1 + 16, 1LL);
  *(void *)(v1 + 8sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = _NSConcreteStackBlock;
  uint64_t v96 = (void *)(v1 + 80);
  v96[1] = 0x40000000LL;
  v96[2] = sub_100270204;
  v96[3] = &unk_1005D6CE0;
  v96[4] = v95;
  [v91 getAppLinksWithURL:v94 completionHandler:v96];
  swift_continuation_await(v90);
}

          __break(1u);
          goto LABEL_60;
        }

  __break(1u);
  return result;
}

id sub_100076454(uint64_t a1)
{
  return [*(id *)(a1 + 32) _clinkEnsureStopped];
}

void sub_10007645C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (dword_100642038 <= 10 && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 10LL))) {
    LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent _clinkEnsureStarted]_block_invoke_2",  10LL,  "Clink device changed %#{flags} %@\n",  a3,  &unk_1004CADFD,  v5);
  }
  [*(id *)(a1 + 32) _bleUpdateMappingAndNearby];
}

void sub_1000764FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (dword_100642038 <= 10 && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 10LL))) {
    LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent _clinkEnsureStarted]_block_invoke_3",  10LL,  "Clink device found %@\n",  v3);
  }
  [*(id *)(a1 + 32) _bleUpdateMappingAndNearby];
}

void sub_10007658C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (dword_100642038 <= 10 && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 10LL))) {
    LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent _clinkEnsureStarted]_block_invoke_4",  10LL,  "Clink device lost %@\n",  v3);
  }
  [*(id *)(a1 + 32) _bleUpdateMappingAndNearby];
}

void sub_10007661C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (dword_100642038 <= 60
      && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 60LL)))
    {
      LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent _clinkEnsureStarted]_block_invoke_5",  60LL,  "### CLink activate failed: %@\n",  v3);
    }
  }

  else if (dword_100642038 <= 30 {
         && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 30LL)))
  }
  {
    LogPrintF(&dword_100642038, "-[SDProxHandoffAgent _clinkEnsureStarted]_block_invoke_5", 30LL, "CLink activated\n");
  }

  [*(id *)(a1 + 32) _update];
}

id sub_1000766F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[*(id *)(a1 + 32) _clinkHandleRequest:a2 options:a3 responseHandler:a4];
}

uint64_t sub_100076DF8(uint64_t a1)
{
  uint64_t result = (uint64_t)[*(id *)(*(void *)(a1 + 32) + 136) containsObject:*(void *)(a1 + 40)];
  if ((result & 1) != 0)
  {
    if (dword_100642038 <= 30
      && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 30LL)))
    {
      unsigned int v3 = [*(id *)(a1 + 40) shouldAdvertise];
      id v4 = "no";
      if (v3) {
        id v5 = "yes";
      }
      else {
        id v5 = "no";
      }
      if (*(_BYTE *)(*(void *)(a1 + 32) + 89LL)) {
        id v4 = "yes";
      }
      LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent proximityClientUpdate:]_block_invoke",  30LL,  "Proximity client update: %s, cur=%s\n",  v5,  v4);
    }

    return (uint64_t)[*(id *)(a1 + 32) _commonShouldAdvertiseChanged];
  }

  else if (dword_100642038 <= 90)
  {
    if (dword_100642038 != -1) {
      return LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent proximityClientUpdate:]_block_invoke",  90LL,  "### Unrecognized client: %@\n",  *(void *)(a1 + 40));
    }
    uint64_t result = _LogCategory_Initialize(&dword_100642038, 90LL);
    if ((_DWORD)result) {
      return LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent proximityClientUpdate:]_block_invoke",  90LL,  "### Unrecognized client: %@\n",  *(void *)(a1 + 40));
    }
  }

  return result;
}

id sub_100077428(uint64_t a1)
{
  return [*(id *)(a1 + 32) _run];
}

uint64_t sub_100078E78(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = 0LL;
  return result;
}

void sub_100078E88(uint64_t a1)
{
}

void sub_100078E90(uint64_t a1)
{
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v2 = *(id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  id v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v12;
    do
    {
      for (unint64_t i = 0LL; i != v4; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v11 + 1) + 8 * (void)i) clinkDevice]);
        int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 mediaRouteIdentifier]);

        if (v8)
        {
          if (dword_100642038 <= 30
            && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 30LL)))
          {
            LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent _proximityClientSeedInitialDevices:]_block_invoke",  30LL,  "Nearby enter seed value (MediaRemote ID): %@\n",  v8);
          }

          __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceEnteredNearbyHandler]);

          if (v9)
          {
            id v10 = (void (**)(void, void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceEnteredNearbyHandler]);
            ((void (**)(void, void *))v10)[2](v10, v8);
          }
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v4);
  }
}

void sub_1000790C0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceWillTriggerHandler]);
  if (v2)
  {
    id v3 = *(void **)(*(void *)(a1 + 40) + 112LL);
    v5[1] = 3221225472LL;
    _DWORD v5[2] = sub_10007913C;
    v5[3] = &unk_1005CC808;
    v5[4] = v2;
    id v4 = v2;
    v5[0] = _NSConcreteStackBlock;
    [v3 enumerateKeysAndObjectsUsingBlock:v5];
    id v2 = v4;
  }
}

void sub_10007913C(uint64_t a1, uint64_t a2, void *a3)
{
  id v8 = a3;
  BOOL v4 = [v8 state] == 12;
  uint64_t v5 = v8;
  if (v4)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v8 clinkDevice]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 mediaRouteIdentifier]);

    if (v7)
    {
      if (dword_100642038 < 31
        && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 30LL)))
      {
        LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent _proximityClientSeedWillTriggerDeviceIfNeeded:]_block_invoke_2",  30LL,  "Triggered device seed value (MediaRemote ID): %@\n",  v7);
      }

      (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
    }

    uint64_t v5 = v8;
  }
}

void sub_1000792F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (dword_100642038 <= 60
      && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 60LL)))
    {
      LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent _serviceEnsureStarted]_block_invoke",  60LL,  "### BLE action service activate error: %@\n",  v3);
    }
  }

  else if (dword_100642038 <= 30 {
         && (dword_100642038 != -1 || _LogCategory_Initialize(&dword_100642038, 30LL)))
  }
  {
    LogPrintF( &dword_100642038,  "-[SDProxHandoffAgent _serviceEnsureStarted]_block_invoke",  30LL,  "BLE action service started\n");
  }

  [*(id *)(a1 + 32) _update];
}

id sub_1000795B8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _serviceTimeoutFired];
}

id sub_10007A274(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 128) handleNotificationWasDismissed:*(void *)(a1 + 40) reason:*(void *)(a1 + 48)];
  if ((*(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL) == 2) {
    return [*(id *)(a1 + 32) _throttleEventDidOccur];
  }
  return result;
}

id sub_10007A33C(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 128) handleNotificationWasTapped:*(void *)(a1 + 40)];
}

void sub_10007AAE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41)
{
}

void sub_10007AB58(uint64_t a1, uint64_t a2, void *a3)
{
  id v9 = a3;
  unsigned __int8 v5 = [*(id *)(a1 + 32) _combinedDeviceIsSuppressed:v9];
  id v6 = v9;
  if ((v5 & 1) == 0)
  {
    unsigned int v7 = [v9 state];
    id v6 = v9;
    switch(v7)
    {
      case 0xBu:
        uint64_t v8 = *(void *)(a1 + 40);
        goto LABEL_12;
      case 0xCu:
        uint64_t v8 = *(void *)(a1 + 48);
        goto LABEL_12;
      case 0xDu:
        uint64_t v8 = *(void *)(a1 + 56);
        goto LABEL_12;
      case 0xEu:
      case 0xFu:
        uint64_t v8 = *(void *)(a1 + 104);
        goto LABEL_12;
      case 0x10u:
        uint64_t v8 = *(void *)(a1 + 72);
        goto LABEL_12;
      case 0x11u:
        uint64_t v8 = *(void *)(a1 + 88);
        goto LABEL_12;
      case 0x12u:
        uint64_t v8 = *(void *)(a1 + 64);
        goto LABEL_12;
      case 0x13u:
        uint64_t v8 = *(void *)(a1 + 80);
        goto LABEL_12;
      case 0x14u:
        uint64_t v8 = *(void *)(a1 + 96);
LABEL_12:
        objc_storeStrong((id *)(*(void *)(v8 + 8) + 40LL), a3);
        id v6 = v9;
        break;
      default:
        break;
    }
  }
}

void sub_10007ACFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10007AD14(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v14 = a3;
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v14 effectiveID]);
  uint64_t v8 = v7;
  if (v7)
  {
    id v9 = *(void **)(a1 + 32);
    id v10 = v7;
    id v11 = v9;
    if (v10 == v11)
    {
    }

    else
    {
      __int128 v12 = v11;
      if (!v11)
      {

        goto LABEL_9;
      }

      unsigned int v13 = [v10 isEqual:v11];

      if (!v13) {
        goto LABEL_9;
      }
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
    *a4 = 1;
  }

void sub_10007AF74(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  [v4 setAttachmentURL:0];
  [v4 setState:10];
  [v4 setNextState:0];
  [v4 setNotificationInfo:0];
  [*(id *)(a1 + 32) _uiStopIfNeeded:v4 reason:0];
}

void sub_10007B794(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) objectForKeyedSubscript:*(void *)(a1 + 40)]);
  [*(id *)(a1 + 32) _bleActionDeviceChanged:v2];
}

Class sub_10007B988()
{
  if (qword_100656EC0 != -1) {
    dispatch_once(&qword_100656EC0, &stru_1005CC8A0);
  }
  Class result = objc_getClass("SBSStereoLeaderInterface");
  qword_100656EB8 = (uint64_t)result;
  off_1006420A8 = (uint64_t (*)())sub_10007B9E4;
  return result;
}

id sub_10007B9E4()
{
  return (id)qword_100656EB8;
}

void sub_10007B9F0(id a1)
{
  qword_100656EC8 = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/SoundBoardServices.framework/SoundBoardServices",  2);
}

void sub_10007BA58(id a1)
{
  uint64_t v1 = objc_opt_new(&OBJC_CLASS___SDRapportBrowser);
  id v2 = (void *)qword_100656ED8;
  qword_100656ED8 = (uint64_t)v1;
}

void sub_10007BF20(_Unwind_Exception *a1)
{
}

void sub_10007BF60(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned __int8 v5 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v6 = airdrop_log(WeakRetained);
    unsigned int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138412290;
      id v10 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Rapport found person %@",  (uint8_t *)&v9,  0xCu);
    }

    [v5 addOrUpdateNodesForPerson:v3 withChanges:0];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v8 postNotificationName:@"com.apple.sharingd.RapportChanged" object:0 userInfo:0];
  }
}

void sub_10007C064(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v7 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v8 = airdrop_log(WeakRetained);
    int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      sub_10007D978((uint64_t)v5, a3, v9);
    }

    [v7 addOrUpdateNodesForPerson:v5 withChanges:a3];
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v10 postNotificationName:@"com.apple.sharingd.RapportChanged" object:0 userInfo:0];
  }
}

void sub_10007C118(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v6 = airdrop_log(WeakRetained);
    unsigned int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138412290;
      id v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Rapport lost person %@", (uint8_t *)&v9, 0xCu);
    }

    [v5 removeNodesForPerson:v3];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v8 postNotificationName:@"com.apple.sharingd.RapportChanged" object:0 userInfo:0];
  }
}

void sub_10007C218(id a1)
{
  uint64_t v1 = airdrop_log(a1);
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Rapport people discovery interrupted", v3, 2u);
  }
}

void sub_10007C27C(id a1)
{
  uint64_t v1 = airdrop_log(a1);
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Rapport people discovery invalidated", v3, 2u);
  }
}

void sub_10007C2E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = airdrop_log(v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  uint64_t v6 = (void (**)(void))v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10007DA38();
    }
    goto LABEL_8;
  }

  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) discoveredPeople]);
    v9[0] = 67109120;
    v9[1] = [v7 count];
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v6,  OS_LOG_TYPE_DEFAULT,  "Rapport people discovery activated. Already discovered people %d",  (uint8_t *)v9,  8u);
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) statusChangedHandler]);
  if (v8)
  {
    uint64_t v6 = (void (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) statusChangedHandler]);
    v6[2]();
LABEL_8:
  }
}

void sub_10007C8F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) objectForKeyedSubscript:v4]);

  id v7 = objc_msgSend((id)objc_opt_class(*(void *)(a1 + 32), v6), "deviceIsEligibleForAirDrop:", v3);
  if ((_DWORD)v7)
  {
    if (v5)
    {
      if ((*(_BYTE *)(a1 + 40) & 8) != 0) {
        objc_msgSend((id)objc_opt_class(*(void *)(a1 + 32), v8), "updateRangingMeasurementForDevice:inNode:", v3, v5);
      }
    }

    else
    {
      id v11 = [*(id *)(a1 + 32) createSFNodeFromMyRPDevice:v3];
      uint64_t v12 = airdrop_log(v11);
      unsigned int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      id v14 = v13;
      if (v11)
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          int v15 = 138412546;
          id v16 = v11;
          __int16 v17 = 2112;
          id v18 = v3;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "SDRapportBrowser: Adding SFNode %@ for %@",  (uint8_t *)&v15,  0x16u);
        }

        [*(id *)(*(void *)(a1 + 32) + 16) setObject:v11 forKeyedSubscript:v4];
      }

      else
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          sub_10007DB64();
        }
      }
    }
  }

  else if (v5)
  {
    uint64_t v9 = airdrop_log(v7);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 138412546;
      id v16 = v5;
      __int16 v17 = 2112;
      id v18 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "SDRapportBrowser: Removing SFNode %@ for %@",  (uint8_t *)&v15,  0x16u);
    }

    [*(id *)(*(void *)(a1 + 32) + 16) setObject:0 forKeyedSubscript:v4];
  }
}

void sub_10007D978(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  uint64_t v5 = NSPrintF("%#{flags}", a2, &unk_1004CAE50);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  *(_DWORD *)buf = 138412546;
  uint64_t v8 = a1;
  __int16 v9 = 2112;
  id v10 = v6;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Rapport person %@ changed %@", buf, 0x16u);
}

void sub_10007DA38()
{
}

void sub_10007DA98()
{
}

void sub_10007DB04()
{
}

void sub_10007DB64()
{
}

void sub_10007DBC4()
{
}

void sub_10007DC24(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "SDRapportBrowser: meCard is nil", v1, 2u);
}

uint64_t SDAutoUnlockAuthPromptImageDataReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      char v18 = 0;
      unsigned int v19 = 0;
      uint64_t v20 = 0LL;
      *(_BYTE *)(a1 + 24) |= 2u;
      while (1)
      {
        unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v21 == -1LL || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v22 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
        v20 |= (unint64_t)(v22 & 0x7F) << v18;
        if ((v22 & 0x80) == 0) {
          goto LABEL_42;
        }
        v18 += 7;
        BOOL v9 = v19++ >= 9;
        if (v9)
        {
          uint64_t v20 = 0LL;
          goto LABEL_44;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v20 = 0LL;
      }
LABEL_44:
      *(_BYTE *)(a1 + 2sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = v20 != 0;
    }

    else if ((_DWORD)v12 == 2)
    {
      uint64_t Data = PBReaderReadData(a2);
      uint64_t v24 = objc_claimAutoreleasedReturnValue(Data);
      uint64_t v25 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose(va, 8) = v24;
    }

    else if ((_DWORD)v12 == 1)
    {
      char v13 = 0;
      unsigned int v14 = 0;
      uint64_t v15 = 0LL;
      *(_BYTE *)(a1 + 24) |= 1u;
      while (1)
      {
        unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v16 == -1LL || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v17 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          goto LABEL_38;
        }
        v13 += 7;
        BOOL v9 = v14++ >= 9;
        if (v9)
        {
          LODWORD(v15) = 0;
          goto LABEL_40;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v15) = 0;
      }
LABEL_40:
      *(_DWORD *)(a1 + 16) = v15;
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_10007E8F4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 postNotificationName:@"com.apple.sharingd.AirDropUnpublished" object:*(void *)(a1 + 32) userInfo:0];

  return [*(id *)(a1 + 32) updateServerState];
}

id sub_10008001C(uint64_t a1)
{
  return [*(id *)(a1 + 32) start];
}

id sub_10008073C(void *a1, uint64_t a2)
{
  return _[a1 didReceiveError:a2];
}

id sub_100080744(void *a1, uint64_t a2)
{
  return _[a1 didOpenConnection:a2];
}

id sub_10008074C(void *a1, uint64_t a2)
{
  return _[a1 didCloseConnection:a2];
}

id *sub_10008096C(id *result, uint64_t a2, int a3)
{
  if (a3) {
    return (id *)_[result[4] foundDevice:a2];
  }
  return result;
}

id sub_100080C60(uint64_t a1)
{
  return [*(id *)(a1 + 32) startHTTPServer:8770];
}

id sub_100080DD4(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateServerState];
}

id sub_100080DDC(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateServerState];
}

id sub_100080FA4(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateServerState];
}

void sub_100081514( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100081578(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "BTLE discovered duplicate hashes %@ rssi %@",  (uint8_t *)&v3,  0x16u);
  sub_10001480C();
}

void sub_1000815F8( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10008165C()
{
}

void sub_100081688()
{
}

void sub_1000816B4()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "SDAirDropServer: _CFHTTPServerCreateService returned NULL",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_1000816E0()
{
}

uint64_t SDAutoUnlockSessionConfirmationACKReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      char v17 = 0;
      unsigned int v18 = 0;
      uint64_t v19 = 0LL;
      *(_BYTE *)(a1 + 16) |= 2u;
      while (1)
      {
        unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v20 == -1LL || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
        v19 |= (unint64_t)(v21 & 0x7F) << v17;
        if ((v21 & 0x80) == 0) {
          goto LABEL_40;
        }
        v17 += 7;
        BOOL v9 = v18++ >= 9;
        if (v9)
        {
          uint64_t v19 = 0LL;
          goto LABEL_42;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_40:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v19 = 0LL;
      }
LABEL_42:
      *(_BYTE *)(a1 + 12) = v19 != 0;
    }

    else if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0LL;
      *(_BYTE *)(a1 + 16) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_36;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_38;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_36:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_38:
      *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = v14;
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000824EC(uint64_t a1, uint64_t a2, os_log_t log)
{
  else {
    uint64_t v3 = *(&off_1005CCB88 + a1 - 1);
  }
  int v4 = 138412802;
  unsigned int v5 = v3;
  __int16 v6 = 1024;
  int v7 = a1;
  __int16 v8 = 2112;
  uint64_t v9 = a2;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "SDAirDropListener UNHANDLED EVENT %@ [%d] %@",  (uint8_t *)&v4,  0x1Cu);
}

void sub_1000826A4(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412546;
  uint64_t v3 = a1;
  __int16 v4 = 2112;
  unsigned int v5 = @"en0";
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "IP Address = %@, Interface = %@",  (uint8_t *)&v2,  0x16u);
}

void sub_10008327C(void *a1, uint64_t a2, os_log_s *a3)
{
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([a1 transfer]);
  int v6 = 138412546;
  int v7 = v5;
  __int16 v8 = 2112;
  uint64_t v9 = a2;
  _os_log_error_impl( (void *)&_mh_execute_header,  a3,  OS_LOG_TYPE_ERROR,  "Create destination for %@ failed %@",  (uint8_t *)&v6,  0x16u);
}

uint64_t SDUnlockStashKeyExchangeRequestReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      uint64_t Data = PBReaderReadData(a2);
      uint64_t v19 = objc_claimAutoreleasedReturnValue(Data);
      unint64_t v20 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose(va, 8) = v19;
    }

    else
    {
      if ((_DWORD)v12 == 2)
      {
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v15 = 0LL;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1LL || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v24 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
          v15 |= (unint64_t)(v24 & 0x7F) << v21;
          if ((v24 & 0x80) == 0) {
            goto LABEL_42;
          }
          v21 += 7;
          BOOL v9 = v22++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_44;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_44:
        uint64_t v26 = 16LL;
      }

      else
      {
        if ((_DWORD)v12 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result) {
            return result;
          }
          continue;
        }

        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0LL;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1LL || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v17 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0) {
            goto LABEL_38;
          }
          v13 += 7;
          BOOL v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_40;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_40:
        uint64_t v26 = 20LL;
      }

      *(_DWORD *)(a1 + v26) = v15;
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100084004( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10008402C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained transfer]);
  int v2 = (void *)objc_claimAutoreleasedReturnValue([v1 completedURLs]);
  id v3 = [WeakRetained openURLs:v2];

  char v4 = (void (**)(void, void, void, void))objc_claimAutoreleasedReturnValue([WeakRetained completionHandler]);
  ((void (**)(void, id, void, uint64_t))v4)[2](v4, v3, 0LL, 1LL);
}

uint64_t SDAuthenticationPairingResponseReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 52) |= 4u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_53;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_55;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_53:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_55:
        uint64_t v37 = 44LL;
        goto LABEL_64;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 52) |= 2u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1LL || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_59;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_59:
        uint64_t v37 = 40LL;
        goto LABEL_64;
      case 3u:
        uint64_t String = PBReaderReadString(a2);
        uint64_t v23 = objc_claimAutoreleasedReturnValue(String);
        uint64_t v24 = 24LL;
        goto LABEL_37;
      case 4u:
        uint64_t Data = PBReaderReadData(a2);
        uint64_t v23 = objc_claimAutoreleasedReturnValue(Data);
        uint64_t v24 = 16LL;
        goto LABEL_37;
      case 5u:
        uint64_t v26 = PBReaderReadData(a2);
        uint64_t v23 = objc_claimAutoreleasedReturnValue(v26);
        uint64_t v24 = 32LL;
LABEL_37:
        int v27 = *(void **)(a1 + v24);
        *(void *)(a1 + v24) = v23;

        continue;
      case 6u:
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 52) |= 1u;
        while (2)
        {
          unint64_t v30 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v30 == -1LL || v30 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v31 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 1;
            v14 |= (unint64_t)(v31 & 0x7F) << v28;
            if (v31 < 0)
            {
              v28 += 7;
              BOOL v9 = v29++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_63;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_63:
        uint64_t v37 = 8LL;
LABEL_64:
        *(_DWORD *)(a1 + v37) = v14;
        continue;
      case 7u:
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v34 = 0LL;
        *(_BYTE *)(a1 + 52) |= 8u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      unint64_t v35 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v35 == -1LL || v35 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v36 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35 + 1;
      v34 |= (unint64_t)(v36 & 0x7F) << v32;
      if ((v36 & 0x80) == 0) {
        goto LABEL_66;
      }
      v32 += 7;
      BOOL v9 = v33++ >= 9;
      if (v9)
      {
        uint64_t v34 = 0LL;
        goto LABEL_68;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_66:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v34 = 0LL;
    }
LABEL_68:
    *(_BYTE *)(a1 + 4_Block_object_dispose(va, 8) = v34 != 0;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1000852AC(void *a1)
{
  id v1 = a1;
  memset(v7, 0, 14);
  if ([v1 length])
  {
    id v2 = [v1 length];
    else {
      uint64_t v3 = (uint64_t)v2;
    }
    [v1 getBytes:v7 length:v3];
  }

  else
  {
    uint64_t v4 = handoff_log();
    unsigned int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_100085A08(v1, v5);
    }
  }

  return v7[0];
}

uint64_t sub_100085348(unsigned int a1)
{
  return (unsigned __int16)(a1 >> 8);
}

id sub_100085350(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  LODWORD(v5) = a2;
  WORD2(v5) = WORD2(a2);
  uint64_t v2 = 5LL;
  while (!*((_BYTE *)&v4 + v2))
  {
    if (++v2 == 14) {
      return 0LL;
    }
  }

  return (id)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  (char *)&v4 + 5,  9LL,  v4,  v5));
}

NSMutableDictionary *sub_1000853B4(unint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a1 & 1));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  v6,  SFActivityAdvertiserOptionVersionKey);

  unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", (a1 >> 1) & 3));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  v7,  SFActivityAdvertiserOptionMinorVersionKey);

  char v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", (a1 >> 3) & 1));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  v8,  SFActivityAdvertiserOptionFlagCopyPasteKey);

  if ((a1 & 0x100000000LL) != 0)
  {
    id v9 = off_100642230();
    int v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, v10);
  }

  if (a3)
  {
    id v11 = off_100642238();
    char v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, v12);
  }

  return v5;
}

id sub_1000854EC(void *a1)
{
  id v1 = a1;
  if (v1) {
    uint64_t v2 = (void *)objc_opt_new(&OBJC_CLASS___SFPeerDevice);
  }
  else {
    uint64_t v2 = 0LL;
  }
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v1 uniqueIDOverride]);
  [v2 setUniqueID:v3];

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v1 modelIdentifier]);
  [v2 setModelIdentifier:v4];

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v1 productName]);
  [v2 setProductName:v5];

  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v1 productVersion]);
  [v2 setProductVersion:v6];

  unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v1 productBuildVersion]);
  [v2 setProductBuildVersion:v7];

  char v8 = (void *)objc_claimAutoreleasedReturnValue([v1 name]);
  [v2 setName:v8];

  id v9 = (void *)objc_claimAutoreleasedReturnValue([v1 enclosureColor]);
  [v2 setEnclosureColor:v9];

  objc_msgSend(v2, "setDefaultPairedDevice:", objc_msgSend(v1, "isDefaultPairedDevice"));
  return v2;
}

void sub_10008562C(int a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (a1)
  {
    v14[0] = @"type";
    unint64_t v6 = a3;
    unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 0LL));
    v15[0] = v7;
    v14[1] = @"success";
    char v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));
    v15[1] = v8;
    v14[2] = @"timeSinceLastRequest";
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](&OBJC_CLASS___NSNumber, "numberWithLong:", 0LL));
    v15[2] = v9;
    v14[3] = @"errorCode";
    uint64_t v10 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](&OBJC_CLASS___NSNumber, "numberWithLong:", a4));
    id v11 = (void *)v10;
    v14[4] = @"errorDomain";
    char v12 = &stru_1005E3958;
    if (v6) {
      char v12 = v6;
    }
    v15[3] = v10;
    v15[4] = v12;
    unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v15,  v14,  5LL));

    SFMetricsLog(@"com.apple.sharing.continuity.activity.encryption.keyrequest", v13);
  }

void sub_100085798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v12[0] = @"oldKeyPresent";
  unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a1));
  v13[0] = v7;
  v12[1] = @"oldKeyCounter";
  char v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](&OBJC_CLASS___NSNumber, "numberWithLong:", a2));
  v13[1] = v8;
  void v12[2] = @"newKeyCounter";
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](&OBJC_CLASS___NSNumber, "numberWithLong:", a3));
  _DWORD v13[2] = v9;
  v12[3] = @"timeBetweenKeyCreations";
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](&OBJC_CLASS___NSNumber, "numberWithLong:", a4));
  v13[3] = v10;
  id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v13,  v12,  4LL));

  SFMetricsLog(@"com.apple.sharing.continuity.activity.encryption.replacementkey", v11);
}

id sub_1000858D8()
{
  if (qword_100656EF0 != -1) {
    dispatch_once(&qword_100656EF0, &stru_1005CCC10);
  }
  os_log_t v0 = (id *)dlsym((void *)qword_100656EF8, "UAUserActivityIsForPairedDeviceOptionKey");
  if (v0) {
    objc_storeStrong((id *)&qword_100656EE0, *v0);
  }
  off_100642230 = (uint64_t (*)())sub_100085950;
  return (id)qword_100656EE0;
}

id sub_100085950()
{
  return (id)qword_100656EE0;
}

void sub_10008595C(id a1)
{
  qword_100656EF8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserActivity.framework/UserActivity", 2);
}

id sub_100085984()
{
  if (qword_100656EF0 != -1) {
    dispatch_once(&qword_100656EF0, &stru_1005CCC10);
  }
  os_log_t v0 = (id *)dlsym((void *)qword_100656EF8, "UAUserActivityIsHighPriorityOptionKey");
  if (v0) {
    objc_storeStrong((id *)&qword_100656EE8, *v0);
  }
  off_100642238 = (uint64_t (*)())sub_1000859FC;
  return (id)qword_100656EE8;
}

id sub_1000859FC()
{
  return (id)qword_100656EE8;
}

void sub_100085A08(void *a1, os_log_s *a2)
{
  int v3 = 134218240;
  id v4 = [a1 length];
  __int16 v5 = 2048;
  uint64_t v6 = 14LL;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "Ignoring advertisment data as it is of incorrect size %lu, expected %zu",  (uint8_t *)&v3,  0x16u);
}

void sub_100085B04(id a1)
{
  id v1 = (void *)qword_100656F00;
  qword_100656F00 = (uint64_t)&off_1005FADC0;
}

void sub_1000864D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100086504(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained notifyDelegate];
}

void sub_100086870(_Unwind_Exception *a1)
{
}

void sub_100086894(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained notifyDelegate];
}

void sub_100087B44(void *a1, os_log_s *a2)
{
  int v3 = (void *)objc_claimAutoreleasedReturnValue([a1 bundleID]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCConnection currentConnection](&OBJC_CLASS___NSXPCConnection, "currentConnection"));
  int v5 = 138412802;
  uint64_t v6 = v3;
  __int16 v7 = 1024;
  unsigned int v8 = [v4 processIdentifier];
  __int16 v9 = 2112;
  uint64_t v10 = @"com.apple.private.sharing.unlock-manager";
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "Client (%@-%d) does not have unlock manager entitlement = %@",  (uint8_t *)&v5,  0x1Cu);
}

CFStringRef sub_1000880F8(uint64_t a1)
{
  else {
    return *(&off_1005CCD18 + a1 - 1);
  }
}

void sub_10008838C(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

void sub_1000883AC()
{
  v1[0] = 136315394;
  sub_100088398();
  _os_log_debug_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_DEBUG,  "%s transferIdentifier: %@",  (uint8_t *)v1,  0x16u);
}

void sub_100088428(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "SDAirDropListener didReceiveError %@",  (uint8_t *)&v2,  0xCu);
}

void sub_10008849C(uint64_t a1, void *a2, os_log_s *a3)
{
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKeyedSubscript:kSFOperationBytesCopiedKey]);
  [v6 doubleValue];
  double v8 = v7;
  __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKeyedSubscript:kSFOperationTotalBytesKey]);
  [v9 doubleValue];
  int v12 = 138412802;
  unsigned int v13 = @"Progress";
  __int16 v14 = 2112;
  uint64_t v15 = a1;
  __int16 v16 = 2048;
  double v17 = v8 / v10;
  sub_10008838C( (void *)&_mh_execute_header,  a3,  v11,  "SDNetworkOperationCallBack (event = %@, recordID = %@, progress = %f)",  (uint8_t *)&v12);
}

void sub_1000885A0(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  int v5 = a1;
  int v6 = 138412802;
  double v7 = sub_1000880F8(a1);
  __int16 v8 = 1024;
  int v9 = v5;
  __int16 v10 = 2112;
  uint64_t v11 = a2;
  _os_log_error_impl( (void *)&_mh_execute_header,  a3,  OS_LOG_TYPE_ERROR,  "SDNetworkOperationDelegate UNHANDLED EVENT %@ [%d] %@",  (uint8_t *)&v6,  0x1Cu);
}

void sub_100088650()
{
  v3[0] = 138412802;
  sub_100088398();
  __int16 v4 = v0;
  uint64_t v5 = v1;
  sub_10008838C( (void *)&_mh_execute_header,  v2,  (uint64_t)v2,  "SDNetworkOperationCallBack (event = %@, recordID = %@ , SInt32 error = %@)",  (uint8_t *)v3);
}

uint64_t SDAutoUnlockDeviceRegistrationStepReadFrom(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0LL;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        BOOL v9 = v5++ >= 9;
        if (v9)
        {
          unint64_t v6 = 0LL;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0LL;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      unint64_t v12 = v6 >> 3;
      if ((_DWORD)v12 != 2)
      {
        if ((_DWORD)v12 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result) {
            return result;
          }
          goto LABEL_46;
        }

        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0LL;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (1)
        {
          unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1LL || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v17 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0) {
            goto LABEL_38;
          }
          v13 += 7;
          BOOL v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_40;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_40:
        uint64_t v26 = 24LL;
        goto LABEL_45;
      }

      uint64_t Data = PBReaderReadData(a2);
      uint64_t v23 = objc_claimAutoreleasedReturnValue(Data);
      uint64_t v24 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v23;

LABEL_46:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }

    char v18 = 0;
    unsigned int v19 = 0;
    uint64_t v15 = 0LL;
    *(_BYTE *)(a1 + 28) |= 1u;
    while (1)
    {
      unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v20 == -1LL || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
      v15 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0) {
        goto LABEL_42;
      }
      v18 += 7;
      BOOL v9 = v19++ >= 9;
      if (v9)
      {
        LODWORD(v15) = 0;
        goto LABEL_44;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v15) = 0;
    }
LABEL_44:
    uint64_t v26 = 8LL;
LABEL_45:
    *(_DWORD *)(a1 + v26) = v15;
    goto LABEL_46;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SDUnlockDisableReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      uint64_t String = PBReaderReadString(a2);
      uint64_t v18 = objc_claimAutoreleasedReturnValue(String);
      unsigned int v19 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose(va, 8) = v18;
    }

    else if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0LL;
      *(_BYTE *)(a1 + 20) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_30;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_32;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_30:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_32:
      *(_DWORD *)(a1 + 16) = v14;
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100089768(uint64_t a1, uint64_t a2)
{
  return SFLocalizedStringForKey(@"UNLOCK_EXPIRED_TEXT", a2);
}

void sub_100089774( void *a1, void *a2, uint64_t a3, uint64_t a4, unsigned int a5, void *a6, unsigned int a7, unsigned int a8, double a9, double a10, void *a11, unsigned __int8 a12, unsigned int a13, unsigned __int8 a14, unsigned int a15, unsigned __int8 a16, unsigned __int8 a17, unsigned int a18, unsigned int a19, unsigned int a20, unsigned int a21, void *a22, void *a23, unsigned __int8 a24, unsigned __int8 a25)
{
  char v31 = a1;
  char v32 = a2;
  unsigned int v33 = a6;
  uint64_t v75 = a22;
  id v74 = a23;
  if (a11)
  {
    id v34 = a11;
    unint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v35 timeIntervalSinceDate:v34];
    double v37 = v36;

    sub_100089D34((double)(unint64_t)v37);
    unint64_t v39 = (unint64_t)v38;
  }

  else
  {
    unint64_t v39 = 0LL;
  }

  uint64_t v73 = (__CFString *)v31;
  if (v31) {
    __int128 v40 = v31;
  }
  else {
    __int128 v40 = &stru_1005E3958;
  }
  v76[0] = @"deviceModel";
  v76[1] = @"companionModel";
  uint64_t v72 = (__CFString *)v32;
  if (v32) {
    uint64_t v41 = v32;
  }
  else {
    uint64_t v41 = &stru_1005E3958;
  }
  v77[0] = v40;
  v77[1] = v41;
  v76[2] = @"deviceLocked";
  uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a3));
  v77[2] = v71;
  v76[3] = @"keyRequestXTime";
  uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  (a9 * 1000.0)));
  v77[3] = v70;
  v76[4] = @"tokenXTime";
  uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  (a10 * 1000.0)));
  v77[4] = v69;
  v76[5] = @"success";
  id v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a4));
  v77[5] = v67;
  v76[6] = @"errorType";
  uint64_t v42 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a5));
  os_log_t v66 = (void *)v42;
  uint64_t v68 = (__CFString *)v33;
  if (v33) {
    __int16 v43 = v33;
  }
  else {
    __int16 v43 = &stru_1005E3958;
  }
  v77[6] = v42;
  v77[7] = v43;
  v76[7] = @"errorDomain";
  v76[8] = @"errorCode";
  uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a7));
  v77[8] = v63;
  v76[9] = @"watchExistedInUnlockList";
  id v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a8));
  v77[9] = v60;
  v76[10] = @"timeIntervalSinceLastWatch";
  uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v39));
  v77[10] = v56;
  v76[11] = @"upsell";
  id v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a12));
  v77[11] = v55;
  v76[12] = @"responseTimeout";
  char v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a13));
  v77[12] = v57;
  v76[13] = @"responseServer";
  uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a14));
  v77[13] = v58;
  v76[14] = @"messageTimeout";
  id v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a15));
  v77[14] = v61;
  v76[15] = @"messageServer";
  id v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a16));
  v77[15] = v64;
  v76[16] = @"setupRetry";
  uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a17));
  v77[16] = v44;
  v76[17] = @"macOldLTKSyncStatus";
  uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a18));
  v77[17] = v45;
  v76[18] = @"macNewLTKSyncStatus";
  uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a19));
  v77[18] = v46;
  v76[19] = @"watchOldLTKSyncStatus";
  __int16 v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a20));
  v77[19] = v47;
  v76[20] = @"watchNewLTKSyncStatus";
  uint64_t v48 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a21));
  uint64_t v49 = (void *)v48;
  if (v75) {
    int v50 = v75;
  }
  else {
    int v50 = &stru_1005E3958;
  }
  v77[20] = v48;
  v77[21] = v50;
  v76[21] = @"watchBuildVersion";
  v76[22] = @"watchOSVersion";
  if (v74) {
    uint64_t v51 = v74;
  }
  else {
    uint64_t v51 = &stru_1005E3958;
  }
  v77[22] = v51;
  v76[23] = @"receivedSetupACK";
  uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a24));
  v77[23] = v52;
  v76[24] = @"receivedTokenACK";
  uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a25));
  v77[24] = v53;
  os_log_t v54 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v77,  v76,  25LL));
  SFMetricsLog(@"com.apple.sharing.AutoUnlock.Setup", v54);
}

void sub_100089D34(double a1)
{
  if (a1 != 0.0)
  {
    double v2 = -a1;
    if (a1 >= 0.0) {
      double v2 = a1;
    }
    double v3 = log10(v2);
    __exp10((double)(int)(2 - vcvtpd_s64_f64(v3)));
  }

id sub_100089D90(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    double v2 = objc_opt_new(&OBJC_CLASS___SDAutoUnlockWiFiAWDLInfo);
    double v3 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"AWDL_INFO_SUPPORTED_CHANNEL_FLAGS"]);
    -[SDAutoUnlockWiFiAWDLInfo setChannelFlags:](v2, "setChannelFlags:", [v3 integerValue]);

    char v4 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"AWDL_INFO_ASSISTED_DISCOVERY_METRIC"]);
    -[SDAutoUnlockWiFiAWDLInfo setDiscoveryMetric:](v2, "setDiscoveryMetric:", [v4 integerValue]);

    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"AWDL_IF_MAC_ADDRESS"]);
    -[SDAutoUnlockWiFiAWDLInfo setMacAddress:](v2, "setMacAddress:", v5);

    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"AWDL_INFO_PEER_MASTER_CHANNEL"]);
    -[SDAutoUnlockWiFiAWDLInfo setMasterChannel:](v2, "setMasterChannel:", [v6 integerValue]);

    unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"AWDL_INFO_PREFERRED_CHANNEL"]);
    -[SDAutoUnlockWiFiAWDLInfo setPreferredChannel:](v2, "setPreferredChannel:", [v7 integerValue]);

    char v8 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKeyedSubscript:@"AWDL_INFO_EXT"]);
    -[SDAutoUnlockWiFiAWDLInfo setExtraInfoData:](v2, "setExtraInfoData:", v8);

    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockWiFiAWDLInfo data](v2, "data"));
  }

  else
  {
    BOOL v9 = 0LL;
  }

  return v9;
}

id sub_100089EF4(void *a1)
{
  id v1 = a1;
  double v2 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  double v3 = -[SDAutoUnlockWiFiAWDLInfo initWithData:]( objc_alloc(&OBJC_CLASS___SDAutoUnlockWiFiAWDLInfo),  "initWithData:",  v1);

  char v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  -[SDAutoUnlockWiFiAWDLInfo channelFlags](v3, "channelFlags")));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v4,  @"AWDL_INFO_SUPPORTED_CHANNEL_FLAGS");

  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  -[SDAutoUnlockWiFiAWDLInfo discoveryMetric](v3, "discoveryMetric")));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v5,  @"AWDL_INFO_ASSISTED_DISCOVERY_METRIC");

  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockWiFiAWDLInfo macAddress](v3, "macAddress"));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v6,  @"AWDL_IF_MAC_ADDRESS");

  unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  -[SDAutoUnlockWiFiAWDLInfo masterChannel](v3, "masterChannel")));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v7,  @"AWDL_INFO_PEER_MASTER_CHANNEL");

  char v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  -[SDAutoUnlockWiFiAWDLInfo preferredChannel](v3, "preferredChannel")));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  v8,  @"AWDL_INFO_PREFERRED_CHANNEL");

  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockWiFiAWDLInfo extraInfoData](v3, "extraInfoData"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v9, @"AWDL_INFO_EXT");

  id v10 = -[NSMutableDictionary copy](v2, "copy");
  return v10;
}

uint64_t variable initialization expression of SDAirDropHashStoreCDB.writer()
{
  return 0LL;
}

BOOL sub_10008A0A0(void *a1)
{
  return CFDictionaryGetInt64([a1 advertisementFields], @"ue", 0) != 0;
}

BOOL sub_10008A0CC(void *a1)
{
  return CFDictionaryGetInt64([a1 advertisementFields], @"uw", 0) != 0;
}

BOOL sub_10008A0F8(void *a1)
{
  return CFDictionaryGetInt64([a1 advertisementFields], @"wl", 0) != 0;
}

id sub_10008A124(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    double v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSCalendar calendarWithIdentifier:]( &OBJC_CLASS___NSCalendar,  "calendarWithIdentifier:",  NSCalendarIdentifierGregorian));
    double v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale autoupdatingCurrentLocale](&OBJC_CLASS___NSLocale, "autoupdatingCurrentLocale"));
    [v2 setLocale:v3];

    char v4 = (void *)objc_claimAutoreleasedReturnValue([v2 components:2097404 fromDate:v1]);
    id v5 = [v4 year];
    id v6 = [v4 month];
    id v7 = [v4 day];
    id v8 = [v4 hour];
    id v9 = [v4 minute];
    id v10 = [v4 second];
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v4 timeZone]);
    char v12 = (void *)objc_claimAutoreleasedReturnValue([v11 abbreviation]);
    unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%02ld-%02ld-%02ld %02ld:%02ld:%02ld %@",  v5,  v6,  v7,  v8,  v9,  v10,  v12));
  }

  else
  {
    unsigned int v13 = 0LL;
  }

  return v13;
}

uint64_t sub_10008A290()
{
  uint64_t v0 = SFAutoUnlockManagerAutoUnlockTestModeDefault;
  uint64_t v2 = getuid();
  id v3 = sub_10008A33C(v2);
  char v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v0]);
  uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSNumber, v6);
  if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0) {
    id v8 = [v5 BOOLValue];
  }
  else {
    id v8 = [v5 isEqual:@"1"];
  }
  id v1 = v8;

  return (uint64_t)v1;
}

id sub_10008A33C(uint64_t a1)
{
  uint64_t v2 = (void *)sub_10008E36C(SFAutoUnlockManagerAutoUnlockTestModeDictionary);
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSDictionary, v3);
  if ((objc_opt_isKindOfClass(v2, v4) & 1) != 0)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%u", a1));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v5]);
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  return v6;
}

BOOL sub_10008A3E0()
{
  return sub_10008E24C(SFAutoUnlockManagerAutoUnlockAuthorizationTestModeDefault, 0LL) != 0;
}

id sub_10008A40C()
{
  uint64_t v0 = SFAutoUnlockManagerAutoUnlockTestModeDuration;
  id v1 = (id)sub_10008E36C(SFAutoUnlockManagerAutoUnlockTestModeDuration);
  if (!v1)
  {
    uint64_t v2 = getuid();
    id v3 = sub_10008A33C(v2);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v0]);
    uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSNumber, v6);
    if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0) {
      id v8 = v5;
    }
    else {
      id v8 = 0LL;
    }
    id v1 = v8;
  }

  return v1;
}

uint64_t sub_10008A49C()
{
  uint64_t v0 = SFAutoUnlockManagerAutoUnlockTestModeShouldFail;
  uint64_t v2 = getuid();
  id v3 = sub_10008A33C(v2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v0]);
  uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSNumber, v6);
  if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0) {
    id v8 = [v5 BOOLValue];
  }
  else {
    id v8 = [v5 isEqual:@"1"];
  }
  id v1 = v8;

  return (uint64_t)v1;
}

id sub_10008A548()
{
  uint64_t v0 = SFAutoUnlockManagerAutoUnlockTestModeFailureString;
  id v1 = (id)sub_10008E36C(SFAutoUnlockManagerAutoUnlockTestModeFailureString);
  if (!v1)
  {
    uint64_t v2 = getuid();
    id v3 = sub_10008A33C(v2);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v0]);
    uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSString, v6);
    if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0) {
      id v8 = v5;
    }
    else {
      id v8 = 0LL;
    }
    id v1 = v8;
  }

  return v1;
}

id sub_10008A5D8()
{
  uint64_t v0 = SFAutoUnlockManagerAutoUnlockTestModePassword;
  id v1 = (id)sub_10008E36C(SFAutoUnlockManagerAutoUnlockTestModePassword);
  if (!v1)
  {
    uint64_t v2 = getuid();
    id v3 = sub_10008A33C(v2);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v0]);
    uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSString, v6);
    if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0) {
      id v8 = v5;
    }
    else {
      id v8 = 0LL;
    }
    id v1 = v8;
  }

  return v1;
}

uint64_t sub_10008A668(uint64_t a1, uint64_t a2)
{
  uint64_t result = IsAppleInternalBuild(a1, a2);
  if ((_DWORD)result) {
    return sub_10008E24C(@"AUConnectionCacheEnabled", 0LL) != 0;
  }
  return result;
}

void sub_10008A698(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  uint64_t v7 = auto_unlock_log(v6);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = @"NO";
    if ((_DWORD)a1) {
      id v9 = @"YES";
    }
    *(_DWORD *)buf = 138412290;
    __int128 v40 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Updating enable state in dynamic store: %@",  buf,  0xCu);
  }

  id v10 = sub_10008AA2C(0LL);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  char v12 = (__CFString *)[v11 mutableCopy];

  unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString objectForKeyedSubscript:](v12, "objectForKeyedSubscript:", v5));
  uint64_t v14 = v13;
  if (!v13 || [v13 BOOLValue] != (_DWORD)a1)
  {
    unint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a1));
    -[__CFString setObject:forKeyedSubscript:](v12, "setObject:forKeyedSubscript:", v15, v5);

    uint64_t v17 = auto_unlock_log(v16);
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    unint64_t v20 = (const __CFString *)SFAutoUnlockDynamicStoreSharingDomainKey;
    if (v19)
    {
      *(_DWORD *)buf = 138412546;
      __int128 v40 = (const __CFString *)SFAutoUnlockDynamicStoreSharingDomainKey;
      __int16 v41 = 2112;
      uint64_t v42 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Updating global dynamic store (key: %@, value: %@)",  buf,  0x16u);
    }

    uint64_t v21 = SCDynamicStoreSetValue(0LL, v20, v12);
    if (!(_DWORD)v21)
    {
      uint64_t v22 = auto_unlock_log(v21);
      uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        sub_10008C2D0();
      }
    }
  }

  id v24 = sub_10008AA2C(v6);
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
  uint64_t v26 = (__CFString *)[v25 mutableCopy];

  int v27 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%d", getuid());
  char v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
  unsigned int v29 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString objectForKeyedSubscript:](v26, "objectForKeyedSubscript:", v28));

  if (v29)
  {
    id v30 = [v29 BOOLValue];
    if ((_DWORD)v30 == (_DWORD)a1)
    {
      uint64_t v38 = auto_unlock_log(v30);
      double v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        __int128 v40 = v26;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Enabled dictionary exists %@", buf, 0xCu);
      }

      goto LABEL_22;
    }
  }

  char v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a1));
  -[__CFString setObject:forKeyedSubscript:](v26, "setObject:forKeyedSubscript:", v31, v28);

  uint64_t v33 = auto_unlock_log(v32);
  id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    __int128 v40 = v6;
    __int16 v41 = 2112;
    uint64_t v42 = v26;
    _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Updating enabled dynamic store (key: %@, value: %@)",  buf,  0x16u);
  }

  uint64_t v35 = SCDynamicStoreSetValue(0LL, v6, v26);
  if (!(_DWORD)v35)
  {
    uint64_t v36 = auto_unlock_log(v35);
    double v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
      sub_10008C2D0();
    }
LABEL_22:
  }
}

id sub_10008AA2C(void *a1)
{
  id v1 = a1;
  if (!v1) {
    id v1 = (__CFString *)SFAutoUnlockDynamicStoreSharingDomainKey;
  }
  CFPropertyListRef v2 = SCDynamicStoreCopyValue(0LL, v1);
  id v3 = (void *)v2;
  if (v2)
  {
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 != CFDictionaryGetTypeID())
    {
      CFRelease(v3);
      id v3 = 0LL;
    }
  }

  if (v3) {
    id v5 = v3;
  }
  else {
    id v5 = &__NSDictionary0__struct;
  }
  id v6 = v5;

  return v6;
}

void sub_10008AAC8(uint64_t a1)
{
}

void sub_10008AAE4(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    CFTypeID v4 = @"NO";
    if ((_DWORD)a1) {
      CFTypeID v4 = @"YES";
    }
    *(_DWORD *)buf = 138412290;
    int v27 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Updating in progress state in dynamic store: %@",  buf,  0xCu);
  }

  id v5 = sub_10008AA2C(0LL);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  id v7 = [v6 mutableCopy];

  uint64_t v8 = SFAutoUnlockDynamicStoreInProgressKey;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:SFAutoUnlockDynamicStoreInProgressKey]);
  id v10 = v9;
  if (!v9 || [v9 BOOLValue] != (_DWORD)a1)
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a1));
    [v7 setObject:v11 forKeyedSubscript:v8];

    uint64_t v12 = SCDynamicStoreSetValue(0LL, SFAutoUnlockDynamicStoreSharingDomainKey, v7);
    if (!(_DWORD)v12)
    {
      uint64_t v13 = auto_unlock_log(v12);
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        sub_10008C338();
      }
    }
  }

  unint64_t v15 = (const __CFString *)SFAutoUnlockDynamicStoreInProgressPath;
  id v16 = sub_10008AA2C(SFAutoUnlockDynamicStoreInProgressPath);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
  id v18 = [v17 mutableCopy];

  BOOL v19 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%d", getuid());
  unint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:v20]);

  if (!v21 || [v21 BOOLValue] != (_DWORD)a1)
  {
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a1));
    [v18 setObject:v22 forKeyedSubscript:v20];

    uint64_t v23 = SCDynamicStoreSetValue(0LL, v15, v18);
    if (!(_DWORD)v23)
    {
      uint64_t v24 = auto_unlock_log(v23);
      uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
        sub_10008C338();
      }
    }
  }
}

id sub_10008AD64(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *a1));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 stringValue]);

  CFTypeID v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a1[1]));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 stringValue]);

  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @".%@", v5));
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 stringByAppendingString:v6]);

  if ((uint64_t)a1[2] >= 1)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:"));
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 stringValue]);

    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @".%@", v9));
    uint64_t v11 = objc_claimAutoreleasedReturnValue([v7 stringByAppendingString:v10]);

    id v7 = (void *)v11;
  }

  return v7;
}

uint64_t sub_10008AE9C(char a1)
{
  else {
    return qword_1004CAED0[(char)(a1 - 1)];
  }
}

NSString *sub_10008AEC8(uint64_t a1)
{
  id v1 = @"Trigger";
  if (a1 != 2) {
    id v1 = 0LL;
  }
  if (a1 == 1) {
    id v1 = @"Attempt";
  }
  return +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"AutoUnlock-%@", v1);
}

BOOL sub_10008AF18()
{
  uint64_t v0 = (const __CFBoolean *)CFPreferencesCopyAppValue(@"allowAutoUnlock", @"com.apple.applicationaccess");
  if (!v0) {
    return 0LL;
  }
  id v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  BOOL v3 = v2 == CFBooleanGetTypeID() && CFBooleanGetValue(v1) == 0;
  CFRelease(v1);
  return v3;
}

id sub_10008AF8C(char *a1)
{
  return sub_10008AFA4(a1, @"au-setup-response-timeout", @"au-setup-response-timeout-percentage", (id)0x3C);
}

id sub_10008AFA4(char *a1, void *a2, void *a3, id a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstance](&OBJC_CLASS___IDSServerBag, "sharedInstance"));
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:v7]);

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstance](&OBJC_CLASS___IDSServerBag, "sharedInstance"));
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKey:v8]);

  if (!v10
    || (uint64_t v15 = objc_opt_class(&OBJC_CLASS___NSNumber, v14),
        uint64_t isKindOfClass = objc_opt_isKindOfClass(v10, v15),
        (isKindOfClass & 1) == 0)
    || !v12
    || (uint64_t v17 = objc_opt_class(&OBJC_CLASS___NSNumber, v16),
        uint64_t isKindOfClass = objc_opt_isKindOfClass(v12, v17),
        (isKindOfClass & 1) == 0))
  {
    uint64_t v26 = auto_unlock_log(isKindOfClass);
    uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
LABEL_15:
      char v25 = 0;
      goto LABEL_16;
    }

    int v32 = 134218754;
    unint64_t v33 = (unint64_t)a4;
    __int16 v34 = 2112;
    id v35 = v7;
    __int16 v36 = 2112;
    double v37 = v10;
    __int16 v38 = 2112;
    unint64_t v39 = v12;
    int v27 = "Using default value for timeout (default value: %ld, timeout key: %@, server timeout: %@, timeout percentage %@)";
    char v28 = v24;
    uint32_t v29 = 42;
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, v27, (uint8_t *)&v32, v29);
    goto LABEL_15;
  }

  uint64_t v18 = auto_unlock_log(isKindOfClass);
  BOOL v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    int v32 = 138412802;
    unint64_t v33 = (unint64_t)v7;
    __int16 v34 = 2112;
    id v35 = v10;
    __int16 v36 = 2112;
    double v37 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "IDS server bag contains keys (timeout key: %@, server timeout: %@, timeout percentage %@)",  (uint8_t *)&v32,  0x20u);
  }

  id v20 = [v12 integerValue];
  uint64_t v21 = arc4random_uniform(0x64u);
  unsigned int v22 = v21;
  if ((unint64_t)v20 > 0x64 || (unint64_t)v20 <= v21)
  {
    uint64_t v31 = auto_unlock_log(v21);
    uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_15;
    }
    int v32 = 134217984;
    unint64_t v33 = v22;
    int v27 = "Using default timeout (random number: %ld)";
    char v28 = v24;
    uint32_t v29 = 12;
    goto LABEL_14;
  }

  a4 = [v10 integerValue];
  uint64_t v23 = auto_unlock_log(a4);
  uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    int v32 = 134217984;
    unint64_t v33 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Using server timeout (random number: %ld)",  (uint8_t *)&v32,  0xCu);
  }

  char v25 = 1;
LABEL_16:

  if (a1) {
    *a1 = v25;
  }

  return a4;
}

id sub_10008B27C(char *a1)
{
  return sub_10008AFA4(a1, @"au-setup-message-timeout", @"au-setup-message-timeout-percentage", (id)0x2D);
}

double sub_10008B29C()
{
  uint64_t v8 = 0LL;
  double v9 = 0.0;
  double v0 = 0.0;
  if (!IOPMGetLastWakeTime(&v9, &v8))
  {
    double Current = CFAbsoluteTimeGetCurrent();
    double v2 = v9;
    uint64_t v4 = auto_unlock_log(v3);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  v9));
      *(_DWORD *)buf = 138412290;
      uint64_t v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Last machine wake date %@", buf, 0xCu);
    }

    double v0 = Current - v2;
  }

  return v0;
}

CFStringRef sub_10008B388()
{
  return @"UnknownSleepType";
}

uint64_t sub_10008B394()
{
  return 1LL;
}

id sub_10008B39C(void *a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue([a1 componentsSeparatedByString:@","]);
  if ((unint64_t)[v1 count] < 2)
  {
    id v5 = 0LL;
  }

  else
  {
    double v2 = (void *)objc_claimAutoreleasedReturnValue([v1 objectAtIndexedSubscript:0]);
    uint64_t v3 = (char *)[v2 rangeOfString:@"Watch"];
    if (v4) {
      id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 substringFromIndex:&v3[v4]]);
    }
    else {
      id v5 = 0LL;
    }
  }

  return v5;
}

id sub_10008B430(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_10008B39C(a1);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  unsigned int v6 = [v5 isEqualToString:@"1"];

  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet characterSetWithCharactersInString:]( &OBJC_CLASS___NSCharacterSet,  "characterSetWithCharactersInString:",  @"#"));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 stringByRemovingCharactersFromSet:v7]);

  unint64_t v10 = (unint64_t)[v8 integerValue] - 5;
  if (!v6)
  {
    if (v10 < 0xA)
    {
      uint64_t v11 = &off_1005CCE20;
      goto LABEL_6;
    }

NSMutableArray *sub_10008B514(void *a1)
{
  id v1 = a1;
  int v2 = sub_10008E24C(@"AUAlwaysShowModelDescription", 0LL);
  id v3 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  if ([v1 count])
  {
    unint64_t v4 = 0LL;
    id v5 = &IDSSendMessageOptionForceLocalDeliveryKey_ptr;
    id v56 = v1;
    int v53 = v2;
    uint64_t v52 = v3;
    do
    {
      unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v1 objectAtIndexedSubscript:v4]);
      id v7 = v6;
      if (v2)
      {
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 modelIdentifier]);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 enclosureColor]);
        id v10 = sub_10008B430(v8, v9);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v7 modelIdentifier]);
        id v66 = 0LL;
        v67[0] = 0LL;
        sub_10008BB00(v12, v67, &v66);
        id v13 = v67[0];
        id v14 = v66;

        if ([v14 length]) {
          uint64_t v15 = (__CFString *)objc_claimAutoreleasedReturnValue([v5[230] stringWithFormat:@", %@", v14]);
        }
        else {
          uint64_t v15 = &stru_1005E3958;
        }

        if ([v13 length]) {
          uint64_t v49 = (__CFString *)objc_claimAutoreleasedReturnValue([v5[230] stringWithFormat:@", %@", v13]);
        }
        else {
          uint64_t v49 = &stru_1005E3958;
        }

        int v50 = (void *)objc_claimAutoreleasedReturnValue([v5[230] stringWithFormat:@"(%@%@%@)", v11, v15, v49]);
        [v7 setModelDescription:v50];

        -[NSMutableArray addObject:](v3, "addObject:", v7);
        id v1 = v56;
      }

      else
      {
        unint64_t v54 = v4;
        while ((unint64_t)[v1 count] > ++v4)
        {
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v1 objectAtIndexedSubscript:v4]);
          uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v7 name]);
          uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v16 name]);
          unsigned int v19 = [v17 isEqualToString:v18];

          if (v19)
          {
            id v20 = (void *)objc_claimAutoreleasedReturnValue([v7 modelIdentifier]);
            uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v7 enclosureColor]);
            id v22 = sub_10008B430(v20, v21);
            uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v22);

            id v24 = v23;
            char v25 = (void *)objc_claimAutoreleasedReturnValue([v16 modelIdentifier]);
            uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v16 enclosureColor]);
            id v27 = sub_10008B430(v25, v26);
            char v28 = (void *)objc_claimAutoreleasedReturnValue(v27);

            id v29 = v28;
            id v61 = v24;
            if ([v24 isEqualToString:v29])
            {
              id v30 = (void *)objc_claimAutoreleasedReturnValue([v7 modelIdentifier]);
              id v65 = 0LL;
              id v64 = 0LL;
              sub_10008BB00(v30, &v65, &v64);
              uint64_t v58 = (__CFString *)v65;
              id v31 = v64;

              int v32 = (void *)objc_claimAutoreleasedReturnValue([v16 modelIdentifier]);
              id v62 = 0LL;
              id v63 = 0LL;
              sub_10008BB00(v32, &v63, &v62);
              id v59 = (__CFString *)v63;
              id v33 = v62;

              if ([v31 length]) {
                __int16 v34 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @", %@",  v31));
              }
              else {
                __int16 v34 = &stru_1005E3958;
              }

              if ([v33 length]) {
                double v37 = (const __CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @", %@",  v33));
              }
              else {
                double v37 = &stru_1005E3958;
              }

              id v35 = (void *)objc_claimAutoreleasedReturnValue([v24 stringByAppendingString:v34]);
              __int16 v36 = (void *)objc_claimAutoreleasedReturnValue([v29 stringByAppendingString:v37]);

              char v57 = (__CFString *)v37;
              unsigned int v60 = -[__CFString isEqualToString:](v34, "isEqualToString:", v37);
              if (v60)
              {
                if (-[__CFString length](v58, "length")) {
                  __int16 v38 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @", %@",  v58));
                }
                else {
                  __int16 v38 = &stru_1005E3958;
                }

                id v55 = v34;
                if (-[__CFString length](v59, "length")) {
                  __int128 v40 = (const __CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @", %@",  v59));
                }
                else {
                  __int128 v40 = &stru_1005E3958;
                }

                uint64_t v41 = objc_claimAutoreleasedReturnValue([v35 stringByAppendingString:v38]);
                uint64_t v42 = objc_claimAutoreleasedReturnValue([v36 stringByAppendingString:v40]);

                id v35 = (void *)v41;
                __int16 v36 = (void *)v42;
                unint64_t v39 = (__CFString *)v40;
                __int16 v34 = v55;
                id v1 = v56;
              }

              else
              {
                __int16 v38 = v58;
                unint64_t v39 = v59;
              }
            }

            else
            {
              unsigned int v60 = 0;
              id v35 = v24;
              __int16 v36 = v29;
            }

            __int16 v43 = (void *)objc_claimAutoreleasedReturnValue([v7 modelDescription]);
            id v44 = [v43 length];
            id v45 = [v35 length];

            if (v44 < v45) {
              [v7 setModelDescription:v35];
            }
            uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v16 modelDescription]);
            id v47 = [v46 length];
            id v48 = [v36 length];

            if (v47 < v48) {
              [v16 setModelDescription:v36];
            }

            if (v60)
            {

              break;
            }
          }
        }

        id v3 = v52;
        -[NSMutableArray addObject:](v52, "addObject:", v7);
        int v2 = v53;
        unint64_t v4 = v54;
        id v5 = &IDSSendMessageOptionForceLocalDeliveryKey_ptr;
      }

      ++v4;
    }

    while ((unint64_t)[v1 count] > v4);
  }

  return v3;
}

void sub_10008BB00(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  if (qword_100656F18 != -1) {
    dispatch_once(&qword_100656F18, &stru_1005CCDD0);
  }
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_100656F10 objectForKeyedSubscript:v5]);
  id v7 = (char *)[v6 integerValue];

  if ((unint64_t)(v7 - 1) > 7)
  {
    id v10 = &stru_1005E3958;
  }

  else
  {
    uint64_t v9 = SFLocalizedStringForKey(*(&off_1005CCE70 + (void)(v7 - 1)), v8);
    id v10 = (__CFString *)objc_claimAutoreleasedReturnValue(v9);
  }

  if (![v5 hasPrefix:@"Watch5,"])
  {
    if (![v5 hasPrefix:@"Watch6,"])
    {
      if ([v5 hasPrefix:@"Watch7,"])
      {
        int v15 = SFMinorWatchHardwareVersion(v5);
        if ((v15 - 1) < 4)
        {
          id v13 = @"UNLOCK_WATCH_SERIES_NINE";
          goto LABEL_23;
        }

        if (v15 == 5)
        {
          id v13 = @"UNLOCK_WATCH_ULTRA_TWO";
          goto LABEL_23;
        }

        if ((v15 & 0xFFFFFFFC) == 8)
        {
          id v13 = @"UNLOCK_WATCH_SERIES_TEN";
          goto LABEL_23;
        }
      }

      goto LABEL_30;
    }

    int v14 = SFMinorWatchHardwareVersion(v5);
    if ((v14 - 1) < 4)
    {
      id v13 = @"UNLOCK_WATCH_SERIES_SIX";
      goto LABEL_23;
    }

    if ((v14 - 6) < 4)
    {
      id v13 = @"UNLOCK_WATCH_SERIES_SEVEN";
      goto LABEL_23;
    }

    if ((v14 - 10) >= 4)
    {
      if ((v14 - 14) < 4)
      {
        id v13 = @"UNLOCK_WATCH_SERIES_EIGHT";
        goto LABEL_23;
      }

      if (v14 == 18)
      {
        id v13 = @"UNLOCK_WATCH_ULTRA";
        goto LABEL_23;
      }

      goto LABEL_30;
    }

id sub_10008C238(void *a1)
{
  v2[0] = 0LL;
  v2[1] = 0LL;
  [a1 getUUIDBytes:v2];
  return (id)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  v2,  16LL));
}

void sub_10008C2A4(id a1)
{
  id v1 = (void *)qword_100656F10;
  qword_100656F10 = (uint64_t)&off_1005F9928;
}

  ;
}

uint64_t sub_10008C2C8()
{
  return SCError();
}

void sub_10008C2D0()
{
}

void sub_10008C338()
{
}

uint64_t SDUnlockLockStateUpdatedReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      char v17 = 0;
      unsigned int v18 = 0;
      uint64_t v19 = 0LL;
      *(_BYTE *)(a1 + 16) |= 2u;
      while (1)
      {
        unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v20 == -1LL || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
        v19 |= (unint64_t)(v21 & 0x7F) << v17;
        if ((v21 & 0x80) == 0) {
          goto LABEL_40;
        }
        v17 += 7;
        BOOL v9 = v18++ >= 9;
        if (v9)
        {
          uint64_t v19 = 0LL;
          goto LABEL_42;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_40:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v19 = 0LL;
      }
LABEL_42:
      *(_BYTE *)(a1 + 12) = v19 != 0;
    }

    else if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0LL;
      *(_BYTE *)(a1 + 16) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_36;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_38;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_36:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_38:
      *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = v14;
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10008D3D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10008D400(uint64_t a1)
{
}

void sub_10008D52C(id a1)
{
  qword_100656F28 = (uint64_t)CFBundleGetBundleWithIdentifier(@"com.apple.Sharing");
  if (!qword_100656F28)
  {
    uint64_t v1 = CFURLCreateWithFileSystemPath( 0LL,  @"/System/Library/PrivateFrameworks/Sharing.framework",  kCFURLPOSIXPathStyle,  1u);
    if (v1)
    {
      uint64_t v2 = v1;
      qword_100656F28 = (uint64_t)CFBundleCreate(0LL, v1);
      CFRelease(v2);
    }
  }

CFStringRef sub_10008D598(const __CFString *a1)
{
  return sub_10008D5A4(a1, @"Localizable");
}

CFStringRef sub_10008D5A4(const __CFString *cf, CFStringRef tableName)
{
  if (qword_100656F20 != -1) {
    dispatch_once(&qword_100656F20, &stru_1005CCF50);
  }
  if (qword_100656F28) {
    return CFBundleCopyLocalizedString((CFBundleRef)qword_100656F28, cf, cf, tableName);
  }
  unsigned int v5 = CFGetAllocator(cf);
  return CFStringCreateCopy(v5, cf);
}

__CFSet *sub_10008D61C(const __CFAllocator *a1, CFIndex a2, CFBagRef theBag)
{
  if (!theBag) {
    return 0LL;
  }
  CFIndex Count = CFBagGetCount(theBag);
  if (!Count) {
    return 0LL;
  }
  uint64_t v7 = Count;
  __chkstk_darwin();
  BOOL v9 = (const void **)((char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  bzero(v9, v8);
  CFBagGetValues(theBag, v9);
  Mutable = CFSetCreateMutable(a1, a2, &kCFTypeSetCallBacks);
  if (v7 >= 1)
  {
    do
    {
      int v11 = *v9++;
      CFSetSetValue(Mutable, v11);
      --v7;
    }

    while (v7);
  }

  return Mutable;
}

void sub_10008D71C(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  if (value) {
    CFDictionarySetValue(theDict, key, value);
  }
  else {
    CFDictionaryRemoveValue(theDict, key);
  }
}

uint64_t sub_10008D728(const void *a1)
{
  if (CFEqual(a1, kSFNodeProtocolAFP)) {
    return 548LL;
  }
  if (CFEqual(a1, kSFNodeProtocolSMB)) {
    return 445LL;
  }
  if (CFEqual(a1, kSFNodeProtocolVNC)) {
    return 5900LL;
  }
  if (CFEqual(a1, kSFNodeProtocolODisk) || CFEqual(a1, kSFNodeProtocolWebDAV)) {
    return 80LL;
  }
  if (CFEqual(a1, kSFNodeProtocolWebDAVS)) {
    return 443LL;
  }
  if (CFEqual(a1, kSFNodeProtocolNFS)) {
    return 2049LL;
  }
  if (CFEqual(a1, kSFNodeProtocolFTP)) {
    return 21LL;
  }
  if (CFEqual(a1, kSFNodeProtocolFTPS)) {
    return 990LL;
  }
  if (CFEqual(a1, kSFNodeProtocolHTTP)) {
    return 80LL;
  }
  if (CFEqual(a1, kSFNodeProtocolHTTPS)) {
    return 443LL;
  }
  if (CFEqual(a1, kSFNodeProtocolADisk)) {
    return 548LL;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

CFURLRef sub_10008D8A8( const void *a1, const __CFString *a2, const __CFString *a3, __CFString *MutableCopy, int a5, const __CFString *a6, const __CFDictionary *a7, int a8)
{
  if (CFEqual(a1, kSFNodeProtocolWebDAV) || CFEqual(a1, kSFNodeProtocolODisk))
  {
    char v16 = (const void **)&kSFNodeProtocolHTTP;
LABEL_4:
    char v17 = *v16;
    goto LABEL_5;
  }

  __int16 v38 = (const void *)kSFNodeProtocolAirDrop;
  CFEqual(a1, kSFNodeProtocolAirDrop);
  if (CFEqual(a1, kSFNodeProtocolWebDAVS) || (char v17 = a1, CFEqual(a1, v38)))
  {
    char v16 = (const void **)&kSFNodeProtocolHTTPS;
    goto LABEL_4;
  }

CGImageRef sub_10008DDB8(const __CFData *a1)
{
  return sub_10008DDC0(a1, 0);
}

CGImageRef sub_10008DDC0(const __CFData *a1, int a2)
{
  CFMutableStringRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  unsigned int v5 = Mutable;
  if (a2)
  {
    CFDictionarySetValue(Mutable, kCGImageSourceTypeIdentifierHint, kUTTypeJPEG2000);
    CFDictionarySetValue(v5, kCGImageSourceFailForDataNotMatchingHint, kCFBooleanTrue);
  }

  unint64_t v6 = CGImageSourceCreateWithData(a1, v5);
  if (v6)
  {
    uint64_t v7 = v6;
    if (!CGImageSourceGetCount(v6))
    {
      char v12 = (os_log_s *)utilities_log();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_10008EBC0();
      }
      goto LABEL_20;
    }

    if (a2)
    {
      CFStringRef Type = CGImageSourceGetType(v7);
      if (!CFEqual(Type, kUTTypeJPEG2000))
      {
        uint64_t v14 = (os_log_s *)utilities_log();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          sub_10008EBEC();
        }
        goto LABEL_20;
      }

      CGImageRef ImageAtIndex = CGImageSourceCreateImageAtIndex(v7, 0LL, 0LL);
      if (!ImageAtIndex)
      {
        int v10 = (os_log_s *)utilities_log();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          sub_10008EC18();
        }
LABEL_20:
        CGImageRef ImageAtIndex = 0LL;
      }
    }

    else
    {
      CGImageRef ImageAtIndex = CGImageSourceCreateImageAtIndex(v7, 0LL, 0LL);
      if (!ImageAtIndex)
      {
        uint64_t v13 = (os_log_s *)utilities_log();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          sub_10008EC44();
        }
        goto LABEL_20;
      }
    }

    CFRelease(v7);
    goto LABEL_22;
  }

  int v11 = (os_log_s *)utilities_log();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
    sub_10008EB94();
  }
  CGImageRef ImageAtIndex = 0LL;
LABEL_22:
  CFRelease(v5);
  return ImageAtIndex;
}

CGImageRef sub_10008DF74(const __CFData *a1)
{
  return sub_10008DDC0(a1, 1);
}

CGImageRef sub_10008DF7C(const void *a1)
{
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 == CFURLGetTypeID())
  {
    uint64_t v3 = CGImageSourceCreateWithURL((CFURLRef)a1, 0LL);
  }

  else
  {
    if (v2 != CFDataGetTypeID()) {
      goto LABEL_8;
    }
    uint64_t v3 = CGImageSourceCreateWithData((CFDataRef)a1, 0LL);
  }

  char v4 = v3;
  if (v3)
  {
    if (CGImageSourceGetCount(v3))
    {
      CGImageRef ImageAtIndex = CGImageSourceCreateImageAtIndex(v4, 0LL, 0LL);
    }

    else
    {
      uint64_t v7 = (os_log_s *)utilities_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_10008EC9C();
      }
      CGImageRef ImageAtIndex = 0LL;
    }

    CFRelease(v4);
    return ImageAtIndex;
  }

__CFData *sub_10008E058(void *a1, uint64_t a2)
{
  char v4 = CFGetAllocator(a1);
  CFMutableStringRef Mutable = CFDataCreateMutable(v4, 0LL);
  uint64_t valuePtr = a2;
  unint64_t v6 = CFDictionaryCreateMutable(v4, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (a2)
  {
    CFNumberRef v7 = CFNumberCreate(v4, kCFNumberLongType, &valuePtr);
    size_t v8 = (const void **)&kCGImageDestinationRequestedFileSize;
  }

  else
  {
    int v14 = 1065353216;
    CFNumberRef v7 = CFNumberCreate(v4, kCFNumberFloatType, &v14);
    size_t v8 = (const void **)&kCGImageDestinationLossyCompressionQuality;
  }

  CFDictionarySetValue(v6, *v8, v7);
  CFRelease(v7);
  BOOL v9 = CGImageDestinationCreateWithData(Mutable, kUTTypeJPEG2000, 1uLL, 0LL);
  if (v9)
  {
    int v10 = v9;
    CGImageDestinationAddImage(v9, (CGImageRef)a1, v6);
    if (!CGImageDestinationFinalize(v10))
    {
      int v11 = (os_log_s *)utilities_log();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_10008ECF4();
      }
      CFRelease(Mutable);
      CFMutableStringRef Mutable = 0LL;
    }

    CFRelease(v10);
  }

  else
  {
    char v12 = (os_log_s *)utilities_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_10008ECC8();
    }
  }

  CFRelease(v6);
  return Mutable;
}

uint64_t sub_10008E1C8(uint64_t a1, uint64_t a2)
{
  CFTypeID v2 = (const __CFBoolean *)qword_100656F30;
  if (!qword_100656F30)
  {
    if ((SFDeviceIsVirtualMachine(0LL, a2) & 1) != 0) {
      uint64_t v3 = 1LL;
    }
    else {
      uint64_t v3 = sub_10008E24C(@"EnableDemoMode", 0LL);
    }
    int v4 = sub_10008E24C(@"BrowseAllInterfaces", v3);
    unsigned int v5 = &kCFBooleanTrue;
    if (!v4) {
      unsigned int v5 = &kCFBooleanFalse;
    }
    CFTypeID v2 = *v5;
    qword_100656F30 = (uint64_t)*v5;
  }

  return CFBooleanGetValue(v2);
}

uint64_t sub_10008E23C()
{
  return sub_10008E24C(@"EnableDemoMode", 0LL);
}

uint64_t sub_10008E24C(const __CFString *a1, uint64_t a2)
{
  uint64_t v3 = (const __CFBoolean *)sub_10008E36C(a1);
  if (v3)
  {
    int v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFBooleanGetTypeID())
    {
      uint64_t Value = CFBooleanGetValue(v4);
    }

    else
    {
      if (v5 != CFStringGetTypeID())
      {
LABEL_7:
        CFRelease(v4);
        return a2;
      }

      uint64_t Value = sub_10008E444((const __CFString *)v4);
    }

    a2 = Value;
    goto LABEL_7;
  }

  return a2;
}

uint64_t sub_10008E2C0()
{
  uint64_t v0 = (const __CFBoolean *)qword_100656F38;
  if (!qword_100656F38)
  {
    int v1 = sub_10008E24C(@"EnableDirectIP", 0LL);
    CFTypeID v2 = &kCFBooleanTrue;
    if (!v1) {
      CFTypeID v2 = &kCFBooleanFalse;
    }
    uint64_t v0 = *v2;
    qword_100656F38 = (uint64_t)*v2;
  }

  return CFBooleanGetValue(v0);
}

BOOL sub_10008E314(CFTypeRef cf1, CFTypeRef cf2)
{
  if (cf1 && cf2)
  {
    if (!CFEqual(cf1, cf2)) {
      return 1LL;
    }
  }

  else if (cf1 && !cf2)
  {
    return 1LL;
  }

  return cf2 && cf1 == 0LL;
}

CFPropertyListRef sub_10008E36C(const __CFString *a1)
{
  CFPropertyListRef result = CFPreferencesCopyAppValue(a1, @"/private/var/Managed Preferences/mobile/com.apple.Sharing");
  if (!result) {
    return CFPreferencesCopyAppValue(a1, @"com.apple.Sharing");
  }
  return result;
}

uint64_t sub_10008E3B0(const __CFString *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t valuePtr = a2;
  uint64_t v3 = (const __CFNumber *)sub_10008E36C(a1);
  if (v3)
  {
    int v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v4, kCFNumberLongType, &valuePtr);
    }

    else
    {
      CFTypeID v6 = CFGetTypeID(v4);
      if (v6 == CFStringGetTypeID()) {
        uint64_t valuePtr = CFStringGetIntValue((CFStringRef)v4);
      }
    }

    CFRelease(v4);
    return valuePtr;
  }

  return v2;
}

BOOL sub_10008E444(const __CFString *a1)
{
  if (CFEqual(a1, @"1"))
  {
    BOOL v2 = 1LL;
  }

  else
  {
    BOOL v2 = 1LL;
    if (CFStringCompare(a1, @"true", 1uLL))
    {
      BOOL v2 = 1LL;
      if (CFStringCompare(a1, @"yes", 1uLL))
      {
        BOOL v2 = 1LL;
        if (CFStringCompare(a1, @"y", 1uLL)) {
          BOOL v2 = CFStringCompare(a1, @"on", 1uLL) == kCFCompareEqualTo;
        }
      }
    }
  }

  CFRelease(a1);
  return v2;
}

CFStringRef sub_10008E500(const __CFAllocator *a1)
{
  v3.tv_sec = 0LL;
  *(void *)&v3.tv_usec = 0LL;
  gettimeofday(&v3, 0LL);
  localtime_r(&v3.tv_sec, &v4);
  return CFStringCreateWithFormat( a1,  0LL,  @"%02d:%02d:%02d.%03d",  v4.tm_hour,  v4.tm_min,  v4.tm_sec,  (v3.tv_usec / 1000));
}

CFStringRef sub_10008E590()
{
  uint64_t v0 = (const __CFBoolean *)sub_10008E36C(@"AlternateService");
  if (v0)
  {
    int v1 = v0;
    CFTypeID v2 = CFGetTypeID(v0);
    if (v2 == CFBooleanGetTypeID())
    {
      if (CFBooleanGetValue(v1)) {
        timeval v3 = @"_airdrop-alt._tcp.";
      }
      else {
        timeval v3 = @"_airdrop._tcp.";
      }
      goto LABEL_14;
    }

    CFTypeID v6 = CFGetTypeID(v1);
    if (v6 == CFStringGetTypeID())
    {
      if (CFEqual(v1, @"1"))
      {
        timeval v3 = @"_airdrop-alt._tcp.";
LABEL_14:
        CFRelease(v1);
        return v3;
      }

      if (!CFEqual(v1, @"0"))
      {
        if (CFStringGetLength((CFStringRef)v1) < 8)
        {
          CFNumberRef v7 = (void *)CFRetain(v1);
        }

        else
        {
          v10.location = 0LL;
          v10.length = 7LL;
          CFNumberRef v7 = (void *)CFStringCreateWithSubstring(0LL, (CFStringRef)v1, v10);
        }

        size_t v8 = v7;
        CFStringRef v9 = CFStringCreateWithFormat(0LL, 0LL, @"_airdrop-%@._tcp.", v7);
        timeval v3 = (const __CFString *)CFAutorelease(v9);
        CFRelease(v8);
        goto LABEL_14;
      }
    }

    timeval v3 = @"_airdrop._tcp.";
    goto LABEL_14;
  }

  if (sub_10008E24C(@"EnableDemoMode", 0LL))
  {
    CFStringRef v4 = CFStringCreateWithFormat(0LL, 0LL, @"_airdrop-%@._tcp.", @"demo");
    return (const __CFString *)CFAutorelease(v4);
  }

  return @"_airdrop._tcp.";
}

CFArrayRef sub_10008E71C()
{
  int v14 = @"_adisk._tcp.";
  unint64_t v15 = @"_afpovertcp._tcp.";
  char v16 = @"_smb._tcp.";
  char v17 = @"_rfb._tcp.";
  int v18 = @"_odisk._tcp.";
  uint64_t v19 = @"_http._tcp.";
  unint64_t v20 = sub_10008E590();
  int v21 = @"_file._tcp.";
  id v22 = @"_netbios._udp.";
  id v23 = @"_workgroups._udp.";
  CFStringRef v24 = @"_nwnode._tcp.";
  uint64_t v0 = kSFNodeProtocolAFP;
  values = (void *)kSFNodeProtocolADisk;
  uint64_t v4 = kSFNodeProtocolAFP;
  uint64_t v1 = kSFNodeProtocolSMB;
  uint64_t v5 = kSFNodeProtocolSMB;
  uint64_t v6 = kSFNodeProtocolVNC;
  uint64_t v7 = kSFNodeProtocolODisk;
  uint64_t v8 = kSFNodeProtocolHTTP;
  uint64_t v9 = kSFNodeProtocolAirDrop;
  uint64_t v10 = kSFNodeProtocolFile;
  uint64_t v11 = kSFNodeProtocolNetBIOS;
  uint64_t v12 = kSFNodeProtocolWorkgroups;
  uint64_t v13 = kSFNodeProtocolNWNode;
  if (sub_10008E24C(@"PreferSMBFileSharing", 0LL))
  {
    unint64_t v15 = @"_smb._tcp.";
    char v16 = @"_afpovertcp._tcp.";
    uint64_t v4 = v1;
    uint64_t v5 = v0;
  }

  qword_100656F50 = (uint64_t)CFArrayCreate(0LL, (const void **)&values, 11LL, &kCFTypeArrayCallBacks);
  CFArrayRef result = CFArrayCreate(0LL, (const void **)&v14, 11LL, &kCFTypeArrayCallBacks);
  qword_100656F48 = (uint64_t)result;
  return result;
}

const void *sub_10008E8D4(void *key)
{
  if (qword_100656F58 != -1) {
    dispatch_once(&qword_100656F58, &stru_1005CCFD0);
  }
  return CFDictionaryGetValue((CFDictionaryRef)qword_100656F60, key);
}

CFDictionaryRef sub_10008E928()
{
  if (qword_100656F40 != -1) {
    dispatch_once(&qword_100656F40, &stru_1005CCF90);
  }
  uint64_t v0 = (const __CFArray *)qword_100656F48;
  uint64_t v1 = (const __CFArray *)qword_100656F50;
  CFIndex Count = CFArrayGetCount((CFArrayRef)qword_100656F48);
  CFIndex v3 = CFArrayGetCount(v1);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  bzero(v5, v4);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  bzero(v7, v6);
  v10.location = 0LL;
  v10.length = Count;
  CFArrayGetValues(v0, v10, (const void **)v5);
  v11.location = 0LL;
  v11.length = v3;
  CFArrayGetValues(v1, v11, (const void **)v7);
  qword_100656F60 = (uint64_t)CFDictionaryCreate( kCFAllocatorDefault,  (const void **)v7,  (const void **)v5,  Count,  &kCFCopyStringDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  CFDictionaryRef result = CFDictionaryCreate( kCFAllocatorDefault,  (const void **)v5,  (const void **)v7,  v3,  &kCFCopyStringDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
  qword_100656F68 = (uint64_t)result;
  return result;
}

const void *sub_10008EAC8(void *key)
{
  if (qword_100656F58 != -1) {
    dispatch_once(&qword_100656F58, &stru_1005CD010);
  }
  return CFDictionaryGetValue((CFDictionaryRef)qword_100656F68, key);
}

void sub_10008EB1C(uint64_t *a1, os_log_s *a2)
{
  uint64_t v2 = *a1;
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "createURL: CFURLSetResourcePropertyForKey %@",  (uint8_t *)&v3,  0xCu);
}

void sub_10008EB94()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "createCGImageWithDataInternal: CGImageSourceCreateWithData returned NULL",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_10008EBC0()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "createCGImageWithDataInternal: CGImageSourceGetCount returned zero",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_10008EBEC()
{
}

void sub_10008EC18()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "createCGImageWithDataInternal: CGImageSourceCreateImageAtIndex (requireJPEG2000) returned NULL",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_10008EC44()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "createCGImageWithDataInternal: CGImageSourceCreateImageAtIndex returned NULL",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_10008EC70()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "createCGImageWithDataOrURL: CGImageSourceCreate returned NULL",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_10008EC9C()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "createCGImageWithDataOrURL: CGImageSourceGetCount returned zero",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_10008ECC8()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "copyImageData: CGImageDestinationCreateWithData returned NULL",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_10008ECF4()
{
}

uint64_t SDAuthenticationPrePairingRequestReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      uint64_t String = PBReaderReadString(a2);
      uint64_t v19 = objc_claimAutoreleasedReturnValue(String);
      unint64_t v20 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose(va, 8) = v19;
    }

    else
    {
      if ((_DWORD)v12 == 2)
      {
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v15 = 0LL;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1LL || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v24 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
          v15 |= (unint64_t)(v24 & 0x7F) << v21;
          if ((v24 & 0x80) == 0) {
            goto LABEL_42;
          }
          v21 += 7;
          BOOL v9 = v22++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_44;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_44:
        uint64_t v26 = 16LL;
      }

      else
      {
        if ((_DWORD)v12 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result) {
            return result;
          }
          continue;
        }

        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0LL;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1LL || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v17 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0) {
            goto LABEL_38;
          }
          v13 += 7;
          BOOL v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_40;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_40:
        uint64_t v26 = 20LL;
      }

      *(_DWORD *)(a1 + v26) = v15;
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_10008F778(uint64_t a1)
{
  return [*(id *)(a1 + 32) _start];
}

void sub_10008FF0C(uint64_t a1, uint64_t a2)
{
  char v4 = (void *)objc_claimAutoreleasedReturnValue(+[SDNearbyAgent sharedNearbyAgent](&OBJC_CLASS___SDNearbyAgent, "sharedNearbyAgent"));
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bleDevice]);
  [v4 stopUnlockBLEConnectionWithDevice:v5];

  [*(id *)(a1 + 32) setActiveConnection:0];
  unint64_t v6 = *(void **)(a1 + 32);
  if (a2)
  {
    uint64_t v7 = SFAutoUnlockErrorDomain;
    NSErrorUserInfoKey v10 = NSLocalizedDescriptionKey;
    CFRange v11 = @"Proxy trigger failed";
    char v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v11,  &v10,  1LL));
    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v7,  141LL,  v8));
    [v6 notifyDelegateWithError:v9];
  }

  else
  {
    [*(id *)(a1 + 32) setState:3];
    [*(id *)(a1 + 32) notifyDelegateWithError:0];
  }

uint64_t SDAutoUnlockAWDLInfoReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0LL;
        int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v11 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0LL;
        *(_BYTE *)(a1 + 60) |= 4u;
        while (1)
        {
          uint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v17 = v16 + 1;
          if (v16 == -1 || v17 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v18 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
          v15 |= (unint64_t)(v18 & 0x7F) << v13;
          if ((v18 & 0x80) == 0) {
            goto LABEL_77;
          }
          v13 += 7;
          BOOL v10 = v14++ >= 9;
          if (v10)
          {
            LODWORD(v15) = 0;
            goto LABEL_79;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_77:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_79:
        uint64_t v63 = 48LL;
        goto LABEL_88;
      case 2u:
        uint64_t Data = PBReaderReadData(a2);
        uint64_t v21 = objc_claimAutoreleasedReturnValue(Data);
        uint64_t v22 = 24LL;
        goto LABEL_58;
      case 3u:
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0LL;
        *(_BYTE *)(a1 + 60) |= 0x80u;
        while (2)
        {
          uint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v27 = v26 + 1;
          if (v26 == -1 || v27 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v28 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if (v28 < 0)
            {
              v23 += 7;
              BOOL v10 = v24++ >= 9;
              if (v10)
              {
                uint64_t v25 = 0LL;
                goto LABEL_83;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v25 = 0LL;
        }
LABEL_83:
        BOOL v64 = v25 != 0;
        uint64_t v65 = 56LL;
        goto LABEL_105;
      case 4u:
        uint64_t v29 = PBReaderReadData(a2);
        uint64_t v21 = objc_claimAutoreleasedReturnValue(v29);
        uint64_t v22 = 40LL;
        goto LABEL_58;
      case 5u:
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v15 = 0LL;
        *(_BYTE *)(a1 + 60) |= 2u;
        while (2)
        {
          uint64_t v32 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v33 = v32 + 1;
          if (v32 == -1 || v33 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v34 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v32);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33;
            v15 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              BOOL v10 = v31++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_87;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_87:
        uint64_t v63 = 32LL;
LABEL_88:
        *(_DWORD *)(a1 + v63) = v15;
        continue;
      case 6u:
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v37 = 0LL;
        *(_BYTE *)(a1 + 60) |= 8u;
        while (2)
        {
          uint64_t v38 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v39 = v38 + 1;
          if (v38 == -1 || v39 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v40 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v38);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v39;
            v37 |= (unint64_t)(v40 & 0x7F) << v35;
            if (v40 < 0)
            {
              v35 += 7;
              BOOL v10 = v36++ >= 9;
              if (v10)
              {
                uint64_t v37 = 0LL;
                goto LABEL_92;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v37 = 0LL;
        }
LABEL_92:
        BOOL v64 = v37 != 0;
        uint64_t v65 = 52LL;
        goto LABEL_105;
      case 7u:
        char v41 = 0;
        unsigned int v42 = 0;
        uint64_t v43 = 0LL;
        *(_BYTE *)(a1 + 60) |= 0x40u;
        while (2)
        {
          uint64_t v44 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v45 = v44 + 1;
          if (v44 == -1 || v45 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v46 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v44);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v45;
            v43 |= (unint64_t)(v46 & 0x7F) << v41;
            if (v46 < 0)
            {
              v41 += 7;
              BOOL v10 = v42++ >= 9;
              if (v10)
              {
                uint64_t v43 = 0LL;
                goto LABEL_96;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v43 = 0LL;
        }
LABEL_96:
        BOOL v64 = v43 != 0;
        uint64_t v65 = 55LL;
        goto LABEL_105;
      case 8u:
        uint64_t String = PBReaderReadString(a2);
        uint64_t v21 = objc_claimAutoreleasedReturnValue(String);
        uint64_t v22 = 16LL;
LABEL_58:
        uint64_t v48 = *(void **)(a1 + v22);
        *(void *)(a1 + v22) = v21;

        continue;
      case 9u:
        *(_BYTE *)(a1 + 60) |= 1u;
        unint64_t v49 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v49 <= 0xFFFFFFFFFFFFFFF7LL && v49 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v50 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v49);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v49 + 8;
        }

        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v50 = 0LL;
        }

        *(void *)(a1 + _Block_object_dispose(va, 8) = v50;
        continue;
      case 0xAu:
        char v51 = 0;
        unsigned int v52 = 0;
        uint64_t v53 = 0LL;
        *(_BYTE *)(a1 + 60) |= 0x20u;
        while (2)
        {
          uint64_t v54 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v55 = v54 + 1;
          if (v54 == -1 || v55 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v56 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v54);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v55;
            v53 |= (unint64_t)(v56 & 0x7F) << v51;
            if (v56 < 0)
            {
              v51 += 7;
              BOOL v10 = v52++ >= 9;
              if (v10)
              {
                uint64_t v53 = 0LL;
                goto LABEL_100;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v53 = 0LL;
        }
LABEL_100:
        BOOL v64 = v53 != 0;
        uint64_t v65 = 54LL;
        goto LABEL_105;
      case 0xBu:
        char v57 = 0;
        unsigned int v58 = 0;
        uint64_t v59 = 0LL;
        *(_BYTE *)(a1 + 60) |= 0x10u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      uint64_t v60 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v61 = v60 + 1;
      if (v60 == -1 || v61 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v62 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v60);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v61;
      v59 |= (unint64_t)(v62 & 0x7F) << v57;
      if ((v62 & 0x80) == 0) {
        goto LABEL_102;
      }
      v57 += 7;
      BOOL v10 = v58++ >= 9;
      if (v10)
      {
        uint64_t v59 = 0LL;
        goto LABEL_104;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_102:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v59 = 0LL;
    }
LABEL_104:
    BOOL v64 = v59 != 0;
    uint64_t v65 = 53LL;
LABEL_105:
    *(_BYTE *)(a1 + v65) = v64;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

LABEL_60:
    int v11 = 0;
  }
}

    sub_1002FAB48(&v48, &v47, (uint64_t *)&v46);
    return 1LL;
  }

    swift_once(&qword_100644228, sub_100382454);
    goto LABEL_18;
  }

            __break(1u);
            goto LABEL_61;
          }

LABEL_61:
  return v11;
}

  uint64_t result = NWEndpoint.nw.getter(v88);
  if (!result)
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }

  uint64_t v89 = result;
  device_model = nw_endpoint_get_device_model();
  id v91 = swift_unknownObjectRelease(v89);
  if (device_model)
  {
    id v91 = String.init(cString:)(device_model);
    uint64_t v92 = v91;
    id v94 = v93;
  }

  else
  {
    uint64_t v92 = 0LL;
    id v94 = 0LL;
  }

  uint64_t result = NWEndpoint.nw.getter(v91);
  if (result)
  {
    uint64_t v96 = result;
    v97 = nw_endpoint_get_device_model();
    swift_unknownObjectRelease(v96);
    if (v97)
    {
      v98 = String.init(cString:)(v97);
      v100 = v99;
      if (v94)
      {
        uint64_t v63 = (uint64_t)v109;
        if (v99)
        {
          if (v92 == v98 && v94 == v99)
          {
            swift_bridgeObjectRelease(v99);
            sub_1001A4BC8(v61, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
            sub_1001A4BC8(v112, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
            swift_bridgeObjectRelease(v94);
LABEL_80:
            sub_1001A4B84(v42, v63, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
            sub_1001A4B84(v41, v60, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
            uint64_t v65 = (uint64_t)v106;
            goto LABEL_81;
          }

          v104 = _stringCompareWithSmolCheck(_:_:expecting:)(v92, v94, v98, v99, 0LL);
          swift_bridgeObjectRelease(v100);
          sub_1001A4BC8(v61, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
          sub_1001A4BC8(v112, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
          swift_bridgeObjectRelease(v94);
          sub_1001A4B84(v42, v63, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
          sub_1001A4B84(v41, v60, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
          uint64_t v65 = (uint64_t)v106;
          if ((v104 & 1) != 0)
          {
LABEL_81:
            int v101 = sub_10020D1FC(0x6C46737574617453LL, 0xEB00000000736761LL);
            v102 = sub_10020D1FC(0x6C46737574617453LL, 0xEB00000000736761LL);
            sub_1001A4BC8(v60, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
            sub_1001A4BC8(v63, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
            sub_1001A4B84(v42, v65, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
            sub_1001A4B84(v41, v52, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
            if (v101 == v102)
            {
              __int16 v103 = sub_10020D1FC(0x4665727574616546LL, 0xEC0000007367616CLL);
              __int128 v66 = v103 == sub_10020D1FC(0x4665727574616546LL, 0xEC0000007367616CLL);
              goto LABEL_26;
            }

              __break(1u);
LABEL_62:
              __break(1u);
LABEL_63:
              __break(1u);
              goto LABEL_64;
            }

            unint64_t v6 = v60;
          }
        }
      }

              __break(1u);
              goto LABEL_62;
            }

uint64_t SDUnlockStateRequestReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0LL;
      *(_BYTE *)(a1 + 12) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_30:
      *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = v14;
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SDAutoUnlockKeyDeviceLockedReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0LL;
      *(_BYTE *)(a1 + 12) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_30:
      *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = v14;
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100093794( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000937BC(uint64_t a1)
{
}

id sub_100093B3C()
{
  uint64_t v4 = 0LL;
  unsigned int v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_100656F70;
  uint64_t v7 = qword_100656F70;
  if (!qword_100656F70)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    _DWORD v3[2] = sub_100093D58;
    void v3[3] = &unk_1005CAF80;
    v3[4] = &v4;
    sub_100093D58((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100093BDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_100093D58(uint64_t a1)
{
  uint64_t v3 = 0LL;
  if (!qword_100656F78)
  {
    __int128 v4 = off_1005CD038;
    uint64_t v5 = 0LL;
    qword_100656F78 = _sl_dlopen(&v4, &v3);
  }

  if (!qword_100656F78) {
    sub_100093E34(&v3);
  }
  if (v3) {
    free(v3);
  }
  Class result = objc_getClass("PKNearbyPeerPaymentReceiverCoordinator");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
    sub_100093EB0();
  }
  qword_100656F70 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

void sub_100093E34(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void *PassKitCoreLibrary(void)"));
  objc_msgSend( v2,  "handleFailureInFunction:file:lineNumber:description:",  v3,  @"SDNearbyPeerPaymentReceiverCoordinator.m",  14,  @"%s",  *a1);

  __break(1u);
}

void sub_100093EB0()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
  id v1 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "Class getPKNearbyPeerPaymentReceiverCoordinatorClass(void)_block_invoke"));
  objc_msgSend( v0,  "handleFailureInFunction:file:lineNumber:description:",  v1,  @"SDNearbyPeerPaymentReceiverCoordinator.m",  15,  @"Unable to find class %s",  "PKNearbyPeerPaymentReceiverCoordinator");

  __break(1u);
}

id sub_100094574(uint64_t a1)
{
  return [*(id *)(a1 + 32) mount];
}

void sub_100094654(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "SDNetworkResolver: bonjourCallBack returned %d",  (uint8_t *)v2,  8u);
  sub_1000147C8();
}

void sub_1000946C4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000946F4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100094CCC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100094CF4(uint64_t a1)
{
}

uint64_t SDUnlockSetupCreateRecordReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 44) |= 4u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_45;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_47;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_45:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_47:
        uint64_t v31 = 40LL;
        goto LABEL_56;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 44) |= 2u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1LL || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_51;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_51:
        uint64_t v31 = 24LL;
        goto LABEL_56;
      case 3u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 44) |= 1u;
        break;
      case 4u:
        uint64_t Data = PBReaderReadData(a2);
        uint64_t v27 = objc_claimAutoreleasedReturnValue(Data);
        uint64_t v28 = 32LL;
        goto LABEL_43;
      case 5u:
        uint64_t String = PBReaderReadString(a2);
        uint64_t v27 = objc_claimAutoreleasedReturnValue(String);
        uint64_t v28 = 16LL;
LABEL_43:
        char v30 = *(void **)(a1 + v28);
        *(void *)(a1 + v2_Block_object_dispose(va, 8) = v27;

        continue;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v24 == -1LL || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v25 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
      v14 |= (unint64_t)(v25 & 0x7F) << v22;
      if ((v25 & 0x80) == 0) {
        goto LABEL_53;
      }
      v22 += 7;
      BOOL v9 = v23++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_55;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_53:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v14) = 0;
    }
LABEL_55:
    uint64_t v31 = 8LL;
LABEL_56:
    *(_DWORD *)(a1 + v31) = v14;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100096290(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSPOSIXErrorDomain,  *(void *)(a1 + 40),  0LL));
  uint64_t v5 = kSFOperationErrorKey;
  unint64_t v6 = v2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v6,  &v5,  1LL));
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 80LL));
  [WeakRetained networkOperation:*(void *)(a1 + 32) event:10 withResults:v3];
}

void sub_100096E80( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100096EB4( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100097184( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1000971A0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = 0LL;
  return result;
}

void sub_1000971B0(uint64_t a1)
{
}

void sub_1000971B8(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
}

void sub_1000974DC(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___SDWorkgroupBrowser);
  uint64_t v2 = (void *)qword_100656F88;
  qword_100656F88 = (uint64_t)v1;
}

void sub_1000978F8(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___SDAppleIDDatabaseManager);
  uint64_t v2 = (void *)qword_100656F98;
  qword_100656F98 = (uint64_t)v1;
}

LABEL_39:
  uint64_t v5 = (void *)CFPreferencesCopyValue( @"PersonInfoCache",  @"com.apple.sharingd",  v4,  kCFPreferencesCurrentHost);
  char v30 = objc_opt_class(&OBJC_CLASS___NSData, v29);
  if ((objc_opt_isKindOfClass(v5, v30) & 1) != 0)
  {

    uint64_t v32 = objc_opt_class(&OBJC_CLASS___NSDictionary, v31);
    char v34 = objc_opt_class(&OBJC_CLASS___NSString, v33);
    unsigned int v36 = +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  v32,  v34,  objc_opt_class(&OBJC_CLASS___SFAppleIDPersonInfo, v35),  0LL);
    uint64_t v37 = objc_claimAutoreleasedReturnValue(v36);

    unsigned int v52 = 0LL;
    char v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v37,  v5,  &v52));
    unint64_t v20 = v52;
    if (v21)
    {
      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v21));
      -[SDAppleIDDatabaseManager setPersonInfoCache:](v2, "setPersonInfoCache:", v38);

      if (dword_100642730 <= 30
        && (dword_100642730 != -1 || _LogCategory_Initialize(&dword_100642730, 30LL)))
      {
        unint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(-[SDAppleIDDatabaseManager personInfoCache](v2, "personInfoCache"));
        LogPrintF( &dword_100642730,  "-[SDAppleIDDatabaseManager _readPrefs]",  30,  "%d cached person info values retrieved from defaults\n",  [v39 count]);
      }
    }

    else
    {
      if (dword_100642730 <= 60
        && (dword_100642730 != -1 || _LogCategory_Initialize(&dword_100642730, 60LL)))
      {
        LogPrintF( &dword_100642730,  "-[SDAppleIDDatabaseManager _readPrefs]",  60LL,  "### Failed to unarchive %@ pref value with error %@\n",  @"PersonInfoCache",  v20);
      }

      char v21 = 0LL;
    }
  }

  else
  {
    char v21 = 0LL;
    uint64_t v37 = (uint64_t)v18;
  }

  char v18 = (void *)v37;
  if (accountInfoStore) {
    goto LABEL_53;
  }
LABEL_70:
}

    unint64_t v7 = 0LL;
    goto LABEL_21;
  }

  unint64_t v7 = (void *)v6;
  switch(a3)
  {
    case 0LL:
      char v8 = (void *)objc_claimAutoreleasedReturnValue(+[AKURLBag sharedBag](&OBJC_CLASS___AKURLBag, "sharedBag"));
      BOOL v9 = [v8 IDMSEnvironment];
      int v10 = (void *)objc_claimAutoreleasedReturnValue([v7 altDSID]);
      SFMetricsLogUnexpectedEvent(1LL, v9, v10);

      goto LABEL_5;
    case 1LL:
      break;
    case 2LL:
      if (dword_1006435F8 <= 30
        && (dword_1006435F8 != -1 || _LogCategory_Initialize(&dword_1006435F8, 30LL)))
      {
        LogPrintF( &dword_1006435F8,  "-[SDAppleIDAgent _handleCertificateStatusUpdate:forAppleID:]",  30LL,  "Certificate status %@\n",  @"Pending");
      }

      break;
    case 3LL:
    case 4LL:
    case 5LL:
LABEL_5:
      if (dword_1006435F8 <= 60
        && (dword_1006435F8 != -1 || _LogCategory_Initialize(&dword_1006435F8, 60LL)))
      {
        else {
          int v11 = *(&off_1005CE8C8 + a3);
        }
        LogPrintF( &dword_1006435F8,  "-[SDAppleIDAgent _handleCertificateStatusUpdate:forAppleID:]",  60LL,  "### Certificate status %@, removing current identity\n",  v11);
      }

      -[SDAppleIDAgent _setCurrentAppleIDIdentity:](self, "_setCurrentAppleIDIdentity:", 0LL);
      break;
    default:
      if (dword_1006435F8 <= 60
        && (dword_1006435F8 != -1 || _LogCategory_Initialize(&dword_1006435F8, 60LL)))
      {
        else {
          char v12 = *(&off_1005CE8F8 + a3);
        }
        LogPrintF( &dword_1006435F8,  "-[SDAppleIDAgent _handleCertificateStatusUpdate:forAppleID:]",  60LL,  "### Unhandled certificate state %@\n",  v12);
      }

      break;
  }

  char v35 = 0u;
  unsigned int v36 = 0u;
  unint64_t v33 = 0u;
  char v34 = 0u;
  char v16 = v11;
  unint64_t v17 = -[objc_class countByEnumeratingWithState:objects:count:]( v16,  "countByEnumeratingWithState:objects:count:",  &v33,  v37,  16LL);
  if (v17)
  {
    char v18 = v17;
    unsigned int v19 = *(void *)v34;
    do
    {
      unint64_t v20 = 0LL;
      do
      {
        if (*(void *)v34 != v19) {
          objc_enumerationMutation(v16);
        }
        char v21 = *(void *)(*((void *)&v33 + 1) + 8LL * (void)v20);
        char v22 = (void *)objc_claimAutoreleasedReturnValue(-[objc_class objectForKeyedSubscript:](v16, "objectForKeyedSubscript:", v21));
        if (v22)
        {
          unsigned int v23 = objc_claimAutoreleasedReturnValue([v4 deviceFilter]);
          if (!v23
            || (unint64_t v24 = (void *)v23,
                char v25 = (void *)objc_claimAutoreleasedReturnValue([v4 deviceFilter]),
                uint64_t v26 = [v25 containsObject:v21],
                v25,
                v24,
                v26))
          {
            if ([v4 rssiThreshold]
              && (uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v22 bleDevice]),
                  uint64_t v28 = [v27 rssi],
                  uint64_t v29 = [v4 rssiThreshold],
                  v27,
                  (uint64_t)v28 < (uint64_t)v29))
            {
              if (dword_100643B70 <= 10
                && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 10LL)))
              {
                LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _deviceDiscoveryRequestStart:]",  10LL,  "Skip reporting device found %@ with low RSSI to %@\n",  v22,  v4);
              }
            }

            else
            {
              char v30 = (void (**)(void, void))objc_claimAutoreleasedReturnValue([v4 deviceFoundHandler]);
              ((void (**)(void, void *))v30)[2](v30, v22);
            }
          }
        }

        unint64_t v20 = (char *)v20 + 1;
      }

      while (v18 != v20);
      uint64_t v31 = -[objc_class countByEnumeratingWithState:objects:count:]( v16,  "countByEnumeratingWithState:objects:count:",  &v33,  v37,  16LL);
      char v18 = v31;
    }

    while (v31);
  }

  if ([v4 fastScanMode] == (id)1) {
    -[SDNearbyAgent _deviceDiscoveryFastScanStart:device:reason:]( v32,  "_deviceDiscoveryFastScanStart:device:reason:",  v4,  0LL,  @"Start");
  }
  -[SDNearbyAgent _update](v32, "_update");
}

  __break(1u);
  return result;
}

              char v21 = 0;
              goto LABEL_40;
            }
          }
        }
      }

      goto LABEL_36;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  sub_100187094(v5);
}

    swift_once(&qword_100644128, sub_1002D24E0);
    goto LABEL_29;
  }

  v80 = sub_100187014();
  uint64_t v38 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v80, 0LL, 0LL);
  *(_DWORD *)v81 = 10;
  *(void *)(v81 + _Block_object_dispose(va, 8) = 0xD000000000000020LL;
  *(void *)(v81 + 16) = 0x8000000100506C70LL;
  swift_willThrow(v38);
  swift_release(v12);

  sub_10018709C(v96);
LABEL_16:
  *(void *)&id v94 = v38;
  swift_errorRetain(v38);
  uint64_t v44 = sub_100183098(&qword_100645710);
  if ((swift_dynamicCast(v96, &v94, v44, &type metadata for SFAuthenticationErrorMessage, 6LL) & 1) != 0)
  {
    unsigned int v13 = LODWORD(v96[0]);
    unint64_t v45 = *(void **)&a1[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_queue];
    char v12 = (uint64_t *)v96[1];
    char v46 = (const char *)v96[2];
    unint64_t v7 = v87;
    *(void *)v87 = v45;
    char v4 = (unint64_t)v88;
    (*((void (**)(uint8_t *, void, uint64_t))v88 + 13))(v7, enum case for DispatchPredicate.onQueue(_:), v2);
    id v47 = v45;
    uint64_t v48 = _dispatchPreconditionTest(_:)(v7);
    (*(void (**)(uint8_t *, uint64_t))(v4 + 8))(v7, v2);
    if ((v48 & 1) != 0)
    {
      unint64_t v49 = (uint64_t)&a1[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate];
      swift_beginAccess(&a1[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate], &v91, 0LL, 0LL);
      sub_1001915A4(v49, (uint64_t)v96, &qword_100650630);
      if (v97)
      {
        sub_10019A6C4((uint64_t)v96, (uint64_t)&v94);
        sub_100187100((uint64_t)v96, &qword_100650630);
        uint64_t v50 = *sub_10019A708(&v94, v95);
        char v51 = a1;
        sub_1002D8ECC( v51,  v13,  v12,  (uint64_t)v46,  v50,  type metadata accessor for SDAuthenticationKeySession,  (uint64_t (*)(uint64_t))sub_1002DABB0,  (uint64_t (*)(uint64_t))sub_1002DABB0,  (uint64_t (*)(uint64_t))sub_1002DABB0,  (uint64_t (*)(uint64_t))sub_1002DABB0,  sub_1002DB064,  sub_1002DABCC);

        sub_10018709C(&v94);
      }

      else
      {
        sub_100187100((uint64_t)v96, &qword_100650630);
      }

      swift_errorRelease(v38);
      swift_bridgeObjectRelease(v46);
      return;
    }

    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }

  unsigned int v52 = *(void **)&a1[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_queue];
  uint64_t v48 = (uint64_t)v87;
  *(void *)v87 = v52;
  unsigned int v13 = (uint64_t)v88;
  (*((void (**)(uint64_t, void, uint64_t))v88 + 13))(v48, enum case for DispatchPredicate.onQueue(_:), v2);
  uint64_t v53 = v52;
  LOBYTE(v52) = _dispatchPreconditionTest(_:)(v48);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v48, v2);
  uint64_t v54 = (uint64_t)&a1[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate];
  swift_beginAccess(&a1[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate], &v91, 0LL, 0LL);
  sub_1001915A4(v54, (uint64_t)v96, &qword_100650630);
  if (v97)
  {
    sub_10019A6C4((uint64_t)v96, (uint64_t)&v94);
    sub_100187100((uint64_t)v96, &qword_100650630);
    unint64_t v55 = *sub_10019A708(&v94, v95);
    char v56 = a1;
    sub_1002D8ECC( v56,  10LL,  0LL,  0xE000000000000000LL,  v55,  type metadata accessor for SDAuthenticationKeySession,  (uint64_t (*)(uint64_t))sub_1002DABB0,  (uint64_t (*)(uint64_t))sub_1002DABB0,  (uint64_t (*)(uint64_t))sub_1002DABB0,  (uint64_t (*)(uint64_t))sub_1002DABB0,  sub_1002DB064,  sub_1002DABCC);

    sub_10018709C(&v94);
  }

  else
  {
    sub_100187100((uint64_t)v96, &qword_100650630);
  }

  swift_errorRelease(v38);
}

  swift_bridgeObjectRelease((const char *)v13, v15);
  if (qword_100644228 != -1) {
    swift_once(&qword_100644228, sub_100382454);
  }
  char v57 = type metadata accessor for Logger(0LL);
  unsigned int v58 = sub_100186DE4(v57, (uint64_t)qword_100651950);
  uint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
  uint64_t v60 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v59, v60))
  {
    unint64_t v61 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v61 = 0;
    _os_log_impl((void *)&_mh_execute_header, v59, v60, "Persisting change event batch", v61, 2u);
    char v62 = v61;
    a3 = v64;
    swift_slowDealloc(v62, -1LL, -1LL);
  }

  sub_10038584C(*a3);
}

    swift_bridgeObjectRelease_n(v13, 3LL);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v7);
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_10018C4F8(0LL, v7[2] + 1LL, 1, v7);
      unint64_t v7 = (void *)result;
    }

    char v21 = v7[2];
    unint64_t v20 = v7[3];
    if (v21 >= v20 >> 1)
    {
      uint64_t result = (uint64_t)sub_10018C4F8((void *)(v20 > 1), v21 + 1, 1, v7);
      unint64_t v7 = (void *)result;
    }

    void v7[2] = v21 + 1;
    *((_BYTE *)v7 + v21 + 32) = v16;
    if (v4) {
      goto LABEL_4;
    }
LABEL_5:
    int v10 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      goto LABEL_47;
    }
    if (v10 >= v23) {
      goto LABEL_45;
    }
    int v11 = *(void *)(v22 + 8 * v10);
    ++v6;
    if (!v11)
    {
      id v6 = v10 + 1;
      if (v10 + 1 >= v23) {
        goto LABEL_45;
      }
      int v11 = *(void *)(v22 + 8 * v6);
      if (!v11)
      {
        id v6 = v10 + 2;
        if (v10 + 2 >= v23) {
          goto LABEL_45;
        }
        int v11 = *(void *)(v22 + 8 * v6);
        if (!v11)
        {
          id v6 = v10 + 3;
          if (v10 + 3 >= v23) {
            goto LABEL_45;
          }
          int v11 = *(void *)(v22 + 8 * v6);
          if (!v11)
          {
            char v12 = v10 + 4;
            if (v12 >= v23)
            {
LABEL_45:
              swift_release(a1);
              return (uint64_t)v7;
            }

            int v11 = *(void *)(v22 + 8 * v12);
            id v6 = v12;
            if (!v11) {
              break;
            }
          }
        }
      }
    }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    __break(1u);
LABEL_40:
    swift_once(&qword_1006443B0, sub_100433674);
  }

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void sub_100098390(_Unwind_Exception *a1)
{
}

void sub_100098410(_Unwind_Exception *a1)
{
}

void sub_10009855C(_Unwind_Exception *a1)
{
}

void sub_100098C04(_Unwind_Exception *a1)
{
}

void sub_100098D40(_Unwind_Exception *a1)
{
}

void sub_100098EA4(_Unwind_Exception *a1)
{
}

void sub_100099018(_Unwind_Exception *a1)
{
}

void sub_1000990F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_100099164(_Unwind_Exception *a1)
{
}

void sub_1000991D8(_Unwind_Exception *a1)
{
}

void sub_10009950C(_Unwind_Exception *a1)
{
}

void sub_1000996D0(_Unwind_Exception *a1)
{
}

void sub_100099A70(_Unwind_Exception *a1)
{
}

void sub_100099D98(_Unwind_Exception *a1)
{
}

void sub_100099E6C(_Unwind_Exception *a1)
{
}

void sub_100099F48(uint64_t a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, *(CFNotificationName *)(a1 + 32), 0LL, 0LL, 1u);
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v3 postNotificationName:*(void *)(a1 + 32) object:0];
}

void sub_10009A080(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___SDXPCSession);
  uint64_t v2 = (void *)qword_100656FA0;
  qword_100656FA0 = (uint64_t)v1;
}

void sub_10009A2C4(os_log_t log)
{
  *(_WORD *)id v1 = 0;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "SDXPCSession:  Starting xpc session....",  v1,  2u);
}

void sub_10009A344(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___SDRemoteInteractionAgent);
  uint64_t v2 = (void *)qword_100656FB8;
  qword_100656FB8 = (uint64_t)v1;
}

id sub_10009A640(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (!v2[20])
  {
    id v3 = objc_opt_new(&OBJC_CLASS___CUSystemMonitor);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 160);
    *(void *)(v4 + 16sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = v3;

    [*(id *)(*(void *)(a1 + 32) + 160) setDispatchQueue:*(void *)(*(void *)(a1 + 32) + 176)];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    _DWORD v10[2] = sub_10009A76C;
    v10[3] = &unk_1005CB2F8;
    uint64_t v11 = *(void *)(a1 + 32);
    [*(id *)(v11 + 160) setScreenLockedChangedHandler:v10];
    uint64_t v6 = *(void *)(a1 + 32);
    unint64_t v7 = *(void **)(v6 + 160);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    _DWORD v9[2] = sub_10009A774;
    v9[3] = &unk_1005CB2F8;
    v9[4] = v6;
    [v7 activateWithCompletion:v9];
    uint64_t v2 = *(void **)(a1 + 32);
  }

  return [v2 prefsChanged];
}

id sub_10009A76C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _clientDeviceLockStatusChanged];
}

id sub_10009A774(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _clientDeviceLockStatusChanged];
}

id sub_10009A7D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 160);
  *(void *)(v2 + 16sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = 0LL;

  [*(id *)(a1 + 32) _commonEnsureStopped];
  [*(id *)(a1 + 32) _clientEnsureStopped];
  return [*(id *)(a1 + 32) _serverEnsureStopped];
}

uint64_t sub_10009ABA0(uint64_t result)
{
  uint64_t v1 = result;
  if (dword_100642860 <= 40)
  {
    if (dword_100642860 != -1 || (uint64_t result = _LogCategory_Initialize(&dword_100642860, 40LL), (_DWORD)result))
    {
      uint64_t v2 = "yes";
      if (*(_BYTE *)(*(void *)(v1 + 32) + 168LL)) {
        id v3 = "yes";
      }
      else {
        id v3 = "no";
      }
      if (!*(_BYTE *)(v1 + 40)) {
        uint64_t v2 = "no";
      }
      uint64_t result = LogPrintF( &dword_100642860,  "-[SDRemoteInteractionAgent setPreventNotifications:]_block_invoke",  40LL,  "Prevent notifications: %s -> %s\n",  v3,  v2);
    }
  }

  *(_BYTE *)(*(void *)(v1 + 32) + 168LL) = *(_BYTE *)(v1 + 40);
  return result;
}

id sub_10009AFA8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

id sub_10009B06C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

void sub_10009B234(id a1, SFSession *a2, unsigned int a3, NSDictionary *a4)
{
  uint64_t v4 = a4;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  Typeduint64_t Value = CFDictionaryGetTypedValue(v4, @"rp", TypeID, 0LL);
  id v8 = (id)objc_claimAutoreleasedReturnValue(TypedValue);

  if (v8)
  {
    unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[SDSharedRemoteTextInputClient sharedClient]( &OBJC_CLASS___SDSharedRemoteTextInputClient,  "sharedClient"));
    [v7 handleTextInputData:v8];
  }
}

void sub_10009B2B0(id a1, SFSession *a2, unsigned int a3, NSDictionary *a4, id a5)
{
  if (a5) {
    (*((void (**)(id, void, void, void))a5 + 2))(a5, 0LL, 0LL, 0LL);
  }
}

id sub_10009B2D0(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_legacy_serverHandleEvent:", a2);
}

id sub_10009B2DC(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_legacy_serverHandleRequest:", a2);
}

void sub_10009B2E8(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2)
  {
    if (dword_100642860 <= 30)
    {
      uint64_t v6 = v2;
      if (dword_100642860 != -1 || (int v4 = _LogCategory_Initialize(&dword_100642860, 30LL), v3 = v6, v4))
      {
        LogPrintF( &dword_100642860,  "-[SDRemoteInteractionAgent _serverEnsureStarted]_block_invoke_5",  30LL,  "### Control service activate failed: %@\n",  v3);
LABEL_8:

        return;
      }
    }
  }

  else if (dword_100642860 <= 30)
  {
    uint64_t v6 = 0LL;
    if (dword_100642860 != -1 || (v5 = _LogCategory_Initialize(&dword_100642860, 30LL), id v3 = 0LL, v5))
    {
      LogPrintF( &dword_100642860,  "-[SDRemoteInteractionAgent _serverEnsureStarted]_block_invoke_5",  30LL,  "Control service activated\n");
      goto LABEL_8;
    }
  }
}

id sub_10009C47C(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8LL);
  if (v2)
  {
    id v3 = v2;
    dispatch_source_cancel(v3);
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(void **)(v4 + 8);
    *(void *)(v4 + _Block_object_dispose(va, 8) = 0LL;
  }

  return [*(id *)(*(void *)(a1 + 32) + 48) setAdvertiseRate:40];
}

id sub_10009C7C4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) advertisingTimerFired];
}

void sub_10009C9A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

id sub_10009C9B8(uint64_t a1, uint64_t a2)
{
  id result = objc_retainBlock(*(id *)(a2 + 40));
  *(void *)(a1 + 4sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = result;
  return result;
}

void sub_10009C9E0(uint64_t a1)
{
}

void sub_10009C9E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  id v6 = v3;
  if (v4) {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);
  }
  int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerDevice]);
  if (v5)
  {
    [*(id *)(a1 + 40) clientNotificationUpdateForDevice:v5 rtiData:v6];
  }

  else if (dword_100642860 <= 60 {
         && (dword_100642860 != -1 || _LogCategory_Initialize(&dword_100642860, 60LL)))
  }
  {
    LogPrintF(&dword_100642860, "-[SDRemoteInteractionAgent sessionStart:]_block_invoke", 60LL, "### No peer device?\n");
  }
}

void sub_10009CF9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  if (dword_100642860 <= 10)
  {
    if (dword_100642860 != -1 || (v5 = _LogCategory_Initialize(&dword_100642860, 10LL), id v3 = v6, v5))
    {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 bleDevice]);
      LogPrintF( &dword_100642860,  "-[SDRemoteInteractionAgent _clientEnsureStarted]_block_invoke",  10LL,  "BLE RIA Found: %@\n",  v4);

      id v3 = v6;
    }
  }

  [*(id *)(a1 + 32) _clientDeviceFound:v3];
}

void sub_10009D048(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  if (dword_100642860 <= 10)
  {
    if (dword_100642860 != -1 || (v5 = _LogCategory_Initialize(&dword_100642860, 10LL), id v3 = v6, v5))
    {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 bleDevice]);
      LogPrintF( &dword_100642860,  "-[SDRemoteInteractionAgent _clientEnsureStarted]_block_invoke_2",  10LL,  "BLE RIA Lost: %@\n",  v4);

      id v3 = v6;
    }
  }

  [*(id *)(a1 + 32) _clientDeviceLost:v3];
}

void sub_10009D0F4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v8 = v5;
  if (dword_100642860 <= 10)
  {
    if (dword_100642860 != -1 || (v7 = _LogCategory_Initialize(&dword_100642860, 10LL), id v5 = v8, v7))
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bleDevice]);
      LogPrintF( &dword_100642860,  "-[SDRemoteInteractionAgent _clientEnsureStarted]_block_invoke_3",  10LL,  "BLE RIA Changed: %@, %#{flags}\n",  v6,  a3,  &unk_1004CAF2D);

      id v5 = v8;
    }
  }

  [*(id *)(a1 + 32) _clientDeviceFound:v5];
}

void sub_10009D1B8(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2)
  {
    if (dword_100642860 <= 30)
    {
      id v6 = v2;
      if (dword_100642860 != -1 || (int v4 = _LogCategory_Initialize(&dword_100642860, 30LL), v3 = v6, v4))
      {
        LogPrintF( &dword_100642860,  "-[SDRemoteInteractionAgent _clientEnsureStarted]_block_invoke_4",  30LL,  "### Discovery start failed: %@\n",  v3);
LABEL_8:

        return;
      }
    }
  }

  else if (dword_100642860 <= 30)
  {
    id v6 = 0LL;
    if (dword_100642860 != -1 || (v5 = _LogCategory_Initialize(&dword_100642860, 30LL), id v3 = 0LL, v5))
    {
      LogPrintF( &dword_100642860,  "-[SDRemoteInteractionAgent _clientEnsureStarted]_block_invoke_4",  30LL,  "Discovery started\n");
      goto LABEL_8;
    }
  }
}

void sub_10009D284(id a1)
{
  if (dword_100642860 <= 90 && (dword_100642860 != -1 || _LogCategory_Initialize(&dword_100642860, 90LL))) {
    LogPrintF( &dword_100642860,  "-[SDRemoteInteractionAgent _clientEnsureStarted]_block_invoke_5",  90LL,  "### ClinkClient interrupted\n");
  }
}

void sub_10009D2E4(id a1)
{
  if (dword_100642860 <= 30 && (dword_100642860 != -1 || _LogCategory_Initialize(&dword_100642860, 30LL))) {
    LogPrintF( &dword_100642860,  "-[SDRemoteInteractionAgent _clientEnsureStarted]_block_invoke_6",  30LL,  "ClinkClient invalidated\n");
  }
}

id sub_10009D344(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _clientClinkDeviceFound:a2];
}

id sub_10009D350(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _clientClinkDeviceLost:a2];
}

id sub_10009D35C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _clientClinkDeviceChanged:a2];
}

void sub_10009D368(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2)
  {
    if (dword_100642860 <= 90)
    {
      id v6 = v2;
      if (dword_100642860 != -1 || (int v4 = _LogCategory_Initialize(&dword_100642860, 90LL), v3 = v6, v4))
      {
        LogPrintF( &dword_100642860,  "-[SDRemoteInteractionAgent _clientEnsureStarted]_block_invoke_10",  90LL,  "### CompanionLink start failed: %@\n",  v3);
LABEL_8:

        return;
      }
    }
  }

  else if (dword_100642860 <= 30)
  {
    id v6 = 0LL;
    if (dword_100642860 != -1 || (v5 = _LogCategory_Initialize(&dword_100642860, 30LL), id v3 = 0LL, v5))
    {
      LogPrintF( &dword_100642860,  "-[SDRemoteInteractionAgent _clientEnsureStarted]_block_invoke_10",  30LL,  "CompanionLink started\n");
      goto LABEL_8;
    }
  }
}

LABEL_35:
}

      -[NSMutableDictionary setObject:forKeyedSubscript:](autoFillRequests, "setObject:forKeyedSubscript:", v13, v10);
      tvNotifCenter = self->_tvNotifCenter;
      goto LABEL_40;
    case 6u:
      char v18 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_watchKeyboardRequests,  "objectForKeyedSubscript:",  v10));

      if (v18
        && dword_100643408 <= 30
        && (dword_100643408 != -1 || _LogCategory_Initialize(&dword_100643408, 30LL)))
      {
        LogPrintF( &dword_100643408,  "-[SDNotificationManager _addRequestWithID:content:type:isHomePodMini:]",  30LL,  "Duplicate watch needsKeyboard request");
      }

      watchKeyboardRequests = self->_watchKeyboardRequests;
      if (!watchKeyboardRequests)
      {
        uint64_t v31 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        uint64_t v32 = self->_watchKeyboardRequests;
        self->_watchKeyboardRequests = v31;

        watchKeyboardRequests = self->_watchKeyboardRequests;
      }

      -[NSMutableDictionary setObject:forKeyedSubscript:]( watchKeyboardRequests,  "setObject:forKeyedSubscript:",  v13,  v10);
      tvNotifCenter = self->_watchNotifCenter;
LABEL_40:
      char v22 = tvNotifCenter;
LABEL_41:
      if (v22)
      {
        if (dword_100643408 <= 30
          && (dword_100643408 != -1 || _LogCategory_Initialize(&dword_100643408, 30LL)))
        {
          if (v14 > 4) {
            unint64_t v33 = @"?";
          }
          else {
            unint64_t v33 = *(&off_1005CE350 + (int)v14);
          }
          LogPrintF( &dword_100643408,  "-[SDNotificationManager _addRequestWithID:content:type:isHomePodMini:]",  30LL,  "Adding %@ notification request from %@\n",  v33,  v10);
        }

        v34[0] = _NSConcreteStackBlock;
        v34[1] = 3221225472LL;
        v34[2] = sub_1000EFA8C;
        v34[3] = &unk_1005CE2C8;
        char v35 = v13;
        unsigned int v36 = v11;
        uint64_t v37 = self;
        uint64_t v38 = v10;
        unint64_t v39 = a5;
        char v40 = v6;
        -[UNUserNotificationCenter addNotificationRequest:withCompletionHandler:]( v22,  "addNotificationRequest:withCompletionHandler:",  v35,  v34);
      }

      else
      {
        if (dword_100643408 <= 90
          && (dword_100643408 != -1 || _LogCategory_Initialize(&dword_100643408, 90LL)))
        {
          LogPrintF( &dword_100643408,  "-[SDNotificationManager _addRequestWithID:content:type:isHomePodMini:]",  90LL,  "### No notification center for request");
        }

  NSAppendPrintF(&v210, ", iTunes '%@' (%s)", v37, v38);
  char v40 = v210;

  objc_autoreleasePoolPop(v28);
  v209 = v40;
  char v41 = (void *)objc_claimAutoreleasedReturnValue(-[CUSystemMonitor meDeviceFMFDeviceID](self->_systemMonitor, "meDeviceFMFDeviceID"));
  unsigned int v42 = (void *)objc_claimAutoreleasedReturnValue(-[CUSystemMonitor meDeviceIDSDeviceID](self->_systemMonitor, "meDeviceIDSDeviceID"));
  uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(-[CUSystemMonitor meDeviceName](self->_systemMonitor, "meDeviceName"));
  NSAppendPrintF(&v209, ", MeDev F<%.8@> I<%.8@> '%@'", v41, v42, v43);
  uint64_t v44 = v209;

  v208 = v44;
  NSAppendPrintF(&v208, "\n");
  unint64_t v45 = v208;

  char v46 = self;
  if (self->_autoUnlockActive)
  {
    v207 = v45;
    NSAppendPrintF(&v207, "AutoUnlocking:         YES\n");
    id v47 = v207;

    unint64_t v45 = v47;
    char v46 = self;
  }

  if (v46->_boostNearbyInfo)
  {
    v206 = v45;
    NSAppendPrintF(&v206, "Boost Nearby Info:     YES\n");
    uint64_t v48 = v206;

    unint64_t v45 = v48;
    char v46 = self;
  }

  if (-[NSMutableDictionary count](v46->_bleConnections, "count"))
  {
    v205 = v45;
    NSAppendPrintF(&v205, "BLE Connections:       %ld\n", -[NSMutableDictionary count](self->_bleConnections, "count"));
    unint64_t v49 = v205;

    unint64_t v45 = v49;
  }

  if (-[NSMutableSet count](self->_bleDiagnosticModeClients, "count"))
  {
    v204 = v45;
    NSAppendPrintF( &v204,  "BLE Diag Clients:      %ld\n",  -[NSMutableSet count](self->_bleDiagnosticModeClients, "count"));
    uint64_t v50 = v204;

    unint64_t v45 = v50;
  }

  char v51 = self;
  bleNearbyActionAdvertiser = self->_bleNearbyActionAdvertiser;
  if (bleNearbyActionAdvertiser)
  {
    v203 = v45;
    uint64_t v53 = "on";
    if (!self->_bleNearbyActionAdvertiseLingerTimer) {
      uint64_t v53 = "off";
    }
    NSAppendPrintF(&v203, "BLE Action Advertiser: %@, linger %s\n", bleNearbyActionAdvertiser, v53);
    uint64_t v54 = v203;

    unint64_t v45 = v54;
    char v51 = self;
  }

  bleNearbyActionScanner = v51->_bleNearbyActionScanner;
  if (bleNearbyActionScanner)
  {
    v202 = v45;
    NSAppendPrintF(&v202, "BLE Action Scanner:    %@\n", bleNearbyActionScanner);
    char v56 = v202;

    unint64_t v45 = v56;
    char v51 = self;
  }

  bleNearbyInfoAdvertiser = v51->_bleNearbyInfoAdvertiser;
  if (bleNearbyInfoAdvertiser)
  {
    v201 = v45;
    NSAppendPrintF( &v201,  "BLE Info Advertiser:   %@, advertiseReason: %@\n",  bleNearbyInfoAdvertiser,  v51->_bleNearbyInfoAdvertiseReason);
    unsigned int v58 = v201;

    unint64_t v45 = v58;
    char v51 = self;
  }

  bleNearbyInfoScanner = v51->_bleNearbyInfoScanner;
  if (bleNearbyInfoScanner)
  {
    v200 = v45;
    NSAppendPrintF(&v200, "BLE Info Scanner:      %@\n", bleNearbyInfoScanner);
    uint64_t v60 = v200;

    unint64_t v45 = v60;
    char v51 = self;
  }

  bleProximityPairingScanner = v51->_bleProximityPairingScanner;
  if (bleProximityPairingScanner)
  {
    v199 = v45;
    NSAppendPrintF(&v199, "BLE Prox Scanner:      %@\n", bleProximityPairingScanner);
    char v62 = v199;

    unint64_t v45 = v62;
    char v51 = self;
  }

  if (v51->_enhancedDiscovery)
  {
    v198 = v45;
    NSAppendPrintF(&v198, "BLE enhanced discovery: assertions: %s\n", "yes");
    uint64_t v63 = v198;

    unint64_t v45 = v63;
    char v51 = self;
  }

  v197 = v45;
  BOOL v64 = -[SDNearbyAgent _allowEnhancedDiscovery](v51, "_allowEnhancedDiscovery");
  uint64_t v65 = "no";
  if (self->_enhancedDiscoveryShouldRun) {
    uint64_t v65 = "yes";
  }
  NSAppendPrintF(&v197, "BLE enhanced discovery:        allowed: %d should run:%s\n", v64, v65);
  __int128 v66 = v197;

  __int128 v67 = self;
  unlockBtPipe = self->_unlockBtPipe;
  if (unlockBtPipe)
  {
    v196 = v66;
    NSAppendPrintF(&v196, "BT Pipe:               %@\n", unlockBtPipe);
    __int128 v69 = v196;

    __int128 v66 = v69;
    __int128 v67 = self;
  }

  v195 = v66;
  NSAppendPrintF(&v195, "Device Discovery:      %ld request(s)", -[NSMutableSet count](v67->_ddRequests, "count"));
  uint64_t v70 = v195;

  uint64_t v71 = self;
  if (self->_coreDeviceEnabled)
  {
    v194 = v70;
    NSAppendPrintF(&v194, ", CoreDevice");
    uint64_t v72 = v194;

    uint64_t v70 = v72;
    uint64_t v71 = self;
  }

  if (v71->_ddNearbyActionEnabled)
  {
    v193 = v70;
    NSAppendPrintF(&v193, ", Action");
    uint64_t v73 = v193;

    uint64_t v70 = v73;
    uint64_t v71 = self;
  }

  if (v71->_ddNearbyActionScreenOff)
  {
    v192 = v70;
    NSAppendPrintF(&v192, ", NAScreenOff");
    __int16 v74 = v192;

    uint64_t v70 = v74;
    uint64_t v71 = self;
  }

  if (v71->_ddNearbyInfoEnabled)
  {
    v191 = v70;
    NSAppendPrintF(&v191, ", Info");
    id v75 = v191;

    uint64_t v70 = v75;
    uint64_t v71 = self;
  }

  if (v71->_ddNearbyInfoScreenOff)
  {
    v190 = v70;
    NSAppendPrintF(&v190, ", NIScreenOff");
    uint64_t v76 = v190;

    uint64_t v70 = v76;
    uint64_t v71 = self;
  }

  if (v71->_ddProximityPairingEnabled)
  {
    v189 = v70;
    NSAppendPrintF(&v189, ", Prox");
    uint64_t v77 = v189;

    uint64_t v70 = v77;
    uint64_t v71 = self;
  }

  if (v71->_ddProximityPairingScreenOff)
  {
    v188 = v70;
    NSAppendPrintF(&v188, ", PPScreenOff");
    v78 = v188;

    uint64_t v70 = v78;
    uint64_t v71 = self;
  }

  if (v71->_fitnessPairingEnabled)
  {
    v187 = v70;
    NSAppendPrintF(&v187, ", FitPair");
    uint64_t v79 = v187;

    uint64_t v70 = v79;
    uint64_t v71 = self;
  }

  if (v71->_sessionPairingEnabled)
  {
    v186 = v70;
    NSAppendPrintF(&v186, ", SessionPair");
    v80 = v186;

    uint64_t v70 = v80;
    uint64_t v71 = self;
  }

  v185 = v70;
  NSAppendPrintF(&v185, ", %ld Action", -[NSMutableDictionary count](v71->_ddNearbyActionDevices, "count"));
  v81 = v185;

  v184 = v81;
  NSAppendPrintF(&v184, ", %ld Info", -[NSMutableDictionary count](self->_ddNearbyInfoDevices, "count"));
  v82 = v184;

  v183 = v82;
  NSAppendPrintF(&v183, ", %ld Prox", -[NSMutableDictionary count](self->_ddProximityPairingDevices, "count"));
  v83 = v183;

  v179 = 0LL;
  v180 = &v179;
  v181 = 0x2020000000LL;
  v182 = 0;
  idDevices = self->_idDevices;
  v178[0] = _NSConcreteStackBlock;
  v178[1] = 3221225472LL;
  v178[2] = sub_100150084;
  v178[3] = &unk_1005CFA48;
  v178[4] = &v179;
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](idDevices, "enumerateKeysAndObjectsUsingBlock:", v178);
  v177 = v83;
  NSAppendPrintF( &v177,  ", %u of %ld Identified",  *((_DWORD *)v180 + 6),  -[NSMutableDictionary count](self->_idDevices, "count"));
  uint64_t v85 = v177;

  v176 = v85;
  NSAppendPrintF(&v176, "\n");
  uint64_t v86 = v176;

  v87 = objc_alloc(&OBJC_CLASS___IDSService);
  v141 = -[IDSService initWithService:](v87, "initWithService:", IDSServiceNameiMessage);
  v175 = v86;
  id v88 = "on";
  if (!self->_idsService) {
    id v88 = "off";
  }
  v139 = v88;
  if (-[SDNearbyAgent idsIsSignedIn](self, "idsIsSignedIn")) {
    uint64_t v89 = "signed in";
  }
  else {
    uint64_t v89 = "not signed in";
  }
  id v90 = (void *)objc_claimAutoreleasedReturnValue(-[SDNearbyAgent idsDeviceArray](self, "idsDeviceArray"));
  id v91 = [v90 count];
  uint64_t v92 = -[SDNearbyAgent _idsAppleTVCount](self, "_idsAppleTVCount");
  v93 = -[SDNearbyAgent _idsContinuityDeviceCount](self, "_idsContinuityDeviceCount");
  id v94 = -[SDNearbyAgent _idsHomePodCount](self, "_idsHomePodCount");
  if (v141) {
    uint64_t v95 = "on";
  }
  else {
    uint64_t v95 = "off";
  }
  uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue(-[IDSService devices](v141, "devices"));
  NSAppendPrintF( &v175,  "IDS Service:           %s, %s, %ld device(s), %d AppleTV, %d Continuity, %d HomePod, iMessage %s, %ld device(s) ALEncrypted %d\n",  v139,  v89,  v91,  v92,  v93,  v94,  v95,  [v96 count],  -[SDNearbyAgent _idsShouldEncryptActivityLevel](self, "_idsShouldEncryptActivityLevel"));
  v97 = v175;

  v174 = v97;
  NSAppendPrintF( &v174,  "Services:              %ld, %ld sessions, %ld setup sessions\n",  -[NSMutableDictionary count](self->_services, "count"),  -[NSMutableDictionary count](self->_sessions, "count"),  -[NSMutableDictionary count](self->_setupSessions, "count"));
  v98 = v174;

  systemService = self->_systemService;
  if (systemService)
  {
    v173 = v98;
    NSAppendPrintF(&v173, "SystemService:         %@\n", systemService);
    v100 = v173;

    v98 = v100;
  }

  v172 = v98;
  NSAppendPrintF(&v172, "\n");
  int v101 = v172;

  v170 = 0u;
  v171 = 0u;
  v168 = 0u;
  v169 = 0u;
  v102 = (void *)CFPrefs_CopyKeys(@"com.apple.Sharing", 0LL);
  __int16 v103 = [v102 countByEnumeratingWithState:&v168 objects:v218 count:16];
  if (!v103) {
    goto LABEL_100;
  }
  v104 = 0;
  NSErrorUserInfoKey v105 = *(void *)v169;
  do
  {
    for (unint64_t i = 0LL; i != v103; unint64_t i = (char *)i + 1)
    {
      if (*(void *)v169 != v105) {
        objc_enumerationMutation(v102);
      }
      v107 = *(void *)(*((void *)&v168 + 1) + 8LL * (void)i);
      v108 = objc_opt_class(&OBJC_CLASS___NSString);
      if ((objc_opt_isKindOfClass(v107, v108) & 1) != 0)
      {
        v109 = (void *)CFPrefs_CopyTypedValue(@"com.apple.Sharing", v107, 0LL, 0LL);
        v167 = v101;
        NSAppendPrintF(&v167, "Pref: '%@' = '%@'\n", v107, v109);
        v110 = v167;

        ++v104;
        int v101 = v110;
      }
    }

    __int16 v103 = [v102 countByEnumeratingWithState:&v168 objects:v218 count:16];
  }

  while (v103);

  if (v104 >= 1)
  {
    v166 = v101;
    NSAppendPrintF(&v166, "\n");
    v102 = v101;
    int v101 = v166;
LABEL_100:
  }

  if (-[NSMutableDictionary count](self->_bleConnections, "count"))
  {
    v165 = v101;
    NSAppendPrintF(&v165, "-- BLE Connections --\n");
    v111 = v165;

    v163 = 0u;
    v164 = 0u;
    v161 = 0u;
    v162 = 0u;
    v112 = self->_bleConnections;
    v113 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v112,  "countByEnumeratingWithState:objects:count:",  &v161,  v217,  16LL);
    if (v113)
    {
      v114 = *(void *)v162;
      do
      {
        v115 = 0LL;
        v116 = v111;
        do
        {
          if (*(void *)v162 != v114) {
            objc_enumerationMutation(v112);
          }
          v117 = *(void *)(*((void *)&v161 + 1) + 8LL * (void)v115);
          v160 = v116;
          v118 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_bleConnections,  "objectForKeyedSubscript:",  v117));
          NSAppendPrintF(&v160, "%@\n", v118);
          v111 = v160;

          v115 = (char *)v115 + 1;
          v116 = v111;
        }

        while (v113 != v115);
        v113 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v112,  "countByEnumeratingWithState:objects:count:",  &v161,  v217,  16LL);
      }

      while (v113);
    }

    v159 = v111;
    NSAppendPrintF(&v159, "\n");
    int v101 = v159;
  }

  if (-[NSMutableDictionary count](self->_setupSessions, "count"))
  {
    v158 = v101;
    NSAppendPrintF(&v158, "-- Setup Sessions --\n");
    v119 = v158;

    v156 = 0u;
    v157 = 0u;
    v154 = 0u;
    v155 = 0u;
    v120 = self->_setupSessions;
    v121 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v120,  "countByEnumeratingWithState:objects:count:",  &v154,  v216,  16LL);
    if (v121)
    {
      v122 = *(void *)v155;
      do
      {
        v123 = 0LL;
        v124 = v119;
        do
        {
          if (*(void *)v155 != v122) {
            objc_enumerationMutation(v120);
          }
          v125 = *(void *)(*((void *)&v154 + 1) + 8LL * (void)v123);
          v153 = v124;
          v126 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_setupSessions,  "objectForKeyedSubscript:",  v125));
          NSAppendPrintF(&v153, "%@ -- %@\n", v125, v126);
          v119 = v153;

          v123 = (char *)v123 + 1;
          v124 = v119;
        }

        while (v121 != v123);
        v121 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v120,  "countByEnumeratingWithState:objects:count:",  &v154,  v216,  16LL);
      }

      while (v121);
    }

    v152 = v119;
    NSAppendPrintF(&v152, "\n");
    int v101 = v152;
  }

  if (-[NSMutableDictionary count](self->_sessions, "count"))
  {
    v151 = v101;
    NSAppendPrintF(&v151, "-- Sessions --\n");
    v127 = v151;

    v149 = 0u;
    v150 = 0u;
    v147 = 0u;
    v148 = 0u;
    v128 = self->_sessions;
    v129 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v128,  "countByEnumeratingWithState:objects:count:",  &v147,  v215,  16LL);
    if (v129)
    {
      v130 = *(void *)v148;
      do
      {
        v131 = 0LL;
        v132 = v127;
        do
        {
          if (*(void *)v148 != v130) {
            objc_enumerationMutation(v128);
          }
          v133 = *(void *)(*((void *)&v147 + 1) + 8LL * (void)v131);
          v146 = v132;
          v134 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_sessions,  "objectForKeyedSubscript:",  v133));
          NSAppendPrintF(&v146, "%@ -- %@\n", v133, v134);
          v127 = v146;

          v131 = (char *)v131 + 1;
          v132 = v127;
        }

        while (v129 != v131);
        v129 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v128,  "countByEnumeratingWithState:objects:count:",  &v147,  v215,  16LL);
      }

      while (v129);
    }

    v145 = v127;
    NSAppendPrintF(&v145, "\n");
    int v101 = v145;
  }

  v144 = v101;
  NSAppendPrintF(&v144, "-- Devices --\n");
  v135 = v144;

  v143 = v135;
  -[SDNearbyAgent idsDevicesAppendDescription:](self, "idsDevicesAppendDescription:", &v143);
  v136 = v143;

  v137 = v136;
  _Block_object_dispose(&v179, 8);

  return (NSString *)v137;
}

    unsigned int v23 = 0LL;
    goto LABEL_36;
  }

  char v22 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "aida_tokenForService:", @"com.apple.gs.authagent.auth"));
  unsigned int v23 = (void *)v22;
  if (v18 && v22)
  {
    if (dword_100643C58 <= 50
      && (dword_100643C58 != -1 || _LogCategory_Initialize(&dword_100643C58, 50LL)))
    {
      LogPrintF( &dword_100643C58,  "void SDAppleIDGetGSToken(NSString * _Nonnull __strong, dispatch_queue_t  _Nullable __strong, SDAppleIDGSTokenCom pletion  _Nullable __strong)",  50LL,  "Reusing Account-cached altDSID and gstoken for %{mask}\n",  v13);
    }

    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472LL;
    v48[2] = sub_100171578;
    v48[3] = &unk_1005CF838;
    char v51 = v7;
    unint64_t v24 = v18;
    unint64_t v49 = v24;
    int v5 = v23;
    uint64_t v50 = v5;
    dispatch_async(v10, v48);

    uint64_t v26 = 0LL;
    char v25 = 0LL;
    unint64_t v15 = 0LL;
    uint64_t v27 = 0LL;
    uint64_t v28 = 0LL;
    goto LABEL_62;
  }

  if (dword_100643C58 <= 90 && (dword_100643C58 != -1 || _LogCategory_Initialize(&dword_100643C58, 90LL))) {
    LogPrintF( &dword_100643C58,  "void SDAppleIDGetGSToken(NSString * _Nonnull __strong, dispatch_queue_t  _Nullable __strong, SDAppleIDGSTokenCompl etion  _Nullable __strong)",  90LL,  "### aida_tokenForService failed altDSID=%d, accountToken=%d\n",  v18 != 0LL,  v23 != 0LL);
  }
LABEL_36:
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t v31 = sub_1000ED890();
  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
  [v26 timeIntervalSinceDate:v32];
  char v34 = fabs(v33);

  if (v34 <= 5.0)
  {
    int v5 = v23;
    unint64_t v24 = v18;
    if (dword_100643C58 <= 50
      && (dword_100643C58 != -1 || _LogCategory_Initialize(&dword_100643C58, 50LL)))
    {
      LogPrintF( &dword_100643C58,  "void SDAppleIDGetGSToken(NSString * _Nonnull __strong, dispatch_queue_t  _Nullable __strong, SDAppleIDGSTokenCom pletion  _Nullable __strong)",  50LL,  "Throttling request that's too soon after user cancel (%f)\n",  v34);
    }

    uint64_t v27 = 0LL;
    unsigned int v36 = 201229LL;
    goto LABEL_46;
  }

  char v35 = BYSetupAssistantNeedsToRun();
  if (!v35) {
    goto LABEL_54;
  }
  if (dword_100643C58 <= 50)
  {
    if (dword_100643C58 != -1 || _LogCategory_Initialize(&dword_100643C58, 50LL)) {
      LogPrintF( &dword_100643C58,  "void SDAppleIDGetGSToken(NSString * _Nonnull __strong, dispatch_queue_t  _Nullable __strong, SDAppleIDGSTokenCom pletion  _Nullable __strong)",  50LL,  "Requesting silent GS token auth because we're in a Setup Assistant\n");
    }
LABEL_54:
    if (dword_100643C58 <= 50
      && (dword_100643C58 != -1 || _LogCategory_Initialize(&dword_100643C58, 50LL)))
    {
      LogPrintF( &dword_100643C58,  "void SDAppleIDGetGSToken(NSString * _Nonnull __strong, dispatch_queue_t  _Nullable __strong, SDAppleIDGSTokenCom pletion  _Nullable __strong)",  50LL,  "Asking server for GS token for %@\n",  v13);
    }
  }

  int v5 = v23;
  uint64_t v28 = objc_alloc_init(&OBJC_CLASS___AKAppleIDAuthenticationContext);
  [v28 setServiceType:1];
  [v28 setServiceIdentifier:@"com.apple.gs.authagent.auth"];
  [v28 setUsername:v13];
  [v28 _setPassword:0];
  unint64_t v24 = v18;
  [v28 setAltDSID:v18];
  [v28 setIsUsernameEditable:0];
  if (v35) {
    [v28 setAuthenticationType:1];
  }
  [v28 setShouldUpdatePersistentServiceTokens:1];
  uint64_t v27 = objc_alloc_init(&OBJC_CLASS___AKAppleIDAuthenticationController);
  if (v28)
  {
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472LL;
    v43[2] = sub_100171590;
    v43[3] = &unk_1005D0748;
    unint64_t v24 = v24;
    uint64_t v44 = v24;
    unsigned int v13 = v13;
    unint64_t v45 = v13;
    id v47 = v7;
    char v46 = v10;
    [v27 authenticateWithContext:v28 completion:v43];

    char v25 = 0LL;
    unint64_t v15 = 0LL;
LABEL_62:
    v56[0] = 0;
    goto LABEL_63;
  }

  unsigned int v36 = 4294960534LL;
LABEL_46:
  v56[0] = v36;
  if (dword_100643C58 <= 90)
  {
    if (dword_100643C58 == -1)
    {
      unsigned int v36 = v56[0];
    }

    LogPrintF( &dword_100643C58,  "void SDAppleIDGetGSToken(NSString * _Nonnull __strong, dispatch_queue_t  _Nullable __strong, SDAppleIDGSTokenCompl etion  _Nullable __strong)",  90LL,  "### Request GS token for %{mask} failed: %d\n",  v39,  v36);
  }

      char v25 = (v32 - 1) & v32;
      char v30 = __clz(__rbit64(v32)) + (v26 << 6);
    }

    char v34 = (uint64_t *)(*(void *)(v21 + 48) + 16 * v30);
    unsigned int v36 = *v34;
    char v35 = v34[1];
    uint64_t v37 = *(void **)(*(void *)(v21 + 56) + 8 * v30);
    swift_bridgeObjectRetain(v35);
    uint64_t v38 = v37;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v22);
    uint64_t v63 = v22;
    char v41 = sub_1003AD53C(v36, v35);
    unsigned int v42 = v22[2];
    uint64_t v43 = (v40 & 1) == 0;
    uint64_t v44 = v42 + v43;
    if (__OFADD__(v42, v43)) {
      break;
    }
    unint64_t v45 = v40;
    if (v22[3] >= v44)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        char v22 = v63;
        if ((v40 & 1) != 0) {
          goto LABEL_14;
        }
      }

      else
      {
        sub_1003AE5C0();
        char v22 = v63;
        if ((v45 & 1) != 0) {
          goto LABEL_14;
        }
      }
    }

    else
    {
      sub_1003A8D20(v44, isUniquelyReferenced_nonNull_native);
      char v46 = sub_1003AD53C(v36, v35);
      if ((v45 & 1) != (v47 & 1)) {
        goto LABEL_62;
      }
      char v41 = v46;
      char v22 = v63;
      if ((v45 & 1) != 0)
      {
LABEL_14:
        uint64_t v27 = v22[7];
        uint64_t v28 = 8 * v41;

        *(void *)(v27 + v2_Block_object_dispose(va, 8) = v38;
        goto LABEL_15;
      }
    }

    v22[(v41 >> 6) + 8] |= 1LL << v41;
    uint64_t v48 = (uint64_t *)(v22[6] + 16 * v41);
    void *v48 = v36;
    v48[1] = v35;
    *(void *)(v22[7] + 8 * v41) = v38;
    unint64_t v49 = v22[2];
    uint64_t v50 = __OFADD__(v49, 1LL);
    char v51 = v49 + 1;
    if (v50) {
      goto LABEL_59;
    }
    v22[2] = v51;
    swift_bridgeObjectRetain(v35);
LABEL_15:
    swift_bridgeObjectRelease(v35);
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
  swift_once(&qword_100643EE8, sub_1001D75FC);
  id v8 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v8, (uint64_t)qword_100646980);
  swift_errorRetain(v21);
  BOOL v9 = swift_errorRetain(v21);
  int v10 = (os_log_s *)Logger.logObject.getter(v9);
  uint64_t v11 = static os_log_type_t.error.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    char v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    unsigned int v13 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)char v12 = 138412290;
    swift_errorRetain(v21);
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError(v21);
    uint64_t v63 = (void *)v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v12 + 4, v12 + 12);
    *unsigned int v13 = v14;
    swift_errorRelease(v21);
    swift_errorRelease(v21);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to load pseudonyms to revoke with error: %@", v12, 0xCu);
    unint64_t v15 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v13, 1LL, v15);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);

    swift_errorRelease(v21);
    return &_swiftEmptyDictionarySingleton;
  }

  swift_errorRelease(v21);
  swift_errorRelease(v21);
  swift_errorRelease(v21);
LABEL_48:

  return &_swiftEmptyDictionarySingleton;
}

  __break(1u);
}

  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 336) + 56LL);
  v1(*(void *)(v0 + 312), 1LL, 1LL, *(void *)(v0 + 328));
  uint64_t v70 = v47;
LABEL_36:
  swift_release(v70);
  if (qword_100644138 == -1) {
    goto LABEL_37;
  }
LABEL_52:
  swift_once(&qword_100644138, sub_1002E9860);
LABEL_37:
  uint64_t v71 = *(void *)(v0 + 248);
  uint64_t v72 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v72, (uint64_t)qword_10064D970);
  uint64_t v73 = swift_bridgeObjectRetain_n(v71, 2LL);
  __int16 v74 = (os_log_s *)Logger.logObject.getter(v73);
  id v75 = static os_log_type_t.error.getter(v74);
  uint64_t v76 = os_log_type_enabled(v74, v75);
  uint64_t v77 = *(const char **)(v0 + 248);
  if (v76)
  {
    v78 = *(void *)(v0 + 240);
    uint64_t v79 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v80 = swift_slowAlloc(32LL, -1LL);
    v126 = v80;
    *(_DWORD *)uint64_t v79 = 136315138;
    swift_bridgeObjectRetain(v77);
    *(void *)(v0 + 216) = sub_10018CDB4(v78, (unint64_t)v77, &v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v121, v79 + 4, v79 + 12);
    swift_bridgeObjectRelease_n(v77, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v74, v75, "No matching connectables for %s", v79, 0xCu);
    swift_arrayDestroy(v80, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v80, -1LL, -1LL);
    swift_slowDealloc(v79, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v77, 2LL);
  }

  v81 = (os_log_s *)Logger.logObject.getter(*(id *)(v0 + 256));
  v82 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v81, v82))
  {
    v83 = *(void *)(v0 + 384);
    v119 = *(void *)(v0 + 328);
    v84 = *(char **)(v0 + 256);
    uint64_t v85 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v122 = swift_slowAlloc(32LL, -1LL);
    v126 = v122;
    *(_DWORD *)uint64_t v85 = 136315138;
    uint64_t v86 = *(const char **)&v84[v83];
    v87 = sub_100183F14( &qword_100646108,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    id v88 = swift_bridgeObjectRetain(v86);
    uint64_t v89 = Set.description.getter(v88, v119, v87);
    id v91 = v90;
    swift_bridgeObjectRelease(v86);
    *(void *)(v0 + 20sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = sub_10018CDB4(v89, (unint64_t)v91, &v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v124, v0 + 208, v85 + 4, v85 + 12);
    swift_bridgeObjectRelease(v91);

    _os_log_impl((void *)&_mh_execute_header, v81, v82, "Current displayableIDs %s", v85, 0xCu);
    swift_arrayDestroy(v122, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v122, -1LL, -1LL);
    swift_slowDealloc(v85, -1LL, -1LL);
  }

  else
  {
    uint64_t v92 = *(void **)(v0 + 256);
  }

  v93 = (os_log_s *)Logger.logObject.getter(*(id *)(v0 + 256));
  id v94 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v93, v94))
  {
    uint64_t v95 = *(void *)(v0 + 328);
    uint64_t v96 = *(char **)(v0 + 256);
    v97 = (const char **)&v96[*(void *)(v0 + 400)];
    v98 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v123 = swift_slowAlloc(32LL, -1LL);
    v126 = v123;
    *(_DWORD *)v98 = 136315138;
    *(void *)&v99 = swift_beginAccess(v97, v0 + 120, 0LL, 0LL).n128_u64[0];
    v100 = *v97;
    swift_bridgeObjectRetain(v100, v99);
    int v101 = sub_100183098((uint64_t *)&unk_10064DA90);
    v102 = sub_100183F14( &qword_100646108,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    __int16 v103 = Dictionary.Keys.description.getter(v100, v95, v101, v102);
    NSErrorUserInfoKey v105 = v104;
    swift_bridgeObjectRelease(v100);
    *(void *)(v0 + 192) = sub_10018CDB4(v103, (unint64_t)v105, &v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v124, v98 + 4, v98 + 12);
    swift_bridgeObjectRelease(v105);

    _os_log_impl((void *)&_mh_execute_header, v93, v94, "Current connectable mapping %s", v98, 0xCu);
    swift_arrayDestroy(v123, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v123, -1LL, -1LL);
    swift_slowDealloc(v98, -1LL, -1LL);
  }

  else
  {
    v106 = *(void **)(v0 + 256);
  }

  v1(*(void *)(v0 + 232), 1LL, 1LL, *(void *)(v0 + 328));
LABEL_49:
  v110 = *(void *)(v0 + 352);
  v111 = *(void *)(v0 + 344);
  v113 = *(void *)(v0 + 312);
  v112 = *(void *)(v0 + 320);
  v115 = *(void *)(v0 + 296);
  v114 = *(void *)(v0 + 304);
  v117 = *(void *)(v0 + 280);
  v116 = *(void *)(v0 + 288);
  swift_task_dealloc(*(void *)(v0 + 360));
  swift_task_dealloc(v110);
  swift_task_dealloc(v111);
  swift_task_dealloc(v112);
  swift_task_dealloc(v113);
  swift_task_dealloc(v114);
  swift_task_dealloc(v115);
  swift_task_dealloc(v116);
  swift_task_dealloc(v117);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

  __int128 v69 = (const char *)*((void *)v41 + 2);
  if (v69)
  {
    uint64_t v70 = v98;
    uint64_t v96 = &v98[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashDB];
    swift_bridgeObjectRetain(v41, *(double *)&v40);
    id v94 = v70;
    uint64_t v71 = (void **)(v41 + 56);
    uint64_t v72 = _swiftEmptyArrayStorage;
    while (1)
    {
      v97 = v69;
      uint64_t v73 = (uint64_t)*(v71 - 1);
      v98 = *v71;
      v99 = v13;
      id v75 = (uint64_t)*(v71 - 3);
      __int16 v74 = (uint64_t)*(v71 - 2);
      uint64_t v77 = *v96;
      uint64_t v76 = v96[1];
      ObjectCFStringRef Type = swift_getObjectType(*v96);
      uint64_t v79 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t))(v76 + 88);
      swift_unknownObjectRetain(v77);
      v80 = v99;
      v81 = v79(v75, v74, v73, v98, ObjectType, v76);
      unsigned int v13 = v80;
      if (v80) {
        break;
      }
      v82 = v81;
      swift_unknownObjectRelease(v77);
      if ((swift_isUniquelyReferenced_nonNull_native(v72) & 1) == 0) {
        uint64_t v72 = sub_10018CD78(0LL, v72[2] + 1LL, 1, (uint64_t)v72);
      }
      v84 = v72[2];
      v83 = v72[3];
      if (v84 >= v83 >> 1) {
        uint64_t v72 = sub_10018CD78((void *)(v83 > 1), v84 + 1, 1, (uint64_t)v72);
      }
      v71 += 4;
      v72[2] = v84 + 1;
      v72[v84 + 4] = v82;
      __int128 v69 = v97 - 1;
      if (v97 == (const char *)1)
      {

        char v41 = v95;
        char v40 = swift_bridgeObjectRelease(v95).n128_u64[0];
        goto LABEL_46;
      }
    }

    *(void *)&uint64_t v85 = swift_bridgeObjectRelease((const char *)v72).n128_u64[0];
    uint64_t v86 = v95;
    swift_bridgeObjectRelease(v95, v85);
    swift_unknownObjectRelease(v77);
    v87 = v104;
    *(void *)&id v88 = swift_bridgeObjectRelease(v86).n128_u64[0];
    swift_bridgeObjectRelease(v87, v88);
  }

  else
  {
    uint64_t v72 = _swiftEmptyArrayStorage;
LABEL_46:
    *(void *)&uint64_t v89 = swift_bridgeObjectRelease(v41, *(double *)&v40, v94).n128_u64[0];
    id v90 = v72[2];
    if (v90)
    {
      id v91 = (const char **)(v72 + 4);
      do
      {
        uint64_t v92 = *v91++;
        swift_bridgeObjectRetain(v92, v89);
        sub_1003A12BC(v93);
        --v90;
      }

      while (v90);
    }

    swift_bridgeObjectRelease((const char *)v72, v89);
  }

  swift_release(v12);
  int v7 = v43;
  char v41 = 1LL << *(_BYTE *)(v12 + 32);
  if (v41 > 63) {
    bzero(v45, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v45 = -1LL << v41;
  }
  *(void *)(v12 + 16) = 0LL;
LABEL_39:
  id result = swift_release(v12);
  void *v7 = v14;
  return result;
}

  swift_release(v7);
  uint64_t v2 = v33;
  uint64_t v31 = 1LL << *(_BYTE *)(v7 + 32);
  if (v31 > 63) {
    bzero(v35, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v35 = -1LL << v31;
  }
  *(void *)(v7 + 16) = 0LL;
LABEL_39:
  id result = swift_release(v7);
  NSError *v2 = v9;
  return result;
}

  __break(1u);
  swift_once(&qword_100644348, sub_100408FD4);
  uint64_t v31 = *(void *)(v1 + 80);
  uint64_t v32 = *(void *)(v1 + 88);
  unint64_t v33 = *(void *)(v1 + 72);
  char v34 = *(void *)(v1 + 32);
  char v35 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v35, (uint64_t)qword_1006547B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v32, v34, v33);
  swift_errorRetain(v10);
  unsigned int v36 = swift_errorRetain(v10);
  uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
  uint64_t v38 = static os_log_type_t.error.getter(v37);
  unint64_t v39 = os_log_type_enabled(v37, v38);
  char v40 = *(void *)(v1 + 80);
  char v41 = *(void *)(v1 + 88);
  unsigned int v42 = *(void *)(v1 + 72);
  if (v39)
  {
    type = v38;
    uint64_t v43 = *(void *)(v1 + 64);
    uint64_t v65 = *(void *)(v1 + 56);
    uint64_t v44 = *(void *)(v1 + 48);
    unint64_t v45 = swift_slowAlloc(22LL, -1LL);
    __int128 v67 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    __int128 v68 = swift_slowAlloc(32LL, -1LL);
    uint64_t v71 = v68;
    *(_DWORD *)unint64_t v45 = 136315394;
    log = v37;
    SFAirDropReceive.AskRequest.id.getter(v68);
    char v46 = sub_10034DEF8();
    id v47 = dispatch thunk of CustomStringConvertible.description.getter(v44, v46);
    unint64_t v49 = v48;
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v43, v44);
    *(void *)(v1 + 16) = sub_10018CDB4(v47, (unint64_t)v49, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v70, v45 + 4, v45 + 12);
    uint64_t v50 = swift_bridgeObjectRelease(v49);
    (*(void (**)(uint64_t, uint64_t, __n128))(v40 + 8))(v41, v42, v50);
    *(_WORD *)(v45 + 12) = 2112;
    swift_errorRetain(v10);
    char v51 = _swift_stdlib_bridgeErrorToNSError(v10);
    *(void *)(v1 + 24) = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v70, v1 + 32, v45 + 14, v45 + 22);
    *__int128 v67 = v51;
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl( (void *)&_mh_execute_header,  log,  type,  "Failed to get News app for ask request %s: %@",  (uint8_t *)v45,  0x16u);
    unsigned int v52 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v67, 1LL, v52);
    swift_slowDealloc(v67, -1LL, -1LL);
    swift_arrayDestroy(v68, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v68, -1LL, -1LL);
    swift_slowDealloc(v45, -1LL, -1LL);

    swift_errorRelease(v10);
  }

  else
  {
    swift_errorRelease(v10);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v42);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

    swift_once(&qword_100644408, sub_100458568);
    goto LABEL_7;
  }

  unint64_t v24 = v23;
  char v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  uint64_t v27 = v26;

  UUID.init(uuidString:)(v25, v27);
  uint64_t v28 = swift_bridgeObjectRelease(v27);
  uint64_t v29 = v87;
  char v30 = v13;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v87 + 48))(v12, 1LL, v13, v28) == 1)
  {
    sub_100187100((uint64_t)v12, &qword_10064DA60);
    goto LABEL_6;
  }

  uint64_t v44 = v86;
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v86, v12, v13);
  unint64_t v45 = sub_1003500F4([v15 type]);
  if ((v46 & 1) != 0)
  {
    if (qword_100644408 != -1) {
      swift_once(&qword_100644408, sub_100458568);
    }
    char v56 = type metadata accessor for Logger(0LL);
    char v57 = sub_100186DE4(v56, (uint64_t)qword_100656748);
    unsigned int v58 = (os_log_s *)Logger.logObject.getter(v57);
    uint64_t v59 = static os_log_type_t.error.getter(v58);
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Message does not have authentication type", v60, 2u);
      swift_slowDealloc(v60, -1LL, -1LL);
    }

    goto LABEL_27;
  }

  id v47 = v45;
  if (v45 <= 7 && ((1LL << v45) & 0xC4) != 0 || v45 > 8)
  {
    uint64_t v48 = (uint64_t *)(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_sessions);
    swift_beginAccess(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_sessions, v88, 32LL, 0LL);
    unint64_t v49 = *v48;
    if (!*(void *)(v49 + 16) || (uint64_t v50 = sub_1003AD618((uint64_t)v44), (v51 & 1) == 0))
    {
      swift_endAccess(v88);
      unint64_t v61 = [objc_allocWithZone(SFAuthenticationOptions) init];
      id v90 = sub_100183168(0LL, &qword_1006569F0, &OBJC_CLASS___SFAuthenticationOptions_ptr);
      id v91 = &off_1005DC590;
      *(void *)&uint64_t v89 = v61;
      sub_100462B08((uint64_t)v44, (uint64_t)v85, v47, (v47 < 0xF) & (0x658Cu >> v47), (uint64_t)&v89, (uint64_t)v92);
      sub_100187100((uint64_t)&v89, &qword_1006569F8);
      char v62 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56LL))(v9, 1LL, 1LL, v62);
      sub_10019A6C4((uint64_t)v92, (uint64_t)&v89);
      uint64_t v63 = (void *)swift_allocObject(&unk_1005E3318, 80LL, 7LL);
      v63[2] = 0LL;
      v63[3] = 0LL;
      sub_1001CE0D0(&v89, (uint64_t)(v63 + 4));
      v63[9] = v15;
      BOOL v64 = v15;
      uint64_t v65 = sub_1001B37E8((uint64_t)v9, (uint64_t)&unk_100656B20, (uint64_t)v63);
      swift_release(v65);

      sub_10018709C(v92);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v44, v13);
      return;
    }

    sub_10019A6C4(*(void *)(v49 + 56) + 40 * v50, (uint64_t)&v89);
    sub_1001CE0D0(&v89, (uint64_t)v92);
    swift_endAccess(v88);
    unsigned int v52 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56LL))(v9, 1LL, 1LL, v52);
    sub_10019A6C4((uint64_t)v92, (uint64_t)&v89);
    uint64_t v53 = (void *)swift_allocObject(&unk_1005E3340, 80LL, 7LL);
    v53[2] = 0LL;
    v53[3] = 0LL;
    sub_1001CE0D0(&v89, (uint64_t)(v53 + 4));
    v53[9] = v15;
    uint64_t v54 = v15;
    unint64_t v55 = sub_1001B37E8((uint64_t)v9, (uint64_t)&unk_100656B30, (uint64_t)v53);
    swift_release(v55);

    sub_10018709C(v92);
LABEL_27:
    (*(void (**)(char *, uint64_t))(v29 + 8))(v44, v13);
    return;
  }

  if (((1LL << v45) & 0x18E) != 0)
  {
    sub_100471AB8((uint64_t)v44, (char *)&v89);
  }

  else
  {
    uint64_t v72 = v85;
    uint64_t v73 = v85[3];
    __int16 v74 = v85[4];
    sub_10019A708(v85, v73);
    id v75 = (*(uint64_t (**)(uint64_t, uint64_t))(v74 + 16))(v73, v74);
    uint64_t v77 = v76;
    v78 = v4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_metrics;
    swift_beginAccess(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_metrics, v92, 33LL, 0LL);
    type metadata accessor for StateMetrics(0LL);
    sub_1002E5D50(v75, v77, v47);
    swift_endAccess(v92);
    uint64_t v79 = v72[3];
    v80 = v72[4];
    sub_10019A708(v72, v79);
    v81 = (*(uint64_t (**)(uint64_t, uint64_t))(v80 + 24))(v79, v80);
    v83 = v82;
    swift_beginAccess(v78, v92, 33LL, 0LL);
    uint64_t v44 = v86;
    v84 = v81;
    char v30 = v13;
    sub_1002E5D50(v84, v83, v47);
    swift_endAccess(v92);
    sub_10019A6C4((uint64_t)v72, (uint64_t)v92);
    sub_10046A400(v47, v44, (uint64_t)v92, &v89);
    sub_100187100((uint64_t)v92, &qword_100654080);
  }

  __int128 v67 = v90;
  __int128 v66 = v91;
  __int128 v68 = sub_10019A708(&v89, v90);
  v93 = v67;
  id v94 = (void (**)(void *, uint64_t, void *))v66[1];
  __int128 v69 = sub_1001A4B04(v92);
  (*(void (**)(void *, void *, uint64_t))(*(void *)(v67 - 8) + 16LL))(v69, v68, v67);
  sub_10018709C(&v89);
  uint64_t v70 = v93;
  uint64_t v71 = v94;
  sub_10019A708(v92, v93);
  v71[6](v15, v70, v71);

  (*(void (**)(char *, uint64_t))(v87 + 8))(v44, v30);
  sub_10018709C(v92);
}

void *sub_10009DA78(uint64_t a1)
{
  id result = *(void **)(*(void *)(a1 + 32) + 160LL);
  if (result && dword_100642860 <= 50)
  {
    if (dword_100642860 == -1)
    {
      id result = (void *)_LogCategory_Initialize(&dword_100642860, 50LL);
      if (!(_DWORD)result) {
        return result;
      }
      id result = *(void **)(*(void *)(a1 + 32) + 160LL);
    }

    unsigned int v3 = [result screenLocked];
    int v4 = "unlocked";
    if (v3) {
      int v4 = "locked";
    }
    return (void *)LogPrintF( &dword_100642860,  "-[SDRemoteInteractionAgent _clientDeviceLockStatusChanged]_block_invoke",  50LL,  "UI lock status changed to %s\n",  v4);
  }

  return result;
}

Class sub_10009EBD8()
{
  if (qword_100656FC8 != -1) {
    dispatch_once(&qword_100656FC8, &stru_1005CD270);
  }
  Class result = objc_getClass("ACAccountStore");
  qword_100656FC0 = (uint64_t)result;
  off_1006428D0 = (uint64_t (*)())sub_10009EC34;
  return result;
}

id sub_10009EC34()
{
  return (id)qword_100656FC0;
}

void sub_10009EC40(id a1)
{
  qword_100656FD0 = (uint64_t)dlopen("/System/Library/Frameworks/Accounts.framework/Accounts", 2);
}

void sub_10009ECA8(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___SDSharedRemoteTextInputClient);
  uint64_t v2 = (void *)qword_100656FE0;
  qword_100656FE0 = (uint64_t)v1;
}

id sub_10009EE70(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _rtiHandleEventWithData:a2];
}

void sub_10009EE7C(uint64_t a1, uint64_t a2)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_updatedSessionInfoWithAppIcon:"));
  [*(id *)(a1 + 32) _rtiHandleInputDidBeginWithFlags:a2 sessionInfo:v4];
}

id sub_10009EEC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _rtiHandleInputDidEndWithFlags:a2 sessionInfo:a3];
}

id sub_10009EF30(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 8LL) = 1;
  return _[*(id *)(a1 + 32) _ensureStarted];
}

void sub_10009F2B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "handleEventWithData:") & 1) != 0) {
    [v3 handleEventWithData:*(void *)(a1 + 32)];
  }
}

void sub_10009F3EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "handleInputDidBeginWithFlags:sessionInfo:") & 1) != 0) {
    [v3 handleInputDidBeginWithFlags:*(void *)(a1 + 40) sessionInfo:*(void *)(a1 + 32)];
  }
}

void sub_10009F524(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "handleInputDidEndWithFlags:sessionInfo:") & 1) != 0) {
    [v3 handleInputDidEndWithFlags:*(void *)(a1 + 40) sessionInfo:*(void *)(a1 + 32)];
  }
}

id sub_10009F898(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24LL);
  if (v2)
  {
    id v3 = v2;
    dispatch_source_cancel(v3);
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(void **)(v4 + 24);
    *(void *)(v4 + 24) = 0LL;
  }

  if (dword_1006428D8 <= 30 && (dword_1006428D8 != -1 || _LogCategory_Initialize(&dword_1006428D8, 30LL))) {
    LogPrintF( &dword_1006428D8,  "-[SDSharedRemoteTextInputClient _startClockWithResetIfNeeded]_block_invoke",  30LL,  "Overrun timer fired, running longer than 1 hr? Start time: %@\n",  *(void *)(*(void *)(a1 + 32) + 40LL));
  }
  return _[*(id *)(a1 + 32) _logEvent:5 stopClock:1];
}

void sub_10009FEF8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32LL));
  [WeakRetained airDropInformation:*(void *)(a1 + 32) didChange:*(void *)(*(void *)(a1 + 32) + 24)];
}

void sub_1000A01B4(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___SDServerBrowser);
  uint64_t v2 = (void *)qword_100656FF0;
  qword_100656FF0 = (uint64_t)v1;
}

id sub_1000A0480(uint64_t a1)
{
  return [*(id *)(a1 + 32) postNotification:@"com.apple.sharingd.AirDropStatusChanged" forNeighborhood:0];
}

id sub_1000A0ECC(uint64_t a1)
{
  return [*(id *)(a1 + 32) postNotification:@"com.apple.sharingd.AirDropStatusChanged" forNeighborhood:0];
}

id sub_1000A1148(uint64_t a1)
{
  return [*(id *)(a1 + 32) postNotification:@"com.apple.sharingd.AirDropStatusChanged" forNeighborhood:0];
}

id sub_1000A115C(uint64_t a1)
{
  return [*(id *)(a1 + 32) postNotification:@"com.apple.sharingd.AirDropStatusChanged" forNeighborhood:0];
}

id sub_1000A1524(uint64_t a1)
{
  return [*(id *)(a1 + 32) postNotification:@"com.apple.sharingd.AirDropStatusChanged" forNeighborhood:0];
}

void sub_1000A1F90(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "incrementTransfersInitiated: No AirDrop browsers are running",  v1,  2u);
}

void sub_1000A26C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000A26F0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained acceptActionTriggered];
}

void sub_1000A281C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 selectedApplication]);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1000A28AC;
  void v4[3] = &unk_1005CB008;
  v4[4] = *(void *)(a1 + 32);
  [v2 performActionWithBundleProxy:v3 completionHandler:v4];
}

void sub_1000A28AC(uint64_t a1, uint64_t a2)
{
  id v3 = (void (**)(id, uint64_t, void, uint64_t))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) completionHandler]);
  v3[2](v3, a2, 0LL, 1LL);
}

uint64_t sub_1000A3058(uint64_t a1)
{
  uint64_t v2 = airdrop_log(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Resource open operation completed for %@",  (uint8_t *)&v6,  0xCu);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_1000A3494(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) openURLs:a2];
}

void sub_1000A34A0(uint64_t a1, uint64_t a2)
{
  id v3 = (void (**)(id, uint64_t, void, uint64_t))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) completionHandler]);
  v3[2](v3, a2, 0LL, 1LL);
}

void sub_1000A3824(void *a1)
{
  int v6 = (void *)objc_claimAutoreleasedReturnValue([a1 transfer]);
  sub_1000A3814();
  _os_log_error_impl(v1, v2, v3, v4, v5, 0xCu);
}

void sub_1000A38B0(uint64_t a1, void *a2)
{
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([a2 transfer]);
  sub_1000A3814();
  _os_log_error_impl(v2, v3, v4, v5, v6, 0x16u);
}

void sub_1000A3958(void *a1)
{
  int v6 = (void *)objc_claimAutoreleasedReturnValue([a1 selectedApplication]);
  sub_1000A3814();
  _os_log_error_impl(v1, v2, v3, v4, v5, 0x20u);
}

uint64_t SDAuthenticationApprovePromptReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 44) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_46;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_48;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_46:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_48:
        uint64_t v33 = 36LL;
        goto LABEL_53;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 44) |= 1u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1LL || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_52;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_52:
        uint64_t v33 = 32LL;
LABEL_53:
        *(_DWORD *)(a1 + v33) = v14;
        continue;
      case 3u:
        uint64_t String = PBReaderReadString(a2);
        uint64_t v23 = objc_claimAutoreleasedReturnValue(String);
        uint64_t v24 = 24LL;
        goto LABEL_37;
      case 4u:
        uint64_t v25 = PBReaderReadString(a2);
        uint64_t v23 = objc_claimAutoreleasedReturnValue(v25);
        uint64_t v24 = 8LL;
        goto LABEL_37;
      case 5u:
        uint64_t v26 = PBReaderReadString(a2);
        uint64_t v23 = objc_claimAutoreleasedReturnValue(v26);
        uint64_t v24 = 16LL;
LABEL_37:
        uint64_t v27 = *(void **)(a1 + v24);
        *(void *)(a1 + v24) = v23;

        continue;
      case 6u:
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v30 = 0LL;
        *(_BYTE *)(a1 + 44) |= 4u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      unint64_t v31 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v31 == -1LL || v31 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v32 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v31);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v31 + 1;
      v30 |= (unint64_t)(v32 & 0x7F) << v28;
      if ((v32 & 0x80) == 0) {
        goto LABEL_55;
      }
      v28 += 7;
      BOOL v9 = v29++ >= 9;
      if (v9)
      {
        uint64_t v30 = 0LL;
        goto LABEL_57;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_55:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v30 = 0LL;
    }
LABEL_57:
    *(_BYTE *)(a1 + 4sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = v30 != 0;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t SDAuthenticationPairingRequestReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 32) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_38;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_40;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_40:
        uint64_t v27 = 28LL;
        goto LABEL_45;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 32) |= 1u;
        break;
      case 3u:
        uint64_t String = PBReaderReadString(a2);
        uint64_t v23 = objc_claimAutoreleasedReturnValue(String);
        uint64_t v24 = 16LL;
        goto LABEL_36;
      case 4u:
        uint64_t Data = PBReaderReadData(a2);
        uint64_t v23 = objc_claimAutoreleasedReturnValue(Data);
        uint64_t v24 = 8LL;
LABEL_36:
        uint64_t v26 = *(void **)(a1 + v24);
        *(void *)(a1 + v24) = v23;

        continue;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v20 == -1LL || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
      v14 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0) {
        goto LABEL_42;
      }
      v18 += 7;
      BOOL v9 = v19++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_44;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v14) = 0;
    }
LABEL_44:
    uint64_t v27 = 24LL;
LABEL_45:
    *(_DWORD *)(a1 + v27) = v14;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_1000A54D0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _activate];
}

void sub_1000A5AF4(void *a1)
{
  os_log_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AKURLBag sharedBag](&OBJC_CLASS___AKURLBag, "sharedBag"));
  os_log_type_t v3 = v2;
  uint64_t v4 = a1[6];
  switch(v4)
  {
    case 0LL:
      unsigned int v5 = @"createCertificate";
      goto LABEL_9;
    case 1LL:
      unsigned int v5 = @"fetchCertificate";
      goto LABEL_9;
    case 2LL:
      unsigned int v5 = @"getMyInfo";
      goto LABEL_9;
    case 3LL:
      unsigned int v5 = @"findPerson";
LABEL_9:
      unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v2 urlAtKey:v5]);
      int v7 = 0;
      int v8 = 0;
      goto LABEL_12;
    default:
      if (dword_1006429A8 > 60) {
        goto LABEL_11;
      }
      if (dword_1006429A8 != -1) {
        goto LABEL_5;
      }
      if (_LogCategory_Initialize(&dword_1006429A8, 60LL))
      {
        uint64_t v4 = a1[6];
LABEL_5:
        LogPrintF( &dword_1006429A8,  "-[SDAppleIDServerTask _urlWithCompletion:]_block_invoke",  60LL,  "### Unhandled type %d\n",  v4);
      }

uint64_t sub_1000A5D2C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  *(unsigned int *)(a1 + 48));
}

id sub_1000A6090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _handleURLIsAvailable:a2 error:a3 completion:*(void *)(a1 + 40)];
}

id sub_1000A625C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

void sub_1000A6434(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(dispatch_queue_s **)(v10 + 16);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_1000A6504;
  v15[3] = &unk_1005CC3F0;
  v15[4] = v10;
  id v16 = v8;
  id v17 = v7;
  id v18 = v9;
  id v12 = v7;
  id v13 = v9;
  id v14 = v8;
  dispatch_async(v11, v15);
}

id sub_1000A6504(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  uint64_t v3 = a1[6];
  uint64_t v4 = NSErrorToOSStatus(a1[7]);
  return _[v1 _handleTaskResponse:v2 withData:v3 error:v4];
}

void sub_1000A65DC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 16LL));
  if (!(_DWORD)a3)
  {
    if (v5)
    {
      [*(id *)(a1 + 32) setUrlRequest:v5];
      [*(id *)(a1 + 32) _handleURLRequestIsAvailable];
      goto LABEL_5;
    }

    a3 = 4294960587LL;
  }

  [*(id *)(a1 + 32) _callResponseHandlerWithInfo:0 error:a3];
LABEL_5:
}

LABEL_57:
    uint64_t v25 = 0LL;
    id v16 = 0LL;
    char v32 = 0LL;
    uint64_t v23 = 0LL;
    uint64_t v33 = 0LL;
    uint64_t v48 = 0LL;
    id v5 = 4294960534LL;
    unint64_t v49 = -6762;
    goto LABEL_25;
  }

  id v14 = v11;
  uint64_t v48 = v8;
  unint64_t v15 = -[SDAppleIDURLResponse initWithHTTPUTLResponse:data:]( objc_alloc(&OBJC_CLASS___SDAppleIDURLResponse),  "initWithHTTPUTLResponse:data:",  v48,  v14);
  id v16 = v15;
  char v46 = v11;
  id v47 = v8;
  unint64_t v45 = v14;
  if (v15)
  {
    id v17 = (void *)objc_claimAutoreleasedReturnValue(-[SDAppleIDURLResponse responseInfo](v15, "responseInfo"));

    if (v17)
    {
      if (dword_1006429A8 <= 10
        && (dword_1006429A8 != -1 || _LogCategory_Initialize(&dword_1006429A8, 10LL)))
      {
        id v18 = (void *)objc_claimAutoreleasedReturnValue(-[SDAppleIDURLResponse responseInfo](v16, "responseInfo"));
        LogPrintF( &dword_1006429A8,  "-[SDAppleIDServerTask _handleTaskResponse:withData:error:]",  10LL,  "Response info: %@\n",  v18);
      }

      id v19 = (void *)objc_claimAutoreleasedReturnValue(-[SDAppleIDURLResponse responseInfo](v16, "responseInfo"));
      Int64 = CFDictionaryGetInt64(v19, @"responseCode", 0LL);

      char v21 = -[SDAppleIDURLResponse statusCode](v16, "statusCode");
      char v22 = (void *)objc_claimAutoreleasedReturnValue(-[SDAppleIDURLResponse responseInfo](v16, "responseInfo"));
      if (v21 != (id)200 || Int64)
      {
        CFTypeID TypeID = CFStringGetTypeID();
        Typeduint64_t Value = CFDictionaryGetTypedValue(v22, @"responseMessage", TypeID, 0LL);
        unint64_t v39 = objc_claimAutoreleasedReturnValue(TypedValue);

        if (v39) {
          char v40 = (const __CFString *)v39;
        }
        else {
          char v40 = &stru_1005E3958;
        }
        char v41 = (void *)objc_claimAutoreleasedReturnValue(-[SDAppleIDURLResponse responseInfo](v16, "responseInfo"));
        unsigned int v42 = CFDictionaryGetInt64(v41, @"nextSuggestedAttemptDelay", 0LL);

        if (dword_1006429A8 <= 90
          && (dword_1006429A8 != -1 || _LogCategory_Initialize(&dword_1006429A8, 90LL)))
        {
          LogPrintF( &dword_1006429A8,  "-[SDAppleIDServerTask _handleTaskResponse:withData:error:]",  90LL,  "### Response status code: %d, error %d (%@), suggested retry delay: %d\n",  -[SDAppleIDURLResponse statusCode](v16, "statusCode"),  Int64,  v40,  v42 / 1000);
        }

        uint64_t v44 = v40;
        -[SDAppleIDServerTask _handleServerError:withStatusCode:nextSuggestedAttemptDelay:]( v10,  "_handleServerError:withStatusCode:nextSuggestedAttemptDelay:",  Int64,  -[SDAppleIDURLResponse statusCode](v16, "statusCode"),  v42 / 1000);
        uint64_t v23 = 0LL;
        uint64_t v24 = 0;
      }

      else
      {
        uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( -[SDAppleIDServerTask _parseServerResponse:error:]( v10,  "_parseServerResponse:error:",  v22,  &v49));

        Int64 = 0LL;
        if (v23)
        {
          uint64_t v44 = 0LL;
        }

        else
        {
          uint64_t v44 = 0LL;
          uint64_t v43 = v49;
          if (!v49) {
            uint64_t v43 = 201217;
          }
          unint64_t v49 = v43;
        }

        uint64_t v24 = 1;
      }

      goto LABEL_23;
    }

    if (dword_1006429A8 <= 60
      && (dword_1006429A8 != -1 || _LogCategory_Initialize(&dword_1006429A8, 60LL)))
    {
      LogPrintF( &dword_1006429A8,  "-[SDAppleIDServerTask _handleTaskResponse:withData:error:]",  60,  "### No response JSON. Response status code %d, response %@\n",  [v48 statusCode],  v48);
    }

    uint64_t v23 = 0LL;
    uint64_t v44 = 0LL;
    unsigned int v36 = -6712;
  }

  else
  {
    uint64_t v23 = 0LL;
    uint64_t v44 = 0LL;
    unsigned int v36 = -6762;
  }

  unint64_t v49 = v36;
  uint64_t v24 = 1;
  Int64 = -1LL;
LABEL_23:
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[AKURLBag sharedBag](&OBJC_CLASS___AKURLBag, "sharedBag"));
  v50[0] = @"httpStatusCode";
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v48 statusCode]));
  v51[0] = v26;
  v50[1] = @"errorCode";
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", Int64));
  v51[1] = v27;
  v50[2] = @"type";
  char v28 = v10;
  unsigned int v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v10->_type));
  v51[2] = v29;
  v50[3] = @"idmsEnv";
  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v25 IDMSEnvironment]));
  v51[3] = v30;
  unint64_t v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v51,  v50,  4LL));
  SFMetricsLog(@"com.apple.sharing.AIAServerTaskResponse", v31);

  if (!v24)
  {
    uint64_t v11 = v46;
    id v8 = v47;
    uint64_t v33 = (__CFString *)v44;
    char v32 = v45;
    goto LABEL_27;
  }

  id v5 = v49;
  uint64_t v11 = v46;
  id v8 = v47;
  uint64_t v10 = v28;
  uint64_t v33 = (__CFString *)v44;
  char v32 = v45;
LABEL_25:
  -[SDAppleIDServerTask _callResponseHandlerWithInfo:error:](v10, "_callResponseHandlerWithInfo:error:", v23, v5);
LABEL_27:
}

        os_unfair_lock_unlock(v23);
        __break(1u);
        JUMPOUT(0x1003498E0LL);
      }

      swift_beginAccess(v114, v126, 33LL, 0LL);
      a3 = v120;
      swift_bridgeObjectRetain(v120);
      unsigned int v52 = sub_1001CA898((uint64_t)v122, a3);
      swift_endAccess(v126);
      swift_release_n(v109, 2LL);
      swift_bridgeObjectRelease(a3);
      swift_release(v52);
    }

    else
    {
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v26);
    }
  }

  unsigned int v36 = v122;
  v126[0] = (uint64_t)v122;
  v126[1] = a3;
  (*(void (**)(char *, void, uint64_t))(v18 + 104))( v20,  enum case for URL.DirectoryHint.notDirectory(_:),  v17);
  uint64_t v53 = sub_1001CCE8C();
  URL.appending<A>(path:directoryHint:)(v126, v20, &type metadata for String, v53);
  uint64_t v54 = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  static UTType.propertyList.getter(v54);
  unint64_t v55 = (uint64_t)v123;
  URL.appendingPathExtension(for:)(v16);
  (*(void (**)(char *, uint64_t))(v118 + 8))(v16, v119);
  char v56 = a3;
  char v57 = *(void (**)(os_unfair_lock_s *, uint64_t))(v117 + 8);
  v57(v23, v124);
  unsigned int v58 = [(id)objc_opt_self(NSFileManager) defaultManager];
  object = URL.path(percentEncoded:)(1)._object;
  uint64_t v60 = String._bridgeToObjectiveC()();
  LODWORD(object) = objc_msgSend( v58,  "fileExistsAtPath:",  v60,  swift_bridgeObjectRelease(object).n128_f64[0]);

  if (!(_DWORD)object)
  {
    __int128 v69 = v125;
    uint64_t v70 = sub_10034AAB0(v36, v56, v116, v115);
    char v35 = v69;
    if (!v69)
    {
      uint64_t v33 = (uint64_t)v70;
      v57(v123, v124);
      if (!v33)
      {
        if ((v113 & 1) == 0)
        {
          uint64_t v85 = sub_100187014();
          uint64_t v86 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v85, 0LL, 0LL);
          *(_DWORD *)v87 = 10;
          *(void *)(v87 + _Block_object_dispose(va, 8) = 0xD00000000000001ELL;
          *(void *)(v87 + 16) = 0x800000010050BA80LL;
          return swift_willThrow(v86);
        }

        char v34 = 0LL;
        uint64_t v72 = v120;
        uint64_t v73 = v115;
        goto LABEL_54;
      }

      __int128 v67 = v113;
      goto LABEL_35;
    }

    uint64_t v63 = (char *)v123;
    return ((uint64_t (*)(char *, uint64_t))v57)(v63, v124);
  }

  unint64_t v61 = (uint64_t)v36;
  char v62 = v125;
  uint64_t v33 = sub_10034A738(v55);
  uint64_t v63 = (char *)v55;
  char v35 = v62;
  if (v62) {
    return ((uint64_t (*)(char *, uint64_t))v57)(v63, v124);
  }
  BOOL v64 = *(const __CFString **)(v33 + 16);
  uint64_t v65 = *(void *)(v33 + 24);
  if (v64 == v36 && v65 == v120 || (_stringCompareWithSmolCheck(_:_:expecting:)(v64, v65, v36, v120, 0LL) & 1) != 0)
  {
    __int128 v66 = *(_BYTE *)(v33 + 32);
    swift_retain(v33);
    sub_1003EFBD8(v66);
    __int128 v67 = v113;
    if ((v68 & 1) != 0 && (((v115 == 0) ^ *(unsigned __int8 *)(v33 + 33)) & 1) != 0)
    {
      v57(v123, v124);
      swift_release(v33);
      goto LABEL_35;
    }
  }

  else
  {
    swift_retain(v33);
    __int128 v67 = v113;
  }

  v125 = 0LL;
  if (qword_1006441E0 != -1) {
    swift_once(&qword_1006441E0, sub_10034870C);
  }
  __int16 v74 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v74, (uint64_t)qword_1006500F0);
  id v75 = v120;
  swift_bridgeObjectRetain_n(v120, 2LL);
  uint64_t v76 = swift_retain_n(v33, 2LL);
  uint64_t v77 = (os_log_s *)Logger.logObject.getter(v76);
  v78 = static os_log_type_t.error.getter(v77);
  if (os_log_type_enabled(v77, (os_log_type_t)v78))
  {
    LODWORD(v11_Block_object_dispose(va, 8) = v78;
    v119 = (uint64_t)v77;
    uint64_t v79 = swift_slowAlloc(42LL, -1LL);
    v117 = swift_slowAlloc(128LL, -1LL);
    v126[0] = v117;
    *(_DWORD *)uint64_t v79 = 136315906;
    swift_retain(v33);
    sub_10020A668();
    v81 = v80;
    v82 = v33;
    v84 = v83;
    swift_release(v82);
    v128 = sub_10018CDB4(v81, v84, v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129, v79 + 4, v79 + 12);
    v109 = v82;
    swift_release_n(v82, 2LL);
    swift_bridgeObjectRelease(v84);
    *(_WORD *)(v79 + 12) = 2080;
    swift_bridgeObjectRetain(v75);
    v128 = sub_10018CDB4(v61, v75, v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129, v79 + 14, v79 + 22);
    swift_bridgeObjectRelease_n(v75, 3LL);
    *(_WORD *)(v79 + 22) = 2080;
    __asm { BR              X10 }
  }

  swift_release_n(v33, 3LL);
  swift_bridgeObjectRelease_n(v75, 2LL);

  v57(v123, v124);
  char v35 = v125;
LABEL_35:
  swift_retain(v33);
  char v34 = v33;
  if ((v67 & 1) != 0) {
    goto LABEL_36;
  }
LABEL_6:
  if (qword_1006441E0 != -1) {
    swift_once(&qword_1006441E0, sub_10034870C);
  }
  uint64_t v37 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v37, (uint64_t)qword_1006500F0);
  uint64_t v38 = swift_retain_n(v33, 2LL);
  unint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
  char v40 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v39, v40)) {
    goto LABEL_49;
  }
  char v41 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  unsigned int v42 = swift_slowAlloc(32LL, -1LL);
  v125 = v35;
  v126[0] = v42;
  *(_DWORD *)char v41 = 136315138;
  uint64_t v43 = v33;
  v124 = (uint64_t)(v41 + 4);
  swift_retain(v33);
  sub_10020A668();
  uint64_t v44 = v34;
  char v46 = v45;
  uint64_t v48 = v47;
  swift_release(v43);
  unint64_t v49 = v46;
  char v34 = v44;
  v128 = sub_10018CDB4(v49, v48, v126);
  uint64_t v33 = v43;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129, v124, v41 + 12);
  swift_release_n(v43, 2LL);
  swift_bridgeObjectRelease(v48);
  uint64_t v50 = "Loaded LocalLTK %s, return it for non-pairing flows";
LABEL_10:
  _os_log_impl((void *)&_mh_execute_header, v39, v40, v50, v41, 0xCu);
  swift_arrayDestroy(v42, 1LL, (char *)&type metadata for Any + 8);
  char v51 = (uint64_t)v122;
  swift_slowDealloc(v42, -1LL, -1LL);
  swift_slowDealloc(v41, -1LL, -1LL);

LABEL_50:
  v99 = v114;
  swift_beginAccess(v114, v126, 33LL, 0LL);
  v100 = v120;
  swift_bridgeObjectRetain(v120);
  swift_retain(v33);
  int v101 = swift_isUniquelyReferenced_nonNull_native(*v99);
  v128 = *v99;
  void *v99 = 0x8000000000000000LL;
  sub_1003B3F7C(v33, v51, v100, v101);
  v102 = *v99;
  void *v99 = v128;
  __int16 v103 = v100;
LABEL_55:
  swift_bridgeObjectRelease(v103);
  swift_bridgeObjectRelease(v102);
  swift_endAccess(v126);
  uint64_t result = swift_release(v34);
  *v112 = v33;
  return result;
}

    uint64_t v33 = 0;
    goto LABEL_58;
  }

  if (v27)
  {
    unint64_t v31 = (BYTE1(v22._countAndFlagsBits) - 48);
    if (v27 != 2)
    {
      unint64_t v39 = v27 - 3;
      if (v39)
      {
        char v40 = (unsigned __int8 *)v72 + 3;
        while (1)
        {
          char v41 = *v40 - 48;
          if (v41 > 9) {
            goto LABEL_40;
          }
          unsigned int v42 = 10 * v31;
          unint64_t v31 = v42 + v41;
          uint64_t v33 = 0;
          ++v40;
          if (!--v39) {
            goto LABEL_58;
          }
        }
      }
    }

    goto LABEL_57;
  }

LABEL_33:
    id v16 = 0LL;
    id v19 = 0LL;
    int v20 = 0LL;
    char v22 = 0LL;
    uint64_t v23 = 201240;
    if (!a4) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }

  id v16 = (void *)v15;
  NSNumber = NSDictionaryGetNSNumber(v5, @"delay", 0LL);
  id v18 = (void *)objc_claimAutoreleasedReturnValue(NSNumber);
  id v19 = v18;
  if (v18) {
    int v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  (uint64_t)[v18 integerValue] / 1000));
  }
  else {
    int v20 = 0LL;
  }
  if (dword_1006429A8 <= 30 && (dword_1006429A8 != -1 || _LogCategory_Initialize(&dword_1006429A8, 30LL))) {
    LogPrintF( &dword_1006429A8,  "-[SDAppleIDServerTask _parseCreateCertificateResponse:error:]",  30LL,  "Received Create Certificate response: altDSID=%@, certToken=%@, suggestedDelay=%@\n",  v8,  v16,  v20);
  }
  if (!v20 || ((unint64_t)[v20 integerValue] & 0x8000000000000000) != 0)
  {
    char v21 = &off_1005F7828;
  }

  else
  {
    char v21 = &off_1005F7840;
  }

  int v20 = v21;
LABEL_17:
  v25[0] = @"AltDSID";
  v25[1] = @"CertificateToken";
  v26[0] = v8;
  v26[1] = v16;
  v25[2] = @"Delay";
  v26[2] = v20;
  char v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v26,  v25,  3LL));
  uint64_t v23 = 0;
  if (a4) {
LABEL_18:
  }
    *a4 = v23;
LABEL_19:

  return v22;
}

            sub_100187094(v3);
            uint64_t v26 = *v28;
            *char v28 = (const char *)&_swiftEmptySetSingleton;
            uint64_t v27 = swift_bridgeObjectRelease(v26);
            (*(void (**)(__n128))(v0 + 8))(v27);
            return;
          }
        }
      }
    }

  swift_release(a1);
  if (qword_1006440C8 == -1) {
    goto LABEL_34;
  }
LABEL_42:
  swift_once(&qword_1006440C8, sub_100291D1C);
LABEL_34:
  uint64_t v59 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v59, (uint64_t)qword_10064BA00);
  uint64_t v60 = v103;
  unint64_t v61 = swift_bridgeObjectRetain_n(v103, 2LL);
  char v62 = (os_log_s *)Logger.logObject.getter(v61);
  uint64_t v63 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v62, v63))
  {
    BOOL v64 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v65 = swift_slowAlloc(32LL, -1LL);
    v102[0] = v65;
    *(_DWORD *)BOOL v64 = 136315138;
    int v101 = (uint64_t)v60;
    swift_bridgeObjectRetain(v60);
    __int128 v66 = sub_100183098(&qword_10064BBA0);
    __int128 v67 = String.init<A>(describing:)(&v101, v66);
    __int128 v69 = (const char *)v68;
    int v101 = sub_10018CDB4(v67, v68, v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v64 + 4, v64 + 12);
    swift_bridgeObjectRelease_n(v60, 2LL);
    swift_bridgeObjectRelease(v69);
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "Temp pairing endpoints changed: %s", v64, 0xCu);
    swift_arrayDestroy(v65, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v65, -1LL, -1LL);
    swift_slowDealloc(v64, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v60, 2LL);
  }

  *(void *)&uint64_t v70 = swift_beginAccess(&v103, v102, 0LL, 0LL).n128_u64[0];
  uint64_t v71 = v76;
  uint64_t v72 = *(const char **)(v76 + OBJC_IVAR____TtC16DaemoniOSLibrary19SDTempPairingClient_availableEndpoints);
  *(void *)(v76 + OBJC_IVAR____TtC16DaemoniOSLibrary19SDTempPairingClient_availableEndpoints) = v103;
  swift_bridgeObjectRelease(v72, v70);
  sub_100292150();
  uint64_t v73 = *(void (**)(uint64_t))(v71 + OBJC_IVAR____TtC16DaemoniOSLibrary19SDTempPairingClient_objectChanged);
  if (v73)
  {
    __int16 v74 = *(void *)(v71 + OBJC_IVAR____TtC16DaemoniOSLibrary19SDTempPairingClient_objectChanged + 8);
    id v75 = swift_retain(v74);
    v73(v75);
    sub_100224FF8((uint64_t)v73, v74);
  }

    uint64_t v11 = (v46 - 1) & v46;
    char v40 = __clz(__rbit64(v46)) + (v1 << 6);
LABEL_16:
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))( v8,  *(void *)(v34 + 56) + *(void *)(v3 + 72) * v40,  v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v8, v2);
    char v41 = type metadata accessor for SFAirDropSend.Failure(0LL);
    unsigned int v42 = sub_100183F14( &qword_100654D00,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
    uint64_t v43 = swift_allocError(v41, v42, 0LL, 0LL);
    *uint64_t v44 = 1;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v41 - 8) + 104LL))(v44, v38, v41);
    v60[0] = v43;
    CheckedContinuation.resume(throwing:)(v60, v2);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }

  id v47 = v45 + 4;
  if (v47 < v58)
  {
    char v46 = *(void *)(v57 + 8 * v47);
    if (!v46)
    {
      while (1)
      {
        uint64_t v1 = v47 + 1;
        if (__OFADD__(v47, 1LL)) {
          goto LABEL_36;
        }
        if (v1 >= v58) {
          goto LABEL_34;
        }
        char v46 = *(void *)(v57 + 8 * v1);
        ++v47;
        if (v46) {
          goto LABEL_33;
        }
      }
    }

    uint64_t v1 = v47;
    goto LABEL_33;
  }

    uint64_t v11 = 0LL;
    id v13 = 1;
    goto LABEL_46;
  }

  __break(1u);
LABEL_74:
  __break(1u);
}

            uint64_t v25 = v22 + 1;
            if (__OFADD__(v22, 1LL))
            {
              __break(1u);
            }

            else
            {
              if (v25 >= v1) {
                goto LABEL_54;
              }
              uint64_t v26 = *(void *)(v18 + 8 * v25);
              ++v22;
              if (v26) {
                goto LABEL_48;
              }
              char v22 = v25 + 1;
              if (v25 + 1 >= v1) {
                goto LABEL_54;
              }
              uint64_t v26 = *(void *)(v18 + 8 * v22);
              if (v26) {
                goto LABEL_48;
              }
              char v22 = v25 + 2;
              if (v25 + 2 >= v1) {
                goto LABEL_54;
              }
              uint64_t v26 = *(void *)(v18 + 8 * v22);
              if (v26) {
                goto LABEL_48;
              }
              char v22 = v25 + 3;
              if (v25 + 3 >= v1) {
                goto LABEL_54;
              }
              uint64_t v26 = *(void *)(v18 + 8 * v22);
              if (v26) {
                goto LABEL_48;
              }
              uint64_t v27 = v25 + 4;
              if (v27 >= v1)
              {
LABEL_54:
                swift_release(v17);
                uint64_t v30 = (uint64_t *)(v3
                                + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropBonjourBrowser_serviceNamesToBrowseResult);
                swift_beginAccess( v3 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropBonjourBrowser_serviceNamesToBrowseResult,  v41,  1LL,  0LL);
                unint64_t v31 = *v30;
                *uint64_t v30 = (uint64_t)&_swiftEmptyDictionarySingleton;
                swift_bridgeObjectRelease(v31);
                char v32 = *v37;
                *uint64_t v37 = (uint64_t)&_swiftEmptyDictionarySingleton;
                swift_bridgeObjectRelease(v32);
                uint64_t v33 = (uint64_t *)(v3
                                + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropBonjourBrowser_serviceNamesToRetryCount);
                swift_beginAccess( v3 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropBonjourBrowser_serviceNamesToRetryCount,  v40,  1LL,  0LL);
                char v34 = *v33;
                *uint64_t v33 = (uint64_t)&_swiftEmptyDictionarySingleton;
                swift_bridgeObjectRelease(v34);
                unint64_t v39 = 1;
                CurrentValueSubject.send(completion:)(&v39);
                swift_release(v38);
                return;
              }

              uint64_t v26 = *(void *)(v18 + 8 * v27);
              if (v26)
              {
                char v22 = v27;
LABEL_48:
                char v21 = (v26 - 1) & v26;
                uint64_t v24 = __clz(__rbit64(v26)) + (v22 << 6);
                goto LABEL_49;
              }

              while (1)
              {
                char v22 = v27 + 1;
                if (__OFADD__(v27, 1LL)) {
                  break;
                }
                if (v22 >= v1) {
                  goto LABEL_54;
                }
                uint64_t v26 = *(void *)(v18 + 8 * v22);
                ++v27;
                if (v26) {
                  goto LABEL_48;
                }
              }
            }

            __break(1u);
LABEL_58:
            char v35 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v7);
            swift_bridgeObjectRelease(v7);
            uint64_t v10 = *(void *)(v35 + OBJC_IVAR____TtC16DaemoniOSLibrary20SDAirDropAgentClient_bundleID + 8);
            swift_bridgeObjectRetain(v10);
            swift_unknownObjectRelease(v35);
          }
        }
      }

      swift_bridgeObjectRelease(v7);
    }

    uint64_t v10 = 0xE000000000000000LL;
    goto LABEL_16;
  }

    v104 = v49;
    NSErrorUserInfoKey v105 = (os_log_s *)Logger.logObject.getter(v104);
    v106 = static os_log_type_t.error.getter(v105);
    if (os_log_type_enabled(v105, v106))
    {
      v107 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v133 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)v107 = 138412290;
      if (v28)
      {
        v151 = (uint64_t)v104;
        v108 = v104;
      }

      else
      {
        v151 = 0LL;
      }

      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, v152, v107 + 4, v107 + 12);
      v109 = v133;
      *v133 = (uint64_t)v28;

      _os_log_impl((void *)&_mh_execute_header, v105, v106, "Could not convert response to data: %@", v107, 0xCu);
      v110 = sub_100183098(&qword_1006454E0);
      swift_arrayDestroy(v109, 1LL, v110);
      swift_slowDealloc(v109, -1LL, -1LL);
      swift_slowDealloc(v107, -1LL, -1LL);

      a3 = v134;
      goto LABEL_40;
    }

LABEL_37:
    a3 = v134;
    goto LABEL_40;
  }

  __break(1u);
  return result;
}

  __break(1u);
}

    uint64_t v11 = (v25 - 1) & v25;
    char v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    unint64_t v31 = 8 * v22;
    char v32 = *(void **)(*(void *)(v5 + 48) + v31);
    uint64_t v33 = *(void **)(*(void *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      char v34 = v32;
      char v35 = v33;
    }

    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    id v16 = -1LL << *(_BYTE *)(v8 + 32);
    id v17 = result & ~v16;
    id v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      id v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      char v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        unsigned int v29 = v18 == v28;
        if (v18 == v28) {
          id v18 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      id v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    int v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v2sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = v32;
    *(void *)(*(void *)(v8 + 56) + v2sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v37;
  uint64_t v24 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  unsigned int v36 = 1LL << *(_BYTE *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v36;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  void *v3 = v8;
  return result;
}

    uint64_t v11 = (v26 - 1) & v26;
    uint64_t v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    char v32 = 16 * v23;
    uint64_t v33 = *(void *)(v5 + 48) + v32;
    char v35 = *(void *)v33;
    char v34 = *(void *)(v33 + 8);
    unsigned int v36 = (uint64_t *)(*(void *)(v5 + 56) + v32);
    uint64_t v37 = *v36;
    uint64_t v38 = (const char *)v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(*(const char **)(v33 + 8));
      swift_bridgeObjectRetain(v38);
    }

    Hasher.init(_seed:)(v44);
    String.hash(into:)(v44, v35, v34);
    uint64_t result = Hasher._finalize()();
    unint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    id v16 = result & ~v15;
    id v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      id v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v28 = 0;
      unsigned int v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v30 = v17 == v29;
        if (v17 == v29) {
          id v17 = 0LL;
        }
        v28 |= v30;
        unint64_t v31 = *(void *)(v12 + 8 * v17);
      }

      while (v31 == -1);
      id v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    id v19 = 16 * v18;
    int v20 = (void *)(*(void *)(v8 + 48) + v19);
    *int v20 = v35;
    v20[1] = v34;
    char v21 = (void *)(*(void *)(v8 + 56) + v19);
    CFStringRef v21 = v37;
    v21[1] = v38;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v40;
  uint64_t v25 = (void *)(v5 + 64);
  if ((v43 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  unint64_t v39 = 1LL << *(_BYTE *)(v5 + 32);
  if (v39 >= 64) {
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v25 = -1LL << v39;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  void *v3 = v8;
  return result;
}

    id v12 = (v25 - 1) & v25;
    char v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    unint64_t v31 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v22);
    uint64_t v33 = *v31;
    char v32 = v31[1];
    char v34 = *(const char **)(*(void *)(v6 + 56) + 8 * v22);
    if ((v39 & 1) == 0)
    {
      *(void *)&char v35 = swift_bridgeObjectRetain((const char *)v31[1]).n128_u64[0];
      swift_bridgeObjectRetain(v34, v35);
    }

    Hasher.init(_seed:)(v40);
    String.hash(into:)(v40, v33, v32);
    uint64_t result = Hasher._finalize()();
    id v16 = -1LL << *(_BYTE *)(v9 + 32);
    id v17 = result & ~v16;
    id v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      id v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      char v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        unsigned int v29 = v18 == v28;
        if (v18 == v28) {
          id v18 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      id v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    int v20 = (void *)(*(void *)(v9 + 48) + 16 * v19);
    *int v20 = v33;
    v20[1] = v32;
    *(void *)(*(void *)(v9 + 56) + 8 * v19) = v34;
    ++*(void *)(v9 + 16);
  }

  swift_release(v6);
  uint64_t v24 = (void *)(v6 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  unsigned int v36 = 1LL << *(_BYTE *)(v6 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v36;
  }
  *(void *)(v6 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v6);
  *uint64_t v4 = v9;
  return result;
}

    id v12 = (v25 - 1) & v25;
    char v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    unint64_t v31 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v22);
    uint64_t v33 = *v31;
    char v32 = v31[1];
    char v34 = *(void **)(*(void *)(v6 + 56) + 8 * v22);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      char v35 = v34;
    }

    Hasher.init(_seed:)(v41);
    String.hash(into:)(v41, v33, v32);
    uint64_t result = Hasher._finalize()();
    id v16 = -1LL << *(_BYTE *)(v9 + 32);
    id v17 = result & ~v16;
    id v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      id v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      char v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        unsigned int v29 = v18 == v28;
        if (v18 == v28) {
          id v18 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      id v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    int v20 = (void *)(*(void *)(v9 + 48) + 16 * v19);
    *int v20 = v33;
    v20[1] = v32;
    *(void *)(*(void *)(v9 + 56) + 8 * v19) = v34;
    ++*(void *)(v9 + 16);
  }

  swift_release(v6);
  uint64_t v4 = v37;
  uint64_t v24 = (void *)(v6 + 64);
  if ((v40 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  unsigned int v36 = 1LL << *(_BYTE *)(v6 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v36;
  }
  *(void *)(v6 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v6);
  *uint64_t v4 = v9;
  return result;
}

    id v12 = (v25 - 1) & v25;
    char v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    unint64_t v31 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v22);
    uint64_t v33 = *v31;
    char v32 = v31[1];
    char v34 = *(void *)(*(void *)(v6 + 56) + 8 * v22);
    if ((v39 & 1) == 0) {
      swift_bridgeObjectRetain(v31[1]);
    }
    Hasher.init(_seed:)(v40);
    String.hash(into:)(v40, v33, v32);
    uint64_t result = Hasher._finalize()();
    id v16 = -1LL << *(_BYTE *)(v9 + 32);
    id v17 = result & ~v16;
    id v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      id v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      char v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        unsigned int v29 = v18 == v28;
        if (v18 == v28) {
          id v18 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      id v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    int v20 = (void *)(*(void *)(v9 + 48) + 16 * v19);
    *int v20 = v33;
    v20[1] = v32;
    *(void *)(*(void *)(v9 + 56) + 8 * v19) = v34;
    ++*(void *)(v9 + 16);
  }

  swift_release(v6);
  uint64_t v4 = v36;
  uint64_t v24 = (void *)(v6 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  char v35 = 1LL << *(_BYTE *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v35;
  }
  *(void *)(v6 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v6);
  *uint64_t v4 = v9;
  return result;
}

    id v12 = (v25 - 1) & v25;
    char v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    unint64_t v31 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v22);
    uint64_t v33 = *v31;
    char v32 = v31[1];
    char v34 = *(void *)(*(void *)(v6 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      swift_retain(v34);
    }

    Hasher.init(_seed:)(v39);
    String.hash(into:)(v39, v33, v32);
    uint64_t result = Hasher._finalize()();
    id v16 = -1LL << *(_BYTE *)(v9 + 32);
    id v17 = result & ~v16;
    id v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      id v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      char v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        unsigned int v29 = v18 == v28;
        if (v18 == v28) {
          id v18 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      id v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    int v20 = (void *)(*(void *)(v9 + 48) + 16 * v19);
    *int v20 = v33;
    v20[1] = v32;
    *(void *)(*(void *)(v9 + 56) + 8 * v19) = v34;
    ++*(void *)(v9 + 16);
  }

  swift_release(v6);
  uint64_t v24 = (void *)(v6 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  char v35 = 1LL << *(_BYTE *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v35;
  }
  *(void *)(v6 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v6);
  *uint64_t v4 = v9;
  return result;
}

    uint64_t v11 = (v25 - 1) & v25;
    char v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    unint64_t v31 = *(const char **)(*(void *)(v5 + 56) + 8 * v22);
    unsigned int v36 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v22);
    char v32 = *(void *)(*(void *)(v5 + 48) + 16 * v22 + 8);
    if ((a2 & 1) == 0)
    {
      sub_10019BA8C(v36, v32);
      swift_bridgeObjectRetain(v31);
    }

    Hasher.init(_seed:)(v37);
    Data.hash(into:)(v37, v36, v32);
    uint64_t result = Hasher._finalize()();
    id v16 = -1LL << *(_BYTE *)(v8 + 32);
    id v17 = result & ~v16;
    id v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      id v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
      int v20 = v36;
    }

    else
    {
      uint64_t v27 = 0;
      char v28 = (unint64_t)(63 - v16) >> 6;
      int v20 = v36;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        unsigned int v29 = v18 == v28;
        if (v18 == v28) {
          id v18 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      id v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    *(_OWORD *)(*(void *)(v8 + 48) + 16 * v19) = v20;
    *(void *)(*(void *)(v8 + 56) + 8 * v19) = v31;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v34;
  uint64_t v24 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v33 = 1LL << *(_BYTE *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v24, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v33;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  void *v3 = v8;
  return result;
}

    id v12 = (v25 - 1) & v25;
    char v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    unint64_t v31 = *(void *)(v6 + 48) + 16 * v22;
    uint64_t v33 = *(void *)v31;
    char v32 = *(void *)(v31 + 8);
    char v34 = *(_BYTE *)(*(void *)(v6 + 56) + v22);
    if ((v39 & 1) == 0) {
      swift_bridgeObjectRetain(*(const char **)(v31 + 8));
    }
    Hasher.init(_seed:)(v40);
    String.hash(into:)(v40, v33, v32);
    uint64_t result = Hasher._finalize()();
    id v16 = -1LL << *(_BYTE *)(v9 + 32);
    id v17 = result & ~v16;
    id v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      id v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      char v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        unsigned int v29 = v18 == v28;
        if (v18 == v28) {
          id v18 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      id v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    int v20 = (void *)(*(void *)(v9 + 48) + 16 * v19);
    *int v20 = v33;
    v20[1] = v32;
    *(_BYTE *)(*(void *)(v9 + 56) + v19) = v34;
    ++*(void *)(v9 + 16);
  }

  swift_release(v6);
  uint64_t v4 = v36;
  uint64_t v24 = (void *)(v6 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  char v35 = 1LL << *(_BYTE *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v24 = -1LL << v35;
  }
  *(void *)(v6 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v6);
  *uint64_t v4 = v9;
  return result;
}

        id v12 = (v22 - 1) & v22;
        int v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }

      char v28 = *(void *)(*(void *)(v5 + 48) + 8 * v20);
      unsigned int v29 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v20);
      uint64_t v30 = *v29;
      unint64_t v31 = (const char *)v29[1];
      if ((v36 & 1) == 0) {
        swift_bridgeObjectRetain(v31);
      }
      Hasher.init(_seed:)(v37);
      Hasher._combine(_:)(v28);
      uint64_t result = Hasher._finalize()();
      id v14 = -1LL << *(_BYTE *)(v8 + 32);
      unint64_t v15 = result & ~v14;
      id v16 = v15 >> 6;
      if (((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        id v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          uint64_t v26 = v16 == v25;
          if (v16 == v25) {
            id v16 = 0LL;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v16);
        }

        while (v27 == -1);
        id v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }

      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      *(void *)(*(void *)(v8 + 48) + 8 * v17) = v28;
      id v18 = (void *)(*(void *)(v8 + 56) + 16 * v17);
      *id v18 = v30;
      v18[1] = v31;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
LABEL_43:
  void *v3 = v8;
  return result;
}

        id v12 = (v25 - 1) & v25;
        uint64_t v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }

      unint64_t v31 = 16 * v23;
      char v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
      char v34 = *v32;
      uint64_t v33 = v32[1];
      unint64_t v39 = *(_OWORD *)(*(void *)(v5 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain(v33);
        swift_unknownObjectRetain(v39);
      }

      Hasher.init(_seed:)(v40);
      String.hash(into:)(v40, v34, v33);
      uint64_t result = Hasher._finalize()();
      id v16 = -1LL << *(_BYTE *)(v9 + 32);
      id v17 = result & ~v16;
      id v18 = v17 >> 6;
      if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        id v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v27 = 0;
        char v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }

          unsigned int v29 = v18 == v28;
          if (v18 == v28) {
            id v18 = 0LL;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v13 + 8 * v18);
        }

        while (v30 == -1);
        id v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }

      *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
      int v20 = 16 * v19;
      char v21 = (void *)(*(void *)(v9 + 48) + v20);
      CFStringRef v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(void *)(v9 + 56) + v2sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = v39;
      ++*(void *)(v9 + 16);
    }
  }

  uint64_t result = swift_release(v5);
  void *v3 = v9;
  return result;
}

  uint64_t v26 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v26,  1046LL,  0);
  __break(1u);
  return result;
}

  uint64_t v54 = *v21;
  unint64_t v55 = type metadata accessor for SFNWInterfaceType(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 104LL))(v80, v54, v55);
}

  v40(v1, 1LL, 1LL, v7);
LABEL_34:
  swift_bridgeObjectRelease((const char *)v16);
  sub_1001956C8(v1);
  id v47 = v63;
  uint64_t v48 = v59[2];
  swift_release(v59);
  unint64_t v49 = *((void *)v47 + 2);
  swift_release(v47);
  uint64_t result = v48 + v49;
  if (__OFADD__(v48, v49)) {
    __break(1u);
  }
  return result;
}

  uint64_t v70 = v38 + 2;
  uint64_t v71 = *v38;
  uint64_t v72 = sub_100183098(&qword_100646EA0);
  swift_arrayDestroy(v70, v71, v72);
  uint64_t v73 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v37);
  id v75 = (id)SFLocalizedStringForKey(v73, v74);

  if (!v75)
  {
    __break(1u);
    JUMPOUT(0x100441EF8LL);
  }

  uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
  v78 = v77;

  uint64_t v79 = sub_100183098(&qword_1006483E0);
  v80 = swift_allocObject(v79, 72LL, 7LL);
  *(_OWORD *)(v80 + 16) = xmmword_1004CDCA0;
  *(void *)(v80 + 56) = &type metadata for String;
  *(void *)(v80 + 64) = sub_10021366C();
  v81 = v87;
  *(void *)(v80 + 32) = v20;
  *(void *)(v80 + 4sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = v81;
  v82 = static String.localizedStringWithFormat(_:_:)(v76, v78, v80);
  *(void *)&v83 = swift_bridgeObjectRelease(v78).n128_u64[0];
  swift_bridgeObjectRelease((const char *)v80, v83);
  return v82;
}

  uint64_t v44 = *(void *)(v2 + 192);
  char v46 = *(void *)(v2 + 168);
  unint64_t v45 = *(void *)(v2 + 176);
  id v47 = *(void *)(v2 + 152);
  uint64_t v48 = *(void *)(v2 + 160);

  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v47);
  sub_10018709C((void *)(v2 + 56));
  sub_10018709C((void *)(v2 + 16));
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

LABEL_42:
  if (dword_1006429A8 <= 90 && (dword_1006429A8 != -1 || _LogCategory_Initialize(&dword_1006429A8, 90LL))) {
    LogPrintF( &dword_1006429A8,  "-[SDAppleIDServerTask _parseFetchCertificateResponse:error:]",  90LL,  "### Failed to create expiration date\n");
  }
LABEL_46:
  uint64_t v27 = CFStringGetTypeID();
  char v28 = CFDictionaryGetTypedValue(v11, @"certificate", v27, 0LL);
  id v17 = (void *)objc_claimAutoreleasedReturnValue(v28);
  if (v17)
  {
    [v5 setObject:v17 forKeyedSubscript:@"CertificatePEM"];
  }

  else if (dword_1006429A8 <= 90 {
         && (dword_1006429A8 != -1 || _LogCategory_Initialize(&dword_1006429A8, 90LL)))
  }
  {
    LogPrintF( &dword_1006429A8,  "-[SDAppleIDServerTask _parseFetchCertificateResponse:error:]",  90LL,  "### No certificate PEM\n");
  }

  unsigned int v29 = CFStringGetTypeID();
  uint64_t v30 = CFDictionaryGetTypedValue(v11, @"serialNumber", v29, 0LL);
  id v16 = (void *)objc_claimAutoreleasedReturnValue(v30);
  if (v16)
  {
    [v5 setObject:v16 forKeyedSubscript:@"CertificateSerialNumber"];
  }

  else if (dword_1006429A8 <= 90 {
         && (dword_1006429A8 != -1 || _LogCategory_Initialize(&dword_1006429A8, 90LL)))
  }
  {
    LogPrintF( &dword_1006429A8,  "-[SDAppleIDServerTask _parseFetchCertificateResponse:error:]",  90LL,  "### No certificate serial number\n");
  }

  if (v22 != 2)
  {
LABEL_64:
    uint64_t v33 = 0LL;
    char v35 = 0LL;
    goto LABEL_73;
  }

  NSNumber = NSDictionaryGetNSNumber(v4, @"delay", 0LL);
  char v32 = (void *)objc_claimAutoreleasedReturnValue(NSNumber);
  uint64_t v33 = v32;
  if (!v32)
  {
    if (dword_1006429A8 <= 60
      && (dword_1006429A8 != -1 || _LogCategory_Initialize(&dword_1006429A8, 60LL)))
    {
      LogPrintF( &dword_1006429A8,  "-[SDAppleIDServerTask _parseFetchCertificateResponse:error:]",  60LL,  "### Certificate status is pending, but delay not provided.\n");
    }

    char v35 = 0LL;
    goto LABEL_70;
  }

  char v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  (uint64_t)[v32 integerValue] / 1000));
  char v35 = v34;
  if (!v34 || ((unint64_t)[v34 integerValue] & 0x8000000000000000) != 0)
  {
LABEL_70:
    unsigned int v36 = &off_1005F7828;
    goto LABEL_71;
  }

  if ((uint64_t)[v35 integerValue] >= 601)
  {
    unsigned int v36 = &off_1005F7840;
LABEL_71:

    char v35 = v36;
  }

  [v5 setObject:v35 forKeyedSubscript:@"Delay"];
LABEL_73:
  uint64_t v37 = CFStringGetTypeID();
  uint64_t v38 = CFDictionaryGetTypedValue(v4, @"intermediateCaCertificate", v37, 0LL);
  unint64_t v39 = objc_claimAutoreleasedReturnValue(v38);
  if (v39)
  {
    char v40 = (void *)v39;
    [v5 setObject:v39 forKeyedSubscript:@"IntermediateCertificate"];
    char v41 = 0;
  }

  else
  {
    if (dword_1006429A8 <= 90
      && (dword_1006429A8 != -1 || _LogCategory_Initialize(&dword_1006429A8, 90LL)))
    {
      LogPrintF( &dword_1006429A8,  "-[SDAppleIDServerTask _parseFetchCertificateResponse:error:]",  90LL,  "### No intermediate certificate PEM\n",  v43,  v44);
    }

    char v41 = 0;
    char v40 = 0LL;
  }

    id v91 = v1;
LABEL_43:
    sub_100187100(v91, &qword_10064DBB0);
    uint64_t v92 = *(void *)(v0 + 776);
    v93 = *(void *)(v0 + 768);
    swift_task_dealloc(*(void *)(v0 + 784));
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  sub_1002499DC(*(void *)(v36 + 56) + 48 * v37, v0 + 208);
  sub_1001CCE4C((__int128 *)(v0 + 208), (_OWORD *)(v0 + 256));
  swift_endAccess(v0 + 592);
  swift_bridgeObjectRelease(v34);
  unint64_t v39 = *(void *)(v0 + 280);
  char v40 = *(void *)(v0 + 288);
  sub_10019A708((void *)(v0 + 256), v39);
  char v41 = *(int **)(v40 + 48);
  v98 = (int *)((char *)v41 + *v41);
  unsigned int v42 = (void *)swift_task_alloc(v41[1]);
  *(void *)(v0 + 816) = v42;
  uint64_t v43 = sub_1002EFF98;
LABEL_49:
  __CFString *v42 = v0;
  v42[1] = v43;
  return ((uint64_t (*)(void, uint64_t, uint64_t))v98)(*(void *)(v0 + 744), v39, v40);
}

      if (v74 < 0) {
        v98 = v74;
      }
      else {
        v98 = v74 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain((const char *)v74);
      uint64_t v79 = _CocoaArrayWrapper.endIndex.getter(v98);
      swift_bridgeObjectRelease((const char *)v74);
      goto LABEL_31;
    }

    swift_bridgeObjectRelease_n(v74, 2LL);
    v80 = v101;
LABEL_36:
    uint64_t v86 = *v100;
    v87 = v100[1];
    id v88 = swift_getObjectType(*v100);
    uint64_t v89 = (void (*)(uint64_t, char *))*((void *)v87 + 6);
    swift_unknownObjectRetain(v86);
    v89(v88, v87);
    id v90 = v105;
    swift_unknownObjectRelease(v86);
    id v91 = (void *)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
    unsigned int v52 = v104;
    sub_10019BA8C(v90, v104);
    uint64_t v92 = [v91 standardUserDefaults];
    sub_10019BA8C(v90, v52);
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100189B20(v90, v52);
    id v94 = String._bridgeToObjectiveC()();
    [v92 setObject:isa forKey:v94];
    sub_100189B20(v90, v52);

    char v57 = (os_log_s *)Logger.logObject.getter(v95);
    uint64_t v96 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v57, v96))
    {
      v97 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v97 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v96, "Updating hashes completed.", v97, 2u);
      swift_slowDealloc(v97, -1LL, -1LL);
      sub_100189B0C(v80, v102);

      uint64_t v60 = v90;
      goto LABEL_21;
    }

    sub_100189B20(v90, v52);
    v84 = v80;
    uint64_t v85 = v102;
LABEL_33:
    sub_100189B0C(v84, v85);

    goto LABEL_34;
  }

  *(void *)&char v41 = swift_bridgeObjectRelease((const char *)v36).n128_u64[0];
  swift_bridgeObjectRelease(v34, v41);
  uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
  uint64_t v44 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v43, v44))
  {
    unint64_t v45 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v45 = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Load hash db from disk", v45, 2u);
    swift_slowDealloc(v45, -1LL, -1LL);
  }

  char v46 = *(void *)&v8[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashDB];
  id v47 = *(void *)&v8[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAirDropContactHashManager_hashDB + 8];
  uint64_t v48 = swift_getObjectType(v46);
  unint64_t v49 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
  swift_unknownObjectRetain(v46);
  v49(v48, v47);
  uint64_t v50 = v105;

  swift_unknownObjectRelease(v46);
  char v51 = (void *)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
  unsigned int v52 = v104;
  sub_10019BA8C(v50, v104);
  uint64_t v53 = [v51 standardUserDefaults];
  sub_10019BA8C(v50, v52);
  uint64_t v54 = Data._bridgeToObjectiveC()().super.isa;
  sub_100189B20(v50, v52);
  unint64_t v55 = String._bridgeToObjectiveC()();
  [v53 setObject:v54 forKey:v55];
  sub_100189B20(v50, v52);

  char v57 = (os_log_s *)Logger.logObject.getter(v56);
  unsigned int v58 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v57, v58))
  {
    sub_100189B20(v50, v52);
    v84 = v25;
    uint64_t v85 = v26;
    goto LABEL_33;
  }

  uint64_t v59 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
  *(_WORD *)uint64_t v59 = 0;
  _os_log_impl((void *)&_mh_execute_header, v57, v58, "No hash updates needed.", v59, 2u);
  swift_slowDealloc(v59, -1LL, -1LL);
  sub_100189B0C(v25, v26);

  uint64_t v60 = v50;
LABEL_21:
  sub_100189B20(v60, v52);
LABEL_34:
  sub_100224FF8((uint64_t)v119, v120);
}

LABEL_80:
  if (a4) {
    *a4 = v41;
  }

  return v5;
}

    uint64_t v26 = "?";
    goto LABEL_81;
  }

    v228 = v58 + v54[20];
    v229 = type metadata accessor for SFAirDrop.DeclineAction(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v229 - 8) + 8LL))(v228, v229);
    return;
  }

  v255 = v42;
  (*(void (**)(char *, uint64_t))(v42 + 96))(v45, v41);
  v122 = ((uint64_t (*)(void))swift_bridgeObjectRelease)(*(void *)v45);
  v123 = (uint64_t)v249;
  SFAirDropSend.Transfer.id.getter(v122);
  v124 = v262;
  v125 = (int *)(v262 + 5);
  swift_beginAccess(v262 + 5, v265, 32LL, 0LL);
  v126 = v124[5];
  v127 = v261;
  if (!v126[2] || (v128 = sub_1003AD580(v123), (v129 & 1) == 0))
  {
    swift_endAccess(v265);
    ((void (*)(uint64_t, uint64_t))v260->info)(v123, v127);
    (*(void (**)(char *, uint64_t))(v255 + 8))(v257, v59);
    goto LABEL_80;
  }

  v256 = v125;
  v250 = v52;
  v130 = v236;
  sub_100396EBC(v126[7] + *(void *)(v258 + 72) * v128, v236);
  v131 = v241;
  sub_1001A4B40(v130, v241, type metadata accessor for SDAirDropLegacySessionLogger.Transfer);
  swift_endAccess(v265);
  v260 = (const __CFString *)v260->info;
  ((void (*)(uint64_t, uint64_t))v260)(v123, v127);
  v132 = v259;
  v133 = v131 + v259[7];
  v134 = v237;
  sub_1001915A4(v133, v237, &qword_1006457E8);
  v135 = v251;
  v136 = v252;
  v137 = (*(uint64_t (**)(uint64_t, uint64_t, void *))(v251 + 48))(v134, 1LL, v252);
  v138 = sub_100187100(v134, &qword_1006457E8);
  if (v137 != 1)
  {
    (*(void (**)(char *, uint64_t))(v255 + 8))(v257, v59);
    v179 = v131;
LABEL_79:
    sub_100396F00(v179);
    unsigned int v58 = (uint64_t)v250;
    goto LABEL_80;
  }

  v231 = v59;
  v139 = v235;
  Date.init()(v138);
  sub_100187100(v133, &qword_1006457E8);
  (*(void (**)(uint64_t, char *, void *))(v135 + 16))(v133, v139, v136);
  (*(void (**)(uint64_t, void, uint64_t, void *))(v135 + 56))(v133, 0LL, 1LL, v136);
  v140 = Date.timeIntervalSince(_:)(v131);
  v141 = v132[5];
  v142 = (double)*(uint64_t *)(v131 + v141);
  SFAirDropSend.Transfer.bundleIdentifier.getter();
  if (v143)
  {
    v144 = v143;
    v145._countAndFlagsBits = 0x6C7070612E6D6F63LL;
    v145._object = (void *)0xEA00000000002E65LL;
    if (String.hasPrefix(_:)(v145)) {
      goto LABEL_33;
    }
    swift_bridgeObjectRelease(v144);
  }

  v144 = 0xE000000000000000LL;
LABEL_33:
  v146 = v142 / v140;
  v147 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v144);
  v148 = String._bridgeToObjectiveC()();
  v149 = v262;
  v150 = [v262[2] discoverableLevel];
  swift_beginAccess(v149 + 4, v265, 0LL, 0LL);
  v151 = v149[4];
  v152 = swift_bridgeObjectRetain(v151);
  v153 = sub_100392670(v152);
  swift_bridgeObjectRelease(v151);
  v154 = *(void *)(v153 + 16);
  if (v154)
  {
    v155 = 0LL;
    v156 = v154 - 1;
    v157 = 1;
    while (1)
    {
      while ((v157 & 1) == 0)
      {
        if (v156 == v155)
        {
          swift_bridgeObjectRelease(v153);
          goto LABEL_74;
        }

        v157 = 0;
        ++v155;
      }

      v157 = *(_BYTE *)(v153 + v155 + 32);
      if (v156 == v155) {
        break;
      }
      ++v155;
    }

    swift_bridgeObjectRelease(v153);
    if ((v157 & 1) != 0)
    {
      v214 = 1LL;
      goto LABEL_75;
    }

LABEL_53:
  if (v34) {
    *char v34 = v32;
  }

  return v11;
}

      id v14 = (char *)v14 + 1;
    }

    while (v9 != v14);
    uint64_t v37 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v82,  v87,  16LL);
    id v9 = v37;
  }

  while (v37);
LABEL_60:

  enhancedDiscoveryShouldRun = self->_enhancedDiscoveryShouldRun;
  unint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v61, "allObjects"));
  char v40 = 0LL;
  if (v86 && (v11 & 1) == 0) {
    char v40 = -[NSData initWithBytes:length:](objc_alloc(&OBJC_CLASS___NSData), "initWithBytes:length:", &v86, 1LL);
  }
  unsigned int v42 = (a4 & 1) == 0 || !enhancedDiscoveryShouldRun;
  uint64_t v43 = 30LL;
  if (v69 > 30) {
    uint64_t v43 = v69;
  }
  if (v42) {
    uint64_t v44 = v12;
  }
  else {
    uint64_t v44 = v12 | 4;
  }
  if (v42) {
    unint64_t v45 = v69;
  }
  else {
    unint64_t v45 = v43;
  }
  if ((v10 & 1) != 0) {
    char v46 = 0LL;
  }
  else {
    char v46 = v65;
  }
  if (v45) {
    id v47 = v45;
  }
  else {
    id v47 = 20LL;
  }
  if (v59 == 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v48 = 10LL;
  }
  else {
    uint64_t v48 = v59;
  }
  unint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(-[SDNearbyAgent _bleUpdateUseCases:](self, "_bleUpdateUseCases:", v62, v54));
  v70[0] = _NSConcreteStackBlock;
  v70[1] = 3221225472LL;
  v70[2] = sub_10015B7B0;
  v70[3] = &unk_1005CFBD0;
  uint64_t v71 = v55;
  uint64_t v72 = v39;
  v80 = v44;
  v81 = v68 & 1;
  uint64_t v77 = v46;
  v78 = v47;
  uint64_t v79 = v48;
  uint64_t v73 = v40;
  __int16 v74 = v60;
  id v75 = v49;
  uint64_t v76 = self;
  uint64_t v50 = v60;
  char v51 = v40;
  unsigned int v52 = v39;
  uint64_t v53 = v55;
  [v53 performUpdate:v70];
}

    if (v5 < 0) {
      uint64_t v26 = v5;
    }
    else {
      uint64_t v26 = v11;
    }
    swift_bridgeObjectRetain((const char *)v5);
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease((const char *)v5);
    id v19 = v27 + v6;
    if (!__OFADD__(v27, v6)) {
      goto LABEL_27;
    }
LABEL_58:
    __break(1u);
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

    if (v5 < 0) {
      uint64_t v26 = v5;
    }
    else {
      uint64_t v26 = v11;
    }
    swift_bridgeObjectRetain((const char *)v5);
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease((const char *)v5);
    id v19 = v27 + v6;
    if (!__OFADD__(v27, v6)) {
      goto LABEL_27;
    }
LABEL_58:
    __break(1u);
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

void sub_1000A8B78(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = a3;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 16LL));
  if (*(_BYTE *)(*(void *)(a1 + 32) + 9LL))
  {
    uint64_t v11 = 4294960573LL;
LABEL_11:
    [*(id *)(a1 + 32) _callResponseHandlerWithInfo:0 error:v11];
    goto LABEL_5;
  }

  if ((_DWORD)a4)
  {
    uint64_t v11 = 201220LL;
    if (dword_1006429A8 <= 60
      && (dword_1006429A8 != -1 || _LogCategory_Initialize(&dword_1006429A8, 60LL)))
    {
      LogPrintF( &dword_1006429A8,  "-[SDAppleIDServerTask _sendRequest]_block_invoke",  60LL,  "### Get GS token failed with error %#m\n",  a4);
    }

    goto LABEL_11;
  }

  id v12 = 0LL;
  sub_1001719DC(v7, v8, &v12);
  id v9 = v12;
  if (v9)
  {
    uint64_t v10 = v9;
    [*(id *)(a1 + 32) setGsToken:v9];
    [*(id *)(a1 + 32) _handleGSTokenIsAvailable];
  }

void sub_1000A8DE0(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___SDConnectionManager);
  uint64_t v2 = (void *)qword_100656FF8;
  qword_100656FF8 = (uint64_t)v1;
}

void sub_1000A90C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
}

void sub_1000A90F8(uint64_t a1)
{
  uint64_t v2 = daemon_log(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1000A9D40();
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained xpcConnection]);
  [v5 invalidate];
}

void sub_1000A9160(uint64_t a1)
{
  uint64_t v2 = daemon_log(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_1000A9D6C();
  }

  uint64_t v4 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained(v4);
  [WeakRetained cleanUpConnections];

  id v6 = objc_loadWeakRetained(v4);
  [v6 setXpcConnection:0];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000A9234;
  block[3] = &unk_1005CB220;
  objc_copyWeak(&v8, v4);
  dispatch_async(&_dispatch_main_q, block);
  objc_destroyWeak(&v8);
}

void sub_1000A9234(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained delegate]);
  id v3 = objc_loadWeakRetained(v1);
  [v2 connectionManagerDidInvalidate:v3];
}

void sub_1000A92EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 48);
  if (v3)
  {
    [v3 stop];
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 48);
    *(void *)(v4 + 4_Block_object_dispose(va, 8) = 0LL;

    uint64_t v2 = *(void *)(a1 + 32);
  }

  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  id v6 = *(id *)(v2 + 72);
  id v7 = [v6 countByEnumeratingWithState:&v24 objects:v29 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v25;
    do
    {
      uint64_t v10 = 0LL;
      do
      {
        if (*(void *)v25 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void *)(*((void *)&v24 + 1) + 8LL * (void)v10);
        id v12 = (void *)objc_claimAutoreleasedReturnValue(+[SDStreamManager sharedManager](&OBJC_CLASS___SDStreamManager, "sharedManager"));
        [v12 closeStreamsForIdentifier:v11];

        uint64_t v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v24 objects:v29 count:16];
    }

    while (v8);
  }

  [*(id *)(*(void *)(a1 + 32) + 72) removeAllObjects];
  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) unlockSessions]);
  id v14 = [v13 copy];

  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v15 = v14;
  id v16 = [v15 countByEnumeratingWithState:&v20 objects:v28 count:16];
  if (v16)
  {
    id v17 = v16;
    uint64_t v18 = *(void *)v21;
    do
    {
      id v19 = 0LL;
      do
      {
        if (*(void *)v21 != v18) {
          objc_enumerationMutation(v15);
        }
        objc_msgSend(*(id *)(*((void *)&v20 + 1) + 8 * (void)v19), "invalidate", (void)v20);
        id v19 = (char *)v19 + 1;
      }

      while (v17 != v19);
      id v17 = [v15 countByEnumeratingWithState:&v20 objects:v28 count:16];
    }

    while (v17);
  }
}

void sub_1000A98A8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 UUIDString]);

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[SDStreamManager sharedManager](&OBJC_CLASS___SDStreamManager, "sharedManager"));
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 16LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1000A998C;
  v7[3] = &unk_1005CB770;
  id v8 = *(id *)(a1 + 48);
  [v4 getContinuationStreamsForMessage:v5 bundleID:v6 usingID:v3 completionHandler:v7];

  [*(id *)(*(void *)(a1 + 40) + 72) addObject:v3];
}

void sub_1000A998C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void (**)(uint64_t, id, uint64_t))(v4 + 16);
  id v6 = a2;
  v5(v4, v6, a3);
  [v6 closeFile];
}

id sub_1000A9A98(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 64) addObject:*(void *)(a1 + 40)];
}

void sub_1000A9AD8(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
  [v1 handleAppleAccountSignIn];
}

void sub_1000A9B40(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
  [v1 handleAppleAccountSignOut];
}

id sub_1000A9BF0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 64) removeObject:*(void *)(a1 + 40)];
}

void sub_1000A9D40()
{
}

void sub_1000A9D6C()
{
}

void sub_1000A9D98()
{
}

void sub_1000A9DC4()
{
}

void sub_1000A9DF0()
{
}

uint64_t SDUnlockSetupRequestReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 36) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_45;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_47;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_45:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_47:
        uint64_t v32 = 28LL;
        goto LABEL_52;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 36) |= 1u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1LL || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_51;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_51:
        uint64_t v32 = 24LL;
LABEL_52:
        *(_DWORD *)(a1 + v32) = v14;
        continue;
      case 3u:
        uint64_t Data = PBReaderReadData(a2);
        uint64_t v23 = objc_claimAutoreleasedReturnValue(Data);
        uint64_t v24 = 8LL;
        goto LABEL_36;
      case 4u:
        uint64_t v25 = PBReaderReadData(a2);
        uint64_t v23 = objc_claimAutoreleasedReturnValue(v25);
        uint64_t v24 = 16LL;
LABEL_36:
        __int128 v26 = *(void **)(a1 + v24);
        *(void *)(a1 + v24) = v23;

        continue;
      case 5u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v29 = 0LL;
        *(_BYTE *)(a1 + 36) |= 4u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      unint64_t v30 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v30 == -1LL || v30 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v31 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 1;
      v29 |= (unint64_t)(v31 & 0x7F) << v27;
      if ((v31 & 0x80) == 0) {
        goto LABEL_54;
      }
      v27 += 7;
      BOOL v9 = v28++ >= 9;
      if (v9)
      {
        uint64_t v29 = 0LL;
        goto LABEL_56;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_54:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v29 = 0LL;
    }
LABEL_56:
    *(_BYTE *)(a1 + 32) = v29 != 0;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1000AB280(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (!*(_BYTE *)(v1 + 8))
  {
    *(_BYTE *)(v1 + _Block_object_dispose(va, 8) = 1;
    *(_DWORD *)(*(void *)(result + 32) + 72LL) = 0;
    *(_DWORD *)(*(void *)(result + 32) + 40LL) = 0;
    *(void *)(*(void *)(result + 32) + 48LL) = 0LL;
    *(void *)(*(void *)(result + 32) + 32LL) = 0LL;
  }

  return result;
}

uint64_t sub_1000AB5C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v2 + 24) && *(_BYTE *)(v2 + 8))
  {
    uLongf destLen = compressBound(*(void *)(a1 + 64));
    uint64_t v3 = (Bytef *)malloc(destLen);
    double Current = CFAbsoluteTimeGetCurrent();
    compress(v3, &destLen, *(const Bytef **)(a1 + 72), *(void *)(a1 + 64));
    double v5 = CFAbsoluteTimeGetCurrent() - Current;
    uLongf v6 = destLen;
    uint64_t v7 = 1LL;
  }

  else
  {
    uint64_t v7 = 0LL;
    uLongf v6 = *(void *)(a1 + 64);
    uint64_t v3 = *(Bytef **)(a1 + 72);
    double v5 = 0.0;
  }

  char v8 = *(dispatch_semaphore_s **)(a1 + 40);
  if (v8) {
    dispatch_semaphore_wait(v8, 0xFFFFFFFFFFFFFFFFLL);
  }
  double v9 = CFAbsoluteTimeGetCurrent();
  [*(id *)(a1 + 32) sendOutgoingChunk:v3 length:v6 compressed:v7];
  CFAbsoluteTime v10 = CFAbsoluteTimeGetCurrent();
  uint64_t v11 = *(void *)(a1 + 32);
  char v12 = *(dispatch_queue_s **)(v11 + 96);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000AB708;
  block[3] = &unk_1005CD588;
  void block[4] = v11;
  *(double *)&void block[5] = v10 - v9;
  char v17 = v7;
  uint64_t v13 = *(void *)(a1 + 64);
  block[6] = v6;
  block[7] = v13;
  *(double *)&block[8] = v5;
  dispatch_sync(v12, block);
  uint64_t v14 = *(Bytef **)(a1 + 72);
  if (v3 != v14) {
    free(v14);
  }
  free(v3);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
}

_BYTE *sub_1000AB708(uint64_t a1)
{
  *(double *)(*(void *)(a1 + 32) + 16LL) = *(double *)(a1 + 40) + *(double *)(*(void *)(a1 + 32) + 16LL);
  *(_DWORD *)(*(void *)(a1 + 32) + 12LL) += *(_DWORD *)(a1 + 48);
  ++*(void *)(*(void *)(a1 + 32) + 32LL);
  if (*(_BYTE *)(a1 + 72))
  {
    *(_DWORD *)(*(void *)(a1 + 32) + 40LL) += *(_DWORD *)(a1 + 56);
    *(_DWORD *)(*(void *)(a1 + 32) + 72LL) += *(_DWORD *)(a1 + 48);
    *(double *)(*(void *)(a1 + 32) + 64LL) = *(double *)(a1 + 64) + *(double *)(*(void *)(a1 + 32) + 64LL);
    ++*(void *)(*(void *)(a1 + 32) + 48LL);
  }

  uint64_t result = *(_BYTE **)(a1 + 32);
  if (result[8])
  {
    [result processNetworkStatistics:*(double *)(a1 + 40)];
    return _[*(id *)(a1 + 32) processCompressibilityStatistics];
  }

  return result;
}

void sub_1000AB7F8( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_1000AB808()
{
  sub_100014820( (void *)&_mh_execute_header,  v0,  v1,  "SDAirDropCompressor: CFWriteStreamWrite returned %ld",  v2,  v3,  v4,  v5,  v6);
  sub_10001480C();
}

void sub_1000AB868()
{
  sub_100014820( (void *)&_mh_execute_header,  v0,  v1,  "SDAirDropCompressor: CFReadStreamRead returned %ld",  v2,  v3,  v4,  v5,  v6);
  sub_10001480C();
}

void sub_1000AB8C8()
{
  sub_100014820( (void *)&_mh_execute_header,  v0,  v1,  "SDAirDropCompressor: CFReadStreamOpen CFErrorRef error = %@",  v2,  v3,  v4,  v5,  v6);
  sub_10001480C();
}

void sub_1000AB928()
{
  sub_100014820( (void *)&_mh_execute_header,  v0,  v1,  "SDAirDropCompressor: CFWriteStreamOpen CFErrorRef error = %@",  v2,  v3,  v4,  v5,  v6);
  sub_10001480C();
}

void sub_1000AB988( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000AB9F0()
{
}

void sub_1000ABA54()
{
}

void sub_1000ABAB8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000ABB20()
{
  sub_100014820( (void *)&_mh_execute_header,  v0,  v1,  "SDAirDropCompressor: executeReadWithAdaptiveCompression CFErrorRef error = %@",  v2,  v3,  v4,  v5,  v6);
  sub_10001480C();
}

void sub_1000ABB80()
{
  sub_100014820( (void *)&_mh_execute_header,  v0,  v1,  "SDAirDropCompressor: executeWriteWithAdaptiveCompression CFErrorRef error = %@",  v2,  v3,  v4,  v5,  v6);
  sub_10001480C();
}

uint64_t SDAutoUnlockSessionWrapperReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 88) |= 8u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_63;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_65;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_63:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_65:
        uint64_t v44 = 80LL;
        goto LABEL_82;
      case 2u:
        uint64_t Data = PBReaderReadData(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(Data);
        uint64_t v20 = 72LL;
        goto LABEL_61;
      case 3u:
        uint64_t v21 = PBReaderReadData(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(v21);
        uint64_t v20 = 56LL;
        goto LABEL_61;
      case 4u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 88) |= 4u;
        while (2)
        {
          unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1LL || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v25 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v14 |= (unint64_t)(v25 & 0x7F) << v22;
            if (v25 < 0)
            {
              v22 += 7;
              BOOL v9 = v23++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_69;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_69:
        uint64_t v44 = 40LL;
        goto LABEL_82;
      case 5u:
        uint64_t v26 = PBReaderReadData(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(v26);
        uint64_t v20 = 64LL;
        goto LABEL_61;
      case 6u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v29 = 0LL;
        *(_BYTE *)(a1 + 88) |= 0x10u;
        while (2)
        {
          unint64_t v30 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v30 == -1LL || v30 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v31 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 1;
            v29 |= (unint64_t)(v31 & 0x7F) << v27;
            if (v31 < 0)
            {
              v27 += 7;
              BOOL v9 = v28++ >= 9;
              if (v9)
              {
                uint64_t v29 = 0LL;
                goto LABEL_73;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v29 = 0LL;
        }
LABEL_73:
        *(_BYTE *)(a1 + 84) = v29 != 0;
        continue;
      case 7u:
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 88) |= 2u;
        while (2)
        {
          unint64_t v34 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v34 == -1LL || v34 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v35 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34 + 1;
            v14 |= (unint64_t)(v35 & 0x7F) << v32;
            if (v35 < 0)
            {
              v32 += 7;
              BOOL v9 = v33++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_77;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_77:
        uint64_t v44 = 24LL;
        goto LABEL_82;
      case 8u:
        char v36 = 0;
        unsigned int v37 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 88) |= 1u;
        break;
      case 9u:
        uint64_t v40 = PBReaderReadData(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(v40);
        uint64_t v20 = 32LL;
        goto LABEL_61;
      case 0xAu:
        uint64_t v41 = PBReaderReadData(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(v41);
        uint64_t v20 = 16LL;
        goto LABEL_61;
      case 0xBu:
        uint64_t v42 = PBReaderReadData(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(v42);
        uint64_t v20 = 48LL;
LABEL_61:
        uint64_t v43 = *(void **)(a1 + v20);
        *(void *)(a1 + v2sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = v19;

        continue;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      unint64_t v38 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v38 == -1LL || v38 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v39 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v38);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v38 + 1;
      v14 |= (unint64_t)(v39 & 0x7F) << v36;
      if ((v39 & 0x80) == 0) {
        goto LABEL_79;
      }
      v36 += 7;
      BOOL v9 = v37++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_81;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_79:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v14) = 0;
    }
LABEL_81:
    uint64_t v44 = 8LL;
LABEL_82:
    *(_DWORD *)(a1 + v44) = v14;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

LABEL_43:
    unsigned int v13 = 0;
    goto LABEL_44;
  }

  if ((*((_BYTE *)v4 + 88) & 0x10) != 0) {
    goto LABEL_43;
  }
LABEL_27:
  if ((has & 2) != 0)
  {
    if ((*((_BYTE *)v4 + 88) & 2) == 0 || self->_awdlCacheID != *((_DWORD *)v4 + 6)) {
      goto LABEL_43;
    }
  }

  else if ((*((_BYTE *)v4 + 88) & 2) != 0)
  {
    goto LABEL_43;
  }

  if ((has & 1) != 0)
  {
    if ((*((_BYTE *)v4 + 88) & 1) == 0 || self->_aksSessionID != *((_DWORD *)v4 + 2)) {
      goto LABEL_43;
    }
  }

  else if ((*((_BYTE *)v4 + 88) & 1) != 0)
  {
    goto LABEL_43;
  }

  encryptedPayload = self->_encryptedPayload;
  if ((unint64_t)encryptedPayload | *((void *)v4 + 4)
    && !-[NSData isEqual:](encryptedPayload, "isEqual:"))
  {
    goto LABEL_43;
  }

  authTag = self->_authTag;
  if ((unint64_t)authTag | *((void *)v4 + 2))
  {
  }

  nonce = self->_nonce;
  else {
    unsigned int v13 = 1;
  }
LABEL_44:

  return v13;
}
}

    sub_1001A4BC8(v86, v128);
    return;
  }

  unint64_t v55 = (void *)v173[0];
  sub_10019A6C4(v64, (uint64_t)v174);
  v81 = sub_100183098(&qword_100645A28);
  v82 = v167;
  v83 = (uint64_t)v168;
  v84 = swift_dynamicCast(v168, v174, v81, v167, 6LL);
  uint64_t v85 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v166 + 56);
  if (!v84)
  {
    v85(v83, 1LL, 1LL, v82);
    sub_100187100(v83, &qword_1006459E8);
    v104 = sub_100187014();
    uint64_t v76 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v104, 0LL, 0LL);
    *(_DWORD *)uint64_t v77 = 10;
    v78 = 0xD000000000000047LL;
    uint64_t v79 = "Invalid previous context as InitialLockContext, message may be replayed";
    goto LABEL_10;
  }

  v85(v83, 0LL, 1LL, v82);
  uint64_t v86 = v159;
  sub_1001A4B40(v83, v159, _s15MacApprovePhoneV18InitialLockContextVMa);
  v87 = v158;
  sub_1001A4B84(v86, v158, _s15MacApprovePhoneV18InitialLockContextVMa);
  uint64_t v59 = v55;
  id v88 = v160;
  uint64_t v89 = v172;
  sub_1001A2EDC(v59, v87, v160);
  if (!v89)
  {
    v126 = v169;
    v169[3] = v156;
    v126[4] = &off_1005D3248;
    v127 = sub_1001A4B04(v126);
    sub_1001A4B40((uint64_t)v88, (uint64_t)v127, _s15MacApprovePhoneV20HandleRequestContextVMa);

    v128 = _s15MacApprovePhoneV18InitialLockContextVMa;
    goto LABEL_43;
  }

  char v62 = _s15MacApprovePhoneV18InitialLockContextVMa;
LABEL_33:
  uint64_t v63 = v86;
LABEL_34:
  sub_1001A4BC8(v63, v62);
}

  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
}

  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
}

  uint64_t v72 = v129[9];
  uint64_t v73 = &v29[v72];
  __int16 v74 = *(void *)&v29[v72 + 8];
  id v75 = &v26[v72];
  uint64_t v76 = v75[1];
  if (!v74)
  {
    swift_bridgeObjectRetain(v75[1]);
    sub_1001A4BC8((uint64_t)v26, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    sub_1001A4BC8((uint64_t)v29, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    if (!v76) {
      goto LABEL_50;
    }
    uint64_t v77 = v76;
    goto LABEL_52;
  }

  if (!v76)
  {
    swift_bridgeObjectRetain(v74);
    sub_1001A4BC8((uint64_t)v26, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    sub_1001A4BC8((uint64_t)v29, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    uint64_t v77 = v74;
LABEL_52:
    swift_bridgeObjectRelease(v77);
    goto LABEL_20;
  }

  if (*v73 == *v75 && v74 == v76)
  {
    swift_bridgeObjectRetain(v74);
    sub_1001A4BC8((uint64_t)v26, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    sub_1001A4BC8((uint64_t)v29, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    swift_bridgeObjectRelease(v74);
LABEL_50:
    sub_1001A4B84((uint64_t)a1, v55, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    uint64_t v59 = v127;
    sub_1001A4B84((uint64_t)a2, (uint64_t)v127, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    unsigned int v58 = (uint64_t)v121;
    char v57 = (uint64_t)v122;
    goto LABEL_54;
  }

  LODWORD(v124) = _stringCompareWithSmolCheck(_:_:expecting:)(*v73, v74, *v75, v75[1], 0LL);
  swift_bridgeObjectRetain(v74);
  sub_1001A4BC8((uint64_t)v26, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
  sub_1001A4BC8((uint64_t)v29, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
  swift_bridgeObjectRelease(v74);
  sub_1001A4B84((uint64_t)a1, v55, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
  uint64_t v59 = v127;
  uint64_t v54 = v128;
  sub_1001A4B84((uint64_t)a2, (uint64_t)v127, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
  unsigned int v58 = (uint64_t)v121;
  char v57 = (uint64_t)v122;
  if ((v124 & 1) == 0)
  {
LABEL_21:
    sub_1001A4BC8((uint64_t)v59, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    sub_1001A4BC8(v55, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
LABEL_22:
    uint64_t v60 = v126;
    sub_1001A4B84((uint64_t)a1, (uint64_t)v126, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    unint64_t v61 = v125;
    sub_1001A4B84((uint64_t)a2, (uint64_t)v125, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    goto LABEL_23;
  }

  v150 = *v78;
  swift_unknownObjectRelease(v38);
  return (char *)v150;
}

            v107 = __clz(__rbit64(v20));
            v20 &= v20 - 1;
          }

          goto LABEL_69;
        }

        v111 = v109 + 3;
        if (v111 < v101)
        {
          v110 = *(void *)&v170[8 * v111];
          if (!v110)
          {
            while (1)
            {
              __int16 v103 = v111 + 1;
              if (__OFADD__(v111, 1LL)) {
                goto LABEL_68;
              }
              if (v103 >= v101) {
                goto LABEL_64;
              }
              v110 = *(void *)&v170[8 * v103];
              ++v111;
              if (v110) {
                goto LABEL_57;
              }
            }
          }

          __int16 v103 = v111;
          goto LABEL_57;
        }
      }

      char v46 = v47;
      goto LABEL_44;
    }

    unint64_t v30 = v53;
    char v31 = v53[v29];
    ++v23;
    if (!v31)
    {
      unsigned int v23 = v29 + 1;
      if (v29 + 1 >= v52) {
        goto LABEL_36;
      }
      char v31 = v53[v23];
      if (!v31) {
        break;
      }
    }

      uint64_t result = swift_release(v8);
      goto LABEL_44;
    }

    unsigned int v23 = v43;
    unint64_t v24 = v43[v22];
    ++v17;
    if (!v24)
    {
      char v17 = v22 + 1;
      if (v22 + 1 >= v42) {
        goto LABEL_36;
      }
      unint64_t v24 = v43[v17];
      if (!v24) {
        break;
      }
    }

      char v35 = 0LL;
LABEL_44:
      unsigned int v37 = 1;
      goto LABEL_47;
    }

    if (v31)
    {
      if (v31 != 1)
      {
        uint64_t v41 = BYTE1(result) - 48;
        if ((BYTE1(result) - 48) <= 9u)
        {
          char v35 = 0LL;
          uint64_t v42 = v41 == 0LL;
          uint64_t v43 = -(uint64_t)v41;
          if (!v42) {
            goto LABEL_44;
          }
          if (v31 == 2)
          {
            unsigned int v37 = 0;
            char v35 = v43;
            goto LABEL_47;
          }

          char v51 = BYTE2(result) - 48;
          if ((BYTE2(result) - 48) <= 9u && is_mul_ok(v43, 0xAuLL))
          {
            unsigned int v52 = 10 * v43;
            char v35 = v52 - v51;
            if (v52 >= v51)
            {
              uint64_t v53 = v31 - 3;
              if (v53)
              {
                uint64_t v54 = (unsigned __int8 *)v59 + 3;
                while (1)
                {
                  unint64_t v55 = *v54 - 48;
                  if (v55 > 9) {
                    goto LABEL_43;
                  }
                  if (!is_mul_ok(v35, 0xAuLL)) {
                    goto LABEL_43;
                  }
                  uint64_t v42 = 10 * v35 >= v55;
                  char v35 = 10 * v35 - v55;
                  if (!v42) {
                    goto LABEL_43;
                  }
                  unsigned int v37 = 0;
                  ++v54;
                  if (!--v53) {
                    goto LABEL_47;
                  }
                }
              }

uint64_t SDUnlockStartLTKTransferReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0LL;
      *(_BYTE *)(a1 + 12) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_30:
      *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = v14;
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

BOOL SDAutoUnlockEscrowSecretInfoReadFrom(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0LL;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0LL;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0LL;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 1)
      {
        uint64_t Data = PBReaderReadData(a2);
        uint64_t v13 = objc_claimAutoreleasedReturnValue(Data);
        uint64_t v14 = 16LL;
LABEL_21:
        char v16 = *(void **)(a1 + v14);
        *(void *)(a1 + v14) = v13;

        goto LABEL_23;
      }

      if ((PBReaderSkipValueWithTag(a2) & 1) == 0) {
        return 0LL;
      }
LABEL_23:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }

    uint64_t String = PBReaderReadString(a2);
    uint64_t v13 = objc_claimAutoreleasedReturnValue(String);
    uint64_t v14 = 8LL;
    goto LABEL_21;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000AE17C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000AE1A4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleAction];
}

void sub_1000AE1EC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "### Receiving credentials via AirDrop not supported on current platform",  v1,  2u);
}

id sub_1000AE33C(uint64_t a1)
{
  return [*(id *)(a1 + 32) setEscrowSecret:0];
}

void sub_1000AE4E8(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___SDAutoUnlockAKSManager);
  uint64_t v2 = (void *)qword_100657008;
  qword_100657008 = (uint64_t)v1;
}

uint64_t sub_1000B0ACC(uint64_t a1, void *a2, void *a3)
{
  unsigned int v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  char v8 = (void *)objc_claimAutoreleasedReturnValue([v5 cachedSessionKeys]);
  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:v7]);

  int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cachedSessionKeys]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:v6]);

  uint64_t v12 = -1LL;
  if (!v9) {
    uint64_t v12 = 1LL;
  }
  if ((v9 != 0LL) != (v11 == 0LL)) {
    return 0LL;
  }
  else {
    return v12;
  }
}

void sub_1000B15F4(uint64_t a1)
{
  id v2 = sub_1000126A0( (uint64_t)[*(id *)(a1 + 32) ltkKeyClassWithAttestation:*(unsigned __int8 *)(a1 + 56)],  *(unsigned __int8 *)(a1 + 56));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  if (!v3) {
    goto LABEL_25;
  }
  char v4 = sub_100011CF8();
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = objc_opt_new(&OBJC_CLASS___SDAutoUnlockLTKInfo);
  -[SDAutoUnlockLTKInfo setVersion:](v6, "setVersion:", 2LL);
  -[SDAutoUnlockLTKInfo setLtk:](v6, "setLtk:", v3);
  if (v5)
  {
    id v7 = sub_10008C238(v5);
    char v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    -[SDAutoUnlockLTKInfo setLtkID:](v6, "setLtkID:", v8);
  }

  int v9 = *(unsigned __int8 *)(a1 + 56);
  int v10 = *(void **)(a1 + 32);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 localDeviceID]);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) computerName]);
  if (v9)
  {
    unsigned __int8 v13 = [v10 storeAttestedLongTermKey:v6 forDeviceID:v11 name:v12];

    if ((v13 & 1) == 0) {
      goto LABEL_16;
    }
LABEL_8:
    uint64_t v17 = auto_unlock_log(v14);
    char v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localDeviceID]);
      int v20 = *(unsigned __int8 *)(a1 + 56);
      int v29 = 138412802;
      unint64_t v30 = v19;
      if (v20) {
        uint64_t v21 = @"YES";
      }
      else {
        uint64_t v21 = @"NO";
      }
      __int16 v31 = 2112;
      char v32 = @"YES";
      __int16 v33 = 2112;
      unint64_t v34 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Saved Local LTK (device ID: %@, saved: %@ attested: %@)",  (uint8_t *)&v29,  0x20u);
    }

    char v22 = *(void **)(a1 + 32);
    if (*(_BYTE *)(a1 + 56)) {
      id v14 = [v22 setLocalAttestedLTK:v3];
    }
    else {
      id v14 = [v22 setLocalLTK:v3];
    }
    goto LABEL_16;
  }

  unsigned int v16 = [v10 storeLongTermKey:v6 forDeviceID:v11 name:v12];

  if (v16) {
    goto LABEL_8;
  }
LABEL_16:
  uint64_t v23 = SFDeviceClassCodeGet(v14, v15);
  if ((_DWORD)v23 == 7)
  {
    uint64_t v26 = auto_unlock_log(v23);
    char v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v29) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "New local LTK, clearing escrow secrets",  (uint8_t *)&v29,  2u);
    }

    [*(id *)(a1 + 32) handleRequiredStateDisabled];
  }

  else if ((_DWORD)v23 == 1)
  {
    uint64_t v24 = auto_unlock_log(v23);
    char v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v29) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "New local LTK, clearing remote LTKs and disabling Auto Unlock for all keys",  (uint8_t *)&v29,  2u);
    }

    [*(id *)(a1 + 32) disablePairingForAllKeyDevices];
    [*(id *)(a1 + 32) clearRemoteLTKs];
  }

LABEL_25:
  uint64_t v28 = *(void *)(a1 + 48);
  if (v28) {
    (*(void (**)(uint64_t, void *, void))(v28 + 16))(v28, v3, 0LL);
  }
}

void sub_1000B18C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) isMobileActivationErrorNetworkError:v3];
    int v5 = (int)v4;
    uint64_t v6 = auto_unlock_log(v4);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      if (v8)
      {
        int v10 = 138412290;
        id v11 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Got Mobile Activation network error %@",  (uint8_t *)&v10,  0xCu);
      }

      int v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  SFKAuthenticationErrorDomain,  39LL,  0LL));
      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    }

    else
    {
      if (v8)
      {
        int v10 = 138412290;
        id v11 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Got Mobile Activation error %@",  (uint8_t *)&v10,  0xCu);
      }

      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    }
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

LABEL_45:
          __int16 v33 = v9;
          goto LABEL_46;
        }

        uint64_t v53 = sub_100011D94( (void *)v13,  -[SDAutoUnlockAKSManager ltkKeyClassWithAttestation:](self, "ltkKeyClassWithAttestation:", 0LL),  -[SDAutoUnlockAKSManager t208Machine](self, "t208Machine"));
        uint64_t v54 = v53;
        unint64_t v55 = auto_unlock_log(v53);
        int v20 = (void *)objc_claimAutoreleasedReturnValue(v55);
        char v56 = os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_DEFAULT);
        if (!v54)
        {
          if (!v56) {
            goto LABEL_18;
          }
          *(_WORD *)char v57 = 0;
          char v27 = "LTK Mismatch: Modern LTK is invalid, regenerating";
          goto LABEL_17;
        }

        if (v56)
        {
          *(_WORD *)char v57 = 0;
          char v32 = "LTK Mismatch: Modern LTK is valid, overwriting legacy LTK";
          goto LABEL_28;
        }
      }

      else
      {
        uint64_t v28 = sub_100011D94( (void *)v13,  -[SDAutoUnlockAKSManager ltkKeyClassWithAttestation:](self, "ltkKeyClassWithAttestation:", 0LL),  -[SDAutoUnlockAKSManager t208Machine](self, "t208Machine"));
        int v29 = v28;
        unint64_t v30 = auto_unlock_log(v28);
        int v20 = (void *)objc_claimAutoreleasedReturnValue(v30);
        __int16 v31 = os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_DEFAULT);
        if (!v29)
        {
          if (!v31) {
            goto LABEL_18;
          }
          *(_WORD *)char v57 = 0;
          char v27 = "Legacy LTK is missing: Modern LTK is invalid, regenerating";
          goto LABEL_17;
        }

        if (v31)
        {
          *(_WORD *)char v57 = 0;
          char v32 = "Legacy LTK is missing: Storing modern LTK";
LABEL_28:
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v20, OS_LOG_TYPE_DEFAULT, v32, v57, 2u);
        }
      }

      __int16 v33 = v11;
LABEL_46:

      uint64_t v24 = v33;
      if (v24)
      {
        uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockAKSManager localDeviceID](self, "localDeviceID"));
        unint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
        char v46 = (void *)objc_claimAutoreleasedReturnValue([v45 computerName]);
        id v47 = -[SDAutoUnlockAKSManager storeLongTermKey:forDeviceID:name:]( self,  "storeLongTermKey:forDeviceID:name:",  v24,  v44,  v46);

        if (v47)
        {
          unint64_t v49 = auto_unlock_log(v48);
          uint64_t v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
          if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
          {
            char v51 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockAKSManager localDeviceID](self, "localDeviceID"));
            *(_DWORD *)char v57 = 138412546;
            *(void *)&v57[4] = v51;
            unsigned int v58 = 2112;
            uint64_t v59 = @"YES";
            _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "Saved Local LTK after validation check (device ID: %@, saved: %@)",  v57,  0x16u);
          }

          unsigned int v52 = (void *)objc_claimAutoreleasedReturnValue([v24 ltk]);
          -[SDAutoUnlockAKSManager setLocalLTK:](self, "setLocalLTK:", v52);
        }
      }

      goto LABEL_21;
    }

    char v25 = auto_unlock_log(v7);
    uint64_t v24 = (id)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled((os_log_t)v24, OS_LOG_TYPE_ERROR)) {
      sub_1000BA8C0();
    }
  }

  else
  {
    uint64_t v23 = auto_unlock_log(v5);
    uint64_t v24 = (id)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled((os_log_t)v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v57 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v24,  OS_LOG_TYPE_DEFAULT,  "Device locked, not checking local LTK",  v57,  2u);
    }
  }

  swift_release(v300);
  v309 = sub_1003918D8((uint64_t)&_swiftEmptyArrayStorage);
  v129 = *(void *)(v299 + 64);
  v307 = (const __CFString *)(v299 + 64);
  v130 = 1LL << *(_BYTE *)(v299 + 32);
  v131 = -1LL;
  if (v130 < 64) {
    v131 = ~(-1LL << v130);
  }
  v132 = v131 & v129;
  v308 = (const __CFString *)((unint64_t)(v130 + 63) >> 6);
  swift_bridgeObjectRetain(v299);
  a1 = 0LL;
  while (1)
  {
    if (v132)
    {
      v311 = (v132 - 1) & v132;
      v312 = (char *)a1;
      v137 = __clz(__rbit64(v132)) | (a1 << 6);
      goto LABEL_69;
    }

    v138 = a1 + 1;
    if (__OFADD__(a1, 1LL)) {
      goto LABEL_159;
    }
    v139 = *((void *)&v307->isa + v138);
    v140 = a1 + 1;
    if (!v139)
    {
      v140 = a1 + 2;
      v139 = *((void *)&v307->isa + v140);
      if (!v139)
      {
        v140 = a1 + 3;
        v139 = *((void *)&v307->isa + v140);
        if (!v139)
        {
          v140 = a1 + 4;
          v139 = *((void *)&v307->isa + v140);
          if (!v139)
          {
            v141 = a1 + 5;
            v139 = *((void *)&v307->isa + v141);
            if (!v139)
            {
              while (1)
              {
                v140 = v141 + 1;
                if (__OFADD__(v141, 1LL)) {
                  break;
                }
                v139 = *((void *)&v307->isa + v140);
                ++v141;
                if (v139) {
                  goto LABEL_68;
                }
              }

  swift_release(v306);
  v315 = sub_1003918D8((uint64_t)_swiftEmptyArrayStorage);
  v131 = *((void *)v305 + 8);
  v313 = v305 + 64;
  v132 = 1LL << v305[32];
  v133 = -1LL;
  if (v132 < 64) {
    v133 = ~(-1LL << v132);
  }
  v134 = v133 & v131;
  v314 = (const __CFString *)((unint64_t)(v132 + 63) >> 6);
  swift_bridgeObjectRetain(v305);
  a1 = 0LL;
  while (1)
  {
    if (v134)
    {
      v317 = (v134 - 1) & v134;
      v318 = (char *)a1;
      v139 = __clz(__rbit64(v134)) | (a1 << 6);
      goto LABEL_69;
    }

    v140 = a1 + 1;
    if (__OFADD__(a1, 1LL)) {
      goto LABEL_159;
    }
    v141 = *(void *)&v313[8 * v140];
    v142 = a1 + 1;
    if (!v141)
    {
      v142 = a1 + 2;
      v141 = *(void *)&v313[8 * v142];
      if (!v141)
      {
        v142 = a1 + 3;
        v141 = *(void *)&v313[8 * v142];
        if (!v141)
        {
          v142 = a1 + 4;
          v141 = *(void *)&v313[8 * v142];
          if (!v141)
          {
            v143 = a1 + 5;
            v141 = *(void *)&v313[8 * v143];
            if (!v141)
            {
              while (1)
              {
                v142 = v143 + 1;
                if (__OFADD__(v143, 1LL)) {
                  break;
                }
                v141 = *(void *)&v313[8 * v142];
                ++v143;
                if (v141) {
                  goto LABEL_68;
                }
              }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

    unsigned __int8 v13 = 0;
    goto LABEL_46;
  }

  if (v4 != 45)
  {
    id v11 = (v4 - 48);
    if (v7 != 1)
    {
      id v11 = 10LL * (v4 - 48) + (BYTE1(v4) - 48);
      uint64_t v19 = v7 - 2;
      if (v19)
      {
        int v20 = (unsigned __int8 *)v48 + 2;
        while (1)
        {
          uint64_t v21 = *v20 - 48;
          if (v21 > 9) {
            goto LABEL_33;
          }
          char v22 = 10 * v11;
          id v11 = v22 + v21;
          unsigned __int8 v13 = 0;
          ++v20;
          if (!--v19) {
            goto LABEL_46;
          }
        }
      }
    }

    goto LABEL_45;
  }

  if (v7)
  {
    if (v7 != 1 && (BYTE1(v4) - 48) <= 9u)
    {
      if (v7 == 2)
      {
        unsigned __int8 v13 = 0;
        id v11 = -(uint64_t)(BYTE1(v4) - 48);
        goto LABEL_46;
      }

      if ((BYTE2(v4) - 48) <= 9u)
      {
        id v11 = -10LL * (BYTE1(v4) - 48) - (BYTE2(v4) - 48);
        uint64_t v23 = v7 - 3;
        if (!v23) {
          goto LABEL_45;
        }
        uint64_t v44 = (unsigned __int8 *)v48 + 3;
        while (1)
        {
          unint64_t v45 = *v44 - 48;
          if (v45 > 9) {
            break;
          }
          char v46 = 10 * v11;
          id v11 = v46 - v45;
          unsigned __int8 v13 = 0;
          ++v44;
          if (!--v23) {
            goto LABEL_46;
          }
        }
      }
    }

      int v9 = v21;
    }

    v84 = *(void *)(v0 + 312);
    uint64_t v85 = *(void *)(v0 + 280);
    uint64_t v86 = *(void *)(v0 + 256);
    swift_task_dealloc(*(void *)(v0 + 336));
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }

  id v2 = v1;
  id v3 = (os_log_s *)Logger.logObject.getter(v2);
  id v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    int v5 = swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)int v5 = 138412290;
    *(void *)(v5 + 4) = v2;
    SDAutoUnlockLTKInfo *v6 = v1;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Found %@", (uint8_t *)v5, 0xCu);
    id v7 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v6, 1LL, v7);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v15 = *(void *)(v0 + 208);
  if (v15 == 7)
  {
    sub_1001915A4(*(void *)(v0 + 216) + *(void *)(v0 + 352), v0 + 64, &qword_100654080);
    if (!*(void *)(v0 + 88))
    {
      char v25 = sub_100187100(v0 + 64, &qword_100654080);
      uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
      char v27 = static os_log_type_t.error.getter(v26);
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v28 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "Could not find mac that previously put phone into assert delay",  v28,  2u);
        swift_slowDealloc(v28, -1LL, -1LL);
      }

      int v29 = *(void *)(v0 + 216);

      unint64_t v30 = sub_100487C98(1LL, 0LL, 0xE000000000000000LL);
      char v32 = swift_unknownObjectWeakLoadStrong( v29 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_delegate,  v31);
      if (v32)
      {
        __int16 v33 = (void *)v32;
        unint64_t v34 = *(void *)(v0 + 216);
        char v35 = UUID._bridgeToObjectiveC()().super.isa;
        [v33 manager:v34 didFailAuthenticationFor:v35 error:v30];
        swift_unknownObjectRelease(v33);
      }

      unsigned int v37 = *(void *)(v0 + 328);
      char v36 = *(void *)(v0 + 336);
      unint64_t v38 = *(void *)(v0 + 320);

      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
      goto LABEL_45;
    }

    sub_1001CE0D0((__int128 *)(v0 + 64), v0 + 104);
    int v20 = [v2 idsDeviceIdentifier];
    if (v20)
    {
      uint64_t v21 = v20;
      char v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      uint64_t v24 = v23;
    }

    else
    {
      char v22 = 0LL;
      uint64_t v24 = 0LL;
    }

    char v39 = *(void *)(v0 + 128);
    uint64_t v40 = *(void *)(v0 + 136);
    sub_10019A708((void *)(v0 + 104), v39);
    uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8))(v39, v40);
    uint64_t v43 = v42;
    if (v24)
    {
      if (v42)
      {
        if (v22 != v41 || v24 != v42)
        {
          unsigned int v52 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v24, v41, v42, 0LL);
          *(void *)&uint64_t v53 = swift_bridgeObjectRelease(v24).n128_u64[0];
          swift_bridgeObjectRelease(v43, v53);
          sub_10018709C((void *)(v0 + 104));
          if ((v52 & 1) != 0) {
            goto LABEL_36;
          }
          goto LABEL_30;
        }

        *(void *)&uint64_t v44 = swift_bridgeObjectRelease(v24).n128_u64[0];
        swift_bridgeObjectRelease(v43, v44);
LABEL_34:
        sub_10018709C((void *)(v0 + 104));
        goto LABEL_36;
      }
    }

    else
    {
      if (!v42) {
        goto LABEL_34;
      }
      uint64_t v24 = v42;
    }

    swift_bridgeObjectRelease(v24);
    sub_10018709C((void *)(v0 + 104));
    goto LABEL_30;
  }

  if (v15 == 6)
  {
    uint64_t result = [(id)objc_opt_self(SDAutoUnlockAKSManager) sharedManager];
    if (!result)
    {
      __break(1u);
LABEL_47:
      __break(1u);
      return result;
    }

    uint64_t v17 = result;
    char v18 = [v2 idsDeviceIdentifier];
    uint64_t v19 = [v17 deviceEnabledAsKeyForIDSDeviceID:v18];

    if (v19)
    {
LABEL_36:
      uint64_t result = [(id)objc_opt_self(SDAutoUnlockTransport) sharedTransport];
      if (result)
      {
        uint64_t v54 = result;
        unint64_t v55 = [v2 idsDeviceIdentifier];
        char v56 = [v54 idsDeviceForUniqueID:v55];

        if (v56)
        {
          v98 = *(void *)(v0 + 336);
          uint64_t v95 = *(void *)(v0 + 328);
          char v57 = *(void *)(v0 + 312);
          uint64_t v96 = *(void *)(v0 + 320);
          unsigned int v58 = *(void *)(v0 + 296);
          uint64_t v59 = *(void *)(v0 + 304);
          uint64_t v60 = *(void *)(v0 + 288);
          v93 = *(void *)(v0 + 272);
          id v94 = *(void *)(v0 + 264);
          uint64_t v89 = *(void *)(v0 + 280);
          id v90 = *(void *)(v0 + 256);
          uint64_t v92 = *(void *)(v0 + 248);
          unint64_t v61 = *(void **)(v0 + 216);
          v87 = *(void *)(v0 + 208);
          id v88 = *(void **)(v0 + 232);
          id v91 = *(void *)(v0 + 240);
          (*(void (**)(uint64_t, void, uint64_t))(v58 + 16))(v57, *(void *)(v0 + 224), v60);
          char v62 = *(unsigned __int8 *)(v58 + 80);
          uint64_t v63 = (v62 + 40) & ~v62;
          BOOL v64 = (v59 + v63 + 7) & 0xFFFFFFFFFFFFFFF8LL;
          uint64_t v65 = (char *)swift_allocObject(&unk_1005E34D0, v64 + 8, v62 | 7);
          *((void *)v65 + 2) = v56;
          *((void *)v65 + 3) = v61;
          *((void *)v65 + 4) = v87;
          (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(&v65[v63], v57, v60);
          *(void *)&v65[v64] = v88;
          *(void *)(v0 + 4_Block_object_dispose(va, 8) = sub_10048A198;
          *(void *)(v0 + 56) = v65;
          *(void *)(v0 + 16) = _NSConcreteStackBlock;
          *(void *)(v0 + 24) = 1107296256LL;
          *(void *)(v0 + 32) = sub_1001B9FE4;
          *(void *)(v0 + 4sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = &unk_1005E34E8;
          __int128 v66 = _Block_copy((const void *)(v0 + 16));
          __int128 v67 = v88;
          __int128 v68 = v56;
          static DispatchQoS.unspecified.getter(v61);
          *(void *)(v0 + 192) = _swiftEmptyArrayStorage;
          __int128 v69 = sub_100183F14( (unint64_t *)&qword_100646510,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          uint64_t v70 = sub_100183098((uint64_t *)&unk_1006460D0);
          uint64_t v71 = sub_1001CD538( (unint64_t *)&qword_100646520,  (uint64_t *)&unk_1006460D0,  (uint64_t)&protocol conformance descriptor for [A]);
          dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 192, v70, v71, v91, v69);
          OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v89, v90, v66);
          _Block_release(v66);

          (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v90, v91);
          (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v89, v94);
          (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v98, v96);
          swift_release(*(void *)(v0 + 56));
        }

        else
        {
          uint64_t v72 = v2;
          uint64_t v73 = (os_log_s *)Logger.logObject.getter(v72);
          __int16 v74 = static os_log_type_t.error.getter(v73);
          if (os_log_type_enabled(v73, v74))
          {
            id v75 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            v97 = (void *)swift_slowAlloc(8LL, -1LL);
            *(_DWORD *)id v75 = 138412290;
            *(void *)(v0 + 176) = v72;
            uint64_t v76 = v72;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v75 + 4, v75 + 12);
            void *v97 = v1;

            _os_log_impl( (void *)&_mh_execute_header,  v73,  v74,  "Could not find IDS device for discovered device. This shouldn't happen %@",  v75,  0xCu);
            uint64_t v77 = sub_100183098(&qword_1006454E0);
            swift_arrayDestroy(v97, 1LL, v77);
            swift_slowDealloc(v97, -1LL, -1LL);
            swift_slowDealloc(v75, -1LL, -1LL);
          }

          else
          {
          }

          uint64_t v79 = swift_unknownObjectWeakLoadStrong( *(void *)(v0 + 216) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_delegate,  v78);
          if (v79)
          {
            v80 = (void *)v79;
            v81 = *(void *)(v0 + 216);
            v82 = UUID._bridgeToObjectiveC()().super.isa;
            v83 = sub_100487C98(10LL, 0LL, 0xE000000000000000LL);
            [v80 manager:v81 didFailAuthenticationFor:v82 error:v83];
            swift_unknownObjectRelease(v80);
          }

          (*(void (**)(void, void))(*(void *)(v0 + 328) + 8LL))( *(void *)(v0 + 336),  *(void *)(v0 + 320));
        }

        goto LABEL_45;
      }

      goto LABEL_47;
    }
  }

    v125 = v109;
    v126 = (os_log_s *)Logger.logObject.getter(v125);
    v127 = static os_log_type_t.error.getter(v126);
    if (os_log_type_enabled(v126, v127))
    {
      v128 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v129 = swift_slowAlloc(8LL, -1LL);
      v130 = v81;
      v131 = (void *)v129;
      *(_DWORD *)v128 = 138412290;
      v150 = v130;
      if (v130)
      {
        *(void *)(v0 + 344) = v125;
        v132 = v125;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v106, v128 + 4, v128 + 12);
        v133 = v150;
      }

      else
      {
        *(void *)(v0 + 336) = 0LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v128 + 4, v128 + 12);
        v133 = 0LL;
      }

      *v131 = v133;

      _os_log_impl((void *)&_mh_execute_header, v126, v127, "Could not convert response to data: %@", v128, 0xCu);
      v134 = sub_100183098(&qword_1006454E0);
      swift_arrayDestroy(v131, 1LL, v134);
      swift_slowDealloc(v131, -1LL, -1LL);
      swift_slowDealloc(v128, -1LL, -1LL);

      swift_errorRelease(v155);
    }

    else
    {

      swift_errorRelease(v155);
    }

    goto LABEL_52;
  }

void sub_1000B36F0(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  int v5 = (void *)objc_claimAutoreleasedReturnValue([a3 objectForKeyedSubscript:@"Modern LTK Data"]);

  if (v5) {
    [*(id *)(a1 + 32) addObject:v6];
  }
}

void sub_1000B380C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  int v5 = (void *)objc_claimAutoreleasedReturnValue([a3 objectForKeyedSubscript:@"LTK Data"]);

  if (v5) {
    [*(id *)(a1 + 32) addObject:v6];
  }
}

void sub_1000B3CA8(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = (id)objc_claimAutoreleasedReturnValue([a3 objectForKeyedSubscript:@"LTK Data"]);
  [v3 addObject:v4];
}

void sub_1000B4644(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a1[4] ltkInfoForDeviceID:v3 modern:0]);
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 ltk]);
  if ([v4 hasLtkID])
  {
    id v6 = objc_alloc(&OBJC_CLASS___NSUUID);
    id v7 = objc_claimAutoreleasedReturnValue([v4 ltkID]);
    BOOL v8 = -[NSUUID initWithUUIDBytes:](v6, "initWithUUIDBytes:", [v7 bytes]);
  }

  else
  {
    BOOL v8 = 0LL;
  }

  int v9 = (void *)objc_claimAutoreleasedReturnValue([a1[4] modificationDataForDeviceID:v3 modern:0]);
  uint64_t v10 = objc_claimAutoreleasedReturnValue([a1[4] longTermKeyForDevice:v3 modern:1]);
  uint64_t v11 = objc_claimAutoreleasedReturnValue([a1[4] modificationDataForDeviceID:v3 modern:1]);
  uint64_t v12 = (void *)v11;
  if (v5 | v10)
  {
    if (v5 && [a1[5] version] == 1)
    {
      [a1[6] setObject:v5 forKeyedSubscript:v3];
    }

    else
    {
      uint64_t v15 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v15, "setObject:forKeyedSubscript:", v5, @"LTK Data");
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v15,  "setObject:forKeyedSubscript:",  v9,  @"LTK Mod Date");
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v15,  "setObject:forKeyedSubscript:",  v10,  @"Modern LTK Data");
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v15,  "setObject:forKeyedSubscript:",  v12,  @"Modern LTK Mod Date");
      if (v8)
      {
        unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue(-[NSUUID UUIDString](v8, "UUIDString"));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v15, "setObject:forKeyedSubscript:", v16, @"LTK ID");
      }

      [a1[6] setObject:v15 forKeyedSubscript:v3];
    }
  }

  else
  {
    uint64_t v13 = auto_unlock_log(v11);
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_1000BAAE0();
    }
  }
}

id sub_1000B4B00(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Keybag assertion fired", v5, 2u);
  }

  return [*(id *)(a1 + 32) releaseKeybagAssertion];
}

void sub_1000B7578(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  BOOL v8 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v5, @"Companion ID");

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) watchIDsToPairingRecords]);
  [v7 setObject:v8 forKeyedSubscript:v6];
}

id sub_1000B79B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setObject:a2 forKeyedSubscript:a3];
}

void sub_1000BA514(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

void sub_1000BA540()
{
}

void sub_1000BA56C()
{
}

void sub_1000BA598()
{
}

void sub_1000BA5F8()
{
}

void sub_1000BA624()
{
}

void sub_1000BA684( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000BA6EC( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000BA754()
{
  WORD2(v3) = 2048;
  HIWORD(v3) = v0;
  sub_10004D1C8((void *)&_mh_execute_header, v0, v1, "Missing out variables (message: %p, authTag: %p)", v2, v3);
  sub_10001480C();
}

void sub_1000BA7C0(void *a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1 UUIDString]);
  sub_10001C438();
  sub_10004D1BC((void *)&_mh_execute_header, a2, v4, "No IDS devices for bluetooth ID: %@", v5);

  sub_10004D1DC();
}

void sub_1000BA840(void *a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1 localDeviceID]);
  sub_10001C438();
  sub_10004D1BC((void *)&_mh_execute_header, a2, v4, "Unable to load LTK (local device ID: %@)", v5);

  sub_10004D1DC();
}

void sub_1000BA8C0()
{
}

void sub_1000BA8EC()
{
}

void sub_1000BA924()
{
}

void sub_1000BA984()
{
}

void sub_1000BA9E4()
{
}

void sub_1000BAA10(void *a1, os_log_s *a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1 remoteLTKs]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1 remoteLTKs]);
  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"Remote LTKs"]);
  int v8 = 138412546;
  int v9 = v4;
  __int16 v10 = 2112;
  uint64_t v11 = v6;
  sub_100038BF8( (void *)&_mh_execute_header,  a2,  v7,  "Remote LTK list is empty (remote ltks %@, list %@)",  (uint8_t *)&v8);
}

void sub_1000BAAE0()
{
}

void sub_1000BAB40()
{
}

void sub_1000BAB6C()
{
}

void sub_1000BABCC()
{
}

void sub_1000BABF8()
{
}

void sub_1000BAC58()
{
}

void sub_1000BACB8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000BAD28()
{
}

void sub_1000BAD88(void *a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1 remoteLTKs]);
  sub_10001C438();
  sub_100056704((void *)&_mh_execute_header, a2, v4, "Saved remote LTKs: %@", v5);

  sub_10004D1DC();
}

void sub_1000BAE08()
{
}

void sub_1000BAE68()
{
}

void sub_1000BAEC8()
{
}

void sub_1000BAF28()
{
}

void sub_1000BAF88(void *a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1 watchIDsToPairingRecords]);
  sub_10001C438();
  sub_100056704((void *)&_mh_execute_header, a2, v4, "Saved watch ID to pairing record: %@", v5);

  sub_10004D1DC();
}

void sub_1000BB008()
{
}

void sub_1000BB068()
{
}

void sub_1000BB0C8()
{
}

void sub_1000BB128()
{
}

void sub_1000BB188()
{
}

void sub_1000BB1E8()
{
}

void sub_1000BB248()
{
}

void sub_1000BB2A8()
{
}

void sub_1000BB308()
{
}

void sub_1000BB368()
{
}

void sub_1000BB3C8()
{
}

void sub_1000BB428(void *a1, os_log_s *a2)
{
  unsigned int v4 = [a1 hasSecret];
  uint8_t v6 = @"NO";
  if (v4) {
    uint8_t v6 = @"YES";
  }
  int v7 = 138412547;
  int v8 = v6;
  __int16 v9 = 2113;
  __int16 v10 = a1;
  sub_100038BF8( (void *)&_mh_execute_header,  a2,  v5,  "Unable to get secret from info (has secret %@, escrow info %{private}@)",  (uint8_t *)&v7);
  sub_10004D1DC();
}

void sub_1000BB4C8()
{
  sub_1000147D0((void *)&_mh_execute_header, v0, v1, "Received unexpected SecItem CFErrorRef error = %d", v2, v3, v4, v5, v6);
  sub_1000147C8();
}

void sub_1000BB528()
{
}

void sub_1000BB588()
{
}

void sub_1000BB5E8(uint64_t a1, int a2, os_log_t log)
{
  v3[0] = 67109378;
  v3[1] = a2;
  __int16 v4 = 2112;
  uint64_t v5 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "Failed to delete remote LTK (status: %d, query: %@)",  (uint8_t *)v3,  0x12u);
  sub_10001480C();
}

void sub_1000BB668()
{
}

void sub_1000BB6C8()
{
}

void sub_1000BB6F4()
{
}

void sub_1000BB754()
{
}

uint64_t SDUnlockStateResponseReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      char v18 = 0;
      unsigned int v19 = 0;
      uint64_t v20 = 0LL;
      *(_BYTE *)(a1 + 16) |= 2u;
      while (1)
      {
        unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v21 == -1LL || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v22 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
        v20 |= (unint64_t)(v22 & 0x7F) << v18;
        if ((v22 & 0x80) == 0) {
          goto LABEL_48;
        }
        v18 += 7;
        BOOL v9 = v19++ >= 9;
        if (v9)
        {
          uint64_t v20 = 0LL;
          goto LABEL_50;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_48:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v20 = 0LL;
      }
LABEL_50:
      BOOL v29 = v20 != 0;
      uint64_t v30 = 12LL;
    }

    else
    {
      if ((_DWORD)v12 != 2)
      {
        if ((_DWORD)v12 == 1)
        {
          char v13 = 0;
          unsigned int v14 = 0;
          uint64_t v15 = 0LL;
          *(_BYTE *)(a1 + 16) |= 1u;
          while (1)
          {
            unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v16 == -1LL || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v17 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
            v15 |= (unint64_t)(v17 & 0x7F) << v13;
            if ((v17 & 0x80) == 0) {
              goto LABEL_44;
            }
            v13 += 7;
            BOOL v9 = v14++ >= 9;
            if (v9)
            {
              LODWORD(v15) = 0;
              goto LABEL_46;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_44:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v15) = 0;
          }
LABEL_46:
          *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = v15;
        }

        else
        {
          uint64_t result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result) {
            return result;
          }
        }

        continue;
      }

      char v23 = 0;
      unsigned int v24 = 0;
      uint64_t v25 = 0LL;
      *(_BYTE *)(a1 + 16) |= 4u;
      while (1)
      {
        unint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v26 == -1LL || v26 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v27 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 1;
        v25 |= (unint64_t)(v27 & 0x7F) << v23;
        if ((v27 & 0x80) == 0) {
          goto LABEL_52;
        }
        v23 += 7;
        BOOL v9 = v24++ >= 9;
        if (v9)
        {
          uint64_t v25 = 0LL;
          goto LABEL_54;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_52:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v25 = 0LL;
      }
LABEL_54:
      BOOL v29 = v25 != 0;
      uint64_t v30 = 13LL;
    }

    *(_BYTE *)(a1 + v3sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = v29;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000BDF78(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
  unsigned int v2 = [v1 enableContinuity];

  if (v2)
  {
    uint64_t v3 = objc_alloc_init(&OBJC_CLASS___SDActivityPayloadManager);
    char v4 = (void *)qword_100657018;
    qword_100657018 = (uint64_t)v3;
  }

void sub_1000BE1E8(_Unwind_Exception *a1)
{
}

void sub_1000BE204(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  *(_BYTE *)(*(void *)(a1 + 32) + 64) = [WeakRetained manateeAvailable];
}

id sub_1000BE330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[*(id *)(a1 + 32) handleEncryptionKeyRequestRapport:a2 options:a3 responseHandler:a4];
}

id sub_1000BE344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[*(id *)(a1 + 32) handlePayloadRequestRapport:a2 options:a3 responseHandler:a4];
}

void sub_1000BE358(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  char v4 = v2;
  if (v2)
  {
    uint64_t v5 = handoff_log(v2, v3);
    unint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000C5E70();
    }
  }
}

void sub_1000BE870(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = (void *)objc_claimAutoreleasedReturnValue([v3 completionHandler]);

  uint64_t v7 = handoff_log(v5, v6);
  char v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  if (v4)
  {
    if (v9) {
      sub_1000C5F54();
    }

    uint64_t v11 = objc_opt_class(&OBJC_CLASS___SDActivityPayloadRequestRecord, v10);
    char isKindOfClass = objc_opt_isKindOfClass(v3, v11);
    char v13 = @"EncryptionKey";
    if ((isKindOfClass & 1) != 0) {
      char v13 = @"Request";
    }
    unsigned int v14 = *(void **)(a1 + 32);
    uint64_t v15 = v13;
    unint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v3 requestCreatedDate]);
    [v16 timeIntervalSinceNow];
    objc_msgSend(v14, "logDashboardHandoffRequestViaTransportLinkType:type:success:rtt:", 0xFFFFFFFFLL, v15, 0);

    char v8 = (os_log_s *)objc_claimAutoreleasedReturnValue([v3 completionHandler]);
    char v17 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    (*((void (**)(os_log_s *, void, void *))v8 + 2))(v8, 0LL, v17);
  }

  else if (v9)
  {
    sub_1000C5ED0(a1);
  }
}

void sub_1000BF08C(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSRunLoop mainRunLoop](&OBJC_CLASS___NSRunLoop, "mainRunLoop"));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) timeoutTimer]);
  [v3 addTimer:v2 forMode:NSDefaultRunLoopMode];
}

id *sub_1000BF0F4(id *result, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v2 = result;
    id v3 = (void *)objc_claimAutoreleasedReturnValue([result[4] requestCreatedDate]);
    [v3 timeIntervalSinceNow];
    double v5 = v4;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v2[4] requestCreatedDate]);
    [v6 timeIntervalSinceNow];
    if (v5 < 0.0) {
      double v8 = -v7;
    }
    else {
      double v8 = v7;
    }

    double v9 = (double)(uint64_t)[v2[4] timeoutTimeInterval] - v8;
    uint64_t v10 = objc_opt_new(&OBJC_CLASS___NSDate);
    [v2[4] setRequestCreatedDate:v10];

    [v2[4] setTimeoutTimeInterval:(uint64_t)v9];
    return (id *)_[v2[5] sendIDSEncryptionKeyRequest:v2[6] withRequestRecord:v2[4] desiredTimeout:v9];
  }

  return result;
}

void sub_1000BF560( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, id location)
{
}

void sub_1000BF58C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id to = 0LL;
  objc_copyWeak(&to, (id *)(a1 + 64));
  if (v3)
  {
    uint64_t v6 = handoff_log(v4, v5);
    double v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1000C609C();
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    uint64_t v26 = RPOptionTimeoutSeconds;
    double v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
    char v27 = v8;
    double v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v27,  &v26,  1LL));

    id v10 = objc_loadWeakRetained(&to);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 linkClient]);
    char v17 = _NSConcreteStackBlock;
    uint64_t v18 = 3221225472LL;
    unsigned int v19 = sub_1000BF7F0;
    uint64_t v20 = &unk_1005CD7C0;
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v21 = *(void *)(a1 + 40);
    objc_copyWeak(&v24, &to);
    uint64_t v13 = RPDestinationIdentifierDirectPeer;
    id v22 = *(id *)(a1 + 48);
    id v23 = *(id *)(a1 + 56);
    [v11 sendRequestID:@"com.apple.handoff.encryption-key-request" request:v12 destinationID:v13 options:v9 responseHandler:&v17];

    unsigned int v14 = *(void **)(a1 + 40);
    id v15 = objc_loadWeakRetained(&to);
    unint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "requestIdentifier", v17, v18, v19, v20, v21));
    [v14 messageWithIdentifier:v16 didSendWithSuccess:1 error:0];

    objc_destroyWeak(&v24);
  }

  objc_destroyWeak(&to);
}

void sub_1000BF7AC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_1000BF7F0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    uint64_t Int64Ranged = CFDictionaryGetInt64Ranged(v8, RPOptionDataLinkType, 0xFFFFFFFF80000000LL, 0x7FFFFFFFLL, 0LL);
    uint64_t v12 = handoff_log(Int64Ranged, v11);
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
      uint64_t v23 = objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:RPOptionXID]);
      id v24 = (void *)v23;
      else {
        uint64_t v25 = off_1005CD998[(int)Int64Ranged];
      }
      int v26 = 138413058;
      id v27 = WeakRetained;
      __int16 v28 = 2112;
      uint64_t v29 = v23;
      __int16 v30 = 2080;
      __int16 v31 = v25;
      __int16 v32 = 2112;
      id v33 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "Encryption key request %@ with xid %@ via Rapport (%s) failed with error %@",  (uint8_t *)&v26,  0x2Au);
    }

    if ([v9 code] != (id)-6714)
    {
      unsigned int v14 = *(void **)(a1 + 32);
      id v15 = objc_loadWeakRetained((id *)(a1 + 56));
      unint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 requestCreatedDate]);
      [v16 timeIntervalSinceNow];
      objc_msgSend( v14,  "logDashboardHandoffRequestViaTransportLinkType:type:success:rtt:",  Int64Ranged,  @"EncryptionKey",  0);
    }

    char v17 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
  }

  else
  {
    uint64_t v18 = *(void **)(a1 + 32);
    id v19 = objc_loadWeakRetained((id *)(a1 + 56));
    [v18 handleEncryptionKeyReplyRapport:v7 options:v8 forRequestRecord:v19 fromDevice:*(void *)(a1 + 40)];

    char v17 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
  }

  v17();
  id v20 = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 linkClient]);
  [v21 invalidate];
}

void sub_1000C0914(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSRunLoop mainRunLoop](&OBJC_CLASS___NSRunLoop, "mainRunLoop"));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) timeoutTimer]);
  [v3 addTimer:v2 forMode:NSDefaultRunLoopMode];
}

id *sub_1000C097C(id *result, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v2 = result;
    id v3 = (void *)objc_claimAutoreleasedReturnValue([result[4] requestCreatedDate]);
    [v3 timeIntervalSinceNow];
    double v5 = v4;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v2[4] requestCreatedDate]);
    [v6 timeIntervalSinceNow];
    if (v5 < 0.0) {
      double v8 = -v7;
    }
    else {
      double v8 = v7;
    }

    double v9 = (double)(uint64_t)[v2[4] timeoutTimeInterval] - v8;
    id v10 = objc_opt_new(&OBJC_CLASS___NSDate);
    [v2[4] setRequestCreatedDate:v10];

    [v2[4] setTimeoutTimeInterval:(uint64_t)v9];
    return (id *)_[v2[5] sendIDSActivityPayloadRequest:v2[6] withRequestRecord:v2[4] desiredTimeout:v9];
  }

  return result;
}

void sub_1000C0FCC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

uint64_t sub_1000C1000(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = 0LL;
  return result;
}

void sub_1000C1010(uint64_t a1)
{
}

void sub_1000C1018(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = handoff_log(v3, v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    sub_1000C6268();
  }

  double v7 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
  double v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceIdentifier]);
  unsigned int v9 = [v7 isEqualToString:v8];

  if (v9)
  {
    uint64_t v12 = handoff_log(v10, v11);
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Found device we were looking for, attempting to send message",  buf,  2u);
    }

    uint64_t v15 = *(void *)(a1 + 32);
    unsigned int v14 = *(void **)(a1 + 40);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_1000C1168;
    v17[3] = &unk_1005CD810;
    uint64_t v16 = *(void *)(a1 + 48);
    id v18 = *(id *)(a1 + 56);
    __int128 v19 = *(_OWORD *)(a1 + 64);
    [v14 sendActivityPayloadRequestMessageToDevice:v16 withRequestRecord:v15 withDestinationDevice:v3 completionHandler:v17];
  }
}

void sub_1000C1168(void *a1)
{
  uint64_t v2 = *(void *)(a1[5] + 8LL);
  id v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 4sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = 0LL;

  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
}

void sub_1000C11C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = v3;
  if (v3)
  {
    uint64_t v6 = handoff_log(v3, v4);
    double v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1000C62C8();
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  double v8 = *(void **)(*(void *)(a1 + 32) + 112LL);
  if (v8)
  {
    unsigned int v9 = v8;
    dispatch_source_cancel(v9);
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void **)(v10 + 112);
    *(void *)(v10 + 112) = 0LL;
  }

  dispatch_source_t v12 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, &_dispatch_main_q);
  uint64_t v13 = *(void *)(a1 + 32);
  unsigned int v14 = *(void **)(v13 + 112);
  *(void *)(v13 + 112) = v12;

  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = *(void **)(a1 + 40);
  char v17 = *(dispatch_source_s **)(v15 + 112);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_1000C1330;
  handler[3] = &unk_1005CD860;
  uint64_t v18 = *(void *)(a1 + 56);
  handler[4] = v15;
  uint64_t v24 = v18;
  id v19 = v16;
  uint64_t v20 = *(void *)(a1 + 64);
  id v22 = v19;
  uint64_t v25 = v20;
  id v23 = *(id *)(a1 + 48);
  dispatch_source_set_event_handler(v17, handler);
  SFDispatchTimerSet(*(void *)(*(void *)(a1 + 32) + 112LL), 6.0, -1.0, -4.0);
  dispatch_resume(*(dispatch_object_t *)(*(void *)(a1 + 32) + 112LL));
}

void sub_1000C1330(void *a1, uint64_t a2)
{
  id v3 = *(void **)(a1[4] + 112LL);
  if (v3)
  {
    uint64_t v4 = v3;
    dispatch_source_cancel(v4);
    uint64_t v5 = a1[4];
    uint64_t v6 = *(void **)(v5 + 112);
    *(void *)(v5 + 112) = 0LL;
  }

  if (!*(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL))
  {
    uint64_t v7 = handoff_log(a1, a2);
    double v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = a1[5];
      int v12 = 138412290;
      uint64_t v13 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Cannot send Handoff payload request %@ via Rapport as we did not find the target device. Did not send message.",  (uint8_t *)&v12,  0xCu);
    }

    [*(id *)(*(void *)(a1[8] + 8) + 40) invalidate];
    uint64_t v10 = *(void *)(a1[8] + 8LL);
    uint64_t v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 4sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = 0LL;

    (*(void (**)(void))(a1[6] + 16LL))();
  }

void sub_1000C1700( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id location)
{
}

void sub_1000C172C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id to = 0LL;
  objc_copyWeak(&to, (id *)(a1 + 64));
  if (v3)
  {
    uint64_t v6 = handoff_log(v4, v5);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1000C609C();
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    uint64_t v26 = RPOptionTimeoutSeconds;
    double v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
    id v27 = v8;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v27,  &v26,  1LL));

    id v10 = objc_loadWeakRetained(&to);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 linkClient]);
    char v17 = _NSConcreteStackBlock;
    uint64_t v18 = 3221225472LL;
    id v19 = sub_1000C1990;
    uint64_t v20 = &unk_1005CD7C0;
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v21 = *(void *)(a1 + 40);
    objc_copyWeak(&v24, &to);
    uint64_t v13 = RPDestinationIdentifierDirectPeer;
    id v22 = *(id *)(a1 + 48);
    id v23 = *(id *)(a1 + 56);
    [v11 sendRequestID:@"com.apple.handoff.payload-request" request:v12 destinationID:v13 options:v9 responseHandler:&v17];

    unsigned int v14 = *(void **)(a1 + 40);
    id v15 = objc_loadWeakRetained(&to);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "requestIdentifier", v17, v18, v19, v20, v21));
    [v14 messageWithIdentifier:v16 didSendWithSuccess:1 error:0];

    objc_destroyWeak(&v24);
  }

  objc_destroyWeak(&to);
}

void sub_1000C194C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_1000C1990(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    uint64_t Int64Ranged = CFDictionaryGetInt64Ranged(v8, RPOptionDataLinkType, 0xFFFFFFFF80000000LL, 0x7FFFFFFFLL, 0LL);
    uint64_t v12 = handoff_log(Int64Ranged, v11);
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
      uint64_t v23 = objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:RPOptionXID]);
      id v24 = (void *)v23;
      else {
        uint64_t v25 = off_1005CD998[(int)Int64Ranged];
      }
      int v26 = 138413058;
      id v27 = WeakRetained;
      __int16 v28 = 2112;
      uint64_t v29 = v23;
      __int16 v30 = 2080;
      uint64_t v31 = v25;
      __int16 v32 = 2112;
      id v33 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "Handoff payload request %@ with xid %@ via Rapport (%s) failed with error %@",  (uint8_t *)&v26,  0x2Au);
    }

    if ([v9 code] != (id)-6714)
    {
      unsigned int v14 = *(void **)(a1 + 32);
      id v15 = objc_loadWeakRetained((id *)(a1 + 56));
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 requestCreatedDate]);
      [v16 timeIntervalSinceNow];
      objc_msgSend( v14,  "logDashboardHandoffRequestViaTransportLinkType:type:success:rtt:",  Int64Ranged,  @"Request",  0);
    }

    char v17 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
  }

  else
  {
    uint64_t v18 = *(void **)(a1 + 32);
    id v19 = objc_loadWeakRetained((id *)(a1 + 56));
    [v18 handlePayloadReplyRapport:v7 options:v8 forRequestRecord:v19 fromDevice:*(void *)(a1 + 40)];

    char v17 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
  }

  v17();
  id v20 = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 linkClient]);
  [v21 invalidate];
}

void sub_1000C2710(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = handoff_log(v3, v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) name]);
    int v8 = 138412290;
    id v9 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Responding to Handoff encryption key request from %@ via Rapport",  (uint8_t *)&v8,  0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_1000C2A00(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) sendEncryptionKeyReplyRequestToDevice:*(void *)(a1 + 40) reply:a2 requestIdentifier:*(void *)(a1 + 48)];
}

void sub_1000C32B4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v8 = handoff_log(v6, v7);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) name]);
    int v21 = 138412290;
    id v22 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Responding to Handoff payload request from %@ via Rapport",  (uint8_t *)&v21,  0xCu);
  }

  uint64_t v13 = handoff_log(v11, v12);
  unsigned int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
    sub_1000C66CC();
  }

  uint64_t v17 = handoff_log(v15, v16);
  uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
    sub_1000C666C();
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  [*(id *)(a1 + 40) activityPayloadReplySuccess:v6];
  id v19 = *(void **)(a1 + 40);
  id v20 = (void *)objc_claimAutoreleasedReturnValue([v6 messageIdentifier]);
  [v19 messageWithIdentifier:v20 didSendWithSuccess:1 error:0];
}

id sub_1000C358C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) sendIDSActivityPayloadReply:a2 withReplyRecord:a3];
}

void sub_1000C3880(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  id v9 = *(void **)(a1 + 32);
  id v10 = a2;
  [v9 timeIntervalSinceNow];
  uint64_t v12 = SFStringFromTimeInterval(1LL, -v11);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  uint64_t v15 = handoff_log(v13, v14);
  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v38 = *(void *)(a1 + 40);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) name]);
    id v18 = v7;
    id v19 = v8;
    id v20 = v10;
    int v21 = v13;
    uint64_t v23 = *(void *)(a1 + 56);
    uint64_t v22 = *(void *)(a1 + 64);
    uint64_t v24 = SFHexStringForData(*(void *)(a1 + 72));
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    uint64_t v26 = *(void *)(a1 + 80);
    *(_DWORD *)buf = 138413826;
    uint64_t v40 = v38;
    __int16 v41 = 2112;
    uint64_t v42 = v17;
    __int16 v43 = 2112;
    uint64_t v44 = v23;
    uint64_t v13 = v21;
    id v10 = v20;
    id v8 = v19;
    id v7 = v18;
    __int16 v45 = 2112;
    uint64_t v46 = v22;
    __int16 v47 = 2112;
    uint64_t v48 = v25;
    __int16 v49 = 2112;
    uint64_t v50 = v26;
    __int16 v51 = 2112;
    unsigned int v52 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Ready to respond to handoff request via %@ from %@ (%@) with requestIdentifier %@ for advertisementPayload %@, command: %@. RTT:%@",  buf,  0x48u);
  }

  uint64_t v29 = handoff_log(v27, v28);
  __int16 v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
  uint64_t v31 = v30;
  if (v7)
  {
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
      sub_1000C6870();
    }
  }

  else
  {
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      sub_1000C67BC(a1);
    }

    id v7 = (id)objc_claimAutoreleasedReturnValue(+[NSData data](&OBJC_CLASS___NSData, "data"));
  }

  __int16 v32 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v32,  "setObject:forKeyedSubscript:",  *(void *)(a1 + 72),  @"rAdvPayload");
  -[NSMutableDictionary setObject:forKeyedSubscript:](v32, "setObject:forKeyedSubscript:", v7, @"rActPayload");
  if (v8)
  {
    id v33 = (void *)objc_claimAutoreleasedReturnValue([v8 domain]);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v32,  "setObject:forKeyedSubscript:",  v33,  @"rActPayloadErrorDomain");

    unint64_t v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v8 code]));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v32,  "setObject:forKeyedSubscript:",  v34,  @"rActPayloadErrorCode");
  }

  char v35 = objc_opt_new(&OBJC_CLASS___NSUUID);
  char v36 = objc_opt_new(&OBJC_CLASS___SDActivityPayloadReplyRecord);
  -[SDActivityPayloadReplyRecord setMessageIdentifier:](v36, "setMessageIdentifier:", v35);
  unsigned int v37 = -[NSUUID initWithUUIDString:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDString:", *(void *)(a1 + 64));
  -[SDActivityPayloadReplyRecord setRequestIdentifier:](v36, "setRequestIdentifier:", v37);

  -[SDActivityPayloadReplyRecord setActivityIdentifier:](v36, "setActivityIdentifier:", v10);
  -[SDActivityPayloadReplyRecord setDeviceIdentifier:](v36, "setDeviceIdentifier:", *(void *)(a1 + 56));
  [*(id *)(*(void *)(a1 + 88) + 88) setObject:v36 forKeyedSubscript:v35];
  (*(void (**)(void))(*(void *)(a1 + 96) + 16LL))();
}

void sub_1000C5B78(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"rActPayload"]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 advertisementPayload]);

  if (v5 && v4)
  {
    if ([*(id *)(*(void *)(a1 + 40) + 120) count] == (id)3) {
      [*(id *)(*(void *)(a1 + 40) + 120) removeLastObject];
    }
    id v8 = *(void **)(*(void *)(a1 + 40) + 120LL);
    v23[0] = *(void *)(a1 + 48);
    v22[0] = @"deviceIdentifier";
    v22[1] = @"advertisementPayload";
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 advertisementPayload]);
    v22[2] = @"activityPayload";
    v23[1] = v9;
    v23[2] = v4;
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v23,  v22,  3LL));
    [v8 insertObject:v10 atIndex:0];
  }

  uint64_t v11 = handoff_log(v6, v7);
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) name]);
    if (v4) {
      uint64_t v14 = @"YES";
    }
    else {
      uint64_t v14 = @"NO";
    }
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v3 description]);
    int v16 = 138412802;
    uint64_t v17 = v13;
    __int16 v18 = 2112;
    id v19 = v14;
    __int16 v20 = 2112;
    int v21 = v15;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "from %@, is final:%@, %@",  (uint8_t *)&v16,  0x20u);
  }
}

void sub_1000C5E04( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

  ;
}

  ;
}

  ;
}

void sub_1000C5E70()
{
}

void sub_1000C5ED0(uint64_t a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) UUIDString]);
  sub_10001C438();
  sub_1000A3814();
  _os_log_error_impl(v2, v3, v4, v5, v6, 0xCu);

  sub_10004D1DC();
}

void sub_1000C5F54()
{
}

void sub_1000C5FB4()
{
  uint64_t v2 = (objc_class *)objc_opt_class(v0, v1);
  uint64_t v3 = NSStringFromClass(v2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_1000C5E3C();
  sub_1000C5E04( (void *)&_mh_execute_header,  v5,  v6,  "%@: Encryption key request - Already have request for key %@. Replacing completion block",  v7,  v8,  v9,  v10,  2u);

  sub_1000241EC();
}

void sub_1000C603C()
{
}

void sub_1000C609C()
{
}

void sub_1000C6108()
{
}

void sub_1000C6168()
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 deviceIdentifier]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*v1 devices]);
  int v6 = 138412546;
  uint64_t v7 = v3;
  sub_1000C5E18();
  sub_100038BF8( (void *)&_mh_execute_header,  v0,  v5,  "Encryption key: No device found for identifier %@ (Devices: %@)",  (uint8_t *)&v6);

  sub_1000241EC();
}

void sub_1000C6208()
{
}

void sub_1000C6268()
{
}

void sub_1000C62C8()
{
}

void sub_1000C6328()
{
}

void sub_1000C6390()
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 deviceIdentifier]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 16) devices]);
  int v6 = 138412546;
  uint64_t v7 = v3;
  sub_1000C5E18();
  sub_100038BF8((void *)&_mh_execute_header, v0, v5, "No device found for identifier %@ (Devices: %@)", (uint8_t *)&v6);

  sub_1000241EC();
}

void sub_1000C6430()
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*v2 devices]);
  int v5 = 138412546;
  uint64_t v6 = v1;
  sub_1000C5E18();
  sub_100038BF8((void *)&_mh_execute_header, v0, v4, "No device found for identifier %@ (Devices: %@)", (uint8_t *)&v5);

  sub_1000241EC();
}

void sub_1000C64C0()
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 deviceIdentifier]);
  int v5 = 138412546;
  uint64_t v6 = v1;
  sub_1000C5E18();
  sub_100038BF8((void *)&_mh_execute_header, v0, v4, "deviceIdentifier %@ does not match %@", (uint8_t *)&v5);

  sub_1000241EC();
}

void sub_1000C6550()
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 UUIDString]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v0 uniqueIDOverride]);
  sub_1000C5E18();
  sub_1000C5E04( (void *)&_mh_execute_header,  v4,  v5,  "Attempting to use unrequested encryption key with requestIdentifier %@ from %@",  v6,  v7,  v8,  v9,  2u);

  sub_1000241EC();
}

void sub_1000C65E8()
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue([v0 UUIDString]);
  sub_1000C5E3C();
  sub_1000C5E04( (void *)&_mh_execute_header,  v2,  v3,  "Discarding unrequested encryption key as it is missing the requestIdentifier %@ or device %@",  v4,  v5,  v6,  v7,  2u);

  sub_1000241EC();
}

void sub_1000C666C()
{
}

void sub_1000C66CC()
{
}

void sub_1000C672C()
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*v2 devices]);
  int v5 = 138412546;
  uint64_t v6 = v1;
  sub_1000C5E18();
  sub_100038BF8( (void *)&_mh_execute_header,  v0,  v4,  "No IDS device found for identifier %@ (Devices: %@)",  (uint8_t *)&v5);

  sub_1000241EC();
}

void sub_1000C67BC(uint64_t a1)
{
  uint64_t v1 = SFHexStringForData(*(void *)(a1 + 72));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v1);
  sub_1000A3814();
  _os_log_error_impl(v2, v3, v4, v5, v6, 0x2Au);

  sub_1000C5E28();
}

void sub_1000C6870()
{
  uint64_t v3 = v2[5];
  uint64_t v4 = v2[7];
  uint64_t v5 = v2[8];
  uint64_t v6 = SFHexStringForData(v2[9]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  int v8 = 138413314;
  uint64_t v9 = v3;
  __int16 v10 = 2112;
  uint64_t v11 = v4;
  __int16 v12 = 2112;
  uint64_t v13 = v5;
  __int16 v14 = 2112;
  uint64_t v15 = v7;
  __int16 v16 = 1024;
  unsigned int v17 = [v1 length];
  _os_log_debug_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_DEBUG,  "Responding to request via %@ from %@ with requestIdentifier %@ for advertisementPayload %@ with payload of size %d",  (uint8_t *)&v8,  0x30u);

  sub_1000C5E28();
}

void sub_1000C6940()
{
  uint64_t v2 = v1;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v1 deviceIdentifier]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*v0 devices]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v2 requestIdentifier]);
  sub_1000C5E3C();
  sub_1000A3814();
  _os_log_error_impl(v6, v7, v8, v9, v10, 0x20u);
}

void sub_1000C6A0C()
{
}

void sub_1000C6A74()
{
}

void sub_1000C6AD4()
{
}

void sub_1000C6B34()
{
}

void sub_1000C6B94()
{
}

void sub_1000C6BFC()
{
}

void sub_1000C6C64()
{
}

void sub_1000C8FB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(const void **)(a1 + 40);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(const void **)(a1 + 48);
  if (v6) {
    CFRelease(v6);
  }
}

id sub_1000C91D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _handleCertificateCreateResponseWithInfo:a2 error:a3];
}

id sub_1000C93D4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleCreateTimerFired];
}

id sub_1000C9538(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleFetchTimerFired];
}

void sub_1000C97D0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v9[0] = 0LL;
  v9[1] = v9;
  _DWORD v9[2] = 0x2020000000LL;
  v9[3] = a2;
  v8[0] = 0LL;
  v8[1] = v8;
  v8[2] = 0x2020000000LL;
  v8[3] = a3;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(dispatch_queue_s **)(v4 + 168);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  id v6[2] = sub_1000C9870;
  v6[3] = &unk_1005CDA50;
  int v7 = a4;
  void v6[4] = v4;
  v6[5] = v9;
  v6[6] = v8;
  dispatch_async(v5, v6);
  _Block_object_dispose(v8, 8);
  _Block_object_dispose(v9, 8);
}

void sub_1000C9870(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 56);
  if (v2)
  {
    uint64_t v3 = 0LL;
    goto LABEL_9;
  }

  uint64_t v4 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v4 + 128))
  {
    uint64_t v3 = 0LL;
    int v2 = -6723;
  }

  else
  {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    if (v5 && *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
    {
      *(void *)(v4 + 136) = v5;
      *(void *)(*(void *)(a1 + 32) + 152LL) = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0LL;
      *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0LL;
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 136LL);
      id v13 = 0LL;
      int v2 = SFAppleIDCopyKeychainReferenceForKey(v6, &v13);
      id v7 = v13;
      id v8 = v13;
      uint64_t v3 = v8;
      if (v2) {
        goto LABEL_9;
      }
      if ([v8 length])
      {
        objc_storeStrong((id *)(*(void *)(a1 + 32) + 144LL), v7);
        [*(id *)(a1 + 32) _handleKeyPairAvailable];
        int v2 = 0;
        goto LABEL_9;
      }
    }

    else
    {
      uint64_t v3 = 0LL;
    }

    int v2 = -6762;
  }

id sub_1000C9B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) _handleCertificateFetchResponseWithInfo:a2 error:a3];
}

id sub_1000C9BBC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _activate];
}

id sub_1000C9D6C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

id sub_1000CA690(uint64_t a1)
{
  return _[*(id *)(a1 + 32) eject];
}

void sub_1000CA75C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "SDNetworkEjecter: stop", v1, 2u);
}

void sub_1000CA7DC(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___SharingDaemon);
  int v2 = (void *)qword_100657030;
  qword_100657030 = (uint64_t)v1;
}

LABEL_54:
}
}

  v78 = v129[10];
  uint64_t v79 = (void *)(v55 + v78);
  v80 = *(void *)(v55 + v78 + 8);
  v81 = &v59[v78];
  v82 = v81[1];
  if (!v80)
  {
    swift_bridgeObjectRetain(v81[1]);
    sub_1001A4BC8((uint64_t)v59, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    sub_1001A4BC8(v55, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    if (!v82) {
      goto LABEL_61;
    }
    v84 = v82;
    goto LABEL_63;
  }

  if (!v82)
  {
    uint64_t v85 = (uint64_t)v59;
    uint64_t v86 = v80;
    swift_bridgeObjectRetain(v80);
    sub_1001A4BC8(v85, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    sub_1001A4BC8(v55, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    v84 = v86;
LABEL_63:
    swift_bridgeObjectRelease(v84);
    goto LABEL_22;
  }

  if (*v79 == *v81 && v80 == v82)
  {
    v83 = v80;
    swift_bridgeObjectRetain(v80);
    sub_1001A4BC8((uint64_t)v127, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    sub_1001A4BC8(v55, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    swift_bridgeObjectRelease(v83);
LABEL_61:
    uint64_t v60 = v126;
    sub_1001A4B84((uint64_t)a1, (uint64_t)v126, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    unint64_t v61 = v125;
    sub_1001A4B84((uint64_t)a2, (uint64_t)v125, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    goto LABEL_65;
  }

  v87 = v80;
  id v88 = _stringCompareWithSmolCheck(_:_:expecting:)(*v79, v80, *v81, v81[1], 0LL);
  swift_bridgeObjectRetain(v87);
  sub_1001A4BC8((uint64_t)v127, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
  sub_1001A4BC8(v55, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
  swift_bridgeObjectRelease(v87);
  uint64_t v60 = v126;
  sub_1001A4B84((uint64_t)a1, (uint64_t)v126, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
  unint64_t v61 = v125;
  uint64_t v54 = v128;
  sub_1001A4B84((uint64_t)a2, (uint64_t)v125, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
  if ((v88 & 1) == 0)
  {
LABEL_23:
    sub_1001A4BC8((uint64_t)v61, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    sub_1001A4BC8((uint64_t)v60, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
LABEL_24:
    sub_1001A4B84((uint64_t)a1, v53, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    sub_1001A4B84((uint64_t)a2, (uint64_t)v54, type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint);
    goto LABEL_25;
  }

    uint64_t v96 = v132;
    v97 = objc_msgSend(v132, v28[220], v64);
    v98 = static Set._unconditionallyBridgeFromObjectiveC(_:)( v97,  &type metadata for AnyHashable,  &protocol witness table for AnyHashable);

    v99 = *(void *)(v98 + 16);
    swift_bridgeObjectRelease((const char *)v98);
    if (v99)
    {
      id v8 = v96;
      uint64_t v9 = v28[220];
      __int16 v10 = v131;
      uint64_t v11 = [v131 v9];
      __int16 v12 = (const char *)static Set._unconditionallyBridgeFromObjectiveC(_:)( v11,  &type metadata for AnyHashable,  &protocol witness table for AnyHashable);

      id v13 = Set._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v8, "intersectSet:", v13, swift_bridgeObjectRelease(v12).n128_f64[0]);

      uint64_t v1 = v125;
      id v0 = v126;
      (*(void (**)(char *, uint64_t))(v125 + 8))(v3, v126);
    }

    else
    {

      uint64_t v1 = v125;
      id v0 = v126;
      (*(void (**)(char *, uint64_t))(v125 + 8))(v3, v126);

      v132 = v131;
    }

    uint64_t v4 = v124;
    if (++v6 == v129) {
      goto LABEL_64;
    }
  }

  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  swift_once(&qword_100644068, sub_1002678E4);
LABEL_65:
  v102 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v102, (uint64_t)qword_10064A340);
  __int16 v103 = v132;
  v104 = (os_log_s *)Logger.logObject.getter(v103);
  NSErrorUserInfoKey v105 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v104, v105))
  {
    v106 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v107 = swift_slowAlloc(32LL, -1LL);
    v133 = v107;
    *(_DWORD *)v106 = 136315138;
    v108 = [v103 array];
    v109 = (const char *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v108, (char *)&type metadata for Any + 8);

    v110 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v109);
    v111 = (id)SFCompactStringFromCollection(v110);

    if (v111)
    {
      v112 = static String._unconditionallyBridgeFromObjectiveC(_:)(v111);
      v114 = v113;
    }

    else
    {
      v134 = 0LL;
      v135 = (const char *)0xE000000000000000LL;
      _StringGuts.grow(_:)(17LL);
      swift_bridgeObjectRelease(v135);
      v114 = (const char *)0x80000001005046B0LL;
      v112 = 0xD000000000000015LL;
    }

    v134 = sub_10018CDB4(v112, (unint64_t)v114, &v133);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v106 + 4, v106 + 12);

    swift_bridgeObjectRelease(v114);
    _os_log_impl((void *)&_mh_execute_header, v104, v105, "Generic handler found available applications %s", v106, 0xCu);
    swift_arrayDestroy(v107, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v107, -1LL, -1LL);
    swift_slowDealloc(v106, -1LL, -1LL);
  }

  else
  {
  }

  *(void *)&v115 = swift_beginAccess(&v132, &v134, 0LL, 0LL).n128_u64[0];
  v116 = v132;
  v117 = objc_msgSend(v132, "array", v115);
  v118 = (const char *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v117, (char *)&type metadata for Any + 8);

  v119 = sub_1002DE4F4((uint64_t)v118);
  swift_bridgeObjectRelease(v118);
  return v119;
}

void sub_1000CBF9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  xpc_type_t type = xpc_get_type(v3);
  if (type == (xpc_type_t)&_xpc_type_error)
  {
    context = xpc_connection_get_context(*(xpc_connection_t *)(a1 + 32));
    uint64_t v8 = objc_claimAutoreleasedReturnValue(context);
    uint64_t v9 = (void *)v8;
    if (v3 == &_xpc_error_connection_invalid)
    {
      uint64_t v17 = daemon_log(v8);
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        int v20 = 134217984;
        int v21 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "XPC_ERROR_CONNECTION_INVALID <%p>",  (uint8_t *)&v20,  0xCu);
      }
    }

    else if (v3 == &_xpc_error_connection_interrupted)
    {
      uint64_t v18 = daemon_log(v8);
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_1000CD0AC();
      }
    }

    else
    {
      uint64_t v10 = daemon_log(v8);
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
      if (v3 == &_xpc_error_termination_imminent)
      {
        if (v12) {
          sub_1000CD110();
        }
      }

      else if (v12)
      {
        sub_1000CD174();
      }
    }

    if (v9)
    {
      [v9 invalidate];
      id v19 = (void *)objc_claimAutoreleasedReturnValue([v9 objectKey]);
      if (v19) {
        [*(id *)(*(void *)(a1 + 40) + 64) removeObjectForKey:v19];
      }
      [*(id *)(*(void *)(a1 + 40) + 8) removeObject:v9];
      xpc_connection_set_context(*(xpc_connection_t *)(a1 + 32), 0LL);
    }
  }

  else
  {
    if (type == (xpc_type_t)&_xpc_type_dictionary)
    {
      string = xpc_dictionary_get_string(v3, "Object");
      if (!string) {
        goto LABEL_27;
      }
      __int16 v14 = string;
      if (!strcmp(string, "Browser"))
      {
        [*(id *)(a1 + 40) handleBrowserMessage:v3 forConnection:*(void *)(a1 + 32)];
        goto LABEL_27;
      }

      uint64_t v15 = strcmp(v14, "Operation");
      if (!(_DWORD)v15)
      {
        [*(id *)(a1 + 40) handleOperationMessage:v3 forConnection:*(void *)(a1 + 32)];
        goto LABEL_27;
      }

      uint64_t v16 = daemon_log(v15);
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_1000CD1D8();
      }
    }

    else
    {
      uint64_t v5 = daemon_log(type);
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_1000CD204();
      }
    }
  }

void sub_1000CC868(uint64_t a1, void *a2)
{
  id v3 = a2;
  xpc_type_t type = xpc_get_type(v3);
  if (type == (xpc_type_t)&_xpc_type_error)
  {
    uint64_t v7 = daemon_log(type);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    BOOL v8 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (v3 == &_xpc_error_termination_imminent)
    {
      if (v8) {
        sub_1000CD230();
      }
    }

    else if (v8)
    {
      sub_1000CD25C();
    }

    goto LABEL_11;
  }

  if (type != (xpc_type_t)&_xpc_type_connection)
  {
    uint64_t v5 = daemon_log(type);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000CD288();
    }
LABEL_11:

    goto LABEL_12;
  }

  [*(id *)(a1 + 32) handleNewConnection:v3];
LABEL_12:
}

id sub_1000CC938(uint64_t a1)
{
  return _[*(id *)(a1 + 32) stateCapture];
}

void sub_1000CCB00()
{
}

void sub_1000CCB2C()
{
}

void sub_1000CCB58()
{
}

void sub_1000CCB84(void *a1, os_log_s *a2)
{
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1 connection]);
  id v6 = sub_1001167C0(v5);
  BOOL v8 = (void *)objc_claimAutoreleasedReturnValue(v6);
  uint64_t v9 = v8;
  if (!v8)
  {
    uint64_t v2 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue([a1 connection]);
    uint64_t pid = xpc_connection_get_pid(v2);
    uint64_t v11 = NSPrintF("%#{pid}", pid);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v11);
  }

  int v12 = 138412290;
  id v13 = v9;
  sub_10004D1BC((void *)&_mh_execute_header, a2, v7, "%@ is not entitled to do AirDrop discovery", (uint8_t *)&v12);
  if (!v8)
  {
  }
}

void sub_1000CCC74(void *a1, os_log_s *a2)
{
  id v3 = sub_1001167C0(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_10001C438();
  sub_10004D1BC((void *)&_mh_execute_header, a2, v5, "%@ is not entitled to get the AirDrop discoverable mode", v6);

  sub_10004D1DC();
}

void sub_1000CCCF4()
{
}

void sub_1000CCD20()
{
}

void sub_1000CCD4C()
{
}

void sub_1000CCD78()
{
}

void sub_1000CCDA4()
{
  sub_1000147D0((void *)&_mh_execute_header, v0, v1, "openNode returned %d", v2, v3, v4, v5, v6);
  sub_1000147C8();
}

void sub_1000CCE04()
{
  sub_1000147D0((void *)&_mh_execute_header, v0, v1, "closeNode returned %d", v2, v3, v4, v5, v6);
  sub_1000147C8();
}

void sub_1000CCE64()
{
  sub_1000147D0((void *)&_mh_execute_header, v0, v1, "addNode returned %d", v2, v3, v4, v5, v6);
  sub_1000147C8();
}

void sub_1000CCEC4()
{
  sub_1000147D0((void *)&_mh_execute_header, v0, v1, "removeNode returned %d", v2, v3, v4, v5, v6);
  sub_1000147C8();
}

void sub_1000CCF24()
{
}

void sub_1000CCF50()
{
}

void sub_1000CCF7C()
{
}

void sub_1000CCFA8()
{
}

void sub_1000CCFD4()
{
}

void sub_1000CD000(void *a1, os_log_s *a2)
{
  id v3 = sub_1001167C0(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_10001C438();
  sub_10004D1BC((void *)&_mh_execute_header, a2, v5, "%@ is not entitled to set the AirDrop discoverable mode", v6);

  sub_10004D1DC();
}

void sub_1000CD080()
{
}

void sub_1000CD0AC()
{
}

void sub_1000CD110()
{
}

void sub_1000CD174()
{
}

void sub_1000CD1D8()
{
}

void sub_1000CD204()
{
}

void sub_1000CD230()
{
}

void sub_1000CD25C()
{
}

void sub_1000CD288()
{
}

id sub_1000CE284( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  return _[a8 handleBrowseCallBack:a2 interface:a3 error:a4 name:a5 type:a6 domain:a7];
}

id sub_1000CE3B0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateBrowserState];
}

id sub_1000CE3B8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateBrowserState];
}

id sub_1000CF438( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  return _[a11 handleQueryCallBack:a2 error:a4 fullname:a5 rrtype:a6 rdlen:a8 rdata:a9];
}

id sub_1000CFE94(uint64_t a1)
{
  return [*(id *)(a1 + 32) notifyClient];
}

void sub_1000D0880( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_1000D08AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = airdrop_log(v3);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  uint8_t v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1000D27FC(a1, (uint64_t)v3, v6);
    }
  }

  else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v9 = 138412290;
    uint64_t v10 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Updated RPIdentity for %@",  (uint8_t *)&v9,  0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained invalidate];
}

CFStringRef sub_1000D0D98(uint64_t a1)
{
  else {
    return (const __CFString *)*((void *)&off_1005CDC20 + a1 - 1);
  }
}

id sub_1000D14FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) handleIdentity:a2 withQueryID:*(void *)(a1 + 40) emailOrPhone:*(void *)(a1 + 48) error:a3];
}

void sub_1000D2494()
{
}

void sub_1000D24C0(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  *(_DWORD *)uint64_t v3 = 138412546;
  *(void *)&v3[4] = a1;
  *(_WORD *)&v3[12] = 2112;
  *(void *)&v3[14] = a2;
  sub_10004D1C8( (void *)&_mh_execute_header,  a2,  a3,  "WirelessProximity foundDevice %@ rssi %@",  *(void *)v3,  *(void *)&v3[8],  *(void *)&v3[16]);
  sub_10001480C();
}

void sub_1000D2530( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D2594()
{
  sub_1000147D0( (void *)&_mh_execute_header,  v0,  v1,  "SDBonjourBrowser: DNSServiceSetDispatchQueue returned %d",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_1000D25F4()
{
  sub_1000147D0( (void *)&_mh_execute_header,  v0,  v1,  "SDBonjourBrowser: DNSServiceBrowse returned %d",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_1000D2654()
{
  sub_1000147D0( (void *)&_mh_execute_header,  v0,  v1,  "SDBonjourBrowser: DNSServiceCreateConnection returned %d",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_1000D26B4()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "SDBonjourBrowser: _SDServiceInstanceName returned nil",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_1000D26E0()
{
}

void sub_1000D270C()
{
  sub_1000147D0( (void *)&_mh_execute_header,  v0,  v1,  "SDBonjourBrowser: DNSServiceQueryRecord returned %d",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_1000D276C()
{
}

void sub_1000D2798( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D27FC(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  *(_DWORD *)uint64_t v3 = 138412546;
  *(void *)&v3[4] = *(void *)(a1 + 32);
  *(_WORD *)&v3[12] = 2112;
  *(void *)&v3[14] = a2;
  sub_10004D1C8( (void *)&_mh_execute_header,  a2,  a3,  "Failed to update RPIdentity for %@ with error %@",  *(void *)v3,  *(void *)&v3[8],  *(void *)&v3[16]);
  sub_10001480C();
}

void sub_1000D2870()
{
}

void sub_1000D289C(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 141558531;
  uint64_t v4 = 1752392040LL;
  __int16 v5 = 2113;
  uint64_t v6 = a1;
  __int16 v7 = 2112;
  uint64_t v8 = a2;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "SDBonjourBrowse:  failed to copy identity for %{private, mask.hash}@ with error %@",  (uint8_t *)&v3,  0x20u);
}

void sub_1000D2934()
{
  sub_1000147D0( (void *)&_mh_execute_header,  v0,  v1,  "SDBonjourBrowser: handleBrowseCallBack returned %d",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_1000D2994()
{
}

void sub_1000D29F4()
{
  sub_1000147D0( (void *)&_mh_execute_header,  v0,  v1,  "SDBonjourBrowser: handleQueryCallBack returned %d",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

uint64_t SDAuthenticationPairingCreateRecordReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 40) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_45;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_47;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_45:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_47:
        uint64_t v32 = 32LL;
        goto LABEL_52;
      case 2u:
        uint64_t String = PBReaderReadString(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(String);
        uint64_t v20 = 16LL;
        goto LABEL_36;
      case 3u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 40) |= 1u;
        while (2)
        {
          unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1LL || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v24 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
            v14 |= (unint64_t)(v24 & 0x7F) << v21;
            if (v24 < 0)
            {
              v21 += 7;
              BOOL v9 = v22++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_51;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_51:
        uint64_t v32 = 8LL;
LABEL_52:
        *(_DWORD *)(a1 + v32) = v14;
        continue;
      case 4u:
        uint64_t Data = PBReaderReadData(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(Data);
        uint64_t v20 = 24LL;
LABEL_36:
        uint64_t v26 = *(void **)(a1 + v20);
        *(void *)(a1 + v2sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = v19;

        continue;
      case 5u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v29 = 0LL;
        *(_BYTE *)(a1 + 40) |= 4u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      unint64_t v30 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v30 == -1LL || v30 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v31 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 1;
      v29 |= (unint64_t)(v31 & 0x7F) << v27;
      if ((v31 & 0x80) == 0) {
        goto LABEL_54;
      }
      v27 += 7;
      BOOL v9 = v28++ >= 9;
      if (v9)
      {
        uint64_t v29 = 0LL;
        goto LABEL_56;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_54:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v29 = 0LL;
    }
LABEL_56:
    *(_BYTE *)(a1 + 36) = v29 != 0;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_1000D37D4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onQueue_start");
}

void sub_1000D3BF0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    [*(id *)(a1 + 32) invalidateResponseTimer];
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = SFAutoUnlockErrorDomain;
    NSErrorUserInfoKey v7 = NSLocalizedDescriptionKey;
    char v8 = @"Failed to send step data";
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v8,  &v7,  1LL));
    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v4,  103LL,  v5));
    [v3 notifyDelegateWithError:v6];
  }

id *sub_1000D4024(id *result)
{
  if (*((_WORD *)result + 24) == 503)
  {
    uint64_t v1 = result;
    uint64_t v2 = auto_unlock_log(result);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4[0] = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Received SDAutoUnlockMessageTypeRegistrationStep",  (uint8_t *)v4,  2u);
    }

    [v1[4] invalidateResponseTimer];
    return (id *)[v1[4] handleStepData:v1[5]];
  }

  return result;
}

void sub_1000D4104()
{
}

void sub_1000D4130()
{
}

void sub_1000D415C()
{
}

void sub_1000D4188()
{
}

void sub_1000D41B4()
{
}

void sub_1000D41E0()
{
}

uint64_t SDAuthenticationPairingDisableReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 32) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_38;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_40;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_40:
        uint64_t v27 = 28LL;
        goto LABEL_45;
      case 2u:
        uint64_t String = PBReaderReadString(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(String);
        uint64_t v20 = 8LL;
        goto LABEL_36;
      case 3u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 32) |= 1u;
        break;
      case 4u:
        uint64_t v25 = PBReaderReadString(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(v25);
        uint64_t v20 = 16LL;
LABEL_36:
        uint64_t v26 = *(void **)(a1 + v20);
        *(void *)(a1 + v2sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = v19;

        continue;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v23 == -1LL || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v24 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
      v14 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0) {
        goto LABEL_42;
      }
      v21 += 7;
      BOOL v9 = v22++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_44;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v14) = 0;
    }
LABEL_44:
    uint64_t v27 = 24LL;
LABEL_45:
    *(_DWORD *)(a1 + v27) = v14;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000D4FA0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 264LL));
  [WeakRetained fileZipper:*(void *)(a1 + 32) event:*(void *)(a1 + 40) withProperty:*(void *)(a1 + 48)];

  CFRelease(*(CFTypeRef *)(a1 + 48));
}

uint64_t sub_1000D6F94(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = airdrop_log(a1);
  unint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
    sub_1000D8A10(a2, a3, v6);
  }

  return 2LL;
}

void sub_1000D6FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = airdrop_log(a1);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_1000D8AC4();
  }

  uint64_t v6 = BOMCopierUserData(a1);
  unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  [v7 bomCopierFatalError:a2];
}

void sub_1000D7060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = BOMCopierUserData(a1);
  id v5 = (id)objc_claimAutoreleasedReturnValue(v4);
  [v5 notifyProgress:a3 force:0];
}

void sub_1000D70A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = airdrop_log(a1);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
    sub_1000D8B24();
  }

  uint64_t v7 = BOMCopierUserData(a1);
  char v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  [v8 bomCopierFatalFileError:a3];
}

void sub_1000D7118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = BOMCopierUserData(a1);
  id v10 = (id)objc_claimAutoreleasedReturnValue(v9);
  [v10 bomCopierCopyFileFinished:a2 type:a3 size:a4 operation:a5];
}

uint64_t sub_1000D7174(uint64_t a1)
{
  uint64_t v1 = airdrop_log(a1);
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
    sub_1000D8BA0();
  }

  return 2LL;
}

void sub_1000D71C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(*(void *)(a1 + 40) + 176LL);
  if (v2) {
    [v3 executeReadWithAdaptiveCompression];
  }
  else {
    [v3 executeWriteWithAdaptiveCompression];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

id sub_1000D7670(uint64_t a1)
{
  return [*(id *)(a1 + 32) notifyProgress:0 force:1];
}

uint64_t sub_1000D7680(uint64_t a1)
{
  uint64_t result = BOMCopierFree(*(void *)(*(void *)(a1 + 32) + 64LL));
  *(void *)(*(void *)(a1 + 32) + 64LL) = 0LL;
  return result;
}

void sub_1000D7C1C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) initBomWithFiles];
  if ((_DWORD)v2)
  {
    CFWriteStreamRef stream = 0LL;
    uint64_t v3 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v3,  "setObject:forKeyedSubscript:",  *(void *)(*(void *)(a1 + 32) + 48LL),  @"indexbom");
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v3,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"copyResources");
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v3,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"sourceIsAppSandboxed");
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v3,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"copyExtendedAttributes");
    id v4 = [*(id *)(*(void *)(a1 + 32) + 88) disableCompression];
    uint64_t v5 = *(void *)(a1 + 32);
    if ((_DWORD)v4)
    {
      if (!*(_BYTE *)(v5 + 8))
      {
        uint64_t v6 = airdrop_log(v4);
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Zip: AirDrop is using CPIO archiving",  buf,  2u);
        }

        char v8 = (const __CFString *)&__kCFBooleanTrue;
        uint64_t v9 = @"createCPIO";
LABEL_24:
        -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v8, v9);
        CFWriteStreamRef stream = (CFWriteStreamRef)CFRetain(*(CFTypeRef *)(*(void *)(a1 + 32) + 104LL));
        uint64_t v18 = off_1005CEA10;
LABEL_25:
        objc_storeStrong((id *)(*(void *)(a1 + 32) + 248LL), *v18);
        unsigned int v22 = (void *)sub_10011488C(*(const __CFArray **)(*(void *)(a1 + 32) + 224LL));
        if (stream)
        {
          uint64_t v23 = CFWriteStreamOpen(stream);
          if ((_DWORD)v23)
          {
            -[NSMutableDictionary setObject:forKeyedSubscript:]( v3,  "setObject:forKeyedSubscript:",  stream,  @"outputStream");
          }

          else
          {
            uint64_t v24 = airdrop_log(v23);
            uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
              sub_1000D8F04();
            }
          }

          CFRelease(stream);
        }

        [*(id *)(a1 + 32) startBomCopy:v22 destination:*(void *)(*(void *)(a1 + 32) + 56) options:v3];

        goto LABEL_33;
      }
    }

    else if (!*(_BYTE *)(v5 + 8))
    {
      unsigned int v12 = [*(id *)(v5 + 88) enablePKZip];
      uint64_t v5 = *(void *)(a1 + 32);
      if (!v12)
      {
        id v19 = [*(id *)(v5 + 88) enableDVZip];
        if ((_DWORD)v19 && !*(_BYTE *)(*(void *)(a1 + 32) + 216LL))
        {
          *(void *)buf = 0LL;
          uint64_t v26 = airdrop_log(v19);
          uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v32 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Zip: AirDrop is using CPIO archiving with adaptive compression",  v32,  2u);
          }

          -[NSMutableDictionary setObject:forKeyedSubscript:]( v3,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"createCPIO");
          CFStreamCreateBoundPair(0LL, (CFReadStreamRef *)buf, &stream, *(void *)(*(void *)(a1 + 32) + 208LL));
          unsigned int v28 = objc_alloc(&OBJC_CLASS___SDAirDropCompressor);
          uint64_t v29 = -[SDAirDropCompressor initWithReadStream:writeStream:]( v28,  "initWithReadStream:writeStream:",  *(void *)buf,  *(void *)(*(void *)(a1 + 32) + 104LL));
          uint64_t v30 = *(void *)(a1 + 32);
          char v31 = *(void **)(v30 + 176);
          *(void *)(v30 + 176) = v29;

          CFRelease(*(CFTypeRef *)buf);
          uint64_t v18 = off_1005CEA20;
          goto LABEL_25;
        }

        uint64_t v20 = airdrop_log(v19);
        char v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Zip: AirDrop is using CPIO archiving with gzip compression",  buf,  2u);
        }

        -[NSMutableDictionary setObject:forKeyedSubscript:]( v3,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"createCPIO");
        char v8 = @"gzip";
        uint64_t v9 = @"compressCPIO";
        goto LABEL_24;
      }
    }

    id v13 = [*(id *)(v5 + 88) enablePKZipCompression];
    int v14 = (int)v13;
    uint64_t v15 = airdrop_log(v13);
    char v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = "archiving";
      if (v14) {
        uint64_t v17 = "compression";
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Zip: AirDrop is using PKZip %s", buf, 0xCu);
    }

    -[NSMutableDictionary setObject:forKeyedSubscript:]( v3,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"createPKZip");
    if ((v14 & 1) == 0) {
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v3,  "setObject:forKeyedSubscript:",  &off_1005F7960,  @"zlibCompressionLevel");
    }
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v3,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"sequesterResources");
    CFWriteStreamRef stream = (CFWriteStreamRef)CFRetain(*(CFTypeRef *)(*(void *)(a1 + 32) + 104LL));
    uint64_t v18 = off_1005CEA18;
    goto LABEL_25;
  }

  uint64_t v10 = airdrop_log(v2);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
    sub_1000D8F30();
  }

  uint64_t v3 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSPOSIXErrorDomain,  22LL,  0LL));
  [*(id *)(a1 + 32) notifyClientForEvent:10 withProperty:v3];
LABEL_33:
}

void sub_1000D8188(uint64_t a1)
{
  CFReadStreamRef readStream = 0LL;
  id v2 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"copyResources");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"copyExtendedAttributes");
  id v3 = [*(id *)(*(void *)(a1 + 32) + 240) isEqual:@"pkzip"];
  if ((_DWORD)v3)
  {
    uint64_t v4 = airdrop_log(v3);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Unzip: AirDrop is using PKZip compression",  buf,  2u);
    }

    -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"extractPKZip");
    uint64_t v6 = @"sequesterResources";
    uint64_t v7 = v2;
    char v8 = (const __CFString *)&__kCFBooleanTrue;
    goto LABEL_13;
  }

  id v9 = [*(id *)(*(void *)(a1 + 32) + 240) isEqual:@"dvzip"];
  if (!(_DWORD)v9)
  {
    uint64_t v17 = airdrop_log(v9);
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Unzip: AirDrop is using CPIO archiving with auto compression detection",  buf,  2u);
    }

    -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"extractCPIO");
    char v8 = @"auto";
    uint64_t v6 = @"compressCPIO";
    uint64_t v7 = v2;
LABEL_13:
    -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v8, v6);
    char v16 = (__CFReadStream *)CFRetain(*(CFTypeRef *)(*(void *)(a1 + 32) + 96LL));
    CFReadStreamRef readStream = v16;
    if (!v16) {
      goto LABEL_20;
    }
    goto LABEL_14;
  }

  *(void *)buf = 0LL;
  uint64_t v10 = airdrop_log(v9);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v22 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Unzip: AirDrop is using CPIO archiving with adaptive compression",  v22,  2u);
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"extractCPIO");
  CFStreamCreateBoundPair(0LL, &readStream, (CFWriteStreamRef *)buf, *(void *)(*(void *)(a1 + 32) + 208LL));
  unsigned int v12 = objc_alloc(&OBJC_CLASS___SDAirDropCompressor);
  id v13 = -[SDAirDropCompressor initWithReadStream:writeStream:]( v12,  "initWithReadStream:writeStream:",  *(void *)(*(void *)(a1 + 32) + 96LL),  *(void *)buf);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void **)(v14 + 176);
  *(void *)(v14 + 176) = v13;

  CFRelease(*(CFTypeRef *)buf);
  char v16 = readStream;
  if (readStream)
  {
LABEL_14:
    uint64_t v19 = CFReadStreamOpen(v16);
    if ((_DWORD)v19)
    {
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v2,  "setObject:forKeyedSubscript:",  readStream,  @"inputStream");
    }

    else
    {
      uint64_t v20 = airdrop_log(v19);
      char v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        sub_1000D8FBC();
      }
    }

    CFRelease(readStream);
  }

uint64_t sub_1000D84A0(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 32) + 64LL);
  if (result) {
    return BOMCopierCancelCopy();
  }
  return result;
}

void sub_1000D86A0(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_1000D86AC()
{
}

void sub_1000D870C()
{
}

void sub_1000D876C()
{
}

void sub_1000D8798()
{
}

void sub_1000D87C4( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D8828()
{
}

void sub_1000D8888(uint8_t *a1, _BYTE *a2, os_log_s *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_1000D86A0( (void *)&_mh_execute_header,  a3,  (uint64_t)a3,  "SDAirDropFileZipper: CFURLCopyLastPathComponent returned NULL",  a1);
}

void sub_1000D88BC(uint8_t *a1, _BYTE *a2, os_log_s *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_1000D86A0( (void *)&_mh_execute_header,  a3,  (uint64_t)a3,  "SDAirDropFileZipper: createPlaceholderFiles conflict not handled",  a1);
}

void sub_1000D88F0()
{
}

void sub_1000D8950()
{
}

void sub_1000D89B0()
{
}

void sub_1000D8A10(uint64_t a1, int __errnum, os_log_s *a3)
{
  int v4 = 136315650;
  uint64_t v5 = a1;
  __int16 v6 = 1024;
  int v7 = __errnum;
  __int16 v8 = 2080;
  id v9 = strerror(__errnum);
  _os_log_error_impl( (void *)&_mh_execute_header,  a3,  OS_LOG_TYPE_ERROR,  "SDAirDropFileZipper: bomCopierFileErrorPtr - %s, errno = %d (%s)",  (uint8_t *)&v4,  0x1Cu);
}

void sub_1000D8AC4()
{
}

void sub_1000D8B24()
{
  __int16 v3 = 1024;
  int v4 = v0;
  _os_log_error_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_ERROR,  "SDAirDropFileZipper: bomCopierFatalFileErrorPtr - %s (%d)",  v2,  0x12u);
  sub_10001480C();
}

void sub_1000D8BA0()
{
}

void sub_1000D8C00()
{
}

void sub_1000D8C2C( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000147D0( (void *)&_mh_execute_header,  a2,  a3,  "SDAirDropFileZipper: BOMCopierCopyWithOptions returned %d",  a5,  a6,  a7,  a8,  0);
  sub_1000147C8();
}

void sub_1000D8C90()
{
}

void sub_1000D8CBC( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D8D3C()
{
}

void sub_1000D8D68()
{
  sub_10000CF78((void *)&_mh_execute_header, v0, v1, "SDAirDropFileZipper: BOMBomNew returned NULL", v2, v3, v4, v5, v6);
  sub_1000147C8();
}

void sub_1000D8D94()
{
}

void sub_1000D8DC0( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100014820( (void *)&_mh_execute_header,  a2,  a3,  "SDAirDropFileZipper: copyCommonParent(%@) returned NULL",  a5,  a6,  a7,  a8,  2u);
  sub_10001480C();
}

void sub_1000D8E28()
{
}

void sub_1000D8E54()
{
}

void sub_1000D8E80()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "SDAirDropFileZipper: copyUserFolder returned NULL",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_1000D8EAC()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "SDAirDropFileZipper: CFURLCreateWithFileSystemPathRelativeToBase returned NULL",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_1000D8ED8()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "SDAirDropFileZipper: CFURLCopyAbsoluteURL returned NULL",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_1000D8F04()
{
}

void sub_1000D8F30()
{
}

void sub_1000D8F5C()
{
}

void sub_1000D8FBC()
{
}

id sub_1000D90A4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _activate];
}

id sub_1000D93A0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 80) prefsChanged];
}

id sub_1000D945C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _stateDump];
}

id sub_1000D94BC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

id sub_1000D99D0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _connectionInvalidated:*(void *)(a1 + 40)];
}

void sub_1000DA9B8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v2 autoFillDismissUserNotification];
}

void sub_1000DAA08(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(dispatch_queue_s **)(*(void *)(*(void *)(a1 + 32) + 104LL) + 40LL);
  id v6 = a3;
  dispatch_assert_queue_V2(v5);
  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v7 autoFillPairingSucceeded:a2 completion:v6];
}

void sub_1000DAA7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v6 autoFillPromptForPIN:a2 throttleSeconds:a3];
}

void sub_1000DB930(uint64_t a1)
{
  uint64_t v1 = daemon_log(a1);
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT)) {
    sub_1000E5894(v2);
  }
}

void sub_1000DC310(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
  v85[0] = CNContactEmailAddressesKey;
  v85[1] = CNContactPhoneNumbersKey;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v85, 2LL));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) contactIdentifier]);
  if (v4)
  {
    uint64_t v5 = objc_claimAutoreleasedReturnValue([v2 contactWithContactIdentifier:v4]);
    if (v5)
    {
      id v6 = (id)v5;
      if (*(_BYTE *)(a1 + 48)
        && (id v7 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor")),
            unsigned int v8 = [v7 contactIsBlocked:v6],
            v7,
            v8))
      {
        uint64_t v9 = *(void *)(a1 + 40);
        uint64_t v10 = NSErrorWithOSStatusF(4294896150LL, "Contact is blocked");
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
        (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0LL, v11);
      }

      else
      {
        (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
      }

id sub_1000DCD30(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _getPeopleInfo:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

id sub_1000DCD40(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _getPeopleSuggestions:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_1000DD73C(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (v5)
  {
    if (dword_100642CD8 <= 90
      && (dword_100642CD8 != -1 || _LogCategory_Initialize(&dword_100642CD8, 90LL)))
    {
      LogPrintF( &dword_100642CD8,  "-[SDXPCConnection _getPeopleSuggestions:completion:]_block_invoke",  90LL,  "### CD-Interaction Fetch failed: %{error}\n",  v5);
    }

    id v6 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  else
  {
    if (dword_100642CD8 <= 30
      && (dword_100642CD8 != -1 || _LogCategory_Initialize(&dword_100642CD8, 30LL)))
    {
      LogPrintF( &dword_100642CD8,  "-[SDXPCConnection _getPeopleSuggestions:completion:]_block_invoke",  30,  "CD-Interaction suggestions got: %d results(s)\n",  [v7 count]);
    }

    id v6 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
  }

  v6();
}

void sub_1000E024C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(dispatch_queue_s **)(*(void *)(*(void *)(a1 + 32) + 104LL) + 40LL);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v5 deviceDiscoveryFoundDevice:v4];
}

void sub_1000E02B8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(dispatch_queue_s **)(*(void *)(*(void *)(a1 + 32) + 104LL) + 40LL);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v5 deviceDiscoveryLostDevice:v4];
}

void sub_1000E0324(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = *(dispatch_queue_s **)(*(void *)(*(void *)(a1 + 32) + 104LL) + 40LL);
  id v6 = a2;
  dispatch_assert_queue_V2(v5);
  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v7 deviceDiscoveryDeviceChanged:v6 changes:a3];
}

void sub_1000E0398(uint64_t a1, uint64_t a2)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v4 deviceDiscoveryScanStateChanged:a2];
}

void sub_1000E2724(uint64_t a1, void *a2)
{
  uint64_t v3 = *(dispatch_queue_s **)(*(void *)(*(void *)(a1 + 32) + 104LL) + 40LL);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v5 proximityClientDeviceEnteredImmediate:v4];
}

void sub_1000E2790(uint64_t a1, void *a2)
{
  uint64_t v3 = *(dispatch_queue_s **)(*(void *)(*(void *)(a1 + 32) + 104LL) + 40LL);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v5 proximityClientDeviceExitedImmediate:v4];
}

void sub_1000E27FC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(dispatch_queue_s **)(*(void *)(*(void *)(a1 + 32) + 104LL) + 40LL);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v5 proximityClientDeviceEnteredNearby:v4];
}

void sub_1000E2868(uint64_t a1, void *a2)
{
  uint64_t v3 = *(dispatch_queue_s **)(*(void *)(*(void *)(a1 + 32) + 104LL) + 40LL);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v5 proximityClientDeviceExitedNearby:v4];
}

void sub_1000E28D4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(dispatch_queue_s **)(*(void *)(*(void *)(a1 + 32) + 104LL) + 40LL);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v5 proximityClientDeviceWasDismissedHandler:v4 reason:0];
}

void sub_1000E2944(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = *(dispatch_queue_s **)(*(void *)(*(void *)(a1 + 32) + 104LL) + 40LL);
  id v6 = a2;
  dispatch_assert_queue_V2(v5);
  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v7 proximityClientDeviceWasDismissedHandler:v6 reason:a3];
}

void sub_1000E29B8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(dispatch_queue_s **)(*(void *)(*(void *)(a1 + 32) + 104LL) + 40LL);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v5 proximityClientDeviceWasSelectedHandler:v4];
}

void sub_1000E2A24(uint64_t a1, void *a2)
{
  uint64_t v3 = *(dispatch_queue_s **)(*(void *)(*(void *)(a1 + 32) + 104LL) + 40LL);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v5 proximityClientDeviceWillTriggerHandler:v4];
}

void sub_1000E2A90(uint64_t a1, void *a2)
{
  uint64_t v3 = *(dispatch_queue_s **)(*(void *)(*(void *)(a1 + 32) + 104LL) + 40LL);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v5 proximityClientDeviceDidUntriggerHandler:v4];
}

void sub_1000E2AFC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = *(dispatch_queue_s **)(*(void *)(*(void *)(a1 + 32) + 104LL) + 40LL);
  id v8 = a2;
  dispatch_assert_queue_V2(v7);
  id v9 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v9 proximityClientDeviceUpdated:v8 rssi:a3 state:a4];
}

void sub_1000E3A0C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(dispatch_queue_s **)(*(void *)(*(void *)(a1 + 32) + 104LL) + 40LL);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v5 remoteInteractionSessionRemoteTextEvent:v4];
}

void sub_1000E3A78(uint64_t a1, void *a2)
{
  uint64_t v3 = *(dispatch_queue_s **)(*(void *)(*(void *)(a1 + 32) + 104LL) + 40LL);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v5 remoteInteractionSessionTextSessionDidBegin:v4];
}

void sub_1000E3AE4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(dispatch_queue_s **)(*(void *)(*(void *)(a1 + 32) + 104LL) + 40LL);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v5 remoteInteractionSessionTextSessionDidEnd:v4];
}

void sub_1000E3B50(uint64_t a1, void *a2)
{
  uint64_t v3 = *(dispatch_queue_s **)(*(void *)(*(void *)(a1 + 32) + 104LL) + 40LL);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v5 remoteInteractionSessionTextSessionDidChange:v4];
}

void sub_1000E416C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(dispatch_queue_s **)(*(void *)(*(void *)(a1 + 32) + 104LL) + 40LL);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v5 serviceError:v4];
}

void sub_1000E41D8(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (dword_100642CD8 <= 10 && (dword_100642CD8 != -1 || _LogCategory_Initialize(&dword_100642CD8, 10LL))) {
    LogPrintF( &dword_100642CD8,  "-[SDXPCConnection serviceActivate:completion:]_block_invoke_2",  10LL,  "Received event: %@\n",  v4);
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(*(void *)(a1 + 32) + 104LL) + 40LL));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v3 serviceReceivedEvent:v4];
}

void sub_1000E4290(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(dispatch_queue_s **)(*(void *)(*(void *)(a1 + 32) + 104LL) + 40LL);
  id v6 = a3;
  id v7 = a2;
  dispatch_assert_queue_V2(v5);
  [*(id *)(a1 + 32) servicePeerDisconnected:v7 error:v6];
  id v8 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v8 servicePeerDisconnected:v7 error:v6];
}

void sub_1000E4320(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = *(dispatch_queue_s **)(*(void *)(*(void *)(a1 + 32) + 104LL) + 40LL);
  id v8 = a4;
  id v9 = a3;
  dispatch_assert_queue_V2(v7);
  id v10 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v10 serviceReceivedFrameType:a2 data:v9 peer:v8];
}

void sub_1000E43B0(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (dword_100642CD8 <= 10 && (dword_100642CD8 != -1 || _LogCategory_Initialize(&dword_100642CD8, 10LL))) {
    LogPrintF( &dword_100642CD8,  "-[SDXPCConnection serviceActivate:completion:]_block_invoke_5",  10LL,  "Received request: %@\n",  v4);
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(*(void *)(a1 + 32) + 104LL) + 40LL));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v3 serviceReceivedRequest:v4];
}

void sub_1000E4468(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (dword_100642CD8 <= 10 && (dword_100642CD8 != -1 || _LogCategory_Initialize(&dword_100642CD8, 10LL))) {
    LogPrintF( &dword_100642CD8,  "-[SDXPCConnection serviceActivate:completion:]_block_invoke_6",  10LL,  "Received response: %@\n",  v4);
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(*(void *)(a1 + 32) + 104LL) + 40LL));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v3 serviceReceivedResponse:v4];
}

id sub_1000E4520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _[*(id *)(a1 + 32) serviceSendFrameType:a2 data:a3 peer:a4];
}

void sub_1000E4FD8(uint64_t a1, uint64_t a2)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v4 sessionBluetoothStateChanged:a2];
}

void sub_1000E5030(uint64_t a1, void *a2)
{
  uint64_t v3 = *(dispatch_queue_s **)(*(void *)(*(void *)(a1 + 32) + 104LL) + 40LL);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v5 sessionError:v4];
}

void sub_1000E509C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(dispatch_queue_s **)(*(void *)(*(void *)(a1 + 32) + 104LL) + 40LL);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v5 sessionReceivedEvent:v4];
}

void sub_1000E5108(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(dispatch_queue_s **)(*(void *)(*(void *)(a1 + 32) + 104LL) + 40LL);
  id v6 = a3;
  dispatch_assert_queue_V2(v5);
  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v7 sessionReceivedFrameType:a2 data:v6];
}

void sub_1000E517C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(dispatch_queue_s **)(*(void *)(*(void *)(a1 + 32) + 104LL) + 40LL);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v5 sessionReceivedRequest:v4];
}

void sub_1000E51E8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(dispatch_queue_s **)(*(void *)(*(void *)(a1 + 32) + 104LL) + 40LL);
  id v4 = a2;
  dispatch_assert_queue_V2(v3);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) remoteObjectProxy]);
  [v5 sessionReceivedResponse:v4];
}

id sub_1000E5254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _[*(id *)(a1 + 32) sessionSendFrameType:a2 data:a3];
}

void sub_1000E5894(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_FAULT,  "Caller not properly entitled to receive AppleID info from sharingd: com.apple.sharing.appleidauthentication required",  v1,  2u);
}

void sub_1000E6124(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
  unsigned int v2 = [v1 enableContinuity];

  if (v2)
  {
    uint64_t v3 = objc_opt_new(&OBJC_CLASS___SDActivityEncryptionManager);
    id v4 = (void *)qword_100657038;
    qword_100657038 = (uint64_t)v3;
  }

void sub_1000E8150(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

  ;
}

void sub_1000E817C(void *a1, os_log_s *a2)
{
  v3[0] = 67109120;
  v3[1] = [a1 length];
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "Failed to initialize key from data. Incorrect size %d",  (uint8_t *)v3,  8u);
  sub_10001480C();
}

void sub_1000E8200(uint64_t *a1, os_log_s *a2)
{
  uint64_t v2 = *a1;
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "Generated new advertising encryption key %@, and saved to keychain",  (uint8_t *)&v3,  0xCu);
  sub_10001480C();
}

void sub_1000E8274( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000E82D8(void *a1, os_log_s *a2)
{
  uint64_t v4 = (objc_class *)objc_opt_class(a1, a2);
  id v5 = NSStringFromClass(v4);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a1 encryptionKey]);
  sub_1000241D4();
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "%@: Persisted last used counter and key to keychain %@",  v8,  0x16u);

  sub_1000241EC();
}

void sub_1000E8380(void *a1, os_log_s *a2)
{
  uint64_t v4 = (objc_class *)objc_opt_class(a1, a2);
  id v5 = NSStringFromClass(v4);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a1 encryptionKey]);
  sub_1000241D4();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%@: Encryption key invalid %@", v8, 0x16u);

  sub_1000241EC();
}

void sub_1000E8428()
{
}

void sub_1000E8488()
{
}

void sub_1000E84E8()
{
}

void sub_1000E8548()
{
}

void sub_1000E85A8( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000E860C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000E863C( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000E866C(char a1, uint64_t a2, os_log_s *a3)
{
  int v3 = @"NO";
  if ((a1 & 1) != 0) {
    uint64_t v4 = @"YES";
  }
  else {
    uint64_t v4 = @"NO";
  }
  if ((a2 & 1) != 0) {
    int v3 = @"YES";
  }
  *(_DWORD *)id v5 = 138412546;
  *(void *)&v5[4] = v4;
  *(_WORD *)&v5[12] = 2112;
  *(void *)&v5[14] = v3;
  sub_1000E8150( (void *)&_mh_execute_header,  a2,  a3,  "Successfully deleted encryption key:%@, decryption keys:%@",  *(void *)v5,  *(void *)&v5[8],  *(void *)&v5[16]);
  sub_10001480C();
}

void sub_1000E86FC( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000E8760( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000E87C4( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000E8828()
{
}

void sub_1000E8888()
{
}

void sub_1000E9088( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1000EB4A0( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

int *sub_1000EB4B4()
{
  return __error();
}

char *sub_1000EB4BC(int *a1)
{
  return strerror(*a1);
}

void sub_1000EB4C4()
{
}

void sub_1000EB4F0()
{
}

void sub_1000EB51C()
{
}

void sub_1000EB548()
{
}

void sub_1000EB574()
{
}

void sub_1000EB5A0()
{
}

void sub_1000EB5CC( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000EB634( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000147D0( (void *)&_mh_execute_header,  a2,  a3,  "Client cert chain not trusted. SFAppleIDVerifyCertificateChainSync failed with err=%d",  a5,  a6,  a7,  a8,  0);
  sub_1000147C8();
}

void sub_1000EB69C(void *a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([a1 streamError]);
  sub_10001C438();
  sub_1000EB4A0((void *)&_mh_execute_header, v2, v3, "Network stream received CFErrorRef error = %@", v4, v5, v6, v7, v8);

  sub_10004D1DC();
}

void sub_1000EB714()
{
  uint64_t v0 = sub_1000EB4B4();
  sub_1000EB4BC(v0);
  sub_10001C438();
  sub_1000EB4A0((void *)&_mh_execute_header, v1, v2, "setsockopt failed: %s", v3, v4, v5, v6, v7);
  sub_10004D1DC();
}

void sub_1000EB780( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000147D0((void *)&_mh_execute_header, a2, a3, "Stream returned invalid socket %d", a5, a6, a7, a8, 0);
  sub_1000147C8();
}

void sub_1000EB7E8()
{
}

void sub_1000EB814()
{
}

void sub_1000EB840()
{
}

void sub_1000EB86C()
{
}

void sub_1000EB898()
{
  _os_log_error_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_ERROR,  "Error writing to network output stream, writeCFIndex Length = %ld",  v1,  0xCu);
}

void sub_1000EB908()
{
}

void sub_1000EB934()
{
}

void sub_1000EB960()
{
}

void sub_1000EB98C()
{
}

void sub_1000EB9B8()
{
  os_log_t v0 = sub_1000EB4B4();
  sub_1000EB4BC(v0);
  sub_10001C438();
  sub_1000EB4A0((void *)&_mh_execute_header, v1, v2, "Read CFErrorRef error = %s", v3, v4, v5, v6, v7);
  sub_10004D1DC();
}

void sub_1000EBA24()
{
}

void sub_1000EBA50(uint64_t *a1, id *a2, os_log_s *a3)
{
  uint64_t v4 = *a1;
  unsigned int v5 = [*a2 length];
  v6[0] = 67109376;
  v6[1] = v4;
  __int16 v7 = 1024;
  unsigned int v8 = v5;
  _os_log_error_impl( (void *)&_mh_execute_header,  a3,  OS_LOG_TYPE_ERROR,  "Wrote too many bytes (byteIndex = %d, message length = %d)",  (uint8_t *)v6,  0xEu);
  sub_10004D1DC();
}

void sub_1000EBAE4()
{
  os_log_t v0 = sub_1000EB4B4();
  sub_1000EB4BC(v0);
  sub_10001C438();
  sub_1000EB4A0((void *)&_mh_execute_header, v1, v2, "Failed to write message = %s", v3, v4, v5, v6, v7);
  sub_10004D1DC();
}

void sub_1000EBB50()
{
}

void sub_1000EBB7C()
{
}

void sub_1000EBBA8()
{
}

uint64_t SDAutoUnlockLTKInfoReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 32) |= 1u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_38;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_40;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_40:
        *(_DWORD *)(a1 + 24) = v14;
        continue;
      case 2u:
        uint64_t Data = PBReaderReadData(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(Data);
        uint64_t v20 = 8LL;
        goto LABEL_29;
      case 3u:
        uint64_t v21 = PBReaderReadData(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(v21);
        uint64_t v20 = 16LL;
LABEL_29:
        unsigned int v22 = *(void **)(a1 + v20);
        *(void *)(a1 + v2sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = v19;

        continue;
      case 4u:
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0LL;
        *(_BYTE *)(a1 + 32) |= 2u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      unint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v26 == -1LL || v26 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v27 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 1;
      v25 |= (unint64_t)(v27 & 0x7F) << v23;
      if ((v27 & 0x80) == 0) {
        goto LABEL_42;
      }
      v23 += 7;
      BOOL v9 = v24++ >= 9;
      if (v9)
      {
        uint64_t v25 = 0LL;
        goto LABEL_44;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v25 = 0LL;
    }
LABEL_44:
    *(_BYTE *)(a1 + 2_Block_object_dispose((const void *)(v31 - 176), 8) = v25 != 0;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000EC7EC(id a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[AKDevice currentDevice](&OBJC_CLASS___AKDevice, "currentDevice"));
  uint64_t v1 = objc_claimAutoreleasedReturnValue([v3 serverFriendlyDescription]);
  uint64_t v2 = (void *)qword_100657048;
  qword_100657048 = v1;
}

void sub_1000EC834(id a1)
{
  uint64_t v1 = MGCopyAnswer(@"UniqueDeviceID", 0LL);
  uint64_t v2 = objc_claimAutoreleasedReturnValue(v1);
  id v3 = (void *)qword_100657058;
  qword_100657058 = v2;

  if (!qword_100657058
    && dword_1006432E8 <= 90
    && (dword_1006432E8 != -1 || _LogCategory_Initialize(&dword_1006432E8, 90LL)))
  {
    LogPrintF( &dword_1006432E8,  "NSString * _Nullable DeviceUDID(void)_block_invoke",  90LL,  "### AppleIDDeviceUDID failed with err %#m\n",  4294960534LL);
  }

uint64_t SDUnlockClassALongTermKeyResponseReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 32) |= 4u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_43;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_45;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_43:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_45:
        uint64_t v29 = 28LL;
        goto LABEL_54;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 32) |= 2u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1LL || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_49;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_49:
        uint64_t v29 = 24LL;
        goto LABEL_54;
      case 3u:
        uint64_t Data = PBReaderReadData(a2);
        uint64_t v23 = objc_claimAutoreleasedReturnValue(Data);
        unsigned int v24 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v23;

        continue;
      case 4u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 32) |= 1u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      unint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v27 == -1LL || v27 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v28 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 1;
      v14 |= (unint64_t)(v28 & 0x7F) << v25;
      if ((v28 & 0x80) == 0) {
        goto LABEL_51;
      }
      v25 += 7;
      BOOL v9 = v26++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_53;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_51:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v14) = 0;
    }
LABEL_53:
    uint64_t v29 = 8LL;
LABEL_54:
    *(_DWORD *)(a1 + v29) = v14;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1000ED47C()
{
  return pthread_mutex_unlock(&stru_1006433C8);
}

void sub_1000ED504()
{
  os_log_t v0 = (void *)qword_100657068;
  if (!qword_100657068)
  {
    uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v2 = (void *)qword_100657068;
    qword_100657068 = (uint64_t)v1;

    os_log_t v0 = (void *)qword_100657068;
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue([v0 objectForKeyedSubscript:@"counter"]);
  uint64_t v4 = (uint64_t)[v3 integerValue];

  uint64_t v5 = 2 * v4;
  if (2 * v4 >= 86400) {
    uint64_t v5 = 86400LL;
  }
  if (v4 <= 0) {
    uint64_t v6 = 16LL;
  }
  else {
    uint64_t v6 = v5;
  }
  unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v6));
  [(id)qword_100657068 setObject:v7 forKeyedSubscript:@"counter"];

  id v9 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  char v8 = (void *)objc_claimAutoreleasedReturnValue([v9 dateByAddingTimeInterval:(double)v6]);
  [(id)qword_100657068 setObject:v8 forKeyedSubscript:@"startDate"];
  if (dword_100643358 <= 50 && (dword_100643358 != -1 || _LogCategory_Initialize(&dword_100643358, 50LL))) {
    LogPrintF( &dword_100643358,  "void SDAppleIDThrottleUpdate(void)",  50LL,  "Updated throttle: %ld -> %ld seconds\n",  v4,  v6);
  }
  pthread_mutex_unlock(&stru_1006433C8);
}

id sub_1000ED678()
{
  id v0 = (id)objc_claimAutoreleasedReturnValue([(id)qword_100657068 objectForKeyedSubscript:@"startDate"]);
  pthread_mutex_unlock(&stru_1006433C8);
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t v2 = v1;
  if (!v0) {
    id v0 = v1;
  }
  if (dword_100643358 <= 30 && (dword_100643358 != -1 || _LogCategory_Initialize(&dword_100643358, 30LL)))
  {
    [v0 timeIntervalSinceDate:v2];
    LogPrintF( &dword_100643358,  "NSDate * _Nonnull SDAppleIDThrottleCopyNextDate(void)",  30LL,  "Next date: %@ in %f seconds\n",  v0,  v3);
  }

  return v0;
}

void sub_1000ED758()
{
  if (!qword_100657068)
  {
    id v0 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v1 = (void *)qword_100657068;
    qword_100657068 = (uint64_t)v0;
  }

  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 86400LL));
  [(id)qword_100657068 setObject:v2 forKeyedSubscript:@"counter"];

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v4 = (id)objc_claimAutoreleasedReturnValue([v3 dateByAddingTimeInterval:86400.0]);
  objc_msgSend((id)qword_100657068, "setObject:forKeyedSubscript:");
  if (dword_100643358 <= 50 && (dword_100643358 != -1 || _LogCategory_Initialize(&dword_100643358, 50LL))) {
    LogPrintF( &dword_100643358,  "void SDAppleIDThrottleForceMax(void)",  50LL,  "Updated throttle to max: %ld seconds\n",  86400LL);
  }
  pthread_mutex_unlock(&stru_1006433C8);
}

id sub_1000ED890()
{
  id v0 = (id)qword_100657070;
  pthread_mutex_unlock(&stru_1006433C8);
  return v0;
}

uint64_t sub_1000ED8D4()
{
  uint64_t v0 = objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t v1 = (void *)qword_100657070;
  qword_100657070 = v0;

  return pthread_mutex_unlock(&stru_1006433C8);
}

__SecKey *sub_1000ED920(void *a1, uint64_t a2)
{
  v20[0] = kSecAttrKeyType;
  v20[1] = kSecAttrKeySizeInBits;
  v21[0] = a1;
  id v3 = a1;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a2));
  v21[1] = v4;
  uint64_t v5 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v21,  v20,  2LL));

  RandomKey = SecKeyCreateRandomKey(v5, 0LL);
  SecKeyRef v7 = SecKeyCopyPublicKey(RandomKey);
  uint64_t SelfSignedCertificate = SecGenerateSelfSignedCertificate(&__NSArray0__struct, &__NSDictionary0__struct, v7, RandomKey);
  id v9 = (const void *)SelfSignedCertificate;
  if (v7) {
    CFRelease(v7);
  }
  if (v9)
  {
    int v10 = (__SecIdentity *)SecIdentityCreate(kCFAllocatorDefault, v9, RandomKey);
    CFRelease(v9);
    if (RandomKey) {
      CFRelease(RandomKey);
    }
    if (v10)
    {
      RandomKey = sec_identity_create(v10);
      CFRelease(v10);
      if (!RandomKey)
      {
        uint64_t v13 = airdrop_log(v12);
        uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          sub_1000EDC5C();
        }
      }

      goto LABEL_19;
    }

    uint64_t v17 = airdrop_log(v11);
    char v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
      sub_1000EDC30();
    }

LABEL_18:
    RandomKey = 0LL;
    goto LABEL_19;
  }

  uint64_t v15 = airdrop_log(SelfSignedCertificate);
  char v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
    sub_1000EDC04();
  }

  if (RandomKey)
  {
    CFRelease(RandomKey);
    goto LABEL_18;
  }

__SecIdentity *sub_1000EDB14(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (!v1) {
    goto LABEL_16;
  }
  id v3 = sec_identity_copy_ref(v1);
  id v4 = v3;
  if (!v3) {
    goto LABEL_17;
  }
  SecKeyRef privateKeyRef = 0LL;
  OSStatus v5 = SecIdentityCopyPrivateKey(v3, &privateKeyRef);
  CFRelease(v4);
  if (v5)
  {
    SecKeyRef v6 = privateKeyRef;
    if (privateKeyRef)
    {
      CFRelease(privateKeyRef);
      SecKeyRef privateKeyRef = 0LL;
    }

    uint64_t v7 = airdrop_log(v6);
    char v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1000EDC88();
    }
  }

  if (!privateKeyRef) {
    goto LABEL_16;
  }
  SecKeyRef v9 = SecKeyCopyPublicKey(privateKeyRef);
  if (privateKeyRef)
  {
    CFRelease(privateKeyRef);
    SecKeyRef privateKeyRef = 0LL;
  }

  if (!v9)
  {
LABEL_16:
    id v4 = 0LL;
    goto LABEL_17;
  }

  id v4 = (__SecIdentity *)SecKeyCopySubjectPublicKeyInfo(v9);
  CFRelease(v9);
  if (v4) {
    int v10 = v4;
  }

LABEL_17:
  return v4;
}

void sub_1000EDC04()
{
}

void sub_1000EDC30()
{
}

void sub_1000EDC5C()
{
}

void sub_1000EDC88()
{
}

void sub_1000EDCB4(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ((objc_opt_respondsToSelector(v3, "regenerateTemporarySelfIdentityWithCompletion:") & 1) != 0)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    _DWORD v5[2] = sub_1000EDD4C;
    v5[3] = &unk_1005CE190;
    id v6 = v4;
    [v3 regenerateTemporarySelfIdentityWithCompletion:v5];
  }
}

uint64_t sub_1000EDD4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

NSData *sub_1000EDD5C(void *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSData);
  if ((objc_opt_respondsToSelector(v1, "pkData") & 1) != 0)
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue([v1 pkData]);

    uint64_t v2 = (NSData *)v3;
  }

  return v2;
}

id sub_1000EDDC8(void *a1)
{
  id v1 = a1;
  if ((objc_opt_respondsToSelector(v1, "deviceName") & 1) != 0) {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 deviceName]);
  }
  else {
    uint64_t v2 = 0LL;
  }

  return v2;
}

id sub_1000EDE18(void *a1)
{
  id v1 = a1;
  if ((objc_opt_respondsToSelector(v1, "deviceModel") & 1) != 0) {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 deviceModel]);
  }
  else {
    uint64_t v2 = 0LL;
  }

  return v2;
}

id sub_1000EDE68(void *a1)
{
  id v1 = a1;
  if ((objc_opt_respondsToSelector(v1, "accountID") & 1) != 0) {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 accountID]);
  }
  else {
    uint64_t v2 = 0LL;
  }

  return v2;
}

id sub_1000EDEB8(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  if ((objc_opt_respondsToSelector(v1, "bonjourListenerUUID") & 1) != 0)
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue([v1 bonjourListenerUUID]);

    uint64_t v2 = (void *)v3;
  }

  return v2;
}

uint64_t sub_1000EDF28(uint64_t a1, uint64_t a2)
{
  return nw_array_append(a2, a1);
}

uint64_t sub_1000EDF38(uint64_t a1)
{
  return objc_opt_respondsToSelector(a1, "isKnownIdentity") & 1;
}

id sub_1000EDF58(void *a1)
{
  id v1 = a1;
  if ((objc_opt_respondsToSelector(v1, "isKnownIdentity") & 1) != 0) {
    id v2 = [v1 isKnownIdentity];
  }
  else {
    id v2 = 0LL;
  }

  return v2;
}

uint64_t sub_1000EDFA4(uint64_t a1)
{
  return objc_opt_respondsToSelector(a1, "isUnsupportedApplicationLabel") & 1;
}

id sub_1000EDFC4(void *a1)
{
  id v1 = a1;
  if ((objc_opt_respondsToSelector(v1, "isUnsupportedApplicationLabel") & 1) != 0) {
    id v2 = [v1 isUnsupportedApplicationLabel];
  }
  else {
    id v2 = 0LL;
  }

  return v2;
}

void sub_1000EE050(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___SDNotificationManager);
  id v2 = (void *)qword_100657080;
  qword_100657080 = (uint64_t)v1;
}

id sub_1000EE534(uint64_t a1)
{
  return [*(id *)(a1 + 32) _activate];
}

id sub_1000EE628(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

void sub_1000EE87C(uint64_t a1, void *a2)
{
  if ((unint64_t)[a2 authorizationStatus] > 1)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    if (v6) {
      (*(void (**)(void))(v6 + 16))();
    }
  }

  else
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(a1 + 40);
    uint64_t v5 = *(dispatch_queue_s **)(v3 + 112);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_1000EE924;
    v7[3] = &unk_1005CB830;
    void v7[4] = v3;
    id v8 = v4;
    dispatch_async(v5, v7);
  }

void sub_1000EE924(uint64_t a1)
{
  if (dword_100643408 <= 30 && (dword_100643408 != -1 || _LogCategory_Initialize(&dword_100643408, 30LL))) {
    LogPrintF( &dword_100643408,  "-[SDNotificationManager _riServerEnsureStarted:completion:]_block_invoke_2",  30LL,  "Requesting TV authorization\n");
  }
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = *(void **)(v2 + 72);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1000EE9F0;
  v5[3] = &unk_1005CE1D8;
  void v5[4] = v2;
  id v6 = v3;
  [v4 requestAuthorizationWithOptions:70 completionHandler:v5];
}

void sub_1000EE9F0(uint64_t a1, int a2, void *a3)
{
  uint64_t v5 = a3;
  int v10 = v5;
  if (dword_100643408 <= 30)
  {
    if (dword_100643408 != -1 || (v8 = _LogCategory_Initialize(&dword_100643408, 30LL), uint64_t v5 = v10, v8))
    {
      id v6 = "no";
      if (a2) {
        id v6 = "yes";
      }
      uint64_t v7 = &stru_1005E3958;
      if (v5) {
        uint64_t v7 = v5;
      }
      LogPrintF( &dword_100643408,  "-[SDNotificationManager _riServerEnsureStarted:completion:]_block_invoke_3",  30LL,  "TV Notification granted: %s %@",  v6,  v7);
      uint64_t v5 = v10;
    }
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 80LL) = a2;
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9)
  {
    (*(void (**)(uint64_t, __CFString *))(v9 + 16))(v9, v5);
    uint64_t v5 = v10;
  }
}

void sub_1000EEC3C(uint64_t a1, void *a2)
{
  if ((unint64_t)[a2 authorizationStatus] > 1)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    if (v6) {
      (*(void (**)(void))(v6 + 16))();
    }
  }

  else
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(a1 + 40);
    uint64_t v5 = *(dispatch_queue_s **)(v3 + 112);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_1000EECE4;
    v7[3] = &unk_1005CB830;
    void v7[4] = v3;
    id v8 = v4;
    dispatch_async(v5, v7);
  }

void sub_1000EECE4(uint64_t a1)
{
  if (dword_100643408 <= 30 && (dword_100643408 != -1 || _LogCategory_Initialize(&dword_100643408, 30LL))) {
    LogPrintF( &dword_100643408,  "-[SDNotificationManager _watchEnsureStarted:completion:]_block_invoke_2",  30LL,  "Requesting Watch authorization\n");
  }
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = *(void **)(v2 + 96);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1000EEDB0;
  v5[3] = &unk_1005CE1D8;
  void v5[4] = v2;
  id v6 = v3;
  [v4 requestAuthorizationWithOptions:6 completionHandler:v5];
}

void sub_1000EEDB0(uint64_t a1, int a2, void *a3)
{
  uint64_t v5 = a3;
  int v10 = v5;
  if (dword_100643408 <= 30)
  {
    if (dword_100643408 != -1 || (v8 = _LogCategory_Initialize(&dword_100643408, 30LL), uint64_t v5 = v10, v8))
    {
      id v6 = "no";
      if (a2) {
        id v6 = "yes";
      }
      uint64_t v7 = &stru_1005E3958;
      if (v5) {
        uint64_t v7 = v5;
      }
      LogPrintF( &dword_100643408,  "-[SDNotificationManager _watchEnsureStarted:completion:]_block_invoke_3",  30LL,  "Watch Notification granted: %s %@",  v6,  v7);
      uint64_t v5 = v10;
    }
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 104LL) = a2;
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9)
  {
    (*(void (**)(uint64_t, __CFString *))(v9 + 16))(v9, v5);
    uint64_t v5 = v10;
  }
}

void sub_1000EF13C(uint64_t a1, void *a2)
{
  if ((unint64_t)[a2 authorizationStatus] > 1)
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }

  else
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(a1 + 40);
    uint64_t v5 = *(dispatch_queue_s **)(v3 + 112);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    _DWORD v6[2] = sub_1000EF1D8;
    v6[3] = &unk_1005CB480;
    void v6[4] = v3;
    id v7 = v4;
    dispatch_async(v5, v6);
  }

void sub_1000EF1D8(uint64_t a1)
{
  if (dword_100643408 <= 30 && (dword_100643408 != -1 || _LogCategory_Initialize(&dword_100643408, 30LL))) {
    LogPrintF( &dword_100643408,  "-[SDNotificationManager _homePodEnsureStarted:completion:]_block_invoke_2",  30LL,  "Requesting HomePod authorization\n");
  }
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = *(void **)(v2 + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1000EF2A4;
  v5[3] = &unk_1005CE228;
  void v5[4] = v2;
  id v6 = v3;
  [v4 requestAuthorizationWithOptions:6 completionHandler:v5];
}

void sub_1000EF2A4(uint64_t a1, int a2, void *a3)
{
  id v7 = a3;
  if (dword_100643408 <= 30 && (dword_100643408 != -1 || _LogCategory_Initialize(&dword_100643408, 30LL)))
  {
    uint64_t v5 = "no";
    if (a2) {
      uint64_t v5 = "yes";
    }
    id v6 = &stru_1005E3958;
    if (v7) {
      id v6 = v7;
    }
    LogPrintF( &dword_100643408,  "-[SDNotificationManager _homePodEnsureStarted:completion:]_block_invoke_3",  30LL,  "HomePod Notification granted: %s %@",  v5,  v6);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 40LL) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1000EF368(uint64_t a1, void *a2)
{
  if ((unint64_t)[a2 authorizationStatus] > 1)
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  }

  else
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(a1 + 40);
    uint64_t v5 = *(dispatch_queue_s **)(v3 + 112);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    _DWORD v6[2] = sub_1000EF404;
    v6[3] = &unk_1005CB480;
    void v6[4] = v3;
    id v7 = v4;
    dispatch_async(v5, v6);
  }

void sub_1000EF404(uint64_t a1)
{
  if (dword_100643408 <= 30 && (dword_100643408 != -1 || _LogCategory_Initialize(&dword_100643408, 30LL))) {
    LogPrintF( &dword_100643408,  "-[SDNotificationManager _homePodEnsureStarted:completion:]_block_invoke_5",  30LL,  "Requesting HomePod mini authorization\n");
  }
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = *(void **)(v2 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1000EF4D0;
  v5[3] = &unk_1005CE228;
  void v5[4] = v2;
  id v6 = v3;
  [v4 requestAuthorizationWithOptions:6 completionHandler:v5];
}

void sub_1000EF4D0(uint64_t a1, int a2, void *a3)
{
  id v7 = a3;
  if (dword_100643408 <= 30 && (dword_100643408 != -1 || _LogCategory_Initialize(&dword_100643408, 30LL)))
  {
    uint64_t v5 = "no";
    if (a2) {
      uint64_t v5 = "yes";
    }
    id v6 = &stru_1005E3958;
    if (v7) {
      id v6 = v7;
    }
    LogPrintF( &dword_100643408,  "-[SDNotificationManager _homePodEnsureStarted:completion:]_block_invoke_6",  30LL,  "HomePod mini Notification granted: %s %@",  v5,  v6);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 40LL) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_1000EF594(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000EFA8C(uint64_t a1, void *a2)
{
  id v16 = a2;
  if (v16)
  {
    if (dword_100643408 <= 60
      && (dword_100643408 != -1 || _LogCategory_Initialize(&dword_100643408, 60LL)))
    {
      LogPrintF( &dword_100643408,  "-[SDNotificationManager _addRequestWithID:content:type:isHomePodMini:]_block_invoke",  60LL,  "### Error adding request %@: %@\n",  *(void *)(a1 + 32),  v16);
    }

    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v16 domain]);
    id v4 = off_100643488();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    id v6 = v3;
    id v7 = v5;
    int v8 = v7;
    if (v6 == v7)
    {
    }

    else
    {
      if ((v6 == 0LL) == (v7 != 0LL))
      {

LABEL_17:
        goto LABEL_18;
      }

      unsigned int v9 = [v6 isEqual:v7];

      if (!v9) {
        goto LABEL_17;
      }
    }

    id v10 = [v16 code];

    if (v10 == (id)100)
    {
      id v11 = [*(id *)(a1 + 40) mutableCopy];
      [v11 setAttachments:&__NSArray0__struct];
      uint64_t v12 = *(void *)(a1 + 48);
      uint64_t v13 = *(void **)(a1 + 56);
      uint64_t v14 = *(dispatch_queue_s **)(v12 + 112);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1000EFCB4;
      block[3] = &unk_1005CE2A0;
      void block[4] = v12;
      id v18 = v13;
      id v19 = v11;
      int v20 = *(_DWORD *)(a1 + 64);
      char v21 = *(_BYTE *)(a1 + 68);
      id v15 = v11;
      dispatch_sync(v14, block);
    }
  }

  else if (dword_100643408 <= 30 {
         && (dword_100643408 != -1 || _LogCategory_Initialize(&dword_100643408, 30LL)))
  }
  {
    LogPrintF( &dword_100643408,  "-[SDNotificationManager _addRequestWithID:content:type:isHomePodMini:]_block_invoke",  30LL,  "Added request: %@\n",  *(void *)(a1 + 32));
  }

id sub_1000EFCB4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _addRequestWithID:*(void *)(a1 + 40) content:*(void *)(a1 + 48) type:*(unsigned int *)(a1 + 56) isHomePodMini:*(unsigned __int8 *)(a1 + 60)];
}

void sub_1000F0378(_Unwind_Exception *a1)
{
}

uint64_t sub_1000F03A8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id sub_1000F0698(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _riServerPostIfNeeded:*(void *)(a1 + 40) backgroundAction:*(unsigned __int8 *)(a1 + 48)];
}

id sub_1000F0780(uint64_t a1)
{
  if (dword_100643408 <= 30 && (dword_100643408 != -1 || _LogCategory_Initialize(&dword_100643408, 30LL)))
  {
    if (*(_BYTE *)(a1 + 56)) {
      uint64_t v2 = "yes";
    }
    else {
      uint64_t v2 = "no";
    }
    LogPrintF( &dword_100643408,  "-[SDNotificationManager _riServerPostIfNeeded:backgroundAction:]_block_invoke",  30LL,  "TV KBPost %@ backgroundAction: %s\n",  *(void *)(a1 + 32),  v2);
  }

  return [*(id *)(a1 + 40) _addRequestWithID:*(void *)(a1 + 32) content:*(void *)(a1 + 48) type:5];
}

id sub_1000F08A0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _riServerRemove:*(void *)(a1 + 40)];
}

id sub_1000F0A48(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _riServerRemoveAll];
}

id sub_1000F0B78(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _riServerUpdate:*(void *)(a1 + 40) info:*(void *)(a1 + 48)];
}

void sub_1000F0E1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    if (dword_100643408 <= 60)
    {
      id v9 = v3;
      if (dword_100643408 != -1 || (v7 = _LogCategory_Initialize(&dword_100643408, 60LL), id v4 = v9, v7))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 localizedDescription]);
        LogPrintF( &dword_100643408,  "-[SDNotificationManager _riServerUpdate:info:]_block_invoke",  60LL,  "### Error updating %@: %@\n",  v5,  v6);

LABEL_8:
        id v4 = v9;
      }
    }
  }

  else if (dword_100643408 <= 30)
  {
    id v9 = 0LL;
    if (dword_100643408 != -1 || (v8 = _LogCategory_Initialize(&dword_100643408, 30LL), id v4 = 0LL, v8))
    {
      LogPrintF( &dword_100643408,  "-[SDNotificationManager _riServerUpdate:info:]_block_invoke",  30LL,  "Update %@ success\n",  *(void *)(a1 + 32));
      goto LABEL_8;
    }
  }
}

id sub_1000F0FC8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _riServerUpdate:*(void *)(a1 + 40) rtiData:*(void *)(a1 + 48)];
}

void sub_1000F141C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    if (dword_100643408 <= 60)
    {
      id v9 = v3;
      if (dword_100643408 != -1 || (v7 = _LogCategory_Initialize(&dword_100643408, 60LL), id v4 = v9, v7))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 localizedDescription]);
        LogPrintF( &dword_100643408,  "-[SDNotificationManager _riServerUpdate:rtiData:]_block_invoke",  60LL,  "### Error updating %@: %@\n",  v5,  v6);

LABEL_8:
        id v4 = v9;
      }
    }
  }

  else if (dword_100643408 <= 30)
  {
    id v9 = 0LL;
    if (dword_100643408 != -1 || (v8 = _LogCategory_Initialize(&dword_100643408, 30LL), id v4 = 0LL, v8))
    {
      LogPrintF( &dword_100643408,  "-[SDNotificationManager _riServerUpdate:rtiData:]_block_invoke",  30LL,  "Update %@ success\n",  *(void *)(a1 + 32));
      goto LABEL_8;
    }
  }
}

id sub_1000F15F4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _tvAutoFillPostIfNeeded:*(void *)(a1 + 40)];
}

void sub_1000F16A0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 UUIDString]);

  id v4 = objc_alloc_init(off_1006434B8());
  uint64_t v6 = SFLocalizedStringForKey(@"PROX_AUTOFILL_MESSAGE", v5);
  int v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  [v4 setBody:v7];

  [v4 setCategoryIdentifier:@"continuityRemoteCategory"];
  [v4 setShouldHideTime:1];
  [v4 setShouldHideDate:1];
  [v4 setShouldSuppressDefaultAction:1];
  [v4 setShouldIgnoreDoNotDisturb:1];
  id v8 = -[objc_class soundWithAlertType:](off_1006434C0(), "soundWithAlertType:", 23LL);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  [v4 setSound:v9];

  uint64_t v11 = SFLocalizedStringForKey(@"PROX_AUTOFILL_SUBTITLE", v10);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  [v4 setSubtitle:v12];

  v15[0] = @"af";
  v15[1] = @"deviceIdentifier";
  uint64_t v13 = *(void *)(a1 + 32);
  v16[0] = &__kCFBooleanTrue;
  v16[1] = v13;
  v15[2] = @"sessionID";
  void v16[2] = v3;
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v16,  v15,  3LL));
  [v4 setUserInfo:v14];

  if (dword_100643408 <= 30 && (dword_100643408 != -1 || _LogCategory_Initialize(&dword_100643408, 30LL))) {
    LogPrintF( &dword_100643408,  "-[SDNotificationManager _tvAutoFillPostIfNeeded:]_block_invoke",  30LL,  "AFPost %@\n",  *(void *)(a1 + 32));
  }
  [*(id *)(a1 + 40) _addRequestWithID:*(void *)(a1 + 32) content:v4 type:4];
}

id sub_1000F1934(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _tvAutoFillRemove:*(void *)(a1 + 40)];
}

id sub_1000F1ADC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _tvAutoFillRemoveAll];
}

id sub_1000F1E64(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _watchKeyboardPostIfNeeded:*(void *)(a1 + 40)];
}

id sub_1000F1F34(uint64_t a1)
{
  if (dword_100643408 <= 30 && (dword_100643408 != -1 || _LogCategory_Initialize(&dword_100643408, 30LL))) {
    LogPrintF( &dword_100643408,  "-[SDNotificationManager _watchKeyboardPostIfNeeded:]_block_invoke",  30LL,  "Watch KBPost %@\n",  *(void *)(a1 + 32));
  }
  return [*(id *)(a1 + 40) _addRequestWithID:*(void *)(a1 + 32) content:*(void *)(a1 + 48) type:6];
}

id sub_1000F2038(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _watchKeyboardRemove:*(void *)(a1 + 40)];
}

id sub_1000F21E0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _watchKeyboardRemoveAll];
}

id sub_1000F2310(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _riServerUpdate:*(void *)(a1 + 40) info:*(void *)(a1 + 48)];
}

void sub_1000F25B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    if (dword_100643408 <= 60)
    {
      id v9 = v3;
      if (dword_100643408 != -1 || (v7 = _LogCategory_Initialize(&dword_100643408, 60LL), id v4 = v9, v7))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 localizedDescription]);
        LogPrintF( &dword_100643408,  "-[SDNotificationManager _watchKeyboardUpdate:info:]_block_invoke",  60LL,  "### Error updating %@: %@\n",  v5,  v6);

LABEL_8:
        id v4 = v9;
      }
    }
  }

  else if (dword_100643408 <= 30)
  {
    id v9 = 0LL;
    if (dword_100643408 != -1 || (v8 = _LogCategory_Initialize(&dword_100643408, 30LL), id v4 = 0LL, v8))
    {
      LogPrintF( &dword_100643408,  "-[SDNotificationManager _watchKeyboardUpdate:info:]_block_invoke",  30LL,  "Update %@ success\n",  *(void *)(a1 + 32));
      goto LABEL_8;
    }
  }
}

id sub_1000F2760(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _watchKeyboardUpdate:*(void *)(a1 + 40) rtiData:*(void *)(a1 + 48)];
}

void sub_1000F2BB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    if (dword_100643408 <= 60)
    {
      id v9 = v3;
      if (dword_100643408 != -1 || (v7 = _LogCategory_Initialize(&dword_100643408, 60LL), id v4 = v9, v7))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 localizedDescription]);
        LogPrintF( &dword_100643408,  "-[SDNotificationManager _watchKeyboardUpdate:rtiData:]_block_invoke",  60LL,  "### Error updating %@: %@\n",  v5,  v6);

LABEL_8:
        id v4 = v9;
      }
    }
  }

  else if (dword_100643408 <= 30)
  {
    id v9 = 0LL;
    if (dword_100643408 != -1 || (v8 = _LogCategory_Initialize(&dword_100643408, 30LL), id v4 = 0LL, v8))
    {
      LogPrintF( &dword_100643408,  "-[SDNotificationManager _watchKeyboardUpdate:rtiData:]_block_invoke",  30LL,  "Update %@ success\n",  *(void *)(a1 + 32));
      goto LABEL_8;
    }
  }
}

id sub_1000F3214(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _homePodHandoffPostIfNeeded:*(void *)(a1 + 40) info:*(void *)(a1 + 48)];
}

id sub_1000F32F4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) homePodType];
  if (dword_100643408 <= 30 && (dword_100643408 != -1 || _LogCategory_Initialize(&dword_100643408, 30LL))) {
    LogPrintF( &dword_100643408,  "-[SDNotificationManager _homePodHandoffPostIfNeeded:info:]_block_invoke",  30LL,  "HHPost %@\n",  *(void *)(a1 + 40));
  }
  return _objc_msgSend( *(id *)(a1 + 48),  "_addRequestWithID:content:type:isHomePodMini:",  *(void *)(a1 + 40),  *(void *)(a1 + 56),  objc_msgSend(*(id *)(a1 + 32), "notificationType"),  v2 == (id)2);
}

id sub_1000F3440(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _homePodHandoffRemove:*(void *)(a1 + 40) reason:*(void *)(a1 + 48)];
}

id sub_1000F36A8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _homePodHandoffRemoveAll];
}

id sub_1000F37F4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _homePodHandoffUpdateIfNeeded:*(void *)(a1 + 40) info:*(void *)(a1 + 48)];
}

void sub_1000F3A38(uint64_t a1, void *a2)
{
  id v13 = a2;
  if (v13)
  {
    if (dword_100643408 <= 60
      && (dword_100643408 != -1 || _LogCategory_Initialize(&dword_100643408, 60LL)))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      id v4 = (void *)objc_claimAutoreleasedReturnValue([v13 localizedDescription]);
      LogPrintF( &dword_100643408,  "-[SDNotificationManager _homePodHandoffUpdateIfNeeded:info:]_block_invoke",  60LL,  "### Error updating %@: %@\n",  v3,  v4);
    }

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v13 domain]);
    id v6 = off_100643488();
    int v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    id v8 = v5;
    id v9 = v7;
    uint64_t v10 = v9;
    if (v8 == v9)
    {
    }

    else
    {
      if ((v8 == 0LL) == (v9 != 0LL))
      {

LABEL_17:
        goto LABEL_18;
      }

      unsigned int v11 = [v8 isEqual:v9];

      if (!v11) {
        goto LABEL_17;
      }
    }

    id v12 = [v13 code];

    if (v12 == (id)100)
    {
      id v8 = [*(id *)(a1 + 40) copy];
      [v8 setAttachmentURL:0];
      [*(id *)(a1 + 48) homePodHandoffUpdateIfNeeded:*(void *)(a1 + 32) info:v8];
LABEL_18:
    }
  }

  else if (dword_100643408 <= 30 {
         && (dword_100643408 != -1 || _LogCategory_Initialize(&dword_100643408, 30LL)))
  }
  {
    LogPrintF( &dword_100643408,  "-[SDNotificationManager _homePodHandoffUpdateIfNeeded:info:]_block_invoke",  30LL,  "Update %@ success\n",  *(void *)(a1 + 32));
  }
}

LABEL_36:
        char v28 = off_1006434D0();
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
        id v30 = v21;
        uint64_t v31 = v29;
        uint64_t v32 = v31;
        if (v30 == v31)
        {
          uint64_t v33 = 1;
        }

        else if (v31)
        {
          uint64_t v33 = [v30 isEqual:v31];
        }

        else
        {
          uint64_t v33 = 0;
        }

        if ((v25 & 1) != 0) {
          goto LABEL_42;
        }
        if (!v33)
        {
          if (dword_100643408 <= 60
            && (dword_100643408 != -1 || _LogCategory_Initialize(&dword_100643408, 60LL)))
          {
            LogPrintF( &dword_100643408,  "-[SDNotificationManager _homePodHandleResponse:completion:]",  60LL,  "Unrecognized action: %@\n",  v30);
          }

          goto LABEL_49;
        }

        goto LABEL_44;
      }

      unsigned int v24 = [v21 isEqual:v22];
    }

    if ((v18 & 1) != 0)
    {
      if ((v24 & 1) != 0) {
        goto LABEL_42;
      }
      goto LABEL_26;
    }

    goto LABEL_30;
  }

  if (dword_100643408 <= 90 && (dword_100643408 != -1 || _LogCategory_Initialize(&dword_100643408, 90LL))) {
    LogPrintF( &dword_100643408,  "-[SDNotificationManager _homePodHandleResponse:completion:]",  90LL,  "### No identifier for notification response? %@",  v6);
  }
LABEL_50:

  ((void (*)(void *))v8[2])(v8);
}

  if (v12)
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v4 scanStateChangedHandler]);

    if (v14)
    {
      id v15 = (void (**)(void, void))objc_claimAutoreleasedReturnValue([v4 scanStateChangedHandler]);
      ((void (**)(void, id))v15)[2](v15, v12);
    }
  }

        id v9 = v56;
        NSAppendPrintF(a3, "\n");
        uint64_t v10 = v61 + 1;
      }

      while ((id)(v61 + 1) != v57);
      char v57 = [v56 countByEnumeratingWithState:&v70 objects:v76 count:16];
    }

    while (v57);
  }

  else
  {

    NSAppendPrintF(a3, "No devices registered\n");
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

      id v19 = 0LL;
LABEL_37:
      char v21 = 1;
      goto LABEL_40;
    }

    if (v15)
    {
      if (v15 != 1)
      {
        unsigned int v22 = BYTE1(result) - 48;
        if ((BYTE1(result) - 48) <= 9u)
        {
          id v19 = 0LL;
          uint64_t v23 = v22 == 0LL;
          unsigned int v24 = -(uint64_t)v22;
          if (!v23) {
            goto LABEL_37;
          }
          if (v15 == 2)
          {
            char v21 = 0;
            id v19 = v24;
            goto LABEL_40;
          }

          uint64_t v31 = BYTE2(result) - 48;
          if ((BYTE2(result) - 48) <= 9u && is_mul_ok(v24, 0xAuLL))
          {
            uint64_t v32 = 10 * v24;
            id v19 = v32 - v31;
            if (v32 >= v31)
            {
              uint64_t v33 = v15 - 3;
              if (v33)
              {
                unint64_t v34 = (unsigned __int8 *)v38 + 3;
                while (1)
                {
                  char v35 = *v34 - 48;
                  if (v35 > 9) {
                    goto LABEL_36;
                  }
                  if (!is_mul_ok(v19, 0xAuLL)) {
                    goto LABEL_36;
                  }
                  uint64_t v23 = 10 * v19 >= v35;
                  id v19 = 10 * v19 - v35;
                  if (!v23) {
                    goto LABEL_36;
                  }
                  char v21 = 0;
                  ++v34;
                  if (!--v33) {
                    goto LABEL_40;
                  }
                }
              }

            uint64_t v48 = v50;
LABEL_33:
            char v35 = (v49 - 1) & v49;
            uint64_t v42 = __clz(__rbit64(v49)) + (v48 << 6);
            id v4 = v48;
            goto LABEL_29;
          }
        }
      }
    }

  swift_release(v8);
  uint64_t v3 = v41;
  if ((v44 & 1) != 0)
  {
    id v39 = 1LL << *(_BYTE *)(v8 + 32);
    if (v39 >= 64) {
      bzero(v43, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
    }
    else {
      *uint64_t v43 = -1LL << v39;
    }
    *(void *)(v8 + 16) = 0LL;
  }

  swift_release(v11);
  id v6 = v44;
  if ((v47 & 1) != 0)
  {
    uint64_t v42 = 1LL << *(_BYTE *)(v11 + 32);
    if (v42 >= 64) {
      bzero(v46, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
    }
    else {
      void *v46 = -1LL << v42;
    }
    *(void *)(v11 + 16) = 0LL;
  }

              sub_100187094(v2);
              return;
            }
          }
        }
      }
    }

    swift_once(&qword_100644408, sub_100458568);
    goto LABEL_7;
  }

  id v38 = v37;
  id v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
  uint64_t v41 = v40;

  UUID.init(uuidString:)(v39, v41);
  uint64_t v42 = swift_bridgeObjectRelease(v41);
  uint64_t v44 = v98;
  uint64_t v43 = v99;
  if ((*((unsigned int (**)(char *, uint64_t, uint64_t, __n128))v99 + 6))(v20, 1LL, v98, v42) == 1)
  {
    sub_100187100((uint64_t)v20, &qword_10064DA60);
    goto LABEL_6;
  }

  unsigned int v58 = (uint64_t)v97;
  (*((void (**)(char *, char *, uint64_t))v43 + 4))(v97, v20, v44);
  id v59 = (uint64_t *)(v13 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_sessions);
  swift_beginAccess(v13 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_sessions, v100, 32LL, 0LL);
  uint64_t v60 = *v59;
  if (*(void *)(*v59 + 16) && (unint64_t v61 = sub_1003AD618(v58), (v62 & 1) != 0))
  {
    sub_10019A6C4(*(void *)(v60 + 56) + 40 * v61, (uint64_t)&v104);
    sub_1001CE0D0(&v104, (uint64_t)v107);
    swift_endAccess(v100);
    uint64_t v63 = type metadata accessor for TaskPriority(0LL);
    BOOL v64 = (uint64_t)v92;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56LL))(v92, 1LL, 1LL, v63);
    sub_10019A6C4((uint64_t)v107, (uint64_t)&v104);
    __int128 v65 = (void *)swift_allocObject(v91, 80LL, 7LL);
    v65[2] = 0LL;
    v65[3] = 0LL;
    sub_1001CE0D0(&v104, (uint64_t)(v65 + 4));
    v65[9] = a4;
    __int128 v66 = a4;
    __int128 v67 = sub_1001B37E8(v64, v93, (uint64_t)v65);

    swift_release(v67);
    sub_10018709C(v107);
    (*((void (**)(uint64_t, uint64_t))v99 + 1))(v58, v44);
  }

  else
  {
    swift_endAccess(v100);
    __int128 v68 = (const char **)(v13 + *v95);
    *(void *)&__int128 v69 = swift_beginAccess(v68, v103, 0LL, 0LL).n128_u64[0];
    __int128 v70 = *v68;
    __int128 v71 = *((void *)*v68 + 2);
    if (v71)
    {
      __int128 v72 = (uint64_t)(v70 + 32);
      swift_bridgeObjectRetain(*v68, v69);
      __int128 v73 = v99;
      while (1)
      {
        sub_10019A6C4(v72, (uint64_t)v100);
        __int128 v74 = v101;
        __int128 v75 = v102;
        sub_10019A708(v100, v101);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v75 + 8) + 8LL) + 32LL))(v74);
        LOBYTE(v74) = static UUID.== infix(_:_:)(v27, v58);
        (*((void (**)(char *, uint64_t))v73 + 1))(v27, v44);
        if ((v74 & 1) != 0) {
          break;
        }
        sub_10018709C(v100);
        v72 += 40LL;
        if (!--v71) {
          goto LABEL_25;
        }
      }

      ((void (*)(void *, __int128 *))v94)(v100, &v104);
    }

    else
    {
      swift_bridgeObjectRetain(*v68, v69);
      __int128 v73 = v99;
LABEL_25:
      v106 = 0LL;
      v104 = 0u;
      NSErrorUserInfoKey v105 = 0u;
    }

    __int128 v76 = swift_bridgeObjectRelease(v70);
    __int128 v77 = v96;
    if (*((void *)&v105 + 1))
    {
      v94(&v104, v107, v76);
      sub_10019A708(v107, v107[3]);
      a9(a4);

      (*((void (**)(uint64_t, uint64_t))v73 + 1))(v58, v44);
      sub_10018709C(v107);
    }

    else
    {
      sub_100187100((uint64_t)&v104, a10);
      if (qword_100644408 != -1) {
        swift_once(&qword_100644408, sub_100458568);
      }
      __int128 v78 = type metadata accessor for Logger(0LL);
      sub_100186DE4(v78, (uint64_t)qword_100656748);
      __int128 v79 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v73 + 2))(v77, v58, v44);
      __int128 v80 = (os_log_s *)Logger.logObject.getter(v79);
      v81 = static os_log_type_t.error.getter(v80);
      if (os_log_type_enabled(v80, v81))
      {
        v82 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        v83 = swift_slowAlloc(32LL, -1LL);
        v107[0] = v83;
        *(_DWORD *)v82 = 136315138;
        uint64_t v95 = v82 + 4;
        v84 = sub_100183F14( (unint64_t *)&qword_1006460B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v85 = dispatch thunk of CustomStringConvertible.description.getter(v44, v84);
        v87 = (const char *)v86;
        *(void *)&v104 = sub_10018CDB4(v85, v86, v107);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, (char *)&v104 + 8, v95, v82 + 12);
        id v88 = swift_bridgeObjectRelease(v87);
        uint64_t v89 = (void (*)(char *, uint64_t, __n128))*((void *)v99 + 1);
        v89(v77, v44, v88);
        _os_log_impl((void *)&_mh_execute_header, v80, v81, "Could not find existing session for %s", v82, 0xCu);
        swift_arrayDestroy(v83, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v83, -1LL, -1LL);
        swift_slowDealloc(v82, -1LL, -1LL);
      }

      else
      {

        uint64_t v89 = (void (*)(char *, uint64_t, __n128))*((void *)v73 + 1);
        ((void (*)(char *, uint64_t))v89)(v77, v44);
      }

      ((void (*)(uint64_t, uint64_t))v89)(v58, v44);
    }
  }

void sub_1000F4014(_Unwind_Exception *a1)
{
}

uint64_t sub_1000F4040(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000F44BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state)
{
}

Class sub_1000F4FB0()
{
  if (qword_1006570C0 != -1) {
    dispatch_once(&qword_1006570C0, &stru_1005CE310);
  }
  Class result = objc_getClass("UNUserNotificationCenter");
  qword_1006570B8 = (uint64_t)result;
  off_100643478 = (uint64_t (*)())sub_1000F500C;
  return result;
}

id sub_1000F500C()
{
  return (id)qword_1006570B8;
}

void sub_1000F5018(id a1)
{
  qword_1006570C8 = (uint64_t)dlopen("/System/Library/Frameworks/UserNotifications.framework/UserNotifications", 2);
}

Class sub_1000F5040()
{
  if (qword_1006570C0 != -1) {
    dispatch_once(&qword_1006570C0, &stru_1005CE310);
  }
  Class result = objc_getClass("UNNotificationRequest");
  qword_1006570D0 = (uint64_t)result;
  off_100643480 = (uint64_t (*)())sub_1000F509C;
  return result;
}

id sub_1000F509C()
{
  return (id)qword_1006570D0;
}

id sub_1000F50A8()
{
  if (qword_1006570C0 != -1) {
    dispatch_once(&qword_1006570C0, &stru_1005CE310);
  }
  uint64_t v0 = (id *)dlsym((void *)qword_1006570C8, "UNErrorDomain");
  if (v0) {
    objc_storeStrong((id *)&qword_100657088, *v0);
  }
  off_100643488 = (uint64_t (*)())sub_1000F5120;
  return (id)qword_100657088;
}

id sub_1000F5120()
{
  return (id)qword_100657088;
}

id sub_1000F512C()
{
  if (qword_1006570C0 != -1) {
    dispatch_once(&qword_1006570C0, &stru_1005CE310);
  }
  uint64_t v0 = (id *)dlsym((void *)qword_1006570C8, "UNNotificationAttachmentOptionsTypeHintKey");
  if (v0) {
    objc_storeStrong((id *)&qword_100657098, *v0);
  }
  off_100643490 = (uint64_t (*)())sub_1000F51A4;
  return (id)qword_100657098;
}

id sub_1000F51A4()
{
  return (id)qword_100657098;
}

id sub_1000F51B0()
{
  if (qword_1006570C0 != -1) {
    dispatch_once(&qword_1006570C0, &stru_1005CE310);
  }
  uint64_t v0 = (id *)dlsym((void *)qword_1006570C8, "UNNotificationAttachmentOptionsHiddenFromDefaultExpandedViewKey");
  if (v0) {
    objc_storeStrong((id *)&qword_100657090, *v0);
  }
  off_100643498 = (uint64_t (*)())sub_1000F5228;
  return (id)qword_100657090;
}

id sub_1000F5228()
{
  return (id)qword_100657090;
}

Class sub_1000F5234()
{
  if (qword_1006570C0 != -1) {
    dispatch_once(&qword_1006570C0, &stru_1005CE310);
  }
  Class result = objc_getClass("UNNotificationAttachment");
  qword_1006570D8 = (uint64_t)result;
  off_1006434A0 = (uint64_t (*)())sub_1000F5290;
  return result;
}

id sub_1000F5290()
{
  return (id)qword_1006570D8;
}

id sub_1000F529C()
{
  if (qword_1006570C0 != -1) {
    dispatch_once(&qword_1006570C0, &stru_1005CE310);
  }
  uint64_t v0 = (id *)dlsym((void *)qword_1006570C8, "UNNotificationDefaultActionIdentifier");
  if (v0) {
    objc_storeStrong((id *)&qword_1006570A0, *v0);
  }
  off_1006434A8 = (uint64_t (*)())sub_1000F5314;
  return (id)qword_1006570A0;
}

id sub_1000F5314()
{
  return (id)qword_1006570A0;
}

id sub_1000F5320()
{
  if (qword_1006570C0 != -1) {
    dispatch_once(&qword_1006570C0, &stru_1005CE310);
  }
  uint64_t v0 = (id *)dlsym((void *)qword_1006570C8, "UNNotificationDismissActionIdentifier");
  if (v0) {
    objc_storeStrong((id *)&qword_1006570A8, *v0);
  }
  off_1006434B0 = (uint64_t (*)())sub_1000F5398;
  return (id)qword_1006570A8;
}

id sub_1000F5398()
{
  return (id)qword_1006570A8;
}

Class sub_1000F53A4()
{
  if (qword_1006570C0 != -1) {
    dispatch_once(&qword_1006570C0, &stru_1005CE310);
  }
  Class result = objc_getClass("UNMutableNotificationContent");
  qword_1006570E0 = (uint64_t)result;
  off_1006434B8 = (uint64_t (*)())sub_1000F5400;
  return result;
}

id sub_1000F5400()
{
  return (id)qword_1006570E0;
}

Class sub_1000F540C()
{
  if (qword_1006570C0 != -1) {
    dispatch_once(&qword_1006570C0, &stru_1005CE310);
  }
  Class result = objc_getClass("UNNotificationSound");
  qword_1006570E8 = (uint64_t)result;
  off_1006434C0 = (uint64_t (*)())sub_1000F5468;
  return result;
}

id sub_1000F5468()
{
  return (id)qword_1006570E8;
}

Class sub_1000F5474()
{
  if (qword_1006570F8 != -1) {
    dispatch_once(&qword_1006570F8, &stru_1005CE330);
  }
  Class result = objc_getClass("RTIInputSystemDataPayload");
  qword_1006570F0 = (uint64_t)result;
  off_1006434C8 = (uint64_t (*)())sub_1000F54D0;
  return result;
}

id sub_1000F54D0()
{
  return (id)qword_1006570F0;
}

void sub_1000F54DC(id a1)
{
  qword_100657100 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/RemoteTextInput.framework/RemoteTextInput", 2);
}

id sub_1000F5504()
{
  if (qword_1006570C0 != -1) {
    dispatch_once(&qword_1006570C0, &stru_1005CE310);
  }
  uint64_t v0 = (id *)dlsym((void *)qword_1006570C8, "UNNotificationSilenceActionIdentifier");
  if (v0) {
    objc_storeStrong((id *)&qword_1006570B0, *v0);
  }
  off_1006434D0 = (uint64_t (*)())sub_1000F557C;
  return (id)qword_1006570B0;
}

id sub_1000F557C()
{
  return (id)qword_1006570B0;
}

void sub_1000F5F9C(_Unwind_Exception *a1)
{
}

void sub_1000F60A8(_Unwind_Exception *a1)
{
}

void sub_1000F611C(_Unwind_Exception *a1)
{
}

void sub_1000F6180(_Unwind_Exception *a1)
{
}

void sub_1000F8850()
{
  sub_1000BA514((void *)&_mh_execute_header, v0, v1, "Could not generate local key = %d, (output length = %d)", v2, v3);
  sub_10001480C();
}

void sub_1000F88B4()
{
}

void sub_1000F88E0()
{
  sub_1000BA514((void *)&_mh_execute_header, v0, v1, "Failed to signed remote key = %d, output length = %d", v2, v3);
  sub_10001480C();
}

void sub_1000F8944()
{
}

void sub_1000F897C()
{
}

void sub_1000F89DC()
{
}

void sub_1000F8A08()
{
}

void sub_1000F8A68()
{
}

void sub_1000F8AC8()
{
}

void sub_1000F8B28()
{
}

void sub_1000F8B88(void *a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1 longTermKeyStorageFilePath]);
  sub_10001C438();
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "Couldn't delete LTKs, no storage path: %@",  v4,  0xCu);
}

void sub_1000F8C18()
{
}

void sub_1000F8C78(void *a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([a1 pairingStorePath]);
  sub_10001C438();
  sub_1000241C0( (void *)&_mh_execute_header,  v2,  v3,  "Error creating unlock storage folder: (pairing path %@, error %@)",  v4,  v5,  v6,  v7,  v8);

  sub_1000241EC();
}

void sub_1000F8D04()
{
}

void sub_1000F8D64()
{
}

void sub_1000F8D90(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1 localLongTermKey]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([a1 remoteLongTermKey]);
  sub_1000241C0( (void *)&_mh_execute_header,  v3,  v4,  "No long term keys to create session (local key = %@, remote key = %@)",  v5,  v6,  v7,  v8,  2u);

  sub_1000241EC();
}

void sub_1000F8E34()
{
}

void sub_1000F8E60()
{
}

void sub_1000F8E8C()
{
}

void sub_1000F8EB8(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  LOWORD(sub_1000BA514( (void *)&_mh_execute_header,  v0,  v1,  "Failed to store keychain item (add status:%d, delete status:%d)",  v2, v3) = 1024;
  HIWORD(sub_1000BA514( (void *)&_mh_execute_header,  v0,  v1,  "Failed to store keychain item (add status:%d, delete status:%d)",  v2, v3) = a2;
  sub_1000BA514((void *)&_mh_execute_header, a2, a3, "Step failed with output length = %d, CFErrorRef error = %x", 67109376, v3);
  sub_10001480C();
}

void sub_1000F8F2C( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000147D0( (void *)&_mh_execute_header,  a2,  a3,  "Failed to create escrow secret ouput length = %d",  a5,  a6,  a7,  a8,  0);
  sub_1000147C8();
}

void sub_1000F8F94( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000147D0((void *)&_mh_execute_header, a1, a3, "Failed to reset session = %d", a5, a6, a7, a8, 0);
  sub_1000147C8();
}

void sub_1000F9004()
{
}

void sub_1000F9030()
{
}

void sub_1000F905C(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  LOWORD(sub_1000BA514( (void *)&_mh_execute_header,  v0,  v1,  "Failed to store keychain item (add status:%d, delete status:%d)",  v2, v3) = 1024;
  HIWORD(sub_1000BA514( (void *)&_mh_execute_header,  v0,  v1,  "Failed to store keychain item (add status:%d, delete status:%d)",  v2, v3) = a2;
  sub_1000BA514( (void *)&_mh_execute_header,  a2,  a3,  "Failed to store escrow data (add status:%d, delete status:%d)",  67109376,  v3);
  sub_10001480C();
}

void sub_1000F90CC( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000F9130()
{
}

void sub_1000F915C( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000147D0((void *)&_mh_execute_header, a2, a3, "Failed to delete escrow record = %d", a5, a6, a7, a8, 0);
  sub_1000147C8();
}

void sub_1000F9200(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___SDAutoUnlockTransport);
  uint64_t v2 = (void *)qword_100657108;
  qword_100657108 = (uint64_t)v1;
}

void sub_1000F94C8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientMap]);
  [v2 setObject:*(void *)(a1 + 40) forKey:*(void *)(a1 + 48)];
}

void sub_1000F95A0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientMap]);
  [v2 removeObjectForKey:*(void *)(a1 + 40)];

  uint64_t v3 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sendIdentifierToSessionID]);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  v17[2] = sub_1000F974C;
  v17[3] = &unk_1005CE3E0;
  id v18 = *(id *)(a1 + 40);
  uint64_t v5 = v3;
  id v19 = v5;
  [v4 enumerateKeysAndObjectsUsingBlock:v17];

  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  uint8_t v6 = v5;
  id v7 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v6,  "countByEnumeratingWithState:objects:count:",  &v13,  v20,  16LL);
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v14;
    do
    {
      uint64_t v10 = 0LL;
      do
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void *)(*((void *)&v13 + 1) + 8LL * (void)v10);
        id v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sendIdentifierToSessionID", (void)v13));
        [v12 removeObjectForKey:v11];

        uint64_t v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      id v8 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v6,  "countByEnumeratingWithState:objects:count:",  &v13,  v20,  16LL);
    }

    while (v8);
  }
}

void sub_1000F974C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
}

void sub_1000F9A0C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1000F9A24(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = 0LL;
  return result;
}

void sub_1000F9A34(uint64_t a1)
{
}

void sub_1000F9A3C(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "onqueue_bluetoothIDForIDSID:", *(void *)(a1 + 40)));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 4sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = v2;
}

void sub_1000F9CB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000F9CC8(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "onqueue_bluetoothDeviceIdentifiers"));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 4sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = v2;
}

void sub_1000FA6A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000FA6B8(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "onqueue_devicesWithLTKs"));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 4sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = v2;
}

void sub_1000FA978( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000FA990(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "onqueue_autoUnlockEligibleDevices:deviceType:",  *(unsigned __int8 *)(a1 + 56),  *(void *)(a1 + 48)));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 4sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = v2;
}

void sub_1000FB088( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000FB0A0(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "onqueue_enabledAutoUnlockDevicesUsingCache:", *(unsigned __int8 *)(a1 + 48)));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 4sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = v2;
}

void sub_1000FB3F8(uint64_t a1)
{
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "idsService", 0));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 devices]);

  id v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v14;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)v7);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockAKSManager sharedManager](&OBJC_CLASS___SDAutoUnlockAKSManager, "sharedManager"));
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 uniqueIDOverride]);
        unsigned int v11 = [v9 deviceEnabledAsKeyForIDSDeviceID:v10];

        if (v11)
        {
          id v12 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) autoUnlockDeviceForIDSDevice:v8 cloudPaired:1 cached:0]);
          if (v12) {
            [*(id *)(a1 + 40) addObject:v12];
          }
        }

        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v5);
  }
}

void sub_1000FBAA8(_Unwind_Exception *a1)
{
}

void sub_1000FBCE0(_Unwind_Exception *a1)
{
}

uint64_t sub_1000FD5AC(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    if ((a2 & 1) == 0) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a3);
    }
  }

  return result;
}

void sub_1000FD7BC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) primaryClient]);
  char v3 = objc_opt_respondsToSelector(v2, "transportDidChangeDevices:");

  if ((v3 & 1) != 0)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) primaryClient]);
    [v4 transportDidChangeDevices:*(void *)(a1 + 32)];
  }

void sub_1000FD940(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) primaryClient]);
  char v3 = objc_opt_respondsToSelector(v2, "transportDidChangeNearbyState:");

  if ((v3 & 1) != 0)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) primaryClient]);
    [v4 transportDidChangeNearbyState:*(void *)(a1 + 32)];
  }

void sub_1000FDAA8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) idsService]);
  char v3 = (void *)objc_claimAutoreleasedReturnValue([v2 deviceForFromID:*(void *)(a1 + 40)]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueIDOverride]);

  uint64_t v6 = auto_unlock_log(v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = v7;
  if (v4)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v9 = [*(id *)(a1 + 48) type];
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) data]);
      unsigned int v11 = [v10 length];
      id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) outgoingResponseIdentifier]);
      int v59 = 67109634;
      *(_DWORD *)uint64_t v60 = v9;
      *(_WORD *)&v60[4] = 1024;
      *(_DWORD *)&v60[6] = v11;
      *(_WORD *)unint64_t v61 = 2112;
      *(void *)&v61[2] = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Received protobuf (xpc_type_t type = %d, size = %u, identifier = %@)",  (uint8_t *)&v59,  0x18u);
    }

    __int128 v13 = objc_alloc(&OBJC_CLASS___SDAutoUnlockSessionWrapper);
    __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) data]);
    id v8 = -[SDAutoUnlockSessionWrapper initWithData:](v13, "initWithData:", v14);

    id v15 = -[os_log_s hasSessionID](v8, "hasSessionID");
    if (!(_DWORD)v15
      || (__int128 v16 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s sessionID](v8, "sessionID")),
          id v17 = [v16 length],
          v16,
          v17 != (id)16))
    {
      uint64_t v31 = auto_unlock_log(v15);
      char v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        sub_1000FF4A4(v8, (id *)(a1 + 48), v21);
      }
      goto LABEL_37;
    }

    id v18 = [*(id *)(a1 + 48) type];
    id v19 = objc_alloc(&OBJC_CLASS___NSUUID);
    id v20 = objc_claimAutoreleasedReturnValue(-[os_log_s sessionID](v8, "sessionID"));
    char v21 = -[NSUUID initWithUUIDBytes:](v19, "initWithUUIDBytes:", [v20 bytes]);

    if ((int)v18 > 500)
    {
      if ((_DWORD)v18 == 501)
      {
        uint64_t v53 = auto_unlock_log(v22);
        uint64_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v55 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) serverReceivedTime]);
          unsigned int v56 = [*(id *)(a1 + 56) fromServerStorage];
          char v57 = @"NO";
          if (v56) {
            char v57 = @"YES";
          }
          int v59 = 138412546;
          *(void *)uint64_t v60 = v55;
          *(_WORD *)&v60[8] = 2112;
          *(void *)unint64_t v61 = v57;
          _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "Received registration request (date: %@, from storage: %@)",  (uint8_t *)&v59,  0x16u);
        }

        char v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) primaryClient]);
        uint64_t v58 = *(void *)(a1 + 32);
        id v30 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s payload](v8, "payload"));
        [v28 transport:v58 didReceiveRegistrationRequestWithSessionID:v21 deviceID:v4 requestData:v30];
        goto LABEL_36;
      }

      if ((_DWORD)v18 == 505)
      {
        uint64_t v39 = auto_unlock_log(v22);
        id v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) serverReceivedTime]);
          unsigned int v42 = [*(id *)(a1 + 56) fromServerStorage];
          uint64_t v43 = @"NO";
          if (v42) {
            uint64_t v43 = @"YES";
          }
          int v59 = 138412546;
          *(void *)uint64_t v60 = v41;
          *(_WORD *)&v60[8] = 2112;
          *(void *)unint64_t v61 = v43;
          _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "Received key originating registration request (date: %@, from storage: %@)",  (uint8_t *)&v59,  0x16u);
        }

        char v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) primaryClient]);
        uint64_t v44 = *(void *)(a1 + 32);
        id v30 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s payload](v8, "payload"));
        [v28 transport:v44 didReceiveKeyOriginatingRegistrationRequestWithSessionID:v21 deviceID:v4 requestData:v30];
        goto LABEL_36;
      }
    }

    else
    {
      if ((_DWORD)v18 == 2)
      {
        char v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) primaryClient]);
        uint64_t v52 = *(void *)(a1 + 32);
        id v30 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s payload](v8, "payload"));
        [v28 transport:v52 didReceiveDisableMessage:v30 fromDeviceID:v4];
        goto LABEL_36;
      }

      if ((_DWORD)v18 == 101)
      {
        uint64_t v23 = auto_unlock_log(v22);
        unsigned int v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          char v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) serverReceivedTime]);
          unsigned int v26 = [*(id *)(a1 + 56) fromServerStorage];
          unint64_t v27 = @"NO";
          if (v26) {
            unint64_t v27 = @"YES";
          }
          int v59 = 138412546;
          *(void *)uint64_t v60 = v25;
          *(_WORD *)&v60[8] = 2112;
          *(void *)unint64_t v61 = v27;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Received pairing request (date: %@, from storage: %@)",  (uint8_t *)&v59,  0x16u);
        }

        if (![*(id *)(a1 + 32) pairingRequestIsValidForDeviceID:v4 messageContext:*(void *)(a1 + 56)]) {
          goto LABEL_37;
        }
        char v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) primaryClient]);
        uint64_t v29 = *(void *)(a1 + 32);
        id v30 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s payload](v8, "payload"));
        [v28 transport:v29 didReceivePairingRequestWithSessionID:v21 deviceID:v4 requestData:v30];
LABEL_36:

LABEL_37:
        goto LABEL_38;
      }
    }

    __int16 v45 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientMap]);
    uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s UUIDString](v21, "UUIDString"));
    char v28 = (void *)objc_claimAutoreleasedReturnValue([v45 objectForKey:v46]);

    uint64_t v47 = objc_opt_respondsToSelector(v28, "transport:didReceivePayload:type:deviceID:");
    if ((v47 & 1) != 0)
    {
      uint64_t v48 = *(void *)(a1 + 32);
      uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s payload](v8, "payload"));
      [v28 transport:v48 didReceivePayload:v49 type:v18 deviceID:v4];
    }

    uint64_t v50 = auto_unlock_log(v47);
    id v30 = (void *)objc_claimAutoreleasedReturnValue(v50);
    if (os_log_type_enabled((os_log_t)v30, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientMap]);
      int v59 = 138412802;
      *(void *)uint64_t v60 = v28;
      *(_WORD *)&v60[8] = 2112;
      *(void *)unint64_t v61 = v21;
      *(_WORD *)&v61[8] = 2112;
      char v62 = v51;
      _os_log_debug_impl( (void *)&_mh_execute_header,  (os_log_t)v30,  OS_LOG_TYPE_DEBUG,  "client:%@, sessionID:%@, clients:%@",  (uint8_t *)&v59,  0x20u);
    }

    goto LABEL_36;
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    sub_1000FF474(v8, v32, v33, v34, v35, v36, v37, v38);
  }
LABEL_38:
}

void sub_1000FE214(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sendIdentifierToSessionID]);
  char v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:*(void *)(a1 + 40)]);

  if (v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientMap]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v3]);

    uint64_t v7 = auto_unlock_log(v6);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      int v11 = 138412802;
      id v12 = v5;
      __int16 v13 = 2112;
      __int128 v14 = v3;
      __int16 v15 = 2112;
      uint64_t v16 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Calling client for ACK (client: %@, session ID: %@, identifier: %@)",  (uint8_t *)&v11,  0x20u);
    }

    if ((objc_opt_respondsToSelector(v5, "transport:didReceiveMessageACKForIdentifier:") & 1) != 0) {
      [v5 transport:*(void *)(a1 + 32) didReceiveMessageACKForIdentifier:*(void *)(a1 + 40)];
    }
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sendIdentifierToSessionID]);
    [v10 removeObjectForKey:*(void *)(a1 + 40)];
  }
}

void sub_1000FF250(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_1000FF25C(uint8_t *a1, _BYTE *a2, os_log_s *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_1000FF250((void *)&_mh_execute_header, a3, (uint64_t)a3, "Watch OS too old. Skipping", a1);
}

void sub_1000FF290(os_log_s *a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)char v3 = 0;
  sub_1000FF250((void *)&_mh_execute_header, a1, a3, "Skipping device without uniqueID", v3);
  sub_1000147C8();
}

void sub_1000FF2C4(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "IDS device not cloud paired %@",  (uint8_t *)&v2,  0xCu);
}

void sub_1000FF338(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_fault_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_FAULT,  "IDSDevice not found for deviceID: %@",  (uint8_t *)&v2,  0xCu);
}

void sub_1000FF3AC(uint64_t a1, int a2, os_log_t log)
{
  int v3 = 136315650;
  id v4 = "-[SDAutoUnlockTransport macVersionEligibleForDeviceID:]";
  __int16 v5 = 2112;
  uint64_t v6 = a1;
  __int16 v7 = 1024;
  int v8 = a2;
  _os_log_fault_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_FAULT,  "%s: called with deviceID:%@ whose deviceClass is %d",  (uint8_t *)&v3,  0x1Cu);
}

void sub_1000FF444( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000FF474( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000FF4A4(void *a1, id *a2, os_log_s *a3)
{
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a1 sessionID]);
  __int16 v7 = (void *)objc_claimAutoreleasedReturnValue([*a2 data]);
  int v8 = 138412802;
  uint64_t v9 = v6;
  __int16 v10 = 2112;
  int v11 = a1;
  __int16 v12 = 2112;
  __int16 v13 = v7;
  _os_log_error_impl( (void *)&_mh_execute_header,  a3,  OS_LOG_TYPE_ERROR,  "Incoming message missing info (session = %@, wrapper = %@, data = %@)",  (uint8_t *)&v8,  0x20u);
}

void sub_1000FF6D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1000FF6F0(uint64_t a1, void *a2)
{
  int v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained handleEndpointsChanged:v3];
}

void sub_1000FFDF4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v8 = airdrop_nw_log(v6, v7);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v34) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "AirDrop browse start handler called",  (uint8_t *)&v34,  2u);
  }

  uint64_t v10 = nw_agent_client_copy_browse_descriptor(v5);
  __int16 v12 = (void *)v10;
  if (v10)
  {
    uint64_t type = nw_browse_descriptor_get_type(v10);
    if ((_DWORD)type == 2)
    {
      __int16 v15 = -[SDAirDropAgentClient initWithClient:browseDescriptor:browseResponse:]( objc_alloc(&OBJC_CLASS____TtC16DaemoniOSLibrary20SDAirDropAgentClient),  "initWithClient:browseDescriptor:browseResponse:",  v5,  v12,  v6);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) endpointService]);
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 addClient:v15]);

      uint64_t v20 = airdrop_nw_log(v18, v19);
      char v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v17 agentClient]);
        uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 id]);
        int v34 = 138412290;
        uint64_t v35 = v23;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Created AirDrop agent client %@",  (uint8_t *)&v34,  0xCu);
      }

      unsigned int v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientTokens]);
      [v24 addObject:v17];
    }

    else
    {
      uint64_t v26 = airdrop_nw_log(type, v14);
      __int16 v15 = (_TtC16DaemoniOSLibrary20SDAirDropAgentClient *)objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled((os_log_t)v15, OS_LOG_TYPE_ERROR)) {
        sub_100100818((os_log_s *)v15, v27, v28, v29, v30, v31, v32, v33);
      }
    }
  }

  else
  {
    uint64_t v25 = airdrop_nw_log(0LL, v11);
    __int16 v15 = (_TtC16DaemoniOSLibrary20SDAirDropAgentClient *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled((os_log_t)v15, OS_LOG_TYPE_ERROR)) {
      sub_1001007A4((uint64_t)v5, (os_log_s *)v15);
    }
  }
}

void sub_100100014(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = airdrop_nw_log(v3, v4);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v16) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "AirDrop browse stop handler called",  (uint8_t *)&v16,  2u);
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _agentClientTokenForClient:v3]);
  if (v7)
  {
    uint64_t v10 = airdrop_nw_log(v8, v9);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v7 agentClient]);
      __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([v12 id]);
      int v16 = 138412290;
      id v17 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Removing AirDrop agent client %@",  (uint8_t *)&v16,  0xCu);
    }

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) endpointService]);
    [v14 removeClientWithToken:v7];

    __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) clientTokens]);
    [v15 removeObject:v7];
  }
}

void sub_100100370(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) copy];
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) clientTokens]);
  id v3 = [obj countByEnumeratingWithState:&v34 objects:v47 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v29 = *(void *)v35;
    *(void *)&__int128 v4 = 138412546LL;
    __int128 v27 = v4;
    do
    {
      for (unint64_t i = 0LL; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v35 != v29) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v34 + 1) + 8 * (void)i), "agentClient", v27));
        uint64_t v9 = airdrop_nw_log(v7, v8);
        uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v7 id]);
          __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v7 bundleID]);
          unsigned int v13 = [v7 pid];
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v7 startTime]);
          *(_DWORD *)buf = 138413058;
          id v40 = v11;
          __int16 v41 = 2112;
          id v42 = v12;
          __int16 v43 = 1024;
          unsigned int v44 = v13;
          __int16 v45 = 2112;
          uint64_t v46 = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Updating browse results for client %@ - bundleID %@ - pid %d - startTime %@",  buf,  0x26u);
        }

        __int16 v15 = (void *)nw_array_create();
        __int128 v30 = 0u;
        __int128 v31 = 0u;
        __int128 v32 = 0u;
        __int128 v33 = 0u;
        id v16 = v2;
        id v17 = [v16 countByEnumeratingWithState:&v30 objects:v38 count:16];
        if (v17)
        {
          id v18 = v17;
          uint64_t v19 = *(void *)v31;
          do
          {
            for (j = 0LL; j != v18; j = (char *)j + 1)
            {
              if (*(void *)v31 != v19) {
                objc_enumerationMutation(v16);
              }
              nw_array_append(v15, *(void *)(*((void *)&v30 + 1) + 8LL * (void)j));
            }

            id v18 = [v16 countByEnumeratingWithState:&v30 objects:v38 count:16];
          }

          while (v18);
        }

        char v21 = (void (**)(void, void))objc_claimAutoreleasedReturnValue([v7 browseResponse]);
        ((void (**)(void, void *))v21)[2](v21, v15);

        uint64_t v24 = airdrop_nw_log(v22, v23);
        uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v7 id]);
          *(_DWORD *)buf = v27;
          id v40 = v26;
          __int16 v41 = 2112;
          id v42 = v2;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Updated browse client %@ - endpoints %@ ",  buf,  0x16u);
        }
      }

      id v5 = [obj countByEnumeratingWithState:&v34 objects:v47 count:16];
    }

    while (v5);
  }
}

void sub_100100770( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001007A4(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "No browse descriptor for client:%@",  (uint8_t *)&v2,  0xCu);
}

void sub_100100818( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

LABEL_46:
}

        if (a3) {
          *a3 = v42 & 1;
        }
        __int16 v43 = [v52 copy];

        goto LABEL_49;
      }
    }

    uint64_t v58 = 0u;
    int v59 = 0u;
    unsigned int v56 = 0u;
    char v57 = 0u;
    id v17 = v7;
    uint64_t v54 = [v17 countByEnumeratingWithState:&v56 objects:v65 count:16];
    if (v54)
    {
      uint64_t v49 = a4;
      uint64_t v47 = a3;
      uint64_t v48 = v7;
      uint64_t v53 = *(void *)v57;
      uint64_t v50 = 1;
      id obj = v17;
      do
      {
        for (unint64_t i = 0LL; i != v54; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v57 != v53) {
            objc_enumerationMutation(obj);
          }
          uint64_t v19 = *(void **)(*((void *)&v56 + 1) + 8LL * (void)i);
          uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "lastPathComponent", v47, v48));
          char v21 = (void *)objc_claimAutoreleasedReturnValue([v8 URLByAppendingPathComponent:v20]);

          unint64_t v55 = 0LL;
          uint64_t v22 = [v12 moveItemAtURL:v19 toURL:v21 error:&v55];
          uint64_t v23 = v55;
          uint64_t v24 = v23;
          if ((v22 & 1) != 0)
          {
LABEL_13:
            uint64_t v25 = daemon_log(v23);
            uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
            {
              id v40 = (void *)objc_claimAutoreleasedReturnValue([v19 lastPathComponent]);
              __int16 v41 = (void *)objc_claimAutoreleasedReturnValue([v21 lastPathComponent]);
              *(_DWORD *)buf = 138412546;
              char v62 = v40;
              uint64_t v63 = 2112;
              BOOL v64 = v41;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEBUG,  "SDMoveFilesToFolder moved '%@' to folder as '%@'",  buf,  0x16u);
            }

            [v52 addObject:v21];
          }

          else
          {
            while (1)
            {
              __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([v24 domain]);
              uint64_t v28 = [v24 code];

              if (v28 != (id)516) {
                goto LABEL_22;
              }
              __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([v21 lastPathComponent]);
              __int128 v31 = sub_1001159F8(v30);
              __int128 v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
              __int128 v33 = [v30 isEqual:v32];
              if ((_DWORD)v33)
              {
                uint64_t v38 = daemon_log(v33);
                uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
                if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412290;
                  char v62 = v24;
                  _os_log_error_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_ERROR,  "Failed to move item to folder. Could not resolve name conflict. Error: %@",  buf,  0xCu);
                }

                if (v49) {
                  *uint64_t v49 = v24;
                }

                goto LABEL_31;
              }

              __int128 v34 = objc_claimAutoreleasedReturnValue([v8 URLByAppendingPathComponent:v32]);

              unint64_t v55 = 0LL;
              __int128 v35 = [v12 moveItemAtURL:v19 toURL:v34 error:&v55];
              uint64_t v23 = v55;
              uint64_t v24 = v23;
              char v21 = (void *)v34;
              if ((v35 & 1) != 0) {
                goto LABEL_13;
              }
            }

LABEL_22:
            __int128 v36 = daemon_log(v29);
            __int128 v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
            if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              char v62 = v24;
              _os_log_error_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "Failed to move item to folder. Error: %@",  buf,  0xCu);
            }

            if (v49)
            {
              uint64_t v24 = v24;
              uint64_t v50 = 0;
              *uint64_t v49 = v24;
              goto LABEL_32;
            }

    uint64_t v9 = 0;
    goto LABEL_47;
  }

  if ((*((_BYTE *)v4 + 64) & 0x40) != 0) {
    goto LABEL_46;
  }
LABEL_34:
  if ((*(_BYTE *)&self->_has & 0x20) != 0)
  {
    if ((*((_BYTE *)v4 + 64) & 0x20) == 0 || self->_watchOldLTKSyncStatus != *((_DWORD *)v4 + 14)) {
      goto LABEL_46;
    }
  }

  else if ((*((_BYTE *)v4 + 64) & 0x20) != 0)
  {
    goto LABEL_46;
  }

  if ((*(_BYTE *)&self->_has & 0x10) != 0)
  {
    if ((*((_BYTE *)v4 + 64) & 0x10) == 0 || self->_watchNewLTKSyncStatus != *((_DWORD *)v4 + 13)) {
      goto LABEL_46;
    }
  }

  else if ((*((_BYTE *)v4 + 64) & 0x10) != 0)
  {
    goto LABEL_46;
  }

  ltkHash = self->_ltkHash;
  else {
    uint64_t v9 = 1;
  }
LABEL_47:

  return v9;
}

    v162 = type metadata accessor for SFAirDropSend.Transfer.Metrics(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v162 - 8) + 8LL))(v52, v162);
    return;
  }

  (*(void (**)(char *, uint64_t))(v49 + 96))(v52, v48);
  swift_bridgeObjectRelease(*((void *)v52 + 1));
  uint64_t v54 = (int *)sub_100183098(&qword_10064A108);
  unint64_t v55 = &v52[v54[12]];
  swift_bridgeObjectRelease(*(void *)&v52[v54[16] + 8]);
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v47, v55, v41);
  unsigned int v56 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
  v257 = v47;
  v56(v45, v47, v41);
  char v57 = (*(uint64_t (**)(char *, uint64_t))(v42 + 88))(v45, v41);
  uint64_t v58 = (uint64_t)v52;
  int v59 = v41;
  if ((_DWORD)v57 == enum case for SFAirDrop.Progress.transferring(_:))
  {
    v256 = v54;
    uint64_t v60 = v42;
    unint64_t v61 = (*(uint64_t (**)(char *, uint64_t))(v42 + 96))(v45, v41);
    char v62 = *(void *)v45;
    uint64_t v63 = *((void *)v45 + 1);
    BOOL v64 = v45[16];
    SFAirDropSend.Transfer.id.getter(v61);
    __int128 v65 = v262;
    __int128 v66 = (char *)(v262 + 5);
    swift_beginAccess(v262 + 5, v265, 32LL, 0LL);
    __int128 v67 = v65[5];
    if (v67[2] && (__int128 v68 = sub_1003AD580((uint64_t)v37), (v69 & 1) != 0))
    {
      __int128 v70 = v67[7];
      __int128 v71 = v258;
      __int128 v72 = v243;
      sub_100396EBC(v70 + *(void *)(v258 + 72) * v68, v243);
      __int128 v73 = v72;
      __int128 v74 = v245;
      sub_1001A4B40(v73, v245, type metadata accessor for SDAirDropLegacySessionLogger.Transfer);
      swift_endAccess(v265);
      __int128 v75 = ((uint64_t (*)(char *, uint64_t))v260->info)(v37, v261);
      __int128 v76 = v257;
      if ((v64 & 1) == 0)
      {
        __int128 v77 = v259;
        *(void *)(v74 + v259[5]) = v63;
        *(void *)(v74 + v77[6]) = v62;
        __int128 v78 = (uint64_t)v253;
        __int128 v79 = v71;
        SFAirDropSend.Transfer.id.getter(v75);
        __int128 v80 = v254;
        sub_100396EBC(v74, v254);
        (*(void (**)(uint64_t, void, uint64_t, int *))(v79 + 56))(v80, 0LL, 1LL, v77);
        swift_beginAccess(v66, v265, 33LL, 0LL);
        sub_1002E5568(v80, v78);
        swift_endAccess(v265);
      }

      sub_100396F00(v74);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v76, v59);
    }

    else
    {
      swift_endAccess(v265);
      ((void (*)(char *, uint64_t))v260->info)(v37, v261);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v257, v59);
    }

    uint64_t v54 = v256;
    goto LABEL_80;
  }

  v121 = v57;
  if ((_DWORD)v57 != enum case for SFAirDrop.Progress.completed(_:))
  {
    v163 = v261;
    if ((_DWORD)v57 != enum case for SFAirDrop.Progress.notStarted(_:))
    {
      v177 = enum case for SFAirDrop.Progress.transferringIndeterminate(_:);
      v178 = *(void (**)(char *, uint64_t))(v42 + 8);
      v178(v257, v41);
      if (v121 != v177) {
        v178(v45, v41);
      }
      goto LABEL_80;
    }

    v164 = (uint64_t)v239;
    SFAirDropSend.Transfer.id.getter(v57);
    v165 = v262;
    v166 = (char *)(v262 + 5);
    swift_beginAccess(v262 + 5, v265, 32LL, 0LL);
    v167 = v165[5];
    v168 = v167[2];
    v231 = v41;
    if (v168)
    {
      v169 = sub_1003AD580(v164);
      v170 = v240;
      if ((v171 & 1) != 0)
      {
        v172 = v167[7];
        v173 = v258;
        sub_100396EBC(v172 + *(void *)(v258 + 72) * v169, v240);
        v174 = *(char **)(v173 + 56);
        v175 = v170;
        v176 = 0LL;
        goto LABEL_60;
      }

      v173 = v258;
      v174 = *(char **)(v258 + 56);
    }

    else
    {
      v173 = v258;
      v174 = *(char **)(v258 + 56);
      v170 = v240;
    }

    v175 = v170;
    v176 = 1LL;
LABEL_60:
    v180 = v259;
    v249 = v174;
    ((void (*)(uint64_t, uint64_t, uint64_t, int *))v174)(v175, v176, 1LL, v259);
    swift_endAccess(v265);
    info = (void (*)(uint64_t, uint64_t))v260->info;
    info(v164, v163);
    v182 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v173 + 48))(v170, 1LL, v180);
    v183 = sub_100187100(v170, &qword_10064DAA0);
    if (v182 == 1)
    {
      v256 = v54;
      v250 = (char *)v58;
      v260 = @"Send";
      v259 = (int *)@"Start";
      v184 = (uint64_t)v253;
      v255 = v42;
      v185 = SFAirDropSend.Transfer.id.getter(v183);
      v186 = v246;
      SFAirDrop.TransferIdentifier.id.getter(v185);
      info(v184, v163);
      v187 = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v247 + 8))(v186, v248);
      v188 = v233;
      v189 = v232;
      v190 = v234;
      v191 = (*(uint64_t (**)(char *, void, uint64_t))(v233 + 104))( v232,  enum case for SFNWInterfaceType.awdl(_:),  v234);
      SFNWInterfaceType.description.getter(v191);
      v193 = v192;
      (*(void (**)(char *, uint64_t))(v188 + 8))(v189, v190);
      v194 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v193);
      sub_10002FB54((uint64_t)v260, (uint64_t)v259, v187, (uint64_t)v194, 0.0);

      v196 = SFAirDropSend.Transfer.id.getter(v195);
      v197 = v254;
      Date.init()(v196);
      (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(v251 + 56))(v197 + v180[7], 1LL, 1LL, v252);
      *(void *)(v197 + v180[5]) = 0LL;
      *(void *)(v197 + v180[6]) = 0LL;
      ((void (*)(uint64_t, void, uint64_t, int *))v249)(v197, 0LL, 1LL, v180);
      swift_beginAccess(v166, v265, 33LL, 0LL);
      sub_1002E5568(v197, v184);
      swift_endAccess(v265);
      (*(void (**)(char *, uint64_t))(v255 + 8))(v257, v231);
      v198 = *(uint64_t *)((char *)v262
                        + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersInitiated);
      v199 = __OFADD__(v198, 1LL);
      v200 = (void *)(v198 + 1);
      if (v199)
      {
        __break(1u);
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }

      *(id *)((char *)v262 + OBJC_IVAR____TtC16DaemoniOSLibrary28SDAirDropLegacySessionLogger_transfersInitiated) = v200;
      uint64_t v58 = (uint64_t)v250;
      uint64_t v54 = v256;
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v42 + 8))(v257, v231);
    }

  __break(1u);
  return result;
}

              __break(1u);
              return result;
            }

            char v21 = v29;
          }
        }

  __break(1u);
  return result;
}

              __int128 v37 = 0;
              goto LABEL_47;
            }
          }
        }
      }

      goto LABEL_43;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_153;
      }
      if (v9 - v13 < v112)
      {
        if (__OFADD__(v13, v112)) {
          goto LABEL_155;
        }
        if (v13 + v112 >= v3) {
          __int128 v36 = v3;
        }
        else {
          __int128 v36 = v13 + v112;
        }
        if (v36 < v13) {
          goto LABEL_156;
        }
        if (v9 != v36)
        {
          __int128 v37 = (void *)(v10 + 16 * v9);
          do
          {
            uint64_t v38 = (uint64_t *)(v10 + 16 * v9);
            uint64_t v39 = *v38;
            id v40 = v38[1];
            __int16 v41 = v13;
            id v42 = v37;
            do
            {
              __int16 v43 = *(v42 - 2);
              unsigned int v44 = *(v42 - 1);
              __int16 v45 = v39 == v43 && v40 == v44;
              if (v45 || (_stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, v43, v44, 1LL) & 1) == 0) {
                break;
              }
              if (!v10) {
                goto LABEL_158;
              }
              uint64_t v39 = *v42;
              id v40 = v42[1];
              *(_OWORD *)id v42 = *((_OWORD *)v42 - 1);
              *(v42 - 1) = v40;
              *(v42 - 2) = v39;
              v42 -= 2;
              ++v41;
            }

            while (v9 != v41);
            ++v9;
            v37 += 2;
          }

          while (v9 != v36);
          uint64_t v9 = v36;
        }
      }
    }

    if (v9 < v13)
    {
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }

    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0) {
      uint64_t v11 = sub_1002FA994(0LL, *((void *)v11 + 2) + 1LL, 1, v11);
    }
    uint64_t v47 = *((void *)v11 + 2);
    uint64_t v46 = *((void *)v11 + 3);
    __int16 v12 = v47 + 1;
    if (v47 >= v46 >> 1) {
      uint64_t v11 = sub_1002FA994((char *)(v46 > 1), v47 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    uint64_t v48 = v11 + 32;
    uint64_t v49 = &v11[16 * v47 + 32];
    *(void *)uint64_t v49 = v13;
    *((void *)v49 + 1) = v9;
    if (v47) {
      break;
    }
    __int16 v12 = 1LL;
LABEL_15:
    uint64_t v3 = v113;
    if (v9 >= v113)
    {
      uint64_t v8 = v111;
      goto LABEL_120;
    }
  }

  v114 = v9;
  while (1)
  {
    uint64_t v50 = v12 - 1;
    if (v12 >= 4)
    {
      unint64_t v55 = &v48[16 * v12];
      unsigned int v56 = *((void *)v55 - 8);
      char v57 = *((void *)v55 - 7);
      unint64_t v61 = __OFSUB__(v57, v56);
      uint64_t v58 = v57 - v56;
      if (v61) {
        goto LABEL_137;
      }
      uint64_t v60 = *((void *)v55 - 6);
      int v59 = *((void *)v55 - 5);
      unint64_t v61 = __OFSUB__(v59, v60);
      uint64_t v53 = v59 - v60;
      uint64_t v54 = v61;
      if (v61) {
        goto LABEL_138;
      }
      char v62 = v12 - 2;
      uint64_t v63 = &v48[16 * v12 - 32];
      __int128 v65 = *(void *)v63;
      BOOL v64 = *((void *)v63 + 1);
      unint64_t v61 = __OFSUB__(v64, v65);
      __int128 v66 = v64 - v65;
      if (v61) {
        goto LABEL_140;
      }
      unint64_t v61 = __OFADD__(v53, v66);
      __int128 v67 = v53 + v66;
      if (v61) {
        goto LABEL_143;
      }
      if (v67 >= v58)
      {
        uint64_t v85 = &v48[16 * v50];
        v87 = *(void *)v85;
        uint64_t v86 = *((void *)v85 + 1);
        unint64_t v61 = __OFSUB__(v86, v87);
        id v88 = v86 - v87;
        if (v61) {
          goto LABEL_147;
        }
        __int128 v78 = v53 < v88;
        goto LABEL_105;
      }
    }

    else
    {
      if (v12 != 3)
      {
        __int128 v79 = *((void *)v11 + 4);
        __int128 v80 = *((void *)v11 + 5);
        unint64_t v61 = __OFSUB__(v80, v79);
        __int128 v72 = v80 - v79;
        __int128 v73 = v61;
        goto LABEL_99;
      }

      uint64_t v52 = *((void *)v11 + 4);
      uint64_t v51 = *((void *)v11 + 5);
      unint64_t v61 = __OFSUB__(v51, v52);
      uint64_t v53 = v51 - v52;
      uint64_t v54 = v61;
    }

    if ((v54 & 1) != 0) {
      goto LABEL_139;
    }
    char v62 = v12 - 2;
    __int128 v68 = &v48[16 * v12 - 32];
    __int128 v70 = *(void *)v68;
    __int128 v69 = *((void *)v68 + 1);
    __int128 v71 = __OFSUB__(v69, v70);
    __int128 v72 = v69 - v70;
    __int128 v73 = v71;
    if (v71) {
      goto LABEL_142;
    }
    __int128 v74 = &v48[16 * v50];
    __int128 v76 = *(void *)v74;
    __int128 v75 = *((void *)v74 + 1);
    unint64_t v61 = __OFSUB__(v75, v76);
    __int128 v77 = v75 - v76;
    if (v61) {
      goto LABEL_145;
    }
    if (__OFADD__(v72, v77)) {
      goto LABEL_146;
    }
    if (v72 + v77 >= v53)
    {
      __int128 v78 = v53 < v77;
LABEL_105:
      if (v78) {
        uint64_t v50 = v62;
      }
      goto LABEL_107;
    }

        __break(1u);
        goto LABEL_47;
      }

int64_t sub_1001036E4(id a1, id a2, id a3)
{
  id v4 = a3;
  DisplayName = (void *)SFNodeGetDisplayName(a2);
  uint64_t v6 = SFNodeGetDisplayName(v4);

  return (int64_t)_[DisplayName localizedCaseInsensitiveCompare:v6];
}

int64_t sub_100103734(id a1, id a2, id a3)
{
  id v4 = a3;
  DisplayName = (void *)SFNodeGetDisplayName(a2);
  uint64_t v6 = SFNodeGetDisplayName(v4);

  return (int64_t)_[DisplayName localizedCaseInsensitiveCompare:v6];
}

void sub_100104404( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10010442C(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v3 = WeakRetained;
    id v2 = objc_loadWeakRetained(WeakRetained + 32);
    [v2 nodeBrowser:v3 nodesChangedForParent:v3[2] protocol:v3[4] error:*((unsigned int *)v3 + 12)];

    id WeakRetained = v3;
  }
}

uint64_t sub_100106764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 16))(result, a3, a4);
  }
  return result;
}

uint64_t sub_1001067C0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  0LL,  *(unsigned int *)(a1 + 40));
}

void sub_100106898(uint64_t a1)
{
  if (dword_1006435F8 <= 50 && (dword_1006435F8 != -1 || _LogCategory_Initialize(&dword_1006435F8, 50LL))) {
    LogPrintF( &dword_1006435F8,  "-[SDAppleIDAgent _ensureEduModeDevicesAreCleanedUp]_block_invoke",  50LL,  "Keychainc cleanup tag %d < %d. Remove all items\n",  *(void *)(a1 + 48),  1);
  }
  uint64_t v2 = SFAppleIDRemoveAllCertificatesFromKeychain(*(void *)(a1 + 32));
  if ((_DWORD)v2)
  {
    if (dword_1006435F8 <= 60)
    {
      if (dword_1006435F8 != -1 || (uint64_t v4 = v2, v5 = _LogCategory_Initialize(&dword_1006435F8, 60LL), v2 = v4, v5)) {
        LogPrintF( &dword_1006435F8,  "-[SDAppleIDAgent _ensureEduModeDevicesAreCleanedUp]_block_invoke",  60LL,  "### SFAppleIDRemoveAllCertificatesFromKeychain failed with err=%#m\n",  v2);
      }
    }
  }

  else
  {
    uint64_t v3 = SFAppleIDRemoveAllKeysFromKeychain(*(void *)(a1 + 32));
    if ((_DWORD)v3)
    {
      if (dword_1006435F8 <= 60)
      {
        if (dword_1006435F8 != -1 || (uint64_t v6 = v3, v7 = _LogCategory_Initialize(&dword_1006435F8, 60LL), v3 = v6, v7)) {
          LogPrintF( &dword_1006435F8,  "-[SDAppleIDAgent _ensureEduModeDevicesAreCleanedUp]_block_invoke",  60LL,  "### SFAppleIDRemoveAllKeysFromKeychain failed with err=%#m\n",  v3);
        }
      }
    }

    else
    {
      id obj = *(id *)(a1 + 40);
      objc_sync_enter(obj);
      [*(id *)(a1 + 40) _setMetaInfoValue:&off_1005F7990 forKey:@"KeychainCleanupTag"];
      objc_sync_exit(obj);
    }
  }

void sub_100106A30( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

void sub_100106C38(uint64_t a1)
{
  id obj = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  [*(id *)(a1 + 32) _handlePeriodicVerifyTimerFired];
  objc_sync_exit(obj);
}

void sub_100106C80( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_100106FB0(uint64_t a1)
{
  id obj = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  [*(id *)(a1 + 32) _handleThrottledRetryTimerFired];
  objc_sync_exit(obj);
}

void sub_100106FF8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1001081A8(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  id v7 = *(id *)(a1 + 32);
  objc_sync_enter(v7);
  if ((_DWORD)a3)
  {
    if (dword_1006435F8 <= 60
      && (dword_1006435F8 != -1 || _LogCategory_Initialize(&dword_1006435F8, 60LL)))
    {
      LogPrintF( &dword_1006435F8,  "-[SDAppleIDAgent _handleInfoResponse:forAppleID:infoRequest:certificateSerialNumber:withError:completion:]_block_invoke",  60LL,  "### SFAppleIDParseValidationRecordData failed with error %#m\n",  a3);
    }

    uint64_t v14 = *(void *)(a1 + 64);
    if (v14) {
      goto LABEL_25;
    }
    goto LABEL_28;
  }

  if (([*(id *)(a1 + 40) isEqualToString:*(void *)(*(void *)(a1 + 32) + 24)] & 1) == 0)
  {
    uint64_t v14 = *(void *)(a1 + 64);
    if (v14)
    {
      a3 = 4294960587LL;
LABEL_25:
      NSErrorUserInfoKey v20 = NSLocalizedDescriptionKey;
      id v17 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  DebugGetErrorString(a3, 0LL, 0LL));
      uint64_t v18 = objc_claimAutoreleasedReturnValue(v17);
      unsigned int v13 = (void *)v18;
      uint64_t v19 = @"?";
      if (v18) {
        uint64_t v19 = (const __CFString *)v18;
      }
      char v21 = v19;
      uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v21,  &v20,  1LL));
      __int16 v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  (int)a3,  v3));
      char v16 = 0;
      uint64_t v11 = 0LL;
      goto LABEL_15;
    }

void sub_1001084D4(_Unwind_Exception *a1)
{
}

void sub_100109A9C(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 48LL));
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v8 description]);
    (*(void (**)(uint64_t, void *, id))(v6 + 16))(v6, v7, v5);
  }
}

uint64_t sub_100109B20(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, const __CFString *, void))(result + 16))(result, @"Done", 0LL);
  }
  return result;
}

uint64_t sub_100109B70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100109B88(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100109BA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100109BB8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(int *)(a1 + 40);
  if ((_DWORD)v2)
  {
    NSErrorUserInfoKey v9 = NSLocalizedDescriptionKey;
    uint64_t v3 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  DebugGetErrorString(v2, 0LL, 0LL));
    uint64_t v4 = objc_claimAutoreleasedReturnValue(v3);
    id v5 = (void *)v4;
    uint64_t v6 = @"?";
    if (v4) {
      uint64_t v6 = (const __CFString *)v4;
    }
    uint64_t v10 = v6;
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v10,  &v9,  1LL));
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v2,  v7));
    (*(void (**)(uint64_t, void, void *))(v1 + 16))(v1, 0LL, v8);
  }

  else
  {
    (*(void (**)(void, void, void))(v1 + 16))(*(void *)(a1 + 32), 0LL, 0LL);
  }

void sub_10010A5E8(_Unwind_Exception *a1)
{
}

uint64_t sub_10010A620(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = a4;
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = a2;
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = a3;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10010A64C(void *a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1[4] + 48LL));
  id v6 = v5;
  if (v6) {
    id v7 = 0LL;
  }
  else {
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Server Task Type: %d\nResponse Info: %@",  a1[6],  v9));
  }
  uint64_t v8 = a1[5];
  if (v8) {
    (*(void (**)(uint64_t, void *, id))(v8 + 16))(v8, v7, v6);
  }
}

void sub_10010A6FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(int *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  if ((_DWORD)v2)
  {
    NSErrorUserInfoKey v9 = NSLocalizedDescriptionKey;
    uint64_t v3 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  DebugGetErrorString(v2, 0LL, 0LL));
    uint64_t v4 = objc_claimAutoreleasedReturnValue(v3);
    id v5 = (void *)v4;
    id v6 = @"?";
    if (v4) {
      id v6 = (const __CFString *)v4;
    }
    uint64_t v10 = v6;
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v10,  &v9,  1LL));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v2,  v7));
    (*(void (**)(uint64_t, void, void *))(v1 + 16))(v1, 0LL, v8);
  }

  else
  {
    (*(void (**)(void, void, void))(v1 + 16))(*(void *)(a1 + 32), 0LL, 0LL);
  }

uint64_t sub_10010AC3C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_10010AC50(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  id v6 = *(id *)(a1 + 32);
  objc_sync_enter(v6);
  [*(id *)(a1 + 32) _handleFindPersonResponse:v7 forRequest:*(void *)(a1 + 40) emailOrPhone:*(void *)(a1 + 48) withError:v5 queue:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
  objc_sync_exit(v6);
}

void sub_10010ACCC(_Unwind_Exception *a1)
{
}

void sub_10010ACE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(int *)(a1 + 40);
  if ((_DWORD)v2)
  {
    NSErrorUserInfoKey v9 = NSLocalizedDescriptionKey;
    uint64_t v3 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  DebugGetErrorString(v2, 0LL, 0LL));
    uint64_t v4 = objc_claimAutoreleasedReturnValue(v3);
    id v5 = (void *)v4;
    id v6 = @"?";
    if (v4) {
      id v6 = (const __CFString *)v4;
    }
    uint64_t v10 = v6;
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v10,  &v9,  1LL));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v2,  v7));
    (*(void (**)(uint64_t, void, void *))(v1 + 16))(v1, 0LL, v8);
  }

  else
  {
    (*(void (**)(void, void, void))(v1 + 16))(*(void *)(a1 + 32), 0LL, 0LL);
  }

void sub_10010B5C0(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  id v6 = *(id *)(a1 + 32);
  objc_sync_enter(v6);
  [*(id *)(a1 + 32) _handleInfoResponse:v7 forAppleID:*(void *)(a1 + 40) infoRequest:*(void *)(a1 + 48) certificateSerialNumber:*(void *)(a1 + 56) withError:v5 completion:*(void *)(a1 + 64)];
  objc_sync_exit(v6);
}

void sub_10010B63C(_Unwind_Exception *a1)
{
}

uint64_t sub_10010B650(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_10010BA94(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  id v6 = *(id *)(a1 + 32);
  objc_sync_enter(v6);
  [*(id *)(a1 + 32) _handleReceivedCertificateToken:v7 privateKeyPersistentReference:v5 forAppleID:*(void *)(a1 + 40)];
  objc_sync_exit(v6);
}

void sub_10010BB08(_Unwind_Exception *a1)
{
}

void sub_10010BB1C(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  id v6 = *(id *)(a1 + 32);
  objc_sync_enter(v6);
  [*(id *)(a1 + 32) _handleReceivedIdentity:v7 forAppleID:*(void *)(a1 + 40) identityRequest:*(void *)(a1 + 48) withError:v5 completion:*(void *)(a1 + 56)];
  objc_sync_exit(v6);
}

void sub_10010BB94(_Unwind_Exception *a1)
{
}

uint64_t sub_10010BBA8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_10010C680(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = *(id *)(a1 + 32);
  objc_sync_enter(v3);
  [*(id *)(a1 + 32) _handleServerTaskCompletionWithError:v4];
  objc_sync_exit(v3);
}

void sub_10010C6D8(_Unwind_Exception *a1)
{
}

void sub_10010C6EC(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = *(id *)(a1 + 32);
  objc_sync_enter(v3);
  [*(id *)(a1 + 32) _handleServerTaskCompletionWithError:v4];
  objc_sync_exit(v3);
}

void sub_10010C744(_Unwind_Exception *a1)
{
}

void sub_10010C758(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = *(id *)(a1 + 32);
  objc_sync_enter(v3);
  [*(id *)(a1 + 32) _handleServerTaskCompletionWithError:v4];
  objc_sync_exit(v3);
}

void sub_10010C7B0(_Unwind_Exception *a1)
{
}

void sub_10010C7C4(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = *(id *)(a1 + 32);
  objc_sync_enter(v3);
  [*(id *)(a1 + 32) _handleServerTaskCompletionWithError:v4];
  objc_sync_exit(v3);
}

void sub_10010C81C(_Unwind_Exception *a1)
{
}

void sub_10010C830(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(id *)(a1 + 32);
  objc_sync_enter(v6);
  if ((_DWORD)a3)
  {
    if (dword_1006435F8 <= 60
      && (dword_1006435F8 != -1 || _LogCategory_Initialize(&dword_1006435F8, 60LL)))
    {
      LogPrintF( &dword_1006435F8,  "-[SDAppleIDAgent _verifyState]_block_invoke_5",  60LL,  "### SFAppleIDParseValidationRecordData failed with error %#m\n",  a3);
    }

    unsigned int v13 = *(void **)(a1 + 32);
    uint64_t v14 = v13[3];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_10010CA34;
    v17[3] = &unk_1005CB3E8;
    void v17[4] = v13;
    [v13 _requestInfoForAppleID:v14 completion:v17];
  }

  else
  {
    if (dword_1006435F8 <= 30
      && (dword_1006435F8 != -1 || _LogCategory_Initialize(&dword_1006435F8, 30LL)))
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identity]);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 appleID]);
      LogPrintF( &dword_1006435F8,  "-[SDAppleIDAgent _verifyState]_block_invoke_5",  30LL,  "Validation record for %{mask} is valid\n",  v8);
    }

    NSErrorUserInfoKey v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identity]);

    if (v9)
    {
      uint64_t v10 = *(void **)(a1 + 32);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identity]);
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472LL;
      v15[2] = sub_10010CAA0;
      void v15[3] = &unk_1005CE730;
      __int16 v12 = *(void **)(a1 + 40);
      v15[4] = *(void *)(a1 + 32);
      id v16 = v12;
      [v10 _checkIfAppleIDCertificateChainIsValidForIdentity:v11 completion:v15];
    }
  }

  objc_sync_exit(v6);
}

void sub_10010CA1C(_Unwind_Exception *a1)
{
}

void sub_10010CA34(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = *(id *)(a1 + 32);
  objc_sync_enter(v3);
  [*(id *)(a1 + 32) _handleServerTaskCompletionWithError:v4];
  objc_sync_exit(v3);
}

void sub_10010CA8C(_Unwind_Exception *a1)
{
}

void sub_10010CAA0(uint64_t a1, char a2, uint64_t a3)
{
  id obj = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  if ((a2 & 1) != 0)
  {
    if (dword_1006435F8 <= 30)
    {
      if (dword_1006435F8 != -1 || _LogCategory_Initialize(&dword_1006435F8, 30LL))
      {
        id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identity]);
        id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 appleID]);
        LogPrintF( &dword_1006435F8,  "-[SDAppleIDAgent _verifyState]_block_invoke_7",  30LL,  "Certificate chain for %{mask} is trusted\n",  v7);
      }

      if (dword_1006435F8 <= 30
        && (dword_1006435F8 != -1 || _LogCategory_Initialize(&dword_1006435F8, 30LL)))
      {
        LogPrintF(&dword_1006435F8, "-[SDAppleIDAgent _verifyState]_block_invoke_7", 30LL, "Agent state: all good.\n");
      }
    }

    __int16 v12 = *(void **)(a1 + 32);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v12 _setMetaInfoValue:v11 forKey:@"LastAllGoodDate"];
  }

  else
  {
    if (dword_1006435F8 <= 60
      && (dword_1006435F8 != -1 || _LogCategory_Initialize(&dword_1006435F8, 60LL)))
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identity]);
      NSErrorUserInfoKey v9 = (void *)objc_claimAutoreleasedReturnValue([v8 appleID]);
      LogPrintF( &dword_1006435F8,  "-[SDAppleIDAgent _verifyState]_block_invoke_7",  60LL,  "### Invalid certificate chain for %{mask}, error %#m\n",  v9,  a3);
    }

    uint64_t v10 = *(void **)(a1 + 32);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identity]);
    [v10 _handleUntrustedAppleIDCertificateChainForIdentity:v11];
  }

  objc_sync_exit(obj);
}

void sub_10010CC78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

void sub_10010CD08(uint64_t a1)
{
  id obj = *(id *)(a1 + 32);
  objc_sync_enter(obj);
  [*(id *)(a1 + 32) _verifyState];
  objc_sync_exit(obj);
}

void sub_10010CD50( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10010CE80(_Unwind_Exception *a1)
{
}

void sub_10010CF58( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10010D04C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (dword_1006435F8 <= 30 && (dword_1006435F8 != -1 || _LogCategory_Initialize(&dword_1006435F8, 30LL))) {
    LogPrintF( &dword_1006435F8,  "-[SDAppleIDAgent verifiedIdentityForEmailOrPhone:queue:completion:]_block_invoke",  30LL,  "Verified identity for %{mask}: %@\n",  *(void *)(a1 + 32),  v6);
  }
  SFMetricsLogUnexpectedEvent(3LL, 0LL, *(void *)(a1 + 32));
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10010D2A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10010D2BC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = 0LL;
  return result;
}

void sub_10010D2CC(uint64_t a1)
{
}

void sub_10010D2D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v9 = a3;
  if (v9
    && dword_1006435F8 <= 60
    && (dword_1006435F8 != -1 || _LogCategory_Initialize(&dword_1006435F8, 60LL)))
  {
    LogPrintF( &dword_1006435F8,  "-[SDAppleIDAgent verifiedIdentityForEmailOrPhone:]_block_invoke",  60LL,  "### copyCSIdentityForEmailOrPhone:queue:completion failed with error=%{error}\n",  v9);
  }

  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 4sub_10006796C((void *)&_mh_execute_header, v1, v2, "### Unexpected attempt type: %d", v3, v4, v5, v6, 0) = v5;
  id v8 = v5;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10010D8A4(_Unwind_Exception *a1)
{
}

void sub_10010D998(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if (v5)
  {
    if (dword_1006435F8 <= 90
      && (dword_1006435F8 != -1 || _LogCategory_Initialize(&dword_1006435F8, 90LL)))
    {
      LogPrintF( &dword_1006435F8,  "-[SDAppleIDAgent queryVerifiedIdentityForEmailOrPhone:queue:completion:]_block_invoke",  90LL,  "### FindPerson failed with error %@\n",  v5);
    }

    uint64_t v6 = 0LL;
    id v8 = 0LL;
    goto LABEL_24;
  }

  if (!v9)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  SFAppleIDErrorDomain,  201236LL,  0LL));
    if (dword_1006435F8 <= 90)
    {
      if (dword_1006435F8 != -1 || _LogCategory_Initialize(&dword_1006435F8, 90LL)) {
        LogPrintF( &dword_1006435F8,  "-[SDAppleIDAgent queryVerifiedIdentityForEmailOrPhone:queue:completion:]_block_invoke",  90LL,  "### FindPerson returned no person info object\n");
      }
      goto LABEL_23;
    }

    uint64_t v6 = 0LL;
LABEL_17:
    id v7 = 0LL;
    goto LABEL_5;
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v9 accountIdentifier]);
  if (!v6)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  SFAppleIDErrorDomain,  201237LL,  0LL));
    if (dword_1006435F8 <= 90)
    {
      if (dword_1006435F8 != -1 || _LogCategory_Initialize(&dword_1006435F8, 90LL)) {
        LogPrintF( &dword_1006435F8,  "-[SDAppleIDAgent queryVerifiedIdentityForEmailOrPhone:queue:completion:]_block_invoke",  90LL,  "### No account identifier in person info object\n");
      }
LABEL_23:
      uint64_t v6 = 0LL;
LABEL_24:
      id v7 = 0LL;
      goto LABEL_5;
    }

    goto LABEL_17;
  }

  id v7 = -[SDAppleIDVerifiedIdentity initWithAccountIdentifier:emailOrPhone:]( objc_alloc(&OBJC_CLASS___SDAppleIDVerifiedIdentity),  "initWithAccountIdentifier:emailOrPhone:",  v6,  *(void *)(a1 + 32));
  id v8 = 0LL;
LABEL_5:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10010DBF8(_Unwind_Exception *a1)
{
}

void sub_10010DC4C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10010DCBC(_Unwind_Exception *a1)
{
}

void sub_10010DD60(_Unwind_Exception *a1)
{
}

void sub_10010DDB4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10010DEB4(_Unwind_Exception *a1)
{
}

void sub_10010DF0C(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___SDAppleIDAgent);
  uint64_t v2 = (void *)gSDAppleIDAgent;
  gSDAppleIDAgent = v1;

  dispatch_queue_global_t global_queue = dispatch_get_global_queue(2LL, 0LL);
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  dispatch_async(v4, &stru_1005CE810);
}

void sub_10010DF68(id a1)
{
}

void sub_10010DFBC(_Unwind_Exception *a1)
{
}

void sub_10010E090(_Unwind_Exception *a1)
{
}

void sub_10010E0E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10010E138( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10010E18C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10010E1E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10010E234( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10010E348( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
}

void sub_10010E430( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void sub_10010E560( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

id sub_10010E644()
{
  if (qword_100657138 != -1) {
    dispatch_once(&qword_100657138, &stru_1005CE830);
  }
  os_log_t v0 = (id *)dlsym((void *)qword_100657140, "APSEnvironmentProduction");
  if (v0) {
    objc_storeStrong((id *)&qword_100657130, *v0);
  }
  off_100643668 = (uint64_t (*)())sub_10010E6BC;
  return (id)qword_100657130;
}

id sub_10010E6BC()
{
  return (id)qword_100657130;
}

void sub_10010E6C8(id a1)
{
  qword_100657140 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/ApplePushService.framework/ApplePushService", 2);
}

id sub_10010E6F0()
{
  if (qword_100657138 != -1) {
    dispatch_once(&qword_100657138, &stru_1005CE830);
  }
  os_log_t v0 = (id *)dlsym((void *)qword_100657140, "APSEnvironmentDevelopment");
  if (v0) {
    objc_storeStrong((id *)&qword_100657128, *v0);
  }
  off_100643670 = (uint64_t (*)())sub_10010E768;
  return (id)qword_100657128;
}

id sub_10010E768()
{
  return (id)qword_100657128;
}

Class sub_10010E774()
{
  if (qword_100657138 != -1) {
    dispatch_once(&qword_100657138, &stru_1005CE830);
  }
  Class result = objc_getClass("APSConnection");
  qword_100657148 = (uint64_t)result;
  off_100643678 = (uint64_t (*)())sub_10010E7D0;
  return result;
}

id sub_10010E7D0()
{
  return (id)qword_100657148;
}

void sub_10010ED78(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___SDAutoUnlockWiFiManager);
  uint64_t v2 = (void *)qword_100657150;
  qword_100657150 = (uint64_t)v1;
}

id sub_10010EE90(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _createWiFiObserver];
}

void sub_10010EF24(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v12) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Creating ranging manager", (uint8_t *)&v12, 2u);
  }

  id v4 = objc_alloc_init(&OBJC_CLASS___NISession);
  [*(id *)(a1 + 32) setNiSession:v4];

  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 niSession]);
  [v6 setDelegate:v5];

  uint64_t v8 = auto_unlock_log(v7);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) niSession]);
    uint64_t v11 = @"YES";
    if (!v10) {
      uint64_t v11 = @"NO";
    }
    int v12 = 138412290;
    unsigned int v13 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Created ranging manager %@",  (uint8_t *)&v12,  0xCu);
  }
}

id sub_10010F664(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) awdlInfo]);
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 queueAvailableHandler]);
    if (v4)
    {
      id v5 = (void *)v4;
LABEL_8:

      goto LABEL_9;
    }

    unsigned __int8 v6 = [*(id *)(a1 + 32) invalidated];

    if ((v6 & 1) != 0) {
      goto LABEL_9;
    }
LABEL_7:
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"));
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) awdlInfo]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queueAvailableHandler]);
    id v10 = objc_retainBlock(v9);
    [v2 handleFailureInMethod:v7, v8, @"SDAutoUnlockWiFiManager.m", 289, @"Invalid request params awdlInfo: %@ queueAvailableHandler: %@ invalidated: %d", v5, v10, objc_msgSend(*(id *)(a1 + 32), "invalidated") object file lineNumber description];

    goto LABEL_8;
  }

id sub_10010F854(uint64_t a1)
{
  return [*(id *)(a1 + 32) _cancelWiFiRequest:*(void *)(a1 + 40)];
}

id sub_10010F918(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setRangingPeer:*(void *)(a1 + 40)];
}

void sub_10010FC04( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_10010FC30(id *a1, char a2)
{
  uint64_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1[4] queue]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_10010FCE4;
  v7[3] = &unk_1005CE940;
  id v5 = a1[5];
  char v11 = a2;
  id v6 = a1[4];
  id v8 = v5;
  id v9 = v6;
  objc_copyWeak(&v10, a1 + 6);
  dispatch_async(v4, v7);

  objc_destroyWeak(&v10);
}

void sub_10010FCE4(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  if (v2 && (id v2 = [v2 invalidated], !(_DWORD)v2))
  {
    id v5 = *(void **)(a1 + 40);
    if (*(_BYTE *)(a1 + 56))
    {
      [v5 setAwdlStarting:1];
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
      [WeakRetained _startAWDLWithInfo:*(void *)(a1 + 32)];
    }

    else
    {
      [v5 _invalidateCurrentRequest];
    }
  }

  else
  {
    uint64_t v3 = auto_unlock_log(v2);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100112130();
    }
  }

void sub_100110988(uint64_t a1)
{
  id v2 = objc_alloc(&OBJC_CLASS____NIRangingPeerDistance);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentRequest]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 rangingPeer]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 niRangingPeer]);
  id v6 = -[_NIRangingPeerDistance initWithPeer:distanceMeters:initiator:shouldUnlock:]( v2,  "initWithPeer:distanceMeters:initiator:shouldUnlock:",  v5,  &off_1005F79C0,  1LL,  *(unsigned __int8 *)(a1 + 40));
  int v12 = v6;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v12, 1LL));

  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentRequest]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 rangingCompletedHandler]);

  if (v9)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentRequest]);
    char v11 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue([v10 rangingCompletedHandler]);
    ((void (**)(void, void *, void))v11)[2](v11, v7, 0LL);
  }
}

void sub_100110B68(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentRequest]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 rangingCompletedHandler]);

  if (v3)
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentRequest]);
    uint64_t v4 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue([v5 rangingCompletedHandler]);
    v4[2](v4, 0LL, *(void *)(a1 + 40));
  }

void sub_100110D44(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentRequest]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 rangingCompletedHandler]);

  if (v3)
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentRequest]);
    uint64_t v4 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue([v5 rangingCompletedHandler]);
    v4[2](v4, 0LL, *(void *)(a1 + 40));
  }

void sub_100111044(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v8 = (void *)objc_claimAutoreleasedReturnValue([a5 wiFiManager]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([a5 request]);
  uint64_t v10 = auto_unlock_log(v9);
  char v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = (void *)objc_claimAutoreleasedReturnValue([v9 identifier]);
    unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([v8 currentRequest]);
    int v14 = 136316418;
    __int16 v15 = "awdlNetworkStartCallback";
    __int16 v16 = 2112;
    uint64_t v17 = a3;
    __int16 v18 = 2112;
    uint64_t v19 = v9;
    __int16 v20 = 2112;
    char v21 = v12;
    __int16 v22 = 2112;
    uint64_t v23 = v13;
    __int16 v24 = 1024;
    int v25 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%s AWDL network started network: %@ request: %@ identifier: %@ currentRequest: %@ error: %d",  (uint8_t *)&v14,  0x3Au);
  }

  [v8 handleNetworkStarted:a3 request:v9 error:a2];
}

void sub_10011136C(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a4 wiFiManager]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([a4 request]);
  uint64_t v8 = auto_unlock_log(v7);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v7 identifier]);
    int v11 = 136315906;
    int v12 = "awdlStopNetworkCallback";
    __int16 v13 = 2112;
    int v14 = v7;
    __int16 v15 = 2112;
    __int16 v16 = v10;
    __int16 v17 = 1024;
    int v18 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%s AWDL Stop network request: %@ identifier: %@ error: %d",  (uint8_t *)&v11,  0x26u);
  }

  [v6 handleNetworkStoppedWithError:v7 error:a2];
}

void sub_1001117A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1001117E4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleAWDLTimerFired];
}

id sub_100111B24(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleNetworkStarted:*(void *)(a1 + 40) request:*(void *)(a1 + 48) error:*(void *)(a1 + 56)];
}

id sub_100111E28(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleNetworkStoppedWithError:*(void *)(a1 + 40) error:*(void *)(a1 + 48)];
}

void sub_100112130()
{
}

void sub_100112168()
{
}

void sub_100112194()
{
}

void sub_1001121C0()
{
}

void sub_1001121EC(void *a1, os_log_s *a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1 identifier]);
  int v5 = 136315650;
  uint8_t v6 = "-[SDAutoUnlockWiFiManager _startAWDLWithInfo:]";
  __int16 v7 = 2112;
  uint64_t v8 = a1;
  __int16 v9 = 2112;
  uint64_t v10 = v4;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "%s No AWDL interface request: %@ identifier: %@",  (uint8_t *)&v5,  0x20u);

  sub_100112120();
}

void sub_10011229C(void *a1, int a2, os_log_s *a3)
{
  uint8_t v6 = (void *)objc_claimAutoreleasedReturnValue([a1 identifier]);
  int v7 = 136315906;
  uint64_t v8 = "-[SDAutoUnlockWiFiManager _startAWDLWithInfo:]";
  __int16 v9 = 1024;
  int v10 = a2;
  __int16 v11 = 2112;
  int v12 = a1;
  __int16 v13 = 2112;
  int v14 = v6;
  _os_log_error_impl( (void *)&_mh_execute_header,  a3,  OS_LOG_TYPE_ERROR,  "%s Error starting AWDL %d request: %@ identifier: %@",  (uint8_t *)&v7,  0x26u);

  sub_100112120();
}

void sub_10011235C(uint64_t a1, os_log_s *a2)
{
  int v2 = 136315394;
  uint64_t v3 = "-[SDAutoUnlockWiFiManager _handleNetworkStarted:request:error:]";
  __int16 v4 = 2048;
  uint64_t v5 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "%s AWDL bring up failed (error: %ld)",  (uint8_t *)&v2,  0x16u);
}

uint64_t SDUnlockClassALongTermKeyRequestReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      uint64_t Data = PBReaderReadData(a2);
      uint64_t v19 = objc_claimAutoreleasedReturnValue(Data);
      __int16 v20 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose(va, 8) = v19;
    }

    else
    {
      if ((_DWORD)v12 == 2)
      {
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v15 = 0LL;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1LL || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v24 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
          v15 |= (unint64_t)(v24 & 0x7F) << v21;
          if ((v24 & 0x80) == 0) {
            goto LABEL_42;
          }
          v21 += 7;
          BOOL v9 = v22++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_44;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_44:
        uint64_t v26 = 16LL;
      }

      else
      {
        if ((_DWORD)v12 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result) {
            return result;
          }
          continue;
        }

        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0LL;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1LL || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v17 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0) {
            goto LABEL_38;
          }
          v13 += 7;
          BOOL v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_40;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_40:
        uint64_t v26 = 20LL;
      }

      *(_DWORD *)(a1 + v26) = v15;
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

__CFString *sub_100112D38(unint64_t a1)
{
  if (a1 >= 8) {
    return (__CFString *)(id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unknown (%ld)",  a1));
  }
  else {
    return off_1005CE9B0[a1];
  }
}

void sub_100112D88()
{
  id v0 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  kCFBooleanTrue,  @"LockDeviceNow"));
  MKBLockDevice();
}

SDContactFetchResult *sub_100112E28(uint64_t a1, void *a2, void *a3)
{
  id v22 = 0LL;
  char v4 = (void *)objc_claimAutoreleasedReturnValue([a2 enumeratorForChangeHistoryFetchRequest:a1 error:&v22]);
  id v5 = v22;
  unint64_t v6 = v5;
  if (v5)
  {
    uint64_t v7 = airdrop_log(v5);
    char v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      int v25 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Failed to get change history with error %@",  buf,  0xCu);
    }

    BOOL v9 = 0LL;
    if (a3) {
      *a3 = v6;
    }
  }

  else
  {
    int v10 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int16 v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "value", 0));
    id v12 = [v11 countByEnumeratingWithState:&v18 objects:v23 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v19;
      do
      {
        for (unint64_t i = 0LL; i != v13; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v14) {
            objc_enumerationMutation(v11);
          }
          -[NSMutableArray addObject:](v10, "addObject:", *(void *)(*((void *)&v18 + 1) + 8LL * (void)i));
        }

        id v13 = [v11 countByEnumeratingWithState:&v18 objects:v23 count:16];
      }

      while (v13);
    }

    BOOL v9 = objc_alloc_init(&OBJC_CLASS___SDContactFetchResult);
    -[SDContactFetchResult setEvents:](v9, "setEvents:", v10);
    unint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v4 currentHistoryToken]);
    -[SDContactFetchResult setCurrentHistoryToken:](v9, "setCurrentHistoryToken:", v16);
  }

  return v9;
}

NSMutableSet *sub_100113018(void *a1)
{
  id v1 = a1;
  int v2 = objc_opt_new(&OBJC_CLASS___NSMutableSet);
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v3 = v1;
  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        char v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * (void)v7), "identifier", (void)v10));
        -[NSMutableSet addObject:](v2, "addObject:", v8);

        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v5);
  }

  return v2;
}

id sub_10011313C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3 || (uint64_t v6 = v3, v4))
  {
    if (v3 || (uint64_t v6 = v4) == 0LL)
    {
      [v3 horizontalAngle];
      double v8 = v7;
      [v3 horizontalAngle];
      if (v8 >= 0.0) {
        double v10 = v9;
      }
      else {
        double v10 = -v9;
      }
      [v5 horizontalAngle];
      double v12 = v11;
      [v5 horizontalAngle];
      if (v12 < 0.0) {
        double v13 = -v13;
      }
      uint64_t v6 = v3;
      if (v10 >= v13)
      {
        [v3 horizontalAngle];
        double v15 = v14;
        [v3 horizontalAngle];
        if (v15 >= 0.0) {
          double v17 = v16;
        }
        else {
          double v17 = -v16;
        }
        [v5 horizontalAngle];
        double v19 = v18;
        [v5 horizontalAngle];
        if (v19 < 0.0) {
          double v20 = -v20;
        }
        uint64_t v6 = v5;
        if (v17 <= v20)
        {
          [v3 ptsScore];
          double v22 = v21;
          [v5 ptsScore];
          uint64_t v6 = v3;
          if (v22 <= v23)
          {
            [v3 ptsScore];
            double v25 = v24;
            [v5 ptsScore];
            if (v25 >= v26) {
              uint64_t v6 = v3;
            }
            else {
              uint64_t v6 = v5;
            }
          }
        }
      }
    }
  }

  id v27 = v6;

  return v27;
}

id sub_100113278()
{
  id v0 = (void *)SFNodeCopyRangingData();
  if ([v0 length])
  {
    id v2 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  objc_opt_class(&OBJC_CLASS___CURangingMeasurement, v1),  v0,  0LL);
    id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  }

  else
  {
    id v3 = 0LL;
  }

  return v3;
}

id sub_1001132E0(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = [a1 mutableCopy];
  [v4 addEntriesFromDictionary:v3];

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithDictionary:](&OBJC_CLASS___NSDictionary, "dictionaryWithDictionary:", v4));
  return v5;
}

void sub_100113F20( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100113F88( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100113FEC(uint64_t a1, os_log_s *a2)
{
  int v4 = *__error();
  int v5 = 136315394;
  uint64_t v6 = a1;
  __int16 v7 = 1024;
  int v8 = v4;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "SDAirDropClient: realpath(%s) failed with error %d",  (uint8_t *)&v5,  0x12u);
}

void sub_100114088( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100014820( (void *)&_mh_execute_header,  a2,  a3,  "SDAirDropClient: CFURLCreateFromFileSystemRepresentation(%s) returned NULL",  a5,  a6,  a7,  a8,  2u);
  sub_10001480C();
}

void sub_1001140EC(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "SDAirDropClient: internetLocationFile returned nil",  buf,  2u);
}

void sub_100114128()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "SDAirDropClient: copyUserFolder returned NULL",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_100114154()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "SDAirDropClient: CFURLCopyHostName returned NULL",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_100114180()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "SDAirDropClient: CFURLCreateWithFileSystemPathRelativeToBase returned NULL",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_1001141AC()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "SDAirDropClient: CFWriteStreamCreateWithFile returned NULL",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_1001141D8()
{
}

void sub_100114204( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10011426C()
{
}

void sub_100114298()
{
}

void sub_1001142C4()
{
}

void sub_1001142F0(const void *a1)
{
  CFErrorRef error = 0LL;
  if (sub_1001144B0((const __CFURL *)a1))
  {
    uint64_t v2 = CFGetAllocator(a1);
    CFDateRef v3 = CFDateCreate(v2, -534528000.0);
    uint64_t v4 = CFURLSetResourcePropertyForKey((CFURLRef)a1, kCFURLCreationDateKey, v3, &error);
    if (!(_DWORD)v4)
    {
      uint64_t v5 = airdrop_log(v4);
      uint8_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_100117344();
      }

      CFRelease(error);
    }

    CFErrorRef v7 = v3;
LABEL_17:
    CFRelease(v7);
    return;
  }

  theuint64_t Data = 0LL;
  int v8 = (const __CFString *)_kCFURLFinderInfoKey;
  uint64_t v9 = CFURLCopyResourcePropertyForKey((CFURLRef)a1, _kCFURLFinderInfoKey, &theData, &error);
  if (!(_DWORD)v9)
  {
    uint64_t v15 = airdrop_log(v9);
    double v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      sub_1001173A4();
    }

    CFErrorRef v7 = error;
    goto LABEL_17;
  }

  if (theData)
  {
    double v10 = CFGetAllocator(a1);
    MutableCopy = CFDataCreateMutableCopy(v10, 0LL, theData);
    *(void *)CFDataGetMutableBytePtr(MutableCopy) = 0x4D41435362726F6BLL;
    uint64_t v12 = CFURLSetResourcePropertyForKey((CFURLRef)a1, v8, MutableCopy, &error);
    if (!(_DWORD)v12)
    {
      uint64_t v13 = airdrop_log(v12);
      double v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        sub_100117430();
      }

      CFRelease(error);
    }

    CFRelease(MutableCopy);
    CFErrorRef v7 = theData;
    goto LABEL_17;
  }

  uint64_t v17 = airdrop_log(v9);
  double v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
    sub_100117404();
  }
}

BOOL sub_1001144B0(const __CFURL *a1)
{
  CFBooleanRef propertyValueTypeRefPtr = 0LL;
  if (CFURLCopyResourcePropertyForKey(a1, kCFURLIsDirectoryKey, &propertyValueTypeRefPtr, 0LL)) {
    BOOL v1 = propertyValueTypeRefPtr == 0LL;
  }
  else {
    BOOL v1 = 1;
  }
  return !v1 && CFBooleanGetValue(propertyValueTypeRefPtr) != 0;
}

id sub_10011450C(signed int a1)
{
  if (a1 < 1)
  {
    BOOL v1 = 0LL;
  }

  else
  {
    *(void *)CFDateRef v3 = 0LL;
    uint64_t v4 = 0LL;
    if_indextoname(a1, v3);
    BOOL v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v3));
  }

  return v1;
}

dispatch_time_t sub_100114580(double a1)
{
  return dispatch_time(0LL, (uint64_t)(a1 * 1000000000.0));
}

dispatch_source_s *sub_100114598(int a1, dispatch_queue_s *a2, void *a3)
{
  id v5 = a3;
  uint8_t v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, a2);
  if (a1) {
    int64_t v7 = 0LL;
  }
  else {
    int64_t v7 = 2147483647000000000LL;
  }
  dispatch_time_t v8 = dispatch_time(0LL, v7);
  dispatch_source_set_timer(v6, v8, 0x1DCD64FFC4653600uLL, 0LL);
  dispatch_source_set_event_handler(v6, v5);

  return v6;
}

void sub_100114638(dispatch_source_s *a1, dispatch_time_t a2)
{
  if (a1) {
    dispatch_source_set_timer(a1, a2, 0x1DCD64FFC4653600uLL, 0LL);
  }
}

dispatch_queue_global_t sub_100114658()
{
  return dispatch_get_global_queue(0LL, 0LL);
}

uint64_t sub_100114664()
{
  return pthread_mutex_unlock(&stru_1006436E0);
}

void sub_1001146A0(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a3) {
    CFRelease(a3);
  }
}

CFNumberRef sub_1001146D4(const __CFAllocator *a1, CFStringRef theString)
{
  if (!theString) {
    return 0LL;
  }
  *(_OWORD *)buffer = 0u;
  __int128 v6 = 0u;
  if (!CFStringGetCString(theString, buffer, 32LL, 0x8000100u)) {
    return 0LL;
  }
  uint64_t valuePtr = strtoll(buffer, 0LL, 0);
  return CFNumberCreate(a1, kCFNumberSInt64Type, &valuePtr);
}

__CFArray *sub_10011477C(const void *a1)
{
  uint64_t v2 = CFGetAllocator(a1);
  CFMutableStringRef Mutable = CFArrayCreateMutable(v2, 0LL, &kCFTypeArrayCallBacks);
  for (unint64_t i = CFURLCopyAbsoluteURL((CFURLRef)a1); ; unint64_t i = CFURLCreateCopyDeletingLastPathComponent(v2, i))
  {
    CFArrayAppendValue(Mutable, i);
    CFRelease(i);
    CFStringRef v5 = CFURLCopyFileSystemPath(i, kCFURLPOSIXPathStyle);
    if (v5)
    {
      CFStringRef v6 = v5;
      int v7 = CFEqual(v5, @"/");
      CFRelease(v6);
      if (v7) {
        break;
      }
    }
  }

  uint64_t Count = CFArrayGetCount(Mutable);
  uint64_t v9 = CFArrayCreateMutable(v2, Count, &kCFTypeArrayCallBacks);
  if (Count >= 1)
  {
    unint64_t v10 = Count + 1;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(Mutable, v10 - 2);
      CFArrayAppendValue(v9, ValueAtIndex);
      --v10;
    }

    while (v10 > 1);
  }

  CFRelease(Mutable);
  return v9;
}

CFTypeRef sub_10011488C(const __CFArray *a1)
{
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0LL;
  }
  CFIndex v3 = Count;
  uint64_t v4 = CFGetAllocator(a1);
  ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(a1, 0LL);
  CFURLRef PathComponent = CFURLCreateCopyDeletingLastPathComponent(v4, ValueAtIndex);
  CFTypeRef v7 = PathComponent;
  if (v3 != 1 && PathComponent)
  {
    for (CFIndex i = 1LL; i != v3; ++i)
    {
      uint64_t v9 = sub_10011477C(v7);
      unint64_t v10 = CFArrayGetValueAtIndex(a1, i);
      double v11 = sub_10011477C(v10);
      CFIndex v12 = CFArrayGetCount(v9);
      CFIndex v13 = CFArrayGetCount(v11);
      if (v12 >= v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = v12;
      }
      if (v14 >= 1)
      {
        CFIndex v15 = 0LL;
        while (1)
        {
          double v16 = CFArrayGetValueAtIndex(v9, v15);
          uint64_t v17 = CFArrayGetValueAtIndex(v11, v15);
          if (!CFEqual(v16, v17)) {
            break;
          }
          if (v14 == ++v15)
          {
            CFIndex v15 = v14;
            break;
          }
        }

        if (v15)
        {
          CFRelease(v7);
          double v18 = CFArrayGetValueAtIndex(v11, v15 - 1);
          CFTypeRef v7 = CFRetain(v18);
        }
      }

      CFRelease(v9);
      CFRelease(v11);
    }
  }

  return v7;
}

void *sub_1001149DC(const void *a1, const __CFURL *a2)
{
  uint64_t v4 = CFGetAllocator(a1);
  CFMutableStringRef Mutable = CFStringCreateMutable(v4, 0LL);
  CFStringRef v6 = CFArrayCreateMutable(v4, 0LL, &kCFTypeArrayCallBacks);
  CFStringRef v7 = CFURLCopyFileSystemPath(a2, kCFURLPOSIXPathStyle);
  CFStringRef v8 = CFURLCopyFileSystemPath((CFURLRef)a1, kCFURLPOSIXPathStyle);
  CFStringRef v9 = v8;
  if (v7 && v8)
  {
    unint64_t v10 = (const __CFString *)CFRetain(v8);
    if (CFEqual(v10, v7))
    {
      double v11 = v10;
LABEL_5:
      CFIndex v12 = v11;
      goto LABEL_9;
    }

    while (1)
    {
      double v22 = sub_100114BD8(v10);
      if (v22)
      {
        double v23 = v22;
        CFArrayAppendValue(v6, v22);
        CFRelease(v23);
      }

      CFStringRef v24 = sub_100114C24(v10);
      if (!v24) {
        break;
      }
      double v11 = v24;
      if (CFEqual(v24, @"/"))
      {
        CFRelease(v11);
        break;
      }

      CFRelease(v10);
      unint64_t v10 = v11;
      if (CFEqual(v11, v7)) {
        goto LABEL_5;
      }
    }

CFURLRef sub_100114BD8(const __CFString *a1)
{
  uint64_t v2 = CFGetAllocator(a1);
  uint64_t result = CFURLCreateWithFileSystemPath(v2, a1, kCFURLPOSIXPathStyle, 0);
  if (result)
  {
    uint64_t v4 = result;
    CFStringRef PathComponent = CFURLCopyLastPathComponent(result);
    CFRelease(v4);
    return (const __CFURL *)PathComponent;
  }

  return result;
}

CFStringRef sub_100114C24(const __CFString *a1)
{
  uint64_t v2 = CFGetAllocator(a1);
  CFIndex v3 = CFURLCreateWithFileSystemPath(v2, a1, kCFURLPOSIXPathStyle, 0);
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = v3;
  CFStringRef PathComponent = CFURLCreateCopyDeletingLastPathComponent(v2, v3);
  if (PathComponent)
  {
    CFStringRef v6 = PathComponent;
    CFStringRef v7 = CFURLCopyFileSystemPath(PathComponent, kCFURLPOSIXPathStyle);
    CFRelease(v6);
  }

  else
  {
    CFStringRef v7 = 0LL;
  }

  CFRelease(v4);
  return v7;
}

void *sub_100114CAC(const __CFString *a1)
{
  CFIndex Length = CFStringGetLength(a1);
  CFIndex v3 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  uint64_t v4 = malloc(v3);
  if (!CFStringGetCString(a1, (char *)v4, v3, 0x8000100u))
  {
    free(v4);
    return 0LL;
  }

  return v4;
}

id sub_100114D1C(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "aa_primaryAppleAccount"));

  return v2;
}

id sub_100114DC0(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    id v2 = objc_msgSend(v1, "bytes", 0, 0, 0, 0);
    CC_LONG v3 = [v1 length];

    CC_SHA256(v2, v3, (unsigned __int8 *)&v5);
    a1 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", &v5, 32LL));
  }

  return a1;
}

id sub_100114E70(void *a1)
{
  if (a1)
  {
    id v1 = sub_100114DC0(a1);
    id v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
    CC_LONG v3 = v2;
    if (v2) {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 base64EncodedStringWithOptions:0]);
    }
    else {
      uint64_t v4 = 0LL;
    }
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  return v4;
}

uint64_t sub_100114EC8(const __CFString *a1)
{
  id v2 = CFGetAllocator(a1);
  CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(v2, a1, 0x8000100u, 0);
  if (!ExternalRepresentation) {
    return 0LL;
  }
  CFDataRef v4 = ExternalRepresentation;
  id v5 = sub_100114E70(ExternalRepresentation);
  uint64_t v6 = objc_claimAutoreleasedReturnValue(v5);
  CFRelease(v4);
  return v6;
}

void *sub_100114F24(const __CFURL *a1)
{
  if (!a1) {
    return 0LL;
  }
  id v1 = CFURLCopyAbsoluteURL(a1);
  if (!v1) {
    return 0LL;
  }
  id v2 = v1;
  CC_LONG v3 = CFURLCopyFileSystemPath(v1, kCFURLPOSIXPathStyle);
  if (v3)
  {
    CFDataRef v4 = v3;
    id v5 = sub_100114CAC(v3);
    CFRelease(v4);
  }

  else
  {
    id v5 = 0LL;
  }

  CFRelease(v2);
  return v5;
}

uint64_t sub_100114F90(const __CFURL *a1, _OWORD *a2)
{
  CFBooleanRef propertyValueTypeRefPtr = 0LL;
  if (CFURLCopyResourcePropertyForKey(a1, kCFURLIsReadableKey, &propertyValueTypeRefPtr, 0LL)) {
    BOOL v4 = propertyValueTypeRefPtr == 0LL;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 0LL;
  }
  uint64_t result = CFBooleanGetValue(propertyValueTypeRefPtr);
  if ((_DWORD)result)
  {
    -[__CFURL fileSystemRepresentation](a1, "fileSystemRepresentation");
    __int128 v6 = a2[1];
    v7[0] = *a2;
    v7[1] = v6;
    return sandbox_check_by_audit_token(v7, "file-read-data", 1LL) == 0;
  }

  return result;
}

BOOL sub_10011502C(const __CFURL *a1)
{
  CFBooleanRef propertyValueTypeRefPtr = 0LL;
  if (CFURLCopyResourcePropertyForKey(a1, kCFURLIsWritableKey, &propertyValueTypeRefPtr, 0LL)) {
    BOOL v1 = propertyValueTypeRefPtr == 0LL;
  }
  else {
    BOOL v1 = 1;
  }
  return !v1 && CFBooleanGetValue(propertyValueTypeRefPtr) != 0;
}

uint64_t sub_100115088(const __CFURL *a1)
{
  uint64_t v5 = 0LL;
  CFErrorRef error = 0LL;
  uint64_t v1 = CFURLCopyResourcePropertyForKey(a1, kCFURLLocalizedNameKey, &v5, &error);
  if (!(_DWORD)v1)
  {
    uint64_t v2 = daemon_log(v1);
    CC_LONG v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1001174F0();
    }

    CFRelease(error);
  }

  return v5;
}

id sub_100115100()
{
  id v0 = (void *)SFNodeCopyProtocols();
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([v0 firstObject]);

  return v1;
}

id sub_100115134(void *a1, void *a2)
{
  id v3 = a1;
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 URLForDirectory:99 inDomain:1 appropriateForURL:v3 create:1 error:a2]);

  uint64_t v7 = daemon_log(v6);
  CFStringRef v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)) {
    sub_100117670();
  }

  if (v5)
  {
    unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
    double v11 = (void *)objc_claimAutoreleasedReturnValue([v10 UUIDString]);

    id v12 = v11;
    id v13 = [v12 UTF8String];
    if (!v13
      || (uint64_t v14 = objc_claimAutoreleasedReturnValue( +[NSURL fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:]( &OBJC_CLASS___NSURL,  "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:",  v13,  1LL,  v5))) == 0)
    {
      double v22 = 0LL;
      if (a2) {
        *a2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSPOSIXErrorDomain,  12LL,  0LL));
      }
      goto LABEL_27;
    }

    CFIndex v15 = (void *)v14;
    NSFileAttributeKey v29 = NSFileProtectionKey;
    NSFileProtectionType v30 = NSFileProtectionCompleteUntilFirstUserAuthentication;
    CFIndex v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v30,  &v29,  1LL));
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v15 absoluteURL]);
    CFIndex v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    unsigned int v19 = [v18 createDirectoryAtURL:v17 withIntermediateDirectories:0 attributes:v16 error:a2];

    if (v19)
    {
      id v21 = v17;
      double v22 = v21;
      if (!a2 || v21) {
        goto LABEL_26;
      }
      uint64_t v23 = daemon_log(0LL);
      CFStringRef v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_1001175B0();
      }
    }

    else
    {
      if (!a2 || *a2)
      {
        double v22 = 0LL;
LABEL_26:

LABEL_27:
        goto LABEL_28;
      }

      uint64_t v27 = daemon_log(v20);
      CFStringRef v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_100117610();
      }
    }

    double v22 = 0LL;
    *a2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSPOSIXErrorDomain,  12LL,  0LL));
    goto LABEL_26;
  }

  if (a2 && !*a2)
  {
    uint64_t v25 = daemon_log(v9);
    double v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      sub_100117550();
    }

    double v22 = 0LL;
    *a2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSPOSIXErrorDomain,  12LL,  0LL));
  }

  else
  {
    double v22 = 0LL;
  }

id sub_100115468()
{
  id v0 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 1uLL, 1);
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 firstObject]);

  if (!v2)
  {
    uint64_t v11 = daemon_log(v3);
    unint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_1001176DC();
    }
    id v7 = 0LL;
    BOOL v4 = 0LL;
    goto LABEL_8;
  }

  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([v2 stringByAppendingPathComponent:@"Sharing"]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  id v13 = 0LL;
  unsigned __int8 v6 = [v5 createDirectoryAtPath:v4 withIntermediateDirectories:1 attributes:0 error:&v13];
  id v7 = v13;

  if ((v6 & 1) == 0)
  {
    uint64_t v9 = daemon_log(v8);
    unint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_100117708();
    }
LABEL_8:
  }

  return v4;
}

void sub_100115580(void *a1)
{
  uint64_t v1 = a1;
  sub_1001155D4(v1, 0LL);
  uint64_t v2 = (const __CFURL *)objc_claimAutoreleasedReturnValue(-[__CFURL URLByDeletingLastPathComponent](v1, "URLByDeletingLastPathComponent"));

  sub_1001155D4(v2, 0LL);
}

BOOL sub_1001155D4(const __CFURL *a1, void *a2)
{
  if (CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024LL))
  {
    if (!removefile((const char *)buffer, 0LL, 1u))
    {
      int v4 = 0;
      return v4 == 0;
    }

    int v4 = *__error();
    if (!a2) {
      return v4 == 0;
    }
  }

  else
  {
    int v4 = 2;
    if (!a2) {
      return v4 == 0;
    }
  }

  if (v4)
  {
    *a2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSPOSIXErrorDomain,  v4,  0LL));
    int v4 = 1;
  }

  return v4 == 0;
}

CFURLRef sub_1001156C4(const __CFAllocator *a1, int a2)
{
  if (confstr(a2, __s, 0x400uLL))
  {
    size_t v4 = strlen(__s);
    return CFURLCreateFromFileSystemRepresentation(a1, (const UInt8 *)__s, v4, 1u);
  }

  else
  {
    uint64_t v6 = daemon_log(0LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_100117734(a2, v7);
    }

    return 0LL;
  }

id sub_100115790()
{
  uint64_t v0 = SFAirDropDownloadsURL();
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  uint64_t v2 = v1;
  if (v1) {
    id v3 = v1;
  }

  return v2;
}

BOOL sub_1001157C4(const __CFURL *a1, void *a2)
{
  if (CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024LL))
  {
    if (CFURLHasDirectoryPath(a1))
    {
      if (mkdir((const char *)buffer, 0x180u) < 0)
      {
LABEL_10:
        int v4 = *__error();
        if (!a2) {
          return v4 == 0;
        }
        goto LABEL_11;
      }
    }

    else
    {
      int v5 = open((const char *)buffer, 2564, 384LL);
      if (v5 < 0) {
        goto LABEL_10;
      }
      close(v5);
    }

    sub_1001142F0(a1);
    int v4 = 0;
    return v4 == 0;
  }

  int v4 = 2;
  if (!a2) {
    return v4 == 0;
  }
LABEL_11:
  if (v4)
  {
    *a2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSPOSIXErrorDomain,  v4,  0LL));
    int v4 = 1;
  }

  return v4 == 0;
}

BOOL sub_1001158E4(const __CFURL *a1, const __CFURL *a2, void *a3)
{
  if (CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024LL) && CFURLGetFileSystemRepresentation(a2, 1u, v8, 1024LL))
  {
    if (!rename((const char *)buffer, (const char *)v8))
    {
      int v6 = 0;
      return v6 == 0;
    }

    int v6 = *__error();
    if (!a3) {
      return v6 == 0;
    }
  }

  else
  {
    int v6 = 2;
    if (!a3) {
      return v6 == 0;
    }
  }

  if (v6)
  {
    *a3 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSPOSIXErrorDomain,  v6,  0LL));
    int v6 = 1;
  }

  return v6 == 0;
}

id sub_1001159F8(void *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  id v3 = [v1 copy];
  int v4 = (__CFString *)objc_claimAutoreleasedReturnValue([v3 pathExtension]);
  if ((-[__CFString isEqualToString:](v4, "isEqualToString:", &stru_1005E3958) & 1) == 0)
  {
    while (1)
    {
      PreferredIdentifierForTag = UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, v4, 0LL);
      CFDictionaryRef v6 = UTTypeCopyDeclaration(PreferredIdentifierForTag);
      if (!v6) {
        break;
      }
      CFDictionaryRef v7 = v6;
      -[NSMutableArray addObject:](v2, "addObject:", v4);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 stringByDeletingPathExtension]);

      CFRelease(v7);
      CFRelease(PreferredIdentifierForTag);

      int v4 = (__CFString *)objc_claimAutoreleasedReturnValue([v8 pathExtension]);
      id v3 = v8;
    }

    CFRelease(PreferredIdentifierForTag);
  }

  uint64_t v8 = v3;
LABEL_7:

  id v9 = [v8 mutableCopy];
  unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet whitespaceCharacterSet](&OBJC_CLASS___NSCharacterSet, "whitespaceCharacterSet"));
  uint64_t v11 = [v9 rangeOfCharacterFromSet:v10 options:4];
  uint64_t v13 = v12;

  if (v13)
  {
    uint64_t v14 = [v9 length];
    int64_t v15 = v14 - v11;
    CFIndex v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "substringWithRange:", v11, v14 - v11));
    uint64_t v17 = v16;
    if (v16
      && (int v18 = [v16 intValue], objc_msgSend(v17, "floatValue"), v18)
      && (v19 == (float)v18 ? (BOOL v20 = v18 == -2147483647) : (BOOL v20 = 1), !v20 ? (v21 = v18 == 0x7FFFFFFF) : (v21 = 1), !v21))
    {
      objc_msgSend(v9, "deleteCharactersInRange:", v11, v15);
      NSFileAttributeKey v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @" %ld", v18 + 1));
      [v9 appendString:v29];
    }

    else
    {
      [v9 appendString:@" 2"];
    }
  }

  else
  {
    [v9 appendString:@" 2"];
  }

  if (-[NSMutableArray count](v2, "count"))
  {
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    double v22 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray reverseObjectEnumerator](v2, "reverseObjectEnumerator"));
    id v23 = [v22 countByEnumeratingWithState:&v30 objects:v34 count:16];
    if (v23)
    {
      id v24 = v23;
      uint64_t v25 = *(void *)v31;
      do
      {
        for (CFIndex i = 0LL; i != v24; CFIndex i = (char *)i + 1)
        {
          if (*(void *)v31 != v25) {
            objc_enumerationMutation(v22);
          }
          uint64_t v27 = *(void *)(*((void *)&v30 + 1) + 8LL * (void)i);
          [v9 appendString:@"."];
          [v9 appendString:v27];
        }

        id v24 = [v22 countByEnumeratingWithState:&v30 objects:v34 count:16];
      }

      while (v24);
    }
  }

  return v9;
}

id sub_100115D18(void *a1, void *a2, _BYTE *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  uint64_t v9 = daemon_log(v8);
  unint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  uint64_t v11 = v10;
  if (v8)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v62 = v8;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Saving files to %@", buf, 0xCu);
    }

    uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v8 path]);
    unsigned __int8 v14 = [v12 fileExistsAtPath:v13];

    if ((v14 & 1) == 0)
    {
      id v60 = 0LL;
      unsigned __int8 v15 = [v12 createDirectoryAtURL:v8 withIntermediateDirectories:1 attributes:0 error:&v60];
      id v16 = v60;
      id v17 = v16;
      if ((v15 & 1) == 0)
      {
        uint64_t v44 = daemon_log(v16);
        __int16 v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
          sub_10011781C();
        }

        if (a4)
        {
          id v17 = v17;
          char v42 = 0;
          *a4 = v17;
        }

        else
        {
          char v42 = 0;
        }

BOOL sub_100116298(const __CFURL *a1, const __CFURL *a2, id *a3)
{
  BOOL v4 = sub_1001158E4(a1, a2, a3);
  BOOL v5 = v4;
  if (a3)
  {
    if (!v4)
    {
      CFDictionaryRef v6 = (void *)objc_claimAutoreleasedReturnValue([*a3 domain]);
      unsigned int v7 = [v6 isEqual:NSPOSIXErrorDomain];

      if (v7) {
        [*a3 code];
      }
    }
  }

  return v5;
}

__CFString *sub_100116304(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1 && (id v3 = (char *)sub_100114F24(v1)) != 0LL)
  {
    BOOL v4 = v3;
    bzero(v12, 0x1010uLL);
    uint64_t v5 = fsctl(v4, 0xD0107A0CuLL, v12, 0);
    if ((_DWORD)v5)
    {
      int v7 = v5;
      uint64_t v8 = browser_log(v5, v6);
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_100117898(v7, v9);
      }

      unint64_t v10 = 0LL;
    }

    else
    {
      unint64_t v10 = (__CFString *)CFStringCreateWithPascalString(0LL, v13, 0x8000100u);
    }

    free(v4);
  }

  else
  {
    unint64_t v10 = 0LL;
  }

  return v10;
}

id sub_100116428(void *a1)
{
  id v10 = 0LL;
  id v9 = 0LL;
  unsigned __int8 v1 = [a1 getResourceValue:&v10 forKey:NSURLVolumeNameKey error:&v9];
  id v2 = v10;
  id v3 = v9;
  uint64_t v5 = v3;
  if ((v1 & 1) == 0)
  {
    uint64_t v6 = browser_log(v3, v4);
    int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_100117934();
    }
  }

  return v2;
}

BOOL sub_1001164C4()
{
  uint64_t v0 = (const __CFBoolean *)qword_100657160;
  if (!qword_100657160)
  {
    int v1 = sub_10008E24C(@"DisableAWDL", 0LL);
    id v2 = &kCFBooleanTrue;
    if (!v1) {
      id v2 = &kCFBooleanFalse;
    }
    uint64_t v0 = *v2;
    qword_100657160 = (uint64_t)*v2;
  }

  return CFBooleanGetValue(v0) != 0;
}

id sub_100116524(void *a1, int a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a1 lowercaseString]);
  uint64_t v4 = v3;
  if (a2
    && (([v3 hasSuffix:@"@me.com"] & 1) != 0
     || [v4 hasSuffix:@"@mac.com"]))
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 componentsSeparatedByString:@"@"]);
    if ([v5 count])
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectAtIndexedSubscript:0]);
      id v7 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@@icloud.com", v6));
    }

    else
    {
      id v7 = 0LL;
    }
  }

  else
  {
    id v7 = v4;
  }

  return v7;
}

id sub_100116604(void *a1)
{
  id v1 = a1;
  active = (void *)CPPhoneNumberCopyActiveCountryCode();
  id v3 = (void *)PNCopyBestGuessNormalizedNumberForCountry(v1, active);

  if (v3)
  {
    uint64_t v4 = CFPhoneNumberCreate( 0LL,  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v3),  active);
    if (v4)
    {
      uint64_t v5 = (const void *)v4;
      uint64_t String = CFPhoneNumberCreateString(0LL, v4, 2LL);
      if (String)
      {
        id v7 = (void *)String;
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet characterSetWithCharactersInString:]( &OBJC_CLASS___NSCharacterSet,  "characterSetWithCharactersInString:",  @"+"));
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 stringByTrimmingCharactersInSet:v8]);
      }

      else
      {
        id v9 = 0LL;
      }

      CFRelease(v5);
    }

    else
    {
      id v9 = 0LL;
    }

    free(v3);
  }

  else
  {
    id v9 = 0LL;
  }

  return v9;
}

uint64_t sub_1001166FC(const __CFString *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unsigned int valuePtr = a2;
  id v3 = (const __CFString *)sub_10008E36C(a1);
  if (v3)
  {
    uint64_t v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
        if ((valuePtr & 0x80000000) == 0)
        {
LABEL_10:
          CFRelease(v4);
          return valuePtr;
        }
      }

      else
      {
        unsigned int valuePtr = v2;
        if ((v2 & 0x80000000) == 0) {
          goto LABEL_10;
        }
      }
    }

    else
    {
      CFTypeID v6 = CFGetTypeID(v4);
      CFTypeID TypeID = CFStringGetTypeID();
      Intuint64_t Value = v2;
      if (v6 == TypeID)
      {
        Intuint64_t Value = CFStringGetIntValue(v4);
        unsigned int valuePtr = IntValue;
      }

      if ((IntValue & 0x80000000) == 0) {
        goto LABEL_10;
      }
    }

    unsigned int valuePtr = v2;
    goto LABEL_10;
  }

  return v2;
}

id sub_1001167C0(void *a1)
{
  id v1 = a1;
  memset(&v16[1], 0, sizeof(audit_token_t));
  xpc_connection_get_audit_token();
  v16[0] = v16[1];
  uint64_t v2 = SecTaskCreateWithAuditToken(0LL, v16);
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = (void *)SecTaskCopyValueForEntitlement(v2, @"application-identifier", 0LL);
    if (v4)
    {
      CFTypeID v5 = v4;
      if ((unint64_t)[v4 length] < 0xB
        || [v5 characterAtIndex:10] != 46)
      {
        goto LABEL_19;
      }

      unint64_t v6 = 0LL;
      do
      {
        unsigned int v7 = [v5 characterAtIndex:v6];
        BOOL v9 = v7 - 65 < 0x1A || v7 - 48 < 0xA;
      }

      while (v9 && v6++ < 9);
      if (!v9
        || (id v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "substringWithRange:", 11, (char *)objc_msgSend(v5, "length") - 11))) == 0)
      {
LABEL_19:
        id v11 = v5;
      }
    }

    else
    {
      id v11 = 0LL;
    }

    CFRelease(v3);
  }

  else
  {
    uint64_t pid = xpc_connection_get_pid(v1);
    uint64_t v13 = daemon_log(pid);
    unsigned __int8 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_100117994(pid, v14);
    }

    id v11 = 0LL;
  }

  return v11;
}

CFStringRef sub_100116914()
{
  uint64_t v0 = (const __CFString *)CFPreferencesCopyValue( @"StreamID",  kCFPreferencesCurrentApplication,  kCFPreferencesCurrentUser,  kCFPreferencesCurrentHost);
  if (!v0)
  {
    id v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 UUIDString]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "substringWithRange:", 24, 12));
    uint64_t v0 = (const __CFString *)objc_claimAutoreleasedReturnValue([v3 lowercaseString]);

    CFPreferencesSetValue( @"StreamID",  v0,  kCFPreferencesCurrentApplication,  kCFPreferencesCurrentUser,  kCFPreferencesCurrentHost);
    uint64_t v4 = CFPreferencesSynchronize( kCFPreferencesCurrentApplication,  kCFPreferencesCurrentUser,  kCFPreferencesCurrentHost);
    uint64_t v6 = streams_log(v4, v5);
    unsigned int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315138;
      CStringPtr = CFStringGetCStringPtr(v0, 0x600u);
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Created new Stream ID (%s)",  (uint8_t *)&v9,  0xCu);
    }
  }

  return v0;
}

uint64_t sub_100116A94()
{
  id v11 = 0LL;
  uint64_t v0 = getifaddrs(&v11);
  if ((_DWORD)v0)
  {
    uint64_t v1 = airdrop_log(v0);
    uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_100117A34();
    }

    return 0LL;
  }

  else
  {
    BOOL v4 = sub_1001164C4();
    if (v4) {
      uint64_t v5 = "en0";
    }
    else {
      uint64_t v5 = "awdl0";
    }
    if (v4) {
      size_t v6 = 3LL;
    }
    else {
      size_t v6 = 5LL;
    }
    unsigned int v7 = v11;
    if (v11)
    {
      uint64_t v3 = 0LL;
      do
      {
        if (v7->ifa_addr->sa_family == 30)
        {
          ifa_name = v7->ifa_name;
          if (!strncasecmp(ifa_name, v5, v6)) {
            uint64_t v3 = if_nametoindex(ifa_name);
          }
        }

        unsigned int v7 = v7->ifa_next;
      }

      while (v7);
      int v9 = v11;
    }

    else
    {
      int v9 = 0LL;
      uint64_t v3 = 0LL;
    }

    freeifaddrs(v9);
  }

  return v3;
}

__CFString *sub_100116B8C(const __CFString *a1)
{
  uint64_t v2 = CFGetAllocator(a1);
  CFIndex Length = CFStringGetLength(a1);
  MutableCopy = CFStringCreateMutableCopy(v2, Length, a1);
  CFStringTrim(MutableCopy, @".");
  return MutableCopy;
}

CFMutableStringRef sub_100116BDC(const __CFAllocator *a1, CFStringRef theString)
{
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(a1, 0LL, theString);
  v4.length = CFStringGetLength(MutableCopy);
  v4.location = 0LL;
  CFStringFindAndReplace(MutableCopy, @"\, @"\\\, v4, 0LL);
  v5.length = CFStringGetLength(MutableCopy);
  v5.location = 0LL;
  CFStringFindAndReplace(MutableCopy, @".", @"\\.", v5, 0LL);
  return MutableCopy;
}

__CFString *sub_100116C5C(void *a1, void *a2, void *a3, int a4)
{
  unsigned int v7 = a1;
  uint64_t v8 = a2;
  int v9 = a3;
  id v10 = v9;
  id v11 = 0LL;
  if (v7 && v8 && v9)
  {
    memset(buffer, 0, sizeof(buffer));
    bzero(regtype, 0x3F1uLL);
    if (!CFStringGetCString(v8, regtype, 1009LL, 0x8000100u)) {
      goto LABEL_8;
    }
    bzero(domain, 0x3F1uLL);
    if (!CFStringGetCString(v10, domain, 1009LL, 0x8000100u)) {
      goto LABEL_8;
    }
    bzero(fullName, 0x3F1uLL);
    if (!a4)
    {
      id v11 = (__CFString *)CFStringCreateWithCString(0LL, fullName, 0x8000100u);
      goto LABEL_9;
    }

    CFMutableStringRef v13 = sub_100116BDC(0LL, v7);
    if (v13)
    {
      CFMutableStringRef v14 = v13;
      unsigned __int8 v15 = sub_100116B8C(v10);
      id v11 = (__CFString *)CFStringCreateWithFormat(0LL, 0LL, @"%@.%@%@", v14, v8, v15);
      CFRelease(v15);
      CFRelease(v14);
    }

    else
    {
LABEL_8:
      id v11 = 0LL;
    }
  }

__CFString *sub_100116E1C(uint64_t a1)
{
  uint64_t v1 = (__CFNetService *)_CFNetServiceCreateFromURL(0LL, a1);
  if (v1)
  {
    uint64_t v2 = v1;
    Domain = CFNetServiceGetDomain(v1);
    CFIndex Length = CFStringGetLength(Domain);
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0LL, Length, Domain);
    CFStringLowercase(MutableCopy, 0LL);
    CFStringTrim(MutableCopy, @".");
    CFRelease(v2);
  }

  else
  {
    CFMutableStringRef MutableCopy = 0LL;
  }

  return MutableCopy;
}

id sub_100116E94(uint64_t a1)
{
  uint64_t v1 = sub_100116E1C(a1);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  id v3 = [v2 isEqual:@"local"];

  return v3;
}

__CFDictionary *sub_100116ED4(unsigned int a1, const UInt8 *a2)
{
  CFMutableStringRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (a2)
  {
    CFStringRef v5 = CFStringCreateWithBytes(0LL, a2, a1, 0x8000100u, 0);
    if (v5)
    {
      size_t v6 = v5;
      unsigned int v7 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
      CFIndex Length = CFStringGetLength(v6);
      CFIndex v9 = Length - 1;
      if (Length < 1)
      {
        CFIndex v10 = Length - 1;
      }

      else
      {
        CFIndex v10 = Length - 1;
        do
        {
          uint64_t v11 = v9;
          int CharacterAtIndex = CFStringGetCharacterAtIndex(v6, v9--);
          if (CharacterAtIndex == 44)
          {
            if (v11 < 1) {
              goto LABEL_12;
            }
            char v13 = 0;
            uint64_t v14 = v11;
            while (CFStringGetCharacterAtIndex(v6, --v14) == 92)
            {
              ++v13;
              if (v14 <= 0)
              {
                char v13 = v11;
                break;
              }
            }

            if ((v13 & 1) == 0)
            {
LABEL_12:
              v31.location = v11 + 1;
              v31.length = v10 - v11;
              CFStringRef v15 = CFStringCreateWithSubstring(0LL, v6, v31);
              CFIndex v10 = v9;
              if (v15)
              {
                CFStringRef v16 = v15;
                CFArrayAppendValue(v7, v15);
                CFRelease(v16);
                CFIndex v10 = v9;
              }
            }
          }
        }

        while (v11 > 0);
        CFIndex v9 = -1LL;
      }

      v32.location = v9 + 1;
      v32.length = v10 - v9;
      CFStringRef v17 = CFStringCreateWithSubstring(0LL, v6, v32);
      if (v17)
      {
        CFStringRef v18 = v17;
        CFArrayAppendValue(v7, v17);
        CFRelease(v18);
      }

      CFIndex Count = CFArrayGetCount(v7);
      if (Count >= 1)
      {
        CFIndex v20 = Count;
        for (CFIndex i = 0LL; i != v20; ++i)
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v7, i);
          CFRange v23 = CFStringFind(ValueAtIndex, @"=", 0LL);
          if (v23.length >= 1)
          {
            v33.location = 0LL;
            v33.length = v23.location;
            CFStringRef v24 = CFStringCreateWithSubstring(0LL, ValueAtIndex, v33);
            if (v24)
            {
              uint64_t v25 = v24;
              CFIndex v26 = CFStringGetLength(ValueAtIndex);
              v34.length = v26 + ~CFStringGetLength(v25);
              v34.location = v23.location + 1;
              uint64_t v27 = CFStringCreateWithSubstring(0LL, ValueAtIndex, v34);
              if (v27)
              {
                id v28 = v27;
                CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0LL, 0LL, v27);
                v35.length = CFStringGetLength(MutableCopy);
                v35.location = 0LL;
                CFStringFindAndReplace(MutableCopy, @"\\,", @",", v35, 0LL);
                v36.length = CFStringGetLength(MutableCopy);
                v36.location = 0LL;
                CFStringFindAndReplace(MutableCopy, @"\\\, @"\, v36, 0LL);
                CFDictionarySetValue(Mutable, v25, MutableCopy);
                CFRelease(MutableCopy);
                CFRelease(v28);
              }

              CFRelease(v25);
            }
          }
        }
      }

      CFRelease(v7);
      CFRelease(v6);
    }
  }

  return Mutable;
}

void sub_1001171A8()
{
  else {
    uint64_t v0 = @"NO";
  }
  uint64_t v1 = v0;
  else {
    uint64_t v2 = @"NO";
  }
  id v3 = v2;
  else {
    CFRange v4 = @"NO";
  }
  CFStringRef v5 = v4;
  else {
    size_t v6 = @"NO";
  }
  unsigned int v7 = v6;
  uint64_t v8 = daemon_log(v7);
  CFIndex v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 138413314;
    uint64_t v11 = v3;
    __int16 v12 = 2112;
    char v13 = v5;
    __int16 v14 = 2112;
    CFStringRef v15 = v5;
    __int16 v16 = 2112;
    CFStringRef v17 = v1;
    __int16 v18 = 2112;
    float v19 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Device Capabilities (Auto Unlock:%@, Handoff:%@, Instant Hotspot:%@, AirDrop:%@, Remote Disc:%@)",  (uint8_t *)&v10,  0x34u);
  }
}

uint64_t sub_1001172E8()
{
  return ((uint64_t (*)(void))kCFTypeDictionaryKeyCallBacks.retain)();
}

uint64_t sub_1001172F8()
{
  return ((uint64_t (*)(void))kCFTypeDictionaryKeyCallBacks.release)();
}

BOOL sub_100117308(const __CFString *a1, const __CFString *a2)
{
  return CFStringCompare(a1, a2, 1uLL) == kCFCompareEqualTo;
}

  ;
}

void sub_100117338(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

void sub_100117344()
{
}

void sub_1001173A4()
{
}

void sub_100117404()
{
}

void sub_100117430()
{
}

void sub_100117490()
{
}

void sub_1001174F0()
{
}

void sub_100117550()
{
  sub_100014820( (void *)&_mh_execute_header,  v0,  v1,  "NSItemReplacementDirectory appropriateForURL:%@ returned nil error",  v2,  v3,  v4,  v5,  v6);
  sub_10001480C();
}

void sub_1001175B0()
{
}

void sub_100117610()
{
  sub_100014820((void *)&_mh_execute_header, v0, v1, "createDirectoryAtURL:%@ returned nil error", v2, v3, v4, v5, v6);
  sub_10001480C();
}

void sub_100117670()
{
}

void sub_1001176DC()
{
}

void sub_100117708()
{
}

void sub_100117734(int a1, os_log_s *a2)
{
  int v4 = *__error();
  uint64_t v5 = __error();
  uint8_t v6 = strerror(*v5);
  v7[0] = 67109634;
  v7[1] = a1;
  __int16 v8 = 1024;
  int v9 = v4;
  __int16 v10 = 2080;
  uint64_t v11 = v6;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "copyUserFolder: confstr(%d) failed with error %d (%s)",  (uint8_t *)v7,  0x18u);
}

void sub_1001177F0()
{
}

void sub_10011781C()
{
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  _os_log_error_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_ERROR,  "Failed to create folder %@ with error: %@",  v2,  0x16u);
  sub_10001480C();
}

void sub_100117898(int a1, os_log_s *a2)
{
  int v4 = *__error();
  v5[0] = 67109376;
  v5[1] = a1;
  __int16 v6 = 1024;
  int v7 = v4;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "This is not a valid AFP volume (FSCTL returned %d errno = %d)\n",  (uint8_t *)v5,  0xEu);
}

void sub_100117934()
{
}

void sub_100117994(uint64_t a1, os_log_s *a2)
{
  uint64_t v3 = NSPrintF("%#{pid}", a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  *(_DWORD *)buf = 138412290;
  uint8_t v6 = v4;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "SecTaskCreateWithAuditToken returned NULL for %@",  buf,  0xCu);
}

void sub_100117A34()
{
}

void sub_100117F28(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = streams_log(a1, a2);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint8_t v6 = @"NO";
    if (v2) {
      uint8_t v6 = @"YES";
    }
    *(_DWORD *)buf = 138412290;
    uint64_t v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "SDServiceManager: Accept Reply = %@", buf, 0xCu);
  }

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  _DWORD v7[2] = sub_100118040;
  v7[3] = &unk_1005CEB20;
  id v8 = *(id *)(a1 + 32);
  char v9 = v2;
  dispatch_async(&_dispatch_main_q, v7);
}

uint64_t sub_100118040(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 40));
}

void sub_100118178(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___SDDomainBrowser);
  int v2 = (void *)qword_100657170;
  qword_100657170 = (uint64_t)v1;
}

unsigned __int8 *sub_1001184F0(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = 0LL;
  while (1)
  {
    int v3 = *result;
    if (!*result || v3 == 46) {
      break;
    }
    uint64_t v4 = result + 1;
    if (v3 == 92)
    {
      int v5 = (char)*v4;
      if (*v4)
      {
        LOBYTE(sub_1000BA514( (void *)&_mh_execute_header,  v0,  v1,  "Failed to store keychain item (add status:%d, delete status:%d)",  v2, v3) = *v4;
        uint64_t v4 = result + 2;
        if ((v5 - 48) <= 9)
        {
          int v6 = (char)*v4;
          if ((v6 - 48) <= 9)
          {
            int v7 = (char)result[3];
            if ((v7 - 48) <= 9)
            {
              unsigned int v8 = 10 * v6 + 100 * v5 + v7 - 5328;
              if (!v8) {
                unsigned int v8 = 45;
              }
              if (v8 < 0x100)
              {
                LOBYTE(sub_1000BA514( (void *)&_mh_execute_header,  v0,  v1,  "Failed to store keychain item (add status:%d, delete status:%d)",  v2, v3) = v8;
                uint64_t v4 = result + 4;
              }
            }
          }
        }
      }

      else
      {
        LOBYTE(sub_1000BA514( (void *)&_mh_execute_header,  v0,  v1,  "Failed to store keychain item (add status:%d, delete status:%d)",  v2, v3) = 92;
      }
    }

    *(_BYTE *)(a2 + v2++) = v3;
    uint64_t result = v4;
    if (v2 == 64)
    {
      uint64_t result = 0LL;
      *(_BYTE *)(a2 + 63) = 0;
      return result;
    }
  }

  *(_BYTE *)(a2 + sub_10004D1BC((void *)&_mh_execute_header, v0, v1, "handleNewConnection unknown XPC error <%p>", v2) = 0;
  if (!v2) {
    return 0LL;
  }
  if (*result) {
    ++result;
  }
  return result;
}

CFComparisonResult sub_1001189F4(const __CFString *a1, const __CFString *a2)
{
  unsigned int v4 = sub_100118DA0(a1);
  unsigned int v5 = sub_100118DA0(a2);
  if (v4 == v5) {
    return CFStringCompare(a1, a2, 1uLL);
  }
  if (v4 > v5) {
    return 1LL;
  }
  return -1LL;
}

id sub_100118CA4(uint64_t a1)
{
  return [*(id *)(a1 + 32) postNotification];
}

uint64_t sub_100118DA0(const __CFString *a1)
{
  CFIndex Length = CFStringGetLength(a1);
  int v3 = (char *)malloc(Length + 1);
  CFStringGetCString(a1, v3, Length + 1, 0x8000100u);
  unsigned __int8 v4 = 0;
  v3[Length - 1] = 0;
  unsigned int v5 = (unsigned __int8 *)v3;
  do
  {
    if (!*v5) {
      break;
    }
    ++v4;
    unsigned int v5 = sub_1001184F0(v5, (uint64_t)v7);
  }

  while (v5);
  free(v3);
  return v4;
}

void sub_100118E5C(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "SDDomainBrowser: didNotSearch %@",  (uint8_t *)&v2,  0xCu);
}

void sub_100118F10(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___SDManagedBrowser);
  int v2 = (void *)qword_100657180;
  qword_100657180 = (uint64_t)v1;
}

id sub_10011906C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) buildNodesAndNotify];
}

uint64_t SDAuthenticationConfirmationReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 32) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_43;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_45;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_43:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_45:
        uint64_t v30 = 24LL;
        goto LABEL_54;
      case 2u:
        uint64_t String = PBReaderReadString(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(String);
        CFIndex v20 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v19;

        continue;
      case 3u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0LL;
        *(_BYTE *)(a1 + 32) |= 4u;
        while (2)
        {
          unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1LL || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v25 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v23 |= (unint64_t)(v25 & 0x7F) << v21;
            if (v25 < 0)
            {
              v21 += 7;
              BOOL v9 = v22++ >= 9;
              if (v9)
              {
                uint64_t v23 = 0LL;
                goto LABEL_49;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v23 = 0LL;
        }
LABEL_49:
        *(_BYTE *)(a1 + 2_Block_object_dispose(va, 8) = v23 != 0;
        continue;
      case 4u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 32) |= 1u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      unint64_t v28 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v28 == -1LL || v28 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v29 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
      v14 |= (unint64_t)(v29 & 0x7F) << v26;
      if ((v29 & 0x80) == 0) {
        goto LABEL_51;
      }
      v26 += 7;
      BOOL v9 = v27++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_53;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_51:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v14) = 0;
    }
LABEL_53:
    uint64_t v30 = 8LL;
LABEL_54:
    *(_DWORD *)(a1 + v3sub_10006796C((void *)&_mh_execute_header, v0, v1, "awdlInterfaceIndex: getifaddrs failed (%d)", v2, v3, v4, v5, 0) = v14;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10011A784(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "No default paired for device type", v1, 2u);
}

void sub_10011A7C4()
{
}

void sub_10011A828()
{
}

id sub_10011AAA4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _start];
}

void sub_10011AB44(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 && *(void *)(a1 + 40))
  {
    id v4 = v3;
    objc_msgSend(*(id *)(a1 + 32), "setAttemptError:");
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    id v3 = v4;
  }
}

void sub_10011AED4(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 32);
  if (a2)
  {
    [v3 setErrorType:4];
    id v4 = *(void **)(a1 + 32);
    uint64_t v5 = SFAutoUnlockErrorDomain;
    NSErrorUserInfoKey v9 = NSLocalizedDescriptionKey;
    int v10 = @"AWDL info exchange failed";
    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v10,  &v9,  1LL));
    unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v5,  103LL,  v6));
    [v4 notifyDelegateWithError:v7];
  }

  else
  {
    id v8 = (id)objc_claimAutoreleasedReturnValue([v3 delegate]);
    [v8 sessionDidSendInitialData:*(void *)(a1 + 32)];
  }

void sub_10011B000(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    [*(id *)(a1 + 32) setAttemptError:a2];
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = SFAutoUnlockErrorDomain;
    NSErrorUserInfoKey v7 = NSLocalizedDescriptionKey;
    id v8 = @"Proxy message failed";
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v8,  &v7,  1LL));
    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v4,  103LL,  v5));
    [v3 notifyDelegateWithError:v6];
  }

void sub_10011BFE0(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Missing AWDL Info", v1, 2u);
}

void sub_10011C020(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_fault_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_FAULT,  "Session missing device ID for encrypted send",  v1,  2u);
}

void sub_10011C060(uint64_t a1, os_log_s *a2)
{
  int v2 = 138477827;
  uint64_t v3 = a1;
  _os_log_debug_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_DEBUG,  "Ranging key data: %{private}@",  (uint8_t *)&v2,  0xCu);
}

uint64_t SDUnlockSetupSessionCreatedReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 64) |= 8u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_74;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_76;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_74:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_76:
        uint64_t v49 = 48LL;
        goto LABEL_101;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 64) |= 4u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1LL || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_80;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_80:
        uint64_t v49 = 32LL;
        goto LABEL_101;
      case 3u:
        uint64_t Data = PBReaderReadData(a2);
        uint64_t v23 = objc_claimAutoreleasedReturnValue(Data);
        uint64_t v24 = 40LL;
        goto LABEL_72;
      case 4u:
        uint64_t v25 = PBReaderReadData(a2);
        uint64_t v23 = objc_claimAutoreleasedReturnValue(v25);
        uint64_t v24 = 16LL;
        goto LABEL_72;
      case 5u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 64) |= 1u;
        while (2)
        {
          unint64_t v28 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v28 == -1LL || v28 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v29 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
            v14 |= (unint64_t)(v29 & 0x7F) << v26;
            if (v29 < 0)
            {
              v26 += 7;
              BOOL v9 = v27++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_84;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_84:
        uint64_t v49 = 8LL;
        goto LABEL_101;
      case 6u:
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 64) |= 2u;
        while (2)
        {
          unint64_t v32 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v32 == -1LL || v32 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v33 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v32);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v32 + 1;
            v14 |= (unint64_t)(v33 & 0x7F) << v30;
            if (v33 < 0)
            {
              v30 += 7;
              BOOL v9 = v31++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_88;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_88:
        uint64_t v49 = 12LL;
        goto LABEL_101;
      case 7u:
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0LL;
        *(_BYTE *)(a1 + 64) |= 0x40u;
        while (2)
        {
          unint64_t v37 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v37 == -1LL || v37 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v38 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37 + 1;
            v36 |= (unint64_t)(v38 & 0x7F) << v34;
            if (v38 < 0)
            {
              v34 += 7;
              BOOL v9 = v35++ >= 9;
              if (v9)
              {
                uint64_t v36 = 0LL;
                goto LABEL_92;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v36 = 0LL;
        }
LABEL_92:
        *(_BYTE *)(a1 + 6sub_10006796C((void *)&_mh_execute_header, v0, v1, "awdlInterfaceIndex: getifaddrs failed (%d)", v2, v3, v4, v5, 0) = v36 != 0;
        continue;
      case 8u:
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 64) |= 0x20u;
        while (2)
        {
          unint64_t v41 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v41 == -1LL || v41 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v42 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v41);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v41 + 1;
            v14 |= (unint64_t)(v42 & 0x7F) << v39;
            if (v42 < 0)
            {
              v39 += 7;
              BOOL v9 = v40++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_96;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_96:
        uint64_t v49 = 56LL;
        goto LABEL_101;
      case 9u:
        char v43 = 0;
        unsigned int v44 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 64) |= 0x10u;
        break;
      case 0xAu:
        uint64_t v47 = PBReaderReadData(a2);
        uint64_t v23 = objc_claimAutoreleasedReturnValue(v47);
        uint64_t v24 = 24LL;
LABEL_72:
        id v48 = *(void **)(a1 + v24);
        *(void *)(a1 + v24) = v23;

        continue;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      unint64_t v45 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v45 == -1LL || v45 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v46 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v45);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v45 + 1;
      v14 |= (unint64_t)(v46 & 0x7F) << v43;
      if ((v46 & 0x80) == 0) {
        goto LABEL_98;
      }
      v43 += 7;
      BOOL v9 = v44++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_100;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_98:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v14) = 0;
    }
LABEL_100:
    uint64_t v49 = 52LL;
LABEL_101:
    *(_DWORD *)(a1 + v49) = v14;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_10011DA38(uint64_t a1)
{
  return [*(id *)(a1 + 32) _unpublish];
}

id sub_10011DA98(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 16LL) = 1;
  return _[*(id *)(a1 + 32) handleClosedConnection];
}

id sub_10011DD10(uint64_t a1)
{
  return [*(id *)(a1 + 32) stop];
}

void sub_10011E32C(uint64_t a1, void *a2)
{
  id v4 = a2;
  objc_msgSend(v4, "setSf_transferState:", 3);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 120) objectForKeyedSubscript:kSFOperationTotalBytesKey]);
  objc_msgSend(v4, "setTotalUnitCount:", objc_msgSend(v3, "longLongValue"));

  [v4 setCompletedUnitCount:0];
}

void sub_10011E3A4(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (![v6 totalUnitCount])
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 120) objectForKeyedSubscript:kSFOperationTotalBytesKey]);
    objc_msgSend(v6, "setTotalUnitCount:", objc_msgSend(v3, "longLongValue"));
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 120) objectForKeyedSubscript:kSFOperationBytesCopiedKey]);
  objc_msgSend(v6, "setCompletedUnitCount:", objc_msgSend(v4, "longLongValue"));

  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 120) objectForKeyedSubscript:kSFOperationTimeRemainingKey]);
  [v6 setUserInfoObject:v5 forKey:NSProgressEstimatedTimeRemainingKey];
}

void sub_10011E480(id a1, NSProgress *a2)
{
}

void sub_10011E48C(id a1, NSProgress *a2)
{
}

void sub_10011E498(uint64_t a1, void *a2)
{
  int v2 = *(void **)(*(void *)(a1 + 32) + 120LL);
  uint64_t v3 = kSFOperationErrorKey;
  id v4 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v6 localizedDescription]);
  objc_msgSend(v4, "sf_failedWithError:", v5);
}

void sub_10011E628(id a1)
{
  v3[0] = kSFOperationConvertMediaFormatsKey;
  v4[0] = objc_opt_class(&OBJC_CLASS___NSNumber);
  v3[1] = kSFOperationFileBomPathKey;
  v4[1] = objc_opt_class(&OBJC_CLASS___NSString);
  _DWORD v3[2] = kSFOperationFileIsDirectoryKey;
  _DWORD v4[2] = objc_opt_class(&OBJC_CLASS___NSNumber);
  void v3[3] = kSFOperationFileNameKey;
  void v4[3] = objc_opt_class(&OBJC_CLASS___NSString);
  v3[4] = kSFOperationtFileSubTypeKey;
  v4[4] = objc_opt_class(&OBJC_CLASS___NSString);
  void v3[5] = kSFOperationFileTypeKey;
  void v4[5] = objc_opt_class(&OBJC_CLASS___NSString);
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  6LL));
  int v2 = (void *)qword_100657190;
  qword_100657190 = v1;
}

uint64_t sub_10011FB2C(uint64_t a1)
{
  return IOPMAssertionRelease(*(_DWORD *)(a1 + 32));
}

id sub_10012047C(uint64_t a1)
{
  return [*(id *)(a1 + 32) silentlyCancelRequest];
}

id sub_100120500(id a1, id a2)
{
  id v2 = a2;
  uint64_t v3 = objc_opt_class(&OBJC_CLASS___NSURL);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
  {
    id v4 = v2;
  }

  else
  {
    uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSString);
    if ((objc_opt_isKindOfClass(v2, v5) & 1) == 0)
    {
      id v7 = 0LL;
      id v6 = 0LL;
      goto LABEL_10;
    }

    id v4 = (id)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:relativeToURL:](&OBJC_CLASS___NSURL, "URLWithString:relativeToURL:", v2, 0LL));
  }

  id v6 = v4;
  id v7 = (id)objc_claimAutoreleasedReturnValue([v4 scheme]);
  if (v7)
  {
    char v8 = (void *)objc_claimAutoreleasedReturnValue([v6 scheme]);
    int IsSupported = SFAirDropUrlSchemeIsSupported();

    if (IsSupported)
    {
      id v7 = v6;
      id v6 = v7;
    }

    else
    {
      id v7 = 0LL;
    }
  }

id sub_10012127C(uint64_t a1)
{
  return [*(id *)(a1 + 32) notifyClientForEvent:2];
}

id sub_100121694(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 handleReadStreamEvent:a1 event:a2];
}

void sub_1001219F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100121A18(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained startPublishingProgressForPlaceholderFiles:v3];
}

CFURLRef sub_100122038(uint64_t a1)
{
  uint64_t result = (const __CFURL *)_CFHTTPServerRequestCopyProperty(a1, _kCFHTTPServerRequestURL);
  if (result)
  {
    id v2 = result;
    CFStringRef v3 = CFURLCopyStrictPath(result, 0LL);
    CFRelease(v2);
    return (const __CFURL *)v3;
  }

  return result;
}

void sub_1001224F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_100122520(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sub_10006796C((void *)&_mh_execute_header, v0, v1, "awdlInterfaceIndex: getifaddrs failed (%d)", v2, v3, v4, v5, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_10006796C((void *)&_mh_execute_header, v0, v1, "awdlInterfaceIndex: getifaddrs failed (%d)", v2, v3, v4, v5, 0) = 0LL;
  return result;
}

void sub_100122530(uint64_t a1)
{
}

void sub_100122538(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001225B8;
  block[3] = &unk_1005CECA8;
  block[6] = *(void *)(a1 + 48);
  dispatch_async(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 56LL), block);
}

void sub_1001225B8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 208LL));
  if (WeakRetained)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (*(void *)(v3 + 144))
    {

      goto LABEL_5;
    }

    int v4 = *(unsigned __int8 *)(v3 + 11);

    if (v4)
    {
LABEL_5:
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 120) objectForKeyedSubscript:kSFOperationFilesKey]);
      id v6 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 120) objectForKeyedSubscript:kSFOperationItemsKey]);
      id v7 = [v5 count];
      BOOL v8 = v7 == 0LL;
      if (v7) {
        BOOL v9 = v5;
      }
      else {
        BOOL v9 = v6;
      }
      if (v8) {
        int v10 = @"%lu items";
      }
      else {
        int v10 = @"%lu files";
      }
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  v10,  [v9 count]));
      uint64_t v12 = airdrop_log(v11);
      unsigned int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        unsigned int v35 = v11;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Received Upload request for %@", buf, 0xCu);
      }

      [*(id *)(a1 + 32) storeRequestValue:*(void *)(a1 + 48) forKey:@"Content-Type" convertToNumber:0];
      [*(id *)(a1 + 32) storeRequestValue:*(void *)(a1 + 48) forKey:kSFOperationTotalBytesKey convertToNumber:1];
      id v14 = [*(id *)(a1 + 32) thereIsEnoughFreeSpace];
      if ((_DWORD)v14)
      {
        uint64_t v15 = *(void *)(a1 + 48);
        char v16 = *(void **)(a1 + 32);
        uint64_t v17 = *(void *)(*(void *)(a1 + 40) + 8LL);
        id obj = *(id *)(v17 + 40);
        unsigned __int8 v18 = [v16 startReceivingFile:v15 error:&obj];
        objc_storeStrong((id *)(v17 + 40), obj);
        if ((v18 & 1) != 0) {
          goto LABEL_31;
        }
        [*(id *)(*(void *)(a1 + 32) + 120) setObject:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) forKeyedSubscript:kSFOperationErrorKey];
        unsigned int v19 = *(void **)(a1 + 32);
        uint64_t v20 = 500LL;
      }

      else
      {
        uint64_t v25 = airdrop_log(v14);
        char v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
          sub_1001249C0();
        }

        id v27 = sub_100036584(-2, 0LL);
        uint64_t v28 = objc_claimAutoreleasedReturnValue(v27);
        uint64_t v29 = *(void *)(*(void *)(a1 + 40) + 8LL);
        char v30 = *(void **)(v29 + 40);
        *(void *)(v29 + 4sub_10006796C((void *)&_mh_execute_header, v0, v1, "awdlInterfaceIndex: getifaddrs failed (%d)", v2, v3, v4, v5, 0) = v28;

        [*(id *)(*(void *)(a1 + 32) + 120) setObject:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) forKeyedSubscript:kSFOperationErrorKey];
        if ([*(id *)(a1 + 32) oneHundredContinue:*(void *)(a1 + 48)])
        {
          buf[0] = 0;
          CFDataRef v31 = CFDataCreate(0LL, buf, 1LL);
          else {
            CFDataRef v32 = v31;
          }
          [*(id *)(a1 + 32) enqueueResponse:*(void *)(a1 + 48) code:417 body:v32];
          CFRelease(v31);
          goto LABEL_31;
        }

        unsigned int v19 = *(void **)(a1 + 32);
        uint64_t v20 = 507LL;
      }

      [v19 sendUploadResponse:v20];
LABEL_31:

      return;
    }
  }

  id v21 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 208LL));

  if (v21)
  {
    uint64_t v23 = airdrop_log(v22);
    uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      sub_100124994();
    }

    [*(id *)(a1 + 32) enqueueResponse:*(void *)(a1 + 48) code:400 body:0];
  }

id sub_100122A24(uint64_t a1)
{
  return [*(id *)(a1 + 32) notifyClientForEvent:7];
}

void sub_100122AF0(uint64_t a1)
{
  uint64_t v2 = kSFOperationTotalBytesKey;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 120) objectForKeyedSubscript:kSFOperationTotalBytesKey]);
  uint64_t v4 = (uint64_t)[v3 longLongValue];

  if (!v4)
  {
    uint64_t v4 = 128LL;
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", 128LL));
    [*(id *)(*(void *)(a1 + 32) + 120) setObject:v5 forKeyedSubscript:v2];
  }

  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(dispatch_queue_s **)(v6 + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100122D2C;
  block[3] = &unk_1005CB2F8;
  void block[4] = v6;
  dispatch_async(v7, block);
  BOOL v8 = *(void **)(a1 + 32);
  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v4 / 5));
  [v8 notifyClientOfBytesCopied:v9 timeRemaining:&off_1005F79D8];

  int v10 = *(void **)(a1 + 32);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", 2 * v4 / 5));
  [v10 notifyClientOfBytesCopied:v11 timeRemaining:&off_1005F79D8];

  uint64_t v12 = *(void **)(a1 + 32);
  unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", 3 * v4 / 5));
  [v12 notifyClientOfBytesCopied:v13 timeRemaining:&off_1005F79D8];

  id v14 = *(void **)(a1 + 32);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", 4 * v4 / 5));
  [v14 notifyClientOfBytesCopied:v15 timeRemaining:&off_1005F79F0];

  char v16 = *(void **)(a1 + 32);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v4));
  [v16 notifyClientOfBytesCopied:v17 timeRemaining:&off_1005F79F0];

  uint64_t v18 = *(void *)(a1 + 32);
  unsigned int v19 = *(dispatch_queue_s **)(v18 + 56);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  void v20[2] = sub_100122D38;
  v20[3] = &unk_1005CB2F8;
  v20[4] = v18;
  dispatch_async(v19, v20);
}

id sub_100122D2C(uint64_t a1)
{
  return [*(id *)(a1 + 32) notifyClientForEvent:5];
}

id sub_100122D38(uint64_t a1)
{
  return [*(id *)(a1 + 32) notifyClientForEvent:9];
}

id sub_100123750(void *a1, uint64_t a2)
{
  return _[a1 didReceiveError:a2];
}

id sub_100123758(void *a1, uint64_t a2)
{
  return _[a1 didReceiveRequest:a2];
}

id sub_100123760(void *a1, uint64_t a2, uint64_t a3)
{
  return _[a1 didSendResponse:a3 forRequest:a2];
}

void sub_1001237C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 32))
  {
    *(_BYTE *)(v2 + 11) = 1;
    [*(id *)(a1 + 32) sendAskResponse:200];
    [*(id *)(a1 + 32) notifyClientForEvent:6];
  }

  else
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSPOSIXErrorDomain,  1LL,  0LL));
    [*(id *)(*(void *)(a1 + 32) + 120) setObject:v3 forKeyedSubscript:kSFOperationErrorKey];
    [*(id *)(a1 + 32) sendAskResponse:500];
  }

void sub_100123BB0()
{
}

void sub_100123C10()
{
}

void sub_100123C3C()
{
}

void sub_100123C9C()
{
}

void sub_100123D04(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  uint64_t v5 = (objc_class *)objc_opt_class(a1);
  uint8_t v6 = NSStringFromClass(v5);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  int v9 = 138412546;
  int v10 = v7;
  __int16 v11 = 2112;
  uint64_t v12 = a2;
  sub_100038BF8( (void *)&_mh_execute_header,  a3,  v8,  "SDAirDropConnection: unexpected class %@ for file info key %@",  (uint8_t *)&v9);
}

void sub_100123DAC()
{
}

void sub_100123DD8()
{
}

void sub_100123E38()
{
}

void sub_100123E98()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "SDAirDropConnection: _CFHTTPServerRequestCopyProperty returned NULL",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_100123EC4()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "SDAirDropConnection: CFURLCreateStringByReplacingPercentEscapes returned NULL",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_100123EF0()
{
}

void sub_100123F1C()
{
}

void sub_100123F7C()
{
}

void sub_100123FDC()
{
}

void sub_10012403C()
{
}

void sub_10012409C()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "SDAirDropConnection: createCGImageWithJPEG2000Data returned NULL",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_1001240C8()
{
}

void sub_1001240F4()
{
}

void sub_100124154()
{
}

void sub_100124180()
{
}

void sub_1001241AC()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "SDAirDropConnection: _SDHashStringFromData returned NULL",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_1001241D8()
{
}

void sub_100124204()
{
  sub_100014820( (void *)&_mh_execute_header,  v0,  v1,  "SDAirDropConnection,createPersonForAskRequest: validAirDropID(%@) returned NO",  v2,  v3,  v4,  v5,  v6);
  sub_10001480C();
}

void sub_100124264()
{
}

void sub_1001242C4()
{
}

void sub_1001242F0()
{
}

void sub_100124350()
{
  sub_100014820( (void *)&_mh_execute_header,  v0,  v1,  "SDAirDropConnection: copyCertificateChainFromTrust returned %s array",  v2,  v3,  v4,  v5,  v6);
  sub_10001480C();
}

void sub_1001243C8()
{
}

void sub_1001243F4( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10012445C( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000147D0( (void *)&_mh_execute_header,  a2,  a3,  "SDAirDropConnection: client cert chain not trusted. SFAppleIDVerifyCertificateChainSync failed with err=%d",  a5,  a6,  a7,  a8,  0);
  sub_1000147C8();
}

void sub_1001244C4()
{
}

void sub_100124524()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "SDAirDropConnection: CFPropertyListCreateWithData returned invalid dictionary",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_100124550()
{
}

void sub_10012457C()
{
}

void sub_1001245A8()
{
}

void sub_1001245D4()
{
}

void sub_100124600()
{
}

void sub_10012462C( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100124690()
{
  sub_100014820( (void *)&_mh_execute_header,  v0,  v1,  "SDAirDropConnection: CFReadStreamRead returned %ld",  v2,  v3,  v4,  v5,  v6);
  sub_10001480C();
}

void sub_1001246F0()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "SDAirDropConnection: _CFHTTPServerRequestCopyBodyStream returned NULL",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_10012471C()
{
}

void sub_100124748()
{
}

void sub_100124774()
{
}

void sub_1001247D4()
{
}

void sub_100124834()
{
}

void sub_100124860()
{
}

void sub_10012488C()
{
}

void sub_1001248B8()
{
}

void sub_1001248E4()
{
}

void sub_100124910()
{
}

void sub_10012493C()
{
}

void sub_100124968()
{
}

void sub_100124994()
{
}

void sub_1001249C0()
{
}

void sub_1001249EC()
{
}

void sub_100124A18()
{
}

void sub_100124A44()
{
}

void sub_100124A70()
{
}

void sub_100124A9C()
{
}

uint64_t SDAutoUnlockStartAdvertisingReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0LL;
      *(_BYTE *)(a1 + 12) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_30:
      *(_DWORD *)(a1 + _Block_object_dispose(va, 8) = v14;
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100125080(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
  unsigned int v2 = [v1 enableContinuity];

  if (v2)
  {
    uint64_t v3 = objc_alloc_init(&OBJC_CLASS___SDActivityScanner);
    char v4 = (void *)qword_100657198;
    qword_100657198 = (uint64_t)v3;
  }

LABEL_49:
      id v27 = v49;
    }

    char v34 = handoff_log(v32, v33);
    unsigned int v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v47 = v15;
      if (v5) {
        uint64_t v36 = @" Handoff";
      }
      else {
        uint64_t v36 = &stru_1005E3958;
      }
      unint64_t v37 = v9;
      if (v4) {
        char v38 = @" CopyPaste";
      }
      else {
        char v38 = &stru_1005E3958;
      }
      if ((_DWORD)v27) {
        char v39 = @" Boosted";
      }
      else {
        char v39 = &stru_1005E3958;
      }
      if ((_DWORD)v29) {
        unsigned int v40 = @"YES";
      }
      else {
        unsigned int v40 = @"NO";
      }
      id v48 = v37;
      unint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString valueForKeyPath:](v37, "valueForKeyPath:", @"@unionOfObjects.UUIDString"));
      char v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "componentsJoinedByString:", @", "));
      *(_DWORD *)buf = 138413314;
      *(void *)&uint8_t buf[4] = v36;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v38;
      *(_WORD *)&buf[22] = 2112;
      __int128 v56 = (uint64_t (*)(uint64_t, uint64_t))v39;
      *(_WORD *)__int128 v57 = 2112;
      *(void *)&v57[2] = v40;
      *(_WORD *)&v57[10] = 2112;
      *(void *)&v57[12] = v42;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "Starting%@%@%@ scanning with duplicates:%@ for peers [%@]",  buf,  0x34u);

      unint64_t v15 = v47;
      BOOL v9 = v48;
      id v27 = v49;
    }

    LOBYTE(v46) = (_BYTE)v29;
    -[IDSContinuity startScanningForType:withData:mask:peers:withOptions:boostedScan:duplicates:]( v2->_continuity,  "startScanningForType:withData:mask:peers:withOptions:boostedScan:duplicates:",  0LL,  v15,  v15,  v9,  0LL,  v27,  v46);
    char v43 = (dispatch_source_s *)v2->_stopScanLostDeviceTimer;
    if (v43)
    {
      dispatch_source_cancel(v43);
      unsigned int v44 = v2->_stopScanLostDeviceTimer;
      v2->_stopScanLostDeviceTimer = 0LL;
    }

    uint64_t v25 = 1;
  }

  objc_sync_exit(v2);
  return v25;
}

      char v8 = (v59 - 1) & v59;
      __int128 v57 = __clz(__rbit64(v59)) + (v6 << 6);
LABEL_50:
      unint64_t v61 = 16 * v57;
      id v62 = (char **)(*(void *)(v104 + 48) + v61);
      uint64_t v3 = *v62;
      __int16 v63 = v62[1];
      BOOL v64 = (uint64_t *)(*(void *)(v104 + 56) + v61);
      __int128 v66 = *v64;
      __int128 v65 = (const char *)v64[1];
      *(void *)&__int128 v67 = swift_bridgeObjectRetain(v63, v54).n128_u64[0];
      swift_bridgeObjectRetain(v65, v67);
      __int128 v69 = Date.init()(v68);
      Date.init()(v69);
      *unsigned int v5 = v66;
      v5[1] = v65;
      _DWORD v5[2] = v3;
      v5[3] = v63;
      __int128 v70 = (uint64_t)v101;
      sub_100306B74((uint64_t)v5, (uint64_t)v101);
      if ((swift_isUniquelyReferenced_nonNull_native(v55) & 1) == 0) {
        id v55 = (void *)sub_10018C8C0(0, v55[2] + 1LL, 1, (unint64_t)v55);
      }
      __int128 v72 = v55[2];
      __int128 v71 = v55[3];
      if (v72 >= v71 >> 1) {
        id v55 = (void *)sub_10018C8C0(v71 > 1, v72 + 1, 1, (unint64_t)v55);
      }
      v55[2] = v72 + 1;
      sub_100306BB8( v70,  (uint64_t)v55 + ((*(unsigned __int8 *)(v102 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80))
      + *(void *)(v102 + 72) * v72);
      sub_100306BFC((uint64_t)v5);
      if (v8) {
        goto LABEL_35;
      }
    }
  }

  char v46 = v32 + 4;
  if (v32 + 4 >= v92) {
    goto LABEL_56;
  }
  unsigned int v44 = *(void *)&v91[8 * v46];
  if (v44)
  {
    unint64_t v45 = v32 + 4;
    goto LABEL_30;
  }

  while (1)
  {
    unint64_t v45 = v46 + 1;
    if (__OFADD__(v46, 1LL)) {
      goto LABEL_63;
    }
    if (v45 >= v92) {
      break;
    }
    unsigned int v44 = *(void *)&v91[8 * v45];
    ++v46;
    if (v44) {
      goto LABEL_30;
    }
  }

            swift_release_n(v33, 2LL);
            uint64_t v51 = (uint64_t)v36;
            goto LABEL_50;
          }

          uint64_t v36 = v88;
        }

        uint64_t v23 = (os_unfair_lock_s *)(*(void *)(v33 + 112) + 16LL);
        os_unfair_lock_lock(v23);
        sub_1002737FC(v104, (uint64_t (*)(void))sub_10034BF60);
        if (!v35)
        {
          os_unfair_lock_unlock(v23);
          swift_beginAccess(v114, v126, 33LL, 0LL);
          NSErrorUserInfoKey v105 = sub_1001CA898((uint64_t)v36, v72);
          swift_endAccess(v126);
          swift_release(v33);
          swift_release(v105);
LABEL_54:
          char v33 = sub_10034B430((uint64_t)v36, v72, v116, v73);
          v106 = (uint64_t)v36;
          v107 = v114;
          swift_beginAccess(v114, v126, 33LL, 0LL);
          swift_bridgeObjectRetain(v72);
          swift_retain(v33);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v107);
          v128 = *v107;
          *v107 = 0x8000000000000000LL;
          sub_1003B3F7C(v33, v106, v72, isUniquelyReferenced_nonNull_native);
          v102 = *v107;
          *v107 = v128;
          __int16 v103 = v72;
          goto LABEL_55;
        }

void sub_100125854( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

uint64_t sub_1001258BC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sub_10006796C((void *)&_mh_execute_header, v0, v1, "awdlInterfaceIndex: getifaddrs failed (%d)", v2, v3, v4, v5, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_10006796C((void *)&_mh_execute_header, v0, v1, "awdlInterfaceIndex: getifaddrs failed (%d)", v2, v3, v4, v5, 0) = 0LL;
  return result;
}

void sub_1001258CC(uint64_t a1)
{
}

void sub_1001258D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 4sub_10006796C((void *)&_mh_execute_header, v0, v1, "awdlInterfaceIndex: getifaddrs failed (%d)", v2, v3, v4, v5, 0) = 0LL;
}

void sub_100125BF8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (id)objc_claimAutoreleasedReturnValue([v2 clientAdvertisement]);
  [v3 receivedAdvertisement:v4];
}

id sub_100125C48(uint64_t a1, void *a2)
{
  return _[a2 pairedDevicesChanged:*(void *)(a1 + 32)];
}

void sub_100126048(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  char v8 = v6;
  if (v5)
  {
    if (([*(id *)(a1 + 32) deviceTracked] & 1) == 0)
    {
      [*(id *)(a1 + 32) setDeviceTracked:1];
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472LL;
      v27[2] = sub_10012628C;
      v27[3] = &unk_1005CEDB8;
      BOOL v9 = *(void **)(a1 + 40);
      id v28 = *(id *)(a1 + 32);
      [v9 _enumerateRemoteObjectProxiesUsingBlock:v27];
    }

    int v10 = (void *)objc_claimAutoreleasedReturnValue([v5 options]);
    id v11 = off_1006437E0();
    char v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:v12]);
    unsigned int v14 = [v13 BOOLValue];

    if (v14 && (id v15 = [*(id *)(a1 + 48) isDefaultPairedDevice], !(_DWORD)v15))
    {
      uint64_t v24 = handoff_log(v15, v16);
      uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG)) {
        sub_100127F64();
      }
    }

    else
    {
      uint64_t v17 = handoff_log(v15, v16);
      uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v30 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Received a new advertisement %@",  buf,  0xCu);
      }

      unsigned int v19 = *(void **)(a1 + 40);
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472LL;
      v25[2] = sub_1001262EC;
      v25[3] = &unk_1005CEDB8;
      uint64_t v20 = (os_log_s *)v5;
      char v26 = v20;
      [v19 _enumerateRemoteObjectProxiesUsingBlock:v25];
      uint64_t v21 = *(void *)(a1 + 72);
      if (v21) {
        (*(void (**)(uint64_t, os_log_s *))(v21 + 16))(v21, v20);
      }
      uint64_t v22 = v26;
    }
  }

  else
  {
    uint64_t v23 = handoff_log(v6, v7);
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
      sub_100127EA4(a1, (uint64_t)v8, v22);
    }
  }
}

void sub_10012628C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([v2 idsDevice]);
  id v4 = sub_1000854EC(v6);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  [v3 foundDeviceWithDevice:v5];
}

id sub_1001262EC(uint64_t a1, void *a2)
{
  return [a2 receivedAdvertisement:*(void *)(a1 + 32)];
}

void sub_100126618(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (id)objc_claimAutoreleasedReturnValue([v2 clientAdvertisement]);
  [v3 receivedAdvertisement:v4];
}

id sub_10012674C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) dumpState];
}

void sub_100127184( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_100127270( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_100127354( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_1001274A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_10012775C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([v2 idsDevice]);
  id v4 = sub_1000854EC(v6);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  [v3 lostDeviceWithDevice:v5];
}

id sub_100127A80(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 104LL) = *(void *)(a1 + 40);
  return [*(id *)(a1 + 32) restart];
}

void sub_100127B8C(void *a1)
{
  uint64_t v2 = kdebug_trace(722141192LL, 0LL, 0LL, 0LL, 0LL);
  uint64_t v4 = handoff_log(v2, v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = a1[4];
    uint64_t v7 = SFHexStringForData(a1[5]);
    char v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    int v10 = 138412546;
    uint64_t v11 = v6;
    __int16 v12 = 2112;
    unsigned int v13 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Requesting payload from %@ for %@",  (uint8_t *)&v10,  0x16u);
  }

  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue( +[SDActivityPayloadManager sharedPayloadManager]( &OBJC_CLASS___SDActivityPayloadManager,  "sharedPayloadManager"));
  [v9 sendActivityPayloadRequestToDeviceIdentifier:a1[4] withAdvertisementPayload:a1[5] command:a1[6] timeout:a1[8] completionHandler:a1[7]];
}

id sub_100127D28()
{
  if (qword_1006571B0 != -1) {
    dispatch_once(&qword_1006571B0, &stru_1005CEE48);
  }
  os_log_t v0 = (id *)dlsym((void *)qword_1006571B8, "UAUserActivityIsForPairedDeviceOptionKey");
  if (v0) {
    objc_storeStrong((id *)&qword_1006571A8, *v0);
  }
  off_1006437E0 = (uint64_t (*)())sub_100127DA0;
  return (id)qword_1006571A8;
}

id sub_100127DA0()
{
  return (id)qword_1006571A8;
}

void sub_100127DAC(id a1)
{
  qword_1006571B8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/UserActivity.framework/UserActivity", 2);
}

void sub_100127DD4(void *a1, os_log_s *a2)
{
  uint64_t v3 = a1;
  id v5 = [a1 count];
  if (v5)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v3 valueForKeyPath:@"@unionOfObjects.uniqueIDOverride"]);
    uint64_t v7 = SFCompactStringFromCollection(v3);
    uint64_t v6 = (__CFString *)objc_claimAutoreleasedReturnValue(v7);
  }

  else
  {
    uint64_t v6 = @"[]";
  }

  int v8 = 138412290;
  BOOL v9 = v6;
  sub_100056704((void *)&_mh_execute_header, a2, v4, "nearbyServiceDevicesChanged: %@", (uint8_t *)&v8);
  if (v5)
  {
  }

void sub_100127EA4(uint64_t a1, uint64_t a2, os_log_s *a3)
{
  uint64_t v6 = SFHexStringForData(*(void *)(a1 + 56));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  uint64_t v8 = *(void *)(a1 + 64);
  int v9 = 138412802;
  int v10 = v7;
  __int16 v11 = 2112;
  uint64_t v12 = v8;
  __int16 v13 = 2112;
  uint64_t v14 = a2;
  _os_log_error_impl( (void *)&_mh_execute_header,  a3,  OS_LOG_TYPE_ERROR,  "Failed to update with raw advertisementData %@ from %@ (%@)",  (uint8_t *)&v9,  0x20u);
}

void sub_100127F64()
{
}

void sub_100127F90()
{
}

void sub_100127FBC()
{
}

void sub_100127FE8()
{
}

void sub_100128020(unint64_t a1, os_log_s *a2, uint64_t a3)
{
  if (a1 > 3) {
    uint64_t v3 = "UnexpectedType";
  }
  else {
    uint64_t v3 = off_1005CEE00[a1];
  }
  int v4 = 136315138;
  uint64_t v5 = v3;
  sub_100056704((void *)&_mh_execute_header, a2, a3, "IDSContinuity didStartScanningForType: %s", (uint8_t *)&v4);
  sub_10001480C();
}