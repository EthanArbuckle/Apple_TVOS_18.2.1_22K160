void sub_1001280A8(unint64_t a1, os_log_s *a2, uint64_t a3)
{
  const char *v3;
  int v4;
  const char *v5;
  if (a1 > 3) {
    v3 = "UnexpectedType";
  }
  else {
    v3 = off_1005CEE00[a1];
  }
  v4 = 136315138;
  v5 = v3;
  sub_100056704((void *)&_mh_execute_header, a2, a3, "IDSContinuity didStopScanningForType: %s", (uint8_t *)&v4);
  sub_10001480C();
}

void sub_100128130(uint64_t a1, void *a2, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 136315394;
  *(void *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2112;
  *(void *)(buf + 14) = a2;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "IDSContinuity didFailToStartScanningForType: %s withError: (%@)",  buf,  0x16u);
}

void sub_100128194(uint64_t a1, os_log_s *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "Saw device %@ but cannot find mathing IDSDevice",  (uint8_t *)&v2,  0xCu);
  sub_10001480C();
}

void sub_100128204()
{
}

void sub_10012827C(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___SDConnectedBrowser);
  uint64_t v2 = (void *)qword_1006571C8;
  qword_1006571C8 = (uint64_t)v1;
}

void sub_100128F8C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 postNotificationName:@"com.apple.sharingd.ConnectedChanged" object:*(void *)(a1 + 32) userInfo:0];
}

void sub_100129098(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v1 postNotificationName:@"com.apple.sharingd.ConnectedChanged" object:0 userInfo:0];
}

void sub_100129168(uint64_t a1)
{
}

id sub_100129270(uint64_t a1)
{
  return _[*(id *)(a1 + 32) buildNodesAndNotify:1];
}

void sub_100129344( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100014820( (void *)&_mh_execute_header,  a2,  a3,  "SDConnectedBrowser: _CFURLGetVolumePropertyFlags returned %@",  a5,  a6,  a7,  a8,  2u);
}

void sub_1001293B0( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t SDAutoUnlockDeviceRegistrationRequestReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0LL;
      *(_BYTE *)(a1 + 12) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_30:
      *(_DWORD *)(a1 + 8) = v14;
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10012A684(os_log_t log)
{
  *(_WORD *)id v1 = 0;
  _os_log_fault_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_FAULT,  "Attempting to intialize _NIRangingPeer with nil macAddress",  v1,  2u);
}

uint64_t SDAuthenticationPreRequestReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      uint64_t String = PBReaderReadString(a2);
      uint64_t v19 = objc_claimAutoreleasedReturnValue(String);
      v20 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = v19;
    }

    else
    {
      if ((_DWORD)v12 == 2)
      {
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v15 = 0LL;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1LL || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v24 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
          v15 |= (unint64_t)(v24 & 0x7F) << v21;
          if ((v24 & 0x80) == 0) {
            goto LABEL_42;
          }
          v21 += 7;
          BOOL v9 = v22++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_44;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_44:
        uint64_t v26 = 16LL;
      }

      else
      {
        if ((_DWORD)v12 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag(a2);
          if (!(_DWORD)result) {
            return result;
          }
          continue;
        }

        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0LL;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1LL || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v17 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0) {
            goto LABEL_38;
          }
          v13 += 7;
          BOOL v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_40;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_40:
        uint64_t v26 = 20LL;
      }

      *(_DWORD *)(a1 + v26) = v15;
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10012B3D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 10))
  {
    *(_BYTE *)(v1 + 10) = 1;
    uint64_t v3 = *(void *)(a1 + 32);
    if (*(_BYTE *)(v3 + 9))
    {
      [(id)v3 setSessionKeepAliveTransactionIdentifier:0];
      uint64_t v3 = *(void *)(a1 + 32);
    }

    [*(id *)(v3 + 24) invalidate];
    uint64_t v4 = *(void *)(a1 + 32);
    unsigned int v5 = *(void **)(v4 + 24);
    *(void *)(v4 + 24) = 0LL;

    uint64_t v6 = *(void *)(a1 + 32);
    unint64_t v7 = *(void **)(v6 + 80);
    *(void *)(v6 + 80) = 0LL;

    uint64_t v8 = *(void *)(a1 + 32);
    BOOL v9 = *(void **)(v8 + 88);
    *(void *)(v8 + 88) = 0LL;
  }

void sub_10012B460(uint64_t a1)
{
  __int128 v6 = 0u;
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      unsigned int v5 = 0LL;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v6 + 1) + 8LL * (void)v5) + 16LL))(*(void *)(*((void *)&v6 + 1) + 8LL * (void)v5));
        unsigned int v5 = (char *)v5 + 1;
      }

      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }

    while (v3);
  }
}

void sub_10012B654(id a1)
{
  uint64_t v1 = daemon_log(a1);
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
    sub_10012FB90();
  }
}

void sub_10012BAA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_10012BACC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10012BADC(uint64_t a1)
{
}

void sub_10012BAE4(id a1, NSError *a2)
{
  id v2 = a2;
  uint64_t v3 = daemon_log(v2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10012FBBC();
  }
}

void sub_10012BB34(uint64_t a1, void *a2, char a3)
{
  id v7 = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a2);
  __int128 v6 = *(_BYTE **)(a1 + 40);
  if (v6) {
    *__int128 v6 = a3;
  }
}

id sub_10012BDD8(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 contactIDs]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 componentsJoinedByString:@","]);
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) stringByAppendingFormat:@"%@,%li,%f,%i", v4, *(void *)(a1 + 40), floor(*(double *)(a1 + 48)), *(unsigned __int8 *)(a1 + 56)]);

  return v5;
}

SharingXPCHelperImageItem *__cdecl sub_10012BE64(id a1, SharingXPCHelperImageItem *a2, CGImage *a3)
{
  uint64_t v4 = a2;
  unsigned int v5 = objc_alloc(&OBJC_CLASS___SharingXPCHelperGroupContactIcon);
  __int128 v6 = (void *)objc_claimAutoreleasedReturnValue(-[SharingXPCHelperImageItem contacts](v4, "contacts"));
  id v7 = -[SharingXPCHelperImageItem iconIndex](v4, "iconIndex");
  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue(-[SharingXPCHelperImageItem cacheLookupKey](v4, "cacheLookupKey"));

  __int128 v9 = -[SharingXPCHelperGroupContactIcon initWithContacts:icon:atIndex:cacheLookupKey:]( v5,  "initWithContacts:icon:atIndex:cacheLookupKey:",  v6,  a3,  v7,  v8);
  return (SharingXPCHelperImageItem *)v9;
}

id sub_10012BF04(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v23 = 0LL;
  char v24 = &v23;
  uint64_t v25 = 0x3032000000LL;
  uint64_t v26 = sub_10012BACC;
  v27 = sub_10012BADC;
  id v28 = 0LL;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) synchronousRemoteObjectProxyWithErrorHandler:&stru_1005CEF80]);
  uint64_t v5 = *(void *)(a1 + 40);
  double v6 = *(double *)(a1 + 48);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 56);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_10012C100;
  v22[3] = &unk_1005CEFA8;
  v22[4] = &v23;
  [v4 groupMonogramImageDataForContactsSync:v3 style:v5 diameter:v7 monogramsAsFlatImages:v22 replyHandler:v6];

  if (*(_BYTE *)(a1 + 57))
  {
    id v8 = *(id *)(a1 + 32);
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queuedBlocks]);
    char v13 = _NSConcreteStackBlock;
    uint64_t v14 = 3221225472LL;
    uint64_t v15 = sub_10012C110;
    unint64_t v16 = &unk_1005CEFD0;
    id v17 = v3;
    id v18 = v8;
    uint64_t v19 = *(void *)(a1 + 40);
    uint64_t v20 = *(void *)(a1 + 48);
    char v21 = *(_BYTE *)(a1 + 56);
    int v10 = objc_retainBlock(&v13);
    objc_msgSend(v9, "addObject:", v10, v13, v14, v15, v16);
  }

  id v11 = (id)v24[5];
  _Block_object_dispose(&v23, 8);

  return v11;
}

void sub_10012C094( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_10012C0B0(id a1, NSError *a2)
{
  id v2 = a2;
  uint64_t v3 = daemon_log(v2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10012FC28();
  }
}

void sub_10012C100(uint64_t a1, void *a2)
{
}

id sub_10012C110(uint64_t a1)
{
  uint64_t v2 = sharingXPCHelperLog();
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Cache miss for %@ -> creating cache for opposite color too",  (uint8_t *)&v6,  0xCu);
  }

  return  [*(id *)(a1 + 40) groupMonogramImageDataForContacts:*(void *)(a1 + 32) style:*(void *)(a1 + 48) diameter:*(unsigned __int8 *)(a1 + 64) monogramsAsFlatImages:0 processOppositeBackgroundStyle:*(double *)(a1 + 56)];
}

void sub_10012C3A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10012C3C0(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = daemon_log(v2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10012FC94();
  }
}

void sub_10012C410(uint64_t a1, void *a2)
{
}

id sub_10012C64C(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "contactIDs", *(void *)(a1 + 32)));
  v10[1] = v3;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 40)));
  v10[2] = v4;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", floor(*(double *)(a1 + 48))));
  v10[3] = v5;
  int v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 56)));
  v10[4] = v6;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v10, 5LL));

  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 componentsJoinedByString:@","]);
  return v8;
}

SharingXPCHelperImageItem *__cdecl sub_10012C764(id a1, SharingXPCHelperImageItem *a2, CGImage *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = objc_alloc(&OBJC_CLASS___SharingXPCHelperContactIcon);
  int v6 = (void *)objc_claimAutoreleasedReturnValue(-[SharingXPCHelperImageItem contact](v4, "contact"));
  id v7 = -[SharingXPCHelperImageItem iconIndex](v4, "iconIndex");
  id v8 = (void *)objc_claimAutoreleasedReturnValue(-[SharingXPCHelperImageItem cacheLookupKey](v4, "cacheLookupKey"));

  __int128 v9 = -[SharingXPCHelperContactIcon initWithContact:icon:atIndex:cacheLookupKey:]( v5,  "initWithContact:icon:atIndex:cacheLookupKey:",  v6,  a3,  v7,  v8);
  return (SharingXPCHelperImageItem *)v9;
}

id sub_10012C804(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v21 = 0LL;
  unsigned int v22 = &v21;
  uint64_t v23 = 0x3032000000LL;
  char v24 = sub_10012BACC;
  uint64_t v25 = sub_10012BADC;
  id v26 = 0LL;
  id v26 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id obj = v3;
  id v4 = [obj countByEnumeratingWithState:&v17 objects:v28 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v18;
    do
    {
      int v6 = 0LL;
      do
      {
        if (*(void *)v18 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void *)(*((void *)&v17 + 1) + 8LL * (void)v6);
        id v8 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) synchronousRemoteObjectProxyWithErrorHandler:&stru_1005CF080]);
        uint64_t v27 = v7;
        __int128 v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v27, 1LL));
        uint64_t v10 = *(void *)(a1 + 40);
        double v11 = *(double *)(a1 + 48);
        uint64_t v12 = *(unsigned __int8 *)(a1 + 56);
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472LL;
        v16[2] = sub_10012CA8C;
        v16[3] = &unk_1005CF0A8;
        v16[4] = &v21;
        [v8 monogramImagesForMultipleContactsSync:v9 style:v10 diameter:v12 monogramAsFlatImages:v16 replyHandler:v11];

        int v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [obj countByEnumeratingWithState:&v17 objects:v28 count:16];
    }

    while (v4);
  }

  id v13 = (id)v22[5];
  _Block_object_dispose(&v21, 8);

  return v13;
}

void sub_10012CA14( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

void sub_10012CA3C(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = daemon_log(v2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10012FD00();
  }
}

void sub_10012CA8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    uint64_t v4 = sharingXPCHelperLog(0LL);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10012FD6C();
    }
  }

  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObjectsFromArray:v3];
}

void sub_10012CF20(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = -[SharingXPCHelperImageItem initWithImageTitle:]( objc_alloc(&OBJC_CLASS___SharingXPCHelperImageItem),  "initWithImageTitle:",  v3);

  [*(id *)(a1 + 32) addObject:v4];
}

id sub_10012CF84(uint64_t a1, void *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = a2;
  if (v3) {
    uint64_t v6 = objc_claimAutoreleasedReturnValue([v4 keyDerivedFromRelevantTraitCollectionProperties]);
  }
  else {
    uint64_t v6 = objc_claimAutoreleasedReturnValue([v4 keyDerivedFromRelevantTraitCollectionPropertiesWithOppositeUserInterfaceStyle]);
  }
  uint64_t v7 = (void *)v6;
  id v8 = *(void **)(a1 + 40);
  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v5 imageTitle]);

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[SDXPCHelperConnection identifierForColor:]( &OBJC_CLASS___SDXPCHelperConnection,  "identifierForColor:",  *(void *)(a1 + 48)));
  double v11 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingFormat:@",%@,%@,%@,", v9, v10, v7]);

  return v11;
}

SharingXPCHelperImageItem *__cdecl sub_10012D048(id a1, SharingXPCHelperImageItem *a2, CGImage *a3)
{
  uint64_t v4 = a2;
  id v5 = objc_alloc(&OBJC_CLASS___SharingXPCHelperImageItem);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[SharingXPCHelperImageItem imageTitle](v4, "imageTitle"));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[SharingXPCHelperImageItem cacheLookupKey](v4, "cacheLookupKey"));

  id v8 = -[SharingXPCHelperImageItem initWithImageTitle:image:cacheLookupKey:]( v5,  "initWithImageTitle:image:cacheLookupKey:",  v6,  a3,  v7);
  return v8;
}

id sub_10012D0D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v19 = 0LL;
  __int128 v20 = &v19;
  uint64_t v21 = 0x3032000000LL;
  unsigned int v22 = sub_10012BACC;
  uint64_t v23 = sub_10012BADC;
  id v24 = 0LL;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) synchronousRemoteObjectProxyWithErrorHandler:&stru_1005CF160]);
  uint64_t v5 = *(void *)(a1 + 40);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_10012D2CC;
  v18[3] = &unk_1005CF0A8;
  v18[4] = &v19;
  [v4 CGImgDataForUIActivityTitles:v3 foregroundColor:v5 replyHandler:v18];

  if (*(_BYTE *)(a1 + 48))
  {
    id v6 = *(id *)(a1 + 32);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queuedBlocks]);
    double v11 = _NSConcreteStackBlock;
    uint64_t v12 = 3221225472LL;
    id v13 = sub_10012D2DC;
    uint64_t v14 = &unk_1005CBC20;
    id v15 = v6;
    id v16 = *(id *)(a1 + 40);
    id v17 = v3;
    id v8 = objc_retainBlock(&v11);
    objc_msgSend(v7, "addObject:", v8, v11, v12, v13, v14, v15);
  }

  id v9 = (id)v20[5];
  _Block_object_dispose(&v19, 8);

  return v9;
}

void sub_10012D260( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_10012D27C(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = daemon_log(v2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10012FD98();
  }
}

void sub_10012D2CC(uint64_t a1, void *a2)
{
}

void sub_10012D2DC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) getOppositeColor:*(void *)(a1 + 40)]);
  if (v2)
  {
    uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v4 = *(void **)(a1 + 48);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_10012D41C;
    v9[3] = &unk_1005CF188;
    uint64_t v5 = v3;
    uint64_t v10 = v5;
    uint64_t v6 = sharingXPCHelperLog([v4 enumerateObjectsUsingBlock:v9]);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v12 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Cache miss for %@ -> creating cache for opposite color too",  buf,  0xCu);
    }

    id v8 = [*(id *)(a1 + 32) CGImgForUIActivityTitles:v5 foregroundColor:v2 processOppositeColor:0];
  }
}

void sub_10012D41C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 imageTitle]);
  [v2 addObject:v3];
}

void sub_10012D460(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 image])
  {
    id v7 = (id)CFRetain([v3 image]);
  }

  else
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 imageData]);
    id v7 = (id)SFCreateCGImageFromData(v4);
  }

  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 imageTitle]);

  [v5 setObject:v7 forKeyedSubscript:v6];
}

void sub_10012D884(uint64_t a1)
{
  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) MD5HashOfStrings:*(void *)(a1 + 40)]);
  int64_t v2 = +[SDXPCHelperImageCache cacheCount](&OBJC_CLASS____TtC16DaemoniOSLibrary21SDXPCHelperImageCache, "cacheCount");
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 64LL));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v3 + 48);
  *(void *)(v3 + 4_Block_object_dispose(va, 8) = 0LL;
  id v5 = [*(id *)(*(void *)(a1 + 32) + 56) mutableCopy];
  [*(id *)(*(void *)(a1 + 32) + 56) removeAllObjects];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 64LL));
  if (*(void *)(a1 + 48)) {
    objc_msgSend(v5, "addEntriesFromDictionary:");
  }
  id v6 = objc_alloc_init(&OBJC_CLASS___SFShareSheetInvokedEvent);
  [v6 setAppBundleId:*(void *)(a1 + 56)];
  [v6 setNumberOfSuggestions:*(void *)(a1 + 64)];
  [v6 setSuggestionsHash:v7];
  [v6 setDaemonPID:getpid()];
  [v6 setDurationInMS:*(void *)(a1 + 72)];
  [v6 setIsDarkMode:*(unsigned __int8 *)(a1 + 80)];
  [v6 setCacheFileCount:v2];
  [v6 setTotalCacheAccessCount:v4];
  [v6 setIsCollaborative:*(unsigned __int8 *)(a1 + 81)];
  [v6 setCacheAccessInfo:v5];
  [v6 submitEvent];
}

void sub_10012DE3C(_Unwind_Exception *a1)
{
}

void sub_10012DE64(id a1, NSError *a2)
{
  int64_t v2 = a2;
  uint64_t v3 = daemon_log(v2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10012FE30();
  }
}

void sub_10012DEB4(uint64_t a1, void *a2)
{
}

void sub_10012DEC4(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) getOppositeColor:*(void *)(a1 + 40)]);
  uint64_t v3 = (void *)v2;
  if (v2)
  {
    uint64_t v4 = sharingXPCHelperLog(v2);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 48);
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Cache miss for text %@ -> creating cache for opposite color too",  (uint8_t *)&v7,  0xCu);
    }

    [*(id *)(a1 + 32) CGImgForNameLabelWithString:*(void *)(a1 + 48) textColor:v3 maxNumberOfLines:*(void *)(a1 + 56) isAirDrop:*(unsigned __int8 *)(a1 + 64) ignoreNameWrapping:*(unsigned __int8 *)(a1 + 65) processOppositeColor:0];
  }
}

void sub_10012E2F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_10012E314(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = daemon_log(v2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10012FE9C();
  }
}

void sub_10012E364(uint64_t a1, void *a2)
{
}

void sub_10012E374(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) getOppositeColor:*(void *)(a1 + 40)]);
  uint64_t v3 = (void *)v2;
  if (v2)
  {
    uint64_t v4 = sharingXPCHelperLog(v2);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 48);
      int v8 = 138412290;
      uint64_t v9 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Cache miss for label %@ -> creating cache for opposite color too",  (uint8_t *)&v8,  0xCu);
    }

    id v7 =  [*(id *)(a1 + 32) CGImgDataForActivityMoreListEntryForActivityTitle:*(void *)(a1 + 48) labelColor:v3 processOppositeColor:0 activityCategory:*(void *)(a1 + 56)];
  }
}

void sub_10012E6EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_10012E708(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = daemon_log(v2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10012FF08();
  }
}

void sub_10012E758(uint64_t a1, void *a2)
{
}

void sub_10012E9BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10012E9D8(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = daemon_log(v2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10012FF74();
  }
}

void sub_10012EA28(uint64_t a1, void *a2)
{
}

void sub_10012F198( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10012F1B0(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = daemon_log(v2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_100130044();
  }
}

void sub_10012F200(uint64_t a1, void *a2)
{
}

void sub_10012F338( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10012F350(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = daemon_log(v2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_1001300B0();
  }
}

void sub_10012F3A0(uint64_t a1, void *a2)
{
}

void sub_10012F4B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10012F4C8(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = daemon_log(v2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10013011C();
  }
}

void sub_10012F518(uint64_t a1, void *a2)
{
}

void sub_10012F638( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10012F650(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = daemon_log(v2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_100130188();
  }
}

void sub_10012F6A0(uint64_t a1, void *a2)
{
}

void sub_10012F790( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10012F7A8(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = daemon_log(v2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_1001301F4();
  }
}

void sub_10012F7F8(uint64_t a1, void *a2)
{
}

void sub_10012F960(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = daemon_log(v2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10013028C();
  }
}

void sub_10012FA34(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = daemon_log(v2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_1001302F8();
  }
}

void sub_10012FB44( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10012FB54( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10012FB64()
{
}

void sub_10012FB90()
{
}

void sub_10012FBBC()
{
}

void sub_10012FC28()
{
}

void sub_10012FC94()
{
}

void sub_10012FD00()
{
}

void sub_10012FD6C()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "monogramImagesForMultipleContactsSync failed to return images",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_10012FD98()
{
}

void sub_10012FE04()
{
}

void sub_10012FE30()
{
}

void sub_10012FE9C()
{
}

void sub_10012FF08()
{
}

void sub_10012FF74()
{
}

void sub_10012FFE0( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100130044()
{
}

void sub_1001300B0()
{
}

void sub_10013011C()
{
}

void sub_100130188()
{
}

void sub_1001301F4()
{
}

void sub_100130260()
{
  sub_10002A89C((void *)&_mh_execute_header, v0, v1, "_latestHostConfig = nil", v2, v3, v4, v5, v6);
  sub_1000147C8();
}

void sub_10013028C()
{
}

void sub_1001302F8()
{
}

void sub_100130A88(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v7 = v5;
  if ((a2 & 1) == 0)
  {
    uint64_t v8 = streams_log(v5, v6);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1001326D4();
    }

    uint64_t v10 = *(void **)(a1 + 32);
    NSErrorUserInfoKey v13 = NSLocalizedDescriptionKey;
    uint64_t v14 = @"Could not send request to other device";
    double v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v14,  &v13,  1LL));
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSPOSIXErrorDomain,  55LL,  v11));
    [v10 notifyStreamRequestWithError:v12];

    [*(id *)(a1 + 32) stop];
  }
}

void sub_100130DA0(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v7 = v5;
  if (a2)
  {
    [*(id *)(a1 + 32) switchToStreaming];
  }

  else
  {
    uint64_t v8 = streams_log(v5, v6);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_100132738();
    }

    [*(id *)(a1 + 32) stop];
  }
}

uint64_t sub_100131328(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = objc_opt_respondsToSelector(a3, "stream:handleEvent:");
  if ((result & 1) != 0) {
    return (uint64_t)_[a3 stream:a1 handleEvent:a2];
  }
  return result;
}

id sub_100131830(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) sendInitialResponse:a2];
}

void sub_1001326D4()
{
  sub_10004D1BC((void *)&_mh_execute_header, v0, v1, "Error sending initial request = %@", v2);
  sub_10001480C();
}

void sub_100132738()
{
  sub_10004D1BC((void *)&_mh_execute_header, v0, v1, "Error sending initial response = %@", v2);
  sub_10001480C();
}

void sub_10013279C()
{
}

void sub_1001327C8()
{
  sub_10004D1BC((void *)&_mh_execute_header, v0, v1, "Error getting streams = %@", v2);
  sub_10001480C();
}

void sub_10013282C()
{
}

void sub_100132858(os_log_s *a1)
{
  uint64_t v2 = __error();
  strerror(*v2);
  sub_10001C438();
  sub_10004D1BC((void *)&_mh_execute_header, a1, v3, "Could not create sock pair = %s", v4);
  sub_10004D1DC();
}

void sub_1001328D4()
{
}

void sub_100132938()
{
}

void sub_100132964()
{
}

void sub_100132990()
{
}

void sub_1001329BC()
{
}

void sub_1001329E8(void *a1, os_log_s *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1 streamError]);
  sub_10001C438();
  sub_10004D1BC((void *)&_mh_execute_header, a2, v4, "Client stream received error = %@", v5);

  sub_10004D1DC();
}

void sub_100132A68()
{
  sub_10004D1BC((void *)&_mh_execute_header, v0, v1, "Error writing to client output stream, writeLength = %ld", v2);
  sub_10001480C();
}

void sub_100132ACC()
{
}

void sub_100132AF8()
{
}

uint64_t SDUnlockLongTermKeyResponseReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 32) |= 1u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_38;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_40;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_40:
        *(_DWORD *)(a1 + 24) = v14;
        continue;
      case 2u:
        uint64_t String = PBReaderReadString(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(String);
        uint64_t v20 = 16LL;
        goto LABEL_29;
      case 3u:
        uint64_t Data = PBReaderReadData(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(Data);
        uint64_t v20 = 8LL;
LABEL_29:
        unsigned int v22 = *(void **)(a1 + v20);
        *(void *)(a1 + v20) = v19;

        continue;
      case 4u:
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0LL;
        *(_BYTE *)(a1 + 32) |= 2u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      unint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v26 == -1LL || v26 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v27 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 1;
      v25 |= (unint64_t)(v27 & 0x7F) << v23;
      if ((v27 & 0x80) == 0) {
        goto LABEL_42;
      }
      v23 += 7;
      BOOL v9 = v24++ >= 9;
      if (v9)
      {
        uint64_t v25 = 0LL;
        goto LABEL_44;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v25 = 0LL;
    }
LABEL_44:
    *(_BYTE *)(a1 + 2_Block_object_dispose(va, 8) = v25 != 0;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_100133E40(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Retry setup device timer fired", v5, 2u);
  }

  [*(id *)(a1 + 32) setSetupRetryDeviceTimer:0];
  return [*(id *)(a1 + 32) setSetupRetryDeviceID:0];
}

int64_t sub_100134064(id a1, SFAutoUnlockDevice *a2, SFAutoUnlockDevice *a3)
{
  char v4 = a2;
  unsigned int v5 = a3;
  id v6 = -[SFAutoUnlockDevice type](v4, "type");
  if ((uint64_t)v6 >= (uint64_t)-[SFAutoUnlockDevice type](v5, "type"))
  {
    id v8 = -[SFAutoUnlockDevice type](v4, "type");
    int64_t v7 = (uint64_t)v8 > (uint64_t)-[SFAutoUnlockDevice type](v5, "type");
  }

  else
  {
    int64_t v7 = -1LL;
  }

  return v7;
}

id sub_100134334(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Suggested device timer fired", v5, 2u);
  }

  [*(id *)(a1 + 32) setDeviceTimer:0];
  return [*(id *)(a1 + 32) setSuggestedDeviceID:0];
}

id sub_100134618(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Suggestion service timer fired", v5, 2u);
  }

  return [*(id *)(a1 + 32) invalidateSuggestionService];
}

void sub_100134BA0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_100134BE0(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  id v4 = [v3 copy];

  [WeakRetained handleFoundPeer:v4];
}

void sub_100134C3C(id a1)
{
  uint64_t v1 = auto_unlock_log(a1);
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Scanner invalidated", v3, 2u);
  }
}

void sub_100134CA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = auto_unlock_log(v3);
  unsigned int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1001363F4((uint64_t)v3, v6, v7, v8, v9, v10, v11, v12);
    }

    [*(id *)(a1 + 32) invalidateScanner];
  }

  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Scanner started", v13, 2u);
    }
  }
}

id sub_100135250(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Suggestion scan timer fired", v5, 2u);
  }

  [*(id *)(a1 + 32) postNotificationIfNeeded];
  return [*(id *)(a1 + 32) invalidateScanner];
}

void sub_10013548C(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_10013645C(a1, v3, v4, v5, v6, v7, v8, v9);
  }
}

void sub_1001355A0(uint64_t a1)
{
  if (*(_WORD *)(a1 + 56) == 401 && *(void *)(a1 + 32))
  {
    uint64_t v2 = -[SDAutoUnlockStartAdvertising initWithData:]( objc_alloc(&OBJC_CLASS___SDAutoUnlockStartAdvertising),  "initWithData:",  *(void *)(a1 + 40));
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
    unsigned int v4 = [v3 deviceRequiresNewRanging];

    uint64_t v6 = auto_unlock_log(v5);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = @"NO";
      if (v4) {
        uint64_t v8 = @"YES";
      }
      *(_DWORD *)buf = 138412546;
      id v17 = v8;
      __int16 v18 = 2112;
      uint64_t v19 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Received SDAutoUnlockMessageTypeStartAdvertising (new ranging required: %@, message: %@)",  buf,  0x16u);
    }

    if (v4 && (id v9 = (id)-[SDAutoUnlockStartAdvertising version](v2, "version"), (_DWORD)v9 != 2))
    {
      uint64_t v14 = auto_unlock_log(v9);
      unsigned int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Skipping response advertisement because Mac OS version is too old",  buf,  2u);
      }
    }

    else
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockAKSManager sharedManager](&OBJC_CLASS___SDAutoUnlockAKSManager, "sharedManager"));
      unsigned int v11 = [v10 ltkExistsForKeyDevice:*(void *)(a1 + 32)];

      if (v11)
      {
        uint64_t v12 = *(void **)(a1 + 48);
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472LL;
        v15[2] = sub_10013579C;
        v15[3] = &unk_1005CB008;
        v15[4] = v12;
        [v12 watchAvailableForUnlockWithCompletionHandler:v15];
LABEL_15:

        return;
      }

      unsigned int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockAKSManager sharedManager](&OBJC_CLASS___SDAutoUnlockAKSManager, "sharedManager"));
      -[os_log_s updateLTKs](v13, "updateLTKs");
    }

    goto LABEL_15;
  }

id *sub_10013579C(id *result, int a2)
{
  if (a2) {
    return (id *)_[result[4] updateSuggestionService];
  }
  return result;
}

id sub_10013619C(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidateScanner];
}

id sub_1001361FC(uint64_t a1)
{
  return [*(id *)(a1 + 32) triggerDevicesIfNeeded];
}

void sub_1001363F4( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10013645C( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001369D0(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___SDStatusMonitor);
  uint64_t v2 = (void *)qword_1006571D8;
  qword_1006571D8 = (uint64_t)v1;
}

void sub_100138714(void *a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    uint64_t v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1001387C4;
    v10[3] = &unk_1005CB4E8;
    v10[4] = a1[6];
    [v6 saveVerifiedAccount:v7 withCompletionHandler:v10];
  }

  else
  {
    uint64_t v8 = tethering_log();
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1001426CC();
    }
  }
}

void sub_1001387C4(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = tethering_log();
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    sub_100142730(a2, (uint64_t)v5, v7);
  }

  [*(id *)(a1 + 32) postNotification:@"com.apple.sharingd.AltDSIDChanged"];
}

void sub_100139D94( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100139DBC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100139DCC(uint64_t a1)
{
}

void sub_100139DD4(uint64_t a1, void *a2, _BYTE *a3)
{
  *a3 = 1;
}

id sub_10013A2F8(uint64_t a1)
{
  uint64_t v2 = daemon_log(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v8 = 138412290;
    uint64_t v9 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Reset meCard called with reason: %@",  (uint8_t *)&v8,  0xCu);
  }

  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void **)(v5 + 624);
  *(void *)(v5 + 624) = 0LL;

  return [*(id *)(a1 + 40) meCard];
}

void sub_10013A9BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10013A9FC(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5 = a2;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"FamilyHotspotIdentifier"]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"FamilyHotspotDisplayName"]);
  int v8 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"FamilyHotspotSharingMode"]);

  if ((uint64_t)[v8 integerValue] >= 3)
  {

    int v8 = &off_1005F7A80;
  }

  if (*(_BYTE *)(a1 + 72))
  {
    uint64_t v9 = *(void **)(a1 + 32);
    unint64_t v10 = (unint64_t)[v8 integerValue];
    if (v10 > 2) {
      unsigned int v11 = "?";
    }
    else {
      unsigned int v11 = off_1005CF780[v10];
    }
    __int16 v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"'%@' -> %s",  v7,  v11));
    [v9 appendString:v18];
  }

  else
  {
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 416) objectForKeyedSubscript:v6]);
    unint64_t v13 = (unint64_t)[v12 integerValue];

    id v14 = [v8 integerValue];
    if ((id)v13 != v14)
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 1;
      uint64_t v15 = daemon_log(v14);
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        if (v13 > 2) {
          id v17 = "?";
        }
        else {
          id v17 = off_1005CF780[v13];
        }
        unint64_t v19 = (unint64_t)[v8 integerValue];
        if (v19 > 2) {
          uint64_t v20 = "?";
        }
        else {
          uint64_t v20 = off_1005CF780[v19];
        }
        *(_DWORD *)buf = 138412802;
        unsigned int v22 = v7;
        __int16 v23 = 2080;
        unsigned int v24 = v17;
        __int16 v25 = 2080;
        unint64_t v26 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Family hotspot state updated: '%@' : %s -> %s",  buf,  0x20u);
      }
    }
  }

  [*(id *)(*(void *)(a1 + 48) + 416) setObject:v8 forKeyedSubscript:v6];
}

id sub_10013AE7C(uint64_t a1)
{
  uint64_t v2 = daemon_log(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Added reason to prevent locale change exit (reason %@)",  (uint8_t *)&v6,  0xCu);
  }

  return [*(id *)(*(void *)(a1 + 40) + 520) addReason:*(void *)(a1 + 32)];
}

id sub_10013AFEC(void *a1)
{
  uint64_t v2 = daemon_log(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = a1[4];
    int v6 = 138412290;
    uint64_t v7 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Pushed expiration date of reason to prevent locale change exit (reason %@)",  (uint8_t *)&v6,  0xCu);
  }

  return [*(id *)(a1[5] + 520) pushPreventionDateForReason:a1[4] newDate:a1[6]];
}

id sub_10013B138(uint64_t a1)
{
  uint64_t v2 = daemon_log(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Removed reason to prevent locale change exit (reason %@)",  (uint8_t *)&v6,  0xCu);
  }

  return [*(id *)(*(void *)(a1 + 40) + 520) removeReason:*(void *)(a1 + 32)];
}

void sub_10013B78C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10013B7AC(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained bluetoothDidSetPowerStateWithError:v3];
}

void sub_10013B858( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
}

id sub_10013DF80(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateMediaAccessControlSetting:1];
}

id sub_10013E080(uint64_t a1, void *a2)
{
  return [a2 postNotification:@"com.apple.sharingd.AppleIDChanged"];
}

void sub_10013EAD4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = daemon_log(a1);
  int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = "non-null";
    if (!a2) {
      uint64_t v7 = "null";
    }
    int v9 = 136315138;
    unint64_t v10 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "SDStatusMonitor: wirelessDeviceCallBack(device %s)",  (uint8_t *)&v9,  0xCu);
  }

  id v8 = a3;
  [v8 forceAWDLDeviceRefresh:a2];
  [v8 updateWirelessDevice];
}

void sub_10013EBB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = daemon_log(a1);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 138412290;
    uint64_t v11 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "WiFiManagerClientRegisterVirtInterfaceChangeCallback called for WiFiDeviceClient device %@",  (uint8_t *)&v10,  0xCu);
  }

  id v9 = a5;
  [v9 forceAWDLDeviceRefresh:a2];
  [v9 updateWirelessDevice];
}

id sub_10013EC7C(uint64_t a1, void *a2)
{
  return [a2 postNotification:@"com.apple.sharingd.WirelessPowerChanged"];
}

id sub_10013ECC4(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 postNotification:@"com.apple.sharingd.VirtualInterfacesChanged"];
}

void sub_10013ECF8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = daemon_log(a1);
  int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = @"YES";
    if (!a2) {
      uint64_t v7 = @"NO";
    }
    *(_DWORD *)buf = 138412290;
    uint64_t v12 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Host AP state changed (event data: %@)",  buf,  0xCu);
  }

  id v9 = @"HostAPEventData";
  uint64_t v10 = a2;
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v10,  &v9,  1LL));
  [a3 postNotification:@"com.apple.sharingd.HotspotHostAPStateChanged" userInfo:v8];
}

id sub_10013EE00(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = daemon_log(a1);
  int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = @"NO";
    if ((_DWORD)a2) {
      uint64_t v7 = @"YES";
    }
    int v9 = 138412290;
    uint64_t v10 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "wirelessCriticalCallback inCriticalState=%@",  (uint8_t *)&v9,  0xCu);
  }

  return [a3 updateWirelessCritical:a2];
}

void sub_10013EF4C(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___CWFInterface);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 600);
  *(void *)(v3 + 600) = v2;

  id location = 0LL;
  objc_initWeak(&location, *(id *)(a1 + 32));
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_10013F13C;
  v20[3] = &unk_1005CF688;
  objc_copyWeak(&v21, &location);
  [*(id *)(*(void *)(a1 + 32) + 600) setEventHandler:v20];
  [*(id *)(*(void *)(a1 + 32) + 600) activate];
  uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 600LL);
  id v19 = 0LL;
  [v5 startMonitoringEventType:3 error:&v19];
  id v6 = v19;
  uint64_t v7 = *(void **)(*(void *)(a1 + 32) + 600LL);
  id v18 = v6;
  [v7 startMonitoringEventType:8 error:&v18];
  id v8 = v18;

  int v9 = *(void **)(*(void *)(a1 + 32) + 600LL);
  id v17 = v8;
  [v9 startMonitoringEventType:1 error:&v17];
  id v10 = v17;

  if (v10)
  {
    uint64_t v12 = daemon_log(v11);
    unint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_100142CB8();
    }

    [*(id *)(*(void *)(a1 + 32) + 600) invalidate];
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void **)(v14 + 600);
    *(void *)(v14 + 600) = 0LL;
  }

  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_10013F26C;
  v16[3] = &unk_1005CB2F8;
  v16[4] = *(void *)(a1 + 32);
  dispatch_async(&_dispatch_main_q, v16);

  objc_destroyWeak(&v21);
  objc_destroyWeak(&location);
}

void sub_10013F118(_Unwind_Exception *a1)
{
}

void sub_10013F13C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10013F1E0;
  v5[3] = &unk_1005CB140;
  objc_copyWeak(&v7, (id *)(a1 + 32));
  id v6 = v3;
  id v4 = v3;
  dispatch_async(&_dispatch_main_q, v5);

  objc_destroyWeak(&v7);
}

void sub_10013F1E0(uint64_t a1)
{
  uint64_t v2 = daemon_log(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Got BSSID event, checking channel and wifi state\n",  v5,  2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "updateWifiState:", objc_msgSend(*(id *)(a1 + 32), "type"));
}

id sub_10013F26C(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateWifiState:1];
}

void sub_10013F688(_Unwind_Exception *a1)
{
}

void sub_10013F6A4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained d2dEncryptionChanged];
}

void sub_10013F8F8(_Unwind_Exception *a1)
{
}

void sub_10013F938(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained bluetoothStateChanged];
}

void sub_10013F964(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained bluetoothMonitorInvalidated];
}

void sub_10013F990(uint64_t a1, void *a2)
{
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained bluetoothActivatedWithError:v3];
}

void sub_10013F9D8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained bluetoothStateChanged];
}

void sub_10013FDD8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained installBluetoothMonitor];
}

id sub_10013FEE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  return _[a7 handleNameMonitorCallBack:a4 flags:a2 error:a3];
}

uint64_t sub_10013FFFC(uint64_t a1)
{
  uint64_t v2 = daemon_log(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Contact store did change notification received",  v5,  2u);
  }

  [*(id *)(a1 + 32) postNotification:@"com.apple.sharingd.ContactsChanged"];
  return notify_post("com.apple.sharing.privacy-changed");
}

uint64_t sub_1001400D8(uint64_t a1)
{
  uint64_t v2 = daemon_log(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "MeCard changed notification received", v5, 2u);
  }

  [*(id *)(a1 + 32) clearMyIconAndHash];
  [*(id *)(a1 + 32) postNotification:@"com.apple.sharingd.ContactsChanged"];
  return notify_post("com.apple.sharing.privacy-changed");
}

unint64_t sub_100140318(uint64_t a1)
{
  unint64_t result = (unint64_t)-[objc_class systemAttentionState](off_100643A78(), "systemAttentionState");
  if ((result & 0xFFFFFFFFFFFFFFFELL) == 6)
  {
    uint64_t v3 = daemon_log(result);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SDStatusMonitor: Device will sleep", buf, 2u);
    }

    uint64_t v5 = @"com.apple.sharingd.SystemWillSleep";
LABEL_13:

    return (unint64_t)[*(id *)(a1 + 32) postNotification:v5];
  }

  if (result == 8 || result == 1)
  {
    uint64_t v7 = daemon_log(result);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "SDStatusMonitor: Device has powered on",  v8,  2u);
    }

    uint64_t v5 = @"com.apple.sharingd.SystemHasPoweredOn";
    goto LABEL_13;
  }

  return result;
}

id sub_1001408C0(uint64_t a1, uint64_t a2, void *a3)
{
  return _[a3 handleDynamicStoreCallback:a1 changedKeys:a2];
}

id sub_10014094C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 200))
  {
    int v3 = MKBDeviceUnlockedSinceBoot(a1);
    uint64_t v2 = *(void *)(a1 + 32);
    if (v3 == 1)
    {
      *(_BYTE *)(v2 + 200) = 1;
      [*(id *)(a1 + 32) installContactsMonitor];
      [*(id *)(a1 + 32) postNotification:@"com.apple.sharingd.KeyBagFirstUnlock"];
      uint64_t v2 = *(void *)(a1 + 32);
    }
  }

  uint64_t v4 = +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  MKBGetDeviceLockState(*(void *)(v2 + 592)));
  uint64_t v5 = objc_claimAutoreleasedReturnValue(v4);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(v6 + 176);
  *(void *)(v6 + 176) = v5;

  if ([*(id *)(a1 + 32) deviceKeyBagUnlocked])
  {
    uint64_t v8 = objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    uint64_t v9 = *(void *)(a1 + 32);
    id v10 = *(void **)(v9 + 632);
    *(void *)(v9 + 632) = v8;
  }

  return [*(id *)(a1 + 32) postNotification:@"com.apple.sharingd.KeyBagLockStatusChanged"];
}

void sub_100140A80(id a1, BOOL a2)
{
  uint64_t v2 = daemon_log(a1);
  int v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Sharingd Exiting...", v4, 2u);
  }

  exit(0);
}

void sub_100140ADC(uint64_t a1, void *a2)
{
  uint64_t v3 = daemon_log(a1);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Current language changed", buf, 2u);
  }

  +[SDXPCHelperImageCache clearCacheWithSync:]( &OBJC_CLASS____TtC16DaemoniOSLibrary21SDXPCHelperImageCache,  "clearCacheWithSync:",  1LL);
  id v5 = a2;
  uint64_t v6 = objc_opt_self(v5);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  objc_sync_enter(v7);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001425F8;
  block[3] = &unk_1005CB2F8;
  id v10 = v5;
  id v8 = v5;
  dispatch_async(&_dispatch_main_q, block);

  objc_sync_exit(v7);
}

id sub_100141108(uint64_t a1)
{
  return [*(id *)(a1 + 32) postNotification:@"com.apple.sharingd.PowerSourceChanged"];
}

void sub_100141838(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = daemon_log(a1);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v8 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "WiFi Preferences changed callback, purging ssid cache",  v8,  2u);
  }

  uint64_t v6 = a3;
  pthread_mutex_lock(&stru_100643A38);
  [v6[60] removeAllObjects];
  id v7 = v6[60];
  v6[60] = 0LL;

  pthread_mutex_unlock(&stru_100643A38);
  [v6 updateAutoHotspotState];
  [v6 updateFamilyHotspotState];
}

id sub_1001420EC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _expireEveryoneModeAndOnlySetDefault:0];
}

Class sub_100142568()
{
  if (qword_1006571E8 != -1) {
    dispatch_once(&qword_1006571E8, &stru_1005CF6E8);
  }
  Class result = objc_getClass("PBSSystemStatus");
  qword_1006571E0 = (uint64_t)result;
  off_100643A78 = (uint64_t (*)())sub_1001425C4;
  return result;
}

id sub_1001425C4()
{
  return (id)qword_1006571E0;
}

void sub_1001425D0(id a1)
{
  qword_1006571F0 = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/PineBoardServices.framework/PineBoardServices",  2);
}

id sub_1001425F8(uint64_t a1)
{
  uint64_t v2 = daemon_log(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "currentLocalChanged", v5, 2u);
  }

  return [*(id *)(*(void *)(a1 + 32) + 520) scheduleOperation];
}

uint64_t sub_10014266C()
{
  return SCError();
}

void sub_100142674()
{
  sub_10000CF78((void *)&_mh_execute_header, v0, v1, "SecCertificateCopyCommonNames returned NULL", v2, v3, v4, v5, v6);
  sub_1000147C8();
}

void sub_1001426A0()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "SecCertificateCopyCommonNames returned empty array",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_1001426CC()
{
  sub_10004D1BC((void *)&_mh_execute_header, v0, v1, "Could not fix Alt-DSID error = %@", v2);
  sub_10001480C();
}

void sub_100142730(char a1, uint64_t a2, os_log_t log)
{
  v3[0] = 67109378;
  v3[1] = a1 & 1;
  __int16 v4 = 2112;
  uint64_t v5 = a2;
  _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "saveVerifiedAccount success %d %@",  (uint8_t *)v3,  0x12u);
  sub_10001480C();
}

void sub_1001427B4()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "addAdditionalInformationToMeCard: _myAppleID = nil",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_1001427E0(uint64_t a1, os_log_s *a2, uint64_t a3)
{
  int v3 = 141558275;
  uint64_t v4 = 1752392040LL;
  __int16 v5 = 2113;
  uint64_t v6 = a1;
  sub_100038BF8( (void *)&_mh_execute_header,  a2,  a3,  "addAdditionalInformationToMeCard: accountForAppleID (%{private, mask.hash}@) = nil",  (uint8_t *)&v3);
  sub_10001480C();
}

void sub_10014285C()
{
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  sub_100038BF8( (void *)&_mh_execute_header,  v1,  (uint64_t)v1,  "Failed to find contact with contact identifier %@, error: %@",  v2);
  sub_10001480C();
}

void sub_1001428D0()
{
}

void sub_1001428FC()
{
}

void sub_100142928()
{
}

void sub_10014298C()
{
}

void sub_1001429B8()
{
}

void sub_1001429E4()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "WiFiDeviceClientCopyInterfaceStateInfo returned NULL state",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_100142A10()
{
  sub_1000147D0( (void *)&_mh_execute_header,  v0,  v1,  "WiFiDeviceClientCopyInterfaceStateInfo returned error %d",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_100142A70(os_log_s *a1)
{
  int v2 = *__error();
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a1, OS_LOG_TYPE_ERROR, "sysctl returned %d", (uint8_t *)v3, 8u);
  sub_10001480C();
}

void sub_100142AF8()
{
  sub_1000147D0((void *)&_mh_execute_header, v0, v1, "SecIdentityCopyCertificate returned %d", v2, v3, v4, v5, v6);
  sub_1000147C8();
}

void sub_100142B58()
{
}

void sub_100142B84()
{
}

void sub_100142BB0()
{
}

void sub_100142BDC()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "Platform doesn't have biometrickit, returning NO for deviceBiometricsRegisteredAndEnabled",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_100142C08()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "SDStatusMonitor: WiFiManagerClientCreate returned NULL",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_100142C34()
{
}

void sub_100142C60()
{
  sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "SDStatusMonitor: WiFiManagerClientCopyDevices returned NULL",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_100142C8C()
{
}

void sub_100142CB8()
{
}

void sub_100142D1C()
{
  sub_1000147D0( (void *)&_mh_execute_header,  v0,  v1,  "SDStatusMonitor: DNSServiceSetDispatchQueue returned %d",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_100142D7C()
{
  sub_1000147D0( (void *)&_mh_execute_header,  v0,  v1,  "SDStatusMonitor: DNSServiceRegister returned %d",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_100142DDC(os_log_s *a1)
{
  int v2 = sub_10014266C();
  SCErrorString(v2);
  sub_10001C438();
  sub_10004D1BC((void *)&_mh_execute_header, a1, v3, "SCDynamicStoreCreate failed: %s", v4);
  sub_10004D1DC();
}

void sub_100142E50(os_log_s *a1)
{
  int v2 = sub_10014266C();
  SCErrorString(v2);
  sub_10001C438();
  sub_10004D1BC((void *)&_mh_execute_header, a1, v3, "SCDynamicStoreSetNotificationKeys failed: %s", v4);
  sub_10004D1DC();
}

void sub_100142EC4(os_log_s *a1)
{
  int v2 = sub_10014266C();
  SCErrorString(v2);
  sub_10001C438();
  sub_10004D1BC((void *)&_mh_execute_header, a1, v3, "SCDynamicStoreCreateRunLoopSource failed: %s", v4);
  sub_10004D1DC();
}

void sub_100142F38()
{
  sub_1000147D0( (void *)&_mh_execute_header,  v0,  v1,  "SDStatusMonitor: handleNameMonitorCallBack returned %d",  v2,  v3,  v4,  v5,  v6);
  sub_1000147C8();
}

void sub_100142F98()
{
}

void sub_100142FC4()
{
}

void sub_100143180(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___SDUnlockKeyManager);
  uint64_t v2 = (void *)qword_1006571F8;
  qword_1006571F8 = (uint64_t)v1;
}

id sub_100143AB4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
  unsigned int v3 = [v2 deviceKeyBagUnlocked];

  if (v3)
  {
    if (([*(id *)(a1 + 32) shouldUseTwoPartPill] & 1) == 0)
    {
      id v4 = [*(id *)(a1 + 32) waitingForAutoUnlockStateUpdateToStartPairedUnlock];
      if ((_DWORD)v4)
      {
        uint64_t v6 = paired_unlock_log(v4, v5);
        id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v20 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Auto Unlock not enabled. Starting unlock",  v20,  2u);
        }

        id v8 = [*(id *)(a1 + 32) startUnlockIfNeeded];
        *(_BYTE *)(*(void *)(a1 + 32) + 68LL) = (_BYTE)v8;
        uint64_t v10 = paired_unlock_log(v8, v9);
        uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
        if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_15;
        }
        if (*(_BYTE *)(*(void *)(a1 + 32) + 68LL)) {
          uint64_t v12 = @"YES";
        }
        else {
          uint64_t v12 = @"NO";
        }
        *(_DWORD *)uint64_t v20 = 138412290;
        *(void *)&void v20[4] = v12;
        unint64_t v13 = "Paired Unlock started: %@";
        uint64_t v14 = v11;
        uint32_t v15 = 12;
        goto LABEL_14;
      }
    }
  }

  id v16 = [*(id *)(a1 + 32) waitingForAutoUnlockStateUpdateToStartPairedUnlock];
  if ((_DWORD)v16)
  {
    uint64_t v18 = paired_unlock_log(v16, v17);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
LABEL_15:

      return objc_msgSend( *(id *)(a1 + 32),  "setWaitingForAutoUnlockStateUpdateToStartPairedUnlock:",  0,  *(_OWORD *)v20);
    }

    *(_WORD *)uint64_t v20 = 0;
    unint64_t v13 = "Auto Unlock enabled. Not performing Paired Unlock";
    uint64_t v14 = v11;
    uint32_t v15 = 2;
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, v20, v15);
    goto LABEL_15;
  }

  return objc_msgSend(*(id *)(a1 + 32), "setWaitingForAutoUnlockStateUpdateToStartPairedUnlock:", 0, *(_OWORD *)v20);
}

id sub_10014423C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
  unsigned int v3 = [v2 systemUIFlags];

  if ((v3 & 2) != 0)
  {
    int v6 = 0;
  }

  else
  {
    id v4 = [*(id *)(a1 + 32) wasInLockScreen];
    int v6 = (int)v4;
  }

  uint64_t v7 = paired_unlock_log(v4, v5);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = @"NO";
    if ((v3 & 2) != 0) {
      uint64_t v9 = @"YES";
    }
    int v14 = 138412290;
    uint32_t v15 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "on lock screen: %@", (uint8_t *)&v14, 0xCu);
  }

  id result = [*(id *)(a1 + 32) setWasInLockScreen:(v3 >> 1) & 1];
  if (v6)
  {
    uint64_t v12 = paired_unlock_log(result, v11);
    unint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v14) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Transitioned out of lock screen.",  (uint8_t *)&v14,  2u);
    }

    return [*(id *)(a1 + 32) beginUnlockIfNotOnLockScreen];
  }

  return result;
}

void sub_100144624(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[SDStatusMonitor sharedMonitor](&OBJC_CLASS___SDStatusMonitor, "sharedMonitor"));
  id v3 = [v2 pairedWatchWristState];

  if (v3 == (id)2)
  {
    id v4 = [*(id *)(a1 + 32) needsOffWristBeforePairedUnlock];
    if ((_DWORD)v4)
    {
      uint64_t v6 = paired_unlock_log(v4, v5);
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Eligible for Paired Unlock after off wrist event",  buf,  2u);
      }

      [*(id *)(a1 + 32) setNeedsOffWristBeforePairedUnlock:0];
    }

    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delayedStartTimer]);

    if (v8)
    {
      uint64_t v11 = paired_unlock_log(v9, v10);
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)unint64_t v13 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Watch off wrist while waiting to start Paired Unlock. Cancelling operation and dismissing banner",  v13,  2u);
      }

      [*(id *)(a1 + 32) invalidateDelayedStartTimer];
      [*(id *)(a1 + 32) resetAndClearState];
    }
  }

void sub_100144798(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = paired_unlock_log(a1, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Paired Unlock Banner dismissed", buf, 2u);
  }

  uint64_t v7 = *(void *)(a1 + 32);
  if (*(void *)(v7 + 104))
  {
    uint64_t v8 = paired_unlock_log(v5, v6);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Banner dismissed while waiting for user response. Cancelling Paired Unlock",  v18,  2u);
    }

    [*(id *)(a1 + 32) invalidateDelayedStartTimer];
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metrics]);

    if (v10)
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metrics]);
      [v11 setFailureReason:16];
    }

    objc_msgSend( *(id *)(a1 + 32),  "sendResetMessage:reason:",  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 128), "unlockSessionID"),  16);
  }

  else
  {
    int v12 = *(unsigned __int8 *)(v7 + 68);
    uint64_t v13 = paired_unlock_log(v5, v6);
    int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    if (v12)
    {
      if (v15)
      {
        *(_WORD *)uint64_t v17 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Dismissed while performing Paired Unlock. Cancelling or relocking watch if necessary",  v17,  2u);
      }

      [*(id *)(a1 + 32) sendRelockRequestWithReset:1];
    }

    else
    {
      if (v15)
      {
        *(_WORD *)id v16 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Banner dismissed after Paired Unlock finished. Doing nothing according to policy.",  v16,  2u);
      }
    }
  }

id sub_1001449B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = paired_unlock_log(a1, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Paired Unlock Banner lock button tapped. Disabling Paired unlock until watch off wrist or unlocked",  buf,  2u);
  }

  [*(id *)(a1 + 32) setNeedsOffWristBeforePairedUnlock:1];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delayedStartTimer]);

  uint64_t v8 = paired_unlock_log(v6, v7);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v10)
    {
      *(_WORD *)id v16 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Lock button tapped before starting Paired Unlock. Not starting Paired Unlock",  v16,  2u);
    }

    [*(id *)(a1 + 32) invalidateDelayedStartTimer];
  }

  else
  {
    if (v10)
    {
      *(_WORD *)BOOL v15 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Lock button tapped during or after Paired Unlock. Relocking watch if necessary",  v15,  2u);
    }

    [*(id *)(a1 + 32) sendRelockRequestWithReset:1];
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metrics]);

  if (v11)
  {
    int v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metrics]);
    [v12 setRelockedWatch:1];

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metrics]);
    [v13 setFailureReason:17];
  }

  return objc_msgSend( *(id *)(a1 + 32),  "sendResetMessage:reason:",  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 128), "unlockSessionID"),  17);
}

id sub_100145154(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = paired_unlock_log(a1, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Delayed start timer fired", v7, 2u);
  }

  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    (*(void (**)(void))(v5 + 16))();
  }
  return [*(id *)(a1 + 32) invalidateDelayedStartTimer];
}

id sub_100145344(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = paired_unlock_log(a1, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Long-term key timer fired, resetting state",  v6,  2u);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 67LL) = 0;
  [*(id *)(a1 + 32) releaseKeyBagAssertion];
  return [*(id *)(a1 + 32) abortDevicePairingWithReason:@"com.apple.sharingd.abort-reason.response.timeout"];
}

void sub_100145670(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 96LL);
  uint64_t v3 = objc_opt_new(&OBJC_CLASS___NSDate);
  [v2 timeIntervalSinceDate:v3];
  double v5 = v4;

  if (v5 > 0.0 && ![*(id *)(a1 + 32) unlockingState])
  {
    uint64_t v7 = paired_unlock_log(0LL, v6);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Retrying unlock after switch", v11, 2u);
    }

    [*(id *)(a1 + 32) startUnlockIfNeeded];
    uint64_t v9 = *(void *)(a1 + 32);
    BOOL v10 = *(void **)(v9 + 96);
    *(void *)(v9 + 96) = 0LL;
  }

void sub_100145CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = paired_unlock_log(a1, a2);
  double v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "State timer fired, assuming devices are not connected",  v9,  2u);
  }

  double v5 = *(void **)(a1 + 32);
  uint64_t v6 = SFUnlockErrorDomian;
  NSErrorUserInfoKey v10 = NSLocalizedDescriptionKey;
  uint64_t v11 = @"Remote never responded with state";
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v11,  &v10,  1LL));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v6,  113LL,  v7));
  [v5 notifyUnlockStateWithState:0 error:v8];
}

void sub_10014608C(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    if ([*(id *)(a1 + 32) unlockEnabled])
    {
      unsigned int v2 = [*(id *)(a1 + 32) initiateStashBagCreationWithManifest:0];
      uint64_t v3 = *(void *)(a1 + 40);
      if (v2)
      {
        id v4 = [*(id *)(a1 + 40) copy];
        uint64_t v5 = *(void *)(a1 + 32);
        uint64_t v6 = *(void **)(v5 + 144);
        *(void *)(v5 + 144) = v4;

        return;
      }

      uint64_t v11 = SFUnlockErrorDomian;
      NSErrorUserInfoKey v15 = NSLocalizedDescriptionKey;
      id v16 = @"Could not initiate stash creation";
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v16,  &v15,  1LL));
      uint64_t v9 = v11;
      uint64_t v10 = 101LL;
    }

    else
    {
      uint64_t v3 = *(void *)(a1 + 40);
      uint64_t v7 = SFUnlockErrorDomian;
      NSErrorUserInfoKey v13 = NSLocalizedDescriptionKey;
      int v14 = @"Paired Unlock disabled";
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v14,  &v13,  1LL));
      uint64_t v9 = v7;
      uint64_t v10 = 109LL;
    }

    int v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v9,  v10,  v8));
    (*(void (**)(uint64_t, void, void *))(v3 + 16))(v3, 0LL, v12);
  }

void sub_1001462E4(uint64_t a1)
{
  if (*(void *)(a1 + 48))
  {
    if ([*(id *)(a1 + 32) unlockEnabled])
    {
      unsigned int v2 = [*(id *)(a1 + 32) initiateStashBagCreationWithManifest:*(void *)(a1 + 40)];
      uint64_t v3 = *(void *)(a1 + 48);
      if (v2)
      {
        id v4 = [*(id *)(a1 + 48) copy];
        uint64_t v5 = *(void *)(a1 + 32);
        uint64_t v6 = *(void **)(v5 + 144);
        *(void *)(v5 + 144) = v4;

        return;
      }

      uint64_t v11 = SFUnlockErrorDomian;
      NSErrorUserInfoKey v15 = NSLocalizedDescriptionKey;
      id v16 = @"Could not initiate stash creation with manifest";
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v16,  &v15,  1LL));
      uint64_t v9 = v11;
      uint64_t v10 = 101LL;
    }

    else
    {
      uint64_t v3 = *(void *)(a1 + 48);
      uint64_t v7 = SFUnlockErrorDomian;
      NSErrorUserInfoKey v13 = NSLocalizedDescriptionKey;
      int v14 = @"Paired Unlock disabled";
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v14,  &v13,  1LL));
      uint64_t v9 = v7;
      uint64_t v10 = 109LL;
    }

    int v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v9,  v10,  v8));
    (*(void (**)(uint64_t, void, void *))(v3 + 16))(v3, 0LL, v12);
  }

void sub_1001468E0(_Unwind_Exception *a1)
{
}

id sub_100148880(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = paired_unlock_log(a1, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10014B528();
  }

  id result = [*(id *)(a1 + 32) releaseKeyBagAssertion];
  uint64_t v6 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v6 + 67))
  {
    *(_BYTE *)(v6 + 67) = 0;
    [*(id *)(a1 + 32) invalidateLongTermKeyTimer];
    return [*(id *)(a1 + 32) abortDevicePairingWithReason:@"com.apple.sharingd.abort-reason.send.request"];
  }

  return result;
}

id sub_100148A3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = paired_unlock_log(a1, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10014B554();
  }

  return [*(id *)(a1 + 32) abortDevicePairingWithReason:@"com.apple.sharingd.abort-reason.send.response"];
}

id sub_100148BCC(uint64_t a1)
{
  return [*(id *)(a1 + 32) disableUnlockPairing];
}

id sub_100148D30(uint64_t a1)
{
  return [*(id *)(a1 + 32) disableUnlockPairing];
}

id sub_100148E6C(uint64_t a1)
{
  return [*(id *)(a1 + 32) disableUnlockPairing];
}

id sub_100148FBC(uint64_t a1)
{
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metrics]);

  if (v2)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metrics]);
    [v3 setFailureReason:24];
  }

  return [*(id *)(a1 + 32) resetAndClearState];
}

void sub_100149168(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = paired_unlock_log(v3, v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138412290;
    id v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Resetting state. Error: %@",  (uint8_t *)&v9,  0xCu);
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metrics]);
  if (v7)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metrics]);
    [v8 setFailureReason:24];
  }

  [*(id *)(a1 + 32) resetAndClearState];
}

void sub_100149380(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = SFUnlockErrorDomian;
  NSErrorUserInfoKey v5 = NSLocalizedDescriptionKey;
  uint64_t v6 = @"Message failed to send";
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v6,  &v5,  1LL));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v2,  103LL,  v3));
  [v1 notifyStashStateWithError:v4];
}

void sub_10014957C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = SFUnlockErrorDomian;
  NSErrorUserInfoKey v5 = NSLocalizedDescriptionKey;
  uint64_t v6 = @"Message failed to send";
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v6,  &v5,  1LL));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v2,  103LL,  v3));
  [v1 notifyStashStateWithError:v4];
}

void sub_10014974C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = paired_unlock_log(v3, v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
    sub_10014B580();
  }

  uint64_t v7 = *(void **)(a1 + 32);
  uint64_t v8 = SFUnlockErrorDomian;
  NSErrorUserInfoKey v11 = NSLocalizedDescriptionKey;
  int v12 = @"State request failed to send";
  int v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v12,  &v11,  1LL));
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v8,  103LL,  v9));
  [v7 notifyUnlockStateWithState:0 error:v10];
}

void sub_100149998(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = paired_unlock_log(v2, v3);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_10014B5E0();
  }
}

void sub_10014AEF4(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_10014AF00( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_10014AF20()
{
  sub_10014AF00( (void *)&_mh_execute_header,  v2,  v3,  "Received notification out of state (state = %d, isPaired = %@)",  v4,  v5,  v6,  v7,  2u);
  sub_1000241EC();
}

void sub_10014AFC4()
{
}

void sub_10014AFF0()
{
}

void sub_10014B01C()
{
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v0 longTermKey]);
  sub_1000241C0( (void *)&_mh_execute_header,  v2,  v3,  "Failed to sign remote key (has remote key = %@, remote key = %@)",  v4,  v5,  v6,  v7,  2u);

  sub_1000241EC();
}

void sub_10014B0C8(void *a1, os_log_s *a2)
{
  v4[0] = 67109120;
  v4[1] = [a1 pairingCompatibilityState];
  sub_10014AEF4( (void *)&_mh_execute_header,  a2,  v3,  "Failed to setup long-term key, incorrect state = %d",  (uint8_t *)v4);
  sub_10001480C();
}

void sub_10014B144()
{
}

void sub_10014B1A4()
{
}

void sub_10014B204()
{
}

void sub_10014B264()
{
}

void sub_10014B290()
{
}

void sub_10014B2BC()
{
}

void sub_10014B2E8(void *a1, void *a2)
{
  sub_10014AF00( (void *)&_mh_execute_header,  v3,  v4,  "Failed in exchange response (unlocking state = %d, has key = %@)",  v5,  v6,  v7,  v8,  2u);
  sub_1000241EC();
}

void sub_10014B390()
{
}

void sub_10014B3BC(int a1, os_log_s *a2, uint64_t a3)
{
  v3[0] = 67109120;
  v3[1] = a1;
  sub_10014AEF4((void *)&_mh_execute_header, a2, a3, "Error in stash key response = %d", (uint8_t *)v3);
  sub_1000147C8();
}

void sub_10014B424()
{
  else {
    uint64_t v3 = @"NO";
  }
  else {
    uint64_t v4 = @"NO";
  }
  else {
    uint64_t v5 = @"NO";
  }
  int v7 = 138413058;
  else {
    uint8_t v6 = @"NO";
  }
  uint64_t v8 = v3;
  __int16 v9 = 2112;
  id v10 = v4;
  __int16 v11 = 2112;
  int v12 = v5;
  __int16 v13 = 2112;
  int v14 = v6;
  _os_log_error_impl( (void *)&_mh_execute_header,  v0,  OS_LOG_TYPE_ERROR,  "State response is missing information (has unlock enabled = %@, unlock enabled = %@, has passcode enabled = %@, pass code enabled = %@",  (uint8_t *)&v7,  0x2Au);
}

void sub_10014B528()
{
}

void sub_10014B554()
{
}

void sub_10014B580()
{
  sub_100014820((void *)&_mh_execute_header, v0, v1, "Failed to send state request with error = %@", v2, v3, v4, v5, v6);
  sub_10001480C();
}

void sub_10014B5E0()
{
}

void sub_10014B640()
{
}

void sub_10014B66C()
{
}

void sub_10014B6A4(int *a1, os_log_s *a2, uint64_t a3)
{
  int v3 = *a1;
  v4[0] = 67109120;
  v4[1] = v3;
  sub_10014AEF4((void *)&_mh_execute_header, a2, a3, "Could not create AKS session (errorCode: %x)", (uint8_t *)v4);
  sub_1000147C8();
}

void sub_10014B710()
{
}

void sub_10014B73C()
{
}

void sub_10014B79C()
{
  sub_1000241C0( (void *)&_mh_execute_header,  v1,  v2,  "Initiating unlock out of state without record (state = %ld, record = %@)",  v3,  v4,  v5,  v6,  v7);
}

void sub_10014B828()
{
}

void sub_10014B854()
{
}

void sub_10014BDA8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10014BDD0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v1 = (void (**)(void, void, void, void))objc_claimAutoreleasedReturnValue([WeakRetained completionHandler]);
  v1[2](v1, 1LL, 0LL, 1LL);

  [WeakRetained openLinks];
}

uint64_t SDUnlockSessionAuthTokenReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 28) |= 4u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_43;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_45;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_43:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_45:
        uint64_t v29 = 24LL;
        goto LABEL_54;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 28) |= 2u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1LL || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v21 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_49;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_49:
        uint64_t v29 = 20LL;
        goto LABEL_54;
      case 3u:
        uint64_t Data = PBReaderReadData(a2);
        uint64_t v23 = objc_claimAutoreleasedReturnValue(Data);
        unsigned int v24 = *(void **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(va, 8) = v23;

        continue;
      case 4u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 28) |= 1u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      unint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v27 == -1LL || v27 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v28 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 1;
      v14 |= (unint64_t)(v28 & 0x7F) << v25;
      if ((v28 & 0x80) == 0) {
        goto LABEL_51;
      }
      v25 += 7;
      BOOL v9 = v26++ >= 9;
      if (v9)
      {
        LODWORD(v14) = 0;
        goto LABEL_53;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_51:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v14) = 0;
    }
LABEL_53:
    uint64_t v29 = 16LL;
LABEL_54:
    *(_DWORD *)(a1 + v29) = v14;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

__CFString *sub_10014CDC0(unsigned int a1)
{
  if (a1 >= 0x1A) {
    return (__CFString *)(id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unknown reason %hu",  a1));
  }
  else {
    return *(&off_1005CF920 + (__int16)a1);
  }
}

void sub_10014DA54(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 securityManager]);
  [v2 disableUnlockPairingForSecManager:v3];

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, SFPairedUnlockStateChangedNotification, 0LL, 0LL, 1u);
}

uint64_t sub_10014DC2C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, 1LL, 0LL);
  }
  return result;
}

id sub_10014DE68(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = paired_unlock_log(a1, a2);
  char v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Session timer fired, resetting state", v8, 2u);
  }

  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metrics]);
  if (v5)
  {
    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) metrics]);
    [v6 setFailureReason:19];
  }

  return [*(id *)(a1 + 32) resetAndClearState];
}

void sub_10014E04C(id a1, NSError *a2)
{
  uint64_t v2 = paired_unlock_log(a1, a2);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_10014EA84();
  }
}

void sub_10014E11C(id a1, NSError *a2)
{
  uint64_t v2 = paired_unlock_log(a1, a2);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_10014EAB0();
  }
}

void sub_10014EA84()
{
}

void sub_10014EAB0()
{
}

void sub_10014EADC()
{
}

void sub_10014EB08()
{
}

void sub_10014EB34()
{
}

void sub_10014EB60()
{
}

void sub_10014EB8C()
{
}

void sub_10014EBFC(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___SDNearbyAgent);
  uint64_t v2 = (void *)gSFNearbyAgent;
  gSFNearbyAgent = v1;
}

void sub_10014ECE4(_Unwind_Exception *a1)
{
}

void sub_100150004(_Unwind_Exception *a1)
{
}

const char *sub_100150060(unsigned int a1)
{
  if (a1 > 0xF) {
    return "?";
  }
  else {
    return off_1005CFE68[a1];
  }
}

void sub_100150084(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a3 identity]);

  if (v4) {
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }
}

void *sub_100150550(void *result)
{
  uint64_t v1 = result[4];
  unsigned int v2 = *(_DWORD *)(v1 + 848);
  if (*((_DWORD *)result + 10) != v2)
  {
    uint64_t v3 = result;
    if (dword_100643B70 <= 40)
    {
      if (dword_100643B70 != -1)
      {
LABEL_4:
        if (v2 > 0xF) {
          uint64_t v4 = "?";
        }
        else {
          uint64_t v4 = off_1005CFE68[v2];
        }
        uint64_t v6 = *((int *)v3 + 10);
        else {
          unint64_t v7 = off_1005CFE68[v6];
        }
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent setAudioRoutingScore:]_block_invoke",  40LL,  "Audio routing score changed: %s -> %s\n",  v4,  v7);
        uint64_t v1 = v3[4];
        goto LABEL_13;
      }

      int v5 = _LogCategory_Initialize(&dword_100643B70, 40LL);
      uint64_t v1 = v3[4];
      if (v5)
      {
        unsigned int v2 = *(_DWORD *)(v1 + 848);
        goto LABEL_4;
      }
    }

void *sub_1001506AC(void *result)
{
  int v1 = *((unsigned __int8 *)result + 40);
  uint64_t v2 = result[4];
  int v3 = *(unsigned __int8 *)(v2 + 840);
  if (v1 != v3)
  {
    uint64_t v4 = result;
    if (dword_100643B70 <= 30)
    {
      if (dword_100643B70 != -1)
      {
LABEL_4:
        if (v3) {
          int v5 = "yes";
        }
        else {
          int v5 = "no";
        }
        if (v1) {
          uint64_t v6 = "yes";
        }
        else {
          uint64_t v6 = "no";
        }
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent setAutoUnlockActive:]_block_invoke",  30LL,  "AutoUnlocking: %s -> %s\n",  v5,  v6);
        LOBYTE(v1) = *((_BYTE *)v4 + 40);
        uint64_t v2 = v4[4];
        goto LABEL_12;
      }

      int v7 = _LogCategory_Initialize(&dword_100643B70, 30LL);
      int v1 = *((unsigned __int8 *)v4 + 40);
      uint64_t v2 = v4[4];
      if (v7)
      {
        int v3 = *(unsigned __int8 *)(v2 + 840);
        goto LABEL_4;
      }
    }

void *sub_1001507E4(void *result)
{
  int v1 = *((unsigned __int8 *)result + 40);
  uint64_t v2 = result[4];
  int v3 = *(unsigned __int8 *)(v2 + 841);
  if (v1 != v3)
  {
    uint64_t v4 = result;
    if (dword_100643B70 <= 30)
    {
      if (dword_100643B70 != -1)
      {
LABEL_4:
        if (v3) {
          int v5 = "yes";
        }
        else {
          int v5 = "no";
        }
        if (v1) {
          uint64_t v6 = "yes";
        }
        else {
          uint64_t v6 = "no";
        }
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent setBoostNearbyInfo:]_block_invoke",  30LL,  "BoostNearbyInfo: %s -> %s\n",  v5,  v6);
        LOBYTE(v1) = *((_BYTE *)v4 + 40);
        uint64_t v2 = v4[4];
        goto LABEL_12;
      }

      int v7 = _LogCategory_Initialize(&dword_100643B70, 30LL);
      int v1 = *((unsigned __int8 *)v4 + 40);
      uint64_t v2 = v4[4];
      if (v7)
      {
        int v3 = *(unsigned __int8 *)(v2 + 841);
        goto LABEL_4;
      }
    }

void *sub_10015091C(void *result)
{
  int v1 = result;
  uint64_t v2 = result[4];
  int v3 = *(_DWORD *)(v2 + 476);
  if (*((_BYTE *)result + 40)) {
    int v4 = v3 + 1;
  }
  else {
    int v4 = v3 - 1;
  }
  *(_DWORD *)(v2 + 476) = v4;
  uint64_t v5 = result[4];
  int v6 = *(_DWORD *)(v5 + 476);
  int v7 = v6 != 0;
  int v8 = *(unsigned __int8 *)(v5 + 842);
  if (v8 != v7)
  {
    if (dword_100643B70 <= 30)
    {
      if (dword_100643B70 != -1)
      {
LABEL_13:
        int v10 = "yes";
        if (v8) {
          __int16 v11 = "yes";
        }
        else {
          __int16 v11 = "no";
        }
        if (!v6) {
          int v10 = "no";
        }
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent setEnhancedDiscovery:]_block_invoke",  30LL,  "EnhancedDiscovery: %s -> %s\n",  v11,  v10);
        uint64_t v5 = v1[4];
        goto LABEL_22;
      }

      int v12 = _LogCategory_Initialize(&dword_100643B70, 30LL);
      uint64_t v5 = v1[4];
      if (v12)
      {
        int v8 = *(unsigned __int8 *)(v5 + 842);
        goto LABEL_13;
      }
    }

_DWORD *sub_100150AF0(_DWORD *result)
{
  int v1 = result[10];
  uint64_t v2 = *((void *)result + 4);
  int v3 = *(_DWORD *)(v2 + 852);
  if (v1 != v3)
  {
    int v4 = result;
    if (dword_100643B70 <= 20)
    {
      if (dword_100643B70 == -1)
      {
        int v5 = _LogCategory_Initialize(&dword_100643B70, 20LL);
        int v1 = v4[10];
        uint64_t v2 = *((void *)v4 + 4);
        if (!v5) {
          goto LABEL_6;
        }
        int v3 = *(_DWORD *)(v2 + 852);
      }

      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent setHotspotInfo:]_block_invoke",  20LL,  "HotspotInfo: 0x%X -> 0x%X\n",  v3,  v1);
      int v1 = v4[10];
      uint64_t v2 = *((void *)v4 + 4);
    }

_BYTE *sub_100150C14(uint64_t a1)
{
  uint64_t result = *(_BYTE **)(a1 + 32);
  if (!result[8]) {
    return [result _activate];
  }
  return result;
}

id sub_10015123C(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 32) + 512LL);
  uint64_t state64 = 0LL;
  notify_get_state(v2, &state64);
  *(void *)(*(void *)(a1 + 32) + 504LL) = state64;
  if (dword_100643B70 <= 30 && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 30LL))) {
    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _activate]_block_invoke",  30LL,  "Family flags changed: 0x%llX\n",  *(void *)(*(void *)(a1 + 32) + 504LL));
  }
  return [*(id *)(a1 + 32) _update];
}

id sub_1001512E4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _bleAdvertisingAddressChanged];
}

id sub_100151354(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

id sub_1001513C4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

uint64_t sub_100151434(uint64_t result)
{
  uint64_t v1 = result;
  if (dword_100643B70 <= 50)
  {
    if (dword_100643B70 != -1 || (uint64_t result = _LogCategory_Initialize(&dword_100643B70, 50LL), (_DWORD)result)) {
      uint64_t result = LogPrintF(&dword_100643B70, "-[SDNearbyAgent _activate]_block_invoke_5", 50LL, "Manatee state changed\n");
    }
  }

  *(_DWORD *)(*(void *)(v1 + 32) + 636LL) = -1;
  return result;
}

id sub_1001514AC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _idsMeDeviceChanged];
}

id sub_10015151C(uint64_t a1)
{
  *(_DWORD *)(*(void *)(a1 + 32) + 60LL) = -1;
  return [*(id *)(a1 + 32) _update];
}

id sub_100151598(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

id sub_10015161C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

id sub_10015168C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

void sub_1001516FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(dispatch_queue_s **)(v1 + 872);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100151754;
  block[3] = &unk_1005CB2F8;
  void block[4] = v1;
  dispatch_async(v2, block);
}

id sub_100151754(uint64_t a1)
{
  if (dword_100643B70 <= 50 && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 50LL))) {
    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _activate]_block_invoke_12",  50LL,  "System monitor activation completed\n");
  }
  *(_DWORD *)(*(void *)(a1 + 32) + 636LL) = -1;
  return [*(id *)(a1 + 32) _update];
}

id sub_10015183C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

void sub_100151D8C(_Unwind_Exception *a1)
{
}

void *sub_100151E00(void *result)
{
  if (*(void *)(result[4] + 720LL))
  {
    uint64_t v1 = result;
    if (dword_100643B70 <= 40
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 40LL)))
    {
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _handleAirDropDiscoverableModeChanged:]_block_invoke",  40LL,  "AirDrop discoverable mode changed\n");
    }

    return [(id)v1[4] _update];
  }

  return result;
}

void *sub_100151EE0(void *result)
{
  if (*(void *)(result[4] + 720LL))
  {
    uint64_t v1 = result;
    if (dword_100643B70 <= 40
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 40LL)))
    {
      LogPrintF(&dword_100643B70, "-[SDNearbyAgent _handleAppleIDChanged:]_block_invoke", 40LL, "AppleID changed\n");
    }

    uint64_t v2 = v1[4];
    int v3 = *(void **)(v2 + 352);
    *(void *)(v2 + 352) = 0LL;

    return [(id)v1[4] _update];
  }

  return result;
}

LABEL_62:
    self->_caForce = v24;
  }

  unsigned int v26 = CFPrefs_GetInt64(@"com.apple.Sharing", @"caPhoneCalls", 0LL);
  unint64_t v27 = v26 != 0;
  if (self->_caPhoneCalls != v27)
  {
    if (dword_100643B70 <= 40)
    {
      char v28 = v26;
      if (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 40LL))
      {
        uint64_t v29 = "yes";
        if (v28) {
          v30 = "no";
        }
        else {
          v30 = "yes";
        }
        if (!v28) {
          uint64_t v29 = "no";
        }
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent prefsChanged]",  40LL,  "Coordinated Alerts phone calls: %s -> %s\n",  v30,  v29);
      }
    }

    self->_caPhoneCalls = v27;
  }

  v31 = CFPrefs_GetInt64(@"com.apple.Sharing", @"caScanIfVeryActive", 0LL);
  v32 = v31 != 0;
  if (self->_caScanIfVeryActive != v32)
  {
    if (dword_100643B70 <= 40)
    {
      v33 = v31;
      if (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 40LL))
      {
        v34 = "yes";
        if (v33) {
          v35 = "no";
        }
        else {
          v35 = "yes";
        }
        if (!v33) {
          v34 = "no";
        }
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent prefsChanged]",  40LL,  "Coordinated Alerts scan if very active: %s -> %s\n",  v35,  v34);
      }
    }

    self->_caScanIfVeryActive = v32;
  }

  v36 = CFPrefs_GetInt64(@"com.apple.Sharing", @"caScanIfHasVisionOS1", 0LL);
  v37 = v36 != 0;
  if (self->_caScanIfHasVisionOS1 != v37)
  {
    if (dword_100643B70 <= 40)
    {
      v38 = v36;
      if (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 40LL))
      {
        v39 = "yes";
        if (v38) {
          v40 = "no";
        }
        else {
          v40 = "yes";
        }
        if (!v38) {
          v39 = "no";
        }
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent prefsChanged]",  40LL,  "Coordinated Alerts scan if has visionOS 1.X device(s): %s -> %s\n",  v40,  v39);
      }
    }

    self->_caScanIfHasVisionOS1 = v37;
  }

  v41 = CFPrefs_GetInt64(@"com.apple.Sharing", @"caSingleDevice", 0LL);
  v42 = v41 != 0;
  if (self->_caSingleDevice != v42)
  {
    if (dword_100643B70 <= 40)
    {
      v43 = v41;
      if (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 40LL))
      {
        v44 = "yes";
        if (v43) {
          v45 = "no";
        }
        else {
          v45 = "yes";
        }
        if (!v43) {
          v44 = "no";
        }
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent prefsChanged]",  40LL,  "Coordinated Alerts single device: %s -> %s\n",  v45,  v44);
      }
    }

    self->_caSingleDevice = v42;
  }

  v46 = CFPrefs_GetInt64(@"com.apple.Sharing", @"donDevicePeriodicScanIntervalSecs", &v168);
  if (v46 >= 480) {
    v47 = 480LL;
  }
  else {
    v47 = v46;
  }
  if (v47 <= 1) {
    LODWORD(v47) = 1;
  }
  if (v168) {
    v48 = 480;
  }
  else {
    v48 = v47;
  }
  donnedDeviceScanIntervalSeconds = self->_donnedDeviceScanIntervalSeconds;
  if (v48 != donnedDeviceScanIntervalSeconds)
  {
    if (dword_100643B70 <= 40)
    {
      if (dword_100643B70 == -1)
      {
        donnedDeviceScanIntervalSeconds = self->_donnedDeviceScanIntervalSeconds;
      }

      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent prefsChanged]",  40LL,  "Donned device scan interval seconds: %d -> %d\n",  donnedDeviceScanIntervalSeconds,  v48);
    }

                __break(1u);
                goto LABEL_63;
              }

LABEL_120:
    self->_donnedDeviceScanIntervalSeconds = v48;
  }

  v50 = CFPrefs_GetInt64(@"com.apple.Sharing", @"idEnabled", &v168);
  if (v168) {
    v51 = 0;
  }
  else {
    v51 = v50 == 0;
  }
  v52 = !v51;
  if (self->_idEnabled != v52)
  {
    if (dword_100643B70 <= 40
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 40LL)))
    {
      v53 = "yes";
      if (v52) {
        v54 = "no";
      }
      else {
        v54 = "yes";
      }
      if (!v52) {
        v53 = "no";
      }
      LogPrintF(&dword_100643B70, "-[SDNearbyAgent prefsChanged]", 40LL, "Identification enabled: %s -> %s\n", v54, v53);
    }

    self->_idEnabled = v52;
  }

  v55 = CFPrefs_GetInt64(@"com.apple.Sharing", @"ignoreWristLockState", 0LL);
  v56 = v55 != 0;
  if (self->_ignoreWatchWristLockState != v56)
  {
    if (dword_100643B70 <= 40)
    {
      v57 = v55;
      if (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 40LL))
      {
        v58 = "yes";
        if (v57) {
          v59 = "no";
        }
        else {
          v59 = "yes";
        }
        if (!v57) {
          v58 = "no";
        }
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent prefsChanged]",  40LL,  "Ignore watch wrist lock state: %s -> %s\n",  v59,  v58);
      }
    }

    self->_ignoreWatchWristLockState = v56;
  }

  v60 = CFPrefs_GetInt64(@"com.apple.Sharing", @"nearbyActionAdvertiseDisabled", 0LL);
  v61 = v60 != 0;
  if (self->_bleNearbyActionAdvertiseDisabled != v61)
  {
    if (dword_100643B70 <= 40)
    {
      v62 = v60;
      if (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 40LL))
      {
        v63 = "yes";
        if (v62) {
          v64 = "no";
        }
        else {
          v64 = "yes";
        }
        if (!v62) {
          v63 = "no";
        }
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent prefsChanged]",  40LL,  "NearbyAction advertise disabled: %s -> %s\n",  v64,  v63);
      }
    }

    self->_bleNearbyActionAdvertiseDisabled = v61;
  }

  v65 = CFPrefs_GetInt64(@"com.apple.Sharing", @"nearbyActionRSSILog", 0LL);
  v66 = v65 != 0;
  if (self->_bleNearbyActionRSSILog != v66)
  {
    if (dword_100643B70 <= 40)
    {
      v67 = v65;
      if (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 40LL))
      {
        v68 = "yes";
        if (v67) {
          v69 = "no";
        }
        else {
          v69 = "yes";
        }
        if (!v67) {
          v68 = "no";
        }
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent prefsChanged]",  40LL,  "NearbyAction RSSI log: %s -> %s\n",  v69,  v68);
      }
    }

    self->_bleNearbyActionRSSILog = v66;
  }

  v70 = CFPrefs_GetInt64(@"com.apple.Sharing", @"nearbyActionScan", &v168);
  v71 = v70 != 0;
  if (self->_bleNearbyActionScanAlways != v71)
  {
    if (dword_100643B70 <= 40
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 40LL)))
    {
      v72 = "yes";
      if (v70) {
        v73 = "no";
      }
      else {
        v73 = "yes";
      }
      if (!v70) {
        v72 = "no";
      }
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent prefsChanged]",  40LL,  "NearbyAction scan always: %s -> %s\n",  v73,  v72);
    }

    self->_bleNearbyActionScanAlways = v71;
  }

  if (v168) {
    v74 = 0;
  }
  else {
    v74 = v70 == 0;
  }
  v75 = v74;
  if (self->_bleNearbyActionScanNever != v75)
  {
    if (dword_100643B70 <= 40
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 40LL)))
    {
      v76 = "yes";
      if (v75) {
        v77 = "no";
      }
      else {
        v77 = "yes";
      }
      if (!v75) {
        v76 = "no";
      }
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent prefsChanged]",  40LL,  "NearbyAction scan never: %s -> %s\n",  v77,  v76);
    }

    self->_bleNearbyActionScanNever = v75;
  }

  CFPrefs_GetData(@"com.apple.Sharing", @"nearbyAuthTagOverride", &v169, 8LL, &v167, &v168);
  if (v168)
  {
    v78 = 0LL;
  }

  else
  {
    v79 = objc_alloc(&OBJC_CLASS___NSData);
    v78 = -[NSData initWithBytes:length:](v79, "initWithBytes:length:", &v169, v167);
  }

  bleAuthTagOverride = self->_bleAuthTagOverride;
  v81 = v78;
  v82 = bleAuthTagOverride;
  if (v81 == v82)
  {

    v85 = v81;
LABEL_213:

    goto LABEL_214;
  }

  v83 = v82;
  if ((v81 == 0LL) == (v82 != 0LL))
  {

LABEL_208:
    if (dword_100643B70 <= 40
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 40LL)))
    {
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent prefsChanged]",  40LL,  "Nearby AuthTag override: %@ -> %@\n",  self->_bleAuthTagOverride,  v81);
    }

    v86 = v81;
    v85 = self->_bleAuthTagOverride;
    self->_bleAuthTagOverride = v86;
    goto LABEL_213;
  }

  v84 = -[NSData isEqual:](v81, "isEqual:", v82);

  if ((v84 & 1) == 0) {
    goto LABEL_208;
  }
LABEL_214:
  v87 = CFPrefs_GetInt64(@"com.apple.Sharing", @"nearbyInfoAdvertiseAlways", &v168);
  v89 = v87 != 0;
  if (v168)
  {
    v90 = v87;
    IsVirtualMachine = SFDeviceIsVirtualMachine(v87, v88);
    if (v90) {
      v89 = 1;
    }
    else {
      v89 = IsVirtualMachine;
    }
  }

  if (self->_bleNearbyInfoAdvertiseAlways != v89)
  {
    if (dword_100643B70 <= 40
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 40LL)))
    {
      v92 = "yes";
      if (v89) {
        v93 = "no";
      }
      else {
        v93 = "yes";
      }
      if (!v89) {
        v92 = "no";
      }
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent prefsChanged]",  40LL,  "NearbyInfo advertise always: %s -> %s\n",  v93,  v92);
    }

    self->_bleNearbyInfoAdvertiseAlways = v89;
  }

  v94 = CFPrefs_GetInt64(@"com.apple.Sharing", @"nearbyInfoAdvertiseDisabled", 0LL);
  v95 = v94 != 0;
  if (self->_bleNearbyInfoAdvertiseDisabled != v95)
  {
    if (dword_100643B70 <= 40)
    {
      v96 = v94;
      if (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 40LL))
      {
        v97 = "yes";
        if (v96) {
          v98 = "no";
        }
        else {
          v98 = "yes";
        }
        if (!v96) {
          v97 = "no";
        }
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent prefsChanged]",  40LL,  "NearbyInfo advertise disabled: %s -> %s\n",  v98,  v97);
      }
    }

    self->_bleNearbyInfoAdvertiseDisabled = v95;
  }

  Double = CFPrefs_GetDouble(@"com.apple.Sharing", @"nearbyInfoAdvertiseLingerSecs", &v168);
  if (Double <= 1000.0 && v168 == 0) {
    v101 = Double;
  }
  else {
    v101 = 5.0;
  }
  bleNearbyInfoAdvertiseLingerSecs = self->_bleNearbyInfoAdvertiseLingerSecs;
  if (v101 != bleNearbyInfoAdvertiseLingerSecs)
  {
    if (dword_100643B70 <= 40)
    {
      if (dword_100643B70 == -1)
      {
        bleNearbyInfoAdvertiseLingerSecs = self->_bleNearbyInfoAdvertiseLingerSecs;
      }

      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent prefsChanged]",  40LL,  "NearbyInfo advertise linger seconds: %.0f -> %.0f\n",  bleNearbyInfoAdvertiseLingerSecs,  v101);
    }

LABEL_251:
    self->_bleNearbyInfoAdvertiseLingerSecs = v101;
  }

  v103 = CFPrefs_GetInt64(@"com.apple.Sharing", @"nearbyInfoRSSILog", 0LL);
  v104 = v103 != 0;
  if (self->_bleNearbyInfoRSSILog != v104)
  {
    if (dword_100643B70 <= 40)
    {
      v105 = v103;
      if (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 40LL))
      {
        v106 = "yes";
        if (v105) {
          v107 = "no";
        }
        else {
          v107 = "yes";
        }
        if (!v105) {
          v106 = "no";
        }
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent prefsChanged]",  40LL,  "NearbyInfo RSSI log: %s -> %s\n",  v107,  v106);
      }
    }

    self->_bleNearbyInfoRSSILog = v104;
  }

  v108 = CFPrefs_GetInt64(@"com.apple.Sharing", @"nearbyInfoWiFiP2P", &v168);
  if (v168) {
    v109 = 0;
  }
  else {
    v109 = v108 == 0;
  }
  v110 = !v109;
  if (self->_bleNearbyInfoWiFiP2P != v110)
  {
    if (dword_100643B70 <= 40
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 40LL)))
    {
      v111 = "yes";
      if (v110) {
        v112 = "no";
      }
      else {
        v112 = "yes";
      }
      if (!v110) {
        v111 = "no";
      }
      LogPrintF(&dword_100643B70, "-[SDNearbyAgent prefsChanged]", 40LL, "NearbyInfo WiFiP2P: %s -> %s\n", v112, v111);
    }

    self->_bleNearbyInfoWiFiP2P = v110;
  }

  v113 = CFPrefs_GetInt64(@"com.apple.Sharing", @"pwsContactHashes", &v168);
  if (v168) {
    v114 = 0;
  }
  else {
    v114 = v113 == 0;
  }
  v115 = !v114;
  if (self->_contactHashesEnabled != v115)
  {
    if (dword_100643B70 <= 40
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 40LL)))
    {
      v116 = "yes";
      if (v115) {
        v117 = "no";
      }
      else {
        v117 = "yes";
      }
      if (!v115) {
        v116 = "no";
      }
      LogPrintF(&dword_100643B70, "-[SDNearbyAgent prefsChanged]", 40LL, "ContactHashes: %s -> %s\n", v117, v116);
    }

    self->_contactHashesEnabled = v115;
  }

  v118 = CFPrefs_GetInt64(@"com.apple.Sharing", @"ppAdvFieldsLog", 0LL);
  v119 = v118 != 0;
  if (self->_logProxAdvFields != v119)
  {
    if (dword_100643B70 <= 40)
    {
      v120 = v118;
      if (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 40LL))
      {
        v121 = "yes";
        if (v120) {
          v122 = "no";
        }
        else {
          v122 = "yes";
        }
        if (!v120) {
          v121 = "no";
        }
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent prefsChanged]",  40LL,  "Log ProxPairing advertisement fields: %s -> %s\n",  v122,  v121);
      }
    }

    self->_logProxAdvFields = v119;
  }

  v123 = CFPrefs_GetInt64(@"com.apple.Sharing", @"ppEnabled", &v168);
  if (v168) {
    v124 = 0;
  }
  else {
    v124 = v123 == 0;
  }
  v125 = !v124;
  if (self->_bleProximityEnabled != v125)
  {
    if (dword_100643B70 <= 40
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 40LL)))
    {
      v126 = "yes";
      if (v125) {
        v127 = "no";
      }
      else {
        v127 = "yes";
      }
      if (!v125) {
        v126 = "no";
      }
      LogPrintF(&dword_100643B70, "-[SDNearbyAgent prefsChanged]", 40LL, "Proximity Enabled: %s -> %s\n", v127, v126);
    }

    self->_bleProximityEnabled = v125;
  }

  TypeID = CFDictionaryGetTypeID();
  v129 = (void *)CFPrefs_CopyTypedValue(@"com.apple.Sharing", @"ppInfoOverride", TypeID, 0LL);
  bleProximityInfoOverride = self->_bleProximityInfoOverride;
  v131 = v129;
  v132 = bleProximityInfoOverride;
  if (v131 == v132)
  {

    v135 = v131;
  }

  else
  {
    v133 = v132;
    if ((v131 == 0LL) != (v132 != 0LL))
    {
      v134 = -[NSDictionary isEqual:](v131, "isEqual:", v132);

      if ((v134 & 1) != 0) {
        goto LABEL_337;
      }
    }

    else
    {
    }

    if (dword_100643B70 <= 40
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 40LL)))
    {
      LogPrintF(&dword_100643B70, "-[SDNearbyAgent prefsChanged]", 40LL, "Proximity Info Override: %@\n", v131);
    }

    v136 = v131;
    v135 = self->_bleProximityInfoOverride;
    self->_bleProximityInfoOverride = v136;
  }

LABEL_337:
  v137 = CFDictionaryGetTypeID();
  v138 = (void *)CFPrefs_CopyTypedValue(@"com.apple.Sharing", @"ppRSSIEstimatorInfo", v137, 0LL);

  if (v138
    || (v138 = (void *)objc_claimAutoreleasedReturnValue(-[SDNearbyAgent bleProximityRSSIEstimatorInfo](self, "bleProximityRSSIEstimatorInfo"))) != 0LL)
  {
    +[SFBLEDevice setRSSIEstimatorInfo:](&OBJC_CLASS___SFBLEDevice, "setRSSIEstimatorInfo:", v138);
  }

  v139 = CFPrefs_GetInt64(@"com.apple.Sharing", @"ppRSSILog", 0LL);
  v140 = v139 != 0;
  if (self->_bleProximityRSSILog != v140)
  {
    if (dword_100643B70 <= 40)
    {
      v141 = v139;
      if (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 40LL))
      {
        v142 = "yes";
        if (v141) {
          v143 = "no";
        }
        else {
          v143 = "yes";
        }
        if (!v141) {
          v142 = "no";
        }
        LogPrintF(&dword_100643B70, "-[SDNearbyAgent prefsChanged]", 40LL, "Proximity RSSI log: %s -> %s\n", v143, v142);
      }
    }

    self->_bleProximityRSSILog = v140;
  }

  v144 = CFPrefs_GetInt64(@"com.apple.Sharing", @"homePodIdentifiesAsB520", &v168);
  if (v168) {
    v145 = 1;
  }
  else {
    v145 = v144 == 0;
  }
  v146 = !v145;
  if (self->_homePodIdentifiesAsB520 != v146)
  {
    if (dword_100643B70 <= 40
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 40LL)))
    {
      v147 = "yes";
      if (v146) {
        v148 = "no";
      }
      else {
        v148 = "yes";
      }
      if (!v146) {
        v147 = "no";
      }
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent prefsChanged]",  40LL,  "HomePod identifying as B520: %s -> %s\n",  v148,  v147);
    }

    self->_homePodIdentifiesAsB520 = v146;
  }

  v149 = CFPrefs_GetInt64(@"com.apple.Sharing", @"homePodIdentifiesAsB620", &v168);
  if (v168) {
    v150 = 1;
  }
  else {
    v150 = v149 == 0;
  }
  v151 = !v150;
  if (self->_homePodIdentifiesAsB620 != v151)
  {
    if (dword_100643B70 <= 40
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 40LL)))
    {
      v152 = "yes";
      if (v151) {
        v153 = "no";
      }
      else {
        v153 = "yes";
      }
      if (!v151) {
        v152 = "no";
      }
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent prefsChanged]",  40LL,  "HomePod identifying as B620: %s -> %s\n",  v153,  v152);
    }

    self->_homePodIdentifiesAsB620 = v151;
  }

  v154 = CFPrefs_GetInt64(@"com.apple.Sharing", @"homePodModelCodeOverride", &v168);
  if (v168) {
    v155 = -1LL;
  }
  else {
    v155 = v154;
  }
  homePodModelCodeOverride = self->_homePodModelCodeOverride;
  if (v155 != homePodModelCodeOverride)
  {
    if (dword_100643B70 <= 40)
    {
      if (dword_100643B70 == -1)
      {
        LODWORD(homePodModelCodeOverride) = self->_homePodModelCodeOverride;
      }

      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent prefsChanged]",  40LL,  "HomePod model code override: %d -> %d\n",  homePodModelCodeOverride,  v155);
    }

LABEL_393:
    self->_homePodModelCodeOverride = v155;
  }

  v157 = CFPrefs_GetInt64(@"com.apple.Sharing", @"riClientEnabled", &v168);
  if (v168) {
    v158 = 1;
  }
  else {
    v158 = v157 == 0;
  }
  v159 = !v158;
  if (self->_isRIClientEnabled != v159)
  {
    if (dword_100643B70 <= 40
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 40LL)))
    {
      v160 = "yes";
      if (v159) {
        v161 = "no";
      }
      else {
        v161 = "yes";
      }
      if (!v159) {
        v160 = "no";
      }
      LogPrintF(&dword_100643B70, "-[SDNearbyAgent prefsChanged]", 40LL, "RIClient is enabled: %s -> %s\n", v161, v160);
    }

    self->_isRIClientEnabled = v159;
  }

  v162 = CFPrefs_GetInt64(@"com.apple.Sharing", @"simulateDonStateChanges", 0LL);
  v163 = v162 != 0;
  if (self->_simulateDonStateChanges != v163)
  {
    if (dword_100643B70 <= 40)
    {
      v164 = v162;
      if (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 40LL))
      {
        v165 = "yes";
        if (v164) {
          v166 = "no";
        }
        else {
          v166 = "yes";
        }
        if (!v164) {
          v165 = "no";
        }
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent prefsChanged]",  40LL,  "Simulate don state changes: %s -> %s\n",  v166,  v165);
      }
    }

    self->_simulateDonStateChanges = v163;
  }

  -[SDNearbyAgent _update](self, "_update");
}

id sub_100153584(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

void sub_10015378C(_Unwind_Exception *a1)
{
}

id sub_100153C34(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _activityMonitorUpdate];
}

void *sub_100153F4C(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 32);
  int v3 = (void *)result[90];
  if (v3)
  {
    if (dword_100643B70 <= 40)
    {
      if (dword_100643B70 != -1)
      {
LABEL_4:
        unsigned int v4 = [v3 carplayConnected];
        int v5 = "off";
        if (v4) {
          int v5 = "on";
        }
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _activityMonitorCarPlayStatusChanged:]_block_invoke",  40LL,  "CarPlay changed to %s\n",  v5);
        uint64_t result = *(void **)(a1 + 32);
        return [result _update];
      }

      int v6 = _LogCategory_Initialize(&dword_100643B70, 40LL);
      uint64_t result = *(void **)(a1 + 32);
      if (v6)
      {
        int v3 = (void *)result[90];
        goto LABEL_4;
      }
    }

    return [result _update];
  }

  return result;
}

void *sub_100154094(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 32);
  int v3 = (void *)result[90];
  if (v3)
  {
    if (dword_100643B70 <= 40)
    {
      if (dword_100643B70 != -1)
      {
LABEL_4:
        unsigned int v4 = [v3 multipleUsersLoggedIn];
        int v5 = "no";
        if (v4) {
          int v5 = "yes";
        }
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _activityMonitorMultipleUsersLoggedInChanged:]_block_invoke",  40LL,  "Multiple users logged in changed: %s\n",  v5);
        uint64_t result = *(void **)(a1 + 32);
        return [result _update];
      }

      int v6 = _LogCategory_Initialize(&dword_100643B70, 40LL);
      uint64_t result = *(void **)(a1 + 32);
      if (v6)
      {
        int v3 = (void *)result[90];
        goto LABEL_4;
      }
    }

    return [result _update];
  }

  return result;
}

unsigned __int8 *sub_1001541CC(unsigned __int8 *result)
{
  uint64_t v1 = *((void *)result + 4);
  if (*(void *)(v1 + 720))
  {
    uint64_t v2 = (id *)result;
    *(_BYTE *)(v1 + 44) = result[40];
    [*((id *)result + 4) _enhancedDiscoveryScreenChange:result[40]];
    return (unsigned __int8 *)[v2[4] _update];
  }

  return result;
}

id sub_100154270(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id result = *(id *)(v2 + 720);
  if (result)
  {
    int v4 = *(unsigned __int8 *)(v2 + 56);
    *(_BYTE *)(*(void *)(a1 + 32) + 56) = [result deviceUIUnlocked];
    if (dword_100643B70 <= 40
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 40LL)))
    {
      if (*(_BYTE *)(*(void *)(a1 + 32) + 56LL)) {
        int v5 = "unlocked";
      }
      else {
        int v5 = "locked";
      }
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _activityMonitorUILockStatusChanged:]_block_invoke",  40LL,  "UI lock status changed to %s\n",  v5);
    }

    uint64_t v6 = *(void *)(a1 + 32);
    if (!v4)
    {
      if (*(_BYTE *)(v6 + 56))
      {
        *(void *)(v6 + 36_Block_object_dispose(&STACK[0x270], 8) = 0LL;
        uint64_t v6 = *(void *)(a1 + 32);
      }
    }

    return [(id)v6 _update];
  }

  return result;
}

void *sub_1001543D4(uint64_t a1)
{
  id result = *(void **)(a1 + 32);
  int v3 = (void *)result[90];
  if (v3)
  {
    if (dword_100643B70 <= 40)
    {
      if (dword_100643B70 == -1)
      {
        int v4 = _LogCategory_Initialize(&dword_100643B70, 40LL);
        id result = *(void **)(a1 + 32);
        if (!v4) {
          return [result _update];
        }
        int v3 = (void *)result[90];
      }

      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _activityMonitorMediaAccessControlSettingChanged:]_block_invoke",  40,  "Media access control setting state changed: %d\n",  [v3 mediaAccessControlSetting]);
      id result = *(void **)(a1 + 32);
    }

    return [result _update];
  }

  return result;
}

void *sub_1001544DC(uint64_t a1)
{
  id result = *(void **)(a1 + 32);
  int v3 = (void *)result[90];
  if (v3)
  {
    if (dword_100643B70 <= 40)
    {
      if (dword_100643B70 == -1)
      {
        int v4 = _LogCategory_Initialize(&dword_100643B70, 40LL);
        id result = *(void **)(a1 + 32);
        if (!v4) {
          goto LABEL_7;
        }
        int v3 = (void *)result[90];
      }

      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _activityMonitorWatchWristStateChanged:]_block_invoke",  40,  "Watch wrist state changed: %d\n",  [v3 pairedWatchWristState]);
      id result = *(void **)(a1 + 32);
    }

uint64_t sub_100154610(uint64_t a1)
{
  char v3 = 0;
  [*(id *)(a1 + 32) _activityMonitorCurrentLevelAndNeedsPoll:0 recentUserActivity:&v3];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

LABEL_101:
        if (v75 != (id)++v10) {
          continue;
        }
        v75 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v80,  v86,  16LL);
        if (v75) {
          goto LABEL_3;
        }
        v42 = v9;

        if ((_BYTE)v78 || v5 - 28 <= 0x38 && ((1LL << (v5 - 28)) & 0x100000018008053LL) != 0 || v5 == 19)
        {
          self->_bleNearbyActionAdvertiseActive = 1;
          if (v73) {
            v43 = (uint64_t)v73;
          }
          else {
            v43 = 40LL;
          }
          char v3 = v65;
          if (v70)
          {
            v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v70));
            -[NSMutableDictionary setObject:forKeyedSubscript:](v65, "setObject:forKeyedSubscript:", v44, @"cl");
          }

          if (v71)
          {
            v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v71));
            -[NSMutableDictionary setObject:forKeyedSubscript:](v65, "setObject:forKeyedSubscript:", v45, @"cc");
          }

          if (v72)
          {
            v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v72));
            -[NSMutableDictionary setObject:forKeyedSubscript:](v65, "setObject:forKeyedSubscript:", v46, @"md");
          }

          if ((v78 & 0x20) != 0) {
            -[NSMutableDictionary setObject:forKeyedSubscript:]( v65,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"nk");
          }
          if ((v78 & 0x40) != 0) {
            -[NSMutableDictionary setObject:forKeyedSubscript:]( v65,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"ns");
          }
          if ((_BYTE)v78)
          {
            v47 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  v78));
            -[NSMutableDictionary setObject:forKeyedSubscript:](v65, "setObject:forKeyedSubscript:", v47, @"af1");
          }

          if (BYTE4(v78))
          {
            v48 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  BYTE4(v78)));
            -[NSMutableDictionary setObject:forKeyedSubscript:](v65, "setObject:forKeyedSubscript:", v48, @"af2");
          }

          if (v42) {
            -[NSMutableDictionary setObject:forKeyedSubscript:]( v65,  "setObject:forKeyedSubscript:",  v42,  @"tatag");
          }
          v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", v5));
          -[NSMutableDictionary setObject:forKeyedSubscript:](v65, "setObject:forKeyedSubscript:", v49, @"dt");

          -[SDNearbyAgent _bleUpdateAuthTagIfNeeded](self, "_bleUpdateAuthTagIfNeeded");
          bleAuthTagOverride = self->_bleAuthTagOverride;
          if (bleAuthTagOverride || (bleAuthTagOverride = v7) != 0LL || (bleAuthTagOverride = self->_bleAuthTag) != 0LL) {
            -[NSMutableDictionary setObject:forKeyedSubscript:]( v65,  "setObject:forKeyedSubscript:",  bleAuthTagOverride,  @"at");
          }
          if (v5 == 8 && self->_contactHashesEnabled)
          {
            v51 = self->_contactHashesCached;
            if (v51
              || (v51 = (NSData *)objc_claimAutoreleasedReturnValue(-[SDStatusMonitor myMediumHashes](self->_statusMonitor, "myMediumHashes")),
                  objc_storeStrong((id *)&self->_contactHashesCached, v51),
                  v51))
            {
              -[NSMutableDictionary setObject:forKeyedSubscript:]( v65,  "setObject:forKeyedSubscript:",  v51,  @"ach");
            }
          }

          if (v77)
          {
            v52 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:"));
            -[NSMutableDictionary setObject:forKeyedSubscript:](v65, "setObject:forKeyedSubscript:", v52, @"pf");
          }

          if (v8) {
            -[NSMutableDictionary setObject:forKeyedSubscript:](v65, "setObject:forKeyedSubscript:", v8, @"ssidH");
          }
          v53 = self->_bleNearbyActionAdvertiseLingerTimer;
          v54 = v53;
          if (v53)
          {
            dispatch_source_cancel((dispatch_source_t)v53);
            bleNearbyActionAdvertiseLingerTimer = self->_bleNearbyActionAdvertiseLingerTimer;
            self->_bleNearbyActionAdvertiseLingerTimer = 0LL;
          }

          if (self->_bleNearbyActionAdvertiser)
          {
            if (dword_100643B70 <= 30
              && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 30LL)))
            {
              LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleNearbyActionAdvertiserEnsureStarted]",  30LL,  "BLE NearbyAction advertiser update: %#{flags}\n",  v78,  &unk_1004CB48F);
            }

            -[SFBLEAdvertiser setPayloadFields:](self->_bleNearbyActionAdvertiser, "setPayloadFields:", v65);
            if ((id)v43 != -[SFBLEAdvertiser advertiseRate](self->_bleNearbyActionAdvertiser, "advertiseRate")) {
              -[SFBLEAdvertiser setAdvertiseRate:](self->_bleNearbyActionAdvertiser, "setAdvertiseRate:", v43);
            }
          }

          else
          {
            if (dword_100643B70 <= 30
              && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 30LL)))
            {
              LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleNearbyActionAdvertiserEnsureStarted]",  30LL,  "BLE NearbyAction advertiser start: %#{flags}, %##@\n",  v78,  &unk_1004CB48F,  v65);
            }

            v57 = -[SFBLEAdvertiser initWithType:](objc_alloc(&OBJC_CLASS___SFBLEAdvertiser), "initWithType:", 15LL);
            bleNearbyActionAdvertiser = self->_bleNearbyActionAdvertiser;
            self->_bleNearbyActionAdvertiser = v57;

            -[SFBLEAdvertiser setAdvertiseRate:](self->_bleNearbyActionAdvertiser, "setAdvertiseRate:", v43);
            -[SFBLEAdvertiser setDispatchQueue:]( self->_bleNearbyActionAdvertiser,  "setDispatchQueue:",  self->_dispatchQueue);
            v59 = (void *)objc_claimAutoreleasedReturnValue(-[SDNearbyAgent _idsBluetoothDeviceIDsForLEPipe](self, "_idsBluetoothDeviceIDsForLEPipe"));
            -[SFBLEAdvertiser setLePipeDevices:](self->_bleNearbyActionAdvertiser, "setLePipeDevices:", v59);

            -[SFBLEAdvertiser setPayloadFields:](self->_bleNearbyActionAdvertiser, "setPayloadFields:", v65);
            -[SFBLEAdvertiser activateWithCompletion:]( self->_bleNearbyActionAdvertiser,  "activateWithCompletion:",  &stru_1005CFA90);
          }

          v56 = (char *)v8;
        }

        else
        {
          char v3 = v65;
          v56 = (char *)v8;
LABEL_145:
          self->_bleNearbyActionAdvertiseActive = 0;
          if (self->_bleNearbyActionAdvertiser && !self->_bleNearbyActionAdvertiseLingerTimer)
          {
            if (dword_100643B70 <= 30
              && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 30LL)))
            {
              LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleNearbyActionAdvertiserEnsureStarted]",  30LL,  "BLE NearbyAction advertiser goodbye update: %#{flags}\n",  0LL,  &unk_1004CB48F);
            }

            -[SFBLEAdvertiser setPayloadFields:](self->_bleNearbyActionAdvertiser, "setPayloadFields:", v3);
            -[SFBLEAdvertiser setAdvertiseRate:](self->_bleNearbyActionAdvertiser, "setAdvertiseRate:", 50LL);
            if (dword_100643B70 <= 30
              && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 30LL)))
            {
              LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleNearbyActionAdvertiserEnsureStarted]",  30LL,  "BLE NearbyAction linger advertise for 5 seconds for goodbyes\n");
            }

            v60 = (OS_dispatch_source *)dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  (dispatch_queue_t)self->_dispatchQueue);
            v61 = self->_bleNearbyActionAdvertiseLingerTimer;
            self->_bleNearbyActionAdvertiseLingerTimer = v60;

            v62 = self->_bleNearbyActionAdvertiseLingerTimer;
            v63 = dispatch_time(0LL, 5000000000LL);
            dispatch_source_set_timer((dispatch_source_t)v62, v63, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
            v64 = self->_bleNearbyActionAdvertiseLingerTimer;
            handler[0] = _NSConcreteStackBlock;
            handler[1] = 3221225472LL;
            handler[2] = sub_1001553C4;
            handler[3] = &unk_1005CB2F8;
            handler[4] = self;
            dispatch_source_set_event_handler((dispatch_source_t)v64, handler);
            dispatch_resume((dispatch_object_t)self->_bleNearbyActionAdvertiseLingerTimer);
          }
        }

        return;
      case 4:
        uint64_t v14 = 480;
        goto LABEL_41;
      case 5:
        uint64_t v14 = 450;
        goto LABEL_41;
      case 6:
        uint64_t v14 = 960;
        goto LABEL_41;
      case 7:
        uint64_t v14 = 470;
        goto LABEL_41;
      case 8:
        uint64_t v14 = 950;
        goto LABEL_41;
      case 9:
        uint64_t v14 = 670;
        goto LABEL_41;
      case 10:
        uint64_t v14 = 630;
        goto LABEL_41;
      case 11:
        uint64_t v14 = 690;
        goto LABEL_41;
      case 12:
        uint64_t v14 = 980;
        goto LABEL_41;
      case 13:
        uint64_t v14 = 660;
        goto LABEL_41;
      case 14:
        uint64_t v14 = 930;
        goto LABEL_41;
      case 17:
        uint64_t v14 = 590;
        goto LABEL_41;
      case 18:
        uint64_t v14 = 580;
        goto LABEL_41;
      case 19:
        uint64_t v14 = 920;
        goto LABEL_41;
      case 20:
        uint64_t v14 = 490;
        goto LABEL_41;
      case 21:
        uint64_t v14 = 460;
        goto LABEL_41;
      case 22:
        uint64_t v14 = 910;
        goto LABEL_41;
      case 24:
        uint64_t v14 = 640;
        goto LABEL_41;
      case 25:
      case 30:
        uint64_t v14 = 940;
        goto LABEL_41;
      case 28:
        uint64_t v14 = 970;
        goto LABEL_41;
      case 29:
        uint64_t v14 = 880;
        goto LABEL_41;
      case 31:
        uint64_t v14 = 895;
        goto LABEL_41;
      case 32:
        uint64_t v14 = 965;
        goto LABEL_41;
      case 33:
        uint64_t v14 = 700;
        goto LABEL_41;
      case 34:
        uint64_t v14 = 971;
        goto LABEL_41;
      case 36:
        uint64_t v14 = 665;
        goto LABEL_41;
      case 43:
        uint64_t v14 = 966;
        goto LABEL_41;
      case 50:
        goto LABEL_41;
      case 51:
        uint64_t v14 = 790;
        goto LABEL_41;
      case 55:
        uint64_t v14 = 985;
        goto LABEL_41;
      case 56:
        uint64_t v14 = 860;
        goto LABEL_41;
      case 84:
        uint64_t v14 = 870;
        goto LABEL_41;
      default:
        uint64_t v14 = 1;
        goto LABEL_41;
    }
  }

  Boolean = (id)GestaltGetBoolean(@"R1Capability", 0LL, 0LL);
  if ((_DWORD)Boolean) {
    Boolean = [v26 setObject:&__kCFBooleanTrue forKeyedSubscript:@"rgC"];
  }
  if ((v22 > 59 || !self->_unlockAdvertiseAggressive) && (v22 > 59 || !self->_enhancedDiscoveryShouldRun))
  {
    if (self->_unlockAdvertiseBackground)
    {
      v37 = v42;
      if (v22 <= 29)
      {
        v40 = daemon_log(Boolean);
        v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG)) {
          sub_100170414(v41);
        }

        unsigned int v22 = 30LL;
      }

      goto LABEL_108;
    }

    if (((v18 | v19) & 1) != 0)
    {
      v37 = v42;
      if (v22 > 39) {
        goto LABEL_108;
      }
    }

    else
    {
      v37 = v42;
      if (((v22 < 40) & v44) == 0)
      {
        if (!v22) {
          unsigned int v22 = 30LL;
        }
        goto LABEL_108;
      }
    }

    unsigned int v22 = 40LL;
    goto LABEL_108;
  }

  unsigned int v22 = 60LL;
  v37 = v42;
LABEL_108:
  if (self->_boostNearbyInfo && v22 < 50) {
    v39 = 50LL;
  }
  else {
    v39 = v22;
  }
  if ((id)v39 != -[SFBLEAdvertiser advertiseRate](self->_bleNearbyInfoAdvertiser, "advertiseRate")) {
    -[SFBLEAdvertiser setAdvertiseRate:](self->_bleNearbyInfoAdvertiser, "setAdvertiseRate:", v39);
  }
  -[SFBLEAdvertiser setPayloadFields:](self->_bleNearbyInfoAdvertiser, "setPayloadFields:", v26);
  if (!self->_bleNearbyInfoAdvertised)
  {
    if (dword_100643B70 <= 30
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 30LL)))
    {
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleNearbyInfoAdvertiserUpdate]",  30LL,  "BLE NearbyInfo advertiser start: %##@\n",  v26);
    }

    self->_bleNearbyInfoAdvertised = 1;
    -[SFBLEAdvertiser activateWithCompletion:]( self->_bleNearbyInfoAdvertiser,  "activateWithCompletion:",  &stru_1005CFAF8);
  }
}

void sub_100155340(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  char v3 = v2;
  if (v2
    && dword_100643B70 <= 60
    && ((v5 = v2, dword_100643B70 != -1) || (v4 = _LogCategory_Initialize(&dword_100643B70, 60LL), char v3 = v5, v4)))
  {
    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleNearbyActionAdvertiserEnsureStarted]_block_invoke",  60LL,  "### Start NearbyAction advertiser failed: %@\n",  v3);
  }

  else
  {
  }

void sub_1001553C4(uint64_t a1)
{
  if (dword_100643B70 <= 30 && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 30LL))) {
    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleNearbyActionAdvertiserEnsureStarted]_block_invoke_2",  30LL,  "BLE NearbyAction linger advertise ended\n");
  }
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 136LL);
  if (v2)
  {
    char v3 = v2;
    dispatch_source_cancel(v3);
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(void **)(v4 + 136);
    *(void *)(v4 + 136) = 0LL;
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 96LL) = 0;
  [*(id *)(*(void *)(a1 + 32) + 120) invalidate];
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(void **)(v6 + 120);
  *(void *)(v6 + 120) = 0LL;
}

void sub_100155750(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v10 = v3;
  if (dword_100643B00 <= 50)
  {
    if (dword_100643B00 != -1 || (v4 = _LogCategory_Initialize(&dword_100643B00, 50LL), id v3 = v10, v4))
    {
      LogPrintF( &dword_100643B00,  "-[SDNearbyAgent _bleNearbyActionScannerEnsureStarted]_block_invoke",  50LL,  "BLE NearbyAction found %@\n",  v3);
      id v3 = v10;
    }
  }

  int v5 = *(void **)(a1 + 32);
  if (!v5[18])
  {
    uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = *(void **)(v7 + 144);
    *(void *)(v7 + 144) = v6;

    id v3 = v10;
    int v5 = *(void **)(a1 + 32);
  }

  [v5 _deviceDiscoveryBLEDeviceFound:v3 type:15];
  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v10 identifier]);
  if (v9) {
    [*(id *)(*(void *)(a1 + 32) + 144) setObject:v10 forKeyedSubscript:v9];
  }
}

void sub_100155844(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (dword_100643B00 <= 50 && (dword_100643B00 != -1 || _LogCategory_Initialize(&dword_100643B00, 50LL))) {
    LogPrintF( &dword_100643B00,  "-[SDNearbyAgent _bleNearbyActionScannerEnsureStarted]_block_invoke_2",  50LL,  "BLE NearbyAction lost %@\n",  v4);
  }
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v4 identifier]);
  if (v3) {
    [*(id *)(*(void *)(a1 + 32) + 144) removeObjectForKey:v3];
  }
  [*(id *)(a1 + 32) _deviceDiscoveryBLEDeviceLost:v4 type:15];
}

void sub_100155904(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v7 = v5;
  if (dword_100643B00 <= 20)
  {
    if (dword_100643B00 != -1 || (v6 = _LogCategory_Initialize(&dword_100643B00, 20LL), id v5 = v7, v6))
    {
      LogPrintF( &dword_100643B00,  "-[SDNearbyAgent _bleNearbyActionScannerEnsureStarted]_block_invoke_3",  20LL,  "BLE NearbyAction changed %@\n",  v5);
      id v5 = v7;
    }
  }

  [*(id *)(a1 + 32) _deviceDiscoveryBLEDeviceChanged:v5 type:15 changes:a3];
}

id sub_1001559A8(uint64_t a1, uint64_t a2)
{
  if (dword_100643B70 <= 20 && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 20LL)))
  {
    id v4 = "?";
    if (a2 == 1) {
      id v4 = "Scanning";
    }
    if (!a2) {
      id v4 = "Unknown";
    }
    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleNearbyActionScannerEnsureStarted]_block_invoke_4",  20LL,  "BLE NearbyAction scan state changed: %s\n",  v4);
  }

  return _[*(id *)(a1 + 32) _deviceDiscoveryBLEScanStateChanged:a2 type:15];
}

void sub_100155A58(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2
    && dword_100643B70 <= 60
    && ((v5 = v2, dword_100643B70 != -1) || (v4 = _LogCategory_Initialize(&dword_100643B70, 60LL), id v3 = v5, v4)))
  {
    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleNearbyActionScannerEnsureStarted]_block_invoke_5",  60LL,  "### Start NearbyAction scanner failed: %@\n",  v3);
  }

  else
  {
  }

void sub_100156390( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1001563B4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001563C4(uint64_t a1)
{
}

void sub_1001563CC(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v7 = a3;
  if (([v7 sessionFlags] & 0x100) == 0)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a3);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    *a4 = 1;
  }
}

const char *sub_10015643C(int a1)
{
  id result = "Invalid";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      id result = "ContinuityRemote";
      break;
    case 2:
      id result = "iOSSetup";
      break;
    case 3:
      id result = "Repair";
      break;
    case 4:
      id result = "Setup2";
      break;
    case 5:
      id result = "AudioTuning";
      break;
    case 6:
      id result = "PasswordGranting";
      break;
    case 7:
      id result = "PasswordSharing";
      break;
    case 8:
      id result = "System";
      break;
    case 9:
      id result = "AutoUnlock";
      break;
    case 10:
      id result = "WHASetup";
      break;
    case 11:
      id result = "AppleTVSetup";
      break;
    case 12:
      id result = "DeviceDiagnostics";
      break;
    case 13:
      id result = "RemoteAutoFill";
      break;
    case 14:
      id result = "ApplePay";
      break;
    case 15:
      id result = "CompanionLinkProx";
      break;
    case 16:
      id result = "RemoteManagement";
      break;
    case 17:
      id result = "RemoteAutoFillPong";
      break;
    case 18:
      id result = "RemoteDisplay";
      break;
    case 19:
      id result = "ContinuityKeyboard";
      break;
    case 20:
      id result = "PhoneCallHandoff";
      break;
    case 21:
    case 23:
      goto LABEL_5;
    case 22:
      id result = "AuthenticateAccounts";
      break;
    case 24:
      id result = "HasInvitations";
      break;
    case 25:
      id result = "AcceptedInvitation";
      break;
    default:
      if (a1 == 127) {
        id result = "Debug";
      }
      else {
LABEL_5:
      }
        id result = "?";
      break;
  }

  return result;
}

LABEL_74:
    if (v28 <= 19)
    {
      if (!v28)
      {
        v32 = "Unknown";
        goto LABEL_91;
      }

      if (v28 == 10)
      {
        v32 = "Off";
        goto LABEL_91;
      }
    }

    else
    {
      switch(v28)
      {
        case 20:
          v32 = "NotConnected";
          goto LABEL_91;
        case 30:
          v32 = "Connecting";
          goto LABEL_91;
        case 40:
          v32 = "Connected";
LABEL_91:
          if (v30) {
            v33 = @"YES";
          }
          else {
            v33 = @"NO";
          }
          if (self->_bleNearbyActionScanner) {
            v34 = "on";
          }
          else {
            v34 = "off";
          }
          else {
            v35 = @"NO";
          }
          LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleNearbyInfoAdvertiserUpdate]",  20LL,  "WiFiP2P bit is not set, WiFi state: %s, hostAP: %@, NearbyAction scan: %s, Manatee: %@\n",  v32,  v33,  v34,  v35);
          goto LABEL_101;
      }
    }

    v32 = "?";
    goto LABEL_91;
  }

    v214 = 0LL;
  }

  else
  {
    swift_bridgeObjectRelease(v153);
    v214 = 1LL;
  }

void sub_100156E1C(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2
    && dword_100643B70 <= 60
    && ((v5 = v2, dword_100643B70 != -1) || (v4 = _LogCategory_Initialize(&dword_100643B70, 60LL), id v3 = v5, v4)))
  {
    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleNearbyInfoAdvertiserUpdate]_block_invoke",  60LL,  "### Start NearbyInfo advertiser failed: %@\n",  v3);
  }

  else
  {
  }

void *sub_100157848(void *result)
{
  if (result[4] == *(void *)(result[5] + 208LL))
  {
    uint64_t v1 = result;
    if (dword_100643B70 <= 30
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 30LL)))
    {
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleNearbyInfoAdvertiserLingerStart:]_block_invoke",  30LL,  "NearbyInfo Linger advertise stop: %@\n",  v1[6]);
    }

    uint64_t v2 = *(void **)(v1[5] + 208LL);
    if (v2)
    {
      id v3 = v2;
      dispatch_source_cancel(v3);
      uint64_t v4 = v1[5];
      id v5 = *(void **)(v4 + 208);
      *(void *)(v4 + 20_Block_object_dispose((const void *)(v9 - 80), 8) = 0LL;
    }

    return [(id)v1[5] _update];
  }

  return result;
}

const char *sub_100157FFC(unsigned int a1)
{
  if (a1 > 0x41) {
    return "?";
  }
  else {
    return off_1005D0140[(char)a1];
  }
}

void sub_100159230(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    if (dword_100643B70 <= 90)
    {
      id v10 = v3;
      if (dword_100643B70 != -1 || (v7 = _LogCategory_Initialize(&dword_100643B70, 90LL), uint64_t v4 = v10, v7))
      {
        unint64_t v5 = *(char *)(a1 + 56);
        if (v5 > 0x41) {
          int v6 = "?";
        }
        else {
          int v6 = off_1005D0140[v5];
        }
        uint64_t v8 = *(unsigned __int8 *)(a1 + 57);
        uint64_t v9 = sub_10015643C(*(unsigned __int8 *)(a1 + 58));
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent bleNearbyInfoSendFrameType:serviceType:data:peer:isSession:]_block_invoke",  90,  "### BLE Nearby send frame type %s, fragment %u, service %s, %ld of %ld bytes, peer %@ failed: %@\n",  v6,  v8,  v9,  [*(id *)(a1 + 32) length],  objc_msgSend(*(id *)(a1 + 40), "length"),  *(void *)(a1 + 48),  v10);
        uint64_t v4 = v10;
      }
    }
  }
}

void sub_10015932C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    if (dword_100643B70 <= 90)
    {
      id v10 = v3;
      if (dword_100643B70 != -1 || (v7 = _LogCategory_Initialize(&dword_100643B70, 90LL), uint64_t v4 = v10, v7))
      {
        unint64_t v5 = *(char *)(a1 + 56);
        if (v5 > 0x41) {
          int v6 = "?";
        }
        else {
          int v6 = off_1005D0140[v5];
        }
        uint64_t v8 = *(unsigned __int8 *)(a1 + 57);
        uint64_t v9 = sub_10015643C(*(unsigned __int8 *)(a1 + 58));
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent bleNearbyInfoSendFrameType:serviceType:data:peer:isSession:]_block_invoke_2",  90,  "### BLE Nearby send frame type %s, last fragment %u, service %s, %ld of %ld bytes, peer %@ failed: %@\n",  v6,  v8,  v9,  [*(id *)(a1 + 32) length],  objc_msgSend(*(id *)(a1 + 40), "length"),  *(void *)(a1 + 48),  v10);
        uint64_t v4 = v10;
      }
    }
  }
}

void sub_100159428(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    if (dword_100643B70 <= 90)
    {
      id v9 = v3;
      if (dword_100643B70 != -1 || (v7 = _LogCategory_Initialize(&dword_100643B70, 90LL), uint64_t v4 = v9, v7))
      {
        unint64_t v5 = *(char *)(a1 + 48);
        if (v5 > 0x41) {
          int v6 = "?";
        }
        else {
          int v6 = off_1005D0140[v5];
        }
        uint64_t v8 = sub_10015643C(*(unsigned __int8 *)(a1 + 49));
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent bleNearbyInfoSendFrameType:serviceType:data:peer:isSession:]_block_invoke_3",  90,  "### BLE Nearby send frame type %s, service %s, %ld bytes, peer %@ failed: %@\n",  v6,  v8,  [*(id *)(a1 + 32) length],  *(void *)(a1 + 40),  v9);
        uint64_t v4 = v9;
      }
    }
  }
}

void sub_1001596F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v10 = v3;
  if (dword_100643B70 <= 50)
  {
    if (dword_100643B70 != -1 || (v4 = _LogCategory_Initialize(&dword_100643B70, 50LL), id v3 = v10, v4))
    {
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleNearbyInfoScannerEnsureStarted]_block_invoke",  50LL,  "BLE NearbyInfo found %@\n",  v3);
      id v3 = v10;
    }
  }

  unint64_t v5 = *(void **)(a1 + 32);
  if (!v5[28])
  {
    int v6 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void **)(v7 + 224);
    *(void *)(v7 + 224) = v6;

    id v3 = v10;
    unint64_t v5 = *(void **)(a1 + 32);
  }

  [v5 _deviceDiscoveryBLEDeviceFound:v3 type:16];
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v10 identifier]);
  if (v9) {
    [*(id *)(*(void *)(a1 + 32) + 224) setObject:v10 forKeyedSubscript:v9];
  }
}

void sub_1001597EC(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (dword_100643B70 <= 50 && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 50LL))) {
    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleNearbyInfoScannerEnsureStarted]_block_invoke_2",  50LL,  "BLE NearbyInfo lost %@\n",  v4);
  }
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v4 identifier]);
  if (v3) {
    [*(id *)(*(void *)(a1 + 32) + 224) removeObjectForKey:v3];
  }
  [*(id *)(a1 + 32) _deviceDiscoveryBLEDeviceLost:v4 type:16];
}

void sub_1001598AC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v7 = v5;
  if (dword_100643B70 <= 20)
  {
    if (dword_100643B70 != -1 || (v6 = _LogCategory_Initialize(&dword_100643B70, 20LL), id v5 = v7, v6))
    {
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleNearbyInfoScannerEnsureStarted]_block_invoke_3",  20LL,  "BLE NearbyInfo changed %@\n",  v5);
      id v5 = v7;
    }
  }

  [*(id *)(a1 + 32) _deviceDiscoveryBLEDeviceChanged:v5 type:16 changes:a3];
}

id sub_100159950(uint64_t a1, uint64_t a2)
{
  if (dword_100643B70 <= 20 && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 20LL)))
  {
    id v4 = "?";
    if (a2 == 1) {
      id v4 = "Scanning";
    }
    if (!a2) {
      id v4 = "Unknown";
    }
    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleNearbyInfoScannerEnsureStarted]_block_invoke_4",  20LL,  "BLE NearbyInfo scan state changed: %s\n",  v4);
  }

  return _[*(id *)(a1 + 32) _deviceDiscoveryBLEScanStateChanged:a2 type:16];
}

void sub_100159A00(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (v2
    && dword_100643B70 <= 60
    && ((v5 = v2, dword_100643B70 != -1) || (v4 = _LogCategory_Initialize(&dword_100643B70, 60LL), id v3 = v5, v4)))
  {
    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleNearbyInfoScannerEnsureStarted]_block_invoke_5",  60LL,  "### Start NearbyInfo scanner failed: %@\n",  v3);
  }

  else
  {
  }

void sub_100159F78(uint64_t a1, void *a2)
{
  id v8 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 872LL));
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(v3 + 280))
  {
    if (*(_BYTE *)(v3 + 653))
    {
      int v4 = v8;
      if (dword_100643B00 > 30) {
        goto LABEL_13;
      }
      if (dword_100643B00 == -1)
      {
        int v6 = _LogCategory_Initialize(&dword_100643B00, 30LL);
        int v4 = v8;
        if (!v6) {
          goto LABEL_13;
        }
      }

      id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 advertisementFields]);
      LogPrintF( &dword_100643B00,  "-[SDNearbyAgent _bleProximityPairingScannerEnsureStarted]_block_invoke",  30LL,  "BLE Prox found %@\n%@\n",  v8,  v5);
    }

    else
    {
      int v4 = v8;
      if (dword_100643B00 > 30) {
        goto LABEL_13;
      }
      if (dword_100643B00 == -1)
      {
        int v7 = _LogCategory_Initialize(&dword_100643B00, 30LL);
        int v4 = v8;
        if (!v7) {
          goto LABEL_13;
        }
      }

      LogPrintF( &dword_100643B00,  "-[SDNearbyAgent _bleProximityPairingScannerEnsureStarted]_block_invoke",  30LL,  "BLE Prox found %@\n",  v4);
    }

    int v4 = v8;
LABEL_13:
    [*(id *)(a1 + 32) _deviceDiscoveryBLEDeviceFound:v4 type:7];
  }
}

void sub_10015A0A8(uint64_t a1, void *a2)
{
  id v4 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 872LL));
  if (*(_BYTE *)(*(void *)(a1 + 32) + 653LL))
  {
    if (dword_100643B00 <= 30
      && (dword_100643B00 != -1 || _LogCategory_Initialize(&dword_100643B00, 30LL)))
    {
      uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v4 advertisementFields]);
      LogPrintF( &dword_100643B00,  "-[SDNearbyAgent _bleProximityPairingScannerEnsureStarted]_block_invoke_2",  30LL,  "BLE Prox lost %@\n%@\n",  v4,  v3);
    }
  }

  else if (dword_100643B00 <= 30 {
         && (dword_100643B00 != -1 || _LogCategory_Initialize(&dword_100643B00, 30LL)))
  }
  {
    LogPrintF( &dword_100643B00,  "-[SDNearbyAgent _bleProximityPairingScannerEnsureStarted]_block_invoke_2",  30LL,  "BLE Prox lost %@\n",  v4);
  }

  [*(id *)(a1 + 32) _deviceDiscoveryBLEDeviceLost:v4 type:7];
}

void sub_10015A1C0(uint64_t a1, void *a2, uint64_t a3)
{
  id v10 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 872LL));
  uint64_t v5 = *(void *)(a1 + 32);
  if (*(void *)(v5 + 280))
  {
    if (*(_BYTE *)(v5 + 653))
    {
      int v6 = v10;
      if (dword_100643B00 > 30) {
        goto LABEL_13;
      }
      if (dword_100643B00 == -1)
      {
        int v8 = _LogCategory_Initialize(&dword_100643B00, 30LL);
        int v6 = v10;
        if (!v8) {
          goto LABEL_13;
        }
      }

      int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 advertisementFields]);
      LogPrintF( &dword_100643B00,  "-[SDNearbyAgent _bleProximityPairingScannerEnsureStarted]_block_invoke_3",  30LL,  "BLE Prox changed %@\n%@\n",  v10,  v7);
    }

    else
    {
      int v6 = v10;
      if (dword_100643B00 > 30) {
        goto LABEL_13;
      }
      if (dword_100643B00 == -1)
      {
        int v9 = _LogCategory_Initialize(&dword_100643B00, 30LL);
        int v6 = v10;
        if (!v9) {
          goto LABEL_13;
        }
      }

      LogPrintF( &dword_100643B00,  "-[SDNearbyAgent _bleProximityPairingScannerEnsureStarted]_block_invoke_3",  30LL,  "BLE Prox changed %@\n",  v6);
    }

    int v6 = v10;
LABEL_13:
    [*(id *)(a1 + 32) _deviceDiscoveryBLEDeviceChanged:v6 type:7 changes:a3];
  }
}

id sub_10015A300(uint64_t a1, uint64_t a2)
{
  if (dword_100643B70 <= 20 && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 20LL)))
  {
    id v4 = "?";
    if (a2 == 1) {
      id v4 = "Scanning";
    }
    if (!a2) {
      id v4 = "Unknown";
    }
    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleProximityPairingScannerEnsureStarted]_block_invoke_4",  20LL,  "BLE Prox scan state changed: %s\n",  v4);
  }

  return _[*(id *)(a1 + 32) _deviceDiscoveryBLEScanStateChanged:a2 type:7];
}

void sub_10015A3BC(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = v2;
  if (v2
    && dword_100643B70 <= 60
    && ((v5 = v2, dword_100643B70 != -1) || (v4 = _LogCategory_Initialize(&dword_100643B70, 60LL), uint64_t v3 = v5, v4)))
  {
    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleProximityPairingScannerEnsureStarted]_block_invoke_5",  60LL,  "### BLE Prox scanner start failed: %@\n",  v3);
  }

  else
  {
  }

void sub_10015ABA8(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = v2;
  if (v2
    && dword_100643B70 <= 60
    && ((v5 = v2, dword_100643B70 != -1) || (v4 = _LogCategory_Initialize(&dword_100643B70, 60LL), uint64_t v3 = v5, v4)))
  {
    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _btPipeHandleFrameType:data:]_block_invoke",  60LL,  "### BTPipe ping response failed: %@\n",  v3);
  }

  else
  {
  }

id sub_10015ACE8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

void *sub_10015AE54(void *result)
{
  if (*(void *)(result[4] + 720LL))
  {
    uint64_t v1 = result;
    if (dword_100643B70 <= 40
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 40LL)))
    {
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _mirroringStateChanged:]_block_invoke",  40LL,  "Mirroring state changed\n");
    }

    return [(id)v1[4] _update];
  }

  return result;
}

void sub_10015B7B0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceFilter]);
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = v2;
  id v5 = v3;
  if (v4 == v5)
  {

    goto LABEL_12;
  }

  int v6 = v5;
  if ((v4 == 0LL) != (v5 != 0LL))
  {
    unsigned __int8 v7 = [v4 isEqual:v5];

    if ((v7 & 1) != 0) {
      goto LABEL_12;
    }
  }

  else
  {
  }

  if (dword_100643B70 <= 10 && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 10LL))) {
    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleUpdateScanner:typeFlag:]_block_invoke",  10LL,  "Updating BLEScanner %p deviceFilter changed to %@ ",  *(void *)(a1 + 32),  *(void *)(a1 + 40));
  }
  [*(id *)(a1 + 32) setDeviceFilter:*(void *)(a1 + 40)];
LABEL_12:
  int v8 = *(_DWORD *)(a1 + 104);
  if (v8 != [*(id *)(a1 + 32) changeFlags])
  {
    if (dword_100643B70 <= 10
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 10LL)))
    {
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleUpdateScanner:typeFlag:]_block_invoke",  10,  "Updating BLEScanner %p changeFlags from 0x%x to 0x%x",  *(const void **)(a1 + 32),  [*(id *)(a1 + 32) changeFlags],  *(_DWORD *)(a1 + 104));
    }

    [*(id *)(a1 + 32) setChangeFlags:*(unsigned int *)(a1 + 104)];
  }

  int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) payloadFilterData]);
  id v10 = *(void **)(a1 + 48);
  id v11 = v9;
  id v12 = v10;
  if (v11 == v12)
  {

    goto LABEL_25;
  }

  uint64_t v13 = v12;
  if ((v11 == 0LL) == (v12 != 0LL))
  {

    goto LABEL_24;
  }

  unsigned __int8 v14 = [v11 isEqual:v12];

  if ((v14 & 1) == 0) {
LABEL_24:
  }
    [*(id *)(a1 + 32) setPayloadFilterData:*(void *)(a1 + 48) mask:*(void *)(a1 + 48)];
LABEL_25:
  id v15 = *(id *)(a1 + 80);
  if (v15 != [*(id *)(a1 + 32) rssiThreshold])
  {
    if (dword_100643B70 <= 10
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 10LL)))
    {
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleUpdateScanner:typeFlag:]_block_invoke",  10LL,  "Updating BLEScanner %p RSSI threshold to %ld",  *(const void **)(a1 + 32),  *(void *)(a1 + 80));
    }

    [*(id *)(a1 + 32) setRssiThreshold:*(void *)(a1 + 80)];
  }

  int v16 = *(unsigned __int8 *)(a1 + 108);
  if (v16 != [*(id *)(a1 + 32) scanCache])
  {
    if (dword_100643B70 <= 10
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 10LL)))
    {
      uint64_t v17 = *(void **)(a1 + 32);
      unsigned int v18 = [v17 scanCache];
      unsigned int v19 = @"NO";
      if (v18) {
        unint64_t v20 = @"YES";
      }
      else {
        unint64_t v20 = @"NO";
      }
      if (*(_BYTE *)(a1 + 108)) {
        unsigned int v19 = @"YES";
      }
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleUpdateScanner:typeFlag:]_block_invoke",  10LL,  "Updating BLEScanner %p scanCache from %@ to %@",  v17,  v20,  v19);
    }

    [*(id *)(a1 + 32) setScanCache:*(unsigned __int8 *)(a1 + 108)];
  }

  id v21 = *(id *)(a1 + 88);
  if (v21 != [*(id *)(a1 + 32) scanRate])
  {
    unsigned int v22 = *(void **)(a1 + 32);
    uint64_t v23 = (uint64_t)[v22 scanRate];
    if (v23 > 19)
    {
      if (v23 > 39)
      {
        if (v23 == 40)
        {
          unsigned int v24 = "High";
          goto LABEL_64;
        }

        if (v23 == 50)
        {
          unsigned int v24 = "Aggressive";
          goto LABEL_64;
        }
      }

      else
      {
        if (v23 == 20)
        {
          unsigned int v24 = "Normal";
          goto LABEL_64;
        }

        if (v23 == 30)
        {
          unsigned int v24 = "HighNormal";
          goto LABEL_64;
        }
      }

LABEL_63:
      unsigned int v24 = "?";
    }

    else
    {
      unsigned int v24 = "Invalid";
      switch(v23)
      {
        case 0LL:
          break;
        case 1LL:
          unsigned int v24 = "BackgroundOld";
          break;
        case 2LL:
          unsigned int v24 = "NormalOld";
          break;
        case 3LL:
          unsigned int v24 = "HighOld";
          break;
        case 4LL:
          unsigned int v24 = "AggressiveOld";
          break;
        case 10LL:
          unsigned int v24 = "Background";
          break;
        default:
          goto LABEL_63;
      }
    }

                  __break(1u);
                  goto LABEL_64;
                }

  v142 = v224[3];
  v143 = v224[4];
  sub_10019A708(v224, v142);
  (*(void (**)(uint64_t, uint64_t))(v143 + 8))(v142, v143);
  if (!v144)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }

  v145 = v144;
  v146 = sub_10044AF00(v33);
  swift_bridgeObjectRelease(v145);
  if ((v146 & 1) == 0)
  {
    if (qword_100644408 != -1) {
      swift_once(&qword_100644408, sub_100458568);
    }
    v166 = type metadata accessor for Logger(0LL);
    v167 = sub_100186DE4(v166, (uint64_t)qword_100656748);
    v47 = (os_log_s *)Logger.logObject.getter(v167);
    v56 = static os_log_type_t.error.getter(v47);
    if (os_log_type_enabled(v47, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v57 = 0;
      v58 = "Not unpairing, disable message not valid";
      goto LABEL_14;
    }

LABEL_83:
  id v27 = *(id *)(a1 + 96);
  if (v27 != [*(id *)(a1 + 32) rescanIntervalScreenOff])
  {
    if (dword_100643B70 <= 10
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 10LL)))
    {
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleUpdateScanner:typeFlag:]_block_invoke",  10,  "Updating BLEScanner %p rescanIntervalScreenOff from %d to %d",  *(const void **)(a1 + 32),  [*(id *)(a1 + 32) rescanIntervalScreenOff],  *(void *)(a1 + 96));
    }

    [*(id *)(a1 + 32) setRescanIntervalScreenOff:*(void *)(a1 + 96)];
  }

  char v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) trackedPeers]);
  uint64_t v29 = *(void **)(a1 + 56);
  id v30 = v28;
  id v31 = v29;
  if (v30 == v31)
  {

    goto LABEL_100;
  }

  v32 = v31;
  if ((v30 == 0LL) != (v31 != 0LL))
  {
    unsigned __int8 v33 = [v30 isEqual:v31];

    if ((v33 & 1) != 0) {
      goto LABEL_100;
    }
  }

  else
  {
  }

  if (dword_100643B70 <= 10 && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 10LL))) {
    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleUpdateScanner:typeFlag:]_block_invoke",  10LL,  "Updating BLEScanner %p trackedPeers to %@",  *(void *)(a1 + 32),  *(void *)(a1 + 56));
  }
  [*(id *)(a1 + 32) setTrackedPeers:*(void *)(a1 + 56)];
LABEL_100:
  v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) useCases]);
  v35 = *(void **)(a1 + 64);
  id v40 = v34;
  id v36 = v35;
  if (v40 == v36)
  {

    return;
  }

  if ((v40 == 0LL) != (v36 != 0LL))
  {
    unsigned __int8 v37 = [v40 isEqual:v36];

    if ((v37 & 1) != 0) {
      return;
    }
  }

  else
  {
  }

  if (dword_100643B70 <= 10 && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 10LL)))
  {
    uint64_t v38 = *(void *)(a1 + 32);
    v39 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) _useCasesToHexString:*(void *)(a1 + 64)]);
    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _bleUpdateScanner:typeFlag:]_block_invoke",  10LL,  "Updating BLEScanner %p useCases to (%@)",  v38,  v39);
  }

  [*(id *)(a1 + 32) setUseCases:*(void *)(a1 + 64)];
}

              v39 = 3;
              goto LABEL_92;
            }

            if (dword_100643B70 <= 50
              && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 50LL)))
            {
              unsigned __int8 v33 = "?";
              LogPrintF( &dword_100643B70,  "-[SDNearbyAgent coordinatedAlertRequestFinish:]",  50LL,  "CoordinatedAlert finish: Oneness mac %@ activity level 0x%02X (%s) equals local phone activity level.\n",  v19,  v17,  v33);
            }

            v39 = 3;
          }

          id v12 = 1;
          id v4 = v64;
        }

        else
        {
          if (dword_100643B70 <= 50
            && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 50LL)))
          {
            unsigned int v24 = (unint64_t)[v4 type];
            uint64_t v25 = "?";
            if (v24 <= 6) {
              uint64_t v25 = off_1005D05C8[v24];
            }
            LogPrintF( &dword_100643B70,  "-[SDNearbyAgent coordinatedAlertRequestFinish:]",  50LL,  "CoordinatedAlert finish: device %@ ignored because its %s is disabled\n",  v19,  v25);
          }

          id v21 = 0LL;
          v39 = 3;
        }

  __break(1u);
  return result;
}

  __break(1u);
}

id sub_10015D184(uint64_t a1)
{
  id result = (id)*(unsigned int *)(*(void *)(a1 + 32) + 784LL);
  if ((_DWORD)result != -1)
  {
    uint64_t state64 = 0LL;
    id result = (id)notify_get_state((int)result, &state64);
    if ((_DWORD)state64 == 3)
    {
      return [*(id *)(a1 + 32) _notifyCameraConfigChange];
    }

    else
    {
      if ((_DWORD)state64 != 2)
      {
        if ((state64 & 0xFFFFFFFE) != 4) {
          return result;
        }
        [*(id *)(a1 + 32) _discoverySessionStateChange:(_DWORD)state64 == 4];
      }

      return [*(id *)(a1 + 32) _checkConditionsForEnhancedDiscovery];
    }
  }

  return result;
}

void sub_10015D524(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    if (dword_100643B70 <= 30
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 30LL)))
    {
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _deliverDonnedEventToDevice:allowRetry:]_block_invoke",  30LL,  "Sending DONNED state to %@\n",  *(void *)(a1 + 40));
    }

    id v15 = *(void **)(a1 + 32);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_10015D828;
    v19[3] = &unk_1005CFBF8;
    unint64_t v20 = v15;
    id v16 = *(id *)(a1 + 40);
    uint64_t v17 = *(void *)(a1 + 48);
    id v21 = v16;
    uint64_t v22 = v17;
    -[dispatch_source_s sendRequestID:request:options:responseHandler:]( v20,  "sendRequestID:request:options:responseHandler:",  @"com.sharing.donState",  &off_1005FACB0,  0LL,  v19);

    int v6 = v20;
    goto LABEL_23;
  }

  if (dword_100643B70 <= 90 && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 90LL)))
  {
    if (*(_BYTE *)(a1 + 56)) {
      id v4 = "yes";
    }
    else {
      id v4 = "no";
    }
    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _deliverDonnedEventToDevice:allowRetry:]_block_invoke",  90LL,  "### Error activating don state send client: %@. Retry allowed: %s.\n",  v3,  v4);
  }

  [*(id *)(a1 + 32) invalidate];
  if (*(_BYTE *)(a1 + 56))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) idsDeviceIdentifier]);

    if (v5)
    {
      int v6 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  *(dispatch_queue_t *)(*(void *)(a1 + 48) + 872LL));
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472LL;
      handler[2] = sub_10015D81C;
      handler[3] = &unk_1005CB480;
      int8x16_t v18 = *(int8x16_t *)(a1 + 40);
      id v7 = (id)v18.i64[0];
      int8x16_t v24 = vextq_s8(v18, v18, 8uLL);
      dispatch_source_set_event_handler(v6, handler);
      SFDispatchTimerSet(v6, 3.0, -1.0, -4.0);
      if (!*(void *)(*(void *)(a1 + 48) + 464LL))
      {
        int v8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        uint64_t v9 = *(void *)(a1 + 48);
        id v10 = *(void **)(v9 + 464);
        *(void *)(v9 + 464) = v8;
      }

      id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) idsDeviceIdentifier]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 464) objectForKeyedSubscript:v11]);

      if (v12)
      {
        uint64_t v13 = (dispatch_source_s *)(id)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 464) objectForKeyedSubscript:v11]);
        unsigned __int8 v14 = v13;
        if (v13)
        {
          dispatch_source_cancel(v13);
        }

        [*(id *)(*(void *)(a1 + 48) + 464) setObject:0 forKeyedSubscript:v11];
      }

      [*(id *)(*(void *)(a1 + 48) + 464) setObject:v6 forKeyedSubscript:v11];
      dispatch_resume(v6);

LABEL_23:
    }
  }
}

id sub_10015D81C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleRetryTimerForDevice:*(void *)(a1 + 40)];
}

void sub_10015D828(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v14 = a2;
  id v7 = a3;
  id v8 = a4;
  if (v8)
  {
    if (dword_100643B70 <= 90
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 90LL)))
    {
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _deliverDonnedEventToDevice:allowRetry:]_block_invoke",  90LL,  "### Error sending donned status: %@\n",  v8,  v14);
    }

    [*(id *)(a1 + 32) invalidate];
  }

  else
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) idsDeviceIdentifier]);
    if (v9)
    {
      id v10 = *(void **)(*(void *)(a1 + 48) + 440LL);
      if (!v10)
      {
        id v11 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
        uint64_t v12 = *(void *)(a1 + 48);
        uint64_t v13 = *(void **)(v12 + 440);
        *(void *)(v12 + 440) = v11;

        id v10 = *(void **)(*(void *)(a1 + 48) + 440LL);
      }

      [v10 addObject:v9];
    }

    [*(id *)(a1 + 32) invalidate];
  }
}

void sub_10015DA38(uint64_t a1, void *a2)
{
  id v8 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v8 model]);
  unsigned int v4 = [v3 containsString:@"Watch"];

  id v5 = v8;
  if (v4)
  {
    if (dword_100643B70 <= 30)
    {
      if (dword_100643B70 != -1 || (v6 = _LogCategory_Initialize(&dword_100643B70, 30LL), id v5 = v8, v6))
      {
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _deliverDonnedEventsStart]_block_invoke",  30LL,  "Found watch while donned: %@\n",  v5);
        id v5 = v8;
      }
    }

    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 idsDeviceIdentifier]);

    id v5 = v8;
  }
}

void sub_10015DB2C(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 idsDeviceIdentifier]);
  if (v3)
  {
    unsigned int v4 = v3;
    [*(id *)(*(void *)(a1 + 32) + 440) removeObject:v3];
    id v3 = v4;
  }
}

void sub_10015DB7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v6 = v3;
    if (dword_100643B70 <= 90
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 90LL)))
    {
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _deliverDonnedEventsStart]_block_invoke_3",  90LL,  "### Error activating donned discovery client: %@\n",  v6);
    }

    [*(id *)(*(void *)(a1 + 32) + 16) invalidate];
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 16);
    *(void *)(v4 + 16) = 0LL;

    id v3 = v6;
  }
}

void sub_10015DDF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (dword_100643B70 <= 90
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 90LL)))
    {
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _deliverDoffedEvent]_block_invoke",  90LL,  "### Error activating send client: %@\n",  v3);
    }

    [*(id *)(a1 + 32) invalidate];
    if (*(void *)(a1 + 40)) {
      objc_msgSend(*(id *)(*(void *)(a1 + 48) + 440), "removeObject:");
    }
    [*(id *)(a1 + 48) _invalidateWatchDiscoveryIfNeeded];
  }

  else
  {
    if (dword_100643B70 <= 30
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 30LL)))
    {
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _deliverDoffedEvent]_block_invoke",  30LL,  "Sending DOFFED state to %@\n",  *(void *)(a1 + 56));
    }

    uint64_t v4 = *(void **)(a1 + 32);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_10015DF58;
    v5[3] = &unk_1005CFBF8;
    int8x16_t v6 = vextq_s8(*(int8x16_t *)(a1 + 40), *(int8x16_t *)(a1 + 40), 8uLL);
    id v7 = v4;
    [v7 sendRequestID:@"com.sharing.donState" request:&off_1005FACD8 options:0 responseHandler:v5];
  }
}

void sub_10015DF58(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v12 = a2;
  id v7 = a3;
  id v8 = a4;
  if (v8
    && dword_100643B70 <= 90
    && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 90LL)))
  {
    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _deliverDoffedEvent]_block_invoke",  90LL,  "### Error sending doffed status: %@\n",  v8,  v12);
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 464) objectForKeyedSubscript:*(void *)(a1 + 40)]);

  if (v9)
  {
    id v10 = (dispatch_source_s *)(id)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 464) objectForKeyedSubscript:*(void *)(a1 + 40)]);
    id v11 = v10;
    if (v10)
    {
      dispatch_source_cancel(v10);
    }

    [*(id *)(*(void *)(a1 + 32) + 464) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
  }

  [*(id *)(a1 + 48) invalidate];
  if (*(void *)(a1 + 40)) {
    objc_msgSend(*(id *)(*(void *)(a1 + 32) + 440), "removeObject:");
  }
  [*(id *)(a1 + 32) _invalidateWatchDiscoveryIfNeeded];
}

void sub_10015EE68(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v6 bluetoothStateChangedHandler]);

  if (v4)
  {
    id v5 = (void (**)(void, void))objc_claimAutoreleasedReturnValue([v6 bluetoothStateChangedHandler]);
    v5[2](v5, *(void *)(a1 + 32));
  }
}

LABEL_91:
                  v62 = 0;
                  v39 = 2;
LABEL_92:
                  id v12 = 1;
                  goto LABEL_96;
                }

                if (dword_100643B70 <= 50
                  && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 50LL)))
                {
                  id v40 = "?";
                  v58 = v40;
                  v57 = v67;
                  LogPrintF( &dword_100643B70,  "-[SDNearbyAgent coordinatedAlertRequestFinish:]",  50LL,  "CoordinatedAlert finish: device %@ activity level 0x%02X (%s) loses over headphones audible, 0x%02X (%s)\n",  v19,  10LL,  "Watch");
                }
              }

      swift_release(v77);
      if (*((void *)v60 + 2)) {
        goto LABEL_94;
      }
      goto LABEL_151;
    }

    int8x16_t v18 = 0LL;
    id v3 = sub_10048115C(v75, v1);
    if (!*((void *)v60 + 2))
    {
LABEL_151:
      swift_beginAccess(v172, v170, 33LL, 0LL);
      sub_10028B078(v3);
      v134 = swift_endAccess(v170);
      v135 = (os_log_s *)Logger.logObject.getter(v134);
      v136 = static os_log_type_t.default.getter(v135);
      if (os_log_type_enabled(v135, v136))
      {
        v137 = v2[27];
        v138 = swift_slowAlloc(32LL, -1LL);
        v185 = swift_slowAlloc(96LL, -1LL);
        v188[0] = v185;
        *(_DWORD *)v138 = 136315650;
        v139 = sub_10034F010(v137);
        v141 = (const char *)v140;
        v179[14] = sub_10018CDB4(v139, v140, v188);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v165, v164, v138 + 4, v138 + 12);
        swift_bridgeObjectRelease(v141);
        *(_WORD *)(v138 + 12) = 2080;
        v179[15] = v173;
        type metadata accessor for SFAutoUnlockDeviceType(0LL);
        v143 = String.init<A>(describing:)(v164, v142);
        v145 = (const char *)v144;
        v179[16] = sub_10018CDB4(v143, v144, v188);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v163, v162, v138 + 14, v138 + 22);
        swift_bridgeObjectRelease(v145);
        *(_WORD *)(v138 + 22) = 2080;
        v146 = (const char *)v179[13];
        v147 = sub_100183168(0LL, (unint64_t *)&unk_10064B7B0, &OBJC_CLASS___SFAutoUnlockDevice_ptr);
        swift_bridgeObjectRetain(v146);
        v149 = Array.description.getter(v148, v147);
        v151 = v150;
        v152 = v146;
        uint64_t v2 = v179;
        swift_bridgeObjectRelease(v152);
        v179[17] = sub_10018CDB4(v149, (unint64_t)v151, v188);
        v63 = v180;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v162, v182, v138 + 24, v138 + 32);
        swift_bridgeObjectRelease(v151);
        _os_log_impl( (void *)&_mh_execute_header,  v135,  v136,  "listEligibleDevices for %s returning eligible %s devices: %s",  (uint8_t *)v138,  0x20u);
        swift_arrayDestroy(v185, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v185, -1LL, -1LL);
        swift_slowDealloc(v138, -1LL, -1LL);
      }

      v66 = v176;
      v62 = v177;
      goto LABEL_56;
    }

LABEL_96:
        id v6 = v68;
        if (v39 != 3) {
          goto LABEL_102;
        }
        id v15 = (char *)v15 + 1;
      }

      while (v11 != v15);
      v41 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v69,  v75,  16LL);
      id v11 = v41;
      if (!v41)
      {
LABEL_102:

        id v8 = v67;
        v42 = v62;
        if ((v12 & 1) != 0) {
          goto LABEL_113;
        }
        goto LABEL_105;
      }
    }
  }

  v42 = 1;
LABEL_105:
  if (!-[SDStatusMonitor screenOn](self->_statusMonitor, "screenOn")
    && [v4 type] == (id)6
    && GestaltGetDeviceClass(6LL, v43) == 1)
  {
    if (dword_100643B70 <= 50
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 50LL)))
    {
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent coordinatedAlertRequestFinish:]",  50LL,  "CoordinatedAlert finish: Oneness screen off phone found no other devices\n");
    }

    v42 = 0;
  }

id sub_100160CE8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _enhancedDiscoveryTimerFired];
}

id sub_100161884(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _deviceDiscoveryRequestStart:*(void *)(a1 + 40)];
}

void sub_100162068(uint64_t a1)
{
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 432LL);
  id v3 = [v2 countByEnumeratingWithState:&v36 objects:v41 count:16];
  if (v3)
  {
    id v4 = v3;
    int v5 = 0;
    int v6 = 0;
    int v7 = 0;
    uint64_t v8 = *(void *)v37;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v37 != v8) {
          objc_enumerationMutation(v2);
        }
        id v10 = *(void **)(*((void *)&v36 + 1) + 8LL * (void)i);
      }

      id v4 = [v2 countByEnumeratingWithState:&v36 objects:v41 count:16];
    }

    while (v4);
  }

  else
  {
    LOBYTE(v5) = 0;
    LOBYTE(sub_10000CF78( (void *)&_mh_execute_header,  v0,  v1,  "Switch incomplete, active devices don't match",  v2,  v3,  v4,  v5, v6) = 0;
    LOBYTE(v7) = 0;
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 393LL) = v5 & 1;
  *(_BYTE *)(*(void *)(a1 + 32) + 409LL) = v6 & 1;
  *(_BYTE *)(*(void *)(a1 + 32) + 425LL) = v7 & 1;
  unsigned int v11 = [*(id *)(a1 + 40) discoveryFlags];
  char v12 = v11;
  if ((v11 & 0x20) != 0)
  {
    uint64_t v13 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) idsBluetoothDeviceIDsForSharing]);
LABEL_24:
    id v14 = (void *)v13;
    [*(id *)(a1 + 40) setDeviceFilter:v13];

    goto LABEL_25;
  }

  if ((v11 & 0x100000) != 0)
  {
    uint64_t v13 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _idsBluetoothDeviceIDsForMe]);
    goto LABEL_24;
  }

  if ((v11 & 0x200000) != 0)
  {
    uint64_t v13 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _idsBluetoothDeviceIDsForHomePods]);
    goto LABEL_24;
  }

  if ((v11 & 0x1000000) != 0) {
    [*(id *)(a1 + 32) _unlockDeviceFilterChangedForRequest:*(void *)(a1 + 40)];
  }
LABEL_25:
  id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deviceFoundHandler]);
  if (v15)
  {
  }

  else
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deviceLostHandler]);

    if (!v16)
    {
LABEL_30:
      id v17 = 0LL;
      goto LABEL_34;
    }
  }

  if ((v12 & 0x10) != 0)
  {
    uint64_t v18 = 384LL;
  }

  else
  {
    if ((v12 & 1) == 0) {
      goto LABEL_30;
    }
    uint64_t v18 = 400LL;
  }

  id v17 = *(id *)(*(void *)(a1 + 32) + v18);
LABEL_34:
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  id v19 = v17;
  id v20 = [v19 countByEnumeratingWithState:&v32 objects:v40 count:16];
  if (v20)
  {
    id v21 = v20;
    uint64_t v22 = *(void *)v33;
    do
    {
      for (j = 0LL; j != v21; j = (char *)j + 1)
      {
        if (*(void *)v33 != v22) {
          objc_enumerationMutation(v19);
        }
        uint64_t v24 = *(void *)(*((void *)&v32 + 1) + 8LL * (void)j);
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectForKeyedSubscript:", v24, (void)v32));
        if (v25)
        {
          uint64_t v26 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deviceFilter]);
          if (v26
            && (id v27 = (void *)v26,
                char v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deviceFilter]),
                unsigned __int8 v29 = [v28 containsObject:v24],
                v28,
                v27,
                (v29 & 1) == 0))
          {
            uint64_t v30 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deviceLostHandler]);
          }

          else
          {
            uint64_t v30 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deviceFoundHandler]);
          }

          id v31 = (void *)v30;
          if (v30) {
            (*(void (**)(uint64_t, void *))(v30 + 16))(v30, v25);
          }
        }
      }

      id v21 = [v19 countByEnumeratingWithState:&v32 objects:v40 count:16];
    }

    while (v21);
  }

  [*(id *)(a1 + 32) _update];
}

void sub_100162C10(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  uint64_t v3 = NSPrintF("Timeout-%@", a1[6]);
  id v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  [v1 _deviceDiscoveryFastScanStop:v2 reset:0 reason:v4];
}

void sub_100163458( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
}

void sub_10016347C(void *a1, void *a2, void *a3, _BYTE *a4)
{
  id v10 = a2;
  id v7 = a3;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 rapportIdentifier]);
  unsigned int v9 = [v8 isEqual:a1[4]];

  if (v9 && ([v10 isEqual:a1[5]] & 1) == 0)
  {
    objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), a3);
    *a4 = 1;
  }
}

const char *sub_100163B64(int a1)
{
  id result = "Unspecified";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      id result = "ATVSetup";
      break;
    case 2:
    case 3:
    case 15:
    case 16:
    case 23:
    case 26:
    case 27:
    case 35:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 53:
    case 54:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
      goto LABEL_5;
    case 4:
      id result = "MobileBackup";
      break;
    case 5:
      id result = "WatchSetup";
      break;
    case 6:
      id result = "ATVPair";
      break;
    case 7:
      id result = "InternetRelay";
      break;
    case 8:
      id result = "WiFiPassword";
      break;
    case 9:
      id result = "iOSSetup";
      break;
    case 10:
      id result = "Repair";
      break;
    case 11:
      id result = "LegacyHomePodSetup";
      break;
    case 12:
      id result = "ApplePay";
      break;
    case 13:
      id result = "WHASetup";
      break;
    case 14:
      id result = "DevToolsPair";
      break;
    case 17:
      id result = "DDPing";
      break;
    case 18:
      id result = "DDPong";
      break;
    case 19:
      id result = "RemoteAutoFill";
      break;
    case 20:
      id result = "CompanionLinkProx";
      break;
    case 21:
      id result = "RemoteManagement";
      break;
    case 22:
      id result = "RemoteAutoFillPong";
      break;
    case 24:
      id result = "AccessorySetup";
      break;
    case 25:
      id result = "TVLS";
      break;
    case 28:
      id result = "AppSignIn";
      break;
    case 29:
      id result = "Fitness";
      break;
    case 30:
      id result = "TVCCS";
      break;
    case 31:
      id result = "TVSA";
      break;
    case 32:
      id result = "AuthenticateAccounts";
      break;
    case 33:
      id result = "HomePodSetup";
      break;
    case 34:
      id result = "CompanionAuthentication";
      break;
    case 36:
      id result = "dovePeace";
      break;
    case 43:
      id result = "AuthenticateAccountsV2";
      break;
    case 50:
      id result = "NeedsRDLink";
      break;
    case 51:
      id result = "NeedsCLink";
      break;
    case 52:
      id result = "Goodbye";
      break;
    case 55:
      id result = "AUAction";
      break;
    case 56:
      id result = "AcceptedInvitations";
      break;
    case 84:
      id result = "HasInvitations";
      break;
    default:
      if (a1 == 100) {
        id result = "B238SetupAfterWiFi";
      }
      else {
LABEL_5:
      }
        id result = "?";
      break;
  }

  return result;
}

id sub_100164738(uint64_t a1)
{
  if (dword_100643B70 <= 30 && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 30LL))) {
    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _identificationEnsureStarted]_block_invoke",  30LL,  "Identities changed\n");
  }
  return [*(id *)(a1 + 32) _identificationGetIdentities];
}

void sub_100164948(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 872LL);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100164A08;
  v11[3] = &unk_1005CC3F0;
  id v12 = v7;
  id v13 = v6;
  uint64_t v14 = *(void *)(a1 + 32);
  id v15 = v5;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, v11);
}

void sub_100164A08(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    if (dword_100643B70 > 90) {
      return;
    }
    if (dword_100643B70 == -1)
    {
      uint64_t v2 = *(void *)(a1 + 40);
    }

    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _identificationGetIdentities]_block_invoke_2",  90LL,  "### Identification get identities failed: %{error}\n",  v2);
    return;
  }

  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = *(void **)(v3 + 888);
  *(void *)(v3 + 88_Block_object_dispose((const void *)(v9 - 80), 8) = 0LL;

  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  id v5 = *(id *)(a1 + 56);
  id v6 = [v5 countByEnumeratingWithState:&v40 objects:v45 count:16];
  if (!v6)
  {
    uint64_t v8 = 0LL;
    goto LABEL_24;
  }

  id v7 = v6;
  uint64_t v8 = 0LL;
  uint64_t v9 = *(void *)v41;
  do
  {
    for (i = 0LL; i != v7; i = (char *)i + 1)
    {
      if (*(void *)v41 != v9) {
        objc_enumerationMutation(v5);
      }
      unsigned int v11 = *(void **)(*((void *)&v40 + 1) + 8LL * (void)i);
      if ([v11 type] == 1)
      {
        uint64_t v12 = *(void *)(a1 + 48);
        id v13 = *(void **)(v12 + 880);
        if (v13)
        {
          uint64_t v8 = (uint64_t)[v13 compareWithRPIdentity:v11];
          uint64_t v12 = *(void *)(a1 + 48);
        }

        else
        {
          uint64_t v8 = 2048LL;
        }

        uint64_t v14 = (id *)(v12 + 880);
        goto LABEL_17;
      }

      if ([v11 type] == 14)
      {
        uint64_t v14 = (id *)(*(void *)(a1 + 48) + 888LL);
LABEL_17:
        objc_storeStrong(v14, v11);
      }

      uint64_t v15 = *(void *)(a1 + 48);
      if (*(void *)(v15 + 880) && *(void *)(v15 + 888)) {
        goto LABEL_24;
      }
    }

    id v7 = [v5 countByEnumeratingWithState:&v40 objects:v45 count:16];
  }

  while (v7);
LABEL_24:

  uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 880LL);
  if (v16)
  {
    if (dword_100643B70 <= 30)
    {
      if (dword_100643B70 != -1) {
        goto LABEL_27;
      }
      if (_LogCategory_Initialize(&dword_100643B70, 30LL))
      {
        uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 880LL);
LABEL_27:
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _identificationGetIdentities]_block_invoke_2",  30LL,  "Self identity: %@, %#{flags}\n",  v16,  v8,  &unk_1004CB52F);
      }
    }
  }

  else if (dword_100643B70 <= 60 {
         && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 60LL)))
  }
  {
    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _identificationGetIdentities]_block_invoke_2",  60LL,  "### Self identity not found\n");
  }

  uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 888LL);
  if (v17)
  {
    if (dword_100643B70 <= 30)
    {
      if (dword_100643B70 != -1) {
        goto LABEL_39;
      }
      if (_LogCategory_Initialize(&dword_100643B70, 30LL))
      {
        uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 888LL);
LABEL_39:
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _identificationGetIdentities]_block_invoke_2",  30LL,  "Temporary self identity: %@\n",  v17);
      }
    }
  }

  else if (dword_100643B70 <= 60 {
         && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 60LL)))
  }
  {
    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _identificationGetIdentities]_block_invoke_2",  60LL,  "### Temporary self identity not found\n",  v35);
  }

  if ((_DWORD)v8)
  {
    uint64_t v18 = *(void *)(a1 + 48);
    id v19 = *(void **)(v18 + 72);
    *(void *)(v18 + 72) = 0LL;

    uint64_t v20 = *(void *)(a1 + 48);
    id v21 = *(void **)(v20 + 856);
    *(void *)(v20 + 856) = 0LL;

    uint64_t v22 = *(void *)(a1 + 48);
    uint64_t v23 = *(void **)(v22 + 112);
    *(void *)(v22 + 112) = 0LL;
  }

  uint64_t v24 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  id v25 = *(id *)(a1 + 56);
  id v26 = [v25 countByEnumeratingWithState:&v36 objects:v44 count:16];
  if (v26)
  {
    id v27 = v26;
    uint64_t v28 = *(void *)v37;
    do
    {
      for (j = 0LL; j != v27; j = (char *)j + 1)
      {
        if (*(void *)v37 != v28) {
          objc_enumerationMutation(v25);
        }
        uint64_t v30 = *(void **)(*((void *)&v36 + 1) + 8LL * (void)j);
      }

      id v27 = [v25 countByEnumeratingWithState:&v36 objects:v44 count:16];
    }

    while (v27);
  }

  id v31 = -[NSMutableArray copy](v24, "copy");
  uint64_t v32 = *(void *)(a1 + 48);
  __int128 v33 = *(void **)(v32 + 808);
  *(void *)(v32 + 80_Block_object_dispose((const void *)(v9 - 80), 8) = v31;

  if (dword_100643B70 <= 30 && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 30LL))) {
    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _identificationGetIdentities]_block_invoke_2",  30,  "Identification identities: %d total\n",  [*(id *)(a1 + 56) count]);
  }
  [*(id *)(a1 + 48) _identificationReIdentify];
  [*(id *)(a1 + 48) _identificationCheckFlagsAndACL];
  [*(id *)(a1 + 48) _update];
  __int128 v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v34 postNotificationName:off_100643AF8 object:0];
}

LABEL_86:
  [v7 setDecryptedActivityLevel:16];
  unsigned int v11 = v55;
LABEL_87:
  if ((a4 & 0x10) != 0 && [v5 deviceActionType] == 8)
  {
    v60 = CFDataGetTypeID();
    v61 = CFDictionaryGetTypedValue(v8, @"ssidH", v60, 0LL);
    v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
    if ([v62 length] == (id)3)
    {
      v63 = v8;
      v64 = (void *)objc_claimAutoreleasedReturnValue(-[SDStatusMonitor wifiSSIDForSSIDHash:](self->_statusMonitor, "wifiSSIDForSSIDHash:", v62));
      [v5 setRequestSSID:v64];

      uint64_t v8 = v63;
    }
  }

  if (!self->_idMaintenanceTimer)
  {
    if (dword_100643B70 <= 30
      && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 30LL)))
    {
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _identificationHandleDeviceFound:flags:]",  30LL,  "Identification starting maintenance timer\n");
    }

    v65 = (OS_dispatch_source *)dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  &_dispatch_main_q);
    idMaintenanceTimer = self->_idMaintenanceTimer;
    self->_idMaintenanceTimer = v65;

    v67 = self->_idMaintenanceTimer;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472LL;
    handler[2] = sub_100165A54;
    handler[3] = &unk_1005CB2F8;
    void handler[4] = self;
    dispatch_source_set_event_handler((dispatch_source_t)v67, handler);
    SFDispatchTimerSet(self->_idMaintenanceTimer, 30.0, 30.0, -4.0);
    dispatch_resume((dispatch_object_t)self->_idMaintenanceTimer);
  }

LABEL_99:
}

id sub_100165A54(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _identificationMaintenanceTimer];
}

void sub_100165B60(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  unint64_t v4 = (unint64_t)[v6 discoveryFlags];
  id v5 = (void *)(v4 & ~*(void *)(a1 + 32));
  if (v5 != (void *)v4)
  {
    [v6 setDiscoveryFlags:v5];
    if (!v5) {
      [v6 setLastUpdateTicks:mach_absolute_time()];
    }
  }
}

void sub_100166E90(_Unwind_Exception *a1)
{
}

void sub_100166FE8(_Unwind_Exception *a1)
{
}

void sub_1001675D8(_Unwind_Exception *a1)
{
}

void sub_1001679D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_100167E0C(_Unwind_Exception *a1)
{
}

void sub_100167FC4(_Unwind_Exception *a1)
{
}

void sub_10016839C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1001683B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = -[NSUUID initWithUUIDString:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDString:",  *(void *)(*((void *)&v9 + 1) + 8LL * (void)v7));
        if (v8) {
          [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v8];
        }

        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v5);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100168640(_Unwind_Exception *a1)
{
}

void sub_100168978(_Unwind_Exception *a1)
{
}

void sub_100169780(_Unwind_Exception *a1)
{
}

void sub_10016AF44(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v10 = a3;
  BOOL v6 = [v10 serviceType] == *(unsigned __int8 *)(a1 + 48);
  id v7 = v10;
  if (v6)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v10 receivedFramePeerHandler]);

    if (v8)
    {
      __int128 v9 = (void (**)(void, void, void, void))objc_claimAutoreleasedReturnValue([v10 receivedFramePeerHandler]);
      v9[2](v9, *(unsigned __int8 *)(a1 + 49), *(void *)(a1 + 32), *(void *)(a1 + 40));
    }

    *a4 = 1;
    id v7 = v10;
  }
}

void sub_10016B890(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v13 = a3;
  BOOL v6 = [v13 serviceType] == *(unsigned __int8 *)(a1 + 48);
  id v7 = v13;
  if (v6)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v13 peerDevice]);
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
    unsigned int v10 = [v9 isEqual:*(void *)(a1 + 32)];

    id v7 = v13;
    if (v10)
    {
      __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v13 receivedFrameHandler]);

      if (v11)
      {
        __int128 v12 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue([v13 receivedFrameHandler]);
        v12[2](v12, *(unsigned __int8 *)(a1 + 49), *(void *)(a1 + 40));
      }

      *a4 = 1;
      id v7 = v13;
    }
  }
}

void sub_10016BC94(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    if (dword_100643B70 <= 90)
    {
      id v6 = v3;
      if (dword_100643B70 != -1 || (v5 = _LogCategory_Initialize(&dword_100643B70, 90LL), id v4 = v6, v5))
      {
        LogPrintF( &dword_100643B70,  "-[SDNearbyAgent sessionSendEvent:session:]_block_invoke",  90,  "### Sent %ld bytes to %@ failed: %@\n",  [*(id *)(a1 + 32) length],  *(void *)(a1 + 40),  v6);
        id v4 = v6;
      }
    }
  }
}

void sub_10016C82C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (dword_100643B70 <= 20)
  {
    id v7 = v3;
    if (dword_100643B70 != -1 || (v6 = _LogCategory_Initialize(&dword_100643B70, 20LL), id v4 = v7, v6))
    {
      int v5 = @"success";
      if (v4) {
        int v5 = v4;
      }
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _sendMessage:frameType:service:session:]_block_invoke",  20LL,  "Sent message to %@, %@, %@\n",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  v5);
      id v4 = v7;
    }
  }
}

void sub_10016C8D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (dword_100643B70 <= 20)
  {
    id v7 = v3;
    if (dword_100643B70 != -1 || (v6 = _LogCategory_Initialize(&dword_100643B70, 20LL), id v4 = v7, v6))
    {
      int v5 = @"success";
      if (v4) {
        int v5 = v4;
      }
      LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _sendMessage:frameType:service:session:]_block_invoke_2",  20LL,  "Sent message to %@, %@, %@\n",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  v5);
      id v4 = v7;
    }
  }
}

id sub_10016E294(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startUnlockBLEConnectionWithDevice:*(void *)(a1 + 40) encrypted:*(unsigned __int8 *)(a1 + 48)];
}

id sub_10016E508(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _stopUnlockBLEConnectionWithDevice:*(void *)(a1 + 40)];
}

id sub_10016E6C4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _sendUnlockData:*(void *)(a1 + 40) toBLEDevice:*(void *)(a1 + 48) direct:0 completion:*(void *)(a1 + 56)];
}

void sub_10016EA6C(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v8 = a3;
  if ([v8 serviceType] == 9)
  {
    int v6 = (void *)objc_claimAutoreleasedReturnValue([v8 receivedFramePeerHandler]);

    if (v6)
    {
      id v7 = (void (**)(void, void, void, void))objc_claimAutoreleasedReturnValue([v8 receivedFramePeerHandler]);
      v7[2](v7, 7LL, *(void *)(a1 + 32), *(void *)(a1 + 40));

      *a4 = 1;
    }
  }
}

id sub_10016EB50(uint64_t a1)
{
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 432LL);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v9 + 1) + 8LL * (void)i);
      }

      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v4);
  }

  return [*(id *)(a1 + 32) _update];
}

id sub_10016EFBC(id result)
{
  id v1 = result;
  if (dword_100643B70 <= 50)
  {
    if (dword_100643B70 != -1 || (id result = (id)_LogCategory_Initialize(&dword_100643B70, 50LL), (_DWORD)result)) {
      id result = (id)LogPrintF( &dword_100643B70,  "-[SDNearbyAgent unlockUpdateAdvertising:mask:]_block_invoke",  50LL,  "Unlock advertise update: 0x%X flags, 0x%X mask\n",  *((_DWORD *)v1 + 10),  *((_DWORD *)v1 + 11));
    }
  }

  int v2 = *((_DWORD *)v1 + 11);
  if ((v2 & 1) != 0 && (uint64_t v3 = *((void *)v1 + 4), (*((_DWORD *)v1 + 10) & 1) != *(_BYTE *)(v3 + 762)))
  {
    *(_BYTE *)(v3 + 762) = *((_DWORD *)v1 + 10) & 1;
    int v4 = 1;
    if ((v2 & 2) == 0) {
      goto LABEL_12;
    }
  }

  else
  {
    int v4 = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_12;
    }
  }

  uint64_t v5 = *((void *)v1 + 4);
  if (((*((_DWORD *)v1 + 10) >> 1) & 1) != *(_BYTE *)(v5 + 764))
  {
    *(_BYTE *)(v5 + 764) = (*((_DWORD *)v1 + 10) & 2) != 0;
    int v4 = 1;
  }

void sub_10016F2EC(uint64_t a1)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  int v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", &Current, 8LL));
  [v2 sendUnlockData:v3 toBLEDevice:*(void *)(a1 + 40) completion:&stru_1005CFD98];
}

void sub_10016F35C(id a1, NSError *a2)
{
  int v2 = a2;
  uint64_t v3 = v2;
  if (dword_100643B70 <= 50
    && ((v6 = v2, dword_100643B70 != -1) || (v5 = _LogCategory_Initialize(&dword_100643B70, 50LL), uint64_t v3 = v6, v5)))
  {
    int v4 = @"success";
    if (v3) {
      int v4 = (const __CFString *)v3;
    }
    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent unlockStartTestClientWithDevice:]_block_invoke_2",  50LL,  "Unlock test send: %@\n",  v4);
  }

  else
  {
  }

void sub_10016F3EC(uint64_t a1)
{
  int v2 = *(void **)(*(void *)(a1 + 32) + 776LL);
  if (v2)
  {
    uint64_t v3 = v2;
    dispatch_source_cancel(v3);
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(void **)(v4 + 776);
    *(void *)(v4 + 776) = 0LL;
  }

  if (dword_100643B70 <= 50 && (dword_100643B70 != -1 || _LogCategory_Initialize(&dword_100643B70, 50LL))) {
    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent unlockStartTestClientWithDevice:]_block_invoke_3",  50LL,  "Unlock test client timer stopped\n");
  }
}

id sub_10016F654(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 824LL) = 1;
  return [*(id *)(a1 + 32) _update];
}

id sub_10016F6C0(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 824LL) = 0;
  return [*(id *)(a1 + 32) _update];
}

id sub_10016F9CC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

id sub_10016FA2C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _testPipePing];
}

void sub_10016FB10(id a1, NSError *a2)
{
  int v2 = a2;
  uint64_t v3 = v2;
  if (v2
    && dword_100643B70 <= 60
    && ((v5 = v2, dword_100643B70 != -1) || (v4 = _LogCategory_Initialize(&dword_100643B70, 60LL), uint64_t v3 = v5, v4)))
  {
    LogPrintF( &dword_100643B70,  "-[SDNearbyAgent _testPipePing]_block_invoke",  60LL,  "### BTPipe ping request failed: %@\n",  v3);
  }

  else
  {
  }

Class sub_100170264()
{
  if (qword_100657218 != -1) {
    dispatch_once(&qword_100657218, &stru_1005CFDD8);
  }
  Class result = objc_getClass("SSAccountStore");
  qword_100657210 = (uint64_t)result;
  off_100643BE0 = (uint64_t (*)())sub_1001702C0;
  return result;
}

id sub_1001702C0()
{
  return (id)qword_100657210;
}

void sub_1001702CC(id a1)
{
  qword_100657220 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/StoreServices.framework/StoreServices", 2);
}

Class sub_1001702F4()
{
  if (qword_100657230 != -1) {
    dispatch_once(&qword_100657230, &stru_1005CFDF8);
  }
  Class result = objc_getClass("AKAccountManager");
  qword_100657228 = (uint64_t)result;
  off_100643BE8 = (uint64_t (*)())sub_100170350;
  return result;
}

id sub_100170350()
{
  return (id)qword_100657228;
}

void sub_10017035C(id a1)
{
  qword_100657238 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/AuthKit.framework/AuthKit", 2);
}

Class sub_100170384()
{
  if (qword_100657248 != -1) {
    dispatch_once(&qword_100657248, &stru_1005CFE18);
  }
  Class result = objc_getClass("ANAnnounce");
  qword_100657240 = (uint64_t)result;
  off_100643BF0 = (uint64_t (*)())sub_1001703E0;
  return result;
}

id sub_1001703E0()
{
  return (id)qword_100657240;
}

void sub_1001703EC(id a1)
{
  qword_100657250 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/Announce.framework/Announce", 2);
}

void sub_100170414(os_log_t log)
{
  *(_WORD *)id v1 = 0;
  _os_log_debug_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEBUG,  "Auto Unlock advertise rate background",  v1,  2u);
}

void sub_100170454(void *a1)
{
  id v1 = a1;
  int v13 = 0;
  if (v1)
  {
    if (dword_100643C58 <= 30
      && (dword_100643C58 != -1 || _LogCategory_Initialize(&dword_100643C58, 30LL)))
    {
      LogPrintF( &dword_100643C58,  "void SDAppleIDClearGSTokenCache(NSString * _Nullable __strong)",  30LL,  "Removing GS token cache entry for %{mask}\n",  v1);
    }

    id v2 = sub_100170784(v1, &v13);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    int v4 = v3;
    if (v13)
    {
      id v5 = 0LL;
    }

    else
    {
      id v5 = (id)objc_claimAutoreleasedReturnValue([v3 username]);
      if (v5)
      {
        pthread_mutex_lock(&stru_100643CC8);
        [(id)qword_100657258 removeObjectForKey:v5];
        pthread_mutex_unlock(&stru_100643CC8);
        if (dword_100643C58 <= 30
          && (dword_100643C58 != -1 || _LogCategory_Initialize(&dword_100643C58, 30LL)))
        {
          LogPrintF( &dword_100643C58,  "void SDAppleIDClearGSTokenCache(NSString * _Nullable __strong)",  30LL,  "Removing Account token cache entry for %{mask}\n",  v1);
        }

        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 accountStore]);
        id v12 = 0LL;
        [v6 setCredential:0 forAccount:v4 serviceID:@"com.apple.gs.authagent.auth" error:&v12];
        id v7 = v12;

        if (v7
          && dword_100643C58 <= 90
          && (dword_100643C58 != -1 || _LogCategory_Initialize(&dword_100643C58, 90LL)))
        {
          LogPrintF( &dword_100643C58,  "void SDAppleIDClearGSTokenCache(NSString * _Nullable __strong)",  90LL,  "### Remove Account token cache entry for %{mask} failed: %@\n",  v1,  v7);
        }

        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v4 accountStore]);
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 3221225472LL;
        v10[2] = sub_100170BF4;
        v10[3] = &unk_1005CB4E8;
        id v5 = v5;
        id v11 = v5;
        [v8 saveAccount:v4 withCompletionHandler:v10];
      }

      else
      {
        int v13 = 201201;
      }
    }

    int v9 = v13;
    if (v13 && dword_100643C58 <= 90)
    {
      if (dword_100643C58 == -1)
      {
        int v9 = v13;
      }

      LogPrintF( &dword_100643C58,  "void SDAppleIDClearGSTokenCache(NSString * _Nullable __strong)",  90LL,  "### Remove GS token cache entry failed: %d\n",  v9);
    }
  }

  else
  {
    if (dword_100643C58 <= 30
      && (dword_100643C58 != -1 || _LogCategory_Initialize(&dword_100643C58, 30LL)))
    {
      LogPrintF( &dword_100643C58,  "void SDAppleIDClearGSTokenCache(NSString * _Nullable __strong)",  30LL,  "Removing all GS token cache entries\n");
    }

    pthread_mutex_lock(&stru_100643CC8);
    [(id)qword_100657258 removeAllObjects];
    pthread_mutex_unlock(&stru_100643CC8);
    int v4 = 0LL;
    id v5 = 0LL;
    int v13 = 0;
  }

id sub_100170784(void *a1, int *a2)
{
  id v3 = a1;
  if (!v3)
  {
    id v5 = 0LL;
    id v7 = 0LL;
    id v11 = 0LL;
    __int128 v10 = 0LL;
    id obj = 0LL;
    id v9 = 0LL;
    uint64_t v8 = 0LL;
    int v25 = -6705;
    goto LABEL_44;
  }

  int v4 = (void *)objc_claimAutoreleasedReturnValue(+[AKAccountManager sharedInstance](&OBJC_CLASS___AKAccountManager, "sharedInstance"));
  id v5 = v4;
  if (!v4)
  {
    id v7 = 0LL;
    id v11 = 0LL;
LABEL_53:
    __int128 v10 = 0LL;
    goto LABEL_54;
  }

  uint64_t v6 = objc_claimAutoreleasedReturnValue([v4 appleIDAccountWithAppleID:v3]);
  if (v6)
  {
    id v7 = (void *)v6;
    uint64_t v8 = 0LL;
    id v9 = 0LL;
    id obj = 0LL;
    __int128 v10 = 0LL;
    id v11 = 0LL;
LABEL_39:
    if (dword_100643C58 <= 50
      && (dword_100643C58 != -1 || _LogCategory_Initialize(&dword_100643C58, 50LL)))
    {
      LogPrintF( &dword_100643C58,  "ACAccount * _Nullable AccountForAppleID(NSString * _Nonnull __strong, OSStatus * _Nullable)",  50LL,  "AccountForAppleID found account %@\n",  v7);
    }

    int v25 = 0;
    goto LABEL_44;
  }

  if (dword_100643C58 <= 50 && (dword_100643C58 != -1 || _LogCategory_Initialize(&dword_100643C58, 50LL))) {
    LogPrintF( &dword_100643C58,  "ACAccount * _Nullable AccountForAppleID(NSString * _Nonnull __strong, OSStatus * _Nullable)",  50LL,  "AccountForAppleID falling back to account aliases\n");
  }
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v5 store]);
  id v11 = v12;
  if (!v12)
  {
    id v7 = 0LL;
    goto LABEL_53;
  }

  __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([v12 accountTypeWithAccountTypeIdentifier:ACAccountTypeIdentifierIDMS]);
  if (!v10
    || (int v13 = (void *)objc_claimAutoreleasedReturnValue([v11 accountsWithAccountType:v10])) == 0)
  {
    id v7 = 0LL;
LABEL_54:
    id obj = 0LL;
    id v9 = 0LL;
    uint64_t v8 = 0LL;
    int v25 = 201204;
    goto LABEL_44;
  }

  uint64_t v28 = v10;
  unsigned __int8 v29 = v11;
  uint64_t v30 = a2;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  id obj = v13;
  id v14 = [obj countByEnumeratingWithState:&v37 objects:v42 count:16];
  if (v14)
  {
    id v15 = v14;
    id v9 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v32 = *(void *)v38;
    while (2)
    {
      for (i = 0LL; i != v15; i = (char *)i + 1)
      {
        if (*(void *)v38 != v32) {
          objc_enumerationMutation(obj);
        }
        uint64_t v18 = *(void *)(*((void *)&v37 + 1) + 8LL * (void)i);
        id v19 = (void *)objc_claimAutoreleasedReturnValue([v5 aliasesForAccount:v18]);

        __int128 v35 = 0u;
        __int128 v36 = 0u;
        __int128 v33 = 0u;
        __int128 v34 = 0u;
        id v9 = v19;
        id v20 = [v9 countByEnumeratingWithState:&v33 objects:v41 count:16];
        if (v20)
        {
          id v21 = v20;
          uint64_t v22 = v5;
          uint64_t v23 = *(void *)v34;
LABEL_19:
          uint64_t v24 = 0LL;
          while (1)
          {
            if (*(void *)v34 != v23) {
              objc_enumerationMutation(v9);
            }
            if (![*(id *)(*((void *)&v33 + 1) + 8 * v24) caseInsensitiveCompare:v3]) {
              break;
            }
            if (v21 == (id)++v24)
            {
              id v21 = [v9 countByEnumeratingWithState:&v33 objects:v41 count:16];
              if (v21) {
                goto LABEL_19;
              }
              id v5 = v22;
              goto LABEL_34;
            }
          }

          id v5 = v22;
          uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v22 altDSIDForAccount:v18]);

          if (!v8)
          {
            if (dword_100643C58 <= 90
              && (dword_100643C58 != -1 || _LogCategory_Initialize(&dword_100643C58, 90LL)))
            {
              LogPrintF( &dword_100643C58,  "ACAccount * _Nullable AccountForAppleID(NSString * _Nonnull __strong, OSStatus * _Nullable)",  90LL,  "### AccountForAppleID altDSIDForAccount:%@ returned nil\n",  v18);
            }

            uint64_t v16 = 0LL;
            goto LABEL_34;
          }

          id v7 = (void *)objc_claimAutoreleasedReturnValue([v22 appleIDAccountWithAltDSID:v8]);

          if (!v7)
          {
            uint64_t v16 = v8;
            continue;
          }

          id v11 = v29;
          a2 = v30;
          __int128 v10 = v28;
          goto LABEL_39;
        }

void sub_100170BF4(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (a2)
  {
    if (dword_100643C58 <= 30)
    {
      id v9 = v5;
      if (dword_100643C58 != -1 || (v7 = _LogCategory_Initialize(&dword_100643C58, 30LL), uint64_t v6 = v9, v7))
      {
        LogPrintF( &dword_100643C58,  "void SDAppleIDClearGSTokenCache(NSString * _Nullable __strong)_block_invoke",  30LL,  "Saved Account '%@ for token remove\n",  *(void *)(a1 + 32));
LABEL_8:
        uint64_t v6 = v9;
      }
    }
  }

  else if (dword_100643C58 <= 90)
  {
    id v9 = v5;
    if (dword_100643C58 != -1 || (v8 = _LogCategory_Initialize(&dword_100643C58, 90LL), uint64_t v6 = v9, v8))
    {
      LogPrintF( &dword_100643C58,  "void SDAppleIDClearGSTokenCache(NSString * _Nullable __strong)_block_invoke",  90LL,  "### Save Account %@ for token remove failed: %@\n",  *(void *)(a1 + 32),  v6);
      goto LABEL_8;
    }
  }
}

void sub_100170CE4(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v6)
  {
    int v8 = (dispatch_queue_s *)v6;
  }

  else
  {
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    int v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  }

  __int128 v10 = v8;
  v56[0] = 0;
  __int128 v38 = v6;
  __int128 v39 = v5;
  if (!v5)
  {
    __int128 v37 = 0LL;
    id v24 = 0LL;
    id v27 = 0LL;
    id v26 = 0LL;
    id v13 = 0LL;
    uint64_t v36 = 4294960591LL;
    goto LABEL_46;
  }

  if (!v7)
  {
    id v13 = 0LL;
    id v26 = 0LL;
    id v25 = 0LL;
    id v15 = 0LL;
    id v27 = 0LL;
    id v28 = 0LL;
    id v24 = 0LL;
    id v5 = 0LL;
    __int128 v37 = 0LL;
    goto LABEL_62;
  }

  id v11 = sub_100170784(v5, (int *)v56);
  id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  id v13 = (id)objc_claimAutoreleasedReturnValue([v12 username]);
  if (!v13) {
    id v13 = v5;
  }
  pthread_mutex_lock(&stru_100643CC8);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_100657258 objectForKeyedSubscript:v13]);
  __int128 v37 = v12;
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKeyedSubscript:@"altDSID"]);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:@"gsToken"]);
    if (dword_100643C58 <= 40
      && (dword_100643C58 != -1 || _LogCategory_Initialize(&dword_100643C58, 40LL)))
    {
      LogPrintF( &dword_100643C58,  "void SDAppleIDGetGSToken(NSString * _Nonnull __strong, dispatch_queue_t  _Nullable __strong, SDAppleIDGSTokenCom pletion  _Nullable __strong)",  40LL,  "Reusing cached altDSID and gstoken for %@\n",  v13);
    }

    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100171560;
    block[3] = &unk_1005CF838;
    id v55 = v7;
    id v24 = v16;
    id v53 = v24;
    id v25 = v17;
    id v54 = v25;
    dispatch_async(v10, block);

    pthread_mutex_unlock(&stru_100643CC8);
    id v26 = 0LL;
    id v27 = 0LL;
    id v28 = 0LL;
    id v5 = 0LL;
    goto LABEL_62;
  }

  pthread_mutex_unlock(&stru_100643CC8);
  if (!v12)
  {
    uint64_t v23 = 0LL;
    uint64_t v18 = 0LL;
    goto LABEL_36;
  }

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "aa_altDSID"));
  id v19 = (void *)objc_claimAutoreleasedReturnValue([v12 accountType]);
  id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 identifier]);
  unsigned int v21 = [v20 isEqualToString:ACAccountTypeIdentifierAppleIDAuthentication];

  if (!v21)
  {
    if (dword_100643C58 <= 90
      && (dword_100643C58 != -1 || _LogCategory_Initialize(&dword_100643C58, 90LL)))
    {
      unsigned __int8 v29 = (void *)objc_claimAutoreleasedReturnValue([v12 accountType]);
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v29 identifier]);
      LogPrintF( &dword_100643C58,  "void SDAppleIDGetGSToken(NSString * _Nonnull __strong, dispatch_queue_t  _Nullable __strong, SDAppleIDGSTokenCom pletion  _Nullable __strong)",  90LL,  "### account identifier is %@ for %@\n",  v30,  v13);
    }

    goto LABEL_35;
  }

  if ((objc_opt_respondsToSelector(v12, "aida_tokenForService:") & 1) == 0)
  {
    if (dword_100643C58 <= 90
      && (dword_100643C58 != -1 || _LogCategory_Initialize(&dword_100643C58, 90LL)))
    {
      LogPrintF( &dword_100643C58,  "void SDAppleIDGetGSToken(NSString * _Nonnull __strong, dispatch_queue_t  _Nullable __strong, SDAppleIDGSTokenCom pletion  _Nullable __strong)",  90LL,  "### ACAccount <%@> doesn't respond to selector aida_tokenForService:\n",  v12);
    }

LABEL_50:
  if (v7)
  {
    v40[0] = _NSConcreteStackBlock;
    v40[1] = 3221225472LL;
    v40[2] = sub_1001719C0;
    v40[3] = &unk_1005CE5C8;
    id v41 = v7;
    unsigned int v42 = v56[0];
    dispatch_async(v10, v40);
  }

  id v25 = 0LL;
  id v15 = 0LL;
  id v28 = 0LL;
LABEL_63:
}

    swift_release_n(v135, 2LL);

    goto LABEL_57;
  }

  if (qword_100643F08 != -1) {
    swift_once(&qword_100643F08, sub_1001EE100);
  }
  v129 = *(void *)(v0 + 112);
  v130 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v130, (uint64_t)qword_1006473E0);
  v131 = swift_retain_n(v129, 2LL);
  v132 = (os_log_s *)Logger.logObject.getter(v131);
  v133 = static os_log_type_t.default.getter();
  v134 = os_log_type_enabled(v132, v133);
  v135 = *(void *)(v0 + 112);
  if (!v134) {
    goto LABEL_50;
  }
  v136 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  v137 = swift_slowAlloc(32LL, -1LL);
  v196 = v137;
  v138 = v137;
  *(_DWORD *)v136 = 136315138;
  v139 = NWConnection.debugDescription.getter(v137);
  v141 = v140;
  *v128 = sub_10018CDB4(v139, v140, &v196);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v128, v0 + 64, v136 + 4, v136 + 12);
  swift_bridgeObjectRelease(v141);
  swift_release_n(v135, 2LL);
  v142 = "Preparing transfer connection %s";
LABEL_43:
  _os_log_impl((void *)&_mh_execute_header, v132, v133, v142, v136, 0xCu);
  swift_arrayDestroy(v138, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v138, -1LL, -1LL);
  v151 = v136;
LABEL_44:
  swift_slowDealloc(v151, -1LL, -1LL);

LABEL_57:
  v175 = *(void *)(v0 + 216);
  v176 = *(void *)(v0 + 224);
  v178 = *(void *)(v0 + 200);
  v177 = *(void *)(v0 + 208);
  v180 = *(void *)(v0 + 184);
  v179 = *(void *)(v0 + 192);
  v181 = *(void *)(v0 + 160);
  v182 = *(void *)(v0 + 136);
  swift_task_dealloc(*(void *)(v0 + 248));
  swift_task_dealloc(v176);
  swift_task_dealloc(v175);
  swift_task_dealloc(v177);
  swift_task_dealloc(v178);
  swift_task_dealloc(v179);
  swift_task_dealloc(v180);
  swift_task_dealloc(v181);
  swift_task_dealloc(v182);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

    sub_1002FAC58((void **)&v31, (const void **)&v30, &v29);
    return 1LL;
  }

  Class result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_100171560(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5], 0LL);
}

uint64_t sub_100171578(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5], 0LL);
}

void sub_100171590(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v6)
  {
    id v8 = (id)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:AKAuthenticationAlternateDSIDKey]);
    if (!v8) {
      id v8 = *(id *)(a1 + 32);
    }
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:AKAuthenticationIDMSTokenKey]);
    uint64_t v10 = objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"com.apple.gs.authagent.auth"]);
    id v11 = (void *)v10;
    if (v8) {
      BOOL v12 = v10 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12)
    {
      if (dword_100643C58 <= 90
        && (dword_100643C58 != -1 || _LogCategory_Initialize(&dword_100643C58, 90LL)))
      {
        LogPrintF( &dword_100643C58,  "void SDAppleIDGetGSToken(NSString * _Nonnull __strong, dispatch_queue_t  _Nullable __strong, SDAppleIDGSTokenC ompletion  _Nullable __strong)_block_invoke_3",  90LL,  "### authenticateWithContext completion called with AltDSID = %@, token = %d\n",  v8,  v11 != 0LL);
      }
    }

    else
    {
      pthread_mutex_lock(&stru_100643CC8);
      if (!qword_100657258)
      {
        id v13 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        id v14 = (void *)qword_100657258;
        qword_100657258 = (uint64_t)v13;
      }

      v27[0] = @"altDSID";
      v27[1] = @"gsToken";
      v28[0] = v8;
      v28[1] = v11;
      id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v28,  v27,  2LL));
      [(id)qword_100657258 setObject:v15 forKeyedSubscript:*(void *)(a1 + 40)];

      pthread_mutex_unlock(&stru_100643CC8);
      if (dword_100643C58 <= 50)
      {
        if (dword_100643C58 != -1 || _LogCategory_Initialize(&dword_100643C58, 50LL)) {
          LogPrintF( &dword_100643C58,  "void SDAppleIDGetGSToken(NSString * _Nonnull __strong, dispatch_queue_t  _Nullable __strong, SDAppleIDGSToke nCompletion  _Nullable __strong)_block_invoke_3",  50LL,  "AltDSID for %@: %@\n",  *(void *)(a1 + 40),  v8);
        }
        if (dword_100643C58 <= 10
          && (dword_100643C58 != -1 || _LogCategory_Initialize(&dword_100643C58, 10LL)))
        {
          LogPrintF( &dword_100643C58,  "void SDAppleIDGetGSToken(NSString * _Nonnull __strong, dispatch_queue_t  _Nullable __strong, SDAppleIDGSToke nCompletion  _Nullable __strong)_block_invoke_3",  10LL,  "GS token for %@: %@\n",  *(void *)(a1 + 40),  v11);
        }
      }
    }

    uint64_t v18 = *(void **)(a1 + 56);
    if (v18)
    {
      id v19 = *(dispatch_queue_s **)(a1 + 48);
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472LL;
      v23[2] = sub_100171968;
      v23[3] = &unk_1005CF838;
      id v26 = v18;
      id v24 = v8;
      id v25 = v11;
      dispatch_async(v19, v23);
    }

    goto LABEL_34;
  }

  if ([v6 code] == (id)-7003)
  {
    sub_1000ED758();
    sub_1000ED8D4();
  }

  if (dword_100643C58 <= 90 && (dword_100643C58 != -1 || _LogCategory_Initialize(&dword_100643C58, 90LL))) {
    LogPrintF( &dword_100643C58,  "void SDAppleIDGetGSToken(NSString * _Nonnull __strong, dispatch_queue_t  _Nullable __strong, SDAppleIDGSTokenCompl etion  _Nullable __strong)_block_invoke_3",  90LL,  "### Request GS token for %@ failed: %@\n",  *(void *)(a1 + 40),  v7);
  }
  uint64_t v16 = *(void **)(a1 + 56);
  if (v16)
  {
    uint64_t v17 = *(dispatch_queue_s **)(a1 + 48);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10017198C;
    block[3] = &unk_1005CC1B0;
    id v22 = v16;
    id v21 = v7;
    dispatch_async(v17, block);

    id v8 = v22;
LABEL_34:
  }
}

uint64_t sub_100171968(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48));
}

uint64_t sub_10017198C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, id))(*(void *)(a1 + 40) + 16))( *(void *)(a1 + 40),  0,  0,  [*(id *)(a1 + 32) code]);
}

uint64_t sub_1001719C0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  0LL,  0LL,  *(unsigned int *)(a1 + 40));
}

uint64_t sub_1001719DC(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = 0LL;
  uint64_t v8 = 4294960591LL;
  id v9 = 0LL;
  id v10 = 0LL;
  if (v5 && v6)
  {
    id v10 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@:%@", v5, v6));
    id v7 = v10;
    if (v10)
    {
      id v10 = (id)objc_claimAutoreleasedReturnValue([v10 dataUsingEncoding:4]);
      id v9 = v10;
      if (v10
        && (id v10 = (id)objc_claimAutoreleasedReturnValue([v10 base64EncodedStringWithOptions:0])) != 0)
      {
        if (a3)
        {
          id v10 = v10;
          uint64_t v8 = 0LL;
          *a3 = v10;
        }

        else
        {
          uint64_t v8 = 0LL;
        }
      }

      else
      {
        uint64_t v8 = 4294960534LL;
      }
    }

    else
    {
      id v9 = 0LL;
      uint64_t v8 = 4294960568LL;
    }
  }

  return v8;
}

uint64_t sub_100171AD0(void *a1, int a2, void *a3)
{
  id v4 = a1;
  id v5 = v4;
  if (!v4)
  {
    uint64_t v29 = 4294960591LL;
    goto LABEL_29;
  }

  if (!a3) {
    goto LABEL_28;
  }
  if (![v4 count])
  {
    id v8 = 0LL;
    id v9 = 0LL;
    id v27 = 0LL;
LABEL_27:
    id v28 = v27;
    *a3 = v27;

LABEL_28:
    uint64_t v29 = 0LL;
    goto LABEL_29;
  }

  id v34 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  if (v34)
  {
    id v31 = a3;
    uint64_t v32 = v5;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    id obj = v5;
    id v6 = [obj countByEnumeratingWithState:&v36 objects:v40 count:16];
    if (!v6)
    {
      id v8 = 0LL;
      id v9 = 0LL;
      goto LABEL_26;
    }

    id v7 = v6;
    id v8 = 0LL;
    id v9 = 0LL;
    uint64_t v10 = *(void *)v37;
    while (1)
    {
      id v11 = 0LL;
      BOOL v12 = v9;
      do
      {
        if (*(void *)v37 != v10) {
          objc_enumerationMutation(obj);
        }
        id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v36 + 1) + 8 * (void)v11) lowercaseString]);

        if (a2)
        {
          id v14 = v13;
          id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](&OBJC_CLASS___NSMutableString, "string"));
          unsigned int v15 = [v14 length];
          uint64_t v16 = v15 - 1;
          if ((int)(v15 - 1) >= 0)
          {
            do
            {
              uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "substringWithRange:", v16, 1));
              [v13 appendString:v17];

              --v16;
            }

            while (v16 != -1);
          }
        }

        id v8 = v13;
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](&OBJC_CLASS___NSMutableData, "dataWithLength:", 32LL));
        if (v18)
        {
          id v19 = objc_claimAutoreleasedReturnValue([v8 dataUsingEncoding:4]);
          id v20 = [v19 bytes];
          CC_LONG v21 = [v19 length];
          id v22 = v18;
          CC_SHA256(v20, v21, (unsigned __int8 *)[v22 mutableBytes]);
          uint64_t v23 = malloc((2 * (void)[v22 length]) | 1);
          if (v23)
          {
            id v24 = v23;
            id v25 = v22;
            DataToHexCStringEx([v25 bytes], objc_msgSend(v25, "length"), v24, "0123456789abcdef");
            id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v24));
            free(v24);
            goto LABEL_17;
          }
        }

        else
        {
          id v19 = 0LL;
        }

        id v9 = 0LL;
LABEL_17:

        if (v9) {
          [v34 addObject:v9];
        }
        id v11 = (char *)v11 + 1;
        BOOL v12 = v9;
      }

      while (v11 != v7);
      id v26 = [obj countByEnumeratingWithState:&v36 objects:v40 count:16];
      id v7 = v26;
      if (!v26)
      {
LABEL_26:

        a3 = v31;
        id v5 = v32;
        id v27 = v34;
        goto LABEL_27;
      }
    }
  }

  uint64_t v29 = 4294960568LL;
LABEL_29:

  return v29;
}

void sub_100171DFC(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (v9)
  {
    id v11 = v9;
  }

  else
  {
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    id v11 = (id)objc_claimAutoreleasedReturnValue(global_queue);
  }

  id v13 = v11;
  id v14 = [v7 count];
  if (v8 && v14)
  {
    if (v10)
    {
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472LL;
      v15[2] = sub_100171F2C;
      v15[3] = &unk_1005D0770;
      id v16 = v7;
      id v17 = v8;
      id v18 = v10;
      SFAppleIDVerifyCertificateChain(v16, v13, v15);
    }
  }

  else if (v10)
  {
    (*((void (**)(id, void, uint64_t))v10 + 2))(v10, 0LL, 4294960591LL);
  }
}

void sub_100171F2C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndexedSubscript:0]);

    if (v5)
    {
      id v11 = 0LL;
      int v6 = SFAppleIDCommonNameForCertificate(v5, &v11);
      id v7 = v11;
      if (!v6)
      {
        id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountIdentifier]);
        unsigned __int8 v9 = [v7 isEqualToString:v8];

        if ((v9 & 1) == 0
          && dword_100643C58 <= 90
          && (dword_100643C58 != -1 || _LogCategory_Initialize(&dword_100643C58, 90LL)))
        {
          LogPrintF( &dword_100643C58,  "void SDAppleIDAuthenticateCertificateChain(NSArray * _Nonnull __strong, SDAppleIDVerifiedIdentity * _Nonnull __strong, dispatch_queue_t  _Nullable __strong, SDAppleIDCertificateChainAuthenticationHandler  _Nonnull __ strong)_block_invoke",  90LL,  "Account identifier check failed");
        }
      }
    }

    else
    {
      id v7 = 0LL;
    }
  }

  else
  {
    if (dword_100643C58 <= 90
      && (dword_100643C58 != -1 || _LogCategory_Initialize(&dword_100643C58, 90LL)))
    {
      LogPrintF( &dword_100643C58,  "void SDAppleIDAuthenticateCertificateChain(NSArray * _Nonnull __strong, SDAppleIDVerifiedIdentity * _Nonnull __s trong, dispatch_queue_t  _Nullable __strong, SDAppleIDCertificateChainAuthenticationHandler  _Nonnull __strong)_block_invoke",  90LL,  "SFAppleIDVerifyCertificateChain failed with err=%#m",  a4);
    }

    id v7 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

uint64_t sub_1001720B8(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  int v23 = 0;
  if ([v5 count] && v6)
  {
    if ((SFAppleIDVerifyCertificateChainSync(v5, &v23) & 1) == 0)
    {
      if (dword_100643C58 <= 90
        && (dword_100643C58 != -1 || _LogCategory_Initialize(&dword_100643C58, 90LL)))
      {
        LogPrintF( &dword_100643C58,  "BOOL SDAppleIDAuthenticateCertificateChainSync(NSArray * _Nonnull __strong, SDAppleIDVerifiedIdentity * _Nonnu ll __strong, NSError * _Nullable __autoreleasing * _Nullable)",  90LL,  "SFAppleIDVerifyCertificateChainSync failed with err=%#m",  v23);
      }

uint64_t SDAuthenticationRequestReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0LL;
        int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v11 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0LL;
        *(_BYTE *)(a1 + 72) |= 8u;
        while (1)
        {
          uint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v17 = v16 + 1;
          if (v16 == -1 || v17 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v18 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
          v15 |= (unint64_t)(v18 & 0x7F) << v13;
          if ((v18 & 0x80) == 0) {
            goto LABEL_47;
          }
          v13 += 7;
          BOOL v10 = v14++ >= 9;
          if (v10)
          {
            LODWORD(v15) = 0;
            goto LABEL_49;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_47:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_49:
        uint64_t v36 = 68LL;
        goto LABEL_54;
      case 2u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v15 = 0LL;
        *(_BYTE *)(a1 + 72) |= 4u;
        break;
      case 3u:
        uint64_t String = PBReaderReadString(a2);
        uint64_t v26 = objc_claimAutoreleasedReturnValue(String);
        uint64_t v27 = 56LL;
        goto LABEL_45;
      case 4u:
        uint64_t Data = PBReaderReadData(a2);
        uint64_t v26 = objc_claimAutoreleasedReturnValue(Data);
        uint64_t v27 = 32LL;
        goto LABEL_45;
      case 5u:
        uint64_t v29 = PBReaderReadData(a2);
        uint64_t v26 = objc_claimAutoreleasedReturnValue(v29);
        uint64_t v27 = 40LL;
        goto LABEL_45;
      case 6u:
        *(_BYTE *)(a1 + 72) |= 2u;
        unint64_t v30 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v30 <= 0xFFFFFFFFFFFFFFF7LL && v30 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v31 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 8;
        }

        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v31 = 0LL;
        }

        uint64_t v37 = 16LL;
        goto LABEL_59;
      case 7u:
        uint64_t v32 = PBReaderReadData(a2);
        uint64_t v26 = objc_claimAutoreleasedReturnValue(v32);
        uint64_t v27 = 24LL;
        goto LABEL_45;
      case 8u:
        *(_BYTE *)(a1 + 72) |= 1u;
        unint64_t v33 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v33 <= 0xFFFFFFFFFFFFFFF7LL && v33 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v31 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33 + 8;
        }

        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v31 = 0LL;
        }

        uint64_t v37 = 8LL;
LABEL_59:
        *(void *)(a1 + v37) = v31;
        continue;
      case 9u:
        uint64_t v34 = PBReaderReadString(a2);
        uint64_t v26 = objc_claimAutoreleasedReturnValue(v34);
        uint64_t v27 = 48LL;
LABEL_45:
        int v35 = *(void **)(a1 + v27);
        *(void *)(a1 + v27) = v26;

        continue;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      uint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v23 = v22 + 1;
      if (v22 == -1 || v23 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v24 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23;
      v15 |= (unint64_t)(v24 & 0x7F) << v20;
      if ((v24 & 0x80) == 0) {
        goto LABEL_51;
      }
      v20 += 7;
      BOOL v10 = v21++ >= 9;
      if (v10)
      {
        LODWORD(v15) = 0;
        goto LABEL_53;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_51:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v15) = 0;
    }
LABEL_53:
    uint64_t v36 = 64LL;
LABEL_54:
    *(_DWORD *)(a1 + v36) = v15;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1001740FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

void sub_10017414C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  [WeakRetained alertManager:*(void *)(*(void *)(a1 + 32) + 48) cancelingTransferWithRecordID:*(void *)(a1 + 40) withFailureReason:0];
}

id sub_100174198(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  [WeakRetained _unpublish];

  return [*(id *)(*(void *)(a1 + 32) + 40) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
}

void sub_100174300(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v5 = a2;
  char v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v3 dispatchQueue]);
  dispatch_assert_queue_V2(v4);

  [v5 transferWithIdentifierWasAccepted:*(void *)(a1 + 40)];
}

void sub_10017448C(void *a1, void *a2)
{
  id v3 = (void *)a1[4];
  id v5 = a2;
  char v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v3 dispatchQueue]);
  dispatch_assert_queue_V2(v4);

  [v5 transferWithIdentifierWasDeclined:a1[5] withFailureReason:a1[6]];
}

void sub_100174884( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001748EC( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100174954( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10000CF78( (void *)&_mh_execute_header,  a1,  a3,  "SDAirDropClassroomTransferManager: createCGImageWithData returned NULL",  a5,  a6,  a7,  a8,  0);
}

void sub_100174988( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001749BC( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

id share_sheet_log()
{
  if (qword_100657268[0] != -1) {
    dispatch_once(qword_100657268, &stru_1005D0808);
  }
  return (id)qword_100657260;
}

void sub_100174A60(id a1)
{
  os_log_t v1 = os_log_create("com.apple.ShareSheet", "ShareSheet");
  id v2 = (void *)qword_100657260;
  qword_100657260 = (uint64_t)v1;
}

id sub_100174B40(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onQueue_start");
}

void sub_100174CEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = v3;
  if (v3)
  {
    uint64_t v5 = auto_unlock_log(v3);
    unint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_100175740((uint64_t)v4, v6, v7, v8, v9, v10, v11, v12);
    }

    [*(id *)(a1 + 32) invalidateResponseTimer];
    char v13 = *(void **)(a1 + 32);
    unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  SFAutoUnlockErrorDomain,  151LL,  0LL));
    [v13 notifyDelegateWithError:v14];
  }
}

void sub_100175160(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    [*(id *)(a1 + 32) invalidateResponseTimer];
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = SFAutoUnlockErrorDomain;
    NSErrorUserInfoKey v7 = NSLocalizedDescriptionKey;
    uint64_t v8 = @"Step failed";
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v8,  &v7,  1LL));
    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v4,  151LL,  v5));
    [v3 notifyDelegateWithError:v6];
  }

id *sub_100175600(id *result)
{
  os_log_t v1 = result;
  int v2 = *((unsigned __int16 *)result + 24);
  if (v2 == 504)
  {
    uint64_t v5 = auto_unlock_log(result);
    unint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7[0] = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Received SDAutoUnlockMessageTypeRegistrationFinalize",  (uint8_t *)v7,  2u);
    }

    [v1[4] invalidateResponseTimer];
    return (id *)[v1[4] handleFinalize:v1[5]];
  }

  else if (v2 == 502)
  {
    uint64_t v3 = auto_unlock_log(result);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Received SDAutoUnlockMessageTypeRegistrationResponse",  buf,  2u);
    }

    [v1[4] invalidateResponseTimer];
    return (id *)[v1[4] handleInitialResponse:v1[5]];
  }

  return result;
}

void sub_100175740( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001757A8( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100175810( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100175844( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100176A38(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 56LL));
  [WeakRetained airDropController:*(void *)(a1 + 32) didChange:*(void *)(*(void *)(a1 + 32) + 24)];
}

uint64_t SDAutoUnlockAuthPromptRequestReadFrom(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (2)
    {
      if (!*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      {
        char v4 = 0;
        unsigned int v5 = 0;
        unint64_t v6 = 0LL;
        while (1)
        {
          unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
          v6 |= (unint64_t)(v8 & 0x7F) << v4;
          if ((v8 & 0x80) == 0) {
            goto LABEL_11;
          }
          v4 += 7;
          BOOL v9 = v5++ >= 9;
          if (v9)
          {
            unint64_t v6 = 0LL;
            int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
            goto LABEL_13;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          unint64_t v6 = 0LL;
        }
LABEL_13:
        if (v10) {
          BOOL v11 = 1;
        }
        else {
          BOOL v11 = (v6 & 7) == 4;
        }
        if (!v11)
        {
          switch((v6 >> 3))
          {
            case 1u:
              char v12 = 0;
              unsigned int v13 = 0;
              uint64_t v14 = 0LL;
              *(_BYTE *)(a1 + 36) |= 1u;
              break;
            case 2u:
              uint64_t Data = PBReaderReadData(a2);
              uint64_t v19 = objc_claimAutoreleasedReturnValue(Data);
              uint64_t v20 = 16LL;
              goto LABEL_30;
            case 3u:
              uint64_t String = PBReaderReadString(a2);
              uint64_t v19 = objc_claimAutoreleasedReturnValue(String);
              uint64_t v20 = 8LL;
              goto LABEL_30;
            case 4u:
              uint64_t v22 = PBReaderReadString(a2);
              uint64_t v19 = objc_claimAutoreleasedReturnValue(v22);
              uint64_t v20 = 24LL;
LABEL_30:
              unint64_t v23 = *(void **)(a1 + v20);
              *(void *)(a1 + v20) = v19;

              goto LABEL_35;
            default:
              uint64_t result = PBReaderSkipValueWithTag(a2);
              if (!(_DWORD)result) {
                return result;
              }
LABEL_35:
              if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
                return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
              }
              continue;
          }

          while (1)
          {
            unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
            v14 |= (unint64_t)(v16 & 0x7F) << v12;
            if ((v16 & 0x80) == 0) {
              goto LABEL_32;
            }
            v12 += 7;
            BOOL v9 = v13++ >= 9;
            if (v9)
            {
              LODWORD(v14) = 0;
              goto LABEL_34;
            }
          }

          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_32:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v14) = 0;
          }
LABEL_34:
          *(_DWORD *)(a1 + 32) = v14;
          goto LABEL_35;
        }
      }

      break;
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_100177F04( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, void *a10)
{
  if ((_DWORD)a4) {
    return [a10 notifyClient:a4];
  }
  else {
    return _[a10 parseResults:a6 port:__rev16(a7) txtLen:a8 txtRecord:a9 interface:a3];
  }
}

id sub_100177F34(uint64_t a1)
{
  return [*(id *)(a1 + 32) notifyClient:4294901728];
}

void sub_1001780C0( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001780F0( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000147D0( (void *)&_mh_execute_header,  a2,  a3,  "SDBonjourResolver: DNSServiceSetDispatchQueue returned %d",  a5,  a6,  a7,  a8,  0);
  sub_1000147C8();
}

void sub_100178154( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000147D0( (void *)&_mh_execute_header,  a2,  a3,  "SDBonjourResolver: DNSServiceResolve returned %d",  a5,  a6,  a7,  a8,  0);
  sub_1000147C8();
}

void sub_1001781B8( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001781E8( uint64_t a1, os_log_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1000147D0( (void *)&_mh_execute_header,  a2,  a3,  "SDBonjourResolver: DNSServiceCreateConnection returned %d",  a5,  a6,  a7,  a8,  0);
  sub_1000147C8();
}

id sub_1001786A0(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockWiFiManager sharedManager](&OBJC_CLASS___SDAutoUnlockWiFiManager, "sharedManager"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) wifiRequest]);
  [v2 cancelWiFiRequest:v3];

  return [*(id *)(a1 + 32) setWifiRequest:0];
}

id sub_1001787A4(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Asked to complete attempt if necessary",  buf,  2u);
  }

  [*(id *)(a1 + 32) setShouldWaitToCompleteUnlock:0];
  char v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) prewarmIdleStartDate]);
  [v4 timeIntervalSinceNow];
  [*(id *)(a1 + 32) setPrewarmIdleTime:-v5];

  id result = [*(id *)(a1 + 32) isWaitingToCompleteUnlock];
  if ((_DWORD)result)
  {
    id result = [*(id *)(a1 + 32) isAuthenticatingForSiri];
    if ((result & 1) == 0)
    {
      uint64_t v7 = auto_unlock_log(result);
      char v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)BOOL v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Completing waiting unlock attempt", v9, 2u);
      }

      return [*(id *)(a1 + 32) consumeAuthTokenIfReady];
    }
  }

  return result;
}

void sub_10017890C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) isWaitingToCompleteUnlock];
  if ((_DWORD)v2)
  {
    uint64_t v3 = auto_unlock_log(v2);
    char v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Tearing down AWDL", v8, 2u);
    }

    [*(id *)(a1 + 32) cancelWiFiRequest];
    double v5 = objc_alloc_init(&OBJC_CLASS___SDAutoUnlockCleanUpAWDL);
    -[SDAutoUnlockCleanUpAWDL setVersion:](v5, "setVersion:", 1LL);
    unint64_t v6 = *(void **)(a1 + 32);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[SDAutoUnlockCleanUpAWDL data](v5, "data"));
    [v6 sendData:v7 type:15 completionHandler:&stru_1005D0828];
  }

void sub_1001789DC(id a1, NSError *a2)
{
  id v2 = a2;
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = auto_unlock_log(v2);
    double v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1001812E4();
    }
  }
}

id sub_100178A9C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _cancel];
}

id sub_100178E88(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[SDAutoUnlockWiFiManager sharedManager](&OBJC_CLASS___SDAutoUnlockWiFiManager, "sharedManager"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) wifiRequest]);
  [v2 cancelWiFiRequest:v3];

  return [*(id *)(a1 + 32) setWifiRequest:0];
}

id sub_100179000(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleCanceledAfterSuccess];
}

void sub_10017AA90(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) autoUnlockDevice]);
  unsigned int v3 = [v2 supportsApproveIcon];

  if (v3)
  {
    [*(id *)(a1 + 32) setImageData:*(void *)(a1 + 40)];
    uint64_t v5 = auto_unlock_log([*(id *)(a1 + 32) setImageHash:*(void *)(a1 + 48)]);
    unint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceID]);
      int v22 = 138412290;
      unint64_t v23 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Image data updated (%@)",  (uint8_t *)&v22,  0xCu);
    }

    char v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 48);
    int v10 = (void *)objc_claimAutoreleasedReturnValue([v8 appName]);
    [v8 sendAuthPromptRequestWithImageHash:v9 appName:v10];

    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) iconTransferStore]);
    char v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) imageHash]);
    unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceID]);
    objc_msgSend( *(id *)(a1 + 32),  "setImageDataAlreadyCached:",  objc_msgSend(v11, "imageCachedForHash:device:", v12, v13));

    uint64_t v15 = auto_unlock_log(v14);
    char v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v17 = [*(id *)(a1 + 32) imageDataAlreadyCached];
      char v18 = @"NO";
      if (v17) {
        char v18 = @"YES";
      }
      int v22 = 138412290;
      unint64_t v23 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Image already cached: %@",  (uint8_t *)&v22,  0xCu);
    }

    uint64_t v19 = *(void **)(a1 + 32);
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue([v19 imageData]);
    [v19 sendAuthPromptImageDataIfReady:v20];
  }

  else
  {
    uint64_t v21 = auto_unlock_log(v4);
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v22) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Not updating icon, watch doesn't support icons",  (uint8_t *)&v22,  2u);
    }
  }
}

void sub_10017AD5C(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 301LL) = *(_BYTE *)(a1 + 40);
  uint64_t v2 = auto_unlock_log(a1);
  unsigned int v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    else {
      uint64_t v4 = @"NO";
    }
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceID]);
    int v8 = 138412546;
    uint64_t v9 = v4;
    __int16 v10 = 2112;
    BOOL v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Chosen device updated: %@ (%@)",  (uint8_t *)&v8,  0x16u);
  }

  unint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 imageData]);
  [v6 sendAuthPromptImageDataIfReady:v7];
}

id sub_10017AEF8(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 303LL) = *(_BYTE *)(a1 + 40);
  return [*(id *)(a1 + 32) setShouldWaitToCompleteUnlock:*(unsigned __int8 *)(a1 + 40)];
}

uint64_t sub_10017AF94(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 304LL) = *(_BYTE *)(result + 40);
  return result;
}

void sub_10017BEB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10017BED8(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log(a1);
  unsigned int v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Confirmation timer fired", v5, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained notifyDelegateWithError:*(void *)(a1 + 32)];
}

id sub_10017C09C(uint64_t a1)
{
  unsigned __int8 v2 = [*(id *)(a1 + 32) rangingDisabled];
  unsigned int v3 = *(void **)(a1 + 32);
  if ((v2 & 1) != 0)
  {
    [v3 setInRange:1];
    [*(id *)(a1 + 32) setDistance:&off_1005FAFC8];
    return [*(id *)(a1 + 32) handlePeerInRange];
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 wifiRequest]);
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 wifiRangingResults]);
  [*(id *)(a1 + 32) setWifiRangingResults:v6];

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) wifiRequest]);
  int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 wifiRangingError]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 domain]);
  [*(id *)(a1 + 32) setWifiErrorDomain:v9];

  __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) wifiRequest]);
  BOOL v11 = (void *)objc_claimAutoreleasedReturnValue([v10 wifiRangingError]);
  objc_msgSend(*(id *)(a1 + 32), "setWifiRangingErrorCode:", objc_msgSend(v11, "code"));

  char v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rangingStart]);
  [v12 timeIntervalSinceDate:v13];
  objc_msgSend(*(id *)(a1 + 32), "setRangingInterval:");

  uint64_t v15 = auto_unlock_log(v14);
  char v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = *(void *)(a1 + 40);
    char v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) wifiErrorDomain]);
    uint64_t v19 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138412802;
    uint64_t v27 = v17;
    __int16 v28 = 2112;
    uint64_t v29 = v18;
    __int16 v30 = 1024;
    int v31 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "AWDL ranging results returned %@, domain: %@, error %d",  buf,  0x1Cu);
  }

  if (*(void *)(a1 + 48)) {
    goto LABEL_6;
  }
  id v22 = [*(id *)(a1 + 32) peerInRange:*(void *)(a1 + 40)];
  if (!(_DWORD)v22)
  {
    if (!*(void *)(a1 + 48)) {
      return [*(id *)(a1 + 32) handlePeerOutOfRange];
    }
LABEL_6:
    [*(id *)(a1 + 32) setRangingTimedOut:1];
    [*(id *)(a1 + 32) setRangingErrorString:@"Ranging Timeout"];
    if ([*(id *)(a1 + 32) wifiRangingErrorCode])
    {
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rangingErrorString]);
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v20,  "stringByAppendingFormat:",  @" (%ld)",  objc_msgSend(*(id *)(a1 + 32), "wifiRangingErrorCode")));
      [*(id *)(a1 + 32) setRangingErrorString:v21];
    }

    else
    {
      uint64_t v25 = auto_unlock_log(0LL);
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_ERROR)) {
        sub_100181370();
      }
    }

    return [*(id *)(a1 + 32) handlePeerOutOfRange];
  }

  uint64_t v23 = auto_unlock_log(v22);
  char v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Peer in range", buf, 2u);
  }

  [*(id *)(a1 + 32) setInRange:1];
  return [*(id *)(a1 + 32) handlePeerInRange];
}

void sub_10017E940( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location, id *a13, id *a14)
{
}

void sub_10017E990(id a1, id a2)
{
  unsigned __int8 v2 = (void (**)(id, uint64_t))a2;
  uint64_t v3 = auto_unlock_log(v2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Starting wifi request", v5, 2u);
  }

  v2[2](v2, 1LL);
}

void sub_10017EA10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = auto_unlock_log(a1);
  unint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) wifiRequest]);
    *(_DWORD *)buf = 136315650;
    uint64_t v17 = "-[SDAutoUnlockLockSession startAWDL]_block_invoke";
    __int16 v18 = 2112;
    uint64_t v19 = v7;
    __int16 v20 = 1024;
    int v21 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%s AWDL started request:%@ error:%d",  buf,  0x1Cu);
  }

  int v8 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v10 = WeakRetained;
  if (a3)
  {
    [WeakRetained invalidateResponseTimer];

    id v10 = objc_loadWeakRetained(v8);
    uint64_t v11 = SFAutoUnlockErrorDomain;
    NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
    uint64_t v15 = @"AWDL network failed to start";
    char v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
    unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v11,  192LL,  v12));
    [v10 notifyDelegateWithError:v13];
  }

  else
  {
    [WeakRetained handleAWDLUp];
  }
}

void sub_10017EBA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = auto_unlock_log(a1);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v6 = @"NO";
    if ((_DWORD)a2) {
      unint64_t v6 = @"YES";
    }
    int v8 = 138412290;
    uint64_t v9 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Peer found (awdl up same time : %@)",  (uint8_t *)&v8,  0xCu);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handlePeerFound:a2];
}

void sub_10017EC7C(uint64_t a1)
{
  uint64_t v2 = auto_unlock_log(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Ranging started", v5, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleRangingStarted];
}

void sub_10017ECF8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = auto_unlock_log(v6);
  int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Ranging completed", v11, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v10 = [v5 code];

  [WeakRetained handleRangingResults:v6 errorCode:v10];
}

void sub_10017EDB0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained handleWiFiRequestInvalidated];
}

void sub_10017F560(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = auto_unlock_log([*(id *)(a1 + 32) setAttemptError:v3]);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_100181820();
    }

    uint64_t v6 = *(void *)(a1 + 40);
    if (v6) {
      (*(void (**)(uint64_t, id))(v6 + 16))(v6, v3);
    }
  }
}

void sub_10017F850(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    [*(id *)(a1 + 32) invalidateResponseTimer];
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = SFAutoUnlockErrorDomain;
    NSErrorUserInfoKey v7 = NSLocalizedDescriptionKey;
    int v8 = @"Auth prompt request failed";
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v8,  &v7,  1LL));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v4,  200LL,  v5));
    [v3 notifyDelegateWithError:v6];
  }

void sub_10017FDF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = auto_unlock_log(v3);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      NSErrorUserInfoKey v14 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Error sending image data %@", buf, 0xCu);
    }

    [*(id *)(a1 + 32) invalidateResponseTimer];
    NSErrorUserInfoKey v7 = *(void **)(a1 + 32);
    uint64_t v8 = SFAutoUnlockErrorDomain;
    NSErrorUserInfoKey v11 = NSLocalizedDescriptionKey;
    char v12 = @"Image data message failed";
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v12,  &v11,  1LL));
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v8,  202LL,  v9));
    [v7 notifyDelegateWithError:v10];
  }
}

void sub_1001800B8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = SFAutoUnlockErrorDomain;
  NSErrorUserInfoKey v6 = NSLocalizedDescriptionKey;
  NSErrorUserInfoKey v7 = @"Exchange response failed";
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v7,  &v6,  1LL));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v3,  103LL,  v4));
  [v2 notifyDelegateWithError:v5];
}

id sub_100180220(uint64_t a1)
{
  return _[*(id *)(a1 + 32) sendUnlockConfirmation:1 withError:0 suppressNotification:*(_BYTE *)(a1 + 40) == 0];
}

void sub_100180554(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32))
  {
    objc_msgSend(*(id *)(a1 + 40), "setAttemptError:");
    [*(id *)(a1 + 40) invalidateConfirmationTimer];
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 40);
LABEL_7:
    [v4 notifyDelegateWithError:v5];
    goto LABEL_8;
  }

  NSErrorUserInfoKey v6 = *(void **)(a1 + 40);
  if (v3)
  {
    [v6 setAttemptError:v3];
    uint64_t v7 = auto_unlock_log([*(id *)(a1 + 40) invalidateConfirmationTimer]);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Error sending confirmation", v17, 2u);
    }

    [*(id *)(a1 + 40) lockKeyBagIfNeeded];
    uint64_t v4 = *(void **)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    goto LABEL_7;
  }

  unsigned int v9 = [v6 canceled];
  id v10 = *(void **)(a1 + 40);
  if (v9)
  {
    [v10 invalidateConfirmationTimer];
    uint64_t v11 = SFAutoUnlockErrorDomain;
    NSErrorUserInfoKey v18 = NSLocalizedDescriptionKey;
    uint64_t v19 = @"Attempt Cancelled";
    char v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v19,  &v18,  1LL));
    unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v11,  118LL,  v12));

    [*(id *)(a1 + 40) notifyDelegateWithError:v13];
  }

  else
  {
    id v14 = [v10 supportsConfirmationACK];
    if ((_DWORD)v14)
    {
      uint64_t v15 = auto_unlock_log(v14);
      char v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Waiting for confirmation ack", v17, 2u);
      }
    }

    else
    {
      [*(id *)(a1 + 40) handleConfirmationACK];
    }
  }

void sub_1001812E4()
{
}

void sub_100181344()
{
}

void sub_100181370()
{
}

void sub_10018139C()
{
}

void sub_1001813FC()
{
}

void sub_10018145C()
{
}

void sub_100181488()
{
}

void sub_1001814E8()
{
}

void sub_100181514()
{
}

void sub_100181574()
{
}

void sub_1001815A0(void *a1, os_log_s *a2)
{
  v3[0] = 67109120;
  v3[1] = [a1 attemptType];
  _os_log_error_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_ERROR,  "Unexpected attempt type: %d",  (uint8_t *)v3,  8u);
  sub_10001480C();
}

void sub_100181624()
{
}

void sub_100181684()
{
}

void sub_1001816E4()
{
}

void sub_100181710(char a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1 & 1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Skip ranging is %d", (uint8_t *)v2, 8u);
  sub_1000147C8();
}

void sub_100181784( os_log_s *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1001817F4()
{
}

void sub_100181820()
{
}

void sub_100181880()
{
}

void sub_1001818AC()
{
}

void sub_100181A08( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

id sub_100181A98(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onqueue_enumerateRemoteObjectProxiesUsingBlock:", *(void *)(a1 + 40));
}

void sub_100181C70( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_100181C98(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = daemon_log(v3);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_100182CFC(a1);
  }
}

id sub_100181DA0(uint64_t a1)
{
  return _objc_msgSend( *(id *)(a1 + 32),  "onqueue_remoteObjectProxyForConnection:usingBlock:",  *(void *)(a1 + 40),  *(void *)(a1 + 48));
}

void sub_100181E88( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100181EA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = daemon_log(v3);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_100182CFC(a1);
  }
}

id sub_100181F70(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onqueue_activate");
}

id sub_100182120(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onqueue_invalidate");
}

void sub_1001824C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, id a17)
{
}

void sub_100182500(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(v2, "onqueue_connectionInvalidated:", WeakRetained);
  }
}

void sub_100182714(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  dispatch_queue_set_specific(*(dispatch_queue_t *)(*(void *)(a1 + 40) + 32LL), "SDXPCDaemonConnection", v2, 0LL);
  [*(id *)(a1 + 48) invoke];
  dispatch_queue_set_specific(*(dispatch_queue_t *)(*(void *)(a1 + 40) + 32LL), "SDXPCDaemonConnection", 0LL, 0LL);
  CFRelease(v2);
}

id sub_100182CF0(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 32));
}

void sub_100182CFC(uint64_t a1)
{
  id v1 = sub_100182CF0(a1);
  id v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "sd_description"));
  sub_100053178();
  sub_1000241C0( (void *)&_mh_execute_header,  v3,  v4,  "Failed to get remote object proxy for %@ (%@)",  v5,  v6,  v7,  v8,  v9);

  sub_1000241EC();
}

void sub_100182D84(os_log_t log)
{
  *(_WORD *)id v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Activate already called", v1, 2u);
}

uint64_t sub_100182DC4()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

id variable initialization expression of SDAirDropService.deviceStatus()
{
  return sub_100182DFC(&off_1005C8890, (SEL *)&selRef_sharedMonitor);
}

id variable initialization expression of SDAirDropService.nearbyAgent()
{
  return sub_100182DFC(off_1005C8888, (SEL *)&selRef_sharedNearbyAgent);
}

id sub_100182DFC(void *a1, SEL *a2)
{
  return [(id)objc_opt_self(*a1) *a2];
}

id variable initialization expression of SDAirDropService.bleController()
{
  if (qword_100644308 != -1) {
    swift_once(&qword_100644308, sub_1003EA8BC);
  }
  return (id)qword_1006698D0;
}

void *variable initialization expression of SDAirDropHashStoreCDB.stagedDeletedIDs()
{
  return &_swiftEmptySetSingleton;
}

void *variable initialization expression of SDAirDropHashStoreCDB.stagedAdditions()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of SDAirDropService.queue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v7);
  uint8_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100183168(0LL, (unint64_t *)&qword_100650E50, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.default.getter();
  uint64_t v15 = &_swiftEmptyArrayStorage;
  uint64_t v10 = sub_100183F14( (unint64_t *)&qword_100644420,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v11 = sub_100183098(&qword_100650E60);
  unint64_t v12 = sub_1001830D8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v15, v11, v12, v4, v10);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v3,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000021LL,  0x8000000100503200LL,  v9,  v6,  v3,  0LL);
}

id variable initialization expression of SDAirDropHashStoreCDB.reader()
{
  uint64_t v0 = sub_100183168(0LL, (unint64_t *)&qword_100644438, &OBJC_CLASS___NSData_ptr);
  id v1 = objc_allocWithZone(&OBJC_CLASS___CUKeyValueStoreReader);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  return [v1 initWithKeyType:ObjCClassFromMetadata valueType:ObjCClassFromMetadata];
}

uint64_t sub_100183098(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

unint64_t sub_1001830D8()
{
  unint64_t result = qword_100644430;
  if (!qword_100644430)
  {
    uint64_t v1 = sub_100183124(&qword_100650E60);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100644430);
  }

  return result;
}

uint64_t sub_100183124(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_100183168(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t type metadata accessor for SDAirDropDownloadDestinationProviderFactory()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary43SDAirDropDownloadDestinationProviderFactory);
}

void type metadata accessor for SFAutoUnlockDeviceType(uint64_t a1)
{
}

void type metadata accessor for SecTrust(uint64_t a1)
{
}

void type metadata accessor for SFAirDropNodeSelectionReason(uint64_t a1)
{
}

void type metadata accessor for RPControlFlags(uint64_t a1)
{
}

void type metadata accessor for Name(uint64_t a1)
{
}

void type metadata accessor for SDAirDropDiscoveryLevel(uint64_t a1)
{
}

void type metadata accessor for SFWatchWristState(uint64_t a1)
{
}

void type metadata accessor for WritingOptions(uint64_t a1)
{
}

void type metadata accessor for SDRPNearFieldPollingType(uint64_t a1)
{
}

void type metadata accessor for SFAuthenticationError(uint64_t a1)
{
}

void type metadata accessor for SDAirDropFlags(uint64_t a1)
{
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
}

void type metadata accessor for CGImage(uint64_t a1)
{
}

uint64_t sub_1001832C4(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1004CCC0C, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_100183300(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1004CCC0C, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_100183348(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1004CCC0C, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t sub_1001833A0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1004CCC0C, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_1001833EC(uint64_t a1, uint64_t a2)
{
  return sub_1001843CC(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100183404(uint64_t a1, uint64_t a2)
{
  return sub_1001843CC(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

void *sub_100183418@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_100183424(void *a1@<X8>)
{
  *a1 = 0LL;
}

uint64_t sub_10018342C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

void *sub_100183444@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_100183458@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_10018346C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_100183480(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_1001834B0@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = v3 == 0;
  return result;
}

uint64_t *sub_1001834DC@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = v5 == 0;
  return result;
}

void *sub_100183500(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_100183514(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_100183528(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_10018353C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_100183550(void *a1)
{
  return (*v1 & ~*a1) == 0LL;
}

BOOL sub_100183564(void *a1)
{
  return (*v1 & *a1) == 0LL;
}

BOOL sub_100183578(void *a1)
{
  return (*a1 & ~*v1) == 0LL;
}

BOOL sub_10018358C()
{
  return *v0 == 0LL;
}

void *sub_10018359C(void *result)
{
  *v1 &= ~*result;
  return result;
}

BOOL sub_1001835B0(void *a1, void *a2)
{
  return *a1 == *a2;
}

_DWORD *sub_1001835C4@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

Swift::Int sub_1001835D4()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100183618()
{
}

Swift::Int sub_100183640()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_100183680()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1001836C4()
{
}

Swift::Int sub_1001836EC()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_10018372C(uint64_t a1, uint64_t a2)
{
  int v7 = *v2;
  Hasher.init(_seed:)(v6);
  dispatch thunk of Hashable.hash(into:)(v6, a1, a2);
  return Hasher._finalize()();
}

uint64_t sub_10018378C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100183F14( &qword_100650690,  (uint64_t (*)(uint64_t))type metadata accessor for SFAuthenticationError,  (uint64_t)&protocol conformance descriptor for SFAuthenticationError);
  return _BridgedNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_1001837DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v8 = *v3;
  Hasher.init(_seed:)(v7);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

void sub_100183838(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100183844(uint64_t a1, id *a2)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  uint64_t v5 = v8;
  if (v8)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    uint64_t result = swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return result;
}

uint64_t sub_1001838B8(uint64_t a1, id *a2)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  char v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  uint64_t v5 = v9;
  if (v9)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_100183934@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v2;
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

void sub_100183974(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

_BYTE *sub_10018397C@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_BYTE *sub_100183990@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_BYTE *sub_1001839A4@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1001839B8(_BYTE *a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  int v4 = *v2;
  if ((v4 & v3) != v3) {
    *uint64_t v2 = v4 | v3;
  }
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int8 *sub_1001839E8@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  int v5 = v4 & v3;
  if ((v4 & v3) != 0) {
    *uint64_t v2 = v4 & ~(_BYTE)v3;
  }
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned __int8 *sub_100183A14@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *uint64_t v2 = v4 | v3;
  int v5 = v4 & v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

_BYTE *sub_100183A38(_BYTE *result)
{
  *v1 |= *result;
  return result;
}

_BYTE *sub_100183A4C(_BYTE *result)
{
  *v1 &= *result;
  return result;
}

_BYTE *sub_100183A60(_BYTE *result)
{
  *v1 ^= *result;
  return result;
}

_BYTE *sub_100183A74@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_100183A88(unsigned __int8 *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_100183A9C(_BYTE *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_100183AB0(unsigned __int8 *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_100183AC4()
{
  return *v0 == 0;
}

_BYTE *sub_100183AD4(_BYTE *result)
{
  *v1 &= ~*result;
  return result;
}

_BYTE *sub_100183AE8@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

id sub_100183AF4()
{
  return *v0;
}

uint64_t sub_100183AFC@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_100183B08@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_1001846EC(a1);
  uint64_t result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

void *sub_100183B44@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_100183B54(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_100183B60(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_100183B74(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100183B88@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  char v4 = sub_1001846B4(a1);
  uint64_t result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

unsigned __int8 *sub_100183BC4@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_100183BD4(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100183BE0()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(LAErrorDomain);
}

uint64_t sub_100183BF0(uint64_t a1)
{
  uint64_t v2 = sub_100183F14( &qword_100644D20,  (uint64_t (*)(uint64_t))type metadata accessor for LAError,  (uint64_t)&unk_1004CCC74);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100183C30(uint64_t a1)
{
  uint64_t v2 = sub_100183F14( &qword_100644D20,  (uint64_t (*)(uint64_t))type metadata accessor for LAError,  (uint64_t)&unk_1004CCC74);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100183C70(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100183F14( &qword_100644D20,  (uint64_t (*)(uint64_t))type metadata accessor for LAError,  (uint64_t)&unk_1004CCC74);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100183CD4()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_100183D08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100183F14( &qword_100644D20,  (uint64_t (*)(uint64_t))type metadata accessor for LAError,  (uint64_t)&unk_1004CCC74);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100183D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v7[9] = *v3;
  Hasher.init(_seed:)(v7);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

uint64_t sub_100183DB8(uint64_t a1)
{
  uint64_t v2 = sub_100183F14( &qword_100644B90,  (uint64_t (*)(uint64_t))type metadata accessor for Name,  (uint64_t)&unk_1004CBEF4);
  uint64_t v3 = sub_100183F14( &qword_100644B98,  (uint64_t (*)(uint64_t))type metadata accessor for Name,  (uint64_t)&unk_1004CBE94);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100183E3C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100183E64(uint64_t a1)
{
  uint64_t v2 = sub_100183F14( &qword_100644BA0,  (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey,  (uint64_t)&unk_1004CB95C);
  uint64_t v3 = sub_100183F14( &qword_100644BA8,  (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey,  (uint64_t)&unk_1004CB8FC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100183EE8()
{
  return sub_100183F14( &qword_100644A28,  (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey,  (uint64_t)&unk_1004CB8C0);
}

uint64_t sub_100183F14(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100183F54()
{
  return sub_100183F14( &qword_100644A30,  (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey,  (uint64_t)&unk_1004CB894);
}

uint64_t sub_100183F80()
{
  return sub_100183F14( &qword_100644A38,  (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey,  (uint64_t)&unk_1004CB930);
}

uint64_t sub_100183FAC()
{
  return sub_100183F14( &qword_100644A40,  (uint64_t (*)(uint64_t))type metadata accessor for SDAirDropFlags,  (uint64_t)&unk_1004CC234);
}

uint64_t sub_100183FD8()
{
  return sub_100183F14( &qword_100644A48,  (uint64_t (*)(uint64_t))type metadata accessor for SDAirDropFlags,  (uint64_t)&unk_1004CB9EC);
}

uint64_t sub_100184004()
{
  return sub_100183F14( &qword_100644A50,  (uint64_t (*)(uint64_t))type metadata accessor for SDAirDropFlags,  (uint64_t)&unk_1004CBA1C);
}

uint64_t sub_100184030()
{
  return sub_100183F14( &qword_100644A58,  (uint64_t (*)(uint64_t))type metadata accessor for SDAirDropFlags,  (uint64_t)&unk_1004CBA54);
}

uint64_t sub_10018405C()
{
  return sub_100183F14( &qword_100644A60,  (uint64_t (*)(uint64_t))type metadata accessor for WritingOptions,  (uint64_t)&unk_1004CBBF4);
}

uint64_t sub_100184088()
{
  return sub_100183F14( &qword_100644A68,  (uint64_t (*)(uint64_t))type metadata accessor for WritingOptions,  (uint64_t)&unk_1004CBBC0);
}

uint64_t sub_1001840B4()
{
  return sub_100183F14( &qword_100644A70,  (uint64_t (*)(uint64_t))type metadata accessor for WritingOptions,  (uint64_t)&unk_1004CBC20);
}

uint64_t sub_1001840E0()
{
  return sub_100183F14( &qword_100644A78,  (uint64_t (*)(uint64_t))type metadata accessor for WritingOptions,  (uint64_t)&unk_1004CBC5C);
}

uint64_t sub_10018410C()
{
  return sub_100183F14( &qword_100644A80,  (uint64_t (*)(uint64_t))type metadata accessor for Name,  (uint64_t)&unk_1004CBE58);
}

uint64_t sub_100184138()
{
  return sub_100183F14( &qword_100644A88,  (uint64_t (*)(uint64_t))type metadata accessor for Name,  (uint64_t)&unk_1004CBE2C);
}

uint64_t sub_100184164(uint64_t a1)
{
  uint64_t v2 = sub_100183F14( &qword_100644D80,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1004CCBC8);
  uint64_t v3 = sub_100183F14( &qword_100644D88,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1004CC9C4);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1001841E8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_10018422C(uint64_t a1)
{
  uint64_t v2 = sub_100183F14( &qword_100644D70,  (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType,  (uint64_t)&unk_1004CCB38);
  uint64_t v3 = sub_100183F14( &qword_100644D78,  (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType,  (uint64_t)&unk_1004CCAD8);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1001842B0(uint64_t a1)
{
  uint64_t v2 = sub_100183F14( &qword_100644D28,  (uint64_t (*)(uint64_t))type metadata accessor for LAError,  (uint64_t)&unk_1004CCDC8);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1001842F0(uint64_t a1)
{
  uint64_t v2 = sub_100183F14( &qword_100644D28,  (uint64_t (*)(uint64_t))type metadata accessor for LAError,  (uint64_t)&unk_1004CCDC8);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100184334(uint64_t a1)
{
  uint64_t v2 = sub_100183F14( &qword_100644D20,  (uint64_t (*)(uint64_t))type metadata accessor for LAError,  (uint64_t)&unk_1004CCC74);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100184374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100183F14( &qword_100644D20,  (uint64_t (*)(uint64_t))type metadata accessor for LAError,  (uint64_t)&unk_1004CCC74);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_1001843CC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  uint64_t v7 = v6;
  uint64_t v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100184408(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100184448()
{
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v0);
  uint64_t v3 = v2;
  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, v1, v3);
  Swift::Int v4 = Hasher._finalize()();
  swift_bridgeObjectRelease(v3);
  return v4;
}

uint64_t sub_1001844B8()
{
  return sub_100183F14( &qword_100644A90,  (uint64_t (*)(uint64_t))type metadata accessor for Name,  (uint64_t)&unk_1004CBEC8);
}

uint64_t sub_1001844E4()
{
  return sub_100183F14( &qword_100644A98,  (uint64_t (*)(uint64_t))type metadata accessor for RPControlFlags,  (uint64_t)&unk_1004CBFB4);
}

uint64_t sub_100184510()
{
  return sub_100183F14( &qword_100644AA0,  (uint64_t (*)(uint64_t))type metadata accessor for RPControlFlags,  (uint64_t)&unk_1004CBF84);
}

uint64_t sub_10018453C()
{
  return sub_100183F14( &qword_100644AA8,  (uint64_t (*)(uint64_t))type metadata accessor for RPControlFlags,  (uint64_t)&unk_1004CBFDC);
}

uint64_t sub_100184568()
{
  return sub_100183F14( &qword_100644AB0,  (uint64_t (*)(uint64_t))type metadata accessor for RPControlFlags,  (uint64_t)&unk_1004CC014);
}

uint64_t sub_100184594()
{
  return sub_100183F14( &qword_100644AB8,  (uint64_t (*)(uint64_t))type metadata accessor for SFAutoUnlockDeviceType,  (uint64_t)&unk_1004CC154);
}

uint64_t sub_1001845C0()
{
  return sub_100183F14( (unint64_t *)&unk_100644AC0,  (uint64_t (*)(uint64_t))type metadata accessor for SFAuthenticationError,  (uint64_t)&unk_1004CBB5C);
}

uint64_t sub_1001845EC(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_10018467C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (int *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0) {
      int v4 = 0;
    }
    uint64_t result = v4 | result;
    --v1;
  }

  while (v1);
  return result;
}

uint64_t sub_1001846B4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (unsigned __int8 *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0) {
      int v4 = 0;
    }
    uint64_t result = v4 | result;
    --v1;
  }

  while (v1);
  return result;
}

uint64_t sub_1001846EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t result = 0LL;
  int v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0LL;
    }
    result |= v5;
    --v1;
  }

  while (v1);
  return result;
}

void type metadata accessor for FileProtectionType(uint64_t a1)
{
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
}

void type metadata accessor for CFDictionary(uint64_t a1)
{
}

void type metadata accessor for SFAuthenticationType(uint64_t a1)
{
}

void type metadata accessor for Code(uint64_t a1)
{
}

void type metadata accessor for SFUnlockErrorCode(uint64_t a1)
{
}

void type metadata accessor for SFDeviceClassCode(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for SFAirDropMapsLinkType(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for RPStatusFlags(uint64_t a1)
{
}

void type metadata accessor for RPFeatureFlags(uint64_t a1)
{
}

void type metadata accessor for SecCertificate(uint64_t a1)
{
}

void type metadata accessor for CFError(uint64_t a1)
{
}

void type metadata accessor for WiFiP2PError(uint64_t a1)
{
}

uint64_t _s14descr1005DF7D1C10AskRequestV8FileInfoVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 initializeWithTake for UserProfile(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for LongHash(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for LongHash(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

__n128 initializeWithTake for SDBLEAdvertiser.Configuration.AirDrop(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_100184904(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100184924(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 24) = v3;
  return result;
}

void type metadata accessor for OperatingSystemVersion(uint64_t a1)
{
}

uint64_t sub_100184964()
{
  return sub_100183F14( &qword_100644C98,  (uint64_t (*)(uint64_t))type metadata accessor for RPFeatureFlags,  (uint64_t)&unk_1004CC508);
}

uint64_t sub_100184990()
{
  return sub_100183F14( &qword_100644CA0,  (uint64_t (*)(uint64_t))type metadata accessor for RPFeatureFlags,  (uint64_t)&unk_1004CC4D8);
}

uint64_t sub_1001849BC()
{
  return sub_100183F14( &qword_100644CA8,  (uint64_t (*)(uint64_t))type metadata accessor for RPFeatureFlags,  (uint64_t)&unk_1004CC530);
}

uint64_t sub_1001849E8()
{
  return sub_100183F14( &qword_100644CB0,  (uint64_t (*)(uint64_t))type metadata accessor for RPFeatureFlags,  (uint64_t)&unk_1004CC568);
}

uint64_t sub_100184A14()
{
  return sub_100183F14( &qword_100644CB8,  (uint64_t (*)(uint64_t))type metadata accessor for RPStatusFlags,  (uint64_t)&unk_1004CC698);
}

uint64_t sub_100184A40()
{
  return sub_100183F14( &qword_100644CC0,  (uint64_t (*)(uint64_t))type metadata accessor for RPStatusFlags,  (uint64_t)&unk_1004CC668);
}

uint64_t sub_100184A6C()
{
  return sub_100183F14( &qword_100644CC8,  (uint64_t (*)(uint64_t))type metadata accessor for RPStatusFlags,  (uint64_t)&unk_1004CC6C0);
}

uint64_t sub_100184A98()
{
  return sub_100183F14( &qword_100644CD0,  (uint64_t (*)(uint64_t))type metadata accessor for RPStatusFlags,  (uint64_t)&unk_1004CC6F8);
}

uint64_t sub_100184AC4()
{
  return sub_100183F14( &qword_100644CD8,  (uint64_t (*)(uint64_t))type metadata accessor for SFDeviceClassCode,  (uint64_t)&unk_1004CC878);
}

uint64_t sub_100184AF0()
{
  return sub_100183F14( &qword_100644CE0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1004CC988);
}

uint64_t sub_100184B1C()
{
  return sub_100183F14( &qword_100644CE8,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1004CC95C);
}

uint64_t sub_100184B48()
{
  return sub_100183F14( &qword_100644CF0,  (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType,  (uint64_t)&unk_1004CCA9C);
}

uint64_t sub_100184B74()
{
  return sub_100183F14( &qword_100644CF8,  (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType,  (uint64_t)&unk_1004CCA70);
}

uint64_t sub_100184BA0()
{
  return sub_100183F14( &qword_100644D00,  (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType,  (uint64_t)&unk_1004CCB0C);
}

uint64_t sub_100184BCC()
{
  return sub_100183F14( &qword_100644D08,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1004CC9F8);
}

uint64_t sub_100184BF8()
{
  return sub_100183F14( (unint64_t *)&qword_100644D10,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1004CCE0C);
}

uint64_t sub_100184C24()
{
  return sub_100183F14( &qword_100644D18,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_1004CC8F4);
}

uint64_t sub_100184C50()
{
  return sub_100183F14( &qword_100644D20,  (uint64_t (*)(uint64_t))type metadata accessor for LAError,  (uint64_t)&unk_1004CCC74);
}

void type metadata accessor for LAError(uint64_t a1)
{
}

uint64_t sub_100184C90()
{
  return sub_100183F14( &qword_100644D28,  (uint64_t (*)(uint64_t))type metadata accessor for LAError,  (uint64_t)&unk_1004CCDC8);
}

uint64_t sub_100184CBC()
{
  return sub_100183F14( &qword_100644D30,  (uint64_t (*)(uint64_t))type metadata accessor for LAError,  (uint64_t)&unk_1004CCD50);
}

uint64_t sub_100184CE8()
{
  return sub_100183F14( &qword_100644D38,  (uint64_t (*)(uint64_t))type metadata accessor for LAError,  (uint64_t)&unk_1004CCCE0);
}

uint64_t sub_100184D14()
{
  return sub_100183F14( &qword_100644D40,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_1004CCC38);
}

uint64_t sub_100184D40()
{
  return sub_100183F14( &qword_100644D48,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_1004CC920);
}

unint64_t sub_100184D70()
{
  unint64_t result = qword_100644D50;
  if (!qword_100644D50)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100644D50);
  }

  return result;
}

uint64_t sub_100184DB4()
{
  return sub_100183F14( &qword_100644D58,  (uint64_t (*)(uint64_t))type metadata accessor for LAError,  (uint64_t)&unk_1004CCD24);
}

uint64_t sub_100184DE0()
{
  return sub_100183F14( &qword_100644D60,  (uint64_t (*)(uint64_t))type metadata accessor for LAError,  (uint64_t)&unk_1004CCD84);
}

uint64_t sub_100184E0C()
{
  return sub_100183F14( &qword_100644D68,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1004CC808);
}

void type metadata accessor for CBAdvertiseRate(uint64_t a1)
{
}

void type metadata accessor for CBAirDropConfigData(uint64_t a1)
{
}

void type metadata accessor for CBAirDropFlags(uint64_t a1)
{
}

__n128 initializeWithTake for SDAirDropAppleIDState(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_100184E80(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100184EA0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void sub_100184EF0(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

uint64_t sub_100184F34()
{
  return sub_100183F14( &qword_100644DC0,  (uint64_t (*)(uint64_t))type metadata accessor for CBAirDropFlags,  (uint64_t)&unk_1004CCEE4);
}

uint64_t sub_100184F60()
{
  return sub_100183F14( &qword_100644DC8,  (uint64_t (*)(uint64_t))type metadata accessor for CBAirDropFlags,  (uint64_t)&unk_1004CCEB4);
}

uint64_t sub_100184F8C()
{
  return sub_100183F14( &qword_100644DD0,  (uint64_t (*)(uint64_t))type metadata accessor for CBAirDropFlags,  (uint64_t)&unk_1004CCF0C);
}

uint64_t sub_100184FB8()
{
  return sub_100183F14( &qword_100644DD8,  (uint64_t (*)(uint64_t))type metadata accessor for CBAirDropFlags,  (uint64_t)&unk_1004CCF44);
}

uint64_t sub_100184FE4()
{
  return sub_100183F14( &qword_100644DE0,  (uint64_t (*)(uint64_t))type metadata accessor for CBAirDropConfigData,  (uint64_t)&unk_1004CD074);
}

uint64_t sub_100185010()
{
  return sub_100183F14( &qword_100644DE8,  (uint64_t (*)(uint64_t))type metadata accessor for CBAirDropConfigData,  (uint64_t)&unk_1004CD044);
}

uint64_t sub_10018503C()
{
  return sub_100183F14( &qword_100644DF0,  (uint64_t (*)(uint64_t))type metadata accessor for CBAirDropConfigData,  (uint64_t)&unk_1004CD09C);
}

uint64_t sub_100185068()
{
  return sub_100183F14( &qword_100644DF8,  (uint64_t (*)(uint64_t))type metadata accessor for CBAirDropConfigData,  (uint64_t)&unk_1004CD0D4);
}

uint64_t sub_100185148()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100186DFC(v0, qword_100644FE0);
  uint64_t v1 = sub_100186DE4(v0, (uint64_t)qword_100644FE0);
  if (qword_100644028 != -1) {
    swift_once(&qword_100644028, sub_10023A59C);
  }
  uint64_t v2 = sub_100186DE4(v0, (uint64_t)qword_1006696D0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

id sub_1001851D8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id v4 = *a1;
  sub_100187058((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  *a2 = v4;
  return v4;
}

uint64_t sub_100185214(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9 = -1LL << *(_BYTE *)(a1 + 32);
  uint64_t v10 = ~v9;
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v12 = -v9;
  uint64_t v49 = a1;
  uint64_t v50 = a1 + 64;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  else {
    uint64_t v13 = -1LL;
  }
  uint64_t v51 = v10;
  uint64_t v52 = 0LL;
  uint64_t v53 = v13 & v11;
  uint64_t v54 = a2;
  uint64_t v55 = a3;
  swift_bridgeObjectRetain(a1);
  swift_retain(a3);
  sub_10018553C((uint64_t)&v47);
  uint64_t v14 = v47;
  if (!v47) {
    goto LABEL_27;
  }
  sub_100186D8C(v48, v46);
  uint64_t v15 = *(void **)a5;
  unint64_t v17 = sub_1003AD484((uint64_t)v14);
  uint64_t v18 = v15[2];
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  char v21 = v16;
  if (v15[3] >= v20)
  {
    if ((a4 & 1) != 0)
    {
      if ((v16 & 1) != 0) {
        goto LABEL_12;
      }
    }

    else
    {
      sub_1003AD8F0();
      if ((v21 & 1) != 0) {
        goto LABEL_12;
      }
    }

uint64_t sub_10018553C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    uint64_t v11 = *(void **)(*(void *)(v3 + 48) + 8 * v10);
    sub_100187058(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24 + 8);
    *(void *)&v24[0] = v11;
    id v12 = v11;
    goto LABEL_23;
  }

  int64_t v13 = v5 + 1;
  if (__OFADD__(v5, 1LL))
  {
    __break(1u);
    return result;
  }

  int64_t v14 = (unint64_t)(v6 + 64) >> 6;
  if (v13 < v14)
  {
    unint64_t v15 = *(void *)(v4 + 8 * v13);
    if (v15)
    {
LABEL_7:
      uint64_t v9 = (v15 - 1) & v15;
      unint64_t v10 = __clz(__rbit64(v15)) + (v13 << 6);
      int64_t v7 = v13;
      goto LABEL_3;
    }

    int64_t v16 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v14)
    {
      unint64_t v15 = *(void *)(v4 + 8 * v16);
      if (v15)
      {
LABEL_10:
        int64_t v13 = v16;
        goto LABEL_7;
      }

      int64_t v7 = v5 + 2;
      if (v5 + 3 < v14)
      {
        unint64_t v15 = *(void *)(v4 + 8 * (v5 + 3));
        if (v15)
        {
          int64_t v13 = v5 + 3;
          goto LABEL_7;
        }

        int64_t v16 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v14)
        {
          unint64_t v15 = *(void *)(v4 + 8 * v16);
          if (v15) {
            goto LABEL_10;
          }
          int64_t v13 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v14)
          {
            unint64_t v15 = *(void *)(v4 + 8 * v13);
            if (v15) {
              goto LABEL_7;
            }
            int64_t v7 = v14 - 1;
            int64_t v17 = v5 + 6;
            while (v14 != v17)
            {
              unint64_t v15 = *(void *)(v4 + 8 * v17++);
              if (v15)
              {
                int64_t v13 = v17 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }

  uint64_t v9 = 0LL;
  uint64_t v25 = 0LL;
  memset(v24, 0, sizeof(v24));
LABEL_23:
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  uint64_t v18 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_1001870BC((uint64_t)v24, (uint64_t)v22, &qword_100645000);
  if (*(void *)&v22[0])
  {
    v20[0] = v22[0];
    v20[1] = v22[1];
    uint64_t v21 = v23;
    v18(v20);
    return sub_100187100((uint64_t)v20, &qword_100645008);
  }

  else
  {
    *(void *)(a1 + 32) = 0LL;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }

  return result;
}

uint64_t sub_100185714@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100183098(&qword_100645010);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100183098(&qword_100645018);
  uint64_t v8 = __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v8);
  int64_t v13 = (char *)&v37 - v12;
  uint64_t v14 = *v1;
  uint64_t v15 = v1[1];
  uint64_t v16 = v1[2];
  int64_t v17 = v1[3];
  unint64_t v18 = v1[4];
  char v37 = v6;
  uint64_t v40 = v16;
  if (v18)
  {
    unint64_t v38 = v10;
    uint64_t v39 = v15;
    uint64_t v19 = v4;
    uint64_t v20 = a1;
    uint64_t v21 = (v18 - 1) & v18;
    unint64_t v22 = __clz(__rbit64(v18)) | (v17 << 6);
LABEL_3:
    uint64_t v23 = *(void *)(v14 + 48);
    uint64_t v24 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v24 - 8) + 16LL))( v13,  v23 + *(void *)(*(void *)(v24 - 8) + 72LL) * v22,  v24);
    uint64_t v25 = *(void *)(v14 + 56);
    uint64_t v26 = type metadata accessor for SFNWInterfaceType(0LL);
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v26 - 8) + 16LL))( &v13[*(int *)(v3 + 48)],  v25 + *(void *)(*(void *)(v26 - 8) + 72LL) * v22,  v26);
    uint64_t v27 = 0LL;
    a1 = v20;
    uint64_t v4 = v19;
    unint64_t v10 = v38;
    uint64_t v15 = v39;
    goto LABEL_4;
  }

  int64_t v32 = v17 + 1;
  if (__OFADD__(v17, 1LL))
  {
    __break(1u);
    return result;
  }

  int64_t v33 = (unint64_t)(v16 + 64) >> 6;
  if (v32 >= v33)
  {
    uint64_t v21 = 0LL;
    uint64_t v27 = 1LL;
    goto LABEL_4;
  }

  unint64_t v34 = *(void *)(v15 + 8 * v32);
  if (v34)
  {
LABEL_11:
    unint64_t v38 = v10;
    uint64_t v39 = v15;
    uint64_t v19 = v4;
    uint64_t v20 = a1;
    uint64_t v21 = (v34 - 1) & v34;
    unint64_t v22 = __clz(__rbit64(v34)) + (v32 << 6);
    int64_t v17 = v32;
    goto LABEL_3;
  }

  int64_t v35 = v17 + 2;
  if (v17 + 2 >= v33) {
    goto LABEL_27;
  }
  unint64_t v34 = *(void *)(v15 + 8 * v35);
  if (v34)
  {
LABEL_15:
    int64_t v32 = v35;
    goto LABEL_11;
  }

  if (v17 + 3 >= v33) {
    goto LABEL_28;
  }
  unint64_t v34 = *(void *)(v15 + 8 * (v17 + 3));
  if (v34)
  {
    int64_t v32 = v17 + 3;
    goto LABEL_11;
  }

  int64_t v35 = v17 + 4;
  if (v17 + 4 < v33)
  {
    unint64_t v34 = *(void *)(v15 + 8 * v35);
    if (v34) {
      goto LABEL_15;
    }
    int64_t v32 = v17 + 5;
    if (v17 + 5 < v33)
    {
      unint64_t v34 = *(void *)(v15 + 8 * v32);
      if (v34) {
        goto LABEL_11;
      }
      int64_t v32 = v33 - 1;
      int64_t v36 = v17 + 6;
      while (v33 != v36)
      {
        unint64_t v34 = *(void *)(v15 + 8 * v36++);
        if (v34)
        {
          int64_t v32 = v36 - 1;
          goto LABEL_11;
        }
      }

void sub_100185A68()
{
  void (*v11)(uint64_t *__return_ptr, void *);
  id v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  void v20[3];
  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    unint64_t v10 = *(void **)(*(void *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v11 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    _OWORD v20[2] = v10;
    swift_bridgeObjectRetain(v9);
    uint64_t v12 = v10;
    v11(&v19, v20);

    swift_bridgeObjectRelease(v9);
    return;
  }

  int64_t v13 = v3 + 1;
  if (__OFADD__(v3, 1LL))
  {
    __break(1u);
  }

  else
  {
    uint64_t v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      uint64_t v15 = v0[1];
      uint64_t v16 = *(void *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        uint64_t v5 = (v16 - 1) & v16;
        unint64_t v6 = __clz(__rbit64(v16)) + (v13 << 6);
        int64_t v4 = v13;
        goto LABEL_3;
      }

      int64_t v17 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        uint64_t v16 = *(void *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          int64_t v13 = v17;
          goto LABEL_7;
        }

        int64_t v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          uint64_t v16 = *(void *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            int64_t v13 = v3 + 3;
            goto LABEL_7;
          }

          int64_t v17 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            uint64_t v16 = *(void *)(v15 + 8 * v17);
            if (v16) {
              goto LABEL_10;
            }
            int64_t v13 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              uint64_t v16 = *(void *)(v15 + 8 * v13);
              if (v16) {
                goto LABEL_7;
              }
              int64_t v4 = v14 - 1;
              unint64_t v18 = v3 + 6;
              while (v14 != v18)
              {
                uint64_t v16 = *(void *)(v15 + 8 * v18++);
                if (v16)
                {
                  int64_t v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }

    v0[3] = v4;
    v0[4] = 0LL;
  }

void sub_100185BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for CFString(0LL);
  uint64_t v7 = v6;
  unint64_t v8 = sub_100186D9C();
  isa = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
  unint64_t v10 = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
  OSStatus v11 = SecItemUpdate(isa, v10);

  OSStatus v123 = v11;
  if (v11 == -25300) {
    goto LABEL_16;
  }
  if (!v11)
  {
    if (qword_100643E90 != -1) {
      swift_once(&qword_100643E90, sub_100185148);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    sub_100186DE4(v12, (uint64_t)qword_100644FE0);
    swift_bridgeObjectRetain(a1);
    uint64_t v13 = swift_bridgeObjectRetain(a2);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc(22LL, -1LL);
      os_log_t v103 = (os_log_t)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)uint64_t v16 = 138412546;
      os_log_type_t type = v15;
      Class v17 = Dictionary._bridgeToObjectiveC()().super.isa;
      Class v120 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v121, v16 + 4, v16 + 12);
      *(void *)os_log_t v103 = v17;
      swift_bridgeObjectRelease(a1);
      *(_WORD *)(v16 + 12) = 2112;
      Class v18 = Dictionary._bridgeToObjectiveC()().super.isa;
      Class v120 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v121, v16 + 14, v16 + 22);
      *((void *)v103 + 1) = v18;
      swift_bridgeObjectRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v14, type, "Updated keychain item: %@ with %@", (uint8_t *)v16, 0x16u);
      uint64_t v19 = sub_100183098(&qword_1006454E0);
      swift_arrayDestroy(v103, 2LL, v19);
      swift_slowDealloc(v103, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);

      return;
    }

    swift_bridgeObjectRelease(a2);
    uint64_t v31 = a1;
    goto LABEL_26;
  }

  if (qword_100643E90 != -1) {
    swift_once(&qword_100643E90, sub_100185148);
  }
  uint64_t v20 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v20, (uint64_t)qword_100644FE0);
  swift_bridgeObjectRetain(a1);
  uint64_t v21 = swift_bridgeObjectRetain(a2);
  unint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.error.getter(v22);
  int v24 = v23;
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v25 = swift_slowAlloc(28LL, -1LL);
    os_log_t log = (os_log_t)v8;
    v104 = v22;
    uint64_t v26 = (Class *)swift_slowAlloc(16LL, -1LL);
    *(_DWORD *)uint64_t v25 = 138412802;
    int v122 = v24;
    uint64_t v27 = v7;
    Class v28 = Dictionary._bridgeToObjectiveC()().super.isa;
    Class v120 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v121, v25 + 4, v25 + 12);
    *uint64_t v26 = v28;
    uint64_t v7 = v27;
    swift_bridgeObjectRelease(a1);
    *(_WORD *)(v25 + 12) = 2112;
    Class v29 = Dictionary._bridgeToObjectiveC()().super.isa;
    Class v120 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v121, v25 + 14, v25 + 22);
    v26[1] = v29;
    swift_bridgeObjectRelease(a2);
    *(_WORD *)(v25 + 22) = 1024;
    swift_beginAccess(&v123, v110, 0LL, 0LL);
    LODWORD(v120) = v123;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, (char *)&v120 + 4, v25 + 24, v25 + 28);
    _os_log_impl( (void *)&_mh_execute_header,  v104,  (os_log_type_t)v122,  "Failed to update keychain item: %@ with %@, error: %d, will try to delete and re-add",  (uint8_t *)v25,  0x1Cu);
    uint64_t v30 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v26, 2LL, v30);
    unint64_t v8 = (unint64_t)log;
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a1);
  }

  int64_t v32 = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
  OSStatus v33 = SecItemDelete(v32);

  swift_beginAccess(&v123, &v120, 1LL, 0LL);
  OSStatus v123 = v33;
  uint64_t v3 = v2;
  if (!v33)
  {
LABEL_16:
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a2);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
    uint64_t v117 = a1;
    sub_100185214(a2, (uint64_t)sub_1001851D8, 0LL, isUniquelyReferenced_nonNull_native, (uint64_t)&v117);
    if (v3)
    {
      swift_bridgeObjectRelease(0x8000000000000000LL);
      __break(1u);
    }

    else
    {
      uint64_t v119 = v117;
      swift_bridgeObjectRelease(0x8000000000000000LL);
      if (qword_100643E90 != -1) {
        swift_once(&qword_100643E90, sub_100185148);
      }
      uint64_t v42 = type metadata accessor for Logger(0LL);
      sub_100186DE4(v42, (uint64_t)qword_100644FE0);
      swift_bridgeObjectRetain_n(a1, 2LL);
      uint64_t v43 = swift_bridgeObjectRetain_n(a2, 2LL);
      uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
      os_log_type_t v45 = static os_log_type_t.default.getter();
      int v46 = v45;
      if (os_log_type_enabled(v44, v45))
      {
        os_log_t loga = v7;
        uint64_t v47 = swift_slowAlloc(32LL, -1LL);
        typea = (Class *)swift_slowAlloc(8LL, -1LL);
        os_log_t v105 = (os_log_t)swift_slowAlloc(64LL, -1LL);
        uint64_t v117 = (uint64_t)v105;
        *(_DWORD *)uint64_t v47 = 136315650;
        swift_beginAccess(&v119, v111, 0LL, 0LL);
        uint64_t v48 = v119;
        uint64_t v49 = swift_bridgeObjectRetain(v119);
        uint64_t v50 = Dictionary.description.getter(v49, loga, (char *)&type metadata for Any + 8, v8);
        int v122 = v46;
        unint64_t v51 = v8;
        uint64_t v52 = v50;
        v102 = v44;
        unint64_t v54 = v53;
        swift_bridgeObjectRelease(v48);
        uint64_t v115 = sub_10018CDB4(v52, v54, &v117);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, v116, v47 + 4, v47 + 12);
        swift_bridgeObjectRelease(v54);
        *(_WORD *)(v47 + 12) = 2112;
        Class v55 = Dictionary._bridgeToObjectiveC()().super.isa;
        uint64_t v115 = (uint64_t)v55;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, v116, v47 + 14, v47 + 22);
        Class *typea = v55;
        swift_bridgeObjectRelease_n(a1, 2LL);
        *(_WORD *)(v47 + 22) = 2080;
        uint64_t v56 = swift_bridgeObjectRetain(a2);
        uint64_t v57 = Dictionary.description.getter(v56, loga, (char *)&type metadata for Any + 8, v51);
        unint64_t v59 = v58;
        swift_bridgeObjectRelease(a2);
        uint64_t v115 = sub_10018CDB4(v57, v59, &v117);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, v116, v47 + 24, v47 + 32);
        swift_bridgeObjectRelease_n(a2, 2LL);
        swift_bridgeObjectRelease(v59);
        _os_log_impl( (void *)&_mh_execute_header,  v102,  (os_log_type_t)v122,  "Adding newItem=%s query=%@ update=%s",  (uint8_t *)v47,  0x20u);
        uint64_t v60 = sub_100183098(&qword_1006454E0);
        swift_arrayDestroy(typea, 1LL, v60);
        swift_slowDealloc(typea, -1LL, -1LL);
        swift_arrayDestroy(v105, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v105, -1LL, -1LL);
        swift_slowDealloc(v47, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(a2, 2LL);
        swift_bridgeObjectRelease_n(a1, 2LL);
      }

      swift_beginAccess(&v119, &v117, 0LL, 0LL);
      uint64_t v61 = v119;
      swift_bridgeObjectRetain(v119);
      v62 = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v61);
      OSStatus v63 = SecItemAdd(v62, 0LL);

      uint64_t v64 = swift_beginAccess(&v123, &v115, 1LL, 0LL);
      OSStatus v123 = v63;
      uint64_t v65 = Logger.logObject.getter(v64);
      v66 = (os_log_s *)v65;
      if (v63)
      {
        os_log_type_t v67 = static os_log_type_t.error.getter(v65);
        if (os_log_type_enabled(v66, v67))
        {
          uint64_t v68 = swift_slowAlloc(18LL, -1LL);
          v69 = (Class *)swift_slowAlloc(8LL, -1LL);
          *(_DWORD *)uint64_t v68 = 138412546;
          uint64_t v70 = v119;
          swift_bridgeObjectRetain(v119);
          Class v71 = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v70);
          Class v113 = v71;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114, v68 + 4, v68 + 12);
          Class *v69 = v71;
          *(_WORD *)(v68 + 12) = 1024;
          LODWORD(v113) = v63;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, (char *)&v113 + 4, v68 + 14, v68 + 18);
          _os_log_impl( (void *)&_mh_execute_header,  v66,  v67,  "Failed to add keychain item: %@, error:%d",  (uint8_t *)v68,  0x12u);
          uint64_t v72 = sub_100183098(&qword_1006454E0);
          swift_arrayDestroy(v69, 1LL, v72);
          swift_slowDealloc(v69, -1LL, -1LL);
          swift_slowDealloc(v68, -1LL, -1LL);
        }

        Class v113 = 0LL;
        unint64_t v114 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(41LL);
        v73._object = (void *)0x80000001005036B0LL;
        v73._countAndFlagsBits = 0xD00000000000001DLL;
        String.append(_:)(v73);
        uint64_t v74 = v119;
        swift_bridgeObjectRetain(v119);
        Class v75 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v74);
        Class v112 = v75;
        type metadata accessor for CFDictionary(0LL);
        _print_unlocked<A, B>(_:_:)( &v112,  &v113,  v76,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);

        v77._countAndFlagsBits = 0x3A726F727265202CLL;
        v77._object = (void *)0xE800000000000000LL;
        String.append(_:)(v77);
        LODWORD(v112) = v123;
        v78._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
        object = v78._object;
        String.append(_:)(v78);
        swift_bridgeObjectRelease(object);
        Class v80 = v113;
        unint64_t v81 = v114;
        unint64_t v82 = sub_100187014();
        uint64_t v83 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v82, 0LL, 0LL);
        *(_DWORD *)uint64_t v84 = 10;
        *(void *)(v84 + _Block_object_dispose(va, 8) = v80;
        *(void *)(v84 + 16) = v81;
        swift_willThrow(v83);
        uint64_t v31 = v119;
LABEL_26:
        swift_bridgeObjectRelease(v31);
        return;
      }

      os_log_type_t v85 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v66, v85))
      {
        v86 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        v87 = (Class *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)v86 = 138412290;
        uint64_t v88 = v119;
        swift_bridgeObjectRetain(v119);
        Class v89 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v88);
        Class v113 = v89;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114, v86 + 4, v86 + 12);
        Class *v87 = v89;
        _os_log_impl((void *)&_mh_execute_header, v66, v85, "Added keychain item: %@", v86, 0xCu);
        uint64_t v90 = sub_100183098(&qword_1006454E0);
        swift_arrayDestroy(v87, 1LL, v90);
        swift_slowDealloc(v87, -1LL, -1LL);
        swift_slowDealloc(v86, -1LL, -1LL);
      }

      swift_bridgeObjectRelease(v119);
    }
  }

  else
  {
    uint64_t v34 = swift_bridgeObjectRetain(a1);
    int64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v36 = static os_log_type_t.error.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = swift_slowAlloc(18LL, -1LL);
      unint64_t v38 = (Class *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v37 = 138412546;
      Class v39 = Dictionary._bridgeToObjectiveC()().super.isa;
      uint64_t v117 = (uint64_t)v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118, v37 + 4, v37 + 12);
      *unint64_t v38 = v39;
      swift_bridgeObjectRelease(a1);
      *(_WORD *)(v37 + 12) = 1024;
      LODWORD(v117) = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, (char *)&v117 + 4, v37 + 14, v37 + 18);
      _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "Failed to delete keychain item: %@, error: %d",  (uint8_t *)v37,  0x12u);
      uint64_t v40 = sub_100183098(&qword_1006454E0);
      swift_arrayDestroy(v38, 1LL, v40);
      swift_slowDealloc(v38, -1LL, -1LL);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease(a1);
    }

    uint64_t v117 = 0LL;
    unint64_t v118 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(44LL);
    v91._countAndFlagsBits = 0xD000000000000020LL;
    v91._object = (void *)0x8000000100503680LL;
    String.append(_:)(v91);
    Class v92 = Dictionary._bridgeToObjectiveC()().super.isa;
    uint64_t v115 = (uint64_t)v92;
    type metadata accessor for CFDictionary(0LL);
    _print_unlocked<A, B>(_:_:)( &v115,  &v117,  v93,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);

    v94._countAndFlagsBits = 0x3A726F727265202CLL;
    v94._object = (void *)0xE800000000000000LL;
    String.append(_:)(v94);
    LODWORD(v115) = v123;
    v95._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
    v96 = v95._object;
    String.append(_:)(v95);
    swift_bridgeObjectRelease(v96);
    uint64_t v97 = v117;
    unint64_t v98 = v118;
    unint64_t v99 = sub_100187014();
    uint64_t v100 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v99, 0LL, 0LL);
    *(_DWORD *)uint64_t v101 = 10;
    *(void *)(v101 + _Block_object_dispose(va, 8) = v97;
    *(void *)(v101 + 16) = v98;
    swift_willThrow(v100);
  }

uint64_t sub_100186A64(CFTypeRef a1)
{
  Class v29 = &type metadata for Bool;
  LOBYTE(v2_Block_object_dispose(va, 8) = 1;
  sub_100186D8C(&v28, result);
  swift_bridgeObjectRetain(a1);
  uint64_t v2 = (id)kSecReturnData;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
  CFTypeRef v26 = a1;
  sub_1003B2470(result, v2, isUniquelyReferenced_nonNull_native);
  CFTypeRef v25 = a1;

  swift_bridgeObjectRelease(0x8000000000000000LL);
  result[0] = 0LL;
  type metadata accessor for CFString(0LL);
  uint64_t v5 = v4;
  unint64_t v6 = sub_100186D9C();
  swift_bridgeObjectRetain(v25);
  isa = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v25);
  OSStatus v8 = SecItemCopyMatching(isa, result);

  if (v8 == -25300)
  {
    if (qword_100643E90 != -1) {
      swift_once(&qword_100643E90, sub_100185148);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    uint64_t v10 = sub_100186DE4(v9, (uint64_t)qword_100644FE0);
    OSStatus v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      CFTypeRef v14 = (CFTypeRef)swift_slowAlloc(32LL, -1LL);
      CFTypeRef v26 = v14;
      *(_DWORD *)uint64_t v13 = 136315138;
      swift_beginAccess(&v25, &v28, 0LL, 0LL);
      CFTypeRef v15 = v25;
      uint64_t v16 = swift_bridgeObjectRetain(v25);
      uint64_t v17 = Dictionary.description.getter(v16, v5, (char *)&type metadata for Any + 8, v6);
      unint64_t v19 = v18;
      swift_bridgeObjectRelease(v15);
      uint64_t v24 = sub_10018CDB4(v17, v19, (uint64_t *)&v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v13 + 4, v13 + 12);
      swift_bridgeObjectRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Could not find keychain item, query: %s", v13, 0xCu);
      swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    uint64_t v20 = 0LL;
    CFTypeRef v21 = result[0];
  }

  else
  {
    CFTypeRef v21 = result[0];
    if (result[0])
    {
      CFTypeRef v26 = result[0];
      swift_unknownObjectRetain(result[0]);
      if (swift_dynamicCast( &v28,  &v26,  (char *)&type metadata for Swift.AnyObject + 8,  &type metadata for Data,  6LL)) {
        uint64_t v20 = v28;
      }
      else {
        uint64_t v20 = 0LL;
      }
      CFTypeRef v21 = result[0];
    }

    else
    {
      uint64_t v20 = 0LL;
    }
  }

  swift_unknownObjectRelease(v21);
  swift_bridgeObjectRelease(v25);
  return v20;
}

_OWORD *sub_100186D8C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_100186D9C()
{
  unint64_t result = qword_100644D10;
  if (!qword_100644D10)
  {
    type metadata accessor for CFString(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1004CCE0C, v1);
    atomic_store(result, (unint64_t *)&qword_100644D10);
  }

  return result;
}

uint64_t sub_100186DE4(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t *sub_100186DFC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

unint64_t sub_100186E3C(const __CFString *a1, unint64_t a2)
{
  uint64_t v4 = sub_100183098(&qword_100644FF8);
  uint64_t inited = swift_initStackObject(v4, v18);
  *(_OWORD *)(inited + 16) = xmmword_1004CD1E0;
  *(void *)(inited + 32) = kSecClass;
  CFStringRef v16 = kSecClassGenericPassword;
  type metadata accessor for CFString(0LL);
  uint64_t v7 = v6;
  unint64_t v8 = sub_100186D9C();
  uint64_t v9 = (id)kSecClass;
  uint64_t v10 = (id)kSecClassGenericPassword;
  AnyHashable.init<A>(_:)((void *)(inited + 40), &v16, v7, v8);
  *(void *)(inited + 80) = kSecAttrAccessGroup;
  CFStringRef v16 = (CFStringRef)0xD00000000000001BLL;
  unint64_t v17 = 0x8000000100503630LL;
  OSStatus v11 = (id)kSecAttrAccessGroup;
  AnyHashable.init<A>(_:)((void *)(inited + 88), &v16, &type metadata for String, &protocol witness table for String);
  *(void *)(inited + 12_Block_object_dispose(va, 8) = kSecAttrAccount;
  CFStringRef v16 = (CFStringRef)0xD000000000000029LL;
  unint64_t v17 = 0x8000000100503650LL;
  os_log_type_t v12 = (id)kSecAttrAccount;
  AnyHashable.init<A>(_:)((void *)(inited + 136), &v16, &type metadata for String, &protocol witness table for String);
  *(void *)(inited + 176) = kSecAttrService;
  CFStringRef v16 = a1;
  unint64_t v17 = a2;
  uint64_t v13 = (id)kSecAttrService;
  swift_bridgeObjectRetain(a2);
  AnyHashable.init<A>(_:)((void *)(inited + 184), &v16, &type metadata for String, &protocol witness table for String);
  *(void *)(inited + 224) = kSecAttrIsInvisible;
  LOBYTE(v16) = 1;
  CFTypeRef v14 = (id)kSecAttrIsInvisible;
  AnyHashable.init<A>(_:)((void *)(inited + 232), &v16, &type metadata for Bool, &protocol witness table for Bool);
  return sub_1003912B8(inited);
}

unint64_t sub_100187014()
{
  unint64_t result = qword_100650040;
  if (!qword_100650040)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D7128, &type metadata for SFAuthenticationErrorMessage);
    atomic_store(result, (unint64_t *)&qword_100650040);
  }

  return result;
}

uint64_t sub_100187058(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100187094(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10018709C(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1001870BC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100183098(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_100187100(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100183098(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_10018713C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_100183098((uint64_t *)&unk_1006563F0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void **)(v3 + 16);
  type metadata accessor for SDAirDropContentHandlerUtilities();
  uint64_t v11 = type metadata accessor for SFAirDropReceive.ItemDestination(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v9, a2, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  id v13 = v10;
  sub_10026664C(a1, v10, 1, a3);

  return sub_100187334((uint64_t)v9);
}

uint64_t sub_100187230()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t type metadata accessor for SDAirDropContentHandleriBooksItems()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary34SDAirDropContentHandleriBooksItems);
}

uint64_t sub_100187274@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SDAirDropContentHandleriBooksItems();
  uint64_t result = swift_allocObject(v2, 24LL, 7LL);
  *(void *)(result + 16) = 0LL;
  *a1 = result;
  return result;
}

uint64_t sub_1001872A8()
{
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return sub_100187324(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 0LL);
}

uint64_t sub_100187304@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10018713C(a1, a2, a3);
}

uint64_t sub_100187324(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_100187334(uint64_t a1)
{
  uint64_t v2 = sub_100183098((uint64_t *)&unk_1006563F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100187374()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100186DFC(v0, qword_100645110);
  sub_100186DE4(v0, (uint64_t)qword_100645110);
  return static Logger.airDropNWClient.getter();
}

uint64_t SFAirDropReceive.AskRequest.init(recordID:initialInfo:)@<X0>( uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  id v230 = a3;
  uint64_t v209 = a4;
  v205 = (os_log_s *)type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription(0LL);
  v204 = (void (**)(uint64_t, os_log_s *, const void *))*((void *)v205 - 1);
  __chkstk_darwin(v205);
  v203 = (os_log_s *)((char *)&v182 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v202 = type metadata accessor for String.Encoding(0LL);
  v201 = *(void (***)(char *, uint64_t))(v202 - 8);
  __chkstk_darwin(v202);
  v200 = (char *)&v182 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100183098(&qword_100645128);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v207 = (uint64_t)&v182 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v210 = (uint64_t)&v182 - v11;
  uint64_t v211 = type metadata accessor for SFAirDrop.TransferType(0LL);
  uint64_t v213 = *(void *)(v211 - 8);
  uint64_t v12 = __chkstk_darwin(v211);
  v208 = (char *)&v182 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  v214 = (char *)&v182 - v14;
  uint64_t v216 = type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo(0LL);
  v215 = *(void (***)(unint64_t, const void *, uint64_t))(v216 - 8);
  __chkstk_darwin(v216);
  v217 = (os_log_s *)((char *)&v182 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v16 = sub_100183098((uint64_t *)&unk_100645130);
  uint64_t v17 = __chkstk_darwin(v16);
  v221 = (char *)&v182 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  v212 = (char *)&v182 - v19;
  uint64_t v20 = type metadata accessor for URL(0LL);
  v224 = *(char **)(v20 - 8);
  uint64_t v225 = v20;
  uint64_t v21 = __chkstk_darwin(v20);
  v220 = (char *)&v182 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v21);
  v222 = (char *)&v182 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v218 = (char *)&v182 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  v223 = (os_log_s *)((char *)&v182 - v28);
  __chkstk_darwin(v27);
  os_log_t v219 = (os_log_t)((char *)&v182 - v29);
  uint64_t v226 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v228 = *(void *)(v226 - 8);
  uint64_t v30 = __chkstk_darwin(v226);
  v206 = (char *)&v182 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v30);
  v227 = (char *)&v182 - v32;
  uint64_t v33 = sub_100183098(&qword_10064DA60);
  __chkstk_darwin(v33);
  int64_t v35 = (char *)&v182 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v36 = type metadata accessor for UUID(0LL);
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v40 = (uint64_t)&v182 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v38);
  uint64_t v42 = (uint64_t)&v182 - v41;
  UUID.init(uuidString:)(a1, a2);
  v236 = 0LL;
  unint64_t v237 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(21LL);
  swift_bridgeObjectRelease(v237);
  v236 = (os_log_s *)0xD000000000000013LL;
  unint64_t v237 = 0x8000000100503720LL;
  v43._countAndFlagsBits = a1;
  v43._object = a2;
  String.append(_:)(v43);
  swift_bridgeObjectRelease(a2);
  uint64_t v44 = v237;
  os_log_type_t v45 = (char *)v229;
  Optional.tryUnwrap(_:file:line:)(v236, v237, 0xD000000000000070LL, 0x8000000100503740LL, 21LL, v33);
  countAndFlagsBits = v45;
  if (v45)
  {

    swift_bridgeObjectRelease(v44);
    return sub_100187100((uint64_t)v35, &qword_10064DA60);
  }

  uint64_t v229 = (uint64_t)"UUID from recordID ";
  sub_100187100((uint64_t)v35, &qword_10064DA60);
  swift_bridgeObjectRelease(v44);
  (*(void (**)(uint64_t, uint64_t, unint64_t))(v37 + 16))(v40, v42, v36);
  SFAirDrop.TransferIdentifier.init(_:)(v40);
  if (!kSFOperationVerifiableIdentityKey)
  {
    __break(1u);
    goto LABEL_128;
  }

  uint64_t v40 = v36;
  int64_t v35 = (char *)v42;
  uint64_t v44 = v229;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)( &v236,  kSFOperationVerifiableIdentityKey,  &type metadata for Bool,  0xD000000000000070LL,  v229 | 0x8000000000000000LL,  25LL,  &type metadata for Bool);
  unint64_t v36 = v226;
  uint64_t v42 = v228;
  uint64_t v199 = v40;
  uint64_t v48 = (void *)kSFOperationSenderIsMeKey;
  if (!kSFOperationSenderIsMeKey)
  {
LABEL_132:
    __break(1u);
    goto LABEL_133;
  }

  uint64_t v40 = v236;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)( &v236,  kSFOperationSenderIsMeKey,  &type metadata for Bool,  0xD000000000000070LL,  v44 | 0x8000000000000000LL,  26LL,  &type metadata for Bool);
  int v196 = v40;
  int v195 = v236;
  uint64_t v49 = sub_100183168(0LL, (unint64_t *)&qword_100645140, &OBJC_CLASS___NSUserDefaults_ptr);
  uint64_t v50 = (void *)static NSUserDefaults.airdrop.getter(v49);
  uint64_t v44 = SFAirDropUserDefaults.alwaysAutoAccept.getter();

  if ((v44 & 1) != 0)
  {
    int v51 = 1;
  }

  else
  {
    uint64_t v52 = (void *)kSFOperationAutoAcceptKey;
    if (!kSFOperationAutoAcceptKey)
    {
      __break(1u);
      goto LABEL_151;
    }

    NSDictionary.sf_optionalValue<A>(_:as:file:line:)( &v236,  kSFOperationAutoAcceptKey,  &type metadata for Bool,  0xD000000000000070LL,  v229 | 0x8000000000000000LL,  28LL,  &type metadata for Bool);
    int v51 = v236 & 1;
  }

  unsigned int v194 = v51;
  uint64_t v44 = kSFOperationItemsKey;
  if (!kSFOperationItemsKey)
  {
    __break(1u);
    goto LABEL_147;
  }

  uint64_t v53 = sub_100183168(0LL, &qword_100646540, &OBJC_CLASS___NSArray_ptr);
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)( &v236,  v44,  v53,  0xD000000000000070LL,  v229 | 0x8000000000000000LL,  31LL,  v53);
  unint64_t v192 = v53;
  uint64_t v54 = (uint64_t)v236;
  v193 = v35;
  uint64_t v198 = v37;
  if (v236)
  {
    uint64_t v55 = sub_100183168(0LL, &qword_100645168, &OBJC_CLASS___NSString_ptr);
    uint64_t v197 = NSArray.tryCastElements<A>(as:)(v55, v55);
    v222 = (char *)v54;
    v191 = 0LL;
    if ((unint64_t)v197 >> 62)
    {
      if (v197 < 0) {
        unint64_t v126 = v197;
      }
      else {
        unint64_t v126 = v197 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v197);
      uint64_t v73 = _CocoaArrayWrapper.endIndex.getter(v126);
    }

    else
    {
      uint64_t v73 = *(void *)((v197 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v197);
    }

    uint64_t v54 = (uint64_t)v212;
    if (v73)
    {
      if (v73 < 1)
      {
        __break(1u);
        goto LABEL_92;
      }

      if ((v197 & 0xC000000000000001LL) != 0)
      {
        uint64_t v74 = 0LL;
        Class v75 = (char *)&_swiftEmptyArrayStorage;
        do
        {
          uint64_t v76 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v74, v197);
          Swift::String v77 = String.init(_:)(v76);
          countAndFlagsBits = (char *)v77._countAndFlagsBits;
          if ((swift_isUniquelyReferenced_nonNull_native(v75) & 1) == 0) {
            Class v75 = sub_10018BC54(0LL, *((void *)v75 + 2) + 1LL, 1, v75);
          }
          Swift::String v78 = v75;
          unint64_t v79 = *((void *)v75 + 2);
          Class v80 = v78;
          unint64_t v81 = *((void *)v78 + 3);
          if (v79 >= v81 >> 1) {
            Class v80 = sub_10018BC54((char *)(v81 > 1), v79 + 1, 1, v80);
          }
          ++v74;
          *((void *)v80 + 2) = v79 + 1;
          unint64_t v82 = (Swift::String *)&v80[16 * v79];
          Class v75 = v80;
          v82[2] = v77;
        }

        while (v73 != v74);
      }

      else
      {
        uint64_t v119 = (id *)(v197 + 32);
        Class v75 = (char *)&_swiftEmptyArrayStorage;
        do
        {
          Swift::String v120 = String.init(_:)(*v119);
          countAndFlagsBits = (char *)v120._object;
          if ((swift_isUniquelyReferenced_nonNull_native(v75) & 1) == 0) {
            Class v75 = sub_10018BC54(0LL, *((void *)v75 + 2) + 1LL, 1, v75);
          }
          v121 = v75;
          unint64_t v122 = *((void *)v75 + 2);
          OSStatus v123 = v121;
          unint64_t v124 = *((void *)v121 + 3);
          if (v122 >= v124 >> 1) {
            OSStatus v123 = sub_10018BC54((char *)(v124 > 1), v122 + 1, 1, v123);
          }
          *((void *)v123 + 2) = v122 + 1;
          v125 = (Swift::String *)&v123[16 * v122];
          Class v75 = v123;
          v125[2] = v120;
          ++v119;
          --v73;
        }

        while (v73);
      }
    }

    else
    {
      Class v75 = (char *)&_swiftEmptyArrayStorage;
    }

    swift_bridgeObjectRelease_n(v197, 2LL);
    uint64_t v98 = *((void *)v75 + 2);
    if (v98)
    {
      swift_bridgeObjectRetain(v75);
      unint64_t v99 = v75;
      uint64_t v100 = v75 + 40;
      uint64_t v101 = &_swiftEmptyArrayStorage;
      uint64_t v37 = v198;
      do
      {
        uint64_t v102 = *(v100 - 1);
        uint64_t v103 = *v100;
        swift_bridgeObjectRetain(*v100);
        URL.init(string:)(v102, v103);
        swift_bridgeObjectRelease(v103);
        countAndFlagsBits = v224;
        uint64_t v104 = v225;
        if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v224 + 6))(v54, 1LL, v225) == 1)
        {
          sub_100187100(v54, (uint64_t *)&unk_100645130);
        }

        else
        {
          os_log_t v105 = (void (*)(os_log_t, uint64_t, uint64_t))*((void *)countAndFlagsBits + 4);
          os_log_t v106 = v219;
          v105(v219, v54, v104);
          v105(v223, (uint64_t)v106, v104);
          if ((swift_isUniquelyReferenced_nonNull_native(v101) & 1) == 0) {
            uint64_t v101 = (void *)sub_10018BEA8( 0,  v101[2] + 1LL,  1,  (unint64_t)v101,  &qword_100645248,  (uint64_t (*)(void))&type metadata accessor for URL);
          }
          unint64_t v108 = v101[2];
          unint64_t v107 = v101[3];
          countAndFlagsBits = (char *)(v108 + 1);
          if (v108 >= v107 >> 1) {
            uint64_t v101 = (void *)sub_10018BEA8( v107 > 1,  v108 + 1,  1,  (unint64_t)v101,  &qword_100645248,  (uint64_t (*)(void))&type metadata accessor for URL);
          }
          v101[2] = countAndFlagsBits;
          v105( (os_log_t)((char *)v101 + ((v224[80] + 32LL) & ~(unint64_t)v224[80])
                     + *((void *)v224 + 9) * v108),
            (uint64_t)v223,
            v225);
          uint64_t v37 = v198;
        }

        v100 += 2;
        --v98;
      }

      while (v98);
      Class v75 = v99;
      swift_bridgeObjectRelease(v99);
    }

    else
    {
      uint64_t v101 = &_swiftEmptyArrayStorage;
      uint64_t v37 = v198;
    }

    swift_bridgeObjectRelease(v75);
    uint64_t v44 = sub_10018FA24((uint64_t)v101);

    swift_bridgeObjectRelease(v101);
    int64_t v35 = v193;
    unint64_t v36 = v226;
  }

  else
  {
    v191 = 0LL;
    uint64_t v44 = (uint64_t)&_swiftEmptySetSingleton;
  }

  uint64_t v40 = (uint64_t)v230;
LABEL_59:
  if (!kSFOperationFilesKey)
  {
    __break(1u);
    goto LABEL_155;
  }

  v109 = v191;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)( &v236,  kSFOperationFilesKey,  v192,  0xD000000000000070LL,  v229 | 0x8000000000000000LL,  46LL,  v192);
  countAndFlagsBits = v109;
  uint64_t v54 = (uint64_t)v227;
  if (v109)
  {
    swift_bridgeObjectRelease(v44);

    (*(void (**)(uint64_t, unint64_t))(v42 + 8))(v54, v36);
    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v35, v199);
  }

  v110 = (char *)v236;
  if (!v236)
  {
    uint64_t v225 = v44;
    Class v113 = (char *)&_swiftEmptySetSingleton;
    uint64_t v37 = v199;
    goto LABEL_103;
  }

  uint64_t v111 = sub_100183168(0LL, &qword_100645160, &OBJC_CLASS___NSDictionary_ptr);
  unint64_t v112 = NSArray.tryCastElements<A>(as:)(v111, v111);
  uint64_t v42 = v112;
  v224 = v110;
  uint64_t v225 = v44;
  if (v112 >> 62)
  {
    while (1)
    {
      if (v42 < 0) {
        uint64_t v128 = v42;
      }
      else {
        uint64_t v128 = v42 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v42);
      uint64_t v40 = _CocoaArrayWrapper.endIndex.getter(v128);
      swift_bridgeObjectRelease(v42);
      uint64_t v44 = 0LL;
      if (!v40) {
        goto LABEL_101;
      }
LABEL_67:
      v236 = (os_log_s *)&_swiftEmptyArrayStorage;
      uint64_t v48 = (void *)sub_10018D744(0, v40 & ~(v40 >> 63), 0);
      if (v40 < 0) {
        break;
      }
      unint64_t v114 = 0LL;
      v110 = (char *)v236;
      unint64_t v36 = v42 & 0xC000000000000001LL;
      while ((char *)v40 != v114)
      {
        if (v36) {
          id v115 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v114, v42);
        }
        else {
          id v115 = *(id *)(v42 + 8LL * (void)v114 + 32);
        }
        id v116 = v115;
        sub_100189EAC(v116, (uint64_t)v217);

        v236 = (os_log_s *)v110;
        unint64_t v118 = *((void *)v110 + 2);
        unint64_t v117 = *((void *)v110 + 3);
        if (v118 >= v117 >> 1)
        {
          sub_10018D744(v117 > 1, v118 + 1, 1);
          v110 = (char *)v236;
        }

        ++v114;
        *((void *)v110 + 2) = v118 + 1;
        v215[4]( (unint64_t)&v110[((*((unsigned __int8 *)v215 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v215 + 80))
                                + (void)v215[9] * v118],
          v217,
          v216);
        int64_t v35 = v193;
        if ((char *)v40 == v114)
        {
          swift_bridgeObjectRelease(v42);
          uint64_t v37 = v199;
          unint64_t v36 = v226;
          goto LABEL_102;
        }
      }

      __break(1u);
      swift_once(&qword_100643E98, sub_100187374);
      uint64_t v56 = type metadata accessor for Logger(0LL);
      sub_100186DE4(v56, (uint64_t)qword_100645110);
      id v57 = (id)v54;
      swift_errorRetain(v114);
      uint64_t v44 = (uint64_t)v57;
      uint64_t v58 = swift_errorRetain(v114);
      unint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
      os_log_type_t v60 = static os_log_type_t.fault.getter();
      BOOL v61 = os_log_type_enabled(v59, v60);
      v212 = v114;
      if (v61)
      {
        uint64_t v62 = swift_slowAlloc(22LL, -1LL);
        OSStatus v63 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        v223 = (os_log_s *)swift_slowAlloc(32LL, -1LL);
        v236 = v223;
        *(_DWORD *)uint64_t v62 = 136315394;
        swift_getErrorValue(v114, v232, v231);
        os_log_t v219 = v59;
        uint64_t v64 = Error.localizedDescription.getter(v231[1], v231[2]);
        unint64_t v66 = v65;
        uint64_t v234 = sub_10018CDB4(v64, v65, (uint64_t *)&v236);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v62 + 4, v62 + 12);
        swift_bridgeObjectRelease(v66);
        swift_errorRelease(v114);
        swift_errorRelease(v114);
        *(_WORD *)(v62 + 12) = 2112;
        uint64_t v234 = v44;
        id v67 = (id)v44;
        int64_t v35 = v193;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v62 + 14, v62 + 22);
        uint64_t v68 = v63;
        *OSStatus v63 = v54;

        uint64_t v42 = v228;
        os_log_t v69 = v219;
        _os_log_impl( (void *)&_mh_execute_header,  v219,  v60,  "Failed to get items as strings, trying again as URLs {error: %s, rawURLItems: %@}",  (uint8_t *)v62,  0x16u);
        uint64_t v70 = sub_100183098(&qword_1006454E0);
        swift_arrayDestroy(v68, 1LL, v70);
        swift_slowDealloc(v68, -1LL, -1LL);
        Class v71 = v223;
        swift_arrayDestroy(v223, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v71, -1LL, -1LL);
        uint64_t v72 = v62;
        unint64_t v36 = v226;
        swift_slowDealloc(v72, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease(v114);
        swift_errorRelease(v114);
      }

      uint64_t v37 = v198;
      uint64_t v40 = (uint64_t)v230;
      uint64_t v83 = sub_100183168(0LL, (unint64_t *)&unk_100645170, &OBJC_CLASS___NSURL_ptr);
      unint64_t v84 = NSArray.tryCastElements<A>(as:)(v83, v83);
      uint64_t v54 = v84;
      v191 = 0LL;
      if (!(v84 >> 62))
      {
        uint64_t v85 = *(void *)((v84 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        swift_bridgeObjectRetain(v84);
        goto LABEL_30;
      }

LABEL_92:
      if (v54 < 0) {
        uint64_t v127 = v54;
      }
      else {
        uint64_t v127 = v54 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v54);
      uint64_t v85 = _CocoaArrayWrapper.endIndex.getter(v127);
LABEL_30:
      v86 = v222;
      v223 = (os_log_s *)v54;
      if (!v85)
      {
        uint64_t v197 = v44;
        countAndFlagsBits = (char *)&_swiftEmptyArrayStorage;
LABEL_78:
        swift_bridgeObjectRelease_n(v223, 2LL);
        uint64_t v44 = sub_10018FA24((uint64_t)countAndFlagsBits);

        swift_bridgeObjectRelease(countAndFlagsBits);
        swift_errorRelease(v212);
        int64_t v35 = v193;
        unint64_t v36 = v226;
        goto LABEL_59;
      }

      if (v85 >= 1)
      {
        uint64_t v197 = v44;
        uint64_t v87 = 0LL;
        os_log_t v219 = (os_log_t)(v54 & 0xC000000000000001LL);
        countAndFlagsBits = (char *)&_swiftEmptyArrayStorage;
        uint64_t v88 = v224;
        do
        {
          uint64_t v54 = v85;
          if (v219) {
            id v89 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v87, v223);
          }
          else {
            id v89 = *((id *)v223 + v87 + 4);
          }
          uint64_t v90 = v89;
          static URL._unconditionallyBridgeFromObjectiveC(_:)();
          Swift::String v91 = (void (*)(char *, char *, uint64_t))*((void *)v88 + 4);
          uint64_t v92 = (uint64_t)v221;
          uint64_t v93 = v86;
          uint64_t v94 = v225;
          v91(v221, v93, v225);
          (*((void (**)(uint64_t, void, uint64_t, void))v88 + 7))(v92, 0LL, 1LL, v94);

          if ((*((unsigned int (**)(uint64_t, uint64_t, void))v88 + 6))(v92, 1LL, v94) == 1)
          {
            sub_100187100(v92, (uint64_t *)&unk_100645130);
            uint64_t v40 = (uint64_t)v230;
            v86 = v222;
          }

          else
          {
            Swift::String v95 = v218;
            v91(v218, (char *)v92, v94);
            v91(v220, v95, v94);
            if ((swift_isUniquelyReferenced_nonNull_native(countAndFlagsBits) & 1) == 0) {
              countAndFlagsBits = (char *)sub_10018BEA8( 0,  *((void *)countAndFlagsBits + 2) + 1LL,  1,  (unint64_t)countAndFlagsBits,  &qword_100645248,  (uint64_t (*)(void))&type metadata accessor for URL);
            }
            v86 = v222;
            unint64_t v97 = *((void *)countAndFlagsBits + 2);
            unint64_t v96 = *((void *)countAndFlagsBits + 3);
            if (v97 >= v96 >> 1) {
              countAndFlagsBits = (char *)sub_10018BEA8( v96 > 1,  v97 + 1,  1,  (unint64_t)countAndFlagsBits,  &qword_100645248,  (uint64_t (*)(void))&type metadata accessor for URL);
            }
            *((void *)countAndFlagsBits + 2) = v97 + 1;
            v91( &countAndFlagsBits[((v224[80] + 32LL) & ~(unint64_t)v224[80])
                               + *((void *)v224 + 9) * v97],
              v220,
              v225);
            uint64_t v37 = v198;
            uint64_t v40 = (uint64_t)v230;
          }

          ++v87;
          uint64_t v42 = v228;
        }

        while (v85 != v87);
        goto LABEL_78;
      }

      __break(1u);
    }

    __break(1u);
    goto LABEL_132;
  }

  uint64_t v40 = *(void *)((v112 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t v44 = 0LL;
  if (v40) {
    goto LABEL_67;
  }
LABEL_101:
  swift_bridgeObjectRelease(v42);
  v110 = (char *)&_swiftEmptyArrayStorage;
  uint64_t v37 = v199;
LABEL_102:
  Class v113 = (char *)sub_10018FBF4((uint64_t)v110);

  swift_bridgeObjectRelease(v110);
  uint64_t v42 = v228;
  countAndFlagsBits = 0LL;
LABEL_103:
  uint64_t v129 = *((void *)v113 + 2);
  uint64_t v44 = v211;
  v224 = v113;
  if (v129 || !*(void *)(v225 + 16)) {
    v130 = (unsigned int *)&enum case for SFAirDrop.TransferType.files(_:);
  }
  else {
    v130 = (unsigned int *)&enum case for SFAirDrop.TransferType.links(_:);
  }
  (*(void (**)(char *, void, uint64_t))(v213 + 104))(v214, *v130, v211);
  uint64_t v40 = kSFOperationItemsDescriptionKey;
  if (!kSFOperationItemsDescriptionKey)
  {
    swift_bridgeObjectRelease(v224);
    __break(1u);
    goto LABEL_160;
  }

  NSDictionary.sf_optionalValue<A>(_:as:file:line:)( &v236,  kSFOperationItemsDescriptionKey,  &type metadata for String,  0xD000000000000070LL,  v229 | 0x8000000000000000LL,  56LL,  &type metadata for String);
  if (!kSFOperationBundleIDKey)
  {
    swift_bridgeObjectRelease(v224);
    __break(1u);
LABEL_172:
    v177 = v236;
    if (v236)
    {
      uint64_t v229 = (uint64_t)sub_10008DF7C(v236);
      swift_unknownObjectRelease(v177);
LABEL_176:
      LODWORD(v203) = v195 & 1;
      LODWORD(v202) = v196 & 1;
      v178 = v206;
      (*(void (**)(char *, char *, uint64_t))(v228 + 16))(v206, v227, v226);
      v179 = v208;
      (*(void (**)(char *, char *, uint64_t))(v213 + 16))(v208, v214, v211);
      uint64_t v180 = v210;
      uint64_t v181 = v207;
      sub_1001915A4(v210, v207, &qword_100645128);
      SFAirDropReceive.AskRequest.init(id:type:transferTypes:canAutoAccept:verifiableIdentity:senderIsMe:contactIdentifier:senderBundleID:senderComputerName:senderModelName:senderEmail:senderEmailHash:senderCompositeName:senderFirstName:senderLastName:senderID:senderIcon:smallPreviewImage:previewImage:itemsDescription:itemsDescriptionAdvanced:urlItems:items:customPayload:)( v178,  v179,  2LL,  v194,  v202,  v203,  v186,  v187,  v44,  v42,  v222,  v223,  v37,  v221,  v219,  v220,  v217,  v218,  v215,  v216,  v197,  v212,  v190,  v192,  v188,  v189,  v229,  v205,  v204,  v35,  v36,  v181,  v225,  v224,  0LL,  0xF000000000000000LL);

      uint64_t v176 = v180;
      goto LABEL_167;
    }

LABEL_175:
    uint64_t v229 = 0LL;
    goto LABEL_176;
  }

  uint64_t v44 = (uint64_t)v236;
  unint64_t v36 = v237;
  NSDictionary.sf_value<A>(_:as:file:line:)( &v236,  kSFOperationBundleIDKey,  &type metadata for String,  0xD000000000000070LL,  v229 | 0x8000000000000000LL,  57LL,  &type metadata for String);
  if (!kSFOperationSenderComputerNameKey)
  {
    swift_bridgeObjectRelease(v224);
    __break(1u);
    goto LABEL_175;
  }

  int64_t v35 = (char *)v44;
  uint64_t v44 = (uint64_t)v236;
  uint64_t v42 = v237;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)( &v236,  kSFOperationSenderComputerNameKey,  &type metadata for String,  0xD000000000000070LL,  v229 | 0x8000000000000000LL,  58LL,  &type metadata for String);
  unint64_t v131 = v237;
  if (v237) {
    uint64_t v132 = (uint64_t)v236;
  }
  else {
    uint64_t v132 = 63LL;
  }
  if (!v237) {
    unint64_t v131 = 0xE100000000000000LL;
  }
  v222 = (char *)v132;
  v223 = (os_log_s *)v131;
  if (!kSFOperationSenderModelNameKey)
  {
    swift_bridgeObjectRelease(v224);
    __break(1u);
LABEL_178:
    swift_bridgeObjectRelease(v224);
    __break(1u);
    goto LABEL_179;
  }

  NSDictionary.sf_optionalValue<A>(_:as:file:line:)( &v236,  kSFOperationSenderModelNameKey,  &type metadata for String,  0xD000000000000070LL,  v229 | 0x8000000000000000LL,  59LL,  &type metadata for String);
  unint64_t v133 = v237;
  if (v237) {
    uint64_t v37 = (uint64_t)v236;
  }
  else {
    uint64_t v37 = 63LL;
  }
  if (!v237) {
    unint64_t v133 = 0xE100000000000000LL;
  }
  v221 = (char *)v133;
  if (!kSFOperationSenderEmailKey) {
    goto LABEL_178;
  }
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)( &v236,  kSFOperationSenderEmailKey,  &type metadata for String,  0xD000000000000070LL,  v229 | 0x8000000000000000LL,  60LL,  &type metadata for String);
  if (!kSFOperationSenderEmailHashKey)
  {
LABEL_179:
    swift_bridgeObjectRelease(v224);
    __break(1u);
    goto LABEL_180;
  }

  os_log_t v219 = v236;
  v220 = (char *)v237;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)( &v236,  kSFOperationSenderEmailHashKey,  &type metadata for String,  0xD000000000000070LL,  v229 | 0x8000000000000000LL,  61LL,  &type metadata for String);
  if (!kSFOperationSenderCompositeNameKey)
  {
LABEL_180:
    swift_bridgeObjectRelease(v224);
    __break(1u);
    goto LABEL_181;
  }

  v217 = v236;
  v218 = (char *)v237;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)( &v236,  kSFOperationSenderCompositeNameKey,  &type metadata for String,  0xD000000000000070LL,  v229 | 0x8000000000000000LL,  62LL,  &type metadata for String);
  v191 = 0LL;
  if (!kSFOperationSenderFirstNameKey)
  {
LABEL_181:
    swift_bridgeObjectRelease(v224);
    __break(1u);
    goto LABEL_182;
  }

  v215 = (void (**)(unint64_t, const void *, uint64_t))v236;
  uint64_t v216 = v237;
  v134 = v191;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)( &v236,  kSFOperationSenderFirstNameKey,  &type metadata for String,  0xD000000000000070LL,  v229 | 0x8000000000000000LL,  63LL,  &type metadata for String);
  v191 = (char *)v134;
  if (!kSFOperationSenderLastNameKey)
  {
    swift_bridgeObjectRelease(v224);
    __break(1u);
    goto LABEL_184;
  }

  uint64_t v197 = (uint64_t)v236;
  v212 = (char *)v237;
  v135 = v191;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)( &v236,  kSFOperationSenderLastNameKey,  &type metadata for String,  0xD000000000000070LL,  v229 | 0x8000000000000000LL,  64LL,  &type metadata for String);
  v191 = (char *)v135;
LABEL_128:
  if (!kSFOperationSenderIDKey)
  {
LABEL_184:
    swift_bridgeObjectRelease(v224);
    __break(1u);
LABEL_185:
    swift_bridgeObjectRelease(v224);
    __break(1u);
    goto LABEL_186;
  }

  v190 = v236;
  unint64_t v192 = v237;
  v136 = v191;
  uint64_t v48 = NSDictionary.sf_optionalValue<A>(_:as:file:line:)( &v236,  kSFOperationSenderIDKey,  &type metadata for String,  0xD000000000000070LL,  v229 | 0x8000000000000000LL,  65LL,  &type metadata for String);
  v191 = (char *)v136;
  if (v136)
  {
    swift_bridgeObjectRelease(v225);
    swift_bridgeObjectRelease(v224);
    swift_bridgeObjectRelease(v223);
    v137 = v221;
LABEL_140:
    swift_bridgeObjectRelease(v137);

    swift_bridgeObjectRelease(v42);
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v220);
    swift_bridgeObjectRelease(v218);
    swift_bridgeObjectRelease(v216);
    swift_bridgeObjectRelease(v212);
    v143 = &v225;
LABEL_141:
    swift_bridgeObjectRelease(*(v143 - 32));
LABEL_142:
    (*(void (**)(char *, uint64_t))(v213 + 8))(v214, v211);
    (*(void (**)(char *, uint64_t))(v228 + 8))(v227, v226);
    return (*(uint64_t (**)(char *, uint64_t))(v198 + 8))(v193, v199);
  }

LABEL_133:
  uint64_t v139 = (uint64_t)v236;
  unint64_t v138 = v237;
  if (!v237) {
    uint64_t v139 = 63LL;
  }
  uint64_t v188 = v139;
  if (!v237) {
    unint64_t v138 = 0xE100000000000000LL;
  }
  unint64_t v189 = v138;
  uint64_t v140 = kSFOperationSenderNodeKey;
  if (!kSFOperationSenderNodeKey) {
    goto LABEL_185;
  }
  uint64_t TypeID = SFNodeGetTypeID(v48);
  v142 = v191;
  NSDictionary.sf_optionalValue<A>(_:as:cfTypeID:file:line:)( &v236,  v140,  &type metadata for OpaquePointer,  TypeID,  0xD000000000000070LL,  v229 | 0x8000000000000000LL,  68LL,  &type metadata for OpaquePointer);
  v191 = (char *)v142;
  if (v142)
  {
    swift_bridgeObjectRelease(v225);
    swift_bridgeObjectRelease(v224);
    swift_bridgeObjectRelease(v223);
    swift_bridgeObjectRelease(v221);
    v137 = (char *)v189;
    goto LABEL_140;
  }

  if (v236)
  {
    uint64_t v144 = SFNodeCopyContactIdentifier(v236);
    if (v144)
    {
      v145 = (void *)v144;
      uint64_t v186 = static String._unconditionallyBridgeFromObjectiveC(_:)(v144);
      uint64_t v187 = v146;

      goto LABEL_148;
    }
  }

LABEL_147:
  uint64_t v186 = 0LL;
  uint64_t v187 = 0LL;
LABEL_148:
  v147 = v191;
  uint64_t v52 = NSDictionary.sf_optionalValue<A>(_:as:file:line:)( &v236,  v40,  &type metadata for String,  0xD000000000000070LL,  v229 | 0x8000000000000000LL,  81LL,  &type metadata for String);
  v191 = (char *)v147;
  if (v147)
  {
    swift_bridgeObjectRelease(v225);
    swift_bridgeObjectRelease(v224);
    swift_bridgeObjectRelease(v223);
    swift_bridgeObjectRelease(v221);
    swift_bridgeObjectRelease(v189);

    swift_bridgeObjectRelease(v42);
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v220);
    swift_bridgeObjectRelease(v218);
    swift_bridgeObjectRelease(v216);
    swift_bridgeObjectRelease(v212);
    swift_bridgeObjectRelease(v192);
    v143 = (uint64_t *)&v220;
    goto LABEL_141;
  }

LABEL_151:
  countAndFlagsBits = (char *)v237;
  if (v237)
  {
    uint64_t v148 = (uint64_t)v236;
    v149 = v200;
    static String.Encoding.utf8.getter(v52);
    uint64_t v185 = v148;
    uint64_t v40 = String.data(using:allowLossyConversion:)(v149, 0LL, v148, countAndFlagsBits);
    uint64_t v54 = v150;
    v201[1](v149, v202);
    uint64_t v234 = v40;
    uint64_t v235 = v54;
    uint64_t v151 = sub_100183098(&qword_100645150);
    v152 = v191;
    Optional.tryUnwrap(_:file:line:)( 0xD00000000000002ALL,  0x80000001005037C0LL,  0xD000000000000070LL,  v229 | 0x8000000000000000LL,  82LL,  v151);
    v191 = (char *)v152;
    if (v152)
    {
      swift_bridgeObjectRelease(v225);
      swift_bridgeObjectRelease(v224);
      swift_bridgeObjectRelease(v223);
      swift_bridgeObjectRelease(v221);
      swift_bridgeObjectRelease(v189);

      swift_bridgeObjectRelease(v42);
      swift_bridgeObjectRelease(countAndFlagsBits);
      swift_bridgeObjectRelease(v36);
      swift_bridgeObjectRelease(v220);
      swift_bridgeObjectRelease(v218);
      swift_bridgeObjectRelease(v216);
      swift_bridgeObjectRelease(v212);
      swift_bridgeObjectRelease(v192);
      swift_bridgeObjectRelease(v187);
      sub_100189B0C(v40, v54);
      goto LABEL_142;
    }

LABEL_155:
    sub_100189B0C(v40, v54);
    v154 = (void (**)(char *, uint64_t))v236;
    unint64_t v153 = v237;
    uint64_t v155 = type metadata accessor for JSONDecoder(0LL);
    swift_allocObject(v155, *(unsigned int *)(v155 + 48), *(unsigned __int16 *)(v155 + 52));
    v110 = (char *)JSONDecoder.init()();
    uint64_t v156 = sub_100183F14( &qword_100645158,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.AskRequest.AdvancedItemsDescription);
    v201 = v154;
    uint64_t v202 = v153;
    v157 = v191;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v205, v154, v153, v205, v156);
    v191 = (char *)v157;
    if (v157)
    {
      swift_release(v110);
      if (qword_100643E98 == -1)
      {
LABEL_157:
        uint64_t v158 = type metadata accessor for Logger(0LL);
        sub_100186DE4(v158, (uint64_t)qword_100645110);
        v159 = v191;
        swift_errorRetain(v191);
        swift_bridgeObjectRetain(countAndFlagsBits);
        uint64_t v160 = swift_errorRetain((char *)v159);
        v161 = (os_log_s *)Logger.logObject.getter(v160);
        os_log_type_t v162 = static os_log_type_t.fault.getter();
        v203 = v161;
        LODWORD(v200) = v162;
        if (os_log_type_enabled(v161, v162))
        {
          uint64_t v163 = swift_slowAlloc(22LL, -1LL);
          v184 = (os_log_s *)swift_slowAlloc(64LL, -1LL);
          v236 = v184;
          *(_DWORD *)uint64_t v163 = 136315394;
          uint64_t v183 = v163 + 4;
          v164 = v191;
          swift_getErrorValue(v191, v238, v233);
          uint64_t v165 = Error.localizedDescription.getter(v233[1], v233[2]);
          unint64_t v167 = v166;
          uint64_t v234 = sub_10018CDB4(v165, v166, (uint64_t *)&v236);
          v182 = &v235;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, &v235, v183, v163 + 12);
          swift_bridgeObjectRelease(v167);
          swift_errorRelease((char *)v164);
          swift_errorRelease((char *)v164);
          *(_WORD *)(v163 + 12) = 2080;
          swift_bridgeObjectRetain(countAndFlagsBits);
          uint64_t v234 = sub_10018CDB4(v185, (unint64_t)countAndFlagsBits, (uint64_t *)&v236);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v234, v182, v163 + 14, v163 + 22);
          swift_bridgeObjectRelease_n(countAndFlagsBits, 3LL);
          v168 = v203;
          _os_log_impl( (void *)&_mh_execute_header,  v203,  (os_log_type_t)v200,  "Failed to decode advanced items description {error: %s, itemsDescription: %s}",  (uint8_t *)v163,  0x16u);
          v169 = v184;
          swift_arrayDestroy(v184, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc((os_log_s *)v169, -1LL, -1LL);
          swift_slowDealloc(v163, -1LL, -1LL);
          sub_100189B20((uint64_t)v201, v202);

          swift_errorRelease(v191);
        }

        else
        {
          sub_100189B20((uint64_t)v201, v202);
          v171 = v191;
          swift_errorRelease(v191);
          swift_errorRelease((char *)v171);
          swift_errorRelease((char *)v171);

          swift_bridgeObjectRelease_n(countAndFlagsBits, 2LL);
        }

        v191 = 0LL;
        goto LABEL_163;
      }

LABEL_182:
      swift_once(&qword_100643E98, sub_100187374);
      goto LABEL_157;
    }

LABEL_160:
    sub_100189B20((uint64_t)v201, v202);
    swift_release(v110);
    swift_bridgeObjectRelease(countAndFlagsBits);
    v204[4](v210, v203, v205);
    uint64_t v170 = 0LL;
    goto LABEL_164;
  }

LABEL_163:
  uint64_t v170 = 1LL;
LABEL_164:
  ((void (*)(uint64_t, uint64_t, uint64_t, os_log_s *))v204[7])(v210, v170, 1LL, v205);
  uint64_t v172 = kSFOperationSmallFileIconKey;
  if (!kSFOperationSmallFileIconKey)
  {
LABEL_186:
    swift_bridgeObjectRelease(v224);
    swift_bridgeObjectRelease(v187);
    __break(1u);
LABEL_187:
    swift_bridgeObjectRelease(v224);
    swift_bridgeObjectRelease(v187);
    __break(1u);
    goto LABEL_188;
  }

  type metadata accessor for CGImage(0LL);
  uint64_t v174 = v173;
  v175 = v191;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)( &v236,  v172,  v174,  0xD000000000000070LL,  v229 | 0x8000000000000000LL,  95LL,  v174);
  v191 = (char *)v175;
  if (v175)
  {
    swift_bridgeObjectRelease(v225);
    swift_bridgeObjectRelease(v224);
    swift_bridgeObjectRelease(v223);
    swift_bridgeObjectRelease(v221);
    swift_bridgeObjectRelease(v189);

    swift_bridgeObjectRelease(v42);
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v220);
    swift_bridgeObjectRelease(v218);
    swift_bridgeObjectRelease(v216);
    swift_bridgeObjectRelease(v212);
    swift_bridgeObjectRelease(v192);
    swift_bridgeObjectRelease(v187);
    uint64_t v176 = v210;
LABEL_167:
    sub_100187100(v176, &qword_100645128);
    goto LABEL_142;
  }

  if (!kSFOperationFileIconKey) {
    goto LABEL_187;
  }
  v205 = v236;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)( &v236,  kSFOperationFileIconKey,  v174,  0xD000000000000070LL,  v229 | 0x8000000000000000LL,  96LL,  v174);
  if (kSFOperationSenderIconKey)
  {
    v204 = (void (**)(uint64_t, os_log_s *, const void *))v236;
    NSDictionary.sf_optionalValue<A>(_:as:file:line:)( &v236,  kSFOperationSenderIconKey,  (char *)&type metadata for Swift.AnyObject + 8,  0xD000000000000070LL,  v229 | 0x8000000000000000LL,  99LL,  (char *)&type metadata for Swift.AnyObject + 8);
    v191 = 0LL;
    goto LABEL_172;
  }

LABEL_188:
  swift_bridgeObjectRelease(v224);
  uint64_t result = swift_bridgeObjectRelease(v187);
  __break(1u);
  return result;
}

uint64_t sub_100189B0C(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100189B20(result, a2);
  }
  return result;
}

uint64_t sub_100189B20(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

void sub_100189B64(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = sub_100183168(0LL, &qword_100645180, &OBJC_CLASS___SFAirDropTransferItem_ptr);
  uint64_t v4 = sub_100190CA4(&qword_100645188, &qword_100645180, &OBJC_CLASS___SFAirDropTransferItem_ptr);
  uint64_t v5 = (const char *)Set.init(minimumCapacity:)(v2, v3, v4);
  int64_t v6 = 0LL;
  v17[1] = v5;
  uint64_t v7 = a1 + 64;
  uint64_t v8 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & *(void *)(a1 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }

    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v14 >= v11) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v11) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v7 + 8 * v6);
      if (!v15)
      {
        int64_t v6 = v14 + 2;
        if (v14 + 2 >= v11) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v7 + 8 * v6);
        if (!v15)
        {
          int64_t v6 = v14 + 3;
          if (v14 + 3 >= v11) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v7 + 8 * v6);
          if (!v15) {
            break;
          }
        }
      }
    }

void sub_100189D18(uint64_t a1)
{
  int64_t v2 = 0LL;
  v16[2] = Set.init(minimumCapacity:)( *(void *)(a1 + 16),  &type metadata for String,  &protocol witness table for String);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }

    int64_t v13 = v2 + 1;
    if (__OFADD__(v2, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v13 >= v7) {
      goto LABEL_23;
    }
    unint64_t v14 = *(void *)(v3 + 8 * v13);
    ++v2;
    if (!v14)
    {
      int64_t v2 = v13 + 1;
      if (v13 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v14 = *(void *)(v3 + 8 * v2);
      if (!v14)
      {
        int64_t v2 = v13 + 2;
        if (v13 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v3 + 8 * v2);
        if (!v14)
        {
          int64_t v2 = v13 + 3;
          if (v13 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v14 = *(void *)(v3 + 8 * v2);
          if (!v14) {
            break;
          }
        }
      }
    }

void sub_100189EAC(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v112 = a2;
  uint64_t v4 = type metadata accessor for URL.DirectoryHint(0LL);
  uint64_t v120 = *(void *)(v4 - 8);
  uint64_t v121 = v4;
  __chkstk_darwin(v4);
  unint64_t v122 = &v98[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = sub_100183098((uint64_t *)&unk_100645130);
  __chkstk_darwin(v6);
  unint64_t v117 = &v98[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v118 = *(void *)(v8 - 8);
  uint64_t v119 = v8;
  __chkstk_darwin(v8);
  id v116 = &v98[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v128 = sub_100183098(&qword_100645428);
  uint64_t v10 = __chkstk_darwin(v128);
  uint64_t v11 = __chkstk_darwin(v10);
  v125 = &v98[-v12];
  uint64_t v13 = __chkstk_darwin(v11);
  int64_t v15 = &v98[-v14];
  uint64_t v16 = __chkstk_darwin(v13);
  Class v113 = &v98[-v17];
  uint64_t v18 = __chkstk_darwin(v16);
  unint64_t v114 = &v98[-v19];
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = &v98[-v21];
  __chkstk_darwin(v20);
  uint64_t v24 = &v98[-v23];
  uint64_t v127 = type metadata accessor for UTType(0LL);
  uint64_t v129 = *(void *)(v127 - 8);
  uint64_t v25 = __chkstk_darwin(v127);
  uint64_t v26 = __chkstk_darwin(v25);
  OSStatus v123 = &v98[-v27];
  uint64_t v28 = __chkstk_darwin(v26);
  id v115 = &v98[-v29];
  uint64_t v30 = __chkstk_darwin(v28);
  unint64_t v124 = &v98[-v31];
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v34 = &v98[-v33];
  __chkstk_darwin(v32);
  unint64_t v126 = &v98[-v35];
  if (!kSFOperationFileNameKey)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  NSDictionary.sf_value<A>(_:as:file:line:)( v130,  kSFOperationFileNameKey,  &type metadata for String,  0xD000000000000070LL,  0x8000000100503740LL,  116LL,  &type metadata for String);
  if (v2)
  {

    return;
  }

  v110 = v22;
  v109 = v15;
  id v111 = a1;
  if (!kSFOperationFileTypeKey) {
    goto LABEL_29;
  }
  uint64_t v37 = v130[0];
  uint64_t v36 = v130[1];
  NSDictionary.sf_value<A>(_:as:file:line:)( v130,  kSFOperationFileTypeKey,  &type metadata for String,  0xD000000000000070LL,  0x8000000100503740LL,  117LL,  &type metadata for String);
  uint64_t v107 = v37;
  uint64_t v108 = v36;
  if (!kSFOperationFileBomPathKey)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  uint64_t v38 = v130[0];
  uint64_t v39 = (void *)v130[1];
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)( v130,  kSFOperationFileBomPathKey,  &type metadata for String,  0xD000000000000070LL,  0x8000000100503740LL,  119LL,  &type metadata for String);
  uint64_t v105 = v38;
  uint64_t v41 = v130[0];
  unint64_t v40 = v130[1];
  if (!v130[1]) {
    uint64_t v41 = 4271950LL;
  }
  uint64_t v104 = v41;
  if (!v130[1]) {
    unint64_t v40 = 0xE300000000000000LL;
  }
  unint64_t v106 = v40;
  if (!kSFOperationFileIsDirectoryKey) {
    goto LABEL_31;
  }
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)( v130,  kSFOperationFileIsDirectoryKey,  &type metadata for Bool,  0xD000000000000070LL,  0x8000000100503740LL,  120LL,  &type metadata for Bool);
  uint64_t v103 = v39;
  if (!kSFOperationConvertMediaFormatsKey)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    return;
  }

  int v42 = LOBYTE(v130[0]);
  unint64_t v102 = 0x8000000100503740LL;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)( v130,  kSFOperationConvertMediaFormatsKey,  &type metadata for Bool,  0xD000000000000070LL,  0x8000000100503740LL,  121LL,  &type metadata for Bool);
  int v100 = v42;
  int v99 = LOBYTE(v130[0]);
  Swift::String v43 = v103;
  swift_bridgeObjectRetain(v103);
  UTType.init(_:)(v105, v43);
  v130[0] = 0LL;
  v130[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(16LL);
  swift_bridgeObjectRelease(v130[1]);
  HIWORD(v130[1]) = -4864;
  v44._countAndFlagsBits = v105;
  v44._object = v43;
  String.append(_:)(v44);
  v45._countAndFlagsBits = 96LL;
  v45._object = (void *)0xE100000000000000LL;
  String.append(_:)(v45);
  uint64_t v101 = v130[1];
  Optional.tryUnwrap(_:file:line:)(v130[0], v130[1], 0xD000000000000070LL, v102, 125LL, v128);
  unint64_t v102 = 0LL;
  sub_100187100((uint64_t)v24, &qword_100645428);
  swift_bridgeObjectRelease(v43);
  swift_bridgeObjectRelease(v101);
  uint64_t v46 = v129;
  uint64_t v47 = *(_BYTE **)(v129 + 32);
  uint64_t v48 = v126;
  uint64_t v49 = v127;
  uint64_t v50 = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))v47)(v126, v34, v127);
  if ((UTType.isDynamic.getter(v50) & 1) != 0)
  {
    v125 = v47;
    int v51 = v117;
    uint64_t v52 = v118;
    uint64_t v53 = v119;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v118 + 56))(v117, 1LL, 1LL, v119);
    uint64_t v54 = v122;
    (*(void (**)(_BYTE *, void, uint64_t))(v120 + 104))( v122,  enum case for URL.DirectoryHint.inferFromPath(_:),  v121);
    uint64_t v55 = v108;
    swift_bridgeObjectRetain(v108);
    uint64_t v56 = v116;
    uint64_t v57 = URL.init(filePath:directoryHint:relativeTo:)(v107, v55, v54, v51);
    uint64_t v58 = URL.pathExtension.getter(v57);
    os_log_type_t v60 = v59;
    (*(void (**)(_BYTE *, uint64_t))(v52 + 8))(v56, v53);
    uint64_t v61 = swift_bridgeObjectRetain(v60);
    uint64_t v62 = v123;
    static UTType.data.getter(v61);
    uint64_t v63 = (uint64_t)v110;
    UTType.init(filenameExtension:conformingTo:)(v58, v60, v62);
    v130[0] = 0LL;
    v130[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(29LL);
    swift_bridgeObjectRelease(v130[1]);
    v130[0] = 0xD00000000000001BLL;
    v130[1] = 0x80000001005038F0LL;
    v64._countAndFlagsBits = v58;
    v64._object = v60;
    String.append(_:)(v64);
    swift_bridgeObjectRelease(v60);
    uint64_t v65 = v130[1];
    unint64_t v66 = v115;
    unint64_t v67 = v102;
    Optional.tryUnwrap(_:file:line:)(v130[0], v130[1], 0xD000000000000070LL, 0x8000000100503740LL, 133LL, v128);
    unint64_t v68 = v67;
    if (v67)
    {
      swift_bridgeObjectRelease(v106);
      swift_bridgeObjectRelease(v55);

      swift_bridgeObjectRelease(v65);
      sub_100187100(v63, &qword_100645428);
      (*(void (**)(_BYTE *, uint64_t))(v129 + 8))(v48, v127);
      return;
    }

    sub_100187100(v63, &qword_100645428);
    swift_bridgeObjectRelease(v65);
    os_log_t v69 = v124;
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v125)(v124, v66, v127);
    uint64_t v70 = v107;
  }

  else
  {
    os_log_t v69 = v124;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v46 + 16))(v124, v48, v49);
    uint64_t v70 = v107;
    unint64_t v68 = v102;
  }

  uint64_t v71 = v108;
  if (!kSFOperationtFileSubTypeKey) {
    goto LABEL_33;
  }
  id v72 = v111;
  NSDictionary.sf_optionalValue<A>(_:as:file:line:)( v130,  kSFOperationtFileSubTypeKey,  &type metadata for String,  0xD000000000000070LL,  0x8000000100503740LL,  140LL,  &type metadata for String);
  if (v68)
  {
    swift_bridgeObjectRelease(v106);
    swift_bridgeObjectRelease(v71);

    uint64_t v73 = *(void (**)(_BYTE *, uint64_t))(v129 + 8);
    uint64_t v74 = v127;
    v73(v69, v127);
    v73(v126, v74);
  }

  else
  {
    Class v75 = (void *)v130[1];
    uint64_t v76 = v127;
    if (v130[1])
    {
      uint64_t v77 = v130[0];
      swift_bridgeObjectRetain(v130[1]);
      uint64_t v78 = (uint64_t)v109;
      UTType.init(_:)(v77, v75);
      v130[0] = 0LL;
      v130[1] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(16LL);
      swift_bridgeObjectRelease(v130[1]);
      HIWORD(v130[1]) = -4864;
      v79._countAndFlagsBits = v77;
      v79._object = v75;
      String.append(_:)(v79);
      swift_bridgeObjectRelease(v75);
      v80._countAndFlagsBits = 96LL;
      v80._object = (void *)0xE100000000000000LL;
      String.append(_:)(v80);
      uint64_t v81 = v130[1];
      unint64_t v82 = v113;
      Optional.tryUnwrap(_:file:line:)(v130[0], v130[1], 0xD000000000000070LL, 0x8000000100503740LL, 141LL, v128);
      sub_100187100(v78, &qword_100645428);
      swift_bridgeObjectRelease(v81);
      uint64_t v83 = v129;
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v129 + 56))(v82, 0LL, 1LL, v76);
      uint64_t v84 = (uint64_t)v82;
      uint64_t v85 = v114;
      sub_1001870BC(v84, (uint64_t)v114, &qword_100645428);
      uint64_t v70 = v107;
    }

    else
    {
      uint64_t v83 = v129;
      uint64_t v85 = v114;
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v129 + 56))(v114, 1LL, 1LL, v127);
    }

    uint64_t v86 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v83 + 48))(v85, 1LL, v76);
    uint64_t v87 = v123;
    char v88 = v100;
    char v89 = v99;
    if ((_DWORD)v86)
    {
      uint64_t v90 = 0LL;
      uint64_t v91 = 0LL;
    }

    else
    {
      uint64_t v92 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v83 + 16))(v123, v85, v76);
      uint64_t v90 = UTType.identifier.getter(v92);
      uint64_t v91 = v93;
      uint64_t v86 = (*(uint64_t (**)(_BYTE *, uint64_t))(v83 + 8))(v87, v76);
    }

    uint64_t v94 = v124;
    uint64_t v95 = UTType.identifier.getter(v86);
    SFAirDropReceive.AskRequest.ItemInfo.init(convertMediaFormats:fileBomPath:fileIsDirectory:fileName:fileSubType:fileType:)( v89 & 1,  v104,  v106,  v88 & 1,  v70,  v108,  v90,  v91,  v95,  v96);

    unint64_t v97 = *(void (**)(_BYTE *, uint64_t))(v129 + 8);
    v97(v94, v76);
    v97(v126, v76);
    sub_100187100((uint64_t)v114, &qword_100645428);
  }

unint64_t sub_10018ADE4()
{
  unint64_t v0 = sub_1003913F0((uint64_t)_swiftEmptyArrayStorage);
  *(void *)&__int128 v35 = kSFOperationConvertMediaFormatsKey;
  id v1 = kSFOperationConvertMediaFormatsKey;
  uint64_t v2 = sub_100183098(&qword_100645400);
  unint64_t v3 = sub_1001914D0();
  uint64_t v4 = AnyHashable.init<A>(_:)(v37, &v35, v2, v3);
  char v5 = SFAirDropReceive.AskRequest.ItemInfo.convertMediaFormats.getter(v4);
  uint64_t v36 = &type metadata for Bool;
  LOBYTE(v35) = v5 & 1;
  sub_100186D8C(&v35, v34);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v0);
  sub_1003B2590(v34, (uint64_t)v37, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease((const char *)0x8000000000000000LL);
  sub_10019154C((uint64_t)v37);
  *(void *)&__int128 v35 = kSFOperationFileNameKey;
  id v7 = kSFOperationFileNameKey;
  uint64_t v8 = AnyHashable.init<A>(_:)(v37, &v35, v2, v3);
  uint64_t v9 = SFAirDropReceive.AskRequest.ItemInfo.fileName.getter(v8);
  uint64_t v36 = &type metadata for String;
  *(void *)&__int128 v35 = v9;
  *((void *)&v35 + 1) = v10;
  sub_100186D8C(&v35, v34);
  char v11 = swift_isUniquelyReferenced_nonNull_native(v0);
  sub_1003B2590(v34, (uint64_t)v37, v11);
  swift_bridgeObjectRelease((const char *)0x8000000000000000LL);
  sub_10019154C((uint64_t)v37);
  *(void *)&__int128 v35 = kSFOperationFileTypeKey;
  id v12 = kSFOperationFileTypeKey;
  uint64_t v13 = AnyHashable.init<A>(_:)(v37, &v35, v2, v3);
  uint64_t v14 = SFAirDropReceive.AskRequest.ItemInfo.fileType.getter(v13);
  uint64_t v36 = &type metadata for String;
  *(void *)&__int128 v35 = v14;
  *((void *)&v35 + 1) = v15;
  sub_100186D8C(&v35, v34);
  char v16 = swift_isUniquelyReferenced_nonNull_native(v0);
  sub_1003B2590(v34, (uint64_t)v37, v16);
  swift_bridgeObjectRelease((const char *)0x8000000000000000LL);
  uint64_t v17 = sub_10019154C((uint64_t)v37);
  uint64_t v18 = SFAirDropReceive.AskRequest.ItemInfo.fileSubType.getter(v17);
  if (v19)
  {
    uint64_t v20 = v18;
    uint64_t v21 = v19;
    *(void *)&__int128 v35 = kSFOperationtFileSubTypeKey;
    id v22 = kSFOperationtFileSubTypeKey;
    AnyHashable.init<A>(_:)(v37, &v35, v2, v3);
    uint64_t v36 = &type metadata for String;
    *(void *)&__int128 v35 = v20;
    *((void *)&v35 + 1) = v21;
    sub_100186D8C(&v35, v34);
    char v23 = swift_isUniquelyReferenced_nonNull_native(v0);
    sub_1003B2590(v34, (uint64_t)v37, v23);
    swift_bridgeObjectRelease((const char *)0x8000000000000000LL);
    sub_10019154C((uint64_t)v37);
  }

  *(void *)&__int128 v35 = kSFOperationFileBomPathKey;
  id v24 = kSFOperationFileBomPathKey;
  uint64_t v25 = AnyHashable.init<A>(_:)(v37, &v35, v2, v3);
  uint64_t v26 = SFAirDropReceive.AskRequest.ItemInfo.fileBomPath.getter(v25);
  uint64_t v36 = &type metadata for String;
  *(void *)&__int128 v35 = v26;
  *((void *)&v35 + 1) = v27;
  sub_100186D8C(&v35, v34);
  char v28 = swift_isUniquelyReferenced_nonNull_native(v0);
  sub_1003B2590(v34, (uint64_t)v37, v28);
  swift_bridgeObjectRelease((const char *)0x8000000000000000LL);
  sub_10019154C((uint64_t)v37);
  *(void *)&__int128 v35 = kSFOperationFileIsDirectoryKey;
  id v29 = kSFOperationFileIsDirectoryKey;
  uint64_t v30 = AnyHashable.init<A>(_:)(v37, &v35, v2, v3);
  char v31 = SFAirDropReceive.AskRequest.ItemInfo.fileIsDirectory.getter(v30);
  uint64_t v36 = &type metadata for Bool;
  LOBYTE(v35) = v31 & 1;
  sub_100186D8C(&v35, v34);
  char v32 = swift_isUniquelyReferenced_nonNull_native(v0);
  sub_1003B2590(v34, (uint64_t)v37, v32);
  swift_bridgeObjectRelease((const char *)0x8000000000000000LL);
  sub_10019154C((uint64_t)v37);
  return v0;
}

void *SFAirDropTransferMetaData.init(transfer:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo(0LL);
  unint64_t v3 = *(void **)(v2 - 8);
  uint64_t v135 = v2;
  v136 = v3;
  __chkstk_darwin(v2);
  char v5 = (char *)&v113 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for SFAirDropReceive.AskRequest(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  v134 = (char *)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  char v11 = (char *)&v113 - v10;
  uint64_t v12 = type metadata accessor for SFAirDropReceive.Transfer.State(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  char v16 = (char *)&v113 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  SFAirDropReceive.Transfer.state.getter(v14);
  uint64_t v17 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v16, v12);
  if ((_DWORD)v17 == enum case for SFAirDropReceive.Transfer.State.waitingForAskResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v13 + 96))(v16, v12);
    uint64_t v18 = sub_100183098(&qword_1006451B0);
    uint64_t v17 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v18 - 8) + 8LL))(v16, v18);
LABEL_3:
    SFAirDropReceive.Transfer.askRequest.getter(v17);
    uint64_t v20 = (const char *)SFAirDropReceive.AskRequest.urlItems.getter(v19);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    uint64_t v21 = (const char *)sub_10018D21C((uint64_t)v20);
    swift_bridgeObjectRelease(v20);
    goto LABEL_13;
  }

  if ((_DWORD)v17 == enum case for SFAirDropReceive.Transfer.State.analyzingFullContent(_:))
  {
    (*(void (**)(char *, uint64_t))(v13 + 96))(v16, v12);
    uint64_t v23 = sub_100183098(&qword_1006451C8);
    uint64_t v21 = *(const char **)&v16[*(int *)(v23 + 48)];
    id v24 = &v16[*(int *)(v23 + 80)];
    uint64_t v25 = type metadata accessor for SFAirDrop.DeclineAction(0LL);
LABEL_10:
    (*(void (**)(char *, uint64_t))(*(void *)(v25 - 8) + 8LL))(v24, v25);
LABEL_11:
    uint64_t v28 = type metadata accessor for SFAirDropReceive.ItemDestination(0LL);
LABEL_12:
    uint64_t v22 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v28 - 8) + 8LL))(v16, v28);
    goto LABEL_13;
  }

  if ((_DWORD)v17 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentResponse(_:)
    || (_DWORD)v17 == enum case for SFAirDropReceive.Transfer.State.waitingForSensitiveContentIntervention(_:))
  {
    (*(void (**)(char *, uint64_t))(v13 + 96))(v16, v12);
    uint64_t v26 = sub_100183098(&qword_1006451C0);
    uint64_t v21 = *(const char **)&v16[*(int *)(v26 + 48)];
    uint64_t v27 = *(int *)(v26 + 64);
LABEL_9:
    id v24 = &v16[v27];
    uint64_t v25 = sub_100183098(&qword_1006451B0);
    goto LABEL_10;
  }

  if ((_DWORD)v17 == enum case for SFAirDropReceive.Transfer.State.importing(_:))
  {
    (*(void (**)(char *, uint64_t))(v13 + 96))(v16, v12);
    uint64_t v21 = *(const char **)&v16[*(int *)(sub_100183098(&qword_1006451B8) + 48)];
    goto LABEL_11;
  }

  if ((_DWORD)v17 == enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:))
  {
    (*(void (**)(char *, uint64_t))(v13 + 96))(v16, v12);
    int v99 = (int *)sub_100183098((uint64_t *)&unk_10064B760);
    uint64_t v21 = *(const char **)&v16[v99[12]];
    swift_bridgeObjectRelease(*(const char **)&v16[v99[16]]);
    uint64_t v27 = v99[20];
    goto LABEL_9;
  }

  if ((_DWORD)v17 == enum case for SFAirDropReceive.Transfer.State.opening(_:))
  {
    (*(void (**)(char *, uint64_t))(v13 + 96))(v16, v12);
    uint64_t v100 = sub_100183098((uint64_t *)&unk_1006451A0);
    uint64_t v21 = *(const char **)&v16[*(int *)(v100 + 48)];
    swift_bridgeObjectRelease(*(const char **)&v16[*(int *)(v100 + 64)]);
    goto LABEL_11;
  }

  if ((_DWORD)v17 == enum case for SFAirDropReceive.Transfer.State.completedSuccessfully(_:))
  {
    (*(void (**)(char *, uint64_t))(v13 + 96))(v16, v12);
    uint64_t v101 = (int *)sub_100183098((uint64_t *)&unk_10064DAC0);
    unint64_t v102 = &v16[v101[12]];
    *(void *)&double v103 = swift_bridgeObjectRelease((const char *)*(void *)&v16[v101[16] + 8]).n128_u64[0];
    uint64_t v21 = *(const char **)&v16[v101[20]];
    *(void *)&double v104 = swift_bridgeObjectRelease((const char *)*(void *)&v16[v101[24]], v103).n128_u64[0];
    swift_bridgeObjectRelease(*(const char **)&v16[v101[28]], v104);
    uint64_t v105 = type metadata accessor for SFAirDropReceive.ItemDestination(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v105 - 8) + 8LL))(v102, v105);
    uint64_t v28 = type metadata accessor for SFAirDropReceive.Transfer.Metrics(0LL);
    goto LABEL_12;
  }

  if ((_DWORD)v17 == enum case for SFAirDropReceive.Transfer.State.created(_:)) {
    goto LABEL_3;
  }
  uint64_t v22 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  uint64_t v21 = (const char *)_swiftEmptyArrayStorage;
LABEL_13:
  uint64_t v131 = v7;
  uint64_t v132 = v6;
  uint64_t v29 = SFAirDropReceive.Transfer.askRequest.getter(v22);
  uint64_t v30 = (const char *)SFAirDropReceive.AskRequest.files.getter(v29);
  sub_100190488((uint64_t)v30, (uint64_t)v21);
  uint64_t v129 = v31;
  *(void *)&double v32 = swift_bridgeObjectRelease(v30).n128_u64[0];
  swift_bridgeObjectRelease(v21, v32);
  uint64_t v34 = SFAirDropReceive.AskRequest.files.getter(v33);
  __int128 v35 = (const char *)v34;
  int64_t v36 = *(void *)(v34 + 16);
  uint64_t v133 = a1;
  if (v36)
  {
    v137 = (const char *)_swiftEmptyArrayStorage;
    sub_10018D770(0, v36, 0);
    unint64_t v37 = (*((unsigned __int8 *)v136 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v136 + 80);
    uint64_t v128 = v35;
    uint64_t v38 = &v35[v37];
    uint64_t v39 = v136[9];
    unint64_t v40 = (void (*)(char *, const char *, uint64_t))v136[2];
    do
    {
      uint64_t v41 = v135;
      v40(v5, v38, v135);
      unint64_t v42 = sub_10018ADE4();
      ((void (*)(char *, uint64_t))v136[1])(v5, v41);
      Swift::String v43 = v137;
      if ((swift_isUniquelyReferenced_nonNull_native(v137) & 1) == 0)
      {
        sub_10018D770(0, *((void *)v43 + 2) + 1LL, 1);
        Swift::String v43 = v137;
      }

      unint64_t v45 = *((void *)v43 + 2);
      unint64_t v44 = *((void *)v43 + 3);
      if (v45 >= v44 >> 1)
      {
        sub_10018D770(v44 > 1, v45 + 1, 1);
        Swift::String v43 = v137;
      }

      *((void *)v43 + 2) = v45 + 1;
      *(void *)&v43[8 * v45 + 32] = v42;
      v38 += v39;
      --v36;
    }

    while (v36);
    swift_bridgeObjectRelease(v128);
  }

  else
  {
    swift_bridgeObjectRelease((const char *)v34);
    Swift::String v43 = (const char *)_swiftEmptyArrayStorage;
  }

  LODWORD(v136) = SFAirDropReceive.AskRequest.canAutoAccept.getter(v46);
  LODWORD(v135) = SFAirDropReceive.Transfer.didAutoAccept.getter();
  uint64_t v47 = SFAirDropReceive.AskRequest.verifiableIdentity.getter();
  LODWORD(v12_Block_object_dispose(va, 8) = v47;
  int v127 = SFAirDropReceive.AskRequest.senderIsMe.getter(v47);
  SFAirDropReceive.AskRequest.contactIdentifier.getter();
  if (v48)
  {
    uint64_t v50 = v48;
    NSString v126 = String._bridgeToObjectiveC()();
    __n128 v49 = swift_bridgeObjectRelease(v50);
  }

  else
  {
    NSString v126 = 0LL;
  }

  SFAirDropReceive.AskRequest.senderBundleID.getter(v49);
  uint64_t v52 = v51;
  NSString v125 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v52);
  SFAirDropReceive.AskRequest.senderComputerName.getter(v53);
  uint64_t v55 = v54;
  NSString v124 = String._bridgeToObjectiveC()();
  __n128 v56 = swift_bridgeObjectRelease(v55);
  SFAirDropReceive.AskRequest.senderEmail.getter(v56);
  if (v57)
  {
    unint64_t v59 = v57;
    NSString v122 = String._bridgeToObjectiveC()();
    __n128 v58 = swift_bridgeObjectRelease(v59);
  }

  else
  {
    NSString v122 = 0LL;
  }

  SFAirDropReceive.AskRequest.senderEmailHash.getter(v58);
  if (v60)
  {
    uint64_t v62 = v60;
    NSString v121 = String._bridgeToObjectiveC()();
    __n128 v61 = swift_bridgeObjectRelease(v62);
  }

  else
  {
    NSString v121 = 0LL;
  }

  SFAirDropReceive.AskRequest.senderCompositeName.getter(v61);
  if (v63)
  {
    uint64_t v65 = v63;
    NSString v119 = String._bridgeToObjectiveC()();
    __n128 v64 = swift_bridgeObjectRelease(v65);
  }

  else
  {
    NSString v119 = 0LL;
  }

  SFAirDropReceive.AskRequest.senderFirstName.getter(v64);
  if (v66)
  {
    unint64_t v68 = v66;
    NSString v123 = String._bridgeToObjectiveC()();
    __n128 v67 = swift_bridgeObjectRelease(v68);
  }

  else
  {
    NSString v123 = 0LL;
  }

  uint64_t v69 = SFAirDropReceive.AskRequest.senderLastName.getter(v67);
  if (v70)
  {
    uint64_t v71 = v70;
    NSString v120 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v71);
  }

  else
  {
    NSString v120 = 0LL;
  }

  SFAirDropReceive.AskRequest.senderID.getter(v69);
  uint64_t v73 = v72;
  NSString v74 = String._bridgeToObjectiveC()();
  __n128 v75 = swift_bridgeObjectRelease(v73);
  uint64_t v76 = SFAirDropReceive.AskRequest.senderIcon.getter(v75);
  uint64_t v77 = (void *)SFAirDropReceive.AskRequest.smallPreviewImage.getter();
  uint64_t v78 = (void *)SFAirDropReceive.AskRequest.previewImage.getter();
  SFAirDropReceive.AskRequest.itemsDescription.getter(v79);
  if (v80)
  {
    uint64_t v81 = v80;
    NSString v82 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v81);
  }

  else
  {
    NSString v82 = 0LL;
  }

  id v114 = v82;
  id v117 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v130));
  sub_100183168(0LL, &qword_100645180, &OBJC_CLASS___SFAirDropTransferItem_ptr);
  sub_100190CA4(&qword_100645188, &qword_100645180, &OBJC_CLASS___SFAirDropTransferItem_ptr);
  uint64_t v83 = v129;
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  Class v118 = isa;
  swift_bridgeObjectRelease(v83);
  sub_100183098((uint64_t *)&unk_100645190);
  Class v85 = Array._bridgeToObjectiveC()().super.isa;
  Class v130 = v85;
  *(void *)&double v86 = swift_bridgeObjectRelease(v43).n128_u64[0];
  Class v111 = isa;
  Class v112 = v85;
  NSString v110 = v82;
  id v116 = v78;
  v109 = v78;
  id v115 = v77;
  uint64_t v107 = v76;
  uint64_t v108 = v77;
  uint64_t v87 = (void *)v76;
  char v88 = v74;
  NSString v106 = v74;
  char v89 = v120;
  uint64_t v90 = v123;
  uint64_t v91 = v119;
  uint64_t v92 = v121;
  uint64_t v93 = v122;
  uint64_t v94 = v124;
  uint64_t v95 = v125;
  uint64_t v96 = v126;
  v136 = objc_msgSend( v117,  "initWithTransferTypes:canAutoAccept:didAutoAccept:verifiableIdentity:senderIsMe:contactIdentifier:senderBundl eID:senderComputerName:senderEmail:senderEmailHash:senderCompositeName:senderFirstName:senderLastName:senderI D:senderIcon:smallPreviewImage:previewImage:itemsDescription:itemsDescriptionAdvanced:items:rawFiles:",  2,  v136 & 1,  v135 & 1,  v128 & 1,  v127 & 1,  v126,  v86,  v125,  v124,  v122,  v121,  v119,  v123,  v120,  v106,  v107,  v108,  v109,  v110,  0,  v111,  v112);

  uint64_t v97 = type metadata accessor for SFAirDropReceive.Transfer(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v97 - 8) + 8LL))(v133, v97);
  (*(void (**)(char *, uint64_t))(v131 + 8))(v134, v132);
  return v136;
}

void sub_10018BA38(uint64_t a1, const char *a2, uint64_t a3, const char *a4, char a5, uint64_t a6)
{
  char v11 = (const char **)(a6 + 16);
  v26[0] = 0LL;
  v26[1] = 0xE000000000000000LL;
  String.append(_:)(*(Swift::String *)&a1);
  v12._countAndFlagsBits = 47LL;
  v12._object = (void *)0xE100000000000000LL;
  String.append(_:)(v12);
  v27[0] = a3;
  v27[1] = a4;
  DefaultStringInterpolation.appendInterpolation<A>(_:)( v27,  &type metadata for String,  &protocol witness table for String);
  swift_beginAccess(v11, v26, 32LL, 0LL);
  uint64_t v13 = *(void *)(a6 + 16);
  if (*(void *)(v13 + 16) && (uint64_t v14 = sub_1003AD53C(0LL, 0xE000000000000000LL), (v15 & 1) != 0))
  {
    char v16 = *(void **)(*(void *)(v13 + 56) + 8 * v14);
    swift_endAccess(v26);
    id v17 = v16;
    objc_msgSend(v17, "incrementCount", swift_bridgeObjectRelease((const char *)0xE000000000000000).n128_f64[0]);
  }

  else
  {
    swift_endAccess(v26);
    *(void *)&double v18 = swift_bridgeObjectRetain(a4).n128_u64[0];
    swift_bridgeObjectRetain(a2, v18);
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    if (a4)
    {
      NSString v20 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(a4);
    }

    else
    {
      NSString v20 = 0LL;
    }

    id v21 = [objc_allocWithZone(SFAirDropTransferItem) initWithType:v19 subtype:v20 isFile:a5 & 1];

    swift_beginAccess(v11, v26, 33LL, 0LL);
    if (v21)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v11);
      v27[0] = *v11;
      *char v11 = (const char *)0x8000000000000000LL;
      sub_1003B26C8((uint64_t)v21, 0LL, (const char *)0xE000000000000000LL, isUniquelyReferenced_nonNull_native);
      uint64_t v23 = *v11;
      *char v11 = (const char *)v27[0];
      *(void *)&double v24 = swift_bridgeObjectRelease((const char *)0xE000000000000000LL).n128_u64[0];
      swift_bridgeObjectRelease(v23, v24);
    }

    else
    {
      uint64_t v25 = (void *)sub_1001C9358(0LL, 0xE000000000000000LL);
      swift_bridgeObjectRelease((const char *)0xE000000000000000LL);
    }

    swift_endAccess(v26);
  }

char *sub_10018BC54(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100183098(&qword_100645398);
      char v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      *((void *)v11 + 2) = v8;
      *((void *)v11 + 3) = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 32;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      char v11 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[16 * v8 + 32]) {
          memmove(v14, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0LL;
        goto LABEL_24;
      }
    }

    sub_10018F934(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_10018BD60(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10018BEA8( a1,  a2,  a3,  a4,  &qword_100645248,  (uint64_t (*)(void))&type metadata accessor for URL);
}

void *sub_10018BD74(void *a1, int64_t a2, char a3, uint64_t a4)
{
  return sub_10018CA30(a1, a2, a3, a4, &qword_100645230, (uint64_t *)&unk_100645190);
}

char *sub_10018BD88(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100183098(&qword_100645210);
      char v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      *((void *)v11 + 2) = v8;
      *((void *)v11 + 3) = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 32;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      char v11 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[16 * v8 + 32]) {
          memmove(v14, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0LL;
        goto LABEL_24;
      }
    }

    sub_100190CE4(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_10018BE94(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10018BEA8( a1,  a2,  a3,  a4,  &qword_1006451D0,  (uint64_t (*)(void))&type metadata accessor for SFAirDrop.NearbySharingAssertion);
}

uint64_t sub_10018BEA8( char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v10 = a2;
  }

  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    double v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v13 = sub_100183098(a5);
  uint64_t v14 = *(void *)(a6(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  double v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  size_t v19 = j__malloc_size(v18);
  if (!v15) {
    goto LABEL_29;
  }
  if (v19 - v17 == 0x8000000000000000LL && v15 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  uint64_t v21 = a6(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    unint64_t v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(void *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }

    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23);
    }

    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_1001910F8(0LL, v11, v24, a4, a6);
  }

  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

char *sub_10018C0B4(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_10018C0C0(a1, a2, a3, a4, &qword_1006451F0);
}

char *sub_10018C0C0(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v8 = a2;
    goto LABEL_8;
  }

  unint64_t v7 = *((void *)a4 + 3);
  int64_t v8 = v7 >> 1;
  if (v8 + 0x4000000000000000LL >= 0)
  {
    int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    int64_t v9 = *((void *)a4 + 2);
    if (v8 <= v9) {
      int64_t v10 = *((void *)a4 + 2);
    }
    else {
      int64_t v10 = v8;
    }
    if (v10)
    {
      uint64_t v11 = sub_100183098(a5);
      uint64_t v12 = (char *)swift_allocObject(v11, v10 + 32, 7LL);
      size_t v13 = j__malloc_size(v12);
      *((void *)v12 + 2) = v9;
      *((void *)v12 + 3) = 2 * v13 - 64;
      uint64_t v14 = v12 + 32;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v12 != a4 || v14 >= &a4[v9 + 32]) {
          memmove(v14, a4 + 32, v9);
        }
        *((void *)a4 + 2) = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v12 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v14 = (char *)&_swiftEmptyArrayStorage + 32;
    }

    sub_10018FD1C(0LL, v9, v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v12;
  }

  __break(1u);
  return result;
}

char *sub_10018C1B4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100183098(&qword_100645220);
      uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      *((void *)v11 + 2) = v8;
      *((void *)v11 + 3) = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 32;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[16 * v8 + 32]) {
          memmove(v14, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0LL;
        goto LABEL_24;
      }
    }

    sub_100190DF0(0LL, v8, v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_10018C2C0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10018BEA8( a1,  a2,  a3,  a4,  &qword_1006452A8,  (uint64_t (*)(void))&type metadata accessor for URLComponents);
}

uint64_t sub_10018C2D4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10018BEA8( a1,  a2,  a3,  a4,  &qword_1006453E8,  (uint64_t (*)(void))&type metadata accessor for SFSandboxTokenURLPair);
}

uint64_t sub_10018C2E8(char a1, int64_t a2, char a3, unint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100183098(&qword_1006451E0);
  uint64_t v11 = *(void *)(sub_100183098(&qword_1006451E8) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t v16 = j__malloc_size(v15);
  if (!v12) {
    goto LABEL_29;
  }
  if (v16 - v14 == 0x8000000000000000LL && v12 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  uint64_t v18 = sub_100183098(&qword_1006451E8);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    unint64_t v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(void *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }

    else if (v15 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }

    *(void *)(a4 + 16) = 0LL;
  }

  else
  {
    sub_100190ED8(0LL, v8, v21, a4);
  }

  swift_bridgeObjectRelease((const char *)a4);
  return (uint64_t)v15;
}

void *sub_10018C4F8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  int64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    int64_t v8 = a4[2];
    if (v7 <= v8) {
      int64_t v9 = a4[2];
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100183098(&qword_100645208);
      uint64_t v11 = (void *)swift_allocObject(v10, v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * v12 - 64;
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_10018FD1C(0LL, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_10018C5F0(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10018C618(a1, a2, a3, a4, &qword_100645270, &qword_100645278);
}

void *sub_10018C604(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10018C618(a1, a2, a3, a4, &qword_100645280, &qword_100645288);
}

void *sub_10018C618(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }

  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if (v10 + 0x4000000000000000LL >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = sub_100183098(a5);
      uint64_t v14 = (void *)swift_allocObject(v13, 40 * v12 + 32, 7LL);
      size_t v15 = j__malloc_size(v14);
      v14[2] = v11;
      v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
      size_t v16 = v14 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v14 != a4 || v16 >= &a4[5 * v11 + 4]) {
          memmove(v16, a4 + 4, 40 * v11);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v14 = _swiftEmptyArrayStorage;
      size_t v16 = &_swiftEmptyArrayStorage[4];
    }

    sub_100191304(0LL, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v14;
  }

  __break(1u);
  return result;
}

uint64_t sub_10018C744(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10018BEA8( a1,  a2,  a3,  a4,  &qword_1006452D0,  (uint64_t (*)(void))&type metadata accessor for Date);
}

void *sub_10018C758(void *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = *(void *)(a4 + 24);
  int64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    int64_t v8 = *(void *)(a4 + 16);
    if (v7 <= v8) {
      int64_t v9 = *(void *)(a4 + 16);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100183098((uint64_t *)&unk_100645250);
      uint64_t v11 = (void *)swift_allocObject(v10, v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * v12 - 64;
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        *(void *)(a4 + 16) = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_10018FD1C(0LL, v8, (char *)v13, a4);
LABEL_22:
    swift_bridgeObjectRelease((const char *)a4);
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_10018C850(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10018BEA8( a1,  a2,  a3,  a4,  &qword_100645228,  (uint64_t (*)(void))&type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo);
}

char *sub_10018C864(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_10018C0C0(a1, a2, a3, a4, &qword_1006453D0);
}

void *sub_10018C870(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10018C618(a1, a2, a3, a4, (uint64_t *)&unk_1006452C0, (uint64_t *)&unk_10064B7A0);
}

void *sub_10018C884(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10018C618(a1, a2, a3, a4, (uint64_t *)&unk_100645260, (uint64_t *)&unk_1006540D0);
}

void *sub_10018C898(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10018C618(a1, a2, a3, a4, (uint64_t *)&unk_100645290, (uint64_t *)&unk_10064D7F0);
}

void *sub_10018C8AC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10018C618(a1, a2, a3, a4, &qword_1006452A0, &qword_10064D800);
}

uint64_t sub_10018C8C0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10018BEA8(a1, a2, a3, a4, &qword_100645388, _s14VolumeMetadataVMa);
}

uint64_t sub_10018C8D4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10018BEA8(a1, a2, a3, a4, &qword_1006453C0, type metadata accessor for SDTempPairingEndpoint);
}

void *sub_10018C8E8(void *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = *(void *)(a4 + 24);
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = *(void *)(a4 + 16);
    if (v7 <= v8) {
      uint64_t v9 = *(void *)(a4 + 16);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100183098(&qword_1006508B0);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        *(void *)(a4 + 16) = 0LL;
        goto LABEL_24;
      }
    }

    sub_10018FE00(0LL, v8, (unint64_t)v14, a4);
LABEL_24:
    swift_bridgeObjectRelease((const char *)a4);
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_10018C9F4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10018BEA8( a1,  a2,  a3,  a4,  &qword_1006453A8,  type metadata accessor for SDAirDropService.TransferPresenterClient);
}

uint64_t sub_10018CA08(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10018BEA8(a1, a2, a3, a4, &qword_100645390, type metadata accessor for SDAirDropDiscoveredEndpoint);
}

void *sub_10018CA1C(void *a1, int64_t a2, char a3, uint64_t a4)
{
  return sub_10018CA30(a1, a2, a3, a4, &qword_100645338, &qword_100645340);
}

void *sub_10018CA30(void *result, int64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }

  unint64_t v9 = *(void *)(a4 + 24);
  uint64_t v10 = v9 >> 1;
  if (v10 + 0x4000000000000000LL >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v11 = *(void *)(a4 + 16);
    if (v10 <= v11) {
      uint64_t v12 = *(void *)(a4 + 16);
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = sub_100183098(a5);
      uint64_t v14 = (void *)swift_allocObject(v13, 8 * v12 + 32, 7LL);
      int64_t v15 = j__malloc_size(v14);
      uint64_t v16 = v15 - 32;
      if (v15 < 32) {
        uint64_t v16 = v15 - 25;
      }
      v14[2] = v11;
      v14[3] = 2 * (v16 >> 3);
      uint64_t v17 = v14 + 4;
      if ((v8 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v14 = _swiftEmptyArrayStorage;
      uint64_t v17 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        *(void *)(a4 + 16) = 0LL;
        goto LABEL_24;
      }
    }

    sub_100190FF4(0LL, v11, (unint64_t)v17, a4, a6);
LABEL_24:
    swift_bridgeObjectRelease((const char *)a4);
    return v14;
  }

  __break(1u);
  return result;
}

void *sub_10018CB48(void *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = *(void *)(a4 + 24);
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = *(void *)(a4 + 16);
    if (v7 <= v8) {
      uint64_t v9 = *(void *)(a4 + 16);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100183098(&qword_100645310);
      uint64_t v11 = (void *)swift_allocObject(v10, 72 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 72);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        *(void *)(a4 + 16) = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_100191210(0LL, v8, (unint64_t)v13, a4);
LABEL_22:
    swift_bridgeObjectRelease((const char *)a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_10018CC6C(void *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = *(void *)(a4 + 24);
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = *(void *)(a4 + 16);
    if (v7 <= v8) {
      uint64_t v9 = *(void *)(a4 + 16);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_100183098(&qword_100645358);
      uint64_t v11 = (void *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 1;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        *(void *)(a4 + 16) = 0LL;
        goto LABEL_24;
      }
    }

    sub_10018FEF0(0LL, v8, (unint64_t)v14, a4);
LABEL_24:
    swift_bridgeObjectRelease((const char *)a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_10018CD78(void *a1, int64_t a2, char a3, uint64_t a4)
{
  return sub_10018CA30(a1, a2, a3, a4, &qword_100645378, &qword_100645380);
}

void *sub_10018CD8C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10018C618(a1, a2, a3, a4, &qword_1006452D8, &qword_1006452E0);
}

void *sub_10018CDA0(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10018C618(a1, a2, a3, a4, (uint64_t *)&unk_1006452B0, (uint64_t *)&unk_10064D7E0);
}

uint64_t sub_10018CDB4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_10018CE84(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100187058((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100187058((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  sub_10018709C(v12);
  return v7;
}

uint64_t sub_10018CE84(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

uint64_t sub_10018D03C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_1003A737C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_10018D0D0(0, *(void *)(v2 + 16) + 1LL, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_10018D0D0(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_10018D0D0(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100183098(&qword_1006451F0);
    uint64_t v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  int v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }

void *sub_10018D21C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100183098(&qword_100645248);
  uint64_t v4 = *(void *)(type metadata accessor for URL(0LL) - 8);
  uint64_t v5 = *(void *)(v4 + 72);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 32) & ~v6;
  int64_t v8 = (void *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  uint64_t result = (void *)j__malloc_size(v8);
  if (v5)
  {
    if ((void *)((char *)result - v7) != (void *)0x8000000000000000LL || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      swift_bridgeObjectRetain((const char *)a1);
      uint64_t v11 = sub_10028BBC0(&v12, (uint64_t)v8 + v7, v1, a1);
      sub_100187094(v12);
      if (v11 == v1) {
        return v8;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void *sub_10018D314(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100183098(&qword_1006453B8);
  uint64_t v4 = *(void *)(sub_100183098(&qword_1006453B0) - 8);
  uint64_t v5 = *(void *)(v4 + 72);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 32) & ~v6;
  int64_t v8 = (void *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  uint64_t result = (void *)j__malloc_size(v8);
  if (v5)
  {
    if ((void *)((char *)result - v7) != (void *)0x8000000000000000LL || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      uint64_t v11 = *(unsigned __int8 *)(*(void *)(sub_100183098(&qword_1006453B0) - 8) + 80LL);
      sub_10028BF10(&v15, (uint64_t)v8 + ((v11 + 32) & ~v11), v1, a1);
      uint64_t v13 = v12;
      uint64_t v14 = v15;
      swift_bridgeObjectRetain((const char *)a1);
      sub_100187094(v14);
      if (v13 == v1) {
        return v8;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void *sub_10018D44C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100183098(&qword_100645390);
  uint64_t v4 = *(void *)(type metadata accessor for SDAirDropDiscoveredEndpoint(0LL) - 8);
  uint64_t v5 = *(void *)(v4 + 72);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 32) & ~v6;
  int64_t v8 = (void *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  uint64_t result = (void *)j__malloc_size(v8);
  if (v5)
  {
    if ((void *)((char *)result - v7) != (void *)0x8000000000000000LL || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      uint64_t v11 = sub_10028C21C(&v13, (uint64_t)v8 + v7, v1, a1);
      uint64_t v12 = v13;
      swift_bridgeObjectRetain((const char *)a1);
      sub_100187094(v12);
      if (v11 == v1) {
        return v8;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void *sub_10018D564(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_100183098(&qword_100645398);
  uint64_t v4 = (void *)swift_allocObject(v3, 16 * v1 + 32, 7LL);
  int64_t v5 = j__malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 17;
  }
  _DWORD v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  uint64_t v7 = sub_10028C4A4((uint64_t)&v10, v4 + 4, v1, a1);
  uint64_t v8 = v10;
  swift_bridgeObjectRetain((const char *)a1);
  sub_100187094(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

void *sub_10018D648(void *result, uint64_t a2)
{
  uint64_t v2 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v3 = v2 + 1;
  if (__OFADD__(v2, 1LL))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (v2 == -1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v5 = (uint64_t)result;
  if (v3 <= 0)
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v6 = sub_100183098(&qword_100654CC0);
    uint64_t v7 = (void *)swift_allocObject(v6, 8 * v3 + 32, 7LL);
    int64_t v8 = j__malloc_size(v7);
    uint64_t v9 = v8 - 32;
    if (v8 < 32) {
      uint64_t v9 = v8 - 25;
    }
    v7[2] = v3;
    v7[3] = 2 * (v9 >> 3);
  }

  uint64_t result = (void *)sub_10018F8A8((uint64_t)&v10, (uint64_t)(v7 + 4), v3, v5, a2);
  if (result == (void *)v3) {
    return v7;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_10018D718(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10018EB30( a1,  a2,  a3,  (void *)*v3,  &qword_100645248,  (uint64_t (*)(void))&type metadata accessor for URL);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10018D744(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10018EB30( a1,  a2,  a3,  (void *)*v3,  &qword_100645228,  (uint64_t (*)(void))&type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10018D770(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10018DC54(a1, a2, a3, (void *)*v3, &qword_100645230, (uint64_t *)&unk_100645190);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10018D79C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10018DAE8(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10018D7B8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10018DC54(a1, a2, a3, (void *)*v3, &qword_100645238, &qword_100645240);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10018D7E4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10018DDE0(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10018D800(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10018EB30( a1,  a2,  a3,  (void *)*v3,  &qword_1006453E8,  (uint64_t (*)(void))&type metadata accessor for SFSandboxTokenURLPair);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10018D82C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10018DF84(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10018D848(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10018E0EC(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10018D864(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10018F704(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_1006452C0, (uint64_t *)&unk_10064B7A0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10018D890(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10018E254(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10018D8AC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10018F704(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_100645260, (uint64_t *)&unk_1006540D0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10018D8D8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10018E3B0(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10018D8F4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10018EB30( a1,  a2,  a3,  (void *)*v3,  &qword_1006453F0,  (uint64_t (*)(void))&type metadata accessor for SFSecurityScopedURL);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10018D920(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10018EB30(a1, a2, a3, (void *)*v3, &qword_1006453C0, type metadata accessor for SDTempPairingEndpoint);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10018D94C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10018E52C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10018D968(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10018E87C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10018D984(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10018E9D8(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10018D9A0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10018EB30( a1,  a2,  a3,  (void *)*v3,  &qword_100645390,  type metadata accessor for SDAirDropDiscoveredEndpoint);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10018D9CC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10018ED10(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10018D9E8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10018EEAC(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10018DA04(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10018F028(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10018DA20(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10018F184(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10018DA3C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10018F2EC(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10018DA58(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10018F444(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10018DA74(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10018F59C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10018DA90(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10018F704(a1, a2, a3, (void *)*v3, &qword_1006452D8, &qword_1006452E0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10018DABC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10018F704(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_1006452B0, (uint64_t *)&unk_10064D7E0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10018DAE8(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100183098(&qword_1006451D8);
    uint64_t v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8]) {
      memmove(v14, v15, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10018DC54(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v10 = a2;
  }

  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    uint64_t v13 = sub_100183098(a5);
    uint64_t v14 = (void *)swift_allocObject(v13, 8 * v12 + 32, 7LL);
    int64_t v15 = j__malloc_size(v14);
    uint64_t v16 = v15 - 32;
    if (v15 < 32) {
      uint64_t v16 = v15 - 25;
    }
    v14[2] = v11;
    v14[3] = 2 * (v16 >> 3);
  }

  else
  {
    uint64_t v14 = _swiftEmptyArrayStorage;
  }

  unint64_t v17 = (unint64_t)(v14 + 4);
  unint64_t v18 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v17 >= v18 + 8 * v11) {
      memmove(v14 + 4, a4 + 4, 8 * v11);
    }
    a4[2] = 0LL;
    goto LABEL_30;
  }

  if (v18 >= v17 + 8 * v11 || v17 >= v18 + 8 * v11)
  {
    sub_100183098(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v14;
  }

uint64_t sub_10018DDE0(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100183098(&qword_1006451F8);
    uint64_t v11 = (void *)swift_allocObject(v10, 48 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  unint64_t v13 = (unint64_t)(v11 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 48 * v8) {
      memmove(v11 + 4, a4 + 4, 48 * v8);
    }
    a4[2] = 0LL;
    goto LABEL_28;
  }

  if (v14 >= v13 + 48 * v8 || v13 >= v14 + 48 * v8)
  {
    sub_100183098(&qword_100645200);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10018DF84(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100183098(&qword_100645398);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  int64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10018E0EC(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100183098(&qword_1006453D8);
    uint64_t v11 = (char *)swift_allocObject(v10, (v9 << 6) | 0x20, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 + 31;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 6);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  int64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[64 * v8]) {
      memmove(v14, v15, v8 << 6);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[64 * v8] || v14 >= &v15[64 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10018E254(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100183098((uint64_t *)&unk_1006452F0);
    uint64_t v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  int64_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8]) {
      memmove(v14, v15, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10018E3B0(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100183098(&qword_1006453F8);
    uint64_t v11 = (char *)swift_allocObject(v10, 88 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 88);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  size_t v15 = 88 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10018E52C(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100183098(&qword_1006453C8);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  unint64_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10018E694(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    size_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_100183098(&qword_1006453B8);
  uint64_t v11 = *(void *)(sub_100183098(&qword_1006453B0) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  size_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (v16 - v14 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_34;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  uint64_t v18 = sub_100183098(&qword_1006453B0);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (char *)v15 + v20;
  unint64_t v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }

    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v21);
    }

    a4[2] = 0LL;
    goto LABEL_32;
  }

  uint64_t v23 = *(void *)(v19 + 72) * v8;
  unint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }

uint64_t sub_10018E87C(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100183098(&qword_100645318);
    uint64_t v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8]) {
      memmove(v14, v15, 8 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10018E9D8(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100183098(&qword_100645320);
    uint64_t v11 = (char *)swift_allocObject(v10, 2 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    int64_t v13 = v12 - 32;
    if (v12 < 32) {
      int64_t v13 = v12 - 31;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = v13 & 0xFFFFFFFFFFFFFFFELL;
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[2 * v8]) {
      memmove(v14, v15, 2 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[2 * v8] || v14 >= &v15[2 * v8])
  {
    memcpy(v14, v15, 2 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10018EB30( char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }

      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v10 = a2;
  }

  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v13 = sub_100183098(a5);
  uint64_t v14 = *(void *)(a6(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  size_t v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (v19 - v17 == 0x8000000000000000LL && v15 == -1) {
    goto LABEL_34;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  uint64_t v21 = a6(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v24 = (char *)v18 + v23;
  unint64_t v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(void *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }

    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }

    a4[2] = 0LL;
    goto LABEL_32;
  }

  uint64_t v26 = *(void *)(v22 + 72) * v11;
  uint64_t v27 = &v24[v26];
  unint64_t v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }

uint64_t sub_10018ED10(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100183098(&qword_100645328);
    uint64_t v11 = (void *)swift_allocObject(v10, 56 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 56);
  }

  else
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 4;
  uint64_t v14 = a4 + 4;
  size_t v15 = 7 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15]) {
      memmove(v11 + 4, a4 + 4, v15 * 8);
    }
    a4[2] = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    sub_100183098(&qword_100645330);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10018EEAC(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100183098(&qword_100645310);
    uint64_t v11 = (char *)swift_allocObject(v10, 72 * v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 72);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  size_t v15 = 72 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10018F028(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100183098((uint64_t *)&unk_100645360);
    uint64_t v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8]) {
      memmove(v14, v15, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    memcpy(v14, v15, 32 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10018F184(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100183098(&qword_100645358);
    uint64_t v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8]) {
      memmove(v14, v15, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10018F2EC(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100183098(&qword_100645350);
    uint64_t v11 = (char *)swift_allocObject(v10, 4 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 29;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 2);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  size_t v16 = 4 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16]) {
      memmove(v14, v15, v16);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    memcpy(v14, v15, v16);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10018F444(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100183098(&qword_100645348);
    uint64_t v11 = (char *)swift_allocObject(v10, 2 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    int64_t v13 = v12 - 32;
    if (v12 < 32) {
      int64_t v13 = v12 - 31;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = v13 & 0xFFFFFFFFFFFFFFFELL;
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[2 * v8]) {
      memmove(v14, v15, 2 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[2 * v8] || v14 >= &v15[2 * v8])
  {
    memcpy(v14, v15, 2 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10018F59C(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100183098(&qword_1006508B0);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

uint64_t sub_10018F704(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v10 = a2;
  }

  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    uint64_t v13 = sub_100183098(a5);
    uint64_t v14 = (void *)swift_allocObject(v13, 40 * v12 + 32, 7LL);
    size_t v15 = j__malloc_size(v14);
    v14[2] = v11;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
  }

  else
  {
    uint64_t v14 = _swiftEmptyArrayStorage;
  }

  unint64_t v16 = (unint64_t)(v14 + 4);
  unint64_t v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v16 >= v17 + 40 * v11) {
      memmove(v14 + 4, a4 + 4, 40 * v11);
    }
    a4[2] = 0LL;
    goto LABEL_28;
  }

  if (v17 >= v16 + 40 * v11 || v16 >= v17 + 40 * v11)
  {
    sub_100183098(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v14;
  }

uint64_t sub_10018F8A8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2)
  {
    BOOL v7 = 0;
    a3 = 0LL;
    goto LABEL_14;
  }

  if (!a3)
  {
    BOOL v7 = 0;
LABEL_14:
    uint64_t v8 = a4;
LABEL_15:
    *(void *)uint64_t result = a4;
    *(void *)(result + _Block_object_dispose(va, 8) = a5;
    *(void *)(result + 16) = v8;
    *(_BYTE *)(result + 24) = v7;
    return a3;
  }

  if (a3 < 0) {
    goto LABEL_17;
  }
  uint64_t v5 = 0LL;
  uint64_t v6 = a4;
  while (1)
  {
    BOOL v7 = v6 == a5;
    if (v6 != a5) {
      break;
    }
    uint64_t v8 = 0LL;
LABEL_8:
    *(void *)(a2 + 8 * v5) = v6;
    if (a3 - 1 == v5) {
      goto LABEL_15;
    }
    ++v5;
    BOOL v9 = v6 == a5;
    uint64_t v6 = v8;
    if (v9)
    {
      BOOL v7 = 1;
      a3 = v5;
      goto LABEL_15;
    }
  }

  uint64_t v8 = v6 + 1;
  if (!__OFADD__(v6, 1LL)) {
    goto LABEL_8;
  }
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_10018F934(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10018FA24(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t v9 = sub_100183098((uint64_t *)&unk_100645130);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = sub_100183F14( &qword_100645418,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v19 = Set.init(minimumCapacity:)(v12, v2, v13);
  if (v12)
  {
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v18 = *(void *)(v3 + 72);
    size_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v15(v11, v14, v2);
      unint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v16(v11, 0LL, 1LL, v2);
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v11, v2);
      sub_1003B5054((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v14 += v18;
      if (!--v12) {
        goto LABEL_7;
      }
    }
  }

  else
  {
    unint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v16(v11, 1LL, 1LL, v2);
  }

  return v19;
}

uint64_t sub_10018FBF4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v11 = sub_100183F14( &qword_100645420,  v10,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.AskRequest.ItemInfo);
  uint64_t result = Set.init(minimumCapacity:)(v9, v2, v11);
  uint64_t v17 = result;
  if (v9)
  {
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v14 = *(void *)(v3 + 72);
    size_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v15(v6, v13, v2);
      sub_1003B4DF8((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v13 += v14;
      --v9;
    }

    while (v9);
    return v17;
  }

  return result;
}

char *sub_10018FD1C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if ((v4 & 0x8000000000000000LL) != 0)
    {
      uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    uint64_t v5 = (char *)(a4 + a1 + 32);
    unint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10018FE00(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10018FEF0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10018FFE0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = sub_10019148C();
  uint64_t result = Set.init(minimumCapacity:)(v2, &type metadata for SDHashStoreContact, v3);
  uint64_t v13 = result;
  if (v2)
  {
    unint64_t v5 = (const char **)(a1 + 56);
    do
    {
      uint64_t v6 = (uint64_t)*(v5 - 3);
      uint64_t v7 = *(v5 - 2);
      uint64_t v8 = (uint64_t)*(v5 - 1);
      uint64_t v9 = *v5;
      *(void *)&double v10 = swift_bridgeObjectRetain(v7).n128_u64[0];
      swift_bridgeObjectRetain(v9, v10);
      sub_1003B6D58(v12, v6, v7, v8, v9);
      *(void *)&double v11 = swift_bridgeObjectRelease((const char *)v12[1]).n128_u64[0];
      swift_bridgeObjectRelease((const char *)v12[3], v11);
      v5 += 4;
      --v2;
    }

    while (v2);
    return v13;
  }

  return result;
}

uint64_t sub_100190098(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for SFAutoUnlockDeviceType(0LL);
  uint64_t v4 = v3;
  uint64_t v5 = sub_100183F14( &qword_1006452E8,  (uint64_t (*)(uint64_t))type metadata accessor for SFAutoUnlockDeviceType,  (uint64_t)&unk_1004CC114);
  uint64_t result = Set.init(minimumCapacity:)(v2, v4, v5);
  uint64_t v10 = result;
  if (v2)
  {
    uint64_t v7 = (Swift::UInt *)(a1 + 32);
    do
    {
      Swift::UInt v8 = *v7++;
      sub_1003B6560(&v9, v8);
      --v2;
    }

    while (v2);
    return v10;
  }

  return result;
}

uint64_t sub_100190128(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SDAirDropDiscoveredEndpoint(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  Swift::UInt v8 = (char *)&v15 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v11 = sub_100183F14(&qword_1006453A0, v10, (uint64_t)&unk_1004CF398);
  uint64_t result = Set.init(minimumCapacity:)(v9, v2, v11);
  uint64_t v16 = result;
  if (v9)
  {
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v14 = *(void *)(v3 + 72);
    do
    {
      sub_10019140C(v13, (uint64_t)v6);
      sub_1003B52D4((uint64_t)v8, (uint64_t)v6);
      sub_100191450((uint64_t)v8);
      v13 += v14;
      --v9;
    }

    while (v9);
    return v16;
  }

  return result;
}

uint64_t sub_100190230(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (const char **)(a1 + 40);
    do
    {
      uint64_t v5 = (uint64_t)*(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_1003B572C(v7, v5, (uint64_t)v6);
      swift_bridgeObjectRelease((const char *)v7[1]);
      v4 += 2;
      --v2;
    }

    while (v2);
    return v8;
  }

  return result;
}

void sub_1001902C4(uint64_t a1)
{
}

void sub_1001902E8(uint64_t a1)
{
}

void sub_10019030C( uint64_t a1, unint64_t *a2, void *a3, unint64_t *a4, void (*a5)(id *, uint64_t))
{
  unint64_t v10 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v20 = a1;
    }
    else {
      uint64_t v20 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain((const char *)a1);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease((const char *)a1);
  }

  else
  {
    uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v12 = sub_100183168(0LL, a2, a3);
  uint64_t v13 = sub_100190CA4(a4, a2, a3);
  v21[1] = (id)Set.init(minimumCapacity:)(v11, v12, v13);
  if (!v10)
  {
    uint64_t v14 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v14) {
      return;
    }
    goto LABEL_10;
  }

  if (a1 < 0) {
    uint64_t v15 = a1;
  }
  else {
    uint64_t v15 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain((const char *)a1);
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v15);
  swift_bridgeObjectRelease((const char *)a1);
  if (v14)
  {
LABEL_10:
    if (v14 < 1)
    {
      __break(1u);
    }

    else if ((a1 & 0xC000000000000001LL) != 0)
    {
      for (uint64_t i = 0LL; i != v14; ++i)
      {
        uint64_t v17 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        a5(v21, v17);
      }
    }

    else
    {
      uint64_t v18 = (void **)(a1 + 32);
      do
      {
        uint64_t v19 = *v18++;
        a5(v21, (uint64_t)v19);

        --v14;
      }

      while (v14);
    }
  }

void sub_100190488(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v108 = (char *)&v102 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v107 = (char *)&v102 - v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v102 - v10;
  uint64_t v12 = sub_100183098((uint64_t *)&unk_100645130);
  uint64_t v13 = __chkstk_darwin(v12);
  NSString v110 = (char *)&v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  v109 = (char *)&v102 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v112 = (uint64_t)&v102 - v18;
  __chkstk_darwin(v17);
  Class v111 = (char *)&v102 - v19;
  uint64_t v20 = swift_allocObject(&unk_1005D2970, 24LL, 7LL);
  uint64_t v117 = v20;
  *(void *)(v20 + 16) = sub_100391530((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v105 = v20 + 16;
  uint64_t v21 = *(void *)(a1 + 16);
  uint64_t v113 = v5;
  if (v21)
  {
    uint64_t v22 = v11;
    uint64_t v23 = *(void *)(type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo(0LL) - 8);
    uint64_t v24 = a1 + ((*(unsigned __int8 *)(v23 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
    uint64_t v25 = *(void *)(v23 + 72);
    swift_bridgeObjectRetain((const char *)a1);
    do
    {
      uint64_t v27 = SFAirDropReceive.AskRequest.ItemInfo.fileType.getter(v26);
      uint64_t v29 = v28;
      uint64_t v30 = SFAirDropReceive.AskRequest.ItemInfo.fileSubType.getter(v27);
      double v32 = v31;
      sub_10018BA38(v27, v29, v30, v31, 1, v117);
      *(void *)&double v33 = swift_bridgeObjectRelease(v29).n128_u64[0];
      *(void *)&double v34 = swift_bridgeObjectRelease(v32, v33).n128_u64[0];
      v24 += v25;
      --v21;
    }

    while (v21);
    swift_bridgeObjectRelease((const char *)a1, v34);
    uint64_t v5 = v113;
    uint64_t v11 = v22;
  }

  uint64_t v35 = *(void *)(a2 + 16);
  NSString v106 = (const char *)a2;
  if (v35)
  {
    uint64_t v36 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v114 = *(void *)(v5 + 72);
    id v116 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    __n128 v37 = swift_bridgeObjectRetain((const char *)a2);
    v37.n128_u64[0] = 136315138LL;
    __n128 v104 = v37;
    double v103 = (char *)&type metadata for Any + 8;
    uint64_t v38 = v111;
    id v115 = v11;
    while (1)
    {
      v116(v38, v36, v4);
      unint64_t v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
      v40(v38, 0LL, 1LL, v4);
      uint64_t v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
      if (v41(v38, 1LL, v4) == 1) {
        goto LABEL_43;
      }
      unint64_t v42 = *(uint64_t (**)(char *, char *, uint64_t))(v5 + 32);
      uint64_t v43 = v42(v11, v38, v4);
      if ((URL.isFileURL.getter(v43) & 1) == 0) {
        break;
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
LABEL_8:
      v36 += v114;
      if (!--v35) {
        goto LABEL_42;
      }
    }

    unint64_t v44 = (void *)objc_opt_self(&OBJC_CLASS___LSApplicationWorkspace);
    id v45 = [v44 defaultWorkspace];
    if (!v45) {
      goto LABEL_45;
    }
    uint64_t v47 = v45;
    URL._bridgeToObjectiveC()(v46);
    __n128 v49 = v48;
    id v50 = [v47 applicationsAvailableForOpeningURL:v48];

    uint64_t v5 = v113;
    if (!v50) {
      goto LABEL_25;
    }
    uint64_t v52 = sub_100183168(0LL, &qword_100645410, &OBJC_CLASS___LSApplicationProxy_ptr);
    uint64_t v53 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v50, v52);

    if ((unint64_t)v53 >> 62)
    {
      if (v53 < 0) {
        uint64_t v61 = v53;
      }
      else {
        uint64_t v61 = v53 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain((const char *)v53);
      uint64_t v62 = _CocoaArrayWrapper.endIndex.getter(v61);
      swift_bridgeObjectRelease((const char *)v53);
      if (v62)
      {
LABEL_15:
        if ((v53 & 0xC000000000000001LL) != 0)
        {
          id v54 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v53);
        }

        else
        {
          if (!*(void *)((v53 & 0xFFFFFFFFFFFFF8LL) + 0x10))
          {
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
            return;
          }

          id v54 = *(id *)(v53 + 32);
        }

        uint64_t v55 = v54;
        id v56 = objc_msgSend(v54, "bundleIdentifier", swift_bridgeObjectRelease((const char *)v53).n128_f64[0]);

        if (v56)
        {
          uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
          unint64_t v59 = v58;

          sub_10018BA38(v57, v59, 0LL, 0LL, 0, v117);
          __n128 v60 = swift_bridgeObjectRelease(v59);
          uint64_t v11 = v115;
          (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v115, v4, v60);
LABEL_39:
          uint64_t v38 = v111;
          goto LABEL_8;
        }

uint64_t sub_100190CA4(unint64_t *a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = sub_100183168(255LL, a2, a3);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100190CE4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v6 = a4 + 16 * a1 + 32;
    unint64_t v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_100183098(&qword_100645218);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_100190DF0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    uint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    size_t v6 = 16 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100190ED8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v8 = *(void *)(sub_100183098(&qword_1006451E8) - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 72);
  unint64_t v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  uint64_t v12 = v10 * v4;
  unint64_t v13 = a3 + v12;
  unint64_t v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100190FF4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v5 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v7 = a4 + 8 * a1 + 32;
    unint64_t v8 = a3 + 8 * v5;
    if (v7 >= v8 || v7 + 8 * v5 <= a3)
    {
      sub_100183098(a5);
      swift_arrayInitWithCopy(a3);
      return v8;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1001910F8( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v9 = *(void *)(a5(0LL) - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 72);
  unint64_t v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  uint64_t v13 = v11 * v5;
  unint64_t v14 = a3 + v13;
  unint64_t v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100191210(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v5 = a4 + 72 * a1 + 32;
  unint64_t v6 = a3 + 72 * v4;
  if (v5 >= v6 || v5 + 72 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100191304(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v5 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v7 = a4 + 40 * a1 + 32;
  unint64_t v8 = a3 + 40 * v5;
  if (v7 >= v8 || v7 + 40 * v5 <= a3)
  {
    sub_100183098(a5);
    swift_arrayInitWithCopy(a3);
    return v8;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10019140C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SDAirDropDiscoveredEndpoint(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100191450(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SDAirDropDiscoveredEndpoint(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_10019148C()
{
  unint64_t result = qword_1006453E0;
  if (!qword_1006453E0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SDHashStoreContact,  &type metadata for SDHashStoreContact);
    atomic_store(result, (unint64_t *)&qword_1006453E0);
  }

  return result;
}

unint64_t sub_1001914D0()
{
  unint64_t result = qword_100645760;
  if (!qword_100645760)
  {
    uint64_t v1 = sub_100183124(&qword_100645400);
    sub_100183F14( (unint64_t *)&qword_100644D10,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1004CCE0C);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100645760);
  }

  return result;
}

uint64_t sub_10019154C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100191580()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001915A4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100183098(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001915E8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100186DFC(v0, qword_100645440);
  uint64_t v1 = sub_100186DE4(v0, (uint64_t)qword_100645440);
  if (qword_100643FD8 != -1) {
    swift_once(&qword_100643FD8, sub_10023A408);
  }
  uint64_t v2 = sub_100186DE4(v0, (uint64_t)qword_1006695F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

Swift::Int sub_100191678()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1001916BC()
{
}

Swift::Int sub_1001916E4()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t sub_100191724@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10019493C(*a1);
  *a2 = result;
  return result;
}

void sub_10019174C(void *a1@<X8>)
{
  *a1 = *v1;
}

id sub_100191758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v74 = a3;
  uint64_t v80 = a2;
  uint64_t v81 = a1;
  ObjectType = (objc_class *)swift_getObjectType(v3);
  uint64_t v5 = sub_100183098(&qword_100645510);
  uint64_t v76 = *(void *)(v5 - 8);
  uint64_t v77 = v5;
  __chkstk_darwin(v5);
  __n128 v75 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v88 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v84 = (char *)&v72 - v12;
  __chkstk_darwin(v11);
  uint64_t v91 = (char *)&v72 - v13;
  uint64_t v14 = sub_100183098((uint64_t *)&unk_100645130);
  uint64_t v15 = __chkstk_darwin(v14);
  Class v85 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v72 - v17;
  uint64_t v90 = (void *)type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v19 = *(v90 - 1);
  __chkstk_darwin(v90);
  uint64_t v89 = (char *)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for OS_dispatch_queue_serial.Attributes(0LL);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v72 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v4 + 32) = 0LL;
  *(_WORD *)(v4 + 40) = 0;
  *(void *)(v4 + 64) = 0LL;
  uint64_t v73 = v4 + 56;
  swift_unknownObjectWeakInit(v4 + 56, 0LL);
  os_log_type_t v87 = (void (*)(char *, uint64_t, uint64_t))sub_100183168( 0LL,  (unint64_t *)&qword_100645560,  &OBJC_CLASS___OS_dispatch_queue_serial_ptr);
  uint64_t v27 = swift_retain(v4);
  static DispatchQoS.userInitiated.getter(v27);
  v94[0] = (uint64_t)&_swiftEmptyArrayStorage;
  uint64_t v28 = sub_100183F14( (unint64_t *)&unk_1006456E0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue_serial.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue_serial.Attributes);
  uint64_t v29 = sub_100183098((uint64_t *)&unk_100645570);
  unint64_t v30 = sub_10019567C();
  dispatch thunk of SetAlgebra.init<A>(_:)(v94, v29, v30, v21, v28);
  char v31 = v89;
  (*(void (**)(char *, void, void *))(v19 + 104))( v89,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v90);
  uint64_t v32 = OS_dispatch_queue_serial.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000031LL,  0x8000000100503B80LL,  v26,  v23,  v31,  0LL);
  *(void *)(v4 + 72) = v32;
  uint64_t v33 = v81;
  *(void *)(v4 + 16) = v81;
  __n128 v79 = (void *)v4;
  *(void *)(v4 + 4_Block_object_dispose(va, 8) = 0x100000LL;
  id v34 = objc_allocWithZone((Class)&OBJC_CLASS___SDAirDropFileZipper);
  swift_bridgeObjectRetain(v33);
  id v72 = [v34 initWithQueue:v32 boundStreamSize:0x100000];
  uint64_t v35 = *(void *)(v33 + 16);
  if (v35)
  {
    unint64_t v82 = (*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v36 = v33 + v82;
    uint64_t v37 = *(void *)(v8 + 72);
    os_log_type_t v87 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    swift_bridgeObjectRetain(v33);
    uint64_t v89 = (char *)&_swiftEmptyArrayStorage;
    uint64_t v38 = (uint64_t)v85;
    double v86 = v18;
    uint64_t v83 = v8;
    while (1)
    {
      v87(v18, v36, v7);
      uint64_t v90 = *(void **)(v8 + 56);
      ((void (*)(char *, void, uint64_t, uint64_t))v90)(v18, 0LL, 1LL, v7);
      __n128 v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
      if (v39(v18, 1LL, v7) == 1) {
        break;
      }
      unint64_t v40 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v40(v91, v18, v7);
      URL.realPathURL()(v38);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v91, v7);
      if (v39((char *)v38, 1LL, v7) == 1)
      {
        sub_1001956C8(v38);
        uint64_t v18 = v86;
      }

      else
      {
        uint64_t v41 = v38;
        unint64_t v42 = v84;
        v40(v84, (char *)v41, v7);
        v40(v88, v42, v7);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v89);
        uint64_t v18 = v86;
        if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
          unint64_t v44 = (unint64_t)v89;
        }
        else {
          unint64_t v44 = sub_10018BD60(0, *((void *)v89 + 2) + 1LL, 1, (unint64_t)v89);
        }
        unint64_t v46 = *(void *)(v44 + 16);
        unint64_t v45 = *(void *)(v44 + 24);
        if (v46 >= v45 >> 1) {
          unint64_t v44 = sub_10018BD60(v45 > 1, v46 + 1, 1, v44);
        }
        unint64_t v47 = v82;
        uint64_t v8 = v83;
        *(void *)(v44 + 16) = v46 + 1;
        uint64_t v89 = (char *)v44;
        v40((char *)(v44 + v47 + v46 * v37), v88, v7);
        uint64_t v38 = (uint64_t)v85;
      }

      v36 += v37;
      if (!--v35) {
        goto LABEL_14;
      }
    }
  }

  else
  {
    uint64_t v90 = *(void **)(v8 + 56);
    swift_bridgeObjectRetain(v33);
    uint64_t v89 = (char *)&_swiftEmptyArrayStorage;
LABEL_14:
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v90)(v18, 1LL, 1LL, v7);
  }

  swift_bridgeObjectRelease_n(v81, 2LL);
  if (qword_100643EA0 != -1) {
    swift_once(&qword_100643EA0, sub_1001915E8);
  }
  uint64_t v48 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v48, (uint64_t)qword_100645440);
  uint64_t v49 = (uint64_t)v89;
  uint64_t v50 = swift_bridgeObjectRetain_n(v89, 2LL);
  double v51 = (os_log_s *)Logger.logObject.getter(v50);
  os_log_type_t v52 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v53 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v54 = swift_slowAlloc(32LL, -1LL);
    v94[0] = v54;
    *(_DWORD *)uint64_t v53 = 136315138;
    uint64_t v55 = swift_bridgeObjectRetain(v49);
    uint64_t v56 = Array.description.getter(v55, v7);
    unint64_t v58 = v57;
    swift_bridgeObjectRelease(v49);
    uint64_t v92 = sub_10018CDB4(v56, v58, v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v53 + 4, v53 + 12);
    swift_bridgeObjectRelease_n(v49, 2LL);
    swift_bridgeObjectRelease(v58);
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "Passing real URLS to zipper %s", v53, 0xCu);
    swift_arrayDestroy(v54, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1LL, -1LL);
    swift_slowDealloc(v53, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v49, 2LL);
  }

  unint64_t v59 = sub_1002DDFF4(v49);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v59);
  id v61 = v72;
  [v72 setSourceFiles:isa];

  uint64_t v62 = sub_10018FA24(v49);
  swift_bridgeObjectRelease(v49);
  Swift::Int v63 = sub_10019203C(v62);
  swift_bridgeObjectRelease(v62);
  Class v64 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v63);
  [v61 setSkipReadableCheckFiles:v64];

  [v61 setDisableAdaptiveCompressionForZipping:0];
  [v61 setShouldExtractMediaFromPhotosBundles:1];
  uint64_t v65 = v79;
  uint64_t v66 = v80;
  v79[3] = v61;
  v65[8] = v74;
  swift_unknownObjectWeakAssign(v73, v66);
  id v67 = v61;
  id v68 = v75;
  SFProgressContinuation.init(_:initialProgress:file:line:)( 0xD000000000000012LL,  0x8000000100503BC0LL,  v69,  0xD000000000000066LL,  0x8000000100503B10LL,  69LL,  (char *)&type metadata for () + 8,  &type metadata for Int);
  (*(void (**)(uint64_t, char *, uint64_t))(v76 + 32))( (uint64_t)v65 + OBJC_IVAR____TtC16DaemoniOSLibrary31SDAirDropSendCompressionAdapter_compressionStartedContinuation,  v68,  v77);
  swift_release(v65);
  v93.receiver = v65;
  v93.super_class = ObjectType;
  id v70 = objc_msgSendSuper2(&v93, "init");
  [v67 setDelegate:v70];

  swift_unknownObjectRelease(v66);
  return v70;
}

Swift::Int sub_10019203C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v34 - v7;
  uint64_t v37 = a1;
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    sub_100183098((uint64_t *)&unk_100645580);
    uint64_t v10 = (void *)static _SetStorage.allocate(capacity:)(v9);
  }

  else
  {
    uint64_t v10 = &_swiftEmptySetSingleton;
  }

  uint64_t v11 = *(void *)(v37 + 56);
  uint64_t v36 = v37 + 56;
  uint64_t v12 = -1LL << *(_BYTE *)(v37 + 32);
  if (-v12 < 64) {
    uint64_t v13 = ~(-1LL << -(char)v12);
  }
  else {
    uint64_t v13 = -1LL;
  }
  unint64_t v14 = v13 & v11;
  uint64_t v34 = -1LL << *(_BYTE *)(v37 + 32);
  int64_t v35 = (unint64_t)(63 - v12) >> 6;
  uint64_t v15 = (char *)(v10 + 7);
  swift_bridgeObjectRetain(v37);
  Swift::Int result = swift_retain(v10);
  int64_t v17 = 0LL;
  while (1)
  {
    if (v14)
    {
      unint64_t v21 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v22 = v21 | (v17 << 6);
      goto LABEL_28;
    }

    int64_t v23 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v23 >= v35) {
      goto LABEL_37;
    }
    unint64_t v24 = *(void *)(v36 + 8 * v23);
    int64_t v25 = v17 + 1;
    if (!v24)
    {
      int64_t v25 = v17 + 2;
      if (v17 + 2 >= v35) {
        goto LABEL_37;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v25);
      if (!v24)
      {
        int64_t v25 = v17 + 3;
        if (v17 + 3 >= v35) {
          goto LABEL_37;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          int64_t v25 = v17 + 4;
          if (v17 + 4 >= v35) {
            goto LABEL_37;
          }
          unint64_t v24 = *(void *)(v36 + 8 * v25);
          if (!v24) {
            break;
          }
        }
      }
    }

uint64_t sub_1001923C8()
{
  *(void *)(v1 + 16) = v0;
  uint64_t ObjectType = swift_getObjectType(v0);
  uint64_t v3 = sub_100183F14( &qword_100645518,  type metadata accessor for SDAirDropSendCompressionAdapter,  (uint64_t)&unk_1004CD3F8);
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v3);
  return swift_task_switch(sub_10019243C, v4, v5);
}

uint64_t sub_10019243C()
{
  if (qword_100643EA0 != -1) {
    swift_once(&qword_100643EA0, sub_1001915E8);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_100645440);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Stopping Send Compression Adapter", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 16);

  [*(id *)(v6 + 24) stop];
  uint64_t v7 = *(void **)(v6 + 32);
  if (v7)
  {
    id v8 = v7;
    if ([v8 streamStatus] != (id)6)
    {
      [v8 close];

      id v8 = *(id *)(v6 + 32);
      *(void *)(v6 + 32) = 0LL;
    }
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100192570()
{
  v1[4] = v0;
  uint64_t ObjectType = swift_getObjectType(v0);
  uint64_t v3 = sub_100183F14( &qword_100645518,  type metadata accessor for SDAirDropSendCompressionAdapter,  (uint64_t)&unk_1004CD3F8);
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v3);
  v1[5] = v4;
  v1[6] = v5;
  return swift_task_switch(sub_100192618, v4, v5);
}

uint64_t sub_100192618()
{
  uint64_t v1 = *(void *)(v0 + 32);
  if (!*(_BYTE *)(v1 + 41))
  {
    if (qword_100643EA0 != -1) {
      goto LABEL_48;
    }
    goto LABEL_8;
  }

  if ((*(_BYTE *)(v1 + 40) & 1) != 0)
  {
    if (qword_100643EA0 != -1) {
      swift_once(&qword_100643EA0, sub_1001915E8);
    }
    uint64_t v2 = type metadata accessor for Logger(0LL);
    uint64_t v3 = sub_100186DE4(v2, (uint64_t)qword_100645440);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v6 = 0;
      uint64_t v7 = "Adapter already sending compressed data";
      goto LABEL_10;
    }
  }

  else
  {
    uint64_t v13 = *(void **)(v1 + 32);
    *(void *)(v0 + 56) = v13;
    if (!v13)
    {
      uint64_t v39 = type metadata accessor for SFAirDropSend.Failure(0LL);
      uint64_t v40 = sub_100183F14( &qword_100654D00,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
      swift_allocError(v39, v40, 0LL, 0LL);
      uint64_t v42 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v39 - 8) + 104LL))( v41,  enum case for SFAirDropSend.Failure.streamError(_:),  v39);
      swift_willThrow(v42);
      uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
      return v11();
    }

    *(_BYTE *)(v1 + 40) = 1;
    uint64_t v14 = qword_100643EA0;
    id v15 = v13;
    if (v14 != -1) {
      swift_once(&qword_100643EA0, sub_1001915E8);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    uint64_t v17 = sub_100186DE4(v16, (uint64_t)qword_100645440);
    *(void *)(v0 + 64) = v17;
    unint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      __int128 v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)__int128 v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Send compression adapter compressing data", v20, 2u);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    *(void *)(v0 + 72) = swift_slowAlloc(0x100000LL, -1LL);
    [v15 open];
    uint64_t v21 = 0LL;
    *(void *)&__int128 v22 = 134217984LL;
    __int128 v61 = v22;
    while (1)
    {
      if ((objc_msgSend(*(id *)(v0 + 56), "hasBytesAvailable", v61) & 1) == 0)
      {
        uint64_t v24 = *(void *)(v0 + 32);
        if (*(_BYTE *)(v24 + 41) == 3) {
          goto LABEL_36;
        }
      }

      size_t v25 = (size_t)[*(id *)(v0 + 56) read:*(void *)(v0 + 72) maxLength:0x100000];
      int64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
      os_log_type_t v27 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = swift_slowAlloc(12LL, -1LL);
        *(_DWORD *)uint64_t v28 = v61;
        *(void *)(v28 + 4) = v25;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Reading compressed data %ld", (uint8_t *)v28, 0xCu);
        swift_slowDealloc(v28, -1LL, -1LL);
      }

      if ((uint64_t)v25 <= 0)
      {
        uint64_t v24 = *(void *)(v0 + 32);
LABEL_36:
        uint64_t Strong = swift_unknownObjectWeakLoadStrong(v24 + 56, v23);
        *(void *)(v0 + 12_Block_object_dispose(va, 8) = Strong;
        if (Strong)
        {
          uint64_t v44 = dword_1006475E0;
          unint64_t v45 = (void *)swift_task_alloc(unk_1006475E4);
          *(void *)(v0 + 136) = v45;
          *unint64_t v45 = v0;
          v45[1] = sub_100193210;
          unint64_t v46 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char))((char *)&dword_1006475E0 + v44);
          uint64_t v47 = 0LL;
          unint64_t v48 = 0xC000000000000000LL;
          uint64_t v49 = v21;
          char v50 = 1;
          return v46(v47, v48, v49, v50);
        }

        uint64_t v53 = (os_log_s *)Logger.logObject.getter(0LL);
        os_log_type_t v54 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v53, v54))
        {
          uint64_t v55 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v55 = 0;
          _os_log_impl((void *)&_mh_execute_header, v53, v54, "Finished reading compressed data", v55, 2u);
          swift_slowDealloc(v55, -1LL, -1LL);
        }

        uint64_t v56 = *(void *)(v0 + 32);

        unint64_t v57 = *(void **)(v56 + 32);
        if (v57)
        {
          id v58 = v57;
          if ([v58 streamStatus] != (id)6)
          {
            uint64_t v6 = *(uint8_t **)(v0 + 72);
            uint64_t v4 = *(os_log_s **)(v0 + 56);
            uint64_t v59 = *(void *)(v0 + 32);
            [v58 close];

            __n128 v60 = *(void **)(v59 + 32);
            *(void *)(v59 + 32) = 0LL;

            goto LABEL_11;
          }
        }

        uint64_t v10 = *(uint8_t **)(v0 + 72);
        uint64_t v4 = *(os_log_s **)(v0 + 56);
        goto LABEL_12;
      }

      BOOL v29 = __OFADD__(v21, v25);
      v21 += v25;
      *(void *)(v0 + 80) = v21;
      if (v29) {
        break;
      }
      char v30 = *(const void **)(v0 + 72);
      if (v25 <= 0xE)
      {
        *(void *)(v0 + 22) = 0LL;
        *(void *)(v0 + 16) = 0LL;
        *(_BYTE *)(v0 + 30) = v25;
        memcpy((void *)(v0 + 16), v30, v25);
        uint64_t v35 = *(void *)(v0 + 16);
        unint64_t v36 = *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 29) << 40) | ((unint64_t)*(unsigned __int8 *)(v0 + 30) << 48);
      }

      else
      {
        uint64_t v31 = type metadata accessor for __DataStorage(0LL);
        swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
        uint64_t v32 = __DataStorage.init(bytes:length:)(v30, v25);
        uint64_t v34 = v32;
        if (v25 >= 0x7FFFFFFF)
        {
          uint64_t v37 = type metadata accessor for Data.RangeReference(0LL);
          uint64_t v35 = swift_allocObject(v37, 32LL, 7LL);
          *(void *)(v35 + 16) = 0LL;
          *(void *)(v35 + 24) = v25;
          unint64_t v36 = v34 | 0x8000000000000000LL;
        }

        else
        {
          uint64_t v35 = v25 << 32;
          unint64_t v36 = v32 | 0x4000000000000000LL;
        }
      }

      *(void *)(v0 + 8_Block_object_dispose(va, 8) = v35;
      *(void *)(v0 + 96) = v36;
      uint64_t v38 = swift_unknownObjectWeakLoadStrong(*(void *)(v0 + 32) + 56LL, v33);
      *(void *)(v0 + 104) = v38;
      if (v38)
      {
        uint64_t v51 = dword_1006475E0;
        os_log_type_t v52 = (void *)swift_task_alloc(unk_1006475E4);
        *(void *)(v0 + 112) = v52;
        *os_log_type_t v52 = v0;
        v52[1] = sub_100192CCC;
        unint64_t v46 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char))((char *)&dword_1006475E0 + v51);
        uint64_t v47 = v35;
        unint64_t v48 = v36;
        uint64_t v49 = v21;
        char v50 = 0;
        return v46(v47, v48, v49, v50);
      }

      sub_100189B20(v35, v36);
    }

    __break(1u);
LABEL_48:
    swift_once(&qword_100643EA0, sub_1001915E8);
LABEL_8:
    uint64_t v8 = type metadata accessor for Logger(0LL);
    uint64_t v9 = sub_100186DE4(v8, (uint64_t)qword_100645440);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v6 = 0;
      uint64_t v7 = "Zipper not ready to send compressed data";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v4, v5, v7, v6, 2u);
LABEL_11:
      uint64_t v10 = v6;
LABEL_12:
      swift_slowDealloc(v10, -1LL, -1LL);
    }
  }

  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_100192CCC()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 112LL);
  *(void *)(*(void *)v1 + 12kdebug_trace(725286956LL, 0LL, 0LL, 0LL, 0LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = v2[5];
    uint64_t v5 = v2[6];
    uint64_t v6 = sub_100193194;
  }

  else
  {
    swift_unknownObjectRelease(v2[13]);
    uint64_t v4 = v2[5];
    uint64_t v5 = v2[6];
    uint64_t v6 = sub_100192D84;
  }

  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100192D84()
{
  uint64_t v1 = *(void *)(v0 + 80);
  *(void *)&__int128 v2 = 134217984LL;
  __int128 v40 = v2;
  while (1)
  {
    if ((objc_msgSend(*(id *)(v0 + 56), "hasBytesAvailable", v40) & 1) == 0)
    {
      uint64_t v4 = *(void *)(v0 + 32);
      if (*(_BYTE *)(v4 + 41) == 3) {
        goto LABEL_16;
      }
    }

    size_t v5 = (size_t)[*(id *)(v0 + 56) read:*(void *)(v0 + 72) maxLength:0x100000];
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v8 = v40;
      *(void *)(v8 + 4) = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Reading compressed data %ld", (uint8_t *)v8, 0xCu);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    BOOL v9 = __OFADD__(v1, v5);
    v1 += v5;
    *(void *)(v0 + 80) = v1;
    if (v9) {
      __break(1u);
    }
    uint64_t v10 = *(const void **)(v0 + 72);
    if (v5 <= 0xE)
    {
      *(void *)(v0 + 22) = 0LL;
      *(void *)(v0 + 16) = 0LL;
      *(_BYTE *)(v0 + 30) = v5;
      memcpy((void *)(v0 + 16), v10, v5);
      uint64_t v15 = *(void *)(v0 + 16);
      unint64_t v16 = *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 29) << 40) | ((unint64_t)*(unsigned __int8 *)(v0 + 30) << 48);
    }

    else
    {
      uint64_t v11 = type metadata accessor for __DataStorage(0LL);
      swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
      uint64_t v12 = __DataStorage.init(bytes:length:)(v10, v5);
      uint64_t v14 = v12;
      if (v5 >= 0x7FFFFFFF)
      {
        uint64_t v17 = type metadata accessor for Data.RangeReference(0LL);
        uint64_t v15 = swift_allocObject(v17, 32LL, 7LL);
        *(void *)(v15 + 16) = 0LL;
        *(void *)(v15 + 24) = v5;
        unint64_t v16 = v14 | 0x8000000000000000LL;
      }

      else
      {
        uint64_t v15 = v5 << 32;
        unint64_t v16 = v12 | 0x4000000000000000LL;
      }
    }

    *(void *)(v0 + 8_Block_object_dispose(va, 8) = v15;
    *(void *)(v0 + 96) = v16;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(*(void *)(v0 + 32) + 56LL, v13);
    *(void *)(v0 + 104) = Strong;
    if (Strong)
    {
      uint64_t v27 = dword_1006475E0;
      uint64_t v28 = (void *)swift_task_alloc(unk_1006475E4);
      *(void *)(v0 + 112) = v28;
      *uint64_t v28 = v0;
      v28[1] = sub_100192CCC;
      __int128 v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char))((char *)&dword_1006475E0 + v27);
      uint64_t v23 = v15;
      unint64_t v24 = v16;
      uint64_t v25 = v1;
      char v26 = 0;
      return v22(v23, v24, v25, v26);
    }

    sub_100189B20(v15, v16);
  }

  uint64_t v4 = *(void *)(v0 + 32);
LABEL_16:
  uint64_t v19 = swift_unknownObjectWeakLoadStrong(v4 + 56, v3);
  *(void *)(v0 + 12_Block_object_dispose(va, 8) = v19;
  if (v19)
  {
    uint64_t v20 = dword_1006475E0;
    uint64_t v21 = (void *)swift_task_alloc(unk_1006475E4);
    *(void *)(v0 + 136) = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_100193210;
    __int128 v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char))((char *)&dword_1006475E0 + v20);
    uint64_t v23 = 0LL;
    unint64_t v24 = 0xC000000000000000LL;
    uint64_t v25 = v1;
    char v26 = 1;
    return v22(v23, v24, v25, v26);
  }

  char v30 = (os_log_s *)Logger.logObject.getter(0LL);
  os_log_type_t v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Finished reading compressed data", v32, 2u);
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  uint64_t v33 = *(void *)(v0 + 32);

  uint64_t v34 = *(void **)(v33 + 32);
  if (v34)
  {
    id v35 = v34;
    if ([v35 streamStatus] != (id)6)
    {
      uint64_t v36 = *(void *)(v0 + 72);
      uint64_t v37 = *(void **)(v0 + 56);
      uint64_t v38 = *(void *)(v0 + 32);
      [v35 close];

      uint64_t v39 = *(void **)(v38 + 32);
      *(void *)(v38 + 32) = 0LL;

      goto LABEL_27;
    }
  }

  uint64_t v36 = *(void *)(v0 + 72);
  uint64_t v37 = *(void **)(v0 + 56);
LABEL_27:
  swift_slowDealloc(v36, -1LL, -1LL);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100193194()
{
  uint64_t v1 = *(void *)(v0 + 104);
  __int128 v2 = *(void **)(v0 + 56);
  sub_100189B20(*(void *)(v0 + 88), *(void *)(v0 + 96));

  swift_unknownObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100193210()
{
  __int128 v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 136LL);
  *(void *)(*(void *)v1 + 144LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = v2[5];
    uint64_t v5 = v2[6];
    uint64_t v6 = sub_100193418;
  }

  else
  {
    swift_unknownObjectRelease(v2[16]);
    uint64_t v4 = v2[5];
    uint64_t v5 = v2[6];
    uint64_t v6 = sub_1001932C8;
  }

  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1001932C8()
{
  uint64_t v1 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Finished reading compressed data", v3, 2u);
    swift_slowDealloc(v3, -1LL, -1LL);
  }

  uint64_t v4 = *(void *)(v0 + 32);

  uint64_t v5 = *(void **)(v4 + 32);
  if (v5)
  {
    id v6 = v5;
    if ([v6 streamStatus] != (id)6)
    {
      uint64_t v7 = *(void *)(v0 + 72);
      uint64_t v8 = *(void **)(v0 + 56);
      uint64_t v9 = *(void *)(v0 + 32);
      [v6 close];

      uint64_t v10 = *(void **)(v9 + 32);
      *(void *)(v9 + 32) = 0LL;

      goto LABEL_8;
    }
  }

  uint64_t v7 = *(void *)(v0 + 72);
  uint64_t v8 = *(void **)(v0 + 56);
LABEL_8:
  swift_slowDealloc(v7, -1LL, -1LL);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100193418()
{
  uint64_t v1 = *(void **)(v0 + 56);
  swift_unknownObjectRelease(*(void *)(v0 + 128));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100193480(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t ObjectType = swift_getObjectType(v1);
  uint64_t v4 = sub_100183098(&qword_100645510);
  v2[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[7] = v5;
  v2[8] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100183F14( &qword_100645518,  type metadata accessor for SDAirDropSendCompressionAdapter,  (uint64_t)&unk_1004CD3F8);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v6);
  v2[9] = v7;
  v2[10] = v8;
  return swift_task_switch(sub_100193520, v7, v8);
}

uint64_t sub_100193520()
{
  uint64_t v1 = v0[5];
  *(_BYTE *)(v1 + 41) = 1;
  if (qword_100643EA0 != -1) {
    swift_once(&qword_100643EA0, sub_1001915E8);
  }
  uint64_t v2 = v0[5];
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v3, (uint64_t)qword_100645440);
  uint64_t v4 = swift_retain(v2);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = v0[5];
  if (v7)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v9 = 134217984;
    v0[3] = *(unsigned __int8 *)(v1 + 41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v9 + 4, v9 + 12);
    swift_release(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Zipper State Update: %ld", v9, 0xCu);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    swift_release(v0[5]);
  }

  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v0[5] + 56LL, v10);
  v0[11] = Strong;
  if (Strong)
  {
    id v12 = [*(id *)(v0[5] + 24) zipCompressionType];
    static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    uint64_t v14 = v13;

    uint64_t v15 = sub_10019494C();
    uint64_t v17 = v16;
    swift_bridgeObjectRelease(v14);
    v0[12] = v17;
    uint64_t v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100647600 + dword_100647600);
    unint64_t v18 = (void *)swift_task_alloc(unk_100647604);
    v0[13] = v18;
    *unint64_t v18 = v0;
    v18[1] = sub_10019379C;
    return v25(v0[4], (uint64_t)v15, v17);
  }

  else
  {
    uint64_t v21 = v0[7];
    uint64_t v20 = v0[8];
    uint64_t v22 = v0[6];
    uint64_t v23 = v0[4];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))( v20,  v0[5] + OBJC_IVAR____TtC16DaemoniOSLibrary31SDAirDropSendCompressionAdapter_compressionStartedContinuation,  v22);
    v0[2] = v23;
    SFProgressContinuation.finish(with:)(v0 + 2, v22);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    unint64_t v24 = (void *)swift_task_alloc(dword_100645524);
    v0[15] = v24;
    *unint64_t v24 = v0;
    v24[1] = sub_1001938EC;
    return sub_100192570();
  }

uint64_t sub_10019379C()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 104LL);
  *(void *)(*(void *)v1 + 112LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = v2[9];
    uint64_t v5 = v2[10];
    os_log_type_t v6 = sub_1001938A8;
  }

  else
  {
    uint64_t v7 = v2[11];
    swift_bridgeObjectRelease(v2[12]);
    swift_unknownObjectRelease(v7);
    uint64_t v4 = v2[9];
    uint64_t v5 = v2[10];
    os_log_type_t v6 = sub_100193810;
  }

  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100193810()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[4];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))( v1,  v0[5] + OBJC_IVAR____TtC16DaemoniOSLibrary31SDAirDropSendCompressionAdapter_compressionStartedContinuation,  v3);
  v0[2] = v4;
  SFProgressContinuation.finish(with:)(v0 + 2, v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v5 = (void *)swift_task_alloc(dword_100645524);
  v0[15] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1001938EC;
  return sub_100192570();
}

uint64_t sub_1001938A8()
{
  uint64_t v1 = *(void *)(v0 + 88);
  swift_bridgeObjectRelease(*(void *)(v0 + 96));
  swift_unknownObjectRelease(v1);
  swift_task_dealloc(*(void *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001938EC()
{
  uint64_t v1 = *v0;
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 120));
  swift_task_dealloc(*(void *)(v1 + 64));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100193938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[6] = a3;
  v4[7] = v3;
  v4[4] = a1;
  v4[5] = a2;
  uint64_t ObjectType = swift_getObjectType(v3);
  uint64_t v6 = type metadata accessor for SFAirDrop.Progress(0LL);
  v4[8] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[9] = v7;
  v4[10] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100183098(&qword_100645540);
  v4[11] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[12] = v9;
  v4[13] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100183098(&qword_100645510);
  v4[14] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[15] = v11;
  uint8_t v4[16] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100183F14( &qword_100645518,  type metadata accessor for SDAirDropSendCompressionAdapter,  (uint64_t)&unk_1004CD3F8);
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v12);
  v4[17] = v13;
  v4[18] = v14;
  return swift_task_switch(sub_100193A30, v13, v14);
}

uint64_t sub_100193A30()
{
  uint64_t v2 = v0[15];
  uint64_t v1 = v0[16];
  uint64_t v3 = v0[14];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))( v1,  v0[7] + OBJC_IVAR____TtC16DaemoniOSLibrary31SDAirDropSendCompressionAdapter_compressionStartedContinuation,  v3);
  SFProgressContinuation.task.getter(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to SFProgressTask.finalValue.getter[1]);
  v0[19] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100193AE0;
  return SFProgressTask.finalValue.getter(v0 + 2, v0[11]);
}

uint64_t sub_100193AE0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 152);
  uint64_t v5 = *(void *)(*v1 + 96);
  uint64_t v4 = *(void *)(*v1 + 104);
  uint64_t v6 = *(void *)(*v1 + 88);
  *(void *)(*v1 + 160) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0) {
    uint64_t v7 = sub_100193DF0;
  }
  else {
    uint64_t v7 = sub_100193B68;
  }
  return swift_task_switch(v7, *(void *)(v2 + 136), *(void *)(v2 + 144));
}

uint64_t sub_100193B68()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 16);
  *(_BYTE *)(v1 + 41) = 2;
  if (qword_100643EA0 != -1) {
    swift_once(&qword_100643EA0, sub_1001915E8);
  }
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v4, (uint64_t)qword_100645440);
  uint64_t v5 = swift_retain(v3);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 56);
  if (v8)
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v10 = 134217984;
    *(void *)(v0 + 24) = *(unsigned __int8 *)(v1 + 41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v10 + 4, v10 + 12);
    swift_release(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Zipper State Update: %ld", v10, 0xCu);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
    swift_release(*(void *)(v0 + 56));
  }

  uint64_t v12 = *(void *)(v0 + 72);
  uint64_t v11 = *(void *)(v0 + 80);
  uint64_t v13 = *(void *)(v0 + 56);
  __int128 v14 = *(_OWORD *)(v0 + 40);
  *(void *)uint64_t v11 = *(void *)(v0 + 32);
  *(void *)(v11 + _Block_object_dispose(va, 8) = v2;
  *(_BYTE *)(v11 + 16) = 0;
  *(_OWORD *)(v11 + 24) = v14;
  (*(void (**)(void))(v12 + 104))();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v13 + 56, v15);
  if (Strong)
  {
    uint64_t v17 = Strong;
    sub_1001F6BD4(*(void *)(v0 + 80));
    swift_unknownObjectRelease(v17);
  }

  unint64_t v18 = (void *)swift_task_alloc(dword_100645524);
  *(void *)(v0 + 16_Block_object_dispose(va, 8) = v18;
  *unint64_t v18 = v0;
  v18[1] = sub_100193D28;
  return sub_100192570();
}

uint64_t sub_100193D28()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 168);
  *(void *)(*v1 + 176) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_100193E44;
  }
  else {
    uint64_t v4 = sub_100193D88;
  }
  return swift_task_switch(v4, *(void *)(v2 + 136), *(void *)(v2 + 144));
}

uint64_t sub_100193D88()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 80);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 72) + 8LL))(v3, *(void *)(v0 + 64));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100193DF0()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 128));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100193E44()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 128));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100193EA8(uint64_t a1)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = v1;
  uint64_t ObjectType = swift_getObjectType(v1);
  uint64_t v4 = sub_100183F14( &qword_100645518,  type metadata accessor for SDAirDropSendCompressionAdapter,  (uint64_t)&unk_1004CD3F8);
  uint64_t v5 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v4);
  return swift_task_switch(sub_100193F1C, v5, v6);
}

uint64_t sub_100193F1C()
{
  uint64_t v1 = *(void *)(v0 + 40);
  *(_BYTE *)(v1 + 41) = 3;
  if (qword_100643EA0 != -1) {
    swift_once(&qword_100643EA0, sub_1001915E8);
  }
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v3, (uint64_t)qword_100645440);
  uint64_t v4 = swift_retain(v2);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void *)(v0 + 40);
  if (v7)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v9 = 134217984;
    *(void *)(v0 + 24) = *(unsigned __int8 *)(v1 + 41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v9 + 4, v9 + 12);
    swift_release(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Zipper State Update: %ld", v9, 0xCu);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    swift_release(*(void *)(v0 + 40));
  }

  uint64_t v11 = *(void *)(v0 + 32);
  if (v11)
  {
    swift_errorRetain(*(void *)(v0 + 32));
    swift_errorRetain(v11);
    uint64_t v12 = swift_errorRetain(v11);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      BOOL v29 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v15 = 138412290;
      swift_errorRetain(v11);
      uint64_t v16 = _swift_stdlib_bridgeErrorToNSError(v11);
      *(void *)(v0 + 16) = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v15 + 4, v15 + 12);
      *BOOL v29 = v16;
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Compression failed with error: %@", v15, 0xCu);
      uint64_t v17 = sub_100183098(&qword_1006454E0);
      swift_arrayDestroy(v29, 1LL, v17);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v11);
      swift_errorRelease(v11);
    }

    uint64_t v23 = *(void *)(v0 + 40);

    uint64_t v25 = *(void **)(v23 + 32);
    if (v25)
    {
      id v26 = v25;
      if ([v26 streamStatus] != (id)6)
      {
        [v26 close];

        id v26 = *(id *)(v23 + 32);
        *(void *)(v23 + 32) = 0LL;
      }
    }

    uint64_t Strong = swift_unknownObjectWeakLoadStrong(*(void *)(v0 + 40) + 56LL, v24);
    if (Strong)
    {
      uint64_t v28 = Strong;
      sub_1001F6EA4(v11);
      swift_errorRelease(v11);
      swift_unknownObjectRelease(v28);
    }

    else
    {
      swift_errorRelease(v11);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    unint64_t v18 = (os_log_s *)Logger.logObject.getter(v10);
    uint64_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, (os_log_type_t)v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v19, "Compression finished", v20, 2u);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    uint64_t v21 = (void *)swift_task_alloc(dword_100645524);
    *(void *)(v0 + 4_Block_object_dispose(va, 8) = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_1001942E0;
    return sub_100192570();
  }

uint64_t sub_1001942E0()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 48));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100194328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v7 = (void *)swift_task_alloc(dword_10064550C);
  *(void *)(v5 + 16) = v7;
  *BOOL v7 = v5;
  v7[1] = sub_100195708;
  return sub_100193480(a5);
}

uint64_t sub_10019437C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = (void *)swift_task_alloc(dword_10064553C);
  *(void *)(v7 + 16) = v11;
  *uint64_t v11 = v7;
  v11[1] = sub_1001943E8;
  return sub_100193938(a5, a6, a7);
}

uint64_t sub_1001943E8()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100194430()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10064554C);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100195708;
  return sub_100193EA8(0LL);
}

uint64_t sub_10019447C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_10064554C);
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_100195708;
  return sub_100193EA8(a5);
}

uint64_t sub_10019456C()
{
  sub_100195658(v0 + 56);
  uint64_t v1 = v0 + OBJC_IVAR____TtC16DaemoniOSLibrary31SDAirDropSendCompressionAdapter_compressionStartedContinuation;
  uint64_t v2 = sub_100183098(&qword_100645510);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  return swift_deallocClassInstance( v0,  *(unsigned int *)((swift_isaMask & *(void *)v0) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *(void *)v0) + 0x34LL));
}

uint64_t sub_1001945F8()
{
  return type metadata accessor for SDAirDropSendCompressionAdapter(0LL);
}

uint64_t type metadata accessor for SDAirDropSendCompressionAdapter(uint64_t a1)
{
  uint64_t result = qword_100645488;
  if (!qword_100645488) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SDAirDropSendCompressionAdapter);
  }
  return result;
}

void sub_10019463C(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  _DWORD v4[2] = "\b";
  v4[3] = &unk_1004CD308;
  v4[4] = &unk_1004CD320;
  v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[6] = &unk_1004CD338;
  v4[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_1001946FC();
  if (v3 <= 0x3F)
  {
    v4[8] = *(void *)(v2 - 8) + 64LL;
    swift_updateClassMetadata2(a1, 256LL, 9LL, v4, a1 + 80);
  }

void sub_1001946FC()
{
  if (!qword_100645498)
  {
    unint64_t v0 = type metadata accessor for SFProgressContinuation( 0LL,  (char *)&type metadata for () + 8,  &type metadata for Int);
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100645498);
    }
  }

_BYTE *initializeBufferWithCopyOfBuffer for SDAirDropSendCompressionAdapter.State(_BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SDAirDropSendCompressionAdapter.State( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

uint64_t storeEnumTagSinglePayload for SDAirDropSendCompressionAdapter.State( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100194844 + 4 * byte_1004CD255[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100194878 + 4 * byte_1004CD250[v4]))();
}

uint64_t sub_100194878(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100194880(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100194888LL);
  }
  return result;
}

uint64_t sub_100194894(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10019489CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1001948A0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001948A8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001948B4(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1001948BC(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for SDAirDropSendCompressionAdapter.State()
{
  return &type metadata for SDAirDropSendCompressionAdapter.State;
}

unint64_t sub_1001948D8()
{
  unint64_t result = qword_1006454A0;
  if (!qword_1006454A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004CD3D0, &type metadata for SDAirDropSendCompressionAdapter.State);
    atomic_store(result, (unint64_t *)&qword_1006454A0);
  }

  return result;
}

uint64_t sub_10019491C()
{
  return OS_dispatch_queue_serial_executor.asUnownedSerialExecutor()();
}

unint64_t sub_10019493C(unint64_t result)
{
  if (result >= 4) {
    return 4LL;
  }
  return result;
}

CFStringRef sub_10019494C()
{
  NSString v0 = String._bridgeToObjectiveC()();
  if (@"pkzip")
  {
    type metadata accessor for CFString(0LL);
    uint64_t v2 = v1;
    uint64_t v3 = sub_100183F14( &qword_100645530,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1004CCC0C);
    uint64_t v4 = @"pkzip";
    LOBYTE(sub_10004D1BC((void *)&_mh_execute_header, v0, v1, "Failed to register wifi monitor %@\n", v2) = static _CFObject.== infix(_:_:)(v4, v0, v2, v3);

    if ((v2 & 1) != 0)
    {
      unint64_t result = @"application/zip";
      if (@"application/zip") {
        goto LABEL_14;
      }
      __break(1u);
    }
  }

  if (@"gzip")
  {
    type metadata accessor for CFString(0LL);
    uint64_t v7 = v6;
    uint64_t v8 = sub_100183F14( &qword_100645530,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1004CCC0C);
    id v9 = v0;
    uint64_t v10 = @"gzip";
    LOBYTE(v7) = static _CFObject.== infix(_:_:)(v10, v9, v7, v8);

    if ((v7 & 1) != 0)
    {
      unint64_t result = @"application/x-cpio";
      if (@"application/x-cpio") {
        goto LABEL_14;
      }
      __break(1u);
    }
  }

  if (@"dvzip")
  {
    type metadata accessor for CFString(0LL);
    uint64_t v12 = v11;
    uint64_t v13 = sub_100183F14( &qword_100645530,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1004CCC0C);
    id v14 = v0;
    uint64_t v15 = @"dvzip";
    LOBYTE(v12) = static _CFObject.== infix(_:_:)(v15, v14, v12, v13);

    if ((v12 & 1) != 0)
    {
      unint64_t result = @"application/x-dvzip";
      if (!@"application/x-dvzip")
      {
        __break(1u);
        goto LABEL_13;
      }

void sub_100194B1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100183098(&qword_100646560);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643EA0 != -1) {
    swift_once(&qword_100643EA0, sub_1001915E8);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v9, (uint64_t)qword_100645440);
  uint64_t v10 = swift_unknownObjectRetain_n(a2, 2LL);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v40 = a1;
    uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    uint64_t v41 = v3;
    uint64_t v15 = v14;
    v42[0] = v14;
    *(_DWORD *)uint64_t v13 = 136315138;
    uint64_t v44 = a2;
    swift_unknownObjectRetain(a2);
    uint64_t v16 = String.init<A>(describing:)(&v44, (char *)&type metadata for Swift.AnyObject + 8);
    unint64_t v18 = v17;
    uint64_t v44 = sub_10018CDB4(v16, v17, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v13 + 4, v13 + 12);
    unint64_t v19 = v18;
    a1 = v40;
    swift_bridgeObjectRelease(v19);
    swift_unknownObjectRelease_n(a2, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Zipper Update: %s", v13, 0xCu);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v20 = v15;
    uint64_t v3 = v41;
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {
    swift_unknownObjectRelease_n(a2, 2LL);
  }

  switch(a1)
  {
    case 5LL:
      uint64_t ObjectType = swift_getObjectType(a2);
      v42[0] = a2;
      uint64_t v21 = sub_100183168(0LL, &qword_100645160, &OBJC_CLASS___NSDictionary_ptr);
      swift_unknownObjectRetain(a2);
      tryCast<A>(_:as:description:file:line:)( &v44,  v42,  v21,  0LL,  0LL,  0xD000000000000066LL,  0x8000000100503B10LL,  177LL,  v21);
      sub_10018709C(v42);
      if (!kSFOperationTotalBytesKey)
      {
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        JUMPOUT(0x1001953D4LL);
      }

      uint64_t v22 = (void *)v44;
      NSDictionary.sf_value<A>(_:as:file:line:)( v42,  kSFOperationTotalBytesKey,  &type metadata for Int,  0xD000000000000066LL,  0x8000000100503B10LL,  178LL,  &type metadata for Int);
      uint64_t v33 = v42[0];
      uint64_t v34 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56LL))(v8, 1LL, 1LL, v34);
      id v35 = (void *)swift_allocObject(&unk_1005D2AA0, 48LL, 7LL);
      v35[2] = 0LL;
      v35[3] = 0LL;
      v35[4] = v3;
      v35[5] = v33;
      swift_retain(v3);
      uint64_t v36 = &unk_100645500;
      break;
    case 7LL:
      uint64_t ObjectType = swift_getObjectType(a2);
      v42[0] = a2;
      uint64_t v23 = sub_100183168(0LL, &qword_100645160, &OBJC_CLASS___NSDictionary_ptr);
      swift_unknownObjectRetain(a2);
      tryCast<A>(_:as:description:file:line:)( &v44,  v42,  v23,  0LL,  0LL,  0xD000000000000066LL,  0x8000000100503B10LL,  187LL,  v23);
      sub_10018709C(v42);
      if (!kSFOperationBytesCopiedKey) {
        goto LABEL_18;
      }
      uint64_t v22 = (void *)v44;
      NSDictionary.sf_value<A>(_:as:file:line:)( v42,  kSFOperationBytesCopiedKey,  &type metadata for Int,  0xD000000000000066LL,  0x8000000100503B10LL,  188LL,  &type metadata for Int);
      if (!kSFOperationFilesCopiedKey) {
        goto LABEL_19;
      }
      uint64_t v24 = v42[0];
      NSDictionary.sf_value<A>(_:as:file:line:)( v42,  kSFOperationFilesCopiedKey,  &type metadata for Int,  0xD000000000000066LL,  0x8000000100503B10LL,  189LL,  &type metadata for Int);
      if (!kSFOperationTimeRemainingKey) {
        goto LABEL_20;
      }
      uint64_t v25 = v42[0];
      NSDictionary.sf_value<A>(_:as:file:line:)( v42,  kSFOperationTimeRemainingKey,  &type metadata for Int,  0xD000000000000066LL,  0x8000000100503B10LL,  190LL,  &type metadata for Int);
      uint64_t v38 = v42[0];
      uint64_t v39 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56LL))(v8, 1LL, 1LL, v39);
      id v35 = (void *)swift_allocObject(&unk_1005D2A78, 64LL, 7LL);
      v35[2] = 0LL;
      v35[3] = 0LL;
      v35[4] = v3;
      v35[5] = v25;
      v35[6] = v24;
      v35[7] = v38;
      swift_retain(v3);
      uint64_t v36 = &unk_1006454F0;
      break;
    case 9LL:
      uint64_t v26 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))(v8, 1LL, 1LL, v26);
      uint64_t v27 = (void *)swift_allocObject(&unk_1005D2A50, 40LL, 7LL);
      void v27[2] = 0LL;
      v27[3] = 0LL;
      v27[4] = v3;
      swift_retain(v3);
      uint64_t v28 = &unk_1006454D0;
      goto LABEL_15;
    case 10LL:
      uint64_t ObjectType = swift_getObjectType(a2);
      v42[0] = a2;
      uint64_t v29 = sub_100183168(0LL, &qword_1006454B0, &OBJC_CLASS___NSError_ptr);
      swift_unknownObjectRetain(a2);
      tryCast<A>(_:as:description:file:line:)( &v44,  v42,  v29,  0LL,  0LL,  0xD000000000000066LL,  0x8000000100503B10LL,  203LL,  v29);
      sub_10018709C(v42);
      uint64_t v30 = v44;
      uint64_t v31 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))(v8, 1LL, 1LL, v31);
      uint64_t v27 = (void *)swift_allocObject(&unk_1005D2A28, 48LL, 7LL);
      void v27[2] = 0LL;
      v27[3] = 0LL;
      v27[4] = v3;
      v27[5] = v30;
      swift_retain(v3);
      uint64_t v28 = &unk_1006454C0;
LABEL_15:
      uint64_t v32 = sub_1001B341C((uint64_t)v8, (uint64_t)v28, (uint64_t)v27);
      swift_release(v32);
      return;
    default:
      return;
  }

  uint64_t v37 = sub_1001B341C((uint64_t)v8, (uint64_t)v36, (uint64_t)v35);
  swift_release(v37);
}

uint64_t sub_1001953EC()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100195420()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = (void *)swift_task_alloc(dword_1006454BC);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100195708;
  uint64_t v4 = (void *)swift_task_alloc(dword_10064554C);
  _DWORD v3[2] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100195708;
  return sub_100193EA8(v2);
}

uint64_t sub_100195498()
{
  return sub_1001955A8(40LL);
}

uint64_t sub_1001954A0()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1006454CC);
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100195708;
  uint64_t v2 = (void *)swift_task_alloc(dword_10064554C);
  v1[2] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100195708;
  return sub_100193EA8(0LL);
}

uint64_t sub_10019550C()
{
  return sub_1001955A8(64LL);
}

uint64_t sub_100195514()
{
  uint64_t v2 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v5 = (void *)swift_task_alloc(dword_1006454EC);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1001943E8;
  uint64_t v6 = (void *)swift_task_alloc(dword_10064553C);
  v5[2] = v6;
  *uint64_t v6 = v5;
  v6[1] = sub_1001943E8;
  return sub_100193938(v2, v4, v3);
}

uint64_t sub_1001955A0()
{
  return sub_1001955A8(48LL);
}

uint64_t sub_1001955A8(uint64_t a1)
{
  return swift_deallocObject(v1, a1, 7LL);
}

uint64_t sub_1001955E0()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = (void *)swift_task_alloc(dword_1006454FC);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100195708;
  uint64_t v4 = (void *)swift_task_alloc(dword_10064550C);
  _DWORD v3[2] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100195708;
  return sub_100193480(v2);
}

uint64_t sub_100195658(uint64_t a1)
{
  return a1;
}

unint64_t sub_10019567C()
{
  unint64_t result = qword_1006456F0;
  if (!qword_1006456F0)
  {
    uint64_t v1 = sub_100183124((uint64_t *)&unk_100645570);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1006456F0);
  }

  return result;
}

uint64_t sub_1001956C8(uint64_t a1)
{
  uint64_t v2 = sub_100183098((uint64_t *)&unk_100645130);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10019570C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100186DFC(v0, qword_100645590);
  uint64_t v1 = sub_100186DE4(v0, (uint64_t)qword_100645590);
  if (qword_100643FD8 != -1) {
    swift_once(&qword_100643FD8, sub_10023A408);
  }
  uint64_t v2 = sub_100186DE4(v0, (uint64_t)qword_1006695F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

char *sub_10019579C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = v7;
  uint64_t v84 = a7;
  uint64_t v96 = a6;
  uint64_t v83 = a5;
  uint64_t v89 = a3;
  id v90 = a4;
  uint64_t v81 = a2;
  uint64_t v88 = a1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v7);
  uint64_t v86 = sub_100183098((uint64_t *)&unk_1006456D0);
  uint64_t v85 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  unint64_t v82 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v80 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v79 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  uint64_t v78 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for OS_dispatch_queue_serial.Attributes(0LL);
  __chkstk_darwin(v12);
  uint64_t v77 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v14);
  uint64_t v74 = (char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = &v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestinationProvider];
  *(_OWORD *)uint64_t v16 = 0u;
  *((_OWORD *)v16 + 1) = 0u;
  *((void *)v16 + 4) = 0LL;
  unint64_t v17 = &v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestination];
  uint64_t v18 = type metadata accessor for URL(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v17, 1LL, 1LL, v18);
  unint64_t v19 = &v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter];
  *(void *)unint64_t v19 = 0LL;
  *((void *)v19 + 1) = 0LL;
  *(void *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_totalExpectedBytes] = 0LL;
  *(void *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkInputStream] = 0LL;
  *(void *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkOutputStream] = 0LL;
  *(void *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_adapterBufferSize] = 3145728LL;
  uint64_t v20 = &v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_delegate];
  *((void *)v20 + 1) = 0LL;
  swift_unknownObjectWeakInit(v20, 0LL);
  uint64_t v21 = &v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_receiveServiceDelegate];
  *((void *)v21 + 1) = 0LL;
  swift_unknownObjectWeakInit(v21, 0LL);
  uint64_t v76 = OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_queue;
  unint64_t v75 = sub_10019AE5C();
  uint64_t v22 = swift_retain(v9);
  static DispatchQoS.userInitiated.getter(v22);
  uint64_t v23 = (const char *)_swiftEmptyArrayStorage;
  aBlock[0] = _swiftEmptyArrayStorage;
  uint64_t v24 = sub_100183F14( (unint64_t *)&unk_1006456E0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue_serial.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue_serial.Attributes);
  uint64_t v25 = sub_100183098((uint64_t *)&unk_100645570);
  unint64_t v26 = sub_10019567C();
  uint64_t v27 = v77;
  uint64_t v28 = v24;
  uint64_t v29 = v88;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v25, v26, v12, v28);
  uint64_t v30 = v78;
  (*(void (**)(char *, void, uint64_t))(v79 + 104))( v78,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v80);
  uint64_t v31 = OS_dispatch_queue_serial.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000034LL,  0x8000000100503DE0LL,  v74,  v27,  v30,  0LL);
  *(void *)&v9[v76] = v31;
  sub_10019AE98(v29, (uint64_t)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_askRequest]);
  uint64_t v32 = &v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_receiveID];
  uint64_t v33 = type metadata accessor for UUID(0LL);
  uint64_t v79 = *(void *)(v33 - 8);
  uint64_t v34 = *(void (**)(char *, uint64_t))(v79 + 16);
  uint64_t v80 = v33;
  v34(v32, v89);
  *(void *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_totalReceivedBytes] = 0LL;
  id v35 = objc_allocWithZone((Class)&OBJC_CLASS___SDAirDropFileZipper);
  id v36 = [v35 initWithQueue:v31 boundStreamSize:v81];
  *(void *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_zipper] = v36;
  *((void *)v20 + 1) = v83;
  swift_unknownObjectWeakAssign(v20, v90);
  *((void *)v21 + 1) = v84;
  swift_unknownObjectWeakAssign(v21, v96);
  uint64_t v37 = v82;
  SFProgressContinuation.init(_:initialProgress:file:line:)( 0xD000000000000014LL,  0x8000000100503E20LL,  v38,  0xD000000000000069LL,  0x8000000100503E40LL,  67LL,  (char *)&type metadata for () + 8,  &type metadata for Bool);
  (*(void (**)(char *, char *, uint64_t))(v85 + 32))( &v9[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_decompressionStartedContinuation],  v37,  v86);
  swift_release(v9);
  v93.receiver = v9;
  v93.super_class = ObjectType;
  uint64_t v39 = (char *)objc_msgSendSuper2(&v93, "init");
  uint64_t v40 = &v39[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter];
  uint64_t v41 = *(void *)&v39[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter];
  *(void *)uint64_t v40 = 0LL;
  *((void *)v40 + 1) = 0LL;
  uint64_t v42 = v39;
  swift_unknownObjectRelease(v41);
  uint64_t ObjectType = (objc_class *)OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_zipper;
  uint64_t v43 = *(void **)&v42[OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_zipper];
  uint64_t v44 = _s14descr1005DF7D1C10AskRequestVMa(0LL);
  id v45 = v43;
  NSString v46 = String._bridgeToObjectiveC()();
  [v45 setSenderName:v46];

  uint64_t v47 = *(int *)(v44 + 48);
  uint64_t v48 = *(void *)(v29 + v47);
  if (v48 && (uint64_t v49 = *(void *)(v48 + 16)) != 0)
  {
    swift_bridgeObjectRetain_n(*(void *)(v29 + v47), 2LL);
    uint64_t v50 = 32LL;
    while (1)
    {
      __int128 v51 = *(_OWORD *)(v48 + v50 + 16);
      v94[0] = *(_OWORD *)(v48 + v50);
      v94[1] = v51;
      __int128 v52 = *(_OWORD *)(v48 + v50 + 32);
      __int128 v53 = *(_OWORD *)(v48 + v50 + 48);
      __int128 v54 = *(_OWORD *)(v48 + v50 + 64);
      __int16 v95 = *(_WORD *)(v48 + v50 + 80);
      v94[3] = v53;
      v94[4] = v54;
      uint64_t v94[2] = v52;
      sub_10019AF5C(v94);
      sub_100441F10();
      if (v8) {
        break;
      }
      uint64_t v56 = v55;
      sub_10019AFB0(v94);
      if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0) {
        uint64_t v23 = (const char *)sub_10018BD74(0LL, *((void *)v23 + 2) + 1LL, 1, (uint64_t)v23);
      }
      unint64_t v58 = *((void *)v23 + 2);
      unint64_t v57 = *((void *)v23 + 3);
      if (v58 >= v57 >> 1) {
        uint64_t v23 = (const char *)sub_10018BD74((void *)(v57 > 1), v58 + 1, 1, (uint64_t)v23);
      }
      *((void *)v23 + 2) = v58 + 1;
      *(void *)&v23[8 * v58 + 32] = v56;
      v50 += 88LL;
      if (!--v49)
      {
        swift_bridgeObjectRelease_n(v48, 2LL);
        uint64_t v29 = v88;
        goto LABEL_12;
      }
    }

    sub_10019AFB0(v94);

    swift_unknownObjectRelease(v96);
    *(void *)&double v59 = swift_bridgeObjectRelease(v23).n128_u64[0];
    __n128 v60 = swift_bridgeObjectRelease((const char *)v48, v59);
    (*(void (**)(uint64_t, uint64_t, __n128))(v79 + 8))(v89, v80, v60);
    swift_bridgeObjectRelease((const char *)v48);
    uint64_t v29 = v88;
  }

  else
  {
LABEL_12:
    uint64_t v61 = v89;
    if (*((void *)v23 + 2))
    {
      uint64_t v62 = ObjectType;
      id v63 = *(id *)((char *)&ObjectType->isa + (void)v42);
      Class v64 = (const char *)sub_1002DE168((uint64_t)v23);
      swift_bridgeObjectRelease(v23);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v64);
      uint64_t v66 = swift_allocObject(&unk_1005D2B30, 24LL, 7LL);
      swift_weakInit(v66 + 16);
      aBlock[4] = sub_10019AF00;
      uint64_t v92 = v66;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_10019637C;
      aBlock[3] = &unk_1005D2B48;
      id v67 = _Block_copy(aBlock);
      swift_release(v92);
      [v63 setPlaceholderFiles:isa withCreationCompletionHandler:v67];
      _Block_release(v67);

      [*(id *)((char *)&v62->isa + (void)v42) setDelegate:v42];
    }

    else
    {

      swift_bridgeObjectRelease(v23);
      uint64_t v68 = type metadata accessor for SFAirDropReceive.Failure(0LL);
      uint64_t v69 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
      swift_allocError(v68, v69, 0LL, 0LL);
      uint64_t v71 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v68 - 8) + 104LL))( v70,  enum case for SFAirDropReceive.Failure.missingDownloadDirectory(_:),  v68);
      swift_willThrow(v71);
    }

    swift_unknownObjectRelease(v96);
    (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v61, v80);
  }

  sub_10019AF20(v29);
  return v42;
}

uint64_t sub_100196004(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100183098(&qword_100646560);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a2 + 16;
  if (qword_100643EA8 != -1) {
    swift_once(&qword_100643EA8, sub_10019570C);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v8, (uint64_t)qword_100645590);
  uint64_t v9 = swift_bridgeObjectRetain((const char *)a1);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v12 = 134217984;
    uint64_t v21 = *(void *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease((const char *)a1);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Created %ld placeholder files", v12, 0xCu);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease((const char *)a1);
  }

  swift_beginAccess(v7, &v21, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v7);
  if (result)
  {
    uint64_t v14 = result;
    uint64_t v15 = (const char *)sub_100196238(a1);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = (const char *)_swiftEmptyArrayStorage;
    }
    uint64_t v17 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v6, 1LL, 1LL, v17);
    uint64_t v18 = (void *)swift_allocObject(&unk_1005D2B80, 48LL, 7LL);
    v18[2] = 0LL;
    v18[3] = 0LL;
    v18[4] = v14;
    void v18[5] = v16;
    swift_retain(v14);
    swift_bridgeObjectRetain(v16);
    uint64_t v19 = sub_1001B3808((uint64_t)v6, (uint64_t)&unk_100645708, (uint64_t)v18);
    swift_bridgeObjectRelease(v16);
    swift_release(v14);
    return swift_release(v19);
  }

  return result;
}

void *sub_100196238(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v12 = _swiftEmptyArrayStorage;
  sub_10018D7B8(0, v2, 0);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 32LL)
    {
      sub_100187058(i, (uint64_t)v11);
      uint64_t v5 = sub_100183098(&qword_100645240);
      uint64_t v6 = v10;
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_10018D7B8(0, v3[2] + 1LL, 1);
        uint64_t v3 = v12;
      }

      unint64_t v8 = v3[2];
      unint64_t v7 = v3[3];
      if (v8 >= v7 >> 1)
      {
        sub_10018D7B8(v7 > 1, v8 + 1, 1);
        uint64_t v3 = v12;
      }

      _DWORD v3[2] = v8 + 1;
      v3[v8 + 4] = v6;
      if (!--v2) {
        return v3;
      }
    }

    uint64_t v10 = 0LL;
    swift_release(v3);
    swift_bridgeObjectRelease(v10);
    return 0LL;
  }

  return v3;
}

uint64_t sub_10019637C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, (char *)&type metadata for Any + 8);
  swift_retain(v2);
  v3(v4);
  swift_release(v2);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_1001963D8()
{
  v1[18] = v0;
  uint64_t ObjectType = swift_getObjectType(v0);
  uint64_t v3 = sub_100183F14( &qword_1006456A8,  type metadata accessor for SDAirDropReceiveCompressionAdapter,  (uint64_t)&unk_1004CD4F8);
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v3);
  v1[19] = v4;
  v1[20] = v5;
  return swift_task_switch(sub_10019644C, v4, v5);
}

uint64_t sub_10019644C()
{
  if (qword_100643EA8 != -1) {
    swift_once(&qword_100643EA8, sub_10019570C);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_100645590);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Stopping Receive Compression Adapter", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 144);

  [*(id *)(v6 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_zipper) stop];
  unint64_t v7 = (void *)swift_task_alloc(dword_1006456B4);
  *(void *)(v0 + 16_Block_object_dispose(va, 8) = v7;
  *unint64_t v7 = v0;
  v7[1] = sub_100196564;
  return sub_100196980();
}

uint64_t sub_100196564()
{
  uint64_t v1 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 168));
  return swift_task_switch(sub_1001965B0, *(void *)(v1 + 152), *(void *)(v1 + 160));
}

uint64_t sub_1001965B0()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestinationProvider;
  *(void *)(v0 + 176) = OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestinationProvider;
  uint64_t v3 = v1 + v2;
  swift_beginAccess(v1 + v2, v0 + 96, 0LL, 0LL);
  if (*(void *)(v3 + 24))
  {
    sub_10019A6C4(v3, v0 + 56);
    uint64_t v4 = *(void *)(v0 + 80);
    uint64_t v5 = *(void *)(v0 + 88);
    *(void *)(v0 + 184) = v4;
    *(void *)(v0 + 192) = v5;
    *(void *)(v0 + 200) = sub_10019A708((void *)(v0 + 56), v4);
    *(void *)(v0 + 20_Block_object_dispose(va, 8) = *(void *)(v5 + 24);
    if (qword_100643F28 != -1) {
      swift_once(&qword_100643F28, sub_100205C24);
    }
    return swift_task_switch(sub_100196768, static AirDropActor.shared, 0LL);
  }

  else
  {
    uint64_t v7 = *(void *)(v0 + 144);
    uint64_t v8 = v7 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter;
    uint64_t v9 = *(void *)(v7 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter);
    *(void *)(v0 + 216) = v9;
    if (v9)
    {
      uint64_t v10 = *(void *)(v8 + 8);
      uint64_t ObjectType = swift_getObjectType(v9);
      uint64_t v12 = *(int **)(v10 + 24);
      uint64_t v13 = v12[1];
      uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t))((char *)v12 + *v12);
      swift_unknownObjectRetain(v9);
      uint64_t v14 = (void *)swift_task_alloc(v13);
      *(void *)(v0 + 224) = v14;
      *uint64_t v14 = v0;
      v14[1] = sub_1001968B0;
      return v16(ObjectType, v10);
    }

    else
    {
      uint64_t v15 = v7 + *(void *)(v0 + 176);
      *(_OWORD *)(v0 + 32) = 0u;
      *(void *)(v0 + 4_Block_object_dispose(va, 8) = 0LL;
      *(_OWORD *)(v0 + 16) = 0u;
      swift_beginAccess(v15, v0 + 120, 33LL, 0LL);
      sub_10019A67C(v0 + 16, v15);
      swift_endAccess(v0 + 120);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }

uint64_t sub_100196768()
{
  return swift_task_switch(sub_1001967A4, *(void *)(v0 + 152), *(void *)(v0 + 160));
}

uint64_t sub_1001967A4()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = v1 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter;
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter);
  *(void *)(v0 + 216) = v3;
  if (v3)
  {
    uint64_t v4 = *(void *)(v2 + 8);
    uint64_t ObjectType = swift_getObjectType(v3);
    uint64_t v6 = *(int **)(v4 + 24);
    uint64_t v7 = v6[1];
    os_log_type_t v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
    swift_unknownObjectRetain(v3);
    uint64_t v8 = (void *)swift_task_alloc(v7);
    *(void *)(v0 + 224) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_1001968B0;
    return v11(ObjectType, v4);
  }

  else
  {
    uint64_t v10 = v1 + *(void *)(v0 + 176);
    *(_OWORD *)(v0 + 32) = 0u;
    *(void *)(v0 + 4_Block_object_dispose(va, 8) = 0LL;
    *(_OWORD *)(v0 + 16) = 0u;
    swift_beginAccess(v10, v0 + 120, 33LL, 0LL);
    sub_10019A67C(v0 + 16, v10);
    swift_endAccess(v0 + 120);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1001968B0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 216);
  swift_task_dealloc(*(void *)(*v0 + 224));
  swift_unknownObjectRelease(v2);
  return swift_task_switch(sub_100196904, *(void *)(v1 + 152), *(void *)(v1 + 160));
}

uint64_t sub_100196904()
{
  uint64_t v1 = *(void *)(v0 + 144) + *(void *)(v0 + 176);
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 4_Block_object_dispose(va, 8) = 0LL;
  *(_OWORD *)(v0 + 16) = 0u;
  swift_beginAccess(v1, v0 + 120, 33LL, 0LL);
  sub_10019A67C(v0 + 16, v1);
  swift_endAccess(v0 + 120);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100196980()
{
  *(void *)(v1 + 64) = v0;
  uint64_t ObjectType = swift_getObjectType(v0);
  uint64_t v3 = sub_100183F14( &qword_1006456A8,  type metadata accessor for SDAirDropReceiveCompressionAdapter,  (uint64_t)&unk_1004CD4F8);
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v3);
  return swift_task_switch(sub_1001969F4, v4, v5);
}

uint64_t sub_1001969F4()
{
  uint64_t v1 = (id *)(*(void *)(v0 + 64)
            + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkOutputStream);
  swift_beginAccess(v1, v0 + 16, 1LL, 0LL);
  if (*v1)
  {
    id v2 = *v1;
    if ([v2 streamStatus] != (id)6 && objc_msgSend(v2, "streamStatus") != (id)7)
    {
      if (qword_100643EA8 != -1) {
        swift_once(&qword_100643EA8, sub_10019570C);
      }
      uint64_t v3 = type metadata accessor for Logger(0LL);
      uint64_t v4 = sub_100186DE4(v3, (uint64_t)qword_100645590);
      uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
      os_log_type_t v6 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "Closing output stream", v7, 2u);
        swift_slowDealloc(v7, -1LL, -1LL);
      }

      [v2 close];
      id v2 = *v1;
      *uint64_t v1 = 0LL;
    }
  }

  uint64_t v8 = (id *)(*(void *)(v0 + 64)
            + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkInputStream);
  swift_beginAccess(v8, v0 + 40, 1LL, 0LL);
  if (*v8)
  {
    id v9 = *v8;
    if ([v9 streamStatus] != (id)6 && objc_msgSend(v9, "streamStatus") != (id)7)
    {
      if (qword_100643EA8 != -1) {
        swift_once(&qword_100643EA8, sub_10019570C);
      }
      uint64_t v10 = type metadata accessor for Logger(0LL);
      uint64_t v11 = sub_100186DE4(v10, (uint64_t)qword_100645590);
      uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
      os_log_type_t v13 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Closing input stream", v14, 2u);
        swift_slowDealloc(v14, -1LL, -1LL);
      }

      [v9 close];
      id v9 = *v8;
      *uint64_t v8 = 0LL;
    }
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100196C84(uint64_t a1, uint64_t a2)
{
  id v2 = (id *)(a2 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkOutputStream);
  swift_beginAccess( a2 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkOutputStream,  v17,  0LL,  0LL);
  if (!*v2) {
    goto LABEL_4;
  }
  id v3 = *v2;
  if ([v3 streamStatus] == (id)6)
  {

LABEL_4:
    if (qword_100643EA8 != -1) {
      swift_once(&qword_100643EA8, sub_10019570C);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_100186DE4(v4, (uint64_t)qword_100645590);
    os_log_type_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Output stream closed", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    char v16 = 0;
    uint64_t v9 = sub_100183098(&qword_1006457B8);
    CheckedContinuation.resume(returning:)(&v16, v9);
    return;
  }

  if (([v3 hasSpaceAvailable] & 1) == 0)
  {
    do
    {
      if ([v3 streamStatus] == (id)6) {
        break;
      }
      if (qword_100643EA8 != -1) {
        swift_once(&qword_100643EA8, sub_10019570C);
      }
      uint64_t v11 = type metadata accessor for Logger(0LL);
      uint64_t v12 = sub_100186DE4(v11, (uint64_t)qword_100645590);
      os_log_type_t v13 = (os_log_s *)Logger.logObject.getter(v12);
      os_log_type_t v14 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "Buffer has no space, waiting for zipper to take bytes",  v15,  2u);
        swift_slowDealloc(v15, -1LL, -1LL);
      }
    }

    while (![v3 hasSpaceAvailable]);
  }

  char v16 = 1;
  uint64_t v10 = sub_100183098(&qword_1006457B8);
  CheckedContinuation.resume(returning:)(&v16, v10);
}

uint64_t sub_100196EFC(uint64_t a1, uint64_t a2)
{
  void v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  uint64_t ObjectType = swift_getObjectType(v2);
  uint64_t v5 = type metadata accessor for POSIXError(0LL);
  v3[11] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[12] = v6;
  v3[13] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100183F14( &qword_1006456A8,  type metadata accessor for SDAirDropReceiveCompressionAdapter,  (uint64_t)&unk_1004CD4F8);
  v3[14] = v7;
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v7);
  v3[15] = v8;
  uint8_t v3[16] = v9;
  return swift_task_switch(sub_100196FA0, v8, v9);
}

uint64_t sub_100196FA0()
{
  uint64_t v2 = *v1;
  *(void *)(v0 + 136) = *v1;
  if (v2) {
    __asm { BR              X11 }
  }

  uint64_t v3 = type metadata accessor for SFAirDropReceive.Failure(0LL);
  uint64_t v4 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
  swift_allocError(v3, v4, 0LL, 0LL);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v3 - 8) + 104LL))( v5,  enum case for SFAirDropReceive.Failure.streamError(_:),  v3);
  swift_willThrow(v6);
  swift_task_dealloc(*(void *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10019739C()
{
  if (v3 == *(unsigned __int8 *)(v2 + 78))
  {
    uint64_t v8 = *(void *)(v2 + 112);
    uint64_t v9 = *(void *)(v2 + 80);
    uint64_t v10 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(void *)(v2 + 176) = v10;
    *uint64_t v10 = v2;
    v10[1] = sub_1001977E0;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)( v2 + 196,  v9,  v8,  0xD000000000000014LL,  0x8000000100503F10LL,  sub_10019BAD0,  *(void *)(v2 + 80),  &type metadata for Bool);
  }

  if (!v5)
  {
    uint64_t v7 = *(unsigned __int8 *)(v2 + 78);
    goto LABEL_9;
  }

  if (v5 != 1)
  {
    uint64_t v12 = *(void *)(*(void *)v4 + 16LL);
    uint64_t v13 = *(void *)(*(void *)v4 + 24LL);
    uint64_t v7 = v13 - v12;
    if (!__OFSUB__(v13, v12)) {
      goto LABEL_9;
    }
LABEL_16:
    __break(1u);
    JUMPOUT(0x1001976B0LL);
  }

  int v6 = v4[1];
  if (__OFSUB__(v6, *v4))
  {
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v7 = v6 - *v4;
LABEL_9:
  if (v7 < v3)
  {
    __break(1u);
    JUMPOUT(0x100197698LL);
  }

  uint64_t v14 = Data.subdata(in:)(v3, v7, *(void *)(v2 + 64), *(void *)(v2 + 72));
  unint64_t v16 = v15;
  *(void *)(v2 + 144) = v14;
  *(void *)(v2 + 152) = v15;
  sub_10019BA8C(v14, v15);
  uint64_t v17 = sub_10019BA8C(v14, v16);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v25 = v1;
    uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v26 = swift_slowAlloc(32LL, -1LL);
    uint64_t v27 = v26;
    *(_DWORD *)uint64_t v20 = 136315138;
    sub_10019BA8C(v14, v16);
    uint64_t v21 = Data.description.getter(v14, v16);
    unint64_t v23 = v22;
    sub_100189B20(v14, v16);
    uint64_t *v0 = sub_10018CDB4(v21, v23, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0, v25, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease(v23);
    sub_100189B20(v14, v16);
    sub_100189B20(v14, v16);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Wrote remaining %s to output stream", v20, 0xCu);
    swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  else
  {
    sub_100189B20(v14, v16);
    sub_100189B20(v14, v16);
  }

  uint64_t v24 = (void *)swift_task_alloc(dword_100645794);
  *(void *)(v2 + 160) = v24;
  *uint64_t v24 = v2;
  v24[1] = sub_1001976E0;
  return sub_100196EFC(v14, v16);
}

uint64_t sub_1001976E0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 160);
  *(void *)(*v1 + 16_Block_object_dispose(va, 8) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_1001978BC;
  }
  else {
    uint64_t v4 = sub_100197740;
  }
  return swift_task_switch(v4, *(void *)(v2 + 120), *(void *)(v2 + 128));
}

uint64_t sub_100197740()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[10];
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[22] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1001977E0;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( (char *)v0 + 196,  v2,  v1,  0xD000000000000014LL,  0x8000000100503F10LL,  sub_10019BAD0,  v0[10],  &type metadata for Bool);
}

uint64_t sub_1001977E0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 176);
  *(void *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_100197880;
  }
  else {
    uint64_t v4 = sub_100197840;
  }
  return swift_task_switch(v4, *(void *)(v2 + 120), *(void *)(v2 + 128));
}

uint64_t sub_100197840()
{
  uint64_t v1 = *(void *)(v0 + 104);

  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100197880()
{
  swift_task_dealloc(*(void *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001978BC()
{
  uint64_t v1 = *(void **)(v0 + 136);
  sub_100189B20(*(void *)(v0 + 144), *(void *)(v0 + 152));

  swift_task_dealloc(*(void *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100197900()
{
  v1[8] = v0;
  uint64_t ObjectType = swift_getObjectType(v0);
  uint64_t v3 = sub_100183F14( &qword_1006456A8,  type metadata accessor for SDAirDropReceiveCompressionAdapter,  (uint64_t)&unk_1004CD4F8);
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v3);
  v1[9] = v4;
  v1[10] = v5;
  return swift_task_switch(sub_100197974, v4, v5);
}

uint64_t sub_100197974()
{
  uint64_t v2 = *v1;
  *(void *)(v0 + 8_Block_object_dispose(va, 8) = *v1;
  if (!v2) {
    goto LABEL_6;
  }
  swift_beginAccess(v3, v0 + 40, 0LL, 0LL);
  uint64_t v4 = *v3;
  *(void *)(v0 + 96) = v4;
  if (!v4) {
    goto LABEL_6;
  }
  id v5 = v2;
  id v6 = v4;
  if ([v5 streamStatus] == (id)6 || objc_msgSend(v5, "streamStatus") == (id)7)
  {

LABEL_6:
    if (qword_100643EA8 != -1) {
      swift_once(&qword_100643EA8, sub_10019570C);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    uint64_t v8 = sub_100186DE4(v7, (uint64_t)qword_100645590);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Streams not ready for close", v11, 2u);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

uint64_t sub_100197CC0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 104);
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_100197D58;
  }
  else {
    uint64_t v4 = sub_100197D20;
  }
  return swift_task_switch(v4, *(void *)(v2 + 72), *(void *)(v2 + 80));
}

uint64_t sub_100197D20()
{
  uint64_t v1 = *(void **)(v0 + 88);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100197D58()
{
  uint64_t v1 = *(void **)(v0 + 88);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100197D90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  void v5[4] = a5;
  v5[2] = a1;
  uint64_t v6 = sub_100183098((uint64_t *)&unk_100645130);
  uint64_t v7 = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter;
  v5[5] = v7;
  v5[6] = v8;
  uint64_t v9 = type metadata accessor for SDAirDropReceiveCompressionAdapter(0LL);
  uint64_t v10 = sub_100183F14( &qword_1006456A8,  type metadata accessor for SDAirDropReceiveCompressionAdapter,  (uint64_t)&unk_1004CD4F8);
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter(v9, v10);
  return swift_task_switch(sub_100197E38, v11, v12);
}

uint64_t sub_100197E38()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = (uint64_t *)(v1 + v0[6]);
  uint64_t v3 = *v2;
  v0[7] = *v2;
  if (!v3) {
    return swift_task_switch(sub_10019BAD8, 0LL, 0LL);
  }
  uint64_t v4 = v0[5];
  uint64_t v5 = v2[1];
  uint64_t ObjectType = swift_getObjectType(v3);
  uint64_t v7 = v1 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestination;
  swift_unknownObjectRetain(v3);
  sub_1001915A4(v7, v4, (uint64_t *)&unk_100645130);
  uint64_t v8 = *(int **)(v5 + 8);
  uint64_t v11 = (int *)((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc(v8[1]);
  v0[8] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_100197F28;
  return ((uint64_t (*)(void, void, uint64_t, uint64_t))v11)(v0[5], v0[4], ObjectType, v5);
}

uint64_t sub_100197F28()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 56LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 40LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 64LL));
  swift_unknownObjectRelease(v1);
  sub_100187100(v2, (uint64_t *)&unk_100645130);
  return swift_task_switch(sub_100197F98, 0LL, 0LL);
}

uint64_t sub_100197F98()
{
  uint64_t v1 = *(void *)(v0 + 40);
  **(_BYTE **)(v0 + 16) = *(void *)(v0 + 56) == 0LL;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100197FDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  _DWORD v4[2] = a1;
  v4[3] = a2;
  uint64_t ObjectType = swift_getObjectType(v3);
  uint64_t v6 = sub_100183098(&qword_1006457C8);
  v4[6] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[7] = v7;
  v4[8] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100183098((uint64_t *)&unk_1006456D0);
  void v4[9] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[10] = v9;
  v4[11] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100183F14( &qword_1006456A8,  type metadata accessor for SDAirDropReceiveCompressionAdapter,  (uint64_t)&unk_1004CD4F8);
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
  v4[12] = v11;
  v4[13] = v12;
  return swift_task_switch(sub_1001980AC, v11, v12);
}

uint64_t sub_1001980AC()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))( v1,  v0[5] + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_decompressionStartedContinuation,  v3);
  SFProgressContinuation.task.getter(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to SFProgressTask.finalValue.getter[1]);
  v0[14] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10019815C;
  return SFProgressTask.finalValue.getter(v0 + 28, v0[6]);
}

uint64_t sub_10019815C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 112);
  uint64_t v5 = *(void *)(*v1 + 56);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v6 = *(void *)(*v1 + 48);
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0) {
    uint64_t v7 = sub_100198C40;
  }
  else {
    uint64_t v7 = sub_1001981E4;
  }
  return swift_task_switch(v7, *(void *)(v2 + 96), *(void *)(v2 + 104));
}

uint64_t sub_1001981E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 40);
  uint64_t v4 = OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_delegate;
  *(void *)(v2 + 12_Block_object_dispose(va, 8) = OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_delegate;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3 + v4, a2);
  *(void *)(v2 + 136) = Strong;
  if (Strong)
  {
    uint64_t v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_100654EF0 + dword_100654EF0);
    uint64_t v6 = (void *)swift_task_alloc(unk_100654EF4);
    *(void *)(v2 + 144) = v6;
    *uint64_t v6 = v2;
    v6[1] = sub_1001984E8;
    return v30(*(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
  }

  else
  {
    uint64_t v8 = *(void *)(v2 + 40);
    uint64_t v9 = v8 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter;
    uint64_t v10 = *(void *)(v8 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter);
    *(void *)(v2 + 160) = v10;
    if (v10)
    {
      uint64_t v11 = *(void *)(v9 + 8);
      uint64_t ObjectType = swift_getObjectType(v10);
      uint64_t v13 = *(void *)(v8 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_totalExpectedBytes);
      uint64_t v14 = *(int **)(v11 + 16);
      uint64_t v15 = v14[1];
      uint64_t v31 = (int *)((char *)v14 + *v14);
      swift_unknownObjectRetain(v10);
      os_log_type_t v16 = (void *)swift_task_alloc(v15);
      *(void *)(v2 + 16_Block_object_dispose(va, 8) = v16;
      *os_log_type_t v16 = v2;
      v16[1] = sub_100198824;
      return ((uint64_t (*)(void, uint64_t, uint64_t, uint64_t))v31)( *(void *)(v2 + 24),  v13,  ObjectType,  v11);
    }

    else if (*(void *)(v8 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_totalExpectedBytes) != *(void *)(v2 + 24) {
           || *(void *)(v2 + 16) < 1LL)
    }
    {
      uint64_t v18 = *(void *)(v2 + 64);
      swift_task_dealloc(*(void *)(v2 + 88));
      swift_task_dealloc(v18);
      return (*(uint64_t (**)(void))(v2 + 8))();
    }

    else
    {
      if (qword_100643EA8 != -1) {
        swift_once(&qword_100643EA8, sub_10019570C);
      }
      uint64_t v19 = type metadata accessor for Logger(0LL);
      uint64_t v20 = sub_100186DE4(v19, (uint64_t)qword_100645590);
      uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        unint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)unint64_t v23 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "Received all expected bytes, closing streams after ASK response",  v23,  2u);
        swift_slowDealloc(v23, -1LL, -1LL);
      }

      uint64_t v24 = *(void *)(v2 + 128);
      uint64_t v25 = *(void *)(v2 + 40);

      uint64_t v27 = swift_unknownObjectWeakLoadStrong(v25 + v24, v26);
      *(void *)(v2 + 176) = v27;
      if (v27)
      {
        if (qword_100643F28 != -1) {
          swift_once(&qword_100643F28, sub_100205C24);
        }
        *(void *)(v2 + 184) = static AirDropActor.shared;
        uint64_t v28 = (void *)swift_task_alloc(dword_100654EEC);
        *(void *)(v2 + 192) = v28;
        *uint64_t v28 = v2;
        v28[1] = sub_100198A54;
        return sub_100427CA0(*(void *)(v2 + 40));
      }

      else
      {
        uint64_t v29 = (void *)swift_task_alloc(dword_1006457B4);
        *(void *)(v2 + 20_Block_object_dispose(va, 8) = v29;
        *uint64_t v29 = v2;
        v29[1] = sub_100198B54;
        return sub_100197900();
      }
    }
  }

uint64_t sub_1001984E8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 144);
  *(void *)(*v1 + 152) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 96);
    uint64_t v5 = *(void *)(v2 + 104);
    uint64_t v6 = sub_1001987DC;
  }

  else
  {

    uint64_t v4 = *(void *)(v2 + 96);
    uint64_t v5 = *(void *)(v2 + 104);
    uint64_t v6 = sub_100198554;
  }

  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100198554()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = v1 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter;
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter);
  *(void *)(v0 + 160) = v3;
  if (v3)
  {
    uint64_t v4 = *(void *)(v2 + 8);
    uint64_t ObjectType = swift_getObjectType(v3);
    uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_totalExpectedBytes);
    uint64_t v7 = *(int **)(v4 + 16);
    uint64_t v8 = v7[1];
    uint64_t v24 = (int *)((char *)v7 + *v7);
    swift_unknownObjectRetain(v3);
    uint64_t v9 = (void *)swift_task_alloc(v8);
    *(void *)(v0 + 16_Block_object_dispose(va, 8) = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_100198824;
    return ((uint64_t (*)(void, uint64_t, uint64_t, uint64_t))v24)(*(void *)(v0 + 24), v6, ObjectType, v4);
  }

  else if (*(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_totalExpectedBytes) != *(void *)(v0 + 24) {
         || *(void *)(v0 + 16) < 1LL)
  }
  {
    uint64_t v12 = *(void *)(v0 + 64);
    swift_task_dealloc(*(void *)(v0 + 88));
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    if (qword_100643EA8 != -1) {
      swift_once(&qword_100643EA8, sub_10019570C);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    uint64_t v14 = sub_100186DE4(v13, (uint64_t)qword_100645590);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "Received all expected bytes, closing streams after ASK response",  v17,  2u);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    uint64_t v18 = *(void *)(v0 + 128);
    uint64_t v19 = *(void *)(v0 + 40);

    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v19 + v18, v20);
    *(void *)(v0 + 176) = Strong;
    if (Strong)
    {
      if (qword_100643F28 != -1) {
        swift_once(&qword_100643F28, sub_100205C24);
      }
      *(void *)(v0 + 184) = static AirDropActor.shared;
      os_log_type_t v22 = (void *)swift_task_alloc(dword_100654EEC);
      *(void *)(v0 + 192) = v22;
      *os_log_type_t v22 = v0;
      v22[1] = sub_100198A54;
      return sub_100427CA0(*(void *)(v0 + 40));
    }

    else
    {
      unint64_t v23 = (void *)swift_task_alloc(dword_1006457B4);
      *(void *)(v0 + 20_Block_object_dispose(va, 8) = v23;
      *unint64_t v23 = v0;
      v23[1] = sub_100198B54;
      return sub_100197900();
    }
  }

uint64_t sub_1001987DC()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100198824()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 160);
  swift_task_dealloc(*(void *)(*v0 + 168));
  swift_unknownObjectRelease(v2);
  return swift_task_switch(sub_100198878, *(void *)(v1 + 96), *(void *)(v1 + 104));
}

uint64_t sub_100198878()
{
  if (*(void *)(*(void *)(v0 + 40)
                 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_totalExpectedBytes) != *(void *)(v0 + 24)
    || *(void *)(v0 + 16) < 1LL)
  {
    uint64_t v2 = *(void *)(v0 + 64);
    swift_task_dealloc(*(void *)(v0 + 88));
    swift_task_dealloc(v2);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    if (qword_100643EA8 != -1) {
      swift_once(&qword_100643EA8, sub_10019570C);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_100186DE4(v4, (uint64_t)qword_100645590);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "Received all expected bytes, closing streams after ASK response",  v8,  2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    uint64_t v9 = *(void *)(v0 + 128);
    uint64_t v10 = *(void *)(v0 + 40);

    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v10 + v9, v11);
    *(void *)(v0 + 176) = Strong;
    if (Strong)
    {
      if (qword_100643F28 != -1) {
        swift_once(&qword_100643F28, sub_100205C24);
      }
      *(void *)(v0 + 184) = static AirDropActor.shared;
      uint64_t v13 = (void *)swift_task_alloc(dword_100654EEC);
      *(void *)(v0 + 192) = v13;
      *uint64_t v13 = v0;
      v13[1] = sub_100198A54;
      return sub_100427CA0(*(void *)(v0 + 40));
    }

    else
    {
      uint64_t v14 = (void *)swift_task_alloc(dword_1006457B4);
      *(void *)(v0 + 20_Block_object_dispose(va, 8) = v14;
      *uint64_t v14 = v0;
      v14[1] = sub_100198B54;
      return sub_100197900();
    }
  }

uint64_t sub_100198A54()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 192LL);
  *(void *)(*(void *)v1 + 20swift_beginAccess(v1, v0 + 16, 1LL, 0LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = v2[12];
    uint64_t v5 = v2[13];
    uint64_t v6 = sub_100198B0C;
  }

  else
  {
    uint64_t v4 = v2[23];
    uint64_t v6 = sub_100198ABC;
    uint64_t v5 = 0LL;
  }

  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100198ABC()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1006457B4);
  *(void *)(v0 + 20_Block_object_dispose(va, 8) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100198B54;
  return sub_100197900();
}

uint64_t sub_100198B0C()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100198B54()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = *(void *)(*v1 + 208);
  uint64_t v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v5 = v2[11];
    uint64_t v6 = v2[8];
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v4 + 8))();
  }

  else
  {
    uint64_t v8 = (void *)swift_task_alloc(dword_1006456B4);
    v2[27] = v8;
    *uint64_t v8 = v4;
    v8[1] = sub_100198BE4;
    return sub_100196980();
  }

uint64_t sub_100198BE4()
{
  uint64_t v1 = *v0;
  uint64_t v5 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 216));
  uint64_t v2 = *(void *)(v1 + 88);
  uint64_t v3 = *(void *)(v1 + 64);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_100198C40()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100198C80(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  uint64_t ObjectType = swift_getObjectType(v2);
  uint64_t v5 = sub_100183098(&qword_1006457D8);
  v3[15] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint8_t v3[16] = v6;
  v3[17] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URL(0LL);
  v3[18] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[19] = v8;
  v3[20] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100183F14( &qword_1006456A8,  type metadata accessor for SDAirDropReceiveCompressionAdapter,  (uint64_t)&unk_1004CD4F8);
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v9);
  v3[21] = v10;
  v3[22] = v11;
  return swift_task_switch(sub_100198D4C, v10, v11);
}

uint64_t sub_100198D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2[14];
  uint64_t v4 = OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_delegate;
  v2[23] = OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_delegate;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3 + v4, a2);
  uint8_t v2[24] = Strong;
  if (Strong)
  {
    if (qword_100643F28 != -1) {
      swift_once(&qword_100643F28, sub_100205C24);
    }
    v2[25] = static AirDropActor.shared;
    uint64_t v6 = (uint64_t **)swift_task_alloc(dword_100654EEC);
    v2[26] = (uint64_t)v6;
    *uint64_t v6 = v2;
    v6[1] = (uint64_t *)sub_100198E28;
    return sub_100427CA0(v2[14]);
  }

  else
  {
    uint64_t v8 = (uint64_t **)swift_task_alloc(dword_1006457B4);
    v2[28] = (uint64_t)v8;
    *uint64_t v8 = v2;
    v8[1] = (uint64_t *)sub_100198F28;
    return sub_100197900();
  }

uint64_t sub_100198E28()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 208LL);
  *(void *)(*(void *)v1 + 216LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = v2[21];
    uint64_t v5 = v2[22];
    uint64_t v6 = sub_100198EE0;
  }

  else
  {
    uint64_t v4 = v2[25];
    uint64_t v6 = sub_100198E90;
    uint64_t v5 = 0LL;
  }

  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100198E90()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1006457B4);
  *(void *)(v0 + 224) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100198F28;
  return sub_100197900();
}

uint64_t sub_100198EE0()
{
  uint64_t v1 = *(void *)(v0 + 136);
  swift_task_dealloc(*(void *)(v0 + 160));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100198F28()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = *(void *)(*v1 + 224);
  uint64_t v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v5 = v2[20];
    uint64_t v6 = v2[17];
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v4 + 8))();
  }

  else
  {
    uint64_t v8 = (void *)swift_task_alloc(dword_1006456B4);
    v2[29] = v8;
    *uint64_t v8 = v4;
    v8[1] = sub_100198FB8;
    return sub_100196980();
  }

uint64_t sub_100198FB8()
{
  uint64_t v1 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 232));
  return swift_task_switch(sub_100199004, *(void *)(v1 + 168), *(void *)(v1 + 176));
}

uint64_t sub_100199004()
{
  uint64_t v2 = v0 + 96;
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v3 = v0 + 56;
  int64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (unint64_t *)&_swiftEmptyArrayStorage;
  if (v4)
  {
    uint64_t v6 = *(void *)(v0 + 152);
    unint64_t v58 = (unint64_t *)&_swiftEmptyArrayStorage;
    sub_10018D718(0, v4, 0);
    uint64_t v5 = (unint64_t *)&_swiftEmptyArrayStorage;
    unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v8 = v1 + v7;
    uint64_t v9 = *(void *)(v6 + 72);
    uint64_t v10 = *(void (**)(void, uint64_t, void))(v6 + 16);
    do
    {
      v10(*(void *)(v0 + 160), v8, *(void *)(v0 + 144));
      unint64_t v58 = v5;
      unint64_t v12 = v5[2];
      unint64_t v11 = v5[3];
      if (v12 >= v11 >> 1)
      {
        sub_10018D718(v11 > 1, v12 + 1, 1);
        uint64_t v5 = v58;
      }

      uint64_t v13 = *(void *)(v0 + 160);
      uint64_t v14 = *(void *)(v0 + 144);
      v5[2] = v12 + 1;
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))((char *)v5 + v7 + v12 * v9, v13, v14);
      v8 += v9;
      --v4;
    }

    while (v4);
    uint64_t v3 = v0 + 56;
    uint64_t v2 = v0 + 96;
  }

  *(void *)(v0 + 240) = v5;
  uint64_t v15 = *(void *)(v0 + 112)
      + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestinationProvider;
  swift_beginAccess(v15, v3, 0LL, 0LL);
  if (*(void *)(v15 + 24))
  {
    sub_10019A6C4(v15, v2 - 80);
    uint64_t v16 = *(void *)(v0 + 40);
    uint64_t v17 = *(void *)(v0 + 48);
    *(void *)(v0 + 24_Block_object_dispose(va, 8) = v16;
    *(void *)(v0 + 256) = v17;
    *(void *)(v0 + 264) = sub_10019A708((void *)(v2 - 80), v16);
    *(void *)(v0 + 272) = *(void *)(v17 + 24);
    if (qword_100643F28 != -1) {
      swift_once(&qword_100643F28, sub_100205C24);
    }
    uint64_t v18 = static AirDropActor.shared;
    uint64_t v19 = sub_1001995E0;
    return swift_task_switch(v19, v18, 0LL);
  }

  uint64_t v21 = (uint64_t *)(v2 - 8);
  uint64_t v22 = *(void *)(v0 + 104);
  if (v22)
  {
    uint64_t v23 = *(void *)(v0 + 240);
    swift_errorRetain(*(void *)(v0 + 104));
    swift_bridgeObjectRelease(v23);
    if (qword_100643EA8 != -1) {
      swift_once(&qword_100643EA8, sub_10019570C);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    sub_100186DE4(v24, (uint64_t)qword_100645590);
    swift_errorRetain(v22);
    uint64_t v25 = swift_errorRetain(v22);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v55 = v2;
      uint64_t v29 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v28 = 138412290;
      swift_errorRetain(v22);
      uint64_t v30 = _swift_stdlib_bridgeErrorToNSError(v22);
      *uint64_t v21 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v21, v55, v28 + 4, v28 + 12);
      *uint64_t v29 = v30;
      swift_errorRelease(v22);
      swift_errorRelease(v22);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Decompression failed %@", v28, 0xCu);
      uint64_t v31 = sub_100183098(&qword_1006454E0);
      swift_arrayDestroy(v29, 1LL, v31);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v22);
      swift_errorRelease(v22);
    }

    uint64_t v46 = *(void *)(v0 + 184);
    uint64_t v47 = *(void *)(v0 + 112);

    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v47 + v46, v48);
    *(void *)(v0 + 280) = Strong;
    if (Strong)
    {
      if (qword_100643F28 != -1) {
        swift_once(&qword_100643F28, sub_100205C24);
      }
      uint64_t v18 = static AirDropActor.shared;
      *(void *)(v0 + 28_Block_object_dispose(va, 8) = static AirDropActor.shared;
      uint64_t v19 = sub_100199A94;
      return swift_task_switch(v19, v18, 0LL);
    }

    swift_errorRelease(v22);
  }

  else
  {
    if (qword_100643EA8 != -1) {
      swift_once(&qword_100643EA8, sub_10019570C);
    }
    uint64_t v32 = *(void *)(v0 + 240);
    uint64_t v33 = type metadata accessor for Logger(0LL);
    sub_100186DE4(v33, (uint64_t)qword_100645590);
    uint64_t v34 = swift_bridgeObjectRetain_n(v32, 2LL);
    id v35 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v36 = static os_log_type_t.default.getter();
    BOOL v37 = os_log_type_enabled(v35, v36);
    uint64_t v38 = *(void *)(v0 + 240);
    if (v37)
    {
      uint64_t v56 = v2 - 16;
      uint64_t v39 = *(void *)(v0 + 144);
      __int128 v54 = v21;
      uint64_t v40 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v41 = (unint64_t *)swift_slowAlloc(32LL, -1LL);
      unint64_t v58 = v41;
      *(_DWORD *)uint64_t v40 = 136315138;
      uint64_t v42 = swift_bridgeObjectRetain(v38);
      uint64_t v43 = Array.description.getter(v42, v39);
      unint64_t v45 = v44;
      swift_bridgeObjectRelease(v38);
      *(void *)(v0 + 80) = sub_10018CDB4(v43, v45, (uint64_t *)&v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v56, v54, v40 + 4, v40 + 12);
      swift_bridgeObjectRelease(v45);
      swift_bridgeObjectRelease_n(v38, 2LL);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Decompression succeeded %s", v40, 0xCu);
      swift_arrayDestroy(v41, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1LL, -1LL);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 240), 2LL);
    }

    uint64_t v51 = swift_unknownObjectWeakLoadStrong(*(void *)(v0 + 112) + *(void *)(v0 + 184), v50);
    *(void *)(v0 + 312) = v51;
    if (v51)
    {
      unint64_t v57 = (uint64_t (*)(uint64_t))((char *)&dword_100654EF8 + dword_100654EF8);
      __int128 v52 = (void *)swift_task_alloc(unk_100654EFC);
      *(void *)(v0 + 320) = v52;
      *__int128 v52 = v0;
      v52[1] = sub_100199C74;
      return v57(*(void *)(v0 + 240));
    }

    swift_bridgeObjectRelease(*(void *)(v0 + 240));
  }

  uint64_t v53 = *(void *)(v0 + 136);
  swift_task_dealloc(*(void *)(v0 + 160));
  swift_task_dealloc(v53);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001995E0()
{
  return swift_task_switch(sub_10019961C, *(void *)(v0 + 168), *(void *)(v0 + 176));
}

uint64_t sub_10019961C()
{
  uint64_t v1 = *(void *)(v0 + 104);
  if (!v1)
  {
    if (qword_100643EA8 != -1) {
      swift_once(&qword_100643EA8, sub_10019570C);
    }
    uint64_t v11 = *(void *)(v0 + 240);
    uint64_t v12 = type metadata accessor for Logger(0LL);
    sub_100186DE4(v12, (uint64_t)qword_100645590);
    uint64_t v13 = swift_bridgeObjectRetain_n(v11, 2LL);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.default.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    uint64_t v17 = *(void *)(v0 + 240);
    if (v16)
    {
      uint64_t v18 = *(void *)(v0 + 144);
      uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v20 = swift_slowAlloc(32LL, -1LL);
      uint64_t v36 = v20;
      *(_DWORD *)uint64_t v19 = 136315138;
      uint64_t v21 = swift_bridgeObjectRetain(v17);
      uint64_t v22 = Array.description.getter(v21, v18);
      unint64_t v24 = v23;
      swift_bridgeObjectRelease(v17);
      *(void *)(v0 + 80) = sub_10018CDB4(v22, v24, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease_n(v17, 2LL);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Decompression succeeded %s", v19, 0xCu);
      swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 240), 2LL);
    }

    uint64_t Strong = swift_unknownObjectWeakLoadStrong(*(void *)(v0 + 112) + *(void *)(v0 + 184), v31);
    *(void *)(v0 + 312) = Strong;
    if (Strong)
    {
      id v35 = (uint64_t (*)(uint64_t))((char *)&dword_100654EF8 + dword_100654EF8);
      uint64_t v33 = (void *)swift_task_alloc(unk_100654EFC);
      *(void *)(v0 + 320) = v33;
      *uint64_t v33 = v0;
      v33[1] = sub_100199C74;
      return v35(*(void *)(v0 + 240));
    }

    swift_bridgeObjectRelease(*(void *)(v0 + 240));
    goto LABEL_20;
  }

  uint64_t v2 = *(void *)(v0 + 240);
  swift_errorRetain(*(void *)(v0 + 104));
  swift_bridgeObjectRelease(v2);
  if (qword_100643EA8 != -1) {
    swift_once(&qword_100643EA8, sub_10019570C);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v3, (uint64_t)qword_100645590);
  swift_errorRetain(v1);
  uint64_t v4 = swift_errorRetain(v1);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    unint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)unint64_t v7 = 138412290;
    swift_errorRetain(v1);
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 8_Block_object_dispose(va, 8) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v7 + 4, v7 + 12);
    *uint64_t v8 = v9;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Decompression failed %@", v7, 0xCu);
    uint64_t v10 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v8, 1LL, v10);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v25 = *(void *)(v0 + 184);
  uint64_t v26 = *(void *)(v0 + 112);

  uint64_t v28 = swift_unknownObjectWeakLoadStrong(v26 + v25, v27);
  *(void *)(v0 + 280) = v28;
  if (!v28)
  {
    swift_errorRelease(v1);
LABEL_20:
    uint64_t v34 = *(void *)(v0 + 136);
    swift_task_dealloc(*(void *)(v0 + 160));
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v29 = static AirDropActor.shared;
  *(void *)(v0 + 28_Block_object_dispose(va, 8) = static AirDropActor.shared;
  return swift_task_switch(sub_100199A94, v29, 0LL);
}

uint64_t sub_100199A94()
{
  uint64_t v1 = v0[35];
  uint64_t v3 = v0[16];
  uint64_t v2 = v0[17];
  uint64_t v4 = v0[15];
  uint64_t v5 = v0[13];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))( v2,  v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_transferContinuation,  v4);
  SFProgressContinuation.fail(with:)(v5, v4);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong( v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_delegate,  v6);
  v0[37] = Strong;
  uint64_t v8 = (void *)v0[35];
  if (Strong)
  {
    uint64_t v9 = (uint64_t)v8 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_serverConnectionIdentity;
    uint64_t v10 = (uint64_t **)swift_task_alloc(dword_10064973C);
    v0[38] = (uint64_t)v10;
    *uint64_t v10 = v0;
    v10[1] = (uint64_t *)sub_100199B94;
    return sub_10022EC74(v9, v0[13]);
  }

  else
  {

    return swift_task_switch(sub_100199C2C, v0[21], v0[22]);
  }

uint64_t sub_100199B94()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 296LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 288LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 304LL));
  swift_unknownObjectRelease(v1);
  return swift_task_switch(sub_100199BF4, v2, 0LL);
}

uint64_t sub_100199BF4()
{
  return swift_task_switch(sub_100199C2C, *(void *)(v0 + 168), *(void *)(v0 + 176));
}

uint64_t sub_100199C2C()
{
  uint64_t v1 = *(void *)(v0 + 136);
  swift_task_dealloc(*(void *)(v0 + 160));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100199C74()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void **)(*v0 + 312);
  uint64_t v3 = *(void *)(*v0 + 240);
  uint64_t v6 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 320));

  swift_bridgeObjectRelease(v3);
  uint64_t v4 = *(void *)(v1 + 136);
  swift_task_dealloc(*(void *)(v1 + 160));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t URL.quarantine()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(a1, v1, v3);
}

uint64_t sub_100199D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _DWORD v4[2] = a4;
  uint64_t ObjectType = swift_getObjectType(a4);
  uint64_t v6 = sub_100183098((uint64_t *)&unk_1006456D0);
  v4[3] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[4] = v7;
  v4[5] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100183F14( &qword_1006456A8,  type metadata accessor for SDAirDropReceiveCompressionAdapter,  (uint64_t)&unk_1004CD4F8);
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v8);
  v4[6] = v9;
  v4[7] = v10;
  return swift_task_switch(sub_100199DC0, v9, v10);
}

uint64_t sub_100199DC0()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))( v1,  v4 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_decompressionStartedContinuation,  v3);
  *(_BYTE *)(v0 + 96) = 1;
  SFProgressContinuation.finish(with:)(v0 + 96, v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong( v4 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_delegate,  v5);
  *(void *)(v0 + 64) = Strong;
  if (Strong)
  {
    if (qword_100643F28 != -1) {
      swift_once(&qword_100643F28, sub_100205C24);
    }
    *(void *)(v0 + 72) = static AirDropActor.shared;
    uint64_t v7 = (void *)swift_task_alloc(dword_100654EE4);
    *(void *)(v0 + 80) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100199EE0;
    return sub_100426548(*(void *)(v0 + 16));
  }

  else
  {
    swift_task_dealloc(*(void *)(v0 + 40));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100199EE0()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 80LL);
  *(void *)(*(void *)v1 + 88LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = v2[6];
    uint64_t v5 = v2[7];
    uint64_t v6 = sub_100199F84;
  }

  else
  {
    uint64_t v4 = v2[9];
    uint64_t v6 = sub_100199F48;
    uint64_t v5 = 0LL;
  }

  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100199F48()
{
  swift_task_dealloc(*(void *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100199F84()
{
  uint64_t v1 = *(void *)(v0 + 40);

  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100199FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = (void *)swift_task_alloc(dword_1006457C4);
  *(void *)(v7 + 16) = v11;
  *uint64_t v11 = v7;
  v11[1] = sub_1001943E8;
  return sub_100197FDC(a5, a6, a7);
}

uint64_t sub_10019A030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return swift_task_switch(sub_10019A048, 0LL, 0LL);
}

uint64_t sub_10019A048()
{
  uint64_t v1 = type metadata accessor for SFAirDropReceive.Failure(0LL);
  uint64_t v2 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
  uint64_t v3 = swift_allocError(v1, v2, 0LL, 0LL);
  *(void *)(v0 + 24) = v3;
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v1 - 8) + 104LL))( v4,  enum case for SFAirDropReceive.Failure.incompleteTransfer(_:),  v1);
  uint64_t v5 = (void *)swift_task_alloc(dword_1006457D4);
  *(void *)(v0 + 32) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10019A104;
  return sub_100198C80((uint64_t)&_swiftEmptyArrayStorage, v3);
}

uint64_t sub_10019A104()
{
  uint64_t v2 = *(void *)(*v1 + 32);
  uint64_t v3 = *v1;
  *(void *)(v3 + 40) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_10019A178, 0LL, 0LL);
  }
  swift_errorRelease(*(void *)(v3 + 24));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10019A178()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10019A1AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_1006457D4);
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_100195708;
  return sub_100198C80(a5, 0LL);
}

uint64_t sub_10019A204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_1006457D4);
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_100195708;
  return sub_100198C80((uint64_t)&_swiftEmptyArrayStorage, a5);
}

uint64_t sub_10019A300()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_receiveID;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);

  sub_100187100( v0 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestinationProvider,  &qword_1006456B8);
  sub_100187100( v0 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_downloadDestination,  (uint64_t *)&unk_100645130);
  swift_unknownObjectRelease(*(void *)(v0
                                       + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_progressReporter));

  sub_100195658(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_delegate);
  sub_100195658(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_receiveServiceDelegate);

  uint64_t v3 = v0 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_decompressionStartedContinuation;
  uint64_t v4 = sub_100183098((uint64_t *)&unk_1006456D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);
  return v0;
}

uint64_t sub_10019A420()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)((swift_isaMask & *v0) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v0) + 0x34LL));
}

uint64_t sub_10019A454()
{
  return type metadata accessor for SDAirDropReceiveCompressionAdapter(0LL);
}

uint64_t type metadata accessor for SDAirDropReceiveCompressionAdapter(uint64_t a1)
{
  uint64_t result = qword_100645680;
  if (!qword_100645680) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SDAirDropReceiveCompressionAdapter);
  }
  return result;
}

void sub_10019A498(uint64_t a1)
{
  uint64_t v2 = _s14descr1005DF7D1C10AskRequestVMa(319LL);
  if (v3 <= 0x3F)
  {
    v10[0] = *(void *)(v2 - 8) + 64LL;
    uint64_t v4 = type metadata accessor for UUID(319LL);
    if (v5 <= 0x3F)
    {
      v10[1] = *(void *)(v4 - 8) + 64LL;
      v10[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v10[3] = "(";
      sub_10019A5A0(319LL);
      if (v7 <= 0x3F)
      {
        void v10[4] = *(void *)(v6 - 8) + 64LL;
        void v10[5] = &unk_1004CD4B0;
        v10[6] = (char *)&value witness table for Builtin.Int64 + 64;
        v10[7] = (char *)&value witness table for Builtin.Int64 + 64;
        v10[8] = &unk_1004CD4C8;
        v10[9] = &unk_1004CD4C8;
        v10[10] = (char *)&value witness table for Builtin.Int64 + 64;
        v10[11] = &unk_1004CD4E0;
        v10[12] = &unk_1004CD4E0;
        v10[13] = (char *)&value witness table for Builtin.UnknownObject + 64;
        sub_10019A5F4();
        if (v9 <= 0x3F)
        {
          v10[14] = *(void *)(v8 - 8) + 64LL;
          swift_updateClassMetadata2(a1, 256LL, 15LL, v10, a1 + 80);
        }
      }
    }
  }

void sub_10019A5A0(uint64_t a1)
{
  if (!qword_100645690)
  {
    uint64_t v2 = type metadata accessor for URL(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_100645690);
    }
  }

void sub_10019A5F4()
{
  if (!qword_100645698)
  {
    unint64_t v0 = type metadata accessor for SFProgressContinuation( 0LL,  (char *)&type metadata for () + 8,  &type metadata for Bool);
    if (!v1) {
      atomic_store(v0, &qword_100645698);
    }
  }

uint64_t sub_10019A654()
{
  return OS_dispatch_queue_serial_executor.asUnownedSerialExecutor()();
}

uint64_t sub_10019A67C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100183098(&qword_1006456B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10019A6C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void *sub_10019A708(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

unint64_t sub_10019A72C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100183098(&qword_1006457A0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_1001915A4(v7, (uint64_t)&v16, &qword_1006457A8);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_10019A860(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_100186D8C(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    _DWORD v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10019A860(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = Hasher._finalize()();
  return sub_10019A8C4(a1, a2, v4);
}

unint64_t sub_10019A8C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * i);
    uint64_t v11 = v10[1];
    if ((*v10 != a1 || v11 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      unint64_t i = (i + 1) & v13;
      if (((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
      {
        BOOL v14 = (void *)(v9 + 16 * i);
        uint64_t v15 = v14[1];
        if ((*v14 != a1 || v15 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v13; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v13)
          {
            uint64_t v17 = (void *)(v9 + 16 * i);
            uint64_t v18 = v17[1];
            if (*v17 == a1 && v18 == a2) {
              break;
            }
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0) {
              break;
            }
          }
        }
      }
    }
  }

  return i;
}

uint64_t sub_10019AA08()
{
  *(void *)(v1 + 12_Block_object_dispose(va, 8) = v0;
  uint64_t ObjectType = swift_getObjectType(v0);
  uint64_t v3 = sub_100183F14( &qword_1006456A8,  type metadata accessor for SDAirDropReceiveCompressionAdapter,  (uint64_t)&unk_1004CD4F8);
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v3);
  return swift_task_switch(sub_10019AAB0, v4, v5);
}

uint64_t sub_10019AAB0()
{
  if (qword_100643EA8 != -1) {
    swift_once(&qword_100643EA8, sub_10019570C);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_100645590);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Starting Receive Compression Adapter", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 128);

  uint64_t v7 = (void *)(v6 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkInputStream);
  swift_beginAccess( v6 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkInputStream,  v0 + 16,  0LL,  0LL);
  if (*v7) {
    goto LABEL_7;
  }
  uint64_t v8 = (void *)(*(void *)(v0 + 128)
                + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropReceiveCompressionAdapter_networkOutputStream);
  swift_beginAccess(v8, v0 + 40, 0LL, 0LL);
  if (*v8) {
    goto LABEL_7;
  }
  BOOL v14 = (void *)objc_opt_self(&OBJC_CLASS___NSStream);
  swift_beginAccess(v7, v0 + 64, 33LL, 0LL);
  *(void *)(v0 + 112) = *v7;
  *(void *)&double v15 = swift_beginAccess(v8, v0 + 88, 33LL, 0LL).n128_u64[0];
  *(void *)(v0 + 120) = *v8;
  objc_msgSend(v14, "getBoundStreamsWithBufferSize:inputStream:outputStream:", 3145728, v0 + 112, v0 + 120, v15);
  uint64_t v16 = *(void **)(v0 + 120);
  uint64_t v17 = (void *)*v8;
  *uint64_t v8 = v16;
  swift_endAccess(v0 + 88);
  uint64_t v18 = *(void **)(v0 + 112);
  uint64_t v19 = (void *)*v7;
  *uint64_t v7 = v18;
  swift_endAccess(v0 + 64);
  id v20 = v16;
  id v21 = v18;

  uint64_t v22 = (void *)*v7;
  if (!*v7 || (unint64_t v23 = (void *)*v8) == 0LL)
  {
LABEL_7:
    uint64_t v9 = type metadata accessor for SFAirDropReceive.Failure(0LL);
    uint64_t v10 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
    swift_allocError(v9, v10, 0LL, 0LL);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v9 - 8) + 104LL))( v11,  enum case for SFAirDropReceive.Failure.streamError(_:),  v9);
    swift_willThrow(v12);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v24 = qword_100643F28;
    id v25 = v22;
    id v26 = v23;
    if (v24 != -1) {
      swift_once(&qword_100643F28, sub_100205C24);
    }
    return swift_task_switch(sub_10019ADC4, static AirDropActor.shared, 0LL);
  }

uint64_t sub_10019ADC4()
{
  return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000022LL,  0x8000000100503DB0LL,  "DaemoniOSLibrary/SDAirDropDownloadDestinationProvider.swift",  59LL,  2LL,  41LL,  0);
}

unint64_t sub_10019AE5C()
{
  unint64_t result = qword_100645560;
  if (!qword_100645560)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue_serial);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100645560);
  }

  return result;
}

uint64_t sub_10019AE98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s14descr1005DF7D1C10AskRequestVMa(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10019AEDC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10019AF00(uint64_t a1)
{
  return sub_100196004(a1, v1);
}

uint64_t sub_10019AF08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10019AF18(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10019AF20(uint64_t a1)
{
  uint64_t v2 = _s14descr1005DF7D1C10AskRequestVMa(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *sub_10019AF5C(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  swift_bridgeObjectRetain(a1[9]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *sub_10019AFB0(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[9];
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_10019B004()
{
  return sub_10019B8C8((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10019B010(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_100645704);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1001943E8;
  return sub_100197D90(a1, v4, v5, v7, v6);
}

void sub_10019B088(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100183098(&qword_100646560);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643EA8 != -1) {
    swift_once(&qword_100643EA8, sub_10019570C);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = sub_100186DE4(v9, (uint64_t)qword_100645590);
  uint64_t v11 = swift_unknownObjectRetain_n(a2, 2LL);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v60 = v10;
    BOOL v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v61 = v8;
    v62[0] = v15;
    uint64_t v16 = v15;
    *(_DWORD *)BOOL v14 = 136315138;
    uint64_t v63 = a2;
    swift_unknownObjectRetain(a2);
    uint64_t v17 = String.init<A>(describing:)(&v63, (char *)&type metadata for Swift.AnyObject + 8);
    unint64_t v19 = v18;
    uint64_t v63 = sub_10018CDB4(v17, v18, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v19);
    swift_unknownObjectRelease_n(a2, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Zipper Update: %s", v14, 0xCu);
    swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v20 = v16;
    uint64_t v8 = v61;
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {
    swift_unknownObjectRelease_n(a2, 2LL);
  }

  switch(a1)
  {
    case 5LL:
      uint64_t v21 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v8, 1LL, 1LL, v21);
      uint64_t v22 = (void *)swift_allocObject(&unk_1005D2C48, 40LL, 7LL);
      _OWORD v22[2] = 0LL;
      v22[3] = 0LL;
      v22[4] = v3;
      swift_retain(v3);
      unint64_t v23 = &unk_100645788;
      goto LABEL_31;
    case 7LL:
      v62[0] = a2;
      swift_unknownObjectRetain(a2);
      uint64_t v24 = sub_100183098((uint64_t *)&unk_100645750);
      uint64_t v25 = swift_dynamicCast(&v63, v62, (char *)&type metadata for Swift.AnyObject + 8, v24, 6LL);
      if ((v25 & 1) == 0) {
        goto LABEL_24;
      }
      uint64_t v26 = v63;
      uint64_t v63 = kSFOperationFilesCopiedKey;
      id v27 = kSFOperationFilesCopiedKey;
      uint64_t v28 = sub_100183098(&qword_100645400);
      unint64_t v29 = sub_1001914D0();
      AnyHashable.init<A>(_:)(v62, &v63, v28, v29);
      if (!*(void *)(v26 + 16)
        || (unint64_t v30 = sub_1003AD50C((uint64_t)v62), (v31 & 1) == 0)
        || (uint64_t v32 = *(void *)(*(void *)(v26 + 56) + 8 * v30),
            sub_10019154C((uint64_t)v62),
            uint64_t v63 = kSFOperationBytesCopiedKey,
            id v33 = kSFOperationBytesCopiedKey,
            AnyHashable.init<A>(_:)(v62, &v63, v28, v29),
            !*(void *)(v26 + 16))
        || (unint64_t v34 = sub_1003AD50C((uint64_t)v62), (v35 & 1) == 0))
      {
        sub_10019154C((uint64_t)v62);
        uint64_t v25 = swift_bridgeObjectRelease(v26);
LABEL_24:
        __int128 v52 = (os_log_s *)Logger.logObject.getter(v25);
        os_log_type_t v53 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v52, v53))
        {
          __int128 v54 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)__int128 v54 = 0;
          _os_log_impl((void *)&_mh_execute_header, v52, v53, "Unknown progress info", v54, 2u);
          swift_slowDealloc(v54, -1LL, -1LL);
        }

        return;
      }

      uint64_t v36 = *(void *)(*(void *)(v26 + 56) + 8 * v34);
      sub_10019154C((uint64_t)v62);
      uint64_t v63 = kSFOperationTimeRemainingKey;
      id v37 = kSFOperationTimeRemainingKey;
      AnyHashable.init<A>(_:)(v62, &v63, v28, v29);
      if (!*(void *)(v26 + 16) || (unint64_t v38 = sub_1003AD50C((uint64_t)v62), (v39 & 1) == 0))
      {
        swift_bridgeObjectRelease(v26);
        uint64_t v25 = sub_10019154C((uint64_t)v62);
        goto LABEL_24;
      }

      uint64_t v40 = *(void *)(*(void *)(v26 + 56) + 8 * v38);
      swift_bridgeObjectRelease(v26);
      sub_10019154C((uint64_t)v62);
      uint64_t v41 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56LL))(v8, 1LL, 1LL, v41);
      uint64_t v22 = (void *)swift_allocObject(&unk_1005D2C20, 64LL, 7LL);
      _OWORD v22[2] = 0LL;
      v22[3] = 0LL;
      v22[4] = v3;
      void v22[5] = v32;
      v22[6] = v36;
      v22[7] = v40;
      swift_retain(v3);
      unint64_t v23 = &unk_100645778;
LABEL_31:
      uint64_t v59 = sub_1001B341C((uint64_t)v8, (uint64_t)v23, (uint64_t)v22);
      swift_release(v59);
      return;
    case 9LL:
      v62[0] = a2;
      swift_unknownObjectRetain(a2);
      uint64_t v42 = sub_100183098((uint64_t *)&unk_1006464E0);
      uint64_t v43 = swift_dynamicCast(&v63, v62, (char *)&type metadata for Swift.AnyObject + 8, v42, 6LL);
      if ((v43 & 1) == 0) {
        goto LABEL_28;
      }
      uint64_t v44 = v63;
      if (*(void *)(v63 + 16))
      {
        uint64_t v45 = type metadata accessor for TaskPriority(0LL);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56LL))(v8, 1LL, 1LL, v45);
        uint64_t v22 = (void *)swift_allocObject(&unk_1005D2BF8, 48LL, 7LL);
        _OWORD v22[2] = 0LL;
        v22[3] = 0LL;
        v22[4] = v3;
        void v22[5] = v44;
        swift_retain(v3);
        unint64_t v23 = &unk_100645748;
      }

      else
      {
        uint64_t v43 = swift_bridgeObjectRelease(v63);
LABEL_28:
        uint64_t v55 = (os_log_s *)Logger.logObject.getter(v43);
        os_log_type_t v56 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v55, v56))
        {
          unint64_t v57 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)unint64_t v57 = 0;
          _os_log_impl((void *)&_mh_execute_header, v55, v56, "Invalid completed URLs", v57, 2u);
          swift_slowDealloc(v57, -1LL, -1LL);
        }

        uint64_t v58 = type metadata accessor for TaskPriority(0LL);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56LL))(v8, 1LL, 1LL, v58);
        uint64_t v22 = (void *)swift_allocObject(&unk_1005D2BD0, 40LL, 7LL);
        _OWORD v22[2] = 0LL;
        v22[3] = 0LL;
        v22[4] = v3;
        swift_retain(v3);
        unint64_t v23 = &unk_100645738;
      }

      goto LABEL_31;
    case 10LL:
      v62[0] = a2;
      swift_unknownObjectRetain(a2);
      uint64_t v46 = sub_100183098(&qword_100645710);
      if (swift_dynamicCast(&v63, v62, (char *)&type metadata for Swift.AnyObject + 8, v46, 6LL))
      {
        uint64_t v47 = v63;
      }

      else
      {
        uint64_t v48 = type metadata accessor for SFAirDropReceive.Failure(0LL);
        uint64_t v49 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
        uint64_t v47 = swift_allocError(v48, v49, 0LL, 0LL);
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v48 - 8) + 104LL))( v50,  enum case for SFAirDropReceive.Failure.incompleteTransfer(_:),  v48);
      }

      uint64_t v51 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56LL))(v8, 1LL, 1LL, v51);
      uint64_t v22 = (void *)swift_allocObject(&unk_1005D2BA8, 48LL, 7LL);
      _OWORD v22[2] = 0LL;
      v22[3] = 0LL;
      v22[4] = v3;
      void v22[5] = v47;
      swift_retain(v3);
      unint64_t v23 = &unk_100645720;
      goto LABEL_31;
    default:
      return;
  }

uint64_t sub_10019B7C4()
{
  return sub_10019B8C8((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10019B7D0()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = (void *)swift_task_alloc(dword_10064571C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100195708;
  uint64_t v4 = (void *)swift_task_alloc(dword_1006457D4);
  _DWORD v3[2] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100195708;
  return sub_100198C80((uint64_t)&_swiftEmptyArrayStorage, v2);
}

uint64_t sub_10019B854()
{
  return sub_1001955A8(40LL);
}

uint64_t sub_10019B85C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc(dword_100645734);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100195708;
  _DWORD v3[2] = v2;
  return swift_task_switch(sub_10019A048, 0LL, 0LL);
}

uint64_t sub_10019B8BC()
{
  return sub_10019B8C8((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10019B8C8(void (*a1)(void))
{
  return swift_deallocObject(v1, 48LL, 7LL);
}

uint64_t sub_10019B908()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = (void *)swift_task_alloc(dword_100645744);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100195708;
  uint64_t v4 = (void *)swift_task_alloc(dword_1006457D4);
  _DWORD v3[2] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100195708;
  return sub_100198C80(v2, 0LL);
}

uint64_t sub_10019B984()
{
  return sub_1001955A8(64LL);
}

uint64_t sub_10019B98C()
{
  uint64_t v2 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v5 = (void *)swift_task_alloc(dword_100645774);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1001943E8;
  uint64_t v6 = (void *)swift_task_alloc(dword_1006457C4);
  v5[2] = v6;
  *uint64_t v6 = v5;
  v6[1] = sub_1001943E8;
  return sub_100197FDC(v2, v4, v3);
}

uint64_t sub_10019BA18()
{
  return sub_1001955A8(40LL);
}

uint64_t sub_10019BA20(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_100645784);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100195708;
  return sub_100199D1C(a1, v4, v5, v6);
}

uint64_t sub_10019BA8C(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

void sub_10019BAD0(uint64_t a1)
{
}

id sub_10019BADC()
{
  uint64_t v1 = *(int *)(_s15MacApprovePhoneV18InitialLockContextVMa(0LL) + 48);
  uint64_t v2 = *(void **)(v0 + v1);
  if (v2)
  {
    id v3 = *(id *)(v0 + v1);
LABEL_5:
    id v5 = v2;
    return v3;
  }

  id result = [objc_allocWithZone((Class)SDAuthenticationApprovePrompt) init];
  if (result)
  {
    *(void *)(v0 + v1) = result;
    id v3 = result;
    uint64_t v2 = 0LL;
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

uint64_t sub_10019BB48()
{
  uint64_t v0 = sub_100183098(&qword_1006457E0);
  uint64_t v1 = swift_allocObject(v0, 272LL, 7LL);
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = xmmword_1004CD520;
  if (qword_100643EB0 != -1) {
    swift_once(&qword_100643EB0, LongHash.storage.getter);
  }
  *(void *)(v1 + 56) = &type metadata for SDAuthentication.Operation.CheckRemoteDeviceOSVersionIsSupported;
  *(void *)(v1 + 64) = &off_10064ABF8;
  *(void *)(v1 + 96) = &type metadata for SDAuthentication.Operation.CheckLocalSecurityPolicy;
  *(void *)(v1 + 104) = &off_10064ABB8;
  *(void *)(v1 + 136) = &type metadata for SDAuthentication.Operation.CheckACMTokenExists;
  *(void *)(v1 + 144) = &off_10064AA98;
  *(void *)(v1 + 176) = &type metadata for SDAuthentication.Operation.RecordRemoteDevice;
  *(void *)(v1 + 184) = &off_10064ABD8;
  *(void *)(v1 + 2swift_weakDestroy(v0 + 16) = &type metadata for SDAuthentication.Operation.IncludeApproveMetadataInMessage;
  *(void *)(v1 + 224) = &off_10064AA78;
  *(void *)(v1 + 256) = &type metadata for SDAuthentication.Operation.SendApprovePromptMessage;
  *(void *)(v1 + 264) = &off_10064AA58;
  return v1;
}

uint64_t sub_10019BC2C(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16LL) & ~(unint64_t)v4);
    swift_retain(v5);
  }

  else
  {
    uint64_t v8 = a2 + 1;
    __int128 v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    uint64_t v10 = v9;
    uint64_t v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_bridgeObjectRetain(v5);
    v11(a1 + 8, v8, v10);
    uint64_t v12 = a3[6];
    os_log_type_t v13 = (char *)(a1 + v12);
    BOOL v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for Date(0LL);
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    __n128 v104 = a3;
    if (v17(v14, 1LL, v15))
    {
      uint64_t v18 = sub_100183098(&qword_1006457E8);
      memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
    }

    unint64_t v19 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
    uint64_t v20 = v19[5];
    uint64_t v21 = &v13[v20];
    uint64_t v22 = &v14[v20];
    if (v17(&v14[v20], 1LL, v15))
    {
      uint64_t v23 = sub_100183098(&qword_1006457E8);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v22, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v21, 0LL, 1LL, v15);
    }

    uint64_t v24 = v19[6];
    uint64_t v25 = &v13[v24];
    uint64_t v26 = &v14[v24];
    if (v17(&v14[v24], 1LL, v15))
    {
      uint64_t v27 = sub_100183098(&qword_1006457E8);
      memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v25, v26, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v25, 0LL, 1LL, v15);
    }

    uint64_t v28 = v19[7];
    unint64_t v29 = &v13[v28];
    unint64_t v30 = &v14[v28];
    if (v17(&v14[v28], 1LL, v15))
    {
      uint64_t v31 = sub_100183098(&qword_1006457E8);
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v29, v30, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v29, 0LL, 1LL, v15);
    }

    uint64_t v32 = v19[8];
    id v33 = &v13[v32];
    unint64_t v34 = &v14[v32];
    if (v17(&v14[v32], 1LL, v15))
    {
      uint64_t v35 = sub_100183098(&qword_1006457E8);
      memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v33, v34, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v33, 0LL, 1LL, v15);
    }

    uint64_t v36 = v19[9];
    id v37 = &v13[v36];
    unint64_t v38 = &v14[v36];
    if (v17(&v14[v36], 1LL, v15))
    {
      uint64_t v39 = sub_100183098(&qword_1006457E8);
      memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v37, v38, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v37, 0LL, 1LL, v15);
    }

    uint64_t v40 = v19[10];
    uint64_t v41 = &v13[v40];
    uint64_t v42 = &v14[v40];
    if (v17(&v14[v40], 1LL, v15))
    {
      uint64_t v43 = sub_100183098(&qword_1006457E8);
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v41, v42, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v41, 0LL, 1LL, v15);
    }

    uint64_t v44 = v19[11];
    uint64_t v45 = &v13[v44];
    uint64_t v46 = &v14[v44];
    if (v17(&v14[v44], 1LL, v15))
    {
      uint64_t v47 = sub_100183098(&qword_1006457E8);
      memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v45, v46, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v45, 0LL, 1LL, v15);
    }

    uint64_t v48 = v19[12];
    uint64_t v49 = &v13[v48];
    uint64_t v50 = &v14[v48];
    if (v17(&v14[v48], 1LL, v15))
    {
      uint64_t v51 = sub_100183098(&qword_1006457E8);
      memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v49, v50, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v49, 0LL, 1LL, v15);
    }

    v13[v19[13]] = v14[v19[13]];
    uint64_t v52 = v19[14];
    os_log_type_t v53 = &v13[v52];
    __int128 v54 = &v14[v52];
    if (v17(&v14[v52], 1LL, v15))
    {
      uint64_t v55 = sub_100183098(&qword_1006457E8);
      memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v53, v54, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v53, 0LL, 1LL, v15);
    }

    uint64_t v56 = v19[15];
    unint64_t v57 = &v13[v56];
    uint64_t v58 = &v14[v56];
    if (v17(&v14[v56], 1LL, v15))
    {
      uint64_t v59 = sub_100183098(&qword_1006457E8);
      memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v57, v58, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v57, 0LL, 1LL, v15);
    }

    uint64_t v60 = v19[16];
    uint64_t v61 = &v13[v60];
    uint64_t v62 = &v14[v60];
    if (v17(&v14[v60], 1LL, v15))
    {
      uint64_t v63 = sub_100183098(&qword_1006457E8);
      memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v61, v62, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v61, 0LL, 1LL, v15);
    }

    uint64_t v64 = v19[17];
    uint64_t v65 = &v13[v64];
    uint64_t v66 = &v14[v64];
    if (v17(&v14[v64], 1LL, v15))
    {
      uint64_t v67 = sub_100183098(&qword_1006457E8);
      memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v65, v66, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v65, 0LL, 1LL, v15);
    }

    uint64_t v68 = v19[18];
    uint64_t v69 = &v13[v68];
    uint64_t v70 = &v14[v68];
    *(_DWORD *)uint64_t v69 = *(_DWORD *)v70;
    v69[4] = v70[4];
    v13[v19[19]] = v14[v19[19]];
    uint64_t v71 = v19[20];
    id v72 = &v13[v71];
    uint64_t v73 = &v14[v71];
    uint64_t v74 = *((void *)v73 + 1);
    *(void *)id v72 = *(void *)v73;
    *((void *)v72 + 1) = v74;
    uint64_t v75 = v19[21];
    uint64_t v76 = &v13[v75];
    uint64_t v77 = &v14[v75];
    uint64_t v78 = *((void *)v77 + 1);
    *(void *)uint64_t v76 = *(void *)v77;
    *((void *)v76 + 1) = v78;
    uint64_t v79 = v104[7];
    uint64_t v80 = (void *)(a1 + v79);
    uint64_t v81 = (char *)a2 + v79;
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v78);
    if (v17(v81, 1LL, v15))
    {
      uint64_t v82 = sub_100183098(&qword_1006457E8);
      memcpy(v80, v81, *(void *)(*(void *)(v82 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(v16 + 16))(v80, v81, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v80, 0LL, 1LL, v15);
    }

    uint64_t v83 = v104[8];
    uint64_t v84 = v104[9];
    uint64_t v85 = (void *)(a1 + v83);
    uint64_t v86 = (uint64_t *)((char *)a2 + v83);
    uint64_t v87 = v86[1];
    *uint64_t v85 = *v86;
    v85[1] = v87;
    uint64_t v88 = (void *)(a1 + v84);
    uint64_t v89 = (uint64_t *)((char *)a2 + v84);
    uint64_t v90 = *v89;
    uint64_t v91 = v89[1];
    uint64_t v92 = v104[10];
    uint64_t v93 = v104[11];
    char v94 = *((_BYTE *)a2 + v92);
    *uint64_t v88 = v90;
    v88[1] = v91;
    *(_BYTE *)(a1 + v92) = v94;
    uint64_t v95 = a1 + v93;
    uint64_t v96 = (uint64_t *)((char *)a2 + v93);
    unint64_t v97 = *(uint64_t *)((char *)a2 + v93 + 8);
    swift_bridgeObjectRetain(v87);
    swift_bridgeObjectRetain(v91);
    if (v97 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v95 = *(_OWORD *)v96;
    }

    else
    {
      uint64_t v98 = *v96;
      sub_10019BA8C(*v96, v97);
      *(void *)uint64_t v95 = v98;
      *(void *)(v95 + _Block_object_dispose(va, 8) = v97;
    }

    uint64_t v99 = v104[12];
    uint64_t v100 = v104[13];
    uint64_t v101 = *(void **)((char *)a2 + v99);
    *(void *)(a1 + v99) = v101;
    *(_BYTE *)(a1 + v100) = *((_BYTE *)a2 + v100);
    id v102 = v101;
  }

  return a1;
}

void sub_10019C414(void *a1, int *a2)
{
  int v4 = a1 + 1;
  swift_bridgeObjectRelease(*a1);
  sub_10018709C(v4);
  uint64_t v5 = (char *)a1 + a2[6];
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  }
  __int128 v9 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v10 = &v5[v9[5]];
  if (!v8(v10, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  uint64_t v11 = &v5[v9[6]];
  if (!v8(v11, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  }
  uint64_t v12 = &v5[v9[7]];
  if (!v8(v12, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  }
  os_log_type_t v13 = &v5[v9[8]];
  if (!v8(v13, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  }
  BOOL v14 = &v5[v9[9]];
  if (!v8(v14, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  }
  uint64_t v15 = &v5[v9[10]];
  if (!v8(v15, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
  }
  uint64_t v16 = &v5[v9[11]];
  if (!v8(v16, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
  }
  uint64_t v17 = &v5[v9[12]];
  if (!v8(v17, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
  }
  uint64_t v18 = &v5[v9[14]];
  if (!v8(v18, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
  }
  unint64_t v19 = &v5[v9[15]];
  if (!v8(v19, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
  }
  uint64_t v20 = &v5[v9[16]];
  if (!v8(v20, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
  }
  uint64_t v21 = &v5[v9[17]];
  if (!v8(v21, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v21, v6);
  }
  swift_bridgeObjectRelease(*(void *)&v5[v9[20] + 8]);
  swift_bridgeObjectRelease(*(void *)&v5[v9[21] + 8]);
  uint64_t v22 = (char *)a1 + a2[7];
  if (!v8(v22, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v22, v6);
  }
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[8] + 8));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[9] + 8));
  uint64_t v23 = (void *)((char *)a1 + a2[11]);
  unint64_t v24 = v23[1];
  if (v24 >> 60 != 15) {
    sub_100189B20(*v23, v24);
  }
}

uint64_t sub_10019C750(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(void *)a1 = *a2;
  uint64_t v7 = a2 + 1;
  __int128 v8 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v8;
  uint64_t v9 = v8;
  uint64_t v10 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v8 - 8);
  swift_bridgeObjectRetain(v6);
  v10(a1 + 8, v7, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)(a1 + v11);
  os_log_type_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  double v103 = a3;
  if (v16(v13, 1LL, v14))
  {
    uint64_t v17 = sub_100183098(&qword_1006457E8);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v19 = v18[5];
  uint64_t v20 = &v12[v19];
  uint64_t v21 = &v13[v19];
  if (v16(&v13[v19], 1LL, v14))
  {
    uint64_t v22 = sub_100183098(&qword_1006457E8);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v20, v21, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v20, 0LL, 1LL, v14);
  }

  uint64_t v23 = v18[6];
  unint64_t v24 = &v12[v23];
  uint64_t v25 = &v13[v23];
  if (v16(&v13[v23], 1LL, v14))
  {
    uint64_t v26 = sub_100183098(&qword_1006457E8);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v24, v25, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v24, 0LL, 1LL, v14);
  }

  uint64_t v27 = v18[7];
  uint64_t v28 = &v12[v27];
  unint64_t v29 = &v13[v27];
  if (v16(&v13[v27], 1LL, v14))
  {
    uint64_t v30 = sub_100183098(&qword_1006457E8);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v28, v29, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v28, 0LL, 1LL, v14);
  }

  uint64_t v31 = v18[8];
  uint64_t v32 = &v12[v31];
  id v33 = &v13[v31];
  if (v16(&v13[v31], 1LL, v14))
  {
    uint64_t v34 = sub_100183098(&qword_1006457E8);
    memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v32, v33, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v32, 0LL, 1LL, v14);
  }

  uint64_t v35 = v18[9];
  uint64_t v36 = &v12[v35];
  id v37 = &v13[v35];
  if (v16(&v13[v35], 1LL, v14))
  {
    uint64_t v38 = sub_100183098(&qword_1006457E8);
    memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v36, v37, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v36, 0LL, 1LL, v14);
  }

  uint64_t v39 = v18[10];
  uint64_t v40 = &v12[v39];
  uint64_t v41 = &v13[v39];
  if (v16(&v13[v39], 1LL, v14))
  {
    uint64_t v42 = sub_100183098(&qword_1006457E8);
    memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v40, v41, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v40, 0LL, 1LL, v14);
  }

  uint64_t v43 = v18[11];
  uint64_t v44 = &v12[v43];
  uint64_t v45 = &v13[v43];
  if (v16(&v13[v43], 1LL, v14))
  {
    uint64_t v46 = sub_100183098(&qword_1006457E8);
    memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v44, v45, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v44, 0LL, 1LL, v14);
  }

  uint64_t v47 = v18[12];
  uint64_t v48 = &v12[v47];
  uint64_t v49 = &v13[v47];
  if (v16(&v13[v47], 1LL, v14))
  {
    uint64_t v50 = sub_100183098(&qword_1006457E8);
    memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v48, v49, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v48, 0LL, 1LL, v14);
  }

  v12[v18[13]] = v13[v18[13]];
  uint64_t v51 = v18[14];
  uint64_t v52 = &v12[v51];
  os_log_type_t v53 = &v13[v51];
  if (v16(&v13[v51], 1LL, v14))
  {
    uint64_t v54 = sub_100183098(&qword_1006457E8);
    memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v52, v53, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v52, 0LL, 1LL, v14);
  }

  uint64_t v55 = v18[15];
  uint64_t v56 = &v12[v55];
  unint64_t v57 = &v13[v55];
  if (v16(&v13[v55], 1LL, v14))
  {
    uint64_t v58 = sub_100183098(&qword_1006457E8);
    memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v56, v57, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v56, 0LL, 1LL, v14);
  }

  uint64_t v59 = v18[16];
  uint64_t v60 = &v12[v59];
  uint64_t v61 = &v13[v59];
  if (v16(&v13[v59], 1LL, v14))
  {
    uint64_t v62 = sub_100183098(&qword_1006457E8);
    memcpy(v60, v61, *(void *)(*(void *)(v62 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v60, v61, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v60, 0LL, 1LL, v14);
  }

  uint64_t v63 = v18[17];
  uint64_t v64 = &v12[v63];
  uint64_t v65 = &v13[v63];
  if (v16(&v13[v63], 1LL, v14))
  {
    uint64_t v66 = sub_100183098(&qword_1006457E8);
    memcpy(v64, v65, *(void *)(*(void *)(v66 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v64, v65, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v64, 0LL, 1LL, v14);
  }

  uint64_t v67 = v18[18];
  uint64_t v68 = &v12[v67];
  uint64_t v69 = &v13[v67];
  *(_DWORD *)uint64_t v68 = *(_DWORD *)v69;
  v68[4] = v69[4];
  v12[v18[19]] = v13[v18[19]];
  uint64_t v70 = v18[20];
  uint64_t v71 = &v12[v70];
  id v72 = &v13[v70];
  uint64_t v73 = *((void *)v72 + 1);
  *(void *)uint64_t v71 = *(void *)v72;
  *((void *)v71 + 1) = v73;
  uint64_t v74 = v18[21];
  uint64_t v75 = &v12[v74];
  uint64_t v76 = &v13[v74];
  uint64_t v77 = *((void *)v76 + 1);
  *(void *)uint64_t v75 = *(void *)v76;
  *((void *)v75 + 1) = v77;
  uint64_t v78 = v103[7];
  uint64_t v79 = (void *)(a1 + v78);
  uint64_t v80 = (char *)a2 + v78;
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v77);
  if (v16(v80, 1LL, v14))
  {
    uint64_t v81 = sub_100183098(&qword_1006457E8);
    memcpy(v79, v80, *(void *)(*(void *)(v81 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v79, v80, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v79, 0LL, 1LL, v14);
  }

  uint64_t v82 = v103[8];
  uint64_t v83 = v103[9];
  uint64_t v84 = (void *)(a1 + v82);
  uint64_t v85 = (uint64_t *)((char *)a2 + v82);
  uint64_t v86 = v85[1];
  *uint64_t v84 = *v85;
  v84[1] = v86;
  uint64_t v87 = (void *)(a1 + v83);
  uint64_t v88 = (uint64_t *)((char *)a2 + v83);
  uint64_t v89 = *v88;
  uint64_t v90 = v88[1];
  uint64_t v91 = v103[10];
  uint64_t v92 = v103[11];
  char v93 = *((_BYTE *)a2 + v91);
  void *v87 = v89;
  v87[1] = v90;
  *(_BYTE *)(a1 + v91) = v93;
  uint64_t v94 = a1 + v92;
  uint64_t v95 = (uint64_t *)((char *)a2 + v92);
  unint64_t v96 = *(uint64_t *)((char *)a2 + v92 + 8);
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v90);
  if (v96 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v94 = *(_OWORD *)v95;
  }

  else
  {
    uint64_t v97 = *v95;
    sub_10019BA8C(*v95, v96);
    *(void *)uint64_t v94 = v97;
    *(void *)(v94 + _Block_object_dispose(va, 8) = v96;
  }

  uint64_t v98 = v103[12];
  uint64_t v99 = v103[13];
  uint64_t v100 = *(void **)((char *)a2 + v98);
  *(void *)(a1 + v9_Block_object_dispose(va, 8) = v100;
  *(_BYTE *)(a1 + v99) = *((_BYTE *)a2 + v99);
  id v101 = v100;
  return a1;
}

char *sub_10019CF14(char *a1, void *a2, int *a3)
{
  uint64_t v7 = a2 + 1;
  uint64_t v6 = *a2;
  uint64_t v8 = *(void *)a1;
  *(void *)a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v8);
  sub_10019DB24((void *)a1 + 1, v7);
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14(v11, 1LL, v12);
  v134 = a3;
  uint64_t v135 = a2;
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    uint64_t v17 = sub_100183098(&qword_1006457E8);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  uint64_t v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v19 = v18[5];
  uint64_t v20 = &v10[v19];
  uint64_t v21 = &v11[v19];
  int v22 = v14(&v10[v19], 1LL, v12);
  int v23 = v14(v21, 1LL, v12);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v20, v21, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v20, 0LL, 1LL, v12);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
LABEL_12:
    uint64_t v24 = sub_100183098(&qword_1006457E8);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v20, v21, v12);
LABEL_13:
  uint64_t v25 = v18[6];
  uint64_t v26 = &v10[v25];
  uint64_t v27 = &v11[v25];
  int v28 = v14(&v10[v25], 1LL, v12);
  int v29 = v14(v27, 1LL, v12);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v26, v27, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v26, 0LL, 1LL, v12);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v26, v12);
LABEL_18:
    uint64_t v30 = sub_100183098(&qword_1006457E8);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v26, v27, v12);
LABEL_19:
  uint64_t v31 = v18[7];
  uint64_t v32 = &v10[v31];
  id v33 = &v11[v31];
  int v34 = v14(&v10[v31], 1LL, v12);
  int v35 = v14(v33, 1LL, v12);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v32, v33, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v32, 0LL, 1LL, v12);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v32, v12);
LABEL_24:
    uint64_t v36 = sub_100183098(&qword_1006457E8);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v32, v33, v12);
LABEL_25:
  uint64_t v37 = v18[8];
  uint64_t v38 = &v10[v37];
  uint64_t v39 = &v11[v37];
  int v40 = v14(&v10[v37], 1LL, v12);
  int v41 = v14(v39, 1LL, v12);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v38, v39, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v38, 0LL, 1LL, v12);
      goto LABEL_31;
    }

    goto LABEL_30;
  }

  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v38, v12);
LABEL_30:
    uint64_t v42 = sub_100183098(&qword_1006457E8);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64LL));
    goto LABEL_31;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v38, v39, v12);
LABEL_31:
  uint64_t v43 = v18[9];
  uint64_t v44 = &v10[v43];
  uint64_t v45 = &v11[v43];
  int v46 = v14(&v10[v43], 1LL, v12);
  int v47 = v14(v45, 1LL, v12);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v44, v45, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v44, 0LL, 1LL, v12);
      goto LABEL_37;
    }

    goto LABEL_36;
  }

  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v44, v12);
LABEL_36:
    uint64_t v48 = sub_100183098(&qword_1006457E8);
    memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64LL));
    goto LABEL_37;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v44, v45, v12);
LABEL_37:
  uint64_t v49 = v18[10];
  uint64_t v50 = &v10[v49];
  uint64_t v51 = &v11[v49];
  int v52 = v14(&v10[v49], 1LL, v12);
  int v53 = v14(v51, 1LL, v12);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v50, v51, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v50, 0LL, 1LL, v12);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v50, v12);
LABEL_42:
    uint64_t v54 = sub_100183098(&qword_1006457E8);
    memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64LL));
    goto LABEL_43;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v50, v51, v12);
LABEL_43:
  uint64_t v55 = v18[11];
  uint64_t v56 = &v10[v55];
  unint64_t v57 = &v11[v55];
  int v58 = v14(&v10[v55], 1LL, v12);
  int v59 = v14(v57, 1LL, v12);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v56, v57, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v56, 0LL, 1LL, v12);
      goto LABEL_49;
    }

    goto LABEL_48;
  }

  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v56, v12);
LABEL_48:
    uint64_t v60 = sub_100183098(&qword_1006457E8);
    memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64LL));
    goto LABEL_49;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v56, v57, v12);
LABEL_49:
  uint64_t v61 = v18[12];
  uint64_t v62 = &v10[v61];
  uint64_t v63 = &v11[v61];
  int v64 = v14(&v10[v61], 1LL, v12);
  int v65 = v14(v63, 1LL, v12);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v62, v63, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v62, 0LL, 1LL, v12);
      goto LABEL_55;
    }

    goto LABEL_54;
  }

  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v62, v12);
LABEL_54:
    uint64_t v66 = sub_100183098(&qword_1006457E8);
    memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64LL));
    goto LABEL_55;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v62, v63, v12);
LABEL_55:
  v10[v18[13]] = v11[v18[13]];
  uint64_t v67 = v18[14];
  uint64_t v68 = &v10[v67];
  uint64_t v69 = &v11[v67];
  int v70 = v14(&v10[v67], 1LL, v12);
  int v71 = v14(v69, 1LL, v12);
  if (v70)
  {
    if (!v71)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v68, v69, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v68, 0LL, 1LL, v12);
      goto LABEL_61;
    }

    goto LABEL_60;
  }

  if (v71)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v68, v12);
LABEL_60:
    uint64_t v72 = sub_100183098(&qword_1006457E8);
    memcpy(v68, v69, *(void *)(*(void *)(v72 - 8) + 64LL));
    goto LABEL_61;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v68, v69, v12);
LABEL_61:
  uint64_t v73 = v18[15];
  uint64_t v74 = &v10[v73];
  uint64_t v75 = &v11[v73];
  int v76 = v14(&v10[v73], 1LL, v12);
  int v77 = v14(v75, 1LL, v12);
  if (v76)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v74, v75, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v74, 0LL, 1LL, v12);
      goto LABEL_67;
    }

    goto LABEL_66;
  }

  if (v77)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v74, v12);
LABEL_66:
    uint64_t v78 = sub_100183098(&qword_1006457E8);
    memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64LL));
    goto LABEL_67;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v74, v75, v12);
LABEL_67:
  uint64_t v79 = v18[16];
  uint64_t v80 = &v10[v79];
  uint64_t v81 = &v11[v79];
  int v82 = v14(&v10[v79], 1LL, v12);
  int v83 = v14(v81, 1LL, v12);
  if (v82)
  {
    if (!v83)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v80, v81, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v80, 0LL, 1LL, v12);
      goto LABEL_73;
    }

    goto LABEL_72;
  }

  if (v83)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v80, v12);
LABEL_72:
    uint64_t v84 = sub_100183098(&qword_1006457E8);
    memcpy(v80, v81, *(void *)(*(void *)(v84 - 8) + 64LL));
    goto LABEL_73;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v80, v81, v12);
LABEL_73:
  uint64_t v85 = v18[17];
  uint64_t v86 = &v10[v85];
  uint64_t v87 = &v11[v85];
  int v88 = v14(&v10[v85], 1LL, v12);
  int v89 = v14(v87, 1LL, v12);
  if (v88)
  {
    if (!v89)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v86, v87, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v86, 0LL, 1LL, v12);
      goto LABEL_79;
    }

    goto LABEL_78;
  }

  if (v89)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v86, v12);
LABEL_78:
    uint64_t v90 = sub_100183098(&qword_1006457E8);
    memcpy(v86, v87, *(void *)(*(void *)(v90 - 8) + 64LL));
    goto LABEL_79;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v86, v87, v12);
LABEL_79:
  uint64_t v91 = v18[18];
  uint64_t v92 = &v10[v91];
  char v93 = &v11[v91];
  int v94 = *(_DWORD *)v93;
  v92[4] = v93[4];
  *(_DWORD *)uint64_t v92 = v94;
  v10[v18[19]] = v11[v18[19]];
  uint64_t v95 = v18[20];
  unint64_t v96 = &v10[v95];
  uint64_t v97 = &v11[v95];
  *(void *)unint64_t v96 = *(void *)v97;
  uint64_t v98 = *((void *)v97 + 1);
  uint64_t v99 = *((void *)v96 + 1);
  *((void *)v96 + 1) = v98;
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRelease(v99);
  uint64_t v100 = v18[21];
  id v101 = &v10[v100];
  id v102 = &v11[v100];
  *(void *)id v101 = *(void *)v102;
  uint64_t v103 = *((void *)v102 + 1);
  uint64_t v104 = *((void *)v101 + 1);
  *((void *)v101 + 1) = v103;
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRelease(v104);
  uint64_t v105 = v134[7];
  NSString v106 = &a1[v105];
  uint64_t v107 = (char *)v135 + v105;
  int v108 = v14(&a1[v105], 1LL, v12);
  int v109 = v14(v107, 1LL, v12);
  if (v108)
  {
    if (!v109)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v106, v107, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v106, 0LL, 1LL, v12);
      goto LABEL_85;
    }

    goto LABEL_84;
  }

  if (v109)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v106, v12);
LABEL_84:
    uint64_t v110 = sub_100183098(&qword_1006457E8);
    memcpy(v106, v107, *(void *)(*(void *)(v110 - 8) + 64LL));
    goto LABEL_85;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v106, v107, v12);
LABEL_85:
  uint64_t v111 = v134[8];
  uint64_t v112 = &a1[v111];
  uint64_t v113 = (void *)((char *)v135 + v111);
  *(void *)uint64_t v112 = *v113;
  uint64_t v114 = v113[1];
  uint64_t v115 = *((void *)v112 + 1);
  *((void *)v112 + 1) = v114;
  swift_bridgeObjectRetain(v114);
  swift_bridgeObjectRelease(v115);
  uint64_t v116 = v134[9];
  uint64_t v117 = &a1[v116];
  Class v118 = (void *)((char *)v135 + v116);
  *(void *)uint64_t v117 = *v118;
  uint64_t v119 = v118[1];
  uint64_t v120 = *((void *)v117 + 1);
  *((void *)v117 + 1) = v119;
  swift_bridgeObjectRetain(v119);
  swift_bridgeObjectRelease(v120);
  a1[v134[10]] = *((_BYTE *)v135 + v134[10]);
  uint64_t v121 = v134[11];
  NSString v122 = (uint64_t *)&a1[v121];
  NSString v123 = (void *)((char *)v135 + v121);
  unint64_t v124 = *(void *)((char *)v135 + v121 + 8);
  if (*(void *)&a1[v121 + 8] >> 60 != 15LL)
  {
    if (v124 >> 60 != 15)
    {
      uint64_t v126 = *v123;
      sub_10019BA8C(*v123, v124);
      uint64_t v127 = *v122;
      unint64_t v128 = v122[1];
      *NSString v122 = v126;
      v122[1] = v124;
      sub_100189B20(v127, v128);
      goto LABEL_92;
    }

    sub_10019DC8C((uint64_t)v122);
    goto LABEL_90;
  }

  if (v124 >> 60 == 15)
  {
LABEL_90:
    *(_OWORD *)NSString v122 = *(_OWORD *)v123;
    goto LABEL_92;
  }

  uint64_t v125 = *v123;
  sub_10019BA8C(*v123, v124);
  *NSString v122 = v125;
  v122[1] = v124;
LABEL_92:
  uint64_t v129 = v134[12];
  Class v130 = *(void **)&a1[v129];
  uint64_t v131 = *(void **)((char *)v135 + v129);
  *(void *)&a1[v129] = v131;
  id v132 = v131;

  a1[v134[13]] = *((_BYTE *)v135 + v134[13]);
  return a1;
}

void *sub_10019DB24(void *result, void *a2)
{
  if (result != a2)
  {
    id v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v9 = *(void *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        uint64_t v11 = *result;
        uint64_t v12 = *a2;
        swift_retain(*a2);
        id result = (void *)swift_release(v11);
        *id v3 = v12;
      }

      else
      {
        return (void *)(*(uint64_t (**)(void *, void *, void))(v9 + 24))(result, a2, result[3]);
      }
    }

    else
    {
      result[3] = v5;
      CFTypeRef result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      int v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        uint64_t v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v14 = *a2;
          *id v3 = *a2;
          swift_retain(v14);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(result, a2, v5);
        }

        return (void *)swift_release(v10);
      }

      else
      {
        (*(void (**)(_BYTE *, void *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          uint64_t v13 = *a2;
          *id v3 = *a2;
          swift_retain(v13);
        }

        else
        {
          (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v3, a2, v5);
        }

        return (void *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }

  return result;
}

uint64_t sub_10019DC8C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10019DCC0(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)(a1 + v6);
  int v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  uint64_t v73 = a3;
  if (v11(v8, 1LL, v9))
  {
    uint64_t v12 = sub_100183098(&qword_1006457E8);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  uint64_t v13 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v14 = v13[5];
  int v15 = &v7[v14];
  int v16 = &v8[v14];
  if (v11(&v8[v14], 1LL, v9))
  {
    uint64_t v17 = sub_100183098(&qword_1006457E8);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v16, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v15, 0LL, 1LL, v9);
  }

  uint64_t v18 = v13[6];
  uint64_t v19 = &v7[v18];
  uint64_t v20 = &v8[v18];
  if (v11(&v8[v18], 1LL, v9))
  {
    uint64_t v21 = sub_100183098(&qword_1006457E8);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v19, v20, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v19, 0LL, 1LL, v9);
  }

  uint64_t v22 = v13[7];
  int v23 = &v7[v22];
  uint64_t v24 = &v8[v22];
  if (v11(&v8[v22], 1LL, v9))
  {
    uint64_t v25 = sub_100183098(&qword_1006457E8);
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v23, v24, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v23, 0LL, 1LL, v9);
  }

  uint64_t v26 = v13[8];
  uint64_t v27 = &v7[v26];
  int v28 = &v8[v26];
  if (v11(&v8[v26], 1LL, v9))
  {
    uint64_t v29 = sub_100183098(&qword_1006457E8);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v27, v28, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v27, 0LL, 1LL, v9);
  }

  uint64_t v30 = v13[9];
  uint64_t v31 = &v7[v30];
  uint64_t v32 = &v8[v30];
  if (v11(&v8[v30], 1LL, v9))
  {
    uint64_t v33 = sub_100183098(&qword_1006457E8);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v31, v32, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v31, 0LL, 1LL, v9);
  }

  uint64_t v34 = v13[10];
  int v35 = &v7[v34];
  uint64_t v36 = &v8[v34];
  if (v11(&v8[v34], 1LL, v9))
  {
    uint64_t v37 = sub_100183098(&qword_1006457E8);
    memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v35, v36, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v35, 0LL, 1LL, v9);
  }

  uint64_t v38 = v13[11];
  uint64_t v39 = &v7[v38];
  int v40 = &v8[v38];
  if (v11(&v8[v38], 1LL, v9))
  {
    uint64_t v41 = sub_100183098(&qword_1006457E8);
    memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v39, v40, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v39, 0LL, 1LL, v9);
  }

  uint64_t v42 = v13[12];
  uint64_t v43 = &v7[v42];
  uint64_t v44 = &v8[v42];
  if (v11(&v8[v42], 1LL, v9))
  {
    uint64_t v45 = sub_100183098(&qword_1006457E8);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v43, v44, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v43, 0LL, 1LL, v9);
  }

  v7[v13[13]] = v8[v13[13]];
  uint64_t v46 = v13[14];
  int v47 = &v7[v46];
  uint64_t v48 = &v8[v46];
  if (v11(&v8[v46], 1LL, v9))
  {
    uint64_t v49 = sub_100183098(&qword_1006457E8);
    memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v47, v48, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v47, 0LL, 1LL, v9);
  }

  uint64_t v50 = v13[15];
  uint64_t v51 = &v7[v50];
  int v52 = &v8[v50];
  if (v11(&v8[v50], 1LL, v9))
  {
    uint64_t v53 = sub_100183098(&qword_1006457E8);
    memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v51, v52, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v51, 0LL, 1LL, v9);
  }

  uint64_t v54 = v13[16];
  uint64_t v55 = &v7[v54];
  uint64_t v56 = &v8[v54];
  if (v11(&v8[v54], 1LL, v9))
  {
    uint64_t v57 = sub_100183098(&qword_1006457E8);
    memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v55, v56, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v55, 0LL, 1LL, v9);
  }

  uint64_t v58 = v13[17];
  int v59 = &v7[v58];
  uint64_t v60 = &v8[v58];
  if (v11(&v8[v58], 1LL, v9))
  {
    uint64_t v61 = sub_100183098(&qword_1006457E8);
    memcpy(v59, v60, *(void *)(*(void *)(v61 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v59, v60, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v59, 0LL, 1LL, v9);
  }

  uint64_t v62 = v13[18];
  uint64_t v63 = &v7[v62];
  int v64 = &v8[v62];
  *(_DWORD *)uint64_t v63 = *(_DWORD *)v64;
  v63[4] = v64[4];
  v7[v13[19]] = v8[v13[19]];
  *(_OWORD *)&v7[v13[20]] = *(_OWORD *)&v8[v13[20]];
  *(_OWORD *)&v7[v13[21]] = *(_OWORD *)&v8[v13[21]];
  uint64_t v65 = v73[7];
  uint64_t v66 = (void *)(a1 + v65);
  uint64_t v67 = (const void *)(a2 + v65);
  if (v11((char *)(a2 + v65), 1LL, v9))
  {
    uint64_t v68 = sub_100183098(&qword_1006457E8);
    memcpy(v66, v67, *(void *)(*(void *)(v68 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v66, v67, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v66, 0LL, 1LL, v9);
  }

  uint64_t v69 = v73[9];
  *(_OWORD *)(a1 + v73[8]) = *(_OWORD *)(a2 + v73[8]);
  *(_OWORD *)(a1 + v69) = *(_OWORD *)(a2 + v69);
  uint64_t v70 = v73[11];
  *(_BYTE *)(a1 + v73[10]) = *(_BYTE *)(a2 + v73[10]);
  *(_OWORD *)(a1 + v70) = *(_OWORD *)(a2 + v70);
  uint64_t v71 = v73[13];
  *(void *)(a1 + v73[12]) = *(void *)(a2 + v73[12]);
  *(_BYTE *)(a1 + v71) = *(_BYTE *)(a2 + v71);
  return a1;
}

uint64_t *sub_10019E400(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  sub_10018709C(a1 + 1);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  a1[5] = a2[5];
  uint64_t v7 = a3[6];
  int v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  uint64_t v131 = a3;
  id v132 = a2;
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100183098(&qword_1006457E8);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  int v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v17 = v16[5];
  uint64_t v18 = &v8[v17];
  uint64_t v19 = &v9[v17];
  int v20 = v12(&v8[v17], 1LL, v10);
  int v21 = v12(v19, 1LL, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v19, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v18, 0LL, 1LL, v10);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_12:
    uint64_t v22 = sub_100183098(&qword_1006457E8);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v18, v19, v10);
LABEL_13:
  uint64_t v23 = v16[6];
  uint64_t v24 = &v8[v23];
  uint64_t v25 = &v9[v23];
  int v26 = v12(&v8[v23], 1LL, v10);
  int v27 = v12(v25, 1LL, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v24, v25, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v24, 0LL, 1LL, v10);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
LABEL_18:
    uint64_t v28 = sub_100183098(&qword_1006457E8);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v24, v25, v10);
LABEL_19:
  uint64_t v29 = v16[7];
  uint64_t v30 = &v8[v29];
  uint64_t v31 = &v9[v29];
  int v32 = v12(&v8[v29], 1LL, v10);
  int v33 = v12(v31, 1LL, v10);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v30, v31, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v30, 0LL, 1LL, v10);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
LABEL_24:
    uint64_t v34 = sub_100183098(&qword_1006457E8);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v30, v31, v10);
LABEL_25:
  uint64_t v35 = v16[8];
  uint64_t v36 = &v8[v35];
  uint64_t v37 = &v9[v35];
  int v38 = v12(&v8[v35], 1LL, v10);
  int v39 = v12(v37, 1LL, v10);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v36, v37, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v36, 0LL, 1LL, v10);
      goto LABEL_31;
    }

    goto LABEL_30;
  }

  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
LABEL_30:
    uint64_t v40 = sub_100183098(&qword_1006457E8);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64LL));
    goto LABEL_31;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v36, v37, v10);
LABEL_31:
  uint64_t v41 = v16[9];
  uint64_t v42 = &v8[v41];
  uint64_t v43 = &v9[v41];
  int v44 = v12(&v8[v41], 1LL, v10);
  int v45 = v12(v43, 1LL, v10);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v42, v43, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v42, 0LL, 1LL, v10);
      goto LABEL_37;
    }

    goto LABEL_36;
  }

  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
LABEL_36:
    uint64_t v46 = sub_100183098(&qword_1006457E8);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64LL));
    goto LABEL_37;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v42, v43, v10);
LABEL_37:
  uint64_t v47 = v16[10];
  uint64_t v48 = &v8[v47];
  uint64_t v49 = &v9[v47];
  int v50 = v12(&v8[v47], 1LL, v10);
  int v51 = v12(v49, 1LL, v10);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v48, v49, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v48, 0LL, 1LL, v10);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
LABEL_42:
    uint64_t v52 = sub_100183098(&qword_1006457E8);
    memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64LL));
    goto LABEL_43;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v48, v49, v10);
LABEL_43:
  uint64_t v53 = v16[11];
  uint64_t v54 = &v8[v53];
  uint64_t v55 = &v9[v53];
  int v56 = v12(&v8[v53], 1LL, v10);
  int v57 = v12(v55, 1LL, v10);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v54, v55, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v54, 0LL, 1LL, v10);
      goto LABEL_49;
    }

    goto LABEL_48;
  }

  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v10);
LABEL_48:
    uint64_t v58 = sub_100183098(&qword_1006457E8);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64LL));
    goto LABEL_49;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v54, v55, v10);
LABEL_49:
  uint64_t v59 = v16[12];
  uint64_t v60 = &v8[v59];
  uint64_t v61 = &v9[v59];
  int v62 = v12(&v8[v59], 1LL, v10);
  int v63 = v12(v61, 1LL, v10);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v60, v61, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v60, 0LL, 1LL, v10);
      goto LABEL_55;
    }

    goto LABEL_54;
  }

  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v60, v10);
LABEL_54:
    uint64_t v64 = sub_100183098(&qword_1006457E8);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64LL));
    goto LABEL_55;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v60, v61, v10);
LABEL_55:
  v8[v16[13]] = v9[v16[13]];
  uint64_t v65 = v16[14];
  uint64_t v66 = &v8[v65];
  uint64_t v67 = &v9[v65];
  int v68 = v12(&v8[v65], 1LL, v10);
  int v69 = v12(v67, 1LL, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v66, v67, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v66, 0LL, 1LL, v10);
      goto LABEL_61;
    }

    goto LABEL_60;
  }

  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v10);
LABEL_60:
    uint64_t v70 = sub_100183098(&qword_1006457E8);
    memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64LL));
    goto LABEL_61;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v66, v67, v10);
LABEL_61:
  uint64_t v71 = v16[15];
  uint64_t v72 = &v8[v71];
  uint64_t v73 = &v9[v71];
  int v74 = v12(&v8[v71], 1LL, v10);
  int v75 = v12(v73, 1LL, v10);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v72, v73, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v72, 0LL, 1LL, v10);
      goto LABEL_67;
    }

    goto LABEL_66;
  }

  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
LABEL_66:
    uint64_t v76 = sub_100183098(&qword_1006457E8);
    memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64LL));
    goto LABEL_67;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v72, v73, v10);
LABEL_67:
  uint64_t v77 = v16[16];
  uint64_t v78 = &v8[v77];
  uint64_t v79 = &v9[v77];
  int v80 = v12(&v8[v77], 1LL, v10);
  int v81 = v12(v79, 1LL, v10);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v78, v79, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v78, 0LL, 1LL, v10);
      goto LABEL_73;
    }

    goto LABEL_72;
  }

  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_72:
    uint64_t v82 = sub_100183098(&qword_1006457E8);
    memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64LL));
    goto LABEL_73;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v78, v79, v10);
LABEL_73:
  uint64_t v83 = v16[17];
  uint64_t v84 = &v8[v83];
  uint64_t v85 = &v9[v83];
  int v86 = v12(&v8[v83], 1LL, v10);
  int v87 = v12(v85, 1LL, v10);
  if (v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v84, v85, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v84, 0LL, 1LL, v10);
      goto LABEL_79;
    }

    goto LABEL_78;
  }

  if (v87)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v84, v10);
LABEL_78:
    uint64_t v88 = sub_100183098(&qword_1006457E8);
    memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64LL));
    goto LABEL_79;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v84, v85, v10);
LABEL_79:
  uint64_t v89 = v16[18];
  uint64_t v90 = &v8[v89];
  uint64_t v91 = &v9[v89];
  *(_DWORD *)uint64_t v90 = *(_DWORD *)v91;
  v90[4] = v91[4];
  v8[v16[19]] = v9[v16[19]];
  uint64_t v92 = v16[20];
  char v93 = &v8[v92];
  int v94 = &v9[v92];
  uint64_t v96 = *(void *)v94;
  uint64_t v95 = *((void *)v94 + 1);
  uint64_t v97 = *((void *)v93 + 1);
  *(void *)char v93 = v96;
  *((void *)v93 + 1) = v95;
  swift_bridgeObjectRelease(v97);
  uint64_t v98 = v16[21];
  uint64_t v99 = &v8[v98];
  uint64_t v100 = &v9[v98];
  uint64_t v102 = *(void *)v100;
  uint64_t v101 = *((void *)v100 + 1);
  uint64_t v103 = *((void *)v99 + 1);
  *(void *)uint64_t v99 = v102;
  *((void *)v99 + 1) = v101;
  swift_bridgeObjectRelease(v103);
  uint64_t v104 = v131[7];
  uint64_t v105 = (char *)a1 + v104;
  NSString v106 = (char *)v132 + v104;
  int v107 = v12((char *)a1 + v104, 1LL, v10);
  int v108 = v12(v106, 1LL, v10);
  if (v107)
  {
    if (!v108)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v105, v106, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v105, 0LL, 1LL, v10);
      goto LABEL_85;
    }

    goto LABEL_84;
  }

  if (v108)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v105, v10);
LABEL_84:
    uint64_t v109 = sub_100183098(&qword_1006457E8);
    memcpy(v105, v106, *(void *)(*(void *)(v109 - 8) + 64LL));
    goto LABEL_85;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v105, v106, v10);
LABEL_85:
  uint64_t v110 = v131[8];
  uint64_t v111 = (uint64_t *)((char *)a1 + v110);
  uint64_t v112 = (uint64_t *)((char *)v132 + v110);
  uint64_t v114 = *v112;
  uint64_t v113 = v112[1];
  uint64_t v115 = v111[1];
  *uint64_t v111 = v114;
  v111[1] = v113;
  swift_bridgeObjectRelease(v115);
  uint64_t v116 = v131[9];
  uint64_t v117 = (uint64_t *)((char *)a1 + v116);
  Class v118 = (uint64_t *)((char *)v132 + v116);
  uint64_t v120 = *v118;
  uint64_t v119 = v118[1];
  uint64_t v121 = v117[1];
  *uint64_t v117 = v120;
  v117[1] = v119;
  swift_bridgeObjectRelease(v121);
  uint64_t v122 = v131[11];
  *((_BYTE *)a1 + v131[10]) = *((_BYTE *)v132 + v131[10]);
  NSString v123 = (uint64_t *)((char *)a1 + v122);
  unint64_t v124 = (uint64_t *)((char *)v132 + v122);
  unint64_t v125 = *(uint64_t *)((char *)a1 + v122 + 8);
  if (v125 >> 60 != 15)
  {
    unint64_t v126 = v124[1];
    if (v126 >> 60 != 15)
    {
      uint64_t v127 = *v123;
      *NSString v123 = *v124;
      v123[1] = v126;
      sub_100189B20(v127, v125);
      goto LABEL_90;
    }

    sub_10019DC8C((uint64_t)v123);
  }

  *(_OWORD *)NSString v123 = *(_OWORD *)v124;
LABEL_90:
  uint64_t v128 = v131[12];
  uint64_t v129 = *(void **)((char *)a1 + v128);
  *(uint64_t *)((char *)a1 + v12_Block_object_dispose(va, 8) = *(uint64_t *)((char *)v132 + v128);

  *((_BYTE *)a1 + v131[13]) = *((_BYTE *)v132 + v131[13]);
  return a1;
}

uint64_t sub_10019EF9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10019EFA8);
}

uint64_t sub_10019EFA8(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for SDAuthenticationSessionMetrics(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 24);
    }

    else
    {
      uint64_t v10 = sub_100183098(&qword_1006457E8);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 28);
    }

    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }

uint64_t sub_10019F04C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10019F058);
}

char *sub_10019F058(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)id result = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for SDAuthenticationSessionMetrics(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 24);
    }

    else
    {
      uint64_t v10 = sub_100183098(&qword_1006457E8);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 28);
    }

    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }

  return result;
}

uint64_t _s15MacApprovePhoneV18InitialLockContextVMa(uint64_t a1)
{
  return sub_1001A4AD0(a1, qword_100645848, (uint64_t)&_s15MacApprovePhoneV18InitialLockContextVMn);
}

void sub_10019F10C(uint64_t a1)
{
  v6[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[1] = "(";
  uint64_t v2 = type metadata accessor for SDAuthenticationSessionMetrics(319LL);
  if (v3 <= 0x3F)
  {
    v6[2] = *(void *)(v2 - 8) + 64LL;
    sub_10019F1DC(319LL);
    if (v5 <= 0x3F)
    {
      v6[3] = *(void *)(v4 - 8) + 64LL;
      v6[4] = &unk_1004CD5D0;
      v6[5] = &unk_1004CD5D0;
      v6[6] = &unk_1004CD5E8;
      v6[7] = &unk_1004CD600;
      v6[8] = &unk_1004CD618;
      void v6[9] = &unk_1004CD630;
      swift_initStructMetadata(a1, 256LL, 10LL, v6, a1 + 16);
    }
  }

void sub_10019F1DC(uint64_t a1)
{
  if (!qword_10064CB50)
  {
    uint64_t v2 = type metadata accessor for Date(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_10064CB50);
    }
  }

uint64_t sub_10019F230(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v19 + ((v5 + 16LL) & ~(unint64_t)v5);
    swift_retain(v19);
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    __int128 v8 = *((_OWORD *)a2 + 4);
    *(_OWORD *)(v4 + 64) = v8;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(v4 + 40, (uint64_t)(a2 + 5));
    uint64_t v9 = (int *)type metadata accessor for SDAuthenticationCommonOperationInput(0LL);
    uint64_t v10 = v9[6];
    uint64_t v11 = v4 + v10;
    uint64_t v12 = (uint64_t)a2 + v10;
    uint64_t v13 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL))(v11, v12, v13);
    *(void *)(v4 + v9[7]) = *(uint64_t *)((char *)a2 + v9[7]);
    *(_BYTE *)(v4 + v9[8]) = *((_BYTE *)a2 + v9[8]);
    uint64_t v14 = v9[9];
    uint64_t v15 = v4 + v14;
    uint64_t v16 = (uint64_t)a2 + v14;
    uint64_t v17 = *(uint64_t *)((char *)a2 + v14 + 24);
    if (v17)
    {
      uint64_t v18 = *(void *)(v16 + 32);
      *(void *)(v15 + 24) = v17;
      *(void *)(v15 + 32) = v18;
      (**(void (***)(void))(v17 - 8))();
    }

    else
    {
      __int128 v20 = *(_OWORD *)(v16 + 16);
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = v20;
      *(void *)(v15 + 32) = *(void *)(v16 + 32);
    }

    uint64_t v21 = a3[5];
    __int128 v22 = *(_OWORD *)((char *)a2 + v21 + 24);
    *(_OWORD *)(v4 + v21 + 24) = v22;
    (**(void (***)(void))(v22 - 8))();
    uint64_t v23 = a3[6];
    uint64_t v24 = a3[7];
    uint64_t v25 = *(uint64_t *)((char *)a2 + v23);
    *(void *)(v4 + v23) = v25;
    uint64_t v26 = *(uint64_t *)((char *)a2 + v24);
    *(void *)(v4 + v24) = v26;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
  }

  return v4;
}

uint64_t sub_10019F3A4(void *a1, int *a2)
{
  uint64_t v4 = type metadata accessor for SDAuthenticationCommonOperationInput(0LL);
  int v5 = (char *)a1 + *(int *)(v4 + 24);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  __int128 v7 = (void *)((char *)a1 + *(int *)(v4 + 36));
  if (v7[3]) {
    sub_10018709C(v7);
  }
  sub_10018709C((void *)((char *)a1 + a2[5]));
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[6]));
  return swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[7]));
}

uint64_t sub_10019F43C(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  __int128 v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 40, a2 + 40);
  __int128 v8 = (int *)type metadata accessor for SDAuthenticationCommonOperationInput(0LL);
  uint64_t v9 = v8[6];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
  *(void *)(a1 + v8[7]) = *(void *)(a2 + v8[7]);
  *(_BYTE *)(a1 + v8[8]) = *(_BYTE *)(a2 + v8[8]);
  uint64_t v13 = v8[9];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = *(void *)(a2 + v13 + 24);
  if (v16)
  {
    uint64_t v17 = *(void *)(v15 + 32);
    *(void *)(v14 + 24) = v16;
    *(void *)(v14 + 32) = v17;
    (**(void (***)(void))(v16 - 8))();
  }

  else
  {
    __int128 v18 = *(_OWORD *)(v15 + 16);
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = v18;
    *(void *)(v14 + 32) = *(void *)(v15 + 32);
  }

  uint64_t v19 = a3[5];
  __int128 v20 = *(_OWORD *)(a2 + v19 + 24);
  *(_OWORD *)(a1 + v19 + 24) = v20;
  (**(void (***)(void))(v20 - 8))();
  uint64_t v21 = a3[6];
  uint64_t v22 = a3[7];
  uint64_t v23 = *(void *)(a2 + v21);
  *(void *)(a1 + v21) = v23;
  uint64_t v24 = *(void *)(a2 + v22);
  *(void *)(a1 + v22) = v24;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  return a1;
}

void *sub_10019F57C(void *a1, void *a2, int *a3)
{
  __int128 v6 = (int *)type metadata accessor for SDAuthenticationCommonOperationInput(0LL);
  uint64_t v7 = v6[6];
  __int128 v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 24LL))(v8, v9, v10);
  *(void *)((char *)a1 + v6[7]) = *(void *)((char *)a2 + v6[7]);
  *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
  uint64_t v11 = v6[9];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = *(void *)((char *)a2 + v11 + 24);
  if (!*(void *)((char *)a1 + v11 + 24))
  {
    if (v14)
    {
      *((void *)v12 + 3) = v14;
      *((void *)v12 + 4) = *((void *)v13 + 4);
      (**(void (***)(char *, char *))(v14 - 8))(v12, v13);
      goto LABEL_8;
    }

uint64_t sub_10019F6C8(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v7 = (int *)type metadata accessor for SDAuthenticationCommonOperationInput(0LL);
  uint64_t v8 = v7[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))(v9, v10, v11);
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  uint64_t v12 = v7[9];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  __int128 v15 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = v15;
  *(void *)(v13 + 32) = *(void *)(v14 + 32);
  uint64_t v16 = a3[5];
  uint64_t v17 = a3[6];
  uint64_t v18 = a1 + v16;
  uint64_t v19 = a2 + v16;
  __int128 v20 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + swift_weakDestroy(v0 + 16) = v20;
  *(void *)(v18 + 32) = *(void *)(v19 + 32);
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10019F7C4(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  sub_10018709C((void *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v7 = (int *)type metadata accessor for SDAuthenticationCommonOperationInput(0LL);
  uint64_t v8 = v7[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
  *(_BYTE *)(a1 + v7[8]) = *(_BYTE *)(a2 + v7[8]);
  uint64_t v12 = v7[9];
  uint64_t v13 = a1 + v12;
  if (*(void *)(a1 + v12 + 24)) {
    sub_10018709C((void *)(a1 + v12));
  }
  __int128 v14 = *(_OWORD *)(a2 + v12 + 16);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)(a2 + v12);
  *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = v14;
  *(void *)(v13 + 32) = *(void *)(a2 + v12 + 32);
  uint64_t v15 = a3[5];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  sub_10018709C((void *)(a1 + v15));
  __int128 v18 = *(_OWORD *)(v17 + 16);
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = v18;
  *(void *)(v16 + 32) = *(void *)(v17 + 32);
  uint64_t v19 = a3[6];
  uint64_t v20 = *(void *)(a1 + v19);
  *(void *)(a1 + v19) = *(void *)(a2 + v19);
  swift_bridgeObjectRelease(v20);
  uint64_t v21 = a3[7];
  uint64_t v22 = *(void *)(a1 + v21);
  *(void *)(a1 + v21) = *(void *)(a2 + v21);
  swift_bridgeObjectRelease(v22);
  return a1;
}

uint64_t sub_10019F8F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10019F904);
}

uint64_t sub_10019F904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SDAuthenticationCommonOperationInput(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 24);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_10019F984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10019F990);
}

uint64_t sub_10019F990(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for SDAuthenticationCommonOperationInput(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  return result;
}

uint64_t _s15MacApprovePhoneV4FlowVMa(uint64_t a1)
{
  return sub_1001A4AD0(a1, qword_1006458F8, (uint64_t)&_s15MacApprovePhoneV4FlowVMn);
}

uint64_t sub_10019FA20(uint64_t a1)
{
  uint64_t result = type metadata accessor for SDAuthenticationCommonOperationInput(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "(";
    _DWORD v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *sub_10019FAA0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v6 = (uint64_t *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    uint64_t v6 = a1;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Date(0LL);
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain(v4);
    if (v12(v9, 1LL, v10))
    {
      uint64_t v13 = sub_100183098(&qword_1006457E8);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
    }

    __int128 v14 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
    uint64_t v15 = v14[5];
    uint64_t v16 = &v8[v15];
    uint64_t v17 = &v9[v15];
    if (v12(&v9[v15], 1LL, v10))
    {
      uint64_t v18 = sub_100183098(&qword_1006457E8);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v17, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0LL, 1LL, v10);
    }

    uint64_t v19 = v14[6];
    uint64_t v20 = &v8[v19];
    uint64_t v21 = &v9[v19];
    if (v12(&v9[v19], 1LL, v10))
    {
      uint64_t v22 = sub_100183098(&qword_1006457E8);
      memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v20, v21, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v20, 0LL, 1LL, v10);
    }

    uint64_t v23 = v14[7];
    uint64_t v24 = &v8[v23];
    uint64_t v25 = &v9[v23];
    if (v12(&v9[v23], 1LL, v10))
    {
      uint64_t v26 = sub_100183098(&qword_1006457E8);
      memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v24, v25, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v24, 0LL, 1LL, v10);
    }

    uint64_t v27 = v14[8];
    uint64_t v28 = &v8[v27];
    uint64_t v29 = &v9[v27];
    if (v12(&v9[v27], 1LL, v10))
    {
      uint64_t v30 = sub_100183098(&qword_1006457E8);
      memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v28, v29, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v28, 0LL, 1LL, v10);
    }

    uint64_t v31 = v14[9];
    int v32 = &v8[v31];
    int v33 = &v9[v31];
    if (v12(&v9[v31], 1LL, v10))
    {
      uint64_t v34 = sub_100183098(&qword_1006457E8);
      memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v32, v33, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v32, 0LL, 1LL, v10);
    }

    uint64_t v35 = v14[10];
    uint64_t v36 = &v8[v35];
    uint64_t v37 = &v9[v35];
    if (v12(&v9[v35], 1LL, v10))
    {
      uint64_t v38 = sub_100183098(&qword_1006457E8);
      memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v36, v37, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v36, 0LL, 1LL, v10);
    }

    uint64_t v39 = v14[11];
    uint64_t v40 = &v8[v39];
    uint64_t v41 = &v9[v39];
    if (v12(&v9[v39], 1LL, v10))
    {
      uint64_t v42 = sub_100183098(&qword_1006457E8);
      memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v40, v41, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v40, 0LL, 1LL, v10);
    }

    uint64_t v43 = v14[12];
    int v44 = &v8[v43];
    int v45 = &v9[v43];
    if (v12(&v9[v43], 1LL, v10))
    {
      uint64_t v46 = sub_100183098(&qword_1006457E8);
      memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v44, v45, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v44, 0LL, 1LL, v10);
    }

    v8[v14[13]] = v9[v14[13]];
    uint64_t v47 = v14[14];
    uint64_t v48 = &v8[v47];
    uint64_t v49 = &v9[v47];
    if (v12(&v9[v47], 1LL, v10))
    {
      uint64_t v50 = sub_100183098(&qword_1006457E8);
      memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v48, v49, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v48, 0LL, 1LL, v10);
    }

    uint64_t v51 = v14[15];
    uint64_t v52 = &v8[v51];
    uint64_t v53 = &v9[v51];
    if (v12(&v9[v51], 1LL, v10))
    {
      uint64_t v54 = sub_100183098(&qword_1006457E8);
      memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v52, v53, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v52, 0LL, 1LL, v10);
    }

    uint64_t v55 = v14[16];
    int v56 = &v8[v55];
    int v57 = &v9[v55];
    if (v12(&v9[v55], 1LL, v10))
    {
      uint64_t v58 = sub_100183098(&qword_1006457E8);
      memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v56, v57, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v56, 0LL, 1LL, v10);
    }

    uint64_t v59 = v14[17];
    uint64_t v60 = &v8[v59];
    uint64_t v61 = &v9[v59];
    if (v12(&v9[v59], 1LL, v10))
    {
      uint64_t v62 = sub_100183098(&qword_1006457E8);
      memcpy(v60, v61, *(void *)(*(void *)(v62 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v60, v61, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v60, 0LL, 1LL, v10);
    }

    uint64_t v63 = v14[18];
    uint64_t v64 = &v8[v63];
    uint64_t v65 = &v9[v63];
    *(_DWORD *)uint64_t v64 = *(_DWORD *)v65;
    v64[4] = v65[4];
    v8[v14[19]] = v9[v14[19]];
    uint64_t v66 = v14[20];
    uint64_t v67 = &v8[v66];
    int v68 = &v9[v66];
    uint64_t v69 = *((void *)v68 + 1);
    *(void *)uint64_t v67 = *(void *)v68;
    *((void *)v67 + 1) = v69;
    uint64_t v70 = v14[21];
    uint64_t v71 = &v8[v70];
    uint64_t v72 = &v9[v70];
    uint64_t v73 = *((void *)v72 + 1);
    *(void *)uint64_t v71 = *(void *)v72;
    *((void *)v71 + 1) = v73;
    uint64_t v74 = *(int *)(a3 + 24);
    int v75 = (char *)v6 + v74;
    uint64_t v76 = (char *)a2 + v74;
    __int128 v77 = *(_OWORD *)((char *)a2 + v74 + 24);
    *(_OWORD *)((char *)v6 + v74 + 24) = v77;
    uint64_t v78 = v77;
    uint64_t v79 = **(void (***)(char *, char *, uint64_t))(v77 - 8);
    swift_bridgeObjectRetain(v69);
    swift_bridgeObjectRetain(v73);
    v79(v75, v76, v78);
  }

  return v6;
}

uint64_t sub_1001A0194(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v9 = &v4[v8[5]];
  if (!v7(v9, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  uint64_t v10 = &v4[v8[6]];
  if (!v7(v10, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  }
  uint64_t v11 = &v4[v8[7]];
  if (!v7(v11, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  }
  uint64_t v12 = &v4[v8[8]];
  if (!v7(v12, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  }
  uint64_t v13 = &v4[v8[9]];
  if (!v7(v13, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v13, v5);
  }
  __int128 v14 = &v4[v8[10]];
  if (!v7(v14, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v14, v5);
  }
  uint64_t v15 = &v4[v8[11]];
  if (!v7(v15, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  }
  uint64_t v16 = &v4[v8[12]];
  if (!v7(v16, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v16, v5);
  }
  uint64_t v17 = &v4[v8[14]];
  if (!v7(v17, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v17, v5);
  }
  uint64_t v18 = &v4[v8[15]];
  if (!v7(v18, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v18, v5);
  }
  uint64_t v19 = &v4[v8[16]];
  if (!v7(v19, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v19, v5);
  }
  uint64_t v20 = &v4[v8[17]];
  if (!v7(v20, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v20, v5);
  }
  swift_bridgeObjectRelease(*(void *)&v4[v8[20] + 8]);
  swift_bridgeObjectRelease(*(void *)&v4[v8[21] + 8]);
  return sub_10018709C((void *)((char *)a1 + *(int *)(a2 + 24)));
}

uint64_t *sub_1001A0458(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain(v5);
  if (v11(v8, 1LL, v9))
  {
    uint64_t v12 = sub_100183098(&qword_1006457E8);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  uint64_t v13 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v14 = v13[5];
  uint64_t v15 = &v7[v14];
  uint64_t v16 = &v8[v14];
  if (v11(&v8[v14], 1LL, v9))
  {
    uint64_t v17 = sub_100183098(&qword_1006457E8);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v15, v16, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v15, 0LL, 1LL, v9);
  }

  uint64_t v18 = v13[6];
  uint64_t v19 = &v7[v18];
  uint64_t v20 = &v8[v18];
  if (v11(&v8[v18], 1LL, v9))
  {
    uint64_t v21 = sub_100183098(&qword_1006457E8);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v19, v20, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v19, 0LL, 1LL, v9);
  }

  uint64_t v22 = v13[7];
  uint64_t v23 = &v7[v22];
  uint64_t v24 = &v8[v22];
  if (v11(&v8[v22], 1LL, v9))
  {
    uint64_t v25 = sub_100183098(&qword_1006457E8);
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v23, v24, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v23, 0LL, 1LL, v9);
  }

  uint64_t v26 = v13[8];
  uint64_t v27 = &v7[v26];
  uint64_t v28 = &v8[v26];
  if (v11(&v8[v26], 1LL, v9))
  {
    uint64_t v29 = sub_100183098(&qword_1006457E8);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v27, v28, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v27, 0LL, 1LL, v9);
  }

  uint64_t v30 = v13[9];
  uint64_t v31 = &v7[v30];
  int v32 = &v8[v30];
  if (v11(&v8[v30], 1LL, v9))
  {
    uint64_t v33 = sub_100183098(&qword_1006457E8);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v31, v32, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v31, 0LL, 1LL, v9);
  }

  uint64_t v34 = v13[10];
  uint64_t v35 = &v7[v34];
  uint64_t v36 = &v8[v34];
  if (v11(&v8[v34], 1LL, v9))
  {
    uint64_t v37 = sub_100183098(&qword_1006457E8);
    memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v35, v36, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v35, 0LL, 1LL, v9);
  }

  uint64_t v38 = v13[11];
  uint64_t v39 = &v7[v38];
  uint64_t v40 = &v8[v38];
  if (v11(&v8[v38], 1LL, v9))
  {
    uint64_t v41 = sub_100183098(&qword_1006457E8);
    memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v39, v40, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v39, 0LL, 1LL, v9);
  }

  uint64_t v42 = v13[12];
  uint64_t v43 = &v7[v42];
  int v44 = &v8[v42];
  if (v11(&v8[v42], 1LL, v9))
  {
    uint64_t v45 = sub_100183098(&qword_1006457E8);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v43, v44, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v43, 0LL, 1LL, v9);
  }

  v7[v13[13]] = v8[v13[13]];
  uint64_t v46 = v13[14];
  uint64_t v47 = &v7[v46];
  uint64_t v48 = &v8[v46];
  if (v11(&v8[v46], 1LL, v9))
  {
    uint64_t v49 = sub_100183098(&qword_1006457E8);
    memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v47, v48, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v47, 0LL, 1LL, v9);
  }

  uint64_t v50 = v13[15];
  uint64_t v51 = &v7[v50];
  uint64_t v52 = &v8[v50];
  if (v11(&v8[v50], 1LL, v9))
  {
    uint64_t v53 = sub_100183098(&qword_1006457E8);
    memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v51, v52, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v51, 0LL, 1LL, v9);
  }

  uint64_t v54 = v13[16];
  uint64_t v55 = &v7[v54];
  int v56 = &v8[v54];
  if (v11(&v8[v54], 1LL, v9))
  {
    uint64_t v57 = sub_100183098(&qword_1006457E8);
    memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v55, v56, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v55, 0LL, 1LL, v9);
  }

  uint64_t v58 = v13[17];
  uint64_t v59 = &v7[v58];
  uint64_t v60 = &v8[v58];
  if (v11(&v8[v58], 1LL, v9))
  {
    uint64_t v61 = sub_100183098(&qword_1006457E8);
    memcpy(v59, v60, *(void *)(*(void *)(v61 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v59, v60, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v59, 0LL, 1LL, v9);
  }

  uint64_t v62 = v13[18];
  uint64_t v63 = &v7[v62];
  uint64_t v64 = &v8[v62];
  *(_DWORD *)uint64_t v63 = *(_DWORD *)v64;
  v63[4] = v64[4];
  v7[v13[19]] = v8[v13[19]];
  uint64_t v65 = v13[20];
  uint64_t v66 = &v7[v65];
  uint64_t v67 = &v8[v65];
  uint64_t v68 = *((void *)v67 + 1);
  *(void *)uint64_t v66 = *(void *)v67;
  *((void *)v66 + 1) = v68;
  uint64_t v69 = v13[21];
  uint64_t v70 = &v7[v69];
  uint64_t v71 = &v8[v69];
  uint64_t v72 = *((void *)v71 + 1);
  *(void *)uint64_t v70 = *(void *)v71;
  *((void *)v70 + 1) = v72;
  uint64_t v73 = *(int *)(a3 + 24);
  uint64_t v74 = (char *)a1 + v73;
  int v75 = (char *)a2 + v73;
  __int128 v76 = *(_OWORD *)(v75 + 24);
  *(_OWORD *)((char *)a1 + v73 + 24) = v76;
  uint64_t v77 = v76;
  uint64_t v78 = **(void (***)(char *, char *, uint64_t))(v76 - 8);
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRetain(v72);
  v78(v74, v75, v77);
  return a1;
}

uint64_t *sub_1001A0B24(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v105 = a3;
  NSString v106 = a2;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1LL, v11);
  int v15 = v13(v10, 1LL, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    uint64_t v16 = sub_100183098(&qword_1006457E8);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
LABEL_7:
  uint64_t v17 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v18 = v17[5];
  uint64_t v19 = &v9[v18];
  uint64_t v20 = &v10[v18];
  int v21 = v13(&v9[v18], 1LL, v11);
  int v22 = v13(v20, 1LL, v11);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v19, v20, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v19, 0LL, 1LL, v11);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v11);
LABEL_12:
    uint64_t v23 = sub_100183098(&qword_1006457E8);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v19, v20, v11);
LABEL_13:
  uint64_t v24 = v17[6];
  uint64_t v25 = &v9[v24];
  uint64_t v26 = &v10[v24];
  int v27 = v13(&v9[v24], 1LL, v11);
  int v28 = v13(v26, 1LL, v11);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v25, v26, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v25, 0LL, 1LL, v11);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v25, v11);
LABEL_18:
    uint64_t v29 = sub_100183098(&qword_1006457E8);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v25, v26, v11);
LABEL_19:
  uint64_t v30 = v17[7];
  uint64_t v31 = &v9[v30];
  int v32 = &v10[v30];
  int v33 = v13(&v9[v30], 1LL, v11);
  int v34 = v13(v32, 1LL, v11);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v31, v32, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v31, 0LL, 1LL, v11);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v31, v11);
LABEL_24:
    uint64_t v35 = sub_100183098(&qword_1006457E8);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v31, v32, v11);
LABEL_25:
  uint64_t v36 = v17[8];
  uint64_t v37 = &v9[v36];
  uint64_t v38 = &v10[v36];
  int v39 = v13(&v9[v36], 1LL, v11);
  int v40 = v13(v38, 1LL, v11);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v37, v38, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v37, 0LL, 1LL, v11);
      goto LABEL_31;
    }

    goto LABEL_30;
  }

  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v37, v11);
LABEL_30:
    uint64_t v41 = sub_100183098(&qword_1006457E8);
    memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64LL));
    goto LABEL_31;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v37, v38, v11);
LABEL_31:
  uint64_t v42 = v17[9];
  uint64_t v43 = &v9[v42];
  int v44 = &v10[v42];
  int v45 = v13(&v9[v42], 1LL, v11);
  int v46 = v13(v44, 1LL, v11);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v43, v44, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v43, 0LL, 1LL, v11);
      goto LABEL_37;
    }

    goto LABEL_36;
  }

  if (v46)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v43, v11);
LABEL_36:
    uint64_t v47 = sub_100183098(&qword_1006457E8);
    memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64LL));
    goto LABEL_37;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v43, v44, v11);
LABEL_37:
  uint64_t v48 = v17[10];
  uint64_t v49 = &v9[v48];
  uint64_t v50 = &v10[v48];
  int v51 = v13(&v9[v48], 1LL, v11);
  int v52 = v13(v50, 1LL, v11);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v49, v50, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v49, 0LL, 1LL, v11);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v49, v11);
LABEL_42:
    uint64_t v53 = sub_100183098(&qword_1006457E8);
    memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64LL));
    goto LABEL_43;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v49, v50, v11);
LABEL_43:
  uint64_t v54 = v17[11];
  uint64_t v55 = &v9[v54];
  int v56 = &v10[v54];
  int v57 = v13(&v9[v54], 1LL, v11);
  int v58 = v13(v56, 1LL, v11);
  if (v57)
  {
    if (!v58)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v55, v56, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v55, 0LL, 1LL, v11);
      goto LABEL_49;
    }

    goto LABEL_48;
  }

  if (v58)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v55, v11);
LABEL_48:
    uint64_t v59 = sub_100183098(&qword_1006457E8);
    memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64LL));
    goto LABEL_49;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v55, v56, v11);
LABEL_49:
  uint64_t v60 = v17[12];
  uint64_t v61 = &v9[v60];
  uint64_t v62 = &v10[v60];
  int v63 = v13(&v9[v60], 1LL, v11);
  int v64 = v13(v62, 1LL, v11);
  if (v63)
  {
    if (!v64)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v61, v62, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v61, 0LL, 1LL, v11);
      goto LABEL_55;
    }

    goto LABEL_54;
  }

  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v61, v11);
LABEL_54:
    uint64_t v65 = sub_100183098(&qword_1006457E8);
    memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64LL));
    goto LABEL_55;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v61, v62, v11);
LABEL_55:
  v9[v17[13]] = v10[v17[13]];
  uint64_t v66 = v17[14];
  uint64_t v67 = &v9[v66];
  uint64_t v68 = &v10[v66];
  int v69 = v13(&v9[v66], 1LL, v11);
  int v70 = v13(v68, 1LL, v11);
  if (v69)
  {
    if (!v70)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v67, v68, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v67, 0LL, 1LL, v11);
      goto LABEL_61;
    }

    goto LABEL_60;
  }

  if (v70)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v67, v11);
LABEL_60:
    uint64_t v71 = sub_100183098(&qword_1006457E8);
    memcpy(v67, v68, *(void *)(*(void *)(v71 - 8) + 64LL));
    goto LABEL_61;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v67, v68, v11);
LABEL_61:
  uint64_t v72 = v17[15];
  uint64_t v73 = &v9[v72];
  uint64_t v74 = &v10[v72];
  int v75 = v13(&v9[v72], 1LL, v11);
  int v76 = v13(v74, 1LL, v11);
  if (v75)
  {
    if (!v76)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v73, v74, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v73, 0LL, 1LL, v11);
      goto LABEL_67;
    }

    goto LABEL_66;
  }

  if (v76)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v73, v11);
LABEL_66:
    uint64_t v77 = sub_100183098(&qword_1006457E8);
    memcpy(v73, v74, *(void *)(*(void *)(v77 - 8) + 64LL));
    goto LABEL_67;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v73, v74, v11);
LABEL_67:
  uint64_t v78 = v17[16];
  uint64_t v79 = &v9[v78];
  int v80 = &v10[v78];
  int v81 = v13(&v9[v78], 1LL, v11);
  int v82 = v13(v80, 1LL, v11);
  if (v81)
  {
    if (!v82)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v79, v80, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v79, 0LL, 1LL, v11);
      goto LABEL_73;
    }

    goto LABEL_72;
  }

  if (v82)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v79, v11);
LABEL_72:
    uint64_t v83 = sub_100183098(&qword_1006457E8);
    memcpy(v79, v80, *(void *)(*(void *)(v83 - 8) + 64LL));
    goto LABEL_73;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v79, v80, v11);
LABEL_73:
  uint64_t v84 = v17[17];
  uint64_t v85 = &v9[v84];
  int v86 = &v10[v84];
  int v87 = v13(&v9[v84], 1LL, v11);
  int v88 = v13(v86, 1LL, v11);
  if (!v87)
  {
    if (!v88)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v85, v86, v11);
      goto LABEL_79;
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v85, v11);
    goto LABEL_78;
  }

  if (v88)
  {
LABEL_78:
    uint64_t v89 = sub_100183098(&qword_1006457E8);
    memcpy(v85, v86, *(void *)(*(void *)(v89 - 8) + 64LL));
    goto LABEL_79;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v85, v86, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v85, 0LL, 1LL, v11);
LABEL_79:
  uint64_t v90 = v17[18];
  uint64_t v91 = &v9[v90];
  uint64_t v92 = &v10[v90];
  int v93 = *(_DWORD *)v92;
  v91[4] = v92[4];
  *(_DWORD *)uint64_t v91 = v93;
  v9[v17[19]] = v10[v17[19]];
  uint64_t v94 = v17[20];
  uint64_t v95 = &v9[v94];
  uint64_t v96 = &v10[v94];
  *(void *)uint64_t v95 = *(void *)v96;
  uint64_t v97 = *((void *)v96 + 1);
  uint64_t v98 = *((void *)v95 + 1);
  *((void *)v95 + 1) = v97;
  swift_bridgeObjectRetain(v97);
  swift_bridgeObjectRelease(v98);
  uint64_t v99 = v17[21];
  uint64_t v100 = &v9[v99];
  uint64_t v101 = &v10[v99];
  *(void *)uint64_t v100 = *(void *)v101;
  uint64_t v102 = *((void *)v101 + 1);
  uint64_t v103 = *((void *)v100 + 1);
  *((void *)v100 + 1) = v102;
  swift_bridgeObjectRetain(v102);
  swift_bridgeObjectRelease(v103);
  sub_10019DB24((uint64_t *)((char *)a1 + *(int *)(v105 + 24)), (uint64_t *)((char *)v106 + *(int *)(v105 + 24)));
  return a1;
}

void *sub_1001A1574(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1LL, v8))
  {
    uint64_t v11 = sub_100183098(&qword_1006457E8);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0LL, 1LL, v8);
  }

  uint64_t v12 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v13 = v12[5];
  int v14 = &v6[v13];
  int v15 = &v7[v13];
  if (v10(&v7[v13], 1LL, v8))
  {
    uint64_t v16 = sub_100183098(&qword_1006457E8);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v15, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v14, 0LL, 1LL, v8);
  }

  uint64_t v17 = v12[6];
  uint64_t v18 = &v6[v17];
  uint64_t v19 = &v7[v17];
  if (v10(&v7[v17], 1LL, v8))
  {
    uint64_t v20 = sub_100183098(&qword_1006457E8);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v18, v19, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v18, 0LL, 1LL, v8);
  }

  uint64_t v21 = v12[7];
  int v22 = &v6[v21];
  uint64_t v23 = &v7[v21];
  if (v10(&v7[v21], 1LL, v8))
  {
    uint64_t v24 = sub_100183098(&qword_1006457E8);
    memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v22, v23, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v22, 0LL, 1LL, v8);
  }

  uint64_t v25 = v12[8];
  uint64_t v26 = &v6[v25];
  int v27 = &v7[v25];
  if (v10(&v7[v25], 1LL, v8))
  {
    uint64_t v28 = sub_100183098(&qword_1006457E8);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v26, v27, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v26, 0LL, 1LL, v8);
  }

  uint64_t v29 = v12[9];
  uint64_t v30 = &v6[v29];
  uint64_t v31 = &v7[v29];
  if (v10(&v7[v29], 1LL, v8))
  {
    uint64_t v32 = sub_100183098(&qword_1006457E8);
    memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v30, v31, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v30, 0LL, 1LL, v8);
  }

  uint64_t v33 = v12[10];
  int v34 = &v6[v33];
  uint64_t v35 = &v7[v33];
  if (v10(&v7[v33], 1LL, v8))
  {
    uint64_t v36 = sub_100183098(&qword_1006457E8);
    memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v34, v35, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v34, 0LL, 1LL, v8);
  }

  uint64_t v37 = v12[11];
  uint64_t v38 = &v6[v37];
  int v39 = &v7[v37];
  if (v10(&v7[v37], 1LL, v8))
  {
    uint64_t v40 = sub_100183098(&qword_1006457E8);
    memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v38, v39, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v38, 0LL, 1LL, v8);
  }

  uint64_t v41 = v12[12];
  uint64_t v42 = &v6[v41];
  uint64_t v43 = &v7[v41];
  if (v10(&v7[v41], 1LL, v8))
  {
    uint64_t v44 = sub_100183098(&qword_1006457E8);
    memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v42, v43, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v42, 0LL, 1LL, v8);
  }

  v6[v12[13]] = v7[v12[13]];
  uint64_t v45 = v12[14];
  int v46 = &v6[v45];
  uint64_t v47 = &v7[v45];
  if (v10(&v7[v45], 1LL, v8))
  {
    uint64_t v48 = sub_100183098(&qword_1006457E8);
    memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v46, v47, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v46, 0LL, 1LL, v8);
  }

  uint64_t v49 = v12[15];
  uint64_t v50 = &v6[v49];
  int v51 = &v7[v49];
  if (v10(&v7[v49], 1LL, v8))
  {
    uint64_t v52 = sub_100183098(&qword_1006457E8);
    memcpy(v50, v51, *(void *)(*(void *)(v52 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v50, v51, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v50, 0LL, 1LL, v8);
  }

  uint64_t v53 = v12[16];
  uint64_t v54 = &v6[v53];
  uint64_t v55 = &v7[v53];
  if (v10(&v7[v53], 1LL, v8))
  {
    uint64_t v56 = sub_100183098(&qword_1006457E8);
    memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v54, v55, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v54, 0LL, 1LL, v8);
  }

  uint64_t v57 = v12[17];
  int v58 = &v6[v57];
  uint64_t v59 = &v7[v57];
  if (v10(&v7[v57], 1LL, v8))
  {
    uint64_t v60 = sub_100183098(&qword_1006457E8);
    memcpy(v58, v59, *(void *)(*(void *)(v60 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v58, v59, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v58, 0LL, 1LL, v8);
  }

  uint64_t v61 = v12[18];
  uint64_t v62 = &v6[v61];
  int v63 = &v7[v61];
  *(_DWORD *)uint64_t v62 = *(_DWORD *)v63;
  v62[4] = v63[4];
  v6[v12[19]] = v7[v12[19]];
  *(_OWORD *)&v6[v12[20]] = *(_OWORD *)&v7[v12[20]];
  *(_OWORD *)&v6[v12[21]] = *(_OWORD *)&v7[v12[21]];
  uint64_t v64 = *(int *)(a3 + 24);
  uint64_t v65 = (char *)a1 + v64;
  uint64_t v66 = (char *)a2 + v64;
  __int128 v67 = *((_OWORD *)v66 + 1);
  *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
  *((_OWORD *)v65 + 1) = v67;
  *((void *)v65 + 4) = *((void *)v66 + 4);
  return a1;
}

uint64_t *sub_1001A1C08(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v109 = a3;
  uint64_t v110 = a2;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100183098(&qword_1006457E8);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v17 = v16[5];
  uint64_t v18 = &v8[v17];
  uint64_t v19 = &v9[v17];
  int v20 = v12(&v8[v17], 1LL, v10);
  int v21 = v12(v19, 1LL, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v19, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v18, 0LL, 1LL, v10);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_12:
    uint64_t v22 = sub_100183098(&qword_1006457E8);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v18, v19, v10);
LABEL_13:
  uint64_t v23 = v16[6];
  uint64_t v24 = &v8[v23];
  uint64_t v25 = &v9[v23];
  int v26 = v12(&v8[v23], 1LL, v10);
  int v27 = v12(v25, 1LL, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v24, v25, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v24, 0LL, 1LL, v10);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
LABEL_18:
    uint64_t v28 = sub_100183098(&qword_1006457E8);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v24, v25, v10);
LABEL_19:
  uint64_t v29 = v16[7];
  uint64_t v30 = &v8[v29];
  uint64_t v31 = &v9[v29];
  int v32 = v12(&v8[v29], 1LL, v10);
  int v33 = v12(v31, 1LL, v10);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v30, v31, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v30, 0LL, 1LL, v10);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
LABEL_24:
    uint64_t v34 = sub_100183098(&qword_1006457E8);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v30, v31, v10);
LABEL_25:
  uint64_t v35 = v16[8];
  uint64_t v36 = &v8[v35];
  uint64_t v37 = &v9[v35];
  int v38 = v12(&v8[v35], 1LL, v10);
  int v39 = v12(v37, 1LL, v10);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v36, v37, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v36, 0LL, 1LL, v10);
      goto LABEL_31;
    }

    goto LABEL_30;
  }

  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
LABEL_30:
    uint64_t v40 = sub_100183098(&qword_1006457E8);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64LL));
    goto LABEL_31;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v36, v37, v10);
LABEL_31:
  uint64_t v41 = v16[9];
  uint64_t v42 = &v8[v41];
  uint64_t v43 = &v9[v41];
  int v44 = v12(&v8[v41], 1LL, v10);
  int v45 = v12(v43, 1LL, v10);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v42, v43, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v42, 0LL, 1LL, v10);
      goto LABEL_37;
    }

    goto LABEL_36;
  }

  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
LABEL_36:
    uint64_t v46 = sub_100183098(&qword_1006457E8);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64LL));
    goto LABEL_37;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v42, v43, v10);
LABEL_37:
  uint64_t v47 = v16[10];
  uint64_t v48 = &v8[v47];
  uint64_t v49 = &v9[v47];
  int v50 = v12(&v8[v47], 1LL, v10);
  int v51 = v12(v49, 1LL, v10);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v48, v49, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v48, 0LL, 1LL, v10);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
LABEL_42:
    uint64_t v52 = sub_100183098(&qword_1006457E8);
    memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64LL));
    goto LABEL_43;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v48, v49, v10);
LABEL_43:
  uint64_t v53 = v16[11];
  uint64_t v54 = &v8[v53];
  uint64_t v55 = &v9[v53];
  int v56 = v12(&v8[v53], 1LL, v10);
  int v57 = v12(v55, 1LL, v10);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v54, v55, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v54, 0LL, 1LL, v10);
      goto LABEL_49;
    }

    goto LABEL_48;
  }

  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v10);
LABEL_48:
    uint64_t v58 = sub_100183098(&qword_1006457E8);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64LL));
    goto LABEL_49;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v54, v55, v10);
LABEL_49:
  uint64_t v59 = v16[12];
  uint64_t v60 = &v8[v59];
  uint64_t v61 = &v9[v59];
  int v62 = v12(&v8[v59], 1LL, v10);
  int v63 = v12(v61, 1LL, v10);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v60, v61, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v60, 0LL, 1LL, v10);
      goto LABEL_55;
    }

    goto LABEL_54;
  }

  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v60, v10);
LABEL_54:
    uint64_t v64 = sub_100183098(&qword_1006457E8);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64LL));
    goto LABEL_55;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v60, v61, v10);
LABEL_55:
  v8[v16[13]] = v9[v16[13]];
  uint64_t v65 = v16[14];
  uint64_t v66 = &v8[v65];
  __int128 v67 = &v9[v65];
  int v68 = v12(&v8[v65], 1LL, v10);
  int v69 = v12(v67, 1LL, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v66, v67, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v66, 0LL, 1LL, v10);
      goto LABEL_61;
    }

    goto LABEL_60;
  }

  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v10);
LABEL_60:
    uint64_t v70 = sub_100183098(&qword_1006457E8);
    memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64LL));
    goto LABEL_61;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v66, v67, v10);
LABEL_61:
  uint64_t v71 = v16[15];
  uint64_t v72 = &v8[v71];
  uint64_t v73 = &v9[v71];
  int v74 = v12(&v8[v71], 1LL, v10);
  int v75 = v12(v73, 1LL, v10);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v72, v73, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v72, 0LL, 1LL, v10);
      goto LABEL_67;
    }

    goto LABEL_66;
  }

  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
LABEL_66:
    uint64_t v76 = sub_100183098(&qword_1006457E8);
    memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64LL));
    goto LABEL_67;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v72, v73, v10);
LABEL_67:
  uint64_t v77 = v16[16];
  uint64_t v78 = &v8[v77];
  uint64_t v79 = &v9[v77];
  int v80 = v12(&v8[v77], 1LL, v10);
  int v81 = v12(v79, 1LL, v10);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v78, v79, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v78, 0LL, 1LL, v10);
      goto LABEL_73;
    }

    goto LABEL_72;
  }

  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_72:
    uint64_t v82 = sub_100183098(&qword_1006457E8);
    memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64LL));
    goto LABEL_73;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v78, v79, v10);
LABEL_73:
  uint64_t v83 = v16[17];
  uint64_t v84 = &v8[v83];
  uint64_t v85 = &v9[v83];
  int v86 = v12(&v8[v83], 1LL, v10);
  int v87 = v12(v85, 1LL, v10);
  if (!v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v84, v85, v10);
      goto LABEL_79;
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v84, v10);
    goto LABEL_78;
  }

  if (v87)
  {
LABEL_78:
    uint64_t v88 = sub_100183098(&qword_1006457E8);
    memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64LL));
    goto LABEL_79;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v84, v85, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v84, 0LL, 1LL, v10);
LABEL_79:
  uint64_t v89 = v16[18];
  uint64_t v90 = &v8[v89];
  uint64_t v91 = &v9[v89];
  *(_DWORD *)uint64_t v90 = *(_DWORD *)v91;
  v90[4] = v91[4];
  v8[v16[19]] = v9[v16[19]];
  uint64_t v92 = v16[20];
  int v93 = &v8[v92];
  uint64_t v94 = &v9[v92];
  uint64_t v96 = *(void *)v94;
  uint64_t v95 = *((void *)v94 + 1);
  uint64_t v97 = *((void *)v93 + 1);
  *(void *)int v93 = v96;
  *((void *)v93 + 1) = v95;
  swift_bridgeObjectRelease(v97);
  uint64_t v98 = v16[21];
  uint64_t v99 = &v8[v98];
  uint64_t v100 = &v9[v98];
  uint64_t v102 = *(void *)v100;
  uint64_t v101 = *((void *)v100 + 1);
  uint64_t v103 = *((void *)v99 + 1);
  *(void *)uint64_t v99 = v102;
  *((void *)v99 + 1) = v101;
  swift_bridgeObjectRelease(v103);
  uint64_t v104 = *(int *)(v109 + 24);
  uint64_t v105 = (char *)a1 + v104;
  NSString v106 = (char *)v110 + v104;
  sub_10018709C((uint64_t *)((char *)a1 + v104));
  __int128 v107 = *((_OWORD *)v106 + 1);
  *(_OWORD *)uint64_t v105 = *(_OWORD *)v106;
  *((_OWORD *)v105 + 1) = v107;
  *((void *)v105 + 4) = *((void *)v106 + 4);
  return a1;
}

uint64_t sub_1001A2644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001A2650);
}

uint64_t sub_1001A2650(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for SDAuthenticationSessionMetrics(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 20)],  a2,  v8);
  }

uint64_t sub_1001A26CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001A26D8);
}

char *sub_1001A26D8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for SDAuthenticationSessionMetrics(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t _s15MacApprovePhoneV17InitialKeyContextVMa(uint64_t a1)
{
  return sub_1001A4AD0(a1, qword_100645990, (uint64_t)&_s15MacApprovePhoneV17InitialKeyContextVMn);
}

uint64_t sub_1001A2760(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for SDAuthenticationSessionMetrics(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    _DWORD v4[2] = "(";
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1001A27E0(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 44);
  uint64_t v3 = *(void *)v2;
  sub_1001A4C04(*(void *)v2, *(void *)(v2 + 8));
  return v3;
}

uint64_t (*sub_1001A281C())()
{
  return LongHash.storage.getter;
}

uint64_t sub_1001A2830(uint64_t a1, uint64_t a2)
{
  return sub_1001A315C(a1, a2, (uint64_t (*)(void))sub_10019BADC);
}

uint64_t sub_1001A284C(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 52));
}

uint64_t sub_1001A2858@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10019A6C4(v2 + *(int *)(a1 + 24), a2);
}

uint64_t sub_1001A2878@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001A4B84(v2 + *(int *)(a1 + 20), a2, type metadata accessor for SDAuthenticationSessionMetrics);
}

uint64_t (*sub_1001A28A0())()
{
  return LongHash.storage.getter;
}

uint64_t sub_1001A28B4()
{
  return swift_bridgeObjectRetain(*v0);
}

id sub_1001A28BC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_BYTE *)a3 = 0;
  uint64_t v6 = sub_100183098(&qword_1006457E0);
  uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1004CD530;
  if (qword_100643EB0 != -1) {
    swift_once(&qword_100643EB0, LongHash.storage.getter);
  }
  *(void *)(v7 + 56) = &type metadata for SDAuthentication.Operation.CheckLocalSecurityPolicy;
  *(void *)(v7 + 64) = &off_10064ABB8;
  *(void *)(v7 + 96) = &type metadata for SDAuthentication.Operation.RequestUserApproval;
  *(void *)(v7 + 104) = &off_10064AEF8;
  *(void *)(a3 + _Block_object_dispose(va, 8) = v7;
  if ([a1 hasBundleID]
    && [a1 hasAppName]
    && [a1 hasBiometricOnly])
  {
    uint64_t v8 = _s15MacApprovePhoneV17InitialKeyContextVMa(0LL);
    sub_10019A6C4(a2 + *(int *)(v8 + 24), a3 + 16);
    uint64_t v9 = a2 + *(int *)(v8 + 20);
    uint64_t v10 = (int *)_s15MacApprovePhoneV26HandleApprovePromptContextVMa(0LL);
    sub_1001A4B84(v9, a3 + v10[7], type metadata accessor for SDAuthenticationSessionMetrics);
    id result = [a1 bundleID];
    if (result)
    {
      uint64_t v12 = result;
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
      uint64_t v15 = v14;

      uint64_t v16 = (uint64_t *)(a3 + v10[8]);
      *uint64_t v16 = v13;
      v16[1] = v15;
      id result = [a1 appName];
      if (result)
      {
        uint64_t v17 = result;
        uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
        uint64_t v20 = v19;

        int v21 = (uint64_t *)(a3 + v10[9]);
        *int v21 = v18;
        v21[1] = v20;
        LOBYTE(v17) = [a1 biometricOnly];

        id result = (id)sub_1001A4BC8(a2, _s15MacApprovePhoneV17InitialKeyContextVMa);
        *(_BYTE *)(a3 + v10[10]) = (_BYTE)v17;
        return result;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

  else
  {
    _StringGuts.grow(_:)(55LL);
    v22._object = (void *)0x8000000100504130LL;
    v22._countAndFlagsBits = 0xD000000000000035LL;
    String.append(_:)(v22);
    id v23 = [a1 description];
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    int v26 = v25;

    v27._countAndFlagsBits = v24;
    v27._object = v26;
    String.append(_:)(v27);
    swift_bridgeObjectRelease(v26);
    unint64_t v28 = sub_100187014();
    uint64_t v29 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v28, 0LL, 0LL);
    *(_DWORD *)uint64_t v30 = 1;
    *(void *)(v30 + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(v30 + swift_weakDestroy(v0 + 16) = 0xE000000000000000LL;
    swift_willThrow(v29);

    sub_1001A4BC8(a2, _s15MacApprovePhoneV17InitialKeyContextVMa);
    return (id)swift_bridgeObjectRelease(*(void *)(a3 + 8));
  }

  return result;
}

uint64_t sub_1001A2B94@<X0>(uint64_t a1@<X8>)
{
  return sub_10019A6C4(v1 + 16, a1);
}

uint64_t sub_1001A2BB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001A4B84(v2 + *(int *)(a1 + 28), a2, type metadata accessor for SDAuthenticationSessionMetrics);
}

uint64_t (*sub_1001A2BD8())()
{
  return LongHash.storage.getter;
}

uint64_t sub_1001A2BEC()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 8));
}

void sub_1001A2BF4(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100183098(&qword_1006457E0);
  uint64_t v12 = swift_allocObject(v11, 112LL, 7LL);
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_1004CD530;
  if (qword_100643EB0 != -1) {
    swift_once(&qword_100643EB0, LongHash.storage.getter);
  }
  *(void *)(v12 + 56) = &type metadata for SDAuthentication.Operation.UseApprovalACMTokenForIncludingFirstAKSTokenInMessage;
  *(void *)(v12 + 64) = &off_10064AED8;
  *(void *)(v12 + 96) = &type metadata for SDAuthentication.Operation.SendRequestMessage;
  *(void *)(v12 + 104) = &off_10064AB38;
  *a4 = v12;
  *((_OWORD *)a4 + 3) = xmmword_1004CD540;
  uint64_t v13 = _s15MacApprovePhoneV24HandleUserApprovalResultVMa(0LL);
  uint64_t v14 = *(int *)(v13 + 32);
  *(uint64_t *)((char *)a4 + v14) = 0LL;
  *((_BYTE *)a4 + *(int *)(v13 + 36)) = 0;
  if (a2 >> 60 == 15)
  {
    unint64_t v15 = sub_100187014();
    uint64_t v16 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v15, 0LL, 0LL);
    *(_DWORD *)uint64_t v17 = 30;
    *(void *)(v17 + _Block_object_dispose(va, 8) = 0xD00000000000001CLL;
    *(void *)(v17 + swift_weakDestroy(v0 + 16) = 0x8000000100504170LL;
    swift_willThrow(v16);
    sub_1001A4BC8(a3, _s15MacApprovePhoneV26HandleApprovePromptContextVMa);
    swift_bridgeObjectRelease(*a4);
    sub_100189B0C(a4[6], a4[7]);
  }

  else
  {
    uint64_t v18 = v13;
    sub_10019A6C4(a3 + 16, (uint64_t)(a4 + 1));
    a4[6] = a1;
    a4[7] = a2;
    uint64_t v19 = _s15MacApprovePhoneV26HandleApprovePromptContextVMa(0LL);
    sub_1001A4B84(a3 + *(int *)(v19 + 28), (uint64_t)v10, type metadata accessor for SDAuthenticationSessionMetrics);
    sub_1001A4BC8(a3, _s15MacApprovePhoneV26HandleApprovePromptContextVMa);
    sub_1001A4B40( (uint64_t)v10,  (uint64_t)a4 + *(int *)(v18 + 28),  type metadata accessor for SDAuthenticationSessionMetrics);
  }

uint64_t sub_1001A2DF8()
{
  uint64_t v1 = *(void *)(v0 + 48);
  sub_1001A4C04(v1, *(void *)(v0 + 56));
  return v1;
}

id sub_1001A2E28()
{
  return sub_1001A3224(_s15MacApprovePhoneV24HandleUserApprovalResultVMa, (Class *)off_1005C8870);
}

uint64_t sub_1001A2E4C(uint64_t a1, uint64_t a2)
{
  return sub_1001A37A0(a1, a2, _s15MacApprovePhoneV24HandleUserApprovalResultVMa, (Class *)off_1005C8870);
}

id sub_1001A2E70()
{
  uint64_t v1 = *(int *)(_s15MacApprovePhoneV20HandleRequestContextVMa(0LL) + 36);
  uint64_t v2 = *(void **)(v0 + v1);
  if (v2)
  {
    id v3 = *(id *)(v0 + v1);
LABEL_5:
    id v5 = v2;
    return v3;
  }

  id result = [objc_allocWithZone((Class)SDAuthenticationResponse) init];
  if (result)
  {
    *(void *)(v0 + v1) = result;
    id v3 = result;
    uint64_t v2 = 0LL;
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

void sub_1001A2EDC(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_100183098(&qword_1006457E0);
  uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1004CD530;
  if (qword_100643EB0 != -1) {
    swift_once(&qword_100643EB0, LongHash.storage.getter);
  }
  *(void *)(v7 + 56) = &type metadata for SDAuthentication.Operation.UseApproveTokenForIncludingFirstAKSTokenInMessage;
  *(void *)(v7 + 64) = &off_10064AEB8;
  *(void *)(v7 + 96) = &type metadata for SDAuthentication.Operation.SendResponseMessage;
  *(void *)(v7 + 104) = &off_10064AFB8;
  *a3 = v7;
  uint64_t v8 = (int *)_s15MacApprovePhoneV20HandleRequestContextVMa(0LL);
  uint64_t v9 = (char *)a3 + v8[7];
  *(_OWORD *)uint64_t v9 = xmmword_1004CD540;
  uint64_t v10 = v8[9];
  *(uint64_t *)((char *)a3 + v10) = 0LL;
  *((_BYTE *)a3 + v8[10]) = 1;
  if ([a1 hasAksToken])
  {
    sub_10019A6C4(a2 + 8, (uint64_t)(a3 + 1));
    uint64_t v11 = _s15MacApprovePhoneV18InitialLockContextVMa(0LL);
    sub_1001A4B84( a2 + *(int *)(v11 + 24),  (uint64_t)a3 + v8[6],  type metadata accessor for SDAuthenticationSessionMetrics);
    uint64_t v12 = (uint64_t *)(a2 + *(int *)(v11 + 44));
    uint64_t v13 = *v12;
    unint64_t v14 = v12[1];
    *(void *)uint64_t v9 = *v12;
    *((void *)v9 + 1) = v14;
    sub_1001A4C04(v13, v14);
    id v15 = [a1 aksToken];
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
      uint64_t v19 = v18;

      sub_1001A4BC8(a2, _s15MacApprovePhoneV18InitialLockContextVMa);
      uint64_t v20 = (uint64_t *)((char *)a3 + v8[8]);
      uint64_t *v20 = v17;
      v20[1] = v19;
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    unint64_t v21 = sub_100187014();
    uint64_t v22 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v21, 0LL, 0LL);
    *(_DWORD *)uint64_t v23 = 1;
    *(void *)(v23 + _Block_object_dispose(va, 8) = 0xD000000000000028LL;
    *(void *)(v23 + swift_weakDestroy(v0 + 16) = 0x8000000100504190LL;
    swift_willThrow(v22);

    sub_1001A4BC8(a2, _s15MacApprovePhoneV18InitialLockContextVMa);
    swift_bridgeObjectRelease(*a3);
    sub_100189B0C(*(void *)v9, *((void *)v9 + 1));
  }

uint64_t sub_1001A30F8(uint64_t a1, uint64_t a2)
{
  return sub_1001A36DC(a1, a2, (void (*)(void, void))sub_1001A4C04);
}

uint64_t sub_1001A3104(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 32);
  uint64_t v3 = *(void *)v2;
  sub_10019BA8C(*(void *)v2, *(void *)(v2 + 8));
  return v3;
}

uint64_t sub_1001A3140(uint64_t a1, uint64_t a2)
{
  return sub_1001A315C(a1, a2, (uint64_t (*)(void))sub_1001A2E70);
}

uint64_t sub_1001A315C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3 = (void *)a3();
  id v4 = [v3 data];

  if (v4)
  {
    uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);

    return v5;
  }

  else
  {
    unint64_t v7 = sub_100187014();
    uint64_t v8 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v7, 0LL, 0LL);
    *(_DWORD *)uint64_t v9 = 10;
    *(void *)(v9 + _Block_object_dispose(va, 8) = 0xD00000000000001ALL;
    *(void *)(v9 + swift_weakDestroy(v0 + 16) = 0x8000000100504230LL;
    return swift_willThrow(v8);
  }

uint64_t sub_1001A3218(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 40));
}

id sub_1001A3224(uint64_t (*a1)(void), Class *a2)
{
  uint64_t v4 = *(int *)(a1(0LL) + 32);
  uint64_t v5 = *(void **)(v2 + v4);
  if (v5)
  {
    id v6 = *(id *)(v2 + v4);
LABEL_5:
    id v8 = v5;
    return v6;
  }

  id result = [objc_allocWithZone(*a2) init];
  if (result)
  {
    *(void *)(v2 + v4) = result;
    id v6 = result;
    uint64_t v5 = 0LL;
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

void sub_1001A329C(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_100183098(&qword_1006457E0);
  uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1004CD530;
  if (qword_100643EB0 != -1) {
    swift_once(&qword_100643EB0, LongHash.storage.getter);
  }
  *(void *)(v7 + 56) = &type metadata for SDAuthentication.Operation.IncludeNextAKSTokenInMessage;
  *(void *)(v7 + 64) = &off_10064AE98;
  *(void *)(v7 + 96) = &type metadata for SDAuthentication.Operation.SendTokenMessage;
  *(void *)(v7 + 104) = &off_10064AF78;
  *a3 = v7;
  id v8 = (int *)_s15MacApprovePhoneV21HandleResponseContextVMa(0LL);
  uint64_t v9 = v8[8];
  *(uint64_t *)((char *)a3 + v9) = 0LL;
  *((_BYTE *)a3 + v8[9]) = 7;
  if ([a1 hasAksToken])
  {
    sub_10019A6C4(a2 + 8, (uint64_t)(a3 + 1));
    uint64_t v10 = _s15MacApprovePhoneV24HandleUserApprovalResultVMa(0LL);
    sub_1001A4B84( a2 + *(int *)(v10 + 28),  (uint64_t)a3 + v8[6],  type metadata accessor for SDAuthenticationSessionMetrics);
    id v11 = [a1 aksToken];
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
      uint64_t v15 = v14;

      sub_1001A4BC8(a2, _s15MacApprovePhoneV24HandleUserApprovalResultVMa);
      uint64_t v16 = (uint64_t *)((char *)a3 + v8[7]);
      *uint64_t v16 = v13;
      v16[1] = v15;
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    unint64_t v17 = sub_100187014();
    uint64_t v18 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v17, 0LL, 0LL);
    *(_DWORD *)uint64_t v19 = 1;
    *(void *)(v19 + _Block_object_dispose(va, 8) = 0xD000000000000029LL;
    *(void *)(v19 + swift_weakDestroy(v0 + 16) = 0x80000001005041C0LL;
    swift_willThrow(v18);

    sub_1001A4BC8(a2, _s15MacApprovePhoneV24HandleUserApprovalResultVMa);
    swift_bridgeObjectRelease(*a3);
  }

uint64_t sub_1001A3488(uint64_t a1, uint64_t a2)
{
  return sub_1001A36DC(a1, a2, (void (*)(void, void))sub_10019BA8C);
}

id sub_1001A3494()
{
  return sub_1001A3224(_s15MacApprovePhoneV21HandleResponseContextVMa, (Class *)off_1005C8880);
}

uint64_t sub_1001A34B8(uint64_t a1, uint64_t a2)
{
  return sub_1001A37A0(a1, a2, _s15MacApprovePhoneV21HandleResponseContextVMa, (Class *)off_1005C8880);
}

void sub_1001A34DC(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_100183098(&qword_1006457E0);
  uint64_t v7 = swift_allocObject(v6, 152LL, 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1004CD550;
  if (qword_100643EB0 != -1) {
    swift_once(&qword_100643EB0, LongHash.storage.getter);
  }
  *(void *)(v7 + 56) = &type metadata for SDAuthentication.Operation.ConsumeAKSToken;
  *(void *)(v7 + 64) = &off_10064AE78;
  *(void *)(v7 + 96) = &type metadata for SDAuthentication.Operation.SendConfirmation;
  *(void *)(v7 + 104) = &off_10064B238;
  *(void *)(v7 + 136) = &type metadata for SDAuthentication.Operation.FinishSession;
  *(void *)(v7 + 144) = &off_10064AF38;
  *a3 = v7;
  id v8 = (int *)_s15MacApprovePhoneV18HandleTokenContextVMa(0LL);
  uint64_t v9 = v8[8];
  *(uint64_t *)((char *)a3 + v9) = 0LL;
  *((_BYTE *)a3 + v8[9]) = 2;
  if ([a1 hasAksToken])
  {
    sub_10019A6C4(a2 + 8, (uint64_t)(a3 + 1));
    uint64_t v10 = _s15MacApprovePhoneV20HandleRequestContextVMa(0LL);
    sub_1001A4B84( a2 + *(int *)(v10 + 24),  (uint64_t)a3 + v8[6],  type metadata accessor for SDAuthenticationSessionMetrics);
    id v11 = [a1 aksToken];
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
      uint64_t v15 = v14;

      sub_1001A4BC8(a2, _s15MacApprovePhoneV20HandleRequestContextVMa);
      uint64_t v16 = (uint64_t *)((char *)a3 + v8[7]);
      *uint64_t v16 = v13;
      v16[1] = v15;
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    unint64_t v17 = sub_100187014();
    uint64_t v18 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v17, 0LL, 0LL);
    *(_DWORD *)uint64_t v19 = 1;
    *(void *)(v19 + _Block_object_dispose(va, 8) = 0xD000000000000019LL;
    *(void *)(v19 + swift_weakDestroy(v0 + 16) = 0x80000001005041F0LL;
    swift_willThrow(v18);

    sub_1001A4BC8(a2, _s15MacApprovePhoneV20HandleRequestContextVMa);
    swift_bridgeObjectRelease(*a3);
  }

uint64_t sub_1001A36DC(uint64_t a1, uint64_t a2, void (*a3)(void, void))
{
  uint64_t v4 = (void *)(v3 + *(int *)(a1 + 28));
  uint64_t v5 = *v4;
  a3(*v4, v4[1]);
  return v5;
}

id sub_1001A3714()
{
  return sub_1001A3224(_s15MacApprovePhoneV18HandleTokenContextVMa, (Class *)off_1005C8838);
}

uint64_t sub_1001A3738@<X0>(uint64_t a1@<X8>)
{
  return sub_10019A6C4(v1 + 8, a1);
}

uint64_t sub_1001A3754@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001A4B84(v2 + *(int *)(a1 + 24), a2, type metadata accessor for SDAuthenticationSessionMetrics);
}

uint64_t sub_1001A377C(uint64_t a1, uint64_t a2)
{
  return sub_1001A37A0(a1, a2, _s15MacApprovePhoneV18HandleTokenContextVMa, (Class *)off_1005C8838);
}

uint64_t sub_1001A37A0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), Class *a4)
{
  id v4 = sub_1001A3224(a3, a4);
  id v5 = [v4 data];

  if (v5)
  {
    uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);

    return v6;
  }

  else
  {
    unint64_t v8 = sub_100187014();
    uint64_t v9 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v8, 0LL, 0LL);
    *(_DWORD *)uint64_t v10 = 10;
    *(void *)(v10 + _Block_object_dispose(va, 8) = 0xD00000000000001ALL;
    *(void *)(v10 + swift_weakDestroy(v0 + 16) = 0x8000000100504230LL;
    return swift_willThrow(v9);
  }

uint64_t sub_1001A3864(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

uint64_t sub_1001A3870@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_100183098(&qword_1006457E0);
  uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1004CD530;
  if (qword_100643EB0 != -1) {
    swift_once(&qword_100643EB0, LongHash.storage.getter);
  }
  *(void *)(v7 + 56) = &type metadata for SDAuthentication.Operation.HandleSucceededResult;
  *(void *)(v7 + 64) = &off_10064B218;
  *(void *)(v7 + 96) = &type metadata for SDAuthentication.Operation.FinishSession;
  *(void *)(v7 + 104) = &off_10064AF38;
  *a3 = v7;
  if ([a1 hasSuccess])
  {
    sub_10019A6C4(a2 + 8, (uint64_t)(a3 + 1));
    uint64_t v8 = a2 + *(int *)(_s15MacApprovePhoneV21HandleResponseContextVMa(0LL) + 24);
    uint64_t v9 = _s15MacApprovePhoneV25HandleConfirmationContextVMa(0LL);
    sub_1001A4B84(v8, (uint64_t)a3 + *(int *)(v9 + 24), type metadata accessor for SDAuthenticationSessionMetrics);
    LOBYTE(v_Block_object_dispose(va, 8) = [a1 success];

    uint64_t result = sub_1001A4BC8(a2, _s15MacApprovePhoneV21HandleResponseContextVMa);
    *((_BYTE *)a3 + *(int *)(v9 + 28)) = v8;
  }

  else
  {
    unint64_t v11 = sub_100187014();
    uint64_t v12 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v11, 0LL, 0LL);
    *(_DWORD *)uint64_t v13 = 1;
    *(void *)(v13 + _Block_object_dispose(va, 8) = 0xD000000000000016LL;
    *(void *)(v13 + swift_weakDestroy(v0 + 16) = 0x8000000100504210LL;
    swift_willThrow(v12);

    sub_1001A4BC8(a2, _s15MacApprovePhoneV21HandleResponseContextVMa);
    return swift_bridgeObjectRelease(*a3);
  }

  return result;
}

uint64_t sub_1001A3A24(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 28));
}

void sub_1001A3A30(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v175 = a2;
  v169 = a3;
  uint64_t v140 = _s15MacApprovePhoneV25HandleConfirmationContextVMa(0LL);
  __chkstk_darwin(v140);
  uint64_t v144 = (uint64_t *)((char *)&v140 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = sub_100183098(&qword_1006459D0);
  __chkstk_darwin(v5);
  v149 = (char *)&v140 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v141 = _s15MacApprovePhoneV18HandleTokenContextVMa(0LL);
  __chkstk_darwin(v141);
  uint64_t v148 = (uint64_t *)((char *)&v140 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = sub_100183098(&qword_1006459D8);
  __chkstk_darwin(v8);
  uint64_t v155 = (char *)&v140 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v150 = _s15MacApprovePhoneV21HandleResponseContextVMa(0LL);
  uint64_t v147 = *(void *)(v150 - 8);
  uint64_t v10 = __chkstk_darwin(v150);
  uint64_t v142 = (uint64_t)&v140 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v143 = (uint64_t)&v140 - v13;
  __chkstk_darwin(v12);
  v154 = (uint64_t *)((char *)&v140 - v14);
  uint64_t v15 = sub_100183098(&qword_1006459E0);
  __chkstk_darwin(v15);
  v161 = (char *)&v140 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v156 = _s15MacApprovePhoneV20HandleRequestContextVMa(0LL);
  uint64_t v153 = *(void *)(v156 - 8);
  uint64_t v17 = __chkstk_darwin(v156);
  uint64_t v145 = (uint64_t)&v140 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v146 = (uint64_t)&v140 - v20;
  __chkstk_darwin(v19);
  uint64_t v160 = (uint64_t *)((char *)&v140 - v21);
  uint64_t v22 = sub_100183098(&qword_1006459E8);
  __chkstk_darwin(v22);
  v168 = (char *)&v140 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = _s15MacApprovePhoneV18InitialLockContextVMa(0LL);
  uint64_t v166 = *(void *)(v24 - 8);
  uint64_t v167 = v24;
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v158 = (uint64_t)&v140 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25);
  uint64_t v159 = (uint64_t)&v140 - v27;
  uint64_t v162 = _s15MacApprovePhoneV24HandleUserApprovalResultVMa(0LL);
  uint64_t v157 = *(void *)(v162 - 8);
  uint64_t v28 = __chkstk_darwin(v162);
  uint64_t v151 = (uint64_t)&v140 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v152 = (uint64_t)&v140 - v31;
  __chkstk_darwin(v30);
  uint64_t v165 = (uint64_t *)((char *)&v140 - v32);
  uint64_t v33 = sub_100183098(&qword_1006459F0);
  __chkstk_darwin(v33);
  uint64_t v35 = (char *)&v140 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v171 = _s15MacApprovePhoneV26HandleApprovePromptContextVMa(0LL);
  uint64_t v36 = *(void *)(v171 - 8);
  uint64_t v37 = __chkstk_darwin(v171);
  uint64_t v163 = (uint64_t)&v140 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v164 = (uint64_t)&v140 - v40;
  __chkstk_darwin(v39);
  uint64_t v170 = (uint64_t)&v140 - v41;
  uint64_t v42 = sub_100183098(&qword_1006459F8);
  __chkstk_darwin(v42);
  int v44 = (char *)&v140 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = _s15MacApprovePhoneV17InitialKeyContextVMa(0LL);
  uint64_t v46 = *(void *)(v45 - 8);
  uint64_t v47 = __chkstk_darwin(v45);
  uint64_t v49 = (char *)&v140 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v47);
  int v51 = (char *)&v140 - v50;
  uint64_t v52 = a1;
  sub_10019A6C4(a1, (uint64_t)v174);
  uint64_t v53 = sub_100183098(&qword_1006500D0);
  uint64_t v54 = sub_100183168(0LL, &qword_100645A00, off_1005C8830);
  if (swift_dynamicCast(v173, v174, v53, v54, 6LL))
  {
    uint64_t v55 = (void *)v173[0];
    sub_10019A6C4(v175, (uint64_t)v174);
    uint64_t v56 = sub_100183098(&qword_100645A28);
    int v57 = swift_dynamicCast(v44, v174, v56, v45, 6LL);
    uint64_t v58 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56);
    if (v57)
    {
      v58(v44, 0LL, 1LL, v45);
      sub_1001A4B40((uint64_t)v44, (uint64_t)v51, _s15MacApprovePhoneV17InitialKeyContextVMa);
      sub_1001A4B84((uint64_t)v51, (uint64_t)v49, _s15MacApprovePhoneV17InitialKeyContextVMa);
      id v59 = v55;
      uint64_t v60 = v170;
      uint64_t v61 = v172;
      sub_1001A28BC(v59, (uint64_t)v49, v170);
      if (!v61)
      {
        uint64_t v102 = v169;
        v169[3] = v171;
        v102[4] = &off_1005D3218;
        uint64_t v103 = sub_1001A4B04(v102);
        sub_1001A4B40(v60, (uint64_t)v103, _s15MacApprovePhoneV26HandleApprovePromptContextVMa);

        sub_1001A4BC8((uint64_t)v51, _s15MacApprovePhoneV17InitialKeyContextVMa);
        return;
      }

      int v62 = _s15MacApprovePhoneV17InitialKeyContextVMa;
      uint64_t v63 = (uint64_t)v51;
      goto LABEL_34;
    }

    v58(v44, 1LL, 1LL, v45);
    sub_100187100((uint64_t)v44, &qword_1006459F8);
    unint64_t v75 = sub_100187014();
    uint64_t v76 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v75, 0LL, 0LL);
    *(_DWORD *)uint64_t v77 = 10;
    unint64_t v78 = 0xD000000000000046LL;
    uint64_t v79 = "Invalid previous context as InitialKeyContext, message may be replayed";
LABEL_10:
    *(void *)(v77 + _Block_object_dispose(va, 8) = v78;
    *(void *)(v77 + swift_weakDestroy(v0 + 16) = (unint64_t)(v79 - 32) | 0x8000000000000000LL;
    swift_willThrow(v76);

    return;
  }

  uint64_t v64 = v175;
  sub_10019A6C4(v52, (uint64_t)v174);
  if (swift_dynamicCast(v173, v174, v53, &type metadata for SDAuthenticationApproveResult, 6LL))
  {
    uint64_t v66 = v173[0];
    unint64_t v65 = v173[1];
    sub_10019A6C4(v64, (uint64_t)v174);
    uint64_t v67 = sub_100183098(&qword_100645A28);
    uint64_t v68 = v171;
    int v69 = swift_dynamicCast(v35, v174, v67, v171, 6LL);
    uint64_t v70 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56);
    if (v69)
    {
      v70(v35, 0LL, 1LL, v68);
      uint64_t v71 = v164;
      sub_1001A4B40((uint64_t)v35, v164, _s15MacApprovePhoneV26HandleApprovePromptContextVMa);
      uint64_t v72 = v163;
      sub_1001A4B84(v71, v163, _s15MacApprovePhoneV26HandleApprovePromptContextVMa);
      sub_1001A4C04(v66, v65);
      uint64_t v73 = v165;
      uint64_t v74 = v172;
      sub_1001A2BF4(v66, v65, v72, v165);
      if (!v74)
      {
        uint64_t v114 = v169;
        v169[3] = v162;
        v114[4] = &off_1005D3230;
        uint64_t v115 = sub_1001A4B04(v114);
        sub_1001A4B40((uint64_t)v73, (uint64_t)v115, _s15MacApprovePhoneV24HandleUserApprovalResultVMa);
        sub_100189B0C(v66, v65);
        sub_1001A4BC8(v71, _s15MacApprovePhoneV26HandleApprovePromptContextVMa);
        return;
      }

      sub_1001A4BC8(v71, _s15MacApprovePhoneV26HandleApprovePromptContextVMa);
    }

    else
    {
      v70(v35, 1LL, 1LL, v68);
      sub_100187100((uint64_t)v35, &qword_1006459F0);
      unint64_t v90 = sub_100187014();
      uint64_t v91 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v90, 0LL, 0LL);
      *(_DWORD *)uint64_t v92 = 10;
      *(void *)(v92 + _Block_object_dispose(va, 8) = 0xD00000000000004FLL;
      *(void *)(v92 + swift_weakDestroy(v0 + 16) = 0x8000000100504090LL;
      swift_willThrow(v91);
    }

    sub_100189B0C(v66, v65);
    return;
  }

  sub_10019A6C4(v52, (uint64_t)v174);
  uint64_t v80 = sub_100183168(0LL, &qword_100645A08, off_1005C8870);
  if (!swift_dynamicCast(v173, v174, v53, v80, 6LL))
  {
    sub_10019A6C4(v52, (uint64_t)v174);
    uint64_t v93 = sub_100183168(0LL, &qword_100645A10, off_1005C8878);
    if (swift_dynamicCast(v173, v174, v53, v93, 6LL))
    {
      uint64_t v55 = (void *)v173[0];
      sub_10019A6C4(v64, (uint64_t)v174);
      uint64_t v94 = sub_100183098(&qword_100645A28);
      uint64_t v96 = (uint64_t)v161;
      uint64_t v95 = v162;
      int v97 = swift_dynamicCast(v161, v174, v94, v162, 6LL);
      uint64_t v98 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v157 + 56);
      if (!v97)
      {
        v98(v96, 1LL, 1LL, v95);
        sub_100187100(v96, &qword_1006459E0);
        unint64_t v116 = sub_100187014();
        uint64_t v76 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v116, 0LL, 0LL);
        *(_DWORD *)uint64_t v77 = 10;
        unint64_t v78 = 0xD00000000000004DLL;
        uint64_t v79 = "Invalid previous context as HandleUserApprovalResult, message may be replayed";
        goto LABEL_10;
      }

      v98(v96, 0LL, 1LL, v95);
      uint64_t v86 = v152;
      sub_1001A4B40(v96, v152, _s15MacApprovePhoneV24HandleUserApprovalResultVMa);
      uint64_t v99 = v151;
      sub_1001A4B84(v86, v151, _s15MacApprovePhoneV24HandleUserApprovalResultVMa);
      id v59 = v55;
      uint64_t v100 = v154;
      uint64_t v101 = v172;
      sub_1001A329C(v59, v99, v154);
      if (v101)
      {
        int v62 = _s15MacApprovePhoneV24HandleUserApprovalResultVMa;
        goto LABEL_33;
      }

      uint64_t v133 = v169;
      v169[3] = v150;
      v133[4] = &off_1005D3260;
      v134 = sub_1001A4B04(v133);
      sub_1001A4B40((uint64_t)v100, (uint64_t)v134, _s15MacApprovePhoneV21HandleResponseContextVMa);

      uint64_t v128 = _s15MacApprovePhoneV24HandleUserApprovalResultVMa;
    }

    else
    {
      sub_10019A6C4(v52, (uint64_t)v174);
      uint64_t v105 = sub_100183168(0LL, &qword_100645A18, off_1005C8880);
      if (swift_dynamicCast(v173, v174, v53, v105, 6LL))
      {
        uint64_t v55 = (void *)v173[0];
        sub_10019A6C4(v64, (uint64_t)v174);
        uint64_t v106 = sub_100183098(&qword_100645A28);
        uint64_t v107 = (uint64_t)v155;
        uint64_t v108 = v156;
        int v109 = swift_dynamicCast(v155, v174, v106, v156, 6LL);
        uint64_t v110 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v153 + 56);
        if (!v109)
        {
          v110(v107, 1LL, 1LL, v108);
          sub_100187100(v107, &qword_1006459D8);
          unint64_t v129 = sub_100187014();
          uint64_t v76 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v129, 0LL, 0LL);
          *(_DWORD *)uint64_t v77 = 10;
          unint64_t v78 = 0xD000000000000049LL;
          uint64_t v79 = "Invalid previous context as HandleRequestContext, message may be replayed";
          goto LABEL_10;
        }

        v110(v107, 0LL, 1LL, v108);
        uint64_t v86 = v146;
        sub_1001A4B40(v107, v146, _s15MacApprovePhoneV20HandleRequestContextVMa);
        uint64_t v111 = v145;
        sub_1001A4B84(v86, v145, _s15MacApprovePhoneV20HandleRequestContextVMa);
        id v59 = v55;
        uint64_t v112 = v148;
        uint64_t v113 = v172;
        sub_1001A34DC(v59, v111, v148);
        if (v113)
        {
          int v62 = _s15MacApprovePhoneV20HandleRequestContextVMa;
          goto LABEL_33;
        }

        v136 = v169;
        v169[3] = v141;
        v136[4] = &off_1005D3278;
        v137 = sub_1001A4B04(v136);
        sub_1001A4B40((uint64_t)v112, (uint64_t)v137, _s15MacApprovePhoneV18HandleTokenContextVMa);

        uint64_t v128 = _s15MacApprovePhoneV20HandleRequestContextVMa;
      }

      else
      {
        sub_10019A6C4(v52, (uint64_t)v174);
        uint64_t v117 = sub_100183168(0LL, &qword_100645A20, off_1005C8838);
        if (!swift_dynamicCast(v173, v174, v53, v117, 6LL))
        {
          unint64_t v130 = sub_100187014();
          uint64_t v131 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v130, 0LL, 0LL);
          *(_DWORD *)uint64_t v132 = 10;
          *(void *)(v132 + _Block_object_dispose(va, 8) = 0xD00000000000001FLL;
          *(void *)(v132 + swift_weakDestroy(v0 + 16) = 0x8000000100503F30LL;
          swift_willThrow(v131);
          return;
        }

        uint64_t v55 = (void *)v173[0];
        sub_10019A6C4(v64, (uint64_t)v174);
        uint64_t v118 = sub_100183098(&qword_100645A28);
        uint64_t v119 = (uint64_t)v149;
        uint64_t v120 = v150;
        int v121 = swift_dynamicCast(v149, v174, v118, v150, 6LL);
        uint64_t v122 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v147 + 56);
        if (!v121)
        {
          v122(v119, 1LL, 1LL, v120);
          sub_100187100(v119, &qword_1006459D0);
          unint64_t v135 = sub_100187014();
          uint64_t v76 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v135, 0LL, 0LL);
          *(_DWORD *)uint64_t v77 = 10;
          unint64_t v78 = 0xD00000000000004ALL;
          uint64_t v79 = "Invalid previous context as HandleResponseContext, message may be replayed";
          goto LABEL_10;
        }

        v122(v119, 0LL, 1LL, v120);
        uint64_t v86 = v143;
        sub_1001A4B40(v119, v143, _s15MacApprovePhoneV21HandleResponseContextVMa);
        uint64_t v123 = v142;
        sub_1001A4B84(v86, v142, _s15MacApprovePhoneV21HandleResponseContextVMa);
        id v59 = v55;
        unint64_t v124 = v144;
        uint64_t v125 = v172;
        sub_1001A3870(v59, v123, v144);
        if (v125)
        {
          int v62 = _s15MacApprovePhoneV21HandleResponseContextVMa;
          goto LABEL_33;
        }

        unint64_t v138 = v169;
        v169[3] = v140;
        v138[4] = &off_1005D3290;
        uint64_t v139 = sub_1001A4B04(v138);
        sub_1001A4B40((uint64_t)v124, (uint64_t)v139, _s15MacApprovePhoneV25HandleConfirmationContextVMa);

        uint64_t v128 = _s15MacApprovePhoneV21HandleResponseContextVMa;
      }
    }

uint64_t sub_1001A4A00@<X0>(uint64_t a1@<X8>)
{
  return sub_1001A4B84(v1, a1, type metadata accessor for SDAuthenticationCommonOperationInput);
}

uint64_t sub_1001A4A24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10019A6C4(v2 + *(int *)(a1 + 20), a2);
}

void sub_1001A4A44(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
}

uint64_t _s15MacApprovePhoneV25HandleConfirmationContextVMa(uint64_t a1)
{
  return sub_1001A4AD0(a1, qword_100645DB8, (uint64_t)&_s15MacApprovePhoneV25HandleConfirmationContextVMn);
}

uint64_t _s15MacApprovePhoneV18HandleTokenContextVMa(uint64_t a1)
{
  return sub_1001A4AD0(a1, qword_100645C78, (uint64_t)&_s15MacApprovePhoneV18HandleTokenContextVMn);
}

uint64_t _s15MacApprovePhoneV21HandleResponseContextVMa(uint64_t a1)
{
  return sub_1001A4AD0(a1, qword_100645D18, (uint64_t)&_s15MacApprovePhoneV21HandleResponseContextVMn);
}

uint64_t _s15MacApprovePhoneV20HandleRequestContextVMa(uint64_t a1)
{
  return sub_1001A4AD0(a1, qword_100645BD0, (uint64_t)&_s15MacApprovePhoneV20HandleRequestContextVMn);
}

uint64_t _s15MacApprovePhoneV24HandleUserApprovalResultVMa(uint64_t a1)
{
  return sub_1001A4AD0(a1, qword_100645B30, (uint64_t)&_s15MacApprovePhoneV24HandleUserApprovalResultVMn);
}

uint64_t _s15MacApprovePhoneV26HandleApprovePromptContextVMa(uint64_t a1)
{
  return sub_1001A4AD0(a1, qword_100645A88, (uint64_t)&_s15MacApprovePhoneV26HandleApprovePromptContextVMn);
}

uint64_t sub_1001A4AD0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

void *sub_1001A4B04(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

uint64_t sub_1001A4B40(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001A4B84(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001A4BC8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_1001A4C04(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10019BA8C(result, a2);
  }
  return result;
}

_BYTE *sub_1001A4C18(_BYTE *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = (_BYTE *)(v18 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v18);
  }

  else
  {
    *a1 = *(_BYTE *)a2;
    uint64_t v7 = a2[1];
    *((void *)v4 + 1) = v7;
    __int128 v8 = *(_OWORD *)(a2 + 5);
    *(_OWORD *)(v4 + 40) = v8;
    uint64_t v9 = v8;
    uint64_t v10 = **(void (***)(_BYTE *, uint64_t *, uint64_t))(v8 - 8);
    swift_bridgeObjectRetain(v7);
    v10(v4 + 16, a2 + 2, v9);
    uint64_t v11 = a3[7];
    uint64_t v12 = &v4[v11];
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for Date(0LL);
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    uint64_t v88 = a3;
    if (v16(v13, 1LL, v14))
    {
      uint64_t v17 = sub_100183098(&qword_1006457E8);
      memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
    }

    uint64_t v19 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
    uint64_t v20 = v19[5];
    uint64_t v21 = &v12[v20];
    uint64_t v22 = &v13[v20];
    if (v16(&v13[v20], 1LL, v14))
    {
      uint64_t v23 = sub_100183098(&qword_1006457E8);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v21, v22, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v21, 0LL, 1LL, v14);
    }

    uint64_t v24 = v19[6];
    uint64_t v25 = &v12[v24];
    uint64_t v26 = &v13[v24];
    if (v16(&v13[v24], 1LL, v14))
    {
      uint64_t v27 = sub_100183098(&qword_1006457E8);
      memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v25, v26, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v25, 0LL, 1LL, v14);
    }

    uint64_t v28 = v19[7];
    uint64_t v29 = &v12[v28];
    uint64_t v30 = &v13[v28];
    if (v16(&v13[v28], 1LL, v14))
    {
      uint64_t v31 = sub_100183098(&qword_1006457E8);
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v29, v30, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v29, 0LL, 1LL, v14);
    }

    uint64_t v32 = v19[8];
    uint64_t v33 = &v12[v32];
    uint64_t v34 = &v13[v32];
    if (v16(&v13[v32], 1LL, v14))
    {
      uint64_t v35 = sub_100183098(&qword_1006457E8);
      memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v33, v34, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v33, 0LL, 1LL, v14);
    }

    uint64_t v36 = v19[9];
    uint64_t v37 = &v12[v36];
    uint64_t v38 = &v13[v36];
    if (v16(&v13[v36], 1LL, v14))
    {
      uint64_t v39 = sub_100183098(&qword_1006457E8);
      memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v37, v38, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v37, 0LL, 1LL, v14);
    }

    uint64_t v40 = v19[10];
    uint64_t v41 = &v12[v40];
    uint64_t v42 = &v13[v40];
    if (v16(&v13[v40], 1LL, v14))
    {
      uint64_t v43 = sub_100183098(&qword_1006457E8);
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v41, v42, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v41, 0LL, 1LL, v14);
    }

    uint64_t v44 = v19[11];
    uint64_t v45 = &v12[v44];
    uint64_t v46 = &v13[v44];
    if (v16(&v13[v44], 1LL, v14))
    {
      uint64_t v47 = sub_100183098(&qword_1006457E8);
      memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v45, v46, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v45, 0LL, 1LL, v14);
    }

    uint64_t v48 = v19[12];
    uint64_t v49 = &v12[v48];
    uint64_t v50 = &v13[v48];
    if (v16(&v13[v48], 1LL, v14))
    {
      uint64_t v51 = sub_100183098(&qword_1006457E8);
      memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v49, v50, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v49, 0LL, 1LL, v14);
    }

    v12[v19[13]] = v13[v19[13]];
    uint64_t v52 = v19[14];
    uint64_t v53 = &v12[v52];
    uint64_t v54 = &v13[v52];
    if (v16(&v13[v52], 1LL, v14))
    {
      uint64_t v55 = sub_100183098(&qword_1006457E8);
      memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v53, v54, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v53, 0LL, 1LL, v14);
    }

    uint64_t v56 = v19[15];
    int v57 = &v12[v56];
    uint64_t v58 = &v13[v56];
    if (v16(&v13[v56], 1LL, v14))
    {
      uint64_t v59 = sub_100183098(&qword_1006457E8);
      memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v57, v58, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v57, 0LL, 1LL, v14);
    }

    uint64_t v60 = v19[16];
    uint64_t v61 = &v12[v60];
    int v62 = &v13[v60];
    if (v16(&v13[v60], 1LL, v14))
    {
      uint64_t v63 = sub_100183098(&qword_1006457E8);
      memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v61, v62, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v61, 0LL, 1LL, v14);
    }

    uint64_t v64 = v19[17];
    unint64_t v65 = &v12[v64];
    uint64_t v66 = &v13[v64];
    if (v16(&v13[v64], 1LL, v14))
    {
      uint64_t v67 = sub_100183098(&qword_1006457E8);
      memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v65, v66, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v65, 0LL, 1LL, v14);
    }

    uint64_t v68 = v19[18];
    int v69 = &v12[v68];
    uint64_t v70 = &v13[v68];
    *(_DWORD *)int v69 = *(_DWORD *)v70;
    v69[4] = v70[4];
    v12[v19[19]] = v13[v19[19]];
    uint64_t v71 = v19[20];
    uint64_t v72 = &v12[v71];
    uint64_t v73 = &v13[v71];
    uint64_t v74 = *((void *)v73 + 1);
    *(void *)uint64_t v72 = *(void *)v73;
    *((void *)v72 + 1) = v74;
    uint64_t v75 = v19[21];
    uint64_t v76 = &v12[v75];
    uint64_t v77 = &v13[v75];
    uint64_t v78 = *((void *)v77 + 1);
    *(void *)uint64_t v76 = *(void *)v77;
    *((void *)v76 + 1) = v78;
    uint64_t v79 = v88[8];
    uint64_t v80 = v88[9];
    uint64_t v81 = &v4[v79];
    uint64_t v82 = (uint64_t *)((char *)a2 + v79);
    uint64_t v83 = v82[1];
    *uint64_t v81 = *v82;
    v81[1] = v83;
    int v84 = &v4[v80];
    uint64_t v85 = (uint64_t *)((char *)a2 + v80);
    uint64_t v86 = v85[1];
    *int v84 = *v85;
    v84[1] = v86;
    v4[v88[10]] = *((_BYTE *)a2 + v88[10]);
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v78);
    swift_bridgeObjectRetain(v83);
    swift_bridgeObjectRetain(v86);
  }

  return v4;
}

uint64_t sub_1001A5354(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[7];
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1LL, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  __int128 v8 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v9 = v4 + v8[5];
  if (!v7(v9, 1LL, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  }
  uint64_t v10 = v4 + v8[6];
  if (!v7(v10, 1LL, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v5);
  }
  uint64_t v11 = v4 + v8[7];
  if (!v7(v11, 1LL, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v11, v5);
  }
  uint64_t v12 = v4 + v8[8];
  if (!v7(v12, 1LL, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v12, v5);
  }
  uint64_t v13 = v4 + v8[9];
  if (!v7(v13, 1LL, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v13, v5);
  }
  uint64_t v14 = v4 + v8[10];
  if (!v7(v14, 1LL, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v14, v5);
  }
  uint64_t v15 = v4 + v8[11];
  if (!v7(v15, 1LL, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v15, v5);
  }
  uint64_t v16 = v4 + v8[12];
  if (!v7(v16, 1LL, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v16, v5);
  }
  uint64_t v17 = v4 + v8[14];
  if (!v7(v17, 1LL, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v17, v5);
  }
  uint64_t v18 = v4 + v8[15];
  if (!v7(v18, 1LL, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v18, v5);
  }
  uint64_t v19 = v4 + v8[16];
  if (!v7(v19, 1LL, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v19, v5);
  }
  uint64_t v20 = v4 + v8[17];
  if (!v7(v20, 1LL, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v20, v5);
  }
  swift_bridgeObjectRelease(*(void *)(v4 + v8[20] + 8));
  swift_bridgeObjectRelease(*(void *)(v4 + v8[21] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[8] + 8));
  return swift_bridgeObjectRelease(*(void *)(a1 + a2[9] + 8));
}

uint64_t sub_1001A5634(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
  uint64_t v7 = a2 + 16;
  __int128 v8 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v8;
  uint64_t v9 = v8;
  uint64_t v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
  swift_bridgeObjectRetain(v6);
  v10(a1 + 16, v7, v9);
  uint64_t v87 = a3;
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v16(v13, 1LL, v14))
  {
    uint64_t v17 = sub_100183098(&qword_1006457E8);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v19 = v18[5];
  uint64_t v20 = &v12[v19];
  uint64_t v21 = &v13[v19];
  if (v16(&v13[v19], 1LL, v14))
  {
    uint64_t v22 = sub_100183098(&qword_1006457E8);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v20, v21, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v20, 0LL, 1LL, v14);
  }

  uint64_t v23 = v18[6];
  uint64_t v24 = &v12[v23];
  uint64_t v25 = &v13[v23];
  if (v16(&v13[v23], 1LL, v14))
  {
    uint64_t v26 = sub_100183098(&qword_1006457E8);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v24, v25, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v24, 0LL, 1LL, v14);
  }

  uint64_t v27 = v18[7];
  uint64_t v28 = &v12[v27];
  uint64_t v29 = &v13[v27];
  if (v16(&v13[v27], 1LL, v14))
  {
    uint64_t v30 = sub_100183098(&qword_1006457E8);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v28, v29, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v28, 0LL, 1LL, v14);
  }

  uint64_t v31 = v18[8];
  uint64_t v32 = &v12[v31];
  uint64_t v33 = &v13[v31];
  if (v16(&v13[v31], 1LL, v14))
  {
    uint64_t v34 = sub_100183098(&qword_1006457E8);
    memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v32, v33, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v32, 0LL, 1LL, v14);
  }

  uint64_t v35 = v18[9];
  uint64_t v36 = &v12[v35];
  uint64_t v37 = &v13[v35];
  if (v16(&v13[v35], 1LL, v14))
  {
    uint64_t v38 = sub_100183098(&qword_1006457E8);
    memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v36, v37, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v36, 0LL, 1LL, v14);
  }

  uint64_t v39 = v18[10];
  uint64_t v40 = &v12[v39];
  uint64_t v41 = &v13[v39];
  if (v16(&v13[v39], 1LL, v14))
  {
    uint64_t v42 = sub_100183098(&qword_1006457E8);
    memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v40, v41, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v40, 0LL, 1LL, v14);
  }

  uint64_t v43 = v18[11];
  uint64_t v44 = &v12[v43];
  uint64_t v45 = &v13[v43];
  if (v16(&v13[v43], 1LL, v14))
  {
    uint64_t v46 = sub_100183098(&qword_1006457E8);
    memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v44, v45, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v44, 0LL, 1LL, v14);
  }

  uint64_t v47 = v18[12];
  uint64_t v48 = &v12[v47];
  uint64_t v49 = &v13[v47];
  if (v16(&v13[v47], 1LL, v14))
  {
    uint64_t v50 = sub_100183098(&qword_1006457E8);
    memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v48, v49, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v48, 0LL, 1LL, v14);
  }

  v12[v18[13]] = v13[v18[13]];
  uint64_t v51 = v18[14];
  uint64_t v52 = &v12[v51];
  uint64_t v53 = &v13[v51];
  if (v16(&v13[v51], 1LL, v14))
  {
    uint64_t v54 = sub_100183098(&qword_1006457E8);
    memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v52, v53, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v52, 0LL, 1LL, v14);
  }

  uint64_t v55 = v18[15];
  uint64_t v56 = &v12[v55];
  int v57 = &v13[v55];
  if (v16(&v13[v55], 1LL, v14))
  {
    uint64_t v58 = sub_100183098(&qword_1006457E8);
    memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v56, v57, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v56, 0LL, 1LL, v14);
  }

  uint64_t v59 = v18[16];
  uint64_t v60 = &v12[v59];
  uint64_t v61 = &v13[v59];
  if (v16(&v13[v59], 1LL, v14))
  {
    uint64_t v62 = sub_100183098(&qword_1006457E8);
    memcpy(v60, v61, *(void *)(*(void *)(v62 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v60, v61, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v60, 0LL, 1LL, v14);
  }

  uint64_t v63 = v18[17];
  uint64_t v64 = &v12[v63];
  unint64_t v65 = &v13[v63];
  if (v16(&v13[v63], 1LL, v14))
  {
    uint64_t v66 = sub_100183098(&qword_1006457E8);
    memcpy(v64, v65, *(void *)(*(void *)(v66 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v64, v65, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v64, 0LL, 1LL, v14);
  }

  uint64_t v67 = v18[18];
  uint64_t v68 = &v12[v67];
  int v69 = &v13[v67];
  *(_DWORD *)uint64_t v68 = *(_DWORD *)v69;
  v68[4] = v69[4];
  v12[v18[19]] = v13[v18[19]];
  uint64_t v70 = v18[20];
  uint64_t v71 = &v12[v70];
  uint64_t v72 = &v13[v70];
  uint64_t v73 = *((void *)v72 + 1);
  *(void *)uint64_t v71 = *(void *)v72;
  *((void *)v71 + 1) = v73;
  uint64_t v74 = v18[21];
  uint64_t v75 = &v12[v74];
  uint64_t v76 = &v13[v74];
  uint64_t v77 = *((void *)v76 + 1);
  *(void *)uint64_t v75 = *(void *)v76;
  *((void *)v75 + 1) = v77;
  uint64_t v78 = v87[8];
  uint64_t v79 = v87[9];
  uint64_t v80 = (void *)(a1 + v78);
  uint64_t v81 = (void *)(a2 + v78);
  uint64_t v82 = v81[1];
  *uint64_t v80 = *v81;
  v80[1] = v82;
  uint64_t v83 = (void *)(a1 + v79);
  int v84 = (void *)(a2 + v79);
  uint64_t v85 = v84[1];
  *uint64_t v83 = *v84;
  v83[1] = v85;
  *(_BYTE *)(a1 + v87[10]) = *(_BYTE *)(a2 + v87[10]);
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v77);
  swift_bridgeObjectRetain(v82);
  swift_bridgeObjectRetain(v85);
  return a1;
}

uint64_t sub_1001A5D44(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  sub_10019DB24((void *)(a1 + 16), (void *)(a2 + 16));
  uint64_t v115 = a3;
  uint64_t v116 = a2;
  uint64_t v8 = a3[7];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1LL, v11);
  int v15 = v13(v10, 1LL, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    uint64_t v16 = sub_100183098(&qword_1006457E8);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
LABEL_7:
  uint64_t v17 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v18 = v17[5];
  uint64_t v19 = &v9[v18];
  uint64_t v20 = &v10[v18];
  int v21 = v13(&v9[v18], 1LL, v11);
  int v22 = v13(v20, 1LL, v11);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v19, v20, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v19, 0LL, 1LL, v11);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v11);
LABEL_12:
    uint64_t v23 = sub_100183098(&qword_1006457E8);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v19, v20, v11);
LABEL_13:
  uint64_t v24 = v17[6];
  uint64_t v25 = &v9[v24];
  uint64_t v26 = &v10[v24];
  int v27 = v13(&v9[v24], 1LL, v11);
  int v28 = v13(v26, 1LL, v11);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v25, v26, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v25, 0LL, 1LL, v11);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v25, v11);
LABEL_18:
    uint64_t v29 = sub_100183098(&qword_1006457E8);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v25, v26, v11);
LABEL_19:
  uint64_t v30 = v17[7];
  uint64_t v31 = &v9[v30];
  uint64_t v32 = &v10[v30];
  int v33 = v13(&v9[v30], 1LL, v11);
  int v34 = v13(v32, 1LL, v11);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v31, v32, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v31, 0LL, 1LL, v11);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v31, v11);
LABEL_24:
    uint64_t v35 = sub_100183098(&qword_1006457E8);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v31, v32, v11);
LABEL_25:
  uint64_t v36 = v17[8];
  uint64_t v37 = &v9[v36];
  uint64_t v38 = &v10[v36];
  int v39 = v13(&v9[v36], 1LL, v11);
  int v40 = v13(v38, 1LL, v11);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v37, v38, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v37, 0LL, 1LL, v11);
      goto LABEL_31;
    }

    goto LABEL_30;
  }

  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v37, v11);
LABEL_30:
    uint64_t v41 = sub_100183098(&qword_1006457E8);
    memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64LL));
    goto LABEL_31;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v37, v38, v11);
LABEL_31:
  uint64_t v42 = v17[9];
  uint64_t v43 = &v9[v42];
  uint64_t v44 = &v10[v42];
  int v45 = v13(&v9[v42], 1LL, v11);
  int v46 = v13(v44, 1LL, v11);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v43, v44, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v43, 0LL, 1LL, v11);
      goto LABEL_37;
    }

    goto LABEL_36;
  }

  if (v46)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v43, v11);
LABEL_36:
    uint64_t v47 = sub_100183098(&qword_1006457E8);
    memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64LL));
    goto LABEL_37;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v43, v44, v11);
LABEL_37:
  uint64_t v48 = v17[10];
  uint64_t v49 = &v9[v48];
  uint64_t v50 = &v10[v48];
  int v51 = v13(&v9[v48], 1LL, v11);
  int v52 = v13(v50, 1LL, v11);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v49, v50, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v49, 0LL, 1LL, v11);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v49, v11);
LABEL_42:
    uint64_t v53 = sub_100183098(&qword_1006457E8);
    memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64LL));
    goto LABEL_43;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v49, v50, v11);
LABEL_43:
  uint64_t v54 = v17[11];
  uint64_t v55 = &v9[v54];
  uint64_t v56 = &v10[v54];
  int v57 = v13(&v9[v54], 1LL, v11);
  int v58 = v13(v56, 1LL, v11);
  if (v57)
  {
    if (!v58)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v55, v56, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v55, 0LL, 1LL, v11);
      goto LABEL_49;
    }

    goto LABEL_48;
  }

  if (v58)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v55, v11);
LABEL_48:
    uint64_t v59 = sub_100183098(&qword_1006457E8);
    memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64LL));
    goto LABEL_49;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v55, v56, v11);
LABEL_49:
  uint64_t v60 = v17[12];
  uint64_t v61 = &v9[v60];
  uint64_t v62 = &v10[v60];
  int v63 = v13(&v9[v60], 1LL, v11);
  int v64 = v13(v62, 1LL, v11);
  if (v63)
  {
    if (!v64)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v61, v62, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v61, 0LL, 1LL, v11);
      goto LABEL_55;
    }

    goto LABEL_54;
  }

  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v61, v11);
LABEL_54:
    uint64_t v65 = sub_100183098(&qword_1006457E8);
    memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64LL));
    goto LABEL_55;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v61, v62, v11);
LABEL_55:
  v9[v17[13]] = v10[v17[13]];
  uint64_t v66 = v17[14];
  uint64_t v67 = &v9[v66];
  uint64_t v68 = &v10[v66];
  int v69 = v13(&v9[v66], 1LL, v11);
  int v70 = v13(v68, 1LL, v11);
  if (v69)
  {
    if (!v70)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v67, v68, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v67, 0LL, 1LL, v11);
      goto LABEL_61;
    }

    goto LABEL_60;
  }

  if (v70)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v67, v11);
LABEL_60:
    uint64_t v71 = sub_100183098(&qword_1006457E8);
    memcpy(v67, v68, *(void *)(*(void *)(v71 - 8) + 64LL));
    goto LABEL_61;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v67, v68, v11);
LABEL_61:
  uint64_t v72 = v17[15];
  uint64_t v73 = &v9[v72];
  uint64_t v74 = &v10[v72];
  int v75 = v13(&v9[v72], 1LL, v11);
  int v76 = v13(v74, 1LL, v11);
  if (v75)
  {
    if (!v76)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v73, v74, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v73, 0LL, 1LL, v11);
      goto LABEL_67;
    }

    goto LABEL_66;
  }

  if (v76)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v73, v11);
LABEL_66:
    uint64_t v77 = sub_100183098(&qword_1006457E8);
    memcpy(v73, v74, *(void *)(*(void *)(v77 - 8) + 64LL));
    goto LABEL_67;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v73, v74, v11);
LABEL_67:
  uint64_t v78 = v17[16];
  uint64_t v79 = &v9[v78];
  uint64_t v80 = &v10[v78];
  int v81 = v13(&v9[v78], 1LL, v11);
  int v82 = v13(v80, 1LL, v11);
  if (v81)
  {
    if (!v82)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v79, v80, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v79, 0LL, 1LL, v11);
      goto LABEL_73;
    }

    goto LABEL_72;
  }

  if (v82)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v79, v11);
LABEL_72:
    uint64_t v83 = sub_100183098(&qword_1006457E8);
    memcpy(v79, v80, *(void *)(*(void *)(v83 - 8) + 64LL));
    goto LABEL_73;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v79, v80, v11);
LABEL_73:
  uint64_t v84 = v17[17];
  uint64_t v85 = &v9[v84];
  uint64_t v86 = &v10[v84];
  int v87 = v13(&v9[v84], 1LL, v11);
  int v88 = v13(v86, 1LL, v11);
  if (!v87)
  {
    if (!v88)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v85, v86, v11);
      goto LABEL_79;
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v85, v11);
    goto LABEL_78;
  }

  if (v88)
  {
LABEL_78:
    uint64_t v89 = sub_100183098(&qword_1006457E8);
    memcpy(v85, v86, *(void *)(*(void *)(v89 - 8) + 64LL));
    goto LABEL_79;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v85, v86, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v85, 0LL, 1LL, v11);
LABEL_79:
  uint64_t v90 = v17[18];
  uint64_t v91 = &v9[v90];
  uint64_t v92 = &v10[v90];
  int v93 = *(_DWORD *)v92;
  v91[4] = v92[4];
  *(_DWORD *)uint64_t v91 = v93;
  v9[v17[19]] = v10[v17[19]];
  uint64_t v94 = v17[20];
  uint64_t v95 = &v9[v94];
  uint64_t v96 = &v10[v94];
  *(void *)uint64_t v95 = *(void *)v96;
  uint64_t v97 = *((void *)v96 + 1);
  uint64_t v98 = *((void *)v95 + 1);
  *((void *)v95 + 1) = v97;
  swift_bridgeObjectRetain(v97);
  swift_bridgeObjectRelease(v98);
  uint64_t v99 = v17[21];
  uint64_t v100 = &v9[v99];
  uint64_t v101 = &v10[v99];
  *(void *)uint64_t v100 = *(void *)v101;
  uint64_t v102 = *((void *)v101 + 1);
  uint64_t v103 = *((void *)v100 + 1);
  *((void *)v100 + 1) = v102;
  swift_bridgeObjectRetain(v102);
  swift_bridgeObjectRelease(v103);
  uint64_t v104 = v115[8];
  uint64_t v105 = (void *)(a1 + v104);
  uint64_t v106 = (void *)(v116 + v104);
  *uint64_t v105 = *v106;
  uint64_t v107 = v106[1];
  uint64_t v108 = v105[1];
  v105[1] = v107;
  swift_bridgeObjectRetain(v107);
  swift_bridgeObjectRelease(v108);
  uint64_t v109 = v115[9];
  uint64_t v110 = (void *)(a1 + v109);
  uint64_t v111 = (void *)(v116 + v109);
  void *v110 = *v111;
  uint64_t v112 = v111[1];
  uint64_t v113 = v110[1];
  v110[1] = v112;
  swift_bridgeObjectRetain(v112);
  swift_bridgeObjectRelease(v113);
  *(_BYTE *)(a1 + v115[10]) = *(_BYTE *)(v116 + v115[10]);
  return a1;
}

uint64_t sub_1001A67FC(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  __int128 v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  uint64_t v6 = a3[7];
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1LL, v9))
  {
    uint64_t v12 = sub_100183098(&qword_1006457E8);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  uint64_t v13 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v14 = v13[5];
  int v15 = &v7[v14];
  uint64_t v16 = &v8[v14];
  if (v11(&v8[v14], 1LL, v9))
  {
    uint64_t v17 = sub_100183098(&qword_1006457E8);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v16, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v15, 0LL, 1LL, v9);
  }

  uint64_t v18 = v13[6];
  uint64_t v19 = &v7[v18];
  uint64_t v20 = &v8[v18];
  if (v11(&v8[v18], 1LL, v9))
  {
    uint64_t v21 = sub_100183098(&qword_1006457E8);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v19, v20, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v19, 0LL, 1LL, v9);
  }

  uint64_t v22 = v13[7];
  uint64_t v23 = &v7[v22];
  uint64_t v24 = &v8[v22];
  if (v11(&v8[v22], 1LL, v9))
  {
    uint64_t v25 = sub_100183098(&qword_1006457E8);
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v23, v24, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v23, 0LL, 1LL, v9);
  }

  uint64_t v26 = v13[8];
  int v27 = &v7[v26];
  int v28 = &v8[v26];
  if (v11(&v8[v26], 1LL, v9))
  {
    uint64_t v29 = sub_100183098(&qword_1006457E8);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v27, v28, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v27, 0LL, 1LL, v9);
  }

  uint64_t v30 = v13[9];
  uint64_t v31 = &v7[v30];
  uint64_t v32 = &v8[v30];
  if (v11(&v8[v30], 1LL, v9))
  {
    uint64_t v33 = sub_100183098(&qword_1006457E8);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v31, v32, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v31, 0LL, 1LL, v9);
  }

  uint64_t v34 = v13[10];
  uint64_t v35 = &v7[v34];
  uint64_t v36 = &v8[v34];
  if (v11(&v8[v34], 1LL, v9))
  {
    uint64_t v37 = sub_100183098(&qword_1006457E8);
    memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v35, v36, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v35, 0LL, 1LL, v9);
  }

  uint64_t v38 = v13[11];
  int v39 = &v7[v38];
  int v40 = &v8[v38];
  if (v11(&v8[v38], 1LL, v9))
  {
    uint64_t v41 = sub_100183098(&qword_1006457E8);
    memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v39, v40, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v39, 0LL, 1LL, v9);
  }

  uint64_t v42 = v13[12];
  uint64_t v43 = &v7[v42];
  uint64_t v44 = &v8[v42];
  if (v11(&v8[v42], 1LL, v9))
  {
    uint64_t v45 = sub_100183098(&qword_1006457E8);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v43, v44, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v43, 0LL, 1LL, v9);
  }

  v7[v13[13]] = v8[v13[13]];
  uint64_t v46 = v13[14];
  uint64_t v47 = &v7[v46];
  uint64_t v48 = &v8[v46];
  if (v11(&v8[v46], 1LL, v9))
  {
    uint64_t v49 = sub_100183098(&qword_1006457E8);
    memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v47, v48, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v47, 0LL, 1LL, v9);
  }

  uint64_t v50 = v13[15];
  int v51 = &v7[v50];
  int v52 = &v8[v50];
  if (v11(&v8[v50], 1LL, v9))
  {
    uint64_t v53 = sub_100183098(&qword_1006457E8);
    memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v51, v52, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v51, 0LL, 1LL, v9);
  }

  uint64_t v54 = v13[16];
  uint64_t v55 = &v7[v54];
  uint64_t v56 = &v8[v54];
  if (v11(&v8[v54], 1LL, v9))
  {
    uint64_t v57 = sub_100183098(&qword_1006457E8);
    memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v55, v56, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v55, 0LL, 1LL, v9);
  }

  uint64_t v58 = v13[17];
  uint64_t v59 = &v7[v58];
  uint64_t v60 = &v8[v58];
  if (v11(&v8[v58], 1LL, v9))
  {
    uint64_t v61 = sub_100183098(&qword_1006457E8);
    memcpy(v59, v60, *(void *)(*(void *)(v61 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v59, v60, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v59, 0LL, 1LL, v9);
  }

  uint64_t v62 = v13[18];
  int v63 = &v7[v62];
  int v64 = &v8[v62];
  *(_DWORD *)int v63 = *(_DWORD *)v64;
  v63[4] = v64[4];
  v7[v13[19]] = v8[v13[19]];
  *(_OWORD *)&v7[v13[20]] = *(_OWORD *)&v8[v13[20]];
  *(_OWORD *)&v7[v13[21]] = *(_OWORD *)&v8[v13[21]];
  uint64_t v65 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(_OWORD *)(a1 + v65) = *(_OWORD *)(a2 + v65);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_1001A6EAC(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease(v6);
  sub_10018709C((void *)(a1 + 16));
  __int128 v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v7;
  *(void *)(a1 + 4_Block_object_dispose(va, 8) = *(void *)(a2 + 48);
  uint64_t v118 = a3;
  uint64_t v119 = a2;
  uint64_t v8 = a3[7];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1LL, v11);
  int v15 = v13(v10, 1LL, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    uint64_t v16 = sub_100183098(&qword_1006457E8);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  uint64_t v17 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v18 = v17[5];
  uint64_t v19 = &v9[v18];
  uint64_t v20 = &v10[v18];
  int v21 = v13(&v9[v18], 1LL, v11);
  int v22 = v13(v20, 1LL, v11);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v19, v20, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v19, 0LL, 1LL, v11);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v11);
LABEL_12:
    uint64_t v23 = sub_100183098(&qword_1006457E8);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v19, v20, v11);
LABEL_13:
  uint64_t v24 = v17[6];
  uint64_t v25 = &v9[v24];
  uint64_t v26 = &v10[v24];
  int v27 = v13(&v9[v24], 1LL, v11);
  int v28 = v13(v26, 1LL, v11);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v25, v26, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v25, 0LL, 1LL, v11);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v25, v11);
LABEL_18:
    uint64_t v29 = sub_100183098(&qword_1006457E8);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v25, v26, v11);
LABEL_19:
  uint64_t v30 = v17[7];
  uint64_t v31 = &v9[v30];
  uint64_t v32 = &v10[v30];
  int v33 = v13(&v9[v30], 1LL, v11);
  int v34 = v13(v32, 1LL, v11);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v31, v32, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v31, 0LL, 1LL, v11);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v31, v11);
LABEL_24:
    uint64_t v35 = sub_100183098(&qword_1006457E8);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v31, v32, v11);
LABEL_25:
  uint64_t v36 = v17[8];
  uint64_t v37 = &v9[v36];
  uint64_t v38 = &v10[v36];
  int v39 = v13(&v9[v36], 1LL, v11);
  int v40 = v13(v38, 1LL, v11);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v37, v38, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v37, 0LL, 1LL, v11);
      goto LABEL_31;
    }

    goto LABEL_30;
  }

  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v37, v11);
LABEL_30:
    uint64_t v41 = sub_100183098(&qword_1006457E8);
    memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64LL));
    goto LABEL_31;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v37, v38, v11);
LABEL_31:
  uint64_t v42 = v17[9];
  uint64_t v43 = &v9[v42];
  uint64_t v44 = &v10[v42];
  int v45 = v13(&v9[v42], 1LL, v11);
  int v46 = v13(v44, 1LL, v11);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v43, v44, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v43, 0LL, 1LL, v11);
      goto LABEL_37;
    }

    goto LABEL_36;
  }

  if (v46)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v43, v11);
LABEL_36:
    uint64_t v47 = sub_100183098(&qword_1006457E8);
    memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64LL));
    goto LABEL_37;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v43, v44, v11);
LABEL_37:
  uint64_t v48 = v17[10];
  uint64_t v49 = &v9[v48];
  uint64_t v50 = &v10[v48];
  int v51 = v13(&v9[v48], 1LL, v11);
  int v52 = v13(v50, 1LL, v11);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v49, v50, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v49, 0LL, 1LL, v11);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v49, v11);
LABEL_42:
    uint64_t v53 = sub_100183098(&qword_1006457E8);
    memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64LL));
    goto LABEL_43;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v49, v50, v11);
LABEL_43:
  uint64_t v54 = v17[11];
  uint64_t v55 = &v9[v54];
  uint64_t v56 = &v10[v54];
  int v57 = v13(&v9[v54], 1LL, v11);
  int v58 = v13(v56, 1LL, v11);
  if (v57)
  {
    if (!v58)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v55, v56, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v55, 0LL, 1LL, v11);
      goto LABEL_49;
    }

    goto LABEL_48;
  }

  if (v58)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v55, v11);
LABEL_48:
    uint64_t v59 = sub_100183098(&qword_1006457E8);
    memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64LL));
    goto LABEL_49;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v55, v56, v11);
LABEL_49:
  uint64_t v60 = v17[12];
  uint64_t v61 = &v9[v60];
  uint64_t v62 = &v10[v60];
  int v63 = v13(&v9[v60], 1LL, v11);
  int v64 = v13(v62, 1LL, v11);
  if (v63)
  {
    if (!v64)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v61, v62, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v61, 0LL, 1LL, v11);
      goto LABEL_55;
    }

    goto LABEL_54;
  }

  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v61, v11);
LABEL_54:
    uint64_t v65 = sub_100183098(&qword_1006457E8);
    memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64LL));
    goto LABEL_55;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v61, v62, v11);
LABEL_55:
  v9[v17[13]] = v10[v17[13]];
  uint64_t v66 = v17[14];
  uint64_t v67 = &v9[v66];
  uint64_t v68 = &v10[v66];
  int v69 = v13(&v9[v66], 1LL, v11);
  int v70 = v13(v68, 1LL, v11);
  if (v69)
  {
    if (!v70)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v67, v68, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v67, 0LL, 1LL, v11);
      goto LABEL_61;
    }

    goto LABEL_60;
  }

  if (v70)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v67, v11);
LABEL_60:
    uint64_t v71 = sub_100183098(&qword_1006457E8);
    memcpy(v67, v68, *(void *)(*(void *)(v71 - 8) + 64LL));
    goto LABEL_61;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v67, v68, v11);
LABEL_61:
  uint64_t v72 = v17[15];
  uint64_t v73 = &v9[v72];
  uint64_t v74 = &v10[v72];
  int v75 = v13(&v9[v72], 1LL, v11);
  int v76 = v13(v74, 1LL, v11);
  if (v75)
  {
    if (!v76)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v73, v74, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v73, 0LL, 1LL, v11);
      goto LABEL_67;
    }

    goto LABEL_66;
  }

  if (v76)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v73, v11);
LABEL_66:
    uint64_t v77 = sub_100183098(&qword_1006457E8);
    memcpy(v73, v74, *(void *)(*(void *)(v77 - 8) + 64LL));
    goto LABEL_67;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v73, v74, v11);
LABEL_67:
  uint64_t v78 = v17[16];
  uint64_t v79 = &v9[v78];
  uint64_t v80 = &v10[v78];
  int v81 = v13(&v9[v78], 1LL, v11);
  int v82 = v13(v80, 1LL, v11);
  if (v81)
  {
    if (!v82)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v79, v80, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v79, 0LL, 1LL, v11);
      goto LABEL_73;
    }

    goto LABEL_72;
  }

  if (v82)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v79, v11);
LABEL_72:
    uint64_t v83 = sub_100183098(&qword_1006457E8);
    memcpy(v79, v80, *(void *)(*(void *)(v83 - 8) + 64LL));
    goto LABEL_73;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v79, v80, v11);
LABEL_73:
  uint64_t v84 = v17[17];
  uint64_t v85 = &v9[v84];
  uint64_t v86 = &v10[v84];
  int v87 = v13(&v9[v84], 1LL, v11);
  int v88 = v13(v86, 1LL, v11);
  if (!v87)
  {
    if (!v88)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v85, v86, v11);
      goto LABEL_79;
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v85, v11);
    goto LABEL_78;
  }

  if (v88)
  {
LABEL_78:
    uint64_t v89 = sub_100183098(&qword_1006457E8);
    memcpy(v85, v86, *(void *)(*(void *)(v89 - 8) + 64LL));
    goto LABEL_79;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v85, v86, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v85, 0LL, 1LL, v11);
LABEL_79:
  uint64_t v90 = v17[18];
  uint64_t v91 = &v9[v90];
  uint64_t v92 = &v10[v90];
  *(_DWORD *)uint64_t v91 = *(_DWORD *)v92;
  v91[4] = v92[4];
  v9[v17[19]] = v10[v17[19]];
  uint64_t v93 = v17[20];
  uint64_t v94 = &v9[v93];
  uint64_t v95 = &v10[v93];
  uint64_t v97 = *(void *)v95;
  uint64_t v96 = *((void *)v95 + 1);
  uint64_t v98 = *((void *)v94 + 1);
  *(void *)uint64_t v94 = v97;
  *((void *)v94 + 1) = v96;
  swift_bridgeObjectRelease(v98);
  uint64_t v99 = v17[21];
  uint64_t v100 = &v9[v99];
  uint64_t v101 = &v10[v99];
  uint64_t v103 = *(void *)v101;
  uint64_t v102 = *((void *)v101 + 1);
  uint64_t v104 = *((void *)v100 + 1);
  *(void *)uint64_t v100 = v103;
  *((void *)v100 + 1) = v102;
  swift_bridgeObjectRelease(v104);
  uint64_t v105 = v118[8];
  uint64_t v106 = (void *)(a1 + v105);
  uint64_t v107 = (uint64_t *)(v119 + v105);
  uint64_t v109 = *v107;
  uint64_t v108 = v107[1];
  uint64_t v110 = v106[1];
  *uint64_t v106 = v109;
  v106[1] = v108;
  swift_bridgeObjectRelease(v110);
  uint64_t v111 = v118[9];
  uint64_t v112 = (void *)(a1 + v111);
  uint64_t v113 = (uint64_t *)(v119 + v111);
  uint64_t v115 = *v113;
  uint64_t v114 = v113[1];
  uint64_t v116 = v112[1];
  *uint64_t v112 = v115;
  v112[1] = v114;
  swift_bridgeObjectRelease(v116);
  *(_BYTE *)(a1 + v118[10]) = *(_BYTE *)(v119 + v118[10]);
  return a1;
}

uint64_t sub_1001A7928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001A7934);
}

uint64_t sub_1001A7934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for SDAuthenticationSessionMetrics(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 28),  a2,  v8);
  }

uint64_t sub_1001A79B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001A79BC);
}

uint64_t sub_1001A79BC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + _Block_object_dispose(va, 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for SDAuthenticationSessionMetrics(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 28),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1001A7A30(uint64_t a1)
{
  v4[0] = &unk_1004CD770;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  _DWORD v4[2] = "(";
  uint64_t result = type metadata accessor for SDAuthenticationSessionMetrics(319LL);
  if (v3 <= 0x3F)
  {
    void v4[3] = *(void *)(result - 8) + 64LL;
    void v4[4] = &unk_1004CD788;
    v4[5] = &unk_1004CD788;
    v4[6] = &unk_1004CD770;
    swift_initStructMetadata(a1, 256LL, 7LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1001A7AC8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16LL) & ~(unint64_t)v4);
    swift_retain(v5);
  }

  else
  {
    uint64_t v8 = a2 + 1;
    __int128 v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    uint64_t v10 = v9;
    uint64_t v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_bridgeObjectRetain(v5);
    v11(a1 + 8, v8, v10);
    uint64_t v12 = a2 + 6;
    unint64_t v13 = a2[7];
    if (v13 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_OWORD *)v12;
    }

    else
    {
      uint64_t v14 = *v12;
      sub_10019BA8C(*v12, a2[7]);
      *(void *)(a1 + 4_Block_object_dispose(va, 8) = v14;
      *(void *)(a1 + 56) = v13;
    }

    uint64_t v15 = *(int *)(a3 + 28);
    uint64_t v16 = (char *)(a1 + v15);
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for Date(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
    uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    uint64_t v87 = a3;
    if (v20(v17, 1LL, v18))
    {
      uint64_t v21 = sub_100183098(&qword_1006457E8);
      memcpy(v16, v17, *(void *)(*(void *)(v21 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
    }

    int v22 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
    uint64_t v23 = v22[5];
    uint64_t v24 = &v16[v23];
    uint64_t v25 = &v17[v23];
    if (v20(&v17[v23], 1LL, v18))
    {
      uint64_t v26 = sub_100183098(&qword_1006457E8);
      memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v24, v25, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v24, 0LL, 1LL, v18);
    }

    uint64_t v27 = v22[6];
    int v28 = &v16[v27];
    uint64_t v29 = &v17[v27];
    if (v20(&v17[v27], 1LL, v18))
    {
      uint64_t v30 = sub_100183098(&qword_1006457E8);
      memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v28, v29, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v28, 0LL, 1LL, v18);
    }

    uint64_t v31 = v22[7];
    uint64_t v32 = &v16[v31];
    int v33 = &v17[v31];
    if (v20(&v17[v31], 1LL, v18))
    {
      uint64_t v34 = sub_100183098(&qword_1006457E8);
      memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v32, v33, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v32, 0LL, 1LL, v18);
    }

    uint64_t v35 = v22[8];
    uint64_t v36 = &v16[v35];
    uint64_t v37 = &v17[v35];
    if (v20(&v17[v35], 1LL, v18))
    {
      uint64_t v38 = sub_100183098(&qword_1006457E8);
      memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v36, v37, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v36, 0LL, 1LL, v18);
    }

    uint64_t v39 = v22[9];
    int v40 = &v16[v39];
    uint64_t v41 = &v17[v39];
    if (v20(&v17[v39], 1LL, v18))
    {
      uint64_t v42 = sub_100183098(&qword_1006457E8);
      memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v40, v41, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v40, 0LL, 1LL, v18);
    }

    uint64_t v43 = v22[10];
    uint64_t v44 = &v16[v43];
    int v45 = &v17[v43];
    if (v20(&v17[v43], 1LL, v18))
    {
      uint64_t v46 = sub_100183098(&qword_1006457E8);
      memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v44, v45, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v44, 0LL, 1LL, v18);
    }

    uint64_t v47 = v22[11];
    uint64_t v48 = &v16[v47];
    uint64_t v49 = &v17[v47];
    if (v20(&v17[v47], 1LL, v18))
    {
      uint64_t v50 = sub_100183098(&qword_1006457E8);
      memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v48, v49, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v48, 0LL, 1LL, v18);
    }

    uint64_t v51 = v22[12];
    int v52 = &v16[v51];
    uint64_t v53 = &v17[v51];
    if (v20(&v17[v51], 1LL, v18))
    {
      uint64_t v54 = sub_100183098(&qword_1006457E8);
      memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v52, v53, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v52, 0LL, 1LL, v18);
    }

    v16[v22[13]] = v17[v22[13]];
    uint64_t v55 = v22[14];
    uint64_t v56 = &v16[v55];
    int v57 = &v17[v55];
    if (v20(&v17[v55], 1LL, v18))
    {
      uint64_t v58 = sub_100183098(&qword_1006457E8);
      memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v56, v57, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v56, 0LL, 1LL, v18);
    }

    uint64_t v59 = v22[15];
    uint64_t v60 = &v16[v59];
    uint64_t v61 = &v17[v59];
    if (v20(&v17[v59], 1LL, v18))
    {
      uint64_t v62 = sub_100183098(&qword_1006457E8);
      memcpy(v60, v61, *(void *)(*(void *)(v62 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v60, v61, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v60, 0LL, 1LL, v18);
    }

    uint64_t v63 = v22[16];
    int v64 = &v16[v63];
    uint64_t v65 = &v17[v63];
    if (v20(&v17[v63], 1LL, v18))
    {
      uint64_t v66 = sub_100183098(&qword_1006457E8);
      memcpy(v64, v65, *(void *)(*(void *)(v66 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v64, v65, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v64, 0LL, 1LL, v18);
    }

    uint64_t v67 = v22[17];
    uint64_t v68 = &v16[v67];
    int v69 = &v17[v67];
    if (v20(&v17[v67], 1LL, v18))
    {
      uint64_t v70 = sub_100183098(&qword_1006457E8);
      memcpy(v68, v69, *(void *)(*(void *)(v70 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v68, v69, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v68, 0LL, 1LL, v18);
    }

    uint64_t v71 = v22[18];
    uint64_t v72 = &v16[v71];
    uint64_t v73 = &v17[v71];
    *(_DWORD *)uint64_t v72 = *(_DWORD *)v73;
    v72[4] = v73[4];
    v16[v22[19]] = v17[v22[19]];
    uint64_t v74 = v22[20];
    int v75 = &v16[v74];
    int v76 = &v17[v74];
    uint64_t v77 = *((void *)v76 + 1);
    *(void *)int v75 = *(void *)v76;
    *((void *)v75 + 1) = v77;
    uint64_t v78 = v22[21];
    uint64_t v79 = &v16[v78];
    uint64_t v80 = &v17[v78];
    uint64_t v81 = *((void *)v80 + 1);
    *(void *)uint64_t v79 = *(void *)v80;
    *((void *)v79 + 1) = v81;
    uint64_t v82 = *(int *)(v87 + 32);
    uint64_t v83 = *(int *)(v87 + 36);
    uint64_t v84 = *(void **)((char *)a2 + v82);
    *(void *)(a1 + v82) = v84;
    *(_BYTE *)(a1 + v83) = *((_BYTE *)a2 + v83);
    swift_bridgeObjectRetain(v77);
    swift_bridgeObjectRetain(v81);
    id v85 = v84;
  }

  return a1;
}

void sub_1001A8204(void *a1, uint64_t a2)
{
  unint64_t v4 = a1[7];
  if (v4 >> 60 != 15) {
    sub_100189B20(a1[6], v4);
  }
  uint64_t v5 = (char *)a1 + *(int *)(a2 + 28);
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  }
  __int128 v9 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v10 = &v5[v9[5]];
  if (!v8(v10, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  uint64_t v11 = &v5[v9[6]];
  if (!v8(v11, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  }
  uint64_t v12 = &v5[v9[7]];
  if (!v8(v12, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  }
  unint64_t v13 = &v5[v9[8]];
  if (!v8(v13, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  }
  uint64_t v14 = &v5[v9[9]];
  if (!v8(v14, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  }
  uint64_t v15 = &v5[v9[10]];
  if (!v8(v15, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
  }
  uint64_t v16 = &v5[v9[11]];
  if (!v8(v16, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
  }
  uint64_t v17 = &v5[v9[12]];
  if (!v8(v17, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
  }
  uint64_t v18 = &v5[v9[14]];
  if (!v8(v18, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
  }
  uint64_t v19 = &v5[v9[15]];
  if (!v8(v19, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
  }
  uint64_t v20 = &v5[v9[16]];
  if (!v8(v20, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
  }
  uint64_t v21 = &v5[v9[17]];
  if (!v8(v21, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v21, v6);
  }
  swift_bridgeObjectRelease(*(void *)&v5[v9[20] + 8]);
  swift_bridgeObjectRelease(*(void *)&v5[v9[21] + 8]);
}

uint64_t sub_1001A84E8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(void *)a1 = *a2;
  uint64_t v7 = a2 + 1;
  __int128 v8 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v8;
  uint64_t v9 = v8;
  uint64_t v10 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v8 - 8);
  swift_bridgeObjectRetain(v6);
  v10(a1 + 8, v7, v9);
  uint64_t v11 = a2 + 6;
  unint64_t v12 = a2[7];
  if (v12 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_OWORD *)v11;
  }

  else
  {
    uint64_t v13 = *v11;
    sub_10019BA8C(*v11, a2[7]);
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = v13;
    *(void *)(a1 + 56) = v12;
  }

  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (char *)(a1 + v14);
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for Date(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  uint64_t v86 = a3;
  if (v19(v16, 1LL, v17))
  {
    uint64_t v20 = sub_100183098(&qword_1006457E8);
    memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
  }

  uint64_t v21 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v22 = v21[5];
  uint64_t v23 = &v15[v22];
  uint64_t v24 = &v16[v22];
  if (v19(&v16[v22], 1LL, v17))
  {
    uint64_t v25 = sub_100183098(&qword_1006457E8);
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v23, v24, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v23, 0LL, 1LL, v17);
  }

  uint64_t v26 = v21[6];
  uint64_t v27 = &v15[v26];
  int v28 = &v16[v26];
  if (v19(&v16[v26], 1LL, v17))
  {
    uint64_t v29 = sub_100183098(&qword_1006457E8);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v27, v28, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v27, 0LL, 1LL, v17);
  }

  uint64_t v30 = v21[7];
  uint64_t v31 = &v15[v30];
  uint64_t v32 = &v16[v30];
  if (v19(&v16[v30], 1LL, v17))
  {
    uint64_t v33 = sub_100183098(&qword_1006457E8);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v31, v32, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v31, 0LL, 1LL, v17);
  }

  uint64_t v34 = v21[8];
  uint64_t v35 = &v15[v34];
  uint64_t v36 = &v16[v34];
  if (v19(&v16[v34], 1LL, v17))
  {
    uint64_t v37 = sub_100183098(&qword_1006457E8);
    memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v35, v36, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v35, 0LL, 1LL, v17);
  }

  uint64_t v38 = v21[9];
  uint64_t v39 = &v15[v38];
  int v40 = &v16[v38];
  if (v19(&v16[v38], 1LL, v17))
  {
    uint64_t v41 = sub_100183098(&qword_1006457E8);
    memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v39, v40, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v39, 0LL, 1LL, v17);
  }

  uint64_t v42 = v21[10];
  uint64_t v43 = &v15[v42];
  uint64_t v44 = &v16[v42];
  if (v19(&v16[v42], 1LL, v17))
  {
    uint64_t v45 = sub_100183098(&qword_1006457E8);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v43, v44, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v43, 0LL, 1LL, v17);
  }

  uint64_t v46 = v21[11];
  uint64_t v47 = &v15[v46];
  uint64_t v48 = &v16[v46];
  if (v19(&v16[v46], 1LL, v17))
  {
    uint64_t v49 = sub_100183098(&qword_1006457E8);
    memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v47, v48, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v47, 0LL, 1LL, v17);
  }

  uint64_t v50 = v21[12];
  uint64_t v51 = &v15[v50];
  int v52 = &v16[v50];
  if (v19(&v16[v50], 1LL, v17))
  {
    uint64_t v53 = sub_100183098(&qword_1006457E8);
    memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v51, v52, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v51, 0LL, 1LL, v17);
  }

  v15[v21[13]] = v16[v21[13]];
  uint64_t v54 = v21[14];
  uint64_t v55 = &v15[v54];
  uint64_t v56 = &v16[v54];
  if (v19(&v16[v54], 1LL, v17))
  {
    uint64_t v57 = sub_100183098(&qword_1006457E8);
    memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v55, v56, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v55, 0LL, 1LL, v17);
  }

  uint64_t v58 = v21[15];
  uint64_t v59 = &v15[v58];
  uint64_t v60 = &v16[v58];
  if (v19(&v16[v58], 1LL, v17))
  {
    uint64_t v61 = sub_100183098(&qword_1006457E8);
    memcpy(v59, v60, *(void *)(*(void *)(v61 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v59, v60, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v59, 0LL, 1LL, v17);
  }

  uint64_t v62 = v21[16];
  uint64_t v63 = &v15[v62];
  int v64 = &v16[v62];
  if (v19(&v16[v62], 1LL, v17))
  {
    uint64_t v65 = sub_100183098(&qword_1006457E8);
    memcpy(v63, v64, *(void *)(*(void *)(v65 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v63, v64, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v63, 0LL, 1LL, v17);
  }

  uint64_t v66 = v21[17];
  uint64_t v67 = &v15[v66];
  uint64_t v68 = &v16[v66];
  if (v19(&v16[v66], 1LL, v17))
  {
    uint64_t v69 = sub_100183098(&qword_1006457E8);
    memcpy(v67, v68, *(void *)(*(void *)(v69 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v67, v68, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v67, 0LL, 1LL, v17);
  }

  uint64_t v70 = v21[18];
  uint64_t v71 = &v15[v70];
  uint64_t v72 = &v16[v70];
  *(_DWORD *)uint64_t v71 = *(_DWORD *)v72;
  v71[4] = v72[4];
  v15[v21[19]] = v16[v21[19]];
  uint64_t v73 = v21[20];
  uint64_t v74 = &v15[v73];
  int v75 = &v16[v73];
  uint64_t v76 = *((void *)v75 + 1);
  *(void *)uint64_t v74 = *(void *)v75;
  *((void *)v74 + 1) = v76;
  uint64_t v77 = v21[21];
  uint64_t v78 = &v15[v77];
  uint64_t v79 = &v16[v77];
  uint64_t v80 = *((void *)v79 + 1);
  *(void *)uint64_t v78 = *(void *)v79;
  *((void *)v78 + 1) = v80;
  uint64_t v81 = *(int *)(v86 + 32);
  uint64_t v82 = *(int *)(v86 + 36);
  uint64_t v83 = *(void **)((char *)a2 + v81);
  *(void *)(a1 + v81) = v83;
  *(_BYTE *)(a1 + v82) = *((_BYTE *)a2 + v82);
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRetain(v80);
  id v84 = v83;
  return a1;
}

void *sub_1001A8C00(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  sub_10019DB24(a1 + 1, a2 + 1);
  __int128 v8 = a2 + 6;
  unint64_t v9 = a2[7];
  if (a1[7] >> 60 == 15LL)
  {
    if (v9 >> 60 != 15)
    {
      uint64_t v10 = *v8;
      sub_10019BA8C(*v8, a2[7]);
      a1[6] = v10;
      a1[7] = v9;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v9 >> 60 == 15)
  {
    sub_10019DC8C((uint64_t)(a1 + 6));
LABEL_6:
    *((_OWORD *)a1 + 3) = *(_OWORD *)v8;
    goto LABEL_8;
  }

  uint64_t v11 = *v8;
  sub_10019BA8C(*v8, a2[7]);
  uint64_t v12 = a1[6];
  unint64_t v13 = a1[7];
  a1[6] = v11;
  a1[7] = v9;
  sub_100189B20(v12, v13);
LABEL_8:
  uint64_t v115 = a3;
  uint64_t v116 = a2;
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for Date(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1LL, v17);
  int v21 = v19(v16, 1LL, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
      goto LABEL_14;
    }

    goto LABEL_13;
  }

  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
LABEL_13:
    uint64_t v22 = sub_100183098(&qword_1006457E8);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_14;
  }

  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v15, v16, v17);
LABEL_14:
  uint64_t v23 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v24 = v23[5];
  uint64_t v25 = &v15[v24];
  uint64_t v26 = &v16[v24];
  int v27 = v19(&v15[v24], 1LL, v17);
  int v28 = v19(v26, 1LL, v17);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v25, v26, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v25, 0LL, 1LL, v17);
      goto LABEL_20;
    }

    goto LABEL_19;
  }

  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v25, v17);
LABEL_19:
    uint64_t v29 = sub_100183098(&qword_1006457E8);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64LL));
    goto LABEL_20;
  }

  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v25, v26, v17);
LABEL_20:
  uint64_t v30 = v23[6];
  uint64_t v31 = &v15[v30];
  uint64_t v32 = &v16[v30];
  int v33 = v19(&v15[v30], 1LL, v17);
  int v34 = v19(v32, 1LL, v17);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v31, v32, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v31, 0LL, 1LL, v17);
      goto LABEL_26;
    }

    goto LABEL_25;
  }

  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v31, v17);
LABEL_25:
    uint64_t v35 = sub_100183098(&qword_1006457E8);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64LL));
    goto LABEL_26;
  }

  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v31, v32, v17);
LABEL_26:
  uint64_t v36 = v23[7];
  uint64_t v37 = &v15[v36];
  uint64_t v38 = &v16[v36];
  int v39 = v19(&v15[v36], 1LL, v17);
  int v40 = v19(v38, 1LL, v17);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v37, v38, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v37, 0LL, 1LL, v17);
      goto LABEL_32;
    }

    goto LABEL_31;
  }

  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v37, v17);
LABEL_31:
    uint64_t v41 = sub_100183098(&qword_1006457E8);
    memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64LL));
    goto LABEL_32;
  }

  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v37, v38, v17);
LABEL_32:
  uint64_t v42 = v23[8];
  uint64_t v43 = &v15[v42];
  uint64_t v44 = &v16[v42];
  int v45 = v19(&v15[v42], 1LL, v17);
  int v46 = v19(v44, 1LL, v17);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v43, v44, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v43, 0LL, 1LL, v17);
      goto LABEL_38;
    }

    goto LABEL_37;
  }

  if (v46)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v43, v17);
LABEL_37:
    uint64_t v47 = sub_100183098(&qword_1006457E8);
    memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64LL));
    goto LABEL_38;
  }

  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v43, v44, v17);
LABEL_38:
  uint64_t v48 = v23[9];
  uint64_t v49 = &v15[v48];
  uint64_t v50 = &v16[v48];
  int v51 = v19(&v15[v48], 1LL, v17);
  int v52 = v19(v50, 1LL, v17);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v49, v50, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v49, 0LL, 1LL, v17);
      goto LABEL_44;
    }

    goto LABEL_43;
  }

  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v49, v17);
LABEL_43:
    uint64_t v53 = sub_100183098(&qword_1006457E8);
    memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64LL));
    goto LABEL_44;
  }

  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v49, v50, v17);
LABEL_44:
  uint64_t v54 = v23[10];
  uint64_t v55 = &v15[v54];
  uint64_t v56 = &v16[v54];
  int v57 = v19(&v15[v54], 1LL, v17);
  int v58 = v19(v56, 1LL, v17);
  if (v57)
  {
    if (!v58)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v55, v56, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v55, 0LL, 1LL, v17);
      goto LABEL_50;
    }

    goto LABEL_49;
  }

  if (v58)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v55, v17);
LABEL_49:
    uint64_t v59 = sub_100183098(&qword_1006457E8);
    memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64LL));
    goto LABEL_50;
  }

  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v55, v56, v17);
LABEL_50:
  uint64_t v60 = v23[11];
  uint64_t v61 = &v15[v60];
  uint64_t v62 = &v16[v60];
  int v63 = v19(&v15[v60], 1LL, v17);
  int v64 = v19(v62, 1LL, v17);
  if (v63)
  {
    if (!v64)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v61, v62, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v61, 0LL, 1LL, v17);
      goto LABEL_56;
    }

    goto LABEL_55;
  }

  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v61, v17);
LABEL_55:
    uint64_t v65 = sub_100183098(&qword_1006457E8);
    memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64LL));
    goto LABEL_56;
  }

  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v61, v62, v17);
LABEL_56:
  uint64_t v66 = v23[12];
  uint64_t v67 = &v15[v66];
  uint64_t v68 = &v16[v66];
  int v69 = v19(&v15[v66], 1LL, v17);
  int v70 = v19(v68, 1LL, v17);
  if (v69)
  {
    if (!v70)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v67, v68, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v67, 0LL, 1LL, v17);
      goto LABEL_62;
    }

    goto LABEL_61;
  }

  if (v70)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v67, v17);
LABEL_61:
    uint64_t v71 = sub_100183098(&qword_1006457E8);
    memcpy(v67, v68, *(void *)(*(void *)(v71 - 8) + 64LL));
    goto LABEL_62;
  }

  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v67, v68, v17);
LABEL_62:
  v15[v23[13]] = v16[v23[13]];
  uint64_t v72 = v23[14];
  uint64_t v73 = &v15[v72];
  uint64_t v74 = &v16[v72];
  int v75 = v19(&v15[v72], 1LL, v17);
  int v76 = v19(v74, 1LL, v17);
  if (v75)
  {
    if (!v76)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v73, v74, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v73, 0LL, 1LL, v17);
      goto LABEL_68;
    }

    goto LABEL_67;
  }

  if (v76)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v73, v17);
LABEL_67:
    uint64_t v77 = sub_100183098(&qword_1006457E8);
    memcpy(v73, v74, *(void *)(*(void *)(v77 - 8) + 64LL));
    goto LABEL_68;
  }

  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v73, v74, v17);
LABEL_68:
  uint64_t v78 = v23[15];
  uint64_t v79 = &v15[v78];
  uint64_t v80 = &v16[v78];
  int v81 = v19(&v15[v78], 1LL, v17);
  int v82 = v19(v80, 1LL, v17);
  if (v81)
  {
    if (!v82)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v79, v80, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v79, 0LL, 1LL, v17);
      goto LABEL_74;
    }

    goto LABEL_73;
  }

  if (v82)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v79, v17);
LABEL_73:
    uint64_t v83 = sub_100183098(&qword_1006457E8);
    memcpy(v79, v80, *(void *)(*(void *)(v83 - 8) + 64LL));
    goto LABEL_74;
  }

  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v79, v80, v17);
LABEL_74:
  uint64_t v84 = v23[16];
  id v85 = &v15[v84];
  uint64_t v86 = &v16[v84];
  int v87 = v19(&v15[v84], 1LL, v17);
  int v88 = v19(v86, 1LL, v17);
  if (v87)
  {
    if (!v88)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v85, v86, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v85, 0LL, 1LL, v17);
      goto LABEL_80;
    }

    goto LABEL_79;
  }

  if (v88)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v85, v17);
LABEL_79:
    uint64_t v89 = sub_100183098(&qword_1006457E8);
    memcpy(v85, v86, *(void *)(*(void *)(v89 - 8) + 64LL));
    goto LABEL_80;
  }

  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v85, v86, v17);
LABEL_80:
  uint64_t v90 = v23[17];
  uint64_t v91 = &v15[v90];
  uint64_t v92 = &v16[v90];
  int v93 = v19(&v15[v90], 1LL, v17);
  int v94 = v19(v92, 1LL, v17);
  if (!v93)
  {
    if (!v94)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v91, v92, v17);
      goto LABEL_86;
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v91, v17);
    goto LABEL_85;
  }

  if (v94)
  {
LABEL_85:
    uint64_t v95 = sub_100183098(&qword_1006457E8);
    memcpy(v91, v92, *(void *)(*(void *)(v95 - 8) + 64LL));
    goto LABEL_86;
  }

  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v91, v92, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v91, 0LL, 1LL, v17);
LABEL_86:
  uint64_t v96 = v23[18];
  uint64_t v97 = &v15[v96];
  uint64_t v98 = &v16[v96];
  int v99 = *(_DWORD *)v98;
  v97[4] = v98[4];
  *(_DWORD *)uint64_t v97 = v99;
  v15[v23[19]] = v16[v23[19]];
  uint64_t v100 = v23[20];
  uint64_t v101 = &v15[v100];
  uint64_t v102 = &v16[v100];
  *(void *)uint64_t v101 = *(void *)v102;
  uint64_t v103 = *((void *)v102 + 1);
  uint64_t v104 = *((void *)v101 + 1);
  *((void *)v101 + 1) = v103;
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRelease(v104);
  uint64_t v105 = v23[21];
  uint64_t v106 = &v15[v105];
  uint64_t v107 = &v16[v105];
  *(void *)uint64_t v106 = *(void *)v107;
  uint64_t v108 = *((void *)v107 + 1);
  uint64_t v109 = *((void *)v106 + 1);
  *((void *)v106 + 1) = v108;
  swift_bridgeObjectRetain(v108);
  swift_bridgeObjectRelease(v109);
  uint64_t v110 = *(int *)(v115 + 32);
  uint64_t v111 = *(void **)((char *)a1 + v110);
  uint64_t v112 = *(void **)((char *)v116 + v110);
  *(void *)((char *)a1 + v110) = v112;
  id v113 = v112;

  *((_BYTE *)a1 + *(int *)(v115 + 36)) = *((_BYTE *)v116 + *(int *)(v115 + 36));
  return a1;
}

uint64_t sub_1001A96E8(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 48);
  uint64_t v5 = a3[7];
  uint64_t v6 = (char *)(a1 + v5);
  uint64_t v7 = (char *)(a2 + v5);
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1LL, v8))
  {
    uint64_t v11 = sub_100183098(&qword_1006457E8);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0LL, 1LL, v8);
  }

  uint64_t v12 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v13 = v12[5];
  uint64_t v14 = &v6[v13];
  uint64_t v15 = &v7[v13];
  if (v10(&v7[v13], 1LL, v8))
  {
    uint64_t v16 = sub_100183098(&qword_1006457E8);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v15, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v14, 0LL, 1LL, v8);
  }

  uint64_t v17 = v12[6];
  uint64_t v18 = &v6[v17];
  uint64_t v19 = &v7[v17];
  if (v10(&v7[v17], 1LL, v8))
  {
    uint64_t v20 = sub_100183098(&qword_1006457E8);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v18, v19, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v18, 0LL, 1LL, v8);
  }

  uint64_t v21 = v12[7];
  uint64_t v22 = &v6[v21];
  uint64_t v23 = &v7[v21];
  if (v10(&v7[v21], 1LL, v8))
  {
    uint64_t v24 = sub_100183098(&qword_1006457E8);
    memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v22, v23, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v22, 0LL, 1LL, v8);
  }

  uint64_t v25 = v12[8];
  uint64_t v26 = &v6[v25];
  int v27 = &v7[v25];
  if (v10(&v7[v25], 1LL, v8))
  {
    uint64_t v28 = sub_100183098(&qword_1006457E8);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v26, v27, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v26, 0LL, 1LL, v8);
  }

  uint64_t v29 = v12[9];
  uint64_t v30 = &v6[v29];
  uint64_t v31 = &v7[v29];
  if (v10(&v7[v29], 1LL, v8))
  {
    uint64_t v32 = sub_100183098(&qword_1006457E8);
    memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v30, v31, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v30, 0LL, 1LL, v8);
  }

  uint64_t v33 = v12[10];
  int v34 = &v6[v33];
  uint64_t v35 = &v7[v33];
  if (v10(&v7[v33], 1LL, v8))
  {
    uint64_t v36 = sub_100183098(&qword_1006457E8);
    memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v34, v35, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v34, 0LL, 1LL, v8);
  }

  uint64_t v37 = v12[11];
  uint64_t v38 = &v6[v37];
  int v39 = &v7[v37];
  if (v10(&v7[v37], 1LL, v8))
  {
    uint64_t v40 = sub_100183098(&qword_1006457E8);
    memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v38, v39, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v38, 0LL, 1LL, v8);
  }

  uint64_t v41 = v12[12];
  uint64_t v42 = &v6[v41];
  uint64_t v43 = &v7[v41];
  if (v10(&v7[v41], 1LL, v8))
  {
    uint64_t v44 = sub_100183098(&qword_1006457E8);
    memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v42, v43, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v42, 0LL, 1LL, v8);
  }

  v6[v12[13]] = v7[v12[13]];
  uint64_t v45 = v12[14];
  int v46 = &v6[v45];
  uint64_t v47 = &v7[v45];
  if (v10(&v7[v45], 1LL, v8))
  {
    uint64_t v48 = sub_100183098(&qword_1006457E8);
    memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v46, v47, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v46, 0LL, 1LL, v8);
  }

  uint64_t v49 = v12[15];
  uint64_t v50 = &v6[v49];
  int v51 = &v7[v49];
  if (v10(&v7[v49], 1LL, v8))
  {
    uint64_t v52 = sub_100183098(&qword_1006457E8);
    memcpy(v50, v51, *(void *)(*(void *)(v52 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v50, v51, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v50, 0LL, 1LL, v8);
  }

  uint64_t v53 = v12[16];
  uint64_t v54 = &v6[v53];
  uint64_t v55 = &v7[v53];
  if (v10(&v7[v53], 1LL, v8))
  {
    uint64_t v56 = sub_100183098(&qword_1006457E8);
    memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v54, v55, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v54, 0LL, 1LL, v8);
  }

  uint64_t v57 = v12[17];
  int v58 = &v6[v57];
  uint64_t v59 = &v7[v57];
  if (v10(&v7[v57], 1LL, v8))
  {
    uint64_t v60 = sub_100183098(&qword_1006457E8);
    memcpy(v58, v59, *(void *)(*(void *)(v60 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v58, v59, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v58, 0LL, 1LL, v8);
  }

  uint64_t v61 = v12[18];
  uint64_t v62 = &v6[v61];
  int v63 = &v7[v61];
  *(_DWORD *)uint64_t v62 = *(_DWORD *)v63;
  v62[4] = v63[4];
  v6[v12[19]] = v7[v12[19]];
  *(_OWORD *)&v6[v12[20]] = *(_OWORD *)&v7[v12[20]];
  *(_OWORD *)&v6[v12[21]] = *(_OWORD *)&v7[v12[21]];
  uint64_t v64 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v64) = *(_BYTE *)(a2 + v64);
  return a1;
}

uint64_t *sub_1001A9D94(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  sub_10018709C(a1 + 1);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  a1[5] = a2[5];
  uint64_t v7 = a2 + 6;
  unint64_t v8 = a1[7];
  if (v8 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v9 = a2[7];
  if (v9 >> 60 == 15)
  {
    sub_10019DC8C((uint64_t)(a1 + 6));
LABEL_4:
    *((_OWORD *)a1 + 3) = *v7;
    goto LABEL_6;
  }

  uint64_t v10 = a1[6];
  a1[6] = *(void *)v7;
  a1[7] = v9;
  sub_100189B20(v10, v8);
LABEL_6:
  uint64_t v111 = a3;
  uint64_t v112 = a2;
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1LL, v14);
  int v18 = v16(v13, 1LL, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
      goto LABEL_12;
    }

    goto LABEL_11;
  }

  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
LABEL_11:
    uint64_t v19 = sub_100183098(&qword_1006457E8);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64LL));
    goto LABEL_12;
  }

  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v12, v13, v14);
LABEL_12:
  uint64_t v20 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v21 = v20[5];
  uint64_t v22 = &v12[v21];
  uint64_t v23 = &v13[v21];
  int v24 = v16(&v12[v21], 1LL, v14);
  int v25 = v16(v23, 1LL, v14);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v22, v23, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v22, 0LL, 1LL, v14);
      goto LABEL_18;
    }

    goto LABEL_17;
  }

  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v22, v14);
LABEL_17:
    uint64_t v26 = sub_100183098(&qword_1006457E8);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64LL));
    goto LABEL_18;
  }

  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v22, v23, v14);
LABEL_18:
  uint64_t v27 = v20[6];
  uint64_t v28 = &v12[v27];
  uint64_t v29 = &v13[v27];
  int v30 = v16(&v12[v27], 1LL, v14);
  int v31 = v16(v29, 1LL, v14);
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v28, v29, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v28, 0LL, 1LL, v14);
      goto LABEL_24;
    }

    goto LABEL_23;
  }

  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v28, v14);
LABEL_23:
    uint64_t v32 = sub_100183098(&qword_1006457E8);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64LL));
    goto LABEL_24;
  }

  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v28, v29, v14);
LABEL_24:
  uint64_t v33 = v20[7];
  int v34 = &v12[v33];
  uint64_t v35 = &v13[v33];
  int v36 = v16(&v12[v33], 1LL, v14);
  int v37 = v16(v35, 1LL, v14);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v34, v35, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v34, 0LL, 1LL, v14);
      goto LABEL_30;
    }

    goto LABEL_29;
  }

  if (v37)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v34, v14);
LABEL_29:
    uint64_t v38 = sub_100183098(&qword_1006457E8);
    memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64LL));
    goto LABEL_30;
  }

  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v34, v35, v14);
LABEL_30:
  uint64_t v39 = v20[8];
  uint64_t v40 = &v12[v39];
  uint64_t v41 = &v13[v39];
  int v42 = v16(&v12[v39], 1LL, v14);
  int v43 = v16(v41, 1LL, v14);
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v40, v41, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v40, 0LL, 1LL, v14);
      goto LABEL_36;
    }

    goto LABEL_35;
  }

  if (v43)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v40, v14);
LABEL_35:
    uint64_t v44 = sub_100183098(&qword_1006457E8);
    memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64LL));
    goto LABEL_36;
  }

  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v40, v41, v14);
LABEL_36:
  uint64_t v45 = v20[9];
  int v46 = &v12[v45];
  uint64_t v47 = &v13[v45];
  int v48 = v16(&v12[v45], 1LL, v14);
  int v49 = v16(v47, 1LL, v14);
  if (v48)
  {
    if (!v49)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v46, v47, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v46, 0LL, 1LL, v14);
      goto LABEL_42;
    }

    goto LABEL_41;
  }

  if (v49)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v46, v14);
LABEL_41:
    uint64_t v50 = sub_100183098(&qword_1006457E8);
    memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64LL));
    goto LABEL_42;
  }

  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v46, v47, v14);
LABEL_42:
  uint64_t v51 = v20[10];
  uint64_t v52 = &v12[v51];
  uint64_t v53 = &v13[v51];
  int v54 = v16(&v12[v51], 1LL, v14);
  int v55 = v16(v53, 1LL, v14);
  if (v54)
  {
    if (!v55)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v52, v53, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v52, 0LL, 1LL, v14);
      goto LABEL_48;
    }

    goto LABEL_47;
  }

  if (v55)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v52, v14);
LABEL_47:
    uint64_t v56 = sub_100183098(&qword_1006457E8);
    memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64LL));
    goto LABEL_48;
  }

  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v52, v53, v14);
LABEL_48:
  uint64_t v57 = v20[11];
  int v58 = &v12[v57];
  uint64_t v59 = &v13[v57];
  int v60 = v16(&v12[v57], 1LL, v14);
  int v61 = v16(v59, 1LL, v14);
  if (v60)
  {
    if (!v61)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v58, v59, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v58, 0LL, 1LL, v14);
      goto LABEL_54;
    }

    goto LABEL_53;
  }

  if (v61)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v58, v14);
LABEL_53:
    uint64_t v62 = sub_100183098(&qword_1006457E8);
    memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64LL));
    goto LABEL_54;
  }

  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v58, v59, v14);
LABEL_54:
  uint64_t v63 = v20[12];
  uint64_t v64 = &v12[v63];
  uint64_t v65 = &v13[v63];
  int v66 = v16(&v12[v63], 1LL, v14);
  int v67 = v16(v65, 1LL, v14);
  if (v66)
  {
    if (!v67)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v64, v65, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v64, 0LL, 1LL, v14);
      goto LABEL_60;
    }

    goto LABEL_59;
  }

  if (v67)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v64, v14);
LABEL_59:
    uint64_t v68 = sub_100183098(&qword_1006457E8);
    memcpy(v64, v65, *(void *)(*(void *)(v68 - 8) + 64LL));
    goto LABEL_60;
  }

  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v64, v65, v14);
LABEL_60:
  v12[v20[13]] = v13[v20[13]];
  uint64_t v69 = v20[14];
  int v70 = &v12[v69];
  uint64_t v71 = &v13[v69];
  int v72 = v16(&v12[v69], 1LL, v14);
  int v73 = v16(v71, 1LL, v14);
  if (v72)
  {
    if (!v73)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v70, v71, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v70, 0LL, 1LL, v14);
      goto LABEL_66;
    }

    goto LABEL_65;
  }

  if (v73)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v70, v14);
LABEL_65:
    uint64_t v74 = sub_100183098(&qword_1006457E8);
    memcpy(v70, v71, *(void *)(*(void *)(v74 - 8) + 64LL));
    goto LABEL_66;
  }

  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v70, v71, v14);
LABEL_66:
  uint64_t v75 = v20[15];
  int v76 = &v12[v75];
  uint64_t v77 = &v13[v75];
  int v78 = v16(&v12[v75], 1LL, v14);
  int v79 = v16(v77, 1LL, v14);
  if (v78)
  {
    if (!v79)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v76, v77, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v76, 0LL, 1LL, v14);
      goto LABEL_72;
    }

    goto LABEL_71;
  }

  if (v79)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v76, v14);
LABEL_71:
    uint64_t v80 = sub_100183098(&qword_1006457E8);
    memcpy(v76, v77, *(void *)(*(void *)(v80 - 8) + 64LL));
    goto LABEL_72;
  }

  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v76, v77, v14);
LABEL_72:
  uint64_t v81 = v20[16];
  int v82 = &v12[v81];
  uint64_t v83 = &v13[v81];
  int v84 = v16(&v12[v81], 1LL, v14);
  int v85 = v16(v83, 1LL, v14);
  if (v84)
  {
    if (!v85)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v82, v83, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v82, 0LL, 1LL, v14);
      goto LABEL_78;
    }

    goto LABEL_77;
  }

  if (v85)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v82, v14);
LABEL_77:
    uint64_t v86 = sub_100183098(&qword_1006457E8);
    memcpy(v82, v83, *(void *)(*(void *)(v86 - 8) + 64LL));
    goto LABEL_78;
  }

  (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v82, v83, v14);
LABEL_78:
  uint64_t v87 = v20[17];
  int v88 = &v12[v87];
  uint64_t v89 = &v13[v87];
  int v90 = v16(&v12[v87], 1LL, v14);
  int v91 = v16(v89, 1LL, v14);
  if (!v90)
  {
    if (!v91)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v88, v89, v14);
      goto LABEL_84;
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v88, v14);
    goto LABEL_83;
  }

  if (v91)
  {
LABEL_83:
    uint64_t v92 = sub_100183098(&qword_1006457E8);
    memcpy(v88, v89, *(void *)(*(void *)(v92 - 8) + 64LL));
    goto LABEL_84;
  }

  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v88, v89, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v88, 0LL, 1LL, v14);
LABEL_84:
  uint64_t v93 = v20[18];
  int v94 = &v12[v93];
  uint64_t v95 = &v13[v93];
  *(_DWORD *)int v94 = *(_DWORD *)v95;
  v94[4] = v95[4];
  v12[v20[19]] = v13[v20[19]];
  uint64_t v96 = v20[20];
  uint64_t v97 = &v12[v96];
  uint64_t v98 = &v13[v96];
  uint64_t v100 = *(void *)v98;
  uint64_t v99 = *((void *)v98 + 1);
  uint64_t v101 = *((void *)v97 + 1);
  *(void *)uint64_t v97 = v100;
  *((void *)v97 + 1) = v99;
  swift_bridgeObjectRelease(v101);
  uint64_t v102 = v20[21];
  uint64_t v103 = &v12[v102];
  uint64_t v104 = &v13[v102];
  uint64_t v106 = *(void *)v104;
  uint64_t v105 = *((void *)v104 + 1);
  uint64_t v107 = *((void *)v103 + 1);
  *(void *)uint64_t v103 = v106;
  *((void *)v103 + 1) = v105;
  swift_bridgeObjectRelease(v107);
  uint64_t v108 = *(int *)(v111 + 32);
  uint64_t v109 = *(void **)((char *)a1 + v108);
  *(uint64_t *)((char *)a1 + v10_Block_object_dispose(va, 8) = *(uint64_t *)((char *)v112 + v108);

  *((_BYTE *)a1 + *(int *)(v111 + 36)) = *((_BYTE *)v112 + *(int *)(v111 + 36));
  return a1;
}

uint64_t sub_1001AA838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001AA844);
}

uint64_t sub_1001AA844(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for SDAuthenticationSessionMetrics(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 28)],  a2,  v8);
  }

uint64_t sub_1001AA8C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001AA8CC);
}

char *sub_1001AA8CC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for SDAuthenticationSessionMetrics(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 28)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1001AA940(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = "(";
  _DWORD v4[2] = &unk_1004CD600;
  uint64_t result = type metadata accessor for SDAuthenticationSessionMetrics(319LL);
  if (v3 <= 0x3F)
  {
    void v4[3] = *(void *)(result - 8) + 64LL;
    void v4[4] = &unk_1004CD618;
    v4[5] = &unk_1004CD630;
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1001AA9E0(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16LL) & ~(unint64_t)v4);
    swift_retain(v5);
  }

  else
  {
    uint64_t v8 = a2 + 1;
    __int128 v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    uint64_t v10 = v9;
    uint64_t v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_bridgeObjectRetain(v5);
    v11(a1 + 8, v8, v10);
    uint64_t v12 = a3[6];
    uint64_t v13 = (char *)(a1 + v12);
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for Date(0LL);
    uint64_t v16 = *(void *)(v15 - 8);
    int v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    int v94 = a3;
    if (v17(v14, 1LL, v15))
    {
      uint64_t v18 = sub_100183098(&qword_1006457E8);
      memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
    }

    uint64_t v19 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
    uint64_t v20 = v19[5];
    uint64_t v21 = &v13[v20];
    uint64_t v22 = &v14[v20];
    if (v17(&v14[v20], 1LL, v15))
    {
      uint64_t v23 = sub_100183098(&qword_1006457E8);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v22, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v21, 0LL, 1LL, v15);
    }

    uint64_t v24 = v19[6];
    int v25 = &v13[v24];
    uint64_t v26 = &v14[v24];
    if (v17(&v14[v24], 1LL, v15))
    {
      uint64_t v27 = sub_100183098(&qword_1006457E8);
      memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v25, v26, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v25, 0LL, 1LL, v15);
    }

    uint64_t v28 = v19[7];
    uint64_t v29 = &v13[v28];
    int v30 = &v14[v28];
    if (v17(&v14[v28], 1LL, v15))
    {
      uint64_t v31 = sub_100183098(&qword_1006457E8);
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v29, v30, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v29, 0LL, 1LL, v15);
    }

    uint64_t v32 = v19[8];
    uint64_t v33 = &v13[v32];
    int v34 = &v14[v32];
    if (v17(&v14[v32], 1LL, v15))
    {
      uint64_t v35 = sub_100183098(&qword_1006457E8);
      memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v33, v34, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v33, 0LL, 1LL, v15);
    }

    uint64_t v36 = v19[9];
    int v37 = &v13[v36];
    uint64_t v38 = &v14[v36];
    if (v17(&v14[v36], 1LL, v15))
    {
      uint64_t v39 = sub_100183098(&qword_1006457E8);
      memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v37, v38, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v37, 0LL, 1LL, v15);
    }

    uint64_t v40 = v19[10];
    uint64_t v41 = &v13[v40];
    int v42 = &v14[v40];
    if (v17(&v14[v40], 1LL, v15))
    {
      uint64_t v43 = sub_100183098(&qword_1006457E8);
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v41, v42, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v41, 0LL, 1LL, v15);
    }

    uint64_t v44 = v19[11];
    uint64_t v45 = &v13[v44];
    int v46 = &v14[v44];
    if (v17(&v14[v44], 1LL, v15))
    {
      uint64_t v47 = sub_100183098(&qword_1006457E8);
      memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v45, v46, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v45, 0LL, 1LL, v15);
    }

    uint64_t v48 = v19[12];
    int v49 = &v13[v48];
    uint64_t v50 = &v14[v48];
    if (v17(&v14[v48], 1LL, v15))
    {
      uint64_t v51 = sub_100183098(&qword_1006457E8);
      memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v49, v50, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v49, 0LL, 1LL, v15);
    }

    v13[v19[13]] = v14[v19[13]];
    uint64_t v52 = v19[14];
    uint64_t v53 = &v13[v52];
    int v54 = &v14[v52];
    if (v17(&v14[v52], 1LL, v15))
    {
      uint64_t v55 = sub_100183098(&qword_1006457E8);
      memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v53, v54, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v53, 0LL, 1LL, v15);
    }

    uint64_t v56 = v19[15];
    uint64_t v57 = &v13[v56];
    int v58 = &v14[v56];
    if (v17(&v14[v56], 1LL, v15))
    {
      uint64_t v59 = sub_100183098(&qword_1006457E8);
      memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v57, v58, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v57, 0LL, 1LL, v15);
    }

    uint64_t v60 = v19[16];
    int v61 = &v13[v60];
    uint64_t v62 = &v14[v60];
    if (v17(&v14[v60], 1LL, v15))
    {
      uint64_t v63 = sub_100183098(&qword_1006457E8);
      memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v61, v62, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v61, 0LL, 1LL, v15);
    }

    uint64_t v64 = v19[17];
    uint64_t v65 = &v13[v64];
    int v66 = &v14[v64];
    if (v17(&v14[v64], 1LL, v15))
    {
      uint64_t v67 = sub_100183098(&qword_1006457E8);
      memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v65, v66, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v65, 0LL, 1LL, v15);
    }

    uint64_t v68 = v19[18];
    uint64_t v69 = &v13[v68];
    int v70 = &v14[v68];
    *(_DWORD *)uint64_t v69 = *(_DWORD *)v70;
    v69[4] = v70[4];
    v13[v19[19]] = v14[v19[19]];
    uint64_t v71 = v19[20];
    int v72 = &v13[v71];
    int v73 = &v14[v71];
    uint64_t v74 = *((void *)v73 + 1);
    *(void *)int v72 = *(void *)v73;
    *((void *)v72 + 1) = v74;
    uint64_t v75 = v19[21];
    int v76 = &v13[v75];
    uint64_t v77 = &v14[v75];
    uint64_t v78 = *((void *)v77 + 1);
    *(void *)int v76 = *(void *)v77;
    *((void *)v76 + 1) = v78;
    uint64_t v79 = v94[7];
    uint64_t v80 = a1 + v79;
    uint64_t v81 = (uint64_t *)((char *)a2 + v79);
    unint64_t v82 = *(uint64_t *)((char *)a2 + v79 + 8);
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v78);
    if (v82 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v80 = *(_OWORD *)v81;
    }

    else
    {
      uint64_t v83 = *v81;
      sub_10019BA8C(*v81, v82);
      *(void *)uint64_t v80 = v83;
      *(void *)(v80 + _Block_object_dispose(va, 8) = v82;
    }

    uint64_t v84 = v94[8];
    int v85 = (uint64_t *)(a1 + v84);
    uint64_t v86 = (uint64_t *)((char *)a2 + v84);
    uint64_t v87 = *v86;
    unint64_t v88 = v86[1];
    sub_10019BA8C(*v86, v88);
    *int v85 = v87;
    v85[1] = v88;
    uint64_t v89 = v94[9];
    uint64_t v90 = v94[10];
    int v91 = *(void **)((char *)a2 + v89);
    *(void *)(a1 + v89) = v91;
    *(_BYTE *)(a1 + v90) = *((_BYTE *)a2 + v90);
    id v92 = v91;
  }

  return a1;
}

void sub_1001AB140(void *a1, int *a2)
{
  int v4 = a1 + 1;
  swift_bridgeObjectRelease(*a1);
  sub_10018709C(v4);
  uint64_t v5 = (char *)a1 + a2[6];
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  }
  __int128 v9 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v10 = &v5[v9[5]];
  if (!v8(v10, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  uint64_t v11 = &v5[v9[6]];
  if (!v8(v11, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  }
  uint64_t v12 = &v5[v9[7]];
  if (!v8(v12, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  }
  uint64_t v13 = &v5[v9[8]];
  if (!v8(v13, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  }
  uint64_t v14 = &v5[v9[9]];
  if (!v8(v14, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  }
  uint64_t v15 = &v5[v9[10]];
  if (!v8(v15, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
  }
  uint64_t v16 = &v5[v9[11]];
  if (!v8(v16, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
  }
  int v17 = &v5[v9[12]];
  if (!v8(v17, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
  }
  uint64_t v18 = &v5[v9[14]];
  if (!v8(v18, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
  }
  uint64_t v19 = &v5[v9[15]];
  if (!v8(v19, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
  }
  uint64_t v20 = &v5[v9[16]];
  if (!v8(v20, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
  }
  uint64_t v21 = &v5[v9[17]];
  if (!v8(v21, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v21, v6);
  }
  swift_bridgeObjectRelease(*(void *)&v5[v9[20] + 8]);
  swift_bridgeObjectRelease(*(void *)&v5[v9[21] + 8]);
  uint64_t v22 = (void *)((char *)a1 + a2[7]);
  unint64_t v23 = v22[1];
  if (v23 >> 60 != 15) {
    sub_100189B20(*v22, v23);
  }
  sub_100189B20(*(void *)((char *)a1 + a2[8]), *(void *)((char *)a1 + a2[8] + 8));
}

uint64_t sub_1001AB440(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(void *)a1 = *a2;
  uint64_t v7 = a2 + 1;
  __int128 v8 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v8;
  uint64_t v9 = v8;
  uint64_t v10 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v8 - 8);
  swift_bridgeObjectRetain(v6);
  v10(a1 + 8, v7, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  uint64_t v93 = a3;
  if (v16(v13, 1LL, v14))
  {
    uint64_t v17 = sub_100183098(&qword_1006457E8);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v19 = v18[5];
  uint64_t v20 = &v12[v19];
  uint64_t v21 = &v13[v19];
  if (v16(&v13[v19], 1LL, v14))
  {
    uint64_t v22 = sub_100183098(&qword_1006457E8);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v20, v21, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v20, 0LL, 1LL, v14);
  }

  uint64_t v23 = v18[6];
  uint64_t v24 = &v12[v23];
  int v25 = &v13[v23];
  if (v16(&v13[v23], 1LL, v14))
  {
    uint64_t v26 = sub_100183098(&qword_1006457E8);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v24, v25, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v24, 0LL, 1LL, v14);
  }

  uint64_t v27 = v18[7];
  uint64_t v28 = &v12[v27];
  uint64_t v29 = &v13[v27];
  if (v16(&v13[v27], 1LL, v14))
  {
    uint64_t v30 = sub_100183098(&qword_1006457E8);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v28, v29, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v28, 0LL, 1LL, v14);
  }

  uint64_t v31 = v18[8];
  uint64_t v32 = &v12[v31];
  uint64_t v33 = &v13[v31];
  if (v16(&v13[v31], 1LL, v14))
  {
    uint64_t v34 = sub_100183098(&qword_1006457E8);
    memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v32, v33, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v32, 0LL, 1LL, v14);
  }

  uint64_t v35 = v18[9];
  uint64_t v36 = &v12[v35];
  int v37 = &v13[v35];
  if (v16(&v13[v35], 1LL, v14))
  {
    uint64_t v38 = sub_100183098(&qword_1006457E8);
    memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v36, v37, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v36, 0LL, 1LL, v14);
  }

  uint64_t v39 = v18[10];
  uint64_t v40 = &v12[v39];
  uint64_t v41 = &v13[v39];
  if (v16(&v13[v39], 1LL, v14))
  {
    uint64_t v42 = sub_100183098(&qword_1006457E8);
    memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v40, v41, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v40, 0LL, 1LL, v14);
  }

  uint64_t v43 = v18[11];
  uint64_t v44 = &v12[v43];
  uint64_t v45 = &v13[v43];
  if (v16(&v13[v43], 1LL, v14))
  {
    uint64_t v46 = sub_100183098(&qword_1006457E8);
    memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v44, v45, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v44, 0LL, 1LL, v14);
  }

  uint64_t v47 = v18[12];
  uint64_t v48 = &v12[v47];
  int v49 = &v13[v47];
  if (v16(&v13[v47], 1LL, v14))
  {
    uint64_t v50 = sub_100183098(&qword_1006457E8);
    memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v48, v49, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v48, 0LL, 1LL, v14);
  }

  v12[v18[13]] = v13[v18[13]];
  uint64_t v51 = v18[14];
  uint64_t v52 = &v12[v51];
  uint64_t v53 = &v13[v51];
  if (v16(&v13[v51], 1LL, v14))
  {
    uint64_t v54 = sub_100183098(&qword_1006457E8);
    memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v52, v53, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v52, 0LL, 1LL, v14);
  }

  uint64_t v55 = v18[15];
  uint64_t v56 = &v12[v55];
  uint64_t v57 = &v13[v55];
  if (v16(&v13[v55], 1LL, v14))
  {
    uint64_t v58 = sub_100183098(&qword_1006457E8);
    memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v56, v57, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v56, 0LL, 1LL, v14);
  }

  uint64_t v59 = v18[16];
  uint64_t v60 = &v12[v59];
  int v61 = &v13[v59];
  if (v16(&v13[v59], 1LL, v14))
  {
    uint64_t v62 = sub_100183098(&qword_1006457E8);
    memcpy(v60, v61, *(void *)(*(void *)(v62 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v60, v61, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v60, 0LL, 1LL, v14);
  }

  uint64_t v63 = v18[17];
  uint64_t v64 = &v12[v63];
  uint64_t v65 = &v13[v63];
  if (v16(&v13[v63], 1LL, v14))
  {
    uint64_t v66 = sub_100183098(&qword_1006457E8);
    memcpy(v64, v65, *(void *)(*(void *)(v66 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v64, v65, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v64, 0LL, 1LL, v14);
  }

  uint64_t v67 = v18[18];
  uint64_t v68 = &v12[v67];
  uint64_t v69 = &v13[v67];
  *(_DWORD *)uint64_t v68 = *(_DWORD *)v69;
  v68[4] = v69[4];
  v12[v18[19]] = v13[v18[19]];
  uint64_t v70 = v18[20];
  uint64_t v71 = &v12[v70];
  int v72 = &v13[v70];
  uint64_t v73 = *((void *)v72 + 1);
  *(void *)uint64_t v71 = *(void *)v72;
  *((void *)v71 + 1) = v73;
  uint64_t v74 = v18[21];
  uint64_t v75 = &v12[v74];
  int v76 = &v13[v74];
  uint64_t v77 = *((void *)v76 + 1);
  *(void *)uint64_t v75 = *(void *)v76;
  *((void *)v75 + 1) = v77;
  uint64_t v78 = v93[7];
  uint64_t v79 = a1 + v78;
  uint64_t v80 = (uint64_t *)((char *)a2 + v78);
  unint64_t v81 = *(uint64_t *)((char *)a2 + v78 + 8);
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v77);
  if (v81 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v79 = *(_OWORD *)v80;
  }

  else
  {
    uint64_t v82 = *v80;
    sub_10019BA8C(*v80, v81);
    *(void *)uint64_t v79 = v82;
    *(void *)(v79 + _Block_object_dispose(va, 8) = v81;
  }

  uint64_t v83 = v93[8];
  uint64_t v84 = (uint64_t *)(a1 + v83);
  int v85 = (uint64_t *)((char *)a2 + v83);
  uint64_t v86 = *v85;
  unint64_t v87 = v85[1];
  sub_10019BA8C(*v85, v87);
  *uint64_t v84 = v86;
  v84[1] = v87;
  uint64_t v88 = v93[9];
  uint64_t v89 = v93[10];
  uint64_t v90 = *(void **)((char *)a2 + v88);
  *(void *)(a1 + v8_Block_object_dispose(va, 8) = v90;
  *(_BYTE *)(a1 + v89) = *((_BYTE *)a2 + v89);
  id v91 = v90;
  return a1;
}

void *sub_1001ABB7C(void *a1, void *a2, int *a3)
{
  uint64_t v7 = a2 + 1;
  uint64_t v6 = *a2;
  uint64_t v8 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v8);
  sub_10019DB24(a1 + 1, v7);
  uint64_t v125 = a3;
  unint64_t v126 = a2;
  uint64_t v9 = a3[6];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14(v11, 1LL, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    uint64_t v17 = sub_100183098(&qword_1006457E8);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  uint64_t v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v19 = v18[5];
  uint64_t v20 = &v10[v19];
  uint64_t v21 = &v11[v19];
  int v22 = v14(&v10[v19], 1LL, v12);
  int v23 = v14(v21, 1LL, v12);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v20, v21, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v20, 0LL, 1LL, v12);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
LABEL_12:
    uint64_t v24 = sub_100183098(&qword_1006457E8);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v20, v21, v12);
LABEL_13:
  uint64_t v25 = v18[6];
  uint64_t v26 = &v10[v25];
  uint64_t v27 = &v11[v25];
  int v28 = v14(&v10[v25], 1LL, v12);
  int v29 = v14(v27, 1LL, v12);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v26, v27, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v26, 0LL, 1LL, v12);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v26, v12);
LABEL_18:
    uint64_t v30 = sub_100183098(&qword_1006457E8);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v26, v27, v12);
LABEL_19:
  uint64_t v31 = v18[7];
  uint64_t v32 = &v10[v31];
  uint64_t v33 = &v11[v31];
  int v34 = v14(&v10[v31], 1LL, v12);
  int v35 = v14(v33, 1LL, v12);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v32, v33, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v32, 0LL, 1LL, v12);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v32, v12);
LABEL_24:
    uint64_t v36 = sub_100183098(&qword_1006457E8);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v32, v33, v12);
LABEL_25:
  uint64_t v37 = v18[8];
  uint64_t v38 = &v10[v37];
  uint64_t v39 = &v11[v37];
  int v40 = v14(&v10[v37], 1LL, v12);
  int v41 = v14(v39, 1LL, v12);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v38, v39, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v38, 0LL, 1LL, v12);
      goto LABEL_31;
    }

    goto LABEL_30;
  }

  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v38, v12);
LABEL_30:
    uint64_t v42 = sub_100183098(&qword_1006457E8);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64LL));
    goto LABEL_31;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v38, v39, v12);
LABEL_31:
  uint64_t v43 = v18[9];
  uint64_t v44 = &v10[v43];
  uint64_t v45 = &v11[v43];
  int v46 = v14(&v10[v43], 1LL, v12);
  int v47 = v14(v45, 1LL, v12);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v44, v45, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v44, 0LL, 1LL, v12);
      goto LABEL_37;
    }

    goto LABEL_36;
  }

  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v44, v12);
LABEL_36:
    uint64_t v48 = sub_100183098(&qword_1006457E8);
    memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64LL));
    goto LABEL_37;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v44, v45, v12);
LABEL_37:
  uint64_t v49 = v18[10];
  uint64_t v50 = &v10[v49];
  uint64_t v51 = &v11[v49];
  int v52 = v14(&v10[v49], 1LL, v12);
  int v53 = v14(v51, 1LL, v12);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v50, v51, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v50, 0LL, 1LL, v12);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v50, v12);
LABEL_42:
    uint64_t v54 = sub_100183098(&qword_1006457E8);
    memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64LL));
    goto LABEL_43;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v50, v51, v12);
LABEL_43:
  uint64_t v55 = v18[11];
  uint64_t v56 = &v10[v55];
  uint64_t v57 = &v11[v55];
  int v58 = v14(&v10[v55], 1LL, v12);
  int v59 = v14(v57, 1LL, v12);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v56, v57, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v56, 0LL, 1LL, v12);
      goto LABEL_49;
    }

    goto LABEL_48;
  }

  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v56, v12);
LABEL_48:
    uint64_t v60 = sub_100183098(&qword_1006457E8);
    memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64LL));
    goto LABEL_49;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v56, v57, v12);
LABEL_49:
  uint64_t v61 = v18[12];
  uint64_t v62 = &v10[v61];
  uint64_t v63 = &v11[v61];
  int v64 = v14(&v10[v61], 1LL, v12);
  int v65 = v14(v63, 1LL, v12);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v62, v63, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v62, 0LL, 1LL, v12);
      goto LABEL_55;
    }

    goto LABEL_54;
  }

  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v62, v12);
LABEL_54:
    uint64_t v66 = sub_100183098(&qword_1006457E8);
    memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64LL));
    goto LABEL_55;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v62, v63, v12);
LABEL_55:
  v10[v18[13]] = v11[v18[13]];
  uint64_t v67 = v18[14];
  uint64_t v68 = &v10[v67];
  uint64_t v69 = &v11[v67];
  int v70 = v14(&v10[v67], 1LL, v12);
  int v71 = v14(v69, 1LL, v12);
  if (v70)
  {
    if (!v71)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v68, v69, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v68, 0LL, 1LL, v12);
      goto LABEL_61;
    }

    goto LABEL_60;
  }

  if (v71)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v68, v12);
LABEL_60:
    uint64_t v72 = sub_100183098(&qword_1006457E8);
    memcpy(v68, v69, *(void *)(*(void *)(v72 - 8) + 64LL));
    goto LABEL_61;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v68, v69, v12);
LABEL_61:
  uint64_t v73 = v18[15];
  uint64_t v74 = &v10[v73];
  uint64_t v75 = &v11[v73];
  int v76 = v14(&v10[v73], 1LL, v12);
  int v77 = v14(v75, 1LL, v12);
  if (v76)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v74, v75, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v74, 0LL, 1LL, v12);
      goto LABEL_67;
    }

    goto LABEL_66;
  }

  if (v77)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v74, v12);
LABEL_66:
    uint64_t v78 = sub_100183098(&qword_1006457E8);
    memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64LL));
    goto LABEL_67;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v74, v75, v12);
LABEL_67:
  uint64_t v79 = v18[16];
  uint64_t v80 = &v10[v79];
  unint64_t v81 = &v11[v79];
  int v82 = v14(&v10[v79], 1LL, v12);
  int v83 = v14(v81, 1LL, v12);
  if (v82)
  {
    if (!v83)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v80, v81, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v80, 0LL, 1LL, v12);
      goto LABEL_73;
    }

    goto LABEL_72;
  }

  if (v83)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v80, v12);
LABEL_72:
    uint64_t v84 = sub_100183098(&qword_1006457E8);
    memcpy(v80, v81, *(void *)(*(void *)(v84 - 8) + 64LL));
    goto LABEL_73;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v80, v81, v12);
LABEL_73:
  uint64_t v85 = v18[17];
  uint64_t v86 = &v10[v85];
  unint64_t v87 = &v11[v85];
  int v88 = v14(&v10[v85], 1LL, v12);
  int v89 = v14(v87, 1LL, v12);
  if (v88)
  {
    if (!v89)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v86, v87, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v86, 0LL, 1LL, v12);
      goto LABEL_79;
    }

    goto LABEL_78;
  }

  if (v89)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v86, v12);
LABEL_78:
    uint64_t v90 = sub_100183098(&qword_1006457E8);
    memcpy(v86, v87, *(void *)(*(void *)(v90 - 8) + 64LL));
    goto LABEL_79;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v86, v87, v12);
LABEL_79:
  uint64_t v91 = v18[18];
  id v92 = &v10[v91];
  uint64_t v93 = &v11[v91];
  int v94 = *(_DWORD *)v93;
  v92[4] = v93[4];
  *(_DWORD *)id v92 = v94;
  v10[v18[19]] = v11[v18[19]];
  uint64_t v95 = v18[20];
  uint64_t v96 = &v10[v95];
  uint64_t v97 = &v11[v95];
  *(void *)uint64_t v96 = *(void *)v97;
  uint64_t v98 = *((void *)v97 + 1);
  uint64_t v99 = *((void *)v96 + 1);
  *((void *)v96 + 1) = v98;
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRelease(v99);
  uint64_t v100 = v18[21];
  uint64_t v101 = &v10[v100];
  uint64_t v102 = &v11[v100];
  *(void *)uint64_t v101 = *(void *)v102;
  uint64_t v103 = *((void *)v102 + 1);
  uint64_t v104 = *((void *)v101 + 1);
  *((void *)v101 + 1) = v103;
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRelease(v104);
  uint64_t v105 = v125[7];
  uint64_t v106 = (void *)((char *)a1 + v105);
  uint64_t v107 = (void *)((char *)v126 + v105);
  unint64_t v108 = *(void *)((char *)v126 + v105 + 8);
  if (*(void *)((char *)a1 + v105 + 8) >> 60 != 15LL)
  {
    if (v108 >> 60 != 15)
    {
      uint64_t v110 = *v107;
      sub_10019BA8C(*v107, v108);
      uint64_t v111 = *v106;
      unint64_t v112 = v106[1];
      *uint64_t v106 = v110;
      v106[1] = v108;
      sub_100189B20(v111, v112);
      goto LABEL_86;
    }

    sub_10019DC8C((uint64_t)v106);
    goto LABEL_84;
  }

  if (v108 >> 60 == 15)
  {
LABEL_84:
    *(_OWORD *)uint64_t v106 = *(_OWORD *)v107;
    goto LABEL_86;
  }

  uint64_t v109 = *v107;
  sub_10019BA8C(*v107, v108);
  *uint64_t v106 = v109;
  v106[1] = v108;
LABEL_86:
  uint64_t v113 = v125[8];
  uint64_t v114 = (void *)((char *)a1 + v113);
  uint64_t v115 = (void *)((char *)v126 + v113);
  uint64_t v116 = *v115;
  unint64_t v117 = v115[1];
  sub_10019BA8C(*v115, v117);
  uint64_t v118 = *v114;
  unint64_t v119 = v114[1];
  *uint64_t v114 = v116;
  v114[1] = v117;
  sub_100189B20(v118, v119);
  uint64_t v120 = v125[9];
  int v121 = *(void **)((char *)a1 + v120);
  uint64_t v122 = *(void **)((char *)v126 + v120);
  *(void *)((char *)a1 + v120) = v122;
  id v123 = v122;

  *((_BYTE *)a1 + v125[10]) = *((_BYTE *)v126 + v125[10]);
  return a1;
}

uint64_t sub_1001AC69C(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v5 = a3[6];
  uint64_t v6 = (char *)(a1 + v5);
  uint64_t v7 = (char *)(a2 + v5);
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1LL, v8))
  {
    uint64_t v11 = sub_100183098(&qword_1006457E8);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0LL, 1LL, v8);
  }

  uint64_t v12 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v13 = v12[5];
  uint64_t v14 = &v6[v13];
  int v15 = &v7[v13];
  if (v10(&v7[v13], 1LL, v8))
  {
    uint64_t v16 = sub_100183098(&qword_1006457E8);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v15, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v14, 0LL, 1LL, v8);
  }

  uint64_t v17 = v12[6];
  uint64_t v18 = &v6[v17];
  uint64_t v19 = &v7[v17];
  if (v10(&v7[v17], 1LL, v8))
  {
    uint64_t v20 = sub_100183098(&qword_1006457E8);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v18, v19, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v18, 0LL, 1LL, v8);
  }

  uint64_t v21 = v12[7];
  int v22 = &v6[v21];
  int v23 = &v7[v21];
  if (v10(&v7[v21], 1LL, v8))
  {
    uint64_t v24 = sub_100183098(&qword_1006457E8);
    memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v22, v23, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v22, 0LL, 1LL, v8);
  }

  uint64_t v25 = v12[8];
  uint64_t v26 = &v6[v25];
  uint64_t v27 = &v7[v25];
  if (v10(&v7[v25], 1LL, v8))
  {
    uint64_t v28 = sub_100183098(&qword_1006457E8);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v26, v27, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v26, 0LL, 1LL, v8);
  }

  uint64_t v29 = v12[9];
  uint64_t v30 = &v6[v29];
  uint64_t v31 = &v7[v29];
  if (v10(&v7[v29], 1LL, v8))
  {
    uint64_t v32 = sub_100183098(&qword_1006457E8);
    memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v30, v31, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v30, 0LL, 1LL, v8);
  }

  uint64_t v33 = v12[10];
  int v34 = &v6[v33];
  int v35 = &v7[v33];
  if (v10(&v7[v33], 1LL, v8))
  {
    uint64_t v36 = sub_100183098(&qword_1006457E8);
    memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v34, v35, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v34, 0LL, 1LL, v8);
  }

  uint64_t v37 = v12[11];
  uint64_t v38 = &v6[v37];
  uint64_t v39 = &v7[v37];
  if (v10(&v7[v37], 1LL, v8))
  {
    uint64_t v40 = sub_100183098(&qword_1006457E8);
    memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v38, v39, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v38, 0LL, 1LL, v8);
  }

  uint64_t v41 = v12[12];
  uint64_t v42 = &v6[v41];
  uint64_t v43 = &v7[v41];
  if (v10(&v7[v41], 1LL, v8))
  {
    uint64_t v44 = sub_100183098(&qword_1006457E8);
    memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v42, v43, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v42, 0LL, 1LL, v8);
  }

  v6[v12[13]] = v7[v12[13]];
  uint64_t v45 = v12[14];
  int v46 = &v6[v45];
  int v47 = &v7[v45];
  if (v10(&v7[v45], 1LL, v8))
  {
    uint64_t v48 = sub_100183098(&qword_1006457E8);
    memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v46, v47, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v46, 0LL, 1LL, v8);
  }

  uint64_t v49 = v12[15];
  uint64_t v50 = &v6[v49];
  uint64_t v51 = &v7[v49];
  if (v10(&v7[v49], 1LL, v8))
  {
    uint64_t v52 = sub_100183098(&qword_1006457E8);
    memcpy(v50, v51, *(void *)(*(void *)(v52 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v50, v51, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v50, 0LL, 1LL, v8);
  }

  uint64_t v53 = v12[16];
  uint64_t v54 = &v6[v53];
  uint64_t v55 = &v7[v53];
  if (v10(&v7[v53], 1LL, v8))
  {
    uint64_t v56 = sub_100183098(&qword_1006457E8);
    memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v54, v55, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v54, 0LL, 1LL, v8);
  }

  uint64_t v57 = v12[17];
  int v58 = &v6[v57];
  int v59 = &v7[v57];
  if (v10(&v7[v57], 1LL, v8))
  {
    uint64_t v60 = sub_100183098(&qword_1006457E8);
    memcpy(v58, v59, *(void *)(*(void *)(v60 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v58, v59, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v58, 0LL, 1LL, v8);
  }

  uint64_t v61 = v12[18];
  uint64_t v62 = &v6[v61];
  uint64_t v63 = &v7[v61];
  *(_DWORD *)uint64_t v62 = *(_DWORD *)v63;
  v62[4] = v63[4];
  v6[v12[19]] = v7[v12[19]];
  *(_OWORD *)&v6[v12[20]] = *(_OWORD *)&v7[v12[20]];
  *(_OWORD *)&v6[v12[21]] = *(_OWORD *)&v7[v12[21]];
  uint64_t v64 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v64) = *(_OWORD *)(a2 + v64);
  uint64_t v65 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v65) = *(_BYTE *)(a2 + v65);
  return a1;
}

uint64_t *sub_1001ACD54(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  sub_10018709C(a1 + 1);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  a1[5] = a2[5];
  uint64_t v116 = a3;
  unint64_t v117 = a2;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100183098(&qword_1006457E8);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v17 = v16[5];
  uint64_t v18 = &v8[v17];
  uint64_t v19 = &v9[v17];
  int v20 = v12(&v8[v17], 1LL, v10);
  int v21 = v12(v19, 1LL, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v19, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v18, 0LL, 1LL, v10);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_12:
    uint64_t v22 = sub_100183098(&qword_1006457E8);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v18, v19, v10);
LABEL_13:
  uint64_t v23 = v16[6];
  uint64_t v24 = &v8[v23];
  uint64_t v25 = &v9[v23];
  int v26 = v12(&v8[v23], 1LL, v10);
  int v27 = v12(v25, 1LL, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v24, v25, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v24, 0LL, 1LL, v10);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
LABEL_18:
    uint64_t v28 = sub_100183098(&qword_1006457E8);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v24, v25, v10);
LABEL_19:
  uint64_t v29 = v16[7];
  uint64_t v30 = &v8[v29];
  uint64_t v31 = &v9[v29];
  int v32 = v12(&v8[v29], 1LL, v10);
  int v33 = v12(v31, 1LL, v10);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v30, v31, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v30, 0LL, 1LL, v10);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
LABEL_24:
    uint64_t v34 = sub_100183098(&qword_1006457E8);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v30, v31, v10);
LABEL_25:
  uint64_t v35 = v16[8];
  uint64_t v36 = &v8[v35];
  uint64_t v37 = &v9[v35];
  int v38 = v12(&v8[v35], 1LL, v10);
  int v39 = v12(v37, 1LL, v10);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v36, v37, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v36, 0LL, 1LL, v10);
      goto LABEL_31;
    }

    goto LABEL_30;
  }

  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
LABEL_30:
    uint64_t v40 = sub_100183098(&qword_1006457E8);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64LL));
    goto LABEL_31;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v36, v37, v10);
LABEL_31:
  uint64_t v41 = v16[9];
  uint64_t v42 = &v8[v41];
  uint64_t v43 = &v9[v41];
  int v44 = v12(&v8[v41], 1LL, v10);
  int v45 = v12(v43, 1LL, v10);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v42, v43, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v42, 0LL, 1LL, v10);
      goto LABEL_37;
    }

    goto LABEL_36;
  }

  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
LABEL_36:
    uint64_t v46 = sub_100183098(&qword_1006457E8);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64LL));
    goto LABEL_37;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v42, v43, v10);
LABEL_37:
  uint64_t v47 = v16[10];
  uint64_t v48 = &v8[v47];
  uint64_t v49 = &v9[v47];
  int v50 = v12(&v8[v47], 1LL, v10);
  int v51 = v12(v49, 1LL, v10);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v48, v49, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v48, 0LL, 1LL, v10);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
LABEL_42:
    uint64_t v52 = sub_100183098(&qword_1006457E8);
    memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64LL));
    goto LABEL_43;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v48, v49, v10);
LABEL_43:
  uint64_t v53 = v16[11];
  uint64_t v54 = &v8[v53];
  uint64_t v55 = &v9[v53];
  int v56 = v12(&v8[v53], 1LL, v10);
  int v57 = v12(v55, 1LL, v10);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v54, v55, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v54, 0LL, 1LL, v10);
      goto LABEL_49;
    }

    goto LABEL_48;
  }

  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v10);
LABEL_48:
    uint64_t v58 = sub_100183098(&qword_1006457E8);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64LL));
    goto LABEL_49;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v54, v55, v10);
LABEL_49:
  uint64_t v59 = v16[12];
  uint64_t v60 = &v8[v59];
  uint64_t v61 = &v9[v59];
  int v62 = v12(&v8[v59], 1LL, v10);
  int v63 = v12(v61, 1LL, v10);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v60, v61, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v60, 0LL, 1LL, v10);
      goto LABEL_55;
    }

    goto LABEL_54;
  }

  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v60, v10);
LABEL_54:
    uint64_t v64 = sub_100183098(&qword_1006457E8);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64LL));
    goto LABEL_55;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v60, v61, v10);
LABEL_55:
  v8[v16[13]] = v9[v16[13]];
  uint64_t v65 = v16[14];
  uint64_t v66 = &v8[v65];
  uint64_t v67 = &v9[v65];
  int v68 = v12(&v8[v65], 1LL, v10);
  int v69 = v12(v67, 1LL, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v66, v67, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v66, 0LL, 1LL, v10);
      goto LABEL_61;
    }

    goto LABEL_60;
  }

  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v10);
LABEL_60:
    uint64_t v70 = sub_100183098(&qword_1006457E8);
    memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64LL));
    goto LABEL_61;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v66, v67, v10);
LABEL_61:
  uint64_t v71 = v16[15];
  uint64_t v72 = &v8[v71];
  uint64_t v73 = &v9[v71];
  int v74 = v12(&v8[v71], 1LL, v10);
  int v75 = v12(v73, 1LL, v10);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v72, v73, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v72, 0LL, 1LL, v10);
      goto LABEL_67;
    }

    goto LABEL_66;
  }

  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
LABEL_66:
    uint64_t v76 = sub_100183098(&qword_1006457E8);
    memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64LL));
    goto LABEL_67;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v72, v73, v10);
LABEL_67:
  uint64_t v77 = v16[16];
  uint64_t v78 = &v8[v77];
  uint64_t v79 = &v9[v77];
  int v80 = v12(&v8[v77], 1LL, v10);
  int v81 = v12(v79, 1LL, v10);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v78, v79, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v78, 0LL, 1LL, v10);
      goto LABEL_73;
    }

    goto LABEL_72;
  }

  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_72:
    uint64_t v82 = sub_100183098(&qword_1006457E8);
    memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64LL));
    goto LABEL_73;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v78, v79, v10);
LABEL_73:
  uint64_t v83 = v16[17];
  uint64_t v84 = &v8[v83];
  uint64_t v85 = &v9[v83];
  int v86 = v12(&v8[v83], 1LL, v10);
  int v87 = v12(v85, 1LL, v10);
  if (v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v84, v85, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v84, 0LL, 1LL, v10);
      goto LABEL_79;
    }

    goto LABEL_78;
  }

  if (v87)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v84, v10);
LABEL_78:
    uint64_t v88 = sub_100183098(&qword_1006457E8);
    memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64LL));
    goto LABEL_79;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v84, v85, v10);
LABEL_79:
  uint64_t v89 = v16[18];
  uint64_t v90 = &v8[v89];
  uint64_t v91 = &v9[v89];
  *(_DWORD *)uint64_t v90 = *(_DWORD *)v91;
  v90[4] = v91[4];
  v8[v16[19]] = v9[v16[19]];
  uint64_t v92 = v16[20];
  uint64_t v93 = &v8[v92];
  int v94 = &v9[v92];
  uint64_t v96 = *(void *)v94;
  uint64_t v95 = *((void *)v94 + 1);
  uint64_t v97 = *((void *)v93 + 1);
  *(void *)uint64_t v93 = v96;
  *((void *)v93 + 1) = v95;
  swift_bridgeObjectRelease(v97);
  uint64_t v98 = v16[21];
  uint64_t v99 = &v8[v98];
  uint64_t v100 = &v9[v98];
  uint64_t v102 = *(void *)v100;
  uint64_t v101 = *((void *)v100 + 1);
  uint64_t v103 = *((void *)v99 + 1);
  *(void *)uint64_t v99 = v102;
  *((void *)v99 + 1) = v101;
  swift_bridgeObjectRelease(v103);
  uint64_t v104 = v116[7];
  uint64_t v105 = (uint64_t *)((char *)a1 + v104);
  uint64_t v106 = (uint64_t *)((char *)v117 + v104);
  unint64_t v107 = *(uint64_t *)((char *)a1 + v104 + 8);
  if (v107 >> 60 != 15)
  {
    unint64_t v108 = v106[1];
    if (v108 >> 60 != 15)
    {
      uint64_t v109 = *v105;
      *uint64_t v105 = *v106;
      v105[1] = v108;
      sub_100189B20(v109, v107);
      goto LABEL_84;
    }

    sub_10019DC8C((uint64_t)v105);
  }

  *(_OWORD *)uint64_t v105 = *(_OWORD *)v106;
LABEL_84:
  uint64_t v110 = v116[8];
  uint64_t v111 = *(uint64_t *)((char *)a1 + v110);
  unint64_t v112 = *(uint64_t *)((char *)a1 + v110 + 8);
  *(_OWORD *)((char *)a1 + v110) = *(_OWORD *)((char *)v117 + v110);
  sub_100189B20(v111, v112);
  uint64_t v113 = v116[9];
  uint64_t v114 = *(void **)((char *)a1 + v113);
  *(uint64_t *)((char *)a1 + v113) = *(uint64_t *)((char *)v117 + v113);

  *((_BYTE *)a1 + v116[10]) = *((_BYTE *)v117 + v116[10]);
  return a1;
}

uint64_t sub_1001AD814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001AD820);
}

uint64_t sub_1001AD824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001AD830);
}

uint64_t sub_1001AD834(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = "(";
  uint64_t result = type metadata accessor for SDAuthenticationSessionMetrics(319LL);
  if (v3 <= 0x3F)
  {
    _DWORD v4[2] = *(void *)(result - 8) + 64LL;
    void v4[3] = &unk_1004CD600;
    void v4[4] = &unk_1004CD7D8;
    v4[5] = &unk_1004CD618;
    void v4[6] = &unk_1004CD630;
    swift_initStructMetadata(a1, 256LL, 7LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1001AD8F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001AD900);
}

uint64_t sub_1001AD904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001AD910);
}

ValueMetadata *_s15MacApprovePhoneVMa()
{
  return &_s15MacApprovePhoneVN;
}

uint64_t sub_1001AD928(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16LL) & ~(unint64_t)v4);
    swift_retain(v5);
  }

  else
  {
    uint64_t v8 = a2 + 1;
    __int128 v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    uint64_t v10 = v9;
    uint64_t v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_bridgeObjectRetain(v5);
    v11(a1 + 8, v8, v10);
    uint64_t v12 = a3[6];
    int v13 = (char *)(a1 + v12);
    int v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for Date(0LL);
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    uint64_t v89 = a3;
    if (v17(v14, 1LL, v15))
    {
      uint64_t v18 = sub_100183098(&qword_1006457E8);
      memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
    }

    uint64_t v19 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
    uint64_t v20 = v19[5];
    int v21 = &v13[v20];
    uint64_t v22 = &v14[v20];
    if (v17(&v14[v20], 1LL, v15))
    {
      uint64_t v23 = sub_100183098(&qword_1006457E8);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v22, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v21, 0LL, 1LL, v15);
    }

    uint64_t v24 = v19[6];
    uint64_t v25 = &v13[v24];
    int v26 = &v14[v24];
    if (v17(&v14[v24], 1LL, v15))
    {
      uint64_t v27 = sub_100183098(&qword_1006457E8);
      memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v25, v26, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v25, 0LL, 1LL, v15);
    }

    uint64_t v28 = v19[7];
    uint64_t v29 = &v13[v28];
    uint64_t v30 = &v14[v28];
    if (v17(&v14[v28], 1LL, v15))
    {
      uint64_t v31 = sub_100183098(&qword_1006457E8);
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v29, v30, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v29, 0LL, 1LL, v15);
    }

    uint64_t v32 = v19[8];
    int v33 = &v13[v32];
    uint64_t v34 = &v14[v32];
    if (v17(&v14[v32], 1LL, v15))
    {
      uint64_t v35 = sub_100183098(&qword_1006457E8);
      memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v33, v34, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v33, 0LL, 1LL, v15);
    }

    uint64_t v36 = v19[9];
    uint64_t v37 = &v13[v36];
    int v38 = &v14[v36];
    if (v17(&v14[v36], 1LL, v15))
    {
      uint64_t v39 = sub_100183098(&qword_1006457E8);
      memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v37, v38, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v37, 0LL, 1LL, v15);
    }

    uint64_t v40 = v19[10];
    uint64_t v41 = &v13[v40];
    uint64_t v42 = &v14[v40];
    if (v17(&v14[v40], 1LL, v15))
    {
      uint64_t v43 = sub_100183098(&qword_1006457E8);
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v41, v42, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v41, 0LL, 1LL, v15);
    }

    uint64_t v44 = v19[11];
    int v45 = &v13[v44];
    uint64_t v46 = &v14[v44];
    if (v17(&v14[v44], 1LL, v15))
    {
      uint64_t v47 = sub_100183098(&qword_1006457E8);
      memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v45, v46, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v45, 0LL, 1LL, v15);
    }

    uint64_t v48 = v19[12];
    uint64_t v49 = &v13[v48];
    int v50 = &v14[v48];
    if (v17(&v14[v48], 1LL, v15))
    {
      uint64_t v51 = sub_100183098(&qword_1006457E8);
      memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v49, v50, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v49, 0LL, 1LL, v15);
    }

    v13[v19[13]] = v14[v19[13]];
    uint64_t v52 = v19[14];
    uint64_t v53 = &v13[v52];
    uint64_t v54 = &v14[v52];
    if (v17(&v14[v52], 1LL, v15))
    {
      uint64_t v55 = sub_100183098(&qword_1006457E8);
      memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v53, v54, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v53, 0LL, 1LL, v15);
    }

    uint64_t v56 = v19[15];
    int v57 = &v13[v56];
    uint64_t v58 = &v14[v56];
    if (v17(&v14[v56], 1LL, v15))
    {
      uint64_t v59 = sub_100183098(&qword_1006457E8);
      memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v57, v58, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v57, 0LL, 1LL, v15);
    }

    uint64_t v60 = v19[16];
    uint64_t v61 = &v13[v60];
    int v62 = &v14[v60];
    if (v17(&v14[v60], 1LL, v15))
    {
      uint64_t v63 = sub_100183098(&qword_1006457E8);
      memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v61, v62, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v61, 0LL, 1LL, v15);
    }

    uint64_t v64 = v19[17];
    uint64_t v65 = &v13[v64];
    uint64_t v66 = &v14[v64];
    if (v17(&v14[v64], 1LL, v15))
    {
      uint64_t v67 = sub_100183098(&qword_1006457E8);
      memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v65, v66, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v65, 0LL, 1LL, v15);
    }

    uint64_t v68 = v19[18];
    int v69 = &v13[v68];
    uint64_t v70 = &v14[v68];
    *(_DWORD *)int v69 = *(_DWORD *)v70;
    v69[4] = v70[4];
    v13[v19[19]] = v14[v19[19]];
    uint64_t v71 = v19[20];
    uint64_t v72 = &v13[v71];
    uint64_t v73 = &v14[v71];
    uint64_t v74 = *((void *)v73 + 1);
    *(void *)uint64_t v72 = *(void *)v73;
    *((void *)v72 + 1) = v74;
    uint64_t v75 = v19[21];
    uint64_t v76 = &v13[v75];
    uint64_t v77 = &v14[v75];
    uint64_t v78 = *((void *)v77 + 1);
    *(void *)uint64_t v76 = *(void *)v77;
    *((void *)v76 + 1) = v78;
    uint64_t v79 = v89[7];
    int v80 = (uint64_t *)(a1 + v79);
    int v81 = (uint64_t *)((char *)a2 + v79);
    uint64_t v82 = *v81;
    unint64_t v83 = v81[1];
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v78);
    sub_10019BA8C(v82, v83);
    *int v80 = v82;
    v80[1] = v83;
    uint64_t v84 = v89[8];
    uint64_t v85 = v89[9];
    int v86 = *(void **)((char *)a2 + v84);
    *(void *)(a1 + v84) = v86;
    *(_BYTE *)(a1 + v85) = *((_BYTE *)a2 + v85);
    id v87 = v86;
  }

  return a1;
}

void sub_1001AE04C(void *a1, int *a2)
{
  int v4 = a1 + 1;
  swift_bridgeObjectRelease(*a1);
  sub_10018709C(v4);
  uint64_t v5 = (char *)a1 + a2[6];
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  }
  __int128 v9 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v10 = &v5[v9[5]];
  if (!v8(v10, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  uint64_t v11 = &v5[v9[6]];
  if (!v8(v11, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  }
  uint64_t v12 = &v5[v9[7]];
  if (!v8(v12, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  }
  int v13 = &v5[v9[8]];
  if (!v8(v13, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  }
  int v14 = &v5[v9[9]];
  if (!v8(v14, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  }
  uint64_t v15 = &v5[v9[10]];
  if (!v8(v15, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
  }
  uint64_t v16 = &v5[v9[11]];
  if (!v8(v16, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
  }
  uint64_t v17 = &v5[v9[12]];
  if (!v8(v17, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
  }
  uint64_t v18 = &v5[v9[14]];
  if (!v8(v18, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
  }
  uint64_t v19 = &v5[v9[15]];
  if (!v8(v19, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
  }
  uint64_t v20 = &v5[v9[16]];
  if (!v8(v20, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
  }
  int v21 = &v5[v9[17]];
  if (!v8(v21, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v21, v6);
  }
  swift_bridgeObjectRelease(*(void *)&v5[v9[20] + 8]);
  swift_bridgeObjectRelease(*(void *)&v5[v9[21] + 8]);
  sub_100189B20(*(void *)((char *)a1 + a2[7]), *(void *)((char *)a1 + a2[7] + 8));
}

uint64_t sub_1001AE32C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(void *)a1 = *a2;
  uint64_t v7 = a2 + 1;
  __int128 v8 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v8;
  uint64_t v9 = v8;
  uint64_t v10 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v8 - 8);
  swift_bridgeObjectRetain(v6);
  v10(a1 + 8, v7, v9);
  uint64_t v88 = a3;
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)(a1 + v11);
  int v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v16(v13, 1LL, v14))
  {
    uint64_t v17 = sub_100183098(&qword_1006457E8);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v19 = v18[5];
  uint64_t v20 = &v12[v19];
  int v21 = &v13[v19];
  if (v16(&v13[v19], 1LL, v14))
  {
    uint64_t v22 = sub_100183098(&qword_1006457E8);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v20, v21, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v20, 0LL, 1LL, v14);
  }

  uint64_t v23 = v18[6];
  uint64_t v24 = &v12[v23];
  uint64_t v25 = &v13[v23];
  if (v16(&v13[v23], 1LL, v14))
  {
    uint64_t v26 = sub_100183098(&qword_1006457E8);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v24, v25, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v24, 0LL, 1LL, v14);
  }

  uint64_t v27 = v18[7];
  uint64_t v28 = &v12[v27];
  uint64_t v29 = &v13[v27];
  if (v16(&v13[v27], 1LL, v14))
  {
    uint64_t v30 = sub_100183098(&qword_1006457E8);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v28, v29, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v28, 0LL, 1LL, v14);
  }

  uint64_t v31 = v18[8];
  uint64_t v32 = &v12[v31];
  int v33 = &v13[v31];
  if (v16(&v13[v31], 1LL, v14))
  {
    uint64_t v34 = sub_100183098(&qword_1006457E8);
    memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v32, v33, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v32, 0LL, 1LL, v14);
  }

  uint64_t v35 = v18[9];
  uint64_t v36 = &v12[v35];
  uint64_t v37 = &v13[v35];
  if (v16(&v13[v35], 1LL, v14))
  {
    uint64_t v38 = sub_100183098(&qword_1006457E8);
    memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v36, v37, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v36, 0LL, 1LL, v14);
  }

  uint64_t v39 = v18[10];
  uint64_t v40 = &v12[v39];
  uint64_t v41 = &v13[v39];
  if (v16(&v13[v39], 1LL, v14))
  {
    uint64_t v42 = sub_100183098(&qword_1006457E8);
    memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v40, v41, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v40, 0LL, 1LL, v14);
  }

  uint64_t v43 = v18[11];
  uint64_t v44 = &v12[v43];
  int v45 = &v13[v43];
  if (v16(&v13[v43], 1LL, v14))
  {
    uint64_t v46 = sub_100183098(&qword_1006457E8);
    memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v44, v45, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v44, 0LL, 1LL, v14);
  }

  uint64_t v47 = v18[12];
  uint64_t v48 = &v12[v47];
  uint64_t v49 = &v13[v47];
  if (v16(&v13[v47], 1LL, v14))
  {
    uint64_t v50 = sub_100183098(&qword_1006457E8);
    memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v48, v49, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v48, 0LL, 1LL, v14);
  }

  v12[v18[13]] = v13[v18[13]];
  uint64_t v51 = v18[14];
  uint64_t v52 = &v12[v51];
  uint64_t v53 = &v13[v51];
  if (v16(&v13[v51], 1LL, v14))
  {
    uint64_t v54 = sub_100183098(&qword_1006457E8);
    memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v52, v53, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v52, 0LL, 1LL, v14);
  }

  uint64_t v55 = v18[15];
  uint64_t v56 = &v12[v55];
  int v57 = &v13[v55];
  if (v16(&v13[v55], 1LL, v14))
  {
    uint64_t v58 = sub_100183098(&qword_1006457E8);
    memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v56, v57, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v56, 0LL, 1LL, v14);
  }

  uint64_t v59 = v18[16];
  uint64_t v60 = &v12[v59];
  uint64_t v61 = &v13[v59];
  if (v16(&v13[v59], 1LL, v14))
  {
    uint64_t v62 = sub_100183098(&qword_1006457E8);
    memcpy(v60, v61, *(void *)(*(void *)(v62 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v60, v61, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v60, 0LL, 1LL, v14);
  }

  uint64_t v63 = v18[17];
  uint64_t v64 = &v12[v63];
  uint64_t v65 = &v13[v63];
  if (v16(&v13[v63], 1LL, v14))
  {
    uint64_t v66 = sub_100183098(&qword_1006457E8);
    memcpy(v64, v65, *(void *)(*(void *)(v66 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v64, v65, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v64, 0LL, 1LL, v14);
  }

  uint64_t v67 = v18[18];
  uint64_t v68 = &v12[v67];
  int v69 = &v13[v67];
  *(_DWORD *)uint64_t v68 = *(_DWORD *)v69;
  v68[4] = v69[4];
  v12[v18[19]] = v13[v18[19]];
  uint64_t v70 = v18[20];
  uint64_t v71 = &v12[v70];
  uint64_t v72 = &v13[v70];
  uint64_t v73 = *((void *)v72 + 1);
  *(void *)uint64_t v71 = *(void *)v72;
  *((void *)v71 + 1) = v73;
  uint64_t v74 = v18[21];
  uint64_t v75 = &v12[v74];
  uint64_t v76 = &v13[v74];
  uint64_t v77 = *((void *)v76 + 1);
  *(void *)uint64_t v75 = *(void *)v76;
  *((void *)v75 + 1) = v77;
  uint64_t v78 = v88[7];
  uint64_t v79 = (uint64_t *)(a1 + v78);
  int v80 = (uint64_t *)((char *)a2 + v78);
  uint64_t v81 = *v80;
  unint64_t v82 = v80[1];
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v77);
  sub_10019BA8C(v81, v82);
  *uint64_t v79 = v81;
  v79[1] = v82;
  uint64_t v83 = v88[8];
  uint64_t v84 = v88[9];
  uint64_t v85 = *(void **)((char *)a2 + v83);
  *(void *)(a1 + v83) = v85;
  *(_BYTE *)(a1 + v84) = *((_BYTE *)a2 + v84);
  id v86 = v85;
  return a1;
}

void *sub_1001AEA2C(void *a1, void *a2, int *a3)
{
  uint64_t v7 = a2 + 1;
  uint64_t v6 = *a2;
  uint64_t v8 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v8);
  sub_10019DB24(a1 + 1, v7);
  unint64_t v117 = a3;
  uint64_t v118 = a2;
  uint64_t v9 = a3[6];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14(v11, 1LL, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    uint64_t v17 = sub_100183098(&qword_1006457E8);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  uint64_t v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v19 = v18[5];
  uint64_t v20 = &v10[v19];
  int v21 = &v11[v19];
  int v22 = v14(&v10[v19], 1LL, v12);
  int v23 = v14(v21, 1LL, v12);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v20, v21, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v20, 0LL, 1LL, v12);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
LABEL_12:
    uint64_t v24 = sub_100183098(&qword_1006457E8);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v20, v21, v12);
LABEL_13:
  uint64_t v25 = v18[6];
  uint64_t v26 = &v10[v25];
  uint64_t v27 = &v11[v25];
  int v28 = v14(&v10[v25], 1LL, v12);
  int v29 = v14(v27, 1LL, v12);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v26, v27, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v26, 0LL, 1LL, v12);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v26, v12);
LABEL_18:
    uint64_t v30 = sub_100183098(&qword_1006457E8);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v26, v27, v12);
LABEL_19:
  uint64_t v31 = v18[7];
  uint64_t v32 = &v10[v31];
  int v33 = &v11[v31];
  int v34 = v14(&v10[v31], 1LL, v12);
  int v35 = v14(v33, 1LL, v12);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v32, v33, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v32, 0LL, 1LL, v12);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v32, v12);
LABEL_24:
    uint64_t v36 = sub_100183098(&qword_1006457E8);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v32, v33, v12);
LABEL_25:
  uint64_t v37 = v18[8];
  uint64_t v38 = &v10[v37];
  uint64_t v39 = &v11[v37];
  int v40 = v14(&v10[v37], 1LL, v12);
  int v41 = v14(v39, 1LL, v12);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v38, v39, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v38, 0LL, 1LL, v12);
      goto LABEL_31;
    }

    goto LABEL_30;
  }

  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v38, v12);
LABEL_30:
    uint64_t v42 = sub_100183098(&qword_1006457E8);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64LL));
    goto LABEL_31;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v38, v39, v12);
LABEL_31:
  uint64_t v43 = v18[9];
  uint64_t v44 = &v10[v43];
  int v45 = &v11[v43];
  int v46 = v14(&v10[v43], 1LL, v12);
  int v47 = v14(v45, 1LL, v12);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v44, v45, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v44, 0LL, 1LL, v12);
      goto LABEL_37;
    }

    goto LABEL_36;
  }

  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v44, v12);
LABEL_36:
    uint64_t v48 = sub_100183098(&qword_1006457E8);
    memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64LL));
    goto LABEL_37;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v44, v45, v12);
LABEL_37:
  uint64_t v49 = v18[10];
  uint64_t v50 = &v10[v49];
  uint64_t v51 = &v11[v49];
  int v52 = v14(&v10[v49], 1LL, v12);
  int v53 = v14(v51, 1LL, v12);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v50, v51, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v50, 0LL, 1LL, v12);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v50, v12);
LABEL_42:
    uint64_t v54 = sub_100183098(&qword_1006457E8);
    memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64LL));
    goto LABEL_43;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v50, v51, v12);
LABEL_43:
  uint64_t v55 = v18[11];
  uint64_t v56 = &v10[v55];
  int v57 = &v11[v55];
  int v58 = v14(&v10[v55], 1LL, v12);
  int v59 = v14(v57, 1LL, v12);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v56, v57, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v56, 0LL, 1LL, v12);
      goto LABEL_49;
    }

    goto LABEL_48;
  }

  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v56, v12);
LABEL_48:
    uint64_t v60 = sub_100183098(&qword_1006457E8);
    memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64LL));
    goto LABEL_49;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v56, v57, v12);
LABEL_49:
  uint64_t v61 = v18[12];
  uint64_t v62 = &v10[v61];
  uint64_t v63 = &v11[v61];
  int v64 = v14(&v10[v61], 1LL, v12);
  int v65 = v14(v63, 1LL, v12);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v62, v63, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v62, 0LL, 1LL, v12);
      goto LABEL_55;
    }

    goto LABEL_54;
  }

  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v62, v12);
LABEL_54:
    uint64_t v66 = sub_100183098(&qword_1006457E8);
    memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64LL));
    goto LABEL_55;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v62, v63, v12);
LABEL_55:
  v10[v18[13]] = v11[v18[13]];
  uint64_t v67 = v18[14];
  uint64_t v68 = &v10[v67];
  int v69 = &v11[v67];
  int v70 = v14(&v10[v67], 1LL, v12);
  int v71 = v14(v69, 1LL, v12);
  if (v70)
  {
    if (!v71)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v68, v69, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v68, 0LL, 1LL, v12);
      goto LABEL_61;
    }

    goto LABEL_60;
  }

  if (v71)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v68, v12);
LABEL_60:
    uint64_t v72 = sub_100183098(&qword_1006457E8);
    memcpy(v68, v69, *(void *)(*(void *)(v72 - 8) + 64LL));
    goto LABEL_61;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v68, v69, v12);
LABEL_61:
  uint64_t v73 = v18[15];
  uint64_t v74 = &v10[v73];
  uint64_t v75 = &v11[v73];
  int v76 = v14(&v10[v73], 1LL, v12);
  int v77 = v14(v75, 1LL, v12);
  if (v76)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v74, v75, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v74, 0LL, 1LL, v12);
      goto LABEL_67;
    }

    goto LABEL_66;
  }

  if (v77)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v74, v12);
LABEL_66:
    uint64_t v78 = sub_100183098(&qword_1006457E8);
    memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64LL));
    goto LABEL_67;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v74, v75, v12);
LABEL_67:
  uint64_t v79 = v18[16];
  int v80 = &v10[v79];
  uint64_t v81 = &v11[v79];
  int v82 = v14(&v10[v79], 1LL, v12);
  int v83 = v14(v81, 1LL, v12);
  if (v82)
  {
    if (!v83)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v80, v81, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v80, 0LL, 1LL, v12);
      goto LABEL_73;
    }

    goto LABEL_72;
  }

  if (v83)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v80, v12);
LABEL_72:
    uint64_t v84 = sub_100183098(&qword_1006457E8);
    memcpy(v80, v81, *(void *)(*(void *)(v84 - 8) + 64LL));
    goto LABEL_73;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v80, v81, v12);
LABEL_73:
  uint64_t v85 = v18[17];
  id v86 = &v10[v85];
  id v87 = &v11[v85];
  int v88 = v14(&v10[v85], 1LL, v12);
  int v89 = v14(v87, 1LL, v12);
  if (!v88)
  {
    if (!v89)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v86, v87, v12);
      goto LABEL_79;
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v86, v12);
    goto LABEL_78;
  }

  if (v89)
  {
LABEL_78:
    uint64_t v90 = sub_100183098(&qword_1006457E8);
    memcpy(v86, v87, *(void *)(*(void *)(v90 - 8) + 64LL));
    goto LABEL_79;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v86, v87, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v86, 0LL, 1LL, v12);
LABEL_79:
  uint64_t v91 = v18[18];
  uint64_t v92 = &v10[v91];
  uint64_t v93 = &v11[v91];
  int v94 = *(_DWORD *)v93;
  v92[4] = v93[4];
  *(_DWORD *)uint64_t v92 = v94;
  v10[v18[19]] = v11[v18[19]];
  uint64_t v95 = v18[20];
  uint64_t v96 = &v10[v95];
  uint64_t v97 = &v11[v95];
  *(void *)uint64_t v96 = *(void *)v97;
  uint64_t v98 = *((void *)v97 + 1);
  uint64_t v99 = *((void *)v96 + 1);
  *((void *)v96 + 1) = v98;
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRelease(v99);
  uint64_t v100 = v18[21];
  uint64_t v101 = &v10[v100];
  uint64_t v102 = &v11[v100];
  *(void *)uint64_t v101 = *(void *)v102;
  uint64_t v103 = *((void *)v102 + 1);
  uint64_t v104 = *((void *)v101 + 1);
  *((void *)v101 + 1) = v103;
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRelease(v104);
  uint64_t v105 = v117[7];
  uint64_t v106 = (void *)((char *)a1 + v105);
  unint64_t v107 = (void *)((char *)v118 + v105);
  uint64_t v108 = *v107;
  unint64_t v109 = v107[1];
  sub_10019BA8C(*v107, v109);
  uint64_t v110 = *v106;
  unint64_t v111 = v106[1];
  *uint64_t v106 = v108;
  v106[1] = v109;
  sub_100189B20(v110, v111);
  uint64_t v112 = v117[8];
  uint64_t v113 = *(void **)((char *)a1 + v112);
  uint64_t v114 = *(void **)((char *)v118 + v112);
  *(void *)((char *)a1 + v112) = v114;
  id v115 = v114;

  *((_BYTE *)a1 + v117[9]) = *((_BYTE *)v118 + v117[9]);
  return a1;
}

uint64_t sub_1001AF4CC(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v5 = a3[6];
  uint64_t v6 = (char *)(a1 + v5);
  uint64_t v7 = (char *)(a2 + v5);
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1LL, v8))
  {
    uint64_t v11 = sub_100183098(&qword_1006457E8);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0LL, 1LL, v8);
  }

  uint64_t v12 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v13 = v12[5];
  uint64_t v14 = &v6[v13];
  int v15 = &v7[v13];
  if (v10(&v7[v13], 1LL, v8))
  {
    uint64_t v16 = sub_100183098(&qword_1006457E8);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v15, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v14, 0LL, 1LL, v8);
  }

  uint64_t v17 = v12[6];
  uint64_t v18 = &v6[v17];
  uint64_t v19 = &v7[v17];
  if (v10(&v7[v17], 1LL, v8))
  {
    uint64_t v20 = sub_100183098(&qword_1006457E8);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v18, v19, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v18, 0LL, 1LL, v8);
  }

  uint64_t v21 = v12[7];
  int v22 = &v6[v21];
  int v23 = &v7[v21];
  if (v10(&v7[v21], 1LL, v8))
  {
    uint64_t v24 = sub_100183098(&qword_1006457E8);
    memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v22, v23, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v22, 0LL, 1LL, v8);
  }

  uint64_t v25 = v12[8];
  uint64_t v26 = &v6[v25];
  uint64_t v27 = &v7[v25];
  if (v10(&v7[v25], 1LL, v8))
  {
    uint64_t v28 = sub_100183098(&qword_1006457E8);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v26, v27, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v26, 0LL, 1LL, v8);
  }

  uint64_t v29 = v12[9];
  uint64_t v30 = &v6[v29];
  uint64_t v31 = &v7[v29];
  if (v10(&v7[v29], 1LL, v8))
  {
    uint64_t v32 = sub_100183098(&qword_1006457E8);
    memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v30, v31, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v30, 0LL, 1LL, v8);
  }

  uint64_t v33 = v12[10];
  int v34 = &v6[v33];
  int v35 = &v7[v33];
  if (v10(&v7[v33], 1LL, v8))
  {
    uint64_t v36 = sub_100183098(&qword_1006457E8);
    memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v34, v35, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v34, 0LL, 1LL, v8);
  }

  uint64_t v37 = v12[11];
  uint64_t v38 = &v6[v37];
  uint64_t v39 = &v7[v37];
  if (v10(&v7[v37], 1LL, v8))
  {
    uint64_t v40 = sub_100183098(&qword_1006457E8);
    memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v38, v39, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v38, 0LL, 1LL, v8);
  }

  uint64_t v41 = v12[12];
  uint64_t v42 = &v6[v41];
  uint64_t v43 = &v7[v41];
  if (v10(&v7[v41], 1LL, v8))
  {
    uint64_t v44 = sub_100183098(&qword_1006457E8);
    memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v42, v43, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v42, 0LL, 1LL, v8);
  }

  v6[v12[13]] = v7[v12[13]];
  uint64_t v45 = v12[14];
  int v46 = &v6[v45];
  int v47 = &v7[v45];
  if (v10(&v7[v45], 1LL, v8))
  {
    uint64_t v48 = sub_100183098(&qword_1006457E8);
    memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v46, v47, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v46, 0LL, 1LL, v8);
  }

  uint64_t v49 = v12[15];
  uint64_t v50 = &v6[v49];
  uint64_t v51 = &v7[v49];
  if (v10(&v7[v49], 1LL, v8))
  {
    uint64_t v52 = sub_100183098(&qword_1006457E8);
    memcpy(v50, v51, *(void *)(*(void *)(v52 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v50, v51, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v50, 0LL, 1LL, v8);
  }

  uint64_t v53 = v12[16];
  uint64_t v54 = &v6[v53];
  uint64_t v55 = &v7[v53];
  if (v10(&v7[v53], 1LL, v8))
  {
    uint64_t v56 = sub_100183098(&qword_1006457E8);
    memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v54, v55, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v54, 0LL, 1LL, v8);
  }

  uint64_t v57 = v12[17];
  int v58 = &v6[v57];
  int v59 = &v7[v57];
  if (v10(&v7[v57], 1LL, v8))
  {
    uint64_t v60 = sub_100183098(&qword_1006457E8);
    memcpy(v58, v59, *(void *)(*(void *)(v60 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v58, v59, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v58, 0LL, 1LL, v8);
  }

  uint64_t v61 = v12[18];
  uint64_t v62 = &v6[v61];
  uint64_t v63 = &v7[v61];
  *(_DWORD *)uint64_t v62 = *(_DWORD *)v63;
  v62[4] = v63[4];
  v6[v12[19]] = v7[v12[19]];
  *(_OWORD *)&v6[v12[20]] = *(_OWORD *)&v7[v12[20]];
  *(_OWORD *)&v6[v12[21]] = *(_OWORD *)&v7[v12[21]];
  uint64_t v64 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(void *)(a1 + v64) = *(void *)(a2 + v64);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t *sub_1001AFB7C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  sub_10018709C(a1 + 1);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  a1[5] = a2[5];
  uint64_t v110 = a3;
  unint64_t v111 = a2;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100183098(&qword_1006457E8);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v17 = v16[5];
  uint64_t v18 = &v8[v17];
  uint64_t v19 = &v9[v17];
  int v20 = v12(&v8[v17], 1LL, v10);
  int v21 = v12(v19, 1LL, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v19, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v18, 0LL, 1LL, v10);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_12:
    uint64_t v22 = sub_100183098(&qword_1006457E8);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v18, v19, v10);
LABEL_13:
  uint64_t v23 = v16[6];
  uint64_t v24 = &v8[v23];
  uint64_t v25 = &v9[v23];
  int v26 = v12(&v8[v23], 1LL, v10);
  int v27 = v12(v25, 1LL, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v24, v25, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v24, 0LL, 1LL, v10);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
LABEL_18:
    uint64_t v28 = sub_100183098(&qword_1006457E8);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v24, v25, v10);
LABEL_19:
  uint64_t v29 = v16[7];
  uint64_t v30 = &v8[v29];
  uint64_t v31 = &v9[v29];
  int v32 = v12(&v8[v29], 1LL, v10);
  int v33 = v12(v31, 1LL, v10);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v30, v31, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v30, 0LL, 1LL, v10);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
LABEL_24:
    uint64_t v34 = sub_100183098(&qword_1006457E8);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v30, v31, v10);
LABEL_25:
  uint64_t v35 = v16[8];
  uint64_t v36 = &v8[v35];
  uint64_t v37 = &v9[v35];
  int v38 = v12(&v8[v35], 1LL, v10);
  int v39 = v12(v37, 1LL, v10);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v36, v37, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v36, 0LL, 1LL, v10);
      goto LABEL_31;
    }

    goto LABEL_30;
  }

  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
LABEL_30:
    uint64_t v40 = sub_100183098(&qword_1006457E8);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64LL));
    goto LABEL_31;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v36, v37, v10);
LABEL_31:
  uint64_t v41 = v16[9];
  uint64_t v42 = &v8[v41];
  uint64_t v43 = &v9[v41];
  int v44 = v12(&v8[v41], 1LL, v10);
  int v45 = v12(v43, 1LL, v10);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v42, v43, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v42, 0LL, 1LL, v10);
      goto LABEL_37;
    }

    goto LABEL_36;
  }

  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
LABEL_36:
    uint64_t v46 = sub_100183098(&qword_1006457E8);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64LL));
    goto LABEL_37;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v42, v43, v10);
LABEL_37:
  uint64_t v47 = v16[10];
  uint64_t v48 = &v8[v47];
  uint64_t v49 = &v9[v47];
  int v50 = v12(&v8[v47], 1LL, v10);
  int v51 = v12(v49, 1LL, v10);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v48, v49, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v48, 0LL, 1LL, v10);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
LABEL_42:
    uint64_t v52 = sub_100183098(&qword_1006457E8);
    memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64LL));
    goto LABEL_43;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v48, v49, v10);
LABEL_43:
  uint64_t v53 = v16[11];
  uint64_t v54 = &v8[v53];
  uint64_t v55 = &v9[v53];
  int v56 = v12(&v8[v53], 1LL, v10);
  int v57 = v12(v55, 1LL, v10);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v54, v55, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v54, 0LL, 1LL, v10);
      goto LABEL_49;
    }

    goto LABEL_48;
  }

  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v10);
LABEL_48:
    uint64_t v58 = sub_100183098(&qword_1006457E8);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64LL));
    goto LABEL_49;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v54, v55, v10);
LABEL_49:
  uint64_t v59 = v16[12];
  uint64_t v60 = &v8[v59];
  uint64_t v61 = &v9[v59];
  int v62 = v12(&v8[v59], 1LL, v10);
  int v63 = v12(v61, 1LL, v10);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v60, v61, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v60, 0LL, 1LL, v10);
      goto LABEL_55;
    }

    goto LABEL_54;
  }

  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v60, v10);
LABEL_54:
    uint64_t v64 = sub_100183098(&qword_1006457E8);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64LL));
    goto LABEL_55;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v60, v61, v10);
LABEL_55:
  v8[v16[13]] = v9[v16[13]];
  uint64_t v65 = v16[14];
  uint64_t v66 = &v8[v65];
  uint64_t v67 = &v9[v65];
  int v68 = v12(&v8[v65], 1LL, v10);
  int v69 = v12(v67, 1LL, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v66, v67, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v66, 0LL, 1LL, v10);
      goto LABEL_61;
    }

    goto LABEL_60;
  }

  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v10);
LABEL_60:
    uint64_t v70 = sub_100183098(&qword_1006457E8);
    memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64LL));
    goto LABEL_61;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v66, v67, v10);
LABEL_61:
  uint64_t v71 = v16[15];
  uint64_t v72 = &v8[v71];
  uint64_t v73 = &v9[v71];
  int v74 = v12(&v8[v71], 1LL, v10);
  int v75 = v12(v73, 1LL, v10);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v72, v73, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v72, 0LL, 1LL, v10);
      goto LABEL_67;
    }

    goto LABEL_66;
  }

  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
LABEL_66:
    uint64_t v76 = sub_100183098(&qword_1006457E8);
    memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64LL));
    goto LABEL_67;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v72, v73, v10);
LABEL_67:
  uint64_t v77 = v16[16];
  uint64_t v78 = &v8[v77];
  uint64_t v79 = &v9[v77];
  int v80 = v12(&v8[v77], 1LL, v10);
  int v81 = v12(v79, 1LL, v10);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v78, v79, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v78, 0LL, 1LL, v10);
      goto LABEL_73;
    }

    goto LABEL_72;
  }

  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_72:
    uint64_t v82 = sub_100183098(&qword_1006457E8);
    memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64LL));
    goto LABEL_73;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v78, v79, v10);
LABEL_73:
  uint64_t v83 = v16[17];
  uint64_t v84 = &v8[v83];
  uint64_t v85 = &v9[v83];
  int v86 = v12(&v8[v83], 1LL, v10);
  int v87 = v12(v85, 1LL, v10);
  if (!v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v84, v85, v10);
      goto LABEL_79;
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v84, v10);
    goto LABEL_78;
  }

  if (v87)
  {
LABEL_78:
    uint64_t v88 = sub_100183098(&qword_1006457E8);
    memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64LL));
    goto LABEL_79;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v84, v85, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v84, 0LL, 1LL, v10);
LABEL_79:
  uint64_t v89 = v16[18];
  uint64_t v90 = &v8[v89];
  uint64_t v91 = &v9[v89];
  *(_DWORD *)uint64_t v90 = *(_DWORD *)v91;
  v90[4] = v91[4];
  v8[v16[19]] = v9[v16[19]];
  uint64_t v92 = v16[20];
  uint64_t v93 = &v8[v92];
  int v94 = &v9[v92];
  uint64_t v96 = *(void *)v94;
  uint64_t v95 = *((void *)v94 + 1);
  uint64_t v97 = *((void *)v93 + 1);
  *(void *)uint64_t v93 = v96;
  *((void *)v93 + 1) = v95;
  swift_bridgeObjectRelease(v97);
  uint64_t v98 = v16[21];
  uint64_t v99 = &v8[v98];
  uint64_t v100 = &v9[v98];
  uint64_t v102 = *(void *)v100;
  uint64_t v101 = *((void *)v100 + 1);
  uint64_t v103 = *((void *)v99 + 1);
  *(void *)uint64_t v99 = v102;
  *((void *)v99 + 1) = v101;
  swift_bridgeObjectRelease(v103);
  uint64_t v104 = v110[7];
  uint64_t v105 = *(uint64_t *)((char *)a1 + v104);
  unint64_t v106 = *(uint64_t *)((char *)a1 + v104 + 8);
  *(_OWORD *)((char *)a1 + v104) = *(_OWORD *)((char *)v111 + v104);
  sub_100189B20(v105, v106);
  uint64_t v107 = v110[8];
  uint64_t v108 = *(void **)((char *)a1 + v107);
  *(uint64_t *)((char *)a1 + v107) = *(uint64_t *)((char *)v111 + v107);

  *((_BYTE *)a1 + v110[9]) = *((_BYTE *)v111 + v110[9]);
  return a1;
}

uint64_t sub_1001B05EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001B05F8);
}

uint64_t sub_1001B05FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001B0608);
}

uint64_t sub_1001B060C(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = "(";
  uint64_t result = type metadata accessor for SDAuthenticationSessionMetrics(319LL);
  if (v3 <= 0x3F)
  {
    _DWORD v4[2] = *(void *)(result - 8) + 64LL;
    void v4[3] = &unk_1004CD7D8;
    void v4[4] = &unk_1004CD618;
    v4[5] = &unk_1004CD630;
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1001B06A8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16LL) & ~(unint64_t)v4);
    swift_retain(v5);
  }

  else
  {
    uint64_t v8 = a2 + 1;
    __int128 v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    uint64_t v10 = v9;
    uint64_t v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_bridgeObjectRetain(v5);
    v11(a1 + 8, v8, v10);
    uint64_t v12 = *(int *)(a3 + 24);
    int v13 = (char *)(a1 + v12);
    int v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for Date(0LL);
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    uint64_t v80 = a3;
    if (v17(v14, 1LL, v15))
    {
      uint64_t v18 = sub_100183098(&qword_1006457E8);
      memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
    }

    uint64_t v19 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
    uint64_t v20 = v19[5];
    int v21 = &v13[v20];
    uint64_t v22 = &v14[v20];
    if (v17(&v14[v20], 1LL, v15))
    {
      uint64_t v23 = sub_100183098(&qword_1006457E8);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v22, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v21, 0LL, 1LL, v15);
    }

    uint64_t v24 = v19[6];
    uint64_t v25 = &v13[v24];
    int v26 = &v14[v24];
    if (v17(&v14[v24], 1LL, v15))
    {
      uint64_t v27 = sub_100183098(&qword_1006457E8);
      memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v25, v26, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v25, 0LL, 1LL, v15);
    }

    uint64_t v28 = v19[7];
    uint64_t v29 = &v13[v28];
    uint64_t v30 = &v14[v28];
    if (v17(&v14[v28], 1LL, v15))
    {
      uint64_t v31 = sub_100183098(&qword_1006457E8);
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v29, v30, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v29, 0LL, 1LL, v15);
    }

    uint64_t v32 = v19[8];
    int v33 = &v13[v32];
    uint64_t v34 = &v14[v32];
    if (v17(&v14[v32], 1LL, v15))
    {
      uint64_t v35 = sub_100183098(&qword_1006457E8);
      memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v33, v34, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v33, 0LL, 1LL, v15);
    }

    uint64_t v36 = v19[9];
    uint64_t v37 = &v13[v36];
    int v38 = &v14[v36];
    if (v17(&v14[v36], 1LL, v15))
    {
      uint64_t v39 = sub_100183098(&qword_1006457E8);
      memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v37, v38, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v37, 0LL, 1LL, v15);
    }

    uint64_t v40 = v19[10];
    uint64_t v41 = &v13[v40];
    uint64_t v42 = &v14[v40];
    if (v17(&v14[v40], 1LL, v15))
    {
      uint64_t v43 = sub_100183098(&qword_1006457E8);
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v41, v42, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v41, 0LL, 1LL, v15);
    }

    uint64_t v44 = v19[11];
    int v45 = &v13[v44];
    uint64_t v46 = &v14[v44];
    if (v17(&v14[v44], 1LL, v15))
    {
      uint64_t v47 = sub_100183098(&qword_1006457E8);
      memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v45, v46, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v45, 0LL, 1LL, v15);
    }

    uint64_t v48 = v19[12];
    uint64_t v49 = &v13[v48];
    int v50 = &v14[v48];
    if (v17(&v14[v48], 1LL, v15))
    {
      uint64_t v51 = sub_100183098(&qword_1006457E8);
      memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v49, v50, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v49, 0LL, 1LL, v15);
    }

    v13[v19[13]] = v14[v19[13]];
    uint64_t v52 = v19[14];
    uint64_t v53 = &v13[v52];
    uint64_t v54 = &v14[v52];
    if (v17(&v14[v52], 1LL, v15))
    {
      uint64_t v55 = sub_100183098(&qword_1006457E8);
      memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v53, v54, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v53, 0LL, 1LL, v15);
    }

    uint64_t v56 = v19[15];
    int v57 = &v13[v56];
    uint64_t v58 = &v14[v56];
    if (v17(&v14[v56], 1LL, v15))
    {
      uint64_t v59 = sub_100183098(&qword_1006457E8);
      memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v57, v58, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v57, 0LL, 1LL, v15);
    }

    uint64_t v60 = v19[16];
    uint64_t v61 = &v13[v60];
    int v62 = &v14[v60];
    if (v17(&v14[v60], 1LL, v15))
    {
      uint64_t v63 = sub_100183098(&qword_1006457E8);
      memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v61, v62, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v61, 0LL, 1LL, v15);
    }

    uint64_t v64 = v19[17];
    uint64_t v65 = &v13[v64];
    uint64_t v66 = &v14[v64];
    if (v17(&v14[v64], 1LL, v15))
    {
      uint64_t v67 = sub_100183098(&qword_1006457E8);
      memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v65, v66, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v65, 0LL, 1LL, v15);
    }

    uint64_t v68 = v19[18];
    int v69 = &v13[v68];
    uint64_t v70 = &v14[v68];
    *(_DWORD *)int v69 = *(_DWORD *)v70;
    v69[4] = v70[4];
    v13[v19[19]] = v14[v19[19]];
    uint64_t v71 = v19[20];
    uint64_t v72 = &v13[v71];
    uint64_t v73 = &v14[v71];
    uint64_t v74 = *((void *)v73 + 1);
    *(void *)uint64_t v72 = *(void *)v73;
    *((void *)v72 + 1) = v74;
    uint64_t v75 = v19[21];
    uint64_t v76 = &v13[v75];
    uint64_t v77 = &v14[v75];
    uint64_t v78 = *((void *)v77 + 1);
    *(void *)uint64_t v76 = *(void *)v77;
    *((void *)v76 + 1) = v78;
    *(_BYTE *)(a1 + *(int *)(v80 + 28)) = *((_BYTE *)a2 + *(int *)(v80 + 28));
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v78);
  }

  return a1;
}

uint64_t sub_1001B0DA0(void *a1, uint64_t a2)
{
  int v4 = a1 + 1;
  swift_bridgeObjectRelease(*a1);
  sub_10018709C(v4);
  uint64_t v5 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  }
  __int128 v9 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v10 = &v5[v9[5]];
  if (!v8(v10, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  uint64_t v11 = &v5[v9[6]];
  if (!v8(v11, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  }
  uint64_t v12 = &v5[v9[7]];
  if (!v8(v12, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  }
  int v13 = &v5[v9[8]];
  if (!v8(v13, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  }
  int v14 = &v5[v9[9]];
  if (!v8(v14, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  }
  uint64_t v15 = &v5[v9[10]];
  if (!v8(v15, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
  }
  uint64_t v16 = &v5[v9[11]];
  if (!v8(v16, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
  }
  uint64_t v17 = &v5[v9[12]];
  if (!v8(v17, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
  }
  uint64_t v18 = &v5[v9[14]];
  if (!v8(v18, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
  }
  uint64_t v19 = &v5[v9[15]];
  if (!v8(v19, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
  }
  uint64_t v20 = &v5[v9[16]];
  if (!v8(v20, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
  }
  int v21 = &v5[v9[17]];
  if (!v8(v21, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v21, v6);
  }
  swift_bridgeObjectRelease(*(void *)&v5[v9[20] + 8]);
  return swift_bridgeObjectRelease(*(void *)&v5[v9[21] + 8]);
}

uint64_t sub_1001B105C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(void *)a1 = *a2;
  uint64_t v7 = a2 + 1;
  __int128 v8 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v8;
  uint64_t v9 = v8;
  uint64_t v10 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v8 - 8);
  swift_bridgeObjectRetain(v6);
  v10(a1 + 8, v7, v9);
  uint64_t v79 = a3;
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)(a1 + v11);
  int v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v16(v13, 1LL, v14))
  {
    uint64_t v17 = sub_100183098(&qword_1006457E8);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v19 = v18[5];
  uint64_t v20 = &v12[v19];
  int v21 = &v13[v19];
  if (v16(&v13[v19], 1LL, v14))
  {
    uint64_t v22 = sub_100183098(&qword_1006457E8);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v20, v21, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v20, 0LL, 1LL, v14);
  }

  uint64_t v23 = v18[6];
  uint64_t v24 = &v12[v23];
  uint64_t v25 = &v13[v23];
  if (v16(&v13[v23], 1LL, v14))
  {
    uint64_t v26 = sub_100183098(&qword_1006457E8);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v24, v25, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v24, 0LL, 1LL, v14);
  }

  uint64_t v27 = v18[7];
  uint64_t v28 = &v12[v27];
  uint64_t v29 = &v13[v27];
  if (v16(&v13[v27], 1LL, v14))
  {
    uint64_t v30 = sub_100183098(&qword_1006457E8);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v28, v29, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v28, 0LL, 1LL, v14);
  }

  uint64_t v31 = v18[8];
  uint64_t v32 = &v12[v31];
  int v33 = &v13[v31];
  if (v16(&v13[v31], 1LL, v14))
  {
    uint64_t v34 = sub_100183098(&qword_1006457E8);
    memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v32, v33, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v32, 0LL, 1LL, v14);
  }

  uint64_t v35 = v18[9];
  uint64_t v36 = &v12[v35];
  uint64_t v37 = &v13[v35];
  if (v16(&v13[v35], 1LL, v14))
  {
    uint64_t v38 = sub_100183098(&qword_1006457E8);
    memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v36, v37, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v36, 0LL, 1LL, v14);
  }

  uint64_t v39 = v18[10];
  uint64_t v40 = &v12[v39];
  uint64_t v41 = &v13[v39];
  if (v16(&v13[v39], 1LL, v14))
  {
    uint64_t v42 = sub_100183098(&qword_1006457E8);
    memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v40, v41, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v40, 0LL, 1LL, v14);
  }

  uint64_t v43 = v18[11];
  uint64_t v44 = &v12[v43];
  int v45 = &v13[v43];
  if (v16(&v13[v43], 1LL, v14))
  {
    uint64_t v46 = sub_100183098(&qword_1006457E8);
    memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v44, v45, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v44, 0LL, 1LL, v14);
  }

  uint64_t v47 = v18[12];
  uint64_t v48 = &v12[v47];
  uint64_t v49 = &v13[v47];
  if (v16(&v13[v47], 1LL, v14))
  {
    uint64_t v50 = sub_100183098(&qword_1006457E8);
    memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v48, v49, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v48, 0LL, 1LL, v14);
  }

  v12[v18[13]] = v13[v18[13]];
  uint64_t v51 = v18[14];
  uint64_t v52 = &v12[v51];
  uint64_t v53 = &v13[v51];
  if (v16(&v13[v51], 1LL, v14))
  {
    uint64_t v54 = sub_100183098(&qword_1006457E8);
    memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v52, v53, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v52, 0LL, 1LL, v14);
  }

  uint64_t v55 = v18[15];
  uint64_t v56 = &v12[v55];
  int v57 = &v13[v55];
  if (v16(&v13[v55], 1LL, v14))
  {
    uint64_t v58 = sub_100183098(&qword_1006457E8);
    memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v56, v57, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v56, 0LL, 1LL, v14);
  }

  uint64_t v59 = v18[16];
  uint64_t v60 = &v12[v59];
  uint64_t v61 = &v13[v59];
  if (v16(&v13[v59], 1LL, v14))
  {
    uint64_t v62 = sub_100183098(&qword_1006457E8);
    memcpy(v60, v61, *(void *)(*(void *)(v62 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v60, v61, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v60, 0LL, 1LL, v14);
  }

  uint64_t v63 = v18[17];
  uint64_t v64 = &v12[v63];
  uint64_t v65 = &v13[v63];
  if (v16(&v13[v63], 1LL, v14))
  {
    uint64_t v66 = sub_100183098(&qword_1006457E8);
    memcpy(v64, v65, *(void *)(*(void *)(v66 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v64, v65, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v64, 0LL, 1LL, v14);
  }

  uint64_t v67 = v18[18];
  uint64_t v68 = &v12[v67];
  int v69 = &v13[v67];
  *(_DWORD *)uint64_t v68 = *(_DWORD *)v69;
  v68[4] = v69[4];
  v12[v18[19]] = v13[v18[19]];
  uint64_t v70 = v18[20];
  uint64_t v71 = &v12[v70];
  uint64_t v72 = &v13[v70];
  uint64_t v73 = *((void *)v72 + 1);
  *(void *)uint64_t v71 = *(void *)v72;
  *((void *)v71 + 1) = v73;
  uint64_t v74 = v18[21];
  uint64_t v75 = &v12[v74];
  uint64_t v76 = &v13[v74];
  uint64_t v77 = *((void *)v76 + 1);
  *(void *)uint64_t v75 = *(void *)v76;
  *((void *)v75 + 1) = v77;
  *(_BYTE *)(a1 + *(int *)(v79 + 28)) = *((_BYTE *)a2 + *(int *)(v79 + 28));
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v77);
  return a1;
}

void *sub_1001B1730(void *a1, void *a2, uint64_t a3)
{
  uint64_t v7 = a2 + 1;
  uint64_t v6 = *a2;
  uint64_t v8 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v8);
  sub_10019DB24(a1 + 1, v7);
  uint64_t v106 = a3;
  uint64_t v107 = a2;
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14(v11, 1LL, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    uint64_t v17 = sub_100183098(&qword_1006457E8);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  uint64_t v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v19 = v18[5];
  uint64_t v20 = &v10[v19];
  int v21 = &v11[v19];
  int v22 = v14(&v10[v19], 1LL, v12);
  int v23 = v14(v21, 1LL, v12);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v20, v21, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v20, 0LL, 1LL, v12);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
LABEL_12:
    uint64_t v24 = sub_100183098(&qword_1006457E8);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v20, v21, v12);
LABEL_13:
  uint64_t v25 = v18[6];
  uint64_t v26 = &v10[v25];
  uint64_t v27 = &v11[v25];
  int v28 = v14(&v10[v25], 1LL, v12);
  int v29 = v14(v27, 1LL, v12);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v26, v27, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v26, 0LL, 1LL, v12);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v26, v12);
LABEL_18:
    uint64_t v30 = sub_100183098(&qword_1006457E8);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v26, v27, v12);
LABEL_19:
  uint64_t v31 = v18[7];
  uint64_t v32 = &v10[v31];
  int v33 = &v11[v31];
  int v34 = v14(&v10[v31], 1LL, v12);
  int v35 = v14(v33, 1LL, v12);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v32, v33, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v32, 0LL, 1LL, v12);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v32, v12);
LABEL_24:
    uint64_t v36 = sub_100183098(&qword_1006457E8);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v32, v33, v12);
LABEL_25:
  uint64_t v37 = v18[8];
  uint64_t v38 = &v10[v37];
  uint64_t v39 = &v11[v37];
  int v40 = v14(&v10[v37], 1LL, v12);
  int v41 = v14(v39, 1LL, v12);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v38, v39, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v38, 0LL, 1LL, v12);
      goto LABEL_31;
    }

    goto LABEL_30;
  }

  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v38, v12);
LABEL_30:
    uint64_t v42 = sub_100183098(&qword_1006457E8);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64LL));
    goto LABEL_31;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v38, v39, v12);
LABEL_31:
  uint64_t v43 = v18[9];
  uint64_t v44 = &v10[v43];
  int v45 = &v11[v43];
  int v46 = v14(&v10[v43], 1LL, v12);
  int v47 = v14(v45, 1LL, v12);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v44, v45, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v44, 0LL, 1LL, v12);
      goto LABEL_37;
    }

    goto LABEL_36;
  }

  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v44, v12);
LABEL_36:
    uint64_t v48 = sub_100183098(&qword_1006457E8);
    memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64LL));
    goto LABEL_37;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v44, v45, v12);
LABEL_37:
  uint64_t v49 = v18[10];
  uint64_t v50 = &v10[v49];
  uint64_t v51 = &v11[v49];
  int v52 = v14(&v10[v49], 1LL, v12);
  int v53 = v14(v51, 1LL, v12);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v50, v51, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v50, 0LL, 1LL, v12);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v50, v12);
LABEL_42:
    uint64_t v54 = sub_100183098(&qword_1006457E8);
    memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64LL));
    goto LABEL_43;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v50, v51, v12);
LABEL_43:
  uint64_t v55 = v18[11];
  uint64_t v56 = &v10[v55];
  int v57 = &v11[v55];
  int v58 = v14(&v10[v55], 1LL, v12);
  int v59 = v14(v57, 1LL, v12);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v56, v57, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v56, 0LL, 1LL, v12);
      goto LABEL_49;
    }

    goto LABEL_48;
  }

  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v56, v12);
LABEL_48:
    uint64_t v60 = sub_100183098(&qword_1006457E8);
    memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64LL));
    goto LABEL_49;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v56, v57, v12);
LABEL_49:
  uint64_t v61 = v18[12];
  uint64_t v62 = &v10[v61];
  uint64_t v63 = &v11[v61];
  int v64 = v14(&v10[v61], 1LL, v12);
  int v65 = v14(v63, 1LL, v12);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v62, v63, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v62, 0LL, 1LL, v12);
      goto LABEL_55;
    }

    goto LABEL_54;
  }

  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v62, v12);
LABEL_54:
    uint64_t v66 = sub_100183098(&qword_1006457E8);
    memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64LL));
    goto LABEL_55;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v62, v63, v12);
LABEL_55:
  v10[v18[13]] = v11[v18[13]];
  uint64_t v67 = v18[14];
  uint64_t v68 = &v10[v67];
  int v69 = &v11[v67];
  int v70 = v14(&v10[v67], 1LL, v12);
  int v71 = v14(v69, 1LL, v12);
  if (v70)
  {
    if (!v71)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v68, v69, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v68, 0LL, 1LL, v12);
      goto LABEL_61;
    }

    goto LABEL_60;
  }

  if (v71)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v68, v12);
LABEL_60:
    uint64_t v72 = sub_100183098(&qword_1006457E8);
    memcpy(v68, v69, *(void *)(*(void *)(v72 - 8) + 64LL));
    goto LABEL_61;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v68, v69, v12);
LABEL_61:
  uint64_t v73 = v18[15];
  uint64_t v74 = &v10[v73];
  uint64_t v75 = &v11[v73];
  int v76 = v14(&v10[v73], 1LL, v12);
  int v77 = v14(v75, 1LL, v12);
  if (v76)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v74, v75, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v74, 0LL, 1LL, v12);
      goto LABEL_67;
    }

    goto LABEL_66;
  }

  if (v77)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v74, v12);
LABEL_66:
    uint64_t v78 = sub_100183098(&qword_1006457E8);
    memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64LL));
    goto LABEL_67;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v74, v75, v12);
LABEL_67:
  uint64_t v79 = v18[16];
  uint64_t v80 = &v10[v79];
  int v81 = &v11[v79];
  int v82 = v14(&v10[v79], 1LL, v12);
  int v83 = v14(v81, 1LL, v12);
  if (v82)
  {
    if (!v83)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v80, v81, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v80, 0LL, 1LL, v12);
      goto LABEL_73;
    }

    goto LABEL_72;
  }

  if (v83)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v80, v12);
LABEL_72:
    uint64_t v84 = sub_100183098(&qword_1006457E8);
    memcpy(v80, v81, *(void *)(*(void *)(v84 - 8) + 64LL));
    goto LABEL_73;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v80, v81, v12);
LABEL_73:
  uint64_t v85 = v18[17];
  int v86 = &v10[v85];
  int v87 = &v11[v85];
  int v88 = v14(&v10[v85], 1LL, v12);
  int v89 = v14(v87, 1LL, v12);
  if (!v88)
  {
    if (!v89)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v86, v87, v12);
      goto LABEL_79;
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v86, v12);
    goto LABEL_78;
  }

  if (v89)
  {
LABEL_78:
    uint64_t v90 = sub_100183098(&qword_1006457E8);
    memcpy(v86, v87, *(void *)(*(void *)(v90 - 8) + 64LL));
    goto LABEL_79;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v86, v87, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v86, 0LL, 1LL, v12);
LABEL_79:
  uint64_t v91 = v18[18];
  uint64_t v92 = &v10[v91];
  uint64_t v93 = &v11[v91];
  int v94 = *(_DWORD *)v93;
  v92[4] = v93[4];
  *(_DWORD *)uint64_t v92 = v94;
  v10[v18[19]] = v11[v18[19]];
  uint64_t v95 = v18[20];
  uint64_t v96 = &v10[v95];
  uint64_t v97 = &v11[v95];
  *(void *)uint64_t v96 = *(void *)v97;
  uint64_t v98 = *((void *)v97 + 1);
  uint64_t v99 = *((void *)v96 + 1);
  *((void *)v96 + 1) = v98;
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRelease(v99);
  uint64_t v100 = v18[21];
  uint64_t v101 = &v10[v100];
  uint64_t v102 = &v11[v100];
  *(void *)uint64_t v101 = *(void *)v102;
  uint64_t v103 = *((void *)v102 + 1);
  uint64_t v104 = *((void *)v101 + 1);
  *((void *)v101 + 1) = v103;
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRelease(v104);
  *((_BYTE *)a1 + *(int *)(v106 + 28)) = *((_BYTE *)v107 + *(int *)(v106 + 28));
  return a1;
}

uint64_t sub_1001B2190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)(a1 + v5);
  uint64_t v7 = (char *)(a2 + v5);
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1LL, v8))
  {
    uint64_t v11 = sub_100183098(&qword_1006457E8);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0LL, 1LL, v8);
  }

  uint64_t v12 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v13 = v12[5];
  uint64_t v14 = &v6[v13];
  int v15 = &v7[v13];
  if (v10(&v7[v13], 1LL, v8))
  {
    uint64_t v16 = sub_100183098(&qword_1006457E8);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v15, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v14, 0LL, 1LL, v8);
  }

  uint64_t v17 = v12[6];
  uint64_t v18 = &v6[v17];
  uint64_t v19 = &v7[v17];
  if (v10(&v7[v17], 1LL, v8))
  {
    uint64_t v20 = sub_100183098(&qword_1006457E8);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v18, v19, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v18, 0LL, 1LL, v8);
  }

  uint64_t v21 = v12[7];
  int v22 = &v6[v21];
  int v23 = &v7[v21];
  if (v10(&v7[v21], 1LL, v8))
  {
    uint64_t v24 = sub_100183098(&qword_1006457E8);
    memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v22, v23, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v22, 0LL, 1LL, v8);
  }

  uint64_t v25 = v12[8];
  uint64_t v26 = &v6[v25];
  uint64_t v27 = &v7[v25];
  if (v10(&v7[v25], 1LL, v8))
  {
    uint64_t v28 = sub_100183098(&qword_1006457E8);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v26, v27, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v26, 0LL, 1LL, v8);
  }

  uint64_t v29 = v12[9];
  uint64_t v30 = &v6[v29];
  uint64_t v31 = &v7[v29];
  if (v10(&v7[v29], 1LL, v8))
  {
    uint64_t v32 = sub_100183098(&qword_1006457E8);
    memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v30, v31, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v30, 0LL, 1LL, v8);
  }

  uint64_t v33 = v12[10];
  int v34 = &v6[v33];
  int v35 = &v7[v33];
  if (v10(&v7[v33], 1LL, v8))
  {
    uint64_t v36 = sub_100183098(&qword_1006457E8);
    memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v34, v35, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v34, 0LL, 1LL, v8);
  }

  uint64_t v37 = v12[11];
  uint64_t v38 = &v6[v37];
  uint64_t v39 = &v7[v37];
  if (v10(&v7[v37], 1LL, v8))
  {
    uint64_t v40 = sub_100183098(&qword_1006457E8);
    memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v38, v39, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v38, 0LL, 1LL, v8);
  }

  uint64_t v41 = v12[12];
  uint64_t v42 = &v6[v41];
  uint64_t v43 = &v7[v41];
  if (v10(&v7[v41], 1LL, v8))
  {
    uint64_t v44 = sub_100183098(&qword_1006457E8);
    memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v42, v43, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v42, 0LL, 1LL, v8);
  }

  v6[v12[13]] = v7[v12[13]];
  uint64_t v45 = v12[14];
  int v46 = &v6[v45];
  int v47 = &v7[v45];
  if (v10(&v7[v45], 1LL, v8))
  {
    uint64_t v48 = sub_100183098(&qword_1006457E8);
    memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v46, v47, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v46, 0LL, 1LL, v8);
  }

  uint64_t v49 = v12[15];
  uint64_t v50 = &v6[v49];
  uint64_t v51 = &v7[v49];
  if (v10(&v7[v49], 1LL, v8))
  {
    uint64_t v52 = sub_100183098(&qword_1006457E8);
    memcpy(v50, v51, *(void *)(*(void *)(v52 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v50, v51, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v50, 0LL, 1LL, v8);
  }

  uint64_t v53 = v12[16];
  uint64_t v54 = &v6[v53];
  uint64_t v55 = &v7[v53];
  if (v10(&v7[v53], 1LL, v8))
  {
    uint64_t v56 = sub_100183098(&qword_1006457E8);
    memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v54, v55, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v54, 0LL, 1LL, v8);
  }

  uint64_t v57 = v12[17];
  int v58 = &v6[v57];
  int v59 = &v7[v57];
  if (v10(&v7[v57], 1LL, v8))
  {
    uint64_t v60 = sub_100183098(&qword_1006457E8);
    memcpy(v58, v59, *(void *)(*(void *)(v60 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v58, v59, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v58, 0LL, 1LL, v8);
  }

  uint64_t v61 = v12[18];
  uint64_t v62 = &v6[v61];
  uint64_t v63 = &v7[v61];
  *(_DWORD *)uint64_t v62 = *(_DWORD *)v63;
  v62[4] = v63[4];
  v6[v12[19]] = v7[v12[19]];
  *(_OWORD *)&v6[v12[20]] = *(_OWORD *)&v7[v12[20]];
  *(_OWORD *)&v6[v12[21]] = *(_OWORD *)&v7[v12[21]];
  *(_BYTE *)(a1 + *(int *)(a3 + 28)) = *(_BYTE *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t *sub_1001B282C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  sub_10018709C(a1 + 1);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  a1[5] = a2[5];
  uint64_t v105 = a3;
  uint64_t v106 = a2;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100183098(&qword_1006457E8);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v17 = v16[5];
  uint64_t v18 = &v8[v17];
  uint64_t v19 = &v9[v17];
  int v20 = v12(&v8[v17], 1LL, v10);
  int v21 = v12(v19, 1LL, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v19, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v18, 0LL, 1LL, v10);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_12:
    uint64_t v22 = sub_100183098(&qword_1006457E8);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v18, v19, v10);
LABEL_13:
  uint64_t v23 = v16[6];
  uint64_t v24 = &v8[v23];
  uint64_t v25 = &v9[v23];
  int v26 = v12(&v8[v23], 1LL, v10);
  int v27 = v12(v25, 1LL, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v24, v25, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v24, 0LL, 1LL, v10);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
LABEL_18:
    uint64_t v28 = sub_100183098(&qword_1006457E8);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v24, v25, v10);
LABEL_19:
  uint64_t v29 = v16[7];
  uint64_t v30 = &v8[v29];
  uint64_t v31 = &v9[v29];
  int v32 = v12(&v8[v29], 1LL, v10);
  int v33 = v12(v31, 1LL, v10);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v30, v31, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v30, 0LL, 1LL, v10);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
LABEL_24:
    uint64_t v34 = sub_100183098(&qword_1006457E8);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v30, v31, v10);
LABEL_25:
  uint64_t v35 = v16[8];
  uint64_t v36 = &v8[v35];
  uint64_t v37 = &v9[v35];
  int v38 = v12(&v8[v35], 1LL, v10);
  int v39 = v12(v37, 1LL, v10);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v36, v37, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v36, 0LL, 1LL, v10);
      goto LABEL_31;
    }

    goto LABEL_30;
  }

  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
LABEL_30:
    uint64_t v40 = sub_100183098(&qword_1006457E8);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64LL));
    goto LABEL_31;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v36, v37, v10);
LABEL_31:
  uint64_t v41 = v16[9];
  uint64_t v42 = &v8[v41];
  uint64_t v43 = &v9[v41];
  int v44 = v12(&v8[v41], 1LL, v10);
  int v45 = v12(v43, 1LL, v10);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v42, v43, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v42, 0LL, 1LL, v10);
      goto LABEL_37;
    }

    goto LABEL_36;
  }

  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
LABEL_36:
    uint64_t v46 = sub_100183098(&qword_1006457E8);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64LL));
    goto LABEL_37;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v42, v43, v10);
LABEL_37:
  uint64_t v47 = v16[10];
  uint64_t v48 = &v8[v47];
  uint64_t v49 = &v9[v47];
  int v50 = v12(&v8[v47], 1LL, v10);
  int v51 = v12(v49, 1LL, v10);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v48, v49, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v48, 0LL, 1LL, v10);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
LABEL_42:
    uint64_t v52 = sub_100183098(&qword_1006457E8);
    memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64LL));
    goto LABEL_43;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v48, v49, v10);
LABEL_43:
  uint64_t v53 = v16[11];
  uint64_t v54 = &v8[v53];
  uint64_t v55 = &v9[v53];
  int v56 = v12(&v8[v53], 1LL, v10);
  int v57 = v12(v55, 1LL, v10);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v54, v55, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v54, 0LL, 1LL, v10);
      goto LABEL_49;
    }

    goto LABEL_48;
  }

  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v10);
LABEL_48:
    uint64_t v58 = sub_100183098(&qword_1006457E8);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64LL));
    goto LABEL_49;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v54, v55, v10);
LABEL_49:
  uint64_t v59 = v16[12];
  uint64_t v60 = &v8[v59];
  uint64_t v61 = &v9[v59];
  int v62 = v12(&v8[v59], 1LL, v10);
  int v63 = v12(v61, 1LL, v10);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v60, v61, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v60, 0LL, 1LL, v10);
      goto LABEL_55;
    }

    goto LABEL_54;
  }

  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v60, v10);
LABEL_54:
    uint64_t v64 = sub_100183098(&qword_1006457E8);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64LL));
    goto LABEL_55;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v60, v61, v10);
LABEL_55:
  v8[v16[13]] = v9[v16[13]];
  uint64_t v65 = v16[14];
  uint64_t v66 = &v8[v65];
  uint64_t v67 = &v9[v65];
  int v68 = v12(&v8[v65], 1LL, v10);
  int v69 = v12(v67, 1LL, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v66, v67, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v66, 0LL, 1LL, v10);
      goto LABEL_61;
    }

    goto LABEL_60;
  }

  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v10);
LABEL_60:
    uint64_t v70 = sub_100183098(&qword_1006457E8);
    memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64LL));
    goto LABEL_61;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v66, v67, v10);
LABEL_61:
  uint64_t v71 = v16[15];
  uint64_t v72 = &v8[v71];
  uint64_t v73 = &v9[v71];
  int v74 = v12(&v8[v71], 1LL, v10);
  int v75 = v12(v73, 1LL, v10);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v72, v73, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v72, 0LL, 1LL, v10);
      goto LABEL_67;
    }

    goto LABEL_66;
  }

  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
LABEL_66:
    uint64_t v76 = sub_100183098(&qword_1006457E8);
    memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64LL));
    goto LABEL_67;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v72, v73, v10);
LABEL_67:
  uint64_t v77 = v16[16];
  uint64_t v78 = &v8[v77];
  uint64_t v79 = &v9[v77];
  int v80 = v12(&v8[v77], 1LL, v10);
  int v81 = v12(v79, 1LL, v10);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v78, v79, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v78, 0LL, 1LL, v10);
      goto LABEL_73;
    }

    goto LABEL_72;
  }

  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_72:
    uint64_t v82 = sub_100183098(&qword_1006457E8);
    memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64LL));
    goto LABEL_73;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v78, v79, v10);
LABEL_73:
  uint64_t v83 = v16[17];
  uint64_t v84 = &v8[v83];
  uint64_t v85 = &v9[v83];
  int v86 = v12(&v8[v83], 1LL, v10);
  int v87 = v12(v85, 1LL, v10);
  if (!v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v84, v85, v10);
      goto LABEL_79;
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v84, v10);
    goto LABEL_78;
  }

  if (v87)
  {
LABEL_78:
    uint64_t v88 = sub_100183098(&qword_1006457E8);
    memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64LL));
    goto LABEL_79;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v84, v85, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v84, 0LL, 1LL, v10);
LABEL_79:
  uint64_t v89 = v16[18];
  uint64_t v90 = &v8[v89];
  uint64_t v91 = &v9[v89];
  *(_DWORD *)uint64_t v90 = *(_DWORD *)v91;
  v90[4] = v91[4];
  v8[v16[19]] = v9[v16[19]];
  uint64_t v92 = v16[20];
  uint64_t v93 = &v8[v92];
  int v94 = &v9[v92];
  uint64_t v96 = *(void *)v94;
  uint64_t v95 = *((void *)v94 + 1);
  uint64_t v97 = *((void *)v93 + 1);
  *(void *)uint64_t v93 = v96;
  *((void *)v93 + 1) = v95;
  swift_bridgeObjectRelease(v97);
  uint64_t v98 = v16[21];
  uint64_t v99 = &v8[v98];
  uint64_t v100 = &v9[v98];
  uint64_t v102 = *(void *)v100;
  uint64_t v101 = *((void *)v100 + 1);
  uint64_t v103 = *((void *)v99 + 1);
  *(void *)uint64_t v99 = v102;
  *((void *)v99 + 1) = v101;
  swift_bridgeObjectRelease(v103);
  *((_BYTE *)a1 + *(int *)(v105 + 28)) = *((_BYTE *)v106 + *(int *)(v105 + 28));
  return a1;
}

uint64_t sub_1001B3270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001B327C);
}

uint64_t sub_1001B3280(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for SDAuthenticationSessionMetrics(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 24)],  a2,  v8);
  }

uint64_t sub_1001B32FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001B3308);
}

char *sub_1001B330C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for SDAuthenticationSessionMetrics(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 24)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1001B3380(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = "(";
  uint64_t result = type metadata accessor for SDAuthenticationSessionMetrics(319LL);
  if (v3 <= 0x3F)
  {
    _DWORD v4[2] = *(void *)(result - 8) + 64LL;
    void v4[3] = &unk_1004CD770;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1001B341C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B36B8(a1, a2, a3, (uint64_t)&type metadata for () + 8);
}

uint64_t sub_1001B342C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B3578( a1,  a2,  a3,  (uint64_t (*)(void))&type metadata accessor for SFAirDropReceive.ItemDestination);
}

uint64_t sub_1001B3438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6);
  if ((_DWORD)v8 == 1)
  {
    sub_100187100(a1, &qword_100646560);
    uint64_t v9 = 7168LL;
    uint64_t v10 = *(void *)(a3 + 16);
    if (v10)
    {
LABEL_3:
      uint64_t v11 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v10);
      swift_unknownObjectRetain(v10);
      uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      uint64_t v15 = v14;
      swift_unknownObjectRelease(v10);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v16 = TaskPriority.rawValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v9 = v16 | 0x1C00LL;
    uint64_t v10 = *(void *)(a3 + 16);
    if (v10) {
      goto LABEL_3;
    }
  }

  uint64_t v13 = 0LL;
  uint64_t v15 = 0LL;
LABEL_6:
  uint64_t v17 = sub_100183098(&qword_100646100);
  if (v15 | v13)
  {
    v20[0] = 0LL;
    v20[1] = 0LL;
    uint64_t v18 = v20;
    _OWORD v20[2] = v13;
    v20[3] = v15;
  }

  else
  {
    uint64_t v18 = 0LL;
  }

  return swift_task_create(v9, v18, v17, a2, a3);
}

uint64_t sub_1001B356C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B3578(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for SFAirDrop.ContactRequest);
}

uint64_t sub_1001B3578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v8 = type metadata accessor for TaskPriority(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, 1LL, v8) == 1)
  {
    sub_100187100(a1, &qword_100646560);
    uint64_t v10 = 7168LL;
    uint64_t v11 = *(void *)(a3 + 16);
    if (v11)
    {
LABEL_3:
      uint64_t v12 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v11);
      swift_unknownObjectRetain(v11);
      uint64_t v14 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v12);
      uint64_t v16 = v15;
      swift_unknownObjectRelease(v11);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v17 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    uint64_t v10 = v17 | 0x1C00LL;
    uint64_t v11 = *(void *)(a3 + 16);
    if (v11) {
      goto LABEL_3;
    }
  }

  uint64_t v14 = 0LL;
  uint64_t v16 = 0LL;
LABEL_6:
  uint64_t v18 = a4(0LL);
  if (v16 | v14)
  {
    v21[0] = 0LL;
    v21[1] = 0LL;
    uint64_t v19 = v21;
    id v21[2] = v14;
    v21[3] = v16;
  }

  else
  {
    uint64_t v19 = 0LL;
  }

  return swift_task_create(v10, v19, v18, a2, a3);
}

uint64_t sub_1001B36AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B36B8(a1, a2, a3, (uint64_t)&type metadata for Bool);
}

uint64_t sub_1001B36B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for TaskPriority(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, 1LL, v8) == 1)
  {
    sub_100187100(a1, &qword_100646560);
    uint64_t v10 = 7168LL;
    uint64_t v11 = *(void *)(a3 + 16);
    if (!v11)
    {
LABEL_6:
      unsigned __int8 v17 = 0LL;
      return swift_task_create(v10, v17, a4, a2, a3);
    }
  }

  else
  {
    unsigned __int8 v18 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    uint64_t v10 = v18 | 0x1C00LL;
    uint64_t v11 = *(void *)(a3 + 16);
    if (!v11) {
      goto LABEL_6;
    }
  }

  uint64_t v12 = *(void *)(a3 + 24);
  uint64_t ObjectType = swift_getObjectType(v11);
  swift_unknownObjectRetain(v11);
  uint64_t v14 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v12);
  uint64_t v16 = v15;
  swift_unknownObjectRelease(v11);
  if (!(v16 | v14)) {
    goto LABEL_6;
  }
  v20[0] = 0LL;
  v20[1] = 0LL;
  unsigned __int8 v17 = v20;
  _OWORD v20[2] = v14;
  v20[3] = v16;
  return swift_task_create(v10, v17, a4, a2, a3);
}

uint64_t sub_1001B37E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B3978(a1, a2, a3, (uint64_t)&unk_1005D37E0, (uint64_t)&type metadata for () + 8, (uint64_t)&unk_100649820);
}

uint64_t sub_1001B3808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    sub_100187100(a1, &qword_100646560);
    uint64_t v8 = 7168LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      uint64_t v10 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      uint64_t v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v8 = v15 | 0x1C00LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9) {
      goto LABEL_3;
    }
  }

  uint64_t v12 = 0LL;
  uint64_t v14 = 0LL;
LABEL_6:
  uint64_t v16 = swift_allocObject(&unk_1005D3650, 32LL, 7LL);
  *(void *)(v16 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  uint64_t v17 = sub_100183098(&qword_100646100);
  if (v14 | v12)
  {
    v20[0] = 0LL;
    v20[1] = 0LL;
    unsigned __int8 v18 = v20;
    _OWORD v20[2] = v12;
    v20[3] = v14;
  }

  else
  {
    unsigned __int8 v18 = 0LL;
  }

  return swift_task_create(v8, v18, v17, &unk_100646248, v16);
}

uint64_t sub_1001B395C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B3978(a1, a2, a3, (uint64_t)&unk_1005D3830, (uint64_t)&type metadata for Bool, (uint64_t)&unk_100646300);
}

uint64_t sub_1001B3978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for TaskPriority(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a1, 1LL, v12) == 1)
  {
    sub_100187100(a1, &qword_100646560);
    uint64_t v14 = 7168LL;
    uint64_t v15 = *(void *)(a3 + 16);
    if (v15)
    {
LABEL_3:
      uint64_t v16 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v15);
      swift_unknownObjectRetain(v15);
      uint64_t v18 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      uint64_t v20 = v19;
      swift_unknownObjectRelease(v15);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v21 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
    uint64_t v14 = v21 | 0x1C00LL;
    uint64_t v15 = *(void *)(a3 + 16);
    if (v15) {
      goto LABEL_3;
    }
  }

  uint64_t v18 = 0LL;
  uint64_t v20 = 0LL;
LABEL_6:
  uint64_t v22 = swift_allocObject(a4, 32LL, 7LL);
  *(void *)(v22 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v22 + 24) = a3;
  if (v20 | v18)
  {
    v25[0] = 0LL;
    v25[1] = 0LL;
    uint64_t v23 = v25;
    v25[2] = v18;
    v25[3] = v20;
  }

  else
  {
    uint64_t v23 = 0LL;
  }

  return swift_task_create(v14, v23, a5, a6, v22);
}

uint64_t sub_1001B3AC8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100186DFC(v0, qword_100645E00);
  uint64_t v1 = sub_100186DE4(v0, (uint64_t)qword_100645E00);
  if (qword_100643FD8 != -1) {
    swift_once(&qword_100643FD8, sub_10023A408);
  }
  uint64_t v2 = sub_100186DE4(v0, (uint64_t)qword_1006695F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

NSString sub_1001B3B58()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_1006693C8 = (uint64_t)result;
  return result;
}

NSString sub_1001B3B8C()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_1006693D0 = (uint64_t)result;
  return result;
}

NSString sub_1001B3BC0()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_1006693D8 = (uint64_t)result;
  return result;
}

uint64_t sub_1001B3BF4()
{
  uint64_t v1 = sub_100183098((uint64_t *)&unk_1006460C0);
  __chkstk_darwin(v1);
  unint64_t v3 = &v21[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v4 = type metadata accessor for SDNearFieldTap(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = &v21[-v10 - 8];
  __chkstk_darwin(v9);
  uint64_t v13 = &v21[-v12 - 8];
  uint64_t v14 = v0 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_processingTap;
  swift_beginAccess(v14, v21, 0LL, 0LL);
  sub_1001915A4(v14, (uint64_t)v3, (uint64_t *)&unk_1006460C0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1LL, v4) == 1)
  {
    sub_100187100((uint64_t)v3, (uint64_t *)&unk_1006460C0);
  }

  else
  {
    sub_1001A4B40((uint64_t)v3, (uint64_t)v13, type metadata accessor for SDNearFieldTap);
    uint64_t result = (uint64_t)[(id)objc_opt_self(SDStatusMonitor) sharedMonitor];
    if (!result)
    {
      __break(1u);
      return result;
    }

    uint64_t v16 = (void *)result;
    unsigned int v17 = [(id)result deviceKeyBagLocked];

    sub_1001A4B40((uint64_t)v13, (uint64_t)v11, type metadata accessor for SDNearFieldTap);
    if (v17)
    {
      int v18 = v11[*(int *)(v4 + 48)];
      sub_1001A4B40((uint64_t)v11, (uint64_t)v8, type metadata accessor for SDNearFieldTap);
      if (v18 == 1)
      {
        sub_1001A4BC8((uint64_t)v8, type metadata accessor for SDNearFieldTap);
        return 1LL;
      }

      uint64_t v19 = *(void *)&v8[*(int *)(v4 + 24) + 8];
      swift_bridgeObjectRetain(v19);
      sub_1001A4BC8((uint64_t)v8, type metadata accessor for SDNearFieldTap);
      if (v19)
      {
        swift_bridgeObjectRelease(v19);
        return 1LL;
      }
    }

    else
    {
      sub_1001A4BC8((uint64_t)v11, type metadata accessor for SDNearFieldTap);
    }
  }

  return 0LL;
}

uint64_t sub_1001B3E2C()
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1004CDC48);
  uint64_t v2 = swift_getKeyPath(&unk_1004CDC70);
  static Published.subscript.getter(v0, KeyPath, v2);
  swift_release(v2);
  return swift_release(KeyPath);
}

void (*sub_1001B3E90(void *a1))(void *a1)
{
  unint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t KeyPath = swift_getKeyPath(&unk_1004CDC48);
  v3[4] = KeyPath;
  uint64_t v5 = swift_getKeyPath(&unk_1004CDC70);
  v3[5] = v5;
  v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return sub_1001B3F08;
}

void sub_1001B3F08(void *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v2 = *(void *)(*a1 + 40LL);
  uint64_t v3 = *(void *)(*a1 + 32LL);
  (*(void (**)(void, void))(*a1 + 48LL))(*a1, 0LL);
  swift_release(v2);
  swift_release(v3);
  free(v1);
}

void sub_1001B3F54()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_notificationCenter);
  [v2 addObserver:v1 selector:"keyBagLockStateChangeWithNotification:" name:@"com.apple.sharingd.KeyBagLockStatusChanged" object:0];
  [v2 addObserver:v1 selector:"handleAirDropAllowedChanged" name:@"com.apple.sharingd.AirDropAllowedChanged" object:0];
  [v2 addObserver:v1 selector:"handleWifiStateChanged" name:@"com.apple.sharingd.WirelessPowerChanged" object:0];
  [v2 addObserver:v1 selector:"screenStateChangedWithNotification:" name:@"com.apple.sharingd.ScreenStateChanged" object:0];
  [v2 addObserver:v1 selector:"handleSystemUIChanged" name:@"com.apple.sharingd.SystemUIChanged" object:0];
  uint64_t v3 = sub_100183168(0LL, &qword_100646310, &OBJC_CLASS___NSDistributedNotificationCenter_ptr);
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v3);
  id v5 = [ObjCClassFromMetadata defaultCenter];
  if (qword_100643EC8 != -1) {
    swift_once(&qword_100643EC8, sub_1001B3B8C);
  }
  [v5 addObserver:v1 selector:"handleProximityAppleIDSignInStarted" name:qword_1006693D0 object:0];

  id v6 = [ObjCClassFromMetadata defaultCenter];
  if (qword_100643ED0 != -1) {
    swift_once(&qword_100643ED0, sub_1001B3BC0);
  }
  [v6 addObserver:v1 selector:"handleProximityAppleIDSignInCompleted" name:qword_1006693D8 object:0];

  int out_token = 0;
  uint64_t v7 = (const char *)[SFNotificationAirDropNearbySharingChanged UTF8String];
  uint64_t v8 = sub_100183168(0LL, (unint64_t *)&qword_100650E50, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v9 = (dispatch_queue_s *)static OS_dispatch_queue.main.getter(v8);
  uint64_t v10 = swift_allocObject(&unk_1005D3498, 24LL, 7LL);
  swift_unknownObjectWeakInit(v10 + 16, v1);
  uint64_t v12[4] = sub_1001CE158;
  uint64_t v13 = v10;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256LL;
  v12[2] = sub_1002C5880;
  uint64_t v12[3] = &unk_1005D3848;
  uint64_t v11 = _Block_copy(v12);
  swift_release(v13);
  notify_register_dispatch(v7, &out_token, v9, v11);
  _Block_release(v11);
}

id sub_1001B425C()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v0);
  [*(id *)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_notificationCenter] removeObserver:v0];
  uint64_t v2 = sub_100183168(0LL, &qword_100646310, &OBJC_CLASS___NSDistributedNotificationCenter_ptr);
  id v3 = [(id)swift_getObjCClassFromMetadata(v2) defaultCenter];
  [v3 removeObserver:v0];

  v5.receiver = v0;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, "dealloc");
}

uint64_t sub_1001B4540()
{
  return type metadata accessor for SDAirDropNearFieldService(0LL);
}

uint64_t type metadata accessor for SDAirDropNearFieldService(uint64_t a1)
{
  return sub_1001A4AD0(a1, (uint64_t *)&unk_100645EB8, (uint64_t)&nominal type descriptor for SDAirDropNearFieldService);
}

void sub_1001B455C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100183098(&qword_100645EE0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v142 = (uint64_t)&v138 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v141 = (char *)&v138 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v152 = (uint64_t)&v138 - v10;
  __chkstk_darwin(v9);
  v154 = (char *)&v138 - v11;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v156 = *(void *)(v12 - 8);
  uint64_t v157 = v12;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v144 = (char *)&v138 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  unsigned int v17 = (char *)&v138 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v138 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v148 = (char *)&v138 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v146 = (char *)&v138 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v151 = (char *)&v138 - v26;
  __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v138 - v27;
  uint64_t v29 = sub_100183098(&qword_10064DA60);
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v145 = (uint64_t)&v138 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v153 = (char *)&v138 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v36 = (char *)&v138 - v35;
  __chkstk_darwin(v34);
  int v38 = (char *)&v138 - v37;
  if (qword_100643EB8 != -1) {
    swift_once(&qword_100643EB8, sub_1001B3AC8);
  }
  uint64_t v39 = type metadata accessor for Logger(0LL);
  uint64_t v40 = sub_100186DE4(v39, (uint64_t)qword_100645E00);
  uint64_t v147 = a1;
  uint64_t v41 = sub_1001915A4(a1, (uint64_t)v38, &qword_10064DA60);
  uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
  os_log_type_t v43 = static os_log_type_t.default.getter();
  BOOL v44 = os_log_type_enabled(v42, v43);
  uint64_t v143 = v20;
  uint64_t v155 = v40;
  uint64_t v140 = v17;
  if (v44)
  {
    v149 = v28;
    uint64_t v150 = v2;
    int v45 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v46 = swift_slowAlloc(32LL, -1LL);
    v161[0] = v46;
    *(_DWORD *)int v45 = 136315138;
    sub_1001915A4((uint64_t)v38, (uint64_t)v36, &qword_10064DA60);
    uint64_t v48 = v156;
    uint64_t v47 = v157;
    uint64_t v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v156 + 48))(v36, 1LL, v157);
    if ((_DWORD)v49 == 1)
    {
      sub_100187100((uint64_t)v36, &qword_10064DA60);
      unint64_t v50 = 0xEA00000000004449LL;
      uint64_t v51 = 0x20746E6572727563LL;
    }

    else
    {
      uint64_t v51 = UUID.uuidString.getter(v49);
      unint64_t v50 = v52;
      (*(void (**)(char *, uint64_t))(v48 + 8))(v36, v47);
    }

    uint64_t v158 = sub_10018CDB4(v51, v50, v161);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v45 + 4, v45 + 12);
    swift_bridgeObjectRelease(v50);
    sub_100187100((uint64_t)v38, &qword_10064DA60);
    _os_log_impl( (void *)&_mh_execute_header,  v42,  v43,  "SDAirDropNearFieldService: requested end nearby sharing interaction:%s",  v45,  0xCu);
    swift_arrayDestroy(v46, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1LL, -1LL);
    swift_slowDealloc(v45, -1LL, -1LL);

    uint64_t v28 = v149;
    uint64_t v2 = v150;
  }

  else
  {
    sub_100187100((uint64_t)v38, &qword_10064DA60);
  }

  uint64_t v53 = (uint64_t)&v2[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction];
  swift_beginAccess( &v2[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction],  v161,  0LL,  0LL);
  uint64_t v139 = v53;
  uint64_t v54 = v53;
  uint64_t v55 = v152;
  sub_1001915A4(v54, v152, &qword_100645EE0);
  uint64_t v56 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0LL);
  uint64_t v57 = *(void *)(v56 - 8);
  uint64_t v58 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 48);
  int v59 = v58(v55, 1LL, v56);
  uint64_t v60 = v157;
  if (v59 == 1)
  {
    uint64_t v61 = v56;
    int v62 = v28;
    uint64_t v63 = v57;
    uint64_t v64 = v157;
    uint64_t v65 = v55;
    uint64_t KeyPath = swift_getKeyPath(&unk_1004CDC48);
    uint64_t v67 = swift_getKeyPath(&unk_1004CDC70);
    int v68 = v154;
    static Published.subscript.getter(v2, KeyPath, v67);
    swift_release(v67);
    uint64_t v69 = (uint64_t)v68;
    swift_release(KeyPath);
    uint64_t v70 = v65;
    uint64_t v60 = v64;
    uint64_t v57 = v63;
    uint64_t v28 = v62;
    uint64_t v56 = v61;
    sub_100187100(v70, &qword_100645EE0);
  }

  else
  {
    uint64_t v69 = (uint64_t)v154;
    (*(void (**)(char *, uint64_t, uint64_t))(v57 + 32))(v154, v55, v56);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v57 + 56))(v69, 0LL, 1LL, v56);
  }

  uint64_t v71 = (uint64_t)v153;
  if (v58(v69, 1LL, v56) == 1)
  {
    sub_100187100(v69, &qword_100645EE0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v156 + 56))(v71, 1LL, 1LL, v60);
LABEL_15:
    uint64_t v74 = sub_100187100(v71, &qword_10064DA60);
    int v75 = (os_log_s *)Logger.logObject.getter(v74);
    os_log_type_t v76 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v77 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v77 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v75,  v76,  "SDAirDropNearFieldService: ignoring request to end request nearby sharing interaction, no current interaction",  v77,  2u);
      swift_slowDealloc(v77, -1LL, -1LL);
    }

    return;
  }

  SFAirDrop.NearbySharingInteraction.id.getter();
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v69, v56);
  uint64_t v72 = v156;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v156 + 56))(v71, 0LL, 1LL, v60);
  uint64_t v73 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
  if (v73(v71, 1LL, v60) == 1) {
    goto LABEL_15;
  }
  uint64_t v150 = v2;
  uint64_t v78 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 32);
  v78(v28, v71, v60);
  uint64_t v79 = v145;
  sub_1001915A4(v147, v145, &qword_10064DA60);
  int v80 = *(void (**)(char *, char *, uint64_t))(v72 + 16);
  int v81 = v146;
  v80(v146, v28, v60);
  if (v73(v79, 1LL, v60) == 1)
  {
    uint64_t v82 = v81;
    uint64_t v83 = (uint64_t)v151;
    v78(v151, (uint64_t)v82, v60);
    sub_100187100(v79, &qword_10064DA60);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v72 + 8))(v81, v60);
    uint64_t v83 = (uint64_t)v151;
    v78(v151, v79, v60);
  }

  char v84 = static UUID.== infix(_:_:)(v28, v83);
  uint64_t v85 = v148;
  if ((v84 & 1) != 0)
  {
    v149 = v28;
    uint64_t v86 = ((uint64_t (*)(char *, uint64_t, uint64_t))v80)(v148, v83, v60);
    int v87 = (os_log_s *)Logger.logObject.getter(v86);
    os_log_type_t v88 = static os_log_type_t.default.getter();
    BOOL v89 = os_log_type_enabled(v87, v88);
    v154 = (char *)v80;
    if (v89)
    {
      uint64_t v90 = v85;
      uint64_t v91 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v92 = swift_slowAlloc(32LL, -1LL);
      uint64_t v158 = v92;
      *(_DWORD *)uint64_t v91 = 136315138;
      uint64_t v93 = sub_100183F14( (unint64_t *)&qword_1006460B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v94 = dispatch thunk of CustomStringConvertible.description.getter(v157, v93);
      unint64_t v96 = v95;
      uint64_t v160 = sub_10018CDB4(v94, v95, &v158);
      uint64_t v60 = v157;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161, v91 + 4, v91 + 12);
      swift_bridgeObjectRelease(v96);
      uint64_t v97 = *(void (**)(char *, uint64_t))(v156 + 8);
      v97(v90, v60);
      _os_log_impl( (void *)&_mh_execute_header,  v87,  v88,  "SDAirDropNearFieldService: end nearby sharing interaction:%s",  v91,  0xCu);
      swift_arrayDestroy(v92, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v98 = v92;
      uint64_t v83 = (uint64_t)v151;
      swift_slowDealloc(v98, -1LL, -1LL);
      swift_slowDealloc(v91, -1LL, -1LL);
    }

    else
    {
      uint64_t v97 = *(void (**)(char *, uint64_t))(v156 + 8);
      v97(v85, v60);
    }

    unint64_t v117 = v150;
    sub_1003035FC(v83);
    uint64_t v118 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56);
    uint64_t v119 = (uint64_t)v141;
    v118(v141, 1LL, 1LL, v56);
    uint64_t v120 = v139;
    swift_beginAccess(v139, &v158, 33LL, 0LL);
    sub_1001C9860(v119, v120, &qword_100645EE0);
    swift_endAccess(&v158);
    v118((char *)v119, 1LL, 1LL, v56);
    uint64_t v121 = swift_getKeyPath(&unk_1004CDC48);
    uint64_t v122 = swift_getKeyPath(&unk_1004CDC70);
    uint64_t v123 = v142;
    sub_1001915A4(v119, v142, &qword_100645EE0);
    unint64_t v124 = v117;
    static Published.subscript.setter(v123, v124, v121, v122);
    sub_100187100(v119, &qword_100645EE0);
    uint64_t v125 = v143;
    uint64_t v126 = ((uint64_t (*)(char *, uint64_t, uint64_t))v154)(v143, v83, v60);
    uint64_t v127 = (os_log_s *)Logger.logObject.getter(v126);
    os_log_type_t v128 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v127, v128))
    {
      unint64_t v129 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v130 = swift_slowAlloc(32LL, -1LL);
      uint64_t v158 = v130;
      *(_DWORD *)unint64_t v129 = 136315138;
      uint64_t v131 = sub_100183F14( (unint64_t *)&qword_1006460B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v132 = dispatch thunk of CustomStringConvertible.description.getter(v157, v131);
      unint64_t v134 = v133;
      uint64_t v160 = sub_10018CDB4(v132, v133, &v158);
      uint64_t v60 = v157;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161, v129 + 4, v129 + 12);
      swift_bridgeObjectRelease(v134);
      v97(v125, v60);
      _os_log_impl( (void *)&_mh_execute_header,  v127,  v128,  "SDAirDropNearFieldService: Removing all assertions for nearby sharing interaction:%s",  v129,  0xCu);
      swift_arrayDestroy(v130, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v135 = v130;
      uint64_t v83 = (uint64_t)v151;
      swift_slowDealloc(v135, -1LL, -1LL);
      swift_slowDealloc(v129, -1LL, -1LL);
    }

    else
    {
      v97(v125, v60);
    }

    swift_beginAccess( &v124[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_assertionsByNearbySharingInteractionID],  &v158,  33LL,  0LL);
    uint64_t v137 = sub_1001C9540(v83);
    swift_endAccess(&v158);
    swift_bridgeObjectRelease(v137);
    sub_1001BB690();
    uint64_t v116 = (char *)v83;
  }

  else
  {
    uint64_t v99 = v140;
    v80(v140, (char *)v83, v60);
    uint64_t v100 = v144;
    uint64_t v101 = ((uint64_t (*)(char *, char *, uint64_t))v80)(v144, v28, v60);
    uint64_t v102 = (void *)Logger.logObject.getter(v101);
    uint64_t v103 = v28;
    os_log_type_t v104 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled((os_log_t)v102, v104))
    {

      v136 = *(void (**)(char *, uint64_t))(v72 + 8);
      v136(v100, v60);
      v136(v99, v60);
      v136((char *)v83, v60);
      v136(v103, v60);
      return;
    }

    uint64_t v105 = v72;
    uint64_t v106 = swift_slowAlloc(22LL, -1LL);
    uint64_t v155 = swift_slowAlloc(64LL, -1LL);
    uint64_t v158 = v155;
    *(_DWORD *)uint64_t v106 = 136315394;
    uint64_t v107 = sub_100183F14( (unint64_t *)&qword_1006460B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    v149 = v103;
    uint64_t v108 = dispatch thunk of CustomStringConvertible.description.getter(v60, v107);
    unint64_t v110 = v109;
    uint64_t v160 = sub_10018CDB4(v108, v109, &v158);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161, v106 + 4, v106 + 12);
    swift_bridgeObjectRelease(v110);
    uint64_t v97 = *(void (**)(char *, uint64_t))(v105 + 8);
    v97(v99, v60);
    *(_WORD *)(v106 + 12) = 2080;
    unint64_t v111 = v144;
    uint64_t v112 = dispatch thunk of CustomStringConvertible.description.getter(v60, v107);
    unint64_t v114 = v113;
    uint64_t v160 = sub_10018CDB4(v112, v113, &v158);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161, v106 + 14, v106 + 22);
    swift_bridgeObjectRelease(v114);
    v97(v111, v60);
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v102,  v104,  "SDAirDropNearFieldService: ignoring request to end nearby sharing interaction:%s currentID:%s",  (uint8_t *)v106,  0x16u);
    uint64_t v115 = v155;
    swift_arrayDestroy(v155, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v115, -1LL, -1LL);
    swift_slowDealloc(v106, -1LL, -1LL);

    uint64_t v116 = v151;
  }

  v97(v116, v60);
  v97(v149, v60);
}

void sub_1001B52F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v85 = a2;
  uint64_t v86 = a1;
  uint64_t v6 = sub_100183098(&qword_10064DA60);
  __chkstk_darwin(v6);
  uint64_t v78 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v73 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v74 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State(0LL);
  uint64_t v76 = *(void *)(v10 - 8);
  uint64_t v77 = v10;
  __chkstk_darwin(v10);
  int v75 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v14);
  int v80 = (char *)&v68 - v18;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v68 - v19;
  if (qword_100643EB8 != -1) {
    swift_once(&qword_100643EB8, sub_1001B3AC8);
  }
  uint64_t v21 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v21, (uint64_t)qword_100645E00);
  uint64_t v72 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v22 = v72(v20, a3, v12);
  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.default.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  uint64_t v84 = v13;
  if (v25)
  {
    uint64_t v79 = v8;
    uint64_t v26 = swift_slowAlloc(12LL, -1LL);
    uint64_t v83 = v3;
    uint64_t v27 = (uint8_t *)v26;
    uint64_t v28 = swift_slowAlloc(32LL, -1LL);
    int v81 = v16;
    uint64_t v29 = v28;
    uint64_t v89 = v28;
    uint64_t v82 = a3;
    *(_DWORD *)uint64_t v27 = 136315138;
    uint64_t v30 = sub_100183F14( &qword_100646218,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType,  (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType);
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter(v12, v30);
    unint64_t v33 = v32;
    uint64_t v87 = sub_10018CDB4(v31, v32, &v89);
    a3 = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v27 + 4, v27 + 12);
    swift_bridgeObjectRelease(v33);
    uint64_t v34 = *(void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v8 = v79;
    v34(v20, v12);
    os_log_type_t v35 = v24;
    uint64_t v36 = v34;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  v35,  "SDAirDropNearFieldService: connected… for interactionType:%s",  v27,  0xCu);
    swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v37 = v29;
    uint64_t v16 = v81;
    swift_slowDealloc(v37, -1LL, -1LL);
    int v38 = v27;
    uint64_t v4 = v83;
    swift_slowDealloc(v38, -1LL, -1LL);
  }

  else
  {
    uint64_t v36 = *(void (**)(char *, uint64_t))(v13 + 8);
    v36(v20, v12);
  }

  uint64_t v39 = sub_1001B3E90(&v89);
  uint64_t v41 = v40;
  uint64_t v42 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0LL);
  os_log_type_t v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 48LL);
  uint64_t v79 = v41;
  if (v43(v41, 1LL, v42))
  {
    ((void (*)(uint64_t *, void))v39)(&v89, 0LL);
  }

  else
  {
    v72(v80, a3, v12);
    BOOL v44 = (int *)type metadata accessor for SDNearFieldTap(0LL);
    uint64_t v45 = v44[15];
    int v81 = v16;
    uint64_t v46 = v86;
    uint64_t v72 = (uint64_t (*)(char *, uint64_t, uint64_t))v36;
    uint64_t v48 = v73;
    uint64_t v47 = v74;
    uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 16);
    v49(v74, v86 + v45, v8);
    uint64_t v71 = (void (*)(uint64_t *, void))v39;
    unint64_t v50 = v78;
    v49(v78, v85, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v50, 0LL, 1LL, v8);
    uint64_t v51 = v44[7];
    unint64_t v52 = (uint64_t *)(v46 + v44[6]);
    uint64_t v70 = *v52;
    uint64_t v83 = v4;
    uint64_t v53 = v52[1];
    uint64_t v54 = *(void *)(v46 + v51 + 8);
    uint64_t v73 = *(void *)(v46 + v51);
    uint64_t v55 = v44[9];
    uint64_t v56 = (uint64_t *)(v46 + v44[8]);
    uint64_t v57 = v56[1];
    uint64_t v69 = *v56;
    uint64_t v82 = a3;
    uint64_t v58 = *(void *)(v46 + v55);
    uint64_t v59 = *(void *)(v46 + v55 + 8);
    LOBYTE(v44) = *(_BYTE *)(v46 + v44[12]);
    uint64_t v16 = v81;
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRetain(v54);
    swift_bridgeObjectRetain(v57);
    char v67 = (char)v44;
    uint64_t v60 = v75;
    uint64_t v61 = v54;
    uint64_t v36 = (void (*)(char *, uint64_t))v72;
    SFAirDrop.NearbySharingInteraction.ConnectionContext.init(type:transactionIdentifier:endpointIdentifier:contactIdentifier:deviceName:deviceModel:accountID:isSameAccount:)( v80,  v47,  v50,  v70,  v53,  v73,  v61,  v69,  v57,  v58,  v59,  v67);
    (*(void (**)(char *, void, uint64_t))(v76 + 104))( v60,  enum case for SFAirDrop.NearbySharingInteraction.State.connected(_:),  v77);
    SFAirDrop.NearbySharingInteraction.state.setter(v60);
    v71(&v89, 0LL);
  }

  (*(void (**)(char *, void, uint64_t))(v84 + 104))( v16,  enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.meet(_:),  v12);
  uint64_t v62 = sub_100183F14( &qword_100646210,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType,  (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType);
  dispatch thunk of RawRepresentable.rawValue.getter(&v89, v12, v62);
  dispatch thunk of RawRepresentable.rawValue.getter(&v87, v12, v62);
  uint64_t v63 = v90;
  uint64_t v64 = v88;
  if (v89 == v87 && v90 == v88)
  {
    swift_bridgeObjectRelease_n(v90, 2LL);
    v36(v16, v12);
  }

  else
  {
    char v65 = _stringCompareWithSmolCheck(_:_:expecting:)(v89, v90, v87, v88, 0LL);
    swift_bridgeObjectRelease(v63);
    swift_bridgeObjectRelease(v64);
    v36(v16, v12);
    if ((v65 & 1) == 0) {
      return;
    }
  }

  uint64_t v66 = type metadata accessor for SDNearFieldTap(0LL);
  sub_1001B58F0(v85, (*(_BYTE *)(v86 + *(int *)(v66 + 44)) & 1) == 0, v86 + *(int *)(v66 + 60));
}

void sub_1001B58F0(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v51 = a3;
  uint64_t v5 = sub_100183098(&qword_100646560);
  __chkstk_darwin(v5);
  uint64_t v53 = (uint64_t)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v47 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v47 - v15;
  if (qword_100643EB8 != -1) {
    swift_once(&qword_100643EB8, sub_1001B3AC8);
  }
  uint64_t v17 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v17, (uint64_t)qword_100645E00);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v52 = a1;
  uint64_t v49 = v18;
  uint64_t v19 = ((uint64_t (*)(char *, uint64_t, uint64_t))v18)(v16, a1, v7);
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.default.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v54 = v8;
  if (v22)
  {
    uint64_t v23 = swift_slowAlloc(18LL, -1LL);
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    uint64_t v47 = v14;
    uint64_t v25 = v24;
    uint64_t v56 = v24;
    *(_DWORD *)uint64_t v23 = 67109378;
    LODWORD(v55) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, (char *)&v55 + 4, v23 + 4, v23 + 8);
    *(_WORD *)(v23 + _Block_object_dispose(va, 8) = 2080;
    uint64_t v48 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v26 = sub_100183F14( (unint64_t *)&qword_1006460B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter(v7, v26);
    unint64_t v29 = v28;
    uint64_t v55 = sub_10018CDB4(v27, v28, &v56);
    uint64_t v11 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v23 + 10, v23 + 18);
    swift_bridgeObjectRelease(v29);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v16, v7);
    _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "SDAirDropNearFieldService: start NameDrop flow {isActive: %{BOOL}d endpointIdentifier: %s}",  (uint8_t *)v23,  0x12u);
    swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v30 = v25;
    uint64_t v14 = v47;
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v16, v7);
  }

  uint64_t v31 = v52;
  if ((a2 & 1) != 0)
  {
    uint64_t v32 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56LL))(v53, 1LL, 1LL, v32);
    uint64_t v33 = v31;
    uint64_t v34 = v49;
    v49(v14, v33, v7);
    v34(v11, v51, v7);
    uint64_t v35 = qword_100643F28;
    id v36 = v50;
    uint64_t v37 = v14;
    if (v35 != -1) {
      swift_once(&qword_100643F28, sub_100205C24);
    }
    uint64_t v38 = static AirDropActor.shared;
    uint64_t v39 = sub_100183F14( (unint64_t *)&qword_100656410,  (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor,  (uint64_t)&protocol conformance descriptor for AirDropActor);
    uint64_t v40 = v54;
    uint64_t v41 = *(unsigned __int8 *)(v54 + 80);
    uint64_t v42 = (v41 + 40) & ~v41;
    uint64_t v43 = (v9 + v41 + v42) & ~v41;
    BOOL v44 = (char *)swift_allocObject(&unk_1005D3628, v43 + v9, v41 | 7);
    *((void *)v44 + 2) = v38;
    *((void *)v44 + 3) = v39;
    *((void *)v44 + 4) = v36;
    uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
    v45(&v44[v42], v37, v7);
    v45(&v44[v43], v11, v7);
    swift_retain(v38);
    uint64_t v46 = sub_1001B3978( v53,  (uint64_t)&unk_100646228,  (uint64_t)v44,  (uint64_t)&unk_1005D37E0,  (uint64_t)&type metadata for () + 8,  (uint64_t)&unk_100649820);
    swift_release(v46);
  }

BOOL sub_1001B5D08(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  if (!v3) {
    return 0LL;
  }
  id v4 = [v3 currentApplicationLabel];
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v8 = v7;

  uint64_t v9 = type metadata accessor for SDNearFieldTap(0LL);
  uint64_t v10 = (uint64_t *)(a1 + *(int *)(v9 + 40));
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  uint64_t v20 = v12;
  uint64_t v21 = v11;
  uint64_t v18 = 0x746E6563656D6167LL;
  unint64_t v19 = 0xEA00000000007265LL;
  unint64_t v13 = sub_1001CCE8C();
  if ((StringProtocol.contains<A>(_:)(&v18, &type metadata for String, &type metadata for String, v13, v13) & 1) != 0)
  {
    swift_bridgeObjectRelease(v8);
  }

  else
  {
    uint64_t v20 = v6;
    uint64_t v21 = v8;
    uint64_t v18 = 0x746E6563656D6167LL;
    unint64_t v19 = 0xEA00000000007265LL;
    char v14 = StringProtocol.contains<A>(_:)(&v18, &type metadata for String, &type metadata for String, v13, v13);
    swift_bridgeObjectRelease(v8);
    if ((v14 & 1) == 0) {
      return 0LL;
    }
  }

  int v15 = *(unsigned __int8 *)(a1 + *(int *)(v9 + 68));
  return v15 != 2 && (v15 & 1) == 0;
}

uint64_t sub_1001B5E4C(uint64_t a1)
{
  uint64_t v3 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController;
  uint64_t result = *(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  if (!result) {
    return result;
  }
  uint64_t v5 = v1;
  uint64_t v6 = &selRef_btAddr;
  id v7 = [(id)result currentApplicationLabel];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v11 = v10;

    uint64_t v12 = type metadata accessor for SDNearFieldTap(0LL);
    unint64_t v13 = (uint64_t *)(a1 + *(int *)(v12 + 40));
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    uint64_t v34 = v15;
    uint64_t v35 = v14;
    uint64_t v32 = 0x746E6563656D6167LL;
    unint64_t v33 = 0xEA00000000007265LL;
    unint64_t v16 = sub_1001CCE8C();
    if ((StringProtocol.contains<A>(_:)(&v32, &type metadata for String, &type metadata for String, v16, v16) & 1) != 0)
    {
      swift_bridgeObjectRelease(v11);
      uint64_t v6 = &selRef_btAddr;
    }

    else
    {
      uint64_t v34 = v9;
      uint64_t v35 = v11;
      uint64_t v32 = 0x746E6563656D6167LL;
      unint64_t v33 = 0xEA00000000007265LL;
      char v17 = StringProtocol.contains<A>(_:)(&v32, &type metadata for String, &type metadata for String, v16, v16);
      swift_bridgeObjectRelease(v11);
      uint64_t v6 = &selRef_btAddr;
      if ((v17 & 1) == 0) {
        goto LABEL_10;
      }
    }

    int v18 = *(unsigned __int8 *)(a1 + *(int *)(v12 + 68));
    if (v18 != 2 && (v18 & 1) == 0) {
      return 0LL;
    }
  }

BOOL sub_1001B60F4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SDNearFieldTap(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  if (!v6) {
    return 0;
  }
  id v7 = [v6 currentApplicationLabel];
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v7;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v10 = v9;

  type metadata accessor for SFAirDropClient(0LL);
  v11._countAndFlagsBits = ((uint64_t (*)(void))static SFAirDropClient.nearFieldApplicationLabel.getter)();
  object = v11._object;
  Swift::Bool v13 = String.hasPrefix(_:)(v11);
  swift_bridgeObjectRelease(object);
  swift_bridgeObjectRelease(v10);
  uint64_t v14 = sub_1001A4B84(a1, (uint64_t)v5, type metadata accessor for SDNearFieldTap);
  if (!v13)
  {
    v15._countAndFlagsBits = static SFAirDropClient.nearFieldApplicationLabel.getter(v14);
    unint64_t v16 = v15._object;
    Swift::Bool v17 = String.hasPrefix(_:)(v15);
    swift_bridgeObjectRelease(v16);
    sub_1001A4BC8((uint64_t)v5, type metadata accessor for SDNearFieldTap);
    if (v17) {
      return !sub_1001B5D08(a1);
    }
    return 0;
  }

  sub_1001A4BC8((uint64_t)v5, type metadata accessor for SDNearFieldTap);
  return !sub_1001B5D08(a1);
}

uint64_t sub_1001B6260(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SDNearFieldTap(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  if (v6 && (id v7 = [v6 currentApplicationLabel]) != 0)
  {
    uint64_t v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v11 = v10;

    if (v9 == 0xD00000000000001BLL && v11 == 0x80000001005047E0LL)
    {
      swift_bridgeObjectRelease(0x80000001005047E0LL);
      sub_1001A4B84(a1, (uint64_t)v5, type metadata accessor for SDNearFieldTap);
      char v12 = 1;
    }

    else
    {
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v11, 0xD00000000000001BLL, 0x80000001005047E0LL, 0LL);
      swift_bridgeObjectRelease(v11);
      sub_1001A4B84(a1, (uint64_t)v5, type metadata accessor for SDNearFieldTap);
      if ((v13 & 1) != 0
        || (uint64_t v14 = &v5[*(int *)(v3 + 40)], v15 = *((void *)v14 + 1), *(void *)v14 == 0xD00000000000001BLL)
        && v15 == 0x80000001005047E0LL)
      {
        char v12 = 1;
      }

      else
      {
        char v12 = _stringCompareWithSmolCheck(_:_:expecting:)( *(void *)v14,  v15,  0xD00000000000001BLL,  0x80000001005047E0LL,  0LL);
      }
    }

    sub_1001A4BC8((uint64_t)v5, type metadata accessor for SDNearFieldTap);
  }

  else
  {
    char v12 = 0;
  }

  return v12 & 1;
}

uint64_t sub_1001B63F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SDNearFieldTap(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100183098(&qword_100646258);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v10 = sub_1001B6260(a1);
  sub_100183168(0LL, (unint64_t *)&qword_100645140, &OBJC_CLASS___NSUserDefaults_ptr);
  uint64_t v11 = (void *)static NSUserDefaults.airdrop.getter();
  SFAirDropUserDefaults.boopInteractionTypeOverride.getter();

  uint64_t v12 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  sub_100187100((uint64_t)v9, &qword_100646258);
  if ((v10 & 1) != 0)
  {
    uint64_t v14 = (unsigned int *)&enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.peerPayment(_:);
  }

  else if (sub_1001B60F4(a1))
  {
    uint64_t v14 = (unsigned int *)&enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.airDrop(_:);
  }

  else if ((sub_1001B5E4C(a1) & 1) != 0)
  {
    uint64_t v14 = (unsigned int *)&enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.generic(_:);
  }

  else if (sub_1001CD094(a1))
  {
    uint64_t v14 = (unsigned int *)&enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.meet(_:);
  }

  else
  {
    int v16 = *(unsigned __int8 *)(a1 + *(int *)(v4 + 48));
    sub_1001A4B84(a1, (uint64_t)v6, type metadata accessor for SDNearFieldTap);
    if (v16 == 1)
    {
      sub_1001A4BC8((uint64_t)v6, type metadata accessor for SDNearFieldTap);
    }

    else
    {
      uint64_t v17 = *(void *)&v6[*(int *)(v4 + 24) + 8];
      sub_1001A4BC8((uint64_t)v6, type metadata accessor for SDNearFieldTap);
      if (!v17)
      {
        uint64_t v14 = (unsigned int *)&enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.unknown(_:);
        return (*(uint64_t (**)(uint64_t, void, uint64_t))(v13 + 104))(a2, *v14, v12);
      }
    }

    uint64_t v14 = (unsigned int *)&enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.share(_:);
  }

  return (*(uint64_t (**)(uint64_t, void, uint64_t))(v13 + 104))(a2, *v14, v12);
}

uint64_t sub_1001B661C(uint64_t a1, uint64_t a2)
{
  uint64_t v101 = a1;
  uint64_t v3 = type metadata accessor for SFAirDrop.NearbySharingDiscovery.PollingType(0LL);
  uint64_t v95 = *(void *)(v3 - 8);
  uint64_t v96 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v93 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v94 = (char *)&v81 - v6;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v87 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v88 = (char *)&v81 - v11;
  uint64_t v12 = sub_100183098((uint64_t *)&unk_100646110);
  __chkstk_darwin(v12);
  uint64_t v91 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100183098(&qword_10064DA60);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v86 = (char *)&v81 - v18;
  uint64_t v19 = sub_100183098(&qword_100645EE0);
  __chkstk_darwin(v19);
  uint64_t v90 = (char *)&v81 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for SFClientIdentity(0LL);
  uint64_t v98 = *(void *)(v21 - 8);
  uint64_t v99 = v21;
  __chkstk_darwin(v21);
  uint64_t v97 = (char *)&v81 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for SFAirDrop.NearbySharingDiscovery.Request(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  Swift::String v26 = (char *)&v81 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643EB8 != -1) {
    swift_once(&qword_100643EB8, sub_1001B3AC8);
  }
  uint64_t v27 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v27, (uint64_t)qword_100645E00);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v26, v101, v23);
  uint64_t v89 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v98 + 16);
  uint64_t v28 = v89(v97, a2, v99);
  Swift::String v29 = (os_log_s *)Logger.logObject.getter(v28);
  os_log_type_t v30 = static os_log_type_t.default.getter();
  int v31 = v30;
  BOOL v32 = os_log_type_enabled(v29, v30);
  uint64_t v92 = v17;
  if (v32)
  {
    uint64_t v33 = swift_slowAlloc(22LL, -1LL);
    uint64_t v84 = swift_slowAlloc(64LL, -1LL);
    v103[0] = v84;
    *(_DWORD *)uint64_t v33 = 136315394;
    uint64_t v85 = v8;
    int v83 = v31;
    os_log_t v82 = v29;
    uint64_t v34 = ((uint64_t (*)(void))SFAirDrop.NearbySharingDiscovery.Request.applicationLabel.getter)();
    unint64_t v36 = v35;
    uint64_t v102 = sub_10018CDB4(v34, v35, v103);
    uint64_t v8 = v85;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, v103, v33 + 4, v33 + 12);
    swift_bridgeObjectRelease(v36);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    *(_WORD *)(v33 + 12) = 2080;
    uint64_t v37 = sub_100183F14( &qword_100646150,  (uint64_t (*)(uint64_t))&type metadata accessor for SFClientIdentity,  (uint64_t)&protocol conformance descriptor for SFClientIdentity);
    uint64_t v38 = v97;
    uint64_t v39 = v99;
    uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter(v99, v37);
    unint64_t v42 = v41;
    uint64_t v102 = sub_10018CDB4(v40, v41, v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, v103, v33 + 14, v33 + 22);
    swift_bridgeObjectRelease(v42);
    uint64_t v43 = v98;
    (*(void (**)(char *, uint64_t))(v98 + 8))(v38, v39);
    os_log_t v44 = v82;
    _os_log_impl( (void *)&_mh_execute_header,  v82,  (os_log_type_t)v83,  "SDAirDropNearFieldService: start active nearby sharing discovery: %s for client: %s",  (uint8_t *)v33,  0x16u);
    uint64_t v45 = v84;
    swift_arrayDestroy(v84, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1LL, -1LL);
    swift_slowDealloc(v33, -1LL, -1LL);

    uint64_t v46 = v39;
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    uint64_t v43 = v98;
    uint64_t v46 = v99;
    (*(void (**)(char *, uint64_t))(v98 + 8))(v97, v99);
  }

  uint64_t KeyPath = swift_getKeyPath(&unk_1004CDC48);
  uint64_t v48 = swift_getKeyPath(&unk_1004CDC70);
  uint64_t v49 = (uint64_t)v90;
  static Published.subscript.getter(v100, KeyPath, v48);
  swift_release(KeyPath);
  swift_release(v48);
  uint64_t v50 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0LL);
  LODWORD(KeyPath) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 48LL))(v49, 1LL, v50);
  uint64_t v51 = sub_100187100(v49, &qword_100645EE0);
  if ((_DWORD)KeyPath != 1)
  {
    uint64_t v52 = (uint64_t)v86;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v86, 1LL, 1LL, v7);
    sub_1001B455C(v52);
    uint64_t v51 = sub_100187100(v52, &qword_10064DA60);
  }

  uint64_t v53 = SFAirDrop.NearbySharingDiscovery.Request.applicationLabel.getter(v51);
  uint64_t v55 = v54;
  uint64_t v56 = (uint64_t)v91;
  v89(v91, a2, v46);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v56, 0LL, 1LL, v46);
  swift_beginAccess( v100 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbyDiscoveryClientForLabel,  v103,  33LL,  0LL);
  sub_1002E51D8(v56, v53, v55);
  uint64_t v57 = swift_endAccess(v103);
  uint64_t v58 = (uint64_t)v92;
  SFClientIdentity.connectionID.getter(v57);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v58, 1LL, v7) == 1)
  {
    uint64_t v59 = sub_100187100(v58, &qword_10064DA60);
  }

  else
  {
    uint64_t v60 = v88;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v88, v58, v7);
    uint64_t v61 = (uint64_t)v87;
    uint64_t v62 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 16))(v87, v60, v7);
    uint64_t v63 = SFAirDrop.NearbySharingDiscovery.Request.applicationLabel.getter(v62);
    uint64_t v65 = v64;
    uint64_t v66 = (uint64_t *)(v100
                    + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbyDiscoveryLabelForConnectionID);
    swift_beginAccess( v100 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbyDiscoveryLabelForConnectionID,  v103,  33LL,  0LL);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v66);
    uint64_t v102 = *v66;
    uint64_t *v66 = 0x8000000000000000LL;
    sub_1003B2AE0(v63, v65, v61, isUniquelyReferenced_nonNull_native);
    uint64_t v68 = *v66;
    uint64_t *v66 = v102;
    swift_bridgeObjectRelease(v68);
    uint64_t v69 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v69(v61, v7);
    swift_endAccess(v103);
    uint64_t v59 = ((uint64_t (*)(char *, uint64_t))v69)(v60, v7);
  }

  uint64_t v70 = v94;
  SFAirDrop.NearbySharingDiscovery.Request.pollingType.getter(v59);
  uint64_t v71 = v95;
  uint64_t v72 = v96;
  uint64_t v73 = v93;
  (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v93, v70, v96);
  int v74 = (*(uint64_t (**)(char *, uint64_t))(v71 + 88))(v73, v72);
  if (v74 == enum case for SFAirDrop.NearbySharingDiscovery.PollingType.automatic(_:))
  {
    uint64_t v75 = 0LL;
LABEL_17:
    uint64_t v76 = (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v70, v96);
    uint64_t v77 = SFAirDrop.NearbySharingDiscovery.Request.applicationLabel.getter(v76);
    uint64_t v79 = v78;
    sub_1001B6E1C(v75, v77, v78, 1);
    return swift_bridgeObjectRelease(v79);
  }

  if (v74 == enum case for SFAirDrop.NearbySharingDiscovery.PollingType.passive(_:))
  {
    uint64_t v75 = 1LL;
    goto LABEL_17;
  }

  if (v74 == enum case for SFAirDrop.NearbySharingDiscovery.PollingType.full(_:))
  {
    uint64_t v75 = 2LL;
    goto LABEL_17;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000017LL,  0x8000000100504690LL,  "DaemoniOSLibrary/SDAirDropNearFieldService.swift",  48LL,  2LL,  35LL,  0);
  __break(1u);
  return result;
}

void sub_1001B6E1C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v115 = a4;
  uint64_t v119 = a1;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v110 = *(void *)(v7 - 8);
  uint64_t v111 = v7;
  __chkstk_darwin(v7);
  unint64_t v109 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v107 = *(void *)(v9 - 8);
  uint64_t v108 = v9;
  __chkstk_darwin(v9);
  uint64_t v106 = (char *)&v100 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100183098(&qword_1006460B8);
  __chkstk_darwin(v11);
  uint64_t v101 = (uint64_t)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v112 = v13;
  uint64_t v113 = v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v104 = (uint64_t)&v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v102 = (uint64_t)&v100 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v116 = (char *)&v100 - v20;
  uint64_t v103 = v21;
  __chkstk_darwin(v19);
  unint64_t v117 = (char *)&v100 - v22;
  uint64_t v23 = type metadata accessor for SFClientAccessLevel(0LL);
  uint64_t v100 = *(void *)(v23 - 8);
  uint64_t v24 = __chkstk_darwin(v23);
  Swift::String v26 = (char *)&v100 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v100 - v27;
  uint64_t v29 = sub_100183098((uint64_t *)&unk_100646110);
  __chkstk_darwin(v29);
  int v31 = (char *)&v100 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = type metadata accessor for SFClientIdentity(0LL);
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  unint64_t v35 = (char *)&v100 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v118 = v4;
  unint64_t v36 = (uint64_t *)(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbyDiscoveryClientForLabel);
  swift_beginAccess(v36, aBlock, 32LL, 0LL);
  uint64_t v37 = *v36;
  uint64_t v38 = *(void *)(v37 + 16);
  uint64_t v114 = a3;
  uint64_t v105 = a2;
  if (!v38)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v31, 1LL, 1LL, v32);
LABEL_7:
    sub_100187100((uint64_t)v31, (uint64_t *)&unk_100646110);
    swift_endAccess(aBlock);
    char v42 = 0;
    goto LABEL_9;
  }

  swift_bridgeObjectRetain(a3);
  uint64_t v39 = sub_1003AD53C(a2, a3);
  if ((v40 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))( v31,  *(void *)(v37 + 56) + *(void *)(v33 + 72) * v39,  v32);
    uint64_t v41 = 0LL;
  }

  else
  {
    uint64_t v41 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v31, v41, 1LL, v32);
  swift_bridgeObjectRelease(v114);
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v35, v31, v32);
  uint64_t v43 = swift_endAccess(aBlock);
  uint64_t v44 = SFClientIdentity.accessLevel.getter(v43);
  static SFClientAccessLevel.allowRestrictedBoop.getter(v44);
  uint64_t v45 = sub_100183F14( (unint64_t *)&unk_100646120,  (uint64_t (*)(uint64_t))&type metadata accessor for SFClientAccessLevel,  (uint64_t)&protocol conformance descriptor for SFClientAccessLevel);
  char v42 = dispatch thunk of SetAlgebra.isSuperset(of:)(v26, v23, v45);
  uint64_t v46 = *(void (**)(char *, uint64_t))(v100 + 8);
  v46(v26, v23);
  v46(v28, v23);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v32);
LABEL_9:
  uint64_t v47 = (uint64_t)v116;
  uint64_t v48 = (uint64_t)v117;
  uint64_t v49 = v118;
  if ((sub_1001B99C4(v119, v115 & 1, v42 & 1) & 1) == 0)
  {
    if (qword_100643EB8 != -1) {
      swift_once(&qword_100643EB8, sub_1001B3AC8);
    }
    uint64_t v76 = type metadata accessor for Logger(0LL);
    uint64_t v77 = sub_100186DE4(v76, (uint64_t)qword_100645E00);
    uint64_t v78 = (os_log_s *)Logger.logObject.getter(v77);
    os_log_type_t v79 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v78, v79)) {
      goto LABEL_24;
    }
    int v80 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)int v80 = 0;
    uint64_t v81 = "SDAirDropNearFieldService: Near field Controller is not available.";
    goto LABEL_23;
  }

  sub_1001CD214();
  uint64_t v50 = *(void **)(v49 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  if (!v50)
  {
    if (qword_100643EB8 != -1) {
      swift_once(&qword_100643EB8, sub_1001B3AC8);
    }
    uint64_t v82 = type metadata accessor for Logger(0LL);
    uint64_t v83 = sub_100186DE4(v82, (uint64_t)qword_100645E00);
    uint64_t v78 = (os_log_s *)Logger.logObject.getter(v83);
    os_log_type_t v79 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v78, v79)) {
      goto LABEL_24;
    }
    int v80 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)int v80 = 0;
    uint64_t v81 = "SDAirDropNearFieldService: missing Near field Controller, will not start polling";
LABEL_23:
    _os_log_impl((void *)&_mh_execute_header, v78, v79, v81, v80, 2u);
    swift_slowDealloc(v80, -1LL, -1LL);
LABEL_24:

    return;
  }

  uint64_t v51 = v50;
  UUID.init()(v51);
  uint64_t v52 = sub_1000ED920((void *)kSecAttrKeyTypeECSECPrimeRandom, 256LL);
  uint64_t v53 = v112;
  *(void *)(v48 + *(int *)(v112 + 20)) = v52;
  uint64_t v54 = sub_1000EDB14(v52);
  uint64_t v55 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v54);
  uint64_t v57 = v56;

  uint64_t v58 = (uint64_t *)(v48 + *(int *)(v53 + 24));
  *uint64_t v58 = v55;
  v58[1] = v57;
  uint64_t v59 = v101;
  sub_1001A4B84(v48, v101, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v113 + 56))(v59, 0LL, 1LL, v53);
  uint64_t v60 = v49 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_localExchangePayload;
  swift_beginAccess( v49 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_localExchangePayload,  aBlock,  33LL,  0LL);
  sub_1001C9860(v59, v60, &qword_1006460B8);
  swift_endAccess(aBlock);
  if (qword_100643EB8 != -1) {
    swift_once(&qword_100643EB8, sub_1001B3AC8);
  }
  uint64_t v61 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v61, (uint64_t)qword_100645E00);
  sub_1001A4B84(v48, v47, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
  uint64_t v62 = v102;
  uint64_t v63 = sub_1001A4B84(v48, v102, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
  uint64_t v64 = (os_log_s *)Logger.logObject.getter(v63);
  os_log_type_t v65 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v64, v65))
  {
    uint64_t v66 = swift_slowAlloc(22LL, -1LL);
    char v67 = (Class *)swift_slowAlloc(8LL, -1LL);
    uint64_t v116 = (char *)swift_slowAlloc(32LL, -1LL);
    aBlock[0] = (uint64_t)v116;
    *(_DWORD *)uint64_t v66 = 138412546;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v120 = isa;
    unint64_t v117 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, aBlock, v66 + 4, v66 + 12);
    *char v67 = isa;
    sub_1001A4BC8(v47, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
    *(_WORD *)(v66 + 12) = 2080;
    uint64_t v69 = type metadata accessor for UUID(0LL);
    uint64_t v70 = sub_100183F14( (unint64_t *)&qword_1006460B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v71 = dispatch thunk of CustomStringConvertible.description.getter(v69, v70);
    unint64_t v73 = v72;
    uint64_t v120 = (void *)sub_10018CDB4(v71, v72, aBlock);
    uint64_t v51 = v117;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, aBlock, v66 + 14, v66 + 22);
    swift_bridgeObjectRelease(v73);
    sub_1001A4BC8(v62, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
    _os_log_impl( (void *)&_mh_execute_header,  v64,  v65,  "SDAirDropNearFieldService: Starting to poll with public key: %@ listener ID: %s",  (uint8_t *)v66,  0x16u);
    uint64_t v74 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v67, 1LL, v74);
    swift_slowDealloc(v67, -1LL, -1LL);
    uint64_t v75 = v116;
    swift_arrayDestroy(v116, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v75, -1LL, -1LL);
    swift_slowDealloc(v66, -1LL, -1LL);
  }

  else
  {
    sub_1001A4BC8(v47, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
    sub_1001A4BC8(v62, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
  }

  uint64_t v84 = v114;
  uint64_t v85 = v105;
  uint64_t v86 = v104;
  sub_1001A4B84(v48, v104, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
  uint64_t v87 = *(unsigned __int8 *)(v113 + 80);
  uint64_t v88 = (v87 + 48) & ~v87;
  uint64_t v89 = (void *)swift_allocObject(&unk_1005D34E8, v88 + v103, v87 | 7);
  uint64_t v90 = v119;
  v89[2] = v51;
  v89[3] = v90;
  v89[4] = v85;
  v89[5] = v84;
  sub_1001A4B40(v86, (uint64_t)v89 + v88, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
  aBlock[4] = (uint64_t)sub_1001CD4BC;
  uint64_t v122 = v89;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_1001B9FE4;
  aBlock[3] = (uint64_t)&unk_1005D3500;
  uint64_t v91 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(v84);
  uint64_t v92 = v51;
  uint64_t v93 = v106;
  static DispatchQoS.unspecified.getter();
  uint64_t v120 = &_swiftEmptyArrayStorage;
  uint64_t v94 = sub_100183F14( (unint64_t *)&qword_100646510,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v95 = sub_100183098((uint64_t *)&unk_1006460D0);
  uint64_t v96 = sub_1001CD538( (unint64_t *)&qword_100646520,  (uint64_t *)&unk_1006460D0,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v97 = v109;
  uint64_t v98 = v95;
  uint64_t v99 = v111;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v120, v98, v96, v111, v94);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v93, v97, v91);
  _Block_release(v91);

  (*(void (**)(char *, uint64_t))(v110 + 8))(v97, v99);
  (*(void (**)(char *, uint64_t))(v107 + 8))(v93, v108);
  sub_1001A4BC8(v48, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
  swift_release(v122);
}

uint64_t sub_1001B7884(uint64_t a1)
{
  uint64_t v117 = a1;
  uint64_t v115 = sub_100183098(&qword_100646130);
  __chkstk_darwin(v115);
  uint64_t v2 = (char *)&v96 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v123 = type metadata accessor for SFAirDrop.NearbySharingAssertion(0LL);
  uint64_t v120 = *(void *)(v123 - 8);
  __chkstk_darwin(v123);
  unint64_t v124 = (char *)&v96 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100183098(&qword_100646138);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v100 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v104 = (char *)&v96 - v7;
  uint64_t v8 = sub_100183098(&qword_10064DA60);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v116 = (uint64_t)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v122 = (uint64_t)&v96 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v96 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (uint64_t)&v96 - v16;
  uint64_t v121 = type metadata accessor for UUID(0LL);
  uint64_t v110 = *(void *)(v121 - 8);
  uint64_t v18 = __chkstk_darwin(v121);
  unint64_t v109 = (char *)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v96 - v20;
  uint64_t v22 = type metadata accessor for SFClientIdentity(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v114 = (char *)&v96 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v96 - v26;
  if (qword_100643EB8 != -1) {
    goto LABEL_53;
  }
  while (1)
  {
    uint64_t v28 = type metadata accessor for Logger(0LL);
    sub_100186DE4(v28, (uint64_t)qword_100645E00);
    uint64_t v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 16))(v27, v117, v22);
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.default.getter();
    int v32 = v31;
    if (os_log_type_enabled(v30, v31))
    {
      LODWORD(v119) = v32;
      uint64_t v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v118 = (uint64_t (*)(void, void, void))swift_slowAlloc(32LL, -1LL);
      v126[0] = (uint64_t)v118;
      uint64_t v111 = v33;
      *(_DWORD *)uint64_t v33 = 136315138;
      uint64_t v113 = (void (*)(char *, uint64_t))(v33 + 4);
      uint64_t v34 = sub_100183F14( &qword_100646150,  (uint64_t (*)(uint64_t))&type metadata accessor for SFClientIdentity,  (uint64_t)&protocol conformance descriptor for SFClientIdentity);
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter(v22, v34);
      unint64_t v37 = v36;
      uint64_t v125 = sub_10018CDB4(v35, v36, v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, v126, v113, v33 + 12);
      swift_bridgeObjectRelease(v37);
      uint64_t v113 = *(void (**)(char *, uint64_t))(v23 + 8);
      v113(v27, v22);
      uint64_t v38 = v111;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  (os_log_type_t)v119,  "SDAirDropNearFieldService: Requested stop active nearby sharing discovery for client: %s",  v111,  0xCu);
      uint64_t v39 = v118;
      swift_arrayDestroy(v118, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1LL, -1LL);
      swift_slowDealloc(v38, -1LL, -1LL);
    }

    else
    {
      uint64_t v113 = *(void (**)(char *, uint64_t))(v23 + 8);
      v113(v27, v22);
    }

    SFClientIdentity.connectionID.getter(v40);
    uint64_t v41 = v110;
    char v42 = *(uint8_t **)(v110 + 48);
    uint64_t v43 = v121;
    int v44 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v42)(v17, 1LL, v121);
    uint64_t v23 = (uint64_t)v104;
    if (v44 == 1) {
      return sub_100187100(v17, &qword_10064DA60);
    }
    uint64_t v106 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 32);
    v106(v21, v17, v43);
    uint64_t v46 = (uint64_t *)(v107
                    + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbyDiscoveryLabelForConnectionID);
    swift_beginAccess( v107 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbyDiscoveryLabelForConnectionID,  v126,  32LL,  0LL);
    uint64_t v47 = *v46;
    if (*(void *)(*v46 + 16) && (unint64_t v48 = sub_1003AD618((uint64_t)v21), (v49 & 1) != 0))
    {
      uint64_t v50 = (uint64_t *)(*(void *)(v47 + 56) + 16 * v48);
      uint64_t v51 = *v50;
      unint64_t v52 = v50[1];
      swift_endAccess(v126);
      swift_bridgeObjectRetain(v52);
      sub_1001B83A8(v51, v52);
      swift_bridgeObjectRelease(v52);
      swift_beginAccess(v46, v126, 33LL, 0LL);
      sub_1001C98A4((uint64_t)v21);
      uint64_t v54 = v53;
      swift_endAccess(v126);
      swift_bridgeObjectRelease(v54);
    }

    else
    {
      swift_endAccess(v126);
    }

    uint64_t v27 = v100;
    uint64_t v55 = (uint64_t *)(v107
                    + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_assertionsByNearbySharingInteractionID);
    swift_beginAccess( v107 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_assertionsByNearbySharingInteractionID,  v126,  0LL,  0LL);
    uint64_t v56 = *v55;
    uint64_t v57 = *(void *)(*v55 + 64);
    uint64_t v98 = *v55 + 64;
    uint64_t v58 = 1LL << *(_BYTE *)(v56 + 32);
    uint64_t v59 = -1LL;
    if (v58 < 64) {
      uint64_t v59 = ~(-1LL << v58);
    }
    unint64_t v60 = v59 & v57;
    int64_t v99 = (unint64_t)(v58 + 63) >> 6;
    uint64_t v97 = v99 - 1;
    uint64_t v101 = v56;
    uint64_t result = swift_bridgeObjectRetain(v56);
    uint64_t v17 = 0LL;
    uint64_t v111 = v42;
    uint64_t v112 = v21;
LABEL_16:
    if (v60)
    {
      uint64_t v105 = (v60 - 1) & v60;
      unint64_t v61 = __clz(__rbit64(v60)) | (v17 << 6);
      goto LABEL_18;
    }

    int64_t v66 = v17 + 1;
    if (!__OFADD__(v17, 1LL)) {
      break;
    }
    __break(1u);
LABEL_53:
    swift_once(&qword_100643EB8, sub_1001B3AC8);
  }

  if (v66 >= v99) {
    goto LABEL_36;
  }
  unint64_t v67 = *(void *)(v98 + 8 * v66);
  if (v67) {
    goto LABEL_22;
  }
  uint64_t v68 = v17 + 2;
  ++v17;
  if (v66 + 1 >= v99) {
    goto LABEL_36;
  }
  unint64_t v67 = *(void *)(v98 + 8 * v68);
  if (v67)
  {
LABEL_25:
    int64_t v66 = v68;
    goto LABEL_22;
  }

  uint64_t v17 = v66 + 1;
  if (v66 + 2 >= v99) {
    goto LABEL_36;
  }
  unint64_t v67 = *(void *)(v98 + 8 * (v66 + 2));
  if (v67)
  {
    v66 += 2LL;
LABEL_22:
    uint64_t v105 = (v67 - 1) & v67;
    unint64_t v61 = __clz(__rbit64(v67)) + (v66 << 6);
    uint64_t v17 = v66;
LABEL_18:
    uint64_t v62 = v101;
    (*(void (**)(char *, unint64_t, uint64_t))(v110 + 16))( v27,  *(void *)(v101 + 48) + *(void *)(v110 + 72) * v61,  v121);
    uint64_t v63 = *(void *)(v62 + 56);
    uint64_t v64 = sub_100183098(&qword_100646140);
    uint64_t v65 = *(void *)(v63 + 8 * v61);
    *(void *)&v27[*(int *)(v64 + 48)] = v65;
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56LL))(v27, 0LL, 1LL, v64);
    swift_bridgeObjectRetain(v65);
    uint64_t v23 = (uint64_t)v104;
    goto LABEL_37;
  }

  uint64_t v68 = v66 + 3;
  uint64_t v17 = v66 + 2;
  if (v66 + 3 >= v99) {
    goto LABEL_36;
  }
  unint64_t v67 = *(void *)(v98 + 8 * v68);
  if (v67) {
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v66 = v68 + 1;
    if (__OFADD__(v68, 1LL)) {
      break;
    }
    if (v66 >= v99)
    {
      uint64_t v17 = v97;
LABEL_36:
      uint64_t v69 = sub_100183098(&qword_100646140);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56LL))(v27, 1LL, 1LL, v69);
      uint64_t v105 = 0LL;
LABEL_37:
      sub_1001CD4F0((uint64_t)v27, v23);
      uint64_t v70 = sub_100183098(&qword_100646140);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 48LL))(v23, 1LL, v70) == 1)
      {
        swift_release(v101);
        return (*(uint64_t (**)(char *, uint64_t))(v110 + 8))(v21, v121);
      }

      uint64_t v71 = *(void *)(v23 + *(int *)(v70 + 48));
      uint64_t v72 = *(void *)(v71 + 16);
      if (v72)
      {
        uint64_t v103 = v17;
        unint64_t v73 = (*(unsigned __int8 *)(v120 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80);
        uint64_t v102 = v71;
        uint64_t v74 = v71 + v73;
        uint64_t v75 = *(void *)(v120 + 72);
        uint64_t v118 = *(uint64_t (**)(void, void, void))(v120 + 16);
        uint64_t v119 = v75;
        for (uint64_t i = v118(v124, v71 + v73, v123); ; uint64_t i = v118(v124, v74, v123))
        {
          uint64_t v77 = v114;
          uint64_t v78 = SFAirDrop.NearbySharingAssertion.client.getter(i);
          SFClientIdentity.connectionID.getter(v78);
          uint64_t v79 = v22;
          uint64_t v80 = ((uint64_t (*)(char *, uint64_t))v113)(v77, v22);
          uint64_t v81 = (uint64_t)v15;
          uint64_t v82 = v122;
          SFClientIdentity.connectionID.getter(v80);
          uint64_t v83 = (uint64_t)&v2[*(int *)(v115 + 48)];
          sub_1001915A4(v81, (uint64_t)v2, &qword_10064DA60);
          sub_1001915A4(v82, v83, &qword_10064DA60);
          uint64_t v84 = v121;
          uint64_t v85 = v111;
          sub_1001915A4((uint64_t)v2, v116, &qword_10064DA60);
          uint64_t v88 = v84;
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v85)(v83, 1LL, v84) == 1)
          {
            sub_100187100(v122, &qword_10064DA60);
            uint64_t v15 = (char *)v81;
            sub_100187100(v81, &qword_10064DA60);
            (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v116, v84);
            uint64_t v22 = v79;
LABEL_41:
            sub_100187100((uint64_t)v2, &qword_100646130);
            uint64_t v21 = v112;
            goto LABEL_42;
          }

          uint64_t v89 = v109;
          v106(v109, v83, v88);
          uint64_t v90 = sub_100183F14( &qword_100646148,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v91 = v116;
          int v108 = dispatch thunk of static Equatable.== infix(_:_:)(v116, v89, v88, v90);
          uint64_t v92 = (uint64_t)v2;
          uint64_t v93 = v88;
          uint64_t v94 = *(void (**)(char *, uint64_t))(v110 + 8);
          v94(v89, v93);
          sub_100187100(v122, &qword_10064DA60);
          sub_100187100(v81, &qword_10064DA60);
          v94((char *)v91, v93);
          uint64_t v15 = (char *)v81;
          uint64_t v2 = (char *)v92;
          uint64_t v87 = sub_100187100(v92, &qword_10064DA60);
          uint64_t v21 = v112;
          uint64_t v22 = v79;
          if ((v108 & 1) != 0) {
            goto LABEL_49;
          }
LABEL_42:
          (*(void (**)(char *, uint64_t))(v120 + 8))(v124, v123);
          v74 += v119;
          if (!--v72)
          {
            swift_bridgeObjectRelease(v102);
            uint64_t v27 = v100;
            uint64_t v17 = v103;
            goto LABEL_15;
          }
        }

        sub_100187100(v82, &qword_10064DA60);
        sub_100187100(v81, &qword_10064DA60);
        int v86 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v85)(v83, 1LL, v84);
        uint64_t v15 = (char *)v81;
        uint64_t v22 = v79;
        if (v86 != 1) {
          goto LABEL_41;
        }
        uint64_t v87 = sub_100187100((uint64_t)v2, &qword_10064DA60);
        uint64_t v21 = v112;
LABEL_49:
        uint64_t v95 = (uint64_t)v109;
        SFAirDrop.NearbySharingAssertion.id.getter(v87);
        sub_1001B8C00(v95);
        (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v95, v121);
        goto LABEL_42;
      }

      swift_bridgeObjectRelease(v71);
LABEL_15:
      uint64_t v23 = (uint64_t)v104;
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v110 + 8))(v104, v121);
      unint64_t v60 = v105;
      goto LABEL_16;
    }

    unint64_t v67 = *(void *)(v98 + 8 * v66);
    ++v68;
    if (v67) {
      goto LABEL_22;
    }
  }

  __break(1u);
  return result;
}

void sub_1001B83A8(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v47 = a1;
  uint64_t v5 = sub_100183098(&qword_10064DA60);
  __chkstk_darwin(v5);
  uint64_t v46 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100183098((uint64_t *)&unk_100646110);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643EB8 != -1) {
    swift_once(&qword_100643EB8, sub_1001B3AC8);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v10, (uint64_t)qword_100645E00);
  uint64_t v11 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    v50[0] = v15;
    *(_DWORD *)uint64_t v14 = 136315138;
    swift_bridgeObjectRetain(a2);
    uint64_t v48 = sub_10018CDB4(v47, a2, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "SDAirDropNearFieldService: Requested stop active nearby sharing discovery: %s",  v14,  0xCu);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  uint64_t v16 = *(void **)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  if (!v16)
  {
    uint64_t v30 = swift_bridgeObjectRetain_n(a2, 2LL);
    id v17 = (id)Logger.logObject.getter(v30);
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled((os_log_t)v17, v31))
    {

      swift_bridgeObjectRelease_n(a2, 2LL);
      return;
    }

    int v32 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v33 = swift_slowAlloc(32LL, -1LL);
    v50[0] = v33;
    *(_DWORD *)int v32 = 136315138;
    swift_bridgeObjectRetain(a2);
    uint64_t v48 = sub_10018CDB4(v47, a2, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v32 + 4, v32 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v17,  v31,  "SDAirDropNearFieldService: Near field controller not start. Fail to stop active nearby sharing discovery for: %s",  v32,  0xCu);
    swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1LL, -1LL);
    swift_slowDealloc(v32, -1LL, -1LL);
    goto LABEL_24;
  }

  id v17 = v16;
  id v18 = [v17 currentApplicationLabel];
  if (!v18)
  {
    uint64_t v34 = swift_bridgeObjectRetain_n(a2, 2LL);
    uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = swift_slowAlloc(12LL, -1LL);
      uint64_t v38 = swift_slowAlloc(32LL, -1LL);
      v50[0] = v38;
      *(_DWORD *)uint64_t v37 = 136315138;
      swift_bridgeObjectRetain(a2);
      uint64_t v48 = sub_10018CDB4(v47, a2, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v37 + 4, v37 + 12);
      swift_bridgeObjectRelease_n(a2, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "SDAirDropNearFieldService: missing current application label. Ignore request to to stop active nearby sharing discovery for: %s",  (uint8_t *)v37,  0xCu);
      swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v39 = v38;
LABEL_18:
      swift_slowDealloc(v39, -1LL, -1LL);
      swift_slowDealloc(v37, -1LL, -1LL);

LABEL_24:
      return;
    }

LABEL_23:
    swift_bridgeObjectRelease_n(a2, 2LL);
    goto LABEL_24;
  }

  uint64_t v19 = v18;
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  uint64_t v22 = v21;

  uint64_t v23 = type metadata accessor for SFClientIdentity(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v9, 1LL, 1LL, v23);
  swift_beginAccess( v3 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbyDiscoveryClientForLabel,  v50,  33LL,  0LL);
  swift_bridgeObjectRetain(v22);
  sub_1002E51D8((uint64_t)v9, v20, v22);
  swift_endAccess(v50);
  if ((v20 != v47 || v22 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(v20, v22, v47, a2, 0LL) & 1) == 0)
  {
    v50[0] = v20;
    v50[1] = v22;
    uint64_t v48 = v47;
    unint64_t v49 = a2;
    unint64_t v24 = sub_1001CCE8C();
    if ((StringProtocol.contains<A>(_:)(&v48, &type metadata for String, &type metadata for String, v24, v24) & 1) == 0)
    {
      swift_bridgeObjectRetain_n(a2, 2LL);
      uint64_t v42 = swift_bridgeObjectRetain(v22);
      uint64_t v35 = (os_log_s *)Logger.logObject.getter(v42);
      os_log_type_t v43 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v35, v43))
      {
        uint64_t v37 = swift_slowAlloc(22LL, -1LL);
        uint64_t v44 = swift_slowAlloc(64LL, -1LL);
        v50[0] = v44;
        *(_DWORD *)uint64_t v37 = 136315394;
        swift_bridgeObjectRetain(a2);
        uint64_t v48 = sub_10018CDB4(v47, a2, v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v37 + 4, v37 + 12);
        swift_bridgeObjectRelease_n(a2, 3LL);
        *(_WORD *)(v37 + 12) = 2080;
        swift_bridgeObjectRetain(v22);
        uint64_t v48 = sub_10018CDB4(v20, v22, v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v37 + 14, v37 + 22);
        swift_bridgeObjectRelease_n(v22, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v35,  v43,  "SDAirDropNearFieldService: stop nearby sharing discovery for application label: %s failed because active appli cation label is not matching: %s",  (uint8_t *)v37,  0x16u);
        swift_arrayDestroy(v44, 2LL, (char *)&type metadata for Any + 8);
        uint64_t v39 = v44;
        goto LABEL_18;
      }

      swift_bridgeObjectRelease_n(v22, 2LL);
      goto LABEL_23;
    }
  }

  sub_1001B6E1C( *(void *)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_defaultPollingType),  0xD000000000000013LL,  0x8000000100504630LL,  0);
  uint64_t v25 = swift_bridgeObjectRetain(v22);
  uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v29 = swift_slowAlloc(32LL, -1LL);
    v50[0] = v29;
    *(_DWORD *)uint64_t v28 = 136315138;
    swift_bridgeObjectRetain(v22);
    uint64_t v48 = sub_10018CDB4(v20, v22, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v28 + 4, v28 + 12);
    swift_bridgeObjectRelease_n(v22, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "SDAirDropNearFieldService: stop active nearby sharing discovery: %s",  v28,  0xCu);
    swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v22, 2LL);
  }

  uint64_t v40 = (uint64_t)v46;
  uint64_t v41 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56LL))(v40, 1LL, 1LL, v41);
  sub_1001B455C(v40);

  sub_100187100(v40, &qword_10064DA60);
}

void sub_1001B8C00(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v133 = a1;
  uint64_t v3 = sub_100183098((uint64_t *)&unk_1006460A0);
  __chkstk_darwin(v3);
  uint64_t v126 = (uint64_t)&v119 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v132 = (void *)type metadata accessor for SFAirDrop.NearbySharingInteraction(0LL);
  uint64_t v5 = *(v132 - 1);
  __chkstk_darwin(v132);
  os_log_type_t v128 = (char *)&v119 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100183098(&qword_100645EE0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v119 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100183098(&qword_10064DA60);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v125 = (char *)&v119 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v131 = (char *)&v119 - v13;
  uint64_t v134 = type metadata accessor for UUID(0LL);
  uint64_t v130 = *(void *)(v134 - 8);
  uint64_t v14 = __chkstk_darwin(v134);
  unint64_t v129 = (void (**)(uint64_t, uint64_t, uint64_t, char *))((char *)&v119 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v127 = (char *)&v119 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v119 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v119 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v26 = (char *)&v119 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)&v119 - v28;
  __chkstk_darwin(v27);
  os_log_type_t v31 = (char *)&v119 - v30;
  uint64_t KeyPath = swift_getKeyPath(&unk_1004CDC48);
  uint64_t v33 = swift_getKeyPath(&unk_1004CDC70);
  static Published.subscript.getter(v2, KeyPath, v33);
  swift_release(KeyPath);
  uint64_t v34 = v33;
  uint64_t v35 = v132;
  swift_release(v34);
  uint64_t v36 = v5;
  if (!(*(unsigned int (**)(char *, uint64_t, void *))(v5 + 48))(v9, 1LL, v35))
  {
    uint64_t v120 = v26;
    uint64_t v121 = v23;
    uint64_t v122 = v20;
    uint64_t v123 = v2;
    unint64_t v124 = v31;
    uint64_t v40 = *(void (**)(char *, char *, void *))(v5 + 16);
    uint64_t v41 = v128;
    v40(v128, v9, v35);
    uint64_t v42 = sub_100187100((uint64_t)v9, &qword_100645EE0);
    uint64_t v37 = (uint64_t)v131;
    SFAirDrop.NearbySharingInteraction.id.getter(v42);
    (*(void (**)(char *, void *))(v36 + 8))(v41, v35);
    uint64_t v38 = v130;
    os_log_type_t v43 = *(char **)(v130 + 56);
    uint64_t v39 = v134;
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v43)(v37, 0LL, 1LL, v134);
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v124, v37, v39);
    uint64_t v57 = (uint64_t *)(v123
                    + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_assertionsByNearbySharingInteractionID);
    swift_beginAccess( v123 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_assertionsByNearbySharingInteractionID,  v136,  32LL,  0LL);
    uint64_t v58 = *v57;
    uint64_t v59 = v133;
    if (*(void *)(*v57 + 16) && (unint64_t v60 = sub_1003AD618((uint64_t)v124), (v61 & 1) != 0))
    {
      uint64_t v137 = *(void *)(*(void *)(v58 + 56) + 8 * v60);
      uint64_t v62 = v137;
      swift_endAccess(v136);
      uint64_t v63 = *(void *)(v62 + 16);
      if (v63)
      {
        uint64_t v119 = v57;
        os_log_type_t v128 = v43;
        uint64_t v131 = (char *)type metadata accessor for SFAirDrop.NearbySharingAssertion(0LL);
        uint64_t v132 = (void *)v62;
        uint64_t v64 = (void (**)(uint64_t, uint64_t, uint64_t, char *))*((void *)v131 - 1);
        unint64_t v65 = v62 + ((*((unsigned __int8 *)v64 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v64 + 80));
        unint64_t v129 = v64;
        int64_t v66 = v64[9];
        uint64_t v67 = swift_bridgeObjectRetain_n(v62, 2LL);
        unint64_t v68 = 0LL;
        while (1)
        {
          SFAirDrop.NearbySharingAssertion.id.getter(v67);
          char v69 = static UUID.== infix(_:_:)(v29, v59);
          uint64_t v70 = *(uint64_t (**)(char *, uint64_t))(v38 + 8);
          uint64_t v67 = v70(v29, v134);
          if ((v69 & 1) != 0) {
            break;
          }
          ++v68;
          v65 += (unint64_t)v66;
          if (v63 == v68)
          {
            swift_bridgeObjectRelease(v132);
            uint64_t v39 = v134;
            goto LABEL_18;
          }
        }

        swift_bridgeObjectRelease(v132);
        if (qword_100643EB8 != -1) {
          swift_once(&qword_100643EB8, sub_1001B3AC8);
        }
        uint64_t v83 = type metadata accessor for Logger(0LL);
        uint64_t v84 = sub_100186DE4(v83, (uint64_t)qword_100645E00);
        uint64_t v85 = v120;
        uint64_t v86 = v134;
        uint64_t v132 = *(void **)(v38 + 16);
        uint64_t v87 = ((uint64_t (*)(char *, uint64_t, uint64_t))v132)(v120, v59, v134);
        uint64_t v130 = v84;
        uint64_t v88 = (os_log_s *)Logger.logObject.getter(v87);
        os_log_type_t v89 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v88, v89))
        {
          uint64_t v90 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v91 = swift_slowAlloc(32LL, -1LL);
          v136[0] = v91;
          *(_DWORD *)uint64_t v90 = 136315138;
          uint64_t v127 = (char *)(v90 + 4);
          uint64_t v92 = sub_100183F14( (unint64_t *)&qword_1006460B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v93 = dispatch thunk of CustomStringConvertible.description.getter(v86, v92);
          unint64_t v95 = v94;
          uint64_t v135 = sub_10018CDB4(v93, v94, v136);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, v136, v127, v90 + 12);
          swift_bridgeObjectRelease(v95);
          v70(v85, v86);
          _os_log_impl( (void *)&_mh_execute_header,  v88,  v89,  "SDAirDropNearFieldService: Releasing assertion:%s",  v90,  0xCu);
          swift_arrayDestroy(v91, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v91, -1LL, -1LL);
          uint64_t v96 = v90;
          uint64_t v59 = v133;
          swift_slowDealloc(v96, -1LL, -1LL);
        }

        else
        {
          v70(v85, v86);
        }

        uint64_t v97 = (uint64_t)v124;
        uint64_t v98 = v126;
        int64_t v99 = v121;
        if (v137)
        {
          sub_1001C8160(v68, v126);
          uint64_t v100 = 0LL;
        }

        else
        {
          uint64_t v100 = 1LL;
        }

        uint64_t v101 = v122;
        v129[7](v98, v100, 1LL, v131);
        sub_100187100(v98, (uint64_t *)&unk_1006460A0);
        if (v137 && !*(void *)(v137 + 16))
        {
          uint64_t v102 = (uint64_t (*)(char *, uint64_t, uint64_t))v132;
          ((void (*)(char *, uint64_t, uint64_t))v132)(v99, v59, v86);
          uint64_t v103 = v102(v101, v97, v86);
          uint64_t v104 = (os_log_s *)Logger.logObject.getter(v103);
          os_log_type_t v105 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v104, v105))
          {
            uint64_t v106 = swift_slowAlloc(22LL, -1LL);
            uint64_t v133 = swift_slowAlloc(64LL, -1LL);
            v136[0] = v133;
            *(_DWORD *)uint64_t v106 = 136315394;
            uint64_t v107 = sub_100183F14( (unint64_t *)&qword_1006460B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            uint64_t v108 = dispatch thunk of CustomStringConvertible.description.getter(v86, v107);
            unint64_t v110 = v109;
            uint64_t v135 = sub_10018CDB4(v108, v109, v136);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, v136, v106 + 4, v106 + 12);
            swift_bridgeObjectRelease(v110);
            v70(v99, v134);
            *(_WORD *)(v106 + 12) = 2080;
            uint64_t v111 = v122;
            uint64_t v112 = v107;
            uint64_t v97 = (uint64_t)v124;
            uint64_t v113 = dispatch thunk of CustomStringConvertible.description.getter(v134, v112);
            unint64_t v115 = v114;
            uint64_t v135 = sub_10018CDB4(v113, v114, v136);
            uint64_t v86 = v134;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, v136, v106 + 14, v106 + 22);
            swift_bridgeObjectRelease(v115);
            v70(v111, v86);
            _os_log_impl( (void *)&_mh_execute_header,  v104,  v105,  "SDAirDropNearFieldService: No more assertions:%s for nearby sharing interaction:%s",  (uint8_t *)v106,  0x16u);
            uint64_t v116 = v133;
            swift_arrayDestroy(v133, 2LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v116, -1LL, -1LL);
            swift_slowDealloc(v106, -1LL, -1LL);
          }

          else
          {
            v70(v99, v86);
            v70(v101, v86);
          }

          uint64_t v117 = (uint64_t)v125;
          swift_beginAccess(v119, v136, 33LL, 0LL);
          uint64_t v118 = sub_1001C9540(v97);
          swift_endAccess(v136);
          swift_bridgeObjectRelease(v118);
          ((void (*)(uint64_t, uint64_t, uint64_t))v132)(v117, v97, v86);
          ((void (*)(uint64_t, void, uint64_t, uint64_t))v128)(v117, 0LL, 1LL, v86);
          sub_1001B455C(v117);
          sub_100187100(v117, &qword_10064DA60);
        }

        v70((char *)v97, v86);
        goto LABEL_24;
      }

      swift_bridgeObjectRetain(v62);
    }

    else
    {
      uint64_t v137 = 0LL;
      swift_endAccess(v136);
    }

void sub_1001B9854()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100183098(&qword_10064DA60);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643EB8 != -1) {
    swift_once(&qword_100643EB8, sub_1001B3AC8);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = sub_100186DE4(v5, (uint64_t)qword_100645E00);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "SDAirDropNearFieldService: stop", v9, 2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v4, 1LL, 1LL, v10);
  sub_1001B455C((uint64_t)v4);
  sub_100187100((uint64_t)v4, &qword_10064DA60);
  sub_1001B9FE8(1);
  uint64_t v11 = *(void **)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  *(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController) = 0LL;
}

uint64_t sub_1001B99C4(uint64_t a1, char a2, char a3)
{
  uint64_t v4 = v3;
  sub_100183168(0LL, (unint64_t *)&qword_100645140, &OBJC_CLASS___NSUserDefaults_ptr);
  os_log_type_t v8 = (void *)static NSUserDefaults.airdrop.getter();
  char v9 = SFAirDropUserDefaults.nearFieldSharingEnabled.getter();

  if ((v9 & 1) == 0 && a1 != 2)
  {
    if (qword_100643EB8 != -1) {
      swift_once(&qword_100643EB8, sub_1001B3AC8);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = sub_100186DE4(v10, (uint64_t)qword_100645E00);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v12, v13)) {
      goto LABEL_18;
    }
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    uint64_t v15 = "SDAirDropNearFieldService.startNearFieldController SKIP - feature disabled";
LABEL_17:
    _os_log_impl((void *)&_mh_execute_header, v12, v13, v15, v14, 2u);
    swift_slowDealloc(v14, -1LL, -1LL);
LABEL_18:

    return 0LL;
  }

  uint64_t v16 = (void *)static NSUserDefaults.airdrop.getter();
  char v17 = SFAirDropUserDefaults.boopToActionEnabled.getter();

  if ((v17 & 1) == 0)
  {
    if (qword_100643EB8 != -1) {
      swift_once(&qword_100643EB8, sub_1001B3AC8);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    uint64_t v22 = sub_100186DE4(v21, (uint64_t)qword_100645E00);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v12, v13)) {
      goto LABEL_18;
    }
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    uint64_t v15 = "SDAirDropNearFieldService.startNearFieldController SKIP - BoopToAction feature flag disabled";
    goto LABEL_17;
  }

  uint64_t v18 = *(void **)(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_deviceStatus);
  if ([v18 isClarityBoardEnabled])
  {
    if (qword_100643EB8 != -1) {
      swift_once(&qword_100643EB8, sub_1001B3AC8);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    uint64_t v20 = sub_100186DE4(v19, (uint64_t)qword_100645E00);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v12, v13)) {
      goto LABEL_18;
    }
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    uint64_t v15 = "SDAirDropNearFieldService.startNearFieldController SKIP - ClarityBoard Enabled";
    goto LABEL_17;
  }

  if ((a2 & 1) == 0 && [v18 lowPowerModeEnabled])
  {
    if (qword_100643EB8 != -1) {
      swift_once(&qword_100643EB8, sub_1001B3AC8);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    uint64_t v25 = sub_100186DE4(v24, (uint64_t)qword_100645E00);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v12, v13)) {
      goto LABEL_18;
    }
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    uint64_t v15 = "SDAirDropNearFieldService.startNearFieldController SKIP - Low power mode enabled";
    goto LABEL_17;
  }

  if ((a3 & 1) == 0 && ([v18 isAirDropAllowed] & 1) == 0)
  {
    if (qword_100643EB8 != -1) {
      swift_once(&qword_100643EB8, sub_1001B3AC8);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    uint64_t v29 = sub_100186DE4(v28, (uint64_t)qword_100645E00);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v12, v13)) {
      goto LABEL_18;
    }
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    uint64_t v15 = "SDAirDropNearFieldService.startNearFieldController SKIP - AirDrop is restricted";
    goto LABEL_17;
  }

  if ((SFStoreDemoMode() & 1) != 0)
  {
    if (qword_100643EB8 != -1) {
      swift_once(&qword_100643EB8, sub_1001B3AC8);
    }
    uint64_t v26 = type metadata accessor for Logger(0LL);
    uint64_t v27 = sub_100186DE4(v26, (uint64_t)qword_100645E00);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v12, v13)) {
      goto LABEL_18;
    }
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    uint64_t v15 = "SDAirDropNearFieldService.startNearFieldController SKIP - Store Demo Mode Enabled";
    goto LABEL_17;
  }

  if (![v18 screenOn])
  {
    if (qword_100643EB8 != -1) {
      swift_once(&qword_100643EB8, sub_1001B3AC8);
    }
    uint64_t v30 = type metadata accessor for Logger(0LL);
    uint64_t v31 = sub_100186DE4(v30, (uint64_t)qword_100645E00);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v12, v13)) {
      goto LABEL_18;
    }
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    uint64_t v15 = "SDAirDropNearFieldService.startNearFieldController SKIP - screen is off";
    goto LABEL_17;
  }

  if (([v18 wirelessEnabled] & 1) == 0)
  {
    if (qword_100643EB8 != -1) {
      swift_once(&qword_100643EB8, sub_1001B3AC8);
    }
    uint64_t v32 = type metadata accessor for Logger(0LL);
    uint64_t v33 = sub_100186DE4(v32, (uint64_t)qword_100645E00);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v12, v13)) {
      goto LABEL_18;
    }
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    uint64_t v15 = "SDAirDropNearFieldService.startNearFieldController SKIP - wifi is off";
    goto LABEL_17;
  }

  return 1LL;
}

void sub_1001B9F50(void *a1, uint64_t a2)
{
  id v6 = String._bridgeToObjectiveC()();
  type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0LL);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v5 = UUID._bridgeToObjectiveC()().super.isa;
  [a1 startPolling:a2 applicationLabel:v6 pkData:isa bonjourListenerUUID:v5];
}

uint64_t sub_1001B9FE8(char a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void **)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  if (v12)
  {
    uint64_t v21 = *(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_queue);
    uint64_t v13 = swift_allocObject(&unk_1005D3538, 25LL, 7LL);
    *(void *)(v13 + swift_weakDestroy(v0 + 16) = v12;
    *(_BYTE *)(v13 + 24) = a1 & 1;
    aBlock[4] = sub_1001CD59C;
    uint64_t v24 = v13;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001B9FE4;
    aBlock[3] = &unk_1005D3550;
    uint64_t v14 = _Block_copy(aBlock);
    id v20 = v12;
    static DispatchQoS.unspecified.getter(v20);
    uint64_t v22 = &_swiftEmptyArrayStorage;
    uint64_t v15 = v4;
    uint64_t v16 = sub_100183F14( (unint64_t *)&qword_100646510,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v17 = sub_100183098((uint64_t *)&unk_1006460D0);
    uint64_t v18 = sub_1001CD538( (unint64_t *)&qword_100646520,  (uint64_t *)&unk_1006460D0,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v17, v18, v3, v16);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v6, v14);
    _Block_release(v14);

    (*(void (**)(char *, uint64_t))(v15 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    return swift_release(v24);
  }

  return result;
}

uint64_t sub_1001BA200(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  if (qword_100643EB8 != -1) {
    swift_once(&qword_100643EB8, sub_1001B3AC8);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = sub_100186DE4(v10, (uint64_t)qword_100645E00);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "SDAirDropNearFieldService: start", v14, 2u);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  if ((a2 & 1) != 0) {
    a1 = *(void *)(v5 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_defaultPollingType);
  }
  if (a4) {
    uint64_t v15 = a4;
  }
  else {
    uint64_t v15 = 0x8000000100504630LL;
  }
  if (a4) {
    uint64_t v16 = a3;
  }
  else {
    uint64_t v16 = 0xD000000000000013LL;
  }
  swift_bridgeObjectRetain(a4);
  sub_1001B6E1C(a1, v16, v15, 0);
  return swift_bridgeObjectRelease(v15);
}

void sub_1001BA348()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100183098(&qword_10064DA60);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643EB8 != -1) {
    swift_once(&qword_100643EB8, sub_1001B3AC8);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = sub_100186DE4(v5, (uint64_t)qword_100645E00);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    char v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)char v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "SDAirDropNearFieldService: restart", v9, 2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    os_log_type_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "SDAirDropNearFieldService: stop", v13, 2u);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  uint64_t v14 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v4, 1LL, 1LL, v14);
  sub_1001B455C((uint64_t)v4);
  sub_100187100((uint64_t)v4, &qword_10064DA60);
  sub_1001B9FE8(1);
  uint64_t v15 = *(void **)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  *(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController) = 0LL;

  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "SDAirDropNearFieldService: start", v19, 2u);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  sub_1001B6E1C( *(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_defaultPollingType),  0xD000000000000013LL,  0x8000000100504630LL,  0);
}

void sub_1001BA5CC()
{
  uint64_t v0 = sub_100183098(&qword_100646560);
  __chkstk_darwin(v0);
  uint64_t v139 = (char *)&v118 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = type metadata accessor for SFPlatform(0LL);
  uint64_t v136 = *(void *)(v2 - 8);
  uint64_t v137 = v2;
  __chkstk_darwin(v2);
  uint64_t v133 = (char *)&v118 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v138 = type metadata accessor for DispatchTime(0LL);
  uint64_t v135 = *(void *)(v138 - 8);
  uint64_t v4 = __chkstk_darwin(v138);
  uint64_t v132 = (char *)&v118 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v134 = (char *)&v118 - v6;
  uint64_t v129 = type metadata accessor for DispatchWorkItemFlags(0LL);
  __chkstk_darwin(v129);
  uint64_t v130 = (char *)&v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100183098(&qword_100645EE0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v123 = (uint64_t)&v118 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v126 = (char *)&v118 - v11;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  os_log_type_t v128 = (char *)&v118 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v122 = (void (*)(char *, uint64_t))((char *)&v118 - v17);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v121 = (char *)&v118 - v19;
  uint64_t v127 = v20;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v118 - v21;
  uint64_t v23 = sub_100183098(&qword_10064DA60);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v118 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v29 = (char *)&v118 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = (os_log_s *)type metadata accessor for SFAirDrop.NearbySharingInteraction(0LL);
  uint64_t v140 = *((void *)v30 - 1);
  uint64_t v141 = v30;
  __chkstk_darwin(v30);
  uint64_t v32 = (char *)&v118 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = sub_100183168(0LL, (unint64_t *)&qword_100645140, &OBJC_CLASS___NSUserDefaults_ptr);
  uint64_t v34 = (void *)static NSUserDefaults.airdrop.getter(v33);
  char v35 = SFAirDropUserDefaults.boopToActionEnabled.getter();

  if ((v35 & 1) != 0)
  {
    SFAirDrop.NearbySharingInteraction.PresenceContext.init()();
    (*(void (**)(char *, void, uint64_t))(v27 + 104))( v29,  enum case for SFAirDrop.NearbySharingInteraction.State.presenceDetected(_:),  v26);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v25, 1LL, 1LL, v12);
    uint64_t v36 = SFAirDrop.NearbySharingInteraction.init(state:id:)(v29, v25);
    SFAirDrop.NearbySharingInteraction.id.getter(v36);
    id v37 = [(id)objc_opt_self(SDStatusMonitor) sharedMonitor];
    if (v37)
    {
      uint64_t v38 = v37;
      uint64_t v39 = v12;
      uint64_t v40 = v32;
      uint64_t v41 = v13;
      unsigned int v42 = [v37 deviceKeyBagLocked];

      uint64_t v125 = v22;
      unint64_t v124 = v32;
      uint64_t v120 = v13;
      if (v42)
      {
        if (qword_100643EB8 != -1) {
          swift_once(&qword_100643EB8, sub_1001B3AC8);
        }
        uint64_t v43 = type metadata accessor for Logger(0LL);
        sub_100186DE4(v43, (uint64_t)qword_100645E00);
        uint64_t v44 = *(uint64_t (**)(char *, char *, uint64_t))(v13 + 16);
        uint64_t v45 = v121;
        uint64_t v46 = v44(v121, v22, v12);
        uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
        os_log_type_t v48 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v47, v48))
        {
          uint64_t v49 = swift_slowAlloc(12LL, -1LL);
          uint64_t v119 = v44;
          uint64_t v50 = (uint8_t *)v49;
          uint64_t v51 = swift_slowAlloc(32LL, -1LL);
          aBlock[0] = v51;
          *(_DWORD *)uint64_t v50 = 136315138;
          uint64_t v52 = sub_100183F14( (unint64_t *)&qword_1006460B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter(v12, v52);
          unint64_t v55 = v54;
          uint64_t v142 = (void *)sub_10018CDB4(v53, v54, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, aBlock, v50 + 4, v50 + 12);
          swift_bridgeObjectRelease(v55);
          uint64_t v56 = v12;
          uint64_t v122 = *(void (**)(char *, uint64_t))(v41 + 8);
          v122(v45, v12);
          _os_log_impl( (void *)&_mh_execute_header,  v47,  v48,  "SDAirDropNearFieldService: begin pending nearby sharing interaction:%s",  v50,  0xCu);
          swift_arrayDestroy(v51, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v51, -1LL, -1LL);
          uint64_t v57 = v50;
          uint64_t v44 = v119;
          swift_slowDealloc(v57, -1LL, -1LL);
        }

        else
        {
          uint64_t v56 = v12;
          uint64_t v122 = *(void (**)(char *, uint64_t))(v41 + 8);
          v122(v45, v12);
        }

        uint64_t v74 = v128;
        uint64_t v75 = v127;
        uint64_t v77 = v140;
        uint64_t v76 = v141;
        uint64_t v78 = (uint64_t)v126;
        (*(void (**)(char *, char *, os_log_s *))(v140 + 16))(v126, v124, v141);
        (*(void (**)(uint64_t, void, uint64_t, os_log_s *))(v77 + 56))(v78, 0LL, 1LL, v76);
        id v79 = v131;
        unint64_t v80 = &v131[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction];
        swift_beginAccess( &v131[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction],  aBlock,  33LL,  0LL);
        sub_1001C9860(v78, (uint64_t)v80, &qword_100645EE0);
        swift_endAccess(aBlock);
        uint64_t v39 = v56;
        unint64_t v81 = v125;
        uint64_t v82 = v138;
        uint64_t v83 = (uint64_t)v139;
      }

      else
      {
        if (qword_100643EB8 != -1) {
          swift_once(&qword_100643EB8, sub_1001B3AC8);
        }
        uint64_t v62 = type metadata accessor for Logger(0LL);
        sub_100186DE4(v62, (uint64_t)qword_100645E00);
        uint64_t v63 = (char *)v122;
        uint64_t v119 = *(uint64_t (**)(char *, char *, uint64_t))(v13 + 16);
        uint64_t v64 = v119((char *)v122, v22, v39);
        unint64_t v65 = (os_log_s *)Logger.logObject.getter(v64);
        os_log_type_t v66 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v65, v66))
        {
          uint64_t v67 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v68 = swift_slowAlloc(32LL, -1LL);
          aBlock[0] = v68;
          *(_DWORD *)uint64_t v67 = 136315138;
          uint64_t v69 = sub_100183F14( (unint64_t *)&qword_1006460B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter(v39, v69);
          unint64_t v72 = v71;
          uint64_t v142 = (void *)sub_10018CDB4(v70, v71, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, aBlock, v67 + 4, v67 + 12);
          swift_bridgeObjectRelease(v72);
          uint64_t v122 = *(void (**)(char *, uint64_t))(v13 + 8);
          v122(v63, v39);
          _os_log_impl( (void *)&_mh_execute_header,  v65,  v66,  "SDAirDropNearFieldService: begin nearby sharing interaction:%s",  v67,  0xCu);
          swift_arrayDestroy(v68, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v68, -1LL, -1LL);
          uint64_t v73 = v67;
          uint64_t v40 = v124;
          swift_slowDealloc(v73, -1LL, -1LL);
        }

        else
        {
          uint64_t v122 = *(void (**)(char *, uint64_t))(v13 + 8);
          v122(v63, v39);
        }

        uint64_t v82 = v138;
        uint64_t v84 = v139;
        uint64_t v74 = v128;
        uint64_t v86 = v140;
        uint64_t v85 = v141;
        uint64_t v87 = (uint64_t)v126;
        (*(void (**)(char *, char *, os_log_s *))(v140 + 16))(v126, v40, v141);
        (*(void (**)(uint64_t, void, uint64_t, os_log_s *))(v86 + 56))(v87, 0LL, 1LL, v85);
        uint64_t KeyPath = swift_getKeyPath(&unk_1004CDC48);
        uint64_t v89 = swift_getKeyPath(&unk_1004CDC70);
        uint64_t v90 = v123;
        sub_1001915A4(v87, v123, &qword_100645EE0);
        id v79 = v131;
        static Published.subscript.setter(v90, v131, KeyPath, v89);
        sub_100187100(v87, &qword_100645EE0);
        unint64_t v81 = v125;
        uint64_t v75 = v127;
        uint64_t v44 = v119;
        uint64_t v83 = (uint64_t)v84;
      }

      sub_1001BB28C();
      v44(v74, v81, v39);
      uint64_t v91 = v120;
      uint64_t v92 = *(unsigned __int8 *)(v120 + 80);
      uint64_t v93 = (v92 + 24) & ~v92;
      uint64_t v94 = swift_allocObject(&unk_1005D3678, v93 + v75, v92 | 7);
      *(void *)(v94 + swift_weakDestroy(v0 + 16) = v79;
      (*(void (**)(uint64_t, char *, uint64_t))(v91 + 32))(v94 + v93, v74, v39);
      aBlock[4] = (uint64_t)sub_1001CDD10;
      uint64_t v144 = v94;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_1001B9FE4;
      aBlock[3] = (uint64_t)&unk_1005D3690;
      unint64_t v95 = _Block_copy(aBlock);
      uint64_t v142 = &_swiftEmptyArrayStorage;
      uint64_t v96 = sub_100183F14( (unint64_t *)&qword_100646510,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v97 = (char *)v79;
      uint64_t v98 = sub_100183098((uint64_t *)&unk_1006460D0);
      uint64_t v99 = sub_1001CD538( (unint64_t *)&qword_100646520,  (uint64_t *)&unk_1006460D0,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v100 = v130;
      uint64_t v101 = v98;
      uint64_t v102 = (uint64_t)v125;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v142, v101, v99, v129, v96);
      uint64_t v103 = type metadata accessor for DispatchWorkItem(0LL);
      swift_allocObject(v103, *(unsigned int *)(v103 + 48), *(unsigned __int16 *)(v103 + 52));
      uint64_t v104 = DispatchWorkItem.init(flags:block:)(v100, v95);
      uint64_t v105 = swift_release(v144);
      uint64_t v106 = v132;
      uint64_t v107 = static DispatchTime.now()(v105);
      uint64_t v108 = v133;
      static SFPlatform.watchOS.getter(v107);
      LOBYTE(v96) = static SFPlatform.isPlatform(_:)(v108);
      (*(void (**)(char *, uint64_t))(v136 + 8))(v108, v137);
      double v109 = 1.5;
      if ((v96 & 1) != 0) {
        double v109 = 2.5;
      }
      unint64_t v110 = v134;
      + infix(_:_:)(v106, v109);
      uint64_t v111 = *(void (**)(char *, uint64_t))(v135 + 8);
      v111(v106, v82);
      OS_dispatch_queue.asyncAfter(deadline:execute:)(v110, v104);
      v111(v110, v82);
      uint64_t v112 = *(void *)&v97[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_cancelNearbySharingInteractionWorkItem];
      *(void *)&v97[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_cancelNearbySharingInteractionWorkItem] = v104;
      swift_retain(v104);
      swift_release(v112);
      sub_1001C7510(v102);
      uint64_t v113 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v113 - 8) + 56LL))(v83, 1LL, 1LL, v113);
      if (qword_100643F28 != -1) {
        swift_once(&qword_100643F28, sub_100205C24);
      }
      uint64_t v114 = static AirDropActor.shared;
      uint64_t v115 = sub_100183F14( (unint64_t *)&qword_100656410,  (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor,  (uint64_t)&protocol conformance descriptor for AirDropActor);
      uint64_t v116 = swift_allocObject(&unk_1005D36C8, 32LL, 7LL);
      *(void *)(v116 + swift_weakDestroy(v0 + 16) = v114;
      *(void *)(v116 + 24) = v115;
      swift_retain(v114);
      uint64_t v117 = sub_1001B3978( v83,  (uint64_t)&unk_100646270,  v116,  (uint64_t)&unk_1005D37E0,  (uint64_t)&type metadata for () + 8,  (uint64_t)&unk_100649820);
      swift_release(v104);
      swift_release(v117);
      v122((char *)v102, v39);
      (*(void (**)(char *, os_log_s *))(v140 + 8))(v124, v141);
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    if (qword_100643EB8 != -1) {
      swift_once(&qword_100643EB8, sub_1001B3AC8);
    }
    uint64_t v58 = type metadata accessor for Logger(0LL);
    uint64_t v59 = sub_100186DE4(v58, (uint64_t)qword_100645E00);
    uint64_t v141 = (os_log_s *)Logger.logObject.getter(v59);
    os_log_type_t v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v141, v60))
    {
      char v61 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)char v61 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v141,  v60,  "SDAirDropNearFieldService: Boop To Action is disabled on beginNearbySharingInteraction",  v61,  2u);
      swift_slowDealloc(v61, -1LL, -1LL);
    }
  }

uint64_t sub_1001BB28C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100183098(&qword_10064DA60);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v41 - v6;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v41 - v13;
  uint64_t v15 = v0 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_activeAirDropTransactionID;
  swift_beginAccess( v0 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_activeAirDropTransactionID,  v48,  0LL,  0LL);
  sub_1001915A4(v15, (uint64_t)v7, &qword_10064DA60);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
  if (qword_100643EB8 != -1) {
    swift_once(&qword_100643EB8, sub_1001B3AC8);
  }
  uint64_t v45 = v5;
  uint64_t v17 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v17, (uint64_t)qword_100645E00);
  uint64_t v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v44 = swift_slowAlloc(32LL, -1LL);
    v47[0] = v44;
    uint64_t v43 = v21;
    *(_DWORD *)uint64_t v21 = 136315138;
    unsigned int v42 = v21 + 4;
    uint64_t v22 = sub_100183F14( (unint64_t *)&qword_1006460B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v8, v22);
    unint64_t v25 = v24;
    uint64_t v46 = sub_10018CDB4(v23, v24, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v42, v21 + 12);
    swift_bridgeObjectRelease(v25);
    uint64_t v26 = *(void (**)(char *, uint64_t))(v9 + 8);
    v26(v12, v8);
    uint64_t v27 = v43;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "SDAirDropNearFieldService finish existing AirDrop connection for transaction:%s",  v43,  0xCu);
    uint64_t v28 = v44;
    swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  else
  {
    uint64_t v26 = *(void (**)(char *, uint64_t))(v9 + 8);
    v26(v12, v8);
  }

  uint64_t v29 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAirDropConnectionTimeoutWorkItem;
  uint64_t v30 = *(void *)(v1
                  + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAirDropConnectionTimeoutWorkItem);
  if (v30)
  {
    uint64_t v31 = swift_retain(*(void *)(v1
                                 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAirDropConnectionTimeoutWorkItem));
    dispatch thunk of DispatchWorkItem.cancel()(v31);
    swift_release(v30);
    uint64_t v32 = *(void *)(v1 + v29);
  }

  else
  {
    uint64_t v32 = 0LL;
  }

  *(void *)(v1 + v29) = 0LL;
  swift_release(v32);
  uint64_t v33 = v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_delegate;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong( v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_delegate,  v34);
  if (Strong)
  {
    uint64_t v37 = Strong;
    sub_1002E905C((uint64_t)v14);
    swift_unknownObjectRelease(v37);
  }

  uint64_t v38 = swift_unknownObjectWeakLoadStrong(v33, v36);
  if (v38)
  {
    uint64_t v39 = v38;
    sub_10022CEE0((uint64_t)v14);
    swift_unknownObjectRelease(v39);
  }

  v26(v14, v8);
  uint64_t v40 = (uint64_t)v45;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v45, 1LL, 1LL, v8);
  swift_beginAccess(v15, v47, 33LL, 0LL);
  sub_1001C9860(v40, v15, &qword_10064DA60);
  return swift_endAccess(v47);
}

void sub_1001BB690()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v104 = *(void *)(v2 - 8);
  uint64_t v105 = v2;
  __chkstk_darwin(v2);
  uint64_t v103 = (char *)&v92 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100183098(&qword_1006460B8);
  __chkstk_darwin(v4);
  uint64_t v99 = (void **)((char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v110 = type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0LL);
  uint64_t v108 = *(void *)(v110 - 8);
  uint64_t v6 = *(void *)(v108 + 64);
  uint64_t v7 = __chkstk_darwin(v110);
  uint64_t v97 = (uint64_t)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v101 = (uint64_t)&v92 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v100 = (uint64_t)&v92 - v11;
  __chkstk_darwin(v10);
  uint64_t v109 = (uint64_t)&v92 - v12;
  uint64_t v13 = sub_100183098((uint64_t *)&unk_1006460C0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DispatchTime(0LL);
  unint64_t v95 = *(void **)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v92 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v92 - v20;
  uint64_t v107 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v102 = *(void *)(v107 - 8);
  __chkstk_darwin(v107);
  uint64_t v106 = (char *)&v92 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = sub_100183098(&qword_10064DA60);
  __chkstk_darwin(v23);
  unint64_t v25 = (char *)&v92 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643EB8 != -1) {
    swift_once(&qword_100643EB8, sub_1001B3AC8);
  }
  uint64_t v26 = type metadata accessor for Logger(0LL);
  os_log_t v98 = (os_log_t)sub_100186DE4(v26, (uint64_t)qword_100645E00);
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v98);
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "SDAirDropNearFieldService: stop services.", v29, 2u);
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  uint64_t v30 = (uint64_t)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_activeAirDropTransactionID];
  swift_beginAccess( &v1[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_activeAirDropTransactionID],  v118,  0LL,  0LL);
  sub_1001915A4(v30, (uint64_t)v25, &qword_10064DA60);
  uint64_t v31 = type metadata accessor for UUID(0LL);
  uint64_t v32 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v31 - 8) + 48LL);
  uint64_t v96 = v31;
  LODWORD(v30) = v32(v25, 1LL);
  sub_100187100((uint64_t)v25, &qword_10064DA60);
  if ((_DWORD)v30 != 1)
  {
    uint64_t v33 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAirDropConnectionTimeoutWorkItem;
    if (!*(void *)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAirDropConnectionTimeoutWorkItem])
    {
      if ((sub_1001B3BF4() & 1) != 0)
      {
        uint64_t v34 = swift_allocObject(&unk_1005D3448, 24LL, 7LL);
        *(void *)(v34 + swift_weakDestroy(v0 + 16) = v1;
        uint64_t v116 = sub_1001C972C;
        uint64_t v117 = v34;
        aBlock = _NSConcreteStackBlock;
        uint64_t v113 = 1107296256LL;
        uint64_t v114 = sub_1001B9FE4;
        uint64_t v115 = &unk_1005D3460;
        uint64_t v94 = _Block_copy(&aBlock);
        uint64_t v111 = &_swiftEmptyArrayStorage;
        uint64_t v93 = (void *)sub_100183F14( (unint64_t *)&qword_100646510,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v1;
        uint64_t v35 = sub_100183098((uint64_t *)&unk_1006460D0);
        uint64_t v36 = sub_1001CD538( (unint64_t *)&qword_100646520,  (uint64_t *)&unk_1006460D0,  (uint64_t)&protocol conformance descriptor for [A]);
        uint64_t v37 = v106;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v111, v35, v36, v107, v93);
        uint64_t v38 = type metadata accessor for DispatchWorkItem(0LL);
        swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
        uint64_t v39 = DispatchWorkItem.init(flags:block:)(v37, v94);
        swift_release(v117);
        uint64_t v40 = *(void *)&v1[v33];
        *(void *)&v1[v33] = v39;
        swift_retain(v39);
        uint64_t v41 = swift_release(v40);
        static DispatchTime.now()(v41);
        + infix(_:_:)(v19, 45.0);
        unsigned int v42 = (void (*)(char *, uint64_t))v95[1];
        v42(v19, v16);
        OS_dispatch_queue.asyncAfter(deadline:execute:)(v21, v39);
        swift_release(v39);
        v42(v21, v16);
      }

      else
      {
        sub_1001BB28C();
      }
    }
  }

  uint64_t v43 = type metadata accessor for SDNearFieldTap(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56LL))(v15, 1LL, 1LL, v43);
  uint64_t v44 = (uint64_t)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_processingTap];
  swift_beginAccess( &v1[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_processingTap],  &aBlock,  33LL,  0LL);
  sub_1001C9860((uint64_t)v15, v44, (uint64_t *)&unk_1006460C0);
  swift_endAccess(&aBlock);
  uint64_t v45 = *(void **)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController];
  uint64_t v46 = v110;
  if (v45)
  {
    id v47 = v45;
    os_log_type_t v48 = [v47 currentTransaction];
    if (v48)
    {
      uint64_t v94 = v47;
      unint64_t v95 = v48;
      uint64_t v49 = v109;
      UUID.init()(v48);
      uint64_t v50 = sub_1000ED920((void *)kSecAttrKeyTypeECSECPrimeRandom, 256LL);
      *(void *)(v49 + *(int *)(v46 + 20)) = v50;
      uint64_t v51 = sub_1000EDB14(v50);
      uint64_t v52 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v51);
      uint64_t v54 = v53;

      unint64_t v55 = (uint64_t *)(v49 + *(int *)(v46 + 24));
      *unint64_t v55 = v52;
      v55[1] = v54;
      uint64_t v56 = (uint64_t)v99;
      sub_1001A4B84(v49, (uint64_t)v99, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
      uint64_t v57 = v108;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v108 + 56))(v56, 0LL, 1LL, v46);
      uint64_t v58 = (uint64_t)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_localExchangePayload];
      swift_beginAccess( &v1[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_localExchangePayload],  &aBlock,  33LL,  0LL);
      sub_1001C9860(v56, v58, &qword_1006460B8);
      swift_endAccess(&aBlock);
      uint64_t v59 = v100;
      sub_1001A4B84(v49, v100, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
      uint64_t v60 = v101;
      uint64_t v61 = sub_1001A4B84(v49, v101, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
      uint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
      os_log_type_t v63 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v62, v63))
      {
        uint64_t v64 = swift_slowAlloc(22LL, -1LL);
        uint64_t v93 = (void *)swift_slowAlloc(8LL, -1LL);
        uint64_t v99 = (void **)swift_slowAlloc(32LL, -1LL);
        aBlock = v99;
        *(_DWORD *)uint64_t v64 = 138412546;
        os_log_t v98 = v62;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        uint64_t v111 = isa;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &aBlock, v64 + 4, v64 + 12);
        os_log_type_t v66 = v93;
        *uint64_t v93 = isa;
        sub_1001A4BC8(v59, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
        *(_WORD *)(v64 + 12) = 2080;
        uint64_t v67 = sub_100183F14( (unint64_t *)&qword_1006460B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter(v96, v67);
        unint64_t v70 = v69;
        uint64_t v111 = (void *)sub_10018CDB4(v68, v69, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &aBlock, v64 + 14, v64 + 22);
        swift_bridgeObjectRelease(v70);
        sub_1001A4BC8(v60, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
        os_log_t v71 = v98;
        _os_log_impl( (void *)&_mh_execute_header,  v98,  v63,  "SDAirDropNearFieldService: Updating public key: %@ listener ID: %s",  (uint8_t *)v64,  0x16u);
        uint64_t v72 = sub_100183098(&qword_1006454E0);
        swift_arrayDestroy(v66, 1LL, v72);
        swift_slowDealloc(v66, -1LL, -1LL);
        uint64_t v73 = (uint64_t)v99;
        swift_arrayDestroy(v99, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v73, -1LL, -1LL);
        uint64_t v74 = v64;
        uint64_t v57 = v108;
        swift_slowDealloc(v74, -1LL, -1LL);
      }

      else
      {
        sub_1001A4BC8(v59, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
        sub_1001A4BC8(v60, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
      }

      uint64_t v75 = v97;
      uint64_t v76 = v109;
      sub_1001A4B84(v109, v97, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
      uint64_t v77 = *(unsigned __int8 *)(v57 + 80);
      uint64_t v78 = (v77 + 32) & ~v77;
      uint64_t v79 = swift_allocObject(&unk_1005D33F8, v78 + v6, v77 | 7);
      unint64_t v80 = v94;
      unint64_t v81 = v95;
      *(void *)(v79 + swift_weakDestroy(v0 + 16) = v94;
      *(void *)(v79 + 24) = v81;
      sub_1001A4B40(v75, v79 + v78, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
      uint64_t v116 = sub_1001C96C0;
      uint64_t v117 = v79;
      aBlock = _NSConcreteStackBlock;
      uint64_t v113 = 1107296256LL;
      uint64_t v114 = sub_1001B9FE4;
      uint64_t v115 = &unk_1005D3410;
      uint64_t v82 = _Block_copy(&aBlock);
      id v83 = v80;
      uint64_t v84 = swift_unknownObjectRetain(v81);
      uint64_t v85 = v103;
      static DispatchQoS.unspecified.getter(v84);
      uint64_t v111 = &_swiftEmptyArrayStorage;
      uint64_t v86 = sub_100183F14( (unint64_t *)&qword_100646510,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v87 = sub_100183098((uint64_t *)&unk_1006460D0);
      uint64_t v88 = sub_1001CD538( (unint64_t *)&qword_100646520,  (uint64_t *)&unk_1006460D0,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v89 = v106;
      uint64_t v90 = v87;
      uint64_t v91 = v107;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v111, v90, v88, v107, v86);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v85, v89, v82);
      _Block_release(v82);
      swift_unknownObjectRelease(v81);

      (*(void (**)(char *, uint64_t))(v102 + 8))(v89, v91);
      (*(void (**)(char *, uint64_t))(v104 + 8))(v85, v105);
      sub_1001A4BC8(v76, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
      swift_release(v117);
    }

    else
    {
    }
  }

uint64_t sub_1001BC164(uint64_t a1)
{
  uint64_t v2 = sub_100183098(&qword_100646560);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  uint64_t v6 = swift_allocObject(&unk_1005D3498, 24LL, 7LL);
  swift_unknownObjectWeakInit(v6 + 16, a1);
  uint64_t v7 = swift_allocObject(&unk_1005D34C0, 32LL, 7LL);
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = &unk_1006460E8;
  *(void *)(v7 + 24) = v6;
  uint64_t v8 = sub_100183098(&qword_100646100);
  uint64_t v9 = static Task<>.noThrow(priority:operation:)(v4, &unk_1006460F8, v7, v8);
  swift_release(v7);
  swift_release(v9);
  return sub_100187100((uint64_t)v4, &qword_100646560);
}

uint64_t sub_1001BC278(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_1001BC2E0, static AirDropActor.shared, 0LL);
}

uint64_t sub_1001BC2E0()
{
  uint64_t v1 = *(void *)(v0 + 40) + 16LL;
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    sub_1001BB28C();
  }

  return (*(uint64_t (**)(BOOL))(v0 + 8))(Strong == 0LL);
}

uint64_t sub_1001BC344(uint64_t a1, int *a2)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 24) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1001BC39C;
  return v5();
}

uint64_t sub_1001BC39C(char a1)
{
  uint64_t v3 = *(_BYTE **)(*v1 + 16);
  uint64_t v5 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 24));
  *uint64_t v3 = a1 & 1;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1001BC3F0(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

void sub_1001BC41C(void *a1, uint64_t a2)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v4 = UUID._bridgeToObjectiveC()().super.isa;
  [a1 invalidateTransaction:a2 updatedPkData:isa bonjourListenerUUID:v4];
}

uint64_t sub_1001BC498(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  uint8_t v3[16] = a1;
  uint64_t v4 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType(0LL);
  v3[19] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[20] = v5;
  uint64_t v6 = *(void *)(v5 + 64);
  v3[21] = v6;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v3[22] = swift_task_alloc(v7);
  v3[23] = swift_task_alloc(v7);
  v3[24] = swift_task_alloc(v7);
  uint64_t v8 = sub_100183098(&qword_10064DA60);
  v3[25] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  v3[26] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[27] = v10;
  uint64_t v11 = *(void *)(v10 + 64);
  v3[28] = v11;
  unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v3[29] = swift_task_alloc(v12);
  v3[30] = swift_task_alloc(v12);
  v3[31] = swift_task_alloc(v12);
  v3[32] = swift_task_alloc(v12);
  v3[33] = swift_task_alloc(v12);
  v3[34] = swift_task_alloc(v12);
  v3[35] = swift_task_alloc(v12);
  uint64_t v13 = sub_100183098(&qword_1006460B8);
  v3[36] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0LL);
  v3[37] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v3[38] = v15;
  uint64_t v16 = *(void *)(v15 + 64);
  v3[39] = v16;
  unint64_t v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v3[40] = swift_task_alloc(v17);
  v3[41] = swift_task_alloc(v17);
  v3[42] = swift_task_alloc(v17);
  uint64_t v18 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0LL);
  v3[43] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v3[44] = v19;
  v3[45] = swift_task_alloc((*(void *)(v19 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v20 = (*(void *)(*(void *)(sub_100183098((uint64_t *)&unk_1006460C0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[46] = swift_task_alloc(v20);
  v3[47] = swift_task_alloc(v20);
  uint64_t v21 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State(0LL);
  v3[48] = v21;
  uint64_t v22 = *(void *)(v21 - 8);
  v3[49] = v22;
  v3[50] = swift_task_alloc((*(void *)(v22 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v23 = (*(void *)(*(void *)(sub_100183098(&qword_100645EE0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[51] = swift_task_alloc(v23);
  v3[52] = swift_task_alloc(v23);
  uint64_t v24 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0LL);
  v3[53] = v24;
  uint64_t v25 = *(void *)(v24 - 8);
  v3[54] = v25;
  v3[55] = swift_task_alloc((*(void *)(v25 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = type metadata accessor for SDNearFieldTap(0LL);
  v3[56] = v26;
  uint64_t v27 = *(void *)(v26 - 8);
  v3[57] = v27;
  uint64_t v28 = *(void *)(v27 + 64);
  v3[58] = v28;
  unint64_t v29 = (v28 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v3[59] = swift_task_alloc(v29);
  v3[60] = swift_task_alloc(v29);
  v3[61] = swift_task_alloc(v29);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v30 = static AirDropActor.shared;
  v3[62] = static AirDropActor.shared;
  return swift_task_switch(sub_1001BC780, v30, 0LL);
}

uint64_t sub_1001BC780()
{
  if (qword_100643EB8 != -1) {
    swift_once(&qword_100643EB8, sub_1001B3AC8);
  }
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 488);
  uint64_t v3 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 504) = sub_100186DE4(v3, (uint64_t)qword_100645E00);
  uint64_t v4 = sub_1001A4B84(v1, v2, type metadata accessor for SDNearFieldTap);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void *)(v0 + 488);
  if (v7)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v114 = swift_slowAlloc(32LL, -1LL);
    uint64_t v10 = v114;
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v11 = sub_10033F2B4();
    unint64_t v13 = v12;
    *(void *)(v0 + 120) = sub_10018CDB4(v11, v12, &v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v13);
    sub_1001A4BC8(v8, type metadata accessor for SDNearFieldTap);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "SDAirDropNearFieldService: handle tap:%s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    sub_1001A4BC8(*(void *)(v0 + 488), type metadata accessor for SDNearFieldTap);
  }

  uint64_t v14 = *(void *)(v0 + 424);
  uint64_t v15 = *(void *)(v0 + 432);
  uint64_t v16 = *(void *)(v0 + 408);
  uint64_t v17 = *(void *)(v0 + 144)
      + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction;
  swift_beginAccess(v17, v0 + 16, 0LL, 0LL);
  sub_1001915A4(v17, v16, &qword_100645EE0);
  uint64_t v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v18(v16, 1LL, v14) == 1)
  {
    uint64_t v19 = *(void *)(v0 + 408);
    uint64_t v20 = *(void *)(v0 + 144);
    uint64_t KeyPath = swift_getKeyPath(&unk_1004CDC48);
    uint64_t v22 = swift_getKeyPath(&unk_1004CDC70);
    static Published.subscript.getter(v20, KeyPath, v22);
    swift_release(v22);
    swift_release(KeyPath);
    sub_100187100(v19, &qword_100645EE0);
  }

  else
  {
    uint64_t v23 = *(void *)(v0 + 424);
    uint64_t v24 = *(void *)(v0 + 432);
    uint64_t v25 = *(void *)(v0 + 416);
    (*(void (**)(uint64_t, void, uint64_t))(v24 + 32))(v25, *(void *)(v0 + 408), v23);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56))(v25, 0LL, 1LL, v23);
  }

  uint64_t v26 = *(void *)(v0 + 416);
  uint64_t v27 = *(void *)(v0 + 424);
  if (v18(v26, 1LL, v27) == 1)
  {
    uint64_t v28 = sub_100187100(v26, &qword_100645EE0);
    unint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "SDAirDropNearFieldService: handling tap while we don't have a current nearbySharingInteraction.",  v31,  2u);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    goto LABEL_25;
  }

  uint64_t v33 = *(void *)(v0 + 392);
  uint64_t v32 = *(void *)(v0 + 400);
  uint64_t v34 = *(void *)(v0 + 384);
  uint64_t v35 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(v0 + 432) + 32LL))( *(void *)(v0 + 440),  v26,  v27);
  uint64_t v36 = SFAirDrop.NearbySharingInteraction.state.getter(v35);
  char v37 = SFAirDrop.NearbySharingInteraction.State.isConnected.getter(v36);
  uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
  if ((v37 & 1) != 0)
  {
    uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v39, v40)) {
      goto LABEL_23;
    }
    uint64_t v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v41 = 0;
    unsigned int v42 = "SDAirDropNearFieldService: nearbySharingInteraction is already connected.";
    goto LABEL_22;
  }

  uint64_t v43 = *(void *)(v0 + 448);
  uint64_t v44 = *(void *)(v0 + 456);
  uint64_t v45 = *(void *)(v0 + 376);
  uint64_t v46 = *(void *)(v0 + 144) + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_processingTap;
  swift_beginAccess(v46, v0 + 40, 0LL, 0LL);
  sub_1001915A4(v46, v45, (uint64_t *)&unk_1006460C0);
  LODWORD(v43) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v45, 1LL, v43);
  uint64_t v47 = sub_100187100(v45, (uint64_t *)&unk_1006460C0);
  if ((_DWORD)v43 != 1)
  {
    uint64_t v39 = (os_log_s *)Logger.logObject.getter(v47);
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v39, v40)) {
      goto LABEL_23;
    }
    uint64_t v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v41 = 0;
    unsigned int v42 = "SDAirDropNearFieldService: still handling previous tap.";
LABEL_22:
    _os_log_impl((void *)&_mh_execute_header, v39, v40, v42, v41, 2u);
    swift_slowDealloc(v41, -1LL, -1LL);
LABEL_23:
    uint64_t v59 = *(void *)(v0 + 432);
    uint64_t v58 = *(void *)(v0 + 440);
    uint64_t v60 = *(void *)(v0 + 424);

    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v58, v60);
LABEL_25:
    uint64_t v61 = *(void *)(v0 + 480);
    uint64_t v62 = *(void *)(v0 + 472);
    uint64_t v63 = *(void *)(v0 + 440);
    uint64_t v64 = *(void *)(v0 + 408);
    uint64_t v65 = *(void *)(v0 + 416);
    uint64_t v66 = *(void *)(v0 + 400);
    uint64_t v68 = *(void *)(v0 + 368);
    uint64_t v67 = *(void *)(v0 + 376);
    uint64_t v69 = *(void *)(v0 + 360);
    uint64_t v97 = *(void *)(v0 + 336);
    uint64_t v98 = *(void *)(v0 + 328);
    uint64_t v99 = *(void *)(v0 + 320);
    uint64_t v100 = *(void *)(v0 + 288);
    uint64_t v101 = *(void *)(v0 + 280);
    uint64_t v102 = *(void *)(v0 + 272);
    uint64_t v103 = *(void *)(v0 + 264);
    uint64_t v104 = *(void *)(v0 + 256);
    uint64_t v105 = *(void *)(v0 + 248);
    uint64_t v106 = *(void *)(v0 + 240);
    uint64_t v107 = *(void *)(v0 + 232);
    uint64_t v108 = *(void *)(v0 + 200);
    uint64_t v109 = *(void *)(v0 + 192);
    uint64_t v110 = *(void *)(v0 + 184);
    uint64_t v112 = *(void *)(v0 + 176);
    swift_task_dealloc(*(void *)(v0 + 488));
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v65);
    swift_task_dealloc(v64);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v103);
    swift_task_dealloc(v104);
    swift_task_dealloc(v105);
    swift_task_dealloc(v106);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v109);
    swift_task_dealloc(v110);
    swift_task_dealloc(v112);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v48 = *(void *)(v0 + 448);
  uint64_t v49 = *(void *)(v0 + 128);
  if ((*(_BYTE *)(v49 + *(int *)(v48 + 72)) & 1) != 0)
  {
    os_log_t v71 = (os_log_s *)Logger.logObject.getter(v49);
    os_log_type_t v72 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v73 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v73 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v71,  v72,  "SDAirDropNearFieldService: tap application label not supported.",  v73,  2u);
      swift_slowDealloc(v73, -1LL, -1LL);
    }

    uint64_t v74 = *(void *)(v0 + 144);

    uint64_t v75 = *(void **)(v74 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
    if (v75)
    {
      uint64_t v113 = *(void *)(v0 + 440);
      uint64_t v76 = *(void *)(v0 + 424);
      uint64_t v77 = *(void *)(v0 + 432);
      uint64_t v78 = *(void *)(v0 + 352);
      uint64_t v79 = *(_BYTE **)(v0 + 360);
      uint64_t v80 = *(void *)(v0 + 344);
      id v81 = v75;
      NSString v82 = String._bridgeToObjectiveC()();
      unsigned __int8 v83 = [v81 supportsApplicationLabel:v82];

      *uint64_t v79 = v83 ^ 1;
      (*(void (**)(_BYTE *, void, uint64_t))(v78 + 104))( v79,  enum case for SFAirDrop.NearbySharingInteraction.FailureType.unsupported(_:),  v80);
      sub_1001BDBB4((uint64_t)v79);

      (*(void (**)(_BYTE *, uint64_t))(v78 + 8))(v79, v80);
      (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v113, v76);
    }

    else
    {
      (*(void (**)(void, void))(*(void *)(v0 + 432) + 8LL))( *(void *)(v0 + 440),  *(void *)(v0 + 424));
    }

    goto LABEL_25;
  }

  uint64_t v50 = *(void *)(v0 + 456);
  uint64_t v51 = *(void *)(v0 + 368);
  uint64_t v52 = *(void *)(v0 + 304);
  uint64_t v111 = *(void *)(v0 + 296);
  uint64_t v53 = *(void *)(v0 + 288);
  uint64_t v54 = *(void *)(v0 + 144);
  sub_1001A4B84(v49, v51, type metadata accessor for SDNearFieldTap);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v50 + 56))(v51, 0LL, 1LL, v48);
  swift_beginAccess(v46, v0 + 64, 33LL, 0LL);
  sub_1001C9860(v51, v46, (uint64_t *)&unk_1006460C0);
  swift_endAccess(v0 + 64);
  uint64_t v55 = v54 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_localExchangePayload;
  swift_beginAccess( v54 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_localExchangePayload,  v0 + 88,  0LL,  0LL);
  sub_1001915A4(v55, v53, &qword_1006460B8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v53, 1LL, v111) == 1)
  {
    uint64_t v56 = *(void *)(v0 + 288);
    uint64_t v57 = &qword_1006460B8;
LABEL_34:
    uint64_t v90 = sub_100187100(v56, v57);
    uint64_t v91 = (os_log_s *)Logger.logObject.getter(v90);
    os_log_type_t v92 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v91, v92))
    {
      uint64_t v93 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v93 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v91,  v92,  "SDAirDropNearFieldService: Failed to get endpoint UUID from tap",  v93,  2u);
      swift_slowDealloc(v93, -1LL, -1LL);
    }

    uint64_t v95 = *(void *)(v0 + 432);
    uint64_t v94 = *(void *)(v0 + 440);
    uint64_t v96 = *(void *)(v0 + 424);

    sub_1001BE780("SDAirDropNearFieldService: received unexpected Payload");
    (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v94, v96);
    goto LABEL_25;
  }

  uint64_t v84 = *(void *)(v0 + 144);
  sub_1001A4B40( *(void *)(v0 + 288),  *(void *)(v0 + 336),  type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong( v84 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_delegate,  v85);
  *(void *)(v0 + 512) = Strong;
  if (!Strong)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 216) + 56LL))( *(void *)(v0 + 200),  1LL,  1LL,  *(void *)(v0 + 208));
    uint64_t v89 = *(void *)(v0 + 200);
    sub_1001A4BC8(*(void *)(v0 + 336), type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
    uint64_t v57 = &qword_10064DA60;
    uint64_t v56 = v89;
    goto LABEL_34;
  }

  uint64_t v87 = *(void *)(*(void *)(v0 + 336) + *(int *)(*(void *)(v0 + 296) + 20LL));
  *(void *)(v0 + 520) = v87;
  uint64_t v88 = static AirDropActor.shared;
  *(void *)(v0 + 52_Block_object_dispose(va, 8) = static AirDropActor.shared;
  swift_unknownObjectRetain(v87);
  return swift_task_switch(sub_1001BD134, v88, 0LL);
}

uint64_t sub_1001BD134()
{
  uint64_t v1 = (uint64_t **)swift_task_alloc(dword_10064DAD4);
  v0[67] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = (uint64_t *)sub_1001BD19C;
  return sub_1002E895C(v0[25], v0[17], v0[65], v0[16]);
}

uint64_t sub_1001BD19C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 528LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 536LL));
  return swift_task_switch(sub_1001BD1F4, v1, 0LL);
}

uint64_t sub_1001BD1F4()
{
  uint64_t v1 = v0[65];
  uint64_t v2 = v0[62];
  swift_unknownObjectRelease(v0[64]);
  swift_unknownObjectRelease(v1);
  return swift_task_switch(sub_1001BD240, v2, 0LL);
}

uint64_t sub_1001BD240()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 200);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v3, 0LL, 1LL, v1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1LL, v1) != 1)
  {
    uint64_t v12 = *(void *)(v0 + 448);
    uint64_t v13 = *(void *)(v0 + 128);
    (*(void (**)(void, void, void))(*(void *)(v0 + 216) + 32LL))( *(void *)(v0 + 280),  *(void *)(v0 + 200),  *(void *)(v0 + 208));
    __asm { BR              X12 }
  }

  uint64_t v4 = *(void *)(v0 + 200);
  sub_1001A4BC8(*(void *)(v0 + 336), type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
  uint64_t v5 = sub_100187100(v4, &qword_10064DA60);
  os_log_type_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "SDAirDropNearFieldService: Failed to get endpoint UUID from tap",  v8,  2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  uint64_t v10 = *(void *)(v0 + 432);
  uint64_t v9 = *(void *)(v0 + 440);
  uint64_t v11 = *(void *)(v0 + 424);

  sub_1001BE780("SDAirDropNearFieldService: received unexpected Payload");
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  uint64_t v14 = *(void *)(v0 + 480);
  uint64_t v15 = *(void *)(v0 + 472);
  uint64_t v16 = *(void *)(v0 + 440);
  uint64_t v17 = *(void *)(v0 + 408);
  uint64_t v18 = *(void *)(v0 + 416);
  uint64_t v19 = *(void *)(v0 + 400);
  uint64_t v21 = *(void *)(v0 + 368);
  uint64_t v20 = *(void *)(v0 + 376);
  uint64_t v22 = *(void *)(v0 + 360);
  uint64_t v24 = *(void *)(v0 + 336);
  uint64_t v25 = *(void *)(v0 + 328);
  uint64_t v26 = *(void *)(v0 + 320);
  uint64_t v27 = *(void *)(v0 + 288);
  uint64_t v28 = *(void *)(v0 + 280);
  uint64_t v29 = *(void *)(v0 + 272);
  uint64_t v30 = *(void *)(v0 + 264);
  uint64_t v31 = *(void *)(v0 + 256);
  uint64_t v32 = *(void *)(v0 + 248);
  uint64_t v33 = *(void *)(v0 + 240);
  uint64_t v34 = *(void *)(v0 + 232);
  uint64_t v35 = *(void *)(v0 + 200);
  uint64_t v36 = *(void *)(v0 + 192);
  uint64_t v37 = *(void *)(v0 + 184);
  uint64_t v38 = *(void *)(v0 + 176);
  swift_task_dealloc(*(void *)(v0 + 488));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BDBB4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v37 = a1;
  uint64_t v3 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  os_log_type_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100183098(&qword_100646560);
  __chkstk_darwin(v7);
  uint64_t v36 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v35 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643EB8 != -1) {
    swift_once(&qword_100643EB8, sub_1001B3AC8);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = sub_100186DE4(v12, (uint64_t)qword_100645E00);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    uint64_t v34 = v10;
    uint64_t v17 = v16;
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "SDAirDropNearFieldService: near field interruption", v16, 2u);
    uint64_t v10 = v34;
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  uint64_t v18 = sub_1001B3E90(v38);
  uint64_t v20 = v19;
  uint64_t v21 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48LL))(v20, 1LL, v21))
  {
    uint64_t v22 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v35, v37, v3);
    (*(void (**)(char *, void, uint64_t))(v10 + 104))( v22,  enum case for SFAirDrop.NearbySharingInteraction.State.connectionInterrupted(_:),  v9);
    SFAirDrop.NearbySharingInteraction.state.setter(v22);
  }

  ((void (*)(void *, void))v18)(v38, 0LL);
  uint64_t v23 = type metadata accessor for TaskPriority(0LL);
  uint64_t v24 = (uint64_t)v36;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v36, 1LL, 1LL, v23);
  uint64_t v25 = swift_allocObject(&unk_1005D3498, 24LL, 7LL);
  swift_unknownObjectWeakInit(v25 + 16, v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))( (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v37,  v3);
  uint64_t v26 = qword_100643F28;
  swift_retain(v25);
  if (v26 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v27 = static AirDropActor.shared;
  uint64_t v28 = sub_100183F14( (unint64_t *)&qword_100656410,  (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor,  (uint64_t)&protocol conformance descriptor for AirDropActor);
  uint64_t v29 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v30 = (v29 + 40) & ~v29;
  uint64_t v31 = (char *)swift_allocObject(&unk_1005D3600, v30 + v5, v29 | 7);
  *((void *)v31 + 2) = v27;
  *((void *)v31 + 3) = v28;
  *((void *)v31 + 4) = v25;
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(&v31[v30], v6, v3);
  swift_retain(v27);
  swift_release(v25);
  uint64_t v32 = sub_1001B3978( v24,  (uint64_t)&unk_100646200,  (uint64_t)v31,  (uint64_t)&unk_1005D37E0,  (uint64_t)&type metadata for () + 8,  (uint64_t)&unk_100649820);
  return swift_release(v32);
}

void sub_1001BDF24(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v90 = a6;
  uint64_t v85 = a5;
  uint64_t v86 = a4;
  uint64_t v95 = a3;
  uint64_t v8 = sub_100183098(&qword_100645EE0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v82 = (uint64_t)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  unsigned __int8 v83 = (char *)&v81 - v12;
  __chkstk_darwin(v11);
  os_log_type_t v92 = (char *)&v81 - v13;
  uint64_t v89 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0LL);
  uint64_t v93 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  id v81 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100183098(&qword_10064DA60);
  __chkstk_darwin(v15);
  uint64_t v94 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = (int *)type metadata accessor for SDNearFieldTap(0LL);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v87 = (uint64_t)&v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v91 = (uint64_t)&v81 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v81 - v23;
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v81 - v25;
  uint64_t v27 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v30 = (char *)&v81 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void, uint64_t))(v28 + 104))( v30,  enum case for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType.meet(_:),  v27);
  uint64_t v31 = sub_100183F14( &qword_100646208,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType,  (uint64_t)&protocol conformance descriptor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType);
  char v32 = dispatch thunk of static Equatable.== infix(_:_:)(a1, v30, v27, v31);
  uint64_t v33 = v30;
  uint64_t v34 = a2;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v33, v27);
  sub_1001A4B84(a2, (uint64_t)v26, type metadata accessor for SDNearFieldTap);
  if ((v32 & 1) != 0)
  {
    int v35 = v26[v17[11]];
    sub_1001A4BC8((uint64_t)v26, type metadata accessor for SDNearFieldTap);
    if (v35 != 1) {
      goto LABEL_12;
    }
  }

  else
  {
    sub_1001A4BC8((uint64_t)v26, type metadata accessor for SDNearFieldTap);
  }

  if (qword_100643EB8 != -1) {
    swift_once(&qword_100643EB8, sub_1001B3AC8);
  }
  uint64_t v36 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v36, (uint64_t)qword_100645E00);
  uint64_t v88 = a2;
  uint64_t v37 = sub_1001A4B84(a2, (uint64_t)v24, type metadata accessor for SDNearFieldTap);
  uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
  os_log_type_t v39 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = swift_slowAlloc(12LL, -1LL);
    uint64_t v84 = a1;
    uint64_t v41 = (uint8_t *)v40;
    uint64_t v42 = swift_slowAlloc(32LL, -1LL);
    v98[0] = v42;
    *(_DWORD *)uint64_t v41 = 136315138;
    uint64_t v43 = type metadata accessor for UUID(0LL);
    uint64_t v44 = sub_100183F14( (unint64_t *)&qword_1006460B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter(v43, v44);
    unint64_t v47 = v46;
    uint64_t v96 = sub_10018CDB4(v45, v46, v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v41 + 4, v41 + 12);
    swift_bridgeObjectRelease(v47);
    sub_1001A4BC8((uint64_t)v24, type metadata accessor for SDNearFieldTap);
    _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "SDAirDropNearFieldService: begin listening for incoming AirDrop connection for transaction:%s",  v41,  0xCu);
    swift_arrayDestroy(v42, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1LL, -1LL);
    uint64_t v48 = v41;
    a1 = v84;
    swift_slowDealloc(v48, -1LL, -1LL);
  }

  else
  {
    sub_1001A4BC8((uint64_t)v24, type metadata accessor for SDNearFieldTap);
  }

  uint64_t v34 = v88;
  uint64_t v49 = v88 + v17[15];
  uint64_t v50 = type metadata accessor for UUID(0LL);
  uint64_t v51 = *(void *)(v50 - 8);
  uint64_t v52 = (uint64_t)v94;
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v94, v49, v50);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v51 + 56))(v52, 0LL, 1LL, v50);
  uint64_t v53 = v95;
  uint64_t v54 = &v95[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_activeAirDropTransactionID];
  swift_beginAccess( &v95[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_activeAirDropTransactionID],  v98,  33LL,  0LL);
  sub_1001C9860(v52, (uint64_t)v54, &qword_10064DA60);
  swift_endAccess(v98);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong( &v53[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_delegate],  v55);
  if (Strong)
  {
    uint64_t v57 = Strong;
    uint64_t v58 = type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0LL);
    sub_10022C9D4( v49,  v86,  *(void *)(v86 + *(int *)(v58 + 20)),  *(void *)(v34 + v17[13]),  *(void *)(v34 + v17[13] + 8));
    swift_unknownObjectRelease(v57);
  }

uint64_t sub_1001BE748(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (a1) {
    return sub_1001BE780("SDAirDropNearFieldService: Failed to enforce single band mode");
  }
  else {
    return a3();
  }
}

uint64_t sub_1001BE780(const char *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100183098(&qword_100645EE0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100183098(&qword_10064DA60);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643EB8 != -1) {
    swift_once(&qword_100643EB8, sub_1001B3AC8);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v15 = sub_100186DE4(v14, (uint64_t)qword_100645E00);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, a1, v18, 2u);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  uint64_t KeyPath = swift_getKeyPath(&unk_1004CDC48);
  uint64_t v20 = swift_getKeyPath(&unk_1004CDC70);
  static Published.subscript.getter(v3, KeyPath, v20);
  swift_release(KeyPath);
  swift_release(v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1LL, v4))
  {
    sub_100187100((uint64_t)v10, &qword_100645EE0);
    uint64_t v21 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v13, 1LL, 1LL, v21);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v10, v4);
    uint64_t v22 = sub_100187100((uint64_t)v10, &qword_100645EE0);
    SFAirDrop.NearbySharingInteraction.id.getter(v22);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v23 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v13, 0LL, 1LL, v23);
  }

  sub_1001B455C((uint64_t)v13);
  return sub_100187100((uint64_t)v13, &qword_10064DA60);
}

uint64_t sub_1001BEA20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  uint64_t v6 = type metadata accessor for ContinuousClock(0LL);
  v5[7] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[8] = v7;
  void v5[9] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0LL);
  v5[10] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[11] = v9;
  v5[12] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0LL);
  v5[13] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v5[14] = v11;
  v5[15] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100183098(&qword_100645EE0);
  uint8_t v5[16] = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100183098(&qword_10064DA60);
  v5[17] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v14 = static AirDropActor.shared;
  v5[18] = static AirDropActor.shared;
  return swift_task_switch(sub_1001BEB4C, v14, 0LL);
}

uint64_t sub_1001BEB4C()
{
  uint64_t v1 = *(void *)(v0 + 40) + 16LL;
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  *(void *)(v0 + 152) = Strong;
  if (Strong)
  {
    uint64_t v4 = Strong;
    uint64_t v5 = *(void *)(v0 + 128);
    uint64_t v6 = *(void *)(v0 + 104);
    uint64_t v7 = *(void *)(v0 + 112);
    uint64_t KeyPath = swift_getKeyPath(&unk_1004CDC48);
    uint64_t v9 = swift_getKeyPath(&unk_1004CDC70);
    static Published.subscript.getter(v4, KeyPath, v9);
    swift_release(v9);
    swift_release(KeyPath);
    int v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
    uint64_t v12 = *(void *)(v0 + 128);
    uint64_t v11 = *(void *)(v0 + 136);
    if (v10)
    {
      sub_100187100(*(void *)(v0 + 128), &qword_100645EE0);
      uint64_t v13 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v11, 1LL, 1LL, v13);
    }

    else
    {
      uint64_t v15 = *(void *)(v0 + 112);
      uint64_t v14 = *(void *)(v0 + 120);
      uint64_t v16 = *(void *)(v0 + 104);
      (*(void (**)(uint64_t, void, uint64_t))(v15 + 16))(v14, *(void *)(v0 + 128), v16);
      uint64_t v17 = sub_100187100(v12, &qword_100645EE0);
      SFAirDrop.NearbySharingInteraction.id.getter(v17);
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
      uint64_t v18 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v11, 0LL, 1LL, v18);
    }

    uint64_t v20 = *(void *)(v0 + 88);
    uint64_t v19 = *(void *)(v0 + 96);
    uint64_t v21 = *(void *)(v0 + 80);
    (*(void (**)(uint64_t, void, uint64_t))(v20 + 16))(v19, *(void *)(v0 + 48), v21);
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 88))(v19, v21);
    if ((_DWORD)v22 == enum case for SFAirDrop.NearbySharingInteraction.FailureType.unsupported(_:))
    {
      ContinuousClock.init()(v22);
      uint64_t v31 = (char *)&dword_1006461D8 + dword_1006461D8;
      uint64_t v23 = (void *)swift_task_alloc(unk_1006461DC);
      *(void *)(v0 + 160) = v23;
      *uint64_t v23 = v0;
      v23[1] = sub_1001BEDDC;
      return ((uint64_t (*)(uint64_t, void, void, void, uint64_t))v31)( 5000000000000000000LL,  0LL,  0LL,  0LL,  1LL);
    }

    (*(void (**)(void, void))(*(void *)(v0 + 88) + 8LL))(*(void *)(v0 + 96), *(void *)(v0 + 80));
    uint64_t v25 = *(void **)(v0 + 152);
    uint64_t v26 = *(void *)(v0 + 136);
    sub_1001B455C(v26);

    sub_100187100(v26, &qword_10064DA60);
  }

  uint64_t v27 = *(void *)(v0 + 128);
  uint64_t v28 = *(void *)(v0 + 120);
  uint64_t v29 = *(void *)(v0 + 96);
  uint64_t v30 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 136));
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BEDDC()
{
  uint64_t v2 = *(void **)v1;
  swift_task_dealloc(*(void *)(*(void *)v1 + 160LL));
  uint64_t v3 = v2[18];
  uint64_t v5 = v2[8];
  uint64_t v4 = v2[9];
  uint64_t v6 = v2[7];
  if (v0)
  {
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    uint64_t v7 = sub_1001CEA1C;
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    uint64_t v7 = sub_1001BEE80;
  }

  return swift_task_switch(v7, v3, 0LL);
}

uint64_t sub_1001BEE80()
{
  uint64_t v1 = *(void **)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 136);
  sub_1001B455C(v2);

  sub_100187100(v2, &qword_10064DA60);
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 136));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BEF08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  uint64_t v7 = sub_100183098(&qword_100646230);
  v6[5] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v8 = static AirDropActor.shared;
  v6[6] = static AirDropActor.shared;
  return swift_task_switch(sub_1001BEF9C, v8, 0LL);
}

uint64_t sub_1001BEF9C()
{
  v0[7] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1001BF020;
  return SFAirDropClient.send(_:to:itemPreviewData:requestSource:onlyExchange:transferID:)( v0[5],  &_swiftEmptyArrayStorage,  v0[3],  0LL,  0xF000000000000000LL,  0LL,  0LL,  1LL);
}

uint64_t sub_1001BF020()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 56));
  uint64_t v3 = *(void *)(v2 + 48);
  if (v0)
  {
    swift_errorRelease(v0);
    uint64_t v4 = sub_1001BF0F8;
  }

  else
  {
    uint64_t v4 = sub_1001BF08C;
  }

  return swift_task_switch(v4, v3, 0LL);
}

uint64_t sub_1001BF08C()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = sub_100183098(&qword_100646238);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 0LL, 1LL, v2);
  sub_100187100(v1, &qword_100646230);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BF0F8()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = sub_100183098(&qword_100646238);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
  sub_100187100(v1, &qword_100646230);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BF164(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100183098(&qword_100646560);
  __chkstk_darwin(v3);
  uint64_t v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a2 += 16LL;
  swift_beginAccess(a2, v17, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(a2, v6);
  if (result)
  {
    uint64_t v8 = (void *)result;
    uint64_t v9 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v5, 1LL, 1LL, v9);
    uint64_t v10 = qword_100643F28;
    id v11 = v8;
    if (v10 != -1) {
      swift_once(&qword_100643F28, sub_100205C24);
    }
    uint64_t v12 = static AirDropActor.shared;
    uint64_t v13 = sub_100183F14( (unint64_t *)&qword_100656410,  (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor,  (uint64_t)&protocol conformance descriptor for AirDropActor);
    uint64_t v14 = (void *)swift_allocObject(&unk_1005D3880, 40LL, 7LL);
    v14[2] = v12;
    v14[3] = v13;
    v14[4] = v11;
    swift_retain(v12);
    uint64_t v15 = sub_1001B3978( (uint64_t)v5,  (uint64_t)&unk_100646320,  (uint64_t)v14,  (uint64_t)&unk_1005D37E0,  (uint64_t)&type metadata for () + 8,  (uint64_t)&unk_100649820);

    return swift_release(v15);
  }

  return result;
}

uint64_t sub_1001BF2E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a4;
  uint64_t v5 = sub_100183098(&qword_10064DA60);
  *(void *)(v4 + 24) = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_1001BF36C, static AirDropActor.shared, 0LL);
}

id sub_1001BF36C()
{
  uint64_t v1 = (void *)objc_opt_self(&OBJC_CLASS___SDStatusMonitor);
  id result = [v1 sharedMonitor];
  if (result)
  {
    uint64_t v3 = result;
    unsigned int v4 = [result deviceKeyBagLocked];

    if (v4)
    {
      if (qword_100643EB8 != -1) {
        swift_once(&qword_100643EB8, sub_1001B3AC8);
      }
      uint64_t v5 = type metadata accessor for Logger(0LL);
      uint64_t v6 = sub_100186DE4(v5, (uint64_t)qword_100645E00);
      uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
      os_log_type_t v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "SDAirDropNearFieldService: device locked", v9, 2u);
        swift_slowDealloc(v9, -1LL, -1LL);
      }

      uint64_t v10 = *(void *)(v0 + 24);

      uint64_t v11 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v10, 1LL, 1LL, v11);
      sub_1001B455C(v10);
      sub_100187100(v10, &qword_10064DA60);
      goto LABEL_10;
    }

    id result = [v1 sharedMonitor];
    if (result)
    {
      uint64_t v12 = result;
      [result deviceUIUnlocked];

LABEL_10:
      swift_task_dealloc(*(void *)(v0 + 24));
      return (id)(*(uint64_t (**)(void))(v0 + 8))();
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_1001BF520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a4;
  uint64_t v5 = sub_100183098(&qword_10064DA60);
  *(void *)(v4 + 24) = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_1001BF5AC, static AirDropActor.shared, 0LL);
}

uint64_t sub_1001BF5AC()
{
  if (objc_msgSend( *(id *)(*(void *)(v0 + 16)
                             + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_deviceStatus),
                       "screenOn"))
  {
    if (qword_100643EB8 != -1) {
      swift_once(&qword_100643EB8, sub_1001B3AC8);
    }
    uint64_t v1 = type metadata accessor for Logger(0LL);
    uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_100645E00);
    uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "SDAirDropNearFieldService: switch Screen ON", v5, 2u);
      swift_slowDealloc(v5, -1LL, -1LL);
    }

    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "SDAirDropNearFieldService: start", v9, 2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    uint64_t v10 = *(void *)(v0 + 16);

    sub_1001B6E1C( *(void *)(v10 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_defaultPollingType),  0xD000000000000013LL,  0x8000000100504630LL,  0);
  }

  else
  {
    if (qword_100643EB8 != -1) {
      swift_once(&qword_100643EB8, sub_1001B3AC8);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    uint64_t v12 = sub_100186DE4(v11, (uint64_t)qword_100645E00);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "SDAirDropNearFieldService: switch Screen OFF", v15, 2u);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    uint64_t v16 = *(void *)(v0 + 24);

    uint64_t v17 = type metadata accessor for UUID(0LL);
    uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL);
    v18(v16, 1LL, 1LL, v17);
    sub_1001B455C(v16);
    uint64_t v19 = sub_100187100(v16, &qword_10064DA60);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "SDAirDropNearFieldService: stop", v22, 2u);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    uint64_t v24 = *(void *)(v0 + 16);
    uint64_t v23 = *(void *)(v0 + 24);

    v18(v23, 1LL, 1LL, v17);
    sub_1001B455C(v23);
    sub_100187100(v23, &qword_10064DA60);
    sub_1001B9FE8(1);
    uint64_t v25 = *(void **)(v24 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
    *(void *)(v24 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController) = 0LL;
  }

  swift_task_dealloc(*(void *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BF910(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_100183098(&qword_100646560);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Notification(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v16 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v11, 1LL, 1LL, v16);
  uint64_t v17 = qword_100643F28;
  id v18 = a1;
  if (v17 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v19 = static AirDropActor.shared;
  uint64_t v20 = sub_100183F14( (unint64_t *)&qword_100656410,  (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor,  (uint64_t)&protocol conformance descriptor for AirDropActor);
  os_log_type_t v21 = (void *)swift_allocObject(a4, 40LL, 7LL);
  id v21[2] = v19;
  v21[3] = v20;
  void v21[4] = v18;
  swift_retain(v19);
  uint64_t v22 = sub_1001B3978( (uint64_t)v11,  a5,  (uint64_t)v21,  (uint64_t)&unk_1005D37E0,  (uint64_t)&type metadata for () + 8,  (uint64_t)&unk_100649820);
  swift_release(v22);

  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_1001BFAC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a4;
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_1001BFB2C, static AirDropActor.shared, 0LL);
}

uint64_t sub_1001BFB2C()
{
  if (qword_100643EB8 != -1) {
    swift_once(&qword_100643EB8, sub_1001B3AC8);
  }
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v2, (uint64_t)qword_100645E00);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(char **)(v0 + 16);
  if (v5)
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v7 = 67109120;
    *(_DWORD *)(v0 + 24) = [*(id *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_deviceStatus] isAirDropAllowed];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 28, v7 + 4, v7 + 8);

    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "SDAirDropNearFieldService airdrop allowed changed:%{BOOL}d - restarting",  v7,  8u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
  }

  sub_1001BA348();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001BFC90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a4;
  uint64_t v5 = sub_100183098(&qword_10064DA60);
  *(void *)(v4 + 24) = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_1001BFD1C, static AirDropActor.shared, 0LL);
}

uint64_t sub_1001BFD1C()
{
  if (objc_msgSend( *(id *)(*(void *)(v0 + 16)
                             + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_deviceStatus),
                       "wirelessEnabled"))
  {
    if (qword_100643EB8 != -1) {
      swift_once(&qword_100643EB8, sub_1001B3AC8);
    }
    uint64_t v1 = type metadata accessor for Logger(0LL);
    uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_100645E00);
    uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "SDAirDropNearFieldService wifi enabled, attempting to start",  v5,  2u);
      swift_slowDealloc(v5, -1LL, -1LL);
    }

    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "SDAirDropNearFieldService: start", v9, 2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    uint64_t v10 = *(void *)(v0 + 16);

    sub_1001B6E1C( *(void *)(v10 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_defaultPollingType),  0xD000000000000013LL,  0x8000000100504630LL,  0);
  }

  else
  {
    if (qword_100643EB8 != -1) {
      swift_once(&qword_100643EB8, sub_1001B3AC8);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    uint64_t v12 = sub_100186DE4(v11, (uint64_t)qword_100645E00);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "SDAirDropNearFieldService wifi disabled, stopping", v15, 2u);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "SDAirDropNearFieldService: stop", v19, 2u);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    uint64_t v21 = *(void *)(v0 + 16);
    uint64_t v20 = *(void *)(v0 + 24);

    uint64_t v22 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v20, 1LL, 1LL, v22);
    sub_1001B455C(v20);
    sub_100187100(v20, &qword_10064DA60);
    sub_1001B9FE8(1);
    uint64_t v23 = *(void **)(v21 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
    *(void *)(v21 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController) = 0LL;
  }

  swift_task_dealloc(*(void *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001C003C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a4;
  uint64_t v5 = sub_100183098(&qword_10064DA60);
  *(void *)(v4 + 24) = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_1001C00C8, static AirDropActor.shared, 0LL);
}

uint64_t sub_1001C00C8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  id v2 = [*(id *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_deviceStatus) systemUIFlags];
  uint64_t v3 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController;
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  if ((v2 & 0x80000) != 0)
  {
    if (v4)
    {
      if (qword_100643EB8 != -1) {
        swift_once(&qword_100643EB8, sub_1001B3AC8);
      }
      uint64_t v15 = type metadata accessor for Logger(0LL);
      uint64_t v16 = sub_100186DE4(v15, (uint64_t)qword_100645E00);
      uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v19 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "SDAirDropNearFieldService Buddy visible, stopping",  v19,  2u);
        swift_slowDealloc(v19, -1LL, -1LL);
      }

      uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "SDAirDropNearFieldService: stop", v23, 2u);
        swift_slowDealloc(v23, -1LL, -1LL);
      }

      uint64_t v24 = *(void *)(v0 + 24);

      uint64_t v25 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56LL))(v24, 1LL, 1LL, v25);
      sub_1001B455C(v24);
      sub_100187100(v24, &qword_10064DA60);
      sub_1001B9FE8(1);
      uint64_t v26 = *(void **)(v1 + v3);
      *(void *)(v1 + v3) = 0LL;
    }
  }

  else if (!v4)
  {
    if (qword_100643EB8 != -1) {
      swift_once(&qword_100643EB8, sub_1001B3AC8);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    uint64_t v6 = sub_100186DE4(v5, (uint64_t)qword_100645E00);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "SDAirDropNearFieldService Buddy not visible, attempting to start",  v9,  2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "SDAirDropNearFieldService: start", v13, 2u);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    uint64_t v14 = *(void *)(v0 + 16);

    sub_1001B6E1C( *(void *)(v14 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_defaultPollingType),  0xD000000000000013LL,  0x8000000100504630LL,  0);
  }

  swift_task_dealloc(*(void *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001C0408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a4;
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_1001C0470, static AirDropActor.shared, 0LL);
}

uint64_t sub_1001C0470()
{
  if (qword_100643EB8 != -1) {
    swift_once(&qword_100643EB8, sub_1001B3AC8);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_100645E00);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "SDAirDropNearFieldService Buddy finished, attempting to start",  v5,  2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "SDAirDropNearFieldService: start", v9, 2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  uint64_t v10 = *(void *)(v0 + 16);

  sub_1001B6E1C( *(void *)(v10 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_defaultPollingType),  0xD000000000000013LL,  0x8000000100504630LL,  0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001C05FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a4;
  uint64_t v5 = sub_100183098(&qword_10064DA60);
  *(void *)(v4 + 24) = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_1001C0688, static AirDropActor.shared, 0LL);
}

uint64_t sub_1001C0688()
{
  uint64_t v1 = sub_100183168(0LL, (unint64_t *)&qword_100645140, &OBJC_CLASS___NSUserDefaults_ptr);
  uint64_t v2 = (void *)static NSUserDefaults.airdrop.getter(v1);
  char v3 = SFAirDropUserDefaults.nearFieldSharingEnabled.getter();

  if ((v3 & 1) != 0)
  {
    if (qword_100643EB8 != -1) {
      swift_once(&qword_100643EB8, sub_1001B3AC8);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_100186DE4(v4, (uint64_t)qword_100645E00);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      os_log_type_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "SDAirDropNearFieldService Nearby sharing enabled, attempting to start",  v8,  2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      os_log_type_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "SDAirDropNearFieldService: start", v12, 2u);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    uint64_t v13 = *(void *)(v0 + 16);

    sub_1001B6E1C( *(void *)(v13 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_defaultPollingType),  0xD000000000000013LL,  0x8000000100504630LL,  0);
  }

  else
  {
    if (qword_100643EB8 != -1) {
      swift_once(&qword_100643EB8, sub_1001B3AC8);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    uint64_t v15 = sub_100186DE4(v14, (uint64_t)qword_100645E00);
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      os_log_type_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v18 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "SDAirDropNearFieldService Nearby sharing disabled, stopping",  v18,  2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      os_log_type_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "SDAirDropNearFieldService: stop", v22, 2u);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    uint64_t v24 = *(void *)(v0 + 16);
    uint64_t v23 = *(void *)(v0 + 24);

    uint64_t v25 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56LL))(v23, 1LL, 1LL, v25);
    sub_1001B455C(v23);
    sub_100187100(v23, &qword_10064DA60);
    sub_1001B9FE8(1);
    uint64_t v26 = *(void **)(v24 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
    *(void *)(v24 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController) = 0LL;
  }

  swift_task_dealloc(*(void *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001C09A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a4;
  uint64_t v5 = sub_100183098(&qword_10064DA60);
  *(void *)(v4 + 24) = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_1001C0A34, static AirDropActor.shared, 0LL);
}

uint64_t sub_1001C0A34()
{
  if (qword_100643EB8 != -1) {
    swift_once(&qword_100643EB8, sub_1001B3AC8);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_100645E00);
  char v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "SDAirDropNearFieldService Proximity Apple ID Sign In progress, stopping",  v5,  2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  os_log_type_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "SDAirDropNearFieldService: stop", v9, 2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  uint64_t v11 = *(void *)(v0 + 16);
  uint64_t v10 = *(void *)(v0 + 24);

  uint64_t v12 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v10, 1LL, 1LL, v12);
  sub_1001B455C(v10);
  sub_100187100(v10, &qword_10064DA60);
  sub_1001B9FE8(1);
  uint64_t v13 = *(void **)(v11 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
  *(void *)(v11 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController) = 0LL;

  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001C0BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a4;
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_1001C0C5C, static AirDropActor.shared, 0LL);
}

uint64_t sub_1001C0C5C()
{
  if (qword_100643EB8 != -1) {
    swift_once(&qword_100643EB8, sub_1001B3AC8);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_100645E00);
  char v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "SDAirDropNearFieldService Proximity Apple ID Sign In Finished, starting",  v5,  2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  os_log_type_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "SDAirDropNearFieldService: start", v9, 2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  uint64_t v10 = *(void *)(v0 + 16);

  sub_1001B6E1C( *(void *)(v10 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_defaultPollingType),  0xD000000000000013LL,  0x8000000100504630LL,  0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1001C0DE8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100183098(&qword_100646560);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  uint64_t v11 = qword_100643F28;
  id v12 = a1;
  if (v11 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v13 = static AirDropActor.shared;
  uint64_t v14 = sub_100183F14( (unint64_t *)&qword_100656410,  (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor,  (uint64_t)&protocol conformance descriptor for AirDropActor);
  uint64_t v15 = (void *)swift_allocObject(a3, 40LL, 7LL);
  v15[2] = v13;
  v15[3] = v14;
  void v15[4] = v12;
  swift_retain(v13);
  uint64_t v16 = sub_1001B3978( (uint64_t)v9,  a4,  (uint64_t)v15,  (uint64_t)&unk_1005D37E0,  (uint64_t)&type metadata for () + 8,  (uint64_t)&unk_100649820);
  swift_release(v16);
}

void sub_1001C0F60(uint64_t a1)
{
  v12[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v12[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v12[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t v12[3] = &unk_1004CDB40;
  uint64_t v12[4] = &unk_1004CDB58;
  void v12[5] = &unk_1004CDB70;
  v12[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v12[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v12[8] = &unk_1004CDB88;
  v12[9] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_1001C1100(319LL, &qword_100645EC8, type metadata accessor for SDNearFieldTap);
  if (v3 <= 0x3F)
  {
    v12[10] = *(void *)(v2 - 8) + 64LL;
    sub_1001C1100(319LL, &qword_100645ED0, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
    if (v5 <= 0x3F)
    {
      v12[11] = *(void *)(v4 - 8) + 64LL;
      v12[12] = (char *)&value witness table for Builtin.UnknownObject + 64;
      sub_1001C1160(319LL);
      if (v7 <= 0x3F)
      {
        v12[13] = *(void *)(v6 - 8) + 64LL;
        sub_1001C1100( 319LL,  &qword_100645EE8,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.NearbySharingInteraction);
        if (v9 <= 0x3F)
        {
          v12[14] = *(void *)(v8 - 8) + 64LL;
          v12[15] = (char *)&value witness table for Builtin.BridgeObject + 64;
          v12[16] = (char *)&value witness table for Builtin.NativeObject + 64;
          v12[17] = &unk_1004CDB70;
          v12[18] = &unk_1004CDB70;
          v12[19] = &unk_1004CDB70;
          sub_1001C1100( 319LL,  (unint64_t *)&qword_100645EF0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
          if (v11 <= 0x3F)
          {
            v12[20] = *(void *)(v10 - 8) + 64LL;
            swift_updateClassMetadata2(a1, 256LL, 21LL, v12, a1 + 80);
          }
        }
      }
    }
  }

void sub_1001C1100(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  if (!*a2)
  {
    uint64_t v5 = a3(255LL);
    unint64_t v6 = type metadata accessor for Optional(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

uint64_t type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(uint64_t a1)
{
  return sub_1001A4AD0( a1,  qword_100646050,  (uint64_t)&nominal type descriptor for SDAirDropNearFieldService.LocalExchangePayload);
}

void sub_1001C1160(uint64_t a1)
{
  if (!qword_100645ED8)
  {
    uint64_t v2 = sub_100183124(&qword_100645EE0);
    unint64_t v3 = type metadata accessor for Published(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_100645ED8);
    }
  }

uint64_t sub_1001C11B8(uint64_t a1, uint64_t a2)
{
  *(void *)(*v2 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_delegate + _Block_object_dispose(va, 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease(a1);
}

uint64_t sub_1001C11F4()
{
  return sub_1001BA200(0LL, 1, 0LL, 0LL);
}

void sub_1001C1224()
{
}

void sub_1001C1244(uint64_t a1)
{
}

void sub_1001C1264(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100183098(&qword_100646560);
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100183098(&qword_100645EE0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (os_log_s *)((char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v8);
  id v12 = (char *)&v51 - v11;
  uint64_t v13 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v51 - v19;
  if (IsAppleInternalBuild(v18, v21))
  {
    if (qword_100643EB8 != -1) {
      swift_once(&qword_100643EB8, sub_1001B3AC8);
    }
    uint64_t v56 = v10;
    uint64_t v22 = type metadata accessor for Logger(0LL);
    sub_100186DE4(v22, (uint64_t)qword_100645E00);
    uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16);
    uint64_t v55 = a1;
    uint64_t v24 = v23(v20, a1, v13);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc(12LL, -1LL);
      uint64_t v54 = (void (*)(char *, char *, uint64_t))v23;
      uint64_t v28 = (uint8_t *)v27;
      uint64_t v29 = swift_slowAlloc(32LL, -1LL);
      uint64_t v53 = v6;
      uint64_t v30 = v29;
      uint64_t v58 = v29;
      uint64_t v52 = v2;
      *(_DWORD *)uint64_t v28 = 136315138;
      uint64_t v51 = v28 + 4;
      v54(v17, v20, v13);
      uint64_t v31 = String.init<A>(describing:)(v17, v13);
      unint64_t v33 = v32;
      uint64_t v57 = sub_10018CDB4(v31, v32, &v58);
      uint64_t v2 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v51, v28 + 12);
      swift_bridgeObjectRelease(v33);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v13);
      _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "SDAirDropNearFieldService: updating nearby sharing interaction with simulated state: %s",  v28,  0xCu);
      swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v34 = v30;
      unint64_t v6 = v53;
      swift_slowDealloc(v34, -1LL, -1LL);
      int v35 = v28;
      uint64_t v23 = (uint64_t (*)(char *, uint64_t, uint64_t))v54;
      swift_slowDealloc(v35, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v13);
    }

    v23(v12, v55, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v12, 0LL, 1LL, v13);
    uint64_t KeyPath = swift_getKeyPath(&unk_1004CDC48);
    uint64_t v41 = swift_getKeyPath(&unk_1004CDC70);
    uint64_t v42 = v56;
    sub_1001915A4((uint64_t)v12, (uint64_t)v56, &qword_100645EE0);
    id v43 = v2;
    static Published.subscript.setter(v42, v43, KeyPath, v41);
    sub_100187100((uint64_t)v12, &qword_100645EE0);
    uint64_t v44 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56LL))(v6, 1LL, 1LL, v44);
    uint64_t v45 = qword_100643F28;
    id v46 = v43;
    if (v45 != -1) {
      swift_once(&qword_100643F28, sub_100205C24);
    }
    uint64_t v47 = static AirDropActor.shared;
    uint64_t v48 = sub_100183F14( (unint64_t *)&qword_100656410,  (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor,  (uint64_t)&protocol conformance descriptor for AirDropActor);
    uint64_t v49 = (void *)swift_allocObject(&unk_1005D3808, 40LL, 7LL);
    v49[2] = v47;
    v49[3] = v48;
    v49[4] = v46;
    swift_retain(v47);
    uint64_t v50 = sub_1001B36B8((uint64_t)v6, (uint64_t)&unk_1006462E8, (uint64_t)v49, (uint64_t)&type metadata for () + 8);
    swift_release(v50);
  }

  else
  {
    if (qword_100643EB8 != -1) {
      swift_once(&qword_100643EB8, sub_1001B3AC8);
    }
    uint64_t v36 = type metadata accessor for Logger(0LL);
    uint64_t v37 = sub_100186DE4(v36, (uint64_t)qword_100645E00);
    uint64_t v56 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v38))
    {
      os_log_type_t v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v39 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v56,  v38,  "Ignoring simulated nearby sharing interaction since we are not on an internal build",  v39,  2u);
      swift_slowDealloc(v39, -1LL, -1LL);
    }
  }

uint64_t sub_1001C1750(uint64_t a1)
{
  unint64_t v3 = (void *)swift_task_alloc(dword_1006462D4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = sub_1001943E8;
  return sub_1001C17A4(a1);
}

uint64_t sub_1001C17A4(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[11] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint8_t v2[12] = v4;
  v2[13] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100183098(&qword_1006460B8);
  v2[14] = v5;
  v2[15] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0LL);
  v2[16] = v6;
  v2[17] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_1001C1880, static AirDropActor.shared, 0LL);
}

uint64_t sub_1001C1880(uint64_t a1, uint64_t a2)
{
  if (IsAppleInternalBuild(a1, a2))
  {
    if (qword_100643EB8 != -1) {
      swift_once(&qword_100643EB8, sub_1001B3AC8);
    }
    uint64_t v3 = type metadata accessor for Logger(0LL);
    uint64_t v4 = sub_100186DE4(v3, (uint64_t)qword_100645E00);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "SDAirDropNearFieldService.at-a-distance: BEGIN", v7, 2u);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    uint64_t v9 = v2[14];
    uint64_t v8 = v2[15];
    uint64_t v10 = v2[10];

    uint64_t v11 = v10 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_localExchangePayload;
    swift_beginAccess( v10 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_localExchangePayload,  v2 + 2,  0LL,  0LL);
    sub_1001915A4(v11, v8, &qword_1006460B8);
    Optional.tryUnwrap(_:file:line:)( 0xD00000000000001CLL,  0x8000000100504800LL,  0xD000000000000060LL,  0x8000000100504710LL,  990LL,  v9);
    uint64_t v21 = v2[10];
    sub_100187100(v2[15], &qword_1006460B8);
    uint64_t v22 = *(void **)(v21 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
    if (v22 && (id v23 = [v22 currentApplicationLabel]) != 0)
    {
      uint64_t v24 = v23;
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      uint64_t v27 = v26;
    }

    else
    {
      uint64_t v25 = 0LL;
      uint64_t v27 = 0LL;
    }

    v2[7] = v25;
    v2[8] = v27;
    uint64_t v28 = sub_100183098(&qword_1006462D8);
    Optional.tryUnwrap(_:file:line:)( 0xD000000000000019LL,  0x8000000100504820LL,  0xD000000000000060LL,  0x8000000100504710LL,  991LL,  v28);
    uint64_t v29 = v2[17];
    uint64_t v34 = v2[16];
    uint64_t v43 = v2[15];
    uint64_t v35 = v2[12];
    uint64_t v36 = v2[13];
    uint64_t v37 = v2[11];
    swift_bridgeObjectRelease(v27);
    uint64_t v38 = v2[5];
    uint64_t v39 = v2[6];
    uint64_t v40 = (uint64_t *)(v29 + *(int *)(v34 + 24));
    uint64_t v41 = *v40;
    unint64_t v42 = v40[1];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v36, v29, v37);
    sub_10019BA8C(v41, v42);
    SFAirDropClient.BoopAtADistance.ServerInfo.init(applicationLabel:publicKeyData:bonjourUUID:)( v38,  v39,  v41,  v42,  v36);
    sub_1001A4BC8(v29, type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload);
    swift_task_dealloc(v29);
    swift_task_dealloc(v43);
    swift_task_dealloc(v36);
    unint64_t v32 = (uint64_t (*)(void))v2[1];
  }

  else
  {
    if (qword_100643EB8 != -1) {
      swift_once(&qword_100643EB8, sub_1001B3AC8);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    uint64_t v13 = sub_100186DE4(v12, (uint64_t)qword_100645E00);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "SDAirDropNearFieldService.at-a-distance: begin FAILED -- Not internal build",  v16,  2u);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    uint64_t v17 = type metadata accessor for SFError(0LL);
    uint64_t v18 = sub_100183F14( &qword_1006461A8,  (uint64_t (*)(uint64_t))&type metadata accessor for SFError,  (uint64_t)&protocol conformance descriptor for SFError);
    swift_allocError(v17, v18, 0LL, 0LL);
    *uint64_t v19 = 0xD000000000000037LL;
    v19[1] = 0x80000001005046D0LL;
    v19[2] = 0xD000000000000060LL;
    v19[3] = 0x8000000100504710LL;
    void v19[4] = 986LL;
    uint64_t v20 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v17 - 8) + 104LL))( v19,  enum case for SFError.notAvailable(_:),  v17);
    swift_willThrow(v20);
    uint64_t v30 = v2[15];
    uint64_t v31 = v2[13];
    swift_task_dealloc(v2[17]);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    unint64_t v32 = (uint64_t (*)(void))v2[1];
  }

  return v32();
}

uint64_t sub_1001C1CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_1006461B4);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100195708;
  return sub_1001C1D54(a1, a2);
}

uint64_t sub_1001C1D54(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  void v3[9] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[10] = v5;
  v3[11] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for SFAirDropClient.BoopAtADistance.TapEvent(0LL);
  v3[12] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[13] = v7;
  v3[14] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for SDNearFieldTap(0LL);
  v3[15] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for ContinuousClock(0LL);
  uint8_t v3[16] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[17] = v10;
  v3[18] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction(0LL, v11);
  v3[19] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v3[20] = v13;
  v3[21] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100183098(&qword_100646560);
  v3[22] = swift_task_alloc((*(void *)(*(void *)(v14 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v15 = static AirDropActor.shared;
  v3[23] = static AirDropActor.shared;
  return swift_task_switch(sub_1001C1EA8, v15, 0LL);
}

uint64_t sub_1001C1EA8(uint64_t a1, uint64_t a2)
{
  if (IsAppleInternalBuild(a1, a2))
  {
    if (qword_100643EB8 != -1) {
      swift_once(&qword_100643EB8, sub_1001B3AC8);
    }
    uint64_t v3 = type metadata accessor for Logger(0LL);
    uint64_t v4 = sub_100186DE4(v3, (uint64_t)qword_100645E00);
    *(void *)(v2 + 192) = v4;
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "SDAirDropNearFieldService.at-a-distance: UPDATE", v7, 2u);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    uint64_t v8 = *(void *)(v2 + 64);

    uint64_t v9 = *(void **)(v8 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
    *(void *)(v2 + 40) = v9;
    id v10 = v9;
    uint64_t v11 = sub_100183098(&qword_1006461B8);
    Optional.tryUnwrap(_:file:line:)( 0xD000000000000013LL,  0x8000000100504780LL,  0xD000000000000060LL,  0x8000000100504710LL,  1003LL,  v11);

    *(void *)(v2 + 200) = *(void *)(v2 + 32);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "SDAirDropNearFieldService.at-a-distance: didDetectDeviceNearbyWithInitiatorRole",  v15,  2u);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    uint64_t v16 = *(void *)(v2 + 168);
    uint64_t v17 = *(void *)(v2 + 176);
    uint64_t v18 = *(void *)(v2 + 152);
    uint64_t v49 = *(void *)(v2 + 160);
    uint64_t v19 = *(void **)(v2 + 64);
    uint64_t v20 = *(void *)(v2 + 48);

    char v21 = SFAirDropClient.BoopAtADistance.Transaction.isInitiator.getter();
    uint64_t v22 = type metadata accessor for TaskPriority(0LL);
    *(void *)(v2 + 20_Block_object_dispose(va, 8) = v22;
    id v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL);
    *(void *)(v2 + 2swift_weakDestroy(v0 + 16) = v23;
    v23(v17, 1LL, 1LL, v22);
    uint64_t v24 = static AirDropActor.shared;
    uint64_t v25 = sub_100183F14( (unint64_t *)&qword_100656410,  (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor,  (uint64_t)&protocol conformance descriptor for AirDropActor);
    *(void *)(v2 + 224) = v25;
    uint64_t v26 = swift_allocObject(&unk_1005D3588, 48LL, 7LL);
    *(void *)(v26 + swift_weakDestroy(v0 + 16) = v24;
    *(void *)(v26 + 24) = v25;
    *(_BYTE *)(v26 + 32) = v21 & 1;
    *(void *)(v26 + 40) = v19;
    id v27 = v19;
    swift_retain(v24);
    uint64_t v28 = sub_1001B3978( v17,  (uint64_t)&unk_1006461D0,  v26,  (uint64_t)&unk_1005D37E0,  (uint64_t)&type metadata for () + 8,  (uint64_t)&unk_100649820);
    swift_release(v28);
    uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16);
    *(void *)(v2 + 232) = v29;
    v29(v16, v20, v18);
    uint64_t v30 = (objc_class *)type metadata accessor for SDBoopAtADistanceTransaction(0LL);
    uint64_t v31 = (char *)objc_allocWithZone(v30);
    v29((uint64_t)&v31[OBJC_IVAR____TtC16DaemoniOSLibrary28SDBoopAtADistanceTransaction_inner], v16, v18);
    *(void *)(v2 + swift_weakDestroy(v0 + 16) = v31;
    *(void *)(v2 + 24) = v30;
    *(void *)(v2 + 240) = objc_msgSendSuper2((objc_super *)(v2 + 16), "init");
    uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 8))(v16, v18);
    ContinuousClock.init()(v32);
    uint64_t v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1006461D8 + dword_1006461D8);
    unint64_t v33 = (void *)swift_task_alloc(unk_1006461DC);
    *(void *)(v2 + 24_Block_object_dispose(va, 8) = v33;
    *unint64_t v33 = v2;
    v33[1] = sub_1001C23FC;
    return v50(1000000000000000000LL, 0LL, 0LL, 0LL, 1);
  }

  else
  {
    if (qword_100643EB8 != -1) {
      swift_once(&qword_100643EB8, sub_1001B3AC8);
    }
    uint64_t v35 = type metadata accessor for Logger(0LL);
    uint64_t v36 = sub_100186DE4(v35, (uint64_t)qword_100645E00);
    uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "SDAirDropNearFieldService.at-a-distance: FAILED -- Not internal build",  v39,  2u);
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    uint64_t v40 = type metadata accessor for SFError(0LL);
    uint64_t v41 = sub_100183F14( &qword_1006461A8,  (uint64_t (*)(uint64_t))&type metadata accessor for SFError,  (uint64_t)&protocol conformance descriptor for SFError);
    swift_allocError(v40, v41, 0LL, 0LL);
    *unint64_t v42 = 0xD000000000000037LL;
    v42[1] = 0x80000001005046D0LL;
    v42[2] = 0xD000000000000060LL;
    uint64_t v42[3] = 0x8000000100504710LL;
    v42[4] = 999LL;
    uint64_t v43 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v40 - 8) + 104LL))( v42,  enum case for SFError.notAvailable(_:),  v40);
    swift_willThrow(v43);
    uint64_t v44 = *(void *)(v2 + 168);
    uint64_t v45 = *(void *)(v2 + 144);
    uint64_t v47 = *(void *)(v2 + 112);
    uint64_t v46 = *(void *)(v2 + 120);
    uint64_t v48 = *(void *)(v2 + 88);
    swift_task_dealloc(*(void *)(v2 + 176));
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    return (*(uint64_t (**)(void))(v2 + 8))();
  }

uint64_t sub_1001C23FC()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 248LL);
  *(void *)(*(void *)v1 + 256LL) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = v2[23];
  (*(void (**)(void, void))(v2[17] + 8LL))(v2[18], v2[16]);
  if (v0) {
    uint64_t v5 = sub_1001C266C;
  }
  else {
    uint64_t v5 = sub_1001C247C;
  }
  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_1001C247C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  v3,  "SDAirDropNearFieldService.at-a-distance: nearFieldController.didBegin",  v4,  2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  uint64_t v5 = (void *)v1[30];
  uint64_t v7 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v1[27];
  uint64_t v6 = v1[28];
  uint64_t v8 = v1[26];
  uint64_t v9 = v1[22];
  uint64_t v10 = v1[14];
  id v27 = (void (*)(uint64_t, uint64_t, uint64_t))v1[29];
  uint64_t v28 = v1[15];
  uint64_t v24 = v1[13];
  uint64_t v25 = v1[19];
  uint64_t v26 = v1[12];
  uint64_t v11 = (void *)v1[8];
  uint64_t v22 = v1[21];
  uint64_t v23 = v1[7];
  uint64_t v12 = v1[6];

  v7(v9, 1LL, 1LL, v8);
  uint64_t v13 = static AirDropActor.shared;
  os_log_type_t v14 = (void *)swift_allocObject(&unk_1005D35B0, 48LL, 7LL);
  v14[2] = v13;
  v14[3] = v6;
  v14[4] = v5;
  v14[5] = v11;
  id v15 = v5;
  id v16 = v11;
  id v17 = v15;
  swift_retain(v13);
  uint64_t v18 = sub_1001B36B8(v9, (uint64_t)&unk_1006461E8, (uint64_t)v14, (uint64_t)&type metadata for () + 8);
  swift_release(v18);

  v27(v22, v12, v25);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v10, v23, v26);
  uint64_t v19 = sub_10033E598(v22, v10, v28);
  SFAirDropClient.BoopAtADistance.Transaction.identifier.getter(v19);
  uint64_t v20 = (void *)swift_task_alloc(dword_1006461F4);
  v1[33] = v20;
  void *v20 = v1;
  v20[1] = sub_1001C26F4;
  return sub_1001BC498(v1[15], v1[11]);
}

uint64_t sub_1001C266C()
{
  uint64_t v1 = *(void **)(v0 + 200);

  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 176));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001C26F4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 184LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 80LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 88LL);
  uint64_t v4 = *(void *)(*(void *)v0 + 72LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 264LL));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch(sub_1001C276C, v1, 0LL);
}

uint64_t sub_1001C276C()
{
  uint64_t v1 = *(void **)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v6 = *(void *)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v7 = *(void *)(v0 + 88);

  sub_1001A4BC8(v5, type metadata accessor for SDNearFieldTap);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1001C2810()
{
}

void sub_1001C2830()
{
  uint64_t v2 = v0;
  uint64_t v3 = sub_100183098(&qword_10064DA60);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (IsAppleInternalBuild(v4, v7))
  {
    uint64_t v8 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController;
    uint64_t v9 = *(void *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController);
    if (v9)
    {
      id v55 = [*(id *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController) currentPreferredPollingType];
      uint64_t v10 = *(void **)(v0 + v8);
      if (v10)
      {
        id v11 = [v10 currentApplicationLabel];
        if (v11)
        {
          uint64_t v12 = v11;
          uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
          uint64_t v14 = v13;

LABEL_13:
          if (qword_100643EB8 != -1) {
            swift_once(&qword_100643EB8, sub_1001B3AC8);
          }
          uint64_t v24 = type metadata accessor for Logger(0LL);
          uint64_t v25 = sub_100186DE4(v24, (uint64_t)qword_100645E00);
          uint64_t v26 = swift_bridgeObjectRetain_n(v14, 2LL);
          uint64_t v56 = v25;
          id v27 = (os_log_s *)Logger.logObject.getter(v26);
          os_log_type_t v28 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v27, v28))
          {
            uint64_t v51 = v8;
            uint64_t v52 = v6;
            uint64_t v53 = v1;
            uint64_t v50 = v9;
            uint64_t v29 = swift_slowAlloc(22LL, -1LL);
            uint64_t v49 = swift_slowAlloc(64LL, -1LL);
            uint64_t v59 = v49;
            *(_DWORD *)uint64_t v29 = 136315394;
            uint64_t v57 = (uint64_t)v55;
            LOBYTE(v5_Block_object_dispose(va, 8) = v9 == 0;
            uint64_t v30 = sub_100183098(&qword_1006461A0);
            uint64_t v31 = String.init<A>(describing:)(&v57, v30);
            unint64_t v33 = v32;
            uint64_t v57 = sub_10018CDB4(v31, v32, &v59);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v29 + 4, v29 + 12);
            swift_bridgeObjectRelease(v33);
            *(_WORD *)(v29 + 12) = 2080;
            uint64_t v34 = v54;
            unint64_t v35 = v14;
            if (!v14)
            {
              uint64_t v34 = 0xD000000000000015LL;
              uint64_t v57 = 0LL;
              unint64_t v58 = 0xE000000000000000LL;
              _StringGuts.grow(_:)(17LL);
              swift_bridgeObjectRelease(v58);
              unint64_t v35 = 0x80000001005046B0LL;
            }

            swift_bridgeObjectRetain(v14);
            uint64_t v57 = sub_10018CDB4(v34, v35, &v59);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v29 + 14, v29 + 22);
            swift_bridgeObjectRelease_n(v14, 2LL);
            swift_bridgeObjectRelease(v35);
            _os_log_impl( (void *)&_mh_execute_header,  v27,  v28,  "SDAirDropNearFieldService.at-a-distance: Restaring Field Service polling {lastPollingType: %s, lastApplicationLabel: %s}",  (uint8_t *)v29,  0x16u);
            uint64_t v36 = v49;
            swift_arrayDestroy(v49, 2LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v36, -1LL, -1LL);
            swift_slowDealloc(v29, -1LL, -1LL);

            uint64_t v6 = v52;
            uint64_t v9 = v50;
            uint64_t v8 = v51;
          }

          else
          {

            uint64_t v37 = swift_bridgeObjectRelease_n(v14, 2LL);
          }

          os_log_type_t v38 = (os_log_s *)Logger.logObject.getter(v37);
          os_log_type_t v39 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v38, v39))
          {
            uint64_t v40 = v9;
            uint64_t v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v41 = 0;
            _os_log_impl((void *)&_mh_execute_header, v38, v39, "SDAirDropNearFieldService: stop", v41, 2u);
            unint64_t v42 = v41;
            uint64_t v9 = v40;
            swift_slowDealloc(v42, -1LL, -1LL);
          }

          uint64_t v43 = type metadata accessor for UUID(0LL);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56LL))(v6, 1LL, 1LL, v43);
          sub_1001B455C((uint64_t)v6);
          sub_100187100((uint64_t)v6, &qword_10064DA60);
          sub_1001B9FE8(1);
          uint64_t v44 = *(void **)(v2 + v8);
          *(void *)(v2 + v_Block_object_dispose(va, 8) = 0LL;

          sub_1001BA200((uint64_t)v55, v9 == 0, v54, v14);
          uint64_t v45 = swift_bridgeObjectRelease(v14);
          uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
          os_log_type_t v47 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v46, v47))
          {
            uint64_t v48 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)uint64_t v48 = 0;
            _os_log_impl((void *)&_mh_execute_header, v46, v47, "SDAirDropNearFieldService.at-a-distance: END", v48, 2u);
            swift_slowDealloc(v48, -1LL, -1LL);
          }

          return;
        }
      }
    }

    else
    {
      id v55 = 0LL;
    }

    uint64_t v54 = 0LL;
    uint64_t v14 = 0LL;
    goto LABEL_13;
  }

  if (qword_100643EB8 != -1) {
    swift_once(&qword_100643EB8, sub_1001B3AC8);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = sub_100186DE4(v15, (uint64_t)qword_100645E00);
  id v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "SDAirDropNearFieldService.at-a-distance: FAILED -- Not internal build",  v19,  2u);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  uint64_t v20 = type metadata accessor for SFError(0LL);
  uint64_t v21 = sub_100183F14( &qword_1006461A8,  (uint64_t (*)(uint64_t))&type metadata accessor for SFError,  (uint64_t)&protocol conformance descriptor for SFError);
  swift_allocError(v20, v21, 0LL, 0LL);
  *uint64_t v22 = 0xD000000000000037LL;
  v22[1] = 0x80000001005046D0LL;
  _OWORD v22[2] = 0xD000000000000060LL;
  v22[3] = 0x8000000100504710LL;
  v22[4] = 1022LL;
  uint64_t v23 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v20 - 8) + 104LL))( v22,  enum case for SFError.notAvailable(_:),  v20);
  swift_willThrow(v23);
}

void sub_1001C2DFC(uint64_t a1)
{
}

uint64_t sub_1001C2E1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v19 = a1;
  uint64_t v2 = sub_100183098(&qword_100646158);
  __chkstk_darwin(v2);
  uint64_t v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = sub_100183098(&qword_100646160);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = sub_100183098(&qword_100646168);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  swift_beginAccess( *v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService__nearbySharingInteraction,  v20,  33LL,  0LL);
  uint64_t v13 = sub_100183098(&qword_100646170);
  Published.projectedValue.getter(v13);
  swift_endAccess(v20);
  uint64_t v14 = sub_100183098(&qword_100646178);
  uint64_t v15 = sub_1001CD538( &qword_100646180,  &qword_100646160,  (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  Publisher.map<A>(_:)(sub_1001C6B20, 0LL, v5, v14, v15);
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v16 = sub_1001CD538( &qword_100646188,  &qword_100646168,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  Publisher<>.values.getter(v9, v16);
  uint64_t v17 = sub_1001CD538( &qword_100646190,  &qword_100646158,  (uint64_t)&protocol conformance descriptor for AsyncPublisher<A>);
  SFNoThrowAsyncSequence.init<A>(_:)(v4, v14, v2, v17);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1001C3028(uint64_t a1, uint64_t a2)
{
  return sub_1001C304C(a1, a2) & 1;
}

uint64_t sub_1001C304C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100183168(0LL, (unint64_t *)&qword_100645140, &OBJC_CLASS___NSUserDefaults_ptr);
  uint64_t v7 = (void *)static NSUserDefaults.airdrop.getter(v6);
  char v8 = SFAirDropUserDefaults.boopToActionEnabled.getter();

  if ((v8 & 1) != 0
    && (uint64_t v9 = v3 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_processingTap,
        swift_beginAccess( v3 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_processingTap,  v16,  0LL,  0LL),  uint64_t v10 = type metadata accessor for SDNearFieldTap(0LL),  !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))(v9, 1LL, v10))
    && (uint64_t v13 = (void *)(v9 + *(int *)(v10 + 24)), (v14 = v13[1]) != 0))
  {
    if (*v13 == a1 && v14 == a2) {
      char v11 = 1;
    }
    else {
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(*v13, v14, a1, a2, 0LL);
    }
  }

  else
  {
    char v11 = 0;
  }

  return v11 & 1;
}

uint64_t sub_1001C3148(uint64_t a1)
{
  return sub_1001C316C(a1) & 1;
}

uint64_t sub_1001C316C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100183098((uint64_t *)&unk_1006460C0);
  __chkstk_darwin(v4);
  uint64_t v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v7 = type metadata accessor for SDNearFieldTap(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v11 = sub_100183168(0LL, (unint64_t *)&qword_100645140, &OBJC_CLASS___NSUserDefaults_ptr);
  uint64_t v12 = (void *)static NSUserDefaults.airdrop.getter(v11);
  char v13 = SFAirDropUserDefaults.boopToActionEnabled.getter();

  if ((v13 & 1) != 0)
  {
    uint64_t v14 = v2 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_processingTap;
    swift_beginAccess(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_processingTap, v18, 0LL, 0LL);
    sub_1001915A4(v14, (uint64_t)v6, (uint64_t *)&unk_1006460C0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) != 1)
    {
      sub_1001A4B40((uint64_t)v6, (uint64_t)v10, type metadata accessor for SDNearFieldTap);
      char v15 = sub_10033E804(a1);
      sub_1001A4BC8((uint64_t)v10, type metadata accessor for SDNearFieldTap);
      return v15 & 1;
    }

    sub_100187100((uint64_t)v6, (uint64_t *)&unk_1006460C0);
  }

  char v15 = 0;
  return v15 & 1;
}

uint64_t sub_1001C32F0(uint64_t a1, uint64_t a2)
{
  return sub_1001B661C(a1, a2);
}

uint64_t sub_1001C3310(uint64_t a1)
{
  return sub_1001B7884(a1);
}

void sub_1001C3330(uint64_t a1, unint64_t a2)
{
}

uint64_t sub_1001C3350@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1001C3370(a1, a2, a3);
}

uint64_t sub_1001C3370@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v228 = a2;
  uint64_t v248 = a1;
  uint64_t v245 = a3;
  uint64_t v227 = type metadata accessor for SFClientIdentity(0LL);
  uint64_t v231 = *(void *)(v227 - 8);
  __chkstk_darwin(v227);
  uint64_t v226 = (char *)&v217 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for SFAirDrop.NearbySharingAssertionRequest(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v246 = v4;
  uint64_t v247 = v5;
  uint64_t v6 = __chkstk_darwin(v4);
  v244 = (void (*)(char *, uint64_t))((char *)&v217 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = __chkstk_darwin(v6);
  v233 = (char *)&v217 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  id v230 = (char *)&v217 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  v224 = (char *)&v217 - v13;
  __chkstk_darwin(v12);
  v222 = (char *)&v217 - v14;
  uint64_t v15 = sub_100183098((uint64_t *)&unk_1006460A0);
  __chkstk_darwin(v15);
  v221 = (char *)&v217 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v237 = (void *)type metadata accessor for SFAirDrop.NearbySharingAssertion(0LL);
  uint64_t v241 = *(v237 - 1);
  uint64_t v17 = __chkstk_darwin(v237);
  uint64_t v229 = (char *)&v217 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v225 = (char *)&v217 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v235 = (char *)&v217 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  v236 = (char *)&v217 - v24;
  __chkstk_darwin(v23);
  v223 = (char *)&v217 - v25;
  uint64_t v26 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  unint64_t v242 = (unint64_t)&v217 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = sub_100183098(&qword_100645EE0);
  uint64_t v30 = __chkstk_darwin(v29);
  v239 = (uint64_t *)((char *)&v217 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v30);
  unint64_t v33 = (char *)&v217 - v32;
  uint64_t v34 = sub_100183098(&qword_10064DA60);
  __chkstk_darwin(v34);
  uint64_t v36 = (char *)&v217 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = type metadata accessor for UUID(0LL);
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v41 = (char *)&v217 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = __chkstk_darwin(v39);
  v243 = (char *)&v217 - v43;
  __chkstk_darwin(v42);
  uint64_t v45 = (char *)&v217 - v44;
  uint64_t KeyPath = swift_getKeyPath(&unk_1004CDC48);
  uint64_t v47 = swift_getKeyPath(&unk_1004CDC70);
  static Published.subscript.getter(v249, KeyPath, v47);
  swift_release(KeyPath);
  swift_release(v47);
  v238 = *(os_log_s **)(v27 + 48);
  int v48 = ((uint64_t (*)(char *, uint64_t, uint64_t))v238)(v33, 1LL, v26);
  uint64_t v240 = v26;
  uint64_t v234 = v27;
  if (!v48)
  {
    os_log_t v219 = v41;
    v220 = v45;
    unint64_t v51 = v242;
    (*(void (**)(unint64_t, char *, uint64_t))(v27 + 16))(v242, v33, v26);
    uint64_t v52 = sub_100187100((uint64_t)v33, &qword_100645EE0);
    SFAirDrop.NearbySharingInteraction.id.getter(v52);
    (*(void (**)(unint64_t, uint64_t))(v27 + 8))(v51, v26);
    uint64_t v49 = *(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56);
    v49(v36, 0LL, 1LL, v37);
    uint64_t v50 = v37;
    uint64_t v76 = (uint64_t)v220;
    uint64_t v77 = (*(uint64_t (**)(char *, char *, uint64_t))(v38 + 32))(v220, v36, v37);
    uint64_t v78 = v243;
    uint64_t v55 = v248;
    SFAirDrop.NearbySharingAssertionRequest.nearbySharingInteractionID.getter(v77);
    char v79 = static UUID.== infix(_:_:)(v76, v78);
    uint64_t v80 = *(void (**)(char *, uint64_t))(v38 + 8);
    v80(v78, v37);
    uint64_t v54 = v246;
    if ((v79 & 1) == 0)
    {
      v80((char *)v76, v50);
      uint64_t v53 = v247;
      goto LABEL_5;
    }

    id v81 = &v249[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_assertionsByNearbySharingInteractionID];
    swift_beginAccess( &v249[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_assertionsByNearbySharingInteractionID],  &v250,  32LL,  0LL);
    v239 = (uint64_t *)v81;
    uint64_t v240 = v50;
    uint64_t v82 = *(void *)v81;
    uint64_t v83 = *(void *)(*(void *)v81 + 16LL);
    v244 = v80;
    v232 = (void (*)(uint64_t, void, uint64_t, uint64_t))v49;
    if (v83)
    {
      unint64_t v84 = sub_1003AD618(v76);
      uint64_t v85 = v237;
      uint64_t v86 = v231;
      if ((v87 & 1) != 0)
      {
        unint64_t v88 = *(void *)(*(void *)(v82 + 56) + 8 * v84);
        swift_endAccess(&v250);
        uint64_t v89 = *(void *)(v88 + 16);
        uint64_t v218 = v38;
        if (v89)
        {
          unint64_t v90 = v88 + ((*(unsigned __int8 *)(v241 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v241 + 80));
          uint64_t v91 = *(void *)(v241 + 72);
          os_log_type_t v92 = *(uint64_t (**)(char *, unint64_t, void *))(v241 + 16);
          swift_bridgeObjectRetain_n(v88, 3LL);
          uint64_t v93 = v236;
          while (1)
          {
            uint64_t v94 = v92(v93, v90, v85);
            uint64_t v95 = SFAirDrop.NearbySharingAssertion.explanation.getter(v94);
            unint64_t v97 = v96;
            uint64_t v99 = ((uint64_t (*)(void))SFAirDrop.NearbySharingAssertionRequest.explanation.getter)();
            uint64_t v100 = v98;
            if (v95 == v99 && v97 == v98)
            {
              unint64_t v105 = v88;
              swift_bridgeObjectRelease(v88);
              swift_bridgeObjectRelease(v97);
              goto LABEL_46;
            }

            char v101 = _stringCompareWithSmolCheck(_:_:expecting:)(v95, v97, v99, v98, 0LL);
            swift_bridgeObjectRelease(v97);
            swift_bridgeObjectRelease(v100);
            if ((v101 & 1) != 0) {
              break;
            }
            uint64_t v93 = v236;
            uint64_t v85 = v237;
            (*(void (**)(char *, void *))(v241 + 8))(v236, v237);
            v90 += v91;
            if (!--v89)
            {
              swift_bridgeObjectRelease(v88);
              uint64_t v102 = 1LL;
              uint64_t v103 = v232;
              uint64_t v54 = v246;
              uint64_t v104 = v247;
              unint64_t v105 = v88;
              uint64_t v50 = v240;
              uint64_t v106 = v241;
              uint64_t v80 = v244;
              goto LABEL_43;
            }
          }

          unint64_t v105 = v88;
          unint64_t v97 = v88;
LABEL_46:
          uint64_t v103 = v232;
          uint64_t v54 = v246;
          swift_bridgeObjectRelease(v97);
          uint64_t v106 = v241;
          uint64_t v186 = v221;
          uint64_t v85 = v237;
          (*(void (**)(char *, char *, void *))(v241 + 32))(v221, v236, v237);
          uint64_t v102 = 0LL;
          uint64_t v50 = v240;
          uint64_t v104 = v247;
          uint64_t v80 = v244;
        }

        else
        {
          swift_bridgeObjectRetain_n(v88, 2LL);
          uint64_t v102 = 1LL;
          uint64_t v103 = v232;
          unint64_t v105 = v88;
          uint64_t v106 = v241;
          uint64_t v104 = v247;
LABEL_43:
          uint64_t v186 = v221;
        }

        (*(void (**)(char *, uint64_t, uint64_t, void *))(v106 + 56))(v186, v102, 1LL, v85);
        swift_bridgeObjectRelease(v105);
        int v187 = (*(uint64_t (**)(char *, uint64_t, void *))(v106 + 48))(v186, 1LL, v85);
        uint64_t v188 = (uint64_t)v186;
        unint64_t v189 = v224;
        if (v187 != 1)
        {
          unint64_t v242 = v105;
          (*(void (**)(char *, uint64_t, void *))(v106 + 32))(v223, v188, v85);
          if (qword_100643EB8 != -1) {
            swift_once(&qword_100643EB8, sub_1001B3AC8);
          }
          uint64_t v190 = type metadata accessor for Logger(0LL);
          sub_100186DE4(v190, (uint64_t)qword_100645E00);
          v191 = *(void (**)(char *, uint64_t, uint64_t))(v104 + 16);
          v191(v222, v55, v54);
          uint64_t v192 = ((uint64_t (*)(char *, uint64_t, uint64_t))v191)(v189, v55, v54);
          v193 = (os_log_s *)Logger.logObject.getter(v192);
          os_log_type_t v194 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v193, v194))
          {
            uint64_t v195 = swift_slowAlloc(22LL, -1LL);
            int v196 = (char *)swift_slowAlloc(64LL, -1LL);
            v249 = v196;
            v250 = v196;
            *(_DWORD *)uint64_t v195 = 136315394;
            uint64_t v197 = v243;
            uint64_t v198 = v222;
            SFAirDrop.NearbySharingAssertionRequest.nearbySharingInteractionID.getter(v196);
            uint64_t v199 = sub_100183F14( (unint64_t *)&qword_1006460B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            uint64_t v200 = dispatch thunk of CustomStringConvertible.description.getter(v50, v199);
            unint64_t v202 = v201;
            v244(v197, v50);
            uint64_t v251 = sub_10018CDB4(v200, v202, (uint64_t *)&v250);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v195 + 4, v195 + 12);
            unint64_t v203 = v202;
            uint64_t v85 = v237;
            swift_bridgeObjectRelease(v203);
            v204 = *(uint64_t (**)(char *, uint64_t))(v247 + 8);
            uint64_t v205 = v204(v198, v54);
            *(_WORD *)(v195 + 12) = 2080;
            v206 = v224;
            uint64_t v207 = SFAirDrop.NearbySharingAssertionRequest.explanation.getter(v205);
            unint64_t v209 = v208;
            uint64_t v251 = sub_10018CDB4(v207, v208, (uint64_t *)&v250);
            uint64_t v50 = v240;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v195 + 14, v195 + 22);
            swift_bridgeObjectRelease(v209);
            v204(v206, v54);
            uint64_t v210 = v220;
            _os_log_impl( (void *)&_mh_execute_header,  v193,  v194,  "SDAirDropNearFieldService: Existing matching assertion for nearby sharing interaction:%s explanation:%s",  (uint8_t *)v195,  0x16u);
            uint64_t v211 = v249;
            swift_arrayDestroy(v249, 2LL, (char *)&type metadata for Any + 8);
            uint64_t v103 = v232;
            swift_slowDealloc(v211, -1LL, -1LL);
            uint64_t v212 = v195;
            uint64_t v80 = v244;
            swift_slowDealloc(v212, -1LL, -1LL);

            uint64_t v214 = v245;
          }

          else
          {
            v215 = *(void (**)(char *, uint64_t))(v104 + 8);
            v215(v222, v54);
            v215(v189, v54);

            uint64_t v214 = v245;
            uint64_t v210 = v220;
          }

          uint64_t v216 = v223;
          SFAirDrop.NearbySharingAssertion.id.getter(v213);
          (*(void (**)(char *, void *))(v241 + 8))(v216, v85);
          v80(v210, v50);
          uint64_t v184 = v214;
          uint64_t v185 = v50;
          goto LABEL_41;
        }

        sub_100187100(v188, (uint64_t *)&unk_1006460A0);
        uint64_t v115 = (void *)v105;
        uint64_t v86 = v231;
        uint64_t v38 = v218;
        if (v105)
        {
LABEL_28:
          uint64_t v116 = v243;
          uint64_t v117 = *(uint64_t (**)(char *, char *, uint64_t))(v38 + 16);
          uint64_t v118 = v117(v243, v220, v50);
          unint64_t v119 = (unint64_t)v115;
          uint64_t v120 = SFAirDrop.NearbySharingAssertionRequest.explanation.getter(v118);
          uint64_t v122 = v121;
          uint64_t v123 = *(void (**)(char *, uint64_t, uint64_t))(v86 + 16);
          unint64_t v124 = v226;
          v123(v226, v228, v227);
          uint64_t v125 = v235;
          uint64_t v126 = v120;
          unint64_t v127 = v119;
          SFAirDrop.NearbySharingAssertion.init(nearbySharingInteractionID:explanation:client:)(v116, v126, v122, v124);
          os_log_type_t v128 = v225;
          v238 = *(os_log_s **)(v241 + 16);
          ((void (*)(char *, char *, void *))v238)(v225, v125, v85);
          if ((swift_isUniquelyReferenced_nonNull_native(v127) & 1) == 0) {
            unint64_t v127 = sub_10018BE94(0, *(void *)(v127 + 16) + 1LL, 1, v127);
          }
          uint64_t v129 = (uint64_t)v219;
          unint64_t v131 = *(void *)(v127 + 16);
          unint64_t v130 = *(void *)(v127 + 24);
          unint64_t v242 = v127;
          uint64_t v132 = v248;
          if (v131 >= v130 >> 1) {
            unint64_t v242 = sub_10018BE94(v130 > 1, v131 + 1, 1, v242);
          }
          uint64_t v133 = v241;
          uint64_t v134 = v242;
          *(void *)(v242 + swift_weakDestroy(v0 + 16) = v131 + 1;
          (*(void (**)(unint64_t, char *, void *))(v133 + 32))( v134 + ((*(unsigned __int8 *)(v133 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v133 + 80))
          + *(void *)(v133 + 72) * v131,
            v128,
            v85);
          v117((char *)v129, v220, v50);
          uint64_t v135 = v239;
          swift_beginAccess(v239, &v250, 33LL, 0LL);
          swift_bridgeObjectRetain(v134);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v135);
          uint64_t v251 = *v135;
          uint64_t *v135 = 0x8000000000000000LL;
          sub_1003B2984(v134, v129, isUniquelyReferenced_nonNull_native);
          uint64_t v137 = *v135;
          uint64_t *v135 = v251;
          swift_bridgeObjectRelease(v137);
          v244((char *)v129, v50);
          swift_endAccess(&v250);
          if (qword_100643EB8 != -1) {
            swift_once(&qword_100643EB8, sub_1001B3AC8);
          }
          uint64_t v138 = type metadata accessor for Logger(0LL);
          sub_100186DE4(v138, (uint64_t)qword_100645E00);
          uint64_t v139 = v229;
          uint64_t v140 = v235;
          ((void (*)(char *, char *, void *))v238)(v229, v235, v85);
          uint64_t v141 = v247;
          uint64_t v142 = *(void (**)(char *, uint64_t, uint64_t))(v247 + 16);
          uint64_t v143 = v230;
          v142(v230, v132, v54);
          uint64_t v144 = v233;
          uint64_t v145 = ((uint64_t (*)(char *, uint64_t, uint64_t))v142)(v233, v132, v54);
          uint64_t v146 = (os_log_s *)Logger.logObject.getter(v145);
          os_log_type_t v147 = static os_log_type_t.default.getter();
          int v148 = v147;
          BOOL v149 = os_log_type_enabled(v146, v147);
          uint64_t v150 = v243;
          if (v149)
          {
            uint64_t v151 = swift_slowAlloc(32LL, -1LL);
            uint64_t v152 = swift_slowAlloc(96LL, -1LL);
            uint64_t v248 = v152;
            v250 = (char *)v152;
            *(_DWORD *)uint64_t v151 = 136315650;
            LODWORD(v239) = v148;
            SFAirDrop.NearbySharingAssertion.id.getter(v152);
            uint64_t v153 = sub_100183F14( (unint64_t *)&qword_1006460B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            uint64_t v154 = v240;
            uint64_t v155 = dispatch thunk of CustomStringConvertible.description.getter(v240, v153);
            unint64_t v157 = v156;
            v238 = v146;
            uint64_t v158 = v244;
            v244(v150, v154);
            uint64_t v251 = sub_10018CDB4(v155, v157, (uint64_t *)&v250);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v151 + 4, v151 + 12);
            swift_bridgeObjectRelease(v157);
            uint64_t v159 = v139;
            uint64_t v160 = *(uint64_t (**)(char *, void *))(v241 + 8);
            uint64_t v161 = v160(v159, v237);
            *(_WORD *)(v151 + 12) = 2080;
            SFAirDrop.NearbySharingAssertionRequest.nearbySharingInteractionID.getter(v161);
            uint64_t v162 = dispatch thunk of CustomStringConvertible.description.getter(v154, v153);
            unint64_t v164 = v163;
            v158(v150, v154);
            uint64_t v251 = sub_10018CDB4(v162, v164, (uint64_t *)&v250);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v151 + 14, v151 + 22);
            swift_bridgeObjectRelease(v164);
            uint64_t v165 = v246;
            uint64_t v166 = *(uint64_t (**)(char *, uint64_t))(v247 + 8);
            uint64_t v167 = v166(v143, v246);
            *(_WORD *)(v151 + 22) = 2080;
            uint64_t v103 = v232;
            v168 = v233;
            uint64_t v169 = SFAirDrop.NearbySharingAssertionRequest.explanation.getter(v167);
            unint64_t v171 = v170;
            uint64_t v251 = sub_10018CDB4(v169, v170, (uint64_t *)&v250);
            uint64_t v85 = v237;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v151 + 24, v151 + 32);
            swift_bridgeObjectRelease(v171);
            v166(v168, v165);
            uint64_t v140 = v235;
            os_log_t v172 = v238;
            _os_log_impl( (void *)&_mh_execute_header,  v238,  (os_log_type_t)v239,  "SDAirDropNearFieldService: Created new assertion:%s for nearby sharing interaction:%s with explanation:%s",  (uint8_t *)v151,  0x20u);
            uint64_t v173 = v248;
            swift_arrayDestroy(v248, 3LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v173, -1LL, -1LL);
            swift_slowDealloc(v151, -1LL, -1LL);

            uint64_t v174 = v245;
            uint64_t v175 = v249;
          }

          else
          {
            uint64_t v176 = v139;
            uint64_t v160 = *(uint64_t (**)(char *, void *))(v241 + 8);
            v160(v176, v85);
            v177 = *(void (**)(char *, uint64_t))(v141 + 8);
            v177(v143, v54);
            v177(v144, v54);

            uint64_t v174 = v245;
            uint64_t v175 = v249;
            uint64_t v103 = v232;
          }

          uint64_t v178 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAssertionTimeoutWorkItem;
          uint64_t v179 = *(void *)&v175[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAssertionTimeoutWorkItem];
          if (v179)
          {
            uint64_t v180 = swift_retain(*(void *)&v175[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAssertionTimeoutWorkItem]);
            dispatch thunk of DispatchWorkItem.cancel()(v180);
            swift_release(v179);
            uint64_t v181 = *(void *)&v175[v178];
          }

          else
          {
            uint64_t v181 = 0LL;
          }

          uint64_t v182 = v240;
          *(void *)&v175[v178] = 0LL;
          uint64_t v183 = swift_release(v181);
          SFAirDrop.NearbySharingAssertion.id.getter(v183);
          v160(v140, v85);
          v244(v220, v182);
          uint64_t v184 = v174;
          uint64_t v185 = v182;
LABEL_41:
          v103(v184, 0LL, 1LL, v185);
          return swift_bridgeObjectRelease(v242);
        }
      }

      else
      {
        swift_endAccess(&v250);
      }
    }

    else
    {
      swift_endAccess(&v250);
      uint64_t v85 = v237;
      uint64_t v86 = v231;
    }

    uint64_t v115 = &_swiftEmptyArrayStorage;
    goto LABEL_28;
  }

  sub_100187100((uint64_t)v33, &qword_100645EE0);
  uint64_t v49 = *(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56);
  v49(v36, 1LL, 1LL, v37);
  uint64_t v50 = v37;
LABEL_4:
  uint64_t v54 = v246;
  uint64_t v53 = v247;
  uint64_t v55 = v248;
  sub_100187100((uint64_t)v36, &qword_10064DA60);
LABEL_5:
  uint64_t v56 = (char *)v244;
  if (qword_100643EB8 != -1) {
    swift_once(&qword_100643EB8, sub_1001B3AC8);
  }
  uint64_t v57 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v57, (uint64_t)qword_100645E00);
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v56, v55, v54);
  unint64_t v58 = v249;
  uint64_t v59 = (char *)Logger.logObject.getter(v58);
  int v60 = static os_log_type_t.error.getter();
  if (os_log_type_enabled((os_log_t)v59, (os_log_type_t)v60))
  {
    LODWORD(v24_Block_object_dispose(va, 8) = v60;
    v249 = v59;
    v232 = (void (*)(uint64_t, void, uint64_t, uint64_t))v49;
    uint64_t v61 = swift_slowAlloc(22LL, -1LL);
    uint64_t v62 = swift_slowAlloc(64LL, -1LL);
    uint64_t v241 = v62;
    v250 = (char *)v62;
    *(_DWORD *)uint64_t v61 = 136315394;
    uint64_t v63 = v243;
    SFAirDrop.NearbySharingAssertionRequest.nearbySharingInteractionID.getter(v62);
    uint64_t v64 = sub_100183F14( (unint64_t *)&qword_1006460B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v65 = dispatch thunk of CustomStringConvertible.description.getter(v50, v64);
    uint64_t v66 = v38;
    unint64_t v68 = v67;
    unint64_t v237 = *(void **)(v66 + 8);
    ((void (*)(char *, uint64_t))v237)(v63, v50);
    uint64_t v251 = sub_10018CDB4(v65, v68, (uint64_t *)&v250);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v61 + 4, v61 + 12);
    swift_bridgeObjectRelease(v68);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v56, v54);
    *(_WORD *)(v61 + 12) = 2080;
    uint64_t v69 = swift_getKeyPath(&unk_1004CDC48);
    uint64_t v70 = swift_getKeyPath(&unk_1004CDC70);
    uint64_t v71 = (uint64_t)v239;
    static Published.subscript.getter(v58, v69, v70);
    swift_release(v69);
    swift_release(v70);
    uint64_t v72 = v240;
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v238)(v71, 1LL, v240))
    {
      sub_100187100(v71, &qword_100645EE0);
      unint64_t v73 = 0x8000000100504600LL;
      uint64_t v74 = 0xD000000000000027LL;
    }

    else
    {
      uint64_t v107 = v234;
      unint64_t v108 = v242;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v234 + 16))(v242, v71, v72);
      uint64_t v109 = sub_100187100(v71, &qword_100645EE0);
      SFAirDrop.NearbySharingInteraction.id.getter(v109);
      uint64_t v110 = (*(uint64_t (**)(unint64_t, uint64_t))(v107 + 8))(v108, v72);
      uint64_t v74 = UUID.uuidString.getter(v110);
      unint64_t v73 = v111;
      ((void (*)(char *, uint64_t))v237)(v63, v50);
    }

    uint64_t v75 = v245;
    uint64_t v251 = sub_10018CDB4(v74, v73, (uint64_t *)&v250);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v61 + 14, v61 + 22);

    swift_bridgeObjectRelease(v73);
    id v112 = v249;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v249,  (os_log_type_t)v248,  "SDAirDropNearFieldService: Request to take assertion for nearby sharing interaction:%s failed because it's not mat ching the current active interaction:%s",  (uint8_t *)v61,  0x16u);
    uint64_t v113 = v241;
    swift_arrayDestroy(v241, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v113, -1LL, -1LL);
    swift_slowDealloc(v61, -1LL, -1LL);

    uint64_t v49 = (void (*)(char *, void, uint64_t, uint64_t))v232;
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v56, v54);

    uint64_t v75 = v245;
  }

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v49)(v75, 1LL, 1LL, v50);
}

void sub_1001C4704(uint64_t a1)
{
}

uint64_t sub_1001C4724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  v6[3] = a4;
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_1001C4790, static AirDropActor.shared, 0LL);
}

uint64_t sub_1001C4790()
{
  if (qword_100643EB8 != -1) {
    swift_once(&qword_100643EB8, sub_1001B3AC8);
  }
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v2, (uint64_t)qword_100645E00);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 24);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138412290;
    swift_errorRetain(v7);
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *uint64_t v19 = v9;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "SDAirDropNearFieldService: nearFieldController did invalidate with error:%@",  v8,  0xCu);
    uint64_t v10 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v19, 1LL, v10);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 24));
    swift_errorRelease(v7);
  }

  uint64_t v11 = *(void **)(v0 + 32);
  id v12 = [v11 currentPreferredPollingType];
  id v13 = [v11 currentApplicationLabel];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    uint64_t v17 = v16;
  }

  else
  {
    uint64_t v17 = 0x8000000100504630LL;
    uint64_t v15 = 0xD000000000000013LL;
  }

  sub_1001B9FE8(0);
  sub_1001B6E1C((uint64_t)v12, v15, v17, 0);
  swift_bridgeObjectRelease(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001C4CE0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  *(void *)(v5 + 4_Block_object_dispose(va, 8) = a5;
  *(_BYTE *)(v5 + 112) = a4;
  uint64_t v6 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0LL);
  *(void *)(v5 + 56) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v5 + 64) = v7;
  *(void *)(v5 + 72) = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v8 = (*(void *)(*(void *)(sub_100183098(&qword_100645EE0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v5 + 80) = swift_task_alloc(v8);
  *(void *)(v5 + 8_Block_object_dispose(va, 8) = swift_task_alloc(v8);
  *(void *)(v5 + 96) = swift_task_alloc(v8);
  *(void *)(v5 + 104) = swift_task_alloc(v8);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_1001C4DC0, static AirDropActor.shared, 0LL);
}

uint64_t sub_1001C4DC0()
{
  if (qword_100643EB8 != -1) {
    swift_once(&qword_100643EB8, sub_1001B3AC8);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_100645E00);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    int v5 = *(unsigned __int8 *)(v0 + 112);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v45 = v7;
    if (v5) {
      uint64_t v8 = 0x6F74616974696E69LL;
    }
    else {
      uint64_t v8 = 0x7265766965636572LL;
    }
    if (v5) {
      unint64_t v9 = 0xEE00656C6F722072LL;
    }
    else {
      unint64_t v9 = 0xED0000656C6F7220LL;
    }
    *(void *)(v0 + 40) = sub_10018CDB4(v8, v9, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v9);
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "SDAirDropNearFieldService: did detect device nearby with %s",  v6,  0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  uint64_t v10 = *(void *)(v0 + 96);
  uint64_t v11 = *(void *)(v0 + 56);
  uint64_t v12 = *(void *)(v0 + 64);
  uint64_t v13 = *(void *)(v0 + 48)
      + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction;
  swift_beginAccess(v13, v0 + 16, 0LL, 0LL);
  sub_1001915A4(v13, v10, &qword_100645EE0);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  int v15 = v14(v10, 1LL, v11);
  uint64_t v17 = *(void *)(v0 + 96);
  uint64_t v16 = *(void *)(v0 + 104);
  if (v15 == 1)
  {
    uint64_t v18 = *(void *)(v0 + 48);
    uint64_t KeyPath = swift_getKeyPath(&unk_1004CDC48);
    uint64_t v20 = swift_getKeyPath(&unk_1004CDC70);
    static Published.subscript.getter(v18, KeyPath, v20);
    swift_release(v20);
    swift_release(KeyPath);
    sub_100187100(v17, &qword_100645EE0);
  }

  else
  {
    uint64_t v21 = *(void *)(v0 + 56);
    uint64_t v22 = *(void *)(v0 + 64);
    (*(void (**)(void, void, uint64_t))(v22 + 32))(*(void *)(v0 + 104), *(void *)(v0 + 96), v21);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(v16, 0LL, 1LL, v21);
  }

  uint64_t v23 = *(void *)(v0 + 104);
  int v24 = v14(v23, 1LL, *(void *)(v0 + 56));
  sub_100187100(v23, &qword_100645EE0);
  if (v24 == 1) {
    sub_1001BA5CC();
  }
  uint64_t v25 = *(void *)(v0 + 80);
  uint64_t v26 = *(void *)(v0 + 56);
  sub_1001915A4(v13, v25, &qword_100645EE0);
  int v27 = v14(v25, 1LL, v26);
  uint64_t v29 = *(void *)(v0 + 80);
  uint64_t v28 = *(void *)(v0 + 88);
  if (v27 == 1)
  {
    uint64_t v30 = *(void *)(v0 + 48);
    uint64_t v31 = swift_getKeyPath(&unk_1004CDC48);
    uint64_t v32 = swift_getKeyPath(&unk_1004CDC70);
    static Published.subscript.getter(v30, v31, v32);
    swift_release(v32);
    swift_release(v31);
    sub_100187100(v29, &qword_100645EE0);
  }

  else
  {
    uint64_t v33 = *(void *)(v0 + 56);
    uint64_t v34 = *(void *)(v0 + 64);
    (*(void (**)(void, void, uint64_t))(v34 + 32))(*(void *)(v0 + 88), *(void *)(v0 + 80), v33);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v28, 0LL, 1LL, v33);
  }

  uint64_t v35 = *(void *)(v0 + 88);
  uint64_t v36 = *(void *)(v0 + 56);
  if (v14(v35, 1LL, v36) == 1)
  {
    sub_100187100(v35, &qword_100645EE0);
  }

  else
  {
    uint64_t v38 = *(void *)(v0 + 64);
    uint64_t v37 = *(void *)(v0 + 72);
    char v39 = *(_BYTE *)(v0 + 112);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v37, v35, v36);
    SFAirDrop.NearbySharingInteraction.isInitiatorRoleExpected.setter((v39 & 1) == 0);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v36);
  }

  uint64_t v40 = *(void *)(v0 + 96);
  uint64_t v42 = *(void *)(v0 + 80);
  uint64_t v41 = *(void *)(v0 + 88);
  uint64_t v43 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 104));
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001C5384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[10] = a4;
  v5[11] = a5;
  uint64_t v6 = sub_100183098(&qword_100646260);
  v5[12] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State(0LL);
  v5[13] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[14] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[15] = swift_task_alloc(v9);
  uint8_t v5[16] = swift_task_alloc(v9);
  unint64_t v10 = (*(void *)(*(void *)(sub_100183098(&qword_100645EE0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[17] = swift_task_alloc(v10);
  v5[18] = swift_task_alloc(v10);
  v5[19] = swift_task_alloc(v10);
  v5[20] = swift_task_alloc(v10);
  v5[21] = swift_task_alloc(v10);
  v5[22] = swift_task_alloc(v10);
  v5[23] = swift_task_alloc(v10);
  uint8_t v5[24] = swift_task_alloc(v10);
  v5[25] = swift_task_alloc(v10);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  v5[26] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[27] = v12;
  v5[28] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_1001C54F8, static AirDropActor.shared, 0LL);
}

uint64_t sub_1001C54F8()
{
  uint64_t v1 = v0 + 16;
  if (qword_100643EB8 != -1) {
    swift_once(&qword_100643EB8, sub_1001B3AC8);
  }
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v3, (uint64_t)qword_100645E00);
  uint64_t v4 = swift_unknownObjectRetain_n(v2, 4LL);
  int v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  unint64_t v90 = (id *)(v0 + 80);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = *(void *)(v0 + 224);
    uint64_t v87 = *(void *)(v0 + 216);
    uint64_t v8 = *(void *)(v0 + 208);
    unint64_t v9 = *(void **)(v0 + 80);
    uint64_t v10 = swift_slowAlloc(22LL, -1LL);
    uint64_t v11 = swift_slowAlloc(64LL, -1LL);
    uint64_t v92 = v11;
    *(_DWORD *)uint64_t v10 = 136315394;
    id v12 = [v9 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v12);

    uint64_t v13 = sub_100183F14( (unint64_t *)&qword_1006460B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter(v8, v13);
    unint64_t v16 = v15;
    uint64_t v17 = v8;
    uint64_t v1 = v0 + 16;
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v7, v17);
    *(void *)(v0 + 64) = sub_10018CDB4(v14, v16, &v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v16);
    swift_unknownObjectRelease_n(v9, 2LL);
    *(_WORD *)(v10 + 12) = 2080;
    unsigned int v18 = [v9 isInitiator];
    BOOL v19 = v18 == 0;
    if (v18) {
      uint64_t v20 = 0x6F74616974696E69LL;
    }
    else {
      uint64_t v20 = 0x7265766965636572LL;
    }
    if (v19) {
      unint64_t v21 = 0xE800000000000000LL;
    }
    else {
      unint64_t v21 = 0xE900000000000072LL;
    }
    *(void *)(v0 + 72) = sub_10018CDB4(v20, v21, &v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v90, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease(v21);
    swift_unknownObjectRelease_n(v9, 2LL);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "SDAirDropNearFieldService: did begin transaction:%s as %s",  (uint8_t *)v10,  0x16u);
    swift_arrayDestroy(v11, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
    swift_unknownObjectRelease_n(*(void *)(v0 + 80), 4LL);
  }

  uint64_t v22 = *(void *)(v0 + 192);
  uint64_t v23 = *(void *)(v0 + 88)
      + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction;
  swift_beginAccess(v23, v1, 0LL, 0LL);
  sub_1001915A4(v23, v22, &qword_100645EE0);
  uint64_t v24 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1LL, v24);
  uint64_t v29 = *(void *)(v0 + 192);
  uint64_t v28 = *(void *)(v0 + 200);
  if (v27 == 1)
  {
    uint64_t v30 = *(void *)(v0 + 88);
    uint64_t KeyPath = swift_getKeyPath(&unk_1004CDC48);
    uint64_t v32 = swift_getKeyPath(&unk_1004CDC70);
    static Published.subscript.getter(v30, KeyPath, v32);
    swift_release(v32);
    swift_release(KeyPath);
    sub_100187100(v29, &qword_100645EE0);
  }

  else
  {
    (*(void (**)(void, void, uint64_t))(v25 + 32))(*(void *)(v0 + 200), *(void *)(v0 + 192), v24);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(v28, 0LL, 1LL, v24);
  }

  uint64_t v33 = *(void *)(v0 + 200);
  int v34 = v26(v33, 1LL, v24);
  sub_100187100(v33, &qword_100645EE0);
  if (v34 == 1) {
    sub_1001BA5CC();
  }
  uint64_t v35 = *(void *)(v0 + 88);
  uint64_t v36 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_cancelNearbySharingInteractionWorkItem;
  uint64_t v37 = *(void *)(v35
                  + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_cancelNearbySharingInteractionWorkItem);
  if (v37)
  {
    uint64_t v38 = swift_retain(*(void *)(v35
                                 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_cancelNearbySharingInteractionWorkItem));
    dispatch thunk of DispatchWorkItem.cancel()(v38);
    swift_release(v37);
    uint64_t v39 = *(void *)(v35 + v36);
  }

  else
  {
    uint64_t v39 = 0LL;
  }

  uint64_t v40 = *(void *)(v0 + 176);
  *(void *)(v35 + v36) = 0LL;
  swift_release(v39);
  sub_1001915A4(v23, v40, &qword_100645EE0);
  int v41 = v26(v40, 1LL, v24);
  uint64_t v43 = *(void *)(v0 + 176);
  uint64_t v42 = *(void *)(v0 + 184);
  if (v41 == 1)
  {
    uint64_t v44 = *(void *)(v0 + 88);
    uint64_t v45 = swift_getKeyPath(&unk_1004CDC48);
    uint64_t v46 = swift_getKeyPath(&unk_1004CDC70);
    static Published.subscript.getter(v44, v45, v46);
    swift_release(v46);
    swift_release(v45);
    sub_100187100(v43, &qword_100645EE0);
  }

  else
  {
    (*(void (**)(void, void, uint64_t))(v25 + 32))(*(void *)(v0 + 184), *(void *)(v0 + 176), v24);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(v42, 0LL, 1LL, v24);
  }

  uint64_t v47 = *(void *)(v0 + 184);
  uint64_t v48 = v26(v47, 1LL, v24);
  if ((_DWORD)v48 == 1) {
    goto LABEL_40;
  }
  uint64_t v49 = *(void *)(v0 + 128);
  uint64_t v50 = *(void *)(v0 + 104);
  uint64_t v51 = *(void *)(v0 + 112);
  SFAirDrop.NearbySharingInteraction.state.getter(v48);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v47, v24);
  int v52 = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 88))(v49, v50);
  int v53 = enum case for SFAirDrop.NearbySharingInteraction.State.presenceDetected(_:);
  uint64_t v54 = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 8))(v49, v50);
  if (v52 == v53)
  {
    uint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
    os_log_type_t v56 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "SDAirDropNearFieldService: connecting…", v57, 2u);
      swift_slowDealloc(v57, -1LL, -1LL);
    }

    uint64_t v58 = *(void *)(v0 + 160);

    sub_1001915A4(v23, v58, &qword_100645EE0);
    int v59 = v26(v58, 1LL, v24);
    uint64_t v61 = *(void *)(v0 + 160);
    uint64_t v60 = *(void *)(v0 + 168);
    if (v59 == 1)
    {
      uint64_t v62 = *(void *)(v0 + 88);
      uint64_t v63 = swift_getKeyPath(&unk_1004CDC48);
      uint64_t v64 = swift_getKeyPath(&unk_1004CDC70);
      static Published.subscript.getter(v62, v63, v64);
      swift_release(v64);
      swift_release(v63);
      sub_100187100(v61, &qword_100645EE0);
    }

    else
    {
      (*(void (**)(void, void, uint64_t))(v25 + 32))(*(void *)(v0 + 168), *(void *)(v0 + 160), v24);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(v60, 0LL, 1LL, v24);
    }

    uint64_t v65 = *(void *)(v0 + 168);
    if (!v26(v65, 1LL, v24))
    {
      uint64_t v66 = *(void *)(v0 + 120);
      (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 112) + 104LL))( v66,  enum case for SFAirDrop.NearbySharingInteraction.State.connecting(_:),  *(void *)(v0 + 104));
      SFAirDrop.NearbySharingInteraction.state.setter(v66);
      uint64_t v65 = *(void *)(v0 + 168);
    }

    if (!v26(v65, 1LL, v24))
    {
      uint64_t v67 = *(void *)(v0 + 96);
      static ContinuousClock.Instant.now.getter();
      uint64_t v68 = type metadata accessor for ContinuousClock.Instant(0LL);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56LL))(v67, 0LL, 1LL, v68);
      SFAirDrop.NearbySharingInteraction.connectionTime.setter(v67);
      uint64_t v65 = *(void *)(v0 + 168);
    }

    uint64_t v69 = *(void *)(v0 + 152);
    sub_1001915A4(v23, v69, &qword_100645EE0);
    int v70 = v26(v69, 1LL, v24);
    sub_100187100(v69, &qword_100645EE0);
    uint64_t v71 = *(void *)(v0 + 168);
    if (v70 == 1)
    {
      uint64_t v73 = *(void *)(v0 + 136);
      uint64_t v72 = *(void *)(v0 + 144);
      uint64_t v74 = *(void **)(v0 + 88);
      sub_1001915A4(*(void *)(v0 + 168), v72, &qword_100645EE0);
      uint64_t v75 = swift_getKeyPath(&unk_1004CDC48);
      uint64_t v76 = swift_getKeyPath(&unk_1004CDC70);
      sub_1001915A4(v72, v73, &qword_100645EE0);
      static Published.subscript.setter(v73, v74, v75, v76);
      sub_100187100(v72, &qword_100645EE0);
    }

    else
    {
      swift_beginAccess(v23, v0 + 40, 33LL, 0LL);
      sub_1001CDCC4(v71, v23);
      swift_endAccess(v0 + 40);
    }

    uint64_t v47 = *(void *)(v0 + 168);
LABEL_40:
    sub_100187100(v47, &qword_100645EE0);
  }

  uint64_t v77 = *(void *)(v0 + 192);
  uint64_t v78 = *(void *)(v0 + 200);
  uint64_t v80 = *(void *)(v0 + 176);
  uint64_t v79 = *(void *)(v0 + 184);
  uint64_t v82 = *(void *)(v0 + 160);
  uint64_t v81 = *(void *)(v0 + 168);
  uint64_t v84 = *(void *)(v0 + 144);
  uint64_t v83 = *(void *)(v0 + 152);
  uint64_t v85 = *(void *)(v0 + 136);
  uint64_t v88 = *(void *)(v0 + 128);
  uint64_t v89 = *(void *)(v0 + 120);
  uint64_t v91 = *(void *)(v0 + 96);
  swift_task_dealloc(*(void *)(v0 + 224));
  swift_task_dealloc(v78);
  swift_task_dealloc(v77);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v91);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001C5E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[5] = a5;
  v6[6] = a6;
  v6[4] = a4;
  uint64_t v7 = type metadata accessor for SDNearFieldTap(0LL);
  v6[7] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  v6[8] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  void v6[9] = v9;
  void v6[10] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v10 = static AirDropActor.shared;
  v6[11] = static AirDropActor.shared;
  return swift_task_switch(sub_1001C5F08, v10, 0LL);
}

uint64_t sub_1001C5F08()
{
  if (qword_100643EB8 != -1) {
    swift_once(&qword_100643EB8, sub_1001B3AC8);
  }
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(void **)(v0 + 40);
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v3, (uint64_t)qword_100645E00);
  swift_unknownObjectRetain_n(v2, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v7 = *(void *)(v0 + 64);
    uint64_t v8 = *(void **)(v0 + 32);
    uint64_t v9 = *(void **)(v0 + 40);
    uint64_t v42 = v8;
    uint64_t v43 = *(void *)(v0 + 72);
    uint64_t v10 = swift_slowAlloc(22LL, -1LL);
    uint64_t v44 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v45 = swift_slowAlloc(32LL, -1LL);
    uint64_t v46 = v45;
    *(_DWORD *)uint64_t v10 = 136315394;
    id v11 = [v8 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v11);

    uint64_t v12 = sub_100183F14( (unint64_t *)&qword_1006460B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter(v7, v12);
    unint64_t v15 = v14;
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v6, v7);
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = sub_10018CDB4(v13, v15, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v15);
    swift_unknownObjectRelease_n(v42, 2LL);
    *(_WORD *)(v10 + 12) = 2112;
    *(void *)(v0 + 24) = v9;
    id v16 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v10 + 14, v10 + 22);
    *uint64_t v44 = v9;

    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "SDAirDropNearFieldService: did receive tap event for transaction: %s : %@",  (uint8_t *)v10,  0x16u);
    uint64_t v17 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v44, 1LL, v17);
    swift_slowDealloc(v44, -1LL, -1LL);
    swift_arrayDestroy(v45, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
    unsigned int v18 = *(void **)(v0 + 40);
    swift_unknownObjectRelease_n(*(void *)(v0 + 32), 2LL);
  }

  uint64_t v19 = sub_100183168(0LL, (unint64_t *)&qword_100645140, &OBJC_CLASS___NSUserDefaults_ptr);
  uint64_t v20 = (void *)static NSUserDefaults.airdrop.getter(v19);
  char v21 = SFAirDropUserDefaults.boopToActionEnabled.getter();

  if ((v21 & 1) == 0) {
    goto LABEL_9;
  }
  id v23 = objc_allocWithZone(&OBJC_CLASS___NSUserDefaults);
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = [v23 initWithSuiteName:v24];

  if (!v25) {
    goto LABEL_12;
  }
  NSString v26 = String._bridgeToObjectiveC()();
  unsigned __int8 v27 = [v25 BOOLForKey:v26];

  if ((v27 & 1) != 0)
  {
LABEL_9:
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "SDAirDropNearFieldService: Boop To Action is disabled on setSwiftTapEventHandler",  v30,  2u);
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    uint64_t v31 = *(void *)(v0 + 56);
    swift_task_dealloc(*(void *)(v0 + 80));
    swift_task_dealloc(v31);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
LABEL_12:
    uint64_t v33 = *(void *)(v0 + 80);
    uint64_t v34 = *(void *)(v0 + 56);
    uint64_t v35 = *(void **)(v0 + 32);
    uint64_t v36 = *(void **)(v0 + 40);
    char v37 = [v35 isInitiator] ^ 1;
    id v38 = v36;
    id v39 = [v35 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v39);

    sub_10033E290(v38, v37, v33, v34);
    id v40 = [v35 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v40);

    int v41 = (void *)swift_task_alloc(dword_1006461F4);
    *(void *)(v0 + 96) = v41;
    *int v41 = v0;
    v41[1] = sub_1001C63F0;
    return sub_1001BC498(*(void *)(v0 + 56), *(void *)(v0 + 80));
  }

uint64_t sub_1001C63F0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 72LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 80LL);
  uint64_t v4 = *(void *)(*(void *)v0 + 64LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 96LL));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch(sub_1001C6464, v1, 0LL);
}

uint64_t sub_1001C6464()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_task_dealloc(*(void *)(v0 + 80));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001C6654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  void v5[4] = a5;
  uint64_t v6 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0LL);
  v5[5] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[6] = v7;
  v5[7] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  v5[8] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  void v5[9] = v9;
  v5[10] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_1001C670C, static AirDropActor.shared, 0LL);
}

uint64_t sub_1001C670C()
{
  if (qword_100643EB8 != -1) {
    swift_once(&qword_100643EB8, sub_1001B3AC8);
  }
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v2, (uint64_t)qword_100645E00);
  uint64_t v3 = swift_unknownObjectRetain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v21 = *(void *)(v0 + 72);
    uint64_t v7 = *(void *)(v0 + 64);
    uint64_t v8 = *(void **)(v0 + 24);
    uint64_t v20 = v8;
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v22 = swift_slowAlloc(32LL, -1LL);
    uint64_t v23 = v22;
    *(_DWORD *)uint64_t v9 = 136315138;
    id v10 = [v8 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v10);

    uint64_t v11 = sub_100183F14( (unint64_t *)&qword_1006460B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter(v7, v11);
    unint64_t v14 = v13;
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v6, v7);
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = sub_10018CDB4(v12, v14, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v14);
    swift_unknownObjectRelease_n(v20, 2LL);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "SDAirDropNearFieldService: did interrupt transaction:%s",  v9,  0xCu);
    swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    swift_unknownObjectRelease_n(*(void *)(v0 + 24), 2LL);
  }

  uint64_t v15 = *(void *)(v0 + 80);
  uint64_t v17 = *(void *)(v0 + 48);
  uint64_t v16 = *(void *)(v0 + 56);
  uint64_t v18 = *(void *)(v0 + 40);
  (*(void (**)(uint64_t, void, uint64_t))(v17 + 104))( v16,  enum case for SFAirDrop.NearbySharingInteraction.FailureType.pullAway(_:),  v18);
  sub_1001BDBB4(v16);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001C6B20@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100183098(&qword_100645EE0);
  __chkstk_darwin(v8);
  id v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1001915A4(a1, (uint64_t)v10, &qword_100645EE0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1LL, v4);
  if ((_DWORD)result == 1)
  {
    uint64_t v12 = &_swiftEmptyArrayStorage;
  }

  else
  {
    unint64_t v13 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    v13(v7, v10, v4);
    uint64_t v14 = sub_100183098(&qword_100646198);
    uint64_t v15 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v16 = (v15 + 32) & ~v15;
    uint64_t v12 = (_OWORD *)swift_allocObject(v14, v16 + *(void *)(v5 + 72), v15 | 7);
    v12[1] = xmmword_1004CDCA0;
    uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v13)((char *)v12 + v16, v7, v4);
  }

  *a2 = v12;
  return result;
}

uint64_t sub_1001C6C68()
{
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return sub_1001CE0C4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1001C6CC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = sub_100183098(&qword_100646560);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  uint64_t v11 = swift_allocObject(&unk_1005D3498, 24LL, 7LL);
  swift_unknownObjectWeakInit(v11 + 16, a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a2,  v4);
  uint64_t v12 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = (v12 + 24) & ~v12;
  uint64_t v14 = swift_allocObject(&unk_1005D3790, v13 + v6, v12 | 7);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = v11;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v14 + v13,  (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  uint64_t v15 = swift_allocObject(&unk_1005D37B8, 32LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = &unk_1006462A0;
  *(void *)(v15 + 24) = v14;
  uint64_t v16 = static Task<>.noThrow(priority:operation:)(v9, &unk_1006462A8, v15, (char *)&type metadata for () + 8);
  swift_release(v16);
  swift_release(v15);
  return sub_100187100((uint64_t)v9, &qword_100646560);
}

uint64_t sub_1001C6E6C(uint64_t a1, uint64_t a2)
{
  v2[10] = a1;
  v2[11] = a2;
  uint64_t v3 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0LL);
  uint8_t v2[12] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[13] = v4;
  v2[14] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for SFPlatform(0LL);
  v2[15] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[16] = v6;
  v2[17] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for SFAirDrop.NearbySharingInteraction.State(0LL);
  v2[18] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[19] = v8;
  v2[20] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  v2[21] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[22] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[23] = swift_task_alloc(v11);
  uint8_t v2[24] = swift_task_alloc(v11);
  unint64_t v12 = (*(void *)(*(void *)(sub_100183098(&qword_100645EE0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[25] = swift_task_alloc(v12);
  v2[26] = swift_task_alloc(v12);
  uint64_t v13 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0LL);
  v2[27] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v2[28] = v14;
  v2[29] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_1001C6FE0, static AirDropActor.shared, 0LL);
}

uint64_t sub_1001C6FE0()
{
  uint64_t v1 = *(void *)(v0 + 80) + 16LL;
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    uint64_t v5 = *(void *)(v0 + 216);
    uint64_t v6 = *(void *)(v0 + 224);
    uint64_t v7 = *(void *)(v0 + 200);
    uint64_t v8 = Strong + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction;
    swift_beginAccess( Strong + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_pendingNearbySharingInteraction,  v0 + 40,  0LL,  0LL);
    sub_1001915A4(v8, v7, &qword_100645EE0);
    uint64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    if (v9(v7, 1LL, v5) == 1)
    {
      uint64_t v10 = *(void *)(v0 + 200);
      uint64_t KeyPath = swift_getKeyPath(&unk_1004CDC48);
      uint64_t v12 = swift_getKeyPath(&unk_1004CDC70);
      static Published.subscript.getter(v4, KeyPath, v12);
      swift_release(v12);
      swift_release(KeyPath);
      sub_100187100(v10, &qword_100645EE0);
    }

    else
    {
      uint64_t v13 = *(void *)(v0 + 216);
      uint64_t v14 = *(void *)(v0 + 224);
      uint64_t v15 = *(void *)(v0 + 208);
      (*(void (**)(uint64_t, void, uint64_t))(v14 + 32))(v15, *(void *)(v0 + 200), v13);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v15, 0LL, 1LL, v13);
    }

    uint64_t v16 = *(void *)(v0 + 208);
    uint64_t v17 = *(void *)(v0 + 216);
    if (v9(v16, 1LL, v17) == 1)
    {

      sub_100187100(v16, &qword_100645EE0);
    }

    else
    {
      uint64_t v18 = *(void *)(v0 + 192);
      uint64_t v19 = *(void *)(v0 + 168);
      uint64_t v20 = *(void *)(v0 + 176);
      uint64_t v21 = *(void *)(v0 + 88);
      uint64_t v22 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(v0 + 224) + 32LL))( *(void *)(v0 + 232),  v16,  v17);
      SFAirDrop.NearbySharingInteraction.id.getter(v22);
      char v23 = static UUID.== infix(_:_:)(v18, v21);
      NSString v24 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
      v24(v18, v19);
      uint64_t v25 = *(void *)(v0 + 232);
      if ((v23 & 1) != 0)
      {
        uint64_t v27 = *(void *)(v0 + 152);
        uint64_t v26 = *(void *)(v0 + 160);
        uint64_t v28 = *(void *)(v0 + 144);
        SFAirDrop.NearbySharingInteraction.state.getter(v25);
        if ((*(unsigned int (**)(uint64_t, uint64_t))(v27 + 88))(v26, v28) == enum case for SFAirDrop.NearbySharingInteraction.State.presenceDetected(_:))
        {
          (*(void (**)(void, void))(*(void *)(v0 + 152) + 8LL))( *(void *)(v0 + 160),  *(void *)(v0 + 144));
          if (qword_100643EB8 != -1) {
            swift_once(&qword_100643EB8, sub_1001B3AC8);
          }
          uint64_t v30 = *(void *)(v0 + 176);
          uint64_t v29 = *(void *)(v0 + 184);
          uint64_t v31 = *(void *)(v0 + 168);
          uint64_t v32 = *(void *)(v0 + 88);
          uint64_t v33 = type metadata accessor for Logger(0LL);
          sub_100186DE4(v33, (uint64_t)qword_100645E00);
          uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v29, v32, v31);
          uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
          os_log_type_t v36 = static os_log_type_t.default.getter();
          BOOL v37 = os_log_type_enabled(v35, v36);
          uint64_t v38 = *(void *)(v0 + 184);
          uint64_t v39 = *(void *)(v0 + 168);
          if (v37)
          {
            uint64_t v40 = *(void *)(v0 + 136);
            uint64_t v67 = *(void *)(v0 + 128);
            uint64_t v68 = *(void *)(v0 + 120);
            uint64_t v41 = swift_slowAlloc(22LL, -1LL);
            uint64_t v69 = swift_slowAlloc(32LL, -1LL);
            uint64_t v70 = v69;
            *(_DWORD *)uint64_t v41 = 136315394;
            uint64_t v42 = sub_100183F14( (unint64_t *)&qword_1006460B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter(v39, v42);
            os_log_type_t type = v36;
            unint64_t v45 = v44;
            *(void *)(v0 + 64) = sub_10018CDB4(v43, v44, &v70);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v41 + 4, v41 + 12);
            swift_bridgeObjectRelease(v45);
            uint64_t v46 = ((uint64_t (*)(uint64_t, uint64_t))v24)(v38, v39);
            *(_WORD *)(v41 + 12) = 2048;
            static SFPlatform.watchOS.getter(v46);
            char v47 = static SFPlatform.isPlatform(_:)(v40);
            (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v40, v68);
            double v48 = 1.5;
            if ((v47 & 1) != 0) {
              double v48 = 2.5;
            }
            *(double *)(v0 + 72) = v48;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v41 + 14, v41 + 22);
            _os_log_impl( (void *)&_mh_execute_header,  v35,  type,  "SDAirDropNearFieldService: did fire timer to cancel nearby sharing interaction:%s after ~%fs if stuck in p resence detected state.",  (uint8_t *)v41,  0x16u);
            swift_arrayDestroy(v69, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v69, -1LL, -1LL);
            swift_slowDealloc(v41, -1LL, -1LL);
          }

          else
          {
            v24(*(void *)(v0 + 184), *(void *)(v0 + 168));
          }

          uint64_t v53 = *(void *)(v0 + 224);
          uint64_t v52 = *(void *)(v0 + 232);
          uint64_t v54 = *(void *)(v0 + 216);
          uint64_t v56 = *(void *)(v0 + 104);
          uint64_t v55 = *(void *)(v0 + 112);
          uint64_t v57 = *(void *)(v0 + 96);
          (*(void (**)(uint64_t, void, uint64_t))(v56 + 104))( v55,  enum case for SFAirDrop.NearbySharingInteraction.FailureType.pullAway(_:),  v57);
          sub_1001BDBB4(v55);

          (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
          (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
        }

        else
        {
          uint64_t v50 = *(void *)(v0 + 152);
          uint64_t v49 = *(void *)(v0 + 160);
          uint64_t v51 = *(void *)(v0 + 144);
          (*(void (**)(void, void))(*(void *)(v0 + 224) + 8LL))( *(void *)(v0 + 232),  *(void *)(v0 + 216));

          (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
        }
      }

      else
      {
        (*(void (**)(uint64_t, void))(*(void *)(v0 + 224) + 8LL))(v25, *(void *)(v0 + 216));
      }
    }
  }

  uint64_t v58 = *(void *)(v0 + 200);
  uint64_t v59 = *(void *)(v0 + 208);
  uint64_t v61 = *(void *)(v0 + 184);
  uint64_t v60 = *(void *)(v0 + 192);
  uint64_t v62 = *(void *)(v0 + 160);
  uint64_t v63 = *(void *)(v0 + 136);
  uint64_t v64 = *(void *)(v0 + 112);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v59);
  swift_task_dealloc(v58);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001C7510(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v58 = type metadata accessor for DispatchTime(0LL);
  uint64_t v56 = *(void *)(v58 - 8);
  uint64_t v4 = __chkstk_darwin(v58);
  uint64_t v55 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v57 = (char *)&v48 - v6;
  uint64_t v53 = type metadata accessor for DispatchWorkItemFlags(0LL);
  __chkstk_darwin(v53);
  uint64_t v54 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v48 - v13;
  if (qword_100643EB8 != -1) {
    swift_once(&qword_100643EB8, sub_1001B3AC8);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v15, (uint64_t)qword_100645E00);
  uint64_t v52 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v16 = v52(v14, a1, v8);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc(12LL, -1LL);
    uint64_t v49 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    uint64_t v50 = a1;
    uint64_t v22 = v21;
    aBlock[0] = v21;
    uint64_t v51 = v1;
    *(_DWORD *)uint64_t v20 = 136315138;
    double v48 = v20 + 4;
    uint64_t v23 = sub_100183F14( (unint64_t *)&qword_1006460B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v8, v23);
    unint64_t v26 = v25;
    uint64_t v59 = (void *)sub_10018CDB4(v24, v25, aBlock);
    uint64_t v2 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, aBlock, v48, v20 + 12);
    swift_bridgeObjectRelease(v26);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "SDAirDropNearFieldService: start assertion timeout for nearby sharing interaction:%s",  v20,  0xCu);
    swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v27 = v22;
    a1 = v50;
    swift_slowDealloc(v27, -1LL, -1LL);
    uint64_t v28 = v20;
    uint64_t v12 = v49;
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }

  v52(v12, a1, v8);
  uint64_t v29 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v30 = (v29 + 24) & ~v29;
  uint64_t v31 = swift_allocObject(&unk_1005D36F0, v30 + v10, v29 | 7);
  *(void *)(v31 + swift_weakDestroy(v0 + 16) = v2;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v31 + v30, v12, v8);
  aBlock[4] = (uint64_t)sub_1001CDDB0;
  uint64_t v61 = v31;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_1001B9FE4;
  aBlock[3] = (uint64_t)&unk_1005D3708;
  uint64_t v32 = _Block_copy(aBlock);
  uint64_t v59 = &_swiftEmptyArrayStorage;
  uint64_t v33 = sub_100183F14( (unint64_t *)&qword_100646510,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v34 = v2;
  uint64_t v35 = sub_100183098((uint64_t *)&unk_1006460D0);
  uint64_t v36 = sub_1001CD538( (unint64_t *)&qword_100646520,  (uint64_t *)&unk_1006460D0,  (uint64_t)&protocol conformance descriptor for [A]);
  BOOL v37 = v54;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v59, v35, v36, v53, v33);
  uint64_t v38 = type metadata accessor for DispatchWorkItem(0LL);
  swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
  uint64_t v39 = DispatchWorkItem.init(flags:block:)(v37, v32);
  swift_release(v61);
  sub_100183168(0LL, (unint64_t *)&qword_100650E50, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v40 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v41 = v55;
  static DispatchTime.now()(v40);
  uint64_t v42 = v57;
  + infix(_:_:)(v41, 5.0);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v56 + 8);
  unint64_t v44 = v41;
  uint64_t v45 = v58;
  v43(v44, v58);
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v42, v39);

  v43(v42, v45);
  uint64_t v46 = *(void *)&v34[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAssertionTimeoutWorkItem];
  *(void *)&v34[OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearbySharingAssertionTimeoutWorkItem] = v39;
  return swift_release(v46);
}

uint64_t sub_1001C79C8()
{
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return sub_1001CDDA4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_1001C7A1C(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = sub_100183098(&qword_100646560);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a2,  v4);
  uint64_t v11 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = (v11 + 24) & ~v11;
  uint64_t v13 = swift_allocObject(&unk_1005D3740, v12 + v6, v11 | 7);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = a1;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v13 + v12,  (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  uint64_t v14 = swift_allocObject(&unk_1005D3768, 32LL, 7LL);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = &unk_100646288;
  *(void *)(v14 + 24) = v13;
  id v15 = a1;
  uint64_t v16 = static Task<>.noThrow(priority:operation:)(v9, &unk_100646290, v14, (char *)&type metadata for () + 8);
  swift_release(v16);
  swift_release(v14);
  return sub_100187100((uint64_t)v9, &qword_100646560);
}

uint64_t sub_1001C7BA8(uint64_t a1, uint64_t a2)
{
  v2[6] = a1;
  v2[7] = a2;
  uint64_t v3 = sub_100183098(&qword_10064DA60);
  v2[8] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  v2[9] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[10] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[11] = swift_task_alloc(v6);
  uint8_t v2[12] = swift_task_alloc(v6);
  uint64_t v7 = sub_100183098(&qword_100645EE0);
  v2[13] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for SFAirDrop.NearbySharingInteraction(0LL);
  v2[14] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[15] = v9;
  v2[16] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_1001C7CB8, static AirDropActor.shared, 0LL);
}

uint64_t sub_1001C7CB8()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t KeyPath = swift_getKeyPath(&unk_1004CDC48);
  uint64_t v6 = swift_getKeyPath(&unk_1004CDC70);
  static Published.subscript.getter(v1, KeyPath, v6);
  swift_release(v6);
  swift_release(KeyPath);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1LL, v2) == 1)
  {
    sub_100187100(*(void *)(v0 + 104), &qword_100645EE0);
    goto LABEL_15;
  }

  uint64_t v7 = *(void *)(v0 + 96);
  uint64_t v8 = *(void *)(v0 + 72);
  uint64_t v9 = *(void *)(v0 + 80);
  uint64_t v10 = *(void *)(v0 + 56);
  uint64_t v11 = (*(uint64_t (**)(void, void, void))(*(void *)(v0 + 120) + 32LL))( *(void *)(v0 + 128),  *(void *)(v0 + 104),  *(void *)(v0 + 112));
  SFAirDrop.NearbySharingInteraction.id.getter(v11);
  char v12 = static UUID.== infix(_:_:)(v7, v10);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v13(v7, v8);
  if ((v12 & 1) == 0)
  {
LABEL_7:
    (*(void (**)(void, void))(*(void *)(v0 + 120) + 8LL))(*(void *)(v0 + 128), *(void *)(v0 + 112));
    goto LABEL_15;
  }

  swift_beginAccess(v14, v0 + 16, 32LL, 0LL);
  uint64_t v15 = *v14;
  if (*(void *)(v15 + 16) && (unint64_t v16 = sub_1003AD618(*(void *)(v0 + 56)), (v17 & 1) != 0))
  {
    uint64_t v18 = *(void *)(*(void *)(v15 + 56) + 8 * v16);
    swift_endAccess(v0 + 16);
    if (*(void *)(v18 + 16)) {
      goto LABEL_7;
    }
  }

  else
  {
    swift_endAccess(v0 + 16);
  }

  if (qword_100643EB8 != -1) {
    swift_once(&qword_100643EB8, sub_1001B3AC8);
  }
  uint64_t v20 = *(void *)(v0 + 80);
  uint64_t v19 = *(void *)(v0 + 88);
  uint64_t v21 = *(void *)(v0 + 72);
  uint64_t v22 = *(void *)(v0 + 56);
  uint64_t v23 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v23, (uint64_t)qword_100645E00);
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
  uint64_t v25 = v24(v19, v22, v21);
  unint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
  os_log_type_t v27 = static os_log_type_t.default.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  uint64_t v29 = *(void *)(v0 + 88);
  uint64_t v30 = *(void *)(v0 + 72);
  if (v28)
  {
    uint64_t v49 = v24;
    uint64_t v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v48 = swift_slowAlloc(32LL, -1LL);
    uint64_t v50 = v48;
    *(_DWORD *)uint64_t v31 = 136315138;
    uint64_t v32 = sub_100183F14( (unint64_t *)&qword_1006460B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter(v30, v32);
    unint64_t v35 = v34;
    *(void *)(v0 + 40) = sub_10018CDB4(v33, v34, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v31 + 4, v31 + 12);
    unint64_t v36 = v35;
    uint64_t v24 = v49;
    swift_bridgeObjectRelease(v36);
    v13(v29, v30);
    _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "SDAirDropNearFieldService: did fire timer to cancel nearby sharing interaction:%s after 5 seconds if no clients to ok an assertion for it.",  v31,  0xCu);
    swift_arrayDestroy(v48, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1LL, -1LL);
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  else
  {
    v13(*(void *)(v0 + 88), *(void *)(v0 + 72));
  }

  uint64_t v38 = *(void *)(v0 + 120);
  uint64_t v37 = *(void *)(v0 + 128);
  uint64_t v39 = *(void *)(v0 + 112);
  uint64_t v40 = *(void *)(v0 + 72);
  uint64_t v41 = *(void *)(v0 + 80);
  uint64_t v42 = *(void *)(v0 + 64);
  v24(v42, *(void *)(v0 + 56), v40);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v42, 0LL, 1LL, v40);
  sub_1001B455C(v42);
  sub_100187100(v42, &qword_10064DA60);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
LABEL_15:
  uint64_t v43 = *(void *)(v0 + 96);
  uint64_t v44 = *(void *)(v0 + 104);
  uint64_t v45 = *(void *)(v0 + 88);
  uint64_t v46 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 128));
  swift_task_dealloc(v44);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001C8084(unint64_t a1)
{
  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native(*v1) & 1) == 0) {
    uint64_t v3 = sub_1001CCE64((uint64_t)v3);
  }
  unint64_t v4 = *((void *)v3 + 2);
  if (v4 <= a1)
  {
    __break(1u);
  }

  else
  {
    unint64_t v5 = v4 - 1;
    uint64_t v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      uint64_t v7 = &v3[16 * a1];
      uint64_t v8 = *((void *)v7 + 4);
      memmove(v7 + 32, v7 + 48, 16 * v6);
      *((void *)v3 + 2) = v5;
      *uint64_t v1 = v3;
      return v8;
    }
  }

  char v10 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v10,  1046LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_1001C8160@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0) {
    unint64_t v5 = sub_1001CCE78(v5);
  }
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }

  unint64_t v7 = v6 - 1;
  uint64_t v8 = type metadata accessor for SFAirDrop.NearbySharingAssertion(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 72);
  unint64_t v11 = v5 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)) + v10 * a1;
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v9 + 32))(a2, v11, v8);
  unint64_t v13 = v7 - a1;
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    char v15 = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v15,  1046LL,  0);
    __break(1u);
    return result;
  }

  if (v10 > 0 || v11 >= v11 + v10 + v10 * v13)
  {
    uint64_t result = swift_arrayInitWithTakeFrontToBack(v11, v11 + v10, v13, v8);
  }

  else if (v10)
  {
    uint64_t result = swift_arrayInitWithTakeBackToFront(v11);
  }

  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v2 = v5;
  return result;
}

void *sub_1001C829C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = (void *)*v2;
  if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0) {
    unint64_t v5 = sub_1001CCF20(v5);
  }
  unint64_t v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }

  else
  {
    unint64_t v7 = v6 - 1;
    sub_1001CE0D0((__int128 *)&v5[5 * a1 + 4], a2);
    if ((uint64_t)(v7 - a1) >= 0)
    {
      uint64_t result = memmove(&v5[5 * a1 + 4], &v5[5 * a1 + 9], 40 * (v7 - a1));
      v5[2] = v7;
      *uint64_t v2 = v5;
      return result;
    }
  }

  char v9 = 2;
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v9,  1046LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_1001C838C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0) {
    unint64_t v5 = sub_1001CCF4C(v5);
  }
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }

  unint64_t v7 = v6 - 1;
  uint64_t v8 = type metadata accessor for SDAirDropService.TransferPresenterClient(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 72);
  unint64_t v11 = v5 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)) + v10 * a1;
  uint64_t result = sub_1001A4B40(v11, a2, type metadata accessor for SDAirDropService.TransferPresenterClient);
  unint64_t v13 = v7 - a1;
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
    __break(1u);
    return result;
  }

  if (v10 > 0 || v11 >= v11 + v10 + v10 * v13)
  {
    uint64_t result = swift_arrayInitWithTakeFrontToBack(v11, v11 + v10, v13, v8);
  }

  else if (v10)
  {
    uint64_t result = swift_arrayInitWithTakeBackToFront(v11);
  }

  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v2 = v5;
  return result;
}

uint64_t sub_1001C84C8(unint64_t a1)
{
  uint64_t v3 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *uint64_t v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v3 < 0 || (v3 & 0x4000000000000000LL) != 0)
  {
    uint64_t v3 = sub_1001CCF60(v3);
    *uint64_t v1 = v3;
  }

  uint64_t v5 = v3 & 0xFFFFFFFFFFFFFF8LL;
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }

  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      uint64_t v9 = v5 + 8 * a1;
      uint64_t v10 = *(void *)(v9 + 32);
      unint64_t v11 = memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(void *)(v5 + swift_weakDestroy(v0 + 16) = v7;
      specialized Array._endMutation()(v11);
      return v10;
    }
  }

  char v13 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v13,  1046LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_1001C85A8()
{
  v1._object = (void *)0x8000000100504840LL;
  v1._countAndFlagsBits = 0xD000000000000024LL;
  String.append(_:)(v1);
  uint64_t v2 = (uint64_t *)(v0 + *(int *)(type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0LL) + 24));
  uint64_t v3 = *v2;
  unint64_t v4 = v2[1];
  sub_10019BA8C(*v2, v4);
  v5._countAndFlagsBits = Data.description.getter(v3, v4);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  sub_100189B20(v3, v4);
  v7._countAndFlagsBits = 0x6E657473696C202CLL;
  v7._object = (void *)0xEF3A444955557265LL;
  String.append(_:)(v7);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = sub_100183F14( (unint64_t *)&qword_1006460B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v8, v9);
  unint64_t v11 = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v11);
  v12._countAndFlagsBits = 41LL;
  v12._object = (void *)0xE100000000000000LL;
  String.append(_:)(v12);
  return 0LL;
}

id sub_1001C8728( void *a1, uint64_t a2, uint64_t (*a3)(void), void (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v8 = a3(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  unint64_t v11 = (char *)&v15 - v10;
  id v12 = a1;
  a4();

  char v13 = (void *)a5();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v13;
}

id sub_1001C884C()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001C88BC()
{
  return type metadata accessor for SDBoopAtADistanceTransaction(0LL);
}

uint64_t type metadata accessor for SDBoopAtADistanceTransaction(uint64_t a1)
{
  return sub_1001A4AD0( a1,  (uint64_t *)&unk_100645FE8,  (uint64_t)&nominal type descriptor for SDBoopAtADistanceTransaction);
}

uint64_t sub_1001C88D8(uint64_t a1, uint64_t a2)
{
  uint64_t result = type metadata accessor for SFAirDropClient.BoopAtADistance.Transaction(319LL, a2);
  if (v4 <= 0x3F)
  {
    uint64_t v5 = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 1LL, &v5, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_1001C8944(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v15);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v_Block_object_dispose(va, 8) = v10;
    unint64_t v11 = (uint64_t *)((char *)a1 + v9);
    id v12 = (char *)a2 + v9;
    uint64_t v13 = *(uint64_t *)((char *)a2 + v9);
    unint64_t v14 = *((void *)v12 + 1);
    swift_unknownObjectRetain(v10);
    sub_10019BA8C(v13, v14);
    *unint64_t v11 = v13;
    v11[1] = v14;
  }

  return a1;
}

uint64_t sub_1001C89EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  swift_unknownObjectRelease(*(void *)(a1 + *(int *)(a2 + 20)));
  return sub_100189B20(*(void *)(a1 + *(int *)(a2 + 24)), *(void *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t sub_1001C8A40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = *(void *)(a2 + v7);
  *(void *)(a1 + v7) = v9;
  uint64_t v10 = (uint64_t *)(a1 + v8);
  uint64_t v11 = *(void *)(a2 + v8);
  unint64_t v12 = *(void *)(a2 + v8 + 8);
  swift_unknownObjectRetain(v9);
  sub_10019BA8C(v11, v12);
  *uint64_t v10 = v11;
  v10[1] = v12;
  return a1;
}

uint64_t sub_1001C8ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a2 + v7);
  uint64_t v9 = *(void *)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  swift_unknownObjectRetain(v8);
  swift_unknownObjectRelease(v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (uint64_t *)(a1 + v10);
  unint64_t v12 = (uint64_t *)(a2 + v10);
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  sub_10019BA8C(*v12, v14);
  uint64_t v15 = *v11;
  unint64_t v16 = v11[1];
  *uint64_t v11 = v13;
  v11[1] = v14;
  sub_100189B20(v15, v16);
  return a1;
}

uint64_t sub_1001C8B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_1001C8BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_unknownObjectRelease(v8);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = *(void *)(a1 + v9);
  unint64_t v11 = *(void *)(a1 + v9 + 8);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  sub_100189B20(v10, v11);
  return a1;
}

uint64_t sub_1001C8C30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001C8C3C);
}

uint64_t sub_1001C8C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_1001C8CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001C8CC4);
}

uint64_t sub_1001C8CC4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_1001C8D3C(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "\b";
    _DWORD v4[2] = &unk_1004CDBF0;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1001C8DB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant(0LL);
  *(void *)(v6 + 64) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v6 + 72) = v13;
  unint64_t v14 = (*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v6 + 80) = swift_task_alloc(v14);
  *(void *)(v6 + 8_Block_object_dispose(va, 8) = swift_task_alloc(v14);
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 4_Block_object_dispose(va, 8) = a2;
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch(sub_1001C8E5C, 0LL, 0LL);
}

uint64_t sub_1001C8E5C()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock(0LL);
  uint64_t v5 = sub_100183F14( &qword_1006462B0,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock,  (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v4, v5);
  uint64_t v6 = sub_100183F14( &qword_1006462B8,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant,  (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 5, v2, v6);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v7;
  v7(v1, v2);
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[13] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1001C8F74;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[11], v0 + 2, v4, v5);
}

uint64_t sub_1001C8F74()
{
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v2 = *(void *)(*v1 + 104);
  uint64_t v4 = *(void *)(*v1 + 88);
  uint64_t v5 = *(void *)(*v1 + 64);
  uint64_t v6 = *v1;
  *(void *)(v6 + 112) = v0;
  swift_task_dealloc(v2);
  v3(v4, v5);
  if (v0) {
    return swift_task_switch(sub_1001C9020, 0LL, 0LL);
  }
  uint64_t v8 = *(void *)(v6 + 80);
  swift_task_dealloc(*(void *)(v6 + 88));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1001C9020()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001C905C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1004CDC48);
  uint64_t v3 = swift_getKeyPath(&unk_1004CDC70);
  static Published.subscript.getter(v1, KeyPath, v3);
  swift_release(v3);
  return swift_release(KeyPath);
}

uint64_t sub_1001C90C8(uint64_t a1, void **a2)
{
  uint64_t v4 = sub_100183098(&qword_100645EE0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v14 - v8;
  sub_1001915A4(a1, (uint64_t)&v14 - v8, &qword_100645EE0);
  uint64_t v10 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_1004CDC48);
  uint64_t v12 = swift_getKeyPath(&unk_1004CDC70);
  sub_1001915A4((uint64_t)v9, (uint64_t)v7, &qword_100645EE0);
  static Published.subscript.setter(v7, v10, KeyPath, v12);
  return sub_100187100((uint64_t)v9, &qword_100645EE0);
}

uint64_t sub_1001C91C0(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1001C9224;
  return v6(a1);
}

uint64_t sub_1001C9224()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

double sub_1001C9270@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_1003AD50C(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v10 = *v3;
    uint64_t v13 = *v3;
    *uint64_t v3 = (const char *)0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1003ADAB4();
      uint64_t v10 = v13;
    }

    sub_10019154C(*((void *)v10 + 6) + 40 * v7);
    sub_100186D8C((_OWORD *)(*((void *)v10 + 7) + 32 * v7), a2);
    sub_1001CACCC(v7, (uint64_t)v10);
    unint64_t v11 = *v3;
    *uint64_t v3 = v10;
    *(void *)&double result = swift_bridgeObjectRelease(v11).n128_u64[0];
  }

  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }

  return result;
}

uint64_t sub_1001C9358(uint64_t a1, uint64_t a2)
{
  return sub_1001C99EC(a1, a2, (void (*)(void))sub_1003ADC98);
}

uint64_t sub_1001C9364(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  unint64_t v5 = sub_1003AD580(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v8 = *v2;
  uint64_t v14 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1003ADCA4();
    uint64_t v8 = v14;
  }

  uint64_t v9 = *(void *)(v8 + 48);
  uint64_t v10 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))( v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * v5,  v10);
  uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v5);
  sub_1001CAE94(v5, v8);
  uint64_t v12 = *v2;
  *uint64_t v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

double sub_1001C943C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  unint64_t v9 = sub_1003AD53C(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v12 = *v4;
    uint64_t v15 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1003ADECC();
      uint64_t v12 = v15;
    }

    swift_bridgeObjectRelease(*(void *)(*(void *)(v12 + 48) + 16 * v9 + 8));
    sub_1001CCE4C((__int128 *)(*(void *)(v12 + 56) + 48 * v9), a3);
    sub_1001CB134(v9, v12);
    uint64_t v13 = *v4;
    *uint64_t v4 = v12;
    swift_bridgeObjectRelease(v13);
  }

  else
  {
    double result = 0.0;
    a3[1] = 0u;
    a3[2] = 0u;
    *a3 = 0u;
  }

  return result;
}

uint64_t sub_1001C9534(uint64_t a1)
{
  return sub_1001CA8B0(a1, (void (*)(void))sub_1003AE0B4);
}

uint64_t sub_1001C9540(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  unint64_t v5 = sub_1003AD618(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v8 = *v2;
  uint64_t v14 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1003AE0C0();
    uint64_t v8 = v14;
  }

  uint64_t v9 = *(void *)(v8 + 48);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))( v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * v5,  v10);
  uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v5);
  sub_1001CB31C(v5, v8);
  uint64_t v12 = *v2;
  *uint64_t v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_1001C9618()
{
  uint64_t v1 = type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  swift_unknownObjectRelease(*(void *)(v0 + 24));
  uint64_t v7 = v0 + v4;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  swift_unknownObjectRelease(*(void *)(v7 + *(int *)(v1 + 20)));
  sub_100189B20(*(void *)(v7 + *(int *)(v1 + 24)), *(void *)(v7 + *(int *)(v1 + 24) + 8));
  return swift_deallocObject(v0, v5, v6);
}

void sub_1001C96C0()
{
}

uint64_t sub_1001C96F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001C9700(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1001C9708()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001C972C()
{
  return sub_1001BC164(*(void *)(v0 + 16));
}

uint64_t sub_1001C9734()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1001C9758()
{
  uint64_t v2 = (void *)swift_task_alloc(dword_1006460E4);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1001C97A0;
  return sub_1001BC278(v0);
}

uint64_t sub_1001C97A0(uint64_t a1)
{
  uint64_t v4 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_1001C97F0(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1006460F4);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100195708;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1006460F0 + dword_1006460F0))(a1, v4);
}

uint64_t sub_1001C9860(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100183098(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001C98A4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  unint64_t v5 = sub_1003AD618(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v8 = *v2;
  uint64_t v14 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1003AE2F0();
    uint64_t v8 = v14;
  }

  uint64_t v9 = *(void *)(v8 + 48);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))( v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * v5,  v10);
  uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 16 * v5);
  sub_1001CB5BC(v5, v8);
  uint64_t v12 = *v2;
  *uint64_t v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_1001C9990@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1001CA04C( a1,  a2,  (uint64_t (*)(void))&type metadata accessor for SFClientIdentity,  (void (*)(void))sub_1003AE560,  a3);
}

uint64_t sub_1001C99A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1001CA654( a1,  a2,  type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation,  (void (*)(void))sub_1003AE574,  a3);
}

uint64_t sub_1001C99B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001C9EAC( a1,  (uint64_t (*)(void))&type metadata accessor for NWEndpoint,  (void (*)(void))sub_1003AE588,  a2);
}

uint64_t sub_1001C99CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001C9EAC( a1,  (uint64_t (*)(void))&type metadata accessor for SFAirDropReceive.Transfer,  (void (*)(void))sub_1003AE5A4,  a2);
}

uint64_t sub_1001C99E0(uint64_t a1, uint64_t a2)
{
  return sub_1001C99EC(a1, a2, (void (*)(void))sub_1003AE5C0);
}

uint64_t sub_1001C99EC(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  unint64_t v5 = v3;
  uint64_t v8 = *v5;
  swift_bridgeObjectRetain(*v5);
  unint64_t v9 = sub_1003AD53C(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
  uint64_t v12 = *v5;
  uint64_t v16 = *v5;
  *unint64_t v5 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a3();
    uint64_t v12 = v16;
  }

  swift_bridgeObjectRelease(*(void *)(*(void *)(v12 + 48) + 16 * v9 + 8));
  uint64_t v13 = *(void *)(*(void *)(v12 + 56) + 8 * v9);
  sub_1001CC200(v9, v12);
  uint64_t v14 = *v5;
  *unint64_t v5 = v12;
  swift_bridgeObjectRelease(v14);
  return v13;
}

uint64_t sub_1001C9AC4(uint64_t a1, uint64_t a2)
{
  return sub_1001CA7A4(a1, a2, (void (*)(void))sub_1003AE770);
}

uint64_t sub_1001C9AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  char v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_1003AD53C(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  char v10 = *v3;
  uint64_t v14 = *v3;
  *uint64_t v3 = (const char *)0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1003AE788();
    char v10 = v14;
  }

  swift_bridgeObjectRelease(*(const char **)(*((void *)v10 + 6) + 16 * v7 + 8));
  uint64_t v11 = *(void *)(*((void *)v10 + 7) + 16 * v7);
  sub_1001CBB4C(v7, (uint64_t)v10);
  uint64_t v12 = *v3;
  *uint64_t v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_1001C9BB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  char v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_1003AD580(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    char v10 = *v3;
    uint64_t v21 = *v3;
    *uint64_t v3 = (const char *)0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1003AE940();
      char v10 = v21;
    }

    uint64_t v11 = *((void *)v10 + 6);
    uint64_t v12 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))( v11 + *(void *)(*(void *)(v12 - 8) + 72LL) * v7,  v12);
    uint64_t v13 = *((void *)v10 + 7);
    uint64_t v14 = sub_100183098((uint64_t *)&unk_1006463F0);
    uint64_t v15 = *(void *)(v14 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 32))(a2, v13 + *(void *)(v15 + 72) * v7, v14);
    sub_1001CCB84( v7,  (uint64_t)v10,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier,  &qword_100646250,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier,  (uint64_t *)&unk_1006463F0);
    uint64_t v16 = *v3;
    *uint64_t v3 = v10;
    __n128 v17 = swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, __n128))(v15 + 56))(a2, 0LL, 1LL, v14, v17);
  }

  else
  {
    uint64_t v19 = sub_100183098((uint64_t *)&unk_1006463F0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v19 - 8) + 56LL))( a2,  1LL,  1LL,  v19,  v20);
  }

uint64_t sub_1001C9D24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_1003AD580(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v10 = *v3;
    uint64_t v19 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1003AE95C();
      uint64_t v10 = v19;
    }

    uint64_t v11 = *(void *)(v10 + 48);
    uint64_t v12 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))( v11 + *(void *)(*(void *)(v12 - 8) + 72LL) * v7,  v12);
    uint64_t v13 = *(void *)(v10 + 56);
    uint64_t v14 = type metadata accessor for SDAirDropLegacySessionLogger.Transfer(0LL);
    uint64_t v15 = *(void *)(v14 - 8);
    sub_1001A4B40( v13 + *(void *)(v15 + 72) * v7,  a2,  type metadata accessor for SDAirDropLegacySessionLogger.Transfer);
    sub_1001CB880( v7,  v10,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier,  &qword_100646250,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier,  type metadata accessor for SDAirDropLegacySessionLogger.Transfer);
    uint64_t v16 = *v3;
    *uint64_t v3 = v10;
    swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(a2, 0LL, 1LL, v14);
  }

  else
  {
    uint64_t v18 = type metadata accessor for SDAirDropLegacySessionLogger.Transfer(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))( a2,  1LL,  1LL,  v18);
  }

uint64_t sub_1001C9E8C(uint64_t a1)
{
  return sub_1001CA8B0(a1, (void (*)(void))sub_1003AEC38);
}

uint64_t sub_1001C9E98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001C9EAC( a1,  (uint64_t (*)(void))&type metadata accessor for SFAirDropSend.Transfer,  (void (*)(void))sub_1003AEE80,  a2);
}

uint64_t sub_1001C9EAC@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  unint64_t v7 = v4;
  uint64_t v10 = *v7;
  swift_bridgeObjectRetain(*v7);
  unint64_t v11 = sub_1003AD580(a1);
  LOBYTE(a1) = v12;
  swift_bridgeObjectRelease(v10);
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    uint64_t v14 = *v7;
    uint64_t v23 = *v7;
    *unint64_t v7 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a3();
      uint64_t v14 = v23;
    }

    uint64_t v15 = *(void *)(v14 + 48);
    uint64_t v16 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v16 - 8) + 8LL))( v15 + *(void *)(*(void *)(v16 - 8) + 72LL) * v11,  v16);
    uint64_t v17 = *(void *)(v14 + 56);
    uint64_t v18 = a2(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v19 + 32))(a4, v17 + *(void *)(v19 + 72) * v11, v18);
    sub_1001CB880( v11,  v14,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier,  &qword_100646250,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier,  a2);
    uint64_t v20 = *v7;
    *unint64_t v7 = v14;
    swift_bridgeObjectRelease(v20);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(a4, 0LL, 1LL, v18);
  }

  else
  {
    uint64_t v22 = a2(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))( a4,  1LL,  1LL,  v22);
  }

uint64_t sub_1001CA018(uint64_t a1, uint64_t a2)
{
  return sub_1001C99EC(a1, a2, (void (*)(void))sub_1003AF198);
}

uint64_t sub_1001CA024@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1001CA654(a1, a2, type metadata accessor for RegistrationState, (void (*)(void))sub_1003AF1A4, a3);
}

uint64_t sub_1001CA038@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1001CA04C( a1,  a2,  (uint64_t (*)(void))&type metadata accessor for Date,  (void (*)(void))sub_1003AF3E8,  a3);
}

uint64_t sub_1001CA04C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  char v8 = v5;
  uint64_t v12 = *v8;
  swift_bridgeObjectRetain(*v8);
  unint64_t v13 = sub_1003AD53C(a1, a2);
  LOBYTE(a2) = v14;
  swift_bridgeObjectRelease(v12);
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
    uint64_t v16 = *v8;
    uint64_t v23 = *v8;
    *char v8 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a4();
      uint64_t v16 = v23;
    }

    swift_bridgeObjectRelease(*(void *)(*(void *)(v16 + 48) + 16 * v13 + 8));
    uint64_t v17 = *(void *)(v16 + 56);
    uint64_t v18 = a3(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v19 + 32))(a5, v17 + *(void *)(v19 + 72) * v13, v18);
    sub_1001CC5E0(v13, v16, a3);
    uint64_t v20 = *v8;
    *char v8 = v16;
    swift_bridgeObjectRelease(v20);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(a5, 0LL, 1LL, v18);
  }

  else
  {
    uint64_t v22 = a3(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))( a5,  1LL,  1LL,  v22);
  }

double sub_1001CA188@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_1003AD618(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v10 = *v3;
    uint64_t v15 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1003AF3FC();
      uint64_t v10 = v15;
    }

    uint64_t v11 = *(void *)(v10 + 48);
    uint64_t v12 = type metadata accessor for UUID(0LL);
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))( v11 + *(void *)(*(void *)(v12 - 8) + 72LL) * v7,  v12);
    sub_1001CE0D0((__int128 *)(*(void *)(v10 + 56) + 40 * v7), a2);
    sub_1001CBD80(v7, v10);
    uint64_t v13 = *v3;
    *uint64_t v3 = v10;
    *(void *)&double result = swift_bridgeObjectRelease(v13).n128_u64[0];
  }

  else
  {
    *(void *)(a2 + 32) = 0LL;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
  }

  return result;
}

uint64_t sub_1001CA28C(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)v1;
  uint64_t v4 = *v1;
  swift_bridgeObjectRetain(v4);
  unint64_t v5 = sub_1003AD618(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v8 = *v2;
  uint64_t v14 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1003AF658();
    uint64_t v8 = v14;
  }

  uint64_t v9 = *(void *)(v8 + 48);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))( v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * v5,  v10);
  uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v5);
  sub_1001CB31C(v5, v8);
  uint64_t v12 = (const char *)*v2;
  *uint64_t v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_1001CA370(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  char v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_1003AD53C(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0) {
    return 2LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v10 = *v3;
  uint64_t v14 = *v3;
  *uint64_t v3 = (const char *)0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1003AF87C();
    uint64_t v10 = v14;
  }

  swift_bridgeObjectRelease(*(const char **)(*((void *)v10 + 6) + 16 * v7 + 8));
  uint64_t v11 = *(unsigned __int8 *)(*((void *)v10 + 7) + v7);
  sub_1001CC02C(v7, (uint64_t)v10);
  uint64_t v12 = *v3;
  *uint64_t v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_1001CA43C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  char v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_1003AD53C(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v10 = *v3;
  uint64_t v14 = *v3;
  *uint64_t v3 = (const char *)0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1003AF888();
    uint64_t v10 = v14;
  }

  swift_bridgeObjectRelease(*(const char **)(*((void *)v10 + 6) + 16 * v7 + 8));
  uint64_t v11 = *(void *)(*((void *)v10 + 7) + 8 * v7);
  sub_1001CC200(v7, (uint64_t)v10);
  uint64_t v12 = *v3;
  *uint64_t v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_1001CA508@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  char v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  unint64_t v9 = sub_1003AD53C(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v12 = *v4;
    uint64_t v21 = *v4;
    *uint64_t v4 = (const char *)0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1003AFA40();
      uint64_t v12 = v21;
    }

    swift_bridgeObjectRelease(*(const char **)(*((void *)v12 + 6) + 16 * v9 + 8));
    uint64_t v13 = *((void *)v12 + 7);
    uint64_t v14 = sub_100183098(&qword_10064DB00);
    uint64_t v15 = *(void *)(v14 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 32))(a3, v13 + *(void *)(v15 + 72) * v9, v14);
    sub_1001CC3D4(v9, (uint64_t)v12);
    uint64_t v16 = *v4;
    *uint64_t v4 = v12;
    __n128 v17 = swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, __n128))(v15 + 56))(a3, 0LL, 1LL, v14, v17);
  }

  else
  {
    uint64_t v19 = sub_100183098(&qword_10064DB00);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v19 - 8) + 56LL))( a3,  1LL,  1LL,  v19,  v20);
  }

uint64_t sub_1001CA640@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1001CA654( a1,  a2,  type metadata accessor for SDAirDropDiscoveredEndpoint,  (void (*)(void))sub_1003AFCA4,  a3);
}

uint64_t sub_1001CA654@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  char v8 = v5;
  uint64_t v12 = *v8;
  swift_bridgeObjectRetain(*v8);
  unint64_t v13 = sub_1003AD53C(a1, a2);
  LOBYTE(a2) = v14;
  swift_bridgeObjectRelease(v12);
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
    uint64_t v16 = *v8;
    uint64_t v23 = *v8;
    *char v8 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a4();
      uint64_t v16 = v23;
    }

    swift_bridgeObjectRelease(*(void *)(*(void *)(v16 + 48) + 16 * v13 + 8));
    uint64_t v17 = *(void *)(v16 + 56);
    uint64_t v18 = a3(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
    sub_1001A4B40(v17 + *(void *)(v19 + 72) * v13, a5, a3);
    sub_1001CC5E0(v13, v16, a3);
    uint64_t v20 = *v8;
    *char v8 = v16;
    swift_bridgeObjectRelease(v20);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(a5, 0LL, 1LL, v18);
  }

  else
  {
    uint64_t v22 = a3(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))( a5,  1LL,  1LL,  v22);
  }

uint64_t sub_1001CA78C(uint64_t a1, uint64_t a2)
{
  return sub_1001C99EC(a1, a2, (void (*)(void))sub_1003AFCB8);
}

uint64_t sub_1001CA798(uint64_t a1, uint64_t a2)
{
  return sub_1001CA7A4(a1, a2, (void (*)(void))sub_1003AFE6C);
}

uint64_t sub_1001CA7A4(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  unint64_t v5 = v3;
  uint64_t v8 = *v5;
  swift_bridgeObjectRetain(*v5);
  unint64_t v9 = sub_1003AD53C(a1, a2);
  LOBYTE(a1) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
  uint64_t v12 = *v5;
  uint64_t v16 = *v5;
  *unint64_t v5 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a3();
    uint64_t v12 = v16;
  }

  swift_bridgeObjectRelease(*(void *)(*(void *)(v12 + 48) + 16 * v9 + 8));
  uint64_t v13 = *(void *)(*(void *)(v12 + 56) + 8 * v9);
  sub_1001CC200(v9, v12);
  uint64_t v14 = *v5;
  *unint64_t v5 = v12;
  swift_bridgeObjectRelease(v14);
  return v13;
}

uint64_t sub_1001CA884@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1001CA04C( a1,  a2,  (uint64_t (*)(void))&type metadata accessor for NWBrowser.Result,  (void (*)(void))sub_1003B001C,  a3);
}

uint64_t sub_1001CA898(uint64_t a1, uint64_t a2)
{
  return sub_1001C99EC(a1, a2, (void (*)(void))sub_1003B028C);
}

uint64_t sub_1001CA8A4(uint64_t a1)
{
  return sub_1001CA8B0(a1, (void (*)(void))sub_1003B05F8);
}

uint64_t sub_1001CA8B0(uint64_t a1, void (*a2)(void))
{
  uint64_t v4 = v2;
  uint64_t v6 = *v4;
  swift_bridgeObjectRetain(*v4);
  unint64_t v7 = sub_1003AD618(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  uint64_t v10 = *v4;
  uint64_t v16 = *v4;
  *uint64_t v4 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a2();
    uint64_t v10 = v16;
  }

  uint64_t v11 = *(void *)(v10 + 48);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))( v11 + *(void *)(*(void *)(v12 - 8) + 72LL) * v7,  v12);
  uint64_t v13 = *(void *)(*(void *)(v10 + 56) + 16 * v7);
  sub_1001CB5BC(v7, v10);
  uint64_t v14 = *v4;
  *uint64_t v4 = v10;
  swift_bridgeObjectRelease(v14);
  return v13;
}

uint64_t sub_1001CA9A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_1003AD53C(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v10 = *v3;
  uint64_t v14 = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1003B0B80();
    uint64_t v10 = v14;
  }

  swift_bridgeObjectRelease(*(void *)(*(void *)(v10 + 48) + 16 * v7 + 8));
  uint64_t v11 = *(void *)(*(void *)(v10 + 56) + 16 * v7);
  sub_1001CBB4C(v7, v10);
  uint64_t v12 = *v3;
  *uint64_t v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_1001CAA84(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  unint64_t v5 = sub_1003AD618(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  char v8 = *v2;
  uint64_t v14 = *v2;
  *uint64_t v2 = (const char *)0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1003B0D40();
    char v8 = v14;
  }

  uint64_t v9 = *((void *)v8 + 6);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))( v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * v5,  v10);
  uint64_t v11 = *(void *)(*((void *)v8 + 7) + 8 * v5);
  sub_1001CB31C(v5, (uint64_t)v8);
  uint64_t v12 = *v2;
  *uint64_t v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_1001CAB5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  char v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_1003AD618(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v10 = *v3;
    uint64_t v21 = *v3;
    *uint64_t v3 = (const char *)0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1003B0F70();
      uint64_t v10 = v21;
    }

    uint64_t v11 = *((void *)v10 + 6);
    uint64_t v12 = type metadata accessor for UUID(0LL);
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))( v11 + *(void *)(*(void *)(v12 - 8) + 72LL) * v7,  v12);
    uint64_t v13 = *((void *)v10 + 7);
    uint64_t v14 = sub_100183098(&qword_1006462F0);
    uint64_t v15 = *(void *)(v14 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 32))(a2, v13 + *(void *)(v15 + 72) * v7, v14);
    sub_1001CCB84( v7,  (uint64_t)v10,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  &qword_100646108,  (uint64_t)&protocol conformance descriptor for UUID,  &qword_1006462F0);
    uint64_t v16 = *v3;
    *uint64_t v3 = v10;
    __n128 v17 = swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, __n128))(v15 + 56))(a2, 0LL, 1LL, v14, v17);
  }

  else
  {
    uint64_t v19 = sub_100183098(&qword_1006462F0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v19 - 8) + 56LL))( a2,  1LL,  1LL,  v19,  v20);
  }

unint64_t sub_1001CACCC(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_1001CE1D0(*(void *)(a2 + 48) + 40 * v6, (uint64_t)v28);
        Swift::Int v10 = AnyHashable._rawHashValue(seed:)(*(void *)(a2 + 40));
        double result = sub_10019154C((uint64_t)v28);
        Swift::Int v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= v11)
          {
LABEL_16:
            uint64_t v14 = *(void *)(a2 + 48);
            unint64_t v15 = v14 + 40 * v3;
            uint64_t v16 = (__int128 *)(v14 + 40 * v6);
            if (v3 != v6 || v15 >= (unint64_t)v16 + 40)
            {
              __int128 v17 = *v16;
              __int128 v18 = v16[1];
              *(void *)(v15 + 32) = *((void *)v16 + 4);
              *(_OWORD *)unint64_t v15 = v17;
              *(_OWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = v18;
            }

            uint64_t v19 = *(void *)(a2 + 56);
            __n128 v20 = (_OWORD *)(v19 + 32 * v3);
            uint64_t v21 = (_OWORD *)(v19 + 32 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 2))
            {
              __int128 v9 = v21[1];
              _OWORD *v20 = *v21;
              v20[1] = v9;
              int64_t v3 = v6;
            }
          }
        }

        else if (v11 >= v8 || v3 >= v11)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1LL << result) - 1;
  }

  *uint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1LL);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_1001CAE94(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v38 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v37 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v38 + 72);
      unint64_t v36 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = v8;
        uint64_t v15 = v12;
        int64_t v16 = v12 * v10;
        uint64_t v17 = v13;
        v36(v7, *(void *)(a2 + 48) + v12 * v10, v4);
        uint64_t v18 = *(void *)(a2 + 40);
        uint64_t v19 = sub_100183F14( &qword_100646250,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v7, v4);
        uint64_t v13 = v17;
        unint64_t v21 = v20 & v17;
        if (a1 >= (uint64_t)v37)
        {
          if (v21 >= v37 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v24 = *(void *)(a2 + 48);
            unint64_t result = v24 + v15 * a1;
            uint64_t v25 = v24 + v16;
            uint64_t v8 = v14;
            if (v15 * a1 < v16 || (uint64_t v12 = v15, result >= v25 + v15))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v25, 1LL, v4);
LABEL_21:
              uint64_t v13 = v17;
              uint64_t v12 = v15;
            }

            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }

            uint64_t v26 = *(void *)(a2 + 56);
            uint64_t v27 = (void *)(v26 + 8 * a1);
            BOOL v28 = (void *)(v26 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= v28 + 1))
            {
              *uint64_t v27 = *v28;
              a1 = v10;
            }

            goto LABEL_5;
          }
        }

        else if (v21 >= v37 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }

        uint64_t v8 = v14;
        uint64_t v12 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v13;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    uint64_t v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1LL << a1) - 1;
  }

  else
  {
    uint64_t v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1LL << a1) - 1;
  }

  *uint64_t v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1LL);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_1001CB134(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v11 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v12 = *v11;
        uint64_t v13 = v11[1];
        Hasher.init(_seed:)(v28);
        swift_bridgeObjectRetain(v13);
        String.hash(into:)(v28, v12, v13);
        Swift::Int v14 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease(v13);
        unint64_t v15 = v14 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v15 < v8) {
            goto LABEL_5;
          }
        }

        else if (v15 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v15)
        {
LABEL_11:
          uint64_t v16 = *(void *)(a2 + 48);
          uint64_t v17 = (_OWORD *)(v16 + 16 * v3);
          uint64_t v18 = (_OWORD *)(v16 + 16 * v6);
          if (v3 != v6 || v17 >= v18 + 1) {
            *uint64_t v17 = *v18;
          }
          uint64_t v19 = *(void *)(a2 + 56);
          uint64_t v20 = (__int128 *)(v19 + 48 * v3);
          unint64_t v21 = (__int128 *)(v19 + 48 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 3))
          {
            __int128 v9 = *v21;
            __int128 v10 = v21[2];
            v20[1] = v21[1];
            _OWORD v20[2] = v10;
            __int128 *v20 = v9;
            int64_t v3 = v6;
          }
        }

unint64_t sub_1001CB31C(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v38 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v37 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v38 + 72);
      unint64_t v36 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = v8;
        uint64_t v15 = v12;
        int64_t v16 = v12 * v10;
        uint64_t v17 = v13;
        v36(v7, *(void *)(a2 + 48) + v12 * v10, v4);
        uint64_t v18 = *(void *)(a2 + 40);
        uint64_t v19 = sub_100183F14( &qword_100646108,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v7, v4);
        uint64_t v13 = v17;
        unint64_t v21 = v20 & v17;
        if (a1 >= (uint64_t)v37)
        {
          if (v21 >= v37 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v24 = *(void *)(a2 + 48);
            unint64_t result = v24 + v15 * a1;
            uint64_t v25 = v24 + v16;
            uint64_t v8 = v14;
            if (v15 * a1 < v16 || (uint64_t v12 = v15, result >= v25 + v15))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v25, 1LL, v4);
LABEL_21:
              uint64_t v13 = v17;
              uint64_t v12 = v15;
            }

            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }

            uint64_t v26 = *(void *)(a2 + 56);
            uint64_t v27 = (void *)(v26 + 8 * a1);
            BOOL v28 = (void *)(v26 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= v28 + 1))
            {
              *uint64_t v27 = *v28;
              a1 = v10;
            }

            goto LABEL_5;
          }
        }

        else if (v21 >= v37 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }

        uint64_t v8 = v14;
        uint64_t v12 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v13;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    uint64_t v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1LL << a1) - 1;
  }

  else
  {
    uint64_t v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1LL << a1) - 1;
  }

  *uint64_t v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1LL);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_1001CB5BC(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v38 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v37 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v38 + 72);
      unint64_t v36 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = v8;
        uint64_t v15 = v12;
        int64_t v16 = v12 * v10;
        uint64_t v17 = v13;
        v36(v7, *(void *)(a2 + 48) + v12 * v10, v4);
        uint64_t v18 = *(void *)(a2 + 40);
        uint64_t v19 = sub_100183F14( &qword_100646108,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v7, v4);
        uint64_t v13 = v17;
        unint64_t v21 = v20 & v17;
        if (a1 >= (uint64_t)v37)
        {
          if (v21 >= v37 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v24 = *(void *)(a2 + 48);
            unint64_t result = v24 + v15 * a1;
            uint64_t v25 = v24 + v16;
            uint64_t v8 = v14;
            if (v15 * a1 < v16 || (uint64_t v12 = v15, result >= v25 + v15))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v25, 1LL, v4);
LABEL_21:
              uint64_t v13 = v17;
              uint64_t v12 = v15;
            }

            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }

            uint64_t v26 = *(void *)(a2 + 56);
            uint64_t v27 = (_OWORD *)(v26 + 16 * a1);
            BOOL v28 = (_OWORD *)(v26 + 16 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= v28 + 1))
            {
              *uint64_t v27 = *v28;
              a1 = v10;
            }

            goto LABEL_5;
          }
        }

        else if (v21 >= v37 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }

        uint64_t v8 = v14;
        uint64_t v12 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v13;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    uint64_t v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1LL << a1) - 1;
  }

  else
  {
    uint64_t v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1LL << a1) - 1;
  }

  *uint64_t v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1LL);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_1001CB85C(int64_t a1, uint64_t a2)
{
  return sub_1001CB880( a1,  a2,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier,  &qword_100646250,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier,  (uint64_t (*)(void))&type metadata accessor for SFAirDropReceive.Transfer);
}

unint64_t sub_1001CB880( int64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5, uint64_t (*a6)(void))
{
  uint64_t v46 = a6;
  uint64_t v50 = a4;
  uint64_t v51 = a5;
  uint64_t v49 = a3;
  uint64_t v8 = a3(0LL);
  uint64_t v52 = *(void *)(v8 - 8);
  unint64_t result = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v45 - v10;
  uint64_t v12 = a2 + 64;
  uint64_t v13 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v14 = (a1 + 1) & ~v13;
  if (((1LL << v14) & *(void *)(a2 + 64 + 8 * (v14 >> 6))) != 0)
  {
    uint64_t v15 = ~v13;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v13);
    if ((*(void *)(v12 + 8 * (v14 >> 6)) & (1LL << v14)) != 0)
    {
      unint64_t v48 = (result + 1) & v15;
      uint64_t v16 = *(void *)(v52 + 72);
      char v47 = *(void (**)(char *, unint64_t, uint64_t))(v52 + 16);
      uint64_t v17 = v15;
      do
      {
        uint64_t v18 = v12;
        uint64_t v19 = v16;
        int64_t v20 = v16 * v14;
        v47(v11, *(void *)(a2 + 48) + v16 * v14, v8);
        uint64_t v21 = v17;
        uint64_t v22 = *(void *)(a2 + 40);
        uint64_t v23 = sub_100183F14(v50, v49, v51);
        uint64_t v24 = dispatch thunk of Hashable._rawHashValue(seed:)(v22, v8, v23);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v11, v8);
        unint64_t v25 = v24 & v21;
        uint64_t v17 = v21;
        if (a1 >= (uint64_t)v48)
        {
          if (v25 >= v48 && a1 >= (uint64_t)v25)
          {
LABEL_16:
            uint64_t v28 = *(void *)(a2 + 48);
            unint64_t v29 = v28 + v19 * a1;
            uint64_t v30 = v28 + v20;
            if (v19 * a1 < v20 || v29 >= v30 + v19)
            {
              swift_arrayInitWithTakeFrontToBack(v29, v30, 1LL, v8);
            }

            else if (v19 * a1 != v20)
            {
              swift_arrayInitWithTakeBackToFront(v29);
            }

            uint64_t v31 = *(void *)(a2 + 56);
            uint64_t v32 = v46(0LL);
            uint64_t v33 = *(void *)(*(void *)(v32 - 8) + 72LL);
            int64_t v34 = v33 * a1;
            unint64_t result = v31 + v33 * a1;
            int64_t v35 = v33 * v14;
            uint64_t v36 = v31 + v33 * v14;
            unint64_t v37 = v36 + v33;
            BOOL v38 = v34 < v35 || result >= v37;
            uint64_t v12 = v18;
            if (v38)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v36, 1LL, v32);
              a1 = v14;
              uint64_t v17 = v21;
            }

            else
            {
              a1 = v14;
              uint64_t v17 = v21;
              if (v34 != v35)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront(result);
                a1 = v14;
              }
            }

            goto LABEL_5;
          }
        }

        else if (v25 >= v48 || a1 >= (uint64_t)v25)
        {
          goto LABEL_16;
        }

        uint64_t v12 = v18;
LABEL_5:
        unint64_t v14 = (v14 + 1) & v17;
        uint64_t v16 = v19;
      }

      while (((*(void *)(v12 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) != 0);
    }

    uint64_t v39 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v40 = *v39;
    uint64_t v41 = (-1LL << a1) - 1;
  }

  else
  {
    uint64_t v39 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v41 = *v39;
    uint64_t v40 = (-1LL << a1) - 1;
  }

  uint64_t *v39 = v41 & v40;
  uint64_t v42 = *(void *)(a2 + 16);
  BOOL v43 = __OFSUB__(v42, 1LL);
  uint64_t v44 = v42 - 1;
  if (v43)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v44;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_1001CBB4C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v26);
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (_OWORD *)(v17 + 16 * v3);
          uint64_t v19 = (_OWORD *)(v17 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *uint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }

unint64_t sub_1001CBD20(int64_t a1, uint64_t a2)
{
  return sub_1001CB880( a1,  a2,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier,  &qword_100646250,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier,  (uint64_t (*)(void))&type metadata accessor for SFAirDropSend.Transfer);
}

unint64_t sub_1001CBD44(int64_t a1, uint64_t a2)
{
  return sub_1001CB880( a1,  a2,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  &qword_100646108,  (uint64_t)&protocol conformance descriptor for UUID,  (uint64_t (*)(void))&type metadata accessor for SFNWInterfaceType);
}

unint64_t sub_1001CBD68(unint64_t a1, uint64_t a2)
{
  return sub_1001CC5E0(a1, a2, type metadata accessor for RegistrationState);
}

unint64_t sub_1001CBD74(unint64_t a1, uint64_t a2)
{
  return sub_1001CC5E0(a1, a2, (uint64_t (*)(void))&type metadata accessor for Date);
}

unint64_t sub_1001CBD80(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v40 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v39 = (result + 1) & v11;
      uint64_t v12 = *(void *)(v40 + 72);
      BOOL v38 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 16);
      uint64_t v13 = v11;
      do
      {
        uint64_t v14 = v8;
        uint64_t v15 = v12;
        int64_t v16 = v12 * v10;
        uint64_t v17 = v13;
        v38(v7, *(void *)(a2 + 48) + v12 * v10, v4);
        uint64_t v18 = *(void *)(a2 + 40);
        uint64_t v19 = sub_100183F14( &qword_100646108,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v7, v4);
        uint64_t v13 = v17;
        unint64_t v21 = v20 & v17;
        if (a1 >= (uint64_t)v39)
        {
          if (v21 >= v39 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            uint64_t v24 = *(void *)(a2 + 48);
            unint64_t result = v24 + v15 * a1;
            uint64_t v25 = v24 + v16;
            uint64_t v8 = v14;
            if (v15 * a1 < v16 || (uint64_t v12 = v15, result >= v25 + v15))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v25, 1LL, v4);
LABEL_21:
              uint64_t v13 = v17;
              uint64_t v12 = v15;
            }

            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront(result);
              goto LABEL_21;
            }

            uint64_t v26 = *(void *)(a2 + 56);
            unint64_t v27 = v26 + 40 * a1;
            uint64_t v28 = (__int128 *)(v26 + 40 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= (unint64_t)v28 + 40))
            {
              __int128 v29 = *v28;
              __int128 v30 = v28[1];
              *(void *)(v27 + 32) = *((void *)v28 + 4);
              *(_OWORD *)unint64_t v27 = v29;
              *(_OWORD *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = v30;
              a1 = v10;
            }

            goto LABEL_5;
          }
        }

        else if (v21 >= v39 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }

        uint64_t v8 = v14;
        uint64_t v12 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v13;
      }

      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    uint64_t v31 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v31;
    uint64_t v33 = (-1LL << a1) - 1;
  }

  else
  {
    uint64_t v31 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v33 = *v31;
    uint64_t v32 = (-1LL << a1) - 1;
  }

  *uint64_t v31 = v33 & v32;
  uint64_t v34 = *(void *)(a2 + 16);
  BOOL v35 = __OFSUB__(v34, 1LL);
  uint64_t v36 = v34 - 1;
  if (v35)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v36;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_1001CC02C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v26);
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          int64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (_BYTE *)(v17 + v3);
          uint64_t v19 = (_BYTE *)(v17 + v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *uint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }

unint64_t sub_1001CC200(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v26);
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          int64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (void *)(v17 + 8 * v3);
          uint64_t v19 = (void *)(v17 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *uint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }

void sub_1001CC3D4(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      while (1)
      {
        uint64_t v10 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        Swift::Int v12 = (const char *)v10[1];
        Hasher.init(_seed:)(v33);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v33, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        unint64_t v14 = v13 & v7;
        if (v14 < v9) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v15 = *(void *)(a2 + 48);
        int64_t v16 = (_OWORD *)(v15 + 16 * v3);
        uint64_t v17 = (_OWORD *)(v15 + 16 * v6);
        if (v3 != v6 || v16 >= v17 + 1) {
          *int64_t v16 = *v17;
        }
        uint64_t v18 = *(void *)(a2 + 56);
        uint64_t v19 = sub_100183098(&qword_10064DB00);
        uint64_t v20 = *(void *)(*(void *)(v19 - 8) + 72LL);
        int64_t v21 = v20 * v3;
        unint64_t v22 = v18 + v20 * v3;
        int64_t v23 = v20 * v6;
        uint64_t v24 = v18 + v20 * v6;
        unint64_t v25 = v24 + v20;
        if (v21 < v23 || v22 >= v25)
        {
          swift_arrayInitWithTakeFrontToBack(v22, v24, 1LL, v19);
        }

        else
        {
          int64_t v3 = v6;
          if (v21 == v23) {
            goto LABEL_6;
          }
          swift_arrayInitWithTakeBackToFront(v22);
        }

        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }

      if (v14 < v9) {
        goto LABEL_6;
      }
LABEL_11:
      goto LABEL_12;
    }

unint64_t sub_1001CC5E0(unint64_t result, uint64_t a2, uint64_t (*a3)(void))
{
  int64_t v4 = result;
  uint64_t v5 = a2 + 64;
  uint64_t v6 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v7 = (result + 1) & ~v6;
  if (((1LL << v7) & *(void *)(a2 + 64 + 8 * (v7 >> 6))) != 0)
  {
    uint64_t v9 = ~v6;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v6);
    if ((*(void *)(v5 + 8 * (v7 >> 6)) & (1LL << v7)) != 0)
    {
      unint64_t v10 = (result + 1) & v9;
      while (1)
      {
        uint64_t v11 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v7);
        uint64_t v12 = *v11;
        uint64_t v13 = v11[1];
        Hasher.init(_seed:)(v31);
        swift_bridgeObjectRetain(v13);
        String.hash(into:)(v31, v12, v13);
        Swift::Int v14 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease(v13);
        unint64_t v15 = v14 & v9;
        if (v15 < v10) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v16 = *(void *)(a2 + 48);
        uint64_t v17 = (_OWORD *)(v16 + 16 * v4);
        uint64_t v18 = (_OWORD *)(v16 + 16 * v7);
        if (v4 != v7 || v17 >= v18 + 1) {
          *uint64_t v17 = *v18;
        }
        uint64_t v19 = *(void *)(a2 + 56);
        uint64_t v20 = *(void *)(*(void *)(a3(0LL) - 8) + 72LL);
        int64_t v21 = v20 * v4;
        unint64_t result = v19 + v20 * v4;
        int64_t v22 = v20 * v7;
        unint64_t v23 = v19 + v20 * v7 + v20;
        if (v21 < v22 || result >= v23)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }

        else
        {
          int64_t v4 = v7;
          if (v21 == v22) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }

        int64_t v4 = v7;
LABEL_6:
        unint64_t v7 = (v7 + 1) & v9;
        if (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) == 0) {
          goto LABEL_21;
        }
      }

      if (v15 < v10) {
        goto LABEL_6;
      }
LABEL_11:
      goto LABEL_12;
    }

unint64_t sub_1001CC7E8(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        unint64_t v11 = v9[1];
        Hasher.init(_seed:)(v26);
        sub_10019BA8C(v10, v11);
        Data.hash(into:)(v26, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        unint64_t result = sub_100189B20(v10, v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          unint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *unint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (void *)(v17 + 8 * v3);
          uint64_t v19 = (void *)(v17 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *uint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }

unint64_t sub_1001CC9CC(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::UInt v9 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)(v23);
        Hasher._combine(_:)(v9);
        unint64_t result = Hasher._finalize()();
        unint64_t v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }

        else if (v10 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          Swift::Int v12 = (void *)(v11 + 8 * v3);
          unint64_t v13 = (void *)(v11 + 8 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *Swift::Int v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          unint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *unint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }

unint64_t sub_1001CCB84( int64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v46 = a6;
  uint64_t v50 = a4;
  uint64_t v51 = a5;
  uint64_t v49 = a3;
  uint64_t v8 = a3(0LL);
  uint64_t v52 = *(void *)(v8 - 8);
  unint64_t result = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v45 - v10;
  uint64_t v12 = a2 + 64;
  uint64_t v13 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v14 = (a1 + 1) & ~v13;
  if (((1LL << v14) & *(void *)(a2 + 64 + 8 * (v14 >> 6))) != 0)
  {
    uint64_t v15 = ~v13;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v13);
    if ((*(void *)(v12 + 8 * (v14 >> 6)) & (1LL << v14)) != 0)
    {
      unint64_t v48 = (result + 1) & v15;
      uint64_t v16 = *(void *)(v52 + 72);
      char v47 = *(void (**)(char *, unint64_t, uint64_t))(v52 + 16);
      uint64_t v17 = v15;
      do
      {
        uint64_t v18 = v12;
        uint64_t v19 = v16;
        int64_t v20 = v16 * v14;
        v47(v11, *(void *)(a2 + 48) + v16 * v14, v8);
        uint64_t v21 = v17;
        uint64_t v22 = *(void *)(a2 + 40);
        uint64_t v23 = sub_100183F14(v50, v49, v51);
        uint64_t v24 = dispatch thunk of Hashable._rawHashValue(seed:)(v22, v8, v23);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v11, v8);
        unint64_t v25 = v24 & v21;
        uint64_t v17 = v21;
        if (a1 >= (uint64_t)v48)
        {
          if (v25 >= v48 && a1 >= (uint64_t)v25)
          {
LABEL_16:
            uint64_t v28 = *(void *)(a2 + 48);
            unint64_t v29 = v28 + v19 * a1;
            uint64_t v30 = v28 + v20;
            if (v19 * a1 < v20 || v29 >= v30 + v19)
            {
              swift_arrayInitWithTakeFrontToBack(v29, v30, 1LL, v8);
            }

            else if (v19 * a1 != v20)
            {
              swift_arrayInitWithTakeBackToFront(v29);
            }

            uint64_t v31 = *(void *)(a2 + 56);
            uint64_t v32 = sub_100183098(v46);
            uint64_t v33 = *(void *)(*(void *)(v32 - 8) + 72LL);
            int64_t v34 = v33 * a1;
            unint64_t result = v31 + v33 * a1;
            int64_t v35 = v33 * v14;
            uint64_t v36 = v31 + v33 * v14;
            unint64_t v37 = v36 + v33;
            BOOL v38 = v34 < v35 || result >= v37;
            uint64_t v12 = v18;
            if (v38)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v36, 1LL, v32);
              a1 = v14;
              uint64_t v17 = v21;
            }

            else
            {
              a1 = v14;
              uint64_t v17 = v21;
              if (v34 != v35)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront(result);
                a1 = v14;
              }
            }

            goto LABEL_5;
          }
        }

        else if (v25 >= v48 || a1 >= (uint64_t)v25)
        {
          goto LABEL_16;
        }

        uint64_t v12 = v18;
LABEL_5:
        unint64_t v14 = (v14 + 1) & v17;
        uint64_t v16 = v19;
      }

      while (((*(void *)(v12 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) != 0);
    }

    unint64_t v39 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v40 = *v39;
    uint64_t v41 = (-1LL << a1) - 1;
  }

  else
  {
    unint64_t v39 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v41 = *v39;
    uint64_t v40 = (-1LL << a1) - 1;
  }

  uint64_t *v39 = v41 & v40;
  uint64_t v42 = *(void *)(a2 + 16);
  BOOL v43 = __OFSUB__(v42, 1LL);
  uint64_t v44 = v42 - 1;
  if (v43)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v44;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

_OWORD *sub_1001CCE4C(__int128 *a1, _OWORD *a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

char *sub_1001CCE64(uint64_t a1)
{
  return sub_10018BD88(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1001CCE78(unint64_t a1)
{
  return sub_10018BE94(0, *(void *)(a1 + 16), 0, a1);
}

unint64_t sub_1001CCE8C()
{
  unint64_t result = qword_100651A40;
  if (!qword_100651A40)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100651A40);
  }

  return result;
}

char *sub_1001CCED0(uint64_t a1)
{
  return sub_10018C0B4(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_1001CCEE4(uint64_t a1)
{
  return sub_10018C758(0LL, *(void *)(a1 + 16), 0, a1);
}

void *sub_1001CCEF8(void *a1)
{
  return sub_10018C5F0(0LL, a1[2], 0, a1);
}

void *sub_1001CCF0C(void *a1)
{
  return sub_10018C604(0LL, a1[2], 0, a1);
}

void *sub_1001CCF20(void *a1)
{
  return sub_10018C898(0LL, a1[2], 0, a1);
}

void *sub_1001CCF34(void *a1)
{
  return sub_10018C8AC(0LL, a1[2], 0, a1);
}

uint64_t sub_1001CCF4C(unint64_t a1)
{
  return sub_10018C9F4(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_1001CCF60(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v2, 0LL, a1);
}

void *sub_1001CCFC8(uint64_t a1)
{
  return sub_10018CB48(0LL, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_1001CCFDC(uint64_t a1, int *a2)
{
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  __int128 v3 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 24) = v3;
  *__int128 v3 = v2;
  v3[1] = sub_1001CD044;
  return v5(v2 + 32);
}

uint64_t sub_1001CD044()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(_BYTE **)(*v0 + 16);
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 24));
  *uint64_t v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

BOOL sub_1001CD094(uint64_t a1)
{
  uint64_t v2 = (int *)type metadata accessor for SDNearFieldTap(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v5 = objc_allocWithZone(&OBJC_CLASS___NSUserDefaults);
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 initWithSuiteName:v6];

  if (v7)
  {
    NSString v8 = String._bridgeToObjectiveC()();
    unsigned __int8 v9 = [v7 BOOLForKey:v8];

    if ((v9 & 1) != 0) {
      return 1LL;
    }
  }

  if ((*(_BYTE *)(a1 + v2[12]) & 1) != 0) {
    return 0LL;
  }
  int v11 = *(unsigned __int8 *)(a1 + v2[17]);
  if (v11 == 2) {
    return 0LL;
  }
  sub_1001A4B84(a1, (uint64_t)v4, type metadata accessor for SDNearFieldTap);
  if ((v11 & 1) != 0)
  {
    uint64_t v12 = *(void *)&v4[v2[6] + 8];
    sub_1001A4BC8((uint64_t)v4, type metadata accessor for SDNearFieldTap);
    return v12 == 0;
  }

  else
  {
    sub_1001A4BC8((uint64_t)v4, type metadata accessor for SDNearFieldTap);
    return 1LL;
  }

void sub_1001CD214()
{
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldControllerIsAvailable) != 1)
  {
    if (qword_100643EB8 != -1) {
      swift_once(&qword_100643EB8, sub_1001B3AC8);
    }
    uint64_t v3 = type metadata accessor for Logger(0LL);
    uint64_t v4 = sub_100186DE4(v3, (uint64_t)qword_100645E00);
    osos_log_t log = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      NSString v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)NSString v6 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  oslog,  v5,  "SDAirDropNearFieldService nearFieldController is NOT available",  v6,  2u);
      swift_slowDealloc(v6, -1LL, -1LL);
    }

    id v7 = oslog;
    goto LABEL_14;
  }

  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController;
  if (!*(void *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_nearFieldController))
  {
    if (qword_100643EB8 != -1) {
      swift_once(&qword_100643EB8, sub_1001B3AC8);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    uint64_t v9 = sub_100186DE4(v8, (uint64_t)qword_100645E00);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "SDAirDropNearFieldService nearFieldController is available",  v12,  2u);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    id v13 = [objc_allocWithZone((Class)SDRPNearFieldController) initWithDispatchQueue:*(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropNearFieldService_queue) delegate:v1];
    id v7 = *(os_log_s **)(v1 + v2);
    *(void *)(v1 + sub_10004D1BC((void *)&_mh_execute_header, v0, v1, "Failed to register wifi monitor %@\n", v2) = v13;
LABEL_14:
  }

uint64_t sub_1001CD414()
{
  uint64_t v1 = type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  uint64_t v7 = v0 + v4;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  swift_unknownObjectRelease(*(void *)(v7 + *(int *)(v1 + 20)));
  sub_100189B20(*(void *)(v7 + *(int *)(v1 + 24)), *(void *)(v7 + *(int *)(v1 + 24) + 8));
  return swift_deallocObject(v0, v5, v6);
}

void sub_1001CD4BC()
{
}

uint64_t sub_1001CD4F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100183098(&qword_100646138);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001CD538(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_100183124(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1001CD578()
{
  return swift_deallocObject(v0, 25LL, 7LL);
}

id sub_1001CD59C()
{
  uint64_t v1 = *(void **)(v0 + 16);
  int v2 = *(unsigned __int8 *)(v0 + 24);
  id result = [v1 stop];
  if (v2 == 1) {
    return [v1 invalidate];
  }
  return result;
}

uint64_t sub_1001CD5F0(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  char v6 = *(_BYTE *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = (void *)swift_task_alloc(dword_1006461C4);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100195708;
  return sub_1001C4CE0(a1, v4, v5, v6, v7);
}

uint64_t sub_1001CD670(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_1006461E4);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100195708;
  return sub_1001C5384(a1, v4, v5, v7, v6);
}

uint64_t sub_1001CD6E8()
{
  uint64_t v18 = type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType(0LL);
  uint64_t v0 = *(void *)(v18 - 8);
  unint64_t v1 = (*(unsigned __int8 *)(v0 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = (int *)type metadata accessor for SDNearFieldTap(0LL);
  uint64_t v4 = *((void *)v3 - 1);
  unint64_t v5 = (v1 + v2 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v22 = v6;
  uint64_t v23 = type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0LL);
  uint64_t v7 = *(void *)(v23 - 8);
  unint64_t v21 = (v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v20 = *(void *)(v9 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v11 = *(void *)(v20 + 64);
  unint64_t v12 = (v21 + v8 + v10) & ~v10;
  unint64_t v13 = (v11 + v10 + v12) & ~v10;
  uint64_t v24 = v13 + v11;
  (*(void (**)(unint64_t, uint64_t))(v0 + 8))(v19 + v1, v18);
  uint64_t v14 = v19 + v5;
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v19 + v5, v15);
  swift_bridgeObjectRelease(*(void *)(v19 + v5 + v3[5] + 8));
  swift_bridgeObjectRelease(*(void *)(v19 + v5 + v3[6] + 8));
  swift_bridgeObjectRelease(*(void *)(v19 + v5 + v3[7] + 8));
  swift_bridgeObjectRelease(*(void *)(v19 + v5 + v3[8] + 8));
  swift_bridgeObjectRelease(*(void *)(v19 + v5 + v3[9] + 8));
  swift_bridgeObjectRelease(*(void *)(v19 + v5 + v3[10] + 8));
  sub_100189B20(*(void *)(v14 + v3[13]), *(void *)(v14 + v3[13] + 8));
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  v16(v14 + v3[14], v9);
  v16(v14 + v3[15], v9);

  v16(v19 + v21, v9);
  swift_unknownObjectRelease(*(void *)(v19 + v21 + *(int *)(v23 + 20)));
  sub_100189B20(*(void *)(v19 + v21 + *(int *)(v23 + 24)), *(void *)(v19 + v21 + *(int *)(v23 + 24) + 8));
  v16(v19 + v12, v9);
  v16(v19 + v13, v9);
  return swift_deallocObject(v19, v24);
}

void sub_1001CD928()
{
  uint64_t v1 = *(void *)(type metadata accessor for SFAirDrop.NearbySharingInteraction.ConnectionContext.InteractionType(0LL)
                 - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for SDNearFieldTap(0LL) - 8);
  unint64_t v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = *(void *)(type metadata accessor for SDAirDropNearFieldService.LocalExchangePayload(0LL) - 8);
  unint64_t v8 = (v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  sub_1001BDF24( v0 + v2,  v0 + v5,  *(char **)(v0 + v6),  v0 + v8,  v0 + ((v8 + v9 + v11) & ~v11),  v0 + ((*(void *)(v10 + 64) + v11 + ((v8 + v9 + v11) & ~v11)) & ~v11));
}

uint64_t sub_1001CD9FC()
{
  uint64_t v1 = type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001CDA78(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(type metadata accessor for SFAirDrop.NearbySharingInteraction.FailureType(0LL)
                                      - 8)
                          + 80LL);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  uint64_t v9 = (void *)swift_task_alloc(dword_1006461FC);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100195708;
  return sub_1001BEA20(a1, v5, v6, v7, v8);
}

uint64_t sub_1001CDB0C()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  uint64_t v8 = v7 + v5;
  swift_unknownObjectRelease(*(void *)(v0 + 16));

  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  return swift_deallocObject(v0, v8, v6);
}

uint64_t sub_1001CDBA8(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 40) & ~v5;
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = (uint64_t)v1 + v6;
  uint64_t v11 = (uint64_t)v1 + ((*(void *)(v4 + 64) + v5 + v6) & ~v5);
  unint64_t v12 = (void *)swift_task_alloc(dword_100646224);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v12;
  *unint64_t v12 = v2;
  v12[1] = sub_100195708;
  return sub_1001BEF08(a1, v7, v8, v9, v10, v11);
}

uint64_t sub_1001CDC54(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_100646244);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100195708;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100646240 + dword_100646240))(a1, v4);
}

uint64_t sub_1001CDCC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100183098(&qword_100645EE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001CDD10()
{
  return sub_1001CDDBC(sub_1001C6CC0);
}

uint64_t sub_1001CDD1C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001CDD40()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_10064626C);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100195708;
  return sub_1001C79C8();
}

uint64_t sub_1001CDDA4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1001CDDB0()
{
  return sub_1001CDDBC((uint64_t (*)(void, uint64_t))sub_1001C7A1C);
}

uint64_t sub_1001CDDBC(uint64_t (*a1)(void, uint64_t))
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  return a1(*(void *)(v1 + 16), v1 + ((v2 + 24) & ~v2));
}

uint64_t sub_1001CDE00()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001CDE74()
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((v2 + 24) & ~v2);
  uint64_t v5 = (void *)swift_task_alloc(dword_100646284);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100195708;
  return sub_1001C7BA8(v3, v4);
}

uint64_t sub_1001CDEE0(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_10064E114);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100195708;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10064E110 + dword_10064E110))(a1, v4);
}

uint64_t sub_1001CDF50()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001CDFC4()
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((v2 + 24) & ~v2);
  uint64_t v5 = (void *)swift_task_alloc(dword_10064629C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100195708;
  return sub_1001C6E6C(v3, v4);
}

uint64_t sub_1001CE030()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001CE058()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1006462E4);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100195708;
  return sub_1001C6C68();
}

uint64_t sub_1001CE0C4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1001CE0D0(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  return a2;
}

uint64_t sub_1001CE0E8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1006462FC);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100195708;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1006462F8 + dword_1006462F8))(a1, v4);
}

uint64_t sub_1001CE158(uint64_t a1)
{
  return sub_1001BF164(a1, v1);
}

uint64_t sub_1001CE164(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_10064631C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100195708;
  return sub_1001C05FC(a1, v4, v5, v6);
}

uint64_t sub_1001CE1D0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1001CE210(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_10064632C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100195708;
  return sub_1001C6654(a1, v4, v5, v7, v6);
}

uint64_t sub_1001CE288()
{
  return sub_1001CE54C((void (*)(void))&_swift_unknownObjectRelease, 56LL);
}

uint64_t sub_1001CE298(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc(dword_10064633C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_1001943E8;
  return sub_1001C5E50(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1001CE318(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100183098(&qword_100646560);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v8 = qword_100643F28;
  swift_unknownObjectRetain(a1);
  id v9 = a2;
  if (v8 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v10 = static AirDropActor.shared;
  uint64_t v11 = sub_100183F14( (unint64_t *)&qword_100656410,  (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor,  (uint64_t)&protocol conformance descriptor for AirDropActor);
  unint64_t v12 = (void *)swift_allocObject(&unk_1005D38F8, 48LL, 7LL);
  v12[2] = v10;
  uint64_t v12[3] = v11;
  uint64_t v12[4] = a1;
  void v12[5] = v9;
  swift_retain(v10);
  uint64_t v13 = sub_1001B36B8((uint64_t)v6, (uint64_t)&unk_100646348, (uint64_t)v12, (uint64_t)&type metadata for () + 8);
  return swift_release(v13);
}

uint64_t sub_1001CE45C()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1001CE490(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_1006461E4);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1001943E8;
  return sub_1001C5384(a1, v4, v5, v7, v6);
}

uint64_t sub_1001CE510()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1001CE53C()
{
  return sub_1001CE54C((void (*)(void))&_swift_errorRelease, 64LL);
}

uint64_t sub_1001CE54C(void (*a1)(void), uint64_t a2)
{
  return swift_deallocObject(v2, a2, 7LL);
}

uint64_t sub_1001CE5A0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  id v9 = (void *)swift_task_alloc(dword_100646364);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  *id v9 = v2;
  v9[1] = sub_100195708;
  return sub_1001C4724(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1001CE630(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_100646374);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100195708;
  return sub_1001C0BF4(a1, v4, v5, v6);
}

uint64_t sub_1001CE6A0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_100646384);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100195708;
  return sub_1001C09A8(a1, v4, v5, v6);
}

uint64_t sub_1001CE710(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_100646394);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100195708;
  return sub_1001C0408(a1, v4, v5, v6);
}

uint64_t sub_1001CE780(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1006463A4);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100195708;
  return sub_1001C003C(a1, v4, v5, v6);
}

uint64_t sub_1001CE7F0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1006463B4);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100195708;
  return sub_1001BFC90(a1, v4, v5, v6);
}

uint64_t sub_1001CE860(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1006463C4);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100195708;
  return sub_1001BFAC4(a1, v4, v5, v6);
}

uint64_t sub_1001CE8D0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1006463D4);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100195708;
  return sub_1001BF520(a1, v4, v5, v6);
}

uint64_t sub_1001CE940()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1001CE96C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1006463E4);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100195708;
  return sub_1001BF2E0(a1, v4, v5, v6);
}

uint64_t sub_1001CEA20()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100186DFC(v0, qword_100646400);
  uint64_t v1 = sub_100186DE4(v0, (uint64_t)qword_100646400);
  if (qword_100643FD8 != -1) {
    swift_once(&qword_100643FD8, sub_10023A408);
  }
  uint64_t v2 = sub_100186DE4(v0, (uint64_t)qword_1006695F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_1001CEB18()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = swift_allocObject(&unk_1005D3AF0, 24LL, 7LL);
  *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
  aBlock[4] = sub_1001D226C;
  uint64_t v18 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001B9FE4;
  aBlock[3] = &unk_1005D3B08;
  uint64_t v10 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v0);
  uint64_t v16 = _swiftEmptyArrayStorage;
  uint64_t v11 = sub_100183F14( (unint64_t *)&qword_100646510,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v12 = sub_100183098((uint64_t *)&unk_1006460D0);
  unint64_t v13 = sub_1001D228C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v4, v10);
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v18);
}

void sub_1001CECE8(uint64_t a1)
{
  uint64_t v40 = type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation(0LL);
  uint64_t v38 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100183098(&qword_100646528);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (int64_t *)((char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v5);
  uint64_t v9 = (const char **)((char *)&v34 - v8);
  uint64_t v10 = (const char **)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_continuations);
  *(void *)&double v11 = swift_beginAccess(v10, v41, 1LL, 0LL).n128_u64[0];
  uint64_t v12 = *v10;
  uint64_t v14 = *v10 + 64;
  uint64_t v13 = *v14;
  int64_t v35 = v10;
  uint64_t v36 = v14;
  uint64_t v15 = 1LL << v12[32];
  uint64_t v16 = -1LL;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  unint64_t v17 = v16 & v13;
  int64_t v37 = (unint64_t)(v15 + 63) >> 6;
  swift_bridgeObjectRetain(v12, v11, v37 - 1);
  int64_t v18 = 0LL;
  unint64_t v39 = (char *)&type metadata for () + 8;
  if (!v17) {
    goto LABEL_8;
  }
LABEL_6:
  unint64_t v20 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  unint64_t v21 = v20 | (v18 << 6);
  while (2)
  {
    uint64_t v22 = *((void *)v12 + 7);
    uint64_t v23 = (void *)(*((void *)v12 + 6) + 16 * v21);
    uint64_t v24 = (const char *)v23[1];
    *uint64_t v7 = *v23;
    v7[1] = v24;
    uint64_t v25 = v22 + *(void *)(v38 + 72) * v21;
    uint64_t v26 = sub_100183098((uint64_t *)&unk_100646530);
    sub_1001D22D8(v25, (uint64_t)v7 + *(int *)(v26 + 48));
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))(v7, 0LL, 1LL, v26);
    swift_bridgeObjectRetain(v24);
    while (1)
    {
      sub_1001D231C((uint64_t)v7, (uint64_t)v9);
      uint64_t v31 = sub_100183098((uint64_t *)&unk_100646530);
      if ((*(unsigned int (**)(const char **, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48LL))(v9, 1LL, v31) == 1)
      {
        swift_release(v12);
        unint64_t v32 = sub_100391670((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v33 = *v35;
        os_log_s *v35 = (const char *)v32;
        swift_bridgeObjectRelease(v33);
        return;
      }

      swift_bridgeObjectRelease(v9[1]);
      sub_1001D2364((uint64_t)v9 + *(int *)(v31 + 48), (uint64_t)v3);
      uint64_t v19 = sub_100183098(&qword_1006457D8);
      SFProgressContinuation.cancel(_:)(0LL, v19);
      Task.cancel()();
      sub_1001D23A8((uint64_t)v3);
      if (v17) {
        goto LABEL_6;
      }
LABEL_8:
      int64_t v27 = v18 + 1;
      if (__OFADD__(v18, 1LL))
      {
        __break(1u);
        goto LABEL_29;
      }

      if (v27 < v37)
      {
        unint64_t v28 = v36[v27];
        if (v28) {
          goto LABEL_11;
        }
        int64_t v29 = v18 + 2;
        ++v18;
        if (v27 + 1 < v37)
        {
          unint64_t v28 = v36[v29];
          if (v28) {
            goto LABEL_14;
          }
          int64_t v18 = v27 + 1;
          if (v27 + 2 < v37)
          {
            unint64_t v28 = v36[v27 + 2];
            if (v28)
            {
              v27 += 2LL;
              goto LABEL_11;
            }

            int64_t v29 = v27 + 3;
            int64_t v18 = v27 + 2;
            if (v27 + 3 < v37) {
              break;
            }
          }
        }
      }

uint64_t sub_1001CF084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  uint64_t v46 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v49 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v45 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v47 = *(void *)(v7 - 8);
  uint64_t v48 = v7;
  __chkstk_darwin(v7);
  BOOL v43 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v38 = v9;
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for SFAirDropReceive.AskResponse(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = *(void *)(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_queue);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v40, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a4, v9);
  uint64_t v17 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v18 = (v17 + 16) & ~v17;
  unint64_t v19 = (v15 + v18 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v22 = (v21 + v20 + 16) & ~v21;
  uint64_t v23 = swift_allocObject(&unk_1005D3CA8, v22 + v11, v17 | v21 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v23 + v18, v16, v13);
  uint64_t v24 = v38;
  uint64_t v25 = v39;
  *(void *)(v23 + v19) = v39;
  uint64_t v26 = (void *)(v23 + v20);
  uint64_t v27 = v42;
  *uint64_t v26 = v41;
  v26[1] = v27;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v23 + v22, v12, v24);
  aBlock[4] = sub_1001D2A80;
  uint64_t v52 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001B9FE4;
  aBlock[3] = &unk_1005D3CC0;
  unint64_t v28 = _Block_copy(aBlock);
  id v29 = v25;
  uint64_t v30 = swift_bridgeObjectRetain(v27);
  uint64_t v31 = v43;
  static DispatchQoS.unspecified.getter(v30);
  uint64_t v50 = &_swiftEmptyArrayStorage;
  uint64_t v32 = sub_100183F14( (unint64_t *)&qword_100646510,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v33 = sub_100183098((uint64_t *)&unk_1006460D0);
  unint64_t v34 = sub_1001D228C();
  uint64_t v36 = v45;
  uint64_t v35 = v46;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v50, v33, v34, v46, v32);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v31, v36, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v36, v35);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v31, v48);
  return swift_release(v52);
}

uint64_t sub_1001CF388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v28[1] = a4;
  uint64_t v6 = type metadata accessor for SFAirDropReceive.AcceptContext(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SFAirDropReceive.AskResponse(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  int v14 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v13, v10);
  if (v14 == enum case for SFAirDropReceive.AskResponse.accept(_:))
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v13, v10);
    uint64_t v16 = sub_100183098(&qword_100646590);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, &v13[*(int *)(v16 + 48)], v6);
    uint64_t Strong = swift_unknownObjectWeakLoadStrong( a2 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_classroomDelegate,  v17);
    if (Strong)
    {
      unint64_t v19 = (void *)Strong;
      NSString v20 = String._bridgeToObjectiveC()();
      URL._bridgeToObjectiveC()(v21);
      uint64_t v23 = v22;
      [v19 alertManager:a2 acceptingTransferWithRecordID:v20 withDestinationURL:v22 shouldExtractMediaFromPhotosBundlesForRecordID:SFAirDropReceive.AcceptContext.shouldExtractMedia.getter() & 1];
      swift_unknownObjectRelease(v19);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v24 = type metadata accessor for SFAirDropReceive.ItemDestination(0LL);
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8LL))(v13, v24);
  }

  if (v14 == enum case for SFAirDropReceive.AskResponse.decline(_:))
  {
    uint64_t result = swift_unknownObjectWeakLoadStrong( a2 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_classroomDelegate,  v15);
    if (!result) {
      return result;
    }
    uint64_t v26 = (void *)result;
    NSString v27 = String._bridgeToObjectiveC()();
    [v26 alertManager:a2 cancelingTransferWithRecordID:v27 withFailureReason:0];
    goto LABEL_14;
  }

  if (v14 == enum case for SFAirDropReceive.AskResponse.error(_:))
  {
    uint64_t result = swift_unknownObjectWeakLoadStrong( a2 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_classroomDelegate,  v15);
    if (!result) {
      return result;
    }
    uint64_t v26 = (void *)result;
    NSString v27 = String._bridgeToObjectiveC()();
    [v26 alertManager:a2 cancelingTransferWithRecordID:v27 withFailureReason:1];
    goto LABEL_14;
  }

  if (v14 != enum case for SFAirDropReceive.AskResponse.mixedTypes(_:))
  {
    uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)(v10, v10);
    __break(1u);
    return result;
  }

  uint64_t result = swift_unknownObjectWeakLoadStrong( a2 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_classroomDelegate,  v15);
  if (result)
  {
    uint64_t v26 = (void *)result;
    NSString v27 = String._bridgeToObjectiveC()();
    [v26 alertManager:a2 cancelingTransferWithRecordID:v27 withFailureReason:2];
LABEL_14:

    return swift_unknownObjectRelease(v26);
  }

  return result;
}

uint64_t sub_1001CF678@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    if (a3)
    {
      uint64_t v5 = result;
      swift_bridgeObjectRetain(a2);
      v7.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      SFAirDropReceive.AskRequest.init(recordID:initialInfo:)(v5, a2, v7.super.isa, a4);
      uint64_t v8 = type metadata accessor for SFAirDropReceive.AskRequest(0LL);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))( a4,  0LL,  1LL,  v8);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_1001CF9D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v21 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v20[1] = *(void *)&v3[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_queue];
  int v14 = (void *)swift_allocObject(&unk_1005D3C30, 48LL, 7LL);
  v14[2] = a1;
  v14[3] = a2;
  v14[4] = v3;
  v14[5] = a3;
  aBlock[4] = sub_1001D2830;
  uint64_t v24 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001B9FE4;
  aBlock[3] = &unk_1005D3C48;
  uint64_t v15 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a2);
  static DispatchQoS.unspecified.getter(v3);
  uint64_t v22 = &_swiftEmptyArrayStorage;
  uint64_t v16 = sub_100183F14( (unint64_t *)&qword_100646510,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v17 = sub_100183098((uint64_t *)&unk_1006460D0);
  unint64_t v18 = sub_1001D228C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v17, v18, v7, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release(v24);
}

Class sub_1001CFBD4(uint64_t a1, void *a2, char *a3, objc_class *a4)
{
  uint64_t v113 = a4;
  uint64_t v114 = a3;
  uint64_t v110 = type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation(0LL);
  uint64_t v108 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  uint64_t v102 = (char *)&v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100183098(&qword_100646560);
  __chkstk_darwin(v7);
  uint64_t v99 = (char *)&v93 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v97 = type metadata accessor for SFAirDrop.Progress(0LL);
  uint64_t v95 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  unint64_t v96 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100183098(&qword_1006457D8);
  uint64_t v100 = *(void *)(v10 - 8);
  uint64_t v101 = v10;
  __chkstk_darwin(v10);
  uint64_t v103 = (char *)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100183098(&qword_10064DBF0);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v98 = (uint64_t)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v107 = (uint64_t (*)(char *, char *, uint64_t))((char *)&v93 - v15);
  uint64_t v16 = sub_100183098((uint64_t *)&unk_100646568);
  __chkstk_darwin(v16);
  unint64_t v18 = (char *)&v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for SFAirDropReceive.AskRequest(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(void *)(v20 + 64);
  uint64_t v22 = __chkstk_darwin(v19);
  unint64_t v105 = (char *)&v93 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v94 = (char *)&v93 - v24;
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v93 - v25;
  if (qword_100643ED8 != -1) {
    swift_once(&qword_100643ED8, sub_1001CEA20);
  }
  uint64_t v27 = type metadata accessor for Logger(0LL);
  uint64_t v28 = sub_100186DE4(v27, (uint64_t)qword_100646400);
  uint64_t v29 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v106 = v28;
  uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
  os_log_type_t v31 = static os_log_type_t.default.getter();
  BOOL v32 = os_log_type_enabled(v30, v31);
  uint64_t v111 = a1;
  if (v32)
  {
    uint64_t v104 = v20;
    id v112 = v26;
    uint64_t v109 = v19;
    uint64_t v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v34 = swift_slowAlloc(32LL, -1LL);
    uint64_t v115 = v34;
    *(_DWORD *)uint64_t v33 = 136315138;
    unint64_t v35 = (unint64_t)a2;
    if (!a2)
    {
      uint64_t v117 = 0LL;
      v118[0] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(17LL);
      swift_bridgeObjectRelease(v118[0]);
      a1 = 0xD000000000000015LL;
      unint64_t v35 = 0x80000001005046B0LL;
    }

    swift_bridgeObjectRetain(a2);
    uint64_t v117 = sub_10018CDB4(a1, v35, &v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, v118, v33 + 4, v33 + 12);
    swift_bridgeObjectRelease(v35);
    swift_bridgeObjectRelease_n(a2, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Incoming transfer %s from senderNode", v33, 0xCu);
    swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_slowDealloc(v33, -1LL, -1LL);

    uint64_t v19 = v109;
    a1 = v111;
    uint64_t v26 = v112;
    uint64_t v20 = v104;
  }

  else
  {
    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  sub_1001CF678(a1, a2, (uint64_t)v113, (uint64_t)v18);
  int64_t v37 = *(uint64_t (**)(char *, char *, uint64_t))(v20 + 32);
  Class result = (Class)v37(v26, v18, v19);
  if (!a2)
  {
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v38 = &v114[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_continuations];
  swift_beginAccess( &v114[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_continuations],  &v117,  32LL,  0LL);
  uint64_t v39 = *(void *)v38;
  if (*(void *)(*(void *)v38 + 16LL))
  {
    swift_bridgeObjectRetain(a2);
    uint64_t v40 = sub_1003AD53C(a1, (uint64_t)a2);
    uint64_t v41 = v20;
    if ((v42 & 1) != 0)
    {
      uint64_t v43 = *(void *)(v39 + 56);
      uint64_t v45 = v107;
      uint64_t v44 = v108;
      sub_1001D22D8(v43 + *(void *)(v108 + 72) * v40, (uint64_t)v107);
      uint64_t v46 = *(void (**)(void (*)(void, void, void), uint64_t, uint64_t, uint64_t))(v44 + 56);
      uint64_t v47 = v45;
      uint64_t v48 = 0LL;
    }

    else
    {
      uint64_t v45 = v107;
      uint64_t v44 = v108;
      uint64_t v46 = *(void (**)(void (*)(void, void, void), uint64_t, uint64_t, uint64_t))(v108 + 56);
      uint64_t v47 = v107;
      uint64_t v48 = 1LL;
    }

    uint64_t v49 = v110;
    uint64_t v93 = v46;
    v46((void (*)(void, void, void))v47, v48, 1LL, v110);
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    uint64_t v41 = v20;
    uint64_t v45 = v107;
    uint64_t v44 = v108;
    uint64_t v49 = v110;
    uint64_t v93 = *(void (**)(void (*)(void, void, void), uint64_t, uint64_t, uint64_t))(v108 + 56);
    v93((void (*)(void, void, void))v107, 1LL, 1LL, v110);
  }

  swift_endAccess(&v117);
  int v50 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v44 + 48))(v45, 1LL, v49);
  sub_100187100((uint64_t)v45, &qword_10064DBF0);
  if (v50 == 1)
  {
    uint64_t v109 = v19;
    Class result = v113;
    if (v113)
    {
      id v112 = v26;
      Class result = Dictionary._bridgeToObjectiveC()().super.isa;
      uint64_t v51 = kSFOperationReceiverClassroomDestination;
      if (kSFOperationReceiverClassroomDestination)
      {
        Class v52 = result;
        uint64_t v53 = sub_100183168(0LL, (unint64_t *)&unk_100645170, &OBJC_CLASS___NSURL_ptr);
        NSDictionary.sf_value<A>(_:as:file:line:)( &v117,  v51,  v53,  0xD000000000000067LL,  0x8000000100504AD0LL,  93LL,  v53);
        uint64_t v108 = v117;
        uint64_t v67 = v96;
        uint64_t v68 = v97;
        (*(void (**)(char *, void, uint64_t))(v95 + 104))( v96,  enum case for SFAirDrop.Progress.notStarted(_:),  v97);
        uint64_t v69 = sub_100183098((uint64_t *)&unk_1006464E0);
        SFProgressContinuation.init(_:initialProgress:file:line:)( 0x746E6576456B7361LL,  0xE800000000000000LL,  v67,  0xD000000000000067LL,  0x8000000100504AD0LL,  97LL,  v68,  v69);
        uint64_t v70 = type metadata accessor for TaskPriority(0LL);
        uint64_t v71 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56LL);
        uint64_t v113 = v52;
        uint64_t v72 = (uint64_t)v99;
        v71(v99, 1LL, 1LL, v70);
        uint64_t v104 = v41;
        uint64_t v73 = *(void (**)(char *, char *))(v41 + 16);
        uint64_t v74 = v94;
        uint64_t v107 = v37;
        uint64_t v75 = v109;
        v73(v94, v112);
        uint64_t v76 = *(unsigned __int8 *)(v41 + 80);
        uint64_t v77 = (v76 + 24) & ~v76;
        unint64_t v78 = (v21 + v77 + 7) & 0xFFFFFFFFFFFFFFF8LL;
        unint64_t v79 = (v78 + 23) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v80 = swift_allocObject(&unk_1005D3C80, v79 + 8, v76 | 7);
        id v81 = v114;
        *(void *)(v80 + swift_unknownObjectWeakDestroy(v0 + 16) = v114;
        v107((char *)(v80 + v77), v74, v75);
        uint64_t v82 = (uint64_t *)(v80 + v78);
        uint64_t v83 = v111;
        *uint64_t v82 = v111;
        v82[1] = (uint64_t)a2;
        uint64_t v84 = (void *)v108;
        *(void *)(v80 + v79) = v108;
        swift_bridgeObjectRetain(a2);
        id v85 = v81;
        uint64_t v114 = v84;
        uint64_t v86 = static Task<>.noThrow(priority:operation:)(v72, &unk_100646580, v80, (char *)&type metadata for () + 8);
        swift_release(v80);
        sub_100187100(v72, &qword_100646560);
        uint64_t v87 = v100;
        uint64_t v88 = v101;
        uint64_t v89 = (uint64_t)v102;
        unint64_t v90 = v103;
        (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v102, v103, v101);
        uint64_t v91 = v110;
        *(void *)(v89 + *(int *)(v110 + 20)) = v86;
        uint64_t v92 = v98;
        sub_1001D22D8(v89, v98);
        v93((void (*)(void, void, void))v92, 0LL, 1LL, v91);
        swift_beginAccess(v38, &v117, 33LL, 0LL);
        swift_bridgeObjectRetain(a2);
        swift_retain(v86);
        sub_1002E51FC(v92, v83, (uint64_t)a2);
        swift_endAccess(&v117);

        swift_release(v86);
        sub_1001D23A8(v89);
        (*(void (**)(char *, uint64_t))(v87 + 8))(v90, v88);
        return (Class)(*(uint64_t (**)(char *, uint64_t))(v104 + 8))(v112, v109);
      }

      goto LABEL_26;
    }

uint64_t sub_1001D0678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[5] = a5;
  v6[6] = a6;
  v6[3] = a3;
  v6[4] = a4;
  v6[2] = a2;
  uint64_t v7 = type metadata accessor for URL(0LL);
  v6[7] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[8] = v8;
  void v6[9] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SFAirDropReceive.AskResponse(0LL);
  void v6[10] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[11] = v10;
  v6[12] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1001D0708, 0LL, 0LL);
}

void sub_1001D0708()
{
  uint64_t v1 = v0[5];
  if (v1)
  {
    uint64_t v2 = (uint64_t **)swift_task_alloc(dword_10065108C);
    v0[13] = (uint64_t)v2;
    *uint64_t v2 = v0;
    v2[1] = (uint64_t *)sub_1001D077C;
    sub_100375468(v0[12], v0[2], v0[3], v0[4], v1);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1001D077C()
{
  return swift_task_switch(sub_1001D07D0, 0LL, 0LL);
}

uint64_t sub_1001D07D0()
{
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 40);
  uint64_t v8 = *(void *)(v0 + 32);
  static URL._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(v0 + 48));
  sub_1001CF084(v1, v8, v7, v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1001D088C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100183098(&qword_10064DBF0);
  __chkstk_darwin(v6);
  uint64_t v8 = &v25[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v25[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  if (a3)
  {
    uint64_t v13 = (uint64_t *)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_continuations);
    swift_beginAccess( a1 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_continuations,  v25,  32LL,  0LL);
    uint64_t v14 = *v13;
    if (*(void *)(v14 + 16))
    {
      swift_bridgeObjectRetain(a3);
      uint64_t v15 = sub_1003AD53C(a2, a3);
      if ((v16 & 1) != 0)
      {
        sub_1001D22D8(*(void *)(v14 + 56) + *(void *)(v10 + 72) * v15, (uint64_t)v8);
        uint64_t v17 = 0LL;
      }

      else
      {
        uint64_t v17 = 1LL;
      }

      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v17, 1LL, v9);
      swift_bridgeObjectRelease(a3);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) != 1)
      {
        sub_1001D2364((uint64_t)v8, (uint64_t)v12);
        swift_endAccess(v25);
        uint64_t v23 = sub_100183098(&qword_1006457D8);
        SFProgressContinuation.cancel(_:)(0LL, v23);
        Task.cancel()();
        sub_1001D23A8((uint64_t)v12);
        return;
      }
    }

    else
    {
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1LL, 1LL, v9);
    }

    sub_100187100((uint64_t)v8, &qword_10064DBF0);
    swift_endAccess(v25);
    if (qword_100643ED8 != -1) {
      swift_once(&qword_100643ED8, sub_1001CEA20);
    }
    uint64_t v18 = type metadata accessor for Logger(0LL);
    uint64_t v19 = sub_100186DE4(v18, (uint64_t)qword_100646400);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "Received progress event after continuation had been cleared. Dropping.",  v22,  2u);
      swift_slowDealloc(v22, -1LL, -1LL);
    }
  }

  else
  {
    __break(1u);
  }

void sub_1001D0B4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100183098(&qword_1006457D8);
  uint64_t v32 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = &v33[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = sub_100183098(&qword_10064DBF0);
  __chkstk_darwin(v9);
  uint64_t v11 = &v33[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v12 = type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = &v33[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  if (a3)
  {
    char v16 = (uint64_t *)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_continuations);
    swift_beginAccess( a1 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_continuations,  v33,  32LL,  0LL);
    uint64_t v17 = *v16;
    if (*(void *)(v17 + 16))
    {
      swift_bridgeObjectRetain(a3);
      uint64_t v18 = sub_1003AD53C(a2, a3);
      if ((v19 & 1) != 0)
      {
        sub_1001D22D8(*(void *)(v17 + 56) + *(void *)(v13 + 72) * v18, (uint64_t)v11);
        uint64_t v20 = 0LL;
      }

      else
      {
        uint64_t v20 = 1LL;
      }

      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v20, 1LL, v12);
      swift_bridgeObjectRelease(a3);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) != 1)
      {
        sub_1001D2364((uint64_t)v11, (uint64_t)v15);
        swift_endAccess(v33);
        uint64_t v26 = v32;
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v32 + 16))(v8, v15, v6);
        uint64_t v27 = type metadata accessor for SFAirDropReceive.Failure(0LL);
        uint64_t v28 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
        uint64_t v29 = swift_allocError(v27, v28, 0LL, 0LL);
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v27 - 8) + 104LL))( v30,  enum case for SFAirDropReceive.Failure.senderCancelled(_:),  v27);
        SFProgressContinuation.fail(with:)(v29, v6);
        (*(void (**)(_BYTE *, uint64_t))(v26 + 8))(v8, v6);
        swift_errorRelease(v29);
        uint64_t v31 = *(void *)&v15[*(int *)(v12 + 20)];
        swift_retain(v31);
        Task.cancel()();
        swift_release(v31);
        sub_1001D23A8((uint64_t)v15);
        return;
      }
    }

    else
    {
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1LL, 1LL, v12);
    }

    sub_100187100((uint64_t)v11, &qword_10064DBF0);
    swift_endAccess(v33);
    if (qword_100643ED8 != -1) {
      swift_once(&qword_100643ED8, sub_1001CEA20);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    uint64_t v22 = sub_100186DE4(v21, (uint64_t)qword_100646400);
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  v24,  "Receive error event after continuation has been cleared. Dropping.",  v25,  2u);
      swift_slowDealloc(v25, -1LL, -1LL);
    }
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1001D0EE8( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = a4;
  if (!a3)
  {
    uint64_t v14 = 0LL;
    unint64_t v16 = 0LL;
    if (!a4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  unint64_t v16 = v15;
  if (v12) {
LABEL_3:
  }
    uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v12,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
LABEL_4:
  id v17 = a1;
  sub_1001D2424(v14, v16, a5, a6, a7, a8);
  swift_bridgeObjectRelease(v12);

  return swift_bridgeObjectRelease(v16);
}

uint64_t sub_1001D0FB4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v31 = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v34 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v32 = *(void *)(v10 - 8);
  uint64_t v33 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643ED8 != -1) {
    swift_once(&qword_100643ED8, sub_1001CEA20);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v13, (uint64_t)qword_100646400);
  uint64_t v14 = swift_bridgeObjectRetain_n(a2, 2LL);
  unint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v29 = v3;
    uint64_t v30 = v7;
    id v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v18 = a1;
    char v19 = (void *)swift_slowAlloc(32LL, -1LL);
    unint64_t v35 = v19;
    *(_DWORD *)id v17 = 136315138;
    uint64_t v28 = v18;
    unint64_t v20 = a2;
    if (!a2)
    {
      uint64_t aBlock = 0LL;
      v37[0] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(17LL);
      swift_bridgeObjectRelease(v37[0]);
      unint64_t v20 = 0x80000001005046B0LL;
      uint64_t v18 = 0xD000000000000015LL;
    }

    swift_bridgeObjectRetain(a2);
    uint64_t aBlock = sub_10018CDB4(v18, v20, (uint64_t *)&v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v37, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease_n(a2, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "finishedEvent {recordID: %s}", v17, 0xCu);
    swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);

    uint64_t v4 = v29;
    uint64_t v7 = v30;
    a1 = v28;
  }

  else
  {
    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  uint64_t v21 = (void *)swift_allocObject(&unk_1005D3B40, 48LL, 7LL);
  id v21[2] = v4;
  v21[3] = a1;
  uint64_t v22 = v31;
  void v21[4] = a2;
  v21[5] = v22;
  v37[3] = sub_1001D2418;
  uint64_t v38 = v21;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  v37[0] = 1107296256LL;
  v37[1] = sub_1001B9FE4;
  v37[2] = &unk_1005D3B58;
  uint64_t v23 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(a2);
  static DispatchQoS.unspecified.getter(v4);
  unint64_t v35 = &_swiftEmptyArrayStorage;
  uint64_t v24 = sub_100183F14( (unint64_t *)&qword_100646510,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v25 = sub_100183098((uint64_t *)&unk_1006460D0);
  unint64_t v26 = sub_1001D228C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v25, v26, v7, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v9, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v33);
  return swift_release(v38);
}

void sub_1001D135C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (uint64_t *)((char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v10);
  uint64_t v56 = (char *)&v51 - v13;
  uint64_t v58 = type metadata accessor for NSFastEnumerationIterator(0LL);
  uint64_t v54 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v59 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100183098(&qword_10064DBF0);
  __chkstk_darwin(v15);
  id v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v57 = type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation(0LL);
  uint64_t v18 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v55 = (uint64_t)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a3) {
    goto LABEL_34;
  }
  unint64_t v20 = (uint64_t *)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_continuations);
  swift_beginAccess( a1 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler_continuations,  &v62,  32LL,  0LL);
  uint64_t v21 = *v20;
  if (!*(void *)(v21 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v17, 1LL, 1LL, v57);
LABEL_8:
    sub_100187100((uint64_t)v17, &qword_10064DBF0);
    swift_endAccess(&v62);
    if (qword_100643ED8 != -1) {
      swift_once(&qword_100643ED8, sub_1001CEA20);
    }
    uint64_t v26 = type metadata accessor for Logger(0LL);
    uint64_t v27 = sub_100186DE4(v26, (uint64_t)qword_100646400);
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "Received finish after continuation had been cleared. Dropping.",  v30,  2u);
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    return;
  }

  swift_bridgeObjectRetain(a3);
  uint64_t v22 = sub_1003AD53C(a2, a3);
  if ((v23 & 1) != 0)
  {
    sub_1001D22D8(*(void *)(v21 + 56) + *(void *)(v18 + 72) * v22, (uint64_t)v17);
    uint64_t v24 = 0LL;
  }

  else
  {
    uint64_t v24 = 1LL;
  }

  uint64_t v25 = v57;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v17, v24, 1LL, v57);
  swift_bridgeObjectRelease(a3);
  sub_1001D2364((uint64_t)v17, v55);
  swift_endAccess(&v62);
  if (!a4) {
    goto LABEL_35;
  }
  v31.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  uint64_t v32 = kSFOperationItemsKey;
  if (!kSFOperationItemsKey)
  {
LABEL_36:
    __break(1u);
    return;
  }

  Class isa = v31.super.isa;
  uint64_t v34 = sub_100183168(0LL, &qword_100646540, &OBJC_CLASS___NSArray_ptr);
  NSDictionary.sf_value<A>(_:as:file:line:)(&v62, v32, v34, 0xD000000000000067LL, 0x8000000100504AD0LL, 142LL, v34);

  unint64_t v35 = (void *)v62;
  uint64_t v36 = (uint64_t)[(id)v62 count];
  unint64_t v64 = &_swiftEmptyArrayStorage;
  sub_10018D718(0, v36 & ~(v36 >> 63), 0);
  id v37 = v35;
  NSArray.makeIterator()();

  if (v36 < 0)
  {
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  id v53 = v37;
  unint64_t v52 = (unint64_t)"eClassroomHandler";
  if (v36)
  {
    uint64_t v38 = sub_100183F14( &qword_100646548,  (uint64_t (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator,  (uint64_t)&protocol conformance descriptor for NSFastEnumerationIterator);
    do
    {
      dispatch thunk of IteratorProtocol.next()(v58, v38);
      if (!v63) {
        goto LABEL_33;
      }
      tryCast<A>(_:as:description:file:line:)( v12,  &v62,  v8,  0LL,  0LL,  0xD000000000000067LL,  0x8000000100504AD0LL,  143LL,  v8);
      sub_10018709C(&v62);
      uint64_t v39 = v64;
      if ((swift_isUniquelyReferenced_nonNull_native(v64) & 1) == 0)
      {
        sub_10018D718(0, v39[2] + 1LL, 1);
        uint64_t v39 = v64;
      }

      unint64_t v41 = v39[2];
      unint64_t v40 = v39[3];
      if (v41 >= v40 >> 1)
      {
        sub_10018D718(v40 > 1, v41 + 1, 1);
        uint64_t v39 = v64;
      }

      v39[2] = v41 + 1;
      (*(void (**)(unint64_t, void *, uint64_t))(v9 + 32))( (unint64_t)v39 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
      + *(void *)(v9 + 72) * v41,
        v12,
        v8);
      unint64_t v64 = v39;
    }

    while (--v36);
  }

  uint64_t v42 = sub_100183F14( &qword_100646548,  (uint64_t (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator,  (uint64_t)&protocol conformance descriptor for NSFastEnumerationIterator);
  dispatch thunk of IteratorProtocol.next()(v58, v42);
  uint64_t v44 = v55;
  uint64_t v43 = v56;
  if (v61)
  {
    unint64_t v45 = v52 | 0x8000000000000000LL;
    do
    {
      sub_100186D8C(&v60, &v62);
      tryCast<A>(_:as:description:file:line:)(v43, &v62, v8, 0LL, 0LL, 0xD000000000000067LL, v45, 143LL, v8);
      sub_10018709C(&v62);
      uint64_t v46 = v64;
      if ((swift_isUniquelyReferenced_nonNull_native(v64) & 1) == 0)
      {
        sub_10018D718(0, v46[2] + 1LL, 1);
        uint64_t v46 = v64;
      }

      unint64_t v48 = v46[2];
      unint64_t v47 = v46[3];
      if (v48 >= v47 >> 1)
      {
        sub_10018D718(v47 > 1, v48 + 1, 1);
        uint64_t v46 = v64;
      }

      _OWORD v46[2] = v48 + 1;
      uint64_t v43 = v56;
      (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))( (unint64_t)v46 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
      + *(void *)(v9 + 72) * v48,
        v56,
        v8);
      unint64_t v64 = v46;
      dispatch thunk of IteratorProtocol.next()(v58, v42);
    }

    while (v61);
  }

  (*(void (**)(char *, uint64_t))(v54 + 8))(v59, v58);
  sub_100187100((uint64_t)&v60, (uint64_t *)&unk_100646550);
  uint64_t v49 = v64;
  *(void *)&__int128 v62 = v64;
  uint64_t v50 = sub_100183098(&qword_1006457D8);
  SFProgressContinuation.finish(with:)(&v62, v50);

  sub_1001D23A8(v44);
  swift_release(v49);
}

uint64_t sub_1001D1C4C( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = a4;
  if (!a3)
  {
    uint64_t v8 = 0LL;
    uint64_t v10 = 0LL;
    if (!a4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v10 = v9;
  if (v6) {
LABEL_3:
  }
    uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v6,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
LABEL_4:
  id v11 = a1;
  a5(v8, v10, v6);

  swift_bridgeObjectRelease(v6);
  return swift_bridgeObjectRelease(v10);
}

uint64_t type metadata accessor for SDAirDropReceiveClassroomHandler()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary32SDAirDropReceiveClassroomHandler);
}

uint64_t *sub_1001D1DAC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
  }

  else
  {
    uint64_t v7 = sub_100183098(&qword_1006457D8);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v_Block_object_dispose(va, 8) = v9;
  }

  swift_retain(v9);
  return a1;
}

uint64_t sub_1001D1E38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100183098(&qword_1006457D8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  return swift_release(*(void *)(a1 + *(int *)(a2 + 20)));
}

uint64_t sub_1001D1E80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100183098(&qword_1006457D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a2 + v7);
  *(void *)(a1 + v7) = v8;
  swift_retain(v8);
  return a1;
}

uint64_t sub_1001D1EE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100183098(&qword_1006457D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a2 + v7);
  uint64_t v9 = *(void *)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

uint64_t sub_1001D1F54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100183098(&qword_1006457D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1001D1FB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100183098(&qword_1006457D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_release(v8);
  return a1;
}

uint64_t sub_1001D201C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001D2028);
}

uint64_t sub_1001D2028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100183098(&qword_1006457D8);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_1001D20A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001D20B4);
}

uint64_t sub_1001D20B4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100183098(&qword_1006457D8);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation(uint64_t a1)
{
  uint64_t result = qword_1006464C8;
  if (!qword_1006464C8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SDAirDropReceiveClassroomHandler.Continuation);
  }
  return result;
}

void sub_1001D216C(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
  }

void sub_1001D21E0(uint64_t a1)
{
  if (!qword_1006464D8)
  {
    uint64_t v2 = type metadata accessor for SFAirDrop.Progress(255LL);
    uint64_t v3 = sub_100183124((uint64_t *)&unk_1006464E0);
    unint64_t v4 = type metadata accessor for SFProgressContinuation(a1, v2, v3);
    if (!v5) {
      atomic_store(v4, (unint64_t *)&qword_1006464D8);
    }
  }

uint64_t sub_1001D2248()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1001D226C()
{
}

uint64_t sub_1001D2274(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001D2284(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_1001D228C()
{
  unint64_t result = qword_100646520;
  if (!qword_100646520)
  {
    uint64_t v1 = sub_100183124((uint64_t *)&unk_1006460D0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100646520);
  }

  return result;
}

uint64_t sub_1001D22D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001D231C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100183098(&qword_100646528);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001D2364(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001D23A8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1001D23E4()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_1001D2418()
{
}

uint64_t sub_1001D2424(uint64_t a1, unint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  id v37 = a3;
  uint64_t v8 = v6;
  uint64_t v42 = a1;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v40 = *(void *)(v14 - 8);
  uint64_t v41 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643ED8 != -1) {
    swift_once(&qword_100643ED8, sub_1001CEA20);
  }
  uint64_t v17 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v17, (uint64_t)qword_100646400);
  uint64_t v18 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v33 = a6;
    uint64_t v34 = v6;
    uint64_t v35 = v11;
    uint64_t v36 = v10;
    uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v22 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v43 = v22;
    *(_DWORD *)uint64_t v21 = 136315138;
    uint64_t v23 = v42;
    unint64_t v24 = a2;
    if (!a2)
    {
      uint64_t aBlock = 0LL;
      v45[0] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(17LL);
      swift_bridgeObjectRelease(v45[0]);
      unint64_t v24 = 0x80000001005046B0LL;
      uint64_t v23 = 0xD000000000000015LL;
    }

    swift_bridgeObjectRetain(a2);
    uint64_t aBlock = sub_10018CDB4(v23, v24, (uint64_t *)&v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v45, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease_n(a2, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, v37, v21, 0xCu);
    swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);

    uint64_t v11 = v35;
    uint64_t v10 = v36;
    a6 = v33;
    uint64_t v8 = v34;
  }

  else
  {
    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  uint64_t v25 = (void *)swift_allocObject(v38, 40LL, 7LL);
  uint64_t v26 = v42;
  v25[2] = v8;
  v25[3] = v26;
  void v25[4] = a2;
  v45[3] = v39;
  uint64_t v46 = v25;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  v45[0] = 1107296256LL;
  v45[1] = sub_1001B9FE4;
  _OWORD v45[2] = a6;
  uint64_t v27 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain(a2);
  static DispatchQoS.unspecified.getter(v8);
  uint64_t v43 = &_swiftEmptyArrayStorage;
  uint64_t v28 = sub_100183F14( (unint64_t *)&qword_100646510,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v29 = sub_100183098((uint64_t *)&unk_1006460D0);
  unint64_t v30 = sub_1001D228C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v29, v30, v10, v28);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v16, v13, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v16, v41);
  return swift_release(v46);
}

void sub_1001D27B4()
{
}

uint64_t sub_1001D27C4()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1001D27F0()
{
}

uint64_t sub_1001D27FC()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

Class sub_1001D2830()
{
  return sub_1001CFBD4(*(void *)(v0 + 16), *(void **)(v0 + 24), *(char **)(v0 + 32), *(objc_class **)(v0 + 40));
}

uint64_t sub_1001D283C()
{
  uint64_t v1 = type metadata accessor for SFAirDropReceive.AskRequest(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8LL;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(void *)(v0 + v6 + 8));

  return swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_1001D28E0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for SFAirDropReceive.AskRequest(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = (v6 + 23) & 0xFFFFFFFFFFFFF8LL;
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = (uint64_t *)(v1 + v6);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = *(void *)(v1 + v7);
  uint64_t v14 = (void *)swift_task_alloc(dword_10064657C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = sub_1001943E8;
  return sub_1001D0678(a1, v8, v9, v11, v12, v13);
}

uint64_t sub_1001D2998()
{
  uint64_t v1 = type metadata accessor for SFAirDropReceive.AskResponse(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 + v6 + 16) & ~v9;
  uint64_t v13 = v10 + *(void *)(v8 + 64);
  uint64_t v11 = v3 | v9 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_bridgeObjectRelease(*(void *)(v0 + v6 + 8));
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0 + v10, v7);
  return swift_deallocObject(v0, v13, v11);
}

uint64_t sub_1001D2A80()
{
  uint64_t v1 = *(void *)(type metadata accessor for SFAirDropReceive.AskResponse(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  type metadata accessor for URL(0LL);
  return sub_1001CF388( v0 + v2,  *(void *)(v0 + v3),  *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_1001D2B28(uint64_t a1)
{
  v2[10] = a1;
  v2[11] = v1;
  uint64_t v3 = type metadata accessor for SFAirDropReceive.ItemDestination(0LL);
  uint8_t v2[12] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[13] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[14] = swift_task_alloc(v5);
  v2[15] = swift_task_alloc(v5);
  uint64_t v6 = type metadata accessor for SFAirDropReceive.Transfer.State(0LL);
  v2[16] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[17] = v7;
  v2[18] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100183098(&qword_100646830);
  v2[19] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SFAirDropReceive.Transfer(0LL);
  v2[20] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[21] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[22] = swift_task_alloc(v11);
  v2[23] = swift_task_alloc(v11);
  uint64_t v12 = sub_100183098(&qword_100646800);
  uint8_t v2[24] = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v13 = static AirDropActor.shared;
  v2[25] = static AirDropActor.shared;
  return swift_task_switch(sub_1001D2C74, v13, 0LL);
}

uint64_t sub_1001D2C74()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[11] + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_contentHandler;
  swift_beginAccess(v2, v0 + 7, 0LL, 0LL);
  sub_10019A6C4(v2, (uint64_t)(v0 + 2));
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  unint64_t v5 = sub_10019A708(v0 + 2, v3);
  CurrentValueSubject.value.getter(v5);
  uint64_t v6 = sub_100183098(&qword_1006457D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v1, 1LL, 1LL, v6);
  uint64_t v7 = (void *)swift_task_alloc(dword_10065297C);
  v0[26] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1001D2D7C;
  return sub_1003C7634(v0[24], v0[23], v0[19], v3, v4);
}

uint64_t sub_1001D2D7C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = (*v1)[26];
  (*v1)[27] = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = v2[25];
  uint64_t v5 = v2[23];
  uint64_t v6 = v2[20];
  uint64_t v7 = v2[21];
  sub_100187100(v2[19], &qword_100646830);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  if (v0)
  {
    v8(v5, v6);
    uint64_t v9 = sub_1001D3468;
  }

  else
  {
    v2[28] = (uint64_t)v8;
    v8(v5, v6);
    uint64_t v9 = sub_1001D2E2C;
  }

  return swift_task_switch(v9, v4, 0LL);
}

uint64_t sub_1001D2E2C()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[28];
  uint64_t v2 = v0[24];
  uint64_t v3 = v0[22];
  uint64_t v4 = v0[20];
  uint64_t v6 = v0[17];
  uint64_t v5 = v0[18];
  uint64_t v7 = v0[16];
  sub_10018709C(v0 + 2);
  uint64_t v8 = sub_100183098(&qword_1006451B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL))(v5, v2, v8);
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))( v5,  enum case for SFAirDropReceive.Transfer.State.waitingForAskResponse(_:),  v7);
  sub_10044E6FC(v5, v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v1(v3, v4);
  return swift_task_switch(sub_1001D2F04, 0LL, 0LL);
}

uint64_t sub_1001D2F04()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = swift_task_alloc(32LL);
  v0[29] = v2;
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  uint64_t v3 = swift_task_alloc(32LL);
  v0[30] = v3;
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)[1]);
  v0[31] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1001D2FAC;
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)( v0[15],  &unk_100646838,  v2,  sub_1001D6F30,  v3,  0LL,  0LL,  v0[12]);
}

uint64_t sub_1001D2FAC()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 248LL);
  *(void *)(*(void *)v1 + 256LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_1001D32C4;
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v7 = v2[29];
    uint64_t v6 = v2[30];
    uint64_t v8 = v2[25];
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    uint64_t v4 = sub_1001D3028;
    uint64_t v5 = v8;
  }

  return swift_task_switch(v4, v5, 0LL);
}

uint64_t sub_1001D3028()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 104);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))( v1,  enum case for SFAirDropReceive.ItemDestination.noItem(_:),  v3);
  uint64_t v5 = sub_100183F14( &qword_100646840,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
  char v6 = dispatch thunk of static Equatable.== infix(_:_:)(v2, v1, v3, v5);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v7(v1, v3);
  uint64_t v8 = *(void *)(v0 + 192);
  uint64_t v9 = *(void *)(v0 + 120);
  if ((v6 & 1) != 0)
  {
    uint64_t v10 = *(void *)(v0 + 96);
    uint64_t v11 = type metadata accessor for CancellationError(0LL);
    uint64_t v12 = sub_100183F14( &qword_100646848,  (uint64_t (*)(uint64_t))&type metadata accessor for CancellationError,  (uint64_t)&protocol conformance descriptor for CancellationError);
    uint64_t v13 = swift_allocError(v11, v12, 0LL, 0LL);
    uint64_t v14 = CancellationError.init()();
    swift_willThrow(v14);
    v7(v9, v10);
    uint64_t v15 = sub_100187100(v8, &qword_100646800);
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Classroom AskRequest declined", v18, 2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    swift_errorRelease(v13);

    uint64_t v19 = (unsigned int *)&enum case for SFAirDropReceive.AskResponse.decline(_:);
  }

  else
  {
    uint64_t v20 = *(void *)(v0 + 96);
    uint64_t v21 = *(void *)(v0 + 104);
    uint64_t v22 = *(void *)(v0 + 80);
    sub_100183098(&qword_100646590);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v22, v9, v20);
    SFAirDropReceive.AcceptContext.init(shouldExtractMedia:customPayload:)(0LL, 0LL, 0xF000000000000000LL);
    v7(v9, v20);
    sub_100187100(v8, &qword_100646800);
    uint64_t v19 = (unsigned int *)&enum case for SFAirDropReceive.AskResponse.accept(_:);
  }

  uint64_t v23 = *(void *)(v0 + 184);
  uint64_t v24 = *(void *)(v0 + 192);
  uint64_t v25 = *(void *)(v0 + 176);
  uint64_t v27 = *(void *)(v0 + 144);
  uint64_t v26 = *(void *)(v0 + 152);
  uint64_t v29 = *(void *)(v0 + 112);
  uint64_t v28 = *(void *)(v0 + 120);
  uint64_t v30 = *(void *)(v0 + 80);
  uint64_t v31 = *v19;
  uint64_t v32 = type metadata accessor for SFAirDropReceive.AskResponse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 104LL))(v30, v31, v32);
  swift_task_dealloc(v24);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001D32C4()
{
  uint64_t v1 = v0[29];
  uint64_t v2 = v0[25];
  swift_task_dealloc(v0[30]);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1001D330C, v2, 0LL);
}

uint64_t sub_1001D330C()
{
  uint64_t v1 = sub_100187100(*(void *)(v0 + 192), &qword_100646800);
  uint64_t v2 = *(void *)(v0 + 256);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Classroom AskRequest declined", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  swift_errorRelease(v2);

  uint64_t v6 = *(void *)(v0 + 184);
  uint64_t v7 = *(void *)(v0 + 192);
  uint64_t v8 = *(void *)(v0 + 176);
  uint64_t v10 = *(void *)(v0 + 144);
  uint64_t v9 = *(void *)(v0 + 152);
  uint64_t v12 = *(void *)(v0 + 112);
  uint64_t v11 = *(void *)(v0 + 120);
  uint64_t v13 = *(void *)(v0 + 80);
  uint64_t v14 = enum case for SFAirDropReceive.AskResponse.decline(_:);
  uint64_t v15 = type metadata accessor for SFAirDropReceive.AskResponse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104LL))(v13, v14, v15);
  swift_task_dealloc(v7);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001D3468()
{
  uint64_t v1 = sub_10018709C((void *)(v0 + 16));
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Classroom AskRequest declined", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  swift_errorRelease(v2);

  uint64_t v6 = *(void *)(v0 + 184);
  uint64_t v7 = *(void *)(v0 + 192);
  uint64_t v8 = *(void *)(v0 + 176);
  uint64_t v10 = *(void *)(v0 + 144);
  uint64_t v9 = *(void *)(v0 + 152);
  uint64_t v12 = *(void *)(v0 + 112);
  uint64_t v11 = *(void *)(v0 + 120);
  uint64_t v13 = *(void *)(v0 + 80);
  uint64_t v14 = enum case for SFAirDropReceive.AskResponse.decline(_:);
  uint64_t v15 = type metadata accessor for SFAirDropReceive.AskResponse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104LL))(v13, v14, v15);
  swift_task_dealloc(v7);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001D35BC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 36_Block_object_dispose(va, 8) = a5;
  *(void *)(v6 + 376) = v5;
  *(void *)(v6 + 352) = a3;
  *(void *)(v6 + 360) = a4;
  *(_BYTE *)(v6 + 737) = a2;
  *(void *)(v6 + 344) = a1;
  uint64_t v7 = type metadata accessor for SFAirDropReceive.Failure(0LL);
  *(void *)(v6 + 384) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v6 + 392) = v8;
  *(void *)(v6 + 400) = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100183098(&qword_1006467F8);
  *(void *)(v6 + 40_Block_object_dispose(va, 8) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v6 + 4swift_unknownObjectWeakDestroy(v0 + 16) = v10;
  *(void *)(v6 + 424) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for SFAirDropReceive.Transfer.State(0LL);
  *(void *)(v6 + 432) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v6 + 440) = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v6 + 44_Block_object_dispose(va, 8) = swift_task_alloc(v13);
  *(void *)(v6 + 456) = swift_task_alloc(v13);
  uint64_t v14 = sub_100183098(&qword_100646800);
  *(void *)(v6 + 464) = swift_task_alloc((*(void *)(*(void *)(v14 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for SFAirDropReceive.ItemDestination(0LL);
  *(void *)(v6 + 472) = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  *(void *)(v6 + 480) = v16;
  unint64_t v17 = (*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v6 + 48_Block_object_dispose(va, 8) = swift_task_alloc(v17);
  *(void *)(v6 + 496) = swift_task_alloc(v17);
  *(void *)(v6 + 504) = swift_task_alloc(v17);
  *(void *)(v6 + 512) = swift_task_alloc(v17);
  *(void *)(v6 + 520) = swift_task_alloc(v17);
  *(void *)(v6 + 52_Block_object_dispose(va, 8) = swift_task_alloc(v17);
  *(void *)(v6 + 536) = swift_task_alloc(v17);
  uint64_t v18 = type metadata accessor for SFAirDrop.TransferType(0LL);
  *(void *)(v6 + 544) = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  *(void *)(v6 + 552) = v19;
  unint64_t v20 = (*(void *)(v19 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v6 + 560) = swift_task_alloc(v20);
  *(void *)(v6 + 56_Block_object_dispose(va, 8) = swift_task_alloc(v20);
  uint64_t v21 = type metadata accessor for SFAirDropReceive.AskRequest(0LL);
  *(void *)(v6 + 576) = v21;
  uint64_t v22 = *(void *)(v21 - 8);
  *(void *)(v6 + 584) = v22;
  unint64_t v23 = (*(void *)(v22 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v6 + 592) = swift_task_alloc(v23);
  *(void *)(v6 + 600) = swift_task_alloc(v23);
  uint64_t v24 = type metadata accessor for SFAirDropReceive.Transfer(0LL);
  *(void *)(v6 + 60_Block_object_dispose(va, 8) = v24;
  uint64_t v25 = *(void *)(v24 - 8);
  *(void *)(v6 + 6swift_unknownObjectWeakDestroy(v0 + 16) = v25;
  unint64_t v26 = (*(void *)(v25 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v6 + 624) = swift_task_alloc(v26);
  *(void *)(v6 + 632) = swift_task_alloc(v26);
  *(void *)(v6 + 640) = swift_task_alloc(v26);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v27 = static AirDropActor.shared;
  *(void *)(v6 + 64_Block_object_dispose(va, 8) = static AirDropActor.shared;
  return swift_task_switch(sub_1001D380C, v27, 0LL);
}

uint64_t sub_1001D380C(uint64_t a1)
{
  uint64_t v181 = v1 + 328;
  uint64_t v186 = v1 + 320;
  uint64_t v2 = *(void *)(v1 + 640);
  uint64_t v3 = *(void *)(v1 + 616);
  uint64_t v4 = *(void *)(v1 + 608);
  uint64_t v5 = *(void *)(v1 + 600);
  uint64_t v6 = *(void *)(v1 + 584);
  uint64_t v7 = *(void *)(v1 + 576);
  uint64_t v8 = *(void *)(v1 + 568);
  uint64_t v9 = *(void *)(v1 + 552);
  *(void *)typea = *(void *)(v1 + 544);
  uint64_t v10 = CurrentValueSubject.value.getter(a1);
  SFAirDropReceive.Transfer.askRequest.getter(v10);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  *(void *)(v1 + 656) = v11;
  unint64_t v189 = v11;
  uint64_t v12 = v11(v2, v4);
  SFAirDropReceive.AskRequest.type.getter(v12);
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t v14 = v13(v5, v7);
  char v15 = SFAirDrop.TransferType.isLinks.getter(v14);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
  uint64_t v17 = v16(v8, *(void *)typea);
  if ((v15 & 1) == 0)
  {
    uint64_t v18 = *(void *)(v1 + 632);
    uint64_t v19 = *(void *)(v1 + 608);
    uint64_t v20 = *(void *)(v1 + 592);
    uint64_t v21 = *(void *)(v1 + 576);
    uint64_t v22 = *(void *)(v1 + 560);
    uint64_t v23 = *(void *)(v1 + 544);
    uint64_t v24 = CurrentValueSubject.value.getter(v17);
    SFAirDropReceive.Transfer.askRequest.getter(v24);
    uint64_t v25 = v189(v18, v19);
    SFAirDropReceive.AskRequest.type.getter(v25);
    uint64_t v26 = v13(v20, v21);
    char v27 = SFAirDrop.TransferType.isFiles.getter(v26);
    v16(v22, v23);
    if ((v27 & 1) == 0)
    {
      uint64_t v67 = swift_retain_n(*(void *)(v1 + 376), 2LL);
      uint64_t v68 = (os_log_s *)Logger.logObject.getter(v67);
      os_log_type_t v69 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v68, v69))
      {
        uint64_t v70 = *(void *)(v1 + 632);
        uint64_t v71 = *(void *)(v1 + 592);
        uint64_t v160 = *(void *)(v1 + 608);
        uint64_t v162 = *(void *)(v1 + 576);
        uint64_t v72 = *(void *)(v1 + 560);
        uint64_t v166 = *(void *)(v1 + 544);
        uint64_t v171 = *(void *)(v1 + 376);
        os_log_type_t typeb = v69;
        uint64_t v73 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v176 = swift_slowAlloc(32LL, -1LL);
        v201[0] = v176;
        *(_DWORD *)uint64_t v73 = 136315138;
        uint64_t v74 = CurrentValueSubject.value.getter(v176);
        SFAirDropReceive.Transfer.askRequest.getter(v74);
        uint64_t v75 = v189(v70, v160);
        SFAirDropReceive.AskRequest.type.getter(v75);
        v13(v71, v162);
        uint64_t v76 = sub_100183F14( (unint64_t *)&unk_100656460,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferType,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferType);
        uint64_t v77 = dispatch thunk of CustomStringConvertible.description.getter(v166, v76);
        unint64_t v79 = v78;
        v16(v72, v166);
        *(void *)(v1 + 320) = sub_10018CDB4(v77, (unint64_t)v79, v201);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v186, v181, v73 + 4, v73 + 12);
        swift_bridgeObjectRelease(v79);
        swift_release_n(v171, 2LL);
        _os_log_impl((void *)&_mh_execute_header, v68, typeb, "Classroom Ask open/move SKIP. {type: %s}", v73, 0xCu);
        swift_arrayDestroy(v176, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v176, -1LL, -1LL);
        swift_slowDealloc(v73, -1LL, -1LL);

        goto LABEL_22;
      }

      uint64_t v119 = *(void *)(v1 + 376);

      uint64_t v113 = v119;
LABEL_21:
      swift_release_n(v113, 2LL);
      goto LABEL_22;
    }
  }

  uint64_t v28 = *(void *)(v1 + 376)
      + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_contentHandler;
  swift_beginAccess(v28, v1 + 216, 0LL, 0LL);
  sub_10019A6C4(v28, v1 + 96);
  uint64_t v29 = sub_100183098(&qword_100656430);
  uint64_t v30 = sub_100183098(&qword_100646808);
  if (!swift_dynamicCast(v1 + 16, v1 + 96, v29, v30, 6LL))
  {
    uint64_t v51 = *(void *)(v1 + 376);
    *(_OWORD *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
    *(void *)(v1 + 4_Block_object_dispose(va, 8) = 0LL;
    sub_100187100(v1 + 16, &qword_100646810);
    uint64_t v52 = swift_retain_n(v51, 2LL);
    id v53 = (os_log_s *)Logger.logObject.getter(v52);
    os_log_type_t v54 = static os_log_type_t.default.getter();
    BOOL v55 = os_log_type_enabled(v53, v54);
    uint64_t v56 = *(void *)(v1 + 376);
    if (v55)
    {
      uint64_t v57 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v58 = swift_slowAlloc(32LL, -1LL);
      v201[0] = v58;
      *(_DWORD *)uint64_t v57 = 136315138;
      sub_10019A6C4(v28, v1 + 136);
      uint64_t v59 = *(void *)(v1 + 160);
      __int128 v60 = sub_10019A708((void *)(v1 + 136), v59);
      uint64_t DynamicType = swift_getDynamicType(v60, v59, 1LL);
      uint64_t v62 = *(void *)(v1 + 168);
      sub_10018709C((void *)(v1 + 136));
      *(void *)(v1 + 28_Block_object_dispose(va, 8) = DynamicType;
      *(void *)(v1 + 296) = v62;
      uint64_t v63 = sub_100183098(&qword_100646818);
      uint64_t v64 = String.init<A>(describing:)(v1 + 288, v63);
      uint64_t v66 = (const char *)v65;
      *(void *)(v1 + 312) = sub_10018CDB4(v64, v65, v201);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 312, v186, v57 + 4, v57 + 12);
      swift_bridgeObjectRelease(v66);
      swift_release_n(v56, 2LL);
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Classroom Ask open/move SKIP. {handler: %s}", v57, 0xCu);
      swift_arrayDestroy(v58, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1LL, -1LL);
      swift_slowDealloc(v57, -1LL, -1LL);

LABEL_22:
      uint64_t v120 = *(const char **)(v1 + 360);
      (*(void (**)(void, void, void))(*(void *)(v1 + 480) + 16LL))( *(void *)(v1 + 344),  *(void *)(v1 + 368),  *(void *)(v1 + 472));
      swift_bridgeObjectRetain(v120);
      unsigned int v164 = 0;
      uint64_t v161 = *(void *)(v1 + 360);
LABEL_23:
      uint64_t v121 = *(void *)(v1 + 632);
      uint64_t v122 = *(void *)(v1 + 624);
      uint64_t v123 = *(void *)(v1 + 600);
      uint64_t v124 = *(void *)(v1 + 592);
      uint64_t v125 = *(void *)(v1 + 568);
      uint64_t v126 = *(void *)(v1 + 560);
      uint64_t v127 = *(void *)(v1 + 536);
      uint64_t v128 = *(void *)(v1 + 528);
      uint64_t v129 = *(void *)(v1 + 520);
      uint64_t v165 = *(void *)(v1 + 512);
      uint64_t v168 = *(void *)(v1 + 504);
      uint64_t v173 = *(void *)(v1 + 496);
      uint64_t v179 = *(void *)(v1 + 488);
      uint64_t v184 = *(void *)(v1 + 464);
      uint64_t v188 = *(void *)(v1 + 456);
      uint64_t v192 = *(void *)(v1 + 448);
      uint64_t v195 = *(void *)(v1 + 424);
      *(void *)typec = *(void *)(v1 + 400);
      swift_task_dealloc(*(void *)(v1 + 640));
      swift_task_dealloc(v121);
      swift_task_dealloc(v122);
      swift_task_dealloc(v123);
      swift_task_dealloc(v124);
      swift_task_dealloc(v125);
      swift_task_dealloc(v126);
      swift_task_dealloc(v127);
      swift_task_dealloc(v128);
      swift_task_dealloc(v129);
      swift_task_dealloc(v165);
      swift_task_dealloc(v168);
      swift_task_dealloc(v173);
      swift_task_dealloc(v179);
      swift_task_dealloc(v184);
      swift_task_dealloc(v188);
      swift_task_dealloc(v192);
      swift_task_dealloc(v195);
      swift_task_dealloc(*(void *)typec);
      return (*(uint64_t (**)(void, uint64_t))(v1 + 8))(v164, v161);
    }

    uint64_t v113 = v56;
    goto LABEL_21;
  }

  uint64_t v175 = v1 + 336;
  uint64_t v31 = *(void *)(v1 + 536);
  uint64_t v32 = *(void *)(v1 + 472);
  uint64_t v33 = *(void *)(v1 + 480);
  uint64_t v34 = *(void *)(v1 + 368);
  int v187 = (void *)(v1 + 56);
  sub_1001CE0D0((__int128 *)(v1 + 16), v1 + 56);
  *(void *)(v1 + 664) = OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_log;
  uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
  *(void *)(v1 + 672) = v35;
  uint64_t v36 = v35(v31, v34, v32);
  id v37 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v38 = static os_log_type_t.default.getter();
  BOOL v39 = os_log_type_enabled(v37, v38);
  uint64_t v40 = *(void *)(v1 + 536);
  os_log_type_t type = (void (*)(uint64_t, uint64_t, uint64_t))v35;
  if (v39)
  {
    uint64_t v41 = *(void *)(v1 + 528);
    uint64_t v42 = *(void *)(v1 + 472);
    uint64_t v170 = *(void *)(v1 + 480);
    uint64_t v43 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v44 = swift_slowAlloc(32LL, -1LL);
    v201[0] = v44;
    *(_DWORD *)uint64_t v43 = 136315138;
    type(v41, v40, v42);
    uint64_t v45 = String.init<A>(describing:)(v41, v42);
    unint64_t v47 = (const char *)v46;
    *(void *)(v1 + 336) = sub_10018CDB4(v45, v46, v201);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v175, v1 + 344, v43 + 4, v43 + 12);
    __n128 v48 = swift_bridgeObjectRelease(v47);
    uint64_t v49 = *(void (**)(uint64_t, uint64_t, __n128))(v170 + 8);
    v49(v40, v42, v48);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Classroom Ask open/move START. {destination: %s}", v43, 0xCu);
    swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1LL, -1LL);
    uint64_t v50 = v43;
    uint64_t v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))type;
    swift_slowDealloc(v50, -1LL, -1LL);
  }

  else
  {
    uint64_t v80 = *(void *)(v1 + 472);
    uint64_t v81 = *(void *)(v1 + 480);

    uint64_t v49 = *(void (**)(uint64_t, uint64_t, __n128))(v81 + 8);
    ((void (*)(uint64_t, uint64_t))v49)(v40, v80);
  }

  *(void *)(v1 + 680) = v49;
  char v82 = *(_BYTE *)(v1 + 737);
  uint64_t v83 = v35(*(void *)(v1 + 520), *(void *)(v1 + 368), *(void *)(v1 + 472));
  if ((v82 & 1) == 0)
  {
    uint64_t v114 = *(void *)(v1 + 624);
    uint64_t v115 = *(void *)(v1 + 464);
    uint64_t v178 = *(const char **)(v1 + 360);
    uint64_t v183 = *(const char **)(v1 + 368);
    sub_10019A6C4(v28, v1 + 176);
    uint64_t v116 = *(void *)(v1 + 200);
    uint64_t v117 = *(void *)(v1 + 208);
    uint64_t v118 = sub_10019A708((void *)(v1 + 176), v116);
    CurrentValueSubject.value.getter(v118);
    sub_1003C8C9C(v114, v178, 0, v183, v116, v117, v115);
    uint64_t v196 = *(void *)(v1 + 632);
    uint64_t v135 = *(void *)(v1 + 472);
    uint64_t v136 = *(void *)(v1 + 456);
    uint64_t v169 = *(void *)(v1 + 464);
    uint64_t v174 = *(void *)(v1 + 440);
    uint64_t v180 = *(void *)(v1 + 432);
    uint64_t v185 = *(void *)(v1 + 608);
    uint64_t v137 = *(void *)(v1 + 368);
    uint64_t v138 = *(const char **)(v1 + 352);
    uint64_t v139 = *(const char **)(v1 + 360);
    ((void (*)(void))v189)(*(void *)(v1 + 624));
    sub_10018709C((void *)(v1 + 176));
    uint64_t v140 = (int *)sub_100183098((uint64_t *)&unk_10064B760);
    uint64_t v141 = v140[12];
    uint64_t v142 = v140[16];
    uint64_t v143 = v136 + v140[20];
    type(v136, v137, v135);
    *(void *)(v136 + v141) = v138;
    *(void *)(v136 + v142) = v139;
    uint64_t v144 = sub_100183098(&qword_1006451B0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v144 - 8) + 16LL))(v143, v169, v144);
    (*(void (**)(uint64_t, void, uint64_t))(v174 + 104))( v136,  enum case for SFAirDropReceive.Transfer.State.waitingForOpenResponse(_:),  v180);
    *(void *)&double v145 = swift_bridgeObjectRetain(v138).n128_u64[0];
    swift_bridgeObjectRetain(v139, v145);
    sub_10044E6FC(v136, v196);
    v189(v196, v185);
    return swift_task_switch(sub_1001D4968, 0LL, 0LL);
  }

  uint64_t v84 = (os_log_s *)Logger.logObject.getter(v83);
  os_log_type_t v85 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v84, v85))
  {
    uint64_t v190 = *(void (**)(uint64_t, uint64_t))(v1 + 680);
    uint64_t v86 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v1 + 672);
    uint64_t v87 = *(void *)(v1 + 528);
    uint64_t v88 = *(void *)(v1 + 520);
    uint64_t v89 = *(void *)(v1 + 504);
    uint64_t v90 = *(void *)(v1 + 472);
    uint64_t v91 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v193 = swift_slowAlloc(32LL, -1LL);
    v201[0] = v193;
    *(_DWORD *)uint64_t v91 = 136315138;
    __n128 v92 = swift_beginAccess(v88, v1 + 264, 0LL, 0LL);
    v86(v87, v88, v90, v92);
    ((void (*)(uint64_t, uint64_t, uint64_t))v86)(v89, v87, v90);
    uint64_t v93 = String.init<A>(describing:)(v89, v90);
    uint64_t v95 = v94;
    v190(v87, v90);
    *(void *)(v1 + 32_Block_object_dispose(va, 8) = sub_10018CDB4(v93, (unint64_t)v95, v201);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v181, v175, v91 + 4, v91 + 12);
    swift_bridgeObjectRelease(v95);
    _os_log_impl( (void *)&_mh_execute_header,  v84,  v85,  "Classroom Ask open/move END - accepted {destination: %s}",  v91,  0xCu);
    swift_arrayDestroy(v193, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v193, -1LL, -1LL);
    swift_slowDealloc(v91, -1LL, -1LL);
  }

  unint64_t v96 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v1 + 672);
  uint64_t v167 = *(void *)(v1 + 632);
  uint64_t v172 = *(void *)(v1 + 608);
  uint64_t v97 = *(void *)(v1 + 520);
  uint64_t v177 = *(void *)(v1 + 496);
  uint64_t v182 = *(void (**)(uint64_t, uint64_t))(v1 + 656);
  uint64_t v98 = *(void *)(v1 + 472);
  uint64_t v191 = *(void *)(v1 + 488);
  uint64_t v194 = *(void *)(v1 + 480);
  uint64_t v100 = *(void *)(v1 + 440);
  uint64_t v99 = *(void *)(v1 + 448);
  uint64_t v163 = *(void *)(v1 + 432);
  uint64_t v101 = *(const char **)(v1 + 352);
  uint64_t v102 = *(const char **)(v1 + 360);
  uint64_t v103 = sub_100183098((uint64_t *)&unk_1006451A0);
  uint64_t v104 = *(int *)(v103 + 48);
  uint64_t v105 = *(int *)(v103 + 64);
  __n128 v106 = swift_beginAccess(v97, v1 + 240, 0LL, 0LL);
  v96(v99, v97, v98, v106);
  *(void *)(v99 + v104) = v101;
  *(void *)(v99 + v105) = v102;
  (*(void (**)(uint64_t, void, uint64_t))(v100 + 104))( v99,  enum case for SFAirDropReceive.Transfer.State.opening(_:),  v163);
  *(void *)&double v107 = swift_bridgeObjectRetain(v101).n128_u64[0];
  swift_bridgeObjectRetain(v102, v107);
  sub_10044E6FC(v99, v167);
  (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v99, v163);
  v182(v167, v172);
  ((void (*)(uint64_t, uint64_t, uint64_t))v96)(v177, v97, v98);
  ((void (*)(uint64_t, uint64_t, uint64_t))v96)(v191, v177, v98);
  int v108 = (*(uint64_t (**)(uint64_t, uint64_t))(v194 + 88))(v191, v98);
  if (v108 == enum case for SFAirDropReceive.ItemDestination.customApp(_:))
  {
    uint64_t v110 = *(uint64_t **)(v1 + 488);
    (*(void (**)(uint64_t *, void))(*(void *)(v1 + 480) + 96LL))(v110, *(void *)(v1 + 472));
    uint64_t v111 = *v110;
    id v112 = (const char *)v110[1];
    if (v111 == 0xD000000000000034LL && v112 == (const char *)0x8000000100504BB0LL)
    {
      __n128 v109 = swift_bridgeObjectRelease((const char *)0x8000000100504BB0LL);
LABEL_25:
      (*(void (**)(void, void, __n128))(v1 + 680))(*(void *)(v1 + 496), *(void *)(v1 + 472), v109);
LABEL_26:
      unint64_t v130 = *(void (**)(uint64_t, uint64_t, __n128))(v1 + 680);
      uint64_t v131 = *(void *)(v1 + 520);
      uint64_t v132 = *(void *)(v1 + 472);
      uint64_t v133 = *(const char **)(v1 + 360);
      (*(void (**)(void, uint64_t, uint64_t))(v1 + 672))(*(void *)(v1 + 344), v131, v132);
      __n128 v134 = swift_bridgeObjectRetain(v133);
      v130(v131, v132, v134);
      sub_10018709C(v187);
      uint64_t v161 = *(void *)(v1 + 360);
      unsigned int v164 = 1;
      goto LABEL_23;
    }

    os_log_type_t v147 = *(void (**)(uint64_t, uint64_t, __n128))(v1 + 680);
    uint64_t v148 = *(void *)(v1 + 496);
    uint64_t v149 = *(void *)(v1 + 472);
    char v150 = _stringCompareWithSmolCheck(_:_:expecting:)(v111, v112, 0xD000000000000034LL, 0x8000000100504BB0LL, 0LL);
    __n128 v151 = swift_bridgeObjectRelease(v112);
    v147(v148, v149, v151);
    if ((v150 & 1) != 0) {
      goto LABEL_26;
    }
  }

  else
  {
    if (v108 == enum case for SFAirDropReceive.ItemDestination.noItem(_:)) {
      goto LABEL_25;
    }
    uint64_t v152 = *(void (**)(uint64_t, uint64_t))(v1 + 680);
    uint64_t v153 = *(void *)(v1 + 496);
    uint64_t v154 = *(void *)(v1 + 472);
    v152(*(void *)(v1 + 488), v154);
    v152(v153, v154);
  }

  uint64_t v155 = *(void *)(v1 + 520);
  uint64_t v156 = *(void *)(v1 + 360);
  uint64_t v157 = *(void *)(v1 + 80);
  uint64_t v158 = *(void *)(v1 + 88);
  sub_10019A708(v187, v157);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v158 + 8))(v156, v155, v157, v158);
  uint64_t v159 = (void *)swift_task_alloc(async function pointer to SFProgressTask.finalValue.getter[1]);
  *(void *)(v1 + 720) = v159;
  void *v159 = v1;
  v159[1] = sub_1001D5544;
  return SFProgressTask.finalValue.getter(v1 + 736, *(void *)(v1 + 408));
}

uint64_t sub_1001D4968()
{
  uint64_t v1 = v0[58];
  uint64_t v2 = swift_task_alloc(32LL);
  v0[86] = v2;
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  uint64_t v3 = swift_task_alloc(32LL);
  v0[87] = v3;
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)[1]);
  v0[88] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1001D4A10;
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)( v0[64],  &unk_100646820,  v2,  sub_1001D6ED0,  v3,  0LL,  0LL,  v0[59]);
}

uint64_t sub_1001D4A10()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 704LL);
  *(void *)(*(void *)v1 + 712LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_1001D509C;
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v6 = v2[87];
    uint64_t v7 = v2[86];
    uint64_t v8 = v2[81];
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    uint64_t v4 = sub_1001D4A90;
    uint64_t v5 = v8;
  }

  return swift_task_switch(v4, v5, 0LL);
}

uint64_t sub_1001D4A90()
{
  char v82 = (void *)(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 520);
  uint64_t v2 = *(void *)(v0 + 512);
  uint64_t v4 = *(void *)(v0 + 472);
  uint64_t v3 = *(void *)(v0 + 480);
  uint64_t v5 = *(void *)(v0 + 464);
  (*(void (**)(void, void))(*(void *)(v0 + 440) + 8LL))(*(void *)(v0 + 456), *(void *)(v0 + 432));
  sub_100187100(v5, &qword_100646800);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 40))(v1, v2, v4);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v73 = *(void (**)(uint64_t, uint64_t))(v0 + 680);
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0 + 672);
    uint64_t v10 = *(void *)(v0 + 528);
    uint64_t v11 = *(void *)(v0 + 520);
    uint64_t v12 = *(void *)(v0 + 504);
    uint64_t v13 = *(void *)(v0 + 472);
    uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v76 = swift_slowAlloc(32LL, -1LL);
    uint64_t v84 = v76;
    *(_DWORD *)uint64_t v14 = 136315138;
    __n128 v15 = swift_beginAccess(v11, v0 + 264, 0LL, 0LL);
    v9(v10, v11, v13, v15);
    ((void (*)(uint64_t, uint64_t, uint64_t))v9)(v12, v10, v13);
    uint64_t v16 = String.init<A>(describing:)(v12, v13);
    uint64_t v18 = v17;
    v73(v10, v13);
    *(void *)(v0 + 32_Block_object_dispose(va, 8) = sub_10018CDB4(v16, (unint64_t)v18, &v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v18);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "Classroom Ask open/move END - accepted {destination: %s}",  v14,  0xCu);
    swift_arrayDestroy(v76, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v76, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v0 + 672);
  uint64_t v67 = *(void *)(v0 + 632);
  uint64_t v69 = *(void *)(v0 + 608);
  uint64_t v20 = *(void *)(v0 + 520);
  uint64_t v71 = *(void *)(v0 + 496);
  uint64_t v74 = *(void (**)(uint64_t, uint64_t))(v0 + 656);
  uint64_t v21 = *(void *)(v0 + 472);
  uint64_t v77 = *(void *)(v0 + 488);
  uint64_t v79 = *(void *)(v0 + 480);
  uint64_t v23 = *(void *)(v0 + 440);
  uint64_t v22 = *(void *)(v0 + 448);
  uint64_t v64 = *(void *)(v0 + 432);
  uint64_t v24 = *(const char **)(v0 + 352);
  uint64_t v25 = *(const char **)(v0 + 360);
  uint64_t v26 = sub_100183098((uint64_t *)&unk_1006451A0);
  uint64_t v27 = *(int *)(v26 + 48);
  uint64_t v28 = *(int *)(v26 + 64);
  __n128 v29 = swift_beginAccess(v20, v0 + 240, 0LL, 0LL);
  v19(v22, v20, v21, v29);
  *(void *)(v22 + v27) = v24;
  *(void *)(v22 + v2_Block_object_dispose(va, 8) = v25;
  (*(void (**)(uint64_t, void, uint64_t))(v23 + 104))( v22,  enum case for SFAirDropReceive.Transfer.State.opening(_:),  v64);
  *(void *)&double v30 = swift_bridgeObjectRetain(v24).n128_u64[0];
  swift_bridgeObjectRetain(v25, v30);
  sub_10044E6FC(v22, v67);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v64);
  v74(v67, v69);
  ((void (*)(uint64_t, uint64_t, uint64_t))v19)(v71, v20, v21);
  ((void (*)(uint64_t, uint64_t, uint64_t))v19)(v77, v71, v21);
  int v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v79 + 88))(v77, v21);
  if (v31 == enum case for SFAirDropReceive.ItemDestination.customApp(_:))
  {
    uint64_t v33 = *(uint64_t **)(v0 + 488);
    (*(void (**)(uint64_t *, void))(*(void *)(v0 + 480) + 96LL))(v33, *(void *)(v0 + 472));
    uint64_t v34 = *v33;
    uint64_t v35 = (const char *)v33[1];
    if (v34 == 0xD000000000000034LL && v35 == (const char *)0x8000000100504BB0LL)
    {
      __n128 v32 = swift_bridgeObjectRelease((const char *)0x8000000100504BB0LL);
LABEL_8:
      (*(void (**)(void, void, __n128))(v0 + 680))(*(void *)(v0 + 496), *(void *)(v0 + 472), v32);
LABEL_10:
      uint64_t v41 = *(void (**)(uint64_t, uint64_t, __n128))(v0 + 680);
      uint64_t v42 = *(void *)(v0 + 520);
      uint64_t v43 = *(void *)(v0 + 472);
      uint64_t v44 = *(const char **)(v0 + 360);
      (*(void (**)(void, uint64_t, uint64_t))(v0 + 672))(*(void *)(v0 + 344), v42, v43);
      __n128 v45 = swift_bridgeObjectRetain(v44);
      v41(v42, v43, v45);
      sub_10018709C(v82);
      uint64_t v83 = *(void *)(v0 + 360);
      uint64_t v46 = *(void *)(v0 + 632);
      uint64_t v47 = *(void *)(v0 + 624);
      uint64_t v48 = *(void *)(v0 + 600);
      uint64_t v49 = *(void *)(v0 + 592);
      uint64_t v50 = *(void *)(v0 + 568);
      uint64_t v51 = *(void *)(v0 + 560);
      uint64_t v52 = *(void *)(v0 + 536);
      uint64_t v53 = *(void *)(v0 + 528);
      uint64_t v54 = *(void *)(v0 + 520);
      uint64_t v65 = *(void *)(v0 + 512);
      uint64_t v66 = *(void *)(v0 + 504);
      uint64_t v68 = *(void *)(v0 + 496);
      uint64_t v70 = *(void *)(v0 + 488);
      uint64_t v72 = *(void *)(v0 + 464);
      uint64_t v75 = *(void *)(v0 + 456);
      uint64_t v78 = *(void *)(v0 + 448);
      uint64_t v80 = *(void *)(v0 + 424);
      uint64_t v81 = *(void *)(v0 + 400);
      swift_task_dealloc(*(void *)(v0 + 640));
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      swift_task_dealloc(v48);
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      swift_task_dealloc(v53);
      swift_task_dealloc(v54);
      swift_task_dealloc(v65);
      swift_task_dealloc(v66);
      swift_task_dealloc(v68);
      swift_task_dealloc(v70);
      swift_task_dealloc(v72);
      swift_task_dealloc(v75);
      swift_task_dealloc(v78);
      swift_task_dealloc(v80);
      swift_task_dealloc(v81);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(1LL, v83);
    }

    uint64_t v36 = *(void (**)(uint64_t, uint64_t, __n128))(v0 + 680);
    uint64_t v37 = *(void *)(v0 + 496);
    uint64_t v38 = *(void *)(v0 + 472);
    char v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v35, 0xD000000000000034LL, 0x8000000100504BB0LL, 0LL);
    __n128 v40 = swift_bridgeObjectRelease(v35);
    v36(v37, v38, v40);
    if ((v39 & 1) != 0) {
      goto LABEL_10;
    }
  }

  else
  {
    if (v31 == enum case for SFAirDropReceive.ItemDestination.noItem(_:)) {
      goto LABEL_8;
    }
    uint64_t v56 = *(void (**)(uint64_t, uint64_t))(v0 + 680);
    uint64_t v57 = *(void *)(v0 + 496);
    uint64_t v58 = *(void *)(v0 + 472);
    v56(*(void *)(v0 + 488), v58);
    v56(v57, v58);
  }

  uint64_t v59 = *(void *)(v0 + 520);
  uint64_t v60 = *(void *)(v0 + 360);
  uint64_t v61 = *(void *)(v0 + 80);
  uint64_t v62 = *(void *)(v0 + 88);
  sub_10019A708(v82, v61);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 8))(v60, v59, v61, v62);
  uint64_t v63 = (void *)swift_task_alloc(async function pointer to SFProgressTask.finalValue.getter[1]);
  *(void *)(v0 + 720) = v63;
  *uint64_t v63 = v0;
  v63[1] = sub_1001D5544;
  return SFProgressTask.finalValue.getter(v0 + 736, *(void *)(v0 + 408));
}

uint64_t sub_1001D509C()
{
  uint64_t v1 = v0[86];
  uint64_t v2 = v0[81];
  swift_task_dealloc(v0[87]);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1001D50E8, v2, 0LL);
}

uint64_t sub_1001D50E8()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 680);
  uint64_t v2 = *(void *)(v0 + 520);
  uint64_t v4 = *(void *)(v0 + 464);
  uint64_t v3 = *(void *)(v0 + 472);
  (*(void (**)(void, void))(*(void *)(v0 + 440) + 8LL))(*(void *)(v0 + 456), *(void *)(v0 + 432));
  sub_100187100(v4, &qword_100646800);
  v1(v2, v3);
  uint64_t v5 = *(void *)(v0 + 712);
  uint64_t v6 = *(void *)(v0 + 400);
  uint64_t v7 = *(void *)(v0 + 384);
  *(void *)(v0 + 304) = v5;
  swift_errorRetain(v5);
  uint64_t v8 = sub_100183098(&qword_100645710);
  if ((swift_dynamicCast(v6, v0 + 304, v8, v7, 0LL) & 1) != 0)
  {
    int v9 = (*(uint64_t (**)(void, void))(*(void *)(v0 + 392) + 88LL))( *(void *)(v0 + 400),  *(void *)(v0 + 384));
    if (v9 == enum case for SFAirDropReceive.Failure.declined(_:))
    {
      uint64_t v10 = swift_errorRelease(v5);
      uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
      os_log_type_t v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v13 = 0;
        uint64_t v14 = "Classroom Ask open/move END - Declined. Not opening or moving";
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v11, v12, v14, v13, 2u);
        swift_slowDealloc(v13, -1LL, -1LL);
        goto LABEL_9;
      }

      goto LABEL_9;
    }

    if (v9 == enum case for SFAirDropReceive.Failure.askNotHandled(_:))
    {
      uint64_t v15 = swift_errorRelease(v5);
      uint64_t v11 = (os_log_s *)Logger.logObject.getter(v15);
      os_log_type_t v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v13 = 0;
        uint64_t v14 = "Classroom Ask open/move END - Not handled. Not opening or moving";
        goto LABEL_8;
      }

uint64_t sub_1001D5544()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 720LL);
  *(void *)(*(void *)v1 + 728LL) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = v2[81];
  (*(void (**)(void, void))(v2[52] + 8LL))(v2[53], v2[51]);
  if (v0) {
    uint64_t v5 = sub_1001D5760;
  }
  else {
    uint64_t v5 = sub_1001D55C4;
  }
  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_1001D55C4()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, __n128))(v0 + 680);
  uint64_t v2 = *(void *)(v0 + 520);
  uint64_t v3 = *(void *)(v0 + 472);
  uint64_t v4 = *(const char **)(v0 + 360);
  unsigned int v26 = *(unsigned __int8 *)(v0 + 736);
  (*(void (**)(void, uint64_t, uint64_t))(v0 + 672))(*(void *)(v0 + 344), v2, v3);
  __n128 v5 = swift_bridgeObjectRetain(v4);
  v1(v2, v3, v5);
  sub_10018709C((void *)(v0 + 56));
  uint64_t v25 = *(void *)(v0 + 360);
  uint64_t v6 = *(void *)(v0 + 632);
  uint64_t v7 = *(void *)(v0 + 624);
  uint64_t v8 = *(void *)(v0 + 600);
  uint64_t v9 = *(void *)(v0 + 592);
  uint64_t v10 = *(void *)(v0 + 568);
  uint64_t v11 = *(void *)(v0 + 560);
  uint64_t v12 = *(void *)(v0 + 536);
  uint64_t v13 = *(void *)(v0 + 528);
  uint64_t v14 = *(void *)(v0 + 520);
  uint64_t v16 = *(void *)(v0 + 512);
  uint64_t v17 = *(void *)(v0 + 504);
  uint64_t v18 = *(void *)(v0 + 496);
  uint64_t v19 = *(void *)(v0 + 488);
  uint64_t v20 = *(void *)(v0 + 464);
  uint64_t v21 = *(void *)(v0 + 456);
  uint64_t v22 = *(void *)(v0 + 448);
  uint64_t v23 = *(void *)(v0 + 424);
  uint64_t v24 = *(void *)(v0 + 400);
  swift_task_dealloc(*(void *)(v0 + 640));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void, uint64_t))(v0 + 8))(v26, v25);
}

uint64_t sub_1001D5760()
{
  uint64_t v1 = *(void *)(v0 + 728);
  uint64_t v2 = *(void *)(v0 + 400);
  uint64_t v3 = *(void *)(v0 + 384);
  *(void *)(v0 + 304) = v1;
  swift_errorRetain(v1);
  uint64_t v4 = sub_100183098(&qword_100645710);
  if ((swift_dynamicCast(v2, v0 + 304, v4, v3, 0LL) & 1) != 0)
  {
    int v5 = (*(uint64_t (**)(void, void))(*(void *)(v0 + 392) + 88LL))( *(void *)(v0 + 400),  *(void *)(v0 + 384));
    if (v5 == enum case for SFAirDropReceive.Failure.declined(_:))
    {
      uint64_t v6 = swift_errorRelease(v1);
      uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
      os_log_type_t v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v9 = 0;
        uint64_t v10 = "Classroom Ask open/move END - Declined. Not opening or moving";
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v7, v8, v10, v9, 2u);
        swift_slowDealloc(v9, -1LL, -1LL);
        goto LABEL_9;
      }

      goto LABEL_9;
    }

    if (v5 == enum case for SFAirDropReceive.Failure.askNotHandled(_:))
    {
      uint64_t v11 = swift_errorRelease(v1);
      uint64_t v7 = (os_log_s *)Logger.logObject.getter(v11);
      os_log_type_t v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v9 = 0;
        uint64_t v10 = "Classroom Ask open/move END - Not handled. Not opening or moving";
        goto LABEL_8;
      }

uint64_t sub_1001D5B94()
{
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine15ClassroomRunner_classroomHandler));
  return swift_bridgeObjectRelease(*(void *)(v0
                                             + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine15ClassroomRunner_recordID
                                             + 8));
}

uint64_t sub_1001D5BC4()
{
  uint64_t v0 = sub_10044E5F0();
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine15ClassroomRunner_classroomHandler));
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine15ClassroomRunner_recordID
                                      + 8));
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_1001D5C18()
{
  return _s15ClassroomRunnerCMa(0LL);
}

uint64_t _s15ClassroomRunnerCMa(uint64_t a1)
{
  uint64_t result = qword_1006465C0;
  if (!qword_1006465C0) {
    return swift_getSingletonMetadata(a1, &_s15ClassroomRunnerCMn);
  }
  return result;
}

uint64_t sub_1001D5C5C(uint64_t a1)
{
  v2[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[1] = &unk_1004CDD00;
  return swift_updateClassMetadata2(a1, 256LL, 2LL, v2, a1 + 472);
}

uint64_t sub_1001D5CA8(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  uint8_t v3[16] = a1;
  uint64_t v4 = type metadata accessor for SFAirDropReceive.Failure(0LL);
  v3[19] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[20] = v5;
  v3[21] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for SFAirDropReceive.ItemDestination(0LL);
  v3[22] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[23] = v7;
  v3[24] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100183098((uint64_t *)&unk_100656450);
  v3[25] = v8;
  unint64_t v9 = (*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[26] = swift_task_alloc(v9);
  v3[27] = swift_task_alloc(v9);
  uint64_t v10 = sub_100183098(&qword_1006467E0);
  v3[28] = v10;
  unint64_t v11 = (*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[29] = swift_task_alloc(v11);
  v3[30] = swift_task_alloc(v11);
  uint64_t v12 = type metadata accessor for SFAirDropReceive.Transfer.State(0LL);
  v3[31] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v3[32] = v13;
  v3[33] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Date(0LL);
  v3[34] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v3[35] = v15;
  unint64_t v16 = (*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[36] = swift_task_alloc(v16);
  v3[37] = swift_task_alloc(v16);
  uint64_t v17 = type metadata accessor for SFAirDrop.DeclineAction(0LL);
  v3[38] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v3[39] = v18;
  v3[40] = swift_task_alloc((*(void *)(v18 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for SFAirDropReceive.AskRequest(0LL);
  v3[41] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v3[42] = v20;
  v3[43] = swift_task_alloc((*(void *)(v20 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for SFAirDropReceive.Transfer(0LL);
  v3[44] = v21;
  uint64_t v22 = *(void *)(v21 - 8);
  v3[45] = v22;
  unint64_t v23 = (*(void *)(v22 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[46] = swift_task_alloc(v23);
  v3[47] = swift_task_alloc(v23);
  uint64_t v24 = sub_100183098(&qword_1006467E8);
  v3[48] = v24;
  uint64_t v25 = *(void *)(v24 - 8);
  v3[49] = v25;
  v3[50] = swift_task_alloc((*(void *)(v25 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v26 = static AirDropActor.shared;
  v3[51] = static AirDropActor.shared;
  return swift_task_switch(sub_1001D5EEC, v26, 0LL);
}

uint64_t sub_1001D5EEC()
{
  uint64_t v35 = *(void *)(v0 + 400);
  uint64_t v1 = *(void *)(v0 + 376);
  uint64_t v45 = *(void *)(v0 + 360);
  uint64_t v2 = *(void *)(v0 + 344);
  uint64_t v44 = *(void *)(v0 + 352);
  uint64_t v31 = *(void *)(v0 + 336);
  uint64_t v32 = *(void *)(v0 + 328);
  uint64_t v40 = *(void *)(v0 + 312);
  uint64_t v41 = *(void *)(v0 + 304);
  uint64_t v36 = *(void *)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 264);
  uint64_t v42 = *(void *)(v0 + 256);
  uint64_t v43 = *(void *)(v0 + 248);
  uint64_t v39 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v37 = *(void *)(v0 + 184);
  uint64_t v38 = *(void *)(v0 + 136);
  uint64_t v5 = sub_100183098(&qword_1006457D8);
  SFProgressContinuation.task.getter(v5);
  uint64_t v6 = v4 + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_contentHandler;
  swift_beginAccess( v4 + OBJC_IVAR____TtCC16DaemoniOSLibrary28SDAirDropReceiveStateMachine10BaseRunner_contentHandler,  v0 + 96,  0LL,  0LL);
  sub_10019A6C4(v6, v0 + 16);
  uint64_t v7 = *(void *)(v0 + 40);
  uint64_t v8 = *(void *)(v0 + 48);
  unint64_t v9 = sub_10019A708((void *)(v0 + 16), v7);
  uint64_t v10 = CurrentValueSubject.value.getter(v9);
  SFAirDropReceive.Transfer.askRequest.getter(v10);
  uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
  *(void *)(v0 + 4swift_unknownObjectWeakDestroy(v0 + 16) = v46;
  v46(v1, v44);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v2, 1LL, v7, v8);
  uint64_t v33 = v12;
  uint64_t v34 = v11;
  *(void *)(v0 + 424) = v11;
  *(void *)(v0 + 432) = v12;
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v2, v32);
  sub_10018709C((void *)(v0 + 16));
  sub_10019A6C4(v6, v0 + 56);
  uint64_t v13 = *(void *)(v0 + 80);
  uint64_t v14 = *(void *)(v0 + 88);
  uint64_t v15 = sub_10019A708((void *)(v0 + 56), v13);
  CurrentValueSubject.value.getter(v15);
  uint64_t v16 = type metadata accessor for SFAirDrop.Progress(0LL);
  *(void *)(v0 + 440) = v16;
  uint64_t v17 = sub_100183098((uint64_t *)&unk_1006464E0);
  sub_1003C894C(v1, 0x726566736E617274LL, (void *)0xEC000000676E6972LL, v35, v13, v16, v17, v14, v36);
  v46(v1, v44);
  uint64_t v18 = sub_10018709C((void *)(v0 + 56));
  static Date.now.getter(v18);
  uint64_t v19 = (int *)sub_100183098(&qword_10064B770);
  *(void *)(v0 + 44_Block_object_dispose(va, 8) = v19;
  uint64_t v20 = v3 + v19[12];
  uint64_t v21 = (uint64_t *)(v3 + v19[16]);
  uint64_t v22 = v3 + v19[20];
  unint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16);
  *(void *)(v0 + 456) = v23;
  v23(v3, v38, v39);
  uint64_t v24 = enum case for SFAirDrop.Progress.transferringIndeterminate(_:);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104LL);
  *(void *)(v0 + 464) = v25;
  v25(v20, v24, v16);
  *uint64_t v21 = v34;
  v21[1] = (uint64_t)v33;
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16);
  *(void *)(v0 + 472) = v26;
  v26(v22, v36, v41);
  *(_DWORD *)(v0 + 6swift_unknownObjectWeakDestroy(v0 + 16) = enum case for SFAirDropReceive.Transfer.State.transferring(_:);
  uint64_t v27 = *(void (**)(uint64_t))(v42 + 104);
  *(void *)(v0 + 480) = v27;
  v27(v3);
  swift_bridgeObjectRetain(v33);
  sub_10044E6FC(v3, v1);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
  *(void *)(v0 + 48_Block_object_dispose(va, 8) = v28;
  v28(v3, v43);
  v46(v1, v44);
  uint64_t v29 = (void *)swift_task_alloc(async function pointer to SFProgressTask.finalValue.getter[1]);
  *(void *)(v0 + 496) = v29;
  *uint64_t v29 = v0;
  v29[1] = sub_1001D6254;
  return SFProgressTask.finalValue.getter(v0 + 120, *(void *)(v0 + 384));
}

uint64_t sub_1001D6254()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 496);
  *(void *)(*v1 + 504) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 408);
    swift_bridgeObjectRelease(*(const char **)(v2 + 432));
    uint64_t v5 = sub_1001D6B08;
    uint64_t v6 = v4;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 408);
    uint64_t v5 = sub_1001D62C8;
  }

  return swift_task_switch(v5, v6, 0LL);
}

uint64_t sub_1001D62C8()
{
  uint64_t v35 = *(void (**)(uint64_t, void, uint64_t))(v0 + 480);
  unsigned int v34 = *(_DWORD *)(v0 + 616);
  uint64_t v32 = *(void (**)(const char **, void, uint64_t))(v0 + 464);
  uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 472);
  uint64_t v2 = *(int **)(v0 + 448);
  uint64_t v1 = *(void (**)(uint64_t, void, uint64_t))(v0 + 456);
  uint64_t v3 = *(void *)(v0 + 440);
  uint64_t v31 = *(void *)(v0 + 432);
  uint64_t v30 = *(void *)(v0 + 424);
  uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 416);
  uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
  uint64_t v4 = *(void *)(v0 + 376);
  uint64_t v38 = *(void *)(v0 + 352);
  uint64_t v28 = *(void *)(v0 + 304);
  uint64_t v29 = *(void *)(v0 + 320);
  uint64_t v45 = *(void *)(v0 + 296);
  uint64_t v37 = *(void *)(v0 + 288);
  uint64_t v5 = *(void *)(v0 + 264);
  uint64_t v6 = *(void *)(v0 + 248);
  uint64_t v7 = *(void *)(v0 + 176);
  uint64_t v8 = *(const char **)(v0 + 120);
  *(void *)(v0 + 512) = v8;
  unint64_t v9 = (const char **)(v5 + v2[12]);
  uint64_t v10 = (void *)(v5 + v2[16]);
  uint64_t v11 = v5 + v2[20];
  v1(v5, *(void *)(v0 + 136), v7);
  *unint64_t v9 = v8;
  v32(v9, enum case for SFAirDrop.Progress.completed(_:), v3);
  *uint64_t v10 = v30;
  v10[1] = v31;
  v33(v11, v29, v28);
  v35(v5, v34, v6);
  uint64_t v36 = (uint64_t)v8;
  swift_bridgeObjectRetain(v8);
  sub_10044E6FC(v5, v4);
  v42(v5, v6);
  uint64_t v12 = v40(v4, v38);
  static Date.now.getter(v12);
  sub_100183F14( (unint64_t *)&unk_100656470,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)(v45, v37);
  if ((result & 1) != 0)
  {
    uint64_t v14 = *(void *)(v0 + 288);
    uint64_t v15 = *(void *)(v0 + 272);
    uint64_t v16 = *(void **)(v0 + 280);
    uint64_t v46 = *(void *)(v0 + 240);
    uint64_t v43 = *(void *)(v0 + 232);
    uint64_t v17 = *(void *)(v0 + 216);
    uint64_t v44 = *(void *)(v0 + 224);
    uint64_t v18 = *(void *)(v0 + 208);
    uint64_t v19 = *(void *)(v0 + 200);
    uint64_t v39 = v19;
    uint64_t v20 = v17 + *(int *)(v19 + 48);
    uint64_t v21 = (void (*)(uint64_t, uint64_t, uint64_t))v16[2];
    v21(v17, *(void *)(v0 + 296), v15);
    uint64_t v22 = (void (*)(uint64_t, uint64_t, uint64_t))v16[4];
    uint64_t v41 = v20;
    v22(v20, v14, v15);
    uint64_t v23 = v18 + *(int *)(v19 + 48);
    v21(v18, v17, v15);
    v21(v23, v20, v15);
    v22(v43, v18, v15);
    uint64_t v24 = (void (*)(uint64_t, uint64_t))v16[1];
    *(void *)(v0 + 520) = v24;
    v24(v23, v15);
    uint64_t v25 = v18 + *(int *)(v39 + 48);
    v22(v18, v17, v15);
    v22(v25, v41, v15);
    v22(v43 + *(int *)(v44 + 36), v25, v15);
    v24(v18, v15);
    uint64_t v26 = sub_1001D6E30(v43, v46);
    *(double *)(v0 + 52_Block_object_dispose(va, 8) = ClosedRange<>.interval.getter(v26);
    sub_100187100(v46, &qword_1006467E0);
    uint64_t v27 = (void *)swift_task_alloc(dword_100656184);
    *(void *)(v0 + 536) = v27;
    *uint64_t v27 = v0;
    v27[1] = sub_1001D65C8;
    return sub_10044EFB4(v36, *(void *)(v0 + 136));
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1001D65C8(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 536);
  uint64_t v5 = *v2;
  *(void *)(v5 + 544) = a1;
  *(void *)(v5 + 552) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    uint64_t v6 = *(void *)(v5 + 408);
    swift_bridgeObjectRelease(*(const char **)(v5 + 512));
    return swift_task_switch(sub_1001D6BC8, v6, 0LL);
  }

  else
  {
    uint64_t v8 = (void *)swift_task_alloc(dword_1006467F4);
    *(void *)(v5 + 560) = v8;
    *uint64_t v8 = v5;
    v8[1] = sub_1001D6698;
    return sub_1001D35BC(*(void *)(v5 + 192), 1, *(void *)(v5 + 512), a1, *(void *)(v5 + 136));
  }

uint64_t sub_1001D6698(char a1, uint64_t a2)
{
  uint64_t v6 = (*v3)[70];
  uint64_t v7 = *v3;
  v7[71] = a2;
  v7[72] = v2;
  swift_task_dealloc(v6);
  if (v2)
  {
    uint64_t v8 = (const char *)v7[64];
    uint64_t v9 = v7[51];
    *(void *)&double v10 = swift_bridgeObjectRelease((const char *)v7[68]).n128_u64[0];
    swift_bridgeObjectRelease(v8, v10);
    return swift_task_switch(sub_1001D6C88, v9, 0LL);
  }

  else
  {
    uint64_t v12 = (uint64_t **)swift_task_alloc(dword_100656194);
    v7[73] = (uint64_t)v12;
    *uint64_t v12 = v7;
    v12[1] = (uint64_t *)sub_1001D677C;
    return sub_100451C44(v7[46], v7[64], v7[68], a2, 1LL, a1 & 1, v7[24], 0LL);
  }

uint64_t sub_1001D677C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 584);
  *(void *)(*v1 + 592) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(const char **)(v2 + 568);
  uint64_t v5 = *(const char **)(v2 + 544);
  uint64_t v6 = *(const char **)(v2 + 512);
  if (v0)
  {
    uint64_t v7 = *(void *)(v2 + 408);
    *(void *)&double v8 = swift_bridgeObjectRelease((const char *)*(void *)(v2 + 568)).n128_u64[0];
    *(void *)&double v9 = swift_bridgeObjectRelease(v5, v8).n128_u64[0];
    swift_bridgeObjectRelease(v6, v9);
    double v10 = sub_1001D6D48;
  }

  else
  {
    uint64_t v7 = *(void *)(v2 + 408);
    (*(void (**)(void, void))(v2 + 416))(*(void *)(v2 + 368), *(void *)(v2 + 352));
    *(void *)&double v11 = swift_bridgeObjectRelease(v4).n128_u64[0];
    *(void *)&double v12 = swift_bridgeObjectRelease(v5, v11).n128_u64[0];
    swift_bridgeObjectRelease(v6, v12);
    double v10 = sub_1001D6840;
  }

  return swift_task_switch(v10, v7, 0LL);
}

uint64_t sub_1001D6840()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 520);
  uint64_t v3 = *(void *)(v0 + 392);
  uint64_t v2 = *(void *)(v0 + 400);
  uint64_t v4 = *(void *)(v0 + 384);
  uint64_t v6 = *(void *)(v0 + 312);
  uint64_t v5 = *(void *)(v0 + 320);
  uint64_t v8 = *(void *)(v0 + 296);
  uint64_t v7 = *(void *)(v0 + 304);
  uint64_t v9 = *(void *)(v0 + 272);
  (*(void (**)(void, void))(*(void *)(v0 + 184) + 8LL))(*(void *)(v0 + 192), *(void *)(v0 + 176));
  v1(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v10 = *(void *)(v0 + 368);
  uint64_t v11 = *(void *)(v0 + 376);
  uint64_t v12 = *(void *)(v0 + 344);
  uint64_t v13 = *(void *)(v0 + 320);
  uint64_t v15 = *(void *)(v0 + 288);
  uint64_t v14 = *(void *)(v0 + 296);
  uint64_t v16 = *(void *)(v0 + 264);
  uint64_t v18 = *(void *)(v0 + 232);
  uint64_t v17 = *(void *)(v0 + 240);
  uint64_t v20 = *(void *)(v0 + 216);
  uint64_t v21 = *(void *)(v0 + 208);
  uint64_t v22 = *(void *)(v0 + 192);
  uint64_t v23 = *(void *)(v0 + 168);
  swift_task_dealloc(*(void *)(v0 + 400));
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001D697C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 408LL);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 416LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 376LL);
  uint64_t v4 = *(void *)(*(void *)v0 + 352LL);
  uint64_t v6 = *(void *)(*(void *)v0 + 160LL);
  uint64_t v5 = *(void *)(*(void *)v0 + 168LL);
  uint64_t v7 = *(void *)(*(void *)v0 + 152LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 608LL));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v2(v3, v4);
  return swift_task_switch(sub_1001D6A18, v1, 0LL);
}

uint64_t sub_1001D6A18()
{
  uint64_t v1 = *(void *)(v0 + 368);
  uint64_t v2 = *(void *)(v0 + 376);
  uint64_t v3 = *(void *)(v0 + 344);
  uint64_t v4 = *(void *)(v0 + 320);
  uint64_t v6 = *(void *)(v0 + 288);
  uint64_t v5 = *(void *)(v0 + 296);
  uint64_t v7 = *(void *)(v0 + 264);
  uint64_t v9 = *(void *)(v0 + 232);
  uint64_t v8 = *(void *)(v0 + 240);
  uint64_t v11 = *(void *)(v0 + 216);
  uint64_t v12 = *(void *)(v0 + 208);
  uint64_t v13 = *(void *)(v0 + 192);
  uint64_t v14 = *(void *)(v0 + 168);
  swift_task_dealloc(*(void *)(v0 + 400));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001D6B08()
{
  uint64_t v2 = v0[49];
  uint64_t v1 = v0[50];
  uint64_t v3 = v0[48];
  uint64_t v5 = v0[39];
  uint64_t v4 = v0[40];
  uint64_t v6 = v0[38];
  (*(void (**)(uint64_t, uint64_t))(v0[35] + 8))(v0[37], v0[34]);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v7 = v0[63];
  v0[75] = v7;
  swift_errorRetain(v7);
  SFAirDropReceive.Failure.init(_:)(v7);
  uint64_t v8 = (uint64_t **)swift_task_alloc(dword_1006561A4);
  v0[76] = (uint64_t)v8;
  *uint64_t v8 = v0;
  v8[1] = (uint64_t *)sub_1001D697C;
  return sub_100452C38(v0[47], v0[21]);
}

uint64_t sub_1001D6BC8()
{
  uint64_t v2 = *(void *)(v0 + 392);
  uint64_t v1 = *(void *)(v0 + 400);
  uint64_t v3 = *(void *)(v0 + 384);
  uint64_t v5 = *(void *)(v0 + 312);
  uint64_t v4 = *(void *)(v0 + 320);
  uint64_t v6 = *(void *)(v0 + 304);
  (*(void (**)(void, void))(v0 + 520))(*(void *)(v0 + 296), *(void *)(v0 + 272));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v7 = *(void *)(v0 + 552);
  *(void *)(v0 + 600) = v7;
  swift_errorRetain(v7);
  SFAirDropReceive.Failure.init(_:)(v7);
  uint64_t v8 = (void *)swift_task_alloc(dword_1006561A4);
  *(void *)(v0 + 60_Block_object_dispose(va, 8) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1001D697C;
  return sub_100452C38(*(void *)(v0 + 376), *(void *)(v0 + 168));
}

uint64_t sub_1001D6C88()
{
  uint64_t v2 = *(void *)(v0 + 392);
  uint64_t v1 = *(void *)(v0 + 400);
  uint64_t v3 = *(void *)(v0 + 384);
  uint64_t v5 = *(void *)(v0 + 312);
  uint64_t v4 = *(void *)(v0 + 320);
  uint64_t v6 = *(void *)(v0 + 304);
  (*(void (**)(void, void))(v0 + 520))(*(void *)(v0 + 296), *(void *)(v0 + 272));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v7 = *(void *)(v0 + 576);
  *(void *)(v0 + 600) = v7;
  swift_errorRetain(v7);
  SFAirDropReceive.Failure.init(_:)(v7);
  uint64_t v8 = (void *)swift_task_alloc(dword_1006561A4);
  *(void *)(v0 + 60_Block_object_dispose(va, 8) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1001D697C;
  return sub_100452C38(*(void *)(v0 + 376), *(void *)(v0 + 168));
}

uint64_t sub_1001D6D48()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[65];
  uint64_t v3 = v0[49];
  uint64_t v2 = v0[50];
  uint64_t v4 = v0[48];
  uint64_t v6 = v0[39];
  uint64_t v5 = v0[40];
  uint64_t v8 = v0[37];
  uint64_t v7 = v0[38];
  uint64_t v9 = v0[34];
  (*(void (**)(uint64_t, uint64_t))(v0[23] + 8))(v0[24], v0[22]);
  v1(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v10 = v0[74];
  v0[75] = v10;
  swift_errorRetain(v10);
  SFAirDropReceive.Failure.init(_:)(v10);
  uint64_t v11 = (uint64_t **)swift_task_alloc(dword_1006561A4);
  v0[76] = (uint64_t)v11;
  *uint64_t v11 = v0;
  v11[1] = (uint64_t *)sub_1001D697C;
  return sub_100452C38(v0[47], v0[21]);
}

uint64_t sub_1001D6E30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100183098(&qword_1006467E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001D6E78(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_100650B6C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100195708;
  return sub_10036E2E0(a1, v4);
}

void sub_1001D6ED0()
{
}

uint64_t sub_1001D6ED8(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_100650B6C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1001943E8;
  return sub_10036E2E0(a1, v4);
}

uint64_t sub_1001D6F34()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for PersonaSession()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary14PersonaSession);
}

uint64_t AirDropActor.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_1001D6F94()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100186DFC(v0, qword_100646930);
  uint64_t v1 = sub_100186DE4(v0, (uint64_t)qword_100646930);
  if (qword_100644020 != -1) {
    swift_once(&qword_100644020, sub_10023A520);
  }
  uint64_t v2 = sub_100186DE4(v0, (uint64_t)qword_1006696B8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

void sub_1001D7024()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = *(void **)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_queue];
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    if (qword_100643EE0 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_100643EE0, sub_1001D6F94);
LABEL_3:
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v7, (uint64_t)qword_100646930);
  uint64_t v8 = v0;
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = (char **)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v11 = 138412290;
    uint64_t v21 = v8;
    uint64_t v13 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v11 + 4, v11 + 12);
    *uint64_t v12 = v8;

    _os_log_impl((void *)&_mh_execute_header, v9, v10, "SDAuthenticationAuthSession: Invalidating %@", v11, 0xCu);
    uint64_t v14 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v12, 1LL, v14);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {

    uint64_t v9 = (os_log_s *)v8;
  }

  uint64_t v15 = *(void *)&v8[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationAuthSession_rangingSession];
  if (v15)
  {
    swift_retain(*(void *)&v8[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationAuthSession_rangingSession]);
    sub_1002C3F90();
    swift_release(v15);
  }

  uint64_t v16 = *(void **)&v8[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationAuthSession_wifiRequest];
  if (v16)
  {
    uint64_t v17 = (void *)objc_opt_self(&OBJC_CLASS___SDAutoUnlockWiFiManager);
    id v18 = v16;
    id v19 = [v17 sharedManager];
    [v19 cancelWiFiRequest:v18];
  }

uint64_t sub_1001D72C4()
{
  return sub_100189B20( *(void *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationAuthSession_AWDLInfo),  *(void *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationAuthSession_AWDLInfo + 8));
}

id sub_1001D7304()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SDAuthenticationAuthSession(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001D7384()
{
  return type metadata accessor for SDAuthenticationAuthSession(0LL);
}

uint64_t type metadata accessor for SDAuthenticationAuthSession(uint64_t a1)
{
  uint64_t result = qword_100646970;
  if (!qword_100646970) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SDAuthenticationAuthSession);
  }
  return result;
}

uint64_t sub_1001D73C8(uint64_t a1)
{
  v2[0] = "\b";
  v2[1] = "\b";
  void v2[2] = &unk_1004CDDE8;
  return swift_updateClassMetadata2(a1, 256LL, 3LL, v2, a1 + 264);
}

id sub_1001D7414(uint64_t a1, uint64_t a2, unint64_t a3, char *a4, uint64_t a5)
{
  id v6 = v5;
  uint64_t v30 = a1;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationAuthSession_rangingSession;
  *(void *)&v5[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationAuthSession_rangingSession] = 0LL;
  *(void *)&v5[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationAuthSession_wifiRequest] = 0LL;
  if ((unint64_t)(a5 - 1) > 3)
  {
    uint64_t v19 = *(void *)&v5[v15];
    *(void *)&v6[v15] = 0LL;
    uint64_t v20 = v6;
  }

  else
  {
    uint64_t v16 = type metadata accessor for SDAuthenticationRangingSession(0LL);
    swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    uint64_t v17 = v5;
    uint64_t v18 = sub_1002C0CFC();
    uint64_t v19 = *(void *)&v5[v15];
    *(void *)&v6[v15] = v18;
  }

  swift_release(v19);
  uint64_t v21 = (uint64_t *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary27SDAuthenticationAuthSession_AWDLInfo];
  *uint64_t v21 = a2;
  v21[1] = a3;
  sub_10019BA8C(a2, a3);

  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v22(v14, (uint64_t)a4, v11);
  uint64_t v23 = &v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate];
  *(_OWORD *)uint64_t v23 = 0u;
  *((_OWORD *)v23 + 1) = 0u;
  *((void *)v23 + 4) = 0LL;
  uint64_t v24 = &v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice];
  *(_OWORD *)uint64_t v24 = 0u;
  *((_OWORD *)v24 + 1) = 0u;
  *((void *)v24 + 4) = 0LL;
  *(void *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_responseTimer] = 0LL;
  *(void *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_queue] = v30;
  v22(&v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_sessionID], (uint64_t)v14, v11);
  *(void *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type] = a5;
  uint64_t v25 = (objc_class *)type metadata accessor for SDAuthenticationSession(0LL);
  v31.receiver = v6;
  v31.super_class = v25;
  id v26 = objc_msgSendSuper2(&v31, "init");
  uint64_t v27 = *(void (**)(char *, uint64_t))(v12 + 8);
  v27(v14, v11);
  v27(a4, v11);
  return v26;
}

uint64_t sub_1001D75FC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100186DFC(v0, qword_100646980);
  uint64_t v1 = sub_100186DE4(v0, (uint64_t)qword_100646980);
  if (qword_100643FD8 != -1) {
    swift_once(&qword_100643FD8, sub_10023A408);
  }
  uint64_t v2 = sub_100186DE4(v0, (uint64_t)qword_1006695F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

void sub_1001D768C(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
    id v25 = 0LL;
    id v3 = a1;
    id v4 = [v2 archivedDataWithRootObject:v3 requiringSecureCoding:1 error:&v25];
    id v5 = v25;
    if (v4)
    {
      uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
      unint64_t v8 = v7;

      id v9 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      NSString v11 = String._bridgeToObjectiveC()();
      [v9 setObject:isa forKey:v11];

      sub_100189B20(v6, v8);
    }

    else
    {
      uint64_t v13 = v5;
      uint64_t v14 = _convertNSErrorToError(_:)(v5);

      swift_willThrow(v15);
      if (qword_100643EE8 != -1) {
        swift_once(&qword_100643EE8, sub_1001D75FC);
      }
      uint64_t v16 = type metadata accessor for Logger(0LL);
      sub_100186DE4(v16, (uint64_t)qword_100646980);
      swift_errorRetain(v14);
      uint64_t v17 = swift_errorRetain(v14);
      uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v21 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v20 = 138412290;
        swift_errorRetain(v14);
        uint64_t v22 = (void *)_swift_stdlib_bridgeErrorToNSError(v14);
        id v25 = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v20 + 4, v20 + 12);
        *uint64_t v21 = v22;
        swift_errorRelease(v14);
        swift_errorRelease(v14);
        _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "Failed to persist current pseudonym with error: %@",  v20,  0xCu);
        uint64_t v23 = sub_100183098(&qword_1006454E0);
        swift_arrayDestroy(v21, 1LL, v23);
        swift_slowDealloc(v21, -1LL, -1LL);
        swift_slowDealloc(v20, -1LL, -1LL);

        swift_errorRelease(v14);
      }

      else
      {

        swift_errorRelease(v14);
        swift_errorRelease(v14);
        swift_errorRelease(v14);
      }
    }
  }

  else
  {
    id v12 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
    id v24 = String._bridgeToObjectiveC()();
    objc_msgSend(v12, "removeObjectForKey:");
  }

uint64_t sub_1001D7A28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100183098(&qword_1006457E8);
  __chkstk_darwin(v2);
  id v4 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v5 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v5 objectForKey:v6];

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)(v26, v7);
    swift_unknownObjectRelease(v7);
    sub_100186D8C(v26, v27);
    sub_100187058((uint64_t)v27, (uint64_t)v26);
    uint64_t v8 = type metadata accessor for Date(0LL);
    int v9 = swift_dynamicCast(v4, v26, (char *)&type metadata for Any + 8, v8, 6LL);
    uint64_t v10 = *(void *)(v8 - 8);
    NSString v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    if (v9)
    {
      v11((uint64_t)v4, 0LL, 1LL, v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v4, 1LL, v8) != 1)
      {
        sub_10018709C(v27);
        (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v4, v8);
        uint64_t v12 = a1;
        uint64_t v13 = 0LL;
        return v11(v12, v13, 1LL, v8);
      }
    }

    else
    {
      v11((uint64_t)v4, 1LL, 1LL, v8);
    }

    sub_100187100((uint64_t)v4, &qword_1006457E8);
    if (qword_100643EE8 != -1) {
      swift_once(&qword_100643EE8, sub_1001D75FC);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    uint64_t v22 = sub_100186DE4(v21, (uint64_t)qword_100646980);
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      id v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "No valid after first use date to load", v25, 2u);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    sub_10018709C(v27);
    uint64_t v12 = a1;
    uint64_t v13 = 1LL;
    return v11(v12, v13, 1LL, v8);
  }

  if (qword_100643EE8 != -1) {
    swift_once(&qword_100643EE8, sub_1001D75FC);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v15 = sub_100186DE4(v14, (uint64_t)qword_100646980);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "No after first expiration date to load", v18, 2u);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  uint64_t v19 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))( a1,  1LL,  1LL,  v19);
}

uint64_t sub_1001D7D90(uint64_t a1)
{
  uint64_t v2 = sub_100183098(&qword_1006457E8);
  __chkstk_darwin(v2);
  id v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1001D95A8(a1, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
  {
    sub_100187100((uint64_t)v4, &qword_1006457E8);
    id v9 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
    NSString v10 = String._bridgeToObjectiveC()();
    [v9 removeObjectForKey:v10];

    return sub_100187100(a1, &qword_1006457E8);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    id v12 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    NSString v14 = String._bridgeToObjectiveC()();
    [v12 setObject:isa forKey:v14];

    sub_100187100(a1, &qword_1006457E8);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

void sub_1001D7F88(uint64_t a1)
{
  uint64_t v1 = a1;
  if (!*(void *)(a1 + 16))
  {
    swift_bridgeObjectRelease(a1);
    id v45 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
    id v59 = String._bridgeToObjectiveC()();
    objc_msgSend(v45, "removeObjectForKey:");

    return;
  }

  uint64_t v2 = sub_100391698((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v57 = v1 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(v1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  id v58 = (id)((unint64_t)(v3 + 63) >> 6);
  swift_bridgeObjectRetain(v1);
  uint64_t v6 = 0LL;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v6 << 6);
      goto LABEL_27;
    }

    uint64_t v11 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      goto LABEL_54;
    }
    unint64_t v12 = *(void *)(v57 + 8 * v11);
    ++v6;
    if (!v12)
    {
      uint64_t v6 = v11 + 1;
      unint64_t v12 = *(void *)(v57 + 8 * v6);
      if (!v12)
      {
        uint64_t v6 = v11 + 2;
        unint64_t v12 = *(void *)(v57 + 8 * v6);
        if (!v12)
        {
          uint64_t v6 = v11 + 3;
          unint64_t v12 = *(void *)(v57 + 8 * v6);
          if (!v12)
          {
            uint64_t v6 = v11 + 4;
            unint64_t v12 = *(void *)(v57 + 8 * v6);
            if (!v12)
            {
              uint64_t v13 = v11 + 5;
              unint64_t v12 = *(void *)(v57 + 8 * v13);
              if (!v12)
              {
                while (1)
                {
                  uint64_t v6 = v13 + 1;
                  if (__OFADD__(v13, 1LL)) {
                    goto LABEL_55;
                  }
                  unint64_t v12 = *(void *)(v57 + 8 * v6);
                  ++v13;
                  if (v12) {
                    goto LABEL_26;
                  }
                }
              }

              uint64_t v6 = v13;
            }
          }
        }
      }
    }

void sub_1001D8694(void *a1)
{
}

uint64_t sub_1001D86A8(uint64_t a1)
{
  return sub_1001D7D90(a1);
}

void (*sub_1001D86BC(void *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = sub_1001D8D98();
  return sub_1001D86F0;
}

void sub_1001D86F0(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if ((a2 & 1) != 0)
  {
    uint64_t v3 = swift_bridgeObjectRetain(*a1);
    sub_1001D7F88(v3);
    swift_bridgeObjectRelease(v2);
  }

  else
  {
    sub_1001D7F88(*a1);
  }

Swift::Int sub_1001D8734(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100183098((uint64_t *)&unk_1006469C0);
    uint64_t v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    uint64_t v30 = v4;
    uint64_t v5 = __CocoaDictionary.makeIterator()(a1);
    uint64_t v6 = __CocoaDictionary.Iterator.next()();
    if (v6)
    {
      uint64_t v8 = v6;
      uint64_t v9 = v7;
      uint64_t v10 = sub_100183168(0LL, &qword_100645168, &OBJC_CLASS___NSString_ptr);
      do
      {
        uint64_t v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
        uint64_t v27 = v9;
        uint64_t v21 = sub_100183168(0LL, &qword_1006469A8, &OBJC_CLASS___IDSPseudonym_ptr);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7LL);
        uint64_t v4 = v30;
        unint64_t v22 = *(void *)(v30 + 16);
        if (*(void *)(v30 + 24) <= v22)
        {
          sub_1003A8D2C(v22 + 1, 1LL);
          uint64_t v4 = v30;
        }

        uint64_t v12 = v28;
        uint64_t v11 = v29;
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
        uint64_t v14 = v4 + 64;
        uint64_t v15 = -1LL << *(_BYTE *)(v4 + 32);
        unint64_t v16 = result & ~v15;
        unint64_t v17 = v16 >> 6;
        if (((-1LL << v16) & ~*(void *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v23 = 0;
          unint64_t v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v25 = v17 == v24;
            if (v17 == v24) {
              unint64_t v17 = 0LL;
            }
            v23 |= v25;
            uint64_t v26 = *(void *)(v14 + 8 * v17);
          }

          while (v26 == -1);
          unint64_t v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }

        *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
        uint64_t v19 = 8 * v18;
        *(void *)(*(void *)(v4 + 48) + v19) = v11;
        *(void *)(*(void *)(v4 + 56) + v19) = v12;
        ++*(void *)(v4 + 16);
        uint64_t v8 = __CocoaDictionary.Iterator.next()();
        uint64_t v9 = v20;
      }

      while (v8);
    }

    swift_release(v5);
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }

  return v4;
}

uint64_t sub_1001D8984()
{
  id v0 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 dataForKey:v1];

  if (!v2)
  {
    if (qword_100643EE8 != -1) {
      swift_once(&qword_100643EE8, sub_1001D75FC);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    uint64_t v9 = sub_100186DE4(v8, (uint64_t)qword_100646980);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "No current pseudonym to load", v12, 2u);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    return 0LL;
  }

  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
  unint64_t v5 = v4;

  sub_100183168(0LL, &qword_100646998, &OBJC_CLASS___NSKeyedUnarchiver_ptr);
  uint64_t v6 = sub_100183168(0LL, &qword_1006469A8, &OBJC_CLASS___IDSPseudonym_ptr);
  uint64_t v7 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(v6, v3, v5, v6);
  uint64_t v13 = v7;
  if (!v7)
  {
    if (qword_100643EE8 != -1) {
      swift_once(&qword_100643EE8, sub_1001D75FC);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    uint64_t v16 = sub_100186DE4(v15, (uint64_t)qword_100646980);
    unint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "No valid current pseudonym to load", v19, 2u);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    sub_100189B20(v3, v5);

    return 0LL;
  }

  sub_100189B20(v3, v5);
  return v13;
}

void *sub_1001D8D98()
{
  id v0 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 dataForKey:v1];

  if (!v2)
  {
    if (qword_100643EE8 != -1) {
      swift_once(&qword_100643EE8, sub_1001D75FC);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    uint64_t v17 = sub_100186DE4(v16, (uint64_t)qword_100646980);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v18, "No pseudonyms to revoke to load", v19, 2u);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    goto LABEL_48;
  }

  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
  unint64_t v5 = v4;

  sub_100183168(0LL, &qword_100646998, &OBJC_CLASS___NSKeyedUnarchiver_ptr);
  uint64_t v6 = sub_100183098(&qword_1006469A0);
  uint64_t v7 = swift_allocObject(v6, 56LL, 7LL);
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1004CD550;
  *(void *)(v7 + 32) = sub_100183168(0LL, &qword_100645160, &OBJC_CLASS___NSDictionary_ptr);
  *(void *)(v7 + 40) = sub_100183168(0LL, &qword_100645168, &OBJC_CLASS___NSString_ptr);
  *(void *)(v7 + 4_Block_object_dispose(va, 8) = sub_100183168(0LL, &qword_1006469A8, &OBJC_CLASS___IDSPseudonym_ptr);
  static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)(&v63, v7, v3, v5);
  swift_bridgeObjectRelease(v7);
  if (!v64[2])
  {
    sub_100187100((uint64_t)&v63, (uint64_t *)&unk_100646550);
    goto LABEL_50;
  }

  uint64_t v20 = sub_100183098(&qword_1006469B0);
  if ((swift_dynamicCast(&v62, &v63, (char *)&type metadata for Any + 8, v20, 6LL) & 1) == 0)
  {
LABEL_50:
    if (qword_100643EE8 != -1) {
      swift_once(&qword_100643EE8, sub_1001D75FC);
    }
    uint64_t v52 = type metadata accessor for Logger(0LL);
    uint64_t v53 = sub_100186DE4(v52, (uint64_t)qword_100646980);
    uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
    os_log_type_t v55 = ((uint64_t (*)(void))static os_log_type_t.error.getter)();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "No valid pseudonyms to revoke", v56, 2u);
      swift_slowDealloc(v56, -1LL, -1LL);
    }

    sub_100189B20(v3, v5);

    return &_swiftEmptyDictionarySingleton;
  }

  unint64_t v58 = v5;
  uint64_t v59 = v3;
  uint64_t v21 = v62;
  unint64_t v22 = (void *)sub_10039168C((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v60 = v21 + 64;
  uint64_t v23 = 1LL << *(_BYTE *)(v21 + 32);
  uint64_t v24 = -1LL;
  if (v23 < 64) {
    uint64_t v24 = ~(-1LL << v23);
  }
  unint64_t v25 = v24 & *(void *)(v21 + 64);
  int64_t v61 = (unint64_t)(v23 + 63) >> 6;
  swift_bridgeObjectRetain(v21);
  int64_t v26 = 0LL;
  while (1)
  {
    if (v25)
    {
      unint64_t v29 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      unint64_t v30 = v29 | (v26 << 6);
    }

    else
    {
      int64_t v31 = v26 + 1;
      if (__OFADD__(v26, 1LL)) {
        goto LABEL_60;
      }
      if (v31 >= v61)
      {
LABEL_57:
        swift_release(v21);
        sub_100189B20(v59, v58);
        swift_bridgeObjectRelease(v21);
        return v22;
      }

      unint64_t v32 = *(void *)(v60 + 8 * v31);
      ++v26;
      if (!v32)
      {
        int64_t v26 = v31 + 1;
        if (v31 + 1 >= v61) {
          goto LABEL_57;
        }
        unint64_t v32 = *(void *)(v60 + 8 * v26);
        if (!v32)
        {
          int64_t v26 = v31 + 2;
          if (v31 + 2 >= v61) {
            goto LABEL_57;
          }
          unint64_t v32 = *(void *)(v60 + 8 * v26);
          if (!v32)
          {
            int64_t v26 = v31 + 3;
            if (v31 + 3 >= v61) {
              goto LABEL_57;
            }
            unint64_t v32 = *(void *)(v60 + 8 * v26);
            if (!v32)
            {
              int64_t v26 = v31 + 4;
              if (v31 + 4 >= v61) {
                goto LABEL_57;
              }
              unint64_t v32 = *(void *)(v60 + 8 * v26);
              if (!v32)
              {
                int64_t v33 = v31 + 5;
                if (v33 >= v61) {
                  goto LABEL_57;
                }
                unint64_t v32 = *(void *)(v60 + 8 * v33);
                if (!v32)
                {
                  while (1)
                  {
                    int64_t v26 = v33 + 1;
                    if (__OFADD__(v33, 1LL)) {
                      break;
                    }
                    if (v26 >= v61) {
                      goto LABEL_57;
                    }
                    unint64_t v32 = *(void *)(v60 + 8 * v26);
                    ++v33;
                    if (v32) {
                      goto LABEL_35;
                    }
                  }

                  __break(1u);
LABEL_62:
                  Swift::Int result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
                  __break(1u);
                  return result;
                }

                int64_t v26 = v33;
              }
            }
          }
        }
      }

ValueMetadata *type metadata accessor for SDPseudonymStorage()
{
  return &type metadata for SDPseudonymStorage;
}

unint64_t sub_1001D9550()
{
  unint64_t result = qword_1006469B8;
  if (!qword_1006469B8)
  {
    uint64_t v1 = sub_100183168(255LL, &qword_100645168, &OBJC_CLASS___NSString_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1006469B8);
  }

  return result;
}

uint64_t sub_1001D95A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100183098(&qword_1006457E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001D95F0( void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v32 = a5;
  uint64_t v33 = a8;
  id v38 = a1;
  uint64_t v39 = a2;
  uint64_t v31 = *(void *)(a5 - 8);
  ((void (*)(void))__chkstk_darwin)();
  char v40 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, *(void *)(v12 + 8));
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v15 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v36 = (char *)&v29 - v16;
  unint64_t v41 = a4;
  __chkstk_darwin(v15);
  uint64_t v35 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = swift_getAssociatedTypeWitness(0LL, a6);
  uint64_t v34 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v29 - v19;
  uint64_t v21 = dispatch thunk of Collection.count.getter(a3, a6);
  if (!v21) {
    return static Array._allocateUninitialized(_:)(0LL, v41);
  }
  Swift::Int v22 = v21;
  uint64_t v30 = v18;
  uint64_t v23 = v41;
  uint64_t v44 = ContiguousArray.init()(v41);
  uint64_t v37 = type metadata accessor for ContiguousArray(0LL, v23);
  ContiguousArray.reserveCapacity(_:)(v22);
  unint64_t v41 = v20;
  uint64_t result = dispatch thunk of Collection.startIndex.getter(a3);
  if (v22 < 0)
  {
    __break(1u);
  }

  else
  {
    int64_t v26 = v35;
    unint64_t v25 = v36;
    while (1)
    {
      uint64_t v27 = (void (*)(_BYTE *, void))dispatch thunk of Collection.subscript.read(v43, v41, a3, a6);
      (*(void (**)(char *))(v14 + 16))(v25);
      v27(v43, 0LL);
      uint64_t v28 = v42;
      v38(v25, v40);
      if (v28) {
        break;
      }
      uint64_t v42 = 0LL;
      (*(void (**)(char *, uint64_t))(v14 + 8))(v25, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v26, v37);
      dispatch thunk of Collection.formIndex(after:)(v41, a3, a6);
      if (!--v22)
      {
        (*(void (**)(char *, uint64_t))(v34 + 8))(v41, v30);
        return v44;
      }
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v25, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v41, v30);
    swift_release(v44);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v31 + 32))(v33, v40, v32);
  }

  return result;
}

void URL.realPathURL()(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (NSURL *)((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (char *)((char *)&v34 - (char *)v6);
  URL._bridgeToObjectiveC()(v6);
  uint64_t v9 = v8;
  uint64_t v10 = (__CFString *)CFURLCopyFileSystemPath(v8, kCFURLPOSIXPathStyle);

  if (v10)
  {
    uint64_t v38 = a1;
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v13 = v12;
    uint64_t v14 = String.utf8CString.getter(v11, v12);
    swift_bridgeObjectRelease(v13);
    uint64_t v15 = realpath_DARWIN_EXTSN((const char *)(v14 + 32), 0LL);
    swift_release(v14);
    if (!v15) {
      goto LABEL_9;
    }
    uint64_t v16 = String.init(cString:)(v15);
    uint64_t v18 = v17;
    free(v15);
    uint64_t v35 = v16;
    uint64_t v36 = v18;
    uint64_t v19 = String.utf8CString.getter(v16, v18);
    size_t v34 = strlen((const char *)(v19 + 32));
    swift_release(v19);
    uint64_t v20 = sub_100183098(&qword_1006469E0);
    uint64_t inited = swift_initStackObject(v20, v37);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1004CDCA0;
    *(void *)(inited + 32) = NSURLIsDirectoryKey;
    Swift::Int v22 = NSURLIsDirectoryKey;
    uint64_t v23 = sub_1001DC65C(inited);
    swift_setDeallocating(inited);
    type metadata accessor for URLResourceKey(0LL);
    swift_arrayDestroy(inited + 32, 1LL, v24);
    URL.resourceValues(forKeys:)(v23);
    if (v1)
    {

      swift_bridgeObjectRelease(v36);
      swift_bridgeObjectRelease(v23);
      return;
    }

    uint64_t v26 = swift_bridgeObjectRelease(v23);
    char v27 = URLResourceValues.isDirectory.getter(v26);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    uint64_t v28 = v36;
    uint64_t v29 = String.utf8CString.getter(v35, v36);
    swift_bridgeObjectRelease(v28);
    CFURLRef v30 = CFURLCreateFromFileSystemRepresentation(0LL, (const UInt8 *)(v29 + 32), v34, v27 & 1);
    swift_release(v29);
    if (v30)
    {
      uint64_t v31 = v38;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v30);

      uint64_t v32 = type metadata accessor for URL(0LL);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56LL))(v31, 0LL, 1LL, v32);
    }

    else
    {
LABEL_9:
      uint64_t v33 = type metadata accessor for URL(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56LL))(v38, 1LL, 1LL, v33);
    }
  }

  else
  {
    uint64_t v25 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56LL))(a1, 1LL, 1LL, v25);
  }

uint64_t sub_1001D9BA8( void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v50 = a8;
  uint64_t v51 = a5;
  uint64_t v9 = v8;
  uint64_t v63 = a4;
  uint64_t v64 = a1;
  uint64_t v65 = a2;
  uint64_t v49 = *(void *)(a5 - 8);
  uint64_t v11 = __chkstk_darwin(a1);
  uint64_t v62 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  int64_t v61 = (char *)&v46 - v13;
  uint64_t v55 = v14;
  uint64_t v16 = v15;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, v14);
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v48 = (char *)&v46 - v19;
  uint64_t v20 = type metadata accessor for Optional(0LL, AssociatedTypeWitness);
  uint64_t v52 = *(void *)(v20 - 8);
  uint64_t v53 = v20;
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v59 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v46 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  char v47 = (char *)&v46 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = __chkstk_darwin(v26);
  CFURLRef v30 = (char *)&v46 - v29;
  uint64_t v58 = *((void *)v16 - 1);
  __chkstk_darwin(v28);
  uint64_t v57 = (char *)&v46 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v66 = swift_getAssociatedTypeWitness(0LL, a6);
  uint64_t v54 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v56 = (char *)&v46 - v32;
  uint64_t v33 = v16;
  Swift::Int v34 = dispatch thunk of Sequence.underestimatedCount.getter(v16, a6);
  uint64_t v35 = v63;
  uint64_t v67 = ContiguousArray.init()(v63);
  uint64_t v63 = type metadata accessor for ContiguousArray(0LL, v35);
  ContiguousArray.reserveCapacity(_:)(v34);
  (*(void (**)(char *, void, void *))(v58 + 16))(v57, v60, v16);
  uint64_t v36 = v56;
  uint64_t v60 = v33;
  uint64_t v37 = v33;
  uint64_t v38 = v55;
  uint64_t result = dispatch thunk of Sequence.makeIterator()(v37);
  if (v34 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }

  if (v34)
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v38,  v60,  v66,  &protocol requirements base descriptor for Sequence,  &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    while (1)
    {
      dispatch thunk of IteratorProtocol.next()(v66, AssociatedConformanceWitness);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v25, 1LL, AssociatedTypeWitness);
      if ((_DWORD)result == 1) {
        goto LABEL_18;
      }
      v64(v25, v62);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v66);
        swift_release(v67);
        (*(void (**)(uint64_t, char *, uint64_t))(v49 + 32))(v50, v62, v51);
        return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v25, AssociatedTypeWitness);
      }

      uint64_t v9 = 0LL;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v25, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v30, v63);
      if (!--v34)
      {
        unint64_t v41 = v59;
        uint64_t v42 = v66;
        goto LABEL_9;
      }
    }
  }

  uint64_t v42 = v66;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v38,  v60,  v66,  &protocol requirements base descriptor for Sequence,  &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  unint64_t v41 = v59;
LABEL_9:
  dispatch thunk of IteratorProtocol.next()(v42, AssociatedConformanceWitness);
  uint64_t v62 = *(char **)(v18 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v62)(v41, 1LL, AssociatedTypeWitness) == 1)
  {
    BOOL v43 = v59;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v66);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v43, v53);
    return v67;
  }

  else
  {
    uint64_t v60 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    uint64_t v44 = v47;
    char v45 = v48;
    BOOL v43 = v59;
    while (1)
    {
      v60(v45, v43, AssociatedTypeWitness);
      v64(v45, v61);
      if (v9) {
        break;
      }
      uint64_t v9 = 0LL;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v45, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v44, v63);
      dispatch thunk of IteratorProtocol.next()(v66, AssociatedConformanceWitness);
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v45, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v66);
    swift_release(v67);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v49 + 32))(v50, v61, v51);
  }

uint64_t SDRunState.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001DA0F0 + 4 * byte_1004CE020[a1]))( 0x7472617453746F6ELL,  0xEA00000000006465LL);
}

uint64_t sub_1001DA0F0()
{
  return 0x6572676F72506E69LL;
}

uint64_t sub_1001DA108()
{
  return 0x6574656C706D6F63LL;
}

uint64_t sub_1001DA124()
{
  return 0x64656C696166LL;
}

uint64_t sub_1001DA138()
{
  return 1885956979LL;
}

void sub_1001DA148(char *a1)
{
}

void sub_1001DA154()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }

Swift::Int sub_1001DA1A4()
{
  uint64_t v1 = v0 + 3854;
  String.hash(into:)(&v3, 0x6572676F72506E69LL, v1);
  swift_bridgeObjectRelease(v1);
  return Hasher._finalize()();
}

void sub_1001DA224()
{
  __asm { BR              X10 }

uint64_t sub_1001DA264(uint64_t a1)
{
  uint64_t v2 = v1 + 3854;
  String.hash(into:)(a1, 0x6572676F72506E69LL, v2);
  return swift_bridgeObjectRelease(v2);
}

void sub_1001DA2D0()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }

Swift::Int sub_1001DA31C()
{
  uint64_t v1 = v0 + 3854;
  String.hash(into:)(&v3, 0x6572676F72506E69LL, v1);
  swift_bridgeObjectRelease(v1);
  return Hasher._finalize()();
}

unint64_t sub_1001DA39C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = _s16DaemoniOSLibrary10SDRunStateO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001DA3C8()
{
  return ((uint64_t (*)(void))((char *)sub_1001DA3FC + 4 * byte_1004CE034[*v0]))();
}

void sub_1001DA3FC(void *a1@<X8>)
{
  *a1 = 0x6572676F72506E69LL;
  a1[1] = v1 + 3854;
}

void sub_1001DA418(void *a1@<X8>)
{
  *a1 = 0x6574656C706D6F63LL;
  a1[1] = 0xE900000000000064LL;
}

void sub_1001DA438(void *a1@<X8>)
{
  *a1 = 0x64656C696166LL;
  a1[1] = 0xE600000000000000LL;
}

void sub_1001DA450(void *a1@<X8>)
{
  *a1 = 1885956979LL;
  a1[1] = 0xE400000000000000LL;
}

uint64_t Optional<A>.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v10 + 16))(v9, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1LL, v3) == 1)
  {
    uint64_t v17 = 0LL;
    unint64_t v18 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(17LL);
    swift_bridgeObjectRelease(v18);
    uint64_t v17 = 0x6C616E6F6974704FLL;
    unint64_t v18 = 0xE90000000000003CLL;
    v12._countAndFlagsBits = _typeName(_:qualified:)(v3, 0LL);
    object = v12._object;
    String.append(_:)(v12);
    swift_bridgeObjectRelease(object);
    v14._countAndFlagsBits = 0x656E6F6E2E3ELL;
    v14._object = (void *)0xE600000000000000LL;
    String.append(_:)(v14);
    return v17;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v9, v3);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(v3, a2);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }

  return v15;
}

uint64_t sub_1001DA5E4(uint64_t a1, uint64_t a2)
{
  return Optional<A>.description.getter(a1, *(void *)(a2 - 8));
}

uint64_t sub_1001DA5EC()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

Swift::Int sub_1001DA610()
{
  return Hasher._finalize()();
}

void sub_1001DA650()
{
}

Swift::Int sub_1001DA674()
{
  return Hasher._finalize()();
}

void sub_1001DA6B0( const char *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v60 = a7;
  uint64_t v61 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v59 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v63 = v14;
  uint64_t v56 = *(void *)(*(void *)(*(void *)(v14 + 8) + 24LL) + 16LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, v56);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v53 = (char *)&v48 - v15;
  uint64_t v58 = a6;
  uint64_t v16 = *(void *)(*(void *)(a6 + 8) + 8LL);
  uint64_t v17 = *(void *)(v16 + 8);
  uint64_t v18 = type metadata accessor for EnumeratedSequence(0LL, a4, v17);
  uint64_t v50 = *(void *)(v18 - 8);
  uint64_t v51 = v18;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v48 - v19;
  uint64_t v52 = a1;
  uint64_t v57 = a4;
  uint64_t v21 = dispatch thunk of Collection.count.getter(a4, v16);
  uint64_t v22 = a2;
  uint64_t v23 = a2;
  uint64_t v24 = a5;
  uint64_t v25 = dispatch thunk of static FixedWidthInteger.bitWidth.getter(v23, a5);
  uint64_t v26 = v21 * v25;
  if ((unsigned __int128)(v21 * (__int128)v25) >> 64 == (v21 * v25) >> 63)
  {
    uint64_t v27 = v63;
    if (v26 == dispatch thunk of static FixedWidthInteger.bitWidth.getter(a3, v63))
    {
      uint64_t v28 = v57;
      uint64_t v29 = Sequence.enumerated()(v57, v17);
      uint64_t v48 = (uint64_t)&v48;
      __chkstk_darwin(v29);
      uint64_t v49 = v22;
      *(&v48 - 6) = v22;
      *(&v48 - 5) = a3;
      *(&v48 - 4) = v28;
      *(&v48 - 3) = v24;
      uint64_t v30 = v24;
      uint64_t v31 = v58;
      *(&v48 - 2) = v27;
      *(&v48 - 1) = v31;
      uint64_t v32 = v51;
      uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for EnumeratedSequence<A>, v51);
      Swift::Int v34 = v55;
      uint64_t v36 = (const char *)sub_1001D9BA8( (void (*)(char *, char *))sub_1001DFE78,  (uint64_t)(&v48 - 8),  v32,  a3,  (uint64_t)&type metadata for Never,  WitnessTable,  (uint64_t)&protocol witness table for Never,  v35);
      uint64_t v55 = v36;
      uint64_t v52 = v34;
      (*(void (**)(char *, uint64_t))(v50 + 8))(v20, v32);
      v62[0] = v36;
      uint64_t v37 = v56;
      uint64_t v38 = AssociatedTypeWitness;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v56,  a3,  AssociatedTypeWitness,  &protocol requirements base descriptor for ExpressibleByIntegerLiteral,  &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      char v40 = v53;
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)( &unk_1004CE318,  256LL,  v38,  AssociatedConformanceWitness);
      unint64_t v41 = v59;
      uint64_t v42 = dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v40, a3, v37);
      __chkstk_darwin(v42);
      *(&v48 - 6) = v49;
      *(&v48 - 5) = a3;
      *(&v48 - 4) = v28;
      *(&v48 - 3) = v30;
      *(&v48 - 2) = v63;
      *(&v48 - 1) = v31;
      uint64_t v43 = type metadata accessor for Array(0LL, a3);
      uint64_t v44 = swift_getWitnessTable(&protocol conformance descriptor for [A], v43);
      Sequence.reduce<A>(_:_:)(v41, sub_1001DFE9C, &v48 - 8, v43, a3, v44);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v41, a3);
      swift_bridgeObjectRelease(v55);
    }

    else
    {
      v62[0] = v22;
      v62[1] = a3;
      v62[2] = v24;
      v62[3] = v27;
      uint64_t v45 = type metadata accessor for IntegerPacker.PackError(0LL, (uint64_t)v62);
      uint64_t v46 = swift_getWitnessTable(&unk_1004CE2D8, v45);
      uint64_t v47 = swift_allocError(v45, v46, 0LL, 0LL);
      swift_willThrow(v47);
    }
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1001DAA74@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v40 = a4;
  unint64_t v41 = a1;
  uint64_t v39 = a6;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0LL, &type metadata for Int, a2, "offset element ", 0LL);
  uint64_t v11 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v12 = *(void *)(a3 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v42 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v44 = (char *)&v36 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v36 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v36 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v43 = (char *)&v36 - v24;
  uint64_t v25 = *(int *)(v23 + 48);
  uint64_t v27 = v26 + v25;
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(a2 - 8) + 16LL))(v26 + v25, (char *)a1 + v25, a2);
  uint64_t v28 = *(void *)(a5 + 8);
  uint64_t v29 = v40;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v27, a2, *(void *)(v40 + 8), a3, v28);
  uint64_t v45 = 0LL;
  unint64_t v30 = sub_1001DFED0();
  dispatch thunk of BinaryInteger.init<A>(_:)(&v45, &type metadata for Int, v30, a3, v28);
  dispatch thunk of static BinaryInteger.~ prefix(_:)(v19, a3, v28);
  uint64_t v31 = *(void (**)(char *, uint64_t))(v12 + 8);
  v31(v19, a3);
  uint64_t v45 = dispatch thunk of static FixedWidthInteger.bitWidth.getter(a2, v29);
  uint64_t v38 = v22;
  unint64_t v37 = v30;
  dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)(v22, &v45, &type metadata for Int, v30, a3, v28);
  uint64_t v32 = v42;
  dispatch thunk of static BinaryInteger.~ prefix(_:)(v19, a3, v28);
  dispatch thunk of static BinaryInteger.& infix(_:_:)(v43, v32, a3, v28);
  v31(v32, a3);
  uint64_t v33 = *v41;
  uint64_t result = dispatch thunk of static FixedWidthInteger.bitWidth.getter(a2, v29);
  if ((unsigned __int128)(v33 * (__int128)result) >> 64 == (v33 * result) >> 63)
  {
    uint64_t v45 = v33 * result;
    dispatch thunk of BinaryInteger.init<A>(_:)(&v45, &type metadata for Int, v37, a3, v28);
    uint64_t v35 = v44;
    dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)(v44, v32, a3, v28, a3, v28);
    v31(v32, a3);
    v31(v35, a3);
    v31(v19, a3);
    v31(v38, a3);
    return ((uint64_t (*)(char *, uint64_t))v31)(v43, a3);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1001DAD8C( uint64_t a1, uint64_t a2, uint64_t a3, const char **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v85 = a7;
  uint64_t v86 = a6;
  uint64_t v102 = a2;
  uint64_t v103 = a8;
  uint64_t v12 = *(void *)(*(void *)(a8 + 8) + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(255LL, v12);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2( 0LL,  AssociatedTypeWitness,  AssociatedTypeWitness,  "lower upper ",  0LL);
  uint64_t v14 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v97 = (char *)v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v98 = (char *)v83 - v16;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v12,  a5,  AssociatedTypeWitness,  &protocol requirements base descriptor for Collection,  &associated conformance descriptor for Collection.Collection.Index: Comparable);
  uint64_t v18 = type metadata accessor for Range(0LL, AssociatedTypeWitness);
  uint64_t v95 = *(void *)(v18 - 8);
  uint64_t v96 = v18;
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v94 = (char *)v83 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v93 = (char *)v83 - v21;
  uint64_t v104 = swift_getAssociatedTypeWitness(0LL, v12);
  uint64_t v92 = *(void *)(v104 - 8);
  uint64_t v22 = __chkstk_darwin(v104);
  uint64_t v91 = (char *)v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v90 = (char *)v83 - v25;
  uint64_t v109 = AssociatedTypeWitness;
  uint64_t v100 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v26 = __chkstk_darwin(v24);
  __n128 v106 = (char *)v83 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26);
  uint64_t v29 = (char *)v83 - v28;
  uint64_t v107 = v12;
  uint64_t v108 = a1;
  uint64_t v101 = a5;
  uint64_t v30 = dispatch thunk of Collection.count.getter(a5, v12);
  uint64_t v84 = a3;
  uint64_t result = dispatch thunk of static FixedWidthInteger.bitWidth.getter(a3, v86);
  uint64_t v32 = v30 * result;
  if ((unsigned __int128)(v30 * (__int128)result) >> 64 != (v30 * result) >> 63)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v33 = a4;
  uint64_t v34 = v85;
  uint64_t result = dispatch thunk of static FixedWidthInteger.bitWidth.getter(a4, v85);
  if (result)
  {
    if (v32 == 0x8000000000000000LL && result == -1) {
      goto LABEL_20;
    }
    if (v32 % result)
    {
      v111[0] = v84;
      v111[1] = a4;
      v111[2] = v86;
      v111[3] = v34;
      uint64_t v36 = type metadata accessor for IntegerPacker.PackError(0LL, (uint64_t)v111);
      uint64_t WitnessTable = swift_getWitnessTable(&unk_1004CE2D8, v36);
      uint64_t v38 = swift_allocError(v36, WitnessTable, 0LL, 0LL);
      swift_willThrow(v38);
      return (uint64_t)v33;
    }

    v83[0] = a4;
    v111[0] = static Array._allocateUninitialized(_:)(0LL, v104);
    uint64_t v39 = v107;
    uint64_t v40 = v101;
    dispatch thunk of Collection.startIndex.getter(v101);
    unint64_t v41 = v106;
    uint64_t v42 = v39;
    uint64_t v43 = v40;
    dispatch thunk of Collection.endIndex.getter(v40, v42);
    uint64_t v44 = v109;
    char v45 = dispatch thunk of static Comparable.< infix(_:_:)(v29, v41, v109, AssociatedConformanceWitness);
    uint64_t v89 = *(uint64_t (**)(char *, uint64_t))(v100 + 8);
    uint64_t v46 = v89(v41, v44);
    if ((v45 & 1) == 0)
    {
LABEL_13:
      id v112 = (const char *)v111[0];
      __chkstk_darwin(v46);
      uint64_t v72 = (char *)v83[0];
      v83[-8] = v84;
      v83[-7] = v72;
      uint64_t v73 = v86;
      v83[-6] = v74;
      v83[-5] = v73;
      uint64_t v76 = v103;
      uint64_t v75 = v104;
      v83[-4] = v85;
      v83[-3] = v76;
      v83[-2] = v102;
      uint64_t v77 = type metadata accessor for Array(0LL, v75);
      uint64_t v78 = sub_100183098(&qword_100645710);
      uint64_t v79 = swift_getWitnessTable(&protocol conformance descriptor for [A], v77);
      uint64_t v33 = &v112;
      uint64_t v80 = v83[1];
      uint64_t v81 = sub_1001D95F0( (void (*)(char *, char *))sub_1001DFF34,  (uint64_t)&v83[-10],  v77,  v72,  v78,  v79,  (uint64_t)&protocol self-conformance witness table for Error,  (uint64_t)&v110);
      if (!v80) {
        uint64_t v33 = (const char **)v81;
      }
      __n128 v82 = swift_bridgeObjectRelease(v112);
      ((void (*)(char *, uint64_t, __n128))v89)(v29, v109, v82);
      return (uint64_t)v33;
    }

    uint64_t v88 = v29;
    uint64_t v87 = AssociatedConformanceWitness;
    uint64_t v47 = v109;
    while (1)
    {
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)(v29, v102, v43, v103);
      uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)(v29, v41);
      if ((result & 1) == 0) {
        break;
      }
      uint64_t v48 = v98;
      uint64_t v49 = TupleTypeMetadata2;
      uint64_t v50 = &v98[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v51 = v100;
      uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v100 + 16);
      v52(v98, v29, v47);
      v52(v50, v106, v47);
      uint64_t v53 = v97;
      uint64_t v54 = &v97[*(int *)(v49 + 48)];
      v52(v97, v48, v47);
      v52(v54, v50, v47);
      uint64_t v55 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
      uint64_t v56 = v94;
      v55(v94, v53, v47);
      uint64_t v57 = (void (*)(char *, uint64_t))v89;
      v89(v54, v47);
      uint64_t v58 = &v53[*(int *)(v49 + 48)];
      v55(v53, v48, v47);
      v55(v58, v50, v47);
      uint64_t v59 = v55;
      uint64_t v105 = v55;
      uint64_t v60 = v96;
      uint64_t v61 = v101;
      v59(&v56[*(int *)(v96 + 36)], v58, v47);
      v57(v53, v47);
      uint64_t v62 = v95;
      uint64_t v63 = v93;
      (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v93, v56, v60);
      uint64_t v64 = v90;
      dispatch thunk of Collection.subscript.getter(v63, v61, v107);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v60);
      uint64_t v65 = v92;
      uint64_t v66 = v91;
      uint64_t v67 = v104;
      (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v91, v64, v104);
      uint64_t v68 = type metadata accessor for Array(0LL, v67);
      uint64_t v69 = v66;
      unint64_t v41 = v106;
      Array.append(_:)(v69, v68);
      uint64_t v70 = v64;
      uint64_t v43 = v61;
      (*(void (**)(char *, uint64_t))(v65 + 8))(v70, v67);
      uint64_t v71 = v88;
      v57(v88, v47);
      v105(v71, v41, v47);
      dispatch thunk of Collection.endIndex.getter(v43, v107);
      uint64_t v29 = v71;
      LOBYTE(v50) = dispatch thunk of static Comparable.< infix(_:_:)(v71, v41, v47, v87);
      uint64_t v46 = ((uint64_t (*)(char *, uint64_t))v57)(v41, v47);
    }

    __break(1u);
    goto LABEL_18;
  }

void sub_1001DB4E4( const char *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>, void *a8)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, *(void *)(*(void *)(a6 + 8) + 8LL));
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a6,  a4,  AssociatedTypeWitness,  &protocol requirements base descriptor for RandomAccessCollection,  &associated conformance descriptor for RandomAccessCollection.Collection.SubSequence: RandomAccessCollection);
  sub_1001DA6B0(a1, a2, a3, AssociatedTypeWitness, a5, AssociatedConformanceWitness, a7);
  if (v17) {
    *a8 = v17;
  }
}

uint64_t PushableTimer.noLaterThan.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001DC8D0(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_noLaterThan, a1);
}

uint64_t PushableTimer.__allocating_init(fireAt:noLaterThan:queue:handler:)( char *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = sub_1001DC918(a1, a2, a3, a4, a5);

  swift_release(a5);
  return v11;
}

uint64_t PushableTimer.init(fireAt:noLaterThan:queue:handler:)( char *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = sub_1001DC918(a1, a2, a3, a4, a5);

  swift_release(a5);
  return v7;
}

uint64_t sub_1001DB690@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for DispatchTimeInterval.never(_:);
  uint64_t v3 = type metadata accessor for DispatchTimeInterval(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104LL))(a1, v2, v3);
}

uint64_t sub_1001DB6D4@<X0>(void *a1@<X8>)
{
  *a1 = 0LL;
  uint64_t v2 = enum case for DispatchTimeInterval.nanoseconds(_:);
  uint64_t v3 = type metadata accessor for DispatchTimeInterval(0LL);
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104LL))(a1, v2, v3);
}

uint64_t PushableTimer.reschedule(deadline:)(char *a1)
{
  uint64_t v29 = a1;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v28 - v7;
  uint64_t v9 = sub_100183098(&qword_1006469E8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchTime(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v28 - v17;
  uint64_t v28 = v1;
  sub_1001DC8D0(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_noLaterThan, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
  {
    static DispatchTime.distantFuture.getter();
    sub_100187100((uint64_t)v11, &qword_1006469E8);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v11, v12);
  }

  uint64_t v19 = sub_100183F14( &qword_1006469F0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchTime,  (uint64_t)&protocol conformance descriptor for DispatchTime);
  uint64_t v20 = v29;
  if ((dispatch thunk of static Comparable.< infix(_:_:)(v16, v29, v12, v19) & 1) != 0)
  {
    uint64_t v21 = v18;
    uint64_t v22 = v16;
  }

  else
  {
    uint64_t v21 = v18;
    uint64_t v22 = v20;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v21, v22, v12);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v13 + 8);
  v23(v16, v12);
  uint64_t ObjectType = swift_getObjectType(*(void *)(v28 + OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_timer));
  uint64_t v25 = *(void (**)(char *, void, uint64_t))(v3 + 104);
  v25(v8, enum case for DispatchTimeInterval.never(_:), v2);
  *(void *)uint64_t v6 = 0LL;
  v25(v6, enum case for DispatchTimeInterval.nanoseconds(_:), v2);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v18, v8, v6, ObjectType);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v3 + 8);
  v26(v6, v2);
  v26(v8, v2);
  return ((uint64_t (*)(char *, uint64_t))v23)(v18, v12);
}

Swift::Void __swiftcall PushableTimer.resume()()
{
}

Swift::Void __swiftcall PushableTimer.cancel()()
{
}

uint64_t sub_1001DB9B8(uint64_t (*a1)(uint64_t))
{
  uint64_t ObjectType = swift_getObjectType(*(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_timer));
  return a1(ObjectType);
}

uint64_t PushableTimer.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_timer);
  swift_getObjectType(v2);
  OS_dispatch_source.cancel()();
  sub_100187100(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_noLaterThan, &qword_1006469E8);
  swift_unknownObjectRelease(v2);
  return v1;
}

uint64_t PushableTimer.__deallocating_deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_timer);
  swift_getObjectType(v2);
  OS_dispatch_source.cancel()();
  sub_100187100(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_noLaterThan, &qword_1006469E8);
  swift_unknownObjectRelease(v2);
  return swift_deallocClassInstance( v1,  *(unsigned int *)(*(void *)v1 + 48LL),  *(unsigned __int16 *)(*(void *)v1 + 52LL));
}

void *sub_1001DBAA8()
{
  uint64_t result = (void *)sub_1003917A0((uint64_t)&_swiftEmptyArrayStorage);
  off_1006469D0 = result;
  return result;
}

uint64_t sub_1001DBACC()
{
  uint64_t v0 = sub_100183098(&qword_10064EED0);
  uint64_t result = swift_allocObject(v0, 20LL, 7LL);
  *(_DWORD *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  qword_1006469D8 = result;
  return result;
}

uint64_t sub_1001DBB00()
{
  if (qword_100643EF8 != -1) {
    swift_once(&qword_100643EF8, sub_1001DBACC);
  }
  uint64_t v1 = qword_1006469D8;
  uint64_t v2 = (os_unfair_lock_s *)(qword_1006469D8 + 16);
  swift_retain(qword_1006469D8);
  os_unfair_lock_lock(v2);
  sub_1002737FC(v3, (uint64_t (*)(void))sub_1001DFF14);
  os_unfair_lock_unlock(v2);
  swift_release(v1);
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  return v0;
}

void *sub_1001DBBAC(uint64_t a1)
{
  if (qword_100643EF0 != -1) {
    swift_once(&qword_100643EF0, sub_1001DBAA8);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  swift_beginAccess(&off_1006469D0, &v14, 32LL, 0LL);
  uint64_t v4 = off_1006469D0;
  if (*((void *)off_1006469D0 + 2))
  {
    swift_bridgeObjectRetain(v2);
    uint64_t v5 = sub_1003AD53C(v3, v2);
    if ((v6 & 1) != 0) {
      uint64_t v7 = *(void *)(v4[7] + 8 * v5);
    }
    else {
      uint64_t v7 = 0LL;
    }
    char v8 = v6 ^ 1;
    swift_bridgeObjectRelease(v2);
  }

  else
  {
    uint64_t v7 = 0LL;
    char v8 = 1;
  }

  swift_endAccess(&v14);
  uint64_t v14 = v7;
  char v15 = v8 & 1;
  uint64_t v9 = sub_100183098(&qword_100646C70);
  uint64_t result = Optional.unwrap(_:file:line:)( &v16,  sub_1001DFF2C,  a1,  "DaemoniOSLibrary/SDCommonSwifty.swift",  37LL,  2LL,  606LL,  v9);
  uint64_t v11 = (uint64_t)v16 - 1;
  if (v16 == (void *)1)
  {
    swift_beginAccess(&off_1006469D0, &v14, 33LL, 0LL);
    swift_bridgeObjectRetain(v2);
    sub_1001C9AC4(v3, v2);
    swift_endAccess(&v14);
    return (void *)swift_bridgeObjectRelease(v2);
  }

  else if (v16)
  {
    swift_beginAccess(&off_1006469D0, &v14, 33LL, 0LL);
    swift_bridgeObjectRetain(v2);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(off_1006469D0);
    uint64_t v16 = off_1006469D0;
    off_1006469D0 = (_UNKNOWN *)0x8000000000000000LL;
    sub_1003B2FE8(v11, v3, v2, isUniquelyReferenced_nonNull_native);
    uint64_t v13 = off_1006469D0;
    off_1006469D0 = v16;
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v13);
    return (void *)swift_endAccess(&v14);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1001DBD9C(Swift::String *a1)
{
  v2._object = (void *)0x8000000100504DE0LL;
  v2._countAndFlagsBits = 0xD000000000000015LL;
  String.append(_:)(v2);
  String.append(_:)(a1[1]);
  v3._countAndFlagsBits = 0LL;
  v3._object = (void *)0xE000000000000000LL;
  String.append(_:)(v3);
  return 0LL;
}

uint64_t sub_1001DBE1C()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t URL.fileUTType()()
{
  uint64_t v1 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = sub_100183098(&qword_1006469E0);
  uint64_t inited = swift_initStackObject(v5, v12);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1004CDCA0;
  *(void *)(inited + 32) = NSURLContentTypeKey;
  uint64_t v7 = NSURLContentTypeKey;
  char v8 = sub_1001DC65C(inited);
  swift_setDeallocating(inited);
  type metadata accessor for URLResourceKey(0LL);
  swift_arrayDestroy(inited + 32, 1LL, v9);
  URL.resourceValues(forKeys:)(v8);
  uint64_t result = swift_bridgeObjectRelease(v8);
  if (!v0)
  {
    URLResourceValues.contentType.getter(result);
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }

  return result;
}

Swift::String_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> URL.fileTypeIdentifier()()
{
  uint64_t v2 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = sub_100183098(&qword_1006469E0);
  uint64_t inited = swift_initStackObject(v6, v17);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1004CDCA0;
  *(void *)(inited + 32) = NSURLTypeIdentifierKey;
  char v8 = NSURLTypeIdentifierKey;
  uint64_t v9 = sub_1001DC65C(inited);
  swift_setDeallocating(inited);
  type metadata accessor for URLResourceKey(0LL);
  swift_arrayDestroy(inited + 32, 1LL, v10);
  URL.resourceValues(forKeys:)(v9);
  uint64_t v11 = swift_bridgeObjectRelease(v9);
  if (!v1)
  {
    uint64_t v0 = URLResourceValues.typeIdentifier.getter(v11);
    uint64_t inited = v12;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  uint64_t v13 = v0;
  uint64_t v14 = (void *)inited;
  result.value._object = v14;
  result.value._countAndFlagsBits = v13;
  return result;
}

Swift::Int_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> URL.fileSize()()
{
  uint64_t v0 = sub_1001DC204((void **)&NSURLFileSizeKey, (uint64_t (*)(uint64_t))&URLResourceValues.fileSize.getter);
  result.value = (Swift::Int)v0;
  result.is_nil = v1;
  return result;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> URL.isDirectory()()
{
  uint64_t v1 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = sub_100183098(&qword_1006469E0);
  uint64_t inited = swift_initStackObject(v5, v15);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1004CDCA0;
  *(void *)(inited + 32) = NSURLIsDirectoryKey;
  uint64_t v7 = NSURLIsDirectoryKey;
  char v8 = sub_1001DC65C(inited);
  swift_setDeallocating(inited);
  type metadata accessor for URLResourceKey(0LL);
  swift_arrayDestroy(inited + 32, 1LL, v9);
  URL.resourceValues(forKeys:)(v8);
  uint64_t v10 = swift_bridgeObjectRelease(v8);
  if (!v0)
  {
    char v12 = URLResourceValues.isDirectory.getter(v10);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    char v11 = v12 & 1;
  }

  return v11 & 1;
}

Swift::Int_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> URL.availableStorage()()
{
  uint64_t v0 = sub_1001DC204( (void **)&NSURLVolumeAvailableCapacityKey,  (uint64_t (*)(uint64_t))&URLResourceValues.volumeAvailableCapacity.getter);
  result.value = (Swift::Int)v0;
  result.is_nil = v1;
  return result;
}

uint64_t (*sub_1001DC204(void **a1, uint64_t (*a2)(uint64_t)))(uint64_t)
{
  uint64_t v5 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = sub_100183098(&qword_1006469E0);
  uint64_t inited = swift_initStackObject(v9, v18);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1004CDCA0;
  char v11 = *a1;
  *(void *)(inited + 32) = *a1;
  id v12 = v11;
  uint64_t v13 = sub_1001DC65C(inited);
  swift_setDeallocating(inited);
  type metadata accessor for URLResourceKey(0LL);
  swift_arrayDestroy(inited + 32, 1LL, v14);
  URL.resourceValues(forKeys:)(v13);
  uint64_t v15 = swift_bridgeObjectRelease(v13);
  if (!v2)
  {
    a2 = (uint64_t (*)(uint64_t))a2(v15);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  return a2;
}

uint64_t Sequence.batch(size:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, a3);
  uint64_t v33 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v7 = (char *)&v32 - v6;
  uint64_t v8 = type metadata accessor for Optional(0LL, AssociatedTypeWitness);
  uint64_t v9 = __chkstk_darwin(v8);
  char v11 = (char *)&v32 - v10;
  uint64_t v12 = *(void *)(a2 - 8);
  __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = swift_getAssociatedTypeWitness(0LL, a3);
  uint64_t v34 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v32 - v16;
  uint64_t v18 = type metadata accessor for Array(0LL, AssociatedTypeWitness);
  uint64_t v39 = ((uint64_t (*)(void))Array.init())();
  uint64_t v38 = Array.init()(AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v36, a2);
  dispatch thunk of Sequence.makeIterator()(a2);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( a3,  a2,  v15,  &protocol requirements base descriptor for Sequence,  &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  uint64_t v36 = v17;
  uint64_t v20 = v15;
  dispatch thunk of IteratorProtocol.next()(v15, AssociatedConformanceWitness);
  uint64_t v21 = v33;
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
  if (v22(v11, 1LL, AssociatedTypeWitness) != 1)
  {
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v25(v7, v11, AssociatedTypeWitness);
    while (1)
    {
      Array.append(_:)(v7, v18);
      uint64_t v26 = v38;
      uint64_t v27 = swift_bridgeObjectRetain(v38);
      uint64_t v28 = Array.count.getter(v27, AssociatedTypeWitness);
      swift_bridgeObjectRelease(v26);
      if (v28 > v35)
      {
        uint64_t v37 = v26;
        uint64_t v29 = type metadata accessor for Array(0LL, v18);
        swift_bridgeObjectRetain(v26);
        Array.append(_:)(&v37, v29);
        Array.removeAll(keepingCapacity:)(0);
      }

      dispatch thunk of IteratorProtocol.next()(v20, AssociatedConformanceWitness);
      if (v22(v11, 1LL, AssociatedTypeWitness) == 1) {
        break;
      }
      v25(v7, v11, AssociatedTypeWitness);
    }
  }

  (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v20);
  uint64_t v23 = v38;
  uint64_t v37 = v38;
  uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v18);
  if ((Collection.isEmpty.getter(v18, WitnessTable) & 1) != 0)
  {
    swift_bridgeObjectRelease(v23);
  }

  else
  {
    uint64_t v37 = v23;
    uint64_t v30 = type metadata accessor for Array(0LL, v18);
    Array.append(_:)(&v37, v30);
  }

  return v39;
}

void *sub_1001DC65C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100183098(qword_100646CA8);
    uint64_t v3 = static _SetStorage.allocate(capacity:)(v1);
    uint64_t v4 = 0LL;
    uint64_t v5 = v3 + 56;
    uint64_t v37 = v1;
    uint64_t v38 = a1 + 32;
    while (1)
    {
      uint64_t v6 = *(void **)(v38 + 8 * v4);
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      uint64_t v9 = v8;
      Hasher.init(_seed:)(v39);
      id v10 = v6;
      String.hash(into:)(v39, v7, v9);
      Swift::Int v11 = Hasher._finalize()();
      Swift::Int_optional result = (void *)swift_bridgeObjectRelease(v9);
      uint64_t v13 = -1LL << *(_BYTE *)(v3 + 32);
      unint64_t v14 = v11 & ~v13;
      unint64_t v15 = v14 >> 6;
      uint64_t v16 = *(void *)(v5 + 8 * (v14 >> 6));
      uint64_t v17 = 1LL << v14;
      if (((1LL << v14) & v16) != 0)
      {
        uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v3 + 48) + 8 * v14));
        uint64_t v20 = v19;
        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
        if (v18 == v21 && v20 == v22)
        {
LABEL_3:
          swift_bridgeObjectRelease_n(v20, 2LL);
LABEL_4:

          goto LABEL_5;
        }

        uint64_t v24 = v22;
        char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v21, v22, 0LL);
        swift_bridgeObjectRelease(v20);
        Swift::Int_optional result = (void *)swift_bridgeObjectRelease(v24);
        if ((v25 & 1) != 0) {
          goto LABEL_4;
        }
        uint64_t v26 = ~v13;
        while (1)
        {
          unint64_t v14 = (v14 + 1) & v26;
          unint64_t v15 = v14 >> 6;
          uint64_t v16 = *(void *)(v5 + 8 * (v14 >> 6));
          uint64_t v17 = 1LL << v14;
          if ((v16 & (1LL << v14)) == 0) {
            break;
          }
          uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v3 + 48) + 8 * v14));
          uint64_t v20 = v28;
          uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
          if (v27 == v29 && v20 == v30) {
            goto LABEL_3;
          }
          uint64_t v32 = v30;
          char v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v20, v29, v30, 0LL);
          swift_bridgeObjectRelease(v20);
          Swift::Int_optional result = (void *)swift_bridgeObjectRelease(v32);
          if ((v33 & 1) != 0) {
            goto LABEL_4;
          }
        }
      }

      *(void *)(v5 + 8 * v15) = v17 | v16;
      *(void *)(*(void *)(v3 + 48) + 8 * v14) = v10;
      uint64_t v34 = *(void *)(v3 + 16);
      BOOL v35 = __OFADD__(v34, 1LL);
      uint64_t v36 = v34 + 1;
      if (v35)
      {
        __break(1u);
        return result;
      }

      *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v36;
LABEL_5:
      if (++v4 == v37) {
        return (void *)v3;
      }
    }
  }

  return &_swiftEmptySetSingleton;
}

unint64_t _s16DaemoniOSLibrary10SDRunStateO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1005D0E48, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5) {
    return 5LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1001DC8D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100183098(&qword_1006469E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001DC918(char *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v66 = a4;
  uint64_t v67 = a5;
  id v65 = a3;
  uint64_t v77 = a2;
  uint64_t v74 = a1;
  uint64_t v75 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v73 = *(void *)(v75 - 8);
  uint64_t v8 = __chkstk_darwin(v75);
  uint64_t v72 = (uint64_t *)((char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v8);
  uint64_t v71 = (char *)&v62 - v10;
  uint64_t v11 = sub_100183098(&qword_1006469E8);
  __chkstk_darwin(v11);
  uint64_t v69 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v68 = type metadata accessor for DispatchTime(0LL);
  uint64_t v64 = *(void *)(v68 - 8);
  uint64_t v13 = __chkstk_darwin(v68);
  uint64_t v70 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v76 = (char *)&v62 - v15;
  uint64_t v16 = type metadata accessor for DispatchWorkItemFlags(0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for OS_dispatch_source.TimerFlags(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1001DC8D0(a2, v5 + OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_noLaterThan);
  sub_100183168(0LL, (unint64_t *)&qword_100646C80, &OBJC_CLASS___OS_dispatch_source_ptr);
  aBlock[0] = &_swiftEmptyArrayStorage;
  uint64_t v23 = sub_100183F14( &qword_100646C88,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags,  (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  uint64_t v24 = sub_100183098(&qword_100646C90);
  uint64_t v25 = sub_1001DFF80((unint64_t *)&unk_100646C98, &qword_100646C90);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v24, v25, v19, v23);
  id v26 = v65;
  id v27 = v65;
  uint64_t v28 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v22, v26);

  uint64_t v29 = *(void (**)(char *, uint64_t))(v20 + 8);
  uint64_t v30 = v64;
  v29(v22, v19);
  *(void *)(v6 + OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_timer) = v28;
  uint64_t v31 = v67;
  aBlock[4] = v66;
  uint64_t v80 = v67;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001B9FE4;
  aBlock[3] = &unk_1005D3F00;
  uint64_t v32 = _Block_copy(aBlock);
  uint64_t v78 = &_swiftEmptyArrayStorage;
  uint64_t v33 = sub_100183F14( (unint64_t *)&qword_100646510,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  swift_retain(v31);
  uint64_t v34 = sub_100183098((uint64_t *)&unk_1006460D0);
  uint64_t v35 = sub_1001DFF80((unint64_t *)&qword_100646520, (uint64_t *)&unk_1006460D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v34, v35, v16, v33);
  uint64_t v36 = type metadata accessor for DispatchWorkItem(0LL);
  swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
  uint64_t v37 = DispatchWorkItem.init(flags:block:)(v18, v32);
  swift_release(v80);
  uint64_t v38 = OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_timer;
  uint64_t v39 = *(void *)(v6 + OBJC_IVAR____TtC16DaemoniOSLibrary13PushableTimer_timer);
  uint64_t ObjectType = swift_getObjectType(v39);
  swift_unknownObjectRetain(v39);
  uint64_t v67 = v37;
  uint64_t v41 = ObjectType;
  uint64_t v42 = v68;
  OS_dispatch_source.setEventHandler(handler:)(v37, v41);
  uint64_t v43 = v39;
  uint64_t v44 = (uint64_t)v69;
  swift_unknownObjectRelease(v43);
  sub_1001DC8D0(v77, v44);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v44, 1LL, v42) == 1)
  {
    char v45 = v70;
    static DispatchTime.distantFuture.getter();
    sub_100187100(v44, &qword_1006469E8);
  }

  else
  {
    char v45 = v70;
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(v70, v44, v42);
  }

  uint64_t v46 = sub_100183F14( &qword_1006469F0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchTime,  (uint64_t)&protocol conformance descriptor for DispatchTime);
  uint64_t v47 = v74;
  if ((dispatch thunk of static Comparable.< infix(_:_:)(v45, v74, v42, v46) & 1) != 0)
  {
    uint64_t v48 = v76;
    uint64_t v49 = v45;
  }

  else
  {
    uint64_t v48 = v76;
    uint64_t v49 = v47;
  }

  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v48, v49, v42);
  uint64_t v50 = *(void (**)(char *, uint64_t))(v30 + 8);
  v50(v45, v42);
  uint64_t v63 = v6;
  uint64_t v51 = swift_getObjectType(*(void *)(v6 + v38));
  uint64_t v52 = v42;
  uint64_t v53 = v51;
  uint64_t v54 = v73;
  uint64_t v55 = *(void (**)(char *, void, uint64_t))(v73 + 104);
  uint64_t v56 = v71;
  uint64_t v57 = v75;
  v55(v71, enum case for DispatchTimeInterval.never(_:), v75);
  uint64_t v58 = (char *)v72;
  *uint64_t v72 = 0LL;
  v55(v58, enum case for DispatchTimeInterval.nanoseconds(_:), v57);
  uint64_t v59 = v76;
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v76, v56, v58, v53);
  swift_release(v67);
  sub_100187100(v77, &qword_1006469E8);
  v50(v47, v52);
  uint64_t v60 = *(void (**)(void *, uint64_t))(v54 + 8);
  v60(v58, v57);
  v60(v56, v57);
  v50(v59, v52);
  return v63;
}

unint64_t sub_1001DCE8C()
{
  unint64_t result = qword_100646A00;
  if (!qword_100646A00)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SDRunState, &type metadata for SDRunState);
    atomic_store(result, (unint64_t *)&qword_100646A00);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for SDRunState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

uint64_t storeEnumTagSinglePayload for SDRunState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1001DCFAC + 4 * byte_1004CE03E[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1001DCFE0 + 4 * byte_1004CE039[v4]))();
}

uint64_t sub_1001DCFE0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DCFE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001DCFF0LL);
  }
  return result;
}

uint64_t sub_1001DCFFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001DD004LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1001DD008(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DD010(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SDRunState()
{
  return &type metadata for SDRunState;
}

uint64_t type metadata accessor for OnceManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary11OnceManager);
}

uint64_t sub_1001DD04C()
{
  return type metadata accessor for PushableTimer(0LL);
}

uint64_t type metadata accessor for PushableTimer(uint64_t a1)
{
  uint64_t result = qword_100646AF8;
  if (!qword_100646AF8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PushableTimer);
  }
  return result;
}

void sub_1001DD090(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = "\b";
    swift_updateClassMetadata2(a1, 256LL, 2LL, v4, a1 + 80);
  }

void sub_1001DD104(uint64_t a1)
{
  if (!qword_100646B08)
  {
    uint64_t v2 = type metadata accessor for DispatchTime(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_100646B08);
    }
  }

uint64_t sub_1001DD15C(uint64_t a1)
{
  uint64_t v2 = &unk_1004CE1E0;
  return swift_initClassMetadata2(a1, 0LL, 1LL, &v2, a1 + 88);
}

uint64_t type metadata accessor for InstanceCounter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001DFFC0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InstanceCounter);
}

void sub_1001DD1A8(uint64_t a1)
{
}

Swift::Int sub_1001DD1C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100183098((uint64_t *)&unk_100646C48);
    uint64_t v3 = static _SetStorage.allocate(capacity:)(v1);
    uint64_t v4 = 0LL;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      int v7 = *(unsigned __int8 *)(v6 + v4);
      Hasher.init(_seed:)(v19);
      Hasher._combine(_:)(v7);
      Swift::Int result = Hasher._finalize()();
      uint64_t v9 = -1LL << *(_BYTE *)(v3 + 32);
      unint64_t v10 = result & ~v9;
      unint64_t v11 = v10 >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
      uint64_t v13 = 1LL << v10;
      uint64_t v14 = *(void *)(v3 + 48);
      if (((1LL << v10) & v12) != 0)
      {
        uint64_t v15 = ~v9;
        while (1)
        {
          unint64_t v10 = (v10 + 1) & v15;
          unint64_t v11 = v10 >> 6;
          uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1LL << v10;
          if ((v12 & (1LL << v10)) == 0) {
            break;
          }
        }
      }

      *(void *)(v5 + 8 * v11) = v13 | v12;
      *(_BYTE *)(v14 + v10) = v7;
      uint64_t v16 = *(void *)(v3 + 16);
      BOOL v17 = __OFADD__(v16, 1LL);
      uint64_t v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }

      *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v18;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
  }

  return (Swift::Int)&_swiftEmptySetSingleton;
}

Swift::Int sub_1001DD304(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100183098((uint64_t *)&unk_100645580);
    uint64_t v3 = static _SetStorage.allocate(capacity:)(v1);
    uint64_t v4 = 0LL;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      sub_1001CE1D0(v6 + 40 * v4, (uint64_t)v21);
      Swift::Int result = AnyHashable._rawHashValue(seed:)(*(void *)(v3 + 40));
      uint64_t v8 = ~(-1LL << *(_BYTE *)(v3 + 32));
      unint64_t v9 = result & v8;
      unint64_t v10 = (result & (unint64_t)v8) >> 6;
      uint64_t v11 = *(void *)(v5 + 8 * v10);
      uint64_t v12 = 1LL << (result & v8);
      if ((v12 & v11) != 0)
      {
        while (1)
        {
          sub_1001CE1D0(*(void *)(v3 + 48) + 40 * v9, (uint64_t)v20);
          char v13 = static AnyHashable.== infix(_:_:)(v20, v21);
          Swift::Int result = sub_10019154C((uint64_t)v20);
          if ((v13 & 1) != 0) {
            break;
          }
          unint64_t v9 = (v9 + 1) & v8;
          unint64_t v10 = v9 >> 6;
          uint64_t v11 = *(void *)(v5 + 8 * (v9 >> 6));
          uint64_t v12 = 1LL << v9;
          if ((v11 & (1LL << v9)) == 0) {
            goto LABEL_8;
          }
        }

        sub_10019154C((uint64_t)v21);
      }

      else
      {
LABEL_8:
        *(void *)(v5 + 8 * v10) = v12 | v11;
        uint64_t v14 = *(void *)(v3 + 48) + 40 * v9;
        __int128 v15 = v21[0];
        __int128 v16 = v21[1];
        *(void *)(v14 + 32) = v22;
        *(_OWORD *)uint64_t v14 = v15;
        *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v16;
        uint64_t v17 = *(void *)(v3 + 16);
        BOOL v18 = __OFADD__(v17, 1LL);
        uint64_t v19 = v17 + 1;
        if (v18)
        {
          __break(1u);
          return result;
        }

        *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v19;
      }

      if (++v4 == v1) {
        return v3;
      }
    }
  }

  return (Swift::Int)&_swiftEmptySetSingleton;
}

void sub_1001DD468(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain((const char *)a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease((const char *)v1);
    if (v3)
    {
LABEL_3:
      sub_100183098(&qword_100646C78);
      uint64_t v4 = (void *)static _SetStorage.allocate(capacity:)(v3);
      if (!v2) {
        goto LABEL_4;
      }
LABEL_11:
      if (v1 < 0) {
        uint64_t v7 = v1;
      }
      else {
        uint64_t v7 = v1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain((const char *)v1);
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v7);
      swift_bridgeObjectRelease((const char *)v1);
      if (!v5) {
        return;
      }
      goto LABEL_15;
    }
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
  }

  uint64_t v4 = &_swiftEmptySetSingleton;
  if (v2) {
    goto LABEL_11;
  }
LABEL_4:
  uint64_t v5 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v5) {
    return;
  }
LABEL_15:
  uint64_t v8 = (char *)(v4 + 7);
  uint64_t v44 = v5;
  if ((v1 & 0xC000000000000001LL) != 0)
  {
    uint64_t v9 = 0LL;
    uint64_t v42 = (const char *)v1;
    while (1)
    {
      uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v1);
      BOOL v11 = __OFADD__(v9++, 1LL);
      if (v11)
      {
        __break(1u);
        goto LABEL_43;
      }

      uint64_t v12 = v10;
      Swift::Int v13 = NSObject._rawHashValue(seed:)(v4[5]);
      uint64_t v14 = -1LL << *((_BYTE *)v4 + 32);
      unint64_t v15 = v13 & ~v14;
      unint64_t v16 = v15 >> 6;
      uint64_t v17 = *(void *)&v8[8 * (v15 >> 6)];
      uint64_t v18 = 1LL << v15;
      if (((1LL << v15) & v17) != 0)
      {
        type metadata accessor for SDAirDropSendConnection(0LL);
        id v19 = *(id *)(v4[6] + 8 * v15);
        char v20 = static NSObject.== infix(_:_:)(v19, v12);

        if ((v20 & 1) != 0)
        {
LABEL_17:
          swift_unknownObjectRelease(v12);
          uint64_t v1 = (uint64_t)v42;
          goto LABEL_18;
        }

        uint64_t v21 = ~v14;
        while (1)
        {
          unint64_t v15 = (v15 + 1) & v21;
          unint64_t v16 = v15 >> 6;
          uint64_t v17 = *(void *)&v8[8 * (v15 >> 6)];
          uint64_t v18 = 1LL << v15;
          if ((v17 & (1LL << v15)) == 0) {
            break;
          }
          id v22 = *(id *)(v4[6] + 8 * v15);
          char v23 = static NSObject.== infix(_:_:)(v22, v12);

          if ((v23 & 1) != 0) {
            goto LABEL_17;
          }
        }

        uint64_t v1 = (uint64_t)v42;
      }

      *(void *)&v8[8 * v16] = v18 | v17;
      *(void *)(v4[6] + 8 * v15) = v12;
      uint64_t v24 = v4[2];
      BOOL v11 = __OFADD__(v24, 1LL);
      uint64_t v25 = v24 + 1;
      if (v11) {
        goto LABEL_44;
      }
      void v4[2] = v25;
LABEL_18:
      if (v9 == v44) {
        return;
      }
    }
  }

  uint64_t v26 = 0LL;
  uint64_t v43 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (v26 != v43)
  {
    Swift::Int v27 = v4[5];
    id v28 = *(id *)(v1 + 32 + 8 * v26);
    Swift::Int v29 = NSObject._rawHashValue(seed:)(v27);
    uint64_t v30 = -1LL << *((_BYTE *)v4 + 32);
    unint64_t v31 = v29 & ~v30;
    unint64_t v32 = v31 >> 6;
    uint64_t v33 = *(void *)&v8[8 * (v31 >> 6)];
    uint64_t v34 = 1LL << v31;
    if (((1LL << v31) & v33) != 0)
    {
      type metadata accessor for SDAirDropSendConnection(0LL);
      id v35 = *(id *)(v4[6] + 8 * v31);
      char v36 = static NSObject.== infix(_:_:)(v35, v28);

      if ((v36 & 1) != 0) {
        goto LABEL_30;
      }
      uint64_t v37 = ~v30;
      unint64_t v31 = (v31 + 1) & v37;
      unint64_t v32 = v31 >> 6;
      uint64_t v33 = *(void *)&v8[8 * (v31 >> 6)];
      uint64_t v34 = 1LL << v31;
      if ((v33 & (1LL << v31)) != 0)
      {
        while (1)
        {
          id v38 = *(id *)(v4[6] + 8 * v31);
          char v39 = static NSObject.== infix(_:_:)(v38, v28);

          if ((v39 & 1) != 0) {
            break;
          }
          unint64_t v31 = (v31 + 1) & v37;
          unint64_t v32 = v31 >> 6;
          uint64_t v33 = *(void *)&v8[8 * (v31 >> 6)];
          uint64_t v34 = 1LL << v31;
          if ((v33 & (1LL << v31)) == 0) {
            goto LABEL_38;
          }
        }

void *sub_1001DD7C0(uint64_t a1)
{
  uint64_t v56 = type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint(0LL);
  uint64_t v2 = __chkstk_darwin(v56);
  uint64_t v61 = (char *)v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v54 - v5;
  uint64_t v7 = __chkstk_darwin(v4);
  id v65 = (char *)v54 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  BOOL v11 = (char *)v54 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v62 = (char *)v54 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v16 = (char *)v54 - v15;
  __chkstk_darwin(v14);
  uint64_t v70 = (char *)v54 - v17;
  uint64_t v18 = type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint(0LL);
  __chkstk_darwin(v18);
  uint64_t v63 = (char *)v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint(0LL);
  __chkstk_darwin(v20);
  uint64_t v57 = (char *)v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_100183098(&qword_100646C60);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)v54 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for SDAirDropDiscoveredEndpoint(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v68 = (char *)v54 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v71 = (char *)v54 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v32 = __chkstk_darwin(v31);
  uint64_t v33 = __chkstk_darwin(v32);
  uint64_t v78 = (uint64_t)v54 - v34;
  __chkstk_darwin(v33);
  uint64_t v77 = (uint64_t)v54 - v37;
  uint64_t v38 = *(void *)(a1 + 16);
  if (v38)
  {
    uint64_t v66 = v36;
    uint64_t v67 = v35;
    uint64_t v58 = v16;
    uint64_t v59 = v6;
    sub_100183098(&qword_100646C68);
    uint64_t v39 = static _SetStorage.allocate(capacity:)(v38);
    uint64_t v40 = 0LL;
    uint64_t v75 = v39 + 56;
    uint64_t v55 = a1 + ((*(unsigned __int8 *)(v26 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
    uint64_t v76 = *(void *)(v26 + 72);
    uint64_t v64 = v11;
    uint64_t v69 = v22;
    uint64_t v73 = v39;
    uint64_t v74 = v25;
    v54[2] = v38;
    while (1)
    {
      uint64_t v60 = v40;
      sub_1001A4B84(v55 + v76 * v40, v77, type metadata accessor for SDAirDropDiscoveredEndpoint);
      Hasher.init(_seed:)(&__s1);
      sub_10020DC2C();
      Swift::Int v42 = Hasher._finalize()();
      uint64_t v43 = ~(-1LL << *(_BYTE *)(v39 + 32));
      Swift::Int v44 = v42 & v43;
      unint64_t v45 = (v42 & (unint64_t)v43) >> 6;
      uint64_t v46 = *(void *)(v75 + 8 * v45);
      uint64_t v47 = 1LL << (v42 & v43);
      if ((v47 & v46) != 0) {
        break;
      }
      *(void *)(v75 + 8 * v45) = v47 | v46;
      sub_1001A4B40(v77, *(void *)(v39 + 48) + v44 * v76, type metadata accessor for SDAirDropDiscoveredEndpoint);
      uint64_t v51 = *(void *)(v39 + 16);
      BOOL v52 = __OFADD__(v51, 1LL);
      uint64_t v53 = v51 + 1;
      if (v52)
      {
        __break(1u);
        JUMPOUT(0x1001DF940LL);
      }

      *(void *)(v39 + swift_unknownObjectWeakDestroy(v0 + 16) = v53;
      uint64_t v40 = v60 + 1;
      if (v60 + 1 == v38) {
        return (void *)v39;
      }
    }

    uint64_t v72 = ~(-1LL << *(_BYTE *)(v39 + 32));
    uint64_t v48 = v78;
    sub_1001A4B84(*(void *)(v39 + 48) + v44 * v76, v78, type metadata accessor for SDAirDropDiscoveredEndpoint);
    uint64_t v49 = (uint64_t)&v24[*(int *)(v22 + 48)];
    sub_1001A4B84(v48, (uint64_t)v24, type metadata accessor for SDAirDropDiscoveredEndpoint);
    sub_1001A4B84(v77, v49, type metadata accessor for SDAirDropDiscoveredEndpoint);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v24, v74);
    return (void *)((uint64_t (*)(void))((char *)&loc_1001DDD60 + dword_1001DFA7C[EnumCaseMultiPayload]))();
  }

  else
  {
    return &_swiftEmptySetSingleton;
  }

void sub_1001DFAEC(uint64_t a1)
{
}

void sub_1001DFB08(uint64_t a1, uint64_t *a2, unint64_t *a3, void *a4)
{
  uint64_t v5 = a1;
  unint64_t v6 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v10 = a1;
    }
    else {
      uint64_t v10 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain((const char *)a1);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease((const char *)v5);
    if (v7)
    {
LABEL_3:
      sub_100183098(a2);
      uint64_t v8 = (void *)static _SetStorage.allocate(capacity:)(v7);
      if (!v6) {
        goto LABEL_4;
      }
LABEL_11:
      if (v5 < 0) {
        uint64_t v11 = v5;
      }
      else {
        uint64_t v11 = v5 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain((const char *)v5);
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v11);
      swift_bridgeObjectRelease((const char *)v5);
      if (!v9) {
        return;
      }
      goto LABEL_15;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v7) {
      goto LABEL_3;
    }
  }

  uint64_t v8 = &_swiftEmptySetSingleton;
  if (v6) {
    goto LABEL_11;
  }
LABEL_4:
  uint64_t v9 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v9) {
    return;
  }
LABEL_15:
  uint64_t v12 = (char *)(v8 + 7);
  uint64_t v50 = v9;
  if ((v5 & 0xC000000000000001LL) != 0)
  {
    uint64_t v13 = 0LL;
    uint64_t v46 = (const char *)v5;
    while (1)
    {
      uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v5);
      BOOL v15 = __OFADD__(v13++, 1LL);
      if (v15)
      {
        __break(1u);
        goto LABEL_43;
      }

      uint64_t v16 = v14;
      Swift::Int v17 = NSObject._rawHashValue(seed:)(v8[5]);
      uint64_t v18 = -1LL << *((_BYTE *)v8 + 32);
      unint64_t v19 = v17 & ~v18;
      unint64_t v20 = v19 >> 6;
      uint64_t v21 = *(void *)&v12[8 * (v19 >> 6)];
      uint64_t v22 = 1LL << v19;
      if (((1LL << v19) & v21) != 0)
      {
        sub_100183168(0LL, a3, a4);
        id v23 = *(id *)(v8[6] + 8 * v19);
        char v24 = static NSObject.== infix(_:_:)(v23, v16);

        if ((v24 & 1) != 0)
        {
LABEL_17:
          swift_unknownObjectRelease(v16);
          uint64_t v5 = (uint64_t)v46;
          goto LABEL_18;
        }

        uint64_t v25 = ~v18;
        while (1)
        {
          unint64_t v19 = (v19 + 1) & v25;
          unint64_t v20 = v19 >> 6;
          uint64_t v21 = *(void *)&v12[8 * (v19 >> 6)];
          uint64_t v22 = 1LL << v19;
          if ((v21 & (1LL << v19)) == 0) {
            break;
          }
          id v26 = *(id *)(v8[6] + 8 * v19);
          char v27 = static NSObject.== infix(_:_:)(v26, v16);

          if ((v27 & 1) != 0) {
            goto LABEL_17;
          }
        }

        uint64_t v5 = (uint64_t)v46;
      }

      *(void *)&v12[8 * v20] = v22 | v21;
      *(void *)(v8[6] + 8 * v19) = v16;
      uint64_t v28 = v8[2];
      BOOL v15 = __OFADD__(v28, 1LL);
      uint64_t v29 = v28 + 1;
      if (v15) {
        goto LABEL_44;
      }
      v8[2] = v29;
LABEL_18:
      if (v13 == v50) {
        return;
      }
    }
  }

  uint64_t v30 = 0LL;
  uint64_t v47 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (v30 != v47)
  {
    Swift::Int v31 = v8[5];
    id v32 = *(id *)(v5 + 32 + 8 * v30);
    Swift::Int v33 = NSObject._rawHashValue(seed:)(v31);
    uint64_t v34 = -1LL << *((_BYTE *)v8 + 32);
    unint64_t v35 = v33 & ~v34;
    unint64_t v36 = v35 >> 6;
    uint64_t v37 = *(void *)&v12[8 * (v35 >> 6)];
    uint64_t v38 = 1LL << v35;
    if (((1LL << v35) & v37) != 0)
    {
      sub_100183168(0LL, a3, a4);
      id v39 = *(id *)(v8[6] + 8 * v35);
      char v40 = static NSObject.== infix(_:_:)(v39, v32);

      if ((v40 & 1) != 0) {
        goto LABEL_30;
      }
      uint64_t v41 = ~v34;
      unint64_t v35 = (v35 + 1) & v41;
      unint64_t v36 = v35 >> 6;
      uint64_t v37 = *(void *)&v12[8 * (v35 >> 6)];
      uint64_t v38 = 1LL << v35;
      if ((v37 & (1LL << v35)) != 0)
      {
        while (1)
        {
          id v42 = *(id *)(v8[6] + 8 * v35);
          char v43 = static NSObject.== infix(_:_:)(v42, v32);

          if ((v43 & 1) != 0) {
            break;
          }
          unint64_t v35 = (v35 + 1) & v41;
          unint64_t v36 = v35 >> 6;
          uint64_t v37 = *(void *)&v12[8 * (v35 >> 6)];
          uint64_t v38 = 1LL << v35;
          if ((v37 & (1LL << v35)) == 0) {
            goto LABEL_38;
          }
        }

uint64_t type metadata accessor for IntegerPacker.PackError(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for IntegerPacker.PackError);
}

uint64_t sub_1001DFE78@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001DAA74(a1, v2[2], v2[3], v2[5], v2[6], a2);
}

uint64_t sub_1001DFE9C()
{
  return dispatch thunk of static BinaryInteger.| infix(_:_:)();
}

unint64_t sub_1001DFED0()
{
  unint64_t result = qword_100646C58;
  if (!qword_100646C58)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100646C58);
  }

  return result;
}

void *sub_1001DFF14()
{
  return sub_1001DBBAC(v0);
}

uint64_t sub_1001DFF2C()
{
  return sub_1001DBD9C(v0);
}

void sub_1001DFF34(const char *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t sub_1001DFF68(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1001DFF78(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1001DFF80(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_100183124(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1001DFFC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_1001DFFEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40LL);
}

uint64_t type metadata accessor for IntegerPacker(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for IntegerPacker);
}

uint64_t sub_1001E0000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32LL);
}

uint64_t _s7RequestV4KindOwet(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t sub_1001E005C(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1001E009C + 4 * byte_1004CE043[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1001E00BC + 4 * byte_1004CE048[v4]))();
  }
}

_BYTE *sub_1001E009C(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_1001E00BC(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1001E00C4(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1001E00CC(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1001E00D4(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1001E00DC(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_1001E00E8(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1004CE2B0, a1);
}

uint64_t type metadata accessor for SDAirDropContentHandlerVoiceMemos()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary33SDAirDropContentHandlerVoiceMemos);
}

uint64_t sub_1001E0118@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SDAirDropContentHandlerVoiceMemos();
  uint64_t result = swift_allocObject(v2, 24LL, 7LL);
  *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  *a1 = result;
  return result;
}

uint64_t sub_1001E0150@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return sub_100266ABC(a1, a2, a3);
}

void sub_1001E01A0(uint64_t a1, char a2)
{
  uint64_t v3 = SFAirDropReceive.AskRequest.files.getter();
  unint64_t v4 = *(void *)(v3 + 16);
  swift_bridgeObjectRelease(v3);
  uint64_t v5 = sub_100183098((uint64_t *)&unk_100650440);
  uint64_t inited = swift_initStackObject(v5, v23);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1004CDCA0;
  *(void *)(inited + 32) = 0x454D5F4543494F56LL;
  uint64_t v7 = inited + 32;
  *(void *)(inited + 40) = 0xEA00000000004F4DLL;
  *(void *)(inited + 4_Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRetain(0xEA00000000004F4DLL);
  swift_bridgeObjectRetain(inited);
  v8._countAndFlagsBits = 95LL;
  v8._object = (void *)0xE100000000000000LL;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x454D5F4543494F56LL;
  v9._object = (void *)0xEA00000000004F4DLL;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(0xEA00000000004F4DLL);
  if (v4 > 1)
  {
    v10._countAndFlagsBits = 0x4C4152554C505FLL;
    v10._object = (void *)0xE700000000000000LL;
    String.append(_:)(v10);
  }

  swift_bridgeObjectRelease(inited);
  if ((a2 & 1) != 0)
  {
    v11._countAndFlagsBits = 0x4C4154495041435FLL;
    v11._object = (void *)0xEC00000044455A49LL;
    String.append(_:)(v11);
  }

  v12._countAndFlagsBits = 0x545845545FLL;
  v12._object = (void *)0xE500000000000000LL;
  String.append(_:)(v12);
  swift_setDeallocating(inited);
  uint64_t v13 = *(void *)(inited + 16);
  uint64_t v14 = sub_100183098(&qword_100646EA0);
  swift_arrayDestroy(v7, v13, v14);
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xEF524546534E4152LL);
  id v17 = (id)SFLocalizedStringForKey(v15, v16);

  if (v17)
  {
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    uint64_t v20 = v19;

    uint64_t v21 = sub_100183098(&qword_1006483E0);
    uint64_t v22 = swift_allocObject(v21, 72LL, 7LL);
    *(_OWORD *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1004CDCA0;
    *(void *)(v22 + 56) = &type metadata for Int;
    *(void *)(v22 + 64) = &protocol witness table for Int;
    *(void *)(v22 + 32) = v4;
    static String.localizedStringWithFormat(_:_:)(v18, v20, v22);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v22);
  }

  else
  {
    __break(1u);
  }

uint64_t type metadata accessor for SDAirDropClassroomBrowserFactory()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary32SDAirDropClassroomBrowserFactory);
}

id sub_1001E0414()
{
  uint64_t v1 = *(int *)(_s10NanoWalletV18InitialLockContextVMa(0LL) + 44);
  uint64_t v2 = *(void **)(v0 + v1);
  if (v2)
  {
    id v3 = *(id *)(v0 + v1);
LABEL_5:
    id v5 = v2;
    return v3;
  }

  id result = [objc_allocWithZone((Class)SDAuthenticationRequest) init];
  if (result)
  {
    *(void *)(v0 + v1) = result;
    id v3 = result;
    uint64_t v2 = 0LL;
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

uint64_t sub_1001E0480()
{
  uint64_t v0 = sub_100183098(&qword_1006457E0);
  uint64_t v1 = swift_allocObject(v0, 432LL, 7LL);
  *(_OWORD *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1004CE410;
  if (qword_100643F00 != -1) {
    swift_once(&qword_100643F00, LongHash.storage.getter);
  }
  *(void *)(v1 + 56) = &type metadata for SDAuthentication.Operation.CheckIsBluetoothEnabled;
  *(void *)(v1 + 64) = &off_10064AC58;
  *(void *)(v1 + 96) = &type metadata for SDAuthentication.Operation.CheckIsWiFiEnabled;
  *(void *)(v1 + 104) = &off_10064AC38;
  *(void *)(v1 + 136) = &type metadata for SDAuthentication.Operation.CheckWatchIsNearby;
  *(void *)(v1 + 144) = &off_10064AC18;
  *(void *)(v1 + 176) = &type metadata for SDAuthentication.Operation.CheckRemoteDeviceOSVersionIsSupported;
  *(void *)(v1 + 184) = &off_10064ABF8;
  *(void *)(v1 + 2swift_unknownObjectWeakDestroy(v0 + 16) = &type metadata for SDAuthentication.Operation.RecordRemoteDevice;
  *(void *)(v1 + 224) = &off_10064ABD8;
  *(void *)(v1 + 256) = &type metadata for SDAuthentication.Operation.CheckLocalSecurityPolicy;
  *(void *)(v1 + 264) = &off_10064ABB8;
  *(void *)(v1 + 296) = &type metadata for SDAuthentication.Operation.IncludeAWDLInfoInMessage;
  *(void *)(v1 + 304) = &off_10064AB98;
  *(void *)(v1 + 336) = &type metadata for SDAuthentication.Operation.IncludeLastUnlockDateInMessage;
  *(void *)(v1 + 344) = &off_10064AB78;
  *(void *)(v1 + 376) = &type metadata for SDAuthentication.Operation.IncludeRangingTokenInMessage;
  *(void *)(v1 + 384) = &off_10064AB58;
  *(void *)(v1 + 4swift_unknownObjectWeakDestroy(v0 + 16) = &type metadata for SDAuthentication.Operation.SendRequestMessage;
  *(void *)(v1 + 424) = &off_10064AB38;
  return v1;
}

uint64_t sub_1001E05B4(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16LL) & ~(unint64_t)v4);
    swift_retain(v5);
  }

  else
  {
    Swift::String v8 = a2 + 1;
    __int128 v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    uint64_t v10 = v9;
    Swift::String v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_bridgeObjectRetain(v5);
    v11(a1 + 8, v8, v10);
    uint64_t v12 = a3[6];
    uint64_t v13 = (char *)(a1 + v12);
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for Date(0LL);
    uint64_t v16 = *(void *)(v15 - 8);
    id v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    uint64_t v102 = a3;
    if (v17(v14, 1LL, v15))
    {
      uint64_t v18 = sub_100183098(&qword_1006457E8);
      memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
    }

    uint64_t v19 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
    uint64_t v20 = v19[5];
    uint64_t v21 = &v13[v20];
    uint64_t v22 = &v14[v20];
    if (v17(&v14[v20], 1LL, v15))
    {
      uint64_t v23 = sub_100183098(&qword_1006457E8);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v22, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v21, 0LL, 1LL, v15);
    }

    uint64_t v24 = v19[6];
    uint64_t v25 = &v13[v24];
    id v26 = &v14[v24];
    if (v17(&v14[v24], 1LL, v15))
    {
      uint64_t v27 = sub_100183098(&qword_1006457E8);
      memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v25, v26, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v25, 0LL, 1LL, v15);
    }

    uint64_t v28 = v19[7];
    uint64_t v29 = &v13[v28];
    uint64_t v30 = &v14[v28];
    if (v17(&v14[v28], 1LL, v15))
    {
      uint64_t v31 = sub_100183098(&qword_1006457E8);
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v29, v30, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v29, 0LL, 1LL, v15);
    }

    uint64_t v32 = v19[8];
    Swift::Int v33 = &v13[v32];
    uint64_t v34 = &v14[v32];
    if (v17(&v14[v32], 1LL, v15))
    {
      uint64_t v35 = sub_100183098(&qword_1006457E8);
      memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v33, v34, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v33, 0LL, 1LL, v15);
    }

    uint64_t v36 = v19[9];
    uint64_t v37 = &v13[v36];
    uint64_t v38 = &v14[v36];
    if (v17(&v14[v36], 1LL, v15))
    {
      uint64_t v39 = sub_100183098(&qword_1006457E8);
      memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v37, v38, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v37, 0LL, 1LL, v15);
    }

    uint64_t v40 = v19[10];
    uint64_t v41 = &v13[v40];
    id v42 = &v14[v40];
    if (v17(&v14[v40], 1LL, v15))
    {
      uint64_t v43 = sub_100183098(&qword_1006457E8);
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v41, v42, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v41, 0LL, 1LL, v15);
    }

    uint64_t v44 = v19[11];
    uint64_t v45 = &v13[v44];
    uint64_t v46 = &v14[v44];
    if (v17(&v14[v44], 1LL, v15))
    {
      uint64_t v47 = sub_100183098(&qword_1006457E8);
      memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v45, v46, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v45, 0LL, 1LL, v15);
    }

    uint64_t v48 = v19[12];
    uint64_t v49 = &v13[v48];
    uint64_t v50 = &v14[v48];
    if (v17(&v14[v48], 1LL, v15))
    {
      uint64_t v51 = sub_100183098(&qword_1006457E8);
      memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v49, v50, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v49, 0LL, 1LL, v15);
    }

    v13[v19[13]] = v14[v19[13]];
    uint64_t v52 = v19[14];
    uint64_t v53 = &v13[v52];
    uint64_t v54 = &v14[v52];
    if (v17(&v14[v52], 1LL, v15))
    {
      uint64_t v55 = sub_100183098(&qword_1006457E8);
      memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v53, v54, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v53, 0LL, 1LL, v15);
    }

    uint64_t v56 = v19[15];
    uint64_t v57 = &v13[v56];
    uint64_t v58 = &v14[v56];
    if (v17(&v14[v56], 1LL, v15))
    {
      uint64_t v59 = sub_100183098(&qword_1006457E8);
      memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v57, v58, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v57, 0LL, 1LL, v15);
    }

    uint64_t v60 = v19[16];
    uint64_t v61 = &v13[v60];
    uint64_t v62 = &v14[v60];
    if (v17(&v14[v60], 1LL, v15))
    {
      uint64_t v63 = sub_100183098(&qword_1006457E8);
      memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v61, v62, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v61, 0LL, 1LL, v15);
    }

    uint64_t v64 = v19[17];
    id v65 = &v13[v64];
    uint64_t v66 = &v14[v64];
    if (v17(&v14[v64], 1LL, v15))
    {
      uint64_t v67 = sub_100183098(&qword_1006457E8);
      memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v65, v66, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v65, 0LL, 1LL, v15);
    }

    uint64_t v68 = v19[18];
    uint64_t v69 = &v13[v68];
    uint64_t v70 = &v14[v68];
    *(_DWORD *)uint64_t v69 = *(_DWORD *)v70;
    v69[4] = v70[4];
    v13[v19[19]] = v14[v19[19]];
    uint64_t v71 = v19[20];
    uint64_t v72 = &v13[v71];
    uint64_t v73 = &v14[v71];
    uint64_t v74 = *((void *)v73 + 1);
    *(void *)uint64_t v72 = *(void *)v73;
    *((void *)v72 + 1) = v74;
    uint64_t v75 = v19[21];
    uint64_t v76 = &v13[v75];
    uint64_t v77 = &v14[v75];
    uint64_t v78 = *((void *)v77 + 1);
    *(void *)uint64_t v76 = *(void *)v77;
    *((void *)v76 + 1) = v78;
    uint64_t v79 = v102[7];
    uint64_t v80 = (void *)(a1 + v79);
    uint64_t v81 = (char *)a2 + v79;
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v78);
    if (v17(v81, 1LL, v15))
    {
      uint64_t v82 = sub_100183098(&qword_1006457E8);
      memcpy(v80, v81, *(void *)(*(void *)(v82 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(v16 + 16))(v80, v81, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v80, 0LL, 1LL, v15);
    }

    uint64_t v83 = v102[8];
    uint64_t v84 = (void *)(a1 + v83);
    uint64_t v85 = (char *)a2 + v83;
    if (v17((char *)a2 + v83, 1LL, v15))
    {
      uint64_t v86 = sub_100183098(&qword_1006457E8);
      memcpy(v84, v85, *(void *)(*(void *)(v86 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(v16 + 16))(v84, v85, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v84, 0LL, 1LL, v15);
    }

    uint64_t v87 = v102[9];
    uint64_t v88 = (uint64_t *)(a1 + v87);
    uint64_t v89 = (uint64_t *)((char *)a2 + v87);
    uint64_t v90 = *v89;
    unint64_t v91 = v89[1];
    sub_10019BA8C(*v89, v91);
    *uint64_t v88 = v90;
    v88[1] = v91;
    uint64_t v92 = v102[10];
    uint64_t v93 = a1 + v92;
    uint64_t v94 = (uint64_t *)((char *)a2 + v92);
    unint64_t v95 = v94[1];
    if (v95 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v93 = *(_OWORD *)v94;
    }

    else
    {
      uint64_t v96 = *v94;
      sub_10019BA8C(*v94, v94[1]);
      *(void *)uint64_t v93 = v96;
      *(void *)(v93 + _Block_object_dispose(va, 8) = v95;
    }

    uint64_t v97 = v102[11];
    uint64_t v98 = v102[12];
    uint64_t v99 = *(void **)((char *)a2 + v97);
    *(void *)(a1 + v97) = v99;
    *(_BYTE *)(a1 + v9_Block_object_dispose(va, 8) = *((_BYTE *)a2 + v98);
    id v100 = v99;
  }

  return a1;
}

void sub_1001E0DF4(void *a1, int *a2)
{
  int v4 = a1 + 1;
  swift_bridgeObjectRelease(*a1);
  sub_10018709C(v4);
  uint64_t v5 = (char *)a1 + a2[6];
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  Swift::String v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  }
  __int128 v9 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v10 = &v5[v9[5]];
  if (!v8(v10, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  Swift::String v11 = &v5[v9[6]];
  if (!v8(v11, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  }
  uint64_t v12 = &v5[v9[7]];
  if (!v8(v12, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  }
  uint64_t v13 = &v5[v9[8]];
  if (!v8(v13, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  }
  uint64_t v14 = &v5[v9[9]];
  if (!v8(v14, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  }
  uint64_t v15 = &v5[v9[10]];
  if (!v8(v15, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
  }
  uint64_t v16 = &v5[v9[11]];
  if (!v8(v16, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
  }
  id v17 = &v5[v9[12]];
  if (!v8(v17, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
  }
  uint64_t v18 = &v5[v9[14]];
  if (!v8(v18, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
  }
  uint64_t v19 = &v5[v9[15]];
  if (!v8(v19, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
  }
  uint64_t v20 = &v5[v9[16]];
  if (!v8(v20, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
  }
  uint64_t v21 = &v5[v9[17]];
  if (!v8(v21, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v21, v6);
  }
  swift_bridgeObjectRelease(*(void *)&v5[v9[20] + 8]);
  swift_bridgeObjectRelease(*(void *)&v5[v9[21] + 8]);
  uint64_t v22 = (char *)a1 + a2[7];
  if (!v8(v22, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v22, v6);
  }
  uint64_t v23 = (char *)a1 + a2[8];
  if (!v8(v23, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v23, v6);
  }
  sub_100189B20(*(void *)((char *)a1 + a2[9]), *(void *)((char *)a1 + a2[9] + 8));
  uint64_t v24 = (void *)((char *)a1 + a2[10]);
  unint64_t v25 = v24[1];
  if (v25 >> 60 != 15) {
    sub_100189B20(*v24, v25);
  }
}

uint64_t sub_1001E114C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(void *)a1 = *a2;
  uint64_t v7 = a2 + 1;
  __int128 v8 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v8;
  uint64_t v9 = v8;
  uint64_t v10 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v8 - 8);
  swift_bridgeObjectRetain(v6);
  v10(a1 + 8, v7, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  uint64_t v101 = a3;
  if (v16(v13, 1LL, v14))
  {
    uint64_t v17 = sub_100183098(&qword_1006457E8);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v19 = v18[5];
  uint64_t v20 = &v12[v19];
  uint64_t v21 = &v13[v19];
  if (v16(&v13[v19], 1LL, v14))
  {
    uint64_t v22 = sub_100183098(&qword_1006457E8);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v20, v21, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v20, 0LL, 1LL, v14);
  }

  uint64_t v23 = v18[6];
  uint64_t v24 = &v12[v23];
  unint64_t v25 = &v13[v23];
  if (v16(&v13[v23], 1LL, v14))
  {
    uint64_t v26 = sub_100183098(&qword_1006457E8);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v24, v25, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v24, 0LL, 1LL, v14);
  }

  uint64_t v27 = v18[7];
  uint64_t v28 = &v12[v27];
  uint64_t v29 = &v13[v27];
  if (v16(&v13[v27], 1LL, v14))
  {
    uint64_t v30 = sub_100183098(&qword_1006457E8);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v28, v29, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v28, 0LL, 1LL, v14);
  }

  uint64_t v31 = v18[8];
  uint64_t v32 = &v12[v31];
  Swift::Int v33 = &v13[v31];
  if (v16(&v13[v31], 1LL, v14))
  {
    uint64_t v34 = sub_100183098(&qword_1006457E8);
    memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v32, v33, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v32, 0LL, 1LL, v14);
  }

  uint64_t v35 = v18[9];
  uint64_t v36 = &v12[v35];
  uint64_t v37 = &v13[v35];
  if (v16(&v13[v35], 1LL, v14))
  {
    uint64_t v38 = sub_100183098(&qword_1006457E8);
    memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v36, v37, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v36, 0LL, 1LL, v14);
  }

  uint64_t v39 = v18[10];
  uint64_t v40 = &v12[v39];
  uint64_t v41 = &v13[v39];
  if (v16(&v13[v39], 1LL, v14))
  {
    uint64_t v42 = sub_100183098(&qword_1006457E8);
    memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v40, v41, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v40, 0LL, 1LL, v14);
  }

  uint64_t v43 = v18[11];
  uint64_t v44 = &v12[v43];
  uint64_t v45 = &v13[v43];
  if (v16(&v13[v43], 1LL, v14))
  {
    uint64_t v46 = sub_100183098(&qword_1006457E8);
    memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v44, v45, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v44, 0LL, 1LL, v14);
  }

  uint64_t v47 = v18[12];
  uint64_t v48 = &v12[v47];
  uint64_t v49 = &v13[v47];
  if (v16(&v13[v47], 1LL, v14))
  {
    uint64_t v50 = sub_100183098(&qword_1006457E8);
    memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v48, v49, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v48, 0LL, 1LL, v14);
  }

  v12[v18[13]] = v13[v18[13]];
  uint64_t v51 = v18[14];
  uint64_t v52 = &v12[v51];
  uint64_t v53 = &v13[v51];
  if (v16(&v13[v51], 1LL, v14))
  {
    uint64_t v54 = sub_100183098(&qword_1006457E8);
    memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v52, v53, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v52, 0LL, 1LL, v14);
  }

  uint64_t v55 = v18[15];
  uint64_t v56 = &v12[v55];
  uint64_t v57 = &v13[v55];
  if (v16(&v13[v55], 1LL, v14))
  {
    uint64_t v58 = sub_100183098(&qword_1006457E8);
    memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v56, v57, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v56, 0LL, 1LL, v14);
  }

  uint64_t v59 = v18[16];
  uint64_t v60 = &v12[v59];
  uint64_t v61 = &v13[v59];
  if (v16(&v13[v59], 1LL, v14))
  {
    uint64_t v62 = sub_100183098(&qword_1006457E8);
    memcpy(v60, v61, *(void *)(*(void *)(v62 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v60, v61, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v60, 0LL, 1LL, v14);
  }

  uint64_t v63 = v18[17];
  uint64_t v64 = &v12[v63];
  id v65 = &v13[v63];
  if (v16(&v13[v63], 1LL, v14))
  {
    uint64_t v66 = sub_100183098(&qword_1006457E8);
    memcpy(v64, v65, *(void *)(*(void *)(v66 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v64, v65, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v64, 0LL, 1LL, v14);
  }

  uint64_t v67 = v18[18];
  uint64_t v68 = &v12[v67];
  uint64_t v69 = &v13[v67];
  *(_DWORD *)uint64_t v68 = *(_DWORD *)v69;
  v68[4] = v69[4];
  v12[v18[19]] = v13[v18[19]];
  uint64_t v70 = v18[20];
  uint64_t v71 = &v12[v70];
  uint64_t v72 = &v13[v70];
  uint64_t v73 = *((void *)v72 + 1);
  *(void *)uint64_t v71 = *(void *)v72;
  *((void *)v71 + 1) = v73;
  uint64_t v74 = v18[21];
  uint64_t v75 = &v12[v74];
  uint64_t v76 = &v13[v74];
  uint64_t v77 = *((void *)v76 + 1);
  *(void *)uint64_t v75 = *(void *)v76;
  *((void *)v75 + 1) = v77;
  uint64_t v78 = v101[7];
  uint64_t v79 = (void *)(a1 + v78);
  uint64_t v80 = (char *)a2 + v78;
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v77);
  if (v16(v80, 1LL, v14))
  {
    uint64_t v81 = sub_100183098(&qword_1006457E8);
    memcpy(v79, v80, *(void *)(*(void *)(v81 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v79, v80, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v79, 0LL, 1LL, v14);
  }

  uint64_t v82 = v101[8];
  uint64_t v83 = (void *)(a1 + v82);
  uint64_t v84 = (char *)a2 + v82;
  if (v16((char *)a2 + v82, 1LL, v14))
  {
    uint64_t v85 = sub_100183098(&qword_1006457E8);
    memcpy(v83, v84, *(void *)(*(void *)(v85 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v83, v84, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v83, 0LL, 1LL, v14);
  }

  uint64_t v86 = v101[9];
  uint64_t v87 = (uint64_t *)(a1 + v86);
  uint64_t v88 = (uint64_t *)((char *)a2 + v86);
  uint64_t v89 = *v88;
  unint64_t v90 = v88[1];
  sub_10019BA8C(*v88, v90);
  uint64_t *v87 = v89;
  v87[1] = v90;
  uint64_t v91 = v101[10];
  uint64_t v92 = a1 + v91;
  uint64_t v93 = (uint64_t *)((char *)a2 + v91);
  unint64_t v94 = v93[1];
  if (v94 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v92 = *(_OWORD *)v93;
  }

  else
  {
    uint64_t v95 = *v93;
    sub_10019BA8C(*v93, v93[1]);
    *(void *)uint64_t v92 = v95;
    *(void *)(v92 + _Block_object_dispose(va, 8) = v94;
  }

  uint64_t v96 = v101[11];
  uint64_t v97 = v101[12];
  uint64_t v98 = *(void **)((char *)a2 + v96);
  *(void *)(a1 + v96) = v98;
  *(_BYTE *)(a1 + v97) = *((_BYTE *)a2 + v97);
  id v99 = v98;
  return a1;
}

char *sub_1001E1968(char *a1, void *a2, int *a3)
{
  uint64_t v7 = a2 + 1;
  uint64_t v6 = *a2;
  uint64_t v8 = *(void *)a1;
  *(void *)a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v8);
  sub_10019DB24((void *)a1 + 1, v7);
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14(v11, 1LL, v12);
  uint64_t v137 = a3;
  uint64_t v138 = a2;
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    uint64_t v17 = sub_100183098(&qword_1006457E8);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  uint64_t v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v19 = v18[5];
  uint64_t v20 = &v10[v19];
  uint64_t v21 = &v11[v19];
  int v22 = v14(&v10[v19], 1LL, v12);
  int v23 = v14(v21, 1LL, v12);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v20, v21, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v20, 0LL, 1LL, v12);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
LABEL_12:
    uint64_t v24 = sub_100183098(&qword_1006457E8);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v20, v21, v12);
LABEL_13:
  uint64_t v25 = v18[6];
  uint64_t v26 = &v10[v25];
  uint64_t v27 = &v11[v25];
  int v28 = v14(&v10[v25], 1LL, v12);
  int v29 = v14(v27, 1LL, v12);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v26, v27, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v26, 0LL, 1LL, v12);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v26, v12);
LABEL_18:
    uint64_t v30 = sub_100183098(&qword_1006457E8);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v26, v27, v12);
LABEL_19:
  uint64_t v31 = v18[7];
  uint64_t v32 = &v10[v31];
  Swift::Int v33 = &v11[v31];
  int v34 = v14(&v10[v31], 1LL, v12);
  int v35 = v14(v33, 1LL, v12);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v32, v33, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v32, 0LL, 1LL, v12);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v32, v12);
LABEL_24:
    uint64_t v36 = sub_100183098(&qword_1006457E8);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v32, v33, v12);
LABEL_25:
  uint64_t v37 = v18[8];
  uint64_t v38 = &v10[v37];
  uint64_t v39 = &v11[v37];
  int v40 = v14(&v10[v37], 1LL, v12);
  int v41 = v14(v39, 1LL, v12);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v38, v39, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v38, 0LL, 1LL, v12);
      goto LABEL_31;
    }

    goto LABEL_30;
  }

  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v38, v12);
LABEL_30:
    uint64_t v42 = sub_100183098(&qword_1006457E8);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64LL));
    goto LABEL_31;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v38, v39, v12);
LABEL_31:
  uint64_t v43 = v18[9];
  uint64_t v44 = &v10[v43];
  uint64_t v45 = &v11[v43];
  int v46 = v14(&v10[v43], 1LL, v12);
  int v47 = v14(v45, 1LL, v12);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v44, v45, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v44, 0LL, 1LL, v12);
      goto LABEL_37;
    }

    goto LABEL_36;
  }

  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v44, v12);
LABEL_36:
    uint64_t v48 = sub_100183098(&qword_1006457E8);
    memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64LL));
    goto LABEL_37;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v44, v45, v12);
LABEL_37:
  uint64_t v49 = v18[10];
  uint64_t v50 = &v10[v49];
  uint64_t v51 = &v11[v49];
  int v52 = v14(&v10[v49], 1LL, v12);
  int v53 = v14(v51, 1LL, v12);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v50, v51, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v50, 0LL, 1LL, v12);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v50, v12);
LABEL_42:
    uint64_t v54 = sub_100183098(&qword_1006457E8);
    memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64LL));
    goto LABEL_43;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v50, v51, v12);
LABEL_43:
  uint64_t v55 = v18[11];
  uint64_t v56 = &v10[v55];
  uint64_t v57 = &v11[v55];
  int v58 = v14(&v10[v55], 1LL, v12);
  int v59 = v14(v57, 1LL, v12);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v56, v57, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v56, 0LL, 1LL, v12);
      goto LABEL_49;
    }

    goto LABEL_48;
  }

  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v56, v12);
LABEL_48:
    uint64_t v60 = sub_100183098(&qword_1006457E8);
    memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64LL));
    goto LABEL_49;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v56, v57, v12);
LABEL_49:
  uint64_t v61 = v18[12];
  uint64_t v62 = &v10[v61];
  uint64_t v63 = &v11[v61];
  int v64 = v14(&v10[v61], 1LL, v12);
  int v65 = v14(v63, 1LL, v12);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v62, v63, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v62, 0LL, 1LL, v12);
      goto LABEL_55;
    }

    goto LABEL_54;
  }

  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v62, v12);
LABEL_54:
    uint64_t v66 = sub_100183098(&qword_1006457E8);
    memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64LL));
    goto LABEL_55;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v62, v63, v12);
LABEL_55:
  v10[v18[13]] = v11[v18[13]];
  uint64_t v67 = v18[14];
  uint64_t v68 = &v10[v67];
  uint64_t v69 = &v11[v67];
  int v70 = v14(&v10[v67], 1LL, v12);
  int v71 = v14(v69, 1LL, v12);
  if (v70)
  {
    if (!v71)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v68, v69, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v68, 0LL, 1LL, v12);
      goto LABEL_61;
    }

    goto LABEL_60;
  }

  if (v71)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v68, v12);
LABEL_60:
    uint64_t v72 = sub_100183098(&qword_1006457E8);
    memcpy(v68, v69, *(void *)(*(void *)(v72 - 8) + 64LL));
    goto LABEL_61;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v68, v69, v12);
LABEL_61:
  uint64_t v73 = v18[15];
  uint64_t v74 = &v10[v73];
  uint64_t v75 = &v11[v73];
  int v76 = v14(&v10[v73], 1LL, v12);
  int v77 = v14(v75, 1LL, v12);
  if (v76)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v74, v75, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v74, 0LL, 1LL, v12);
      goto LABEL_67;
    }

    goto LABEL_66;
  }

  if (v77)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v74, v12);
LABEL_66:
    uint64_t v78 = sub_100183098(&qword_1006457E8);
    memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64LL));
    goto LABEL_67;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v74, v75, v12);
LABEL_67:
  uint64_t v79 = v18[16];
  uint64_t v80 = &v10[v79];
  uint64_t v81 = &v11[v79];
  int v82 = v14(&v10[v79], 1LL, v12);
  int v83 = v14(v81, 1LL, v12);
  if (v82)
  {
    if (!v83)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v80, v81, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v80, 0LL, 1LL, v12);
      goto LABEL_73;
    }

    goto LABEL_72;
  }

  if (v83)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v80, v12);
LABEL_72:
    uint64_t v84 = sub_100183098(&qword_1006457E8);
    memcpy(v80, v81, *(void *)(*(void *)(v84 - 8) + 64LL));
    goto LABEL_73;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v80, v81, v12);
LABEL_73:
  uint64_t v85 = v18[17];
  uint64_t v86 = &v10[v85];
  uint64_t v87 = &v11[v85];
  int v88 = v14(&v10[v85], 1LL, v12);
  int v89 = v14(v87, 1LL, v12);
  if (v88)
  {
    if (!v89)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v86, v87, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v86, 0LL, 1LL, v12);
      goto LABEL_79;
    }

    goto LABEL_78;
  }

  if (v89)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v86, v12);
LABEL_78:
    uint64_t v90 = sub_100183098(&qword_1006457E8);
    memcpy(v86, v87, *(void *)(*(void *)(v90 - 8) + 64LL));
    goto LABEL_79;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v86, v87, v12);
LABEL_79:
  uint64_t v91 = v18[18];
  uint64_t v92 = &v10[v91];
  uint64_t v93 = &v11[v91];
  int v94 = *(_DWORD *)v93;
  v92[4] = v93[4];
  *(_DWORD *)uint64_t v92 = v94;
  v10[v18[19]] = v11[v18[19]];
  uint64_t v95 = v18[20];
  uint64_t v96 = &v10[v95];
  uint64_t v97 = &v11[v95];
  *(void *)uint64_t v96 = *(void *)v97;
  uint64_t v98 = *((void *)v97 + 1);
  uint64_t v99 = *((void *)v96 + 1);
  *((void *)v96 + 1) = v98;
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRelease(v99);
  uint64_t v100 = v18[21];
  uint64_t v101 = &v10[v100];
  uint64_t v102 = &v11[v100];
  *(void *)uint64_t v101 = *(void *)v102;
  uint64_t v103 = *((void *)v102 + 1);
  uint64_t v104 = *((void *)v101 + 1);
  *((void *)v101 + 1) = v103;
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRelease(v104);
  uint64_t v105 = v137[7];
  __n128 v106 = &a1[v105];
  uint64_t v107 = (char *)v138 + v105;
  int v108 = v14(&a1[v105], 1LL, v12);
  int v109 = v14(v107, 1LL, v12);
  if (v108)
  {
    if (!v109)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v106, v107, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v106, 0LL, 1LL, v12);
      goto LABEL_85;
    }

    goto LABEL_84;
  }

  if (v109)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v106, v12);
LABEL_84:
    uint64_t v110 = sub_100183098(&qword_1006457E8);
    memcpy(v106, v107, *(void *)(*(void *)(v110 - 8) + 64LL));
    goto LABEL_85;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v106, v107, v12);
LABEL_85:
  uint64_t v111 = v137[8];
  id v112 = &a1[v111];
  uint64_t v113 = (char *)v138 + v111;
  int v114 = v14(&a1[v111], 1LL, v12);
  int v115 = v14(v113, 1LL, v12);
  if (v114)
  {
    if (!v115)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v112, v113, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v112, 0LL, 1LL, v12);
      goto LABEL_91;
    }

    goto LABEL_90;
  }

  if (v115)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v112, v12);
LABEL_90:
    uint64_t v116 = sub_100183098(&qword_1006457E8);
    memcpy(v112, v113, *(void *)(*(void *)(v116 - 8) + 64LL));
    goto LABEL_91;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v112, v113, v12);
LABEL_91:
  uint64_t v117 = v137[9];
  uint64_t v118 = (uint64_t *)&a1[v117];
  uint64_t v119 = (void *)((char *)v138 + v117);
  uint64_t v120 = *v119;
  unint64_t v121 = v119[1];
  sub_10019BA8C(*v119, v121);
  uint64_t v122 = *v118;
  unint64_t v123 = v118[1];
  *uint64_t v118 = v120;
  v118[1] = v121;
  sub_100189B20(v122, v123);
  uint64_t v124 = v137[10];
  uint64_t v125 = (uint64_t *)&a1[v124];
  uint64_t v126 = (void *)((char *)v138 + v124);
  unint64_t v127 = *(void *)((char *)v138 + v124 + 8);
  if (*(void *)&a1[v124 + 8] >> 60 != 15LL)
  {
    if (v127 >> 60 != 15)
    {
      uint64_t v129 = *v126;
      sub_10019BA8C(*v126, v127);
      uint64_t v130 = *v125;
      unint64_t v131 = v125[1];
      uint64_t *v125 = v129;
      v125[1] = v127;
      sub_100189B20(v130, v131);
      goto LABEL_98;
    }

    sub_10019DC8C((uint64_t)v125);
    goto LABEL_96;
  }

  if (v127 >> 60 == 15)
  {
LABEL_96:
    *(_OWORD *)uint64_t v125 = *(_OWORD *)v126;
    goto LABEL_98;
  }

  uint64_t v128 = *v126;
  sub_10019BA8C(*v126, v127);
  uint64_t *v125 = v128;
  v125[1] = v127;
LABEL_98:
  uint64_t v132 = v137[11];
  uint64_t v133 = *(void **)&a1[v132];
  __n128 v134 = *(void **)((char *)v138 + v132);
  *(void *)&a1[v132] = v134;
  id v135 = v134;

  a1[v137[12]] = *((_BYTE *)v138 + v137[12]);
  return a1;
}

uint64_t sub_1001E25F0(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v76 = a3;
  if (v11(v8, 1LL, v9))
  {
    uint64_t v12 = sub_100183098(&qword_1006457E8);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  uint64_t v13 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v14 = v13[5];
  int v15 = &v7[v14];
  int v16 = &v8[v14];
  if (v11(&v8[v14], 1LL, v9))
  {
    uint64_t v17 = sub_100183098(&qword_1006457E8);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v16, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v15, 0LL, 1LL, v9);
  }

  uint64_t v18 = v13[6];
  uint64_t v19 = &v7[v18];
  uint64_t v20 = &v8[v18];
  if (v11(&v8[v18], 1LL, v9))
  {
    uint64_t v21 = sub_100183098(&qword_1006457E8);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v19, v20, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v19, 0LL, 1LL, v9);
  }

  uint64_t v22 = v13[7];
  int v23 = &v7[v22];
  uint64_t v24 = &v8[v22];
  if (v11(&v8[v22], 1LL, v9))
  {
    uint64_t v25 = sub_100183098(&qword_1006457E8);
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v23, v24, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v23, 0LL, 1LL, v9);
  }

  uint64_t v26 = v13[8];
  uint64_t v27 = &v7[v26];
  int v28 = &v8[v26];
  if (v11(&v8[v26], 1LL, v9))
  {
    uint64_t v29 = sub_100183098(&qword_1006457E8);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v27, v28, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v27, 0LL, 1LL, v9);
  }

  uint64_t v30 = v13[9];
  uint64_t v31 = &v7[v30];
  uint64_t v32 = &v8[v30];
  if (v11(&v8[v30], 1LL, v9))
  {
    uint64_t v33 = sub_100183098(&qword_1006457E8);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v31, v32, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v31, 0LL, 1LL, v9);
  }

  uint64_t v34 = v13[10];
  int v35 = &v7[v34];
  uint64_t v36 = &v8[v34];
  if (v11(&v8[v34], 1LL, v9))
  {
    uint64_t v37 = sub_100183098(&qword_1006457E8);
    memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v35, v36, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v35, 0LL, 1LL, v9);
  }

  uint64_t v38 = v13[11];
  uint64_t v39 = &v7[v38];
  int v40 = &v8[v38];
  if (v11(&v8[v38], 1LL, v9))
  {
    uint64_t v41 = sub_100183098(&qword_1006457E8);
    memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v39, v40, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v39, 0LL, 1LL, v9);
  }

  uint64_t v42 = v13[12];
  uint64_t v43 = &v7[v42];
  uint64_t v44 = &v8[v42];
  if (v11(&v8[v42], 1LL, v9))
  {
    uint64_t v45 = sub_100183098(&qword_1006457E8);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v43, v44, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v43, 0LL, 1LL, v9);
  }

  v7[v13[13]] = v8[v13[13]];
  uint64_t v46 = v13[14];
  int v47 = &v7[v46];
  uint64_t v48 = &v8[v46];
  if (v11(&v8[v46], 1LL, v9))
  {
    uint64_t v49 = sub_100183098(&qword_1006457E8);
    memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v47, v48, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v47, 0LL, 1LL, v9);
  }

  uint64_t v50 = v13[15];
  uint64_t v51 = &v7[v50];
  int v52 = &v8[v50];
  if (v11(&v8[v50], 1LL, v9))
  {
    uint64_t v53 = sub_100183098(&qword_1006457E8);
    memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v51, v52, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v51, 0LL, 1LL, v9);
  }

  uint64_t v54 = v13[16];
  uint64_t v55 = &v7[v54];
  uint64_t v56 = &v8[v54];
  if (v11(&v8[v54], 1LL, v9))
  {
    uint64_t v57 = sub_100183098(&qword_1006457E8);
    memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v55, v56, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v55, 0LL, 1LL, v9);
  }

  uint64_t v58 = v13[17];
  int v59 = &v7[v58];
  uint64_t v60 = &v8[v58];
  if (v11(&v8[v58], 1LL, v9))
  {
    uint64_t v61 = sub_100183098(&qword_1006457E8);
    memcpy(v59, v60, *(void *)(*(void *)(v61 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v59, v60, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v59, 0LL, 1LL, v9);
  }

  uint64_t v62 = v13[18];
  uint64_t v63 = &v7[v62];
  int v64 = &v8[v62];
  *(_DWORD *)uint64_t v63 = *(_DWORD *)v64;
  v63[4] = v64[4];
  v7[v13[19]] = v8[v13[19]];
  *(_OWORD *)&v7[v13[20]] = *(_OWORD *)&v8[v13[20]];
  *(_OWORD *)&v7[v13[21]] = *(_OWORD *)&v8[v13[21]];
  uint64_t v65 = v76[7];
  uint64_t v66 = (void *)(a1 + v65);
  uint64_t v67 = (const void *)(a2 + v65);
  if (v11((char *)(a2 + v65), 1LL, v9))
  {
    uint64_t v68 = sub_100183098(&qword_1006457E8);
    memcpy(v66, v67, *(void *)(*(void *)(v68 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v66, v67, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v66, 0LL, 1LL, v9);
  }

  uint64_t v69 = v76[8];
  int v70 = (void *)(a1 + v69);
  int v71 = (const void *)(a2 + v69);
  if (v11((char *)(a2 + v69), 1LL, v9))
  {
    uint64_t v72 = sub_100183098(&qword_1006457E8);
    memcpy(v70, v71, *(void *)(*(void *)(v72 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v70, v71, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v70, 0LL, 1LL, v9);
  }

  uint64_t v73 = v76[10];
  *(_OWORD *)(a1 + v76[9]) = *(_OWORD *)(a2 + v76[9]);
  *(_OWORD *)(a1 + v73) = *(_OWORD *)(a2 + v73);
  uint64_t v74 = v76[12];
  *(void *)(a1 + v76[11]) = *(void *)(a2 + v76[11]);
  *(_BYTE *)(a1 + v74) = *(_BYTE *)(a2 + v74);
  return a1;
}

uint64_t *sub_1001E2D8C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  sub_10018709C(a1 + 1);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  a1[5] = a2[5];
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  uint64_t v128 = a3;
  uint64_t v129 = a2;
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100183098(&qword_1006457E8);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  int v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v17 = v16[5];
  uint64_t v18 = &v8[v17];
  uint64_t v19 = &v9[v17];
  int v20 = v12(&v8[v17], 1LL, v10);
  int v21 = v12(v19, 1LL, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v19, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v18, 0LL, 1LL, v10);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_12:
    uint64_t v22 = sub_100183098(&qword_1006457E8);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v18, v19, v10);
LABEL_13:
  uint64_t v23 = v16[6];
  uint64_t v24 = &v8[v23];
  uint64_t v25 = &v9[v23];
  int v26 = v12(&v8[v23], 1LL, v10);
  int v27 = v12(v25, 1LL, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v24, v25, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v24, 0LL, 1LL, v10);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
LABEL_18:
    uint64_t v28 = sub_100183098(&qword_1006457E8);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v24, v25, v10);
LABEL_19:
  uint64_t v29 = v16[7];
  uint64_t v30 = &v8[v29];
  uint64_t v31 = &v9[v29];
  int v32 = v12(&v8[v29], 1LL, v10);
  int v33 = v12(v31, 1LL, v10);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v30, v31, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v30, 0LL, 1LL, v10);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
LABEL_24:
    uint64_t v34 = sub_100183098(&qword_1006457E8);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v30, v31, v10);
LABEL_25:
  uint64_t v35 = v16[8];
  uint64_t v36 = &v8[v35];
  uint64_t v37 = &v9[v35];
  int v38 = v12(&v8[v35], 1LL, v10);
  int v39 = v12(v37, 1LL, v10);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v36, v37, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v36, 0LL, 1LL, v10);
      goto LABEL_31;
    }

    goto LABEL_30;
  }

  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
LABEL_30:
    uint64_t v40 = sub_100183098(&qword_1006457E8);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64LL));
    goto LABEL_31;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v36, v37, v10);
LABEL_31:
  uint64_t v41 = v16[9];
  uint64_t v42 = &v8[v41];
  uint64_t v43 = &v9[v41];
  int v44 = v12(&v8[v41], 1LL, v10);
  int v45 = v12(v43, 1LL, v10);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v42, v43, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v42, 0LL, 1LL, v10);
      goto LABEL_37;
    }

    goto LABEL_36;
  }

  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
LABEL_36:
    uint64_t v46 = sub_100183098(&qword_1006457E8);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64LL));
    goto LABEL_37;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v42, v43, v10);
LABEL_37:
  uint64_t v47 = v16[10];
  uint64_t v48 = &v8[v47];
  uint64_t v49 = &v9[v47];
  int v50 = v12(&v8[v47], 1LL, v10);
  int v51 = v12(v49, 1LL, v10);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v48, v49, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v48, 0LL, 1LL, v10);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
LABEL_42:
    uint64_t v52 = sub_100183098(&qword_1006457E8);
    memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64LL));
    goto LABEL_43;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v48, v49, v10);
LABEL_43:
  uint64_t v53 = v16[11];
  uint64_t v54 = &v8[v53];
  uint64_t v55 = &v9[v53];
  int v56 = v12(&v8[v53], 1LL, v10);
  int v57 = v12(v55, 1LL, v10);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v54, v55, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v54, 0LL, 1LL, v10);
      goto LABEL_49;
    }

    goto LABEL_48;
  }

  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v10);
LABEL_48:
    uint64_t v58 = sub_100183098(&qword_1006457E8);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64LL));
    goto LABEL_49;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v54, v55, v10);
LABEL_49:
  uint64_t v59 = v16[12];
  uint64_t v60 = &v8[v59];
  uint64_t v61 = &v9[v59];
  int v62 = v12(&v8[v59], 1LL, v10);
  int v63 = v12(v61, 1LL, v10);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v60, v61, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v60, 0LL, 1LL, v10);
      goto LABEL_55;
    }

    goto LABEL_54;
  }

  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v60, v10);
LABEL_54:
    uint64_t v64 = sub_100183098(&qword_1006457E8);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64LL));
    goto LABEL_55;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v60, v61, v10);
LABEL_55:
  v8[v16[13]] = v9[v16[13]];
  uint64_t v65 = v16[14];
  uint64_t v66 = &v8[v65];
  uint64_t v67 = &v9[v65];
  int v68 = v12(&v8[v65], 1LL, v10);
  int v69 = v12(v67, 1LL, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v66, v67, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v66, 0LL, 1LL, v10);
      goto LABEL_61;
    }

    goto LABEL_60;
  }

  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v10);
LABEL_60:
    uint64_t v70 = sub_100183098(&qword_1006457E8);
    memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64LL));
    goto LABEL_61;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v66, v67, v10);
LABEL_61:
  uint64_t v71 = v16[15];
  uint64_t v72 = &v8[v71];
  uint64_t v73 = &v9[v71];
  int v74 = v12(&v8[v71], 1LL, v10);
  int v75 = v12(v73, 1LL, v10);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v72, v73, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v72, 0LL, 1LL, v10);
      goto LABEL_67;
    }

    goto LABEL_66;
  }

  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
LABEL_66:
    uint64_t v76 = sub_100183098(&qword_1006457E8);
    memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64LL));
    goto LABEL_67;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v72, v73, v10);
LABEL_67:
  uint64_t v77 = v16[16];
  uint64_t v78 = &v8[v77];
  uint64_t v79 = &v9[v77];
  int v80 = v12(&v8[v77], 1LL, v10);
  int v81 = v12(v79, 1LL, v10);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v78, v79, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v78, 0LL, 1LL, v10);
      goto LABEL_73;
    }

    goto LABEL_72;
  }

  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_72:
    uint64_t v82 = sub_100183098(&qword_1006457E8);
    memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64LL));
    goto LABEL_73;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v78, v79, v10);
LABEL_73:
  uint64_t v83 = v16[17];
  uint64_t v84 = &v8[v83];
  uint64_t v85 = &v9[v83];
  int v86 = v12(&v8[v83], 1LL, v10);
  int v87 = v12(v85, 1LL, v10);
  if (v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v84, v85, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v84, 0LL, 1LL, v10);
      goto LABEL_79;
    }

    goto LABEL_78;
  }

  if (v87)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v84, v10);
LABEL_78:
    uint64_t v88 = sub_100183098(&qword_1006457E8);
    memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64LL));
    goto LABEL_79;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v84, v85, v10);
LABEL_79:
  uint64_t v89 = v16[18];
  uint64_t v90 = &v8[v89];
  uint64_t v91 = &v9[v89];
  *(_DWORD *)uint64_t v90 = *(_DWORD *)v91;
  v90[4] = v91[4];
  v8[v16[19]] = v9[v16[19]];
  uint64_t v92 = v16[20];
  uint64_t v93 = &v8[v92];
  int v94 = &v9[v92];
  uint64_t v96 = *(void *)v94;
  uint64_t v95 = *((void *)v94 + 1);
  uint64_t v97 = *((void *)v93 + 1);
  *(void *)uint64_t v93 = v96;
  *((void *)v93 + 1) = v95;
  swift_bridgeObjectRelease(v97);
  uint64_t v98 = v16[21];
  uint64_t v99 = &v8[v98];
  uint64_t v100 = &v9[v98];
  uint64_t v102 = *(void *)v100;
  uint64_t v101 = *((void *)v100 + 1);
  uint64_t v103 = *((void *)v99 + 1);
  *(void *)uint64_t v99 = v102;
  *((void *)v99 + 1) = v101;
  swift_bridgeObjectRelease(v103);
  uint64_t v104 = v128[7];
  uint64_t v105 = (char *)a1 + v104;
  __n128 v106 = (char *)v129 + v104;
  int v107 = v12((char *)a1 + v104, 1LL, v10);
  int v108 = v12(v106, 1LL, v10);
  if (v107)
  {
    if (!v108)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v105, v106, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v105, 0LL, 1LL, v10);
      goto LABEL_85;
    }

    goto LABEL_84;
  }

  if (v108)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v105, v10);
LABEL_84:
    uint64_t v109 = sub_100183098(&qword_1006457E8);
    memcpy(v105, v106, *(void *)(*(void *)(v109 - 8) + 64LL));
    goto LABEL_85;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v105, v106, v10);
LABEL_85:
  uint64_t v110 = v128[8];
  uint64_t v111 = (char *)a1 + v110;
  id v112 = (char *)v129 + v110;
  int v113 = v12((char *)a1 + v110, 1LL, v10);
  int v114 = v12(v112, 1LL, v10);
  if (v113)
  {
    if (!v114)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v111, v112, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v111, 0LL, 1LL, v10);
      goto LABEL_91;
    }

    goto LABEL_90;
  }

  if (v114)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v111, v10);
LABEL_90:
    uint64_t v115 = sub_100183098(&qword_1006457E8);
    memcpy(v111, v112, *(void *)(*(void *)(v115 - 8) + 64LL));
    goto LABEL_91;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v111, v112, v10);
LABEL_91:
  uint64_t v116 = v128[9];
  uint64_t v117 = *(uint64_t *)((char *)a1 + v116);
  unint64_t v118 = *(uint64_t *)((char *)a1 + v116 + 8);
  *(_OWORD *)((char *)a1 + v1swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)((char *)v129 + v116);
  sub_100189B20(v117, v118);
  uint64_t v119 = v128[10];
  uint64_t v120 = (uint64_t *)((char *)a1 + v119);
  unint64_t v121 = (uint64_t *)((char *)v129 + v119);
  unint64_t v122 = *(uint64_t *)((char *)a1 + v119 + 8);
  if (v122 >> 60 != 15)
  {
    unint64_t v123 = v121[1];
    if (v123 >> 60 != 15)
    {
      uint64_t v124 = *v120;
      *uint64_t v120 = *v121;
      v120[1] = v123;
      sub_100189B20(v124, v122);
      goto LABEL_96;
    }

    sub_10019DC8C((uint64_t)v120);
  }

  *(_OWORD *)uint64_t v120 = *(_OWORD *)v121;
LABEL_96:
  uint64_t v125 = v128[11];
  uint64_t v126 = *(void **)((char *)a1 + v125);
  *(uint64_t *)((char *)a1 + v125) = *(uint64_t *)((char *)v129 + v125);

  *((_BYTE *)a1 + v128[12]) = *((_BYTE *)v129 + v128[12]);
  return a1;
}

uint64_t sub_1001E39B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001E39C0);
}

uint64_t sub_1001E39C0(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for SDAuthenticationSessionMetrics(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 24);
    }

    else
    {
      uint64_t v10 = sub_100183098(&qword_1006457E8);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 28);
    }

    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }

uint64_t sub_1001E3A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001E3A70);
}

char *sub_1001E3A70(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)id result = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for SDAuthenticationSessionMetrics(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 24);
    }

    else
    {
      uint64_t v10 = sub_100183098(&qword_1006457E8);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 28);
    }

    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }

  return result;
}

uint64_t _s10NanoWalletV18InitialLockContextVMa(uint64_t a1)
{
  return sub_1001A4AD0(a1, qword_100646F98, (uint64_t)&_s10NanoWalletV18InitialLockContextVMn);
}

void sub_1001E3B24(uint64_t a1)
{
  v6[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v6[1] = "(";
  uint64_t v2 = type metadata accessor for SDAuthenticationSessionMetrics(319LL);
  if (v3 <= 0x3F)
  {
    v6[2] = *(void *)(v2 - 8) + 64LL;
    sub_10019F1DC(319LL);
    if (v5 <= 0x3F)
    {
      uint64_t v7 = *(void *)(v4 - 8) + 64LL;
      uint64_t v8 = v7;
      uint64_t v9 = &unk_1004CE490;
      uint64_t v10 = &unk_1004CE4A8;
      uint64_t v11 = &unk_1004CE4C0;
      uint64_t v12 = &unk_1004CE4D8;
      swift_initStructMetadata(a1, 256LL, 9LL, v6, a1 + 16);
    }
  }

uint64_t sub_1001E3BE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001E3BF4);
}

uint64_t sub_1001E3BF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SDAuthenticationCommonOperationInput(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 24);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_1001E3C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001E3C80);
}

uint64_t sub_1001E3C80(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for SDAuthenticationCommonOperationInput(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  return result;
}

uint64_t _s10NanoWalletV4FlowVMa(uint64_t a1)
{
  return sub_1001A4AD0(a1, qword_100647048, (uint64_t)&_s10NanoWalletV4FlowVMn);
}

uint64_t sub_1001E3D10(uint64_t a1)
{
  uint64_t result = type metadata accessor for SDAuthenticationCommonOperationInput(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "(";
    void v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1001E3D90(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16LL) & ~(unint64_t)v4);
    swift_retain(v5);
  }

  else
  {
    uint64_t v8 = a2 + 1;
    __int128 v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    uint64_t v10 = v9;
    uint64_t v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_bridgeObjectRetain(v5);
    v11(a1 + 8, v8, v10);
    uint64_t v12 = *(int *)(a3 + 24);
    int v13 = (char *)(a1 + v12);
    int v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for Date(0LL);
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    uint64_t v90 = a3;
    if (v17(v14, 1LL, v15))
    {
      uint64_t v18 = sub_100183098(&qword_1006457E8);
      memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
    }

    uint64_t v19 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
    uint64_t v20 = v19[5];
    int v21 = &v13[v20];
    uint64_t v22 = &v14[v20];
    if (v17(&v14[v20], 1LL, v15))
    {
      uint64_t v23 = sub_100183098(&qword_1006457E8);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v22, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v21, 0LL, 1LL, v15);
    }

    uint64_t v24 = v19[6];
    uint64_t v25 = &v13[v24];
    int v26 = &v14[v24];
    if (v17(&v14[v24], 1LL, v15))
    {
      uint64_t v27 = sub_100183098(&qword_1006457E8);
      memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v25, v26, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v25, 0LL, 1LL, v15);
    }

    uint64_t v28 = v19[7];
    uint64_t v29 = &v13[v28];
    uint64_t v30 = &v14[v28];
    if (v17(&v14[v28], 1LL, v15))
    {
      uint64_t v31 = sub_100183098(&qword_1006457E8);
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v29, v30, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v29, 0LL, 1LL, v15);
    }

    uint64_t v32 = v19[8];
    int v33 = &v13[v32];
    uint64_t v34 = &v14[v32];
    if (v17(&v14[v32], 1LL, v15))
    {
      uint64_t v35 = sub_100183098(&qword_1006457E8);
      memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v33, v34, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v33, 0LL, 1LL, v15);
    }

    uint64_t v36 = v19[9];
    uint64_t v37 = &v13[v36];
    int v38 = &v14[v36];
    if (v17(&v14[v36], 1LL, v15))
    {
      uint64_t v39 = sub_100183098(&qword_1006457E8);
      memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v37, v38, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v37, 0LL, 1LL, v15);
    }

    uint64_t v40 = v19[10];
    uint64_t v41 = &v13[v40];
    uint64_t v42 = &v14[v40];
    if (v17(&v14[v40], 1LL, v15))
    {
      uint64_t v43 = sub_100183098(&qword_1006457E8);
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v41, v42, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v41, 0LL, 1LL, v15);
    }

    uint64_t v44 = v19[11];
    int v45 = &v13[v44];
    uint64_t v46 = &v14[v44];
    if (v17(&v14[v44], 1LL, v15))
    {
      uint64_t v47 = sub_100183098(&qword_1006457E8);
      memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v45, v46, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v45, 0LL, 1LL, v15);
    }

    uint64_t v48 = v19[12];
    uint64_t v49 = &v13[v48];
    int v50 = &v14[v48];
    if (v17(&v14[v48], 1LL, v15))
    {
      uint64_t v51 = sub_100183098(&qword_1006457E8);
      memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v49, v50, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v49, 0LL, 1LL, v15);
    }

    v13[v19[13]] = v14[v19[13]];
    uint64_t v52 = v19[14];
    uint64_t v53 = &v13[v52];
    uint64_t v54 = &v14[v52];
    if (v17(&v14[v52], 1LL, v15))
    {
      uint64_t v55 = sub_100183098(&qword_1006457E8);
      memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v53, v54, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v53, 0LL, 1LL, v15);
    }

    uint64_t v56 = v19[15];
    int v57 = &v13[v56];
    uint64_t v58 = &v14[v56];
    if (v17(&v14[v56], 1LL, v15))
    {
      uint64_t v59 = sub_100183098(&qword_1006457E8);
      memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v57, v58, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v57, 0LL, 1LL, v15);
    }

    uint64_t v60 = v19[16];
    uint64_t v61 = &v13[v60];
    int v62 = &v14[v60];
    if (v17(&v14[v60], 1LL, v15))
    {
      uint64_t v63 = sub_100183098(&qword_1006457E8);
      memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v61, v62, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v61, 0LL, 1LL, v15);
    }

    uint64_t v64 = v19[17];
    uint64_t v65 = &v13[v64];
    uint64_t v66 = &v14[v64];
    if (v17(&v14[v64], 1LL, v15))
    {
      uint64_t v67 = sub_100183098(&qword_1006457E8);
      memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v65, v66, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v65, 0LL, 1LL, v15);
    }

    uint64_t v68 = v19[18];
    int v69 = &v13[v68];
    uint64_t v70 = &v14[v68];
    *(_DWORD *)int v69 = *(_DWORD *)v70;
    v69[4] = v70[4];
    v13[v19[19]] = v14[v19[19]];
    uint64_t v71 = v19[20];
    uint64_t v72 = &v13[v71];
    uint64_t v73 = &v14[v71];
    uint64_t v74 = *((void *)v73 + 1);
    *(void *)uint64_t v72 = *(void *)v73;
    *((void *)v72 + 1) = v74;
    uint64_t v75 = v19[21];
    uint64_t v76 = &v13[v75];
    uint64_t v77 = &v14[v75];
    uint64_t v78 = *((void *)v77 + 1);
    *(void *)uint64_t v76 = *(void *)v77;
    *((void *)v76 + 1) = v78;
    uint64_t v79 = *(int *)(v90 + 28);
    int v80 = (uint64_t *)(a1 + v79);
    int v81 = (uint64_t *)((char *)a2 + v79);
    uint64_t v82 = *v81;
    unint64_t v83 = v81[1];
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v78);
    sub_10019BA8C(v82, v83);
    *int v80 = v82;
    v80[1] = v83;
    uint64_t v84 = *(int *)(v90 + 32);
    uint64_t v85 = a1 + v84;
    int v86 = (uint64_t *)((char *)a2 + v84);
    unint64_t v87 = v86[1];
    if (v87 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v85 = *(_OWORD *)v86;
    }

    else
    {
      uint64_t v88 = *v86;
      sub_10019BA8C(*v86, v86[1]);
      *(void *)uint64_t v85 = v88;
      *(void *)(v85 + _Block_object_dispose(va, 8) = v87;
    }
  }

  return a1;
}

uint64_t sub_1001E44D8(void *a1, int *a2)
{
  int v4 = a1 + 1;
  swift_bridgeObjectRelease(*a1);
  sub_10018709C(v4);
  uint64_t v5 = (char *)a1 + a2[6];
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  }
  __int128 v9 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v10 = &v5[v9[5]];
  if (!v8(v10, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  uint64_t v11 = &v5[v9[6]];
  if (!v8(v11, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  }
  uint64_t v12 = &v5[v9[7]];
  if (!v8(v12, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  }
  int v13 = &v5[v9[8]];
  if (!v8(v13, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  }
  int v14 = &v5[v9[9]];
  if (!v8(v14, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  }
  uint64_t v15 = &v5[v9[10]];
  if (!v8(v15, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
  }
  uint64_t v16 = &v5[v9[11]];
  if (!v8(v16, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
  }
  uint64_t v17 = &v5[v9[12]];
  if (!v8(v17, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
  }
  uint64_t v18 = &v5[v9[14]];
  if (!v8(v18, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
  }
  uint64_t v19 = &v5[v9[15]];
  if (!v8(v19, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
  }
  uint64_t v20 = &v5[v9[16]];
  if (!v8(v20, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
  }
  int v21 = &v5[v9[17]];
  if (!v8(v21, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v21, v6);
  }
  swift_bridgeObjectRelease(*(void *)&v5[v9[20] + 8]);
  swift_bridgeObjectRelease(*(void *)&v5[v9[21] + 8]);
  uint64_t result = sub_100189B20(*(void *)((char *)a1 + a2[7]), *(void *)((char *)a1 + a2[7] + 8));
  uint64_t v23 = (void *)((char *)a1 + a2[8]);
  unint64_t v24 = v23[1];
  if (v24 >> 60 != 15) {
    return sub_100189B20(*v23, v24);
  }
  return result;
}

uint64_t sub_1001E47E4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(void *)a1 = *a2;
  uint64_t v7 = a2 + 1;
  __int128 v8 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v8;
  uint64_t v9 = v8;
  uint64_t v10 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v8 - 8);
  swift_bridgeObjectRetain(v6);
  v10(a1 + 8, v7, v9);
  uint64_t v89 = a3;
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)(a1 + v11);
  int v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v16(v13, 1LL, v14))
  {
    uint64_t v17 = sub_100183098(&qword_1006457E8);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v19 = v18[5];
  uint64_t v20 = &v12[v19];
  int v21 = &v13[v19];
  if (v16(&v13[v19], 1LL, v14))
  {
    uint64_t v22 = sub_100183098(&qword_1006457E8);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v20, v21, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v20, 0LL, 1LL, v14);
  }

  uint64_t v23 = v18[6];
  unint64_t v24 = &v12[v23];
  uint64_t v25 = &v13[v23];
  if (v16(&v13[v23], 1LL, v14))
  {
    uint64_t v26 = sub_100183098(&qword_1006457E8);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v24, v25, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v24, 0LL, 1LL, v14);
  }

  uint64_t v27 = v18[7];
  uint64_t v28 = &v12[v27];
  uint64_t v29 = &v13[v27];
  if (v16(&v13[v27], 1LL, v14))
  {
    uint64_t v30 = sub_100183098(&qword_1006457E8);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v28, v29, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v28, 0LL, 1LL, v14);
  }

  uint64_t v31 = v18[8];
  uint64_t v32 = &v12[v31];
  int v33 = &v13[v31];
  if (v16(&v13[v31], 1LL, v14))
  {
    uint64_t v34 = sub_100183098(&qword_1006457E8);
    memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v32, v33, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v32, 0LL, 1LL, v14);
  }

  uint64_t v35 = v18[9];
  uint64_t v36 = &v12[v35];
  uint64_t v37 = &v13[v35];
  if (v16(&v13[v35], 1LL, v14))
  {
    uint64_t v38 = sub_100183098(&qword_1006457E8);
    memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v36, v37, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v36, 0LL, 1LL, v14);
  }

  uint64_t v39 = v18[10];
  uint64_t v40 = &v12[v39];
  uint64_t v41 = &v13[v39];
  if (v16(&v13[v39], 1LL, v14))
  {
    uint64_t v42 = sub_100183098(&qword_1006457E8);
    memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v40, v41, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v40, 0LL, 1LL, v14);
  }

  uint64_t v43 = v18[11];
  uint64_t v44 = &v12[v43];
  int v45 = &v13[v43];
  if (v16(&v13[v43], 1LL, v14))
  {
    uint64_t v46 = sub_100183098(&qword_1006457E8);
    memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v44, v45, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v44, 0LL, 1LL, v14);
  }

  uint64_t v47 = v18[12];
  uint64_t v48 = &v12[v47];
  uint64_t v49 = &v13[v47];
  if (v16(&v13[v47], 1LL, v14))
  {
    uint64_t v50 = sub_100183098(&qword_1006457E8);
    memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v48, v49, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v48, 0LL, 1LL, v14);
  }

  v12[v18[13]] = v13[v18[13]];
  uint64_t v51 = v18[14];
  uint64_t v52 = &v12[v51];
  uint64_t v53 = &v13[v51];
  if (v16(&v13[v51], 1LL, v14))
  {
    uint64_t v54 = sub_100183098(&qword_1006457E8);
    memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v52, v53, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v52, 0LL, 1LL, v14);
  }

  uint64_t v55 = v18[15];
  uint64_t v56 = &v12[v55];
  int v57 = &v13[v55];
  if (v16(&v13[v55], 1LL, v14))
  {
    uint64_t v58 = sub_100183098(&qword_1006457E8);
    memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v56, v57, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v56, 0LL, 1LL, v14);
  }

  uint64_t v59 = v18[16];
  uint64_t v60 = &v12[v59];
  uint64_t v61 = &v13[v59];
  if (v16(&v13[v59], 1LL, v14))
  {
    uint64_t v62 = sub_100183098(&qword_1006457E8);
    memcpy(v60, v61, *(void *)(*(void *)(v62 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v60, v61, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v60, 0LL, 1LL, v14);
  }

  uint64_t v63 = v18[17];
  uint64_t v64 = &v12[v63];
  uint64_t v65 = &v13[v63];
  if (v16(&v13[v63], 1LL, v14))
  {
    uint64_t v66 = sub_100183098(&qword_1006457E8);
    memcpy(v64, v65, *(void *)(*(void *)(v66 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v64, v65, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v64, 0LL, 1LL, v14);
  }

  uint64_t v67 = v18[18];
  uint64_t v68 = &v12[v67];
  int v69 = &v13[v67];
  *(_DWORD *)uint64_t v68 = *(_DWORD *)v69;
  v68[4] = v69[4];
  v12[v18[19]] = v13[v18[19]];
  uint64_t v70 = v18[20];
  uint64_t v71 = &v12[v70];
  uint64_t v72 = &v13[v70];
  uint64_t v73 = *((void *)v72 + 1);
  *(void *)uint64_t v71 = *(void *)v72;
  *((void *)v71 + 1) = v73;
  uint64_t v74 = v18[21];
  uint64_t v75 = &v12[v74];
  uint64_t v76 = &v13[v74];
  uint64_t v77 = *((void *)v76 + 1);
  *(void *)uint64_t v75 = *(void *)v76;
  *((void *)v75 + 1) = v77;
  uint64_t v78 = *(int *)(v89 + 28);
  uint64_t v79 = (uint64_t *)(a1 + v78);
  int v80 = (uint64_t *)((char *)a2 + v78);
  uint64_t v81 = *v80;
  unint64_t v82 = v80[1];
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v77);
  sub_10019BA8C(v81, v82);
  *uint64_t v79 = v81;
  v79[1] = v82;
  uint64_t v83 = *(int *)(v89 + 32);
  uint64_t v84 = a1 + v83;
  uint64_t v85 = (uint64_t *)((char *)a2 + v83);
  unint64_t v86 = v85[1];
  if (v86 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v84 = *(_OWORD *)v85;
  }

  else
  {
    uint64_t v87 = *v85;
    sub_10019BA8C(*v85, v85[1]);
    *(void *)uint64_t v84 = v87;
    *(void *)(v84 + _Block_object_dispose(va, 8) = v86;
  }

  return a1;
}

uint64_t *sub_1001E4F08(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v7 = a2 + 1;
  uint64_t v6 = *a2;
  uint64_t v8 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v8);
  sub_10019DB24(a1 + 1, v7);
  uint64_t v121 = a3;
  unint64_t v122 = a2;
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14(v11, 1LL, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    uint64_t v17 = sub_100183098(&qword_1006457E8);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  uint64_t v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v19 = v18[5];
  uint64_t v20 = &v10[v19];
  int v21 = &v11[v19];
  int v22 = v14(&v10[v19], 1LL, v12);
  int v23 = v14(v21, 1LL, v12);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v20, v21, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v20, 0LL, 1LL, v12);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
LABEL_12:
    uint64_t v24 = sub_100183098(&qword_1006457E8);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v20, v21, v12);
LABEL_13:
  uint64_t v25 = v18[6];
  uint64_t v26 = &v10[v25];
  uint64_t v27 = &v11[v25];
  int v28 = v14(&v10[v25], 1LL, v12);
  int v29 = v14(v27, 1LL, v12);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v26, v27, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v26, 0LL, 1LL, v12);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v26, v12);
LABEL_18:
    uint64_t v30 = sub_100183098(&qword_1006457E8);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v26, v27, v12);
LABEL_19:
  uint64_t v31 = v18[7];
  uint64_t v32 = &v10[v31];
  int v33 = &v11[v31];
  int v34 = v14(&v10[v31], 1LL, v12);
  int v35 = v14(v33, 1LL, v12);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v32, v33, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v32, 0LL, 1LL, v12);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v32, v12);
LABEL_24:
    uint64_t v36 = sub_100183098(&qword_1006457E8);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v32, v33, v12);
LABEL_25:
  uint64_t v37 = v18[8];
  uint64_t v38 = &v10[v37];
  uint64_t v39 = &v11[v37];
  int v40 = v14(&v10[v37], 1LL, v12);
  int v41 = v14(v39, 1LL, v12);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v38, v39, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v38, 0LL, 1LL, v12);
      goto LABEL_31;
    }

    goto LABEL_30;
  }

  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v38, v12);
LABEL_30:
    uint64_t v42 = sub_100183098(&qword_1006457E8);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64LL));
    goto LABEL_31;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v38, v39, v12);
LABEL_31:
  uint64_t v43 = v18[9];
  uint64_t v44 = &v10[v43];
  int v45 = &v11[v43];
  int v46 = v14(&v10[v43], 1LL, v12);
  int v47 = v14(v45, 1LL, v12);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v44, v45, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v44, 0LL, 1LL, v12);
      goto LABEL_37;
    }

    goto LABEL_36;
  }

  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v44, v12);
LABEL_36:
    uint64_t v48 = sub_100183098(&qword_1006457E8);
    memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64LL));
    goto LABEL_37;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v44, v45, v12);
LABEL_37:
  uint64_t v49 = v18[10];
  uint64_t v50 = &v10[v49];
  uint64_t v51 = &v11[v49];
  int v52 = v14(&v10[v49], 1LL, v12);
  int v53 = v14(v51, 1LL, v12);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v50, v51, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v50, 0LL, 1LL, v12);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v50, v12);
LABEL_42:
    uint64_t v54 = sub_100183098(&qword_1006457E8);
    memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64LL));
    goto LABEL_43;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v50, v51, v12);
LABEL_43:
  uint64_t v55 = v18[11];
  uint64_t v56 = &v10[v55];
  int v57 = &v11[v55];
  int v58 = v14(&v10[v55], 1LL, v12);
  int v59 = v14(v57, 1LL, v12);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v56, v57, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v56, 0LL, 1LL, v12);
      goto LABEL_49;
    }

    goto LABEL_48;
  }

  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v56, v12);
LABEL_48:
    uint64_t v60 = sub_100183098(&qword_1006457E8);
    memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64LL));
    goto LABEL_49;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v56, v57, v12);
LABEL_49:
  uint64_t v61 = v18[12];
  uint64_t v62 = &v10[v61];
  uint64_t v63 = &v11[v61];
  int v64 = v14(&v10[v61], 1LL, v12);
  int v65 = v14(v63, 1LL, v12);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v62, v63, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v62, 0LL, 1LL, v12);
      goto LABEL_55;
    }

    goto LABEL_54;
  }

  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v62, v12);
LABEL_54:
    uint64_t v66 = sub_100183098(&qword_1006457E8);
    memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64LL));
    goto LABEL_55;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v62, v63, v12);
LABEL_55:
  v10[v18[13]] = v11[v18[13]];
  uint64_t v67 = v18[14];
  uint64_t v68 = &v10[v67];
  int v69 = &v11[v67];
  int v70 = v14(&v10[v67], 1LL, v12);
  int v71 = v14(v69, 1LL, v12);
  if (v70)
  {
    if (!v71)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v68, v69, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v68, 0LL, 1LL, v12);
      goto LABEL_61;
    }

    goto LABEL_60;
  }

  if (v71)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v68, v12);
LABEL_60:
    uint64_t v72 = sub_100183098(&qword_1006457E8);
    memcpy(v68, v69, *(void *)(*(void *)(v72 - 8) + 64LL));
    goto LABEL_61;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v68, v69, v12);
LABEL_61:
  uint64_t v73 = v18[15];
  uint64_t v74 = &v10[v73];
  uint64_t v75 = &v11[v73];
  int v76 = v14(&v10[v73], 1LL, v12);
  int v77 = v14(v75, 1LL, v12);
  if (v76)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v74, v75, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v74, 0LL, 1LL, v12);
      goto LABEL_67;
    }

    goto LABEL_66;
  }

  if (v77)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v74, v12);
LABEL_66:
    uint64_t v78 = sub_100183098(&qword_1006457E8);
    memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64LL));
    goto LABEL_67;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v74, v75, v12);
LABEL_67:
  uint64_t v79 = v18[16];
  int v80 = &v10[v79];
  uint64_t v81 = &v11[v79];
  int v82 = v14(&v10[v79], 1LL, v12);
  int v83 = v14(v81, 1LL, v12);
  if (v82)
  {
    if (!v83)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v80, v81, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v80, 0LL, 1LL, v12);
      goto LABEL_73;
    }

    goto LABEL_72;
  }

  if (v83)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v80, v12);
LABEL_72:
    uint64_t v84 = sub_100183098(&qword_1006457E8);
    memcpy(v80, v81, *(void *)(*(void *)(v84 - 8) + 64LL));
    goto LABEL_73;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v80, v81, v12);
LABEL_73:
  uint64_t v85 = v18[17];
  unint64_t v86 = &v10[v85];
  uint64_t v87 = &v11[v85];
  int v88 = v14(&v10[v85], 1LL, v12);
  int v89 = v14(v87, 1LL, v12);
  if (v88)
  {
    if (!v89)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v86, v87, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v86, 0LL, 1LL, v12);
      goto LABEL_79;
    }

    goto LABEL_78;
  }

  if (v89)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v86, v12);
LABEL_78:
    uint64_t v90 = sub_100183098(&qword_1006457E8);
    memcpy(v86, v87, *(void *)(*(void *)(v90 - 8) + 64LL));
    goto LABEL_79;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v86, v87, v12);
LABEL_79:
  uint64_t v91 = v18[18];
  uint64_t v92 = &v10[v91];
  uint64_t v93 = &v11[v91];
  int v94 = *(_DWORD *)v93;
  v92[4] = v93[4];
  *(_DWORD *)uint64_t v92 = v94;
  v10[v18[19]] = v11[v18[19]];
  uint64_t v95 = v18[20];
  uint64_t v96 = &v10[v95];
  uint64_t v97 = &v11[v95];
  *(void *)uint64_t v96 = *(void *)v97;
  uint64_t v98 = *((void *)v97 + 1);
  uint64_t v99 = *((void *)v96 + 1);
  *((void *)v96 + 1) = v98;
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRelease(v99);
  uint64_t v100 = v18[21];
  uint64_t v101 = &v10[v100];
  uint64_t v102 = &v11[v100];
  *(void *)uint64_t v101 = *(void *)v102;
  uint64_t v103 = *((void *)v102 + 1);
  uint64_t v104 = *((void *)v101 + 1);
  *((void *)v101 + 1) = v103;
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRelease(v104);
  uint64_t v105 = *(int *)(v121 + 28);
  __n128 v106 = (uint64_t *)((char *)a1 + v105);
  int v107 = (uint64_t *)((char *)v122 + v105);
  uint64_t v108 = *v107;
  unint64_t v109 = v107[1];
  sub_10019BA8C(*v107, v109);
  uint64_t v110 = *v106;
  unint64_t v111 = v106[1];
  *__n128 v106 = v108;
  v106[1] = v109;
  sub_100189B20(v110, v111);
  uint64_t v112 = *(int *)(v121 + 32);
  int v113 = (uint64_t *)((char *)a1 + v112);
  int v114 = (uint64_t *)((char *)v122 + v112);
  unint64_t v115 = *(uint64_t *)((char *)v122 + v112 + 8);
  if (*(unint64_t *)((char *)a1 + v112 + 8) >> 60 != 15)
  {
    if (v115 >> 60 != 15)
    {
      uint64_t v117 = *v114;
      sub_10019BA8C(v117, v115);
      uint64_t v118 = *v113;
      unint64_t v119 = v113[1];
      *int v113 = v117;
      v113[1] = v115;
      sub_100189B20(v118, v119);
      return a1;
    }

    sub_10019DC8C((uint64_t)v113);
    goto LABEL_84;
  }

  if (v115 >> 60 == 15)
  {
LABEL_84:
    *(_OWORD *)int v113 = *(_OWORD *)v114;
    return a1;
  }

  uint64_t v116 = *v114;
  sub_10019BA8C(v116, v115);
  *int v113 = v116;
  v113[1] = v115;
  return a1;
}

uint64_t sub_1001E5A04(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v5 = a3[6];
  uint64_t v6 = (char *)(a1 + v5);
  uint64_t v7 = (char *)(a2 + v5);
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1LL, v8))
  {
    uint64_t v11 = sub_100183098(&qword_1006457E8);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0LL, 1LL, v8);
  }

  uint64_t v12 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v13 = v12[5];
  uint64_t v14 = &v6[v13];
  int v15 = &v7[v13];
  if (v10(&v7[v13], 1LL, v8))
  {
    uint64_t v16 = sub_100183098(&qword_1006457E8);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v15, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v14, 0LL, 1LL, v8);
  }

  uint64_t v17 = v12[6];
  uint64_t v18 = &v6[v17];
  uint64_t v19 = &v7[v17];
  if (v10(&v7[v17], 1LL, v8))
  {
    uint64_t v20 = sub_100183098(&qword_1006457E8);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v18, v19, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v18, 0LL, 1LL, v8);
  }

  uint64_t v21 = v12[7];
  int v22 = &v6[v21];
  int v23 = &v7[v21];
  if (v10(&v7[v21], 1LL, v8))
  {
    uint64_t v24 = sub_100183098(&qword_1006457E8);
    memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v22, v23, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v22, 0LL, 1LL, v8);
  }

  uint64_t v25 = v12[8];
  uint64_t v26 = &v6[v25];
  uint64_t v27 = &v7[v25];
  if (v10(&v7[v25], 1LL, v8))
  {
    uint64_t v28 = sub_100183098(&qword_1006457E8);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v26, v27, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v26, 0LL, 1LL, v8);
  }

  uint64_t v29 = v12[9];
  uint64_t v30 = &v6[v29];
  uint64_t v31 = &v7[v29];
  if (v10(&v7[v29], 1LL, v8))
  {
    uint64_t v32 = sub_100183098(&qword_1006457E8);
    memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v30, v31, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v30, 0LL, 1LL, v8);
  }

  uint64_t v33 = v12[10];
  int v34 = &v6[v33];
  int v35 = &v7[v33];
  if (v10(&v7[v33], 1LL, v8))
  {
    uint64_t v36 = sub_100183098(&qword_1006457E8);
    memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v34, v35, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v34, 0LL, 1LL, v8);
  }

  uint64_t v37 = v12[11];
  uint64_t v38 = &v6[v37];
  uint64_t v39 = &v7[v37];
  if (v10(&v7[v37], 1LL, v8))
  {
    uint64_t v40 = sub_100183098(&qword_1006457E8);
    memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v38, v39, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v38, 0LL, 1LL, v8);
  }

  uint64_t v41 = v12[12];
  uint64_t v42 = &v6[v41];
  uint64_t v43 = &v7[v41];
  if (v10(&v7[v41], 1LL, v8))
  {
    uint64_t v44 = sub_100183098(&qword_1006457E8);
    memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v42, v43, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v42, 0LL, 1LL, v8);
  }

  v6[v12[13]] = v7[v12[13]];
  uint64_t v45 = v12[14];
  int v46 = &v6[v45];
  int v47 = &v7[v45];
  if (v10(&v7[v45], 1LL, v8))
  {
    uint64_t v48 = sub_100183098(&qword_1006457E8);
    memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v46, v47, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v46, 0LL, 1LL, v8);
  }

  uint64_t v49 = v12[15];
  uint64_t v50 = &v6[v49];
  uint64_t v51 = &v7[v49];
  if (v10(&v7[v49], 1LL, v8))
  {
    uint64_t v52 = sub_100183098(&qword_1006457E8);
    memcpy(v50, v51, *(void *)(*(void *)(v52 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v50, v51, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v50, 0LL, 1LL, v8);
  }

  uint64_t v53 = v12[16];
  uint64_t v54 = &v6[v53];
  uint64_t v55 = &v7[v53];
  if (v10(&v7[v53], 1LL, v8))
  {
    uint64_t v56 = sub_100183098(&qword_1006457E8);
    memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v54, v55, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v54, 0LL, 1LL, v8);
  }

  uint64_t v57 = v12[17];
  int v58 = &v6[v57];
  int v59 = &v7[v57];
  if (v10(&v7[v57], 1LL, v8))
  {
    uint64_t v60 = sub_100183098(&qword_1006457E8);
    memcpy(v58, v59, *(void *)(*(void *)(v60 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v58, v59, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v58, 0LL, 1LL, v8);
  }

  uint64_t v61 = v12[18];
  uint64_t v62 = &v6[v61];
  uint64_t v63 = &v7[v61];
  *(_DWORD *)uint64_t v62 = *(_DWORD *)v63;
  void v62[4] = v63[4];
  v6[v12[19]] = v7[v12[19]];
  *(_OWORD *)&v6[v12[20]] = *(_OWORD *)&v7[v12[20]];
  *(_OWORD *)&v6[v12[21]] = *(_OWORD *)&v7[v12[21]];
  uint64_t v64 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v64) = *(_OWORD *)(a2 + v64);
  return a1;
}

uint64_t *sub_1001E60A8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  sub_10018709C(a1 + 1);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  a1[5] = a2[5];
  uint64_t v114 = a3;
  unint64_t v115 = a2;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100183098(&qword_1006457E8);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v17 = v16[5];
  uint64_t v18 = &v8[v17];
  uint64_t v19 = &v9[v17];
  int v20 = v12(&v8[v17], 1LL, v10);
  int v21 = v12(v19, 1LL, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v19, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v18, 0LL, 1LL, v10);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_12:
    uint64_t v22 = sub_100183098(&qword_1006457E8);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v18, v19, v10);
LABEL_13:
  uint64_t v23 = v16[6];
  uint64_t v24 = &v8[v23];
  uint64_t v25 = &v9[v23];
  int v26 = v12(&v8[v23], 1LL, v10);
  int v27 = v12(v25, 1LL, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v24, v25, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v24, 0LL, 1LL, v10);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
LABEL_18:
    uint64_t v28 = sub_100183098(&qword_1006457E8);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v24, v25, v10);
LABEL_19:
  uint64_t v29 = v16[7];
  uint64_t v30 = &v8[v29];
  uint64_t v31 = &v9[v29];
  int v32 = v12(&v8[v29], 1LL, v10);
  int v33 = v12(v31, 1LL, v10);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v30, v31, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v30, 0LL, 1LL, v10);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
LABEL_24:
    uint64_t v34 = sub_100183098(&qword_1006457E8);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v30, v31, v10);
LABEL_25:
  uint64_t v35 = v16[8];
  uint64_t v36 = &v8[v35];
  uint64_t v37 = &v9[v35];
  int v38 = v12(&v8[v35], 1LL, v10);
  int v39 = v12(v37, 1LL, v10);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v36, v37, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v36, 0LL, 1LL, v10);
      goto LABEL_31;
    }

    goto LABEL_30;
  }

  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
LABEL_30:
    uint64_t v40 = sub_100183098(&qword_1006457E8);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64LL));
    goto LABEL_31;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v36, v37, v10);
LABEL_31:
  uint64_t v41 = v16[9];
  uint64_t v42 = &v8[v41];
  uint64_t v43 = &v9[v41];
  int v44 = v12(&v8[v41], 1LL, v10);
  int v45 = v12(v43, 1LL, v10);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v42, v43, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v42, 0LL, 1LL, v10);
      goto LABEL_37;
    }

    goto LABEL_36;
  }

  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
LABEL_36:
    uint64_t v46 = sub_100183098(&qword_1006457E8);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64LL));
    goto LABEL_37;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v42, v43, v10);
LABEL_37:
  uint64_t v47 = v16[10];
  uint64_t v48 = &v8[v47];
  uint64_t v49 = &v9[v47];
  int v50 = v12(&v8[v47], 1LL, v10);
  int v51 = v12(v49, 1LL, v10);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v48, v49, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v48, 0LL, 1LL, v10);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
LABEL_42:
    uint64_t v52 = sub_100183098(&qword_1006457E8);
    memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64LL));
    goto LABEL_43;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v48, v49, v10);
LABEL_43:
  uint64_t v53 = v16[11];
  uint64_t v54 = &v8[v53];
  uint64_t v55 = &v9[v53];
  int v56 = v12(&v8[v53], 1LL, v10);
  int v57 = v12(v55, 1LL, v10);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v54, v55, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v54, 0LL, 1LL, v10);
      goto LABEL_49;
    }

    goto LABEL_48;
  }

  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v10);
LABEL_48:
    uint64_t v58 = sub_100183098(&qword_1006457E8);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64LL));
    goto LABEL_49;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v54, v55, v10);
LABEL_49:
  uint64_t v59 = v16[12];
  uint64_t v60 = &v8[v59];
  uint64_t v61 = &v9[v59];
  int v62 = v12(&v8[v59], 1LL, v10);
  int v63 = v12(v61, 1LL, v10);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v60, v61, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v60, 0LL, 1LL, v10);
      goto LABEL_55;
    }

    goto LABEL_54;
  }

  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v60, v10);
LABEL_54:
    uint64_t v64 = sub_100183098(&qword_1006457E8);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64LL));
    goto LABEL_55;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v60, v61, v10);
LABEL_55:
  v8[v16[13]] = v9[v16[13]];
  uint64_t v65 = v16[14];
  uint64_t v66 = &v8[v65];
  uint64_t v67 = &v9[v65];
  int v68 = v12(&v8[v65], 1LL, v10);
  int v69 = v12(v67, 1LL, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v66, v67, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v66, 0LL, 1LL, v10);
      goto LABEL_61;
    }

    goto LABEL_60;
  }

  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v10);
LABEL_60:
    uint64_t v70 = sub_100183098(&qword_1006457E8);
    memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64LL));
    goto LABEL_61;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v66, v67, v10);
LABEL_61:
  uint64_t v71 = v16[15];
  uint64_t v72 = &v8[v71];
  uint64_t v73 = &v9[v71];
  int v74 = v12(&v8[v71], 1LL, v10);
  int v75 = v12(v73, 1LL, v10);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v72, v73, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v72, 0LL, 1LL, v10);
      goto LABEL_67;
    }

    goto LABEL_66;
  }

  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
LABEL_66:
    uint64_t v76 = sub_100183098(&qword_1006457E8);
    memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64LL));
    goto LABEL_67;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v72, v73, v10);
LABEL_67:
  uint64_t v77 = v16[16];
  uint64_t v78 = &v8[v77];
  uint64_t v79 = &v9[v77];
  int v80 = v12(&v8[v77], 1LL, v10);
  int v81 = v12(v79, 1LL, v10);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v78, v79, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v78, 0LL, 1LL, v10);
      goto LABEL_73;
    }

    goto LABEL_72;
  }

  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_72:
    uint64_t v82 = sub_100183098(&qword_1006457E8);
    memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64LL));
    goto LABEL_73;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v78, v79, v10);
LABEL_73:
  uint64_t v83 = v16[17];
  uint64_t v84 = &v8[v83];
  uint64_t v85 = &v9[v83];
  int v86 = v12(&v8[v83], 1LL, v10);
  int v87 = v12(v85, 1LL, v10);
  if (v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v84, v85, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v84, 0LL, 1LL, v10);
      goto LABEL_79;
    }

    goto LABEL_78;
  }

  if (v87)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v84, v10);
LABEL_78:
    uint64_t v88 = sub_100183098(&qword_1006457E8);
    memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64LL));
    goto LABEL_79;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v84, v85, v10);
LABEL_79:
  uint64_t v89 = v16[18];
  uint64_t v90 = &v8[v89];
  uint64_t v91 = &v9[v89];
  *(_DWORD *)uint64_t v90 = *(_DWORD *)v91;
  v90[4] = v91[4];
  v8[v16[19]] = v9[v16[19]];
  uint64_t v92 = v16[20];
  uint64_t v93 = &v8[v92];
  int v94 = &v9[v92];
  uint64_t v96 = *(void *)v94;
  uint64_t v95 = *((void *)v94 + 1);
  uint64_t v97 = *((void *)v93 + 1);
  *(void *)uint64_t v93 = v96;
  *((void *)v93 + 1) = v95;
  swift_bridgeObjectRelease(v97);
  uint64_t v98 = v16[21];
  uint64_t v99 = &v8[v98];
  uint64_t v100 = &v9[v98];
  uint64_t v102 = *(void *)v100;
  uint64_t v101 = *((void *)v100 + 1);
  uint64_t v103 = *((void *)v99 + 1);
  *(void *)uint64_t v99 = v102;
  *((void *)v99 + 1) = v101;
  swift_bridgeObjectRelease(v103);
  uint64_t v104 = *(int *)(v114 + 28);
  uint64_t v105 = *(uint64_t *)((char *)a1 + v104);
  unint64_t v106 = *(uint64_t *)((char *)a1 + v104 + 8);
  *(_OWORD *)((char *)a1 + v104) = *(_OWORD *)((char *)v115 + v104);
  sub_100189B20(v105, v106);
  uint64_t v107 = *(int *)(v114 + 32);
  uint64_t v108 = (uint64_t *)((char *)a1 + v107);
  unint64_t v109 = (uint64_t *)((char *)v115 + v107);
  unint64_t v110 = *(uint64_t *)((char *)a1 + v107 + 8);
  if (v110 >> 60 != 15)
  {
    unint64_t v111 = v109[1];
    if (v111 >> 60 != 15)
    {
      uint64_t v112 = *v108;
      *uint64_t v108 = *v109;
      v108[1] = v111;
      sub_100189B20(v112, v110);
      return a1;
    }

    sub_10019DC8C((uint64_t)v108);
  }

  *(_OWORD *)uint64_t v108 = *(_OWORD *)v109;
  return a1;
}

uint64_t sub_1001E6B48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001E6B54);
}

uint64_t sub_1001E6B58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001E6B64);
}

uint64_t _s10NanoWalletV17InitialKeyContextVMa(uint64_t a1)
{
  return sub_1001A4AD0(a1, qword_1006470E0, (uint64_t)&_s10NanoWalletV17InitialKeyContextVMn);
}

uint64_t sub_1001E6B7C(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = "(";
  uint64_t result = type metadata accessor for SDAuthenticationSessionMetrics(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    void v4[3] = &unk_1004CE490;
    void v4[4] = &unk_1004CE4A8;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1001E6C10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001D95A8(v2 + *(int *)(a1 + 32), a2);
}

uint64_t sub_1001E6C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v3 + *(int *)(a3 + 40);
  uint64_t result = sub_100189B0C(*(void *)v6, *(void *)(v6 + 8));
  *(void *)uint64_t v6 = a1;
  *(void *)(v6 + _Block_object_dispose(va, 8) = a2;
  return result;
}

uint64_t sub_1001E6C64(uint64_t a1, uint64_t a2)
{
  return sub_1001A315C(a1, a2, (uint64_t (*)(void))sub_1001E0414);
}

uint64_t sub_1001E6C80(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 48));
}

id sub_1001E6C90()
{
  uint64_t v1 = *(int *)(_s10NanoWalletV20HandleRequestContextVMa(0LL) + 48);
  uint64_t v2 = *(void **)(v0 + v1);
  if (v2)
  {
    id v3 = *(id *)(v0 + v1);
LABEL_5:
    id v5 = v2;
    return v3;
  }

  id result = [objc_allocWithZone((Class)SDAuthenticationResponse) init];
  if (result)
  {
    *(void *)(v0 + v1) = result;
    id v3 = result;
    uint64_t v2 = 0LL;
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

void sub_1001E6CFC(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v46 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100183098(&qword_1006457E0);
  uint64_t v10 = swift_allocObject(v9, 192LL, 7LL);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1004CE420;
  if (qword_100643F00 != -1) {
    swift_once(&qword_100643F00, LongHash.storage.getter);
  }
  *(void *)(v10 + 56) = &type metadata for SDAuthentication.Operation.CheckLocalSecurityPolicy;
  *(void *)(v10 + 64) = &off_10064ABB8;
  *(void *)(v10 + 96) = &type metadata for SDAuthentication.Operation.RangeAsResponder;
  *(void *)(v10 + 104) = &off_10064ADF8;
  *(void *)(v10 + 136) = &type metadata for SDAuthentication.Operation.IncludeAWDLInfoInMessage;
  *(void *)(v10 + 144) = &off_10064AB98;
  *(void *)(v10 + 176) = &type metadata for SDAuthentication.Operation.SendResponseMessage;
  *(void *)(v10 + 184) = &off_10064AFB8;
  *a3 = v10;
  uint64_t v11 = (int *)_s10NanoWalletV20HandleRequestContextVMa(0LL);
  uint64_t v12 = v11[12];
  *(uint64_t *)((char *)a3 + v12) = 0LL;
  *((_BYTE *)a3 + v11[13]) = 1;
  if ([a1 hasVersion]
    && [a1 hasType]
    && [a1 hasAwdlInfo]
    && [a1 hasRangingToken]
    && [a1 hasUnlockDate])
  {
    uint64_t v13 = _s10NanoWalletV17InitialKeyContextVMa(0LL);
    sub_1001A4B84( a2 + *(int *)(v13 + 24),  (uint64_t)a3 + v11[6],  type metadata accessor for SDAuthenticationSessionMetrics);
    sub_10019A6C4(a2 + 8, (uint64_t)(a3 + 1));
    int v14 = (uint64_t *)(a2 + *(int *)(v13 + 28));
    uint64_t v15 = *v14;
    unint64_t v16 = v14[1];
    uint64_t v17 = (uint64_t *)((char *)a3 + v11[10]);
    *uint64_t v17 = v15;
    v17[1] = v16;
    sub_10019BA8C(v15, v16);
    *(_DWORD *)((char *)a3 + v11[9]) = [a1 version];
    id v18 = [a1 awdlInfo];
    if (v18)
    {
      uint64_t v19 = v18;
      uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);
      uint64_t v43 = v21;

      uint64_t v22 = (uint64_t *)((char *)a3 + v11[11]);
      uint64_t v23 = v43;
      *uint64_t v22 = v20;
      v22[1] = v23;
      id v24 = [a1 rangingToken];
      if (v24)
      {
        uint64_t v25 = v24;
        uint64_t v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v24);
        uint64_t v43 = v27;

        uint64_t v28 = (uint64_t *)((char *)a3 + v11[8]);
        uint64_t v29 = v43;
        *uint64_t v28 = v26;
        v28[1] = v29;
        Date.init(timeIntervalSince1970:)([a1 unlockDate]);

        sub_1001A4BC8(a2, _s10NanoWalletV17InitialKeyContextVMa);
        (*(void (**)(char *, char *, uint64_t))(v6 + 32))((char *)a3 + v11[7], v8, v46);
        return;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

  else
  {
    uint64_t v44 = 0LL;
    unint64_t v45 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(32LL);
    unint64_t v30 = v45;
    id v31 = [a1 description];
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    unint64_t v34 = v33;
    swift_bridgeObjectRelease(v30);

    uint64_t v44 = v32;
    unint64_t v45 = v34;
    v35._countAndFlagsBits = 0xD00000000000001CLL;
    v35._object = (void *)0x8000000100504EA0LL;
    String.append(_:)(v35);
    v36._object = (void *)0x80000001004CE600LL;
    v36._countAndFlagsBits = 0xD000000000000014LL;
    String.append(_:)(v36);
    uint64_t v37 = v44;
    unint64_t v38 = v45;
    unint64_t v39 = sub_100187014();
    uint64_t v40 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v39, 0LL, 0LL);
    *(_DWORD *)uint64_t v41 = 1;
    *(void *)(v41 + _Block_object_dispose(va, 8) = v37;
    *(void *)(v41 + swift_unknownObjectWeakDestroy(v0 + 16) = v38;
    swift_willThrow(v40);

    sub_1001A4BC8(a2, _s10NanoWalletV17InitialKeyContextVMa);
    swift_bridgeObjectRelease(*a3);
  }

uint64_t sub_1001E70D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_1001E7110(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 40);
  uint64_t v3 = *(void *)v2;
  sub_10019BA8C(*(void *)v2, *(void *)(v2 + 8));
  return v3;
}

uint64_t sub_1001E7148(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 44);
  uint64_t v3 = *(void *)v2;
  sub_10019BA8C(*(void *)v2, *(void *)(v2 + 8));
  return v3;
}

uint64_t sub_1001E7184(uint64_t a1, uint64_t a2)
{
  return sub_1001A315C(a1, a2, (uint64_t (*)(void))sub_1001E6C90);
}

id sub_1001E71A0()
{
  uint64_t v1 = *(int *)(_s10NanoWalletV21HandleResponseContextVMa(0LL) + 40);
  uint64_t v2 = *(void **)(v0 + v1);
  if (v2)
  {
    id v3 = *(id *)(v0 + v1);
LABEL_5:
    id v5 = v2;
    return v3;
  }

  id result = [objc_allocWithZone((Class)SDAuthenticationConfirmation) init];
  if (result)
  {
    *(void *)(v0 + v1) = result;
    id v3 = result;
    uint64_t v2 = 0LL;
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

void sub_1001E720C(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_100183098(&qword_1006457E0);
  uint64_t v7 = swift_allocObject(v6, 232LL, 7LL);
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1004CD1E0;
  if (qword_100643F00 != -1) {
    swift_once(&qword_100643F00, LongHash.storage.getter);
  }
  *(void *)(v7 + 56) = &type metadata for SDAuthentication.Operation.RecordKeyExchangeEnd;
  *(void *)(v7 + 64) = &off_10064AFF8;
  *(void *)(v7 + 96) = &type metadata for SDAuthentication.Operation.RecordAWDLBringUpStart;
  *(void *)(v7 + 104) = &off_10064ADD8;
  *(void *)(v7 + 136) = &type metadata for SDAuthentication.Operation.RangeAsInitiator;
  *(void *)(v7 + 144) = &off_10064ADB8;
  *(void *)(v7 + 176) = &type metadata for SDAuthentication.Operation.SendConfirmation;
  *(void *)(v7 + 184) = &off_10064B238;
  *(void *)(v7 + 2swift_unknownObjectWeakDestroy(v0 + 16) = &type metadata for SDAuthentication.Operation.FinishSession;
  *(void *)(v7 + 224) = &off_10064AF38;
  *a3 = v7;
  uint64_t v8 = (int *)_s10NanoWalletV21HandleResponseContextVMa(0LL);
  uint64_t v9 = v8[10];
  *(uint64_t *)((char *)a3 + v9) = 0LL;
  *((_BYTE *)a3 + v8[11]) = 2;
  uint64_t v10 = _s10NanoWalletV18InitialLockContextVMa(0LL);
  uint64_t v11 = a2 + *(int *)(v10 + 40);
  unint64_t v12 = *(void *)(v11 + 8);
  if (v12 >> 60 == 15)
  {
    unint64_t v13 = sub_100187014();
    uint64_t v14 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v13, 0LL, 0LL);
    *(_DWORD *)uint64_t v15 = 10;
    *(void *)(v15 + _Block_object_dispose(va, 8) = 0xD000000000000015LL;
    *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = 0x8000000100504EC0LL;
    swift_willThrow(v14);

LABEL_9:
    sub_1001A4BC8(a2, _s10NanoWalletV18InitialLockContextVMa);
    swift_bridgeObjectRelease(*a3);

    return;
  }

  uint64_t v16 = v10;
  uint64_t v17 = *(void *)v11;
  sub_10019BA8C(*(void *)v11, *(void *)(v11 + 8));
  if (![a1 hasAwdlInfo])
  {
    unint64_t v24 = sub_100187014();
    uint64_t v25 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v24, 0LL, 0LL);
    *(_DWORD *)uint64_t v26 = 1;
    *(void *)(v26 + _Block_object_dispose(va, 8) = 0xD000000000000011LL;
    *(void *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = 0x8000000100504EE0LL;
    swift_willThrow(v25);

    sub_100189B0C(v17, v12);
    goto LABEL_9;
  }

  sub_1001A4B84(a2 + *(int *)(v16 + 24), (uint64_t)a3 + v8[5], type metadata accessor for SDAuthenticationSessionMetrics);
  sub_10019A6C4(a2 + 8, (uint64_t)a3 + v8[6]);
  id v18 = (uint64_t *)((char *)a3 + v8[7]);
  *id v18 = v17;
  v18[1] = v12;
  sub_10019BA8C(v17, v12);
  *(_DWORD *)((char *)a3 + v8[8]) = [a1 version];
  id v19 = [a1 awdlInfo];
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v19);
    uint64_t v27 = v22;

    sub_100189B0C(v17, v12);
    sub_1001A4BC8(a2, _s10NanoWalletV18InitialLockContextVMa);
    uint64_t v23 = (uint64_t *)((char *)a3 + v8[9]);
    *uint64_t v23 = v21;
    v23[1] = v27;
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1001E7510(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 36);
  uint64_t v3 = *(void *)v2;
  sub_10019BA8C(*(void *)v2, *(void *)(v2 + 8));
  return v3;
}

uint64_t sub_1001E7548(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 28);
  uint64_t v3 = *(void *)v2;
  sub_10019BA8C(*(void *)v2, *(void *)(v2 + 8));
  return v3;
}

uint64_t sub_1001E7584(uint64_t a1, uint64_t a2)
{
  return sub_1001A315C(a1, a2, (uint64_t (*)(void))sub_1001E71A0);
}

uint64_t sub_1001E75A0(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 44));
}

uint64_t sub_1001E75AC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_100183098(&qword_1006457E0);
  uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
  *(_OWORD *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1004CD530;
  if (qword_100643F00 != -1) {
    swift_once(&qword_100643F00, LongHash.storage.getter);
  }
  *(void *)(v7 + 56) = &type metadata for SDAuthentication.Operation.HandleSucceededResult;
  *(void *)(v7 + 64) = &off_10064B218;
  *(void *)(v7 + 96) = &type metadata for SDAuthentication.Operation.FinishSession;
  *(void *)(v7 + 104) = &off_10064AF38;
  *a3 = v7;
  if ([a1 hasSuccess])
  {
    uint64_t v8 = a2 + *(int *)(_s10NanoWalletV20HandleRequestContextVMa(0LL) + 24);
    uint64_t v9 = _s10NanoWalletV25HandleConfirmationContextVMa(0LL);
    sub_1001A4B84(v8, (uint64_t)a3 + *(int *)(v9 + 24), type metadata accessor for SDAuthenticationSessionMetrics);
    sub_10019A6C4(a2 + 8, (uint64_t)(a3 + 1));
    LOBYTE(v_Block_object_dispose(va, 8) = [a1 success];

    uint64_t result = sub_1001A4BC8(a2, _s10NanoWalletV20HandleRequestContextVMa);
    *((_BYTE *)a3 + *(int *)(v9 + 28)) = v8;
  }

  else
  {
    unint64_t v11 = sub_100187014();
    uint64_t v12 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v11, 0LL, 0LL);
    *(_DWORD *)uint64_t v13 = 1;
    *(void *)(v13 + _Block_object_dispose(va, 8) = 0xD000000000000016LL;
    *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = 0x8000000100504210LL;
    swift_willThrow(v12);

    sub_1001A4BC8(a2, _s10NanoWalletV20HandleRequestContextVMa);
    return swift_bridgeObjectRelease(*a3);
  }

  return result;
}

void sub_1001E7760(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v46 = a3;
  uint64_t v41 = _s10NanoWalletV25HandleConfirmationContextVMa(0LL);
  __chkstk_darwin(v41);
  uint64_t v43 = (uint64_t *)((char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v44 = _s10NanoWalletV18InitialLockContextVMa(0LL);
  __chkstk_darwin(v44);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = _s10NanoWalletV21HandleResponseContextVMa(0LL);
  __chkstk_darwin(v42);
  uint64_t v9 = (uint64_t *)((char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = _s10NanoWalletV17InitialKeyContextVMa(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = _s10NanoWalletV20HandleRequestContextVMa(0LL);
  uint64_t v13 = __chkstk_darwin(v45);
  uint64_t v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v17 = (uint64_t *)((char *)&v41 - v16);
  sub_10019A6C4(a1, (uint64_t)v48);
  uint64_t v18 = sub_100183098(&qword_1006500D0);
  uint64_t v19 = sub_100183168(0LL, &qword_100645A08, off_1005C8870);
  if (swift_dynamicCast(&v49, v48, v18, v19, 6LL))
  {
    uint64_t v20 = v49;
    sub_10019A6C4(a2, (uint64_t)v48);
    id v21 = v20;
    uint64_t v22 = sub_100183098(&qword_100645A28);
    swift_dynamicCast(v12, v48, v22, v10, 7LL);
    uint64_t v23 = v47;
    sub_1001E6CFC(v21, (uint64_t)v12, v17);
    if (!v23)
    {
      unint64_t v24 = v46;
      v46[3] = v45;
      v24[4] = &off_1005D4560;
      uint64_t v25 = sub_1001A4B04(v24);
      uint64_t v26 = _s10NanoWalletV20HandleRequestContextVMa;
      uint64_t v27 = (uint64_t)v17;
LABEL_10:
      sub_1001A4B40(v27, (uint64_t)v25, v26);
    }
  }

  else
  {
    uint64_t v28 = v47;
    sub_10019A6C4(a1, (uint64_t)v48);
    uint64_t v29 = sub_100183168(0LL, &qword_100645A10, off_1005C8878);
    if (swift_dynamicCast(&v49, v48, v18, v29, 6LL))
    {
      unint64_t v30 = v49;
      sub_10019A6C4(a2, (uint64_t)v48);
      id v21 = v30;
      uint64_t v31 = sub_100183098(&qword_100645A28);
      swift_dynamicCast(v7, v48, v31, v44, 7LL);
      sub_1001E720C(v21, (uint64_t)v7, v9);
      if (!v28)
      {
        uint64_t v32 = v46;
        v46[3] = v42;
        v32[4] = &off_1005D4578;
        uint64_t v25 = sub_1001A4B04(v32);
        uint64_t v26 = _s10NanoWalletV21HandleResponseContextVMa;
        uint64_t v27 = (uint64_t)v9;
        goto LABEL_10;
      }
    }

    else
    {
      sub_10019A6C4(a1, (uint64_t)v48);
      uint64_t v33 = sub_100183168(0LL, &qword_100645A20, off_1005C8838);
      if (!swift_dynamicCast(&v49, v48, v18, v33, 6LL))
      {
        unint64_t v38 = sub_100187014();
        uint64_t v39 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v38, 0LL, 0LL);
        *(_DWORD *)uint64_t v40 = 10;
        *(void *)(v40 + _Block_object_dispose(va, 8) = 0xD00000000000001FLL;
        *(void *)(v40 + swift_unknownObjectWeakDestroy(v0 + 16) = 0x8000000100503F30LL;
        swift_willThrow(v39);
        return;
      }

      unint64_t v34 = v49;
      sub_10019A6C4(a2, (uint64_t)v48);
      id v21 = v34;
      uint64_t v35 = sub_100183098(&qword_100645A28);
      swift_dynamicCast(v15, v48, v35, v45, 7LL);
      Swift::String v36 = v43;
      sub_1001E75AC(v21, (uint64_t)v15, v43);
      if (!v28)
      {
        uint64_t v37 = v46;
        v46[3] = v41;
        void v37[4] = &off_1005D4590;
        uint64_t v25 = sub_1001A4B04(v37);
        uint64_t v26 = _s10NanoWalletV25HandleConfirmationContextVMa;
        uint64_t v27 = (uint64_t)v36;
        goto LABEL_10;
      }
    }
  }
}

void sub_1001E7B9C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
}

uint64_t _s10NanoWalletV25HandleConfirmationContextVMa(uint64_t a1)
{
  return sub_1001A4AD0(a1, qword_1006472D8, (uint64_t)&_s10NanoWalletV25HandleConfirmationContextVMn);
}

uint64_t _s10NanoWalletV21HandleResponseContextVMa(uint64_t a1)
{
  return sub_1001A4AD0(a1, qword_100647230, (uint64_t)&_s10NanoWalletV21HandleResponseContextVMn);
}

uint64_t _s10NanoWalletV20HandleRequestContextVMa(uint64_t a1)
{
  return sub_1001A4AD0(a1, qword_100647180, (uint64_t)&_s10NanoWalletV20HandleRequestContextVMn);
}

uint64_t sub_1001E7BEC(uint64_t a1, uint64_t *a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16LL) & ~(unint64_t)v4);
    swift_retain(v5);
  }

  else
  {
    uint64_t v8 = a2 + 1;
    __int128 v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    uint64_t v10 = v9;
    uint64_t v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
    swift_bridgeObjectRetain(v5);
    v11(a1 + 8, v8, v10);
    uint64_t v12 = a3[6];
    uint64_t v13 = (char *)(a1 + v12);
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for Date(0LL);
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    uint64_t v102 = a3;
    if (v17(v14, 1LL, v15))
    {
      uint64_t v18 = sub_100183098(&qword_1006457E8);
      memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
    }

    uint64_t v19 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
    uint64_t v20 = v19[5];
    id v21 = &v13[v20];
    uint64_t v22 = &v14[v20];
    if (v17(&v14[v20], 1LL, v15))
    {
      uint64_t v23 = sub_100183098(&qword_1006457E8);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v22, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v21, 0LL, 1LL, v15);
    }

    uint64_t v24 = v19[6];
    uint64_t v25 = &v13[v24];
    uint64_t v26 = &v14[v24];
    if (v17(&v14[v24], 1LL, v15))
    {
      uint64_t v27 = sub_100183098(&qword_1006457E8);
      memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v25, v26, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v25, 0LL, 1LL, v15);
    }

    uint64_t v28 = v19[7];
    uint64_t v29 = &v13[v28];
    unint64_t v30 = &v14[v28];
    if (v17(&v14[v28], 1LL, v15))
    {
      uint64_t v31 = sub_100183098(&qword_1006457E8);
      memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v29, v30, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v29, 0LL, 1LL, v15);
    }

    uint64_t v32 = v19[8];
    uint64_t v33 = &v13[v32];
    unint64_t v34 = &v14[v32];
    if (v17(&v14[v32], 1LL, v15))
    {
      uint64_t v35 = sub_100183098(&qword_1006457E8);
      memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v33, v34, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v33, 0LL, 1LL, v15);
    }

    uint64_t v36 = v19[9];
    uint64_t v37 = &v13[v36];
    unint64_t v38 = &v14[v36];
    if (v17(&v14[v36], 1LL, v15))
    {
      uint64_t v39 = sub_100183098(&qword_1006457E8);
      memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v37, v38, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v37, 0LL, 1LL, v15);
    }

    uint64_t v40 = v19[10];
    uint64_t v41 = &v13[v40];
    uint64_t v42 = &v14[v40];
    if (v17(&v14[v40], 1LL, v15))
    {
      uint64_t v43 = sub_100183098(&qword_1006457E8);
      memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v41, v42, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v41, 0LL, 1LL, v15);
    }

    uint64_t v44 = v19[11];
    uint64_t v45 = &v13[v44];
    uint64_t v46 = &v14[v44];
    if (v17(&v14[v44], 1LL, v15))
    {
      uint64_t v47 = sub_100183098(&qword_1006457E8);
      memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v45, v46, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v45, 0LL, 1LL, v15);
    }

    uint64_t v48 = v19[12];
    uint64_t v49 = &v13[v48];
    int v50 = &v14[v48];
    if (v17(&v14[v48], 1LL, v15))
    {
      uint64_t v51 = sub_100183098(&qword_1006457E8);
      memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v49, v50, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v49, 0LL, 1LL, v15);
    }

    v13[v19[13]] = v14[v19[13]];
    uint64_t v52 = v19[14];
    uint64_t v53 = &v13[v52];
    uint64_t v54 = &v14[v52];
    if (v17(&v14[v52], 1LL, v15))
    {
      uint64_t v55 = sub_100183098(&qword_1006457E8);
      memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v53, v54, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v53, 0LL, 1LL, v15);
    }

    uint64_t v56 = v19[15];
    int v57 = &v13[v56];
    uint64_t v58 = &v14[v56];
    if (v17(&v14[v56], 1LL, v15))
    {
      uint64_t v59 = sub_100183098(&qword_1006457E8);
      memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v57, v58, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v57, 0LL, 1LL, v15);
    }

    uint64_t v60 = v19[16];
    uint64_t v61 = &v13[v60];
    int v62 = &v14[v60];
    if (v17(&v14[v60], 1LL, v15))
    {
      uint64_t v63 = sub_100183098(&qword_1006457E8);
      memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v61, v62, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v61, 0LL, 1LL, v15);
    }

    uint64_t v64 = v19[17];
    uint64_t v65 = &v13[v64];
    uint64_t v66 = &v14[v64];
    if (v17(&v14[v64], 1LL, v15))
    {
      uint64_t v67 = sub_100183098(&qword_1006457E8);
      memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v65, v66, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v65, 0LL, 1LL, v15);
    }

    uint64_t v68 = v19[18];
    int v69 = &v13[v68];
    uint64_t v70 = &v14[v68];
    *(_DWORD *)int v69 = *(_DWORD *)v70;
    v69[4] = v70[4];
    v13[v19[19]] = v14[v19[19]];
    uint64_t v71 = v19[20];
    uint64_t v72 = &v13[v71];
    uint64_t v73 = &v14[v71];
    uint64_t v74 = *((void *)v73 + 1);
    *(void *)uint64_t v72 = *(void *)v73;
    *((void *)v72 + 1) = v74;
    uint64_t v75 = v19[21];
    uint64_t v76 = &v13[v75];
    uint64_t v77 = &v14[v75];
    uint64_t v78 = *((void *)v77 + 1);
    *(void *)uint64_t v76 = *(void *)v77;
    *((void *)v76 + 1) = v78;
    uint64_t v79 = v102[7];
    uint64_t v80 = a1 + v79;
    uint64_t v81 = (uint64_t)a2 + v79;
    uint64_t v82 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRetain(v78);
    v82(v80, v81, v15);
    uint64_t v83 = v102[8];
    uint64_t v84 = (uint64_t *)(a1 + v83);
    uint64_t v85 = (uint64_t *)((char *)a2 + v83);
    uint64_t v86 = *v85;
    unint64_t v87 = v85[1];
    sub_10019BA8C(*v85, v87);
    *uint64_t v84 = v86;
    v84[1] = v87;
    uint64_t v88 = v102[10];
    *(_DWORD *)(a1 + v102[9]) = *(_DWORD *)((char *)a2 + v102[9]);
    uint64_t v89 = (uint64_t *)(a1 + v88);
    uint64_t v90 = *(uint64_t *)((char *)a2 + v88);
    unint64_t v91 = *(uint64_t *)((char *)a2 + v88 + 8);
    sub_10019BA8C(v90, v91);
    *uint64_t v89 = v90;
    v89[1] = v91;
    uint64_t v92 = v102[11];
    uint64_t v93 = (uint64_t *)(a1 + v92);
    int v94 = (uint64_t *)((char *)a2 + v92);
    uint64_t v95 = *v94;
    unint64_t v96 = v94[1];
    sub_10019BA8C(*v94, v96);
    *uint64_t v93 = v95;
    v93[1] = v96;
    uint64_t v97 = v102[12];
    uint64_t v98 = v102[13];
    uint64_t v99 = *(void **)((char *)a2 + v97);
    *(void *)(a1 + v97) = v99;
    *(_BYTE *)(a1 + v9_Block_object_dispose(va, 8) = *((_BYTE *)a2 + v98);
    id v100 = v99;
  }

  return a1;
}

void sub_1001E8378(char *a1, int *a2)
{
  int v4 = a1 + 8;
  swift_bridgeObjectRelease(*(void *)a1);
  sub_10018709C(v4);
  uint64_t v5 = &a1[a2[6]];
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  }
  __int128 v9 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v10 = &v5[v9[5]];
  if (!v8(v10, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  uint64_t v11 = &v5[v9[6]];
  if (!v8(v11, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  }
  uint64_t v12 = &v5[v9[7]];
  if (!v8(v12, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  }
  uint64_t v13 = &v5[v9[8]];
  if (!v8(v13, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  }
  uint64_t v14 = &v5[v9[9]];
  if (!v8(v14, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  }
  uint64_t v15 = &v5[v9[10]];
  if (!v8(v15, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
  }
  uint64_t v16 = &v5[v9[11]];
  if (!v8(v16, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
  }
  uint64_t v17 = &v5[v9[12]];
  if (!v8(v17, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
  }
  uint64_t v18 = &v5[v9[14]];
  if (!v8(v18, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
  }
  uint64_t v19 = &v5[v9[15]];
  if (!v8(v19, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
  }
  uint64_t v20 = &v5[v9[16]];
  if (!v8(v20, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v20, v6);
  }
  id v21 = &v5[v9[17]];
  if (!v8(v21, 1LL, v6)) {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v21, v6);
  }
  swift_bridgeObjectRelease(*(void *)&v5[v9[20] + 8]);
  swift_bridgeObjectRelease(*(void *)&v5[v9[21] + 8]);
  (*(void (**)(char *, uint64_t))(v7 + 8))(&a1[a2[7]], v6);
  sub_100189B20(*(void *)&a1[a2[8]], *(void *)&a1[a2[8] + 8]);
  sub_100189B20(*(void *)&a1[a2[10]], *(void *)&a1[a2[10] + 8]);
  sub_100189B20(*(void *)&a1[a2[11]], *(void *)&a1[a2[11] + 8]);
}

uint64_t sub_1001E868C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(void *)a1 = *a2;
  uint64_t v7 = a2 + 1;
  __int128 v8 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v8;
  uint64_t v9 = v8;
  uint64_t v10 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v8 - 8);
  swift_bridgeObjectRetain(v6);
  v10(a1 + 8, v7, v9);
  uint64_t v101 = a3;
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v16(v13, 1LL, v14))
  {
    uint64_t v17 = sub_100183098(&qword_1006457E8);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v19 = v18[5];
  uint64_t v20 = &v12[v19];
  id v21 = &v13[v19];
  if (v16(&v13[v19], 1LL, v14))
  {
    uint64_t v22 = sub_100183098(&qword_1006457E8);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v20, v21, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v20, 0LL, 1LL, v14);
  }

  uint64_t v23 = v18[6];
  uint64_t v24 = &v12[v23];
  uint64_t v25 = &v13[v23];
  if (v16(&v13[v23], 1LL, v14))
  {
    uint64_t v26 = sub_100183098(&qword_1006457E8);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v24, v25, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v24, 0LL, 1LL, v14);
  }

  uint64_t v27 = v18[7];
  uint64_t v28 = &v12[v27];
  uint64_t v29 = &v13[v27];
  if (v16(&v13[v27], 1LL, v14))
  {
    uint64_t v30 = sub_100183098(&qword_1006457E8);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v28, v29, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v28, 0LL, 1LL, v14);
  }

  uint64_t v31 = v18[8];
  uint64_t v32 = &v12[v31];
  uint64_t v33 = &v13[v31];
  if (v16(&v13[v31], 1LL, v14))
  {
    uint64_t v34 = sub_100183098(&qword_1006457E8);
    memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v32, v33, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v32, 0LL, 1LL, v14);
  }

  uint64_t v35 = v18[9];
  uint64_t v36 = &v12[v35];
  uint64_t v37 = &v13[v35];
  if (v16(&v13[v35], 1LL, v14))
  {
    uint64_t v38 = sub_100183098(&qword_1006457E8);
    memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v36, v37, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v36, 0LL, 1LL, v14);
  }

  uint64_t v39 = v18[10];
  uint64_t v40 = &v12[v39];
  uint64_t v41 = &v13[v39];
  if (v16(&v13[v39], 1LL, v14))
  {
    uint64_t v42 = sub_100183098(&qword_1006457E8);
    memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v40, v41, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v40, 0LL, 1LL, v14);
  }

  uint64_t v43 = v18[11];
  uint64_t v44 = &v12[v43];
  uint64_t v45 = &v13[v43];
  if (v16(&v13[v43], 1LL, v14))
  {
    uint64_t v46 = sub_100183098(&qword_1006457E8);
    memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v44, v45, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v44, 0LL, 1LL, v14);
  }

  uint64_t v47 = v18[12];
  uint64_t v48 = &v12[v47];
  uint64_t v49 = &v13[v47];
  if (v16(&v13[v47], 1LL, v14))
  {
    uint64_t v50 = sub_100183098(&qword_1006457E8);
    memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v48, v49, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v48, 0LL, 1LL, v14);
  }

  v12[v18[13]] = v13[v18[13]];
  uint64_t v51 = v18[14];
  uint64_t v52 = &v12[v51];
  uint64_t v53 = &v13[v51];
  if (v16(&v13[v51], 1LL, v14))
  {
    uint64_t v54 = sub_100183098(&qword_1006457E8);
    memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v52, v53, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v52, 0LL, 1LL, v14);
  }

  uint64_t v55 = v18[15];
  uint64_t v56 = &v12[v55];
  int v57 = &v13[v55];
  if (v16(&v13[v55], 1LL, v14))
  {
    uint64_t v58 = sub_100183098(&qword_1006457E8);
    memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v56, v57, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v56, 0LL, 1LL, v14);
  }

  uint64_t v59 = v18[16];
  uint64_t v60 = &v12[v59];
  uint64_t v61 = &v13[v59];
  if (v16(&v13[v59], 1LL, v14))
  {
    uint64_t v62 = sub_100183098(&qword_1006457E8);
    memcpy(v60, v61, *(void *)(*(void *)(v62 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v60, v61, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v60, 0LL, 1LL, v14);
  }

  uint64_t v63 = v18[17];
  uint64_t v64 = &v12[v63];
  uint64_t v65 = &v13[v63];
  if (v16(&v13[v63], 1LL, v14))
  {
    uint64_t v66 = sub_100183098(&qword_1006457E8);
    memcpy(v64, v65, *(void *)(*(void *)(v66 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v64, v65, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v64, 0LL, 1LL, v14);
  }

  uint64_t v67 = v18[18];
  uint64_t v68 = &v12[v67];
  int v69 = &v13[v67];
  *(_DWORD *)uint64_t v68 = *(_DWORD *)v69;
  v68[4] = v69[4];
  v12[v18[19]] = v13[v18[19]];
  uint64_t v70 = v18[20];
  uint64_t v71 = &v12[v70];
  uint64_t v72 = &v13[v70];
  uint64_t v73 = *((void *)v72 + 1);
  *(void *)uint64_t v71 = *(void *)v72;
  *((void *)v71 + 1) = v73;
  uint64_t v74 = v18[21];
  uint64_t v75 = &v12[v74];
  uint64_t v76 = &v13[v74];
  uint64_t v77 = *((void *)v76 + 1);
  *(void *)uint64_t v75 = *(void *)v76;
  *((void *)v75 + 1) = v77;
  uint64_t v78 = v101[7];
  uint64_t v79 = a1 + v78;
  uint64_t v80 = (uint64_t)a2 + v78;
  uint64_t v81 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v77);
  v81(v79, v80, v14);
  uint64_t v82 = v101[8];
  uint64_t v83 = (uint64_t *)(a1 + v82);
  uint64_t v84 = (uint64_t *)((char *)a2 + v82);
  uint64_t v85 = *v84;
  unint64_t v86 = v84[1];
  sub_10019BA8C(*v84, v86);
  *uint64_t v83 = v85;
  v83[1] = v86;
  uint64_t v87 = v101[10];
  *(_DWORD *)(a1 + v101[9]) = *(_DWORD *)((char *)a2 + v101[9]);
  uint64_t v88 = (uint64_t *)(a1 + v87);
  uint64_t v89 = *(uint64_t *)((char *)a2 + v87);
  unint64_t v90 = *(uint64_t *)((char *)a2 + v87 + 8);
  sub_10019BA8C(v89, v90);
  *uint64_t v88 = v89;
  v88[1] = v90;
  uint64_t v91 = v101[11];
  uint64_t v92 = (uint64_t *)(a1 + v91);
  uint64_t v93 = (uint64_t *)((char *)a2 + v91);
  uint64_t v94 = *v93;
  unint64_t v95 = v93[1];
  sub_10019BA8C(*v93, v95);
  *uint64_t v92 = v94;
  v92[1] = v95;
  uint64_t v96 = v101[12];
  uint64_t v97 = v101[13];
  uint64_t v98 = *(void **)((char *)a2 + v96);
  *(void *)(a1 + v96) = v98;
  *(_BYTE *)(a1 + v97) = *((_BYTE *)a2 + v97);
  id v99 = v98;
  return a1;
}

char *sub_1001E8DF4(char *a1, void *a2, int *a3)
{
  uint64_t v7 = a2 + 1;
  uint64_t v6 = *a2;
  uint64_t v8 = *(void *)a1;
  *(void *)a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v8);
  sub_10019DB24((void *)a1 + 1, v7);
  unint64_t v131 = a3;
  uint64_t v132 = (char *)a2;
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14(v11, 1LL, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    uint64_t v17 = sub_100183098(&qword_1006457E8);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  uint64_t v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v19 = v18[5];
  uint64_t v20 = &v10[v19];
  id v21 = &v11[v19];
  int v22 = v14(&v10[v19], 1LL, v12);
  int v23 = v14(v21, 1LL, v12);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v20, v21, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v20, 0LL, 1LL, v12);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
LABEL_12:
    uint64_t v24 = sub_100183098(&qword_1006457E8);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v20, v21, v12);
LABEL_13:
  uint64_t v25 = v18[6];
  uint64_t v26 = &v10[v25];
  uint64_t v27 = &v11[v25];
  int v28 = v14(&v10[v25], 1LL, v12);
  int v29 = v14(v27, 1LL, v12);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v26, v27, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v26, 0LL, 1LL, v12);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v26, v12);
LABEL_18:
    uint64_t v30 = sub_100183098(&qword_1006457E8);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v26, v27, v12);
LABEL_19:
  uint64_t v31 = v18[7];
  uint64_t v32 = &v10[v31];
  uint64_t v33 = &v11[v31];
  int v34 = v14(&v10[v31], 1LL, v12);
  int v35 = v14(v33, 1LL, v12);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v32, v33, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v32, 0LL, 1LL, v12);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v32, v12);
LABEL_24:
    uint64_t v36 = sub_100183098(&qword_1006457E8);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v32, v33, v12);
LABEL_25:
  uint64_t v37 = v18[8];
  uint64_t v38 = &v10[v37];
  uint64_t v39 = &v11[v37];
  int v40 = v14(&v10[v37], 1LL, v12);
  int v41 = v14(v39, 1LL, v12);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v38, v39, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v38, 0LL, 1LL, v12);
      goto LABEL_31;
    }

    goto LABEL_30;
  }

  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v38, v12);
LABEL_30:
    uint64_t v42 = sub_100183098(&qword_1006457E8);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64LL));
    goto LABEL_31;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v38, v39, v12);
LABEL_31:
  uint64_t v43 = v18[9];
  uint64_t v44 = &v10[v43];
  uint64_t v45 = &v11[v43];
  int v46 = v14(&v10[v43], 1LL, v12);
  int v47 = v14(v45, 1LL, v12);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v44, v45, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v44, 0LL, 1LL, v12);
      goto LABEL_37;
    }

    goto LABEL_36;
  }

  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v44, v12);
LABEL_36:
    uint64_t v48 = sub_100183098(&qword_1006457E8);
    memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64LL));
    goto LABEL_37;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v44, v45, v12);
LABEL_37:
  uint64_t v49 = v18[10];
  uint64_t v50 = &v10[v49];
  uint64_t v51 = &v11[v49];
  int v52 = v14(&v10[v49], 1LL, v12);
  int v53 = v14(v51, 1LL, v12);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v50, v51, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v50, 0LL, 1LL, v12);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v50, v12);
LABEL_42:
    uint64_t v54 = sub_100183098(&qword_1006457E8);
    memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64LL));
    goto LABEL_43;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v50, v51, v12);
LABEL_43:
  uint64_t v55 = v18[11];
  uint64_t v56 = &v10[v55];
  int v57 = &v11[v55];
  int v58 = v14(&v10[v55], 1LL, v12);
  int v59 = v14(v57, 1LL, v12);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v56, v57, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v56, 0LL, 1LL, v12);
      goto LABEL_49;
    }

    goto LABEL_48;
  }

  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v56, v12);
LABEL_48:
    uint64_t v60 = sub_100183098(&qword_1006457E8);
    memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64LL));
    goto LABEL_49;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v56, v57, v12);
LABEL_49:
  uint64_t v61 = v18[12];
  uint64_t v62 = &v10[v61];
  uint64_t v63 = &v11[v61];
  int v64 = v14(&v10[v61], 1LL, v12);
  int v65 = v14(v63, 1LL, v12);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v62, v63, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v62, 0LL, 1LL, v12);
      goto LABEL_55;
    }

    goto LABEL_54;
  }

  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v62, v12);
LABEL_54:
    uint64_t v66 = sub_100183098(&qword_1006457E8);
    memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64LL));
    goto LABEL_55;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v62, v63, v12);
LABEL_55:
  v10[v18[13]] = v11[v18[13]];
  uint64_t v67 = v18[14];
  uint64_t v68 = &v10[v67];
  int v69 = &v11[v67];
  int v70 = v14(&v10[v67], 1LL, v12);
  int v71 = v14(v69, 1LL, v12);
  if (v70)
  {
    if (!v71)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v68, v69, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v68, 0LL, 1LL, v12);
      goto LABEL_61;
    }

    goto LABEL_60;
  }

  if (v71)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v68, v12);
LABEL_60:
    uint64_t v72 = sub_100183098(&qword_1006457E8);
    memcpy(v68, v69, *(void *)(*(void *)(v72 - 8) + 64LL));
    goto LABEL_61;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v68, v69, v12);
LABEL_61:
  uint64_t v73 = v18[15];
  uint64_t v74 = &v10[v73];
  uint64_t v75 = &v11[v73];
  int v76 = v14(&v10[v73], 1LL, v12);
  int v77 = v14(v75, 1LL, v12);
  if (v76)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v74, v75, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v74, 0LL, 1LL, v12);
      goto LABEL_67;
    }

    goto LABEL_66;
  }

  if (v77)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v74, v12);
LABEL_66:
    uint64_t v78 = sub_100183098(&qword_1006457E8);
    memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64LL));
    goto LABEL_67;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v74, v75, v12);
LABEL_67:
  uint64_t v79 = v18[16];
  uint64_t v80 = &v10[v79];
  uint64_t v81 = &v11[v79];
  int v82 = v14(&v10[v79], 1LL, v12);
  int v83 = v14(v81, 1LL, v12);
  if (v82)
  {
    if (!v83)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v80, v81, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v80, 0LL, 1LL, v12);
      goto LABEL_73;
    }

    goto LABEL_72;
  }

  if (v83)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v80, v12);
LABEL_72:
    uint64_t v84 = sub_100183098(&qword_1006457E8);
    memcpy(v80, v81, *(void *)(*(void *)(v84 - 8) + 64LL));
    goto LABEL_73;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v80, v81, v12);
LABEL_73:
  uint64_t v85 = v18[17];
  unint64_t v86 = &v10[v85];
  uint64_t v87 = &v11[v85];
  int v88 = v14(&v10[v85], 1LL, v12);
  int v89 = v14(v87, 1LL, v12);
  if (!v88)
  {
    if (!v89)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v86, v87, v12);
      goto LABEL_79;
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v86, v12);
    goto LABEL_78;
  }

  if (v89)
  {
LABEL_78:
    uint64_t v90 = sub_100183098(&qword_1006457E8);
    memcpy(v86, v87, *(void *)(*(void *)(v90 - 8) + 64LL));
    goto LABEL_79;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v86, v87, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v86, 0LL, 1LL, v12);
LABEL_79:
  uint64_t v91 = v18[18];
  uint64_t v92 = &v10[v91];
  uint64_t v93 = &v11[v91];
  int v94 = *(_DWORD *)v93;
  v92[4] = v93[4];
  *(_DWORD *)uint64_t v92 = v94;
  v10[v18[19]] = v11[v18[19]];
  uint64_t v95 = v18[20];
  uint64_t v96 = &v10[v95];
  uint64_t v97 = &v11[v95];
  *(void *)uint64_t v96 = *(void *)v97;
  uint64_t v98 = *((void *)v97 + 1);
  uint64_t v99 = *((void *)v96 + 1);
  *((void *)v96 + 1) = v98;
  swift_bridgeObjectRetain(v98);
  swift_bridgeObjectRelease(v99);
  uint64_t v100 = v18[21];
  uint64_t v101 = &v10[v100];
  uint64_t v102 = &v11[v100];
  *(void *)uint64_t v101 = *(void *)v102;
  uint64_t v103 = *((void *)v102 + 1);
  uint64_t v104 = *((void *)v101 + 1);
  *((void *)v101 + 1) = v103;
  swift_bridgeObjectRetain(v103);
  swift_bridgeObjectRelease(v104);
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(&a1[v131[7]], &v132[v131[7]], v12);
  uint64_t v105 = v131[8];
  unint64_t v106 = (uint64_t *)&a1[v105];
  uint64_t v107 = (uint64_t *)&v132[v105];
  uint64_t v108 = *v107;
  unint64_t v109 = v107[1];
  sub_10019BA8C(*v107, v109);
  uint64_t v110 = *v106;
  unint64_t v111 = v106[1];
  *unint64_t v106 = v108;
  v106[1] = v109;
  sub_100189B20(v110, v111);
  *(_DWORD *)&a1[v131[9]] = *(_DWORD *)&v132[v131[9]];
  uint64_t v112 = v131[10];
  int v113 = (uint64_t *)&a1[v112];
  uint64_t v114 = (uint64_t *)&v132[v112];
  uint64_t v115 = *v114;
  unint64_t v116 = v114[1];
  sub_10019BA8C(*v114, v116);
  uint64_t v117 = *v113;
  unint64_t v118 = v113[1];
  *int v113 = v115;
  v113[1] = v116;
  sub_100189B20(v117, v118);
  uint64_t v119 = v131[11];
  uint64_t v120 = (uint64_t *)&a1[v119];
  uint64_t v121 = (uint64_t *)&v132[v119];
  uint64_t v122 = *v121;
  unint64_t v123 = v121[1];
  sub_10019BA8C(*v121, v123);
  uint64_t v124 = *v120;
  unint64_t v125 = v120[1];
  *uint64_t v120 = v122;
  v120[1] = v123;
  sub_100189B20(v124, v125);
  uint64_t v126 = v131[12];
  unint64_t v127 = *(void **)&a1[v126];
  uint64_t v128 = *(void **)&v132[v126];
  *(void *)&a1[v126] = v128;
  id v129 = v128;

  a1[v131[13]] = v132[v131[13]];
  return a1;
}

uint64_t sub_1001E9908(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v5 = a3[6];
  uint64_t v6 = (char *)(a1 + v5);
  uint64_t v7 = (char *)(a2 + v5);
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1LL, v8))
  {
    uint64_t v11 = sub_100183098(&qword_1006457E8);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0LL, 1LL, v8);
  }

  uint64_t v12 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v13 = v12[5];
  uint64_t v14 = &v6[v13];
  int v15 = &v7[v13];
  if (v10(&v7[v13], 1LL, v8))
  {
    uint64_t v16 = sub_100183098(&qword_1006457E8);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v15, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v14, 0LL, 1LL, v8);
  }

  uint64_t v17 = v12[6];
  uint64_t v18 = &v6[v17];
  uint64_t v19 = &v7[v17];
  if (v10(&v7[v17], 1LL, v8))
  {
    uint64_t v20 = sub_100183098(&qword_1006457E8);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v18, v19, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v18, 0LL, 1LL, v8);
  }

  uint64_t v21 = v12[7];
  int v22 = &v6[v21];
  int v23 = &v7[v21];
  if (v10(&v7[v21], 1LL, v8))
  {
    uint64_t v24 = sub_100183098(&qword_1006457E8);
    memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v22, v23, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v22, 0LL, 1LL, v8);
  }

  uint64_t v25 = v12[8];
  uint64_t v26 = &v6[v25];
  uint64_t v27 = &v7[v25];
  if (v10(&v7[v25], 1LL, v8))
  {
    uint64_t v28 = sub_100183098(&qword_1006457E8);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v26, v27, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v26, 0LL, 1LL, v8);
  }

  uint64_t v29 = v12[9];
  uint64_t v30 = &v6[v29];
  uint64_t v31 = &v7[v29];
  if (v10(&v7[v29], 1LL, v8))
  {
    uint64_t v32 = sub_100183098(&qword_1006457E8);
    memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v30, v31, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v30, 0LL, 1LL, v8);
  }

  uint64_t v33 = v12[10];
  int v34 = &v6[v33];
  int v35 = &v7[v33];
  if (v10(&v7[v33], 1LL, v8))
  {
    uint64_t v36 = sub_100183098(&qword_1006457E8);
    memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v34, v35, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v34, 0LL, 1LL, v8);
  }

  uint64_t v37 = v12[11];
  uint64_t v38 = &v6[v37];
  uint64_t v39 = &v7[v37];
  if (v10(&v7[v37], 1LL, v8))
  {
    uint64_t v40 = sub_100183098(&qword_1006457E8);
    memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v38, v39, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v38, 0LL, 1LL, v8);
  }

  uint64_t v41 = v12[12];
  uint64_t v42 = &v6[v41];
  uint64_t v43 = &v7[v41];
  if (v10(&v7[v41], 1LL, v8))
  {
    uint64_t v44 = sub_100183098(&qword_1006457E8);
    memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v42, v43, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v42, 0LL, 1LL, v8);
  }

  v6[v12[13]] = v7[v12[13]];
  uint64_t v45 = v12[14];
  int v46 = &v6[v45];
  int v47 = &v7[v45];
  if (v10(&v7[v45], 1LL, v8))
  {
    uint64_t v48 = sub_100183098(&qword_1006457E8);
    memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v46, v47, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v46, 0LL, 1LL, v8);
  }

  uint64_t v49 = v12[15];
  uint64_t v50 = &v6[v49];
  uint64_t v51 = &v7[v49];
  if (v10(&v7[v49], 1LL, v8))
  {
    uint64_t v52 = sub_100183098(&qword_1006457E8);
    memcpy(v50, v51, *(void *)(*(void *)(v52 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v50, v51, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v50, 0LL, 1LL, v8);
  }

  uint64_t v53 = v12[16];
  uint64_t v54 = &v6[v53];
  uint64_t v55 = &v7[v53];
  if (v10(&v7[v53], 1LL, v8))
  {
    uint64_t v56 = sub_100183098(&qword_1006457E8);
    memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v54, v55, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v54, 0LL, 1LL, v8);
  }

  uint64_t v57 = v12[17];
  int v58 = &v6[v57];
  int v59 = &v7[v57];
  if (v10(&v7[v57], 1LL, v8))
  {
    uint64_t v60 = sub_100183098(&qword_1006457E8);
    memcpy(v58, v59, *(void *)(*(void *)(v60 - 8) + 64LL));
    uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  }

  else
  {
    uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v61(v58, v59, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v58, 0LL, 1LL, v8);
  }

  uint64_t v62 = v12[18];
  uint64_t v63 = &v6[v62];
  int v64 = &v7[v62];
  *(_DWORD *)uint64_t v63 = *(_DWORD *)v64;
  v63[4] = v64[4];
  v6[v12[19]] = v7[v12[19]];
  *(_OWORD *)&v6[v12[20]] = *(_OWORD *)&v7[v12[20]];
  *(_OWORD *)&v6[v12[21]] = *(_OWORD *)&v7[v12[21]];
  v61((char *)(a1 + a3[7]), (char *)(a2 + a3[7]), v8);
  uint64_t v65 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(_DWORD *)(a1 + v65) = *(_DWORD *)(a2 + v65);
  uint64_t v66 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v66) = *(_OWORD *)(a2 + v66);
  uint64_t v67 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v67) = *(_BYTE *)(a2 + v67);
  return a1;
}

uint64_t *sub_1001E9FEC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  sub_10018709C(a1 + 1);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  a1[5] = a2[5];
  unint64_t v116 = a3;
  uint64_t v117 = a2;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100183098(&qword_1006457E8);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v17 = v16[5];
  uint64_t v18 = &v8[v17];
  uint64_t v19 = &v9[v17];
  int v20 = v12(&v8[v17], 1LL, v10);
  int v21 = v12(v19, 1LL, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v19, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v18, 0LL, 1LL, v10);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_12:
    uint64_t v22 = sub_100183098(&qword_1006457E8);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v18, v19, v10);
LABEL_13:
  uint64_t v23 = v16[6];
  uint64_t v24 = &v8[v23];
  uint64_t v25 = &v9[v23];
  int v26 = v12(&v8[v23], 1LL, v10);
  int v27 = v12(v25, 1LL, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v24, v25, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v24, 0LL, 1LL, v10);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
LABEL_18:
    uint64_t v28 = sub_100183098(&qword_1006457E8);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v24, v25, v10);
LABEL_19:
  uint64_t v29 = v16[7];
  uint64_t v30 = &v8[v29];
  uint64_t v31 = &v9[v29];
  int v32 = v12(&v8[v29], 1LL, v10);
  int v33 = v12(v31, 1LL, v10);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v30, v31, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v30, 0LL, 1LL, v10);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
LABEL_24:
    uint64_t v34 = sub_100183098(&qword_1006457E8);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v30, v31, v10);
LABEL_25:
  uint64_t v35 = v16[8];
  uint64_t v36 = &v8[v35];
  uint64_t v37 = &v9[v35];
  int v38 = v12(&v8[v35], 1LL, v10);
  int v39 = v12(v37, 1LL, v10);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v36, v37, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v36, 0LL, 1LL, v10);
      goto LABEL_31;
    }

    goto LABEL_30;
  }

  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
LABEL_30:
    uint64_t v40 = sub_100183098(&qword_1006457E8);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64LL));
    goto LABEL_31;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v36, v37, v10);
LABEL_31:
  uint64_t v41 = v16[9];
  uint64_t v42 = &v8[v41];
  uint64_t v43 = &v9[v41];
  int v44 = v12(&v8[v41], 1LL, v10);
  int v45 = v12(v43, 1LL, v10);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v42, v43, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v42, 0LL, 1LL, v10);
      goto LABEL_37;
    }

    goto LABEL_36;
  }

  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
LABEL_36:
    uint64_t v46 = sub_100183098(&qword_1006457E8);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64LL));
    goto LABEL_37;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v42, v43, v10);
LABEL_37:
  uint64_t v47 = v16[10];
  uint64_t v48 = &v8[v47];
  uint64_t v49 = &v9[v47];
  int v50 = v12(&v8[v47], 1LL, v10);
  int v51 = v12(v49, 1LL, v10);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v48, v49, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v48, 0LL, 1LL, v10);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
LABEL_42:
    uint64_t v52 = sub_100183098(&qword_1006457E8);
    memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64LL));
    goto LABEL_43;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v48, v49, v10);
LABEL_43:
  uint64_t v53 = v16[11];
  uint64_t v54 = &v8[v53];
  uint64_t v55 = &v9[v53];
  int v56 = v12(&v8[v53], 1LL, v10);
  int v57 = v12(v55, 1LL, v10);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v54, v55, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v54, 0LL, 1LL, v10);
      goto LABEL_49;
    }

    goto LABEL_48;
  }

  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v10);
LABEL_48:
    uint64_t v58 = sub_100183098(&qword_1006457E8);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64LL));
    goto LABEL_49;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v54, v55, v10);
LABEL_49:
  uint64_t v59 = v16[12];
  uint64_t v60 = &v8[v59];
  uint64_t v61 = &v9[v59];
  int v62 = v12(&v8[v59], 1LL, v10);
  int v63 = v12(v61, 1LL, v10);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v60, v61, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v60, 0LL, 1LL, v10);
      goto LABEL_55;
    }

    goto LABEL_54;
  }

  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v60, v10);
LABEL_54:
    uint64_t v64 = sub_100183098(&qword_1006457E8);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64LL));
    goto LABEL_55;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v60, v61, v10);
LABEL_55:
  v8[v16[13]] = v9[v16[13]];
  uint64_t v65 = v16[14];
  uint64_t v66 = &v8[v65];
  uint64_t v67 = &v9[v65];
  int v68 = v12(&v8[v65], 1LL, v10);
  int v69 = v12(v67, 1LL, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v66, v67, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v66, 0LL, 1LL, v10);
      goto LABEL_61;
    }

    goto LABEL_60;
  }

  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v10);
LABEL_60:
    uint64_t v70 = sub_100183098(&qword_1006457E8);
    memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64LL));
    goto LABEL_61;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v66, v67, v10);
LABEL_61:
  uint64_t v71 = v16[15];
  uint64_t v72 = &v8[v71];
  uint64_t v73 = &v9[v71];
  int v74 = v12(&v8[v71], 1LL, v10);
  int v75 = v12(v73, 1LL, v10);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v72, v73, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v72, 0LL, 1LL, v10);
      goto LABEL_67;
    }

    goto LABEL_66;
  }

  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
LABEL_66:
    uint64_t v76 = sub_100183098(&qword_1006457E8);
    memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64LL));
    goto LABEL_67;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v72, v73, v10);
LABEL_67:
  uint64_t v77 = v16[16];
  uint64_t v78 = &v8[v77];
  uint64_t v79 = &v9[v77];
  int v80 = v12(&v8[v77], 1LL, v10);
  int v81 = v12(v79, 1LL, v10);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v78, v79, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v78, 0LL, 1LL, v10);
      goto LABEL_73;
    }

    goto LABEL_72;
  }

  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_72:
    uint64_t v82 = sub_100183098(&qword_1006457E8);
    memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64LL));
    goto LABEL_73;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v78, v79, v10);
LABEL_73:
  uint64_t v83 = v16[17];
  uint64_t v84 = &v8[v83];
  uint64_t v85 = &v9[v83];
  int v86 = v12(&v8[v83], 1LL, v10);
  int v87 = v12(v85, 1LL, v10);
  if (!v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v84, v85, v10);
      goto LABEL_79;
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v84, v10);
    goto LABEL_78;
  }

  if (v87)
  {
LABEL_78:
    uint64_t v88 = sub_100183098(&qword_1006457E8);
    memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64LL));
    goto LABEL_79;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v84, v85, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v84, 0LL, 1LL, v10);
LABEL_79:
  uint64_t v89 = v16[18];
  uint64_t v90 = &v8[v89];
  uint64_t v91 = &v9[v89];
  *(_DWORD *)uint64_t v90 = *(_DWORD *)v91;
  v90[4] = v91[4];
  v8[v16[19]] = v9[v16[19]];
  uint64_t v92 = v16[20];
  uint64_t v93 = &v8[v92];
  int v94 = &v9[v92];
  uint64_t v96 = *(void *)v94;
  uint64_t v95 = *((void *)v94 + 1);
  uint64_t v97 = *((void *)v93 + 1);
  *(void *)uint64_t v93 = v96;
  *((void *)v93 + 1) = v95;
  swift_bridgeObjectRelease(v97);
  uint64_t v98 = v16[21];
  uint64_t v99 = &v8[v98];
  uint64_t v100 = &v9[v98];
  uint64_t v102 = *(void *)v100;
  uint64_t v101 = *((void *)v100 + 1);
  uint64_t v103 = *((void *)v99 + 1);
  *(void *)uint64_t v99 = v102;
  *((void *)v99 + 1) = v101;
  swift_bridgeObjectRelease(v103);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 40))((uint64_t)a1 + v116[7], (uint64_t)v117 + v116[7], v10);
  uint64_t v104 = v116[8];
  uint64_t v105 = *(uint64_t *)((char *)a1 + v104);
  unint64_t v106 = *(uint64_t *)((char *)a1 + v104 + 8);
  *(_OWORD *)((char *)a1 + v104) = *(_OWORD *)((char *)v117 + v104);
  sub_100189B20(v105, v106);
  uint64_t v107 = v116[10];
  *(_DWORD *)((char *)a1 + v116[9]) = *(_DWORD *)((char *)v117 + v116[9]);
  uint64_t v108 = *(uint64_t *)((char *)a1 + v107);
  unint64_t v109 = *(uint64_t *)((char *)a1 + v107 + 8);
  *(_OWORD *)((char *)a1 + v107) = *(_OWORD *)((char *)v117 + v107);
  sub_100189B20(v108, v109);
  uint64_t v110 = v116[11];
  uint64_t v111 = *(uint64_t *)((char *)a1 + v110);
  unint64_t v112 = *(uint64_t *)((char *)a1 + v110 + 8);
  *(_OWORD *)((char *)a1 + v110) = *(_OWORD *)((char *)v117 + v110);
  sub_100189B20(v111, v112);
  uint64_t v113 = v116[12];
  uint64_t v114 = *(void **)((char *)a1 + v113);
  *(uint64_t *)((char *)a1 + v113) = *(uint64_t *)((char *)v117 + v113);

  *((_BYTE *)a1 + v116[13]) = *((_BYTE *)v117 + v116[13]);
  return a1;
}

uint64_t sub_1001EAAAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001EAAB8);
}

uint64_t sub_1001EAAB8(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for SDAuthenticationSessionMetrics(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 24);
    }

    else
    {
      uint64_t v10 = type metadata accessor for Date(0LL);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 28);
    }

    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }

uint64_t sub_1001EAB58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001EAB64);
}

char *sub_1001EAB64(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for SDAuthenticationSessionMetrics(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 24);
    }

    else
    {
      uint64_t v10 = type metadata accessor for Date(0LL);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 28);
    }

    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }

  return result;
}

uint64_t sub_1001EAC00(uint64_t a1)
{
  v5[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v5[1] = "(";
  uint64_t result = type metadata accessor for SDAuthenticationSessionMetrics(319LL);
  if (v3 <= 0x3F)
  {
    v5[2] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for Date(319LL);
    if (v4 <= 0x3F)
    {
      v5[3] = *(void *)(result - 8) + 64LL;
      void v5[4] = &unk_1004CE490;
      v5[5] = (char *)&value witness table for Builtin.Int32 + 64;
      v5[6] = &unk_1004CE490;
      v5[7] = &unk_1004CE490;
      v5[8] = &unk_1004CE4C0;
      void v5[9] = &unk_1004CE4D8;
      swift_initStructMetadata(a1, 256LL, 10LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

void *sub_1001EACCC(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v6 = (void *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    uint64_t v6 = a1;
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Date(0LL);
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain(v4);
    if (v12(v9, 1LL, v10))
    {
      uint64_t v13 = sub_100183098(&qword_1006457E8);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
    }

    int v14 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
    uint64_t v15 = v14[5];
    uint64_t v16 = &v8[v15];
    uint64_t v17 = &v9[v15];
    if (v12(&v9[v15], 1LL, v10))
    {
      uint64_t v18 = sub_100183098(&qword_1006457E8);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v17, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0LL, 1LL, v10);
    }

    uint64_t v19 = v14[6];
    int v20 = &v8[v19];
    int v21 = &v9[v19];
    if (v12(&v9[v19], 1LL, v10))
    {
      uint64_t v22 = sub_100183098(&qword_1006457E8);
      memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v20, v21, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v20, 0LL, 1LL, v10);
    }

    uint64_t v23 = v14[7];
    uint64_t v24 = &v8[v23];
    uint64_t v25 = &v9[v23];
    if (v12(&v9[v23], 1LL, v10))
    {
      uint64_t v26 = sub_100183098(&qword_1006457E8);
      memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v24, v25, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v24, 0LL, 1LL, v10);
    }

    uint64_t v27 = v14[8];
    uint64_t v28 = &v8[v27];
    uint64_t v29 = &v9[v27];
    if (v12(&v9[v27], 1LL, v10))
    {
      uint64_t v30 = sub_100183098(&qword_1006457E8);
      memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v28, v29, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v28, 0LL, 1LL, v10);
    }

    uint64_t v31 = v14[9];
    int v32 = &v8[v31];
    int v33 = &v9[v31];
    if (v12(&v9[v31], 1LL, v10))
    {
      uint64_t v34 = sub_100183098(&qword_1006457E8);
      memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v32, v33, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v32, 0LL, 1LL, v10);
    }

    uint64_t v35 = v14[10];
    uint64_t v36 = &v8[v35];
    uint64_t v37 = &v9[v35];
    if (v12(&v9[v35], 1LL, v10))
    {
      uint64_t v38 = sub_100183098(&qword_1006457E8);
      memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v36, v37, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v36, 0LL, 1LL, v10);
    }

    uint64_t v39 = v14[11];
    uint64_t v40 = &v8[v39];
    uint64_t v41 = &v9[v39];
    if (v12(&v9[v39], 1LL, v10))
    {
      uint64_t v42 = sub_100183098(&qword_1006457E8);
      memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v40, v41, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v40, 0LL, 1LL, v10);
    }

    uint64_t v43 = v14[12];
    int v44 = &v8[v43];
    int v45 = &v9[v43];
    if (v12(&v9[v43], 1LL, v10))
    {
      uint64_t v46 = sub_100183098(&qword_1006457E8);
      memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v44, v45, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v44, 0LL, 1LL, v10);
    }

    v8[v14[13]] = v9[v14[13]];
    uint64_t v47 = v14[14];
    uint64_t v48 = &v8[v47];
    uint64_t v49 = &v9[v47];
    if (v12(&v9[v47], 1LL, v10))
    {
      uint64_t v50 = sub_100183098(&qword_1006457E8);
      memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v48, v49, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v48, 0LL, 1LL, v10);
    }

    uint64_t v51 = v14[15];
    uint64_t v52 = &v8[v51];
    uint64_t v53 = &v9[v51];
    if (v12(&v9[v51], 1LL, v10))
    {
      uint64_t v54 = sub_100183098(&qword_1006457E8);
      memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v52, v53, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v52, 0LL, 1LL, v10);
    }

    uint64_t v55 = v14[16];
    int v56 = &v8[v55];
    int v57 = &v9[v55];
    if (v12(&v9[v55], 1LL, v10))
    {
      uint64_t v58 = sub_100183098(&qword_1006457E8);
      memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v56, v57, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v56, 0LL, 1LL, v10);
    }

    uint64_t v59 = v14[17];
    uint64_t v60 = &v8[v59];
    uint64_t v61 = &v9[v59];
    if (v12(&v9[v59], 1LL, v10))
    {
      uint64_t v62 = sub_100183098(&qword_1006457E8);
      memcpy(v60, v61, *(void *)(*(void *)(v62 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v60, v61, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v60, 0LL, 1LL, v10);
    }

    uint64_t v63 = v14[18];
    uint64_t v64 = &v8[v63];
    uint64_t v65 = &v9[v63];
    *(_DWORD *)uint64_t v64 = *(_DWORD *)v65;
    v64[4] = v65[4];
    v8[v14[19]] = v9[v14[19]];
    uint64_t v66 = v14[20];
    uint64_t v67 = &v8[v66];
    int v68 = &v9[v66];
    uint64_t v69 = *((void *)v68 + 1);
    *(void *)uint64_t v67 = *(void *)v68;
    *((void *)v67 + 1) = v69;
    uint64_t v70 = v14[21];
    uint64_t v71 = &v8[v70];
    uint64_t v72 = &v9[v70];
    uint64_t v73 = *((void *)v72 + 1);
    *(void *)uint64_t v71 = *(void *)v72;
    *((void *)v71 + 1) = v73;
    uint64_t v74 = a3[6];
    int v75 = (char *)v6 + v74;
    uint64_t v76 = (char *)a2 + v74;
    __int128 v77 = *(_OWORD *)((char *)a2 + v74 + 24);
    *(_OWORD *)((char *)v6 + v74 + 24) = v77;
    uint64_t v78 = v77;
    uint64_t v79 = **(void (***)(char *, char *, uint64_t))(v77 - 8);
    swift_bridgeObjectRetain(v69);
    swift_bridgeObjectRetain(v73);
    v79(v75, v76, v78);
    uint64_t v80 = a3[7];
    int v81 = (void *)((char *)v6 + v80);
    uint64_t v82 = (void *)((char *)a2 + v80);
    uint64_t v83 = *v82;
    unint64_t v84 = v82[1];
    sub_10019BA8C(*v82, v84);
    *int v81 = v83;
    v81[1] = v84;
    uint64_t v85 = a3[9];
    *(_DWORD *)((char *)v6 + a3[8]) = *(_DWORD *)((char *)a2 + a3[8]);
    int v86 = (void *)((char *)v6 + v85);
    uint64_t v87 = *(void *)((char *)a2 + v85);
    unint64_t v88 = *(void *)((char *)a2 + v85 + 8);
    sub_10019BA8C(v87, v88);
    uint64_t *v86 = v87;
    v86[1] = v88;
    uint64_t v89 = a3[10];
    uint64_t v90 = a3[11];
    uint64_t v91 = *(void **)((char *)a2 + v89);
    *(void *)((char *)v6 + v89) = v91;
    *((_BYTE *)v6 + v90) = *((_BYTE *)a2 + v90);
    id v92 = v91;
  }

  return v6;
}

void sub_1001EB420(void *a1, int *a2)
{
  uint64_t v4 = (char *)a1 + a2[5];
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v9 = &v4[v8[5]];
  if (!v7(v9, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  uint64_t v10 = &v4[v8[6]];
  if (!v7(v10, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  }
  uint64_t v11 = &v4[v8[7]];
  if (!v7(v11, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  }
  uint64_t v12 = &v4[v8[8]];
  if (!v7(v12, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  }
  uint64_t v13 = &v4[v8[9]];
  if (!v7(v13, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v13, v5);
  }
  int v14 = &v4[v8[10]];
  if (!v7(v14, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v14, v5);
  }
  uint64_t v15 = &v4[v8[11]];
  if (!v7(v15, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  }
  uint64_t v16 = &v4[v8[12]];
  if (!v7(v16, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v16, v5);
  }
  uint64_t v17 = &v4[v8[14]];
  if (!v7(v17, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v17, v5);
  }
  uint64_t v18 = &v4[v8[15]];
  if (!v7(v18, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v18, v5);
  }
  uint64_t v19 = &v4[v8[16]];
  if (!v7(v19, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v19, v5);
  }
  int v20 = &v4[v8[17]];
  if (!v7(v20, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v20, v5);
  }
  swift_bridgeObjectRelease(*(void *)&v4[v8[20] + 8]);
  swift_bridgeObjectRelease(*(void *)&v4[v8[21] + 8]);
  sub_10018709C((void *)((char *)a1 + a2[6]));
  sub_100189B20(*(void *)((char *)a1 + a2[7]), *(void *)((char *)a1 + a2[7] + 8));
  sub_100189B20(*(void *)((char *)a1 + a2[9]), *(void *)((char *)a1 + a2[9] + 8));
}

void *sub_1001EB710(void *a1, void *a2, int *a3)
{
  uint64_t v5 = *a2;
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain(v5);
  if (v11(v8, 1LL, v9))
  {
    uint64_t v12 = sub_100183098(&qword_1006457E8);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  uint64_t v13 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v14 = v13[5];
  uint64_t v15 = &v7[v14];
  uint64_t v16 = &v8[v14];
  if (v11(&v8[v14], 1LL, v9))
  {
    uint64_t v17 = sub_100183098(&qword_1006457E8);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v15, v16, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v15, 0LL, 1LL, v9);
  }

  uint64_t v18 = v13[6];
  uint64_t v19 = &v7[v18];
  int v20 = &v8[v18];
  if (v11(&v8[v18], 1LL, v9))
  {
    uint64_t v21 = sub_100183098(&qword_1006457E8);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v19, v20, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v19, 0LL, 1LL, v9);
  }

  uint64_t v22 = v13[7];
  uint64_t v23 = &v7[v22];
  uint64_t v24 = &v8[v22];
  if (v11(&v8[v22], 1LL, v9))
  {
    uint64_t v25 = sub_100183098(&qword_1006457E8);
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v23, v24, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v23, 0LL, 1LL, v9);
  }

  uint64_t v26 = v13[8];
  uint64_t v27 = &v7[v26];
  uint64_t v28 = &v8[v26];
  if (v11(&v8[v26], 1LL, v9))
  {
    uint64_t v29 = sub_100183098(&qword_1006457E8);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v27, v28, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v27, 0LL, 1LL, v9);
  }

  uint64_t v30 = v13[9];
  uint64_t v31 = &v7[v30];
  int v32 = &v8[v30];
  if (v11(&v8[v30], 1LL, v9))
  {
    uint64_t v33 = sub_100183098(&qword_1006457E8);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v31, v32, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v31, 0LL, 1LL, v9);
  }

  uint64_t v34 = v13[10];
  uint64_t v35 = &v7[v34];
  uint64_t v36 = &v8[v34];
  if (v11(&v8[v34], 1LL, v9))
  {
    uint64_t v37 = sub_100183098(&qword_1006457E8);
    memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v35, v36, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v35, 0LL, 1LL, v9);
  }

  uint64_t v38 = v13[11];
  uint64_t v39 = &v7[v38];
  uint64_t v40 = &v8[v38];
  if (v11(&v8[v38], 1LL, v9))
  {
    uint64_t v41 = sub_100183098(&qword_1006457E8);
    memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v39, v40, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v39, 0LL, 1LL, v9);
  }

  uint64_t v42 = v13[12];
  uint64_t v43 = &v7[v42];
  int v44 = &v8[v42];
  if (v11(&v8[v42], 1LL, v9))
  {
    uint64_t v45 = sub_100183098(&qword_1006457E8);
    memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v43, v44, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v43, 0LL, 1LL, v9);
  }

  v7[v13[13]] = v8[v13[13]];
  uint64_t v46 = v13[14];
  uint64_t v47 = &v7[v46];
  uint64_t v48 = &v8[v46];
  if (v11(&v8[v46], 1LL, v9))
  {
    uint64_t v49 = sub_100183098(&qword_1006457E8);
    memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v47, v48, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v47, 0LL, 1LL, v9);
  }

  uint64_t v50 = v13[15];
  uint64_t v51 = &v7[v50];
  uint64_t v52 = &v8[v50];
  if (v11(&v8[v50], 1LL, v9))
  {
    uint64_t v53 = sub_100183098(&qword_1006457E8);
    memcpy(v51, v52, *(void *)(*(void *)(v53 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v51, v52, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v51, 0LL, 1LL, v9);
  }

  uint64_t v54 = v13[16];
  uint64_t v55 = &v7[v54];
  int v56 = &v8[v54];
  if (v11(&v8[v54], 1LL, v9))
  {
    uint64_t v57 = sub_100183098(&qword_1006457E8);
    memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v55, v56, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v55, 0LL, 1LL, v9);
  }

  uint64_t v58 = v13[17];
  uint64_t v59 = &v7[v58];
  uint64_t v60 = &v8[v58];
  if (v11(&v8[v58], 1LL, v9))
  {
    uint64_t v61 = sub_100183098(&qword_1006457E8);
    memcpy(v59, v60, *(void *)(*(void *)(v61 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v59, v60, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v59, 0LL, 1LL, v9);
  }

  uint64_t v62 = v13[18];
  uint64_t v63 = &v7[v62];
  uint64_t v64 = &v8[v62];
  *(_DWORD *)uint64_t v63 = *(_DWORD *)v64;
  v63[4] = v64[4];
  v7[v13[19]] = v8[v13[19]];
  uint64_t v65 = v13[20];
  uint64_t v66 = &v7[v65];
  uint64_t v67 = &v8[v65];
  uint64_t v68 = *((void *)v67 + 1);
  *(void *)uint64_t v66 = *(void *)v67;
  *((void *)v66 + 1) = v68;
  uint64_t v69 = v13[21];
  uint64_t v70 = &v7[v69];
  uint64_t v71 = &v8[v69];
  uint64_t v72 = *((void *)v71 + 1);
  *(void *)uint64_t v70 = *(void *)v71;
  *((void *)v70 + 1) = v72;
  uint64_t v73 = a3[6];
  uint64_t v74 = (char *)a1 + v73;
  int v75 = (char *)a2 + v73;
  __int128 v76 = *(_OWORD *)((char *)a2 + v73 + 24);
  *(_OWORD *)((char *)a1 + v73 + 24) = v76;
  uint64_t v77 = v76;
  uint64_t v78 = **(void (***)(char *, char *, uint64_t))(v76 - 8);
  swift_bridgeObjectRetain(v68);
  swift_bridgeObjectRetain(v72);
  v78(v74, v75, v77);
  uint64_t v79 = a3[7];
  uint64_t v80 = (void *)((char *)a1 + v79);
  int v81 = (void *)((char *)a2 + v79);
  uint64_t v82 = *v81;
  unint64_t v83 = v81[1];
  sub_10019BA8C(*v81, v83);
  *uint64_t v80 = v82;
  v80[1] = v83;
  uint64_t v84 = a3[9];
  *(_DWORD *)((char *)a1 + a3[8]) = *(_DWORD *)((char *)a2 + a3[8]);
  uint64_t v85 = (void *)((char *)a1 + v84);
  uint64_t v86 = *(void *)((char *)a2 + v84);
  unint64_t v87 = *(void *)((char *)a2 + v84 + 8);
  sub_10019BA8C(v86, v87);
  *uint64_t v85 = v86;
  v85[1] = v87;
  uint64_t v88 = a3[10];
  uint64_t v89 = a3[11];
  uint64_t v90 = *(void **)((char *)a2 + v88);
  *(void *)((char *)a1 + v8_Block_object_dispose(va, 8) = v90;
  *((_BYTE *)a1 + v89) = *((_BYTE *)a2 + v89);
  id v91 = v90;
  return a1;
}

void *sub_1001EBE3C(void *a1, void *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  unint64_t v123 = a3;
  uint64_t v124 = a2;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1LL, v11);
  int v15 = v13(v10, 1LL, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    uint64_t v16 = sub_100183098(&qword_1006457E8);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
LABEL_7:
  uint64_t v17 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v18 = v17[5];
  uint64_t v19 = &v9[v18];
  int v20 = &v10[v18];
  int v21 = v13(&v9[v18], 1LL, v11);
  int v22 = v13(v20, 1LL, v11);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v19, v20, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v19, 0LL, 1LL, v11);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v11);
LABEL_12:
    uint64_t v23 = sub_100183098(&qword_1006457E8);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v19, v20, v11);
LABEL_13:
  uint64_t v24 = v17[6];
  uint64_t v25 = &v9[v24];
  uint64_t v26 = &v10[v24];
  int v27 = v13(&v9[v24], 1LL, v11);
  int v28 = v13(v26, 1LL, v11);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v25, v26, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v25, 0LL, 1LL, v11);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v25, v11);
LABEL_18:
    uint64_t v29 = sub_100183098(&qword_1006457E8);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v25, v26, v11);
LABEL_19:
  uint64_t v30 = v17[7];
  uint64_t v31 = &v9[v30];
  int v32 = &v10[v30];
  int v33 = v13(&v9[v30], 1LL, v11);
  int v34 = v13(v32, 1LL, v11);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v31, v32, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v31, 0LL, 1LL, v11);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v31, v11);
LABEL_24:
    uint64_t v35 = sub_100183098(&qword_1006457E8);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v31, v32, v11);
LABEL_25:
  uint64_t v36 = v17[8];
  uint64_t v37 = &v9[v36];
  uint64_t v38 = &v10[v36];
  int v39 = v13(&v9[v36], 1LL, v11);
  int v40 = v13(v38, 1LL, v11);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v37, v38, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v37, 0LL, 1LL, v11);
      goto LABEL_31;
    }

    goto LABEL_30;
  }

  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v37, v11);
LABEL_30:
    uint64_t v41 = sub_100183098(&qword_1006457E8);
    memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64LL));
    goto LABEL_31;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v37, v38, v11);
LABEL_31:
  uint64_t v42 = v17[9];
  uint64_t v43 = &v9[v42];
  int v44 = &v10[v42];
  int v45 = v13(&v9[v42], 1LL, v11);
  int v46 = v13(v44, 1LL, v11);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v43, v44, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v43, 0LL, 1LL, v11);
      goto LABEL_37;
    }

    goto LABEL_36;
  }

  if (v46)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v43, v11);
LABEL_36:
    uint64_t v47 = sub_100183098(&qword_1006457E8);
    memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64LL));
    goto LABEL_37;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v43, v44, v11);
LABEL_37:
  uint64_t v48 = v17[10];
  uint64_t v49 = &v9[v48];
  uint64_t v50 = &v10[v48];
  int v51 = v13(&v9[v48], 1LL, v11);
  int v52 = v13(v50, 1LL, v11);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v49, v50, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v49, 0LL, 1LL, v11);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v49, v11);
LABEL_42:
    uint64_t v53 = sub_100183098(&qword_1006457E8);
    memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64LL));
    goto LABEL_43;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v49, v50, v11);
LABEL_43:
  uint64_t v54 = v17[11];
  uint64_t v55 = &v9[v54];
  int v56 = &v10[v54];
  int v57 = v13(&v9[v54], 1LL, v11);
  int v58 = v13(v56, 1LL, v11);
  if (v57)
  {
    if (!v58)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v55, v56, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v55, 0LL, 1LL, v11);
      goto LABEL_49;
    }

    goto LABEL_48;
  }

  if (v58)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v55, v11);
LABEL_48:
    uint64_t v59 = sub_100183098(&qword_1006457E8);
    memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64LL));
    goto LABEL_49;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v55, v56, v11);
LABEL_49:
  uint64_t v60 = v17[12];
  uint64_t v61 = &v9[v60];
  uint64_t v62 = &v10[v60];
  int v63 = v13(&v9[v60], 1LL, v11);
  int v64 = v13(v62, 1LL, v11);
  if (v63)
  {
    if (!v64)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v61, v62, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v61, 0LL, 1LL, v11);
      goto LABEL_55;
    }

    goto LABEL_54;
  }

  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v61, v11);
LABEL_54:
    uint64_t v65 = sub_100183098(&qword_1006457E8);
    memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64LL));
    goto LABEL_55;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v61, v62, v11);
LABEL_55:
  v9[v17[13]] = v10[v17[13]];
  uint64_t v66 = v17[14];
  uint64_t v67 = &v9[v66];
  uint64_t v68 = &v10[v66];
  int v69 = v13(&v9[v66], 1LL, v11);
  int v70 = v13(v68, 1LL, v11);
  if (v69)
  {
    if (!v70)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v67, v68, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v67, 0LL, 1LL, v11);
      goto LABEL_61;
    }

    goto LABEL_60;
  }

  if (v70)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v67, v11);
LABEL_60:
    uint64_t v71 = sub_100183098(&qword_1006457E8);
    memcpy(v67, v68, *(void *)(*(void *)(v71 - 8) + 64LL));
    goto LABEL_61;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v67, v68, v11);
LABEL_61:
  uint64_t v72 = v17[15];
  uint64_t v73 = &v9[v72];
  uint64_t v74 = &v10[v72];
  int v75 = v13(&v9[v72], 1LL, v11);
  int v76 = v13(v74, 1LL, v11);
  if (v75)
  {
    if (!v76)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v73, v74, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v73, 0LL, 1LL, v11);
      goto LABEL_67;
    }

    goto LABEL_66;
  }

  if (v76)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v73, v11);
LABEL_66:
    uint64_t v77 = sub_100183098(&qword_1006457E8);
    memcpy(v73, v74, *(void *)(*(void *)(v77 - 8) + 64LL));
    goto LABEL_67;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v73, v74, v11);
LABEL_67:
  uint64_t v78 = v17[16];
  uint64_t v79 = &v9[v78];
  uint64_t v80 = &v10[v78];
  int v81 = v13(&v9[v78], 1LL, v11);
  int v82 = v13(v80, 1LL, v11);
  if (v81)
  {
    if (!v82)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v79, v80, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v79, 0LL, 1LL, v11);
      goto LABEL_73;
    }

    goto LABEL_72;
  }

  if (v82)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v79, v11);
LABEL_72:
    uint64_t v83 = sub_100183098(&qword_1006457E8);
    memcpy(v79, v80, *(void *)(*(void *)(v83 - 8) + 64LL));
    goto LABEL_73;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v79, v80, v11);
LABEL_73:
  uint64_t v84 = v17[17];
  uint64_t v85 = &v9[v84];
  uint64_t v86 = &v10[v84];
  int v87 = v13(&v9[v84], 1LL, v11);
  int v88 = v13(v86, 1LL, v11);
  if (!v87)
  {
    if (!v88)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v85, v86, v11);
      goto LABEL_79;
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v85, v11);
    goto LABEL_78;
  }

  if (v88)
  {
LABEL_78:
    uint64_t v89 = sub_100183098(&qword_1006457E8);
    memcpy(v85, v86, *(void *)(*(void *)(v89 - 8) + 64LL));
    goto LABEL_79;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v85, v86, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v85, 0LL, 1LL, v11);
LABEL_79:
  uint64_t v90 = v17[18];
  id v91 = &v9[v90];
  id v92 = &v10[v90];
  int v93 = *(_DWORD *)v92;
  v91[4] = v92[4];
  *(_DWORD *)id v91 = v93;
  v9[v17[19]] = v10[v17[19]];
  uint64_t v94 = v17[20];
  uint64_t v95 = &v9[v94];
  uint64_t v96 = &v10[v94];
  *(void *)uint64_t v95 = *(void *)v96;
  uint64_t v97 = *((void *)v96 + 1);
  uint64_t v98 = *((void *)v95 + 1);
  *((void *)v95 + 1) = v97;
  swift_bridgeObjectRetain(v97);
  swift_bridgeObjectRelease(v98);
  uint64_t v99 = v17[21];
  uint64_t v100 = &v9[v99];
  uint64_t v101 = &v10[v99];
  *(void *)uint64_t v100 = *(void *)v101;
  uint64_t v102 = *((void *)v101 + 1);
  uint64_t v103 = *((void *)v100 + 1);
  *((void *)v100 + 1) = v102;
  swift_bridgeObjectRetain(v102);
  swift_bridgeObjectRelease(v103);
  sub_10019DB24((void *)((char *)a1 + v123[6]), (void *)((char *)v124 + v123[6]));
  uint64_t v104 = v123[7];
  uint64_t v105 = (void *)((char *)a1 + v104);
  unint64_t v106 = (void *)((char *)v124 + v104);
  uint64_t v107 = *v106;
  unint64_t v108 = v106[1];
  sub_10019BA8C(*v106, v108);
  uint64_t v109 = *v105;
  unint64_t v110 = v105[1];
  *uint64_t v105 = v107;
  v105[1] = v108;
  sub_100189B20(v109, v110);
  *(_DWORD *)((char *)a1 + v123[8]) = *(_DWORD *)((char *)v124 + v123[8]);
  uint64_t v111 = v123[9];
  unint64_t v112 = (void *)((char *)a1 + v111);
  uint64_t v113 = (void *)((char *)v124 + v111);
  uint64_t v114 = *v113;
  unint64_t v115 = v113[1];
  sub_10019BA8C(*v113, v115);
  uint64_t v116 = *v112;
  unint64_t v117 = v112[1];
  *unint64_t v112 = v114;
  v112[1] = v115;
  sub_100189B20(v116, v117);
  uint64_t v118 = v123[10];
  uint64_t v119 = *(void **)((char *)a1 + v118);
  uint64_t v120 = *(void **)((char *)v124 + v118);
  *(void *)((char *)a1 + v11_Block_object_dispose(va, 8) = v120;
  id v121 = v120;

  *((_BYTE *)a1 + v123[11]) = *((_BYTE *)v124 + v123[11]);
  return a1;
}

void *sub_1001EC90C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v5 = a3[5];
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1LL, v8))
  {
    uint64_t v11 = sub_100183098(&qword_1006457E8);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0LL, 1LL, v8);
  }

  uint64_t v12 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v13 = v12[5];
  int v14 = &v6[v13];
  int v15 = &v7[v13];
  if (v10(&v7[v13], 1LL, v8))
  {
    uint64_t v16 = sub_100183098(&qword_1006457E8);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v15, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v14, 0LL, 1LL, v8);
  }

  uint64_t v17 = v12[6];
  uint64_t v18 = &v6[v17];
  uint64_t v19 = &v7[v17];
  if (v10(&v7[v17], 1LL, v8))
  {
    uint64_t v20 = sub_100183098(&qword_1006457E8);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v18, v19, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v18, 0LL, 1LL, v8);
  }

  uint64_t v21 = v12[7];
  int v22 = &v6[v21];
  uint64_t v23 = &v7[v21];
  if (v10(&v7[v21], 1LL, v8))
  {
    uint64_t v24 = sub_100183098(&qword_1006457E8);
    memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v22, v23, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v22, 0LL, 1LL, v8);
  }

  uint64_t v25 = v12[8];
  uint64_t v26 = &v6[v25];
  int v27 = &v7[v25];
  if (v10(&v7[v25], 1LL, v8))
  {
    uint64_t v28 = sub_100183098(&qword_1006457E8);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v26, v27, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v26, 0LL, 1LL, v8);
  }

  uint64_t v29 = v12[9];
  uint64_t v30 = &v6[v29];
  uint64_t v31 = &v7[v29];
  if (v10(&v7[v29], 1LL, v8))
  {
    uint64_t v32 = sub_100183098(&qword_1006457E8);
    memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v30, v31, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v30, 0LL, 1LL, v8);
  }

  uint64_t v33 = v12[10];
  int v34 = &v6[v33];
  uint64_t v35 = &v7[v33];
  if (v10(&v7[v33], 1LL, v8))
  {
    uint64_t v36 = sub_100183098(&qword_1006457E8);
    memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v34, v35, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v34, 0LL, 1LL, v8);
  }

  uint64_t v37 = v12[11];
  uint64_t v38 = &v6[v37];
  int v39 = &v7[v37];
  if (v10(&v7[v37], 1LL, v8))
  {
    uint64_t v40 = sub_100183098(&qword_1006457E8);
    memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v38, v39, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v38, 0LL, 1LL, v8);
  }

  uint64_t v41 = v12[12];
  uint64_t v42 = &v6[v41];
  uint64_t v43 = &v7[v41];
  if (v10(&v7[v41], 1LL, v8))
  {
    uint64_t v44 = sub_100183098(&qword_1006457E8);
    memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v42, v43, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v42, 0LL, 1LL, v8);
  }

  v6[v12[13]] = v7[v12[13]];
  uint64_t v45 = v12[14];
  int v46 = &v6[v45];
  uint64_t v47 = &v7[v45];
  if (v10(&v7[v45], 1LL, v8))
  {
    uint64_t v48 = sub_100183098(&qword_1006457E8);
    memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v46, v47, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v46, 0LL, 1LL, v8);
  }

  uint64_t v49 = v12[15];
  uint64_t v50 = &v6[v49];
  int v51 = &v7[v49];
  if (v10(&v7[v49], 1LL, v8))
  {
    uint64_t v52 = sub_100183098(&qword_1006457E8);
    memcpy(v50, v51, *(void *)(*(void *)(v52 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v50, v51, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v50, 0LL, 1LL, v8);
  }

  uint64_t v53 = v12[16];
  uint64_t v54 = &v6[v53];
  uint64_t v55 = &v7[v53];
  if (v10(&v7[v53], 1LL, v8))
  {
    uint64_t v56 = sub_100183098(&qword_1006457E8);
    memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v54, v55, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v54, 0LL, 1LL, v8);
  }

  uint64_t v57 = v12[17];
  int v58 = &v6[v57];
  uint64_t v59 = &v7[v57];
  if (v10(&v7[v57], 1LL, v8))
  {
    uint64_t v60 = sub_100183098(&qword_1006457E8);
    memcpy(v58, v59, *(void *)(*(void *)(v60 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v58, v59, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v58, 0LL, 1LL, v8);
  }

  uint64_t v61 = v12[18];
  uint64_t v62 = &v6[v61];
  int v63 = &v7[v61];
  *(_DWORD *)uint64_t v62 = *(_DWORD *)v63;
  void v62[4] = v63[4];
  v6[v12[19]] = v7[v12[19]];
  *(_OWORD *)&v6[v12[20]] = *(_OWORD *)&v7[v12[20]];
  *(_OWORD *)&v6[v12[21]] = *(_OWORD *)&v7[v12[21]];
  uint64_t v64 = a3[6];
  uint64_t v65 = a3[7];
  uint64_t v66 = (char *)a1 + v64;
  uint64_t v67 = (char *)a2 + v64;
  __int128 v68 = *((_OWORD *)v67 + 1);
  *(_OWORD *)uint64_t v66 = *(_OWORD *)v67;
  *((_OWORD *)v66 + 1) = v68;
  *((void *)v66 + 4) = *((void *)v67 + 4);
  *(_OWORD *)((char *)a1 + v65) = *(_OWORD *)((char *)a2 + v65);
  uint64_t v69 = a3[9];
  *(_DWORD *)((char *)a1 + a3[8]) = *(_DWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v69) = *(_OWORD *)((char *)a2 + v69);
  uint64_t v70 = a3[11];
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  *((_BYTE *)a1 + v70) = *((_BYTE *)a2 + v70);
  return a1;
}

void *sub_1001ECFD0(void *a1, void *a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  unint64_t v117 = a3;
  uint64_t v118 = a2;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100183098(&qword_1006457E8);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v17 = v16[5];
  uint64_t v18 = &v8[v17];
  uint64_t v19 = &v9[v17];
  int v20 = v12(&v8[v17], 1LL, v10);
  int v21 = v12(v19, 1LL, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v19, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v18, 0LL, 1LL, v10);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_12:
    uint64_t v22 = sub_100183098(&qword_1006457E8);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v18, v19, v10);
LABEL_13:
  uint64_t v23 = v16[6];
  uint64_t v24 = &v8[v23];
  uint64_t v25 = &v9[v23];
  int v26 = v12(&v8[v23], 1LL, v10);
  int v27 = v12(v25, 1LL, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v24, v25, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v24, 0LL, 1LL, v10);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
LABEL_18:
    uint64_t v28 = sub_100183098(&qword_1006457E8);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v24, v25, v10);
LABEL_19:
  uint64_t v29 = v16[7];
  uint64_t v30 = &v8[v29];
  uint64_t v31 = &v9[v29];
  int v32 = v12(&v8[v29], 1LL, v10);
  int v33 = v12(v31, 1LL, v10);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v30, v31, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v30, 0LL, 1LL, v10);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
LABEL_24:
    uint64_t v34 = sub_100183098(&qword_1006457E8);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v30, v31, v10);
LABEL_25:
  uint64_t v35 = v16[8];
  uint64_t v36 = &v8[v35];
  uint64_t v37 = &v9[v35];
  int v38 = v12(&v8[v35], 1LL, v10);
  int v39 = v12(v37, 1LL, v10);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v36, v37, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v36, 0LL, 1LL, v10);
      goto LABEL_31;
    }

    goto LABEL_30;
  }

  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
LABEL_30:
    uint64_t v40 = sub_100183098(&qword_1006457E8);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64LL));
    goto LABEL_31;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v36, v37, v10);
LABEL_31:
  uint64_t v41 = v16[9];
  uint64_t v42 = &v8[v41];
  uint64_t v43 = &v9[v41];
  int v44 = v12(&v8[v41], 1LL, v10);
  int v45 = v12(v43, 1LL, v10);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v42, v43, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v42, 0LL, 1LL, v10);
      goto LABEL_37;
    }

    goto LABEL_36;
  }

  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
LABEL_36:
    uint64_t v46 = sub_100183098(&qword_1006457E8);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64LL));
    goto LABEL_37;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v42, v43, v10);
LABEL_37:
  uint64_t v47 = v16[10];
  uint64_t v48 = &v8[v47];
  uint64_t v49 = &v9[v47];
  int v50 = v12(&v8[v47], 1LL, v10);
  int v51 = v12(v49, 1LL, v10);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v48, v49, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v48, 0LL, 1LL, v10);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
LABEL_42:
    uint64_t v52 = sub_100183098(&qword_1006457E8);
    memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64LL));
    goto LABEL_43;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v48, v49, v10);
LABEL_43:
  uint64_t v53 = v16[11];
  uint64_t v54 = &v8[v53];
  uint64_t v55 = &v9[v53];
  int v56 = v12(&v8[v53], 1LL, v10);
  int v57 = v12(v55, 1LL, v10);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v54, v55, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v54, 0LL, 1LL, v10);
      goto LABEL_49;
    }

    goto LABEL_48;
  }

  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v10);
LABEL_48:
    uint64_t v58 = sub_100183098(&qword_1006457E8);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64LL));
    goto LABEL_49;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v54, v55, v10);
LABEL_49:
  uint64_t v59 = v16[12];
  uint64_t v60 = &v8[v59];
  uint64_t v61 = &v9[v59];
  int v62 = v12(&v8[v59], 1LL, v10);
  int v63 = v12(v61, 1LL, v10);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v60, v61, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v60, 0LL, 1LL, v10);
      goto LABEL_55;
    }

    goto LABEL_54;
  }

  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v60, v10);
LABEL_54:
    uint64_t v64 = sub_100183098(&qword_1006457E8);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64LL));
    goto LABEL_55;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v60, v61, v10);
LABEL_55:
  v8[v16[13]] = v9[v16[13]];
  uint64_t v65 = v16[14];
  uint64_t v66 = &v8[v65];
  uint64_t v67 = &v9[v65];
  int v68 = v12(&v8[v65], 1LL, v10);
  int v69 = v12(v67, 1LL, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v66, v67, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v66, 0LL, 1LL, v10);
      goto LABEL_61;
    }

    goto LABEL_60;
  }

  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v10);
LABEL_60:
    uint64_t v70 = sub_100183098(&qword_1006457E8);
    memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64LL));
    goto LABEL_61;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v66, v67, v10);
LABEL_61:
  uint64_t v71 = v16[15];
  uint64_t v72 = &v8[v71];
  uint64_t v73 = &v9[v71];
  int v74 = v12(&v8[v71], 1LL, v10);
  int v75 = v12(v73, 1LL, v10);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v72, v73, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v72, 0LL, 1LL, v10);
      goto LABEL_67;
    }

    goto LABEL_66;
  }

  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
LABEL_66:
    uint64_t v76 = sub_100183098(&qword_1006457E8);
    memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64LL));
    goto LABEL_67;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v72, v73, v10);
LABEL_67:
  uint64_t v77 = v16[16];
  uint64_t v78 = &v8[v77];
  uint64_t v79 = &v9[v77];
  int v80 = v12(&v8[v77], 1LL, v10);
  int v81 = v12(v79, 1LL, v10);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v78, v79, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v78, 0LL, 1LL, v10);
      goto LABEL_73;
    }

    goto LABEL_72;
  }

  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_72:
    uint64_t v82 = sub_100183098(&qword_1006457E8);
    memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64LL));
    goto LABEL_73;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v78, v79, v10);
LABEL_73:
  uint64_t v83 = v16[17];
  uint64_t v84 = &v8[v83];
  uint64_t v85 = &v9[v83];
  int v86 = v12(&v8[v83], 1LL, v10);
  int v87 = v12(v85, 1LL, v10);
  if (!v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v84, v85, v10);
      goto LABEL_79;
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v84, v10);
    goto LABEL_78;
  }

  if (v87)
  {
LABEL_78:
    uint64_t v88 = sub_100183098(&qword_1006457E8);
    memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64LL));
    goto LABEL_79;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v84, v85, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v84, 0LL, 1LL, v10);
LABEL_79:
  uint64_t v89 = v16[18];
  uint64_t v90 = &v8[v89];
  id v91 = &v9[v89];
  *(_DWORD *)uint64_t v90 = *(_DWORD *)v91;
  v90[4] = v91[4];
  v8[v16[19]] = v9[v16[19]];
  uint64_t v92 = v16[20];
  int v93 = &v8[v92];
  uint64_t v94 = &v9[v92];
  uint64_t v96 = *(void *)v94;
  uint64_t v95 = *((void *)v94 + 1);
  uint64_t v97 = *((void *)v93 + 1);
  *(void *)int v93 = v96;
  *((void *)v93 + 1) = v95;
  swift_bridgeObjectRelease(v97);
  uint64_t v98 = v16[21];
  uint64_t v99 = &v8[v98];
  uint64_t v100 = &v9[v98];
  uint64_t v102 = *(void *)v100;
  uint64_t v101 = *((void *)v100 + 1);
  uint64_t v103 = *((void *)v99 + 1);
  *(void *)uint64_t v99 = v102;
  *((void *)v99 + 1) = v101;
  swift_bridgeObjectRelease(v103);
  uint64_t v104 = v117[6];
  uint64_t v105 = (char *)a1 + v104;
  unint64_t v106 = (char *)v118 + v104;
  sub_10018709C((void *)((char *)a1 + v104));
  __int128 v107 = *((_OWORD *)v106 + 1);
  *(_OWORD *)uint64_t v105 = *(_OWORD *)v106;
  *((_OWORD *)v105 + 1) = v107;
  *((void *)v105 + 4) = *((void *)v106 + 4);
  uint64_t v108 = v117[7];
  uint64_t v109 = *(void *)((char *)a1 + v108);
  unint64_t v110 = *(void *)((char *)a1 + v108 + 8);
  *(_OWORD *)((char *)a1 + v10_Block_object_dispose(va, 8) = *(_OWORD *)((char *)v118 + v108);
  sub_100189B20(v109, v110);
  uint64_t v111 = v117[9];
  *(_DWORD *)((char *)a1 + v117[8]) = *(_DWORD *)((char *)v118 + v117[8]);
  uint64_t v112 = *(void *)((char *)a1 + v111);
  unint64_t v113 = *(void *)((char *)a1 + v111 + 8);
  *(_OWORD *)((char *)a1 + v111) = *(_OWORD *)((char *)v118 + v111);
  sub_100189B20(v112, v113);
  uint64_t v114 = v117[10];
  unint64_t v115 = *(void **)((char *)a1 + v114);
  *(void *)((char *)a1 + v114) = *(void *)((char *)v118 + v114);

  *((_BYTE *)a1 + v117[11]) = *((_BYTE *)v118 + v117[11]);
  return a1;
}

uint64_t sub_1001EDA64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001EDA70);
}

uint64_t sub_1001EDA70(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for SDAuthenticationSessionMetrics(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 20)],  a2,  v8);
  }

uint64_t sub_1001EDAEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001EDAF8);
}

char *sub_1001EDAF8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for SDAuthenticationSessionMetrics(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1001EDB6C(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for SDAuthenticationSessionMetrics(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = "(";
    void v4[3] = &unk_1004CE490;
    void v4[4] = (char *)&value witness table for Builtin.Int32 + 64;
    void v4[5] = &unk_1004CE490;
    void v4[6] = &unk_1004CE4C0;
    void v4[7] = &unk_1004CE4D8;
    swift_initStructMetadata(a1, 256LL, 8LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1001EDC1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001EDC28);
}

uint64_t sub_1001EDC2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001EDC38);
}

uint64_t sub_1001EDC3C(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = "(";
  uint64_t result = type metadata accessor for SDAuthenticationSessionMetrics(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    void v4[3] = &unk_1004CE680;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1001EDCC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100183098((uint64_t *)&unk_1006563F0);
  __chkstk_darwin(v4);
  uint64_t v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = type metadata accessor for SFPlatform(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  static SFPlatform.macOS.getter(v9);
  char v12 = static SFPlatform.isPlatform(_:)(v11);
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) != 0)
  {
    type metadata accessor for SDAirDropContentHandlerUtilities();
    id v16 = 0LL;
  }

  else
  {
    id v13 = objc_allocWithZone(&OBJC_CLASS___LSApplicationRecord);
    id v16 = sub_10043C098(0xD000000000000016LL, 0x8000000100504F40LL, 1);
    type metadata accessor for SDAirDropContentHandlerUtilities();
    if (v16) {
      id v17 = v16;
    }
  }

  uint64_t v14 = type metadata accessor for SFAirDropReceive.ItemDestination(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v6, 1LL, 1LL, v14);
  sub_10026664C(a1, v16, 1, a2);

  return sub_100187334((uint64_t)v6);
}

uint64_t type metadata accessor for SDAirDropContentHandlerWebLinks()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary31SDAirDropContentHandlerWebLinks);
}

uint64_t sub_1001EDE74@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SDAirDropContentHandlerWebLinks();
  uint64_t result = swift_allocObject(v2, 16LL, 7LL);
  *a1 = result;
  return result;
}

uint64_t sub_1001EDEA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001EDCC4(a1, a2);
}

void sub_1001EDEBC(uint64_t a1, char a2)
{
  uint64_t v3 = SFAirDropReceive.AskRequest.urlItems.getter();
  unint64_t v4 = *(void *)(v3 + 16);
  swift_bridgeObjectRelease(v3);
  uint64_t v5 = sub_100183098((uint64_t *)&unk_100650440);
  uint64_t inited = swift_initStackObject(v5, v23);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1004CDCA0;
  *(void *)(inited + 32) = 0x45544953424557LL;
  uint64_t v7 = inited + 32;
  *(void *)(inited + 40) = 0xE700000000000000LL;
  *(void *)(inited + 4_Block_object_dispose(va, 8) = v4;
  swift_bridgeObjectRetain(0xE700000000000000LL);
  swift_bridgeObjectRetain(inited);
  v8._countAndFlagsBits = 95LL;
  v8._object = (void *)0xE100000000000000LL;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x45544953424557LL;
  v9._object = (void *)0xE700000000000000LL;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(0xE700000000000000LL);
  if (v4 > 1)
  {
    v10._countAndFlagsBits = 0x4C4152554C505FLL;
    v10._object = (void *)0xE700000000000000LL;
    String.append(_:)(v10);
  }

  swift_bridgeObjectRelease(inited);
  if ((a2 & 1) != 0)
  {
    v11._countAndFlagsBits = 0x4C4154495041435FLL;
    v11._object = (void *)0xEC00000044455A49LL;
    String.append(_:)(v11);
  }

  v12._countAndFlagsBits = 0x545845545FLL;
  v12._object = (void *)0xE500000000000000LL;
  String.append(_:)(v12);
  swift_setDeallocating(inited);
  uint64_t v13 = *(void *)(inited + 16);
  uint64_t v14 = sub_100183098(&qword_100646EA0);
  swift_arrayDestroy(v7, v13, v14);
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xEF524546534E4152LL);
  id v17 = (id)SFLocalizedStringForKey(v15, v16);

  if (v17)
  {
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    uint64_t v20 = v19;

    uint64_t v21 = sub_100183098(&qword_1006483E0);
    uint64_t v22 = swift_allocObject(v21, 72LL, 7LL);
    *(_OWORD *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1004CDCA0;
    *(void *)(v22 + 56) = &type metadata for Int;
    *(void *)(v22 + 64) = &protocol witness table for Int;
    *(void *)(v22 + 32) = v4;
    static String.localizedStringWithFormat(_:_:)(v18, v20, v22);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v22);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1001EE100()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100186DFC(v0, qword_1006473E0);
  uint64_t v1 = sub_100186DE4(v0, (uint64_t)qword_1006473E0);
  if (qword_100643FD8 != -1) {
    swift_once(&qword_100643FD8, sub_10023A408);
  }
  uint64_t v2 = sub_100186DE4(v0, (uint64_t)qword_1006695F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

__n128 sub_1001EE190@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v38 = a2;
  uint64_t v5 = _s12HelloRequestVMa(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v37 = (uint64_t)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100183098(&qword_1006475A8);
  __chkstk_darwin(v8);
  Swift::String v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100183098(&qword_1006457E8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F08 != -1) {
    swift_once(&qword_100643F08, sub_1001EE100);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v15 = sub_100186DE4(v14, (uint64_t)qword_1006473E0);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Sending HELLO request", v18, 2u);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  uint64_t v19 = (uint64_t)&v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_telemetry];
  swift_beginAccess(&v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_telemetry], v39, 33LL, 0LL);
  Date.init()(v20);
  uint64_t v21 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v13, 0LL, 1LL, v21);
  sub_1001C9860((uint64_t)v13, v19, &qword_1006457E8);
  swift_endAccess(v39);
  sub_1001A4B84(a1, (uint64_t)v10, _s12HelloRequestVMa);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v10, 0LL, 1LL, v5);
  uint64_t v22 = (uint64_t)&v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloRequest];
  swift_beginAccess(&v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloRequest], v39, 33LL, 0LL);
  sub_1001C9860((uint64_t)v10, v22, &qword_1006475A8);
  swift_endAccess(v39);
  strcpy((char *)v39, "Send HELLO [");
  BYTE5(v39[1]) = 0;
  HIWORD(v39[1]) = -5120;
  uint64_t v23 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v24 = sub_100183F14( &qword_100647620,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
  v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
  object = (const char *)v25._object;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(object);
  v27._countAndFlagsBits = 93LL;
  v27._object = (void *)0xE100000000000000LL;
  String.append(_:)(v27);
  uint64_t v28 = v39[0];
  uint64_t v29 = (const char *)v39[1];
  uint64_t v30 = v37;
  sub_1001A4B84(a1, v37, _s12HelloRequestVMa);
  uint64_t v31 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v32 = (v31 + 24) & ~v31;
  uint64_t v33 = swift_allocObject(&unk_1005D48E8, v32 + v7, v31 | 7);
  *(void *)(v33 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  sub_1001A4B40(v30, v33 + v32, _s12HelloRequestVMa);
  uint64_t v34 = v3;
  withProgressTask<A, B>(_:initialProgress:operation:)(v28, v29);
  swift_release(v33);
  return swift_bridgeObjectRelease(v29);
}

uint64_t sub_1001EE514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v4 = *(void *)(_s12HelloRequestVMa(0LL) - 8);
  v3[8] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  void v3[9] = v5;
  v3[10] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100183098(&qword_100646560);
  v3[11] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100183098(&qword_1006475B0);
  v3[12] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v8 = static AirDropActor.shared;
  v3[13] = static AirDropActor.shared;
  return swift_task_switch(sub_1001EE5F4, v8, 0LL);
}

uint64_t sub_1001EE5F4()
{
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v4 = sub_100183098(&qword_1006474B0);
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v3, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v1, 0LL, 1LL, v4);
  uint64_t v6 = v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloContinuation;
  swift_beginAccess( v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloContinuation,  v0 + 2,  33LL,  0LL);
  sub_1001C9860(v1, v6, &qword_1006475B0);
  swift_endAccess(v0 + 2);
  sub_1001EE8F0();
  v0[14] = v7;
  uint64_t v8 = v7;
  uint64_t v9 = v0[10];
  uint64_t v10 = v0[11];
  uint64_t v12 = v0[8];
  uint64_t v11 = v0[9];
  uint64_t v14 = (char *)v0[6];
  uint64_t v13 = v0[7];
  uint64_t v15 = *(void *)&v14[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloConnection];
  *(void *)&v14[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloConnection] = v7;
  swift_retain(v7);
  swift_release(v15);
  uint64_t v16 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v10, 1LL, 1LL, v16);
  sub_1001A4B84(v13, v9, _s12HelloRequestVMa);
  uint64_t v17 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v18 = (v17 + 24) & ~v17;
  unint64_t v19 = (v11 + v18 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v20 = swift_allocObject(&unk_1005D4910, v19 + 8, v17 | 7);
  v0[15] = v20;
  *(void *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = v14;
  sub_1001A4B40(v9, v20 + v18, _s12HelloRequestVMa);
  *(void *)(v20 + v19) = v8;
  uint64_t v21 = swift_allocObject(&unk_1005D4938, 24LL, 7LL);
  v0[16] = v21;
  *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = v14;
  uint64_t v22 = async function pointer to concurrentRace<A>(priority:operation:against:)[1];
  uint64_t v23 = v14;
  swift_retain(v8);
  uint64_t v24 = v23;
  Swift::String v25 = (void *)swift_task_alloc(v22);
  v0[17] = v25;
  *Swift::String v25 = v0;
  v25[1] = sub_1001EE854;
  return concurrentRace<A>(priority:operation:against:)();
}

uint64_t sub_1001EE854()
{
  uint64_t v2 = *v1;
  uint64_t v3 = (*v1)[17];
  (*v1)[18] = v0;
  swift_task_dealloc(v3);
  uint64_t v5 = v2[15];
  uint64_t v4 = v2[16];
  uint64_t v6 = v2[13];
  sub_100187100(v2[11], &qword_100646560);
  swift_release(v4);
  swift_release(v5);
  if (v0) {
    uint64_t v7 = sub_1001FC2E8;
  }
  else {
    uint64_t v7 = sub_1001FC2EC;
  }
  return swift_task_switch(v7, v6, 0LL);
}

void sub_1001EE8F0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SDAirDropDiscoveredEndpoint(0LL);
  uint64_t v3 = __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  uint64_t v5 = &v8[-v4];
  sub_1001A4B84(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_endpoint, (uint64_t)&v8[-v4], v6);
  uint64_t v7 = (char *)sub_1001EE9C4 + 4 * byte_1004CE890[swift_getEnumCaseMultiPayload(v5, v2)];
  __asm { BR              X10 }

uint64_t sub_1001EE9C4()
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v1, v2);
  return ((uint64_t (*)())((char *)sub_1001EEA44 + 4 * byte_1004CE894[EnumCaseMultiPayload]))();
}

uint64_t sub_1001EEA44()
{
  uint64_t v5 = v1;
  uint64_t v6 = sub_1001F4A64(0LL, v0, v2 & 1);
  if (!v5)
  {
    uint64_t v7 = swift_allocObject(&unk_1005D4780, 24LL, 7LL);
    swift_unknownObjectWeakInit(v7 + 16, v0);
    uint64_t v8 = swift_allocObject(&unk_1005D47A8, 24LL, 7LL);
    swift_weakInit(v8 + 16, v6);
    uint64_t v9 = swift_allocObject(&unk_1005D47D0, 32LL, 7LL);
    *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
    *(void *)(v9 + 24) = v8;
    swift_retain(v7);
    swift_retain(v8);
    ((void (*)(uint64_t (*)(uint64_t), uint64_t))NWConnection.stateUpdateHandler.setter)( sub_1001FADFC,  v9);
    swift_release(v7);
    swift_release(v8);
    if (qword_100643F08 != -1) {
      swift_once(&qword_100643F08, sub_1001EE100);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    sub_100186DE4(v10, (uint64_t)qword_1006473E0);
    uint64_t v11 = swift_retain_n(v6, 2LL);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v15 = swift_slowAlloc(32LL, -1LL);
      *(void *)(v4 - 96) = v15;
      *(void *)(v4 - 72) = v15;
      *(_DWORD *)uint64_t v14 = 136315138;
      *(void *)(v4 - 104) = v14 + 4;
      uint64_t v16 = NWConnection.debugDescription.getter(v15);
      unint64_t v18 = v17;
      *(void *)(v4 - 8_Block_object_dispose(va, 8) = sub_10018CDB4(v16, v17, (uint64_t *)(v4 - 72));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 88, v4 - 80, *(void *)(v4 - 104), v14 + 12);
      swift_release_n(v6, 2LL);
      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Starting connection %s", v14, 0xCu);
      uint64_t v19 = *(void *)(v4 - 96);
      swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v6, 2LL);
    }

    ((void (*)(void))NWConnection.start(queue:))(*(void *)(v0
                                                                        + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_queue));
  }

  swift_release(0LL);
  return v6;
}

uint64_t sub_1001EECE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[8] = a2;
  uint64_t v7 = sub_100183098(&qword_1006457E8);
  void v4[9] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  v4[10] = static AirDropActor.shared;
  uint64_t v8 = (void *)swift_task_alloc(dword_100655DC4);
  v4[11] = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_1001EEDB0;
  return sub_100442448(a3, a4);
}

uint64_t sub_1001EEDB0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0) {
    return swift_task_switch(sub_1001EEE20, *(void *)(v2 + 80), 0LL);
  }
  swift_task_dealloc(*(void *)(v2 + 72));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1001EEE20()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v3 = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_telemetry;
  v0[12] = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_telemetry;
  uint64_t v4 = v1 + v3;
  uint64_t v5 = swift_beginAccess(v1 + v3, v0 + 2, 33LL, 0LL);
  Date.init()(v5);
  uint64_t v6 = type metadata accessor for Date(0LL);
  v0[13] = v6;
  uint64_t v7 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL);
  v0[14] = v7;
  v7(v2, 0LL, 1LL, v6);
  uint64_t v8 = type metadata accessor for SDAirDropSendConnectionTelemetry(0LL);
  v0[15] = v8;
  sub_1001C9860(v2, v4 + *(int *)(v8 + 20), &qword_1006457E8);
  swift_endAccess(v0 + 2);
  uint64_t v9 = (void *)swift_task_alloc(dword_10064773C);
  v0[16] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1001EEEFC;
  return sub_1001EEFFC();
}

uint64_t sub_1001EEEFC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 80LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 128LL));
  return swift_task_switch(sub_1001EEF54, v1, 0LL);
}

uint64_t sub_1001EEF54()
{
  uint64_t v2 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 112);
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 64) + *(void *)(v0 + 96);
  uint64_t v6 = swift_beginAccess(v5, v0 + 40, 33LL, 0LL);
  Date.init()(v6);
  v2(v4, 0LL, 1LL, v3);
  sub_1001C9860(v4, v5 + *(int *)(v1 + 24), &qword_1006457E8);
  swift_endAccess(v0 + 40);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001EEFFC()
{
  v1[11] = v0;
  uint64_t v2 = sub_100183098(&qword_1006475B0);
  v1[12] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100183098(&qword_1006474B0);
  v1[13] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[14] = v4;
  v1[15] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v5 = static AirDropActor.shared;
  uint8_t v1[16] = static AirDropActor.shared;
  return swift_task_switch(sub_1001EF0B8, v5, 0LL);
}

uint64_t sub_1001EF0B8()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 88) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloConnection);
  *(void *)(v0 + 136) = v1;
  if (v1)
  {
    uint64_t v2 = dword_100655DBC;
    swift_retain(v1);
    uint64_t v3 = (void *)swift_task_alloc(v2);
    *(void *)(v0 + 144) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1001EF164;
    return sub_100442C54(v1);
  }

  else
  {
    uint64_t v5 = *(void *)(v0 + 96);
    swift_task_dealloc(*(void *)(v0 + 120));
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1001EF164(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 144LL);
  v3[19] = a1;
  v3[20] = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = sub_1001EF348;
  }
  else {
    uint64_t v5 = sub_1001EF1D0;
  }
  return swift_task_switch(v5, v3[16], 0LL);
}

uint64_t sub_1001EF1D0()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 88);
  *(_DWORD *)(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_receiverFeatureFlags) = *(void *)(v0 + 152);
  uint64_t v5 = *(void *)(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_primaryConnection);
  *(void *)(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_primaryConnection) = v1;
  swift_retain(v1);
  swift_release(v5);
  uint64_t v6 = v4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloContinuation;
  swift_beginAccess( v4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloContinuation,  v0 + 64,  0LL,  0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v6, 1LL, v2))
  {
    uint64_t v7 = *(void *)(v0 + 152);
    uint64_t v9 = *(void *)(v0 + 112);
    uint64_t v8 = *(void *)(v0 + 120);
    uint64_t v10 = *(void *)(v0 + 104);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v6, v10);
    *(_DWORD *)(v0 + 16_Block_object_dispose(va, 8) = v7;
    *(_BYTE *)(v0 + 172) = BYTE4(v7);
    SFProgressContinuation.finish(with:)(v0 + 168, v10);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }

  uint64_t v11 = *(void *)(v0 + 136);
  uint64_t v13 = *(void *)(v0 + 88);
  uint64_t v12 = *(void *)(v0 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 112) + 56LL))( v12,  1LL,  1LL,  *(void *)(v0 + 104));
  uint64_t v14 = v13 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloContinuation;
  swift_beginAccess( v13 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloContinuation,  v0 + 40,  33LL,  0LL);
  sub_1001C9860(v12, v14, &qword_1006475B0);
  swift_endAccess(v0 + 40);
  swift_release(v11);
  uint64_t v15 = *(void *)(v0 + 96);
  swift_task_dealloc(*(void *)(v0 + 120));
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001EF348()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 88);
  sub_1001F3DB0( 0LL,  &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloConnection,  "Cancelling HELLO connection %s");
  uint64_t v4 = v3 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloContinuation;
  swift_beginAccess(v4, v0 + 16, 0LL, 0LL);
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1LL, v1);
  uint64_t v6 = *(void *)(v0 + 160);
  if (v5)
  {
    swift_errorRelease(*(void *)(v0 + 160));
  }

  else
  {
    uint64_t v8 = *(void *)(v0 + 112);
    uint64_t v7 = *(void *)(v0 + 120);
    uint64_t v9 = *(void *)(v0 + 104);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v4, v9);
    SFProgressContinuation.fail(with:)(v6, v9);
    swift_errorRelease(v6);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }

  uint64_t v10 = *(void *)(v0 + 136);
  uint64_t v12 = *(void *)(v0 + 88);
  uint64_t v11 = *(void *)(v0 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 112) + 56LL))( v11,  1LL,  1LL,  *(void *)(v0 + 104));
  uint64_t v13 = v12 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloContinuation;
  swift_beginAccess(v13, v0 + 40, 33LL, 0LL);
  sub_1001C9860(v11, v13, &qword_1006475B0);
  swift_endAccess(v0 + 40);
  swift_release(v10);
  uint64_t v14 = *(void *)(v0 + 96);
  swift_task_dealloc(*(void *)(v0 + 120));
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001EF4A8(uint64_t a1, uint64_t a2)
{
  v2[5] = a2;
  uint64_t v3 = sub_100183098(&qword_1006474B0);
  v2[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for SFAirDropSend.Failure(0LL);
  void v2[9] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[10] = v6;
  v2[11] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for ContinuousClock(0LL);
  uint8_t v2[12] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[13] = v8;
  v2[14] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v9 = static AirDropActor.shared;
  v2[15] = static AirDropActor.shared;
  return swift_task_switch(sub_1001EF590, v9, 0LL);
}

uint64_t sub_1001EF590(uint64_t a1)
{
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1006461D8 + dword_1006461D8);
  uint64_t v2 = (void *)swift_task_alloc(unk_1006461DC);
  *(void *)(v1 + 12_Block_object_dispose(va, 8) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1001EF610;
  return v4(0x70801D946C940000LL, 2LL, 0LL, 0LL, 1);
}

uint64_t sub_1001EF610()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 128LL);
  *(void *)(*(void *)v1 + 136LL) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = v2[15];
  (*(void (**)(void, void))(v2[13] + 8LL))(v2[14], v2[12]);
  if (v0) {
    uint64_t v5 = sub_1001EF91C;
  }
  else {
    uint64_t v5 = sub_1001EF68C;
  }
  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_1001EF68C()
{
  if (qword_100643F08 != -1) {
    swift_once(&qword_100643F08, sub_1001EE100);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_1006473E0);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "HELLO request timeout", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v7 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v8 = *(void *)(v0 + 72);
  uint64_t v9 = *(void *)(v0 + 48);
  uint64_t v10 = *(void *)(v0 + 56);
  uint64_t v11 = *(void *)(v0 + 40);

  sub_1001F3DB0( 1LL,  &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloConnection,  "Cancelling HELLO connection %s");
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))( v6,  enum case for SFAirDropSend.Failure.receiverDeclined(_:),  v8);
  uint64_t v12 = v11 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloContinuation;
  swift_beginAccess(v12, v0 + 16, 0LL, 0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v12, 1LL, v9))
  {
    uint64_t v14 = *(void *)(v0 + 80);
    uint64_t v13 = *(void *)(v0 + 88);
    uint64_t v16 = *(void *)(v0 + 64);
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v17 = *(void *)(v0 + 48);
    uint64_t v18 = *(void *)(v0 + 56);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v16, v12, v17);
    uint64_t v19 = sub_100183F14( &qword_100654D00,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
    uint64_t v20 = swift_allocError(v15, v19, 0LL, 0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v21, v13, v15);
    SFProgressContinuation.fail(with:)(v20, v17);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    swift_errorRelease(v20);
  }

  uint64_t v23 = *(void *)(v0 + 80);
  uint64_t v22 = *(void *)(v0 + 88);
  uint64_t v24 = *(void *)(v0 + 72);
  uint64_t v25 = sub_100183F14( &qword_100654D00,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
  swift_allocError(v24, v25, 0LL, 0LL);
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v26, v22, v24);
  swift_willThrow(v27);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  uint64_t v28 = *(void *)(v0 + 88);
  uint64_t v29 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 112));
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001EF91C()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 112));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

__n128 sub_1001EF970@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v38 = a2;
  uint64_t v5 = _s14descr1005DF7D1C10AskRequestVMa(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v37 = (uint64_t)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100183098(&qword_1006475B8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100183098(&qword_1006457E8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F08 != -1) {
    swift_once(&qword_100643F08, sub_1001EE100);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v15 = sub_100186DE4(v14, (uint64_t)qword_1006473E0);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Sending ASK request", v18, 2u);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  uint64_t v19 = &v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_telemetry];
  swift_beginAccess(&v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_telemetry], &v39, 33LL, 0LL);
  Date.init()(v20);
  uint64_t v21 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v13, 0LL, 1LL, v21);
  uint64_t v22 = type metadata accessor for SDAirDropSendConnectionTelemetry(0LL);
  sub_1001C9860((uint64_t)v13, (uint64_t)&v19[*(int *)(v22 + 28)], &qword_1006457E8);
  swift_endAccess(&v39);
  sub_1001A4B84(a1, (uint64_t)v10, _s14descr1005DF7D1C10AskRequestVMa);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v10, 0LL, 1LL, v5);
  uint64_t v23 = (uint64_t)&v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askRequest];
  swift_beginAccess(&v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askRequest], &v39, 33LL, 0LL);
  sub_1001C9860((uint64_t)v10, v23, &qword_1006475B8);
  swift_endAccess(&v39);
  uint64_t v39 = 0LL;
  unint64_t v40 = 0xE000000000000000LL;
  v24._countAndFlagsBits = 0x4B534120646E6553LL;
  v24._object = (void *)0xEA00000000005B20LL;
  String.append(_:)(v24);
  uint64_t v25 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v26 = sub_100183F14( &qword_100647620,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(a1, v25, v26);
  v27._countAndFlagsBits = 93LL;
  v27._object = (void *)0xE100000000000000LL;
  String.append(_:)(v27);
  uint64_t v28 = v39;
  uint64_t v29 = (const char *)v40;
  uint64_t v30 = v37;
  sub_1001A4B84(a1, v37, _s14descr1005DF7D1C10AskRequestVMa);
  uint64_t v31 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v32 = (v31 + 24) & ~v31;
  uint64_t v33 = swift_allocObject(&unk_1005D4960, v32 + v7, v31 | 7);
  *(void *)(v33 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  sub_1001A4B40(v30, v33 + v32, _s14descr1005DF7D1C10AskRequestVMa);
  uint64_t v34 = v3;
  withProgressTask<A, B>(_:initialProgress:operation:)(v28, v29);
  swift_release(v33);
  return swift_bridgeObjectRelease(v29);
}

uint64_t sub_1001EFCF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v4 = *(void *)(_s14descr1005DF7D1C10AskRequestVMa(0LL) - 8);
  v3[8] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  void v3[9] = v5;
  v3[10] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100183098(&qword_100646560);
  v3[11] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100183098(&qword_1006475C0);
  v3[12] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v8 = static AirDropActor.shared;
  v3[13] = static AirDropActor.shared;
  return swift_task_switch(sub_1001EFDD4, v8, 0LL);
}

uint64_t sub_1001EFDD4()
{
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v4 = sub_100183098(&qword_1006474C8);
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v3, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v1, 0LL, 1LL, v4);
  uint64_t v6 = v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askContinuation;
  swift_beginAccess(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askContinuation, v0 + 2, 33LL, 0LL);
  sub_1001C9860(v1, v6, &qword_1006475C0);
  swift_endAccess(v0 + 2);
  uint64_t v7 = *(void *)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_primaryConnection);
  swift_retain(v7);
  sub_1001EE8F0();
  v0[14] = v8;
  uint64_t v9 = v8;
  uint64_t v10 = v0[10];
  uint64_t v11 = v0[11];
  uint64_t v13 = v0[8];
  uint64_t v12 = v0[9];
  uint64_t v15 = (char *)v0[6];
  uint64_t v14 = v0[7];
  swift_release(v7);
  uint64_t v16 = *(void *)&v15[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askConnection];
  *(void *)&v15[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askConnection] = v9;
  swift_retain(v9);
  swift_release(v16);
  uint64_t v17 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v11, 1LL, 1LL, v17);
  sub_1001A4B84(v14, v10, _s14descr1005DF7D1C10AskRequestVMa);
  uint64_t v18 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v19 = (v18 + 24) & ~v18;
  unint64_t v20 = (v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = swift_allocObject(&unk_1005D4988, v20 + 8, v18 | 7);
  v0[15] = v21;
  *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
  sub_1001A4B40(v10, v21 + v19, _s14descr1005DF7D1C10AskRequestVMa);
  *(void *)(v21 + v20) = v9;
  uint64_t v22 = swift_allocObject(&unk_1005D49B0, 24LL, 7LL);
  v0[16] = v22;
  *(void *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
  uint64_t v23 = async function pointer to concurrentRace<A>(priority:operation:against:)[1];
  Swift::String v24 = v15;
  swift_retain(v9);
  uint64_t v25 = v24;
  uint64_t v26 = (void *)swift_task_alloc(v23);
  v0[17] = v26;
  *uint64_t v26 = v0;
  v26[1] = sub_1001F005C;
  return concurrentRace<A>(priority:operation:against:)();
}

uint64_t sub_1001F005C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = (*v1)[17];
  (*v1)[18] = v0;
  swift_task_dealloc(v3);
  uint64_t v5 = v2[15];
  uint64_t v4 = v2[16];
  uint64_t v6 = v2[13];
  sub_100187100(v2[11], &qword_100646560);
  swift_release(v4);
  swift_release(v5);
  if (v0) {
    uint64_t v7 = sub_1001F0154;
  }
  else {
    uint64_t v7 = sub_1001F00F8;
  }
  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_1001F00F8()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  swift_release(*(void *)(v0 + 112));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001F0154()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 96));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001F01AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[8] = a2;
  uint64_t v7 = sub_100183098(&qword_1006457E8);
  void v4[9] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  v4[10] = static AirDropActor.shared;
  uint64_t v8 = (void *)swift_task_alloc(dword_100655DD4);
  v4[11] = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_1001F0278;
  return sub_100442650(a3, a4);
}

uint64_t sub_1001F0278()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0) {
    return swift_task_switch(sub_1001F02E8, *(void *)(v2 + 80), 0LL);
  }
  swift_task_dealloc(*(void *)(v2 + 72));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1001F02E8()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v3 = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_telemetry;
  v0[12] = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_telemetry;
  uint64_t v4 = v1 + v3;
  uint64_t v5 = swift_beginAccess(v1 + v3, v0 + 2, 33LL, 0LL);
  Date.init()(v5);
  uint64_t v6 = type metadata accessor for Date(0LL);
  v0[13] = v6;
  uint64_t v7 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL);
  v0[14] = v7;
  v7(v2, 0LL, 1LL, v6);
  uint64_t v8 = type metadata accessor for SDAirDropSendConnectionTelemetry(0LL);
  v0[15] = v8;
  sub_1001C9860(v2, v4 + *(int *)(v8 + 32), &qword_1006457E8);
  swift_endAccess(v0 + 2);
  uint64_t v9 = (void *)swift_task_alloc(dword_100647774);
  v0[16] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1001F03C4;
  return sub_1001F04C4();
}

uint64_t sub_1001F03C4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 80LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 128LL));
  return swift_task_switch(sub_1001F041C, v1, 0LL);
}

uint64_t sub_1001F041C()
{
  uint64_t v2 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 112);
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 64) + *(void *)(v0 + 96);
  uint64_t v6 = swift_beginAccess(v5, v0 + 40, 33LL, 0LL);
  Date.init()(v6);
  v2(v4, 0LL, 1LL, v3);
  sub_1001C9860(v4, v5 + *(int *)(v1 + 36), &qword_1006457E8);
  swift_endAccess(v0 + 40);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001F04C4()
{
  v1[40] = v0;
  uint64_t v2 = sub_100183098(&qword_1006475C0);
  v1[41] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100183098(&qword_1006474C8);
  v1[42] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[43] = v4;
  v1[44] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v5 = static AirDropActor.shared;
  v1[45] = static AirDropActor.shared;
  return swift_task_switch(sub_1001F0580, v5, 0LL);
}

uint64_t sub_1001F0580()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 320) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askConnection);
  *(void *)(v0 + 36_Block_object_dispose(va, 8) = v1;
  if (v1)
  {
    uint64_t v2 = dword_100655DCC;
    swift_retain(v1);
    uint64_t v3 = (void *)swift_task_alloc(v2);
    *(void *)(v0 + 376) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1001F0638;
    return sub_100443080(v0 + 16, v1);
  }

  else
  {
    uint64_t v5 = *(void *)(v0 + 328);
    swift_task_dealloc(*(void *)(v0 + 352));
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1001F0638()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 376);
  *(void *)(*v1 + 384) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_1001F0BB0;
  }
  else {
    uint64_t v4 = sub_1001F069C;
  }
  return swift_task_switch(v4, *(void *)(v2 + 360), 0LL);
}

uint64_t sub_1001F069C()
{
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v2 = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_primaryConnection;
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_primaryConnection);
  if (!v3) {
    uint64_t v3 = swift_retain(*(void *)(v0 + 368));
  }
  *(void *)(v1 + sub_10004D1BC((void *)&_mh_execute_header, v0, v1, "Failed to register wifi monitor %@\n", v2) = v3;
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v4 = *(void **)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 72);
  uint64_t v6 = *(void **)(v0 + 80);
  uint64_t v9 = *(void *)(v0 + 88);
  uint64_t v8 = *(void **)(v0 + 96);
  uint64_t v10 = qword_100643F08;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  if (v10 != -1) {
    swift_once(&qword_100643F08, sub_1001EE100);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v11, (uint64_t)qword_1006473E0);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  uint64_t v12 = swift_bridgeObjectRetain(v8);
  uint64_t v13 = (void *)Logger.logObject.getter(v12);
  os_log_type_t v42 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled((os_log_t)v13, v42))
  {
    swift_bridgeObjectRelease_n(v4, 2LL);
    swift_bridgeObjectRelease_n(v6, 2LL);
    swift_bridgeObjectRelease_n(v8, 2LL);

    uint64_t v21 = *(void *)(v1 + v2);
    if (!v21) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }

  os_log_t log = (os_log_s *)v13;
  uint64_t v39 = v9;
  uint64_t v43 = v7;
  uint64_t v40 = v1;
  uint64_t v14 = swift_slowAlloc(32LL, -1LL);
  uint64_t v37 = swift_slowAlloc(96LL, -1LL);
  uint64_t v44 = v37;
  *(_DWORD *)uint64_t v14 = 136315650;
  uint64_t v15 = v5;
  unint64_t v16 = (unint64_t)v4;
  if (!v4)
  {
    uint64_t v45 = 0LL;
    unint64_t v46 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(17LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    unint64_t v16 = 0x80000001005046B0LL;
    uint64_t v15 = 0xD000000000000015LL;
  }

  uint64_t v41 = (uint64_t *)(v0 + 312);
  swift_bridgeObjectRetain(v4);
  *(void *)(v0 + 296) = sub_10018CDB4(v15, v16, &v44);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v14 + 4, v14 + 12);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease_n(v4, 2LL);
  *(_WORD *)(v14 + 12) = 2080;
  uint64_t v17 = v43;
  unint64_t v18 = (unint64_t)v6;
  if (!v6)
  {
    uint64_t v45 = 0LL;
    unint64_t v46 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(17LL);
    swift_bridgeObjectRelease(v46);
    unint64_t v18 = 0x80000001005046B0LL;
    uint64_t v17 = 0xD000000000000015LL;
  }

  swift_bridgeObjectRetain(v6);
  *(void *)(v0 + 304) = sub_10018CDB4(v17, v18, &v44);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v41, v14 + 14, v14 + 22);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease_n(v6, 2LL);
  *(_WORD *)(v14 + 22) = 2080;
  uint64_t v9 = v39;
  uint64_t v19 = v39;
  unint64_t v20 = (unint64_t)v8;
  if (!v8)
  {
    uint64_t v45 = 0LL;
    unint64_t v46 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(17LL);
    swift_bridgeObjectRelease(v46);
    unint64_t v20 = 0x80000001005046B0LL;
    uint64_t v19 = 0xD000000000000015LL;
  }

  swift_bridgeObjectRetain(v8);
  *uint64_t v41 = sub_10018CDB4(v19, v20, &v44);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v41, v0 + 320, v14 + 24, v14 + 32);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease_n(v8, 2LL);
  _os_log_impl( (void *)&_mh_execute_header,  log,  v42,  "Sender extracted IDS session ID %s, pseudonym: %s, push token: %s from ask response",  (uint8_t *)v14,  0x20u);
  swift_arrayDestroy(v37, 3LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v37, -1LL, -1LL);
  swift_slowDealloc(v14, -1LL, -1LL);

  uint64_t v7 = v43;
  uint64_t v21 = *(void *)(v40 + v2);
  if (v21)
  {
LABEL_15:
    swift_retain(v21);
    sub_100411330(v5, v4, v7, v6, v9, v8);
    swift_release(v21);
  }

uint64_t sub_1001F0BB0()
{
  uint64_t v1 = *(void *)(v0 + 336);
  uint64_t v2 = *(void *)(v0 + 344);
  uint64_t v3 = *(void *)(v0 + 320);
  sub_1001F3DB0( 0LL,  &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askConnection,  "Cancelling ASK connection %s");
  uint64_t v4 = v3 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askContinuation;
  swift_beginAccess(v4, v0 + 272, 0LL, 0LL);
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1LL, v1);
  uint64_t v6 = *(void *)(v0 + 384);
  if (v5)
  {
    swift_errorRelease(*(void *)(v0 + 384));
  }

  else
  {
    uint64_t v8 = *(void *)(v0 + 344);
    uint64_t v7 = *(void *)(v0 + 352);
    uint64_t v9 = *(void *)(v0 + 336);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v4, v9);
    SFProgressContinuation.fail(with:)(v6, v9);
    swift_errorRelease(v6);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }

  uint64_t v10 = *(void *)(v0 + 368);
  uint64_t v12 = *(void *)(v0 + 320);
  uint64_t v11 = *(void *)(v0 + 328);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 344) + 56LL))( v11,  1LL,  1LL,  *(void *)(v0 + 336));
  uint64_t v13 = v12 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askContinuation;
  swift_beginAccess(v13, v0 + 224, 33LL, 0LL);
  sub_1001C9860(v11, v13, &qword_1006475C0);
  swift_endAccess(v0 + 224);
  swift_release(v10);
  uint64_t v14 = *(void *)(v0 + 328);
  swift_task_dealloc(*(void *)(v0 + 352));
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001F0D10(uint64_t a1, uint64_t a2)
{
  v2[5] = a2;
  uint64_t v3 = sub_100183098(&qword_1006474C8);
  v2[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for SFAirDropSend.Failure(0LL);
  void v2[9] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[10] = v6;
  v2[11] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for ContinuousClock(0LL);
  uint8_t v2[12] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[13] = v8;
  v2[14] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SFAirDrop.TransferType(0LL);
  v2[15] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[16] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[17] = swift_task_alloc(v11);
  v2[18] = swift_task_alloc(v11);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v12 = static AirDropActor.shared;
  v2[19] = static AirDropActor.shared;
  return swift_task_switch(sub_1001F0E30, v12, 0LL);
}

uint64_t sub_1001F0E30()
{
  uint64_t v2 = v0[17];
  uint64_t v1 = v0[18];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[16];
  SFAirDropSend.Request.type.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))( v2,  enum case for SFAirDrop.TransferType.peerPayment(_:),  v3);
  char v5 = static SFAirDrop.TransferType.== infix(_:_:)(v1, v2);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v2, v3);
  uint64_t v7 = ((uint64_t (*)(uint64_t, uint64_t))v6)(v1, v3);
  if ((v5 & 1) != 0) {
    unint64_t v8 = 0x8155A43676E00000LL;
  }
  else {
    unint64_t v8 = 0x70801D946C940000LL;
  }
  if ((v5 & 1) != 0) {
    uint64_t v9 = 6LL;
  }
  else {
    uint64_t v9 = 2LL;
  }
  ContinuousClock.init()(v7);
  uint64_t v12 = (char *)&dword_1006461D8 + dword_1006461D8;
  uint64_t v10 = (void *)swift_task_alloc(unk_1006461DC);
  v0[20] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1001F0F54;
  return ((uint64_t (*)(unint64_t, uint64_t, void, void, uint64_t))v12)(v8, v9, 0LL, 0LL, 1LL);
}

uint64_t sub_1001F0F54()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 160LL);
  *(void *)(*(void *)v1 + 168LL) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = v2[19];
  (*(void (**)(void, void))(v2[13] + 8LL))(v2[14], v2[12]);
  if (v0) {
    char v5 = sub_1001F1278;
  }
  else {
    char v5 = sub_1001F0FD4;
  }
  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_1001F0FD4()
{
  if (qword_100643F08 != -1) {
    swift_once(&qword_100643F08, sub_1001EE100);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_1006473E0);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    char v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)char v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ASK request timeout", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v7 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v8 = *(void *)(v0 + 72);
  uint64_t v9 = *(void *)(v0 + 48);
  uint64_t v10 = *(void *)(v0 + 56);
  uint64_t v11 = *(void *)(v0 + 40);

  sub_1001F3DB0( 1LL,  &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askConnection,  "Cancelling ASK connection %s");
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))( v6,  enum case for SFAirDropSend.Failure.receiverDeclined(_:),  v8);
  uint64_t v12 = v11 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askContinuation;
  swift_beginAccess(v12, v0 + 16, 0LL, 0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v12, 1LL, v9))
  {
    uint64_t v14 = *(void *)(v0 + 80);
    uint64_t v13 = *(void *)(v0 + 88);
    uint64_t v16 = *(void *)(v0 + 64);
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v17 = *(void *)(v0 + 48);
    uint64_t v18 = *(void *)(v0 + 56);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v16, v12, v17);
    uint64_t v19 = sub_100183F14( &qword_100654D00,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
    uint64_t v20 = swift_allocError(v15, v19, 0LL, 0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v21, v13, v15);
    SFProgressContinuation.fail(with:)(v20, v17);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    swift_errorRelease(v20);
  }

  uint64_t v23 = *(void *)(v0 + 80);
  uint64_t v22 = *(void *)(v0 + 88);
  uint64_t v24 = *(void *)(v0 + 72);
  uint64_t v25 = sub_100183F14( &qword_100654D00,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
  swift_allocError(v24, v25, 0LL, 0LL);
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v26, v22, v24);
  swift_willThrow(v27);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  uint64_t v28 = *(void *)(v0 + 136);
  uint64_t v29 = *(void *)(v0 + 112);
  uint64_t v30 = *(void *)(v0 + 88);
  uint64_t v31 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 144));
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001F1278()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 144));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001F12E8@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for SFAirDrop.Progress(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F08 != -1) {
    swift_once(&qword_100643F08, sub_1001EE100);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v12, (uint64_t)qword_1006473E0);
  uint64_t v13 = swift_bridgeObjectRetain_n(a1, 2LL);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc(12LL, -1LL);
    uint64_t v41 = a2;
    uint64_t v17 = (uint8_t *)v16;
    uint64_t v40 = swift_slowAlloc(32LL, -1LL);
    v45[0] = v40;
    uint64_t v43 = a3;
    *(_DWORD *)uint64_t v17 = 136315138;
    uint64_t v39 = v17 + 4;
    uint64_t v18 = type metadata accessor for URL(0LL);
    os_log_type_t v42 = v4;
    uint64_t v19 = v11;
    uint64_t v20 = v9;
    uint64_t v21 = v8;
    uint64_t v22 = v18;
    uint64_t v23 = swift_bridgeObjectRetain(a1);
    uint64_t v24 = Array.description.getter(v23, v22);
    uint64_t v26 = v25;
    swift_bridgeObjectRelease(a1);
    uint64_t v27 = v24;
    uint64_t v8 = v21;
    uint64_t v9 = v20;
    uint64_t v11 = v19;
    uint64_t v4 = v42;
    uint64_t v44 = sub_10018CDB4(v27, (unint64_t)v26, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45, v39, v17 + 12);
    swift_bridgeObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Sending UPLOAD request %s", v17, 0xCu);
    uint64_t v28 = v40;
    swift_arrayDestroy(v40, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a1, 2LL);
  }

  v45[0] = 0LL;
  v45[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(16LL);
  swift_bridgeObjectRelease((const char *)v45[1]);
  strcpy((char *)v45, "Send UPLOAD [");
  HIWORD(v45[1]) = -4864;
  uint64_t v29 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v30 = sub_100183F14( &qword_100647620,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
  v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v29, v30);
  object = (const char *)v31._object;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(object);
  v33._countAndFlagsBits = 93LL;
  v33._object = (void *)0xE100000000000000LL;
  String.append(_:)(v33);
  uint64_t v34 = v45[0];
  uint64_t v35 = (const char *)v45[1];
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for SFAirDrop.Progress.notStarted(_:), v8);
  uint64_t v36 = swift_allocObject(&unk_1005D4848, 32LL, 7LL);
  *(void *)(v36 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(void *)(v36 + 24) = a1;
  swift_bridgeObjectRetain(a1);
  id v37 = v4;
  withProgressTask<A, B>(_:initialProgress:operation:)(v34, v35);
  swift_bridgeObjectRelease(v35);
  swift_release(v36);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1001F165C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[10] = a2;
  v3[11] = a3;
  void v3[9] = a1;
  uint64_t v4 = type metadata accessor for SFSecurityScopedURL(0LL);
  v3[12] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[13] = v5;
  v3[14] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for SFSandboxTokenURLPair(0LL);
  v3[15] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint8_t v3[16] = v7;
  v3[17] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100183098(&qword_1006475D0);
  v3[18] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100183098(&qword_1006475B8);
  v3[19] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v10 = static AirDropActor.shared;
  v3[20] = static AirDropActor.shared;
  return swift_task_switch(sub_1001F1764, v10, 0LL);
}

uint64_t sub_1001F1764()
{
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 80) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askRequest;
  swift_beginAccess(v2, v0 + 16, 0LL, 0LL);
  sub_1001915A4(v2, v1, &qword_1006475B8);
  uint64_t v3 = _s14descr1005DF7D1C10AskRequestVMa(0LL);
  LODWORD(sub_10004D1BC((void *)&_mh_execute_header, v0, v1, "Failed to register wifi monitor %@\n", v2) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48LL))(v1, 1LL, v3);
  sub_100187100(v1, &qword_1006475B8);
  if ((_DWORD)v2 == 1)
  {
    uint64_t v4 = type metadata accessor for SFAirDropSend.Failure(0LL);
    uint64_t v5 = sub_100183F14( &qword_100654D00,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
    swift_allocError(v4, v5, 0LL, 0LL);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v4 - 8) + 104LL))( v6,  enum case for SFAirDropSend.Failure.badRequest(_:),  v4);
    swift_willThrow(v7);
    uint64_t v32 = *(void *)(v0 + 144);
    uint64_t v33 = *(void *)(v0 + 136);
    uint64_t v34 = *(void *)(v0 + 112);
    swift_task_dealloc(*(void *)(v0 + 152));
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    *(void *)(v0 + 64) = *(void *)(v0 + 88);
    uint64_t v8 = sub_100183098((uint64_t *)&unk_1006464E0);
    unint64_t v9 = sub_1001FB7A8();
    uint64_t v10 = RandomAccessCollection<>.securityScopedURLs.getter(v8, v9);
    uint64_t v11 = v10;
    int64_t v12 = *(void *)(v10 + 16);
    if (v12)
    {
      uint64_t v13 = *(void *)(v0 + 128);
      uint64_t v14 = *(void *)(v0 + 104);
      os_log_type_t v42 = &_swiftEmptyArrayStorage;
      sub_10018D800(0, v12, 0);
      unint64_t v15 = v11 + ((*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
      uint64_t v40 = v11;
      uint64_t v41 = *(void *)(v14 + 72);
      uint64_t v16 = *(void (**)(uint64_t, unint64_t, void))(v14 + 16);
      do
      {
        uint64_t v17 = *(void *)(v0 + 112);
        v16(v17, v15, *(void *)(v0 + 96));
        static SFSecurityScopedURL.consumeSandboxToken(item:)(v17);
        (*(void (**)(void, void))(v14 + 8))(*(void *)(v0 + 112), *(void *)(v0 + 96));
        uint64_t v18 = v42;
        if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
        {
          sub_10018D800(0, v42[2] + 1LL, 1);
          uint64_t v18 = v42;
        }

        unint64_t v20 = v18[2];
        unint64_t v19 = v18[3];
        if (v20 >= v19 >> 1)
        {
          sub_10018D800(v19 > 1, v20 + 1, 1);
          uint64_t v18 = v42;
        }

        uint64_t v21 = *(void *)(v0 + 136);
        uint64_t v22 = *(void *)(v0 + 120);
        v18[2] = v20 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v13 + 32))( (unint64_t)v18 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))
        + *(void *)(v13 + 72) * v20,
          v21,
          v22);
        os_log_type_t v42 = v18;
        v15 += v41;
        --v12;
      }

      while (v12);
      swift_bridgeObjectRelease(v40);
    }

    else
    {
      swift_bridgeObjectRelease(v10);
      uint64_t v18 = &_swiftEmptyArrayStorage;
    }

    uint64_t v23 = *(void *)(v0 + 144);
    uint64_t v25 = *(void *)(v0 + 72);
    uint64_t v24 = *(void *)(v0 + 80);
    uint64_t v26 = *(void *)(v24 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sandboxTokenURLPairs);
    *(void *)(v24 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sandboxTokenURLPairs) = v18;
    swift_bridgeObjectRelease(v26);
    uint64_t v27 = sub_100183098(&qword_1006474E0);
    uint64_t v28 = *(void *)(v27 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v23, v25, v27);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v28 + 56))(v23, 0LL, 1LL, v27);
    uint64_t v29 = v24 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadContinuation;
    swift_beginAccess( v24 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadContinuation,  v0 + 40,  33LL,  0LL);
    sub_1001C9860(v23, v29, &qword_1006475D0);
    swift_endAccess(v0 + 40);
    uint64_t v30 = *(void *)(v24 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_primaryConnection);
    swift_retain(v30);
    sub_1001EE8F0();
    *(void *)(v0 + 16_Block_object_dispose(va, 8) = v31;
    uint64_t v36 = v31;
    uint64_t v37 = *(void *)(v0 + 80);
    swift_release(v30);
    uint64_t v38 = *(void *)(v37 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadConnection);
    *(void *)(v37 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadConnection) = v36;
    swift_retain(v36);
    swift_release(v38);
    uint64_t v39 = static AirDropActor.shared;
    *(void *)(v0 + 176) = static AirDropActor.shared;
    return swift_task_switch(sub_1001F1B90, v39, 0LL);
  }

uint64_t sub_1001F1B90()
{
  uint64_t v1 = v0[11];
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = (void *)v0[10];
    uint64_t v3 = type metadata accessor for SDAirDropSendCompressionAdapter(0LL);
    swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
    swift_bridgeObjectRetain(v1);
    uint64_t v4 = v2;
    id v5 = sub_100191758(v1, (uint64_t)v2, (uint64_t)&off_1005D46D0);
    v0[24] = v5;
    uint64_t v6 = *(void *)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sendCompressionAdapter];
    *(void *)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sendCompressionAdapter] = v5;
    swift_retain(v5);
    swift_release(v6);
    uint64_t v7 = sub_100183F14( &qword_100645518,  type metadata accessor for SDAirDropSendCompressionAdapter,  (uint64_t)&unk_1004CD3F8);
    uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter(v3, v7);
    uint64_t v10 = v9;
    uint64_t v11 = sub_1001F1D6C;
    uint64_t v12 = v8;
    uint64_t v13 = v10;
  }

  else
  {
    uint64_t v14 = v0[20];
    uint64_t v15 = type metadata accessor for SFAirDropSend.Failure(0LL);
    uint64_t v16 = sub_100183F14( &qword_100654D00,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
    v0[23] = swift_allocError(v15, v16, 0LL, 0LL);
    uint64_t v18 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v15 - 8) + 104LL))( v17,  enum case for SFAirDropSend.Failure.badRequest(_:),  v15);
    swift_willThrow(v18);
    uint64_t v11 = sub_1001F1D08;
    uint64_t v12 = v14;
    uint64_t v13 = 0LL;
  }

  return swift_task_switch(v11, v12, v13);
}

uint64_t sub_1001F1D08()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 112);
  swift_task_dealloc(*(void *)(v0 + 152));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001F1D6C()
{
  if (qword_100643EA0 != -1) {
    swift_once(&qword_100643EA0, sub_1001915E8);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_100645440);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Starting Send Compression Adapter", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 192);
  uint64_t v7 = *(void *)(v0 + 176);

  uint64_t v8 = *(void **)(v6 + 24);
  [v8 zip];
  id v9 = [v8 copyReadStream];
  uint64_t v10 = *(void **)(v6 + 32);
  *(void *)(v6 + 32) = v9;

  return swift_task_switch(sub_1001F1E8C, v7, 0LL);
}

uint64_t sub_1001F1E8C()
{
  uint64_t v1 = *(void *)(v0 + 160);
  swift_release(*(void *)(v0 + 192));
  return swift_task_switch(sub_1001F1ECC, v1, 0LL);
}

uint64_t sub_1001F1ECC()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 112);
  swift_release(*(void *)(v0 + 168));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

__n128 sub_1001F1F34(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = _s14descr1005DEB71C15ExchangeRequestVMa(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  if (qword_100643F08 != -1) {
    swift_once(&qword_100643F08, sub_1001EE100);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = sub_100186DE4(v7, (uint64_t)qword_1006473E0);
  id v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Sending EXCHANGE request", v11, 2u);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  _StringGuts.grow(_:)(18LL);
  swift_bridgeObjectRelease((const char *)0xE000000000000000LL, 0LL);
  v22[0] = 0x43584520646E6553LL;
  v22[1] = 0xEF5B2045474E4148LL;
  uint64_t v12 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v13 = sub_100183F14( &qword_100647620,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v12, v13);
  object = (const char *)v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(object);
  v16._countAndFlagsBits = 93LL;
  v16._object = (void *)0xE100000000000000LL;
  String.append(_:)(v16);
  sub_1001A4B84(a1, (uint64_t)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL), _s14descr1005DEB71C15ExchangeRequestVMa);
  uint64_t v17 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v18 = (v17 + 24) & ~v17;
  uint64_t v19 = swift_allocObject(&unk_1005D4708, v18 + v6, v17 | 7);
  *(void *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  sub_1001A4B40((uint64_t)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL), v19 + v18, _s14descr1005DEB71C15ExchangeRequestVMa);
  _s14descr1005DEB71C16ExchangeResponseVMa(0LL);
  id v20 = v2;
  withProgressTask<A, B>(_:initialProgress:operation:)(0x43584520646E6553LL, 0xEF5B2045474E4148LL);
  swift_release(v19);
  return swift_bridgeObjectRelease((const char *)0xEF5B2045474E4148LL);
}

uint64_t sub_1001F2198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  uint64_t v4 = *(void *)(_s14descr1005DEB71C15ExchangeRequestVMa(0LL) - 8);
  v3[8] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  void v3[9] = v5;
  v3[10] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100183098(&qword_100646560);
  v3[11] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100183098(&qword_1006475D8);
  v3[12] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v8 = static AirDropActor.shared;
  v3[13] = static AirDropActor.shared;
  return swift_task_switch(sub_1001F2278, v8, 0LL);
}

uint64_t sub_1001F2278()
{
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v4 = sub_100183098((uint64_t *)&unk_1006474F0);
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v3, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v1, 0LL, 1LL, v4);
  uint64_t v6 = v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeContinuation;
  swift_beginAccess( v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeContinuation,  v0 + 2,  33LL,  0LL);
  sub_1001C9860(v1, v6, &qword_1006475D8);
  swift_endAccess(v0 + 2);
  uint64_t v7 = *(void *)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_primaryConnection);
  swift_retain(v7);
  sub_1001EE8F0();
  v0[14] = v8;
  uint64_t v9 = v8;
  uint64_t v10 = v0[10];
  uint64_t v11 = v0[11];
  uint64_t v13 = v0[8];
  uint64_t v12 = v0[9];
  uint64_t v15 = (char *)v0[6];
  uint64_t v14 = v0[7];
  swift_release(v7);
  uint64_t v16 = *(void *)&v15[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeConnection];
  *(void *)&v15[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeConnection] = v9;
  swift_retain(v9);
  swift_release(v16);
  uint64_t v17 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v11, 1LL, 1LL, v17);
  sub_1001A4B84(v14, v10, _s14descr1005DEB71C15ExchangeRequestVMa);
  uint64_t v18 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v19 = (v18 + 24) & ~v18;
  unint64_t v20 = (v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = swift_allocObject(&unk_1005D4730, v20 + 8, v18 | 7);
  v0[15] = v21;
  *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
  sub_1001A4B40(v10, v21 + v19, _s14descr1005DEB71C15ExchangeRequestVMa);
  *(void *)(v21 + v20) = v9;
  uint64_t v22 = swift_allocObject(&unk_1005D4758, 24LL, 7LL);
  v0[16] = v22;
  *(void *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
  uint64_t v23 = *((unsigned int *)&async function pointer to concurrentRace<A>(priority:operation:against:) + 1);
  uint64_t v24 = v15;
  swift_retain(v9);
  uint64_t v25 = v24;
  uint64_t v26 = (void *)swift_task_alloc(v23);
  v0[17] = v26;
  *uint64_t v26 = v0;
  v26[1] = sub_1001EE854;
  return concurrentRace<A>(priority:operation:against:)();
}

uint64_t sub_1001F2500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v7 = (void *)swift_task_alloc(dword_100655DA4);
  *(void *)(v4 + 24) = v7;
  *uint64_t v7 = v4;
  v7[1] = sub_1001F2598;
  return sub_10044291C(a3, a4);
}

uint64_t sub_1001F2598()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 24);
  uint64_t v4 = *v1;
  swift_task_dealloc(v3);
  if (v0) {
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
  uint64_t v6 = (void *)swift_task_alloc(dword_100647664);
  *(void *)(v2 + 32) = v6;
  *uint64_t v6 = v4;
  v6[1] = sub_1001F2614;
  return sub_1001F2660();
}

uint64_t sub_1001F2614()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 32));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1001F2660()
{
  v1[11] = v0;
  uint64_t v2 = sub_100183098(&qword_1006475D8);
  v1[12] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100183098((uint64_t *)&unk_1006474F0);
  v1[13] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[14] = v4;
  v1[15] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = _s14descr1005DEB71C16ExchangeResponseVMa(0LL);
  uint8_t v1[16] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v6 = static AirDropActor.shared;
  v1[17] = static AirDropActor.shared;
  return swift_task_switch(sub_1001F273C, v6, 0LL);
}

uint64_t sub_1001F273C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 88) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeConnection);
  *(void *)(v0 + 144) = v1;
  if (v1)
  {
    uint64_t v2 = dword_100655D9C;
    swift_retain(v1);
    uint64_t v3 = (void *)swift_task_alloc(v2);
    *(void *)(v0 + 152) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1001F27F8;
    return sub_1004437AC(*(void *)(v0 + 128), v1);
  }

  else
  {
    uint64_t v5 = *(void *)(v0 + 120);
    uint64_t v6 = *(void *)(v0 + 96);
    swift_task_dealloc(*(void *)(v0 + 128));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1001F27F8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 152);
  *(void *)(*v1 + 160) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_1001F29D4;
  }
  else {
    uint64_t v4 = sub_1001F285C;
  }
  return swift_task_switch(v4, *(void *)(v2 + 136), 0LL);
}

uint64_t sub_1001F285C()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 88) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeContinuation;
  swift_beginAccess(v3, v0 + 64, 32LL, 0LL);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1LL, v1);
  uint64_t v5 = *(void *)(v0 + 128);
  if (v4)
  {
    sub_1001A4BC8(*(void *)(v0 + 128), _s14descr1005DEB71C16ExchangeResponseVMa);
    swift_endAccess(v0 + 64);
  }

  else
  {
    uint64_t v7 = *(void *)(v0 + 112);
    uint64_t v6 = *(void *)(v0 + 120);
    uint64_t v8 = *(void *)(v0 + 104);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v3, v8);
    swift_endAccess(v0 + 64);
    SFProgressContinuation.finish(with:)(v5, v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    sub_1001A4BC8(v5, _s14descr1005DEB71C16ExchangeResponseVMa);
  }

  uint64_t v9 = *(void *)(v0 + 144);
  uint64_t v11 = *(void *)(v0 + 88);
  uint64_t v10 = *(void *)(v0 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 112) + 56LL))( v10,  1LL,  1LL,  *(void *)(v0 + 104));
  uint64_t v12 = v11 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeContinuation;
  swift_beginAccess(v12, v0 + 40, 33LL, 0LL);
  sub_1001C9860(v10, v12, &qword_1006475D8);
  swift_endAccess(v0 + 40);
  swift_release(v9);
  uint64_t v13 = *(void *)(v0 + 120);
  uint64_t v14 = *(void *)(v0 + 96);
  swift_task_dealloc(*(void *)(v0 + 128));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001F29D4()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 88);
  sub_1001F3DB0( 0LL,  &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeConnection,  "Cancelling UPLOAD connection %s");
  uint64_t v4 = v3 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeContinuation;
  swift_beginAccess(v4, v0 + 16, 0LL, 0LL);
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1LL, v1);
  uint64_t v6 = *(void *)(v0 + 160);
  if (v5)
  {
    swift_errorRelease(*(void *)(v0 + 160));
  }

  else
  {
    uint64_t v8 = *(void *)(v0 + 112);
    uint64_t v7 = *(void *)(v0 + 120);
    uint64_t v9 = *(void *)(v0 + 104);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v4, v9);
    SFProgressContinuation.fail(with:)(v6, v9);
    swift_errorRelease(v6);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }

  uint64_t v10 = *(void *)(v0 + 144);
  uint64_t v12 = *(void *)(v0 + 88);
  uint64_t v11 = *(void *)(v0 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 112) + 56LL))( v11,  1LL,  1LL,  *(void *)(v0 + 104));
  uint64_t v13 = v12 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeContinuation;
  swift_beginAccess(v13, v0 + 40, 33LL, 0LL);
  sub_1001C9860(v11, v13, &qword_1006475D8);
  swift_endAccess(v0 + 40);
  swift_release(v10);
  uint64_t v14 = *(void *)(v0 + 120);
  uint64_t v15 = *(void *)(v0 + 96);
  swift_task_dealloc(*(void *)(v0 + 128));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001F2B3C(uint64_t a1, uint64_t a2)
{
  v2[5] = a2;
  uint64_t v3 = sub_100183098((uint64_t *)&unk_1006474F0);
  v2[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for SFAirDropSend.Failure(0LL);
  void v2[9] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[10] = v6;
  v2[11] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for ContinuousClock(0LL);
  uint8_t v2[12] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[13] = v8;
  v2[14] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v9 = static AirDropActor.shared;
  v2[15] = static AirDropActor.shared;
  return swift_task_switch(sub_1001F2C24, v9, 0LL);
}

uint64_t sub_1001F2C24(uint64_t a1)
{
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1006461D8 + dword_1006461D8);
  uint64_t v2 = (void *)swift_task_alloc(unk_1006461DC);
  *(void *)(v1 + 12_Block_object_dispose(va, 8) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1001F2CA4;
  return v4(0x70801D946C940000LL, 2LL, 0LL, 0LL, 1);
}

uint64_t sub_1001F2CA4()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 128LL);
  *(void *)(*(void *)v1 + 136LL) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = v2[15];
  (*(void (**)(void, void))(v2[13] + 8LL))(v2[14], v2[12]);
  if (v0) {
    uint64_t v5 = sub_1001FC2E4;
  }
  else {
    uint64_t v5 = sub_1001F2D20;
  }
  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_1001F2D20()
{
  if (qword_100643F08 != -1) {
    swift_once(&qword_100643F08, sub_1001EE100);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_1006473E0);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "EXCHANGE request timeout", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v7 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v8 = *(void *)(v0 + 72);
  uint64_t v9 = *(void *)(v0 + 48);
  uint64_t v10 = *(void *)(v0 + 56);
  uint64_t v11 = *(void *)(v0 + 40);

  sub_1001F3DB0( 1LL,  &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeConnection,  "Cancelling UPLOAD connection %s");
  (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))( v6,  enum case for SFAirDropSend.Failure.receiverDeclined(_:),  v8);
  uint64_t v12 = v11 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeContinuation;
  swift_beginAccess(v12, v0 + 16, 0LL, 0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v12, 1LL, v9))
  {
    uint64_t v14 = *(void *)(v0 + 80);
    uint64_t v13 = *(void *)(v0 + 88);
    uint64_t v16 = *(void *)(v0 + 64);
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v17 = *(void *)(v0 + 48);
    uint64_t v18 = *(void *)(v0 + 56);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v16, v12, v17);
    uint64_t v19 = sub_100183F14( &qword_100654D00,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
    uint64_t v20 = swift_allocError(v15, v19, 0LL, 0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v21, v13, v15);
    SFProgressContinuation.fail(with:)(v20, v17);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    swift_errorRelease(v20);
  }

  uint64_t v23 = *(void *)(v0 + 80);
  uint64_t v22 = *(void *)(v0 + 88);
  uint64_t v24 = *(void *)(v0 + 72);
  uint64_t v25 = sub_100183F14( &qword_100654D00,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
  swift_allocError(v24, v25, 0LL, 0LL);
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v26, v22, v24);
  swift_willThrow(v27);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  uint64_t v28 = *(void *)(v0 + 88);
  uint64_t v29 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 112));
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

__n128 sub_1001F2FB0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = _s14descr1005DD3D1C12ErrorRequestVMa(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v39 = v9;
  uint64_t v40 = (uint64_t)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v36 - v10;
  if (qword_100643F08 != -1) {
    swift_once(&qword_100643F08, sub_1001EE100);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v12, (uint64_t)qword_1006473E0);
  uint64_t v13 = sub_1001A4B84(a1, (uint64_t)v11, _s14descr1005DD3D1C12ErrorRequestVMa);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc(12LL, -1LL);
    uint64_t v37 = a1;
    uint64_t v17 = (uint8_t *)v16;
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    v42[0] = v18;
    uint64_t v38 = v2;
    uint64_t v36 = a2;
    *(_DWORD *)uint64_t v17 = 136315138;
    uint64_t v19 = CodableError.description.getter(v18);
    uint64_t v21 = (const char *)v20;
    uint64_t v41 = sub_10018CDB4(v19, v20, v42);
    uint64_t v3 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v21);
    sub_1001A4BC8((uint64_t)v11, _s14descr1005DD3D1C12ErrorRequestVMa);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Sending ERROR request %s", v17, 0xCu);
    swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    uint64_t v22 = v17;
    a1 = v37;
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  else
  {
    sub_1001A4BC8((uint64_t)v11, _s14descr1005DD3D1C12ErrorRequestVMa);
  }

  strcpy((char *)v42, "Send ERROR [");
  BYTE5(v42[1]) = 0;
  HIWORD(v42[1]) = -5120;
  uint64_t v23 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v24 = sub_100183F14( &qword_100647620,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
  v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
  object = (const char *)v25._object;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(object);
  v27._countAndFlagsBits = 93LL;
  v27._object = (void *)0xE100000000000000LL;
  String.append(_:)(v27);
  uint64_t v28 = v42[0];
  uint64_t v29 = (const char *)v42[1];
  uint64_t v30 = v40;
  sub_1001A4B84(a1, v40, _s14descr1005DD3D1C12ErrorRequestVMa);
  uint64_t v31 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v32 = (v31 + 24) & ~v31;
  uint64_t v33 = swift_allocObject(&unk_1005D4870, v32 + v39, v31 | 7);
  *(void *)(v33 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  sub_1001A4B40(v30, v33 + v32, _s14descr1005DD3D1C12ErrorRequestVMa);
  id v34 = v3;
  withProgressTask<A, B>(_:initialProgress:operation:)(v28, v29);
  swift_release(v33);
  return swift_bridgeObjectRelease(v29);
}

uint64_t sub_1001F32FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD v3[2] = a2;
  v3[3] = a3;
  uint64_t v4 = *(void *)(_s14descr1005DD3D1C12ErrorRequestVMa(0LL) - 8);
  v3[4] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  v3[5] = v5;
  v3[6] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100183098(&qword_100646560);
  v3[7] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v7 = static AirDropActor.shared;
  v3[8] = static AirDropActor.shared;
  return swift_task_switch(sub_1001F33B4, v7, 0LL);
}

uint64_t sub_1001F33B4()
{
  uint64_t v1 = *(void *)(v0[2] + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_primaryConnection);
  swift_retain(v1);
  sub_1001EE8F0();
  uint64_t v3 = v2;
  v0[9] = v2;
  swift_release(v1);
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  uint64_t v7 = v0[4];
  uint64_t v6 = v0[5];
  uint64_t v9 = (char *)v0[2];
  uint64_t v8 = v0[3];
  uint64_t v10 = *(void *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_errorConnection];
  *(void *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_errorConnection] = v3;
  swift_retain(v3);
  swift_release(v10);
  uint64_t v11 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v5, 1LL, 1LL, v11);
  sub_1001A4B84(v8, v4, _s14descr1005DD3D1C12ErrorRequestVMa);
  uint64_t v12 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v13 = (v12 + 24) & ~v12;
  unint64_t v14 = (v6 + v13 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v15 = swift_allocObject(&unk_1005D4898, v14 + 8, v12 | 7);
  v0[10] = v15;
  *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  sub_1001A4B40(v4, v15 + v13, _s14descr1005DD3D1C12ErrorRequestVMa);
  *(void *)(v15 + v14) = v3;
  uint64_t v16 = swift_allocObject(&unk_1005D48C0, 24LL, 7LL);
  v0[11] = v16;
  *(void *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  uint64_t v17 = async function pointer to concurrentRace<A>(priority:operation:against:)[1];
  uint64_t v18 = v9;
  swift_retain(v3);
  uint64_t v19 = v18;
  unint64_t v20 = (void *)swift_task_alloc(v17);
  v0[12] = v20;
  void *v20 = v0;
  v20[1] = sub_1001F35A4;
  return concurrentRace<A>(priority:operation:against:)();
}

uint64_t sub_1001F35A4()
{
  uint64_t v2 = *v1;
  uint64_t v4 = *(void *)(*v1 + 88);
  uint64_t v3 = *(void *)(*v1 + 96);
  uint64_t v5 = *(void *)(*v1 + 80);
  uint64_t v6 = *(void *)(*v1 + 56);
  *(void *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  sub_100187100(v6, &qword_100646560);
  swift_release(v4);
  swift_release(v5);
  if (v0) {
    uint64_t v7 = sub_1001F3688;
  }
  else {
    uint64_t v7 = sub_1001F3640;
  }
  return swift_task_switch(v7, *(void *)(v2 + 64), 0LL);
}

uint64_t sub_1001F3640()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 56);
  swift_release(*(void *)(v0 + 72));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001F3688()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 56));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001F36CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[2] = a2;
  void v4[3] = a3;
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v7 = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_endpoint;
  void v4[4] = static AirDropActor.shared;
  void v4[5] = v7;
  uint64_t v8 = (void *)swift_task_alloc(dword_100655DB4);
  void v4[6] = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_1001F3774;
  return sub_100442AB8(a3, a4);
}

uint64_t sub_1001F3774()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 48);
  uint64_t v4 = *v1;
  swift_task_dealloc(v3);
  if (v0) {
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
  uint64_t v6 = static AirDropActor.shared;
  *(void *)(v2 + 56) = static AirDropActor.shared;
  return swift_task_switch(sub_1001F37E8, v6, 0LL);
}

uint64_t sub_1001F37E8()
{
  uint64_t v1 = *(void *)(v0[2] + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_errorConnection);
  v0[8] = v1;
  if (!v1) {
    return swift_task_switch(sub_1001F39B8, v0[4], 0LL);
  }
  uint64_t v2 = dword_100655DAC;
  swift_retain(v1);
  uint64_t v3 = (void *)swift_task_alloc(v2);
  v0[9] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1001F3888;
  return sub_100443C1C(v1);
}

uint64_t sub_1001F3888(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *(void *)(*v3 + 72);
  *(void *)(*v3 + 80) = v2;
  swift_task_dealloc(v7);
  uint64_t v8 = *(void *)(v6 + 56);
  if (v2)
  {
    uint64_t v9 = sub_1001F3948;
  }

  else
  {
    sub_100189B20(a1, a2);
    uint64_t v9 = sub_1001F390C;
  }

  return swift_task_switch(v9, v8, 0LL);
}

uint64_t sub_1001F390C()
{
  return swift_task_switch(sub_1001F39B8, *(void *)(v0 + 32), 0LL);
}

uint64_t sub_1001F3948()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  sub_1001F3DB0( 0LL,  &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_errorConnection,  "Cancelling ERROR connection %s");
  swift_release(v2);
  swift_errorRelease(v1);
  return swift_task_switch(sub_1001F39B8, v0[4], 0LL);
}

uint64_t sub_1001F39B8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = v1 + *(int *)(_s14descr1005DD3D1C12ErrorRequestVMa(0LL) + 20);
  uint64_t v3 = type metadata accessor for CodableError(0LL);
  uint64_t v4 = sub_100183F14( &qword_100647700,  (uint64_t (*)(uint64_t))&type metadata accessor for CodableError,  (uint64_t)&protocol conformance descriptor for CodableError);
  swift_allocError(v3, v4, 0LL, 0LL);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(v5, v2, v3);
  swift_willThrow(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001F3A68(uint64_t a1, uint64_t a2)
{
  void v2[2] = a2;
  uint64_t v3 = type metadata accessor for ContinuousClock(0LL);
  void v2[3] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[4] = v4;
  v2[5] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v5 = static AirDropActor.shared;
  v2[6] = static AirDropActor.shared;
  return swift_task_switch(sub_1001F3AFC, v5, 0LL);
}

uint64_t sub_1001F3AFC(uint64_t a1)
{
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1006461D8 + dword_1006461D8);
  uint64_t v2 = (void *)swift_task_alloc(unk_1006461DC);
  *(void *)(v1 + 56) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1001F3B7C;
  return v4(5000000000000000000LL, 0LL, 0LL, 0LL, 1);
}

uint64_t sub_1001F3B7C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 56);
  uint64_t v5 = *(void *)(*v1 + 32);
  uint64_t v4 = *(void *)(*v1 + 40);
  uint64_t v6 = *(void *)(*v1 + 24);
  *(void *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0) {
    uint64_t v7 = sub_1001F3D7C;
  }
  else {
    uint64_t v7 = sub_1001F3C08;
  }
  return swift_task_switch(v7, *(void *)(v2 + 48), 0LL);
}

uint64_t sub_1001F3C08()
{
  if (qword_100643F08 != -1) {
    swift_once(&qword_100643F08, sub_1001EE100);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_1006473E0);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ERROR request timeout", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  sub_1001F3DB0( 1LL,  &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_errorConnection,  "Cancelling ERROR connection %s");
  uint64_t v6 = type metadata accessor for SFAirDropSend.Failure(0LL);
  uint64_t v7 = sub_100183F14( &qword_100654D00,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
  swift_allocError(v6, v7, 0LL, 0LL);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v6 - 8) + 104LL))( v8,  enum case for SFAirDropSend.Failure.receiverDeclined(_:),  v6);
  swift_willThrow(v9);
  swift_task_dealloc(*(void *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001F3D7C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001F3DB0(uint64_t result, uint64_t *a2, char *a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(v3 + *a2);
  if (v5)
  {
    uint64_t v7 = v3;
    char v8 = result;
    uint64_t v9 = qword_100643F08;
    swift_retain(v5);
    if (v9 != -1) {
      swift_once(&qword_100643F08, sub_1001EE100);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    sub_100186DE4(v10, (uint64_t)qword_1006473E0);
    uint64_t v11 = swift_retain_n(v5, 2LL);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      format = a3;
      unint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v15 = swift_slowAlloc(32LL, -1LL);
      uint64_t v22 = v15;
      *(_DWORD *)unint64_t v14 = 136315138;
      uint64_t v16 = NWConnection.debugDescription.getter();
      unint64_t v18 = v17;
      uint64_t v21 = sub_10018CDB4(v16, v17, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v14 + 4, v14 + 12);
      swift_release_n(v5, 2LL);
      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, format, v14, 0xCu);
      swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);

      if ((v8 & 1) == 0)
      {
LABEL_6:
        NWConnection.cancel()();
LABEL_9:
        swift_release(v5);
        uint64_t v19 = *(void *)(v7 + v4);
        *(void *)(v7 + v4) = 0LL;
        return swift_release(v19);
      }
    }

    else
    {

      swift_release_n(v5, 2LL);
      if ((v8 & 1) == 0) {
        goto LABEL_6;
      }
    }

    NWConnection.forceCancel()();
    goto LABEL_9;
  }

  return result;
}

__n128 sub_1001F3FA4(int a1)
{
  LODWORD(sub_10004D1BC((void *)&_mh_execute_header, v0, v1, "Failed to register wifi monitor %@\n", v2) = a1;
  uint64_t v3 = type metadata accessor for SFSandboxTokenURLPair(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100183098(&qword_100646560);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F08 != -1) {
    swift_once(&qword_100643F08, sub_1001EE100);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v10, (uint64_t)qword_1006473E0);
  uint64_t v11 = v1;
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    unint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    int v38 = v2;
    uint64_t v2 = v15;
    uint64_t v39 = v9;
    *(_DWORD *)unint64_t v14 = 136315138;
    uint64_t v41 = v15;
    uint64_t v37 = v14 + 4;
    sub_10020C5CC();
    unint64_t v17 = (const char *)v16;
    uint64_t v40 = sub_10018CDB4(v18, v16, &v41);
    uint64_t v9 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v37, v14 + 12);

    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Finish send connection to endpoint %s", v14, 0xCu);
    swift_arrayDestroy(v2, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v19 = v2;
    LOBYTE(sub_10004D1BC((void *)&_mh_execute_header, v0, v1, "Failed to register wifi monitor %@\n", v2) = v38;
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v20 = v2 & 1;
  sub_1001F3DB0( v20,  &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_helloConnection,  "Cancelling HELLO connection %s");
  sub_1001F3DB0( v20,  &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_askConnection,  "Cancelling ASK connection %s");
  sub_1001F3DB0( v20,  &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadConnection,  "Cancelling UPLOAD connection %s");
  sub_1001F3DB0( v20,  &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_exchangeConnection,  "Cancelling UPLOAD connection %s");
  uint64_t v21 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v9, 1LL, 1LL, v21);
  uint64_t v22 = swift_allocObject(&unk_1005D4780, 24LL, 7LL);
  swift_unknownObjectWeakInit(v22 + 16, v11);
  uint64_t v23 = v11;
  uint64_t v24 = qword_100643F28;
  swift_retain(v22);
  if (v24 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v25 = static AirDropActor.shared;
  uint64_t v26 = sub_100183F14( (unint64_t *)&qword_100656410,  (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor,  (uint64_t)&protocol conformance descriptor for AirDropActor);
  Swift::String v27 = (void *)swift_allocObject(&unk_1005D4820, 40LL, 7LL);
  _OWORD v27[2] = v25;
  v27[3] = v26;
  v27[4] = v22;
  swift_retain(v25);
  swift_release(v22);
  uint64_t v28 = sub_1001B37E8((uint64_t)v9, (uint64_t)&unk_1006476A0, (uint64_t)v27);
  swift_release(v28);
  uint64_t v29 = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sandboxTokenURLPairs;
  uint64_t v30 = *(void *)&v23[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sandboxTokenURLPairs];
  uint64_t v31 = *(void *)(v30 + 16);
  if (v31)
  {
    uint64_t v39 = v23;
    uint64_t v32 = v30 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v33 = *(void *)(v4 + 72);
    id v34 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    swift_bridgeObjectRetain((const char *)v30);
    do
    {
      v34(v6, v32, v3);
      SFSandboxTokenURLPair.releaseSandboxExtension()();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      v32 += v33;
      --v31;
    }

    while (v31);
    swift_bridgeObjectRelease((const char *)v30);
    uint64_t v23 = v39;
    uint64_t v30 = *(void *)&v39[v29];
  }

  *(void *)&v23[v29] = _swiftEmptyArrayStorage;
  return swift_bridgeObjectRelease((const char *)v30);
}

uint64_t sub_1001F43B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 64) = a4;
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v5 = static AirDropActor.shared;
  *(void *)(v4 + 72) = static AirDropActor.shared;
  return swift_task_switch(sub_1001F4424, v5, 0LL);
}

uint64_t sub_1001F4424()
{
  uint64_t v1 = *(void *)(v0 + 64) + 16LL;
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    uint64_t v4 = Strong;
    uint64_t v5 = *(void *)&Strong[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sendCompressionAdapter];
    *(void *)(v0 + 80) = v5;
    if (v5)
    {
      swift_retain(v5);

      uint64_t v6 = (void *)swift_task_alloc(dword_100645554);
      *(void *)(v0 + 8_Block_object_dispose(va, 8) = v6;
      *uint64_t v6 = v0;
      v6[1] = sub_1001F4510;
      return sub_1001923C8();
    }
  }

  uint64_t v8 = *(void *)(v0 + 64) + 16LL;
  swift_beginAccess(v8, v0 + 40, 0LL, 0LL);
  uint64_t v10 = (char *)swift_unknownObjectWeakLoadStrong(v8, v9);
  if (v10)
  {
    uint64_t v11 = *(void *)&v10[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sendCompressionAdapter];
    *(void *)&v10[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sendCompressionAdapter] = 0LL;

    swift_release(v11);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001F4510()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 80LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 72LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 88LL));
  swift_release(v1);
  return swift_task_switch(sub_1001F4570, v2, 0LL);
}

uint64_t sub_1001F4570()
{
  uint64_t v1 = *(void *)(v0 + 64) + 16LL;
  swift_beginAccess(v1, v0 + 40, 0LL, 0LL);
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    uint64_t v4 = *(void *)&Strong[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sendCompressionAdapter];
    *(void *)&Strong[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_sendCompressionAdapter] = 0LL;

    swift_release(v4);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001F45DC()
{
  v1[13] = v0;
  uint64_t v2 = sub_100183098(&qword_1006475D0);
  v1[14] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100183098(&qword_1006474E0);
  v1[15] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint8_t v1[16] = v4;
  v1[17] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v5 = static AirDropActor.shared;
  v1[18] = static AirDropActor.shared;
  return swift_task_switch(sub_1001F4698, v5, 0LL);
}

uint64_t sub_1001F4698()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 104) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadConnection);
  *(void *)(v0 + 152) = v1;
  if (v1)
  {
    uint64_t v2 = dword_100655D7C;
    swift_retain(v1);
    uint64_t v3 = (void *)swift_task_alloc(v2);
    *(void *)(v0 + 160) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1001F4744;
    return sub_1004434E8(v1);
  }

  else
  {
    uint64_t v5 = *(void *)(v0 + 112);
    swift_task_dealloc(*(void *)(v0 + 136));
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1001F4744(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void *)(*(void *)v3 + 160LL);
  v4[21] = a1;
  v4[22] = a2;
  v4[23] = v2;
  swift_task_dealloc(v5);
  if (v2) {
    uint64_t v6 = sub_1001F4904;
  }
  else {
    uint64_t v6 = sub_1001F47B4;
  }
  return swift_task_switch(v6, v4[18], 0LL);
}

uint64_t sub_1001F47B4()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 104) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadContinuation;
  swift_beginAccess(v3, v0 + 64, 0LL, 0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1LL, v1))
  {
    uint64_t v4 = *(void *)(v0 + 168);
    unint64_t v5 = *(void *)(v0 + 176);
  }

  else
  {
    uint64_t v7 = *(void *)(v0 + 168);
    unint64_t v6 = *(void *)(v0 + 176);
    uint64_t v9 = *(void *)(v0 + 128);
    uint64_t v8 = *(void *)(v0 + 136);
    uint64_t v10 = *(void *)(v0 + 120);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v3, v10);
    *(void *)(v0 + 8_Block_object_dispose(va, 8) = v7;
    *(void *)(v0 + 96) = v6;
    SFProgressContinuation.finish(with:)(v0 + 88, v10);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    uint64_t v4 = v7;
    unint64_t v5 = v6;
  }

  sub_100189B20(v4, v5);
  uint64_t v11 = *(void *)(v0 + 152);
  uint64_t v13 = *(void *)(v0 + 104);
  uint64_t v12 = *(void *)(v0 + 112);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 128) + 56LL))( v12,  1LL,  1LL,  *(void *)(v0 + 120));
  uint64_t v14 = v13 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadContinuation;
  swift_beginAccess(v14, v0 + 40, 33LL, 0LL);
  sub_1001C9860(v12, v14, &qword_1006475D0);
  swift_endAccess(v0 + 40);
  swift_release(v11);
  uint64_t v15 = *(void *)(v0 + 112);
  swift_task_dealloc(*(void *)(v0 + 136));
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001F4904()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 104);
  sub_1001F3DB0( 0LL,  &OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadConnection,  "Cancelling UPLOAD connection %s");
  uint64_t v4 = v3 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadContinuation;
  swift_beginAccess(v4, v0 + 16, 0LL, 0LL);
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1LL, v1);
  uint64_t v6 = *(void *)(v0 + 184);
  if (v5)
  {
    swift_errorRelease(*(void *)(v0 + 184));
  }

  else
  {
    uint64_t v8 = *(void *)(v0 + 128);
    uint64_t v7 = *(void *)(v0 + 136);
    uint64_t v9 = *(void *)(v0 + 120);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v4, v9);
    SFProgressContinuation.fail(with:)(v6, v9);
    swift_errorRelease(v6);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }

  uint64_t v10 = *(void *)(v0 + 152);
  uint64_t v12 = *(void *)(v0 + 104);
  uint64_t v11 = *(void *)(v0 + 112);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 128) + 56LL))( v11,  1LL,  1LL,  *(void *)(v0 + 120));
  uint64_t v13 = v12 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropSendConnection_uploadContinuation;
  swift_beginAccess(v13, v0 + 40, 33LL, 0LL);
  sub_1001C9860(v11, v13, &qword_1006475D0);
  swift_endAccess(v0 + 40);
  swift_release(v10);
  uint64_t v14 = *(void *)(v0 + 112);
  swift_task_dealloc(*(void *)(v0 + 136));
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}