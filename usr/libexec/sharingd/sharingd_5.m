_BYTE *sub_10039A364(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  char *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  if (a1 != a2)
  {
    sub_1001A4BC8((uint64_t)a1, type metadata accessor for SDAirDropMessage);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
        v7 = _s12HelloRequestVMa(0LL);
        *(_DWORD *)&a1[*(int *)(v7 + 20)] = *(_DWORD *)&a2[*(int *)(v7 + 20)];
        a1[*(int *)(v7 + 24)] = a2[*(int *)(v7 + 24)];
        v8 = a1;
        v9 = a3;
        v10 = 0LL;
        goto LABEL_25;
      case 4u:
        v11 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
        v12 = *(void *)(v11 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(a2, 1LL, v11))
        {
          v13 = sub_100183098((uint64_t *)&unk_100647610);
          memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 32))(a1, a2, v11);
          (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v12 + 56))(a1, 0LL, 1LL, v11);
        }

        v38 = (int *)_s14descr1005DF7D1C10AskRequestVMa(0LL);
        v39 = v38[5];
        v40 = &a1[v39];
        v41 = &a2[v39];
        v42 = type metadata accessor for SFAirDrop.TransferType(0LL);
        v43 = *(void *)(v42 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1LL, v42))
        {
          v44 = sub_100183098(&qword_100647608);
          memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v40, v41, v42);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0LL, 1LL, v42);
        }

        *(_OWORD *)&a1[v38[6]] = *(_OWORD *)&a2[v38[6]];
        *(_OWORD *)&a1[v38[7]] = *(_OWORD *)&a2[v38[7]];
        *(_OWORD *)&a1[v38[8]] = *(_OWORD *)&a2[v38[8]];
        *(_OWORD *)&a1[v38[9]] = *(_OWORD *)&a2[v38[9]];
        *(_OWORD *)&a1[v38[10]] = *(_OWORD *)&a2[v38[10]];
        *(void *)&a1[v38[11]] = *(void *)&a2[v38[11]];
        *(void *)&a1[v38[12]] = *(void *)&a2[v38[12]];
        *(_OWORD *)&a1[v38[13]] = *(_OWORD *)&a2[v38[13]];
        *(_OWORD *)&a1[v38[14]] = *(_OWORD *)&a2[v38[14]];
        *(_OWORD *)&a1[v38[15]] = *(_OWORD *)&a2[v38[15]];
        a1[v38[16]] = a2[v38[16]];
        *(_OWORD *)&a1[v38[17]] = *(_OWORD *)&a2[v38[17]];
        v8 = a1;
        v9 = a3;
        v10 = 4LL;
        goto LABEL_25;
      case 6u:
        v14 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
        v15 = *(void *)(v14 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(a2, 1LL, v14))
        {
          v16 = sub_100183098((uint64_t *)&unk_100647610);
          memcpy(a1, a2, *(void *)(*(void *)(v16 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v15 + 32))(a1, a2, v14);
          (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v15 + 56))(a1, 0LL, 1LL, v14);
        }

        v45 = (int *)_s14descr1005D9BD1C13UploadRequestVMa(0LL);
        *(void *)&a1[v45[5]] = *(void *)&a2[v45[5]];
        *(_OWORD *)&a1[v45[6]] = *(_OWORD *)&a2[v45[6]];
        *(_OWORD *)&a1[v45[7]] = *(_OWORD *)&a2[v45[7]];
        a1[v45[8]] = a2[v45[8]];
        *(_OWORD *)&a1[v45[9]] = *(_OWORD *)&a2[v45[9]];
        *(_OWORD *)&a1[v45[10]] = *(_OWORD *)&a2[v45[10]];
        v8 = a1;
        v9 = a3;
        v10 = 6LL;
        goto LABEL_25;
      case 8u:
        v17 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v17 - 8) + 32LL))(a1, a2, v17);
        v18 = (int *)_s14descr1005DEB71C15ExchangeRequestVMa(0LL);
        *(_OWORD *)&a1[v18[5]] = *(_OWORD *)&a2[v18[5]];
        *(_OWORD *)&a1[v18[6]] = *(_OWORD *)&a2[v18[6]];
        v19 = v18[7];
        v20 = &a1[v19];
        v21 = &a2[v19];
        v22 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0LL);
        v23 = *(void *)(v22 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1LL, v22))
        {
          v24 = sub_100183098(&qword_100651E70);
          memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0LL, 1LL, v22);
        }

        *(_OWORD *)&a1[v18[8]] = *(_OWORD *)&a2[v18[8]];
        v46 = v18[9];
        v47 = &a1[v46];
        v48 = &a2[v46];
        v49 = *((_OWORD *)v48 + 1);
        *(_OWORD *)v47 = *(_OWORD *)v48;
        *((_OWORD *)v47 + 1) = v49;
        *((void *)v47 + 10) = *((void *)v48 + 10);
        v50 = *((_OWORD *)v48 + 4);
        v51 = *((_OWORD *)v48 + 2);
        *((_OWORD *)v47 + 3) = *((_OWORD *)v48 + 3);
        *((_OWORD *)v47 + 4) = v50;
        *((_OWORD *)v47 + 2) = v51;
        v8 = a1;
        v9 = a3;
        v10 = 8LL;
        goto LABEL_25;
      case 9u:
        v25 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v25 - 8) + 32LL))(a1, a2, v25);
        v26 = (int *)_s14descr1005DEB71C16ExchangeResponseVMa(0LL);
        *(_OWORD *)&a1[v26[5]] = *(_OWORD *)&a2[v26[5]];
        *(_OWORD *)&a1[v26[6]] = *(_OWORD *)&a2[v26[6]];
        v27 = v26[7];
        v28 = &a1[v27];
        v29 = &a2[v27];
        v30 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0LL);
        v31 = *(void *)(v30 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1LL, v30))
        {
          v32 = sub_100183098(&qword_100651E70);
          memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v28, v29, v30);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0LL, 1LL, v30);
        }

        *(_OWORD *)&a1[v26[8]] = *(_OWORD *)&a2[v26[8]];
        v52 = v26[9];
        v53 = &a1[v52];
        v54 = &a2[v52];
        v55 = *((_OWORD *)v54 + 1);
        *(_OWORD *)v53 = *(_OWORD *)v54;
        *((_OWORD *)v53 + 1) = v55;
        *((void *)v53 + 10) = *((void *)v54 + 10);
        v56 = *((_OWORD *)v54 + 4);
        v57 = *((_OWORD *)v54 + 2);
        *((_OWORD *)v53 + 3) = *((_OWORD *)v54 + 3);
        *((_OWORD *)v53 + 4) = v56;
        *((_OWORD *)v53 + 2) = v57;
        v8 = a1;
        v9 = a3;
        v10 = 9LL;
        goto LABEL_25;
      case 0xCu:
        v33 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v33 - 8) + 32LL))(a1, a2, v33);
        v34 = *(int *)(_s14descr1005DD3D1C12ErrorRequestVMa(0LL) + 20);
        v35 = &a1[v34];
        v36 = &a2[v34];
        v37 = type metadata accessor for CodableError(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32LL))(v35, v36, v37);
        v8 = a1;
        v9 = a3;
        v10 = 12LL;
LABEL_25:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
        break;
    }
  }

  return a1;
}

uint64_t sub_10039A958(uint64_t a1)
{
  uint64_t result = _s12HelloRequestVMa(319LL);
  if (v3 <= 0x3F)
  {
    v9[0] = *(void *)(result - 8) + 64LL;
    v9[1] = &unk_1004D8308;
    v9[2] = &unk_1004D8320;
    v9[3] = &unk_1004D8338;
    uint64_t result = _s14descr1005DF7D1C10AskRequestVMa(319LL);
    if (v4 <= 0x3F)
    {
      v9[4] = *(void *)(result - 8) + 64LL;
      v9[5] = &unk_1004D8350;
      uint64_t result = _s14descr1005D9BD1C13UploadRequestVMa(319LL);
      if (v5 <= 0x3F)
      {
        v9[6] = *(void *)(result - 8) + 64LL;
        v9[7] = &unk_1004D8368;
        uint64_t result = _s14descr1005DEB71C15ExchangeRequestVMa(319LL);
        if (v6 <= 0x3F)
        {
          v9[8] = *(void *)(result - 8) + 64LL;
          uint64_t result = _s14descr1005DEB71C16ExchangeResponseVMa(319LL);
          if (v7 <= 0x3F)
          {
            v9[9] = *(void *)(result - 8) + 64LL;
            v9[10] = &unk_1004D8380;
            v9[11] = &unk_1004D8368;
            uint64_t result = _s14descr1005DD3D1C12ErrorRequestVMa(319LL);
            if (v8 <= 0x3F)
            {
              v9[12] = *(void *)(result - 8) + 64LL;
              v9[13] = &unk_1004D8368;
              swift_initEnumMetadataMultiPayload(a1, 256LL, 14LL, v9);
              return 0LL;
            }
          }
        }
      }
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SDAirDropMessages()
{
  return &type metadata for SDAirDropMessages;
}

void sub_10039AA90()
{
  uint64_t v1 = _s14descr1005DD3D1C12ErrorRequestVMa(0LL);
  __chkstk_darwin(v1);
  uint64_t v2 = _s14descr1005DEB71C16ExchangeResponseVMa(0LL);
  __chkstk_darwin(v2);
  uint64_t v3 = _s14descr1005DEB71C15ExchangeRequestVMa(0LL);
  __chkstk_darwin(v3);
  uint64_t v4 = _s14descr1005D9BD1C13UploadRequestVMa(0LL);
  __chkstk_darwin(v4);
  uint64_t v5 = _s14descr1005DF7D1C10AskRequestVMa(0LL);
  __chkstk_darwin(v5);
  uint64_t v6 = _s12HelloRequestVMa(0LL);
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for SDAirDropMessage(0LL);
  __chkstk_darwin(v7);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100265DCC(v0, (uint64_t)v9);
  v10 = (char *)sub_10039AC5C + 4 * byte_1004D827A[swift_getEnumCaseMultiPayload(v9, v7)];
  __asm { BR              X10 }

uint64_t sub_10039AC5C()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = Data.description.getter(*v0, v2);
  sub_100189B20(v1, v2);
  return v3;
}

uint64_t sub_10039B03C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100186DFC(v0, qword_100651E58);
  uint64_t v1 = sub_100186DE4(v0, (uint64_t)qword_100651E58);
  if (qword_100643FD8 != -1) {
    swift_once(&qword_100643FD8, sub_10023A408);
  }
  uint64_t v2 = sub_100186DE4(v0, (uint64_t)qword_1006695F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_10039B0CC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10039B108 + 4 * byte_1004D8288[a1]))( 0x7165526F6C6C6568LL,  0xEC00000074736575LL);
}

uint64_t sub_10039B108()
{
  return 0x7365526F6C6C6568LL;
}

void sub_10039B260(void *a1)
{
  uint64_t v2 = sub_100183098(&qword_100652068);
  uint64_t v82 = *(void *)(v2 - 8);
  uint64_t v83 = v2;
  __chkstk_darwin(v2);
  v81 = (char *)v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100183098(&qword_100652070);
  uint64_t v79 = *(void *)(v4 - 8);
  uint64_t v80 = v4;
  __chkstk_darwin(v4);
  v78 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v75 = _s14descr1005DD3D1C12ErrorRequestVMa(0LL);
  __chkstk_darwin(v75);
  v77 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v74 = sub_100183098(&qword_100652078);
  uint64_t v72 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  v70 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v76 = sub_100183098(&qword_100652080);
  uint64_t v73 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  v71 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100183098(&qword_100652088);
  uint64_t v68 = *(void *)(v9 - 8);
  uint64_t v69 = v9;
  __chkstk_darwin(v9);
  v67 = (char *)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = _s14descr1005DEB71C16ExchangeResponseVMa(0LL);
  __chkstk_darwin(v64);
  v66 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v65 = sub_100183098(&qword_100652090);
  uint64_t v63 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  v62 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v60 = _s14descr1005DEB71C15ExchangeRequestVMa(0LL);
  __chkstk_darwin(v60);
  v61 = (char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100183098(&qword_100652098);
  uint64_t v58 = *(void *)(v14 - 8);
  uint64_t v59 = v14;
  __chkstk_darwin(v14);
  v57 = (char *)v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100183098(&qword_1006520A0);
  uint64_t v55 = *(void *)(v16 - 8);
  uint64_t v56 = v16;
  __chkstk_darwin(v16);
  v54 = (char *)v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v49 = _s14descr1005D9BD1C13UploadRequestVMa(0LL);
  __chkstk_darwin(v49);
  v52 = (char *)v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = sub_100183098(&qword_1006520A8);
  uint64_t v51 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  v50 = (char *)v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_100183098(&qword_1006520B0);
  uint64_t v47 = *(void *)(v20 - 8);
  uint64_t v48 = v20;
  __chkstk_darwin(v20);
  v45 = (char *)v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = _s14descr1005DF7D1C10AskRequestVMa(0LL);
  __chkstk_darwin(v41);
  v44 = (char *)v40 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = sub_100183098(&qword_1006520B8);
  uint64_t v43 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  v42 = (char *)v40 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = sub_100183098(&qword_1006520C0);
  v40[7] = *(void *)(v24 - 8);
  v40[8] = v24;
  __chkstk_darwin(v24);
  v40[6] = (char *)v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = sub_100183098(&qword_1006520C8);
  v40[4] = *(void *)(v26 - 8);
  v40[5] = v26;
  __chkstk_darwin(v26);
  v40[3] = (char *)v40 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = sub_100183098(&qword_1006520D0);
  v40[1] = *(void *)(v28 - 8);
  v40[2] = v28;
  __chkstk_darwin(v28);
  v40[0] = (char *)v40 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = _s12HelloRequestVMa(0LL);
  __chkstk_darwin(v30);
  uint64_t v31 = type metadata accessor for SDAirDropMessage(0LL);
  __chkstk_darwin(v31);
  v33 = (char *)v40 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v87 = sub_100183098(&qword_1006520D8);
  uint64_t v84 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  v35 = (char *)v40 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = a1[3];
  uint64_t v36 = a1[4];
  sub_10019A708(a1, v37);
  unint64_t v38 = sub_10039E588();
  v85 = v35;
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SDAirDropMessage.CodingKeys,  &type metadata for SDAirDropMessage.CodingKeys,  v38,  v37,  v36);
  sub_100265DCC(v86, (uint64_t)v33);
  v39 = (char *)sub_10039B86C + 4 * word_1004D8296[swift_getEnumCaseMultiPayload(v33, v31)];
  __asm { BR              X10 }

uint64_t sub_10039B86C()
{
  *(_BYTE *)(v4 - 240) = 0;
  unint64_t v5 = sub_10039EA94();
  uint64_t v6 = *v0;
  uint64_t v7 = *(void *)(v4 - 72);
  uint64_t v8 = v0[53];
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for SDAirDropMessage.HelloRequestCodingKeys,  v4 - 240,  v7,  &type metadata for SDAirDropMessage.HelloRequestCodingKeys,  v5);
  uint64_t v9 = sub_100183F14(&qword_100652130, _s12HelloRequestVMa, (uint64_t)&unk_1004DC330);
  uint64_t v10 = v0[2];
  KeyedEncodingContainer.encode<A>(_:forKey:)(v2, v11, v10, v1, v9);
  (*(void (**)(uint64_t, uint64_t))(v0[1] + 8))(v6, v10);
  sub_1001A4BC8(v2, _s12HelloRequestVMa);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0[52] + 8))(v8, v7);
}

uint64_t sub_10039C324@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v97 = a2;
  uint64_t v83 = sub_100183098(&qword_100651F20);
  v69[23] = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  v103 = (char *)v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v84 = sub_100183098(&qword_100651F28);
  v69[22] = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  v96 = (char *)v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v82 = sub_100183098(&qword_100651F30);
  v69[21] = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  v95 = (char *)v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v81 = sub_100183098(&qword_100651F38);
  v69[20] = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  v94 = (char *)v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v80 = sub_100183098(&qword_100651F40);
  v69[19] = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  v93 = (char *)v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v79 = sub_100183098(&qword_100651F48);
  v69[12] = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  v92 = (char *)v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v78 = sub_100183098(&qword_100651F50);
  v69[18] = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  v91 = (char *)v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = sub_100183098(&qword_100651F58);
  v69[17] = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  v90 = (char *)v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v76 = sub_100183098(&qword_100651F60);
  v69[16] = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  v89 = (char *)v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v75 = sub_100183098(&qword_100651F68);
  v69[15] = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  v88 = (char *)v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v74 = sub_100183098(&qword_100651F70);
  uint64_t v101 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v87 = (char *)v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v73 = sub_100183098(&qword_100651F78);
  v69[14] = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v86 = (char *)v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v72 = sub_100183098(&qword_100651F80);
  v69[13] = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  v85 = (char *)v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v70 = sub_100183098(&qword_100651F88);
  uint64_t v71 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  v100 = (char *)v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v102 = sub_100183098(&qword_100651F90);
  uint64_t v98 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  v106 = (char *)v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v99 = type metadata accessor for SDAirDropMessage(0LL);
  uint64_t v18 = __chkstk_darwin(v99);
  v69[11] = (char *)v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v18);
  v69[27] = (char *)v69 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  v69[9] = (char *)v69 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  v69[10] = (char *)v69 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  v69[26] = (char *)v69 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  v69[25] = (char *)v69 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  v69[8] = (char *)v69 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  v69[24] = (char *)v69 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  v69[7] = (char *)v69 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  unint64_t v38 = (char *)v69 - v37;
  uint64_t v39 = __chkstk_darwin(v36);
  uint64_t v41 = (char *)v69 - v40;
  uint64_t v42 = __chkstk_darwin(v39);
  v44 = (char *)v69 - v43;
  uint64_t v45 = __chkstk_darwin(v42);
  uint64_t v47 = (char *)v69 - v46;
  uint64_t v48 = __chkstk_darwin(v45);
  v50 = (char *)v69 - v49;
  __chkstk_darwin(v48);
  v52 = (char *)v69 - v51;
  uint64_t v54 = a1[3];
  uint64_t v53 = a1[4];
  v104 = a1;
  sub_10019A708(a1, v54);
  unint64_t v55 = sub_10039E588();
  uint64_t v56 = v105;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SDAirDropMessage.CodingKeys,  &type metadata for SDAirDropMessage.CodingKeys,  v55,  v54,  v53);
  if (!v56)
  {
    v69[1] = v47;
    v69[4] = v50;
    v69[2] = v44;
    v69[5] = v38;
    v69[3] = v41;
    uint64_t v105 = 0LL;
    uint64_t v57 = v99;
    v69[6] = v52;
    uint64_t v58 = v102;
    uint64_t v59 = v106;
    uint64_t v60 = KeyedDecodingContainer.allKeys.getter(v102);
    v61 = (const char *)v60;
    if (*(void *)(v60 + 16) == 1LL) {
      __asm { BR              X10 }
    }

    uint64_t v62 = type metadata accessor for DecodingError(0LL);
    swift_allocError(v62, &protocol witness table for DecodingError, 0LL, 0LL);
    uint64_t v64 = v63;
    sub_100183098(&qword_100650658);
    *uint64_t v64 = v57;
    uint64_t v65 = KeyedDecodingContainer.codingPath.getter(v58);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)( v65,  0xD00000000000002BLL,  0x800000010050BFA0LL,  0LL);
    uint64_t v66 = (*(uint64_t (**)(uint64_t *, void, uint64_t))(*(void *)(v62 - 8) + 104LL))( v64,  enum case for DecodingError.typeMismatch(_:),  v62);
    swift_willThrow(v66);
    __n128 v67 = swift_bridgeObjectRelease(v61);
    (*(void (**)(char *, uint64_t, __n128))(v98 + 8))(v59, v58, v67);
  }

  return sub_10018709C(v104);
}

void sub_10039CC34()
{
  *(_BYTE *)(v3 - 240) = 1;
  unint64_t v4 = sub_10039EA0C();
  uint64_t v5 = *(void *)(v3 - 408);
  uint64_t v6 = v1;
  uint64_t v7 = *(void *)(v3 - 72);
  uint64_t v8 = *(void *)(v3 - 248);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for SDAirDropMessage.HelloResponseCodingKeys,  v3 - 240,  v1,  &type metadata for SDAirDropMessage.HelloResponseCodingKeys,  v4);
  if (!v8)
  {
    uint64_t v9 = v0;
    unint64_t v10 = sub_10039EA50();
    uint64_t v11 = *(void *)(v3 - 512);
    KeyedDecodingContainer.decode<A>(_:forKey:)( (void *)(v3 - 240),  &_s13HelloResponseVN,  v12,  v11,  &_s13HelloResponseVN,  v10);
    uint64_t v13 = *(void *)(v3 - 304);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 648) + 8LL))(v5, v11);
    __n128 v14 = swift_bridgeObjectRelease(v2);
    (*(void (**)(void, uint64_t, __n128))(v13 + 8))(*(void *)(v3 - 72), v6, v14);
    char v15 = *(_BYTE *)(v3 - 236);
    uint64_t v16 = *(void *)(v3 - 744);
    *(_DWORD *)uint64_t v16 = *(_DWORD *)(v3 - 240);
    *(_BYTE *)(v16 + 4) = v15;
    swift_storeEnumTagMultiPayload(v16, v9, 1LL);
    sub_1001A4B40(v16, *(void *)(v3 - 704), type metadata accessor for SDAirDropMessage);
    JUMPOUT(0x10039DA50LL);
  }

  __n128 v17 = swift_bridgeObjectRelease(v2);
  (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)(v3 - 304) + 8LL))(v7, v1, v17);
  JUMPOUT(0x10039CC08LL);
}

void sub_10039D580()
{
  *(_BYTE *)(v3 - 240) = 12;
  unint64_t v4 = sub_10039E610();
  uint64_t v5 = *(void *)(v3 - 320);
  uint64_t v6 = v1;
  uint64_t v7 = *(void *)(v3 - 72);
  uint64_t v8 = *(void *)(v3 - 248);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for SDAirDropMessage.ErrorRequestCodingKeys,  v3 - 240,  v1,  &type metadata for SDAirDropMessage.ErrorRequestCodingKeys,  v4);
  if (v8)
  {
    __n128 v9 = swift_bridgeObjectRelease(v2);
    (*(void (**)(uint64_t, uint64_t, __n128))(*(void *)(v3 - 304) + 8LL))(v7, v1, v9);
  }

  else
  {
    uint64_t v10 = v0;
    uint64_t v11 = _s14descr1005DD3D1C12ErrorRequestVMa(0LL);
    uint64_t v12 = sub_100183F14(&qword_100651FB0, _s14descr1005DD3D1C12ErrorRequestVMa, (uint64_t)&unk_1004D7A70);
    uint64_t v13 = *(void **)(v3 - 536);
    uint64_t v14 = *(void *)(v3 - 416);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v13, v11, v15, v14, v11, v12);
    uint64_t v16 = *(void *)(v3 - 304);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 576) + 8LL))(v5, v14);
    __n128 v17 = swift_bridgeObjectRelease(v2);
    (*(void (**)(void, uint64_t, __n128))(v16 + 8))(*(void *)(v3 - 72), v6, v17);
    swift_storeEnumTagMultiPayload(v13, v10, 12LL);
    uint64_t v18 = *(void *)(v3 - 704);
    sub_1001A4B40((uint64_t)v13, v18, type metadata accessor for SDAirDropMessage);
    sub_1001A4B40(v18, *(void *)(v3 - 312), type metadata accessor for SDAirDropMessage);
  }

  JUMPOUT(0x10039CC08LL);
}

void sub_10039D5E4()
{
  *(_BYTE *)(v3 - 240) = 13;
  unint64_t v4 = sub_10039E5CC();
  uint64_t v5 = *(void *)(v3 - 248);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for SDAirDropMessage.ErrorResponseCodingKeys,  v3 - 240,  v1,  &type metadata for SDAirDropMessage.ErrorResponseCodingKeys,  v4);
  if (!v5)
  {
    unint64_t v6 = sub_10020C198();
    uint64_t v7 = *(void *)(v3 - 424);
    KeyedDecodingContainer.decode<A>(_:forKey:)( (void *)(v3 - 240),  &type metadata for Data,  v8,  v7,  &type metadata for Data,  v6);
    uint64_t v9 = *(void *)(v3 - 304);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 568) + 8LL))(v0, v7);
    __n128 v10 = swift_bridgeObjectRelease(v2);
    (*(void (**)(void, uint64_t, __n128))(v9 + 8))(*(void *)(v3 - 72), v1, v10);
    *(_OWORD *)*(void *)(v3 - 664) = *(_OWORD *)(v3 - 240);
    JUMPOUT(0x10039D9A8LL);
  }

  JUMPOUT(0x10039CBE4LL);
}

uint64_t sub_10039DAD8()
{
  return 0x74736575716572LL;
}

uint64_t sub_10039DAF4(uint64_t a1)
{
  unint64_t v2 = sub_10039E8B8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10039DB1C(uint64_t a1)
{
  unint64_t v2 = sub_10039E8B8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10039DB44()
{
  return 0x65736E6F70736572LL;
}

uint64_t sub_10039DB60(uint64_t a1)
{
  unint64_t v2 = sub_10039E830();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10039DB88(uint64_t a1)
{
  unint64_t v2 = sub_10039E830();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10039DBB0()
{
  return sub_10039B0CC(*v0);
}

uint64_t sub_10039DBB8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10039FBA4(a1, a2);
  *a3 = result;
  return result;
}

void sub_10039DBDC(_BYTE *a1@<X8>)
{
  *a1 = 14;
}

uint64_t sub_10039DBE8(uint64_t a1)
{
  unint64_t v2 = sub_10039E588();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10039DC10(uint64_t a1)
{
  unint64_t v2 = sub_10039E588();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10039DC38(uint64_t a1)
{
  unint64_t v2 = sub_10039E984();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10039DC60(uint64_t a1)
{
  unint64_t v2 = sub_10039E984();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10039DC88(uint64_t a1)
{
  unint64_t v2 = sub_10039E8FC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10039DCB0(uint64_t a1)
{
  unint64_t v2 = sub_10039E8FC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10039DCD8(uint64_t a1)
{
  unint64_t v2 = sub_10039E610();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10039DD00(uint64_t a1)
{
  unint64_t v2 = sub_10039E610();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10039DD28(uint64_t a1)
{
  unint64_t v2 = sub_10039E5CC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10039DD50(uint64_t a1)
{
  unint64_t v2 = sub_10039E5CC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10039DD78(uint64_t a1)
{
  unint64_t v2 = sub_10039E764();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10039DDA0(uint64_t a1)
{
  unint64_t v2 = sub_10039E764();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10039DDC8(uint64_t a1)
{
  unint64_t v2 = sub_10039E720();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10039DDF0(uint64_t a1)
{
  unint64_t v2 = sub_10039E720();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10039DE18(uint64_t a1)
{
  unint64_t v2 = sub_10039EA94();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10039DE40(uint64_t a1)
{
  unint64_t v2 = sub_10039EA94();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10039DE68(uint64_t a1)
{
  unint64_t v2 = sub_10039EA0C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10039DE90(uint64_t a1)
{
  unint64_t v2 = sub_10039EA0C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10039DEB8(uint64_t a1)
{
  unint64_t v2 = sub_10039E698();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10039DEE0(uint64_t a1)
{
  unint64_t v2 = sub_10039E698();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10039DF08(uint64_t a1)
{
  unint64_t v2 = sub_10039E654();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10039DF30(uint64_t a1)
{
  unint64_t v2 = sub_10039E654();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10039DF58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x74736575716572LL && a2 == 0xE700000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xE700000000000000LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74736575716572LL, 0xE700000000000000LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10039DFEC(uint64_t a1)
{
  unint64_t v2 = sub_10039E7EC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10039E014(uint64_t a1)
{
  unint64_t v2 = sub_10039E7EC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10039E03C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x65736E6F70736572LL && a2 == 0xE800000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xE800000000000000LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65736E6F70736572LL, 0xE800000000000000LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10039E0D0(uint64_t a1)
{
  unint64_t v2 = sub_10039E7A8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10039E0F8(uint64_t a1)
{
  unint64_t v2 = sub_10039E7A8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10039E120@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10039C324(a1, a2);
}

void sub_10039E134(void *a1)
{
}

uint64_t sub_10039E14C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = _s14descr1005DD3D1C12ErrorRequestVMa(0LL);
  __chkstk_darwin(v4);
  char v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = _s14descr1005DEB71C15ExchangeRequestVMa(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = _s14descr1005D9BD1C13UploadRequestVMa(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = _s14descr1005DF7D1C10AskRequestVMa(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = _s12HelloRequestVMa(0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for SDAirDropMessage(0LL);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100265DCC(v2, (uint64_t)v21);
  HIDWORD(v22) = swift_getEnumCaseMultiPayload(v21, v19);
  LODWORD(v22) = HIDWORD(v22);
  switch((v22 >> 1))
  {
    case 0u:
      sub_1001A4B40((uint64_t)v21, (uint64_t)v18, _s12HelloRequestVMa);
      uint64_t v23 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
      uint64_t v24 = *(void *)(v23 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(a1, v18, v23);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56))(a1, 0LL, 1LL, v23);
    case 2u:
      uint64_t v34 = _s14descr1005DF7D1C10AskRequestVMa;
      sub_1001A4B40((uint64_t)v21, (uint64_t)v15, _s14descr1005DF7D1C10AskRequestVMa);
      sub_10039E540((uint64_t)v15, a1);
      uint64_t v33 = (uint64_t)v15;
      goto LABEL_10;
    case 3u:
      uint64_t v34 = _s14descr1005D9BD1C13UploadRequestVMa;
      sub_1001A4B40((uint64_t)v21, (uint64_t)v12, _s14descr1005D9BD1C13UploadRequestVMa);
      sub_10039E540((uint64_t)v12, a1);
      uint64_t v33 = (uint64_t)v12;
LABEL_10:
      uint64_t v32 = v34;
      goto LABEL_11;
    case 4u:
      sub_1001A4B40((uint64_t)v21, (uint64_t)v9, _s14descr1005DEB71C15ExchangeRequestVMa);
      uint64_t v35 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
      uint64_t v36 = *(void *)(v35 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v36 + 16))(a1, v9, v35);
      uint64_t v37 = (uint64_t)v9;
      unint64_t v38 = _s14descr1005DEB71C15ExchangeRequestVMa;
      goto LABEL_14;
    case 6u:
      sub_1001A4B40((uint64_t)v21, (uint64_t)v6, _s14descr1005DD3D1C12ErrorRequestVMa);
      uint64_t v35 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
      uint64_t v36 = *(void *)(v35 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v36 + 16))(a1, v6, v35);
      uint64_t v37 = (uint64_t)v6;
      unint64_t v38 = _s14descr1005DD3D1C12ErrorRequestVMa;
LABEL_14:
      sub_1001A4BC8(v37, v38);
      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(a1, 0LL, 1LL, v35);
      break;
    default:
      if (qword_100644278 != -1) {
        swift_once(&qword_100644278, sub_10039B03C);
      }
      uint64_t v26 = type metadata accessor for Logger(0LL);
      uint64_t v27 = sub_100186DE4(v26, (uint64_t)qword_100651E58);
      uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
      os_log_type_t v29 = static os_log_type_t.error.getter(v28);
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v30 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Unexpected request type for transferID", v30, 2u);
        swift_slowDealloc(v30, -1LL, -1LL);
      }

      uint64_t v31 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))(a1, 1LL, 1LL, v31);
      uint64_t v32 = type metadata accessor for SDAirDropMessage;
      uint64_t v33 = (uint64_t)v21;
LABEL_11:
      uint64_t result = sub_1001A4BC8(v33, v32);
      break;
  }

  return result;
}

uint64_t sub_10039E540(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100183098((uint64_t *)&unk_100647610);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10039E588()
{
  unint64_t result = qword_100651F98;
  if (!qword_100651F98)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D9520, &type metadata for SDAirDropMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100651F98);
  }

  return result;
}

unint64_t sub_10039E5CC()
{
  unint64_t result = qword_100651FA0;
  if (!qword_100651FA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D94D0, &type metadata for SDAirDropMessage.ErrorResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100651FA0);
  }

  return result;
}

unint64_t sub_10039E610()
{
  unint64_t result = qword_100651FA8;
  if (!qword_100651FA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D9480, &type metadata for SDAirDropMessage.ErrorRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100651FA8);
  }

  return result;
}

unint64_t sub_10039E654()
{
  unint64_t result = qword_100651FB8;
  if (!qword_100651FB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D9430, &type metadata for SDAirDropMessage.IdentityShareResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100651FB8);
  }

  return result;
}

unint64_t sub_10039E698()
{
  unint64_t result = qword_100651FC0;
  if (!qword_100651FC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D93E0, &type metadata for SDAirDropMessage.IdentityShareRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100651FC0);
  }

  return result;
}

unint64_t sub_10039E6DC()
{
  unint64_t result = qword_100651FC8;
  if (!qword_100651FC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004CF708, &_s14descr1005D5299C20IdentityShareRequestVN);
    atomic_store(result, (unint64_t *)&qword_100651FC8);
  }

  return result;
}

unint64_t sub_10039E720()
{
  unint64_t result = qword_100651FD0;
  if (!qword_100651FD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D9390, &type metadata for SDAirDropMessage.ExchangeResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100651FD0);
  }

  return result;
}

unint64_t sub_10039E764()
{
  unint64_t result = qword_100651FE0;
  if (!qword_100651FE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D9340, &type metadata for SDAirDropMessage.ExchangeRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100651FE0);
  }

  return result;
}

unint64_t sub_10039E7A8()
{
  unint64_t result = qword_100651FF0;
  if (!qword_100651FF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D92F0, &type metadata for SDAirDropMessage.UploadResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100651FF0);
  }

  return result;
}

unint64_t sub_10039E7EC()
{
  unint64_t result = qword_100651FF8;
  if (!qword_100651FF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D92A0, &type metadata for SDAirDropMessage.UploadRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100651FF8);
  }

  return result;
}

unint64_t sub_10039E830()
{
  unint64_t result = qword_100652008;
  if (!qword_100652008)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D9250, &type metadata for SDAirDropMessage.AskResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652008);
  }

  return result;
}

unint64_t sub_10039E874()
{
  unint64_t result = qword_100652010;
  if (!qword_100652010)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004DA058, &_s14descr1005DF7D1C11AskResponseVN);
    atomic_store(result, (unint64_t *)&qword_100652010);
  }

  return result;
}

unint64_t sub_10039E8B8()
{
  unint64_t result = qword_100652018;
  if (!qword_100652018)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D9200, &type metadata for SDAirDropMessage.AskRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652018);
  }

  return result;
}

unint64_t sub_10039E8FC()
{
  unint64_t result = qword_100652028;
  if (!qword_100652028)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D91B0, &type metadata for SDAirDropMessage.DiscoverResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652028);
  }

  return result;
}

unint64_t sub_10039E940()
{
  unint64_t result = qword_100652030;
  if (!qword_100652030)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D3144, &_s14descr1005D8CD9C16DiscoverResponseVN);
    atomic_store(result, (unint64_t *)&qword_100652030);
  }

  return result;
}

unint64_t sub_10039E984()
{
  unint64_t result = qword_100652038;
  if (!qword_100652038)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D9160, &type metadata for SDAirDropMessage.DiscoverRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652038);
  }

  return result;
}

unint64_t sub_10039E9C8()
{
  unint64_t result = qword_100652040;
  if (!qword_100652040)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D316C, &_s14descr1005D8CD9C15DiscoverRequestVN);
    atomic_store(result, (unint64_t *)&qword_100652040);
  }

  return result;
}

unint64_t sub_10039EA0C()
{
  unint64_t result = qword_100652048;
  if (!qword_100652048)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D9110, &type metadata for SDAirDropMessage.HelloResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652048);
  }

  return result;
}

unint64_t sub_10039EA50()
{
  unint64_t result = qword_100652050;
  if (!qword_100652050)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004DC3D0, &_s13HelloResponseVN);
    atomic_store(result, (unint64_t *)&qword_100652050);
  }

  return result;
}

unint64_t sub_10039EA94()
{
  unint64_t result = qword_100652058;
  if (!qword_100652058)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D90C0, &type metadata for SDAirDropMessage.HelloRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652058);
  }

  return result;
}

unint64_t sub_10039EAD8()
{
  unint64_t result = qword_1006520E8;
  if (!qword_1006520E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004CF6E0, &_s14descr1005D5299C20IdentityShareRequestVN);
    atomic_store(result, (unint64_t *)&qword_1006520E8);
  }

  return result;
}

unint64_t sub_10039EB1C()
{
  unint64_t result = qword_100652108;
  if (!qword_100652108)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004DA030, &_s14descr1005DF7D1C11AskResponseVN);
    atomic_store(result, (unint64_t *)&qword_100652108);
  }

  return result;
}

unint64_t sub_10039EB60()
{
  unint64_t result = qword_100652118;
  if (!qword_100652118)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D31BC, &_s14descr1005D8CD9C16DiscoverResponseVN);
    atomic_store(result, (unint64_t *)&qword_100652118);
  }

  return result;
}

unint64_t sub_10039EBA4()
{
  unint64_t result = qword_100652120;
  if (!qword_100652120)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D3194, &_s14descr1005D8CD9C15DiscoverRequestVN);
    atomic_store(result, (unint64_t *)&qword_100652120);
  }

  return result;
}

unint64_t sub_10039EBE8()
{
  unint64_t result = qword_100652128;
  if (!qword_100652128)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004DC3A8, &_s13HelloResponseVN);
    atomic_store(result, (unint64_t *)&qword_100652128);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for SDAirDropMessage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }

uint64_t storeEnumTagSinglePayload for SDAirDropMessage.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF2) {
    return ((uint64_t (*)(void))((char *)&loc_10039ED08 + 4 * byte_1004D82DA[v4]))();
  }
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_10039ED3C + 4 * byte_1004D82D5[v4]))();
}

uint64_t sub_10039ED3C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10039ED44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10039ED4CLL);
  }
  return result;
}

uint64_t sub_10039ED58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10039ED60LL);
  }
  *(_BYTE *)unint64_t result = a2 + 13;
  return result;
}

uint64_t sub_10039ED64(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10039ED6C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.CodingKeys()
{
  return &type metadata for SDAirDropMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.HelloRequestCodingKeys()
{
  return &type metadata for SDAirDropMessage.HelloRequestCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.HelloResponseCodingKeys()
{
  return &type metadata for SDAirDropMessage.HelloResponseCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.DiscoverRequestCodingKeys()
{
  return &type metadata for SDAirDropMessage.DiscoverRequestCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.DiscoverResponseCodingKeys()
{
  return &type metadata for SDAirDropMessage.DiscoverResponseCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.AskRequestCodingKeys()
{
  return &type metadata for SDAirDropMessage.AskRequestCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.AskResponseCodingKeys()
{
  return &type metadata for SDAirDropMessage.AskResponseCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.UploadRequestCodingKeys()
{
  return &type metadata for SDAirDropMessage.UploadRequestCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.UploadResponseCodingKeys()
{
  return &type metadata for SDAirDropMessage.UploadResponseCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.ExchangeRequestCodingKeys()
{
  return &type metadata for SDAirDropMessage.ExchangeRequestCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.ExchangeResponseCodingKeys()
{
  return &type metadata for SDAirDropMessage.ExchangeResponseCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.IdentityShareRequestCodingKeys()
{
  return &type metadata for SDAirDropMessage.IdentityShareRequestCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.IdentityShareResponseCodingKeys()
{
  return &type metadata for SDAirDropMessage.IdentityShareResponseCodingKeys;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.ErrorRequestCodingKeys()
{
  return &type metadata for SDAirDropMessage.ErrorRequestCodingKeys;
}

uint64_t _s16DaemoniOSLibrary16SDAirDropMessageO22HelloRequestCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10039EEA0 + 4 * byte_1004D82DF[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10039EEC0 + 4 * byte_1004D82E4[v4]))();
  }
}

_BYTE *sub_10039EEA0(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_10039EEC0(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10039EEC8(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10039EED0(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10039EED8(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10039EEE0(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SDAirDropMessage.ErrorResponseCodingKeys()
{
  return &type metadata for SDAirDropMessage.ErrorResponseCodingKeys;
}

unint64_t sub_10039EF00()
{
  unint64_t result = qword_100652138;
  if (!qword_100652138)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8688, &type metadata for SDAirDropMessage.ErrorResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652138);
  }

  return result;
}

unint64_t sub_10039EF48()
{
  unint64_t result = qword_100652140;
  if (!qword_100652140)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8740, &type metadata for SDAirDropMessage.ErrorRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652140);
  }

  return result;
}

unint64_t sub_10039EF90()
{
  unint64_t result = qword_100652148;
  if (!qword_100652148)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D87F8, &type metadata for SDAirDropMessage.IdentityShareResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652148);
  }

  return result;
}

unint64_t sub_10039EFD8()
{
  unint64_t result = qword_100652150;
  if (!qword_100652150)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D88B0, &type metadata for SDAirDropMessage.IdentityShareRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652150);
  }

  return result;
}

unint64_t sub_10039F020()
{
  unint64_t result = qword_100652158;
  if (!qword_100652158)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8968, &type metadata for SDAirDropMessage.ExchangeResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652158);
  }

  return result;
}

unint64_t sub_10039F068()
{
  unint64_t result = qword_100652160;
  if (!qword_100652160)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8A20, &type metadata for SDAirDropMessage.ExchangeRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652160);
  }

  return result;
}

unint64_t sub_10039F0B0()
{
  unint64_t result = qword_100652168;
  if (!qword_100652168)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8AD8, &type metadata for SDAirDropMessage.UploadResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652168);
  }

  return result;
}

unint64_t sub_10039F0F8()
{
  unint64_t result = qword_100652170;
  if (!qword_100652170)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8B90, &type metadata for SDAirDropMessage.UploadRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652170);
  }

  return result;
}

unint64_t sub_10039F140()
{
  unint64_t result = qword_100652178;
  if (!qword_100652178)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8C48, &type metadata for SDAirDropMessage.AskResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652178);
  }

  return result;
}

unint64_t sub_10039F188()
{
  unint64_t result = qword_100652180;
  if (!qword_100652180)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8D00, &type metadata for SDAirDropMessage.AskRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652180);
  }

  return result;
}

unint64_t sub_10039F1D0()
{
  unint64_t result = qword_100652188;
  if (!qword_100652188)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8DB8, &type metadata for SDAirDropMessage.DiscoverResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652188);
  }

  return result;
}

unint64_t sub_10039F218()
{
  unint64_t result = qword_100652190;
  if (!qword_100652190)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8E70, &type metadata for SDAirDropMessage.DiscoverRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652190);
  }

  return result;
}

unint64_t sub_10039F260()
{
  unint64_t result = qword_100652198;
  if (!qword_100652198)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8F28, &type metadata for SDAirDropMessage.HelloResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652198);
  }

  return result;
}

unint64_t sub_10039F2A8()
{
  unint64_t result = qword_1006521A0;
  if (!qword_1006521A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8FE0, &type metadata for SDAirDropMessage.HelloRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006521A0);
  }

  return result;
}

unint64_t sub_10039F2F0()
{
  unint64_t result = qword_1006521A8;
  if (!qword_1006521A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D9098, &type metadata for SDAirDropMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006521A8);
  }

  return result;
}

unint64_t sub_10039F338()
{
  unint64_t result = qword_1006521B0;
  if (!qword_1006521B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8F50, &type metadata for SDAirDropMessage.HelloRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006521B0);
  }

  return result;
}

unint64_t sub_10039F380()
{
  unint64_t result = qword_1006521B8;
  if (!qword_1006521B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8F78, &type metadata for SDAirDropMessage.HelloRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006521B8);
  }

  return result;
}

unint64_t sub_10039F3C8()
{
  unint64_t result = qword_1006521C0;
  if (!qword_1006521C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8E98, &type metadata for SDAirDropMessage.HelloResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006521C0);
  }

  return result;
}

unint64_t sub_10039F410()
{
  unint64_t result = qword_1006521C8;
  if (!qword_1006521C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8EC0, &type metadata for SDAirDropMessage.HelloResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006521C8);
  }

  return result;
}

unint64_t sub_10039F458()
{
  unint64_t result = qword_1006521D0;
  if (!qword_1006521D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8DE0, &type metadata for SDAirDropMessage.DiscoverRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006521D0);
  }

  return result;
}

unint64_t sub_10039F4A0()
{
  unint64_t result = qword_1006521D8;
  if (!qword_1006521D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8E08, &type metadata for SDAirDropMessage.DiscoverRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006521D8);
  }

  return result;
}

unint64_t sub_10039F4E8()
{
  unint64_t result = qword_1006521E0;
  if (!qword_1006521E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8D28, &type metadata for SDAirDropMessage.DiscoverResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006521E0);
  }

  return result;
}

unint64_t sub_10039F530()
{
  unint64_t result = qword_1006521E8;
  if (!qword_1006521E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8D50, &type metadata for SDAirDropMessage.DiscoverResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006521E8);
  }

  return result;
}

unint64_t sub_10039F578()
{
  unint64_t result = qword_1006521F0;
  if (!qword_1006521F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8C70, &type metadata for SDAirDropMessage.AskRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006521F0);
  }

  return result;
}

unint64_t sub_10039F5C0()
{
  unint64_t result = qword_1006521F8;
  if (!qword_1006521F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8C98, &type metadata for SDAirDropMessage.AskRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1006521F8);
  }

  return result;
}

unint64_t sub_10039F608()
{
  unint64_t result = qword_100652200;
  if (!qword_100652200)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8BB8, &type metadata for SDAirDropMessage.AskResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652200);
  }

  return result;
}

unint64_t sub_10039F650()
{
  unint64_t result = qword_100652208;
  if (!qword_100652208)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8BE0, &type metadata for SDAirDropMessage.AskResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652208);
  }

  return result;
}

unint64_t sub_10039F698()
{
  unint64_t result = qword_100652210;
  if (!qword_100652210)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8B00, &type metadata for SDAirDropMessage.UploadRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652210);
  }

  return result;
}

unint64_t sub_10039F6E0()
{
  unint64_t result = qword_100652218;
  if (!qword_100652218)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8B28, &type metadata for SDAirDropMessage.UploadRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652218);
  }

  return result;
}

unint64_t sub_10039F728()
{
  unint64_t result = qword_100652220;
  if (!qword_100652220)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8A48, &type metadata for SDAirDropMessage.UploadResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652220);
  }

  return result;
}

unint64_t sub_10039F770()
{
  unint64_t result = qword_100652228;
  if (!qword_100652228)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8A70, &type metadata for SDAirDropMessage.UploadResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652228);
  }

  return result;
}

unint64_t sub_10039F7B8()
{
  unint64_t result = qword_100652230;
  if (!qword_100652230)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8990, &type metadata for SDAirDropMessage.ExchangeRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652230);
  }

  return result;
}

unint64_t sub_10039F800()
{
  unint64_t result = qword_100652238;
  if (!qword_100652238)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D89B8, &type metadata for SDAirDropMessage.ExchangeRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652238);
  }

  return result;
}

unint64_t sub_10039F848()
{
  unint64_t result = qword_100652240;
  if (!qword_100652240)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D88D8, &type metadata for SDAirDropMessage.ExchangeResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652240);
  }

  return result;
}

unint64_t sub_10039F890()
{
  unint64_t result = qword_100652248;
  if (!qword_100652248)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8900, &type metadata for SDAirDropMessage.ExchangeResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652248);
  }

  return result;
}

unint64_t sub_10039F8D8()
{
  unint64_t result = qword_100652250;
  if (!qword_100652250)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8820, &type metadata for SDAirDropMessage.IdentityShareRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652250);
  }

  return result;
}

unint64_t sub_10039F920()
{
  unint64_t result = qword_100652258;
  if (!qword_100652258)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8848, &type metadata for SDAirDropMessage.IdentityShareRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652258);
  }

  return result;
}

unint64_t sub_10039F968()
{
  unint64_t result = qword_100652260;
  if (!qword_100652260)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8768, &type metadata for SDAirDropMessage.IdentityShareResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652260);
  }

  return result;
}

unint64_t sub_10039F9B0()
{
  unint64_t result = qword_100652268;
  if (!qword_100652268)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8790, &type metadata for SDAirDropMessage.IdentityShareResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652268);
  }

  return result;
}

unint64_t sub_10039F9F8()
{
  unint64_t result = qword_100652270;
  if (!qword_100652270)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D86B0, &type metadata for SDAirDropMessage.ErrorRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652270);
  }

  return result;
}

unint64_t sub_10039FA40()
{
  unint64_t result = qword_100652278;
  if (!qword_100652278)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D86D8, &type metadata for SDAirDropMessage.ErrorRequestCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652278);
  }

  return result;
}

unint64_t sub_10039FA88()
{
  unint64_t result = qword_100652280;
  if (!qword_100652280)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D85F8, &type metadata for SDAirDropMessage.ErrorResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652280);
  }

  return result;
}

unint64_t sub_10039FAD0()
{
  unint64_t result = qword_100652288;
  if (!qword_100652288)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D8620, &type metadata for SDAirDropMessage.ErrorResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652288);
  }

  return result;
}

unint64_t sub_10039FB18()
{
  unint64_t result = qword_100652290;
  if (!qword_100652290)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D9008, &type metadata for SDAirDropMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652290);
  }

  return result;
}

unint64_t sub_10039FB60()
{
  unint64_t result = qword_100652298;
  if (!qword_100652298)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D9030, &type metadata for SDAirDropMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100652298);
  }

  return result;
}

uint64_t sub_10039FBA4(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x7165526F6C6C6568LL && a2 == 0xEC00000074736575LL)
  {
    unint64_t v5 = 0xEC00000074736575LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7165526F6C6C6568LL, 0xEC00000074736575LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x7365526F6C6C6568LL && a2 == 0xED000065736E6F70LL)
  {
    unint64_t v7 = 0xED000065736E6F70LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7365526F6C6C6568LL, 0xED000065736E6F70LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x7265766F63736964LL && a2 == 0xEF74736575716552LL)
  {
    unint64_t v8 = 0xEF74736575716552LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7265766F63736964LL, 0xEF74736575716552LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v9 = 0x800000010050D0B0LL;
    if (a2 == 0x800000010050D0B0LL) {
      goto LABEL_25;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010050D0B0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if (a1 == 0x65757165526B7361LL && a2 == 0xEA00000000007473LL)
  {
    unint64_t v10 = 0xEA00000000007473LL;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65757165526B7361LL, 0xEA00000000007473LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_31;
  }

  if (a1 == 0x6F707365526B7361LL && a2 == 0xEB0000000065736ELL)
  {
    unint64_t v11 = 0xEB0000000065736ELL;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F707365526B7361LL, 0xEB0000000065736ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_37;
  }

  if (a1 == 0x655264616F6C7075LL && a2 == 0xED00007473657571LL)
  {
    unint64_t v12 = 0xED00007473657571LL;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x655264616F6C7075LL, 0xED00007473657571LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
    goto LABEL_43;
  }

  if (a1 == 0x655264616F6C7075LL && a2 == 0xEE0065736E6F7073LL)
  {
    unint64_t v13 = 0xEE0065736E6F7073LL;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x655264616F6C7075LL, 0xEE0065736E6F7073LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
    goto LABEL_49;
  }

  if (a1 == 0x65676E6168637865LL && a2 == 0xEF74736575716552LL)
  {
    unint64_t v14 = 0xEF74736575716552LL;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65676E6168637865LL, 0xEF74736575716552LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v14 = a2;
    goto LABEL_55;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v15 = 0x800000010050D0D0LL;
    if (a2 == 0x800000010050D0D0LL) {
      goto LABEL_60;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010050D0D0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v15 = a2;
LABEL_60:
    swift_bridgeObjectRelease(v15);
    return 9LL;
  }

  if (a1 == 0xD000000000000014LL && a2 == 0x800000010050D0F0LL)
  {
    unint64_t v16 = 0x800000010050D0F0LL;
LABEL_66:
    swift_bridgeObjectRelease(v16);
    return 10LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x800000010050D0F0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v16 = a2;
    goto LABEL_66;
  }

  if (a1 == 0xD000000000000015LL && a2 == 0x800000010050D110LL)
  {
    unint64_t v17 = 0x800000010050D110LL;
LABEL_72:
    swift_bridgeObjectRelease(v17);
    return 11LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x800000010050D110LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v17 = a2;
    goto LABEL_72;
  }

  if (a1 == 0x716552726F727265LL && a2 == 0xEC00000074736575LL)
  {
    unint64_t v18 = 0xEC00000074736575LL;
LABEL_78:
    swift_bridgeObjectRelease(v18);
    return 12LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x716552726F727265LL, 0xEC00000074736575LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v18 = a2;
    goto LABEL_78;
  }

  if (a1 == 0x736552726F727265LL && a2 == 0xED000065736E6F70LL)
  {
    swift_bridgeObjectRelease(0xED000065736E6F70LL);
    return 13LL;
  }

  else
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)(0x736552726F727265LL, 0xED000065736E6F70LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v19 & 1) != 0) {
      return 13LL;
    }
    else {
      return 14LL;
    }
  }

char *sub_1003A0228@<X0>(int a1@<W0>, unint64_t a2@<X1>, char *a3@<X3>, unint64_t a4@<X8>)
{
  if ((a2 & 0x8000000000000000LL) != 0) {
    goto LABEL_17;
  }
  unint64_t v4 = a2;
  if (!a2) {
    return (char *)_swiftEmptyArrayStorage;
  }
  LODWORD(v5) = a1;
  a3 = sub_10018C0B4(0LL, 1LL, 1, (char *)_swiftEmptyArrayStorage);
  unint64_t v7 = *((void *)a3 + 2);
  a4 = *((void *)a3 + 3);
  unint64_t v6 = v7 + 1;
  if (v7 >= a4 >> 1) {
    goto LABEL_18;
  }
  while (1)
  {
    *((void *)a3 + 2) = v6;
    a3[v7 + 32] = v5;
    if (v4 == 1) {
      break;
    }
    unint64_t v8 = *((void *)a3 + 3);
    if (v6 >= v8 >> 1) {
      a3 = sub_10018C0B4((char *)(v8 > 1), v7 + 2, 1, a3);
    }
    a4 = v5 >> 8;
    *((void *)a3 + 2) = v7 + 2;
    a3[v6 + 32] = BYTE1(v5);
    unint64_t v5 = v4 - 2;
    if (v4 == 2) {
      break;
    }
    unint64_t v6 = v7 + 34;
    for (uint64_t i = 0xFFFFFFFFFFFFFFELL; i; --i)
    {
      a4 = *((void *)a3 + 3);
      unint64_t v4 = v6 - 31;
      if (v6 - 32 >= a4 >> 1) {
        a3 = sub_10018C0B4((char *)(a4 > 1), v6 - 31, 1, a3);
      }
      *((void *)a3 + 2) = v4;
      a3[v6++] = 0;
      if (!--v5) {
        return a3;
      }
    }

    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    a3 = sub_10018C0B4((char *)(a4 > 1), v6, 1, a3);
  }

  return a3;
}

uint64_t sub_1003A036C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v19 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(void *)(a2 + 16)
    && (uint64_t v7 = *(void *)(a2 + 40),
        uint64_t v8 = sub_100183F14( &qword_100646108,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID),  v9 = dispatch thunk of Hashable._rawHashValue(seed:)(v7, v4, v8),  v10 = -1LL << *(_BYTE *)(a2 + 32),  v11 = v9 & ~v10,  ((*(void *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0))
  {
    uint64_t v12 = ~v10;
    uint64_t v13 = *(void *)(v19 + 72);
    unint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
    do
    {
      v14(v6, *(void *)(a2 + 48) + v13 * v11, v4);
      uint64_t v15 = sub_100183F14( &qword_100646148,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)(v6, a1, v4, v15);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
      if ((v16 & 1) != 0) {
        break;
      }
      unint64_t v11 = (v11 + 1) & v12;
    }

    while (((*(void *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  }

  else
  {
    char v16 = 0;
  }

  return v16 & 1;
}

uint64_t sub_1003A04F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CodableError(0LL);
  uint64_t v19 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(void *)(a2 + 16)
    && (uint64_t v7 = *(void *)(a2 + 40),
        uint64_t v8 = sub_100183F14( &qword_100652508,  (uint64_t (*)(uint64_t))&type metadata accessor for CodableError,  (uint64_t)&protocol conformance descriptor for CodableError),  v9 = dispatch thunk of Hashable._rawHashValue(seed:)(v7, v4, v8),  v10 = -1LL << *(_BYTE *)(a2 + 32),  v11 = v9 & ~v10,  ((*(void *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0))
  {
    uint64_t v12 = ~v10;
    uint64_t v13 = *(void *)(v19 + 72);
    unint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
    do
    {
      v14(v6, *(void *)(a2 + 48) + v13 * v11, v4);
      uint64_t v15 = sub_100183F14( &qword_100652510,  (uint64_t (*)(uint64_t))&type metadata accessor for CodableError,  (uint64_t)&protocol conformance descriptor for CodableError);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)(v6, a1, v4, v15);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
      if ((v16 & 1) != 0) {
        break;
      }
      unint64_t v11 = (v11 + 1) & v12;
    }

    while (((*(void *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  }

  else
  {
    char v16 = 0;
  }

  return v16 & 1;
}

BOOL sub_1003A0674(Swift::UInt a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0LL;
  }
  Hasher.init(_seed:)(v13);
  Hasher._combine(_:)(a1);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
    return 0LL;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1LL;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0) {
    return 0LL;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }

  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  return result;
}

BOOL sub_1003A0760(Swift::UInt8 a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0LL;
  }
  Hasher.init(_seed:)(v13);
  Hasher._combine(_:)(a1);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
    return 0LL;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0) {
    return 0LL;
  }
  do
  {
    int v12 = *(unsigned __int8 *)(v8 + v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }

  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_1003A084C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20);
    String.hash(into:)(v20, a1, a2);
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1LL << *(_BYTE *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if (((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      unint64_t v11 = (void *)(v10 + 16 * v8);
      uint64_t v12 = v11[1];
      BOOL v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0LL) & 1) != 0) {
        return 1LL;
      }
      uint64_t v15 = ~v7;
      unint64_t v16 = (v8 + 1) & v15;
      if (((*(void *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
      {
        while (1)
        {
          unint64_t v17 = (void *)(v10 + 16 * v16);
          uint64_t v18 = v17[1];
          BOOL v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0) {
            break;
          }
          uint64_t result = 0LL;
          unint64_t v16 = (v16 + 1) & v15;
          if (((*(void *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0) {
            return result;
          }
        }

        return 1LL;
      }
    }
  }

  return 0LL;
}

uint64_t sub_1003A0980(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SDAirDropDiscoveredEndpoint(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(void *)(a2 + 16)
    && (Hasher.init(_seed:)(v17),
        sub_10020DC2C(),
        Swift::Int v8 = Hasher._finalize()(),
        uint64_t v9 = -1LL << *(_BYTE *)(a2 + 32),
        unint64_t v10 = v8 & ~v9,
        ((*(void *)(a2 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0))
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v5 + 72);
    do
    {
      sub_1001A4B84( *(void *)(a2 + 48) + v12 * v10,  (uint64_t)v7,  type metadata accessor for SDAirDropDiscoveredEndpoint);
      sub_100215B08((uint64_t)v7, a1);
      char v14 = v13;
      sub_1001A4BC8((uint64_t)v7, type metadata accessor for SDAirDropDiscoveredEndpoint);
      if ((v14 & 1) != 0) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }

    while (((*(void *)(a2 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
  }

  else
  {
    char v14 = 0;
  }

  return v14 & 1;
}

uint64_t sub_1003A0AB8(uint64_t a1, uint64_t a2)
{
  v8[3] = &type metadata for UnsafeRawBufferPointer;
  v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = a1;
  v8[1] = a2;
  int v2 = sub_10019A708(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  int v3 = (_BYTE *)*v2;
  if (*v2 && (uint64_t v4 = (_BYTE *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = sub_10033C91C(v3, v4);
    }

    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = sub_1003C07E0((uint64_t)v3, (uint64_t)v4);
    }

    else
    {
      uint64_t v6 = sub_1003C0858((uint64_t)v3, (uint64_t)v4);
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  sub_10018709C(v8);
  return v6;
}

uint64_t sub_1003A0B70(const char *a1)
{
  uint64_t v2 = sub_100183098(&qword_10064B7D8);
  uint64_t v3 = __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  uint64_t v4 = sub_100183098(&qword_100652578);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100183098(&qword_10064B7E0);
  uint64_t v8 = __chkstk_darwin(v7);
  unint64_t v10 = (const char **)((char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v24 - v11;
  *(void *)&__int128 v27 = a1;
  swift_bridgeObjectRetain(a1);
  uint64_t v13 = sub_100183098(&qword_100652580);
  uint64_t v14 = sub_100183098(&qword_100652588);
  if (!swift_dynamicCast(v28, &v27, v13, v14, 6LL))
  {
    v24[0] = 0LL;
    uint64_t v29 = 0LL;
    memset(v28, 0, sizeof(v28));
    sub_100187100((uint64_t)v28, &qword_100652590);
    v24[2] = v24;
    v28[0] = xmmword_1004D9570;
    uint64_t v17 = *(int *)(v4 + 48);
    char *v10 = a1;
    v10[1] = 0LL;
    v24[1] = v7;
    uint64_t v18 = *(int *)(v7 + 44);
    uint64_t v25 = a1;
    BOOL v19 = (char *)v10 + v18;
    uint64_t v20 = type metadata accessor for Data.Iterator(0LL);
    uint64_t v21 = v19;
    unint64_t v22 = v25;
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL);
    v26(v21, 1LL, 1LL, v20);
    sub_1003C3180((uint64_t)v10, (uint64_t)v6);
    *(void *)&v6[v17] = 0LL;
    swift_bridgeObjectRetain(v22);
    sub_1003C3180((uint64_t)v6, (uint64_t)v12);
    __asm { BR              X12 }
  }

  sub_1001CE0D0(v28, (uint64_t)&v30);
  uint64_t v15 = v31;
  uint64_t v16 = v32;
  sub_10019A708(&v30, v31);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)( &v27,  sub_1003BFF14,  0LL,  &type metadata for Data._Representation,  v15,  v16);
  swift_bridgeObjectRelease(a1);
  v28[0] = v27;
  sub_10018709C(&v30);
  return *(void *)&v28[0];
}

id cdbDatabaseInfo()()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v15 - v5;
  id result = sub_100115468();
  if (result)
  {
    uint64_t v8 = result;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    uint64_t v11 = v10;

    URL.init(fileURLWithPath:)(v9, v11);
    __n128 v12 = swift_bridgeObjectRelease(v11);
    URL.appendingPathComponent(_:)(0x48706F7244726941LL, 0xED00004244687361LL, v12);
    uint64_t v13 = *(double (**)(char *, uint64_t))(v1 + 8);
    v14.n128_f64[0] = v13(v6, v0);
    URL.appendingPathComponent(_:)(0x48706F7244726941LL, 0xED00004244687361LL, v14);
    URL.appendingPathExtension(_:)(0x5F706F7264726961LL, 0xEC00000034766264LL);
    return (id)((uint64_t (*)(char *, uint64_t))v13)(v4, v0);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_1003A12BC(uint64_t a1)
{
  int64_t v2 = 0LL;
  uint64_t v3 = a1 + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }

    int64_t v17 = v2 + 1;
    if (__OFADD__(v2, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v17 >= v7) {
      goto LABEL_23;
    }
    unint64_t v18 = *(void *)(v3 + 8 * v17);
    ++v2;
    if (!v18)
    {
      int64_t v2 = v17 + 1;
      if (v17 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v18 = *(void *)(v3 + 8 * v2);
      if (!v18)
      {
        int64_t v2 = v17 + 2;
        if (v17 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v18 = *(void *)(v3 + 8 * v2);
        if (!v18)
        {
          int64_t v2 = v17 + 3;
          if (v17 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v18 = *(void *)(v3 + 8 * v2);
          if (!v18) {
            break;
          }
        }
      }
    }

uint64_t sub_1003A144C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100186DFC(v0, qword_1006522A0);
  uint64_t v1 = sub_100186DE4(v0, (uint64_t)qword_1006522A0);
  if (qword_100644008 != -1) {
    swift_once(&qword_100644008, sub_10023A4D8);
  }
  uint64_t v2 = sub_100186DE4(v0, (uint64_t)qword_100669688);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

Swift::String *airdropHashDBPathComponent.unsafeMutableAddressor()
{
  return &airdropHashDBPathComponent;
}

uint64_t sub_1003A14E8()
{
  uint64_t result = sub_10028CB50(44LL, 0xE100000000000000LL);
  if ((result & 0x100) != 0) {
    __break(1u);
  }
  else {
    byte_1006698C0 = result;
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SDAirDropHashStoreCDB.load()()
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v7 = __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v60 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  __n128 v12 = (char *)&v60 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  double v15 = (char *)&v60 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v21 = (char *)&v60 - v20;
  if ((*(_BYTE *)(v0 + 48) & 1) != 0) {
    return;
  }
  v61 = v19;
  uint64_t v62 = v18;
  uint64_t v63 = v17;
  uint64_t v64 = v16;
  uint64_t v60 = v0;
  uint64_t v65 = v1;
  sub_1003C1768();
  id v22 = sub_100115468();
  if (!v22)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    return;
  }

  uint64_t v23 = v22;
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  uint64_t v26 = v25;

  URL.init(fileURLWithPath:)(v24, v26);
  __n128 v27 = swift_bridgeObjectRelease(v26);
  URL.appendingPathComponent(_:)(0x48706F7244726941LL, 0xED00004244687361LL, v27);
  uint64_t v28 = *(double (**)(char *, uint64_t))(v3 + 8);
  uint64_t v29 = v12;
  uint64_t v30 = v64;
  v31.n128_f64[0] = v28(v29, v64);
  URL.appendingPathComponent(_:)(0x48706F7244726941LL, 0xED00004244687361LL, v31);
  URL.appendingPathExtension(_:)(0x5F706F7264726961LL, 0xEC00000034766264LL);
  v28(v9, v30);
  v28(v15, v30);
  uint64_t v32 = v65;
  sub_1003A1A00((uint64_t)v21);
  if (v32)
  {
    v28(v21, v30);
    return;
  }

  v28(v21, v30);
  id v33 = sub_100115468();
  if (!v33) {
    goto LABEL_15;
  }
  uint64_t v34 = v33;
  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  uint64_t v37 = v36;

  unint64_t v38 = v61;
  URL.init(fileURLWithPath:)(v35, v37);
  __n128 v39 = swift_bridgeObjectRelease(v37);
  uint64_t v40 = v62;
  URL.appendingPathComponent(_:)(0x48706F7244726941LL, 0xED00004244687361LL, v39);
  v41.n128_f64[0] = v28(v38, v30);
  URL.appendingPathComponent(_:)(0x48706F7244726941LL, 0xED00004244687361LL, v41);
  uint64_t v42 = v63;
  URL.appendingPathExtension(_:)(0x5F706F7264726961LL, 0xEC00000034766264LL);
  v28(v9, v30);
  v43.n128_f64[0] = v28(v40, v30);
  URL.path.getter(v43);
  uint64_t v45 = v44;
  v28(v42, v30);
  sub_1003C1B08();
  uint64_t v46 = v60;
  id v47 = *(id *)(v60 + 16);
  NSString v48 = String._bridgeToObjectiveC()();
  *(void *)&double v49 = swift_bridgeObjectRelease(v45).n128_u64[0];
  id v66 = 0LL;
  LOBYTE(v45) = objc_msgSend(v47, "openAtPath:error:", v48, &v66, v49);

  id v50 = v66;
  if ((v45 & 1) != 0)
  {
    uint64_t v51 = qword_100644280;
    id v52 = v66;
    if (v51 != -1) {
      swift_once(&qword_100644280, sub_1003A144C);
    }
    uint64_t v53 = type metadata accessor for Logger(0LL);
    uint64_t v54 = sub_100186DE4(v53, (uint64_t)qword_1006522A0);
    unint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
    os_log_type_t v56 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "CDB: store loaded", v57, 2u);
      swift_slowDealloc(v57, -1LL, -1LL);
    }

    *(_BYTE *)(v46 + 48) = 1;
  }

  else
  {
    id v58 = v66;
    _convertNSErrorToError(_:)(v50);

    swift_willThrow(v59);
  }

uint64_t sub_1003A1A00(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v40 = *(void *)(v2 - 8);
  uint64_t v41 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  if (qword_100644280 != -1) {
    swift_once(&qword_100644280, sub_1003A144C);
  }
  __n128 v39 = v4;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = sub_100186DE4(v9, (uint64_t)qword_1006522A0);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    v46[0] = v14;
    uint64_t v38 = v6;
    *(_DWORD *)uint64_t v13 = 136315138;
    __n128 v15 = swift_beginAccess(v8, v42, 0LL, 0LL);
    uint64_t v16 = URL.path.getter(v15);
    unint64_t v18 = (const char *)v17;
    id v43 = (id)sub_10018CDB4(v16, v17, v46);
    uint64_t v6 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Making AirDrop hash DB folder if doesn't exist: %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  id v19 = [(id)objc_opt_self(NSFileManager) defaultManager];
  swift_beginAccess(v8, v46, 0LL, 0LL);
  URL._bridgeToObjectiveC()(v20);
  id v22 = v21;
  uint64_t v23 = sub_100183098(&qword_100652600);
  uint64_t inited = swift_initStackObject(v23, v45);
  *(_OWORD *)(inited + 16) = xmmword_1004CDCA0;
  *(void *)(inited + 32) = NSFileProtectionKey;
  type metadata accessor for FileProtectionType(0LL);
  *(void *)(inited + 64) = v25;
  *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
  uint64_t v26 = NSFileProtectionKey;
  __n128 v27 = NSFileProtectionCompleteUntilFirstUserAuthentication;
  uint64_t v28 = (const char *)sub_100392438(inited);
  type metadata accessor for FileAttributeKey(0LL);
  sub_100183F14( &qword_100644D80,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1004CCBC8);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  *(void *)&double v30 = swift_bridgeObjectRelease(v28).n128_u64[0];
  id v43 = 0LL;
  LODWORD(v28) = objc_msgSend( v19,  "createDirectoryAtURL:withIntermediateDirectories:attributes:error:",  v22,  1,  isa,  &v43,  v30);

  id v31 = v43;
  if ((_DWORD)v28)
  {
    uint64_t v32 = v39;
    URLResourceValues.init()(v31);
    URLResourceValues.isExcludedFromBackup.setter(1LL);
    __n128 v33 = swift_beginAccess(v8, &v43, 33LL, 0LL);
    URL.setResourceValues(_:)(v32, v33);
    swift_endAccess(&v43);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v32, v41);
  }

  else
  {
    uint64_t v34 = v31;
    _convertNSErrorToError(_:)(v31);

    swift_willThrow(v35);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SDAirDropHashStoreCDB.stageAddEntries(_:)( Swift::OpaquePointer a1)
{
  if (*(_BYTE *)(v1 + 48) != 1)
  {
    char v3 = 1;
    goto LABEL_5;
  }

  if ((*(_BYTE *)(v1 + 49) & 1) != 0)
  {
    char v3 = 2;
LABEL_5:
    unint64_t v4 = sub_10038FFB4();
    uint64_t v5 = swift_allocError(&type metadata for SDAirDropHashError, v4, 0LL, 0LL);
    *uint64_t v6 = v3;
    swift_willThrow(v5);
    return;
  }

  rawValue = (const char *)a1._rawValue;
  int64_t v8 = *((void *)a1._rawValue + 2);
  uint64_t v9 = _swiftEmptyArrayStorage;
  if (v8)
  {
    v28[4] = v2;
    v28[0] = _swiftEmptyArrayStorage;
    sub_10018D82C(0, v8, 0);
    uint64_t v9 = _swiftEmptyArrayStorage;
    __n128 v27 = rawValue;
    uint64_t v10 = (const char **)(rawValue + 40);
    do
    {
      uint64_t v11 = (uint64_t)*(v10 - 1);
      os_log_type_t v12 = *v10;
      v28[0] = v9;
      unint64_t v13 = v9[2];
      unint64_t v14 = v9[3];
      swift_bridgeObjectRetain(v12, v27);
      if (v13 >= v14 >> 1)
      {
        sub_10018D82C(v14 > 1, v13 + 1, 1);
        uint64_t v9 = (void *)v28[0];
      }

      v10 += 9;
      v9[2] = v13 + 1;
      __n128 v15 = &v9[2 * v13];
      v15[4] = v11;
      v15[5] = v12;
      --v8;
    }

    while (v8);
    rawValue = v27;
  }

  *(void *)&double v16 = swift_beginAccess(v1 + 40, v28, 33LL, 0LL).n128_u64[0];
  if (*(void *)(*(void *)(v1 + 40) + 16LL))
  {
    uint64_t v17 = v9[2];
    if (v17)
    {
      unint64_t v18 = swift_bridgeObjectRetain((const char *)v9, v16).n128_u64[0];
      id v19 = (const char **)(v9 + 5);
      do
      {
        uint64_t v20 = (uint64_t)*(v19 - 1);
        uint64_t v21 = *v19;
        swift_bridgeObjectRetain(*v19, *(double *)&v18);
        sub_1003BDC14(v20, (uint64_t)v21);
        uint64_t v23 = v22;
        *(void *)&double v24 = swift_bridgeObjectRelease(v21).n128_u64[0];
        unint64_t v18 = swift_bridgeObjectRelease(v23, v24).n128_u64[0];
        v19 += 2;
        --v17;
      }

      while (v17);
      swift_bridgeObjectRelease((const char *)v9, *(double *)&v18);
    }
  }

  swift_endAccess(v28);
  swift_bridgeObjectRelease((const char *)v9);
  *(void *)&double v25 = swift_beginAccess(v1 + 32, v28, 33LL, 0LL).n128_u64[0];
  swift_bridgeObjectRetain(rawValue, v25);
  sub_10028AC78(v26);
  swift_endAccess(v28);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SDAirDropHashStoreCDB.stageDeleteEntriesForContact(withID:)( Swift::String withID)
{
  if (*(_BYTE *)(v1 + 48) != 1)
  {
    char v3 = 1;
    goto LABEL_5;
  }

  uint64_t v2 = v1;
  if ((*(_BYTE *)(v1 + 49) & 1) != 0)
  {
    char v3 = 2;
LABEL_5:
    unint64_t v4 = sub_10038FFB4();
    uint64_t v5 = swift_allocError(&type metadata for SDAirDropHashError, v4, 0LL, 0LL);
    *uint64_t v6 = v3;
    swift_willThrow(v5);
    return;
  }

  object = (const char *)withID._object;
  uint64_t countAndFlagsBits = withID._countAndFlagsBits;
  if (qword_100644280 != -1) {
    swift_once(&qword_100644280, sub_1003A144C);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v9, (uint64_t)qword_1006522A0);
  swift_bridgeObjectRetain_n(object, 2LL);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    unint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    v22[0] = v14;
    *(_DWORD *)unint64_t v13 = 136315138;
    uint64_t v23 = v13 + 4;
    swift_bridgeObjectRetain(object);
    uint64_t v20 = sub_10018CDB4(countAndFlagsBits, (unint64_t)object, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v23, v13 + 12);
    swift_bridgeObjectRelease_n(object, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "CDB: Staging deletion of entries for contact id: %s",  v13,  0xCu);
    swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(object, 2LL);
  }

  *(void *)&double v15 = swift_beginAccess(v2 + 32, v22, 33LL, 0LL).n128_u64[0];
  swift_bridgeObjectRetain(object, v15);
  sub_1003C1C74(v2 + 32, countAndFlagsBits, (uint64_t)object);
  uint64_t v17 = v16;
  swift_bridgeObjectRelease(object);
  int64_t v18 = *(void *)(*(void *)(v2 + 32) + 16LL);
  if (v18 < v17)
  {
    __break(1u);
  }

  else
  {
    sub_1003C1F78(v17, v18);
    swift_endAccess(v22);
    *(void *)&double v19 = swift_beginAccess(v2 + 40, v22, 33LL, 0LL).n128_u64[0];
    swift_bridgeObjectRetain(object, v19);
    sub_1003B572C(&v20, countAndFlagsBits, (uint64_t)object);
    swift_endAccess(v22);
    swift_bridgeObjectRelease(v21);
  }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SDAirDropHashStoreCDB.preparePersist()()
{
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v36 = *(void *)(v1 - 8);
  uint64_t v2 = __chkstk_darwin(v1);
  unint64_t v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)&v35 - v6;
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v35 - v9;
  __chkstk_darwin(v8);
  os_log_type_t v12 = (char *)&v35 - v11;
  id v13 = [objc_allocWithZone(CUKeyValueStoreWriter) init];
  uint64_t v14 = *(void **)(v0 + 24);
  uint64_t v37 = v0;
  *(void *)(v0 + 24) = v13;

  id v15 = sub_100115468();
  if (!v15) {
    __break(1u);
  }
  uint64_t v16 = v15;
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  double v19 = v18;

  URL.init(fileURLWithPath:)(v17, v19);
  __n128 v20 = swift_bridgeObjectRelease(v19);
  URL.appendingPathComponent(_:)(0x48706F7244726941LL, 0xED00004244687361LL, v20);
  uint64_t v21 = *(double (**)(char *, uint64_t))(v36 + 8);
  v22.n128_f64[0] = v21(v7, v1);
  URL.appendingPathComponent(_:)(0x48706F7244726941LL, 0xED00004244687361LL, v22);
  URL.appendingPathExtension(_:)(0x5F706F7264726961LL, 0xEC00000034766264LL);
  v21(v4, v1);
  v23.n128_f64[0] = v21(v12, v1);
  URL.path.getter(v23);
  double v25 = v24;
  v21(v10, v1);
  uint64_t v26 = *(void **)(v37 + 24);
  if (v26)
  {
    id v27 = v26;
    NSString v28 = String._bridgeToObjectiveC()();
    *(void *)&double v29 = swift_bridgeObjectRelease(v25).n128_u64[0];
    id v38 = 0LL;
    unsigned int v30 = objc_msgSend(v27, "startAtPath:error:", v28, &v38, v29);

    id v31 = v38;
    if (v30)
    {
      id v32 = v38;
    }

    else
    {
      id v33 = v38;
      _convertNSErrorToError(_:)(v31);

      swift_willThrow(v34);
    }
  }

  else
  {
    swift_bridgeObjectRelease(v25);
  }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SDAirDropHashStoreCDB.finishPersist()()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v43 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  id v13 = (char *)&v43 - v12;
  __chkstk_darwin(v11);
  id v15 = (char *)&v43 - v14;
  uint64_t v16 = *(void **)(v2 + 24);
  if (v16)
  {
    id v45 = 0LL;
    unsigned int v17 = [v16 finishAndReturnError:&v45];
    id v18 = v45;
    if (!v17)
    {
LABEL_8:
      id v41 = v18;
      _convertNSErrorToError(_:)(v18);

      swift_willThrow(v42);
      return;
    }

    uint64_t v43 = v1;
    uint64_t v44 = v4;
    double v19 = *(void **)(v2 + 24);
    id v20 = v45;
  }

  else
  {
    uint64_t v43 = v1;
    uint64_t v44 = v4;
    double v19 = 0LL;
  }

  *(void *)(v2 + 24) = 0LL;

  [*(id *)(v2 + 16) close];
  uint64_t v21 = sub_100183168(0LL, (unint64_t *)&qword_100644438, &OBJC_CLASS___NSData_ptr);
  id v22 = objc_allocWithZone(&OBJC_CLASS___CUKeyValueStoreReader);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v21);
  id v24 = [v22 initWithKeyType:ObjCClassFromMetadata valueType:ObjCClassFromMetadata];
  double v25 = *(void **)(v2 + 16);
  *(void *)(v2 + 16) = v24;

  id v26 = sub_100115468();
  if (v26)
  {
    id v27 = v26;
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    unsigned int v30 = v29;

    URL.init(fileURLWithPath:)(v28, v30);
    __n128 v31 = swift_bridgeObjectRelease(v30);
    URL.appendingPathComponent(_:)(0x48706F7244726941LL, 0xED00004244687361LL, v31);
    id v32 = *(double (**)(char *, uint64_t))(v44 + 8);
    v33.n128_f64[0] = v32(v10, v3);
    URL.appendingPathComponent(_:)(0x48706F7244726941LL, 0xED00004244687361LL, v33);
    URL.appendingPathExtension(_:)(0x5F706F7264726961LL, 0xEC00000034766264LL);
    v32(v7, v3);
    v34.n128_f64[0] = v32(v15, v3);
    URL.path.getter(v34);
    uint64_t v36 = v35;
    v32(v13, v3);
    id v37 = *(id *)(v2 + 16);
    NSString v38 = String._bridgeToObjectiveC()();
    *(void *)&double v39 = swift_bridgeObjectRelease(v36).n128_u64[0];
    id v45 = 0LL;
    LOBYTE(v36) = objc_msgSend(v37, "openAtPath:error:", v38, &v45, v39);

    id v18 = v45;
    if ((v36 & 1) != 0)
    {
      id v40 = v45;
      return;
    }

    goto LABEL_8;
  }

  __break(1u);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SDAirDropHashStoreCDB.persist()()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(const char ***)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v188 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(_BYTE *)(v2 + 48) != 1)
  {
    char v7 = 1;
    goto LABEL_5;
  }

  if ((*(_BYTE *)(v2 + 49) & 1) != 0)
  {
    char v7 = 2;
LABEL_5:
    unint64_t v8 = sub_10038FFB4();
    uint64_t v9 = swift_allocError(&type metadata for SDAirDropHashError, v8, 0LL, 0LL);
    char *v10 = v7;
    swift_willThrow(v9);
    return;
  }

  uint64_t v195 = v1;
  uint64_t isUniquelyReferenced_nonNull_native = v2 + 32;
  swift_beginAccess(v2 + 32, v216, 1LL, 0LL);
  uint64_t v12 = *(void *)(*(void *)(v2 + 32) + 16LL);
  uint64_t v13 = v2 + 40;
  swift_beginAccess(v2 + 40, v215, 1LL, 0LL);
  uint64_t v14 = *(void *)(*(void *)(v2 + 40) + 16LL);
  BOOL v15 = __OFADD__(v12, v14);
  uint64_t v16 = v12 + v14;
  if (v15) {
    goto LABEL_147;
  }
  if (v16 < 0) {
    goto LABEL_157;
  }
  if (!v16)
  {
    if (qword_100644280 != -1) {
      swift_once(&qword_100644280, sub_1003A144C);
    }
    uint64_t v28 = sub_100186DE4(v3, (uint64_t)qword_1006522A0);
    double v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      __n128 v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)__n128 v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "CDB: Nothing to persist.", v31, 2u);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    goto LABEL_18;
  }

  if (qword_100644280 != -1) {
    goto LABEL_150;
  }
  while (1)
  {
    uint64_t v17 = sub_100186DE4(v3, (uint64_t)qword_1006522A0);
    id v18 = v4[2];
    uint64_t v192 = v17;
    ((void (*)(char *))v18)(v6);
    uint64_t v19 = swift_retain(v2);
    id v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.default.getter();
    BOOL v22 = os_log_type_enabled(v20, v21);
    v204 = (char *)v13;
    if (v22)
    {
      __n128 v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)__n128 v23 = 134217984;
      uint64_t v24 = *(void *)(*(void *)isUniquelyReferenced_nonNull_native + 16LL);
      uint64_t v25 = *(void *)(*(void *)v13 + 16LL);
      BOOL v15 = __OFADD__(v24, v25);
      id v26 = (void **)(v24 + v25);
      if (v15)
      {
        __break(1u);
        goto LABEL_152;
      }

      id v27 = v23;
      aBlock = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v211, v23 + 4, v23 + 12);
      swift_release(v2);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "CDB: Persist %lu changes.", v27, 0xCu);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    else
    {

      swift_release(v2);
    }

    ((void (*)(char *, uint64_t))v4[1])(v6, v3);
    uint64_t v191 = mach_absolute_time();
    uint64_t v32 = swift_allocObject(&unk_1005DE6D8, 24LL, 7LL);
    uint64_t v33 = v32;
    *(void *)(v32 + 16) = &_swiftEmptyDictionarySingleton;
    v196 = (char *)(v32 + 16);
    uint64_t v34 = *(void *)isUniquelyReferenced_nonNull_native;
    uint64_t v35 = (void **)_swiftEmptyArrayStorage;
    *(void *)uint64_t isUniquelyReferenced_nonNull_native = _swiftEmptyArrayStorage;
    int64_t v36 = *(void *)(v34 + 16);
    if (v36)
    {
      uint64_t v194 = v2;
      uint64_t v37 = v32;
      aBlock = (void **)_swiftEmptyArrayStorage;
      sub_10018D82C(0, v36, 0);
      uint64_t v35 = aBlock;
      NSString v38 = (const char **)(v34 + 40);
      do
      {
        id v40 = (void *)*(v38 - 1);
        double v39 = *v38;
        aBlock = v35;
        unint64_t v42 = (unint64_t)v35[2];
        unint64_t v41 = (unint64_t)v35[3];
        swift_bridgeObjectRetain(v39);
        if (v42 >= v41 >> 1)
        {
          sub_10018D82C(v41 > 1, v42 + 1, 1);
          uint64_t v35 = aBlock;
        }

        v38 += 9;
        v35[2] = (void *)(v42 + 1);
        uint64_t v43 = &v35[2 * v42];
        v43[4] = v40;
        v43[5] = (void *)v39;
        --v36;
      }

      while (v36);
      uint64_t v33 = v37;
      uint64_t v2 = v194;
    }

    uint64_t v44 = sub_100190230((uint64_t)v35);
    swift_bridgeObjectRelease((const char *)v35);
    uint64_t v4 = (const char **)swift_allocObject(&unk_1005DE700, 24LL, 7LL);
    v4[2] = 0LL;
    id v45 = v4 + 2;
    uint64_t v46 = *(void **)(v2 + 16);
    uint64_t v47 = sub_100183168(0LL, (unint64_t *)&qword_100644438, &OBJC_CLASS___NSData_ptr);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v47);
    double v49 = (void *)swift_allocObject(&unk_1005DE728, 48LL, 7LL);
    v49[2] = v2;
    v49[3] = v4;
    v49[4] = v44;
    v49[5] = v33;
    v213 = sub_1003C2184;
    v214 = v49;
    aBlock = _NSConcreteStackBlock;
    v211[0] = 1107296256LL;
    v211[1] = sub_1003A45E8;
    v212 = &unk_1005DE740;
    id v50 = _Block_copy(&aBlock);
    uint64_t v51 = v214;
    swift_retain(v2);
    id v52 = v46;
    swift_retain(v4);
    swift_retain(v33);
    swift_release(v51);
    aBlock = 0LL;
    LOBYTE(v51) = [v52 enumerateKeyType:ObjCClassFromMetadata valueType:ObjCClassFromMetadata error:&aBlock handler:v50];
    _Block_release(v50);

    uint64_t v53 = aBlock;
    if ((v51 & 1) == 0)
    {
      os_log_type_t v56 = v53;
      swift_bridgeObjectRelease((const char *)v34);
      _convertNSErrorToError(_:)(v56);

      swift_willThrow(v57);
      swift_release(v33);
      swift_release(v4);
      return;
    }

    v193 = v4;
    uint64_t v190 = v33;
    *(void *)&double v54 = swift_beginAccess(v45, v209, 0LL, 0LL).n128_u64[0];
    if (*v45)
    {
      swift_errorRetain(*v45);
      swift_bridgeObjectRelease((const char *)v34);
      swift_willThrow(v55);
      swift_release(v190);
      swift_release(v193);
      return;
    }

    uint64_t v194 = v2;
    id v58 = *(const char **)v204;
    *(void *)v204 = &_swiftEmptySetSingleton;
    *(void *)&double v59 = swift_bridgeObjectRelease(v58, v54).n128_u64[0];
    v189 = (const char *)v34;
    uint64_t v60 = *(char **)(v34 + 16);
    if (!v60) {
      break;
    }
    v61 = v189 + 99;
    while (1)
    {
      v200 = v60;
      v204 = *(char **)(v61 - 67);
      uint64_t v64 = *(const char **)(v61 - 59);
      uint64_t v65 = *(void *)(v61 - 51);
      id v66 = *(const char **)(v61 - 43);
      uint64_t v67 = *(void *)(v61 - 35);
      uint64_t v68 = *(void *)(v61 - 27);
      uint64_t v69 = *(void *)(v61 - 19);
      uint64_t v70 = *(void *)(v61 - 11);
      int v71 = *(unsigned __int16 *)(v61 - 3) | (*((unsigned __int8 *)v61 - 1) << 16);
      v199 = v61;
      int v72 = *(unsigned __int8 *)v61;
      swift_bridgeObjectRetain_n(v64, 2LL);
      swift_bridgeObjectRetain_n(v66, 2LL);
      uint64_t v73 = (void **)sub_1003C21A8((uint64_t)v204, v64, v65, v66, v67, v68, v69, v70, v71 | (v72 << 24));
      uint64_t v75 = v74;
      v204 = (char *)v76;
      v201 = (char *)v77;
      swift_bridgeObjectRelease_n(v66, 2LL);
      swift_bridgeObjectRelease_n(v64, 2LL);
      uint64_t v2 = sub_100183098(&qword_1006522B8);
      v212 = (void *)v2;
      unint64_t v78 = sub_1003C2388();
      v213 = (void (*)(uint64_t, uint64_t))v78;
      aBlock = v73;
      uint64_t v79 = sub_10019A708(&aBlock, v2);
      size_t v80 = *(void *)(*v79 + 16LL);
      if (v80)
      {
        uint64_t v81 = (const void *)(*v79 + 32LL);
        uint64_t v4 = (const char **)v196;
        if (v80 <= 0xE)
        {
          memset(__dst, 0, sizeof(__dst));
          unsigned __int8 v206 = v80;
          memcpy(__dst, v81, v80);
          uint64_t v3 = *(void *)__dst;
          unint64_t v85 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v206 << 48);
          swift_bridgeObjectRetain((const char *)v73);
        }

        else
        {
          uint64_t v82 = type metadata accessor for __DataStorage(0LL);
          swift_allocObject(v82, *(unsigned int *)(v82 + 48), *(unsigned __int16 *)(v82 + 52));
          swift_bridgeObjectRetain((const char *)v73);
          uint64_t v83 = __DataStorage.init(bytes:length:)(v81, v80);
          uint64_t v84 = v83;
          if (v80 >= 0x7FFFFFFF)
          {
            uint64_t v86 = type metadata accessor for Data.RangeReference(0LL);
            uint64_t v3 = swift_allocObject(v86, 32LL, 7LL);
            *(void *)(v3 + 16) = 0LL;
            *(void *)(v3 + 24) = v80;
            unint64_t v85 = v84 | 0x8000000000000000LL;
          }

          else
          {
            uint64_t v3 = v80 << 32;
            unint64_t v85 = v83 | 0x4000000000000000LL;
          }
        }
      }

      else
      {
        swift_bridgeObjectRetain((const char *)v73);
        uint64_t v3 = 0LL;
        unint64_t v85 = 0xC000000000000000LL;
        uint64_t v4 = (const char **)v196;
      }

      sub_10018709C(&aBlock);
      v212 = (void *)v2;
      v213 = (void (*)(uint64_t, uint64_t))v78;
      aBlock = v75;
      uint64_t v87 = sub_10019A708(&aBlock, v2);
      uint64_t v88 = *v87;
      size_t v89 = *(void *)(*v87 + 16LL);
      int64_t v197 = v78;
      v198 = (const char *)v73;
      if (v89)
      {
        uint64_t v90 = v88 + 32;
        if (v89 <= 0xE)
        {
          memset(__dst, 0, sizeof(__dst));
          unsigned __int8 v206 = v89;
          memcpy(__dst, (const void *)(v88 + 32), v89);
          v94 = *(void **)__dst;
          unint64_t v95 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v206 << 48);
          swift_bridgeObjectRetain((const char *)v75);
        }

        else
        {
          uint64_t v91 = type metadata accessor for __DataStorage(0LL);
          swift_allocObject(v91, *(unsigned int *)(v91 + 48), *(unsigned __int16 *)(v91 + 52));
          swift_bridgeObjectRetain((const char *)v75);
          uint64_t v92 = __DataStorage.init(bytes:length:)(v90, v89);
          uint64_t v93 = v92;
          if (v89 >= 0x7FFFFFFF)
          {
            uint64_t v96 = type metadata accessor for Data.RangeReference(0LL);
            v94 = (void *)swift_allocObject(v96, 32LL, 7LL);
            v94[2] = 0LL;
            v94[3] = v89;
            unint64_t v95 = v93 | 0x8000000000000000LL;
          }

          else
          {
            v94 = (void *)(v89 << 32);
            unint64_t v95 = v92 | 0x4000000000000000LL;
          }
        }
      }

      else
      {
        swift_bridgeObjectRetain((const char *)v75);
        v94 = 0LL;
        unint64_t v95 = 0xC000000000000000LL;
      }

      sub_10018709C(&aBlock);
      swift_beginAccess(v4, &aBlock, 32LL, 0LL);
      uint64_t v97 = *((void *)*v4 + 2);
      v203 = v94;
      uint64_t v202 = v95;
      if (v97)
      {
        sub_10019BA8C(v3, v85);
        sub_1003AD7E0(v3, v85, (void (*)(void *, uint64_t, uint64_t))&Data.hash(into:), sub_1003B1AE0);
        if ((v98 & 1) != 0)
        {
          swift_endAccess(&aBlock);
          sub_100189B20(v3, v85);
          goto LABEL_65;
        }

        sub_100189B20(v3, v85);
      }

      swift_endAccess(&aBlock);
      swift_beginAccess(v4, &aBlock, 33LL, 0LL);
      sub_10019BA8C(v3, v85);
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
      *(void *)__dst = *v4;
      uint64_t v6 = *(char **)__dst;
      *uint64_t v4 = (const char *)0x8000000000000000LL;
      uint64_t v13 = sub_1003AD7E0(v3, v85, (void (*)(void *, uint64_t, uint64_t))&Data.hash(into:), sub_1003B1AE0);
      uint64_t v100 = *((void *)v6 + 2);
      BOOL v101 = (v99 & 1) == 0;
      uint64_t v102 = v100 + v101;
      if (__OFADD__(v100, v101)) {
        break;
      }
      char v103 = v99;
      if (*((void *)v6 + 3) >= v102)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          uint64_t v6 = *(char **)__dst;
          if ((v99 & 1) == 0) {
            goto LABEL_62;
          }
        }

        else
        {
          sub_1003B0444();
          uint64_t v6 = *(char **)__dst;
          if ((v103 & 1) == 0) {
            goto LABEL_62;
          }
        }
      }

      else
      {
        sub_1003AC108(v102, isUniquelyReferenced_nonNull_native);
        uint64_t v104 = sub_1003AD7E0(v3, v85, (void (*)(void *, uint64_t, uint64_t))&Data.hash(into:), sub_1003B1AE0);
        if ((v103 & 1) != (v105 & 1)) {
          goto LABEL_155;
        }
        uint64_t v13 = v104;
        uint64_t v6 = *(char **)__dst;
        if ((v103 & 1) == 0)
        {
LABEL_62:
          *(void *)&v6[8 * ((unint64_t)v13 >> 6) + 64] |= 1LL << v13;
          v109 = (uint64_t *)(*((void *)v6 + 6) + 16 * v13);
          uint64_t *v109 = v3;
          v109[1] = v85;
          *(void *)(*((void *)v6 + 7) + 8 * v13) = &_swiftEmptySetSingleton;
          uint64_t v110 = *((void *)v6 + 2);
          BOOL v15 = __OFADD__(v110, 1LL);
          uint64_t v111 = v110 + 1;
          if (v15) {
            goto LABEL_149;
          }
          *((void *)v6 + 2) = v111;
          sub_10019BA8C(v3, v85);
          goto LABEL_64;
        }
      }

      uint64_t v106 = *((void *)v6 + 7);
      uint64_t v107 = 8 * v13;
      *(void *)&double v108 = swift_bridgeObjectRelease((const char *)*(void *)(v106 + v107)).n128_u64[0];
      *(void *)(v106 + v107) = &_swiftEmptySetSingleton;
LABEL_64:
      v94 = v203;
      unint64_t v95 = v202;
      v112 = *v4;
      *uint64_t v4 = v6;
      swift_bridgeObjectRelease(v112, v108);
      sub_100189B20(v3, v85);
      swift_endAccess(&aBlock);
LABEL_65:
      swift_beginAccess(v4, __dst, 33LL, 0LL);
      sub_10019BA8C(v3, v85);
      v113 = sub_1003A4530(&aBlock, v3, v85);
      if (*v114)
      {
        sub_10019BA8C((uint64_t)v94, v95);
        sub_1003B5B34(&v207, (uint64_t)v94, v95);
        ((void (*)(void ***, void))v113)(&aBlock, 0LL);
        swift_endAccess(__dst);
        sub_100189B20(v3, v85);
        uint64_t v115 = v207;
        unint64_t v116 = v208;
      }

      else
      {
        ((void (*)(void ***, void))v113)(&aBlock, 0LL);
        swift_endAccess(__dst);
        uint64_t v115 = v3;
        unint64_t v116 = v85;
      }

      sub_100189B20(v115, v116);
      *(void *)&double v117 = swift_bridgeObjectRelease((const char *)v75).n128_u64[0];
      swift_bridgeObjectRelease(v198, v117);
      v118 = v204;
      if (!v204)
      {
        sub_100189B20(v3, v85);
        uint64_t v62 = (uint64_t)v94;
        goto LABEL_33;
      }

      v119 = (void (*)(uint64_t, uint64_t))v197;
      v212 = (void *)v2;
      v213 = (void (*)(uint64_t, uint64_t))v197;
      aBlock = (void **)v204;
      v120 = sub_10019A708(&aBlock, v2);
      uint64_t v121 = *v120;
      size_t v122 = *(void *)(*v120 + 16LL);
      if (v122)
      {
        uint64_t v123 = v121 + 32;
        if (v122 <= 0xE)
        {
          memset(__dst, 0, sizeof(__dst));
          unsigned __int8 v206 = v122;
          memcpy(__dst, (const void *)(v121 + 32), v122);
          uint64_t v128 = *(void *)__dst;
          unint64_t v129 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v206 << 48);
          v118 = v204;
          unint64_t v126 = swift_bridgeObjectRetain(v204).n128_u64[0];
        }

        else
        {
          uint64_t v124 = type metadata accessor for __DataStorage(0LL);
          swift_allocObject(v124, *(unsigned int *)(v124 + 48), *(unsigned __int16 *)(v124 + 52));
          swift_bridgeObjectRetain(v204);
          uint64_t v125 = __DataStorage.init(bytes:length:)(v123, v122);
          uint64_t v127 = v125;
          if (v122 >= 0x7FFFFFFF)
          {
            uint64_t v130 = type metadata accessor for Data.RangeReference(0LL);
            uint64_t v128 = swift_allocObject(v130, 32LL, 7LL);
            *(void *)(v128 + 16) = 0LL;
            *(void *)(v128 + 24) = v122;
            unint64_t v129 = v127 | 0x8000000000000000LL;
          }

          else
          {
            uint64_t v128 = v122 << 32;
            unint64_t v129 = v125 | 0x4000000000000000LL;
          }

          v118 = v204;
        }
      }

      else
      {
        unint64_t v126 = swift_bridgeObjectRetain(v118).n128_u64[0];
        uint64_t v128 = 0LL;
        unint64_t v129 = 0xC000000000000000LL;
      }

      swift_bridgeObjectRelease(v118, *(double *)&v126);
      sub_10018709C(&aBlock);
      v212 = (void *)v2;
      v213 = v119;
      v131 = v201;
      aBlock = (void **)v201;
      v132 = sub_10019A708(&aBlock, v2);
      uint64_t v133 = *v132;
      size_t v134 = *(void *)(*v132 + 16LL);
      if (v134)
      {
        uint64_t v135 = v133 + 32;
        if (v134 <= 0xE)
        {
          memset(__dst, 0, sizeof(__dst));
          unsigned __int8 v206 = v134;
          memcpy(__dst, (const void *)(v133 + 32), v134);
          uint64_t v140 = *(void *)__dst;
          unint64_t v95 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v206 << 48);
          v141 = v201;
          swift_bridgeObjectRetain(v201);
          swift_bridgeObjectRelease(v141);
        }

        else
        {
          uint64_t v136 = type metadata accessor for __DataStorage(0LL);
          swift_allocObject(v136, *(unsigned int *)(v136 + 48), *(unsigned __int16 *)(v136 + 52));
          v137 = v201;
          swift_bridgeObjectRetain(v201);
          uint64_t v138 = __DataStorage.init(bytes:length:)(v135, v134);
          uint64_t v139 = v138;
          if (v134 >= 0x7FFFFFFF)
          {
            uint64_t v142 = type metadata accessor for Data.RangeReference(0LL);
            uint64_t v140 = swift_allocObject(v142, 32LL, 7LL);
            *(void *)(v140 + 16) = 0LL;
            *(void *)(v140 + 24) = v134;
            unint64_t v95 = v139 | 0x8000000000000000LL;
          }

          else
          {
            uint64_t v140 = v134 << 32;
            unint64_t v95 = v138 | 0x4000000000000000LL;
          }

          swift_bridgeObjectRelease(v137);
        }
      }

      else
      {
        swift_bridgeObjectRetain(v131);
        uint64_t v140 = 0LL;
        unint64_t v95 = 0xC000000000000000LL;
        swift_bridgeObjectRelease(v131);
      }

      sub_10018709C(&aBlock);
      swift_beginAccess(v4, &aBlock, 32LL, 0LL);
      if (!*((void *)*v4 + 2)) {
        goto LABEL_89;
      }
      sub_10019BA8C(v128, v129);
      sub_1003AD7E0(v128, v129, (void (*)(void *, uint64_t, uint64_t))&Data.hash(into:), sub_1003B1AE0);
      if ((v143 & 1) == 0)
      {
        sub_100189B20(v128, v129);
LABEL_89:
        swift_endAccess(&aBlock);
        swift_beginAccess(v4, &aBlock, 33LL, 0LL);
        sub_10019BA8C(v128, v129);
        char v144 = swift_isUniquelyReferenced_nonNull_native(*v4);
        *(void *)__dst = *v4;
        *uint64_t v4 = (const char *)0x8000000000000000LL;
        sub_1003B411C((uint64_t)&_swiftEmptySetSingleton, v128, v129, v144);
        v145 = *v4;
        *uint64_t v4 = *(const char **)__dst;
        swift_bridgeObjectRelease(v145);
        sub_100189B20(v128, v129);
        swift_endAccess(&aBlock);
        goto LABEL_90;
      }

      swift_endAccess(&aBlock);
      sub_100189B20(v128, v129);
LABEL_90:
      swift_beginAccess(v4, __dst, 33LL, 0LL);
      sub_10019BA8C(v128, v129);
      uint64_t v2 = (uint64_t)sub_1003A4530(&aBlock, v128, v129);
      if (*v146)
      {
        sub_10019BA8C(v140, v95);
        sub_1003B5B34(&v207, v140, v95);
        ((void (*)(void ***, void))v2)(&aBlock, 0LL);
        swift_endAccess(__dst);
        sub_100189B20((uint64_t)v203, v202);
        sub_100189B20(v140, v95);
        sub_100189B20(v128, v129);
        sub_100189B20(v3, v85);
        sub_100189B20(v128, v129);
        uint64_t v62 = v207;
        unint64_t v63 = v208;
        goto LABEL_34;
      }

      ((void (*)(void ***, void))v2)(&aBlock, 0LL);
      swift_endAccess(__dst);
      sub_100189B20(v128, v129);
      sub_100189B20(v3, v85);
      sub_100189B20((uint64_t)v203, v202);
      sub_100189B20(v128, v129);
      uint64_t v62 = v140;
LABEL_33:
      unint64_t v63 = v95;
LABEL_34:
      sub_100189B20(v62, v63);
      v61 = v199 + 72;
      uint64_t v60 = v200 - 1;
    }

    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    swift_once(&qword_100644280, sub_1003A144C);
  }

LABEL_93:
  swift_bridgeObjectRelease(v189, v59);
  v148 = *(void **)(v194 + 24);
  if (!v148)
  {
    double v29 = (os_log_s *)Logger.logObject.getter(v147);
    os_log_type_t v179 = static os_log_type_t.error.getter(v29);
    if (os_log_type_enabled(v29, v179))
    {
      v180 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v180 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v179, "Writer not prepared for persist operation", v180, 2u);
      swift_slowDealloc(v180, -1LL, -1LL);
    }

    swift_release(v190);
    swift_release(v193);
LABEL_18:

    return;
  }

  v149 = v196;
  swift_beginAccess(v196, &aBlock, 0LL, 0LL);
  uint64_t v6 = *(char **)v149;
  uint64_t v150 = *((void *)v6 + 8);
  v196 = v6 + 64;
  uint64_t v151 = 1LL << v6[32];
  if (v151 < 64) {
    uint64_t v152 = ~(-1LL << v151);
  }
  else {
    uint64_t v152 = -1LL;
  }
  unint64_t v153 = v152 & v150;
  int64_t v197 = (unint64_t)(v151 + 63) >> 6;
  v203 = v148;
  v200 = v6;
  swift_bridgeObjectRetain(v6);
  v154 = 0LL;
LABEL_98:
  v155 = v193;
  if (v153)
  {
    v198 = (const char *)((v153 - 1) & v153);
    v199 = v154;
    unint64_t v156 = __clz(__rbit64(v153)) | ((void)v154 << 6);
    goto LABEL_114;
  }

  int64_t v157 = (int64_t)(v154 + 1);
  if (__OFADD__(v154, 1LL)) {
    goto LABEL_153;
  }
  if (v157 < v197)
  {
    unint64_t v158 = *(void *)&v196[8 * v157];
    int64_t v159 = (int64_t)(v154 + 1);
    if (v158) {
      goto LABEL_113;
    }
    int64_t v159 = (int64_t)(v154 + 2);
    unint64_t v158 = *(void *)&v196[8 * v159];
    if (v158) {
      goto LABEL_113;
    }
    int64_t v159 = (int64_t)(v154 + 3);
    unint64_t v158 = *(void *)&v196[8 * v159];
    if (v158)
    {
LABEL_113:
      v198 = (const char *)((v158 - 1) & v158);
      v199 = (const char *)v159;
      unint64_t v156 = __clz(__rbit64(v158)) + (v159 << 6);
LABEL_114:
      v161 = (uint64_t *)(*((void *)v200 + 6) + 16 * v156);
      uint64_t v163 = *v161;
      v162 = (const char *)v161[1];
      uint64_t v3 = *(void *)(*((void *)v200 + 7) + 8 * v156);
      uint64_t v164 = *(void *)(v3 + 56);
      v201 = (char *)(v3 + 56);
      uint64_t v165 = 1LL << *(_BYTE *)(v3 + 32);
      if (v165 < 64) {
        uint64_t v166 = ~(-1LL << v165);
      }
      else {
        uint64_t v166 = -1LL;
      }
      uint64_t isUniquelyReferenced_nonNull_native = v166 & v164;
      v204 = (char *)v162;
      sub_10019BA8C(v163, (unint64_t)v162);
      uint64_t v202 = (unint64_t)(v165 + 63) >> 6;
      swift_bridgeObjectRetain((const char *)v3);
      uint64_t v13 = 0LL;
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_118:
        unint64_t v167 = __clz(__rbit64(isUniquelyReferenced_nonNull_native));
        isUniquelyReferenced_nonNull_native &= isUniquelyReferenced_nonNull_native - 1;
        unint64_t v168 = v167 | (v13 << 6);
        goto LABEL_133;
      }

      while (1)
      {
        int64_t v169 = v13 + 1;
        if (__OFADD__(v13, 1LL)) {
          goto LABEL_148;
        }
        if (v169 >= v202) {
          goto LABEL_136;
        }
        unint64_t v170 = *(void *)&v201[8 * v169];
        ++v13;
        if (!v170)
        {
          uint64_t v13 = v169 + 1;
          if (v169 + 1 >= v202) {
            goto LABEL_136;
          }
          unint64_t v170 = *(void *)&v201[8 * v13];
          if (!v170)
          {
            uint64_t v13 = v169 + 2;
            if (v169 + 2 >= v202) {
              goto LABEL_136;
            }
            unint64_t v170 = *(void *)&v201[8 * v13];
            if (!v170)
            {
              int64_t v171 = v169 + 3;
              if (v171 >= v202)
              {
LABEL_136:
                swift_release(v3);
                sub_100189B20(v163, (unint64_t)v204);
                v154 = v199;
                unint64_t v153 = (unint64_t)v198;
                goto LABEL_98;
              }

              unint64_t v170 = *(void *)&v201[8 * v171];
              if (!v170)
              {
                while (1)
                {
                  uint64_t v13 = v171 + 1;
                  if (__OFADD__(v171, 1LL)) {
                    break;
                  }
                  if (v13 >= v202) {
                    goto LABEL_136;
                  }
                  unint64_t v170 = *(void *)&v201[8 * v13];
                  ++v171;
                  if (v170) {
                    goto LABEL_132;
                  }
                }

                    swift_release(v80);
                    if (!*((void *)v62 + 2)) {
                      goto LABEL_154;
                    }
                  }

                  else
                  {
                    id v52 = 0LL;
                    uint64_t v3 = sub_10048115C(v78, v1);
                    if (!*((void *)v62 + 2)) {
                      goto LABEL_154;
                    }
                  }

                  uint64_t v184 = v52;
                  if ((v3 & 0xC000000000000001LL) != 0)
                  {
                    uint64_t v96 = swift_retain();
                    uint64_t v97 = __CocoaSet.makeIterator()(v96);
                    char v98 = sub_100183168(0LL, (unint64_t *)&unk_10064B7B0, &OBJC_CLASS___SFAutoUnlockDevice_ptr);
                    char v99 = sub_10023F574();
                    uint64_t v100 = Set.Iterator.init(_cocoa:)(v164, v97, v98, v99);
                    char v7 = *(void *)(v2 + 16);
                    v187 = *(void *)(v2 + 24);
                    BOOL v101 = v2;
                    uint64_t v102 = *(void *)(v2 + 32);
                    uint64_t v2 = *(void *)(v2 + 40);
                    char v103 = *(void *)(v101 + 48);
                  }

                  else
                  {
                    uint64_t v104 = -1LL << *(_BYTE *)(v3 + 32);
                    v187 = v3 + 56;
                    uint64_t v102 = ~v104;
                    char v105 = -v104;
                    if (v105 < 64) {
                      uint64_t v106 = ~(-1LL << v105);
                    }
                    else {
                      uint64_t v106 = -1LL;
                    }
                    char v103 = v106 & *(void *)(v3 + 56);
                    uint64_t v100 = (void *)swift_retain();
                    uint64_t v2 = 0LL;
                    char v7 = v3;
                  }

                  os_log_type_t v186 = (unint64_t)(v102 + 64) >> 6;
                  while (2)
                  {
                    double v108 = v2;
                    if (v7 < 0)
                    {
                      uint64_t v111 = __CocoaSet.Iterator.next()(v100);
                      if (!v111)
                      {
                        uint64_t v2 = v180;
                        uint64_t v62 = v190;
LABEL_152:
                        id v52 = v184;
                        id v66 = v181;
                        uint64_t v65 = v182;
                        goto LABEL_153;
                      }

                      v112 = v111;
                      *uint64_t v183 = v111;
                      v113 = sub_100183168( 0LL,  (unint64_t *)&unk_10064B7B0,  &OBJC_CLASS___SFAutoUnlockDevice_ptr);
                      swift_unknownObjectRetain(v112);
                      swift_dynamicCast(v185, v183, (char *)&type metadata for Swift.AnyObject + 8, v113, 7LL);
                      v114 = *v185;
                      swift_unknownObjectRelease(v112);
                      uint64_t v62 = v190;
                      if (!v114) {
                        goto LABEL_151;
                      }
                      goto LABEL_121;
                    }

                    if (v103)
                    {
                      v109 = __clz(__rbit64(v103));
                      v103 &= v103 - 1;
                      uint64_t v110 = v109 | (v2 << 6);
                      uint64_t v62 = v190;
LABEL_120:
                      v114 = *(id *)(*(void *)(v7 + 48) + 8 * v110);
                      if (!v114)
                      {
LABEL_151:
                        uint64_t v2 = v180;
                        goto LABEL_152;
                      }

LABEL_152:
                __break(1u);
LABEL_153:
                __break(1u);
LABEL_154:
                __break(1u);
              }

              uint64_t v13 = v171;
            }
          }
        }

LABEL_132:
        uint64_t isUniquelyReferenced_nonNull_native = (v170 - 1) & v170;
        unint64_t v168 = __clz(__rbit64(v170)) + (v13 << 6);
LABEL_133:
        v172 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v168);
        uint64_t v173 = *v172;
        unint64_t v174 = v172[1];
        sub_10019BA8C(*v172, v174);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        uint64_t v2 = (uint64_t)Data._bridgeToObjectiveC()().super.isa;
        *(void *)__dst = 0LL;
        uint64_t v6 = (char *)[v203 addKey:isa value:v2 error:__dst];

        uint64_t v4 = *(const char ***)__dst;
        if (!(_DWORD)v6)
        {
          id v177 = *(id *)__dst;
          _convertNSErrorToError(_:)(v4);

          swift_willThrow(v178);
          sub_100189B20(v173, v174);
          sub_100189B20(v163, (unint64_t)v204);
          swift_release(v190);
          swift_release(v193);
          swift_release(v200);
          swift_release(v3);

          return;
        }

        id v176 = *(id *)__dst;
        sub_100189B20(v173, v174);
        if (isUniquelyReferenced_nonNull_native) {
          goto LABEL_118;
        }
      }
    }

    v160 = v154 + 4;
    if ((uint64_t)(v154 + 4) < v197)
    {
      unint64_t v158 = *(void *)&v196[8 * (void)v160];
      if (v158)
      {
        int64_t v159 = (int64_t)(v154 + 4);
        goto LABEL_113;
      }

      while (1)
      {
        int64_t v159 = (int64_t)(v160 + 1);
        if (__OFADD__(v160, 1LL)) {
          goto LABEL_154;
        }
        if (v159 >= v197) {
          break;
        }
        unint64_t v158 = *(void *)&v196[8 * v159];
        ++v160;
        if (v158) {
          goto LABEL_113;
        }
      }
    }
  }

LABEL_141:
  swift_release(v200);
  uint64_t v181 = mach_absolute_time();
  BOOL v182 = v181 >= v191;
  uint64_t v183 = v181 - v191;
  if (v182)
  {
    uint64_t v184 = UpTicksToMilliseconds(v183);
    v185 = (os_log_s *)Logger.logObject.getter(v184);
    os_log_type_t v186 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v185, v186))
    {
      v187 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)v187 = 134217984;
      v155 = v193;
      *(void *)__dst = v184;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(__dst, &__dst[8], v187 + 4, v187 + 12);
      _os_log_impl( (void *)&_mh_execute_header,  v185,  v186,  "CDB: Persist completed. Operation took %llu ms.",  v187,  0xCu);
      swift_slowDealloc(v187, -1LL, -1LL);
    }

    swift_release(v190);
    swift_release(v155);
  }

  else
  {
    __break(1u);
LABEL_155:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
    __break(1u);
LABEL_156:
    swift_release(v2);
LABEL_157:
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    __break(1u);
  }

void sub_1003A3FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  static Data._unconditionallyBridgeFromObjectiveC(_:)(a2);
  __asm { BR              X10 }

uint64_t sub_1003A402C@<X0>(int a1@<W8>)
{
  uint64_t v37 = v2;
  if (BYTE6(v5) != 2LL)
  {
    if (a1)
    {
      if (a1 == 1)
      {
        LODWORD(v9) = HIDWORD(v6) - v6;
        if (__OFSUB__(HIDWORD(v6), (_DWORD)v6))
        {
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
          goto LABEL_35;
        }

        uint64_t v9 = (int)v9;
      }

      else
      {
        uint64_t v17 = *(void *)(v6 + 16);
        uint64_t v16 = *(void *)(v6 + 24);
        BOOL v18 = __OFSUB__(v16, v17);
        uint64_t v9 = v16 - v17;
        if (v18)
        {
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
      }
    }

    else
    {
      uint64_t v9 = BYTE6(v5);
    }

    if (v9 == 32)
    {
      uint64_t v12 = v3;
      int64_t v36 = v7;
      uint64_t v14 = sub_1003C0970(v4, v1);
      BOOL v15 = v19;
      uint64_t v35 = v4;
      unint64_t v13 = v1;
      swift_bridgeObjectRelease(v20);
      goto LABEL_19;
    }

    goto LABEL_36;
  }

  if (!a1)
  {
    uint64_t v8 = BYTE6(v5);
    goto LABEL_14;
  }

  if (a1 != 1)
  {
    uint64_t v11 = *(void *)(v6 + 16);
    uint64_t v10 = *(void *)(v6 + 24);
    uint64_t v8 = v10 - v11;
    if (!__OFSUB__(v10, v11)) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }

  if (__OFSUB__(HIDWORD(v6), (_DWORD)v6))
  {
    __break(1u);
    goto LABEL_33;
  }

  uint64_t v8 = HIDWORD(v6) - (int)v6;
LABEL_13:
  sub_10019BA8C(v6, v5);
LABEL_14:
  if (v8 != 2)
  {
LABEL_37:
    __break(1u);
    ((void (*)(uint64_t, const char *, uint64_t, uint64_t, uint64_t))swift_unexpectedError)( v3,  "DaemoniOSLibrary/SDAirDropHashStoreCDB.swift",  44LL,  1LL,  154LL);
    __break(1u);
    JUMPOUT(0x1003A447CLL);
  }

  uint64_t v12 = v3;
  sub_1002DD198(v6, v5);
  sub_100189B20(v6, v5);
  sub_1003C2878(v4, v1);
  uint64_t v35 = v4;
  int64_t v36 = v7;
  unint64_t v13 = v1;
  uint64_t v14 = v38[1];
  BOOL v15 = (const char *)v38[2];
  swift_bridgeObjectRelease((const char *)v38[4]);
LABEL_19:
  *(void *)&double v21 = swift_beginAccess(v37 + 40, &v41, 0LL, 0LL).n128_u64[0];
  BOOL v22 = *(const char **)(v37 + 40);
  *(void *)&double v23 = swift_bridgeObjectRetain(v22, v21).n128_u64[0];
  swift_bridgeObjectRetain(v15, v23);
  char v24 = sub_1003A084C(v14, (uint64_t)v15, (uint64_t)v22);
  *(void *)&double v25 = swift_bridgeObjectRelease(v15).n128_u64[0];
  swift_bridgeObjectRelease(v22, v25);
  char v26 = sub_1003A084C(v14, (uint64_t)v15, v12);
  swift_bridgeObjectRelease(v15);
  if ((v24 & 1) != 0 || (v26 & 1) != 0)
  {
    sub_100189B20(v6, v5);
    uint64_t v27 = v35;
    goto LABEL_22;
  }

  swift_beginAccess(v36, v38, 32LL, 0LL);
  if (!*((void *)*v36 + 2)) {
    goto LABEL_28;
  }
  sub_10019BA8C(v6, v5);
  sub_1003AD7E0(v6, v5, (void (*)(void *, uint64_t, uint64_t))&Data.hash(into:), sub_1003B1AE0);
  if ((v30 & 1) == 0)
  {
    sub_100189B20(v6, v5);
LABEL_28:
    swift_endAccess(v38);
    swift_beginAccess(v36, v38, 33LL, 0LL);
    sub_10019BA8C(v6, v5);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v36);
    v39[0] = *v36;
    *int64_t v36 = (const char *)0x8000000000000000LL;
    sub_1003B411C((uint64_t)&_swiftEmptySetSingleton, v6, v5, isUniquelyReferenced_nonNull_native);
    uint64_t v32 = *v36;
    *int64_t v36 = (const char *)v39[0];
    swift_bridgeObjectRelease(v32);
    sub_100189B20(v6, v5);
    swift_endAccess(v38);
    goto LABEL_29;
  }

  swift_endAccess(v38);
  sub_100189B20(v6, v5);
LABEL_29:
  swift_beginAccess(v36, v39, 33LL, 0LL);
  sub_10019BA8C(v6, v5);
  uint64_t v33 = sub_1003A4530(v38, v6, v5);
  if (*v34)
  {
    sub_10019BA8C(v35, v13);
    sub_1003B5B34(v40, v35, v13);
    ((void (*)(void *, void))v33)(v38, 0LL);
    swift_endAccess(v39);
    sub_100189B20(v35, v13);
    sub_100189B20(v6, v5);
    sub_100189B20(v6, v5);
    uint64_t v27 = v40[0];
    unint64_t v28 = v40[1];
    return sub_100189B20(v27, v28);
  }

  ((void (*)(void *, void))v33)(v38, 0LL);
  swift_endAccess(v39);
  sub_100189B20(v6, v5);
  sub_100189B20(v6, v5);
  uint64_t v27 = v35;
LABEL_22:
  unint64_t v28 = v13;
  return sub_100189B20(v27, v28);
}

void (*sub_1003A448C(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain(a3);
  v6[5] = sub_1003BFF88(v6, a2, a3);
  return sub_1003A44F8;
}

void sub_1003A44F8(void *a1)
{
  unint64_t v1 = (void *)*a1;
  uint64_t v2 = *(void *)(*a1 + 32LL);
  (*(void (**)(void, void))(*a1 + 40LL))(*a1, 0LL);
  swift_bridgeObjectRelease(v2);
  free(v1);
}

void (*sub_1003A4530(void *a1, uint64_t a2, unint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x38uLL);
  *a1 = v6;
  v6[4] = a2;
  v6[5] = a3;
  sub_10019BA8C(a2, a3);
  v6[6] = sub_1003C0068(v6, a2, a3);
  return sub_1003A45A0;
}

void sub_1003A45A0(void *a1)
{
  unint64_t v1 = (void *)*a1;
  unint64_t v2 = *(void *)(*a1 + 40LL);
  uint64_t v3 = *(void *)(*a1 + 32LL);
  (*(void (**)(void, void))(*a1 + 48LL))(*a1, 0LL);
  sub_100189B20(v3, v2);
  free(v1);
}

void sub_1003A45E8(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v8 = *(void (**)(id, id, uint64_t))(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  swift_retain(v7);
  id v10 = a2;
  id v9 = a3;
  v8(v10, v9, a4);
  swift_release(v7);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SDAirDropHashStoreCDB.destroy()()
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  id v9 = (char *)v43 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)v43 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v43 - v13;
  if ((*(_BYTE *)(v0 + 49) & 1) == 0)
  {
    *(_BYTE *)(v0 + 49) = 1;
    if (*(_BYTE *)(v0 + 48) == 1) {
      [*(id *)(v0 + 16) close];
    }
    v43[1] = v1;
    if (qword_100644280 != -1) {
      swift_once(&qword_100644280, sub_1003A144C);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    uint64_t v16 = sub_100186DE4(v15, (uint64_t)qword_1006522A0);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "CDB: Destroy called", v19, 2u);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    id v20 = sub_100115468();
    if (v20)
    {
      double v21 = v20;
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      char v24 = v23;

      URL.init(fileURLWithPath:)(v22, v24);
      __n128 v25 = swift_bridgeObjectRelease(v24);
      URL.appendingPathComponent(_:)(0x48706F7244726941LL, 0xED00004244687361LL, v25);
      char v26 = *(double (**)(char *, uint64_t))(v3 + 8);
      v27.n128_f64[0] = v26(v9, v2);
      URL.appendingPathComponent(_:)(0x48706F7244726941LL, 0xED00004244687361LL, v27);
      URL.appendingPathExtension(_:)(0x5F706F7264726961LL, 0xEC00000034766264LL);
      v26(v6, v2);
      v28.n128_f64[0] = v26(v14, v2);
      URL.path.getter(v28);
      char v30 = v29;
      v26(v12, v2);
      __n128 v31 = (void *)objc_opt_self(&OBJC_CLASS___NSFileManager);
      id v32 = [v31 defaultManager];
      NSString v33 = String._bridgeToObjectiveC()();
      unsigned int v34 = [v32 fileExistsAtPath:v33];

      if (v34)
      {
        id v35 = [v31 defaultManager];
        NSString v36 = String._bridgeToObjectiveC()();
        *(void *)&double v37 = swift_bridgeObjectRelease(v30).n128_u64[0];
        id v44 = 0LL;
        unsigned int v38 = objc_msgSend(v35, "removeItemAtPath:error:", v36, &v44, v37);

        id v39 = v44;
        if (v38)
        {
          id v40 = v44;
        }

        else
        {
          id v41 = v44;
          _convertNSErrorToError(_:)(v39);

          swift_willThrow(v42);
        }
      }

      else
      {
        swift_bridgeObjectRelease(v30);
      }
    }

    else
    {
      __break(1u);
    }
  }

const char *SDAirDropHashStoreCDB.contact(forLongHash:)( Swift::UInt64 a1, Swift::UInt64 a2, Swift::UInt64 a3, Swift::UInt64 a4)
{
  if (*(_BYTE *)(v4 + 48) != 1)
  {
    char v7 = 1;
    goto LABEL_5;
  }

  if ((*(_BYTE *)(v4 + 49) & 1) != 0)
  {
    char v7 = 2;
LABEL_5:
    unint64_t v8 = sub_10038FFB4();
    uint64_t v9 = swift_allocError(&type metadata for SDAirDropHashError, v8, 0LL, 0LL);
    char *v10 = v7;
LABEL_6:
    swift_willThrow(v9);
    return v6;
  }

  uint64_t v51 = v5;
  swift_beginAccess(v4 + 32, v59, 0LL, 0LL);
  uint64_t v52 = v4;
  uint64_t v12 = *(void *)(v4 + 32);
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    uint64_t v14 = (void *)(v12 + 48);
    while (1)
    {
      uint64_t v6 = (const char *)v14[1];
      uint64_t v15 = (const char *)*(v14 - 1);
      uint64_t v53 = *(v14 - 2);
      Swift::UInt64 v17 = v14[4];
      Swift::UInt64 v16 = v14[5];
      Swift::UInt64 v19 = v14[2];
      Swift::UInt64 v18 = v14[3];
      Hasher.init(_seed:)(v58);
      Hasher._combine(_:)(v19);
      Hasher._combine(_:)(v18);
      Hasher._combine(_:)(v17);
      Hasher._combine(_:)(v16);
      Swift::Int v20 = Hasher._finalize()();
      Hasher.init(_seed:)(v58);
      Hasher._combine(_:)(a1);
      Hasher._combine(_:)(a2);
      Hasher._combine(_:)(a3);
      Hasher._combine(_:)(a4);
      if (v20 == Hasher._finalize()()) {
        break;
      }
      v14 += 9;
      if (!--v13) {
        goto LABEL_12;
      }
    }

    *(void *)&double v30 = swift_bridgeObjectRetain(v15).n128_u64[0];
    swift_bridgeObjectRetain(v6, v30);
    return (const char *)v53;
  }

  else
  {
LABEL_12:
    id v21 = *(id *)(v4 + 16);
    uint64_t v22 = (const char *)sub_1002DC36C(a1, a2, a3, a4);
    uint64_t v23 = sub_1003C08D8(v22);
    unint64_t v25 = v24;
    swift_bridgeObjectRelease(v22);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100189B20(v23, v25);
    uint64_t v27 = sub_100183168(0LL, (unint64_t *)&qword_100644438, &OBJC_CLASS___NSData_ptr);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v27);
    v58[0] = 0LL;
    id v29 = [v21 valueForKey:isa valueType:ObjCClassFromMetadata error:v58];

    if (v58[0])
    {
      v58[0];

      goto LABEL_6;
    }

    if (v29)
    {
      id v31 = v29;
      uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v29);
      unint64_t v34 = v33;

      uint64_t v6 = (const char *)sub_1003C0970(v32, v34);
      NSString v36 = v35;
      unsigned int v38 = v37;
      sub_100189B20(v32, v34);
      if (v5)
      {
      }

      else
      {
        *(void *)&double v39 = swift_beginAccess(v52 + 40, v58, 0LL, 0LL).n128_u64[0];
        id v40 = *(const char **)(v52 + 40);
        *(void *)&double v41 = swift_bridgeObjectRetain(v40, v39).n128_u64[0];
        swift_bridgeObjectRetain(v36, v41);
        char v42 = sub_1003A084C((uint64_t)v6, (uint64_t)v36, (uint64_t)v40);
        *(void *)&double v43 = swift_bridgeObjectRelease(v36).n128_u64[0];
        swift_bridgeObjectRelease(v40, v43);
        uint64_t v44 = *(void *)(v52 + 32);
        uint64_t v45 = *(void *)(v44 + 16);
        if (v45)
        {
          uint64_t v46 = (const char **)(v44 + 40);
          while (1)
          {
            uint64_t v47 = *(v46 - 1);
            NSString v48 = *v46;
            BOOL v49 = v47 == v6 && v48 == v36;
            if (v49 || (_stringCompareWithSmolCheck(_:_:expecting:)(v47, v48, v6, v36, 0LL) & 1) != 0) {
              break;
            }
            v46 += 9;
            if (!--v45) {
              goto LABEL_27;
            }
          }

          swift_bridgeObjectRelease(v36, 0LL);
        }

        else
        {
LABEL_27:

          if ((v42 & 1) == 0) {
            return v6;
          }
          *(void *)&double v50 = swift_bridgeObjectRelease(v36).n128_u64[0];
        }

        swift_bridgeObjectRelease(v38, v50, v51);
        return 0LL;
      }
    }

    else
    {
      return 0LL;
    }
  }

  return v6;
}

uint64_t SDAirDropHashStoreCDB.contacts(forLongHash:)( Swift::UInt64 a1, Swift::UInt64 a2, Swift::UInt64 a3, Swift::UInt64 a4)
{
  if (*(_BYTE *)(v4 + 48) != 1)
  {
    uint64_t v5 = 1LL;
    goto LABEL_5;
  }

  if ((*(_BYTE *)(v4 + 49) & 1) != 0)
  {
    uint64_t v5 = 2LL;
LABEL_5:
    unint64_t v6 = sub_10038FFB4();
    uint64_t v7 = swift_allocError(&type metadata for SDAirDropHashError, v6, 0LL, 0LL);
    *unint64_t v8 = v5;
    swift_willThrow(v7);
    return v5;
  }

  uint64_t v10 = swift_allocObject(&unk_1005DE778, 24LL, 7LL);
  *(void *)(v10 + 16) = &_swiftEmptySetSingleton;
  uint64_t v59 = v10 + 16;
  *(void *)&double v11 = swift_beginAccess(v4 + 32, v79, 0LL, 0LL).n128_u64[0];
  uint64_t v60 = v4;
  uint64_t v12 = *(void *)(v4 + 32);
  uint64_t v13 = *(void *)(v12 + 16);
  uint64_t v61 = v10;
  if (v13)
  {
    swift_bridgeObjectRetain((const char *)v12, v11);
    uint64_t v15 = 0LL;
    unint64_t v63 = v14;
    uint64_t v64 = _swiftEmptyArrayStorage;
    do
    {
      Swift::UInt64 v19 = *(const char **)&v14[v15 + 40];
      Swift::Int v20 = *(const char **)&v14[v15 + 56];
      uint64_t v73 = *(void *)&v14[v15 + 48];
      uint64_t v74 = *(void *)&v14[v15 + 32];
      Swift::UInt64 v21 = *(void *)&v14[v15 + 64];
      Swift::UInt64 v22 = *(void *)&v14[v15 + 72];
      Swift::UInt64 v23 = *(void *)&v14[v15 + 80];
      Swift::UInt64 v24 = *(void *)&v14[v15 + 88];
      int v70 = *(unsigned __int16 *)&v14[v15 + 96];
      int v71 = v14[v15 + 98];
      char v75 = v14[v15 + 99];
      Hasher.init(_seed:)(aBlock);
      Swift::UInt64 v72 = v21;
      Hasher._combine(_:)(v21);
      Hasher._combine(_:)(v22);
      Hasher._combine(_:)(v23);
      Hasher._combine(_:)(v24);
      Swift::Int v25 = Hasher._finalize()();
      Hasher.init(_seed:)(aBlock);
      Hasher._combine(_:)(a1);
      Hasher._combine(_:)(a2);
      Hasher._combine(_:)(a3);
      Hasher._combine(_:)(a4);
      if (v25 == Hasher._finalize()())
      {
        *(void *)&double v26 = swift_bridgeObjectRetain(v19).n128_u64[0];
        swift_bridgeObjectRetain(v20, v26);
        uint64_t v27 = v64;
        uint64_t v76 = v64;
        uint64_t v62 = v19;
        if ((swift_isUniquelyReferenced_nonNull_native(v64) & 1) == 0)
        {
          sub_10018D9E8(0, v64[2] + 1LL, 1);
          uint64_t v27 = v76;
        }

        unint64_t v17 = v27[2];
        unint64_t v16 = v27[3];
        if (v17 >= v16 >> 1)
        {
          sub_10018D9E8(v16 > 1, v17 + 1, 1);
          uint64_t v27 = v76;
        }

        v27[2] = v17 + 1;
        uint64_t v64 = v27;
        Swift::UInt64 v18 = &v27[9 * v17];
        v18[4] = v74;
        v18[5] = v62;
        v18[6] = v73;
        v18[7] = v20;
        v18[8] = v72;
        v18[9] = v22;
        v18[10] = v23;
        v18[11] = v24;
        *((_BYTE *)v18 + 98) = (v70 | (v71 << 16)) >> 16;
        *((_WORD *)v18 + 48) = v70;
        *((_BYTE *)v18 + 99) = v75;
      }

      v15 += 72LL;
      --v13;
      uint64_t v14 = v63;
    }

    while (v13);
    swift_bridgeObjectRelease(v63);
    uint64_t v10 = v61;
    __n128 v28 = v64;
    int64_t v29 = v64[2];
    if (v29)
    {
LABEL_17:
      aBlock[0] = _swiftEmptyArrayStorage;
      double v30 = v28;
      sub_10018DA20(0, v29, 0);
      id v31 = aBlock[0];
      uint64_t v65 = v30;
      uint64_t v32 = (const char **)(v30 + 7);
      do
      {
        uint64_t v34 = (uint64_t)*(v32 - 3);
        unint64_t v33 = *(v32 - 2);
        uint64_t v35 = (uint64_t)*(v32 - 1);
        NSString v36 = *v32;
        aBlock[0] = v31;
        unint64_t v38 = v31[2];
        unint64_t v37 = v31[3];
        *(void *)&double v39 = swift_bridgeObjectRetain(v33).n128_u64[0];
        swift_bridgeObjectRetain(v36, v39);
        if (v38 >= v37 >> 1)
        {
          sub_10018DA20(v37 > 1, v38 + 1, 1);
          id v31 = aBlock[0];
        }

        v31[2] = v38 + 1;
        id v40 = &v31[4 * v38];
        v40[4] = v34;
        v40[5] = v33;
        v40[6] = v35;
        v40[7] = v36;
        v32 += 9;
        --v29;
      }

      while (v29);
      swift_release(v65);
      uint64_t v10 = v61;
      if (v31[2]) {
        goto LABEL_22;
      }
      goto LABEL_25;
    }
  }

  else
  {
    __n128 v28 = _swiftEmptyArrayStorage;
    int64_t v29 = _swiftEmptyArrayStorage[2];
    if (v29) {
      goto LABEL_17;
    }
  }

  swift_release(v28);
  id v31 = _swiftEmptyArrayStorage;
  if (_swiftEmptyArrayStorage[2])
  {
LABEL_22:
    uint64_t v41 = sub_10018FFE0((uint64_t)v31);
    swift_bridgeObjectRelease((const char *)v31);
    sub_1003A12BC(v41);
    goto LABEL_26;
  }

void sub_1003A53F0(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a1);
  unint64_t v9 = v8;
  uint64_t v10 = sub_1003C0970(v7, v8);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  sub_100189B20(v7, v9);
  *(void *)&double v17 = swift_beginAccess(a3 + 40, v33, 0LL, 0LL).n128_u64[0];
  Swift::UInt64 v18 = *(const char **)(a3 + 40);
  *(void *)&double v19 = swift_bridgeObjectRetain(v18, v17).n128_u64[0];
  swift_bridgeObjectRetain(v12, v19);
  uint64_t v20 = sub_1003A084C(v10, (uint64_t)v12, (uint64_t)v18);
  *(void *)&double v21 = swift_bridgeObjectRelease(v12).n128_u64[0];
  swift_bridgeObjectRelease(v18, v21);
  swift_beginAccess(a3 + 32, v32, 0LL, 0LL);
  uint64_t v22 = *(void *)(a3 + 32);
  uint64_t v23 = *(void *)(v22 + 16);
  if (v23)
  {
    Swift::UInt64 v24 = (const char **)(v22 + 40);
    do
    {
      uint64_t v25 = (uint64_t)*(v24 - 1);
      double v26 = *v24;
      BOOL v27 = v25 == v10 && v26 == v12;
      if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, v10, v12, 0LL) & 1) != 0) {
        goto LABEL_10;
      }
      v24 += 9;
    }

    while (--v23);
  }

  if ((v20 & 1) != 0)
  {
LABEL_10:
    *(void *)&double v28 = swift_bridgeObjectRelease(v12).n128_u64[0];
    swift_bridgeObjectRelease(v14, v28);
    return;
  }

  swift_beginAccess(a4 + 16, v30, 33LL, 0LL);
  sub_1003B6D58(v31, v10, v12, v16, v14);
  swift_endAccess(v30);
  *(void *)&double v29 = swift_bridgeObjectRelease((const char *)v31[1]).n128_u64[0];
  swift_bridgeObjectRelease((const char *)v31[3], v29);
  *a2 = 0;
}

void sub_1003A55CC(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
}

DaemoniOSLibrary::SDHashStoreContact_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SDAirDropHashStoreCDB.contact(forMediumHash:)( DaemoniOSLibrary::MediumHash forMediumHash)
{
  if (*(_BYTE *)(v2 + 48) != 1)
  {
    uint64_t v7 = 1LL;
    goto LABEL_5;
  }

  unint64_t v6 = *(unsigned __int8 *)(v2 + 49);
  if ((v6 & 1) != 0)
  {
    uint64_t v7 = 2LL;
LABEL_5:
    unint64_t v8 = sub_10038FFB4();
    uint64_t v9 = swift_allocError(&type metadata for SDAirDropHashError, v8, 0LL, 0LL);
    _BYTE *v10 = v7;
    swift_willThrow(v9);
    goto LABEL_6;
  }

  int v15 = *(_DWORD *)&forMediumHash.shortHash.storage;
  uint64_t v16 = sub_1003A0228(*(int *)&forMediumHash.shortHash.storage, 2uLL, v1, v6);
  uint64_t v17 = sub_1003C08D8(v16);
  unint64_t v19 = v18;
  swift_bridgeObjectRelease(v16);
  v20.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100189B20(v17, v19);
  if ([*(id *)(v2 + 16) valueExistsForKey:v20.super.isa])
  {
    uint64_t v3 = swift_allocObject(&unk_1005DE700, 24LL, 7LL);
    *(void *)(v3 + 16) = 0LL;
    id v31 = (void *)(v3 + 16);
    uint64_t v21 = swift_allocObject(&unk_1005DE7F0, 48LL, 7LL);
    *(_OWORD *)(v21 + 16) = 0u;
    *(_OWORD *)(v21 + 32) = 0u;
    uint64_t v22 = *(void **)(v2 + 16);
    uint64_t v23 = swift_allocObject(&unk_1005DE818, 48LL, 7LL);
    *(void *)(v23 + 16) = v2;
    *(_WORD *)(v23 + 24) = v15;
    *(_BYTE *)(v23 + 26) = BYTE2(v15);
    *(void *)(v23 + 32) = v21;
    *(void *)(v23 + 40) = v3;
    aBlock[4] = sub_1003C2418;
    uint64_t v34 = v23;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_1003A55CC;
    aBlock[3] = &unk_1005DE830;
    Swift::UInt64 v24 = _Block_copy(aBlock);
    uint64_t v25 = v34;
    id v26 = v22;
    uint64_t v27 = v3;
    id v4 = v26;
    id v5 = v20.super.isa;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release(v25);
    aBlock[0] = 0LL;
    LODWORD(v25) = [v4 enumerateValuesForKey:v5 error:aBlock handler:v24];
    _Block_release(v24);

    id v28 = aBlock[0];
    if ((_DWORD)v25)
    {
      uint64_t v7 = v3 + 16;
      swift_beginAccess(v31, aBlock, 0LL, 0LL);
      if (*v31)
      {
        uint64_t v29 = swift_errorRetain(*v31);
        swift_willThrow(v29);

        swift_release(v3);
        swift_release(v21);
      }

      else
      {

        swift_beginAccess(v21 + 16, v32, 0LL, 0LL);
        uint64_t v7 = *(void *)(v21 + 16);
        uint64_t v3 = *(void *)(v21 + 24);
        id v4 = *(id *)(v21 + 32);
        id v5 = *(objc_class **)(v21 + 40);
        sub_1003C2424(v7, v3, (uint64_t)v4, (uint64_t)v5);
        swift_release(v27);
        swift_release(v21);
      }
    }

    else
    {
      uint64_t v7 = (uint64_t)v28;
      _convertNSErrorToError(_:)(v28);

      swift_willThrow(v30);
      swift_release(v3);
      swift_release(v21);
    }
  }

  else
  {

    uint64_t v7 = 0LL;
    uint64_t v3 = 0LL;
    id v4 = 0LL;
    id v5 = 0LL;
  }

__n128 sub_1003A5964(uint64_t a1, _BYTE *a2, uint64_t a3, int a4, void *a5)
{
  uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a1);
  unint64_t v11 = v10;
  sub_1003C2878(v9, v10);
  uint64_t v13 = v38;
  uint64_t v12 = v39;
  uint64_t v32 = v40;
  unint64_t v33 = v41;
  sub_100189B20(v9, v11);
  if (v36 == (unsigned __int16)a4 && v37 == BYTE2(a4))
  {
    *(void *)&double v14 = swift_beginAccess(a3 + 40, &v36, 0LL, 0LL).n128_u64[0];
    int v15 = *(const char **)(a3 + 40);
    *(void *)&double v16 = swift_bridgeObjectRetain(v15, v14).n128_u64[0];
    swift_bridgeObjectRetain(v12, v16);
    char v17 = sub_1003A084C(v13, (uint64_t)v12, (uint64_t)v15);
    *(void *)&double v18 = swift_bridgeObjectRelease(v12).n128_u64[0];
    swift_bridgeObjectRelease(v15, v18);
    swift_beginAccess(a3 + 32, v35, 0LL, 0LL);
    uint64_t v19 = *(void *)(a3 + 32);
    uint64_t v20 = *(void *)(v19 + 16);
    if (v20)
    {
      uint64_t v21 = (const char **)(v19 + 40);
      do
      {
        uint64_t v22 = (uint64_t)*(v21 - 1);
        uint64_t v23 = *v21;
        BOOL v24 = v22 == v13 && v23 == v12;
        if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v13, v12, 0LL) & 1) != 0) {
          goto LABEL_12;
        }
        v21 += 9;
      }

      while (--v20);
    }

    if ((v17 & 1) != 0)
    {
LABEL_12:
      *(void *)&double v25 = swift_bridgeObjectRelease(v12, v32).n128_u64[0];
      return swift_bridgeObjectRelease(v33, v25);
    }

    swift_beginAccess(a5 + 2, v34, 1LL, 0LL);
    uint64_t v28 = a5[2];
    uint64_t v29 = a5[3];
    uint64_t v30 = a5[4];
    uint64_t v31 = a5[5];
    a5[2] = v13;
    a5[3] = v12;
    a5[4] = v32;
    a5[5] = v33;
    sub_100390144(v28, v29, v30, v31);
    *a2 = 1;
  }

  else
  {
    *(void *)&double v27 = swift_bridgeObjectRelease(v41, v40).n128_u64[0];
    return swift_bridgeObjectRelease(v39, v27);
  }

  return result;
}

void *SDAirDropHashStoreCDB.contacts(forMediumHash:)(int a1)
{
  if (*(_BYTE *)(v1 + 48) != 1)
  {
    char v4 = 1;
    goto LABEL_5;
  }

  if ((*(_BYTE *)(v1 + 49) & 1) != 0)
  {
    char v4 = 2;
LABEL_5:
    unint64_t v5 = sub_10038FFB4();
    uint64_t v6 = swift_allocError(&type metadata for SDAirDropHashError, v5, 0LL, 0LL);
    *uint64_t v7 = v4;
    swift_willThrow(v6);
    return v3;
  }

  int v8 = a1;
  uint64_t v58 = v2;
  int v61 = BYTE2(a1);
  uint64_t v60 = swift_allocObject(&unk_1005DE778, 24LL, 7LL);
  *(void *)(v60 + 16) = &_swiftEmptySetSingleton;
  *(void *)&double v9 = swift_beginAccess(v1 + 32, v71, 0LL, 0LL).n128_u64[0];
  uint64_t v59 = v1;
  uint64_t v10 = *(void *)(v1 + 32);
  uint64_t v11 = *(void *)(v10 + 16);
  int v63 = v8;
  if (v11)
  {
    swift_bridgeObjectRetain((const char *)v10, v9);
    uint64_t v13 = 0LL;
    double v14 = (const char **)_swiftEmptyArrayStorage;
    int v15 = v61;
    uint64_t v62 = v12;
    do
    {
      uint64_t v20 = &v12[v13];
      if ((v12[v13 + 99] & 1) == 0)
      {
        int v21 = *((unsigned __int16 *)v20 + 48) | (*((unsigned __int8 *)v20 + 98) << 16);
        if (*((unsigned __int16 *)v20 + 48) == (unsigned __int16)v8 && *((unsigned __int8 *)v20 + 98) == v15)
        {
          uint64_t v23 = (const char *)*((void *)v20 + 4);
          BOOL v24 = (const char *)*((void *)v20 + 5);
          id v26 = (const char *)*((void *)v20 + 6);
          double v25 = (const char *)*((void *)v20 + 7);
          __int128 v65 = *((_OWORD *)v20 + 5);
          __int128 v66 = *((_OWORD *)v20 + 4);
          *(void *)&double v27 = swift_bridgeObjectRetain(v24).n128_u64[0];
          swift_bridgeObjectRetain(v25, v27);
          aBlock[0] = v14;
          uint64_t v64 = v26;
          if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
          {
            sub_10018D9E8(0, (int64_t)(v14[2] + 1), 1);
            int v15 = v61;
            double v14 = (const char **)aBlock[0];
          }

          unint64_t v17 = (unint64_t)v14[2];
          unint64_t v16 = (unint64_t)v14[3];
          double v18 = v14;
          if (v17 >= v16 >> 1)
          {
            sub_10018D9E8(v16 > 1, v17 + 1, 1);
            int v15 = v61;
            double v18 = (const char **)aBlock[0];
          }

          v18[2] = (const char *)(v17 + 1);
          uint64_t v19 = &v18[9 * v17];
          v19[4] = v23;
          v19[5] = v24;
          v19[6] = v64;
          v19[7] = v25;
          *((_OWORD *)v19 + 4) = v66;
          *((_OWORD *)v19 + 5) = v65;
          *((_BYTE *)v19 + 98) = BYTE2(v21);
          *((_WORD *)v19 + 48) = v21;
          *((_BYTE *)v19 + 99) = 0;
          int v8 = v63;
          double v14 = v18;
          uint64_t v12 = v62;
        }
      }

      v13 += 72LL;
      --v11;
    }

    while (v11);
    swift_bridgeObjectRelease(v12);
    int64_t v28 = (int64_t)v14[2];
    if (v28)
    {
LABEL_21:
      aBlock[0] = _swiftEmptyArrayStorage;
      sub_10018DA20(0, v28, 0);
      uint64_t v29 = _swiftEmptyArrayStorage;
      uint64_t v30 = v14 + 7;
      do
      {
        uint64_t v32 = (uint64_t)*(v30 - 3);
        uint64_t v31 = *(v30 - 2);
        uint64_t v33 = (uint64_t)*(v30 - 1);
        uint64_t v34 = *v30;
        aBlock[0] = v29;
        unint64_t v36 = v29[2];
        unint64_t v35 = v29[3];
        *(void *)&double v37 = swift_bridgeObjectRetain(v31, v58).n128_u64[0];
        swift_bridgeObjectRetain(v34, v37);
        if (v36 >= v35 >> 1)
        {
          sub_10018DA20(v35 > 1, v36 + 1, 1);
          uint64_t v29 = aBlock[0];
        }

        v29[2] = v36 + 1;
        uint64_t v38 = &v29[4 * v36];
        v38[4] = v32;
        void v38[5] = v31;
        v38[6] = v33;
        v38[7] = v34;
        v30 += 9;
        --v28;
      }

      while (v28);
      swift_release(v14);
      int v8 = v63;
      if (v29[2]) {
        goto LABEL_26;
      }
LABEL_29:
      swift_bridgeObjectRelease((const char *)v29, v58);
      goto LABEL_30;
    }
  }

  else
  {
    double v14 = (const char **)_swiftEmptyArrayStorage;
    int64_t v28 = _swiftEmptyArrayStorage[2];
    if (v28) {
      goto LABEL_21;
    }
  }

  swift_release(v14);
  uint64_t v29 = _swiftEmptyArrayStorage;
  if (!_swiftEmptyArrayStorage[2]) {
    goto LABEL_29;
  }
LABEL_26:
  uint64_t v39 = sub_10018FFE0((uint64_t)v29);
  swift_bridgeObjectRelease((const char *)v29);
  sub_1003A12BC(v39);
LABEL_30:
  uint64_t v40 = swift_allocObject(&unk_1005DE700, 24LL, 7LL);
  *(void *)(v40 + 16) = 0LL;
  uint64_t v67 = (void *)(v40 + 16);
  uint64_t v42 = sub_1003A0228(v8, 2uLL, v41, v40 + 16);
  uint64_t v43 = sub_1003C08D8(v42);
  unint64_t v45 = v44;
  swift_bridgeObjectRelease(v42);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100189B20(v43, v45);
  uint64_t v47 = *(void **)(v59 + 16);
  uint64_t v48 = swift_allocObject(&unk_1005DE868, 48LL, 7LL);
  *(void *)(v48 + 16) = v59;
  *(_WORD *)(v48 + 24) = v8;
  *(_BYTE *)(v48 + 26) = v61;
  *(void *)(v48 + 32) = v60;
  *(void *)(v48 + 40) = v40;
  aBlock[4] = sub_1003C248C;
  uint64_t v70 = v48;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1003A55CC;
  aBlock[3] = &unk_1005DE880;
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v49 = v70;
  id v50 = v47;
  uint64_t v51 = isa;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release(v49);
  aBlock[0] = 0LL;
  unsigned int v52 = [v50 enumerateValuesForKey:v51 error:aBlock handler:v3];
  _Block_release(v3);

  id v53 = aBlock[0];
  if (v52)
  {
    swift_beginAccess(v67, aBlock, 0LL, 0LL);
    if (!*v67)
    {

      *(void *)&double v57 = swift_beginAccess(v60 + 16, v68, 0LL, 0LL).n128_u64[0];
      uint64_t v3 = *(void **)(v60 + 16);
      swift_bridgeObjectRetain((const char *)v3, v57);
      swift_release(v60);
      swift_release(v40);
      return v3;
    }

    uint64_t v54 = swift_errorRetain(*v67);
  }

  else
  {
    uint64_t v55 = v53;
    _convertNSErrorToError(_:)(v53);
  }

  swift_willThrow(v54);
  swift_release(v60);
  swift_release(v40);

  return v3;
}

__n128 sub_1003A60A4(uint64_t a1, _BYTE *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a1);
  unint64_t v11 = v10;
  sub_1003C2878(v9, v10);
  uint64_t v13 = v35;
  uint64_t v12 = v36;
  uint64_t v29 = v37;
  uint64_t v30 = v38;
  sub_100189B20(v9, v11);
  if ((unsigned __int16)v34 == (unsigned __int16)a4 && BYTE2(v34) == BYTE2(a4))
  {
    *(void *)&double v14 = swift_beginAccess(a3 + 40, v33, 0LL, 0LL).n128_u64[0];
    int v15 = *(const char **)(a3 + 40);
    *(void *)&double v16 = swift_bridgeObjectRetain(v15, v14).n128_u64[0];
    swift_bridgeObjectRetain(v12, v16);
    char v17 = sub_1003A084C((uint64_t)v13, (uint64_t)v12, (uint64_t)v15);
    *(void *)&double v18 = swift_bridgeObjectRelease(v12).n128_u64[0];
    swift_bridgeObjectRelease(v15, v18);
    swift_beginAccess(a3 + 32, v32, 0LL, 0LL);
    uint64_t v19 = *(void *)(a3 + 32);
    uint64_t v20 = *(void *)(v19 + 16);
    if (v20)
    {
      int v21 = (const char **)(v19 + 40);
      do
      {
        uint64_t v22 = *(v21 - 1);
        uint64_t v23 = *v21;
        BOOL v24 = v22 == v13 && v23 == v12;
        if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v13, v12, 0LL) & 1) != 0) {
          goto LABEL_12;
        }
        v21 += 9;
      }

      while (--v20);
    }

    if ((v17 & 1) != 0)
    {
LABEL_12:
      *(void *)&double v25 = swift_bridgeObjectRelease(v12).n128_u64[0];
      return swift_bridgeObjectRelease(v30, v25);
    }

    swift_beginAccess(a5 + 16, v31, 33LL, 0LL);
    sub_1003B6D58(&v34, (uint64_t)v13, v12, (uint64_t)v29, v30);
    swift_endAccess(v31);
    *(void *)&double v28 = swift_bridgeObjectRelease(v35).n128_u64[0];
    __n128 result = swift_bridgeObjectRelease(v37, v28);
    *a2 = 0;
  }

  else
  {
    *(void *)&double v27 = swift_bridgeObjectRelease(v38).n128_u64[0];
    return swift_bridgeObjectRelease(v36, v27);
  }

  return result;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SDAirDropHashStoreCDB.contains(shortHash:)( DaemoniOSLibrary::ShortHash shortHash)
{
  if (*(_BYTE *)(v1 + 48) != 1)
  {
    unsigned __int8 v2 = 1;
    goto LABEL_5;
  }

  if ((*(_BYTE *)(v1 + 49) & 1) != 0)
  {
    unsigned __int8 v2 = 2;
LABEL_5:
    unint64_t v3 = sub_10038FFB4();
    uint64_t v4 = swift_allocError(&type metadata for SDAirDropHashError, v3, 0LL, 0LL);
    *unint64_t v5 = v2;
    swift_willThrow(v4);
    return v2 & 1;
  }

  int v7 = *(_DWORD *)&shortHash;
  swift_beginAccess(v1 + 32, v19, 0LL, 0LL);
  uint64_t v8 = *(void *)(v1 + 32);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    uint64_t v10 = (_BYTE *)(v8 + 99);
    while ((*v10 & 1) != 0 || *(unsigned __int16 *)(v10 - 3) != (unsigned __int16)v7)
    {
      v10 += 72;
      if (!--v9) {
        goto LABEL_13;
      }
    }

    unsigned __int8 v2 = 1;
  }

  else
  {
LABEL_13:
    id v11 = *(id *)(v1 + 16);
    double v14 = sub_1003A0228(v7, 2uLL, v12, v13);
    uint64_t v15 = sub_1003C08D8(v14);
    unint64_t v17 = v16;
    swift_bridgeObjectRelease(v14);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100189B20(v15, v17);
    unsigned __int8 v2 = [v11 valueExistsForKey:isa];
  }

  return v2 & 1;
}

uint64_t SDAirDropHashStoreCDB.deinit()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return v0;
}

uint64_t SDAirDropHashStoreCDB.__deallocating_deinit()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return swift_deallocClassInstance(v0, 50LL, 7LL);
}

void sub_1003A648C()
{
}

void sub_1003A64A0(Swift::OpaquePointer a1)
{
}

void sub_1003A64B4(uint64_t a1, uint64_t a2)
{
}

void sub_1003A64C8()
{
}

void sub_1003A64DC()
{
}

void sub_1003A64F0()
{
}

void sub_1003A6504()
{
}

uint64_t SDAirDropHashStoreCDB.dumpDB(atFileURL:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = swift_allocObject(&unk_1005DE8B8, 32LL, 7LL);
  *(void *)(v4 + 16) = 0LL;
  *(void *)(v4 + 24) = 0xE000000000000000LL;
  uint64_t v5 = swift_allocObject(&unk_1005DE8B8, 32LL, 7LL);
  *(void *)(v5 + 16) = 0LL;
  *(void *)(v5 + 24) = 0xE000000000000000LL;
  uint64_t v6 = *(void **)(v2 + 16);
  uint64_t v7 = sub_100183168(0LL, (unint64_t *)&qword_100644438, &OBJC_CLASS___NSData_ptr);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v7);
  uint64_t v9 = (void *)swift_allocObject(&unk_1005DE8E0, 40LL, 7LL);
  v9[2] = v2;
  v9[3] = v4;
  v9[4] = v5;
  aBlock[4] = sub_1003C2510;
  double v27 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1003A45E8;
  aBlock[3] = &unk_1005DE8F8;
  uint64_t v10 = _Block_copy(aBlock);
  id v11 = v27;
  id v12 = v6;
  swift_retain(v2);
  swift_retain(v4);
  swift_retain(v5);
  swift_release(v11);
  aBlock[0] = 0LL;
  LODWORD(v11) = [v12 enumerateKeyType:ObjCClassFromMetadata valueType:ObjCClassFromMetadata error:aBlock handler:v10];
  _Block_release(v10);

  id v13 = aBlock[0];
  if (!(_DWORD)v11)
  {
    double v14 = v13;
    uint64_t v15 = _convertNSErrorToError(_:)(v13);

    swift_willThrow(v16);
    swift_errorRelease(v15);
  }

  swift_beginAccess(v4 + 16, aBlock, 0LL, 0LL);
  uint64_t v18 = *(void *)(v4 + 16);
  unint64_t v17 = *(char **)(v4 + 24);
  *(void *)&double v19 = swift_beginAccess(v5 + 16, v25, 0LL, 0LL).n128_u64[0];
  uint64_t v21 = *(void *)(v5 + 16);
  uint64_t v20 = *(char **)(v5 + 24);
  *(void *)&double v22 = swift_bridgeObjectRetain(v17, v19).n128_u64[0];
  swift_bridgeObjectRetain(v20, v22);
  sub_1003C251C(a1, v18, v17, v21, v20);
  swift_release(v4);
  swift_release(v5);
  *(void *)&double v23 = swift_bridgeObjectRelease(v17).n128_u64[0];
  swift_bridgeObjectRelease(v20, v23);
  return 1LL;
}

const char *sub_1003A693C(Swift::UInt64 a1, Swift::UInt64 a2, Swift::UInt64 a3, Swift::UInt64 a4)
{
  __n128 result = SDAirDropHashStoreCDB.contact(forLongHash:)(a1, a2, a3, a4);
  if (v4) {
    return (const char *)v6;
  }
  return result;
}

uint64_t sub_1003A6964(Swift::UInt64 a1, Swift::UInt64 a2, Swift::UInt64 a3, Swift::UInt64 a4)
{
  return SDAirDropHashStoreCDB.contacts(forLongHash:)(a1, a2, a3, a4);
}

unint64_t sub_1003A6978(int a1)
{
  int v1 = a1 & 0xFFFFFF;
  unint64_t result = (unint64_t)SDAirDropHashStoreCDB.contact(forMediumHash:)((DaemoniOSLibrary::MediumHash)v1);
  if (v4) {
    return v3;
  }
  return result;
}

void *sub_1003A69A4(int a1)
{
  return SDAirDropHashStoreCDB.contacts(forMediumHash:)(a1 & 0xFFFFFF);
}

BOOL sub_1003A69BC(DaemoniOSLibrary::ShortHash a1)
{
  return SDAirDropHashStoreCDB.contains(shortHash:)(a1);
}

void sub_1003A69D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v5 = v4;
  static Data._unconditionallyBridgeFromObjectiveC(_:)(a2);
  sub_1003C299C(v3, v5);
  __asm { BR              X10 }

void sub_1003A6A94(uint64_t a1)
{
  uint64_t v11 = a1;
  id v12 = v6;
  swift_bridgeObjectRetain(v6);
  v8._uint64_t countAndFlagsBits = 10LL;
  v8._object = (void *)0xE100000000000000LL;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v6);
  uint64_t v9 = v11;
  if (BYTE6(v1) == 32LL) {
    swift_beginAccess(v2, &v11, 33LL, 0LL);
  }
  else {
    swift_beginAccess(v7, &v11, 33LL, 0LL);
  }
  v10._uint64_t countAndFlagsBits = v9;
  v10._object = v6;
  String.append(_:)(v10);
  swift_endAccess(&v11);
  sub_100189B20(v5, v4);
  sub_100189B20(v3, v1);
  swift_bridgeObjectRelease(v6);
}

void sub_1003A6BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((a1 & 0x8000000000000000LL) == 0)
  {
    *(void *)(swift_allocObject(&unk_1005DE9A8, 24LL, 7LL) + 16) = _swiftEmptyArrayStorage;
    __asm { BR              X9 }
  }

  char v7 = 2;
  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Must take zero or more splits",  29LL,  2LL,  "Swift/Collection.swift",  22LL,  v7,  1552LL,  0);
  __break(1u);
  JUMPOUT(0x1003A71C8LL);
}

uint64_t sub_1003A7240(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a2 + 16);
  int v6 = (v5 == a1) & a3;
  if (v6 == 1) {
    return v6 ^ 1u;
  }
  if (v5 <= a1)
  {
    uint64_t v8 = Data._Representation.subscript.getter();
    uint64_t v10 = v9;
    uint64_t v11 = *(void **)(a4 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
    *(void *)(a4 + 16) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v11 = sub_10018C8E8(0LL, v11[2] + 1LL, 1, (uint64_t)v11);
      *(void *)(a4 + 16) = v11;
    }

    unint64_t v14 = v11[2];
    unint64_t v13 = v11[3];
    if (v14 >= v13 >> 1) {
      uint64_t v11 = sub_10018C8E8((void *)(v13 > 1), v14 + 1, 1, (uint64_t)v11);
    }
    v11[2] = v14 + 1;
    uint64_t v15 = &v11[2 * v14];
    v15[4] = v8;
    v15[5] = v10;
    *(void *)(a4 + 16) = v11;
    return v6 ^ 1u;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Range requires lowerBound <= upperBound",  39LL,  2LL,  "Swift/Range.swift",  17LL,  2,  754LL,  0);
  __break(1u);
  return result;
}

void *sub_1003A737C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = sub_100212AAC(v4, 0LL);
      if (v4 < 0) {
        break;
      }
      int v6 = v5;
      uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0) {
        goto LABEL_14;
      }
      if (v7 == v4) {
        return v6;
      }
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  v10,  1122LL,  0);
      __break(1u);
LABEL_10:
      uint64_t v4 = String.UTF8View._foreignCount()();
      if (!v4) {
        return &_swiftEmptyArrayStorage;
      }
    }

    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  v10,  71LL,  0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    __break(1u);
  }

  else
  {
    return &_swiftEmptyArrayStorage;
  }

  return result;
}

uint64_t sub_1003A74F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100183098(&qword_10064A480);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_44;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v18 = v17 | (v15 << 6);
      goto LABEL_25;
    }

    int64_t v19 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }

    if (v19 >= v12) {
      break;
    }
    uint64_t v20 = (void *)(v5 + 64);
    unint64_t v21 = *(void *)(v37 + 8 * v19);
    ++v15;
    if (!v21)
    {
      int64_t v15 = v19 + 1;
      if (v19 + 1 >= v12) {
        goto LABEL_37;
      }
      unint64_t v21 = *(void *)(v37 + 8 * v15);
      if (!v21)
      {
        int64_t v22 = v19 + 2;
        if (v22 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }

        unint64_t v21 = *(void *)(v37 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            int64_t v15 = v22 + 1;
            if (__OFADD__(v22, 1LL)) {
              goto LABEL_46;
            }
            if (v15 >= v12) {
              goto LABEL_37;
            }
            unint64_t v21 = *(void *)(v37 + 8 * v15);
            ++v22;
            if (v21) {
              goto LABEL_24;
            }
          }
        }

        int64_t v15 = v22;
      }
    }

uint64_t sub_1003A7810(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100183098(&qword_10064A478);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_44;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v15 << 6);
      goto LABEL_25;
    }

    int64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }

    if (v22 >= v12) {
      break;
    }
    double v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v15;
    if (!v24)
    {
      int64_t v15 = v22 + 1;
      if (v22 + 1 >= v12) {
        goto LABEL_37;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v15);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }

        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v15 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_46;
            }
            if (v15 >= v12) {
              goto LABEL_37;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v15);
            ++v25;
            if (v24) {
              goto LABEL_24;
            }
          }
        }

        int64_t v15 = v25;
      }
    }

uint64_t sub_1003A7B24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100183098(&qword_100652500);
  int v45 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_43;
  }
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v43 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v41 = v2;
  int64_t v42 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  uint64_t result = swift_retain(v10);
  int64_t v19 = 0LL;
  for (i = v10; ; uint64_t v10 = i)
  {
    if (v16)
    {
      unint64_t v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v42) {
      break;
    }
    unint64_t v24 = v43;
    unint64_t v25 = v43[v23];
    ++v19;
    if (!v25)
    {
      int64_t v19 = v23 + 1;
      if (v23 + 1 >= v42) {
        goto LABEL_36;
      }
      unint64_t v25 = v43[v19];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_36:
          swift_release(v10);
          uint64_t v3 = v41;
          if ((v45 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v19 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v19 >= v42) {
              goto LABEL_36;
            }
            unint64_t v25 = v43[v19];
            ++v26;
            if (v25) {
              goto LABEL_23;
            }
          }
        }

        int64_t v19 = v26;
      }
    }

uint64_t sub_1003A7EB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100183098(&qword_100649E18);
  char v38 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_44;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  char v35 = v3;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v18 = v17 | (v14 << 6);
      goto LABEL_25;
    }

    int64_t v19 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }

    if (v19 >= v36) {
      break;
    }
    unint64_t v20 = (void *)(v5 + 64);
    unint64_t v21 = *(void *)(v37 + 8 * v19);
    ++v14;
    if (!v21)
    {
      int64_t v14 = v19 + 1;
      if (v19 + 1 >= v36) {
        goto LABEL_37;
      }
      unint64_t v21 = *(void *)(v37 + 8 * v14);
      if (!v21)
      {
        int64_t v22 = v19 + 2;
        if (v22 >= v36)
        {
LABEL_37:
          swift_release(v5);
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }

        unint64_t v21 = *(void *)(v37 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            int64_t v14 = v22 + 1;
            if (__OFADD__(v22, 1LL)) {
              goto LABEL_46;
            }
            if (v14 >= v36) {
              goto LABEL_37;
            }
            unint64_t v21 = *(void *)(v37 + 8 * v14);
            ++v22;
            if (v21) {
              goto LABEL_24;
            }
          }
        }

        int64_t v14 = v22;
      }
    }

uint64_t sub_1003A81DC(uint64_t a1, uint64_t a2)
{
  return sub_1003A9B64(a1, a2, &qword_1006524C0);
}

uint64_t sub_1003A81E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100183098(&qword_1006524D0);
  int v45 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_43;
  }
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v43 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v41 = v2;
  int64_t v42 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  uint64_t result = swift_retain(v10);
  int64_t v19 = 0LL;
  for (i = v10; ; uint64_t v10 = i)
  {
    if (v16)
    {
      unint64_t v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v42) {
      break;
    }
    uint64_t v24 = v43;
    unint64_t v25 = v43[v23];
    ++v19;
    if (!v25)
    {
      int64_t v19 = v23 + 1;
      if (v23 + 1 >= v42) {
        goto LABEL_36;
      }
      unint64_t v25 = v43[v19];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_36:
          swift_release(v10);
          uint64_t v3 = v41;
          if ((v45 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v19 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v19 >= v42) {
              goto LABEL_36;
            }
            unint64_t v25 = v43[v19];
            ++v26;
            if (v25) {
              goto LABEL_23;
            }
          }
        }

        int64_t v19 = v26;
      }
    }

uint64_t sub_1003A857C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v48 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100183098(&qword_1006524E0);
  int v47 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_43;
  }
  uint64_t v12 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  int v45 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1LL << v12);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & v13;
  uint64_t v43 = v2;
  int64_t v44 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain(v9);
  int64_t v18 = 0LL;
  for (i = v9; ; uint64_t v9 = i)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v44) {
      break;
    }
    uint64_t v24 = v45;
    unint64_t v25 = v45[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v44) {
        goto LABEL_36;
      }
      unint64_t v25 = v45[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v44)
        {
LABEL_36:
          swift_release(v9);
          uint64_t v3 = v43;
          if ((v47 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v45[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v18 >= v44) {
              goto LABEL_36;
            }
            unint64_t v25 = v45[v18];
            ++v26;
            if (v25) {
              goto LABEL_23;
            }
          }
        }

        int64_t v18 = v26;
      }
    }

uint64_t sub_1003A8928(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v9 = a3(0LL);
  uint64_t v58 = *(void *)(v9 - 8);
  uint64_t v59 = v9;
  __chkstk_darwin(v9);
  double v57 = &v49[-v10];
  uint64_t v11 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v56 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = &v49[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = *v6;
  if (*(void *)(*v6 + 24) > a1) {
    a1 = *(void *)(*v6 + 24);
  }
  sub_100183098(a4);
  uint64_t v15 = static _DictionaryStorage.resize(original:capacity:move:)(v14, a1, a2);
  uint64_t v16 = v15;
  if (!*(void *)(v14 + 16))
  {
    uint64_t v46 = v14;
LABEL_44:
    uint64_t result = swift_release(v46);
    *uint64_t v6 = v16;
    return result;
  }

  uint64_t v17 = 1LL << *(_BYTE *)(v14 + 32);
  uint64_t v18 = *(void *)(v14 + 64);
  id v53 = (void *)(v14 + 64);
  if (v17 < 64) {
    uint64_t v19 = ~(-1LL << v17);
  }
  else {
    uint64_t v19 = -1LL;
  }
  unint64_t v20 = v19 & v18;
  uint64_t v51 = v6;
  int64_t v52 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v21 = v15 + 64;
  uint64_t v55 = v14;
  uint64_t result = swift_retain(v14);
  int64_t v23 = 0LL;
  int v50 = a2;
  uint64_t v24 = 16LL;
  if ((a2 & 1) != 0) {
    uint64_t v24 = 32LL;
  }
  uint64_t v54 = v24;
  uint64_t v25 = v24;
  while (1)
  {
    if (v20)
    {
      unint64_t v27 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v28 = v27 | (v23 << 6);
      goto LABEL_26;
    }

    int64_t v29 = v23 + 1;
    if (__OFADD__(v23, 1LL))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }

    if (v29 >= v52)
    {
      uint64_t v47 = v55;
      swift_release(v55);
      uint64_t v6 = v51;
      uint64_t v30 = v53;
      if ((v50 & 1) != 0)
      {
LABEL_39:
        uint64_t v48 = 1LL << *(_BYTE *)(v47 + 32);
        if (v48 >= 64) {
          bzero(v30, ((unint64_t)(v48 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
        }
        else {
          *uint64_t v30 = -1LL << v48;
        }
        *(void *)(v47 + 16) = 0LL;
      }

Swift::Int sub_1003A8D20(uint64_t a1, uint64_t a2)
{
  return sub_1003AB470(a1, a2, &qword_100651D98);
}

Swift::Int sub_1003A8D2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100183098((uint64_t *)&unk_1006469C0);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v3;
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v12) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v38 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v37;
          if ((a2 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v12) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v38 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

Swift::Int sub_1003A8FFC(uint64_t a1, uint64_t a2)
{
  return sub_1003AB470(a1, a2, &qword_100651E48);
}

Swift::Int sub_1003A9008(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100183098(&qword_100651E40);
  char v43 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v42 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  unint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v24 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v24 >= v41) {
      break;
    }
    unint64_t v25 = (void *)(v5 + 64);
    unint64_t v26 = *(void *)(v42 + 8 * v24);
    ++v14;
    if (!v26)
    {
      int64_t v14 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_36;
      }
      unint64_t v26 = *(void *)(v42 + 8 * v14);
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v40;
          if ((v43 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v26 = *(void *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            int64_t v14 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v41) {
              goto LABEL_36;
            }
            unint64_t v26 = *(void *)(v42 + 8 * v14);
            ++v27;
            if (v26) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v27;
      }
    }

uint64_t sub_1003A932C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100183098((uint64_t *)&unk_1006463F0);
  uint64_t v56 = *(void *)(v6 - 8);
  uint64_t v57 = v6;
  __chkstk_darwin(v6);
  uint64_t v55 = &v47[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v54 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = &v47[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = *v3;
  if (*(void *)(*v3 + 24) <= a1) {
    uint64_t v12 = a1;
  }
  else {
    uint64_t v12 = *(void *)(*v3 + 24);
  }
  sub_100183098(&qword_100652610);
  uint64_t v13 = static _DictionaryStorage.resize(original:capacity:move:)(v11, v12, a2);
  uint64_t v14 = v13;
  if (!*(void *)(v11 + 16))
  {
    uint64_t v44 = v11;
LABEL_45:
    uint64_t result = swift_release(v44);
    *uint64_t v3 = v14;
    return result;
  }

  uint64_t v15 = 1LL << *(_BYTE *)(v11 + 32);
  uint64_t v16 = *(void *)(v11 + 64);
  uint64_t v51 = (void *)(v11 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1LL << v15);
  }
  else {
    uint64_t v17 = -1LL;
  }
  unint64_t v18 = v17 & v16;
  uint64_t v49 = v3;
  int64_t v50 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v19 = v13 + 64;
  uint64_t v53 = v11;
  uint64_t result = swift_retain(v11);
  int64_t v21 = 0LL;
  int v48 = a2;
  uint64_t v22 = 16LL;
  if ((a2 & 1) != 0) {
    uint64_t v22 = 32LL;
  }
  uint64_t v52 = v22;
  uint64_t v23 = v22;
  while (1)
  {
    if (v18)
    {
      unint64_t v25 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v26 = v25 | (v21 << 6);
      goto LABEL_27;
    }

    int64_t v27 = v21 + 1;
    if (__OFADD__(v21, 1LL))
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }

    if (v27 >= v50)
    {
      uint64_t v45 = v53;
      swift_release(v53);
      uint64_t v3 = v49;
      char v28 = v51;
      if ((v48 & 1) != 0)
      {
LABEL_40:
        uint64_t v46 = 1LL << *(_BYTE *)(v45 + 32);
        if (v46 >= 64) {
          bzero(v28, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
        }
        else {
          *char v28 = -1LL << v46;
        }
        *(void *)(v45 + 16) = 0LL;
      }

uint64_t sub_1003A9728(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for SDAirDropLegacySessionLogger.Transfer(0LL);
  uint64_t v50 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v53 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100183098(&qword_1006524F8);
  int v52 = a2;
  uint64_t v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  uint64_t v14 = v13;
  if (*(void *)(v12 + 16))
  {
    uint64_t v15 = 1LL << *(_BYTE *)(v12 + 32);
    uint64_t v16 = *(void *)(v12 + 64);
    uint64_t v49 = (void *)(v12 + 64);
    if (v15 < 64) {
      uint64_t v17 = ~(-1LL << v15);
    }
    else {
      uint64_t v17 = -1LL;
    }
    unint64_t v18 = v17 & v16;
    uint64_t v47 = v2;
    int64_t v48 = (unint64_t)(v15 + 63) >> 6;
    uint64_t v19 = v13 + 64;
    uint64_t result = swift_retain(v12);
    int64_t v21 = 0LL;
    uint64_t v22 = v12;
    for (i = v12; ; uint64_t v22 = i)
    {
      if (v18)
      {
        unint64_t v24 = __clz(__rbit64(v18));
        v18 &= v18 - 1;
        unint64_t v25 = v24 | (v21 << 6);
      }

      else
      {
        int64_t v26 = v21 + 1;
        if (__OFADD__(v21, 1LL))
        {
LABEL_45:
          __break(1u);
          goto LABEL_46;
        }

        if (v26 >= v48)
        {
          swift_release(v22);
          uint64_t v3 = v47;
          int64_t v27 = v49;
          if ((v52 & 1) == 0) {
            goto LABEL_41;
          }
LABEL_38:
          uint64_t v45 = 1LL << *(_BYTE *)(i + 32);
          if (v45 >= 64) {
            bzero(v27, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
          }
          else {
            *int64_t v27 = -1LL << v45;
          }
          uint64_t v44 = i;
          *(void *)(i + 16) = 0LL;
          goto LABEL_44;
        }

        int64_t v27 = v49;
        unint64_t v28 = v49[v26];
        ++v21;
        if (!v28)
        {
          int64_t v21 = v26 + 1;
          if (v26 + 1 >= v48) {
            goto LABEL_37;
          }
          unint64_t v28 = v49[v21];
          if (!v28)
          {
            int64_t v29 = v26 + 2;
            if (v29 >= v48)
            {
LABEL_37:
              swift_release(v22);
              uint64_t v3 = v47;
              if ((v52 & 1) == 0)
              {
LABEL_41:
                uint64_t v44 = i;
                goto LABEL_44;
              }

              goto LABEL_38;
            }

            unint64_t v28 = v49[v29];
            if (!v28)
            {
              while (1)
              {
                int64_t v21 = v29 + 1;
                if (__OFADD__(v29, 1LL)) {
                  break;
                }
                if (v21 >= v48) {
                  goto LABEL_37;
                }
                unint64_t v28 = v49[v21];
                ++v29;
                if (v28) {
                  goto LABEL_23;
                }
              }

uint64_t sub_1003A9B44(uint64_t a1, uint64_t a2)
{
  return sub_1003AA6A0(a1, a2, &qword_1006525B0, (void (*)(unint64_t, _BYTE *))sub_1001CE0D0);
}

uint64_t sub_1003A9B58(uint64_t a1, uint64_t a2)
{
  return sub_1003A9B64(a1, a2, &qword_100652608);
}

uint64_t sub_1003A9B64(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *v5;
  if (*(void *)(*v5 + 24) > a1) {
    a1 = *(void *)(*v5 + 24);
  }
  sub_100183098(a3);
  int v44 = a2;
  uint64_t v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  uint64_t v14 = v13;
  if (!*(void *)(v12 + 16)) {
    goto LABEL_43;
  }
  uint64_t v15 = 1LL << *(_BYTE *)(v12 + 32);
  uint64_t v16 = *(void *)(v12 + 64);
  uint64_t v43 = (void *)(v12 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1LL << v15);
  }
  else {
    uint64_t v17 = -1LL;
  }
  unint64_t v18 = v17 & v16;
  unint64_t v41 = v5;
  int64_t v42 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v19 = v13 + 64;
  uint64_t result = swift_retain(v12);
  int64_t v21 = 0LL;
  while (1)
  {
    if (v18)
    {
      unint64_t v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }

    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v25 >= v42) {
      break;
    }
    int64_t v26 = v43;
    unint64_t v27 = v43[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v42) {
        goto LABEL_36;
      }
      unint64_t v27 = v43[v21];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v42)
        {
LABEL_36:
          swift_release(v12);
          uint64_t v5 = v41;
          if ((v44 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v27 = v43[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1LL)) {
              goto LABEL_45;
            }
            if (v21 >= v42) {
              goto LABEL_36;
            }
            unint64_t v27 = v43[v21];
            ++v28;
            if (v27) {
              goto LABEL_23;
            }
          }
        }

        int64_t v21 = v28;
      }
    }

uint64_t sub_1003A9F00(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for SFNWInterfaceType(0LL);
  uint64_t v56 = *(void *)(v6 - 8);
  uint64_t v57 = v6;
  __chkstk_darwin(v6);
  uint64_t v55 = &v47[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v54 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = &v47[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = *v3;
  if (*(void *)(*v3 + 24) <= a1) {
    uint64_t v12 = a1;
  }
  else {
    uint64_t v12 = *(void *)(*v3 + 24);
  }
  sub_100183098(&qword_100649DD8);
  uint64_t v13 = static _DictionaryStorage.resize(original:capacity:move:)(v11, v12, a2);
  uint64_t v14 = v13;
  if (!*(void *)(v11 + 16))
  {
    uint64_t v44 = v11;
LABEL_45:
    uint64_t result = swift_release(v44);
    *uint64_t v3 = v14;
    return result;
  }

  uint64_t v15 = 1LL << *(_BYTE *)(v11 + 32);
  uint64_t v16 = *(void *)(v11 + 64);
  uint64_t v51 = (void *)(v11 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1LL << v15);
  }
  else {
    uint64_t v17 = -1LL;
  }
  unint64_t v18 = v17 & v16;
  uint64_t v49 = v3;
  int64_t v50 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v19 = v13 + 64;
  uint64_t v53 = v11;
  uint64_t result = swift_retain(v11);
  int64_t v21 = 0LL;
  int v48 = a2;
  uint64_t v22 = 16LL;
  if ((a2 & 1) != 0) {
    uint64_t v22 = 32LL;
  }
  uint64_t v52 = v22;
  uint64_t v23 = v22;
  while (1)
  {
    if (v18)
    {
      unint64_t v25 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v26 = v25 | (v21 << 6);
      goto LABEL_27;
    }

    int64_t v27 = v21 + 1;
    if (__OFADD__(v21, 1LL))
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }

    if (v27 >= v50)
    {
      uint64_t v45 = v53;
      swift_release(v53);
      uint64_t v3 = v49;
      int64_t v28 = v51;
      if ((v48 & 1) != 0)
      {
LABEL_40:
        uint64_t v46 = 1LL << *(_BYTE *)(v45 + 32);
        if (v46 >= 64) {
          bzero(v28, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
        }
        else {
          *int64_t v28 = -1LL << v46;
        }
        *(void *)(v45 + 16) = 0LL;
      }

Swift::Int sub_1003AA2F8(uint64_t a1, uint64_t a2)
{
  return sub_1003ABDF8(a1, a2, &qword_1006525A0);
}

Swift::Int sub_1003AA304(uint64_t a1, uint64_t a2)
{
  return sub_1003AA318(a1, a2, type metadata accessor for RegistrationState, &qword_100651DC8);
}

Swift::Int sub_1003AA318(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v49 = a3;
  uint64_t v9 = a3(0LL);
  uint64_t v47 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v43 - v10;
  uint64_t v12 = *v6;
  if (*(void *)(*v6 + 24) > a1) {
    a1 = *(void *)(*v6 + 24);
  }
  sub_100183098(a4);
  int v48 = a2;
  uint64_t v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  uint64_t v14 = v13;
  if (!*(void *)(v12 + 16)) {
    goto LABEL_43;
  }
  uint64_t v15 = 1LL << *(_BYTE *)(v12 + 32);
  uint64_t v16 = *(void *)(v12 + 64);
  uint64_t v46 = (void *)(v12 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1LL << v15);
  }
  else {
    uint64_t v17 = -1LL;
  }
  unint64_t v18 = v17 & v16;
  uint64_t v44 = v6;
  int64_t v45 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v19 = v13 + 64;
  Swift::Int result = swift_retain(v12);
  int64_t v21 = 0LL;
  while (1)
  {
    if (v18)
    {
      unint64_t v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v25 = v24 | (v21 << 6);
      goto LABEL_24;
    }

    int64_t v26 = v21 + 1;
    if (__OFADD__(v21, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v26 >= v45) {
      break;
    }
    int64_t v27 = v46;
    unint64_t v28 = v46[v26];
    ++v21;
    if (!v28)
    {
      int64_t v21 = v26 + 1;
      if (v26 + 1 >= v45) {
        goto LABEL_36;
      }
      unint64_t v28 = v46[v21];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v45)
        {
LABEL_36:
          swift_release(v12);
          uint64_t v6 = v44;
          if ((v48 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v28 = v46[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v21 = v29 + 1;
            if (__OFADD__(v29, 1LL)) {
              goto LABEL_45;
            }
            if (v21 >= v45) {
              goto LABEL_36;
            }
            unint64_t v28 = v46[v21];
            ++v29;
            if (v28) {
              goto LABEL_23;
            }
          }
        }

        int64_t v21 = v29;
      }
    }

uint64_t sub_1003AA68C(uint64_t a1, uint64_t a2)
{
  return sub_1003AA6A0(a1, a2, &qword_100652538, (void (*)(unint64_t, _BYTE *))sub_1001CE0D0);
}

uint64_t sub_1003AA6A0(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(unint64_t, _BYTE *))
{
  uint64_t v46 = a4;
  uint64_t v6 = v4;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *v6;
  if (*(void *)(*v6 + 24) > a1) {
    a1 = *(void *)(*v6 + 24);
  }
  sub_100183098(a3);
  int v45 = a2;
  uint64_t v14 = static _DictionaryStorage.resize(original:capacity:move:)(v13, a1, a2);
  uint64_t v15 = v14;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_43;
  }
  uint64_t v16 = 1LL << *(_BYTE *)(v13 + 32);
  uint64_t v17 = *(void *)(v13 + 64);
  uint64_t v44 = (void *)(v13 + 64);
  if (v16 < 64) {
    uint64_t v18 = ~(-1LL << v16);
  }
  else {
    uint64_t v18 = -1LL;
  }
  unint64_t v19 = v18 & v17;
  uint64_t v42 = v6;
  int64_t v43 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v20 = v14 + 64;
  uint64_t result = swift_retain(v13);
  int64_t v22 = 0LL;
  while (1)
  {
    if (v19)
    {
      unint64_t v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_24;
    }

    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v26 >= v43) {
      break;
    }
    int64_t v27 = v44;
    unint64_t v28 = v44[v26];
    ++v22;
    if (!v28)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v43) {
        goto LABEL_36;
      }
      unint64_t v28 = v44[v22];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v43)
        {
LABEL_36:
          swift_release(v13);
          uint64_t v6 = v42;
          if ((v45 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v28 = v44[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v22 = v29 + 1;
            if (__OFADD__(v29, 1LL)) {
              goto LABEL_45;
            }
            if (v22 >= v43) {
              goto LABEL_36;
            }
            unint64_t v28 = v44[v22];
            ++v29;
            if (v28) {
              goto LABEL_23;
            }
          }
        }

        int64_t v22 = v29;
      }
    }

uint64_t sub_1003AAA58(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v45 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = v2;
  uint64_t v8 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100183098(&qword_100652540);
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
    uint64_t result = swift_release(v8);
    unint64_t v38 = v41;
LABEL_44:
    *unint64_t v38 = v10;
    return result;
  }

  uint64_t v11 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  int64_t v43 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1LL << v11);
  }
  else {
    uint64_t v13 = -1LL;
  }
  unint64_t v14 = v13 & v12;
  int64_t v42 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain(v8);
  int64_t v17 = 0LL;
  HIDWORD(v40) = a2;
  uint64_t v18 = 16LL;
  if ((a2 & 1) != 0) {
    uint64_t v18 = 32LL;
  }
  uint64_t v44 = v18;
  while (1)
  {
    if (v14)
    {
      unint64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_26;
    }

    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }

    if (v22 >= v42)
    {
      swift_release(v8);
      unint64_t v38 = v41;
      unint64_t v23 = v43;
      if ((v40 & 0x100000000LL) != 0)
      {
LABEL_39:
        uint64_t v39 = 1LL << *(_BYTE *)(v8 + 32);
        if (v39 >= 64) {
          bzero(v23, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
        }
        else {
          *unint64_t v23 = -1LL << v39;
        }
        *(void *)(v8 + 16) = 0LL;
      }

Swift::Int sub_1003AADF4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  if (*(void *)(*v3 + 24) <= a1) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *(void *)(*v3 + 24);
  }
  sub_100183098(a3);
  char v39 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  uint64_t v9 = v8;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_43;
  }
  uint64_t v10 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v38 = v6 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  else {
    uint64_t v11 = -1LL;
  }
  unint64_t v12 = v11 & *(void *)(v6 + 64);
  int64_t v37 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v13 = v8 + 64;
  Swift::Int result = swift_retain(v6);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v12)
    {
      unint64_t v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v37) {
      break;
    }
    unint64_t v24 = (void *)(v6 + 64);
    unint64_t v25 = *(void *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v37) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v38 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v37)
        {
LABEL_36:
          swift_release(v6);
          if ((v39 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v37) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v38 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

Swift::Int sub_1003AB104(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v46 = sub_100183098(&qword_10064DB00);
  uint64_t v6 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v45 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_100183098(&qword_1006525E0);
  int v44 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v41 = v3;
  uint64_t v11 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  int64_t v43 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1LL << v11);
  }
  else {
    uint64_t v13 = -1LL;
  }
  unint64_t v14 = v13 & v12;
  int64_t v42 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  Swift::Int result = swift_retain(v8);
  int64_t v17 = 0LL;
  while (1)
  {
    if (v14)
    {
      unint64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_24;
    }

    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }

    if (v22 >= v42) {
      goto LABEL_36;
    }
    unint64_t v23 = v43[v22];
    ++v17;
    if (!v23)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v42) {
        goto LABEL_36;
      }
      unint64_t v23 = v43[v17];
      if (!v23) {
        break;
      }
    }

Swift::Int sub_1003AB470(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  if (*(void *)(*v3 + 24) <= a1) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *(void *)(*v3 + 24);
  }
  sub_100183098(a3);
  char v40 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  uint64_t v9 = v8;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_43;
  }
  uint64_t v10 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v39 = v6 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  else {
    uint64_t v11 = -1LL;
  }
  unint64_t v12 = v11 & *(void *)(v6 + 64);
  BOOL v37 = v4;
  int64_t v38 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v13 = v8 + 64;
  Swift::Int result = swift_retain(v6);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v12)
    {
      unint64_t v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v38) {
      break;
    }
    int64_t v24 = (void *)(v6 + 64);
    unint64_t v25 = *(void *)(v39 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v38) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v39 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_36:
          swift_release(v6);
          uint64_t v4 = v37;
          if ((v40 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v39 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v38) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v39 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

Swift::Int sub_1003AB778(uint64_t a1, uint64_t a2)
{
  return sub_1003AB784(a1, a2, &qword_1006525D0);
}

Swift::Int sub_1003AB784(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  if (*(void *)(*v3 + 24) <= a1) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *(void *)(*v3 + 24);
  }
  sub_100183098(a3);
  char v39 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  uint64_t v9 = v8;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_43;
  }
  uint64_t v10 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v38 = v6 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  else {
    uint64_t v11 = -1LL;
  }
  unint64_t v12 = v11 & *(void *)(v6 + 64);
  uint64_t v36 = v4;
  int64_t v37 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v13 = v8 + 64;
  Swift::Int result = swift_retain(v6);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v12)
    {
      unint64_t v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v37) {
      break;
    }
    int64_t v24 = (void *)(v6 + 64);
    unint64_t v25 = *(void *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v37) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v38 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v37)
        {
LABEL_36:
          swift_release(v6);
          uint64_t v4 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v37) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v38 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

Swift::Int sub_1003ABA88(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v49 = a3(0LL);
  uint64_t v9 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  int v48 = (char *)&v43 - v10;
  uint64_t v11 = *v6;
  if (*(void *)(*v6 + 24) > a1) {
    a1 = *(void *)(*v6 + 24);
  }
  sub_100183098(a4);
  int v47 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)(v11, a1, a2);
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  int v44 = v6;
  uint64_t v14 = 1LL << *(_BYTE *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v46 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1LL << v14);
  }
  else {
    uint64_t v16 = -1LL;
  }
  unint64_t v17 = v16 & v15;
  int64_t v45 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v18 = v12 + 64;
  Swift::Int result = swift_retain(v11);
  int64_t v20 = 0LL;
  while (1)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v20 << 6);
      goto LABEL_24;
    }

    int64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1LL))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }

    if (v25 >= v45) {
      goto LABEL_36;
    }
    unint64_t v26 = v46[v25];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v25 + 1;
      if (v25 + 1 >= v45) {
        goto LABEL_36;
      }
      unint64_t v26 = v46[v20];
      if (!v26) {
        break;
      }
    }

Swift::Int sub_1003ABDEC(uint64_t a1, uint64_t a2)
{
  return sub_1003ABDF8(a1, a2, &qword_1006525A8);
}

Swift::Int sub_1003ABDF8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  if (*(void *)(*v3 + 24) <= a1) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *(void *)(*v3 + 24);
  }
  sub_100183098(a3);
  char v38 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  uint64_t v9 = v8;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_43;
  }
  uint64_t v10 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v37 = v6 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  else {
    uint64_t v11 = -1LL;
  }
  unint64_t v12 = v11 & *(void *)(v6 + 64);
  int64_t v36 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v13 = v8 + 64;
  Swift::Int result = swift_retain(v6);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v12)
    {
      unint64_t v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v36) {
      break;
    }
    unint64_t v24 = (void *)(v6 + 64);
    unint64_t v25 = *(void *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v36) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v37 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v36)
        {
LABEL_36:
          swift_release(v6);
          if ((v38 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v36) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v37 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

Swift::Int sub_1003AC108(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100183098(&qword_1006525F0);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v34 = v3;
  uint64_t v35 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v12) {
      break;
    }
    unint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v35 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v35 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v34;
          if ((a2 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v35 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v12) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v35 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

uint64_t sub_1003AC410(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100183098(&qword_100652570);
  int v42 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_43;
  }
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v41 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  unint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  uint64_t result = swift_retain(v10);
  int64_t v19 = 0LL;
  while (1)
  {
    if (v16)
    {
      unint64_t v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v40) {
      break;
    }
    unint64_t v24 = v41;
    unint64_t v25 = v41[v23];
    ++v19;
    if (!v25)
    {
      int64_t v19 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_36;
      }
      unint64_t v25 = v41[v19];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_36:
          swift_release(v10);
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v41[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v19 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v19 >= v40) {
              goto LABEL_36;
            }
            unint64_t v25 = v41[v19];
            ++v26;
            if (v25) {
              goto LABEL_23;
            }
          }
        }

        int64_t v19 = v26;
      }
    }

Swift::Int sub_1003AC7A8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  if (*(void *)(*v3 + 24) <= a1) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *(void *)(*v3 + 24);
  }
  sub_100183098(a3);
  char v39 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  uint64_t v9 = v8;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_43;
  }
  uint64_t v10 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v38 = v6 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  else {
    uint64_t v11 = -1LL;
  }
  unint64_t v12 = v11 & *(void *)(v6 + 64);
  BOOL v36 = v4;
  int64_t v37 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v13 = v8 + 64;
  Swift::Int result = swift_retain(v6);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v12)
    {
      unint64_t v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v37) {
      break;
    }
    unint64_t v24 = (void *)(v6 + 64);
    unint64_t v25 = *(void *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v37) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v38 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v37)
        {
LABEL_36:
          swift_release(v6);
          uint64_t v4 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v37) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v38 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

Swift::Int sub_1003ACAAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  Swift::Int v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100183098(&qword_100652560);
  char v36 = a2;
  Swift::Int result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  Swift::Int v8 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v33 = v3;
    int64_t v9 = 0LL;
    uint64_t v35 = (void *)(v5 + 64);
    uint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v34 = (unint64_t)(v10 + 63) >> 6;
    Swift::Int v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v9 << 6);
      }

      else
      {
        int64_t v21 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        Swift::Int result = v5 + 64;
        if (v21 >= v34) {
          goto LABEL_36;
        }
        unint64_t v22 = v35[v21];
        ++v9;
        if (!v22)
        {
          int64_t v9 = v21 + 1;
          if (v21 + 1 >= v34) {
            goto LABEL_36;
          }
          unint64_t v22 = v35[v9];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v34)
            {
LABEL_36:
              if ((v36 & 1) == 0)
              {
                Swift::Int result = swift_release(v5);
                uint64_t v3 = v33;
                goto LABEL_43;
              }

              uint64_t v32 = 1LL << *(_BYTE *)(v5 + 32);
              if (v32 >= 64) {
                bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                void *v35 = -1LL << v32;
              }
              uint64_t v3 = v33;
              *(void *)(v5 + 16) = 0LL;
              break;
            }

            unint64_t v22 = v35[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v9 = v23 + 1;
                if (__OFADD__(v23, 1LL)) {
                  goto LABEL_45;
                }
                if (v9 >= v34) {
                  goto LABEL_36;
                }
                unint64_t v22 = v35[v9];
                ++v23;
                if (v22) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v9 = v23;
          }
        }

Swift::Int sub_1003ACD90(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_100183098(&qword_100652530);
  char v7 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v9 = v8;
  if (*(void *)(v5 + 16))
  {
    char v36 = v3;
    uint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v38 = (void *)(v5 + 64);
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v37 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = v8 + 64;
    Swift::Int result = swift_retain(v5);
    int64_t v15 = 0LL;
    while (1)
    {
      if (v12)
      {
        unint64_t v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v23 = v22 | (v15 << 6);
      }

      else
      {
        int64_t v24 = v15 + 1;
        if (__OFADD__(v15, 1LL))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }

        if (v24 >= v37) {
          goto LABEL_36;
        }
        unint64_t v25 = v38[v24];
        ++v15;
        if (!v25)
        {
          int64_t v15 = v24 + 1;
          if (v24 + 1 >= v37) {
            goto LABEL_36;
          }
          unint64_t v25 = v38[v15];
          if (!v25)
          {
            int64_t v26 = v24 + 2;
            if (v26 >= v37)
            {
LABEL_36:
              swift_release(v5);
              uint64_t v3 = v36;
              if ((v7 & 1) != 0)
              {
                uint64_t v35 = 1LL << *(_BYTE *)(v5 + 32);
                if (v35 >= 64) {
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v38 = -1LL << v35;
                }
                *(void *)(v5 + 16) = 0LL;
              }

              break;
            }

            unint64_t v25 = v38[v26];
            if (!v25)
            {
              while (1)
              {
                int64_t v15 = v26 + 1;
                if (__OFADD__(v26, 1LL)) {
                  goto LABEL_43;
                }
                if (v15 >= v37) {
                  goto LABEL_36;
                }
                unint64_t v25 = v38[v15];
                ++v26;
                if (v25) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v15 = v26;
          }
        }

uint64_t sub_1003AD098(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100183098(&qword_100651DB8);
  int v45 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_43;
  }
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  __int128 v43 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v41 = v2;
  int64_t v42 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v19 = 0LL;
  for (i = v10; ; uint64_t v10 = i)
  {
    if (v16)
    {
      unint64_t v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }

    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v42) {
      break;
    }
    int64_t v24 = v43;
    unint64_t v25 = v43[v23];
    ++v19;
    if (!v25)
    {
      int64_t v19 = v23 + 1;
      if (v23 + 1 >= v42) {
        goto LABEL_36;
      }
      unint64_t v25 = v43[v19];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_36:
          swift_release(v10);
          uint64_t v3 = v41;
          if ((v45 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v19 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v19 >= v42) {
              goto LABEL_36;
            }
            unint64_t v25 = v43[v19];
            ++v26;
            if (v25) {
              goto LABEL_23;
            }
          }
        }

        int64_t v19 = v26;
      }
    }

unint64_t sub_1003AD42C(Swift::UInt32 a1)
{
  Swift::Int v2 = Hasher._finalize()();
  return sub_1003B1268(a1, v2);
}

unint64_t sub_1003AD484(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = sub_100183F14( &qword_100645530,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1004CCC0C);
  _CFObject.hash(into:)(v7, v3, v4);
  Swift::Int v5 = Hasher._finalize()();
  return sub_1003B1304(a1, v5);
}

unint64_t sub_1003AD50C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1003B1444(a1, v4);
}

uint64_t sub_1003AD53C(uint64_t a1, uint64_t a2)
{
  return sub_1003AD7E0( a1,  a2,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1003B1508);
}

unint64_t sub_1003AD550(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1003B15E8(a1, v4);
}

unint64_t sub_1003AD580(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v6 = sub_100183F14( &qword_100646250,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_1003B1700( a1,  v7,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier,  &qword_1006524F0,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
}

unint64_t sub_1003AD618(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = sub_100183F14( &qword_100646108,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_1003B1700( a1,  v7,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  &qword_100646148,  (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_1003AD6B0(unsigned __int8 a1)
{
  Swift::Int v2 = Hasher._finalize()();
  return sub_1003B1830(a1, v2);
}

unint64_t sub_1003AD708(Swift::UInt a1)
{
  Swift::Int v2 = Hasher._finalize()();
  return sub_1003B18D0(a1, v2);
}

unint64_t sub_1003AD760(uint64_t a1)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v4 = v3;
  Hasher.init(_seed:)(v7);
  String.hash(into:)(v7, v2, v4);
  Swift::Int v5 = Hasher._finalize()();
  swift_bridgeObjectRelease(v4);
  return sub_1003B196C(a1, v5);
}

uint64_t sub_1003AD7E0( uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, Swift::Int))
{
  Swift::Int v7 = Hasher._finalize()();
  return a4(a1, a2, v7);
}

unint64_t sub_1003AD858(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = sub_100183F14( &qword_100645418,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_1003B1700( a1,  v7,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  &qword_100652618,  (uint64_t)&protocol conformance descriptor for URL);
}

id sub_1003AD8F0()
{
  uint64_t v1 = v0;
  sub_100183098(&qword_10064A480);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }

void *sub_1003ADAB4()
{
  uint64_t v1 = v0;
  sub_100183098(&qword_10064A478);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }

id sub_1003ADC98()
{
  return sub_1003AFCC4(&qword_100651E50);
}

id sub_1003ADCA4()
{
  uint64_t v1 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100183098(&qword_100652500);
  int64_t v24 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v5);
    *int64_t v24 = v7;
    return result;
  }

  id result = (id)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  int64_t v11 = 0LL;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  uint64_t v25 = v5 + 64;
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v26) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v26) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v11);
      if (!v21) {
        break;
      }
    }

void *sub_1003ADECC()
{
  uint64_t v1 = v0;
  sub_100183098(&qword_100649E18);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release(v2);
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t v25 = v1;
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

void *sub_1003AE0B4()
{
  return sub_1003AEC44(&qword_1006524C0);
}

void *sub_1003AE0C0()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100183098(&qword_1006524D0);
  int64_t v24 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v5);
    *int64_t v24 = v7;
    return result;
  }

  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  uint64_t v25 = v5 + 64;
  int64_t v11 = 0LL;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v26) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v26) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v11);
      if (!v21) {
        break;
      }
    }

void *sub_1003AE2F0()
{
  uint64_t v36 = type metadata accessor for UUID(0LL);
  uint64_t v1 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  char v35 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100183098(&qword_1006524E0);
  uint64_t v32 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v38 = v4;
  if (!v5)
  {
    id result = (void *)swift_release(v3);
    uint64_t v30 = v38;
    uint64_t v29 = v32;
LABEL_28:
    *uint64_t v29 = v30;
    return result;
  }

  uint64_t v6 = v4;
  id result = (void *)(v4 + 64);
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  unint64_t v34 = (const void *)(v3 + 64);
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    id result = memmove(result, v34, 8 * v8);
    uint64_t v6 = v38;
  }

  int64_t v10 = 0LL;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v37 = v3;
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v33 = (unint64_t)(v11 + 63) >> 6;
  unint64_t v15 = v35;
  uint64_t v14 = v36;
  uint64_t v16 = v38;
  while (1)
  {
    if (v13)
    {
      unint64_t v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v18 = v17 | (v10 << 6);
      uint64_t v19 = v37;
      goto LABEL_12;
    }

    int64_t v26 = v10 + 1;
    uint64_t v19 = v37;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v26 >= v33) {
      goto LABEL_26;
    }
    unint64_t v27 = *((void *)v34 + v26);
    ++v10;
    if (!v27)
    {
      int64_t v10 = v26 + 1;
      if (v26 + 1 >= v33) {
        goto LABEL_26;
      }
      unint64_t v27 = *((void *)v34 + v10);
      if (!v27) {
        break;
      }
    }

void *sub_1003AE560()
{
  return sub_1003B0030((uint64_t (*)(void))&type metadata accessor for SFClientIdentity, &qword_1006524D8);
}

void *sub_1003AE574()
{
  return sub_1003AF1B8(type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation, &qword_100651DF8);
}

char *sub_1003AE588()
{
  return sub_1003AEEB8( (uint64_t (*)(void))&type metadata accessor for NWEndpoint,  (uint64_t (*)(void))&type metadata accessor for SFAirDrop.TransferIdentifier,  &qword_1006524E8);
}

char *sub_1003AE5A4()
{
  return sub_1003AEEB8( (uint64_t (*)(void))&type metadata accessor for SFAirDropReceive.Transfer,  (uint64_t (*)(void))&type metadata accessor for SFAirDrop.TransferIdentifier,  &qword_100651E18);
}

id sub_1003AE5C0()
{
  return sub_1003AFCC4(&qword_100651D98);
}

id sub_1003AE5CC()
{
  uint64_t v1 = v0;
  sub_100183098((uint64_t *)&unk_1006469C0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

void *sub_1003AE770()
{
  return sub_1003AFE78(&qword_100651E28);
}

id sub_1003AE77C()
{
  return sub_1003AFCC4(&qword_100651E48);
}

void *sub_1003AE788()
{
  uint64_t v1 = v0;
  sub_100183098(&qword_100651E40);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }

char *sub_1003AE940()
{
  return sub_1003B0F8C( (uint64_t *)&unk_1006463F0,  (uint64_t (*)(void))&type metadata accessor for SFAirDrop.TransferIdentifier,  &qword_100652610);
}

void *sub_1003AE95C()
{
  uint64_t v1 = type metadata accessor for SDAirDropLegacySessionLogger.Transfer(0LL);
  uint64_t v36 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  char v35 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v3 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  int64_t v33 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100183098(&qword_1006524F8);
  uint64_t v30 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v38 = v6;
  if (!v7)
  {
    id result = (void *)swift_release(v5);
    uint64_t v28 = v38;
    int64_t v27 = v30;
LABEL_25:
    *int64_t v27 = v28;
    return result;
  }

  uint64_t v8 = v6;
  id result = (void *)(v6 + 64);
  unint64_t v10 = (unint64_t)((1LL << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
  {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v10);
    uint64_t v8 = v38;
  }

  int64_t v11 = 0LL;
  *(void *)(v8 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  uint64_t v37 = v5;
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  uint64_t v31 = v5 + 64;
  int64_t v32 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v33;
  uint64_t v15 = v34;
  uint64_t v17 = (uint64_t)v35;
  for (uint64_t i = v38;
        ;
        id result = (void *)sub_1001A4B40( v17,  *(void *)(i + 56) + v23,  type metadata accessor for SDAirDropLegacySessionLogger.Transfer))
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v11 << 6);
      uint64_t v21 = v37;
      goto LABEL_9;
    }

    int64_t v24 = v11 + 1;
    uint64_t v21 = v37;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v24 >= v32) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v31 + 8 * v24);
    ++v11;
    if (!v25)
    {
      int64_t v11 = v24 + 1;
      if (v24 + 1 >= v32) {
        goto LABEL_23;
      }
      unint64_t v25 = *(void *)(v31 + 8 * v11);
      if (!v25) {
        break;
      }
    }

void *sub_1003AEC24()
{
  return sub_1003AF410(&qword_1006525B0, (uint64_t (*)(_BYTE *, uint64_t))sub_1001CE0D0);
}

void *sub_1003AEC38()
{
  return sub_1003AEC44(&qword_100652608);
}

void *sub_1003AEC44(uint64_t *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100183098(a1);
  uint64_t v8 = *v1;
  uint64_t v9 = static _DictionaryStorage.copy(original:)(*v1);
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
    id result = (void *)swift_release(v8);
LABEL_28:
    *uint64_t v3 = v10;
    return result;
  }

  uint64_t v29 = v3;
  id result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1LL << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  uint64_t v30 = v8 + 64;
  int64_t v14 = 0LL;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v16 = -1LL;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      unint64_t v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }

    int64_t v26 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v26 >= v18) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v30 + 8 * v26);
    ++v14;
    if (!v27)
    {
      int64_t v14 = v26 + 1;
      if (v26 + 1 >= v18) {
        goto LABEL_26;
      }
      unint64_t v27 = *(void *)(v30 + 8 * v14);
      if (!v27) {
        break;
      }
    }

char *sub_1003AEE80()
{
  return sub_1003AEEB8( (uint64_t (*)(void))&type metadata accessor for SFAirDropSend.Transfer,  (uint64_t (*)(void))&type metadata accessor for SFAirDrop.TransferIdentifier,  &qword_100651E08);
}

char *sub_1003AEE9C()
{
  return sub_1003AEEB8( (uint64_t (*)(void))&type metadata accessor for SFNWInterfaceType,  (uint64_t (*)(void))&type metadata accessor for UUID,  &qword_100649DD8);
}

char *sub_1003AEEB8(uint64_t (*a1)(void), uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t v46 = a1(0LL);
  uint64_t v42 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  int v45 = (char *)&v38 - v6;
  uint64_t v44 = a2(0LL);
  uint64_t v41 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  __int128 v43 = (char *)&v38 - v7;
  sub_100183098(a3);
  uint64_t v38 = v3;
  uint64_t v8 = *v3;
  uint64_t v9 = static _DictionaryStorage.copy(original:)(*v3);
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t v48 = v9;
  if (!v10)
  {
    id result = (char *)swift_release(v8);
    uint64_t v37 = v48;
    uint64_t v36 = v38;
LABEL_25:
    *uint64_t v36 = v37;
    return result;
  }

  uint64_t v11 = v9;
  id result = (char *)(v9 + 64);
  uint64_t v13 = (char *)(v8 + 64);
  unint64_t v14 = (unint64_t)((1LL << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  uint64_t v39 = v8 + 64;
  if (v11 != v8 || result >= &v13[8 * v14])
  {
    id result = (char *)memmove(result, v13, 8 * v14);
    uint64_t v11 = v48;
  }

  int64_t v15 = 0LL;
  *(void *)(v11 + 16) = *(void *)(v8 + 16);
  uint64_t v16 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v47 = v8;
  uint64_t v17 = -1LL;
  if (v16 < 64) {
    uint64_t v17 = ~(-1LL << v16);
  }
  unint64_t v18 = v17 & *(void *)(v8 + 64);
  int64_t v40 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v19 = v41;
  uint64_t v20 = v42;
  uint64_t v22 = v43;
  uint64_t v21 = v44;
  uint64_t v23 = v46;
  uint64_t v24 = v48;
  while (1)
  {
    if (v18)
    {
      unint64_t v25 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      int64_t v49 = v15;
      unint64_t v26 = v25 | (v15 << 6);
      uint64_t v27 = v47;
      goto LABEL_9;
    }

    int64_t v32 = v15 + 1;
    uint64_t v27 = v47;
    if (__OFADD__(v15, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v32 >= v40) {
      goto LABEL_23;
    }
    unint64_t v33 = *(void *)(v39 + 8 * v32);
    int64_t v34 = v15 + 1;
    if (!v33)
    {
      int64_t v34 = v32 + 1;
      if (v32 + 1 >= v40) {
        goto LABEL_23;
      }
      unint64_t v33 = *(void *)(v39 + 8 * v34);
      if (!v33) {
        break;
      }
    }

void *sub_1003AF198()
{
  return sub_1003B0298(&qword_1006525A0);
}

void *sub_1003AF1A4()
{
  return sub_1003AF1B8(type metadata accessor for RegistrationState, &qword_100651DC8);
}

void *sub_1003AF1B8(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v5 = a1(0LL);
  uint64_t v32 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v29 - v6;
  sub_100183098(a2);
  unint64_t v29 = v2;
  uint64_t v8 = *v2;
  uint64_t v9 = static _DictionaryStorage.copy(original:)(*v2);
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v8);
    *unint64_t v29 = v10;
    return result;
  }

  id result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1LL << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  uint64_t v30 = v8 + 64;
  int64_t v14 = 0LL;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v16 = -1LL;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  int64_t v31 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      unint64_t v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }

    int64_t v26 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v26 >= v31) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v30 + 8 * v26);
    ++v14;
    if (!v27)
    {
      int64_t v14 = v26 + 1;
      if (v26 + 1 >= v31) {
        goto LABEL_26;
      }
      unint64_t v27 = *(void *)(v30 + 8 * v14);
      if (!v27) {
        break;
      }
    }

void *sub_1003AF3E8()
{
  return sub_1003B0030((uint64_t (*)(void))&type metadata accessor for Date, &qword_100649120);
}

void *sub_1003AF3FC()
{
  return sub_1003AF410(&qword_100652538, (uint64_t (*)(_BYTE *, uint64_t))sub_1001CE0D0);
}

void *sub_1003AF410(uint64_t *a1, uint64_t (*a2)(_BYTE *, uint64_t))
{
  unint64_t v29 = a2;
  uint64_t v4 = v2;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100183098(a1);
  uint64_t v9 = *v2;
  uint64_t v10 = static _DictionaryStorage.copy(original:)(*v2);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    id result = (void *)swift_release(v9);
LABEL_28:
    *uint64_t v4 = v11;
    return result;
  }

  unint64_t v27 = v4;
  id result = (void *)(v10 + 64);
  unint64_t v13 = (unint64_t)((1LL << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  uint64_t v28 = v9 + 64;
  int64_t v15 = 0LL;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v17 = -1LL;
  if (v16 < 64) {
    uint64_t v17 = ~(-1LL << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 64);
  int64_t v19 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v21 = v20 | (v15 << 6);
      goto LABEL_12;
    }

    int64_t v24 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v24 >= v19) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v28 + 8 * v24);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v24 + 1;
      if (v24 + 1 >= v19) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v28 + 8 * v15);
      if (!v25) {
        break;
      }
    }

void *sub_1003AF658()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100183098(&qword_100652540);
  int64_t v24 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v5);
    *int64_t v24 = v7;
    return result;
  }

  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  int64_t v11 = 0LL;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  uint64_t v25 = v5 + 64;
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v26) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v26) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v11);
      if (!v21) {
        break;
      }
    }

void sub_1003AF87C()
{
}

void sub_1003AF888()
{
}

void sub_1003AF894(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100183098(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    swift_release(v3);
    *uint64_t v2 = v5;
    return;
  }

  uint64_t v6 = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v24 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v24 >= v14) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v7 + 8 * v24);
    ++v10;
    if (!v25)
    {
      int64_t v10 = v24 + 1;
      if (v24 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v7 + 8 * v10);
      if (!v25) {
        break;
      }
    }

void sub_1003AFA40()
{
  uint64_t v33 = sub_100183098(&qword_10064DB00);
  uint64_t v1 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100183098(&qword_1006525E0);
  uint64_t v30 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v34 = v5;
  if (!v6)
  {
    swift_release(v4);
    uint64_t v28 = v34;
    unint64_t v27 = v30;
LABEL_25:
    *unint64_t v27 = v28;
    return;
  }

  uint64_t v7 = v5;
  unint64_t v8 = (void *)(v5 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)v8 >= v4 + 64 + 8 * v9)
  {
    memmove(v8, (const void *)(v4 + 64), 8 * v9);
    uint64_t v7 = v34;
  }

  uint64_t v31 = v4 + 64;
  int64_t v10 = 0LL;
  *(void *)(v7 + 16) = *(void *)(v4 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v4 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v4 + 64);
  int64_t v32 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v14 = v33;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }

    int64_t v24 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v24 >= v32) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v31 + 8 * v24);
    ++v10;
    if (!v25)
    {
      int64_t v10 = v24 + 1;
      if (v24 + 1 >= v32) {
        goto LABEL_23;
      }
      unint64_t v25 = *(void *)(v31 + 8 * v10);
      if (!v25) {
        break;
      }
    }

void *sub_1003AFCA4()
{
  return sub_1003AF1B8(type metadata accessor for SDAirDropDiscoveredEndpoint, &qword_1006525C8);
}

id sub_1003AFCB8()
{
  return sub_1003AFCC4(&qword_1006525D8);
}

id sub_1003AFCC4(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100183098(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v3);
    *uint64_t v2 = v5;
    return result;
  }

  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }

void *sub_1003AFE6C()
{
  return sub_1003AFE78(&qword_1006525D0);
}

void *sub_1003AFE78(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100183098(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v3);
    *uint64_t v2 = v5;
    return result;
  }

  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v24 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v24 >= v14) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v7 + 8 * v24);
    ++v10;
    if (!v25)
    {
      int64_t v10 = v24 + 1;
      if (v24 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v7 + 8 * v10);
      if (!v25) {
        break;
      }
    }

void *sub_1003B001C()
{
  return sub_1003B0030((uint64_t (*)(void))&type metadata accessor for NWBrowser.Result, &qword_1006525C0);
}

void *sub_1003B0030(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v37 = a1(0LL);
  uint64_t v4 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v6 = (char *)&v33 - v5;
  sub_100183098(a2);
  uint64_t v34 = v2;
  uint64_t v7 = *v2;
  uint64_t v8 = static _DictionaryStorage.copy(original:)(*v2);
  uint64_t v9 = *(void *)(v7 + 16);
  uint64_t v38 = v8;
  if (!v9)
  {
    id result = (void *)swift_release(v7);
    uint64_t v32 = v38;
    uint64_t v31 = v34;
LABEL_28:
    *uint64_t v31 = v32;
    return result;
  }

  uint64_t v10 = v8;
  id result = (void *)(v8 + 64);
  unint64_t v12 = (unint64_t)((1LL << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v7 || (unint64_t)result >= v7 + 64 + 8 * v12)
  {
    id result = memmove(result, (const void *)(v7 + 64), 8 * v12);
    uint64_t v10 = v38;
  }

  uint64_t v35 = v7 + 64;
  int64_t v14 = 0LL;
  *(void *)(v10 + 16) = *(void *)(v7 + 16);
  uint64_t v15 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v16 = -1LL;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  unint64_t v17 = v16 & *(void *)(v7 + 64);
  int64_t v36 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v18 = v37;
  while (1)
  {
    if (v17)
    {
      unint64_t v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }

    int64_t v28 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v28 >= v36) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v28);
    ++v14;
    if (!v29)
    {
      int64_t v14 = v28 + 1;
      if (v28 + 1 >= v36) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v35 + 8 * v14);
      if (!v29) {
        break;
      }
    }

void *sub_1003B028C()
{
  return sub_1003B0298(&qword_1006525A8);
}

void *sub_1003B0298(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100183098(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v3);
    *uint64_t v2 = v5;
    return result;
  }

  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }

void sub_1003B0444()
{
  uint64_t v1 = v0;
  sub_100183098(&qword_1006525F0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *uint64_t v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

void *sub_1003B05F8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100183098(&qword_100652570);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (void *)swift_release(v6);
LABEL_28:
    *uint64_t v1 = v8;
    return result;
  }

  unint64_t v27 = v1;
  id result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1LL << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  uint64_t v28 = v6 + 64;
  int64_t v12 = 0LL;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 64);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }

    int64_t v24 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v24 >= v16) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v28 + 8 * v24);
    ++v12;
    if (!v25)
    {
      int64_t v12 = v24 + 1;
      if (v24 + 1 >= v16) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v28 + 8 * v12);
      if (!v25) {
        break;
      }
    }

void sub_1003B0834(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100183098(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    swift_release(v3);
    *uint64_t v2 = v5;
    return;
  }

  uint64_t v6 = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      int64_t v10 = v21 + 1;
      if (v21 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v7 + 8 * v10);
      if (!v22) {
        break;
      }
    }

void sub_1003B09D4()
{
  uint64_t v1 = v0;
  sub_100183098(&qword_100652560);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *uint64_t v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }

void *sub_1003B0B80()
{
  uint64_t v1 = v0;
  sub_100183098(&qword_100652530);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }

void *sub_1003B0D40()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100183098(&qword_100651DB8);
  __int128 v24 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v5);
    *__int128 v24 = v7;
    return result;
  }

  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1LL << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  uint64_t v25 = v5 + 64;
  int64_t v11 = 0LL;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v26) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v26) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v11);
      if (!v21) {
        break;
      }
    }

char *sub_1003B0F70()
{
  return sub_1003B0F8C( &qword_1006462F0,  (uint64_t (*)(void))&type metadata accessor for UUID,  &qword_100652558);
}

char *sub_1003B0F8C(uint64_t *a1, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t v46 = sub_100183098(a1);
  uint64_t v42 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  int v45 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = a2(0LL);
  uint64_t v41 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  __int128 v43 = (char *)&v38 - v7;
  sub_100183098(a3);
  uint64_t v38 = v3;
  uint64_t v8 = *v3;
  uint64_t v9 = static _DictionaryStorage.copy(original:)(*v3);
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t v48 = v9;
  if (!v10)
  {
    id result = (char *)swift_release(v8);
    uint64_t v37 = v48;
    int64_t v36 = v38;
LABEL_25:
    *int64_t v36 = v37;
    return result;
  }

  uint64_t v11 = v9;
  id result = (char *)(v9 + 64);
  uint64_t v13 = (char *)(v8 + 64);
  unint64_t v14 = (unint64_t)((1LL << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  uint64_t v39 = v8 + 64;
  if (v11 != v8 || result >= &v13[8 * v14])
  {
    id result = (char *)memmove(result, v13, 8 * v14);
    uint64_t v11 = v48;
  }

  int64_t v15 = 0LL;
  *(void *)(v11 + 16) = *(void *)(v8 + 16);
  uint64_t v16 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v47 = v8;
  uint64_t v17 = -1LL;
  if (v16 < 64) {
    uint64_t v17 = ~(-1LL << v16);
  }
  unint64_t v18 = v17 & *(void *)(v8 + 64);
  int64_t v40 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v19 = v41;
  uint64_t v20 = v42;
  int64_t v22 = v43;
  uint64_t v21 = v44;
  uint64_t v23 = v46;
  uint64_t v24 = v48;
  while (1)
  {
    if (v18)
    {
      unint64_t v25 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      int64_t v49 = v15;
      unint64_t v26 = v25 | (v15 << 6);
      uint64_t v27 = v47;
      goto LABEL_9;
    }

    int64_t v32 = v15 + 1;
    uint64_t v27 = v47;
    if (__OFADD__(v15, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v32 >= v40) {
      goto LABEL_23;
    }
    unint64_t v33 = *(void *)(v39 + 8 * v32);
    int64_t v34 = v15 + 1;
    if (!v33)
    {
      int64_t v34 = v32 + 1;
      if (v32 + 1 >= v40) {
        goto LABEL_23;
      }
      unint64_t v33 = *(void *)(v39 + 8 * v34);
      if (!v33) {
        break;
      }
    }

unint64_t sub_1003B1268(int a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

unint64_t sub_1003B1304(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    uint64_t v6 = v2;
    type metadata accessor for CFString(0LL);
    uint64_t v9 = v8;
    uint64_t v10 = *(void **)(*(void *)(v6 + 48) + 8 * i);
    uint64_t v11 = sub_100183F14( &qword_100645530,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1004CCC0C);
    id v12 = v10;
    char v13 = static _CFObject.== infix(_:_:)(v12, a1, v9, v11);

    if ((v13 & 1) == 0)
    {
      uint64_t v14 = ~v4;
      for (unint64_t i = (i + 1) & v14; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v14)
      {
        id v15 = *(id *)(*(void *)(v6 + 48) + 8 * i);
        char v16 = static _CFObject.== infix(_:_:)(v15, a1, v9, v11);

        if ((v16 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

unint64_t sub_1003B1444(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_1001CE1D0(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_10019154C((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

unint64_t sub_1003B1508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_1003B15E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    sub_100183168(0LL, &qword_100645168, &OBJC_CLASS___NSString_ptr);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if ((v10 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

unint64_t sub_1003B1700( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  int64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v6 = v5;
  uint64_t v20 = a1;
  uint64_t v21 = a3;
  uint64_t v8 = a3(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20 - v10;
  uint64_t v12 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v13 = a2 & ~v12;
  if (((*(void *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0)
  {
    uint64_t v14 = ~v12;
    uint64_t v15 = *(void *)(v9 + 72);
    BOOL v16 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v16(v11, *(void *)(v6 + 48) + v15 * v13, v8);
      uint64_t v17 = sub_100183F14(v22, v21, v23);
      char v18 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v20, v8, v17);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v18 & 1) != 0) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
    }

    while (((*(void *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0);
  }

  return v13;
}

unint64_t sub_1003B1830(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
      }
    }
  }

  return result;
}

unint64_t sub_1003B18D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

unint64_t sub_1003B196C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v5));
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2LL);
      return v5;
    }

    uint64_t v13 = v11;
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0LL);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      uint64_t v15 = ~v4;
      unint64_t v5 = (v5 + 1) & v15;
      if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
      {
        while (1)
        {
          uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v2 + 48) + 8 * v5));
          uint64_t v9 = v17;
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19) {
            break;
          }
          uint64_t v21 = v19;
          char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0LL);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v15;
            if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0) {
              continue;
            }
          }

          return v5;
        }

        goto LABEL_16;
      }
    }
  }

  return v5;
}

uint64_t sub_1003B1AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v5 = a3 & ~v4;
  if (((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0) {
    __asm { BR              X8 }
  }

  return a3 & ~v4;
}

_OWORD *sub_1003B2470(_OWORD *a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_1003AD484((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }

  else
  {
    char v13 = v8;
    uint64_t v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      uint64_t v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        uint64_t v16 = (void *)(v15[7] + 32 * v9);
        sub_10018709C(v16);
        return sub_100186D8C(a1, v16);
      }

      goto LABEL_11;
    }

    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_1003AD8F0();
      goto LABEL_7;
    }

    sub_1003A74F0(v12, a3 & 1);
    unint64_t v18 = sub_1003AD484((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      unint64_t v9 = v18;
      uint64_t v15 = *v4;
      if ((v13 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_1003B46A0(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }

  type metadata accessor for CFString(0LL);
  unint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
  return result;
}

_OWORD *sub_1003B2590(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  char v8 = (void *)*v3;
  unint64_t v10 = sub_1003AD50C(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      uint64_t v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        uint64_t v17 = (void *)(v16[7] + 32 * v10);
        sub_10018709C(v17);
        return sub_100186D8C(a1, v17);
      }

      goto LABEL_11;
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1003ADAB4();
      goto LABEL_7;
    }

    sub_1003A7810(v13, a3 & 1);
    unint64_t v19 = sub_1003AD50C(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      uint64_t v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_1001CE1D0(a2, (uint64_t)v21);
      return sub_1003B4704(v10, (uint64_t)v21, a1, v16);
    }
  }

  unint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

void sub_1003B26C8(uint64_t a1, uint64_t a2, const char *a3, char a4)
{
}

void sub_1003B26D4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  BOOL v12 = (void *)*v3;
  unint64_t v14 = sub_1003AD580(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    char v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7];

      *(void *)(v21 + 8 * v14) = a1;
      return;
    }

    goto LABEL_11;
  }

  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_1003ADCA4();
    goto LABEL_7;
  }

  sub_1003A7B24(v17, a3 & 1);
  unint64_t v22 = sub_1003AD580(a2);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return;
  }

  unint64_t v14 = v22;
  char v20 = *v4;
  if ((v18 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  sub_1003B477C(v14, (uint64_t)v11, a1, v20);
}

_OWORD *sub_1003B2830(__int128 *a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1003AD7E0( a2,  a3,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1003B1508);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      char v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = (void *)(v18[7] + 48 * v12);
        sub_10018709C(v19);
        return sub_1001CCE4C(a1, v19);
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1003ADECC();
      goto LABEL_7;
    }

    sub_1003A7EB8(v15, a4 & 1);
    uint64_t v21 = sub_1003AD7E0( a2,  a3,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1003B1508);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      char v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_1003B4814(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }

  unint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1003B2984(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_1003AD618(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    char v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_bridgeObjectRelease(*(void *)(v21 + 8 * v14));
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }

    goto LABEL_11;
  }

  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_1003AE0C0();
    goto LABEL_7;
  }

  sub_1003A81E8(v17, a3 & 1);
  unint64_t v23 = sub_1003AD618(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }

  unint64_t v14 = v23;
  char v20 = *v4;
  if ((v18 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_1003B4880(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_1003B2AE0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v5 = (void **)v4;
  uint64_t v28 = a2;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v13 = (void *)*v4;
  unint64_t v15 = sub_1003AD618(a3);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v5;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      char v22 = (uint64_t *)(v21[7] + 16 * v15);
      uint64_t result = swift_bridgeObjectRelease(v22[1]);
      uint64_t v24 = v28;
      *char v22 = a1;
      v22[1] = v24;
      return result;
    }

    goto LABEL_11;
  }

  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_1003AE2F0();
    goto LABEL_7;
  }

  sub_1003A857C(v18, a4 & 1);
  unint64_t v25 = sub_1003AD618(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return result;
  }

  unint64_t v15 = v25;
  uint64_t v21 = *v5;
  if ((v19 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  return sub_1003B4918(v15, (uint64_t)v12, a1, v28, v21);
}

uint64_t sub_1003B2C4C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1003B3664( a1,  a2,  a3,  a4,  (uint64_t (*)(void))&type metadata accessor for SFClientIdentity,  &qword_1006524D8);
}

uint64_t sub_1003B2C60(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1003B3DD8( a1,  a2,  a3,  a4,  type metadata accessor for SDAirDropReceiveClassroomHandler.Continuation,  &qword_100651DF8);
}

uint64_t sub_1003B2C74(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1003B2C9C( a1,  a2,  a3,  (uint64_t (*)(void))&type metadata accessor for NWEndpoint,  &qword_1006524E8);
}

uint64_t sub_1003B2C88(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1003B2C9C( a1,  a2,  a3,  (uint64_t (*)(void))&type metadata accessor for SFAirDropReceive.Transfer,  &qword_100651E18);
}

uint64_t sub_1003B2C9C(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(void), uint64_t *a5)
{
  uint64_t v28 = a5;
  uint64_t v29 = a1;
  uint64_t v7 = (void **)v5;
  uint64_t v10 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  char v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v14 = (void *)*v5;
  unint64_t v16 = sub_1003AD580(a2);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }

  else
  {
    char v20 = v15;
    uint64_t v21 = v14[3];
    if (v21 >= v19 && (a3 & 1) != 0)
    {
LABEL_7:
      char v22 = *v7;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        uint64_t v23 = v22[7];
        uint64_t v24 = a4(0LL);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 40LL))( v23 + *(void *)(*(void *)(v24 - 8) + 72LL) * v16,  v29,  v24);
      }

      goto LABEL_11;
    }

    if (v21 >= v19 && (a3 & 1) == 0)
    {
      sub_1003AEEB8(a4, (uint64_t (*)(void))&type metadata accessor for SFAirDrop.TransferIdentifier, v28);
      goto LABEL_7;
    }

    sub_1003A8928(v19, a3 & 1, a4, v28);
    unint64_t v26 = sub_1003AD580(a2);
    if ((v20 & 1) == (v27 & 1))
    {
      unint64_t v16 = v26;
      char v22 = *v7;
      if ((v20 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
      return sub_1003B4B2C(v16, (uint64_t)v13, v29, v22, a4);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
  __break(1u);
  return result;
}

void sub_1003B2E48(uint64_t a1, uint64_t a2, const char *a3, char a4)
{
}

void sub_1003B2E54(uint64_t a1, uint64_t a2, const char *a3, char a4, uint64_t *a5)
{
  uint64_t v7 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_1003AD7E0( a2,  (uint64_t)a3,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1003B1508);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_1003AFCC4(a5);
LABEL_7:
    char v20 = (void *)*v7;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7];

      *(void *)(v21 + 8 * v14) = a1;
      return;
    }

uint64_t sub_1003B2FE8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1003AD7E0( a2,  a3,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1003B1508);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1003AFE78(&qword_100651E28);
LABEL_7:
    char v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(void *)(v18[7] + 8 * v12) = a1;
      return result;
    }

void sub_1003B3168(uint64_t a1, uint64_t a2, const char *a3, char a4)
{
}

void sub_1003B3174(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_1003AD7E0( a3,  (uint64_t)a4,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1003B1508);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1003AE788();
LABEL_7:
    char v20 = (void *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7] + 16 * v14;
      swift_bridgeObjectRelease(*(const char **)(v21 + 8));
      *(void *)uint64_t v21 = a1;
      *(void *)(v21 + 8) = a2;
      return;
    }

uint64_t sub_1003B3308(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_1003AD580(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }

  else
  {
    char v18 = v13;
    uint64_t v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      char v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        uint64_t v21 = v20[7];
        uint64_t v22 = sub_100183098((uint64_t *)&unk_1006463F0);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 40LL))( v21 + *(void *)(*(void *)(v22 - 8) + 72LL) * v14,  a1,  v22);
      }

      goto LABEL_11;
    }

    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_1003B0F8C( (uint64_t *)&unk_1006463F0,  (uint64_t (*)(void))&type metadata accessor for SFAirDrop.TransferIdentifier,  &qword_100652610);
      goto LABEL_7;
    }

    sub_1003A932C(v17, a3 & 1);
    unint64_t v24 = sub_1003AD580(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      unint64_t v14 = v24;
      char v20 = *v4;
      if ((v18 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_1003B49B8(v14, (uint64_t)v11, a1, v20);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

uint64_t sub_1003B34AC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_1003AD580(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    char v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t v22 = type metadata accessor for SDAirDropLegacySessionLogger.Transfer(0LL);
      return sub_1003C31C8( a1,  v21 + *(void *)(*(void *)(v22 - 8) + 72LL) * v14,  type metadata accessor for SDAirDropLegacySessionLogger.Transfer);
    }

    goto LABEL_11;
  }

  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_1003AE95C();
    goto LABEL_7;
  }

  sub_1003A9728(v17, a3 & 1);
  unint64_t v24 = sub_1003AD580(a2);
  if ((v18 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }

  unint64_t v14 = v24;
  char v20 = *v4;
  if ((v18 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_1003B4A74(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_1003B361C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1003B2C9C( a1,  a2,  a3,  (uint64_t (*)(void))&type metadata accessor for SFAirDropSend.Transfer,  &qword_100651E08);
}

uint64_t sub_1003B3630(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1003B3F88(a1, a2, a3, a4, &qword_1006525A0);
}

uint64_t sub_1003B363C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1003B3DD8(a1, a2, a3, a4, type metadata accessor for RegistrationState, &qword_100651DC8);
}

uint64_t sub_1003B3650(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1003B3664( a1,  a2,  a3,  a4,  (uint64_t (*)(void))&type metadata accessor for Date,  &qword_100649120);
}

uint64_t sub_1003B3664( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t (*a5)(void), uint64_t *a6)
{
  uint64_t v9 = (void **)v6;
  unint64_t v14 = (void *)*v6;
  unint64_t v16 = sub_1003AD7E0( a2,  a3,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1003B1508);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }

  else
  {
    char v20 = v15;
    uint64_t v21 = v14[3];
    if (v21 >= v19 && (a4 & 1) != 0)
    {
LABEL_7:
      uint64_t v22 = *v9;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        uint64_t v23 = v22[7];
        uint64_t v24 = a5(0LL);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 40LL))( v23 + *(void *)(*(void *)(v24 - 8) + 72LL) * v16,  a1,  v24);
      }

      goto LABEL_11;
    }

    if (v21 >= v19 && (a4 & 1) == 0)
    {
      sub_1003B0030(a5, a6);
      goto LABEL_7;
    }

    sub_1003ABA88(v19, a4 & 1, a5, a6);
    uint64_t v26 = sub_1003AD7E0( a2,  a3,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1003B1508);
    if ((v20 & 1) == (v27 & 1))
    {
      unint64_t v16 = v26;
      uint64_t v22 = *v9;
      if ((v20 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_1003B4D68(v16, a2, a3, a1, v22, a5);
      return swift_bridgeObjectRetain(a3);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1003B37E8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_1003AD618(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    char v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      *(void *)(v20[7] + 8 * v14) = a1;
      return result;
    }

    goto LABEL_11;
  }

  if (v19 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1003AF658();
    goto LABEL_7;
  }

  sub_1003AAA58(result, a3 & 1);
  uint64_t result = sub_1003AD618(a2);
  if ((v18 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }

  unint64_t v14 = result;
  char v20 = *v4;
  if ((v18 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_1003B4880(v14, (uint64_t)v11, a1, v20);
}

void sub_1003B3938(uint64_t a1, uint64_t a2, const char *a3, char a4)
{
}

void sub_1003B3944(char a1, uint64_t a2, const char *a3, char a4)
{
  unint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1003AD7E0( a2,  (uint64_t)a3,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1003B1508);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_9:
    char v20 = a1 & 1;
    char v21 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
      *(_BYTE *)(v21[7] + v12) = v20;
      return;
    }

    v21[(v12 >> 6) + 8] |= 1LL << v12;
    uint64_t v22 = (uint64_t *)(v21[6] + 16 * v12);
    *uint64_t v22 = a2;
    v22[1] = (uint64_t)a3;
    *(_BYTE *)(v21[7] + v12) = v20;
    uint64_t v23 = v21[2];
    BOOL v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (!v24)
    {
      v21[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }

    goto LABEL_14;
  }

  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1003B0834(&qword_100651E20);
    goto LABEL_9;
  }

  sub_1003AC7A8(v15, a4 & 1, &qword_100651E20);
  uint64_t v18 = sub_1003AD7E0( a2,  (uint64_t)a3,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1003B1508);
  if ((v16 & 1) == (v19 & 1))
  {
    unint64_t v12 = v18;
    goto LABEL_9;
  }

void sub_1003B3AC4(uint64_t a1, uint64_t a2, const char *a3, char a4)
{
}

void sub_1003B3AD0(uint64_t a1, uint64_t a2, const char *a3, char a4, uint64_t *a5)
{
  uint64_t v7 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_1003AD7E0( a2,  (uint64_t)a3,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1003B1508);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_1003AF894(a5);
LABEL_7:
    char v20 = (void *)*v7;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      swift_bridgeObjectRelease(*(const char **)(v21 + 8 * v14));
      *(void *)(v21 + 8 * v14) = a1;
      return;
    }

void sub_1003B3C64(uint64_t a1, uint64_t a2, const char *a3, char a4)
{
  unint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1003AD7E0( a2,  (uint64_t)a3,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1003B1508);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      char v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = v18[7];
        uint64_t v20 = sub_100183098(&qword_10064DB00);
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 40LL))( v19 + *(void *)(*(void *)(v20 - 8) + 72LL) * v12,  a1,  v20);
        return;
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1003AFA40();
      goto LABEL_7;
    }

    sub_1003AB104(v15, a4 & 1);
    uint64_t v21 = sub_1003AD7E0( a2,  (uint64_t)a3,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1003B1508);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      char v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_1003B4C8C(v12, a2, (uint64_t)a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_1003B3DC4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1003B3DD8(a1, a2, a3, a4, type metadata accessor for SDAirDropDiscoveredEndpoint, &qword_1006525C8);
}

uint64_t sub_1003B3DD8( uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t (*a5)(void), uint64_t *a6)
{
  uint64_t v9 = (void **)v6;
  BOOL v14 = (void *)*v6;
  unint64_t v16 = sub_1003AD7E0( a2,  a3,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1003B1508);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }

  else
  {
    char v20 = v15;
    uint64_t v21 = v14[3];
    if (v21 >= v19 && (a4 & 1) != 0)
    {
LABEL_7:
      char v22 = *v9;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        uint64_t v23 = v22[7];
        uint64_t v24 = a5(0LL);
        return sub_1003C31C8(a1, v23 + *(void *)(*(void *)(v24 - 8) + 72LL) * v16, a5);
      }

      goto LABEL_11;
    }

    if (v21 >= v19 && (a4 & 1) == 0)
    {
      sub_1003AF1B8(a5, a6);
      goto LABEL_7;
    }

    sub_1003AA318(v19, a4 & 1, a5, a6);
    uint64_t v26 = sub_1003AD7E0( a2,  a3,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1003B1508);
    if ((v20 & 1) == (v27 & 1))
    {
      unint64_t v16 = v26;
      char v22 = *v9;
      if ((v20 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_1003B4BF4(v16, a2, a3, a1, v22, a5);
      return swift_bridgeObjectRetain(a3);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_1003B3F5C(uint64_t a1, uint64_t a2, const char *a3, char a4)
{
}

uint64_t sub_1003B3F68(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1003B3664( a1,  a2,  a3,  a4,  (uint64_t (*)(void))&type metadata accessor for NWBrowser.Result,  &qword_1006525C0);
}

uint64_t sub_1003B3F7C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1003B3F88(a1, a2, a3, a4, &qword_1006525A8);
}

uint64_t sub_1003B3F88(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_1003AD7E0( a2,  a3,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1003B1508);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_1003B0298(a5);
LABEL_7:
    char v20 = (void *)*v7;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_release(*(void *)(v21 + 8 * v14));
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }

void sub_1003B411C(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  unint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1003AD7E0(a2, a3, (void (*)(void *, uint64_t, uint64_t))&Data.hash(into:), sub_1003B1AE0);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1003B0444();
LABEL_7:
    char v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      swift_bridgeObjectRelease(*(const char **)(v19 + 8 * v12));
      *(void *)(v19 + 8 * v12) = a1;
      return;
    }

uint64_t sub_1003B429C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v5 = (void **)v4;
  uint64_t v28 = a2;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = (void *)*v4;
  unint64_t v15 = sub_1003AD618(a3);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    char v21 = *v5;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      char v22 = (uint64_t *)(v21[7] + 16 * v15);
      uint64_t result = swift_release(v22[1]);
      uint64_t v24 = v28;
      *char v22 = a1;
      v22[1] = v24;
      return result;
    }

    goto LABEL_11;
  }

  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_1003B05F8();
    goto LABEL_7;
  }

  sub_1003AC410(v18, a4 & 1);
  unint64_t v25 = sub_1003AD618(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return result;
  }

  unint64_t v15 = v25;
  char v21 = *v5;
  if ((v19 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  return sub_1003B4918(v15, (uint64_t)v12, a1, v28, v21);
}

void sub_1003B4408(uint64_t a1, uint64_t a2, Swift::UInt a3, char a4)
{
  unint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1003AD708(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1003B09D4();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7] + 16 * v12;
      swift_bridgeObjectRelease(*(const char **)(v19 + 8));
      *(void *)uint64_t v19 = a1;
      *(void *)(v19 + 8) = a2;
      return;
    }

uint64_t sub_1003B4544(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_1003AD618(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_unknownObjectRelease(*(void *)(v21 + 8 * v14));
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }

    goto LABEL_11;
  }

  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_1003B0D40();
    goto LABEL_7;
  }

  sub_1003AD098(v17, a3 & 1);
  unint64_t v23 = sub_1003AD618(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }

  unint64_t v14 = v23;
  unint64_t v20 = *v4;
  if ((v18 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_1003B4880(v14, (uint64_t)v11, a1, v20);
}

_OWORD *sub_1003B46A0(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_100186D8C(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

_OWORD *sub_1003B4704(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_100186D8C(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

uint64_t sub_1003B477C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

_OWORD *sub_1003B4814(unint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  __int128 v6 = (void *)(a5[6] + 16 * a1);
  *__int128 v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_1001CCE4C(a4, (_OWORD *)(a5[7] + 48 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t sub_1003B4880(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_1003B4918(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1,  a2,  v11);
  uint64_t v13 = (void *)(a5[7] + 16 * a1);
  *uint64_t v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1LL);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

uint64_t sub_1003B49B8(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = sub_100183098((uint64_t *)&unk_1006463F0);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1,  a3,  v11);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_1003B4A74(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for SDAirDropLegacySessionLogger.Transfer(0LL);
  uint64_t result = sub_1001A4B40( a3,  v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1,  type metadata accessor for SDAirDropLegacySessionLogger.Transfer);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_1003B4B2C( unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void))
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v10 = a4[6];
  uint64_t v11 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1,  a2,  v11);
  uint64_t v12 = a4[7];
  uint64_t v13 = a5(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))( v12 + *(void *)(*(void *)(v13 - 8) + 72LL) * a1,  a3,  v13);
  uint64_t v15 = a4[2];
  BOOL v16 = __OFADD__(v15, 1LL);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    a4[2] = v17;
  }
  return result;
}

uint64_t sub_1003B4BE8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return sub_1003B4BF4(a1, a2, a3, a4, a5, type metadata accessor for RegistrationState);
}

uint64_t sub_1003B4BF4( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t (*a6)(void))
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v10 = (void *)(a5[6] + 16 * a1);
  void *v10 = a2;
  v10[1] = a3;
  uint64_t v11 = a5[7];
  uint64_t v12 = a6(0LL);
  uint64_t result = sub_1001A4B40(a4, v11 + *(void *)(*(void *)(v12 - 8) + 72LL) * a1, a6);
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1LL);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

uint64_t sub_1003B4C8C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = sub_100183098(&qword_10064DB00);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))( v9 + *(void *)(*(void *)(v10 - 8) + 72LL) * a1,  a4,  v10);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1LL);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

unint64_t sub_1003B4D20(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1LL << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1LL);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t sub_1003B4D68( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t (*a6)(void))
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v9 = (void *)(a5[6] + 16 * a1);
  void *v9 = a2;
  v9[1] = a3;
  uint64_t v10 = a5[7];
  uint64_t v11 = a6(0LL);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))( v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1,  a4,  v11);
  uint64_t v13 = a5[2];
  BOOL v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a5[2] = v15;
  }
  return result;
}

uint64_t sub_1003B4DF8(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(*v3 + 40LL);
  uint64_t v13 = sub_100183F14( &qword_100645420,  v12,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.AskRequest.ItemInfo);
  swift_bridgeObjectRetain(v10);
  int64_t v35 = a2;
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  uint64_t v15 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v16 = v14 & ~v15;
  uint64_t v17 = v10;
  uint64_t v18 = v10 + 56;
  if (((*(void *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
  {
    uint64_t v31 = v3;
    uint64_t v32 = a1;
    uint64_t v33 = ~v15;
    uint64_t v34 = v7;
    uint64_t v19 = *(void *)(v7 + 72);
    unint64_t v20 = *(void (**)(void, void, void))(v7 + 16);
    while (1)
    {
      uint64_t v21 = v17;
      char v22 = v20;
      v20(v9, *(void *)(v17 + 48) + v19 * v16, v6);
      uint64_t v23 = sub_100183F14( &qword_100652640,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.AskRequest.ItemInfo);
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      uint64_t v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0) {
        break;
      }
      unint64_t v16 = (v16 + 1) & v33;
      uint64_t v17 = v21;
      unint64_t v20 = v22;
      if (((*(void *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        uint64_t v3 = v31;
        a1 = v32;
        uint64_t v26 = v34;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(void *)(*v31 + 48LL) + v19 * v16, v6);
    return 0LL;
  }

  else
  {
    swift_bridgeObjectRelease(v10);
    unint64_t v20 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v26 = v7;
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v28 = v35;
    v20(v9, v35, v6);
    uint64_t v36 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_1003B9144((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    uint64_t v29 = *v3;
    *uint64_t v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1LL;
  }

uint64_t sub_1003B5054(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(*v3 + 40LL);
  uint64_t v13 = sub_100183F14(&qword_100645418, v12, (uint64_t)&protocol conformance descriptor for URL);
  swift_bridgeObjectRetain(v10);
  int64_t v35 = a2;
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  uint64_t v15 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v16 = v14 & ~v15;
  uint64_t v17 = v10;
  uint64_t v18 = v10 + 56;
  if (((*(void *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
  {
    uint64_t v31 = v3;
    uint64_t v32 = a1;
    uint64_t v33 = ~v15;
    uint64_t v34 = v7;
    uint64_t v19 = *(void *)(v7 + 72);
    unint64_t v20 = *(void (**)(void, void, void))(v7 + 16);
    while (1)
    {
      uint64_t v21 = v17;
      char v22 = v20;
      v20(v9, *(void *)(v17 + 48) + v19 * v16, v6);
      uint64_t v23 = sub_100183F14( &qword_100652618,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      uint64_t v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0) {
        break;
      }
      unint64_t v16 = (v16 + 1) & v33;
      uint64_t v17 = v21;
      unint64_t v20 = v22;
      if (((*(void *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        uint64_t v3 = v31;
        a1 = v32;
        uint64_t v26 = v34;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(void *)(*v31 + 48LL) + v19 * v16, v6);
    return 0LL;
  }

  else
  {
    swift_bridgeObjectRelease(v10);
    unint64_t v20 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v26 = v7;
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v28 = v35;
    v20(v9, v35, v6);
    uint64_t v36 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_1003B9398((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    uint64_t v29 = *v3;
    *uint64_t v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1LL;
  }

uint64_t sub_1003B52B0(const char **a1, void *a2)
{
  return sub_1003B6FC4( a1,  a2,  &qword_100645180,  &OBJC_CLASS___SFAirDropTransferItem_ptr,  &qword_100652630,  (void (*)(id, Swift::Int))sub_100480CD0);
}

uint64_t sub_1003B52D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for SDAirDropDiscoveredEndpoint(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v2;
  Hasher.init(_seed:)(v24);
  swift_bridgeObjectRetain(v10);
  sub_10020DC2C();
  Swift::Int v11 = Hasher._finalize()();
  uint64_t v12 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0)
  {
    char v22 = v2;
    uint64_t v23 = a1;
    uint64_t v14 = ~v12;
    uint64_t v15 = *(void *)(v7 + 72);
    while (1)
    {
      sub_1001A4B84( *(void *)(v10 + 48) + v15 * v13,  (uint64_t)v9,  type metadata accessor for SDAirDropDiscoveredEndpoint);
      sub_100215B08((uint64_t)v9, a2);
      char v17 = v16;
      sub_1001A4BC8((uint64_t)v9, type metadata accessor for SDAirDropDiscoveredEndpoint);
      if ((v17 & 1) != 0) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
      if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease(v10);
        uint64_t v3 = v22;
        a1 = v23;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease(v10);
    sub_1001A4BC8(a2, type metadata accessor for SDAirDropDiscoveredEndpoint);
    sub_1001A4B84(*(void *)(*v22 + 48LL) + v15 * v13, v23, type metadata accessor for SDAirDropDiscoveredEndpoint);
    return 0LL;
  }

  else
  {
    swift_bridgeObjectRelease(v10);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    sub_1001A4B84(a2, (uint64_t)v9, type metadata accessor for SDAirDropDiscoveredEndpoint);
    v24[0] = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_1003B95EC((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    uint64_t v19 = *v3;
    *uint64_t v3 = v24[0];
    swift_bridgeObjectRelease(v19);
    sub_1001A4B40(a2, a1, type metadata accessor for SDAirDropDiscoveredEndpoint);
    return 1LL;
  }

uint64_t sub_1003B54D0(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(*v3 + 40LL);
  uint64_t v13 = sub_100183F14(&qword_100646108, v12, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v10);
  int64_t v35 = a2;
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  uint64_t v15 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v16 = v14 & ~v15;
  uint64_t v17 = v10;
  uint64_t v18 = v10 + 56;
  if (((*(void *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
  {
    uint64_t v31 = v3;
    uint64_t v32 = a1;
    uint64_t v33 = ~v15;
    uint64_t v34 = v7;
    uint64_t v19 = *(void *)(v7 + 72);
    unint64_t v20 = *(void (**)(void, void, void))(v7 + 16);
    while (1)
    {
      uint64_t v21 = v17;
      char v22 = v20;
      v20(v9, *(void *)(v17 + 48) + v19 * v16, v6);
      uint64_t v23 = sub_100183F14( &qword_100646148,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      uint64_t v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0) {
        break;
      }
      unint64_t v16 = (v16 + 1) & v33;
      uint64_t v17 = v21;
      unint64_t v20 = v22;
      if (((*(void *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        uint64_t v3 = v31;
        a1 = v32;
        uint64_t v26 = v34;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(void *)(*v31 + 48LL) + v19 * v16, v6);
    return 0LL;
  }

  else
  {
    swift_bridgeObjectRelease(v10);
    unint64_t v20 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v26 = v7;
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v28 = v35;
    v20(v9, v35, v6);
    uint64_t v36 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_1003B97DC((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    uint64_t v29 = *v3;
    *uint64_t v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1LL;
  }

uint64_t sub_1003B572C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v24);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    uint64_t v13 = v12[1];
    BOOL v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0LL) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      uint64_t v15 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0LL;
    }

    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v19 = (void *)(v11 + 16 * v10);
      uint64_t v20 = v19[1];
      BOOL v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0LL) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  swift_bridgeObjectRelease(v7);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  swift_bridgeObjectRetain(a3);
  sub_1003B9A30(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t v23 = *v3;
  *uint64_t v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

uint64_t sub_1003B58D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for CodableError(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *v3;
  uint64_t v11 = *((void *)*v3 + 5);
  uint64_t v13 = sub_100183F14(&qword_100652508, v12, (uint64_t)&protocol conformance descriptor for CodableError);
  swift_bridgeObjectRetain(v10);
  uint64_t v37 = a2;
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  uint64_t v15 = -1LL << v10[32];
  unint64_t v16 = v14 & ~v15;
  uint64_t v17 = v10;
  uint64_t v18 = v10 + 56;
  if (((*(void *)&v10[((v16 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56] >> v16) & 1) != 0)
  {
    uint64_t v33 = v3;
    uint64_t v34 = a1;
    uint64_t v35 = ~v15;
    uint64_t v36 = v7;
    uint64_t v19 = *(void *)(v7 + 72);
    uint64_t v20 = *(void (**)(void, void, void))(v7 + 16);
    while (1)
    {
      BOOL v21 = v17;
      char v22 = v20;
      v20(v9, *((void *)v17 + 6) + v19 * v16, v6);
      uint64_t v23 = sub_100183F14( &qword_100652510,  (uint64_t (*)(uint64_t))&type metadata accessor for CodableError,  (uint64_t)&protocol conformance descriptor for CodableError);
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v37, v6, v23);
      uint64_t v25 = *(void (**)(char *, uint64_t))(v36 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0) {
        break;
      }
      unint64_t v16 = (v16 + 1) & v35;
      uint64_t v17 = v21;
      uint64_t v20 = v22;
      if (((*(void *)&v18[(v16 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        uint64_t v3 = v33;
        a1 = v34;
        uint64_t v26 = v36;
        goto LABEL_7;
      }
    }

    __n128 v32 = swift_bridgeObjectRelease(v21);
    ((void (*)(uint64_t, uint64_t, __n128))v25)(v37, v6, v32);
    v22(v34, *((void *)*v33 + 6) + v19 * v16, v6);
    return 0LL;
  }

  else
  {
    swift_bridgeObjectRelease(v10);
    uint64_t v20 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v26 = v7;
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v28 = v37;
    v20(v9, v37, v6);
    uint64_t v38 = *v3;
    *uint64_t v3 = (const char *)0x8000000000000000LL;
    sub_1003B9BC8((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    uint64_t v29 = *v3;
    *uint64_t v3 = v38;
    __n128 v30 = swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v26 + 32))(a1, v28, v6, v30);
    return 1LL;
  }

uint64_t sub_1003B5B34(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = *v3;
  Hasher.init(_seed:)(&__s1);
  swift_bridgeObjectRetain((const char *)v6);
  Data.hash(into:)(&__s1, a2, a3);
  unint64_t v7 = Hasher._finalize()() & ~(-1LL << *(_BYTE *)(v6 + 32));
  if (((*(void *)(v6 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0) {
    __asm { BR              X8 }
  }

  swift_bridgeObjectRelease((const char *)v6);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v11);
  __s1 = *v11;
  *uint64_t v11 = (const char *)0x8000000000000000LL;
  sub_10019BA8C(a2, a3);
  sub_1003B9E1C(a2, a3, v7, isUniquelyReferenced_nonNull_native);
  uint64_t v9 = *v11;
  *uint64_t v11 = __s1;
  swift_bridgeObjectRelease(v9);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

uint64_t sub_1003B6560(Swift::UInt *a1, Swift::UInt a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(&v14);
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << v5[32];
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)&v5[((v8 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56] >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    uint64_t v14 = *v2;
    *uint64_t v2 = (const char *)0x8000000000000000LL;
    sub_1003BA860(a2, v8, isUniquelyReferenced_nonNull_native);
    uint64_t v13 = *v2;
    *uint64_t v2 = v14;
    swift_bridgeObjectRelease(v13);
    uint64_t result = 1LL;
    goto LABEL_8;
  }

  uint64_t v9 = *((void *)v5 + 6);
  if (*(void *)(v9 + 8 * v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)&v5[((v8 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56] >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }

    while (*(void *)(v9 + 8 * v8) != a2);
  }

  uint64_t result = 0LL;
  a2 = *(void *)(*((void *)*v2 + 6) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1003B667C(const char **a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = (uint64_t)*v2;
  if (((unint64_t)*v2 & 0xC000000000000001LL) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = (uint64_t)*v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v2);
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease((const char *)v6);

      uint64_t v32 = v9;
      uint64_t v10 = type metadata accessor for SDAirDropSendConnection(0LL);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v33, &v32, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
      *a1 = v33;
      swift_unknownObjectRelease(v9);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Int v23 = sub_1003B7290(v7, result + 1);
    uint64_t v33 = (const char *)v23;
    unint64_t v24 = *(void *)(v23 + 16);
    if (*(void *)(v23 + 24) <= v24)
    {
      uint64_t v29 = v24 + 1;
      id v30 = v8;
      sub_1003B8EAC(v29, &qword_100646C78);
      Swift::Int v25 = (Swift::Int)v33;
    }

    else
    {
      Swift::Int v25 = v23;
      id v26 = v8;
    }

    sub_100480CD0(v8, v25);
    uint64_t v31 = *v3;
    *uint64_t v3 = (const char *)v25;
    swift_bridgeObjectRelease(v31);
  }

  else
  {
    Swift::Int v12 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain((const char *)v6);
    Swift::Int v13 = NSObject._rawHashValue(seed:)(v12);
    uint64_t v14 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v15 = v13 & ~v14;
    if (((*(void *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) != 0)
    {
      type metadata accessor for SDAirDropSendConnection(0LL);
      id v16 = *(id *)(*(void *)(v6 + 48) + 8 * v15);
      char v17 = static NSObject.== infix(_:_:)(v16, a2);

      if ((v17 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease((const char *)v6);
        BOOL v21 = *(char **)(*((void *)*v3 + 6) + 8 * v15);
        *a1 = v21;
        char v22 = v21;
        return 0LL;
      }

      uint64_t v18 = ~v14;
      while (1)
      {
        unint64_t v15 = (v15 + 1) & v18;
        if (((*(void *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) == 0) {
          break;
        }
        id v19 = *(id *)(*(void *)(v6 + 48) + 8 * v15);
        char v20 = static NSObject.== infix(_:_:)(v19, a2);

        if ((v20 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

    swift_bridgeObjectRelease((const char *)v6);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v33 = *v3;
    *uint64_t v3 = (const char *)0x8000000000000000LL;
    id v8 = a2;
    sub_1003BA9AC((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native);
    uint64_t v28 = *v3;
    *uint64_t v3 = v33;
    swift_bridgeObjectRelease(v28);
  }

  *a1 = (const char *)v8;
  return 1LL;
}

uint64_t sub_1003B6900(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  Hasher.init(_seed:)(v25);
  swift_bridgeObjectRetain(v6);
  Task.hash(into:)( v25,  a2,  (char *)&type metadata for () + 8,  &type metadata for Never,  &protocol witness table for Never);
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1LL << v6[32];
  unint64_t v9 = v7 & ~v8;
  uint64_t v10 = v6 + 56;
  if (((*(void *)&v6[((v9 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56] >> v9) & 1) == 0)
  {
    Swift::Int v23 = a1;
    goto LABEL_8;
  }

  uint64_t v11 = *(void *)(*((void *)v6 + 6) + 8 * v9);
  uint64_t v12 = swift_retain(v11);
  char v13 = static Task.== infix(_:_:)( v12,  a2,  (char *)&type metadata for () + 8,  &type metadata for Never,  &protocol witness table for Never);
  swift_release(v11);
  if ((v13 & 1) == 0)
  {
    uint64_t v14 = ~v8;
    unint64_t v9 = (v9 + 1) & ~v8;
    Swift::Int v23 = a1;
    if (((*(void *)&v10[(v9 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v9) & 1) != 0)
    {
      while (1)
      {
        uint64_t v15 = *(void *)(*((void *)v6 + 6) + 8 * v9);
        uint64_t v16 = swift_retain(v15);
        char v17 = static Task.== infix(_:_:)( v16,  a2,  (char *)&type metadata for () + 8,  &type metadata for Never,  &protocol witness table for Never);
        swift_release(v15);
        if ((v17 & 1) != 0) {
          break;
        }
        unint64_t v9 = (v9 + 1) & v14;
        if (((*(void *)&v10[(v9 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v9) & 1) == 0) {
          goto LABEL_8;
        }
      }

      a1 = v23;
      goto LABEL_10;
    }

uint64_t sub_1003B6B10(uint64_t a1, uint64_t a2)
{
  return sub_1003B6B34( a1,  a2,  type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint,  (void (*)(void *))sub_10020D84C,  &qword_100652528,  (uint64_t (*)(char *, uint64_t))sub_10021473C);
}

uint64_t sub_1003B6B34( uint64_t a1, uint64_t a2, uint64_t (*a3)(void), void (*a4)(void *), uint64_t *a5, uint64_t (*a6)(char *, uint64_t))
{
  id v30 = a5;
  uint64_t v31 = a6;
  unint64_t v9 = v6;
  uint64_t v12 = a3(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v27 - v14;
  uint64_t v16 = *v6;
  Hasher.init(_seed:)(v32);
  __n128 v17 = swift_bridgeObjectRetain(v16);
  uint64_t v29 = a4;
  ((void (*)(void *, __n128))a4)(v32, v17);
  Swift::Int v18 = Hasher._finalize()();
  uint64_t v19 = -1LL << v16[32];
  unint64_t v20 = v18 & ~v19;
  if (((*(void *)&v16[((v20 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56] >> v20) & 1) != 0)
  {
    uint64_t v27 = v6;
    uint64_t v28 = a1;
    uint64_t v21 = ~v19;
    uint64_t v22 = *(void *)(v13 + 72);
    while (1)
    {
      sub_1001A4B84(*((void *)v16 + 6) + v22 * v20, (uint64_t)v15, a3);
      char v23 = v31(v15, a2);
      sub_1001A4BC8((uint64_t)v15, a3);
      if ((v23 & 1) != 0) {
        break;
      }
      unint64_t v20 = (v20 + 1) & v21;
      if (((*(void *)&v16[((v20 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56] >> v20) & 1) == 0)
      {
        swift_bridgeObjectRelease(v16);
        unint64_t v9 = v27;
        a1 = v28;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease(v16);
    sub_1001A4BC8(a2, a3);
    sub_1001A4B84(*((void *)*v27 + 6) + v22 * v20, v28, a3);
    return 0LL;
  }

  else
  {
    swift_bridgeObjectRelease(v16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
    sub_1001A4B84(a2, (uint64_t)v15, a3);
    v32[0] = *v9;
    const char *v9 = (const char *)0x8000000000000000LL;
    sub_1003BAD44((uint64_t)v15, v20, isUniquelyReferenced_nonNull_native, a3, v30, v29, v31);
    Swift::Int v25 = *v9;
    const char *v9 = (const char *)v32[0];
    swift_bridgeObjectRelease(v25);
    sub_1001A4B40(a2, a1, a3);
    return 1LL;
  }

uint64_t sub_1003B6D34(uint64_t a1, uint64_t a2)
{
  return sub_1003B6B34( a1,  a2,  type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint,  (void (*)(void *))sub_10020D5EC,  &qword_100652520,  (uint64_t (*)(char *, uint64_t))sub_100213AB0);
}

uint64_t sub_1003B6D58(uint64_t *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5)
{
  uint64_t v10 = *v5;
  Hasher.init(_seed:)(v41);
  *(void *)&double v11 = swift_bridgeObjectRetain((const char *)v10).n128_u64[0];
  swift_bridgeObjectRetain(a3, v11);
  String.hash(into:)(v41, a2, a3);
  *(void *)&double v12 = swift_bridgeObjectRelease(a3).n128_u64[0];
  swift_bridgeObjectRetain(a5, v12);
  String.hash(into:)(v41, a4, a5);
  swift_bridgeObjectRelease(a5);
  Swift::Int v13 = Hasher._finalize()();
  uint64_t v14 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v15 = v13 & ~v14;
  uint64_t v16 = v10 + 56;
  uint64_t v37 = (const char *)v10;
  if (((*(void *)(v10 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) != 0)
  {
    uint64_t v17 = ~v14;
    uint64_t v18 = *(void *)(v10 + 48);
    while (1)
    {
      uint64_t v19 = (void *)(v18 + 32 * v15);
      unint64_t v20 = (const char *)v19[1];
      uint64_t v21 = v19[2];
      uint64_t v22 = (const char *)v19[3];
      BOOL v23 = *v19 == a2 && v20 == a3;
      if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0LL) & 1) != 0)
      {
        BOOL v24 = v21 == a4 && v22 == a5;
        if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, a4, a5, 0LL) & 1) != 0) {
          break;
        }
      }

      unint64_t v15 = (v15 + 1) & v17;
      if (((*(void *)(v16 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) == 0) {
        goto LABEL_15;
      }
    }

    *(void *)&double v25 = swift_bridgeObjectRelease(a5, v37).n128_u64[0];
    *(void *)&double v26 = swift_bridgeObjectRelease(a3, v25).n128_u64[0];
    *(void *)&double v27 = swift_bridgeObjectRelease(v38, v26).n128_u64[0];
    uint64_t v28 = (uint64_t *)(*((void *)*v39 + 6) + 32 * v15);
    uint64_t v29 = (const char *)v28[1];
    uint64_t v30 = v28[2];
    uint64_t v31 = (const char *)v28[3];
    *a1 = *v28;
    a1[1] = (uint64_t)v29;
    a1[2] = v30;
    a1[3] = (uint64_t)v31;
    *(void *)&double v32 = swift_bridgeObjectRetain(v29, v27).n128_u64[0];
    swift_bridgeObjectRetain(v31, v32);
    return 0LL;
  }

  else
  {
LABEL_15:
    swift_bridgeObjectRelease(v37, v37);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v39);
    v41[0] = *v39;
    uint64_t *v39 = (const char *)0x8000000000000000LL;
    *(void *)&double v35 = swift_bridgeObjectRetain(a3).n128_u64[0];
    swift_bridgeObjectRetain(a5, v35);
    sub_1003BAF40(a2, a3, a4, a5, v15, isUniquelyReferenced_nonNull_native);
    uint64_t v36 = *v39;
    uint64_t *v39 = (const char *)v41[0];
    swift_bridgeObjectRelease(v36);
    *a1 = a2;
    a1[1] = (uint64_t)a3;
    uint64_t result = 1LL;
    a1[2] = a4;
    a1[3] = (uint64_t)a5;
  }

  return result;
}

uint64_t sub_1003B6F7C(const char **a1, void *a2)
{
  return sub_1003B6FC4( a1,  a2,  (unint64_t *)&qword_100646C30,  &OBJC_CLASS___CNContact_ptr,  &qword_100646C28,  (void (*)(id, Swift::Int))sub_100480CD0);
}

uint64_t sub_1003B6FA0(const char **a1, void *a2)
{
  return sub_1003B6FC4( a1,  a2,  (unint64_t *)&unk_10064B7B0,  &OBJC_CLASS___SFAutoUnlockDevice_ptr,  &qword_100652550,  (void (*)(id, Swift::Int))sub_100480CD0);
}

uint64_t sub_1003B6FC4( const char **a1, void *a2, unint64_t *a3, void *a4, uint64_t *a5, void (*a6)(id, Swift::Int))
{
  uint64_t v10 = v6;
  uint64_t v13 = (uint64_t)*v6;
  if (((unint64_t)*v6 & 0xC000000000000001LL) != 0)
  {
    if (v13 < 0) {
      uint64_t v15 = (uint64_t)*v6;
    }
    else {
      uint64_t v15 = v13 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v6);
    id v16 = a2;
    uint64_t v17 = __CocoaSet.member(for:)();

    if (v17)
    {
      swift_bridgeObjectRelease((const char *)v13);

      uint64_t v44 = v17;
      uint64_t v18 = sub_100183168(0LL, a3, a4);
      swift_unknownObjectRetain(v17);
      swift_dynamicCast(&v45, &v44, (char *)&type metadata for Swift.AnyObject + 8, v18, 7LL);
      *a1 = v45;
      swift_unknownObjectRelease(v17);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v15);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Int v31 = sub_1003B7488(v15, result + 1, a5, a3, a4);
    int v45 = (const char *)v31;
    unint64_t v32 = *(void *)(v31 + 16);
    if (*(void *)(v31 + 24) <= v32)
    {
      uint64_t v38 = v32 + 1;
      id v39 = v16;
      sub_1003B8EAC(v38, a5);
      Swift::Int v33 = (Swift::Int)v45;
    }

    else
    {
      Swift::Int v33 = v31;
      id v34 = v16;
    }

    a6(v16, v33);
    int64_t v40 = *v10;
    const char *v10 = (const char *)v33;
    swift_bridgeObjectRelease(v40);
    *a1 = (const char *)v16;
  }

  else
  {
    Swift::Int v20 = *(void *)(v13 + 40);
    swift_bridgeObjectRetain((const char *)v13);
    Swift::Int v21 = NSObject._rawHashValue(seed:)(v20);
    uint64_t v22 = -1LL << *(_BYTE *)(v13 + 32);
    unint64_t v23 = v21 & ~v22;
    uint64_t v41 = a4;
    if (((*(void *)(v13 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v23) & 1) != 0)
    {
      sub_100183168(0LL, a3, a4);
      id v24 = *(id *)(*(void *)(v13 + 48) + 8 * v23);
      char v25 = static NSObject.== infix(_:_:)(v24, a2);

      if ((v25 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease((const char *)v13);
        uint64_t v29 = *(char **)(*((void *)*v10 + 6) + 8 * v23);
        *a1 = v29;
        uint64_t v30 = v29;
        return 0LL;
      }

      uint64_t v26 = ~v22;
      while (1)
      {
        unint64_t v23 = (v23 + 1) & v26;
        if (((*(void *)(v13 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v23) & 1) == 0) {
          break;
        }
        id v27 = *(id *)(*(void *)(v13 + 48) + 8 * v23);
        char v28 = static NSObject.== infix(_:_:)(v27, a2);

        if ((v28 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

    swift_bridgeObjectRelease((const char *)v13);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v10);
    int v45 = *v10;
    const char *v10 = (const char *)0x8000000000000000LL;
    uint64_t v36 = a2;
    sub_1003BB124((uint64_t)v36, v23, isUniquelyReferenced_nonNull_native, a5, a3, v41);
    uint64_t v37 = *v10;
    const char *v10 = v45;
    swift_bridgeObjectRelease(v37);
    *a1 = v36;
  }

  return 1LL;
}

Swift::Int sub_1003B7290(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100183098(&qword_100646C78);
    uint64_t v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    uint64_t v23 = v4;
    uint64_t v5 = __CocoaSet.makeIterator()(a1);
    uint64_t v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = type metadata accessor for SDAirDropSendConnection(0LL);
      do
      {
        uint64_t v21 = v7;
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v8, 7LL);
        uint64_t v4 = v23;
        unint64_t v16 = *(void *)(v23 + 16);
        if (*(void *)(v23 + 24) <= v16)
        {
          sub_1003B8EAC(v16 + 1, &qword_100646C78);
          uint64_t v4 = v23;
        }

        uint64_t v9 = v22;
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
        uint64_t v11 = v4 + 56;
        uint64_t v12 = -1LL << *(_BYTE *)(v4 + 32);
        unint64_t v13 = result & ~v12;
        unint64_t v14 = v13 >> 6;
        if (((-1LL << v13) & ~*(void *)(v4 + 56 + 8 * (v13 >> 6))) != 0)
        {
          unint64_t v15 = __clz(__rbit64((-1LL << v13) & ~*(void *)(v4 + 56 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v17 = 0;
          unint64_t v18 = (unint64_t)(63 - v12) >> 6;
          do
          {
            if (++v14 == v18 && (v17 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v19 = v14 == v18;
            if (v14 == v18) {
              unint64_t v14 = 0LL;
            }
            v17 |= v19;
            uint64_t v20 = *(void *)(v11 + 8 * v14);
          }

          while (v20 == -1);
          unint64_t v15 = __clz(__rbit64(~v20)) + (v14 << 6);
        }

        *(void *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
        *(void *)(*(void *)(v4 + 48) + 8 * v15) = v9;
        ++*(void *)(v4 + 16);
        uint64_t v7 = __CocoaSet.Iterator.next()(result);
      }

      while (v7);
    }

    swift_release(v5);
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  return v4;
}

Swift::Int sub_1003B7488(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, void *a5)
{
  if (a2)
  {
    sub_100183098(a3);
    uint64_t v10 = static _SetStorage.convert(_:capacity:)(a1, a2);
    uint64_t v29 = v10;
    uint64_t v11 = __CocoaSet.makeIterator()(a1);
    uint64_t v12 = __CocoaSet.Iterator.next()(v11);
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = sub_100183168(0LL, a4, a5);
      do
      {
        uint64_t v27 = v13;
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v14, 7LL);
        uint64_t v10 = v29;
        unint64_t v22 = *(void *)(v29 + 16);
        if (*(void *)(v29 + 24) <= v22)
        {
          sub_1003B8EAC(v22 + 1, a3);
          uint64_t v10 = v29;
        }

        uint64_t v15 = v28;
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v10 + 40));
        uint64_t v17 = v10 + 56;
        uint64_t v18 = -1LL << *(_BYTE *)(v10 + 32);
        unint64_t v19 = result & ~v18;
        unint64_t v20 = v19 >> 6;
        if (((-1LL << v19) & ~*(void *)(v10 + 56 + 8 * (v19 >> 6))) != 0)
        {
          unint64_t v21 = __clz(__rbit64((-1LL << v19) & ~*(void *)(v10 + 56 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v23 = 0;
          unint64_t v24 = (unint64_t)(63 - v18) >> 6;
          do
          {
            if (++v20 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v25 = v20 == v24;
            if (v20 == v24) {
              unint64_t v20 = 0LL;
            }
            v23 |= v25;
            uint64_t v26 = *(void *)(v17 + 8 * v20);
          }

          while (v26 == -1);
          unint64_t v21 = __clz(__rbit64(~v26)) + (v20 << 6);
        }

        *(void *)(v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
        *(void *)(*(void *)(v10 + 48) + 8 * v21) = v15;
        ++*(void *)(v10 + 16);
        uint64_t v13 = __CocoaSet.Iterator.next()(result);
      }

      while (v13);
    }

    swift_release(v11);
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  return v10;
}

uint64_t sub_1003B7688( uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t v48 = a4;
  uint64_t v49 = a5;
  uint64_t v7 = v5;
  uint64_t v47 = a2;
  uint64_t v9 = a2(0LL);
  uint64_t v46 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v42 - v10;
  uint64_t v12 = *v7;
  if (*(void *)(*v7 + 24) > a1) {
    a1 = *(void *)(*v7 + 24);
  }
  sub_100183098(a3);
  uint64_t v13 = static _SetStorage.resize(original:capacity:move:)(v12, a1, 1LL);
  uint64_t v14 = v13;
  if (!*(void *)(v12 + 16)) {
    goto LABEL_39;
  }
  uint64_t v15 = 1LL << *(_BYTE *)(v12 + 32);
  uint64_t v16 = *(void *)(v12 + 56);
  int v45 = (void *)(v12 + 56);
  if (v15 < 64) {
    uint64_t v17 = ~(-1LL << v15);
  }
  else {
    uint64_t v17 = -1LL;
  }
  unint64_t v18 = v17 & v16;
  __int128 v43 = v7;
  int64_t v44 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v19 = v13 + 56;
  uint64_t result = swift_retain(v12);
  int64_t v21 = 0LL;
  while (1)
  {
    if (v18)
    {
      unint64_t v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_26;
    }

    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1LL))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }

    if (v25 >= v44) {
      goto LABEL_35;
    }
    unint64_t v26 = v45[v25];
    ++v21;
    if (!v26)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v44) {
        goto LABEL_35;
      }
      unint64_t v26 = v45[v21];
      if (!v26)
      {
        int64_t v21 = v25 + 2;
        if (v25 + 2 >= v44) {
          goto LABEL_35;
        }
        unint64_t v26 = v45[v21];
        if (!v26) {
          break;
        }
      }
    }

Swift::Int sub_1003B79E8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for SDAirDropDiscoveredEndpoint(0LL);
  uint64_t v36 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100183098(&qword_100646C68);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1LL);
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_39;
  }
  uint64_t v33 = v2;
  uint64_t v10 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  unint64_t v35 = (void *)(v7 + 56);
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  else {
    uint64_t v12 = -1LL;
  }
  unint64_t v13 = v12 & v11;
  int64_t v34 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v14 = v8 + 56;
  Swift::Int result = swift_retain(v7);
  int64_t v16 = 0LL;
  while (1)
  {
    if (v13)
    {
      unint64_t v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }

    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1LL))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }

    if (v20 >= v34) {
      goto LABEL_35;
    }
    unint64_t v21 = v35[v20];
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v34) {
        goto LABEL_35;
      }
      unint64_t v21 = v35[v16];
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v34) {
          goto LABEL_35;
        }
        unint64_t v21 = v35[v16];
        if (!v21) {
          break;
        }
      }
    }

Swift::Int sub_1003B7D38(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100183098(&qword_1006525F8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v32 = v2;
    uint64_t v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }

      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v10) {
          goto LABEL_36;
        }
        unint64_t v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v10) {
            goto LABEL_36;
          }
          unint64_t v19 = v33[v13];
          if (!v19)
          {
            int64_t v13 = v18 + 2;
            if (v18 + 2 >= v10) {
              goto LABEL_36;
            }
            unint64_t v19 = v33[v13];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v32;
                uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
                if (v31 > 63) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v33 = -1LL << v31;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v13 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v13 >= v10) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v33[v13];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v13 = v20;
            }
          }
        }

Swift::Int sub_1003B8014(uint64_t a1)
{
  return sub_1003B8EAC(a1, &qword_100652550);
}

Swift::Int sub_1003B8020(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100183098(&qword_1006525E8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v32 = v2;
    uint64_t v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }

      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v10) {
          goto LABEL_36;
        }
        unint64_t v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v10) {
            goto LABEL_36;
          }
          unint64_t v19 = v33[v13];
          if (!v19)
          {
            int64_t v13 = v18 + 2;
            if (v18 + 2 >= v10) {
              goto LABEL_36;
            }
            unint64_t v19 = v33[v13];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v32;
                uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
                if (v31 > 63) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v33 = -1LL << v31;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v13 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v13 >= v10) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v33[v13];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v13 = v20;
            }
          }
        }

Swift::Int sub_1003B82FC(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100183098(&qword_100652568);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  Swift::Int v6 = result;
  if (*(void *)(v3 + 16))
  {
    BOOL v29 = v2;
    int64_t v7 = 0LL;
    uint64_t v8 = (void *)(v3 + 56);
    uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v3 + 56);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    Swift::Int v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v7 << 6);
      }

      else
      {
        int64_t v17 = v7 + 1;
        if (__OFADD__(v7, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v17 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          int64_t v7 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_36;
          }
          unint64_t v18 = v8[v7];
          if (!v18)
          {
            int64_t v7 = v17 + 2;
            if (v17 + 2 >= v12) {
              goto LABEL_36;
            }
            unint64_t v18 = v8[v7];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                uint64_t v28 = 1LL << *(_BYTE *)(v3 + 32);
                if (v28 > 63) {
                  bzero((void *)(v3 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v8 = -1LL << v28;
                }
                uint64_t v2 = v29;
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v7 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v7 >= v12) {
                    goto LABEL_36;
                  }
                  unint64_t v18 = v8[v7];
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v7 = v19;
            }
          }
        }

Swift::Int sub_1003B85A4(uint64_t a1)
{
  return sub_1003B8EAC(a1, &qword_100646C78);
}

Swift::Int sub_1003B85B0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100183098(&qword_100652628);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    BOOL v29 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v16 = v15 | (v13 << 6);
      }

      else
      {
        int64_t v17 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v17 >= v10) {
          goto LABEL_36;
        }
        unint64_t v18 = v29[v17];
        ++v13;
        if (!v18)
        {
          int64_t v13 = v17 + 1;
          if (v17 + 1 >= v10) {
            goto LABEL_36;
          }
          unint64_t v18 = v29[v13];
          if (!v18)
          {
            int64_t v13 = v17 + 2;
            if (v17 + 2 >= v10) {
              goto LABEL_36;
            }
            unint64_t v18 = v29[v13];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v10)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v28 = 1LL << *(_BYTE *)(v3 + 32);
                if (v28 > 63) {
                  bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *BOOL v29 = -1LL << v28;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v18 = v29[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v13 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v13 >= v10) {
                    goto LABEL_36;
                  }
                  unint64_t v18 = v29[v13];
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v13 = v19;
            }
          }
        }

uint64_t sub_1003B88A0( uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, void (*a4)(void *))
{
  uint64_t v36 = a4;
  uint64_t v7 = v4;
  uint64_t v9 = a2(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  int64_t v12 = (char *)&v32 - v11;
  uint64_t v13 = *v7;
  if (*(void *)(*v7 + 24) > a1) {
    a1 = *(void *)(*v7 + 24);
  }
  sub_100183098(a3);
  uint64_t v14 = static _SetStorage.resize(original:capacity:move:)(v13, a1, 1LL);
  uint64_t v15 = v14;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_29;
  }
  uint64_t v16 = 1LL << *(_BYTE *)(v13 + 32);
  uint64_t v17 = *(void *)(v13 + 56);
  uint64_t v33 = v7;
  int64_t v34 = (void *)(v13 + 56);
  if (v16 < 64) {
    uint64_t v18 = ~(-1LL << v16);
  }
  else {
    uint64_t v18 = -1LL;
  }
  unint64_t v19 = v18 & v17;
  int64_t v35 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v20 = v14 + 56;
  uint64_t result = swift_retain(v13);
  int64_t v22 = 0LL;
  while (1)
  {
    if (v19)
    {
      unint64_t v23 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v24 = v23 | (v22 << 6);
      goto LABEL_9;
    }

    int64_t v28 = v22 + 1;
    if (__OFADD__(v22, 1LL))
    {
      __break(1u);
LABEL_31:
      __break(1u);
      return result;
    }

    if (v28 >= v35) {
      goto LABEL_25;
    }
    unint64_t v29 = v34[v28];
    ++v22;
    if (!v29)
    {
      int64_t v22 = v28 + 1;
      if (v28 + 1 >= v35) {
        goto LABEL_25;
      }
      unint64_t v29 = v34[v22];
      if (!v29)
      {
        int64_t v22 = v28 + 2;
        if (v28 + 2 >= v35) {
          goto LABEL_25;
        }
        unint64_t v29 = v34[v22];
        if (!v29) {
          break;
        }
      }
    }

Swift::Int sub_1003B8B74(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100183098(&qword_100652598);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    char v37 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v35 = v2;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v10 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v12 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v16 = v15 | (v12 << 6);
      }

      else
      {
        int64_t v17 = v12 + 1;
        if (__OFADD__(v12, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v17 >= v36) {
          goto LABEL_36;
        }
        unint64_t v18 = v37[v17];
        ++v12;
        if (!v18)
        {
          int64_t v12 = v17 + 1;
          if (v17 + 1 >= v36) {
            goto LABEL_36;
          }
          unint64_t v18 = v37[v12];
          if (!v18)
          {
            int64_t v12 = v17 + 2;
            if (v17 + 2 >= v36) {
              goto LABEL_36;
            }
            unint64_t v18 = v37[v12];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v36)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v35;
                uint64_t v34 = 1LL << *(_BYTE *)(v3 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *char v37 = -1LL << v34;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v18 = v37[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v12 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v12 >= v36) {
                    goto LABEL_36;
                  }
                  unint64_t v18 = v37[v12];
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v12 = v19;
            }
          }
        }

Swift::Int sub_1003B8EAC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)(*v2 + 24);
  }
  sub_100183098(a2);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1LL);
  uint64_t v7 = v6;
  if (*(void *)(v4 + 16))
  {
    unint64_t v31 = v3;
    uint64_t v8 = 1LL << *(_BYTE *)(v4 + 32);
    unint64_t v9 = (void *)(v4 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1LL << v8);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v4 + 56);
    int64_t v12 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v13 = v6 + 56;
    Swift::Int result = swift_retain(v4);
    int64_t v15 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v15 << 6);
      }

      else
      {
        int64_t v19 = v15 + 1;
        if (__OFADD__(v15, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v19 >= v12) {
          goto LABEL_36;
        }
        unint64_t v20 = v9[v19];
        ++v15;
        if (!v20)
        {
          int64_t v15 = v19 + 1;
          if (v19 + 1 >= v12) {
            goto LABEL_36;
          }
          unint64_t v20 = v9[v15];
          if (!v20)
          {
            int64_t v15 = v19 + 2;
            if (v19 + 2 >= v12) {
              goto LABEL_36;
            }
            unint64_t v20 = v9[v15];
            if (!v20)
            {
              int64_t v21 = v19 + 3;
              if (v21 >= v12)
              {
LABEL_36:
                swift_release(v4);
                uint64_t v3 = v31;
                uint64_t v30 = 1LL << *(_BYTE *)(v4 + 32);
                if (v30 > 63) {
                  bzero((void *)(v4 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v9 = -1LL << v30;
                }
                *(void *)(v4 + 16) = 0LL;
                break;
              }

              unint64_t v20 = v9[v21];
              if (!v20)
              {
                while (1)
                {
                  int64_t v15 = v21 + 1;
                  if (__OFADD__(v21, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v15 >= v12) {
                    goto LABEL_36;
                  }
                  unint64_t v20 = v9[v15];
                  ++v21;
                  if (v20) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v15 = v21;
            }
          }
        }

uint64_t sub_1003B9144(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v30 = a1;
  uint64_t v6 = type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1003B7688( v12,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo,  &qword_100652648,  &qword_100645420,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.AskRequest.ItemInfo);
  }

  else
  {
    if (v11 > v10)
    {
      sub_1003BB464( (uint64_t (*)(void))&type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo,  &qword_100652648);
      goto LABEL_12;
    }

    sub_1003BC0EC( v12,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo,  &qword_100652648,  &qword_100645420,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.AskRequest.ItemInfo);
  }

  uint64_t v13 = *v3;
  uint64_t v14 = *(void *)(*v3 + 40);
  uint64_t v15 = sub_100183F14( &qword_100645420,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.AskRequest.ItemInfo);
  uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  uint64_t v17 = -1LL << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v18 = ~v17;
    uint64_t v19 = *(void *)(v7 + 72);
    unint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(void *)(v13 + 48) + v19 * a2, v6);
      uint64_t v21 = sub_100183F14( &qword_100652640,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.AskRequest.ItemInfo);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v18;
    }

    while (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

uint64_t sub_1003B9398(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v30 = a1;
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1003B7688( v12,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  &qword_100652638,  &qword_100645418,  (uint64_t)&protocol conformance descriptor for URL);
  }

  else
  {
    if (v11 > v10)
    {
      sub_1003BB464((uint64_t (*)(void))&type metadata accessor for URL, &qword_100652638);
      goto LABEL_12;
    }

    sub_1003BC0EC( v12,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  &qword_100652638,  &qword_100645418,  (uint64_t)&protocol conformance descriptor for URL);
  }

  uint64_t v13 = *v3;
  uint64_t v14 = *(void *)(*v3 + 40);
  uint64_t v15 = sub_100183F14( &qword_100645418,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  uint64_t v17 = -1LL << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v18 = ~v17;
    uint64_t v19 = *(void *)(v7 + 72);
    unint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(void *)(v13 + 48) + v19 * a2, v6);
      uint64_t v21 = sub_100183F14( &qword_100652618,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v18;
    }

    while (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

uint64_t sub_1003B95EC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for SDAirDropDiscoveredEndpoint(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = *(void *)(*v4 + 16);
  unint64_t v13 = *(void *)(*v4 + 24);
  uint64_t v29 = v9;
  if (v13 > v12 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1003B79E8(v14);
  }

  else
  {
    if (v13 > v12)
    {
      sub_1003BBB74(type metadata accessor for SDAirDropDiscoveredEndpoint, &qword_100646C68);
      goto LABEL_12;
    }

    sub_1003BC408(v14);
  }

  uint64_t v15 = *v4;
  Hasher.init(_seed:)(v30);
  sub_10020DC2C();
  Swift::Int v16 = Hasher._finalize()();
  uint64_t v17 = -1LL << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v28 = v8;
    uint64_t v18 = ~v17;
    uint64_t v19 = *(void *)(v9 + 72);
    do
    {
      sub_1001A4B84( *(void *)(v15 + 48) + v19 * a2,  (uint64_t)v11,  type metadata accessor for SDAirDropDiscoveredEndpoint);
      sub_100215B08((uint64_t)v11, a1);
      char v21 = v20;
      sub_1001A4BC8((uint64_t)v11, type metadata accessor for SDAirDropDiscoveredEndpoint);
      if ((v21 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v18;
    }

    while (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

uint64_t sub_1003B97DC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v30 = a1;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1003B7688( v12,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  &qword_1006524C8,  &qword_100646108,  (uint64_t)&protocol conformance descriptor for UUID);
  }

  else
  {
    if (v11 > v10)
    {
      sub_1003BB464((uint64_t (*)(void))&type metadata accessor for UUID, &qword_1006524C8);
      goto LABEL_12;
    }

    sub_1003BC0EC( v12,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  &qword_1006524C8,  &qword_100646108,  (uint64_t)&protocol conformance descriptor for UUID);
  }

  uint64_t v13 = *v3;
  uint64_t v14 = *(void *)(*v3 + 40);
  uint64_t v15 = sub_100183F14( &qword_100646108,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  uint64_t v17 = -1LL << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v18 = ~v17;
    uint64_t v19 = *(void *)(v7 + 72);
    char v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(void *)(v13 + 48) + v19 * a2, v6);
      uint64_t v21 = sub_100183F14( &qword_100646148,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v18;
    }

    while (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

uint64_t sub_1003B9A30(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_1003B7D38(v11);
  }

  else
  {
    if (v10 > v9)
    {
      uint64_t result = (uint64_t)sub_1003BB2B4();
      goto LABEL_22;
    }

    sub_1003BC71C(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v28);
  String.hash(into:)(v28, v8, a2);
  uint64_t result = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  uint64_t v14 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v15 = *(void *)(v12 + 48);
    uint64_t v16 = (void *)(v15 + 16 * a3);
    uint64_t v17 = v16[1];
    BOOL v18 = *v16 == v8 && v17 == a2;
    if (v18 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0LL), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        char v20 = (void *)(v15 + 16 * a3);
        uint64_t v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0LL);
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_21;
      }
    }
  }

uint64_t sub_1003B9BC8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v30 = a1;
  uint64_t v6 = type metadata accessor for CodableError(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1003B7688( v12,  (uint64_t (*)(uint64_t))&type metadata accessor for CodableError,  &qword_100652518,  &qword_100652508,  (uint64_t)&protocol conformance descriptor for CodableError);
  }

  else
  {
    if (v11 > v10)
    {
      sub_1003BB464((uint64_t (*)(void))&type metadata accessor for CodableError, &qword_100652518);
      goto LABEL_12;
    }

    sub_1003BC0EC( v12,  (uint64_t (*)(uint64_t))&type metadata accessor for CodableError,  &qword_100652518,  &qword_100652508,  (uint64_t)&protocol conformance descriptor for CodableError);
  }

  uint64_t v13 = *v3;
  uint64_t v14 = *(void *)(*v3 + 40);
  uint64_t v15 = sub_100183F14( &qword_100652508,  (uint64_t (*)(uint64_t))&type metadata accessor for CodableError,  (uint64_t)&protocol conformance descriptor for CodableError);
  uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  uint64_t v17 = -1LL << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v18 = ~v17;
    uint64_t v19 = *(void *)(v7 + 72);
    char v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(void *)(v13 + 48) + v19 * a2, v6);
      uint64_t v21 = sub_100183F14( &qword_100652510,  (uint64_t (*)(uint64_t))&type metadata accessor for CodableError,  (uint64_t)&protocol conformance descriptor for CodableError);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v18;
    }

    while (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

Swift::Int sub_1003B9E1C(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  Swift::Int v7 = result;
  unint64_t v8 = *(void *)(*v4 + 16);
  unint64_t v9 = *(void *)(*v4 + 24);
  if (v9 <= v8 || (a4 & 1) == 0)
  {
    uint64_t v10 = v8 + 1;
    if ((a4 & 1) != 0)
    {
      sub_1003B8020(v10);
    }

    else
    {
      if (v9 > v8)
      {
        uint64_t result = (Swift::Int)sub_1003BB688();
        goto LABEL_10;
      }

      sub_1003BC9C8(v10);
    }

    uint64_t v11 = *v4;
    Hasher.init(_seed:)(&__s1);
    Data.hash(into:)(&__s1, v7, a2);
    uint64_t result = Hasher._finalize()();
    a3 = result & ~(-1LL << *(_BYTE *)(v11 + 32));
    if (((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0) {
      __asm { BR              X8 }
    }
  }

uint64_t sub_1003BA860(uint64_t result, unint64_t a2, char a3)
{
  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1003B82FC(v8);
  }

  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_1003BB838();
      goto LABEL_14;
    }

    sub_1003BCC78(v8);
  }

  uint64_t v9 = *v3;
  Hasher.init(_seed:)(v18);
  Hasher._combine(_:)(v5);
  uint64_t result = Hasher._finalize()();
  uint64_t v10 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v9 + 48);
    if (*(void *)(v11 + 8 * a2) == v5)
    {
LABEL_13:
      type metadata accessor for SFAutoUnlockDeviceType(0LL);
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }

    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v11 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }

void sub_1003BA9AC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1003B8EAC(v9, &qword_100646C78);
  }

  else
  {
    if (v8 > v7)
    {
      sub_1003BBF4C(&qword_100646C78);
      goto LABEL_14;
    }

    sub_1003BD754(v9, &qword_100646C78);
  }

  uint64_t v10 = *v3;
  Swift::Int v11 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v12 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v13 = type metadata accessor for SDAirDropSendConnection(0LL);
    id v14 = *(id *)(*(void *)(v10 + 48) + 8 * a2);
    char v15 = static NSObject.== infix(_:_:)(v14, a1);

    if ((v15 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }

    else
    {
      uint64_t v16 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        id v17 = *(id *)(*(void *)(v10 + 48) + 8 * a2);
        char v18 = static NSObject.== infix(_:_:)(v17, a1);

        if ((v18 & 1) != 0) {
          goto LABEL_13;
        }
      }
    }
  }

uint64_t sub_1003BAB40(uint64_t result, unint64_t i, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_13;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1003B85B0(v8);
  }

  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_1003BB9CC();
      goto LABEL_13;
    }

    sub_1003BCEF0(v8);
  }

  uint64_t v9 = *v3;
  Hasher.init(_seed:)(v25);
  Task.hash(into:)( v25,  v5,  (char *)&type metadata for () + 8,  &type metadata for Never,  &protocol witness table for Never);
  uint64_t result = Hasher._finalize()();
  uint64_t v10 = -1LL << *(_BYTE *)(v9 + 32);
  unint64_t i = result & ~v10;
  uint64_t v11 = v9 + 56;
  if (((*(void *)(v9 + 56 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    uint64_t v12 = *(void *)(*(void *)(v9 + 48) + 8 * i);
    uint64_t v13 = swift_retain(v12);
    char v14 = static Task.== infix(_:_:)( v13,  v5,  (char *)&type metadata for () + 8,  &type metadata for Never,  &protocol witness table for Never);
    uint64_t result = swift_release(v12);
    if ((v14 & 1) != 0) {
      goto LABEL_16;
    }
    uint64_t v15 = ~v10;
    for (unint64_t i = (i + 1) & v15; ((*(void *)(v11 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v15)
    {
      uint64_t v16 = *(void *)(*(void *)(v9 + 48) + 8 * i);
      uint64_t v17 = swift_retain(v16);
      char v18 = static Task.== infix(_:_:)( v17,  v5,  (char *)&type metadata for () + 8,  &type metadata for Never,  &protocol witness table for Never);
      uint64_t result = swift_release(v16);
      if ((v18 & 1) != 0) {
        goto LABEL_16;
      }
    }
  }

uint64_t sub_1003BAD44( uint64_t a1, unint64_t a2, char a3, uint64_t (*a4)(void), uint64_t *a5, void (*a6)(void *), uint64_t (*a7)(char *, uint64_t))
{
  uint64_t v15 = a4(0LL);
  uint64_t v34 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v32 - v16;
  unint64_t v18 = *(void *)(*v7 + 16);
  unint64_t v19 = *(void *)(*v7 + 24);
  uint64_t v33 = v7;
  if (v19 > v18 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v20 = v18 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1003B88A0(v20, a4, a5, a6);
  }

  else
  {
    if (v19 > v18)
    {
      sub_1003BBB74(a4, a5);
      goto LABEL_12;
    }

    sub_1003BD1B4(v20, a4, a5, a6);
  }

  uint64_t v21 = *v7;
  Hasher.init(_seed:)(v35);
  a6(v35);
  Swift::Int v22 = Hasher._finalize()();
  uint64_t v23 = -1LL << *(_BYTE *)(v21 + 32);
  a2 = v22 & ~v23;
  if (((*(void *)(v21 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v32 = v15;
    uint64_t v24 = ~v23;
    uint64_t v25 = *(void *)(v34 + 72);
    do
    {
      sub_1001A4B84(*(void *)(v21 + 48) + v25 * a2, (uint64_t)v17, a4);
      char v26 = a7(v17, a1);
      sub_1001A4BC8((uint64_t)v17, a4);
      if ((v26 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v24;
    }

    while (((*(void *)(v21 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

void sub_1003BAF40(uint64_t a1, const char *a2, uint64_t a3, const char *a4, unint64_t a5, char a6)
{
  unint64_t v12 = *(void *)(*v6 + 16);
  unint64_t v13 = *(void *)(*v6 + 24);
  if (v13 > v12 && (a6 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v14 = v12 + 1;
  if ((a6 & 1) != 0)
  {
    sub_1003B8B74(v14);
  }

  else
  {
    if (v13 > v12)
    {
      sub_1003BBD8C();
      goto LABEL_22;
    }

    sub_1003BD450(v14);
  }

  uint64_t v15 = *v6;
  Hasher.init(_seed:)(v34);
  swift_bridgeObjectRetain(a2);
  String.hash(into:)(v34, a1, a2);
  *(void *)&double v16 = swift_bridgeObjectRelease(a2).n128_u64[0];
  swift_bridgeObjectRetain(a4, v16);
  String.hash(into:)(v34, a3, a4);
  swift_bridgeObjectRelease(a4);
  Swift::Int v17 = Hasher._finalize()();
  uint64_t v18 = -1LL << *(_BYTE *)(v15 + 32);
  a5 = v17 & ~v18;
  uint64_t v19 = v15 + 56;
  if (((*(void *)(v15 + 56 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a5) & 1) != 0)
  {
    uint64_t v20 = ~v18;
    uint64_t v21 = *(void *)(v15 + 48);
    while (1)
    {
      Swift::Int v22 = (void *)(v21 + 32 * a5);
      uint64_t v23 = (const char *)v22[1];
      uint64_t v24 = v22[2];
      uint64_t v25 = (const char *)v22[3];
      BOOL v26 = *v22 == a1 && v23 == a2;
      if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v22, v23, a1, a2, 0LL) & 1) != 0)
      {
        BOOL v27 = v24 == a3 && v25 == a4;
        if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, a3, a4, 0LL) & 1) != 0) {
          break;
        }
      }

      a5 = (a5 + 1) & v20;
      if (((*(void *)(v19 + ((a5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a5) & 1) == 0) {
        goto LABEL_22;
      }
    }

    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for SDHashStoreContact);
    __break(1u);
  }

void sub_1003BB124(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, unint64_t *a5, void *a6)
{
  uint64_t v9 = v6;
  unint64_t v12 = *(void *)(*v6 + 16);
  unint64_t v13 = *(void *)(*v6 + 24);
  if (v13 > v12 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1003B8EAC(v14, a4);
  }

  else
  {
    if (v13 > v12)
    {
      sub_1003BBF4C(a4);
      goto LABEL_14;
    }

    sub_1003BD754(v14, a4);
  }

  uint64_t v15 = *v6;
  Swift::Int v16 = NSObject._rawHashValue(seed:)(*(void *)(*v6 + 40));
  uint64_t v17 = -1LL << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v18 = sub_100183168(0LL, a5, a6);
    id v19 = *(id *)(*(void *)(v15 + 48) + 8 * a2);
    char v20 = static NSObject.== infix(_:_:)(v19, a1);

    if ((v20 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v18);
      __break(1u);
    }

    else
    {
      uint64_t v21 = ~v17;
      while (1)
      {
        a2 = (a2 + 1) & v21;
        if (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        id v22 = *(id *)(*(void *)(v15 + 48) + 8 * a2);
        char v23 = static NSObject.== infix(_:_:)(v22, a1);

        if ((v23 & 1) != 0) {
          goto LABEL_13;
        }
      }
    }
  }

void *sub_1003BB2B4()
{
  uint64_t v1 = v0;
  sub_100183098(&qword_1006525F8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }

void *sub_1003BB464(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = a1(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v27 - v7;
  sub_100183098(a2);
  uint64_t v9 = *v2;
  uint64_t v10 = static _SetStorage.copy(original:)(*v2);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    uint64_t result = (void *)swift_release(v9);
LABEL_30:
    *uint64_t v4 = v11;
    return result;
  }

  uint64_t v28 = v4;
  uint64_t result = (void *)(v10 + 56);
  uint64_t v13 = v9 + 56;
  unint64_t v14 = (unint64_t)((1LL << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  int64_t v16 = 0LL;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v17 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v18 = -1LL;
  if (v17 < 64) {
    uint64_t v18 = ~(-1LL << v17);
  }
  unint64_t v19 = v18 & *(void *)(v9 + 56);
  int64_t v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      unint64_t v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v22 = v21 | (v16 << 6);
      goto LABEL_12;
    }

    int64_t v24 = v16 + 1;
    if (__OFADD__(v16, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v24 >= v20) {
      goto LABEL_28;
    }
    unint64_t v25 = *(void *)(v13 + 8 * v24);
    ++v16;
    if (!v25)
    {
      int64_t v16 = v24 + 1;
      if (v24 + 1 >= v20) {
        goto LABEL_28;
      }
      unint64_t v25 = *(void *)(v13 + 8 * v16);
      if (!v25)
      {
        int64_t v16 = v24 + 2;
        if (v24 + 2 >= v20) {
          goto LABEL_28;
        }
        unint64_t v25 = *(void *)(v13 + 8 * v16);
        if (!v25) {
          break;
        }
      }
    }

void *sub_1003BB688()
{
  uint64_t v1 = v0;
  sub_100183098(&qword_1006525E8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }

void *sub_1003BB838()
{
  uint64_t v1 = v0;
  sub_100183098(&qword_100652568);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }

void *sub_1003BB9CC()
{
  uint64_t v1 = v0;
  sub_100183098(&qword_100652628);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }

void *sub_1003BBB74(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v5 = v2;
  uint64_t v6 = a1(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  int64_t v9 = (char *)&v28 - v8;
  sub_100183098(a2);
  uint64_t v10 = *v2;
  uint64_t v11 = static _SetStorage.copy(original:)(*v2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16))
  {
    uint64_t result = (void *)swift_release(v10);
LABEL_30:
    *uint64_t v5 = v12;
    return result;
  }

  uint64_t v29 = v5;
  uint64_t result = (void *)(v11 + 56);
  uint64_t v14 = v10 + 56;
  unint64_t v15 = (unint64_t)((1LL << *(_BYTE *)(v12 + 32)) + 63) >> 6;
  int64_t v17 = 0LL;
  *(void *)(v12 + 16) = *(void *)(v10 + 16);
  uint64_t v18 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v19 = -1LL;
  if (v18 < 64) {
    uint64_t v19 = ~(-1LL << v18);
  }
  unint64_t v20 = v19 & *(void *)(v10 + 56);
  int64_t v21 = (unint64_t)(v18 + 63) >> 6;
  while (1)
  {
    if (v20)
    {
      unint64_t v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v23 = v22 | (v17 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v25 >= v21) {
      goto LABEL_28;
    }
    unint64_t v26 = *(void *)(v14 + 8 * v25);
    ++v17;
    if (!v26)
    {
      int64_t v17 = v25 + 1;
      if (v25 + 1 >= v21) {
        goto LABEL_28;
      }
      unint64_t v26 = *(void *)(v14 + 8 * v17);
      if (!v26)
      {
        int64_t v17 = v25 + 2;
        if (v25 + 2 >= v21) {
          goto LABEL_28;
        }
        unint64_t v26 = *(void *)(v14 + 8 * v17);
        if (!v26) {
          break;
        }
      }
    }

void sub_1003BBD8C()
{
  uint64_t v1 = v0;
  sub_100183098(&qword_100652598);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *uint64_t v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v23 >= v13) {
      goto LABEL_28;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24)
      {
        int64_t v9 = v23 + 2;
        if (v23 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v24 = *(void *)(v6 + 8 * v9);
        if (!v24) {
          break;
        }
      }
    }

id sub_1003BBF4C(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100183098(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (id)swift_release(v3);
    *uint64_t v2 = v5;
    return result;
  }

  id result = (id)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v19 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20)
      {
        int64_t v10 = v19 + 2;
        if (v19 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v20 = *(void *)(v7 + 8 * v10);
        if (!v20) {
          break;
        }
      }
    }

uint64_t sub_1003BC0EC( uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  __int128 v43 = a4;
  uint64_t v44 = a5;
  uint64_t v7 = v5;
  uint64_t v42 = a2;
  uint64_t v9 = a2(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v39 - v11;
  uint64_t v13 = *v7;
  if (*(void *)(*v7 + 24) > a1) {
    a1 = *(void *)(*v7 + 24);
  }
  sub_100183098(a3);
  uint64_t v14 = static _SetStorage.resize(original:capacity:move:)(v13, a1, 0LL);
  uint64_t v15 = v14;
  if (!*(void *)(v13 + 16))
  {
    uint64_t result = swift_release(v13);
LABEL_37:
    *uint64_t v7 = v15;
    return result;
  }

  uint64_t v16 = 1LL << *(_BYTE *)(v13 + 32);
  uint64_t v17 = *(void *)(v13 + 56);
  BOOL v39 = v7;
  uint64_t v40 = v13 + 56;
  if (v16 < 64) {
    uint64_t v18 = ~(-1LL << v16);
  }
  else {
    uint64_t v18 = -1LL;
  }
  unint64_t v19 = v18 & v17;
  int64_t v41 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v20 = v14 + 56;
  uint64_t result = swift_retain(v13);
  int64_t v22 = 0LL;
  while (1)
  {
    if (v19)
    {
      unint64_t v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_26;
    }

    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v26 >= v41) {
      goto LABEL_35;
    }
    unint64_t v27 = *(void *)(v40 + 8 * v26);
    ++v22;
    if (!v27)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v41) {
        goto LABEL_35;
      }
      unint64_t v27 = *(void *)(v40 + 8 * v22);
      if (!v27)
      {
        int64_t v22 = v26 + 2;
        if (v26 + 2 >= v41) {
          goto LABEL_35;
        }
        unint64_t v27 = *(void *)(v40 + 8 * v22);
        if (!v27) {
          break;
        }
      }
    }

Swift::Int sub_1003BC408(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for SDAirDropDiscoveredEndpoint(0LL);
  uint64_t v35 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100183098(&qword_100646C68);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 0LL);
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    Swift::Int result = swift_release(v7);
LABEL_37:
    *uint64_t v2 = v9;
    return result;
  }

  uint64_t v10 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  uint64_t v32 = v2;
  uint64_t v33 = v7 + 56;
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  else {
    uint64_t v12 = -1LL;
  }
  unint64_t v13 = v12 & v11;
  int64_t v34 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v14 = v8 + 56;
  Swift::Int result = swift_retain(v7);
  int64_t v16 = 0LL;
  while (1)
  {
    if (v13)
    {
      unint64_t v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }

    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v20 >= v34) {
      goto LABEL_35;
    }
    unint64_t v21 = *(void *)(v33 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v34) {
        goto LABEL_35;
      }
      unint64_t v21 = *(void *)(v33 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v34) {
          goto LABEL_35;
        }
        unint64_t v21 = *(void *)(v33 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }

Swift::Int sub_1003BC71C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100183098(&qword_1006525F8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  uint64_t v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v32) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v32) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v13);
      if (!v19)
      {
        int64_t v13 = v18 + 2;
        if (v18 + 2 >= v32) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v13);
        if (!v19) {
          break;
        }
      }
    }

Swift::Int sub_1003BC9C8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100183098(&qword_1006525E8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  uint64_t v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v32) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v32) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v13);
      if (!v19)
      {
        int64_t v13 = v18 + 2;
        if (v18 + 2 >= v32) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v13);
        if (!v19) {
          break;
        }
      }
    }

Swift::Int sub_1003BCC78(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100183098(&qword_100652568);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  Swift::Int v6 = result;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  unint64_t v28 = v2;
  int64_t v7 = 0LL;
  Swift::Int v8 = v3 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v3 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  Swift::Int v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }

    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v12) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      int64_t v7 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v7);
      if (!v18)
      {
        int64_t v7 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v7);
        if (!v18) {
          break;
        }
      }
    }

Swift::Int sub_1003BCEF0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100183098(&qword_100652628);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  int64_t v28 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v16 = v15 | (v13 << 6);
      goto LABEL_27;
    }

    int64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v28) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v13;
    if (!v18)
    {
      int64_t v13 = v17 + 1;
      if (v17 + 1 >= v28) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v13);
      if (!v18)
      {
        int64_t v13 = v17 + 2;
        if (v17 + 2 >= v28) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v13);
        if (!v18) {
          break;
        }
      }
    }

uint64_t sub_1003BD1B4( uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, void (*a4)(void *))
{
  uint64_t v35 = a4;
  uint64_t v7 = v4;
  uint64_t v9 = a2(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  int64_t v12 = (char *)&v31 - v11;
  uint64_t v13 = *v7;
  if (*(void *)(*v7 + 24) > a1) {
    a1 = *(void *)(*v7 + 24);
  }
  sub_100183098(a3);
  uint64_t v14 = static _SetStorage.resize(original:capacity:move:)(v13, a1, 0LL);
  uint64_t v15 = v14;
  if (!*(void *)(v13 + 16))
  {
    uint64_t result = swift_release(v13);
LABEL_27:
    *uint64_t v7 = v15;
    return result;
  }

  uint64_t v16 = 1LL << *(_BYTE *)(v13 + 32);
  uint64_t v17 = *(void *)(v13 + 56);
  int64_t v32 = v7;
  uint64_t v33 = v13 + 56;
  if (v16 < 64) {
    uint64_t v18 = ~(-1LL << v16);
  }
  else {
    uint64_t v18 = -1LL;
  }
  unint64_t v19 = v18 & v17;
  int64_t v34 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v20 = v14 + 56;
  uint64_t result = swift_retain(v13);
  int64_t v22 = 0LL;
  while (1)
  {
    if (v19)
    {
      unint64_t v23 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v24 = v23 | (v22 << 6);
      goto LABEL_9;
    }

    int64_t v28 = v22 + 1;
    if (__OFADD__(v22, 1LL))
    {
      __break(1u);
      goto LABEL_29;
    }

    if (v28 >= v34) {
      goto LABEL_25;
    }
    unint64_t v29 = *(void *)(v33 + 8 * v28);
    ++v22;
    if (!v29)
    {
      int64_t v22 = v28 + 1;
      if (v28 + 1 >= v34) {
        goto LABEL_25;
      }
      unint64_t v29 = *(void *)(v33 + 8 * v22);
      if (!v29)
      {
        int64_t v22 = v28 + 2;
        if (v28 + 2 >= v34) {
          goto LABEL_25;
        }
        unint64_t v29 = *(void *)(v33 + 8 * v22);
        if (!v29) {
          break;
        }
      }
    }

Swift::Int sub_1003BD450(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100183098(&qword_100652598);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  int64_t v34 = v2;
  uint64_t v35 = v3 + 56;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(v3 + 56);
  int64_t v36 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v12 = 0LL;
  while (1)
  {
    if (v9)
    {
      unint64_t v15 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }

    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v36) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v35 + 8 * v17);
    ++v12;
    if (!v18)
    {
      int64_t v12 = v17 + 1;
      if (v17 + 1 >= v36) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v35 + 8 * v12);
      if (!v18)
      {
        int64_t v12 = v17 + 2;
        if (v17 + 2 >= v36) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v35 + 8 * v12);
        if (!v18) {
          break;
        }
      }
    }

Swift::Int sub_1003BD754(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)(*v2 + 24);
  }
  sub_100183098(a2);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 0LL);
  uint64_t v7 = v6;
  if (!*(void *)(v4 + 16))
  {
    Swift::Int result = swift_release(v4);
LABEL_38:
    *uint64_t v3 = v7;
    return result;
  }

  unint64_t v31 = v3;
  uint64_t v8 = 1LL << *(_BYTE *)(v4 + 32);
  uint64_t v9 = v4 + 56;
  if (v8 < 64) {
    uint64_t v10 = ~(-1LL << v8);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v4 + 56);
  int64_t v12 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v13 = v6 + 56;
  Swift::Int result = swift_retain(v4);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v18 = v17 | (v15 << 6);
      goto LABEL_27;
    }

    int64_t v19 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v19 >= v12) {
      goto LABEL_36;
    }
    unint64_t v20 = *(void *)(v9 + 8 * v19);
    ++v15;
    if (!v20)
    {
      int64_t v15 = v19 + 1;
      if (v19 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v20 = *(void *)(v9 + 8 * v15);
      if (!v20)
      {
        int64_t v15 = v19 + 2;
        if (v19 + 2 >= v12) {
          goto LABEL_36;
        }
        unint64_t v20 = *(void *)(v9 + 8 * v15);
        if (!v20) {
          break;
        }
      }
    }

uint64_t sub_1003BD9C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(*v3 + 40);
  uint64_t v13 = sub_100183F14(&qword_100646108, v12, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v10);
  uint64_t v33 = a1;
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  uint64_t v15 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v16 = v14 & ~v15;
  if (((*(void *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
  {
    unint64_t v31 = v3;
    uint64_t v32 = a2;
    uint64_t v17 = ~v15;
    uint64_t v18 = *(void *)(v7 + 72);
    uint64_t v34 = v7;
    int64_t v19 = *(void (**)(void, void, void))(v7 + 16);
    while (1)
    {
      unint64_t v20 = v18 * v16;
      v19(v9, *(void *)(v10 + 48) + v18 * v16, v6);
      uint64_t v21 = sub_100183F14( &qword_100646148,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v33, v6, v21);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v6);
      if ((v22 & 1) != 0) {
        break;
      }
      unint64_t v16 = (v16 + 1) & v17;
      if (((*(void *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v10);
        uint64_t v23 = 1LL;
        a2 = v32;
        uint64_t v7 = v34;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v23, 1LL, v6);
      }
    }

    swift_bridgeObjectRelease(v10);
    uint64_t v24 = v31;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v31);
    uint64_t v26 = *v24;
    uint64_t v35 = *v24;
    *uint64_t v24 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1003BB464((uint64_t (*)(void))&type metadata accessor for UUID, &qword_1006524C8);
      uint64_t v26 = v35;
    }

    unint64_t v27 = *(void *)(v26 + 48) + v20;
    uint64_t v7 = v34;
    a2 = v32;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v34 + 32))(v32, v27, v6);
    sub_1003BEF80(v16);
    uint64_t v28 = *v24;
    *uint64_t v24 = v35;
    swift_bridgeObjectRelease(v28);
    uint64_t v23 = 0LL;
  }

  else
  {
    swift_bridgeObjectRelease(v10);
    uint64_t v23 = 1LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v23, 1LL, v6);
}

uint64_t sub_1003BDC14(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(v22);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v22, a1, a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  uint64_t v9 = *(void *)(v5 + 48);
  uint64_t v10 = (void *)(v9 + 16 * v8);
  uint64_t v11 = v10[1];
  BOOL v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
  {
    uint64_t v17 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v17;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v18 = (void *)(v9 + 16 * v8);
      uint64_t v19 = v18[1];
      BOOL v20 = *v18 == a1 && v19 == a2;
    }

    while (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, a1, a2, 0LL) & 1) == 0);
  }

  swift_bridgeObjectRelease(v5);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v14 = *v2;
  v22[0] = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1003BB2B4();
    uint64_t v14 = v22[0];
  }

  uint64_t v15 = *(void *)(*(void *)(v14 + 48) + 16 * v8);
  sub_1003BF1FC(v8);
  uint64_t v16 = *v2;
  *uint64_t v2 = v22[0];
  swift_bridgeObjectRelease(v16);
  return v15;
}

double sub_1003BDDA0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = *v3;
  Hasher.init(_seed:)(&__s1);
  swift_bridgeObjectRetain((const char *)v6);
  Data.hash(into:)(&__s1, a1, a2);
  unint64_t v7 = Hasher._finalize()() & ~(-1LL << *(_BYTE *)(v6 + 32));
  if (((*(void *)(v6 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0) {
    __asm { BR              X8 }
  }

  swift_bridgeObjectRelease((const char *)v6);
  double result = 0.0;
  *a3 = xmmword_1004CD540;
  return result;
}

uint64_t sub_1003BE7D4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if ((*v1 & 0xC000000000000001LL) != 0)
  {
    if (v4 < 0) {
      uint64_t v5 = *v1;
    }
    else {
      uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain((const char *)v4);
    id v6 = a1;
    char v7 = __CocoaSet.contains(_:)();

    if ((v7 & 1) != 0)
    {
      uint64_t v8 = sub_1003BEDF8(v5, (uint64_t)v6);
      swift_bridgeObjectRelease((const char *)v4);
      return v8;
    }

uint64_t sub_1003BE9A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003BEBEC( a1,  type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint,  (void (*)(void *))sub_10020D5EC,  (uint64_t (*)(char *, uint64_t))sub_100213AB0,  &qword_100652520,  a2);
}

uint64_t sub_1003BE9C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for SDAirDropDiscoveredEndpoint(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Swift::Int v9 = *v2;
  Hasher.init(_seed:)(&v29);
  swift_bridgeObjectRetain(v9);
  sub_10020DC2C();
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1LL << v9[32];
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)&v9[((v12 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56] >> v12) & 1) != 0)
  {
    unint64_t v25 = v2;
    uint64_t v26 = v6;
    uint64_t v27 = v5;
    uint64_t v28 = a2;
    uint64_t v13 = ~v11;
    uint64_t v14 = *(void *)(v6 + 72);
    while (1)
    {
      sub_1001A4B84( *((void *)v9 + 6) + v14 * v12,  (uint64_t)v8,  type metadata accessor for SDAirDropDiscoveredEndpoint);
      sub_100215B08((uint64_t)v8, a1);
      char v16 = v15;
      sub_1001A4BC8((uint64_t)v8, type metadata accessor for SDAirDropDiscoveredEndpoint);
      if ((v16 & 1) != 0) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v13;
      if (((*(void *)&v9[((v12 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56] >> v12) & 1) == 0)
      {
        __n128 v17 = swift_bridgeObjectRelease(v9);
        uint64_t v18 = 1LL;
        a2 = v28;
        goto LABEL_10;
      }
    }

    swift_bridgeObjectRelease(v9);
    uint64_t v19 = v25;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v25);
    uint64_t v21 = *v19;
    BOOL v29 = *v19;
    *uint64_t v19 = (const char *)0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1003BBB74(type metadata accessor for SDAirDropDiscoveredEndpoint, &qword_100646C68);
      uint64_t v21 = v29;
    }

    a2 = v28;
    sub_1001A4B40(*((void *)v21 + 6) + v14 * v12, v28, type metadata accessor for SDAirDropDiscoveredEndpoint);
    sub_1003BF734(v12);
    uint64_t v22 = *v19;
    *uint64_t v19 = v29;
    __n128 v17 = swift_bridgeObjectRelease(v22);
    uint64_t v18 = 0LL;
LABEL_10:
    uint64_t v6 = v26;
    uint64_t v5 = v27;
  }

  else
  {
    __n128 v17 = swift_bridgeObjectRelease(v9);
    uint64_t v18 = 1LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56))(a2, v18, 1LL, v5, v17);
}

uint64_t sub_1003BEBC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003BEBEC( a1,  type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint,  (void (*)(void *))sub_10020D84C,  (uint64_t (*)(char *, uint64_t))sub_10021473C,  &qword_100652528,  a2);
}

uint64_t sub_1003BEBEC@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, void (*a3)(void *)@<X2>, uint64_t (*a4)(char *, uint64_t)@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v30 = a5;
  int64_t v36 = a4;
  uint64_t v11 = a2(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v30 - v13;
  uint64_t v35 = v6;
  char v15 = *v6;
  Hasher.init(_seed:)(v37);
  __n128 v16 = swift_bridgeObjectRetain(v15);
  uint64_t v34 = a3;
  ((void (*)(void *, __n128))a3)(v37, v16);
  Swift::Int v17 = Hasher._finalize()();
  uint64_t v18 = -1LL << v15[32];
  unint64_t v19 = v17 & ~v18;
  if (((*(void *)&v15[((v19 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56] >> v19) & 1) != 0)
  {
    uint64_t v32 = v11;
    uint64_t v33 = a6;
    uint64_t v20 = ~v18;
    uint64_t v31 = v12;
    uint64_t v21 = *(void *)(v12 + 72);
    while (1)
    {
      sub_1001A4B84(*((void *)v15 + 6) + v21 * v19, (uint64_t)v14, a2);
      char v22 = v36(v14, a1);
      sub_1001A4BC8((uint64_t)v14, a2);
      if ((v22 & 1) != 0) {
        break;
      }
      unint64_t v19 = (v19 + 1) & v20;
      if (((*(void *)&v15[((v19 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56] >> v19) & 1) == 0)
      {
        __n128 v23 = swift_bridgeObjectRelease(v15);
        uint64_t v24 = 1LL;
        a6 = v33;
        goto LABEL_10;
      }
    }

    swift_bridgeObjectRelease(v15);
    unint64_t v25 = v35;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v35);
    uint64_t v27 = *v25;
    v37[0] = *v25;
    *unint64_t v25 = (const char *)0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1003BBB74(a2, v30);
      uint64_t v27 = (const char *)v37[0];
    }

    a6 = v33;
    sub_1001A4B40(*((void *)v27 + 6) + v21 * v19, v33, a2);
    sub_1003BFCC4(v19, a2, v34);
    uint64_t v28 = *v25;
    *unint64_t v25 = (const char *)v37[0];
    __n128 v23 = swift_bridgeObjectRelease(v28);
    uint64_t v24 = 0LL;
LABEL_10:
    uint64_t v12 = v31;
    uint64_t v11 = v32;
  }

  else
  {
    __n128 v23 = swift_bridgeObjectRelease(v15);
    uint64_t v24 = 1LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v12 + 56))(a6, v24, 1LL, v11, v23);
}

uint64_t sub_1003BEDF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRelease(*v3);
  uint64_t v6 = __CocoaSet.count.getter(a1);
  uint64_t v7 = swift_unknownObjectRetain(a1);
  Swift::Int v8 = sub_1003B7290(v7, v6);
  unint64_t v19 = (const char *)v8;
  Swift::Int v9 = *(void *)(v8 + 40);
  swift_retain(v8);
  Swift::Int v10 = NSObject._rawHashValue(seed:)(v9);
  uint64_t v11 = -1LL << *(_BYTE *)(v8 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0)
  {
    type metadata accessor for SDAirDropSendConnection(0LL);
    id v13 = *(id *)(*(void *)(v8 + 48) + 8 * v12);
    char v14 = static NSObject.== infix(_:_:)(v13, a2);

    if ((v14 & 1) != 0)
    {
LABEL_6:
      swift_release(v8);
      Swift::Int v8 = *(void *)(*(void *)(v8 + 48) + 8 * v12);
      sub_1003BF594(v12);
      if ((static NSObject.== infix(_:_:)(a2, v8) & 1) != 0)
      {
        *uint64_t v3 = v19;
        return v8;
      }

      __break(1u);
    }

    else
    {
      uint64_t v15 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v15;
        if (((*(void *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
          break;
        }
        id v16 = *(id *)(*(void *)(v8 + 48) + 8 * v12);
        char v17 = static NSObject.== infix(_:_:)(v16, a2);

        if ((v17 & 1) != 0) {
          goto LABEL_6;
        }
      }
    }

    swift_release(v8);
    __break(1u);
  }

  uint64_t result = swift_release(v8);
  __break(1u);
  return result;
}

uint64_t sub_1003BEF80(int64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v33 = *(void *)(v3 - 8);
  uint64_t result = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v1;
  uint64_t v8 = *v1 + 56;
  uint64_t v9 = -1LL << *(_BYTE *)(*v1 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1LL << v10) & *(void *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v30 = v1;
    uint64_t v11 = ~v9;
    swift_retain(v7);
    uint64_t v12 = _HashTable.previousHole(before:)(a1, v8, v11);
    uint64_t v32 = v8;
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1LL << v10)) != 0)
    {
      unint64_t v13 = (v12 + 1) & v11;
      uint64_t v14 = *(void *)(v33 + 72);
      uint64_t v31 = *(void (**)(char *, unint64_t, uint64_t))(v33 + 16);
      do
      {
        int64_t v15 = v14 * v10;
        v31(v6, *(void *)(v7 + 48) + v14 * v10, v3);
        uint64_t v16 = *(void *)(v7 + 40);
        uint64_t v17 = sub_100183F14( &qword_100646108,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)(v16, v3, v17);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v3);
        unint64_t v19 = v18 & v11;
        if (a1 >= (uint64_t)v13)
        {
        }

        else if (v19 < v13 && a1 < (uint64_t)v19)
        {
          goto LABEL_6;
        }

        uint64_t v22 = *(void *)(v7 + 48);
        int64_t v23 = v14 * a1;
        unint64_t v24 = v22 + v14 * a1;
        uint64_t v25 = v22 + v15;
        if (v14 * a1 < v15 || v24 >= v25 + v14)
        {
          swift_arrayInitWithTakeFrontToBack(v24, v25, 1LL, v3);
        }

        else
        {
          a1 = v10;
          if (v23 == v15) {
            goto LABEL_6;
          }
          swift_arrayInitWithTakeBackToFront();
        }

        a1 = v10;
LABEL_6:
        unint64_t v10 = (v10 + 1) & v11;
      }

      while (((*(void *)(v32 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0);
    }

    *(void *)(v32 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a1) - 1;
    uint64_t result = swift_release(v7);
    uint64_t v1 = v30;
  }

  else
  {
    *(void *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a1) - 1;
  }

  uint64_t v26 = *v1;
  uint64_t v27 = *(void *)(*v1 + 16);
  BOOL v28 = __OFSUB__(v27, 1LL);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v26 + 16) = v29;
    ++*(_DWORD *)(v26 + 36);
  }

  return result;
}

unint64_t sub_1003BF1FC(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        unint64_t v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v21);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v21, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        unint64_t v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v9)
        {
          goto LABEL_11;
        }

        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(v3 + 48);
          uint64_t v16 = (_OWORD *)(v15 + 16 * v2);
          uint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v16 >= v17 + 1))
          {
            *uint64_t v16 = *v17;
            int64_t v2 = v6;
          }
        }

unint64_t sub_1003BF3C0(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        unint64_t v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        unint64_t v12 = v10[1];
        Hasher.init(_seed:)(v21);
        sub_10019BA8C(v11, v12);
        Data.hash(into:)(v21, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        sub_100189B20(v11, v12);
        unint64_t v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v9)
        {
          goto LABEL_11;
        }

        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(v3 + 48);
          uint64_t v16 = (_OWORD *)(v15 + 16 * v2);
          uint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v16 >= v17 + 1))
          {
            *uint64_t v16 = *v17;
            int64_t v2 = v6;
          }
        }

unint64_t sub_1003BF594(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(v3 + 40);
        id v11 = *(id *)(*(void *)(v3 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(v3 + 48);
            uint64_t v17 = (void *)(v16 + 8 * v2);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v17 >= v18 + 1))
            {
              *uint64_t v17 = *v18;
              int64_t v2 = v6;
            }
          }
        }

        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFSUB__(v19, 1LL);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

uint64_t sub_1003BF734(unint64_t a1)
{
  uint64_t v36 = type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint(0LL);
  __chkstk_darwin(v36);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for SDAirDropDiscoveredEndpoint.BonjourEndpoint(0LL);
  __chkstk_darwin(v5);
  uint64_t v34 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint(0LL);
  __chkstk_darwin(v7);
  uint64_t v33 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SDAirDropDiscoveredEndpoint(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  Swift::Int v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v41 = (uint64_t)&v29 - v14;
  uint64_t v30 = v1;
  uint64_t result = *v1;
  uint64_t v16 = *v1 + 56;
  uint64_t v17 = -1LL << *(_BYTE *)(result + 32);
  unint64_t v18 = (a1 + 1) & ~v17;
  if (((1LL << v18) & *(void *)(v16 + 8 * (v18 >> 6))) != 0)
  {
    uint64_t v19 = ~v17;
    uint64_t v39 = result;
    swift_retain(result);
    uint64_t v20 = _HashTable.previousHole(before:)(a1, v16, v19);
    uint64_t v35 = v16;
    if ((*(void *)(v16 + 8 * (v18 >> 6)) & (1LL << v18)) != 0)
    {
      uint64_t v37 = (v20 + 1) & v19;
      uint64_t v38 = v19;
      uint64_t v21 = *(void *)(v10 + 72);
      uint64_t v31 = v9;
      uint64_t v32 = v4;
      uint64_t v40 = v21;
      uint64_t v22 = v41;
      sub_1001A4B84(*(void *)(v39 + 48) + v21 * v18, v41, type metadata accessor for SDAirDropDiscoveredEndpoint);
      Hasher.init(_seed:)(v42);
      sub_1001A4B84(v22, (uint64_t)v13, type metadata accessor for SDAirDropDiscoveredEndpoint);
      int64_t v23 = (char *)&loc_1003BF96C + dword_1003BFCB4[swift_getEnumCaseMultiPayload(v13, v9)];
      __asm { BR              X9 }
    }

    uint64_t v24 = v39;
    *(void *)(v35 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a1) - 1;
    uint64_t result = swift_release(v24);
  }

  else
  {
    *(void *)(v16 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a1) - 1;
  }

  uint64_t v25 = *v30;
  uint64_t v26 = *(void *)(*v30 + 16);
  BOOL v27 = __OFSUB__(v26, 1LL);
  uint64_t v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
    JUMPOUT(0x1003BFCB4LL);
  }

  *(void *)(v25 + 16) = v28;
  ++*(_DWORD *)(v25 + 36);
  return result;
}

uint64_t sub_1003BFCC4( unint64_t a1, uint64_t (*a2)(void), void (*a3)(void *))
{
  uint64_t v32 = a3;
  uint64_t v31 = a2(0LL);
  uint64_t result = __chkstk_darwin(v31);
  uint64_t v9 = (char *)&v29 - v8;
  uint64_t v10 = *v3;
  uint64_t v11 = *v3 + 56;
  uint64_t v12 = -1LL << *(_BYTE *)(*v3 + 32);
  unint64_t v13 = (a1 + 1) & ~v12;
  if (((1LL << v13) & *(void *)(v11 + 8 * (v13 >> 6))) != 0)
  {
    uint64_t v29 = v7;
    uint64_t v30 = v3;
    uint64_t v14 = ~v12;
    swift_retain(v10);
    uint64_t v15 = _HashTable.previousHole(before:)(a1, v11, v14);
    uint64_t v33 = v11;
    if ((*(void *)(v11 + 8 * (v13 >> 6)) & (1LL << v13)) != 0)
    {
      unint64_t v16 = (v15 + 1) & v14;
      uint64_t v17 = *(void *)(v29 + 72);
      while (1)
      {
        int64_t v18 = v17 * v13;
        sub_1001A4B84(*(void *)(v10 + 48) + v17 * v13, (uint64_t)v9, a2);
        Hasher.init(_seed:)(v34);
        v32(v34);
        Swift::Int v19 = Hasher._finalize()();
        sub_1001A4BC8((uint64_t)v9, a2);
        unint64_t v20 = v19 & v14;
        if (v20 < v16) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v21 = *(void *)(v10 + 48);
        unint64_t v22 = v17 * a1;
        unint64_t v23 = v21 + v17 * a1;
        uint64_t v24 = v21 + v18;
        if ((uint64_t)(v17 * a1) < v18 || v23 >= v24 + v17)
        {
          swift_arrayInitWithTakeFrontToBack(v23, v24, 1LL, v31);
        }

        else
        {
          a1 = v13;
          if (v22 == v18) {
            goto LABEL_6;
          }
          swift_arrayInitWithTakeBackToFront(v23);
        }

        a1 = v13;
LABEL_6:
        unint64_t v13 = (v13 + 1) & v14;
        if (((*(void *)(v33 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
          goto LABEL_16;
        }
      }

      if (v20 < v16) {
        goto LABEL_6;
      }
LABEL_11:
      goto LABEL_12;
    }

_BYTE *sub_1003BFF14@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0LL;
LABEL_4:
    unint64_t v5 = 0xC000000000000000LL;
    goto LABEL_5;
  }

  if (v4 <= 14)
  {
    uint64_t result = (_BYTE *)sub_10033C91C(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }

  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (_BYTE *)sub_1003C07E0((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000LL;
  }

  else
  {
    uint64_t result = (_BYTE *)sub_1003C0858((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000LL;
  }

void (*sub_1003BFF88(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v7 = malloc(0x58uLL);
  *a1 = v7;
  v7[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  swift_bridgeObjectRetain(a3);
  void v7[9] = sub_1003C0504(v7);
  v7[10] = sub_1003C0150(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_1003C0018;
}

void sub_1003C0018(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  int64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 72LL);
  uint64_t v3 = *(void *)(*(void *)a1 + 64LL);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 80LL))(*(void *)a1 + 32LL, 0LL);
  swift_bridgeObjectRelease(v3);
  v2(v1, 0LL);
  free(v1);
}

void (*sub_1003C0068(void *a1, uint64_t a2, unint64_t a3))(uint64_t a1)
{
  uint64_t v7 = malloc(0x60uLL);
  *a1 = v7;
  v7[8] = a2;
  void v7[9] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  sub_10019BA8C(a2, a3);
  v7[10] = sub_1003C0524(v7);
  v7[11] = sub_1003C037C(v7 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_1003C00FC;
}

void sub_1003C00FC(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  int64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 80LL);
  uint64_t v4 = *(void *)(*(void *)a1 + 64LL);
  unint64_t v3 = *(void *)(*(void *)a1 + 72LL);
  (*(void (**)(uint64_t, void))(*(void *)a1 + 88LL))(*(void *)a1 + 32LL, 0LL);
  sub_100189B20(v4, v3);
  v2(v1, 0LL);
  free(v1);
}

void (*sub_1003C0150(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  unint64_t v5 = v4;
  uint64_t v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[1] = a3;
  v10[2] = v4;
  void *v10 = a2;
  uint64_t v11 = sub_100183098(&qword_10064D6E8);
  uint64_t v12 = malloc(*(void *)(*(void *)(v11 - 8) + 64LL));
  v10[3] = v12;
  uint64_t v13 = *v4;
  uint64_t v15 = sub_1003AD7E0( a2,  a3,  (void (*)(void *, uint64_t, uint64_t))&String.hash(into:),  (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1003B1508);
  *((_BYTE *)v10 + 40) = v14 & 1;
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }

  else
  {
    char v19 = v14;
    uint64_t v20 = *(void *)(v13 + 24);
    if (v20 >= v18 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v15;
      if ((v19 & 1) != 0)
      {
LABEL_8:
        uint64_t v21 = *(void *)(*v5 + 56LL);
        uint64_t v22 = type metadata accessor for RegistrationState(0LL);
        uint64_t v23 = *(void *)(v22 - 8);
        sub_1001A4B40(v21 + *(void *)(v23 + 72) * v15, (uint64_t)v12, type metadata accessor for RegistrationState);
        uint64_t v24 = 0LL;
LABEL_12:
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v12, v24, 1LL, v22);
        return sub_1003C032C;
      }

void sub_1003C032C(uint64_t **a1)
{
  uint64_t v1 = *a1;
  int64_t v2 = (void *)(*a1)[3];
  sub_1003C0550((uint64_t)v2, *((_BYTE *)*a1 + 40), (uint64_t *)(*a1)[2], (*a1)[4], **a1, (*a1)[1]);
  sub_100187100((uint64_t)v2, &qword_10064D6E8);
  free(v2);
  free(v1);
}

void (*sub_1003C037C(void *a1, uint64_t a2, uint64_t a3, char a4))(const char ***a1)
{
  unint64_t v5 = v4;
  uint64_t v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v5;
  v10[1] = a2;
  uint64_t v11 = *v5;
  uint64_t v13 = sub_1003AD7E0(a2, a3, (void (*)(void *, uint64_t, uint64_t))&Data.hash(into:), sub_1003B1AE0);
  *((_BYTE *)v10 + 40) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }

  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = *(void *)(*(void *)(*v5 + 56) + 8 * v13);
LABEL_12:
        void *v10 = v19;
        return sub_1003C04C8;
      }

void sub_1003C04C8(const char ***a1)
{
  uint64_t v1 = *a1;
  sub_1003C0718( *a1,  *((_BYTE *)*a1 + 40),  (uint64_t *)(*a1)[3],  (unint64_t)(*a1)[4],  (uint64_t)(*a1)[1],  (unint64_t)(*a1)[2]);
  swift_bridgeObjectRelease(*v1);
  free(v1);
}

uint64_t (*sub_1003C0504(void *a1))()
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000LL;
  return sub_1003C3234;
}

uint64_t (*sub_1003C0524(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000LL;
  return sub_1003C0544;
}

uint64_t sub_1003C0544(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

unint64_t sub_1003C0550( uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v10 = sub_100183098(&qword_10064D6E8);
  __chkstk_darwin(v10);
  char v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for RegistrationState(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  char v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v24 - v18;
  sub_1001915A4(a1, (uint64_t)v12, &qword_10064D6E8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13) == 1)
  {
    unint64_t result = sub_100187100((uint64_t)v12, &qword_10064D6E8);
    if ((a2 & 1) != 0)
    {
      swift_arrayDestroy(*(void *)(*a3 + 48) + 16 * a4, 1LL, &type metadata for String);
      return sub_1001CBD68(a4, *a3);
    }
  }

  else
  {
    sub_1001A4B40((uint64_t)v12, (uint64_t)v19, type metadata accessor for RegistrationState);
    char v21 = (void *)*a3;
    if ((a2 & 1) != 0)
    {
      return sub_1001A4B40( (uint64_t)v19,  v21[7] + *(void *)(v14 + 72) * a4,  type metadata accessor for RegistrationState);
    }

    else
    {
      sub_1001A4B40((uint64_t)v19, (uint64_t)v17, type metadata accessor for RegistrationState);
      unint64_t v22 = a4;
      uint64_t v23 = v25;
      sub_1003B4BF4(v22, v24, v25, (uint64_t)v17, v21, type metadata accessor for RegistrationState);
      return swift_bridgeObjectRetain(v23);
    }
  }

  return result;
}

void sub_1003C0718( const char **a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8 = *a1;
  if (!*a1)
  {
    if ((a2 & 1) != 0)
    {
      swift_arrayDestroy(*(void *)(*a3 + 48) + 16 * a4, 1LL, &type metadata for Data);
      sub_1001CC7E8(a4, *a3);
    }

    goto LABEL_8;
  }

  uint64_t v9 = (void *)*a3;
  if ((a2 & 1) != 0)
  {
    *(void *)(v9[7] + 8 * a4) = v8;
LABEL_8:
    swift_bridgeObjectRetain(v8);
    return;
  }

  v9[(a4 >> 6) + 8] |= 1LL << a4;
  uint64_t v10 = (uint64_t *)(v9[6] + 16 * a4);
  uint64_t *v10 = a5;
  v10[1] = a6;
  *(void *)(v9[7] + 8 * a4) = v8;
  uint64_t v11 = v9[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (!v12)
  {
    v9[2] = v13;
    sub_10019BA8C(a5, a6);
    goto LABEL_8;
  }

  __break(1u);
}

uint64_t sub_1003C07E0(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = type metadata accessor for Data.RangeReference(0LL);
    uint64_t result = swift_allocObject(v6, 32LL, 7LL);
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = v3;
  }

  return result;
}

uint64_t sub_1003C0858(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if ((v3 & 0x80000000) == 0) {
    return v3 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1003C08D8(const char *a1)
{
  uint64_t v9 = sub_100183098(&qword_1006522B8);
  unint64_t v10 = sub_1003C2388();
  v8[0] = a1;
  int64_t v2 = sub_10019A708(v8, v9);
  uint64_t v3 = (_BYTE *)(*v2 + 32LL);
  uint64_t v4 = &v3[*(void *)(*v2 + 16LL)];
  swift_bridgeObjectRetain(a1);
  sub_1003BFF14(v3, v4, &v7);
  uint64_t v5 = v7;
  sub_10018709C(v8);
  return v5;
}

uint64_t sub_1003C0970(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_10019BA8C(a1, a2);
  if (qword_100644288 != -1) {
    uint64_t v7 = swift_once(&qword_100644288, sub_1003A14E8);
  }
  LOBYTE(v27) = byte_1006698C0;
  __chkstk_darwin(v7);
  *(&v27 - 2) = (uint64_t)&v27;
  sub_10019BA8C(a1, a2);
  sub_1003A6BE0(1LL, 0LL, (uint64_t)sub_1003C320C, (uint64_t)(&v27 - 4), a1, a2);
  uint64_t v9 = v8;
  uint64_t result = sub_100189B20(a1, a2);
  if (*(void *)(v9 + 16))
  {
    uint64_t v11 = *(void *)(v9 + 32);
    unint64_t v12 = *(void *)(v9 + 40);
    uint64_t v27 = v11;
    unint64_t v28 = v12;
    uint64_t v13 = sub_10019BA8C(v11, v12);
    static String.Encoding.utf8.getter(v13);
    unint64_t v14 = sub_100284B00();
    uint64_t v15 = String.init<A>(bytes:encoding:)(&v27, v6, &type metadata for Data, v14);
    char v17 = v16;
    uint64_t result = sub_100189B20(v11, v12);
    if (!v17)
    {
      char v23 = 3;
      swift_bridgeObjectRelease((const char *)v9);
      goto LABEL_9;
    }

    if (*(void *)(v9 + 16) >= 2uLL)
    {
      uint64_t v18 = *(void *)(v9 + 48);
      unint64_t v19 = *(void *)(v9 + 56);
      sub_10019BA8C(v18, v19);
      swift_bridgeObjectRelease((const char *)v9);
      uint64_t v27 = v18;
      unint64_t v28 = v19;
      static String.Encoding.utf8.getter(v20);
      String.init<A>(bytes:encoding:)(&v27, v6, &type metadata for Data, v14);
      uint64_t v22 = v21;
      sub_100189B20(v18, v19);
      if (v22) {
        return v15;
      }
      char v23 = 4;
      swift_bridgeObjectRelease(v17);
LABEL_9:
      unint64_t v24 = sub_10038FFB4();
      uint64_t v25 = swift_allocError(&type metadata for SDAirDropHashError, v24, 0LL, 0LL);
      *char v26 = v23;
      swift_willThrow(v25);
      return v15;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_1003C0BB4(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }

  unint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!isUniquelyReferenced_nonNull_native || v9 > *(void *)(v4 + 24) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t v4 = sub_10018C744(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }

  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  unint64_t v14 = v4 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v15 = *(void *)(v13 + 72);
  uint64_t v16 = v15 * a1;
  unint64_t v17 = v14 + v15 * a1;
  uint64_t result = swift_arrayDestroy(v17, v7, v12);
  if (!v7) {
    goto LABEL_25;
  }
  uint64_t v19 = *(void *)(v4 + 16);
  uint64_t v20 = v19 - a2;
  if (__OFSUB__(v19, a2)) {
    goto LABEL_31;
  }
  if ((v20 & 0x8000000000000000LL) == 0)
  {
    unint64_t v21 = v14 + v15 * a2;
    if (v16 < v15 * a2 || v17 >= v21 + v20 * v15)
    {
      uint64_t result = swift_arrayInitWithTakeFrontToBack(v17, v21, v20, v12);
    }

    else if (v16 != v15 * a2)
    {
      uint64_t result = swift_arrayInitWithTakeBackToFront(v17);
    }

    uint64_t v23 = *(void *)(v4 + 16);
    BOOL v24 = __OFADD__(v23, v8);
    uint64_t v25 = v23 - v7;
    if (!v24)
    {
      *(void *)(v4 + 16) = v25;
LABEL_25:
      *int64_t v2 = v4;
      return result;
    }

    goto LABEL_32;
  }

void *sub_1003C0D5C(uint64_t a1, uint64_t a2)
{
  return sub_1003C0DAC(a1, a2, (uint64_t (*)(void))sub_10018C8AC, &qword_10064D800);
}

void *sub_1003C0D70(uint64_t a1, uint64_t a2)
{
  return sub_1003C0DAC(a1, a2, (uint64_t (*)(void))sub_10018C898, (uint64_t *)&unk_10064D7F0);
}

void *sub_1003C0D84(uint64_t a1, uint64_t a2)
{
  return sub_1003C0DAC(a1, a2, (uint64_t (*)(void))sub_10018C604, &qword_100645288);
}

void *sub_1003C0D98(uint64_t a1, uint64_t a2)
{
  return sub_1003C0DAC(a1, a2, (uint64_t (*)(void))sub_10018C5F0, &qword_100645278);
}

void *sub_1003C0DAC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t *a4)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v10 = a1 - a2;
  if (__OFSUB__(0LL, v9))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  if (__OFADD__(v7, v10))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v13 = sub_100183098(a4);
  uint64_t result = (void *)swift_arrayDestroy(v6 + 32 + 40 * a1, v9, v13);
  if (!v9) {
    goto LABEL_17;
  }
  uint64_t v15 = *(void *)(v6 + 16);
  BOOL v16 = __OFSUB__(v15, a2);
  uint64_t v17 = v15 - a2;
  if (v16) {
    goto LABEL_23;
  }
  if ((v17 & 0x8000000000000000LL) == 0)
  {
    uint64_t v18 = (const void *)(v6 + 32 + 40 * a2);
    uint64_t v19 = *(void *)(v6 + 16);
    BOOL v16 = __OFADD__(v19, v10);
    uint64_t v20 = v19 - v9;
    if (!v16)
    {
      *(void *)(v6 + 16) = v20;
LABEL_17:
      *unint64_t v4 = v6;
      return result;
    }

    goto LABEL_24;
  }

uint64_t sub_1003C0F34(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    uint64_t v5 = (uint64_t)*v3;
    if (!((unint64_t)*v3 >> 62))
    {
      uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v7 >= a2) {
        goto LABEL_4;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }

  if (v5 < 0) {
    uint64_t v21 = v5;
  }
  else {
    uint64_t v21 = v5 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain((const char *)v5);
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v21);
  swift_bridgeObjectRelease((const char *)v5);
  if (v7 < v2) {
    goto LABEL_34;
  }
LABEL_4:
  uint64_t v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  uint64_t v6 = v4 - v2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v5 = (uint64_t)*v3;
  if (!((unint64_t)*v3 >> 62))
  {
    uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v9 = v8 - v7;
    if (!__OFADD__(v8, v6)) {
      goto LABEL_8;
    }
LABEL_42:
    __break(1u);
LABEL_43:
    if (v5 < 0) {
      uint64_t v23 = v5;
    }
    else {
      uint64_t v23 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain((const char *)v5);
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease((const char *)v5);
    goto LABEL_15;
  }

BOOL _s16DaemoniOSLibrary21SDAirDropHashStoreCDBC7isEmptySbvg_0()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)v55 - v6;
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)v55 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v55 - v11;
  id v13 = sub_100115468();
  if (!v13) {
    __break(1u);
  }
  unint64_t v14 = v13;
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  uint64_t v17 = v16;

  URL.init(fileURLWithPath:)(v15, v17);
  __n128 v18 = swift_bridgeObjectRelease(v17);
  URL.appendingPathComponent(_:)(0x48706F7244726941LL, 0xED00004244687361LL, v18);
  uint64_t v19 = *(double (**)(char *, uint64_t))(v1 + 8);
  v20.n128_f64[0] = v19(v7, v0);
  URL.appendingPathComponent(_:)(0x48706F7244726941LL, 0xED00004244687361LL, v20);
  URL.appendingPathExtension(_:)(0x5F706F7264726961LL, 0xEC00000034766264LL);
  v19(v4, v0);
  v21.n128_f64[0] = v19(v12, v0);
  URL.path.getter(v21);
  uint64_t v23 = v22;
  v19(v10, v0);
  uint64_t v24 = (void *)objc_opt_self(&OBJC_CLASS___NSFileManager);
  id v25 = [v24 defaultManager];
  NSString v26 = String._bridgeToObjectiveC()();
  LODWORD(v19) = [v25 fileExistsAtPath:v26];

  if ((_DWORD)v19)
  {
    id v27 = [v24 defaultManager];
    NSString v28 = String._bridgeToObjectiveC()();
    *(void *)&double v29 = swift_bridgeObjectRelease(v23).n128_u64[0];
    *(void *)&__int128 v56 = 0LL;
    id v30 = objc_msgSend(v27, "attributesOfItemAtPath:error:", v28, &v56, v29);

    uint64_t v31 = (void *)v56;
    if (v30)
    {
      type metadata accessor for FileAttributeKey(0LL);
      uint64_t v33 = v32;
      uint64_t v34 = sub_100183F14( &qword_100644D80,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1004CCBC8);
      uint64_t v35 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v30,  v33,  (char *)&type metadata for Any + 8,  v34);
      id v36 = v31;

      if (*(void *)(v35 + 16))
      {
        uint64_t v37 = NSFileSize;
        unint64_t v38 = sub_1003AD760((uint64_t)v37);
        if ((v39 & 1) != 0)
        {
          sub_100187058(*(void *)(v35 + 56) + 32 * v38, (uint64_t)&v56);
        }

        else
        {
          __int128 v56 = 0u;
          __int128 v57 = 0u;
        }
      }

      else
      {
        __int128 v56 = 0u;
        __int128 v57 = 0u;
      }

      swift_bridgeObjectRelease((const char *)v35);
      if (*((void *)&v57 + 1))
      {
        if ((swift_dynamicCast(v55, &v56, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) & 1) != 0)
        {
          uint64_t v43 = v55[0];
          if (qword_100644280 != -1) {
            swift_once(&qword_100644280, sub_1003A144C);
          }
          uint64_t v44 = type metadata accessor for Logger(0LL);
          uint64_t v45 = sub_100186DE4(v44, (uint64_t)qword_1006522A0);
          uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
          os_log_type_t v47 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v46, v47))
          {
            uint64_t v48 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            *(_DWORD *)uint64_t v48 = 134217984;
            *(void *)&__int128 v56 = v43;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, (char *)&v56 + 8, v48 + 4, v48 + 12);
            _os_log_impl((void *)&_mh_execute_header, v46, v47, "HashDB size: %ld", v48, 0xCu);
            swift_slowDealloc(v48, -1LL, -1LL);
          }

          return (v43 & 0xFFFFFFFFFFFFF7FFLL) == 0;
        }
      }

      else
      {
        sub_100187100((uint64_t)&v56, (uint64_t *)&unk_100646550);
      }
    }

    else
    {
      id v40 = (id)v56;
      uint64_t v41 = _convertNSErrorToError(_:)(v31);

      swift_willThrow(v42);
      swift_errorRelease(v41);
    }
  }

  else
  {
    swift_bridgeObjectRelease(v23);
  }

  if (qword_100644280 != -1) {
    swift_once(&qword_100644280, sub_1003A144C);
  }
  uint64_t v50 = type metadata accessor for Logger(0LL);
  uint64_t v51 = sub_100186DE4(v50, (uint64_t)qword_1006522A0);
  uint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
  os_log_type_t v53 = static os_log_type_t.error.getter(v52);
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v54 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v54 = 0;
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "Unable to verify DB size", v54, 2u);
    swift_slowDealloc(v54, -1LL, -1LL);
  }

  return 1LL;
}

uint64_t sub_1003C1768()
{
  uint64_t v50 = type metadata accessor for URL(0LL);
  uint64_t v48 = *(void *)(v50 - 8);
  uint64_t v0 = __chkstk_darwin(v50);
  os_log_type_t v47 = (char *)&v42 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v46 = (char *)&v42 - v3;
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v45 = (char *)&v42 - v5;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v43 = (char *)&v42 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v44 = (char *)&v42 - v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v42 - v10;
  unint64_t v12 = 0LL;
  id v13 = (const char **)&unk_1005D18D8;
  uint64_t v14 = v50;
  uint64_t v15 = v45;
  do
  {
    if (v12 >= 3)
    {
      __break(1u);
LABEL_10:
      __break(1u);
    }

    unint64_t v49 = v12;
    uint64_t v18 = (uint64_t)*(v13 - 1);
    uint64_t v17 = *v13;
    swift_bridgeObjectRetain(*v13);
    id v19 = sub_100115468();
    if (!v19) {
      goto LABEL_10;
    }
    __n128 v20 = v19;
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    uint64_t v23 = v22;

    uint64_t v24 = v46;
    URL.init(fileURLWithPath:)(v21, v23);
    __n128 v25 = swift_bridgeObjectRelease(v23);
    NSString v26 = v43;
    URL.appendingPathComponent(_:)(0x48706F7244726941LL, 0xED00004244687361LL, v25);
    id v27 = *(double (**)(char *, uint64_t))(v48 + 8);
    v28.n128_f64[0] = v27(v24, v14);
    double v29 = v47;
    URL.appendingPathComponent(_:)(0x48706F7244726941LL, 0xED00004244687361LL, v28);
    URL.appendingPathExtension(_:)(0x5F706F7264726961LL, 0xEC00000034766264LL);
    v27(v29, v14);
    v30.n128_f64[0] = v27(v15, v14);
    uint64_t v31 = v44;
    URL.appendingPathComponent(_:)(0x48706F7244726941LL, 0xED00004244687361LL, v30);
    v27(v26, v14);
    URL.appendingPathExtension(_:)(v18, v17);
    __n128 v32 = swift_bridgeObjectRelease(v17);
    ((void (*)(char *, uint64_t, __n128))v27)(v31, v14, v32);
    id v33 = [(id)objc_opt_self(NSFileManager) defaultManager];
    URL._bridgeToObjectiveC()(v34);
    id v36 = v35;
    id v51 = 0LL;
    LODWORD(v31) = [v33 removeItemAtURL:v35 error:&v51];

    id v37 = v51;
    if ((_DWORD)v31)
    {
      id v16 = v51;
    }

    else
    {
      id v38 = v51;
      uint64_t v39 = _convertNSErrorToError(_:)(v37);

      swift_willThrow(v40);
      swift_errorRelease(v39);
    }

    unint64_t v12 = v49 + 1;
    v27(v11, v50);
    v13 += 2;
  }

  while (v12 != 3);
  return swift_arrayDestroy(&qword_1005D18D0, 3LL, &type metadata for String);
}

void sub_1003C1B08()
{
  id v0 = [(id)objc_opt_self(NSFileManager) defaultManager];
  NSString v1 = String._bridgeToObjectiveC()();
  unsigned __int8 v2 = [v0 fileExistsAtPath:v1];

  if ((v2 & 1) == 0)
  {
    id v3 = [objc_allocWithZone(CUKeyValueStoreWriter) init];
    NSString v4 = String._bridgeToObjectiveC()();
    id v11 = 0LL;
    unsigned int v5 = [v3 startAtPath:v4 error:&v11];

    id v6 = v11;
    if (v5
      && (id v11 = 0LL,
          id v7 = v6,
          unsigned int v8 = [v3 finishAndReturnError:&v11],
          id v6 = v11,
          v8))
    {
      id v9 = v11;
    }

    else
    {
      id v10 = v6;
      _convertNSErrorToError(_:)(v6);

      swift_willThrow();
    }
  }

void sub_1003C1C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 16LL);
  if (v4)
  {
    uint64_t v7 = 0LL;
    unint64_t v8 = 0LL;
    while (1)
    {
      uint64_t v9 = v3[v7 + 4];
      uint64_t v10 = v3[v7 + 5];
      BOOL v11 = v9 == a2 && v10 == a3;
      if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, a2, a3, 0LL) & 1) != 0) {
        break;
      }
      ++v8;
      v7 += 9LL;
      if (v4 == v8) {
        return;
      }
    }

    unint64_t v12 = v8 + 1;
    if (__OFADD__(v8, 1LL)) {
      goto LABEL_32;
    }
    if (v12 != v4)
    {
      for (uint64_t i = v7 * 8 + 171; ; i += 72LL)
      {
        unint64_t v15 = v3[2];
        if (v12 >= v15) {
          break;
        }
        id v16 = (char *)v3 + i;
        uint64_t v17 = *(void *)((char *)v3 + i - 67);
        uint64_t v18 = *(void *)((char *)v3 + i - 59);
        BOOL v19 = v17 == a2 && v18 == a3;
        if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, a2, a3, 0LL) & 1) == 0)
        {
          if (v12 != v8)
          {
            if (v8 >= v15) {
              goto LABEL_30;
            }
            uint64_t v20 = 9 * v8;
            uint64_t v21 = (uint64_t)&v3[9 * v8 + 4];
            uint64_t v45 = *(void *)v21;
            uint64_t v22 = *(const char **)(v21 + 24);
            uint64_t v43 = *(void *)(v21 + 16);
            uint64_t v41 = *(void *)(v21 + 40);
            uint64_t v42 = *(void *)(v21 + 32);
            uint64_t v39 = *(void *)(v21 + 56);
            uint64_t v40 = *(void *)(v21 + 48);
            int v37 = *(unsigned __int16 *)(v21 + 64);
            int v38 = *(unsigned __int8 *)(v21 + 66);
            char v46 = *(_BYTE *)(v21 + 67);
            uint64_t v55 = *(void *)(v16 - 67);
            uint64_t v23 = *(const char **)(v16 - 59);
            uint64_t v24 = *(const char **)((char *)v3 + i - 43);
            uint64_t v52 = *(void *)((char *)v3 + i - 35);
            uint64_t v53 = *(void *)((char *)v3 + i - 51);
            uint64_t v50 = *(void *)((char *)v3 + i - 19);
            uint64_t v51 = *(void *)((char *)v3 + i - 27);
            uint64_t v49 = *(void *)((char *)v3 + i - 11);
            int v47 = *(unsigned __int16 *)((char *)v3 + i - 3);
            int v48 = *((unsigned __int8 *)v3 + i - 1);
            char v54 = *((_BYTE *)v3 + i);
            uint64_t v44 = *(const char **)(v21 + 8);
            *(void *)&double v25 = swift_bridgeObjectRetain(v44).n128_u64[0];
            *(void *)&double v26 = swift_bridgeObjectRetain(v22, v25).n128_u64[0];
            *(void *)&double v27 = swift_bridgeObjectRetain(v23, v26).n128_u64[0];
            swift_bridgeObjectRetain(v24, v27);
            if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0) {
              id v3 = sub_1001CCFC8((uint64_t)v3);
            }
            __n128 v28 = &v3[v20];
            double v29 = (const char *)v3[v20 + 5];
            __n128 v30 = (const char *)v28[7];
            v28[4] = v55;
            void v28[5] = v23;
            v28[6] = v53;
            v28[7] = v24;
            v28[8] = v52;
            void v28[9] = v51;
            v28[10] = v50;
            v28[11] = v49;
            *((_BYTE *)v28 + 98) = (v47 | (v48 << 16)) >> 16;
            *((_WORD *)v28 + 48) = v47;
            *((_BYTE *)v28 + 99) = v54;
            *(void *)&double v31 = swift_bridgeObjectRelease(v30).n128_u64[0];
            *(void *)&double v32 = swift_bridgeObjectRelease(v29, v31).n128_u64[0];
            if (v12 >= v3[2]) {
              goto LABEL_31;
            }
            id v33 = (char *)v3 + i;
            uint64_t v34 = *(const char **)((char *)v3 + i - 59);
            uint64_t v35 = *(const char **)((char *)v3 + i - 43);
            *(void *)(v33 - 67) = v45;
            *(void *)(v33 - 59) = v44;
            *(void *)(v33 - 51) = v43;
            *(void *)(v33 - 43) = v22;
            *(void *)(v33 - 35) = v42;
            *(void *)(v33 - 27) = v41;
            *(void *)(v33 - 19) = v40;
            *(void *)(v33 - 11) = v39;
            *(v33 - 1) = (v37 | (v38 << 16)) >> 16;
            *(_WORD *)(v33 - 3) = v37;
            _BYTE *v33 = v46;
            *(void *)&double v36 = swift_bridgeObjectRelease(v35, v32).n128_u64[0];
            swift_bridgeObjectRelease(v34, v36);
            *(void *)a1 = v3;
          }

          if (__OFADD__(v8++, 1LL)) {
            goto LABEL_29;
          }
        }

        if (++v12 == v3[2]) {
          return;
        }
      }

      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
    }
  }

void *sub_1003C1F78(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v4 = (void *)*v2;
  int64_t v5 = *(void *)(*v2 + 16LL);
  if (v5 < a2)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_10018CB48(isUniquelyReferenced_nonNull_native, v11, 1, (uint64_t)v4);
  }

  uint64_t result = (void *)swift_arrayDestroy(&v4[9 * a1 + 4], v7, &type metadata for SDAirDropHashStoreEntry);
  if (!v7) {
    goto LABEL_23;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_29;
  }
  if ((v15 & 0x8000000000000000LL) == 0)
  {
    id v16 = (char *)&v4[9 * a2 + 4];
    size_t v17 = 72 * v15;
    if (72 * a1 < 72 * a2 || (&v4[9 * a1 + 4] < (void *)&v16[v17] ? (BOOL v18 = a1 == a2) : (BOOL v18 = 0), !v18)) {
      uint64_t result = memmove(&v4[9 * a1 + 4], v16, v17);
    }
    uint64_t v19 = v4[2];
    BOOL v14 = __OFADD__(v19, v8);
    uint64_t v20 = v19 - v7;
    if (!v14)
    {
      v4[2] = v20;
LABEL_23:
      *unsigned __int8 v2 = v4;
      return result;
    }

    goto LABEL_30;
  }

uint64_t sub_1003C2100()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1003C2124()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1003C2148()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_1003C2184(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1003C2190(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1003C21A0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void *sub_1003C21A8( uint64_t a1, const char *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v15 = (char *)sub_1003A737C(a1, (unint64_t)a2);
  swift_bridgeObjectRelease(a2);
  if (qword_100644288 != -1) {
    swift_once(&qword_100644288, sub_1003A14E8);
  }
  char v16 = byte_1006698C0;
  uint64_t v17 = swift_retain(v15);
  BOOL v18 = v15;
  if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0) {
    BOOL v18 = sub_10018C0B4(0LL, *((void *)v15 + 2) + 1LL, 1, v15);
  }
  unint64_t v20 = *((void *)v18 + 2);
  unint64_t v19 = *((void *)v18 + 3);
  if (v20 >= v19 >> 1) {
    BOOL v18 = sub_10018C0B4((char *)(v19 > 1), v20 + 1, 1, v18);
  }
  *((void *)v18 + 2) = v20 + 1;
  v18[v20 + 32] = v16;
  swift_release(v15);
  swift_bridgeObjectRetain(a4);
  char v21 = sub_1003A737C(a3, (unint64_t)a4);
  swift_bridgeObjectRelease(a4);
  sub_10028A868((uint64_t)v21);
  uint64_t v22 = sub_1002DC36C(a5, a6, a7, a8);
  if ((a9 & 0x1000000) == 0)
  {
    uint64_t v23 = sub_100183098(&qword_1006451F0);
    uint64_t v24 = swift_allocObject(v23, 33LL, 7LL);
    *(_OWORD *)(v24 + 16) = xmmword_1004CDCA0;
    *(_BYTE *)(v24 + 32) = BYTE2(a9);
    swift_bridgeObjectRetain(v18);
    sub_10028A868(v25);
    sub_1003A0228(a9, 2uLL, v26, v27);
  }

  return v22;
}

unint64_t sub_1003C2388()
{
  unint64_t result = qword_1006522C0;
  if (!qword_1006522C0)
  {
    uint64_t v1 = sub_100183124(&qword_1006522B8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1006522C0);
  }

  return result;
}

void sub_1003C23D8(uint64_t a1, _BYTE *a2)
{
}

uint64_t sub_1003C23E4()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(void *)(v0 + 40));
  }

  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1003C2418(uint64_t a1, uint64_t a2)
{
  return sub_1003C2498(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void))sub_1003A5964);
}

uint64_t sub_1003C2424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }

  return result;
}

uint64_t sub_1003C2458()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1003C248C(uint64_t a1, uint64_t a2)
{
  return sub_1003C2498(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void))sub_1003A60A4);
}

uint64_t sub_1003C2498( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void))
{
  return a3( a1,  a2,  *(void *)(v3 + 16),  *(unsigned __int16 *)(v3 + 24) | (*(unsigned __int8 *)(v3 + 26) << 16),  *(void *)(v3 + 32),  *(void *)(v3 + 40));
}

uint64_t sub_1003C24B4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1003C24DC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1003C2510(uint64_t a1, uint64_t a2)
{
}

__n128 sub_1003C251C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  v36._uint64_t countAndFlagsBits = a4;
  v36._object = a5;
  v35._uint64_t countAndFlagsBits = a2;
  v35._object = a3;
  uint64_t v7 = type metadata accessor for String.Encoding(0LL);
  uint64_t v39 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  int v37 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100644280 != -1) {
    swift_once(&qword_100644280, sub_1003A144C);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v13, (uint64_t)qword_1006522A0);
  BOOL v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v38 = a1;
  uint64_t v15 = v14(v12, a1, v9);
  char v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc(12LL, -1LL);
    uint64_t v34 = v7;
    unint64_t v19 = (uint8_t *)v18;
    uint64_t v20 = swift_slowAlloc(32LL, -1LL);
    v40[0] = v20;
    v33[1] = v5;
    *(_DWORD *)unint64_t v19 = 136315138;
    v33[0] = v19 + 4;
    uint64_t v21 = sub_100183F14( (unint64_t *)&qword_100645408,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter(v9, v21);
    uint64_t v24 = (const char *)v23;
    uint64_t v41 = sub_10018CDB4(v22, v23, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v33[0], v19 + 12);
    __n128 v25 = swift_bridgeObjectRelease(v24);
    (*(void (**)(char *, uint64_t, __n128))(v10 + 8))(v12, v9, v25);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Writing hash database to: %s", v19, 0xCu);
    swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1LL, -1LL);
    double v26 = v19;
    uint64_t v7 = v34;
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  v40[0] = 0LL;
  v40[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(32LL);
  swift_bridgeObjectRelease((const char *)v40[1]);
  strcpy((char *)v40, "Long hashes:\n");
  HIWORD(v40[1]) = -4864;
  String.append(_:)(v35);
  v27._uint64_t countAndFlagsBits = 0x682074726F68530ALL;
  v27._object = (void *)0xEF0A3A7365687361LL;
  String.append(_:)(v27);
  String.append(_:)(v36);
  __n128 v28 = (const char *)v40[1];
  double v29 = v37;
  static String.Encoding.utf8.getter(v30);
  unint64_t v31 = sub_1001CCE8C();
  StringProtocol.write(to:atomically:encoding:)(v38, 1LL, v29, &type metadata for String, v31);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v29, v7);
  return swift_bridgeObjectRelease(v28);
}

uint64_t type metadata accessor for SDAirDropHashStoreCDB()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary21SDAirDropHashStoreCDB);
}

void sub_1003C2878(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_1003C28D4(char a1)
{
  if (!BYTE6(v4))
  {
    __break(1u);
    JUMPOUT(0x1003C298CLL);
  }

  uint64_t v6 = ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))Data._Representation.subscript.getter)( 1LL,  BYTE6(v4),  v5,  v4);
  unint64_t v8 = v7;
  uint64_t v9 = sub_1003C0970(v6, v7);
  if (v3) {
    return sub_100189B20(v6, v8);
  }
  uint64_t v14 = v9;
  uint64_t v15 = v10;
  uint64_t v16 = v11;
  uint64_t v17 = v12;
  uint64_t result = sub_100189B20(v6, v8);
  *(_WORD *)uint64_t v1 = v2;
  *(_BYTE *)(v1 + 2) = a1;
  *(void *)(v1 + 8) = v14;
  *(void *)(v1 + 16) = v15;
  *(void *)(v1 + 24) = v16;
  *(void *)(v1 + 32) = v17;
  return result;
}

void sub_1003C299C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void sub_1003C29EC( int a1@<W8>, uint64_t a2, Swift::String a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (BYTE6(v21) != 32LL)
  {
    if (a1)
    {
      if (a1 == 1)
      {
        LODWORD(v38) = HIDWORD(v24) - v24;
        if (!__OFSUB__(HIDWORD(v24), (_DWORD)v24))
        {
          uint64_t v38 = (int)v38;
LABEL_11:
          if (v38 != 2)
          {
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }

          if (!a1)
          {
            uint64_t v42 = BYTE6(v21);
            goto LABEL_19;
          }

          if (a1 != 1)
          {
            uint64_t v44 = *(void *)(v24 + 16);
            uint64_t v43 = *(void *)(v24 + 24);
            uint64_t v42 = v43 - v44;
            if (!__OFSUB__(v43, v44)) {
              goto LABEL_18;
            }
            goto LABEL_53;
          }

          if (!__OFSUB__(HIDWORD(v24), (_DWORD)v24))
          {
            uint64_t v42 = HIDWORD(v24) - (int)v24;
LABEL_18:
            sub_10019BA8C(v24, v21);
LABEL_19:
            if (v42 == 2)
            {
              sub_1002DD198(v24, v21);
              if (!v23)
              {
                sub_100189B20(v24, v21);
                sub_1003C2878(v22, v20);
                object = (char *)v77._object;
                Class isa = Data._bridgeToObjectiveC()().super.isa;
                id v46 = (id)SFHexStringForData(isa);

                if (v46)
                {
                  uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
                  uint64_t v49 = v48;
                }

                else
                {
                  uint64_t v47 = 0LL;
                  uint64_t v49 = 0LL;
                }

                uint64_t v57 = sub_100183098(&qword_1006451F0);
                uint64_t v58 = swift_allocObject(v57, 33LL, 7LL);
                *(_OWORD *)(v58 + 16) = xmmword_1004CDCA0;
                *(_BYTE *)(v58 + 32) = v76;
                uint64_t v59 = sub_1003C08D8((const char *)v58);
                unint64_t v61 = v60;
                swift_bridgeObjectRelease((const char *)v58);
                Class v62 = Data._bridgeToObjectiveC()().super.isa;
                sub_100189B20(v59, v61);
                id v63 = (id)SFHexStringForData(v62);

                if (v63)
                {
                  uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
                  __int128 v66 = v65;
                }

                else
                {
                  uint64_t v64 = 0LL;
                  __int128 v66 = 0LL;
                }

                _StringGuts.grow(_:)(28LL);
                swift_bridgeObjectRelease((const char *)0xE000000000000000LL);
                if (v49) {
                  uint64_t v67 = v47;
                }
                else {
                  uint64_t v67 = 0x3E3F3F3F3CLL;
                }
                if (v49) {
                  uint64_t v68 = v49;
                }
                else {
                  uint64_t v68 = (const char *)0xE500000000000000LL;
                }
                uint64_t v69 = v68;
                String.append(_:)(*(Swift::String *)&v67);
                swift_bridgeObjectRelease(v68);
                v70._uint64_t countAndFlagsBits = 0x3A626D6C202CLL;
                v70._object = (void *)0xE600000000000000LL;
                String.append(_:)(v70);
                if (v66) {
                  uint64_t v71 = v64;
                }
                else {
                  uint64_t v71 = 0x3E3F3F3F3CLL;
                }
                if (!v66) {
                  __int128 v66 = (const char *)0xE500000000000000LL;
                }
                Swift::UInt64 v72 = v66;
                String.append(_:)(*(Swift::String *)&v71);
                swift_bridgeObjectRelease(v66);
                v73._uint64_t countAndFlagsBits = 0x3A646963202CLL;
                v73._object = (void *)0xE600000000000000LL;
                String.append(_:)(v73);
                swift_bridgeObjectRetain((const char *)v77._object);
                String.append(_:)(v77);
                swift_bridgeObjectRelease((const char *)v77._object);
                v74._uint64_t countAndFlagsBits = 0x3A702F65202CLL;
                v74._object = (void *)0xE600000000000000LL;
                String.append(_:)(v74);
                double v32 = v79;
                swift_bridgeObjectRetain(v79);
                uint64_t v56 = v78;
                goto LABEL_49;
              }

uint64_t sub_1003C2EA4(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    uint64_t v5 = (uint64_t)*v3;
    if (!((unint64_t)*v3 >> 62))
    {
      uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v7 >= a2) {
        goto LABEL_4;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }

  if (v5 < 0) {
    uint64_t v21 = v5;
  }
  else {
    uint64_t v21 = v5 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain((const char *)v5);
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v21);
  swift_bridgeObjectRelease((const char *)v5);
  if (v7 < v2) {
    goto LABEL_34;
  }
LABEL_4:
  uint64_t v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  uint64_t v6 = v4 - v2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v5 = (uint64_t)*v3;
  if (!((unint64_t)*v3 >> 62))
  {
    uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v9 = v8 - v7;
    if (!__OFADD__(v8, v6)) {
      goto LABEL_8;
    }
LABEL_42:
    __break(1u);
LABEL_43:
    if (v5 < 0) {
      uint64_t v23 = v5;
    }
    else {
      uint64_t v23 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain((const char *)v5);
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease((const char *)v5);
    goto LABEL_15;
  }

uint64_t sub_1003C3180(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100183098(&qword_10064B7E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003C31C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

BOOL sub_1003C320C(unsigned __int8 *a1)
{
  return *a1 == **(unsigned __int8 **)(v1 + 16);
}

uint64_t sub_1003C3224()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1003C3260()
{
  id v1 = [*v0 serviceIdentifier];
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

uint64_t sub_1003C32C4(uint64_t a1)
{
  uint64_t v4 = v2 + 2;
  uint64_t v5 = *v1;
  v2[7] = v2 + 15;
  v2[2] = v2;
  v2[3] = sub_1003C3368;
  uint64_t v6 = swift_continuation_init(v2 + 2, 1LL);
  v2[10] = _NSConcreteStackBlock;
  uint64_t v7 = v2 + 10;
  v7[1] = 0x40000000LL;
  v7[2] = sub_1003C33D8;
  v7[3] = &unk_1005DEA38;
  v7[4] = v6;
  [v5 provisionPseudonymWithProperties:a1 completion:v7];
  return swift_continuation_await(v4);
}

uint64_t sub_1003C3368()
{
  uint64_t v1 = *v0;
  if (!*(void *)(v1 + 48)) {
    return (*(uint64_t (**)(void))(v1 + 8))(*(void *)(v1 + 120));
  }
  swift_willThrow();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003C33D8(uint64_t result, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (a3)
  {
    uint64_t v5 = sub_100183098(&qword_100645710);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *uint64_t v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else if (a2)
  {
    **(void **)(*(void *)(v3 + 64) + 40LL) = a2;
    id v9 = a2;
    return swift_continuation_throwingResume(v3);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1003C3464(uint64_t a1)
{
  uint64_t v4 = v2 + 2;
  uint64_t v5 = *v1;
  v2[7] = v2 + 15;
  v2[2] = v2;
  v2[3] = sub_1003C3508;
  uint64_t v6 = swift_continuation_init(v2 + 2, 1LL);
  v2[10] = _NSConcreteStackBlock;
  uint64_t v7 = v2 + 10;
  v7[1] = 0x40000000LL;
  v7[2] = sub_1003C356C;
  v7[3] = &unk_1005DEA20;
  v7[4] = v6;
  [v5 revokePseudonym:a1 completion:v7];
  return swift_continuation_await(v4);
}

uint64_t sub_1003C3508()
{
  uint64_t v1 = *v0;
  if (*(void *)(v1 + 48))
  {
    swift_willThrow();
    uint64_t v2 = *(uint64_t (**)(uint64_t))(v1 + 8);
    uint64_t v3 = 0LL;
  }

  else
  {
    uint64_t v3 = *(unsigned __int8 *)(v1 + 120);
    uint64_t v2 = *(uint64_t (**)(uint64_t))(v1 + 8);
  }

  return v2(v3);
}

uint64_t sub_1003C356C(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    uint64_t v5 = sub_100183098(&qword_100645710);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *uint64_t v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else
  {
    **(_BYTE **)(*(void *)(v3 + 64) + 40LL) = a2;
    return swift_continuation_throwingResume(v3);
  }

id sub_1003C35EC(double a1)
{
  uint64_t v3 = *v1;
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 pseudonymPropertiesWithFeatureID:v4 expiryDurationInSeconds:a1];

  return v5;
}

uint64_t sub_1003C3658(uint64_t a1)
{
  return a1;
}

uint64_t sub_1003C3694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003C36A0);
}

uint64_t sub_1003C36A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003C36B0);
}

uint64_t _s14descr1005DEB71C15ExchangeRequestVMa(uint64_t a1)
{
  return sub_1001A4AD0(a1, (uint64_t *)&unk_1006526B8, (uint64_t)&_s14descr1005DEB71C15ExchangeRequestVMn);
}

void sub_1003C36CC(uint64_t a1)
{
  if (!qword_1006526C8)
  {
    uint64_t v2 = type metadata accessor for SFAirDrop.ContactInfo.Handle(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1006526C8);
    }
  }

uint64_t *sub_1003C3720(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v25 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = (const char *)v11[1];
    void *v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)a1 + v9);
    uint64_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = (const char *)v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = a3[7];
    uint64_t v17 = (char *)a1 + v16;
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0LL);
    uint64_t v20 = *(void *)(v19 - 8);
    uint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v20 + 48);
    *(void *)&double v22 = swift_bridgeObjectRetain(v12).n128_u64[0];
    __n128 v23 = swift_bridgeObjectRetain(v15, v22);
    if (v21(v18, 1LL, v19, v23))
    {
      uint64_t v24 = sub_100183098(&qword_100651E70);
      memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0LL, 1LL, v19);
    }

    uint64_t v26 = a3[8];
    uint64_t v27 = (char *)a1 + v26;
    __n128 v28 = (char *)a2 + v26;
    unint64_t v29 = *((void *)v28 + 1);
    if (v29 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
    }

    else
    {
      uint64_t v30 = *(void *)v28;
      sub_10019BA8C(*(void *)v28, *((void *)v28 + 1));
      *(void *)uint64_t v27 = v30;
      *((void *)v27 + 1) = v29;
    }

    uint64_t v31 = a3[9];
    double v32 = (char *)a1 + v31;
    Class v33 = (char *)a2 + v31;
    if (*(uint64_t *)((char *)a2 + v31 + 72))
    {
      id v34 = (const char *)*((void *)v33 + 1);
      *(void *)double v32 = *(void *)v33;
      *((void *)v32 + 1) = v34;
      uint64_t v35 = v33 + 16;
      unint64_t v36 = *((void *)v33 + 3);
      swift_bridgeObjectRetain(v34);
      if (v36 >> 60 == 15)
      {
        *((_OWORD *)v32 + 1) = *v35;
      }

      else
      {
        uint64_t v39 = *(void *)v35;
        sub_10019BA8C(v39, v36);
        *((void *)v32 + 2) = v39;
        *((void *)v32 + 3) = v36;
      }

      uint64_t v40 = *((void *)v33 + 4);
      unint64_t v41 = *((void *)v33 + 5);
      sub_10019BA8C(v40, v41);
      *((void *)v32 + 4) = v40;
      *((void *)v32 + 5) = v41;
      uint64_t v42 = *((void *)v33 + 6);
      unint64_t v43 = *((void *)v33 + 7);
      sub_10019BA8C(v42, v43);
      *((void *)v32 + 6) = v42;
      *((void *)v32 + 7) = v43;
      uint64_t v44 = (const char *)*((void *)v33 + 9);
      *((void *)v32 + 8) = *((void *)v33 + 8);
      *((void *)v32 + 9) = v44;
      *((void *)v32 + 10) = *((void *)v33 + 10);
      swift_bridgeObjectRetain(v44);
    }

    else
    {
      __int128 v37 = *((_OWORD *)v33 + 3);
      *((_OWORD *)v32 + 2) = *((_OWORD *)v33 + 2);
      *((_OWORD *)v32 + 3) = v37;
      *((_OWORD *)v32 + 4) = *((_OWORD *)v33 + 4);
      *((void *)v32 + 10) = *((void *)v33 + 10);
      __int128 v38 = *((_OWORD *)v33 + 1);
      *(_OWORD *)double v32 = *(_OWORD *)v33;
      *((_OWORD *)v32 + 1) = v38;
    }
  }

  return a1;
}

__n128 sub_1003C3960(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  *(void *)&double v5 = swift_bridgeObjectRelease((const char *)*(void *)(a1 + a2[5] + 8)).n128_u64[0];
  swift_bridgeObjectRelease(*(const char **)(a1 + a2[6] + 8), v5);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = (uint64_t *)(a1 + a2[8]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_100189B20(*v10, v11);
  }
  uint64_t v12 = a1 + a2[9];
  if (*(void *)(v12 + 72))
  {
    swift_bridgeObjectRelease(*(const char **)(v12 + 8));
    unint64_t v13 = *(void *)(v12 + 24);
    if (v13 >> 60 != 15) {
      sub_100189B20(*(void *)(v12 + 16), v13);
    }
    sub_100189B20(*(void *)(v12 + 32), *(void *)(v12 + 40));
    sub_100189B20(*(void *)(v12 + 48), *(void *)(v12 + 56));
    return swift_bridgeObjectRelease((const char *)*(void *)(v12 + 72));
  }

  return result;
}

uint64_t sub_1003C3A84(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  unint64_t v11 = (const char *)v10[1];
  void *v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  unint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = (const char *)v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (const void *)(a2 + v15);
  uint64_t v18 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v19 + 48);
  *(void *)&double v21 = swift_bridgeObjectRetain(v11).n128_u64[0];
  __n128 v22 = swift_bridgeObjectRetain(v14, v21);
  if (v20(v17, 1LL, v18, v22))
  {
    uint64_t v23 = sub_100183098(&qword_100651E70);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
  }

  uint64_t v24 = a3[8];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = (uint64_t *)(a2 + v24);
  unint64_t v27 = v26[1];
  if (v27 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  }

  else
  {
    uint64_t v28 = *v26;
    sub_10019BA8C(*v26, v26[1]);
    *(void *)uint64_t v25 = v28;
    *(void *)(v25 + 8) = v27;
  }

  uint64_t v29 = a3[9];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  if (*(void *)(a2 + v29 + 72))
  {
    double v32 = *(const char **)(v31 + 8);
    *(void *)uint64_t v30 = *(void *)v31;
    *(void *)(v30 + 8) = v32;
    Class v33 = (_OWORD *)(v31 + 16);
    unint64_t v34 = *(void *)(v31 + 24);
    swift_bridgeObjectRetain(v32);
    if (v34 >> 60 == 15)
    {
      *(_OWORD *)(v30 + 16) = *v33;
    }

    else
    {
      uint64_t v37 = *(void *)v33;
      sub_10019BA8C(v37, v34);
      *(void *)(v30 + 16) = v37;
      *(void *)(v30 + 24) = v34;
    }

    uint64_t v38 = *(void *)(v31 + 32);
    unint64_t v39 = *(void *)(v31 + 40);
    sub_10019BA8C(v38, v39);
    *(void *)(v30 + 32) = v38;
    *(void *)(v30 + 40) = v39;
    uint64_t v40 = *(void *)(v31 + 48);
    unint64_t v41 = *(void *)(v31 + 56);
    sub_10019BA8C(v40, v41);
    *(void *)(v30 + 48) = v40;
    *(void *)(v30 + 56) = v41;
    uint64_t v42 = *(const char **)(v31 + 72);
    *(void *)(v30 + 64) = *(void *)(v31 + 64);
    *(void *)(v30 + 72) = v42;
    *(void *)(v30 + 80) = *(void *)(v31 + 80);
    swift_bridgeObjectRetain(v42);
  }

  else
  {
    __int128 v35 = *(_OWORD *)(v31 + 48);
    *(_OWORD *)(v30 + 32) = *(_OWORD *)(v31 + 32);
    *(_OWORD *)(v30 + 48) = v35;
    *(_OWORD *)(v30 + 64) = *(_OWORD *)(v31 + 64);
    *(void *)(v30 + 80) = *(void *)(v31 + 80);
    __int128 v36 = *(_OWORD *)(v31 + 16);
    *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
    *(_OWORD *)(v30 + 16) = v36;
  }

  return a1;
}

uint64_t sub_1003C3C98(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  uint64_t v10 = (const char *)v9[1];
  unint64_t v11 = (const char *)v8[1];
  v8[1] = v10;
  *(void *)&double v12 = swift_bridgeObjectRetain(v10).n128_u64[0];
  *(void *)&double v13 = swift_bridgeObjectRelease(v11, v12).n128_u64[0];
  uint64_t v14 = a3[6];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  *uint64_t v15 = *v16;
  uint64_t v17 = (const char *)v16[1];
  uint64_t v18 = (const char *)v15[1];
  v15[1] = v17;
  *(void *)&double v19 = swift_bridgeObjectRetain(v17, v13).n128_u64[0];
  swift_bridgeObjectRelease(v18, v19);
  uint64_t v20 = a3[7];
  double v21 = (void *)(a1 + v20);
  __n128 v22 = (void *)(a2 + v20);
  uint64_t v23 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1LL, v23);
  int v27 = v25(v22, 1LL, v23);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0LL, 1LL, v23);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v27)
  {
    (*(void (**)(void *, uint64_t))(v24 + 8))(v21, v23);
LABEL_6:
    uint64_t v28 = sub_100183098(&qword_100651E70);
    memcpy(v21, v22, *(void *)(*(void *)(v28 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v24 + 24))(v21, v22, v23);
LABEL_7:
  uint64_t v29 = a3[8];
  uint64_t v30 = (uint64_t *)(a1 + v29);
  uint64_t v31 = (uint64_t *)(a2 + v29);
  unint64_t v32 = *(void *)(a2 + v29 + 8);
  if (*(void *)(a1 + v29 + 8) >> 60 == 15LL)
  {
    if (v32 >> 60 != 15)
    {
      uint64_t v33 = *v31;
      sub_10019BA8C(v33, v32);
      *uint64_t v30 = v33;
      v30[1] = v32;
      goto LABEL_14;
    }

    goto LABEL_12;
  }

  if (v32 >> 60 == 15)
  {
    sub_10019DC8C((uint64_t)v30);
LABEL_12:
    *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
    goto LABEL_14;
  }

  uint64_t v34 = *v31;
  sub_10019BA8C(v34, v32);
  uint64_t v35 = *v30;
  unint64_t v36 = v30[1];
  *uint64_t v30 = v34;
  v30[1] = v32;
  sub_100189B20(v35, v36);
LABEL_14:
  uint64_t v37 = a3[9];
  uint64_t v38 = (void *)(a1 + v37);
  uint64_t v39 = a2 + v37;
  uint64_t v40 = *(void *)(a1 + v37 + 72);
  uint64_t v41 = *(void *)(a2 + v37 + 72);
  if (v40)
  {
    if (v41)
    {
      *uint64_t v38 = *(void *)v39;
      uint64_t v42 = *(const char **)(v39 + 8);
      unint64_t v43 = (const char *)v38[1];
      v38[1] = v42;
      *(void *)&double v44 = swift_bridgeObjectRetain(v42).n128_u64[0];
      swift_bridgeObjectRelease(v43, v44);
      uint64_t v45 = (uint64_t *)(v39 + 16);
      unint64_t v46 = *(void *)(v39 + 24);
      if (v38[3] >> 60 == 15LL)
      {
        if (v46 >> 60 != 15)
        {
          uint64_t v47 = *v45;
          sub_10019BA8C(*v45, *(void *)(v39 + 24));
          _OWORD v38[2] = v47;
          v38[3] = v46;
LABEL_31:
          uint64_t v68 = *(void *)(v39 + 32);
          unint64_t v69 = *(void *)(v39 + 40);
          sub_10019BA8C(v68, v69);
          uint64_t v70 = v38[4];
          unint64_t v71 = v38[5];
          v38[4] = v68;
          void v38[5] = v69;
          sub_100189B20(v70, v71);
          uint64_t v72 = *(void *)(v39 + 48);
          unint64_t v73 = *(void *)(v39 + 56);
          sub_10019BA8C(v72, v73);
          uint64_t v74 = v38[6];
          unint64_t v75 = v38[7];
          v38[6] = v72;
          v38[7] = v73;
          sub_100189B20(v74, v75);
          v38[8] = *(void *)(v39 + 64);
          char v76 = *(const char **)(v39 + 72);
          Swift::String v77 = (const char *)v38[9];
          void v38[9] = v76;
          *(void *)&double v78 = swift_bridgeObjectRetain(v76).n128_u64[0];
          swift_bridgeObjectRelease(v77, v78);
          v38[10] = *(void *)(v39 + 80);
          return a1;
        }
      }

      else
      {
        if (v46 >> 60 != 15)
        {
          uint64_t v65 = *v45;
          sub_10019BA8C(*v45, *(void *)(v39 + 24));
          uint64_t v66 = v38[2];
          unint64_t v67 = v38[3];
          _OWORD v38[2] = v65;
          v38[3] = v46;
          sub_100189B20(v66, v67);
          goto LABEL_31;
        }

        sub_10019DC8C((uint64_t)(v38 + 2));
      }

      *((_OWORD *)v38 + 1) = *(_OWORD *)v45;
      goto LABEL_31;
    }

    sub_1003C3658((uint64_t)v38);
    __int128 v51 = *(_OWORD *)(v39 + 16);
    *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
    *((_OWORD *)v38 + 1) = v51;
    __int128 v53 = *(_OWORD *)(v39 + 48);
    __int128 v52 = *(_OWORD *)(v39 + 64);
    __int128 v54 = *(_OWORD *)(v39 + 32);
    v38[10] = *(void *)(v39 + 80);
    *((_OWORD *)v38 + 3) = v53;
    *((_OWORD *)v38 + 4) = v52;
    *((_OWORD *)v38 + 2) = v54;
  }

  else if (v41)
  {
    *uint64_t v38 = *(void *)v39;
    int v48 = *(const char **)(v39 + 8);
    v38[1] = v48;
    uint64_t v49 = (_OWORD *)(v39 + 16);
    unint64_t v50 = *(void *)(v39 + 24);
    swift_bridgeObjectRetain(v48);
    if (v50 >> 60 == 15)
    {
      *((_OWORD *)v38 + 1) = *v49;
    }

    else
    {
      uint64_t v59 = *(void *)v49;
      sub_10019BA8C(v59, v50);
      _OWORD v38[2] = v59;
      v38[3] = v50;
    }

    uint64_t v60 = *(void *)(v39 + 32);
    unint64_t v61 = *(void *)(v39 + 40);
    sub_10019BA8C(v60, v61);
    v38[4] = v60;
    void v38[5] = v61;
    uint64_t v62 = *(void *)(v39 + 48);
    unint64_t v63 = *(void *)(v39 + 56);
    sub_10019BA8C(v62, v63);
    v38[6] = v62;
    v38[7] = v63;
    v38[8] = *(void *)(v39 + 64);
    uint64_t v64 = *(const char **)(v39 + 72);
    void v38[9] = v64;
    v38[10] = *(void *)(v39 + 80);
    swift_bridgeObjectRetain(v64);
  }

  else
  {
    __int128 v55 = *(_OWORD *)(v39 + 16);
    *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
    *((_OWORD *)v38 + 1) = v55;
    __int128 v56 = *(_OWORD *)(v39 + 32);
    __int128 v57 = *(_OWORD *)(v39 + 48);
    __int128 v58 = *(_OWORD *)(v39 + 64);
    v38[10] = *(void *)(v39 + 80);
    *((_OWORD *)v38 + 3) = v57;
    *((_OWORD *)v38 + 4) = v58;
    *((_OWORD *)v38 + 2) = v56;
  }

  return a1;
}

uint64_t sub_1003C40A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = sub_100183098(&qword_100651E70);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v14 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  __int128 v17 = *(_OWORD *)(v16 + 48);
  *(_OWORD *)(v15 + 32) = *(_OWORD *)(v16 + 32);
  *(_OWORD *)(v15 + 48) = v17;
  *(_OWORD *)(v15 + 64) = *(_OWORD *)(v16 + 64);
  *(void *)(v15 + 80) = *(void *)(v16 + 80);
  __int128 v18 = *(_OWORD *)(v16 + 16);
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *(_OWORD *)(v15 + 16) = v18;
  return a1;
}

uint64_t sub_1003C41CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v12 = (const char *)v8[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  *(void *)&double v13 = swift_bridgeObjectRelease(v12).n128_u64[0];
  uint64_t v14 = a3[6];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (uint64_t *)(a2 + v14);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  double v19 = (const char *)v15[1];
  *uint64_t v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease(v19, v13);
  uint64_t v20 = a3[7];
  double v21 = (void *)(a1 + v20);
  __n128 v22 = (void *)(a2 + v20);
  uint64_t v23 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1LL, v23);
  int v27 = v25(v22, 1LL, v23);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(void *, void *, uint64_t))(v24 + 32))(v21, v22, v23);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0LL, 1LL, v23);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v27)
  {
    (*(void (**)(void *, uint64_t))(v24 + 8))(v21, v23);
LABEL_6:
    uint64_t v28 = sub_100183098(&qword_100651E70);
    memcpy(v21, v22, *(void *)(*(void *)(v28 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v24 + 40))(v21, v22, v23);
LABEL_7:
  uint64_t v29 = a3[8];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  unint64_t v32 = *(void *)(a1 + v29 + 8);
  if (v32 >> 60 == 15)
  {
LABEL_10:
    *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
    goto LABEL_12;
  }

  unint64_t v33 = *(void *)(v31 + 8);
  if (v33 >> 60 == 15)
  {
    sub_10019DC8C(v30);
    goto LABEL_10;
  }

  uint64_t v34 = *(void *)v30;
  *(void *)uint64_t v30 = *(void *)v31;
  *(void *)(v30 + 8) = v33;
  sub_100189B20(v34, v32);
LABEL_12:
  uint64_t v35 = a3[9];
  unint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = a2 + v35;
  if (*(void *)(a1 + v35 + 72))
  {
    if (*(void *)(v37 + 72))
    {
      uint64_t v38 = *(void *)(v37 + 8);
      uint64_t v39 = (const char *)v36[1];
      *unint64_t v36 = *(void *)v37;
      v36[1] = v38;
      swift_bridgeObjectRelease(v39);
      uint64_t v40 = (void *)(v37 + 16);
      unint64_t v41 = v36[3];
      if (v41 >> 60 != 15)
      {
        unint64_t v42 = *(void *)(v37 + 24);
        if (v42 >> 60 != 15)
        {
          uint64_t v45 = v36[2];
          v36[2] = *v40;
          v36[3] = v42;
          sub_100189B20(v45, v41);
          goto LABEL_22;
        }

        sub_10019DC8C((uint64_t)(v36 + 2));
      }

      *((_OWORD *)v36 + 1) = *(_OWORD *)v40;
LABEL_22:
      uint64_t v46 = v36[4];
      unint64_t v47 = v36[5];
      *((_OWORD *)v36 + 2) = *(_OWORD *)(v37 + 32);
      sub_100189B20(v46, v47);
      uint64_t v48 = v36[6];
      unint64_t v49 = v36[7];
      *((_OWORD *)v36 + 3) = *(_OWORD *)(v37 + 48);
      sub_100189B20(v48, v49);
      uint64_t v50 = *(void *)(v37 + 72);
      __int128 v51 = (const char *)v36[9];
      v36[8] = *(void *)(v37 + 64);
      void v36[9] = v50;
      swift_bridgeObjectRelease(v51);
      v36[10] = *(void *)(v37 + 80);
      return a1;
    }

    sub_1003C3658((uint64_t)v36);
  }

  __int128 v43 = *(_OWORD *)(v37 + 48);
  *((_OWORD *)v36 + 2) = *(_OWORD *)(v37 + 32);
  *((_OWORD *)v36 + 3) = v43;
  *((_OWORD *)v36 + 4) = *(_OWORD *)(v37 + 64);
  v36[10] = *(void *)(v37 + 80);
  __int128 v44 = *(_OWORD *)(v37 + 16);
  *(_OWORD *)unint64_t v36 = *(_OWORD *)v37;
  *((_OWORD *)v36 + 1) = v44;
  return a1;
}

uint64_t sub_1003C4460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003C446C);
}

uint64_t sub_1003C4470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  if ((_DWORD)a2 == 2147483646)
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    int v10 = v9 - 1;
    if (v10 < 0) {
      int v10 = -1;
    }
    return (v10 + 1);
  }

  else
  {
    uint64_t v11 = sub_100183098(&qword_100651E70);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))( a1 + *(int *)(a3 + 28),  a2,  v11);
  }

uint64_t sub_1003C452C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003C4538);
}

uint64_t sub_1003C453C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    if (a3 == 2147483646)
    {
      *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
      return result;
    }

    uint64_t v10 = sub_100183098(&qword_100651E70);
    uint64_t v12 = a1 + *(int *)(a4 + 28);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t _s14descr1005DEB71C16ExchangeResponseVMa(uint64_t a1)
{
  return sub_1001A4AD0(a1, qword_100652760, (uint64_t)&_s14descr1005DEB71C16ExchangeResponseVMn);
}

void sub_1003C45FC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SFAirDrop.TransferIdentifier(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    v6[1] = &unk_1004D9678;
    v6[2] = &unk_1004D9678;
    sub_1003C36CC(319LL);
    if (v5 <= 0x3F)
    {
      v6[3] = *(void *)(v4 - 8) + 64LL;
      v6[4] = &unk_1004D9690;
      v6[5] = &unk_1004D96A8;
      swift_initStructMetadata(a1, 256LL, 6LL, v6, a1 + 16);
    }
  }

void sub_1003C46A0(char a1)
{
  __asm { BR              X10 }

Swift::Int sub_1003C46FC()
{
  return Hasher._finalize()();
}

void sub_1003C47A0(char a1)
{
  __asm { BR              X10 }

Swift::Int sub_1003C47F4()
{
  return Hasher._finalize()();
}

uint64_t sub_1003C48A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1003C4AF0(a1, a2, a3, _s14descr1005DEB71C15ExchangeRequestVMa, a4);
}

uint64_t sub_1003C48AC@<X0>(uint64_t a1@<X8>)
{
  return sub_1003C48C4(_s14descr1005DEB71C16ExchangeResponseVMa, a1);
}

uint64_t sub_1003C48B8@<X0>(uint64_t a1@<X8>)
{
  return sub_1003C48C4(_s14descr1005DEB71C15ExchangeRequestVMa, a1);
}

uint64_t sub_1003C48C4@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100183098(&qword_100651E70);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v30 - v13;
  uint64_t v15 = a1(0LL);
  uint64_t v16 = (uint64_t *)(v2 + *(int *)(v15 + 24));
  uint64_t v17 = (const char *)v16[1];
  if (v17)
  {
    uint64_t v18 = v15;
    uint64_t v19 = *v16;
    sub_1003C5DC4(v2 + *(int *)(v15 + 28), (uint64_t)v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1LL, v8) == 1)
    {
      sub_100187100((uint64_t)v7, &qword_100651E70);
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
      uint64_t v20 = (uint64_t *)(v2 + *(int *)(v18 + 32));
      unint64_t v21 = v20[1];
      if (v21 >> 60 != 15)
      {
        uint64_t v31 = v19;
        uint64_t v26 = *v20;
        int v27 = (uint64_t *)(v2 + *(int *)(v18 + 20));
        uint64_t v28 = *v27;
        uint64_t v29 = (const char *)v27[1];
        (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
        swift_bridgeObjectRetain(v17);
        sub_1001A4C04(v26, v21);
        swift_bridgeObjectRetain(v29);
        SFAirDrop.ContactInfo.init(givenName:fullName:handle:vcard:)(v28, v29, v31, v17, v12, v26, v21);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
        __n128 v22 = (unsigned int *)&enum case for SFAirDrop.ContactRequest.contact(_:);
        goto LABEL_7;
      }

      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    }
  }

  __n128 v22 = (unsigned int *)&enum case for SFAirDrop.ContactRequest.notNeeded(_:);
LABEL_7:
  uint64_t v23 = *v22;
  uint64_t v24 = type metadata accessor for SFAirDrop.ContactRequest(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 104LL))(a2, v23, v24);
}

uint64_t sub_1003C4AE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1003C4AF0(a1, a2, a3, _s14descr1005DEB71C16ExchangeResponseVMa, a4);
}

uint64_t sub_1003C4AF0@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  __int128 v56 = a4;
  uint64_t v57 = a3;
  uint64_t v55 = a2;
  uint64_t v7 = sub_100183098(&qword_100651E70);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100183098(&qword_100649F50);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for SFAirDrop.ContactInfo(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  unint64_t v21 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = a1;
  SFAirDrop.ContactRequest.contact.getter(v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17) == 1)
  {
    sub_1003C5E0C(v57);
    uint64_t v22 = type metadata accessor for SFAirDrop.ContactRequest(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8LL))(v54, v22);
    sub_100187100((uint64_t)v16, &qword_100649F50);
    uint64_t v23 = (int *)v56(0LL);
    uint64_t v24 = a5 + v23[7];
    uint64_t v25 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56LL))(v24, 1LL, 1LL, v25);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(a5, v55, v10);
    int v27 = (void *)(a5 + v23[5]);
    *int v27 = 0LL;
    v27[1] = 0LL;
    uint64_t v28 = (void *)(a5 + v23[6]);
    *uint64_t v28 = 0LL;
    v28[1] = 0LL;
    *(_OWORD *)(a5 + v23[8]) = xmmword_1004CD540;
    uint64_t v29 = a5 + v23[9];
    *(void *)(v29 + 80) = 0LL;
    *(_OWORD *)(v29 + 48) = 0u;
    *(_OWORD *)(v29 + 64) = 0u;
    *(_OWORD *)(v29 + 16) = 0u;
    *(_OWORD *)(v29 + 32) = 0u;
    *(_OWORD *)uint64_t v29 = 0u;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v21, v16, v17);
    uint64_t v30 = v55;
    uint64_t v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v55, v10);
    uint64_t v32 = SFAirDrop.ContactInfo.givenName.getter(v31);
    uint64_t v52 = v33;
    uint64_t v53 = v32;
    uint64_t v34 = SFAirDrop.ContactInfo.fullName.getter(v32);
    uint64_t v50 = v35;
    uint64_t v51 = v34;
    SFAirDrop.ContactInfo.handle.getter();
    uint64_t v36 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0LL);
    uint64_t v37 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56LL))(v9, 0LL, 1LL, v36);
    uint64_t v38 = SFAirDrop.ContactInfo.vcard.getter(v37);
    uint64_t v49 = v39;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v30, v10);
    uint64_t v40 = type metadata accessor for SFAirDrop.ContactRequest(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8LL))(v54, v40);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a5, v13, v10);
    unint64_t v41 = (int *)v56(0LL);
    unint64_t v42 = (uint64_t *)(a5 + v41[5]);
    uint64_t v43 = v52;
    uint64_t *v42 = v53;
    v42[1] = v43;
    __int128 v44 = (uint64_t *)(a5 + v41[6]);
    uint64_t v45 = v50;
    uint64_t *v44 = v51;
    v44[1] = v45;
    sub_1001870BC((uint64_t)v9, a5 + v41[7], &qword_100651E70);
    uint64_t v46 = (uint64_t *)(a5 + v41[8]);
    uint64_t v47 = v49;
    *uint64_t v46 = v38;
    v46[1] = v47;
    return sub_1001870BC(v57, a5 + v41[9], &qword_1006527A8);
  }

  return result;
}

uint64_t sub_1003C4E54()
{
  return sub_1003C4EA4(_s14descr1005DEB71C15ExchangeRequestVMa, 45LL, 0xD000000000000020LL, 0x800000010050D420LL);
}

uint64_t sub_1003C4E7C()
{
  return sub_1003C4EA4(_s14descr1005DEB71C16ExchangeResponseVMa, 46LL, 0xD000000000000021LL, 0x800000010050D450LL);
}

uint64_t sub_1003C4EA4(uint64_t (*a1)(void), Swift::Int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v42 = a3;
  unint64_t v43 = a4;
  Swift::Int v41 = a2;
  uint64_t v6 = v4;
  uint64_t v7 = sub_100183098(&qword_100651E70);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1(0LL);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v40 - v16;
  uint64_t v18 = (uint64_t *)(v6 + *(int *)(v15 + 20));
  uint64_t v20 = *v18;
  uint64_t v19 = (void *)v18[1];
  sub_1001A4B84(v6, (uint64_t)v17, a1);
  if (v19)
  {
    swift_bridgeObjectRetain(v19);
    sub_1001A4BC8((uint64_t)v17, a1);
  }

  else
  {
    unint64_t v21 = (uint64_t *)&v17[*(int *)(v14 + 24)];
    uint64_t v20 = *v21;
    uint64_t v19 = (void *)v21[1];
    swift_bridgeObjectRetain(v19);
    sub_1001A4BC8((uint64_t)v17, a1);
    if (!v19) {
      goto LABEL_6;
    }
  }

  sub_1003C5DC4(v6 + *(int *)(v14 + 28), (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
    uint64_t v44 = 0LL;
    unint64_t v45 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(v41);
    swift_bridgeObjectRelease(v45);
    uint64_t v44 = v42;
    unint64_t v45 = v43;
    uint64_t v28 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
    uint64_t v29 = sub_100183F14( &qword_100647620,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
    v30._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v28, v29);
    object = v30._object;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(object);
    v32._uint64_t countAndFlagsBits = 544034336LL;
    v32._object = (void *)0xE400000000000000LL;
    String.append(_:)(v32);
    v33._uint64_t countAndFlagsBits = v20;
    v33._object = v19;
    String.append(_:)(v33);
    swift_bridgeObjectRelease(v19);
    v34._uint64_t countAndFlagsBits = 23328LL;
    v34._object = (void *)0xE200000000000000LL;
    String.append(_:)(v34);
    uint64_t v35 = sub_100183F14( &qword_10064A068,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.ContactInfo.Handle,  (uint64_t)&protocol conformance descriptor for SFAirDrop.ContactInfo.Handle);
    v36._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v10, v35);
    uint64_t v37 = v36._object;
    String.append(_:)(v36);
    swift_bridgeObjectRelease(v37);
    v38._uint64_t countAndFlagsBits = 93LL;
    v38._object = (void *)0xE100000000000000LL;
    String.append(_:)(v38);
    uint64_t v27 = v44;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return v27;
  }

  swift_bridgeObjectRelease(v19);
  sub_100187100((uint64_t)v9, &qword_100651E70);
LABEL_6:
  uint64_t v44 = 0LL;
  unint64_t v45 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(v41);
  swift_bridgeObjectRelease(v45);
  uint64_t v44 = v42;
  unint64_t v45 = v43;
  uint64_t v22 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v23 = sub_100183F14( &qword_100647620,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
  v24._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v22, v23);
  uint64_t v25 = v24._object;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v25);
  v26._uint64_t countAndFlagsBits = 0x746E6F63206F6E20LL;
  v26._object = (void *)0xEB00000000746361LL;
  String.append(_:)(v26);
  return v44;
}

uint64_t sub_1003C51F4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1003EF128(*a1, *a2);
}

void sub_1003C5200()
{
}

uint64_t sub_1003C5218(uint64_t a1)
{
  return sub_1003F00EC(a1, *v1);
}

uint64_t sub_1003C5220(uint64_t a1)
{
  return sub_1003F06BC(a1, *v1);
}

unint64_t sub_1003C5228@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_1005D1928;
  unint64_t result = sub_1003C6178(*a1, v3);
  *a2 = result;
  return result;
}

unint64_t sub_1003C5264@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_1005D1928;
  unint64_t result = sub_1003C6178(a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_1003C5290(uint64_t a1)
{
  unint64_t v2 = sub_1003C5E5C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003C52B8(uint64_t a1)
{
  unint64_t v2 = sub_1003C5E5C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1003C52E0(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_1003C5314(void *a1)
{
  return sub_1003C55B4( a1,  &qword_1006527C8,  (uint64_t (*)(void))sub_1003C5E5C,  (uint64_t)&_s14descr1005DEB71C15ExchangeRequestV10CodingKeysON,  (uint64_t)_s14descr1005DEB71C15ExchangeRequestVMa);
}

uint64_t sub_1003C5348()
{
  return sub_1003C4EA4(_s14descr1005DEB71C15ExchangeRequestVMa, 45LL, 0xD000000000000020LL, 0x800000010050D420LL);
}

unint64_t sub_1003C5380@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_1005D19D8;
  unint64_t result = sub_1003C6178(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_1003C53B4()
{
  return ((uint64_t (*)(void))((char *)sub_1003C53E8 + 4 * byte_1004D964C[*v0]))();
}

void sub_1003C53E8(void *a1@<X8>)
{
  *a1 = 0x6D614E6E65766947LL;
  a1[1] = 0xE900000000000065LL;
}

void sub_1003C540C(void *a1@<X8>)
{
  *a1 = 0x656D614E6C6C7546LL;
  a1[1] = 0xE800000000000000LL;
}

void sub_1003C5428(void *a1@<X8>)
{
  *a1 = 0x656C646E6148LL;
  a1[1] = 0xE600000000000000LL;
}

void sub_1003C5440(void *a1@<X8>)
{
  *a1 = 0x7461446472614356LL;
  a1[1] = 0xE900000000000061LL;
}

void sub_1003C5460(void *a1@<X8>)
{
  *a1 = 0xD000000000000011LL;
  a1[1] = 0x8000000100502FA0LL;
}

uint64_t sub_1003C5480()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1003C54B4 + 4 * byte_1004D9652[*v0]))( 0x726566736E617254LL,  0xEA00000000004449LL);
}

uint64_t sub_1003C54B4()
{
  return 0x6D614E6E65766947LL;
}

uint64_t sub_1003C54D4()
{
  return 0x656D614E6C6C7546LL;
}

uint64_t sub_1003C54EC()
{
  return 0x656C646E6148LL;
}

uint64_t sub_1003C5500()
{
  return 0x7461446472614356LL;
}

unint64_t sub_1003C551C()
{
  return 0xD000000000000011LL;
}

unint64_t sub_1003C5538@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_1005D19D8;
  unint64_t result = sub_1003C6178(a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_1003C5564(uint64_t a1)
{
  unint64_t v2 = sub_1003C5EA0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003C558C(uint64_t a1)
{
  unint64_t v2 = sub_1003C5EA0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003C55B4(void *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t a5)
{
  v38[0] = a5;
  uint64_t v8 = v5;
  uint64_t v10 = sub_100183098(a2);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = a1[3];
  uint64_t v14 = a1[4];
  sub_10019A708(a1, v15);
  uint64_t v16 = a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a4, a4, v16, v15, v14);
  LOBYTE(v39[0]) = 0;
  uint64_t v17 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v18 = sub_100183F14( &qword_10064D900,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
  uint64_t v19 = v38[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)(v8, v39, v10, v17, v18);
  if (v19) {
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  uint64_t v21 = v11;
  uint64_t v22 = (int *)((uint64_t (*)(void))v38[0])(0LL);
  uint64_t v23 = (uint64_t *)(v8 + v22[5]);
  uint64_t v24 = *v23;
  uint64_t v25 = v23[1];
  LOBYTE(v39[0]) = 1;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, v39, v10);
  Swift::String v26 = (uint64_t *)(v8 + v22[6]);
  uint64_t v27 = *v26;
  uint64_t v28 = v26[1];
  LOBYTE(v39[0]) = 2;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v27, v28, v39, v10);
  uint64_t v29 = v8 + v22[7];
  LOBYTE(v39[0]) = 3;
  uint64_t v30 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0LL);
  uint64_t v31 = sub_100183F14( &qword_1006527D0,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.ContactInfo.Handle,  (uint64_t)&protocol conformance descriptor for SFAirDrop.ContactInfo.Handle);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v29, v39, v10, v30, v31);
  v39[0] = *(_OWORD *)(v8 + v22[8]);
  char v41 = 4;
  unint64_t v32 = sub_10020C2A8();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v39, &v41, v10, &type metadata for Data, v32);
  uint64_t v33 = v8 + v22[9];
  uint64_t v34 = *(void *)(v33 + 80);
  __int128 v35 = *(_OWORD *)(v33 + 16);
  v39[0] = *(_OWORD *)v33;
  v39[1] = v35;
  __int128 v36 = *(_OWORD *)(v33 + 48);
  _OWORD v39[2] = *(_OWORD *)(v33 + 32);
  void v39[3] = v36;
  v39[4] = *(_OWORD *)(v33 + 64);
  uint64_t v40 = v34;
  char v41 = 5;
  unint64_t v37 = sub_10039EAD8();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)( v39,  &v41,  v10,  &_s14descr1005D5299C20IdentityShareRequestVN,  v37);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v13, v10);
}

void sub_1003C5858( void *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v53 = a4;
  uint64_t v46 = a6;
  uint64_t v10 = sub_100183098(&qword_100651E70);
  __chkstk_darwin(v10);
  uint64_t v48 = (uint64_t *)((char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v49 = *(void *)(v12 - 8);
  uint64_t v50 = v12;
  __chkstk_darwin(v12);
  uint64_t v51 = (uint64_t *)((char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v52 = sub_100183098(a2);
  uint64_t v14 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v16 = (uint64_t (*)(void))((char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v47 = a3;
  uint64_t v17 = a3(0LL);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v45 - v18;
  uint64_t v20 = a1[3];
  uint64_t v21 = a1[4];
  sub_10019A708(a1, v20);
  uint64_t v22 = v53();
  uint64_t v53 = v16;
  uint64_t v23 = v54;
  dispatch thunk of Decoder.container<A>(keyedBy:)(a5, a5, v22, v20, v21);
  if (v23)
  {
    sub_10018709C(a1);
  }

  else
  {
    uint64_t v24 = v49;
    uint64_t v25 = (uint64_t)v19;
    LOBYTE(v55[0]) = 0;
    uint64_t v26 = sub_100183F14( &qword_10064D8F0,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
    uint64_t v27 = v50;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v51, v50, v55, v52, v50, v26);
    (*(void (**)(uint64_t, void *, uint64_t))(v24 + 32))(v25, v51, v27);
    LOBYTE(v55[0]) = 1;
    uint64_t v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v55, v52);
    uint64_t v29 = (int *)v17;
    uint64_t v30 = (uint64_t *)(v25 + *(int *)(v17 + 20));
    *uint64_t v30 = v28;
    v30[1] = v31;
    LOBYTE(v55[0]) = 2;
    uint64_t v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v55, v52);
    uint64_t v33 = (uint64_t *)(v25 + *(int *)(v17 + 24));
    uint64_t *v33 = v32;
    v33[1] = v34;
    uint64_t v35 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0LL);
    LOBYTE(v55[0]) = 3;
    uint64_t v36 = sub_100183F14( &qword_1006527C0,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.ContactInfo.Handle,  (uint64_t)&protocol conformance descriptor for SFAirDrop.ContactInfo.Handle);
    unint64_t v37 = v48;
    uint64_t v54 = 0LL;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v48, v35, v55, v52, v35, v36);
    sub_1001870BC((uint64_t)v37, v25 + v29[7], &qword_100651E70);
    char v57 = 4;
    unint64_t v38 = sub_10020C198();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( v55,  &type metadata for Data,  &v57,  v52,  &type metadata for Data,  v38);
    *(_OWORD *)(v25 + v29[8]) = v55[0];
    char v57 = 5;
    unint64_t v39 = sub_10039E6DC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( v55,  &_s14descr1005D5299C20IdentityShareRequestVN,  &v57,  v52,  &_s14descr1005D5299C20IdentityShareRequestVN,  v39);
    (*(void (**)(uint64_t (*)(void), uint64_t))(v14 + 8))(v53, v52);
    uint64_t v40 = v56;
    uint64_t v41 = v25 + v29[9];
    __int128 v42 = v55[1];
    *(_OWORD *)uint64_t v41 = v55[0];
    *(_OWORD *)(v41 + 16) = v42;
    __int128 v43 = v55[3];
    *(_OWORD *)(v41 + 32) = v55[2];
    *(_OWORD *)(v41 + 48) = v43;
    *(_OWORD *)(v41 + 64) = v55[4];
    *(void *)(v41 + 80) = v40;
    uint64_t v44 = v47;
    sub_1001A4B84(v25, v46, v47);
    sub_10018709C(a1);
    sub_1001A4BC8(v25, v44);
  }

void sub_1003C5D24(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_1003C5D58(void *a1)
{
  return sub_1003C55B4( a1,  &qword_1006527E8,  (uint64_t (*)(void))sub_1003C5EA0,  (uint64_t)&_s14descr1005DEB71C16ExchangeResponseV10CodingKeysON,  (uint64_t)_s14descr1005DEB71C16ExchangeResponseVMa);
}

uint64_t sub_1003C5D8C()
{
  return sub_1003C4EA4(_s14descr1005DEB71C16ExchangeResponseVMa, 46LL, 0xD000000000000021LL, 0x800000010050D450LL);
}

uint64_t sub_1003C5DC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100183098(&qword_100651E70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003C5E0C(uint64_t a1)
{
  return a1;
}

unint64_t sub_1003C5E5C()
{
  unint64_t result = qword_1006527B8;
  if (!qword_1006527B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D9A00, &_s14descr1005DEB71C15ExchangeRequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1006527B8);
  }

  return result;
}

unint64_t sub_1003C5EA0()
{
  unint64_t result = qword_1006527E0;
  if (!qword_1006527E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D99B0, &_s14descr1005DEB71C16ExchangeResponseV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1006527E0);
  }

  return result;
}

ValueMetadata *_s14descr1005DEB71C16ExchangeResponseV10CodingKeysOMa()
{
  return &_s14descr1005DEB71C16ExchangeResponseV10CodingKeysON;
}

uint64_t _s14descr1005DEB71C16ExchangeResponseV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_1003C5F48 + 4 * byte_1004D965D[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1003C5F7C + 4 * byte_1004D9658[v4]))();
}

uint64_t sub_1003C5F7C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003C5F84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1003C5F8CLL);
  }
  return result;
}

uint64_t sub_1003C5F98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1003C5FA0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1003C5FA4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003C5FAC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s14descr1005DEB71C15ExchangeRequestV10CodingKeysOMa()
{
  return &_s14descr1005DEB71C15ExchangeRequestV10CodingKeysON;
}

unint64_t sub_1003C5FCC()
{
  unint64_t result = qword_1006527F0;
  if (!qword_1006527F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D9898, &_s14descr1005DEB71C15ExchangeRequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1006527F0);
  }

  return result;
}

unint64_t sub_1003C6014()
{
  unint64_t result = qword_1006527F8;
  if (!qword_1006527F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D9988, &_s14descr1005DEB71C16ExchangeResponseV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1006527F8);
  }

  return result;
}

unint64_t sub_1003C605C()
{
  unint64_t result = qword_100652800;
  if (!qword_100652800)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D98C0, &_s14descr1005DEB71C16ExchangeResponseV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100652800);
  }

  return result;
}

unint64_t sub_1003C60A4()
{
  unint64_t result = qword_100652808;
  if (!qword_100652808)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D98E8, &_s14descr1005DEB71C16ExchangeResponseV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100652808);
  }

  return result;
}

unint64_t sub_1003C60EC()
{
  unint64_t result = qword_100652810;
  if (!qword_100652810)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D97D0, &_s14descr1005DEB71C15ExchangeRequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100652810);
  }

  return result;
}

unint64_t sub_1003C6134()
{
  unint64_t result = qword_100652818;
  if (!qword_100652818)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004D97F8, &_s14descr1005DEB71C15ExchangeRequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100652818);
  }

  return result;
}

unint64_t sub_1003C6178(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease(object);
  if (v5 >= 6) {
    return 6LL;
  }
  else {
    return v5;
  }
}

uint64_t sub_1003C61C0(uint64_t a1, uint64_t a2)
{
  v2[12] = a1;
  v2[13] = a2;
  uint64_t v3 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  v2[14] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[15] = v4;
  v2[16] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for SFAirDropReceive.Transfer(0LL);
  v2[17] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[18] = v6;
  v2[19] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for SFPlatform(0LL);
  v2[20] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[21] = v8;
  v2[22] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SFAirDrop.TransferType(0LL);
  v2[23] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[24] = v10;
  v2[25] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for SFAirDropReceive.AskRequest(0LL);
  v2[26] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[27] = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[28] = swift_task_alloc(v13);
  v2[29] = swift_task_alloc(v13);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v14 = static AirDropActor.shared;
  v2[30] = static AirDropActor.shared;
  return swift_task_switch(sub_1003C6304, v14, 0LL);
}

uint64_t sub_1003C6304(uint64_t a1)
{
  unint64_t v2 = (uint64_t *)(v1 + 72);
  uint64_t v3 = *(void *)(v1 + 232);
  uint64_t v4 = *(void *)(v1 + 208);
  uint64_t v5 = *(void *)(v1 + 216);
  uint64_t v7 = *(void *)(v1 + 192);
  uint64_t v6 = *(void *)(v1 + 200);
  uint64_t v8 = *(void *)(v1 + 184);
  uint64_t v9 = SFAirDropReceive.Transfer.askRequest.getter(a1);
  SFAirDropReceive.AskRequest.type.getter(v9);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  *(void *)(v1 + 248) = v10;
  v10(v3, v4);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 88))(v6, v8);
  if ((_DWORD)v11 == enum case for SFAirDrop.TransferType.linksWithExchange(_:))
  {
    uint64_t v12 = *(void *)(v1 + 200);
    (*(void (**)(uint64_t, void))(*(void *)(v1 + 192) + 96LL))(v12, *(void *)(v1 + 184));
    uint64_t v11 = swift_bridgeObjectRelease(*(void *)(v12 + 8));
    goto LABEL_3;
  }

  if ((_DWORD)v11 == enum case for SFAirDrop.TransferType.filesWithExchange(_:))
  {
    uint64_t v18 = *(void *)(v1 + 200);
    (*(void (**)(uint64_t, void))(*(void *)(v1 + 192) + 96LL))(v18, *(void *)(v1 + 184));
    uint64_t v11 = swift_bridgeObjectRelease(*(void *)(v18 + 8));
    goto LABEL_9;
  }

  if ((_DWORD)v11 == enum case for SFAirDrop.TransferType.exchange(_:))
  {
    uint64_t v24 = *(void *)(v1 + 200);
    (*(void (**)(uint64_t, void))(*(void *)(v1 + 192) + 96LL))(v24, *(void *)(v1 + 184));
    swift_bridgeObjectRelease(*(void *)(v24 + 8));
    if (qword_1006442A8 != -1) {
      swift_once(&qword_1006442A8, sub_1003C6EF0);
    }
    uint64_t v25 = qword_100652848;
LABEL_15:
    *unint64_t v2 = v25;
    swift_bridgeObjectRetain(v25);
    goto LABEL_21;
  }

  if ((_DWORD)v11 == enum case for SFAirDrop.TransferType.links(_:))
  {
LABEL_3:
    uint64_t v14 = *(void *)(v1 + 168);
    uint64_t v13 = *(void *)(v1 + 176);
    uint64_t v15 = *(void *)(v1 + 160);
    static SFPlatform.watchOS.getter(v11);
    char v16 = static SFPlatform.isPlatform(_:)(v13);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    if ((v16 & 1) == 0)
    {
      if (qword_1006442A0 != -1) {
        swift_once(&qword_1006442A0, sub_1003C6D54);
      }
      uint64_t v17 = qword_100652840;
LABEL_19:
      uint64_t v23 = (void *)swift_bridgeObjectRetain(v17);
      goto LABEL_20;
    }

    goto LABEL_10;
  }

  if ((_DWORD)v11 == enum case for SFAirDrop.TransferType.files(_:))
  {
LABEL_9:
    uint64_t v20 = *(void *)(v1 + 168);
    uint64_t v19 = *(void *)(v1 + 176);
    uint64_t v21 = *(void *)(v1 + 160);
    static SFPlatform.watchOS.getter(v11);
    char v22 = static SFPlatform.isPlatform(_:)(v19);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    if ((v22 & 1) == 0)
    {
      if (qword_100644298 != -1) {
        swift_once(&qword_100644298, sub_1003C6C08);
      }
      uint64_t v17 = qword_100652838;
      goto LABEL_19;
    }

uint64_t sub_1003C6728(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 296LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 240LL);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)v1 + 248LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 224LL);
  uint64_t v6 = *(void *)(*(void *)v1 + 208LL);
  *(_BYTE *)(*(void *)v1 + 304LL) = a1;
  swift_task_dealloc(v2);
  v4(v5, v6);
  return swift_task_switch(sub_1003C67A4, v3, 0LL);
}

uint64_t sub_1003C67A4()
{
  if ((*(_BYTE *)(v0 + 304) & 1) != 0)
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 256));
    if (qword_100644290 != -1) {
      swift_once(&qword_100644290, sub_1003C6B78);
    }
    uint64_t v2 = *(void *)(v0 + 144);
    uint64_t v1 = *(void *)(v0 + 152);
    uint64_t v3 = *(void *)(v0 + 136);
    uint64_t v4 = *(void *)(v0 + 104);
    uint64_t v5 = type metadata accessor for Logger(0LL);
    sub_100186DE4(v5, (uint64_t)qword_100652820);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v41 = *(void *)(v0 + 288);
      uint64_t v38 = *(void *)(v0 + 144);
      uint64_t v9 = *(void *)(v0 + 128);
      uint64_t v39 = *(void *)(v0 + 136);
      uint64_t v40 = *(void *)(v0 + 280);
      uint64_t v10 = *(void *)(v0 + 112);
      uint64_t v36 = *(void *)(v0 + 120);
      uint64_t v37 = *(void *)(v0 + 152);
      uint64_t v11 = swift_slowAlloc(22LL, -1LL);
      uint64_t v42 = swift_slowAlloc(64LL, -1LL);
      uint64_t v44 = v42;
      *(_DWORD *)uint64_t v11 = 136315394;
      SFAirDropReceive.Transfer.id.getter(v42);
      unint64_t v12 = sub_10034DEF8();
      uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter(v10, v12);
      unint64_t v15 = v14;
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v9, v10);
      *(void *)(v0 + 80) = sub_10018CDB4(v13, v15, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease(v15);
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
      *(_WORD *)(v11 + 12) = 2080;
      *(void *)(v0 + 56) = v41;
      *(void *)(v0 + 64) = v40;
      uint64_t v16 = sub_100183098(&qword_100646818);
      uint64_t v17 = String.init<A>(describing:)(v0 + 56, v16);
      unint64_t v19 = v18;
      *(void *)(v0 + 88) = sub_10018CDB4(v17, v18, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v11 + 14, v11 + 22);
      swift_bridgeObjectRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Transfer %s using handler %s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy(v42, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(void, void))(*(void *)(v0 + 144) + 8LL))( *(void *)(v0 + 152),  *(void *)(v0 + 136));
    }

    sub_10019A6C4(v0 + 16, *(void *)(v0 + 96));
    sub_10018709C((void *)(v0 + 16));
    goto LABEL_10;
  }

  uint64_t v20 = *(void *)(v0 + 264);
  uint64_t v21 = *(void *)(v0 + 272) + 1LL;
  sub_10018709C((void *)(v0 + 16));
  if (v21 == v20)
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 256));
    uint64_t v22 = *(void *)(v0 + 96);
    *(void *)(v22 + 32) = 0LL;
    *(_OWORD *)uint64_t v22 = 0u;
    *(_OWORD *)(v22 + 16) = 0u;
LABEL_10:
    uint64_t v23 = *(void *)(v0 + 224);
    uint64_t v24 = *(void *)(v0 + 200);
    uint64_t v25 = *(void *)(v0 + 176);
    uint64_t v26 = *(void *)(v0 + 152);
    uint64_t v27 = *(void *)(v0 + 128);
    swift_task_dealloc(*(void *)(v0 + 232));
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  *(void *)(v0 + 272) = v21;
  uint64_t v29 = *(void *)(v0 + 256) + 16 * v21;
  uint64_t v30 = *(void *)(v29 + 40);
  *(void *)(v0 + 280) = v30;
  uint64_t v31 = *(void *)(v29 + 32);
  *(void *)(v0 + 288) = v31;
  uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t))(v30 + 40);
  *(void *)(v0 + 40) = v31;
  *(void *)(v0 + 48) = v30;
  sub_1001A4B04((void *)(v0 + 16));
  uint64_t v33 = v32(v31, v30);
  SFAirDropReceive.Transfer.askRequest.getter(v33);
  uint64_t v34 = *(int **)(v30 + 48);
  uint64_t v43 = (int *)((char *)v34 + *v34);
  uint64_t v35 = (void *)swift_task_alloc(v34[1]);
  *(void *)(v0 + 296) = v35;
  void *v35 = v0;
  v35[1] = sub_1003C6728;
  return ((uint64_t (*)(void, uint64_t, uint64_t))v43)(*(void *)(v0 + 224), v31, v30);
}

uint64_t sub_1003C6B78()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100186DFC(v0, qword_100652820);
  uint64_t v1 = sub_100186DE4(v0, (uint64_t)qword_100652820);
  if (qword_100643FD8 != -1) {
    swift_once(&qword_100643FD8, sub_10023A408);
  }
  uint64_t v2 = sub_100186DE4(v0, (uint64_t)qword_1006695F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_1003C6C08()
{
  uint64_t v0 = sub_100183098(&qword_100645220);
  uint64_t v1 = swift_allocObject(v0, 240LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_1004D9A70;
  *(void *)(v1 + 32) = type metadata accessor for SDAirDropContentHandlerCalendarEvents();
  *(void *)(v1 + 40) = &off_1005DD2B8;
  *(void *)(v1 + 48) = type metadata accessor for SDAirDropContentHandlerContacts();
  *(void *)(v1 + 56) = &off_1005DD218;
  *(void *)(v1 + 64) = type metadata accessor for SDAirDropContentHandlerNotes();
  *(void *)(v1 + 72) = &off_1005D8910;
  *(void *)(v1 + 80) = type metadata accessor for SDAirDropContentHandlerPhotos(0LL);
  *(void *)(v1 + 88) = &off_1005E1F28;
  *(void *)(v1 + 96) = type metadata accessor for SDAirDropContentHandlerProfiles();
  *(void *)(v1 + 104) = &off_1005E2138;
  *(void *)(v1 + 112) = type metadata accessor for SDAirDropContentHandlerVoiceMails();
  *(void *)(v1 + 120) = &off_1005D9F78;
  *(void *)(v1 + 128) = type metadata accessor for SDAirDropContentHandlerVoiceMemos();
  *(void *)(v1 + 136) = &off_1005D4058;
  *(void *)(v1 + 144) = type metadata accessor for SDAirDropContentHandlerWalletItems();
  *(void *)(v1 + 152) = &off_1005DC510;
  *(void *)(v1 + 160) = type metadata accessor for SDAirDropContentHandlerPDFs();
  *(void *)(v1 + 168) = &off_1005DCB68;
  *(void *)(v1 + 176) = type metadata accessor for SDAirDropContentHandleriBooksItems();
  *(void *)(v1 + 184) = &off_1005D28E0;
  *(void *)(v1 + 192) = type metadata accessor for SDAirDropContentHandlerIPA();
  *(void *)(v1 + 200) = &off_1005D6D80;
  *(void *)(v1 + 208) = type metadata accessor for SDAirDropContentHandlerPlaygroundItems();
  *(void *)(v1 + 216) = &off_1005D9310;
  uint64_t result = type metadata accessor for SDAirDropContentHandlerGenericFiles();
  *(void *)(v1 + 224) = result;
  *(void *)(v1 + 232) = &off_1005D8870;
  qword_100652838 = v1;
  return result;
}

uint64_t sub_1003C6D54()
{
  uint64_t v0 = sub_100183098(&qword_100645220);
  uint64_t v1 = swift_allocObject(v0, 304LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_1004D9A80;
  *(void *)(v1 + 32) = type metadata accessor for SDAirDropContentHandlerCredentialLinks();
  *(void *)(v1 + 40) = &off_1005DAF98;
  *(void *)(v1 + 48) = type metadata accessor for SDAirDropContentHandlerSharediCloudDocumentsLinks();
  *(void *)(v1 + 56) = &off_1005DFE08;
  *(void *)(v1 + 64) = type metadata accessor for SDAirDropContentHandlerKeynoteLiveLinks();
  *(void *)(v1 + 72) = &off_1005D82C8;
  *(void *)(v1 + 80) = type metadata accessor for SDAirDropContentHandlerFindMyFriendsLinks();
  *(void *)(v1 + 88) = &off_1005D50F8;
  *(void *)(v1 + 96) = type metadata accessor for SDAirDropContentHandleriWorkLinks();
  *(void *)(v1 + 104) = &off_1005D7B40;
  *(void *)(v1 + 112) = type metadata accessor for SDAirDropContentHandlerAppStoreLinks();
  *(void *)(v1 + 120) = &off_1005D58B0;
  *(void *)(v1 + 128) = type metadata accessor for SDAirDropContentHandlerPhoneLinks();
  *(void *)(v1 + 136) = &off_1005DC470;
  *(void *)(v1 + 144) = type metadata accessor for SDAirDropContentHandleriBooksLinks();
  *(void *)(v1 + 152) = &off_1005E28B0;
  *(void *)(v1 + 160) = type metadata accessor for SDAirDropContentHandlerPodcastsLinks();
  *(void *)(v1 + 168) = &off_1005D6550;
  *(void *)(v1 + 176) = type metadata accessor for SDAirDropContentHandleriTunesULinks();
  *(void *)(v1 + 184) = &off_1005D6FB8;
  *(void *)(v1 + 192) = type metadata accessor for SDAirDropContentHandleriTunesStoreLinks();
  *(void *)(v1 + 200) = &off_1005E21C8;
  *(void *)(v1 + 208) = type metadata accessor for SDAirDropContentHandleriLifeLinks();
  *(void *)(v1 + 216) = &off_1005E1B10;
  *(void *)(v1 + 224) = type metadata accessor for SDAirDropContentHandlerMapsLinks();
  *(void *)(v1 + 232) = &off_1005D5380;
  *(void *)(v1 + 240) = type metadata accessor for SDAirDropContentHandlerNewsLinks();
  *(void *)(v1 + 248) = &off_1005E0C90;
  *(void *)(v1 + 256) = type metadata accessor for SDAirDropContentHandleriCloudFamilyLinks();
  *(void *)(v1 + 264) = &off_1005D4CA8;
  *(void *)(v1 + 272) = type metadata accessor for SDAirDropContentHandlerGenericLinks();
  *(void *)(v1 + 280) = &off_1005D6C50;
  uint64_t result = type metadata accessor for SDAirDropContentHandlerWebLinks();
  *(void *)(v1 + 288) = result;
  *(void *)(v1 + 296) = &off_1005D4650;
  qword_100652840 = v1;
  return result;
}

uint64_t sub_1003C6EF0(uint64_t a1)
{
  return sub_1003C6FAC( a1,  (uint64_t (*)(void))type metadata accessor for SDAirDropContentHandlerExchange,  (uint64_t)&off_1005D5930,  &qword_100652848);
}

uint64_t sub_1003C6F0C()
{
  uint64_t v0 = sub_100183098(&qword_100645220);
  uint64_t v1 = swift_allocObject(v0, 80LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_1004CD550;
  *(void *)(v1 + 32) = type metadata accessor for SDAirDropContentHandlerUnsupportedLinkType();
  *(void *)(v1 + 40) = &off_1005E1A58;
  *(void *)(v1 + 48) = type metadata accessor for SDAirDropContentHandlerUnsupportedFileType();
  *(void *)(v1 + 56) = &off_1005DA210;
  uint64_t result = type metadata accessor for SDAirDropContentHandlerMixedTypes();
  *(void *)(v1 + 64) = result;
  *(void *)(v1 + 72) = &off_1005D4FE0;
  qword_100652850 = v1;
  return result;
}

uint64_t sub_1003C6F90(uint64_t a1)
{
  return sub_1003C6FAC( a1,  (uint64_t (*)(void))type metadata accessor for SDAirDropContentHandlerPeerPayment,  (uint64_t)&off_1005D9230,  &qword_100652858);
}

uint64_t sub_1003C6FAC(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = sub_100183098(&qword_100645220);
  uint64_t v8 = swift_allocObject(v7, 48LL, 7LL);
  *(_OWORD *)(v8 + 16) = xmmword_1004CDCA0;
  uint64_t result = a2(0LL);
  *(void *)(v8 + 32) = result;
  *(void *)(v8 + 40) = a3;
  *a4 = v8;
  return result;
}

uint64_t type metadata accessor for SDAirDropContentHandlerFactory()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary30SDAirDropContentHandlerFactory);
}

BOOL sub_1003C7034(uint64_t a1, uint64_t a2)
{
  return ((*(uint64_t (**)(void))(a2 + 24))() & 1) == 0;
}

uint64_t sub_1003C7058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SFPlatform(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static SFPlatform.macOS.getter(v8);
  char v11 = static SFPlatform.isPlatform(_:)(v10);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 56))(a1, 1LL, a2, a3);
  }
  NSString v12 = String._bridgeToObjectiveC()();
  id v14 = (id)SFLocalizedStringForKey(v12, v13);

  if (v14)
  {
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v17 = v16;
  }

  else
  {
    uint64_t v17 = (const char *)0xEE00402431252067LL;
    uint64_t v15 = 0x6E69766965636552LL;
  }

  uint64_t v19 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(a3 + 56))(a1, 0LL, a2, a3);
  uint64_t v21 = v20;
  uint64_t v22 = sub_100183098(&qword_1006483E0);
  uint64_t v23 = swift_allocObject(v22, 72LL, 7LL);
  *(_OWORD *)(v23 + 16) = xmmword_1004CDCA0;
  *(void *)(v23 + 56) = &type metadata for String;
  *(void *)(v23 + 64) = sub_10021366C();
  *(void *)(v23 + 32) = v19;
  *(void *)(v23 + 40) = v21;
  uint64_t v18 = static String.localizedStringWithFormat(_:_:)(v15, v17, v23);
  *(void *)&double v24 = swift_bridgeObjectRelease((const char *)v23).n128_u64[0];
  swift_bridgeObjectRelease(v17, v24);
  return v18;
}

uint64_t sub_1003C7220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SFPlatform(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = SFAirDropReceive.AskRequest.senderIsMe.getter(v8);
  char v12 = v11;
  static SFPlatform.macOS.getter(v11);
  char v13 = static SFPlatform.isPlatform(_:)(v10);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  id v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 56);
  if ((v12 & 1) != 0)
  {
    if ((v13 & 1) != 0)
    {
      uint64_t v15 = v14(a1, 0LL, a2, a3);
      uint64_t v17 = v16;
      NSString v18 = String._bridgeToObjectiveC()();
      id v20 = (id)SFLocalizedStringForKey(v18, v19);

      if (v20)
      {
        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        uint64_t v23 = v22;
      }

      else
      {
        uint64_t v23 = (const char *)0xED00004024312520LL;
        uint64_t v21 = 0x6465766965636552LL;
      }

      uint64_t v43 = sub_100183098(&qword_1006483E0);
      uint64_t v44 = swift_allocObject(v43, 72LL, 7LL);
      *(_OWORD *)(v44 + 16) = xmmword_1004CDCA0;
      *(void *)(v44 + 56) = &type metadata for String;
      *(void *)(v44 + 64) = sub_10021366C();
      *(void *)(v44 + 32) = v15;
      *(void *)(v44 + 40) = v17;
      uint64_t v33 = static String.localizedStringWithFormat(_:_:)(v21, v23, v44);
      *(void *)&double v45 = swift_bridgeObjectRelease((const char *)v44).n128_u64[0];
      swift_bridgeObjectRelease(v23, v45);
    }

    else
    {
      return v14(a1, 1LL, a2, a3);
    }
  }

  else if ((v13 & 1) != 0)
  {
    uint64_t v24 = 0xD000000000000017LL;
    uint64_t v25 = v14(a1, 0LL, a2, a3);
    uint64_t v27 = v26;
    NSString v28 = String._bridgeToObjectiveC()();
    id v30 = (id)SFLocalizedStringForKey(v28, v29);

    if (v30)
    {
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      uint64_t v32 = v31;
    }

    else
    {
      uint64_t v32 = (const char *)0x800000010050D510LL;
    }

    uint64_t v46 = sub_100183098(&qword_1006483E0);
    uint64_t v47 = swift_allocObject(v46, 112LL, 7LL);
    *(_OWORD *)(v47 + 16) = xmmword_1004CD530;
    *(void *)(v47 + 56) = &type metadata for String;
    unint64_t v48 = sub_10021366C();
    *(void *)(v47 + 64) = v48;
    *(void *)(v47 + 32) = v25;
    *(void *)(v47 + 40) = v27;
    uint64_t v49 = SFAirDropReceive.AskRequest.senderDisplayName.getter(v48);
    *(void *)(v47 + 96) = &type metadata for String;
    *(void *)(v47 + 104) = v48;
    *(void *)(v47 + 72) = v49;
    *(void *)(v47 + 80) = v50;
    uint64_t v33 = static String.localizedStringWithFormat(_:_:)(v24, v32, v47);
    *(void *)&double v51 = swift_bridgeObjectRelease((const char *)v47).n128_u64[0];
    swift_bridgeObjectRelease(v32, v51);
  }

  else
  {
    uint64_t v34 = v14(a1, 1LL, a2, a3);
    uint64_t v36 = v35;
    NSString v37 = String._bridgeToObjectiveC()();
    id v39 = (id)SFLocalizedStringForKey(v37, v38);

    if (v39)
    {
      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      uint64_t v42 = v41;
    }

    else
    {
      uint64_t v42 = (const char *)0xEE0040243225206DLL;
      uint64_t v40 = 0x6F72662040243125LL;
    }

    uint64_t v52 = sub_100183098(&qword_1006483E0);
    uint64_t v53 = swift_allocObject(v52, 112LL, 7LL);
    *(_OWORD *)(v53 + 16) = xmmword_1004CD530;
    *(void *)(v53 + 56) = &type metadata for String;
    unint64_t v54 = sub_10021366C();
    *(void *)(v53 + 64) = v54;
    *(void *)(v53 + 32) = v34;
    *(void *)(v53 + 40) = v36;
    uint64_t v55 = SFAirDropReceive.AskRequest.senderDisplayName.getter(v54);
    *(void *)(v53 + 96) = &type metadata for String;
    *(void *)(v53 + 104) = v54;
    *(void *)(v53 + 72) = v55;
    *(void *)(v53 + 80) = v56;
    uint64_t v33 = static String.localizedStringWithFormat(_:_:)(v40, v42, v53);
    *(void *)&double v57 = swift_bridgeObjectRelease((const char *)v53).n128_u64[0];
    swift_bridgeObjectRelease(v42, v57);
  }

  return v33;
}

uint64_t sub_1003C7618()
{
  return 0LL;
}

uint64_t sub_1003C7624(uint64_t a1)
{
  return sub_1003CC7B4(a1);
}

uint64_t sub_1003C7634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[20] = a5;
  v6[21] = v5;
  v6[18] = a3;
  v6[19] = a4;
  v6[16] = a1;
  v6[17] = a2;
  uint64_t v8 = *(void *)(sub_100183098(&qword_100646830) - 8);
  v6[22] = v8;
  uint64_t v9 = *(void *)(v8 + 64);
  v6[23] = v9;
  v6[24] = swift_task_alloc((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100183098(&qword_100646560);
  v6[25] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100183098(&qword_1006451B0);
  v6[26] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v6[27] = v12;
  v6[28] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for SFAirDropReceive.Transfer(0LL);
  v6[29] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v6[30] = v14;
  v6[31] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Date(0LL);
  v6[32] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v6[33] = v16;
  unint64_t v17 = (*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[34] = swift_task_alloc(v17);
  v6[35] = swift_task_alloc(v17);
  uint64_t v18 = type metadata accessor for UUID(0LL);
  v6[36] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v6[37] = v19;
  unint64_t v20 = (*(void *)(v19 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[38] = swift_task_alloc(v20);
  v6[39] = swift_task_alloc(v20);
  uint64_t v21 = type metadata accessor for SFAirDropReceive.ItemDestination(0LL);
  v6[40] = v21;
  uint64_t v22 = *(void *)(v21 - 8);
  v6[41] = v22;
  v6[42] = swift_task_alloc((*(void *)(v22 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = sub_100183098(&qword_1006451E8);
  v6[43] = v23;
  uint64_t v24 = *(void *)(v23 - 8);
  v6[44] = v24;
  v6[45] = swift_task_alloc((*(void *)(v24 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for SFAirDropReceive.AskRequest(0LL);
  v6[46] = v25;
  uint64_t v26 = *(void *)(v25 - 8);
  v6[47] = v26;
  v6[48] = swift_task_alloc((*(void *)(v26 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = *(void *)(a4 - 8);
  v6[49] = v27;
  unint64_t v28 = (*(void *)(v27 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[50] = swift_task_alloc(v28);
  v6[51] = swift_task_alloc(v28);
  uint64_t v29 = type metadata accessor for SFAirDrop.ButtonConfiguration(0LL);
  v6[52] = v29;
  uint64_t v30 = *(void *)(v29 - 8);
  v6[53] = v30;
  unint64_t v31 = (*(void *)(v30 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[54] = swift_task_alloc(v31);
  v6[55] = swift_task_alloc(v31);
  v6[56] = swift_task_alloc(v31);
  v6[57] = swift_task_alloc(v31);
  uint64_t v32 = type metadata accessor for SFAirDrop.DeclineAction(0LL);
  v6[58] = v32;
  uint64_t v33 = *(void *)(v32 - 8);
  v6[59] = v33;
  unint64_t v34 = (*(void *)(v33 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[60] = swift_task_alloc(v34);
  v6[61] = swift_task_alloc(v34);
  uint64_t v35 = sub_100183098(&qword_100650B80);
  v6[62] = v35;
  uint64_t v36 = *(void *)(v35 - 8);
  v6[63] = v36;
  uint64_t v37 = *(void *)(v36 + 64);
  v6[64] = v37;
  unint64_t v38 = (v37 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v6[65] = swift_task_alloc(v38);
  v6[66] = swift_task_alloc(v38);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_1003C792C, static AirDropActor.shared, 0LL);
}

uint64_t sub_1003C792C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  id v6 = (id)SFLocalizedStringForKey(v4, v5);

  uint64_t v207 = (__int128 *)(v3 + 56);
  if (v6)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    unint64_t v9 = v8;
  }

  else
  {
    unint64_t v9 = 0xE700000000000000LL;
    uint64_t v7 = 0x656E696C636544LL;
  }

  uint64_t v10 = *(void *)(v3 + 528);
  uint64_t v11 = *(void *)(v3 + 520);
  uint64_t v13 = *(void *)(v3 + 504);
  uint64_t v12 = *(void *)(v3 + 512);
  uint64_t v14 = *(void *)(v3 + 496);
  uint64_t v15 = *(uint64_t **)(v3 + 456);
  uint64_t v16 = *(void *)(v3 + 416);
  uint64_t v17 = *(void *)(v3 + 424);
  uint64_t v198 = *(void *)(v3 + 392);
  uint64_t v201 = *(void *)(v3 + 168);
  uint64_t v204 = *(void *)(v3 + 408);
  uint64_t v18 = *(void *)(v3 + 152);
  *uint64_t v15 = v7;
  v15[1] = v9;
  v185 = *(void (**)(void))(v17 + 104);
  ((void (*)(uint64_t *, void, uint64_t))v185)( v15,  enum case for SFAirDrop.ButtonConfiguration.text(_:),  v16);
  uint64_t v192 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  v192(v11, v10, v14);
  uint64_t v19 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v20 = (v19 + 16) & ~v19;
  uint64_t v189 = v20 + v12;
  uint64_t v191 = v19;
  uint64_t v187 = v19 | 7;
  uint64_t v21 = swift_allocObject(&unk_1005DEE90, v20 + v12, v19 | 7);
  v193 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
  v193(v21 + v20, v11, v14);
  SFAirDrop.DeclineAction.init(id:buttonConfiguration:hidden:operation:)( 0x656E696C636544LL,  0xE700000000000000LL,  v15,  0LL,  sub_1003CE514,  v21);
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v198 + 16);
  v22(v204, v201, v18);
  uint64_t v23 = sub_100183098(&qword_100652980);
  uint64_t v194 = v22;
  if (swift_dynamicCast(v207, v204, v18, v23, 6LL))
  {
    uint64_t v24 = *(void *)(v3 + 528);
    uint64_t v26 = *(void *)(v3 + 376);
    uint64_t v25 = *(void *)(v3 + 384);
    uint64_t v27 = *(void *)(v3 + 368);
    sub_1001CE0D0(v207, v3 + 16);
    uint64_t v28 = *(void *)(v3 + 40);
    uint64_t v29 = *(void *)(v3 + 48);
    uint64_t v30 = sub_10019A708((void *)(v3 + 16), v28);
    SFAirDropReceive.Transfer.askRequest.getter(v30);
    uint64_t v205 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 8))(v25, v24, v28, v29);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
    uint64_t v31 = sub_10018709C((void *)(v3 + 16));
  }

  else
  {
    *uint64_t v207 = 0u;
    *(_OWORD *)(v3 + 72) = 0u;
    *(void *)(v3 + 88) = 0LL;
    uint64_t v32 = sub_100187100((uint64_t)v207, &qword_100652988);
    uint64_t v181 = v20;
    if ((SFAirDropReceive.Transfer.isPreviewSensitive.getter(v32) & 1) != 0)
    {
      NSString v33 = String._bridgeToObjectiveC()();
      id v35 = (id)SFLocalizedStringForKey(v33, v34);

      if (v35)
      {
        uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
        unint64_t v38 = v37;
      }

      else
      {
        unint64_t v38 = 0xE400000000000000LL;
        uint64_t v36 = 2003789907LL;
      }

      double v45 = (void *)(v3 + 440);
      uint64_t v46 = *(void **)(v3 + 440);
      *uint64_t v46 = 0x6C6C69662E657965LL;
      v46[1] = 0xE800000000000000LL;
      v46[2] = v36;
      uint64_t v46[3] = v38;
      v185();
      uint64_t v47 = (void *)0x800000010050D790LL;
      unint64_t v48 = 0xD000000000000010LL;
    }

    else
    {
      NSString v39 = String._bridgeToObjectiveC()();
      id v41 = (id)SFLocalizedStringForKey(v39, v40);

      if (v41)
      {
        uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
        unint64_t v44 = v43;
      }

      else
      {
        unint64_t v44 = 0xE600000000000000LL;
        uint64_t v42 = 0x747065636341LL;
      }

      double v45 = (void *)(v3 + 432);
      uint64_t v49 = *(uint64_t **)(v3 + 432);
      *uint64_t v49 = v42;
      v49[1] = v44;
      v185();
      uint64_t v47 = (void *)0xE700000000000000LL;
      unint64_t v48 = 0x72616C75676552LL;
    }

    uint64_t v177 = v48;
    uint64_t v50 = *(void *)(v3 + 520);
    uint64_t v51 = *(void *)(v3 + 496);
    uint64_t v52 = *(void *)(v3 + 448);
    uint64_t v53 = *(void *)(v3 + 456);
    uint64_t v54 = *(void *)(v3 + 416);
    uint64_t v179 = *(void *)(v3 + 360);
    uint64_t v199 = *(void *)(v3 + 424);
    uint64_t v202 = *(void *)(v3 + 352);
    uint64_t v208 = *(void *)(v3 + 344);
    uint64_t v55 = *(void *)(v3 + 328);
    uint64_t v173 = *(void *)(v3 + 336);
    uint64_t v175 = *(void *)(v3 + 528);
    uint64_t v171 = *(void *)(v3 + 320);
    (*(void (**)(uint64_t, void, uint64_t))(v199 + 32))(v52, *v45, v54);
    sub_100183098(&qword_100650B98);
    v56._uint64_t countAndFlagsBits = v177;
    v56._object = v47;
    String.append(_:)(v56);
    swift_bridgeObjectRelease(v47);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v199 + 16))(v53, v52, v54);
    (*(void (**)(uint64_t, void, uint64_t))(v55 + 104))( v173,  enum case for SFAirDropReceive.ItemDestination.default(_:),  v171);
    v192(v50, v175, v51);
    uint64_t v57 = swift_allocObject(&unk_1005DEEB8, v189, v187);
    v193(v57 + v181, v50, v51);
    uint64_t v58 = sub_100183F14( &qword_100650B88,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
    uint64_t v59 = sub_100183F14( &qword_100650B90,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
    uint64_t v60 = sub_100183F14( &qword_100646840,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
    uint64_t v61 = SFAirDrop.AcceptAction.Single.init(id:buttonConfiguration:prominent:hidden:defaultAnswer:operation:)( 0x2D747065636341LL,  0xE700000000000000LL,  v53,  1LL,  0LL,  v173,  sub_1003CE01C,  v57,  v171,  v58,  v59,  v60);
    UUID.init()(v61);
    (*(void (**)(uint64_t, void, uint64_t))(v202 + 104))( v179,  enum case for SFAirDrop.AcceptAction.single<A>(_:),  v208);
    uint64_t v62 = sub_100183098(&qword_1006451E0);
    uint64_t v63 = *(unsigned __int8 *)(v202 + 80);
    uint64_t v64 = (v63 + 32) & ~v63;
    uint64_t v65 = swift_allocObject(v62, v64 + *(void *)(v202 + 72), v63 | 7);
    *(_OWORD *)(v65 + 16) = xmmword_1004CDCA0;
    uint64_t v205 = v65;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v202 + 32))(v65 + v64, v179, v208);
    uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v199 + 8))(v52, v54);
  }

  uint64_t v66 = UUID.init()(v31);
  static Date.now.getter(v66);
  NSString v67 = String._bridgeToObjectiveC()();
  id v69 = (id)SFLocalizedStringForKey(v67, v68);

  if (v69)
  {
    uint64_t v190 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
    unint64_t v203 = v71;
  }

  else
  {
    uint64_t v190 = 0x706F7244726941LL;
    unint64_t v203 = 0xE700000000000000LL;
  }

  uint64_t v72 = SFAirDropReceive.Transfer.isPreviewSensitive.getter(v70);
  char v73 = v72;
  SFAirDropReceive.Transfer.askRequest.getter(v72);
  if ((v73 & 1) != 0)
  {
    uint64_t v74 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 + 376) + 8LL);
    uint64_t v75 = ((uint64_t (*)(void, void))v74)(*(void *)(v3 + 384), *(void *)(v3 + 368));
    uint64_t v200 = 0LL;
    unint64_t v209 = 0xE000000000000000LL;
  }

  else
  {
    uint64_t v76 = *(void *)(v3 + 400);
    uint64_t v77 = *(void *)(v3 + 376);
    uint64_t v78 = *(void *)(v3 + 384);
    uint64_t v79 = *(void *)(v3 + 368);
    uint64_t v80 = *(void *)(v3 + 240);
    uint64_t v210 = *(void *)(v3 + 248);
    uint64_t v182 = *(void *)(v3 + 232);
    uint64_t v81 = *(void *)(v3 + 168);
    uint64_t v82 = *(void *)(v3 + 152);
    uint64_t v83 = *(void *)(v3 + 136);
    uint64_t v200 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v3 + 160) + 80LL))(v78, 0LL, v82);
    unint64_t v85 = v84;
    uint64_t v86 = *(void (**)(uint64_t, uint64_t))(v77 + 8);
    v86(v78, v79);
    v194(v76, v81, v82);
    uint64_t v87 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v80 + 16))(v210, v83, v182);
    uint64_t v89 = *(void *)(v3 + 392);
    uint64_t v88 = *(void *)(v3 + 400);
    unint64_t v209 = v85;
    if (v85)
    {
      uint64_t v90 = *(void *)(v3 + 152);
      (*(void (**)(void, void))(*(void *)(v3 + 240) + 8LL))( *(void *)(v3 + 248),  *(void *)(v3 + 232));
      uint64_t v75 = (*(uint64_t (**)(uint64_t, uint64_t))(v89 + 8))(v88, v90);
    }

    else
    {
      uint64_t v91 = *(void *)(v3 + 384);
      uint64_t v92 = *(void *)(v3 + 368);
      uint64_t v93 = *(void *)(v3 + 248);
      uint64_t v183 = *(void *)(v3 + 240);
      uint64_t v195 = *(void *)(v3 + 232);
      uint64_t v95 = *(void *)(v3 + 152);
      uint64_t v94 = *(void *)(v3 + 160);
      SFAirDropReceive.Transfer.askRequest.getter(v87);
      uint64_t v200 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v94 + 56))(v91, 0LL, v95, v94);
      unint64_t v209 = v96;
      v86(v91, v92);
      (*(void (**)(uint64_t, uint64_t))(v183 + 8))(v93, v195);
      uint64_t v75 = (*(uint64_t (**)(uint64_t, uint64_t))(v89 + 8))(v88, v95);
    }

    uint64_t v74 = v86;
  }

  uint64_t v97 = *(void *)(v3 + 384);
  uint64_t v98 = *(void *)(v3 + 368);
  uint64_t v99 = *(void *)(v3 + 160);
  uint64_t v100 = *(void *)(v3 + 152);
  SFAirDropReceive.Transfer.askRequest.getter(v75);
  uint64_t v101 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v99 + 88))(v97, v100, v99);
  unint64_t v103 = v102;
  v196 = v74;
  v74(v97, v98);
  if (v103)
  {
    unint64_t v104 = v103;
  }

  else
  {
    uint64_t v101 = 0xD000000000000010LL;
    unint64_t v104 = 0x800000010050D750LL;
  }

  NSString v105 = String._bridgeToObjectiveC()();
  id v107 = (id)SFLocalizedStringForKey(v105, v106);

  if (v107)
  {
    uint64_t v108 = static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
    uint64_t v110 = v109;
  }

  else
  {
    uint64_t v108 = 0LL;
    uint64_t v110 = 0LL;
  }

  *(void *)(v3 + 112) = v108;
  *(void *)(v3 + 120) = v110;
  uint64_t v111 = sub_100183098(&qword_1006462D8);
  Optional.tryUnwrap(_:file:line:)(v101, v104, 0xD000000000000066LL, 0x800000010050D570LL, 107LL, v111);
  uint64_t v112 = *(void *)(v3 + 384);
  uint64_t v113 = *(void *)(v3 + 368);
  swift_bridgeObjectRelease(v104);
  swift_bridgeObjectRelease(v110);
  uint64_t v168 = *(void *)(v3 + 96);
  uint64_t v169 = *(void *)(v3 + 104);
  uint64_t v114 = sub_100183098(&qword_1006483E0);
  uint64_t v115 = swift_allocObject(v114, 112LL, 7LL);
  *(_OWORD *)(v115 + 16) = xmmword_1004CD530;
  uint64_t v116 = SFAirDropReceive.Transfer.askRequest.getter(v115);
  SFAirDropReceive.AskRequest.senderDisplayName.getter(v116);
  uint64_t v118 = v117;
  v196(v112, v113);
  NSString v119 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v118);
  id v120 = (id)SFTruncateAirDropSenderNameForUI(v119);

  if (v120)
  {
    uint64_t v184 = *(void *)(v3 + 528);
    uint64_t v151 = *(void *)(v3 + 520);
    uint64_t v152 = *(void *)(v3 + 512);
    uint64_t v157 = *(void *)(v3 + 504);
    uint64_t v150 = *(void *)(v3 + 496);
    uint64_t v170 = *(void *)(v3 + 480);
    uint64_t v186 = *(void *)(v3 + 472);
    uint64_t v188 = *(void *)(v3 + 488);
    uint64_t v206 = *(void *)(v3 + 464);
    uint64_t v158 = *(void *)(v3 + 456);
    uint64_t v159 = *(void *)(v3 + 448);
    uint64_t v160 = *(void *)(v3 + 440);
    uint64_t v161 = *(void *)(v3 + 432);
    uint64_t v162 = *(void *)(v3 + 408);
    uint64_t v163 = *(void *)(v3 + 400);
    uint64_t v164 = *(void *)(v3 + 384);
    uint64_t v165 = *(void *)(v3 + 360);
    uint64_t v166 = *(void *)(v3 + 336);
    uint64_t v121 = *(void *)(v3 + 312);
    uint64_t v145 = *(void *)(v3 + 320);
    uint64_t v122 = *(void *)(v3 + 296);
    uint64_t v123 = *(void *)(v3 + 304);
    uint64_t v124 = *(void *)(v3 + 288);
    uint64_t v174 = *(void *)(v3 + 272);
    uint64_t v176 = *(void *)(v3 + 264);
    uint64_t v178 = *(void *)(v3 + 256);
    uint64_t v180 = *(void *)(v3 + 280);
    uint64_t v167 = *(void *)(v3 + 248);
    uint64_t v197 = *(void *)(v3 + 224);
    uint64_t v155 = *(void *)(v3 + 216);
    uint64_t v156 = *(void *)(v3 + 208);
    uint64_t v146 = *(void *)(v3 + 200);
    uint64_t v172 = *(void *)(v3 + 192);
    uint64_t v148 = *(void *)(v3 + 176);
    uint64_t v149 = *(void *)(v3 + 184);
    uint64_t v147 = *(void *)(v3 + 144);
    uint64_t v154 = *(void *)(v3 + 128);
    uint64_t v125 = static String._unconditionallyBridgeFromObjectiveC(_:)(v120);
    uint64_t v127 = v126;

    *(void *)(v115 + 56) = &type metadata for String;
    unint64_t v128 = sub_10021366C();
    *(void *)(v115 + 32) = v125;
    *(void *)(v115 + 40) = v127;
    *(void *)(v115 + 96) = &type metadata for String;
    *(void *)(v115 + 104) = v128;
    *(void *)(v115 + 64) = v128;
    *(void *)(v115 + 72) = v200;
    *(void *)(v115 + 80) = v209;
    uint64_t v129 = static String.localizedStringWithFormat(_:_:)(v168, v169, v115);
    uint64_t v131 = v130;
    swift_bridgeObjectRelease(v169);
    swift_bridgeObjectRelease(v115);
    uint64_t v153 = v123;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v122 + 16))(v123, v121, v124);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v176 + 16))(v174, v180, v178);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v186 + 16))(v170, v188, v206);
    uint64_t v132 = sub_100183F14( &qword_100650B88,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
    uint64_t v133 = sub_100183F14( &qword_100650B90,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
    uint64_t v134 = sub_100183F14( &qword_100646840,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
    LOBYTE(v144) = 0;
    SFAirDrop.PermissionRequest.init(id:requestDate:title:prompt:acceptActions:declineAction:isAnswered:)( v123,  v174,  v190,  v203,  v129,  v131,  v205,  v170,  v144,  v145,  v132,  v133,  v134);
    uint64_t v135 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v135 - 8) + 56LL))(v146, 1LL, 1LL, v135);
    sub_1003CE5C4(v147, v172);
    v192(v151, v184, v150);
    uint64_t v136 = static AirDropActor.shared;
    uint64_t v137 = sub_100183F14( (unint64_t *)&qword_100656410,  (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor,  (uint64_t)&protocol conformance descriptor for AirDropActor);
    uint64_t v138 = *(unsigned __int8 *)(v148 + 80);
    uint64_t v139 = (v138 + 32) & ~v138;
    uint64_t v140 = (v149 + v191 + v139) & ~v191;
    uint64_t v141 = swift_allocObject(&unk_1005DEEE0, v140 + v152, v191 | v138 | 7);
    *(void *)(v141 + 16) = v136;
    *(void *)(v141 + 24) = v137;
    sub_1003CE70C(v172, v141 + v139);
    v193(v141 + v140, v151, v150);
    swift_retain(v136);
    uint64_t v142 = sub_1001B342C(v146, (uint64_t)&unk_100652998, v141);
    (*(void (**)(uint64_t, uint64_t))(v176 + 8))(v180, v178);
    (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v121, v124);
    (*(void (**)(uint64_t, uint64_t))(v186 + 8))(v188, v206);
    (*(void (**)(uint64_t, uint64_t))(v157 + 8))(v184, v150);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v155 + 32))(v154, v197, v156);
    *(void *)(v154 + *(int *)(sub_100183098(&qword_100646800) + 52)) = v142;
    swift_task_dealloc(v184);
    swift_task_dealloc(v151);
    swift_task_dealloc(v188);
    swift_task_dealloc(v170);
    swift_task_dealloc(v158);
    swift_task_dealloc(v159);
    swift_task_dealloc(v160);
    swift_task_dealloc(v161);
    swift_task_dealloc(v162);
    swift_task_dealloc(v163);
    swift_task_dealloc(v164);
    swift_task_dealloc(v165);
    swift_task_dealloc(v166);
    swift_task_dealloc(v121);
    swift_task_dealloc(v153);
    swift_task_dealloc(v180);
    swift_task_dealloc(v174);
    swift_task_dealloc(v167);
    swift_task_dealloc(v197);
    swift_task_dealloc(v146);
    swift_task_dealloc(v172);
    return (*(uint64_t (**)(void))(v3 + 8))();
  }

  else
  {
    uint64_t result = swift_bridgeObjectRelease(v205);
    __break(1u);
  }

  return result;
}

uint64_t sub_1003C894C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v67 = a5;
  uint64_t v68 = a8;
  uint64_t v65 = a6;
  uint64_t v66 = a7;
  uint64_t v64 = a4;
  v57._uint64_t countAndFlagsBits = a2;
  v57._object = a3;
  uint64_t v55 = a1;
  uint64_t v69 = a9;
  uint64_t v9 = type metadata accessor for SFProgressTask(0LL, a6, a7);
  uint64_t v61 = *(void *)(v9 - 8);
  uint64_t v62 = v9;
  uint64_t v63 = *(void *)(v61 + 64);
  __chkstk_darwin(v9);
  uint64_t v60 = (char *)&v53 - v10;
  uint64_t v11 = type metadata accessor for SFAirDropReceive.Transfer(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v58 = v11;
  uint64_t v59 = v13;
  uint64_t v14 = v12;
  __chkstk_darwin(v11);
  Swift::String v56 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for SFAirDrop.ButtonConfiguration(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v70 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v21 = (uint64_t *)((char *)&v53 - v20);
  uint64_t v22 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v53 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = SFAirDropReceive.Transfer.id.getter(v24);
  uint64_t v28 = SFAirDrop.TransferIdentifier.shortIdentifier.getter(v27);
  uint64_t v30 = v29;
  (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v22);
  uint64_t v71 = 0x2D6C65636E6143LL;
  uint64_t v72 = (const char *)0xE700000000000000LL;
  v31._uint64_t countAndFlagsBits = v28;
  v31._object = v30;
  String.append(_:)(v31);
  *(void *)&double v32 = swift_bridgeObjectRelease((const char *)v30).n128_u64[0];
  NSString v33 = v72;
  swift_bridgeObjectRetain(v72, v32);
  v34._uint64_t countAndFlagsBits = 45LL;
  v34._object = (void *)0xE100000000000000LL;
  String.append(_:)(v34);
  *(void *)&double v35 = swift_bridgeObjectRelease(v33).n128_u64[0];
  uint64_t v36 = v72;
  swift_bridgeObjectRetain(v72, v35);
  String.append(_:)(v57);
  __n128 v37 = swift_bridgeObjectRelease(v36);
  v57._uint64_t countAndFlagsBits = (uint64_t)v72;
  v57._object = (void *)v71;
  *uint64_t v21 = 0x662E657261757173LL;
  v21[1] = 0xEB000000006C6C69LL;
  uint64_t v53 = v16;
  uint64_t v54 = v17;
  (*(void (**)(void *, void, uint64_t, __n128))(v17 + 104))( v21,  enum case for SFAirDrop.ButtonConfiguration.symbol(_:),  v16,  v37);
  (*(void (**)(char *, void *, uint64_t))(v17 + 16))(v70, v21, v16);
  uint64_t v38 = v14;
  NSString v39 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v40 = v56;
  uint64_t v41 = v58;
  v39(v56, v55, v58);
  unint64_t v43 = v60;
  uint64_t v42 = v61;
  uint64_t v44 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v60, v64, v62);
  uint64_t v45 = *(unsigned __int8 *)(v38 + 80);
  uint64_t v46 = (v45 + 48) & ~v45;
  uint64_t v47 = *(unsigned __int8 *)(v42 + 80);
  uint64_t v48 = (v59 + v47 + v46) & ~v47;
  uint64_t v49 = (char *)swift_allocObject(&unk_1005DEDF0, v48 + v63, v45 | v47 | 7);
  uint64_t v50 = v65;
  *((void *)v49 + 2) = v67;
  *((void *)v49 + 3) = v50;
  uint64_t v51 = v68;
  *((void *)v49 + 4) = v66;
  *((void *)v49 + 5) = v51;
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(&v49[v46], v40, v41);
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(&v49[v48], v43, v44);
  SFAirDrop.DeclineAction.init(id:buttonConfiguration:hidden:operation:)( v57._object,  v57._countAndFlagsBits,  v70,  0LL,  sub_1003CE340,  v49);
  return (*(uint64_t (**)(void *, uint64_t))(v54 + 8))(v21, v53);
}

uint64_t sub_1003C8C9C@<X0>( uint64_t a1@<X0>, const char *a2@<X2>, int a3@<W3>, const char *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  id v120 = a4;
  unint64_t v8 = v7;
  uint64_t v125 = a6;
  LODWORD(v128) = a3;
  NSString v119 = a2;
  uint64_t v129 = a1;
  uint64_t v113 = a7;
  uint64_t v112 = type metadata accessor for SFAirDropReceive.Transfer(0LL);
  uint64_t v111 = *(void *)(v112 - 8);
  __chkstk_darwin(v112);
  uint64_t v110 = v10;
  uint64_t v116 = (char *)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100183098(&qword_100646560);
  __chkstk_darwin(v11);
  uint64_t v115 = (uint64_t)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v13);
  id v107 = (char *)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for UUID(0LL);
  __chkstk_darwin(v15);
  uint64_t v106 = (char *)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v109 = sub_100183098(&qword_1006451B0);
  uint64_t v108 = *(void *)(v109 - 8);
  __chkstk_darwin(v109);
  uint64_t v114 = (char *)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v104 = type metadata accessor for SFAirDropReceive.AskRequest(0LL);
  uint64_t v103 = *(void *)(v104 - 8);
  __chkstk_darwin(v104);
  unint64_t v102 = (char *)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v117 = (void (*)(uint64_t, char *, uint64_t))type metadata accessor for SFAirDrop.ButtonConfiguration(0LL);
  uint64_t v19 = *((void *)v117 - 1);
  __chkstk_darwin(v117);
  uint64_t v21 = (uint64_t *)((char *)&v97 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v22 = type metadata accessor for SFAirDrop.DeclineAction(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v126 = v22;
  uint64_t v127 = v23;
  uint64_t v24 = __chkstk_darwin(v22);
  NSString v105 = (char *)&v97 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v124 = (char *)&v97 - v27;
  uint64_t v28 = *(void *)(a5 - 8);
  uint64_t v29 = __chkstk_darwin(v26);
  Swift::String v31 = (char *)&v97 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = __chkstk_darwin(v29);
  Swift::String v34 = (char *)&v97 - v33;
  __chkstk_darwin(v32);
  uint64_t v36 = (char *)&v97 - v35;
  uint64_t v135 = sub_100183098(&qword_100650B80);
  uint64_t v130 = *(void *)(v135 - 8);
  uint64_t v37 = __chkstk_darwin(v135);
  uint64_t v122 = v38;
  uint64_t v123 = (char *)&v97 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v37);
  uint64_t v40 = (char *)&v97 - v39;
  uint64_t v41 = type metadata accessor for SFAirDropReceive.ItemDestination(0LL);
  unint64_t v118 = (unint64_t)"AIRDROP_RECEIVING_TEXT";
  uint64_t v131 = v40;
  uint64_t v101 = v41;
  SFProgressContinuation.init(_:initialProgress:file:line:)( 0x757165526E65706FLL,  0xEF726F6628747365LL,  v42,  0xD000000000000066LL,  0x800000010050D570LL,  239LL,  (char *)&type metadata for () + 8,  v41);
  unint64_t v43 = *(void (**)(char *, const char *, uint64_t))(v28 + 16);
  v43(v36, v8, a5);
  uint64_t v44 = type metadata accessor for SDAirDropContentHandlerUnsupportedLinkType();
  if (swift_dynamicCast(v134, v36, a5, v44, 6LL))
  {
    swift_release(v134[0]);
    v43(v34, v8, a5);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v34, a5);
    int v45 = 1;
  }

  else
  {
    v43(v34, v8, a5);
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v31, v34, a5);
    uint64_t v46 = type metadata accessor for SDAirDropContentHandlerUnsupportedFileType();
    int v45 = swift_dynamicCast(v134, v31, a5, v46, 6LL);
    if (v45) {
      swift_release(v134[0]);
    }
  }

  uint64_t v48 = v123;
  uint64_t v47 = v124;
  uint64_t v49 = (uint64_t)v131;
  uint64_t v50 = v119;
  NSString v119 = v8;
  id v120 = (const char *)sub_1003CCB5C(v129, v50, v128 & 1, (uint64_t)v120, (uint64_t)v131, v45, a5);
  *uint64_t v21 = 0LL;
  v21[1] = 0xE000000000000000LL;
  (*(void (**)(void *, void, void *))(v19 + 104))( v21,  enum case for SFAirDrop.ButtonConfiguration.text(_:),  v117);
  uint64_t v51 = v130;
  uint64_t v52 = v135;
  uint64_t v99 = *(void (**)(char *, uint64_t, uint64_t))(v130 + 16);
  v99(v48, v49, v135);
  uint64_t v53 = *(unsigned __int8 *)(v51 + 80);
  uint64_t v54 = (v53 + 16) & ~v53;
  uint64_t v100 = v53 | 7;
  uint64_t v55 = swift_allocObject(&unk_1005DEC88, v54 + v122, v53 | 7);
  uint64_t v117 = *(void (**)(uint64_t, char *, uint64_t))(v51 + 32);
  v117(v55 + v54, v48, v52);
  SFAirDrop.DeclineAction.init(id:buttonConfiguration:hidden:operation:)( 0x7373696D736944LL,  0xE700000000000000LL,  v21,  1LL,  sub_1003CDCE8,  v55);
  NSString v56 = String._bridgeToObjectiveC()();
  id v58 = (id)SFLocalizedStringForKey(v56, v57);

  if (v58)
  {
    uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
    uint64_t v61 = v60;
  }

  else
  {
    uint64_t v59 = 0LL;
    uint64_t v61 = 0LL;
  }

  uint64_t v62 = v126;
  uint64_t v132 = v59;
  uint64_t v133 = v61;
  uint64_t v63 = sub_100183098(&qword_1006462D8);
  uint64_t v64 = v121;
  Optional.tryUnwrap(_:file:line:)( 0xD000000000000016LL,  0x800000010050D5E0LL,  0xD000000000000066LL,  v118 | 0x8000000000000000LL,  249LL,  v63);
  uint64_t v65 = v127;
  if (v64)
  {
    *(void *)&double v66 = swift_bridgeObjectRelease(v120).n128_u64[0];
    __n128 v67 = swift_bridgeObjectRelease(v61, v66);
    (*(void (**)(char *, uint64_t, __n128))(v65 + 8))(v47, v62, v67);
    return (*(uint64_t (**)(char *, uint64_t))(v130 + 8))(v131, v135);
  }

  else
  {
    uint64_t v121 = 0LL;
    uint64_t v69 = v47;
    unint64_t v118 = ~v53;
    swift_bridgeObjectRelease(v61);
    uint64_t v98 = v134[0];
    uint64_t v97 = v134[1];
    uint64_t v70 = v102;
    SFAirDropReceive.Transfer.askRequest.getter(v71);
    uint64_t v125 = (*(uint64_t (**)(char *, uint64_t))(v125 + 72))(v70, a5);
    uint64_t v73 = v72;
    uint64_t v74 = (*(uint64_t (**)(char *, uint64_t))(v103 + 8))(v70, v104);
    uint64_t v75 = v106;
    uint64_t v76 = UUID.init()(v74);
    uint64_t v77 = v107;
    static Date.now.getter(v76);
    uint64_t v78 = v105;
    (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v105, v69, v62);
    uint64_t v79 = sub_100183F14( &qword_100650B88,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
    uint64_t v80 = sub_100183F14( &qword_100650B90,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
    uint64_t v81 = sub_100183F14( &qword_100646840,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
    SFAirDrop.PermissionRequest.init(id:requestDate:title:prompt:acceptActions:declineAction:isAnswered:)( v75,  v77,  v98,  v97,  v125,  v73,  v120,  v78,  0,  v101,  v79,  v80,  v81);
    uint64_t v82 = 1800LL;
    if ((v128 & 1) != 0) {
      uint64_t v82 = 7LL;
    }
    uint64_t v128 = v82;
    uint64_t v83 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 56LL))(v115, 1LL, 1LL, v83);
    unint64_t v84 = v123;
    v99(v123, (uint64_t)v131, v135);
    uint64_t v85 = v111;
    uint64_t v86 = v112;
    (*(void (**)(char *, uint64_t, uint64_t))(v111 + 16))(v116, v129, v112);
    if (qword_100643F28 != -1) {
      swift_once(&qword_100643F28, sub_100205C24);
    }
    uint64_t v87 = static AirDropActor.shared;
    uint64_t v88 = sub_100183F14( (unint64_t *)&qword_100656410,  (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor,  (uint64_t)&protocol conformance descriptor for AirDropActor);
    uint64_t v89 = (v53 + 32) & v118;
    unint64_t v90 = (v122 + v89 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v91 = *(unsigned __int8 *)(v85 + 80);
    uint64_t v92 = (v90 + v91 + 8) & ~v91;
    uint64_t v93 = swift_allocObject(&unk_1005DECB0, v92 + v110, v100 | v91);
    *(void *)(v93 + 16) = v87;
    *(void *)(v93 + 24) = v88;
    uint64_t v94 = v135;
    v117(v93 + v89, v84, v135);
    *(void *)(v93 + v90) = v128;
    (*(void (**)(uint64_t, char *, uint64_t))(v85 + 32))(v93 + v92, v116, v86);
    swift_retain(v87);
    uint64_t v95 = sub_1001B342C(v115, (uint64_t)&unk_100652920, v93);
    (*(void (**)(char *, uint64_t))(v127 + 8))(v124, v126);
    (*(void (**)(char *, uint64_t))(v130 + 8))(v131, v94);
    uint64_t v96 = v113;
    (*(void (**)(uint64_t, char *, uint64_t))(v108 + 32))(v113, v114, v109);
    uint64_t result = sub_100183098(&qword_100646800);
    *(void *)(v96 + *(int *)(result + 52)) = v95;
  }

  return result;
}

uint64_t sub_1003C9654@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v129 = a2;
  uint64_t v108 = a1;
  uint64_t v124 = a3;
  uint64_t v3 = sub_100183098(&qword_100646560);
  __chkstk_darwin(v3);
  uint64_t v123 = (char *)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v118 = type metadata accessor for SFAirDrop.ContactInfo.Handle(0LL);
  uint64_t v116 = *(void *)(v118 - 8);
  __chkstk_darwin(v118);
  uint64_t v115 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v107 = type metadata accessor for SFAirDropReceive.AskRequest(0LL);
  uint64_t v106 = *(void *)(v107 - 8);
  __chkstk_darwin(v107);
  NSString v105 = (char *)&v101 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v122 = sub_100183098(&qword_10064B750);
  uint64_t v121 = *(void *)(v122 - 8);
  __chkstk_darwin(v122);
  uint64_t v146 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v141 = *(void *)(v8 - 8);
  uint64_t v142 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v132 = (char *)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v140 = (char *)&v101 - v11;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v138 = *(void *)(v12 - 8);
  uint64_t v139 = v12;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v130 = (char *)&v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v137 = (char *)&v101 - v15;
  uint64_t v16 = type metadata accessor for SFAirDrop.ContactRequest(0LL);
  uint64_t v117 = *(char **)(v16 - 8);
  uint64_t v128 = v16;
  __chkstk_darwin(v16);
  unint64_t v126 = (unint64_t)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100183098(&qword_10064A098);
  uint64_t v135 = *(void *)(v18 - 8);
  uint64_t v136 = v18;
  __chkstk_darwin(v18);
  uint64_t v125 = (char *)&v101 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for SFAirDrop.ButtonConfiguration(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v111 = (void (*)(uint64_t, char *, uint64_t))v20;
  __chkstk_darwin(v20);
  uint64_t v23 = (uint64_t *)((char *)&v101 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v24 = type metadata accessor for SFAirDrop.DeclineAction(0LL);
  uint64_t v133 = *(void *)(v24 - 8);
  uint64_t v134 = v24;
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v112 = (char *)&v101 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25);
  uint64_t v131 = (char *)&v101 - v27;
  uint64_t v28 = sub_100183098(&qword_10064A0A0);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(void *)(v29 + 64);
  uint64_t v31 = __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v101 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v31);
  Swift::String v34 = (char *)&v101 - v33;
  SFProgressContinuation.init(_:initialProgress:file:line:)( 0xD00000000000001DLL,  0x8000000100507220LL,  v35,  0xD000000000000066LL,  0x800000010050D570LL,  137LL,  (char *)&type metadata for () + 8,  v16);
  *uint64_t v23 = 0x776F4E20746F4ELL;
  v23[1] = 0xE700000000000000LL;
  LODWORD(v109) = enum case for SFAirDrop.ButtonConfiguration.text(_:);
  uint64_t v110 = *(void (**)(void *))(v21 + 104);
  v110(v23);
  uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
  v36(v32, v34, v28);
  uint64_t v37 = *(unsigned __int8 *)(v29 + 80);
  uint64_t v38 = (v37 + 16) & ~v37;
  uint64_t v113 = v30;
  uint64_t v114 = (char *)(v38 + v30);
  uint64_t v127 = v37;
  uint64_t v39 = v37 | 7;
  uint64_t v40 = swift_allocObject(&unk_1005DEE18, v38 + v30, v37 | 7);
  uint64_t v119 = v29;
  uint64_t v41 = *(void (**)(uint64_t, char *, uint64_t))(v29 + 32);
  v41(v40 + v38, v32, v28);
  SFAirDrop.DeclineAction.init(id:buttonConfiguration:hidden:operation:)( 0x776F4E20746F4ELL,  0xE700000000000000LL,  v23,  0LL,  sub_1003CE3DC,  v40);
  *uint64_t v23 = 0x6572616853LL;
  v23[1] = 0xE500000000000000LL;
  ((void (*)(void *, void, void))v110)(v23, v109, v111);
  uint64_t v42 = v34;
  uint64_t v43 = type metadata accessor for SFAirDrop.ContactInfo(0LL);
  unint64_t v44 = v126;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 16LL))(v126, v129, v43);
  unint64_t v45 = v44;
  uint64_t v46 = v128;
  (*((void (**)(unint64_t, void, uint64_t))v117 + 13))( v45,  enum case for SFAirDrop.ContactRequest.contact(_:),  v128);
  uint64_t v117 = v42;
  uint64_t v109 = v36;
  v36(v32, v42, v28);
  uint64_t v110 = (void (*)(void *))v39;
  uint64_t v47 = swift_allocObject(&unk_1005DEE40, v114, v39);
  uint64_t v48 = v47 + v38;
  uint64_t v49 = v125;
  uint64_t v114 = v32;
  uint64_t v111 = v41;
  v41(v48, v32, v28);
  uint64_t v50 = sub_100183F14( &qword_10064A0A8,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.ContactRequest,  (uint64_t)&protocol conformance descriptor for SFAirDrop.ContactRequest);
  uint64_t v51 = sub_100183F14( &qword_10064A0B0,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.ContactRequest,  (uint64_t)&protocol conformance descriptor for SFAirDrop.ContactRequest);
  uint64_t v102 = sub_100183F14( &qword_10064A0B8,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.ContactRequest,  (uint64_t)&protocol conformance descriptor for SFAirDrop.ContactRequest);
  uint64_t v103 = v51;
  uint64_t v104 = v50;
  uint64_t v52 = SFAirDrop.AcceptAction.Single.init(id:buttonConfiguration:prominent:hidden:defaultAnswer:operation:)( 0x6572616853LL,  0xE500000000000000LL,  v23,  0LL,  0LL,  v126,  sub_1003CE3FC,  v47,  v46,  v50,  v51,  v102);
  uint64_t v53 = v137;
  uint64_t v54 = UUID.init()(v52);
  uint64_t v55 = v140;
  static Date.now.getter(v54);
  (*(void (**)(char *, char *, uint64_t))(v138 + 16))(v130, v53, v139);
  (*(void (**)(char *, char *, uint64_t))(v141 + 16))(v132, v55, v142);
  uint64_t v144 = 0LL;
  unint64_t v145 = 0xE000000000000000LL;
  v56._uint64_t countAndFlagsBits = 0x6977206572616853LL;
  v56._object = (void *)0xEB00000000206874LL;
  String.append(_:)(v56);
  uint64_t v57 = v105;
  uint64_t v59 = SFAirDropReceive.Transfer.askRequest.getter(v58);
  SFAirDropReceive.AskRequest.senderDisplayName.getter(v59);
  uint64_t v61 = v60;
  (*(void (**)(char *, uint64_t))(v106 + 8))(v57, v107);
  NSString v62 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v61);
  id v63 = (id)SFTruncateAirDropSenderNameForUI(v62);

  uint64_t v120 = v28;
  if (v63)
  {
    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
    double v66 = v65;
  }

  else
  {
    uint64_t v64 = 0LL;
    double v66 = 0LL;
  }

  unint64_t v126 = ~v127;
  v143[0] = v64;
  v143[1] = v66;
  DefaultStringInterpolation.appendInterpolation<A>(_:)( v143,  &type metadata for String,  &protocol witness table for String);
  swift_bridgeObjectRelease(v66);
  v67._uint64_t countAndFlagsBits = 63LL;
  v67._object = (void *)0xE100000000000000LL;
  String.append(_:)(v67);
  uint64_t v108 = v144;
  uint64_t v107 = v145;
  uint64_t v144 = SFAirDrop.ContactInfo.fullName.getter(v68);
  unint64_t v145 = v69;
  v70._uint64_t countAndFlagsBits = 10LL;
  v70._object = (void *)0xE100000000000000LL;
  String.append(_:)(v70);
  uint64_t v71 = v115;
  SFAirDrop.ContactInfo.handle.getter();
  uint64_t v72 = sub_100183F14( &qword_10064A068,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.ContactInfo.Handle,  (uint64_t)&protocol conformance descriptor for SFAirDrop.ContactInfo.Handle);
  uint64_t v73 = v118;
  v74._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v118, v72);
  object = (const char *)v74._object;
  String.append(_:)(v74);
  __n128 v76 = swift_bridgeObjectRelease(object);
  (*(void (**)(char *, uint64_t, __n128))(v116 + 8))(v71, v73, v76);
  uint64_t v77 = v144;
  unint64_t v78 = v145;
  uint64_t v79 = sub_100183098(&qword_10064A0C0);
  uint64_t v80 = sub_100183098(&qword_10064A0C8);
  uint64_t v81 = *(void *)(v80 - 8);
  uint64_t v82 = *(unsigned __int8 *)(v81 + 80);
  uint64_t v83 = (v82 + 32) & ~v82;
  uint64_t v84 = swift_allocObject(v79, v83 + *(void *)(v81 + 72), v82 | 7);
  *(_OWORD *)(v84 + 16) = xmmword_1004CDCA0;
  uint64_t v85 = v84 + v83;
  sub_100183098(&qword_10064A0D0);
  uint64_t v86 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v135 + 16))(v85, v49, v136);
  UUID.init()(v86);
  (*(void (**)(uint64_t, void, uint64_t))(v81 + 104))( v85,  enum case for SFAirDrop.AcceptAction.single<A>(_:),  v80);
  uint64_t v87 = v112;
  uint64_t v88 = v131;
  (*(void (**)(char *, char *, uint64_t))(v133 + 16))(v112, v131, v134);
  SFAirDrop.PermissionRequest.init(id:requestDate:title:prompt:acceptActions:declineAction:isAnswered:)( v130,  v132,  v108,  v107,  v77,  v78,  v84,  v87,  0,  v128,  v104,  v103,  v102);
  uint64_t v89 = type metadata accessor for TaskPriority(0LL);
  uint64_t v90 = (uint64_t)v123;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v89 - 8) + 56LL))(v123, 1LL, 1LL, v89);
  uint64_t v91 = v114;
  uint64_t v92 = v117;
  uint64_t v93 = v120;
  v109(v114, v117, v120);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v94 = static AirDropActor.shared;
  uint64_t v95 = sub_100183F14( (unint64_t *)&qword_100656410,  (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor,  (uint64_t)&protocol conformance descriptor for AirDropActor);
  uint64_t v96 = (v127 + 32) & v126;
  uint64_t v97 = swift_allocObject(&unk_1005DEE68, v96 + v113, v110);
  *(void *)(v97 + 16) = v94;
  *(void *)(v97 + 24) = v95;
  v111(v97 + v96, v91, v93);
  swift_retain(v94);
  uint64_t v98 = sub_1001B356C(v90, (uint64_t)&unk_100652970, v97);
  (*(void (**)(char *, uint64_t))(v141 + 8))(v140, v142);
  (*(void (**)(char *, uint64_t))(v138 + 8))(v137, v139);
  (*(void (**)(char *, uint64_t))(v135 + 8))(v125, v136);
  (*(void (**)(char *, uint64_t))(v133 + 8))(v88, v134);
  (*(void (**)(char *, uint64_t))(v119 + 8))(v92, v93);
  uint64_t v99 = v124;
  (*(void (**)(uint64_t, char *, uint64_t))(v121 + 32))(v124, v146, v122);
  uint64_t result = sub_100183098(&qword_10064A010);
  *(void *)(v99 + *(int *)(result + 52)) = v98;
  return result;
}

uint64_t sub_1003CA1CC(uint64_t a1, int a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v32 = a6;
  uint64_t v31 = a5;
  int v33 = a2;
  uint64_t v34 = a1;
  uint64_t v8 = type metadata accessor for SFAirDrop.TransferType(0LL);
  uint64_t v35 = *(void *)(v8 - 8);
  uint64_t v36 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for SFAirDropReceive.AskRequest(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for SFPlatform(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static SFPlatform.visionOS.getter(v17);
  char v20 = static SFPlatform.isPlatform(_:)(v19);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t))(v16 + 8);
  uint64_t v22 = v21(v19, v15);
  if ((v20 & 1) != 0)
  {
    char v23 = 0;
  }

  else
  {
    if ((v33 & 1) == 0) {
      a4 |= a3 ^ 1;
    }
    static SFPlatform.macOS.getter(v22);
    char v24 = static SFPlatform.isPlatform(_:)(v19);
    uint64_t v25 = v21(v19, v15);
    if ((v24 & 1) != 0)
    {
      uint64_t v25 = (*(uint64_t (**)(uint64_t))(v32 + 32))(v31);
      a4 = v25;
    }

    uint64_t v26 = SFAirDropReceive.Transfer.askRequest.getter(v25);
    SFAirDropReceive.AskRequest.type.getter(v26);
    uint64_t v27 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    char v28 = SFAirDrop.TransferType.isLinks.getter(v27);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v36);
    char v23 = a4 & (v28 ^ 1);
  }

  return v23 & 1;
}

uint64_t sub_1003CA398()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100186DFC(v0, qword_100652900);
  uint64_t v1 = sub_100186DE4(v0, (uint64_t)qword_100652900);
  if (qword_100643FD8 != -1) {
    swift_once(&qword_100643FD8, sub_10023A408);
  }
  uint64_t v2 = sub_100186DE4(v0, (uint64_t)qword_1006695F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_1003CA428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[4] = a4;
  v5[5] = a5;
  v5[3] = a1;
  uint64_t v6 = sub_100183098(&qword_1006529A0);
  v5[6] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100183098(&qword_100650B80);
  v5[7] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[8] = v8;
  uint64_t v9 = *(void *)(v8 + 64);
  v5[9] = v9;
  v5[10] = swift_task_alloc((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100183098(&qword_100646560);
  v5[11] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for SFAirDropReceive.ItemDestination(0LL);
  v5[12] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v5[13] = v12;
  v5[14] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100183098(&qword_100650BB0);
  v5[15] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v5[16] = v14;
  v5[17] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100183098(&qword_100646830);
  v5[18] = swift_task_alloc((*(void *)(*(void *)(v15 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100183098(&qword_1006457D8);
  v5[19] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v5[20] = v17;
  uint64_t v18 = *(void *)(v17 + 64);
  v5[21] = v18;
  unint64_t v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v5[22] = swift_task_alloc(v19);
  v5[23] = swift_task_alloc(v19);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v20 = static AirDropActor.shared;
  v5[24] = static AirDropActor.shared;
  return swift_task_switch(sub_1003CA5C8, v20, 0LL);
}

uint64_t sub_1003CA5C8()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[18];
  sub_1003CE5C4(v0[4], v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1LL, v1) == 1)
  {
    uint64_t v4 = v0[7];
    sub_100187100(v0[18], &qword_100646830);
    SFProgressContinuation.task.getter(v4);
    uint64_t v5 = (void *)swift_task_alloc(async function pointer to SFProgressTask.finalValue.getter[1]);
    v0[25] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_1003CA7F4;
    return SFProgressTask.finalValue.getter(v0[3], v0[15]);
  }

  else
  {
    uint64_t v8 = v0[22];
    uint64_t v7 = v0[23];
    uint64_t v9 = v0[20];
    uint64_t v10 = v0[21];
    uint64_t v11 = v0[19];
    uint64_t v12 = v0[11];
    uint64_t v13 = v0[8];
    uint64_t v25 = v0[10];
    uint64_t v26 = v0[9];
    uint64_t v14 = v0[7];
    uint64_t v24 = v0[5];
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
    v15(v7, v0[18], v11);
    uint64_t v16 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v12, 1LL, 1LL, v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v7, v11);
    uint64_t v17 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v18 = (v17 + 16) & ~v17;
    uint64_t v19 = swift_allocObject(&unk_1005DEF08, v18 + v10, v17 | 7);
    v0[27] = v19;
    v15(v19 + v18, v8, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v25, v24, v14);
    uint64_t v20 = *(unsigned __int8 *)(v13 + 80);
    uint64_t v21 = (v20 + 16) & ~v20;
    uint64_t v22 = swift_allocObject(&unk_1005DEF30, v21 + v26, v20 | 7);
    v0[28] = v22;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v22 + v21, v25, v14);
    char v23 = (void *)swift_task_alloc(async function pointer to concurrentRace<A>(priority:operation:against:)[1]);
    v0[29] = v23;
    *char v23 = v0;
    v23[1] = sub_1003CA874;
    return concurrentRace<A>(priority:operation:against:)( v0[14],  v0[11],  &unk_1006529B0,  v19,  &unk_1006529C0,  v22,  v0[12]);
  }

uint64_t sub_1003CA7F4()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 200LL);
  *(void *)(*(void *)v1 + 208LL) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = v2[24];
  (*(void (**)(void, void))(v2[16] + 8LL))(v2[17], v2[15]);
  if (v0) {
    uint64_t v5 = sub_1003CAA68;
  }
  else {
    uint64_t v5 = sub_1003CA9D4;
  }
  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_1003CA874()
{
  uint64_t v2 = *v1;
  uint64_t v3 = (*v1)[29];
  (*v1)[30] = v0;
  swift_task_dealloc(v3);
  uint64_t v5 = v2[27];
  uint64_t v4 = v2[28];
  uint64_t v6 = v2[24];
  sub_100187100(v2[11], &qword_100646560);
  swift_release(v4);
  swift_release(v5);
  if (v0) {
    uint64_t v7 = sub_1003CAC0C;
  }
  else {
    uint64_t v7 = sub_1003CA910;
  }
  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_1003CA910()
{
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 24);
  (*(void (**)(void, void))(*(void *)(v0 + 160) + 8LL))(*(void *)(v0 + 184), *(void *)(v0 + 152));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v4, v1, v3);
  uint64_t v5 = *(void *)(v0 + 176);
  uint64_t v7 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 144);
  uint64_t v8 = *(void *)(v0 + 112);
  uint64_t v10 = *(void *)(v0 + 80);
  uint64_t v9 = *(void *)(v0 + 88);
  uint64_t v11 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 184));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003CA9D4()
{
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v7 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 184));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003CAA68()
{
  uint64_t v1 = *(void *)(v0 + 208);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = *(void *)(v0 + 48);
  swift_errorRetain(v1);
  uint64_t v3 = sub_100183098(&qword_100645710);
  uint64_t v4 = type metadata accessor for SFAirDropReceive.Failure(0LL);
  char v5 = swift_dynamicCast(v2, v0 + 16, v3, v4, 6LL);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL);
  uint64_t v7 = *(void *)(v0 + 48);
  if ((v5 & 1) != 0)
  {
    v6(v7, 0LL, 1LL, v4);
    uint64_t v8 = sub_100187100(v7, &qword_1006529A0);
    swift_willThrow(v8);
  }

  else
  {
    v6(v7, 1LL, 1LL, v4);
    sub_100187100(v7, &qword_1006529A0);
    uint64_t v9 = type metadata accessor for CancellationError(0LL);
    uint64_t v10 = sub_100183F14( &qword_100646848,  (uint64_t (*)(uint64_t))&type metadata accessor for CancellationError,  (uint64_t)&protocol conformance descriptor for CancellationError);
    swift_allocError(v9, v10, 0LL, 0LL);
    uint64_t v11 = CancellationError.init()();
    swift_willThrow(v11);
    swift_errorRelease(v1);
  }

  uint64_t v12 = *(void *)(v0 + 176);
  uint64_t v14 = *(void *)(v0 + 136);
  uint64_t v13 = *(void *)(v0 + 144);
  uint64_t v15 = *(void *)(v0 + 112);
  uint64_t v17 = *(void *)(v0 + 80);
  uint64_t v16 = *(void *)(v0 + 88);
  uint64_t v18 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 184));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003CAC0C()
{
  uint64_t v1 = *(void *)(v0 + 240);
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = *(void *)(v0 + 48);
  swift_errorRetain(v1);
  uint64_t v3 = sub_100183098(&qword_100645710);
  uint64_t v4 = type metadata accessor for SFAirDropReceive.Failure(0LL);
  char v5 = swift_dynamicCast(v2, v0 + 16, v3, v4, 6LL);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL);
  uint64_t v7 = *(void *)(v0 + 48);
  if ((v5 & 1) != 0)
  {
    v6(v7, 0LL, 1LL, v4);
    uint64_t v8 = sub_100187100(v7, &qword_1006529A0);
    swift_willThrow(v8);
  }

  else
  {
    v6(v7, 1LL, 1LL, v4);
    sub_100187100(v7, &qword_1006529A0);
    uint64_t v9 = type metadata accessor for CancellationError(0LL);
    uint64_t v10 = sub_100183F14( &qword_100646848,  (uint64_t (*)(uint64_t))&type metadata accessor for CancellationError,  (uint64_t)&protocol conformance descriptor for CancellationError);
    swift_allocError(v9, v10, 0LL, 0LL);
    uint64_t v11 = CancellationError.init()();
    swift_willThrow(v11);
    swift_errorRelease(v1);
  }

  uint64_t v12 = *(void *)(v0 + 176);
  uint64_t v14 = *(void *)(v0 + 136);
  uint64_t v13 = *(void *)(v0 + 144);
  uint64_t v15 = *(void *)(v0 + 112);
  uint64_t v17 = *(void *)(v0 + 80);
  uint64_t v16 = *(void *)(v0 + 88);
  uint64_t v18 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 184));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003CADC0(uint64_t a1, uint64_t a2)
{
  v2[3] = a2;
  uint64_t v3 = sub_100183098(&qword_1006467E8);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v5 = static AirDropActor.shared;
  v2[7] = static AirDropActor.shared;
  return swift_task_switch(sub_1003CAE58, v5, 0LL);
}

uint64_t sub_1003CAE58()
{
  uint64_t v1 = sub_100183098(&qword_1006457D8);
  SFProgressContinuation.task.getter(v1);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to SFProgressTask.finalValue.getter[1]);
  *(void *)(v0 + 64) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1003CAED8;
  return SFProgressTask.finalValue.getter(v0 + 16, *(void *)(v0 + 32));
}

uint64_t sub_1003CAED8()
{
  uint64_t v2 = *(void **)v1;
  swift_task_dealloc(*(void *)(*(void *)v1 + 64LL));
  uint64_t v4 = v2[6];
  uint64_t v3 = v2[7];
  uint64_t v7 = v2 + 4;
  uint64_t v5 = v2[4];
  uint64_t v6 = v7[1];
  if (v0)
  {
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    uint64_t v8 = sub_1003CB030;
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    uint64_t v8 = sub_1003CAF78;
  }

  return swift_task_switch(v8, v3, 0LL);
}

uint64_t sub_1003CAF78()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = type metadata accessor for SFAirDropReceive.Failure(0LL);
  uint64_t v3 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
  swift_allocError(v2, v3, 0LL, 0LL);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v2 - 8) + 104LL))( v4,  enum case for SFAirDropReceive.Failure.askDismissed(_:),  v2);
  swift_willThrow(v5);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003CB030()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = type metadata accessor for SFAirDropReceive.Failure(0LL);
  uint64_t v3 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
  swift_allocError(v2, v3, 0LL, 0LL);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v2 - 8) + 104LL))( v4,  enum case for SFAirDropReceive.Failure.askDismissed(_:),  v2);
  swift_willThrow(v5);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003CB0E0(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = sub_100183098(&qword_100650BB0);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v5 = static AirDropActor.shared;
  v2[7] = static AirDropActor.shared;
  return swift_task_switch(sub_1003CB178, v5, 0LL);
}

uint64_t sub_1003CB178()
{
  uint64_t v1 = sub_100183098(&qword_100650B80);
  SFProgressContinuation.task.getter(v1);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to SFProgressTask.finalValue.getter[1]);
  v0[8] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10025D5A8;
  return SFProgressTask.finalValue.getter(v0[2], v0[4]);
}

uint64_t sub_1003CB1EC(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v5 = type metadata accessor for SFAirDropReceive.Failure(0LL);
  uint64_t v6 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
  uint64_t v7 = swift_allocError(v5, v6, 0LL, 0LL);
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v5 - 8) + 104LL))(v8, *a2, v5);
  uint64_t v9 = sub_100183098(a3);
  SFProgressContinuation.fail(with:)(v7, v9);
  return swift_errorRelease(v7);
}

uint64_t sub_1003CB294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a1;
  v4[3] = a4;
  uint64_t v5 = sub_100183098(&qword_10064A0E8);
  v4[4] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[5] = v6;
  v4[6] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v7 = static AirDropActor.shared;
  v4[7] = static AirDropActor.shared;
  return swift_task_switch(sub_1003CB32C, v7, 0LL);
}

uint64_t sub_1003CB32C()
{
  uint64_t v1 = sub_100183098(&qword_10064A0A0);
  SFProgressContinuation.task.getter(v1);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to SFProgressTask.finalValue.getter[1]);
  v0[8] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10025D5A8;
  return SFProgressTask.finalValue.getter(v0[2], v0[4]);
}

uint64_t sub_1003CB3A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v40 = a4;
  uint64_t v8 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v39 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for SFAirDropReceive.Transfer(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1006442C0 != -1) {
    swift_once(&qword_1006442C0, sub_1003CA398);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v15, (uint64_t)qword_100652900);
  uint64_t v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc(12LL, -1LL);
    uint64_t v38 = a2;
    uint64_t v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    uint64_t v36 = v21;
    uint64_t v42 = v21;
    uint64_t v37 = a5;
    *(_DWORD *)uint64_t v20 = 136315138;
    uint64_t v35 = v20 + 4;
    SFAirDropReceive.Transfer.id.getter(v21);
    uint64_t v22 = sub_100183F14( &qword_100647620,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v8, v22);
    uint64_t v24 = v8;
    uint64_t v26 = v25;
    (*(void (**)(char *, uint64_t))(v39 + 8))(v10, v24);
    uint64_t v41 = sub_10018CDB4(v23, (unint64_t)v26, &v42);
    a5 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v35, v20 + 12);
    __n128 v27 = swift_bridgeObjectRelease(v26);
    (*(void (**)(char *, uint64_t, __n128))(v12 + 8))(v14, v11, v27);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Transfer %s was cancelled.", v20, 0xCu);
    uint64_t v28 = v36;
    swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }

  uint64_t v29 = type metadata accessor for SFAirDropReceive.Failure(0LL);
  uint64_t v30 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
  uint64_t v31 = swift_allocError(v29, v30, 0LL, 0LL);
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v29 - 8) + 104LL))( v32,  enum case for SFAirDropReceive.Failure.receiverCancelled(_:),  v29);
  uint64_t v33 = type metadata accessor for SFProgressTask(0LL, v40, a5);
  SFProgressTask.cancel(_:)(v31, v33);
  return swift_errorRelease(v31);
}

uint64_t sub_1003CB6C4()
{
  uint64_t v0 = type metadata accessor for SFAirDropReceive.ItemDestination(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1006442C0 != -1) {
    swift_once(&qword_1006442C0, sub_1003CA398);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = sub_100186DE4(v4, (uint64_t)qword_100652900);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "openRequest was dismissed.", v8, 2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v3,  enum case for SFAirDropReceive.ItemDestination.noItem(_:),  v0);
  uint64_t v9 = sub_100183098(&qword_100650B80);
  SFProgressContinuation.finish(with:)(v3, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_1003CB828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  v6[2] = a1;
  v6[3] = a4;
  uint64_t v7 = type metadata accessor for SFAirDropReceive.Transfer(0LL);
  void v6[6] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[7] = v8;
  uint64_t v9 = *(void *)(v8 + 64);
  v6[8] = v9;
  v6[9] = swift_task_alloc((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100183098(&qword_100650B80);
  v6[10] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v6[11] = v11;
  uint64_t v12 = *(void *)(v11 + 64);
  v6[12] = v12;
  v6[13] = swift_task_alloc((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100183098(&qword_100646560);
  v6[14] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v14 = static AirDropActor.shared;
  v6[15] = static AirDropActor.shared;
  return swift_task_switch(sub_1003CB918, v14, 0LL);
}

uint64_t sub_1003CB918()
{
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[12];
  uint64_t v5 = v0[9];
  uint64_t v6 = v0[10];
  uint64_t v7 = v0[7];
  uint64_t v8 = v0[6];
  uint64_t v20 = v0[5];
  uint64_t v21 = v0[8];
  uint64_t v9 = v0[3];
  uint64_t v22 = v0[4];
  uint64_t v10 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v1, 1LL, 1LL, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v9, v6);
  uint64_t v11 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v12 = (v11 + 16) & ~v11;
  uint64_t v13 = swift_allocObject(&unk_1005DECD8, v12 + v4, v11 | 7);
  v0[16] = v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v13 + v12, v2, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v20, v8);
  uint64_t v14 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v15 = (v14 + 24) & ~v14;
  uint64_t v16 = swift_allocObject(&unk_1005DED00, v15 + v21, v14 | 7);
  v0[17] = v16;
  *(void *)(v16 + 16) = v22;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v16 + v15, v5, v8);
  uint64_t v17 = (void *)swift_task_alloc(async function pointer to concurrentRace<A>(priority:operation:against:)[1]);
  v0[18] = v17;
  uint64_t v18 = type metadata accessor for SFAirDropReceive.ItemDestination(0LL);
  *uint64_t v17 = v0;
  v17[1] = sub_1003CBAA0;
  return concurrentRace<A>(priority:operation:against:)(v0[2], v0[14], &unk_100652930, v13, &unk_100652940, v16, v18);
}

uint64_t sub_1003CBAA0()
{
  uint64_t v3 = *(void *)(*v1 + 136);
  uint64_t v2 = *(void *)(*v1 + 144);
  uint64_t v4 = *(void *)(*v1 + 128);
  uint64_t v5 = *(void *)(*v1 + 112);
  uint64_t v6 = *v1;
  *(void *)(v6 + 152) = v0;
  swift_task_dealloc(v2);
  sub_100187100(v5, &qword_100646560);
  swift_release(v3);
  swift_release(v4);
  if (v0) {
    return swift_task_switch(sub_1003CBB6C, *(void *)(v6 + 120), 0LL);
  }
  uint64_t v8 = *(void *)(v6 + 104);
  uint64_t v9 = *(void *)(v6 + 72);
  swift_task_dealloc(*(void *)(v6 + 112));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1003CBB6C()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 112));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003CBBB4(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = sub_100183098(&qword_100650BB0);
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v5 = static AirDropActor.shared;
  v2[7] = static AirDropActor.shared;
  return swift_task_switch(sub_10036C7D8, v5, 0LL);
}

uint64_t sub_1003CBC4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  uint64_t v4 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  v3[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for SFAirDropReceive.Transfer(0LL);
  v3[9] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[10] = v7;
  v3[11] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for ContinuousClock(0LL);
  v3[12] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[13] = v9;
  v3[14] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v10 = static AirDropActor.shared;
  v3[15] = static AirDropActor.shared;
  return swift_task_switch(sub_1003CBD34, v10, 0LL);
}

uint64_t sub_1003CBD34(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 32);
  uint64_t v3 = 1000000000000000000LL * v2;
  uint64_t v4 = ((v2 >> 63) & 0xF21F494C589C0000LL) + (((unint64_t)v2 * (unsigned __int128)0xDE0B6B3A7640000uLL) >> 64);
  ContinuousClock.init()(a1);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1006461D8 + dword_1006461D8);
  uint64_t v5 = (void *)swift_task_alloc(unk_1006461DC);
  *(void *)(v1 + 128) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1003CBDE0;
  return v7(v3, v4, 0LL, 0LL, 1);
}

uint64_t sub_1003CBDE0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 128);
  uint64_t v5 = *(void *)(*v1 + 104);
  uint64_t v4 = *(void *)(*v1 + 112);
  uint64_t v6 = *(void *)(*v1 + 96);
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0) {
    uint64_t v7 = sub_1003CBE6C;
  }
  else {
    uint64_t v7 = sub_1003CBEB8;
  }
  return swift_task_switch(v7, *(void *)(v2 + 120), 0LL);
}

uint64_t sub_1003CBE6C()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 112));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003CBEB8()
{
  if (qword_1006442C0 != -1) {
    swift_once(&qword_1006442C0, sub_1003CA398);
  }
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v5, (uint64_t)qword_100652900);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v0 + 88);
  if (v9)
  {
    uint64_t v28 = *(void *)(v0 + 72);
    uint64_t v11 = *(void *)(v0 + 64);
    uint64_t v26 = *(void *)(v0 + 56);
    uint64_t v27 = *(void *)(v0 + 80);
    uint64_t v12 = *(void *)(v0 + 48);
    uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v29 = swift_slowAlloc(32LL, -1LL);
    uint64_t v30 = v29;
    *(_DWORD *)uint64_t v13 = 136315138;
    SFAirDropReceive.Transfer.id.getter(v29);
    uint64_t v14 = sub_100183F14( &qword_100647620,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
    uint64_t v17 = v16;
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v11, v12);
    *(void *)(v0 + 16) = sub_10018CDB4(v15, (unint64_t)v17, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v13 + 4, v13 + 12);
    __n128 v18 = swift_bridgeObjectRelease(v17);
    (*(void (**)(uint64_t, uint64_t, __n128))(v27 + 8))(v10, v28, v18);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  ".waitingForOpenResponse request timeout for transfer %s",  v13,  0xCu);
    swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 80) + 8LL))(*(void *)(v0 + 88), *(void *)(v0 + 72));
  }

  uint64_t v19 = *(void *)(v0 + 112);
  uint64_t v20 = *(void *)(v0 + 88);
  uint64_t v21 = *(void *)(v0 + 64);
  uint64_t v22 = *(void *)(v0 + 24);
  uint64_t v23 = enum case for SFAirDropReceive.ItemDestination.noItem(_:);
  uint64_t v24 = type metadata accessor for SFAirDropReceive.ItemDestination(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 104LL))(v22, v23, v24);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003CC140(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for SFAirDropReceive.Transfer(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = sub_100183098(&qword_100646560);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
  sub_10019A6C4(a2, (uint64_t)v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))( (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a4,  v8);
  uint64_t v15 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = (v15 + 64) & ~v15;
  uint64_t v17 = swift_allocObject(&unk_1005DEDC8, v16 + v10, v15 | 7);
  sub_1001CE0D0(v22, v17 + 16);
  *(void *)(v17 + 56) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))( v17 + v16,  (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v8);
  swift_bridgeObjectRetain(a3);
  uint64_t v18 = static Task<>.noThrow(priority:operation:)(v13, &unk_100652960, v17, (char *)&type metadata for () + 8);
  swift_release(v18);
  swift_release(v17);
  sub_100187100((uint64_t)v13, &qword_100646560);
  uint64_t v19 = sub_100183098(&qword_100650B80);
  return SFProgressContinuation.finish(with:)(a1, v19);
}

uint64_t sub_1003CC2EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  v4[6] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[7] = v6;
  v4[8] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v7 = static AirDropActor.shared;
  void v4[9] = static AirDropActor.shared;
  return swift_task_switch(sub_1003CC384, v7, 0LL);
}

uint64_t sub_1003CC384()
{
  uint64_t v1 = (void *)v0[3];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  uint64_t v4 = sub_10019A708(v1, v2);
  SFAirDropReceive.Transfer.receiveID.getter(v4);
  uint64_t v5 = *(int **)(v3 + 16);
  uint64_t v8 = (int *)((char *)v5 + *v5);
  uint64_t v6 = (void *)swift_task_alloc(v5[1]);
  v0[10] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1003CC424;
  return ((uint64_t (*)(void, void, void, uint64_t, uint64_t))v8)(v0[4], v0[8], v0[5], v2, v3);
}

uint64_t sub_1003CC424(char a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 80);
  uint64_t v6 = *(void *)(*v2 + 56);
  uint64_t v5 = *(void *)(*v2 + 64);
  uint64_t v7 = *(void *)(*v2 + 48);
  *(_BYTE *)(v3 + 100) = a1;
  *(void *)(v3 + 88) = v1;
  swift_task_dealloc(v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  if (v1) {
    uint64_t v8 = sub_1003CC5E0;
  }
  else {
    uint64_t v8 = sub_1003CC4BC;
  }
  return swift_task_switch(v8, *(void *)(v3 + 72), 0LL);
}

uint64_t sub_1003CC4BC()
{
  if (qword_1006442C0 != -1) {
    swift_once(&qword_1006442C0, sub_1003CA398);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_100652900);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    int v5 = *(unsigned __int8 *)(v0 + 100);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v6 = 67109120;
    *(_DWORD *)(v0 + 96) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 100, v6 + 4, v6 + 8);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Move to App finished with success: %{BOOL}d", v6, 8u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  swift_task_dealloc(*(void *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003CC5E0()
{
  if (qword_1006442C0 != -1) {
    swift_once(&qword_1006442C0, sub_1003CA398);
  }
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v2, (uint64_t)qword_100652900);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  os_log_type_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 88);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138412290;
    swift_errorRetain(v7);
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(void *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    uint64_t *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Move to App threw error %@", v8, 0xCu);
    uint64_t v11 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);

    swift_errorRelease(v7);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 88));
    swift_errorRelease(v7);
    swift_errorRelease(v7);
  }

  swift_task_dealloc(*(void *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003CC7B4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SFAirDropReceive.Transfer(0LL);
  uint64_t v39 = *(void *)(v2 - 8);
  uint64_t v40 = v2;
  __chkstk_darwin(v2);
  uint64_t v37 = v3;
  uint64_t v38 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100183098(&qword_100646560);
  __chkstk_darwin(v4);
  uint64_t v43 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = type metadata accessor for UUID(0LL);
  uint64_t v36 = *(void *)(v41 - 8);
  uint64_t v6 = *(void *)(v36 + 64);
  uint64_t v7 = __chkstk_darwin(v41);
  uint64_t v8 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v42 = (char *)&v36 - v9;
  uint64_t v10 = type metadata accessor for SFAirDrop.TransferType(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for SFAirDropReceive.AskRequest(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = SFAirDropReceive.Transfer.askRequest.getter(v16);
  SFAirDropReceive.AskRequest.type.getter(v19);
  uint64_t v20 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  LOBYTE(v14) = SFAirDrop.TransferType.isFiles.getter(v20);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) != 0)
  {
    uint64_t v22 = v42;
    SFAirDropReceive.Transfer.receiveID.getter(result);
    uint64_t v23 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v43, 1LL, 1LL, v23);
    uint64_t v24 = v38;
    uint64_t v25 = v39;
    uint64_t v26 = v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v38, a1, v40);
    uint64_t v27 = v36;
    uint64_t v28 = v41;
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v8, v22, v41);
    uint64_t v29 = *(unsigned __int8 *)(v25 + 80);
    uint64_t v30 = (v29 + 16) & ~v29;
    uint64_t v31 = *(unsigned __int8 *)(v27 + 80);
    uint64_t v32 = (v37 + v31 + v30) & ~v31;
    uint64_t v33 = swift_allocObject(&unk_1005DEC60, v32 + v6, v29 | v31 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v33 + v30, v24, v26);
    (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v33 + v32, v8, v28);
    uint64_t v34 = (uint64_t)v43;
    uint64_t v35 = static Task<>.noThrow(priority:operation:)(v43, &unk_100649D70, v33, (char *)&type metadata for () + 8);
    swift_release(v35);
    swift_release(v33);
    sub_100187100(v34, &qword_100646560);
    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v42, v28);
  }

  return result;
}

uint64_t sub_1003CCAA8()
{
  uint64_t v1 = type metadata accessor for SFAirDropReceive.Transfer(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

void *sub_1003CCB5C(uint64_t a1, const char *a2, char a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  int v185 = a6;
  uint64_t v190 = a5;
  uint64_t v184 = a4;
  uint64_t v201 = a2;
  uint64_t v176 = a1;
  uint64_t v9 = (const char *)sub_100183098(&qword_100650B78);
  uint64_t v10 = (char *)*((void *)v9 - 1);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v182 = (char *)&v173 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v181 = (char *)&v173 - v13;
  uint64_t v179 = type metadata accessor for SFAirDropReceive.Transfer(0LL);
  uint64_t v178 = *(void *)(v179 - 8);
  uint64_t v14 = __chkstk_darwin(v179);
  uint64_t v175 = v15;
  uint64_t v177 = (char *)&v173 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v192 = a7;
  v193 = *(void (***)(char *, uint64_t, uint64_t))(a7 - 8);
  __chkstk_darwin(v14);
  uint64_t v194 = (char *)&v173 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v199 = sub_100183098(&qword_100650B80);
  uint64_t v188 = *(void *)(v199 - 8);
  __chkstk_darwin(v199);
  uint64_t v187 = v17;
  uint64_t v198 = (char *)&v173 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v204 = type metadata accessor for SFAirDropReceive.ItemDestination(0LL);
  uint64_t v195 = *(void *)(v204 - 8);
  uint64_t v18 = __chkstk_darwin(v204);
  uint64_t v20 = (char *)&v173 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v200 = (char **)((char *)&v173 - v21);
  uint64_t v203 = type metadata accessor for SFAirDrop.ButtonConfiguration(0LL);
  uint64_t v196 = *(void *)(v203 - 8);
  uint64_t v22 = __chkstk_darwin(v203);
  uint64_t v183 = (unint64_t *)((char *)&v173 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v22);
  uint64_t v202 = (uint64_t *)((char *)&v173 - v24);
  uint64_t v189 = sub_100183098(&qword_1006451E8);
  uint64_t v197 = *(char **)(v189 - 8);
  uint64_t v25 = __chkstk_darwin(v189);
  uint64_t v173 = (char *)&v173 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v174 = (char *)&v173 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v180 = (char *)&v173 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v186 = (char *)&v173 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v35 = (char *)&v173 - v34;
  __chkstk_darwin(v33);
  uint64_t v37 = (char *)&v173 - v36;
  uint64_t v38 = type metadata accessor for SFPlatform(0LL);
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v42 = (char *)&v173 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static SFPlatform.iOS.getter(v40);
  char v43 = static SFPlatform.isPlatform(_:)(v42);
  unint64_t v44 = *(uint64_t (**)(char *, uint64_t))(v39 + 8);
  uint64_t v45 = v44(v42, v38);
  if ((v43 & 1) != 0
    || (static SFPlatform.watchOS.getter(v45),
        char v46 = static SFPlatform.isPlatform(_:)(v42),
        uint64_t v47 = v44(v42, v38),
        (v46 & 1) != 0))
  {
    if ((a3 & 1) != 0)
    {
      uint64_t v48 = _swiftEmptyArrayStorage;
      uint64_t v49 = v197;
      uint64_t v50 = v201;
      uint64_t v51 = v192;
      uint64_t v52 = v191;
LABEL_19:
      uint64_t v91 = v194;
      v193[2](v194, v52, v51);
      uint64_t v92 = sub_100183098(&qword_100650BB8);
      if ((swift_dynamicCast(v205, v91, v51, v92, 6LL) & 1) != 0)
      {
        sub_1001CE0D0(v205, (uint64_t)&v207);
        uint64_t v93 = v208;
        uint64_t v94 = v209;
        sub_10019A708(&v207, v208);
        if (((*(uint64_t (**)(const char *, uint64_t, uint64_t))(v94 + 8))(v50, v93, v94) & 1) != 0)
        {
          unint64_t v95 = 0xD000000000000013LL;
          if ((v185 & 1) != 0) {
            unint64_t v95 = 0x662E7265646C6F66LL;
          }
          unint64_t v96 = 0x800000010050D6B0LL;
          if ((v185 & 1) != 0) {
            unint64_t v96 = 0xEB000000006C6C69LL;
          }
          uint64_t v97 = v183;
          *uint64_t v183 = v95;
          v97[1] = v96;
          uint64_t v98 = v196;
          uint64_t v99 = v203;
          (*(void (**)(unint64_t *, void, uint64_t))(v196 + 104))( v97,  enum case for SFAirDrop.ButtonConfiguration.symbol(_:),  v203);
          uint64_t v100 = sub_100183098(&qword_100650B98);
          uint64_t v197 = &v186[*(int *)(v100 + 48)];
          (*(void (**)(uint64_t *, unint64_t *, uint64_t))(v98 + 16))(v202, v97, v99);
          uint64_t v101 = v200;
          void *v200 = 0xD000000000000034LL;
          v101[1] = 0x8000000100504BB0LL;
          (*(void (**)(void))(v195 + 104))();
          sub_10019A6C4((uint64_t)&v207, (uint64_t)v205);
          uint64_t v102 = v178;
          uint64_t v103 = v177;
          uint64_t v104 = v179;
          (*(void (**)(char *, uint64_t, uint64_t))(v178 + 16))(v177, v176, v179);
          uint64_t v105 = v188;
          (*(void (**)(char *, uint64_t, uint64_t))(v188 + 16))(v198, v190, v199);
          uint64_t v106 = *(unsigned __int8 *)(v102 + 80);
          uint64_t v107 = (v106 + 64) & ~v106;
          uint64_t v108 = *(unsigned __int8 *)(v105 + 80);
          uint64_t v109 = (v175 + v108 + v107) & ~v108;
          uint64_t v110 = swift_allocObject(&unk_1005DEDA0, v109 + v187, v106 | v108 | 7);
          sub_1001CE0D0(v205, v110 + 16);
          *(void *)(v110 + 56) = v50;
          (*(void (**)(uint64_t, char *, uint64_t))(v102 + 32))(v110 + v107, v103, v104);
          uint64_t v111 = v189;
          (*(void (**)(uint64_t, char *, uint64_t))(v105 + 32))(v110 + v109, v198, v199);
          uint64_t v112 = sub_100183F14( &qword_100650B88,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
          uint64_t v113 = sub_100183F14( &qword_100650B90,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
          uint64_t v114 = sub_100183F14( &qword_100646840,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
          swift_bridgeObjectRetain(v201);
          uint64_t v115 = v186;
          uint64_t v116 = SFAirDrop.AcceptAction.Single.init(id:buttonConfiguration:prominent:hidden:defaultAnswer:operation:)( 1701998413LL,  0xE400000000000000LL,  v202,  0LL,  0LL,  v200,  sub_1003CE108,  v110,  v204,  v112,  v113,  v114);
          UUID.init()(v116);
          (*((void (**)(char *, void, uint64_t))v49 + 13))( v115,  enum case for SFAirDrop.AcceptAction.single<A>(_:),  v111);
          uint64_t v117 = v180;
          (*((void (**)(char *, char *, uint64_t))v49 + 2))(v180, v115, v111);
          if ((swift_isUniquelyReferenced_nonNull_native(v48) & 1) == 0) {
            uint64_t v48 = (void *)sub_10018C2E8(0, v48[2] + 1LL, 1, (unint64_t)v48);
          }
          unint64_t v119 = v48[2];
          unint64_t v118 = v48[3];
          if (v119 >= v118 >> 1) {
            uint64_t v48 = (void *)sub_10018C2E8(v118 > 1, v119 + 1, 1, (unint64_t)v48);
          }
          v48[2] = v119 + 1;
          (*((void (**)(unint64_t, char *, uint64_t))v49 + 4))( (unint64_t)v48 + ((v49[80] + 32LL) & ~(unint64_t)v49[80])
          + *((void *)v49 + 9) * v119,
            v117,
            v111);
          (*((void (**)(char *, uint64_t))v49 + 1))(v186, v111);
          (*(void (**)(unint64_t *, uint64_t))(v196 + 8))(v183, v203);
        }

        sub_10018709C(&v207);
      }

      else
      {
        uint64_t v206 = 0LL;
        memset(v205, 0, sizeof(v205));
        sub_100187100((uint64_t)v205, &qword_100650BC0);
      }

      return v48;
    }

    if ((v185 & 1) != 0)
    {
      NSString v53 = String._bridgeToObjectiveC()();
      id v55 = (id)SFLocalizedStringForKey(v53, v54);

      if (!v55)
      {
        unint64_t v56 = 0xE700000000000000LL;
        uint64_t v57 = 0x70704120746547LL;
LABEL_16:
        uint64_t v182 = &v37[*(int *)(sub_100183098(&qword_100650B98) + 48)];
        uint64_t v75 = v202;
        uint64_t v74 = v203;
        *uint64_t v202 = v57;
        v75[1] = v56;
        (*(void (**)(uint64_t *, void, uint64_t))(v196 + 104))( v75,  enum case for SFAirDrop.ButtonConfiguration.text(_:),  v74);
        __n128 v76 = v200;
        uint64_t v77 = v204;
        (*(void (**)(void *, uint64_t, uint64_t))(v195 + 16))(v200, v184, v204);
        uint64_t v78 = v188;
        uint64_t v80 = v198;
        uint64_t v79 = v199;
        (*(void (**)(char *, uint64_t, uint64_t))(v188 + 16))(v198, v190, v199);
        uint64_t v81 = *(unsigned __int8 *)(v78 + 80);
        uint64_t v82 = (v81 + 16) & ~v81;
        uint64_t v83 = swift_allocObject(&unk_1005DED78, v82 + v187, v81 | 7);
        (*(void (**)(uint64_t, char *, uint64_t))(v78 + 32))(v83 + v82, v80, v79);
        uint64_t v84 = sub_100183F14( &qword_100650B88,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
        uint64_t v85 = sub_100183F14( &qword_100650B90,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
        uint64_t v86 = sub_100183F14( &qword_100646840,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
        uint64_t v87 = SFAirDrop.AcceptAction.Single.init(id:buttonConfiguration:prominent:hidden:defaultAnswer:operation:)( 2003134806LL,  0xE400000000000000LL,  v75,  0LL,  1LL,  v76,  sub_1003CE01C,  v83,  v77,  v84,  v85,  v86);
        UUID.init()(v87);
        uint64_t v49 = v197;
        uint64_t v88 = v189;
        (*((void (**)(char *, void, uint64_t))v197 + 13))( v37,  enum case for SFAirDrop.AcceptAction.single<A>(_:),  v189);
        (*((void (**)(char *, char *, uint64_t))v49 + 2))(v35, v37, v88);
        uint64_t v48 = (void *)sub_10018C2E8(0, 1LL, 1, (unint64_t)_swiftEmptyArrayStorage);
        unint64_t v90 = v48[2];
        unint64_t v89 = v48[3];
        if (v90 >= v89 >> 1) {
          uint64_t v48 = (void *)sub_10018C2E8(v89 > 1, v90 + 1, 1, (unint64_t)v48);
        }
        uint64_t v50 = v201;
        uint64_t v51 = v192;
        uint64_t v52 = v191;
        v48[2] = v90 + 1;
        (*((void (**)(unint64_t, char *, uint64_t))v49 + 4))( (unint64_t)v48 + ((v49[80] + 32LL) & ~(unint64_t)v49[80])
        + *((void *)v49 + 9) * v90,
          v35,
          v88);
        (*((void (**)(char *, uint64_t))v49 + 1))(v37, v88);
        goto LABEL_19;
      }
    }

    else
    {
      NSString v71 = String._bridgeToObjectiveC()();
      id v55 = (id)SFLocalizedStringForKey(v71, v72);

      if (!v55)
      {
        unint64_t v56 = 0xE400000000000000LL;
        uint64_t v57 = 2003134806LL;
        goto LABEL_16;
      }
    }

    uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
    unint64_t v56 = v73;

    goto LABEL_16;
  }

  static SFPlatform.macOS.getter(v47);
  char v58 = static SFPlatform.isPlatform(_:)(v42);
  v44(v42, v38);
  if ((v58 & 1) == 0) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v201 = v9;
  uint64_t v59 = v195;
  uint64_t v60 = *(void (**)(char *, uint64_t, uint64_t))(v195 + 16);
  uint64_t v61 = v184;
  uint64_t v62 = v204;
  v60(v20, v184, v204);
  int v63 = (*(uint64_t (**)(char *, uint64_t))(v59 + 88))(v20, v62);
  int v64 = enum case for SFAirDropReceive.ItemDestination.default(_:);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v20, v62);
  if (v63 != v64) {
    return _swiftEmptyArrayStorage;
  }
  NSString v65 = String._bridgeToObjectiveC()();
  id v67 = (id)SFLocalizedStringForKey(v65, v66);

  uint64_t v194 = v10;
  if (v67)
  {
    uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
    unint64_t v70 = v69;
  }

  else
  {
    unint64_t v70 = 0xEE007265646E6946LL;
    uint64_t v68 = 0x206E6920776F6853LL;
  }

  uint64_t v121 = v202;
  *uint64_t v202 = v68;
  v121[1] = v70;
  uint64_t v122 = *(void (***)(char *, uint64_t, uint64_t))(v196 + 104);
  LODWORD(v196) = enum case for SFAirDrop.ButtonConfiguration.text(_:);
  v193 = v122;
  ((void (*)(uint64_t *))v122)(v121);
  uint64_t v123 = v200;
  uint64_t v124 = v204;
  v60((char *)v200, v61, v204);
  uint64_t v125 = v188;
  uint64_t v127 = v198;
  uint64_t v126 = v199;
  uint64_t v186 = *(char **)(v188 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v186)(v198, v190, v199);
  uint64_t v128 = *(unsigned __int8 *)(v125 + 80);
  uint64_t v129 = (v128 + 16) & ~v128;
  uint64_t v130 = v128 | 7;
  v187 += v129;
  uint64_t v131 = swift_allocObject(&unk_1005DED28, v187, v128 | 7);
  uint64_t v132 = *(void (**)(uint64_t, char *, uint64_t))(v125 + 32);
  v132(v131 + v129, v127, v126);
  uint64_t v133 = sub_100183F14( &qword_100650B88,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
  uint64_t v134 = sub_100183F14( &qword_100650B90,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
  uint64_t v188 = sub_100183F14( &qword_100646840,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.ItemDestination,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.ItemDestination);
  uint64_t v191 = v134;
  uint64_t v192 = v133;
  SFAirDrop.AcceptAction.Single.init(id:buttonConfiguration:prominent:hidden:defaultAnswer:operation:)( 0x69466E49776F6853LL,  0xEC0000007265646ELL,  v121,  0LL,  0LL,  v123,  sub_1003CE01C,  v131,  v124,  v133,  v134,  v188);
  NSString v135 = String._bridgeToObjectiveC()();
  id v137 = (id)SFLocalizedStringForKey(v135, v136);

  if (v137)
  {
    uint64_t v138 = static String._unconditionallyBridgeFromObjectiveC(_:)(v137);
    unint64_t v140 = v139;
  }

  else
  {
    unint64_t v140 = 0xE400000000000000LL;
    uint64_t v138 = 1852141647LL;
  }

  uint64_t v142 = v202;
  uint64_t v141 = v203;
  *uint64_t v202 = v138;
  v142[1] = v140;
  ((void (*)(uint64_t *, void, uint64_t))v193)(v142, v196, v141);
  char v143 = v200;
  void *v200 = 0xD000000000000024LL;
  v143[1] = 0x800000010050D640LL;
  uint64_t v144 = v204;
  (*(void (**)(void *, void, uint64_t))(v195 + 104))( v143,  enum case for SFAirDropReceive.ItemDestination.customApp(_:),  v204);
  uint64_t v146 = v198;
  uint64_t v145 = v199;
  ((void (*)(char *, uint64_t, uint64_t))v186)(v198, v190, v199);
  uint64_t v147 = swift_allocObject(&unk_1005DED50, v187, v130);
  v132(v147 + v129, v146, v145);
  SFAirDrop.AcceptAction.Single.init(id:buttonConfiguration:prominent:hidden:defaultAnswer:operation:)( 1852141647LL,  0xE400000000000000LL,  v142,  0LL,  0LL,  v143,  sub_1003CE01C,  v147,  v144,  v192,  v191,  v188);
  NSString v148 = String._bridgeToObjectiveC()();
  id v150 = (id)SFLocalizedStringForKey(v148, v149);

  if (v150)
  {
    uint64_t v151 = static String._unconditionallyBridgeFromObjectiveC(_:)(v150);
    unint64_t v153 = v152;
  }

  else
  {
    unint64_t v153 = 0xE700000000000000LL;
    uint64_t v151 = 0x736E6F6974704FLL;
  }

  uint64_t v154 = v189;
  uint64_t v155 = v197;
  uint64_t v156 = v201;
  sub_100183098(&qword_100652948);
  uint64_t v157 = v174;
  uint64_t v159 = v202;
  uint64_t v158 = v203;
  *uint64_t v202 = v151;
  v159[1] = v153;
  ((void (*)(uint64_t *, void, uint64_t))v193)(v159, v196, v158);
  uint64_t v160 = sub_100183098(&qword_100652950);
  uint64_t v161 = v194;
  uint64_t v162 = *((void *)v194 + 9);
  uint64_t v163 = v194[80];
  uint64_t v164 = (v163 + 32) & ~v163;
  uint64_t v165 = swift_allocObject(v160, v164 + 2 * v162, v163 | 7);
  *(_OWORD *)(v165 + 16) = xmmword_1004CD530;
  uint64_t v166 = v165 + v164;
  uint64_t v167 = (void (*)(uint64_t, char *, const char *))*((void *)v161 + 2);
  v167(v166, v182, v156);
  v167(v166 + v162, v181, v156);
  uint64_t v168 = SFAirDrop.AcceptAction.Composite.init(buttonConfiguration:actions:)(v159, v165, v204, v192, v191, v188);
  UUID.init()(v168);
  (*((void (**)(char *, void, uint64_t))v155 + 13))( v157,  enum case for SFAirDrop.AcceptAction.composite<A>(_:),  v154);
  uint64_t v169 = v173;
  (*((void (**)(char *, char *, uint64_t))v155 + 2))(v173, v157, v154);
  uint64_t v48 = (void *)sub_10018C2E8(0, 1LL, 1, (unint64_t)_swiftEmptyArrayStorage);
  unint64_t v171 = v48[2];
  unint64_t v170 = v48[3];
  if (v171 >= v170 >> 1) {
    uint64_t v48 = (void *)sub_10018C2E8(v170 > 1, v171 + 1, 1, (unint64_t)v48);
  }
  v48[2] = v171 + 1;
  (*((void (**)(unint64_t, char *, uint64_t))v155 + 4))( (unint64_t)v48 + ((v155[80] + 32LL) & ~(unint64_t)v155[80])
  + *((void *)v155 + 9) * v171,
    v169,
    v154);
  (*((void (**)(char *, uint64_t))v155 + 1))(v174, v154);
  uint64_t v172 = (void (*)(char *, const char *))*((void *)v194 + 1);
  v172(v182, v156);
  v172(v181, v156);
  return v48;
}

uint64_t sub_1003CDCDC()
{
  return sub_10025F7F0(&qword_100650B80);
}

uint64_t sub_1003CDCE8()
{
  return sub_1003CB6C4();
}

uint64_t sub_1003CDD18()
{
  uint64_t v1 = sub_100183098(&qword_100650B80);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v5 = type metadata accessor for SFAirDropReceive.Transfer(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = v7 + *(void *)(v6 + 64);
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject(v0, v8);
}

uint64_t sub_1003CDDE4(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_100183098(&qword_100650B80) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(type metadata accessor for SFAirDropReceive.Transfer(0LL) - 8) + 80LL);
  uint64_t v8 = v6 + v7 + 8;
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v10 = *(void *)(v1 + 24);
  uint64_t v11 = v1 + v5;
  uint64_t v12 = *(void *)(v1 + v6);
  uint64_t v13 = v1 + (v8 & ~v7);
  uint64_t v14 = (void *)swift_task_alloc(dword_10065291C);
  *(void *)(v2 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = sub_100195708;
  return sub_1003CB828(a1, v9, v10, v11, v12, v13);
}

uint64_t sub_1003CDEB0()
{
  return sub_10025F7F0(&qword_100650B80);
}

uint64_t sub_1003CDEBC(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(sub_100183098(&qword_100650B80) - 8) + 80LL);
  uint64_t v5 = v1 + ((v4 + 16) & ~v4);
  unint64_t v6 = (void *)swift_task_alloc(dword_10065292C);
  *(void *)(v2 + 16) = v6;
  *unint64_t v6 = v2;
  v6[1] = sub_100195708;
  return sub_1003CBBB4(a1, v5);
}

uint64_t sub_1003CDF30()
{
  uint64_t v1 = type metadata accessor for SFAirDropReceive.Transfer(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1003CDF90(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(type metadata accessor for SFAirDropReceive.Transfer(0LL) - 8) + 80LL);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + ((v4 + 24) & ~v4);
  uint64_t v7 = (void *)swift_task_alloc(dword_10065293C);
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1001943E8;
  return sub_1003CBC4C(a1, v5, v6);
}

uint64_t sub_1003CE010()
{
  return sub_10025F7F0(&qword_100650B80);
}

uint64_t sub_1003CE01C(uint64_t a1)
{
  return sub_1003CE580(a1, &qword_100650B80);
}

uint64_t sub_1003CE028()
{
  return sub_10025F7F0(&qword_100650B80);
}

uint64_t sub_1003CE034()
{
  return sub_10025F7F0(&qword_100650B80);
}

uint64_t sub_1003CE040()
{
  uint64_t v1 = type metadata accessor for SFAirDropReceive.Transfer(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 64LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = v3 + *(void *)(v2 + 64);
  uint64_t v5 = sub_100183098(&qword_100650B80);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = v7 + *(void *)(v6 + 64);
  sub_10018709C((void *)(v0 + 16));
  __n128 v9 = swift_bridgeObjectRelease((const char *)*(void *)(v0 + 56));
  (*(void (**)(unint64_t, uint64_t, __n128))(v2 + 8))(v0 + v3, v1, v9);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject(v0, v8);
}

uint64_t sub_1003CE108(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SFAirDropReceive.Transfer(0LL);
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)(v3 - 8) + 80LL) + 64LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80LL);
  sub_100183098(&qword_100650B80);
  return sub_1003CC140(a1, v1 + 16, *(const char **)(v1 + 56), v1 + v4);
}

uint64_t sub_1003CE17C()
{
  uint64_t v1 = type metadata accessor for SFAirDropReceive.Transfer(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 64LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = v3 + *(void *)(v2 + 64);
  sub_10018709C((void *)(v0 + 16));
  __n128 v5 = swift_bridgeObjectRelease((const char *)*(void *)(v0 + 56));
  (*(void (**)(unint64_t, uint64_t, __n128))(v2 + 8))(v0 + v3, v1, v5);
  return swift_deallocObject(v0, v4);
}

uint64_t sub_1003CE1F8(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(type metadata accessor for SFAirDropReceive.Transfer(0LL) - 8) + 80LL);
  uint64_t v5 = v1 + 16;
  uint64_t v6 = *(void *)(v1 + 56);
  uint64_t v7 = v1 + ((v4 + 64) & ~v4);
  unint64_t v8 = (void *)swift_task_alloc(dword_10065295C);
  *(void *)(v2 + 16) = v8;
  *unint64_t v8 = v2;
  v8[1] = sub_1001943E8;
  return sub_1003CC2EC(a1, v5, v6, v7);
}

uint64_t sub_1003CE280()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = type metadata accessor for SFAirDropReceive.Transfer(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 48) & ~v5;
  uint64_t v7 = v6 + *(void *)(v4 + 64);
  uint64_t v8 = type metadata accessor for SFProgressTask(0LL, v1, v2);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v7 + v10) & ~v10;
  uint64_t v12 = v11 + *(void *)(v9 + 64);
  uint64_t v13 = v5 | v10 | 7;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v6, v3);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0 + v11, v8);
  return swift_deallocObject(v0, v12, v13);
}

uint64_t sub_1003CE340()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = *(void *)(type metadata accessor for SFAirDropReceive.Transfer(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = v5 + *(void *)(v4 + 64);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(type metadata accessor for SFProgressTask(0LL, v2, v3) - 8) + 80LL);
  return sub_1003CB3A0((uint64_t)v0 + v5, (uint64_t)v0 + ((v6 + v7) & ~v7), v1, v2, v3);
}

uint64_t sub_1003CE3D0()
{
  return sub_10025F7F0(&qword_10064A0A0);
}

uint64_t sub_1003CE3DC()
{
  return sub_1003CE528(&qword_10064A0A0, (unsigned int *)&enum case for SFAirDropReceive.Failure.receiverCancelled(_:));
}

uint64_t sub_1003CE3F0()
{
  return sub_10025F7F0(&qword_10064A0A0);
}

uint64_t sub_1003CE3FC(uint64_t a1)
{
  return sub_1003CE580(a1, &qword_10064A0A0);
}

uint64_t sub_1003CE408()
{
  uint64_t v1 = sub_100183098(&qword_10064A0A0);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = v3 + *(void *)(v2 + 64);
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject(v0, v4);
}

uint64_t sub_1003CE480(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(sub_100183098(&qword_10064A0A0) - 8) + 80LL);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((v4 + 32) & ~v4);
  uint64_t v8 = (void *)swift_task_alloc(dword_10065296C);
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100195708;
  return sub_1003CB294(a1, v5, v6, v7);
}

uint64_t sub_1003CE508()
{
  return sub_10025F7F0(&qword_100650B80);
}

uint64_t sub_1003CE514()
{
  return sub_1003CE528(&qword_100650B80, (unsigned int *)&enum case for SFAirDropReceive.Failure.declined(_:));
}

uint64_t sub_1003CE528(uint64_t *a1, unsigned int *a2)
{
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(sub_100183098(a1) - 8) + 80LL);
  return sub_1003CB1EC(v2 + ((v5 + 16) & ~v5), a2, a1);
}

uint64_t sub_1003CE574()
{
  return sub_10025F7F0(&qword_100650B80);
}

uint64_t sub_1003CE580(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100183098(a2);
  return SFProgressContinuation.finish(with:)(a1, v3);
}

uint64_t sub_1003CE5C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100183098(&qword_100646830);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003CE60C()
{
  uint64_t v1 = *(void *)(sub_100183098(&qword_100646830) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v12 = *(void *)(v1 + 64);
  uint64_t v3 = sub_100183098(&qword_100650B80);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  uint64_t v7 = sub_100183098(&qword_1006457D8);
  uint64_t v8 = *(void *)(v7 - 8);
  unint64_t v9 = (v2 + v12 + v5) & ~v5;
  uint64_t v10 = v9 + v6;
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v9, v3);
  return swift_deallocObject(v0, v10);
}

uint64_t sub_1003CE70C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100183098(&qword_100646830);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003CE754(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_100183098(&qword_100646830) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(sub_100183098(&qword_100650B80) - 8) + 80LL);
  unint64_t v8 = v5 + v6 + v7;
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v10 = *(void *)(v1 + 24);
  uint64_t v11 = v1 + v5;
  uint64_t v12 = v1 + (v8 & ~v7);
  uint64_t v13 = (void *)swift_task_alloc(dword_100652994);
  *(void *)(v2 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = sub_100195708;
  return sub_1003CA428(a1, v9, v10, v11, v12);
}

uint64_t sub_1003CE810()
{
  return sub_10025F7F0(&qword_1006457D8);
}

uint64_t sub_1003CE81C(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(sub_100183098(&qword_1006457D8) - 8) + 80LL);
  uint64_t v5 = v1 + ((v4 + 16) & ~v4);
  uint64_t v6 = (void *)swift_task_alloc(dword_1006529AC);
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100195708;
  return sub_1003CADC0(a1, v5);
}

uint64_t sub_1003CE890()
{
  return sub_10025F7F0(&qword_100650B80);
}

uint64_t sub_1003CE89C(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(sub_100183098(&qword_100650B80) - 8) + 80LL);
  uint64_t v5 = v1 + ((v4 + 16) & ~v4);
  uint64_t v6 = (void *)swift_task_alloc(dword_1006529BC);
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100195708;
  return sub_1003CB0E0(a1, v5);
}

uint64_t sub_1003CE910()
{
  uint64_t v1 = v0;
  if (qword_1006442C8 != -1) {
    swift_once(&qword_1006442C8, sub_1003CECB8);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_100186DE4(v2, (uint64_t)qword_1006529D0);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Starting to listen over Bonjour", v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  NWListener.stateUpdateHandler.setter(sub_1003CF380, 0LL);
  uint64_t v7 = swift_allocObject(&unk_1005DEF58, 24LL, 7LL);
  swift_weakInit(v7 + 16);
  swift_retain(v7);
  NWListener.newConnectionHandler.setter(sub_1003D052C, v7);
  swift_release(v7);
  NWListener.start(queue:)(*(void *)(v1 + 16));
  if (qword_100644308 != -1) {
    swift_once(&qword_100644308, sub_1003EA8BC);
  }
  sub_1003EA5E8();
  return sub_1003CFA78();
}

void sub_1003CEA74()
{
  uint64_t v1 = v0;
  if (qword_1006442C8 != -1) {
    swift_once(&qword_1006442C8, sub_1003CECB8);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_100186DE4(v2, (uint64_t)qword_1006529D0);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Stopping temp pairing server", v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  uint64_t v7 = v1[9];
  if (v7)
  {
    swift_getObjectType(v1[9]);
    swift_unknownObjectRetain(v7);
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease(v7);
    uint64_t v8 = v1[9];
    v1[9] = 0LL;
    swift_unknownObjectRelease(v8);
  }

  NWListener.cancel()();
  *(void *)&double v9 = swift_beginAccess(v1 + 8, v19, 0LL, 0LL).n128_u64[0];
  uint64_t v10 = v1[8];
  if ((unint64_t)v10 >> 62)
  {
    if (v10 < 0) {
      uint64_t v15 = v1[8];
    }
    else {
      uint64_t v15 = v10 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain((const char *)v1[8], v9);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v15);
    if (!v11) {
      goto LABEL_19;
    }
  }

  else
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    *(void *)&double v12 = swift_bridgeObjectRetain((const char *)v1[8], v9).n128_u64[0];
    if (!v11) {
      goto LABEL_19;
    }
  }

  if (v11 < 1)
  {
    __break(1u);
    return;
  }

  for (uint64_t i = 0LL; i != v11; ++i)
  {
    if ((v10 & 0xC000000000000001LL) != 0)
    {
      uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v10);
    }

    else
    {
      uint64_t v14 = *(void *)(v10 + 8 * i + 32);
      swift_retain(v14);
    }

    NWConnection.cancel()();
    swift_release(v14);
  }

uint64_t sub_1003CECB8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100186DFC(v0, qword_1006529D0);
  uint64_t v1 = sub_100186DE4(v0, (uint64_t)qword_1006529D0);
  if (qword_100643FC8 != -1) {
    swift_once(&qword_100643FC8, sub_10023A3CC);
  }
  uint64_t v2 = sub_100186DE4(v0, (uint64_t)qword_1006695C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_1003CED48()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval(0LL);
  sub_100186DFC(v0, qword_1006529E8);
  *(void *)sub_100186DE4(v0, (uint64_t)qword_1006529E8) = 60LL;
  return (*(uint64_t (**)(void))(*(void *)(v0 - 8) + 104LL))();
}

void *sub_1003CEDA8(const char *a1, const char *a2, void *a3)
{
  uint64_t v59 = a1;
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  uint64_t v8 = type metadata accessor for NWTXTRecord(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100183098((uint64_t *)&unk_100652B00);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for NWEndpoint.Port(0LL);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v3[3] = 0LL;
  v3[4] = 0LL;
  v3[8] = _swiftEmptyArrayStorage;
  v3[9] = 0LL;
  v3[7] = [objc_allocWithZone(RPClient) init];
  v3[2] = a3;
  uint64_t v17 = (void *)objc_opt_self(&OBJC_CLASS___SDNearbyAgent);
  id v18 = a3;
  id v19 = [v17 sharedNearbyAgent];
  id v20 = [v19 temporarySelfIdentity];

  if (!v20)
  {
    swift_bridgeObjectRelease(a2);
    uint64_t v41 = type metadata accessor for SFError(0LL);
    uint64_t v42 = sub_100183F14( &qword_1006461A8,  (uint64_t (*)(uint64_t))&type metadata accessor for SFError,  (uint64_t)&protocol conformance descriptor for SFError);
    swift_allocError(v41, v42, 0LL, 0LL);
    *char v43 = 0xD000000000000015LL;
    v43[1] = 0x800000010050D800LL;
    void v43[2] = 0xD00000000000005ALL;
    v43[3] = 0x800000010050D820LL;
    v43[4] = 42LL;
    uint64_t v44 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v41 - 8) + 104LL))( v43,  enum case for SFError.missingValue(_:),  v41);
    swift_willThrow(v44);
LABEL_8:

    int v49 = 0;
    goto LABEL_11;
  }

  id v21 = [v20 edPKData];
  if (!v21)
  {
    swift_bridgeObjectRelease(a2);
    uint64_t v45 = type metadata accessor for SFError(0LL);
    uint64_t v46 = sub_100183F14( &qword_1006461A8,  (uint64_t (*)(uint64_t))&type metadata accessor for SFError,  (uint64_t)&protocol conformance descriptor for SFError);
    swift_allocError(v45, v46, 0LL, 0LL);
    *uint64_t v47 = 0x617461444B506465LL;
    v47[1] = 0xE800000000000000LL;
    v47[2] = 0xD00000000000005ALL;
    v47[3] = 0x800000010050D820LL;
    _BYTE v47[4] = 46LL;
    uint64_t v48 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v45 - 8) + 104LL))( v47,  enum case for SFError.missingValue(_:),  v45);
    swift_willThrow(v48);

    goto LABEL_8;
  }

  uint64_t v22 = v21;
  id v57 = v18;
  uint64_t v55 = v7;
  uint64_t v23 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v21);
  uint64_t v25 = v24;

  v4[6] = v20;
  id v26 = v20;
  char v58 = v23;
  unint64_t v56 = v25;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v61[0] = 0LL;
  id v28 = [v26 authTagForData:isa type:1 error:v61];

  id v29 = v61[0];
  if (v28)
  {
    uint64_t v30 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v28);
    uint64_t v32 = v31;

    v61[1] = (id)v59;
    v61[2] = (id)a2;
    uint64_t v59 = a2;
    unint64_t v33 = (unint64_t)v56;
    v61[3] = v58;
    v61[4] = v56;
    v61[5] = v30;
    v61[6] = v32;
    sub_10019BA8C((uint64_t)v58, (unint64_t)v56);
    sub_10019BA8C((uint64_t)v30, (unint64_t)v32);
    uint64_t v34 = sub_100419AF8();
    static NWEndpoint.Port.any.getter();
    uint64_t v35 = type metadata accessor for NWListener(0LL);
    swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
    uint64_t v36 = v60;
    uint64_t v37 = NWListener.init(using:on:)(v34, v16);
    if (!v36)
    {
      v4[5] = v37;
      uint64_t v60 = v37;
      sub_10031E534();
      NWListener.Service.init(name:type:domain:txtRecord:)( 0LL,  0LL,  0xD000000000000011LL,  0x8000000100508C70LL,  0LL,  0LL,  v10);
      uint64_t v53 = type metadata accessor for NWListener.Service(0LL);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56LL))(v13, 0LL, 1LL, v53);
      NWListener.service.setter(v13);

      uint64_t v54 = (uint64_t)v58;
      sub_100189B20((uint64_t)v58, v33);
      sub_100189B20((uint64_t)v30, (unint64_t)v32);
      swift_bridgeObjectRelease(v59);
      sub_100189B20(v54, v33);
      sub_100189B20((uint64_t)v30, (unint64_t)v32);
      return v4;
    }

    uint64_t v38 = (uint64_t)v58;
    sub_100189B20((uint64_t)v58, v33);
    sub_100189B20((uint64_t)v30, (unint64_t)v32);
    swift_bridgeObjectRelease(v59);
    sub_100189B20(v38, v33);
    uint64_t v39 = (uint64_t)v30;
    unint64_t v40 = (unint64_t)v32;
  }

  else
  {
    uint64_t v50 = v29;
    swift_bridgeObjectRelease(a2);
    _convertNSErrorToError(_:)(v50);

    swift_willThrow(v51);
    uint64_t v39 = (uint64_t)v58;
    unint64_t v40 = (unint64_t)v56;
  }

  sub_100189B20(v39, v40);
  int v49 = 1;
  uint64_t v7 = v55;
LABEL_11:

  sub_100224FF8(v4[3], v4[4]);
  if (v49) {

  }
  swift_bridgeObjectRelease((const char *)v4[8]);
  swift_unknownObjectRelease(v4[9]);
  swift_deallocPartialClassInstance(v4, v7, 80LL, 7LL);
  return v4;
}

void sub_1003CF380(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NWListener.State(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v20 - v7;
  if (qword_1006442C8 != -1) {
    swift_once(&qword_1006442C8, sub_1003CECB8);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v9, (uint64_t)qword_1006529D0);
  uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16);
  uint64_t v11 = v10(v8, a1, v2);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v23 = v15;
    *(_DWORD *)uint64_t v14 = 136315138;
    id v21 = v14 + 4;
    v10(v6, (uint64_t)v8, v2);
    uint64_t v16 = String.init<A>(describing:)(v6, v2);
    id v18 = (const char *)v17;
    uint64_t v22 = sub_10018CDB4(v16, v17, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v21, v14 + 12);
    __n128 v19 = swift_bridgeObjectRelease(v18);
    (*(void (**)(char *, uint64_t, __n128))(v3 + 8))(v8, v2, v19);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Bonjour listener state changed: %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  }
}

uint64_t sub_1003CF5A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100183098(&qword_100646560);
  __chkstk_darwin(v4);
  uint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a2 += 16LL;
  swift_beginAccess(a2, v13, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v8 = result;
    uint64_t v9 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v6, 1LL, 1LL, v9);
    uint64_t v10 = (void *)swift_allocObject(&unk_1005DEFD0, 48LL, 7LL);
    v10[2] = 0LL;
    v10[3] = 0LL;
    v10[4] = v8;
    v10[5] = a1;
    swift_retain(a1);
    uint64_t v11 = sub_1001B37E8((uint64_t)v6, (uint64_t)&unk_100652AF0, (uint64_t)v10);
    return swift_release(v11);
  }

  return result;
}

uint64_t sub_1003CF694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return swift_task_switch(sub_1003CF6AC, 0LL, 0LL);
}

uint64_t sub_1003CF6AC()
{
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_1003CF710, static AirDropActor.shared, 0LL);
}

uint64_t sub_1003CF710()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003CF740(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for SDTempPairingConnection.Role(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (qword_1006442C8 != -1) {
    swift_once(&qword_1006442C8, sub_1003CECB8);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v7, (uint64_t)qword_1006529D0);
  uint64_t v8 = swift_retain_n(a1, 2LL);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v35 = v4;
    uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v36 = a1;
    v37[0] = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v13 = type metadata accessor for NWConnection(0LL);
    swift_retain();
    uint64_t v14 = String.init<A>(describing:)(&v36, v13);
    uint64_t v16 = (const char *)v15;
    uint64_t v36 = sub_10018CDB4(v14, v15, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v11 + 4, v11 + 12);
    swift_release_n(a1, 2LL);
    unint64_t v17 = v16;
    uint64_t v4 = v35;
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Received incoming connection: %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {

    swift_release_n(a1, 2LL);
  }

  *uint64_t v6 = a1;
  swift_storeEnumTagMultiPayload(v6, v4, 1LL);
  id v18 = (void *)v2[6];
  __n128 v19 = (void *)v2[2];
  uint64_t v20 = type metadata accessor for SDTempPairingConnection(0LL);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  swift_retain();
  id v21 = v18;
  id v22 = v19;
  uint64_t v23 = sub_1003241B4((uint64_t)v6, v21, v22);

  uint64_t v24 = swift_allocObject(&unk_1005DEF58, 24LL, 7LL);
  swift_weakInit(v24 + 16);
  uint64_t v25 = swift_allocObject(&unk_1005DEFF8, 32LL, 7LL);
  *(void *)(v25 + 16) = v24;
  *(void *)(v25 + 24) = v23;
  uint64_t v26 = v23[3];
  uint64_t v27 = v23[4];
  v23[3] = sub_1003D06AC;
  v23[4] = v25;
  swift_retain();
  sub_100224FF8(v26, v27);
  swift_beginAccess(v2 + 8, v37, 33LL, 0LL);
  uint64_t v28 = swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v28);
  uint64_t v29 = v2[8] & 0xFFFFFFFFFFFFFF8LL;
  unint64_t v31 = *(void *)(v29 + 0x10);
  unint64_t v30 = *(void *)(v29 + 24);
  if (v31 >= v30 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1LL);
  }
  uint64_t v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v23);
  specialized Array._endMutation()(v32);
  swift_endAccess(v37);
  return swift_release(v23);
}

uint64_t sub_1003CFA78()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v47 = *(void *)(v2 - 8);
  uint64_t v48 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v46 = (uint64_t *)((char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v3);
  uint64_t v45 = (uint64_t)&v39 - v5;
  uint64_t v6 = type metadata accessor for DispatchTime(0LL);
  uint64_t v43 = *(void *)(v6 - 8);
  uint64_t v44 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v39 - v10;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v41 = *(void *)(v12 - 8);
  uint64_t v42 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v39 = *(void *)(v15 - 8);
  uint64_t v40 = v15;
  __chkstk_darwin(v15);
  unint64_t v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for OS_dispatch_source.TimerFlags(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  id v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = *(void *)(v0 + 72);
  if (v22)
  {
    swift_getObjectType(v22);
    swift_unknownObjectRetain(v22);
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease(v22);
    uint64_t v23 = *(void *)(v1 + 72);
    *(void *)(v1 + 72) = 0LL;
    swift_unknownObjectRelease(v23);
  }

  sub_100183168(0LL, (unint64_t *)&qword_100646C80, &OBJC_CLASS___OS_dispatch_source_ptr);
  static OS_dispatch_source.TimerFlags.strict.getter();
  uint64_t v24 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v21, *(void *)(v1 + 16));
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  uint64_t v25 = *(void *)(v1 + 72);
  *(void *)(v1 + 72) = v24;
  swift_unknownObjectRetain(v24);
  swift_unknownObjectRelease(v25);
  uint64_t ObjectType = swift_getObjectType(v24);
  uint64_t v27 = swift_allocObject(&unk_1005DEF58, 24LL, 7LL);
  swift_weakInit(v27 + 16);
  aBlock[4] = sub_1003D0534;
  uint64_t v50 = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001B9FE4;
  aBlock[3] = &unk_1005DEF70;
  uint64_t v28 = _Block_copy(aBlock);
  swift_retain(v27);
  j___s8Dispatch0A3QoSV11unspecifiedACvgZ(ObjectType);
  sub_1003D06B8();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v17, v14, v28, ObjectType);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v14, v42);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v17, v40);
  uint64_t v29 = v50;
  swift_release(v27);
  uint64_t v30 = swift_release(v29);
  static DispatchTime.now()(v30);
  if (qword_1006442D0 != -1) {
    swift_once(&qword_1006442D0, sub_1003CED48);
  }
  uint64_t v31 = v48;
  uint64_t v32 = sub_100186DE4(v48, (uint64_t)qword_1006529E8);
  + infix(_:_:)(v9, v32);
  uint64_t v33 = v44;
  uint64_t v34 = *(void (**)(char *, uint64_t))(v43 + 8);
  v34(v9, v44);
  uint64_t v35 = v45;
  sub_1001DB690(v45);
  uint64_t v36 = v46;
  sub_1001DB6D4(v46);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v11, v35, v36, ObjectType);
  uint64_t v37 = *(void (**)(void *, uint64_t))(v47 + 8);
  v37(v36, v31);
  v37((void *)v35, v31);
  v34(v11, v33);
  OS_dispatch_source.activate()();
  return swift_unknownObjectRelease(v24);
}

uint64_t sub_1003CFE64(uint64_t a1)
{
  uint64_t v2 = sub_100183098(&qword_100646560);
  __chkstk_darwin(v2);
  uint64_t v4 = &v14[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a1 += 16LL;
  swift_beginAccess(a1, v14, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a1);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v4, 1LL, 1LL, v7);
    uint64_t v8 = qword_100643F28;
    swift_retain(v6);
    if (v8 != -1) {
      swift_once(&qword_100643F28, sub_100205C24);
    }
    uint64_t v9 = static AirDropActor.shared;
    uint64_t v10 = sub_100183F14( (unint64_t *)&qword_100656410,  (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor,  (uint64_t)&protocol conformance descriptor for AirDropActor);
    uint64_t v11 = (void *)swift_allocObject(&unk_1005DEFA8, 40LL, 7LL);
    v11[2] = v9;
    v11[3] = v10;
    v11[4] = v6;
    swift_retain(v9);
    uint64_t v12 = sub_1001B37E8((uint64_t)v4, (uint64_t)&unk_100652AE0, (uint64_t)v11);
    swift_release(v12);
    return swift_release(v6);
  }

  return result;
}

uint64_t sub_1003CFFC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_1003D0028, static AirDropActor.shared, 0LL);
}

uint64_t sub_1003D0028()
{
  if (qword_1006442C8 != -1) {
    swift_once(&qword_1006442C8, sub_1003CECB8);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_1006529D0);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Timer fired, stopping server", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  sub_1003CEA74();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003D010C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v5);
  if (result)
  {
    uint64_t v7 = result;
    sub_1003D017C(a1, a3);
    return swift_release(v7);
  }

  return result;
}

__n128 sub_1003D017C(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_1006442C8 != -1) {
    swift_once(&qword_1006442C8, sub_1003CECB8);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v6, (uint64_t)qword_1006529D0);
  id v7 = a1;
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v26 = v3;
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    v29[0] = v11;
    *(_DWORD *)uint64_t v10 = 136315138;
    uint64_t v27 = (uint64_t)v7;
    uint64_t v12 = sub_100183168(0LL, (unint64_t *)&unk_10064BB50, &OBJC_CLASS___RPIdentity_ptr);
    id v13 = v7;
    uint64_t v14 = String.init<A>(describing:)(&v27, v12);
    uint64_t v16 = (const char *)v15;
    uint64_t v27 = sub_10018CDB4(v14, v15, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v10 + 4, v10 + 12);

    uint64_t v3 = v26;
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Adding remote identity: %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
  }

  unint64_t v17 = *(void **)(v3 + 56);
  objc_msgSend(v17, "addOrUpdateIdentity:completion:", v7, 0, v26);
  NWConnection.cancel()();
  uint64_t v18 = (const char **)(v3 + 64);
  swift_beginAccess(v3 + 64, v29, 33LL, 0LL);
  swift_retain();
  int64_t v19 = sub_100298A24((const char **)(v3 + 64), a2);
  swift_release(a2);
  uint64_t v20 = *(void *)(v3 + 64);
  if (!((unint64_t)v20 >> 62))
  {
    uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v21 >= v19) {
      goto LABEL_8;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  if (v20 < 0) {
    uint64_t v23 = v20;
  }
  else {
    uint64_t v23 = v20 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain((const char *)v20);
  uint64_t v21 = _CocoaArrayWrapper.endIndex.getter(v23);
  swift_bridgeObjectRelease((const char *)v20);
  if (v21 < v19) {
    goto LABEL_16;
  }
LABEL_8:
  sub_1003C0F34(v19, v21);
  swift_endAccess(v29);
  uint64_t v20 = (uint64_t)*v18;
  if (!((unint64_t)*v18 >> 62))
  {
    if (*(void *)((v20 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      return result;
    }
    goto LABEL_10;
  }

uint64_t sub_1003D047C()
{
  sub_100224FF8(*(void *)(v0 + 24), *(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 40));

  swift_bridgeObjectRelease(*(const char **)(v0 + 64));
  swift_unknownObjectRelease(*(void *)(v0 + 72));
  return v0;
}

uint64_t sub_1003D04C8()
{
  return swift_deallocClassInstance(v0, 80LL, 7LL);
}

uint64_t type metadata accessor for SDTempPairingServer()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary19SDTempPairingServer);
}

uint64_t sub_1003D0508()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1003D052C(uint64_t a1)
{
  return sub_1003CF5A0(a1, v1);
}

uint64_t sub_1003D0534()
{
  return sub_1003CFE64(v0);
}

uint64_t sub_1003D053C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1003D054C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1003D0554()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1003D0580(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  id v7 = (void *)swift_task_alloc(dword_100652AD4);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *id v7 = v2;
  v7[1] = sub_1001943E8;
  return sub_1003CFFC0(a1, v4, v5, v6);
}

uint64_t sub_1003D05EC()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1003D0620()
{
  uint64_t v2 = swift_task_alloc(dword_100652AEC);
  __int128 v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100195708;
  *(_OWORD *)(v2 + swift_weakDestroy(v0 + 16) = v3;
  return swift_task_switch(sub_1003CF6AC, 0LL, 0LL);
}

uint64_t sub_1003D0680()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1003D06AC(void *a1)
{
  return sub_1003D010C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1003D06B8()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = _swiftEmptyArrayStorage;
  unint64_t v1 = sub_1003D38D4();
  uint64_t v2 = sub_100183098((uint64_t *)&unk_1006460D0);
  uint64_t v3 = sub_1001CD538( (unint64_t *)&qword_100646520,  (uint64_t *)&unk_1006460D0,  (uint64_t)&protocol conformance descriptor for [A]);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

uint64_t sub_1003D0754()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100186DFC(v0, qword_100652B10);
  uint64_t v1 = sub_100186DE4(v0, (uint64_t)qword_100652B10);
  if (qword_100643FE0 != -1) {
    swift_once(&qword_100643FE0, sub_10023A41C);
  }
  uint64_t v2 = sub_100186DE4(v0, (uint64_t)qword_100669610);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

id sub_1003D07E4(uint64_t a1)
{
  return sub_1003D081C( a1,  (uint64_t (*)(void))sub_1003D39FC,  "Setting advertise rate on %s to %s",  (SEL *)&selRef_setAdvertiseRate_);
}

id sub_1003D0800(uint64_t a1)
{
  return sub_1003D081C(a1, (uint64_t (*)(void))sub_1003D3AE4, "Setting use case on %s to %s", (SEL *)&selRef_setUseCase_);
}

id sub_1003D081C(uint64_t a1, uint64_t (*a2)(void), const char *a3, SEL *a4)
{
  uint64_t v8 = a2();
  uint64_t v9 = String.init(cString:)(v8);
  uint64_t v11 = v10;
  if (qword_1006442D8 != -1) {
    swift_once(&qword_1006442D8, sub_1003D0754);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v12, (uint64_t)qword_100652B10);
  id v13 = v4;
  swift_bridgeObjectRetain(v11);
  unint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc(22LL, -1LL);
    uint64_t v18 = swift_slowAlloc(64LL, -1LL);
    uint64_t v30 = v18;
    *(_DWORD *)uint64_t v17 = 136315394;
    unint64_t v19 = *(void *)&v13[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration + 8];
    uint64_t v20 = *(void *)&v13[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration + 16];
    uint64_t v28 = *(void *)&v13[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration];
    v29[0] = v19;
    v29[1] = v20;
    sub_1001A4C04(v28, v19);
    uint64_t v21 = String.init<A>(describing:)(&v28, &type metadata for SDBLEAdvertiser.Configuration);
    unsigned int v27 = a1;
    uint64_t v22 = a4;
    uint64_t v24 = (const char *)v23;
    uint64_t v28 = sub_10018CDB4(v21, v23, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v17 + 4, v17 + 12);

    *(void *)&double v25 = swift_bridgeObjectRelease(v24).n128_u64[0];
    *(_WORD *)(v17 + 12) = 2080;
    swift_bridgeObjectRetain(v11, v25);
    uint64_t v28 = sub_10018CDB4(v9, (unint64_t)v11, &v30);
    a4 = v22;
    a1 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease_n(v11, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, a3, (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v18, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v11, 2LL);
  }

  return objc_msgSend(*(id *)&v13[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_advertiser], *a4, a1);
}

id sub_1003D0A80(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v5);
  *(void *)&v5[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_aggressiveAdvertiserTimer] = 0LL;
  *(void *)&v5[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_queue] = a1;
  uint64_t v11 = (uint64_t *)&v5[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration];
  *uint64_t v11 = a2;
  v11[1] = a3;
  v11[2] = a4;
  id v12 = objc_allocWithZone(&OBJC_CLASS___CBAdvertiser);
  id v13 = v5;
  id v14 = a1;
  sub_1001A4C04(a2, a3);
  id v15 = [v12 init];
  *(void *)&v13[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_advertiser] = v15;

  v23.receiver = v13;
  v23.super_class = ObjectType;
  id v16 = objc_msgSendSuper2(&v23, "init");
  uint64_t v17 = (void *)objc_opt_self(&OBJC_CLASS___NSNotificationCenter);
  id v18 = v16;
  id v19 = [v17 defaultCenter];
  uint64_t v20 = off_100643AF8;
  id v21 = v18;
  [v19 addObserver:v21 selector:"handleRapportIdentitiesChanged" name:v20 object:0];
  sub_100189B0C(a2, a3);

  return v21;
}

void sub_1003D0BFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = *(void **)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_queue];
  void *v10 = v11;
  uint64_t v12 = enum case for DispatchPredicate.onQueue(_:);
  id v13 = *(char **)(v8 + 104);
  ((void (*)(void *, void, uint64_t))v13)(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v14 = v11;
  char v15 = _dispatchPreconditionTest(_:)(v10);
  id v16 = *(void (**)(void *, uint64_t))(v8 + 8);
  v16(v10, v7);
  if ((v15 & 1) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v46 = a1;
  uint64_t v47 = a2;
  uint64_t v17 = OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_advertiser;
  [*(id *)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_advertiser] setDispatchQueue:v14];
  uint64_t v45 = v17;
  id v18 = *(void **)&v4[v17];
  uint64_t v19 = swift_allocObject(&unk_1005DF0B0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v19 + 16, v4);
  uint64_t v53 = sub_1003D391C;
  uint64_t v54 = (void *)v19;
  aBlock = _NSConcreteStackBlock;
  uint64_t v3 = 1107296256LL;
  uint64_t v50 = 1107296256LL;
  uint64_t v51 = sub_1001B9FE4;
  uint64_t v52 = &unk_1005DF0F0;
  uint64_t v20 = _Block_copy(&aBlock);
  id v21 = v54;
  id v22 = v18;
  swift_release(v21);
  [v22 setAdvertisingAddressChangedHandler:v20];
  _Block_release(v20);

  void *v10 = v14;
  ((void (*)(void *, uint64_t, uint64_t))v13)(v10, v12, v7);
  id v23 = v14;
  char v24 = _dispatchPreconditionTest(_:)(v10);
  v16(v10, v7);
  if ((v24 & 1) == 0)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    swift_once(&qword_1006442D8, sub_1003D0754);
    goto LABEL_6;
  }

  id v13 = &v4[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration];
  unint64_t v25 = *(void *)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration + 8];
  if (v25 >> 60 != 15)
  {
    uint64_t v26 = *((void *)v13 + 2);
    uint64_t v27 = *(void *)v13;
    sub_10019BA8C(*(void *)v13, *(void *)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration + 8]);
    LOBYTE(aBlock) = BYTE1(v26) & 1;
    sub_1003D2BDC(v27, v25, v26 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)(BYTE1(v26) & 1) << 8));
    sub_100189B0C(v27, v25);
  }

  sub_1003D166C();
  if (qword_1006442D8 != -1) {
    goto LABEL_18;
  }
LABEL_6:
  uint64_t v28 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v28, (uint64_t)qword_100652B10);
  uint64_t v29 = v4;
  uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
  os_log_type_t v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v33 = (void **)swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v32 = 136315138;
    unint64_t v34 = *((void *)v13 + 1) >> 60;
    aBlock = v33;
    if (v34 <= 0xE) {
      uint64_t v35 = 0x706F7244726941LL;
    }
    else {
      uint64_t v35 = 0x6E4979627261654ELL;
    }
    if (v34 <= 0xE) {
      uint64_t v36 = (const char *)0xE700000000000000LL;
    }
    else {
      uint64_t v36 = (const char *)0xEC00000032566F66LL;
    }
    uint64_t v48 = sub_10018CDB4(v35, (unint64_t)v36, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &aBlock, v32 + 4, v32 + 12);

    swift_bridgeObjectRelease(v36);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Starting to advertise for %s", v32, 0xCu);
    swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1LL, -1LL);
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v38 = v46;
  uint64_t v37 = v47;
  uint64_t v39 = *(void **)&v4[v45];
  uint64_t v40 = swift_allocObject(&unk_1005DF0B0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v40 + 16, v29);
  uint64_t v41 = (void *)swift_allocObject(&unk_1005DF128, 40LL, 7LL);
  v41[2] = v40;
  v41[3] = v38;
  v41[4] = v37;
  uint64_t v53 = sub_1003D3940;
  uint64_t v54 = v41;
  aBlock = _NSConcreteStackBlock;
  uint64_t v50 = v3;
  uint64_t v51 = sub_1002270C0;
  uint64_t v52 = &unk_1005DF140;
  uint64_t v42 = _Block_copy(&aBlock);
  uint64_t v43 = v54;
  id v44 = v39;
  sub_100224F60(v38, v37);
  swift_release(v43);
  [v44 activateWithCompletion:v42];
  _Block_release(v42);
}

void sub_1003D10A8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_queue);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    if (qword_1006442D8 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_1006442D8, sub_1003D0754);
LABEL_3:
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = sub_100186DE4(v8, (uint64_t)qword_100652B10);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "Bluetooth address changed, updating temp auth tag if necessary",  v12,  2u);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  sub_1003D166C();
}

void sub_1003D1218(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v42, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5, v6);
  if (Strong)
  {
    uint64_t v8 = (void *)Strong;
    if (a1)
    {
      swift_errorRetain(a1);
      if (qword_1006442D8 != -1) {
        swift_once(&qword_1006442D8, sub_1003D0754);
      }
      uint64_t v9 = type metadata accessor for Logger(0LL);
      sub_100186DE4(v9, (uint64_t)qword_100652B10);
      id v10 = v8;
      swift_errorRetain(a1);
      os_log_type_t v11 = (char *)v10;
      uint64_t v12 = swift_errorRetain(a1);
      uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
      os_log_type_t v14 = static os_log_type_t.error.getter(v13);
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = swift_slowAlloc(22LL, -1LL);
        uint64_t v16 = swift_slowAlloc(64LL, -1LL);
        uint64_t v41 = v16;
        *(_DWORD *)uint64_t v15 = 136315394;
        unint64_t v17 = *(void *)&v11[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration + 8];
        uint64_t v18 = *(void *)&v11[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration + 16];
        uint64_t v38 = *(void *)&v11[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration];
        unint64_t v39 = v17;
        uint64_t v40 = v18;
        sub_1001A4C04(v38, v17);
        uint64_t v19 = String.init<A>(describing:)(&v38, &type metadata for SDBLEAdvertiser.Configuration);
        id v21 = (const char *)v20;
        uint64_t v38 = sub_10018CDB4(v19, v20, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v15 + 4, v15 + 12);

        swift_bridgeObjectRelease(v21);
        *(_WORD *)(v15 + 12) = 2080;
        uint64_t v38 = a1;
        swift_errorRetain(a1);
        uint64_t v22 = sub_100183098(&qword_100645710);
        uint64_t v23 = String.init<A>(describing:)(&v38, v22);
        unint64_t v25 = (const char *)v24;
        uint64_t v38 = sub_10018CDB4(v23, v24, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v15 + 14, v15 + 22);
        swift_bridgeObjectRelease(v25);
        swift_errorRelease(a1);
        swift_errorRelease(a1);
        _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "Failed to start advertising for %s: %s",  (uint8_t *)v15,  0x16u);
        swift_arrayDestroy(v16, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v16, -1LL, -1LL);
        swift_slowDealloc(v15, -1LL, -1LL);

        uint64_t v26 = swift_errorRelease(a1);
        if (!a3) {
          goto LABEL_17;
        }
      }

      else
      {
        swift_errorRelease(a1);

        swift_errorRelease(a1);
        swift_errorRelease(a1);

        if (!a3) {
          goto LABEL_17;
        }
      }
    }

    else
    {
      if (qword_1006442D8 != -1) {
        swift_once(&qword_1006442D8, sub_1003D0754);
      }
      uint64_t v27 = type metadata accessor for Logger(0LL);
      sub_100186DE4(v27, (uint64_t)qword_100652B10);
      uint64_t v28 = v8;
      uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
      os_log_type_t v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        os_log_type_t v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v32 = swift_slowAlloc(32LL, -1LL);
        *(_DWORD *)os_log_type_t v31 = 136315138;
        uint64_t v41 = v32;
        unint64_t v33 = *(void *)&v28[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration + 8];
        uint64_t v34 = *(void *)&v28[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration + 16];
        uint64_t v38 = *(void *)&v28[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration];
        unint64_t v39 = v33;
        uint64_t v40 = v34;
        sub_1001A4C04(v38, v33);
        uint64_t v35 = String.init<A>(describing:)(&v38, &type metadata for SDBLEAdvertiser.Configuration);
        uint64_t v37 = (const char *)v36;
        uint64_t v38 = sub_10018CDB4(v35, v36, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v31 + 4, v31 + 12);

        swift_bridgeObjectRelease(v37);
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Started advertising for %s", v31, 0xCu);
        swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v32, -1LL, -1LL);
        swift_slowDealloc(v31, -1LL, -1LL);
      }

      else
      {
      }

      sub_1003D166C();
      if (!a3) {
        goto LABEL_17;
      }
    }

    a3(v26);
LABEL_17:
  }

void sub_1003D166C()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = *(void **)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_queue];
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  uint64_t v7 = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_20:
    swift_once(&qword_1006442D8, sub_1003D0754);
    goto LABEL_5;
  }

  id v8 = [(id)objc_opt_self(SDNearbyAgent) sharedNearbyAgent];
  unsigned int v9 = [v8 hasAdHocPairings];

  if (!v9) {
    return;
  }
  id v10 = sub_1003D2F14();
  if (v11 >> 60 == 15) {
    return;
  }
  uint64_t v7 = (uint64_t)v10;
  uint64_t v1 = v11;
  if (qword_1006442D8 != -1) {
    goto LABEL_20;
  }
LABEL_5:
  uint64_t v12 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v12, (uint64_t)qword_100652B10);
  uint64_t v13 = v0;
  sub_1001A4C04(v7, v1);
  os_log_type_t v14 = v13;
  uint64_t v15 = sub_1001A4C04(v7, v1);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  uint64_t v18 = &unk_100652000;
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v19 = swift_slowAlloc(22LL, -1LL);
    uint64_t v20 = swift_slowAlloc(64LL, -1LL);
    uint64_t v41 = v20;
    *(_DWORD *)uint64_t v19 = 136315394;
    unint64_t v21 = *(void *)&v14[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration + 8] >> 60;
    uint64_t v43 = v20;
    if (v21 <= 0xE) {
      uint64_t v22 = 0x706F7244726941LL;
    }
    else {
      uint64_t v22 = 0x6E4979627261654ELL;
    }
    if (v21 <= 0xE) {
      uint64_t v23 = (const char *)0xE700000000000000LL;
    }
    else {
      uint64_t v23 = (const char *)0xEC00000032566F66LL;
    }
    uint64_t v42 = sub_10018CDB4(v22, (unint64_t)v23, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v19 + 4, v19 + 12);

    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v19 + 12) = 2080;
    sub_1002DDC60(v7, v1);
    unint64_t v25 = v24;
    uint64_t v42 = (uint64_t)v24;
    uint64_t v26 = sub_100183098((uint64_t *)&unk_10064D7D0);
    uint64_t v27 = sub_1001CD538( (unint64_t *)&qword_100649800,  (uint64_t *)&unk_10064D7D0,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v28 = BidirectionalCollection<>.joined(separator:)(0LL, 0xE000000000000000LL, v26, v27);
    os_log_type_t v30 = v29;
    swift_bridgeObjectRelease(v25);
    uint64_t v31 = v28;
    uint64_t v18 = (void *)&unk_100652000;
    uint64_t v42 = sub_10018CDB4(v31, (unint64_t)v30, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease(v30);
    sub_100189B0C(v7, v1);
    sub_100189B0C(v7, v1);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Setting temp auth tag on %s to %s", (uint8_t *)v19, 0x16u);
    uint64_t v32 = v41;
    swift_arrayDestroy(v41, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  else
  {

    sub_100189B0C(v7, v1);
    sub_100189B0C(v7, v1);
  }

  unint64_t v33 = *(void *)&v14[v18[358] + 8];
  uint64_t v34 = OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_advertiser;
  id v35 = *(id *)&v14[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_advertiser];
  unint64_t v36 = v35;
  if (v33 >> 60 == 15)
  {
    objc_msgSend(v35, "setNearbyInfoV2Flags:", objc_msgSend(v35, "nearbyInfoV2Flags") | 0x10);

    id v37 = *(id *)&v14[v34];
    v38.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v37 setNearbyInfoV2TempAuthTagData:v38.super.isa];
    sub_100189B0C(v7, v1);
  }

  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v36 setAirdropTempAuthTagData:isa];

    v38.super.Class isa = (Class)*(id *)&v14[v34];
    -[objc_class setAirdropFlags:]( v38.super.isa,  "setAirdropFlags:",  -[objc_class airdropFlags](v38.super.isa, "airdropFlags") | 0x40);
    sub_100189B0C(v7, v1);
  }
}

uint64_t sub_1003D1B28(void (*a1)(uint64_t), uint64_t a2, double a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v44 = *(void *)(v7 - 8);
  uint64_t v45 = v7;
  __chkstk_darwin(v7);
  uint64_t v43 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v41 = *(void *)(v9 - 8);
  uint64_t v42 = v9;
  __chkstk_darwin(v9);
  uint64_t v40 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = type metadata accessor for DispatchTime(0LL);
  uint64_t v11 = *(void *)(v39 - 8);
  uint64_t v12 = __chkstk_darwin(v39);
  os_log_type_t v14 = (char *)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v38 - v15;
  uint64_t v17 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (void *)((char *)v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unint64_t v21 = *(void **)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_queue);
  *uint64_t v20 = v21;
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  v38[1] = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)(v20);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v18 + 8))(v20, v17);
  if ((v21 & 1) != 0)
  {
    uint64_t v23 = swift_allocObject(&unk_1005DF0B0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v23 + 16, v3);
    unint64_t v24 = (void *)swift_allocObject(&unk_1005DF1A0, 40LL, 7LL);
    _OWORD v24[2] = v23;
    void v24[3] = a1;
    v24[4] = a2;
    uint64_t v25 = sub_100224F60((uint64_t)a1, a2);
    if (a3 <= 0.0)
    {
      uint64_t v37 = swift_retain(v23);
      sub_1003D1EC8(v37, a1);
      swift_release(v24);
      uint64_t v36 = v23;
    }

    else
    {
      static DispatchTime.now()(v25);
      + infix(_:_:)(v14, a3);
      v38[0] = *(void *)(v11 + 8);
      uint64_t v26 = v39;
      ((void (*)(char *, uint64_t))v38[0])(v14, v39);
      uint64_t v27 = swift_allocObject(&unk_1005DF1C8, 32LL, 7LL);
      *(void *)(v27 + swift_weakDestroy(v0 + 16) = sub_1003D39AC;
      *(void *)(v27 + 24) = v24;
      aBlock[4] = sub_1003D39DC;
      uint64_t v48 = v27;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1001B9FE4;
      aBlock[3] = &unk_1005DF1E0;
      uint64_t v28 = _Block_copy(aBlock);
      uint64_t v29 = swift_retain(v24);
      os_log_type_t v30 = v40;
      static DispatchQoS.unspecified.getter(v29);
      uint64_t v46 = _swiftEmptyArrayStorage;
      unint64_t v31 = sub_1003D38D4();
      uint64_t v32 = sub_100183098((uint64_t *)&unk_1006460D0);
      uint64_t v33 = sub_1001CD538( (unint64_t *)&qword_100646520,  (uint64_t *)&unk_1006460D0,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v34 = v43;
      uint64_t v35 = v45;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v32, v33, v45, v31);
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v16, v30, v34, v28);
      _Block_release(v28);
      swift_release(v24);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v34, v35);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v30, v42);
      ((void (*)(char *, uint64_t))v38[0])(v16, v26);
      uint64_t v36 = v48;
    }

    return swift_release(v36);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_1003D1EC8(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v25, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3, v4);
  if (Strong)
  {
    id v6 = (void *)Strong;
    if (qword_1006442D8 != -1) {
      swift_once(&qword_1006442D8, sub_1003D0754);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    sub_100186DE4(v7, (uint64_t)qword_100652B10);
    uint64_t v8 = v6;
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v12 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v11 = 136315138;
      unint64_t v13 = *(void *)&v8[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration + 8] >> 60;
      uint64_t v24 = v12;
      if (v13 <= 0xE) {
        uint64_t v14 = 0x706F7244726941LL;
      }
      else {
        uint64_t v14 = 0x6E4979627261654ELL;
      }
      if (v13 <= 0xE) {
        unint64_t v15 = 0xE700000000000000LL;
      }
      else {
        unint64_t v15 = 0xEC00000032566F66LL;
      }
      uint64_t v23 = sub_10018CDB4(v14, v15, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v11 + 4, v11 + 12);

      swift_bridgeObjectRelease(v15);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Invalidating %s advertiser", v11, 0xCu);
      swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v16 = OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_advertiser;
    [*(id *)&v8[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_advertiser] invalidate];
    id v17 = [objc_allocWithZone(CBAdvertiser) init];
    uint64_t v18 = *(void **)&v8[v16];
    *(void *)&v8[v16] = v17;

    uint64_t v19 = OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_aggressiveAdvertiserTimer;
    uint64_t v20 = *(void *)&v8[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_aggressiveAdvertiserTimer];
    if (v20)
    {
      swift_getObjectType(*(void *)&v8[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_aggressiveAdvertiserTimer]);
      swift_unknownObjectRetain(v20);
      OS_dispatch_source.cancel()();
      swift_unknownObjectRelease(v20);
      uint64_t v21 = *(void *)&v8[v19];
    }

    else
    {
      uint64_t v21 = 0LL;
    }

    *(void *)&v8[v19] = 0LL;
    uint64_t v22 = swift_unknownObjectRelease(v21);
    if (a2) {
      a2(v22);
    }
  }

uint64_t sub_1003D2170(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v53 = a1;
  uint64_t v58 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v54 = *(void *)(v58 - 8);
  uint64_t v3 = __chkstk_darwin(v58);
  id v57 = (uint64_t *)((char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v3);
  id v6 = (uint64_t *)((char *)&v44 - v5);
  uint64_t v56 = type metadata accessor for DispatchTime(0LL);
  uint64_t v52 = *(void *)(v56 - 8);
  uint64_t v7 = __chkstk_darwin(v56);
  uint64_t v51 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v55 = (char *)&v44 - v9;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v49 = *(void *)(v10 - 8);
  uint64_t v50 = v10;
  __chkstk_darwin(v10);
  uint64_t v48 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v46 = *(void *)(v12 - 8);
  uint64_t v47 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = type metadata accessor for OS_dispatch_source.TimerFlags(0LL);
  uint64_t v15 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  id v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (uint64_t *)((char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v22 = *(void **)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_queue);
  *uint64_t v21 = v22;
  (*(void (**)(void *, void, uint64_t))(v19 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v18);
  id v23 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)(v21);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v19 + 8))(v21, v18);
  if ((v22 & 1) != 0)
  {
    uint64_t v25 = OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_aggressiveAdvertiserTimer;
    uint64_t v26 = *(void *)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_aggressiveAdvertiserTimer);
    if (v26)
    {
      swift_getObjectType(*(void *)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_aggressiveAdvertiserTimer));
      swift_unknownObjectRetain(v26);
      OS_dispatch_source.cancel()();
      swift_unknownObjectRelease(v26);
    }

    sub_1002BF858();
    static OS_dispatch_source.TimerFlags.strict.getter();
    uint64_t v27 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v17, v23);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v45);
    uint64_t v28 = *(void *)(v2 + v25);
    *(void *)(v2 + v25) = v27;
    swift_unknownObjectRetain(v27);
    swift_unknownObjectRelease(v28);
    uint64_t ObjectType = swift_getObjectType(v27);
    uint64_t v30 = swift_allocObject(&unk_1005DF0B0, 24LL, 7LL);
    swift_unknownObjectWeakInit(v30 + 16, v2);
    aBlock[4] = sub_1003D394C;
    uint64_t v60 = v30;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001B9FE4;
    aBlock[3] = &unk_1005DF168;
    unint64_t v31 = _Block_copy(aBlock);
    uint64_t v32 = swift_retain(v30);
    static DispatchQoS.unspecified.getter(v32);
    uint64_t v33 = v48;
    sub_1003D06B8();
    OS_dispatch_source.setEventHandler(qos:flags:handler:)(v14, v33, v31, ObjectType);
    _Block_release(v31);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v33, v50);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v14, v47);
    uint64_t v34 = v60;
    swift_release(v30);
    uint64_t v35 = swift_release(v34);
    uint64_t v36 = v51;
    static DispatchTime.now()(v35);
    uint64_t v37 = v54;
    *id v6 = v53;
    uint64_t v38 = v58;
    (*(void (**)(void *, void, uint64_t))(v37 + 104))( v6,  enum case for DispatchTimeInterval.seconds(_:),  v58);
    uint64_t v39 = v55;
    + infix(_:_:)(v36, v6);
    uint64_t v40 = *(void (**)(void *, uint64_t))(v37 + 8);
    v40(v6, v38);
    uint64_t v41 = *(void (**)(char *, uint64_t))(v52 + 8);
    uint64_t v42 = v56;
    v41(v36, v56);
    sub_1001DB690((uint64_t)v6);
    uint64_t v43 = v57;
    sub_1001DB6D4(v57);
    OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v39, v6, v43, ObjectType);
    v40(v43, v38);
    v40(v6, v38);
    v41(v39, v42);
    OS_dispatch_source.activate()();
    return swift_unknownObjectRelease(v27);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_1003D25E8(uint64_t a1, void (*a2)(void))
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3, v4);
  if (Strong)
  {
    id v6 = (void *)Strong;
    a2();
  }

uint64_t sub_1003D263C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v6 = *(void **)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_queue);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    uint64_t v9 = OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_aggressiveAdvertiserTimer;
    if (*(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_aggressiveAdvertiserTimer))
    {
      uint64_t v10 = swift_allocObject(&unk_1005DF0B0, 24LL, 7LL);
      swift_unknownObjectWeakInit(v10 + 16, v1);
      swift_retain(v10);
      sub_1003D1B28((void (*)(uint64_t))sub_1003D396C, v10, 0.0);
      swift_release_n(v10, 2LL);
      uint64_t v11 = *(void *)(v1 + v9);
      if (v11)
      {
        swift_getObjectType(*(void *)(v1 + v9));
        swift_unknownObjectRetain(v11);
        OS_dispatch_source.cancel()();
        swift_unknownObjectRelease(v11);
        uint64_t v12 = *(void *)(v1 + v9);
      }

      else
      {
        uint64_t v12 = 0LL;
      }

      *(void *)(v1 + v9) = 0LL;
      return swift_unknownObjectRelease(v12);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_1003D2798(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v28 = a1;
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = *(void **)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_queue);
  void *v9 = v10;
  uint64_t v11 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v27 = *(void (**)(void *, uint64_t, uint64_t))(v7 + 104);
  v27(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = v10;
  char v13 = _dispatchPreconditionTest(_:)(v9);
  uint64_t v14 = *(void (**)(void *, uint64_t))(v7 + 8);
  v14(v9, v6);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v26 = v3;
  uint64_t v15 = a3;
  uint64_t v16 = (uint64_t *)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration);
  unint64_t v17 = a2;
  uint64_t v18 = *(void *)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration);
  unint64_t v19 = *(void *)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration + 8);
  uint64_t v20 = v28;
  *uint64_t v16 = v28;
  v16[1] = v17;
  v16[2] = v15;
  sub_1001A4C04(v20, v17);
  sub_100189B0C(v18, v19);
  void *v9 = v12;
  v27(v9, v11, v6);
  id v21 = v12;
  char v22 = _dispatchPreconditionTest(_:)(v9);
  v14(v9, v6);
  if ((v22 & 1) == 0)
  {
LABEL_7:
    __break(1u);
    return;
  }

  unint64_t v23 = v16[1];
  if (v23 >> 60 != 15)
  {
    uint64_t v24 = v16[2];
    uint64_t v25 = *v16;
    sub_10019BA8C(*v16, v16[1]);
    char v29 = BYTE1(v24) & 1;
    sub_1003D2BDC(v25, v23, v24 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)(BYTE1(v24) & 1) << 8));
    sub_100189B0C(v25, v23);
  }

  sub_1003D166C();
}

void sub_1003D2954(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v19, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    uint64_t v5 = (uint64_t *)(Strong + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration);
    unint64_t v6 = *(void *)(Strong + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration + 8);
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = *v5;
      sub_10019BA8C(*v5, v6);
      if (qword_1006442D8 != -1) {
        swift_once(&qword_1006442D8, sub_1003D0754);
      }
      uint64_t v8 = type metadata accessor for Logger(0LL);
      sub_100186DE4(v8, (uint64_t)qword_100652B10);
      id v9 = v4;
      uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        id v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v16 = swift_slowAlloc(32LL, -1LL);
        *(_DWORD *)id v12 = 136315138;
        unint64_t v13 = (unint64_t)v5[1] >> 60;
        uint64_t v18 = v16;
        if (v13 <= 0xE) {
          uint64_t v14 = 0x706F7244726941LL;
        }
        else {
          uint64_t v14 = 0x6E4979627261654ELL;
        }
        if (v13 <= 0xE) {
          uint64_t v15 = (const char *)0xE700000000000000LL;
        }
        else {
          uint64_t v15 = (const char *)0xEC00000032566F66LL;
        }
        uint64_t v17 = sub_10018CDB4(v14, (unint64_t)v15, &v18);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v12 + 4, v12 + 12);

        swift_bridgeObjectRelease(v15);
        _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "Changing advertisement rate to default on %s advertiser",  v12,  0xCu);
        swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v16, -1LL, -1LL);
        swift_slowDealloc(v12, -1LL, -1LL);
      }

      else
      {
      }

      sub_10019BA8C(v7, v6);
      sub_1003D2798(v7, v6, 256LL);
      sub_1003D0BFC(0LL, 0LL);
      sub_100189B0C(v7, v6);
      sub_100189B0C(v7, v6);
    }
  }

uint64_t sub_1003D2BDC(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  os_log_type_t v11 = *(void **)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_queue);
  void *v10 = v11;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) != 0)
  {
    uint64_t v14 = OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_advertiser;
    uint64_t v15 = *(void **)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_advertiser);
    sub_10019BA8C(a1, a2);
    [v15 setAdvertiseRate:HIDWORD(a3)];
    [*(id *)(v3 + v14) setAirdropVersion:2];
    id v16 = *(id *)(v3 + v14);
    LOWORD(v15) = Data.subscript.getter(1LL, a1, a2);
    objc_msgSend( v16,  "setAirdropHash1:",  (unsigned __int16)(Data.subscript.getter(2, a1, a2) | (unsigned __int16)((_WORD)v15 << 8)));

    id v17 = *(id *)(v3 + v14);
    LOWORD(v15) = Data.subscript.getter(3LL, a1, a2);
    objc_msgSend( v17,  "setAirdropHash2:",  (unsigned __int16)(Data.subscript.getter(4, a1, a2) | (unsigned __int16)((_WORD)v15 << 8)));

    id v18 = *(id *)(v3 + v14);
    LOWORD(v15) = Data.subscript.getter(5LL, a1, a2);
    objc_msgSend( v18,  "setAirdropHash3:",  (unsigned __int16)(Data.subscript.getter(6, a1, a2) | (unsigned __int16)((_WORD)v15 << 8)));

    id v19 = *(id *)(v3 + v14);
    LOWORD(v15) = Data.subscript.getter(7LL, a1, a2);
    objc_msgSend( v19,  "setAirdropHash4:",  (unsigned __int16)(Data.subscript.getter(8, a1, a2) | (unsigned __int16)((_WORD)v15 << 8)));

    if ((a3 & 0x100) == 0) {
      [*(id *)(v3 + v14) setAirdropModel:a3];
    }
    [*(id *)(v3 + v14) setAirdropConfigData:BYTE3(a3)];
    [*(id *)(v3 + v14) setAirdropFlags:BYTE2(a3)];
    return sub_100189B20(a1, a2);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t type metadata accessor for SDBLEAdvertiser()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary15SDBLEAdvertiser);
}

void *sub_1003D2F14()
{
  id v1 = [(id)objc_opt_self(SDNearbyAgent) sharedNearbyAgent];
  id v2 = [v1 temporarySelfIdentity];

  if (!v2) {
    return 0LL;
  }
  id v3 =  [*(id *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_advertiser) advertisingAddressDataNonConnectable];
  uint64_t v4 = v3;
  if (!v3)
  {

    return v4;
  }

  uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
  unint64_t v7 = v6;

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v27 = 0LL;
  id v9 = [v2 authTagForData:isa type:2 error:&v27];

  id v10 = v27;
  if (!v9)
  {
    os_log_type_t v11 = v10;
    uint64_t v12 = _convertNSErrorToError(_:)(v10);

    swift_willThrow(v13);
    if (qword_1006442D8 != -1) {
      swift_once(&qword_1006442D8, sub_1003D0754);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    sub_100186DE4(v14, (uint64_t)qword_100652B10);
    swift_errorRetain(v12);
    uint64_t v15 = swift_errorRetain(v12);
    id v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v19 = (void *)swift_slowAlloc(32LL, -1LL);
      id v27 = v19;
      *(_DWORD *)id v18 = 136315138;
      uint64_t v25 = v12;
      swift_errorRetain(v12);
      uint64_t v20 = sub_100183098(&qword_100645710);
      uint64_t v21 = String.init<A>(describing:)(&v25, v20);
      unint64_t v23 = (const char *)v22;
      uint64_t v25 = sub_10018CDB4(v21, v22, (uint64_t *)&v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease(v23);
      swift_errorRelease(v12);
      swift_errorRelease(v12);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to create temp auth tag: %s", v18, 0xCu);
      swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);

      sub_100189B20(v5, v7);
      swift_errorRelease(v12);
    }

    else
    {

      sub_100189B20(v5, v7);
      swift_errorRelease(v12);
      swift_errorRelease(v12);
      swift_errorRelease(v12);
    }

    return 0LL;
  }

  uint64_t v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);

  sub_100189B20(v5, v7);
  return v4;
}

uint64_t sub_1003D325C()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v17 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v3 = (char *)v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v16[1] = *(void *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_queue);
  uint64_t v8 = swift_allocObject(&unk_1005DF0B0, 24LL, 7LL);
  swift_unknownObjectWeakInit(v8 + 16, v0);
  aBlock[4] = sub_1003D38B4;
  uint64_t v20 = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001B9FE4;
  aBlock[3] = &unk_1005DF0C8;
  id v9 = _Block_copy(aBlock);
  uint64_t v10 = swift_retain();
  static DispatchQoS.unspecified.getter(v10);
  id v18 = _swiftEmptyArrayStorage;
  unint64_t v11 = sub_1003D38D4();
  uint64_t v12 = sub_100183098((uint64_t *)&unk_1006460D0);
  uint64_t v13 = sub_1001CD538( (unint64_t *)&qword_100646520,  (uint64_t *)&unk_1006460D0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v7, v3, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v14 = v20;
  swift_release(v8);
  return swift_release(v14);
}

void sub_1003D3450(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  if (qword_1006442D8 != -1) {
    swift_once(&qword_1006442D8, sub_1003D0754);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_100186DE4(v2, (uint64_t)qword_100652B10);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Rapport identities changed, updating temp auth tag if necessary",  v6,  2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  swift_beginAccess(v1, v10, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1, v7);
  if (Strong)
  {
    id v9 = (void *)Strong;
    sub_1003D166C();
  }

uint64_t *destroy for SDBLEAdvertiser.Configuration(uint64_t *result)
{
  unint64_t v1 = result[1];
  if ((v1 & 0x3000000000000000LL) == 0) {
    return (uint64_t *)sub_100189B20(*result, v1);
  }
  return result;
}

uint64_t _s16DaemoniOSLibrary15SDBLEAdvertiserC13ConfigurationOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a2[1];
  if ((v4 & 0x3000000000000000LL) != 0)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + swift_weakDestroy(v0 + 16) = a2[2];
  }

  else
  {
    uint64_t v5 = *a2;
    sub_10019BA8C(*a2, a2[1]);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4;
    int v6 = *((_DWORD *)a2 + 5);
    *(_DWORD *)(a1 + swift_weakDestroy(v0 + 16) = *((_DWORD *)a2 + 4);
    *(_DWORD *)(a1 + 20) = v6;
  }

  return a1;
}

uint64_t assignWithCopy for SDBLEAdvertiser.Configuration(uint64_t a1, __int128 *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *((void *)a2 + 1);
  uint64_t v6 = v5 & 0x3000000000000000LL;
  if ((v4 & 0x3000000000000000LL) != 0)
  {
    if (!v6)
    {
      uint64_t v7 = *(void *)a2;
      sub_10019BA8C(*(void *)a2, *((void *)a2 + 1));
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v5;
LABEL_8:
      *(_WORD *)(a1 + swift_weakDestroy(v0 + 16) = *((_WORD *)a2 + 8);
      *(_BYTE *)(a1 + 18) = *((_BYTE *)a2 + 18);
      *(_BYTE *)(a1 + 19) = *((_BYTE *)a2 + 19);
      *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
      return a1;
    }
  }

  else
  {
    if (!v6)
    {
      uint64_t v9 = *(void *)a2;
      sub_10019BA8C(*(void *)a2, *((void *)a2 + 1));
      uint64_t v10 = *(void *)a1;
      unint64_t v11 = *(void *)(a1 + 8);
      *(void *)a1 = v9;
      *(void *)(a1 + 8) = v5;
      sub_100189B20(v10, v11);
      goto LABEL_8;
    }

    sub_100189B20(*(void *)a1, v4);
  }

  __int128 v8 = *a2;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v8;
  return a1;
}

uint64_t assignWithTake for SDBLEAdvertiser.Configuration(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if ((v4 & 0x3000000000000000LL) == 0)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    if ((v5 & 0x3000000000000000LL) == 0)
    {
      uint64_t v7 = *(void *)a1;
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v5;
      sub_100189B20(v7, v4);
      int v8 = *(_DWORD *)(a2 + 20);
      *(_DWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 20) = v8;
      return a1;
    }

    sub_100189B20(*(void *)a1, v4);
  }

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for SDBLEAdvertiser.Configuration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xC && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 12);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  if (v3 + 1 >= 2) {
    return v3;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for SDBLEAdvertiser.Configuration( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(void *)uint64_t result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(_DWORD *)uint64_t result = a2 - 12;
    if (a3 >= 0xC) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0xC) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0LL;
      *(void *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }

  return result;
}

uint64_t sub_1003D37DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v1) & 0xC) != 0) {
    return 16 - ((4 * (_DWORD)v1) & 0xC | (v1 >> 2));
  }
  else {
    return 0LL;
  }
}

void *sub_1003D3804(void *result, unsigned int a2)
{
  if (a2 > 0xC)
  {
    result[1] = 0LL;
    result[2] = 0LL;
    *uint64_t result = a2 - 13;
  }

  else if (a2)
  {
    *uint64_t result = 0LL;
    result[1] = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
  }

  return result;
}

ValueMetadata *type metadata accessor for SDBLEAdvertiser.Configuration()
{
  return &type metadata for SDBLEAdvertiser.Configuration;
}

uint64_t sub_1003D3848()
{
  if (*(void *)(v0 + 8) >> 60 == 15LL) {
    return 0x6E4979627261654ELL;
  }
  else {
    return 0x706F7244726941LL;
  }
}

uint64_t sub_1003D3890()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1003D38B4()
{
}

uint64_t sub_1003D38BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1003D38CC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_1003D38D4()
{
  unint64_t result = qword_100646510;
  if (!qword_100646510)
  {
    uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_100646510);
  }

  return result;
}

void sub_1003D391C()
{
}

void sub_1003D3940(uint64_t a1)
{
}

void sub_1003D394C()
{
}

void sub_1003D396C()
{
}

uint64_t sub_1003D3978()
{
  if (v0[3]) {
    swift_release(v0[4]);
  }
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1003D39AC()
{
}

uint64_t sub_1003D39B8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1003D39DC()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

const char *sub_1003D39FC(int a1)
{
  if (a1 > 39)
  {
    if (a1 <= 44)
    {
      if (a1 == 40) {
        return "Medium";
      }
      if (a1 == 42) {
        return "MediumMid";
      }
    }

    else
    {
      switch(a1)
      {
        case '-':
          return "MediumHigh";
        case '2':
          return "High";
        case '<':
          return "Max";
      }
    }
  }

  else if (a1 <= 14)
  {
    if (!a1) {
      return "Default";
    }
    if (a1 == 10) {
      return "Periodic";
    }
  }

  else
  {
    switch(a1)
    {
      case 15:
        return "PeriodicHigh";
      case 20:
        return "Background";
      case 30:
        return "Low";
    }
  }

  return "?";
}

const char *sub_1003D3AE4(int a1)
{
  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 > 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            case 786432:
              return "ProxControlDeviceClose";
            default:
              return "?";
          }
        }

        else
        {
          switch(a1)
          {
            case 2147418112:
              unint64_t result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              unint64_t result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              unint64_t result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              unint64_t result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              unint64_t result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              unint64_t result = "InternalTestActiveScan";
              break;
            case 2147418118:
              unint64_t result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              unint64_t result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              unint64_t result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }

      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            unint64_t result = "ADPD";
            break;
          case 524289:
            unint64_t result = "ADPDBuffer";
            break;
          case 524290:
            unint64_t result = "MicroLocation";
            break;
          case 524291:
            unint64_t result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              unint64_t result = "PrecisionFindingFindee";
            }

            else
            {
              if (a1 != 589824) {
                return "?";
              }
              unint64_t result = "FindNearbyRemote";
            }

            break;
        }
      }

      else
      {
        switch(a1)
        {
          case 393216:
            unint64_t result = "CaptiveNetworkJoin";
            break;
          case 393217:
            unint64_t result = "UseCaseSIMTransfer";
            break;
          case 393218:
            unint64_t result = "MacSetup";
            break;
          case 393219:
            unint64_t result = "AppleIDSignIn";
            break;
          case 393220:
            unint64_t result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              unint64_t result = "RapportThirdParty";
            }

            else
            {
              if (a1 != 458752) {
                return "?";
              }
              unint64_t result = "PrecisionFindingFinder";
            }

            break;
        }
      }
    }

    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            unint64_t result = "DigitalIDTSA";
          }

          else
          {
            if (a1 != 0x40000) {
              return "?";
            }
            unint64_t result = "DigitalCarKeyThirdParty";
          }

          break;
      }
    }
  }

  else
  {
    unint64_t result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        unint64_t result = "HealthKit";
        break;
      case 2:
        unint64_t result = "HomeKit";
        break;
      case 3:
        unint64_t result = "FindMyObjectConnection";
        break;
      case 4:
        unint64_t result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        unint64_t result = "MIDI";
        break;
      case 6:
        unint64_t result = "Continuity";
        break;
      case 7:
        unint64_t result = "InstantHotSpot";
        break;
      case 8:
        unint64_t result = "NearBy";
        break;
      case 9:
        unint64_t result = "Sharing";
        break;
      case 10:
        unint64_t result = "HearingSupport";
        break;
      case 11:
        unint64_t result = "Magnet";
        break;
      case 12:
        unint64_t result = "HID";
        break;
      case 13:
        unint64_t result = "LEA";
        break;
      case 14:
        unint64_t result = "External";
        break;
      case 15:
        unint64_t result = "ExternalMedical";
        break;
      case 16:
        unint64_t result = "ExternalLock";
        break;
      case 17:
        unint64_t result = "ExternalWatch";
        break;
      case 18:
        unint64_t result = "SmartRouting";
        break;
      case 19:
        unint64_t result = "DigitalID";
        break;
      case 20:
        unint64_t result = "DigitalKey";
        break;
      case 21:
        unint64_t result = "DigitalCarKey";
        break;
      case 22:
        unint64_t result = "HeySiri";
        break;
      case 23:
        unint64_t result = "ThirdPartyApp";
        break;
      case 24:
        unint64_t result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            unint64_t result = "DevicePresenceDetection";
            break;
          case 257:
            unint64_t result = "AudioBox";
            break;
          case 258:
            unint64_t result = "SIMTransfer";
            break;
          case 259:
            unint64_t result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            unint64_t result = "MacMigrate";
            break;
          case 263:
            unint64_t result = "HIDUARTService";
            break;
          case 264:
            unint64_t result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            unint64_t result = "BaseBandFastConnect";
            break;
          case 266:
            unint64_t result = "SafetyAlerts";
            break;
          case 267:
            unint64_t result = "LECarPlay";
            break;
          case 268:
            unint64_t result = "TCCBluetooth";
            break;
          case 269:
            unint64_t result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }

        break;
    }
  }

  return result;
}

uint64_t destroy for SDBLEAdvertiser.Configuration.AirDrop(uint64_t a1)
{
  return sub_100189B20(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t _s16DaemoniOSLibrary15SDBLEAdvertiserC13ConfigurationO7AirDropVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_10019BA8C(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  int v6 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = v6;
  return a1;
}

uint64_t assignWithCopy for SDBLEAdvertiser.Configuration.AirDrop(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_10019BA8C(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_100189B20(v6, v7);
  *(_WORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_WORD *)(a2 + 16);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t assignWithTake for SDBLEAdvertiser.Configuration.AirDrop(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100189B20(v4, v5);
  int v6 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for SDBLEAdvertiser.Configuration.AirDrop(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SDBLEAdvertiser.Configuration.AirDrop( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(void *)unint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0LL;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SDBLEAdvertiser.Configuration.AirDrop()
{
  return &type metadata for SDBLEAdvertiser.Configuration.AirDrop;
}

uint64_t sub_1003D43E4()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100186DFC(v0, qword_100652B70);
  uint64_t v1 = sub_100186DE4(v0, (uint64_t)qword_100652B70);
  if (qword_100644020 != -1) {
    swift_once(&qword_100644020, sub_10023A520);
  }
  uint64_t v2 = sub_100186DE4(v0, (uint64_t)qword_1006696B8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_1003D4474(void *a1)
{
  uint64_t v3 = sub_100183098(&qword_100646560);
  __chkstk_darwin(v3);
  unint64_t v5 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for AuthenticationSecurityRequest(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v68 = v6;
  uint64_t v69 = v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v70 = v9;
  uint64_t v71 = (uint64_t)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  unint64_t v11 = (uint64_t *)((char *)&v62 - v10);
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v72 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  id v18 = (uint64_t *)((char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v19 = *(void **)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_queue];
  *id v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  id v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  (*(void (**)(void *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) != 0)
  {
    uint64_t v73 = v13;
    uint64_t v67 = v12;
    if (qword_1006442E0 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_1006442E0, sub_1003D43E4);
LABEL_3:
  uint64_t v21 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v21, (uint64_t)qword_100652B70);
  id v22 = a1;
  unint64_t v23 = v1;
  id v24 = v22;
  uint64_t v25 = v23;
  uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
  os_log_type_t v27 = static os_log_type_t.default.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  id v66 = v24;
  if (v28)
  {
    uint64_t v29 = swift_slowAlloc(22LL, -1LL);
    os_log_t v63 = v26;
    uint64_t v30 = v29;
    unint64_t v31 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v64 = swift_slowAlloc(32LL, -1LL);
    v77[0] = v64;
    *(_DWORD *)uint64_t v30 = 138412546;
    *(void *)&__int128 v75 = v24;
    NSString v65 = v5;
    uint64_t v32 = v11;
    id v33 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, (char *)&v75 + 8, v30 + 4, v30 + 12);
    *unint64_t v31 = v24;

    unint64_t v11 = v32;
    *(_WORD *)(v30 + 12) = 2080;
    uint64_t v35 = UUID.uuidString.getter(v34);
    unint64_t v37 = v36;
    *(void *)&__int128 v75 = sub_10018CDB4(v35, v36, v77);
    unint64_t v5 = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, (char *)&v75 + 8, v30 + 14, v30 + 22);

    swift_bridgeObjectRelease(v37);
    os_log_t v38 = v63;
    _os_log_impl( (void *)&_mh_execute_header,  v63,  v27,  "Received authentication pairing request: %@ for sessionID %s",  (uint8_t *)v30,  0x16u);
    uint64_t v39 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v31, 1LL, v39);
    swift_slowDealloc(v31, -1LL, -1LL);
    uint64_t v40 = v64;
    swift_arrayDestroy(v64, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1LL, -1LL);
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  else
  {
  }

  sub_10034E730();
  uint64_t v41 = (uint64_t)&v25[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice];
  swift_beginAccess(&v25[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice], v74, 0LL, 0LL);
  sub_1001915A4(v41, (uint64_t)&v75, &qword_100654080);
  if (v76)
  {
    uint64_t v42 = sub_1001CE0D0(&v75, (uint64_t)v77);
    unint64_t v43 = *(void *)&v25[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type];
    if (v43 < 0xF && ((0x4FE7u >> v43) & 1) != 0)
    {
      uint64_t v44 = (uint64_t *)((char *)&unk_1004D9CF0 + 8 * v43);
    }

    else
    {
      if (qword_100643F68 != -1) {
        uint64_t v42 = swift_once(&qword_100643F68, sub_100220C68);
      }
      uint64_t v44 = &qword_100669510;
    }

    uint64_t v46 = *v44;
    uint64_t v47 = v72;
    Date.init()(v42);
    uint64_t v48 = v67;
    uint64_t v49 = (uint64_t)v11;
    (*(void (**)(char *, char *, uint64_t))(v73 + 16))((char *)v11 + *(int *)(v68 + 20), v47, v67);
    *unint64_t v11 = v46;
    uint64_t v50 = type metadata accessor for TaskPriority(0LL);
    uint64_t v51 = (uint64_t)v5;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56LL))(v5, 1LL, 1LL, v50);
    uint64_t v52 = v71;
    sub_100224F70(v49, v71);
    sub_10019A6C4((uint64_t)v77, (uint64_t)&v75);
    uint64_t v53 = *(unsigned __int8 *)(v69 + 80);
    uint64_t v54 = (v53 + 40) & ~v53;
    unint64_t v55 = (v70 + v54 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v56 = (v55 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    id v57 = (void *)swift_allocObject(&unk_1005DF320, v56 + 40, v53 | 7);
    v57[2] = 0LL;
    v57[3] = 0LL;
    v57[4] = v25;
    sub_1002DACBC(v52, (uint64_t)v57 + v54);
    uint64_t v58 = v66;
    *(void *)((char *)v57 + v55) = v66;
    sub_1001CE0D0(&v75, (uint64_t)v57 + v56);
    id v59 = v58;
    uint64_t v60 = v25;
    uint64_t v61 = sub_1001B37E8(v51, (uint64_t)&unk_100652BD8, (uint64_t)v57);
    swift_release(v61);
    sub_100224FB4(v49);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v47, v48);
    return sub_10018709C(v77);
  }

  else
  {
    sub_100187100((uint64_t)&v75, &qword_100654080);
    return sub_1003DA488( 10,  0xD000000000000014LL,  0x800000010050DF20LL,  (uint64_t)&unk_1005DF398,  (uint64_t)sub_1003DB3AC,  (uint64_t)&unk_1005DF3B0);
  }

uint64_t sub_1003D4A84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[45] = a6;
  v7[46] = a7;
  v7[43] = a4;
  v7[44] = a5;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  v7[47] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[48] = v9;
  v7[49] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  v7[50] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v7[51] = v11;
  v7[52] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for ContinuousClock(0LL);
  v7[53] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v7[54] = v13;
  v7[55] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003D4B38, 0LL, 0LL);
}

uint64_t sub_1003D4B38()
{
  uint64_t v1 = *(void *)(v0 + 344) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate;
  swift_beginAccess(v1, v0 + 208, 0LL, 0LL);
  sub_1001915A4(v1, v0 + 64, &qword_100650630);
  if (*(void *)(v0 + 88))
  {
    uint64_t v2 = *(void *)(v0 + 352);
    sub_10019A6C4(v0 + 64, v0 + 104);
    sub_100187100(v0 + 64, &qword_100650630);
    uint64_t v3 = (void *)(*sub_10019A708((void *)(v0 + 104), *(void *)(v0 + 128))
                  + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationManager_securityManager);
    swift_beginAccess(v3, v0 + 184, 0LL, 0LL);
    uint64_t v4 = *sub_10019A708(v3, v3[3]);
    uint64_t v5 = swift_task_alloc(32LL);
    *(void *)(v0 + 448) = v5;
    *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
    *(void *)(v5 + 24) = v2;
    uint64_t v6 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(void *)(v0 + 456) = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_1003D5AA0;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)( v6,  0LL,  0LL,  0x6F6974616C6F6976LL,  0xEF293A726F66286ELL,  sub_100284668,  v5,  (char *)&type metadata for () + 8);
  }

  sub_100187100(v0 + 64, &qword_100650630);
  if (qword_1006442E0 != -1) {
    swift_once(&qword_1006442E0, sub_1003D43E4);
  }
  uint64_t v8 = *(void **)(v0 + 344);
  uint64_t v9 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 472) = sub_100186DE4(v9, (uint64_t)qword_100652B70);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = *(char **)(v0 + 344);
  uint64_t v121 = v9;
  uint64_t v123 = (id *)(v0 + 328);
  if (v12)
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v14 = 136315138;
    v127[0] = v15;
    unint64_t v16 = sub_10034F010(*(void *)&v13[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type]);
    id v18 = (const char *)v17;
    *(void *)(v0 + 320) = sub_10018CDB4(v16, v17, v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v18);

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Authentication Session type: %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {
  }

  id v19 = [objc_allocWithZone((Class)SDAuthenticationPairingResponse) init];
  *(void *)(v0 + 480) = v19;
  if (!v19)
  {
    unint64_t v25 = sub_100187014();
    uint64_t v26 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v25, 0LL, 0LL);
    *(_DWORD *)uint64_t v27 = 10;
    *(void *)(v27 + 8) = 0xD000000000000039LL;
    *(void *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = 0x800000010050DF40LL;
    swift_willThrow(v26);
    goto LABEL_12;
  }

  uint64_t v20 = *(void *)(v0 + 344);
  uint64_t v21 = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type;
  *(void *)(v0 + 488) = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type;
  uint64_t v22 = *(void *)(v20 + v21);
  uint64_t v23 = OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_aksPairingSession;
  *(void *)(v0 + 496) = OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_aksPairingSession;
  uint64_t v24 = *(void *)(v20 + v23);
  *(void *)(v0 + 504) = v24;
  if (v22 != 8)
  {
    uint64_t v42 = dword_100655ECC;
    swift_retain();
    unint64_t v43 = (void *)swift_task_alloc(v42);
    *(void *)(v0 + 512) = v43;
    *unint64_t v43 = v0;
    v43[1] = sub_1003D6EEC;
    return sub_100448120();
  }

  swift_retain();
  sub_10044A04C();
  uint64_t v58 = (void *)sub_100449978(0LL, 0xF000000000000000LL);
  uint64_t v59 = swift_release(v24);
  *(void *)(v0 + 544) = v58;
  uint64_t v60 = *(void **)(v0 + 480);
  uint64_t v61 = *(void *)(v0 + 488);
  uint64_t v62 = *(void *)(v0 + 344);
  UUID.uuidString.getter(v59);
  uint64_t v64 = v63;
  NSString v65 = String._bridgeToObjectiveC()();
  objc_msgSend(v60, "setSessionID:", v65, swift_bridgeObjectRelease(v64).n128_f64[0]);

  [v60 setVersion:1];
  uint64_t v66 = Data.init(referencing:)(v58);
  unint64_t v68 = v67;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100189B20(v66, v68);
  [v60 setToken:isa];

  if (HIDWORD(*(void *)(v62 + v61))) {
    return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
  }
  uint64_t v70 = *(void *)(v0 + 344);
  id v71 = objc_msgSend(*(id *)(v0 + 480), "setType:");
  uint64_t v72 = OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_requestArmingUI;
  if (*(_BYTE *)(v70 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_requestArmingUI) == 1)
  {
    uint64_t v73 = (os_log_s *)Logger.logObject.getter(v71);
    os_log_type_t v74 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v73, v74))
    {
      __int128 v75 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)__int128 v75 = 0;
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "Requesting arming UI", v75, 2u);
      swift_slowDealloc(v75, -1LL, -1LL);
    }

    uint64_t v76 = *(void **)(v0 + 480);

    [v76 setRequestArmingUI:*(unsigned __int8 *)(v70 + v72)];
  }

  id v77 = [*(id *)(v0 + 480) data];
  if (!v77)
  {
    uint64_t v101 = *(void **)(v0 + 480);
    unint64_t v102 = sub_100187014();
    uint64_t v26 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v102, 0LL, 0LL);
    *(_DWORD *)uint64_t v103 = 10;
    *(void *)(v103 + 8) = 0xD000000000000020LL;
    *(void *)(v103 + swift_unknownObjectWeakDestroy(v0 + 16) = 0x8000000100506C70LL;
    swift_willThrow(v26);

LABEL_12:
    *(void *)(v0 + 288) = v26;
    swift_errorRetain(v26);
    uint64_t v28 = sub_100183098(&qword_100645710);
    if (swift_dynamicCast(v0 + 232, v0 + 288, v28, &type metadata for SFAuthenticationErrorMessage, 0LL))
    {
      swift_errorRelease(v26);
      uint64_t v29 = *(const char **)(v0 + 248);
      sub_1003DA488( *(_DWORD *)(v0 + 232),  *(void *)(v0 + 240),  (uint64_t)v29,  (uint64_t)&unk_1005DF398,  (uint64_t)sub_1003DB3AC,  (uint64_t)&unk_1005DF3B0);
      swift_bridgeObjectRelease(v29);
      uint64_t v30 = *(void *)(v0 + 288);
LABEL_44:
      swift_errorRelease(v30);
LABEL_45:
      uint64_t v99 = *(void *)(v0 + 416);
      uint64_t v100 = *(void *)(v0 + 392);
      swift_task_dealloc(*(void *)(v0 + 440));
      swift_task_dealloc(v99);
      swift_task_dealloc(v100);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }

    unint64_t v31 = (uint64_t *)(v0 + 272);
    swift_errorRelease(*(void *)(v0 + 288));
    *(void *)(v0 + 272) = v26;
    swift_errorRetain(v26);
    unint64_t v32 = sub_1003DB310();
    if (!swift_dynamicCast(v123, v0 + 272, v28, v32, 0LL))
    {
      swift_errorRelease(*v31);
      if (qword_1006442E0 != -1) {
        swift_once(&qword_1006442E0, sub_1003D43E4);
      }
      sub_100186DE4(v121, (uint64_t)qword_100652B70);
      swift_errorRetain(v26);
      uint64_t v44 = swift_errorRetain(v26);
      uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
      os_log_type_t v46 = static os_log_type_t.error.getter(v45);
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v48 = swift_slowAlloc(32LL, -1LL);
        *(_DWORD *)uint64_t v47 = 136315138;
        v127[0] = v48;
        *(void *)(v0 + 280) = v26;
        swift_errorRetain(v26);
        uint64_t v49 = String.init<A>(describing:)(v0 + 280, v28);
        uint64_t v51 = (const char *)v50;
        *(void *)(v0 + 256) = sub_10018CDB4(v49, v50, v127);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v47 + 4, v47 + 12);
        swift_bridgeObjectRelease(v51);
        swift_errorRelease(v26);
        swift_errorRelease(v26);
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "Unexpected error: %s", v47, 0xCu);
        swift_arrayDestroy(v48, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v48, -1LL, -1LL);
        swift_slowDealloc(v47, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease(v26);
        swift_errorRelease(v26);
      }

      sub_1003DA488( 10,  0LL,  0xE000000000000000LL,  (uint64_t)&unk_1005DF398,  (uint64_t)sub_1003DB3AC,  (uint64_t)&unk_1005DF3B0);
      uint64_t v30 = v26;
      goto LABEL_44;
    }

    unint64_t v118 = (void *)(v0 + 264);
    swift_errorRelease(v26);
    id v33 = *v123;
    id v34 = [*v123 code];
    id v35 = [v33 domain];
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    os_log_t v38 = v37;

    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(SFKAuthenticationErrorDomain);
    uint64_t v41 = v39;
    if (v36 == v40 && v38 == v39)
    {
      swift_bridgeObjectRelease_n(v38, 2LL);
    }

    else
    {
      char v52 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, v40, v39, 0LL);
      *(void *)&double v53 = swift_bridgeObjectRelease(v41).n128_u64[0];
      swift_bridgeObjectRelease(v38, v53);
      if ((v52 & 1) == 0)
      {
        if (qword_1006442E0 != -1) {
          swift_once(&qword_1006442E0, sub_1003D43E4);
        }
        sub_100186DE4(v121, (uint64_t)qword_100652B70);
        id v91 = v33;
        uint64_t v92 = (os_log_s *)Logger.logObject.getter(v91);
        os_log_type_t v93 = static os_log_type_t.error.getter(v92);
        if (os_log_type_enabled(v92, v93))
        {
          uint64_t v94 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v125 = swift_slowAlloc(32LL, -1LL);
          v127[0] = v125;
          *(_DWORD *)uint64_t v94 = 136315138;
          void *v118 = v91;
          id v95 = v91;
          uint64_t v96 = String.init<A>(describing:)(v118, v32);
          uint64_t v98 = (const char *)v97;
          *(void *)(v0 + 336) = sub_10018CDB4(v96, v97, v127);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v94 + 4, v94 + 12);
          swift_bridgeObjectRelease(v98);

          _os_log_impl((void *)&_mh_execute_header, v92, v93, "Unexpected error: %s", v94, 0xCu);
          swift_arrayDestroy(v125, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v125, -1LL, -1LL);
          swift_slowDealloc(v94, -1LL, -1LL);
        }

        else
        {
        }

        sub_1003DA488( 10,  0LL,  0xE000000000000000LL,  (uint64_t)&unk_1005DF398,  (uint64_t)sub_1003DB3AC,  (uint64_t)&unk_1005DF3B0);
        goto LABEL_43;
      }
    }

    id v54 = (id)SFAuthenticationErrorToString(v34);
    uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
    id v57 = v56;

    sub_1003DA488((int)v34, v55, (uint64_t)v57, (uint64_t)&unk_1005DF398, (uint64_t)sub_1003DB3AC, (uint64_t)&unk_1005DF3B0);
    swift_bridgeObjectRelease(v57);

LABEL_43:
    uint64_t v30 = *v31;
    goto LABEL_44;
  }

  uint64_t v78 = v77;
  uint64_t v79 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v77);
  uint64_t v81 = v80;

  *(void *)(v0 + 552) = v79;
  *(void *)(v0 + 560) = v81;
  id v82 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v83 = String._bridgeToObjectiveC()();
  uint64_t v84 = (uint64_t)[v82 integerForKey:v83];

  if (v84 <= 0)
  {
    unint64_t v104 = *(void *)(v0 + 560);
    uint64_t v105 = *(void *)(v0 + 552);
    uint64_t v117 = *(void **)(v0 + 480);
    uint64_t v106 = *(void *)(v0 + 416);
    uint64_t v120 = *(void **)(v0 + 544);
    uint64_t v122 = *(void *)(v0 + 408);
    uint64_t v107 = *(void *)(v0 + 392);
    uint64_t v126 = *(void *)(v0 + 400);
    uint64_t v108 = *(void *)(v0 + 376);
    uint64_t v119 = *(void *)(v0 + 384);
    uint64_t v109 = *(void **)(v0 + 344);
    sub_10019A6C4(*(void *)(v0 + 368), v0 + 144);
    uint64_t v110 = (void *)swift_allocObject(&unk_1005DF348, 80LL, 7LL);
    v110[2] = v109;
    v110[3] = v105;
    v110[4] = v104;
    sub_1001CE0D0((__int128 *)(v0 + 144), (uint64_t)(v110 + 5));
    *(void *)(v0 + 48) = sub_1003DB380;
    *(void *)(v0 + 56) = v110;
    *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = _NSConcreteStackBlock;
    *(void *)(v0 + 24) = 1107296256LL;
    *(void *)(v0 + 32) = sub_1001B9FE4;
    *(void *)(v0 + 40) = &unk_1005DF360;
    uint64_t v111 = _Block_copy((const void *)(v0 + 16));
    id v112 = v109;
    uint64_t v113 = sub_10019BA8C(v105, v104);
    static DispatchQoS.unspecified.getter(v113);
    *(void *)(v0 + 296) = _swiftEmptyArrayStorage;
    uint64_t v114 = sub_100183F14( (unint64_t *)&qword_100646510,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v115 = sub_100183098((uint64_t *)&unk_1006460D0);
    unint64_t v116 = sub_1001D228C();
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 296, v115, v116, v108, v114);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v106, v107, v111);
    _Block_release(v111);
    sub_100189B20(v105, v104);

    (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v107, v108);
    (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v106, v126);
    swift_release(*(void *)(v0 + 56));
    goto LABEL_45;
  }

  uint64_t v86 = (os_log_s *)Logger.logObject.getter(v85);
  os_log_type_t v87 = static os_log_type_t.error.getter(v86);
  if (os_log_type_enabled(v86, v87))
  {
    uint64_t v88 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v88 = 134217984;
    *(void *)(v0 + 304) = v84;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v88 + 4, v88 + 12);
    _os_log_impl( (void *)&_mh_execute_header,  v86,  v87,  "### TESTING ONLY: start delaySendingPairingResponse for %ld seconds",  v88,  0xCu);
    swift_slowDealloc(v88, -1LL, -1LL);
  }

  ContinuousClock.init()(v89);
  uint64_t v124 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1006461D8 + dword_1006461D8);
  unint64_t v90 = (void *)swift_task_alloc(unk_1006461DC);
  *(void *)(v0 + 568) = v90;
  void *v90 = v0;
  v90[1] = sub_1003D7E70;
  return v124( 1000000000000000000LL * v84,  ((unint64_t)v84 * (unsigned __int128)0xDE0B6B3A7640000uLL) >> 64,  0LL,  0LL,  1);
}

uint64_t sub_1003D5AA0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 456);
  *(void *)(*v1 + 464) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_1003D6934;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 448));
    uint64_t v4 = sub_1003D5B0C;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1003D5B0C()
{
  uint64_t v1 = *(void *)(v0 + 464);
  if (qword_1006442E0 != -1) {
    swift_once(&qword_1006442E0, sub_1003D43E4);
  }
  uint64_t v2 = (id *)(v0 + 328);
  uint64_t v3 = *(void **)(v0 + 344);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 472) = sub_100186DE4(v4, (uint64_t)qword_100652B70);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(char **)(v0 + 344);
  uint64_t v120 = v4;
  if (v7)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v9 = 136315138;
    v124[0] = v10;
    unint64_t v11 = sub_10034F010(*(void *)&v8[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type]);
    uint64_t v13 = (const char *)v12;
    *(void *)(v0 + 320) = sub_10018CDB4(v11, v12, v124);
    uint64_t v2 = (id *)(v0 + 328);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v13);

    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Authentication Session type: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
  }

  id v14 = [objc_allocWithZone((Class)SDAuthenticationPairingResponse) init];
  *(void *)(v0 + 480) = v14;
  if (!v14)
  {
    unint64_t v22 = sub_100187014();
    uint64_t v21 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v22, 0LL, 0LL);
    *(_DWORD *)uint64_t v23 = 10;
    *(void *)(v23 + 8) = 0xD000000000000039LL;
    *(void *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = 0x800000010050DF40LL;
    swift_willThrow(v21);
    goto LABEL_12;
  }

  uint64_t v15 = *(void *)(v0 + 344);
  uint64_t v16 = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type;
  *(void *)(v0 + 488) = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type;
  uint64_t v17 = *(void *)(v15 + v16);
  uint64_t v18 = OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_aksPairingSession;
  *(void *)(v0 + 496) = OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_aksPairingSession;
  uint64_t v19 = *(void *)(v15 + v18);
  *(void *)(v0 + 504) = v19;
  if (v17 != 8)
  {
    uint64_t v39 = dword_100655ECC;
    swift_retain();
    uint64_t v40 = (void *)swift_task_alloc(v39);
    *(void *)(v0 + 512) = v40;
    *uint64_t v40 = v0;
    v40[1] = sub_1003D6EEC;
    return sub_100448120();
  }

  uint64_t v20 = v14;
  swift_retain();
  sub_10044A04C();
  uint64_t v21 = v1;
  if (v1)
  {

    swift_release(v19);
    goto LABEL_12;
  }

  unint64_t v56 = (void *)sub_100449978(0LL, 0xF000000000000000LL);
  uint64_t v57 = swift_release(v19);
  *(void *)(v0 + 544) = v56;
  uint64_t v58 = *(void **)(v0 + 480);
  uint64_t v59 = *(void *)(v0 + 488);
  uint64_t v60 = *(void *)(v0 + 344);
  UUID.uuidString.getter(v57);
  uint64_t v62 = v61;
  NSString v63 = String._bridgeToObjectiveC()();
  objc_msgSend(v58, "setSessionID:", v63, swift_bridgeObjectRelease(v62).n128_f64[0]);

  [v58 setVersion:1];
  uint64_t v64 = Data.init(referencing:)(v56);
  unint64_t v66 = v65;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100189B20(v64, v66);
  [v58 setToken:isa];

  if (HIDWORD(*(void *)(v60 + v59))) {
    return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
  }
  uint64_t v68 = *(void *)(v0 + 344);
  id v69 = objc_msgSend(*(id *)(v0 + 480), "setType:");
  uint64_t v70 = OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_requestArmingUI;
  if (*(_BYTE *)(v68 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_requestArmingUI) == 1)
  {
    id v71 = (os_log_s *)Logger.logObject.getter(v69);
    os_log_type_t v72 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v73 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v73 = 0;
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "Requesting arming UI", v73, 2u);
      swift_slowDealloc(v73, -1LL, -1LL);
    }

    os_log_type_t v74 = *(void **)(v0 + 480);

    [v74 setRequestArmingUI:*(unsigned __int8 *)(v68 + v70)];
  }

  id v75 = [*(id *)(v0 + 480) data];
  if (!v75)
  {
    uint64_t v99 = *(void **)(v0 + 480);
    unint64_t v100 = sub_100187014();
    uint64_t v21 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v100, 0LL, 0LL);
    *(_DWORD *)uint64_t v101 = 10;
    *(void *)(v101 + 8) = 0xD000000000000020LL;
    *(void *)(v101 + swift_unknownObjectWeakDestroy(v0 + 16) = 0x8000000100506C70LL;
    swift_willThrow(v21);

LABEL_12:
    *(void *)(v0 + 288) = v21;
    swift_errorRetain(v21);
    uint64_t v24 = sub_100183098(&qword_100645710);
    if (swift_dynamicCast(v0 + 232, v0 + 288, v24, &type metadata for SFAuthenticationErrorMessage, 0LL))
    {
      swift_errorRelease(v21);
      unint64_t v25 = *(const char **)(v0 + 248);
      sub_1003DA488( *(_DWORD *)(v0 + 232),  *(void *)(v0 + 240),  (uint64_t)v25,  (uint64_t)&unk_1005DF398,  (uint64_t)sub_1003DB3AC,  (uint64_t)&unk_1005DF3B0);
      swift_bridgeObjectRelease(v25);
      uint64_t v26 = *(void *)(v0 + 288);
LABEL_44:
      swift_errorRelease(v26);
LABEL_45:
      uint64_t v97 = *(void *)(v0 + 416);
      uint64_t v98 = *(void *)(v0 + 392);
      swift_task_dealloc(*(void *)(v0 + 440));
      swift_task_dealloc(v97);
      swift_task_dealloc(v98);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }

    uint64_t v27 = (uint64_t *)(v0 + 272);
    swift_errorRelease(*(void *)(v0 + 288));
    *(void *)(v0 + 272) = v21;
    swift_errorRetain(v21);
    uint64_t v28 = v2;
    unint64_t v29 = sub_1003DB310();
    if (!swift_dynamicCast(v28, v0 + 272, v24, v29, 0LL))
    {
      swift_errorRelease(*v27);
      if (qword_1006442E0 != -1) {
        swift_once(&qword_1006442E0, sub_1003D43E4);
      }
      sub_100186DE4(v120, (uint64_t)qword_100652B70);
      swift_errorRetain(v21);
      uint64_t v42 = swift_errorRetain(v21);
      unint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
      os_log_type_t v44 = static os_log_type_t.error.getter(v43);
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v46 = swift_slowAlloc(32LL, -1LL);
        *(_DWORD *)uint64_t v45 = 136315138;
        v124[0] = v46;
        *(void *)(v0 + 280) = v21;
        swift_errorRetain(v21);
        uint64_t v47 = String.init<A>(describing:)(v0 + 280, v24);
        uint64_t v49 = (const char *)v48;
        *(void *)(v0 + 256) = sub_10018CDB4(v47, v48, v124);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v45 + 4, v45 + 12);
        swift_bridgeObjectRelease(v49);
        swift_errorRelease(v21);
        swift_errorRelease(v21);
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "Unexpected error: %s", v45, 0xCu);
        swift_arrayDestroy(v46, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v46, -1LL, -1LL);
        swift_slowDealloc(v45, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease(v21);
        swift_errorRelease(v21);
      }

      sub_1003DA488( 10,  0LL,  0xE000000000000000LL,  (uint64_t)&unk_1005DF398,  (uint64_t)sub_1003DB3AC,  (uint64_t)&unk_1005DF3B0);
      uint64_t v26 = v21;
      goto LABEL_44;
    }

    uint64_t v117 = (void *)(v0 + 264);
    swift_errorRelease(v21);
    id v30 = *v28;
    id v31 = [*v28 code];
    id v32 = [v30 domain];
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    id v35 = v34;

    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(SFKAuthenticationErrorDomain);
    os_log_t v38 = v36;
    if (v33 == v37 && v35 == v36)
    {
      swift_bridgeObjectRelease_n(v35, 2LL);
    }

    else
    {
      char v50 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v37, v36, 0LL);
      *(void *)&double v51 = swift_bridgeObjectRelease(v38).n128_u64[0];
      swift_bridgeObjectRelease(v35, v51);
      if ((v50 & 1) == 0)
      {
        if (qword_1006442E0 != -1) {
          swift_once(&qword_1006442E0, sub_1003D43E4);
        }
        sub_100186DE4(v120, (uint64_t)qword_100652B70);
        id v89 = v30;
        unint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
        os_log_type_t v91 = static os_log_type_t.error.getter(v90);
        if (os_log_type_enabled(v90, v91))
        {
          uint64_t v92 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v122 = swift_slowAlloc(32LL, -1LL);
          v124[0] = v122;
          *(_DWORD *)uint64_t v92 = 136315138;
          *uint64_t v117 = v89;
          id v93 = v89;
          uint64_t v94 = String.init<A>(describing:)(v117, v29);
          uint64_t v96 = (const char *)v95;
          *(void *)(v0 + 336) = sub_10018CDB4(v94, v95, v124);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v92 + 4, v92 + 12);
          swift_bridgeObjectRelease(v96);

          _os_log_impl((void *)&_mh_execute_header, v90, v91, "Unexpected error: %s", v92, 0xCu);
          swift_arrayDestroy(v122, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v122, -1LL, -1LL);
          swift_slowDealloc(v92, -1LL, -1LL);
        }

        else
        {
        }

        sub_1003DA488( 10,  0LL,  0xE000000000000000LL,  (uint64_t)&unk_1005DF398,  (uint64_t)sub_1003DB3AC,  (uint64_t)&unk_1005DF3B0);
        goto LABEL_43;
      }
    }

    id v52 = (id)SFAuthenticationErrorToString(v31);
    uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
    uint64_t v55 = v54;

    sub_1003DA488((int)v31, v53, (uint64_t)v55, (uint64_t)&unk_1005DF398, (uint64_t)sub_1003DB3AC, (uint64_t)&unk_1005DF3B0);
    swift_bridgeObjectRelease(v55);

LABEL_43:
    uint64_t v26 = *v27;
    goto LABEL_44;
  }

  uint64_t v76 = v75;
  uint64_t v77 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v75);
  uint64_t v79 = v78;

  *(void *)(v0 + 552) = v77;
  *(void *)(v0 + 560) = v79;
  id v80 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v81 = String._bridgeToObjectiveC()();
  uint64_t v82 = (uint64_t)[v80 integerForKey:v81];

  if (v82 <= 0)
  {
    unint64_t v102 = *(void *)(v0 + 560);
    uint64_t v103 = *(void *)(v0 + 552);
    uint64_t v115 = *(void **)(v0 + 480);
    uint64_t v104 = *(void *)(v0 + 416);
    unint64_t v118 = *(void **)(v0 + 544);
    uint64_t v119 = *(void *)(v0 + 408);
    uint64_t v105 = *(void *)(v0 + 392);
    uint64_t v123 = *(void *)(v0 + 400);
    uint64_t v106 = *(void *)(v0 + 376);
    uint64_t v116 = *(void *)(v0 + 384);
    uint64_t v107 = *(void **)(v0 + 344);
    sub_10019A6C4(*(void *)(v0 + 368), v0 + 144);
    uint64_t v108 = (void *)swift_allocObject(&unk_1005DF348, 80LL, 7LL);
    v108[2] = v107;
    v108[3] = v103;
    v108[4] = v102;
    sub_1001CE0D0((__int128 *)(v0 + 144), (uint64_t)(v108 + 5));
    *(void *)(v0 + 48) = sub_1003DB380;
    *(void *)(v0 + 56) = v108;
    *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = _NSConcreteStackBlock;
    *(void *)(v0 + 24) = 1107296256LL;
    *(void *)(v0 + 32) = sub_1001B9FE4;
    *(void *)(v0 + 40) = &unk_1005DF360;
    uint64_t v109 = _Block_copy((const void *)(v0 + 16));
    id v110 = v107;
    uint64_t v111 = sub_10019BA8C(v103, v102);
    static DispatchQoS.unspecified.getter(v111);
    *(void *)(v0 + 296) = _swiftEmptyArrayStorage;
    uint64_t v112 = sub_100183F14( (unint64_t *)&qword_100646510,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v113 = sub_100183098((uint64_t *)&unk_1006460D0);
    unint64_t v114 = sub_1001D228C();
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 296, v113, v114, v106, v112);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v104, v105, v109);
    _Block_release(v109);
    sub_100189B20(v103, v102);

    (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v105, v106);
    (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v104, v123);
    swift_release(*(void *)(v0 + 56));
    goto LABEL_45;
  }

  uint64_t v84 = (os_log_s *)Logger.logObject.getter(v83);
  os_log_type_t v85 = static os_log_type_t.error.getter(v84);
  if (os_log_type_enabled(v84, v85))
  {
    uint64_t v86 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v86 = 134217984;
    *(void *)(v0 + 304) = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v86 + 4, v86 + 12);
    _os_log_impl( (void *)&_mh_execute_header,  v84,  v85,  "### TESTING ONLY: start delaySendingPairingResponse for %ld seconds",  v86,  0xCu);
    swift_slowDealloc(v86, -1LL, -1LL);
  }

  ContinuousClock.init()(v87);
  uint64_t v121 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1006461D8 + dword_1006461D8);
  uint64_t v88 = (void *)swift_task_alloc(unk_1006461DC);
  *(void *)(v0 + 568) = v88;
  void *v88 = v0;
  v88[1] = sub_1003D7E70;
  return v121( 1000000000000000000LL * v82,  ((unint64_t)v82 * (unsigned __int128)0xDE0B6B3A7640000uLL) >> 64,  0LL,  0LL,  1);
}

uint64_t sub_1003D6934()
{
  uint64_t v1 = *(void *)(v0 + 464);
  *(void *)(v0 + 288) = v1;
  swift_errorRetain(v1);
  uint64_t v2 = sub_100183098(&qword_100645710);
  if ((swift_dynamicCast(v0 + 232, v0 + 288, v2, &type metadata for SFAuthenticationErrorMessage, 0LL) & 1) != 0)
  {
    swift_errorRelease(v1);
    uint64_t v3 = *(const char **)(v0 + 248);
    sub_1003DA488( *(_DWORD *)(v0 + 232),  *(void *)(v0 + 240),  (uint64_t)v3,  (uint64_t)&unk_1005DF398,  (uint64_t)sub_1003DB3AC,  (uint64_t)&unk_1005DF3B0);
    swift_bridgeObjectRelease(v3);
    uint64_t v4 = *(void *)(v0 + 288);
    goto LABEL_22;
  }

  uint64_t v5 = (id *)(v0 + 328);
  swift_errorRelease(*(void *)(v0 + 288));
  *(void *)(v0 + 272) = v1;
  swift_errorRetain(v1);
  unint64_t v6 = sub_1003DB310();
  if (swift_dynamicCast(v0 + 328, v0 + 272, v2, v6, 0LL))
  {
    swift_errorRelease(v1);
    id v7 = *v5;
    id v8 = [*v5 code];
    id v9 = [v7 domain];
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    unint64_t v12 = v11;

    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(SFKAuthenticationErrorDomain);
    uint64_t v15 = v13;
    if (v10 == v14 && v12 == v13)
    {
      swift_bridgeObjectRelease_n(v12, 2LL);
    }

    else
    {
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, v14, v13, 0LL);
      *(void *)&double v26 = swift_bridgeObjectRelease(v15).n128_u64[0];
      swift_bridgeObjectRelease(v12, v26);
      if ((v25 & 1) == 0)
      {
        if (qword_1006442E0 != -1) {
          swift_once(&qword_1006442E0, sub_1003D43E4);
        }
        uint64_t v31 = type metadata accessor for Logger(0LL);
        sub_100186DE4(v31, (uint64_t)qword_100652B70);
        id v7 = v7;
        id v32 = (os_log_s *)Logger.logObject.getter(v7);
        os_log_type_t v33 = static os_log_type_t.error.getter(v32);
        if (os_log_type_enabled(v32, v33))
        {
          id v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v35 = swift_slowAlloc(32LL, -1LL);
          uint64_t v43 = v35;
          *(_DWORD *)id v34 = 136315138;
          *(void *)(v0 + 264) = v7;
          id v36 = v7;
          uint64_t v37 = String.init<A>(describing:)(v0 + 264, v6);
          uint64_t v39 = (const char *)v38;
          *(void *)(v0 + 336) = sub_10018CDB4(v37, v38, &v43);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v34 + 4, v34 + 12);
          swift_bridgeObjectRelease(v39);

          _os_log_impl((void *)&_mh_execute_header, v32, v33, "Unexpected error: %s", v34, 0xCu);
          swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v35, -1LL, -1LL);
          swift_slowDealloc(v34, -1LL, -1LL);
        }

        else
        {
        }

        sub_1003DA488( 10,  0LL,  0xE000000000000000LL,  (uint64_t)&unk_1005DF398,  (uint64_t)sub_1003DB3AC,  (uint64_t)&unk_1005DF3B0);
        goto LABEL_21;
      }
    }

    id v27 = (id)SFAuthenticationErrorToString(v8);
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    id v30 = v29;

    sub_1003DA488((int)v8, v28, (uint64_t)v30, (uint64_t)&unk_1005DF398, (uint64_t)sub_1003DB3AC, (uint64_t)&unk_1005DF3B0);
    swift_bridgeObjectRelease(v30);
LABEL_21:

    uint64_t v4 = *(void *)(v0 + 272);
    goto LABEL_22;
  }

  swift_errorRelease(*(void *)(v0 + 272));
  if (qword_1006442E0 != -1) {
    swift_once(&qword_1006442E0, sub_1003D43E4);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v16, (uint64_t)qword_100652B70);
  swift_errorRetain(v1);
  uint64_t v17 = swift_errorRetain(v1);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.error.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    uint64_t v43 = v21;
    *(_DWORD *)uint64_t v20 = 136315138;
    *(void *)(v0 + 280) = v1;
    swift_errorRetain(v1);
    uint64_t v22 = String.init<A>(describing:)(v0 + 280, v2);
    uint64_t v24 = (const char *)v23;
    *(void *)(v0 + 256) = sub_10018CDB4(v22, v23, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease(v24);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Unexpected error: %s", v20, 0xCu);
    swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  sub_1003DA488(10, 0LL, 0xE000000000000000LL, (uint64_t)&unk_1005DF398, (uint64_t)sub_1003DB3AC, (uint64_t)&unk_1005DF3B0);
  uint64_t v4 = v1;
LABEL_22:
  swift_errorRelease(v4);
  uint64_t v40 = *(void *)(v0 + 416);
  uint64_t v41 = *(void *)(v0 + 392);
  swift_task_dealloc(*(void *)(v0 + 440));
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003D6EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void *)(*(void *)v3 + 512LL);
  v4[65] = a1;
  v4[66] = a2;
  v4[67] = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    unint64_t v6 = sub_1003D8728;
  }

  else
  {
    swift_release(v4[63]);
    unint64_t v6 = sub_1003D6F68;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1003D6F68()
{
  id v1 = [*(id *)(v0 + 360) longTermKey];
  if (!v1)
  {
    unint64_t v19 = *(void *)(v0 + 528);
    uint64_t v20 = *(void *)(v0 + 520);
    uint64_t v21 = *(void **)(v0 + 480);
    unint64_t v22 = sub_100187014();
    uint64_t v23 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v22, 0LL, 0LL);
    *(_DWORD *)uint64_t v24 = 10;
    *(void *)(v24 + 8) = 0xD000000000000015LL;
    *(void *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = 0x800000010050DF80LL;
    swift_willThrow(v23);
    sub_100189B20(v20, v19);

    goto LABEL_9;
  }

  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v0 + 496);
  uint64_t v4 = *(void *)(v0 + 344);
  uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);
  unint64_t v7 = v6;

  uint64_t v8 = *(void *)(v4 + v3);
  id v9 = *(void **)(v8 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationAKSPairingSession_aksManager);
  swift_retain();
  sub_10019BA8C(v5, v7);
  unint64_t v139 = v7;
  v10.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v12 = *(void *)(v8 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationAKSPairingSession_peerDevice + 24);
  uint64_t v11 = *(void *)(v8 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationAKSPairingSession_peerDevice + 32);
  uint64_t v13 = sub_10019A708( (void *)(v8 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationAKSPairingSession_peerDevice),  v12);
  uint64_t v14 = *(void *)(v12 - 8);
  uint64_t v15 = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t, void *, uint64_t))(v14 + 16))(v15, v13, v12);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v11);
  uint64_t v17 = v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v12);
  if (v17)
  {
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v17);
  }

  else
  {
    NSString v18 = 0LL;
  }

  uint64_t v25 = *(void *)(v0 + 536);
  swift_task_dealloc(v15);
  [v9 signAndStoreRemoteLTK:v10.super.isa forDeviceID:v18];

  sub_1004494C8();
  uint64_t v23 = v25;
  if (v25)
  {
    unint64_t v26 = *(void *)(v0 + 528);
    uint64_t v27 = *(void *)(v0 + 520);

    sub_100189B20(v5, v139);
    swift_release(v8);
    sub_100189B20(v5, v139);
    sub_100189B20(v27, v26);
    goto LABEL_9;
  }

  id v137 = (void *)sub_100449978(0LL, 0xF000000000000000LL);
  unint64_t v57 = *(void *)(v0 + 528);
  uint64_t v58 = *(void *)(v0 + 520);
  sub_100189B20(v5, v139);
  swift_release(v8);
  sub_10019BA8C(v58, v57);
  uint64_t v59 = sub_10019BA8C(v58, v57);
  uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
  os_log_type_t v61 = static os_log_type_t.default.getter();
  BOOL v62 = os_log_type_enabled(v60, v61);
  unint64_t v63 = *(void *)(v0 + 528);
  uint64_t v64 = *(void *)(v0 + 520);
  if (v62)
  {
    unint64_t v65 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v134 = swift_slowAlloc(32LL, -1LL);
    v143[0] = v134;
    *(_DWORD *)unint64_t v65 = 136315138;
    uint64_t v66 = Data.debugDescription.getter(v64, v63);
    uint64_t v68 = (const char *)v67;
    *(void *)(v0 + 312) = sub_10018CDB4(v66, v67, v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v65 + 4, v65 + 12);
    swift_bridgeObjectRelease(v68);
    sub_100189B20(v64, v63);
    sub_100189B20(v64, v63);
    _os_log_impl((void *)&_mh_execute_header, v60, v61, "Sending localAttestedLTK: %s", v65, 0xCu);
    swift_arrayDestroy(v134, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v134, -1LL, -1LL);
    swift_slowDealloc(v65, -1LL, -1LL);
  }

  else
  {
    sub_100189B20(v64, v63);
    sub_100189B20(v64, v63);
  }

  unint64_t v78 = *(void *)(v0 + 528);
  uint64_t v79 = *(void *)(v0 + 520);
  id v80 = *(void **)(v0 + 480);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v80 setLongTermKey:isa];

  sub_100189B20(v5, v139);
  uint64_t v82 = sub_100189B20(v79, v78);
  *(void *)(v0 + 544) = v137;
  uint64_t v83 = *(void **)(v0 + 480);
  uint64_t v84 = *(void *)(v0 + 488);
  uint64_t v85 = *(void *)(v0 + 344);
  UUID.uuidString.getter(v82);
  uint64_t v87 = v86;
  NSString v88 = String._bridgeToObjectiveC()();
  objc_msgSend(v83, "setSessionID:", v88, swift_bridgeObjectRelease(v87).n128_f64[0]);

  [v83 setVersion:1];
  uint64_t v89 = Data.init(referencing:)(v137);
  unint64_t v91 = v90;
  Class v92 = Data._bridgeToObjectiveC()().super.isa;
  sub_100189B20(v89, v91);
  [v83 setToken:v92];

  if (HIDWORD(*(void *)(v85 + v84))) {
    return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
  }
  uint64_t v93 = *(void *)(v0 + 344);
  id v94 = objc_msgSend(*(id *)(v0 + 480), "setType:");
  uint64_t v95 = OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_requestArmingUI;
  if (*(_BYTE *)(v93 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_requestArmingUI) == 1)
  {
    uint64_t v96 = (os_log_s *)Logger.logObject.getter(v94);
    os_log_type_t v97 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v96, v97))
    {
      uint64_t v98 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v98 = 0;
      _os_log_impl((void *)&_mh_execute_header, v96, v97, "Requesting arming UI", v98, 2u);
      swift_slowDealloc(v98, -1LL, -1LL);
    }

    uint64_t v99 = *(void **)(v0 + 480);

    [v99 setRequestArmingUI:*(unsigned __int8 *)(v93 + v95)];
  }

  id v100 = [*(id *)(v0 + 480) data];
  if (!v100)
  {
    uint64_t v115 = *(void **)(v0 + 480);
    unint64_t v116 = sub_100187014();
    uint64_t v23 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v116, 0LL, 0LL);
    *(_DWORD *)uint64_t v117 = 10;
    *(void *)(v117 + 8) = 0xD000000000000020LL;
    *(void *)(v117 + swift_unknownObjectWeakDestroy(v0 + 16) = 0x8000000100506C70LL;
    swift_willThrow(v23);

LABEL_9:
    *(void *)(v0 + 288) = v23;
    swift_errorRetain(v23);
    uint64_t v28 = sub_100183098(&qword_100645710);
    if (swift_dynamicCast(v0 + 232, v0 + 288, v28, &type metadata for SFAuthenticationErrorMessage, 0LL))
    {
      swift_errorRelease(v23);
      unint64_t v29 = *(const char **)(v0 + 248);
      sub_1003DA488( *(_DWORD *)(v0 + 232),  *(void *)(v0 + 240),  (uint64_t)v29,  (uint64_t)&unk_1005DF398,  (uint64_t)sub_1003DB3AC,  (uint64_t)&unk_1005DF3B0);
      swift_bridgeObjectRelease(v29);
      uint64_t v30 = *(void *)(v0 + 288);
LABEL_44:
      swift_errorRelease(v30);
LABEL_45:
      uint64_t v118 = *(void *)(v0 + 416);
      uint64_t v119 = *(void *)(v0 + 392);
      swift_task_dealloc(*(void *)(v0 + 440));
      swift_task_dealloc(v118);
      swift_task_dealloc(v119);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }

    uint64_t v140 = v0 + 264;
    uint64_t v31 = (id *)(v0 + 328);
    swift_errorRelease(*(void *)(v0 + 288));
    *(void *)(v0 + 272) = v23;
    swift_errorRetain(v23);
    unint64_t v32 = sub_1003DB310();
    if (!swift_dynamicCast(v0 + 328, v0 + 272, v28, v32, 0LL))
    {
      swift_errorRelease(*(void *)(v0 + 272));
      if (qword_1006442E0 != -1) {
        swift_once(&qword_1006442E0, sub_1003D43E4);
      }
      uint64_t v42 = type metadata accessor for Logger(0LL);
      sub_100186DE4(v42, (uint64_t)qword_100652B70);
      swift_errorRetain(v23);
      uint64_t v43 = swift_errorRetain(v23);
      os_log_type_t v44 = (os_log_s *)Logger.logObject.getter(v43);
      os_log_type_t v45 = static os_log_type_t.error.getter(v44);
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v47 = swift_slowAlloc(32LL, -1LL);
        v143[0] = v47;
        *(_DWORD *)uint64_t v46 = 136315138;
        *(void *)(v0 + 280) = v23;
        swift_errorRetain(v23);
        uint64_t v48 = String.init<A>(describing:)(v0 + 280, v28);
        char v50 = (const char *)v49;
        *(void *)(v0 + 256) = sub_10018CDB4(v48, v49, v143);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v140, v46 + 4, v46 + 12);
        swift_bridgeObjectRelease(v50);
        swift_errorRelease(v23);
        swift_errorRelease(v23);
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "Unexpected error: %s", v46, 0xCu);
        swift_arrayDestroy(v47, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1LL, -1LL);
        swift_slowDealloc(v46, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease(v23);
        swift_errorRelease(v23);
      }

      sub_1003DA488( 10,  0LL,  0xE000000000000000LL,  (uint64_t)&unk_1005DF398,  (uint64_t)sub_1003DB3AC,  (uint64_t)&unk_1005DF3B0);
      uint64_t v30 = v23;
      goto LABEL_44;
    }

    swift_errorRelease(v23);
    id v33 = *v31;
    id v34 = [*v31 code];
    id v35 = [v33 domain];
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    unint64_t v38 = v37;

    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(SFKAuthenticationErrorDomain);
    uint64_t v41 = v39;
    if (v36 == v40 && v38 == v39)
    {
      swift_bridgeObjectRelease_n(v38, 2LL);
    }

    else
    {
      char v51 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, v40, v39, 0LL);
      *(void *)&double v52 = swift_bridgeObjectRelease(v41).n128_u64[0];
      swift_bridgeObjectRelease(v38, v52);
      if ((v51 & 1) == 0)
      {
        if (qword_1006442E0 != -1) {
          swift_once(&qword_1006442E0, sub_1003D43E4);
        }
        uint64_t v69 = type metadata accessor for Logger(0LL);
        sub_100186DE4(v69, (uint64_t)qword_100652B70);
        id v33 = v33;
        uint64_t v70 = (os_log_s *)Logger.logObject.getter(v33);
        os_log_type_t v71 = static os_log_type_t.error.getter(v70);
        if (os_log_type_enabled(v70, v71))
        {
          os_log_type_t v72 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v73 = swift_slowAlloc(32LL, -1LL);
          v143[0] = v73;
          *(_DWORD *)os_log_type_t v72 = 136315138;
          *(void *)(v0 + 264) = v33;
          id v74 = v33;
          uint64_t v75 = String.init<A>(describing:)(v140, v32);
          uint64_t v77 = (const char *)v76;
          *(void *)(v0 + 336) = sub_10018CDB4(v75, v76, v143);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v72 + 4, v72 + 12);
          swift_bridgeObjectRelease(v77);

          _os_log_impl((void *)&_mh_execute_header, v70, v71, "Unexpected error: %s", v72, 0xCu);
          swift_arrayDestroy(v73, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v73, -1LL, -1LL);
          swift_slowDealloc(v72, -1LL, -1LL);
        }

        else
        {
        }

        sub_1003DA488( 10,  0LL,  0xE000000000000000LL,  (uint64_t)&unk_1005DF398,  (uint64_t)sub_1003DB3AC,  (uint64_t)&unk_1005DF3B0);
        goto LABEL_43;
      }
    }

    id v53 = (id)SFAuthenticationErrorToString(v34);
    uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
    unint64_t v56 = v55;

    sub_1003DA488((int)v34, v54, (uint64_t)v56, (uint64_t)&unk_1005DF398, (uint64_t)sub_1003DB3AC, (uint64_t)&unk_1005DF3B0);
    swift_bridgeObjectRelease(v56);
LABEL_43:

    uint64_t v30 = *(void *)(v0 + 272);
    goto LABEL_44;
  }

  uint64_t v101 = v100;
  uint64_t v102 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v100);
  uint64_t v104 = v103;

  *(void *)(v0 + 552) = v102;
  *(void *)(v0 + 560) = v104;
  id v105 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v106 = String._bridgeToObjectiveC()();
  uint64_t v107 = (uint64_t)[v105 integerForKey:v106];

  if (v107 <= 0)
  {
    unint64_t v120 = *(void *)(v0 + 560);
    uint64_t v121 = *(void *)(v0 + 552);
    uint64_t v133 = *(void **)(v0 + 480);
    uint64_t v122 = *(void *)(v0 + 416);
    uint64_t v136 = *(void **)(v0 + 544);
    uint64_t v138 = *(void *)(v0 + 408);
    uint64_t v123 = *(void *)(v0 + 392);
    uint64_t v142 = *(void *)(v0 + 400);
    uint64_t v124 = *(void *)(v0 + 376);
    uint64_t v135 = *(void *)(v0 + 384);
    uint64_t v125 = *(void **)(v0 + 344);
    sub_10019A6C4(*(void *)(v0 + 368), v0 + 144);
    uint64_t v126 = (void *)swift_allocObject(&unk_1005DF348, 80LL, 7LL);
    v126[2] = v125;
    v126[3] = v121;
    v126[4] = v120;
    sub_1001CE0D0((__int128 *)(v0 + 144), (uint64_t)(v126 + 5));
    *(void *)(v0 + 48) = sub_1003DB380;
    *(void *)(v0 + 56) = v126;
    *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = _NSConcreteStackBlock;
    *(void *)(v0 + 24) = 1107296256LL;
    *(void *)(v0 + 32) = sub_1001B9FE4;
    *(void *)(v0 + 40) = &unk_1005DF360;
    uint64_t v127 = _Block_copy((const void *)(v0 + 16));
    id v128 = v125;
    uint64_t v129 = sub_10019BA8C(v121, v120);
    static DispatchQoS.unspecified.getter(v129);
    *(void *)(v0 + 296) = _swiftEmptyArrayStorage;
    uint64_t v130 = sub_100183F14( (unint64_t *)&qword_100646510,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v131 = sub_100183098((uint64_t *)&unk_1006460D0);
    unint64_t v132 = sub_1001D228C();
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 296, v131, v132, v124, v130);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v122, v123, v127);
    _Block_release(v127);
    sub_100189B20(v121, v120);

    (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v123, v124);
    (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v122, v142);
    swift_release(*(void *)(v0 + 56));
    goto LABEL_45;
  }

  uint64_t v109 = (os_log_s *)Logger.logObject.getter(v108);
  os_log_type_t v110 = static os_log_type_t.error.getter(v109);
  if (os_log_type_enabled(v109, v110))
  {
    uint64_t v111 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v111 = 134217984;
    *(void *)(v0 + 304) = v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v111 + 4, v111 + 12);
    _os_log_impl( (void *)&_mh_execute_header,  v109,  v110,  "### TESTING ONLY: start delaySendingPairingResponse for %ld seconds",  v111,  0xCu);
    swift_slowDealloc(v111, -1LL, -1LL);
  }

  ContinuousClock.init()(v112);
  uint64_t v141 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1006461D8 + dword_1006461D8);
  uint64_t v113 = (void *)swift_task_alloc(unk_1006461DC);
  *(void *)(v0 + 568) = v113;
  *uint64_t v113 = v0;
  v113[1] = sub_1003D7E70;
  return v141( 1000000000000000000LL * v107,  ((unint64_t)v107 * (unsigned __int128)0xDE0B6B3A7640000uLL) >> 64,  0LL,  0LL,  1);
}

uint64_t sub_1003D7E70()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 568LL);
  *(void *)(*(void *)v1 + 576LL) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v2[54] + 8LL))(v2[55], v2[53]);
  if (v0) {
    uint64_t v4 = sub_1003D8160;
  }
  else {
    uint64_t v4 = sub_1003D7EE4;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1003D7EE4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v3 = static os_log_type_t.error.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "### TESTING ONLY: end delaySendingPairingResponse", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  unint64_t v5 = *(void *)(v1 + 560);
  uint64_t v6 = *(void *)(v1 + 552);
  uint64_t v21 = *(void **)(v1 + 480);
  uint64_t v7 = *(void *)(v1 + 416);
  uint64_t v23 = *(void **)(v1 + 544);
  uint64_t v24 = *(void *)(v1 + 408);
  uint64_t v8 = *(void *)(v1 + 392);
  uint64_t v25 = *(void *)(v1 + 400);
  uint64_t v9 = *(void *)(v1 + 376);
  uint64_t v22 = *(void *)(v1 + 384);
  NSData v10 = *(void **)(v1 + 344);
  sub_10019A6C4(*(void *)(v1 + 368), v1 + 144);
  uint64_t v11 = (void *)swift_allocObject(&unk_1005DF348, 80LL, 7LL);
  v11[2] = v10;
  v11[3] = v6;
  v11[4] = v5;
  sub_1001CE0D0((__int128 *)(v1 + 144), (uint64_t)(v11 + 5));
  *(void *)(v1 + 48) = sub_1003DB380;
  *(void *)(v1 + 56) = v11;
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = _NSConcreteStackBlock;
  *(void *)(v1 + 24) = 1107296256LL;
  *(void *)(v1 + 32) = sub_1001B9FE4;
  *(void *)(v1 + 40) = &unk_1005DF360;
  uint64_t v12 = _Block_copy((const void *)(v1 + 16));
  id v13 = v10;
  uint64_t v14 = sub_10019BA8C(v6, v5);
  static DispatchQoS.unspecified.getter(v14);
  *(void *)(v1 + 296) = _swiftEmptyArrayStorage;
  uint64_t v15 = sub_100183F14( (unint64_t *)&qword_100646510,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v16 = sub_100183098((uint64_t *)&unk_1006460D0);
  unint64_t v17 = sub_1001D228C();
  dispatch thunk of SetAlgebra.init<A>(_:)(v1 + 296, v16, v17, v9, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v7, v8, v12);
  _Block_release(v12);
  sub_100189B20(v6, v5);

  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v7, v25);
  swift_release(*(void *)(v1 + 56));
  uint64_t v18 = *(void *)(v1 + 416);
  uint64_t v19 = *(void *)(v1 + 392);
  swift_task_dealloc(*(void *)(v1 + 440));
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003D8160()
{
  unint64_t v1 = *(void *)(v0 + 560);
  uint64_t v2 = *(void *)(v0 + 552);
  os_log_type_t v3 = *(void **)(v0 + 480);

  sub_100189B20(v2, v1);
  uint64_t v4 = *(void *)(v0 + 576);
  *(void *)(v0 + 288) = v4;
  swift_errorRetain(v4);
  uint64_t v5 = sub_100183098(&qword_100645710);
  if ((swift_dynamicCast(v0 + 232, v0 + 288, v5, &type metadata for SFAuthenticationErrorMessage, 0LL) & 1) != 0)
  {
    swift_errorRelease(v4);
    uint64_t v6 = *(const char **)(v0 + 248);
    sub_1003DA488( *(_DWORD *)(v0 + 232),  *(void *)(v0 + 240),  (uint64_t)v6,  (uint64_t)&unk_1005DF398,  (uint64_t)sub_1003DB3AC,  (uint64_t)&unk_1005DF3B0);
    swift_bridgeObjectRelease(v6);
    uint64_t v7 = *(void *)(v0 + 288);
    goto LABEL_22;
  }

  uint64_t v8 = (id *)(v0 + 328);
  swift_errorRelease(*(void *)(v0 + 288));
  *(void *)(v0 + 272) = v4;
  swift_errorRetain(v4);
  unint64_t v9 = sub_1003DB310();
  if (swift_dynamicCast(v0 + 328, v0 + 272, v5, v9, 0LL))
  {
    swift_errorRelease(v4);
    id v10 = *v8;
    id v11 = [*v8 code];
    id v12 = [v10 domain];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    uint64_t v15 = v14;

    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(SFKAuthenticationErrorDomain);
    uint64_t v18 = v16;
    if (v13 == v17 && v15 == v16)
    {
      swift_bridgeObjectRelease_n(v15, 2LL);
    }

    else
    {
      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, v17, v16, 0LL);
      *(void *)&double v29 = swift_bridgeObjectRelease(v18).n128_u64[0];
      swift_bridgeObjectRelease(v15, v29);
      if ((v28 & 1) == 0)
      {
        if (qword_1006442E0 != -1) {
          swift_once(&qword_1006442E0, sub_1003D43E4);
        }
        uint64_t v34 = type metadata accessor for Logger(0LL);
        sub_100186DE4(v34, (uint64_t)qword_100652B70);
        id v10 = v10;
        id v35 = (os_log_s *)Logger.logObject.getter(v10);
        os_log_type_t v36 = static os_log_type_t.error.getter(v35);
        if (os_log_type_enabled(v35, v36))
        {
          uint64_t v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v38 = swift_slowAlloc(32LL, -1LL);
          uint64_t v46 = v38;
          *(_DWORD *)uint64_t v37 = 136315138;
          *(void *)(v0 + 264) = v10;
          id v39 = v10;
          uint64_t v40 = String.init<A>(describing:)(v0 + 264, v9);
          uint64_t v42 = (const char *)v41;
          *(void *)(v0 + 336) = sub_10018CDB4(v40, v41, &v46);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v37 + 4, v37 + 12);
          swift_bridgeObjectRelease(v42);

          _os_log_impl((void *)&_mh_execute_header, v35, v36, "Unexpected error: %s", v37, 0xCu);
          swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v38, -1LL, -1LL);
          swift_slowDealloc(v37, -1LL, -1LL);
        }

        else
        {
        }

        sub_1003DA488( 10,  0LL,  0xE000000000000000LL,  (uint64_t)&unk_1005DF398,  (uint64_t)sub_1003DB3AC,  (uint64_t)&unk_1005DF3B0);
        goto LABEL_21;
      }
    }

    id v30 = (id)SFAuthenticationErrorToString(v11);
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    id v33 = v32;

    sub_1003DA488((int)v11, v31, (uint64_t)v33, (uint64_t)&unk_1005DF398, (uint64_t)sub_1003DB3AC, (uint64_t)&unk_1005DF3B0);
    swift_bridgeObjectRelease(v33);
LABEL_21:

    uint64_t v7 = *(void *)(v0 + 272);
    goto LABEL_22;
  }

  swift_errorRelease(*(void *)(v0 + 272));
  if (qword_1006442E0 != -1) {
    swift_once(&qword_1006442E0, sub_1003D43E4);
  }
  uint64_t v19 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v19, (uint64_t)qword_100652B70);
  swift_errorRetain(v4);
  uint64_t v20 = swift_errorRetain(v4);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.error.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    uint64_t v46 = v24;
    *(_DWORD *)uint64_t v23 = 136315138;
    *(void *)(v0 + 280) = v4;
    swift_errorRetain(v4);
    uint64_t v25 = String.init<A>(describing:)(v0 + 280, v5);
    uint64_t v27 = (const char *)v26;
    *(void *)(v0 + 256) = sub_10018CDB4(v25, v26, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease(v27);
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Unexpected error: %s", v23, 0xCu);
    swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v4);
    swift_errorRelease(v4);
  }

  sub_1003DA488(10, 0LL, 0xE000000000000000LL, (uint64_t)&unk_1005DF398, (uint64_t)sub_1003DB3AC, (uint64_t)&unk_1005DF3B0);
  uint64_t v7 = v4;
LABEL_22:
  swift_errorRelease(v7);
  uint64_t v43 = *(void *)(v0 + 416);
  uint64_t v44 = *(void *)(v0 + 392);
  swift_task_dealloc(*(void *)(v0 + 440));
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003D8728()
{
  uint64_t v1 = *(void *)(v0 + 504);

  swift_release(v1);
  uint64_t v2 = *(void *)(v0 + 536);
  *(void *)(v0 + 288) = v2;
  swift_errorRetain(v2);
  uint64_t v3 = sub_100183098(&qword_100645710);
  if ((swift_dynamicCast(v0 + 232, v0 + 288, v3, &type metadata for SFAuthenticationErrorMessage, 0LL) & 1) != 0)
  {
    swift_errorRelease(v2);
    uint64_t v4 = *(const char **)(v0 + 248);
    sub_1003DA488( *(_DWORD *)(v0 + 232),  *(void *)(v0 + 240),  (uint64_t)v4,  (uint64_t)&unk_1005DF398,  (uint64_t)sub_1003DB3AC,  (uint64_t)&unk_1005DF3B0);
    swift_bridgeObjectRelease(v4);
    uint64_t v5 = *(void *)(v0 + 288);
    goto LABEL_22;
  }

  uint64_t v6 = (id *)(v0 + 328);
  swift_errorRelease(*(void *)(v0 + 288));
  *(void *)(v0 + 272) = v2;
  swift_errorRetain(v2);
  unint64_t v7 = sub_1003DB310();
  if (swift_dynamicCast(v0 + 328, v0 + 272, v3, v7, 0LL))
  {
    swift_errorRelease(v2);
    id v8 = *v6;
    id v9 = [*v6 code];
    id v10 = [v8 domain];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v13 = v12;

    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(SFKAuthenticationErrorDomain);
    uint64_t v16 = v14;
    if (v11 == v15 && v13 == v14)
    {
      swift_bridgeObjectRelease_n(v13, 2LL);
    }

    else
    {
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v15, v14, 0LL);
      *(void *)&double v27 = swift_bridgeObjectRelease(v16).n128_u64[0];
      swift_bridgeObjectRelease(v13, v27);
      if ((v26 & 1) == 0)
      {
        if (qword_1006442E0 != -1) {
          swift_once(&qword_1006442E0, sub_1003D43E4);
        }
        uint64_t v32 = type metadata accessor for Logger(0LL);
        sub_100186DE4(v32, (uint64_t)qword_100652B70);
        id v8 = v8;
        id v33 = (os_log_s *)Logger.logObject.getter(v8);
        os_log_type_t v34 = static os_log_type_t.error.getter(v33);
        if (os_log_type_enabled(v33, v34))
        {
          id v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v36 = swift_slowAlloc(32LL, -1LL);
          uint64_t v44 = v36;
          *(_DWORD *)id v35 = 136315138;
          *(void *)(v0 + 264) = v8;
          id v37 = v8;
          uint64_t v38 = String.init<A>(describing:)(v0 + 264, v7);
          uint64_t v40 = (const char *)v39;
          *(void *)(v0 + 336) = sub_10018CDB4(v38, v39, &v44);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v35 + 4, v35 + 12);
          swift_bridgeObjectRelease(v40);

          _os_log_impl((void *)&_mh_execute_header, v33, v34, "Unexpected error: %s", v35, 0xCu);
          swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v36, -1LL, -1LL);
          swift_slowDealloc(v35, -1LL, -1LL);
        }

        else
        {
        }

        sub_1003DA488( 10,  0LL,  0xE000000000000000LL,  (uint64_t)&unk_1005DF398,  (uint64_t)sub_1003DB3AC,  (uint64_t)&unk_1005DF3B0);
        goto LABEL_21;
      }
    }

    id v28 = (id)SFAuthenticationErrorToString(v9);
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    uint64_t v31 = v30;

    sub_1003DA488((int)v9, v29, (uint64_t)v31, (uint64_t)&unk_1005DF398, (uint64_t)sub_1003DB3AC, (uint64_t)&unk_1005DF3B0);
    swift_bridgeObjectRelease(v31);
LABEL_21:

    uint64_t v5 = *(void *)(v0 + 272);
    goto LABEL_22;
  }

  swift_errorRelease(*(void *)(v0 + 272));
  if (qword_1006442E0 != -1) {
    swift_once(&qword_1006442E0, sub_1003D43E4);
  }
  uint64_t v17 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v17, (uint64_t)qword_100652B70);
  swift_errorRetain(v2);
  uint64_t v18 = swift_errorRetain(v2);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.error.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v22 = swift_slowAlloc(32LL, -1LL);
    uint64_t v44 = v22;
    *(_DWORD *)uint64_t v21 = 136315138;
    *(void *)(v0 + 280) = v2;
    swift_errorRetain(v2);
    uint64_t v23 = String.init<A>(describing:)(v0 + 280, v3);
    uint64_t v25 = (const char *)v24;
    *(void *)(v0 + 256) = sub_10018CDB4(v23, v24, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease(v25);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Unexpected error: %s", v21, 0xCu);
    swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }

  sub_1003DA488(10, 0LL, 0xE000000000000000LL, (uint64_t)&unk_1005DF398, (uint64_t)sub_1003DB3AC, (uint64_t)&unk_1005DF3B0);
  uint64_t v5 = v2;
LABEL_22:
  swift_errorRelease(v5);
  uint64_t v41 = *(void *)(v0 + 416);
  uint64_t v42 = *(void *)(v0 + 392);
  swift_task_dealloc(*(void *)(v0 + 440));
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003D8CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1006442E0 != -1) {
    swift_once(&qword_1006442E0, sub_1003D43E4);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = sub_100186DE4(v8, (uint64_t)qword_100652B70);
  id v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    id v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Sending authentication pairing response", v12, 2u);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  uint64_t v13 = a1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate;
  swift_beginAccess(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate, v20, 0LL, 0LL);
  sub_1001915A4(v13, (uint64_t)&v21, &qword_100650630);
  if (v22)
  {
    sub_1001CE0D0(&v21, (uint64_t)v23);
    sub_10019A708(v23, v23[3]);
    if (*(_BYTE *)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_requestArmingUI) == 1) {
      char v14 = *(_BYTE *)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_armingUITransportType);
    }
    else {
      char v14 = sub_10034E9D8(*(void *)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type));
    }
    sub_1004777F4(a2, a3, a4, 4LL, v14);
    sub_10018709C(v23);
  }

  else
  {
    uint64_t v15 = sub_100187100((uint64_t)&v21, &qword_100650630);
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Warning: No delegate to send response to", v18, 2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }
  }

  return sub_10034E05C(0LL, 1);
}

void sub_1003D8F1C(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v122 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unint64_t v7 = *(void **)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_queue];
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    if (qword_1006442E0 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_1006442E0, sub_1003D43E4);
LABEL_3:
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = sub_100186DE4(v9, (uint64_t)qword_100652B70);
  id v11 = a1;
  id v12 = v1;
  id v13 = v11;
  char v14 = v12;
  uint64_t v136 = v10;
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc(22LL, -1LL);
    uint64_t v18 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v135 = swift_slowAlloc(32LL, -1LL);
    v145[0] = v135;
    *(_DWORD *)uint64_t v17 = 138412546;
    uint64_t v141 = (uint64_t)v13;
    id v19 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, v142, v17 + 4, v17 + 12);
    *uint64_t v18 = v13;

    *(_WORD *)(v17 + 12) = 2080;
    uint64_t v21 = UUID.uuidString.getter(v20);
    uint64_t v23 = (const char *)v22;
    uint64_t v141 = sub_10018CDB4(v21, v22, v145);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, v142, v17 + 14, v17 + 22);

    swift_bridgeObjectRelease(v23);
    _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "Received authentication pairing create secret: %@ for sessionID %s",  (uint8_t *)v17,  0x16u);
    uint64_t v24 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v18, 1LL, v24);
    swift_slowDealloc(v18, -1LL, -1LL);
    uint64_t v25 = v135;
    swift_arrayDestroy(v135, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  else
  {
  }

  sub_10034E730();
  uint64_t v26 = (uint64_t)&v14[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice];
  swift_beginAccess(&v14[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice], v140, 0LL, 0LL);
  sub_1001915A4(v26, (uint64_t)&v141, &qword_100654080);
  sub_1001915A4((uint64_t)&v141, (uint64_t)&v138, &qword_100654080);
  if (v139)
  {
    sub_1001CE0D0(&v138, (uint64_t)v145);
    sub_100187100((uint64_t)&v141, &qword_100654080);
    id v27 = [v13 token];
    if (v27)
    {
      id v28 = v27;
      uint64_t v29 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v27);
      uint64_t v31 = v30;

      uint64_t v32 = *(void *)&v14[OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_aksPairingSession];
      swift_retain();
      id v42 = sub_1004488A0(v29, v31);
      swift_release(v32);
      id v43 = [objc_allocWithZone((Class)SDAuthenticationPairingCreateRecord) init];
      if (v43)
      {
        uint64_t v44 = v43;
        uint64_t v45 = 0xD000000000000015LL;
        uint64_t v133 = &v14[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_sessionID];
        UUID.uuidString.getter(v43);
        uint64_t v47 = v46;
        NSString v48 = String._bridgeToObjectiveC()();
        objc_msgSend(v44, "setSessionID:", v48, swift_bridgeObjectRelease(v47).n128_f64[0]);

        [v44 setToken:v42];
        uint64_t v49 = OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_requestArmingUI;
        [v44 setRequestArmingUI:v14[OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_requestArmingUI]];
        id v50 = [v44 data];
        if (v50)
        {
          char v51 = v50;
          id v132 = v42;
          uint64_t v134 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v50);
          unint64_t v53 = v52;

          id v54 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
          NSString v55 = String._bridgeToObjectiveC()();
          uint64_t v135 = (uint64_t)v14;
          unint64_t v56 = v55;
          unsigned __int8 v57 = [v54 BOOLForKey:v55];

          uint64_t v58 = v135 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate;
          swift_beginAccess(v135 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate, v137, 0LL, 0LL);
          sub_1001915A4(v58, (uint64_t)&v138, &qword_100650630);
          if (v139)
          {
            unint64_t v131 = v53;
            uint64_t v59 = sub_1001CE0D0(&v138, (uint64_t)&v141);
            if ((v57 & 1) != 0)
            {
              uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
              os_log_type_t v61 = static os_log_type_t.error.getter(v60);
              if (os_log_type_enabled(v60, v61))
              {
                uint64_t v62 = v58;
                unint64_t v63 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                *(_WORD *)unint64_t v63 = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v60,  v61,  "### TESTING ONLY: Skip sending authentication pairing create record due to default skipSendAuthenticat ionPairingCreateRecord",  v63,  2u);
                uint64_t v64 = v63;
                uint64_t v58 = v62;
                swift_slowDealloc(v64, -1LL, -1LL);
              }
            }

            else
            {
              sub_10019A708(&v141, v143);
              if (*(_BYTE *)(v135 + v49) == 1) {
                char v75 = *(_BYTE *)(v135
              }
                               + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_armingUITransportType);
              else {
                char v75 = sub_10034E9D8(*(void *)(v135 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type));
              }
              sub_1004777F4(v134, v131, (uint64_t)v145, 5LL, v75);
            }

            uint64_t v76 = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type;
            uint64_t v77 = (char *)v135;
            if (*(void *)(v135 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type) == 5LL) {
              sub_10034E05C(0LL, 1);
            }
            sub_10018709C(&v141);
            uint64_t v78 = *(void *)&v77[v76];
            if (v78 != 3)
            {
LABEL_54:
              if (v78 == 5)
              {
                sub_10018709C(v145);

                sub_100189B20(v134, v131);
                sub_100189B20(v29, (unint64_t)v31);
              }

              else
              {
                sub_1001915A4(v58, (uint64_t)&v141, &qword_100650630);
                if (v143)
                {
                  sub_10019A6C4((uint64_t)&v141, (uint64_t)&v138);
                  sub_100187100((uint64_t)&v141, &qword_100650630);
                  unint64_t v120 = (char *)*sub_10019A708(&v138, v139);
                  uint64_t v121 = v77;
                  sub_10033C858(v121, v120);
                  sub_100189B20(v134, v131);
                  sub_100189B20(v29, (unint64_t)v31);

                  sub_10018709C(v145);
                  sub_10018709C(&v138);
                }

                else
                {
                  sub_10018709C(v145);

                  sub_100189B20(v134, v131);
                  sub_100189B20(v29, (unint64_t)v31);
                  sub_100187100((uint64_t)&v141, &qword_100650630);
                }
              }

              return;
            }

            uint64_t v79 = v77;
            id v80 = (os_log_s *)Logger.logObject.getter(v79);
            LODWORD(v129) = static os_log_type_t.info.getter();
            BOOL v81 = os_log_type_enabled(v80, (os_log_type_t)v129);
            uint64_t v130 = v58;
            if (!v81)
            {

LABEL_44:
              uint64_t v99 = (char *)[(id)objc_opt_self(SDAutoUnlockAKSManager) sharedManager];
              if (!v99)
              {
                __break(1u);
                return;
              }

              id v100 = v99;
              UUID.uuidString.getter(v99);
              uint64_t v102 = v101;
              NSString v103 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v102);
              sub_1001915A4(v26, (uint64_t)&v141, &qword_100654080);
              uint64_t v104 = v143;
              if (v143)
              {
                NSString v129 = v103;
                uint64_t v133 = v100;
                uint64_t v105 = v76;
                uint64_t v106 = v144;
                uint64_t v107 = sub_10019A708(&v141, v143);
                os_log_t v128 = (os_log_t)&v122;
                uint64_t v108 = *(void *)(v104 - 8);
                __chkstk_darwin(v107);
                os_log_type_t v110 = (char *)&v122 - ((v109 + 15) & 0xFFFFFFFFFFFFFFF0LL);
                (*(void (**)(char *))(v108 + 16))(v110);
                sub_100187100((uint64_t)&v141, &qword_100654080);
                (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v104, v106);
                uint64_t v112 = v111;
                (*(void (**)(char *, uint64_t))(v108 + 8))(v110, v104);
                if (v112)
                {
                  NSString v113 = String._bridgeToObjectiveC()();
                  swift_bridgeObjectRelease(v112);
                }

                else
                {
                  NSString v113 = 0LL;
                }

                uint64_t v77 = (char *)v135;
                uint64_t v58 = v130;
                uint64_t v76 = v105;
                id v100 = v133;
                NSString v103 = v129;
              }

              else
              {
                sub_100187100((uint64_t)&v141, &qword_100654080);
                NSString v113 = 0LL;
                uint64_t v58 = v130;
              }

              [v100 setPairingID:v103 forWatchID:v113];

              uint64_t v115 = (os_log_s *)Logger.logObject.getter(v114);
              os_log_type_t v116 = static os_log_type_t.default.getter(v115);
              if (os_log_type_enabled(v115, v116))
              {
                uint64_t v117 = v58;
                uint64_t v118 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
                *(_WORD *)uint64_t v118 = 0;
                _os_log_impl((void *)&_mh_execute_header, v115, v116, "Pairing enabled", v118, 2u);
                uint64_t v119 = v118;
                uint64_t v58 = v117;
                swift_slowDealloc(v119, -1LL, -1LL);
              }

              uint64_t v78 = *(void *)&v77[v76];
              goto LABEL_54;
            }

            os_log_t v128 = v80;
            uint64_t v126 = v76;
            uint64_t v82 = swift_slowAlloc(22LL, -1LL);
            uint64_t v83 = swift_slowAlloc(64LL, -1LL);
            uint64_t v127 = v83;
            *(void *)&__int128 v138 = v83;
            *(_DWORD *)uint64_t v82 = 136315394;
            uint64_t v84 = UUID.uuidString.getter(v83);
            uint64_t v86 = (const char *)v85;
            uint64_t v141 = sub_10018CDB4(v84, v85, (uint64_t *)&v138);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, v142, v82 + 4, v82 + 12);

            swift_bridgeObjectRelease(v86);
            *(_WORD *)(v82 + 12) = 2080;
            sub_1001915A4(v26, (uint64_t)&v141, &qword_100654080);
            uint64_t v87 = v143;
            if (v143)
            {
              uint64_t v88 = v144;
              uint64_t v89 = sub_10019A708(&v141, v143);
              uint64_t v124 = &v122;
              uint64_t v90 = *(void *)(v87 - 8);
              __chkstk_darwin(v89);
              uint64_t v125 = v79;
              uint64_t v92 = v82;
              uint64_t v93 = (char *)&v122 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0LL);
              (*(void (**)(char *))(v90 + 16))(v93);
              sub_100187100((uint64_t)&v141, &qword_100654080);
              uint64_t v123 = (*(uint64_t (**)(uint64_t, uint64_t))(v88 + 8))(v87, v88);
              uint64_t v95 = v94;
              uint64_t v96 = v93;
              uint64_t v82 = v92;
              uint64_t v79 = v125;
              (*(void (**)(char *, uint64_t))(v90 + 8))(v96, v87);
              if (v95)
              {
                uint64_t v45 = v123;
LABEL_43:
                uint64_t v76 = v126;
                uint64_t v141 = sub_10018CDB4(v45, (unint64_t)v95, (uint64_t *)&v138);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, v142, v82 + 14, v82 + 22);

                swift_bridgeObjectRelease(v95);
                os_log_t v97 = v128;
                _os_log_impl( (void *)&_mh_execute_header,  v128,  (os_log_type_t)v129,  "Setting pairing ID: %s for device: %s",  (uint8_t *)v82,  0x16u);
                uint64_t v98 = v127;
                swift_arrayDestroy(v127, 2LL, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v98, -1LL, -1LL);
                swift_slowDealloc(v82, -1LL, -1LL);

                uint64_t v77 = (char *)v135;
                goto LABEL_44;
              }
            }

            else
            {
              sub_100187100((uint64_t)&v141, &qword_100654080);
            }

            uint64_t v141 = 0LL;
            v142[0] = (const char *)0xE000000000000000LL;
            _StringGuts.grow(_:)(17LL);
            swift_bridgeObjectRelease(v142[0]);
            uint64_t v95 = (const char *)0x80000001005046B0LL;
            goto LABEL_43;
          }

          sub_100187100((uint64_t)&v138, &qword_100650630);
          uint64_t v141 = 0LL;
          v142[0] = (const char *)0xE000000000000000LL;
          _StringGuts.grow(_:)(61LL);
          v69._uint64_t countAndFlagsBits = 0xD00000000000003BLL;
          v69._object = (void *)0x800000010050E000LL;
          String.append(_:)(v69);
          v70._uint64_t countAndFlagsBits = 0x5F28656C646E6168LL;
          v70._object = (void *)0xEA0000000000293ALL;
          String.append(_:)(v70);
          uint64_t v71 = v141;
          os_log_type_t v72 = v142[0];
          unint64_t v73 = sub_100187014();
          uint64_t v34 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v73, 0LL, 0LL);
          *(_DWORD *)uint64_t v74 = 25;
          *(void *)(v74 + 8) = v71;
          *(void *)(v74 + swift_unknownObjectWeakDestroy(v0 + 16) = v72;
          swift_willThrow(v34);
          sub_100189B20(v134, v53);
          sub_100189B20(v29, (unint64_t)v31);
        }

        else
        {
          unint64_t v67 = sub_100187014();
          uint64_t v34 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v67, 0LL, 0LL);
          *(_DWORD *)uint64_t v68 = 10;
          *(void *)(v68 + 8) = 0xD000000000000020LL;
          *(void *)(v68 + swift_unknownObjectWeakDestroy(v0 + 16) = 0x8000000100506C70LL;
          swift_willThrow(v34);
          sub_100189B20(v29, (unint64_t)v31);
        }
      }

      else
      {
        unint64_t v65 = sub_100187014();
        uint64_t v34 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v65, 0LL, 0LL);
        *(_DWORD *)uint64_t v66 = 10;
        *(void *)(v66 + 8) = 0xD00000000000003ELL;
        *(void *)(v66 + swift_unknownObjectWeakDestroy(v0 + 16) = 0x800000010050DFC0LL;
        swift_willThrow(v34);
        sub_100189B20(v29, (unint64_t)v31);
      }
    }

    else
    {
      unint64_t v36 = sub_100187014();
      uint64_t v34 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v36, 0LL, 0LL);
      *(_DWORD *)uint64_t v37 = 10;
      strcpy((char *)(v37 + 8), "Missing token");
      *(_WORD *)(v37 + 22) = -4864;
      swift_willThrow(v34);
    }

    sub_10018709C(v145);
  }

  else
  {
    sub_100187100((uint64_t)&v138, &qword_100654080);
    unint64_t v33 = sub_100187014();
    uint64_t v34 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v33, 0LL, 0LL);
    *(_DWORD *)uint64_t v35 = 10;
    *(void *)(v35 + 8) = 0xD00000000000001BLL;
    *(void *)(v35 + swift_unknownObjectWeakDestroy(v0 + 16) = 0x800000010050DFA0LL;
    swift_willThrow(v34);
    sub_100187100((uint64_t)&v141, &qword_100654080);
  }

  uint64_t v141 = v34;
  swift_errorRetain(v34);
  uint64_t v38 = sub_100183098(&qword_100645710);
  if (swift_dynamicCast(v145, &v141, v38, &type metadata for SFAuthenticationErrorMessage, 6LL))
  {
    unint64_t v39 = v146;
    sub_1003DA488( v145[0],  v145[1],  (uint64_t)v146,  (uint64_t)&unk_1005DF398,  (uint64_t)sub_1003DB3AC,  (uint64_t)&unk_1005DF3B0);
    swift_errorRelease(v34);
    swift_bridgeObjectRelease(v39);
  }

  else
  {
    v145[0] = v34;
    swift_errorRetain(v34);
    type metadata accessor for SFAuthenticationError(0LL);
    else {
      int v41 = 25;
    }
    sub_1003DA488( v41,  0LL,  0xE000000000000000LL,  (uint64_t)&unk_1005DF398,  (uint64_t)sub_1003DB3AC,  (uint64_t)&unk_1005DF3B0);
    swift_errorRelease(v34);
  }

void sub_1003D9F60(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unint64_t v7 = *(void **)&v1[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_queue];
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    if (qword_1006442E0 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_1006442E0, sub_1003D43E4);
LABEL_3:
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = sub_100186DE4(v9, (uint64_t)qword_100652B70);
  id v11 = a1;
  id v12 = v1;
  id v13 = v11;
  char v14 = v12;
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc(22LL, -1LL);
    uint64_t v18 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v47 = swift_slowAlloc(32LL, -1LL);
    uint64_t v49 = v47;
    *(_DWORD *)uint64_t v17 = 138412546;
    uint64_t v52 = (uint64_t)v13;
    id v19 = v13;
    uint64_t v48 = v10;
    id v20 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v17 + 4, v17 + 12);
    *uint64_t v18 = v13;

    *(_WORD *)(v17 + 12) = 2080;
    uint64_t v22 = UUID.uuidString.getter(v21);
    uint64_t v24 = (const char *)v23;
    uint64_t v52 = sub_10018CDB4(v22, v23, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v17 + 14, v17 + 22);

    swift_bridgeObjectRelease(v24);
    _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "Received authentication pairing response: %@ for sessionID %s",  (uint8_t *)v17,  0x16u);
    uint64_t v25 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v18, 1LL, v25);
    swift_slowDealloc(v18, -1LL, -1LL);
    uint64_t v26 = v47;
    swift_arrayDestroy(v47, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  else
  {
  }

  id v27 = [v13 hasErrorCode];
  if ((v27 & 1) != 0)
  {
    id v28 = [v13 errorCode];
    uint64_t v49 = 0LL;
    id v50 = (const char *)0xE000000000000000LL;
    _StringGuts.grow(_:)(32LL);
    swift_bridgeObjectRelease(v50);
    uint64_t v49 = 0xD00000000000001ELL;
    id v50 = (const char *)0x8000000100506D60LL;
    id v29 = (id)SFAuthenticationErrorToString(v28);
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    uint64_t v32 = v31;

    v33._uint64_t countAndFlagsBits = v30;
    v33._object = v32;
    String.append(_:)(v33);
    swift_bridgeObjectRelease((const char *)v32);
    uint64_t v34 = v49;
    uint64_t v35 = v50;
    unint64_t v36 = sub_100187014();
    uint64_t v37 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v36, 0LL, 0LL);
    *(_DWORD *)uint64_t v38 = (_DWORD)v28;
    *(void *)(v38 + 8) = v34;
    *(void *)(v38 + swift_unknownObjectWeakDestroy(v0 + 16) = v35;
    swift_willThrow(v37);
    uint64_t v52 = v37;
    swift_errorRetain(v37);
    swift_errorRetain(v37);
    uint64_t v39 = sub_100183098(&qword_100645710);
    if (swift_dynamicCast(&v49, &v52, v39, &type metadata for SFAuthenticationErrorMessage, 6LL))
    {
      uint64_t v40 = v51;
      sub_1003DA488( v49,  (uint64_t)v50,  (uint64_t)v51,  (uint64_t)&unk_1005DF3E8,  (uint64_t)sub_1003DB408,  (uint64_t)&unk_1005DF400);
      swift_errorRelease(v37);
      swift_bridgeObjectRelease(v40);
    }

    else
    {
      uint64_t v49 = v37;
      swift_errorRetain(v37);
      type metadata accessor for SFAuthenticationError(0LL);
      else {
        int v45 = 25;
      }
      sub_1003DA488( v45,  0LL,  0xE000000000000000LL,  (uint64_t)&unk_1005DF3E8,  (uint64_t)sub_1003DB408,  (uint64_t)&unk_1005DF400);
      swift_errorRelease(v37);
    }

    swift_errorRelease(v37);
  }

  else
  {
    int v41 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v42 = static os_log_type_t.error.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      id v43 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v43 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "Got message that should include error but didn't include error",  v43,  2u);
      swift_slowDealloc(v43, -1LL, -1LL);
    }
  }

uint64_t sub_1003DA488(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v27 = a6;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v30 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  char v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v15 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = *(void *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_queue];
  uint64_t v18 = swift_allocObject(a4, 48LL, 7LL);
  *(void *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  *(_DWORD *)(v18 + 24) = a1;
  *(void *)(v18 + 32) = a2;
  *(void *)(v18 + 40) = a3;
  aBlock[4] = a5;
  uint64_t v33 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001B9FE4;
  aBlock[3] = v27;
  id v19 = _Block_copy(aBlock);
  id v20 = v6;
  uint64_t v21 = swift_bridgeObjectRetain(a3);
  static DispatchQoS.unspecified.getter(v21);
  uint64_t v31 = _swiftEmptyArrayStorage;
  uint64_t v22 = sub_100183F14( (unint64_t *)&qword_100646510,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v23 = sub_100183098((uint64_t *)&unk_1006460D0);
  unint64_t v24 = sub_1001D228C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v23, v24, v12, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v17, v14, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v29);
  return swift_release(v33);
}

void sub_1003DA67C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v8 = [objc_allocWithZone((Class)SDAuthenticationPairingResponse) init];
  uint64_t v9 = v8;
  uint64_t v10 = &qword_100644000;
  if (v8)
  {
    [v8 setVersion:1];
    id v11 = a2;
    id v12 = v9;
    UUID.uuidString.getter(v12);
    uint64_t v14 = v13;
    NSString v15 = String._bridgeToObjectiveC()();
    objc_msgSend(v12, "setSessionID:", v15, swift_bridgeObjectRelease(v14).n128_f64[0]);

    [v12 setErrorCode:a1];
    uint64_t v16 = v12;
    a2 = v11;
    id v17 = [v16 data];
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v19 = a1;
      uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v17);
      unint64_t v22 = v21;

      uint64_t v23 = (uint64_t)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice];
      swift_beginAccess(&v4[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice], v53, 0LL, 0LL);
      sub_1001915A4(v23, (uint64_t)&v54, &qword_100654080);
      if (v55)
      {
        sub_1001CE0D0(&v54, (uint64_t)&v56);
        uint64_t v24 = (uint64_t)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate];
        swift_beginAccess(&v4[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate], v52, 0LL, 0LL);
        sub_1001915A4(v24, (uint64_t)&v54, &qword_100650630);
        if (v55)
        {
          sub_10019A6C4((uint64_t)&v54, (uint64_t)v51);
          sub_100187100((uint64_t)&v54, &qword_100650630);
          sub_10019A708(v51, v51[3]);
          if (v4[OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_requestArmingUI] == 1) {
            char v25 = v4[OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_armingUITransportType];
          }
          else {
            char v25 = sub_10034E9D8(*(void *)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type]);
          }
          sub_1004777F4(v20, v22, (uint64_t)&v56, 4LL, v25);
          sub_100189B20(v20, v22);
          sub_10018709C(&v56);
          sub_10018709C(v51);
        }

        else
        {
          sub_10018709C(&v56);
          sub_100189B20(v20, v22);
          sub_100187100((uint64_t)&v54, &qword_100650630);
        }

        a1 = v19;
        goto LABEL_20;
      }

      sub_100189B20(v20, v22);
      sub_100187100((uint64_t)&v54, &qword_100654080);
      a1 = v19;
    }
  }

  id v50 = a2;
  if (qword_1006442E0 != -1) {
    swift_once(&qword_1006442E0, sub_1003D43E4);
  }
  uint64_t v26 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v26, (uint64_t)qword_100652B70);
  id v27 = v9;
  uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v29 = static os_log_type_t.error.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v49 = a3;
    uint64_t v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v31 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v30 = 138412290;
    if (v9)
    {
      uint64_t v56 = (uint64_t)v27;
      id v32 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v30 + 4, v30 + 12);
      uint64_t v33 = v9;
    }

    else
    {
      uint64_t v56 = 0LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v30 + 4, v30 + 12);
      uint64_t v33 = 0LL;
    }

    *uint64_t v31 = v33;

    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Could not convert response to data: %@", v30, 0xCu);
    uint64_t v34 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v31, 1LL, v34);
    swift_slowDealloc(v31, -1LL, -1LL);
    swift_slowDealloc(v30, -1LL, -1LL);

    a3 = v49;
    a2 = v50;
    a1 = a1;
    uint64_t v10 = &qword_100644000;
  }

  else
  {

    uint64_t v10 = &qword_100644000;
  }

uint64_t sub_1003DAD18()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = *(void **)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_queue];
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    if (qword_1006442E0 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_1006442E0, sub_1003D43E4);
LABEL_3:
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v7, (uint64_t)qword_100652B70);
  id v8 = v0;
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.error.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)id v11 = 136315138;
    uint64_t v20 = v12;
    uint64_t v13 = type metadata accessor for UUID(0LL);
    uint64_t v14 = sub_100183F14( (unint64_t *)&qword_1006460B0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(v13, v14);
    id v17 = (const char *)v16;
    uint64_t v19 = sub_10018CDB4(v15, v16, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v11 + 4, v11 + 12);

    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Response timer fired for %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
  }

  sub_1003DA488( 12,  0xD000000000000035LL,  0x800000010050E040LL,  (uint64_t)&unk_1005DF3E8,  (uint64_t)sub_1003DB408,  (uint64_t)&unk_1005DF400);
  return sub_10034E730();
}

uint64_t sub_1003DAFC0(char *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t)&a1[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate];
  swift_beginAccess(&a1[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate], v13, 0LL, 0LL);
  sub_1001915A4(v8, (uint64_t)v14, &qword_100650630);
  if (!v15) {
    return sub_100187100((uint64_t)v14, &qword_100650630);
  }
  sub_10019A6C4((uint64_t)v14, (uint64_t)v12);
  sub_100187100((uint64_t)v14, &qword_100650630);
  uint64_t v9 = *sub_10019A708(v12, v12[3]);
  os_log_type_t v10 = a1;
  sub_1002D8E70(v10, a2, a3, a4, v9);

  return sub_10018709C(v12);
}

uint64_t sub_1003DB0A8()
{
  return swift_release(*(void *)(v0
                                 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_aksPairingSession));
}

uint64_t sub_1003DB0C8()
{
  return type metadata accessor for SDAuthenticationPairingKeySession(0LL);
}

uint64_t type metadata accessor for SDAuthenticationPairingKeySession(uint64_t a1)
{
  uint64_t result = qword_100652BC0;
  if (!qword_100652BC0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SDAuthenticationPairingKeySession);
  }
  return result;
}

uint64_t sub_1003DB10C(uint64_t a1)
{
  v2[0] = &unk_1004D9C98;
  v2[1] = &unk_1004D9CB0;
  v2[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_updateClassMetadata2(a1, 256LL, 3LL, v2, a1 + 264);
}

uint64_t sub_1003DB164()
{
  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_requestArmingUI);
}

uint64_t sub_1003DB178(uint64_t result)
{
  *(_BYTE *)(*v1 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_requestArmingUI) = result;
  return result;
}

uint64_t sub_1003DB18C()
{
  uint64_t v1 = type metadata accessor for AuthenticationSecurityRequest(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));

  unint64_t v6 = v0 + *(int *)(v1 + 20) + v3;
  uint64_t v7 = type metadata accessor for Date(0LL);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);

  sub_10018709C((void *)(v0 + v5));
  return swift_deallocObject(v0, v5 + 40);
}

uint64_t sub_1003DB24C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for AuthenticationSecurityRequest(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = (uint64_t)v1 + v5;
  uint64_t v11 = *(void *)((char *)v1 + v6);
  uint64_t v12 = (uint64_t)v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v13 = (void *)swift_task_alloc(dword_100652BD4);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = sub_1001943E8;
  return sub_1003D4A84(a1, v7, v8, v9, v10, v11, v12);
}

unint64_t sub_1003DB310()
{
  unint64_t result = qword_1006454B0;
  if (!qword_1006454B0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSError);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, &qword_1006454B0);
  }

  return result;
}

uint64_t sub_1003DB34C()
{
  sub_100189B20(*(void *)(v0 + 24), *(void *)(v0 + 32));
  sub_10018709C((void *)(v0 + 40));
  return swift_deallocObject(v0, 80LL);
}

uint64_t sub_1003DB380()
{
  return sub_1003D8CE0(v0[2], v0[3], v0[4], (uint64_t)(v0 + 5));
}

uint64_t sub_1003DB390(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1003DB3A0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_1003DB3AC()
{
}

uint64_t sub_1003DB3DC()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1003DB408()
{
  return sub_1003DAFC0(*(char **)(v0 + 16), *(unsigned int *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40));
}

char *sub_1003DB418(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = a4;
  uint64_t v35 = a1;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v33 - v12;
  v4[OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_requestArmingUI] = 0;
  v4[OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_armingUITransportType] = 3;
  uint64_t v36 = (void *)a3;
  sub_10019A6C4(a3, (uint64_t)v39);
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v15 = a2;
  v14(v13, (uint64_t)a2, v7);
  uint64_t v16 = type metadata accessor for SDAuthenticationAKSPairingSession(0LL);
  uint64_t v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  *(void *)(v17 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationAKSPairingSession_aksSession) = 0LL;
  uint64_t v18 = (void *)objc_opt_self(&OBJC_CLASS___SDAutoUnlockAKSManager);
  uint64_t v19 = v4;
  unint64_t result = (char *)[v18 sharedManager];
  if (result)
  {
    *(void *)(v17 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationAKSPairingSession_aksManager) = result;
    *(_BYTE *)(v17 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationAKSPairingSession_role) = 1;
    sub_1001CE0D0(v39, v17 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationAKSPairingSession_peerDevice);
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))( v17 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationAKSPairingSession_sessionID,  v13,  v7);
    uint64_t v21 = v34;
    *(void *)(v17 + OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationAKSPairingSession_type) = v34;
    *(void *)&v19[OBJC_IVAR____TtC16DaemoniOSLibrary33SDAuthenticationPairingKeySession_aksPairingSession] = v17;

    unint64_t v22 = v15;
    v14(v11, (uint64_t)v15, v7);
    uint64_t v23 = &v19[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate];
    *(_OWORD *)uint64_t v23 = 0u;
    *((_OWORD *)v23 + 1) = 0u;
    *((void *)v23 + 4) = 0LL;
    uint64_t v24 = &v19[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice];
    *(_OWORD *)uint64_t v24 = 0u;
    *((_OWORD *)v24 + 1) = 0u;
    *((void *)v24 + 4) = 0LL;
    *(void *)&v19[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_responseTimer] = 0LL;
    char v25 = v35;
    *(void *)&v19[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_queue] = v35;
    v14(&v19[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_sessionID], (uint64_t)v11, v7);
    *(void *)&v19[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type] = v21;
    uint64_t v26 = (objc_class *)type metadata accessor for SDAuthenticationSession(0LL);
    v38.receiver = v19;
    v38.super_class = v26;
    id v27 = v25;
    uint64_t v28 = (char *)objc_msgSendSuper2(&v38, "init");
    os_log_type_t v29 = *(void (**)(char *, uint64_t))(v8 + 8);
    v29(v11, v7);
    uint64_t v30 = v36;
    sub_10019A6C4((uint64_t)v36, (uint64_t)v39);
    uint64_t v31 = (uint64_t)&v28[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice];
    swift_beginAccess(&v28[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice], v37, 33LL, 0LL);
    id v32 = v28;
    sub_10023FA98((uint64_t)v39, v31);
    swift_endAccess(v37);

    sub_10018709C(v30);
    v29(v22, v7);
    return v32;
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_1003DB70C()
{
  if (qword_1006442E0 != -1) {
    swift_once(&qword_1006442E0, sub_1003D43E4);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_100652B70);
  unint64_t v3 = v0;
  uint64_t v4 = (void *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled((os_log_t)v4, v5))
  {

    goto LABEL_11;
  }

  v46[1] = v2;
  uint64_t v6 = swift_slowAlloc(22LL, -1LL);
  uint64_t v7 = swift_slowAlloc(64LL, -1LL);
  v48[0] = v7;
  *(_DWORD *)uint64_t v6 = 136315394;
  uint64_t v8 = UUID.uuidString.getter(v7);
  uint64_t v10 = (const char *)v9;
  uint64_t v51 = sub_10018CDB4(v8, v9, v48);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v6 + 4, v6 + 12);

  swift_bridgeObjectRelease(v10);
  *(_WORD *)(v6 + 12) = 2080;
  uint64_t v11 = (uint64_t)&v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice];
  swift_beginAccess(&v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice], v47, 0LL, 0LL);
  sub_1001915A4(v11, (uint64_t)&v51, &qword_100654080);
  uint64_t v12 = v53;
  if (!v53)
  {
    sub_100187100((uint64_t)&v51, &qword_100654080);
LABEL_9:
    uint64_t v51 = 0LL;
    v52[0] = (const char *)0xE000000000000000LL;
    _StringGuts.grow(_:)(17LL);
    swift_bridgeObjectRelease(v52[0]);
    uint64_t v21 = (const char *)0x80000001005046B0LL;
    uint64_t v19 = 0xD000000000000015LL;
    goto LABEL_10;
  }

  uint64_t v13 = v54;
  uint64_t v14 = sub_10019A708(&v51, v53);
  v46[0] = v46;
  uint64_t v15 = v7;
  uint64_t v16 = *(void *)(v12 - 8);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v16 + 16))(v18);
  sub_100187100((uint64_t)&v51, &qword_100654080);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  uint64_t v21 = v20;
  unint64_t v22 = *(void (**)(char *, uint64_t))(v16 + 8);
  uint64_t v7 = v15;
  v22(v18, v12);
  if (!v21) {
    goto LABEL_9;
  }
LABEL_10:
  uint64_t v51 = sub_10018CDB4(v19, (unint64_t)v21, v48);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v6 + 14, v6 + 22);

  swift_bridgeObjectRelease(v21);
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v4,  v5,  "Setting pairing ID: %s for device: %s",  (uint8_t *)v6,  0x16u);
  swift_arrayDestroy(v7, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v7, -1LL, -1LL);
  swift_slowDealloc(v6, -1LL, -1LL);

LABEL_11:
  id result = [(id)objc_opt_self(SDAutoUnlockAKSManager) sharedManager];
  if (!result)
  {
    __break(1u);
    return result;
  }

  uint64_t v24 = result;
  UUID.uuidString.getter(result);
  uint64_t v26 = v25;
  NSString v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v26);
  uint64_t v28 = (uint64_t)&v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice];
  swift_beginAccess(&v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_peerDevice], v50, 0LL, 0LL);
  sub_1001915A4(v28, (uint64_t)&v51, &qword_100654080);
  uint64_t v29 = v53;
  if (!v53)
  {
    sub_100187100((uint64_t)&v51, &qword_100654080);
    goto LABEL_16;
  }

  uint64_t v30 = v54;
  uint64_t v31 = sub_10019A708(&v51, v53);
  uint64_t v32 = *(void *)(v29 - 8);
  __chkstk_darwin(v31);
  uint64_t v34 = (char *)v46 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v32 + 16))(v34);
  sub_100187100((uint64_t)&v51, &qword_100654080);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v30);
  uint64_t v36 = v35;
  (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v29);
  if (!v36)
  {
LABEL_16:
    NSString v38 = 0LL;
    goto LABEL_17;
  }

  NSString v38 = String._bridgeToObjectiveC()();
  *(void *)&double v37 = swift_bridgeObjectRelease(v36).n128_u64[0];
LABEL_17:
  objc_msgSend(v24, "setPairingID:forWatchID:", v27, v38, v37);

  uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
  os_log_type_t v41 = static os_log_type_t.default.getter(v40);
  if (os_log_type_enabled(v40, v41))
  {
    os_log_type_t v42 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Pairing enabled", v42, 2u);
    swift_slowDealloc(v42, -1LL, -1LL);
  }

  if (*(void *)&v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_type] != 8LL)
  {
    if (qword_100644410 != -1) {
      swift_once(&qword_100644410, sub_10045862C);
    }
    if (qword_100669A30) {
      sub_100458200();
    }
  }

  uint64_t v43 = (uint64_t)&v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate];
  swift_beginAccess(&v3[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAuthenticationSession_delegate], v49, 0LL, 0LL);
  sub_1001915A4(v43, (uint64_t)&v51, &qword_100650630);
  if (!v53) {
    return (id)sub_100187100((uint64_t)&v51, &qword_100650630);
  }
  sub_10019A6C4((uint64_t)&v51, (uint64_t)v48);
  sub_100187100((uint64_t)&v51, &qword_100650630);
  unint64_t v44 = (char *)*sub_10019A708(v48, v48[3]);
  uint64_t v45 = v3;
  sub_10033C858(v45, v44);

  return (id)sub_10018709C(v48);
}

uint64_t sub_1003DBD2C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100186DFC(v0, qword_100652BE0);
  uint64_t v1 = sub_100186DE4(v0, (uint64_t)qword_100652BE0);
  if (qword_100644008 != -1) {
    swift_once(&qword_100644008, sub_10023A4D8);
  }
  uint64_t v2 = sub_100186DE4(v0, (uint64_t)qword_100669688);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t type metadata accessor for SDContactChangeHistoryEvent()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary27SDContactChangeHistoryEvent);
}

uint64_t type metadata accessor for SDContactChangeHistoryDropEverythingEvent()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary41SDContactChangeHistoryDropEverythingEvent);
}

void sub_1003DBDFC()
{
}

uint64_t type metadata accessor for SDContactChangeHistoryAddEvent()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary30SDContactChangeHistoryAddEvent);
}

uint64_t sub_1003DBE24()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + 24));
}

uint64_t type metadata accessor for SDContactChangeHistoryDeleteEvent()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary33SDContactChangeHistoryDeleteEvent);
}

uint64_t type metadata accessor for SDContactChangeHistoryUpdateEvent()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary33SDContactChangeHistoryUpdateEvent);
}

uint64_t sub_1003DBE6C(uint64_t a1, unint64_t a2)
{
  id v4 = [objc_allocWithZone(CNChangeHistoryFetchRequest) init];
  if (a2 >> 60 == 15) {
    Class isa = 0LL;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  [v4 setStartingToken:isa];

  [v4 setShouldUnifyResults:1];
  [v4 setIncludeGroupChanges:0];
  if (qword_100644258 != -1) {
    swift_once(&qword_100644258, sub_10038D5AC);
  }
  sub_100183098(&qword_10064B7C0);
  Class v6 = Array._bridgeToObjectiveC()().super.isa;
  [v4 setAdditionalContactKeyDescriptors:v6];

  uint64_t v7 = sub_1003DC4D0((uint64_t)v4);
  if (v2) {
    return v8;
  }
  else {
    return v7;
  }
}

uint64_t sub_1003DBFB8(uint64_t a1, const char *a2)
{
  if (qword_100644260 != -1) {
    swift_once(&qword_100644260, sub_10038D610);
  }
  os_log_type_t v5 = (const char *)qword_1006698A0;
  id v6 = objc_allocWithZone(&OBJC_CLASS___CNContactFetchRequest);
  swift_bridgeObjectRetain(v5);
  sub_100183098(&qword_10064B7C0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v8 = objc_msgSend(v6, "initWithKeysToFetch:", isa, swift_bridgeObjectRelease(v5).n128_f64[0]);

  unint64_t v9 = (void *)objc_opt_self(&OBJC_CLASS___CNContact);
  uint64_t v10 = sub_100183098(&qword_100645398);
  uint64_t v11 = swift_allocObject(v10, 48LL, 7LL);
  *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1004CDCA0;
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  Class v12 = Array._bridgeToObjectiveC()().super.isa;
  id v13 =  objc_msgSend( v9,  "predicateForContactsWithIdentifiers:",  v12,  swift_bridgeObjectRelease((const char *)v11).n128_f64[0]);

  [v8 setPredicate:v13];
  uint64_t v41 = 0LL;
  uint64_t v14 = *(void **)(v2 + 32);
  uint64_t v15 = swift_allocObject(&unk_1005DF488, 24LL, 7LL);
  *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = &v41;
  uint64_t v16 = swift_allocObject(&unk_1005DF4B0, 32LL, 7LL);
  *(void *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1003DCC6C;
  *(void *)(v16 + 24) = v15;
  aBlock[4] = sub_1003D39DC;
  uint64_t v40 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1003DC48C;
  aBlock[3] = &unk_1005DF4C8;
  uint64_t v17 = _Block_copy(aBlock);
  uint64_t v18 = v40;
  swift_retain(v16);
  swift_release(v18);
  aBlock[0] = 0LL;
  unsigned int v19 = [v14 enumerateContactsWithFetchRequest:v8 error:aBlock usingBlock:v17];
  _Block_release(v17);
  id v20 = aBlock[0];
  id v21 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v16, "", 85LL, 88LL, 4LL, 1LL);
  swift_release(v16);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
LABEL_12:
    swift_once(&qword_1006442E8, sub_1003DBD2C);
    goto LABEL_7;
  }

  if (v19)
  {

    goto LABEL_10;
  }

  id v20 = (id)_convertNSErrorToError(_:)(v20);

  swift_willThrow(v23);
  if (qword_1006442E8 != -1) {
    goto LABEL_12;
  }
LABEL_7:
  uint64_t v24 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v24, (uint64_t)qword_100652BE0);
  swift_bridgeObjectRetain(a2);
  swift_errorRetain(v20);
  swift_bridgeObjectRetain(a2);
  uint64_t v25 = swift_errorRetain(v20);
  uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
  os_log_type_t v27 = static os_log_type_t.error.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = swift_slowAlloc(22LL, -1LL);
    uint64_t v29 = (void *)swift_slowAlloc(64LL, -1LL);
    aBlock[0] = v29;
    *(_DWORD *)uint64_t v28 = 136315394;
    swift_bridgeObjectRetain(a2);
    uint64_t v37 = sub_10018CDB4(a1, (unint64_t)a2, (uint64_t *)aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v28 + 4, v28 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v28 + 12) = 2080;
    swift_getErrorValue(v20, v36, v35);
    uint64_t v30 = Error.localizedDescription.getter(v35[1], v35[2]);
    uint64_t v32 = (const char *)v31;
    uint64_t v37 = sub_10018CDB4(v30, v31, (uint64_t *)aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v28 + 14, v28 + 22);
    swift_bridgeObjectRelease(v32);
    swift_errorRelease(v20);
    swift_errorRelease(v20);
    _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "Failed to find contact with contact identifier %s, error: %s",  (uint8_t *)v28,  0x16u);
    swift_arrayDestroy(v29, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v28, -1LL, -1LL);

    swift_errorRelease(v20);
  }

  else
  {

    swift_errorRelease(v20);
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_errorRelease(v20);
    swift_errorRelease(v20);
  }

void sub_1003DC48C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

uint64_t sub_1003DC4D0(uint64_t a1)
{
  id v3 = *(void **)(v1 + 32);
  id v21 = 0LL;
  id v4 = sub_100112E28(a1, v3, &v21);
  os_log_type_t v5 = v4;
  if (v21)
  {
    id v6 = v21;
    swift_willThrow(v6);
  }

  else if (v4)
  {
    uint64_t v7 = -[SDContactFetchResult events](v4, "events");
    unint64_t v8 = sub_1003DC7E4();
    unint64_t v9 = (const char *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v8);

    uint64_t v10 = -[SDContactFetchResult currentHistoryToken](v5, "currentHistoryToken");
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);

    sub_1003DC820((uint64_t)v9);
    uint64_t v2 = v11;

    swift_bridgeObjectRelease(v9);
  }

  else
  {
    if (qword_1006442E8 != -1) {
      swift_once(&qword_1006442E8, sub_1003DBD2C);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    uint64_t v14 = sub_100186DE4(v13, (uint64_t)qword_100652BE0);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "Fetch result should not be nil since no error was reported",  v17,  2u);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    unint64_t v18 = sub_1003DC7A0();
    uint64_t v19 = swift_allocError(&type metadata for Errno, v18, 0LL, 0LL);
    *id v20 = 104;
    swift_willThrow(v19);
  }

  return v2;
}

uint64_t sub_1003DC6E4()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for SDContactStore()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary14SDContactStore);
}

uint64_t sub_1003DC738()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = sub_100116604(v0);

  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

unint64_t sub_1003DC7A0()
{
  unint64_t result = qword_100652FF0;
  if (!qword_100652FF0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Errno, &type metadata for Errno);
    atomic_store(result, (unint64_t *)&qword_100652FF0);
  }

  return result;
}

unint64_t sub_1003DC7E4()
{
  unint64_t result = qword_100652FF8;
  if (!qword_100652FF8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___CNChangeHistoryEvent);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100652FF8);
  }

  return result;
}

void sub_1003DC820(uint64_t a1)
{
  unint64_t v49 = (unint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v46 = a1;
    }
    else {
      uint64_t v46 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain((const char *)a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v46);
    if (v2) {
      goto LABEL_3;
    }
LABEL_34:
    swift_bridgeObjectRelease((const char *)a1, v3);
    return;
  }

  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  *(void *)&double v3 = swift_bridgeObjectRetain((const char *)a1).n128_u64[0];
  if (!v2) {
    goto LABEL_34;
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v4 = 0LL;
    os_log_type_t v5 = &IDSSendMessageOptionForceLocalDeliveryKey_ptr;
    id v6 = &IDSSendMessageOptionForceLocalDeliveryKey_ptr;
    while (1)
    {
      id v7 = (a1 & 0xC000000000000001LL) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1)
         : *(id *)(a1 + 8 * v4 + 32);
      id v8 = v7;
      uint64_t v9 = objc_opt_self(v5[135]);
      if (swift_dynamicCastObjCClass(v8, v9)) {
        break;
      }
      uint64_t v13 = objc_opt_self(v6[133]);
      uint64_t v14 = (void *)swift_dynamicCastObjCClass(v8, v13);
      if (v14)
      {
        id v15 = [v14 contact];
        uint64_t v16 = type metadata accessor for SDContactChangeHistoryAddEvent();
        goto LABEL_15;
      }

      uint64_t v20 = objc_opt_self(&OBJC_CLASS___CNChangeHistoryDeleteContactEvent);
      uint64_t v21 = swift_dynamicCastObjCClass(v8, v20);
      if (v21)
      {
        unint64_t v22 = (void *)v21;
        uint64_t v23 = v6;
        id v24 = v8;
        id v25 = [v22 contactIdentifier];
        uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
        uint64_t v28 = v27;

        uint64_t v29 = type metadata accessor for SDContactChangeHistoryDeleteEvent();
        uint64_t v30 = swift_allocObject(v29, 32LL, 7LL);
        *(void *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = v26;
        *(void *)(v30 + 24) = v28;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v30);
        unint64_t v32 = *(void *)((v49 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v31 = *(void *)((v49 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v32 >= v31 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1LL);
        }
        uint64_t v33 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v30);
        specialized Array._endMutation()(v33);

        id v6 = v23;
        os_log_type_t v5 = &IDSSendMessageOptionForceLocalDeliveryKey_ptr;
        goto LABEL_7;
      }

      uint64_t v34 = objc_opt_self(&OBJC_CLASS___CNChangeHistoryUpdateContactEvent);
      uint64_t v35 = (void *)swift_dynamicCastObjCClass(v8, v34);
      if (v35)
      {
        id v15 = [v35 contact];
        uint64_t v16 = type metadata accessor for SDContactChangeHistoryUpdateEvent();
LABEL_15:
        uint64_t v11 = swift_allocObject(v16, 24LL, 7LL);
        uint64_t v12 = v11;
        *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
LABEL_16:
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
        unint64_t v18 = *(void *)((v49 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v17 = *(void *)((v49 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v18 >= v17 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1LL);
        }
        uint64_t v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v12);
        specialized Array._endMutation()(v19);
        goto LABEL_6;
      }

      if (qword_1006442E8 != -1) {
        swift_once(&qword_1006442E8, sub_1003DBD2C);
      }
      uint64_t v36 = type metadata accessor for Logger(0LL);
      sub_100186DE4(v36, (uint64_t)qword_100652BE0);
      id v8 = v8;
      uint64_t v37 = (os_log_s *)Logger.logObject.getter(v8);
      os_log_type_t v38 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = swift_slowAlloc(12LL, -1LL);
        uint64_t v47 = swift_slowAlloc(32LL, -1LL);
        uint64_t v48 = v47;
        *(_DWORD *)uint64_t v39 = 136315138;
        uint64_t ObjectType = swift_getObjectType(v8);
        uint64_t v41 = _typeName(_:qualified:)(ObjectType, 0LL);
        os_log_type_t v42 = v6;
        unint64_t v44 = (const char *)v43;
        *(void *)(v39 + 4) = sub_10018CDB4(v41, v43, &v48);

        uint64_t v45 = v44;
        id v6 = v42;
        os_log_type_t v5 = &IDSSendMessageOptionForceLocalDeliveryKey_ptr;
        swift_bridgeObjectRelease(v45);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Ignore event %s", (uint8_t *)v39, 0xCu);
        swift_arrayDestroy(v47, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1LL, -1LL);
        swift_slowDealloc(v39, -1LL, -1LL);

        goto LABEL_7;
      }

LABEL_6:
LABEL_7:
      if (v2 == ++v4)
      {
        swift_bridgeObjectRelease((const char *)a1);
        return;
      }
    }

    uint64_t v10 = type metadata accessor for SDContactChangeHistoryDropEverythingEvent();
    uint64_t v11 = swift_allocObject(v10, 16LL, 7LL);
    uint64_t v12 = v11;
    goto LABEL_16;
  }

  __break(1u);
}

uint64_t sub_1003DCC5C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1003DCC6C(void *a1, _BYTE *a2)
{
  uint64_t v4 = *(void ***)(v2 + 16);
  os_log_type_t v5 = *v4;
  *uint64_t v4 = a1;
  id v6 = a1;

  *a2 = 1;
}

uint64_t sub_1003DCCA4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1003DCCB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1003DCCC4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void _s14descr1005DF7D1C11AskResponseVwxx(uint64_t a1)
{
  *(void *)&double v2 = swift_bridgeObjectRelease((const char *)*(void *)(a1 + 8)).n128_u64[0];
  *(void *)&double v3 = swift_bridgeObjectRelease((const char *)*(void *)(a1 + 24), v2).n128_u64[0];
  *(void *)&double v4 = swift_bridgeObjectRelease((const char *)*(void *)(a1 + 48), v3).n128_u64[0];
  *(void *)&double v5 = swift_bridgeObjectRelease((const char *)*(void *)(a1 + 64), v4).n128_u64[0];
  swift_bridgeObjectRelease(*(const char **)(a1 + 80), v5);
  unint64_t v6 = *(void *)(a1 + 96);
  if (v6 >> 60 != 15) {
    sub_100189B20(*(void *)(a1 + 88), v6);
  }
}

uint64_t _s14descr1005DF7D1C11AskResponseVwcp(uint64_t a1, uint64_t a2)
{
  double v3 = *(const char **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  double v4 = *(const char **)(a2 + 24);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  double v5 = *(const char **)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  unint64_t v6 = *(const char **)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  id v7 = *(const char **)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  id v8 = (uint64_t *)(a2 + 88);
  unint64_t v9 = *(void *)(a2 + 96);
  *(void *)&double v10 = swift_bridgeObjectRetain(v3).n128_u64[0];
  *(void *)&double v11 = swift_bridgeObjectRetain(v4, v10).n128_u64[0];
  *(void *)&double v12 = swift_bridgeObjectRetain(v5, v11).n128_u64[0];
  *(void *)&double v13 = swift_bridgeObjectRetain(v6, v12).n128_u64[0];
  swift_bridgeObjectRetain(v7, v13);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)v8;
  }

  else
  {
    uint64_t v14 = *v8;
    sub_10019BA8C(*v8, v9);
    *(void *)(a1 + 88) = v14;
    *(void *)(a1 + 96) = v9;
  }

  return a1;
}

uint64_t _s14descr1005DF7D1C11AskResponseVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  double v4 = *(const char **)(a2 + 8);
  double v5 = *(const char **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  *(void *)&double v6 = swift_bridgeObjectRetain(v4).n128_u64[0];
  *(void *)&double v7 = swift_bridgeObjectRelease(v5, v6).n128_u64[0];
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  id v8 = *(const char **)(a2 + 24);
  unint64_t v9 = *(const char **)(a1 + 24);
  *(void *)(a1 + 24) = v8;
  *(void *)&double v10 = swift_bridgeObjectRetain(v8, v7).n128_u64[0];
  *(void *)&double v11 = swift_bridgeObjectRelease(v9, v10).n128_u64[0];
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  double v12 = *(const char **)(a2 + 48);
  double v13 = *(const char **)(a1 + 48);
  *(void *)(a1 + 48) = v12;
  *(void *)&double v14 = swift_bridgeObjectRetain(v12, v11).n128_u64[0];
  *(void *)&double v15 = swift_bridgeObjectRelease(v13, v14).n128_u64[0];
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v16 = *(const char **)(a2 + 64);
  unint64_t v17 = *(const char **)(a1 + 64);
  *(void *)(a1 + 64) = v16;
  *(void *)&double v18 = swift_bridgeObjectRetain(v16, v15).n128_u64[0];
  *(void *)&double v19 = swift_bridgeObjectRelease(v17, v18).n128_u64[0];
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v20 = *(const char **)(a2 + 80);
  uint64_t v21 = *(const char **)(a1 + 80);
  *(void *)(a1 + 80) = v20;
  *(void *)&double v22 = swift_bridgeObjectRetain(v20, v19).n128_u64[0];
  swift_bridgeObjectRelease(v21, v22);
  uint64_t v23 = (uint64_t *)(a2 + 88);
  unint64_t v24 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96) >> 60 != 15LL)
  {
    if (v24 >> 60 != 15)
    {
      uint64_t v26 = *v23;
      sub_10019BA8C(*v23, v24);
      uint64_t v27 = *(void *)(a1 + 88);
      unint64_t v28 = *(void *)(a1 + 96);
      *(void *)(a1 + 88) = v26;
      *(void *)(a1 + 96) = v24;
      sub_100189B20(v27, v28);
      return a1;
    }

    sub_10019DC8C(a1 + 88);
    goto LABEL_6;
  }

  if (v24 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 88) = *(_OWORD *)v23;
    return a1;
  }

  uint64_t v25 = *v23;
  sub_10019BA8C(*v23, v24);
  *(void *)(a1 + 88) = v25;
  *(void *)(a1 + 96) = v24;
  return a1;
}

__n128 _s14descr1005DF7D1C11AskResponseVwtk(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t _s14descr1005DF7D1C11AskResponseVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  __int128 v5 = *(const char **)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)&double v6 = swift_bridgeObjectRelease(v5).n128_u64[0];
  uint64_t v7 = *(void *)(a2 + 24);
  id v8 = *(const char **)(a1 + 24);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  *(void *)&double v9 = swift_bridgeObjectRelease(v8, v6).n128_u64[0];
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 48);
  double v11 = *(const char **)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v10;
  *(void *)&double v12 = swift_bridgeObjectRelease(v11, v9).n128_u64[0];
  uint64_t v13 = *(void *)(a2 + 64);
  double v14 = *(const char **)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v13;
  *(void *)&double v15 = swift_bridgeObjectRelease(v14, v12).n128_u64[0];
  uint64_t v16 = *(void *)(a2 + 80);
  unint64_t v17 = *(const char **)(a1 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v16;
  swift_bridgeObjectRelease(v17, v15);
  double v18 = (void *)(a2 + 88);
  unint64_t v19 = *(void *)(a1 + 96);
  if (v19 >> 60 != 15)
  {
    unint64_t v20 = *(void *)(a2 + 96);
    if (v20 >> 60 != 15)
    {
      uint64_t v21 = *(void *)(a1 + 88);
      *(void *)(a1 + 88) = *v18;
      *(void *)(a1 + 96) = v20;
      sub_100189B20(v21, v19);
      return a1;
    }

    sub_10019DC8C(a1 + 88);
  }

  *(_OWORD *)(a1 + 88) = *(_OWORD *)v18;
  return a1;
}

uint64_t _s14descr1005DF7D1C11AskResponseVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s14descr1005DF7D1C11AskResponseVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 104) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *_s14descr1005DF7D1C11AskResponseVMa()
{
  return &_s14descr1005DF7D1C11AskResponseVN;
}

uint64_t *sub_1003DD0F4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1LL, v7))
    {
      uint64_t v9 = sub_100183098((uint64_t *)&unk_100647610);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0LL, 1LL, v7);
    }

    uint64_t v11 = a3[5];
    double v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for SFAirDrop.TransferType(0LL);
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
    {
      uint64_t v16 = sub_100183098(&qword_100647608);
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
    }

    uint64_t v17 = a3[6];
    double v18 = (char *)a1 + v17;
    unint64_t v19 = (char *)a2 + v17;
    unint64_t v20 = *((void *)v19 + 1);
    if (v20 >> 60 == 15)
    {
      *(_OWORD *)double v18 = *(_OWORD *)v19;
    }

    else
    {
      uint64_t v21 = *(void *)v19;
      sub_10019BA8C(*(void *)v19, *((void *)v19 + 1));
      *(void *)double v18 = v21;
      *((void *)v18 + 1) = v20;
    }

    uint64_t v22 = a3[7];
    uint64_t v23 = a3[8];
    unint64_t v24 = (uint64_t *)((char *)a1 + v22);
    uint64_t v25 = (uint64_t *)((char *)a2 + v22);
    uint64_t v26 = (const char *)v25[1];
    *unint64_t v24 = *v25;
    v24[1] = v26;
    uint64_t v27 = (uint64_t *)((char *)a1 + v23);
    unint64_t v28 = (uint64_t *)((char *)a2 + v23);
    unint64_t v67 = (const char *)v28[1];
    *uint64_t v27 = *v28;
    v27[1] = v67;
    uint64_t v29 = a3[9];
    uint64_t v30 = a3[10];
    unint64_t v31 = (uint64_t *)((char *)a1 + v29);
    unint64_t v32 = (uint64_t *)((char *)a2 + v29);
    uint64_t v33 = (const char *)v32[1];
    *unint64_t v31 = *v32;
    v31[1] = v33;
    uint64_t v34 = (uint64_t *)((char *)a1 + v30);
    uint64_t v35 = (uint64_t *)((char *)a2 + v30);
    uint64_t v36 = (const char *)v35[1];
    *uint64_t v34 = *v35;
    v34[1] = v36;
    uint64_t v37 = a3[11];
    uint64_t v38 = a3[12];
    uint64_t v39 = *(const char **)((char *)a2 + v37);
    *(uint64_t *)((char *)a1 + v37) = (uint64_t)v39;
    uint64_t v40 = *(const char **)((char *)a2 + v38);
    *(uint64_t *)((char *)a1 + v38) = (uint64_t)v40;
    uint64_t v41 = a3[13];
    uint64_t v42 = a3[14];
    unint64_t v43 = (uint64_t *)((char *)a1 + v41);
    unint64_t v44 = (uint64_t *)((char *)a2 + v41);
    uint64_t v45 = (const char *)v44[1];
    *unint64_t v43 = *v44;
    v43[1] = v45;
    uint64_t v46 = (uint64_t *)((char *)a2 + v42);
    unint64_t v47 = *(uint64_t *)((char *)a2 + v42 + 8);
    *(void *)&double v48 = swift_bridgeObjectRetain(v26, (char *)a1 + v42).n128_u64[0];
    *(void *)&double v49 = swift_bridgeObjectRetain(v67, v48).n128_u64[0];
    *(void *)&double v50 = swift_bridgeObjectRetain(v33, v49).n128_u64[0];
    *(void *)&double v51 = swift_bridgeObjectRetain(v36, v50).n128_u64[0];
    *(void *)&double v52 = swift_bridgeObjectRetain(v39, v51).n128_u64[0];
    *(void *)&double v53 = swift_bridgeObjectRetain(v40, v52).n128_u64[0];
    swift_bridgeObjectRetain(v45, v53);
    if (v47 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v66 = *(_OWORD *)v46;
    }

    else
    {
      uint64_t v54 = *v46;
      sub_10019BA8C(*v46, v47);
      *(void *)uint64_t v66 = v54;
      *(void *)(v66 + 8) = v47;
    }

    uint64_t v55 = a3[15];
    uint64_t v56 = (char *)a1 + v55;
    unsigned __int8 v57 = (char *)a2 + v55;
    unint64_t v58 = *((void *)v57 + 1);
    if (v58 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
    }

    else
    {
      uint64_t v59 = *(void *)v57;
      sub_10019BA8C(*(void *)v57, *((void *)v57 + 1));
      *(void *)uint64_t v56 = v59;
      *((void *)v56 + 1) = v58;
    }

    uint64_t v60 = a3[17];
    *((_BYTE *)a1 + a3[16]) = *((_BYTE *)a2 + a3[16]);
    os_log_type_t v61 = (char *)a1 + v60;
    uint64_t v62 = (uint64_t *)((char *)a2 + v60);
    unint64_t v63 = *(uint64_t *)((char *)a2 + v60 + 8);
    if (v63 >> 60 == 15)
    {
      *(_OWORD *)os_log_type_t v61 = *(_OWORD *)v62;
    }

    else
    {
      uint64_t v64 = *v62;
      sub_10019BA8C(*v62, v63);
      *(void *)os_log_type_t v61 = v64;
      *((void *)v61 + 1) = v63;
    }
  }

  return a1;
}

void sub_1003DD414(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = a1 + a2[5];
  uint64_t v7 = type metadata accessor for SFAirDrop.TransferType(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = (uint64_t *)(a1 + a2[6]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_100189B20(*v9, v10);
  }
  *(void *)&double v11 = swift_bridgeObjectRelease((const char *)*(void *)(a1 + a2[7] + 8)).n128_u64[0];
  *(void *)&double v12 = swift_bridgeObjectRelease((const char *)*(void *)(a1 + a2[8] + 8), v11).n128_u64[0];
  *(void *)&double v13 = swift_bridgeObjectRelease((const char *)*(void *)(a1 + a2[9] + 8), v12).n128_u64[0];
  *(void *)&double v14 = swift_bridgeObjectRelease((const char *)*(void *)(a1 + a2[10] + 8), v13).n128_u64[0];
  *(void *)&double v15 = swift_bridgeObjectRelease((const char *)*(void *)(a1 + a2[11]), v14).n128_u64[0];
  *(void *)&double v16 = swift_bridgeObjectRelease((const char *)*(void *)(a1 + a2[12]), v15).n128_u64[0];
  swift_bridgeObjectRelease(*(const char **)(a1 + a2[13] + 8), v16);
  uint64_t v17 = (uint64_t *)(a1 + a2[14]);
  unint64_t v18 = v17[1];
  if (v18 >> 60 != 15) {
    sub_100189B20(*v17, v18);
  }
  unint64_t v19 = (uint64_t *)(a1 + a2[15]);
  unint64_t v20 = v19[1];
  if (v20 >> 60 != 15) {
    sub_100189B20(*v19, v20);
  }
  uint64_t v21 = (uint64_t *)(a1 + a2[17]);
  unint64_t v22 = v21[1];
  if (v22 >> 60 != 15) {
    sub_100189B20(*v21, v22);
  }
}

char *sub_1003DD5B4(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1LL, v6))
  {
    uint64_t v8 = sub_100183098((uint64_t *)&unk_100647610);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
  }

  uint64_t v9 = a3[5];
  unint64_t v10 = &a1[v9];
  double v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for SFAirDrop.TransferType(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12))
  {
    uint64_t v14 = sub_100183098(&qword_100647608);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
  }

  uint64_t v15 = a3[6];
  double v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  unint64_t v18 = *((void *)v17 + 1);
  if (v18 >> 60 == 15)
  {
    *(_OWORD *)double v16 = *(_OWORD *)v17;
  }

  else
  {
    uint64_t v19 = *(void *)v17;
    sub_10019BA8C(*(void *)v17, *((void *)v17 + 1));
    *(void *)double v16 = v19;
    *((void *)v16 + 1) = v18;
  }

  uint64_t v20 = a3[7];
  uint64_t v21 = a3[8];
  unint64_t v22 = &a1[v20];
  uint64_t v23 = &a2[v20];
  unint64_t v24 = (const char *)*((void *)v23 + 1);
  *(void *)unint64_t v22 = *(void *)v23;
  *((void *)v22 + 1) = v24;
  uint64_t v25 = &a1[v21];
  uint64_t v26 = &a2[v21];
  unint64_t v65 = (const char *)*((void *)v26 + 1);
  *(void *)uint64_t v25 = *(void *)v26;
  *((void *)v25 + 1) = v65;
  uint64_t v27 = a3[9];
  uint64_t v28 = a3[10];
  uint64_t v29 = &a1[v27];
  uint64_t v30 = &a2[v27];
  unint64_t v31 = (const char *)*((void *)v30 + 1);
  *(void *)uint64_t v29 = *(void *)v30;
  *((void *)v29 + 1) = v31;
  unint64_t v32 = &a1[v28];
  uint64_t v33 = &a2[v28];
  uint64_t v34 = (const char *)*((void *)v33 + 1);
  *(void *)unint64_t v32 = *(void *)v33;
  *((void *)v32 + 1) = v34;
  uint64_t v35 = a3[11];
  uint64_t v36 = a3[12];
  uint64_t v37 = *(const char **)&a2[v35];
  *(void *)&a1[v35] = v37;
  uint64_t v38 = *(const char **)&a2[v36];
  *(void *)&a1[v36] = v38;
  uint64_t v39 = a3[13];
  uint64_t v40 = a3[14];
  uint64_t v41 = &a1[v39];
  uint64_t v42 = &a2[v39];
  unint64_t v43 = (const char *)*((void *)v42 + 1);
  *(void *)uint64_t v41 = *(void *)v42;
  *((void *)v41 + 1) = v43;
  unint64_t v44 = (uint64_t *)&a2[v40];
  unint64_t v45 = *(void *)&a2[v40 + 8];
  *(void *)&double v46 = swift_bridgeObjectRetain(v24, &a1[v40]).n128_u64[0];
  *(void *)&double v47 = swift_bridgeObjectRetain(v65, v46).n128_u64[0];
  *(void *)&double v48 = swift_bridgeObjectRetain(v31, v47).n128_u64[0];
  *(void *)&double v49 = swift_bridgeObjectRetain(v34, v48).n128_u64[0];
  *(void *)&double v50 = swift_bridgeObjectRetain(v37, v49).n128_u64[0];
  *(void *)&double v51 = swift_bridgeObjectRetain(v38, v50).n128_u64[0];
  swift_bridgeObjectRetain(v43, v51);
  if (v45 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v64 = *(_OWORD *)v44;
  }

  else
  {
    uint64_t v52 = *v44;
    sub_10019BA8C(*v44, v45);
    *(void *)uint64_t v64 = v52;
    *(void *)(v64 + 8) = v45;
  }

  uint64_t v53 = a3[15];
  uint64_t v54 = &a1[v53];
  uint64_t v55 = &a2[v53];
  unint64_t v56 = *((void *)v55 + 1);
  if (v56 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
  }

  else
  {
    uint64_t v57 = *(void *)v55;
    sub_10019BA8C(*(void *)v55, *((void *)v55 + 1));
    *(void *)uint64_t v54 = v57;
    *((void *)v54 + 1) = v56;
  }

  uint64_t v58 = a3[17];
  a1[a3[16]] = a2[a3[16]];
  uint64_t v59 = &a1[v58];
  uint64_t v60 = (uint64_t *)&a2[v58];
  unint64_t v61 = *(void *)&a2[v58 + 8];
  if (v61 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v59 = *(_OWORD *)v60;
  }

  else
  {
    uint64_t v62 = *v60;
    sub_10019BA8C(*v60, v61);
    *(void *)uint64_t v59 = v62;
    *((void *)v59 + 1) = v61;
  }

  return a1;
}

char *sub_1003DD8A8(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1LL, v6);
  int v10 = v8(a2, 1LL, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = sub_100183098((uint64_t *)&unk_100647610);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for SFAirDrop.TransferType(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1LL, v15);
  int v19 = v17(v14, 1LL, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_12:
    uint64_t v20 = sub_100183098(&qword_100647608);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_13:
  uint64_t v21 = a3[6];
  unint64_t v22 = (uint64_t *)&a1[v21];
  uint64_t v23 = (uint64_t *)&a2[v21];
  unint64_t v24 = *(void *)&a2[v21 + 8];
  if (*(void *)&a1[v21 + 8] >> 60 == 15LL)
  {
    if (v24 >> 60 != 15)
    {
      uint64_t v25 = *v23;
      sub_10019BA8C(v25, v24);
      *unint64_t v22 = v25;
      v22[1] = v24;
      goto LABEL_20;
    }

    goto LABEL_18;
  }

  if (v24 >> 60 == 15)
  {
    sub_10019DC8C((uint64_t)v22);
LABEL_18:
    *(_OWORD *)unint64_t v22 = *(_OWORD *)v23;
    goto LABEL_20;
  }

  uint64_t v26 = *v23;
  sub_10019BA8C(v26, v24);
  uint64_t v27 = *v22;
  unint64_t v28 = v22[1];
  *unint64_t v22 = v26;
  v22[1] = v24;
  sub_100189B20(v27, v28);
LABEL_20:
  uint64_t v29 = a3[7];
  uint64_t v30 = &a1[v29];
  unint64_t v31 = &a2[v29];
  *(void *)uint64_t v30 = *(void *)v31;
  unint64_t v32 = (const char *)*((void *)v31 + 1);
  uint64_t v33 = (const char *)*((void *)v30 + 1);
  *((void *)v30 + 1) = v32;
  *(void *)&double v34 = swift_bridgeObjectRetain(v32).n128_u64[0];
  *(void *)&double v35 = swift_bridgeObjectRelease(v33, v34).n128_u64[0];
  uint64_t v36 = a3[8];
  uint64_t v37 = &a1[v36];
  uint64_t v38 = &a2[v36];
  *(void *)uint64_t v37 = *(void *)v38;
  uint64_t v39 = (const char *)*((void *)v38 + 1);
  uint64_t v40 = (const char *)*((void *)v37 + 1);
  *((void *)v37 + 1) = v39;
  *(void *)&double v41 = swift_bridgeObjectRetain(v39, v35).n128_u64[0];
  *(void *)&double v42 = swift_bridgeObjectRelease(v40, v41).n128_u64[0];
  uint64_t v43 = a3[9];
  unint64_t v44 = &a1[v43];
  unint64_t v45 = &a2[v43];
  *(void *)unint64_t v44 = *(void *)v45;
  double v46 = (const char *)*((void *)v45 + 1);
  double v47 = (const char *)*((void *)v44 + 1);
  *((void *)v44 + 1) = v46;
  *(void *)&double v48 = swift_bridgeObjectRetain(v46, v42).n128_u64[0];
  *(void *)&double v49 = swift_bridgeObjectRelease(v47, v48).n128_u64[0];
  uint64_t v50 = a3[10];
  double v51 = &a1[v50];
  uint64_t v52 = &a2[v50];
  *(void *)double v51 = *(void *)v52;
  uint64_t v53 = (const char *)*((void *)v52 + 1);
  uint64_t v54 = (const char *)*((void *)v51 + 1);
  *((void *)v51 + 1) = v53;
  *(void *)&double v55 = swift_bridgeObjectRetain(v53, v49).n128_u64[0];
  *(void *)&double v56 = swift_bridgeObjectRelease(v54, v55).n128_u64[0];
  uint64_t v57 = a3[11];
  uint64_t v58 = *(const char **)&a1[v57];
  uint64_t v59 = *(const char **)&a2[v57];
  *(void *)&a1[v57] = v59;
  *(void *)&double v60 = swift_bridgeObjectRetain(v59, v56).n128_u64[0];
  *(void *)&double v61 = swift_bridgeObjectRelease(v58, v60).n128_u64[0];
  uint64_t v62 = a3[12];
  unint64_t v63 = *(const char **)&a1[v62];
  uint64_t v64 = *(const char **)&a2[v62];
  *(void *)&a1[v62] = v64;
  *(void *)&double v65 = swift_bridgeObjectRetain(v64, v61).n128_u64[0];
  *(void *)&double v66 = swift_bridgeObjectRelease(v63, v65).n128_u64[0];
  uint64_t v67 = a3[13];
  uint64_t v68 = &a1[v67];
  Swift::String v69 = &a2[v67];
  *(void *)uint64_t v68 = *(void *)v69;
  Swift::String v70 = (const char *)*((void *)v69 + 1);
  uint64_t v71 = (const char *)*((void *)v68 + 1);
  *((void *)v68 + 1) = v70;
  *(void *)&double v72 = swift_bridgeObjectRetain(v70, v66).n128_u64[0];
  swift_bridgeObjectRelease(v71, v72);
  uint64_t v73 = a3[14];
  uint64_t v74 = (uint64_t *)&a1[v73];
  char v75 = (uint64_t *)&a2[v73];
  unint64_t v76 = *(void *)&a2[v73 + 8];
  if (*(void *)&a1[v73 + 8] >> 60 == 15LL)
  {
    if (v76 >> 60 != 15)
    {
      uint64_t v77 = *v75;
      sub_10019BA8C(v77, v76);
      *uint64_t v74 = v77;
      v74[1] = v76;
      goto LABEL_27;
    }

    goto LABEL_25;
  }

  if (v76 >> 60 == 15)
  {
    sub_10019DC8C((uint64_t)v74);
LABEL_25:
    *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
    goto LABEL_27;
  }

  uint64_t v78 = *v75;
  sub_10019BA8C(v78, v76);
  uint64_t v79 = *v74;
  unint64_t v80 = v74[1];
  *uint64_t v74 = v78;
  v74[1] = v76;
  sub_100189B20(v79, v80);
LABEL_27:
  uint64_t v81 = a3[15];
  uint64_t v82 = (uint64_t *)&a1[v81];
  uint64_t v83 = (uint64_t *)&a2[v81];
  unint64_t v84 = *(void *)&a2[v81 + 8];
  if (*(void *)&a1[v81 + 8] >> 60 == 15LL)
  {
    if (v84 >> 60 != 15)
    {
      uint64_t v85 = *v83;
      sub_10019BA8C(v85, v84);
      *uint64_t v82 = v85;
      v82[1] = v84;
      goto LABEL_34;
    }

    goto LABEL_32;
  }

  if (v84 >> 60 == 15)
  {
    sub_10019DC8C((uint64_t)v82);
LABEL_32:
    *(_OWORD *)uint64_t v82 = *(_OWORD *)v83;
    goto LABEL_34;
  }

  uint64_t v86 = *v83;
  sub_10019BA8C(v86, v84);
  uint64_t v87 = *v82;
  unint64_t v88 = v82[1];
  *uint64_t v82 = v86;
  v82[1] = v84;
  sub_100189B20(v87, v88);
LABEL_34:
  a1[a3[16]] = a2[a3[16]];
  uint64_t v89 = a3[17];
  uint64_t v90 = (uint64_t *)&a1[v89];
  uint64_t v91 = (uint64_t *)&a2[v89];
  unint64_t v92 = *(void *)&a2[v89 + 8];
  if (*(void *)&a1[v89 + 8] >> 60 != 15LL)
  {
    if (v92 >> 60 != 15)
    {
      uint64_t v94 = *v91;
      sub_10019BA8C(v94, v92);
      uint64_t v95 = *v90;
      unint64_t v96 = v90[1];
      uint64_t *v90 = v94;
      v90[1] = v92;
      sub_100189B20(v95, v96);
      return a1;
    }

    sub_10019DC8C((uint64_t)v90);
    goto LABEL_39;
  }

  if (v92 >> 60 == 15)
  {
LABEL_39:
    *(_OWORD *)uint64_t v90 = *(_OWORD *)v91;
    return a1;
  }

  uint64_t v93 = *v91;
  sub_10019BA8C(v93, v92);
  uint64_t *v90 = v93;
  v90[1] = v92;
  return a1;
}

char *sub_1003DDD94(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1LL, v6))
  {
    uint64_t v8 = sub_100183098((uint64_t *)&unk_100647610);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
  }

  uint64_t v9 = a3[5];
  int v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for SFAirDrop.TransferType(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12))
  {
    uint64_t v14 = sub_100183098(&qword_100647608);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
  }

  uint64_t v15 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_OWORD *)&a1[v15] = *(_OWORD *)&a2[v15];
  uint64_t v16 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  *(_OWORD *)&a1[v16] = *(_OWORD *)&a2[v16];
  uint64_t v17 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  *(void *)&a1[v17] = *(void *)&a2[v17];
  uint64_t v18 = a3[13];
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  *(_OWORD *)&a1[v18] = *(_OWORD *)&a2[v18];
  uint64_t v19 = a3[15];
  *(_OWORD *)&a1[a3[14]] = *(_OWORD *)&a2[a3[14]];
  *(_OWORD *)&a1[v19] = *(_OWORD *)&a2[v19];
  uint64_t v20 = a3[17];
  a1[a3[16]] = a2[a3[16]];
  *(_OWORD *)&a1[v20] = *(_OWORD *)&a2[v20];
  return a1;
}

char *sub_1003DDF48(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1LL, v6);
  int v10 = v8(a2, 1LL, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = sub_100183098((uint64_t *)&unk_100647610);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for SFAirDrop.TransferType(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1LL, v15);
  int v19 = v17(v14, 1LL, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_12:
    uint64_t v20 = sub_100183098(&qword_100647608);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v13, v14, v15);
LABEL_13:
  uint64_t v21 = a3[6];
  uint64_t v22 = (uint64_t)&a1[v21];
  uint64_t v23 = &a2[v21];
  unint64_t v24 = *(void *)&a1[v21 + 8];
  if (v24 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    goto LABEL_18;
  }

  unint64_t v25 = *((void *)v23 + 1);
  if (v25 >> 60 == 15)
  {
    sub_10019DC8C(v22);
    goto LABEL_16;
  }

  uint64_t v26 = *(void *)v22;
  *(void *)uint64_t v22 = *(void *)v23;
  *(void *)(v22 + 8) = v25;
  sub_100189B20(v26, v24);
LABEL_18:
  uint64_t v27 = a3[7];
  unint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  uint64_t v31 = *(void *)v29;
  uint64_t v30 = *((void *)v29 + 1);
  unint64_t v32 = (const char *)*((void *)v28 + 1);
  *(void *)unint64_t v28 = v31;
  *((void *)v28 + 1) = v30;
  *(void *)&double v33 = swift_bridgeObjectRelease(v32).n128_u64[0];
  uint64_t v34 = a3[8];
  double v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  uint64_t v38 = *(void *)v36;
  uint64_t v37 = *((void *)v36 + 1);
  uint64_t v39 = (const char *)*((void *)v35 + 1);
  *(void *)double v35 = v38;
  *((void *)v35 + 1) = v37;
  *(void *)&double v40 = swift_bridgeObjectRelease(v39, v33).n128_u64[0];
  uint64_t v41 = a3[9];
  double v42 = &a1[v41];
  uint64_t v43 = &a2[v41];
  uint64_t v45 = *(void *)v43;
  uint64_t v44 = *((void *)v43 + 1);
  double v46 = (const char *)*((void *)v42 + 1);
  *(void *)double v42 = v45;
  *((void *)v42 + 1) = v44;
  *(void *)&double v47 = swift_bridgeObjectRelease(v46, v40).n128_u64[0];
  uint64_t v48 = a3[10];
  double v49 = &a1[v48];
  uint64_t v50 = &a2[v48];
  uint64_t v52 = *(void *)v50;
  uint64_t v51 = *((void *)v50 + 1);
  uint64_t v53 = (const char *)*((void *)v49 + 1);
  *(void *)double v49 = v52;
  *((void *)v49 + 1) = v51;
  *(void *)&double v54 = swift_bridgeObjectRelease(v53, v47).n128_u64[0];
  uint64_t v55 = a3[11];
  double v56 = *(const char **)&a1[v55];
  *(void *)&a1[v55] = *(void *)&a2[v55];
  *(void *)&double v57 = swift_bridgeObjectRelease(v56, v54).n128_u64[0];
  uint64_t v58 = a3[12];
  uint64_t v59 = *(const char **)&a1[v58];
  *(void *)&a1[v58] = *(void *)&a2[v58];
  *(void *)&double v60 = swift_bridgeObjectRelease(v59, v57).n128_u64[0];
  uint64_t v61 = a3[13];
  uint64_t v62 = &a1[v61];
  unint64_t v63 = &a2[v61];
  uint64_t v65 = *(void *)v63;
  uint64_t v64 = *((void *)v63 + 1);
  double v66 = (const char *)*((void *)v62 + 1);
  *(void *)uint64_t v62 = v65;
  *((void *)v62 + 1) = v64;
  swift_bridgeObjectRelease(v66, v60);
  uint64_t v67 = a3[14];
  uint64_t v68 = (uint64_t)&a1[v67];
  Swift::String v69 = &a2[v67];
  unint64_t v70 = *(void *)&a1[v67 + 8];
  if (v70 >> 60 == 15)
  {
LABEL_21:
    *(_OWORD *)uint64_t v68 = *(_OWORD *)v69;
    goto LABEL_23;
  }

  unint64_t v71 = *((void *)v69 + 1);
  if (v71 >> 60 == 15)
  {
    sub_10019DC8C(v68);
    goto LABEL_21;
  }

  uint64_t v72 = *(void *)v68;
  *(void *)uint64_t v68 = *(void *)v69;
  *(void *)(v68 + 8) = v71;
  sub_100189B20(v72, v70);
LABEL_23:
  uint64_t v73 = a3[15];
  uint64_t v74 = (uint64_t)&a1[v73];
  char v75 = &a2[v73];
  unint64_t v76 = *(void *)&a1[v73 + 8];
  if (v76 >> 60 == 15)
  {
LABEL_26:
    *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
    goto LABEL_28;
  }

  unint64_t v77 = *((void *)v75 + 1);
  if (v77 >> 60 == 15)
  {
    sub_10019DC8C(v74);
    goto LABEL_26;
  }

  uint64_t v78 = *(void *)v74;
  *(void *)uint64_t v74 = *(void *)v75;
  *(void *)(v74 + 8) = v77;
  sub_100189B20(v78, v76);
LABEL_28:
  uint64_t v79 = a3[17];
  a1[a3[16]] = a2[a3[16]];
  unint64_t v80 = (uint64_t *)&a1[v79];
  uint64_t v81 = (uint64_t *)&a2[v79];
  unint64_t v82 = *(void *)&a1[v79 + 8];
  if (v82 >> 60 != 15)
  {
    unint64_t v83 = v81[1];
    if (v83 >> 60 != 15)
    {
      uint64_t v84 = *v80;
      *unint64_t v80 = *v81;
      v80[1] = v83;
      sub_100189B20(v84, v82);
      return a1;
    }

    sub_10019DC8C((uint64_t)v80);
  }

  *(_OWORD *)unint64_t v80 = *(_OWORD *)v81;
  return a1;
}

uint64_t sub_1003DE310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003DE31C);
}

uint64_t sub_1003DE31C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100183098((uint64_t *)&unk_100647610);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  uint64_t v11 = sub_100183098(&qword_100647608);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }

  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_1003DE3D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003DE3DC);
}

uint64_t sub_1003DE3DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_100183098((uint64_t *)&unk_100647610);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
    return v11(v12, a2, a2, v10);
  }

  uint64_t result = sub_100183098(&qword_100647608);
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }

  *(void *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  return result;
}

uint64_t _s14descr1005DF7D1C10AskRequestVMa(uint64_t a1)
{
  uint64_t result = qword_100653070;
  if (!qword_100653070) {
    return swift_getSingletonMetadata(a1, &_s14descr1005DF7D1C10AskRequestVMn);
  }
  return result;
}

void sub_1003DE4C8(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    sub_1001C1100( 319LL,  (unint64_t *)&unk_100653080,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferType);
    if (v5 <= 0x3F)
    {
      v6[1] = *(void *)(v4 - 8) + 64LL;
      v6[2] = &unk_1004D9F18;
      v6[3] = &unk_1004D9F30;
      v6[4] = &unk_1004D9F48;
      v6[5] = &unk_1004D9F30;
      void v6[6] = &unk_1004D9F30;
      v6[7] = &unk_1004D9F60;
      v6[8] = &unk_1004D9F60;
      v6[9] = &unk_1004D9F48;
      v6[10] = &unk_1004D9F18;
      v6[11] = &unk_1004D9F18;
      v6[12] = &unk_1004D9F78;
      v6[13] = &unk_1004D9F18;
      swift_initStructMetadata(a1, 256LL, 14LL, v6, a1 + 16);
    }
  }

void *sub_1003DE5AC( void (*a1)(uint64_t *__return_ptr, uint64_t, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    double v42 = _swiftEmptyArrayStorage;
    sub_10018D8D8(0, v5, 0);
    uint64_t v6 = _swiftEmptyArrayStorage;
    uint64_t v8 = *(void *)(type metadata accessor for URL(0LL) - 8);
    uint64_t v9 = a3 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v30 = *(void *)(v8 + 72);
    while (1)
    {
      a1(&v33, v9, &v32);
      if (v4) {
        break;
      }
      uint64_t v4 = 0LL;
      uint64_t v10 = v33;
      uint64_t v11 = v34;
      __int128 v12 = v35;
      __int128 v13 = v36;
      uint64_t v14 = v37;
      char v15 = v38;
      __int128 v16 = v39;
      char v17 = v40;
      unint64_t v19 = v6[2];
      unint64_t v18 = v6[3];
      char v20 = v41;
      double v42 = v6;
      if (v19 >= v18 >> 1)
      {
        __int128 v28 = v36;
        __int128 v29 = v35;
        __int128 v27 = v39;
        uint64_t v26 = v33;
        uint64_t v22 = v34;
        char v24 = v40;
        char v25 = v38;
        sub_10018D8D8(v18 > 1, v19 + 1, 1);
        char v17 = v24;
        char v15 = v25;
        uint64_t v11 = v22;
        uint64_t v10 = v26;
        __int128 v16 = v27;
        __int128 v13 = v28;
        __int128 v12 = v29;
        uint64_t v6 = v42;
      }

      v6[2] = v19 + 1;
      uint64_t v21 = &v6[11 * v19];
      v21[4] = v10;
      v21[5] = v11;
      *((_OWORD *)v21 + 3) = v12;
      *((_OWORD *)v21 + 4) = v13;
      v21[10] = v14;
      *((_BYTE *)v21 + 88) = v15;
      *((_OWORD *)v21 + 6) = v16;
      *((_BYTE *)v21 + 112) = v17;
      *((_BYTE *)v21 + 113) = v20;
      v9 += v30;
      if (!--v5) {
        return v6;
      }
    }

    swift_release(v6);
  }

  return v6;
}

uint64_t sub_1003DE730( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[16] = a7;
  v8[17] = a8;
  v8[14] = a5;
  v8[15] = a6;
  v8[12] = a3;
  v8[13] = a4;
  v8[10] = a1;
  v8[11] = a2;
  uint64_t v9 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  v8[18] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SFAirDropSend.ItemMetadata(0LL);
  v8[19] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v8[20] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[21] = swift_task_alloc(v12);
  v8[22] = swift_task_alloc(v12);
  uint64_t v13 = sub_100183098((uint64_t *)&unk_100656480);
  v8[23] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for SFAirDrop.TransferType(0LL);
  _BYTE v8[24] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v8[25] = v15;
  unint64_t v16 = (*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[26] = swift_task_alloc(v16);
  v8[27] = swift_task_alloc(v16);
  uint64_t v17 = type metadata accessor for URL(0LL);
  v8[28] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v8[29] = v18;
  v8[30] = swift_task_alloc((*(void *)(v18 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for SFSecurityScopedURL(0LL);
  v8[31] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v8[32] = v20;
  unint64_t v21 = (*(void *)(v20 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[33] = swift_task_alloc(v21);
  v8[34] = swift_task_alloc(v21);
  v8[35] = swift_task_alloc(v21);
  uint64_t v22 = type metadata accessor for SFAirDropSend.Request(0LL);
  v8[36] = v22;
  uint64_t v23 = *(void *)(v22 - 8);
  v8[37] = v23;
  unint64_t v24 = (*(void *)(v23 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[38] = swift_task_alloc(v24);
  v8[39] = swift_task_alloc(v24);
  v8[40] = swift_task_alloc(v24);
  return swift_task_switch(sub_1003DE8D8, 0LL, 0LL);
}

void sub_1003DE8D8()
{
  uint64_t v2 = (const char **)(v0 + 15);
  uint64_t v1 = v0[15];
  uint64_t v3 = v0[40];
  uint64_t v5 = v0[36];
  uint64_t v4 = v0[37];
  uint64_t v6 = v0[11];
  id v231 = sub_1002E07C0();
  unint64_t v234 = v7;
  v0[41] = v231;
  v0[42] = v7;
  v239 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  uint64_t v8 = v239(v3, v6, v5);
  uint64_t v9 = v0[40];
  uint64_t v10 = v0[36];
  v266 = v0;
  uint64_t v237 = v1;
  v242 = (const char **)(v0 + 15);
  if (v1)
  {
    uint64_t v11 = *v2;
    unint64_t v12 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    swift_bridgeObjectRetain(*v2);
    v244 = v12;
    v12(v9, v10);
    uint64_t v13 = (uint64_t)v11;
  }

  else
  {
    uint64_t v14 = SFAirDropSend.Request.urls.getter(v8);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    uint64_t v13 = v14;
    v244 = v15;
    v15(v9, v10);
    if (!v13)
    {
      uint64_t v17 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_25;
    }
  }

  unint64_t v16 = _swiftEmptyArrayStorage;
  v269[0] = (uint64_t)_swiftEmptyArrayStorage;
  v259 = *(char **)(v13 + 16);
  if (!v259)
  {
LABEL_15:
    swift_bridgeObjectRelease((const char *)v13);
    uint64_t v30 = v16[2];
    if (v30)
    {
      uint64_t v31 = v0[32];
      uint64_t v32 = (char *)v16 + ((*(unsigned __int8 *)(v31 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
      uint64_t v251 = *(void *)(v31 + 72);
      uint64_t v255 = v0[29];
      uint64_t v260 = v31;
      v247 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v31 + 16);
      swift_retain(v16);
      uint64_t v17 = (char *)_swiftEmptyArrayStorage;
      do
      {
        uint64_t v33 = v16;
        uint64_t v34 = v0[33];
        uint64_t v35 = v0[30];
        uint64_t v36 = v0[31];
        uint64_t v37 = v17;
        uint64_t v38 = v0[28];
        uint64_t v39 = v247(v34, v32, v36);
        uint64_t v40 = SFSecurityScopedURL.url.getter(v39);
        uint64_t v41 = URL.absoluteString.getter(v40);
        uint64_t v43 = v42;
        uint64_t v44 = v38;
        uint64_t v17 = v37;
        (*(void (**)(uint64_t, uint64_t))(v255 + 8))(v35, v44);
        (*(void (**)(uint64_t, uint64_t))(v260 + 8))(v34, v36);
        if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0) {
          uint64_t v17 = sub_10018BC54(0LL, *((void *)v37 + 2) + 1LL, 1, v37);
        }
        unint64_t v46 = *((void *)v17 + 2);
        unint64_t v45 = *((void *)v17 + 3);
        unint64_t v16 = v33;
        if (v46 >= v45 >> 1) {
          uint64_t v17 = sub_10018BC54((char *)(v45 > 1), v46 + 1, 1, v17);
        }
        *((void *)v17 + 2) = v46 + 1;
        double v47 = &v17[16 * v46];
        *((void *)v47 + 4) = v41;
        *((void *)v47 + 5) = v43;
        v32 += v251;
        --v30;
        uint64_t v0 = v266;
      }

      while (v30);
      swift_release_n(v33, 2LL);
    }

    else
    {
      swift_release(v16);
      uint64_t v17 = (char *)_swiftEmptyArrayStorage;
    }

    uint64_t v2 = v242;
LABEL_25:
    v0[43] = v244;
    v0[44] = v17;
    if (qword_1006442F0 == -1) {
      goto LABEL_26;
    }
    goto LABEL_81;
  }

  uint64_t v17 = 0LL;
  uint64_t v2 = (const char **)v0[32];
  uint64_t v250 = v13;
  uint64_t v254 = v0[29];
  while ((unint64_t)v17 < *(void *)(v13 + 16))
  {
    uint64_t v18 = v0[30];
    uint64_t v19 = v0[28];
    unint64_t v20 = (*((unsigned __int8 *)v2 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v2 + 80);
    unint64_t v21 = v2[9];
    uint64_t v22 = ((uint64_t (*)(void, unint64_t, void))v2[2])( v0[35],  v13 + v20 + (void)v21 * (void)v17,  v0[31]);
    uint64_t v23 = SFSecurityScopedURL.url.getter(v22);
    char v24 = URL.isFileURL.getter(v23);
    (*(void (**)(uint64_t, uint64_t))(v254 + 8))(v18, v19);
    if ((v24 & 1) != 0)
    {
      ((void (*)(void, void))v2[1])(v0[35], v0[31]);
    }

    else
    {
      char v25 = v2[4];
      ((void (*)(void, void, void))v25)(v0[34], v0[35], v0[31]);
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
      {
        sub_10018D8F4(0, v16[2] + 1LL, 1);
        unint64_t v16 = (void *)v269[0];
      }

      unint64_t v27 = v16[2];
      unint64_t v26 = v16[3];
      if (v27 >= v26 >> 1)
      {
        sub_10018D8F4(v26 > 1, v27 + 1, 1);
        unint64_t v16 = (void *)v269[0];
      }

      uint64_t v0 = v266;
      uint64_t v28 = v266[34];
      uint64_t v29 = v266[31];
      void v16[2] = v27 + 1;
      ((void (*)(char *, uint64_t, uint64_t))v25)((char *)v16 + v20 + v27 * (void)v21, v28, v29);
      v269[0] = (uint64_t)v16;
      uint64_t v13 = v250;
    }

    if (v259 == ++v17) {
      goto LABEL_15;
    }
  }

  __break(1u);
LABEL_81:
  swift_once(&qword_1006442F0, sub_1003E0DC0);
LABEL_26:
  uint64_t v48 = v2 - 12;
  uint64_t v49 = type metadata accessor for Logger(0LL);
  v0[45] = sub_100186DE4(v49, (uint64_t)qword_100653000);
  uint64_t v50 = swift_bridgeObjectRetain_n(v17, 3LL);
  uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
  os_log_type_t v52 = static os_log_type_t.default.getter();
  v261 = v17;
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v53 = v2 - 8;
    double v54 = v2 - 7;
    uint64_t v55 = v2 - 6;
    uint64_t v56 = swift_slowAlloc(32LL, -1LL);
    double v57 = v48;
    uint64_t v58 = swift_slowAlloc(32LL, -1LL);
    v269[0] = v58;
    *(_DWORD *)uint64_t v56 = 134218499;
    v266[7] = *((void *)v261 + 2);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v53, v54, v56 + 4, v56 + 12);
    swift_bridgeObjectRelease(v261);
    *(_WORD *)(v56 + 12) = 2160;
    v266[8] = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v54, v55, v56 + 14, v56 + 22);
    *(_WORD *)(v56 + 22) = 2081;
    swift_bridgeObjectRetain(v261);
    uint64_t v59 = Array.description.getter(v261, &type metadata for String);
    uint64_t v61 = v60;
    swift_bridgeObjectRelease(v261);
    v266[9] = sub_10018CDB4(v59, (unint64_t)v61, v269);
    uint64_t v0 = v266;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v55, v266 + 10, v56 + 24, v56 + 32);
    swift_bridgeObjectRelease(v61);
    swift_bridgeObjectRelease_n(v261, 2LL);
    _os_log_impl( (void *)&_mh_execute_header,  v51,  v52,  "Adding URL items (count=%ld) to request: %{private,mask.hash}s",  (uint8_t *)v56,  0x20u);
    swift_arrayDestroy(v58, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v62 = v58;
    uint64_t v48 = v57;
    swift_slowDealloc(v62, -1LL, -1LL);
    uint64_t v63 = v56;
    uint64_t v2 = v242;
    swift_slowDealloc(v63, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v17, 3LL);
  }

  uint64_t v65 = v0 + 16;
  uint64_t v64 = (const char *)v0[16];
  uint64_t v66 = v0[39];
  if (v64)
  {
    uint64_t v67 = v266[36];
    uint64_t v68 = (const char *)v266[15];
    uint64_t v69 = v266[11];
    swift_bridgeObjectRetain(v64);
    uint64_t v0 = v266;
    v239(v66, v69, v67);
    __n128 v70 = swift_bridgeObjectRelease(v68);
LABEL_33:
    uint64_t v74 = *v65;
    uint64_t v75 = ((uint64_t (*)(void, void, __n128))v244)(v0[39], v0[36], v70);
LABEL_34:
    v0[46] = v74;
    uint64_t v76 = v0[27];
    uint64_t v77 = v0[24];
    uint64_t v78 = v0[25];
    uint64_t v79 = SFAirDropSend.Request.type.getter(v75);
    char v80 = SFAirDrop.TransferType.isOnlyExchange.getter(v79);
    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v76, v77);
    if ((v80 & 1) != 0)
    {
      sub_1003E5764(v0[16], v0[17]);
      swift_bridgeObjectRelease((const char *)v74);
      unint64_t v82 = (os_log_s *)Logger.logObject.getter(v81);
      os_log_type_t v83 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v82, v83))
      {
        uint64_t v84 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v84 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v82,  v83,  "Adding empty file info to request for exchange only send request",  v84,  2u);
        swift_slowDealloc(v84, -1LL, -1LL);
      }

      v238 = (char *)_swiftEmptyArrayStorage;
      uint64_t v0 = v266;
      goto LABEL_38;
    }

    if (*(void *)(v74 + 16))
    {
      uint64_t v95 = v266[31];
      uint64_t v96 = v266[32];
      uint64_t v97 = v266[23];
      uint64_t v99 = v266[16];
      uint64_t v98 = v266[17];
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v96 + 16))( v97,  v74 + ((*(unsigned __int8 *)(v96 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80)),  v95);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v96 + 56))(v97, 0LL, 1LL, v95);
      sub_100187100(v97, (uint64_t *)&unk_100656480);
      uint64_t v100 = swift_task_alloc(32LL);
      v266[47] = v100;
      *(void *)(v100 + swift_unknownObjectWeakDestroy(v0 + 16) = v99;
      *(void *)(v100 + 24) = v98;
      uint64_t v101 = (void *)swift_task_alloc(async function pointer to static SFSecurityScopedURL.withAccess<A>(to:body:)[1]);
      v266[48] = v101;
      uint64_t v102 = sub_100183098(&qword_1006530E8);
      *uint64_t v101 = v266;
      v101[1] = sub_1003DFBDC;
      static SFSecurityScopedURL.withAccess<A>(to:body:)(v266 + 6, v74, &unk_100653180, v100, v102);
      return;
    }

    uint64_t v106 = v266[23];
    uint64_t v108 = v266[16];
    uint64_t v107 = v266[17];
    uint64_t v109 = (const char *)v266[13];
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v266[32] + 56LL))(v106, 1LL, 1LL, v266[31]);
    sub_1003E5764(v108, v107);
    *(void *)&double v110 = swift_bridgeObjectRelease(v109).n128_u64[0];
    *(void *)&double v111 = swift_bridgeObjectRelease(v261, v110).n128_u64[0];
    swift_bridgeObjectRelease((const char *)v74, v111);
    uint64_t v112 = sub_100187100(v106, (uint64_t *)&unk_100656480);
    NSString v113 = (os_log_s *)Logger.logObject.getter(v112);
    os_log_type_t v114 = static os_log_type_t.error.getter(v113);
    if (os_log_type_enabled(v113, v114))
    {
      uint64_t v115 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v115 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v113,  v114,  "Send request claims to provide URLs but provides none",  v115,  2u);
      swift_slowDealloc(v115, -1LL, -1LL);
    }

    uint64_t v0 = v266;
LABEL_47:
    uint64_t v116 = v0[36];
    uint64_t v117 = (void *)v0[14];
    uint64_t v118 = v0[11];

    uint64_t v119 = type metadata accessor for SFAirDropSend.Failure(0LL);
    uint64_t v120 = sub_100183F14( &qword_100654D00,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
    swift_allocError(v119, v120, 0LL, 0LL);
    uint64_t v122 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v119 - 8) + 104LL))( v121,  enum case for SFAirDropSend.Failure.badRequest(_:),  v119);
    swift_willThrow(v122);
    sub_100189B0C((uint64_t)v231, v234);

    v244(v118, v116);
    uint64_t v123 = v0[39];
    uint64_t v124 = v0[38];
    uint64_t v126 = v0[34];
    uint64_t v125 = v0[35];
    uint64_t v127 = v0[33];
    uint64_t v128 = v0[30];
    uint64_t v130 = v0[26];
    uint64_t v129 = v0[27];
    uint64_t v131 = v0[23];
    uint64_t v257 = v0[22];
    uint64_t v262 = v0[21];
    uint64_t v267 = v0[18];
    swift_task_dealloc(v0[40]);
    swift_task_dealloc(v123);
    swift_task_dealloc(v124);
    swift_task_dealloc(v125);
    swift_task_dealloc(v126);
    swift_task_dealloc(v127);
    swift_task_dealloc(v128);
    swift_task_dealloc(v129);
    swift_task_dealloc(v130);
    swift_task_dealloc(v131);
    swift_task_dealloc(v257);
    swift_task_dealloc(v262);
    swift_task_dealloc(v267);
    id v132 = (void (*)(void))v0[1];
LABEL_71:
    v132();
    return;
  }

  uint64_t v71 = v0[38];
  uint64_t v72 = v0[36];
  v239(v0[39], v0[11], v72);
  uint64_t v73 = v239(v71, v66, v72);
  if (v237)
  {
    v244(v0[38], v0[36]);
    uint64_t v65 = (uint64_t *)v2;
    goto LABEL_33;
  }

  uint64_t v134 = v0[38];
  uint64_t v133 = v0[39];
  uint64_t v135 = v0[36];
  uint64_t v74 = SFAirDropSend.Request.urls.getter(v73);
  v244(v134, v135);
  uint64_t v75 = ((uint64_t (*)(uint64_t, uint64_t))v244)(v133, v135);
  if (v74) {
    goto LABEL_34;
  }
  uint64_t v136 = sub_1003E5764(0LL, v0[17]);
  uint64_t v137 = SFAirDropSend.Request.urlsMetadata.getter(v136);
  if (!v137)
  {
    *(void *)&double v205 = swift_bridgeObjectRelease((const char *)v0[13]).n128_u64[0];
    swift_bridgeObjectRelease(v261, v205);
    NSString v113 = (os_log_s *)Logger.logObject.getter(v206);
    os_log_type_t v207 = static os_log_type_t.error.getter(v113);
    if (!os_log_type_enabled(v113, v207)) {
      goto LABEL_47;
    }
    uint64_t v208 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v208 = 0;
    uint64_t v209 = "Send request does not provide either file URLs or file metadata";
LABEL_78:
    _os_log_impl((void *)&_mh_execute_header, v113, v207, v209, v208, 2u);
    uint64_t v0 = v266;
    swift_slowDealloc(v208, -1LL, -1LL);
    goto LABEL_47;
  }

  __int128 v138 = (const char *)v137;
  int64_t v139 = *(void *)(v137 + 16);
  if (!v139)
  {
    *(void *)&double v210 = swift_bridgeObjectRelease((const char *)v0[13]).n128_u64[0];
    *(void *)&double v211 = swift_bridgeObjectRelease(v261, v210).n128_u64[0];
    swift_bridgeObjectRelease(v138, v211);
    NSString v113 = (os_log_s *)Logger.logObject.getter(v212);
    os_log_type_t v207 = static os_log_type_t.error.getter(v113);
    if (!os_log_type_enabled(v113, v207)) {
      goto LABEL_47;
    }
    uint64_t v208 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v208 = 0;
    uint64_t v209 = "Send request claims to provide file metadata but provides none";
    goto LABEL_78;
  }

  v224 = v48;
  v220 = v242 - 11;
  v222 = v242 - 10;
  uint64_t v140 = v0[20];
  v269[0] = (uint64_t)_swiftEmptyArrayStorage;
  sub_10018D8D8(0, v139, 0);
  v226 = v138;
  uint64_t v141 = &v138[(*(unsigned __int8 *)(v140 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80)];
  uint64_t v232 = *(void *)(v140 + 72);
  uint64_t v235 = v140;
  v228 = *(void (**)(uint64_t, const char *, uint64_t))(v140 + 16);
  do
  {
    uint64_t v143 = v0[21];
    uint64_t v142 = v0[22];
    uint64_t v144 = v0[19];
    v228(v142, v141, v144);
    uint64_t v145 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v228)(v143, v142, v144);
    uint64_t v146 = SFAirDropSend.ItemMetadata.fileName.getter(v145);
    uint64_t v258 = v147;
    uint64_t v263 = v146;
    uint64_t v148 = SFAirDropSend.ItemMetadata.fileType.getter();
    uint64_t v248 = v149;
    uint64_t v252 = v148;
    uint64_t v245 = SFAirDropSend.ItemMetadata.fileSubType.getter();
    uint64_t v240 = v150;
    uint64_t v151 = SFAirDropSend.ItemMetadata.fileSize.getter();
    uint64_t v152 = SFAirDropSend.ItemMetadata.fileBOMPath.getter();
    uint64_t v154 = v153;
    char v155 = SFAirDropSend.ItemMetadata.fileIsDirectory.getter();
    uint64_t v156 = *(void (**)(uint64_t, uint64_t))(v235 + 8);
    v156(v143, v144);
    v156(v142, v144);
    uint64_t v157 = v269[0];
    if ((swift_isUniquelyReferenced_nonNull_native(v269[0]) & 1) == 0)
    {
      sub_10018D8D8(0, *(void *)(v157 + 16) + 1LL, 1);
      uint64_t v157 = v269[0];
    }

    unint64_t v159 = *(void *)(v157 + 16);
    unint64_t v158 = *(void *)(v157 + 24);
    if (v159 >= v158 >> 1)
    {
      sub_10018D8D8(v158 > 1, v159 + 1, 1);
      uint64_t v157 = v269[0];
    }

    *(void *)(v157 + swift_unknownObjectWeakDestroy(v0 + 16) = v159 + 1;
    uint64_t v160 = v157 + 88 * v159;
    *(void *)(v160 + 32) = v263;
    *(void *)(v160 + 40) = v258;
    *(void *)(v160 + 48) = v252;
    *(void *)(v160 + 56) = v248;
    *(void *)(v160 + 64) = v245;
    *(void *)(v160 + 72) = v240;
    *(void *)(v160 + 80) = v151;
    *(_BYTE *)(v160 + 88) = 0;
    *(void *)(v160 + 96) = v152;
    *(void *)(v160 + 104) = v154;
    *(_BYTE *)(v160 + 112) = v155 & 1;
    v141 += v232;
    *(_BYTE *)(v160 + 113) = 0;
    --v139;
    uint64_t v0 = v266;
  }

  while (v139);
  swift_bridgeObjectRelease(v226);
  v193 = (const char *)swift_retain_n(v157, 2LL);
  uint64_t v194 = swift_bridgeObjectRetain(v193);
  uint64_t v195 = (char *)v157;
  uint64_t v196 = (os_log_s *)Logger.logObject.getter(v194);
  os_log_type_t v197 = static os_log_type_t.default.getter();
  BOOL v198 = os_log_type_enabled(v196, v197);
  v238 = v195;
  if (v198)
  {
    uint64_t v199 = swift_slowAlloc(32LL, -1LL);
    uint64_t v200 = swift_slowAlloc(32LL, -1LL);
    v269[0] = v200;
    *(_DWORD *)uint64_t v199 = 134218499;
    v266[3] = *((void *)v195 + 2);
    uint64_t v48 = v224;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v224, v220, v199 + 4, v199 + 12);
    swift_release(v195);
    *(_WORD *)(v199 + 12) = 2160;
    v266[4] = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v220, v222, v199 + 14, v199 + 22);
    *(_WORD *)(v199 + 22) = 2081;
    uint64_t v201 = swift_bridgeObjectRetain(v195);
    uint64_t v202 = Array.description.getter(v201, &_s14descr1005DF7D1C10AskRequestV8FileInfoVN);
    uint64_t v204 = v203;
    swift_release(v195);
    v266[5] = sub_10018CDB4(v202, (unint64_t)v204, v269);
    uint64_t v0 = v266;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v222, v266 + 6, v199 + 24, v199 + 32);
    swift_bridgeObjectRelease(v204);
    swift_release_n(v195, 2LL);
    _os_log_impl( (void *)&_mh_execute_header,  v196,  v197,  "Adding file info (count=%ld) to request: %{private,mask.hash}s",  (uint8_t *)v199,  0x20u);
    swift_arrayDestroy(v200, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v200, -1LL, -1LL);
    swift_slowDealloc(v199, -1LL, -1LL);

    uint64_t v2 = v242;
  }

  else
  {
    swift_release_n(v195, 3LL);

    uint64_t v2 = v242;
    uint64_t v48 = v224;
  }

uint64_t sub_1003DFBDC()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 384LL);
  *(void *)(*(void *)v1 + 392LL) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = (const char *)v2[46];
  uint64_t v5 = v2[47];
  if (v0)
  {
    uint64_t v6 = (const char *)v2[44];
    uint64_t v7 = v2[16];
    uint64_t v8 = v2[17];
    uint64_t v9 = (const char *)v2[13];
    sub_1003E5764(v7, v8);
    *(void *)&double v10 = swift_bridgeObjectRelease(v9).n128_u64[0];
    *(void *)&double v11 = swift_bridgeObjectRelease(v6, v10).n128_u64[0];
    swift_bridgeObjectRelease(v4, v11);
    swift_task_dealloc(v5);
    unint64_t v12 = sub_1003E010C;
  }

  else
  {
    uint64_t v15 = v2 + 16;
    uint64_t v14 = v2[16];
    uint64_t v13 = v15[1];
    swift_bridgeObjectRelease(v4);
    sub_1003E5764(v14, v13);
    swift_task_dealloc(v5);
    unint64_t v12 = sub_1003DFC9C;
  }

  return swift_task_switch(v12, 0LL, 0LL);
}

void sub_1003DFC9C()
{
  uint64_t v1 = *(const char **)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v5 = SFAirDropSend.Request.itemPreviewData.getter();
  unint64_t v7 = v6;
  uint64_t v8 = SFAirDropSend.Request.type.getter(v5);
  char v9 = SFAirDrop.TransferType.isOnlyExchange.getter(v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  if ((v9 & 1) != 0
    || (id v10 = [*(id *)(v0 + 112) computerName]) == 0)
  {
    uint64_t v65 = 0LL;
    uint64_t v13 = 0LL;
  }

  else
  {
    double v11 = v10;
    uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v13 = v12;
  }

  sub_1001A4C04(v5, v7);
  uint64_t v14 = sub_1001A4C04(v5, v7);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  uint64_t v66 = (char *)v1;
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    uint64_t v68 = v18;
    *(_DWORD *)uint64_t v17 = 136315138;
    if (v7 >> 60 == 15)
    {
      uint64_t v19 = (const char *)0x800000010050E3B0LL;
      uint64_t v20 = 0xD000000000000016LL;
    }

    else
    {
      uint64_t v20 = Data.description.getter(v5, v7);
      uint64_t v19 = v21;
    }

    *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_10018CDB4(v20, (unint64_t)v19, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v19);
    sub_100189B0C(v5, v7);
    sub_100189B0C(v5, v7);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Adding preview data to request %s", v17, 0xCu);
    swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);

    uint64_t v1 = v66;
  }

  else
  {
    sub_100189B0C(v5, v7);
    sub_100189B0C(v5, v7);
  }

  uint64_t v22 = SFAirDropSend.Request.id.getter();
  uint64_t v23 = SFAirDropSend.Request.type.getter(v22);
  uint64_t v24 = SFAirDropSend.Request.requestSource.getter(v23);
  uint64_t v26 = v25;
  if (!v13)
  {
    NSString v27 = String._bridgeToObjectiveC()();
    id v29 = (id)SFLocalizedStringForKey(v27, v28);

    if (!v29) {
      goto LABEL_17;
    }
    uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    uint64_t v13 = v30;
  }

  uint64_t v61 = v26;
  uint64_t v62 = v24;
  uint64_t v67 = v13;
  uint64_t v63 = v7;
  uint64_t v64 = v5;
  id v31 = [*(id *)(v0 + 112) modelName];
  if (v31)
  {
    uint64_t v32 = v31;
    uint64_t v44 = *(void *)(v0 + 352);
    uint64_t v46 = *(void *)(v0 + 328);
    uint64_t v47 = *(void *)(v0 + 336);
    uint64_t v49 = *(void *)(v0 + 320);
    uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v0 + 344);
    uint64_t v51 = *(void *)(v0 + 312);
    uint64_t v52 = *(void *)(v0 + 304);
    uint64_t v48 = *(void *)(v0 + 288);
    uint64_t v53 = *(void *)(v0 + 280);
    uint64_t v54 = *(void *)(v0 + 272);
    uint64_t v55 = *(void *)(v0 + 264);
    uint64_t v56 = *(void *)(v0 + 240);
    uint64_t v33 = *(void *)(v0 + 208);
    uint64_t v57 = *(void *)(v0 + 216);
    uint64_t v58 = *(void *)(v0 + 184);
    uint64_t v59 = *(void *)(v0 + 176);
    uint64_t v60 = *(void *)(v0 + 168);
    uint64_t v34 = *(void *)(v0 + 144);
    uint64_t v35 = *(void *)(v0 + 104);
    unint64_t v45 = *(void **)(v0 + 112);
    uint64_t v36 = *(void *)(v0 + 88);
    uint64_t v37 = *(void *)(v0 + 96);
    uint64_t v38 = *(void *)(v0 + 80);
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    uint64_t v41 = v40;

    uint64_t v42 = SFAirDropSend.Request.customPayload.getter();
    sub_1003E13AC( v34,  v33,  v37,  v35,  v46,  v47,  v62,  v61,  v38,  v65,  v67,  v39,  v41,  v44,  v66,  0LL,  0LL,  v64,  v63,  0LL,  0xF000000000000000LL,  0,  v42,  v43);

    v50(v36, v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v33);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v34);
    (*(void (**)(void))(v0 + 8))();
    return;
  }

  swift_bridgeObjectRelease(v66);
  __break(1u);
LABEL_17:
  swift_bridgeObjectRelease(v1);
  __break(1u);
}

uint64_t sub_1003E010C()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v3 = *(void **)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 88);
  sub_100189B0C(*(void *)(v0 + 328), *(void *)(v0 + 336));

  v1(v4, v2);
  uint64_t v5 = *(void *)(v0 + 312);
  uint64_t v6 = *(void *)(v0 + 304);
  uint64_t v8 = *(void *)(v0 + 272);
  uint64_t v7 = *(void *)(v0 + 280);
  uint64_t v9 = *(void *)(v0 + 264);
  uint64_t v10 = *(void *)(v0 + 240);
  uint64_t v12 = *(void *)(v0 + 208);
  uint64_t v11 = *(void *)(v0 + 216);
  uint64_t v13 = *(void *)(v0 + 184);
  uint64_t v15 = *(void *)(v0 + 176);
  uint64_t v16 = *(void *)(v0 + 168);
  uint64_t v17 = *(void *)(v0 + 144);
  swift_task_dealloc(*(void *)(v0 + 320));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003E0214(uint64_t a1, uint64_t a2)
{
  if (IsAppleInternalBuild(a1, a2))
  {
    uint64_t v79 = 0LL;
    unint64_t v80 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(222LL);
    v3._uint64_t countAndFlagsBits = 0x75716572204B5341LL;
    v3._object = (void *)0xEF20444920747365LL;
    String.append(_:)(v3);
    uint64_t v4 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
    uint64_t v5 = sub_100183F14( &qword_100647620,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(v2, v4, v5);
    v6._uint64_t countAndFlagsBits = 0x206570795420LL;
    v6._object = (void *)0xE600000000000000LL;
    String.append(_:)(v6);
    uint64_t v7 = (int *)_s14descr1005DF7D1C10AskRequestVMa(0LL);
    uint64_t v8 = v2 + v7[5];
    uint64_t v9 = type metadata accessor for SFAirDrop.TransferType(0LL);
    uint64_t v10 = sub_100183F14( (unint64_t *)&unk_100656460,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferType,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferType);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(v8, v9, v10);
    v11._uint64_t countAndFlagsBits = 0x207265646E655320LL;
    v11._object = (void *)0xE800000000000000LL;
    String.append(_:)(v11);
    uint64_t v12 = (uint64_t *)(v2 + v7[7]);
    uint64_t v13 = *v12;
    uint64_t v14 = (void *)v12[1];
    swift_bridgeObjectRetain(v14);
    v15._uint64_t countAndFlagsBits = v13;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v14);
    v16._uint64_t countAndFlagsBits = 0x22206D4E202CLL;
    v16._object = (void *)0xE600000000000000LL;
    String.append(_:)(v16);
    uint64_t v17 = (uint64_t *)(v2 + v7[9]);
    uint64_t v18 = *v17;
    uint64_t v19 = (void *)v17[1];
    swift_bridgeObjectRetain(v19);
    v20._uint64_t countAndFlagsBits = v18;
    v20._object = v19;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(v19);
    v21._uint64_t countAndFlagsBits = 0x20644D202C22LL;
    v21._object = (void *)0xE600000000000000LL;
    String.append(_:)(v21);
    uint64_t v22 = (uint64_t *)(v2 + v7[10]);
    uint64_t v23 = *v22;
    uint64_t v24 = (void *)v22[1];
    swift_bridgeObjectRetain(v24);
    v25._uint64_t countAndFlagsBits = v23;
    v25._object = v24;
    String.append(_:)(v25);
    swift_bridgeObjectRelease(v24);
    v26._object = (void *)0xEC000000203A736DLL;
    v26._uint64_t countAndFlagsBits = 0x6574496C7275202CLL;
    String.append(_:)(v26);
    *(void *)&__int128 v78 = *(void *)(v2 + v7[11]);
    uint64_t v27 = sub_100183098((uint64_t *)&unk_10064D7D0);
    uint64_t v28 = sub_1003E329C(&qword_1006530E0, (uint64_t *)&unk_10064D7D0);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v78, v27, v28);
    v29._uint64_t countAndFlagsBits = 0x3A73656C6966202CLL;
    v29._object = (void *)0xE900000000000020LL;
    String.append(_:)(v29);
    *(void *)&__int128 v78 = *(void *)(v2 + v7[12]);
    uint64_t v30 = sub_100183098(&qword_1006530E8);
    uint64_t v31 = sub_1003E329C(&qword_1006530F0, &qword_1006530E8);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v78, v30, v31);
    v32._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v32._object = (void *)0x800000010050E270LL;
    String.append(_:)(v32);
    LOBYTE(v78) = *(_BYTE *)(v2 + v7[16]);
    DefaultStringInterpolation.appendInterpolation<A>(_:)( &v78,  &type metadata for Bool,  &protocol witness table for Bool);
    v33._object = (void *)0x800000010050E290LL;
    v33._uint64_t countAndFlagsBits = 0xD000000000000014LL;
    String.append(_:)(v33);
    __int128 v78 = *(_OWORD *)(v2 + v7[13]);
    DefaultStringInterpolation.appendInterpolation<A>(_:)( &v78,  &type metadata for String,  &protocol witness table for String);
    v34._uint64_t countAndFlagsBits = 0x6349656C6966202CLL;
    v34._object = (void *)0xEC000000203A6E6FLL;
    String.append(_:)(v34);
    __int128 v78 = *(_OWORD *)(v2 + v7[14]);
    unint64_t v35 = sub_10021AAEC();
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v78, &type metadata for Data, v35);
    v36._object = (void *)0x800000010050E2B0LL;
    v36._uint64_t countAndFlagsBits = 0xD000000000000011LL;
    String.append(_:)(v36);
    __int128 v78 = *(_OWORD *)(v2 + v7[15]);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v78, &type metadata for Data, v35);
    v37._object = (void *)0x800000010050E2D0LL;
    v37._uint64_t countAndFlagsBits = 0xD000000000000014LL;
    String.append(_:)(v37);
    __int128 v78 = *(_OWORD *)(v2 + v7[6]);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v78, &type metadata for Data, v35);
    v38._uint64_t countAndFlagsBits = 0xD000000000000012LL;
    v38._object = (void *)0x800000010050E2F0LL;
    String.append(_:)(v38);
    __int128 v78 = *(_OWORD *)(v2 + v7[8]);
    DefaultStringInterpolation.appendInterpolation<A>(_:)( &v78,  &type metadata for String,  &protocol witness table for String);
    v39._object = (void *)0x800000010050E310LL;
    v39._uint64_t countAndFlagsBits = 0xD000000000000011LL;
    String.append(_:)(v39);
    __int128 v78 = *(_OWORD *)(v2 + v7[17]);
    unint64_t v40 = v35;
  }

  else
  {
    uint64_t v79 = 0LL;
    unint64_t v80 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(214LL);
    v41._uint64_t countAndFlagsBits = 0x75716572204B5341LL;
    v41._object = (void *)0xEF20444920747365LL;
    String.append(_:)(v41);
    uint64_t v42 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
    uint64_t v43 = sub_100183F14( &qword_100647620,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(v2, v42, v43);
    v44._uint64_t countAndFlagsBits = 0x206570795420LL;
    v44._object = (void *)0xE600000000000000LL;
    String.append(_:)(v44);
    unint64_t v45 = (int *)_s14descr1005DF7D1C10AskRequestVMa(0LL);
    uint64_t v46 = v2 + v45[5];
    uint64_t v47 = type metadata accessor for SFAirDrop.TransferType(0LL);
    uint64_t v48 = sub_100183F14( (unint64_t *)&unk_100656460,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferType,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferType);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(v46, v47, v48);
    v49._uint64_t countAndFlagsBits = 0x207265646E655320LL;
    v49._object = (void *)0xE800000000000000LL;
    String.append(_:)(v49);
    uint64_t v50 = (uint64_t *)(v2 + v45[7]);
    uint64_t v51 = *v50;
    uint64_t v52 = (void *)v50[1];
    swift_bridgeObjectRetain(v52);
    v53._uint64_t countAndFlagsBits = v51;
    v53._object = v52;
    String.append(_:)(v53);
    swift_bridgeObjectRelease(v52);
    v54._uint64_t countAndFlagsBits = 0x22206D4E202CLL;
    v54._object = (void *)0xE600000000000000LL;
    String.append(_:)(v54);
    uint64_t v55 = (uint64_t *)(v2 + v45[9]);
    uint64_t v56 = *v55;
    uint64_t v57 = (void *)v55[1];
    swift_bridgeObjectRetain(v57);
    v58._uint64_t countAndFlagsBits = v56;
    v58._object = v57;
    String.append(_:)(v58);
    swift_bridgeObjectRelease(v57);
    v59._uint64_t countAndFlagsBits = 0x20644D202C22LL;
    v59._object = (void *)0xE600000000000000LL;
    String.append(_:)(v59);
    uint64_t v60 = (uint64_t *)(v2 + v45[10]);
    uint64_t v61 = *v60;
    uint64_t v62 = (void *)v60[1];
    swift_bridgeObjectRetain(v62);
    v63._uint64_t countAndFlagsBits = v61;
    v63._object = v62;
    String.append(_:)(v63);
    swift_bridgeObjectRelease(v62);
    v64._uint64_t countAndFlagsBits = 0xD000000000000012LL;
    v64._object = (void *)0x800000010050E330LL;
    String.append(_:)(v64);
    uint64_t v65 = *(void *)(v2 + v45[11]);
    if (v65) {
      uint64_t v66 = *(void *)(v65 + 16);
    }
    else {
      uint64_t v66 = 0LL;
    }
    *(void *)&__int128 v78 = v66;
    BYTE8(v78) = v65 == 0;
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v78, &type metadata for Int, &protocol witness table for Int);
    v67._uint64_t countAndFlagsBits = 0x2E73656C6966202CLL;
    v67._object = (void *)0xEF203A746E756F63LL;
    String.append(_:)(v67);
    uint64_t v68 = *(void *)(v2 + v45[12]);
    if (v68) {
      uint64_t v69 = *(void *)(v68 + 16);
    }
    else {
      uint64_t v69 = 0LL;
    }
    *(void *)&__int128 v78 = v69;
    BYTE8(v78) = v68 == 0;
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v78, &type metadata for Int, &protocol witness table for Int);
    v70._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
    v70._object = (void *)0x800000010050E270LL;
    String.append(_:)(v70);
    LOBYTE(v78) = *(_BYTE *)(v2 + v45[16]);
    DefaultStringInterpolation.appendInterpolation<A>(_:)( &v78,  &type metadata for Bool,  &protocol witness table for Bool);
    v71._object = (void *)0x800000010050E290LL;
    v71._uint64_t countAndFlagsBits = 0xD000000000000014LL;
    String.append(_:)(v71);
    __int128 v78 = *(_OWORD *)(v2 + v45[13]);
    DefaultStringInterpolation.appendInterpolation<A>(_:)( &v78,  &type metadata for String,  &protocol witness table for String);
    v72._uint64_t countAndFlagsBits = 0x6349656C6966202CLL;
    v72._object = (void *)0xEC000000203A6E6FLL;
    String.append(_:)(v72);
    __int128 v78 = *(_OWORD *)(v2 + v45[14]);
    unint64_t v73 = sub_10021AAEC();
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v78, &type metadata for Data, v73);
    v74._object = (void *)0x800000010050E2B0LL;
    v74._uint64_t countAndFlagsBits = 0xD000000000000011LL;
    String.append(_:)(v74);
    __int128 v78 = *(_OWORD *)(v2 + v45[15]);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v78, &type metadata for Data, v73);
    v75._object = (void *)0x800000010050E2D0LL;
    v75._uint64_t countAndFlagsBits = 0xD000000000000014LL;
    String.append(_:)(v75);
    __int128 v78 = *(_OWORD *)(v2 + v45[6]);
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v78, &type metadata for Data, v73);
    v76._object = (void *)0x800000010050E310LL;
    v76._uint64_t countAndFlagsBits = 0xD000000000000011LL;
    String.append(_:)(v76);
    __int128 v78 = *(_OWORD *)(v2 + v45[17]);
    unint64_t v40 = v73;
  }

  DefaultStringInterpolation.appendInterpolation<A>(_:)(&v78, &type metadata for Data, v40);
  return v79;
}

uint64_t sub_1003E0AFC()
{
  v22[0] = 0LL;
  v22[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(118LL);
  uint64_t v17 = 0LL;
  unint64_t v18 = 0xE000000000000000LL;
  v1._uint64_t countAndFlagsBits = 0xD000000000000011LL;
  v1._object = (void *)0x800000010050E350LL;
  String.append(_:)(v1);
  uint64_t v2 = *v0;
  Swift::String v3 = (void *)v0[1];
  swift_bridgeObjectRetain(v3);
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v3);
  v5._uint64_t countAndFlagsBits = 0x20644D202C22LL;
  v5._object = (void *)0xE600000000000000LL;
  String.append(_:)(v5);
  uint64_t v6 = v0[2];
  uint64_t v7 = (void *)v0[3];
  swift_bridgeObjectRetain(v7);
  v8._uint64_t countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v7);
  v9._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v9._object = (void *)0x800000010050E370LL;
  String.append(_:)(v9);
  sub_1001870BC((uint64_t)(v0 + 4), (uint64_t)&v23, &qword_10064A730);
  sub_1001870BC((uint64_t)&v23, (uint64_t)v22, &qword_10064A730);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v22, &type metadata for Bool, &protocol witness table for Bool);
  v10._uint64_t countAndFlagsBits = 0x736553736469202CLL;
  v10._object = (void *)0xEF2044496E6F6973LL;
  String.append(_:)(v10);
  sub_1001870BC((uint64_t)(v0 + 5), (uint64_t)v22, &qword_1006462D8);
  sub_1001870BC((uint64_t)v22, (uint64_t)v21, &qword_1006462D8);
  DefaultStringInterpolation.appendInterpolation<A>(_:)( v21,  &type metadata for String,  &protocol witness table for String);
  v11._uint64_t countAndFlagsBits = 0x6F6475657370202CLL;
  v11._object = (void *)0xEC000000206D796ELL;
  String.append(_:)(v11);
  sub_1001870BC((uint64_t)(v0 + 7), (uint64_t)v21, &qword_1006462D8);
  sub_1001870BC((uint64_t)v21, (uint64_t)v20, &qword_1006462D8);
  DefaultStringInterpolation.appendInterpolation<A>(_:)( v20,  &type metadata for String,  &protocol witness table for String);
  v12._uint64_t countAndFlagsBits = 0x6F5468737570202CLL;
  v12._object = (void *)0xEC000000206E656BLL;
  String.append(_:)(v12);
  sub_1001870BC((uint64_t)(v0 + 9), (uint64_t)v20, &qword_1006462D8);
  sub_1001870BC((uint64_t)v20, (uint64_t)v19, &qword_1006462D8);
  DefaultStringInterpolation.appendInterpolation<A>(_:)( v19,  &type metadata for String,  &protocol witness table for String);
  v13._object = (void *)0x800000010050E390LL;
  v13._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v13);
  sub_1001870BC((uint64_t)(v0 + 11), (uint64_t)v19, &qword_100645150);
  sub_1001870BC((uint64_t)v19, (uint64_t)v16, &qword_100645150);
  unint64_t v14 = sub_10021AAEC();
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v16, &type metadata for Data, v14);
  return v17;
}

uint64_t sub_1003E0DC0()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100186DFC(v0, qword_100653000);
  uint64_t v1 = sub_100186DE4(v0, (uint64_t)qword_100653000);
  if (qword_100643FD8 != -1) {
    swift_once(&qword_100643FD8, sub_10023A408);
  }
  uint64_t v2 = sub_100186DE4(v0, (uint64_t)qword_1006695F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_1003E0E50(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1003E0E88 + 4 * byte_1004D9EB0[a1]))( 0x726566736E617254LL,  0xEA00000000004449LL);
}

  ;
}

unint64_t sub_1003E0E98()
{
  return 0xD000000000000010LL;
}

uint64_t sub_1003E0F54()
{
  return 0x6E6F6349656C6946LL;
}

uint64_t sub_1003E0F6C()
{
  return 0x6C69466C6C616D53LL;
}

void sub_1003E0F90()
{
}

uint64_t sub_1003E0FB0()
{
  return 0x61506D6F74737543LL;
}

uint64_t sub_1003E0FD4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1003E100C + 4 * byte_1004D9EBE[a1]))( 0x726566736E617254LL,  0xEA00000000004449LL);
}

  ;
}

unint64_t sub_1003E101C()
{
  return 0xD000000000000010LL;
}

uint64_t sub_1003E10D8()
{
  return 0x6E6F6349656C6946LL;
}

uint64_t sub_1003E10F0()
{
  return 0x6C69466C6C616D53LL;
}

void sub_1003E1114()
{
}

uint64_t sub_1003E1134()
{
  return 0x61506D6F74737543LL;
}

uint64_t sub_1003E1158(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  uint64_t v3 = sub_1003E0E50(*a1);
  Swift::String v5 = v4;
  uint64_t v6 = sub_1003E0E50(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    Swift::String v9 = v5;
  }

  else
  {
    Swift::String v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  *(void *)&double v11 = swift_bridgeObjectRelease(v5).n128_u64[0];
  swift_bridgeObjectRelease(v9, v11);
  return v10 & 1;
}

Swift::Int sub_1003E11E0()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)(v6);
  uint64_t v2 = sub_1003E0E50(v1);
  Swift::String v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

__n128 sub_1003E1240(uint64_t a1)
{
  uint64_t v3 = sub_1003E0E50(*v1);
  Swift::String v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1003E1280()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)(v6);
  uint64_t v2 = sub_1003E0E50(v1);
  Swift::String v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

unint64_t sub_1003E12DC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1003E47BC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1003E1308@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1003E0E50(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1003E1330()
{
  return sub_1003E0FD4(*v0);
}

unint64_t sub_1003E1338@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1003E47BC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1003E135C(uint64_t a1)
{
  unint64_t v2 = sub_1003E55D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003E1384(uint64_t a1)
{
  unint64_t v2 = sub_1003E55D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003E13AC@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24)
{
  uint64_t v27 = (int *)_s14descr1005DF7D1C10AskRequestVMa(0LL);
  uint64_t v44 = v27[11];
  uint64_t v46 = v27[12];
  *(void *)(a9 + v46) = _swiftEmptyArrayStorage;
  uint64_t v28 = a9 + v27[13];
  *(void *)uint64_t v28 = 0LL;
  *(void *)(v28 + 8) = 0LL;
  uint64_t v29 = a9 + v27[14];
  *(_OWORD *)uint64_t v29 = xmmword_1004CD540;
  uint64_t v52 = a9 + v27[15];
  *(_OWORD *)uint64_t v52 = xmmword_1004CD540;
  uint64_t v54 = v27[16];
  *(_BYTE *)(a9 + v54) = 0;
  uint64_t v53 = a9 + v27[17];
  *(_OWORD *)uint64_t v53 = xmmword_1004CD540;
  uint64_t v30 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v31 = *(void *)(v30 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(a9, a1, v30);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56))(a9, 0LL, 1LL, v30);
  uint64_t v32 = a9 + v27[5];
  uint64_t v33 = type metadata accessor for SFAirDrop.TransferType(0LL);
  uint64_t v34 = *(void *)(v33 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v32, a2, v33);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v32, 0LL, 1LL, v33);
  unint64_t v35 = (void *)(a9 + v27[6]);
  void *v35 = a5;
  v35[1] = a6;
  Swift::String v36 = (void *)(a9 + v27[8]);
  *Swift::String v36 = a7;
  v36[1] = a8;
  Swift::String v37 = (void *)(a9 + v27[7]);
  *Swift::String v37 = a3;
  v37[1] = a4;
  Swift::String v38 = (void *)(a9 + v27[9]);
  *Swift::String v38 = a10;
  v38[1] = a11;
  Swift::String v39 = (void *)(a9 + v27[10]);
  void *v39 = a12;
  v39[1] = a13;
  *(void *)(a9 + v44) = a14;
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(a2, v33);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(a1, v30);
  if (a15) {
    unint64_t v40 = a15;
  }
  else {
    unint64_t v40 = _swiftEmptyArrayStorage;
  }
  *(void *)&double v41 = swift_bridgeObjectRelease((const char *)*(void *)(a9 + v46), a1).n128_u64[0];
  *(void *)(a9 + v46) = v40;
  swift_bridgeObjectRelease(*(const char **)(v28 + 8), v41);
  *(void *)uint64_t v28 = a16;
  *(void *)(v28 + 8) = a17;
  sub_100189B0C(*(void *)v29, *(void *)(v29 + 8));
  *(void *)uint64_t v29 = a18;
  *(void *)(v29 + 8) = a19;
  sub_100189B0C(*(void *)v52, *(void *)(v52 + 8));
  *(void *)uint64_t v52 = a20;
  *(void *)(v52 + 8) = a21;
  *(_BYTE *)(a9 + v54) = a22;
  uint64_t result = sub_100189B0C(*(void *)v53, *(void *)(v53 + 8));
  *(void *)uint64_t v53 = a23;
  *(void *)(v53 + 8) = a24;
  return result;
}

uint64_t sub_1003E1684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v5 = sub_100183098((uint64_t *)&unk_100645130);
  void v4[9] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for URL(0LL);
  v4[10] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[11] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[12] = swift_task_alloc(v8);
  v4[13] = swift_task_alloc(v8);
  v4[14] = swift_task_alloc(v8);
  return swift_task_switch(sub_1003E1728, 0LL, 0LL);
}

void sub_1003E1728()
{
  void (*v29)(uint64_t *__return_ptr, uint64_t, uint64_t *);
  void *v30;
  uint64_t v31;
  uint64_t v32;
  os_log_s *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t, __n128);
  char *v48;
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v48 = (char *)_swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(v1 + 16);
  __n128 v4 = swift_bridgeObjectRetain((const char *)v1);
  uint64_t v5 = *(void *)(v0 + 88);
  if (v2)
  {
    uint64_t v46 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v6 = v3 + v46;
    uint64_t v7 = *(void *)(v5 + 72);
    uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v5 + 16);
    unint64_t v8 = (char *)_swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v10 = *(void *)(v0 + 72);
      uint64_t v9 = *(void *)(v0 + 80);
      v47(v10, v6, v9, v4);
      double v11 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56);
      v11(v10, 0LL, 1LL, v9);
      Swift::String v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 32);
      uint64_t v13 = v12(*(char **)(v0 + 112), *(void *)(v0 + 72), *(void *)(v0 + 80));
      if ((URL.isFileURL.getter(v13) & 1) != 0)
      {
        v12(*(char **)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 80));
        if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        {
          sub_10018D718(0, *((void *)v8 + 2) + 1LL, 1);
          unint64_t v8 = v48;
        }

        unint64_t v14 = v8;
        unint64_t v15 = *((void *)v8 + 2);
        unint64_t v16 = *((void *)v14 + 3);
        if (v15 >= v16 >> 1)
        {
          sub_10018D718(v16 > 1, v15 + 1, 1);
          unint64_t v14 = v48;
        }

        uint64_t v17 = *(void *)(v0 + 104);
        uint64_t v18 = *(void *)(v0 + 80);
        *((void *)v14 + 2) = v15 + 1;
        v12(&v14[v46 + v15 * v7], v17, v18);
        uint64_t v48 = v14;
        unint64_t v8 = v14;
      }

      else
      {
        (*(void (**)(void, void))(v5 + 8))(*(void *)(v0 + 112), *(void *)(v0 + 80));
      }

      v6 += v7;
      if (!--v2) {
        goto LABEL_13;
      }
    }
  }

  else
  {
    double v11 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56);
    unint64_t v8 = (char *)_swiftEmptyArrayStorage;
LABEL_13:
    ((void (*)(void, uint64_t, uint64_t, void, __n128))v11)( *(void *)(v0 + 72),  1LL,  1LL,  *(void *)(v0 + 80),  v4);
  }

  uint64_t v19 = *(void *)(v0 + 72);
  swift_bridgeObjectRelease(*(const char **)(v0 + 48));
  sub_100187100(v19, (uint64_t *)&unk_100645130);
  if (*((void *)v8 + 2))
  {
    uint64_t v20 = (uint64_t)v8;
    Class isa = (const __CFArray *)Array._bridgeToObjectiveC()().super.isa;
    uint64_t v22 = (void *)sub_10011488C(isa);

    if (!v22)
    {
      __break(1u);
      return;
    }

    uint64_t v23 = *(void *)(v0 + 56);
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v22);

    uint64_t v24 = *(void *)(v0 + 88);
    uint64_t v25 = *(void *)(v0 + 96);
    uint64_t v26 = *(void *)(v0 + 80);
    if (v23)
    {
      uint64_t v27 = swift_task_alloc(48LL);
      __int128 v28 = *(_OWORD *)(v0 + 56);
      *(void *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = v25;
      *(_OWORD *)(v27 + 24) = v28;
      uint64_t v29 = (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t *))sub_1003E5818;
    }

    else
    {
      uint64_t v27 = swift_task_alloc(32LL);
      *(void *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = v25;
      uint64_t v29 = (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t *))sub_1003E57FC;
    }

    unint64_t v8 = (char *)v20;
    uint64_t v30 = sub_1003DE5AC(v29, v27, v20);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v26);
    swift_task_dealloc(v27);
  }

  else
  {
    uint64_t v30 = _swiftEmptyArrayStorage;
  }

  if (qword_1006442F0 != -1) {
    swift_once(&qword_1006442F0, sub_1003E0DC0);
  }
  uint64_t v31 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v31, (uint64_t)qword_100653000);
  uint64_t v32 = swift_retain_n(v8, 2LL);
  uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
  uint64_t v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, v34))
  {
    unint64_t v35 = *(void *)(v0 + 80);
    Swift::String v36 = swift_slowAlloc(32LL, -1LL);
    Swift::String v37 = (char *)swift_slowAlloc(32LL, -1LL);
    uint64_t v48 = v37;
    *(_DWORD *)Swift::String v36 = 134218499;
    *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = *((void *)v8 + 2);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v36 + 4, v36 + 12);
    swift_release(v8);
    *(_WORD *)(v36 + 12) = 2160;
    *(void *)(v0 + 24) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v36 + 14, v36 + 22);
    *(_WORD *)(v36 + 22) = 2081;
    Swift::String v38 = swift_retain();
    Swift::String v39 = Array.description.getter(v38, v35);
    double v41 = v40;
    swift_release(v8);
    *(void *)(v0 + 32) = sub_10018CDB4(v39, (unint64_t)v41, (uint64_t *)&v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v36 + 24, v36 + 32);
    swift_bridgeObjectRelease(v41);
    swift_release_n(v8, 2LL);
    _os_log_impl( (void *)&_mh_execute_header,  v33,  v34,  "Adding file items (count=%ld) to request: %{private,mask.hash}s",  (uint8_t *)v36,  0x20u);
    swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1LL, -1LL);
    swift_slowDealloc(v36, -1LL, -1LL);
  }

  else
  {
    swift_release_n(v8, 3LL);
  }

  uint64_t v43 = *(void *)(v0 + 104);
  uint64_t v42 = *(void *)(v0 + 112);
  uint64_t v44 = *(void *)(v0 + 96);
  unint64_t v45 = *(void *)(v0 + 72);
  **(void **)(v0 + 40) = v30;
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  (*(void (**)(void))(v0 + 8))();
}

double sub_1003E1C34@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, void *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v27 = a4;
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v24 - v14;
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v17((char *)&v24 - v14, a1, v10);
  v17(v13, a2, v10);
  if (*(void *)(a3 + 16) && (unint64_t v18 = sub_1003AD858(a1), (v19 & 1) != 0)) {
    int v20 = *(unsigned __int8 *)(*(void *)(a3 + 56) + v18);
  }
  else {
    int v20 = 0;
  }
  sub_1003E4804((uint64_t)v15, (uint64_t)v13, v20, (uint64_t *)v25);
  if (v5)
  {
    *uint64_t v27 = v5;
  }

  else
  {
    __int128 v22 = v25[3];
    *(_OWORD *)(a5 + 32) = v25[2];
    *(_OWORD *)(a5 + 48) = v22;
    *(_OWORD *)(a5 + 64) = v25[4];
    *(_WORD *)(a5 + 80) = v26;
    double result = *(double *)v25;
    __int128 v23 = v25[1];
    *(_OWORD *)a5 = v25[0];
    *(_OWORD *)(a5 + swift_unknownObjectWeakDestroy(v0 + 16) = v23;
  }

  return result;
}

double sub_1003E1D78@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v20 - v13;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v16((char *)&v20 - v13, a1, v9);
  v16(v12, a2, v9);
  sub_1003E4804((uint64_t)v14, (uint64_t)v12, 0, (uint64_t *)v21);
  if (v4)
  {
    *a3 = v4;
  }

  else
  {
    __int128 v18 = v21[3];
    *(_OWORD *)(a4 + 32) = v21[2];
    *(_OWORD *)(a4 + 48) = v18;
    *(_OWORD *)(a4 + 64) = v21[4];
    *(_WORD *)(a4 + 80) = v22;
    double result = *(double *)v21;
    __int128 v19 = v21[1];
    *(_OWORD *)a4 = v21[0];
    *(_OWORD *)(a4 + swift_unknownObjectWeakDestroy(v0 + 16) = v19;
  }

  return result;
}

uint64_t sub_1003E1E94(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100183098(&qword_100653148);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10019A708(a1, v9);
  unint64_t v11 = sub_1003E55D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &_s14descr1005DF7D1C10AskRequestV10CodingKeysON,  &_s14descr1005DF7D1C10AskRequestV10CodingKeysON,  v11,  v9,  v10);
  LOBYTE(v42) = 0;
  uint64_t v12 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v13 = sub_100183F14( &qword_10064D900,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3, &v42, v5, v12, v13);
  if (!v2)
  {
    uint64_t v14 = (int *)_s14descr1005DF7D1C10AskRequestVMa(0LL);
    uint64_t v15 = v3 + v14[5];
    LOBYTE(v42) = 1;
    uint64_t v16 = type metadata accessor for SFAirDrop.TransferType(0LL);
    uint64_t v17 = sub_100183F14( &qword_100653150,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferType,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferType);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v15, &v42, v5, v16, v17);
    __int128 v42 = *(_OWORD *)(v3 + v14[6]);
    char v41 = 2;
    unint64_t v18 = sub_10020C2A8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v18);
    __int128 v19 = (uint64_t *)(v3 + v14[7]);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    LOBYTE(v42) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v42, v5);
    __int16 v22 = (uint64_t *)(v3 + v14[8]);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    LOBYTE(v42) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v24, &v42, v5);
    uint64_t v25 = (uint64_t *)(v3 + v14[9]);
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    LOBYTE(v42) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v26, v27, &v42, v5);
    __int128 v28 = (uint64_t *)(v3 + v14[10]);
    uint64_t v29 = *v28;
    uint64_t v30 = v28[1];
    LOBYTE(v42) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v29, v30, &v42, v5);
    *(void *)&__int128 v42 = *(void *)(v3 + v14[11]);
    char v41 = 7;
    uint64_t v31 = sub_100183098((uint64_t *)&unk_10064D7D0);
    uint64_t v32 = sub_1003E5658( &qword_100653158,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v42, &v41, v5, v31, v32);
    *(void *)&__int128 v42 = *(void *)(v3 + v14[12]);
    char v41 = 8;
    uint64_t v33 = sub_100183098(&qword_1006530E8);
    uint64_t v34 = sub_1003E56B8( &qword_100653160,  (void (*)(void))sub_1003E5720,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v42, &v41, v5, v33, v34);
    unint64_t v35 = (uint64_t *)(v3 + v14[13]);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    LOBYTE(v42) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v36, v37, &v42, v5);
    __int128 v42 = *(_OWORD *)(v3 + v14[14]);
    char v41 = 10;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v18);
    __int128 v42 = *(_OWORD *)(v3 + v14[15]);
    char v41 = 11;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v18);
    uint64_t v38 = *(unsigned __int8 *)(v3 + v14[16]);
    LOBYTE(v42) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v38, &v42, v5);
    __int128 v42 = *(_OWORD *)(v3 + v14[17]);
    char v41 = 13;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v42, &v41, v5, &type metadata for Data, v18);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1003E2310@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v62 = a2;
  uint64_t v4 = sub_100183098(&qword_100647608);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100183098((uint64_t *)&unk_100647610);
  __chkstk_darwin(v7);
  Swift::String v63 = (uint64_t *)((char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v65 = sub_100183098(&qword_100653118);
  uint64_t v9 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  unint64_t v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = _s14descr1005DF7D1C10AskRequestVMa(0LL);
  uint64_t v13 = (int *)__chkstk_darwin(v12);
  uint64_t v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v73 = v13[11];
  *(void *)&v15[v73] = 0LL;
  uint64_t v72 = v13[12];
  *(void *)&v15[v72] = _swiftEmptyArrayStorage;
  uint64_t v16 = &v15[v13[13]];
  *(void *)uint64_t v16 = 0LL;
  *((void *)v16 + 1) = 0LL;
  Swift::String v70 = v16;
  uint64_t v17 = &v15[v13[14]];
  *(_OWORD *)uint64_t v17 = xmmword_1004CD540;
  uint64_t v68 = &v15[v13[15]];
  uint64_t v69 = v17;
  *(_OWORD *)uint64_t v68 = xmmword_1004CD540;
  uint64_t v18 = v13[16];
  v15[v18] = 0;
  Swift::String v71 = v13;
  __int128 v19 = &v15[v13[17]];
  uint64_t v66 = a1;
  Swift::String v67 = v19;
  *(_OWORD *)__int128 v19 = xmmword_1004CD540;
  uint64_t v21 = a1[3];
  uint64_t v20 = a1[4];
  sub_10019A708(a1, v21);
  unint64_t v22 = sub_1003E55D0();
  Swift::String v64 = v11;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &_s14descr1005DF7D1C10AskRequestV10CodingKeysON,  &_s14descr1005DF7D1C10AskRequestV10CodingKeysON,  v22,  v21,  v20);
  if (v2)
  {
    sub_10018709C(v66);
    uint64_t v29 = v67;
    *(void *)&double v31 = swift_bridgeObjectRelease((const char *)*(void *)&v15[v73], v30).n128_u64[0];
    *(void *)&double v32 = swift_bridgeObjectRelease((const char *)*(void *)&v15[v72], v31).n128_u64[0];
    swift_bridgeObjectRelease(*((const char **)v70 + 1), v32);
    sub_100189B0C(*(void *)v69, *((void *)v69 + 1));
    sub_100189B0C(*(void *)v68, *((void *)v68 + 1));
    return sub_100189B0C(*(void *)v29, *((void *)v29 + 1));
  }

  else
  {
    uint64_t v23 = v6;
    uint64_t v61 = v18;
    uint64_t v24 = v9;
    uint64_t v25 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
    LOBYTE(v74) = 0;
    uint64_t v26 = sub_100183F14( &qword_10064D8F0,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
    uint64_t v27 = v63;
    uint64_t v28 = v65;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v63, v25, &v74, v65, v25, v26);
    sub_1001870BC((uint64_t)v27, (uint64_t)v15, (uint64_t *)&unk_100647610);
    uint64_t v33 = type metadata accessor for SFAirDrop.TransferType(0LL);
    LOBYTE(v74) = 1;
    uint64_t v34 = sub_100183F14( &qword_100653128,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferType,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferType);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v23, v33, &v74, v28, v33, v34);
    unint64_t v35 = v71;
    sub_1001870BC((uint64_t)v23, (uint64_t)&v15[v71[5]], &qword_100647608);
    char v75 = 2;
    uint64_t v36 = (void *)sub_10020C198();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v74,  &type metadata for Data,  &v75,  v28,  &type metadata for Data,  v36);
    Swift::String v63 = v36;
    *(_OWORD *)&v15[v35[6]] = v74;
    LOBYTE(v74) = 3;
    uint64_t v37 = KeyedDecodingContainer.decode(_:forKey:)(&v74, v28);
    uint64_t v38 = (uint64_t *)&v15[v35[7]];
    *uint64_t v38 = v37;
    v38[1] = v39;
    LOBYTE(v74) = 4;
    uint64_t v40 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v74, v28);
    char v41 = (uint64_t *)&v15[v35[8]];
    *char v41 = v40;
    v41[1] = v42;
    LOBYTE(v74) = 5;
    uint64_t v43 = KeyedDecodingContainer.decode(_:forKey:)(&v74, v28);
    uint64_t v44 = (uint64_t *)&v15[v35[9]];
    uint64_t *v44 = v43;
    v44[1] = v45;
    LOBYTE(v74) = 6;
    uint64_t v46 = KeyedDecodingContainer.decode(_:forKey:)(&v74, v28);
    uint64_t v47 = (uint64_t *)&v15[v35[10]];
    *uint64_t v47 = v46;
    v47[1] = v48;
    uint64_t v49 = sub_100183098((uint64_t *)&unk_10064D7D0);
    char v75 = 7;
    uint64_t v50 = sub_1003E5658( &qword_100653130,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v74, v49, &v75, v28, v49, v50);
    *(void *)&v15[v73] = v74;
    uint64_t v51 = sub_100183098(&qword_1006530E8);
    char v75 = 8;
    uint64_t v52 = sub_1003E56B8( &qword_100653138,  (void (*)(void))sub_1003E5614,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v74, v51, &v75, v28, v51, v52);
    *(void *)&v15[v72] = v74;
    LOBYTE(v74) = 9;
    uint64_t v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v74, v28);
    uint64_t v54 = v70;
    *(void *)Swift::String v70 = v53;
    *((void *)v54 + 1) = v55;
    char v75 = 10;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v74,  &type metadata for Data,  &v75,  v65,  &type metadata for Data,  v63);
    *(_OWORD *)uint64_t v69 = v74;
    char v75 = 11;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v74,  &type metadata for Data,  &v75,  v65,  &type metadata for Data,  v63);
    *(_OWORD *)uint64_t v68 = v74;
    LOBYTE(v74) = 12;
    char v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v74, v65);
    v15[v61] = v56;
    char v75 = 13;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v74,  &type metadata for Data,  &v75,  v65,  &type metadata for Data,  v63);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v64, v65);
    __int128 v57 = v74;
    Swift::String v58 = v67;
    sub_100189B0C(*(void *)v67, *((void *)v67 + 1));
    *(_OWORD *)Swift::String v58 = v57;
    sub_1001A4B84((uint64_t)v15, v62, _s14descr1005DF7D1C10AskRequestVMa);
    sub_10018709C(v66);
    return sub_1001A4BC8((uint64_t)v15, _s14descr1005DF7D1C10AskRequestVMa);
  }

uint64_t sub_1003E2B40(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1003E2B7C + 4 * byte_1004D9ECC[a1]))( 0xD000000000000014LL,  0x8000000100502E40LL);
}

unint64_t sub_1003E2B7C()
{
  return 0xD000000000000011LL;
}

void sub_1003E2BE0()
{
}

uint64_t sub_1003E2BF8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1003E2C34 + 4 * byte_1004D9ED3[a1]))( 0xD000000000000014LL,  0x8000000100502E40LL);
}

unint64_t sub_1003E2C34()
{
  return 0xD000000000000011LL;
}

void sub_1003E2C98()
{
}

uint64_t sub_1003E2CB0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003E2310(a1, a2);
}

uint64_t sub_1003E2CC4(void *a1)
{
  return sub_1003E1E94(a1);
}

void sub_1003E2CDC(char *a1)
{
}

void sub_1003E2CE8()
{
}

void sub_1003E2CF4(uint64_t a1)
{
}

void sub_1003E2CFC(uint64_t a1)
{
}

unint64_t sub_1003E2D04@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_1005D1BF8;
  unint64_t result = sub_1003E5DA4(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_1003E2D38@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1003E2B40(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1003E2D60()
{
  return sub_1003E2BF8(*v0);
}

unint64_t sub_1003E2D68@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_1005D1BF8;
  unint64_t result = sub_1003E5DA4(a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_1003E2D94(uint64_t a1)
{
  unint64_t v2 = sub_1003E558C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003E2DBC(uint64_t a1)
{
  unint64_t v2 = sub_1003E558C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003E2DE4(void *a1)
{
  Swift::OpaquePointer v3 = v1;
  uint64_t v5 = sub_100183098(&qword_100653110);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10019A708(a1, v9);
  unint64_t v11 = sub_1003E558C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &_s14descr1005DF7D1C11AskResponseV10CodingKeysON,  &_s14descr1005DF7D1C11AskResponseV10CodingKeysON,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  v27[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, v27, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    v27[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, v27, v5);
    uint64_t v16 = *((unsigned __int8 *)v3 + 32);
    v27[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v27, v5);
    uint64_t v17 = v3[5];
    uint64_t v18 = v3[6];
    v27[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, v27, v5);
    uint64_t v19 = v3[7];
    uint64_t v20 = v3[8];
    v27[0] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, v27, v5);
    uint64_t v21 = v3[9];
    uint64_t v22 = v3[10];
    v27[0] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, v27, v5);
    sub_1001870BC((uint64_t)(v3 + 11), (uint64_t)v28, &qword_100645150);
    sub_1001870BC((uint64_t)v28, (uint64_t)v27, &qword_100645150);
    char v26 = 6;
    unint64_t v23 = sub_10020C2A8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v27, &v26, v5, &type metadata for Data, v23);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1003E2FF8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1003E302C + 4 * byte_1004D9EDA[a1]))( 0x656D614E656C6946LL,  0xE800000000000000LL);
}

uint64_t sub_1003E302C()
{
  return 0x65707954656C6946LL;
}

uint64_t sub_1003E3040()
{
  return 0x54627553656C6946LL;
}

uint64_t sub_1003E3060()
{
  return 0x657A6953656C6946LL;
}

uint64_t sub_1003E3074()
{
  return 0x506D6F42656C6946LL;
}

uint64_t sub_1003E3094()
{
  return 0x69447349656C6946LL;
}

unint64_t sub_1003E30B8()
{
  return 0xD000000000000019LL;
}

uint64_t sub_1003E30D4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1003E3108 + 4 * byte_1004D9EE1[a1]))( 0x656D614E656C6946LL,  0xE800000000000000LL);
}

uint64_t sub_1003E3108()
{
  return 0x65707954656C6946LL;
}

uint64_t sub_1003E311C()
{
  return 0x54627553656C6946LL;
}

uint64_t sub_1003E313C()
{
  return 0x657A6953656C6946LL;
}

uint64_t sub_1003E3150()
{
  return 0x506D6F42656C6946LL;
}

uint64_t sub_1003E3170()
{
  return 0x69447349656C6946LL;
}

unint64_t sub_1003E3194()
{
  return 0xD000000000000019LL;
}

__n128 sub_1003E31B0@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(void *)(a2 + 96) = v8;
    __int128 v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
    __n128 result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }

  return result;
}

uint64_t sub_1003E320C(void *a1)
{
  return sub_1003E2DE4(a1);
}

uint64_t sub_1003E3254()
{
  return sub_1003E0AFC();
}

uint64_t sub_1003E329C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_100183124(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

void sub_1003E32DC(char *a1)
{
}

void sub_1003E32E8()
{
}

void sub_1003E32F4(uint64_t a1)
{
}

void sub_1003E32FC(uint64_t a1)
{
}

unint64_t sub_1003E3304@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_1005D1CC0;
  unint64_t result = sub_1003E5DA4(*a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_1003E3338@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1003E2FF8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1003E3360()
{
  return sub_1003E30D4(*v0);
}

unint64_t sub_1003E3368@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  v3._rawValue = &off_1005D1CC0;
  unint64_t result = sub_1003E5DA4(a1, v3);
  *a2 = result;
  return result;
}

uint64_t sub_1003E3394(uint64_t a1)
{
  unint64_t v2 = sub_1003E61C4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003E33BC(uint64_t a1)
{
  unint64_t v2 = sub_1003E61C4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003E33E4(void *a1)
{
  Swift::OpaquePointer v3 = v1;
  uint64_t v5 = sub_100183098(&qword_1006531D0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10019A708(a1, v9);
  unint64_t v11 = sub_1003E61C4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &_s14descr1005DF7D1C10AskRequestV8FileInfoV10CodingKeysON,  &_s14descr1005DF7D1C10AskRequestV8FileInfoV10CodingKeysON,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v32 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v32, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    char v31 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v31, v5);
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    char v30 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v30, v5);
    uint64_t v18 = v3[6];
    uint64_t v19 = *((unsigned __int8 *)v3 + 56);
    char v29 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v29, v5);
    uint64_t v20 = v3[8];
    uint64_t v21 = v3[9];
    char v28 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, &v28, v5);
    uint64_t v22 = *((unsigned __int8 *)v3 + 80);
    char v27 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v22, &v27, v5);
    uint64_t v23 = *((unsigned __int8 *)v3 + 81);
    char v26 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, &v26, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

double sub_1003E35C4@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_WORD *)(a2 + 80) = v8;
    double result = *(double *)v7;
    __int128 v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  }

  return result;
}

uint64_t sub_1003E361C(void *a1)
{
  return sub_1003E33E4(a1);
}

uint64_t sub_1003E3630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  uint64_t v7 = sub_100183098(&qword_100645128);
  v6[8] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  void v6[9] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v6[10] = v9;
  v6[11] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  v6[12] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v6[13] = v11;
  void v6[14] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = (*(void *)(*(void *)(sub_100183098(&qword_10064DA60) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[15] = swift_task_alloc(v12);
  v6[16] = swift_task_alloc(v12);
  uint64_t v13 = _s14descr1005DF7D1C10AskRequestVMa(0LL);
  v6[17] = v13;
  v6[18] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for SDAirDropServerConnection(0LL);
  v6[19] = v14;
  unint64_t v15 = (*(void *)(*(void *)(v14 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[20] = swift_task_alloc(v15);
  v6[21] = swift_task_alloc(v15);
  uint64_t v16 = sub_100183098(&qword_100647608);
  v6[22] = swift_task_alloc((*(void *)(*(void *)(v16 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for SFAirDrop.TransferType(0LL);
  v6[23] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v6[24] = v18;
  unint64_t v19 = (*(void *)(v18 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[25] = swift_task_alloc(v19);
  v6[26] = swift_task_alloc(v19);
  v6[27] = swift_task_alloc(v19);
  v6[28] = swift_task_alloc(v19);
  uint64_t v20 = type metadata accessor for SFAirDropReceive.AskRequest.ItemInfo(0LL);
  v6[29] = v20;
  uint64_t v21 = *(void *)(v20 - 8);
  v6[30] = v21;
  unint64_t v22 = (*(void *)(v21 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[31] = swift_task_alloc(v22);
  v6[32] = swift_task_alloc(v22);
  v6[33] = swift_task_alloc(v22);
  uint64_t v23 = sub_100183098((uint64_t *)&unk_100645130);
  v6[34] = swift_task_alloc((*(void *)(*(void *)(v23 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for URL(0LL);
  v6[35] = v24;
  uint64_t v25 = *(void *)(v24 - 8);
  v6[36] = v25;
  unint64_t v26 = (*(void *)(v25 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[37] = swift_task_alloc(v26);
  v6[38] = swift_task_alloc(v26);
  return swift_task_switch(sub_1003E3884, 0LL, 0LL);
}

uint64_t sub_1003E3884()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[7];
  uint64_t v3 = *(void *)(v2 + *(int *)(v1 + 44));
  if (v3 && (uint64_t v4 = *(void *)(v3 + 16)) != 0)
  {
    uint64_t v5 = v0[36];
    swift_bridgeObjectRetain(*(const char **)(v2 + *(int *)(v1 + 44)));
    __int128 v6 = (const char **)(v3 + 40);
    uint64_t v7 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v9 = v0[34];
      uint64_t v8 = v0[35];
      uint64_t v10 = (uint64_t)*(v6 - 1);
      uint64_t v11 = *v6;
      swift_bridgeObjectRetain(*v6);
      URL.init(string:)(v10, v11);
      __n128 v12 = swift_bridgeObjectRelease(v11);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v5 + 48))(v9, 1LL, v8, v12) == 1)
      {
        sub_100187100(v0[34], (uint64_t *)&unk_100645130);
      }

      else
      {
        uint64_t v14 = v0[37];
        uint64_t v13 = v0[38];
        uint64_t v15 = v0[35];
        uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
        v16(v13, v0[34], v15);
        v16(v14, v13, v15);
        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0) {
          uint64_t v7 = (void *)sub_10018BD60(0, v7[2] + 1LL, 1, (unint64_t)v7);
        }
        unint64_t v18 = v7[2];
        unint64_t v17 = v7[3];
        if (v18 >= v17 >> 1) {
          uint64_t v7 = (void *)sub_10018BD60(v17 > 1, v18 + 1, 1, (unint64_t)v7);
        }
        uint64_t v19 = v0[37];
        uint64_t v20 = v0[35];
        v7[2] = v18 + 1;
        v16( (uint64_t)v7 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
        + *(void *)(v5 + 72) * v18,
          v19,
          v20);
      }

      v6 += 2;
      --v4;
    }

    while (v4);
    swift_bridgeObjectRelease((const char *)v3);
    uint64_t v1 = v0[17];
    uint64_t v2 = v0[7];
  }

  else
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
  }

  v0[39] = v7;
  uint64_t v21 = *(void *)(v2 + *(int *)(v1 + 48));
  id v132 = v0;
  if (v21 && (uint64_t v22 = *(void *)(v21 + 16)) != 0)
  {
    uint64_t v120 = v7;
    uint64_t v23 = v0[30];
    swift_bridgeObjectRetain((const char *)v21);
    uint64_t v24 = v21 + 56;
    uint64_t v25 = _swiftEmptyArrayStorage;
    uint64_t v121 = v21;
    uint64_t v122 = v23;
    do
    {
      unint64_t v26 = *(const char **)v24;
      if (*(void *)v24)
      {
        uint64_t v27 = *(void *)(v24 - 24);
        char v28 = *(char **)(v24 - 16);
        uint64_t v130 = *(void *)(v24 + 8);
        uint64_t v128 = *(void *)(v24 - 8);
        uint64_t v129 = *(const char **)(v24 + 16);
        char v29 = *(const char **)(v24 + 48);
        unsigned int v127 = *(unsigned __int8 *)(v24 + 56);
        char v30 = *(_BYTE *)(v24 + 57);
        uint64_t v123 = v22;
        if (v29)
        {
          uint64_t v126 = *(void *)(v24 + 40);
          swift_bridgeObjectRetain(v26);
          unint64_t v125 = (unint64_t)v29;
        }

        else
        {
          uint64_t v133 = 12078LL;
          unint64_t v134 = 0xE200000000000000LL;
          swift_bridgeObjectRetain(v26);
          swift_bridgeObjectRetain(v28);
          v36._uint64_t countAndFlagsBits = v27;
          v36._object = v28;
          String.append(_:)(v36);
          swift_bridgeObjectRelease(v28);
          unint64_t v125 = 0xE200000000000000LL;
          uint64_t v126 = 12078LL;
        }

        uint64_t v37 = v30 & 1;
        uint64_t v38 = v132[32];
        uint64_t v39 = v132[33];
        uint64_t v124 = v132[31];
        uint64_t v40 = v132[29];
        swift_bridgeObjectRetain(v129);
        swift_bridgeObjectRetain(v28);
        swift_bridgeObjectRetain(v29);
        SFAirDropReceive.AskRequest.ItemInfo.init(convertMediaFormats:fileBomPath:fileIsDirectory:fileName:fileSubType:fileType:)( v37,  v126,  v125,  v127,  v27,  v28,  v130,  v129,  v128,  v26);
        char v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v122 + 32);
        v41(v39, v38, v40);
        v41(v124, v39, v40);
        if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0) {
          uint64_t v25 = (void *)sub_10018C850(0, v25[2] + 1LL, 1, (unint64_t)v25);
        }
        uint64_t v0 = v132;
        uint64_t v21 = v121;
        uint64_t v22 = v123;
        unint64_t v43 = v25[2];
        unint64_t v42 = v25[3];
        if (v43 >= v42 >> 1) {
          uint64_t v25 = (void *)sub_10018C850(v42 > 1, v43 + 1, 1, (unint64_t)v25);
        }
        uint64_t v44 = v132[31];
        uint64_t v45 = v132[29];
        _OWORD v25[2] = v43 + 1;
        v41( (uint64_t)v25 + ((*(unsigned __int8 *)(v122 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80))
        + *(void *)(v122 + 72) * v43,
          v44,
          v45);
      }

      else
      {
        if (qword_1006442F0 != -1) {
          swift_once(&qword_1006442F0, sub_1003E0DC0);
        }
        uint64_t v31 = type metadata accessor for Logger(0LL);
        uint64_t v32 = sub_100186DE4(v31, (uint64_t)qword_100653000);
        uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
        os_log_type_t v34 = static os_log_type_t.error.getter(v33);
        if (os_log_type_enabled(v33, v34))
        {
          unint64_t v35 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)unint64_t v35 = 0;
          _os_log_impl((void *)&_mh_execute_header, v33, v34, "Missing fileType for ASK", v35, 2u);
          swift_slowDealloc(v35, -1LL, -1LL);
        }
      }

      v24 += 88LL;
      --v22;
    }

    while (v22);
    swift_bridgeObjectRelease((const char *)v21);
    uint64_t v7 = v120;
  }

  else
  {
    uint64_t v25 = _swiftEmptyArrayStorage;
  }

  v0[40] = v25;
  if (v25[2] || !v7[2]) {
    uint64_t v46 = (unsigned int *)&enum case for SFAirDrop.TransferType.files(_:);
  }
  else {
    uint64_t v46 = (unsigned int *)&enum case for SFAirDrop.TransferType.links(_:);
  }
  uint64_t v47 = v0[28];
  uint64_t v48 = v0[26];
  uint64_t v49 = v0[23];
  uint64_t v50 = v0[24];
  uint64_t v51 = v0[22];
  uint64_t v52 = v0[17];
  uint64_t v53 = v0[7];
  (*(void (**)(uint64_t, void, uint64_t))(v50 + 104))(v47, *v46, v49);
  sub_1001915A4(v53 + *(int *)(v52 + 20), v51, &qword_100647608);
  uint64_t v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16);
  v0[41] = v54;
  v54(v48, v47, v49);
  int v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v51, 1LL, v49);
  uint64_t v56 = v0[27];
  uint64_t v57 = v0[23];
  uint64_t v58 = v0[24];
  uint64_t v59 = v0[22];
  if (v55 == 1)
  {
    (*(void (**)(void, void, void))(v58 + 32))(v0[27], v0[26], v0[23]);
    sub_100187100(v59, &qword_100647608);
  }

  else
  {
    (*(void (**)(void, void))(v58 + 8))(v0[26], v0[23]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 32))(v56, v59, v57);
  }

  uint64_t v60 = (char *)(v0 + 49);
  uint64_t v61 = (uint64_t *)(v0[7] + *(int *)(v0[17] + 24LL));
  unint64_t v62 = v61[1];
  if (v62 >> 60 == 15)
  {
    Swift::String v63 = 0LL;
    uint64_t v64 = 0LL;
    uint64_t v65 = 0LL;
    uint64_t v66 = 0LL;
    unint64_t v67 = 0LL;
LABEL_43:
    char v68 = 0;
    uint64_t v69 = v132;
    uint64_t v70 = v132[7];
    Swift::String v71 = v63;
    goto LABEL_60;
  }

  uint64_t v72 = v0;
  uint64_t v73 = *v61;
  uint64_t v74 = v0[21];
  uint64_t v75 = v0[19];
  sub_1001A4B84(v72[5], v74, type metadata accessor for SDAirDropServerConnection);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v74, v75);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v77 = v132[21];
      __int128 v78 = (void *)v132[4];
      sub_10019BA8C(v73, v62);
      sub_1001A4BC8(v77, type metadata accessor for SDAirDropServerConnection);
      char v79 = sub_1002E170C(v78);
      sub_100189B0C(v73, v62);
    }

    else
    {
      uint64_t v81 = (uint64_t *)v132[21];
      uint64_t v82 = v132[9];
      uint64_t v83 = v132[10];
      uint64_t v84 = (void *)v132[4];
      uint64_t v85 = *v81;
      sub_10019BA8C(v73, v62);
      swift_release(v85);
      uint64_t v86 = (char *)v81 + *(int *)(sub_100183098(&qword_100649710) + 48);
      char v79 = sub_1002E170C(v84);
      sub_100189B0C(v73, v62);
      (*(void (**)(char *, uint64_t))(v83 + 8))(v86, v82);
    }
  }

  else
  {
    uint64_t v80 = *(void *)v132[21];
    sub_10019BA8C(v73, v62);
    char v79 = sub_1002E1CBC();
    sub_100189B0C(v73, v62);
    swift_release(v80);
  }

  unint64_t v87 = v61[1];
  if (v87 >> 60 == 15)
  {
    Swift::String v63 = 0LL;
    uint64_t v65 = 0LL;
    uint64_t v66 = 0LL;
    unint64_t v67 = 0LL;
    uint64_t v64 = 0LL;
    if ((v79 & 1) == 0) {
      goto LABEL_43;
    }
  }

  else
  {
    uint64_t v88 = *v61;
    uint64_t v89 = v132[19];
    uint64_t v90 = v132[20];
    sub_1001A4B84(v132[5], v90, type metadata accessor for SDAirDropServerConnection);
    int v91 = swift_getEnumCaseMultiPayload(v90, v89);
    if (v91)
    {
      if (v91 == 1)
      {
        uint64_t v92 = v132[20];
        char v93 = (void *)v132[4];
        sub_10019BA8C(v88, v87);
        sub_1001A4BC8(v92, type metadata accessor for SDAirDropServerConnection);
        uint64_t v66 = sub_1002E0C5C(v93);
        uint64_t v65 = v94;
        uint64_t v64 = v95;
        Swift::String v63 = v96;
        sub_100189B0C(v88, v87);
        unint64_t v67 = 0LL;
        if ((v79 & 1) == 0) {
          goto LABEL_43;
        }
      }

      else
      {
        uint64_t v99 = (uint64_t *)v132[20];
        uint64_t v100 = v132[10];
        uint64_t v131 = v132[9];
        uint64_t v101 = (void *)v132[4];
        uint64_t v102 = *v99;
        sub_10019BA8C(v88, v87);
        swift_release(v102);
        id v103 = (char *)v99 + *(int *)(sub_100183098(&qword_100649710) + 48);
        uint64_t v66 = sub_1002E0C5C(v101);
        uint64_t v65 = v104;
        uint64_t v64 = v105;
        Swift::String v63 = v106;
        sub_100189B0C(v88, v87);
        (*(void (**)(char *, uint64_t))(v100 + 8))(v103, v131);
        unint64_t v67 = 0LL;
        if ((v79 & 1) == 0) {
          goto LABEL_43;
        }
      }
    }

    else
    {
      uint64_t v97 = (void *)v132[4];
      uint64_t v98 = *(void *)v132[20];
      sub_10019BA8C(v88, v87);
      sub_1002E10F8(v97, &v133);
      unint64_t v67 = v134;
      uint64_t v66 = v135;
      uint64_t v65 = v136;
      uint64_t v64 = v137;
      Swift::String v63 = v138;
      swift_release(v98);
      sub_100189B0C(v88, v87);
      if ((v79 & 1) == 0) {
        goto LABEL_43;
      }
    }
  }

  Swift::String v71 = v63;
  uint64_t v69 = v132;
  uint64_t v70 = v132[7];
  uint64_t v107 = (uint64_t *)(v70 + *(int *)(v132[17] + 36LL));
  uint64_t v64 = *v107;
  Swift::String v63 = (const char *)v107[1];
  char v68 = 1;
LABEL_60:
  *uint64_t v60 = v68;
  v69[44] = v66;
  v69[45] = v67;
  v69[42] = v71;
  v69[43] = v65;
  uint64_t v108 = v69[18];
  swift_bridgeObjectRetain(v63);
  sub_1001A4B84(v70, v108, _s14descr1005DF7D1C10AskRequestVMa);
  uint64_t v110 = v69[17];
  uint64_t v109 = v69[18];
  if (!v63)
  {
    double v111 = (uint64_t *)(v109 + *(int *)(v110 + 36));
    uint64_t v64 = *v111;
    Swift::String v63 = (const char *)v111[1];
    swift_bridgeObjectRetain(v63);
  }

  v69[46] = v64;
  v69[47] = v63;
  uint64_t v112 = v69[7];
  sub_1001A4BC8(v109, _s14descr1005DF7D1C10AskRequestVMa);
  unint64_t v113 = sub_10025F338();
  os_log_type_t v114 = (void *)static NSUserDefaults.airdrop.getter(v113);
  v60[1] = SFAirDropUserDefaults.alwaysAutoAccept.getter() & 1;

  uint64_t v115 = (uint64_t *)(v112 + *(int *)(v110 + 28));
  uint64_t v117 = *v115;
  uint64_t v116 = v115[1];
  uint64_t v118 = (void *)swift_task_alloc(dword_10064DA6C);
  v69[48] = v118;
  void *v118 = v69;
  v118[1] = sub_1003E4200;
  return sub_1002F5BA4(v69[16], v117, v116, v66, v65);
}

uint64_t sub_1003E4200()
{
  return swift_task_switch(sub_1003E4254, 0LL, 0LL);
}

uint64_t sub_1003E4254(uint64_t a1)
{
  uint64_t v2 = SFAirDrop.TransferType.isOnlyExchange.getter(a1);
  if ((v2 & 1) != 0
    || (uint64_t v3 = *(void *)(v1 + 56) + *(int *)(*(void *)(v1 + 136) + 60LL), v4 = *(void *)(v3 + 8), v4 >> 60 == 15))
  {
    CGImageRef v5 = 0LL;
  }

  else
  {
    uint64_t v12 = *(void *)v3;
    sub_10019BA8C(*(void *)v3, *(void *)(v3 + 8));
    Class isa = (const __CFData *)Data._bridgeToObjectiveC()().super.isa;
    CGImageRef v5 = sub_10008DF74(isa);

    if (v5)
    {
      uint64_t v14 = v5;
      sub_100189B0C(v12, v4);
    }

    else
    {
      uint64_t v2 = sub_100189B0C(v12, v4);
    }
  }

  CGImageRef v97 = v5;
  if ((SFAirDrop.TransferType.isOnlyExchange.getter(v2) & 1) == 0)
  {
    uint64_t v6 = *(void *)(v1 + 56) + *(int *)(*(void *)(v1 + 136) + 56LL);
    unint64_t v7 = *(void *)(v6 + 8);
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *(void *)v6;
      sub_10019BA8C(*(void *)v6, *(void *)(v6 + 8));
      uint64_t v9 = (const __CFData *)Data._bridgeToObjectiveC()().super.isa;
      CGImageRef v10 = sub_10008DF74(v9);

      if (v10)
      {
        CGImageRef v61 = v10;
        uint64_t v11 = v10;
        sub_100189B0C(v8, v7);

        goto LABEL_12;
      }

      sub_100189B0C(v8, v7);
    }
  }

  CGImageRef v61 = 0LL;
LABEL_12:
  uint64_t v15 = *(const char **)(v1 + 360);
  unint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 328);
  uint64_t v16 = *(const char **)(v1 + 336);
  uint64_t v18 = *(void *)(v1 + 216);
  uint64_t v19 = *(void *)(v1 + 200);
  uint64_t v20 = *(void *)(v1 + 184);
  uint64_t v21 = *(void *)(v1 + 136);
  uint64_t v22 = *(void *)(v1 + 56);
  (*(void (**)(void, void, void))(*(void *)(v1 + 104) + 16LL))( *(void *)(v1 + 112),  *(void *)(v1 + 24),  *(void *)(v1 + 96));
  v17(v19, v18, v20);
  *(void *)&double v23 = swift_bridgeObjectRelease(v15).n128_u64[0];
  swift_bridgeObjectRelease(v16, v23);
  uint64_t v24 = (uint64_t *)(v22 + *(int *)(v21 + 32));
  uint64_t v25 = (const char *)v24[1];
  if (v25)
  {
    unint64_t v62 = v24[1];
    uint64_t v63 = *v24;
  }

  else
  {
    unint64_t v62 = 0xE000000000000000LL;
    uint64_t v63 = 0LL;
  }

  unint64_t v26 = (char *)(v1 + 392);
  char v28 = (uint64_t *)(v1 + 120);
  uint64_t v27 = *(void *)(v1 + 120);
  uint64_t v29 = *(void *)(v1 + 136);
  uint64_t v30 = *(void *)(v1 + 72);
  uint64_t v31 = *(void *)(v1 + 80);
  uint64_t v32 = *(void *)(v1 + 56);
  uint64_t v33 = (uint64_t *)(v32 + *(int *)(v29 + 36));
  os_log_type_t v34 = (const char *)v33[1];
  uint64_t v93 = *v33;
  unint64_t v35 = (uint64_t *)(v32 + *(int *)(v29 + 40));
  Swift::String v36 = (const char *)v35[1];
  uint64_t v90 = *v35;
  sub_1001915A4(*(void *)(v1 + 128), v27, &qword_10064DA60);
  LODWORD(v27) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v27, 1LL, v30);
  swift_bridgeObjectRetain(v25);
  int v91 = v34;
  swift_bridgeObjectRetain(v34);
  uint64_t v89 = v36;
  uint64_t v37 = swift_bridgeObjectRetain(v36);
  if ((_DWORD)v27 == 1)
  {
    char v28 = (uint64_t *)(v1 + 88);
    uint64_t v38 = sub_100187100(*(void *)(v1 + 120), &qword_10064DA60);
    uint64_t v37 = UUID.init()(v38);
  }

  uint64_t v39 = *v28;
  char v66 = *(_BYTE *)(v1 + 393);
  uint64_t v71 = *(void *)(v1 + 368);
  uint64_t v72 = *(void *)(v1 + 376);
  char v40 = *v26;
  unsigned int v68 = *v26;
  uint64_t v76 = *(void *)(v1 + 344);
  uint64_t v77 = *(void *)(v1 + 352);
  unint64_t v42 = *(const char **)(v1 + 312);
  char v41 = *(const char **)(v1 + 320);
  uint64_t v80 = *(void *)(v1 + 304);
  uint64_t v81 = *(void *)(v1 + 296);
  uint64_t v82 = *(void *)(v1 + 272);
  uint64_t v83 = *(void *)(v1 + 264);
  uint64_t v84 = *(void *)(v1 + 256);
  uint64_t v85 = *(void *)(v1 + 248);
  uint64_t v78 = *(void *)(v1 + 216);
  uint64_t v79 = *(void *)(v1 + 224);
  uint64_t v86 = *(void *)(v1 + 208);
  uint64_t v73 = *(void *)(v1 + 200);
  uint64_t v74 = *(void *)(v1 + 192);
  uint64_t v75 = *(void *)(v1 + 184);
  uint64_t v87 = *(void *)(v1 + 176);
  uint64_t v88 = *(void *)(v1 + 168);
  uint64_t v92 = *(void *)(v1 + 160);
  uint64_t v43 = *(void *)(v1 + 136);
  uint64_t v94 = *(void *)(v1 + 144);
  uint64_t v70 = *(void *)(v1 + 128);
  uint64_t v95 = *(void *)(v1 + 120);
  uint64_t v69 = *(void *)(v1 + 112);
  uint64_t v44 = *(void *)(v1 + 80);
  uint64_t v96 = *(void *)(v1 + 88);
  uint64_t v45 = *(void *)(v1 + 64);
  uint64_t v46 = *(void *)(v1 + 72);
  uint64_t v47 = *(void *)(v1 + 56);
  uint64_t v48 = UUID.uuidString.getter(v37);
  uint64_t v64 = v49;
  uint64_t v65 = v48;
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v39, v46);
  char v67 = v66 | v40;
  uint64_t v50 = (uint64_t *)(v47 + *(int *)(v43 + 52));
  uint64_t v52 = *v50;
  uint64_t v51 = (const char *)v50[1];
  uint64_t v53 = type metadata accessor for SFAirDropReceive.AskRequest.AdvancedItemsDescription(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56LL))(v45, 1LL, 1LL, v53);
  swift_bridgeObjectRetain(v51);
  uint64_t v54 = sub_10018FA24((uint64_t)v42);
  swift_bridgeObjectRelease(v42);
  uint64_t v55 = sub_10018FBF4((uint64_t)v41);
  swift_bridgeObjectRelease(v41);
  uint64_t v56 = (uint64_t *)(v47 + *(int *)(v43 + 68));
  uint64_t v58 = *v56;
  unint64_t v57 = v56[1];
  sub_1001A4C04(*v56, v57);
  SFAirDropReceive.AskRequest.init(id:type:transferTypes:canAutoAccept:verifiableIdentity:senderIsMe:contactIdentifier:senderBundleID:senderComputerName:senderModelName:senderEmail:senderEmailHash:senderCompositeName:senderFirstName:senderLastName:senderID:senderIcon:smallPreviewImage:previewImage:itemsDescription:itemsDescriptionAdvanced:urlItems:items:customPayload:)( v69,  v73,  0LL,  v67 & 1,  1LL,  v68,  v77,  v76,  v63,  v62,  v93,  v91,  v90,  v89,  0LL,  0LL,  0LL,  0LL,  v71,  v72,  0LL,  0LL,  0LL,  0LL,  v65,  v64,  0LL,  v97,  v61,  v52,  v51,  v45,  v54,  v55,  v58,  v57);
  sub_100187100(v70, &qword_10064DA60);
  uint64_t v59 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
  v59(v78, v75);
  v59(v79, v75);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v79);
  swift_task_dealloc(v78);
  swift_task_dealloc(v86);
  swift_task_dealloc(v73);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v92);
  swift_task_dealloc(v94);
  swift_task_dealloc(v70);
  swift_task_dealloc(v95);
  swift_task_dealloc(v69);
  swift_task_dealloc(v96);
  swift_task_dealloc(v45);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t sub_1003E47BC(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1005D1A88, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xE) {
    return 14LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1003E4804@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  int v96 = a3;
  uint64_t v107 = a2;
  CGImageRef v97 = a4;
  uint64_t v105 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v101 = *(void *)(v105 - 8);
  uint64_t v5 = __chkstk_darwin(v105);
  uint64_t v98 = &v88[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v99 = &v88[-v8];
  __chkstk_darwin(v7);
  CGImageRef v10 = &v88[-v9];
  uint64_t v102 = (void (*)(_BYTE *, uint64_t))sub_100183098(&qword_100645428);
  __chkstk_darwin(v102);
  uint64_t v104 = &v88[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = type metadata accessor for UTType(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v103 = &v88[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v15 = sub_100183098(&qword_1006469E0);
  uint64_t inited = swift_initStackObject(v15, v114);
  __int128 v100 = xmmword_1004CDCA0;
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1004CDCA0;
  *(void *)(inited + 32) = NSURLContentTypeKey;
  unint64_t v17 = NSURLContentTypeKey;
  uint64_t v18 = (const char *)sub_1001DC65C(inited);
  swift_setDeallocating(inited);
  type metadata accessor for URLResourceKey(0LL);
  uint64_t v20 = v19;
  swift_arrayDestroy(inited + 32, 1LL, v19);
  uint64_t v108 = a1;
  uint64_t v21 = v106;
  URL.resourceValues(forKeys:)(v18);
  if (v21)
  {
    swift_bridgeObjectRelease(v18);
    uint64_t v22 = type metadata accessor for URL(0LL);
    double v23 = *(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8LL);
    v23(v107, v22);
    return ((uint64_t (*)(uint64_t, uint64_t))v23)(v108, v22);
  }

  else
  {
    uint64_t v95 = v13;
    uint64_t v106 = v12;
    uint64_t v93 = v20;
    uint64_t v94 = v15;
    swift_bridgeObjectRelease(v18);
    uint64_t v25 = (uint64_t)v104;
    URLResourceValues.contentType.getter(v26);
    uint64_t v27 = *(void (**)(_BYTE *, uint64_t))(v101 + 8);
    v27(v10, v105);
    unint64_t v112 = 0LL;
    unint64_t v113 = (const char *)0xE000000000000000LL;
    _StringGuts.grow(_:)(34LL);
    swift_bridgeObjectRelease(v113);
    unint64_t v112 = 0xD00000000000001FLL;
    unint64_t v113 = (const char *)0x800000010050E3D0LL;
    uint64_t v28 = type metadata accessor for URL(0LL);
    uint64_t v29 = sub_100183F14( (unint64_t *)&qword_100645408,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    v30._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v28, v29);
    object = (const char *)v30._object;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(object);
    v32._uint64_t countAndFlagsBits = 125LL;
    v32._object = (void *)0xE100000000000000LL;
    String.append(_:)(v32);
    uint64_t v33 = v113;
    os_log_type_t v34 = v103;
    uint64_t v101 = 0x800000010050E3F0LL;
    Optional.tryUnwrap(_:file:line:)(v112, v113, 0xD00000000000005BLL, 0x800000010050E3F0LL, 228LL, v102);
    uint64_t v102 = v27;
    sub_100187100(v25, &qword_100645428);
    swift_bridgeObjectRelease(v33);
    uint64_t v104 = (_BYTE *)UTType.identifier.getter(v35);
    uint64_t v37 = v36;
    (*(void (**)(_BYTE *, uint64_t))(v95 + 8))(v34, v106);
    URL._bridgeToObjectiveC()(v38);
    char v40 = v39;
    URL._bridgeToObjectiveC()(v41);
    uint64_t v43 = v42;
    uint64_t v44 = sub_1001149DC(v40, v42);

    double v111 = v44;
    unint64_t v112 = 0LL;
    unint64_t v113 = (const char *)0xE000000000000000LL;
    _StringGuts.grow(_:)(61LL);
    v45._uint64_t countAndFlagsBits = 0xD000000000000025LL;
    v45._object = (void *)0x800000010050E450LL;
    String.append(_:)(v45);
    v46._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v28, v29);
    uint64_t v47 = (const char *)v46._object;
    String.append(_:)(v46);
    swift_bridgeObjectRelease(v47);
    v48._uint64_t countAndFlagsBits = 0xD000000000000013LL;
    v48._object = (void *)0x800000010050E480LL;
    String.append(_:)(v48);
    v49._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v28, v29);
    uint64_t v50 = (const char *)v49._object;
    String.append(_:)(v49);
    swift_bridgeObjectRelease(v50);
    v51._uint64_t countAndFlagsBits = 125LL;
    v51._object = (void *)0xE100000000000000LL;
    String.append(_:)(v51);
    unint64_t v52 = v112;
    uint64_t v53 = v113;
    uint64_t v54 = sub_100183098(&qword_100653188);
    Optional.tryUnwrap(_:file:line:)(v52, v53, 0xD00000000000005BLL, v101, 230LL, v54);
    id v103 = v37;
    uint64_t v106 = v28;
    swift_bridgeObjectRelease(v53);
    uint64_t v55 = v115;
    uint64_t v101 = String.init(cString:)(v115);
    uint64_t v57 = v56;
    free(v55);
    uint64_t v95 = URL.lastPathComponent.getter(v58);
    uint64_t v60 = v59;
    uint64_t v61 = v94;
    uint64_t v62 = swift_initStackObject(v94, v110);
    *(_OWORD *)(v62 + swift_unknownObjectWeakDestroy(v0 + 16) = v100;
    *(void *)(v62 + 32) = NSURLFileSizeKey;
    uint64_t v63 = NSURLFileSizeKey;
    uint64_t v64 = (const char *)sub_1001DC65C(v62);
    swift_setDeallocating(v62);
    uint64_t v65 = v93;
    swift_arrayDestroy(v62 + 32, 1LL, v93);
    char v66 = v99;
    URL.resourceValues(forKeys:)(v64);
    uint64_t v91 = v60;
    uint64_t v92 = v57;
    uint64_t v67 = v101;
    __n128 v68 = swift_bridgeObjectRelease(v64);
    uint64_t v90 = URLResourceValues.fileSize.getter(v68);
    int v89 = v69;
    uint64_t v70 = v105;
    uint64_t v71 = v102;
    v102(v66, v105);
    uint64_t v72 = swift_initStackObject(v61, v109);
    *(_OWORD *)(v72 + swift_unknownObjectWeakDestroy(v0 + 16) = v100;
    *(void *)(v72 + 32) = NSURLIsDirectoryKey;
    uint64_t v73 = NSURLIsDirectoryKey;
    uint64_t v74 = (const char *)sub_1001DC65C(v72);
    swift_setDeallocating(v72);
    swift_arrayDestroy(v72 + 32, 1LL, v65);
    uint64_t v75 = v98;
    URL.resourceValues(forKeys:)(v74);
    swift_bridgeObjectRelease(v74);
    if ((v89 & 1) != 0) {
      uint64_t v77 = 0LL;
    }
    else {
      uint64_t v77 = v90;
    }
    char v78 = URLResourceValues.isDirectory.getter(v76);
    uint64_t v79 = v75;
    char v80 = v78;
    v71(v79, v70);
    uint64_t v81 = v106;
    uint64_t v82 = *(void (**)(uint64_t, uint64_t))(*(void *)(v106 - 8) + 8LL);
    v82(v107, v106);
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v82)(v108, v81);
    char v83 = v96 & 1;
    uint64_t v84 = v97;
    uint64_t v85 = v91;
    *CGImageRef v97 = v95;
    v84[1] = v85;
    uint64_t v86 = v103;
    v84[2] = (uint64_t)v104;
    v84[3] = (uint64_t)v86;
    v84[4] = 0LL;
    v84[5] = 0LL;
    v84[6] = v77;
    *((_BYTE *)v84 + 56) = 0;
    uint64_t v87 = v92;
    v84[8] = v67;
    v84[9] = v87;
    *((_BYTE *)v84 + 80) = v80 & 1;
    *((_BYTE *)v84 + 81) = v83;
  }

  return result;
}

void sub_1003E5054(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100183098(&qword_100653100);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10019A708(a1, v9);
  unint64_t v11 = sub_1003E558C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &_s14descr1005DF7D1C11AskResponseV10CodingKeysON,  &_s14descr1005DF7D1C11AskResponseV10CodingKeysON,  v11,  v9,  v10);
  if (v2)
  {
    sub_10018709C(a1);
  }

  else
  {
    LOBYTE(v56[0]) = 0;
    uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(v56, v5);
    uint64_t v14 = v13;
    uint64_t v55 = v12;
    LOBYTE(v56[0]) = 1;
    swift_bridgeObjectRetain(v13);
    uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)(v56, v5);
    unint64_t v17 = v16;
    uint64_t v53 = v15;
    uint64_t v54 = v14;
    LOBYTE(v56[0]) = 2;
    swift_bridgeObjectRetain(v16);
    uint64_t v18 = v17;
    int v57 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v56, v5);
    LOBYTE(v56[0]) = 3;
    uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v56, v5);
    uint64_t v21 = v20;
    uint64_t v50 = v19;
    LOBYTE(v56[0]) = 4;
    swift_bridgeObjectRetain(v20);
    uint64_t v51 = 0LL;
    uint64_t v49 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v56, v5);
    LOBYTE(v56[0]) = 5;
    unint64_t v52 = v22;
    swift_bridgeObjectRetain(v22);
    uint64_t v47 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v56, v5);
    char v58 = 6;
    uint64_t v24 = v23;
    unint64_t v25 = sub_10020C198();
    Swift::String v48 = v24;
    swift_bridgeObjectRetain(v24);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( v56,  &type metadata for Data,  &v58,  v5,  &type metadata for Data,  v25);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v26 = v56[0];
    unint64_t v27 = v56[1];
    uint64_t v51 = v56[0];
    uint64_t v28 = v54;
    *(void *)&double v29 = swift_bridgeObjectRetain(v54).n128_u64[0];
    Swift::String v30 = v21;
    uint64_t v31 = v18;
    *(void *)&double v32 = swift_bridgeObjectRetain(v18, v29).n128_u64[0];
    *(void *)&double v33 = swift_bridgeObjectRetain(v30, v32).n128_u64[0];
    os_log_type_t v34 = v52;
    *(void *)&double v35 = swift_bridgeObjectRetain(v52, v33).n128_u64[0];
    Swift::String v36 = v48;
    swift_bridgeObjectRetain(v48, v35);
    sub_1001A4C04(v26, v27);
    *(void *)&double v37 = swift_bridgeObjectRelease(v28).n128_u64[0];
    *(void *)&double v38 = swift_bridgeObjectRelease(v31, v37).n128_u64[0];
    *(void *)&double v39 = swift_bridgeObjectRelease(v30, v38).n128_u64[0];
    *(void *)&double v40 = swift_bridgeObjectRelease(v34, v39).n128_u64[0];
    swift_bridgeObjectRelease(v36, v40);
    sub_10018709C(a1);
    *(void *)&double v41 = swift_bridgeObjectRelease(v36).n128_u64[0];
    *(void *)&double v42 = swift_bridgeObjectRelease(v34, v41).n128_u64[0];
    *(void *)&double v43 = swift_bridgeObjectRelease(v30, v42).n128_u64[0];
    *(void *)&double v44 = swift_bridgeObjectRelease(v31, v43).n128_u64[0];
    swift_bridgeObjectRelease(v28, v44);
    uint64_t v45 = v51;
    sub_100189B0C(v51, v27);
    *(void *)a2 = v55;
    *(void *)(a2 + 8) = v28;
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v53;
    *(void *)(a2 + 24) = v31;
    *(_BYTE *)(a2 + 32) = v57;
    *(void *)(a2 + 40) = v50;
    *(void *)(a2 + 48) = v30;
    *(void *)(a2 + 56) = v49;
    *(void *)(a2 + 64) = v34;
    *(void *)(a2 + 72) = v47;
    *(void *)(a2 + 80) = v36;
    *(void *)(a2 + 88) = v45;
    *(void *)(a2 + 96) = v27;
  }

unint64_t sub_1003E558C()
{
  unint64_t result = qword_100653108;
  if (!qword_100653108)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004DA314, &_s14descr1005DF7D1C11AskResponseV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100653108);
  }

  return result;
}

unint64_t sub_1003E55D0()
{
  unint64_t result = qword_100653120;
  if (!qword_100653120)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004DA2C4, &_s14descr1005DF7D1C10AskRequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100653120);
  }

  return result;
}

unint64_t sub_1003E5614()
{
  unint64_t result = qword_100653140;
  if (!qword_100653140)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004DA29C, &_s14descr1005DF7D1C10AskRequestV8FileInfoVN);
    atomic_store(result, (unint64_t *)&qword_100653140);
  }

  return result;
}

uint64_t sub_1003E5658(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_100183124((uint64_t *)&unk_10064D7D0);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1003E56B8(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_100183124(&qword_1006530E8);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1003E5720()
{
  unint64_t result = qword_100653168;
  if (!qword_100653168)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004DA274, &_s14descr1005DF7D1C10AskRequestV8FileInfoVN);
    atomic_store(result, &qword_100653168);
  }

  return result;
}

uint64_t sub_1003E5764(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a2);
  }

  return result;
}

uint64_t sub_1003E5790(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc(dword_10065317C);
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_1001943E8;
  return sub_1003E1684(a1, a2, v7, v6);
}

double sub_1003E57FC@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1003E1D78(a1, *(void *)(v3 + 16), a2, a3);
}

double sub_1003E5818@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1003E1C34(a1, *(void *)(v3 + 16), *(void *)(v3 + 32), a2, a3);
}

uint64_t _s14descr1005DF7D1C10AskRequestV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF2) {
    return ((uint64_t (*)(void))((char *)&loc_1003E5884 + 4 * byte_1004D9EED[v4]))();
  }
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_1003E58B8 + 4 * byte_1004D9EE8[v4]))();
}

uint64_t sub_1003E58B8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003E58C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1003E58C8LL);
  }
  return result;
}

uint64_t sub_1003E58D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1003E58DCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 13;
  return result;
}

uint64_t sub_1003E58E0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003E58E8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s14descr1005DF7D1C10AskRequestV10CodingKeysOMa()
{
  return &_s14descr1005DF7D1C10AskRequestV10CodingKeysON;
}

ValueMetadata *_s14descr1005DF7D1C11AskResponseV10CodingKeysOMa()
{
  return &_s14descr1005DF7D1C11AskResponseV10CodingKeysON;
}

uint64_t _s14descr1005DF7D1C10AskRequestV8FileInfoVwxx(void *a1)
{
  return swift_bridgeObjectRelease(a1[9]);
}

uint64_t _s14descr1005DF7D1C10AskRequestV8FileInfoVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t _s14descr1005DF7D1C10AskRequestV8FileInfoVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  return a1;
}

__n128 _s14descr1005DF7D1C10AskRequestV8FileInfoVwtk(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t _s14descr1005DF7D1C10AskRequestV8FileInfoVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 72);
  uint64_t v11 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  return a1;
}

uint64_t _s14descr1005DF7D1C10AskRequestV8FileInfoVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 82)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s14descr1005DF7D1C10AskRequestV8FileInfoVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 80) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 82) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 82) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *_s14descr1005DF7D1C10AskRequestV8FileInfoVMa()
{
  return &_s14descr1005DF7D1C10AskRequestV8FileInfoVN;
}

unint64_t sub_1003E5BF8()
{
  unint64_t result = qword_100653190;
  if (!qword_100653190)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004DA15C, &_s14descr1005DF7D1C11AskResponseV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100653190);
  }

  return result;
}

unint64_t sub_1003E5C40()
{
  unint64_t result = qword_100653198;
  if (!qword_100653198)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004DA24C, &_s14descr1005DF7D1C10AskRequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_100653198);
  }

  return result;
}

unint64_t sub_1003E5C88()
{
  unint64_t result = qword_1006531A0;
  if (!qword_1006531A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004DA184, &_s14descr1005DF7D1C10AskRequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1006531A0);
  }

  return result;
}

unint64_t sub_1003E5CD0()
{
  unint64_t result = qword_1006531A8;
  if (!qword_1006531A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004DA1AC, &_s14descr1005DF7D1C10AskRequestV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1006531A8);
  }

  return result;
}

unint64_t sub_1003E5D18()
{
  unint64_t result = qword_1006531B0;
  if (!qword_1006531B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004DA094, &_s14descr1005DF7D1C11AskResponseV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1006531B0);
  }

  return result;
}

unint64_t sub_1003E5D60()
{
  unint64_t result = qword_1006531B8;
  if (!qword_1006531B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004DA0BC, &_s14descr1005DF7D1C11AskResponseV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1006531B8);
  }

  return result;
}

unint64_t sub_1003E5DA4(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease(object);
  if (v5 >= 7) {
    return 7LL;
  }
  else {
    return v5;
  }
}

void sub_1003E5DE8(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100183098(&qword_1006531C0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10019A708(a1, v9);
  unint64_t v11 = sub_1003E61C4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &_s14descr1005DF7D1C10AskRequestV8FileInfoV10CodingKeysON,  &_s14descr1005DF7D1C10AskRequestV8FileInfoV10CodingKeysON,  v11,  v9,  v10);
  if (v2)
  {
    sub_10018709C(a1);
  }

  else
  {
    char v46 = 0;
    uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v46, v5);
    uint64_t v14 = v13;
    uint64_t v39 = v12;
    char v45 = 1;
    swift_bridgeObjectRetain(v13);
    uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v45, v5);
    unint64_t v17 = v16;
    uint64_t v37 = v15;
    double v38 = v14;
    char v44 = 2;
    swift_bridgeObjectRetain(v16);
    uint64_t v18 = v17;
    uint64_t v36 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v44, v5);
    char v43 = 3;
    uint64_t v20 = v19;
    swift_bridgeObjectRetain(v19);
    uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v43, v5);
    int v33 = v22;
    uint64_t v34 = v21;
    char v42 = 4;
    uint64_t v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v42, v5);
    char v41 = 5;
    double v35 = v23;
    swift_bridgeObjectRetain(v23);
    int v31 = KeyedDecodingContainer.decode(_:forKey:)(&v41, v5);
    char v40 = 6;
    LOBYTE(v17) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v40, v5);
    v31 &= 1u;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_10018709C(a1);
    uint64_t v24 = v35;
    *(void *)&double v25 = swift_bridgeObjectRelease(v35).n128_u64[0];
    *(void *)&double v26 = swift_bridgeObjectRelease(v20, v25).n128_u64[0];
    unint64_t v27 = v18;
    *(void *)&double v28 = swift_bridgeObjectRelease(v18, v26).n128_u64[0];
    double v29 = v38;
    swift_bridgeObjectRelease(v38, v28);
    *(void *)a2 = v39;
    *(void *)(a2 + 8) = v29;
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v37;
    *(void *)(a2 + 24) = v27;
    *(void *)(a2 + 32) = v36;
    *(void *)(a2 + 40) = v20;
    *(void *)(a2 + 48) = v34;
    *(_BYTE *)(a2 + 56) = v33 & 1;
    *(void *)(a2 + 64) = v32;
    *(void *)(a2 + 72) = v24;
    *(_BYTE *)(a2 + 80) = v31;
    *(_BYTE *)(a2 + 81) = (_BYTE)v17;
  }

unint64_t sub_1003E61C4()
{
  unint64_t result = qword_1006531C8;
  if (!qword_1006531C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004DA454, &_s14descr1005DF7D1C10AskRequestV8FileInfoV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1006531C8);
  }

  return result;
}

uint64_t _s14descr1005DF7D1C11AskResponseV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_1003E6254 + 4 * byte_1004D9EF7[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1003E6288 + 4 * byte_1004D9EF2[v4]))();
}

uint64_t sub_1003E6288(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003E6290(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1003E6298LL);
  }
  return result;
}

uint64_t sub_1003E62A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1003E62ACLL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_1003E62B0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003E62B8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s14descr1005DF7D1C10AskRequestV8FileInfoV10CodingKeysOMa()
{
  return &_s14descr1005DF7D1C10AskRequestV8FileInfoV10CodingKeysON;
}

unint64_t sub_1003E62D8()
{
  unint64_t result = qword_1006531D8;
  if (!qword_1006531D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004DA42C, &_s14descr1005DF7D1C10AskRequestV8FileInfoV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1006531D8);
  }

  return result;
}

unint64_t sub_1003E6320()
{
  unint64_t result = qword_1006531E0;
  if (!qword_1006531E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004DA364, &_s14descr1005DF7D1C10AskRequestV8FileInfoV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1006531E0);
  }

  return result;
}

unint64_t sub_1003E6368()
{
  unint64_t result = qword_1006531E8;
  if (!qword_1006531E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004DA38C, &_s14descr1005DF7D1C10AskRequestV8FileInfoV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1006531E8);
  }

  return result;
}

uint64_t _s8KeyClassOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1003E63F8 + 4 * byte_1004DA4AD[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1003E642C + 4 * byte_1004DA4A8[v4]))();
}

uint64_t sub_1003E642C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003E6434(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1003E643CLL);
  }
  return result;
}

uint64_t sub_1003E6448(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1003E6450LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1003E6454(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003E645C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s8KeyClassOMa()
{
  return &_s8KeyClassON;
}

unint64_t sub_1003E647C()
{
  unint64_t result = qword_1006531F0;
  if (!qword_1006531F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004DA4FC, &_s8KeyClassON);
    atomic_store(result, (unint64_t *)&qword_1006531F0);
  }

  return result;
}

uint64_t sub_1003E64C0()
{
  return qword_1004DA550[*v0];
}

uint64_t *sub_1003E64D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      swift_retain();
      uint64_t v12 = *(int *)(sub_100183098(&qword_100649710) + 48);
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 2LL;
    }

    else
    {
      *a1 = *a2;
      if (EnumCaseMultiPayload == 1)
      {
        swift_retain();
        uint64_t v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 1LL;
      }

      else
      {
        swift_retain();
        uint64_t v8 = a1;
        uint64_t v9 = a3;
        uint64_t v10 = 0LL;
      }
    }

    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }

  return a1;
}

uint64_t sub_1003E65DC(void *a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 2)
  {
    swift_release(*a1);
    uint64_t v4 = (char *)a1 + *(int *)(sub_100183098(&qword_100649710) + 48);
    uint64_t v5 = type metadata accessor for UUID(0LL);
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  }

  else if (result <= 1)
  {
    return swift_release(*a1);
  }

  return result;
}

void *sub_1003E6660(void *a1, void *a2, uint64_t a3)
{
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  *a1 = *a2;
  swift_retain();
  if ((_DWORD)EnumCaseMultiPayload == 2)
  {
    uint64_t v7 = *(int *)(sub_100183098(&qword_100649710) + 48);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
  }

  swift_storeEnumTagMultiPayload(a1, a3, EnumCaseMultiPayload);
  return a1;
}

void *sub_1003E6718(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1001A4BC8((uint64_t)a1, type metadata accessor for SDAirDropServerConnection);
    uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    *a1 = *a2;
    swift_retain();
    if ((_DWORD)EnumCaseMultiPayload == 2)
    {
      uint64_t v7 = *(int *)(sub_100183098(&qword_100649710) + 48);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
    }

    swift_storeEnumTagMultiPayload(a1, a3, EnumCaseMultiPayload);
  }

  return a1;
}

uint64_t type metadata accessor for SDAirDropServerConnection(uint64_t a1)
{
  return sub_1001A4AD0(a1, qword_100653290, (uint64_t)&nominal type descriptor for SDAirDropServerConnection);
}

void *sub_1003E67FC(void *a1, void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 2)
  {
    *a1 = *a2;
    uint64_t v6 = *(int *)(sub_100183098(&qword_100649710) + 48);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
    swift_storeEnumTagMultiPayload(a1, a3, 2LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *sub_1003E68A8(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1001A4BC8((uint64_t)a1, type metadata accessor for SDAirDropServerConnection);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 2)
    {
      *a1 = *a2;
      uint64_t v6 = *(int *)(sub_100183098(&qword_100649710) + 48);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
      swift_storeEnumTagMultiPayload(a1, a3, 2LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t sub_1003E696C(uint64_t a1)
{
  v5[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v5[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2( v4,  (char *)&value witness table for Builtin.NativeObject + 64,  *(void *)(result - 8) + 64LL);
    v5[2] = v4;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 3LL, v5);
    return 0LL;
  }

  return result;
}

uint64_t *sub_1003E69F8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v11);
  }

  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v7 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 1LL;
    }

    else
    {
      uint64_t v12 = *a2;
      *a1 = *a2;
      swift_unknownObjectRetain(v12);
      uint64_t v8 = a1;
      uint64_t v9 = a3;
      uint64_t v10 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v8, v9, v10);
  }

  return a1;
}

uint64_t sub_1003E6AB4(void *a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  return (*(uint64_t (**)(void *, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
}

uint64_t *sub_1003E6B04(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    uint64_t v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
    uint64_t v7 = a1;
    uint64_t v8 = a3;
    uint64_t v9 = 1LL;
  }

  else
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    swift_unknownObjectRetain(v10);
    uint64_t v7 = a1;
    uint64_t v8 = a3;
    uint64_t v9 = 0LL;
  }

  swift_storeEnumTagMultiPayload(v7, v8, v9);
  return a1;
}

uint64_t *sub_1003E6B94(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1001A4BC8((uint64_t)a1, type metadata accessor for SDAirDropServerConnectionIdentity);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 1LL;
    }

    else
    {
      uint64_t v10 = *a2;
      *a1 = *a2;
      swift_unknownObjectRetain(v10);
      uint64_t v7 = a1;
      uint64_t v8 = a3;
      uint64_t v9 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v7, v8, v9);
  }

  return a1;
}

uint64_t type metadata accessor for SDAirDropServerConnectionIdentity(uint64_t a1)
{
  return sub_1001A4AD0(a1, qword_100653338, (uint64_t)&nominal type descriptor for SDAirDropServerConnectionIdentity);
}

void *sub_1003E6C50(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    uint64_t v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *sub_1003E6CDC(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1001A4BC8((uint64_t)a1, type metadata accessor for SDAirDropServerConnectionIdentity);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      uint64_t v6 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t sub_1003E6D80(uint64_t a1)
{
  v4[0] = "\b";
  uint64_t result = type metadata accessor for SFAirDrop.TransferIdentifier(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 2LL, v4);
    return 0LL;
  }

  return result;
}

uint64_t sub_1003E6DF0(uint64_t a1, uint64_t a2)
{
  v3[21] = a2;
  v3[22] = v2;
  v3[20] = a1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  v3[23] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[24] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[25] = swift_task_alloc(v6);
  v3[26] = swift_task_alloc(v6);
  uint64_t v7 = sub_100183098((uint64_t *)&unk_100647610);
  v3[27] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  v3[28] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[29] = v9;
  v3[30] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SDAirDropMessage(0LL);
  v3[31] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for SDAirDropServerConnection(0LL);
  v3[32] = v11;
  unint64_t v12 = (*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[33] = swift_task_alloc(v12);
  v3[34] = swift_task_alloc(v12);
  v3[35] = swift_task_alloc(v12);
  v3[36] = swift_task_alloc(v12);
  return swift_task_switch(sub_1003E6F1C, 0LL, 0LL);
}

uint64_t sub_1003E6F1C()
{
  if (qword_1006442F8 != -1) {
    swift_once(&qword_1006442F8, sub_1003E8934);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_100653200);
  v0[37] = v2;
  unint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Ready to receive AirDrop Message", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = v0[36];
  uint64_t v7 = v0[32];
  uint64_t v8 = v0[22];

  sub_1001A4B84(v8, v6, type metadata accessor for SDAirDropServerConnection);
  if (swift_getEnumCaseMultiPayload(v6, v7) > 1)
  {
    uint64_t v10 = (char *)v0[36];
    uint64_t v11 = v0[23];
    uint64_t v12 = v0[24];
    uint64_t v9 = *(void *)v10;
    uint64_t v13 = sub_100183098(&qword_100649710);
    (*(void (**)(char *, uint64_t))(v12 + 8))(&v10[*(int *)(v13 + 48)], v11);
  }

  else
  {
    uint64_t v9 = *(void *)v0[36];
  }

  v0[38] = v9;
  uint64_t v14 = swift_task_alloc(32LL);
  v0[39] = v14;
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  *(void *)(v14 + 24) = 0LL;
  uint64_t v15 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[40] = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_1003E70E4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 2,  0LL,  0LL,  0xD000000000000027LL,  0x800000010050E580LL,  sub_1003E9DDC,  v14,  &type metadata for SDNWHTTPMessage);
}

uint64_t sub_1003E70E4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 320);
  *(void *)(*v1 + 328) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    os_log_type_t v4 = sub_1003E79F4;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 312));
    os_log_type_t v4 = sub_1003E7150;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1003E7150()
{
  uint64_t v1 = *(void *)(v0 + 32);
  *(void *)(v0 + 136) = v1;
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v2 = *(char **)(v0 + 24);
  *(void *)(v0 + 336) = v2;
  *(void *)(v0 + 344) = v1;
  unint64_t v5 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  *(void *)(v0 + 352) = v5;
  *(void *)(v0 + 360) = v4;
  uint64_t v97 = v4;
  int v6 = *(unsigned __int8 *)(v0 + 56);
  *(void *)(v0 + 144) = v5;
  BOOL v7 = v3 == 0x64616F6C70552FLL && v2 == (char *)0xE700000000000000LL;
  if (v7
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v3, v2, 0x64616F6C70552FLL, 0xE700000000000000LL, 0LL) & 1) != 0)
  {
    sub_10019BA8C(v1, v5);
    uint64_t v92 = *(void *)(v0 + 328);
    uint64_t v8 = sub_10019BA8C(v1, v5);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      *(_DWORD *)swift_slowAlloc(12LL, -1LL) = 134217984;
      __asm { BR              X10 }
    }

    sub_100189B20(v1, v5);
    uint64_t v14 = *(_OWORD **)(v0 + 248);

    swift_beginAccess(v0 + 136, v0 + 112, 0LL, 0LL);
    uint64_t v16 = *(void *)(v0 + 136);
    unint64_t v15 = *(void *)(v0 + 144);
    sub_10019BA8C(v16, v15);
    swift_bridgeObjectRetain(v2);
    swift_unknownObjectRetain(v97);
    sub_1004461DC(v3, v2, v97, v6, v16, v15, v14);
    if (v92)
    {
      sub_100189B20(v16, v15);
      swift_bridgeObjectRelease(v2);
      sub_100189B20(v1, v5);
      swift_unknownObjectRelease_n(v97, 2LL);
      swift_bridgeObjectRelease(v2);
      uint64_t v17 = v16;
      unint64_t v18 = v15;
LABEL_13:
      sub_100189B20(v17, v18);
      uint64_t v19 = *(void *)(v0 + 280);
      uint64_t v21 = *(void *)(v0 + 264);
      uint64_t v20 = *(void *)(v0 + 272);
      uint64_t v23 = *(void *)(v0 + 240);
      uint64_t v22 = *(void *)(v0 + 248);
      uint64_t v25 = *(void *)(v0 + 208);
      uint64_t v24 = *(void *)(v0 + 216);
      uint64_t v26 = *(void *)(v0 + 200);
      swift_task_dealloc(*(void *)(v0 + 288));
      swift_task_dealloc(v19);
      swift_task_dealloc(v20);
      swift_task_dealloc(v21);
      swift_task_dealloc(v22);
      swift_task_dealloc(v23);
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      unint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
      return v27();
    }

    uint64_t v28 = *(void *)(v0 + 272);
    uint64_t v29 = *(void *)(v0 + 256);
    uint64_t v30 = *(void *)(v0 + 176);
    swift_unknownObjectRelease(v97);
    swift_bridgeObjectRelease(v2);
    sub_100189B20(v16, v15);
    sub_1001A4B84(v30, v28, type metadata accessor for SDAirDropServerConnection);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v28, v29);
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v32 = *(void *)(v0 + 224);
        uint64_t v33 = *(void *)(v0 + 232);
        uint64_t v34 = *(void *)(v0 + 216);
        swift_release(**(void **)(v0 + 272));
        sub_10039E14C(v34);
        int v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v34, 1LL, v32);
        uint64_t v36 = *(void *)(v0 + 248);
        if (v35 == 1)
        {
          sub_1002E4410(*(void *)(v0 + 216));
          uint64_t v37 = type metadata accessor for SFAirDropReceive.Failure(0LL);
          uint64_t v38 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
          swift_allocError(v37, v38, 0LL, 0LL);
          uint64_t v40 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v37 - 8) + 104LL))( v39,  enum case for SFAirDropReceive.Failure.badRequest(_:),  v37);
          swift_willThrow(v40);
          swift_bridgeObjectRelease(v2);
          sub_100189B20(v1, v5);
          swift_unknownObjectRelease(v97);
          uint64_t v41 = v36;
LABEL_31:
          sub_1001A4BC8(v41, type metadata accessor for SDAirDropMessage);
          uint64_t v17 = *(void *)(v0 + 136);
          unint64_t v18 = *(void *)(v0 + 144);
          goto LABEL_13;
        }

        uint64_t v63 = *(void *)(v0 + 232);
        uint64_t v62 = *(void *)(v0 + 240);
        uint64_t v64 = *(void *)(v0 + 224);
        uint64_t v96 = *(void *)(v0 + 248);
        uint64_t v65 = *(nw_protocol_metadata_t **)(v0 + 168);
        uint64_t v91 = *(void *)(v0 + 216);
        uint64_t v94 = *(void *)(v0 + 160);
        sub_100189B20(v16, v15);
        swift_bridgeObjectRelease(v2);
        sub_100189B20(v1, v5);
        swift_unknownObjectRelease(v97);
        char v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 32);
        v66(v62, v91, v64);
        sub_1003E9DEC(v96, v94);
        v66((uint64_t)v65, v62, v64);
        uint64_t v54 = type metadata accessor for SDAirDropServerConnectionIdentity(0LL);
        uint64_t v55 = v65;
      }

      else
      {
        uint64_t v47 = *(char **)(v0 + 272);
        uint64_t v48 = *(void *)(v0 + 248);
        uint64_t v50 = *(void *)(v0 + 200);
        uint64_t v49 = *(void *)(v0 + 208);
        uint64_t v52 = *(void *)(v0 + 184);
        uint64_t v51 = *(void *)(v0 + 192);
        uint64_t v93 = *(void *)(v0 + 160);
        uint64_t v95 = *(nw_protocol_metadata_t **)(v0 + 168);
        swift_release(*(void *)v47);
        uint64_t v53 = sub_100183098(&qword_100649710);
        (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(v49, &v47[*(int *)(v53 + 48)], v52);
        sub_1001A4B84(v48, v93, type metadata accessor for SDAirDropMessage);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v50, v49, v52);
        SFAirDrop.TransferIdentifier.init(_:)(v50);
        swift_bridgeObjectRelease(v2);
        sub_100189B20(v1, v5);
        swift_unknownObjectRelease(v97);
        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v49, v52);
        sub_1001A4BC8(v48, type metadata accessor for SDAirDropMessage);
        sub_100189B20(*(void *)(v0 + 136), *(void *)(v0 + 144));
        uint64_t v54 = type metadata accessor for SDAirDropServerConnectionIdentity(0LL);
        uint64_t v55 = v95;
      }

      uint64_t v67 = 1LL;
    }

    else
    {
      uint64_t v42 = *(void *)(v0 + 264);
      uint64_t v43 = *(void *)(v0 + 256);
      uint64_t v44 = *(void *)(v0 + 176);
      swift_release(**(void **)(v0 + 272));
      sub_1001A4B84(v44, v42, type metadata accessor for SDAirDropServerConnection);
      uint64_t v45 = swift_getEnumCaseMultiPayload(v42, v43);
      if (v45 > 1)
      {
        __n128 v68 = *(char **)(v0 + 264);
        uint64_t v69 = *(void *)(v0 + 184);
        uint64_t v70 = *(void *)(v0 + 192);
        uint64_t v46 = *(void *)v68;
        uint64_t v71 = sub_100183098(&qword_100649710);
        uint64_t v45 = (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(&v68[*(int *)(v71 + 48)], v69);
      }

      else
      {
        uint64_t v46 = **(void **)(v0 + 264);
      }

      uint64_t v72 = (nw_connection *)NWConnection.nw.getter(v45);
      uint64_t v73 = swift_release(v46);
      uint64_t v74 = (nw_protocol_definition *)nw_protocol_copy_http_connection_definition(v73);
      nw_protocol_metadata_t v75 = nw_connection_copy_protocol_metadata(v72, v74);
      swift_unknownObjectRelease(v74);
      swift_unknownObjectRelease(v72);
      uint64_t v76 = *(void *)(v0 + 248);
      if (!v75)
      {
        uint64_t v87 = type metadata accessor for SFAirDropReceive.Failure(0LL);
        uint64_t v88 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
        swift_allocError(v87, v88, 0LL, 0LL);
        uint64_t v90 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v87 - 8) + 104LL))( v89,  enum case for SFAirDropReceive.Failure.badRequest(_:),  v87);
        swift_willThrow(v90);
        swift_bridgeObjectRelease(v2);
        sub_100189B20(v1, v5);
        swift_unknownObjectRelease(v97);
        uint64_t v41 = v76;
        goto LABEL_31;
      }

      uint64_t v78 = *(void *)(v0 + 160);
      uint64_t v77 = *(nw_protocol_metadata_t **)(v0 + 168);
      sub_100189B20(*(void *)(v0 + 136), *(void *)(v0 + 144));
      swift_bridgeObjectRelease(v2);
      sub_100189B20(v1, v5);
      swift_unknownObjectRelease(v97);
      sub_1003E9DEC(v76, v78);
      nw_protocol_metadata_t *v77 = v75;
      uint64_t v54 = type metadata accessor for SDAirDropServerConnectionIdentity(0LL);
      uint64_t v55 = v77;
      uint64_t v67 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v55, v54, v67);
    uint64_t v79 = *(void *)(v0 + 280);
    uint64_t v81 = *(void *)(v0 + 264);
    uint64_t v80 = *(void *)(v0 + 272);
    uint64_t v83 = *(void *)(v0 + 240);
    uint64_t v82 = *(void *)(v0 + 248);
    uint64_t v85 = *(void *)(v0 + 208);
    uint64_t v84 = *(void *)(v0 + 216);
    uint64_t v86 = *(void *)(v0 + 200);
    swift_task_dealloc(*(void *)(v0 + 288));
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    unint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
    return v27();
  }

  uint64_t v11 = *(void *)(v0 + 280);
  uint64_t v12 = *(void *)(v0 + 256);
  sub_1001A4B84(*(void *)(v0 + 176), v11, type metadata accessor for SDAirDropServerConnection);
  if (swift_getEnumCaseMultiPayload(v11, v12) > 1)
  {
    uint64_t v56 = *(uint64_t **)(v0 + 280);
    uint64_t v57 = *(void *)(v0 + 184);
    uint64_t v58 = *(void *)(v0 + 192);
    uint64_t v13 = *v56;
    uint64_t v59 = (char *)v56 + *(int *)(sub_100183098(&qword_100649710) + 48);
    sub_10019BA8C(v1, v5);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v57);
  }

  else
  {
    uint64_t v13 = **(void **)(v0 + 280);
    sub_10019BA8C(v1, v5);
  }

  *(void *)(v0 + 368) = v13;
  uint64_t v60 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 376) = v60;
  *uint64_t v60 = v0;
  v60[1] = sub_1003E7AA8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 64,  0LL,  0LL,  0xD000000000000014LL,  0x800000010050E5B0LL,  sub_1003E9DE4,  v13,  &type metadata for SDNWHTTPMessage);
}

uint64_t sub_1003E79F4()
{
  uint64_t v1 = *(void *)(v0 + 304);
  swift_task_dealloc(*(void *)(v0 + 312));
  swift_release(v1);
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v4 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 272);
  uint64_t v6 = *(void *)(v0 + 240);
  uint64_t v5 = *(void *)(v0 + 248);
  uint64_t v8 = *(void *)(v0 + 208);
  uint64_t v7 = *(void *)(v0 + 216);
  uint64_t v9 = *(void *)(v0 + 200);
  swift_task_dealloc(*(void *)(v0 + 288));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003E7AA8()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 376LL);
  *(void *)(*(void *)v1 + 384LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1003E828C;
  }
  else {
    uint64_t v3 = sub_1003E7B0C;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1003E7B0C()
{
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v3 = *(void *)(v0 + 344);
  unint64_t v2 = *(void *)(v0 + 352);
  uint64_t v4 = *(const char **)(v0 + 336);
  swift_release(*(void *)(v0 + 368));
  uint64_t v5 = *(void *)(v0 + 80);
  uint64_t v93 = *(void *)(v0 + 64);
  uint64_t v95 = *(char **)(v0 + 72);
  unint64_t v6 = *(void *)(v0 + 88);
  uint64_t v7 = *(void *)(v0 + 96);
  int v91 = *(unsigned __int8 *)(v0 + 104);
  swift_bridgeObjectRelease(v4);
  sub_100189B20(v3, v2);
  swift_unknownObjectRelease(v1);
  sub_10019BA8C(v5, v6);
  Data.append(_:)(v5, v6);
  sub_100189B20(v5, v6);
  uint64_t v8 = *(void *)(v0 + 136);
  unint64_t v9 = *(void *)(v0 + 144);
  uint64_t v10 = *(void *)(v0 + 384);
  uint64_t v11 = sub_10019BA8C(v8, v9);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    *(_DWORD *)swift_slowAlloc(12LL, -1LL) = 134217984;
    __asm { BR              X10 }
  }

  sub_100189B20(v8, v9);
  uint64_t v14 = *(_OWORD **)(v0 + 248);

  swift_beginAccess(v0 + 136, v0 + 112, 0LL, 0LL);
  uint64_t v16 = *(void *)(v0 + 136);
  unint64_t v15 = *(void *)(v0 + 144);
  sub_10019BA8C(v16, v15);
  swift_bridgeObjectRetain(v95);
  swift_unknownObjectRetain(v7);
  sub_1004461DC(v93, v95, v7, v91, v16, v15, v14);
  if (!v10)
  {
    uint64_t v28 = *(void *)(v0 + 272);
    uint64_t v29 = *(void *)(v0 + 256);
    uint64_t v30 = *(void *)(v0 + 176);
    swift_unknownObjectRelease(v7);
    swift_bridgeObjectRelease(v95);
    sub_100189B20(v16, v15);
    sub_1001A4B84(v30, v28, type metadata accessor for SDAirDropServerConnection);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v28, v29);
    if (EnumCaseMultiPayload)
    {
      uint64_t v90 = v7;
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v32 = *(void *)(v0 + 224);
        uint64_t v33 = *(void *)(v0 + 232);
        uint64_t v34 = *(void *)(v0 + 216);
        swift_release(**(void **)(v0 + 272));
        sub_10039E14C(v34);
        int v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v34, 1LL, v32);
        uint64_t v36 = *(void *)(v0 + 248);
        if (v35 == 1)
        {
          sub_1002E4410(*(void *)(v0 + 216));
          uint64_t v37 = type metadata accessor for SFAirDropReceive.Failure(0LL);
          uint64_t v38 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
          swift_allocError(v37, v38, 0LL, 0LL);
          uint64_t v40 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v37 - 8) + 104LL))( v39,  enum case for SFAirDropReceive.Failure.badRequest(_:),  v37);
          swift_willThrow(v40);
          swift_bridgeObjectRelease(v95);
          sub_100189B20(v5, v6);
          swift_unknownObjectRelease(v7);
          uint64_t v41 = v36;
LABEL_21:
          sub_1001A4BC8(v41, type metadata accessor for SDAirDropMessage);
          uint64_t v17 = *(void *)(v0 + 136);
          unint64_t v18 = *(void *)(v0 + 144);
          goto LABEL_5;
        }

        uint64_t v58 = *(void *)(v0 + 240);
        uint64_t v59 = v5;
        uint64_t v60 = *(void *)(v0 + 224);
        uint64_t v92 = *(void *)(v0 + 232);
        uint64_t v94 = *(void *)(v0 + 216);
        uint64_t v62 = *(void *)(v0 + 160);
        uint64_t v61 = *(nw_protocol_metadata_t **)(v0 + 168);
        sub_100189B20(v16, v15);
        swift_bridgeObjectRelease(v95);
        sub_100189B20(v59, v6);
        swift_unknownObjectRelease(v90);
        uint64_t v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 32);
        v63(v58, v94, v60);
        sub_1003E9DEC(v36, v62);
        v63((uint64_t)v61, v58, v60);
        uint64_t v56 = type metadata accessor for SDAirDropServerConnectionIdentity(0LL);
        uint64_t v57 = v61;
      }

      else
      {
        uint64_t v47 = *(char **)(v0 + 272);
        uint64_t v48 = *(void *)(v0 + 248);
        uint64_t v50 = *(void *)(v0 + 200);
        uint64_t v49 = *(void *)(v0 + 208);
        uint64_t v51 = *(void *)(v0 + 184);
        uint64_t v52 = *(void *)(v0 + 192);
        unint64_t v89 = v6;
        uint64_t v54 = *(void *)(v0 + 160);
        uint64_t v53 = *(nw_protocol_metadata_t **)(v0 + 168);
        swift_release(*(void *)v47);
        uint64_t v55 = sub_100183098(&qword_100649710);
        (*(void (**)(uint64_t, char *, uint64_t))(v52 + 32))(v49, &v47[*(int *)(v55 + 48)], v51);
        sub_1001A4B84(v48, v54, type metadata accessor for SDAirDropMessage);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v50, v49, v51);
        SFAirDrop.TransferIdentifier.init(_:)(v50);
        swift_bridgeObjectRelease(v95);
        sub_100189B20(v5, v89);
        swift_unknownObjectRelease(v90);
        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v49, v51);
        sub_1001A4BC8(v48, type metadata accessor for SDAirDropMessage);
        sub_100189B20(*(void *)(v0 + 136), *(void *)(v0 + 144));
        uint64_t v56 = type metadata accessor for SDAirDropServerConnectionIdentity(0LL);
        uint64_t v57 = v53;
      }

      uint64_t v64 = 1LL;
    }

    else
    {
      uint64_t v42 = *(void *)(v0 + 264);
      uint64_t v43 = *(void *)(v0 + 256);
      uint64_t v44 = *(void *)(v0 + 176);
      swift_release(**(void **)(v0 + 272));
      sub_1001A4B84(v44, v42, type metadata accessor for SDAirDropServerConnection);
      uint64_t v45 = swift_getEnumCaseMultiPayload(v42, v43);
      if (v45 > 1)
      {
        uint64_t v65 = *(char **)(v0 + 264);
        uint64_t v66 = *(void *)(v0 + 184);
        uint64_t v67 = *(void *)(v0 + 192);
        uint64_t v46 = *(void *)v65;
        uint64_t v68 = sub_100183098(&qword_100649710);
        uint64_t v45 = (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(&v65[*(int *)(v68 + 48)], v66);
      }

      else
      {
        uint64_t v46 = **(void **)(v0 + 264);
      }

      uint64_t v69 = (nw_connection *)NWConnection.nw.getter(v45);
      uint64_t v70 = swift_release(v46);
      uint64_t v71 = (nw_protocol_definition *)nw_protocol_copy_http_connection_definition(v70);
      nw_protocol_metadata_t v72 = nw_connection_copy_protocol_metadata(v69, v71);
      swift_unknownObjectRelease(v71);
      swift_unknownObjectRelease(v69);
      uint64_t v73 = *(void *)(v0 + 248);
      if (!v72)
      {
        uint64_t v85 = type metadata accessor for SFAirDropReceive.Failure(0LL);
        uint64_t v86 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
        swift_allocError(v85, v86, 0LL, 0LL);
        uint64_t v88 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v85 - 8) + 104LL))( v87,  enum case for SFAirDropReceive.Failure.badRequest(_:),  v85);
        swift_willThrow(v88);
        swift_bridgeObjectRelease(v95);
        sub_100189B20(v5, v6);
        swift_unknownObjectRelease(v7);
        uint64_t v41 = v73;
        goto LABEL_21;
      }

      uint64_t v75 = *(void *)(v0 + 160);
      uint64_t v74 = *(nw_protocol_metadata_t **)(v0 + 168);
      sub_100189B20(*(void *)(v0 + 136), *(void *)(v0 + 144));
      swift_bridgeObjectRelease(v95);
      sub_100189B20(v5, v6);
      swift_unknownObjectRelease(v7);
      sub_1003E9DEC(v73, v75);
      *uint64_t v74 = v72;
      uint64_t v56 = type metadata accessor for SDAirDropServerConnectionIdentity(0LL);
      uint64_t v57 = v74;
      uint64_t v64 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v57, v56, v64);
    uint64_t v76 = *(void *)(v0 + 280);
    uint64_t v78 = *(void *)(v0 + 264);
    uint64_t v77 = *(void *)(v0 + 272);
    uint64_t v80 = *(void *)(v0 + 240);
    uint64_t v79 = *(void *)(v0 + 248);
    uint64_t v82 = *(void *)(v0 + 208);
    uint64_t v81 = *(void *)(v0 + 216);
    uint64_t v83 = *(void *)(v0 + 200);
    swift_task_dealloc(*(void *)(v0 + 288));
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    unint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
    return v27();
  }

  sub_100189B20(v16, v15);
  swift_bridgeObjectRelease(v95);
  sub_100189B20(v5, v6);
  swift_unknownObjectRelease_n(v7, 2LL);
  swift_bridgeObjectRelease(v95);
  uint64_t v17 = v16;
  unint64_t v18 = v15;
LABEL_5:
  sub_100189B20(v17, v18);
  uint64_t v19 = *(void *)(v0 + 280);
  uint64_t v21 = *(void *)(v0 + 264);
  uint64_t v20 = *(void *)(v0 + 272);
  uint64_t v23 = *(void *)(v0 + 240);
  uint64_t v22 = *(void *)(v0 + 248);
  uint64_t v25 = *(void *)(v0 + 208);
  uint64_t v24 = *(void *)(v0 + 216);
  uint64_t v26 = *(void *)(v0 + 200);
  swift_task_dealloc(*(void *)(v0 + 288));
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  unint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
  return v27();
}

uint64_t sub_1003E828C()
{
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v3 = *(void *)(v0 + 344);
  unint64_t v2 = *(void *)(v0 + 352);
  uint64_t v4 = *(const char **)(v0 + 336);
  swift_release(*(void *)(v0 + 368));
  swift_bridgeObjectRelease(v4);
  sub_100189B20(v3, v2);
  swift_unknownObjectRelease(v1);
  sub_100189B20(*(void *)(v0 + 136), *(void *)(v0 + 144));
  uint64_t v5 = *(void *)(v0 + 280);
  uint64_t v7 = *(void *)(v0 + 264);
  uint64_t v6 = *(void *)(v0 + 272);
  uint64_t v9 = *(void *)(v0 + 240);
  uint64_t v8 = *(void *)(v0 + 248);
  uint64_t v11 = *(void *)(v0 + 208);
  uint64_t v10 = *(void *)(v0 + 216);
  uint64_t v12 = *(void *)(v0 + 200);
  swift_task_dealloc(*(void *)(v0 + 288));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1003E8364()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for SDAirDropServerConnectionIdentity(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (uint64_t *)((char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_1001A4B84(v1, (uint64_t)v8, v9);
  if (swift_getEnumCaseMultiPayload(v8, v6) == 1)
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v3 + 32))(v5, v8, v2);
    unint64_t v21 = 0LL;
    unint64_t v22 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(21LL);
    swift_bridgeObjectRelease(v22);
    unint64_t v21 = 0xD000000000000012LL;
    unint64_t v22 = 0x800000010050E4A0LL;
    uint64_t v10 = sub_100183F14( &qword_100647620,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDrop.TransferIdentifier,  (uint64_t)&protocol conformance descriptor for SFAirDrop.TransferIdentifier);
    v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v10);
    object = v11._object;
    String.append(_:)(v11);
    swift_bridgeObjectRelease(object);
    v13._uint64_t countAndFlagsBits = 41LL;
    v13._object = (void *)0xE100000000000000LL;
    String.append(_:)(v13);
    unint64_t v14 = v21;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  else
  {
    uint64_t v15 = *v8;
    unint64_t v21 = 0LL;
    unint64_t v22 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(33LL);
    v16._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
    v16._object = (void *)0x800000010050E4C0LL;
    String.append(_:)(v16);
    uint64_t v20 = v15;
    uint64_t v17 = sub_100183098(&qword_100653378);
    _print_unlocked<A, B>(_:_:)( &v20,  &v21,  v17,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    swift_unknownObjectRelease(v15);
    return v21;
  }

  return v14;
}

uint64_t sub_1003E8564(int a1)
{
  uint64_t v2 = v1;
  int v38 = a1;
  uint64_t v3 = type metadata accessor for SDAirDropServerConnection(0LL);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (uint64_t *)((char *)&v35 - v8);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (uint64_t *)((char *)&v35 - v11);
  __chkstk_darwin(v10);
  unint64_t v14 = (char *)&v35 - v13;
  if (qword_1006442F8 != -1) {
    swift_once(&qword_1006442F8, sub_1003E8934);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v15, (uint64_t)qword_100653200);
  uint64_t v16 = sub_1001A4B84(v1, (uint64_t)v14, type metadata accessor for SDAirDropServerConnection);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v35 = v1;
    uint64_t v19 = swift_slowAlloc(18LL, -1LL);
    uint64_t v20 = swift_slowAlloc(32LL, -1LL);
    uint64_t v40 = v20;
    *(_DWORD *)uint64_t v19 = 136315394;
    sub_1001A4B84((uint64_t)v14, (uint64_t)v12, type metadata accessor for SDAirDropServerConnection);
    uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v3);
    uint64_t v36 = v3;
    uint64_t v37 = v6;
    uint64_t v22 = *v12;
    if (EnumCaseMultiPayload > 1)
    {
      uint64_t v24 = (char *)v12 + *(int *)(sub_100183098(&qword_100649710) + 48);
      uint64_t v25 = type metadata accessor for UUID(0LL);
      uint64_t EnumCaseMultiPayload = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v25 - 8) + 8LL))(v24, v25);
    }

    uint64_t v26 = NWConnection.debugDescription.getter(EnumCaseMultiPayload);
    unint64_t v28 = v27;
    swift_release(v22);
    uint64_t v39 = sub_10018CDB4(v26, v28, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease(v28);
    sub_1001A4BC8((uint64_t)v14, type metadata accessor for SDAirDropServerConnection);
    *(_WORD *)(v19 + 12) = 1024;
    char v23 = v38;
    LODWORD(v39) = v38 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, (char *)&v39 + 4, v19 + 14, v19 + 18);
    _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "Cancelling connection %s forced %{BOOL}d",  (uint8_t *)v19,  0x12u);
    swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);

    uint64_t v3 = v36;
    uint64_t v6 = v37;
    uint64_t v2 = v35;
  }

  else
  {
    sub_1001A4BC8((uint64_t)v14, type metadata accessor for SDAirDropServerConnection);

    char v23 = v38;
  }

  if ((v23 & 1) != 0)
  {
    sub_1001A4B84(v2, (uint64_t)v9, type metadata accessor for SDAirDropServerConnection);
    if (swift_getEnumCaseMultiPayload(v9, v3) > 1)
    {
      uint64_t v29 = *v9;
      uint64_t v30 = (char *)v9 + *(int *)(sub_100183098(&qword_100649710) + 48);
      uint64_t v31 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, uint64_t))(*(void *)(v31 - 8) + 8LL))(v30, v31);
    }

    else
    {
      uint64_t v29 = *v9;
    }

    NWConnection.forceCancel()();
  }

  else
  {
    sub_1001A4B84(v2, (uint64_t)v6, type metadata accessor for SDAirDropServerConnection);
    if (swift_getEnumCaseMultiPayload(v6, v3) > 1)
    {
      uint64_t v29 = *v6;
      uint64_t v32 = (char *)v6 + *(int *)(sub_100183098(&qword_100649710) + 48);
      uint64_t v33 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, uint64_t))(*(void *)(v33 - 8) + 8LL))(v32, v33);
    }

    else
    {
      uint64_t v29 = *v6;
    }

    NWConnection.cancel()();
  }

  return swift_release(v29);
}

uint64_t sub_1003E8934()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100186DFC(v0, qword_100653200);
  uint64_t v1 = sub_100186DE4(v0, (uint64_t)qword_100653200);
  if (qword_100643FD8 != -1) {
    swift_once(&qword_100643FD8, sub_10023A408);
  }
  uint64_t v2 = sub_100186DE4(v0, (uint64_t)qword_1006695F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_1003E89C8(uint64_t a1)
{
  void v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for SDAirDropServerConnection(0LL);
  v2[5] = v3;
  v2[6] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for SDAirDropMessage(0LL);
  v2[7] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003E8A44, 0LL, 0LL);
}

uint64_t sub_1003E8A44()
{
  if (qword_1006442F8 != -1) {
    swift_once(&qword_1006442F8, sub_1003E8934);
  }
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[7];
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v3, (uint64_t)qword_100653200);
  uint64_t v4 = sub_1001A4B84(v1, v2, type metadata accessor for SDAirDropMessage);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = v0[7];
  if (v7)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v29 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    sub_10039AA90();
    unint64_t v12 = v11;
    v0[2] = sub_10018CDB4(v13, v11, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v12);
    sub_1001A4BC8(v8, type metadata accessor for SDAirDropMessage);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Sending response message %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    sub_1001A4BC8(v0[7], type metadata accessor for SDAirDropMessage);
  }

  uint64_t v14 = v0[5];
  uint64_t v15 = v0[6];
  sub_1001A4B84(v0[4], v15, type metadata accessor for SDAirDropServerConnection);
  if (swift_getEnumCaseMultiPayload(v15, v14) > 1)
  {
    uint64_t v17 = (uint64_t *)v0[6];
    uint64_t v16 = *v17;
    os_log_type_t v18 = (char *)v17 + *(int *)(sub_100183098(&qword_100649710) + 48);
    uint64_t v19 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v19 - 8) + 8LL))(v18, v19);
  }

  else
  {
    uint64_t v16 = *(void *)v0[6];
  }

  v0[8] = v16;
  sub_100443EEC();
  uint64_t v21 = v20;
  v0[9] = v20;
  sub_1004444B0();
  v0[10] = v22;
  v0[11] = v23;
  uint64_t v24 = v22;
  uint64_t v25 = v23;
  uint64_t v26 = swift_task_alloc(64LL);
  v0[12] = v26;
  *(void *)(v26 + swift_unknownObjectWeakDestroy(v0 + 16) = v16;
  *(void *)(v26 + 24) = v24;
  *(void *)(v26 + 32) = v25;
  *(void *)(v26 + 40) = v21;
  *(_BYTE *)(v26 + 48) = 1;
  unint64_t v27 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[13] = v27;
  *unint64_t v27 = v0;
  v27[1] = sub_1003E8D74;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v27,  0LL,  0LL,  0xD000000000000029LL,  0x80000001005074E0LL,  sub_100265F80,  v26,  (char *)&type metadata for () + 8);
}

uint64_t sub_1003E8D74()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 104);
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_1003E8E44;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 96));
    uint64_t v4 = sub_1003E8DE0;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1003E8DE0()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  sub_100189B20(*(void *)(v0 + 80), *(void *)(v0 + 88));
  swift_unknownObjectRelease(v2);
  swift_release(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003E8E44()
{
  unint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 96));
  sub_100189B20(v2, v1);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 56);
  swift_unknownObjectRelease(*(void *)(v0 + 72));
  swift_release(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003E8EB4()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for SDAirDropServerConnection(0LL);
  v1[3] = v2;
  v1[4] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003E8F10, 0LL, 0LL);
}

uint64_t sub_1003E8F10()
{
  if (qword_1006442F8 != -1) {
    swift_once(&qword_1006442F8, sub_1003E8934);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_100653200);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Sending unauthorized error response", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v7 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v8 = v0[2];

  v0[5] = nw_http_response_create_well_known(401LL);
  metadata_for_response = (nw_protocol_metadata *)nw_http_create_metadata_for_response();
  v0[6] = metadata_for_response;
  uint64_t v10 = nw_content_context_create("unauthorized response");
  v0[7] = v10;
  nw_content_context_set_metadata_for_protocol(v10, metadata_for_response);
  sub_1001A4B84(v8, v6, type metadata accessor for SDAirDropServerConnection);
  if (swift_getEnumCaseMultiPayload(v6, v7) > 1)
  {
    unint64_t v12 = (uint64_t *)v0[4];
    uint64_t v11 = *v12;
    uint64_t v13 = (char *)v12 + *(int *)(sub_100183098(&qword_100649710) + 48);
    uint64_t v14 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v14 - 8) + 8LL))(v13, v14);
  }

  else
  {
    uint64_t v11 = *(void *)v0[4];
  }

  v0[8] = v11;
  uint64_t v15 = swift_task_alloc(64LL);
  v0[9] = v15;
  *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
  *(_OWORD *)(v15 + 24) = xmmword_1004CD540;
  *(void *)(v15 + 40) = v10;
  *(_BYTE *)(v15 + 48) = 1;
  uint64_t v16 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[10] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_1003E9128;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v16,  0LL,  0LL,  0xD000000000000029LL,  0x80000001005074E0LL,  sub_100265F80,  v15,  (char *)&type metadata for () + 8);
}

uint64_t sub_1003E9128()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 80);
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    os_log_type_t v4 = sub_1003E9E30;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 72));
    os_log_type_t v4 = sub_1003E9E34;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1003E9194()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for SDAirDropServerConnection(0LL);
  v1[3] = v2;
  v1[4] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003E91F0, 0LL, 0LL);
}

uint64_t sub_1003E91F0()
{
  if (qword_1006442F8 != -1) {
    swift_once(&qword_1006442F8, sub_1003E8934);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_100653200);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Sending unsupported error response", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v7 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v8 = v0[2];

  v0[5] = nw_http_response_create_well_known(501LL);
  metadata_for_response = (nw_protocol_metadata *)nw_http_create_metadata_for_response();
  v0[6] = metadata_for_response;
  uint64_t v10 = nw_content_context_create("unsupported response");
  v0[7] = v10;
  nw_content_context_set_metadata_for_protocol(v10, metadata_for_response);
  sub_1001A4B84(v8, v6, type metadata accessor for SDAirDropServerConnection);
  if (swift_getEnumCaseMultiPayload(v6, v7) > 1)
  {
    unint64_t v12 = (uint64_t *)v0[4];
    uint64_t v11 = *v12;
    uint64_t v13 = (char *)v12 + *(int *)(sub_100183098(&qword_100649710) + 48);
    uint64_t v14 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v14 - 8) + 8LL))(v13, v14);
  }

  else
  {
    uint64_t v11 = *(void *)v0[4];
  }

  v0[8] = v11;
  uint64_t v15 = swift_task_alloc(64LL);
  v0[9] = v15;
  *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
  *(_OWORD *)(v15 + 24) = xmmword_1004CD540;
  *(void *)(v15 + 40) = v10;
  *(_BYTE *)(v15 + 48) = 1;
  uint64_t v16 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[10] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_1003E9128;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v16,  0LL,  0LL,  0xD000000000000029LL,  0x80000001005074E0LL,  sub_100265F80,  v15,  (char *)&type metadata for () + 8);
}

uint64_t sub_1003E9408()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for SDAirDropServerConnection(0LL);
  v1[3] = v2;
  v1[4] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003E9464, 0LL, 0LL);
}

uint64_t sub_1003E9464()
{
  if (qword_1006442F8 != -1) {
    swift_once(&qword_1006442F8, sub_1003E8934);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_100653200);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Sending insufficient storage error response", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v7 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v8 = v0[2];

  v0[5] = nw_http_response_create(507LL, "Insufficient Storage");
  metadata_for_response = (nw_protocol_metadata *)nw_http_create_metadata_for_response();
  v0[6] = metadata_for_response;
  uint64_t v10 = nw_content_context_create("insufficient storage response");
  v0[7] = v10;
  nw_content_context_set_metadata_for_protocol(v10, metadata_for_response);
  sub_1001A4B84(v8, v6, type metadata accessor for SDAirDropServerConnection);
  if (swift_getEnumCaseMultiPayload(v6, v7) > 1)
  {
    unint64_t v12 = (uint64_t *)v0[4];
    uint64_t v11 = *v12;
    uint64_t v13 = (char *)v12 + *(int *)(sub_100183098(&qword_100649710) + 48);
    uint64_t v14 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v14 - 8) + 8LL))(v13, v14);
  }

  else
  {
    uint64_t v11 = *(void *)v0[4];
  }

  v0[8] = v11;
  uint64_t v15 = swift_task_alloc(64LL);
  v0[9] = v15;
  *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
  *(_OWORD *)(v15 + 24) = xmmword_1004CD540;
  *(void *)(v15 + 40) = v10;
  *(_BYTE *)(v15 + 48) = 1;
  uint64_t v16 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[10] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_1003E9128;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v16,  0LL,  0LL,  0xD000000000000029LL,  0x80000001005074E0LL,  sub_100265F80,  v15,  (char *)&type metadata for () + 8);
}

uint64_t sub_1003E9684()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for SDAirDropServerConnection(0LL);
  v1[3] = v2;
  v1[4] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003E96E0, 0LL, 0LL);
}

uint64_t sub_1003E96E0()
{
  if (qword_1006442F8 != -1) {
    swift_once(&qword_1006442F8, sub_1003E8934);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_100653200);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Sending server error response", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v7 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v8 = v0[2];

  v0[5] = nw_http_response_create_well_known(500LL);
  metadata_for_response = (nw_protocol_metadata *)nw_http_create_metadata_for_response();
  v0[6] = metadata_for_response;
  uint64_t v10 = nw_content_context_create("server error response");
  v0[7] = v10;
  nw_content_context_set_metadata_for_protocol(v10, metadata_for_response);
  sub_1001A4B84(v8, v6, type metadata accessor for SDAirDropServerConnection);
  if (swift_getEnumCaseMultiPayload(v6, v7) > 1)
  {
    unint64_t v12 = (uint64_t *)v0[4];
    uint64_t v11 = *v12;
    uint64_t v13 = (char *)v12 + *(int *)(sub_100183098(&qword_100649710) + 48);
    uint64_t v14 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v14 - 8) + 8LL))(v13, v14);
  }

  else
  {
    uint64_t v11 = *(void *)v0[4];
  }

  v0[8] = v11;
  uint64_t v15 = swift_task_alloc(64LL);
  v0[9] = v15;
  *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
  *(_OWORD *)(v15 + 24) = xmmword_1004CD540;
  *(void *)(v15 + 40) = v10;
  *(_BYTE *)(v15 + 48) = 1;
  uint64_t v16 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[10] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_1003E98F8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v16,  0LL,  0LL,  0xD000000000000029LL,  0x80000001005074E0LL,  sub_100265F80,  v15,  (char *)&type metadata for () + 8);
}

uint64_t sub_1003E98F8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 80);
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    os_log_type_t v4 = sub_1003E99DC;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 72));
    os_log_type_t v4 = sub_1003E9964;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1003E9964()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 32);
  swift_release(*(void *)(v0 + 64));
  sub_1003E8564(0);
  swift_unknownObjectRelease(v1);
  swift_unknownObjectRelease(v2);
  swift_unknownObjectRelease(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003E99DC()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  swift_task_dealloc(*(void *)(v0 + 72));
  swift_release(v1);
  swift_unknownObjectRelease(v2);
  swift_unknownObjectRelease(v3);
  swift_unknownObjectRelease(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003E9A50()
{
  v1[8] = v0;
  uint64_t v2 = type metadata accessor for SDAirDropServerConnection(0LL);
  v1[9] = v2;
  unint64_t v3 = (*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[10] = swift_task_alloc(v3);
  v1[11] = swift_task_alloc(v3);
  return swift_task_switch(sub_1003E9ABC, 0LL, 0LL);
}

uint64_t sub_1003E9ABC()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[9];
  sub_1001A4B84(v0[8], v1, type metadata accessor for SDAirDropServerConnection);
  if (swift_getEnumCaseMultiPayload(v1, v2) > 1)
  {
    uint64_t v4 = (uint64_t *)v0[11];
    uint64_t v3 = *v4;
    uint64_t v5 = (char *)v4 + *(int *)(sub_100183098(&qword_100649710) + 48);
    uint64_t v6 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  }

  else
  {
    uint64_t v3 = *(void *)v0[11];
  }

  v0[12] = v3;
  uint64_t v7 = v0[9];
  uint64_t v8 = v0[10];
  sub_1001A4B84(v0[8], v8, type metadata accessor for SDAirDropServerConnection);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v7);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_1001A4BC8(v0[10], type metadata accessor for SDAirDropServerConnection);
    }

    else
    {
      uint64_t v11 = (void *)v0[10];
      swift_release(*v11);
      unint64_t v12 = (char *)v11 + *(int *)(sub_100183098(&qword_100649710) + 48);
      uint64_t v13 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8LL))(v12, v13);
    }

    uint64_t v10 = 3145728LL;
  }

  else
  {
    sub_1001A4BC8(v0[10], type metadata accessor for SDAirDropServerConnection);
    uint64_t v10 = 0x20000LL;
  }

  uint64_t v14 = swift_task_alloc(32LL);
  v0[13] = v14;
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(void *)(v14 + 24) = v10;
  uint64_t v15 = (uint64_t **)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[14] = (uint64_t)v15;
  *uint64_t v15 = v0;
  v15[1] = (uint64_t *)sub_1003E9C74;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 2,  0LL,  0LL,  0xD000000000000027LL,  0x800000010050E580LL,  sub_1003E9E40,  v14,  &type metadata for SDNWHTTPMessage);
}

uint64_t sub_1003E9C74()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 112);
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_1003E9D80;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 104));
    uint64_t v4 = sub_1003E9CE0;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1003E9CE0()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 80);
  swift_release(*(void *)(v0 + 96));
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  unint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  uint64_t v7 = *(unsigned __int8 *)(v0 + 56);
  sub_10019BA8C(v4, v5);
  swift_bridgeObjectRelease(v3);
  sub_100189B20(v4, v5);
  swift_unknownObjectRelease(v6);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v0 + 8))(v4, v5, v7);
}

uint64_t sub_1003E9D80()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 104));
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1003E9DDC(uint64_t a1)
{
}

uint64_t sub_1003E9DE4(uint64_t a1)
{
  return sub_100416794(a1, v1);
}

uint64_t sub_1003E9DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SDAirDropMessage(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003E9E44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003EBE60(a1, a2, a3, (uint64_t)&unk_1005DFA48, (uint64_t)sub_1003EE200, (uint64_t)&unk_1005DFA60);
}

uint64_t sub_1003E9E60(uint64_t a1)
{
  return sub_1003E9E98(a1, (uint64_t)&unk_1005DF9D0, (uint64_t)sub_1003ECE04, (uint64_t)&unk_1005DF9E8);
}

uint64_t sub_1003E9E7C(uint64_t a1)
{
  return sub_1003E9E98(a1, (uint64_t)&unk_1005DFCC8, (uint64_t)sub_1003EE540, (uint64_t)&unk_1005DFCE0);
}

uint64_t sub_1003E9E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = a4;
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v32 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v30 = *(void *)(v9 - 8);
  uint64_t v31 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v28 = *(void *)(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_queue);
  uint64_t v15 = swift_allocObject(&unk_1005DF9A8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v15 + 16, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))( (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v12);
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = (v16 + 24) & ~v16;
  uint64_t v18 = swift_allocObject(v26, v17 + v14, v16 | 7);
  *(void *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))( v18 + v17,  (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v12);
  aBlock[4] = v27;
  uint64_t v35 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001B9FE4;
  aBlock[3] = v29;
  uint64_t v19 = _Block_copy(aBlock);
  uint64_t v20 = swift_retain(v15);
  static DispatchQoS.unspecified.getter(v20);
  uint64_t v33 = _swiftEmptyArrayStorage;
  uint64_t v21 = sub_100183F14( (unint64_t *)&qword_100646510,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v22 = sub_100183098((uint64_t *)&unk_1006460D0);
  uint64_t v23 = sub_1001CD538( (unint64_t *)&qword_100646520,  (uint64_t *)&unk_1006460D0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v22, v23, v6, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v8, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v31);
  uint64_t v24 = v35;
  swift_release(v15);
  return swift_release(v24);
}

uint64_t sub_1003EA12C()
{
  return sub_1003EA154((uint64_t)sub_1003EE54C, (uint64_t)&unk_1005DFD08);
}

uint64_t sub_1003EA140()
{
  return sub_1003EA154((uint64_t)sub_1003EE57C, (uint64_t)&unk_1005DFD80);
}

uint64_t sub_1003EA154(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v21 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v20[1] = *(void *)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_queue);
  uint64_t v12 = swift_allocObject(&unk_1005DF9A8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v12 + 16, v2);
  aBlock[4] = a1;
  uint64_t v24 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001B9FE4;
  aBlock[3] = a2;
  uint64_t v13 = _Block_copy(aBlock);
  uint64_t v14 = swift_retain(v12);
  static DispatchQoS.unspecified.getter(v14);
  uint64_t v22 = _swiftEmptyArrayStorage;
  uint64_t v15 = sub_100183F14( (unint64_t *)&qword_100646510,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v16 = sub_100183098((uint64_t *)&unk_1006460D0);
  uint64_t v17 = sub_1001CD538( (unint64_t *)&qword_100646520,  (uint64_t *)&unk_1006460D0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v16, v17, v5, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v7, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v18 = v24;
  swift_release(v12);
  return swift_release(v18);
}

uint64_t sub_1003EA360()
{
  return sub_1003EA154((uint64_t)sub_1003EE56C, (uint64_t)&unk_1005DFD30);
}

uint64_t sub_1003EA374()
{
  return sub_1003EA154((uint64_t)sub_1003EE4C0, (uint64_t)&unk_1005DFC90);
}

uint64_t sub_1003EA388(uint64_t a1)
{
  return sub_1003EA3C0(a1, (uint64_t)&unk_1005DFBB0, (uint64_t)sub_1003EE398, (uint64_t)&unk_1005DFBC8);
}

uint64_t sub_1003EA3A4(uint64_t a1)
{
  return sub_1003EA3C0(a1, (uint64_t)&unk_1005DFC28, (uint64_t)sub_1003EE448, (uint64_t)&unk_1005DFC40);
}

uint64_t sub_1003EA3C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v26 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v12 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = *(void *)(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_queue);
  uint64_t v15 = swift_allocObject(&unk_1005DF9A8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v15 + 16, v4);
  uint64_t v16 = swift_allocObject(a2, 32LL, 7LL);
  *(void *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = v15;
  *(void *)(v16 + 24) = a1;
  aBlock[4] = a3;
  uint64_t v29 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001B9FE4;
  aBlock[3] = a4;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain(a1);
  uint64_t v18 = swift_retain(v15);
  static DispatchQoS.unspecified.getter(v18);
  uint64_t v27 = _swiftEmptyArrayStorage;
  uint64_t v19 = sub_100183F14( (unint64_t *)&qword_100646510,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v20 = sub_100183098((uint64_t *)&unk_1006460D0);
  uint64_t v21 = sub_1001CD538( (unint64_t *)&qword_100646520,  (uint64_t *)&unk_1006460D0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v20, v21, v9, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v25);
  uint64_t v22 = v29;
  swift_release(v15);
  return swift_release(v22);
}

uint64_t sub_1003EA5E8()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v17 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003EA3C0(0LL, (uint64_t)&unk_1005DFBB0, (uint64_t)sub_1003EE398, (uint64_t)&unk_1005DFBC8);
  v16[1] = *(void *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_queue);
  uint64_t v8 = swift_allocObject(&unk_1005DF9A8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v8 + 16, v0);
  aBlock[4] = sub_1003EE58C;
  uint64_t v20 = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001B9FE4;
  aBlock[3] = &unk_1005DFDD0;
  uint64_t v9 = _Block_copy(aBlock);
  uint64_t v10 = swift_retain(v8);
  static DispatchQoS.unspecified.getter(v10);
  uint64_t v18 = _swiftEmptyArrayStorage;
  uint64_t v11 = sub_100183F14( (unint64_t *)&qword_100646510,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v12 = sub_100183098((uint64_t *)&unk_1006460D0);
  uint64_t v13 = sub_1001CD538( (unint64_t *)&qword_100646520,  (uint64_t *)&unk_1006460D0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v7, v3, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v14 = v20;
  swift_release(v8);
  return swift_release(v14);
}

uint64_t sub_1003EA818()
{
  return sub_1003EA154((uint64_t)sub_1003EE584, (uint64_t)&unk_1005DFDA8);
}

uint64_t sub_1003EA82C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100186DFC(v0, qword_1006533C0);
  uint64_t v1 = sub_100186DE4(v0, (uint64_t)qword_1006533C0);
  if (qword_100643FE0 != -1) {
    swift_once(&qword_100643FE0, sub_10023A41C);
  }
  uint64_t v2 = sub_100186DE4(v0, (uint64_t)qword_100669610);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

id sub_1003EA8BC()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for SDAirDropBLEController()) init];
  qword_1006698D0 = (uint64_t)result;
  return result;
}

id sub_1003EA928()
{
  Class ObjectType = (Class)swift_getObjectType(v0);
  uint64_t v21 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v1 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id result = [(id)objc_opt_self(SDStatusMonitor) sharedMonitor];
  if (result)
  {
    id v11 = result;
    sub_100183168(0LL, (unint64_t *)&qword_100650E50, &OBJC_CLASS___OS_dispatch_queue_ptr);
    static DispatchQoS.utility.getter();
    uint64_t v25 = _swiftEmptyArrayStorage;
    uint64_t v12 = sub_100183F14( (unint64_t *)&qword_100644420,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    uint64_t v13 = sub_100183098(&qword_100650E60);
    uint64_t v14 = sub_1001CD538( (unint64_t *)&qword_100644430,  &qword_100650E60,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v13, v14, v4, v12);
    (*(void (**)(char *, void, uint64_t))(v1 + 104))( v3,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v21);
    uint64_t v15 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000029LL,  0x800000010050E6F0LL,  v9,  v6,  v3,  0LL);
    uint64_t v16 = ObjectType;
    uint64_t v17 = (char *)objc_allocWithZone(ObjectType);
    *(void *)&v17[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_airDropAdvertiser] = 0LL;
    *(void *)&v17[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_nearbyInfoV2Advertiser] = 0LL;
    *(void *)&v17[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_scanner] = 0LL;
    *(void *)&v17[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_aggressiveScannerTimer] = 0LL;
    *(void *)&v17[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_deviceUpdatesHandlers] = &_swiftEmptyDictionarySingleton;
    *(void *)&v17[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_deviceStatus] = v11;
    *(void *)&v17[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_queue] = v15;
    v24.receiver = v17;
    v24.super_class = v16;
    id v18 = objc_msgSendSuper2(&v24, "init");
    uint64_t v19 = v23;
    uint64_t v20 = swift_getObjectType(v23);
    swift_deallocPartialClassInstance(v19, v20, 64LL, 7LL);
    return v18;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_1003EABF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100183098(&qword_100646560);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v59, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1, v7);
  if (Strong)
  {
    uint64_t v9 = (char *)Strong;
    id v10 =  [*(id *)(Strong + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_deviceStatus) myShortHashesForAirDrop];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
      unint64_t v14 = v13;
    }

    else
    {
      uint64_t v15 = sub_100183098(&qword_100645398);
      uint64_t inited = swift_initStackObject(v15, v58);
      *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1004CDCA0;
      *(void *)(inited + 32) = AirDropID.getter();
      *(void *)(inited + 40) = v17;
      uint64_t v12 = sub_10038FD70((const char *)inited);
      unint64_t v14 = v18;
      swift_setDeallocating(inited);
      swift_arrayDestroy(inited + 32, *(void *)(inited + 16), &type metadata for String);
    }

    uint64_t v19 = OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_airDropAdvertiser;
    if (*(void *)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_airDropAdvertiser])
    {
      sub_100189B20(v12, v14);
    }

    else
    {
      if (qword_100644300 != -1) {
        swift_once(&qword_100644300, sub_1003EA82C);
      }
      uint64_t v20 = type metadata accessor for Logger(0LL);
      sub_100186DE4(v20, (uint64_t)qword_1006533C0);
      sub_10019BA8C(v12, v14);
      uint64_t v21 = sub_10019BA8C(v12, v14);
      uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
      os_log_type_t v23 = static os_log_type_t.default.getter();
      int v24 = v23;
      if (os_log_type_enabled(v22, v23))
      {
        int v53 = v24;
        uint64_t v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v52 = swift_slowAlloc(32LL, -1LL);
        uint64_t v57 = v52;
        uint64_t v54 = a2;
        *(_DWORD *)uint64_t v25 = 136315138;
        uint64_t v26 = v25 + 12;
        uint64_t v50 = v25 + 4;
        uint64_t v51 = v25;
        sub_1002DDC60(v12, v14);
        uint64_t v28 = v27;
        uint64_t v55 = (uint64_t)v27;
        uint64_t v29 = sub_100183098((uint64_t *)&unk_10064D7D0);
        uint64_t v30 = sub_1001CD538( (unint64_t *)&qword_100649800,  (uint64_t *)&unk_10064D7D0,  (uint64_t)&protocol conformance descriptor for [A]);
        uint64_t v31 = BidirectionalCollection<>.joined(separator:)(0LL, 0xE000000000000000LL, v29, v30);
        uint64_t v33 = v32;
        swift_bridgeObjectRelease(v28);
        uint64_t v55 = sub_10018CDB4(v31, (unint64_t)v33, &v57);
        uint64_t v34 = v26;
        a2 = v54;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v50, v34);
        swift_bridgeObjectRelease(v33);
        sub_100189B20(v12, v14);
        sub_100189B20(v12, v14);
        uint64_t v35 = v51;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  (os_log_type_t)v53,  "Starting advertisement for AirDrop %s",  v51,  0xCu);
        uint64_t v36 = v52;
        swift_arrayDestroy(v52, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v36, -1LL, -1LL);
        swift_slowDealloc(v35, -1LL, -1LL);
      }

      else
      {
        sub_100189B20(v12, v14);
        sub_100189B20(v12, v14);
      }

      uint64_t v37 = *(void **)&v9[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_queue];
      id v38 = objc_allocWithZone((Class)type metadata accessor for SDBLEAdvertiser());
      sub_10019BA8C(v12, v14);
      sub_10019BA8C(v12, v14);
      id v39 = sub_1003D0A80(v37, v12, v14, 0x3200000100LL);
      uint64_t v40 = *(void **)&v9[v19];
      *(void *)&v9[v19] = v39;

      uint64_t v41 = *(void **)&v9[v19];
      if (v41)
      {
        uint64_t v42 = swift_allocObject(&unk_1005DF9A8, 24LL, 7LL);
        swift_unknownObjectWeakInit(v42 + 16, v9);
        id v43 = v41;
        swift_retain(v42);
        sub_1003D0BFC((uint64_t)sub_1003EE3A0, v42);

        swift_release_n(v42, 2LL);
      }

      uint64_t v44 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56LL))(v6, 1LL, 1LL, v44);
      uint64_t v45 = qword_100643F28;
      swift_retain(a2);
      if (v45 != -1) {
        swift_once(&qword_100643F28, sub_100205C24);
      }
      uint64_t v46 = static AirDropActor.shared;
      uint64_t v47 = sub_100183F14( (unint64_t *)&qword_100656410,  (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor,  (uint64_t)&protocol conformance descriptor for AirDropActor);
      uint64_t v48 = (void *)swift_allocObject(&unk_1005DFC00, 40LL, 7LL);
      v48[2] = v46;
      v48[3] = v47;
      v48[4] = a2;
      swift_retain(v46);
      uint64_t v49 = sub_1001B37E8((uint64_t)v6, (uint64_t)&unk_100653450, (uint64_t)v48);
      sub_100189B20(v12, v14);
      sub_100189B20(v12, v14);

      swift_release(v49);
    }
  }

void sub_1003EB0F8(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    uint64_t v5 = *(void **)(Strong + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_airDropAdvertiser);
    if (v5)
    {
      id v6 = v5;

      sub_1003D2170(22LL);
      uint64_t v4 = v6;
    }
  }

uint64_t sub_1003EB16C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = a4;
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_1003EB1D4, static AirDropActor.shared, 0LL);
}

void sub_1003EB1D4()
{
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2)
  {
    uint64_t v3 = 0x8000000100506AA0LL;
    uint64_t v0 = getpid();
    goto LABEL_29;
  }

  uint64_t v3 = *(void *)(v2 + 24);
  if (!v3)
  {
    uint64_t v0 = 0LL;
    uint64_t v3 = 0xE000000000000000LL;
    goto LABEL_29;
  }

  if (!((unint64_t)v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    *(void *)&double v5 = swift_bridgeObjectRetain((const char *)*(void *)(v2 + 24)).n128_u64[0];
    if (v4) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

  if (v3 < 0) {
    uint64_t v8 = *(void *)(v2 + 24);
  }
  else {
    uint64_t v8 = v3 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*(const char **)(v2 + 24));
  if (!_CocoaArrayWrapper.endIndex.getter(v8))
  {
LABEL_15:
    swift_bridgeObjectRelease((const char *)v3, v5);
    uint64_t v3 = 0xE000000000000000LL;
    uint64_t v0 = *(void *)(v2 + 24);
    if (v0) {
      goto LABEL_16;
    }
LABEL_29:
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease((const char *)v3);
    sub_10002FA6C((uint64_t)@"BluetoothAdvertise", (uint64_t)@"Start", (uint64_t)v15, v0);

    (*(void (**)(void))(v1 + 8))();
    return;
  }

void sub_1003EB450(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100183098(&qword_100646560);
  __chkstk_darwin(v4);
  id v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a1 += 16LL;
  swift_beginAccess(a1, v21, 0LL, 0LL);
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong(a1, v7);
  if (Strong)
  {
    uint64_t v9 = Strong;
    uint64_t v10 = OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_airDropAdvertiser;
    id v11 = *(void **)&Strong[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_airDropAdvertiser];
    if (v11)
    {
      id v12 = v11;
      sub_1003D1B28(0LL, 0LL, 0.0);

      double v13 = *(void **)&v9[v10];
      *(void *)&v9[v10] = 0LL;

      uint64_t v14 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v6, 1LL, 1LL, v14);
      uint64_t v15 = qword_100643F28;
      swift_retain(a2);
      if (v15 != -1) {
        swift_once(&qword_100643F28, sub_100205C24);
      }
      uint64_t v16 = static AirDropActor.shared;
      uint64_t v17 = sub_100183F14( (unint64_t *)&qword_100656410,  (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor,  (uint64_t)&protocol conformance descriptor for AirDropActor);
      unint64_t v18 = (void *)swift_allocObject(&unk_1005DFC78, 40LL, 7LL);
      v18[2] = v16;
      v18[3] = v17;
      v18[4] = a2;
      swift_retain(v16);
      uint64_t v19 = sub_1001B37E8((uint64_t)v6, (uint64_t)&unk_100653460, (uint64_t)v18);

      swift_release(v19);
    }

    else
    {
    }
  }

uint64_t sub_1003EB5F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = a4;
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_1003EB65C, static AirDropActor.shared, 0LL);
}

void sub_1003EB65C()
{
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2)
  {
    uint64_t v3 = 0x8000000100506AA0LL;
    uint64_t v0 = getpid();
    goto LABEL_29;
  }

  uint64_t v3 = *(void *)(v2 + 24);
  if (!v3)
  {
    uint64_t v0 = 0LL;
    uint64_t v3 = 0xE000000000000000LL;
    goto LABEL_29;
  }

  if (!((unint64_t)v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    *(void *)&double v5 = swift_bridgeObjectRetain((const char *)*(void *)(v2 + 24)).n128_u64[0];
    if (v4) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

  if (v3 < 0) {
    uint64_t v8 = *(void *)(v2 + 24);
  }
  else {
    uint64_t v8 = v3 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*(const char **)(v2 + 24));
  if (!_CocoaArrayWrapper.endIndex.getter(v8))
  {
LABEL_15:
    swift_bridgeObjectRelease((const char *)v3, v5);
    uint64_t v3 = 0xE000000000000000LL;
    uint64_t v0 = *(void *)(v2 + 24);
    if (v0) {
      goto LABEL_16;
    }
LABEL_29:
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease((const char *)v3);
    sub_10002FA6C((uint64_t)@"BluetoothAdvertise", (uint64_t)@"Stop", (uint64_t)v15, v0);

    (*(void (**)(void))(v1 + 8))();
    return;
  }

void sub_1003EB8D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1 + 16;
  swift_beginAccess(a1 + 16, v52, 0LL, 0LL);
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong(a1 + 16, v13);
  if (Strong)
  {
    NSString v15 = Strong;
    uint64_t v16 = OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_scanner;
    if (!*(void *)&Strong[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_scanner])
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      uint64_t v25 = swift_allocObject(&unk_1005DFA98, 32LL, 7LL);
      *(void *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
      *(void *)(v25 + 24) = a4;
      uint64_t v26 = (const char **)&v15[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_deviceUpdatesHandlers];
      swift_beginAccess( &v15[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_deviceUpdatesHandlers],  &aBlock,  33LL,  0LL);
      swift_retain(a4);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v26);
      uint64_t v51 = *v26;
      *uint64_t v26 = (const char *)0x8000000000000000LL;
      sub_1003B429C((uint64_t)sub_1003EE230, v25, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
      uint64_t v28 = *v26;
      *uint64_t v26 = v51;
      __n128 v29 = swift_bridgeObjectRelease(v28);
      (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v11, v8, v29);
      swift_endAccess(&aBlock);
      id v30 = [objc_allocWithZone(CBDiscovery) init];
      [v30 setDispatchQueue:*(void *)&v15[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_queue]];
      [v30 addDiscoveryType:1];
      [v30 setDiscoveryFlags:0x40000000];
      [v30 setUseCase:131090];
      uint64_t v31 = swift_allocObject(&unk_1005DF9A8, 24LL, 7LL);
      swift_unknownObjectWeakInit(v31 + 16, v15);
      uint64_t v49 = sub_1003EE258;
      uint64_t v50 = v31;
      aBlock = _NSConcreteStackBlock;
      uint64_t v46 = 1107296256LL;
      uint64_t v47 = sub_10021D100;
      uint64_t v48 = &unk_1005DFAB0;
      uint64_t v32 = _Block_copy(&aBlock);
      swift_release(v50);
      [v30 setDeviceFoundHandler:v32];
      _Block_release(v32);
      uint64_t v33 = swift_allocObject(&unk_1005DF9A8, 24LL, 7LL);
      swift_unknownObjectWeakInit(v33 + 16, v15);
      uint64_t v49 = sub_1003EE274;
      uint64_t v50 = v33;
      aBlock = _NSConcreteStackBlock;
      uint64_t v46 = 1107296256LL;
      uint64_t v47 = sub_10021D100;
      uint64_t v48 = &unk_1005DFAD8;
      uint64_t v34 = _Block_copy(&aBlock);
      swift_release(v50);
      [v30 setDeviceLostHandler:v34];
      _Block_release(v34);
      if (qword_100644300 != -1) {
        swift_once(&qword_100644300, sub_1003EA82C);
      }
      uint64_t v35 = type metadata accessor for Logger(0LL);
      uint64_t v36 = sub_100186DE4(v35, (uint64_t)qword_1006533C0);
      uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
      os_log_type_t v38 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v37, v38))
      {
        id v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)id v39 = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Starting to scan for AirDrop", v39, 2u);
        swift_slowDealloc(v39, -1LL, -1LL);
      }

      uint64_t v40 = swift_allocObject(&unk_1005DF9A8, 24LL, 7LL);
      swift_unknownObjectWeakInit(v40 + 16, v15);
      uint64_t v49 = sub_1003EE290;
      uint64_t v50 = v40;
      aBlock = _NSConcreteStackBlock;
      uint64_t v46 = 1107296256LL;
      uint64_t v47 = sub_1002270C0;
      uint64_t v48 = &unk_1005DFB00;
      uint64_t v41 = _Block_copy(&aBlock);
      swift_release(v50);
      [v30 activateWithCompletion:v41];
      _Block_release(v41);
      uint64_t v42 = *(void **)&v15[v16];
      *(void *)&v15[v16] = v30;
      id v43 = v30;

      NSString v24 = String._bridgeToObjectiveC()();
      uint64_t v44 = getpid();
      sub_10002FA6C((uint64_t)@"BluetoothScanning", (uint64_t)@"Start", (uint64_t)v24, v44);

      goto LABEL_15;
    }
  }

  if (qword_100644300 != -1) {
    swift_once(&qword_100644300, sub_1003EA82C);
  }
  uint64_t v17 = type metadata accessor for Logger(0LL);
  uint64_t v18 = sub_100186DE4(v17, (uint64_t)qword_1006533C0);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.error.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Attempting to start scanning but already scanning", v21, 2u);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  swift_beginAccess(v12, &aBlock, 0LL, 0LL);
  uint64_t v23 = swift_unknownObjectWeakLoadStrong(v12, v22);
  if (v23)
  {
    NSString v24 = (NSString)v23;
    sub_1003EBE60(a2, a3, a4, (uint64_t)&unk_1005DFB38, (uint64_t)sub_1003EE330, (uint64_t)&unk_1005DFB50);
LABEL_15:
  }

uint64_t sub_1003EBE60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v35 = a5;
  uint64_t v36 = a6;
  uint64_t v32 = a4;
  uint64_t v33 = a2;
  uint64_t v34 = a3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v40 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v38 = *(void *)(v11 - 8);
  uint64_t v39 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = *(void *)(v6 + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_queue);
  uint64_t v18 = swift_allocObject(&unk_1005DF9A8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v18 + 16, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a1, v14);
  uint64_t v19 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v20 = (v19 + 24) & ~v19;
  unint64_t v21 = (v16 + v20 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v22 = swift_allocObject(v32, v21 + 16, v19 | 7);
  *(void *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = v18;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v22 + v20, v17, v14);
  uint64_t v23 = (void *)(v22 + v21);
  uint64_t v24 = v34;
  *uint64_t v23 = v33;
  v23[1] = v24;
  aBlock[4] = v35;
  uint64_t v43 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001B9FE4;
  aBlock[3] = v36;
  uint64_t v25 = _Block_copy(aBlock);
  swift_retain(v18);
  uint64_t v26 = swift_retain(v24);
  static DispatchQoS.unspecified.getter(v26);
  uint64_t v41 = _swiftEmptyArrayStorage;
  uint64_t v27 = sub_100183F14( (unint64_t *)&qword_100646510,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v28 = sub_100183098((uint64_t *)&unk_1006460D0);
  uint64_t v29 = sub_1001CD538( (unint64_t *)&qword_100646520,  (uint64_t *)&unk_1006460D0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v41, v28, v29, v8, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v10, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v13, v39);
  uint64_t v30 = v43;
  swift_release(v18);
  return swift_release(v30);
}

uint64_t sub_1003EC118(uint64_t a1, char a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = *(void **)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_queue);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v12 = (void *)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_deviceUpdatesHandlers);
  swift_beginAccess(v12, v32, 0LL, 0LL);
  uint64_t v13 = *v12;
  uint64_t v14 = *v12 + 64LL;
  uint64_t v15 = 1LL << *(_BYTE *)(*v12 + 32LL);
  uint64_t v16 = -1LL;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  unint64_t v17 = v16 & *(void *)(*v12 + 64LL);
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  char v19 = a2 & 1;
  uint64_t result = swift_bridgeObjectRetain(*v12);
  int64_t v20 = 0LL;
  while (1)
  {
    if (v17)
    {
      unint64_t v21 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v22 = v21 | (v20 << 6);
      goto LABEL_6;
    }

    int64_t v26 = v20 + 1;
    if (__OFADD__(v20, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v26 >= v18) {
      return swift_release(v13);
    }
    unint64_t v27 = *(void *)(v14 + 8 * v26);
    ++v20;
    if (!v27)
    {
      int64_t v20 = v26 + 1;
      if (v26 + 1 >= v18) {
        return swift_release(v13);
      }
      unint64_t v27 = *(void *)(v14 + 8 * v20);
      if (!v27)
      {
        int64_t v20 = v26 + 2;
        if (v26 + 2 >= v18) {
          return swift_release(v13);
        }
        unint64_t v27 = *(void *)(v14 + 8 * v20);
        if (!v27)
        {
          int64_t v20 = v26 + 3;
          if (v26 + 3 >= v18) {
            return swift_release(v13);
          }
          unint64_t v27 = *(void *)(v14 + 8 * v20);
          if (!v27) {
            break;
          }
        }
      }
    }

void sub_1003EC354(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5, v6);
  if (Strong)
  {
    uint64_t v8 = (void *)Strong;
    sub_1003EC118(a1, a3 & 1);
  }

void sub_1003EC3C0(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = a2 + 16;
    swift_errorRetain(a1);
    if (qword_100644300 != -1) {
      swift_once(&qword_100644300, sub_1003EA82C);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    sub_100186DE4(v4, (uint64_t)qword_1006533C0);
    swift_errorRetain(a1);
    uint64_t v5 = swift_errorRetain(a1);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v9 = swift_slowAlloc(32LL, -1LL);
      uint64_t v22 = a1;
      v23[0] = v9;
      *(_DWORD *)uint64_t v8 = 136315138;
      swift_errorRetain(a1);
      uint64_t v10 = sub_100183098(&qword_100645710);
      uint64_t v11 = String.init<A>(describing:)(&v22, v10);
      uint64_t v13 = (const char *)v12;
      uint64_t v22 = sub_10018CDB4(v11, v12, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, v23, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease(v13);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to start scanning for AirDrop: %s", v8, 0xCu);
      swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1LL, -1LL);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    swift_beginAccess(v3, v23, 0LL, 0LL);
    uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong(v3, v18);
    swift_errorRelease(a1);
    if (Strong)
    {
      int64_t v20 = *(void **)&Strong[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_scanner];
      *(void *)&Strong[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_scanner] = 0LL;
    }
  }

  else
  {
    if (qword_100644300 != -1) {
      swift_once(&qword_100644300, sub_1003EA82C);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    uint64_t v15 = sub_100186DE4(v14, (uint64_t)qword_1006533C0);
    oslog = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v16))
    {
      unint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v16, "Started scanning for AirDrop", v17, 2u);
      swift_slowDealloc(v17, -1LL, -1LL);
    }
  }

void sub_1003EC794(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v21, 0LL, 0LL);
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong(v3, v4);
  if (Strong)
  {
    uint64_t v6 = Strong;
    uint64_t v7 = OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_scanner;
    uint64_t v8 = *(void **)&Strong[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_scanner];
    if (v8)
    {
      swift_beginAccess( &Strong[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_deviceUpdatesHandlers],  v20,  33LL,  0LL);
      id v9 = v8;
      uint64_t v10 = sub_1001CA8A4(a2);
      uint64_t v12 = v11;
      swift_endAccess(v20);
      sub_100224FF8(v10, v12);
      [v9 invalidate];
      uint64_t v13 = *(void **)&v6[v7];
      *(void *)&v6[v7] = 0LL;

      uint64_t v14 = (os_log_s *)String._bridgeToObjectiveC()();
      uint64_t v15 = getpid();
      sub_10002FA6C((uint64_t)@"BluetoothScanning", (uint64_t)@"Stop", (uint64_t)v14, v15);

      goto LABEL_9;
    }
  }

  if (qword_100644300 != -1) {
    swift_once(&qword_100644300, sub_1003EA82C);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = sub_100186DE4(v16, (uint64_t)qword_1006533C0);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v18 = static os_log_type_t.error.getter(v14);
  if (os_log_type_enabled(v14, v18))
  {
    char v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)char v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v18, "Attempting to stop scanning but not scanning", v19, 2u);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

void sub_1003ECA2C(uint64_t a1, uint64_t a2, void (*a3)(id, uint64_t), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v32, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1, v12);
  if (Strong)
  {
    uint64_t v14 = (char *)Strong;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    uint64_t v15 = swift_allocObject(&unk_1005DFB88, 32LL, 7LL);
    *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
    *(void *)(v15 + 24) = a4;
    uint64_t v16 = (const char **)&v14[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_deviceUpdatesHandlers];
    swift_beginAccess( &v14[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_deviceUpdatesHandlers],  v31,  33LL,  0LL);
    swift_retain(a4);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v16);
    char v30 = *v16;
    *uint64_t v16 = (const char *)0x8000000000000000LL;
    sub_1003B429C((uint64_t)sub_1003EE610, v15, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
    os_log_type_t v18 = *v16;
    *uint64_t v16 = v30;
    __n128 v19 = swift_bridgeObjectRelease(v18);
    (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v11, v8, v19);
    swift_endAccess(v31);
    int64_t v20 = *(void **)&v14[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_scanner];
    if (!v20)
    {

      return;
    }

    id v21 = [v20 discoveredDevices];
    uint64_t v22 = sub_100183168(0LL, &qword_10064BB78, &OBJC_CLASS___CBDevice_ptr);
    uint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);

    if ((unint64_t)v23 >> 62)
    {
      if (v23 < 0) {
        uint64_t v28 = v23;
      }
      else {
        uint64_t v28 = v23 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain((const char *)v23);
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter(v28);
      if (v24) {
        goto LABEL_5;
      }
    }

    else
    {
      uint64_t v24 = *(void *)((v23 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain((const char *)v23);
      if (v24)
      {
LABEL_5:
        if (v24 < 1)
        {
          __break(1u);
          return;
        }

        for (uint64_t i = 0LL; i != v24; ++i)
        {
          if ((v23 & 0xC000000000000001LL) != 0) {
            id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v23);
          }
          else {
            id v26 = *(id *)(v23 + 8 * i + 32);
          }
          unint64_t v27 = v26;
          a3(v26, 1LL);
        }
      }
    }

    swift_bridgeObjectRelease_n(v23, 2LL);
  }

void sub_1003ECC94(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v11, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v3, v4);
  if (Strong)
  {
    uint64_t v6 = (void *)Strong;
    swift_beginAccess( Strong + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_deviceUpdatesHandlers,  v10,  33LL,  0LL);
    uint64_t v7 = sub_1001CA8A4(a2);
    uint64_t v9 = v8;
    swift_endAccess(v10);
    sub_100224FF8(v7, v9);
  }

uint64_t type metadata accessor for SDAirDropBLEController()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary22SDAirDropBLEController);
}

uint64_t sub_1003ECDDC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1003ECE04()
{
  return sub_1001CDDBC((uint64_t (*)(void, uint64_t))sub_1003EC794);
}

uint64_t sub_1003ECE10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1003ECE20(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_1003ECE28(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v20, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong
    && (uint64_t v4 = (void *)Strong,
        uint64_t v5 = *(void **)(Strong + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_scanner),
        id v6 = v5,
        v4,
        v5))
  {
    if (qword_100644300 != -1) {
      swift_once(&qword_100644300, sub_1003EA82C);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    uint64_t v8 = sub_100186DE4(v7, (uint64_t)qword_1006533C0);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Starting aggressive scan for Ask to AirDrop", v11, 2u);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    [v6 setBleScanRate:50];
    [v6 setDiscoveryFlags:0x240000000];
    [v6 setUseCase:131093];
    swift_beginAccess(v1, &v19, 0LL, 0LL);
    uint64_t v13 = swift_unknownObjectWeakLoadStrong(v1, v12);
    if (v13)
    {
      uint64_t v14 = (void *)v13;
      sub_1003ED068();
    }
  }

  else
  {
    if (qword_100644300 != -1) {
      swift_once(&qword_100644300, sub_1003EA82C);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    uint64_t v16 = sub_100186DE4(v15, (uint64_t)qword_1006533C0);
    id v6 = (id)Logger.logObject.getter(v16);
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled((os_log_t)v6, v17))
    {
      os_log_type_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v18 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v6,  v17,  "Attempting to scan aggressively for Ask to AirDrop but not scanning yet",  v18,  2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }
  }
}

uint64_t sub_1003ED068()
{
  uint64_t v1 = v0;
  uint64_t v48 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v45 = *(void *)(v48 - 8);
  uint64_t v2 = __chkstk_darwin(v48);
  uint64_t v47 = (uint64_t *)((char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v37 - v4);
  uint64_t v46 = type metadata accessor for DispatchTime(0LL);
  uint64_t v43 = *(void *)(v46 - 8);
  uint64_t v6 = __chkstk_darwin(v46);
  uint64_t v42 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v44 = (char *)&v37 - v8;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v40 = *(void *)(v9 - 8);
  uint64_t v41 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v38 = *(void *)(v12 - 8);
  uint64_t v39 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for OS_dispatch_source.TimerFlags(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  os_log_type_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_aggressiveScannerTimer;
  uint64_t v20 = *(void *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_aggressiveScannerTimer);
  if (v20)
  {
    swift_getObjectType(v20);
    swift_unknownObjectRetain(v20);
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease(v20);
  }

  sub_100183168(0LL, (unint64_t *)&qword_100646C80, &OBJC_CLASS___OS_dispatch_source_ptr);
  static OS_dispatch_source.TimerFlags.strict.getter();
  uint64_t v21 = static OS_dispatch_source.makeTimerSource(flags:queue:)( v18,  *(void *)(v1 + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_queue));
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  uint64_t v22 = *(void *)(v1 + v19);
  *(void *)(v1 + v19) = v21;
  swift_unknownObjectRetain(v21);
  swift_unknownObjectRelease(v22);
  uint64_t ObjectType = swift_getObjectType(v21);
  uint64_t v24 = swift_allocObject(&unk_1005DF9A8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v24 + 16, v1);
  aBlock[4] = sub_1003EE574;
  uint64_t v50 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001B9FE4;
  aBlock[3] = &unk_1005DFD58;
  uint64_t v25 = _Block_copy(aBlock);
  swift_retain(v24);
  j___s8Dispatch0A3QoSV11unspecifiedACvgZ(ObjectType);
  sub_1003D06B8();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v14, v11, v25, ObjectType);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v41);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v14, v39);
  uint64_t v26 = v50;
  swift_release(v24);
  uint64_t v27 = swift_release(v26);
  uint64_t v28 = v42;
  static DispatchTime.now()(v27);
  *uint64_t v5 = 10LL;
  uint64_t v29 = v45;
  uint64_t v30 = v48;
  (*(void (**)(void *, void, uint64_t))(v45 + 104))( v5,  enum case for DispatchTimeInterval.seconds(_:),  v48);
  uint64_t v31 = v44;
  + infix(_:_:)(v28, v5);
  uint64_t v32 = *(void (**)(void *, uint64_t))(v29 + 8);
  v32(v5, v30);
  uint64_t v33 = *(void (**)(char *, uint64_t))(v43 + 8);
  uint64_t v34 = v46;
  v33(v28, v46);
  sub_1001DB690((uint64_t)v5);
  uint64_t v35 = v47;
  sub_1001DB6D4(v47);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v31, v5, v35, ObjectType);
  v32(v35, v30);
  v32(v5, v30);
  v33(v31, v34);
  OS_dispatch_source.activate()();
  return swift_unknownObjectRelease(v21);
}

void sub_1003ED464(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v22, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (!Strong
    || (uint64_t v4 = (void *)Strong,
        uint64_t v5 = *(void **)(Strong + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_scanner),
        uint64_t v6 = v5,
        v4,
        !v5))
  {
    if (qword_100644300 != -1) {
      swift_once(&qword_100644300, sub_1003EA82C);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    uint64_t v18 = sub_100186DE4(v17, (uint64_t)qword_1006533C0);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v19,  "Attempting to stop aggressive scan for Ask to AirDrop but not scanning yet",  v20,  2u);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    goto LABEL_15;
  }

  if (qword_100644300 != -1) {
    swift_once(&qword_100644300, sub_1003EA82C);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = sub_100186DE4(v7, (uint64_t)qword_1006533C0);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Stopping aggressive scan for Ask to AirDrop", v11, 2u);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  -[os_log_s setBleScanRate:](v6, "setBleScanRate:", 0LL);
  -[os_log_s setDiscoveryFlags:](v6, "setDiscoveryFlags:", 0x40000000LL);
  -[os_log_s setUseCase:](v6, "setUseCase:", 131090LL);
  swift_beginAccess(v1, &v21, 0LL, 0LL);
  uint64_t v13 = swift_unknownObjectWeakLoadStrong(v1, v12);
  if (!v13)
  {
LABEL_15:

    return;
  }

  uint64_t v14 = (char *)v13;
  uint64_t v15 = OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_aggressiveScannerTimer;
  uint64_t v16 = *(void *)(v13 + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_aggressiveScannerTimer);
  if (v16)
  {
    swift_getObjectType(*(void *)(v13
                                  + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_aggressiveScannerTimer));
    swift_unknownObjectRetain(v16);
    OS_dispatch_source.cancel()();
    swift_unknownObjectRelease(v16);
    uint64_t v16 = *(void *)&v14[v15];
  }

  *(void *)&v14[v15] = 0LL;

  swift_unknownObjectRelease(v16);
}

void sub_1003ED6E4(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v25, 0LL, 0LL);
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong(v1, v2);
  if (!Strong) {
    goto LABEL_5;
  }
  uint64_t v4 = Strong;
  uint64_t v5 = *(char **)&Strong[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_airDropAdvertiser];
  if (!v5
    || (uint64_t v6 = (uint64_t *)&v5[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration],
        unint64_t v7 = *(void *)&v5[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration + 8],
        v7 >> 60 == 15))
  {

LABEL_5:
    if (qword_100644300 != -1) {
      swift_once(&qword_100644300, sub_1003EA82C);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    uint64_t v9 = sub_100186DE4(v8, (uint64_t)qword_1006533C0);
    os_log_type_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "Attempting to start Ask to AirDrop without already advertising",  v12,  2u);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    return;
  }

  uint64_t v13 = *v6;
  uint64_t v14 = v6[2];
  uint64_t v15 = v5;
  sub_1001A4C04(v13, v7);
  if (qword_100644300 != -1) {
    swift_once(&qword_100644300, sub_1003EA82C);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = sub_100186DE4(v16, (uint64_t)qword_1006533C0);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Adding Ask to AirDrop data to advertisement", v20, 2u);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  uint64_t v21 = sub_10019BA8C(v13, v7);
  char v23 = SFDeviceClassCodeGet(v21, v22);
  unint64_t v24 = v14 & 0xFFFFFFFFFFFF0000LL | (SFDeviceModelCodeGet() & 0x1F | (32 * v23)) | 0x1800000;
  sub_10019BA8C(v13, v7);
  sub_1003D2798(v13, v7, v24);
  sub_100189B20(v13, v7);
  sub_1003D07E4(50LL);
  sub_1003D0800(131093LL);

  sub_100189B0C(v13, v7);
  sub_100189B20(v13, v7);
}

void sub_1003ED988(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v21, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (!Strong) {
    goto LABEL_5;
  }
  uint64_t v4 = (void *)Strong;
  uint64_t v5 = *(void **)(Strong + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_airDropAdvertiser);
  uint64_t v6 = v5;

  if (!v5) {
    goto LABEL_5;
  }
  unint64_t v7 = (uint64_t *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration];
  unint64_t v8 = *(void *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration + 8];
  if (v8 >> 60 == 15)
  {

LABEL_5:
    if (qword_100644300 != -1) {
      swift_once(&qword_100644300, sub_1003EA82C);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    uint64_t v10 = sub_100186DE4(v9, (uint64_t)qword_1006533C0);
    os_log_type_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "Attempting to stop Ask to AirDrop without already advertising",  v13,  2u);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    return;
  }

  uint64_t v14 = *v7;
  uint64_t v15 = v7[2];
  sub_10019BA8C(*v7, *(void *)&v6[OBJC_IVAR____TtC16DaemoniOSLibrary15SDBLEAdvertiser_configuration + 8]);
  if (qword_100644300 != -1) {
    swift_once(&qword_100644300, sub_1003EA82C);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = sub_100186DE4(v16, (uint64_t)qword_1006533C0);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Removing Ask to AirDrop data from advertisement", v20, 2u);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  sub_1001A4C04(v14, v8);
  sub_10019BA8C(v14, v8);
  sub_1003D2798(v14, v8, (v15 & 0x1800000 ^ 0xFFFFFFFFFFFF0000LL) & v15);
  sub_100189B20(v14, v8);
  sub_1003D07E4(0LL);
  sub_1003D0800(131090LL);

  sub_100189B0C(v14, v8);
  sub_100189B20(v14, v8);
}

void sub_1003EDC14(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v29, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    uint64_t v4 = (char *)Strong;
    uint64_t v5 = OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_nearbyInfoV2Advertiser;
    if (*(void *)(Strong + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_nearbyInfoV2Advertiser))
    {
      if (qword_100644300 != -1) {
        swift_once(&qword_100644300, sub_1003EA82C);
      }
      uint64_t v6 = type metadata accessor for Logger(0LL);
      uint64_t v7 = sub_100186DE4(v6, (uint64_t)qword_1006533C0);
      unint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
      os_log_type_t v9 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v10 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "Attempting to start advertising temp auth tag but already advertising",  v10,  2u);
        swift_slowDealloc(v10, -1LL, -1LL);

        return;
      }
    }

    else
    {
      if (qword_100644300 != -1) {
        swift_once(&qword_100644300, sub_1003EA82C);
      }
      uint64_t v11 = type metadata accessor for Logger(0LL);
      uint64_t v12 = sub_100186DE4(v11, (uint64_t)qword_1006533C0);
      uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
      os_log_type_t v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Starting to advertise temp auth tag", v15, 2u);
        swift_slowDealloc(v15, -1LL, -1LL);
      }

      uint64_t v16 = *(void **)&v4[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_queue];
      id v17 = objc_allocWithZone((Class)type metadata accessor for SDBLEAdvertiser());
      id v18 = sub_1003D0A80(v16, 0LL, 0xF000000000000000LL, 0LL);
      os_log_type_t v19 = *(void **)&v4[v5];
      *(void *)&v4[v5] = v18;

      uint64_t v20 = *(void **)&v4[v5];
      if (v20)
      {
        id v21 = v20;
        sub_1003D0800(131094LL);

        uint64_t v22 = *(void **)&v4[v5];
        if (v22)
        {
          id v23 = v22;
          sub_1003D07E4(30LL);

          unint64_t v24 = *(void **)&v4[v5];
          if (v24)
          {
            id v25 = v24;
            sub_1003D0BFC(0LL, 0LL);

            uint64_t v26 = *(void **)&v4[v5];
            if (v26)
            {
              uint64_t v27 = swift_allocObject(&unk_1005DF9A8, 24LL, 7LL);
              swift_unknownObjectWeakInit(v27 + 16, v4);
              id v28 = v26;
              swift_retain(v27);
              sub_1003D1B28((void (*)(uint64_t))sub_1003EE554, v27, 15.0);

              swift_release_n(v27, 2LL);
              return;
            }
          }
        }
      }
    }
  }

void sub_1003EDED8(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v14, 0LL, 0LL);
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    uint64_t v4 = Strong;
    uint64_t v5 = *(void **)&Strong[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_nearbyInfoV2Advertiser];
    if (v5)
    {
      uint64_t v6 = qword_100644300;
      id v7 = v5;
      if (v6 != -1) {
        swift_once(&qword_100644300, sub_1003EA82C);
      }
      uint64_t v8 = type metadata accessor for Logger(0LL);
      uint64_t v9 = sub_100186DE4(v8, (uint64_t)qword_1006533C0);
      uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Stop advertising temp auth tag", v12, 2u);
        swift_slowDealloc(v12, -1LL, -1LL);
      }

      uint64_t v13 = swift_allocObject(&unk_1005DF9A8, 24LL, 7LL);
      swift_unknownObjectWeakInit(v13 + 16, v4);
      swift_retain(v13);
      sub_1003D1B28((void (*)(uint64_t))sub_1003EE554, v13, 0.0);

      swift_release_n(v13, 2LL);
    }

    else
    {
    }
  }

void sub_1003EE054(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0LL, 0LL);
  uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong(v1, v2);
  if (Strong)
  {
    uint64_t v4 = *(void **)&Strong[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_nearbyInfoV2Advertiser];
    *(void *)&Strong[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_nearbyInfoV2Advertiser] = 0LL;
  }

void sub_1003EE0B0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a1 += 16LL;
  swift_beginAccess(a1, v12, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a1, v6);
  if (Strong)
  {
    uint64_t v8 = (char *)Strong;
    uint64_t v9 = *(void **)(Strong + OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_queue);
    *uint64_t v5 = v9;
    (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
    id v10 = v9;
    LOBYTE(v9) = _dispatchPreconditionTest(_:)(v5);
    (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
    if ((v9 & 1) != 0)
    {
      if (*(void *)&v8[OBJC_IVAR____TtC16DaemoniOSLibrary22SDAirDropBLEController_aggressiveScannerTimer]) {
        sub_1003EA154((uint64_t)sub_1003EE4C0, (uint64_t)&unk_1005DFC90);
      }
    }

    else
    {
      __break(1u);
    }
  }

uint64_t sub_1003EE1C0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1003EE1E4()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t sub_1003EE200()
{
  return sub_1003EE33C((uint64_t (*)(void, unint64_t, void, void))sub_1003EB8D8);
}

uint64_t sub_1003EE20C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1003EE230(void *a1, unsigned __int8 *a2)
{
  return (*(uint64_t (**)(void, void))(v2 + 16))(*a1, *a2);
}

void sub_1003EE258(uint64_t a1)
{
}

void sub_1003EE274(uint64_t a1)
{
}

void sub_1003EE290(uint64_t a1)
{
}

uint64_t sub_1003EE29C()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1003EE330()
{
  return sub_1003EE33C((uint64_t (*)(void, unint64_t, void, void))sub_1003ECA2C);
}

uint64_t sub_1003EE33C(uint64_t (*a1)(void, unint64_t, void, void))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (void *)(v1 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  return a1(*(void *)(v1 + 16), v1 + v3, *v4, v4[1]);
}

void sub_1003EE398()
{
}

void sub_1003EE3A0()
{
}

uint64_t sub_1003EE3AC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  id v7 = (void *)swift_task_alloc(dword_100653444);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *id v7 = v2;
  v7[1] = sub_100195708;
  return sub_1003EB16C(a1, v4, v5, v6);
}

uint64_t sub_1003EE41C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1003EE448()
{
}

uint64_t sub_1003EE454(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  id v7 = (void *)swift_task_alloc(dword_10065345C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *id v7 = v2;
  v7[1] = sub_1001943E8;
  return sub_1003EB5F4(a1, v4, v5, v6);
}

void sub_1003EE4C0()
{
}

uint64_t sub_1003EE4CC()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1003EE540()
{
  return sub_1001CDDBC((uint64_t (*)(void, uint64_t))sub_1003ECC94);
}

void sub_1003EE54C()
{
}

void sub_1003EE554()
{
}

void sub_1003EE56C()
{
}

void sub_1003EE574()
{
}

void sub_1003EE57C()
{
}

void sub_1003EE584()
{
}

void sub_1003EE58C()
{
}

uint64_t type metadata accessor for SDAirDropContentHandlerSharediCloudDocumentsLinks()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary49SDAirDropContentHandlerSharediCloudDocumentsLinks);
}

uint64_t sub_1003EE634@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SDAirDropContentHandlerSharediCloudDocumentsLinks();
  uint64_t result = swift_allocObject(v2, 24LL, 7LL);
  *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  *a1 = result;
  return result;
}

void sub_1003EE66C(uint64_t a1, int a2)
{
  int v78 = a2;
  uint64_t v2 = sub_100183098((uint64_t *)&unk_100645130);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  id v7 = (char *)&v77 - v6;
  uint64_t v9 = SFAirDropReceive.AskRequest.urlItems.getter(v8);
  unint64_t v10 = *(void *)(v9 + 16);
  __n128 v11 = swift_bridgeObjectRelease((const char *)v9);
  uint64_t v12 = (const char *)SFAirDropReceive.AskRequest.urlItems.getter(v11);
  sub_10028CA78((uint64_t)v12, (uint64_t)v7);
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  id v17 = 0LL;
  if (v15(v7, 1LL, v13) != 1)
  {
    URL._bridgeToObjectiveC()(v16);
    id v17 = v18;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v7, v13);
  }

  id object = (id)SFSharediCloudDocumentsLinkToAppName(v17);

  if (object)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(object);
    uint64_t v22 = v21;

    Swift::String v23 = String.lowercased()();
    uint64_t countAndFlagsBits = v23._countAndFlagsBits;
    id object = v23._object;
    __n128 v20 = swift_bridgeObjectRelease(v22);
  }

  else
  {
    uint64_t countAndFlagsBits = 0LL;
  }

  id v25 = (const char *)SFAirDropReceive.AskRequest.urlItems.getter(v20);
  sub_10028CA78((uint64_t)v25, (uint64_t)v5);
  __n128 v26 = swift_bridgeObjectRelease(v25);
  if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v15)(v5, 1LL, v13, v26) == 1)
  {
    id v28 = 0LL;
  }

  else
  {
    URL._bridgeToObjectiveC()(v27);
    id v28 = v29;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v5, v13);
  }

  id v30 = (id)SFSharediCloudDocumentsLinkToFileName(v28);

  if (v30)
  {
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    uint64_t v34 = v33;
  }

  else
  {
    uint64_t v32 = 0LL;
    uint64_t v34 = 0LL;
  }

  uint64_t v35 = 0xD00000000000001CLL;
  if (v10 == 1)
  {
    if (object)
    {
      if (!v34)
      {
        swift_bridgeObjectRelease((const char *)object, v31);
        goto LABEL_31;
      }

      uint64_t v36 = (char *)0x800000010050E7E0LL;
      if (countAndFlagsBits == 0x65746F6E79656BLL && object == (id)0xE700000000000000LL) {
        goto LABEL_24;
      }
      if ((_stringCompareWithSmolCheck(_:_:expecting:)( countAndFlagsBits,  object,  0x65746F6E79656BLL,  0xE700000000000000LL,  0LL) & 1) != 0) {
        goto LABEL_24;
      }
      uint64_t v36 = (char *)0x800000010050E7C0LL;
      if (countAndFlagsBits == 0x737265626D756ELL && object == (id)0xE700000000000000LL) {
        goto LABEL_24;
      }
      if ((_stringCompareWithSmolCheck(_:_:expecting:)( countAndFlagsBits,  object,  0x737265626D756ELL,  0xE700000000000000LL,  0LL) & 1) != 0) {
        goto LABEL_24;
      }
      uint64_t v36 = (char *)0x800000010050E7A0LL;
      if (countAndFlagsBits == 0x7365676170LL && object == (id)0xE500000000000000LL)
      {
        uint64_t v35 = 0xD00000000000001ALL;
LABEL_24:
        swift_bridgeObjectRelease((const char *)object);
        goto LABEL_25;
      }

      char v76 = _stringCompareWithSmolCheck(_:_:expecting:)( countAndFlagsBits,  object,  0x7365676170LL,  0xE500000000000000LL,  0LL);
      *(void *)&double v31 = swift_bridgeObjectRelease((const char *)object).n128_u64[0];
      if ((v76 & 1) != 0)
      {
        uint64_t v35 = 0xD00000000000001ALL;
LABEL_25:
        uint64_t v37 = sub_100183098((uint64_t *)&unk_100650440);
        uint64_t inited = swift_initStackObject(v37, v79);
        __int128 v77 = xmmword_1004CDCA0;
        *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1004CDCA0;
        *(void *)(inited + 32) = v35;
        *(void *)(inited + 40) = v36;
        *(void *)(inited + 48) = 1LL;
        uint64_t v80 = 0x545F4E5245444F4DLL;
        unint64_t v81 = 0xEF524546534E4152LL;
        *(void *)&double v39 = swift_bridgeObjectRetain(v36).n128_u64[0];
        swift_bridgeObjectRetain((const char *)inited, v39);
        v40._uint64_t countAndFlagsBits = 95LL;
        v40._id object = (void *)0xE100000000000000LL;
        String.append(_:)(v40);
        v41._uint64_t countAndFlagsBits = v35;
        v41._id object = v36;
        String.append(_:)(v41);
        *(void *)&double v42 = swift_bridgeObjectRelease((const char *)inited).n128_u64[0];
        swift_bridgeObjectRelease(v36, v42);
        if ((v78 & 1) != 0)
        {
          v43._uint64_t countAndFlagsBits = 0x4C4154495041435FLL;
          v43._id object = (void *)0xEC00000044455A49LL;
          String.append(_:)(v43);
        }

        v44._uint64_t countAndFlagsBits = 0x545845545FLL;
        v44._id object = (void *)0xE500000000000000LL;
        String.append(_:)(v44);
        uint64_t v45 = (const char *)v81;
        swift_setDeallocating(inited);
        uint64_t v46 = *(void *)(inited + 16);
        uint64_t v47 = sub_100183098(&qword_100646EA0);
        swift_arrayDestroy(inited + 32, v46, v47);
        NSString v48 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v45);
        id v50 = (id)SFLocalizedStringForKey(v48, v49);

        if (v50)
        {
          uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
          int v53 = v52;

          uint64_t v54 = sub_100183098(&qword_1006483E0);
          uint64_t v55 = swift_allocObject(v54, 72LL, 7LL);
          *(_OWORD *)(v55 + swift_unknownObjectWeakDestroy(v0 + 16) = v77;
          *(void *)(v55 + 56) = &type metadata for String;
          *(void *)(v55 + 64) = sub_10021366C();
          *(void *)(v55 + 32) = v32;
          *(void *)(v55 + 40) = v34;
          uint64_t v56 = v51;
LABEL_37:
          static String.localizedStringWithFormat(_:_:)(v56, v53, v55);
          *(void *)&double v75 = swift_bridgeObjectRelease(v53).n128_u64[0];
          swift_bridgeObjectRelease((const char *)v55, v75);
          return;
        }

        goto LABEL_42;
      }
    }
  }

  else
  {
    *(void *)&double v31 = swift_bridgeObjectRelease((const char *)object).n128_u64[0];
  }

  swift_bridgeObjectRelease(v34, v31);
LABEL_31:
  uint64_t v57 = sub_100183098((uint64_t *)&unk_100650440);
  uint64_t v58 = swift_initStackObject(v57, v82);
  __int128 v77 = xmmword_1004CDCA0;
  *(_OWORD *)(v58 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1004CDCA0;
  *(void *)(v58 + 32) = 0xD00000000000001BLL;
  uint64_t v59 = v58 + 32;
  *(void *)(v58 + 40) = 0x800000010050E780LL;
  *(void *)(v58 + 48) = v10;
  uint64_t v80 = 0x545F4E5245444F4DLL;
  unint64_t v81 = 0xEF524546534E4152LL;
  *(void *)&double v60 = swift_bridgeObjectRetain((const char *)0x800000010050E780LL).n128_u64[0];
  swift_bridgeObjectRetain((const char *)v58, v60);
  v61._uint64_t countAndFlagsBits = 95LL;
  v61._id object = (void *)0xE100000000000000LL;
  String.append(_:)(v61);
  v62._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v62._id object = (void *)0x800000010050E780LL;
  String.append(_:)(v62);
  swift_bridgeObjectRelease((const char *)0x800000010050E780LL);
  if (v10 > 1)
  {
    v63._uint64_t countAndFlagsBits = 0x4C4152554C505FLL;
    v63._id object = (void *)0xE700000000000000LL;
    String.append(_:)(v63);
  }

  swift_bridgeObjectRelease((const char *)v58);
  if ((v78 & 1) != 0)
  {
    v64._uint64_t countAndFlagsBits = 0x4C4154495041435FLL;
    v64._id object = (void *)0xEC00000044455A49LL;
    String.append(_:)(v64);
  }

  v65._uint64_t countAndFlagsBits = 0x545845545FLL;
  v65._id object = (void *)0xE500000000000000LL;
  String.append(_:)(v65);
  uint64_t v66 = (const char *)v81;
  swift_setDeallocating(v58);
  uint64_t v67 = *(void *)(v58 + 16);
  uint64_t v68 = sub_100183098(&qword_100646EA0);
  swift_arrayDestroy(v59, v67, v68);
  NSString v69 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v66);
  id v71 = (id)SFLocalizedStringForKey(v69, v70);

  if (v71)
  {
    uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
    int v53 = v73;

    uint64_t v74 = sub_100183098(&qword_1006483E0);
    uint64_t v55 = swift_allocObject(v74, 72LL, 7LL);
    *(_OWORD *)(v55 + swift_unknownObjectWeakDestroy(v0 + 16) = v77;
    *(void *)(v55 + 56) = &type metadata for Int;
    *(void *)(v55 + 64) = &protocol witness table for Int;
    *(void *)(v55 + 32) = v10;
    uint64_t v56 = v72;
    goto LABEL_37;
  }

  __break(1u);
LABEL_42:
  __break(1u);
}

void sub_1003EED3C(char a1)
{
  __asm { BR              X11 }

uint64_t sub_1003EED98(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1003EEE68 + 4 * byte_1004DA697[a2]))(0x6C61636F4C736469LL);
}

uint64_t sub_1003EEE68(uint64_t a1)
{
  if (a1 == 0x6C61636F4C736469LL && v1 == 0xE800000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6C61636F4C736469LL, 0xE800000000000000LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE800000000000000LL);
  return v2 & 1;
}

void sub_1003EEF84(char a1)
{
  __asm { BR              X11 }

uint64_t sub_1003EEFF8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1003EF070 + 4 * byte_1004DA6A4[a2]))(0xD000000000000010LL);
}

uint64_t sub_1003EF070(uint64_t a1)
{
  unint64_t v2 = 0x8000000100502DA0LL;
  if (a1 == 0xD000000000000010LL && v1 == 0x8000000100502DA0LL)
  {
    char v3 = 1;
    unint64_t v2 = v1;
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0xD000000000000010LL, 0x8000000100502DA0LL, 0LL);
  }

  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

void sub_1003EF12C(char a1)
{
  __asm { BR              X12 }

uint64_t sub_1003EF178(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1003EF228 + 4 * byte_1004DA6B3[a2]))(v2 + 8);
}

uint64_t sub_1003EF228(uint64_t a1)
{
  unint64_t v3 = 0x8000000100502E60LL;
  if (a1 == v1 + 8 && v2 == 0x8000000100502E60LL)
  {
    char v4 = 1;
    unint64_t v3 = v2;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v2, v1 + 8, 0x8000000100502E60LL, 0LL);
  }

  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return v4 & 1;
}

void sub_1003EF30C(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1003EF368(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1003EF404 + 4 * byte_1004DA6C2[a2]))(0x6D614E6E65766947LL);
}

uint64_t sub_1003EF404(uint64_t a1)
{
  if (a1 == 0x6D614E6E65766947LL && v1 == 0xE900000000000065LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6D614E6E65766947LL, 0xE900000000000065LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE900000000000065LL);
  return v2 & 1;
}

void sub_1003EF4F4(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1003EF550(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1003EF620 + 4 * byte_1004DA6CF[a2]))(0x7479426C61746F54LL);
}

uint64_t sub_1003EF620(uint64_t a1)
{
  if (a1 == 0x7479426C61746F54LL && v1 == 0xEA00000000007365LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x7479426C61746F54LL, 0xEA00000000007365LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEA00000000007365LL);
  return v2 & 1;
}

uint64_t sub_1003EF74C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x726F727245LL;
  }
  else {
    uint64_t v3 = 0x726566736E617254LL;
  }
  if (v2) {
    unint64_t v4 = 0xEA00000000004449LL;
  }
  else {
    unint64_t v4 = 0xE500000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x726F727245LL;
  }
  else {
    uint64_t v5 = 0x726566736E617254LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE500000000000000LL;
  }
  else {
    unint64_t v6 = 0xEA00000000004449LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_1003EF7F0(char a1)
{
  __asm { BR              X12 }

uint64_t sub_1003EF83C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1003EF8D8 + 4 * byte_1004DA6DD[a2]))(0xD000000000000011LL);
}

uint64_t sub_1003EF8D8(uint64_t a1)
{
  unint64_t v2 = 0x8000000100502EA0LL;
  if (a1 == 0xD000000000000011LL && v1 == 0x8000000100502EA0LL)
  {
    char v3 = 1;
    unint64_t v2 = v1;
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0xD000000000000011LL, 0x8000000100502EA0LL, 0LL);
  }

  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

void sub_1003EF9B4(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1003EFA04(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1003EFAC8 + 4 * byte_1004DA6EB[a2]))(0x65707954656C6946LL);
}

uint64_t sub_1003EFAC8(uint64_t a1)
{
  if (a1 == 0x65707954656C6946LL && v1 == v2)
  {
    char v3 = 1;
    uint64_t v2 = v1;
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x65707954656C6946LL, v2, 0LL);
  }

  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

void sub_1003EFBD8(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1003EFC28(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1003EFCAC + 4 * byte_1004DA6F6[a2]))(0x636F6C6E5563616DLL);
}

uint64_t sub_1003EFCAC(uint64_t a1)
{
  if (a1 == 0x636F6C6E5563616DLL && v1 == 0xEE00656E6F68506BLL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x636F6C6E5563616DLL, 0xEE00656E6F68506BLL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEE00656E6F68506BLL);
  return v2 & 1;
}

void sub_1003EFD74(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1003EFDD0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1003EFE40 + 4 * byte_1004DA6FF[a2]))(0x6572676F72506E69LL);
}

uint64_t sub_1003EFE40(uint64_t a1)
{
  uint64_t v3 = v1 + 3854;
  if (a1 == 0x6572676F72506E69LL && v2 == v3)
  {
    char v4 = 1;
    uint64_t v3 = v2;
  }

  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v2, 0x6572676F72506E69LL, v3, 0LL);
  }

  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return v4 & 1;
}

void sub_1003EFEFC(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_1003EFF48(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE800000000000000LL);
}

void sub_1003F0010(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_1003F005C(uint64_t a1)
{
  return swift_bridgeObjectRelease(0x8000000100502DA0LL);
}

void sub_1003F00F0(uint64_t a1, char a2)
{
  __asm { BR              X11 }

uint64_t sub_1003F0138(uint64_t a1)
{
  return swift_bridgeObjectRelease(0x8000000100502E60LL);
}

void sub_1003F01DC(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_1003F0220(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE900000000000065LL);
}

void sub_1003F02B8(uint64_t a1, char a2)
{
  __asm { BR              X11 }

uint64_t sub_1003F0300(uint64_t a1)
{
  return swift_bridgeObjectRelease(0x8000000100502EA0LL);
}

void sub_1003F0390(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_1003F03D0(uint64_t a1)
{
  return swift_bridgeObjectRelease(v1);
}

void sub_1003F048C(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_1003F04E4()
{
  return Hasher._finalize()();
}

void sub_1003F05C0(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_1003F0618()
{
  return Hasher._finalize()();
}

void sub_1003F06C0(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_1003F0710()
{
  return Hasher._finalize()();
}

void sub_1003F07BC(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_1003F080C()
{
  return Hasher._finalize()();
}

void sub_1003F08EC(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_1003F0944()
{
  return Hasher._finalize()();
}

void sub_1003F09EC(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_1003F0A38()
{
  return Hasher._finalize()();
}

uint64_t sub_1003F0B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a2,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  if (a3) {
    a3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a3,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  }
  swift_retain(v4);
  v5(v6, a3);
  swift_release(v4);
  swift_bridgeObjectRelease(v6);
  return swift_bridgeObjectRelease(a3);
}

uint64_t sub_1003F0BB4()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100186DFC(v0, qword_100653550);
  uint64_t v1 = sub_100186DE4(v0, (uint64_t)qword_100653550);
  if (qword_100644020 != -1) {
    swift_once(&qword_100644020, sub_10023A520);
  }
  uint64_t v2 = sub_100186DE4(v0, (uint64_t)qword_1006696B8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_1003F0C44(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1003F0C84 + 4 * byte_1004DA756[a1]))( 0x674179627261656ELL,  0xEB00000000746E65LL);
}

uint64_t sub_1003F0C84()
{
  return 0x6C61636F4C736469LL;
}

uint64_t sub_1003F0C9C()
{
  return 0x7265746E49736469LL;
}

uint64_t sub_1003F0CBC()
{
  return 0x4274726F70706172LL;
}

uint64_t sub_1003F0CD8()
{
  return 0x4174726F70706172LL;
}

unint64_t sub_1003F0CF8()
{
  return 0xD000000000000010LL;
}

uint64_t sub_1003F0D14()
{
  return 0x65756C4265726F63LL;
}

void sub_1003F0D38(char *a1)
{
}

void sub_1003F0D44()
{
}

void sub_1003F0D50(uint64_t a1)
{
}

void sub_1003F0D58(uint64_t a1)
{
}

unint64_t sub_1003F0D60@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1003FBA38(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1003F0D8C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1003F0C44(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1003F0DB4(char a1)
{
  __asm { BR              X11 }

uint64_t sub_1003F0DE4()
{
  __int128 v2 = *(_OWORD *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_nearbyAgentTransport);
  *(_OWORD *)(v1 - 144) = v2;
  swift_unknownObjectRetain(v2);
  return *(void *)(v1 - 144);
}

uint64_t sub_1003F0F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (qword_100644318 != -1) {
    swift_once(&qword_100644318, sub_1003F0BB4);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = sub_100186DE4(v10, (uint64_t)qword_100653550);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "TransportManager: sending", v14, 2u);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    id v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    v37[0] = v19;
    *(_DWORD *)id v18 = 136315138;
    uint64_t v20 = sub_10034F6BC(a4);
    char v34 = a5;
    uint64_t v21 = a3;
    uint64_t v22 = a4;
    uint64_t v23 = a1;
    unint64_t v25 = v24;
    uint64_t v35 = sub_10018CDB4(v20, v24, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v18 + 4, v18 + 12);
    unint64_t v26 = v25;
    a1 = v23;
    a4 = v22;
    a3 = v21;
    a5 = v34;
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "TransportManager: sending message of type: %s", v18, 0xCu);
    swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  sub_10019A6C4(a3, (uint64_t)v37);
  sub_1003F0DB4(a5);
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  sub_100187100((uint64_t)v37, &qword_100654080);
  uint64_t ObjectType = swift_getObjectType(v28);
  unint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 48))( a1,  a2,  a3,  a4,  ObjectType,  v30);
  swift_unknownObjectRelease(v28);
  return v32 | ((HIDWORD(v32) & 1) << 32);
}

uint64_t sub_1003F11FC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = v4;
  if (qword_100644318 != -1) {
    swift_once(&qword_100644318, sub_1003F0BB4);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = sub_100186DE4(v10, (uint64_t)qword_100653550);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "TransportManager: handling", v14, 2u);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  unsigned int v32 = a3;
  if (os_log_type_enabled(v16, v17))
  {
    id v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    uint64_t v34 = v19;
    *(_DWORD *)id v18 = 136315138;
    uint64_t v20 = sub_10034F6BC(a3);
    uint64_t v21 = a2;
    uint64_t v22 = a4;
    unint64_t v24 = (const char *)v23;
    uint64_t v33 = sub_10018CDB4(v20, v23, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v18 + 4, v18 + 12);
    unint64_t v25 = v24;
    a4 = v22;
    a2 = v21;
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "TransportManager: handling message of type: %s", v18, 0xCu);
    swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  uint64_t v26 = v5 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_delegate;
  uint64_t result = swift_unknownObjectWeakLoadStrong( v5 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_delegate,  v27);
  if (result)
  {
    uint64_t v29 = result;
    uint64_t v30 = *(void *)(v26 + 8);
    uint64_t ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t))(v30 + 8))( a1,  a2,  v32,  a4,  ObjectType,  v30);
    return swift_unknownObjectRelease(v29);
  }

  return result;
}

uint64_t sub_1003F1460(int a1, uint64_t a2, const char *a3, uint64_t a4, unint64_t a5, int a6)
{
  char v7 = v6;
  int v33 = a6;
  uint64_t v32 = a2;
  int v31 = a1;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v36 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  os_log_type_t v13 = &v30[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v34 = *(void *)(v14 - 8);
  uint64_t v35 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = &v30[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if (qword_100644318 != -1) {
    swift_once(&qword_100644318, sub_1003F0BB4);
  }
  uint64_t v17 = type metadata accessor for Logger(0LL);
  uint64_t v18 = sub_100186DE4(v17, (uint64_t)qword_100653550);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "TransportManager: handling error", v21, 2u);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  uint64_t v22 = swift_allocObject(&unk_1005E0118, 65LL, 7LL);
  *(void *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *(_DWORD *)(v22 + 24) = v31;
  *(void *)(v22 + 32) = v32;
  *(void *)(v22 + 40) = a3;
  *(void *)(v22 + 48) = a4;
  *(void *)(v22 + 56) = a5;
  *(_BYTE *)(v22 + 64) = v33;
  aBlock[4] = sub_1003FAEFC;
  uint64_t v39 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001B9FE4;
  aBlock[3] = &unk_1005E0130;
  unint64_t v23 = _Block_copy(aBlock);
  id v24 = v7;
  swift_bridgeObjectRetain(a3);
  uint64_t v25 = sub_10019BA8C(a4, a5);
  static DispatchQoS.unspecified.getter(v25);
  uint64_t v37 = _swiftEmptyArrayStorage;
  uint64_t v26 = sub_100183F14( (unint64_t *)&qword_100646510,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v27 = sub_100183098((uint64_t *)&unk_1006460D0);
  unint64_t v28 = sub_1001D228C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v27, v28, v11, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v16, v13, v23);
  _Block_release(v23);
  (*(void (**)(_BYTE *, uint64_t))(v36 + 8))(v13, v11);
  (*(void (**)(_BYTE *, uint64_t))(v34 + 8))(v16, v35);
  return swift_release(v39);
}

uint64_t sub_1003F172C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = a1 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_delegate;
  uint64_t result = swift_unknownObjectWeakLoadStrong( a1 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_delegate,  a2);
  if (result)
  {
    uint64_t v15 = result;
    uint64_t v16 = *(void *)(v13 + 8);
    uint64_t ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 16))( a2,  a3,  a4,  a5,  a6,  a7,  ObjectType,  v16);
    return swift_unknownObjectRelease(v15);
  }

  return result;
}

uint64_t sub_1003F17E0()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  __n128 v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void *)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_nearbyAgentTransport + 8];
  uint64_t ObjectType = swift_getObjectType(*(void *)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_nearbyAgentTransport]);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 32))(ObjectType, v9);
  if ((result & 1) != 0)
  {
    uint64_t v12 = *(void *)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_idsLocalTransport + 8];
    uint64_t v13 = swift_getObjectType(*(void *)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_idsLocalTransport]);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 32))(v13, v12);
    if ((result & 1) != 0)
    {
      uint64_t v14 = *(void *)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_idsInternetTransport + 8];
      uint64_t v15 = swift_getObjectType(*(void *)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_idsInternetTransport]);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 32))(v15, v14);
      if ((result & 1) != 0)
      {
        uint64_t v16 = *(void *)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_rapportTransportBT + 8];
        uint64_t v17 = swift_getObjectType(*(void *)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_rapportTransportBT]);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 32))(v17, v16);
        if ((result & 1) != 0)
        {
          uint64_t v18 = *(void *)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_rapportTransportAWDL
                             + 8];
          uint64_t v19 = swift_getObjectType(*(void *)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_rapportTransportAWDL]);
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 32))(v19, v18);
          if ((result & 1) != 0)
          {
            uint64_t v20 = *(void *)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_coreBluetoothTransport
                               + 8];
            uint64_t v21 = swift_getObjectType(*(void *)&v0[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_coreBluetoothTransport]);
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 32))(v21, v20);
            if ((result & 1) != 0)
            {
              uint64_t v22 = swift_allocObject(&unk_1005E00C8, 24LL, 7LL);
              *(void *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
              aBlock[4] = sub_1003FAEA8;
              uint64_t v30 = v22;
              aBlock[0] = _NSConcreteStackBlock;
              aBlock[1] = 1107296256LL;
              aBlock[2] = sub_1001B9FE4;
              aBlock[3] = &unk_1005E00E0;
              unint64_t v23 = _Block_copy(aBlock);
              static DispatchQoS.unspecified.getter(v0);
              unint64_t v28 = _swiftEmptyArrayStorage;
              uint64_t v24 = sub_100183F14( (unint64_t *)&qword_100646510,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
              uint64_t v25 = sub_100183098((uint64_t *)&unk_1006460D0);
              unint64_t v26 = sub_1001D228C();
              dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v25, v26, v1, v24);
              OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v4, v23);
              _Block_release(v23);
              (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
              (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
              return swift_release(v30);
            }
          }
        }
      }
    }
  }

  return result;
}

uint64_t sub_1003F1AA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_delegate;
  uint64_t result = swift_unknownObjectWeakLoadStrong( a1 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_delegate,  a2);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(v2 + 8);
    uint64_t ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t))(v5 + 24))(ObjectType, v5);
    return swift_unknownObjectRelease(v4);
  }

  return result;
}

uint64_t sub_1003F1AF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for SDAuthenticationTransportRapportInfraWiFiOnly();
  uint64_t result = swift_dynamicCastClass(a1, v7);
  if (result)
  {
    sub_10034FFC8(a3, (uint64_t)&v15);
    if (v16)
    {
      sub_1001CE0D0(&v15, (uint64_t)v17);
      uint64_t v9 = v18;
      uint64_t v10 = v19;
      sub_10019A708(v17, v18);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
      if (v11)
      {
        uint64_t v12 = result;
        uint64_t v13 = v11;
        swift_beginAccess( a4 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_rapportInfraWiFiTransportsByIdentifier,  &v15,  33LL,  0LL);
        uint64_t v14 = sub_1001CA9A0(v12, v13);
        swift_endAccess(&v15);
        swift_bridgeObjectRelease(v13);
        swift_unknownObjectRelease(v14);
        return sub_10018709C(v17);
      }

      else
      {
        __break(1u);
      }
    }

    else
    {
      return sub_100187100((uint64_t)&v15, &qword_100654080);
    }
  }

  return result;
}

void sub_1003F1C0C(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = a2[3];
  uint64_t v5 = a2[4];
  sub_10019A708(a2, v4);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  uint64_t v7 = v6(v4, v5);
  if (v8)
  {
    uint64_t v9 = v7;
    uint64_t v10 = v8;
    uint64_t v11 = (void *)(a1
                   + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_rapportInfraWiFiTransportsByIdentifier);
    swift_beginAccess( a1 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_rapportInfraWiFiTransportsByIdentifier,  v30,  32LL,  0LL);
    uint64_t v12 = *v11;
    if (*(void *)(*v11 + 16LL))
    {
      uint64_t v13 = sub_1003AD53C(v9, v10);
      if ((v14 & 1) != 0)
      {
        __int128 v28 = *(_OWORD *)(*(void *)(v12 + 56) + 16 * v13);
        swift_endAccess(v30);
        swift_unknownObjectRetain(v28);
        swift_bridgeObjectRelease(v10);
        __int128 v15 = v28;
LABEL_7:
        *a3 = v15;
        return;
      }
    }

    swift_bridgeObjectRelease(v10);
    swift_endAccess(v30);
    uint64_t v16 = *(void **)(a1 + OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_queue);
    uint64_t v17 = type metadata accessor for SDAuthenticationTransportRapportInfraWiFiOnly();
    uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
    *(_BYTE *)(v18 + 56) = 0;
    *(void *)(v18 + 32) = 0LL;
    *(void *)(v18 + 40) = 0LL;
    id v19 = objc_allocWithZone(&OBJC_CLASS___RPCompanionLinkClient);
    id v20 = v16;
    id v21 = [v19 init];
    *(void *)(v18 + 48) = v21;
    *(void *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = v20;
    *(_BYTE *)(v18 + 24) = 0;
    [v21 setDispatchQueue:v20];
    *(void *)(v18 + 64) = 0x60000400004LL;
    uint64_t v22 = v6(v4, v5);
    if (v23)
    {
      uint64_t v24 = v22;
      uint64_t v25 = v23;
      swift_beginAccess(v11, v30, 33LL, 0LL);
      swift_retain(v18);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v11);
      uint64_t v31 = *v11;
      *uint64_t v11 = 0x8000000000000000LL;
      sub_1003FACF8(v18, v24, v25, isUniquelyReferenced_nonNull_native, &v31);
      uint64_t v27 = *v11;
      *uint64_t v11 = v31;
      swift_bridgeObjectRelease(v25);
      swift_bridgeObjectRelease(v27);
      swift_endAccess(v30);
      *(void *)&__int128 v15 = v18;
      *((void *)&v15 + 1) = &off_1005DFF98;
      goto LABEL_7;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t type metadata accessor for SDAuthenticationTransportManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager);
}

uint64_t sub_1003F1F50(void *a1)
{
  *(void *)(v1 + 40) = 0LL;
  swift_unknownObjectWeakInit(v1 + 32, 0LL);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(_BYTE *)(v1 + 24) = 1;
  *(void *)(v1 + 48) = sub_1003F2048;
  *(void *)(v1 + 56) = 0LL;
  uint64_t v3 = (void *)objc_opt_self(&OBJC_CLASS___NSNotificationCenter);
  id v4 = a1;
  id v5 = [v3 defaultCenter];
  uint64_t v6 = qword_100644320;
  swift_retain(v1);
  if (v6 != -1) {
    swift_once(&qword_100644320, sub_1003F2F78);
  }
  [v5 addObserver:v1 selector:"handleBLEMessage:" name:qword_1006698D8 object:0];

  swift_release(v1);
  return v1;
}

id sub_1003F2048(void *a1)
{
  return sub_1003F5E44(a1);
}

void sub_1003F208C(uint64_t a1)
{
  if (a1)
  {
    if (qword_100644318 != -1) {
      swift_once(&qword_100644318, sub_1003F0BB4);
    }
    uint64_t v2 = type metadata accessor for Logger(0LL);
    sub_100186DE4(v2, (uint64_t)qword_100653550);
    swift_errorRetain(a1);
    uint64_t v3 = swift_errorRetain(a1);
    oslog = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      id v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v6 = swift_slowAlloc(32LL, -1LL);
      uint64_t v16 = a1;
      uint64_t v17 = v6;
      *(_DWORD *)id v5 = 136315138;
      swift_errorRetain(a1);
      uint64_t v7 = sub_100183098(&qword_10064A1B0);
      uint64_t v8 = String.init<A>(describing:)(&v16, v7);
      uint64_t v10 = (const char *)v9;
      uint64_t v16 = sub_10018CDB4(v8, v9, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v5 + 4, v5 + 12);
      swift_bridgeObjectRelease(v10);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Error sending data: %s", v5, 0xCu);
      swift_arrayDestroy(v6, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v6, -1LL, -1LL);
      swift_slowDealloc(v5, -1LL, -1LL);

      return;
    }

    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  else
  {
    if (qword_100644318 != -1) {
      swift_once(&qword_100644318, sub_1003F0BB4);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    uint64_t v12 = sub_100186DE4(v11, (uint64_t)qword_100653550);
    oslog = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v13))
    {
      char v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)char v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v13, "Sent data", v14, 2u);
      swift_slowDealloc(v14, -1LL, -1LL);
    }
  }
}

void sub_1003F2310()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v74 = *(void *)(v0 - 8);
  uint64_t v75 = v0;
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v65 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v73 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v5 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100183098(&qword_10064DA60);
  uint64_t v7 = __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v65 - v10;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = Notification.userInfo.getter(v14);
  if (!v17)
  {
    __int128 v85 = 0u;
    __int128 v86 = 0u;
LABEL_13:
    __int128 v28 = (uint64_t *)&unk_100646550;
    uint64_t v29 = (char *)&v85;
LABEL_23:
    sub_100187100((uint64_t)v29, v28);
    goto LABEL_24;
  }

  uint64_t v18 = v17;
  uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"SDNearbyAgentNotificationInfoKeyBLEData");
  uint64_t v84 = v19;
  AnyHashable.init<A>(_:)(&aBlock, &v83, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v18 + 16) && (unint64_t v20 = sub_1003AD50C((uint64_t)&aBlock), (v21 & 1) != 0))
  {
    sub_100187058(*(void *)(v18 + 56) + 32 * v20, (uint64_t)&v85);
  }

  else
  {
    __int128 v85 = 0u;
    __int128 v86 = 0u;
  }

  swift_bridgeObjectRelease((const char *)v18);
  sub_10019154C((uint64_t)&aBlock);
  if (!*((void *)&v86 + 1)) {
    goto LABEL_13;
  }
  uint64_t v22 = swift_dynamicCast(&aBlock, &v85, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL);
  if ((v22 & 1) == 0) {
    goto LABEL_24;
  }
  unint64_t v71 = v78;
  uint64_t v72 = aBlock;
  uint64_t v23 = Notification.userInfo.getter(v22);
  if (!v23)
  {
    __int128 v85 = 0u;
    __int128 v86 = 0u;
LABEL_20:
    sub_100187100((uint64_t)&v85, (uint64_t *)&unk_100646550);
    goto LABEL_21;
  }

  uint64_t v24 = v23;
  uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"SDNearbyAgentNotificationInfoKeyBLEDevice");
  uint64_t v84 = v25;
  AnyHashable.init<A>(_:)(&aBlock, &v83, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v24 + 16) && (unint64_t v26 = sub_1003AD50C((uint64_t)&aBlock), (v27 & 1) != 0))
  {
    sub_100187058(*(void *)(v24 + 56) + 32 * v26, (uint64_t)&v85);
  }

  else
  {
    __int128 v85 = 0u;
    __int128 v86 = 0u;
  }

  swift_bridgeObjectRelease((const char *)v24);
  sub_10019154C((uint64_t)&aBlock);
  if (!*((void *)&v86 + 1)) {
    goto LABEL_20;
  }
  uint64_t v30 = sub_100183168(0LL, &qword_1006540E8, &OBJC_CLASS___SFBLEDevice_ptr);
  if ((swift_dynamicCast(&aBlock, &v85, (char *)&type metadata for Any + 8, v30, 6LL) & 1) == 0)
  {
LABEL_21:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1LL, 1LL, v12);
    uint64_t v34 = (uint64_t)v72;
LABEL_22:
    sub_100189B20(v34, v71);
    __int128 v28 = &qword_10064DA60;
    uint64_t v29 = v11;
    goto LABEL_23;
  }

  uint64_t v31 = aBlock;
  id v32 = [aBlock identifier];

  if (v32)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v32);

    uint64_t v33 = 0LL;
  }

  else
  {
    uint64_t v33 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v9, v33, 1LL, v12);
  sub_1003FC464((uint64_t)v9, (uint64_t)v11);
  int v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12);
  uint64_t v34 = (uint64_t)v72;
  if (v40 == 1) {
    goto LABEL_22;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v11, v12);
  id v41 = objc_allocWithZone((Class)&OBJC_CLASS___SDAutoUnlockSessionWrapper);
  unint64_t v42 = v71;
  sub_10019BA8C(v34, v71);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100189B20(v34, v42);
  id v44 = [v41 initWithData:isa];
  uint64_t v45 = v34;
  uint64_t v46 = v44;

  if (v46)
  {
    if ([v46 hasEncryptedPayload])
    {
      uint64_t v47 = v76;
      uint64_t v49 = (uint64_t (*)(void *, char *))v76[6];
      uint64_t v48 = v76[7];
      swift_retain();
      uint64_t v70 = v49(v46, v16);
      unint64_t v51 = v50;
      swift_release(v48);
      if (v51 >> 60 != 15)
      {
        unint64_t v54 = v51;
        uint64_t v69 = v47[2];
        uint64_t v55 = swift_allocObject(&unk_1005E04F0, 24LL, 7LL);
        swift_weakInit(v55 + 16);
        uint64_t v56 = (void *)swift_allocObject(&unk_1005E0518, 48LL, 7LL);
        uint64_t v57 = v70;
        void v56[2] = v70;
        v56[3] = v54;
        unint64_t v67 = v54;
        v56[4] = v46;
        v56[5] = v55;
        uint64_t v68 = v55;
        unint64_t v81 = sub_1003FC4E0;
        uint64_t v82 = v56;
        aBlock = _NSConcreteStackBlock;
        unint64_t v78 = 1107296256LL;
        uint64_t v79 = sub_1001B9FE4;
        uint64_t v80 = &unk_1005E0530;
        uint64_t v66 = _Block_copy(&aBlock);
        sub_1001A4C04(v57, v54);
        char v76 = v46;
        uint64_t v58 = swift_retain();
        static DispatchQoS.unspecified.getter(v58);
        *(void *)&__int128 v85 = _swiftEmptyArrayStorage;
        uint64_t v59 = sub_100183F14( (unint64_t *)&qword_100646510,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v60 = sub_100183098((uint64_t *)&unk_1006460D0);
        unint64_t v61 = sub_1001D228C();
        uint64_t v62 = v75;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v85, v60, v61, v75, v59);
        Swift::String v63 = v66;
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v5, v2, v66);
        _Block_release(v63);

        sub_100189B0C(v57, v67);
        sub_100189B20((uint64_t)v72, v71);
        (*(void (**)(char *, uint64_t))(v74 + 8))(v2, v62);
        (*(void (**)(char *, uint64_t))(v73 + 8))(v5, v3);
        (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
        Swift::String v64 = v82;
        swift_release(v68);
        swift_release(v64);
        return;
      }

      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
      unint64_t v53 = v71;
      uint64_t v52 = (uint64_t)v72;
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
      uint64_t v52 = (uint64_t)v72;
      unint64_t v53 = v42;
    }

    sub_100189B20(v52, v53);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    sub_100189B20(v45, v42);
  }

void sub_1003F2A5C(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  if (qword_100644318 != -1) {
    swift_once(&qword_100644318, sub_1003F0BB4);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v8, (uint64_t)qword_100653550);
  sub_10019BA8C(a1, a2);
  uint64_t v9 = sub_10019BA8C(a1, a2);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v35 = swift_slowAlloc(32LL, -1LL);
    v36[0] = v35;
    *(_DWORD *)uint64_t v12 = 136315138;
    sub_10019BA8C(a1, a2);
    uint64_t v13 = a3;
    uint64_t v14 = Data.description.getter(a1, a2);
    uint64_t v15 = a4;
    unint64_t v17 = v16;
    sub_100189B20(a1, a2);
    uint64_t v18 = v14;
    a3 = v13;
    uint64_t v37 = sub_10018CDB4(v18, v17, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v12 + 4, v12 + 12);
    uint64_t v19 = (const char *)v17;
    a4 = v15;
    swift_bridgeObjectRelease(v19);
    sub_100189B20(a1, a2);
    sub_100189B20(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Received data: %s", v12, 0xCu);
    swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {
    sub_100189B20(a1, a2);
    sub_100189B20(a1, a2);
  }

  int v20 = [a3 messageType];
  uint64_t v21 = sub_100350500(v20);
  if (v21 == 12)
  {
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v24 = 67109120;
      LODWORD(v36[0]) = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v36, (char *)v36 + 4, v24 + 4, v24 + 8);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Received unknown message type %u", v24, 8u);
      swift_slowDealloc(v24, -1LL, -1LL);
    }
  }

  else
  {
    uint64_t v25 = v21;
    swift_beginAccess(a4 + 16, &v37, 0LL, 0LL);
    uint64_t Strong = swift_weakLoadStrong(a4 + 16);
    if (Strong)
    {
      uint64_t v28 = Strong;
      uint64_t v29 = swift_unknownObjectWeakLoadStrong(Strong + 32, v27);
      uint64_t v30 = *(void *)(v28 + 40);
      swift_release(v28);
      if (v29)
      {
        id v31 = [(id)objc_opt_self(SDAutoUnlockTransport) sharedTransport];
        if (v31)
        {
          id v32 = v31;
          id v33 = [v31 activeDevice];

          if (v33)
          {
            uint64_t ObjectType = swift_getObjectType(v29);
            v36[3] = sub_100183168(0LL, (unint64_t *)&qword_10064D810, &OBJC_CLASS___IDSDevice_ptr);
            v36[4] = (uint64_t)&off_1005E0BD0;
            v36[0] = (uint64_t)v33;
            (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(v30 + 8))( a1,  a2,  v25,  v36,  ObjectType,  v30);
            swift_unknownObjectRelease(v29);
            sub_10018709C(v36);
            return;
          }
        }

        else
        {
          __break(1u);
        }

        __break(1u);
      }
    }
  }

uint64_t sub_1003F2ECC()
{
  sub_100195658(v0 + 32);
  swift_release(*(void *)(v0 + 56));
  return swift_deallocClassInstance(v0, 64LL, 7LL);
}

uint64_t type metadata accessor for SDAuthenticationTransportNearbyAgent()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary36SDAuthenticationTransportNearbyAgent);
}

uint64_t sub_1003F2F20(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 40) = a2;
  swift_unknownObjectWeakAssign(v2 + 32, a1);
  return swift_unknownObjectRelease(a1);
}

uint64_t sub_1003F2F50(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 a4)
{
  unint64_t v4 = sub_1003FB2E8(a1, a2, a3, a4);
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

__CFString *sub_1003F2F78()
{
  qword_1006698D8 = (uint64_t)@"SDNearbyAgentNotificationUnlockBLEDataReceived";
  return @"SDNearbyAgentNotificationUnlockBLEDataReceived";
}

void sub_1003F2F90(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = &v3[OBJC_IVAR____TtC16DaemoniOSLibrary35SDAuthenticationTransportIDSService_delegate];
  *((void *)v6 + 1) = 0LL;
  swift_unknownObjectWeakInit(v6, 0LL);
  *(void *)&v3[OBJC_IVAR____TtC16DaemoniOSLibrary35SDAuthenticationTransportIDSService_queue] = a1;
  v3[OBJC_IVAR____TtC16DaemoniOSLibrary35SDAuthenticationTransportIDSService_ready] = 1;
  id v7 = objc_allocWithZone(&OBJC_CLASS___IDSService);
  uint64_t v8 = v3;
  id v9 = a1;
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = objc_msgSend(v7, "initWithService:", v10, swift_bridgeObjectRelease(a3).n128_f64[0]);

  if (v11)
  {
    uint64_t v20 = sub_100183168(0LL, &qword_1006540B0, &OBJC_CLASS___IDSService_ptr);
    uint64_t v21 = &off_1005D9CA8;
    *(void *)&__int128 v19 = v11;
    sub_1001CE0D0( &v19,  (uint64_t)&v8[OBJC_IVAR____TtC16DaemoniOSLibrary35SDAuthenticationTransportIDSService_idsService]);

    v18.receiver = v8;
    v18.super_class = (Class)type metadata accessor for SDAuthenticationTransportIDSService();
    id v12 = objc_msgSendSuper2(&v18, "init");
    sub_10019A6C4( (uint64_t)v12 + OBJC_IVAR____TtC16DaemoniOSLibrary35SDAuthenticationTransportIDSService_idsService,  (uint64_t)&v19);
    uint64_t v13 = v20;
    uint64_t v14 = v21;
    sub_10019A708(&v19, v20);
    uint64_t v15 = (void (*)(id, id, uint64_t, _UNKNOWN **))v14[2];
    id v16 = v9;
    id v17 = v12;
    v15(v12, v9, v13, v14);

    sub_10018709C(&v19);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1003F3128(uint64_t a1, unint64_t a2, void *a3, unsigned __int8 a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = a4 + 2006;
  id v11 = objc_allocWithZone(&OBJC_CLASS___IDSProtobuf);
  sub_10019BA8C(a1, a2);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100189B20(a1, a2);
  id v13 = [v11 initWithProtobufData:isa type:v10 isResponse:0];

  uint64_t v14 = a3[3];
  uint64_t v15 = a3[4];
  sub_10019A708(a3, v14);
  char v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 32))(v14, v15);
  uint64_t v17 = sub_100183098(&qword_1006540C8);
  if ((v16 & 1) != 0)
  {
    uint64_t inited = swift_initStackObject(v17, v64);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1004CDCA0;
    uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSDefaultPairedDevice);
    uint64_t v69 = v19;
    AnyHashable.init<A>(_:)( (void *)(inited + 32),  &v68,  &type metadata for String,  &protocol witness table for String);
    uint64_t v20 = (const char *)sub_1001DD304(inited);
    swift_setDeallocating(inited);
    uint64_t v21 = inited + 32;
    uint64_t v22 = 1LL;
LABEL_11:
    swift_arrayDestroy(v21, v22, &type metadata for AnyHashable);
    goto LABEL_12;
  }

  uint64_t v23 = swift_initStackObject(v17, v72);
  *(_OWORD *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1004CDCA0;
  uint64_t v24 = (void *)(v23 + 32);
  sub_10019A6C4((uint64_t)a3, (uint64_t)&v68);
  uint64_t v25 = sub_100183098((uint64_t *)&unk_1006540D0);
  uint64_t v26 = sub_100183168(0LL, (unint64_t *)&qword_10064D810, &OBJC_CLASS___IDSDevice_ptr);
  else {
    id v27 = 0LL;
  }
  uint64_t v28 = (void *)IDSCopyIDForDevice(v27);

  if (v28)
  {
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    uint64_t v31 = v30;
  }

  else
  {
    uint64_t v29 = 0LL;
    uint64_t v31 = 0LL;
  }

  uint64_t v68 = v29;
  uint64_t v69 = v31;
  uint64_t v32 = sub_100183098(&qword_1006462D8);
  unint64_t v33 = sub_1003FC408();
  AnyHashable.init<A>(_:)(v24, &v68, v32, v33);
  uint64_t v34 = *(void *)(v23 + 16);
  if (v34)
  {
    uint64_t v20 = (const char *)sub_1001DD304(v23);
    swift_setDeallocating(v23);
    uint64_t v21 = v23 + 32;
    uint64_t v22 = v34;
    goto LABEL_11;
  }

  swift_setDeallocating(v23);
  swift_arrayDestroy(v24, 0LL, &type metadata for AnyHashable);
  uint64_t v20 = (const char *)&_swiftEmptySetSingleton;
LABEL_12:
  uint64_t v35 = sub_100183098((uint64_t *)&unk_1006540B8);
  uint64_t v36 = swift_initStackObject(v35, v66);
  *(_OWORD *)(v36 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1004CD550;
  uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionTimeoutKey);
  uint64_t v69 = v37;
  AnyHashable.init<A>(_:)((void *)(v36 + 32), &v68, &type metadata for String, &protocol witness table for String);
  *(void *)(v36 + 96) = &type metadata for Int;
  *(void *)(v36 + 72) = 15LL;
  uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionLocalDeliveryKey);
  uint64_t v69 = v38;
  AnyHashable.init<A>(_:)((void *)(v36 + 104), &v68, &type metadata for String, &protocol witness table for String);
  *(void *)(v36 + 168) = &type metadata for Bool;
  *(_BYTE *)(v36 + 144) = v16 & 1;
  uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSSendMessageOptionRequireBluetoothKey);
  uint64_t v69 = v39;
  AnyHashable.init<A>(_:)((void *)(v36 + 176), &v68, &type metadata for String, &protocol witness table for String);
  *(void *)(v36 + 240) = &type metadata for Bool;
  *(_BYTE *)(v36 + 2swift_unknownObjectWeakDestroy(v0 + 16) = v16 & 1;
  int v40 = (const char *)sub_1003913F0(v36);
  sub_100183168(0LL, &qword_100645168, &OBJC_CLASS___NSString_ptr);
  id v41 = (void *)NSString.init(stringLiteral:)("", 0LL, 2LL);
  sub_10019A6C4(v5 + OBJC_IVAR____TtC16DaemoniOSLibrary35SDAuthenticationTransportIDSService_idsService, (uint64_t)&v68);
  uint64_t v42 = v70;
  uint64_t v43 = v71;
  sub_10019A708(&v68, v70);
  id v65 = v41;
  (*(void (**)(id, const char *, uint64_t, const char *, id *, uint64_t, uint64_t))(v43 + 24))( v13,  v20,  300LL,  v40,  &v65,  v42,  v43);
  *(void *)&double v44 = swift_bridgeObjectRelease(v20).n128_u64[0];
  swift_bridgeObjectRelease(v40, v44);
  id v67 = v65;
  id v45 = v65;

  sub_10018709C(&v68);
  if (qword_100644318 != -1) {
    swift_once(&qword_100644318, sub_1003F0BB4);
  }
  uint64_t v46 = type metadata accessor for Logger(0LL);
  uint64_t v47 = sub_100186DE4(v46, (uint64_t)qword_100653550);
  uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
  os_log_type_t v49 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v50 = swift_slowAlloc(22LL, -1LL);
    unint64_t v51 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v52 = (void *)swift_slowAlloc(32LL, -1LL);
    id v65 = v52;
    *(_DWORD *)uint64_t v50 = 136315394;
    uint64_t v53 = sub_10034F6BC(a4);
    uint64_t v55 = (const char *)v54;
    uint64_t v68 = sub_10018CDB4(v53, v54, (uint64_t *)&v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v50 + 4, v50 + 12);
    swift_bridgeObjectRelease(v55);
    *(_WORD *)(v50 + 12) = 2112;
    swift_beginAccess(&v67, &v68, 0LL, 0LL);
    id v56 = v67;
    if (v67)
    {
      id v62 = v67;
      id v57 = v67;
      uint64_t v58 = v50 + 14;
      uint64_t v59 = v50 + 22;
    }

    else
    {
      uint64_t v59 = v50 + 22;
      id v62 = 0LL;
      uint64_t v58 = v50 + 14;
    }

    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v58, v59);
    *unint64_t v51 = v56;
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "Sent %s: %@", (uint8_t *)v50, 0x16u);
    uint64_t v60 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v51, 1LL, v60);
    swift_slowDealloc(v51, -1LL, -1LL);
    swift_arrayDestroy(v52, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1LL, -1LL);
    swift_slowDealloc(v50, -1LL, -1LL);
  }

  return 0x100000000LL;
}

id sub_1003F3AC4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SDAuthenticationTransportIDSService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SDAuthenticationTransportIDSService()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary35SDAuthenticationTransportIDSService);
}

uint64_t type metadata accessor for SDAuthenticationTransportIDSServiceLocal()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary40SDAuthenticationTransportIDSServiceLocal);
}

uint64_t sub_1003F3B80()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC16DaemoniOSLibrary35SDAuthenticationTransportIDSService_ready);
}

uint64_t type metadata accessor for SDAuthenticationTransportIDSServiceInternet()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary43SDAuthenticationTransportIDSServiceInternet);
}

uint64_t sub_1003F3BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC16DaemoniOSLibrary35SDAuthenticationTransportIDSService_delegate;
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign(v4, a1);
  return swift_unknownObjectRelease(a1);
}

uint64_t sub_1003F3BEC(uint64_t a1, unint64_t a2, void *a3, unsigned __int8 a4)
{
  unint64_t v4 = sub_1003F3128(a1, a2, a3, a4);
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

void sub_1003F3C14(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_100644318 != -1) {
      swift_once(&qword_100644318, sub_1003F0BB4);
    }
    uint64_t v2 = type metadata accessor for Logger(0LL);
    sub_100186DE4(v2, (uint64_t)qword_100653550);
    swift_errorRetain(a1);
    uint64_t v3 = swift_errorRetain(a1);
    oslog = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v6 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v5 = 138412290;
      swift_errorRetain(a1);
      uint64_t v7 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v14 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v5 + 4, v5 + 12);
      *uint64_t v6 = v7;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Received error upon activation: %@)", v5, 0xCu);
      uint64_t v8 = sub_100183098(&qword_1006454E0);
      swift_arrayDestroy(v6, 1LL, v8);
      swift_slowDealloc(v6, -1LL, -1LL);
      swift_slowDealloc(v5, -1LL, -1LL);

      swift_errorRelease(a1);
      return;
    }

    swift_errorRelease(a1);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  else
  {
    if (qword_100644318 != -1) {
      swift_once(&qword_100644318, sub_1003F0BB4);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    uint64_t v10 = sub_100186DE4(v9, (uint64_t)qword_100653550);
    oslog = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v11))
    {
      id v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v11, "Successfully activated and registered request", v12, 2u);
      swift_slowDealloc(v12, -1LL, -1LL);
    }
  }
}

void sub_1003F3E98(unsigned __int8 a1)
{
  uint64_t v2 = v1;
  if (qword_100644318 != -1) {
    swift_once(&qword_100644318, sub_1003F0BB4);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = sub_100186DE4(v4, (uint64_t)qword_100653550);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v10 = sub_10034F6BC(a1);
    unint64_t v12 = v11;
    uint64_t v21 = sub_10018CDB4(v10, v11, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, aBlock, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Registering for %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  id v13 = *(void **)(v2 + 32);
  sub_10034F6BC(a1);
  uint64_t v15 = v14;
  id v16 = v13;
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  uint64_t v18 = swift_allocObject(&unk_1005E0478, 24LL, 7LL);
  swift_weakInit(v18 + 16, v2);
  uint64_t v19 = swift_allocObject(&unk_1005E04A0, 32LL, 7LL);
  *(_BYTE *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v19 + 24) = v18;
  aBlock[4] = (uint64_t)sub_1003FC3FC;
  uint64_t v23 = v19;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_1003F0B08;
  aBlock[3] = (uint64_t)&unk_1005E04B8;
  uint64_t v20 = _Block_copy(aBlock);
  swift_release(v23);
  [v16 registerEventID:v17 options:0 handler:v20];
  _Block_release(v20);
}

void sub_1003F4100(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (qword_100644318 != -1) {
    swift_once(&qword_100644318, sub_1003F0BB4);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = sub_100186DE4(v8, (uint64_t)qword_100653550);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  unsigned int v51 = a3;
  if (os_log_type_enabled(v10, v11))
  {
    unint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    v54[0] = v13;
    *(_DWORD *)unint64_t v12 = 136315138;
    uint64_t v14 = sub_10034F6BC(a3);
    unint64_t v16 = v15;
    *(void *)&__int128 v57 = sub_10018CDB4(v14, v15, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, (char *)&v57 + 8, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Received %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  uint64_t v52 = 1635017060LL;
  unint64_t v53 = 0xE400000000000000LL;
  AnyHashable.init<A>(_:)(v54, &v52, &type metadata for String, &protocol witness table for String);
  if (*(void *)(a1 + 16) && (unint64_t v17 = sub_1003AD50C((uint64_t)v54), (v18 & 1) != 0))
  {
    sub_100187058(*(void *)(a1 + 56) + 32 * v17, (uint64_t)&v57);
  }

  else
  {
    __int128 v57 = 0u;
    __int128 v58 = 0u;
  }

  sub_10019154C((uint64_t)v54);
  if (!*((void *)&v58 + 1))
  {
    sub_100187100((uint64_t)&v57, (uint64_t *)&unk_100646550);
    goto LABEL_16;
  }

  if ((swift_dynamicCast(&v52, &v57, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) == 0)
  {
LABEL_16:
    uint64_t v24 = swift_bridgeObjectRetain_n(a1, 2LL);
    uint64_t v25 = (void *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.error.getter(v25);
    if (!os_log_type_enabled((os_log_t)v25, v26))
    {

      swift_bridgeObjectRelease_n(a1, 2LL);
      return;
    }

    id v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v28 = swift_slowAlloc(32LL, -1LL);
    v54[0] = v28;
    *(_DWORD *)id v27 = 136315138;
    uint64_t v29 = swift_bridgeObjectRetain(a1);
    uint64_t v30 = Dictionary.description.getter( v29,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
    unint64_t v32 = v31;
    swift_bridgeObjectRelease(a1);
    *(void *)&__int128 v57 = sub_10018CDB4(v30, v32, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, (char *)&v57 + 8, v27 + 4, v27 + 12);
    swift_bridgeObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease(v32);
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v25, v26, "Failed to get data: %s", v27, 0xCu);
    swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v27, -1LL, -1LL);
    goto LABEL_33;
  }

  uint64_t v20 = v52;
  unint64_t v19 = v53;
  if (!a2)
  {
    __int128 v57 = 0u;
    __int128 v58 = 0u;
LABEL_28:
    uint64_t v33 = sub_100187100((uint64_t)&v57, (uint64_t *)&unk_100646550);
    goto LABEL_29;
  }

  uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(RPOptionSenderIDSDeviceID);
  unint64_t v53 = v21;
  AnyHashable.init<A>(_:)(v54, &v52, &type metadata for String, &protocol witness table for String);
  if (*(void *)(a2 + 16) && (unint64_t v22 = sub_1003AD50C((uint64_t)v54), (v23 & 1) != 0))
  {
    sub_100187058(*(void *)(a2 + 56) + 32 * v22, (uint64_t)&v57);
  }

  else
  {
    __int128 v57 = 0u;
    __int128 v58 = 0u;
  }

  sub_10019154C((uint64_t)v54);
  if (!*((void *)&v58 + 1)) {
    goto LABEL_28;
  }
  uint64_t v33 = swift_dynamicCast(v54, &v57, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
  if ((v33 & 1) == 0)
  {
LABEL_29:
    uint64_t v25 = (void *)Logger.logObject.getter(v33);
    os_log_type_t v45 = static os_log_type_t.error.getter(v25);
    if (!os_log_type_enabled((os_log_t)v25, v45))
    {
LABEL_32:
      sub_100189B20(v20, v19);
LABEL_33:

      return;
    }

    uint64_t v46 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v46 = 0;
    uint64_t v47 = "No sender IDS ID";
LABEL_31:
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v25, v45, v47, v46, 2u);
    swift_slowDealloc(v46, -1LL, -1LL);
    goto LABEL_32;
  }

  uint64_t v34 = a4 + 16;
  uint64_t v36 = v54[0];
  uint64_t v35 = v54[1];
  swift_beginAccess(v34, &v57, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v34);
  if (!Strong
    || (uint64_t v38 = Strong,
        uint64_t v39 = *(void *)(Strong + 16),
        uint64_t v40 = *(void *)(Strong + 24),
        swift_unknownObjectRetain(v39),
        swift_release(v38),
        !v39))
  {
    swift_bridgeObjectRelease(v35);
    uint64_t v25 = (void *)Logger.logObject.getter(v48);
    os_log_type_t v45 = static os_log_type_t.error.getter(v25);
    if (!os_log_type_enabled((os_log_t)v25, v45)) {
      goto LABEL_32;
    }
    uint64_t v46 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v46 = 0;
    uint64_t v47 = "No delegate to send date to";
    goto LABEL_31;
  }

  id v41 = [(id)objc_opt_self(SDAutoUnlockTransport) sharedTransport];
  if (v41)
  {
    uint64_t v42 = v41;
    NSString v43 = String._bridgeToObjectiveC()();
    id v44 = [v42 idsDeviceForUniqueID:v43];

    if (v44)
    {
      swift_bridgeObjectRelease(v35);
      uint64_t v55 = sub_100183168(0LL, (unint64_t *)&qword_10064D810, &OBJC_CLASS___IDSDevice_ptr);
      id v56 = &off_1005E0BD0;
      v54[0] = (uint64_t)v44;
    }

    else
    {
      uint64_t v55 = type metadata accessor for AuthenticationDevice(0LL);
      id v56 = &off_1005E0C20;
      os_log_type_t v49 = sub_1001A4B04(v54);
      sub_100407D28(v36, v35, (uint64_t)v49);
    }

    uint64_t ObjectType = swift_getObjectType(v39);
    (*(void (**)(uint64_t, unint64_t, void, uint64_t *, uint64_t, uint64_t))(v40 + 8))( v20,  v19,  v51,  v54,  ObjectType,  v40);
    sub_100189B20(v20, v19);
    swift_unknownObjectRelease(v39);
    sub_10018709C(v54);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1003F4770()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for SDAuthenticationTransportRapportReceiver()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary40SDAuthenticationTransportRapportReceiver);
}

uint64_t sub_1003F47BC(uint64_t a1, unint64_t a2, uint64_t a3, const char *a4, unsigned __int8 a5)
{
  id v10 = [*(id *)(v5 + 48) destinationDevice];
  uint64_t v12 = (uint64_t)v10;
  if (v10)
  {
    id v13 = [v10 identifier];

    if (v13)
    {
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      unint64_t v15 = v14;

      if (v12 == a3 && v15 == a4)
      {
        LOBYTE(v12) = 1;
        unint64_t v15 = a4;
      }

      else
      {
        LOBYTE(v12) = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v15, a3, a4, 0LL);
      }

      *(void *)&double v11 = swift_bridgeObjectRelease(v15).n128_u64[0];
    }

    else
    {
      LOBYTE(v12) = 0;
    }
  }

  id v17 = objc_msgSend(*(id *)(v5 + 48), "destinationDevice", v11);

  if (v17 && (v12 & 1) == 0 || *(_BYTE *)(v5 + 56) == 1)
  {
    [*(id *)(v5 + 48) invalidate];
    id v18 = [objc_allocWithZone(RPCompanionLinkClient) init];
    unint64_t v19 = *(void **)(v5 + 48);
    *(void *)(v5 + 48) = v18;
  }

  id v20 = [*(id *)(v5 + 48) destinationDevice];

  if (((v20 != 0LL) & v12) == 1 && *(_BYTE *)(v5 + 56) != 1)
  {
    sub_1003F526C(a5, a1, a2);
  }

  else
  {
    id v21 = [objc_allocWithZone(RPCompanionLinkDevice) init];
    NSString v22 = String._bridgeToObjectiveC()();
    [v21 setIdentifier:v22];

    [*(id *)(v5 + 48) setDestinationDevice:v21];
    [*(id *)(v5 + 48) setControlFlags:*(void *)(v5 + 64)];
    char v23 = *(void **)(v5 + 48);
    uint64_t v39 = sub_1003FC388;
    uint64_t v40 = v5;
    aBlock = _NSConcreteStackBlock;
    uint64_t v36 = 1107296256LL;
    uint64_t v37 = sub_1001B9FE4;
    uint64_t v38 = &unk_1005E03F0;
    uint64_t v24 = _Block_copy(&aBlock);
    uint64_t v25 = v40;
    id v26 = v23;
    swift_retain();
    swift_release(v25);
    [v26 setInvalidationHandler:v24];
    _Block_release(v24);

    id v27 = *(void **)(v5 + 48);
    uint64_t v28 = swift_allocObject(&unk_1005E0388, 24LL, 7LL);
    swift_weakInit(v28 + 16);
    uint64_t v29 = swift_allocObject(&unk_1005E0428, 64LL, 7LL);
    *(void *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = v28;
    *(void *)(v29 + 24) = a1;
    *(void *)(v29 + 32) = a2;
    *(_BYTE *)(v29 + 40) = a5;
    *(void *)(v29 + 48) = a3;
    *(void *)(v29 + 56) = a4;
    uint64_t v39 = sub_1003FC3C4;
    uint64_t v40 = v29;
    aBlock = _NSConcreteStackBlock;
    uint64_t v36 = 1107296256LL;
    uint64_t v37 = sub_1002270C0;
    uint64_t v38 = &unk_1005E0440;
    uint64_t v30 = _Block_copy(&aBlock);
    uint64_t v31 = v40;
    id v32 = v27;
    sub_10019BA8C(a1, a2);
    swift_bridgeObjectRetain(a4);
    swift_release(v31);
    [v32 activateWithCompletion:v30];
    _Block_release(v30);
  }

  return 0x100000000LL;
}

void sub_1003F4B3C(uint64_t a1)
{
  if (qword_100644318 != -1) {
    swift_once(&qword_100644318, sub_1003F0BB4);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_100186DE4(v2, (uint64_t)qword_100653550);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "rpSender object invalidated", v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  *(_BYTE *)(a1 + 56) = 1;
}

uint64_t sub_1003F4C14( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, const char *a7)
{
  uint64_t v9 = a2 + 16;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_100644318 != -1) {
      swift_once(&qword_100644318, sub_1003F0BB4);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    sub_100186DE4(v12, (uint64_t)qword_100653550);
    swift_errorRetain(a1);
    swift_retain();
    swift_errorRetain(a1);
    uint64_t v13 = swift_retain();
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      unsigned int v56 = a5;
      uint64_t v16 = 7562617LL;
      uint64_t v17 = swift_slowAlloc(22LL, -1LL);
      id v18 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v55 = swift_slowAlloc(32LL, -1LL);
      v62[0] = v55;
      *(_DWORD *)uint64_t v17 = 138412546;
      swift_errorRetain(a1);
      uint64_t v19 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v60 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v17 + 4, v17 + 12);
      *id v18 = v19;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      *(_WORD *)(v17 + 12) = 2080;
      swift_beginAccess(v9, &v60, 0LL, 0LL);
      uint64_t Strong = swift_weakLoadStrong(v9);
      id v21 = (const char *)0xE300000000000000LL;
      if (Strong)
      {
        uint64_t v22 = *(void *)(Strong + 32);
        swift_release(Strong);
        if (v22)
        {
          uint64_t v16 = 28526LL;
          id v21 = (const char *)0xE200000000000000LL;
        }
      }

      uint64_t v59 = sub_10018CDB4(v16, (unint64_t)v21, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v17 + 14, v17 + 22);
      swift_release_n(a2, 2LL);
      swift_bridgeObjectRelease(v21);
      _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "Received error upon activation: %@). Delegate is nil: %s",  (uint8_t *)v17,  0x16u);
      uint64_t v23 = sub_100183098(&qword_1006454E0);
      swift_arrayDestroy(v18, 1LL, v23);
      swift_slowDealloc(v18, -1LL, -1LL);
      swift_arrayDestroy(v55, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1LL, -1LL);
      swift_slowDealloc(v17, -1LL, -1LL);

      a5 = v56;
    }

    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);

      swift_release_n(a2, 2LL);
    }

    swift_beginAccess(v9, v62, 0LL, 0LL);
    uint64_t v38 = swift_weakLoadStrong(v9);
    if (v38)
    {
      uint64_t v39 = v38;
      uint64_t v41 = *(void *)(v38 + 32);
      uint64_t v40 = *(void *)(v38 + 40);
      swift_unknownObjectRetain(v41);
      swift_release(v39);
      if (v41)
      {
        uint64_t v42 = (void *)_convertErrorToNSError(_:)(a1);
        id v43 = [v42 description];
        uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
        uint64_t v46 = v45;

        id v47 = [v42 code];
        if (v47 == (id)-6722LL) {
          unsigned int v48 = 12;
        }
        else {
          unsigned int v48 = 25;
        }
        if (v47 == (id)-6727LL) {
          uint64_t v49 = 20LL;
        }
        else {
          uint64_t v49 = v48;
        }
        uint64_t ObjectType = swift_getObjectType(v41);
        (*(void (**)(uint64_t, uint64_t, const char *, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v40 + 16))( v49,  v44,  v46,  a3,  a4,  a5,  ObjectType,  v40);
        swift_errorRelease(a1);
        swift_bridgeObjectRelease(v46);
        return swift_unknownObjectRelease(v41);
      }
    }

    return swift_errorRelease(a1);
  }

  else
  {
    swift_beginAccess(v9, v62, 0LL, 0LL);
    uint64_t v26 = swift_weakLoadStrong(v9);
    if (v26)
    {
      uint64_t v27 = v26;
      *(_BYTE *)(v26 + 56) = 0;
      *(_BYTE *)(v26 + 24) = 1;
      uint64_t v28 = *(void *)(v26 + 32);
      if (v28)
      {
        uint64_t v29 = *(void *)(v26 + 40);
        uint64_t v30 = swift_getObjectType(*(void *)(v26 + 32));
        uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v29 + 24);
        swift_unknownObjectRetain(v28);
        v31(v30, v29);
        swift_unknownObjectRelease(v28);
      }

      if (qword_100644318 != -1) {
        swift_once(&qword_100644318, sub_1003F0BB4);
      }
      uint64_t v32 = type metadata accessor for Logger(0LL);
      sub_100186DE4(v32, (uint64_t)qword_100653550);
      swift_bridgeObjectRetain_n(a7, 2LL);
      uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
      os_log_type_t v35 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v37 = swift_slowAlloc(32LL, -1LL);
        uint64_t v60 = v37;
        *(_DWORD *)uint64_t v36 = 136315138;
        swift_bridgeObjectRetain(a7);
        uint64_t v59 = sub_10018CDB4(a6, (unint64_t)a7, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v36 + 4, v36 + 12);
        swift_bridgeObjectRelease_n(a7, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v34,  v35,  "Successfully activated for connecting to IDS ID %s",  v36,  0xCu);
        swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v37, -1LL, -1LL);
        swift_slowDealloc(v36, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(a7, 2LL);
      }

      sub_1003F526C(a5, a3, a4);
      return swift_release(v27);
    }

    else
    {
      swift_beginAccess(v9, &v60, 0LL, 0LL);
      uint64_t result = swift_weakLoadStrong(v9);
      if (result)
      {
        uint64_t v52 = result;
        uint64_t v41 = *(void *)(result + 32);
        uint64_t v53 = *(void *)(result + 40);
        swift_unknownObjectRetain(v41);
        uint64_t result = swift_release(v52);
        if (v41)
        {
          uint64_t v54 = swift_getObjectType(v41);
          (*(void (**)(uint64_t, unint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v53 + 16))( 14LL,  0xD000000000000029LL,  0x800000010050EEB0LL,  a3,  a4,  a5,  v54,  v53);
          return swift_unknownObjectRelease(v41);
        }
      }
    }
  }

  return result;
}

void sub_1003F526C(unsigned __int8 a1, uint64_t a2, unint64_t a3)
{
  os_log_type_t v7 = *(void **)(v3 + 48);
  sub_10034F6BC(a1);
  uint64_t v9 = v8;
  id v10 = v7;
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  uint64_t v12 = sub_100183098((uint64_t *)&unk_1006540B8);
  uint64_t inited = swift_initStackObject(v12, v26);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1004CDCA0;
  uint64_t aBlock = 1635017060LL;
  unint64_t v21 = 0xE400000000000000LL;
  AnyHashable.init<A>(_:)( (void *)(inited + 32),  &aBlock,  &type metadata for String,  &protocol witness table for String);
  *(void *)(inited + 96) = &type metadata for Data;
  *(void *)(inited + 72) = a2;
  *(void *)(inited + 80) = a3;
  sub_10019BA8C(a2, a3);
  uint64_t v14 = (const char *)sub_1003913F0(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v14);
  uint64_t v16 = swift_allocObject(&unk_1005E0388, 24LL, 7LL);
  swift_weakInit(v16 + 16);
  uint64_t v17 = swift_allocObject(&unk_1005E03B0, 41LL, 7LL);
  *(void *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = v16;
  *(void *)(v17 + 24) = a2;
  *(void *)(v17 + 32) = a3;
  *(_BYTE *)(v17 + 40) = a1;
  uint64_t v24 = sub_1003FC378;
  uint64_t v25 = v17;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  unint64_t v21 = 1107296256LL;
  uint64_t v22 = sub_1002270C0;
  uint64_t v23 = &unk_1005E03C8;
  id v18 = _Block_copy(&aBlock);
  uint64_t v19 = v25;
  sub_10019BA8C(a2, a3);
  swift_release(v19);
  [v10 sendEventID:v11 event:isa options:0 completion:v18];
  _Block_release(v18);
}

__n128 sub_1003F545C(uint64_t a1, uint64_t a2, os_log_s *a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    uint64_t v9 = a2 + 16;
    swift_errorRetain(a1);
    id v10 = (void *)_convertErrorToNSError(_:)(a1);
    id v11 = [v10 code];

    if (v11 == (id)-71148LL)
    {
      if (qword_100644318 != -1) {
        swift_once(&qword_100644318, sub_1003F0BB4);
      }
      uint64_t v12 = type metadata accessor for Logger(0LL);
      uint64_t v13 = sub_100186DE4(v12, (uint64_t)qword_100653550);
      uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
      os_log_type_t v15 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "rpSender was invalidated. Retrying", v16, 2u);
        swift_slowDealloc(v16, -1LL, -1LL);
      }

      swift_beginAccess(v9, &v65, 0LL, 0LL);
      uint64_t Strong = swift_weakLoadStrong(v9);
      if (Strong)
      {
        *(_BYTE *)(Strong + 56) = 1;
        swift_release(Strong);
      }

      swift_beginAccess(v9, &v63, 0LL, 0LL);
      uint64_t v18 = swift_weakLoadStrong(v9);
      if (v18)
      {
        uint64_t v19 = v18;
        id v20 = *(id *)(v18 + 48);
        swift_release(v19);
        id v21 = [v20 destinationDevice];

        if (v21)
        {
          id v22 = [v21 identifier];

          if (v22)
          {
            uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
            uint64_t v25 = v24;

            swift_beginAccess(v9, v62, 0LL, 0LL);
            uint64_t v26 = swift_weakLoadStrong(v9);
            if (v26)
            {
              uint64_t v27 = v26;
              sub_1003F47BC(a3, a4, v23, v25, a5);
              swift_errorRelease(a1);
              swift_release(v27);
            }

            else
            {
              swift_errorRelease(a1);
            }

            return swift_bridgeObjectRelease(v25);
          }
        }
      }
    }

    else
    {
      if (qword_100644318 != -1) {
        swift_once(&qword_100644318, sub_1003F0BB4);
      }
      uint64_t v37 = type metadata accessor for Logger(0LL);
      sub_100186DE4(v37, (uint64_t)qword_100653550);
      swift_errorRetain(a1);
      uint64_t v38 = swift_errorRetain(a1);
      uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
      os_log_type_t v40 = static os_log_type_t.default.getter();
      os_log_t osloga = a3;
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v42 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v41 = 138412290;
        swift_errorRetain(a1);
        uint64_t v43 = _swift_stdlib_bridgeErrorToNSError(a1);
        uint64_t v65 = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v41 + 4, v41 + 12);
        uint64_t *v42 = v43;
        swift_errorRelease(a1);
        swift_errorRelease(a1);
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Received error for sending request: %@", v41, 0xCu);
        uint64_t v44 = sub_100183098(&qword_1006454E0);
        swift_arrayDestroy(v42, 1LL, v44);
        swift_slowDealloc(v42, -1LL, -1LL);
        swift_slowDealloc(v41, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease(a1);
        swift_errorRelease(a1);
      }

      swift_beginAccess(v9, &v65, 0LL, 0LL);
      uint64_t v45 = swift_weakLoadStrong(v9);
      if (v45)
      {
        uint64_t v46 = v45;
        uint64_t v47 = *(void *)(v45 + 32);
        uint64_t v48 = *(void *)(v45 + 40);
        swift_unknownObjectRetain(v47);
        swift_release(v46);
        if (v47)
        {
          uint64_t v49 = (void *)_convertErrorToNSError(_:)(a1);
          id v50 = [v49 description];
          uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
          uint64_t v53 = v52;

          id v54 = [v49 code];
          if (v54 == (id)-6722LL) {
            unsigned int v55 = 12;
          }
          else {
            unsigned int v55 = 25;
          }
          if (v54 == (id)-6727LL) {
            uint64_t v56 = 20LL;
          }
          else {
            uint64_t v56 = v55;
          }
          uint64_t ObjectType = swift_getObjectType(v47);
          (*(void (**)(uint64_t, uint64_t, const char *, os_log_t, uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 16))( v56,  v51,  v53,  osloga,  a4,  a5,  ObjectType,  v48);
          swift_bridgeObjectRelease(v53);
          swift_unknownObjectRelease(v47);
        }
      }

      swift_beginAccess(v9, &v63, 0LL, 0LL);
      uint64_t v58 = swift_weakLoadStrong(v9);
      if (v58)
      {
        uint64_t v59 = v58;
        sub_1003F5ADC();
        swift_errorRelease(a1);
        swift_release(v59);
        return result;
      }
    }

    swift_errorRelease(a1);
    return result;
  }

  if (qword_100644318 != -1) {
    swift_once(&qword_100644318, sub_1003F0BB4);
  }
  uint64_t v28 = type metadata accessor for Logger(0LL);
  uint64_t v29 = sub_100186DE4(v28, (uint64_t)qword_100653550);
  oslog = (os_log_s *)Logger.logObject.getter(v29);
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v32 = swift_slowAlloc(32LL, -1LL);
    uint64_t v65 = v32;
    *(_DWORD *)uint64_t v31 = 136315138;
    uint64_t v33 = sub_10034F6BC(a5);
    os_log_type_t v35 = (const char *)v34;
    uint64_t v63 = sub_10018CDB4(v33, v34, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v31 + 4, v31 + 12);
    swift_bridgeObjectRelease(v35);
    _os_log_impl((void *)&_mh_execute_header, oslog, v30, "Sent request: %s", v31, 0xCu);
    swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  else
  {
  }

  return result;
}

id sub_1003F5ADC()
{
  uint64_t v1 = v0;
  if (qword_100644318 != -1) {
    swift_once(&qword_100644318, sub_1003F0BB4);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v2, (uint64_t)qword_100653550);
  uint64_t v3 = swift_retain_n(v0, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v13 = v1;
    uint64_t v14 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v8 = type metadata accessor for SDAuthenticationTransportRapport();
    swift_retain();
    uint64_t v9 = String.init<A>(describing:)(&v13, v8);
    id v11 = (const char *)v10;
    uint64_t v13 = sub_10018CDB4(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v6 + 4, v6 + 12);
    swift_release_n(v1, 2LL);
    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s: Disconnecting", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v1, 2LL);
  }

  *(_BYTE *)(v1 + 56) = 1;
  return [*(id *)(v1 + 48) invalidate];
}

uint64_t sub_1003F5CAC()
{
  swift_unknownObjectRelease(*(void *)(v0 + 32));
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

uint64_t type metadata accessor for SDAuthenticationTransportRapport()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary32SDAuthenticationTransportRapport);
}

uint64_t sub_1003F5D00(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 32);
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return swift_unknownObjectRelease(v3);
}

uint64_t sub_1003F5D10()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t sub_1003F5D18(uint64_t a1, unint64_t a2, void *a3, unsigned __int8 a4)
{
  uint64_t v7 = a3[3];
  uint64_t v8 = a3[4];
  sub_10019A708(a3, v7);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
  if (v10)
  {
    id v11 = v10;
    unint64_t v12 = sub_1003F47BC(a1, a2, result, v10, a4);
    swift_bridgeObjectRelease(v11);
    return v12 | ((HIDWORD(v12) & 1) << 32);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t type metadata accessor for SDAuthenticationTransportRapportBTOnly()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary38SDAuthenticationTransportRapportBTOnly);
}

uint64_t type metadata accessor for SDAuthenticationTransportRapportAWDLOnly()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary40SDAuthenticationTransportRapportAWDLOnly);
}

uint64_t type metadata accessor for SDAuthenticationTransportRapportInfraWiFiOnly()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary45SDAuthenticationTransportRapportInfraWiFiOnly);
}

void sub_1003F5E2C()
{
  word_1006698E0 = CBAssignedL2CAPPSMForOysterAutoUnlock;
}

id sub_1003F5E44(void *a1)
{
  uint64_t v26 = 0LL;
  id v2 = [(id)objc_opt_self(SDAutoUnlockAKSManager) sharedManager];
  if (!v2)
  {
LABEL_12:
    if (!v26) {
      return v2;
    }
    goto LABEL_13;
  }

  uint64_t v3 = (objc_class *)[a1 encryptedPayload];
  Class isa = v3;
  if (v3)
  {
    uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
    unint64_t v7 = v6;

    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100189B20(v5, v7);
  }

  uint64_t v8 = (objc_class *)objc_msgSend(a1, "authTag", v26);
  Class v9 = v8;
  if (v8)
  {
    uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
    unint64_t v12 = v11;

    Class v9 = Data._bridgeToObjectiveC()().super.isa;
    sub_100189B20(v10, v12);
  }

  uint64_t v13 = (objc_class *)[a1 nonce];
  Class v14 = v13;
  if (v13)
  {
    uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
    unint64_t v17 = v16;

    Class v14 = Data._bridgeToObjectiveC()().super.isa;
    sub_100189B20(v15, v17);
  }

  Class v18 = UUID._bridgeToObjectiveC()().super.isa;
  id v19 =  [v2 decryptMessage:isa authTag:v9 nonce:v14 bluetoothID:v18 cachedDevices:1 errorCode:&v26];

  if (!v19)
  {
    id v2 = 0LL;
    goto LABEL_12;
  }

  id v2 = (id)static Data._unconditionallyBridgeFromObjectiveC(_:)(v19);

  if (!v26) {
    return v2;
  }
LABEL_13:
  if (qword_100644318 != -1) {
    swift_once(&qword_100644318, sub_1003F0BB4);
  }
  uint64_t v20 = type metadata accessor for Logger(0LL);
  uint64_t v21 = sub_100186DE4(v20, (uint64_t)qword_100653550);
  id v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.error.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to decrypt message", v24, 2u);
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  return v2;
}

void sub_1003F6104()
{
  uint64_t v1 = v0;
  if (qword_100644318 != -1) {
    swift_once(&qword_100644318, sub_1003F0BB4);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_100186DE4(v2, (uint64_t)qword_100653550);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Configuring CBServer", v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  uint64_t v7 = *(void *)(v1 + 16);
  id v8 = *(id *)(v1 + 48);
  [v8 setDispatchQueue:v7];
  if (qword_100644328 != -1) {
    swift_once(&qword_100644328, sub_1003F5E2C);
  }
  [v8 setBleListenPSM:(unsigned __int16)word_1006698E0];
  uint64_t v9 = swift_allocObject(&unk_1005E0298, 24LL, 7LL);
  swift_weakInit(v9 + 16, v1);
  unint64_t v16 = sub_1003FC2D8;
  uint64_t v17 = v9;
  unint64_t v12 = _NSConcreteStackBlock;
  uint64_t v13 = 1107296256LL;
  Class v14 = sub_1003F6A78;
  uint64_t v15 = &unk_1005E02B0;
  uint64_t v10 = _Block_copy(&v12);
  swift_release(v17);
  [v8 setAcceptHandler:v10];
  _Block_release(v10);
  unint64_t v16 = sub_1003F6B58;
  uint64_t v17 = 0LL;
  unint64_t v12 = _NSConcreteStackBlock;
  uint64_t v13 = 1107296256LL;
  Class v14 = sub_1002270C0;
  uint64_t v15 = &unk_1005E02D8;
  unint64_t v11 = _Block_copy(&v12);
  [v8 activateWithCompletion:v11];
  _Block_release(v11);
}

uint64_t sub_1003F6324(void *a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a4 + 16;
  if (qword_100644318 != -1) {
    swift_once(&qword_100644318, sub_1003F0BB4);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = sub_100186DE4(v7, (uint64_t)qword_100653550);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    unint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Accepted connection", v11, 2u);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  swift_beginAccess(v6, v64, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v6);
  if (!Strong) {
    goto LABEL_8;
  }
  uint64_t v13 = Strong;
  Class v14 = *(void **)(Strong + 72);
  id v15 = v14;
  uint64_t Strong = swift_release(v13);
  if (!v14
    || (sub_100183168(0LL, &qword_1006540A8, &OBJC_CLASS___CBConnection_ptr),
        id v16 = v15,
        id v17 = a1,
        char v18 = static NSObject.== infix(_:_:)(v16, v17),
        v16,
        v16,
        v17,
        (v18 & 1) == 0))
  {
LABEL_8:
    id v19 = (os_log_s *)Logger.logObject.getter(Strong);
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "New connection", v21, 2u);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    swift_beginAccess(v6, v63, 0LL, 0LL);
    uint64_t v22 = swift_weakLoadStrong(v6);
    if (v22)
    {
      uint64_t v23 = v22;
      uint64_t v24 = *(void **)(v22 + 72);
      *(void *)(v22 + 72) = a1;

      id v25 = a1;
      swift_release(v23);
    }

    swift_beginAccess(v6, v62, 0LL, 0LL);
    uint64_t v26 = swift_weakLoadStrong(v6);
    if (v26)
    {
      uint64_t v27 = v26;
      id v28 = *(id *)(v26 + 16);
      swift_release(v27);
      swift_beginAccess(v6, v61, 0LL, 0LL);
      uint64_t v29 = swift_weakLoadStrong(v6);
      if (v29)
      {
        uint64_t v30 = v29;
        uint64_t v31 = *(void **)(v29 + 72);
        if (v31)
        {
          id v32 = v31;
          swift_release(v30);
          [v32 setDispatchQueue:v28];
        }

        else
        {
          swift_release(v29);
        }
      }
    }
  }

  a2(0LL);
  id v33 = a1;
  unint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
  os_log_type_t v35 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = swift_slowAlloc(22LL, -1LL);
    uint64_t v37 = swift_slowAlloc(64LL, -1LL);
    v58[0] = v37;
    *(_DWORD *)uint64_t v36 = 136315394;
    id v38 = [v33 peerDevice];
    id v39 = [v38 identifier];

    if (v39)
    {
      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      unint64_t v42 = v41;
    }

    else
    {
      uint64_t v40 = 0xD000000000000015LL;
      uint64_t v59 = 0LL;
      v60[0] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(17LL);
      swift_bridgeObjectRelease(0xE000000000000000LL);
      unint64_t v42 = 0x80000001005046B0LL;
    }

    uint64_t v59 = sub_10018CDB4(v40, v42, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60, v36 + 4, v36 + 12);

    *(void *)&double v43 = swift_bridgeObjectRelease(v42).n128_u64[0];
    *(_WORD *)(v36 + 12) = 2080;
    id v44 = objc_msgSend(v33, "peerDevice", v43);
    id v45 = [v44 idsDeviceID];

    if (v45)
    {
      uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      unint64_t v48 = v47;
    }

    else
    {
      uint64_t v46 = 0xD000000000000015LL;
      uint64_t v59 = 0LL;
      v60[0] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(17LL);
      swift_bridgeObjectRelease(v60[0]);
      unint64_t v48 = 0x80000001005046B0LL;
    }

    uint64_t v59 = sub_10018CDB4(v46, v48, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60, v36 + 14, v36 + 22);

    swift_bridgeObjectRelease(v48);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "connection peer device: %s, idsID: %s", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy(v37, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1LL, -1LL);
    swift_slowDealloc(v36, -1LL, -1LL);
  }

  else
  {
  }

  swift_beginAccess(v6, &v59, 0LL, 0LL);
  uint64_t v49 = swift_weakLoadStrong(v6);
  if (v49)
  {
    *(_BYTE *)(v49 + 24) = 1;
    swift_release(v49);
  }

  swift_beginAccess(v6, v58, 0LL, 0LL);
  uint64_t v50 = swift_weakLoadStrong(v6);
  if (v50)
  {
    uint64_t v51 = v50;
    uint64_t v52 = *(void *)(v50 + 32);
    if (v52)
    {
      uint64_t v53 = *(void *)(v50 + 40);
      swift_unknownObjectRetain(*(void *)(v50 + 32));
      swift_release(v51);
      uint64_t ObjectType = swift_getObjectType(v52);
      (*(void (**)(uint64_t, uint64_t))(v53 + 24))(ObjectType, v53);
      swift_unknownObjectRelease(v52);
    }

    else
    {
      swift_release(v50);
    }
  }

  swift_beginAccess(v6, &v57, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v6);
  if (result)
  {
    uint64_t v56 = result;
    sub_1003F6940(v33);
    return swift_release(v56);
  }

  return result;
}

void sub_1003F6940(void *a1)
{
  id v3 = [objc_allocWithZone(CBReadRequest) init];
  [v3 setMinLength:1];
  [v3 setMaxLength:500];
  uint64_t v4 = (void *)swift_allocObject(&unk_1005E0338, 40LL, 7LL);
  void v4[2] = v3;
  v4[3] = v1;
  v4[4] = a1;
  v11[4] = sub_1003FC340;
  unint64_t v12 = v4;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256LL;
  v11[2] = sub_1001B9FE4;
  v11[3] = &unk_1005E0350;
  os_log_type_t v5 = _Block_copy(v11);
  uint64_t v6 = v12;
  id v7 = v3;
  swift_retain(v1);
  id v8 = a1;
  swift_release(v6);
  [v7 setCompletion:v5];
  _Block_release(v5);
  uint64_t v9 = *(void **)(v1 + 72);
  if (v9)
  {
    id v10 = v9;
    [v10 readWithCBReadRequest:v7];
  }
}

void sub_1003F6A78(uint64_t a1, void *a2, void *aBlock)
{
  os_log_type_t v5 = *(void (**)(void))(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v6 = _Block_copy(aBlock);
  uint64_t v7 = swift_allocObject(&unk_1005E0310, 24LL, 7LL);
  *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  swift_retain(v4);
  id v8 = a2;
  v5();
  swift_release(v4);
  swift_release(v7);
}

void sub_1003F6B0C(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)(a1);
  }
  else {
    uint64_t v3 = 0LL;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

void sub_1003F6B58(uint64_t a1)
{
  if (a1)
  {
    if (qword_100644318 != -1) {
      swift_once(&qword_100644318, sub_1003F0BB4);
    }
    uint64_t v2 = type metadata accessor for Logger(0LL);
    sub_100186DE4(v2, (uint64_t)qword_100653550);
    swift_errorRetain(a1);
    uint64_t v3 = swift_errorRetain(a1);
    oslog = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v4 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v4))
    {
      os_log_type_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v6 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)os_log_type_t v5 = 138412290;
      swift_errorRetain(a1);
      uint64_t v7 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v14 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v5 + 4, v5 + 12);
      *uint64_t v6 = v7;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Encountered error while activating CBServer %@", v5, 0xCu);
      uint64_t v8 = sub_100183098(&qword_1006454E0);
      swift_arrayDestroy(v6, 1LL, v8);
      swift_slowDealloc(v6, -1LL, -1LL);
      swift_slowDealloc(v5, -1LL, -1LL);

      return;
    }

    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  else
  {
    if (qword_100644318 != -1) {
      swift_once(&qword_100644318, sub_1003F0BB4);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    uint64_t v10 = sub_100186DE4(v9, (uint64_t)qword_100653550);
    oslog = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v11))
    {
      unint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v11, "Activated CBServer", v12, 2u);
      swift_slowDealloc(v12, -1LL, -1LL);
    }
  }
}

void sub_1003F6DC0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100183098(&qword_10064DA60);
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = __chkstk_darwin(v6);
  __chkstk_darwin(v7);
  id v8 = [a1 error];
  if (!v8)
  {
    id v16 = [a1 data];
    if (v16)
    {
      id v17 = v16;
      uint64_t v27 = a3;
      char v18 = (os_log_s *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);
      unint64_t v20 = v19;

      uint64_t v21 = (char *)&loc_1003F6FA8 + *((int *)qword_1003F7A88 + (v20 >> 62));
      id v28 = v18;
      __asm { BR              X9 }
    }

    if (qword_100644318 != -1) {
      swift_once(&qword_100644318, sub_1003F0BB4);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    uint64_t v23 = sub_100186DE4(v22, (uint64_t)qword_100653550);
    id v28 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v24 = static os_log_type_t.error.getter(v28);
    if (os_log_type_enabled(v28, v24))
    {
      id v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v24, "data is nil!", v25, 2u);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    goto LABEL_10;
  }

  if (qword_100644318 != -1) {
    swift_once(&qword_100644318, sub_1003F0BB4);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v9, (uint64_t)qword_100653550);
  id v28 = a1;
  uint64_t v10 = (void *)Logger.logObject.getter(v28);
  os_log_type_t v11 = static os_log_type_t.error.getter(v10);
  if (!os_log_type_enabled((os_log_t)v10, v11))
  {

LABEL_10:
    return;
  }

  unint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v13 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
  *(_DWORD *)unint64_t v12 = 138412290;
  id v14 = -[os_log_s error](v28, "error");
  if (v14)
  {
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError(v14);
    uint64_t v29 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30, v12 + 4, v12 + 12);
  }

  else
  {
    uint64_t v29 = 0LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30, v12 + 4, v12 + 12);
    uint64_t v15 = 0LL;
  }

  *uint64_t v13 = v15;

  _os_log_impl((void *)&_mh_execute_header, (os_log_t)v10, v11, "Encountered error while trying to read: %@", v12, 0xCu);
  uint64_t v26 = sub_100183098(&qword_1006454E0);
  swift_arrayDestroy(v13, 1LL, v26);
  swift_slowDealloc(v13, -1LL, -1LL);
  swift_slowDealloc(v12, -1LL, -1LL);
}

uint64_t sub_1003F7A98(uint64_t a1)
{
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = v1;
  return swift_task_switch(sub_1003F7AB0, 0LL, 0LL);
}

uint64_t sub_1003F7AB0()
{
  uint64_t v1 = *(void *)(v0 + 128);
  [*(id *)(v1 + 72) invalidate];
  if (qword_100644318 != -1) {
    swift_once(&qword_100644318, sub_1003F0BB4);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_100186DE4(v2, (uint64_t)qword_100653550);
  *(void *)(v0 + 136) = v3;
  os_log_type_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Creating CBConnection", v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  id v7 = [objc_allocWithZone(CBConnection) init];
  id v8 = *(void **)(v1 + 72);
  *(void *)(v1 + 72) = v7;

  id v9 = *(id *)(v1 + 72);
  if (v9
    && ([v9 setDispatchQueue:*(void *)(*(void *)(v0 + 128) + 16)], (id v9 = *(id *)(v1 + 72)) != 0))
  {
    uint64_t v10 = *(void *)(v0 + 128);
    id v9 = [v9 setUseCase:131088];
    os_log_type_t v11 = *(void **)(v1 + 72);
    *(void *)(v0 + 144) = v11;
    *(_BYTE *)(v10 + 88) = 0;
    if (v11)
    {
      uint64_t v12 = *(void *)(v0 + 120);
      id v13 = v11;
      [v13 setConnectionFlags:256];
      [v13 setPeerDevice:v12];
      [v13 setConnectTimeoutSeconds:4.0];
      if (qword_100644328 != -1) {
        swift_once(&qword_100644328, sub_1003F5E2C);
      }
      uint64_t v14 = v0 + 16;
      [v13 setBlePSM:(unsigned __int16)word_1006698E0];
      *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
      *(void *)(v0 + 24) = sub_1003F7D94;
      uint64_t v15 = swift_continuation_init(v0 + 16, 1LL);
      *(void *)(v0 + 80) = _NSConcreteStackBlock;
      id v16 = (void *)(v0 + 80);
      v16[1] = 0x40000000LL;
      void v16[2] = sub_10023FD5C;
      v16[3] = &unk_1005E0248;
      v16[4] = v15;
      [v13 activateWithCompletion:v16];
      return swift_continuation_await(v14);
    }
  }

  else
  {
    *(_BYTE *)(*(void *)(v0 + 128) + 88LL) = 0;
  }

  char v18 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v19 = static os_log_type_t.error.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    unint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to create CBConnection", v20, 2u);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F7D94()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 152LL) = v1;
  if (v1) {
    uint64_t v2 = sub_1003F7EB0;
  }
  else {
    uint64_t v2 = sub_1003F7DF4;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_1003F7DF4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Successfully activated CBConnection!!!", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  os_log_type_t v5 = *(void **)(v1 + 144);
  uint64_t v6 = *(void *)(v1 + 128);

  *(_BYTE *)(v6 + 88) = 1;
  sub_1003F7EF0();

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003F7EB0()
{
  uint64_t v1 = *(void **)(v0 + 144);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1003F7EF0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)v0;
  if (!*(void *)(v0 + 72) || *(_BYTE *)(v0 + 88) != 1)
  {
LABEL_39:
    if (qword_100644318 != -1) {
      goto LABEL_47;
    }
    goto LABEL_40;
  }

  os_log_type_t v3 = (const char **)(v0 + 80);
  *(void *)&double v4 = swift_beginAccess(v1 + 80, v30, 0LL, 0LL).n128_u64[0];
  while (1)
  {
    uint64_t v5 = (uint64_t)*v3;
    if ((unint64_t)*v3 >> 62)
    {
      if (v5 < 0) {
        uint64_t v11 = (uint64_t)*v3;
      }
      else {
        uint64_t v11 = v5 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*v3, v4);
      uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v11);
      swift_bridgeObjectRelease((const char *)v5);
      if (v12 < 1) {
        return;
      }
    }

    else if (*(uint64_t *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10) < 1)
    {
      return;
    }

    unint64_t v6 = swift_beginAccess(v1 + 80, &v28, 33LL, 0LL).n128_u64[0];
    uint64_t v2 = (uint64_t)*v3;
    if ((unint64_t)*v3 >> 62)
    {
      if (v2 < 0) {
        uint64_t v13 = (uint64_t)*v3;
      }
      else {
        uint64_t v13 = v2 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*v3, *(double *)&v6);
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v13);
      unint64_t v6 = swift_bridgeObjectRelease((const char *)v2).n128_u64[0];
      if (!v14) {
        goto LABEL_45;
      }
    }

    else if (!*(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      goto LABEL_45;
    }

    uint64_t v2 = (uint64_t)*v3;
    if ((unint64_t)*v3 >> 62)
    {
      if (v2 < 0) {
        uint64_t v15 = (uint64_t)*v3;
      }
      else {
        uint64_t v15 = v2 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*v3, *(double *)&v6);
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter(v15);
      swift_bridgeObjectRelease((const char *)v2);
      if (!v16) {
        goto LABEL_46;
      }
    }

    else if (!*(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      goto LABEL_46;
    }

    if ((v2 & 0xC000000000000001LL) == 0) {
      break;
    }
    id v7 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v2);
LABEL_14:
    uint64_t v2 = (uint64_t)v7;
    uint64_t v8 = (uint64_t)*v3;
    if ((unint64_t)*v3 >> 62)
    {
      if (v8 < 0) {
        uint64_t v17 = (uint64_t)*v3;
      }
      else {
        uint64_t v17 = v8 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*v3);
      uint64_t v18 = _CocoaArrayWrapper.endIndex.getter(v17);
      swift_bridgeObjectRelease((const char *)v8);
      if (!v18)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
    }

    else if (!*(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      goto LABEL_38;
    }

    sub_1003C2EA4(0LL, 1LL);
    swift_endAccess(&v28);
    id v9 = *(void **)(v1 + 72);
    if (v9)
    {
      id v10 = v9;
      [v10 writeWithCBWriteRequest:v2];
    }
  }

  if (*(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    id v7 = (char *)*(id *)(v2 + 32);
    goto LABEL_14;
  }

  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  swift_once(&qword_100644318, sub_1003F0BB4);
LABEL_40:
  uint64_t v19 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v19, (uint64_t)qword_100653550);
  uint64_t v20 = swift_retain_n(v1, 2LL);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    v30[0] = v24;
    *(_DWORD *)uint64_t v23 = 136315138;
    uint64_t v28 = v1;
    swift_retain();
    uint64_t v25 = String.init<A>(describing:)(&v28, v2);
    uint64_t v27 = (const char *)v26;
    uint64_t v28 = sub_10018CDB4(v25, v26, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v23 + 4, v23 + 12);
    swift_release_n(v1, 2LL);
    swift_bridgeObjectRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s: Not connected yet", v23, 0xCu);
    swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v1, 2LL);
  }

unint64_t sub_1003F8290(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v103 = a1;
  uint64_t v104 = a2;
  uint64_t v8 = *v4;
  uint64_t v9 = sub_100183098(&qword_100646560);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100183098(&qword_10064DA60);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = (void *)v4[9];
  uint64_t v101 = v8;
  if (v15
    && (id v16 = [v15 peerDevice],
        id v17 = [v16 idsDeviceID],
        v16,
        v17))
  {
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    uint64_t v20 = v19;
  }

  else
  {
    uint64_t v18 = 0LL;
    uint64_t v20 = 0LL;
  }

  uint64_t v21 = a3[3];
  uint64_t v22 = a3[4];
  sub_10019A708(a3, v21);
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v21, v22);
  uint64_t v25 = v24;
  unint64_t v26 = &selRef_dockHasDownloadsFolder;
  unsigned int v102 = a4;
  if (v20)
  {
    if (v24)
    {
      if (v18 == v23 && v20 == v24)
      {
        *(void *)&double v41 = swift_bridgeObjectRelease(v20).n128_u64[0];
        swift_bridgeObjectRelease(v25, v41);
        goto LABEL_31;
      }

      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v23, v24, 0LL);
      *(void *)&double v29 = swift_bridgeObjectRelease(v20).n128_u64[0];
      swift_bridgeObjectRelease(v25, v29);
      if ((v28 & 1) != 0)
      {
LABEL_31:
        uint64_t v67 = sub_1003F91D4(v103, v104, a3, a4);
        unint64_t v69 = v68 >> 60;
        if (v68 >> 60 != 15)
        {
          uint64_t v70 = v67;
          unint64_t v71 = v68;
          id v72 = [objc_allocWithZone(CBWriteRequest) v26[458]];
          uint64_t v73 = sub_100183098(&qword_1006508B0);
          uint64_t v74 = swift_allocObject(v73, 48LL, 7LL);
          *(_OWORD *)(v74 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1004CDCA0;
          *(void *)(v74 + 32) = v70;
          *(void *)(v74 + 40) = v71;
          sub_10019BA8C(v70, v71);
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v72, "setDataArray:", isa, swift_bridgeObjectRelease((const char *)v74).n128_f64[0]);

          uint64_t v76 = swift_allocObject(&unk_1005E01B8, 32LL, 7LL);
          *(void *)(v76 + swift_unknownObjectWeakDestroy(v0 + 16) = v70;
          *(void *)(v76 + 24) = v71;
          uint64_t v110 = sub_1003FB9EC;
          uint64_t v111 = v76;
          aBlock[0] = (uint64_t)_NSConcreteStackBlock;
          aBlock[1] = 1107296256LL;
          aBlock[2] = (uint64_t)sub_1001B9FE4;
          uint64_t v109 = &unk_1005E01D0;
          __int128 v77 = _Block_copy(aBlock);
          uint64_t v78 = v111;
          sub_10019BA8C(v70, v71);
          swift_release(v78);
          [v72 setCompletion:v77];
          _Block_release(v77);
          swift_beginAccess(v5 + 10, aBlock, 33LL, 0LL);
          id v79 = v72;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v79);
          uint64_t v80 = v5[10] & 0xFFFFFFFFFFFFFF8LL;
          unint64_t v82 = *(void *)(v80 + 0x10);
          unint64_t v81 = *(void *)(v80 + 24);
          if (v82 >= v81 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v81 > 1, v82 + 1, 1LL);
          }
          uint64_t v83 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v82, v79);
          specialized Array._endMutation()(v83);
          swift_endAccess(aBlock);
          sub_100189B0C(v70, v71);

          uint64_t v84 = 0LL;
          goto LABEL_42;
        }

        if (qword_100644318 != -1) {
          swift_once(&qword_100644318, sub_1003F0BB4);
        }
        uint64_t v85 = type metadata accessor for Logger(0LL);
        sub_100186DE4(v85, (uint64_t)qword_100653550);
        uint64_t v86 = swift_retain_n(v5, 2LL);
        uint64_t v87 = (os_log_s *)Logger.logObject.getter(v86);
        os_log_type_t v88 = static os_log_type_t.error.getter(v87);
        if (os_log_type_enabled(v87, v88))
        {
          unint64_t v89 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v90 = swift_slowAlloc(32LL, -1LL);
          aBlock[0] = v90;
          *(_DWORD *)unint64_t v89 = 136315138;
          uint64_t v105 = (uint64_t)v5;
          swift_retain();
          uint64_t v91 = String.init<A>(describing:)(&v105, v101);
          uint64_t v93 = (const char *)v92;
          uint64_t v105 = sub_10018CDB4(v91, v92, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106, v89 + 4, v89 + 12);
          swift_release_n(v5, 2LL);
          swift_bridgeObjectRelease(v93);
          _os_log_impl((void *)&_mh_execute_header, v87, v88, "%s: Error encrypting message", v89, 0xCu);
          swift_arrayDestroy(v90, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v90, -1LL, -1LL);
          swift_slowDealloc(v89, -1LL, -1LL);

          uint64_t v94 = v5[4];
          if (v94)
          {
LABEL_39:
            uint64_t v95 = v5[5];
            uint64_t ObjectType = swift_getObjectType(v94);
            uint64_t v97 = *(void (**)(uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(v95 + 16);
            swift_unknownObjectRetain(v94);
            uint64_t v84 = 1LL;
            v97(1LL, 0xD000000000000018LL, 0x800000010050EDE0LL, v103, v104, v102, ObjectType, v95);
            swift_unknownObjectRelease(v94);
LABEL_42:
            LOBYTE(aBlock[0]) = v69 < 0xF;
            return v84 | ((unint64_t)(v69 < 0xF) << 32);
          }
        }

        else
        {

          swift_release_n(v5, 2LL);
          uint64_t v94 = v5[4];
          if (v94) {
            goto LABEL_39;
          }
        }

        uint64_t v84 = 1LL;
        goto LABEL_42;
      }
    }

    else
    {
      swift_bridgeObjectRelease(v20);
    }

    if (qword_100644318 != -1) {
      swift_once(&qword_100644318, sub_1003F0BB4);
    }
    uint64_t v30 = type metadata accessor for Logger(0LL);
    sub_100186DE4(v30, (uint64_t)qword_100653550);
    sub_10019A6C4((uint64_t)a3, (uint64_t)aBlock);
    uint64_t v31 = swift_retain_n(v5, 2LL);
    id v32 = (os_log_s *)Logger.logObject.getter(v31);
    int v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, (os_log_type_t)v33))
    {
      int v99 = v33;
      os_log_t v100 = v32;
      uint64_t v34 = swift_slowAlloc(22LL, -1LL);
      uint64_t v98 = swift_slowAlloc(64LL, -1LL);
      uint64_t v107 = v98;
      *(_DWORD *)uint64_t v34 = 136315394;
      os_log_type_t v35 = (void *)v5[9];
      if (v35
        && (id v36 = [v35 peerDevice],
            id v37 = [v36 idsDeviceID],
            v36,
            v37))
      {
        uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        uint64_t v40 = v39;
      }

      else
      {
        uint64_t v38 = 0xD000000000000015LL;
        uint64_t v105 = 0LL;
        uint64_t v106 = (const char *)0xE000000000000000LL;
        _StringGuts.grow(_:)(17LL);
        swift_bridgeObjectRelease(v106);
        uint64_t v40 = (const char *)0x80000001005046B0LL;
      }

      uint64_t v105 = sub_10018CDB4(v38, (unint64_t)v40, &v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106, v34 + 4, v34 + 12);
      swift_release_n(v5, 2LL);
      swift_bridgeObjectRelease(v40);
      *(_WORD *)(v34 + 12) = 2080;
      unint64_t v42 = v109;
      double v43 = v110;
      sub_10019A708(aBlock, (uint64_t)v109);
      uint64_t v44 = (*((uint64_t (**)(void *, void (*)()))v43 + 1))(v42, v43);
      if (v45)
      {
        uint64_t v46 = v44;
        unint64_t v47 = v45;
      }

      else
      {
        uint64_t v46 = 0xD000000000000015LL;
        uint64_t v105 = 0LL;
        uint64_t v106 = (const char *)0xE000000000000000LL;
        _StringGuts.grow(_:)(17LL);
        swift_bridgeObjectRelease(v106);
        unint64_t v47 = (const char *)0x80000001005046B0LL;
      }

      uint64_t v105 = sub_10018CDB4(v46, (unint64_t)v47, &v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106, v34 + 14, v34 + 22);
      swift_bridgeObjectRelease(v47);
      sub_10018709C(aBlock);
      os_log_t v48 = v100;
      _os_log_impl( (void *)&_mh_execute_header,  v100,  (os_log_type_t)v99,  "peer device changed from %s to %s. Invalidating old BT connection",  (uint8_t *)v34,  0x16u);
      uint64_t v49 = v98;
      swift_arrayDestroy(v98, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1LL, -1LL);
      swift_slowDealloc(v34, -1LL, -1LL);

      unint64_t v26 = &selRef_dockHasDownloadsFolder;
    }

    else
    {
      swift_release_n(v5, 2LL);
      sub_10018709C(aBlock);
    }
  }

  else
  {
    if (!v24) {
      goto LABEL_31;
    }
    swift_bridgeObjectRelease(v24);
  }

  uint64_t v50 = v26;
  id v51 = [objc_allocWithZone(CBDevice) v26[458]];
  uint64_t v52 = a3[3];
  uint64_t v53 = a3[4];
  sub_10019A708(a3, v52);
  (*(void (**)(uint64_t, uint64_t))(v53 + 48))(v52, v53);
  uint64_t v54 = type metadata accessor for UUID(0LL);
  uint64_t v55 = *(void *)(v54 - 8);
  unint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v55 + 48))(v14, 1LL, v54);
  if ((_DWORD)result != 1)
  {
    UUID.uuidString.getter(result);
    uint64_t v58 = v57;
    NSString v59 = String._bridgeToObjectiveC()();
    __n128 v60 = swift_bridgeObjectRelease(v58);
    (*(void (**)(char *, uint64_t, __n128))(v55 + 8))(v14, v54, v60);
    [v51 setIdentifier:v59];

    uint64_t v61 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56LL))(v11, 1LL, 1LL, v61);
    uint64_t v62 = swift_allocObject(&unk_1005E0190, 65LL, 7LL);
    *(void *)(v62 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(void *)(v62 + 24) = 0LL;
    *(void *)(v62 + 32) = v5;
    *(void *)(v62 + 40) = v51;
    uint64_t v64 = v103;
    unint64_t v63 = v104;
    *(void *)(v62 + 48) = v103;
    *(void *)(v62 + 56) = v63;
    uint64_t v65 = v102;
    *(_BYTE *)(v62 + 64) = v102;
    swift_retain();
    sub_10019BA8C(v64, v63);
    uint64_t v66 = sub_1001B37E8((uint64_t)v11, (uint64_t)&unk_100654090, v62);
    swift_release(v66);
    unint64_t v26 = v50;
    a4 = v65;
    goto LABEL_31;
  }

  __break(1u);
  return result;
}

uint64_t sub_1003F8C08( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(_BYTE *)(v8 + 168) = a8;
  *(void *)(v8 + 88) = a6;
  *(void *)(v8 + 96) = a7;
  *(void *)(v8 + 80) = a4;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags(0LL);
  *(void *)(v8 + 104) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v8 + 112) = v12;
  *(void *)(v8 + 120) = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  *(void *)(v8 + 128) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v8 + 136) = v14;
  *(void *)(v8 + 144) = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = (void *)swift_task_alloc(dword_1006540A4);
  *(void *)(v8 + 152) = v15;
  *uint64_t v15 = v8;
  v15[1] = sub_1003F8CC8;
  v15[15] = a5;
  v15[16] = a4;
  return swift_task_switch(sub_1003F7AB0, 0LL, 0LL);
}

uint64_t sub_1003F8CC8()
{
  uint64_t v2 = *(void *)(*v1 + 152);
  uint64_t v3 = *v1;
  *(void *)(v3 + 160) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_1003F8D48, 0LL, 0LL);
  }
  uint64_t v5 = *(void *)(v3 + 120);
  swift_task_dealloc(*(void *)(v3 + 144));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1003F8D48()
{
  if (qword_100644318 != -1) {
    swift_once(&qword_100644318, sub_1003F0BB4);
  }
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v2, (uint64_t)qword_100653550);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  double v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 160);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138412290;
    swift_errorRetain(v7);
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(void *)(v0 + 72) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v8 + 4, v8 + 12);
    uint64_t *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "CBConnection activation failed with error: %@. Is the other device running CBServer?",  v8,  0xCu);
    uint64_t v11 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 160));
    swift_errorRelease(v7);
  }

  uint64_t v12 = *(void *)(v0 + 80);
  uint64_t v13 = *(void **)(v12 + 72);
  if (v13)
  {
    [v13 invalidate];
    uint64_t v12 = *(void *)(v0 + 80);
  }

  uint64_t v14 = *(void *)(v0 + 160);
  uint64_t v15 = *(void *)(v0 + 144);
  uint64_t v16 = *(void *)(v0 + 120);
  uint64_t v30 = *(void *)(v0 + 136);
  uint64_t v31 = *(void *)(v0 + 128);
  uint64_t v17 = *(void *)(v0 + 104);
  uint64_t v29 = *(void *)(v0 + 112);
  char v18 = *(_BYTE *)(v0 + 168);
  uint64_t v19 = *(void *)(v0 + 88);
  unint64_t v20 = *(void *)(v0 + 96);
  uint64_t v21 = swift_allocObject(&unk_1005E0208, 49LL, 7LL);
  *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = v12;
  *(void *)(v21 + 24) = v14;
  *(void *)(v21 + 32) = v19;
  *(void *)(v21 + 40) = v20;
  *(_BYTE *)(v21 + 48) = v18;
  *(void *)(v0 + 48) = sub_1003FBA28;
  *(void *)(v0 + 56) = v21;
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = _NSConcreteStackBlock;
  *(void *)(v0 + 24) = 1107296256LL;
  *(void *)(v0 + 32) = sub_1001B9FE4;
  *(void *)(v0 + 40) = &unk_1005E0220;
  uint64_t v22 = _Block_copy((const void *)(v0 + 16));
  swift_errorRetain(v14);
  swift_retain();
  uint64_t v23 = sub_10019BA8C(v19, v20);
  static DispatchQoS.unspecified.getter(v23);
  *(void *)(v0 + 64) = _swiftEmptyArrayStorage;
  uint64_t v24 = sub_100183F14( (unint64_t *)&qword_100646510,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v25 = sub_100183098((uint64_t *)&unk_1006460D0);
  unint64_t v26 = sub_1001D228C();
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 64, v25, v26, v17, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v15, v16, v22);
  _Block_release(v22);
  swift_errorRelease(v14);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v16, v17);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v15, v31);
  swift_release(*(void *)(v0 + 56));
  uint64_t v27 = *(void *)(v0 + 120);
  swift_task_dealloc(*(void *)(v0 + 144));
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F9094(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(result + 32);
  if (v5)
  {
    uint64_t v10 = *(void *)(result + 40);
    swift_unknownObjectRetain(*(void *)(result + 32));
    uint64_t v11 = (void *)_convertErrorToNSError(_:)(a2);
    id v12 = [v11 description];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    uint64_t v15 = v14;

    id v16 = [v11 code];
    if (v16 == (id)-6722LL) {
      unsigned int v17 = 12;
    }
    else {
      unsigned int v17 = 25;
    }
    if (v16 == (id)-6727LL) {
      uint64_t v18 = 20LL;
    }
    else {
      uint64_t v18 = v17;
    }
    uint64_t ObjectType = swift_getObjectType(v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 16))( v18,  v13,  v15,  a3,  a4,  a5,  ObjectType,  v10);
    swift_bridgeObjectRelease(v15);
    return swift_unknownObjectRelease(v5);
  }

  return result;
}

uint64_t sub_1003F91D4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = *v4;
  if (qword_100644318 != -1) {
    swift_once(&qword_100644318, sub_1003F0BB4);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v10, (uint64_t)qword_100653550);
  sub_10019A6C4((uint64_t)a3, (uint64_t)v55);
  uint64_t v11 = swift_retain_n(v4, 2LL);
  id v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v50 = a2;
    uint64_t v14 = a4;
    uint64_t v15 = swift_slowAlloc(22LL, -1LL);
    id v16 = (void *)swift_slowAlloc(64LL, -1LL);
    id v54 = v16;
    *(_DWORD *)uint64_t v15 = 136315394;
    id v52 = v4;
    swift_retain();
    uint64_t v17 = String.init<A>(describing:)(&v52, v9);
    uint64_t v19 = (const char *)v18;
    id v52 = (id)sub_10018CDB4(v17, v18, (uint64_t *)&v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v15 + 4, v15 + 12);
    swift_release_n(v4, 2LL);
    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v15 + 12) = 2080;
    uint64_t v20 = v56;
    uint64_t v21 = v57;
    sub_10019A708(v55, v56);
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v20, v21);
    if (v23)
    {
      uint64_t v24 = v22;
      uint64_t v25 = v23;
    }

    else
    {
      uint64_t v24 = 0xD000000000000015LL;
      id v52 = 0LL;
      uint64_t v53 = (const char *)0xE000000000000000LL;
      _StringGuts.grow(_:)(17LL);
      swift_bridgeObjectRelease(v53);
      uint64_t v25 = (const char *)0x80000001005046B0LL;
    }

    id v52 = (id)sub_10018CDB4(v24, (unint64_t)v25, (uint64_t *)&v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease(v25);
    sub_10018709C(v55);
    _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "%s: Beginning encryption with key for device %s",  (uint8_t *)v15,  0x16u);
    swift_arrayDestroy(v16, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);

    a4 = v14;
    a2 = v50;
  }

  else
  {
    swift_release_n(v4, 2LL);
    sub_10018709C(v55);
  }

  id v26 = [(id)objc_opt_self(SDAutoUnlockAKSManager) sharedManager];
  if (!v26)
  {
    id v35 = 0LL;
    id v36 = 0LL;
    id v37 = 0LL;
LABEL_21:
    uint64_t v45 = v5[4];
    if (v45)
    {
      uint64_t v46 = v5[5];
      uint64_t ObjectType = swift_getObjectType(v5[4]);
      os_log_t v48 = *(void (**)(uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 16);
      swift_unknownObjectRetain(v45);
      v48(1LL, 0xD000000000000019LL, 0x800000010050EE00LL, a1, a2, a4, ObjectType, v46);
      swift_unknownObjectRelease(v45);
    }

    goto LABEL_23;
  }

  uint64_t v27 = v26;
  v28.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v29 = a3[3];
  uint64_t v30 = a3[4];
  sub_10019A708(a3, v29);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v30);
  if (v31)
  {
    int v33 = v31;
    NSString v34 = String._bridgeToObjectiveC()();
    *(void *)&double v32 = swift_bridgeObjectRelease(v33).n128_u64[0];
  }

  else
  {
    NSString v34 = 0LL;
  }

  id v54 = 0LL;
  v55[0] = 0LL;
  id v52 = 0LL;
  unsigned int v38 = objc_msgSend( v27,  "encryptMessageData:deviceID:encryptedMessage:authTag:nonce:",  v28.super.isa,  v34,  v55,  &v52,  &v54,  v32);

  id v35 = v54;
  id v36 = v52;
  id v39 = v55[0];
  id v37 = v39;
  if (!v38 || !v39 || !v36 || !v35) {
    goto LABEL_21;
  }
  id v40 = [objc_allocWithZone((Class)SDAutoUnlockSessionWrapper) init];
  if (!v40)
  {
LABEL_23:

    return 0LL;
  }

  double v41 = v40;
  [v40 setEncryptedPayload:v37];
  [v41 setAuthTag:v36];
  [v41 setNonce:v35];
  [v41 setMessageType:a4 + 2006];
  id v42 = [v41 data];
  if (!v42)
  {

    return 0LL;
  }

  double v43 = v42;
  uint64_t v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v42);

  return v44;
}

void sub_1003F96DC(uint64_t a1, unint64_t a2)
{
  if (qword_100644318 != -1) {
    swift_once(&qword_100644318, sub_1003F0BB4);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v4, (uint64_t)qword_100653550);
  sub_10019BA8C(a1, a2);
  uint64_t v5 = sub_10019BA8C(a1, a2);
  oslog = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v14 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    sub_10019BA8C(a1, a2);
    uint64_t v9 = Data.description.getter(a1, a2);
    uint64_t v11 = v10;
    sub_100189B20(a1, a2);
    uint64_t v13 = sub_10018CDB4(v9, (unint64_t)v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v11);
    sub_100189B20(a1, a2);
    sub_100189B20(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, oslog, v6, "Wrote data %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    sub_100189B20(a1, a2);
    sub_100189B20(a1, a2);
  }

id sub_1003F98F0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  if (qword_100644318 != -1) {
    swift_once(&qword_100644318, sub_1003F0BB4);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v3, (uint64_t)qword_100653550);
  uint64_t v4 = swift_retain_n(v0, 2LL);
  uint64_t v5 = (void *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled((os_log_t)v5, v6))
  {

    swift_release_n(v1, 2LL);
    id result = (id)v1[9];
    if (!result) {
      return result;
    }
    return [result invalidate];
  }

  uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v8 = swift_slowAlloc(32LL, -1LL);
  uint64_t v13 = (uint64_t)v1;
  uint64_t v14 = v8;
  *(_DWORD *)uint64_t v7 = 136315138;
  swift_retain();
  uint64_t v9 = String.init<A>(describing:)(&v13, v2);
  uint64_t v11 = (const char *)v10;
  uint64_t v13 = sub_10018CDB4(v9, v10, &v14);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v7 + 4, v7 + 12);
  swift_release_n(v1, 2LL);
  swift_bridgeObjectRelease(v11);
  _os_log_impl((void *)&_mh_execute_header, (os_log_t)v5, v6, "%s: Disconnecting", v7, 0xCu);
  swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v8, -1LL, -1LL);
  swift_slowDealloc(v7, -1LL, -1LL);

  id result = (id)v1[9];
  if (result) {
    return [result invalidate];
  }
  return result;
}

uint64_t sub_1003F9AC0()
{
  swift_unknownObjectRelease(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 64));

  swift_bridgeObjectRelease(*(void *)(v0 + 80));
  return swift_deallocClassInstance(v0, 89LL, 7LL);
}

uint64_t type metadata accessor for SDAuthenticationTransportCoreBluetooth()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary38SDAuthenticationTransportCoreBluetooth);
}

uint64_t sub_1003F9B2C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v4 = sub_1003F8290(a1, a2, a3, a4);
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

uint64_t sub_1003F9B58()
{
  return swift_deallocClassInstance(v0, 33LL, 7LL);
}

uint64_t type metadata accessor for SDAuthenticationTransportUnsupported()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary36SDAuthenticationTransportUnsupported);
}

uint64_t sub_1003F9B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_unknownObjectRelease(v3);
}

uint64_t sub_1003F9BAC()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t sub_1003F9BB4()
{
  if (qword_100644318 != -1) {
    swift_once(&qword_100644318, sub_1003F0BB4);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = sub_100186DE4(v0, (uint64_t)qword_100653550);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.error.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    unint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Cannot send message over unsupported transport", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  return 0x100000000LL;
}

void sub_1003F9C98()
{
  if (qword_100644318 != -1) {
    swift_once(&qword_100644318, sub_1003F0BB4);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = sub_100186DE4(v0, (uint64_t)qword_100653550);
  oslog = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v2 = static os_log_type_t.error.getter(oslog);
  if (os_log_type_enabled(oslog, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Cannot disconnect over unsupported transport", v3, 2u);
    swift_slowDealloc(v3, -1LL, -1LL);
  }
}

uint64_t sub_1003F9D64()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 32);
  if (!v2
    || (uint64_t v3 = swift_retain(v2),
        char isCancelled = swift_task_isCancelled(v3),
        uint64_t result = swift_release(v2),
        (isCancelled & 1) == 0))
  {
    if (qword_100644318 != -1) {
      swift_once(&qword_100644318, sub_1003F0BB4);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    sub_100186DE4(v6, (uint64_t)qword_100653550);
    uint64_t v7 = swift_retain_n(v1, 2LL);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      unint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v11 = swift_slowAlloc(32LL, -1LL);
      uint64_t v18 = v1;
      uint64_t v19 = v11;
      *(_DWORD *)unint64_t v10 = 136315138;
      uint64_t v12 = type metadata accessor for ResponseTimer();
      swift_retain(v1);
      uint64_t v13 = String.init<A>(describing:)(&v18, v12);
      uint64_t v15 = (const char *)v14;
      uint64_t v18 = sub_10018CDB4(v13, v14, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v10 + 4, v10 + 12);
      swift_release_n(v1, 2LL);
      swift_bridgeObjectRelease(v15);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s Timer cancelled", v10, 0xCu);
      swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1LL, -1LL);
      swift_slowDealloc(v10, -1LL, -1LL);

      uint64_t v16 = *(void *)(v1 + 32);
      if (v16)
      {
LABEL_7:
        swift_retain(v16);
        Task.cancel()();
        swift_release(v16);
        uint64_t v17 = *(void *)(v1 + 32);
LABEL_10:
        *(void *)(v1 + 32) = 0LL;
        return swift_release(v17);
      }
    }

    else
    {

      swift_release_n(v1, 2LL);
      uint64_t v16 = *(void *)(v1 + 32);
      if (v16) {
        goto LABEL_7;
      }
    }

    uint64_t v17 = 0LL;
    goto LABEL_10;
  }

  return result;
}

uint64_t sub_1003F9F90(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  uint64_t v3 = type metadata accessor for ContinuousClock.Instant(0LL);
  v2[8] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  void v2[9] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[10] = swift_task_alloc(v5);
  v2[11] = swift_task_alloc(v5);
  uint64_t v6 = type metadata accessor for ContinuousClock(0LL);
  v2[12] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[13] = v7;
  v2[14] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003FA028, 0LL, 0LL);
}

uint64_t sub_1003FA028(uint64_t a1)
{
  if (*(void *)(v1[7] + 32LL)) {
    a1 = sub_1003F9D64();
  }
  ContinuousClock.init()(a1);
  if (qword_100644318 != -1) {
    swift_once(&qword_100644318, sub_1003F0BB4);
  }
  uint64_t v2 = v1[7];
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v1[15] = sub_100186DE4(v3, (uint64_t)qword_100653550);
  uint64_t v4 = swift_retain_n(v2, 2LL);
  unint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = v1[7];
  if (v7)
  {
    uint64_t v22 = v1[6];
    uint64_t v9 = swift_slowAlloc(22LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v23 = v10;
    *(_DWORD *)uint64_t v9 = 136315394;
    v1[3] = v8;
    uint64_t v11 = type metadata accessor for ResponseTimer();
    swift_retain(v8);
    uint64_t v12 = String.init<A>(describing:)(v1 + 3, v11);
    unint64_t v14 = (const char *)v13;
    v1[4] = sub_10018CDB4(v12, v13, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 4, v1 + 5, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v14);
    swift_release_n(v8, 2LL);
    *(_WORD *)(v9 + 12) = 2048;
    v1[5] = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 5, v1 + 6, v9 + 14, v9 + 22);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s: Starting timer for %ld sec", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    swift_release_n(v1[7], 2LL);
  }

  uint64_t v15 = v1[10];
  uint64_t v16 = v1[8];
  uint64_t v17 = v1[9];
  uint64_t v18 = v1[6];
  static ContinuousClock.now.getter();
  ContinuousClock.Instant.advanced(by:)( 1000000000000000000LL * v18,  ((v18 >> 63) & 0xF21F494C589C0000LL) + (((unint64_t)v18 * (unsigned __int128)0xDE0B6B3A7640000uLL) >> 64));
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v1[16] = v19;
  v19(v15, v16);
  uint64_t v20 = (void *)swift_task_alloc(async function pointer to ContinuousClock.sleep(until:tolerance:)[1]);
  v1[17] = v20;
  *uint64_t v20 = v1;
  v20[1] = sub_1003FA2D4;
  return ContinuousClock.sleep(until:tolerance:)(v1[11], 0LL, 0LL, 1LL);
}

uint64_t sub_1003FA2D4()
{
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)v1 + 128LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 136LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 88LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 64LL);
  *(void *)(*(void *)v1 + 144LL) = v0;
  swift_task_dealloc(v2);
  v3(v4, v5);
  if (v0) {
    os_log_type_t v6 = sub_1003FA3C8;
  }
  else {
    os_log_type_t v6 = sub_1003FA354;
  }
  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1003FA354()
{
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 80);
  sub_1003FA588();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003FA3C8()
{
  uint64_t v1 = *(void *)(v0 + 144);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 144);
    os_log_type_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    BOOL v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)os_log_type_t v6 = 138412290;
    swift_errorRetain(v5);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *BOOL v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Ran into error creating timer: %@", v6, 0xCu);
    uint64_t v9 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    swift_errorRelease(v5);
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 144);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  uint64_t v12 = *(void *)(v0 + 104);
  uint64_t v11 = *(void *)(v0 + 112);
  uint64_t v14 = *(void *)(v0 + 88);
  uint64_t v13 = *(void *)(v0 + 96);
  uint64_t v15 = *(void *)(v0 + 80);
  sub_1003FA588();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  swift_task_dealloc(v11);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1003FA588()
{
  uint64_t v1 = v0;
  if (qword_100644318 != -1) {
    swift_once(&qword_100644318, sub_1003F0BB4);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v2, (uint64_t)qword_100653550);
  uint64_t v3 = swift_retain_n(v0, 2LL);
  os_log_type_t v4 = (void *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled((os_log_t)v4, v5))
  {

    swift_release_n(v1, 2LL);
    uint64_t v12 = *(void *)(v1 + 16);
    if (!v12) {
      return;
    }
    goto LABEL_7;
  }

  os_log_type_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v7 = swift_slowAlloc(32LL, -1LL);
  uint64_t v13 = v1;
  uint64_t v14 = v7;
  *(_DWORD *)os_log_type_t v6 = 136315138;
  uint64_t v8 = type metadata accessor for ResponseTimer();
  swift_retain(v1);
  uint64_t v9 = String.init<A>(describing:)(&v13, v8);
  uint64_t v11 = (const char *)v10;
  uint64_t v13 = sub_10018CDB4(v9, v10, &v14);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v6 + 4, v6 + 12);
  swift_release_n(v1, 2LL);
  swift_bridgeObjectRelease(v11);
  _os_log_impl((void *)&_mh_execute_header, (os_log_t)v4, v5, "%s: Timer fired", v6, 0xCu);
  swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v7, -1LL, -1LL);
  swift_slowDealloc(v6, -1LL, -1LL);

  uint64_t v12 = *(void *)(v1 + 16);
  if (v12)
  {
LABEL_7:
    swift_unknownObjectRetain(v12);
    sub_1002C3D48();
    swift_unknownObjectRelease(v12);
  }

uint64_t sub_1003FA764()
{
  return swift_deallocClassInstance(v0, 40LL, 7LL);
}

uint64_t type metadata accessor for ResponseTimer()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary13ResponseTimer);
}

uint64_t storeEnumTagSinglePayload for SDAuthenticationTransportType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_1003FA7FC + 4 * byte_1004DA769[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1003FA830 + 4 * byte_1004DA764[v4]))();
}

uint64_t sub_1003FA830(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003FA838(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1003FA840LL);
  }
  return result;
}

uint64_t sub_1003FA84C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1003FA854LL);
  }
  *(_BYTE *)uint64_t result = a2 + 6;
  return result;
}

uint64_t sub_1003FA858(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003FA860(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SDAuthenticationTransportType()
{
  return &type metadata for SDAuthenticationTransportType;
}

unint64_t sub_1003FA880()
{
  unint64_t result = qword_100654078;
  if (!qword_100654078)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004DAB98, &type metadata for SDAuthenticationTransportType);
    atomic_store(result, (unint64_t *)&qword_100654078);
  }

  return result;
}

void sub_1003FA8C4(_OWORD *a1@<X8>)
{
}

char *sub_1003FA8DC(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(a8);
  uint64_t v17 = &a8[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_delegate];
  *((void *)v17 + 1) = 0LL;
  swift_unknownObjectWeakInit(v17, 0LL);
  uint64_t v18 = OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_transportLock;
  uint64_t v19 = sub_100183098(&qword_10064EED0);
  uint64_t v20 = swift_allocObject(v19, 20LL, 7LL);
  *(_DWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  *(void *)&a8[v18] = v20;
  *(void *)&a8[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_rapportInfraWiFiTransportsByIdentifier] = &_swiftEmptyDictionarySingleton;
  *(void *)&a8[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_queue] = a1;
  uint64_t v21 = &a8[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_nearbyAgentTransport];
  *(void *)uint64_t v21 = a2;
  *((void *)v21 + 1) = &off_1005E0058;
  uint64_t v69 = a2;
  uint64_t v22 = &a8[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_idsLocalTransport];
  *(void *)uint64_t v22 = a3;
  *((void *)v22 + 1) = &off_1005E0018;
  uint64_t v23 = &a8[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_idsInternetTransport];
  *(void *)uint64_t v23 = a4;
  *((void *)v23 + 1) = &off_1005DFFD8;
  uint64_t v24 = &a8[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_rapportTransportBT];
  uint64_t v67 = a6;
  *(void *)uint64_t v24 = a5;
  *((void *)v24 + 1) = &off_1005DFF98;
  uint64_t v25 = &a8[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_rapportTransportAWDL];
  *(void *)uint64_t v25 = a6;
  *((void *)v25 + 1) = &off_1005DFF98;
  id v26 = &a8[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_coreBluetoothTransport];
  *(void *)id v26 = a7;
  *((void *)v26 + 1) = &off_1005DFF58;
  uint64_t v27 = type metadata accessor for SDAuthenticationTransportRapportReceiver();
  swift_allocObject(v27, 40LL, 7LL);
  id v28 = a1;
  uint64_t v29 = a8;
  swift_retain(a2);
  id v68 = a3;
  id v66 = a4;
  swift_retain(a5);
  swift_retain(a6);
  uint64_t v30 = a7;
  swift_retain(a7);
  *(void *)&v29[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_rapportTransportReceiver] = sub_1003FAF94((uint64_t)v28);

  v70.receiver = v29;
  v70.super_class = ObjectType;
  uint64_t v31 = (char *)objc_msgSendSuper2(&v70, "init");
  uint64_t v32 = *(void *)&v31[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_nearbyAgentTransport];
  uint64_t v33 = *(void *)&v31[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_nearbyAgentTransport + 8];
  uint64_t v34 = swift_getObjectType(v32);
  id v35 = *(void (**)(char *, _UNKNOWN **, uint64_t, uint64_t))(v33 + 16);
  id v36 = v31;
  swift_unknownObjectRetain(v32);
  v35(v31, &off_1005E0098, v34, v33);
  swift_unknownObjectRelease(v32);
  uint64_t v37 = *(void *)&v36[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_idsLocalTransport];
  uint64_t v38 = *(void *)&v36[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_idsLocalTransport + 8];
  uint64_t v39 = swift_getObjectType(v37);
  id v40 = *(void (**)(char *, _UNKNOWN **, uint64_t, uint64_t))(v38 + 16);
  double v41 = v36;
  swift_unknownObjectRetain(v37);
  v40(v31, &off_1005E0098, v39, v38);
  swift_unknownObjectRelease(v37);
  uint64_t v42 = *(void *)&v41[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_idsInternetTransport];
  uint64_t v43 = *(void *)&v41[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_idsInternetTransport + 8];
  uint64_t v44 = swift_getObjectType(v42);
  uint64_t v45 = *(void (**)(char *, _UNKNOWN **, uint64_t, uint64_t))(v43 + 16);
  uint64_t v46 = v41;
  swift_unknownObjectRetain(v42);
  v45(v31, &off_1005E0098, v44, v43);
  swift_unknownObjectRelease(v42);
  uint64_t v47 = *(void *)&v46[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_rapportTransportBT];
  uint64_t v48 = *(void *)&v46[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_rapportTransportBT + 8];
  uint64_t v49 = swift_getObjectType(v47);
  uint64_t v50 = *(void (**)(char *, _UNKNOWN **, uint64_t, uint64_t))(v48 + 16);
  id v51 = v46;
  swift_unknownObjectRetain(v47);
  v50(v31, &off_1005E0098, v49, v48);
  swift_unknownObjectRelease(v47);
  uint64_t v52 = *(void *)&v51[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_rapportTransportAWDL];
  uint64_t v53 = *(void *)&v51[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_rapportTransportAWDL + 8];
  uint64_t v54 = swift_getObjectType(v52);
  uint64_t v55 = *(void (**)(char *, _UNKNOWN **, uint64_t, uint64_t))(v53 + 16);
  uint64_t v56 = v51;
  swift_unknownObjectRetain(v52);
  v55(v31, &off_1005E0098, v54, v53);
  swift_unknownObjectRelease(v52);
  uint64_t v57 = *(void *)&v56[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_coreBluetoothTransport];
  uint64_t v58 = *(void *)&v56[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_coreBluetoothTransport + 8];
  uint64_t v59 = swift_getObjectType(v57);
  __n128 v60 = *(void (**)(char *, _UNKNOWN **, uint64_t, uint64_t))(v58 + 16);
  uint64_t v61 = v56;
  swift_unknownObjectRetain(v57);
  v60(v31, &off_1005E0098, v59, v58);
  swift_unknownObjectRelease(v57);

  swift_release(v69);
  swift_release(a5);
  swift_release(v67);
  swift_release(v30);
  uint64_t v62 = *(void *)&v61[OBJC_IVAR____TtC16DaemoniOSLibrary32SDAuthenticationTransportManager_rapportTransportReceiver];
  uint64_t v63 = *(void *)(v62 + 16);
  *(void *)(v62 + swift_unknownObjectWeakDestroy(v0 + 16) = v31;
  *(void *)(v62 + 24) = &off_1005E0098;
  uint64_t v64 = v61;
  swift_unknownObjectRelease(v63);
  return v64;
}

uint64_t sub_1003FACF8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  unint64_t v10 = (void *)*a5;
  unint64_t v12 = sub_1003AD53C(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      uint64_t v18 = (void *)*a5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = (uint64_t *)(v18[7] + 16 * v12);
        uint64_t result = swift_unknownObjectRelease(*v19);
        *uint64_t v19 = a1;
        v19[1] = (uint64_t)&off_1005DFF98;
        return result;
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1003B0B80();
      goto LABEL_7;
    }

    sub_1003ACD90(v15, a4 & 1);
    uint64_t v21 = sub_1003AD53C(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = (void *)*a5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_1003FAE2C(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain(a3);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

unint64_t sub_1003FAE2C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1LL << result;
  os_log_type_t v5 = (void *)(a5[6] + 16 * result);
  *os_log_type_t v5 = a2;
  v5[1] = a3;
  os_log_type_t v6 = (void *)(a5[7] + 16 * result);
  *os_log_type_t v6 = a4;
  v6[1] = &off_1005DFF98;
  uint64_t v7 = a5[2];
  BOOL v8 = __OFADD__(v7, 1LL);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a5[2] = v9;
  }
  return result;
}

uint64_t sub_1003FAE84()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1003FAEA8(uint64_t a1, uint64_t a2)
{
  return sub_1003F1AA0(*(void *)(v2 + 16), a2);
}

uint64_t sub_1003FAEB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1003FAEC0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1003FAEC8()
{
  swift_bridgeObjectRelease(*(const char **)(v0 + 40));
  sub_100189B20(*(void *)(v0 + 48), *(void *)(v0 + 56));
  return swift_deallocObject(v0, 65LL);
}

uint64_t sub_1003FAEFC()
{
  return sub_1003F172C( *(void *)(v0 + 16),  *(unsigned int *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56),  *(unsigned __int8 *)(v0 + 64));
}

uint64_t sub_1003FAF14(void *a1)
{
  *(void *)(v1 + 72) = 0LL;
  *(void *)(v1 + 32) = 0LL;
  *(void *)(v1 + 40) = 0LL;
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  *(_BYTE *)(v1 + 24) = 0;
  id v3 = objc_allocWithZone(&OBJC_CLASS___CBServer);
  id v4 = a1;
  id v5 = [v3 init];
  *(void *)(v1 + 80) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v1 + 88) = 0;
  *(void *)(v1 + 48) = v5;
  *(void *)(v1 + 56) = sub_1003F2048;
  *(void *)(v1 + 64) = 0LL;
  sub_1003F6104();
  return v1;
}

void *sub_1003FAF94(uint64_t a1)
{
  v1[2] = 0LL;
  v1[3] = 0LL;
  id v3 = [objc_allocWithZone(RPCompanionLinkClient) init];
  v1[4] = v3;
  [v3 setDispatchQueue:a1];
  uint64_t v4 = 12LL;
  id v5 = (unsigned __int8 *)&byte_1005D0FE0;
  do
  {
    unsigned __int8 v6 = *v5++;
    sub_1003F3E98(v6);
    --v4;
  }

  while (v4);
  uint64_t v7 = (void *)v1[4];
  v11[4] = sub_1003F3C14;
  void v11[5] = 0LL;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256LL;
  v11[2] = sub_1002270C0;
  v11[3] = &unk_1005E0260;
  BOOL v8 = _Block_copy(v11);
  id v9 = v7;
  [v9 activateWithCompletion:v8];
  _Block_release(v8);

  return v1;
}

char *sub_1003FB084(void *a1)
{
  uint64_t v2 = type metadata accessor for SDAuthenticationTransportNearbyAgent();
  uint64_t v3 = swift_allocObject(v2, 64LL, 7LL);
  id v4 = a1;
  sub_1003F1F50(v4);
  id v5 = objc_allocWithZone((Class)type metadata accessor for SDAuthenticationTransportIDSServiceLocal());
  id v6 = v4;
  sub_1003F2F90(v6, 0xD000000000000027LL, 0x800000010050EE20LL);
  BOOL v8 = v7;
  id v9 = objc_allocWithZone((Class)type metadata accessor for SDAuthenticationTransportIDSServiceInternet());
  id v10 = v6;
  sub_1003F2F90(v10, 0xD000000000000029LL, 0x800000010050EE50LL);
  unint64_t v12 = v11;
  uint64_t v13 = type metadata accessor for SDAuthenticationTransportRapportBTOnly();
  uint64_t v14 = swift_allocObject(v13, 72LL, 7LL);
  *(_BYTE *)(v14 + 56) = 0;
  *(void *)(v14 + 32) = 0LL;
  *(void *)(v14 + 40) = 0LL;
  id v15 = objc_allocWithZone(&OBJC_CLASS___RPCompanionLinkClient);
  id v16 = v10;
  id v17 = [v15 init];
  *(void *)(v14 + 48) = v17;
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v16;
  *(_BYTE *)(v14 + 24) = 0;
  [v17 setDispatchQueue:v16];
  *(void *)(v14 + 64) = 0x40000600102LL;
  uint64_t v18 = type metadata accessor for SDAuthenticationTransportRapportAWDLOnly();
  uint64_t v19 = swift_allocObject(v18, 72LL, 7LL);
  *(_BYTE *)(v19 + 56) = 0;
  *(void *)(v19 + 32) = 0LL;
  *(void *)(v19 + 40) = 0LL;
  id v20 = objc_allocWithZone(&OBJC_CLASS___RPCompanionLinkClient);
  id v21 = v16;
  id v22 = [v20 init];
  *(void *)(v19 + 48) = v22;
  *(void *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = v21;
  *(_BYTE *)(v19 + 24) = 0;
  [v22 setDispatchQueue:v21];
  *(void *)(v19 + 64) = 0x8040000220002LL;
  uint64_t v23 = type metadata accessor for SDAuthenticationTransportCoreBluetooth();
  swift_allocObject(v23, 89LL, 7LL);
  id v24 = v21;
  uint64_t v25 = sub_1003FAF14(v24);

  id v26 = (char *)objc_allocWithZone((Class)type metadata accessor for SDAuthenticationTransportManager());
  swift_retain(v3);
  id v27 = v8;
  id v28 = v12;
  swift_retain(v14);
  swift_retain(v19);
  swift_retain(v25);
  uint64_t v29 = sub_1003FA8DC(v24, v3, v27, v28, v14, v19, v25, v26);
  swift_release(v25);
  swift_release(v19);
  swift_release(v14);

  swift_release(v3);
  return v29;
}

unint64_t sub_1003FB2E8(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 a4)
{
  uint64_t v6 = sub_100183098(&qword_10064DA60);
  __chkstk_darwin(v6);
  BOOL v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100644318 != -1) {
    swift_once(&qword_100644318, sub_1003F0BB4);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = sub_100186DE4(v9, (uint64_t)qword_100653550);
  char v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Beginning encryption", v13, 2u);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  uint64_t v14 = (os_log_s *)[(id)objc_opt_self(SDAutoUnlockAKSManager) sharedManager];
  id v15 = v14;
  if (!v14)
  {
    uint64_t v23 = 0LL;
    id v24 = 0LL;
    goto LABEL_20;
  }

  v16.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v17 = a3[3];
  uint64_t v18 = a3[4];
  sub_10019A708(a3, v17);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
  if (v19)
  {
    id v21 = v19;
    NSString v22 = String._bridgeToObjectiveC()();
    *(void *)&double v20 = swift_bridgeObjectRelease(v21).n128_u64[0];
  }

  else
  {
    NSString v22 = 0LL;
  }

  aBlock[0] = 0LL;
  id v58 = 0LL;
  id v59 = 0LL;
  unsigned int v25 = -[os_log_s encryptMessageData:deviceID:encryptedMessage:authTag:nonce:]( v15,  "encryptMessageData:deviceID:encryptedMessage:authTag:nonce:",  v16.super.isa,  v22,  aBlock,  &v59,  &v58,  v20);

  uint64_t v23 = (os_log_s *)v58;
  id v24 = (os_log_s *)v59;
  uint64_t v14 = (os_log_s *)aBlock[0];
  id v15 = v14;
  if (!v25 || !v14 || !v24 || !v23)
  {
LABEL_20:
    uint64_t v48 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v49 = static os_log_type_t.error.getter(v48);
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Error converting message to data", v50, 2u);
      swift_slowDealloc(v50, -1LL, -1LL);
    }

    goto LABEL_26;
  }

  id v26 = (os_log_s *)[objc_allocWithZone((Class)SDAutoUnlockSessionWrapper) init];
  id v27 = v26;
  if (!v26
    || (-[os_log_s setEncryptedPayload:](v26, "setEncryptedPayload:", v15),
        -[os_log_s setAuthTag:](v27, "setAuthTag:", v24),
        -[os_log_s setNonce:](v27, "setNonce:", v23),
        -[os_log_s setMessageType:](v27, "setMessageType:", a4 + 2006),
        (id v26 = (os_log_s *)-[os_log_s data](v27, "data")) == 0LL))
  {
    uint64_t v48 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v51 = static os_log_type_t.error.getter(v48);
    if (os_log_type_enabled(v48, v51))
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v52 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v51, "Error encrypting message", v52, 2u);
      swift_slowDealloc(v52, -1LL, -1LL);
      uint64_t v53 = v27;
    }

    else
    {
      uint64_t v53 = v48;
      uint64_t v48 = v27;
    }

LABEL_26:
    unsigned __int8 v47 = 0;
    uint64_t v46 = 10LL;
LABEL_27:

    LOBYTE(aBlock[0]) = v47;
    return v46 | ((unint64_t)v47 << 32);
  }

  id v28 = v26;
  uint64_t v29 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v26);
  unint64_t v55 = v30;
  uint64_t v56 = v29;

  id v54 = [objc_allocWithZone(SFBLEDevice) init];
  uint64_t v32 = a3[3];
  uint64_t v31 = a3[4];
  sub_10019A708(a3, v32);
  (*(void (**)(uint64_t, uint64_t))(v31 + 48))(v32, v31);
  uint64_t v33 = type metadata accessor for UUID(0LL);
  uint64_t v34 = *(void *)(v33 - 8);
  unint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48))(v8, 1LL, v33);
  if ((_DWORD)result != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v33);
    id v37 = v54;
    [v54 setIdentifier:isa];

    uint64_t v38 = (os_log_s *)Logger.logObject.getter([v37 setUseBTPipe:1]);
    os_log_type_t v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      id v40 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Sending data", v40, 2u);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    id v41 = [(id)objc_opt_self(SDNearbyAgent) sharedNearbyAgent];
    unint64_t v43 = v55;
    uint64_t v42 = v56;
    Class v44 = Data._bridgeToObjectiveC()().super.isa;
    aBlock[4] = sub_1003F208C;
    uint64_t aBlock[5] = 0LL;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_1002270C0;
    uint64_t aBlock[3] = &unk_1005E0158;
    uint64_t v45 = _Block_copy(aBlock);
    [v41 sendUnlockData:v44 toBLEDevice:v37 completion:v45];
    _Block_release(v45);

    sub_100189B20(v42, v43);
    uint64_t v46 = 0LL;
    unsigned __int8 v47 = 1;
    uint64_t v48 = v15;
    id v15 = v24;
    id v24 = v23;
    uint64_t v23 = v27;
    goto LABEL_27;
  }

  __break(1u);
  return result;
}

uint64_t sub_1003FB8F8()
{
  sub_100189B20(*(void *)(v0 + 48), *(void *)(v0 + 56));
  return swift_deallocObject(v0, 65LL);
}

uint64_t sub_1003FB934(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  char v10 = *(_BYTE *)(v1 + 64);
  char v11 = (void *)swift_task_alloc(dword_10065408C);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
  *char v11 = v2;
  v11[1] = sub_1001943E8;
  return sub_1003F8C08(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1003FB9C8()
{
  return swift_deallocObject(v0, 32LL);
}

void sub_1003FB9EC()
{
}

uint64_t sub_1003FB9F4()
{
  return swift_deallocObject(v0, 49LL);
}

uint64_t sub_1003FBA28()
{
  return sub_1003F9094( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(unsigned __int8 *)(v0 + 48));
}

unint64_t sub_1003FBA38(Swift::String string)
{
  id object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._id object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1005D1D88, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7) {
    return 7LL;
  }
  else {
    return v3;
  }
}

void sub_1003FBA80(void *a1, void *a2, uint64_t a3, const char *a4)
{
  uint64_t v5 = v4;
  id v63 = a1;
  uint64_t v9 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  os_log_type_t v12 = (uint64_t *)((char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = *(void **)(v5 + OBJC_IVAR____TtC16DaemoniOSLibrary35SDAuthenticationTransportIDSService_queue);
  *os_log_type_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  char v15 = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if ((v15 & 1) != 0)
  {
    if (qword_100644318 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_100644318, sub_1003F0BB4);
LABEL_3:
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = sub_100186DE4(v16, (uint64_t)qword_100653550);
  id v18 = a2;
  swift_bridgeObjectRetain_n(a4, 2LL);
  id v19 = v18;
  double v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc(22LL, -1LL);
    uint64_t v62 = v5;
    uint64_t v23 = v22;
    id v59 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v60 = swift_slowAlloc(32LL, -1LL);
    v64[0] = v60;
    *(_DWORD *)uint64_t v23 = 138412546;
    uint64_t v61 = v17;
    uint64_t v65 = (uint64_t)v19;
    id v24 = a4;
    id v25 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v23 + 4, v23 + 12);
    id v26 = v59;
    *id v59 = v19;

    a4 = v24;
    *(_WORD *)(v23 + 12) = 2080;
    swift_bridgeObjectRetain(v24);
    uint64_t v65 = sub_10018CDB4(a3, (unint64_t)v24, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v23 + 14, v23 + 22);
    swift_bridgeObjectRelease_n(v24, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Received: %@ from: %s", (uint8_t *)v23, 0x16u);
    uint64_t v27 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v26, 1LL, v27);
    swift_slowDealloc(v26, -1LL, -1LL);
    uint64_t v28 = v60;
    swift_arrayDestroy(v60, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    uint64_t v29 = v23;
    uint64_t v5 = v62;
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a4, 2LL);
  }

  int v30 = [v19 type];
  __int16 v31 = v30;
  uint64_t v32 = sub_100350500(v30);
  if (v32 == 12)
  {
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      id v35 = (uint8_t *)swift_slowAlloc(6LL, -1LL);
      *(_DWORD *)id v35 = 33554688;
      LOWORD(v64[0]) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v64, (char *)v64 + 2, v35 + 4, v35 + 6);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Received unknown message type %hu", v35, 6u);
      swift_slowDealloc(v35, -1LL, -1LL);
    }
  }

  else
  {
    uint64_t v36 = v32;
    NSString v37 = String._bridgeToObjectiveC()();
    id v38 = [v63 deviceForFromID:v37];

    if (v38)
    {
      uint64_t v40 = v5 + OBJC_IVAR____TtC16DaemoniOSLibrary35SDAuthenticationTransportIDSService_delegate;
      uint64_t Strong = swift_unknownObjectWeakLoadStrong( v5 + OBJC_IVAR____TtC16DaemoniOSLibrary35SDAuthenticationTransportIDSService_delegate,  v39);
      if (Strong)
      {
        uint64_t v42 = Strong;
        uint64_t v43 = *(void *)(v40 + 8);
        id v44 = [v19 data];
        if (v44)
        {
          uint64_t v45 = v44;
          uint64_t ObjectType = swift_getObjectType(v42);
          uint64_t v47 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v45);
          unint64_t v49 = v48;

          v64[3] = sub_100183168(0LL, (unint64_t *)&qword_10064D810, &OBJC_CLASS___IDSDevice_ptr);
          v64[4] = (uint64_t)&off_1005E0BD0;
          v64[0] = (uint64_t)v38;
          uint64_t v50 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(v43 + 8);
          id v51 = v38;
          v50(v47, v49, v36, v64, ObjectType, v43);

          sub_100189B20(v47, v49);
          swift_unknownObjectRelease(v42);
          sub_10018709C(v64);
        }

        else
        {
          __break(1u);
        }
      }

      else
      {
      }
    }

    else
    {
      swift_bridgeObjectRetain_n(a4, 2LL);
      uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
      uint64_t v54 = static os_log_type_t.error.getter(v53);
      if (os_log_type_enabled(v53, (os_log_type_t)v54))
      {
        uint64_t v55 = a3;
        uint64_t v56 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v57 = swift_slowAlloc(32LL, -1LL);
        v64[0] = v57;
        *(_DWORD *)uint64_t v56 = 136315138;
        swift_bridgeObjectRetain(a4);
        uint64_t v65 = sub_10018CDB4(v55, (unint64_t)a4, v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v56 + 4, v56 + 12);
        swift_bridgeObjectRelease_n(a4, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v53,  (os_log_type_t)v54,  "Could not find same account device matching fromID %s",  v56,  0xCu);
        swift_arrayDestroy(v57, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v57, -1LL, -1LL);
        swift_slowDealloc(v56, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(a4, 2LL);
      }
    }
  }

void sub_1003FC06C(uint64_t a1, const char *a2, char a3)
{
  uint64_t v7 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = *(void **)(v3 + OBJC_IVAR____TtC16DaemoniOSLibrary35SDAuthenticationTransportIDSService_queue);
  void *v10 = v11;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) != 0)
  {
    if (qword_100644318 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_100644318, sub_1003F0BB4);
LABEL_3:
  uint64_t v13 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v13, (uint64_t)qword_100653550);
  swift_bridgeObjectRetain_n(a2, 2LL);
  char v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc(18LL, -1LL);
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    uint64_t v20 = v18;
    *(_DWORD *)uint64_t v17 = 136315394;
    swift_bridgeObjectRetain(a2);
    uint64_t v19 = sub_10018CDB4(a1, (unint64_t)a2, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v17 + 12) = 1024;
    LODWORD(v19) = a3 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, (char *)&v19 + 4, v17 + 14, v17 + 18);
    _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "Received confirmation that message: %s sent success: %{BOOL}d",  (uint8_t *)v17,  0x12u);
    swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

uint64_t sub_1003FC2B4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1003FC2D8(void *a1, void (*a2)(void), uint64_t a3)
{
  return sub_1003F6324(a1, a2, a3, v3);
}

uint64_t sub_1003FC2E0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1003FC304(uint64_t a1)
{
}

uint64_t sub_1003FC30C()
{
  swift_release(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1003FC340()
{
}

uint64_t sub_1003FC34C()
{
  return swift_deallocObject(v0, 41LL);
}

double sub_1003FC378(uint64_t a1)
{
  *(void *)&double result = sub_1003F545C( a1,  *(void *)(v1 + 16),  (os_log_s *)*(void *)(v1 + 24),  *(void *)(v1 + 32),  *(unsigned __int8 *)(v1 + 40)).n128_u64[0];
  return result;
}

void sub_1003FC388()
{
}

uint64_t sub_1003FC390()
{
  return swift_deallocObject(v0, 64LL);
}

uint64_t sub_1003FC3C4(uint64_t a1)
{
  return sub_1003F4C14( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(unsigned __int8 *)(v1 + 40),  *(void *)(v1 + 48),  *(const char **)(v1 + 56));
}

uint64_t sub_1003FC3D8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1003FC3FC(uint64_t a1, uint64_t a2)
{
}

unint64_t sub_1003FC408()
{
  unint64_t result = qword_1006540E0;
  if (!qword_1006540E0)
  {
    uint64_t v1 = sub_100183124(&qword_1006462D8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1006540E0);
  }

  return result;
}

uint64_t sub_1003FC464(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100183098(&qword_10064DA60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003FC4AC()
{
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL);
}

void sub_1003FC4E0()
{
}

uint64_t sub_1003FC56C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100186DFC(v0, qword_1006540F0);
  uint64_t v1 = sub_100186DE4(v0, (uint64_t)qword_1006540F0);
  if (qword_100644028 != -1) {
    swift_once(&qword_100644028, sub_10023A59C);
  }
  uint64_t v2 = sub_100186DE4(v0, (uint64_t)qword_1006696D0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

id sub_1003FC5FC()
{
  uint64_t v1 = *(int *)(_s22GuestModeUnlockPairingV17InitialKeyContextVMa(0LL) + 24);
  uint64_t v2 = *(void **)(v0 + v1);
  if (v2)
  {
    id v3 = *(id *)(v0 + v1);
LABEL_5:
    id v5 = v2;
    return v3;
  }

  id result = [objc_allocWithZone((Class)SDAuthenticationPrePairingRequest) init];
  if (result)
  {
    *(void *)(v0 + v1) = result;
    id v3 = result;
    uint64_t v2 = 0LL;
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

uint64_t sub_1003FC66C(uint64_t a1, uint64_t a2)
{
  return sub_1001A315C(a1, a2, (uint64_t (*)(void))sub_1003FC5FC);
}

id sub_1003FC688()
{
  return sub_1002ABC70(_s22GuestModeUnlockPairingV18InitialLockContextVMa, (Class *)off_1005C8858);
}

uint64_t sub_1003FC6AC(uint64_t a1, uint64_t a2)
{
  return sub_1003FDB04(a1, a2, (void (*)(void, void))sub_1001A4C04);
}

uint64_t sub_1003FC6B8(uint64_t a1, uint64_t a2)
{
  return sub_1002ABF5C(a1, a2, _s22GuestModeUnlockPairingV18InitialLockContextVMa, (Class *)off_1005C8858);
}

void sub_1003FC6DC(void *a1@<X0>, uint64_t a2@<X1>, const char **a3@<X8>)
{
  uint64_t v7 = type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100183098(&qword_1006457E0);
  uint64_t v11 = swift_allocObject(v10, 152LL, 7LL);
  *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_1004CD550;
  if (qword_100644338 != -1) {
    swift_once(&qword_100644338, LongHash.storage.getter);
  }
  *(void *)(v11 + 56) = &type metadata for SDAuthentication.Operation.CheckLocalSecurityPolicy;
  *(void *)(v11 + 64) = &off_10064ABB8;
  *(void *)(v11 + 96) = &type metadata for SDAuthentication.Operation.IncludeLongTermKeyAndAKSTokenInMessage;
  *(void *)(v11 + 104) = &off_10064B138;
  *(void *)(v11 + 136) = &type metadata for SDAuthentication.Operation.BuildMessageHeader;
  *(void *)(v11 + 144) = &off_10064AC98;
  *a3 = (const char *)v11;
  uint64_t v12 = _s22GuestModeUnlockPairingV27HandlePairingRequestContextVMa(0LL);
  uint64_t v39 = *(int *)(v12 + 28);
  uint64_t v40 = v12;
  *(const char **)((char *)a3 + v39) = 0LL;
  *((_BYTE *)a3 + *(int *)(v12 + sub_100189B20(*(void *)(v0 + 24), *(void *)(v0 + 32)) = 4;
  if (qword_100644330 != -1) {
    swift_once(&qword_100644330, sub_1003FC56C);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v13, (uint64_t)qword_1006540F0);
  id v14 = a1;
  char v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v36 = v9;
    uint64_t v37 = a2;
    uint64_t v38 = v3;
    uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    uint64_t v43 = v18;
    *(_DWORD *)uint64_t v17 = 136315138;
    id v19 = [v14 sessionID];
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      uint64_t v23 = v22;
    }

    else
    {
      uint64_t v21 = 0xD000000000000015LL;
      uint64_t v41 = 0LL;
      uint64_t v42 = (const char *)0xE000000000000000LL;
      _StringGuts.grow(_:)(17LL);
      swift_bridgeObjectRelease(v42);
      uint64_t v23 = (const char *)0x80000001005046B0LL;
    }

    uint64_t v41 = sub_10018CDB4(v21, (unint64_t)v23, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v17 + 4, v17 + 12);

    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Process PairingRequest SessionID: %s", v17, 0xCu);
    swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);

    a2 = v37;
    uint64_t v9 = v36;
  }

  else
  {
  }

  id v24 = [v14 longTermKey];
  if (v24)
  {
    id v25 = v24;
    uint64_t v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v24);
    uint64_t v28 = v27;

    uint64_t v29 = v40;
    int v30 = (uint64_t *)((char *)a3 + *(int *)(v40 + 24));
    *int v30 = v26;
    v30[1] = v28;
    uint64_t v31 = _s22GuestModeUnlockPairingV17InitialKeyContextVMa(0LL);
    sub_1001A4B84(a2 + *(int *)(v31 + 20), (uint64_t)v9, type metadata accessor for SDAuthenticationSessionMetrics);
    sub_1001A4BC8(a2, _s22GuestModeUnlockPairingV17InitialKeyContextVMa);
    sub_1001A4B40( (uint64_t)v9,  (uint64_t)a3 + *(int *)(v29 + 20),  type metadata accessor for SDAuthenticationSessionMetrics);
  }

  else
  {
    unint64_t v32 = sub_100187014();
    uint64_t v33 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v32, 0LL, 0LL);
    *(_DWORD *)uint64_t v34 = 10;
    *(void *)(v34 + 8) = 0xD000000000000015LL;
    *(void *)(v34 + swift_weakDestroy(v0 + 16) = 0x800000010050DF80LL;
    swift_willThrow(v33);

    sub_1001A4BC8(a2, _s22GuestModeUnlockPairingV17InitialKeyContextVMa);
    swift_bridgeObjectRelease(*a3);
  }

uint64_t sub_1003FCAE0(uint64_t a1, uint64_t a2)
{
  return sub_1003FDB04(a1, a2, (void (*)(void, void))sub_10019BA8C);
}

id sub_1003FCAEC()
{
  return sub_1002ABC70(_s22GuestModeUnlockPairingV27HandlePairingRequestContextVMa, (Class *)off_1005C8860);
}

uint64_t sub_1003FCB10(uint64_t a1, uint64_t a2)
{
  return sub_1002ABF5C(a1, a2, _s22GuestModeUnlockPairingV27HandlePairingRequestContextVMa, (Class *)off_1005C8860);
}

id sub_1003FCB34()
{
  uint64_t v1 = *(int *)(_s22GuestModeUnlockPairingV28HandlePairingResponseContextVMa(0LL) + 36);
  uint64_t v2 = *(void **)(v0 + v1);
  if (v2)
  {
    id v3 = *(id *)(v0 + v1);
LABEL_5:
    id v5 = v2;
    return v3;
  }

  id result = [objc_allocWithZone((Class)SDAuthenticationPairingCreateSecret) init];
  if (result)
  {
    *(void *)(v0 + v1) = result;
    id v3 = result;
    uint64_t v2 = 0LL;
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

void sub_1003FCBA0(void *a1@<X0>, uint64_t a2@<X1>, const char **a3@<X8>)
{
  uint64_t v7 = type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  __chkstk_darwin(v7);
  uint64_t v62 = (uint64_t)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100183098(&qword_1006457E0);
  uint64_t v10 = swift_allocObject(v9, 152LL, 7LL);
  *(_OWORD *)(v10 + swift_weakDestroy(v0 + 16) = xmmword_1004CD550;
  if (qword_100644338 != -1) {
    swift_once(&qword_100644338, LongHash.storage.getter);
  }
  *(void *)(v10 + 56) = &type metadata for SDAuthentication.Operation.SignAndStoreRemoteLTK;
  *(void *)(v10 + 64) = &off_10064B118;
  *(void *)(v10 + 96) = &type metadata for SDAuthentication.Operation.BuildMessageHeader;
  *(void *)(v10 + 104) = &off_10064AC98;
  *(void *)(v10 + 136) = &type metadata for SDAuthentication.Operation.EnableDynamicStore;
  *(void *)(v10 + 144) = &off_10064B0F8;
  *a3 = (const char *)v10;
  uint64_t v11 = (int *)_s22GuestModeUnlockPairingV28HandlePairingResponseContextVMa(0LL);
  uint64_t v12 = (uint64_t *)((char *)a3 + v11[6]);
  *(_OWORD *)uint64_t v12 = xmmword_1004CD540;
  uint64_t v13 = v11[9];
  *(const char **)((char *)a3 + v13) = 0LL;
  uint64_t v61 = v11;
  *((_BYTE *)a3 + v11[10]) = 6;
  if (qword_100644330 != -1) {
    swift_once(&qword_100644330, sub_1003FC56C);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v14, (uint64_t)qword_1006540F0);
  id v15 = a1;
  os_log_type_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v63 = v3;
  if (v18)
  {
    uint64_t v19 = swift_slowAlloc(12LL, -1LL);
    uint64_t v59 = v13;
    uint64_t v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc(8LL, -1LL);
    uint64_t v60 = a3;
    uint64_t v57 = (void *)v21;
    *(_DWORD *)uint64_t v20 = 138412290;
    id v64 = v15;
    id v22 = v15;
    uint64_t v58 = v12;
    id v23 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v20 + 4, v20 + 12);
    id v24 = v57;
    void *v57 = v15;

    uint64_t v12 = v58;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Handling authentication pairing response: %@", v20, 0xCu);
    uint64_t v25 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v24, 1LL, v25);
    a3 = v60;
    swift_slowDealloc(v24, -1LL, -1LL);
    uint64_t v26 = v20;
    uint64_t v13 = v59;
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v27 = v15;
  id v28 = [v15 token];
  if (v28)
  {
    uint64_t v29 = v28;
    uint64_t v30 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v28);
    unint64_t v32 = v31;

    id v33 = [v27 longTermKey];
    if (v33)
    {
      uint64_t v34 = v33;
      uint64_t v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v33);
      uint64_t v37 = v36;

      uint64_t v38 = v61;
      uint64_t v39 = (uint64_t *)((char *)a3 + v61[8]);
      uint64_t *v39 = v30;
      v39[1] = v32;
      uint64_t v40 = (uint64_t *)((char *)a3 + v38[7]);
      *uint64_t v40 = v35;
      v40[1] = v37;
      uint64_t v41 = _s22GuestModeUnlockPairingV18InitialLockContextVMa(0LL);
      uint64_t v42 = (uint64_t *)(a2 + *(int *)(v41 + 24));
      uint64_t v43 = *v42;
      unint64_t v44 = v42[1];
      uint64_t v45 = a2;
      uint64_t v46 = v12;
      uint64_t v47 = *v12;
      unint64_t v48 = v12[1];
      sub_1001A4C04(*v42, v44);
      sub_100189B0C(v47, v48);
      *uint64_t v46 = v43;
      v46[1] = v44;
      uint64_t v49 = v62;
      sub_1001A4B84(v45 + *(int *)(v41 + 20), v62, type metadata accessor for SDAuthenticationSessionMetrics);
      sub_1001A4BC8(v45, _s22GuestModeUnlockPairingV18InitialLockContextVMa);
      sub_1001A4B40(v49, (uint64_t)a3 + v38[5], type metadata accessor for SDAuthenticationSessionMetrics);
      return;
    }

    unint64_t v53 = sub_100187014();
    uint64_t v54 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v53, 0LL, 0LL);
    *(_DWORD *)uint64_t v55 = 10;
    *(void *)(v55 + 8) = 0xD000000000000013LL;
    *(void *)(v55 + swift_weakDestroy(v0 + 16) = 0x800000010050EFD0LL;
    swift_willThrow(v54);
    sub_100189B20(v30, v32);
  }

  else
  {
    unint64_t v50 = sub_100187014();
    uint64_t v51 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v50, 0LL, 0LL);
    *(_DWORD *)uint64_t v52 = 10;
    strcpy((char *)(v52 + 8), "Missing token");
    *(_WORD *)(v52 + 22) = -4864;
    swift_willThrow(v51);
  }

  sub_1001A4BC8(a2, _s22GuestModeUnlockPairingV18InitialLockContextVMa);
  swift_bridgeObjectRelease(*a3);
  sub_100189B0C(*v12, v12[1]);
}

uint64_t sub_1003FD058(uint64_t a1, uint64_t a2)
{
  return sub_1001A315C(a1, a2, (uint64_t (*)(void))sub_1003FCB34);
}

void sub_1003FD074(void *a1@<X0>, uint64_t a2@<X1>, const char **a3@<X8>)
{
  uint64_t v7 = type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  __chkstk_darwin(v7);
  uint64_t v47 = (uint64_t)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100183098(&qword_1006457E0);
  uint64_t v10 = swift_allocObject(v9, 192LL, 7LL);
  *(_OWORD *)(v10 + swift_weakDestroy(v0 + 16) = xmmword_1004CE420;
  if (qword_100644338 != -1) {
    swift_once(&qword_100644338, LongHash.storage.getter);
  }
  *(void *)(v10 + 56) = &type metadata for SDAuthentication.Operation.StepPairingCreateSecret;
  *(void *)(v10 + 64) = &off_10064B0D8;
  *(void *)(v10 + 96) = &type metadata for SDAuthentication.Operation.BuildMessageHeader;
  *(void *)(v10 + 104) = &off_10064AC98;
  *(void *)(v10 + 136) = &type metadata for SDAuthentication.Operation.RecordPairing;
  *(void *)(v10 + 144) = &off_10064B0B8;
  *(void *)(v10 + 176) = &type metadata for SDAuthentication.Operation.EnableDynamicStore;
  *(void *)(v10 + 184) = &off_10064B0F8;
  *a3 = (const char *)v10;
  uint64_t SecretContextVMa = _s22GuestModeUnlockPairingV32HandlePairingCreateSecretContextVMa(0LL);
  uint64_t v12 = *(int *)(SecretContextVMa + 28);
  *(const char **)((char *)a3 + v12) = 0LL;
  uint64_t v46 = SecretContextVMa;
  *((_BYTE *)a3 + *(int *)(SecretContextVMa + sub_100189B20(*(void *)(v0 + 24), *(void *)(v0 + 32)) = 5;
  if (qword_100644330 != -1) {
    swift_once(&qword_100644330, sub_1003FC56C);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v13, (uint64_t)qword_1006540F0);
  id v14 = a1;
  id v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v40 = a3;
    uint64_t v43 = v12;
    uint64_t v44 = a2;
    uint64_t v45 = v3;
    uint64_t v17 = swift_slowAlloc(22LL, -1LL);
    BOOL v18 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v42 = swift_slowAlloc(32LL, -1LL);
    uint64_t v50 = v42;
    *(_DWORD *)uint64_t v17 = 138412546;
    uint64_t v48 = (uint64_t)v14;
    id v19 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v17 + 4, v17 + 12);
    uint64_t v41 = v18;
    *BOOL v18 = v14;

    *(_WORD *)(v17 + 12) = 2080;
    id v20 = [v19 sessionID];
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      id v24 = v23;
    }

    else
    {
      uint64_t v48 = 0LL;
      uint64_t v49 = (const char *)0xE000000000000000LL;
      _StringGuts.grow(_:)(17LL);
      swift_bridgeObjectRelease(v49);
      id v24 = (const char *)0x80000001005046B0LL;
      uint64_t v22 = 0xD000000000000015LL;
    }

    uint64_t v48 = sub_10018CDB4(v22, (unint64_t)v24, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v17 + 14, v17 + 22);

    swift_bridgeObjectRelease(v24);
    _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "Received authentication pairing create secret: %@ for sessionID %s",  (uint8_t *)v17,  0x16u);
    uint64_t v25 = sub_100183098(&qword_1006454E0);
    uint64_t v26 = v41;
    swift_arrayDestroy(v41, 1LL, v25);
    swift_slowDealloc(v26, -1LL, -1LL);
    uint64_t v27 = v42;
    swift_arrayDestroy(v42, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);

    a2 = v44;
    uint64_t v12 = v43;
    a3 = v40;
  }

  else
  {
  }

  id v28 = [v14 token];
  if (v28)
  {
    uint64_t v29 = v28;
    uint64_t v30 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v28);
    uint64_t v32 = v31;

    uint64_t v33 = v46;
    uint64_t v34 = (uint64_t *)((char *)a3 + *(int *)(v46 + 24));
    *uint64_t v34 = v30;
    v34[1] = v32;
    uint64_t v35 = _s22GuestModeUnlockPairingV27HandlePairingRequestContextVMa(0LL);
    uint64_t v36 = v47;
    sub_1001A4B84(a2 + *(int *)(v35 + 20), v47, type metadata accessor for SDAuthenticationSessionMetrics);
    sub_1001A4BC8(a2, _s22GuestModeUnlockPairingV27HandlePairingRequestContextVMa);
    sub_1001A4B40(v36, (uint64_t)a3 + *(int *)(v33 + 20), type metadata accessor for SDAuthenticationSessionMetrics);
  }

  else
  {
    unint64_t v37 = sub_100187014();
    uint64_t v38 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v37, 0LL, 0LL);
    *(_DWORD *)uint64_t v39 = 10;
    strcpy((char *)(v39 + 8), "Missing token");
    *(_WORD *)(v39 + 22) = -4864;
    swift_willThrow(v38);

    sub_1001A4BC8(a2, _s22GuestModeUnlockPairingV27HandlePairingRequestContextVMa);
    swift_bridgeObjectRelease(*a3);
  }

id sub_1003FD53C()
{
  return sub_1002ABC70(_s22GuestModeUnlockPairingV32HandlePairingCreateSecretContextVMa, (Class *)off_1005C8840);
}

uint64_t sub_1003FD560(uint64_t a1, uint64_t a2)
{
  return sub_1002ABF5C(a1, a2, _s22GuestModeUnlockPairingV32HandlePairingCreateSecretContextVMa, (Class *)off_1005C8840);
}

id sub_1003FD584()
{
  uint64_t v1 = *(int *)(_s22GuestModeUnlockPairingV32HandlePairingCreateRecordContextVMa(0LL) + 32);
  uint64_t v2 = *(void **)(v0 + v1);
  if (v2)
  {
    id v3 = *(id *)(v0 + v1);
LABEL_5:
    id v5 = v2;
    return v3;
  }

  id result = [objc_allocWithZone((Class)SDAuthenticationConfirmation) init];
  if (result)
  {
    *(void *)(v0 + v1) = result;
    id v3 = result;
    uint64_t v2 = 0LL;
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

void sub_1003FD5F0(void *a1@<X0>, uint64_t a2@<X1>, const char **a3@<X8>)
{
  uint64_t v57 = a3;
  uint64_t v6 = type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  __chkstk_darwin(v6);
  uint64_t v55 = (uint64_t)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100183098(&qword_1006457E0);
  uint64_t v9 = swift_allocObject(v8, 152LL, 7LL);
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_1004CD550;
  if (qword_100644338 != -1) {
    swift_once(&qword_100644338, LongHash.storage.getter);
  }
  *(void *)(v9 + 56) = &type metadata for SDAuthentication.Operation.StepPairingCreateRecordWithPasscode;
  *(void *)(v9 + 64) = &off_10064B098;
  *(void *)(v9 + 96) = &type metadata for SDAuthentication.Operation.RecordPairing;
  *(void *)(v9 + 104) = &off_10064B0B8;
  *(void *)(v9 + 136) = &type metadata for SDAuthentication.Operation.SendConfirmation;
  *(void *)(v9 + 144) = &off_10064B238;
  uint64_t v10 = v57;
  void *v57 = (const char *)v9;
  RecordContextVMa = (int *)_s22GuestModeUnlockPairingV32HandlePairingCreateRecordContextVMa(0LL);
  uint64_t v56 = (uint64_t *)((char *)v10 + RecordContextVMa[6]);
  *(_OWORD *)uint64_t v56 = xmmword_1004CD540;
  uint64_t v12 = RecordContextVMa[8];
  *(const char **)((char *)v10 + v12) = 0LL;
  uint64_t v54 = RecordContextVMa;
  *((_BYTE *)v10 + RecordContextVMa[9]) = 2;
  if (qword_100644330 != -1) {
    swift_once(&qword_100644330, sub_1003FC56C);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v13, (uint64_t)qword_1006540F0);
  id v14 = a1;
  id v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v51 = v12;
    uint64_t v52 = a2;
    uint64_t v53 = v3;
    uint64_t v17 = swift_slowAlloc(22LL, -1LL);
    BOOL v18 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v50 = swift_slowAlloc(32LL, -1LL);
    uint64_t v60 = v50;
    *(_DWORD *)uint64_t v17 = 138412546;
    uint64_t v58 = (uint64_t)v14;
    id v19 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v17 + 4, v17 + 12);
    uint64_t v49 = v18;
    *BOOL v18 = v14;

    *(_WORD *)(v17 + 12) = 2080;
    id v20 = [v19 sessionID];
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      id v24 = v23;
    }

    else
    {
      uint64_t v22 = 0xD000000000000015LL;
      uint64_t v58 = 0LL;
      uint64_t v59 = (const char *)0xE000000000000000LL;
      _StringGuts.grow(_:)(17LL);
      swift_bridgeObjectRelease(v59);
      id v24 = (const char *)0x80000001005046B0LL;
    }

    uint64_t v58 = sub_10018CDB4(v22, (unint64_t)v24, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v17 + 14, v17 + 22);

    swift_bridgeObjectRelease(v24);
    _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "Received authentication pairing create record: %@ for sessionID %s",  (uint8_t *)v17,  0x16u);
    uint64_t v25 = sub_100183098(&qword_1006454E0);
    uint64_t v26 = v49;
    swift_arrayDestroy(v49, 1LL, v25);
    swift_slowDealloc(v26, -1LL, -1LL);
    uint64_t v27 = v50;
    swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);

    a2 = v52;
    uint64_t v12 = v51;
  }

  else
  {
  }

  id v28 = [v14 token];
  if (v28)
  {
    uint64_t v29 = v28;
    uint64_t v30 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v28);
    uint64_t v32 = v31;

    uint64_t v33 = v54;
    uint64_t v34 = (uint64_t *)((char *)v57 + v54[7]);
    *uint64_t v34 = v30;
    v34[1] = v32;
    uint64_t v35 = _s22GuestModeUnlockPairingV28HandlePairingResponseContextVMa(0LL);
    uint64_t v36 = (uint64_t *)(a2 + *(int *)(v35 + 24));
    uint64_t v37 = *v36;
    unint64_t v38 = v36[1];
    uint64_t v39 = a2;
    uint64_t v40 = v56;
    uint64_t v41 = *v56;
    unint64_t v42 = v56[1];
    sub_1001A4C04(*v36, v38);
    sub_100189B0C(v41, v42);
    *uint64_t v40 = v37;
    v40[1] = v38;
    uint64_t v43 = v55;
    sub_1001A4B84(v39 + *(int *)(v35 + 20), v55, type metadata accessor for SDAuthenticationSessionMetrics);
    sub_1001A4BC8(v39, _s22GuestModeUnlockPairingV28HandlePairingResponseContextVMa);
    sub_1001A4B40(v43, (uint64_t)v57 + v33[5], type metadata accessor for SDAuthenticationSessionMetrics);
  }

  else
  {
    unint64_t v44 = sub_100187014();
    uint64_t v45 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v44, 0LL, 0LL);
    *(_DWORD *)uint64_t v46 = 10;
    *(void *)(v46 + 8) = 0xD000000000000053LL;
    *(void *)(v46 + swift_weakDestroy(v0 + 16) = 0x800000010050EFF0LL;
    swift_willThrow(v45);

    sub_1001A4BC8(a2, _s22GuestModeUnlockPairingV28HandlePairingResponseContextVMa);
    uint64_t v47 = v57;
    swift_bridgeObjectRelease(*v57);
    sub_100189B0C(*v56, v56[1]);
  }

uint64_t sub_1003FDB04(uint64_t a1, uint64_t a2, void (*a3)(void, void))
{
  uint64_t v4 = (void *)(v3 + *(int *)(a1 + 24));
  uint64_t v5 = *v4;
  a3(*v4, v4[1]);
  return v5;
}

uint64_t sub_1003FDB40(uint64_t a1, uint64_t a2)
{
  return sub_1001A315C(a1, a2, (uint64_t (*)(void))sub_1003FD584);
}

void sub_1003FDB5C(void *a1@<X0>, uint64_t a2@<X1>, const char **a3@<X8>)
{
  uint64_t v6 = sub_100183098(&qword_1006457E0);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1004CDCA0;
  if (qword_100644338 != -1) {
    swift_once(&qword_100644338, LongHash.storage.getter);
  }
  *(void *)(v7 + 56) = &type metadata for SDAuthentication.Operation.HandleSucceededResult;
  *(void *)(v7 + 64) = &off_10064B218;
  *a3 = (const char *)v7;
  if ([a1 hasSuccess])
  {
    uint64_t v8 = a2 + *(int *)(_s22GuestModeUnlockPairingV32HandlePairingCreateSecretContextVMa(0LL) + 20);
    uint64_t v9 = _s22GuestModeUnlockPairingV25HandleConfirmationContextVMa(0LL);
    sub_1001A4B84(v8, (uint64_t)a3 + *(int *)(v9 + 20), type metadata accessor for SDAuthenticationSessionMetrics);
    LOBYTE(v8) = [a1 success];

    sub_1001A4BC8(a2, _s22GuestModeUnlockPairingV32HandlePairingCreateSecretContextVMa);
    *((_BYTE *)a3 + *(int *)(v9 + sub_100189B20(*(void *)(v0 + 16), *(void *)(v0 + 24)) = v8;
  }

  else
  {
    unint64_t v10 = sub_100187014();
    uint64_t v11 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v10, 0LL, 0LL);
    *(_DWORD *)uint64_t v12 = 1;
    *(void *)(v12 + 8) = 0xD000000000000016LL;
    *(void *)(v12 + swift_weakDestroy(v0 + 16) = 0x8000000100504210LL;
    swift_willThrow(v11);

    sub_1001A4BC8(a2, _s22GuestModeUnlockPairingV32HandlePairingCreateSecretContextVMa);
    swift_bridgeObjectRelease(*a3);
  }

uint64_t sub_1003FDCF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for SDAuthenticationCommonOperationInput(0LL);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = &v36[-v11];
  __chkstk_darwin(v10);
  id v14 = &v36[-v13];
  id v15 = (int *)_s22GuestModeUnlockPairingV4FlowVMa(0LL);
  *(void *)(a3 + v15[6]) = _swiftEmptyArrayStorage;
  *(void *)(a3 + v15[7]) = _swiftEmptyArrayStorage;
  sub_10019A6C4(a1, a3 + v15[5]);
  sub_1001A4B84(a2, a3, type metadata accessor for SDAuthenticationCommonOperationInput);
  if (qword_100644330 != -1) {
    swift_once(&qword_100644330, sub_1003FC56C);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v16, (uint64_t)qword_1006540F0);
  sub_1001A4B84(a2, (uint64_t)v14, type metadata accessor for SDAuthenticationCommonOperationInput);
  sub_1001A4B84(a2, (uint64_t)v12, type metadata accessor for SDAuthenticationCommonOperationInput);
  uint64_t v17 = sub_1001A4B84(a2, (uint64_t)v9, type metadata accessor for SDAuthenticationCommonOperationInput);
  BOOL v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter();
  int v20 = v19;
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    uint64_t v39 = (void *)a1;
    uint64_t v22 = v21;
    uint64_t v38 = swift_slowAlloc(96LL, -1LL);
    uint64_t v41 = v38;
    *(_DWORD *)uint64_t v22 = 136315650;
    int v37 = v20;
    uint64_t v23 = type metadata accessor for UUID(0LL);
    unint64_t v24 = sub_1003044A4();
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
    unint64_t v27 = v26;
    uint64_t v40 = sub_10018CDB4(v25, v26, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease(v27);
    sub_1001A4BC8((uint64_t)v14, type metadata accessor for SDAuthenticationCommonOperationInput);
    *(_WORD *)(v22 + 12) = 2080;
    unint64_t v28 = sub_10034F010(*(void *)&v12[*(int *)(v6 + 28)]);
    unint64_t v30 = v29;
    uint64_t v40 = sub_10018CDB4(v28, v29, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease(v30);
    sub_1001A4BC8((uint64_t)v12, type metadata accessor for SDAuthenticationCommonOperationInput);
    *(_WORD *)(v22 + 22) = 2080;
    else {
      uint64_t v31 = 1801678668LL;
    }
    else {
      unint64_t v32 = 0xE400000000000000LL;
    }
    uint64_t v40 = sub_10018CDB4(v31, v32, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v22 + 24, v22 + 32);
    swift_bridgeObjectRelease(v32);
    sub_1001A4BC8((uint64_t)v9, type metadata accessor for SDAuthenticationCommonOperationInput);
    _os_log_impl( (void *)&_mh_execute_header,  v18,  (os_log_type_t)v37,  "Begin SDAuthenticationPairingFlow %s with %s role %s",  (uint8_t *)v22,  0x20u);
    uint64_t v33 = v38;
    swift_arrayDestroy(v38, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);

    sub_1001A4BC8(a2, type metadata accessor for SDAuthenticationCommonOperationInput);
    uint64_t v34 = v39;
  }

  else
  {

    sub_1001A4BC8((uint64_t)v9, type metadata accessor for SDAuthenticationCommonOperationInput);
    sub_1001A4BC8((uint64_t)v12, type metadata accessor for SDAuthenticationCommonOperationInput);
    sub_1001A4BC8((uint64_t)v14, type metadata accessor for SDAuthenticationCommonOperationInput);
    sub_1001A4BC8(a2, type metadata accessor for SDAuthenticationCommonOperationInput);
    uint64_t v34 = (void *)a1;
  }

  return sub_10018709C(v34);
}

void sub_1003FE0B0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v158 = a2;
  uint64_t v159 = a1;
  uint64_t v147 = a3;
  uint64_t v131 = _s22GuestModeUnlockPairingV25HandleConfirmationContextVMa(0LL);
  __chkstk_darwin(v131);
  uint64_t v135 = (const char **)((char *)&v130 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v4 = sub_100183098(&qword_100654328);
  __chkstk_darwin(v4);
  uint64_t v137 = (char *)&v130 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t RecordContextVMa = _s22GuestModeUnlockPairingV32HandlePairingCreateRecordContextVMa(0LL);
  __chkstk_darwin(RecordContextVMa);
  uint64_t v140 = (const char **)((char *)&v130 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = sub_100183098(&qword_100654330);
  __chkstk_darwin(v7);
  uint64_t v144 = (char *)&v130 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t SecretContextVMa = _s22GuestModeUnlockPairingV32HandlePairingCreateSecretContextVMa(0LL);
  uint64_t v139 = *(void *)(SecretContextVMa - 8);
  uint64_t v9 = __chkstk_darwin(SecretContextVMa);
  uint64_t v134 = (uint64_t)&v130 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v133 = (uint64_t)&v130 - v12;
  __chkstk_darwin(v11);
  uint64_t v143 = (const char **)((char *)&v130 - v13);
  uint64_t v14 = sub_100183098(&qword_100654338);
  __chkstk_darwin(v14);
  uint64_t v156 = (char *)&v130 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v145 = _s22GuestModeUnlockPairingV28HandlePairingResponseContextVMa(0LL);
  uint64_t v142 = *(void *)(v145 - 8);
  uint64_t v16 = __chkstk_darwin(v145);
  uint64_t v138 = (uint64_t)&v130 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v136 = (uint64_t)&v130 - v19;
  __chkstk_darwin(v18);
  char v155 = (const char **)((char *)&v130 - v20);
  uint64_t v21 = sub_100183098(&qword_100654340);
  __chkstk_darwin(v21);
  uint64_t v154 = (char *)&v130 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = _s22GuestModeUnlockPairingV18InitialLockContextVMa(0LL);
  uint64_t v152 = *(void *)(v23 - 8);
  uint64_t v153 = v23;
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v151 = (char *)&v130 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  uint64_t v150 = (char *)&v130 - v26;
  uint64_t v148 = _s22GuestModeUnlockPairingV27HandlePairingRequestContextVMa(0LL);
  uint64_t v146 = *(void *)(v148 - 8);
  uint64_t v27 = __chkstk_darwin(v148);
  unint64_t v29 = (char *)&v130 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = __chkstk_darwin(v27);
  unint64_t v32 = (char *)&v130 - v31;
  __chkstk_darwin(v30);
  uint64_t v34 = (const char **)((char *)&v130 - v33);
  uint64_t v35 = sub_100183098(&qword_100654348);
  __chkstk_darwin(v35);
  int v37 = (char *)&v130 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = _s22GuestModeUnlockPairingV17InitialKeyContextVMa(0LL);
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = __chkstk_darwin(v38);
  unint64_t v42 = (char *)&v130 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v40);
  unint64_t v44 = (char *)&v130 - v43;
  sub_10019A6C4(v159, (uint64_t)v160);
  uint64_t v45 = sub_100183098(&qword_1006500D0);
  uint64_t v46 = sub_100183168(0LL, &qword_100654350, off_1005C8858);
  uint64_t v157 = v45;
  if (swift_dynamicCast(&v161, v160, v45, v46, 6LL))
  {
    uint64_t v47 = (uint64_t)v42;
    uint64_t v48 = v161;
    sub_10019A6C4(v158, (uint64_t)v160);
    uint64_t v49 = sub_100183098(&qword_100645A28);
    int v50 = swift_dynamicCast(v37, v160, v49, v38, 6LL);
    uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56);
    if (v50)
    {
      v51(v37, 0LL, 1LL, v38);
      sub_1001A4B40((uint64_t)v37, (uint64_t)v44, _s22GuestModeUnlockPairingV17InitialKeyContextVMa);
      sub_1001A4B84((uint64_t)v44, v47, _s22GuestModeUnlockPairingV17InitialKeyContextVMa);
      id v52 = v48;
      uint64_t v53 = v149;
      sub_1003FC6DC(v52, v47, v34);
      if (!v53)
      {
        uint64_t v101 = v147;
        v147[3] = v148;
        v101[4] = &off_1005E0998;
        unsigned int v102 = sub_1001A4B04(v101);
        sub_1001A4B40((uint64_t)v34, (uint64_t)v102, _s22GuestModeUnlockPairingV27HandlePairingRequestContextVMa);

        sub_1001A4BC8((uint64_t)v44, _s22GuestModeUnlockPairingV17InitialKeyContextVMa);
        return;
      }

      uint64_t v54 = _s22GuestModeUnlockPairingV17InitialKeyContextVMa;
      uint64_t v55 = (uint64_t)v44;
      goto LABEL_28;
    }

    v51(v37, 1LL, 1LL, v38);
    sub_100187100((uint64_t)v37, &qword_100654348);
    unint64_t v73 = sub_100187014();
    uint64_t v74 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v73, 0LL, 0LL);
    *(_DWORD *)uint64_t v75 = 10;
    unint64_t v76 = 0xD000000000000046LL;
    __int128 v77 = "Invalid previous context as InitialKeyContext, message may be replayed";
LABEL_10:
    *(void *)(v75 + 8) = v76;
    *(void *)(v75 + swift_weakDestroy(v0 + 16) = (unint64_t)(v77 - 32) | 0x8000000000000000LL;
    swift_willThrow(v74);

    return;
  }

  uint64_t v57 = v152;
  uint64_t v56 = v153;
  uint64_t v58 = (uint64_t)v151;
  uint64_t v130 = v29;
  uint64_t v59 = (uint64_t)v150;
  uint64_t v60 = (uint64_t)v32;
  uint64_t v61 = (uint64_t)v154;
  uint64_t v62 = v155;
  uint64_t v63 = (uint64_t)v156;
  uint64_t v64 = v158;
  sub_10019A6C4(v159, (uint64_t)v160);
  uint64_t v65 = sub_100183168(0LL, &qword_100651648, off_1005C8860);
  if (!swift_dynamicCast(&v161, v160, v157, v65, 6LL))
  {
    sub_10019A6C4(v159, (uint64_t)v160);
    uint64_t v78 = sub_100183168(0LL, &qword_100651650, off_1005C8848);
    if (swift_dynamicCast(&v161, v160, v157, v78, 6LL))
    {
      uint64_t v48 = v161;
      sub_10019A6C4(v64, (uint64_t)v160);
      uint64_t v79 = sub_100183098(&qword_100645A28);
      uint64_t v80 = v148;
      int v81 = swift_dynamicCast(v63, v160, v79, v148, 6LL);
      unint64_t v82 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v146 + 56);
      if (v81)
      {
        v82(v63, 0LL, 1LL, v80);
        sub_1001A4B40(v63, v60, _s22GuestModeUnlockPairingV27HandlePairingRequestContextVMa);
        uint64_t v83 = (uint64_t)v130;
        sub_1001A4B84(v60, (uint64_t)v130, _s22GuestModeUnlockPairingV27HandlePairingRequestContextVMa);
        id v52 = v48;
        uint64_t v84 = v143;
        uint64_t v85 = v149;
        sub_1003FD074(v52, v83, v143);
        if (!v85)
        {
          uint64_t v120 = v147;
          v147[3] = SecretContextVMa;
          v120[4] = &off_1005E09C8;
          uint64_t v121 = sub_1001A4B04(v120);
          sub_1001A4B40((uint64_t)v84, (uint64_t)v121, _s22GuestModeUnlockPairingV32HandlePairingCreateSecretContextVMa);

          sub_1001A4BC8(v60, _s22GuestModeUnlockPairingV27HandlePairingRequestContextVMa);
          return;
        }

        uint64_t v54 = _s22GuestModeUnlockPairingV27HandlePairingRequestContextVMa;
        uint64_t v55 = v60;
        goto LABEL_28;
      }

      v82(v63, 1LL, 1LL, v80);
      sub_100187100(v63, &qword_100654338);
      unint64_t v103 = sub_100187014();
      uint64_t v74 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v103, 0LL, 0LL);
      *(_DWORD *)uint64_t v75 = 10;
      unint64_t v76 = 0xD000000000000050LL;
      __int128 v77 = "Invalid previous context as HandlePairingRequestContext, message may be replayed";
      goto LABEL_10;
    }

    sub_10019A6C4(v159, (uint64_t)v160);
    uint64_t v91 = sub_100183168(0LL, &qword_100651658, off_1005C8840);
    if (swift_dynamicCast(&v161, v160, v157, v91, 6LL))
    {
      uint64_t v66 = v161;
      sub_10019A6C4(v64, (uint64_t)v160);
      uint64_t v92 = sub_100183098(&qword_100645A28);
      uint64_t v94 = (uint64_t)v144;
      uint64_t v93 = v145;
      int v95 = swift_dynamicCast(v144, v160, v92, v145, 6LL);
      uint64_t v96 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v142 + 56);
      if (!v95)
      {
        v96(v94, 1LL, 1LL, v93);
        sub_100187100(v94, &qword_100654330);
        unint64_t v116 = sub_100187014();
        uint64_t v87 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v116, 0LL, 0LL);
        *(_DWORD *)uint64_t v88 = 10;
        unint64_t v89 = 0xD000000000000051LL;
        uint64_t v90 = "Invalid previous context as HandlePairingResponseContext, message may be replayed";
        goto LABEL_16;
      }

      v96(v94, 0LL, 1LL, v93);
      uint64_t v97 = v136;
      sub_1001A4B40(v94, v136, _s22GuestModeUnlockPairingV28HandlePairingResponseContextVMa);
      uint64_t v98 = v138;
      sub_1001A4B84(v97, v138, _s22GuestModeUnlockPairingV28HandlePairingResponseContextVMa);
      id v52 = v66;
      int v99 = v140;
      uint64_t v100 = v149;
      sub_1003FD5F0(v52, v98, v140);
      if (v100)
      {
        uint64_t v54 = _s22GuestModeUnlockPairingV28HandlePairingResponseContextVMa;
LABEL_27:
        uint64_t v55 = v97;
LABEL_28:
        sub_1001A4BC8(v55, v54);

        return;
      }

      unint64_t v125 = v147;
      v147[3] = RecordContextVMa;
      v125[4] = &off_1005E09E0;
      uint64_t v126 = sub_1001A4B04(v125);
      sub_1001A4B40((uint64_t)v99, (uint64_t)v126, _s22GuestModeUnlockPairingV32HandlePairingCreateRecordContextVMa);

      unsigned int v127 = _s22GuestModeUnlockPairingV28HandlePairingResponseContextVMa;
    }

    else
    {
      sub_10019A6C4(v159, (uint64_t)v160);
      uint64_t v104 = sub_100183168(0LL, &qword_100645A20, off_1005C8838);
      if (!swift_dynamicCast(&v161, v160, v157, v104, 6LL))
      {
        unint64_t v117 = sub_100187014();
        uint64_t v118 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v117, 0LL, 0LL);
        *(_DWORD *)uint64_t v119 = 10;
        *(void *)(v119 + 8) = 0xD00000000000003ALL;
        *(void *)(v119 + swift_weakDestroy(v0 + 16) = 0x800000010050EF90LL;
        swift_willThrow(v118);
        return;
      }

      uint64_t v105 = v161;
      sub_10019A6C4(v64, (uint64_t)v160);
      uint64_t v106 = sub_100183098(&qword_100645A28);
      uint64_t v107 = (uint64_t)v137;
      uint64_t v108 = SecretContextVMa;
      int v109 = swift_dynamicCast(v137, v160, v106, SecretContextVMa, 6LL);
      uint64_t v110 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v139 + 56);
      if (!v109)
      {
        v110(v107, 1LL, 1LL, v108);
        sub_100187100(v107, &qword_100654328);
        unint64_t v122 = sub_100187014();
        uint64_t v123 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v122, 0LL, 0LL);
        *(_DWORD *)uint64_t v124 = 10;
        *(void *)(v124 + 8) = 0xD000000000000055LL;
        *(void *)(v124 + swift_weakDestroy(v0 + 16) = 0x800000010050C720LL;
        swift_willThrow(v123);

        return;
      }

      v110(v107, 0LL, 1LL, v108);
      uint64_t v97 = v133;
      sub_1001A4B40(v107, v133, _s22GuestModeUnlockPairingV32HandlePairingCreateSecretContextVMa);
      uint64_t v111 = v134;
      sub_1001A4B84(v97, v134, _s22GuestModeUnlockPairingV32HandlePairingCreateSecretContextVMa);
      id v52 = v105;
      unint64_t v112 = v135;
      uint64_t v113 = v149;
      sub_1003FDB5C(v52, v111, v135);
      if (v113)
      {
        uint64_t v54 = _s22GuestModeUnlockPairingV32HandlePairingCreateSecretContextVMa;
        goto LABEL_27;
      }

      uint64_t v128 = v147;
      v147[3] = v131;
      v128[4] = &off_1005E09F8;
      uint64_t v129 = sub_1001A4B04(v128);
      sub_1001A4B40((uint64_t)v112, (uint64_t)v129, _s22GuestModeUnlockPairingV25HandleConfirmationContextVMa);

      unsigned int v127 = _s22GuestModeUnlockPairingV32HandlePairingCreateSecretContextVMa;
    }

    sub_1001A4BC8(v97, v127);
    return;
  }

  uint64_t v66 = v161;
  sub_10019A6C4(v64, (uint64_t)v160);
  uint64_t v67 = sub_100183098(&qword_100645A28);
  int v68 = swift_dynamicCast(v61, v160, v67, v56, 6LL);
  uint64_t v69 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 56);
  if (!v68)
  {
    v69(v61, 1LL, 1LL, v56);
    sub_100187100(v61, &qword_100654340);
    unint64_t v86 = sub_100187014();
    uint64_t v87 = swift_allocError(&type metadata for SFAuthenticationErrorMessage, v86, 0LL, 0LL);
    *(_DWORD *)uint64_t v88 = 10;
    unint64_t v89 = 0xD000000000000047LL;
    uint64_t v90 = "Invalid previous context as InitialLockContext, message may be replayed";
LABEL_16:
    *(void *)(v88 + 8) = v89;
    *(void *)(v88 + swift_weakDestroy(v0 + 16) = (unint64_t)(v90 - 32) | 0x8000000000000000LL;
    swift_willThrow(v87);

    return;
  }

  v69(v61, 0LL, 1LL, v56);
  sub_1001A4B40(v61, v59, _s22GuestModeUnlockPairingV18InitialLockContextVMa);
  uint64_t v70 = v58;
  sub_1001A4B84(v59, v58, _s22GuestModeUnlockPairingV18InitialLockContextVMa);
  id v71 = v66;
  uint64_t v72 = v149;
  sub_1003FCBA0(v71, v70, v62);
  if (v72)
  {
    sub_1001A4BC8(v59, _s22GuestModeUnlockPairingV18InitialLockContextVMa);
  }

  else
  {
    os_log_type_t v114 = v147;
    v147[3] = v145;
    v114[4] = &off_1005E09B0;
    uint64_t v115 = sub_1001A4B04(v114);
    sub_1001A4B40((uint64_t)v62, (uint64_t)v115, _s22GuestModeUnlockPairingV28HandlePairingResponseContextVMa);

    sub_1001A4BC8(v59, _s22GuestModeUnlockPairingV18InitialLockContextVMa);
  }

void sub_1003FEE1C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
}

uint64_t _s22GuestModeUnlockPairingV4FlowVMa(uint64_t a1)
{
  return sub_1001A4AD0(a1, qword_100654160, (uint64_t)&_s22GuestModeUnlockPairingV4FlowVMn);
}

uint64_t sub_1003FEE44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003FEE50);
}

uint64_t sub_1003FEE50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SDAuthenticationCommonOperationInput(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 24);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_1003FEED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003FEEDC);
}

uint64_t sub_1003FEEDC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for SDAuthenticationCommonOperationInput(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  return result;
}

uint64_t sub_1003FEF58(uint64_t a1)
{
  uint64_t result = type metadata accessor for SDAuthenticationCommonOperationInput(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "(";
    void v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

const char *sub_1003FEFD8(const char **a1, const char **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = &v4[(v3 + 16LL) & ~(unint64_t)v3];
    swift_retain();
  }

  else
  {
    uint64_t v7 = (const char *)a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date(0LL);
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48);
    __n128 v14 = swift_bridgeObjectRetain(v4);
    uint64_t v87 = a2;
    if (v13(v10, 1LL, v11, v14))
    {
      uint64_t v15 = sub_100183098(&qword_1006457E8);
      memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
    }

    uint64_t v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
    uint64_t v17 = v16[5];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v17], 1LL, v11))
    {
      uint64_t v20 = sub_100183098(&qword_1006457E8);
      memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v18, v19, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v18, 0LL, 1LL, v11);
    }

    uint64_t v21 = v16[6];
    uint64_t v22 = &v9[v21];
    uint64_t v23 = &v10[v21];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v21], 1LL, v11))
    {
      uint64_t v24 = sub_100183098(&qword_1006457E8);
      memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v22, v23, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v22, 0LL, 1LL, v11);
    }

    uint64_t v25 = v16[7];
    uint64_t v26 = &v9[v25];
    uint64_t v27 = &v10[v25];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v25], 1LL, v11))
    {
      uint64_t v28 = sub_100183098(&qword_1006457E8);
      memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v26, v27, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v26, 0LL, 1LL, v11);
    }

    uint64_t v29 = v16[8];
    uint64_t v30 = &v9[v29];
    uint64_t v31 = &v10[v29];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v29], 1LL, v11))
    {
      uint64_t v32 = sub_100183098(&qword_1006457E8);
      memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v30, v31, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v30, 0LL, 1LL, v11);
    }

    uint64_t v33 = v16[9];
    uint64_t v34 = &v9[v33];
    uint64_t v35 = &v10[v33];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v33], 1LL, v11))
    {
      uint64_t v36 = sub_100183098(&qword_1006457E8);
      memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v34, v35, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v34, 0LL, 1LL, v11);
    }

    uint64_t v37 = v16[10];
    uint64_t v38 = &v9[v37];
    uint64_t v39 = &v10[v37];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v37], 1LL, v11))
    {
      uint64_t v40 = sub_100183098(&qword_1006457E8);
      memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v38, v39, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v38, 0LL, 1LL, v11);
    }

    uint64_t v41 = v16[11];
    unint64_t v42 = &v9[v41];
    uint64_t v43 = &v10[v41];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v41], 1LL, v11))
    {
      uint64_t v44 = sub_100183098(&qword_1006457E8);
      memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v42, v43, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v42, 0LL, 1LL, v11);
    }

    uint64_t v45 = v16[12];
    uint64_t v46 = &v9[v45];
    uint64_t v47 = &v10[v45];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v45], 1LL, v11))
    {
      uint64_t v48 = sub_100183098(&qword_1006457E8);
      memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v46, v47, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v46, 0LL, 1LL, v11);
    }

    v9[v16[13]] = v10[v16[13]];
    uint64_t v49 = v16[14];
    int v50 = &v9[v49];
    uint64_t v51 = &v10[v49];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v49], 1LL, v11))
    {
      uint64_t v52 = sub_100183098(&qword_1006457E8);
      memcpy(v50, v51, *(void *)(*(void *)(v52 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v50, v51, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v50, 0LL, 1LL, v11);
    }

    uint64_t v53 = v16[15];
    uint64_t v54 = &v9[v53];
    uint64_t v55 = &v10[v53];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v53], 1LL, v11))
    {
      uint64_t v56 = sub_100183098(&qword_1006457E8);
      memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v54, v55, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v54, 0LL, 1LL, v11);
    }

    uint64_t v57 = v16[16];
    uint64_t v58 = &v9[v57];
    uint64_t v59 = &v10[v57];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v57], 1LL, v11))
    {
      uint64_t v60 = sub_100183098(&qword_1006457E8);
      memcpy(v58, v59, *(void *)(*(void *)(v60 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v58, v59, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v58, 0LL, 1LL, v11);
    }

    uint64_t v61 = v16[17];
    uint64_t v62 = &v9[v61];
    uint64_t v63 = &v10[v61];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v61], 1LL, v11))
    {
      uint64_t v64 = sub_100183098(&qword_1006457E8);
      memcpy(v62, v63, *(void *)(*(void *)(v64 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v62, v63, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v62, 0LL, 1LL, v11);
    }

    uint64_t v65 = v16[18];
    uint64_t v66 = &v9[v65];
    uint64_t v67 = &v10[v65];
    *(_DWORD *)uint64_t v66 = *(_DWORD *)v67;
    v66[4] = v67[4];
    v9[v16[19]] = v10[v16[19]];
    uint64_t v68 = v16[20];
    uint64_t v69 = &v9[v68];
    uint64_t v70 = &v10[v68];
    id v71 = (const char *)*((void *)v70 + 1);
    *(void *)uint64_t v69 = *(void *)v70;
    *((void *)v69 + 1) = v71;
    uint64_t v72 = v16[21];
    unint64_t v73 = &v9[v72];
    uint64_t v74 = &v10[v72];
    uint64_t v75 = (const char *)*((void *)v74 + 1);
    *(void *)unint64_t v73 = *(void *)v74;
    *((void *)v73 + 1) = v75;
    uint64_t v76 = a3[6];
    __int128 v77 = (char *)&v7[v76];
    uint64_t v78 = (uint64_t *)((char *)v87 + v76);
    unint64_t v79 = *(unint64_t *)((char *)v87 + v76 + 8);
    *(void *)&double v80 = swift_bridgeObjectRetain(v71).n128_u64[0];
    swift_bridgeObjectRetain(v75, v80);
    if (v79 >> 60 == 15)
    {
      *(_OWORD *)__int128 v77 = *(_OWORD *)v78;
    }

    else
    {
      uint64_t v81 = *v78;
      sub_10019BA8C(*v78, v79);
      *(void *)__int128 v77 = v81;
      *((void *)v77 + 1) = v79;
    }

    uint64_t v82 = a3[7];
    uint64_t v83 = a3[8];
    uint64_t v84 = *(void **)((char *)v87 + v82);
    *(void *)&v7[v82] = v84;
    v7[v83] = *((_BYTE *)v87 + v83);
    id v85 = v84;
  }

  return v7;
}

void sub_1003FF6F4(const char **a1, int *a2)
{
  uint64_t v4 = (char *)a1 + a2[5];
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v9 = &v4[v8[5]];
  if (!v7(v9, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  uint64_t v10 = &v4[v8[6]];
  if (!v7(v10, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  }
  uint64_t v11 = &v4[v8[7]];
  if (!v7(v11, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  }
  uint64_t v12 = &v4[v8[8]];
  if (!v7(v12, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  }
  uint64_t v13 = &v4[v8[9]];
  if (!v7(v13, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v13, v5);
  }
  __n128 v14 = &v4[v8[10]];
  if (!v7(v14, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v14, v5);
  }
  uint64_t v15 = &v4[v8[11]];
  if (!v7(v15, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  }
  uint64_t v16 = &v4[v8[12]];
  if (!v7(v16, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v16, v5);
  }
  uint64_t v17 = &v4[v8[14]];
  if (!v7(v17, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v17, v5);
  }
  uint64_t v18 = &v4[v8[15]];
  if (!v7(v18, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v18, v5);
  }
  uint64_t v19 = &v4[v8[16]];
  if (!v7(v19, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v19, v5);
  }
  uint64_t v20 = &v4[v8[17]];
  if (!v7(v20, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v20, v5);
  }
  *(void *)&double v21 = swift_bridgeObjectRelease((const char *)*(void *)&v4[v8[20] + 8]).n128_u64[0];
  swift_bridgeObjectRelease(*(const char **)&v4[v8[21] + 8], v21);
  uint64_t v22 = (uint64_t *)((char *)a1 + a2[6]);
  unint64_t v23 = v22[1];
  if (v23 >> 60 != 15) {
    sub_100189B20(*v22, v23);
  }
}

const char **sub_1003FF9D8(const char **a1, const char **a2, int *a3)
{
  uint64_t v5 = *a2;
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v10 + 48);
  __n128 v12 = swift_bridgeObjectRetain(v5);
  if (v11(v8, 1LL, v9, v12))
  {
    uint64_t v13 = sub_100183098(&qword_1006457E8);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  __n128 v14 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v15 = v14[5];
  uint64_t v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v15], 1LL, v9))
  {
    uint64_t v18 = sub_100183098(&qword_1006457E8);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v16, v17, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0LL, 1LL, v9);
  }

  uint64_t v19 = v14[6];
  uint64_t v20 = &v7[v19];
  double v21 = &v8[v19];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v19], 1LL, v9))
  {
    uint64_t v22 = sub_100183098(&qword_1006457E8);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v20, v21, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v20, 0LL, 1LL, v9);
  }

  uint64_t v23 = v14[7];
  uint64_t v24 = &v7[v23];
  uint64_t v25 = &v8[v23];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v23], 1LL, v9))
  {
    uint64_t v26 = sub_100183098(&qword_1006457E8);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v24, v25, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v24, 0LL, 1LL, v9);
  }

  uint64_t v27 = v14[8];
  uint64_t v28 = &v7[v27];
  uint64_t v29 = &v8[v27];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v27], 1LL, v9))
  {
    uint64_t v30 = sub_100183098(&qword_1006457E8);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v28, v29, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v28, 0LL, 1LL, v9);
  }

  uint64_t v31 = v14[9];
  uint64_t v32 = &v7[v31];
  uint64_t v33 = &v8[v31];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v31], 1LL, v9))
  {
    uint64_t v34 = sub_100183098(&qword_1006457E8);
    memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v32, v33, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v32, 0LL, 1LL, v9);
  }

  uint64_t v35 = v14[10];
  uint64_t v36 = &v7[v35];
  uint64_t v37 = &v8[v35];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v35], 1LL, v9))
  {
    uint64_t v38 = sub_100183098(&qword_1006457E8);
    memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v36, v37, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v36, 0LL, 1LL, v9);
  }

  uint64_t v39 = v14[11];
  uint64_t v40 = &v7[v39];
  uint64_t v41 = &v8[v39];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v39], 1LL, v9))
  {
    uint64_t v42 = sub_100183098(&qword_1006457E8);
    memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v40, v41, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v40, 0LL, 1LL, v9);
  }

  uint64_t v43 = v14[12];
  uint64_t v44 = &v7[v43];
  uint64_t v45 = &v8[v43];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v43], 1LL, v9))
  {
    uint64_t v46 = sub_100183098(&qword_1006457E8);
    memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v44, v45, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v44, 0LL, 1LL, v9);
  }

  v7[v14[13]] = v8[v14[13]];
  uint64_t v47 = v14[14];
  uint64_t v48 = &v7[v47];
  uint64_t v49 = &v8[v47];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v47], 1LL, v9))
  {
    uint64_t v50 = sub_100183098(&qword_1006457E8);
    memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v48, v49, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v48, 0LL, 1LL, v9);
  }

  uint64_t v51 = v14[15];
  uint64_t v52 = &v7[v51];
  uint64_t v53 = &v8[v51];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v51], 1LL, v9))
  {
    uint64_t v54 = sub_100183098(&qword_1006457E8);
    memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v52, v53, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v52, 0LL, 1LL, v9);
  }

  uint64_t v55 = v14[16];
  uint64_t v56 = &v7[v55];
  uint64_t v57 = &v8[v55];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v55], 1LL, v9))
  {
    uint64_t v58 = sub_100183098(&qword_1006457E8);
    memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v56, v57, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v56, 0LL, 1LL, v9);
  }

  uint64_t v59 = v14[17];
  uint64_t v60 = &v7[v59];
  uint64_t v61 = &v8[v59];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v59], 1LL, v9))
  {
    uint64_t v62 = sub_100183098(&qword_1006457E8);
    memcpy(v60, v61, *(void *)(*(void *)(v62 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v60, v61, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v60, 0LL, 1LL, v9);
  }

  uint64_t v63 = v14[18];
  uint64_t v64 = &v7[v63];
  uint64_t v65 = &v8[v63];
  *(_DWORD *)uint64_t v64 = *(_DWORD *)v65;
  v64[4] = v65[4];
  v7[v14[19]] = v8[v14[19]];
  uint64_t v66 = v14[20];
  uint64_t v67 = &v7[v66];
  uint64_t v68 = &v8[v66];
  uint64_t v69 = (const char *)*((void *)v68 + 1);
  *(void *)uint64_t v67 = *(void *)v68;
  *((void *)v67 + 1) = v69;
  uint64_t v70 = v14[21];
  id v71 = &v7[v70];
  uint64_t v72 = &v8[v70];
  unint64_t v73 = (const char *)*((void *)v72 + 1);
  *(void *)id v71 = *(void *)v72;
  *((void *)v71 + 1) = v73;
  uint64_t v74 = a3[6];
  uint64_t v75 = (char *)a1 + v74;
  uint64_t v76 = (uint64_t *)((char *)a2 + v74);
  unint64_t v77 = *(unint64_t *)((char *)a2 + v74 + 8);
  *(void *)&double v78 = swift_bridgeObjectRetain(v69).n128_u64[0];
  swift_bridgeObjectRetain(v73, v78);
  if (v77 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v75 = *(_OWORD *)v76;
  }

  else
  {
    uint64_t v79 = *v76;
    sub_10019BA8C(*v76, v77);
    *(void *)uint64_t v75 = v79;
    *((void *)v75 + 1) = v77;
  }

  uint64_t v80 = a3[7];
  uint64_t v81 = a3[8];
  uint64_t v82 = *(char **)((char *)a2 + v80);
  *(const char **)((char *)a1 + v80) = v82;
  *((_BYTE *)a1 + v81) = *((_BYTE *)a2 + v81);
  uint64_t v83 = v82;
  return a1;
}

const char **sub_1004000C8(const char **a1, const char **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  *(void *)&double v8 = swift_bridgeObjectRetain(v6).n128_u64[0];
  swift_bridgeObjectRelease(v7, v8);
  uint64_t v121 = a3;
  uint64_t v123 = a2;
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __n128 v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14(v11, 1LL, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    uint64_t v17 = sub_100183098(&qword_1006457E8);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  uint64_t v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v19 = v18[5];
  uint64_t v20 = &v10[v19];
  double v21 = &v11[v19];
  int v22 = v14(&v10[v19], 1LL, v12);
  int v23 = v14(v21, 1LL, v12);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v20, v21, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v20, 0LL, 1LL, v12);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
LABEL_12:
    uint64_t v24 = sub_100183098(&qword_1006457E8);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v20, v21, v12);
LABEL_13:
  uint64_t v25 = v18[6];
  uint64_t v26 = &v10[v25];
  uint64_t v27 = &v11[v25];
  int v28 = v14(&v10[v25], 1LL, v12);
  int v29 = v14(v27, 1LL, v12);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v26, v27, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v26, 0LL, 1LL, v12);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v26, v12);
LABEL_18:
    uint64_t v30 = sub_100183098(&qword_1006457E8);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v26, v27, v12);
LABEL_19:
  uint64_t v31 = v18[7];
  uint64_t v32 = &v10[v31];
  uint64_t v33 = &v11[v31];
  int v34 = v14(&v10[v31], 1LL, v12);
  int v35 = v14(v33, 1LL, v12);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v32, v33, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v32, 0LL, 1LL, v12);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v32, v12);
LABEL_24:
    uint64_t v36 = sub_100183098(&qword_1006457E8);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v32, v33, v12);
LABEL_25:
  uint64_t v37 = v18[8];
  uint64_t v38 = &v10[v37];
  uint64_t v39 = &v11[v37];
  int v40 = v14(&v10[v37], 1LL, v12);
  int v41 = v14(v39, 1LL, v12);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v38, v39, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v38, 0LL, 1LL, v12);
      goto LABEL_31;
    }

    goto LABEL_30;
  }

  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v38, v12);
LABEL_30:
    uint64_t v42 = sub_100183098(&qword_1006457E8);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64LL));
    goto LABEL_31;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v38, v39, v12);
LABEL_31:
  uint64_t v43 = v18[9];
  uint64_t v44 = &v10[v43];
  uint64_t v45 = &v11[v43];
  int v46 = v14(&v10[v43], 1LL, v12);
  int v47 = v14(v45, 1LL, v12);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v44, v45, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v44, 0LL, 1LL, v12);
      goto LABEL_37;
    }

    goto LABEL_36;
  }

  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v44, v12);
LABEL_36:
    uint64_t v48 = sub_100183098(&qword_1006457E8);
    memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64LL));
    goto LABEL_37;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v44, v45, v12);
LABEL_37:
  uint64_t v49 = v18[10];
  uint64_t v50 = &v10[v49];
  uint64_t v51 = &v11[v49];
  int v52 = v14(&v10[v49], 1LL, v12);
  int v53 = v14(v51, 1LL, v12);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v50, v51, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v50, 0LL, 1LL, v12);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v50, v12);
LABEL_42:
    uint64_t v54 = sub_100183098(&qword_1006457E8);
    memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64LL));
    goto LABEL_43;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v50, v51, v12);
LABEL_43:
  uint64_t v55 = v18[11];
  uint64_t v56 = &v10[v55];
  uint64_t v57 = &v11[v55];
  int v58 = v14(&v10[v55], 1LL, v12);
  int v59 = v14(v57, 1LL, v12);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v56, v57, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v56, 0LL, 1LL, v12);
      goto LABEL_49;
    }

    goto LABEL_48;
  }

  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v56, v12);
LABEL_48:
    uint64_t v60 = sub_100183098(&qword_1006457E8);
    memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64LL));
    goto LABEL_49;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v56, v57, v12);
LABEL_49:
  uint64_t v61 = v18[12];
  uint64_t v62 = &v10[v61];
  uint64_t v63 = &v11[v61];
  int v64 = v14(&v10[v61], 1LL, v12);
  int v65 = v14(v63, 1LL, v12);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v62, v63, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v62, 0LL, 1LL, v12);
      goto LABEL_55;
    }

    goto LABEL_54;
  }

  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v62, v12);
LABEL_54:
    uint64_t v66 = sub_100183098(&qword_1006457E8);
    memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64LL));
    goto LABEL_55;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v62, v63, v12);
LABEL_55:
  v10[v18[13]] = v11[v18[13]];
  uint64_t v67 = v18[14];
  uint64_t v68 = &v10[v67];
  uint64_t v69 = &v11[v67];
  int v70 = v14(&v10[v67], 1LL, v12);
  int v71 = v14(v69, 1LL, v12);
  if (v70)
  {
    if (!v71)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v68, v69, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v68, 0LL, 1LL, v12);
      goto LABEL_61;
    }

    goto LABEL_60;
  }

  if (v71)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v68, v12);
LABEL_60:
    uint64_t v72 = sub_100183098(&qword_1006457E8);
    memcpy(v68, v69, *(void *)(*(void *)(v72 - 8) + 64LL));
    goto LABEL_61;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v68, v69, v12);
LABEL_61:
  uint64_t v73 = v18[15];
  uint64_t v74 = &v10[v73];
  uint64_t v75 = &v11[v73];
  int v76 = v14(&v10[v73], 1LL, v12);
  int v77 = v14(v75, 1LL, v12);
  if (v76)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v74, v75, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v74, 0LL, 1LL, v12);
      goto LABEL_67;
    }

    goto LABEL_66;
  }

  if (v77)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v74, v12);
LABEL_66:
    uint64_t v78 = sub_100183098(&qword_1006457E8);
    memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64LL));
    goto LABEL_67;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v74, v75, v12);
LABEL_67:
  uint64_t v79 = v18[16];
  uint64_t v80 = &v10[v79];
  uint64_t v81 = &v11[v79];
  int v82 = v14(&v10[v79], 1LL, v12);
  int v83 = v14(v81, 1LL, v12);
  if (v82)
  {
    if (!v83)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v80, v81, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v80, 0LL, 1LL, v12);
      goto LABEL_73;
    }

    goto LABEL_72;
  }

  if (v83)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v80, v12);
LABEL_72:
    uint64_t v84 = sub_100183098(&qword_1006457E8);
    memcpy(v80, v81, *(void *)(*(void *)(v84 - 8) + 64LL));
    goto LABEL_73;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v80, v81, v12);
LABEL_73:
  uint64_t v85 = v18[17];
  unint64_t v86 = &v10[v85];
  uint64_t v87 = &v11[v85];
  int v88 = v14(&v10[v85], 1LL, v12);
  int v89 = v14(v87, 1LL, v12);
  if (v88)
  {
    if (!v89)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v86, v87, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v86, 0LL, 1LL, v12);
      goto LABEL_79;
    }

    goto LABEL_78;
  }

  if (v89)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v86, v12);
LABEL_78:
    uint64_t v90 = sub_100183098(&qword_1006457E8);
    memcpy(v86, v87, *(void *)(*(void *)(v90 - 8) + 64LL));
    goto LABEL_79;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v86, v87, v12);
LABEL_79:
  uint64_t v91 = v18[18];
  uint64_t v92 = &v10[v91];
  uint64_t v93 = &v11[v91];
  int v94 = *(_DWORD *)v93;
  v92[4] = v93[4];
  *(_DWORD *)uint64_t v92 = v94;
  v10[v18[19]] = v11[v18[19]];
  uint64_t v95 = v18[20];
  uint64_t v96 = &v10[v95];
  uint64_t v97 = &v11[v95];
  *(void *)uint64_t v96 = *(void *)v97;
  uint64_t v98 = (const char *)*((void *)v97 + 1);
  int v99 = (const char *)*((void *)v96 + 1);
  *((void *)v96 + 1) = v98;
  *(void *)&double v100 = swift_bridgeObjectRetain(v98, v121, v123).n128_u64[0];
  *(void *)&double v101 = swift_bridgeObjectRelease(v99, v100).n128_u64[0];
  uint64_t v102 = v18[21];
  unint64_t v103 = &v10[v102];
  uint64_t v104 = &v11[v102];
  *(void *)unint64_t v103 = *(void *)v104;
  uint64_t v105 = (const char *)*((void *)v104 + 1);
  uint64_t v106 = (const char *)*((void *)v103 + 1);
  *((void *)v103 + 1) = v105;
  *(void *)&double v107 = swift_bridgeObjectRetain(v105, v101).n128_u64[0];
  swift_bridgeObjectRelease(v106, v107);
  uint64_t v108 = v122[6];
  int v109 = (uint64_t *)((char *)a1 + v108);
  uint64_t v110 = (uint64_t *)(v124 + v108);
  unint64_t v111 = *(void *)(v124 + v108 + 8);
  if (*(unint64_t *)((char *)a1 + v108 + 8) >> 60 != 15)
  {
    if (v111 >> 60 != 15)
    {
      uint64_t v113 = *v110;
      sub_10019BA8C(*v110, v111);
      uint64_t v114 = *v109;
      unint64_t v115 = v109[1];
      uint64_t *v109 = v113;
      v109[1] = v111;
      sub_100189B20(v114, v115);
      goto LABEL_86;
    }

    sub_10019DC8C((uint64_t)v109);
    goto LABEL_84;
  }

  if (v111 >> 60 == 15)
  {
LABEL_84:
    *(_OWORD *)int v109 = *(_OWORD *)v110;
    goto LABEL_86;
  }

  uint64_t v112 = *v110;
  sub_10019BA8C(*v110, v111);
  uint64_t *v109 = v112;
  v109[1] = v111;
LABEL_86:
  uint64_t v116 = v122[7];
  unint64_t v117 = *(void **)((char *)a1 + v116);
  uint64_t v118 = *(char **)(v124 + v116);
  *(const char **)((char *)a1 + v1swift_weakDestroy(v0 + 16) = v118;
  uint64_t v119 = v118;

  *((_BYTE *)a1 + v122[8]) = *(_BYTE *)(v124 + v122[8]);
  return a1;
}

const char **sub_100400BAC(const char **a1, const char **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v114 = a3;
  uint64_t v116 = a2;
  uint64_t v7 = *(int *)(a3 + 20);
  double v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100183098(&qword_1006457E8);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  int v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v17 = v16[5];
  uint64_t v18 = &v8[v17];
  uint64_t v19 = &v9[v17];
  int v20 = v12(&v8[v17], 1LL, v10);
  int v21 = v12(v19, 1LL, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v19, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v18, 0LL, 1LL, v10);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_12:
    uint64_t v22 = sub_100183098(&qword_1006457E8);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v18, v19, v10);
LABEL_13:
  uint64_t v23 = v16[6];
  uint64_t v24 = &v8[v23];
  uint64_t v25 = &v9[v23];
  int v26 = v12(&v8[v23], 1LL, v10);
  int v27 = v12(v25, 1LL, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v24, v25, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v24, 0LL, 1LL, v10);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
LABEL_18:
    uint64_t v28 = sub_100183098(&qword_1006457E8);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v24, v25, v10);
LABEL_19:
  uint64_t v29 = v16[7];
  uint64_t v30 = &v8[v29];
  uint64_t v31 = &v9[v29];
  int v32 = v12(&v8[v29], 1LL, v10);
  int v33 = v12(v31, 1LL, v10);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v30, v31, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v30, 0LL, 1LL, v10);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
LABEL_24:
    uint64_t v34 = sub_100183098(&qword_1006457E8);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v30, v31, v10);
LABEL_25:
  uint64_t v35 = v16[8];
  uint64_t v36 = &v8[v35];
  uint64_t v37 = &v9[v35];
  int v38 = v12(&v8[v35], 1LL, v10);
  int v39 = v12(v37, 1LL, v10);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v36, v37, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v36, 0LL, 1LL, v10);
      goto LABEL_31;
    }

    goto LABEL_30;
  }

  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
LABEL_30:
    uint64_t v40 = sub_100183098(&qword_1006457E8);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64LL));
    goto LABEL_31;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v36, v37, v10);
LABEL_31:
  uint64_t v41 = v16[9];
  uint64_t v42 = &v8[v41];
  uint64_t v43 = &v9[v41];
  int v44 = v12(&v8[v41], 1LL, v10);
  int v45 = v12(v43, 1LL, v10);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v42, v43, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v42, 0LL, 1LL, v10);
      goto LABEL_37;
    }

    goto LABEL_36;
  }

  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
LABEL_36:
    uint64_t v46 = sub_100183098(&qword_1006457E8);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64LL));
    goto LABEL_37;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v42, v43, v10);
LABEL_37:
  uint64_t v47 = v16[10];
  uint64_t v48 = &v8[v47];
  uint64_t v49 = &v9[v47];
  int v50 = v12(&v8[v47], 1LL, v10);
  int v51 = v12(v49, 1LL, v10);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v48, v49, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v48, 0LL, 1LL, v10);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
LABEL_42:
    uint64_t v52 = sub_100183098(&qword_1006457E8);
    memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64LL));
    goto LABEL_43;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v48, v49, v10);
LABEL_43:
  uint64_t v53 = v16[11];
  uint64_t v54 = &v8[v53];
  uint64_t v55 = &v9[v53];
  int v56 = v12(&v8[v53], 1LL, v10);
  int v57 = v12(v55, 1LL, v10);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v54, v55, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v54, 0LL, 1LL, v10);
      goto LABEL_49;
    }

    goto LABEL_48;
  }

  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v10);
LABEL_48:
    uint64_t v58 = sub_100183098(&qword_1006457E8);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64LL));
    goto LABEL_49;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v54, v55, v10);
LABEL_49:
  uint64_t v59 = v16[12];
  uint64_t v60 = &v8[v59];
  uint64_t v61 = &v9[v59];
  int v62 = v12(&v8[v59], 1LL, v10);
  int v63 = v12(v61, 1LL, v10);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v60, v61, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v60, 0LL, 1LL, v10);
      goto LABEL_55;
    }

    goto LABEL_54;
  }

  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v60, v10);
LABEL_54:
    uint64_t v64 = sub_100183098(&qword_1006457E8);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64LL));
    goto LABEL_55;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v60, v61, v10);
LABEL_55:
  v8[v16[13]] = v9[v16[13]];
  uint64_t v65 = v16[14];
  uint64_t v66 = &v8[v65];
  uint64_t v67 = &v9[v65];
  int v68 = v12(&v8[v65], 1LL, v10);
  int v69 = v12(v67, 1LL, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v66, v67, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v66, 0LL, 1LL, v10);
      goto LABEL_61;
    }

    goto LABEL_60;
  }

  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v10);
LABEL_60:
    uint64_t v70 = sub_100183098(&qword_1006457E8);
    memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64LL));
    goto LABEL_61;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v66, v67, v10);
LABEL_61:
  uint64_t v71 = v16[15];
  uint64_t v72 = &v8[v71];
  uint64_t v73 = &v9[v71];
  int v74 = v12(&v8[v71], 1LL, v10);
  int v75 = v12(v73, 1LL, v10);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v72, v73, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v72, 0LL, 1LL, v10);
      goto LABEL_67;
    }

    goto LABEL_66;
  }

  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
LABEL_66:
    uint64_t v76 = sub_100183098(&qword_1006457E8);
    memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64LL));
    goto LABEL_67;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v72, v73, v10);
LABEL_67:
  uint64_t v77 = v16[16];
  uint64_t v78 = &v8[v77];
  uint64_t v79 = &v9[v77];
  int v80 = v12(&v8[v77], 1LL, v10);
  int v81 = v12(v79, 1LL, v10);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v78, v79, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v78, 0LL, 1LL, v10);
      goto LABEL_73;
    }

    goto LABEL_72;
  }

  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_72:
    uint64_t v82 = sub_100183098(&qword_1006457E8);
    memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64LL));
    goto LABEL_73;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v78, v79, v10);
LABEL_73:
  uint64_t v83 = v16[17];
  uint64_t v84 = &v8[v83];
  uint64_t v85 = &v9[v83];
  int v86 = v12(&v8[v83], 1LL, v10);
  int v87 = v12(v85, 1LL, v10);
  if (v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v84, v85, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v84, 0LL, 1LL, v10);
      goto LABEL_79;
    }

    goto LABEL_78;
  }

  if (v87)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v84, v10);
LABEL_78:
    uint64_t v88 = sub_100183098(&qword_1006457E8);
    memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64LL));
    goto LABEL_79;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v84, v85, v10);
LABEL_79:
  uint64_t v89 = v16[18];
  uint64_t v90 = &v8[v89];
  uint64_t v91 = &v9[v89];
  *(_DWORD *)uint64_t v90 = *(_DWORD *)v91;
  v90[4] = v91[4];
  v8[v16[19]] = v9[v16[19]];
  uint64_t v92 = v16[20];
  uint64_t v93 = &v8[v92];
  int v94 = &v9[v92];
  uint64_t v96 = *(void *)v94;
  uint64_t v95 = *((void *)v94 + 1);
  uint64_t v97 = (const char *)*((void *)v93 + 1);
  *(void *)uint64_t v93 = v96;
  *((void *)v93 + 1) = v95;
  *(void *)&double v98 = swift_bridgeObjectRelease(v97, v114, v116).n128_u64[0];
  uint64_t v99 = v16[21];
  double v100 = &v8[v99];
  double v101 = &v9[v99];
  uint64_t v103 = *(void *)v101;
  uint64_t v102 = *((void *)v101 + 1);
  uint64_t v104 = (const char *)*((void *)v100 + 1);
  *(void *)double v100 = v103;
  *((void *)v100 + 1) = v102;
  swift_bridgeObjectRelease(v104, v98);
  uint64_t v105 = v115[6];
  uint64_t v106 = (uint64_t *)((char *)a1 + v105);
  double v107 = (uint64_t *)(v117 + v105);
  unint64_t v108 = *(unint64_t *)((char *)a1 + v105 + 8);
  if (v108 >> 60 != 15)
  {
    unint64_t v109 = v107[1];
    if (v109 >> 60 != 15)
    {
      uint64_t v110 = *v106;
      uint64_t *v106 = *v107;
      v106[1] = v109;
      sub_100189B20(v110, v108);
      goto LABEL_84;
    }

    sub_10019DC8C((uint64_t)v106);
  }

  *(_OWORD *)uint64_t v106 = *(_OWORD *)v107;
LABEL_84:
  uint64_t v111 = v115[7];
  uint64_t v112 = *(void **)((char *)a1 + v111);
  *(const char **)((char *)a1 + v111) = *(const char **)(v117 + v111);

  *((_BYTE *)a1 + v115[8]) = *(_BYTE *)(v117 + v115[8]);
  return a1;
}

uint64_t sub_100401634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100401640);
}

uint64_t sub_100401644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100401650);
}

uint64_t _s22GuestModeUnlockPairingV18InitialLockContextVMa(uint64_t a1)
{
  return sub_1001A4AD0(a1, qword_1006541F8, (uint64_t)&_s22GuestModeUnlockPairingV18InitialLockContextVMn);
}

uint64_t sub_100401668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100407528(a1, a2, a3, (uint64_t)&unk_1004DACB8);
}

uint64_t sub_100401674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100401680);
}

uint64_t sub_100401684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100401690);
}

uint64_t _s22GuestModeUnlockPairingV17InitialKeyContextVMa(uint64_t a1)
{
  return sub_1001A4AD0(a1, qword_100654298, (uint64_t)&_s22GuestModeUnlockPairingV17InitialKeyContextVMn);
}

uint64_t sub_1004016A8(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for SDAuthenticationSessionMetrics(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = &unk_1004DACD0;
    v4[3] = &unk_1004DACE8;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t _s22GuestModeUnlockPairingV25HandleConfirmationContextVMa(uint64_t a1)
{
  return sub_1001A4AD0(a1, qword_100654638, (uint64_t)&_s22GuestModeUnlockPairingV25HandleConfirmationContextVMn);
}

uint64_t _s22GuestModeUnlockPairingV32HandlePairingCreateRecordContextVMa(uint64_t a1)
{
  return sub_1001A4AD0(a1, qword_1006544F8, (uint64_t)&_s22GuestModeUnlockPairingV32HandlePairingCreateRecordContextVMn);
}

uint64_t _s22GuestModeUnlockPairingV32HandlePairingCreateSecretContextVMa(uint64_t a1)
{
  return sub_1001A4AD0(a1, qword_100654598, (uint64_t)&_s22GuestModeUnlockPairingV32HandlePairingCreateSecretContextVMn);
}

uint64_t _s22GuestModeUnlockPairingV28HandlePairingResponseContextVMa(uint64_t a1)
{
  return sub_1001A4AD0(a1, qword_100654450, (uint64_t)&_s22GuestModeUnlockPairingV28HandlePairingResponseContextVMn);
}

uint64_t _s22GuestModeUnlockPairingV27HandlePairingRequestContextVMa(uint64_t a1)
{
  return sub_1001A4AD0(a1, qword_1006543B0, (uint64_t)&_s22GuestModeUnlockPairingV27HandlePairingRequestContextVMn);
}

uint64_t sub_100401798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004017A4);
}

uint64_t sub_1004017A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004017B4);
}

uint64_t sub_1004017B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100407528(a1, a2, a3, (uint64_t)&unk_1004DAE30);
}

const char *sub_1004017C4(const char **a1, const char **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = &v4[(v3 + 16LL) & ~(unint64_t)v3];
    swift_retain();
  }

  else
  {
    uint64_t v7 = (const char *)a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date(0LL);
    uint64_t v12 = *(void *)(v11 - 8);
    int v13 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48);
    __n128 v14 = swift_bridgeObjectRetain(v4);
    uint64_t v97 = a2;
    if (v13(v10, 1LL, v11, v14))
    {
      uint64_t v15 = sub_100183098(&qword_1006457E8);
      memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
    }

    int v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
    uint64_t v17 = v16[5];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v17], 1LL, v11))
    {
      uint64_t v20 = sub_100183098(&qword_1006457E8);
      memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v18, v19, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v18, 0LL, 1LL, v11);
    }

    uint64_t v21 = v16[6];
    uint64_t v22 = &v9[v21];
    uint64_t v23 = &v10[v21];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v21], 1LL, v11))
    {
      uint64_t v24 = sub_100183098(&qword_1006457E8);
      memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v22, v23, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v22, 0LL, 1LL, v11);
    }

    uint64_t v25 = v16[7];
    int v26 = &v9[v25];
    int v27 = &v10[v25];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v25], 1LL, v11))
    {
      uint64_t v28 = sub_100183098(&qword_1006457E8);
      memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v26, v27, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v26, 0LL, 1LL, v11);
    }

    uint64_t v29 = v16[8];
    uint64_t v30 = &v9[v29];
    uint64_t v31 = &v10[v29];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v29], 1LL, v11))
    {
      uint64_t v32 = sub_100183098(&qword_1006457E8);
      memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v30, v31, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v30, 0LL, 1LL, v11);
    }

    uint64_t v33 = v16[9];
    uint64_t v34 = &v9[v33];
    uint64_t v35 = &v10[v33];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v33], 1LL, v11))
    {
      uint64_t v36 = sub_100183098(&qword_1006457E8);
      memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v34, v35, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v34, 0LL, 1LL, v11);
    }

    uint64_t v37 = v16[10];
    int v38 = &v9[v37];
    int v39 = &v10[v37];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v37], 1LL, v11))
    {
      uint64_t v40 = sub_100183098(&qword_1006457E8);
      memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v38, v39, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v38, 0LL, 1LL, v11);
    }

    uint64_t v41 = v16[11];
    uint64_t v42 = &v9[v41];
    uint64_t v43 = &v10[v41];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v41], 1LL, v11))
    {
      uint64_t v44 = sub_100183098(&qword_1006457E8);
      memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v42, v43, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v42, 0LL, 1LL, v11);
    }

    uint64_t v45 = v16[12];
    uint64_t v46 = &v9[v45];
    uint64_t v47 = &v10[v45];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v45], 1LL, v11))
    {
      uint64_t v48 = sub_100183098(&qword_1006457E8);
      memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v46, v47, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v46, 0LL, 1LL, v11);
    }

    v9[v16[13]] = v10[v16[13]];
    uint64_t v49 = v16[14];
    int v50 = &v9[v49];
    int v51 = &v10[v49];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v49], 1LL, v11))
    {
      uint64_t v52 = sub_100183098(&qword_1006457E8);
      memcpy(v50, v51, *(void *)(*(void *)(v52 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v50, v51, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v50, 0LL, 1LL, v11);
    }

    uint64_t v53 = v16[15];
    uint64_t v54 = &v9[v53];
    uint64_t v55 = &v10[v53];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v53], 1LL, v11))
    {
      uint64_t v56 = sub_100183098(&qword_1006457E8);
      memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v54, v55, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v54, 0LL, 1LL, v11);
    }

    uint64_t v57 = v16[16];
    uint64_t v58 = &v9[v57];
    uint64_t v59 = &v10[v57];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v57], 1LL, v11))
    {
      uint64_t v60 = sub_100183098(&qword_1006457E8);
      memcpy(v58, v59, *(void *)(*(void *)(v60 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v58, v59, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v58, 0LL, 1LL, v11);
    }

    uint64_t v61 = v16[17];
    int v62 = &v9[v61];
    int v63 = &v10[v61];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v61], 1LL, v11))
    {
      uint64_t v64 = sub_100183098(&qword_1006457E8);
      memcpy(v62, v63, *(void *)(*(void *)(v64 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v62, v63, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v62, 0LL, 1LL, v11);
    }

    uint64_t v65 = v16[18];
    uint64_t v66 = &v9[v65];
    uint64_t v67 = &v10[v65];
    *(_DWORD *)uint64_t v66 = *(_DWORD *)v67;
    v66[4] = v67[4];
    v9[v16[19]] = v10[v16[19]];
    uint64_t v68 = v16[20];
    int v69 = &v9[v68];
    uint64_t v70 = &v10[v68];
    uint64_t v71 = (const char *)*((void *)v70 + 1);
    *(void *)int v69 = *(void *)v70;
    *((void *)v69 + 1) = v71;
    uint64_t v72 = v16[21];
    uint64_t v73 = &v9[v72];
    int v74 = &v10[v72];
    int v75 = (const char *)*((void *)v74 + 1);
    *(void *)uint64_t v73 = *(void *)v74;
    *((void *)v73 + 1) = v75;
    uint64_t v76 = a3[6];
    uint64_t v77 = (char *)&v7[v76];
    uint64_t v78 = (uint64_t *)((char *)v97 + v76);
    unint64_t v79 = *(unint64_t *)((char *)v97 + v76 + 8);
    *(void *)&double v80 = swift_bridgeObjectRetain(v71).n128_u64[0];
    swift_bridgeObjectRetain(v75, v80);
    if (v79 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v77 = *(_OWORD *)v78;
    }

    else
    {
      uint64_t v81 = *v78;
      sub_10019BA8C(*v78, v79);
      *(void *)uint64_t v77 = v81;
      *((void *)v77 + 1) = v79;
    }

    uint64_t v82 = a3[7];
    uint64_t v83 = (uint64_t *)&v7[v82];
    uint64_t v84 = (uint64_t *)((char *)v97 + v82);
    uint64_t v85 = *v84;
    unint64_t v86 = v84[1];
    sub_10019BA8C(*v84, v86);
    *uint64_t v83 = v85;
    v83[1] = v86;
    uint64_t v87 = a3[8];
    uint64_t v88 = (uint64_t *)&v7[v87];
    uint64_t v89 = (uint64_t *)((char *)v97 + v87);
    uint64_t v90 = *v89;
    unint64_t v91 = v89[1];
    sub_10019BA8C(*v89, v91);
    uint64_t *v88 = v90;
    v88[1] = v91;
    uint64_t v92 = a3[9];
    uint64_t v93 = a3[10];
    int v94 = *(void **)((char *)v97 + v92);
    *(void *)&v7[v92] = v94;
    v7[v93] = *((_BYTE *)v97 + v93);
    id v95 = v94;
  }

  return v7;
}

void sub_100401F20(const char **a1, int *a2)
{
  uint64_t v4 = (char *)a1 + a2[5];
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v9 = &v4[v8[5]];
  if (!v7(v9, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  uint64_t v10 = &v4[v8[6]];
  if (!v7(v10, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  }
  uint64_t v11 = &v4[v8[7]];
  if (!v7(v11, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  }
  uint64_t v12 = &v4[v8[8]];
  if (!v7(v12, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  }
  int v13 = &v4[v8[9]];
  if (!v7(v13, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v13, v5);
  }
  __n128 v14 = &v4[v8[10]];
  if (!v7(v14, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v14, v5);
  }
  uint64_t v15 = &v4[v8[11]];
  if (!v7(v15, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  }
  int v16 = &v4[v8[12]];
  if (!v7(v16, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v16, v5);
  }
  uint64_t v17 = &v4[v8[14]];
  if (!v7(v17, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v17, v5);
  }
  uint64_t v18 = &v4[v8[15]];
  if (!v7(v18, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v18, v5);
  }
  uint64_t v19 = &v4[v8[16]];
  if (!v7(v19, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v19, v5);
  }
  uint64_t v20 = &v4[v8[17]];
  if (!v7(v20, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v20, v5);
  }
  *(void *)&double v21 = swift_bridgeObjectRelease((const char *)*(void *)&v4[v8[20] + 8]).n128_u64[0];
  swift_bridgeObjectRelease(*(const char **)&v4[v8[21] + 8], v21);
  uint64_t v22 = (uint64_t *)((char *)a1 + a2[6]);
  unint64_t v23 = v22[1];
  if (v23 >> 60 != 15) {
    sub_100189B20(*v22, v23);
  }
  sub_100189B20(*(uint64_t *)((char *)a1 + a2[7]), *(unint64_t *)((char *)a1 + a2[7] + 8));
  sub_100189B20(*(uint64_t *)((char *)a1 + a2[8]), *(unint64_t *)((char *)a1 + a2[8] + 8));
}

const char **sub_100402224(const char **a1, const char **a2, int *a3)
{
  uint64_t v5 = *a2;
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v10 + 48);
  __n128 v12 = swift_bridgeObjectRetain(v5);
  if (v11(v8, 1LL, v9, v12))
  {
    uint64_t v13 = sub_100183098(&qword_1006457E8);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  __n128 v14 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v15 = v14[5];
  int v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v15], 1LL, v9))
  {
    uint64_t v18 = sub_100183098(&qword_1006457E8);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v16, v17, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0LL, 1LL, v9);
  }

  uint64_t v19 = v14[6];
  uint64_t v20 = &v7[v19];
  double v21 = &v8[v19];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v19], 1LL, v9))
  {
    uint64_t v22 = sub_100183098(&qword_1006457E8);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v20, v21, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v20, 0LL, 1LL, v9);
  }

  uint64_t v23 = v14[7];
  uint64_t v24 = &v7[v23];
  uint64_t v25 = &v8[v23];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v23], 1LL, v9))
  {
    uint64_t v26 = sub_100183098(&qword_1006457E8);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v24, v25, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v24, 0LL, 1LL, v9);
  }

  uint64_t v27 = v14[8];
  uint64_t v28 = &v7[v27];
  uint64_t v29 = &v8[v27];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v27], 1LL, v9))
  {
    uint64_t v30 = sub_100183098(&qword_1006457E8);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v28, v29, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v28, 0LL, 1LL, v9);
  }

  uint64_t v31 = v14[9];
  uint64_t v32 = &v7[v31];
  uint64_t v33 = &v8[v31];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v31], 1LL, v9))
  {
    uint64_t v34 = sub_100183098(&qword_1006457E8);
    memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v32, v33, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v32, 0LL, 1LL, v9);
  }

  uint64_t v35 = v14[10];
  uint64_t v36 = &v7[v35];
  uint64_t v37 = &v8[v35];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v35], 1LL, v9))
  {
    uint64_t v38 = sub_100183098(&qword_1006457E8);
    memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v36, v37, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v36, 0LL, 1LL, v9);
  }

  uint64_t v39 = v14[11];
  uint64_t v40 = &v7[v39];
  uint64_t v41 = &v8[v39];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v39], 1LL, v9))
  {
    uint64_t v42 = sub_100183098(&qword_1006457E8);
    memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v40, v41, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v40, 0LL, 1LL, v9);
  }

  uint64_t v43 = v14[12];
  uint64_t v44 = &v7[v43];
  uint64_t v45 = &v8[v43];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v43], 1LL, v9))
  {
    uint64_t v46 = sub_100183098(&qword_1006457E8);
    memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v44, v45, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v44, 0LL, 1LL, v9);
  }

  v7[v14[13]] = v8[v14[13]];
  uint64_t v47 = v14[14];
  uint64_t v48 = &v7[v47];
  uint64_t v49 = &v8[v47];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v47], 1LL, v9))
  {
    uint64_t v50 = sub_100183098(&qword_1006457E8);
    memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v48, v49, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v48, 0LL, 1LL, v9);
  }

  uint64_t v51 = v14[15];
  uint64_t v52 = &v7[v51];
  uint64_t v53 = &v8[v51];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v51], 1LL, v9))
  {
    uint64_t v54 = sub_100183098(&qword_1006457E8);
    memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v52, v53, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v52, 0LL, 1LL, v9);
  }

  uint64_t v55 = v14[16];
  uint64_t v56 = &v7[v55];
  uint64_t v57 = &v8[v55];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v55], 1LL, v9))
  {
    uint64_t v58 = sub_100183098(&qword_1006457E8);
    memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v56, v57, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v56, 0LL, 1LL, v9);
  }

  uint64_t v59 = v14[17];
  uint64_t v60 = &v7[v59];
  uint64_t v61 = &v8[v59];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v59], 1LL, v9))
  {
    uint64_t v62 = sub_100183098(&qword_1006457E8);
    memcpy(v60, v61, *(void *)(*(void *)(v62 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v60, v61, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v60, 0LL, 1LL, v9);
  }

  uint64_t v63 = v14[18];
  uint64_t v64 = &v7[v63];
  uint64_t v65 = &v8[v63];
  *(_DWORD *)uint64_t v64 = *(_DWORD *)v65;
  v64[4] = v65[4];
  v7[v14[19]] = v8[v14[19]];
  uint64_t v66 = v14[20];
  uint64_t v67 = &v7[v66];
  uint64_t v68 = &v8[v66];
  int v69 = (const char *)*((void *)v68 + 1);
  *(void *)uint64_t v67 = *(void *)v68;
  *((void *)v67 + 1) = v69;
  uint64_t v70 = v14[21];
  uint64_t v71 = &v7[v70];
  uint64_t v72 = &v8[v70];
  uint64_t v73 = (const char *)*((void *)v72 + 1);
  *(void *)uint64_t v71 = *(void *)v72;
  *((void *)v71 + 1) = v73;
  uint64_t v74 = a3[6];
  int v75 = (char *)a1 + v74;
  uint64_t v76 = (uint64_t *)((char *)a2 + v74);
  unint64_t v77 = *(unint64_t *)((char *)a2 + v74 + 8);
  *(void *)&double v78 = swift_bridgeObjectRetain(v69).n128_u64[0];
  swift_bridgeObjectRetain(v73, v78);
  if (v77 >> 60 == 15)
  {
    *(_OWORD *)int v75 = *(_OWORD *)v76;
  }

  else
  {
    uint64_t v79 = *v76;
    sub_10019BA8C(*v76, v77);
    *(void *)int v75 = v79;
    *((void *)v75 + 1) = v77;
  }

  uint64_t v80 = a3[7];
  uint64_t v81 = (uint64_t *)((char *)a1 + v80);
  uint64_t v82 = (uint64_t *)((char *)a2 + v80);
  uint64_t v83 = *v82;
  unint64_t v84 = v82[1];
  sub_10019BA8C(*v82, v84);
  uint64_t *v81 = v83;
  v81[1] = v84;
  uint64_t v85 = a3[8];
  unint64_t v86 = (uint64_t *)((char *)a1 + v85);
  uint64_t v87 = (uint64_t *)((char *)a2 + v85);
  uint64_t v88 = *v87;
  unint64_t v89 = v87[1];
  sub_10019BA8C(*v87, v89);
  *unint64_t v86 = v88;
  v86[1] = v89;
  uint64_t v90 = a3[9];
  uint64_t v91 = a3[10];
  uint64_t v92 = *(char **)((char *)a2 + v90);
  *(const char **)((char *)a1 + v90) = v92;
  *((_BYTE *)a1 + v91) = *((_BYTE *)a2 + v91);
  uint64_t v93 = v92;
  return a1;
}

const char **sub_100402954(const char **a1, const char **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  *(void *)&double v8 = swift_bridgeObjectRetain(v6).n128_u64[0];
  swift_bridgeObjectRelease(v7, v8);
  uint64_t v135 = a3;
  uint64_t v137 = a2;
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __n128 v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14(v11, 1LL, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    uint64_t v17 = sub_100183098(&qword_1006457E8);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  uint64_t v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v19 = v18[5];
  uint64_t v20 = &v10[v19];
  double v21 = &v11[v19];
  int v22 = v14(&v10[v19], 1LL, v12);
  int v23 = v14(v21, 1LL, v12);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v20, v21, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v20, 0LL, 1LL, v12);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
LABEL_12:
    uint64_t v24 = sub_100183098(&qword_1006457E8);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v20, v21, v12);
LABEL_13:
  uint64_t v25 = v18[6];
  uint64_t v26 = &v10[v25];
  uint64_t v27 = &v11[v25];
  int v28 = v14(&v10[v25], 1LL, v12);
  int v29 = v14(v27, 1LL, v12);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v26, v27, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v26, 0LL, 1LL, v12);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v26, v12);
LABEL_18:
    uint64_t v30 = sub_100183098(&qword_1006457E8);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v26, v27, v12);
LABEL_19:
  uint64_t v31 = v18[7];
  uint64_t v32 = &v10[v31];
  uint64_t v33 = &v11[v31];
  int v34 = v14(&v10[v31], 1LL, v12);
  int v35 = v14(v33, 1LL, v12);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v32, v33, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v32, 0LL, 1LL, v12);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v32, v12);
LABEL_24:
    uint64_t v36 = sub_100183098(&qword_1006457E8);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v32, v33, v12);
LABEL_25:
  uint64_t v37 = v18[8];
  uint64_t v38 = &v10[v37];
  uint64_t v39 = &v11[v37];
  int v40 = v14(&v10[v37], 1LL, v12);
  int v41 = v14(v39, 1LL, v12);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v38, v39, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v38, 0LL, 1LL, v12);
      goto LABEL_31;
    }

    goto LABEL_30;
  }

  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v38, v12);
LABEL_30:
    uint64_t v42 = sub_100183098(&qword_1006457E8);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64LL));
    goto LABEL_31;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v38, v39, v12);
LABEL_31:
  uint64_t v43 = v18[9];
  uint64_t v44 = &v10[v43];
  uint64_t v45 = &v11[v43];
  int v46 = v14(&v10[v43], 1LL, v12);
  int v47 = v14(v45, 1LL, v12);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v44, v45, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v44, 0LL, 1LL, v12);
      goto LABEL_37;
    }

    goto LABEL_36;
  }

  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v44, v12);
LABEL_36:
    uint64_t v48 = sub_100183098(&qword_1006457E8);
    memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64LL));
    goto LABEL_37;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v44, v45, v12);
LABEL_37:
  uint64_t v49 = v18[10];
  uint64_t v50 = &v10[v49];
  uint64_t v51 = &v11[v49];
  int v52 = v14(&v10[v49], 1LL, v12);
  int v53 = v14(v51, 1LL, v12);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v50, v51, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v50, 0LL, 1LL, v12);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v50, v12);
LABEL_42:
    uint64_t v54 = sub_100183098(&qword_1006457E8);
    memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64LL));
    goto LABEL_43;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v50, v51, v12);
LABEL_43:
  uint64_t v55 = v18[11];
  uint64_t v56 = &v10[v55];
  uint64_t v57 = &v11[v55];
  int v58 = v14(&v10[v55], 1LL, v12);
  int v59 = v14(v57, 1LL, v12);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v56, v57, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v56, 0LL, 1LL, v12);
      goto LABEL_49;
    }

    goto LABEL_48;
  }

  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v56, v12);
LABEL_48:
    uint64_t v60 = sub_100183098(&qword_1006457E8);
    memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64LL));
    goto LABEL_49;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v56, v57, v12);
LABEL_49:
  uint64_t v61 = v18[12];
  uint64_t v62 = &v10[v61];
  uint64_t v63 = &v11[v61];
  int v64 = v14(&v10[v61], 1LL, v12);
  int v65 = v14(v63, 1LL, v12);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v62, v63, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v62, 0LL, 1LL, v12);
      goto LABEL_55;
    }

    goto LABEL_54;
  }

  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v62, v12);
LABEL_54:
    uint64_t v66 = sub_100183098(&qword_1006457E8);
    memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64LL));
    goto LABEL_55;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v62, v63, v12);
LABEL_55:
  v10[v18[13]] = v11[v18[13]];
  uint64_t v67 = v18[14];
  uint64_t v68 = &v10[v67];
  int v69 = &v11[v67];
  int v70 = v14(&v10[v67], 1LL, v12);
  int v71 = v14(v69, 1LL, v12);
  if (v70)
  {
    if (!v71)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v68, v69, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v68, 0LL, 1LL, v12);
      goto LABEL_61;
    }

    goto LABEL_60;
  }

  if (v71)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v68, v12);
LABEL_60:
    uint64_t v72 = sub_100183098(&qword_1006457E8);
    memcpy(v68, v69, *(void *)(*(void *)(v72 - 8) + 64LL));
    goto LABEL_61;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v68, v69, v12);
LABEL_61:
  uint64_t v73 = v18[15];
  uint64_t v74 = &v10[v73];
  int v75 = &v11[v73];
  int v76 = v14(&v10[v73], 1LL, v12);
  int v77 = v14(v75, 1LL, v12);
  if (v76)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v74, v75, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v74, 0LL, 1LL, v12);
      goto LABEL_67;
    }

    goto LABEL_66;
  }

  if (v77)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v74, v12);
LABEL_66:
    uint64_t v78 = sub_100183098(&qword_1006457E8);
    memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64LL));
    goto LABEL_67;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v74, v75, v12);
LABEL_67:
  uint64_t v79 = v18[16];
  uint64_t v80 = &v10[v79];
  uint64_t v81 = &v11[v79];
  int v82 = v14(&v10[v79], 1LL, v12);
  int v83 = v14(v81, 1LL, v12);
  if (v82)
  {
    if (!v83)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v80, v81, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v80, 0LL, 1LL, v12);
      goto LABEL_73;
    }

    goto LABEL_72;
  }

  if (v83)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v80, v12);
LABEL_72:
    uint64_t v84 = sub_100183098(&qword_1006457E8);
    memcpy(v80, v81, *(void *)(*(void *)(v84 - 8) + 64LL));
    goto LABEL_73;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v80, v81, v12);
LABEL_73:
  uint64_t v85 = v18[17];
  unint64_t v86 = &v10[v85];
  uint64_t v87 = &v11[v85];
  int v88 = v14(&v10[v85], 1LL, v12);
  int v89 = v14(v87, 1LL, v12);
  if (v88)
  {
    if (!v89)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v86, v87, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v86, 0LL, 1LL, v12);
      goto LABEL_79;
    }

    goto LABEL_78;
  }

  if (v89)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v86, v12);
LABEL_78:
    uint64_t v90 = sub_100183098(&qword_1006457E8);
    memcpy(v86, v87, *(void *)(*(void *)(v90 - 8) + 64LL));
    goto LABEL_79;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v86, v87, v12);
LABEL_79:
  uint64_t v91 = v18[18];
  uint64_t v92 = &v10[v91];
  uint64_t v93 = &v11[v91];
  int v94 = *(_DWORD *)v93;
  v92[4] = v93[4];
  *(_DWORD *)uint64_t v92 = v94;
  v10[v18[19]] = v11[v18[19]];
  uint64_t v95 = v18[20];
  uint64_t v96 = &v10[v95];
  uint64_t v97 = &v11[v95];
  *(void *)uint64_t v96 = *(void *)v97;
  double v98 = (const char *)*((void *)v97 + 1);
  uint64_t v99 = (const char *)*((void *)v96 + 1);
  *((void *)v96 + 1) = v98;
  *(void *)&double v100 = swift_bridgeObjectRetain(v98, v135, v137).n128_u64[0];
  *(void *)&double v101 = swift_bridgeObjectRelease(v99, v100).n128_u64[0];
  uint64_t v102 = v18[21];
  uint64_t v103 = &v10[v102];
  uint64_t v104 = &v11[v102];
  *(void *)uint64_t v103 = *(void *)v104;
  uint64_t v105 = (const char *)*((void *)v104 + 1);
  uint64_t v106 = (const char *)*((void *)v103 + 1);
  *((void *)v103 + 1) = v105;
  *(void *)&double v107 = swift_bridgeObjectRetain(v105, v101).n128_u64[0];
  swift_bridgeObjectRelease(v106, v107);
  uint64_t v108 = v136[6];
  unint64_t v109 = (uint64_t *)((char *)a1 + v108);
  uint64_t v110 = (uint64_t *)(v138 + v108);
  unint64_t v111 = *(void *)(v138 + v108 + 8);
  if (*(unint64_t *)((char *)a1 + v108 + 8) >> 60 != 15)
  {
    if (v111 >> 60 != 15)
    {
      uint64_t v113 = *v110;
      sub_10019BA8C(*v110, v111);
      uint64_t v114 = *v109;
      unint64_t v115 = v109[1];
      uint64_t *v109 = v113;
      v109[1] = v111;
      sub_100189B20(v114, v115);
      goto LABEL_86;
    }

    sub_10019DC8C((uint64_t)v109);
    goto LABEL_84;
  }

  if (v111 >> 60 == 15)
  {
LABEL_84:
    *(_OWORD *)unint64_t v109 = *(_OWORD *)v110;
    goto LABEL_86;
  }

  uint64_t v112 = *v110;
  sub_10019BA8C(*v110, v111);
  uint64_t *v109 = v112;
  v109[1] = v111;
LABEL_86:
  uint64_t v116 = v136[7];
  uint64_t v117 = (uint64_t *)((char *)a1 + v116);
  uint64_t v118 = (uint64_t *)(v138 + v116);
  uint64_t v119 = *v118;
  unint64_t v120 = v118[1];
  sub_10019BA8C(*v118, v120);
  uint64_t v121 = *v117;
  unint64_t v122 = v117[1];
  *uint64_t v117 = v119;
  v117[1] = v120;
  sub_100189B20(v121, v122);
  uint64_t v123 = v136[8];
  uint64_t v124 = (uint64_t *)((char *)a1 + v123);
  unint64_t v125 = (uint64_t *)(v138 + v123);
  uint64_t v126 = *v125;
  unint64_t v127 = v125[1];
  sub_10019BA8C(*v125, v127);
  uint64_t v128 = *v124;
  unint64_t v129 = v124[1];
  *uint64_t v124 = v126;
  v124[1] = v127;
  sub_100189B20(v128, v129);
  uint64_t v130 = v136[9];
  uint64_t v131 = *(void **)((char *)a1 + v130);
  id v132 = *(char **)(v138 + v130);
  *(const char **)((char *)a1 + v130) = v132;
  uint64_t v133 = v132;

  *((_BYTE *)a1 + v136[10]) = *(_BYTE *)(v138 + v136[10]);
  return a1;
}

void *sub_100403488(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v5 = a3[5];
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1LL, v8))
  {
    uint64_t v11 = sub_100183098(&qword_1006457E8);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0LL, 1LL, v8);
  }

  uint64_t v12 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v13 = v12[5];
  __n128 v14 = &v6[v13];
  int v15 = &v7[v13];
  if (v10(&v7[v13], 1LL, v8))
  {
    uint64_t v16 = sub_100183098(&qword_1006457E8);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v15, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v14, 0LL, 1LL, v8);
  }

  uint64_t v17 = v12[6];
  uint64_t v18 = &v6[v17];
  uint64_t v19 = &v7[v17];
  if (v10(&v7[v17], 1LL, v8))
  {
    uint64_t v20 = sub_100183098(&qword_1006457E8);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v18, v19, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v18, 0LL, 1LL, v8);
  }

  uint64_t v21 = v12[7];
  int v22 = &v6[v21];
  int v23 = &v7[v21];
  if (v10(&v7[v21], 1LL, v8))
  {
    uint64_t v24 = sub_100183098(&qword_1006457E8);
    memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v22, v23, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v22, 0LL, 1LL, v8);
  }

  uint64_t v25 = v12[8];
  uint64_t v26 = &v6[v25];
  uint64_t v27 = &v7[v25];
  if (v10(&v7[v25], 1LL, v8))
  {
    uint64_t v28 = sub_100183098(&qword_1006457E8);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v26, v27, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v26, 0LL, 1LL, v8);
  }

  uint64_t v29 = v12[9];
  uint64_t v30 = &v6[v29];
  uint64_t v31 = &v7[v29];
  if (v10(&v7[v29], 1LL, v8))
  {
    uint64_t v32 = sub_100183098(&qword_1006457E8);
    memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v30, v31, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v30, 0LL, 1LL, v8);
  }

  uint64_t v33 = v12[10];
  int v34 = &v6[v33];
  int v35 = &v7[v33];
  if (v10(&v7[v33], 1LL, v8))
  {
    uint64_t v36 = sub_100183098(&qword_1006457E8);
    memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v34, v35, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v34, 0LL, 1LL, v8);
  }

  uint64_t v37 = v12[11];
  uint64_t v38 = &v6[v37];
  uint64_t v39 = &v7[v37];
  if (v10(&v7[v37], 1LL, v8))
  {
    uint64_t v40 = sub_100183098(&qword_1006457E8);
    memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v38, v39, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v38, 0LL, 1LL, v8);
  }

  uint64_t v41 = v12[12];
  uint64_t v42 = &v6[v41];
  uint64_t v43 = &v7[v41];
  if (v10(&v7[v41], 1LL, v8))
  {
    uint64_t v44 = sub_100183098(&qword_1006457E8);
    memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v42, v43, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v42, 0LL, 1LL, v8);
  }

  v6[v12[13]] = v7[v12[13]];
  uint64_t v45 = v12[14];
  int v46 = &v6[v45];
  int v47 = &v7[v45];
  if (v10(&v7[v45], 1LL, v8))
  {
    uint64_t v48 = sub_100183098(&qword_1006457E8);
    memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v46, v47, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v46, 0LL, 1LL, v8);
  }

  uint64_t v49 = v12[15];
  uint64_t v50 = &v6[v49];
  uint64_t v51 = &v7[v49];
  if (v10(&v7[v49], 1LL, v8))
  {
    uint64_t v52 = sub_100183098(&qword_1006457E8);
    memcpy(v50, v51, *(void *)(*(void *)(v52 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v50, v51, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v50, 0LL, 1LL, v8);
  }

  uint64_t v53 = v12[16];
  uint64_t v54 = &v6[v53];
  uint64_t v55 = &v7[v53];
  if (v10(&v7[v53], 1LL, v8))
  {
    uint64_t v56 = sub_100183098(&qword_1006457E8);
    memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v54, v55, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v54, 0LL, 1LL, v8);
  }

  uint64_t v57 = v12[17];
  int v58 = &v6[v57];
  int v59 = &v7[v57];
  if (v10(&v7[v57], 1LL, v8))
  {
    uint64_t v60 = sub_100183098(&qword_1006457E8);
    memcpy(v58, v59, *(void *)(*(void *)(v60 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v58, v59, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v58, 0LL, 1LL, v8);
  }

  uint64_t v61 = v12[18];
  uint64_t v62 = &v6[v61];
  uint64_t v63 = &v7[v61];
  *(_DWORD *)uint64_t v62 = *(_DWORD *)v63;
  v62[4] = v63[4];
  v6[v12[19]] = v7[v12[19]];
  *(_OWORD *)&v6[v12[20]] = *(_OWORD *)&v7[v12[20]];
  *(_OWORD *)&v6[v12[21]] = *(_OWORD *)&v7[v12[21]];
  uint64_t v64 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v64) = *(_OWORD *)((char *)a2 + v64);
  uint64_t v65 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v65) = *(void *)((char *)a2 + v65);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

const char **sub_100403B34(const char **a1, const char **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v120 = a3;
  unint64_t v122 = a2;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100183098(&qword_1006457E8);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v17 = v16[5];
  uint64_t v18 = &v8[v17];
  uint64_t v19 = &v9[v17];
  int v20 = v12(&v8[v17], 1LL, v10);
  int v21 = v12(v19, 1LL, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v19, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v18, 0LL, 1LL, v10);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_12:
    uint64_t v22 = sub_100183098(&qword_1006457E8);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v18, v19, v10);
LABEL_13:
  uint64_t v23 = v16[6];
  uint64_t v24 = &v8[v23];
  uint64_t v25 = &v9[v23];
  int v26 = v12(&v8[v23], 1LL, v10);
  int v27 = v12(v25, 1LL, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v24, v25, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v24, 0LL, 1LL, v10);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
LABEL_18:
    uint64_t v28 = sub_100183098(&qword_1006457E8);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v24, v25, v10);
LABEL_19:
  uint64_t v29 = v16[7];
  uint64_t v30 = &v8[v29];
  uint64_t v31 = &v9[v29];
  int v32 = v12(&v8[v29], 1LL, v10);
  int v33 = v12(v31, 1LL, v10);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v30, v31, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v30, 0LL, 1LL, v10);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
LABEL_24:
    uint64_t v34 = sub_100183098(&qword_1006457E8);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v30, v31, v10);
LABEL_25:
  uint64_t v35 = v16[8];
  uint64_t v36 = &v8[v35];
  uint64_t v37 = &v9[v35];
  int v38 = v12(&v8[v35], 1LL, v10);
  int v39 = v12(v37, 1LL, v10);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v36, v37, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v36, 0LL, 1LL, v10);
      goto LABEL_31;
    }

    goto LABEL_30;
  }

  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
LABEL_30:
    uint64_t v40 = sub_100183098(&qword_1006457E8);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64LL));
    goto LABEL_31;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v36, v37, v10);
LABEL_31:
  uint64_t v41 = v16[9];
  uint64_t v42 = &v8[v41];
  uint64_t v43 = &v9[v41];
  int v44 = v12(&v8[v41], 1LL, v10);
  int v45 = v12(v43, 1LL, v10);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v42, v43, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v42, 0LL, 1LL, v10);
      goto LABEL_37;
    }

    goto LABEL_36;
  }

  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
LABEL_36:
    uint64_t v46 = sub_100183098(&qword_1006457E8);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64LL));
    goto LABEL_37;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v42, v43, v10);
LABEL_37:
  uint64_t v47 = v16[10];
  uint64_t v48 = &v8[v47];
  uint64_t v49 = &v9[v47];
  int v50 = v12(&v8[v47], 1LL, v10);
  int v51 = v12(v49, 1LL, v10);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v48, v49, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v48, 0LL, 1LL, v10);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
LABEL_42:
    uint64_t v52 = sub_100183098(&qword_1006457E8);
    memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64LL));
    goto LABEL_43;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v48, v49, v10);
LABEL_43:
  uint64_t v53 = v16[11];
  uint64_t v54 = &v8[v53];
  uint64_t v55 = &v9[v53];
  int v56 = v12(&v8[v53], 1LL, v10);
  int v57 = v12(v55, 1LL, v10);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v54, v55, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v54, 0LL, 1LL, v10);
      goto LABEL_49;
    }

    goto LABEL_48;
  }

  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v10);
LABEL_48:
    uint64_t v58 = sub_100183098(&qword_1006457E8);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64LL));
    goto LABEL_49;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v54, v55, v10);
LABEL_49:
  uint64_t v59 = v16[12];
  uint64_t v60 = &v8[v59];
  uint64_t v61 = &v9[v59];
  int v62 = v12(&v8[v59], 1LL, v10);
  int v63 = v12(v61, 1LL, v10);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v60, v61, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v60, 0LL, 1LL, v10);
      goto LABEL_55;
    }

    goto LABEL_54;
  }

  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v60, v10);
LABEL_54:
    uint64_t v64 = sub_100183098(&qword_1006457E8);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64LL));
    goto LABEL_55;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v60, v61, v10);
LABEL_55:
  v8[v16[13]] = v9[v16[13]];
  uint64_t v65 = v16[14];
  uint64_t v66 = &v8[v65];
  uint64_t v67 = &v9[v65];
  int v68 = v12(&v8[v65], 1LL, v10);
  int v69 = v12(v67, 1LL, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v66, v67, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v66, 0LL, 1LL, v10);
      goto LABEL_61;
    }

    goto LABEL_60;
  }

  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v10);
LABEL_60:
    uint64_t v70 = sub_100183098(&qword_1006457E8);
    memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64LL));
    goto LABEL_61;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v66, v67, v10);
LABEL_61:
  uint64_t v71 = v16[15];
  uint64_t v72 = &v8[v71];
  uint64_t v73 = &v9[v71];
  int v74 = v12(&v8[v71], 1LL, v10);
  int v75 = v12(v73, 1LL, v10);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v72, v73, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v72, 0LL, 1LL, v10);
      goto LABEL_67;
    }

    goto LABEL_66;
  }

  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
LABEL_66:
    uint64_t v76 = sub_100183098(&qword_1006457E8);
    memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64LL));
    goto LABEL_67;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v72, v73, v10);
LABEL_67:
  uint64_t v77 = v16[16];
  uint64_t v78 = &v8[v77];
  uint64_t v79 = &v9[v77];
  int v80 = v12(&v8[v77], 1LL, v10);
  int v81 = v12(v79, 1LL, v10);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v78, v79, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v78, 0LL, 1LL, v10);
      goto LABEL_73;
    }

    goto LABEL_72;
  }

  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_72:
    uint64_t v82 = sub_100183098(&qword_1006457E8);
    memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64LL));
    goto LABEL_73;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v78, v79, v10);
LABEL_73:
  uint64_t v83 = v16[17];
  uint64_t v84 = &v8[v83];
  uint64_t v85 = &v9[v83];
  int v86 = v12(&v8[v83], 1LL, v10);
  int v87 = v12(v85, 1LL, v10);
  if (v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v84, v85, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v84, 0LL, 1LL, v10);
      goto LABEL_79;
    }

    goto LABEL_78;
  }

  if (v87)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v84, v10);
LABEL_78:
    uint64_t v88 = sub_100183098(&qword_1006457E8);
    memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64LL));
    goto LABEL_79;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v84, v85, v10);
LABEL_79:
  uint64_t v89 = v16[18];
  uint64_t v90 = &v8[v89];
  uint64_t v91 = &v9[v89];
  *(_DWORD *)uint64_t v90 = *(_DWORD *)v91;
  v90[4] = v91[4];
  v8[v16[19]] = v9[v16[19]];
  uint64_t v92 = v16[20];
  uint64_t v93 = &v8[v92];
  int v94 = &v9[v92];
  uint64_t v96 = *(void *)v94;
  uint64_t v95 = *((void *)v94 + 1);
  uint64_t v97 = (const char *)*((void *)v93 + 1);
  *(void *)uint64_t v93 = v96;
  *((void *)v93 + 1) = v95;
  *(void *)&double v98 = swift_bridgeObjectRelease(v97, v120, v122).n128_u64[0];
  uint64_t v99 = v16[21];
  double v100 = &v8[v99];
  double v101 = &v9[v99];
  uint64_t v103 = *(void *)v101;
  uint64_t v102 = *((void *)v101 + 1);
  uint64_t v104 = (const char *)*((void *)v100 + 1);
  *(void *)double v100 = v103;
  *((void *)v100 + 1) = v102;
  swift_bridgeObjectRelease(v104, v98);
  uint64_t v105 = v121[6];
  uint64_t v106 = (uint64_t *)((char *)a1 + v105);
  double v107 = (uint64_t *)(v123 + v105);
  unint64_t v108 = *(unint64_t *)((char *)a1 + v105 + 8);
  if (v108 >> 60 != 15)
  {
    unint64_t v109 = v107[1];
    if (v109 >> 60 != 15)
    {
      uint64_t v110 = *v106;
      uint64_t *v106 = *v107;
      v106[1] = v109;
      sub_100189B20(v110, v108);
      goto LABEL_84;
    }

    sub_10019DC8C((uint64_t)v106);
  }

  *(_OWORD *)uint64_t v106 = *(_OWORD *)v107;
LABEL_84:
  uint64_t v111 = v121[7];
  uint64_t v112 = *(uint64_t *)((char *)a1 + v111);
  unint64_t v113 = *(unint64_t *)((char *)a1 + v111 + 8);
  *(_OWORD *)((char *)a1 + v111) = *(_OWORD *)(v123 + v111);
  sub_100189B20(v112, v113);
  uint64_t v114 = v121[8];
  uint64_t v115 = *(uint64_t *)((char *)a1 + v114);
  unint64_t v116 = *(unint64_t *)((char *)a1 + v114 + 8);
  *(_OWORD *)((char *)a1 + v114) = *(_OWORD *)(v123 + v114);
  sub_100189B20(v115, v116);
  uint64_t v117 = v121[9];
  uint64_t v118 = *(void **)((char *)a1 + v117);
  *(const char **)((char *)a1 + v117) = *(const char **)(v123 + v117);

  *((_BYTE *)a1 + v121[10]) = *(_BYTE *)(v123 + v121[10]);
  return a1;
}

uint64_t sub_1004045EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004045F8);
}

uint64_t sub_1004045FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100404608);
}

uint64_t sub_10040460C(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for SDAuthenticationSessionMetrics(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = &unk_1004DACB8;
    v4[3] = &unk_1004DAE30;
    void v4[4] = &unk_1004DAE30;
    v4[5] = &unk_1004DACD0;
    v4[6] = &unk_1004DACE8;
    swift_initStructMetadata(a1, 256LL, 7LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

const char *sub_1004046AC(const char **a1, const char **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = &v4[(v3 + 16LL) & ~(unint64_t)v3];
    swift_retain();
  }

  else
  {
    uint64_t v7 = (const char *)a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date(0LL);
    uint64_t v12 = *(void *)(v11 - 8);
    int v13 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48);
    __n128 v14 = swift_bridgeObjectRetain(v4);
    uint64_t v92 = a2;
    if (v13(v10, 1LL, v11, v14))
    {
      uint64_t v15 = sub_100183098(&qword_1006457E8);
      memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
    }

    uint64_t v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
    uint64_t v17 = v16[5];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v17], 1LL, v11))
    {
      uint64_t v20 = sub_100183098(&qword_1006457E8);
      memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v18, v19, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v18, 0LL, 1LL, v11);
    }

    uint64_t v21 = v16[6];
    uint64_t v22 = &v9[v21];
    uint64_t v23 = &v10[v21];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v21], 1LL, v11))
    {
      uint64_t v24 = sub_100183098(&qword_1006457E8);
      memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v22, v23, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v22, 0LL, 1LL, v11);
    }

    uint64_t v25 = v16[7];
    int v26 = &v9[v25];
    int v27 = &v10[v25];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v25], 1LL, v11))
    {
      uint64_t v28 = sub_100183098(&qword_1006457E8);
      memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v26, v27, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v26, 0LL, 1LL, v11);
    }

    uint64_t v29 = v16[8];
    uint64_t v30 = &v9[v29];
    uint64_t v31 = &v10[v29];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v29], 1LL, v11))
    {
      uint64_t v32 = sub_100183098(&qword_1006457E8);
      memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v30, v31, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v30, 0LL, 1LL, v11);
    }

    uint64_t v33 = v16[9];
    uint64_t v34 = &v9[v33];
    uint64_t v35 = &v10[v33];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v33], 1LL, v11))
    {
      uint64_t v36 = sub_100183098(&qword_1006457E8);
      memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v34, v35, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v34, 0LL, 1LL, v11);
    }

    uint64_t v37 = v16[10];
    int v38 = &v9[v37];
    int v39 = &v10[v37];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v37], 1LL, v11))
    {
      uint64_t v40 = sub_100183098(&qword_1006457E8);
      memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v38, v39, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v38, 0LL, 1LL, v11);
    }

    uint64_t v41 = v16[11];
    uint64_t v42 = &v9[v41];
    uint64_t v43 = &v10[v41];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v41], 1LL, v11))
    {
      uint64_t v44 = sub_100183098(&qword_1006457E8);
      memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v42, v43, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v42, 0LL, 1LL, v11);
    }

    uint64_t v45 = v16[12];
    uint64_t v46 = &v9[v45];
    uint64_t v47 = &v10[v45];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v45], 1LL, v11))
    {
      uint64_t v48 = sub_100183098(&qword_1006457E8);
      memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v46, v47, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v46, 0LL, 1LL, v11);
    }

    v9[v16[13]] = v10[v16[13]];
    uint64_t v49 = v16[14];
    int v50 = &v9[v49];
    int v51 = &v10[v49];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v49], 1LL, v11))
    {
      uint64_t v52 = sub_100183098(&qword_1006457E8);
      memcpy(v50, v51, *(void *)(*(void *)(v52 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v50, v51, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v50, 0LL, 1LL, v11);
    }

    uint64_t v53 = v16[15];
    uint64_t v54 = &v9[v53];
    uint64_t v55 = &v10[v53];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v53], 1LL, v11))
    {
      uint64_t v56 = sub_100183098(&qword_1006457E8);
      memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v54, v55, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v54, 0LL, 1LL, v11);
    }

    uint64_t v57 = v16[16];
    uint64_t v58 = &v9[v57];
    uint64_t v59 = &v10[v57];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v57], 1LL, v11))
    {
      uint64_t v60 = sub_100183098(&qword_1006457E8);
      memcpy(v58, v59, *(void *)(*(void *)(v60 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v58, v59, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v58, 0LL, 1LL, v11);
    }

    uint64_t v61 = v16[17];
    int v62 = &v9[v61];
    int v63 = &v10[v61];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v13)(&v10[v61], 1LL, v11))
    {
      uint64_t v64 = sub_100183098(&qword_1006457E8);
      memcpy(v62, v63, *(void *)(*(void *)(v64 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v62, v63, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v62, 0LL, 1LL, v11);
    }

    uint64_t v65 = v16[18];
    uint64_t v66 = &v9[v65];
    uint64_t v67 = &v10[v65];
    *(_DWORD *)uint64_t v66 = *(_DWORD *)v67;
    v66[4] = v67[4];
    v9[v16[19]] = v10[v16[19]];
    uint64_t v68 = v16[20];
    int v69 = &v9[v68];
    uint64_t v70 = &v10[v68];
    uint64_t v71 = (const char *)*((void *)v70 + 1);
    *(void *)int v69 = *(void *)v70;
    *((void *)v69 + 1) = v71;
    uint64_t v72 = v16[21];
    uint64_t v73 = &v9[v72];
    int v74 = &v10[v72];
    int v75 = (const char *)*((void *)v74 + 1);
    *(void *)uint64_t v73 = *(void *)v74;
    *((void *)v73 + 1) = v75;
    uint64_t v76 = a3[6];
    uint64_t v77 = (char *)&v7[v76];
    uint64_t v78 = (uint64_t *)((char *)v92 + v76);
    unint64_t v79 = *(unint64_t *)((char *)v92 + v76 + 8);
    *(void *)&double v80 = swift_bridgeObjectRetain(v71).n128_u64[0];
    swift_bridgeObjectRetain(v75, v80);
    if (v79 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v77 = *(_OWORD *)v78;
    }

    else
    {
      uint64_t v81 = *v78;
      sub_10019BA8C(*v78, v79);
      *(void *)uint64_t v77 = v81;
      *((void *)v77 + 1) = v79;
    }

    uint64_t v82 = a3[7];
    uint64_t v83 = (uint64_t *)&v7[v82];
    uint64_t v84 = (uint64_t *)((char *)v92 + v82);
    uint64_t v85 = *v84;
    unint64_t v86 = v84[1];
    sub_10019BA8C(*v84, v86);
    *uint64_t v83 = v85;
    v83[1] = v86;
    uint64_t v87 = a3[8];
    uint64_t v88 = a3[9];
    uint64_t v89 = *(void **)((char *)v92 + v87);
    *(void *)&v7[v87] = v89;
    v7[v88] = *((_BYTE *)v92 + v88);
    id v90 = v89;
  }

  return v7;
}

void sub_100404DE8(const char **a1, int *a2)
{
  uint64_t v4 = (char *)a1 + a2[5];
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v9 = &v4[v8[5]];
  if (!v7(v9, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  uint64_t v10 = &v4[v8[6]];
  if (!v7(v10, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  }
  uint64_t v11 = &v4[v8[7]];
  if (!v7(v11, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  }
  uint64_t v12 = &v4[v8[8]];
  if (!v7(v12, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  }
  int v13 = &v4[v8[9]];
  if (!v7(v13, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v13, v5);
  }
  __n128 v14 = &v4[v8[10]];
  if (!v7(v14, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v14, v5);
  }
  uint64_t v15 = &v4[v8[11]];
  if (!v7(v15, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  }
  uint64_t v16 = &v4[v8[12]];
  if (!v7(v16, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v16, v5);
  }
  uint64_t v17 = &v4[v8[14]];
  if (!v7(v17, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v17, v5);
  }
  uint64_t v18 = &v4[v8[15]];
  if (!v7(v18, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v18, v5);
  }
  uint64_t v19 = &v4[v8[16]];
  if (!v7(v19, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v19, v5);
  }
  uint64_t v20 = &v4[v8[17]];
  if (!v7(v20, 1LL, v5)) {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v20, v5);
  }
  *(void *)&double v21 = swift_bridgeObjectRelease((const char *)*(void *)&v4[v8[20] + 8]).n128_u64[0];
  swift_bridgeObjectRelease(*(const char **)&v4[v8[21] + 8], v21);
  uint64_t v22 = (uint64_t *)((char *)a1 + a2[6]);
  unint64_t v23 = v22[1];
  if (v23 >> 60 != 15) {
    sub_100189B20(*v22, v23);
  }
  sub_100189B20(*(uint64_t *)((char *)a1 + a2[7]), *(unint64_t *)((char *)a1 + a2[7] + 8));
}

const char **sub_1004050DC(const char **a1, const char **a2, int *a3)
{
  uint64_t v5 = *a2;
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v10 + 48);
  __n128 v12 = swift_bridgeObjectRetain(v5);
  if (v11(v8, 1LL, v9, v12))
  {
    uint64_t v13 = sub_100183098(&qword_1006457E8);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  __n128 v14 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v15 = v14[5];
  uint64_t v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v15], 1LL, v9))
  {
    uint64_t v18 = sub_100183098(&qword_1006457E8);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v16, v17, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0LL, 1LL, v9);
  }

  uint64_t v19 = v14[6];
  uint64_t v20 = &v7[v19];
  double v21 = &v8[v19];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v19], 1LL, v9))
  {
    uint64_t v22 = sub_100183098(&qword_1006457E8);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v20, v21, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v20, 0LL, 1LL, v9);
  }

  uint64_t v23 = v14[7];
  uint64_t v24 = &v7[v23];
  uint64_t v25 = &v8[v23];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v23], 1LL, v9))
  {
    uint64_t v26 = sub_100183098(&qword_1006457E8);
    memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v24, v25, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v24, 0LL, 1LL, v9);
  }

  uint64_t v27 = v14[8];
  uint64_t v28 = &v7[v27];
  uint64_t v29 = &v8[v27];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v27], 1LL, v9))
  {
    uint64_t v30 = sub_100183098(&qword_1006457E8);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v28, v29, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v28, 0LL, 1LL, v9);
  }

  uint64_t v31 = v14[9];
  uint64_t v32 = &v7[v31];
  uint64_t v33 = &v8[v31];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v31], 1LL, v9))
  {
    uint64_t v34 = sub_100183098(&qword_1006457E8);
    memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v32, v33, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v32, 0LL, 1LL, v9);
  }

  uint64_t v35 = v14[10];
  uint64_t v36 = &v7[v35];
  uint64_t v37 = &v8[v35];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v35], 1LL, v9))
  {
    uint64_t v38 = sub_100183098(&qword_1006457E8);
    memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v36, v37, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v36, 0LL, 1LL, v9);
  }

  uint64_t v39 = v14[11];
  uint64_t v40 = &v7[v39];
  uint64_t v41 = &v8[v39];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v39], 1LL, v9))
  {
    uint64_t v42 = sub_100183098(&qword_1006457E8);
    memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v40, v41, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v40, 0LL, 1LL, v9);
  }

  uint64_t v43 = v14[12];
  uint64_t v44 = &v7[v43];
  uint64_t v45 = &v8[v43];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v43], 1LL, v9))
  {
    uint64_t v46 = sub_100183098(&qword_1006457E8);
    memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v44, v45, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v44, 0LL, 1LL, v9);
  }

  v7[v14[13]] = v8[v14[13]];
  uint64_t v47 = v14[14];
  uint64_t v48 = &v7[v47];
  uint64_t v49 = &v8[v47];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v47], 1LL, v9))
  {
    uint64_t v50 = sub_100183098(&qword_1006457E8);
    memcpy(v48, v49, *(void *)(*(void *)(v50 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v48, v49, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v48, 0LL, 1LL, v9);
  }

  uint64_t v51 = v14[15];
  uint64_t v52 = &v7[v51];
  uint64_t v53 = &v8[v51];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v51], 1LL, v9))
  {
    uint64_t v54 = sub_100183098(&qword_1006457E8);
    memcpy(v52, v53, *(void *)(*(void *)(v54 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v52, v53, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v52, 0LL, 1LL, v9);
  }

  uint64_t v55 = v14[16];
  uint64_t v56 = &v7[v55];
  uint64_t v57 = &v8[v55];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v55], 1LL, v9))
  {
    uint64_t v58 = sub_100183098(&qword_1006457E8);
    memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v56, v57, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v56, 0LL, 1LL, v9);
  }

  uint64_t v59 = v14[17];
  uint64_t v60 = &v7[v59];
  uint64_t v61 = &v8[v59];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v11)(&v8[v59], 1LL, v9))
  {
    uint64_t v62 = sub_100183098(&qword_1006457E8);
    memcpy(v60, v61, *(void *)(*(void *)(v62 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v60, v61, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v60, 0LL, 1LL, v9);
  }

  uint64_t v63 = v14[18];
  uint64_t v64 = &v7[v63];
  uint64_t v65 = &v8[v63];
  *(_DWORD *)uint64_t v64 = *(_DWORD *)v65;
  v64[4] = v65[4];
  v7[v14[19]] = v8[v14[19]];
  uint64_t v66 = v14[20];
  uint64_t v67 = &v7[v66];
  uint64_t v68 = &v8[v66];
  int v69 = (const char *)*((void *)v68 + 1);
  *(void *)uint64_t v67 = *(void *)v68;
  *((void *)v67 + 1) = v69;
  uint64_t v70 = v14[21];
  uint64_t v71 = &v7[v70];
  uint64_t v72 = &v8[v70];
  uint64_t v73 = (const char *)*((void *)v72 + 1);
  *(void *)uint64_t v71 = *(void *)v72;
  *((void *)v71 + 1) = v73;
  uint64_t v74 = a3[6];
  int v75 = (char *)a1 + v74;
  uint64_t v76 = (uint64_t *)((char *)a2 + v74);
  unint64_t v77 = *(unint64_t *)((char *)a2 + v74 + 8);
  *(void *)&double v78 = swift_bridgeObjectRetain(v69).n128_u64[0];
  swift_bridgeObjectRetain(v73, v78);
  if (v77 >> 60 == 15)
  {
    *(_OWORD *)int v75 = *(_OWORD *)v76;
  }

  else
  {
    uint64_t v79 = *v76;
    sub_10019BA8C(*v76, v77);
    *(void *)int v75 = v79;
    *((void *)v75 + 1) = v77;
  }

  uint64_t v80 = a3[7];
  uint64_t v81 = (uint64_t *)((char *)a1 + v80);
  uint64_t v82 = (uint64_t *)((char *)a2 + v80);
  uint64_t v83 = *v82;
  unint64_t v84 = v82[1];
  sub_10019BA8C(*v82, v84);
  uint64_t *v81 = v83;
  v81[1] = v84;
  uint64_t v85 = a3[8];
  uint64_t v86 = a3[9];
  uint64_t v87 = *(char **)((char *)a2 + v85);
  *(const char **)((char *)a1 + v85) = v87;
  *((_BYTE *)a1 + v86) = *((_BYTE *)a2 + v86);
  uint64_t v88 = v87;
  return a1;
}

const char **sub_1004057EC(const char **a1, const char **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  *(void *)&double v8 = swift_bridgeObjectRetain(v6).n128_u64[0];
  swift_bridgeObjectRelease(v7, v8);
  uint64_t v128 = a3;
  uint64_t v130 = a2;
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __n128 v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1LL, v12);
  int v16 = v14(v11, 1LL, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    uint64_t v17 = sub_100183098(&qword_1006457E8);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  uint64_t v18 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v19 = v18[5];
  uint64_t v20 = &v10[v19];
  double v21 = &v11[v19];
  int v22 = v14(&v10[v19], 1LL, v12);
  int v23 = v14(v21, 1LL, v12);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v20, v21, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v20, 0LL, 1LL, v12);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
LABEL_12:
    uint64_t v24 = sub_100183098(&qword_1006457E8);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v20, v21, v12);
LABEL_13:
  uint64_t v25 = v18[6];
  uint64_t v26 = &v10[v25];
  uint64_t v27 = &v11[v25];
  int v28 = v14(&v10[v25], 1LL, v12);
  int v29 = v14(v27, 1LL, v12);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v26, v27, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v26, 0LL, 1LL, v12);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v26, v12);
LABEL_18:
    uint64_t v30 = sub_100183098(&qword_1006457E8);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v26, v27, v12);
LABEL_19:
  uint64_t v31 = v18[7];
  uint64_t v32 = &v10[v31];
  uint64_t v33 = &v11[v31];
  int v34 = v14(&v10[v31], 1LL, v12);
  int v35 = v14(v33, 1LL, v12);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v32, v33, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v32, 0LL, 1LL, v12);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v32, v12);
LABEL_24:
    uint64_t v36 = sub_100183098(&qword_1006457E8);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v32, v33, v12);
LABEL_25:
  uint64_t v37 = v18[8];
  uint64_t v38 = &v10[v37];
  uint64_t v39 = &v11[v37];
  int v40 = v14(&v10[v37], 1LL, v12);
  int v41 = v14(v39, 1LL, v12);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v38, v39, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v38, 0LL, 1LL, v12);
      goto LABEL_31;
    }

    goto LABEL_30;
  }

  if (v41)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v38, v12);
LABEL_30:
    uint64_t v42 = sub_100183098(&qword_1006457E8);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64LL));
    goto LABEL_31;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v38, v39, v12);
LABEL_31:
  uint64_t v43 = v18[9];
  uint64_t v44 = &v10[v43];
  uint64_t v45 = &v11[v43];
  int v46 = v14(&v10[v43], 1LL, v12);
  int v47 = v14(v45, 1LL, v12);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v44, v45, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v44, 0LL, 1LL, v12);
      goto LABEL_37;
    }

    goto LABEL_36;
  }

  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v44, v12);
LABEL_36:
    uint64_t v48 = sub_100183098(&qword_1006457E8);
    memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64LL));
    goto LABEL_37;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v44, v45, v12);
LABEL_37:
  uint64_t v49 = v18[10];
  uint64_t v50 = &v10[v49];
  uint64_t v51 = &v11[v49];
  int v52 = v14(&v10[v49], 1LL, v12);
  int v53 = v14(v51, 1LL, v12);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v50, v51, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v50, 0LL, 1LL, v12);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  if (v53)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v50, v12);
LABEL_42:
    uint64_t v54 = sub_100183098(&qword_1006457E8);
    memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64LL));
    goto LABEL_43;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v50, v51, v12);
LABEL_43:
  uint64_t v55 = v18[11];
  uint64_t v56 = &v10[v55];
  uint64_t v57 = &v11[v55];
  int v58 = v14(&v10[v55], 1LL, v12);
  int v59 = v14(v57, 1LL, v12);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v56, v57, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v56, 0LL, 1LL, v12);
      goto LABEL_49;
    }

    goto LABEL_48;
  }

  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v56, v12);
LABEL_48:
    uint64_t v60 = sub_100183098(&qword_1006457E8);
    memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64LL));
    goto LABEL_49;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v56, v57, v12);
LABEL_49:
  uint64_t v61 = v18[12];
  uint64_t v62 = &v10[v61];
  uint64_t v63 = &v11[v61];
  int v64 = v14(&v10[v61], 1LL, v12);
  int v65 = v14(v63, 1LL, v12);
  if (v64)
  {
    if (!v65)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v62, v63, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v62, 0LL, 1LL, v12);
      goto LABEL_55;
    }

    goto LABEL_54;
  }

  if (v65)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v62, v12);
LABEL_54:
    uint64_t v66 = sub_100183098(&qword_1006457E8);
    memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64LL));
    goto LABEL_55;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v62, v63, v12);
LABEL_55:
  v10[v18[13]] = v11[v18[13]];
  uint64_t v67 = v18[14];
  uint64_t v68 = &v10[v67];
  int v69 = &v11[v67];
  int v70 = v14(&v10[v67], 1LL, v12);
  int v71 = v14(v69, 1LL, v12);
  if (v70)
  {
    if (!v71)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v68, v69, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v68, 0LL, 1LL, v12);
      goto LABEL_61;
    }

    goto LABEL_60;
  }

  if (v71)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v68, v12);
LABEL_60:
    uint64_t v72 = sub_100183098(&qword_1006457E8);
    memcpy(v68, v69, *(void *)(*(void *)(v72 - 8) + 64LL));
    goto LABEL_61;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v68, v69, v12);
LABEL_61:
  uint64_t v73 = v18[15];
  uint64_t v74 = &v10[v73];
  int v75 = &v11[v73];
  int v76 = v14(&v10[v73], 1LL, v12);
  int v77 = v14(v75, 1LL, v12);
  if (v76)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v74, v75, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v74, 0LL, 1LL, v12);
      goto LABEL_67;
    }

    goto LABEL_66;
  }

  if (v77)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v74, v12);
LABEL_66:
    uint64_t v78 = sub_100183098(&qword_1006457E8);
    memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64LL));
    goto LABEL_67;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v74, v75, v12);
LABEL_67:
  uint64_t v79 = v18[16];
  uint64_t v80 = &v10[v79];
  uint64_t v81 = &v11[v79];
  int v82 = v14(&v10[v79], 1LL, v12);
  int v83 = v14(v81, 1LL, v12);
  if (v82)
  {
    if (!v83)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v80, v81, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v80, 0LL, 1LL, v12);
      goto LABEL_73;
    }

    goto LABEL_72;
  }

  if (v83)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v80, v12);
LABEL_72:
    uint64_t v84 = sub_100183098(&qword_1006457E8);
    memcpy(v80, v81, *(void *)(*(void *)(v84 - 8) + 64LL));
    goto LABEL_73;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v80, v81, v12);
LABEL_73:
  uint64_t v85 = v18[17];
  uint64_t v86 = &v10[v85];
  uint64_t v87 = &v11[v85];
  int v88 = v14(&v10[v85], 1LL, v12);
  int v89 = v14(v87, 1LL, v12);
  if (v88)
  {
    if (!v89)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v86, v87, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v86, 0LL, 1LL, v12);
      goto LABEL_79;
    }

    goto LABEL_78;
  }

  if (v89)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v86, v12);
LABEL_78:
    uint64_t v90 = sub_100183098(&qword_1006457E8);
    memcpy(v86, v87, *(void *)(*(void *)(v90 - 8) + 64LL));
    goto LABEL_79;
  }

  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v86, v87, v12);
LABEL_79:
  uint64_t v91 = v18[18];
  uint64_t v92 = &v10[v91];
  uint64_t v93 = &v11[v91];
  int v94 = *(_DWORD *)v93;
  v92[4] = v93[4];
  *(_DWORD *)uint64_t v92 = v94;
  v10[v18[19]] = v11[v18[19]];
  uint64_t v95 = v18[20];
  uint64_t v96 = &v10[v95];
  uint64_t v97 = &v11[v95];
  *(void *)uint64_t v96 = *(void *)v97;
  double v98 = (const char *)*((void *)v97 + 1);
  uint64_t v99 = (const char *)*((void *)v96 + 1);
  *((void *)v96 + 1) = v98;
  *(void *)&double v100 = swift_bridgeObjectRetain(v98, v128, v130).n128_u64[0];
  *(void *)&double v101 = swift_bridgeObjectRelease(v99, v100).n128_u64[0];
  uint64_t v102 = v18[21];
  uint64_t v103 = &v10[v102];
  uint64_t v104 = &v11[v102];
  *(void *)uint64_t v103 = *(void *)v104;
  uint64_t v105 = (const char *)*((void *)v104 + 1);
  uint64_t v106 = (const char *)*((void *)v103 + 1);
  *((void *)v103 + 1) = v105;
  *(void *)&double v107 = swift_bridgeObjectRetain(v105, v101).n128_u64[0];
  swift_bridgeObjectRelease(v106, v107);
  uint64_t v108 = v129[6];
  unint64_t v109 = (uint64_t *)((char *)a1 + v108);
  uint64_t v110 = (uint64_t *)(v131 + v108);
  unint64_t v111 = *(void *)(v131 + v108 + 8);
  if (*(unint64_t *)((char *)a1 + v108 + 8) >> 60 != 15)
  {
    if (v111 >> 60 != 15)
    {
      uint64_t v113 = *v110;
      sub_10019BA8C(*v110, v111);
      uint64_t v114 = *v109;
      unint64_t v115 = v109[1];
      uint64_t *v109 = v113;
      v109[1] = v111;
      sub_100189B20(v114, v115);
      goto LABEL_86;
    }

    sub_10019DC8C((uint64_t)v109);
    goto LABEL_84;
  }

  if (v111 >> 60 == 15)
  {
LABEL_84:
    *(_OWORD *)unint64_t v109 = *(_OWORD *)v110;
    goto LABEL_86;
  }

  uint64_t v112 = *v110;
  sub_10019BA8C(*v110, v111);
  uint64_t *v109 = v112;
  v109[1] = v111;
LABEL_86:
  uint64_t v116 = v129[7];
  uint64_t v117 = (uint64_t *)((char *)a1 + v116);
  uint64_t v118 = (uint64_t *)(v131 + v116);
  uint64_t v119 = *v118;
  unint64_t v120 = v118[1];
  sub_10019BA8C(*v118, v120);
  uint64_t v121 = *v117;
  unint64_t v122 = v117[1];
  *uint64_t v117 = v119;
  v117[1] = v120;
  sub_100189B20(v121, v122);
  uint64_t v123 = v129[8];
  uint64_t v124 = *(void **)((char *)a1 + v123);
  unint64_t v125 = *(char **)(v131 + v123);
  *(const char **)((char *)a1 + v123) = v125;
  uint64_t v126 = v125;

  *((_BYTE *)a1 + v129[9]) = *(_BYTE *)(v131 + v129[9]);
  return a1;
}

void *sub_1004062F8(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v5 = a3[5];
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1LL, v8))
  {
    uint64_t v11 = sub_100183098(&qword_1006457E8);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0LL, 1LL, v8);
  }

  uint64_t v12 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v13 = v12[5];
  __n128 v14 = &v6[v13];
  int v15 = &v7[v13];
  if (v10(&v7[v13], 1LL, v8))
  {
    uint64_t v16 = sub_100183098(&qword_1006457E8);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v15, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v14, 0LL, 1LL, v8);
  }

  uint64_t v17 = v12[6];
  uint64_t v18 = &v6[v17];
  uint64_t v19 = &v7[v17];
  if (v10(&v7[v17], 1LL, v8))
  {
    uint64_t v20 = sub_100183098(&qword_1006457E8);
    memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v18, v19, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v18, 0LL, 1LL, v8);
  }

  uint64_t v21 = v12[7];
  int v22 = &v6[v21];
  int v23 = &v7[v21];
  if (v10(&v7[v21], 1LL, v8))
  {
    uint64_t v24 = sub_100183098(&qword_1006457E8);
    memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v22, v23, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v22, 0LL, 1LL, v8);
  }

  uint64_t v25 = v12[8];
  uint64_t v26 = &v6[v25];
  uint64_t v27 = &v7[v25];
  if (v10(&v7[v25], 1LL, v8))
  {
    uint64_t v28 = sub_100183098(&qword_1006457E8);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v26, v27, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v26, 0LL, 1LL, v8);
  }

  uint64_t v29 = v12[9];
  uint64_t v30 = &v6[v29];
  uint64_t v31 = &v7[v29];
  if (v10(&v7[v29], 1LL, v8))
  {
    uint64_t v32 = sub_100183098(&qword_1006457E8);
    memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v30, v31, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v30, 0LL, 1LL, v8);
  }

  uint64_t v33 = v12[10];
  int v34 = &v6[v33];
  int v35 = &v7[v33];
  if (v10(&v7[v33], 1LL, v8))
  {
    uint64_t v36 = sub_100183098(&qword_1006457E8);
    memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v34, v35, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v34, 0LL, 1LL, v8);
  }

  uint64_t v37 = v12[11];
  uint64_t v38 = &v6[v37];
  uint64_t v39 = &v7[v37];
  if (v10(&v7[v37], 1LL, v8))
  {
    uint64_t v40 = sub_100183098(&qword_1006457E8);
    memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v38, v39, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v38, 0LL, 1LL, v8);
  }

  uint64_t v41 = v12[12];
  uint64_t v42 = &v6[v41];
  uint64_t v43 = &v7[v41];
  if (v10(&v7[v41], 1LL, v8))
  {
    uint64_t v44 = sub_100183098(&qword_1006457E8);
    memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v42, v43, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v42, 0LL, 1LL, v8);
  }

  v6[v12[13]] = v7[v12[13]];
  uint64_t v45 = v12[14];
  int v46 = &v6[v45];
  int v47 = &v7[v45];
  if (v10(&v7[v45], 1LL, v8))
  {
    uint64_t v48 = sub_100183098(&qword_1006457E8);
    memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v46, v47, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v46, 0LL, 1LL, v8);
  }

  uint64_t v49 = v12[15];
  uint64_t v50 = &v6[v49];
  uint64_t v51 = &v7[v49];
  if (v10(&v7[v49], 1LL, v8))
  {
    uint64_t v52 = sub_100183098(&qword_1006457E8);
    memcpy(v50, v51, *(void *)(*(void *)(v52 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v50, v51, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v50, 0LL, 1LL, v8);
  }

  uint64_t v53 = v12[16];
  uint64_t v54 = &v6[v53];
  uint64_t v55 = &v7[v53];
  if (v10(&v7[v53], 1LL, v8))
  {
    uint64_t v56 = sub_100183098(&qword_1006457E8);
    memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v54, v55, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v54, 0LL, 1LL, v8);
  }

  uint64_t v57 = v12[17];
  int v58 = &v6[v57];
  int v59 = &v7[v57];
  if (v10(&v7[v57], 1LL, v8))
  {
    uint64_t v60 = sub_100183098(&qword_1006457E8);
    memcpy(v58, v59, *(void *)(*(void *)(v60 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v58, v59, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v58, 0LL, 1LL, v8);
  }

  uint64_t v61 = v12[18];
  uint64_t v62 = &v6[v61];
  uint64_t v63 = &v7[v61];
  *(_DWORD *)uint64_t v62 = *(_DWORD *)v63;
  v62[4] = v63[4];
  v6[v12[19]] = v7[v12[19]];
  *(_OWORD *)&v6[v12[20]] = *(_OWORD *)&v7[v12[20]];
  *(_OWORD *)&v6[v12[21]] = *(_OWORD *)&v7[v12[21]];
  uint64_t v64 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v64) = *(_OWORD *)((char *)a2 + v64);
  uint64_t v65 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *((_BYTE *)a1 + v65) = *((_BYTE *)a2 + v65);
  return a1;
}

const char **sub_100406998(const char **a1, const char **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v117 = a3;
  uint64_t v119 = a2;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100183098(&qword_1006457E8);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = (int *)type metadata accessor for SDAuthenticationSessionMetrics(0LL);
  uint64_t v17 = v16[5];
  uint64_t v18 = &v8[v17];
  uint64_t v19 = &v9[v17];
  int v20 = v12(&v8[v17], 1LL, v10);
  int v21 = v12(v19, 1LL, v10);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v19, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v18, 0LL, 1LL, v10);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_12:
    uint64_t v22 = sub_100183098(&qword_1006457E8);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v18, v19, v10);
LABEL_13:
  uint64_t v23 = v16[6];
  uint64_t v24 = &v8[v23];
  uint64_t v25 = &v9[v23];
  int v26 = v12(&v8[v23], 1LL, v10);
  int v27 = v12(v25, 1LL, v10);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v24, v25, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v24, 0LL, 1LL, v10);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
LABEL_18:
    uint64_t v28 = sub_100183098(&qword_1006457E8);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
    goto LABEL_19;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v24, v25, v10);
LABEL_19:
  uint64_t v29 = v16[7];
  uint64_t v30 = &v8[v29];
  uint64_t v31 = &v9[v29];
  int v32 = v12(&v8[v29], 1LL, v10);
  int v33 = v12(v31, 1LL, v10);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v30, v31, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v30, 0LL, 1LL, v10);
      goto LABEL_25;
    }

    goto LABEL_24;
  }

  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v30, v10);
LABEL_24:
    uint64_t v34 = sub_100183098(&qword_1006457E8);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64LL));
    goto LABEL_25;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v30, v31, v10);
LABEL_25:
  uint64_t v35 = v16[8];
  uint64_t v36 = &v8[v35];
  uint64_t v37 = &v9[v35];
  int v38 = v12(&v8[v35], 1LL, v10);
  int v39 = v12(v37, 1LL, v10);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v36, v37, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v36, 0LL, 1LL, v10);
      goto LABEL_31;
    }

    goto LABEL_30;
  }

  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v36, v10);
LABEL_30:
    uint64_t v40 = sub_100183098(&qword_1006457E8);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64LL));
    goto LABEL_31;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v36, v37, v10);
LABEL_31:
  uint64_t v41 = v16[9];
  uint64_t v42 = &v8[v41];
  uint64_t v43 = &v9[v41];
  int v44 = v12(&v8[v41], 1LL, v10);
  int v45 = v12(v43, 1LL, v10);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v42, v43, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v42, 0LL, 1LL, v10);
      goto LABEL_37;
    }

    goto LABEL_36;
  }

  if (v45)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v42, v10);
LABEL_36:
    uint64_t v46 = sub_100183098(&qword_1006457E8);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64LL));
    goto LABEL_37;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v42, v43, v10);
LABEL_37:
  uint64_t v47 = v16[10];
  uint64_t v48 = &v8[v47];
  uint64_t v49 = &v9[v47];
  int v50 = v12(&v8[v47], 1LL, v10);
  int v51 = v12(v49, 1LL, v10);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v48, v49, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v48, 0LL, 1LL, v10);
      goto LABEL_43;
    }

    goto LABEL_42;
  }

  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
LABEL_42:
    uint64_t v52 = sub_100183098(&qword_1006457E8);
    memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64LL));
    goto LABEL_43;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v48, v49, v10);
LABEL_43:
  uint64_t v53 = v16[11];
  uint64_t v54 = &v8[v53];
  uint64_t v55 = &v9[v53];
  int v56 = v12(&v8[v53], 1LL, v10);
  int v57 = v12(v55, 1LL, v10);
  if (v56)
  {
    if (!v57)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v54, v55, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v54, 0LL, 1LL, v10);
      goto LABEL_49;
    }

    goto LABEL_48;
  }

  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v54, v10);
LABEL_48:
    uint64_t v58 = sub_100183098(&qword_1006457E8);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64LL));
    goto LABEL_49;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v54, v55, v10);
LABEL_49:
  uint64_t v59 = v16[12];
  uint64_t v60 = &v8[v59];
  uint64_t v61 = &v9[v59];
  int v62 = v12(&v8[v59], 1LL, v10);
  int v63 = v12(v61, 1LL, v10);
  if (v62)
  {
    if (!v63)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v60, v61, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v60, 0LL, 1LL, v10);
      goto LABEL_55;
    }

    goto LABEL_54;
  }

  if (v63)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v60, v10);
LABEL_54:
    uint64_t v64 = sub_100183098(&qword_1006457E8);
    memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64LL));
    goto LABEL_55;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v60, v61, v10);
LABEL_55:
  v8[v16[13]] = v9[v16[13]];
  uint64_t v65 = v16[14];
  uint64_t v66 = &v8[v65];
  uint64_t v67 = &v9[v65];
  int v68 = v12(&v8[v65], 1LL, v10);
  int v69 = v12(v67, 1LL, v10);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v66, v67, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v66, 0LL, 1LL, v10);
      goto LABEL_61;
    }

    goto LABEL_60;
  }

  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v10);
LABEL_60:
    uint64_t v70 = sub_100183098(&qword_1006457E8);
    memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64LL));
    goto LABEL_61;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v66, v67, v10);
LABEL_61:
  uint64_t v71 = v16[15];
  uint64_t v72 = &v8[v71];
  uint64_t v73 = &v9[v71];
  int v74 = v12(&v8[v71], 1LL, v10);
  int v75 = v12(v73, 1LL, v10);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v72, v73, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v72, 0LL, 1LL, v10);
      goto LABEL_67;
    }

    goto LABEL_66;
  }

  if (v75)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v72, v10);
LABEL_66:
    uint64_t v76 = sub_100183098(&qword_1006457E8);
    memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64LL));
    goto LABEL_67;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v72, v73, v10);
LABEL_67:
  uint64_t v77 = v16[16];
  uint64_t v78 = &v8[v77];
  uint64_t v79 = &v9[v77];
  int v80 = v12(&v8[v77], 1LL, v10);
  int v81 = v12(v79, 1LL, v10);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v78, v79, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v78, 0LL, 1LL, v10);
      goto LABEL_73;
    }

    goto LABEL_72;
  }

  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v78, v10);
LABEL_72:
    uint64_t v82 = sub_100183098(&qword_1006457E8);
    memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64LL));
    goto LABEL_73;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v78, v79, v10);
LABEL_73:
  uint64_t v83 = v16[17];
  uint64_t v84 = &v8[v83];
  uint64_t v85 = &v9[v83];
  int v86 = v12(&v8[v83], 1LL, v10);
  int v87 = v12(v85, 1LL, v10);
  if (v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v84, v85, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v84, 0LL, 1LL, v10);
      goto LABEL_79;
    }

    goto LABEL_78;
  }

  if (v87)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v84, v10);
LABEL_78:
    uint64_t v88 = sub_100183098(&qword_1006457E8);
    memcpy(v84, v85, *(void *)(*(void *)(v88 - 8) + 64LL));
    goto LABEL_79;
  }

  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v84, v85, v10);
LABEL_79:
  uint64_t v89 = v16[18];
  uint64_t v90 = &v8[v89];
  uint64_t v91 = &v9[v89];
  *(_DWORD *)uint64_t v90 = *(_DWORD *)v91;
  v90[4] = v91[4];
  v8[v16[19]] = v9[v16[19]];
  uint64_t v92 = v16[20];
  uint64_t v93 = &v8[v92];
  int v94 = &v9[v92];
  uint64_t v96 = *(void *)v94;
  uint64_t v95 = *((void *)v94 + 1);
  uint64_t v97 = (const char *)*((void *)v93 + 1);
  *(void *)uint64_t v93 = v96;
  *((void *)v93 + 1) = v95;
  *(void *)&double v98 = swift_bridgeObjectRelease(v97, v117, v119).n128_u64[0];
  uint64_t v99 = v16[21];
  double v100 = &v8[v99];
  double v101 = &v9[v99];
  uint64_t v103 = *(void *)v101;
  uint64_t v102 = *((void *)v101 + 1);
  uint64_t v104 = (const char *)*((void *)v100 + 1);
  *(void *)double v100 = v103;
  *((void *)v100 + 1) = v102;
  swift_bridgeObjectRelease(v104, v98);
  uint64_t v105 = v118[6];
  uint64_t v106 = (uint64_t *)((char *)a1 + v105);
  double v107 = (uint64_t *)(v120 + v105);
  unint64_t v108 = *(unint64_t *)((char *)a1 + v105 + 8);
  if (v108 >> 60 != 15)
  {
    unint64_t v109 = v107[1];
    if (v109 >> 60 != 15)
    {
      uint64_t v110 = *v106;
      uint64_t *v106 = *v107;
      v106[1] = v109;
      sub_100189B20(v110, v108);
      goto LABEL_84;
    }

    sub_10019DC8C((uint64_t)v106);
  }

  *(_OWORD *)uint64_t v106 = *(_OWORD *)v107;
LABEL_84:
  uint64_t v111 = v118[7];
  uint64_t v112 = *(uint64_t *)((char *)a1 + v111);
  unint64_t v113 = *(unint64_t *)((char *)a1 + v111 + 8);
  *(_OWORD *)((char *)a1 + v111) = *(_OWORD *)(v120 + v111);
  sub_100189B20(v112, v113);
  uint64_t v114 = v118[8];
  unint64_t v115 = *(void **)((char *)a1 + v114);
  *(const char **)((char *)a1 + v114) = *(const char **)(v120 + v114);

  *((_BYTE *)a1 + v118[9]) = *(_BYTE *)(v120 + v118[9]);
  return a1;
}

uint64_t sub_100407438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100407444);
}

uint64_t sub_100407448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100407454);
}

uint64_t sub_100407458(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for SDAuthenticationSessionMetrics(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = &unk_1004DACB8;
    v4[3] = &unk_1004DAE30;
    void v4[4] = &unk_1004DACD0;
    v4[5] = &unk_1004DACE8;
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

ValueMetadata *_s22GuestModeUnlockPairingVMa()
{
  return &_s22GuestModeUnlockPairingVN;
}

uint64_t sub_100407508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100407514);
}

uint64_t sub_100407518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100407524);
}

uint64_t sub_100407528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v8[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for SDAuthenticationSessionMetrics(319LL);
  if (v7 <= 0x3F)
  {
    v8[1] = *(void *)(result - 8) + 64LL;
    v8[2] = a4;
    void v8[3] = &unk_1004DACD0;
    v8[4] = &unk_1004DACE8;
    swift_initStructMetadata(a1, 256LL, 5LL, v8, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1004075B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004075C4);
}

uint64_t sub_1004075C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004075D4);
}

uint64_t sub_1004075D8(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for SDAuthenticationSessionMetrics(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = &unk_1004DAEF0;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t _s7FeatureOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1004076A4 + 4 * byte_1004DB10D[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1004076D8 + 4 * byte_1004DB108[v4]))();
}

uint64_t sub_1004076D8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004076E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1004076E8LL);
  }
  return result;
}

uint64_t sub_1004076F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1004076FCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100407700(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100407708(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s7FeatureOMa()
{
  return &_s7FeatureON;
}

uint64_t sub_100407724(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = a1;
  int v3 = SFDeviceClassCodeGet(a1, a2);
  if (!v3) {
    return 2LL;
  }
  int v4 = v3;
  Swift::Int v5 = sub_1001DD1C4((uint64_t)off_1005E0B20[(char)v2]);
  BOOL v6 = sub_1003A0760(v4, v5);
  __n128 v7 = swift_bridgeObjectRelease(v5);
  if (v6) {
    return 1LL;
  }
  if (v2 - 2 >= 2)
  {
    if (!v2 || v4 != 1) {
      return 2LL;
    }
    return 0LL;
  }

  if (v4 == 8 || (SFDeviceIsRealityDevice(v7) & 1) != 0) {
    return 0LL;
  }
  return 2LL;
}

void sub_1004077CC(char *a1)
{
}

void sub_1004077D8()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }

Swift::Int sub_100407824()
{
  return Hasher._finalize()();
}

void sub_1004078B4()
{
  __asm { BR              X10 }

uint64_t sub_1004078F0(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xEE00656E6F68506BLL);
}

void sub_10040796C()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }

Swift::Int sub_1004079B4()
{
  return Hasher._finalize()();
}

unint64_t sub_100407A44@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100407C9C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100407A70()
{
  return ((uint64_t (*)(void))((char *)sub_100407AA0 + 4 * byte_1004DB11E[*v0]))();
}

void sub_100407AA0(char *a1@<X8>)
{
  a1[15] = -18;
}

void sub_100407AC8(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_100407AEC(void *a1@<X8>)
{
  *a1 = 0x646F4D7473657567LL;
  a1[1] = 0xEF6B636F6C6E5565LL;
}

uint64_t sub_100407B14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100407CE4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100407B70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100407CE4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t sub_100407BC0()
{
  unint64_t result = qword_1006546F0;
  if (!qword_1006546F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004DB1F8, &_s7FeatureON);
    atomic_store(result, (unint64_t *)&qword_1006546F0);
  }

  return result;
}

uint64_t sub_100407C04()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100407C34 + 4 * byte_1004DB122[*v0]))( 0x6E776F6E6B6E75LL,  0xE700000000000000LL);
}

uint64_t sub_100407C34()
{
  return 0x636F6C6E5563616DLL;
}

uint64_t sub_100407C58()
{
  return 0x6C436B636F6C6E75LL;
}

uint64_t sub_100407C78()
{
  return 0x646F4D7473657567LL;
}

unint64_t sub_100407C9C(Swift::String string)
{
  id object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._id object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1005D1E50, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

unint64_t sub_100407CE4()
{
  unint64_t result = qword_1006546F8;
  if (!qword_1006546F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004DB180, &_s7FeatureON);
    atomic_store(result, (unint64_t *)&qword_1006546F8);
  }

  return result;
}

void sub_100407D28(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100183098(&qword_10064DA60);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = (int *)type metadata accessor for AuthenticationDevice(0LL);
  uint64_t v10 = a3 + v9[9];
  uint64_t v11 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v10, 1LL, 1LL, v11);
  uint64_t v12 = (void *)(a3 + v9[10]);
  *uint64_t v12 = 0LL;
  v12[1] = 0LL;
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  __int128 v16 = xmmword_1004DB250;
  *(_OWORD *)(a3 + swift_weakDestroy(v0 + 16) = xmmword_1004DB250;
  *(_OWORD *)(a3 + 32) = xmmword_1004DB250;
  *(_WORD *)(a3 + 48) = 0;
  swift_bridgeObjectRetain(a2);
  UUID.init(uuidString:)(a1, a2);
  sub_100408F8C((uint64_t)v8, v10);
  swift_bridgeObjectRelease(v12[1]);
  *(_OWORD *)uint64_t v12 = v16;
  int v13 = (void *)(a3 + v9[11]);
  *int v13 = 0LL;
  v13[1] = 0LL;
  v13[2] = 0LL;
  id v14 = [objc_allocWithZone(RPCompanionLinkDevice) init];
  NSString v15 = String._bridgeToObjectiveC()();
  objc_msgSend(v14, "setIdentifier:", v15, swift_bridgeObjectRelease(a2).n128_f64[0]);

  *(void *)(a3 + v9[12]) = v14;
}

uint64_t sub_100407EA0(uint64_t a1, uint64_t a2)
{
  return sub_100407F94(a1, a2, (SEL *)&selRef_uniqueIDOverride);
}

uint64_t sub_100407EAC(uint64_t a1, uint64_t a2)
{
  return sub_100407F94(a1, a2, (SEL *)&selRef_modelIdentifier);
}

uint64_t sub_100407EB8(uint64_t a1, uint64_t a2)
{
  return sub_100407F94(a1, a2, (SEL *)&selRef_productBuildVersion);
}

id sub_100407EC4()
{
  return [*v0 isActive];
}

id sub_100407EE4()
{
  return [*v0 isNearby];
}

uint64_t sub_100407F04@<X0>(uint64_t a1@<X8>)
{
  id v3 = [*v1 nsuuid];
  if (v3)
  {
    int v4 = v3;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for UUID(0LL);
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL);
    uint64_t v7 = a1;
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v5 = type metadata accessor for UUID(0LL);
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL);
    uint64_t v7 = a1;
    uint64_t v8 = 1LL;
  }

  return v6(v7, v8, 1LL, v5);
}

uint64_t sub_100407F88(uint64_t a1, uint64_t a2)
{
  return sub_100407F94(a1, a2, (SEL *)&selRef_name);
}

uint64_t sub_100407F94(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v4 = [*v3 *a3];
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);

  return v6;
}

uint64_t sub_100407FF4()
{
  return v2;
}

uint64_t sub_100408028()
{
  id v1 = [*v0 description];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

void *sub_10040807C(uint64_t a1, uint64_t *a2, int *a3)
{
  id v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *id v4 = *a2;
    id v4 = (void *)(v20 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = (const char *)a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = (const char *)a2[3];
    *(void *)(a1 + swift_weakDestroy(v0 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[4];
    uint64_t v10 = (const char *)a2[5];
    *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
    uint64_t v11 = a3[9];
    __dst = (void *)(a1 + v11);
    uint64_t v12 = (char *)a2 + v11;
    *(void *)(a1 + 32) = v9;
    *(void *)(a1 + 40) = v10;
    uint64_t v13 = type metadata accessor for UUID(0LL);
    uint64_t v14 = *(void *)(v13 - 8);
    NSString v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v14 + 48);
    *(void *)&double v16 = swift_bridgeObjectRetain(v7).n128_u64[0];
    *(void *)&double v17 = swift_bridgeObjectRetain(v8, v16).n128_u64[0];
    __n128 v18 = swift_bridgeObjectRetain(v10, v17);
    if (v15(v12, 1LL, v13, v18))
    {
      uint64_t v19 = sub_100183098(&qword_10064DA60);
      memcpy(__dst, v12, *(void *)(*(void *)(v19 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 16))(__dst, v12, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(__dst, 0LL, 1LL, v13);
    }

    uint64_t v21 = a3[10];
    uint64_t v22 = a3[11];
    uint64_t v23 = (void *)((char *)v4 + v21);
    uint64_t v24 = (uint64_t *)((char *)a2 + v21);
    uint64_t v25 = (const char *)v24[1];
    *uint64_t v23 = *v24;
    v23[1] = v25;
    int v26 = (char *)v4 + v22;
    uint64_t v27 = (uint64_t)a2 + v22;
    *((void *)v26 + 2) = *(void *)(v27 + 16);
    *(_OWORD *)int v26 = *(_OWORD *)v27;
    uint64_t v28 = a3[12];
    uint64_t v29 = *(void **)((char *)a2 + v28);
    *(void *)((char *)v4 + v28) = v29;
    swift_bridgeObjectRetain(v25);
    id v30 = v29;
  }

  return v4;
}

void sub_1004081FC(void *a1, int *a2)
{
  id v4 = (char *)a1 + a2[9];
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  swift_bridgeObjectRelease(*(void *)((char *)a1 + a2[10] + 8));
}

uint64_t sub_10040829C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(const char **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(const char **)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(const char **)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  uint64_t v10 = a3[9];
  __dst = (void *)(a1 + v10);
  uint64_t v11 = (const void *)(a2 + v10);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v13 + 48);
  *(void *)&double v15 = swift_bridgeObjectRetain(v6).n128_u64[0];
  *(void *)&double v16 = swift_bridgeObjectRetain(v7, v15).n128_u64[0];
  __n128 v17 = swift_bridgeObjectRetain(v9, v16);
  if (v14(v11, 1LL, v12, v17))
  {
    uint64_t v18 = sub_100183098(&qword_10064DA60);
    memcpy(__dst, v11, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(__dst, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0LL, 1LL, v12);
  }

  uint64_t v19 = a3[10];
  uint64_t v20 = a3[11];
  uint64_t v21 = (void *)(a1 + v19);
  uint64_t v22 = (void *)(a2 + v19);
  uint64_t v23 = (const char *)v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  uint64_t v24 = a1 + v20;
  uint64_t v25 = a2 + v20;
  *(void *)(v24 + swift_weakDestroy(v0 + 16) = *(void *)(v25 + 16);
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  uint64_t v26 = a3[12];
  uint64_t v27 = *(void **)(a2 + v26);
  *(void *)(a1 + v26) = v27;
  swift_bridgeObjectRetain(v23);
  id v28 = v27;
  return a1;
}

uint64_t sub_1004083F0(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(const char **)(a2 + 8);
  uint64_t v7 = *(const char **)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  *(void *)&double v8 = swift_bridgeObjectRetain(v6).n128_u64[0];
  *(void *)&double v9 = swift_bridgeObjectRelease(v7, v8).n128_u64[0];
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v10 = *(const char **)(a2 + 24);
  uint64_t v11 = *(const char **)(a1 + 24);
  *(void *)(a1 + 24) = v10;
  *(void *)&double v12 = swift_bridgeObjectRetain(v10, v9).n128_u64[0];
  *(void *)&double v13 = swift_bridgeObjectRelease(v11, v12).n128_u64[0];
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v14 = *(const char **)(a2 + 40);
  double v15 = *(const char **)(a1 + 40);
  *(void *)(a1 + 40) = v14;
  *(void *)&double v16 = swift_bridgeObjectRetain(v14, v13).n128_u64[0];
  swift_bridgeObjectRelease(v15, v16);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  uint64_t v17 = a3[9];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  uint64_t v20 = type metadata accessor for UUID(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v21 + 48);
  int v23 = v22(v18, 1LL, v20);
  int v24 = v22(v19, 1LL, v20);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v21 + 24))(v18, v19, v20);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v21 + 8))(v18, v20);
    goto LABEL_6;
  }

  if (v24)
  {
LABEL_6:
    uint64_t v25 = sub_100183098(&qword_10064DA60);
    memcpy(v18, v19, *(void *)(*(void *)(v25 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v21 + 16))(v18, v19, v20);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
LABEL_7:
  uint64_t v26 = a3[10];
  uint64_t v27 = (void *)(a1 + v26);
  id v28 = (void *)(a2 + v26);
  *uint64_t v27 = *v28;
  uint64_t v29 = (const char *)v28[1];
  id v30 = (const char *)v27[1];
  v27[1] = v29;
  *(void *)&double v31 = swift_bridgeObjectRetain(v29).n128_u64[0];
  swift_bridgeObjectRelease(v30, v31);
  uint64_t v32 = a3[11];
  int v33 = (void *)(a1 + v32);
  uint64_t v34 = (void *)(a2 + v32);
  void *v33 = *v34;
  v33[1] = v34[1];
  void v33[2] = v34[2];
  uint64_t v35 = a3[12];
  uint64_t v36 = *(void **)(a2 + v35);
  uint64_t v37 = *(void **)(a1 + v35);
  *(void *)(a1 + v35) = v36;
  id v38 = v36;

  return a1;
}

uint64_t sub_1004085D8(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  uint64_t v7 = a3[9];
  double v8 = (void *)(a1 + v7);
  double v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10))
  {
    uint64_t v12 = sub_100183098(&qword_10064DA60);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
  }

  uint64_t v13 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = *(void *)(v15 + 16);
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_1004086E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(const char **)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(void *)&double v8 = swift_bridgeObjectRelease(v7).n128_u64[0];
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(const char **)(a1 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v9;
  *(void *)&double v11 = swift_bridgeObjectRelease(v10, v8).n128_u64[0];
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = *(const char **)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v12;
  swift_bridgeObjectRelease(v13, v11);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  uint64_t v14 = a3[9];
  uint64_t v15 = (void *)(a1 + v14);
  double v16 = (void *)(a2 + v14);
  uint64_t v17 = type metadata accessor for UUID(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1LL, v17);
  int v21 = v19(v16, 1LL, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 40))(v15, v16, v17);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }

  if (v21)
  {
LABEL_6:
    uint64_t v22 = sub_100183098(&qword_10064DA60);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v18 + 32))(v15, v16, v17);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
LABEL_7:
  uint64_t v23 = a3[10];
  int v24 = (void *)(a1 + v23);
  uint64_t v25 = (uint64_t *)(a2 + v23);
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  id v28 = (const char *)v24[1];
  *int v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease(v28);
  uint64_t v29 = a3[11];
  uint64_t v30 = a3[12];
  uint64_t v31 = a1 + v29;
  uint64_t v32 = a2 + v29;
  *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  *(void *)(v31 + swift_weakDestroy(v0 + 16) = *(void *)(v32 + 16);
  int v33 = *(void **)(a1 + v30);
  *(void *)(a1 + v30) = *(void *)(a2 + v30);

  return a1;
}

uint64_t sub_10040887C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100408888);
}

uint64_t sub_100408888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100183098(&qword_10064DA60);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 36), a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 48));
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_10040890C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100408918);
}

uint64_t sub_100408918(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100183098(&qword_10064DA60);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))( a1 + *(int *)(a4 + 36),  a2,  a2,  result);
  }
  *(void *)(a1 + *(int *)(a4 + 48)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for AuthenticationDevice(uint64_t a1)
{
  uint64_t result = qword_100654758;
  if (!qword_100654758) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AuthenticationDevice);
  }
  return result;
}

void sub_1004089D4(uint64_t a1)
{
  v4[0] = &unk_1004DB2A8;
  v4[1] = &unk_1004DB2A8;
  void v4[2] = &unk_1004DB2A8;
  void v4[3] = &unk_1004DB2C0;
  void v4[4] = &unk_1004DB2C0;
  sub_100408A70(319LL);
  if (v3 <= 0x3F)
  {
    v4[5] = *(void *)(v2 - 8) + 64LL;
    void v4[6] = &unk_1004DB2A8;
    void v4[7] = &unk_1004DB2D8;
    v4[8] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256LL, 9LL, v4, a1 + 16);
  }

void sub_100408A70(uint64_t a1)
{
  if (!qword_100645EF0)
  {
    uint64_t v2 = type metadata accessor for UUID(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_100645EF0);
    }
  }

double sub_100408AC4@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100183098(&qword_10064DA60);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (int *)type metadata accessor for AuthenticationDevice(0LL);
  uint64_t v8 = a2 + v7[9];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  *(void *)(a2 + v7[12]) = a1;
  id v10 = a1;
  id v11 = [v10 name];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    unint64_t v15 = v14;
  }

  else
  {
    unint64_t v15 = 0xE90000000000003ELL;
    uint64_t v13 = 0x676E697373696D3CLL;
  }

  double v16 = (uint64_t *)(a2 + v7[10]);
  *double v16 = v13;
  v16[1] = v15;
  id v17 = [v10 idsDeviceIdentifier];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    unint64_t v21 = v20;
  }

  else
  {
    uint64_t v19 = 0LL;
    unint64_t v21 = 0xE000000000000000LL;
  }

  *(void *)a2 = v19;
  *(void *)(a2 + 8) = v21;
  id v22 = [v10 model];
  if (v22)
  {
    uint64_t v23 = v22;
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    unint64_t v26 = v25;
  }

  else
  {
    uint64_t v24 = 0LL;
    unint64_t v26 = 0xE000000000000000LL;
  }

  *(void *)(a2 + swift_weakDestroy(v0 + 16) = v24;
  *(void *)(a2 + 24) = v26;
  id v27 = [v10 sourceVersion];
  if (v27)
  {
    uint64_t v29 = v27;
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    uint64_t v32 = v31;

    *(void *)&__int128 v51 = 0x2D74726F70706152LL;
    *((void *)&v51 + 1) = 0xE800000000000000LL;
    v33._uint64_t countAndFlagsBits = v30;
    v33._id object = v32;
    String.append(_:)(v33);
    *(void *)&double v28 = swift_bridgeObjectRelease((const char *)v32).n128_u64[0];
    unint64_t v35 = *((void *)&v51 + 1);
    uint64_t v34 = v51;
  }

  else
  {
    uint64_t v34 = 0LL;
    unint64_t v35 = 0xE000000000000000LL;
  }

  *(void *)(a2 + 32) = v34;
  *(void *)(a2 + 40) = v35;
  *(_WORD *)(a2 + 48) = 0;
  id v36 = objc_msgSend(v10, "idsDeviceIdentifier", v28);
  if (v36)
  {
    uint64_t v37 = v36;
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    uint64_t v40 = v39;
  }

  else
  {
    uint64_t v38 = 0LL;
    uint64_t v40 = (const char *)0xE000000000000000LL;
  }

  UUID.init(uuidString:)(v38, v40);
  swift_bridgeObjectRelease(v40);
  sub_100408F8C((uint64_t)v6, v8);
  id v41 = [v10 name];
  if (v41)
  {
    uint64_t v42 = v41;
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
    unint64_t v45 = v44;
  }

  else
  {
    uint64_t v43 = 0LL;
    unint64_t v45 = 0xE000000000000000LL;
  }

  *(void *)&double v46 = swift_bridgeObjectRelease((const char *)v16[1]).n128_u64[0];
  *double v16 = v43;
  v16[1] = v45;
  objc_msgSend(v10, "operatingSystemVersion", v46);
  uint64_t v47 = v52;
  __int128 v50 = v51;

  uint64_t v48 = a2 + v7[11];
  double result = *(double *)&v50;
  *(_OWORD *)uint64_t v48 = v50;
  *(void *)(v48 + swift_weakDestroy(v0 + 16) = v47;
  return result;
}

uint64_t sub_100408DB4()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t sub_100408DE0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain(*(void *)(v0 + 24));
  return v1;
}

uint64_t sub_100408E0C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain(*(void *)(v0 + 40));
  return v1;
}

uint64_t sub_100408E38()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t sub_100408E40()
{
  return *(unsigned __int8 *)(v0 + 49);
}

uint64_t sub_100408E48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100408F44(v2 + *(int *)(a1 + 36), a2);
}

uint64_t sub_100408E58(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1 + 40));
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_100408E8C(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 44));
}

uint64_t sub_100408EA0(uint64_t a1)
{
  id v2 = [*(id *)(v1 + *(int *)(a1 + 48)) description];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

uint64_t sub_100408EF8(void *a1, void *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a2[1];
  uint64_t result = (v4 | v5) == 0;
  if (v4) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (*a1 == *a2 && v4 == v5) {
      return 1LL;
    }
    else {
      return _stringCompareWithSmolCheck(_:_:expecting:)(*a1, v4, *a2, v5, 0LL);
    }
  }

  return result;
}

uint64_t sub_100408F44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100183098(&qword_10064DA60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100408F8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100183098(&qword_10064DA60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100408FD4()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100186DFC(v0, qword_1006547B0);
  uint64_t v1 = sub_100186DE4(v0, (uint64_t)qword_1006547B0);
  if (qword_100643FD8 != -1) {
    swift_once(&qword_100643FD8, sub_10023A408);
  }
  uint64_t v2 = sub_100186DE4(v0, (uint64_t)qword_1006695F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_100409064(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  v2[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for SFAirDropReceive.AskRequest(0LL);
  void v2[9] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[10] = v6;
  v2[11] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URL(0LL);
  v2[12] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[13] = v8;
  v2[14] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100183098((uint64_t *)&unk_100645130);
  v2[15] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SFAirDrop.TransferType(0LL);
  v2[16] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[17] = v11;
  v2[18] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_100409190, static AirDropActor.shared, 0LL);
}

uint64_t sub_100409190(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 136);
  uint64_t v3 = *(void *)(v1 + 144);
  uint64_t v4 = *(void *)(v1 + 128);
  uint64_t v5 = SFAirDropReceive.AskRequest.type.getter(a1);
  char v6 = SFAirDrop.TransferType.isLinks.getter(v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
  if ((v6 & 1) == 0) {
    goto LABEL_32;
  }
  uint64_t v70 = v1 + 24;
  uint64_t v8 = *(void *)(v1 + 104);
  uint64_t v9 = SFAirDropReceive.AskRequest.urlItems.getter(v7);
  uint64_t v10 = v9;
  int64_t v11 = 0LL;
  uint64_t v12 = v9 + 56;
  uint64_t v13 = -1LL;
  uint64_t v14 = -1LL << *(_BYTE *)(v9 + 32);
  if (-v14 < 64) {
    uint64_t v13 = ~(-1LL << -(char)v14);
  }
  unint64_t v15 = v13 & *(void *)(v9 + 56);
  int64_t v16 = (unint64_t)(63 - v14) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v11 << 6);
      goto LABEL_21;
    }

    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1LL))
    {
      __break(1u);
      goto LABEL_35;
    }

    if (v19 >= v16) {
      goto LABEL_24;
    }
    unint64_t v20 = *(void *)(v12 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v16) {
        goto LABEL_24;
      }
      unint64_t v20 = *(void *)(v12 + 8 * v11);
      if (!v20)
      {
        int64_t v11 = v19 + 2;
        if (v19 + 2 >= v16) {
          goto LABEL_24;
        }
        unint64_t v20 = *(void *)(v12 + 8 * v11);
        if (!v20) {
          break;
        }
      }
    }

uint64_t type metadata accessor for SDAirDropContentHandlerNewsLinks()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary32SDAirDropContentHandlerNewsLinks);
}

uint64_t sub_100409774@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SDAirDropContentHandlerNewsLinks();
  uint64_t result = swift_allocObject(v2, 24LL, 7LL);
  *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
  *a1 = result;
  return result;
}

uint64_t sub_1004097A8(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_1006547F4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1001C97A0;
  return sub_100409064(a1);
}

void sub_1004097FC(__n128 a1, uint64_t a2, char a3)
{
  uint64_t v4 = SFAirDropReceive.AskRequest.urlItems.getter(a1);
  unint64_t v5 = *(void *)(v4 + 16);
  swift_bridgeObjectRelease((const char *)v4);
  uint64_t v6 = sub_100183098((uint64_t *)&unk_100650440);
  uint64_t inited = swift_initStackObject(v6, v26);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1004CDCA0;
  *(void *)(inited + 32) = 0x4E494C5F5357454ELL;
  uint64_t v8 = inited + 32;
  *(void *)(inited + 40) = 0xE90000000000004BLL;
  *(void *)(inited + 48) = v5;
  *(void *)&double v9 = swift_bridgeObjectRetain((const char *)0xE90000000000004BLL).n128_u64[0];
  swift_bridgeObjectRetain((const char *)inited, v9);
  v10._uint64_t countAndFlagsBits = 95LL;
  v10._id object = (void *)0xE100000000000000LL;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = 0x4E494C5F5357454ELL;
  v11._id object = (void *)0xE90000000000004BLL;
  String.append(_:)(v11);
  swift_bridgeObjectRelease((const char *)0xE90000000000004BLL);
  if (v5 > 1)
  {
    v12._uint64_t countAndFlagsBits = 0x4C4152554C505FLL;
    v12._id object = (void *)0xE700000000000000LL;
    String.append(_:)(v12);
  }

  swift_bridgeObjectRelease((const char *)inited);
  if ((a3 & 1) != 0)
  {
    v13._uint64_t countAndFlagsBits = 0x4C4154495041435FLL;
    v13._id object = (void *)0xEC00000044455A49LL;
    String.append(_:)(v13);
  }

  v14._uint64_t countAndFlagsBits = 0x545845545FLL;
  v14._id object = (void *)0xE500000000000000LL;
  String.append(_:)(v14);
  swift_setDeallocating(inited);
  uint64_t v15 = *(void *)(inited + 16);
  uint64_t v16 = sub_100183098(&qword_100646EA0);
  swift_arrayDestroy(v8, v15, v16);
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease((const char *)0xEF524546534E4152LL);
  id v19 = (id)SFLocalizedStringForKey(v17, v18);

  if (v19)
  {
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    uint64_t v22 = v21;

    uint64_t v23 = sub_100183098(&qword_1006483E0);
    uint64_t v24 = swift_allocObject(v23, 72LL, 7LL);
    *(_OWORD *)(v24 + swift_weakDestroy(v0 + 16) = xmmword_1004CDCA0;
    *(void *)(v24 + 56) = &type metadata for Int;
    *(void *)(v24 + 64) = &protocol witness table for Int;
    *(void *)(v24 + 32) = v5;
    static String.localizedStringWithFormat(_:_:)(v20, v22, v24);
    *(void *)&double v25 = swift_bridgeObjectRelease(v22).n128_u64[0];
    swift_bridgeObjectRelease((const char *)v24, v25);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_100409A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[10] = a4;
  v5[11] = v4;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  return swift_task_switch(sub_100409A70, v4, 0LL);
}

uint64_t sub_100409A70()
{
  unint64_t v1 = *(void *)(v0 + 64);
  if (v1 >> 60 == 15)
  {
    if (qword_100644350 != -1) {
      swift_once(&qword_100644350, sub_10040A568);
    }
    uint64_t v2 = type metadata accessor for Logger(0LL);
    uint64_t v3 = sub_100186DE4(v2, (uint64_t)qword_1006548B0);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No record data received for contact lookup", v6, 2u);
      swift_slowDealloc(v6, -1LL, -1LL);
    }

    return (*(uint64_t (**)(void, void, void, void))(v0 + 8))(0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    uint64_t v8 = *(void *)(v0 + 56);
    uint64_t v9 = *(void *)(v0 + 88);
    *(void *)(v0 + 96) = *(void *)(v9 + 112);
    Swift::String v10 = *(__SecTrust **)(v9 + 120);
    sub_10019BA8C(v8, v1);
    sub_1002E1484(v10, &v30);
    uint64_t v11 = v30;
    Swift::String v12 = v31;
    Swift::String v13 = v32;
    uint64_t v14 = v33;
    *(void *)(v0 + 104) = v30;
    *(void *)(v0 + 112) = v13;
    uint64_t v15 = v34;
    *(void *)(v0 + 120) = v34;
    if (qword_100644350 != -1) {
      swift_once(&qword_100644350, sub_10040A568);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    *(void *)(v0 + 128) = sub_100186DE4(v16, (uint64_t)qword_1006548B0);
    swift_bridgeObjectRetain_n(v15, 4LL);
    swift_bridgeObjectRetain_n(v11, 4LL);
    swift_bridgeObjectRetain_n(v13, 4LL);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      log = v18;
      id v29 = (uint64_t *)(v0 + 48);
      uint64_t v20 = swift_slowAlloc(22LL, -1LL);
      uint64_t v26 = swift_slowAlloc(64LL, -1LL);
      uint64_t v35 = v26;
      *(_DWORD *)uint64_t v20 = 136315394;
      double v28 = v12;
      int64_t v21 = v13;
      if (!v13)
      {
        Swift::String v12 = (const char *)0xD000000000000015LL;
        uint64_t v30 = 0LL;
        uint64_t v31 = (const char *)0xE000000000000000LL;
        _StringGuts.grow(_:)(17LL);
        swift_bridgeObjectRelease(v31);
        int64_t v21 = (const char *)0x80000001005046B0LL;
      }

      swift_bridgeObjectRetain(v13);
      *(void *)(v0 + 40) = sub_10018CDB4((uint64_t)v12, (unint64_t)v21, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v29, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease_n(v11, 2LL);
      swift_bridgeObjectRelease_n(v13, 2LL);
      swift_bridgeObjectRelease_n(v15, 2LL);
      *(_WORD *)(v20 + 12) = 2080;
      uint64_t v22 = v14;
      uint64_t v23 = v15;
      if (!v15)
      {
        uint64_t v22 = 0xD000000000000015LL;
        uint64_t v30 = 0LL;
        uint64_t v31 = (const char *)0xE000000000000000LL;
        _StringGuts.grow(_:)(17LL);
        swift_bridgeObjectRelease(v31);
        uint64_t v23 = (const char *)0x80000001005046B0LL;
      }

      swift_bridgeObjectRetain(v15);
      *id v29 = sub_10018CDB4(v22, (unint64_t)v23, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v29, v0 + 56, v20 + 14, v20 + 22);
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease_n(v11, 2LL);
      swift_bridgeObjectRelease_n(v13, 2LL);
      swift_bridgeObjectRelease_n(v15, 2LL);
      _os_log_impl( (void *)&_mh_execute_header,  log,  v19,  "Hash lookup complete: email hash - %s phone hash - %s",  (uint8_t *)v20,  0x16u);
      swift_arrayDestroy(v26, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);

      Swift::String v12 = v28;
    }

    else
    {
      swift_bridgeObjectRelease_n(v11, 4LL);
      swift_bridgeObjectRelease_n(v13, 4LL);
      swift_bridgeObjectRelease_n(v15, 4LL);
    }

    uint64_t v24 = (void *)swift_task_alloc(dword_1006548FC);
    *(void *)(v0 + 136) = v24;
    *uint64_t v24 = v0;
    v24[1] = sub_100409EE8;
    uint64_t v25 = *(void *)(v0 + 88);
    v24[5] = v15;
    v24[6] = v25;
    void v24[3] = v13;
    v24[4] = v14;
    _OWORD v24[2] = v12;
    return swift_task_switch(sub_10040A618, v25, 0LL);
  }

uint64_t sub_100409EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 136);
  uint64_t v5 = *(void *)(*v2 + 88);
  *(void *)(v3 + 144) = a1;
  *(void *)(v3 + 152) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_100409F48, v5, 0LL);
}

uint64_t sub_100409F48()
{
  unint64_t v1 = *(const char **)(v0 + 152);
  if (!v1)
  {
    Swift::String v13 = *(const char **)(v0 + 112);
    uint64_t v14 = *(const char **)(v0 + 120);
    uint64_t v16 = *(void *)(v0 + 56);
    unint64_t v15 = *(void *)(v0 + 64);
    *(void *)&double v17 = swift_bridgeObjectRelease((const char *)*(void *)(v0 + 104)).n128_u64[0];
    *(void *)&double v18 = swift_bridgeObjectRelease(v14, v17).n128_u64[0];
    swift_bridgeObjectRelease(v13, v18);
    sub_100189B0C(v16, v15);
    return (*(uint64_t (**)(void, void, void, void))(v0 + 8))( *(void *)(v0 + 144),  0LL,  *(void *)(v0 + 144),  0LL);
  }

  uint64_t v2 = *(void **)(v0 + 96);
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = objc_msgSend(v2, "verifiedIdentityForAppleID:", v3, swift_bridgeObjectRelease(v1).n128_f64[0]);

  if (!v4)
  {
    int64_t v21 = *(const char **)(v0 + 112);
    uint64_t v20 = *(const char **)(v0 + 120);
    *(void *)&double v22 = swift_bridgeObjectRelease((const char *)*(void *)(v0 + 104)).n128_u64[0];
    *(void *)&double v23 = swift_bridgeObjectRelease(v20, v22).n128_u64[0];
    swift_bridgeObjectRelease(v21, v23);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.default.getter();
    BOOL v27 = os_log_type_enabled(v25, v26);
    uint64_t v29 = *(void *)(v0 + 56);
    unint64_t v28 = *(void *)(v0 + 64);
    if (v27)
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "No Verified identity found", v30, 2u);
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    goto LABEL_19;
  }

  id v5 = v4;
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(const char **)(v0 + 120);
  if (v8)
  {
    uint64_t v61 = *(const char **)(v0 + 120);
    Swift::String v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v59 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)Swift::String v10 = 138412290;
    *(void *)(v0 + 32) = v5;
    id v11 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v10 + 4, v10 + 12);
    *uint64_t v59 = v4;

    uint64_t v9 = v61;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Confirmed verified identity %@", v10, 0xCu);
    uint64_t v12 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v59, 1LL, v12);
    swift_slowDealloc(v59, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
  }

  *(void *)&double v31 = swift_bridgeObjectRelease(v9).n128_u64[0];
  uint64_t v32 = *(const char **)(v0 + 104);
  uint64_t v33 = *(void **)(v0 + 96);
  swift_bridgeObjectRelease(*(const char **)(v0 + 112), v31);
  sub_100240DFC();
  sub_1002E28C8();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  id v35 =  objc_msgSend( v33,  "contactWithPreferredIdentifierForContacts:",  isa,  swift_bridgeObjectRelease(v32).n128_f64[0]);

  if (v35)
  {
    id v37 = [v35 identifier];
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    uint64_t v40 = v39;

    id v41 = [objc_allocWithZone(CNContactFormatter) init];
    id v42 = [v41 stringFromContact:v35];

    if (v42)
    {
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      uint64_t v45 = v44;
    }

    else
    {
      uint64_t v43 = 0LL;
      uint64_t v45 = 0LL;
    }

    swift_bridgeObjectRetain_n(*(void *)(v0 + 80), 2LL);
    swift_bridgeObjectRetain_n(v40, 2LL);
    __n128 v50 = (os_log_s *)Logger.logObject.getter(v49);
    os_log_type_t v51 = static os_log_type_t.default.getter();
    log = v50;
    BOOL v52 = os_log_type_enabled(v50, v51);
    uint64_t v53 = *(const char **)(v0 + 80);
    if (v52)
    {
      uint64_t v57 = *(void *)(v0 + 72);
      uint64_t v60 = *(void *)(v0 + 56);
      unint64_t v62 = *(void *)(v0 + 64);
      uint64_t v54 = swift_slowAlloc(22LL, -1LL);
      uint64_t v58 = swift_slowAlloc(64LL, -1LL);
      uint64_t v64 = v58;
      *(_DWORD *)uint64_t v54 = 136315394;
      swift_bridgeObjectRetain(v53);
      *(void *)(v0 + swift_weakDestroy(v0 + 16) = sub_10018CDB4(v57, (unint64_t)v53, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v54 + 4, v54 + 12);
      swift_bridgeObjectRelease_n(v53, 3LL);
      *(_WORD *)(v54 + 12) = 2080;
      swift_bridgeObjectRetain(v40);
      *(void *)(v0 + 24) = sub_10018CDB4(v38, (unint64_t)v40, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v54 + 14, v54 + 22);
      swift_bridgeObjectRelease_n(v40, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  log,  v51,  "Matched serviceName %s to contactID %s",  (uint8_t *)v54,  0x16u);
      swift_arrayDestroy(v58, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1LL, -1LL);
      swift_slowDealloc(v54, -1LL, -1LL);

      sub_100189B0C(v60, v62);
    }

    else
    {
      uint64_t v56 = *(void *)(v0 + 56);
      unint64_t v55 = *(void *)(v0 + 64);

      swift_bridgeObjectRelease_n(v53, 2LL);
      swift_bridgeObjectRelease_n(v40, 2LL);

      sub_100189B0C(v56, v55);
    }

    return (*(uint64_t (**)(uint64_t, const char *, uint64_t, uint64_t))(v0 + 8))(v38, v40, v43, v45);
  }

  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v46 = static os_log_type_t.default.getter();
  BOOL v47 = os_log_type_enabled(v25, v46);
  uint64_t v29 = *(void *)(v0 + 56);
  unint64_t v28 = *(void *)(v0 + 64);
  if (!v47)
  {

LABEL_19:
    sub_100189B0C(v29, v28);

    goto LABEL_20;
  }

  uint64_t v48 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
  *(_WORD *)uint64_t v48 = 0;
  _os_log_impl((void *)&_mh_execute_header, v25, v46, "No matching contacts found", v48, 2u);
  swift_slowDealloc(v48, -1LL, -1LL);
  sub_100189B0C(v29, v28);

LABEL_20:
  uint64_t v38 = 0LL;
  uint64_t v40 = 0LL;
  uint64_t v43 = 0LL;
  uint64_t v45 = 0LL;
  return (*(uint64_t (**)(uint64_t, const char *, uint64_t, uint64_t))(v0 + 8))(v38, v40, v43, v45);
}

uint64_t sub_10040A568()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100186DFC(v0, qword_1006548B0);
  uint64_t v1 = sub_100186DE4(v0, (uint64_t)qword_1006548B0);
  if (qword_100643FD8 != -1) {
    swift_once(&qword_100643FD8, sub_10023A408);
  }
  uint64_t v2 = sub_100186DE4(v0, (uint64_t)qword_1006695F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_10040A5F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  void v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch(sub_10040A618, v4, 0LL);
}

uint64_t sub_10040A618()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 48) + 112LL);
  if (*(void *)(v0 + 24))
  {
    NSString v2 = String._bridgeToObjectiveC()();
    if (*(void *)(v0 + 40))
    {
LABEL_3:
      NSString v3 = String._bridgeToObjectiveC()();
      goto LABEL_6;
    }
  }

  else
  {
    NSString v2 = 0LL;
    if (*(void *)(v0 + 40)) {
      goto LABEL_3;
    }
  }

  NSString v3 = 0LL;
LABEL_6:
  id v4 = [v1 emailOrPhoneForEmailHash:v2 phoneHash:v3];

  if (v4)
  {
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v7 = v6;
  }

  else
  {
    uint64_t v5 = 0LL;
    uint64_t v7 = 0LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v5, v7);
}

uint64_t sub_10040A714()
{
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for SDAirDropBonjourContactFetcher()
{
  return objc_opt_self(&OBJC_CLASS____TtC16DaemoniOSLibrary30SDAirDropBonjourContactFetcher);
}

void sub_10040A760(uint64_t *a1)
{
  void (*v2)(void **__return_ptr, _OWORD *);
  uint64_t v3;
  uint64_t (*v4)(void **);
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  void *v17;
  id v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  void (*v22)(id *__return_ptr, _OWORD *);
  uint64_t v23;
  void *v24;
  _OWORD v25[2];
  uint64_t v26;
  id v27[2];
  __int128 v28;
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;
  void *v32;
  uint64_t v33;
  NSString v2 = (void (*)(void **__return_ptr, _OWORD *))a1[1];
  NSString v3 = a1[2];
  id v4 = (uint64_t (*)(void **))a1[3];
  uint64_t v33 = *a1;
  uint64_t v1 = v33;
  uint64_t v5 = -1LL << *(_BYTE *)(v33 + 32);
  if (-v5 < 64) {
    uint64_t v6 = ~(-1LL << -(char)v5);
  }
  else {
    uint64_t v6 = -1LL;
  }
  uint64_t v7 = v6 & *(void *)(v33 + 56);
  BOOL v8 = a1[4];
  double v22 = (void (*)(id *__return_ptr, _OWORD *))a1[5];
  uint64_t v9 = a1[6];
  sub_10040F9D0(&v33);
  Swift::String v10 = (unint64_t)(63 - v5) >> 6;
  swift_retain(v3);
  swift_retain(v8);
  double v23 = v9;
  swift_retain(v9);
  id v11 = 0LL;
  if (!v7) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v12 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  Swift::String v13 = v12 | (v11 << 6);
LABEL_8:
  sub_1001CE1D0(*(void *)(v1 + 48) + 40 * v13, (uint64_t)v30);
  while (1)
  {
    sub_1001870BC((uint64_t)v30, (uint64_t)v27, &qword_100654A30);
    if (!*((void *)&v28 + 1))
    {
LABEL_36:
      sub_100187094(v1);
      swift_release(v23);
      swift_release(v8);
      swift_release(v3);
      return;
    }

    v25[0] = *(_OWORD *)v27;
    v25[1] = v28;
    os_log_type_t v26 = v29;
    v2(&v24, v25);
    double v17 = v24;
    sub_10019154C((uint64_t)v25);
    uint64_t v32 = v17;
    if ((v4(&v32) & 1) != 0)
    {
      *(void *)&v30[0] = v17;
      v22(v27, v30);

      double v18 = v27[0];
      if (v7) {
        goto LABEL_7;
      }
    }

    else
    {

      if (v7) {
        goto LABEL_7;
      }
    }

void sub_10040AAB0()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  BOOL v39 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for Calendar.Component(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v41 = v4;
  uint64_t v42 = v5;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Calendar(0LL);
  uint64_t v37 = *(void *)(v8 - 8);
  uint64_t v38 = v8;
  __chkstk_darwin(v8);
  Swift::String v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100183098(&qword_1006457E8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  double v17 = (char *)&v34 - v16;
  __chkstk_darwin(v15);
  os_log_type_t v19 = (char *)&v34 - v18;
  uint64_t v20 = v0 + 96;
  swift_beginAccess(v0 + 96, v43, 32LL, 0LL);
  int64_t v21 = (void *)sub_1001D8984();
  uint64_t v40 = v0;
  sub_10019A708((void *)(v0 + 96), *(void *)(v0 + 120));
  sub_1001D7A28((uint64_t)v19);
  swift_endAccess(v43);
  if ((sub_10040EF3C(v21, (uint64_t)v19) & 1) == 0)
  {
    sub_100224DB4((uint64_t)v19);

    return;
  }

  sub_1001D95A8((uint64_t)v19, (uint64_t)v17);
  uint64_t v35 = v2;
  uint64_t v36 = v1;
  int v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 48))(v17, 1LL, v1);
  uint64_t v23 = sub_100224DB4((uint64_t)v17);
  if (v22 != 1) {
    goto LABEL_7;
  }
  static Calendar.current.getter(v23);
  uint64_t v24 = v41;
  (*(void (**)(char *, void, uint64_t))(v42 + 104))(v7, enum case for Calendar.Component.second(_:), v41);
  double v26 = sub_10031D640();
  if ((~*(void *)&v26 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }

  if (v26 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  if (v26 >= 9.22337204e18)
  {
LABEL_13:
    __break(1u);
    return;
  }

  uint64_t v27 = (uint64_t)v26;
  unint64_t v28 = v39;
  static Date.now.getter(v25);
  Calendar.date(byAdding:value:to:wrappingComponents:)(v7, v27, v28, 0LL);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v28, v36);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v7, v24);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v10, v38);
  sub_100224DB4((uint64_t)v19);
  sub_1001870BC((uint64_t)v14, (uint64_t)v19, &qword_1006457E8);
  sub_1001D95A8((uint64_t)v19, (uint64_t)v14);
  swift_beginAccess(v20, v43, 33LL, 0LL);
  uint64_t v29 = *(void *)(v40 + 120);
  uint64_t v30 = *(void *)(v40 + 128);
  sub_1002499B4(v20, v29);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 40))(v14, v29, v30);
  swift_endAccess(v43);
  sub_10040B324((uint64_t)v19);
LABEL_7:
  if (v21)
  {
    id v31 = v21;
    id v32 = [v31 URI];
    id v33 = [v32 prefixedURI];

    static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  }

  sub_100224DB4((uint64_t)v19);
}

uint64_t sub_10040AE6C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100186DFC(v0, qword_100654900);
  uint64_t v1 = sub_100186DE4(v0, (uint64_t)qword_100654900);
  if (qword_100643FD8 != -1) {
    swift_once(&qword_100643FD8, sub_10023A408);
  }
  uint64_t v2 = sub_100186DE4(v0, (uint64_t)qword_1006695F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_10040AEFC(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  if (qword_100644358 != -1) {
    swift_once(&qword_100644358, sub_10040AE6C);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_100186DE4(v2, (uint64_t)qword_100654900);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Pseudonym service network path monitor is reachable", v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  swift_beginAccess(v1, v9, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v1);
  if (result)
  {
    uint64_t v8 = result;
    sub_10040B004();
    return swift_release(v8);
  }

  return result;
}

uint64_t sub_10040B004()
{
  uint64_t v1 = sub_100183098(&qword_100646560);
  __chkstk_darwin(v1);
  uint64_t v3 = &v30[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v4 = sub_100183098(&qword_1006457E8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v30[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v30[-v8 - 8];
  sub_10040B580();
  swift_beginAccess(v0 + 96, v30, 32LL, 0LL);
  Swift::String v10 = (void *)sub_1001D8984();
  sub_10019A708((void *)(v0 + 96), *(void *)(v0 + 120));
  sub_1001D7A28((uint64_t)v9);
  swift_endAccess(v30);
  if ((sub_10040EF3C(v10, (uint64_t)v9) & 1) != 0)
  {
    if (v10)
    {
      id v11 = v10;
      id v12 = [v11 properties];
      id v13 = [v12 expirationDate];

      static Date._unconditionallyBridgeFromObjectiveC(_:)(v13);
      uint64_t v14 = type metadata accessor for Date(0LL);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v7, 0LL, 1LL, v14);
    }

    else
    {
      uint64_t v21 = type metadata accessor for Date(0LL);
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v7, 1LL, 1LL, v21);
    }

    sub_10040B62C((uint64_t)v7);
    sub_100224DB4((uint64_t)v7);
    sub_10040B324((uint64_t)v9);
  }

  else
  {
    uint64_t v15 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v3, 1LL, 1LL, v15);
    uint64_t v16 = qword_100643F28;
    swift_retain(v0);
    if (v16 != -1) {
      swift_once(&qword_100643F28, sub_100205C24);
    }
    uint64_t v17 = static AirDropActor.shared;
    unint64_t v18 = sub_100205CD8();
    os_log_type_t v19 = (void *)swift_allocObject(&unk_1005E0DF0, 40LL, 7LL);
    v19[2] = v17;
    v19[3] = v18;
    v19[4] = v0;
    swift_retain(v17);
    uint64_t v20 = sub_1001B37E8((uint64_t)v3, (uint64_t)&unk_100654AA8, (uint64_t)v19);
    swift_release(v20);
  }

  uint64_t v22 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v3, 1LL, 1LL, v22);
  uint64_t v23 = qword_100643F28;
  swift_retain(v0);
  if (v23 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v24 = static AirDropActor.shared;
  unint64_t v25 = sub_100205CD8();
  double v26 = (void *)swift_allocObject(&unk_1005E0E18, 40LL, 7LL);
  v26[2] = v24;
  __int128 v26[3] = v25;
  v26[4] = v0;
  swift_retain(v24);
  uint64_t v27 = sub_1001B37E8((uint64_t)v3, (uint64_t)&unk_100654AB8, (uint64_t)v26);
  swift_release(v27);

  return sub_100224DB4((uint64_t)v9);
}

uint64_t sub_10040B324(uint64_t a1)
{
  uint64_t v3 = sub_100183098(&qword_100646560);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100183098(&qword_1006457E8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = __chkstk_darwin(v9);
  id v13 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v27 - v14;
  sub_1001D95A8(a1, (uint64_t)v8);
  unint64_t v28 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v28(v15, v8, v9);
  uint64_t v17 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v5, 1LL, 1LL, v17);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
  uint64_t v18 = qword_100643F28;
  swift_retain(v1);
  uint64_t v27 = v5;
  if (v18 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v19 = static AirDropActor.shared;
  unint64_t v20 = sub_100205CD8();
  uint64_t v21 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v22 = (v21 + 32) & ~v21;
  unint64_t v23 = (v11 + v22 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v24 = swift_allocObject(&unk_1005E0D28, v23 + 8, v21 | 7);
  *(void *)(v24 + swift_weakDestroy(v0 + 16) = v19;
  *(void *)(v24 + 24) = v20;
  v28((char *)(v24 + v22), v13, v9);
  *(void *)(v24 + v23) = v1;
  swift_retain(v19);
  uint64_t v25 = sub_1001B37E8((uint64_t)v27, (uint64_t)&unk_100654A40, v24);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  uint64_t v26 = *(void *)(v1 + 184);
  *(void *)(v1 + 184) = v25;
  return swift_release(v26);
}

uint64_t sub_10040B580()
{
  uint64_t v1 = *(void *)(v0 + 176);
  if (v1)
  {
    swift_retain(*(void *)(v0 + 176));
    Task.cancel()();
    swift_release(v1);
    uint64_t v2 = *(void *)(v0 + 176);
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  *(void *)(v0 + 176) = 0LL;
  swift_release(v2);
  uint64_t v3 = *(void *)(v0 + 184);
  if (v3)
  {
    swift_retain(*(void *)(v0 + 184));
    Task.cancel()();
    swift_release(v3);
    uint64_t v4 = *(void *)(v0 + 184);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  *(void *)(v0 + 184) = 0LL;
  return swift_release(v4);
}

uint64_t sub_10040B62C(uint64_t a1)
{
  uint64_t v3 = sub_100183098(&qword_100646560);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100183098(&qword_1006457E8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = __chkstk_darwin(v9);
  id v13 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v27 - v14;
  sub_1001D95A8(a1, (uint64_t)v8);
  unint64_t v28 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v28(v15, v8, v9);
  uint64_t v17 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v5, 1LL, 1LL, v17);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
  uint64_t v18 = qword_100643F28;
  swift_retain(v1);
  uint64_t v27 = v5;
  if (v18 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v19 = static AirDropActor.shared;
  unint64_t v20 = sub_100205CD8();
  uint64_t v21 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v22 = (v21 + 32) & ~v21;
  unint64_t v23 = (v11 + v22 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v24 = swift_allocObject(&unk_1005E0DA0, v23 + 8, v21 | 7);
  *(void *)(v24 + swift_weakDestroy(v0 + 16) = v19;
  *(void *)(v24 + 24) = v20;
  v28((char *)(v24 + v22), v13, v9);
  *(void *)(v24 + v23) = v1;
  swift_retain(v19);
  uint64_t v25 = sub_1001B37E8((uint64_t)v27, (uint64_t)&unk_100654A88, v24);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  uint64_t v26 = *(void *)(v1 + 176);
  *(void *)(v1 + 176) = v25;
  return swift_release(v26);
}

uint64_t sub_10040B888()
{
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v1 = (void *)swift_task_alloc(dword_100654A5C);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100195708;
  return sub_10040B8F8();
}

uint64_t sub_10040B8F8()
{
  v1[30] = v0;
  uint64_t v2 = sub_100183098(&qword_100646560);
  v1[31] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v3 = (*(void *)(*(void *)(sub_100183098(&qword_1006457E8) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[32] = swift_task_alloc(v3);
  v1[33] = swift_task_alloc(v3);
  v1[34] = swift_task_alloc(v3);
  v1[35] = swift_task_alloc(v3);
  uint64_t v4 = type metadata accessor for ContinuousClock(0LL);
  v1[36] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[37] = v5;
  v1[38] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v6 = static AirDropActor.shared;
  v1[39] = static AirDropActor.shared;
  return swift_task_switch(sub_10040B9FC, v6, 0LL);
}

uint64_t sub_10040B9FC()
{
  if (qword_100644358 != -1) {
    swift_once(&qword_100644358, sub_10040AE6C);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_100654900);
  *(void *)(v0 + 320) = v2;
  unint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Waiting for first unlock to provision AirDrop pseudonym", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = (void *)swift_task_alloc(dword_10064D7AC);
  *(void *)(v0 + 328) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10040BB08;
  return sub_1002DFC24();
}

uint64_t sub_10040BB08()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 312LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 328LL));
  return swift_task_switch(sub_10040BB60, v1, 0LL);
}

uint64_t sub_10040BB60(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Waiting to start provisioning", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  uint64_t v5 = *(void *)(v1 + 240);

  uint64_t v6 = static Duration.seconds(_:)(*(double *)(v5
                                             + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropPseudonymService_processStartupDelaySeconds));
  uint64_t v8 = v7;
  ContinuousClock.init()(v6);
  uint64_t v11 = (char *)&dword_1006461D8 + dword_1006461D8;
  uint64_t v9 = (void *)swift_task_alloc(unk_1006461DC);
  *(void *)(v1 + 336) = v9;
  void *v9 = v1;
  v9[1] = sub_10040BC74;
  return ((uint64_t (*)(uint64_t, uint64_t, void, void, uint64_t))v11)(v6, v8, 0LL, 0LL, 1LL);
}

uint64_t sub_10040BC74()
{
  uint64_t v2 = *(void **)v1;
  swift_task_dealloc(*(void *)(*(void *)v1 + 336LL));
  uint64_t v4 = v2[38];
  uint64_t v3 = v2[39];
  uint64_t v7 = v2 + 36;
  uint64_t v5 = v2[36];
  uint64_t v6 = v7[1];
  if (v0)
  {
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    uint64_t v8 = sub_10040FE10;
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    uint64_t v8 = sub_10040BD14;
  }

  return swift_task_switch(v8, v3, 0LL);
}

uint64_t sub_10040BD14()
{
  uint64_t v2 = (uint64_t *)(v0 + 240);
  uint64_t v1 = *(void **)(v0 + 240);
  uint64_t v3 = v1[5];
  uint64_t v4 = v1[6];
  sub_10019A708(v1 + 2, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  uint64_t v7 = v6;
  v2[13] = v5;
  v2[14] = (uint64_t)v6;
  uint64_t v8 = v1[5];
  uint64_t v9 = v1[6];
  sub_10019A708(v1 + 2, v8);
  uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, double))(v9 + 40))( 0x51706F7244726941LL,  0xE900000000000052LL,  v8,  v9,  31536000.0);
  v2[15] = (uint64_t)v10;
  swift_bridgeObjectRetain_n(v7, 2LL);
  uint64_t v11 = v10;
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter();
  double v100 = v1 + 2;
  uint64_t v102 = v1;
  if (os_log_type_enabled(v12, v13))
  {
    double v98 = v11;
    int v94 = v2 - 2;
    uint64_t v14 = swift_slowAlloc(22LL, -1LL);
    uint64_t v15 = swift_slowAlloc(8LL, -1LL);
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    uint64_t v106 = v16;
    *(_DWORD *)uint64_t v14 = 136315394;
    uint64_t v96 = (void *)v15;
    uint64_t v97 = v16;
    uint64_t v95 = (os_log_s **)(v2 - 1);
    if (v7)
    {
      uint64_t v17 = v7;
    }

    else
    {
      double v107 = 0LL;
      unint64_t v108 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(17LL);
      swift_bridgeObjectRelease((const char *)0xE000000000000000LL);
      uint64_t v17 = (const char *)0x80000001005046B0LL;
      uint64_t v5 = 0xD000000000000015LL;
    }

    swift_bridgeObjectRetain(v7);
    uint64_t *v94 = sub_10018CDB4(v5, (unint64_t)v17, &v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v94, v95, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease_n(v7, 2LL);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v14 + 12) = 2112;
    uint64_t v18 = v98;
    char *v95 = v98;
    uint64_t v19 = v98;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v95, v2, v14 + 14, v14 + 22);
    void *v96 = v98;

    _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "Provisioning pseudonym for service %s and properties %@",  (uint8_t *)v14,  0x16u);
    uint64_t v20 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v96, 1LL, v20);
    swift_slowDealloc(v96, -1LL, -1LL);
    swift_arrayDestroy(v97, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v97, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v7, 2LL);
    uint64_t v18 = v11;
  }

  uint64_t v21 = v105;
  if ((sub_10031DBBC() & 1) == 0)
  {
    BOOL v39 = v2 - 24;
    uint64_t v40 = v2 - 18;
    swift_bridgeObjectRelease(v7);
    uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v43 = static os_log_type_t.error.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Pseudonym provisioning is disabled", v44, 2u);
      swift_slowDealloc(v44, -1LL, -1LL);
    }

    uint64_t v45 = *v2;

    uint64_t v46 = v45 + 96;
    BOOL v47 = (void *)sub_1001D8984();
    if (v47)
    {
      uint64_t v48 = v47;
      uint64_t v49 = v2 - 21;
      uint64_t v99 = v2 - 21;
      double v101 = v2 - 28;
      uint64_t v50 = *v2;
      id v51 = [v47 URI];
      uint64_t v104 = v39;
      id v52 = [v51 prefixedURI];

      uint64_t v53 = v40;
      uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
      uint64_t v56 = v55;

      swift_beginAccess(v46, v49, 33LL, 0LL);
      uint64_t v58 = *(void *)(v50 + 120);
      uint64_t v57 = *(void *)(v50 + 128);
      sub_1002499B4(v46, v58);
      uint64_t v59 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v57 + 72);
      id v60 = v48;
      uint64_t v61 = (void (*)(uint64_t *, void, __n128))v59(v101, v58, v57);
      uint64_t v63 = v62;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v62);
      double v107 = *v63;
      *uint64_t v63 = (const char *)0x8000000000000000LL;
      uint64_t v65 = v54;
      uint64_t v40 = v53;
      sub_1003B2E48((uint64_t)v60, v65, v56, isUniquelyReferenced_nonNull_native);
      uint64_t v66 = *v63;
      *uint64_t v63 = v107;
      BOOL v39 = v104;
      uint64_t v21 = v105;
      *(void *)&double v67 = swift_bridgeObjectRelease(v56).n128_u64[0];
      __n128 v68 = swift_bridgeObjectRelease(v66, v67);
      v61(v101, 0LL, v68);
      swift_endAccess(v99);
    }

    uint64_t v69 = v21[33];
    uint64_t v70 = v21[30];
    swift_beginAccess(v46, v40, 33LL, 0LL);
    uint64_t v71 = *(void *)(v70 + 120);
    uint64_t v72 = *(void *)(v70 + 128);
    sub_1002499B4(v46, v71);
    (*(void (**)(void, uint64_t, uint64_t))(v72 + 16))(0LL, v71, v72);
    uint64_t v73 = type metadata accessor for Date(0LL);
    int v74 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56LL);
    v74(v69, 1LL, 1LL, v73);
    uint64_t v75 = *(void *)(v70 + 120);
    uint64_t v76 = *(void *)(v70 + 128);
    sub_1002499B4(v46, v75);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 40))(v69, v75, v76);
    swift_endAccess(v40);
    uint64_t v18 = (os_log_s *)v21[45];
    uint64_t v77 = v21[31];
    uint64_t v78 = v21[32];
    uint64_t v79 = v21[30];
    v74(v78, 1LL, 1LL, v73);
    sub_10040B62C(v78);
    sub_100224DB4(v78);
    uint64_t v80 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56LL))(v77, 1LL, 1LL, v80);
    uint64_t v81 = static AirDropActor.shared;
    unint64_t v82 = sub_100205CD8();
    uint64_t v83 = (void *)swift_allocObject(&unk_1005E0D78, 40LL, 7LL);
    v83[2] = v81;
    v83[3] = v82;
    v83[4] = v79;
    swift_retain();
    swift_retain();
    uint64_t v84 = sub_1001B37E8(v77, (uint64_t)&unk_100654A68, (uint64_t)v83);
    swift_release(v84);
    swift_beginAccess(v79 + 136, v39, 0LL, 0LL);
    sub_10019A708((void *)(v79 + 136), *(void *)(v79 + 160));
    sub_10036FEB0();
LABEL_17:

    uint64_t v85 = v21[34];
    uint64_t v86 = v21[35];
    uint64_t v88 = v21[32];
    uint64_t v87 = v21[33];
    uint64_t v89 = v21[31];
    swift_task_dealloc(v21[38]);
    swift_task_dealloc(v86);
    swift_task_dealloc(v85);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    return ((uint64_t (*)(void))v21[1])();
  }

  uint64_t v22 = v105[35];
  uint64_t v23 = v105[30] + OBJC_IVAR____TtC16DaemoniOSLibrary25SDAirDropPseudonymService_lastProvisionAttempt;
  swift_beginAccess(v23, v2 - 15, 0LL, 0LL);
  sub_1001D95A8(v23, v22);
  uint64_t v24 = type metadata accessor for Date(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1LL, v24);
  uint64_t v28 = sub_100224DB4(v22);
  if (v27 == 1)
  {
LABEL_11:
    uint64_t v34 = v105[33];
    Date.init()(v28);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(v34, 0LL, 1LL, v24);
    swift_beginAccess(v23, v105 + 18, 33LL, 0LL);
    sub_100225008(v34, v23);
    swift_endAccess(v105 + 18);
    uint64_t v35 = v102[5];
    uint64_t v36 = v102[6];
    sub_10019A708(v100, v35);
    uint64_t v37 = *(int **)(v36 + 24);
    uint64_t v103 = (uint64_t (*)(os_log_s *, uint64_t, uint64_t))((char *)v37 + *v37);
    uint64_t v38 = (void *)swift_task_alloc(v37[1]);
    v105[46] = v38;
    *uint64_t v38 = v105;
    v38[1] = sub_10040C59C;
    return v103(v18, v35, v36);
  }

  uint64_t v29 = v105[34];
  sub_1001D95A8(v23, v29);
  uint64_t result = v26(v29, 1LL, v24);
  if ((_DWORD)result != 1)
  {
    uint64_t v31 = v105[34];
    uint64_t v32 = v105[30];
    double v33 = Date.timeIntervalSinceNow.getter(result);
    uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v31, v24);
    swift_bridgeObjectRelease(v7);
    uint64_t v91 = (os_log_s *)Logger.logObject.getter(v90);
    os_log_type_t v92 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v91, v92))
    {
      uint64_t v93 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v93 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v91,  v92,  "Attempting to provision AirDrop pseudonyms too frequetly.",  v93,  2u);
      swift_slowDealloc(v93, -1LL, -1LL);
    }

    else
    {

      uint64_t v18 = v91;
    }

    goto LABEL_17;
  }

  __break(1u);
  return result;
}

uint64_t sub_10040C59C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 368);
  *(void *)(v3 + 376) = a1;
  *(void *)(v3 + 384) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    uint64_t v5 = *(void *)(v3 + 312);
    uint64_t v6 = sub_10040CAF0;
  }

  else
  {
    uint64_t v7 = *(void *)(v3 + 312);
    swift_bridgeObjectRelease(*(const char **)(v3 + 352));
    uint64_t v6 = sub_10040C618;
    uint64_t v5 = v7;
  }

  return swift_task_switch(v6, v5, 0LL);
}

uint64_t sub_10040C618()
{
  uint64_t v1 = v0;
  unint64_t v62 = *(void **)(v0 + 376);
  id v2 = v62;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  id v60 = v2;
  uint64_t v61 = v0 + 96;
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void **)(v0 + 376);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v6 = 138412290;
    *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = v5;
    id v8 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v6 + 4, v6 + 12);
    *uint64_t v7 = v62;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Provisioned pseudonym %@)", v6, 0xCu);
    uint64_t v9 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    uint64_t v10 = *(void **)(v0 + 376);

    uint64_t v3 = *(os_log_s **)(v1 + 376);
  }

  uint64_t v11 = *(void *)(v1 + 240);

  uint64_t v12 = v11 + 96;
  os_log_type_t v13 = (void *)sub_1001D8984();
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)(v1 + 240);
    id v16 = [v13 URI];
    id v17 = [v16 prefixedURI];

    uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    uint64_t v19 = v18;

    swift_beginAccess(v12, v1 + 72, 33LL, 0LL);
    uint64_t v20 = *(void *)(v15 + 120);
    uint64_t v21 = *(void *)(v15 + 128);
    sub_1002499B4(v12, v20);
    uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 72);
    id v23 = v14;
    uint64_t v24 = (void (*)(uint64_t, void, __n128))v22(v1 + 16, v20, v21);
    uint64_t v26 = v25;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v25);
    uint64_t v64 = *v26;
    *uint64_t v26 = (const char *)0x8000000000000000LL;
    sub_1003B2E48((uint64_t)v23, v59, v19, isUniquelyReferenced_nonNull_native);
    uint64_t v28 = *v26;
    *uint64_t v26 = v64;
    *(void *)&double v29 = swift_bridgeObjectRelease(v19).n128_u64[0];
    __n128 v30 = swift_bridgeObjectRelease(v28, v29);
    v24(v1 + 16, 0LL, v30);
    swift_endAccess(v1 + 72);
  }

  uint64_t v31 = *(void *)(v1 + 264);
  uint64_t v32 = *(void *)(v1 + 240);
  swift_beginAccess(v12, v61, 33LL, 0LL);
  uint64_t v33 = *(void *)(v32 + 120);
  uint64_t v34 = *(void *)(v32 + 128);
  sub_1002499B4(v12, v33);
  uint64_t v35 = *(void (**)(void *, uint64_t, uint64_t))(v34 + 16);
  id v36 = v60;
  v35(v62, v33, v34);
  uint64_t v37 = type metadata accessor for Date(0LL);
  uint64_t v38 = 1LL;
  uint64_t v63 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56LL);
  v63(v31, 1LL, 1LL, v37);
  uint64_t v39 = *(void *)(v32 + 120);
  uint64_t v40 = *(void *)(v32 + 128);
  sub_1002499B4(v12, v39);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 40))(v31, v39, v40);
  swift_endAccess(v61);
  if (v36)
  {
    id v41 = v36;
    id v42 = [v41 properties];
    id v43 = [v42 expirationDate];

    static Date._unconditionallyBridgeFromObjectiveC(_:)(v43);
    uint64_t v38 = 0LL;
  }

  uint64_t v44 = *(void **)(v1 + 360);
  uint64_t v45 = *(void *)(v1 + 248);
  uint64_t v46 = *(void *)(v1 + 256);
  uint64_t v47 = *(void *)(v1 + 240);
  v63(v46, v38, 1LL, v37);
  sub_10040B62C(v46);
  sub_100224DB4(v46);
  uint64_t v48 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56LL))(v45, 1LL, 1LL, v48);
  uint64_t v49 = static AirDropActor.shared;
  unint64_t v50 = sub_100205CD8();
  id v51 = (void *)swift_allocObject(&unk_1005E0D78, 40LL, 7LL);
  v51[2] = v49;
  v51[3] = v50;
  v51[4] = v47;
  swift_retain();
  swift_retain();
  uint64_t v52 = sub_1001B37E8(v45, (uint64_t)&unk_100654A68, (uint64_t)v51);
  swift_release(v52);
  swift_beginAccess(v47 + 136, v1 + 48, 0LL, 0LL);
  sub_10019A708((void *)(v47 + 136), *(void *)(v47 + 160));
  sub_10036FEB0();

  uint64_t v54 = *(void *)(v1 + 272);
  uint64_t v53 = *(void *)(v1 + 280);
  uint64_t v56 = *(void *)(v1 + 256);
  uint64_t v55 = *(void *)(v1 + 264);
  uint64_t v57 = *(void *)(v1 + 248);
  swift_task_dealloc(*(void *)(v1 + 304));
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10040CAF0()
{
  uint64_t v1 = *(void *)(v0 + 384);
  id v2 = *(const char **)(v0 + 352);
  id v3 = *(id *)(v0 + 360);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  id v4 = v3;
  uint64_t v5 = swift_errorRetain(v1);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v31 = v7;
    log = v6;
    uint64_t v8 = *(void *)(v0 + 352);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    __n128 v30 = (void *)swift_slowAlloc(16LL, -1LL);
    uint64_t v32 = swift_slowAlloc(32LL, -1LL);
    v34[0] = v32;
    *(_DWORD *)uint64_t v9 = 136315650;
    if (v8)
    {
      uint64_t v10 = *(void *)(v0 + 344);
      uint64_t v11 = *(const char **)(v0 + 352);
      uint64_t v12 = v11;
    }

    else
    {
      v34[1] = 0LL;
      v34[2] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(17LL);
      swift_bridgeObjectRelease((const char *)0xE000000000000000LL);
      uint64_t v11 = *(const char **)(v0 + 352);
      uint64_t v12 = (const char *)0x80000001005046B0LL;
      uint64_t v10 = 0xD000000000000015LL;
    }

    uint64_t v16 = *(void *)(v0 + 384);
    id v17 = *(void **)(v0 + 360);
    swift_bridgeObjectRetain(v11);
    *(void *)(v0 + 192) = sub_10018CDB4(v10, (unint64_t)v12, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease_n(v11, 2LL);
    *(_WORD *)(v9 + 12) = 2112;
    *(void *)(v0 + 200) = v17;
    id v18 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v9 + 14, v9 + 22);
    *__n128 v30 = v17;

    *(_WORD *)(v9 + 22) = 2112;
    swift_errorRetain(v16);
    uint64_t v19 = _swift_stdlib_bridgeErrorToNSError(v16);
    *(void *)(v0 + 208) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v9 + 24, v9 + 32);
    v30[1] = v19;
    swift_errorRelease(v16);
    swift_errorRelease(v16);
    _os_log_impl( (void *)&_mh_execute_header,  log,  v31,  "Failed to provision pseudonym for service %s and %@ with error: %@",  (uint8_t *)v9,  0x20u);
    uint64_t v20 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v30, 2LL, v20);
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    uint64_t v13 = *(void *)(v0 + 384);
    uint64_t v15 = *(void *)(v0 + 352);
    uint64_t v14 = *(void **)(v0 + 360);

    swift_bridgeObjectRelease_n(v15, 2LL);
    swift_errorRelease(v13);
    swift_errorRelease(v13);
  }

  uint64_t v21 = *(void *)(v0 + 384);
  uint64_t v22 = *(void **)(v0 + 360);
  uint64_t v23 = *(void *)(v0 + 240);
  swift_beginAccess(v23 + 136, v0 + 168, 0LL, 0LL);
  sub_10019A708((void *)(v23 + 136), *(void *)(v23 + 160));
  sub_10036FD28();

  swift_errorRelease(v21);
  uint64_t v24 = *(void *)(v0 + 272);
  uint64_t v25 = *(void *)(v0 + 280);
  uint64_t v27 = *(void *)(v0 + 256);
  uint64_t v26 = *(void *)(v0 + 264);
  uint64_t v28 = *(void *)(v0 + 248);
  swift_task_dealloc(*(void *)(v0 + 304));
  swift_task_dealloc(v25);
  swift_task_dealloc(v24);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10040CE50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a4;
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_10040CEB8, static AirDropActor.shared, 0LL);
}

uint64_t sub_10040CEB8()
{
  uint64_t v1 = sub_1001D8D98();
  *(void *)(v0 + 24) = v1;
  id v2 = (void *)swift_task_alloc(dword_100654A74);
  *(void *)(v0 + 32) = v2;
  *id v2 = v0;
  v2[1] = sub_10040FE08;
  return sub_10040CF10((uint64_t)v1);
}

uint64_t sub_10040CF10(uint64_t a1)
{
  v2[2] = a1;
  void v2[3] = v1;
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v3 = static AirDropActor.shared;
  v2[4] = static AirDropActor.shared;
  return swift_task_switch(sub_10040CF7C, v3, 0LL);
}

uint64_t sub_10040CF7C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    char v2 = *(_BYTE *)(v1 + 32);
    *(_BYTE *)(v0 + 72) = v2;
    uint64_t v3 = -1LL;
    uint64_t v4 = -1LL << v2;
    if (-(-1LL << v2) < 64) {
      uint64_t v3 = ~(-1LL << -(char)v4);
    }
    unint64_t v5 = v3 & *(void *)(v1 + 64);
    swift_bridgeObjectRetain((const char *)v1);
    if (v5)
    {
      uint64_t v7 = 0LL;
      unint64_t v8 = __clz(__rbit64(v5));
      uint64_t v9 = (v5 - 1) & v5;
LABEL_6:
      *(void *)(v0 + 40) = v7;
      *(void *)(v0 + 48) = v9;
      uint64_t v10 = *(void **)(v6[7] + 8 * v8);
      *(void *)(v0 + 56) = v10;
      uint64_t v11 = dword_100654A7C;
      id v12 = v10;
      uint64_t v13 = (void *)swift_task_alloc(v11);
      *(void *)(v0 + 64) = v13;
      *uint64_t v13 = v0;
      v13[1] = sub_10040D0FC;
      return sub_10040E144((uint64_t)v12);
    }

    unint64_t v15 = 63 - v4;
    if ((unint64_t)(63 - v4) > 0x7F)
    {
      unint64_t v16 = v6[9];
      if (v16)
      {
        uint64_t v7 = 1LL;
LABEL_10:
        uint64_t v9 = (v16 - 1) & v16;
        unint64_t v8 = __clz(__rbit64(v16)) + (v7 << 6);
        goto LABEL_6;
      }

      if (v15 >= 0xC0)
      {
        unint64_t v16 = v6[10];
        if (v16)
        {
          uint64_t v7 = 2LL;
          goto LABEL_10;
        }

        if (v15 >= 0x100)
        {
          unint64_t v16 = v6[11];
          if (v16)
          {
            uint64_t v7 = 3LL;
            goto LABEL_10;
          }

          if (v15 >= 0x140)
          {
            unint64_t v16 = v6[12];
            if (v16)
            {
              uint64_t v7 = 4LL;
              goto LABEL_10;
            }

            uint64_t v17 = 0LL;
            uint64_t v18 = v15 >> 6;
            if (v18 <= 5) {
              uint64_t v18 = 5LL;
            }
            uint64_t v19 = v18 - 5;
            while (v19 != v17)
            {
              unint64_t v16 = v6[v17++ + 13];
              if (v16)
              {
                uint64_t v7 = v17 + 4;
                goto LABEL_10;
              }
            }
          }
        }
      }
    }

    swift_release(v6);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10040D0FC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 64LL));
  return swift_task_switch(sub_10040D154, v1, 0LL);
}

void sub_10040D154()
{
  int64_t v1 = *(void *)(v0 + 40);
  unint64_t v2 = *(void *)(v0 + 48);
  if (v2)
  {
    unint64_t v3 = __clz(__rbit64(v2));
    uint64_t v4 = (v2 - 1) & v2;
    unint64_t v5 = v3 | (v1 << 6);
    uint64_t v6 = *(void *)(v0 + 16);
LABEL_3:
    *(void *)(v0 + 40) = v1;
    *(void *)(v0 + 48) = v4;
    uint64_t v7 = *(void **)(*(void *)(v6 + 56) + 8 * v5);
    *(void *)(v0 + 56) = v7;
    uint64_t v8 = dword_100654A7C;
    id v9 = v7;
    uint64_t v10 = (void *)swift_task_alloc(v8);
    *(void *)(v0 + 64) = v10;
    void *v10 = v0;
    v10[1] = sub_10040D0FC;
    sub_10040E144((uint64_t)v9);
    return;
  }

  int64_t v11 = v1 + 1;
  if (__OFADD__(v1, 1LL))
  {
    __break(1u);
  }

  else
  {
    int64_t v12 = (unint64_t)((1LL << *(_BYTE *)(v0 + 72)) + 63) >> 6;
    uint64_t v6 = *(void *)(v0 + 16);
    if (v11 >= v12) {
      goto LABEL_18;
    }
    uint64_t v13 = v6 + 64;
    unint64_t v14 = *(void *)(v6 + 64 + 8 * v11);
    ++v1;
    if (v14)
    {
LABEL_7:
      uint64_t v4 = (v14 - 1) & v14;
      unint64_t v5 = __clz(__rbit64(v14)) + (v1 << 6);
      goto LABEL_3;
    }

    int64_t v1 = v11 + 1;
    if (v11 + 1 >= v12) {
      goto LABEL_18;
    }
    unint64_t v14 = *(void *)(v13 + 8 * v1);
    if (v14) {
      goto LABEL_7;
    }
    int64_t v1 = v11 + 2;
    if (v11 + 2 >= v12) {
      goto LABEL_18;
    }
    unint64_t v14 = *(void *)(v13 + 8 * v1);
    if (v14) {
      goto LABEL_7;
    }
    int64_t v15 = v11 + 3;
    if (v15 >= v12)
    {
LABEL_18:
      swift_release(v6);
      (*(void (**)(void))(v0 + 8))();
      return;
    }

    unint64_t v14 = *(void *)(v13 + 8 * v15);
    if (v14)
    {
      int64_t v1 = v15;
      goto LABEL_7;
    }

    while (1)
    {
      int64_t v1 = v15 + 1;
      if (__OFADD__(v15, 1LL)) {
        break;
      }
      if (v1 >= v12) {
        goto LABEL_18;
      }
      unint64_t v14 = *(void *)(v13 + 8 * v1);
      ++v15;
      if (v14) {
        goto LABEL_7;
      }
    }
  }

  __break(1u);
}

uint64_t sub_10040D2B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[4] = a4;
  v5[5] = a5;
  uint64_t v6 = type metadata accessor for CancellationError(0LL);
  v5[6] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[7] = v7;
  v5[8] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100183098(&qword_100646560);
  v5[9] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for ContinuousClock(0LL);
  v5[10] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[11] = v10;
  v5[12] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v11 = static AirDropActor.shared;
  v5[13] = static AirDropActor.shared;
  return swift_task_switch(sub_10040D394, v11, 0LL);
}

uint64_t sub_10040D394(uint64_t a1)
{
  uint64_t v2 = ContinuousClock.init()(a1);
  double v3 = Date.timeIntervalSinceNow.getter(v2);
  uint64_t v4 = static Duration.seconds(_:)(v3);
  uint64_t v6 = v5;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1006461D8 + dword_1006461D8);
  uint64_t v7 = (void *)swift_task_alloc(unk_1006461DC);
  *(void *)(v1 + 112) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_10040D428;
  return v9(v4, v6, 0LL, 0LL, 1);
}

uint64_t sub_10040D428()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 112);
  uint64_t v5 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 96);
  uint64_t v6 = *(void *)(*v1 + 80);
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0) {
    uint64_t v7 = sub_10040D590;
  }
  else {
    uint64_t v7 = sub_10040D4B4;
  }
  return swift_task_switch(v7, *(void *)(v2 + 104), 0LL);
}

uint64_t sub_10040D4B4()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v1, 1LL, 1LL, v3);
  uint64_t v4 = static AirDropActor.shared;
  unint64_t v5 = sub_100205CD8();
  uint64_t v6 = (void *)swift_allocObject(&unk_1005E0DC8, 40LL, 7LL);
  v6[2] = v4;
  v6[3] = v5;
  v6[4] = v2;
  swift_retain();
  swift_retain();
  uint64_t v7 = sub_1001B37E8(v1, (uint64_t)&unk_100654A98, (uint64_t)v6);
  swift_release(v7);
  uint64_t v8 = *(void *)(v0 + 64);
  uint64_t v9 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 96));
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10040D590()
{
  uint64_t v1 = *(void *)(v0 + 120);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 48);
  swift_errorRetain(v1);
  uint64_t v4 = sub_100183098(&qword_100645710);
  if ((swift_dynamicCast(v2, v0 + 16, v4, v3, 0LL) & 1) != 0)
  {
    swift_errorRelease(*(void *)(v0 + 120));
    if (qword_100644358 != -1) {
      swift_once(&qword_100644358, sub_10040AE6C);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    uint64_t v6 = sub_100186DE4(v5, (uint64_t)qword_100654900);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Cancelled pseudonym expiration task", v9, 2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    uint64_t v11 = *(void *)(v0 + 56);
    uint64_t v10 = *(void *)(v0 + 64);
    uint64_t v12 = *(void *)(v0 + 48);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    swift_errorRelease(*(void *)(v0 + 16));
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 16));
    if (qword_100644358 != -1) {
      swift_once(&qword_100644358, sub_10040AE6C);
    }
    uint64_t v13 = *(void *)(v0 + 120);
    uint64_t v14 = type metadata accessor for Logger(0LL);
    sub_100186DE4(v14, (uint64_t)qword_100654900);
    swift_errorRetain(v13);
    uint64_t v15 = swift_errorRetain(v13);
    unint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.error.getter(v16);
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v19 = *(void *)(v0 + 120);
    if (v18)
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v21 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v20 = 138412290;
      swift_errorRetain(v19);
      uint64_t v22 = _swift_stdlib_bridgeErrorToNSError(v19);
      *(void *)(v0 + 24) = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v20 + 4, v20 + 12);
      *uint64_t v21 = v22;
      swift_errorRelease(v19);
      swift_errorRelease(v19);
      _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "Failed to start task for pseudonym expiration with error %@",  v20,  0xCu);
      uint64_t v23 = sub_100183098(&qword_1006454E0);
      swift_arrayDestroy(v21, 1LL, v23);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);

      swift_errorRelease(v19);
    }

    else
    {
      swift_errorRelease(*(void *)(v0 + 120));
      swift_errorRelease(v19);
      swift_errorRelease(v19);
    }
  }

  uint64_t v24 = *(void *)(v0 + 64);
  uint64_t v25 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 96));
  swift_task_dealloc(v25);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10040D898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a4;
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_10040D900, static AirDropActor.shared, 0LL);
}

uint64_t sub_10040D900()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_100654A5C);
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10040D950;
  return sub_10040B8F8();
}

uint64_t sub_10040D950()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 24));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10040D998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[4] = a4;
  v5[5] = a5;
  uint64_t v6 = type metadata accessor for CancellationError(0LL);
  v5[6] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[7] = v7;
  v5[8] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100183098(&qword_100646560);
  v5[9] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for ContinuousClock(0LL);
  v5[10] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[11] = v10;
  v5[12] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v11 = static AirDropActor.shared;
  v5[13] = static AirDropActor.shared;
  return swift_task_switch(sub_10040DA78, v11, 0LL);
}

uint64_t sub_10040DA78(uint64_t a1)
{
  uint64_t v2 = ContinuousClock.init()(a1);
  double v3 = Date.timeIntervalSinceNow.getter(v2);
  uint64_t v4 = static Duration.seconds(_:)(v3);
  uint64_t v6 = v5;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1006461D8 + dword_1006461D8);
  uint64_t v7 = (void *)swift_task_alloc(unk_1006461DC);
  *(void *)(v1 + 112) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_10040DB0C;
  return v9(v4, v6, 0LL, 0LL, 1);
}

uint64_t sub_10040DB0C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 112);
  uint64_t v5 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 96);
  uint64_t v6 = *(void *)(*v1 + 80);
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0) {
    uint64_t v7 = sub_10040DC74;
  }
  else {
    uint64_t v7 = sub_10040DB98;
  }
  return swift_task_switch(v7, *(void *)(v2 + 104), 0LL);
}

uint64_t sub_10040DB98()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v1, 1LL, 1LL, v3);
  uint64_t v4 = static AirDropActor.shared;
  unint64_t v5 = sub_100205CD8();
  uint64_t v6 = (void *)swift_allocObject(&unk_1005E0D50, 40LL, 7LL);
  v6[2] = v4;
  v6[3] = v5;
  v6[4] = v2;
  swift_retain();
  swift_retain();
  uint64_t v7 = sub_1001B37E8(v1, (uint64_t)&unk_100654A50, (uint64_t)v6);
  swift_release(v7);
  uint64_t v8 = *(void *)(v0 + 64);
  uint64_t v9 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 96));
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10040DC74()
{
  uint64_t v1 = *(void *)(v0 + 120);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 48);
  swift_errorRetain(v1);
  uint64_t v4 = sub_100183098(&qword_100645710);
  if ((swift_dynamicCast(v2, v0 + 16, v4, v3, 0LL) & 1) != 0)
  {
    swift_errorRelease(*(void *)(v0 + 120));
    if (qword_100644358 != -1) {
      swift_once(&qword_100644358, sub_10040AE6C);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    uint64_t v6 = sub_100186DE4(v5, (uint64_t)qword_100654900);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Cancelled after first use expiration task", v9, 2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    uint64_t v11 = *(void *)(v0 + 56);
    uint64_t v10 = *(void *)(v0 + 64);
    uint64_t v12 = *(void *)(v0 + 48);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    swift_errorRelease(*(void *)(v0 + 16));
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 16));
    if (qword_100644358 != -1) {
      swift_once(&qword_100644358, sub_10040AE6C);
    }
    uint64_t v13 = *(void *)(v0 + 120);
    uint64_t v14 = type metadata accessor for Logger(0LL);
    sub_100186DE4(v14, (uint64_t)qword_100654900);
    swift_errorRetain(v13);
    uint64_t v15 = swift_errorRetain(v13);
    unint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.error.getter(v16);
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v19 = *(void *)(v0 + 120);
    if (v18)
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v21 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v20 = 138412290;
      swift_errorRetain(v19);
      uint64_t v22 = _swift_stdlib_bridgeErrorToNSError(v19);
      *(void *)(v0 + 24) = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v20 + 4, v20 + 12);
      *uint64_t v21 = v22;
      swift_errorRelease(v19);
      swift_errorRelease(v19);
      _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "Failed to start task for after first use expiration with error %@",  v20,  0xCu);
      uint64_t v23 = sub_100183098(&qword_1006454E0);
      swift_arrayDestroy(v21, 1LL, v23);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);

      swift_errorRelease(v19);
    }

    else
    {
      swift_errorRelease(*(void *)(v0 + 120));
      swift_errorRelease(v19);
      swift_errorRelease(v19);
    }
  }

  uint64_t v24 = *(void *)(v0 + 64);
  uint64_t v25 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 96));
  swift_task_dealloc(v25);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10040DF7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a4;
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_10040DFE4, static AirDropActor.shared, 0LL);
}

uint64_t sub_10040DFE4()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_100654A5C);
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10040FE0C;
  return sub_10040B8F8();
}

uint64_t sub_10040E034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a4;
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_10040E09C, static AirDropActor.shared, 0LL);
}

uint64_t sub_10040E09C()
{
  uint64_t v1 = sub_1001D8D98();
  *(void *)(v0 + 24) = v1;
  uint64_t v2 = (void *)swift_task_alloc(dword_100654A74);
  *(void *)(v0 + 32) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10040E0F4;
  return sub_10040CF10((uint64_t)v1);
}

uint64_t sub_10040E0F4()
{
  uint64_t v1 = *(void *)(*v0 + 24);
  uint64_t v3 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 32));
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10040E144(uint64_t a1)
{
  v2[18] = a1;
  v2[19] = v1;
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v3 = static AirDropActor.shared;
  v2[20] = static AirDropActor.shared;
  return swift_task_switch(sub_10040E1B0, v3, 0LL);
}

uint64_t sub_10040E1B0()
{
  uint64_t v1 = (void *)v0[19];
  uint64_t v2 = v1 + 2;
  uint64_t v3 = v1[5];
  uint64_t v4 = v1[6];
  sub_10019A708(v1 + 2, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  uint64_t v7 = v6;
  v0[21] = v5;
  v0[22] = v6;
  if (qword_100644358 != -1) {
    swift_once(&qword_100644358, sub_10040AE6C);
  }
  os_log_type_t v8 = (void *)v0[18];
  uint64_t v9 = type metadata accessor for Logger(0LL);
  v0[23] = sub_100186DE4(v9, (uint64_t)qword_100654900);
  swift_bridgeObjectRetain_n(v7, 2LL);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = (void *)v0[18];
  if (v12)
  {
    uint64_t v26 = v5;
    uint64_t v27 = v1;
    uint64_t v28 = v10;
    double v29 = v1 + 2;
    uint64_t v32 = v0 + 17;
    uint64_t v14 = swift_slowAlloc(22LL, -1LL);
    uint64_t v15 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v31 = swift_slowAlloc(32LL, -1LL);
    v34[0] = v31;
    *(_DWORD *)uint64_t v14 = 138412546;
    v0[16] = v13;
    id v16 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 17, v14 + 4, v14 + 12);
    __n128 v30 = v15;
    *uint64_t v15 = v13;

    *(_WORD *)(v14 + 12) = 2080;
    if (v7)
    {
      os_log_type_t v17 = v7;
      BOOL v18 = v28;
      uint64_t v2 = v29;
      uint64_t v19 = v26;
    }

    else
    {
      v34[1] = 0LL;
      v34[2] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(17LL);
      swift_bridgeObjectRelease((const char *)0xE000000000000000LL);
      os_log_type_t v17 = (const char *)0x80000001005046B0LL;
      uint64_t v19 = 0xD000000000000015LL;
      BOOL v18 = v28;
      uint64_t v2 = v29;
    }

    uint64_t v1 = v27;
    swift_bridgeObjectRetain(v7, v26);
    *uint64_t v32 = sub_10018CDB4(v19, (unint64_t)v17, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v32, v0 + 18, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease_n(v7, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v18, v11, "Revoking pseudonym %@ for service %s", (uint8_t *)v14, 0x16u);
    uint64_t v20 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v30, 1LL, v20);
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_arrayDestroy(v31, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v7, 2LL);
  }

  uint64_t v21 = v1[5];
  uint64_t v22 = v1[6];
  sub_10019A708(v2, v21);
  uint64_t v23 = *(int **)(v22 + 32);
  uint64_t v33 = (int *)((char *)v23 + *v23);
  uint64_t v24 = (void *)swift_task_alloc(v23[1]);
  v0[24] = v24;
  *uint64_t v24 = v0;
  v24[1] = sub_10040E4EC;
  return ((uint64_t (*)(void, uint64_t, uint64_t))v33)(v0[18], v21, v22);
}

uint64_t sub_10040E4EC(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 192);
  *(void *)(*v2 + 200) = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = *(void *)(v4 + 160);
  if (v1)
  {
    uint64_t v7 = sub_10040EA80;
  }

  else
  {
    *(_BYTE *)(v4 + 208) = a1 & 1;
    uint64_t v7 = sub_10040E564;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_10040E564()
{
  int v1 = *(unsigned __int8 *)(v0 + 208);
  uint64_t v2 = *(const char **)(v0 + 176);
  id v3 = *(id *)(v0 + 144);
  swift_bridgeObjectRetain(v2);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void *)(v0 + 176);
  uint64_t v9 = *(void **)(v0 + 144);
  if (v1 == 1)
  {
    uint64_t v10 = v0 + 16;
    uint64_t v11 = v0 + 48;
    if (v7)
    {
      log = v5;
      uint64_t v12 = swift_slowAlloc(22LL, -1LL);
      uint64_t v39 = v8;
      uint64_t v13 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v40 = swift_slowAlloc(32LL, -1LL);
      uint64_t v45 = v40;
      *(_DWORD *)uint64_t v12 = 138412546;
      *(void *)(v0 + 112) = v9;
      id v14 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v12 + 4, v12 + 12);
      *uint64_t v13 = v9;
      uint64_t v15 = v13;

      *(_WORD *)(v12 + 12) = 2080;
      if (v39)
      {
        uint64_t v16 = *(void *)(v0 + 168);
        os_log_type_t v17 = *(const char **)(v0 + 176);
        BOOL v18 = v17;
        swift_bridgeObjectRetain(v17, v39);
      }

      else
      {
        uint64_t v16 = 0xD000000000000015LL;
        uint64_t v46 = 0LL;
        unint64_t v47 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(17LL);
        swift_bridgeObjectRelease((const char *)0xE000000000000000LL);
        os_log_type_t v17 = *(const char **)(v0 + 176);
        BOOL v18 = (const char *)0x80000001005046B0LL;
        swift_bridgeObjectRetain(v17, 0LL);
      }

      *(void *)(v0 + 120) = sub_10018CDB4(v16, (unint64_t)v18, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v12 + 14, v12 + 22);
      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease_n(v17, 2LL);
      _os_log_impl((void *)&_mh_execute_header, log, v6, "Revoked pseudonym %@ for service %s", (uint8_t *)v12, 0x16u);
      uint64_t v25 = sub_100183098(&qword_1006454E0);
      swift_arrayDestroy(v15, 1LL, v25);
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_arrayDestroy(v40, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);

      uint64_t v10 = v0 + 16;
      uint64_t v11 = v0 + 48;
    }

    else
    {

      swift_bridgeObjectRelease_n(v8, 2LL);
    }

    uint64_t v26 = *(void *)(v0 + 152);
    id v27 = [*(id *)(v0 + 144) URI];
    id v28 = [v27 prefixedURI];

    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    uint64_t v31 = v30;

    uint64_t v32 = v26 + 96;
    swift_beginAccess(v26 + 96, v11, 33LL, 0LL);
    uint64_t v33 = *(void *)(v26 + 120);
    uint64_t v34 = *(void *)(v26 + 128);
    sub_1002499B4(v32, v33);
    uint64_t v35 = (void (*)(uint64_t, void))(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 72))( v10,  v33,  v34);
    id v36 = (void *)sub_1001C99E0(v29, (uint64_t)v31);
    v35(v10, 0LL);
    swift_endAccess(v11);
    swift_bridgeObjectRelease(v31);
    goto LABEL_15;
  }

  if (v7)
  {
    os_log_type_t v41 = v6;
    loga = v5;
    uint64_t v19 = swift_slowAlloc(22LL, -1LL);
    uint64_t v20 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v42 = swift_slowAlloc(32LL, -1LL);
    uint64_t v45 = v42;
    *(_DWORD *)uint64_t v19 = 138412546;
    *(void *)(v0 + 80) = v9;
    id v21 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v19 + 4, v19 + 12);
    *uint64_t v20 = v9;

    *(_WORD *)(v19 + 12) = 2080;
    if (v8)
    {
      uint64_t v23 = *(void *)(v0 + 168);
      uint64_t v22 = *(const char **)(v0 + 176);
      uint64_t v24 = v22;
    }

    else
    {
      uint64_t v23 = 0xD000000000000015LL;
      uint64_t v46 = 0LL;
      unint64_t v47 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(17LL);
      swift_bridgeObjectRelease((const char *)0xE000000000000000LL);
      uint64_t v22 = *(const char **)(v0 + 176);
      uint64_t v24 = (const char *)0x80000001005046B0LL;
    }

    swift_bridgeObjectRetain(v22);
    *(void *)(v0 + 88) = sub_10018CDB4(v23, (unint64_t)v24, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease_n(v22, 2LL);
    id v36 = loga;
    _os_log_impl( (void *)&_mh_execute_header,  loga,  v41,  "Did not revoke pseudonym %@ for service %s",  (uint8_t *)v19,  0x16u);
    uint64_t v37 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v20, 1LL, v37);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_arrayDestroy(v42, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);
LABEL_15:

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  swift_bridgeObjectRelease_n(v8, 2LL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10040EA80()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(const char **)(v0 + 176);
  id v3 = *(id *)(v0 + 144);
  swift_errorRetain(v1);
  id v4 = v3;
  swift_bridgeObjectRetain(v2);
  uint64_t v5 = swift_errorRetain(v1);
  os_log_type_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter(v6);
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 176);
  uint64_t v10 = *(void **)(v0 + 144);
  if (v8)
  {
    os_log_type_t v22 = v7;
    log = v6;
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    uint64_t v12 = (void *)swift_slowAlloc(16LL, -1LL);
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    v25[0] = v23;
    *(_DWORD *)uint64_t v11 = 138412802;
    *(void *)(v0 + 96) = v10;
    id v13 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v11 + 4, v11 + 12);
    *uint64_t v12 = v10;

    *(_WORD *)(v11 + 12) = 2080;
    if (v9)
    {
      uint64_t v14 = *(void *)(v0 + 168);
      uint64_t v15 = *(const char **)(v0 + 176);
      uint64_t v16 = v15;
    }

    else
    {
      v25[1] = 0LL;
      _OWORD v25[2] = 0xE000000000000000LL;
      _StringGuts.grow(_:)(17LL);
      swift_bridgeObjectRelease((const char *)0xE000000000000000LL);
      uint64_t v15 = *(const char **)(v0 + 176);
      uint64_t v16 = (const char *)0x80000001005046B0LL;
      uint64_t v14 = 0xD000000000000015LL;
    }

    uint64_t v18 = *(void *)(v0 + 200);
    swift_bridgeObjectRetain(v15);
    *(void *)(v0 + 104) = sub_10018CDB4(v14, (unint64_t)v16, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease_n(v15, 2LL);
    *(_WORD *)(v11 + 22) = 2112;
    swift_errorRetain(v18);
    uint64_t v19 = _swift_stdlib_bridgeErrorToNSError(v18);
    *(void *)(v0 + 72) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v11 + 24, v11 + 32);
    v12[1] = v19;
    swift_errorRelease(v18);
    swift_errorRelease(v18);
    _os_log_impl( (void *)&_mh_execute_header,  log,  v22,  "Failed to revoke pseudonym %@ for service %s with error: %@",  (uint8_t *)v11,  0x20u);
    uint64_t v20 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v12, 2LL, v20);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    swift_errorRelease(v18);
  }

  else
  {
    uint64_t v17 = *(void *)(v0 + 200);
    swift_errorRelease(v17);

    swift_bridgeObjectRelease_n(v9, 2LL);
    swift_errorRelease(v17);
    swift_errorRelease(v17);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10040ED70()
{
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

uint64_t sub_10040EDE0()
{
  return type metadata accessor for SDAirDropPseudonymService(0LL);
}

uint64_t type metadata accessor for SDAirDropPseudonymService(uint64_t a1)
{
  uint64_t result = qword_100654960;
  if (!qword_100654960) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SDAirDropPseudonymService);
  }
  return result;
}

void sub_10040EE24(uint64_t a1)
{
  v4[0] = "(";
  v4[1] = "(";
  void v4[2] = "(";
  void v4[3] = "(";
  void v4[4] = &unk_1004DB458;
  v4[5] = &unk_1004DB458;
  sub_10019F1DC(319LL);
  if (v3 <= 0x3F)
  {
    void v4[6] = *(void *)(v2 - 8) + 64LL;
    void v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[8] = (char *)&value witness table for Builtin.Int64 + 64;
    void v4[9] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_updateClassMetadata2(a1, 256LL, 10LL, v4, a1 + 80);
  }

uint64_t sub_10040EEC8@<X0>(uint64_t *a1@<X8>)
{
  v2.Class isa = AnyHashable._bridgeToObjectiveC()().isa;
  uint64_t v3 = objc_opt_self(&OBJC_CLASS___IDSAccount);
  uint64_t result = swift_dynamicCastObjCClass(v2.isa, v3);
  if (!result)
  {

    uint64_t result = 0LL;
  }

  *a1 = result;
  return result;
}

BOOL sub_10040EF18(void *a1)
{
  return *a1 != 0LL;
}

id sub_10040EF28@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = *a1;
  if (result)
  {
    *a2 = result;
    return result;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10040EF3C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100183098(&qword_1006457E8);
  uint64_t v5 = __chkstk_darwin(v4);
  os_log_type_t v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v57 - v8;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v57 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v57 - v18;
  if (!a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1LL, 1LL, v10);
    goto LABEL_10;
  }

  id v20 = [a1 properties];
  id v21 = [v20 expirationDate];

  static Date._unconditionallyBridgeFromObjectiveC(_:)(v21);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0LL, 1LL, v10);
  os_log_type_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v22(v9, 1LL, v10) == 1)
  {
LABEL_10:
    sub_100224DB4((uint64_t)v9);
    if (qword_100644358 != -1) {
      swift_once(&qword_100644358, sub_10040AE6C);
    }
    uint64_t v30 = type metadata accessor for Logger(0LL);
    uint64_t v31 = sub_100186DE4(v30, (uint64_t)qword_100654900);
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Pseudonym is not set", v34, 2u);
      swift_slowDealloc(v34, -1LL, -1LL);
    }

    return 0LL;
  }

  uint64_t v23 = *(uint64_t (**)(char *, char *, uint64_t))(v11 + 32);
  uint64_t v24 = v23(v19, v9, v10);
  static Date.now.getter(v24);
  sub_1001D95A8(a2, (uint64_t)v7);
  if (v22(v7, 1LL, v10) == 1)
  {
    sub_100224DB4((uint64_t)v7);
    if (qword_100644358 != -1) {
      swift_once(&qword_100644358, sub_10040AE6C);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    uint64_t v26 = sub_100186DE4(v25, (uint64_t)qword_100654900);
    id v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Pseudonym has not been used", v29, 2u);
      swift_slowDealloc(v29, -1LL, -1LL);
    }
  }

  else
  {
    v23(v14, v7, v10);
    if (qword_100644358 != -1) {
      swift_once(&qword_100644358, sub_10040AE6C);
    }
    uint64_t v35 = type metadata accessor for Logger(0LL);
    uint64_t v36 = sub_100186DE4(v35, (uint64_t)qword_100654900);
    uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Current pseudonym has been used", v39, 2u);
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    uint64_t v40 = static Date.< infix(_:_:)(v17, v14);
    if ((v40 & 1) == 0)
    {
      uint64_t v54 = (os_log_s *)Logger.logObject.getter(v40);
      os_log_type_t v55 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v56 = 0;
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "Pseudonym is not valid; expired after first use", v56, 2u);
        swift_slowDealloc(v56, -1LL, -1LL);
      }

      uint64_t v53 = *(void (**)(char *, uint64_t))(v11 + 8);
      v53(v14, v10);
      v53(v17, v10);
      goto LABEL_35;
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }

  if ((static Date.< infix(_:_:)(v17, v19) & 1) == 0)
  {
    if (qword_100644358 != -1) {
      swift_once(&qword_100644358, sub_10040AE6C);
    }
    uint64_t v48 = type metadata accessor for Logger(0LL);
    uint64_t v49 = sub_100186DE4(v48, (uint64_t)qword_100654900);
    unint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
    os_log_type_t v51 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v52 = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Pseudonym is not valid; expired", v52, 2u);
      swift_slowDealloc(v52, -1LL, -1LL);
    }

    uint64_t v53 = *(void (**)(char *, uint64_t))(v11 + 8);
    v53(v17, v10);
LABEL_35:
    v53(v19, v10);
    return 0LL;
  }

  if (qword_100644358 != -1) {
    swift_once(&qword_100644358, sub_10040AE6C);
  }
  uint64_t v41 = type metadata accessor for Logger(0LL);
  uint64_t v42 = sub_100186DE4(v41, (uint64_t)qword_100654900);
  id v43 = (os_log_s *)Logger.logObject.getter(v42);
  os_log_type_t v44 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v45 = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Pseudonym is valid", v45, 2u);
    swift_slowDealloc(v45, -1LL, -1LL);
  }

  uint64_t v46 = *(void (**)(char *, uint64_t))(v11 + 8);
  v46(v17, v10);
  v46(v19, v10);
  return 1LL;
}

uint64_t sub_10040F588()
{
  if ((sub_10033D56C() & 1) == 0)
  {
    if (qword_100644358 != -1) {
      swift_once(&qword_100644358, sub_10040AE6C);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    uint64_t v17 = sub_100186DE4(v16, (uint64_t)qword_100654900);
    NSObject v2 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v2, v18)) {
      goto LABEL_17;
    }
    uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v19 = 0;
    id v20 = "Pseudonym service is disabled";
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v2, v18, v20, v19, 2u);
    swift_slowDealloc(v19, -1LL, -1LL);
LABEL_17:

    return 0LL;
  }

  id v0 = objc_allocWithZone(&OBJC_CLASS___IDSAccountController);
  NSString v1 = String._bridgeToObjectiveC()();
  NSObject v2 = (os_log_s *)[v0 initWithService:v1];

  if (!v2)
  {
LABEL_12:
    if (qword_100644358 != -1) {
      swift_once(&qword_100644358, sub_10040AE6C);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    uint64_t v22 = sub_100186DE4(v21, (uint64_t)qword_100654900);
    NSObject v2 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v2, v18)) {
      goto LABEL_17;
    }
    uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v19 = 0;
    id v20 = "Pseudonym service does not have an IDS account";
    goto LABEL_16;
  }

  id v3 = -[os_log_s accounts](v2, "accounts");
  if (!v3)
  {

    goto LABEL_12;
  }

  uint64_t v4 = v3;
  uint64_t v5 = static Set._unconditionallyBridgeFromObjectiveC(_:)( v3,  &type metadata for AnyHashable,  &protocol witness table for AnyHashable);

  v34[0] = v5;
  v34[1] = (uint64_t)sub_10040EEC8;
  v34[2] = 0LL;
  uint64_t v34[3] = (uint64_t)sub_10040EF18;
  v34[4] = 0LL;
  v34[5] = (uint64_t)sub_10040EF28;
  v34[6] = 0LL;
  sub_10040A760(v34);
  os_log_type_t v7 = v6;
  swift_bridgeObjectRelease(v5);
  if (!v7)
  {
    if (qword_100644358 != -1) {
      swift_once(&qword_100644358, sub_10040AE6C);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    uint64_t v25 = sub_100186DE4(v24, (uint64_t)qword_100654900);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      os_log_type_t v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v28 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "Pseudonym service does not have an active IDS account",  v28,  2u);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    goto LABEL_17;
  }

  id v8 = v7;
  id v9 = [v8 pushToken];
  if (!v9)
  {
    if (qword_100644358 != -1) {
      swift_once(&qword_100644358, sub_10040AE6C);
    }
    uint64_t v29 = type metadata accessor for Logger(0LL);
    uint64_t v30 = sub_100186DE4(v29, (uint64_t)qword_100654900);
    uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      os_log_type_t v33 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v33 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  v32,  "Pseudonym service does not have an active IDS account push token",  v33,  2u);
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    goto LABEL_17;
  }

  uint64_t v10 = v9;
  uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
  unint64_t v13 = v12;

  unint64_t v14 = sub_100284B00();
  uint64_t v15 = Sequence<>.hexString(separator:uppercase:maxBytes:truncator:)( 0LL,  0xE000000000000000LL,  0LL,  0x7FFFFFFFFFFFFFFFLL,  3026478LL,  0xE300000000000000LL,  &type metadata for Data,  v14,  v11,  v13);

  sub_100189B20(v11, v13);
  return v15;
}

void *sub_10040F9D0(void *a1)
{
  return a1;
}

uint64_t sub_10040F9FC(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for Date(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL));
  uint64_t v10 = (void *)swift_task_alloc(dword_100654A3C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_100195708;
  return sub_10040D998(a1, v6, v7, v8, v9);
}

uint64_t sub_10040FAA4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_100654A4C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100195708;
  return sub_10040DF7C(a1, v4, v5, v6);
}

uint64_t sub_10040FB14(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_100654A64);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1001943E8;
  return sub_10040E034(a1, v4, v5, v6);
}

uint64_t sub_10040FB84()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10040FC14(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for Date(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL));
  uint64_t v10 = (void *)swift_task_alloc(dword_100654A84);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_100195708;
  return sub_10040D2B4(a1, v6, v7, v8, v9);
}

uint64_t sub_10040FCBC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_100654A94);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100195708;
  return sub_10040D898(a1, v4, v5, v6);
}

uint64_t sub_10040FD2C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_100654AA4);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100195708;
  return sub_10040B888();
}

uint64_t sub_10040FD9C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_100654AB4);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100195708;
  return sub_10040CE50(a1, v4, v5, v6);
}

uint64_t sub_10040FE14(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for SDAirDropDiscoveredEndpoint(0LL);
  v2[7] = v3;
  unint64_t v4 = (*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[8] = swift_task_alloc(v4);
  void v2[9] = swift_task_alloc(v4);
  v2[10] = swift_task_alloc(v4);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_10040FEBC, static AirDropActor.shared, 0LL);
}

uint64_t sub_10040FEBC()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 56);
  sub_10019140C(*(void *)(v0 + 40), v1);
  if (swift_getEnumCaseMultiPayload(v1, v2) == 2)
  {
    uint64_t v3 = *(void *)(v0 + 72);
    uint64_t v4 = *(void *)(v0 + 64);
    uint64_t v5 = *(void *)(v0 + 40);
    uint64_t v6 = *(void *)(v0 + 48);
    sub_1001A4BC8(*(void *)(v0 + 80), type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
    sub_10019140C(v5, v4);
    swift_beginAccess( v6 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropDiscoveredNearFieldDevice_allEndpoints,  v0 + 16,  33LL,  0LL);
    sub_1003B52D4(v3, v4);
    swift_endAccess(v0 + 16);
  }

  else
  {
    uint64_t v3 = *(void *)(v0 + 80);
  }

  sub_1001A4BC8(v3, type metadata accessor for SDAirDropDiscoveredEndpoint);
  uint64_t v7 = *(void *)(v0 + 72);
  uint64_t v8 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 80));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10040FFB0()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100186DFC(v0, qword_100654AC0);
  uint64_t v1 = sub_100186DE4(v0, (uint64_t)qword_100654AC0);
  if (qword_100643FE8 != -1) {
    swift_once(&qword_100643FE8, sub_10023A448);
  }
  uint64_t v2 = sub_100186DE4(v0, (uint64_t)qword_100669628);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_100410040(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for NWEndpoint(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = sub_100183098(&qword_10064DA60);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v2 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropDiscoveredNearFieldDevice_allEndpoints) = &_swiftEmptySetSingleton;
  uint64_t v32 = a1;
  uint64_t v16 = UUID.uuidString.getter(v13);
  uint64_t v18 = v17;
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v16;
  *(void *)(v2 + 24) = v17;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1LL, 1LL, v11);
  sub_100411A2C((uint64_t)v10, v16, v18, (uint64_t)v15);
  sub_100187100((uint64_t)v10, &qword_10064DA60);
  uint64_t v30 = v12;
  uint64_t v31 = v11;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))( v2 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropDiscoveredNearFieldDevice_connectableUUID,  v15,  v11);
  *uint64_t v7 = nw_endpoint_create_application_service("com.apple.AirDrop", v15);
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for NWEndpoint.opaque(_:), v4);
  (*(void (**)(uint64_t, void *, uint64_t))(v5 + 32))( v2 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropDiscoveredNearFieldDevice_displayEndpoint,  v7,  v4);
  if (qword_100644360 != -1) {
    swift_once(&qword_100644360, sub_10040FFB0);
  }
  uint64_t v19 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v19, (uint64_t)qword_100654AC0);
  uint64_t v20 = swift_retain_n(v2, 2LL);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    uint64_t v34 = v24;
    *(_DWORD *)uint64_t v23 = 136315138;
    uint64_t v25 = *(void *)(v2 + 16);
    unint64_t v26 = *(void *)(v2 + 24);
    swift_bridgeObjectRetain(v26);
    uint64_t v33 = sub_10018CDB4(v25, v26, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v23 + 4, v23 + 12);
    swift_release_n(v2, 2LL);
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Creating NearFieldDevice %s", v23, 0xCu);
    swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  else
  {
    swift_release_n(v2, 2LL);
  }

  uint64_t v27 = v31;
  os_log_type_t v28 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
  v28(v32, v31);
  v28((uint64_t)v15, v27);
  return v2;
}

unint64_t sub_1004103B4()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain(v1);
  v3._uint64_t countAndFlagsBits = v2;
  v3._id object = v1;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v1);
  v4._uint64_t countAndFlagsBits = 41LL;
  v4._id object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  return 0xD000000000000010LL;
}

uint64_t sub_100410450()
{
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropDiscoveredNearFieldDevice_connectableUUID;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  Swift::String v3 = (char *)v0 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropDiscoveredNearFieldDevice_displayEndpoint;
  uint64_t v4 = type metadata accessor for NWEndpoint(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);
  swift_bridgeObjectRelease(*(void *)((char *)v0
                                      + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropDiscoveredNearFieldDevice_allEndpoints));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

uint64_t sub_1004104E0()
{
  return type metadata accessor for SDAirDropDiscoveredNearFieldDevice(0LL);
}

uint64_t type metadata accessor for SDAirDropDiscoveredNearFieldDevice(uint64_t a1)
{
  uint64_t result = qword_100654B08;
  if (!qword_100654B08) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SDAirDropDiscoveredNearFieldDevice);
  }
  return result;
}

uint64_t sub_100410524(uint64_t a1)
{
  v5[0] = &unk_1004DB4A8;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[1] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for NWEndpoint(319LL);
    if (v4 <= 0x3F)
    {
      v5[2] = *(void *)(result - 8) + 64LL;
      void v5[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
      uint64_t result = swift_updateClassMetadata2(a1, 256LL, 4LL, v5, a1 + 80);
      if (!result) {
        return 0LL;
      }
    }
  }

  return result;
}

unint64_t sub_1004105C4()
{
  return sub_1004103B4();
}

uint64_t sub_1004105E4@<X0>(uint64_t a1@<X8>)
{
  return sub_10028F740( &OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropDiscoveredNearFieldDevice_displayEndpoint,  (uint64_t (*)(void))&type metadata accessor for NWEndpoint,  a1);
}

uint64_t sub_1004105F8(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = sub_100183098(&qword_100649F58);
  v2[7] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for SDAirDropDiscoveredEndpoint(0LL);
  v2[8] = v4;
  void v2[9] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_1004106A8, static AirDropActor.shared, 0LL);
}

uint64_t sub_1004106A8()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  sub_10019140C(*(void *)(v0 + 40), v2);
  if (swift_getEnumCaseMultiPayload(v2, v1) == 2)
  {
    uint64_t v4 = *(void *)(v0 + 48);
    uint64_t v3 = *(void *)(v0 + 56);
    uint64_t v5 = *(void *)(v0 + 40);
    sub_1001A4BC8(*(void *)(v0 + 72), type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint);
    swift_beginAccess( v4 + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropDiscoveredNearFieldDevice_allEndpoints,  v0 + 16,  33LL,  0LL);
    sub_1003BE9C4(v5, v3);
    swift_endAccess(v0 + 16);
    sub_100187100(v3, &qword_100649F58);
  }

  else
  {
    sub_1001A4BC8(*(void *)(v0 + 72), type metadata accessor for SDAirDropDiscoveredEndpoint);
  }

  uint64_t v6 = *(void *)(v0 + 56);
  swift_task_dealloc(*(void *)(v0 + 72));
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100410788@<X0>(uint64_t a1@<X8>)
{
  return sub_10028F740( &OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropDiscoveredNearFieldDevice_connectableUUID,  (uint64_t (*)(void))&type metadata accessor for UUID,  a1);
}

uint64_t sub_10041079C()
{
  *(void *)(v1 + 40) = v0;
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_100410804, static AirDropActor.shared, 0LL);
}

uint64_t sub_100410804()
{
  uint64_t v1 = (void *)(**(void **)(v0 + 40)
                + OBJC_IVAR____TtC16DaemoniOSLibrary34SDAirDropDiscoveredNearFieldDevice_allEndpoints);
  swift_beginAccess(v1, v0 + 16, 0LL, 0LL);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = swift_bridgeObjectRetain(*v1);
  return v4(v2);
}

uint64_t sub_100410864(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_100654BCC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1001943E8;
  return sub_10040FE14(a1);
}

uint64_t sub_1004108B4(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc(dword_100654BD4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100195708;
  return sub_1004105F8(a1);
}

unint64_t sub_100410904(uint64_t a1)
{
  unint64_t result = sub_100410928();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100410928()
{
  unint64_t result = qword_100654BC0;
  if (!qword_100654BC0)
  {
    uint64_t v1 = type metadata accessor for SDAirDropDiscoveredNearFieldDevice(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1004DB514, v1);
    atomic_store(result, &qword_100654BC0);
  }

  return result;
}

uint64_t sub_100410970@<X0>(uint64_t a1@<X8>)
{
  uint64_t v80 = a1;
  uint64_t v79 = type metadata accessor for NWInterface.InterfaceSubtype(0LL);
  uint64_t v1 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  uint64_t v3 = (char *)&v77 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for NWInterface.InterfaceType(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100183098((uint64_t *)&unk_100654C08);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for NWPath(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  NWConnection.currentPath.getter(v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11) == 1)
  {
    sub_100187100((uint64_t)v10, (uint64_t *)&unk_100654C08);
    if (qword_100644368 != -1) {
      swift_once(&qword_100644368, sub_10041341C);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    uint64_t v17 = sub_100186DE4(v16, (uint64_t)qword_100654BE0);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Connection does not have a current path", v20, 2u);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    goto LABEL_7;
  }

  os_log_type_t v22 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  uint64_t v78 = v11;
  v22(v15, v10, v11);
  uint64_t v23 = *(void (**)(char *, void, uint64_t))(v5 + 104);
  v23(v7, enum case for NWInterface.InterfaceType.cellular(_:), v4);
  char v24 = NWPath.usesInterfaceType(_:)(v7);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v5 + 8);
  v25(v7, v4);
  unint64_t v26 = v15;
  if ((v24 & 1) != 0)
  {
    if (qword_100644368 != -1) {
      swift_once(&qword_100644368, sub_10041341C);
    }
    uint64_t v27 = type metadata accessor for Logger(0LL);
    uint64_t v28 = sub_100186DE4(v27, (uint64_t)qword_100654BE0);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Current path is using a cellular interface type", v31, 2u);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v26, v78);
    uint64_t v21 = (unsigned int *)&enum case for SFNWInterfaceType.cellular(_:);
    goto LABEL_33;
  }

  v23(v7, enum case for NWInterface.InterfaceType.wiredEthernet(_:), v4);
  char v32 = NWPath.usesInterfaceType(_:)(v7);
  uint64_t v33 = ((uint64_t (*)(char *, uint64_t))v25)(v7, v4);
  if ((v32 & 1) != 0)
  {
    if ((NWPath.isDirect.getter(v33) & 1) != 0)
    {
      if (qword_100644368 != -1) {
        swift_once(&qword_100644368, sub_10041341C);
      }
      uint64_t v34 = type metadata accessor for Logger(0LL);
      uint64_t v35 = sub_100186DE4(v34, (uint64_t)qword_100654BE0);
      uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
      os_log_type_t v37 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v36, v37))
      {
        os_log_type_t v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)os_log_type_t v38 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "Current path is using a direct wired interface type",  v38,  2u);
        swift_slowDealloc(v38, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v12 + 8))(v26, v78);
      uint64_t v21 = (unsigned int *)&enum case for SFNWInterfaceType.directWired(_:);
    }

    else
    {
      if (qword_100644368 != -1) {
        swift_once(&qword_100644368, sub_10041341C);
      }
      uint64_t v49 = type metadata accessor for Logger(0LL);
      uint64_t v50 = sub_100186DE4(v49, (uint64_t)qword_100654BE0);
      os_log_type_t v51 = (os_log_s *)Logger.logObject.getter(v50);
      os_log_type_t v52 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v51, v52))
      {
        uint64_t v53 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "Current path is using a wired interface type", v53, 2u);
        swift_slowDealloc(v53, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v12 + 8))(v26, v78);
      uint64_t v21 = (unsigned int *)&enum case for SFNWInterfaceType.wired(_:);
    }

    goto LABEL_33;
  }

  v23(v7, enum case for NWInterface.InterfaceType.wifi(_:), v4);
  char v39 = NWPath.usesInterfaceType(_:)(v7);
  v25(v7, v4);
  if ((v39 & 1) == 0)
  {
    if (qword_100644368 != -1) {
      swift_once(&qword_100644368, sub_10041341C);
    }
    uint64_t v57 = type metadata accessor for Logger(0LL);
    uint64_t v58 = sub_100186DE4(v57, (uint64_t)qword_100654BE0);
    uint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
    os_log_type_t v60 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v59, v60)) {
      goto LABEL_50;
    }
    uint64_t v61 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v61 = 0;
    unint64_t v62 = "Current path is using an unknown interface subtype";
    goto LABEL_49;
  }

  uint64_t v40 = *(void (**)(char *, void, uint64_t))(v1 + 104);
  uint64_t v41 = v79;
  v40(v3, enum case for NWInterface.InterfaceSubtype.wifiAWDL(_:), v79);
  char v42 = NWPath.usesInterfaceSubtype(_:)(v3);
  id v43 = *(void (**)(char *, uint64_t))(v1 + 8);
  v43(v3, v41);
  if ((v42 & 1) != 0)
  {
    if (qword_100644368 != -1) {
      swift_once(&qword_100644368, sub_10041341C);
    }
    uint64_t v44 = type metadata accessor for Logger(0LL);
    uint64_t v45 = sub_100186DE4(v44, (uint64_t)qword_100654BE0);
    uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
    os_log_type_t v47 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Current path is using an AWDL interface subtype", v48, 2u);
      swift_slowDealloc(v48, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v26, v78);
    uint64_t v21 = (unsigned int *)&enum case for SFNWInterfaceType.awdl(_:);
    goto LABEL_33;
  }

  v40(v3, enum case for NWInterface.InterfaceSubtype.wifiInfrastructure(_:), v41);
  char v63 = NWPath.usesInterfaceSubtype(_:)(v3);
  uint64_t v64 = ((uint64_t (*)(char *, uint64_t))v43)(v3, v41);
  if ((v63 & 1) == 0)
  {
    if (qword_100644368 != -1) {
      swift_once(&qword_100644368, sub_10041341C);
    }
    uint64_t v70 = type metadata accessor for Logger(0LL);
    uint64_t v71 = sub_100186DE4(v70, (uint64_t)qword_100654BE0);
    uint64_t v59 = (os_log_s *)Logger.logObject.getter(v71);
    os_log_type_t v60 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v59, v60)) {
      goto LABEL_50;
    }
    uint64_t v61 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v61 = 0;
    unint64_t v62 = "Current path is using an unknown WiFi interface subtype";
LABEL_49:
    _os_log_impl((void *)&_mh_execute_header, v59, v60, v62, v61, 2u);
    swift_slowDealloc(v61, -1LL, -1LL);
LABEL_50:

    (*(void (**)(char *, uint64_t))(v12 + 8))(v26, v78);
LABEL_7:
    uint64_t v21 = (unsigned int *)&enum case for SFNWInterfaceType.other(_:);
    goto LABEL_33;
  }

  if ((NWPath.isDirect.getter(v64) & 1) != 0)
  {
    if (qword_100644368 != -1) {
      swift_once(&qword_100644368, sub_10041341C);
    }
    uint64_t v65 = type metadata accessor for Logger(0LL);
    uint64_t v66 = sub_100186DE4(v65, (uint64_t)qword_100654BE0);
    double v67 = (os_log_s *)Logger.logObject.getter(v66);
    os_log_type_t v68 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v67, v68))
    {
      uint64_t v69 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v69 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v67,  v68,  "Current path is using a local WiFi interface subtype",  v69,  2u);
      swift_slowDealloc(v69, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v26, v78);
    uint64_t v21 = (unsigned int *)&enum case for SFNWInterfaceType.localWiFi(_:);
  }

  else
  {
    if (qword_100644368 != -1) {
      swift_once(&qword_100644368, sub_10041341C);
    }
    uint64_t v72 = type metadata accessor for Logger(0LL);
    uint64_t v73 = sub_100186DE4(v72, (uint64_t)qword_100654BE0);
    int v74 = (os_log_s *)Logger.logObject.getter(v73);
    os_log_type_t v75 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v74, v75))
    {
      uint64_t v76 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v76 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Current path is using a WiFi interface subtype", v76, 2u);
      swift_slowDealloc(v76, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v26, v78);
    uint64_t v21 = (unsigned int *)&enum case for SFNWInterfaceType.wifi(_:);
  }

uint64_t sub_1004112E0()
{
  uint64_t v0 = (void *)swift_slowAlloc(16LL, -1LL);
  *uint64_t v0 = 0LL;
  v0[1] = 0LL;
  sub_10020C834();
  uint64_t v2 = v1;
  nw_endpoint_set_agent_identifier();
  swift_unknownObjectRelease(v2);
  return swift_slowDealloc(v0, -1LL, -1LL);
}

void sub_100411330(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  if (a2 && a4 && a6)
  {
    _StringGuts.grow(_:)(19LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    v33[0] = 0x70706F7264726961LL;
    v33[1] = 0xEB000000003A6F72LL;
    v12._uint64_t countAndFlagsBits = a3;
    v12._id object = a4;
    String.append(_:)(v12);
    v13._uint64_t countAndFlagsBits = 58LL;
    v13._id object = (void *)0xE100000000000000LL;
    String.append(_:)(v13);
    v14._uint64_t countAndFlagsBits = a5;
    v14._id object = a6;
    String.append(_:)(v14);
    v15._uint64_t countAndFlagsBits = 58LL;
    v15._id object = (void *)0xE100000000000000LL;
    String.append(_:)(v15);
    v16._uint64_t countAndFlagsBits = a1;
    v16._id object = a2;
    String.append(_:)(v16);
    if (qword_100644368 != -1) {
      swift_once(&qword_100644368, sub_10041341C);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    sub_100186DE4(v17, (uint64_t)qword_100654BE0);
    uint64_t v18 = swift_bridgeObjectRetain_n(0xEB000000003A6F72LL, 2LL);
    os_log_type_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v22 = swift_slowAlloc(32LL, -1LL);
      v33[0] = v22;
      *(_DWORD *)uint64_t v21 = 136315138;
      swift_bridgeObjectRetain(0xEB000000003A6F72LL);
      uint64_t v32 = sub_10018CDB4(0x70706F7264726961LL, 0xEB000000003A6F72LL, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease_n(0xEB000000003A6F72LL, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "Setting Internet fallback endpoint with alias: %s",  v21,  0xCu);
      swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(0xEB000000003A6F72LL, 2LL);
    }

    uint64_t v27 = String.utf8CString.getter(0x70706F7264726961LL, 0xEB000000003A6F72LL);
    swift_bridgeObjectRelease(0xEB000000003A6F72LL);
    uint64_t application_service_with_alias = nw_endpoint_create_application_service_with_alias( "com.apple.airdrop_pro",  v27 + 32);
    uint64_t v29 = swift_release(v27);
    uint64_t v30 = NWConnection.nw.getter(v29);
    nw_connection_set_internet_fallback_endpoint(v30, application_service_with_alias);
    swift_unknownObjectRelease(application_service_with_alias);
    swift_unknownObjectRelease(v30);
  }

  else
  {
    if (qword_100644368 != -1) {
      swift_once(&qword_100644368, sub_10041341C);
    }
    uint64_t v23 = type metadata accessor for Logger(0LL);
    uint64_t v24 = sub_100186DE4(v23, (uint64_t)qword_100654BE0);
    oslog = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v25))
    {
      unint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v25, "Cannot set Internet fallback endpoint", v26, 2u);
      swift_slowDealloc(v26, -1LL, -1LL);
    }
  }

void sub_1004116A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  v14[2] = a6;
  v14[3] = a7;
  v14[1] = a5;
  uint64_t v9 = type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint(0LL);
  __chkstk_darwin(v9);
  uint64_t v10 = type metadata accessor for SDAirDropDiscoveredEndpoint(0LL);
  __chkstk_darwin(v10);
  Swift::String v12 = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10019140C(v8, (uint64_t)v12);
  Swift::String v13 = (char *)sub_10041178C + 4 * byte_1004DB550[swift_getEnumCaseMultiPayload(v12, v10)];
  __asm { BR              X10 }

uint64_t sub_10041178C()
{
  uint64_t v2 = sub_100418718(v1 & 1, 0LL);
  sub_1001A4BC8(v0, type metadata accessor for SDAirDropDiscoveredEndpoint.ApplicationServiceEndpoint);
  return v2;
}

const char *SFAirDrop.quicServiceType.unsafeMutableAddressor()
{
  return "_asquic._udp";
}

const char *SFAirDrop.domain.unsafeMutableAddressor()
{
  return "local";
}

SecTrustRef sub_100411988()
{
  uint64_t v0 = (nw_connection *)NWConnection.nw.getter();
  char v1 = nw_protocol_copy_tls_definition();
  uint64_t v2 = nw_connection_copy_protocol_metadata(v0, v1);
  swift_unknownObjectRelease(v0);
  swift_unknownObjectRelease(v1);
  if (!v2) {
    return 0LL;
  }
  sec_protocol_metadata_t v3 = nw_tls_copy_sec_protocol_metadata(v2);
  uint64_t v4 = (sec_trust *)sec_protocol_metadata_copy_sec_trust();
  swift_unknownObjectRelease(v3);
  if (!v4)
  {
    swift_unknownObjectRelease(v2);
    return 0LL;
  }

  SecTrustRef v5 = sec_trust_copy_ref(v4);
  swift_unknownObjectRelease(v4);
  swift_unknownObjectRelease(v2);
  return v5;
}

uint64_t sub_100411A2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v43 = a4;
  uint64_t v37 = sub_100183098(&qword_10064D740);
  __chkstk_darwin(v37);
  v36[1] = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = type metadata accessor for SHA256(0LL);
  v36[2] = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v40 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SHA256Digest(0LL);
  uint64_t v38 = *(void *)(v9 - 8);
  uint64_t v39 = v9;
  __chkstk_darwin(v9);
  char v42 = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for String.Encoding(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  Swift::String v14 = (char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100183098(&qword_10064DA60);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for UUID(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = a2;
  uint64_t v45 = a3;
  sub_100408F44(a1, (uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18) == 1)
  {
    swift_bridgeObjectRetain(a3);
    uint64_t v22 = sub_100187100((uint64_t)v17, &qword_10064DA60);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
    uint64_t v23 = swift_bridgeObjectRetain(a3);
    v24._uint64_t countAndFlagsBits = UUID.uuidString.getter(v23);
    id object = v24._object;
    String.append(_:)(v24);
    swift_bridgeObjectRelease(object);
    uint64_t v22 = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    a2 = v44;
    a3 = v45;
  }

  static String.Encoding.utf8.getter(v22);
  String.data(using:allowLossyConversion:)(v14, 0LL, a2, a3);
  unint64_t v27 = v26;
  swift_bridgeObjectRelease(a3);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if (v27 >> 60 != 15)
  {
    uint64_t v35 = sub_100183F14( (unint64_t *)&unk_10064D7C0,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  (uint64_t)&protocol conformance descriptor for SHA256);
    dispatch thunk of HashFunction.init()(v41, v35);
    __asm { BR              X10 }
  }

  if (qword_100644368 != -1) {
    swift_once(&qword_100644368, sub_10041341C);
  }
  uint64_t v28 = type metadata accessor for Logger(0LL);
  uint64_t v29 = sub_100186DE4(v28, (uint64_t)qword_100654BE0);
  uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
  os_log_type_t v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Failed to create combined UUID string", v32, 2u);
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  return UUID.init()(v33);
}

uint64_t sub_100412060@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v44 = a2;
  uint64_t v3 = sub_100183098(&qword_10064DA60);
  __chkstk_darwin(v3);
  SecTrustRef v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v44 - v12;
  uint64_t v14 = NWEndpoint.endpointUUID()(v11);
  uint64_t v15 = UUID.uuidString.getter(v14);
  uint64_t v17 = v16;
  uint64_t v18 = v10;
  uint64_t v19 = *(void (**)(char *, uint64_t))(v7 + 8);
  v19(v18, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v5, a1, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0LL, 1LL, v6);
  sub_100411A2C((uint64_t)v5, v15, v17, (uint64_t)v13);
  swift_bridgeObjectRelease(v17);
  sub_100187100((uint64_t)v5, &qword_10064DA60);
  uint64_t application_service = nw_endpoint_create_application_service("com.apple.AirDrop", v13);
  uint64_t v21 = NWEndpoint.nw.getter(application_service);
  if (!v21)
  {
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  uint64_t v22 = v21;
  uint64_t device_id = nw_endpoint_get_device_id();
  uint64_t v24 = swift_unknownObjectRelease(v22);
  if (device_id) {
    uint64_t v24 = nw_endpoint_set_device_id(application_service, device_id);
  }
  uint64_t v25 = NWEndpoint.nw.getter(v24);
  if (!v25) {
    goto LABEL_18;
  }
  uint64_t v26 = v25;
  uint64_t device_name = nw_endpoint_get_device_name();
  uint64_t v28 = swift_unknownObjectRelease(v26);
  if (device_name) {
    uint64_t v28 = nw_endpoint_set_device_name(application_service, device_name);
  }
  uint64_t v29 = NWEndpoint.nw.getter(v28);
  if (!v29) {
    goto LABEL_19;
  }
  uint64_t v30 = v29;
  uint64_t device_model = nw_endpoint_get_device_model();
  uint64_t v32 = swift_unknownObjectRelease(v30);
  if (device_model) {
    uint64_t v32 = nw_endpoint_set_device_model(application_service, device_model);
  }
  uint64_t v33 = NWEndpoint.nw.getter(v32);
  if (!v33) {
    goto LABEL_20;
  }
  uint64_t v34 = v33;
  uint64_t contact_id = nw_endpoint_get_contact_id();
  uint64_t v36 = swift_unknownObjectRelease(v34);
  if (contact_id) {
    uint64_t v36 = nw_endpoint_set_contact_id(application_service, contact_id);
  }
  uint64_t v37 = (nw_endpoint *)NWEndpoint.nw.getter(v36);
  if (!v37) {
LABEL_21:
  }
    __break(1u);
  uint64_t v38 = v37;
  nw_txt_record_t v39 = nw_endpoint_copy_txt_record(v37);
  swift_unknownObjectRelease(v38);
  if (v39)
  {
    nw_endpoint_set_txt_record(application_service, v39);
    swift_unknownObjectRelease(v39);
  }

  uint64_t v40 = v44;
  uint64_t *v44 = application_service;
  uint64_t v41 = enum case for NWEndpoint.opaque(_:);
  uint64_t v42 = type metadata accessor for NWEndpoint(0LL);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v42 - 8) + 104LL))(v40, v41, v42);
  return ((uint64_t (*)(char *, uint64_t))v19)(v13, v6);
}

uint64_t sub_100412348@<X0>(uint64_t a1@<X8>)
{
  uint64_t v76 = a1;
  uint64_t v2 = type metadata accessor for SFAirDrop.DeviceRelationship(0LL);
  uint64_t v72 = *(void *)(v2 - 8);
  uint64_t v73 = v2;
  __chkstk_darwin(v2);
  int v74 = (char *)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for SFAirDrop.TXTRecord(0LL);
  uint64_t v82 = *(void *)(v4 - 8);
  uint64_t v83 = v4;
  __chkstk_darwin(v4);
  uint64_t v80 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v81 = type metadata accessor for NWEndpoint(0LL);
  uint64_t v79 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v78 = (uint64_t *)((char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = type metadata accessor for SFAirDrop.TransferIdentifier(0LL);
  uint64_t v69 = *(void *)(v7 - 8);
  uint64_t v70 = v7;
  __chkstk_darwin(v7);
  os_log_type_t v68 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SFAirDropReceive.AskRequest(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100183098(&qword_10064DA60);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v67 - v17;
  uint64_t v19 = type metadata accessor for UUID(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v67 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = SFAirDropReceive.AskRequest.senderID.getter(v21);
  uint64_t v26 = v25;
  UUID.init(uuidString:)(v24, v25);
  __n128 v27 = swift_bridgeObjectRelease(v26);
  uint64_t v71 = v10;
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16);
  uint64_t v77 = v1;
  os_log_type_t v75 = (char *)v9;
  v28(v12, v1, v9, v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1LL, v19) == 1)
  {
    uint64_t v29 = v68;
    uint64_t v30 = SFAirDropReceive.AskRequest.id.getter();
    uint64_t v31 = SFAirDrop.TransferIdentifier.stringValue.getter(v30);
    uint64_t v32 = v20;
    uint64_t v34 = v33;
    (*(void (**)(char *, uint64_t))(v69 + 8))(v29, v70);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v16, 1LL, 1LL, v19);
    sub_100411A2C((uint64_t)v16, v31, v34, (uint64_t)v23);
    uint64_t v35 = (const char *)v34;
    uint64_t v20 = v32;
    swift_bridgeObjectRelease(v35);
    sub_100187100((uint64_t)v16, &qword_10064DA60);
    (*(void (**)(char *, char *))(v71 + 8))(v12, v75);
    sub_100187100((uint64_t)v18, &qword_10064DA60);
  }

  else
  {
    (*(void (**)(char *, char *))(v71 + 8))(v12, v75);
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v23, v18, v19);
  }

  os_log_type_t v75 = v23;
  uint64_t application_service = nw_endpoint_create_application_service("com.apple.AirDrop", v23);
  uint64_t v38 = v78;
  uint64_t v37 = v79;
  uint64_t *v78 = application_service;
  uint64_t v39 = v81;
  uint64_t v40 = (*(uint64_t (**)(uint64_t *, void, uint64_t))(v37 + 104))( v38,  enum case for NWEndpoint.opaque(_:),  v81);
  uint64_t v41 = NWEndpoint.nw.getter(v40);
  uint64_t v42 = v80;
  if (v41)
  {
    uint64_t v43 = v41;
    if ((SFAirDropReceive.AskRequest.senderIsMe.getter(v41) & 1) != 0)
    {
      uint64_t v44 = v74;
      (*(void (**)(char *, void, uint64_t))(v72 + 104))( v74,  enum case for SFAirDrop.DeviceRelationship.sameAccount(_:),  v73);
      SFAirDrop.TXTRecord.init(deviceRelationship:)(v44);
      uint64_t v45 = SFAirDrop.TXTRecord.addToEndpoint(_:)(v43);
      uint64_t v46 = SFAirDropReceive.AskRequest.senderComputerName.getter(v45);
      uint64_t v48 = v47;
      uint64_t v49 = String.utf8CString.getter(v46, v47);
      swift_bridgeObjectRelease(v48);
      nw_endpoint_set_device_name(v43, v49 + 32);
      uint64_t v50 = swift_release(v49);
      uint64_t v51 = SFAirDropReceive.AskRequest.senderModelName.getter(v50);
      uint64_t v53 = v52;
      uint64_t v54 = String.utf8CString.getter(v51, v52);
      swift_bridgeObjectRelease(v53);
      nw_endpoint_set_device_model(v43, v54 + 32);
    }

    else
    {
      uint64_t v71 = v20;
      uint64_t v55 = v19;
      uint64_t v56 = SFAirDropReceive.AskRequest.contactIdentifier.getter();
      if (v57)
      {
        uint64_t v58 = v56;
        uint64_t v59 = v57;
        os_log_type_t v60 = v74;
        (*(void (**)(char *, void, uint64_t))(v72 + 104))( v74,  enum case for SFAirDrop.DeviceRelationship.contact(_:),  v73);
        SFAirDrop.TXTRecord.init(deviceRelationship:)(v60);
        SFAirDrop.TXTRecord.addToEndpoint(_:)(v43);
        uint64_t v54 = String.utf8CString.getter(v58, v59);
        swift_bridgeObjectRelease(v59);
        nw_endpoint_set_contact_id(v43, v54 + 32);
      }

      else
      {
        uint64_t v61 = v74;
        (*(void (**)(char *, void, uint64_t))(v72 + 104))( v74,  enum case for SFAirDrop.DeviceRelationship.stranger(_:),  v73);
        SFAirDrop.TXTRecord.init(deviceRelationship:)(v61);
        uint64_t v62 = SFAirDrop.TXTRecord.addToEndpoint(_:)(v43);
        uint64_t v63 = SFAirDropReceive.AskRequest.senderComputerName.getter(v62);
        uint64_t v65 = v64;
        uint64_t v54 = String.utf8CString.getter(v63, v64);
        swift_bridgeObjectRelease(v65);
        nw_endpoint_set_device_name(v43, v54 + 32);
      }

      uint64_t v19 = v55;
      uint64_t v20 = v71;
    }

    swift_unknownObjectRelease(v43);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v42, v83);
    swift_release(v54);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v37 + 32))(v76, v38, v39);
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v75, v19);
  }

  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000001ALL,  0x800000010050F310LL,  "DaemoniOSLibrary/Network+SFAirDrop.swift",  40LL,  2LL,  928LL,  0);
    __break(1u);
  }

  return result;
}

BOOL sub_100412900()
{
  uint64_t v1 = type metadata accessor for NWEndpoint(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = NWEndpoint.nw.getter(v3);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t contact_id = (const char *)nw_endpoint_get_contact_id();
    unint64_t device_model = nw_endpoint_get_device_model(v7);
    unint64_t device_name = nw_endpoint_get_device_name(v7);
    if (contact_id)
    {
      String.init(cString:)(contact_id);
      uint64_t contact_id = v11;
    }

    if (device_model)
    {
      String.init(cString:)(device_model);
      unint64_t device_model = (unint64_t)v12;
    }

    if (device_name)
    {
      String.init(cString:)(device_name);
      unint64_t device_name = (unint64_t)v13;
    }

    swift_unknownObjectRelease(v7);
    *(void *)&double v14 = swift_bridgeObjectRelease(contact_id).n128_u64[0];
    *(void *)&double v15 = swift_bridgeObjectRelease((const char *)device_model, v14).n128_u64[0];
    swift_bridgeObjectRelease((const char *)device_name, v15);
    return contact_id || (device_model | device_name) != 0;
  }

  else
  {
    if (qword_100644368 != -1) {
      swift_once(&qword_100644368, sub_10041341C);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    sub_100186DE4(v17, (uint64_t)qword_100654BE0);
    uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v0, v1);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v22 = swift_slowAlloc(32LL, -1LL);
      uint64_t v28 = v22;
      *(_DWORD *)uint64_t v21 = 136315138;
      uint64_t v23 = NWEndpoint.debugDescription.getter();
      uint64_t v25 = (const char *)v24;
      uint64_t v27 = sub_10018CDB4(v23, v24, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v21 + 4, v21 + 12);
      __n128 v26 = swift_bridgeObjectRelease(v25);
      (*(void (**)(char *, uint64_t, __n128))(v2 + 8))(v5, v1, v26);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Could not convert endpoint %s to nwEndpoint!", v21, 0xCu);
      swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    }

    return 0LL;
  }

uint64_t sub_100412B8C(uint64_t a1, uint64_t a2, uint64_t a3, void *aBlock)
{
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(char), uint64_t))(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = swift_allocObject(&unk_1005E1250, 24LL, 7LL);
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v8;
  swift_retain(v6);
  swift_unknownObjectRetain(a2);
  swift_unknownObjectRetain(a3);
  v7(a2, a3, sub_100316B98, v9);
  swift_release(v6);
  swift_release(v9);
  swift_unknownObjectRelease(a3);
  return swift_unknownObjectRelease(a2);
}

const char *SFAirDrop.serviceType.unsafeMutableAddressor()
{
  return "_airdrop._tcp.";
}

uint64_t sub_100412C40()
{
  uint64_t v57 = type metadata accessor for NWTXTRecord(0LL);
  uint64_t v0 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v2 = (char *)&v57 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for NWBrowser.Result.Metadata(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100183098(&qword_100654CD0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for NWTXTRecord.Entry(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  double v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v58 = (char *)&v57 - v16;
  NWBrowser.Result.metadata.getter(v15);
  int v17 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  if (v17 == enum case for NWBrowser.Result.Metadata.bonjour(_:))
  {
    (*(void (**)(char *, uint64_t))(v4 + 96))(v6, v3);
    uint64_t v18 = v6;
    uint64_t v19 = v57;
    (*(void (**)(char *, char *, uint64_t))(v0 + 32))(v2, v18, v57);
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"flags");
    uint64_t v22 = v21;
    NWTXTRecord.getEntry(for:)(v20);
    __n128 v23 = swift_bridgeObjectRelease(v22);
    (*(void (**)(char *, uint64_t, __n128))(v0 + 8))(v2, v19, v23);
  }

  else
  {
    int v24 = v17;
    int v25 = enum case for NWBrowser.Result.Metadata.none(_:);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1LL, 1LL, v10);
    if (v24 != v25) {
      (*(void (**)(char *, uint64_t, __n128))(v4 + 8))(v6, v3, v26);
    }
  }

  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10) == 1)
  {
    sub_100187100((uint64_t)v9, &qword_100654CD0);
    return 0LL;
  }

  uint64_t v27 = v58;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v58, v9, v10);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v27, v10);
  int v28 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v14, v10);
  if (v28 != enum case for NWTXTRecord.Entry.string(_:))
  {
    int v38 = v28;
    int v39 = enum case for NWTXTRecord.Entry.data(_:);
    uint64_t v40 = *(void (**)(char *, uint64_t))(v11 + 8);
    v40(v27, v10);
    if (v38 == v39)
    {
      (*(void (**)(char *, uint64_t))(v11 + 96))(v14, v10);
      sub_100189B20(*(void *)v14, *((void *)v14 + 1));
    }

    else
    {
      v40(v14, v10);
    }

    return 0LL;
  }

  (*(void (**)(char *, uint64_t))(v11 + 96))(v14, v10);
  uint64_t result = *(void *)v14;
  uint64_t v30 = (const char *)*((void *)v14 + 1);
  uint64_t v31 = ((unint64_t)v30 >> 56) & 0xF;
  uint64_t v32 = *(void *)v14 & 0xFFFFFFFFFFFFLL;
  else {
    uint64_t v33 = *(void *)v14 & 0xFFFFFFFFFFFFLL;
  }
  if (!v33)
  {
    __n128 v47 = swift_bridgeObjectRelease((const char *)*((void *)v14 + 1));
LABEL_69:
    (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v27, v10, v47);
    return 0LL;
  }

  if (((unint64_t)v30 & 0x1000000000000000LL) != 0)
  {
    unint64_t v35 = sub_100212CAC(result, *((void *)v14 + 1), 10LL);
    char v37 = v56;
    goto LABEL_47;
  }

  if (((unint64_t)v30 & 0x2000000000000000LL) == 0)
  {
    if ((result & 0x1000000000000000LL) != 0) {
      uint64_t v34 = (unsigned __int8 *)(((unint64_t)v30 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v34 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, *((void *)v14 + 1));
    }
    unint64_t v35 = (unint64_t)sub_100212B9C(v34, v32, 10LL);
    char v37 = v36 & 1;
LABEL_47:
    __n128 v47 = swift_bridgeObjectRelease(v30, v57);
    if ((v37 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t, __n128))(v11 + 8))(v27, v10, v47);
      return v35;
    }

    goto LABEL_69;
  }

  v59[0] = *(void *)v14;
  v59[1] = (unint64_t)v30 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (v31)
    {
      if (v31 != 1 && (BYTE1(result) - 48) <= 9u)
      {
        unint64_t v35 = (BYTE1(result) - 48);
        if (v31 == 2) {
          goto LABEL_46;
        }
        if ((BYTE2(result) - 48) <= 9u)
        {
          unint64_t v35 = 10LL * (BYTE1(result) - 48) + (BYTE2(result) - 48);
          uint64_t v44 = v31 - 3;
          if (v44)
          {
            uint64_t v45 = (unsigned __int8 *)v59 + 3;
            while (1)
            {
              unsigned int v46 = *v45 - 48;
              if (v46 > 9) {
                goto LABEL_43;
              }
              if (!is_mul_ok(v35, 0xAuLL)) {
                goto LABEL_43;
              }
              BOOL v42 = __CFADD__(10 * v35, v46);
              unint64_t v35 = 10 * v35 + v46;
              if (v42) {
                goto LABEL_43;
              }
              char v37 = 0;
              ++v45;
              if (!--v44) {
                goto LABEL_47;
              }
            }
          }

          goto LABEL_46;
        }
      }

      goto LABEL_43;
    }
  }

  else
  {
    if (result != 45)
    {
      if (v31 && (result - 48) <= 9u)
      {
        unint64_t v35 = (result - 48);
        if (v31 == 1) {
          goto LABEL_46;
        }
        if ((BYTE1(result) - 48) <= 9u)
        {
          unint64_t v35 = 10LL * (result - 48) + (BYTE1(result) - 48);
          uint64_t v48 = v31 - 2;
          if (v48)
          {
            uint64_t v49 = (unsigned __int8 *)v59 + 2;
            while (1)
            {
              unsigned int v50 = *v49 - 48;
              if (v50 > 9) {
                goto LABEL_43;
              }
              if (!is_mul_ok(v35, 0xAuLL)) {
                goto LABEL_43;
              }
              BOOL v42 = __CFADD__(10 * v35, v50);
              unint64_t v35 = 10 * v35 + v50;
              if (v42) {
                goto LABEL_43;
              }
              char v37 = 0;
              ++v49;
              if (!--v48) {
                goto LABEL_47;
              }
            }
          }

          goto LABEL_46;
        }
      }

BOOL sub_100413210()
{
  uint64_t v0 = type metadata accessor for NWInterface(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100183098(&qword_100654C30);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = NWBrowser.Result.interfaces.getter(v5);
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v25 = v8;
  if (v9)
  {
    unint64_t v10 = v8 + ((*(unsigned __int8 *)(v1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    uint64_t v11 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v1 + 16);
    uint64_t v26 = *(void *)(v1 + 72);
    uint64_t v27 = v11;
    __n128 v12 = swift_bridgeObjectRetain((const char *)v8);
    while (1)
    {
      v27(v7, v10, v0, v12);
      uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v1 + 56);
      ((void (*)(char *, void, uint64_t, uint64_t))v13)(v7, 0LL, 1LL, v0);
      int v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 48))(v7, 1LL, v0);
      BOOL v15 = v14 != 1;
      if (v14 == 1) {
        break;
      }
      uint64_t v16 = (*(uint64_t (**)(char *, char *, uint64_t))(v1 + 32))(v3, v7, v0);
      uint64_t v17 = NWInterface.name.getter(v16);
      uint64_t v19 = v18;
      if (v17 == 0x306C647761LL && v18 == (const char *)0xE500000000000000LL)
      {
        __n128 v22 = swift_bridgeObjectRelease((const char *)0xE500000000000000LL);
        (*(void (**)(char *, uint64_t, __n128))(v1 + 8))(v3, v0, v22);
        BOOL v15 = 1LL;
        break;
      }

      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, 0x306C647761LL, 0xE500000000000000LL, 0LL);
      __n128 v21 = swift_bridgeObjectRelease(v19);
      (*(void (**)(char *, uint64_t, __n128))(v1 + 8))(v3, v0, v21);
      if ((v20 & 1) != 0) {
        break;
      }
      v10 += v26;
      if (!--v9) {
        goto LABEL_10;
      }
    }
  }

  else
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v1 + 56);
    __n128 v12 = swift_bridgeObjectRetain((const char *)v8);
LABEL_10:
    v13(v7, 1LL, 1LL, v0, v12);
    BOOL v15 = 0LL;
  }

  swift_bridgeObjectRelease_n(v25, 2LL);
  return v15;
}

uint64_t sub_10041341C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100186DFC(v0, qword_100654BE0);
  uint64_t v1 = sub_100186DE4(v0, (uint64_t)qword_100654BE0);
  if (qword_100643FD8 != -1) {
    swift_once(&qword_100643FD8, sub_10023A408);
  }
  uint64_t v2 = sub_100186DE4(v0, (uint64_t)qword_1006695F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

void *SFAirDrop.port.unsafeMutableAddressor()
{
  return &static SFAirDrop.port;
}

uint64_t static SFAirDrop.port.getter()
{
  return 8770LL;
}

const char *SFAirDrop.localIdentity.unsafeMutableAddressor()
{
  return "airdrop";
}

uint64_t static SFAirDrop.localIdentity.getter()
{
  return 0x706F7264726961LL;
}

uint64_t static SFAirDrop.domain.getter()
{
  return 0x6C61636F6CLL;
}

uint64_t static SFAirDrop.serviceType.getter()
{
  return 0x706F72647269615FLL;
}

uint64_t static SFAirDrop.quicServiceType.getter()
{
  return 0x2E6369757173615FLL;
}

void *SFAirDrop.dataUsageBundleID.unsafeMutableAddressor()
{
  return &static SFAirDrop.dataUsageBundleID;
}

unint64_t static SFAirDrop.dataUsageBundleID.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_100413564@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = nw_interface_create_with_name("awdl0");
  if (v2)
  {
    swift_unknownObjectRelease(v2);
    uint64_t v2 = nw_interface_create_with_name("awdl0");
    if (v2) {
      goto LABEL_13;
    }
    __break(1u);
  }

  if (IsAppleInternalBuild(v2, v3))
  {
    uint64_t v4 = nw_interface_create_with_name("en0");
    if (v4)
    {
      swift_unknownObjectRelease(v4);
      if (!nw_interface_create_with_name("en0"))
      {
        __break(1u);
        goto LABEL_8;
      }

uint64_t sub_1004136C8(uint64_t a1, uint64_t a2, void *aBlock)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t (*)(), uint64_t))(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v6 = _Block_copy(aBlock);
  uint64_t v7 = swift_allocObject(&unk_1005E1228, 24LL, 7LL);
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = v6;
  swift_retain(v4);
  uint64_t v8 = swift_unknownObjectRetain(a2);
  v5(v8, sub_100419DD8, v7);
  swift_release(v4);
  swift_release(v7);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_100413754(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain(a2);
  v3(a2);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_100413790( nw_protocol_options *a1, _BYTE *a2, void (*a3)(nw_protocol_options *, uint64_t))
{
  uint64_t result = nw_protocol_options_is_quic(a1);
  if ((_DWORD)result && (*a2 & 1) == 0)
  {
    uint64_t v7 = nw_quic_copy_sec_protocol_options(a1);
    sub_10025F338();
    uint64_t v8 = (void *)static NSUserDefaults.airdrop.getter();
    char v9 = SFAirDropUserDefaults.finalALPN.getter();

    if ((v9 & 1) != 0) {
      sec_protocol_options_clear_tls_application_protocols(v7);
    }
    sec_protocol_options_add_tls_application_protocol(v7, "h3");
    type metadata accessor for SFAirDropUserDefaults(0LL, v10);
    uint64_t v11 = (void *)static SFAirDropUserDefaults.shared.getter();
    uint32_t v12 = SFAirDropUserDefaults.quicIdleTimeout.getter();

    nw_quic_set_idle_timeout(a1, v12);
    a3(a1, 1LL);
    uint64_t result = swift_unknownObjectRelease(v7);
    *a2 = 1;
  }

  return result;
}

BOOL sub_100413864(char *a1, char *a2)
{
  return dword_1004DB728[*a1] == dword_1004DB728[*a2];
}

Swift::Int sub_100413888()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(dword_1004DB728[v1]);
  return Hasher._finalize()();
}

void sub_1004138D4()
{
}

Swift::Int sub_100413908()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(dword_1004DB728[v1]);
  return Hasher._finalize()();
}

uint64_t sub_100413950@<X0>(int *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100419CDC(*a1);
  *a2 = result;
  return result;
}

void sub_100413978(_DWORD *a1@<X8>)
{
  *a1 = dword_1004DB728[*v1];
}

uint64_t sub_100413990()
{
  *(void *)(v1 + 48) = v0;
  return swift_task_switch(sub_1004139A8, 0LL, 0LL);
}

uint64_t sub_1004139A8()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = swift_task_alloc(32LL);
  v0[7] = v2;
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v1;
  *(void *)(v2 + 24) = 8LL;
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[8] = v3;
  uint64_t v4 = sub_100183098(&qword_100654CE8);
  *uint64_t v3 = v0;
  v3[1] = sub_100413A5C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 2,  0LL,  0LL,  0xD000000000000014LL,  0x800000010050F540LL,  sub_10041A530,  v2,  v4);
}

uint64_t sub_100413A5C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 64);
  *(void *)(*v1 + 7sub_10018709C(v0 + 2) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_100413BD0;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 56));
    uint64_t v4 = sub_100413AC8;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_100413AC8()
{
  unint64_t v1 = *(void *)(v0 + 24);
  if (v1 >> 60 == 15)
  {
    uint64_t v2 = type metadata accessor for SFAirDropSend.Failure(0LL);
    uint64_t v3 = sub_100183F14( &qword_100654D00,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropSend.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropSend.Failure);
    swift_allocError(v2, v3, 0LL, 0LL);
    uint64_t v5 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v2 - 8) + 104LL))( v4,  enum case for SFAirDropSend.Failure.badResponse(_:),  v2);
    swift_willThrow(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v7 = *(void *)(v0 + 16);
    Data.withUnsafeBytes<A, B>(_:)( sub_100183418,  0LL,  v7,  *(void *)(v0 + 24),  &type metadata for Int,  &type metadata for Int);
    sub_100189B0C(v7, v1);
    return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 40));
  }

uint64_t sub_100413BD0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100413C04(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  return swift_task_switch(sub_100413C20, 0LL, 0LL);
}

uint64_t sub_100413C20()
{
  if (qword_100644368 != -1) {
    swift_once(&qword_100644368, sub_10041341C);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_100654BE0);
  *(void *)(v0 + 15sub_10018709C(v0 + 2) = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 128);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v6 = 134217984;
    *(void *)(v0 + 120) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v6 + 4, v6 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Starting data stream, expecting %ld", v6, 0xCu);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  *(_OWORD *)(v0 + 88) = xmmword_1004D9570;
  uint64_t v7 = *(void *)(v0 + 144);
  if (*(void *)(v0 + 128) >= *(void *)(v0 + 136)) {
    uint64_t v8 = *(void *)(v0 + 136);
  }
  else {
    uint64_t v8 = *(void *)(v0 + 128);
  }
  uint64_t v9 = swift_task_alloc(32LL);
  *(void *)(v0 + 160) = v9;
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v7;
  *(void *)(v9 + 24) = v8;
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 168) = v10;
  uint64_t v11 = sub_100183098(&qword_100654CE8);
  void *v10 = v0;
  v10[1] = sub_100413DD8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 64,  0LL,  0LL,  0xD000000000000014LL,  0x800000010050F540LL,  sub_100419DE8,  v9,  v11);
}

uint64_t sub_100413DD8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 168);
  *(void *)(*v1 + 176) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    os_log_type_t v4 = sub_100414378;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 160));
    os_log_type_t v4 = sub_100413E44;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_100413E44(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v3 = v1 + 88;
  unint64_t v4 = *(void *)(v1 + 72);
  if (v4 >> 60 != 15)
  {
    sub_1001A4C04(*(void *)(v1 + 64), *(void *)(v1 + 72));
    sub_1001A4C04(v2, v4);
    uint64_t v5 = sub_10019BA8C(v2, v4);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc(12LL, -1LL);
      uint64_t v24 = swift_slowAlloc(32LL, -1LL);
      uint64_t v26 = v24;
      *(_DWORD *)uint64_t v8 = 136315138;
      sub_10019BA8C(v2, v4);
      uint64_t v9 = Data.description.getter(v2, v4);
      uint64_t v11 = v10;
      sub_100189B0C(v2, v4);
      *(void *)(v8 + 4) = sub_10018CDB4(v9, (unint64_t)v11, &v26);
      swift_bridgeObjectRelease(v11);
      sub_100189B0C(v2, v4);
      sub_100189B0C(v2, v4);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Received %s bytes", (uint8_t *)v8, 0xCu);
      swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    else
    {
      sub_100189B0C(v2, v4);
      sub_100189B0C(v2, v4);
    }

    Data.append(_:)(v2, v4);
    __asm { BR              X9 }
  }

  uint32_t v12 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v25 = *(void *)(v1 + 128);
    uint64_t v14 = swift_slowAlloc(22LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v26 = v15;
    *(_DWORD *)uint64_t v14 = 136315394;
    swift_beginAccess(v1 + 88, v1 + 16, 0LL, 0LL);
    uint64_t v16 = *(void *)(v1 + 88);
    unint64_t v17 = *(void *)(v1 + 96);
    sub_10019BA8C(v16, v17);
    uint64_t v18 = Data.description.getter(v16, v17);
    char v20 = v19;
    unint64_t v21 = v17;
    uint64_t v3 = v1 + 88;
    sub_100189B20(v16, v21);
    *(void *)(v1 + 104) = sub_10018CDB4(v18, (unint64_t)v20, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 104, v1 + 112, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v20);
    *(_WORD *)(v14 + 1sub_10018709C(v0 + 2) = 2048;
    *(void *)(v1 + 11sub_10018709C(v0 + 2) = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 112, v1 + 120, v14 + 14, v14 + 22);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Received %s bytes of total %ld", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  __n128 v22 = swift_beginAccess(v3, v1 + 40, 0LL, 0LL);
  return (*(uint64_t (**)(void, void, __n128))(v1 + 8))(*(void *)(v1 + 88), *(void *)(v1 + 96), v22);
}

uint64_t sub_100414378()
{
  uint64_t v1 = *(void *)(v0 + 160);
  swift_errorRelease(*(void *)(v0 + 176));
  uint64_t v2 = swift_task_dealloc(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v14 = *(void *)(v0 + 128);
    uint64_t v5 = swift_slowAlloc(22LL, -1LL);
    uint64_t v6 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = v6;
    *(_DWORD *)uint64_t v5 = 136315394;
    swift_beginAccess(v0 + 88, v0 + 16, 0LL, 0LL);
    uint64_t v7 = *(void *)(v0 + 88);
    unint64_t v8 = *(void *)(v0 + 96);
    sub_10019BA8C(v7, v8);
    uint64_t v9 = Data.description.getter(v7, v8);
    uint64_t v11 = v10;
    sub_100189B20(v7, v8);
    *(void *)(v0 + 104) = sub_10018CDB4(v9, (unint64_t)v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease(v11);
    *(_WORD *)(v5 + 1sub_10018709C(v0 + 2) = 2048;
    *(void *)(v0 + 11sub_10018709C(v0 + 2) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v5 + 14, v5 + 22);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Received %s bytes of total %ld", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy(v6, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  __n128 v12 = swift_beginAccess(v0 + 88, v0 + 40, 0LL, 0LL);
  return (*(uint64_t (**)(void, void, __n128))(v0 + 8))(*(void *)(v0 + 88), *(void *)(v0 + 96), v12);
}

void sub_100414554(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = sub_100183098(&qword_100654CF0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v9 = NWConnection.nw.getter(v8);
  if ((a3 & 0x8000000000000000LL) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
  }

  else
  {
    if (!HIDWORD(a3))
    {
      uint64_t v10 = (nw_connection *)v9;
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))( (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v5);
      uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
      uint64_t v12 = (v11 + 16) & ~v11;
      uint64_t v13 = swift_allocObject(&unk_1005E1278, v12 + v7, v11 | 7);
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))( v13 + v12,  (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v5);
      aBlock[4] = sub_100419DFC;
      uint64_t v16 = v13;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_100414858;
      uint64_t aBlock[3] = &unk_1005E1290;
      uint64_t v14 = _Block_copy(aBlock);
      swift_release(v16);
      nw_connection_receive(v10, a3, a3, v14);
      swift_unknownObjectRelease(v10);
      _Block_release(v14);
      return;
    }

    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
  }

  __break(1u);
}

uint64_t sub_100414734(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (nw_error *)swift_unknownObjectRetain(a4);
    CFErrorRef v6 = nw_error_copy_cf_error(v5);
    type metadata accessor for CFError(0LL);
    uint64_t v8 = v7;
    uint64_t v9 = sub_100183F14( &qword_100654C00,  (uint64_t (*)(uint64_t))type metadata accessor for CFError,  (uint64_t)&protocol conformance descriptor for CFErrorRef);
    uint64_t v10 = swift_allocError(v8, v9, 0LL, 0LL);
    *uint64_t v11 = v6;
    uint64_t v21 = v10;
    uint64_t v12 = sub_100183098(&qword_100654CF0);
    CheckedContinuation.resume(throwing:)(&v21, v12);
    return swift_unknownObjectRelease(a4);
  }

  else
  {
    if (a1)
    {
      char v20 = a1;
      id v15 = a1;
      int v16 = swift_dynamicCast(&v21, &v20, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Data, 6LL);
      uint64_t v17 = v21;
      unint64_t v18 = v22;
      if (!v16)
      {
        uint64_t v17 = 0LL;
        unint64_t v18 = 0xC000000000000000LL;
      }
    }

    else
    {
      uint64_t v17 = 0LL;
      unint64_t v18 = 0xF000000000000000LL;
    }

    uint64_t v21 = v17;
    unint64_t v22 = v18;
    char v23 = a3 & 1;
    uint64_t v19 = sub_100183098(&qword_100654CF0);
    return CheckedContinuation.resume(returning:)(&v21, v19);
  }

void sub_100414858(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  swift_retain(v9);
  id v11 = a2;
  swift_unknownObjectRetain(a3);
  swift_unknownObjectRetain(a5);
  v10(a2, a3, a4, a5);
  swift_release(v9);
  swift_unknownObjectRelease(a5);
  swift_unknownObjectRelease(a3);
}

uint64_t sub_1004148F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  void v4[6] = a2;
  return swift_task_switch(sub_100414958, 0LL, 0LL);
}

void sub_100414958()
{
  __asm { BR              X12 }

uint64_t sub_1004149AC(uint64_t a1)
{
  uint64_t v3 = v2[8];
  v2[4] = BYTE6(v1);
  uint64_t v4 = sub_1003A0AB8(a1, (uint64_t)(v2 + 5));
  uint64_t v6 = v5;
  void v2[9] = v4;
  v2[10] = v5;
  uint64_t v7 = swift_task_alloc(48LL);
  v2[11] = v7;
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = v4;
  *(void *)(v7 + 24) = v6;
  *(_BYTE *)(v7 + 3sub_10018709C(v0 + 2) = 0;
  *(void *)(v7 + 40) = v3;
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v2[12] = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100414AB8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v8,  0LL,  0LL,  0xD000000000000016LL,  0x800000010050F560LL,  sub_100419E84,  v7,  (char *)&type metadata for () + 8);
}

uint64_t sub_100414AB8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 96);
  *(void *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_1004150EC;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 88));
    uint64_t v4 = sub_100414B70;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

void sub_100414B70()
{
  __asm { BR              X10 }

uint64_t sub_100414BC8()
{
  if (!BYTE6(v0))
  {
LABEL_12:
    sub_100189B20(*(void *)(v2 + 72), *(void *)(v2 + 80));
    return (*(uint64_t (**)(void))(v2 + 8))();
  }

  uint64_t v3 = *(void *)(v2 + 40);
  *(void *)(v2 + 11sub_10018709C(v0 + 2) = swift_slowAlloc(*(void *)(v2 + 56), -1LL);
  id v4 = objc_allocWithZone(&OBJC_CLASS___NSInputStream);
  sub_10019BA8C(v3, v0);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v6 = [v4 initWithData:isa];
  *(void *)(v2 + 120) = v6;
  sub_100189B20(v3, v0);

  [v6 open];
  if (![v6 hasBytesAvailable]
    || (int64_t v7 = (int64_t)[*(id *)(v2 + 120) read:*(void *)(v2 + 112) maxLength:*(void *)(v2 + 56)],  v7 < 1))
  {
    if (qword_100644368 != -1) {
      swift_once(&qword_100644368, sub_10041341C);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    uint64_t v16 = sub_100186DE4(v15, (uint64_t)qword_100654BE0);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Finished sending stream", v19, 2u);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    uint64_t v21 = *(void *)(v2 + 112);
    char v20 = *(void **)(v2 + 120);

    [v20 close];
    swift_slowDealloc(v21, -1LL, -1LL);

    goto LABEL_12;
  }

  unint64_t v8 = v7;
  uint64_t v9 = *(const void **)(v2 + 112);
  if ((unint64_t)v7 <= 0xE)
  {
    *(void *)((char *)v1 + 6) = 0LL;
    *uint64_t v1 = 0LL;
    *(_BYTE *)(v2 + 30) = v7;
    memcpy(v1, v9, v7);
    uint64_t v13 = *(void *)(v2 + 16);
    unint64_t v14 = *(unsigned int *)(v2 + 24) | ((unint64_t)*(unsigned __int8 *)(v2 + 28) << 32) | ((unint64_t)*(unsigned __int8 *)(v2 + 29) << 40) | ((unint64_t)*(unsigned __int8 *)(v2 + 30) << 48);
  }

  else
  {
    uint64_t v10 = type metadata accessor for __DataStorage(0LL);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v11 = __DataStorage.init(bytes:length:)(v9, v8);
    uint64_t v12 = v11;
    if (v8 >= 0x7FFFFFFF)
    {
      uint64_t v23 = type metadata accessor for Data.RangeReference(0LL);
      uint64_t v13 = swift_allocObject(v23, 32LL, 7LL);
      *(void *)(v13 + swift_weakDestroy(v0 + 16) = 0LL;
      *(void *)(v13 + 24) = v8;
      unint64_t v14 = v12 | 0x8000000000000000LL;
    }

    else
    {
      uint64_t v13 = v8 << 32;
      unint64_t v14 = v11 | 0x4000000000000000LL;
    }
  }

  *(void *)(v2 + 128) = v13;
  *(void *)(v2 + 136) = v14;
  if (qword_100644368 != -1) {
    swift_once(&qword_100644368, sub_10041341C);
  }
  uint64_t v24 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v24, (uint64_t)qword_100654BE0);
  sub_10019BA8C(v13, v14);
  uint64_t v25 = sub_10019BA8C(v13, v14);
  uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = swift_slowAlloc(12LL, -1LL);
    uint64_t v29 = swift_slowAlloc(32LL, -1LL);
    uint64_t v38 = v29;
    *(_DWORD *)uint64_t v28 = 136315138;
    sub_10019BA8C(v13, v14);
    uint64_t v30 = Data.description.getter(v13, v14);
    uint64_t v32 = v31;
    sub_100189B20(v13, v14);
    *(void *)(v28 + 4) = sub_10018CDB4(v30, (unint64_t)v32, &v38);
    swift_bridgeObjectRelease(v32);
    sub_100189B20(v13, v14);
    sub_100189B20(v13, v14);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Sending data chunk %s", (uint8_t *)v28, 0xCu);
    swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  else
  {
    sub_100189B20(v13, v14);
    sub_100189B20(v13, v14);
  }

  uint64_t v33 = *(void **)(v2 + 120);
  uint64_t v34 = *(void *)(v2 + 64);
  sub_10019BA8C(v13, v14);
  char v35 = [v33 hasBytesAvailable] ^ 1;
  uint64_t v36 = swift_task_alloc(48LL);
  *(void *)(v2 + 144) = v36;
  *(void *)(v36 + swift_weakDestroy(v0 + 16) = v13;
  *(void *)(v36 + 24) = v14;
  *(_BYTE *)(v36 + 3sub_10018709C(v0 + 2) = v35;
  *(void *)(v36 + 40) = v34;
  char v37 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v2 + 15sub_10018709C(v0 + 2) = v37;
  *char v37 = v2;
  v37[1] = sub_100415154;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v37,  0LL,  0LL,  0xD000000000000016LL,  0x800000010050F560LL,  sub_10041A4C4,  v36,  (char *)&type metadata for () + 8);
}

uint64_t sub_1004150EC()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100415154()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 152);
  *(void *)(*v1 + 160) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    id v4 = sub_1004156C0;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 144));
    id v4 = sub_10041520C;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10041520C()
{
  uint64_t v1 = *(void *)(v0 + 128);
  unint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void **)(v0 + 120);
  sub_100189B20(v1, v2);
  sub_100189B20(v1, v2);
  if ([v3 hasBytesAvailable]
    && (int64_t v4 = (int64_t)[*(id *)(v0 + 120) read:*(void *)(v0 + 112) maxLength:*(void *)(v0 + 56)],  v4 >= 1))
  {
    unint64_t v5 = v4;
    id v6 = *(const void **)(v0 + 112);
    if ((unint64_t)v4 <= 0xE)
    {
      *(void *)(v0 + 2sub_10018709C(v0 + 2) = 0LL;
      *(void *)(v0 + swift_weakDestroy(v0 + 16) = 0LL;
      *(_BYTE *)(v0 + 30) = v4;
      memcpy((void *)(v0 + 16), v6, v4);
      uint64_t v10 = *(void *)(v0 + 16);
      unint64_t v11 = *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 29) << 40) | ((unint64_t)*(unsigned __int8 *)(v0 + 30) << 48);
    }

    else
    {
      uint64_t v7 = type metadata accessor for __DataStorage(0LL);
      swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
      uint64_t v8 = __DataStorage.init(bytes:length:)(v6, v5);
      uint64_t v9 = v8;
      if (v5 >= 0x7FFFFFFF)
      {
        uint64_t v20 = type metadata accessor for Data.RangeReference(0LL);
        uint64_t v10 = swift_allocObject(v20, 32LL, 7LL);
        *(void *)(v10 + swift_weakDestroy(v0 + 16) = 0LL;
        *(void *)(v10 + 24) = v5;
        unint64_t v11 = v9 | 0x8000000000000000LL;
      }

      else
      {
        uint64_t v10 = v5 << 32;
        unint64_t v11 = v8 | 0x4000000000000000LL;
      }
    }

    *(void *)(v0 + 128) = v10;
    *(void *)(v0 + 136) = v11;
    if (qword_100644368 != -1) {
      swift_once(&qword_100644368, sub_10041341C);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    sub_100186DE4(v21, (uint64_t)qword_100654BE0);
    sub_10019BA8C(v10, v11);
    uint64_t v22 = sub_10019BA8C(v10, v11);
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc(12LL, -1LL);
      uint64_t v26 = swift_slowAlloc(32LL, -1LL);
      uint64_t v35 = v26;
      *(_DWORD *)uint64_t v25 = 136315138;
      sub_10019BA8C(v10, v11);
      uint64_t v27 = Data.description.getter(v10, v11);
      uint64_t v29 = v28;
      sub_100189B20(v10, v11);
      *(void *)(v25 + 4) = sub_10018CDB4(v27, (unint64_t)v29, &v35);
      swift_bridgeObjectRelease(v29);
      sub_100189B20(v10, v11);
      sub_100189B20(v10, v11);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Sending data chunk %s", (uint8_t *)v25, 0xCu);
      swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    else
    {
      sub_100189B20(v10, v11);
      sub_100189B20(v10, v11);
    }

    uint64_t v30 = *(void **)(v0 + 120);
    uint64_t v31 = *(void *)(v0 + 64);
    sub_10019BA8C(v10, v11);
    char v32 = [v30 hasBytesAvailable] ^ 1;
    uint64_t v33 = swift_task_alloc(48LL);
    *(void *)(v0 + 144) = v33;
    *(void *)(v33 + swift_weakDestroy(v0 + 16) = v10;
    *(void *)(v33 + 24) = v11;
    *(_BYTE *)(v33 + 3sub_10018709C(v0 + 2) = v32;
    *(void *)(v33 + 40) = v31;
    uint64_t v34 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(void *)(v0 + 15sub_10018709C(v0 + 2) = v34;
    *uint64_t v34 = v0;
    v34[1] = sub_100415154;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)( v34,  0LL,  0LL,  0xD000000000000016LL,  0x800000010050F560LL,  sub_10041A4C4,  v33,  (char *)&type metadata for () + 8);
  }

  else
  {
    if (qword_100644368 != -1) {
      swift_once(&qword_100644368, sub_10041341C);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    uint64_t v13 = sub_100186DE4(v12, (uint64_t)qword_100654BE0);
    unint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Finished sending stream", v16, 2u);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    uint64_t v18 = *(void *)(v0 + 112);
    uint64_t v17 = *(void **)(v0 + 120);

    [v17 close];
    swift_slowDealloc(v18, -1LL, -1LL);

    sub_100189B20(*(void *)(v0 + 72), *(void *)(v0 + 80));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1004156C0()
{
  unint64_t v1 = *(void *)(v0 + 136);
  uint64_t v3 = *(void **)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 128);
  swift_task_dealloc(*(void *)(v0 + 144));
  sub_100189B20(v2, v1);
  sub_100189B20(v2, v1);

  sub_100189B20(*(void *)(v0 + 72), *(void *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100415750(uint64_t a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5)
{
  LODWORD(v6) = a4;
  uint64_t v10 = sub_100183098(&qword_1006493C8);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v35 = v12;
  uint64_t v36 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100644368 != -1) {
    swift_once(&qword_100644368, sub_10041341C);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v13, (uint64_t)qword_100654BE0);
  sub_1001A4C04(a2, a3);
  uint64_t v14 = sub_1001A4C04(a2, a3);
  os_log_type_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  unint64_t v17 = a3 >> 60;
  if (os_log_type_enabled(v15, v16))
  {
    v31[1] = a5;
    uint64_t v33 = v10;
    int v34 = v6;
    uint64_t v18 = swift_slowAlloc(18LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v19;
    *(_DWORD *)uint64_t v18 = 136315394;
    uint64_t v32 = a1;
    v31[0] = a3 >> 60;
    if (a3 >> 60 == 15)
    {
      unint64_t v6 = 0x800000010050F580LL;
      uint64_t v20 = 0xD000000000000015LL;
    }

    else
    {
      uint64_t v20 = Data.description.getter(a2, a3);
      unint64_t v6 = v22;
    }

    uint64_t v37 = sub_10018CDB4(v20, v6, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, aBlock, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease((const char *)v6);
    sub_100189B0C(a2, a3);
    sub_100189B0C(a2, a3);
    *(_WORD *)(v18 + 1sub_10018709C(v0 + 2) = 1024;
    LOBYTE(v6) = v34;
    LODWORD(v3sub_10018709C(v0 + 7) = v34 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, (char *)&v37 + 4, v18 + 14, v18 + 18);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Calling send %s - done: %{BOOL}d", (uint8_t *)v18, 0x12u);
    swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);

    a1 = v32;
    uint64_t v10 = v33;
    unint64_t v17 = v31[0];
  }

  else
  {
    sub_100189B0C(a2, a3);
    sub_100189B0C(a2, a3);
  }

  uint64_t v23 = (nw_connection *)NWConnection.nw.getter(v21);
  if (v17 <= 0xE)
  {
    sub_100415AD8(a2, a3);
    os_log_type_t v24 = v25;
  }

  else
  {
    os_log_type_t v24 = 0LL;
  }

  uint64_t v26 = v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v36, a1, v10);
  uint64_t v27 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v28 = (v27 + 16) & ~v27;
  uint64_t v29 = swift_allocObject(&unk_1005E12C8, v28 + v35, v27 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v29 + v28, v26, v10);
  aBlock[4] = (uint64_t)sub_1004160E8;
  uint64_t v39 = v29;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_10036FCE0;
  uint64_t aBlock[3] = (uint64_t)&unk_1005E12E0;
  uint64_t v30 = _Block_copy(aBlock);
  swift_release(v39);
  nw_connection_send(v23, v24, _nw_content_context_default_message, v6 & 1, v30);
  _Block_release(v30);
  swift_unknownObjectRelease(v23);
}

void sub_100415AD8(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchData(0LL);
  v13[1] = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchData.Deallocator(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  __chkstk_darwin(v7);
  uint64_t v9 = (void *)((char *)v13 - v8);
  uint64_t v10 = swift_allocObject(&unk_1005E0F30, 32LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  aBlock[4] = LongHash.storage.getter;
  uint64_t v15 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001B9FE4;
  uint64_t aBlock[3] = &unk_1005E0F48;
  uint64_t v11 = _Block_copy(aBlock);
  void *v9 = 0LL;
  v9[1] = v11;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))( v9,  enum case for DispatchData.Deallocator.custom(_:),  v5);
  uint64_t v12 = v15;
  sub_10019BA8C(a1, a2);
  swift_release(v12);
  __asm { BR              X9 }

uint64_t sub_100415C4C()
{
  *(void *)(v8 - 136) = v4;
  *(_WORD *)(v8 - 128) = v5;
  *(_BYTE *)(v8 - 126) = BYTE2(v5);
  *(_BYTE *)(v8 - 125) = BYTE3(v5);
  *(_BYTE *)(v8 - 124) = BYTE4(v5);
  *(_BYTE *)(v8 - 123) = BYTE5(v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v0, v3, v2);
  uint64_t v9 = DispatchData.init(bytesNoCopy:deallocator:)(v8 - 136, v8 - 136 + BYTE6(v5), v0);
  uint64_t v10 = *(void *)(v8 - 152);
  uint64_t v11 = ((uint64_t (*)(uint64_t))DispatchData._bridgeToObjectiveC())(v9);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v1, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v3, v2);
  return v11;
}

void sub_100415E9C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, nw_content_context *a5, char a6)
{
  uint64_t v11 = sub_100183098(&qword_1006493C8);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v15 = (nw_connection *)NWConnection.nw.getter(v14);
  if (a4 >> 60 == 15)
  {
    os_log_type_t v16 = 0LL;
  }

  else
  {
    sub_100415AD8(a3, a4);
    os_log_type_t v16 = v17;
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))( (char *)aBlock - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v11);
  uint64_t v18 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v19 = (v18 + 16) & ~v18;
  uint64_t v20 = swift_allocObject(&unk_1005E0EE0, v19 + v13, v18 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))( v20 + v19,  (char *)aBlock - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v11);
  aBlock[4] = sub_1004160E8;
  uint64_t v23 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10036FCE0;
  uint64_t aBlock[3] = &unk_1005E0EF8;
  uint64_t v21 = _Block_copy(aBlock);
  swift_release(v23);
  nw_connection_send(v15, v16, a5, a6 & 1, v21);
  _Block_release(v21);
  swift_unknownObjectRelease(v15);
}

uint64_t sub_100416020(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = (nw_error *)swift_unknownObjectRetain(a1);
    CFErrorRef v3 = nw_error_copy_cf_error(v2);
    type metadata accessor for CFError(0LL);
    uint64_t v5 = v4;
    uint64_t v6 = sub_100183F14( &qword_100654C00,  (uint64_t (*)(uint64_t))type metadata accessor for CFError,  (uint64_t)&protocol conformance descriptor for CFErrorRef);
    uint64_t v7 = swift_allocError(v5, v6, 0LL, 0LL);
    *uint64_t v8 = v3;
    uint64_t v12 = v7;
    uint64_t v9 = sub_100183098(&qword_1006493C8);
    CheckedContinuation.resume(throwing:)(&v12, v9);
    return swift_unknownObjectRelease(a1);
  }

  else
  {
    uint64_t v11 = sub_100183098(&qword_1006493C8);
    return CheckedContinuation.resume(returning:)(v11, v11);
  }

uint64_t sub_1004160DC()
{
  return sub_10025F7F0(&qword_1006493C8);
}

uint64_t sub_1004160EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_10018709C(v0 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1004160FC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100416104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 7sub_10018709C(v0 + 2) = a4;
  *(void *)(v6 + 80) = v5;
  *(_BYTE *)(v6 + 136) = a5;
  *(void *)(v6 + 56) = a2;
  *(void *)(v6 + 64) = a3;
  *(void *)(v6 + 48) = a1;
  return swift_task_switch(sub_100416128, 0LL, 0LL);
}

void sub_100416128()
{
  *(void *)(v0 + 40) = 0LL;
  swift_beginAccess(v0 + 40, v0 + 16, 1LL, 0LL);
  __asm { BR              X11 }

uint64_t sub_100416188@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = BYTE6(a1);
  uint64_t v5 = *(void *)(v3 + 72);
  *(void *)(v3 + 88) = BYTE6(a1);
  if (BYTE6(a1) <= v5) {
    __asm { BR              X11 }
  }

  if (qword_100644368 != -1) {
    swift_once(&qword_100644368, sub_10041341C);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_100186DE4(v6, (uint64_t)qword_100654BE0);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v10 = 134217984;
    if (__OFSUB__(v5, *v2))
    {
LABEL_11:
      __break(1u);
      JUMPOUT(0x1004163B0LL);
    }

    uint64_t v11 = v10;
    *(void *)(v10 + 4) = v5 - *v2;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Sending %ld bytes", (uint8_t *)v10, 0xCu);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  if (v5 < *v2)
  {
    __break(1u);
    goto LABEL_11;
  }

  BOOL v12 = v4 <= v5;
  uint64_t v13 = *(void *)(v3 + 80);
  char v14 = *(_BYTE *)(v3 + 136);
  uint64_t v15 = *(void *)(v3 + 48);
  uint64_t v16 = Data._Representation.subscript.getter();
  uint64_t v18 = v17;
  *(void *)(v3 + 96) = v16;
  *(void *)(v3 + 104) = v17;
  uint64_t v19 = swift_task_alloc(64LL);
  *(void *)(v3 + 11sub_10018709C(v0 + 2) = v19;
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = v13;
  *(void *)(v19 + 24) = v16;
  *(void *)(v19 + 3sub_10018709C(v0 + 2) = v18;
  *(void *)(v19 + 40) = v15;
  *(_BYTE *)(v19 + 48) = v12 & v14;
  uint64_t v20 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v3 + 120) = v20;
  *uint64_t v20 = v3;
  v20[1] = sub_1004163E0;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v20,  0LL,  0LL,  0xD000000000000029LL,  0x80000001005074E0LL,  sub_10026662C,  v19,  (char *)&type metadata for () + 8);
}

uint64_t sub_1004163E0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 120);
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_100416750;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 112));
    uint64_t v4 = sub_10041644C;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

void sub_10041644C()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[9];
  sub_100189B20(v0[12], v0[13]);
  if (v1 > v2)
  {
    uint64_t v3 = v0[9];
    uint64_t v4 = v0[5];
    if (!__OFADD__(v4, v3))
    {
      v0[5] = v4 + v3;
      __asm { BR              X13 }
    }

    __break(1u);
    JUMPOUT(0x1004166FCLL);
  }

  __asm { BR              X0 }

uint64_t sub_100416750()
{
  unint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 96);
  swift_task_dealloc(*(void *)(v0 + 112));
  sub_100189B20(v2, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100416794(uint64_t a1, uint64_t a2)
{
  return sub_10041740C( a1,  a2,  &qword_100654C28,  (uint64_t)&unk_1005E0F80,  (uint64_t)sub_100417C0C,  (uint64_t)&unk_1005E0F98);
}

void sub_1004167B8(void **a1, nw_content_context *a2, char a3, nw_content_context *a4)
{
  if (!a2)
  {
    uint64_t v15 = type metadata accessor for SFAirDropReceive.Failure(0LL);
    uint64_t v16 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
    uint64_t v17 = swift_allocError(v15, v16, 0LL, 0LL);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v15 - 8) + 104LL))( v18,  enum case for SFAirDropReceive.Failure.badRequest(_:),  v15);
    uint64_t aBlock = (void **)v17;
    uint64_t v19 = sub_100183098(&qword_100654C28);
    CheckedContinuation.resume(throwing:)(&aBlock, v19);
    return;
  }

  if (a4)
  {
    swift_unknownObjectRetain(a2);
    uint64_t v6 = (nw_error *)swift_unknownObjectRetain(a4);
    CFErrorRef v7 = nw_error_copy_cf_error(v6);
    type metadata accessor for CFError(0LL);
    uint64_t v9 = v8;
    uint64_t v10 = sub_100183F14( &qword_100654C00,  (uint64_t (*)(uint64_t))type metadata accessor for CFError,  (uint64_t)&protocol conformance descriptor for CFErrorRef);
    uint64_t v11 = swift_allocError(v9, v10, 0LL, 0LL);
    *BOOL v12 = v7;
    uint64_t aBlock = (void **)v11;
    uint64_t v13 = sub_100183098(&qword_100654C28);
    CheckedContinuation.resume(throwing:)(&aBlock, v13);
    swift_unknownObjectRelease(a2);
    char v14 = a4;
LABEL_18:
    swift_unknownObjectRelease(v14);
    return;
  }

  uint64_t v22 = swift_unknownObjectRetain(a2);
  uint64_t v23 = (nw_protocol_definition *)nw_protocol_copy_http_definition(v22);
  nw_protocol_metadata_t v24 = nw_content_context_copy_protocol_metadata(a2, v23);
  swift_unknownObjectRelease(v23);
  if (!v24)
  {
LABEL_17:
    uint64_t v36 = type metadata accessor for SFAirDropReceive.Failure(0LL);
    uint64_t v37 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
    uint64_t v38 = swift_allocError(v36, v37, 0LL, 0LL);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v36 - 8) + 104LL))( v39,  enum case for SFAirDropReceive.Failure.badRequest(_:),  v36);
    uint64_t aBlock = (void **)v38;
    uint64_t v40 = sub_100183098(&qword_100654C28);
    CheckedContinuation.resume(throwing:)(&aBlock, v40);
    char v14 = a2;
    goto LABEL_18;
  }

  uint64_t v25 = nw_http_metadata_copy_request(v24);
  if (!v25)
  {
    swift_unknownObjectRelease(v24);
    goto LABEL_17;
  }

  uint64_t v26 = v25;
  char v56 = 0LL;
  uint64_t v57 = 0LL;
  uint64_t v27 = swift_allocObject(&unk_1005E0FD0, 24LL, 7LL);
  *(void *)(v27 + swift_weakDestroy(v0 + 16) = &v56;
  uint64_t v28 = swift_allocObject(&unk_1005E0FF8, 32LL, 7LL);
  *(void *)(v28 + swift_weakDestroy(v0 + 16) = sub_100417C30;
  *(void *)(v28 + 24) = v27;
  uint64_t v54 = sub_1003D39DC;
  uint64_t v55 = v28;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v51 = 1107296256LL;
  unint64_t v52 = sub_100416C60;
  uint64_t v53 = &unk_1005E1010;
  uint64_t v29 = _Block_copy(&aBlock);
  uint64_t v30 = v55;
  swift_retain(v28);
  swift_release(v30);
  nw_http_request_access_path(v26, v29);
  _Block_release(v29);
  LOBYTE(v29) = swift_isEscapingClosureAtFileLocation(v28, "", 88LL, 588LL, 54LL, 1LL);
  swift_release(v28);
  if ((v29 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v31 = v57;
    if (v57)
    {
      uint64_t v32 = v56;
      if (a1)
      {
        uint64_t v49 = a1;
        swift_bridgeObjectRetain(v57);
        uint64_t v33 = a1;
        int v34 = swift_dynamicCast( &aBlock,  &v49,  (char *)&type metadata for Swift.AnyObject + 8,  &type metadata for Data,  6LL);
        if (v34) {
          a1 = aBlock;
        }
        else {
          a1 = 0LL;
        }
        if (v34) {
          unint64_t v35 = v51;
        }
        else {
          unint64_t v35 = 0xC000000000000000LL;
        }
      }

      else
      {
        swift_bridgeObjectRetain(v57);
        unint64_t v35 = 0xC000000000000000LL;
      }

      uint64_t aBlock = v32;
      uint64_t v51 = (uint64_t)v31;
      unint64_t v52 = (uint64_t (*)(uint64_t, uint64_t))a1;
      uint64_t v53 = (void *)v35;
      uint64_t v54 = (uint64_t (*)())v24;
      LOBYTE(v55) = a3 & 1;
      swift_unknownObjectRetain(v24);
      swift_bridgeObjectRetain(v31);
      sub_10019BA8C((uint64_t)a1, v35);
      swift_unknownObjectRetain(v24);
      uint64_t v47 = sub_100183098(&qword_100654C28);
      CheckedContinuation.resume(returning:)(&aBlock, v47);
      swift_bridgeObjectRelease(v31);
      swift_unknownObjectRelease(v26);
      swift_unknownObjectRelease(v24);
      swift_unknownObjectRelease(a2);
      sub_100189B20((uint64_t)a1, v35);
      nw_protocol_metadata_t v46 = v24;
    }

    else
    {
      uint64_t v41 = type metadata accessor for SFAirDropReceive.Failure(0LL);
      uint64_t v42 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
      uint64_t v43 = swift_allocError(v41, v42, 0LL, 0LL);
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v41 - 8) + 104LL))( v44,  enum case for SFAirDropReceive.Failure.badRequest(_:),  v41);
      uint64_t aBlock = (void **)v43;
      uint64_t v45 = sub_100183098(&qword_100654C28);
      CheckedContinuation.resume(throwing:)(&aBlock, v45);
      swift_unknownObjectRelease(v26);
      swift_unknownObjectRelease(v24);
      nw_protocol_metadata_t v46 = a2;
    }

    swift_unknownObjectRelease(v46);
    uint64_t v48 = v57;
    swift_release(v27);
    swift_bridgeObjectRelease(v48);
  }

uint64_t sub_100416C60(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a2);
}

void sub_100416C84(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = sub_100183098(&qword_100654C28);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v9 = NWConnection.nw.getter(v8);
  if ((a3 & 0x8000000000000000LL) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
  }

  else
  {
    if (!HIDWORD(a3))
    {
      uint64_t v10 = (nw_connection *)v9;
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))( (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v5);
      uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
      uint64_t v12 = (v11 + 16) & ~v11;
      uint64_t v13 = swift_allocObject(&unk_1005E1048, v12 + v7, v11 | 7);
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))( v13 + v12,  (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v5);
      aBlock[4] = sub_100417C64;
      uint64_t v16 = v13;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_100414858;
      uint64_t aBlock[3] = &unk_1005E1060;
      char v14 = _Block_copy(aBlock);
      swift_release(v16);
      nw_connection_receive(v10, 0, a3, v14);
      swift_unknownObjectRelease(v10);
      _Block_release(v14);
      return;
    }

    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
  }

  __break(1u);
}

void sub_100416E64(void **a1, nw_content_context *a2, char a3, nw_content_context *a4)
{
  if (!a2)
  {
    uint64_t v15 = type metadata accessor for SFAirDropReceive.Failure(0LL);
    uint64_t v16 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
    uint64_t v17 = swift_allocError(v15, v16, 0LL, 0LL);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v15 - 8) + 104LL))( v18,  enum case for SFAirDropReceive.Failure.badRequest(_:),  v15);
    uint64_t aBlock = (void **)v17;
    uint64_t v19 = sub_100183098(&qword_100654C28);
    CheckedContinuation.resume(throwing:)(&aBlock, v19);
    return;
  }

  if (a4)
  {
    swift_unknownObjectRetain(a2);
    uint64_t v6 = (nw_error *)swift_unknownObjectRetain(a4);
    CFErrorRef v7 = nw_error_copy_cf_error(v6);
    type metadata accessor for CFError(0LL);
    uint64_t v9 = v8;
    uint64_t v10 = sub_100183F14( &qword_100654C00,  (uint64_t (*)(uint64_t))type metadata accessor for CFError,  (uint64_t)&protocol conformance descriptor for CFErrorRef);
    uint64_t v11 = swift_allocError(v9, v10, 0LL, 0LL);
    *uint64_t v12 = v7;
    uint64_t aBlock = (void **)v11;
    uint64_t v13 = sub_100183098(&qword_100654C28);
    CheckedContinuation.resume(throwing:)(&aBlock, v13);
    swift_unknownObjectRelease(a2);
    char v14 = a4;
LABEL_18:
    swift_unknownObjectRelease(v14);
    return;
  }

  uint64_t v22 = swift_unknownObjectRetain(a2);
  uint64_t v23 = (nw_protocol_definition *)nw_protocol_copy_http_definition(v22);
  nw_protocol_metadata_t v24 = nw_content_context_copy_protocol_metadata(a2, v23);
  swift_unknownObjectRelease(v23);
  if (!v24)
  {
LABEL_17:
    uint64_t v41 = type metadata accessor for SFAirDropReceive.Failure(0LL);
    uint64_t v42 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
    uint64_t v43 = swift_allocError(v41, v42, 0LL, 0LL);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v41 - 8) + 104LL))( v44,  enum case for SFAirDropReceive.Failure.badRequest(_:),  v41);
    uint64_t aBlock = (void **)v43;
    uint64_t v45 = sub_100183098(&qword_100654C28);
    CheckedContinuation.resume(throwing:)(&aBlock, v45);
    char v14 = a2;
    goto LABEL_18;
  }

  uint64_t v25 = nw_http_metadata_copy_request(v24);
  if (!v25)
  {
    swift_unknownObjectRelease(v24);
    goto LABEL_17;
  }

  uint64_t v26 = v25;
  uint64_t v59 = 0LL;
  os_log_type_t v60 = 0LL;
  uint64_t v27 = swift_allocObject(&unk_1005E1098, 24LL, 7LL);
  *(void *)(v27 + swift_weakDestroy(v0 + 16) = &v59;
  uint64_t v28 = swift_allocObject(&unk_1005E10C0, 32LL, 7LL);
  *(void *)(v28 + swift_weakDestroy(v0 + 16) = sub_10041A4C0;
  *(void *)(v28 + 24) = v27;
  uint64_t v57 = sub_10041A52C;
  uint64_t v58 = v28;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v54 = 1107296256LL;
  uint64_t v55 = sub_100416C60;
  char v56 = &unk_1005E10D8;
  uint64_t v29 = _Block_copy(&aBlock);
  uint64_t v30 = v58;
  swift_retain(v28);
  swift_release(v30);
  nw_http_request_access_path(v26, v29);
  _Block_release(v29);
  LOBYTE(v29) = swift_isEscapingClosureAtFileLocation(v28, "", 88LL, 621LL, 54LL, 1LL);
  swift_release(v28);
  if ((v29 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v31 = v60;
    if (v60)
    {
      uint64_t v32 = v59;
      swift_bridgeObjectRetain(v60);
      uint64_t v33 = sub_100417344(v32, v31);
      unint64_t v35 = v34;
      unint64_t v36 = 0xC000000000000000LL;
      if (a1)
      {
        unint64_t v52 = a1;
        uint64_t v37 = a1;
        int v38 = swift_dynamicCast( &aBlock,  &v52,  (char *)&type metadata for Swift.AnyObject + 8,  &type metadata for Data,  6LL);
        if (v38) {
          a1 = aBlock;
        }
        else {
          a1 = 0LL;
        }
        if (v38) {
          unint64_t v36 = v54;
        }
      }

      uint64_t aBlock = (void **)v33;
      uint64_t v54 = (uint64_t)v35;
      uint64_t v55 = (uint64_t (*)(uint64_t, uint64_t))a1;
      char v56 = (void *)v36;
      uint64_t v57 = (uint64_t (*)())v24;
      LOBYTE(v58) = a3 & 1;
      swift_unknownObjectRetain(v24);
      swift_bridgeObjectRetain(v35);
      sub_10019BA8C((uint64_t)a1, v36);
      swift_unknownObjectRetain(v24);
      uint64_t v39 = sub_100183098(&qword_100654C28);
      CheckedContinuation.resume(returning:)(&aBlock, v39);
      swift_bridgeObjectRelease(v35);
      swift_unknownObjectRelease(v26);
      swift_unknownObjectRelease(v24);
      swift_unknownObjectRelease(a2);
      sub_100189B20((uint64_t)a1, v36);
      nw_protocol_metadata_t v40 = v24;
    }

    else
    {
      uint64_t v46 = type metadata accessor for SFAirDropReceive.Failure(0LL);
      uint64_t v47 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
      uint64_t v48 = swift_allocError(v46, v47, 0LL, 0LL);
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v46 - 8) + 104LL))( v49,  enum case for SFAirDropReceive.Failure.badRequest(_:),  v46);
      uint64_t aBlock = (void **)v48;
      uint64_t v50 = sub_100183098(&qword_100654C28);
      CheckedContinuation.resume(throwing:)(&aBlock, v50);
      swift_unknownObjectRelease(v26);
      swift_unknownObjectRelease(v24);
      nw_protocol_metadata_t v40 = a2;
    }

    swift_unknownObjectRelease(v40);
    uint64_t v51 = v60;
    swift_release(v27);
    swift_bridgeObjectRelease(v51);
  }

uint64_t sub_100417310(uint64_t result, uint64_t *a2)
{
  if (result)
  {
    uint64_t v3 = String.init(cString:)(result);
    uint64_t v4 = a2[1];
    *a2 = v3;
    a2[1] = v5;
    return swift_bridgeObjectRelease(v4);
  }

  return result;
}

uint64_t sub_100417344(uint64_t a1, const char *a2)
{
  if (((unint64_t)a2 & 0x2000000000000000LL) != 0)
  {
    v6[0] = a1;
    v6[1] = (unint64_t)a2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v3 = v6;
    goto LABEL_6;
  }

  if ((a1 & 0x1000000000000000LL) == 0)
  {
LABEL_8:
    _StringGuts._slowWithCString<A>(_:)(v6, sub_1004178CC, 0LL, a1, a2, &type metadata for String);
    swift_bridgeObjectRelease(a2);
    return v6[0];
  }

  uint64_t v3 = (void *)(((unint64_t)a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
LABEL_6:
  uint64_t v4 = String.init(cString:)(v3);
  swift_bridgeObjectRelease(a2);
  return v4;
}

uint64_t sub_1004173E8(uint64_t a1, uint64_t a2)
{
  return sub_10041740C( a1,  a2,  &qword_100654CC8,  (uint64_t)&unk_1005E1188,  (uint64_t)sub_100419AE4,  (uint64_t)&unk_1005E11A0);
}

uint64_t sub_10041740C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = sub_100183098(a3);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v10);
  char v14 = (nw_connection *)NWConnection.nw.getter(v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))( (char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v10);
  uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v16 = (v15 + 16) & ~v15;
  uint64_t v17 = swift_allocObject(a4, v16 + v12, v15 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))( v17 + v16,  (char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v10);
  aBlock[4] = a5;
  uint64_t v21 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100414858;
  uint64_t aBlock[3] = a6;
  uint64_t v18 = _Block_copy(aBlock);
  swift_release(v21);
  nw_connection_receive_message(v14, v18);
  _Block_release(v18);
  return swift_unknownObjectRelease(v14);
}

uint64_t sub_100417540(void *a1, nw_content_context *a2, uint64_t a3, nw_content_context *a4)
{
  if (!a2)
  {
    uint64_t v15 = type metadata accessor for SFAirDropReceive.Failure(0LL);
    uint64_t v16 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
    uint64_t v17 = swift_allocError(v15, v16, 0LL, 0LL);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v15 - 8) + 104LL))( v18,  enum case for SFAirDropReceive.Failure.badRequest(_:),  v15);
    nw_protocol_metadata_t v40 = (void *)v17;
    uint64_t v19 = sub_100183098(&qword_100654CC8);
    return CheckedContinuation.resume(throwing:)(&v40, v19);
  }

  if (a4)
  {
    swift_unknownObjectRetain(a2);
    uint64_t v6 = (nw_error *)swift_unknownObjectRetain(a4);
    CFErrorRef v7 = nw_error_copy_cf_error(v6);
    type metadata accessor for CFError(0LL);
    uint64_t v9 = v8;
    uint64_t v10 = sub_100183F14( &qword_100654C00,  (uint64_t (*)(uint64_t))type metadata accessor for CFError,  (uint64_t)&protocol conformance descriptor for CFErrorRef);
    uint64_t v11 = swift_allocError(v9, v10, 0LL, 0LL);
    *uint64_t v12 = v7;
    nw_protocol_metadata_t v40 = (void *)v11;
    uint64_t v13 = sub_100183098(&qword_100654CC8);
    CheckedContinuation.resume(throwing:)(&v40, v13);
    swift_unknownObjectRelease(a2);
    char v14 = a4;
  }

  else
  {
    uint64_t v22 = swift_unknownObjectRetain(a2);
    uint64_t v23 = (nw_protocol_definition *)nw_protocol_copy_http_definition(v22);
    nw_protocol_metadata_t v24 = nw_content_context_copy_protocol_metadata(a2, v23);
    swift_unknownObjectRelease(v23);
    if (v24)
    {
      uint64_t v25 = nw_http_metadata_copy_response(v24);
      if (v25)
      {
        uint64_t v26 = v25;
        int status_code = nw_http_response_get_status_code();
        char v28 = sub_100419CDC(status_code);
        if (v28 == 13) {
          char v29 = 3;
        }
        else {
          char v29 = v28;
        }
        unint64_t v30 = 0xC000000000000000LL;
        if (a1)
        {
          uint64_t v39 = a1;
          id v31 = a1;
          int v32 = swift_dynamicCast( &v40,  &v39,  (char *)&type metadata for Swift.AnyObject + 8,  &type metadata for Data,  6LL);
          if (v32) {
            a1 = v40;
          }
          else {
            a1 = 0LL;
          }
          if (v32) {
            unint64_t v30 = v41;
          }
        }

        LOBYTE(v40) = v29;
        unint64_t v41 = (unint64_t)a1;
        unint64_t v42 = v30;
        sub_10019BA8C((uint64_t)a1, v30);
        uint64_t v33 = sub_100183098(&qword_100654CC8);
        CheckedContinuation.resume(returning:)(&v40, v33);
        swift_unknownObjectRelease(v24);
        swift_unknownObjectRelease(a2);
        sub_100189B20((uint64_t)a1, v30);
        char v14 = (nw_content_context *)v26;
        return swift_unknownObjectRelease(v14);
      }

      swift_unknownObjectRelease(v24);
    }

    uint64_t v34 = type metadata accessor for SFAirDropReceive.Failure(0LL);
    uint64_t v35 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
    uint64_t v36 = swift_allocError(v34, v35, 0LL, 0LL);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v34 - 8) + 104LL))( v37,  enum case for SFAirDropReceive.Failure.badRequest(_:),  v34);
    nw_protocol_metadata_t v40 = (void *)v36;
    uint64_t v38 = sub_100183098(&qword_100654CC8);
    CheckedContinuation.resume(throwing:)(&v40, v38);
    char v14 = a2;
  }

  return swift_unknownObjectRelease(v14);
}

uint64_t sub_100417808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchData.Deallocator(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t))(v9 + 16))(v8, a3);
  return DispatchData.init(bytesNoCopy:deallocator:)(a1, a2, v8);
}

uint64_t sub_1004178A8()
{
  return swift_deallocObject(v0, 32LL);
}

uint64_t sub_1004178CC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = String.init(cString:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1004178F8(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v5 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v5 += a1 - result;
  }

  BOOL v6 = __OFSUB__(a2, a1);
  uint64_t v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v8 = __DataStorage._length.getter();
  if (v8 >= v7) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t v10 = v5 + v9;
  if (v5) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0LL;
  }
  uint64_t v12 = type metadata accessor for SHA256(0LL);
  uint64_t v13 = sub_100183F14( (unint64_t *)&unk_10064D7C0,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  (uint64_t)&protocol conformance descriptor for SHA256);
  return dispatch thunk of HashFunction.update(bufferPointer:)(v5, v11, v12, v13);
}

uint64_t sub_1004179BC(void *a1)
{
  uint64_t v3 = type metadata accessor for SHA256Digest(0LL);
  __chkstk_darwin(v3);
  (*(void (**)(char *, void *, uint64_t))(v5 + 16))( (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v3);
  sub_100183F14( (unint64_t *)&unk_100654C18,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256Digest,  (uint64_t)&protocol conformance descriptor for SHA256Digest);
  dispatch thunk of Sequence.makeIterator()(v3);
  uint64_t result = sub_100183098(&qword_10064D740);
  uint64_t v7 = *(void *)((char *)a1 + *(int *)(result + 36));
  uint64_t v8 = v30;
  if (!v7 || (unint64_t v9 = v31, v10 = *(void *)(v30 + 16), v31 == v10))
  {
    uint64_t result = swift_bridgeObjectRelease(v30);
    size_t v1 = 0LL;
    a1 = &_swiftEmptyArrayStorage;
    goto LABEL_27;
  }

  if ((v31 & 0x8000000000000000LL) == 0)
  {
    if (v31 < *(void *)(v30 + 16))
    {
      size_t v1 = 0LL;
      a1 = &_swiftEmptyArrayStorage;
      uint64_t v11 = v7 - 1;
      uint64_t v12 = (char *)&_swiftEmptyArrayStorage + 32;
      uint64_t v13 = v10 - 1;
      uint64_t v29 = v13;
      while (1)
      {
        char v14 = *(_BYTE *)(v8 + v9 + 32);
        if (!v1)
        {
          unint64_t v15 = a1[3];
          int64_t v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
          if (v16 <= 1) {
            uint64_t v17 = 1LL;
          }
          else {
            uint64_t v17 = v16;
          }
          uint64_t v18 = sub_100183098(&qword_1006451F0);
          uint64_t v19 = (void *)swift_allocObject(v18, v17 + 32, 7LL);
          size_t v20 = 2 * j__malloc_size(v19) - 64;
          v19[2] = v17;
          v19[3] = v20;
          unint64_t v21 = (unint64_t)(v19 + 4);
          size_t v22 = a1[3] >> 1;
          if (a1[2])
          {
            a1[2] = 0LL;
          }

          uint64_t v12 = (_BYTE *)(v21 + v22);
          size_t v1 = (v20 >> 1) - v22;
          uint64_t result = swift_release(a1);
          a1 = v19;
          uint64_t v13 = v29;
        }

        BOOL v24 = __OFSUB__(v1--, 1LL);
        if (v24) {
          break;
        }
        *uint64_t v12 = v14;
        if (!v11 || v13 == v9) {
          goto LABEL_26;
        }
        ++v9;
        ++v12;
        --v11;
        if (v9 >= *(void *)(v8 + 16)) {
          goto LABEL_25;
        }
      }

      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }

uint64_t sub_100417C00()
{
  return sub_10025F7F0(&qword_100654C28);
}

uint64_t sub_100417C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100419E10( a1,  a2,  a3,  a4,  &qword_100654C28,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1004167B8);
}

uint64_t sub_100417C20()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100417C30(uint64_t a1)
{
  return sub_100417310(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_100417C48()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100417C58()
{
  return sub_10025F7F0(&qword_100654C28);
}

uint64_t sub_100417C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100419E10( a1,  a2,  a3,  a4,  &qword_100654C28,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100416E64);
}

uint64_t sub_100417C78()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100417C88()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

int64_t sub_100417C98(int64_t result, int64_t a2, uint64_t a3)
{
  int64_t v5 = result;
  uint64_t v6 = 0LL;
  uint64_t v7 = 32LL;
  int64_t v8 = result;
  while (1)
  {
    BOOL v9 = v8 <= a2;
    if (a3 > 0) {
      BOOL v9 = v8 >= a2;
    }
    if (v9) {
      break;
    }
    BOOL v10 = __OFADD__(v8, a3);
    v8 += a3;
    if (v10) {
      int64_t v8 = (v8 >> 63) ^ 0x8000000000000000LL;
    }
    v7 += 8LL;
    BOOL v10 = __OFADD__(v6++, 1LL);
    if (v10)
    {
      __break(1u);
      break;
    }
  }

  if (v6 > 0)
  {
    uint64_t v11 = sub_100183098(&qword_100654CC0);
    uint64_t v12 = (int64_t *)swift_allocObject(v11, v7, 7LL);
    uint64_t result = j__malloc_size(v12);
    uint64_t v13 = result - 32;
    if (result < 32) {
      uint64_t v13 = result - 25;
    }
    uint64_t v14 = v13 >> 3;
    v12[2] = v6;
    v12[3] = 2 * v14;
    unint64_t v15 = v12 + 4;
    uint64_t v16 = v14 & 0x7FFFFFFFFFFFFFFFLL;
LABEL_15:
    v16 -= v6;
    while (1)
    {
      BOOL v17 = v5 <= a2;
      if (a3 > 0) {
        BOOL v17 = v5 >= a2;
      }
      if (v17) {
        break;
      }
      if (__OFADD__(v5, a3)) {
        int64_t v18 = ((v5 + a3) >> 63) ^ 0x8000000000000000LL;
      }
      else {
        int64_t v18 = v5 + a3;
      }
      *v15++ = v5;
      int64_t v5 = v18;
      if (!--v6) {
        goto LABEL_23;
      }
    }

    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }

  uint64_t v12 = _swiftEmptyArrayStorage;
  unint64_t v15 = &_swiftEmptyArrayStorage[4];
  uint64_t v16 = _swiftEmptyArrayStorage[3] >> 1;
  if (v6) {
    goto LABEL_15;
  }
  int64_t v18 = result;
LABEL_23:
  BOOL v19 = v18 <= a2;
  if (a3 > 0) {
    BOOL v19 = v18 >= a2;
  }
  if (!v19)
  {
    uint64_t v20 = (a3 >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      int64_t v21 = v18 + a3;
      if (__OFADD__(v18, a3))
      {
        int64_t v21 = v20;
        if (!v16) {
          goto LABEL_32;
        }
        int64_t v21 = v20;
      }

      else if (!v16)
      {
LABEL_32:
        unint64_t v22 = v12[3];
        int64_t v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
        if (v23 <= 1) {
          uint64_t v24 = 1LL;
        }
        else {
          uint64_t v24 = v23;
        }
        uint64_t v25 = sub_100183098(&qword_100654CC0);
        unint64_t v26 = (int64_t *)swift_allocObject(v25, 8 * v24 + 32, 7LL);
        int64_t v27 = j__malloc_size(v26);
        uint64_t v28 = v27 - 32;
        if (v27 < 32) {
          uint64_t v28 = v27 - 25;
        }
        uint64_t v29 = v28 >> 3;
        v26[2] = v24;
        __int128 v26[3] = 2 * (v28 >> 3);
        unint64_t v30 = (unint64_t)(v26 + 4);
        unint64_t v31 = (unint64_t)v12[3] >> 1;
        if (v12[2])
        {
          v12[2] = 0LL;
        }

        unint64_t v15 = (int64_t *)(v30 + 8 * v31);
        uint64_t v16 = (v29 & 0x7FFFFFFFFFFFFFFFLL) - v31;
        uint64_t result = swift_release(v12);
        uint64_t v12 = v26;
        uint64_t v20 = (a3 >> 63) ^ 0x7FFFFFFFFFFFFFFFLL;
      }

      BOOL v10 = __OFSUB__(v16--, 1LL);
      if (v10) {
        goto LABEL_57;
      }
      *v15++ = v18;
      BOOL v33 = v21 <= a2;
      if (a3 > 0) {
        BOOL v33 = v21 >= a2;
      }
      int64_t v18 = v21;
    }

    while (!v33);
  }

  unint64_t v34 = v12[3];
  if (v34 < 2) {
    return (int64_t)v12;
  }
  unint64_t v35 = v34 >> 1;
  BOOL v10 = __OFSUB__(v35, v16);
  unint64_t v36 = v35 - v16;
  if (!v10)
  {
    v12[2] = v36;
    return (int64_t)v12;
  }

uint64_t sub_100417F18(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for String.Encoding(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1) {
    application_service_quic_using_identity = (nw_parameters *)nw_parameters_create_application_service_quic_using_identity(a1);
  }
  else {
    application_service_quic_using_identity = (nw_parameters *)nw_parameters_create_application_service_quic(v4);
  }
  int64_t v8 = application_service_quic_using_identity;
  if (!application_service_quic_using_identity) {
    goto LABEL_19;
  }
  nw_parameters_set_prohibit_constrained(application_service_quic_using_identity, 1);
  uint64_t aBlock = (void **)0xD00000000000001BLL;
  unint64_t v37 = 0x800000010050F2D0LL;
  uint64_t v9 = swift_unknownObjectRetain(v8);
  static String.Encoding.utf8.getter(v9);
  unint64_t v10 = sub_1001CCE8C();
  uint64_t v11 = StringProtocol.cString(using:)(v6, &type metadata for String, v10);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  swift_bridgeObjectRelease(v37);
  if (v11) {
    uint64_t v12 = v11 + 32;
  }
  else {
    uint64_t v12 = 0LL;
  }
  nw_parameters_set_source_application_by_bundle_id(v8, v12);
  swift_unknownObjectRelease(v8);
  swift_bridgeObjectRelease(v11);
  nw_parameters_set_include_peer_to_peer(v8, 1);
  uint64_t v13 = swift_unknownObjectRetain(v8);
  nw_parameters_set_attach_protocol_listener(v13, 1LL);
  nw_parameters_set_server_mode(v8, 1LL);
  swift_unknownObjectRelease(v8);
  if ((sub_10033D56C() & 1) != 0)
  {
    nw_parameters_set_local_only(v8, 0);
  }

  else
  {
    if (a1) {
      nw_parameters_set_required_interface_subtype(v8, 1002LL);
    }
    nw_parameters_set_multipath_service(v8, nw_multipath_service_disabled);
  }

  type metadata accessor for SFAirDropUserDefaults(0LL, v14);
  unint64_t v15 = (void *)static SFAirDropUserDefaults.shared.getter();
  char v16 = SFAirDropUserDefaults.cellularUsageEnabled.getter();

  if ((v16 & 1) == 0)
  {
    nw_parameters_set_prohibit_expensive(v8, 1);
    xpc_object_t empty = xpc_array_create_empty();
    size_t v18 = XPC_ARRAY_APPEND.getter();
    xpc_array_set_uint64(empty, v18, 2uLL);
    nw_parameters_set_prohibited_interface_types(v8, empty);
    swift_unknownObjectRelease(empty);
  }

  char v42 = 0;
  BOOL v19 = nw_parameters_copy_default_protocol_stack(v8);
  uint64_t v20 = swift_allocObject(&unk_1005E1110, 24LL, 7LL);
  *(void *)(v20 + swift_weakDestroy(v0 + 16) = &v42;
  uint64_t v21 = swift_allocObject(&unk_1005E1138, 32LL, 7LL);
  *(void *)(v21 + swift_weakDestroy(v0 + 16) = sub_100419AA8;
  *(void *)(v21 + 24) = v20;
  nw_protocol_metadata_t v40 = sub_10041A52C;
  uint64_t v41 = v21;
  uint64_t aBlock = _NSConcreteStackBlock;
  unint64_t v37 = 1107296256LL;
  uint64_t v38 = sub_100413754;
  uint64_t v39 = &unk_1005E1150;
  unint64_t v22 = _Block_copy(&aBlock);
  uint64_t v23 = v41;
  swift_retain(v21);
  swift_release(v23);
  nw_protocol_stack_iterate_application_protocols(v19, v22);
  _Block_release(v22);
  LOBYTE(v2sub_10018709C(v0 + 2) = swift_isEscapingClosureAtFileLocation(v21, "", 88LL, 366LL, 66LL, 1LL);
  swift_release(v21);
  if ((v22 & 1) != 0)
  {
    __break(1u);
LABEL_19:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000034LL,  0x800000010050F410LL,  "DaemoniOSLibrary/Network+SFAirDrop.swift",  40LL,  2LL,  338LL,  0);
    goto LABEL_21;
  }

  if (v42 == 1)
  {
    type metadata accessor for NWParameters(0LL);
    uint64_t v24 = swift_unknownObjectRetain(v8);
    uint64_t v25 = NWParameters.__allocating_init(_:)(v24);
    uint64_t v26 = NWParameters.preferNoProxies.setter(1LL);
    options = (nw_protocol_options *)nw_http3_create_options(v26);
    uint64_t v28 = (nw_parameters *)NWParameters.nw.getter();
    uint64_t v29 = nw_parameters_copy_default_protocol_stack(v28);
    swift_unknownObjectRelease(v28);
    nw_protocol_stack_prepend_application_protocol(v29, options);
    swift_release(v20);
    swift_unknownObjectRelease(v19);
    swift_unknownObjectRelease(v8);
    swift_unknownObjectRelease(options);
    swift_unknownObjectRelease(v29);
    return v25;
  }

  uint64_t aBlock = 0LL;
  unint64_t v37 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(75LL);
  v31._uint64_t countAndFlagsBits = 0xD00000000000003ALL;
  v31._id object = (void *)0x800000010050F480LL;
  String.append(_:)(v31);
  unint64_t v35 = v19;
  uint64_t v32 = sub_100183098(&qword_100654CA8);
  _print_unlocked<A, B>(_:_:)( &v35,  &aBlock,  v32,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v33._uint64_t countAndFlagsBits = 0x74656D6172617020LL;
  v33._id object = (void *)0xED0000203A737265LL;
  String.append(_:)(v33);
  unint64_t v35 = v8;
  uint64_t v34 = sub_100183098((uint64_t *)&unk_100654CB0);
  _print_unlocked<A, B>(_:_:)( &v35,  &aBlock,  v34,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  aBlock,  v37,  "DaemoniOSLibrary/Network+SFAirDrop.swift",  40LL,  2LL,  381LL,  0);
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_10041839C(uint64_t a1)
{
  uint64_t v2 = (nw_connection *)NWConnection.nw.getter(a1);
  nw_parameters_t v3 = nw_connection_copy_parameters(v2);
  uint64_t v4 = swift_unknownObjectRelease(v2);
  uint64_t v5 = NWConnection.nw.getter(v4);
  uint64_t v6 = nw_connection_create_with_connection(v5, v3);
  swift_unknownObjectRelease(v5);
  if (!v6)
  {
    _StringGuts.grow(_:)(55LL);
    v25._uint64_t countAndFlagsBits = 0xD000000000000035LL;
    v25._id object = (void *)0x800000010050F5A0LL;
    String.append(_:)(v25);
    v27._uint64_t countAndFlagsBits = NWConnection.debugDescription.getter(v26);
    id object = v27._object;
    String.append(_:)(v27);
    swift_bridgeObjectRelease(object);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0LL,  0xE000000000000000LL,  "DaemoniOSLibrary/Network+SFAirDrop.swift",  40LL,  2LL,  73LL,  0);
LABEL_11:
    __break(1u);
    return result;
  }

  uint64_t v7 = swift_unknownObjectRetain(v6);
  uint64_t v8 = NWConnection.__allocating_init(_:)(v7);
  if (!v8)
  {
    _StringGuts.grow(_:)(38LL);
    uint64_t v29 = swift_bridgeObjectRelease(0xE000000000000000LL);
    v30._uint64_t countAndFlagsBits = NWConnection.debugDescription.getter(v29);
    Swift::String v31 = v30._object;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v31);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000024LL,  0x800000010050F5E0LL,  "DaemoniOSLibrary/Network+SFAirDrop.swift",  40LL,  2LL,  76LL,  0);
    goto LABEL_11;
  }

  uint64_t v9 = v8;
  if (qword_100644368 != -1) {
    swift_once(&qword_100644368, sub_10041341C);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v10, (uint64_t)qword_100654BE0);
  swift_retain_n(v9, 2LL);
  uint64_t v11 = swift_retain_n(a1, 2LL);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc(22LL, -1LL);
    uint64_t v15 = swift_slowAlloc(64LL, -1LL);
    uint64_t v33 = v15;
    *(_DWORD *)uint64_t v14 = 136315394;
    uint64_t v16 = NWConnection.debugDescription.getter(v15);
    unint64_t v18 = v17;
    uint64_t v32 = sub_10018CDB4(v16, v17, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v14 + 4, v14 + 12);
    swift_release_n(v9, 2LL);
    uint64_t v19 = swift_bridgeObjectRelease(v18);
    *(_WORD *)(v14 + 1sub_10018709C(v0 + 2) = 2080;
    uint64_t v20 = NWConnection.debugDescription.getter(v19);
    unint64_t v22 = v21;
    uint64_t v32 = sub_10018CDB4(v20, v21, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v14 + 14, v14 + 22);
    swift_release_n(a1, 2LL);
    swift_bridgeObjectRelease(v22);
    _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "Created connection %s from existing connection %s",  (uint8_t *)v14,  0x16u);
    swift_arrayDestroy(v15, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_unknownObjectRelease(v6);

    uint64_t v23 = (uint64_t)v3;
  }

  else
  {

    swift_unknownObjectRelease(v3);
    swift_release_n(a1, 2LL);
    swift_release_n(v9, 2LL);
    uint64_t v23 = v6;
  }

  swift_unknownObjectRelease(v23);
  return v9;
}

uint64_t sub_100418718(char a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for String.Encoding(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a2) {
    application_service_quic_using_identity = (nw_parameters *)nw_parameters_create_application_service_quic_using_identity(a2);
  }
  else {
    application_service_quic_using_identity = (nw_parameters *)nw_parameters_create_application_service_quic(v6);
  }
  uint64_t v10 = application_service_quic_using_identity;
  if (!application_service_quic_using_identity) {
    goto LABEL_18;
  }
  nw_parameters_set_prohibit_constrained(application_service_quic_using_identity, 1);
  uint64_t aBlock = (void **)0xD00000000000001BLL;
  unint64_t v52 = 0x800000010050F2D0LL;
  uint64_t v11 = swift_unknownObjectRetain(v10);
  static String.Encoding.utf8.getter(v11);
  unint64_t v12 = sub_1001CCE8C();
  uint64_t v13 = StringProtocol.cString(using:)(v8, &type metadata for String, v12);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  swift_bridgeObjectRelease(v52);
  if (v13) {
    uint64_t v14 = v13 + 32;
  }
  else {
    uint64_t v14 = 0LL;
  }
  nw_parameters_set_source_application_by_bundle_id(v10, v14);
  swift_unknownObjectRelease(v10);
  swift_bridgeObjectRelease(v13);
  nw_parameters_set_include_peer_to_peer(v10, 1);
  if ((sub_10033D56C() & 1) != 0)
  {
    if ((a1 & 1) == 0) {
      nw_parameters_set_local_only(v10, 0);
    }
  }

  else
  {
    nw_parameters_set_required_interface_subtype(v10, 1002LL);
    nw_parameters_set_multipath_service(v10, nw_multipath_service_disabled);
  }

  type metadata accessor for SFAirDropUserDefaults(0LL, v15);
  uint64_t v16 = (void *)static SFAirDropUserDefaults.shared.getter();
  char v17 = SFAirDropUserDefaults.cellularUsageEnabled.getter();

  if ((v17 & 1) == 0)
  {
    nw_parameters_set_prohibit_expensive(v10, 1);
    xpc_object_t empty = xpc_array_create_empty();
    size_t v19 = XPC_ARRAY_APPEND.getter();
    xpc_array_set_uint64(empty, v19, 2uLL);
    nw_parameters_set_prohibited_interface_types(v10, empty);
    swift_unknownObjectRelease(empty);
  }

  xpc_object_t v20 = xpc_array_create_empty();
  size_t v21 = XPC_ARRAY_APPEND.getter();
  xpc_array_set_uint64(v20, v21, 0x3EAuLL);
  nw_parameters_set_preferred_interface_subtypes(v10, v20);
  char v57 = 0;
  unint64_t v22 = nw_parameters_copy_default_protocol_stack(v10);
  uint64_t v23 = swift_allocObject(&unk_1005E1318, 24LL, 7LL);
  *(void *)(v23 + swift_weakDestroy(v0 + 16) = &v57;
  uint64_t v24 = swift_allocObject(&unk_1005E1340, 32LL, 7LL);
  *(void *)(v24 + swift_weakDestroy(v0 + 16) = sub_100419F38;
  *(void *)(v24 + 24) = v23;
  uint64_t v55 = sub_10041A52C;
  uint64_t v56 = v24;
  uint64_t aBlock = _NSConcreteStackBlock;
  unint64_t v52 = 1107296256LL;
  uint64_t v53 = sub_100413754;
  uint64_t v54 = &unk_1005E1358;
  Swift::String v25 = _Block_copy(&aBlock);
  uint64_t v26 = v56;
  swift_retain(v24);
  swift_release(v26);
  nw_protocol_stack_iterate_application_protocols(v22, v25);
  _Block_release(v25);
  LOBYTE(v25) = swift_isEscapingClosureAtFileLocation(v24, "", 88LL, 145LL, 66LL, 1LL);
  swift_release(v24);
  if ((v25 & 1) != 0)
  {
    __break(1u);
LABEL_18:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000034LL,  0x800000010050F410LL,  "DaemoniOSLibrary/Network+SFAirDrop.swift",  40LL,  2LL,  112LL,  0);
    goto LABEL_20;
  }

  if (v57 == 1)
  {
    xpc_object_t v27 = xpc_array_create(0LL, 0LL);
    size_t v28 = XPC_ARRAY_APPEND.getter();
    xpc_array_set_string(v27, v28, "com.apple.rapport.browse");
    xpc_object_t v29 = xpc_array_create(0LL, 0LL);
    size_t v30 = XPC_ARRAY_APPEND.getter();
    xpc_array_set_string(v29, v30, "RapportBrowseAgent");
    nw_parameters_set_preferred_netagent_classes(v10, v27, v29);
    type metadata accessor for NWParameters(0LL);
    uint64_t v31 = swift_unknownObjectRetain(v10);
    uint64_t v32 = NWParameters.__allocating_init(_:)(v31);
    uint64_t v33 = NWParameters.preferNoProxies.setter(1LL);
    options = (nw_protocol_options *)nw_http3_create_options(v33);
    unint64_t v35 = (nw_parameters *)((uint64_t (*)(void))NWParameters.nw.getter)();
    unint64_t v36 = nw_parameters_copy_default_protocol_stack(v35);
    swift_unknownObjectRelease(v35);
    nw_protocol_stack_prepend_application_protocol(v36, options);
    swift_unknownObjectRelease(options);
    uint64_t v37 = swift_unknownObjectRelease(v36);
    uint64_t v38 = NWParameters.nw.getter(v37);
    nw_parameters_set_server_mode(v38, 0LL);
    uint64_t v39 = swift_unknownObjectRelease(v38);
    uint64_t v40 = NWParameters.nw.getter(v39);
    uint64_t v41 = AirDropID.getter();
    uint64_t v43 = v42;
    uint64_t v44 = String.utf8CString.getter(v41, v42);
    swift_bridgeObjectRelease(v43);
    nw_parameters_set_account_id(v40, v44 + 32);
    swift_release(v23);
    swift_unknownObjectRelease(v22);
    swift_unknownObjectRelease(v27);
    swift_unknownObjectRelease(v29);
    swift_unknownObjectRelease(v40);
    swift_release(v44);
    swift_unknownObjectRelease(v20);
    swift_unknownObjectRelease(v10);
    return v32;
  }

  uint64_t aBlock = 0LL;
  unint64_t v52 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(75LL);
  v46._uint64_t countAndFlagsBits = 0xD00000000000003ALL;
  v46._id object = (void *)0x800000010050F480LL;
  String.append(_:)(v46);
  uint64_t v50 = v22;
  uint64_t v47 = sub_100183098(&qword_100654CA8);
  _print_unlocked<A, B>(_:_:)( &v50,  &aBlock,  v47,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v48._uint64_t countAndFlagsBits = 0x74656D6172617020LL;
  v48._id object = (void *)0xED0000203A737265LL;
  String.append(_:)(v48);
  uint64_t v50 = v10;
  uint64_t v49 = sub_100183098((uint64_t *)&unk_100654CB0);
  _print_unlocked<A, B>(_:_:)( &v50,  &aBlock,  v49,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  aBlock,  v52,  "DaemoniOSLibrary/Network+SFAirDrop.swift",  40LL,  2LL,  160LL,  0);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_100418C78( dispatch_queue_s *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v45 = a6;
  uint64_t v46 = a2;
  int v49 = a3;
  uint64_t v11 = type metadata accessor for NWInterface.InterfaceSubtype(0LL);
  uint64_t v47 = *(void *)(v11 - 8);
  uint64_t v48 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for NWProtocolTCP.Options(0LL);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  uint64_t v15 = NWProtocolTCP.Options.init()();
  dispatch thunk of NWProtocolTCP.Options.enableFastOpen.setter(0LL);
  uint64_t v16 = type metadata accessor for NWProtocolTLS.Options(0LL);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  uint64_t v17 = NWProtocolTLS.Options.init()();
  unint64_t v18 = (sec_protocol_options *)((uint64_t (*)(void))dispatch thunk of NWProtocolTLS.Options.securityProtocolOptions.getter)();
  sec_protocol_options_set_peer_authentication_required(v18, 0);
  uint64_t v19 = swift_unknownObjectRelease(v18);
  xpc_object_t v20 = (sec_protocol_options *)dispatch thunk of NWProtocolTLS.Options.securityProtocolOptions.getter(v19);
  uint64_t v54 = a4;
  uint64_t v55 = a5;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v51 = 1107296256LL;
  unint64_t v52 = sub_100412B8C;
  uint64_t v53 = &unk_1005E11C8;
  size_t v21 = _Block_copy(&aBlock);
  uint64_t v22 = v55;
  swift_retain(a5);
  swift_release(v22);
  sec_protocol_options_set_verify_block(v20, v21, a1);
  _Block_release(v21);
  uint64_t v23 = swift_unknownObjectRelease(v20);
  uint64_t v24 = (sec_protocol_options *)dispatch thunk of NWProtocolTLS.Options.securityProtocolOptions.getter(v23);
  uint64_t v54 = v45;
  uint64_t v55 = a7;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v51 = 1107296256LL;
  unint64_t v52 = sub_1004136C8;
  uint64_t v53 = &unk_1005E11F0;
  Swift::String v25 = _Block_copy(&aBlock);
  uint64_t v26 = v55;
  swift_retain(a7);
  swift_release(v26);
  sec_protocol_options_set_challenge_block(v24, v25, a1);
  _Block_release(v25);
  uint64_t v27 = swift_unknownObjectRelease(v24);
  uint64_t v28 = dispatch thunk of NWProtocolTLS.Options.securityProtocolOptions.getter(v27);
  sec_protocol_options_set_nw_protocol_joining_context(v28, v46);
  swift_unknownObjectRelease(v28);
  type metadata accessor for NWParameters(0LL);
  swift_retain(v17);
  swift_retain(v15);
  uint64_t v29 = NWParameters.__allocating_init(tls:tcp:)(v17, v15);
  (*(void (**)(char *, void, uint64_t))(v47 + 104))( v13,  enum case for NWInterface.InterfaceSubtype.wifiAWDL(_:),  v48);
  NWParameters.requiredInterfaceSubtype.setter(v13);
  NWParameters.allowLocalEndpointReuse.setter(1LL);
  NWParameters.includePeerToPeer.setter(1LL);
  uint64_t v30 = NWParameters.preferNoProxies.setter(1LL);
  options = (nw_protocol_options *)nw_http_messaging_create_options(v30);
  uint64_t v32 = nw_http1_set_idle_timeout(options, 30LL);
  uint64_t v33 = (nw_parameters *)NWParameters.nw.getter(v32);
  uint64_t v34 = nw_parameters_copy_default_protocol_stack(v33);
  swift_unknownObjectRelease(v33);
  nw_protocol_stack_prepend_application_protocol(v34, options);
  swift_unknownObjectRelease(options);
  uint64_t v35 = swift_unknownObjectRelease(v34);
  uint64_t v36 = NWParameters.nw.getter(v35);
  nw_parameters_set_server_mode(v36, 0LL);
  uint64_t v37 = swift_unknownObjectRelease(v36);
  if ((v49 & 1) != 0)
  {
    uint64_t v38 = NWParameters.nw.getter(v37);
    uint64_t v39 = AirDropID.getter();
    uint64_t v41 = v40;
    uint64_t v42 = String.utf8CString.getter(v39, v40);
    swift_bridgeObjectRelease(v41);
    nw_parameters_set_account_id(v38, v42 + 32);
    swift_unknownObjectRelease(v38);
    swift_release(v42);
  }

  swift_release(v15);
  swift_release(v17);
  return v29;
}

void sub_100418F9C(char a1)
{
  uint64_t v2 = type metadata accessor for String.Encoding(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v48[0] = 0xD000000000000027LL;
  v48[1] = 0x800000010050F510LL;
  static String.Encoding.utf8.getter(v4);
  unint64_t v7 = sub_1001CCE8C();
  uint64_t v8 = StringProtocol.cString(using:)(v6, &type metadata for String, v7);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  int out_token = -1;
  if (v8) {
    uint64_t v9 = (const char *)(v8 + 32);
  }
  else {
    uint64_t v9 = 0LL;
  }
  uint32_t v10 = notify_register_check(v9, &out_token);
  if (v10)
  {
    uint32_t v11 = v10;
    swift_bridgeObjectRelease(v8);
    if (qword_100644368 != -1) {
      swift_once(&qword_100644368, sub_10041341C);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    uint64_t v13 = sub_100186DE4(v12, (uint64_t)qword_100654BE0);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc(18LL, -1LL);
      uint64_t v17 = swift_slowAlloc(32LL, -1LL);
      v48[0] = v17;
      *(_DWORD *)uint64_t v16 = 136315394;
      uint64_t v45 = sub_10018CDB4(0xD000000000000027LL, 0x800000010050F510LL, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v16 + 4, v16 + 12);
      *(_WORD *)(v16 + 1sub_10018709C(v0 + 2) = 1024;
      LODWORD(v45) = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, (char *)&v45 + 4, v16 + 14, v16 + 18);
      _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "Failed to registered check for notification %s with status %u",  (uint8_t *)v16,  0x12u);
      swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    return;
  }

  if (out_token == -1)
  {
    if (qword_100644368 != -1) {
      swift_once(&qword_100644368, sub_10041341C);
    }
    uint64_t v18 = type metadata accessor for Logger(0LL);
    uint64_t v19 = sub_100186DE4(v18, (uint64_t)qword_100654BE0);
    xpc_object_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v23 = swift_slowAlloc(32LL, -1LL);
      v48[0] = v23;
      *(_DWORD *)uint64_t v22 = 136315138;
      uint64_t v45 = sub_10018CDB4(0xD000000000000027LL, 0x800000010050F510LL, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v22 + 4, v22 + 12);
      _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "Failed to registered check token for notification %s",  v22,  0xCu);
      swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1LL, -1LL);
      swift_slowDealloc(v22, -1LL, -1LL);
    }
  }

  uint32_t v24 = notify_set_state(out_token, a1 & 1);
  if (v24)
  {
    uint32_t v25 = v24;
    swift_bridgeObjectRelease(v8);
    if (qword_100644368 != -1) {
      swift_once(&qword_100644368, sub_10041341C);
    }
    uint64_t v26 = type metadata accessor for Logger(0LL);
    uint64_t v27 = sub_100186DE4(v26, (uint64_t)qword_100654BE0);
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.error.getter(v28);
    if (!os_log_type_enabled(v28, v29)) {
      goto LABEL_27;
    }
    uint64_t v30 = swift_slowAlloc(18LL, -1LL);
    uint64_t v31 = swift_slowAlloc(32LL, -1LL);
    v48[0] = v31;
    *(_DWORD *)uint64_t v30 = 136315394;
    uint64_t v45 = sub_10018CDB4(0xD000000000000027LL, 0x800000010050F510LL, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v30 + 4, v30 + 12);
    *(_WORD *)(v30 + 1sub_10018709C(v0 + 2) = 1024;
    LODWORD(v45) = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, (char *)&v45 + 4, v30 + 14, v30 + 18);
    _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "Failed to set state for notification %s with status %u",  (uint8_t *)v30,  0x12u);
    swift_arrayDestroy(v31, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v32 = v31;
LABEL_26:
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v30, -1LL, -1LL);
LABEL_27:

    notify_cancel(out_token);
    return;
  }

  uint32_t v33 = notify_post(v9);
  swift_bridgeObjectRelease(v8);
  if (v33)
  {
    if (qword_100644368 != -1) {
      swift_once(&qword_100644368, sub_10041341C);
    }
    uint64_t v34 = type metadata accessor for Logger(0LL);
    uint64_t v35 = sub_100186DE4(v34, (uint64_t)qword_100654BE0);
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v36 = static os_log_type_t.error.getter(v28);
    if (!os_log_type_enabled(v28, v36)) {
      goto LABEL_27;
    }
    uint64_t v30 = swift_slowAlloc(18LL, -1LL);
    uint64_t v37 = swift_slowAlloc(32LL, -1LL);
    v48[0] = v37;
    *(_DWORD *)uint64_t v30 = 136315394;
    uint64_t v45 = sub_10018CDB4(0xD000000000000027LL, 0x800000010050F510LL, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v30 + 4, v30 + 12);
    *(_WORD *)(v30 + 1sub_10018709C(v0 + 2) = 1024;
    LODWORD(v45) = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, (char *)&v45 + 4, v30 + 14, v30 + 18);
    _os_log_impl( (void *)&_mh_execute_header,  v28,  v36,  "Failed to post notification %s with status %u",  (uint8_t *)v30,  0x12u);
    swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v32 = v37;
    goto LABEL_26;
  }

  if (qword_100644368 != -1) {
    swift_once(&qword_100644368, sub_10041341C);
  }
  uint64_t v38 = type metadata accessor for Logger(0LL);
  uint64_t v39 = sub_100186DE4(v38, (uint64_t)qword_100654BE0);
  uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
  os_log_type_t v41 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = swift_slowAlloc(18LL, -1LL);
    uint64_t v43 = swift_slowAlloc(32LL, -1LL);
    v48[0] = v43;
    *(_DWORD *)uint64_t v42 = 136315394;
    uint64_t v45 = sub_10018CDB4(0xD000000000000027LL, 0x800000010050F510LL, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v42 + 4, v42 + 12);
    *(_WORD *)(v42 + 1sub_10018709C(v0 + 2) = 1024;
    LODWORD(v45) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, (char *)&v45 + 4, v42 + 14, v42 + 18);
    _os_log_impl( (void *)&_mh_execute_header,  v40,  v41,  "Posted notification %s for cellular interface in use %{BOOL}d",  (uint8_t *)v42,  0x12u);
    swift_arrayDestroy(v43, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1LL, -1LL);
    swift_slowDealloc(v42, -1LL, -1LL);
  }
}

uint64_t sub_100419730(__SecIdentity *a1)
{
  if (a1)
  {
    sec_identity_t v1 = sec_identity_create(a1);
    if (v1) {
      return (uint64_t)v1;
    }
  }

  NSString v2 = String._bridgeToObjectiveC()();
  SelfSignedIdentity = (__SecIdentity *)_CFHTTPServerCreateSelfSignedIdentity();

  if (SelfSignedIdentity)
  {
    sec_identity_t v4 = sec_identity_create(SelfSignedIdentity);
    if (v4)
    {
      sec_identity_t v1 = v4;

      return (uint64_t)v1;
    }
  }

  else
  {
    __break(1u);
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000036LL,  0x800000010050F3D0LL,  "DaemoniOSLibrary/Network+SFAirDrop.swift",  40LL,  2LL,  278LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_1004197F4(__SecIdentity *a1)
{
  uint64_t v2 = sub_100183098(&qword_10064DA58);
  __chkstk_darwin(v2);
  sec_identity_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100183098(&qword_100654C30);
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for NWProtocolTCP.Options(0LL);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  uint64_t v9 = NWProtocolTCP.Options.init()();
  dispatch thunk of NWProtocolTCP.Options.enableFastOpen.setter(0LL);
  uint64_t v10 = type metadata accessor for NWProtocolTLS.Options(0LL);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  uint64_t v11 = NWProtocolTLS.Options.init()();
  uint64_t v12 = (sec_protocol_options *)dispatch thunk of NWProtocolTLS.Options.securityProtocolOptions.getter(v11);
  uint64_t v13 = (sec_identity *)sub_100419730(a1);
  sec_protocol_options_set_local_identity(v12, v13);
  swift_unknownObjectRelease(v12);
  uint64_t v14 = swift_unknownObjectRelease(v13);
  os_log_type_t v15 = (sec_protocol_options *)dispatch thunk of NWProtocolTLS.Options.securityProtocolOptions.getter(v14);
  sec_protocol_options_set_peer_authentication_optional(v15, 1);
  swift_unknownObjectRelease(v15);
  type metadata accessor for NWParameters(0LL);
  swift_retain(v11);
  swift_retain(v9);
  uint64_t v16 = NWParameters.__allocating_init(tls:tcp:)(v11, v9);
  NWParameters.allowLocalEndpointReuse.setter(1LL);
  sub_100413564((uint64_t)v7);
  NWParameters.requiredInterface.setter(v7);
  sub_100183098((uint64_t *)&unk_100654C38);
  NWEndpoint.Host.init(stringLiteral:)(0x302E302E302E30LL, 0xE700000000000000LL);
  NWEndpoint.Port.init(integerLiteral:)(8770LL);
  uint64_t v17 = enum case for NWEndpoint.hostPort(_:);
  uint64_t v18 = type metadata accessor for NWEndpoint(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 104))(v4, v17, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v4, 0LL, 1LL, v18);
  NWParameters.requiredLocalEndpoint.setter(v4);
  uint64_t v20 = NWParameters.preferNoProxies.setter(1LL);
  uint64_t v21 = NWParameters.nw.getter(v20);
  nw_parameters_set_attach_protocol_listener(v21, 1LL);
  uint64_t v22 = swift_unknownObjectRelease(v21);
  uint64_t v23 = NWParameters.nw.getter(v22);
  nw_parameters_set_server_mode(v23, 1LL);
  uint64_t v24 = swift_unknownObjectRelease(v23);
  options = (nw_protocol_options *)nw_http_messaging_create_options(v24);
  uint64_t v26 = nw_http1_set_idle_timeout(options, 30LL);
  uint64_t v27 = (nw_parameters *)NWParameters.nw.getter(v26);
  uint64_t v28 = nw_parameters_copy_default_protocol_stack(v27);
  swift_unknownObjectRelease(v27);
  nw_protocol_stack_prepend_application_protocol(v28, options);
  swift_release(v9);
  swift_release(v11);
  swift_unknownObjectRelease(options);
  swift_unknownObjectRelease(v28);
  return v16;
}

uint64_t sub_100419A98()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100419AA8(nw_protocol_options *a1)
{
  return sub_100413790( a1,  *(_BYTE **)(v1 + 16),  (void (*)(nw_protocol_options *, uint64_t))&nw_quic_set_disable_spin_bit);
}

uint64_t sub_100419AC8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100419AD8()
{
  return sub_10025F7F0(&qword_100654CC8);
}

uint64_t sub_100419AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100419E10( a1,  a2,  a3,  a4,  &qword_100654CC8,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100417540);
}

uint64_t sub_100419AF8()
{
  uint64_t v0 = sub_100183098(&qword_100654C30);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for NWProtocolTCP.Options(0LL);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  uint64_t v4 = NWProtocolTCP.Options.init()();
  dispatch thunk of NWProtocolTCP.Options.enableFastOpen.setter(0LL);
  uint64_t v5 = type metadata accessor for NWProtocolTLS.Options(0LL);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  uint64_t v6 = NWProtocolTLS.Options.init()();
  unint64_t v7 = (sec_protocol_options *)dispatch thunk of NWProtocolTLS.Options.securityProtocolOptions.getter(v6);
  NSString v8 = String._bridgeToObjectiveC()();
  SelfSignedIdentity = (__SecIdentity *)_CFHTTPServerCreateSelfSignedIdentity();

  if (SelfSignedIdentity)
  {
    sec_identity_t v10 = sec_identity_create(SelfSignedIdentity);
    if (v10)
    {
      uint64_t v11 = v10;

      sec_protocol_options_set_local_identity(v7, v11);
      swift_unknownObjectRelease(v7);
      uint64_t v12 = swift_unknownObjectRelease(v11);
      uint64_t v13 = (sec_protocol_options *)dispatch thunk of NWProtocolTLS.Options.securityProtocolOptions.getter(v12);
      sec_protocol_options_set_peer_authentication_optional(v13, 1);
      swift_unknownObjectRelease(v13);
      type metadata accessor for NWParameters(0LL);
      swift_retain(v6);
      swift_retain(v4);
      uint64_t v14 = NWParameters.__allocating_init(tls:tcp:)(v6, v4);
      NWParameters.allowLocalEndpointReuse.setter(1LL);
      sub_100413564((uint64_t)v2);
      NWParameters.requiredInterface.setter(v2);
      swift_release(v4);
      swift_release(v6);
      return v14;
    }
  }

  else
  {
    __break(1u);
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000036LL,  0x800000010050F3D0LL,  "DaemoniOSLibrary/Network+SFAirDrop.swift",  40LL,  2LL,  278LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_100419CDC(int a1)
{
  if (a1 > 399)
  {
    switch(a1)
    {
      case 400:
        uint64_t result = 3LL;
        break;
      case 401:
        uint64_t result = 4LL;
        break;
      case 402:
      case 404:
      case 405:
      case 406:
      case 407:
      case 408:
      case 410:
      case 411:
      case 412:
      case 413:
      case 414:
      case 415:
      case 416:
        return 13LL;
      case 403:
        uint64_t result = 5LL;
        break;
      case 409:
        uint64_t result = 6LL;
        break;
      case 417:
        uint64_t result = 7LL;
        break;
      default:
        switch(a1)
        {
          case 500:
            uint64_t result = 8LL;
            break;
          case 501:
            uint64_t result = 9LL;
            break;
          case 503:
            uint64_t result = 10LL;
            break;
          case 504:
            uint64_t result = 11LL;
            break;
          case 507:
            uint64_t result = 12LL;
            break;
          default:
            return 13LL;
        }

        break;
    }
  }

  else
  {
    switch(a1)
    {
      case 100:
        return 0LL;
      case 200:
        return 1LL;
      case 204:
        return 2LL;
      default:
        return 13LL;
    }
  }

  return result;
}

uint64_t sub_100419DB4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100419DD8()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

void sub_100419DE8(uint64_t a1)
{
}

uint64_t sub_100419DF0()
{
  return sub_10025F7F0(&qword_100654CF0);
}

uint64_t sub_100419DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100419E10( a1,  a2,  a3,  a4,  &qword_100654CF0,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100414734);
}

uint64_t sub_100419E10( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11 = *(unsigned __int8 *)(*(void *)(sub_100183098(a5) - 8) + 80LL);
  return a6(a1, a2, a3, a4, v6 + ((v11 + 16) & ~v11));
}

void sub_100419E84(uint64_t a1)
{
}

uint64_t sub_100419E94()
{
  return sub_10025F7F0(&qword_1006493C8);
}

uint64_t sub_100419EA0(uint64_t a1)
{
  return sub_100416020(a1);
}

uint64_t sub_100419EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SDAirDropDiscoveredEndpoint.NearFieldEndpoint(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100419F28()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100419F38(nw_protocol_options *a1)
{
  return sub_100413790( a1,  *(_BYTE **)(v1 + 16),  (void (*)(nw_protocol_options *, uint64_t))&nw_quic_connection_set_disable_spin_bit);
}

uint64_t sub_100419F58()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

ValueMetadata *type metadata accessor for SDNWHTTPResponseError()
{
  return &type metadata for SDNWHTTPResponseError;
}

uint64_t destroy for SDNWHTTPResponse(uint64_t a1)
{
  return sub_100189B20(*(void *)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t _s16DaemoniOSLibrary16SDNWHTTPResponseVwCP_0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_10019BA8C(v3, v4);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for SDNWHTTPResponse(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_10019BA8C(v3, v4);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  sub_100189B20(v5, v6);
  return a1;
}

uint64_t assignWithTake for SDNWHTTPResponse(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_100189B20(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SDNWHTTPResponse(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xF4 && a1[24]) {
    return (*(_DWORD *)a1 + 244);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 0xD;
  int v5 = v3 - 13;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SDNWHTTPResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF3)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)uint64_t result = a2 - 244;
    if (a3 >= 0xF4) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0xF4) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(_BYTE *)uint64_t result = a2 + 12;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SDNWHTTPResponse()
{
  return &type metadata for SDNWHTTPResponse;
}

uint64_t destroy for SDNWHTTPMessage(uint64_t a1)
{
  return swift_unknownObjectRelease(*(void *)(a1 + 32));
}

uint64_t initializeWithCopy for SDNWHTTPMessage(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(const char **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain(v4);
  sub_10019BA8C(v5, v6);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 3sub_10018709C(v0 + 2) = v7;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_unknownObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for SDNWHTTPMessage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  BOOL v4 = *(const char **)(a2 + 8);
  uint64_t v5 = *(const char **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  *(void *)&double v6 = swift_bridgeObjectRetain(v4).n128_u64[0];
  swift_bridgeObjectRelease(v5, v6);
  uint64_t v7 = *(void *)(a2 + 16);
  unint64_t v8 = *(void *)(a2 + 24);
  sub_10019BA8C(v7, v8);
  uint64_t v9 = *(void *)(a1 + 16);
  unint64_t v10 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  sub_100189B20(v9, v10);
  uint64_t v11 = *(void *)(a2 + 32);
  uint64_t v12 = *(void *)(a1 + 32);
  *(void *)(a1 + 3sub_10018709C(v0 + 2) = v11;
  swift_unknownObjectRetain(v11);
  swift_unknownObjectRelease(v12);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

__n128 initializeWithTake for SDNWHTTPMessage(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SDNWHTTPMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(const char **)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  sub_100189B20(v6, v7);
  uint64_t v8 = *(void *)(a1 + 32);
  *(void *)(a1 + 3sub_10018709C(v0 + 2) = *(void *)(a2 + 32);
  swift_unknownObjectRelease(v8);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for SDNWHTTPMessage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vsub_10018709C(v0 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SDNWHTTPMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 41) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SDNWHTTPMessage()
{
  return &type metadata for SDNWHTTPMessage;
}

uint64_t getEnumTagSinglePayload for SDNWHTTPStatusCode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }

uint64_t storeEnumTagSinglePayload for SDNWHTTPStatusCode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF3) {
    return ((uint64_t (*)(void))((char *)&loc_10041A3F8 + 4 * byte_1004DB573[v4]))();
  }
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_10041A42C + 4 * byte_1004DB56E[v4]))();
}

uint64_t sub_10041A42C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10041A434(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10041A43CLL);
  }
  return result;
}

uint64_t sub_10041A448(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10041A450LL);
  }
  *(_BYTE *)__n128 result = a2 + 12;
  return result;
}

uint64_t sub_10041A454(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10041A45C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SDNWHTTPStatusCode()
{
  return &type metadata for SDNWHTTPStatusCode;
}

unint64_t sub_10041A47C()
{
  unint64_t result = qword_100654D10;
  if (!qword_100654D10)
  {
    unint64_t result = swift_getWitnessTable(&unk_1004DB6FC, &type metadata for SDNWHTTPStatusCode);
    atomic_store(result, (unint64_t *)&qword_100654D10);
  }

  return result;
}

uint64_t sub_10041A534@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100183098(&qword_100650B48);
  __chkstk_darwin(v3);
  uint64_t v5 = &v26[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = type metadata accessor for SDAirDropServerConnection(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v10 = (uint64_t *)&v26[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v8);
  uint64_t v12 = &v26[-v11 - 8];
  uint64_t v13 = v1 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_uploadConnection;
  swift_beginAccess(v13, v26, 0LL, 0LL);
  sub_1001915A4(v13, (uint64_t)v5, &qword_100650B48);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    sub_100187100((uint64_t)v5, &qword_100650B48);
    if (qword_100644370 != -1) {
      swift_once(&qword_100644370, sub_10042322C);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    uint64_t v15 = sub_100186DE4(v14, (uint64_t)qword_100654D20);
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "UPLOAD connection is not active", v18, 2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    uint64_t v19 = enum case for SFNWInterfaceType.other(_:);
    uint64_t v20 = type metadata accessor for SFNWInterfaceType(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104LL))(a1, v19, v20);
  }

  else
  {
    sub_1001A4B40((uint64_t)v5, (uint64_t)v12, type metadata accessor for SDAirDropServerConnection);
    sub_1001A4B84((uint64_t)v12, (uint64_t)v10, type metadata accessor for SDAirDropServerConnection);
    if (swift_getEnumCaseMultiPayload(v10, v6) > 1)
    {
      uint64_t v22 = *v10;
      uint64_t v23 = (char *)v10 + *(int *)(sub_100183098(&qword_100649710) + 48);
      uint64_t v24 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8LL))(v23, v24);
    }

    else
    {
      uint64_t v22 = *v10;
    }

    sub_100410970(a1);
    swift_release(v22);
    return sub_1001A4BC8((uint64_t)v12, type metadata accessor for SDAirDropServerConnection);
  }

uint64_t sub_10041A7D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[22] = a3;
  v4[23] = v3;
  v4[20] = a1;
  v4[21] = a2;
  uint64_t v5 = sub_100183098(&qword_100650B48);
  v4[24] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for SDAirDropMessage(0LL);
  v4[25] = v6;
  v4[26] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for SDAirDropServerConnection(0LL);
  v4[27] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[28] = v8;
  v4[29] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v9 = static AirDropActor.shared;
  v4[30] = static AirDropActor.shared;
  return swift_task_switch(sub_10041A8B8, v9, 0LL);
}

uint64_t sub_10041A8B8()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 184) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_deviceStatus);
  if ([v1 screenStateSupportsAirDrop])
  {
    if (qword_100644370 != -1) {
      swift_once(&qword_100644370, sub_10042322C);
    }
    uint64_t v2 = type metadata accessor for Logger(0LL);
    uint64_t v3 = sub_100186DE4(v2, (uint64_t)qword_100654D20);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Received DISCOVER request", v6, 2u);
      swift_slowDealloc(v6, -1LL, -1LL);
    }

    uint64_t v7 = *(void *)(v0 + 232);
    uint64_t v8 = *(void *)(v0 + 216);
    uint64_t v9 = *(void *)(v0 + 176);

    sub_1001A4B84(v9, v7, type metadata accessor for SDAirDropServerConnection);
    if (swift_getEnumCaseMultiPayload(v7, v8) > 1)
    {
      uint64_t v22 = *(uint64_t **)(v0 + 232);
      uint64_t v10 = *v22;
      uint64_t v23 = (char *)v22 + *(int *)(sub_100183098(&qword_100649710) + 48);
      uint64_t v24 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, uint64_t))(*(void *)(v24 - 8) + 8LL))(v23, v24);
    }

    else
    {
      uint64_t v10 = **(void **)(v0 + 232);
    }

    uint32_t v25 = sub_100411988();
    *(void *)(v0 + 248) = v25;
    uint64_t v26 = swift_release(v10);
    if (!v25)
    {
      uint64_t v31 = (void *)swift_task_alloc(dword_100654E2C);
      *(void *)(v0 + 368) = v31;
      uint64_t v32 = sub_10041B788;
      goto LABEL_38;
    }

    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      os_log_type_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "TLS SecTrust present, continue DISCOVER", v29, 2u);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    unint64_t v30 = *(void *)(v0 + 168);

    if (v30 >> 60 == 15)
    {
      uint64_t v31 = (void *)swift_task_alloc(dword_100654E2C);
      *(void *)(v0 + 35sub_10018709C(v0 + 2) = v31;
      uint64_t v32 = sub_10041B6D0;
LABEL_38:
      *uint64_t v31 = v0;
      v31[1] = v32;
      return sub_100423678(*(void *)(v0 + 184), *(void *)(v0 + 176));
    }

    uint64_t v33 = sub_1001A4C04(*(void *)(v0 + 160), *(void *)(v0 + 168));
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      os_log_type_t v36 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Sender record data present, continue DISCOVER", v36, 2u);
      swift_slowDealloc(v36, -1LL, -1LL);
    }

    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v38 = sub_100035F84(isa, v25, 0LL);

    if (!v38)
    {
      uint64_t v31 = (void *)swift_task_alloc(dword_100654E2C);
      *(void *)(v0 + 336) = v31;
      uint64_t v32 = sub_10041B610;
      goto LABEL_38;
    }

    uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    uint64_t v40 = v39;

    uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Validated record data, continue DISCOVER", v44, 2u);
      swift_slowDealloc(v44, -1LL, -1LL);
    }

    uint64_t v45 = *(void *)(v0 + 160);
    uint64_t v46 = *(void *)(v0 + 168);

    id v47 = sub_1002E07C0();
    unint64_t v49 = v48;
    *(void *)(v0 + 256) = v47;
    *(void *)(v0 + 264) = v48;
    sub_1002E217C(v45, v46, v25);
    LOBYTE(v45) = v50;
    char v51 = sub_1002E1ED4(v25);
    if ((v45 & 1) == 0 || (v51 & 1) != 0)
    {
      id v64 = [v1 copyMyAppleIDSecIdentity];

      if (!v64 || (uint64_t v65 = sub_1002DEE3C(v104, (uint64_t)v40, v25), (v65 & 1) == 0))
      {
        swift_bridgeObjectRelease(v40);
        uint64_t v31 = (void *)swift_task_alloc(dword_100654E2C);
        *(void *)(v0 + 320) = v31;
        uint64_t v32 = sub_10041B538;
        goto LABEL_38;
      }

      uint64_t v66 = (os_log_s *)Logger.logObject.getter(v65);
      os_log_type_t v67 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v66, v67))
      {
        os_log_type_t v68 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)os_log_type_t v68 = 0;
        _os_log_impl((void *)&_mh_execute_header, v66, v67, "Sender trusted, finish DISCOVER", v68, 2u);
        swift_slowDealloc(v68, -1LL, -1LL);
      }

      uint64_t v69 = *(void *)(v0 + 184);

      id v70 =  [*(id *)(v69 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_nearbyAgent) idSelfIdentity];
      *(void *)(v0 + 27sub_10018709C(v0 + 2) = v70;
      id v71 = [v1 someComputerName];
      if (v71)
      {
        uint64_t v72 = v71;
        uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
        uint64_t v103 = v74;
      }

      else
      {
        uint64_t v73 = 0LL;
        uint64_t v103 = 0LL;
      }

      id v75 = [v1 modelName];
      if (v75)
      {
        uint64_t v76 = v75;
        uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
        uint64_t v102 = v78;
      }

      else
      {
        uint64_t v77 = 0LL;
        uint64_t v102 = 0LL;
      }

      if (v70)
      {
        id v79 = [v70 deviceIRKData];
        if (v79)
        {
          uint64_t v80 = v79;
          uint64_t v81 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v79);
          unint64_t v99 = v82;
          uint64_t v100 = v81;
        }

        else
        {
          unint64_t v99 = 0xF000000000000000LL;
          uint64_t v100 = 0LL;
        }

        uint64_t v101 = v73;
        id v90 = [v70 edPKData];
        if (v90)
        {
          uint64_t v91 = v90;
          uint64_t v92 = v77;
          uint64_t v98 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v90);
          unint64_t v88 = v93;
        }

        else
        {
          uint64_t v92 = v77;
          uint64_t v98 = 0LL;
          unint64_t v88 = 0xF000000000000000LL;
        }

        id v94 = [v70 idsDeviceID];
        if (v94)
        {
          uint64_t v95 = v94;
          uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
          uint64_t v85 = v96;
        }

        else
        {
          uint64_t v84 = 0LL;
          uint64_t v85 = 0LL;
        }

        uint64_t v77 = v92;
        id v83 = [v70 featureFlags];
        uint64_t v87 = v100;
        uint64_t v73 = v101;
        uint64_t v86 = v98;
        unint64_t v89 = v99;
      }

      else
      {
        id v83 = 0LL;
        uint64_t v84 = 0LL;
        uint64_t v85 = 0LL;
        uint64_t v86 = 0LL;
        uint64_t v87 = 0LL;
        unint64_t v88 = 0xF000000000000000LL;
        unint64_t v89 = 0xF000000000000000LL;
      }

      *(_OWORD *)(v0 + swift_weakDestroy(v0 + 16) = xmmword_1004CD540;
      *(void *)(v0 + 3sub_10018709C(v0 + 2) = v73;
      *(void *)(v0 + 40) = v103;
      *(void *)(v0 + 48) = v47;
      *(void *)(v0 + 56) = v49;
      *(void *)(v0 + 64) = v77;
      *(void *)(v0 + 7sub_10018709C(v0 + 2) = v102;
      *(void *)(v0 + 80) = v87;
      *(void *)(v0 + 88) = v89;
      *(void *)(v0 + 96) = v86;
      *(void *)(v0 + 104) = v88;
      *(void *)(v0 + 11sub_10018709C(v0 + 2) = v84;
      *(void *)(v0 + 120) = v85;
      *(void *)(v0 + 128) = v83;
      *(_BYTE *)(v0 + 136) = 0;
      *(void *)(v0 + 144) = v104;
      *(void *)(v0 + 15sub_10018709C(v0 + 2) = v40;
      uint64_t v97 = static AirDropActor.shared;
      *(void *)(v0 + 280) = static AirDropActor.shared;
      sub_1001A4C04((uint64_t)v47, v49);
      return swift_task_switch(sub_10041B208, v97, 0LL);
    }

    else
    {
      swift_bridgeObjectRelease(v40);
      uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
      os_log_type_t v54 = static os_log_type_t.error.getter(v53);
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v55 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v55 = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "Sender is blocked, finish DISCOVER", v55, 2u);
        swift_slowDealloc(v55, -1LL, -1LL);
      }

      uint64_t v57 = *(void *)(v0 + 160);
      unint64_t v56 = *(void *)(v0 + 168);

      uint64_t v58 = type metadata accessor for SFAirDropReceive.Failure(0LL);
      uint64_t v59 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
      swift_allocError(v58, v59, 0LL, 0LL);
      uint64_t v61 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v58 - 8) + 104LL))( v60,  enum case for SFAirDropReceive.Failure.declined(_:),  v58);
      swift_willThrow(v61);
      sub_100189B0C((uint64_t)v47, v49);
      sub_100189B0C(v57, v56);

      uint64_t v62 = *(void *)(v0 + 208);
      uint64_t v63 = *(void *)(v0 + 192);
      swift_task_dealloc(*(void *)(v0 + 232));
      swift_task_dealloc(v62);
      swift_task_dealloc(v63);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }

  else
  {
    if (qword_100644370 != -1) {
      swift_once(&qword_100644370, sub_10042322C);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    uint64_t v12 = sub_100186DE4(v11, (uint64_t)qword_100654D20);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Screen is off, rejecting DISCOVER", v15, 2u);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    uint64_t v16 = *(void *)(v0 + 216);
    uint64_t v17 = *(void *)(v0 + 224);
    uint64_t v18 = *(void *)(v0 + 192);
    uint64_t v19 = *(void *)(v0 + 176);

    sub_1001A4B84(v19, v18, type metadata accessor for SDAirDropServerConnection);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v18, 0LL, 1LL, v16);
    uint64_t v20 = (void *)swift_task_alloc(dword_100654E24);
    *(void *)(v0 + 376) = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_10041B7F4;
    return sub_1004232BC(*(void *)(v0 + 192));
  }

uint64_t sub_10041B208()
{
  uint64_t v2 = v0[25];
  uint64_t v1 = (void *)v0[26];
  memmove(v1, v0 + 2, 0x90uLL);
  swift_storeEnumTagMultiPayload(v1, v2, 3LL);
  sub_1002650C0(v0 + 2);
  uint64_t v3 = (void *)swift_task_alloc(dword_100653384);
  v0[36] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10041B290;
  return sub_1003E89C8(v0[26]);
}

uint64_t sub_10041B290()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 288);
  *(void *)(*v1 + 296) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void *)(v2 + 280);
  sub_1001A4BC8(*(void *)(v2 + 208), type metadata accessor for SDAirDropMessage);
  if (v0) {
    os_log_type_t v5 = sub_10041B404;
  }
  else {
    os_log_type_t v5 = sub_10041B310;
  }
  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_10041B310(uint64_t a1, uint64_t a2)
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong( v2[23] + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_delegate,  a2);
  v2[38] = Strong;
  if (!Strong) {
    return swift_task_switch(sub_10041B4A8, v2[30], 0LL);
  }
  uint64_t v4 = v2[23] + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_serverConnectionIdentity;
  os_log_type_t v5 = (void *)swift_task_alloc(dword_10064973C);
  v2[39] = v5;
  *os_log_type_t v5 = v2;
  v5[1] = sub_10041B3AC;
  return sub_10022EC74(v4, 0LL);
}

uint64_t sub_10041B3AC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 304);
  swift_task_dealloc(*(void *)(*v0 + 312));
  swift_unknownObjectRelease(v2);
  return swift_task_switch(sub_10041B4A8, *(void *)(v1 + 240), 0LL);
}

uint64_t sub_10041B404()
{
  return swift_task_switch(sub_10041B418, *(void *)(v0 + 240), 0LL);
}

uint64_t sub_10041B418()
{
  unint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void **)(v0 + 272);
  uint64_t v4 = *(void **)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v6 = *(void *)(v0 + 160);
  unint64_t v5 = *(void *)(v0 + 168);
  sub_100265178((uint64_t *)(v0 + 16));

  sub_100189B0C(v3, v1);
  sub_100189B0C(v6, v5);

  uint64_t v7 = *(void *)(v0 + 208);
  uint64_t v8 = *(void *)(v0 + 192);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10041B4A8()
{
  unint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void **)(v0 + 272);
  uint64_t v4 = *(void **)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v6 = *(void *)(v0 + 160);
  unint64_t v5 = *(void *)(v0 + 168);
  sub_100265178((uint64_t *)(v0 + 16));

  sub_100189B0C(v3, v1);
  sub_100189B0C(v6, v5);

  uint64_t v7 = *(void *)(v0 + 208);
  uint64_t v8 = *(void *)(v0 + 192);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10041B538()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 320);
  *(void *)(*v1 + 328) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_10041B9BC;
  }
  else {
    uint64_t v4 = sub_10041B59C;
  }
  return swift_task_switch(v4, *(void *)(v2 + 240), 0LL);
}

uint64_t sub_10041B59C()
{
  unint64_t v1 = *(void **)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 160);
  unint64_t v3 = *(void *)(v0 + 168);
  sub_100189B0C(*(void *)(v0 + 256), *(void *)(v0 + 264));
  sub_100189B0C(v2, v3);

  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 192);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10041B610()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 336);
  *(void *)(*v1 + 344) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_10041B958;
  }
  else {
    uint64_t v4 = sub_10041B674;
  }
  return swift_task_switch(v4, *(void *)(v2 + 240), 0LL);
}

uint64_t sub_10041B674()
{
  unint64_t v1 = *(void **)(v0 + 248);
  sub_100189B0C(*(void *)(v0 + 160), *(void *)(v0 + 168));

  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 192);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10041B6D0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 352);
  *(void *)(*v1 + 360) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_10041B8FC;
  }
  else {
    uint64_t v4 = sub_10041B734;
  }
  return swift_task_switch(v4, *(void *)(v2 + 240), 0LL);
}

uint64_t sub_10041B734()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 192);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10041B788()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v6 = *(void **)v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 368LL));
  uint64_t v2 = v1[29];
  uint64_t v3 = v1[26];
  uint64_t v4 = v1[24];
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return ((uint64_t (*)(void))v6[1])();
}

uint64_t sub_10041B7F4()
{
  uint64_t v2 = *(void *)(*v1 + 376);
  uint64_t v3 = *v1;
  *(void *)(v3 + 384) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    uint64_t v4 = *(void *)(v3 + 240);
    sub_100187100(*(void *)(v3 + 192), &qword_100650B48);
    return swift_task_switch(sub_10041B8A8, v4, 0LL);
  }

  else
  {
    sub_100187100(*(void *)(v3 + 192), &qword_100650B48);
    uint64_t v6 = *(void *)(v3 + 208);
    uint64_t v7 = *(void *)(v3 + 192);
    swift_task_dealloc(*(void *)(v3 + 232));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v3 + 8))();
  }

uint64_t sub_10041B8A8()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 192);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10041B8FC()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 192);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10041B958()
{
  uint64_t v1 = *(void **)(v0 + 248);
  sub_100189B0C(*(void *)(v0 + 160), *(void *)(v0 + 168));

  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 192);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10041B9BC()
{
  uint64_t v1 = *(void **)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 160);
  unint64_t v3 = *(void *)(v0 + 168);
  sub_100189B0C(*(void *)(v0 + 256), *(void *)(v0 + 264));
  sub_100189B0C(v2, v3);

  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 192);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10041BA30(uint64_t a1, uint64_t a2)
{
  void v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  uint64_t v4 = type metadata accessor for SFPlatform(0LL);
  v3[11] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[12] = v5;
  v3[13] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100183098(&qword_100650B48);
  v3[14] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100183098(&qword_1006475A8);
  v3[15] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_10041BB0C, static AirDropActor.shared, 0LL);
}

uint64_t sub_10041BB0C()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[10];
  sub_1001A4B84(v0[8], v2, _s12HelloRequestVMa);
  uint64_t v5 = _s12HelloRequestVMa(0LL);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v2, 0LL, 1LL, v5);
  uint64_t v6 = v4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_helloRequest;
  swift_beginAccess(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_helloRequest, v0 + 2, 33LL, 0LL);
  sub_1001C9860(v2, v6, &qword_1006475A8);
  swift_endAccess(v0 + 2);
  sub_1001A4B84(v3, v1, type metadata accessor for SDAirDropServerConnection);
  uint64_t v7 = type metadata accessor for SDAirDropServerConnection(0LL);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v1, 0LL, 1LL, v7);
  uint64_t v8 = v4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_helloConnection;
  swift_beginAccess(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_helloConnection, v0 + 5, 33LL, 0LL);
  sub_1001C9860(v1, v8, &qword_100650B48);
  swift_endAccess(v0 + 5);
  if (qword_100644370 != -1) {
    swift_once(&qword_100644370, sub_10042322C);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = sub_100186DE4(v9, (uint64_t)qword_100654D20);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Received HELLO request", v13, 2u);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  type metadata accessor for SFAirDropUserDefaults(0LL, v14);
  uint64_t v15 = (void *)static SFAirDropUserDefaults.shared.getter();
  char v16 = SFAirDropUserDefaults.helloFeatureFlagsEnabled.getter();

  BOOL v22 = 0;
  if ((v16 & 1) != 0)
  {
    uint64_t v19 = v0[12];
    uint64_t v18 = v0[13];
    uint64_t v20 = v0[11];
    static SFPlatform.macOS.getter(v17);
    char v21 = static SFPlatform.isPlatform(_:)(v18);
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    if ((v21 & 1) == 0) {
      BOOL v22 = 1;
    }
  }

  uint64_t v23 = v0[8];
  unsigned int v24 = v22 | 4;
  uint64_t v25 = *(int *)(v5 + 24);
  uint64_t v26 = *(unsigned __int8 *)(v23 + v25);
  if ((v26 & 1) != 0)
  {
    uint64_t v28 = v0[12];
    uint64_t v27 = v0[13];
    uint64_t v29 = v0[11];
    static SFPlatform.macOS.getter(v17);
    char v30 = static SFPlatform.isPlatform(_:)(v27);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v29);
    if ((v30 & 1) == 0) {
      unsigned int v24 = v22 | 6;
    }
    uint64_t v26 = *(unsigned __int8 *)(v23 + v25);
  }

  uint64_t v31 = (uint64_t **)swift_task_alloc(dword_100654E3C);
  v0[16] = (uint64_t)v31;
  if ((_DWORD)v26 == 2)
  {
    uint64_t v32 = v24;
    uint64_t v33 = sub_100429B7C;
  }

  else
  {
    uint64_t v32 = v24 | (unint64_t)(v26 << 32);
    uint64_t v33 = sub_10041BDE8;
  }

  *uint64_t v31 = v0;
  v31[1] = (uint64_t *)v33;
  return sub_1004298A4(v32, v0[9]);
}

uint64_t sub_10041BDE8()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v6 = *(void **)v0;
  swift_task_dealloc(*(void *)(*(void *)v0 + 128LL));
  uint64_t v3 = v1[14];
  uint64_t v2 = v1[15];
  uint64_t v4 = v1[13];
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return ((uint64_t (*)(void))v6[1])();
}

uint64_t sub_10041BE50(uint64_t a1, uint64_t a2)
{
  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  uint64_t v4 = type metadata accessor for SFAirDropReceive.AskResponse(0LL);
  v3[14] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[15] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[16] = swift_task_alloc(v6);
  v3[17] = swift_task_alloc(v6);
  uint64_t v7 = type metadata accessor for SFAirDropReceive.AskRequest(0LL);
  v3[18] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[19] = v8;
  v3[20] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SFAirDrop.AskProgress(0LL);
  v3[21] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[22] = v10;
  v3[23] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100183098(&qword_100654E48);
  v3[24] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v3[25] = v12;
  v3[26] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100183098(&qword_100650B50);
  v3[27] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100183098(&qword_100647608);
  v3[28] = swift_task_alloc((*(void *)(*(void *)(v14 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100183098(&qword_100650B48);
  v3[29] = swift_task_alloc((*(void *)(*(void *)(v15 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100183098(&qword_1006475B8);
  v3[30] = swift_task_alloc((*(void *)(*(void *)(v16 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v17 = static AirDropActor.shared;
  v3[31] = static AirDropActor.shared;
  return swift_task_switch(sub_10041C004, v17, 0LL);
}

uint64_t sub_10041C004()
{
  uint64_t v1 = v0[29];
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[13];
  sub_1001A4B84(v0[11], v2, _s14descr1005DF7D1C10AskRequestVMa);
  uint64_t v5 = _s14descr1005DF7D1C10AskRequestVMa(0LL);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v2, 0LL, 1LL, v5);
  uint64_t v6 = v4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_askRequest;
  swift_beginAccess(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_askRequest, v0 + 2, 33LL, 0LL);
  sub_1001C9860(v2, v6, &qword_1006475B8);
  swift_endAccess(v0 + 2);
  sub_1001A4B84(v3, v1, type metadata accessor for SDAirDropServerConnection);
  uint64_t v7 = type metadata accessor for SDAirDropServerConnection(0LL);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v1, 0LL, 1LL, v7);
  uint64_t v8 = v4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_askConnection;
  swift_beginAccess(v4 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_askConnection, v0 + 5, 33LL, 0LL);
  sub_1001C9860(v1, v8, &qword_100650B48);
  swift_endAccess(v0 + 5);
  if (qword_100644370 != -1) {
    swift_once(&qword_100644370, sub_10042322C);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  v0[32] = v9;
  uint64_t v10 = sub_100186DE4(v9, (uint64_t)qword_100654D20);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Received ASK request", v13, 2u);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  uint64_t v14 = v0[13];

  uint64_t Strong = swift_unknownObjectWeakLoadStrong( v14 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_delegate,  v15);
  v0[33] = Strong;
  if (Strong)
  {
    uint64_t v17 = v0[28];
    sub_1001915A4(v0[11] + *(int *)(v5 + 20), v17, &qword_100647608);
    uint64_t v18 = type metadata accessor for SFAirDrop.TransferType(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
    int v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18);
    uint64_t v21 = v0[28];
    if (v20 == 1)
    {
      sub_100187100(v0[28], &qword_100647608);
    }

    else
    {
      SFAirDrop.TransferType.exchangeType.getter();
      uint64_t v31 = v30;
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v18);
      if (v31)
      {
        uint64_t v32 = v0[27];
        uint64_t v33 = v0[13];
        swift_bridgeObjectRelease(v31);
        uint64_t v34 = _s14descr1005DEB71C15ExchangeRequestVMa(0LL);
        SFProgressContinuation.init(_:initialProgress:file:line:)( 0x20544341544E4F43LL,  0xEF74736575716572LL,  v35,  0xD00000000000005ELL,  0x800000010050F760LL,  246LL,  (char *)&type metadata for () + 8,  v34);
        uint64_t v36 = sub_100183098(&qword_100650B60);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56LL))(v32, 0LL, 1LL, v36);
        uint64_t v37 = v33 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_exchangeContinuation;
        swift_beginAccess( v33 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_exchangeContinuation,  v0 + 8,  33LL,  0LL);
        sub_1001C9860(v32, v37, &qword_100650B50);
        swift_endAccess(v0 + 8);
      }
    }

    uint64_t v39 = v0[25];
    uint64_t v38 = v0[26];
    uint64_t v41 = v0[23];
    uint64_t v40 = v0[24];
    uint64_t v42 = v0[21];
    uint64_t v43 = v0[22];
    uint64_t v44 = v0[13];
    uint64_t v45 = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_askContinuation;
    v0[34] = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_askContinuation;
    uint64_t v46 = v44 + v45;
    id v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16);
    v0[35] = (uint64_t)v47;
    v47(v38, v46, v40);
    (*(void (**)(uint64_t, void, uint64_t))(v43 + 104))( v41,  enum case for SFAirDrop.AskProgress.waitingForAskResponse(_:),  v42);
    SFProgressContinuation.yield(_:)(v41, v40);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v42);
    unint64_t v48 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v0[36] = (uint64_t)v48;
    v48(v38, v40);
    uint64_t v49 = v44 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_id;
    uint64_t v50 = *(void *)(v44 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_deviceStatus);
    uint64_t v51 = *(void *)(v44 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_endpointService);
    uint64_t v52 = (uint64_t **)swift_task_alloc(dword_1006530FC);
    v0[37] = (uint64_t)v52;
    void *v52 = v0;
    v52[1] = (uint64_t *)sub_10041C510;
    return sub_1003E3630(v0[20], v49, v50, v0[12], v51);
  }

  else
  {
    BOOL v22 = (os_log_s *)Logger.logObject.getter(0LL);
    os_log_type_t v23 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v22, v23))
    {
      unsigned int v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unsigned int v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Nil delegate when handling askRequest", v24, 2u);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    uint64_t v26 = v0[15];
    uint64_t v25 = v0[16];
    uint64_t v27 = v0[14];

    (*(void (**)(uint64_t, void, uint64_t))(v26 + 104))( v25,  enum case for SFAirDropReceive.AskResponse.error(_:),  v27);
    uint64_t v28 = (uint64_t **)swift_task_alloc(dword_100654E54);
    v0[43] = (uint64_t)v28;
    *uint64_t v28 = v0;
    v28[1] = (uint64_t *)sub_10041C93C;
    return sub_100423B20(v0[16], v0[12]);
  }

uint64_t sub_10041C510()
{
  uint64_t v1 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 296));
  uint64_t v2 = static AirDropActor.shared;
  *(void *)(v1 + 304) = static AirDropActor.shared;
  return swift_task_switch(sub_10041C56C, v2, 0LL);
}

uint64_t sub_10041C56C(uint64_t a1, uint64_t a2)
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2[33] + 16, a2);
  v2[39] = Strong;
  if (Strong)
  {
    uint64_t v4 = (uint64_t **)swift_task_alloc(dword_10065103C);
    v2[40] = (uint64_t)v4;
    *uint64_t v4 = v2;
    v4[1] = (uint64_t *)sub_10041C6D0;
    return sub_100378560(v2[17], v2[13], v2[20]);
  }

  else
  {
    if (qword_100643FB8 != -1) {
      swift_once(&qword_100643FB8, sub_100227D00);
    }
    uint64_t v6 = sub_100186DE4(v2[32], (uint64_t)qword_1006494F0);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Missing delegate for start receive", v9, 2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    uint64_t v10 = v2[17];
    uint64_t v11 = v2[14];
    uint64_t v12 = v2[15];

    (*(void (**)(uint64_t, void, uint64_t))(v12 + 104))( v10,  enum case for SFAirDropReceive.AskResponse.error(_:),  v11);
    return swift_task_switch(sub_10041C764, v2[31], 0LL);
  }

uint64_t sub_10041C6D0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 304LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 320LL));
  return swift_task_switch(sub_10041C728, v1, 0LL);
}

uint64_t sub_10041C728()
{
  return swift_task_switch(sub_10041C764, *(void *)(v0 + 248), 0LL);
}

uint64_t sub_10041C764()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 136);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 280))(v2, *(void *)(v0 + 104) + *(void *)(v0 + 272), v3);
  SFProgressContinuation.finish(with:)(v4, v3);
  v1(v2, v3);
  uint64_t v5 = (void *)swift_task_alloc(dword_100654E54);
  *(void *)(v0 + 328) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10041C7FC;
  return sub_100423B20(*(void *)(v0 + 136), *(void *)(v0 + 96));
}

uint64_t sub_10041C7FC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 328);
  *(void *)(*v1 + 336) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_10041CB08;
  }
  else {
    uint64_t v4 = sub_10041C860;
  }
  return swift_task_switch(v4, *(void *)(v2 + 248), 0LL);
}

uint64_t sub_10041C860()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 120);
  swift_unknownObjectRelease(*(void *)(v0 + 264));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 136);
  uint64_t v7 = *(void *)(v0 + 232);
  uint64_t v6 = *(void *)(v0 + 240);
  uint64_t v9 = *(void *)(v0 + 216);
  uint64_t v8 = *(void *)(v0 + 224);
  uint64_t v10 = *(void *)(v0 + 208);
  uint64_t v11 = *(void *)(v0 + 184);
  uint64_t v12 = *(void *)(v0 + 128);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 152) + 8LL))(v4, *(void *)(v0 + 144));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10041C93C()
{
  uint64_t v2 = *(void *)(*v1 + 344);
  uint64_t v3 = *v1;
  *(void *)(v3 + 35sub_10018709C(v0 + 2) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    uint64_t v4 = *(void *)(v3 + 248);
    (*(void (**)(void, void))(*(void *)(v3 + 120) + 8LL))(*(void *)(v3 + 128), *(void *)(v3 + 112));
    return swift_task_switch(sub_10041CA60, v4, 0LL);
  }

  else
  {
    uint64_t v6 = *(void *)(v3 + 232);
    uint64_t v7 = *(void *)(v3 + 240);
    uint64_t v9 = *(void *)(v3 + 216);
    uint64_t v8 = *(void *)(v3 + 224);
    uint64_t v10 = *(void *)(v3 + 208);
    uint64_t v11 = *(void *)(v3 + 184);
    uint64_t v12 = *(void *)(v3 + 160);
    uint64_t v13 = *(void *)(v3 + 128);
    uint64_t v14 = *(void *)(v3 + 136);
    (*(void (**)(uint64_t, void))(*(void *)(v3 + 120) + 8LL))(v13, *(void *)(v3 + 112));
    swift_task_dealloc(v7);
    swift_task_dealloc(v6);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v3 + 8))();
  }

uint64_t sub_10041CA60()
{
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 184);
  uint64_t v6 = *(void *)(v0 + 160);
  uint64_t v8 = *(void *)(v0 + 128);
  uint64_t v7 = *(void *)(v0 + 136);
  swift_task_dealloc(*(void *)(v0 + 240));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10041CB08()
{
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 120);
  swift_unknownObjectRelease(*(void *)(v0 + 264));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v7 = *(void *)(v0 + 232);
  uint64_t v9 = *(void *)(v0 + 216);
  uint64_t v8 = *(void *)(v0 + 224);
  uint64_t v10 = *(void *)(v0 + 208);
  uint64_t v11 = *(void *)(v0 + 184);
  uint64_t v12 = *(void *)(v0 + 160);
  uint64_t v14 = *(void *)(v0 + 128);
  uint64_t v13 = *(void *)(v0 + 136);
  swift_task_dealloc(*(void *)(v0 + 240));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10041CBE4(uint64_t a1, uint64_t a2)
{
  v3[26] = a2;
  v3[27] = v2;
  v3[25] = a1;
  uint64_t v4 = sub_100183098(&qword_1006529A0);
  v3[28] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for SFAirDropReceive.Failure(0LL);
  v3[29] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[30] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[31] = swift_task_alloc(v7);
  v3[32] = swift_task_alloc(v7);
  uint64_t v8 = sub_100183098(&qword_1006457E8);
  v3[33] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SDAirDropServerConnection(0LL);
  v3[34] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[35] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[36] = swift_task_alloc(v11);
  v3[37] = swift_task_alloc(v11);
  unint64_t v12 = (*(void *)(*(void *)(sub_100183098(&qword_100650B48) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[38] = swift_task_alloc(v12);
  v3[39] = swift_task_alloc(v12);
  v3[40] = swift_task_alloc(v12);
  v3[41] = swift_task_alloc(v12);
  v3[42] = swift_task_alloc(v12);
  uint64_t v13 = sub_100183098(&qword_1006475C8);
  v3[43] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100183098(&qword_1006475B8);
  v3[44] = swift_task_alloc((*(void *)(*(void *)(v14 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for SFAirDrop.AskProgress(0LL);
  v3[45] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v3[46] = v16;
  v3[47] = swift_task_alloc((*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100183098(&qword_100654E90);
  v3[48] = swift_task_alloc((*(void *)(*(void *)(v17 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100183098(&qword_100654E98);
  v3[49] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v3[50] = v19;
  v3[51] = swift_task_alloc((*(void *)(v19 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_100183098(&qword_100654E48);
  v3[52] = v20;
  uint64_t v21 = *(void *)(v20 - 8);
  v3[53] = v21;
  v3[54] = swift_task_alloc((*(void *)(v21 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_100183098(&qword_100654EA0);
  v3[55] = v22;
  uint64_t v23 = *(void *)(v22 - 8);
  v3[56] = v23;
  v3[57] = swift_task_alloc((*(void *)(v23 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = sub_100183098(&qword_1006475A8);
  v3[58] = swift_task_alloc((*(void *)(*(void *)(v24 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v25 = static AirDropActor.shared;
  v3[59] = static AirDropActor.shared;
  return swift_task_switch(sub_10041CEA0, v25, 0LL);
}

uint64_t sub_10041CEA0()
{
  if (qword_100644370 != -1) {
    swift_once(&qword_100644370, sub_10042322C);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_100654D20);
  *(void *)(v0 + 480) = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Received UPLOAD request", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 464);
  uint64_t v7 = *(void *)(v0 + 216);

  uint64_t v8 = v7 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_helloRequest;
  swift_beginAccess(v7 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_helloRequest, v0 + 16, 0LL, 0LL);
  sub_1001915A4(v8, v6, &qword_1006475A8);
  uint64_t v9 = _s12HelloRequestVMa(0LL);
  LODWORD(v8) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))(v6, 1LL, v9);
  uint64_t v10 = sub_100187100(v6, &qword_1006475A8);
  unint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter();
  BOOL v13 = os_log_type_enabled(v11, v12);
  if ((_DWORD)v8 == 1)
  {
    if (v13)
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "No HELLO request present", v14, 2u);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    uint64_t v15 = *(void *)(v0 + 352);
    uint64_t v16 = *(void *)(v0 + 216);

    uint64_t v17 = v16 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_askRequest;
    swift_beginAccess(v16 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_askRequest, v0 + 40, 0LL, 0LL);
    sub_1001915A4(v17, v15, &qword_1006475B8);
    uint64_t v18 = _s14descr1005DF7D1C10AskRequestVMa(0LL);
    LODWORD(v1sub_10018709C(v0 + 7) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48LL))(v15, 1LL, v18);
    uint64_t v19 = sub_100187100(v15, &qword_1006475B8);
    if ((_DWORD)v17 == 1)
    {
      uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
      os_log_type_t v21 = static os_log_type_t.error.getter(v20);
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "No ASK request before UPLOAD", v22, 2u);
        swift_slowDealloc(v22, -1LL, -1LL);
      }

      uint64_t v23 = *(void *)(v0 + 232);
      uint64_t v24 = *(void *)(v0 + 240);

      uint64_t v25 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
      swift_allocError(v23, v25, 0LL, 0LL);
      uint64_t v27 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v24 + 104))( v26,  enum case for SFAirDropReceive.Failure.badRequest(_:),  v23);
      swift_willThrow(v27);
      uint64_t v28 = *(void *)(v0 + 456);
      uint64_t v29 = *(void *)(v0 + 432);
      uint64_t v30 = *(void *)(v0 + 408);
      uint64_t v32 = *(void *)(v0 + 376);
      uint64_t v31 = *(void *)(v0 + 384);
      uint64_t v34 = *(void *)(v0 + 344);
      uint64_t v33 = *(void *)(v0 + 352);
      uint64_t v36 = *(void *)(v0 + 328);
      uint64_t v35 = *(void *)(v0 + 336);
      uint64_t v101 = *(void *)(v0 + 320);
      uint64_t v102 = *(void *)(v0 + 312);
      uint64_t v103 = *(void *)(v0 + 304);
      uint64_t v105 = *(void *)(v0 + 296);
      os_log_t loga = *(os_log_t *)(v0 + 288);
      uint64_t v109 = *(void *)(v0 + 264);
      uint64_t v111 = *(void *)(v0 + 256);
      uint64_t v114 = *(void *)(v0 + 248);
      uint64_t v116 = *(void *)(v0 + 224);
      swift_task_dealloc(*(void *)(v0 + 464));
      swift_task_dealloc(v28);
      swift_task_dealloc(v29);
      swift_task_dealloc(v30);
      swift_task_dealloc(v31);
      swift_task_dealloc(v32);
      swift_task_dealloc(v33);
      swift_task_dealloc(v34);
      swift_task_dealloc(v35);
      swift_task_dealloc(v36);
      swift_task_dealloc(v101);
      swift_task_dealloc(v102);
      swift_task_dealloc(v103);
      swift_task_dealloc(v105);
      swift_task_dealloc(loga);
      swift_task_dealloc(v109);
      swift_task_dealloc(v111);
      swift_task_dealloc(v114);
      swift_task_dealloc(v116);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }

    else
    {
      uint64_t v49 = *(void *)(v0 + 336);
      uint64_t v50 = *(void *)(v0 + 344);
      uint64_t v51 = *(void *)(v0 + 280);
      uint64_t v112 = *(void *)(v0 + 272);
      uint64_t v53 = *(void *)(v0 + 208);
      uint64_t v52 = *(char **)(v0 + 216);
      uint64_t v54 = *(void *)(v0 + 200);
      sub_1001A4B84(v54, v50, _s14descr1005D9BD1C13UploadRequestVMa);
      uint64_t v55 = (int *)_s14descr1005D9BD1C13UploadRequestVMa(0LL);
      (*(void (**)(uint64_t, void, uint64_t, int *))(*((void *)v55 - 1) + 56LL))(v50, 0LL, 1LL, v55);
      uint64_t v56 = (uint64_t)&v52[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_uploadRequest];
      swift_beginAccess( &v52[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_uploadRequest],  v0 + 64,  33LL,  0LL);
      sub_1001C9860(v50, v56, &qword_1006475C8);
      swift_endAccess(v0 + 64);
      uint64_t v57 = &v52[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_totalBytes];
      *(void *)uint64_t v57 = *(void *)(v54 + v55[5]);
      v57[8] = 0;
      sub_1001A4B84(v53, v49, type metadata accessor for SDAirDropServerConnection);
      uint64_t v58 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v51 + 56);
      *(void *)(v0 + 496) = v58;
      v58(v49, 0LL, 1LL, v112);
      uint64_t v59 = (uint64_t)&v52[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_uploadConnection];
      swift_beginAccess( &v52[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_uploadConnection],  v0 + 88,  33LL,  0LL);
      sub_1001C9860(v49, v59, &qword_100650B48);
      swift_endAccess(v0 + 88);
      uint64_t v60 = v55[10];
      uint64_t v61 = (uint64_t *)(v54 + v55[9]);
      uint64_t v62 = *v61;
      uint64_t v63 = (char *)v61[1];
      uint64_t v65 = *(void *)(v54 + v60);
      id v64 = *(char **)(v54 + v60 + 8);
      swift_bridgeObjectRetain_n(v64, 2LL);
      uint64_t v66 = v52;
      swift_bridgeObjectRetain_n(v63, 2LL);
      os_log_type_t v67 = (os_log_s *)Logger.logObject.getter(v66);
      os_log_type_t v68 = static os_log_type_t.default.getter();
      BOOL v69 = os_log_type_enabled(v67, v68);
      id v70 = *(char **)(v0 + 216);
      if (v69)
      {
        os_log_type_t v106 = v68;
        log = v67;
        uint64_t v110 = v64;
        uint64_t v115 = v65;
        uint64_t v117 = v0 + 184;
        uint64_t v71 = v62;
        uint64_t v72 = v63;
        uint64_t v73 = swift_slowAlloc(32LL, -1LL);
        uint64_t v104 = swift_slowAlloc(96LL, -1LL);
        uint64_t v118 = v104;
        *(_DWORD *)uint64_t v73 = 136315650;
        uint64_t v74 = *(void *)&v70[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_idsSessionID];
        id v75 = *(const char **)&v70[OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_idsSessionID + 8];
        swift_bridgeObjectRetain(v75);
        *(void *)(v0 + 168) = sub_10018CDB4(v74, (unint64_t)v75, &v118);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v73 + 4, v73 + 12);
        swift_bridgeObjectRelease(v75);

        *(_WORD *)(v73 + 1sub_10018709C(v0 + 2) = 2080;
        uint64_t v113 = v71;
        uint64_t v76 = v72;
        if (!v72)
        {
          uint64_t v71 = 0xD000000000000015LL;
          uint64_t v119 = 0LL;
          uint64_t v120 = (const char *)0xE000000000000000LL;
          _StringGuts.grow(_:)(17LL);
          swift_bridgeObjectRelease(v120);
          uint64_t v76 = (const char *)0x80000001005046B0LL;
        }

        swift_bridgeObjectRetain(v72);
        *(void *)(v0 + 176) = sub_10018CDB4(v71, (unint64_t)v76, &v118);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v117, v73 + 14, v73 + 22);
        swift_bridgeObjectRelease(v76);
        swift_bridgeObjectRelease_n(v72, 2LL);
        *(_WORD *)(v73 + 2sub_10018709C(v0 + 2) = 2080;
        uint64_t v65 = v115;
        uint64_t v77 = v115;
        id v64 = (char *)v110;
        uint64_t v78 = v110;
        if (!v110)
        {
          uint64_t v77 = 0xD000000000000015LL;
          uint64_t v119 = 0LL;
          uint64_t v120 = (const char *)0xE000000000000000LL;
          _StringGuts.grow(_:)(17LL);
          swift_bridgeObjectRelease(v120);
          uint64_t v78 = (const char *)0x80000001005046B0LL;
        }

        swift_bridgeObjectRetain(v110);
        *(void *)(v0 + 184) = sub_10018CDB4(v77, (unint64_t)v78, &v118);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v117, v0 + 192, v73 + 24, v73 + 32);
        swift_bridgeObjectRelease(v78);
        swift_bridgeObjectRelease_n(v110, 2LL);
        _os_log_impl( (void *)&_mh_execute_header,  log,  v106,  "Receiver extracted IDS session ID %s, pseudonym: %s, push token: %s from upload request",  (uint8_t *)v73,  0x20u);
        swift_arrayDestroy(v104, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v104, -1LL, -1LL);
        swift_slowDealloc(v73, -1LL, -1LL);

        uint64_t v63 = (char *)v72;
        uint64_t v62 = v113;
      }

      else
      {

        swift_bridgeObjectRelease_n(v63, 2LL);
        swift_bridgeObjectRelease_n(v64, 2LL);
      }

      uint64_t v79 = *(void *)(v0 + 328);
      uint64_t v80 = *(void *)(v0 + 272);
      uint64_t v81 = *(void *)(v0 + 280);
      uint64_t v82 = *(void *)(v0 + 216) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_askConnection;
      swift_beginAccess(v82, v0 + 112, 0LL, 0LL);
      sub_1001915A4(v82, v79, &qword_100650B48);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v79, 1LL, v80) == 1)
      {
        uint64_t v83 = sub_100187100(*(void *)(v0 + 328), &qword_100650B48);
        uint64_t v84 = (os_log_s *)Logger.logObject.getter(v83);
        os_log_type_t v85 = static os_log_type_t.error.getter(v84);
        if (os_log_type_enabled(v84, v85))
        {
          uint64_t v86 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v86 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v84,  v85,  "ASK connection no longer exists to set Internet fallback endpoint",  v86,  2u);
          swift_slowDealloc(v86, -1LL, -1LL);
        }
      }

      else
      {
        uint64_t v88 = *(void *)(v0 + 288);
        uint64_t v89 = *(void *)(v0 + 296);
        uint64_t v90 = *(void *)(v0 + 272);
        sub_1001A4B40(*(void *)(v0 + 328), v89, type metadata accessor for SDAirDropServerConnection);
        sub_1001A4B84(v89, v88, type metadata accessor for SDAirDropServerConnection);
        if (swift_getEnumCaseMultiPayload(v88, v90) > 1)
        {
          uint64_t v92 = *(uint64_t **)(v0 + 288);
          uint64_t v91 = *v92;
          unint64_t v93 = (char *)v92 + *(int *)(sub_100183098(&qword_100649710) + 48);
          uint64_t v94 = type metadata accessor for UUID(0LL);
          (*(void (**)(char *, uint64_t))(*(void *)(v94 - 8) + 8LL))(v93, v94);
        }

        else
        {
          uint64_t v91 = **(void **)(v0 + 288);
        }

        uint64_t v95 = *(void *)(v0 + 296);
        sub_100411330( *(void *)(*(void *)(v0 + 216) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_idsSessionID),  *(void **)(*(void *)(v0 + 216) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_idsSessionID + 8),  v62,  v63,  v65,  v64);
        swift_release(v91);
        uint64_t v87 = sub_1001A4BC8(v95, type metadata accessor for SDAirDropServerConnection);
      }

      uint64_t v96 = *(void *)(v0 + 264);
      uint64_t v97 = *(void *)(v0 + 216);
      static Date.now.getter(v87);
      uint64_t v98 = type metadata accessor for Date(0LL);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v98 - 8) + 56LL))(v96, 0LL, 1LL, v98);
      uint64_t v99 = v97 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_transferStart;
      swift_beginAccess(v99, v0 + 136, 33LL, 0LL);
      sub_1001C9860(v96, v99, &qword_1006457E8);
      swift_endAccess(v0 + 136);
      uint64_t v100 = (void *)swift_task_alloc(dword_100654EAC);
      *(void *)(v0 + 504) = v100;
      void *v100 = v0;
      v100[1] = sub_10041E3E0;
      return sub_100424D48(*(void *)(v0 + 200));
    }
  }

  else
  {
    if (v13)
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "HELLO request present", v38, 2u);
      swift_slowDealloc(v38, -1LL, -1LL);
    }

    uint64_t v40 = *(void *)(v0 + 424);
    uint64_t v39 = *(void *)(v0 + 432);
    uint64_t v42 = *(void *)(v0 + 408);
    uint64_t v41 = *(void *)(v0 + 416);
    uint64_t v43 = *(void *)(v0 + 392);
    uint64_t v44 = *(void *)(v0 + 400);
    uint64_t v45 = *(void *)(v0 + 216);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))( v39,  v45 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_askContinuation,  v41);
    SFProgressContinuation.task.getter(v41);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
    SFProgressTask.makeAsyncIterator()(v43);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v42, v43);
    *(_DWORD *)(v0 + 560) = enum case for SFAirDrop.AskProgress.notStarted(_:);
    uint64_t v46 = static AirDropActor.shared;
    uint64_t v47 = sub_100183F14( (unint64_t *)&qword_100656410,  (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor,  (uint64_t)&protocol conformance descriptor for AirDropActor);
    unint64_t v48 = (void *)swift_task_alloc(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
    *(void *)(v0 + 488) = v48;
    *unint64_t v48 = v0;
    v48[1] = sub_10041DA78;
    return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF( *(void *)(v0 + 384),  v46,  v47,  *(void *)(v0 + 440),  v0 + 192);
  }

uint64_t sub_10041DA78()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 488));
  if (v0) {
    uint64_t v3 = sub_10041E564;
  }
  else {
    uint64_t v3 = sub_10041DADC;
  }
  return swift_task_switch(v3, *(void *)(v2 + 472), 0LL);
}

uint64_t sub_10041DADC()
{
  uint64_t v1 = *(void *)(v0 + 384);
  uint64_t v2 = *(void *)(v0 + 360);
  uint64_t v3 = *(void *)(v0 + 368);
  int v4 = *(_DWORD *)(v0 + 560);
  uint64_t v5 = *(void *)(v0 + 376);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v5, v1, v2);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v5, v2);
  if ((_DWORD)v6 == v4)
  {
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Waiting for ASK before UPLOAD", v9, 2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    uint64_t v10 = static AirDropActor.shared;
    uint64_t v11 = sub_100183F14( (unint64_t *)&qword_100656410,  (uint64_t (*)(uint64_t))type metadata accessor for AirDropActor,  (uint64_t)&protocol conformance descriptor for AirDropActor);
    os_log_type_t v12 = (void *)swift_task_alloc(_sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
    *(void *)(v0 + 488) = v12;
    *os_log_type_t v12 = v0;
    v12[1] = sub_10041DA78;
    return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF( *(void *)(v0 + 384),  v10,  v11,  *(void *)(v0 + 440),  v0 + 192);
  }

  if ((_DWORD)v6 != enum case for SFAirDrop.AskProgress.waitingForAskResponse(_:))
  {
    if ((_DWORD)v6 != enum case for SFAirDrop.AskProgress.askResponseReceived(_:)) {
      return _diagnoseUnexpectedEnumCase<A>(type:)(*(void *)(v0 + 360), *(void *)(v0 + 360));
    }
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v14, v15)) {
      goto LABEL_13;
    }
    uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v16 = 0;
    uint64_t v17 = "ASK response sent, proceeding with UPLOAD";
    goto LABEL_12;
  }

  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v16 = 0;
    uint64_t v17 = "Received ASK request, proceeding pipelined with UPLOAD";
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v14, v15, v17, v16, 2u);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

uint64_t sub_10041E3E0()
{
  uint64_t v2 = *(void *)(*v1 + 504);
  uint64_t v3 = *v1;
  *(void *)(v3 + 51sub_10018709C(v0 + 2) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_10041E6AC, *(void *)(v3 + 472), 0LL);
  }
  uint64_t v5 = *(void *)(v3 + 456);
  uint64_t v6 = *(void *)(v3 + 432);
  uint64_t v7 = *(void *)(v3 + 408);
  uint64_t v8 = *(void *)(v3 + 376);
  uint64_t v9 = *(void *)(v3 + 384);
  uint64_t v11 = *(void *)(v3 + 344);
  uint64_t v10 = *(void *)(v3 + 352);
  uint64_t v12 = *(void *)(v3 + 336);
  uint64_t v14 = *(void *)(v3 + 328);
  uint64_t v15 = *(void *)(v3 + 320);
  uint64_t v16 = *(void *)(v3 + 312);
  uint64_t v17 = *(void *)(v3 + 304);
  uint64_t v18 = *(void *)(v3 + 296);
  uint64_t v19 = *(void *)(v3 + 288);
  uint64_t v20 = *(void *)(v3 + 264);
  uint64_t v21 = *(void *)(v3 + 256);
  uint64_t v22 = *(void *)(v3 + 248);
  uint64_t v13 = *(void *)(v3 + 224);
  swift_task_dealloc(*(void *)(v3 + 464));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10041E564()
{
  uint64_t v1 = *(void *)(v0 + 456);
  uint64_t v2 = *(void *)(v0 + 432);
  uint64_t v3 = *(void *)(v0 + 408);
  uint64_t v5 = *(void *)(v0 + 376);
  uint64_t v4 = *(void *)(v0 + 384);
  uint64_t v7 = *(void *)(v0 + 344);
  uint64_t v6 = *(void *)(v0 + 352);
  uint64_t v9 = *(void *)(v0 + 328);
  uint64_t v8 = *(void *)(v0 + 336);
  uint64_t v11 = *(void *)(v0 + 320);
  uint64_t v12 = *(void *)(v0 + 312);
  uint64_t v13 = *(void *)(v0 + 304);
  uint64_t v14 = *(void *)(v0 + 296);
  uint64_t v15 = *(void *)(v0 + 288);
  uint64_t v16 = *(void *)(v0 + 264);
  uint64_t v17 = *(void *)(v0 + 256);
  uint64_t v18 = *(void *)(v0 + 248);
  uint64_t v19 = *(void *)(v0 + 224);
  swift_task_dealloc(*(void *)(v0 + 464));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10041E6AC()
{
  uint64_t v1 = v0[64];
  v0[20] = v1;
  uint64_t v2 = v0[29];
  uint64_t v3 = v0[30];
  uint64_t v4 = v0[28];
  swift_errorRetain(v1);
  uint64_t v5 = sub_100183098(&qword_100645710);
  int v6 = swift_dynamicCast(v4, v0 + 20, v5, v2, 6LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
  if (v6)
  {
    uint64_t v8 = v0[31];
    uint64_t v9 = v0[32];
    uint64_t v10 = v0[29];
    uint64_t v11 = v0[30];
    uint64_t v12 = v0[28];
    v7(v12, 0LL, 1LL, v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v9, v12, v10);
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    v0[65] = v13;
    v13(v8, v9, v10);
    LODWORD(v1sub_10018709C(v0 + 2) = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 88))(v8, v10);
    int v14 = enum case for SFAirDropReceive.Failure.insufficientStorage(_:);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v0[66] = v15;
    v15(v8, v10);
    uint64_t v16 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[62];
    uint64_t v17 = v0[34];
    uint64_t v18 = v0[26];
    if ((_DWORD)v12 == v14)
    {
      uint64_t v19 = v0[40];
      sub_1001A4B84(v18, v19, type metadata accessor for SDAirDropServerConnection);
      v16(v19, 0LL, 1LL, v17);
      uint64_t v20 = (void *)swift_task_alloc(dword_100654EBC);
      v0[67] = v20;
      *uint64_t v20 = v0;
      v20[1] = sub_10041E8F8;
      return sub_10042573C(v0[40]);
    }

    uint64_t v29 = v0[39];
    sub_1001A4B84(v18, v29, type metadata accessor for SDAirDropServerConnection);
    v16(v29, 0LL, 1LL, v17);
    uint64_t v30 = (void *)swift_task_alloc(dword_100654EB4);
    v0[68] = v30;
    *uint64_t v30 = v0;
    v30[1] = sub_10041E990;
    uint64_t v28 = v0[39];
  }

  else
  {
    uint64_t v22 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[62];
    uint64_t v23 = v0[38];
    uint64_t v24 = v0[34];
    uint64_t v25 = v0[28];
    uint64_t v26 = v0[26];
    v7(v25, 1LL, 1LL, v0[29]);
    sub_100187100(v25, &qword_1006529A0);
    sub_1001A4B84(v26, v23, type metadata accessor for SDAirDropServerConnection);
    v22(v23, 0LL, 1LL, v24);
    uint64_t v27 = (void *)swift_task_alloc(dword_100654EB4);
    v0[69] = v27;
    *uint64_t v27 = v0;
    v27[1] = sub_10041EA28;
    uint64_t v28 = v0[38];
  }

  return sub_1004252DC(v28);
}

uint64_t sub_10041E8F8()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 536));
  uint64_t v3 = *(void *)(v2 + 472);
  uint64_t v4 = *(void *)(v2 + 320);
  if (v0) {
    swift_errorRelease(v0);
  }
  sub_100187100(v4, &qword_100650B48);
  return swift_task_switch(sub_100429B70, v3, 0LL);
}

uint64_t sub_10041E990()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 544));
  uint64_t v3 = *(void *)(v2 + 472);
  uint64_t v4 = *(void *)(v2 + 312);
  if (v0)
  {
    swift_errorRelease(v0);
    sub_100187100(v4, &qword_100650B48);
    uint64_t v5 = sub_10041EC00;
  }

  else
  {
    sub_100187100(v4, &qword_100650B48);
    uint64_t v5 = sub_100429B70;
  }

  return swift_task_switch(v5, v3, 0LL);
}

uint64_t sub_10041EA28()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 552));
  uint64_t v3 = *(void *)(v2 + 472);
  uint64_t v4 = *(void *)(v2 + 304);
  if (v0)
  {
    swift_errorRelease(v0);
    sub_100187100(v4, &qword_100650B48);
    uint64_t v5 = sub_100429B6C;
  }

  else
  {
    sub_100187100(v4, &qword_100650B48);
    uint64_t v5 = sub_10041EAC0;
  }

  return swift_task_switch(v5, v3, 0LL);
}

uint64_t sub_10041EAC0()
{
  uint64_t v1 = *(void *)(v0 + 456);
  uint64_t v2 = *(void *)(v0 + 432);
  uint64_t v3 = *(void *)(v0 + 408);
  uint64_t v5 = *(void *)(v0 + 376);
  uint64_t v4 = *(void *)(v0 + 384);
  uint64_t v7 = *(void *)(v0 + 344);
  uint64_t v6 = *(void *)(v0 + 352);
  uint64_t v9 = *(void *)(v0 + 328);
  uint64_t v8 = *(void *)(v0 + 336);
  uint64_t v11 = *(void *)(v0 + 320);
  uint64_t v12 = *(void *)(v0 + 312);
  uint64_t v13 = *(void *)(v0 + 304);
  uint64_t v14 = *(void *)(v0 + 296);
  uint64_t v15 = *(void *)(v0 + 288);
  uint64_t v16 = *(void *)(v0 + 264);
  uint64_t v17 = *(void *)(v0 + 256);
  uint64_t v18 = *(void *)(v0 + 248);
  uint64_t v19 = *(void *)(v0 + 224);
  swift_task_dealloc(*(void *)(v0 + 464));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10041EC00()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 528);
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 520);
  uint64_t v3 = *(void *)(v0 + 512);
  uint64_t v4 = *(void *)(v0 + 256);
  uint64_t v5 = *(void *)(v0 + 232);
  uint64_t v6 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
  swift_allocError(v5, v6, 0LL, 0LL);
  uint64_t v8 = v2(v7, v4, v5);
  swift_willThrow(v8);
  swift_errorRelease(v3);
  v1(v4, v5);
  uint64_t v9 = *(void *)(v0 + 456);
  uint64_t v10 = *(void *)(v0 + 432);
  uint64_t v11 = *(void *)(v0 + 408);
  uint64_t v13 = *(void *)(v0 + 376);
  uint64_t v12 = *(void *)(v0 + 384);
  uint64_t v15 = *(void *)(v0 + 344);
  uint64_t v14 = *(void *)(v0 + 352);
  uint64_t v17 = *(void *)(v0 + 328);
  uint64_t v16 = *(void *)(v0 + 336);
  uint64_t v19 = *(void *)(v0 + 320);
  uint64_t v20 = *(void *)(v0 + 312);
  uint64_t v21 = *(void *)(v0 + 304);
  uint64_t v22 = *(void *)(v0 + 296);
  uint64_t v23 = *(void *)(v0 + 288);
  uint64_t v24 = *(void *)(v0 + 264);
  uint64_t v25 = *(void *)(v0 + 256);
  uint64_t v26 = *(void *)(v0 + 248);
  uint64_t v27 = *(void *)(v0 + 224);
  swift_task_dealloc(*(void *)(v0 + 464));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10041EDA8(uint64_t a1, uint64_t a2)
{
  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  uint64_t v4 = sub_100183098(&qword_100650B60);
  v3[14] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[15] = v5;
  v3[16] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100183098(&qword_100650B48);
  v3[17] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100183098(&qword_100650B10);
  v3[18] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  return swift_task_switch(sub_10041EE88, static AirDropActor.shared, 0LL);
}

uint64_t sub_10041EE88()
{
  if (qword_100644370 != -1) {
    swift_once(&qword_100644370, sub_10042322C);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_100654D20);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Received EXCHANGE request", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 136);
  uint64_t v7 = *(void *)(v0 + 144);
  uint64_t v8 = *(void *)(v0 + 120);
  uint64_t v25 = *(void *)(v0 + 112);
  uint64_t v10 = *(void *)(v0 + 96);
  uint64_t v9 = *(void *)(v0 + 104);
  uint64_t v11 = *(void *)(v0 + 88);

  sub_1001A4B84(v11, v7, _s14descr1005DEB71C15ExchangeRequestVMa);
  uint64_t v12 = _s14descr1005DEB71C15ExchangeRequestVMa(0LL);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v7, 0LL, 1LL, v12);
  uint64_t v13 = v9 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_exchangeRequest;
  swift_beginAccess( v9 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_exchangeRequest,  v0 + 16,  33LL,  0LL);
  sub_1001C9860(v7, v13, &qword_100650B10);
  swift_endAccess(v0 + 16);
  sub_1001A4B84(v10, v6, type metadata accessor for SDAirDropServerConnection);
  uint64_t v14 = type metadata accessor for SDAirDropServerConnection(0LL);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v6, 0LL, 1LL, v14);
  uint64_t v15 = v9 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_exchangeConnection;
  swift_beginAccess( v9 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_exchangeConnection,  v0 + 40,  33LL,  0LL);
  sub_1001C9860(v6, v15, &qword_100650B48);
  swift_endAccess(v0 + 40);
  uint64_t v16 = v9 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_exchangeContinuation;
  __n128 v17 = swift_beginAccess( v9 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_exchangeContinuation,  v0 + 64,  0LL,  0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v8 + 48))(v16, 1LL, v25, v17))
  {
    uint64_t v19 = *(void *)(v0 + 120);
    uint64_t v18 = *(void *)(v0 + 128);
    uint64_t v20 = *(void *)(v0 + 112);
    uint64_t v21 = *(void *)(v0 + 88);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v16, v20);
    SFProgressContinuation.finish(with:)(v21, v20);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  }

  uint64_t v22 = *(void *)(v0 + 136);
  uint64_t v23 = *(void *)(v0 + 128);
  swift_task_dealloc(*(void *)(v0 + 144));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10041F11C(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v3 + 120) = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 136) = v4;
  __int128 v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v3 + 15sub_10018709C(v0 + 2) = *(_OWORD *)(a1 + 32);
  *(void *)(v3 + 104) = a2;
  *(void *)(v3 + 11sub_10018709C(v0 + 2) = v2;
  *(_OWORD *)(v3 + 168) = v5;
  *(_OWORD *)(v3 + 184) = *(_OWORD *)(a1 + 64);
  *(void *)(v3 + 200) = *(void *)(a1 + 80);
  uint64_t v6 = type metadata accessor for SDAirDropMessage(0LL);
  *(void *)(v3 + 208) = v6;
  *(void *)(v3 + 2swift_weakDestroy(v0 + 16) = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v7 = (*(void *)(*(void *)(sub_100183098(&qword_100650B48) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v3 + 224) = swift_task_alloc(v7);
  *(void *)(v3 + 23sub_10018709C(v0 + 2) = swift_task_alloc(v7);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v8 = static AirDropActor.shared;
  *(void *)(v3 + 240) = static AirDropActor.shared;
  return swift_task_switch(sub_10041F208, v8, 0LL);
}

uint64_t sub_10041F208()
{
  if (qword_100644370 != -1) {
    swift_once(&qword_100644370, sub_10042322C);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_100654D20);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    __int128 v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)__int128 v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Received IDENTITY-SHARE request", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 232);
  uint64_t v7 = *(void *)(v0 + 200);
  uint64_t v8 = *(void *)(v0 + 104);
  __int128 v16 = *(_OWORD *)(v0 + 120);
  __int128 v17 = *(_OWORD *)(v0 + 184);
  __int128 v14 = *(_OWORD *)(v0 + 152);
  __int128 v15 = *(_OWORD *)(v0 + 136);
  __int128 v13 = *(_OWORD *)(v0 + 168);

  *(_OWORD *)(v0 + swift_weakDestroy(v0 + 16) = v16;
  *(_OWORD *)(v0 + 3sub_10018709C(v0 + 2) = v15;
  *(_OWORD *)(v0 + 48) = v14;
  *(_OWORD *)(v0 + 64) = v13;
  *(_OWORD *)(v0 + 80) = v17;
  *(void *)(v0 + 96) = v7;
  sub_1001A4B84(v8, v6, type metadata accessor for SDAirDropServerConnection);
  uint64_t v9 = type metadata accessor for SDAirDropServerConnection(0LL);
  *(void *)(v0 + 248) = v9;
  uint64_t v10 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL);
  *(void *)(v0 + 256) = v10;
  v10(v6, 0LL, 1LL, v9);
  uint64_t v11 = (void *)swift_task_alloc(dword_100654E64);
  *(void *)(v0 + 264) = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_10041F3B8;
  return sub_100421B14(v0 + 16, 0LL, 0xF000000000000000LL, 0LL, 0LL, *(void *)(v0 + 232));
}

uint64_t sub_10041F3B8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 264);
  uint64_t v4 = *(void *)(*v1 + 232);
  *(void *)(*v1 + 27sub_10018709C(v0 + 2) = v0;
  swift_task_dealloc(v3);
  sub_100187100(v4, &qword_100650B48);
  if (v0)
  {
    uint64_t v5 = *(void *)(v2 + 240);
    uint64_t v6 = sub_10041F7C0;
  }

  else
  {
    uint64_t v5 = static AirDropActor.shared;
    *(void *)(v2 + 280) = static AirDropActor.shared;
    uint64_t v6 = sub_10041F448;
  }

  return swift_task_switch(v6, v5, 0LL);
}

uint64_t sub_10041F448()
{
  uint64_t v2 = v0[26];
  uint64_t v1 = (_OWORD *)v0[27];
  *uint64_t v1 = xmmword_1004D9570;
  swift_storeEnumTagMultiPayload(v1, v2, 11LL);
  uint64_t v3 = (void *)swift_task_alloc(dword_100653384);
  v0[36] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10041F4B0;
  return sub_1003E89C8(v0[27]);
}

uint64_t sub_10041F4B0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 288);
  uint64_t v4 = *(void *)(*v1 + 216);
  *(void *)(*v1 + 296) = v0;
  swift_task_dealloc(v3);
  sub_1001A4BC8(v4, type metadata accessor for SDAirDropMessage);
  if (v0) {
    uint64_t v5 = sub_10041F64C;
  }
  else {
    uint64_t v5 = sub_10041F530;
  }
  return swift_task_switch(v5, *(void *)(v2 + 280), 0LL);
}

uint64_t sub_10041F530(uint64_t a1, uint64_t a2)
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong( *(void *)(v2 + 112) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_delegate,  a2);
  *(void *)(v2 + 304) = Strong;
  if (Strong)
  {
    uint64_t v4 = *(void *)(v2 + 112) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_serverConnectionIdentity;
    uint64_t v5 = (void *)swift_task_alloc(dword_10064973C);
    *(void *)(v2 + 31sub_10018709C(v0 + 2) = v5;
    *uint64_t v5 = v2;
    v5[1] = sub_10041F5E0;
    return sub_10022EC74(v4, 0LL);
  }

  else
  {
    uint64_t v7 = *(void *)(v2 + 224);
    uint64_t v8 = *(void *)(v2 + 216);
    swift_task_dealloc(*(void *)(v2 + 232));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v2 + 8))();
  }

uint64_t sub_10041F5E0()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = *(void *)(*v0 + 304);
  uint64_t v7 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 312));
  swift_unknownObjectRelease(v2);
  uint64_t v4 = v1[28];
  uint64_t v3 = v1[29];
  uint64_t v5 = v1[27];
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_10041F64C()
{
  return swift_task_switch(sub_10041F660, *(void *)(v0 + 240), 0LL);
}

uint64_t sub_10041F660()
{
  v0[40] = v0[37];
  uint64_t v1 = v0[31];
  uint64_t v2 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[32];
  uint64_t v3 = v0[28];
  sub_1001A4B84(v0[13], v3, type metadata accessor for SDAirDropServerConnection);
  v2(v3, 0LL, 1LL, v1);
  uint64_t v4 = (uint64_t **)swift_task_alloc(dword_100654E24);
  v0[41] = (uint64_t)v4;
  *uint64_t v4 = v0;
  v4[1] = (uint64_t *)sub_10041F6F0;
  return sub_1004232BC(v0[28]);
}

uint64_t sub_10041F6F0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 328);
  uint64_t v4 = *(void *)(*v1 + 224);
  *(void *)(*v1 + 336) = v0;
  swift_task_dealloc(v3);
  sub_100187100(v4, &qword_100650B48);
  if (v0) {
    uint64_t v5 = sub_10041F850;
  }
  else {
    uint64_t v5 = sub_10041F770;
  }
  return swift_task_switch(v5, *(void *)(v2 + 240), 0LL);
}

uint64_t sub_10041F770()
{
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 216);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10041F7C0()
{
  v0[40] = v0[34];
  uint64_t v1 = v0[31];
  uint64_t v2 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[32];
  uint64_t v3 = v0[28];
  sub_1001A4B84(v0[13], v3, type metadata accessor for SDAirDropServerConnection);
  v2(v3, 0LL, 1LL, v1);
  uint64_t v4 = (uint64_t **)swift_task_alloc(dword_100654E24);
  v0[41] = (uint64_t)v4;
  *uint64_t v4 = v0;
  v4[1] = (uint64_t *)sub_10041F6F0;
  return sub_1004232BC(v0[28]);
}

uint64_t sub_10041F850()
{
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 216);
  swift_errorRelease(*(void *)(v0 + 320));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10041F8AC(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  uint64_t v4 = type metadata accessor for SDAirDropMessage(0LL);
  v3[8] = v4;
  void v3[9] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for SDAirDropServerConnection(0LL);
  v3[10] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[11] = v6;
  v3[12] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100183098(&qword_100650B48);
  v3[13] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v8 = static AirDropActor.shared;
  v3[14] = static AirDropActor.shared;
  return swift_task_switch(sub_10041F98C, v8, 0LL);
}

uint64_t sub_10041F98C()
{
  if (qword_100644370 != -1) {
    swift_once(&qword_100644370, sub_10042322C);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_100654D20);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Received ERROR request", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = v0[13];
  uint64_t v7 = v0[10];
  uint64_t v8 = v0[11];
  uint64_t v9 = v0[6];
  uint64_t v10 = v0[7];

  sub_1001A4B84(v9, v6, type metadata accessor for SDAirDropServerConnection);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v6, 0LL, 1LL, v7);
  uint64_t v11 = v10 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_errorConnection;
  swift_beginAccess( v10 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_errorConnection,  v0 + 2,  33LL,  0LL);
  sub_1001C9860(v6, v11, &qword_100650B48);
  swift_endAccess(v0 + 2);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v11, 1LL, v7))
  {
    uint64_t v12 = v0[5];
    uint64_t v13 = v12 + *(int *)(_s14descr1005DD3D1C12ErrorRequestVMa(0LL) + 20);
    uint64_t v14 = type metadata accessor for CodableError(0LL);
    uint64_t v15 = sub_100183F14( &qword_100647700,  (uint64_t (*)(uint64_t))&type metadata accessor for CodableError,  (uint64_t)&protocol conformance descriptor for CodableError);
    uint64_t v16 = swift_allocError(v14, v15, 0LL, 0LL);
    v0[17] = v16;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL))(v17, v13, v14);
    uint64_t v18 = (void *)swift_task_alloc(dword_100654E5C);
    v0[18] = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_10041FD70;
    return sub_100420620(v16);
  }

  else
  {
    uint64_t v21 = v0[8];
    uint64_t v20 = (_OWORD *)v0[9];
    sub_1001A4B84(v11, v0[12], type metadata accessor for SDAirDropServerConnection);
    *uint64_t v20 = xmmword_1004D9570;
    swift_storeEnumTagMultiPayload(v20, v21, 13LL);
    uint64_t v22 = (void *)swift_task_alloc(dword_100653384);
    v0[15] = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_10041FC18;
    return sub_1003E89C8(v0[9]);
  }

uint64_t sub_10041FC18()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 120);
  uint64_t v4 = *(void *)(*v1 + 96);
  uint64_t v5 = *(void *)(*v1 + 72);
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  sub_1001A4BC8(v5, type metadata accessor for SDAirDropMessage);
  sub_1001A4BC8(v4, type metadata accessor for SDAirDropServerConnection);
  if (v0) {
    uint64_t v6 = sub_10041FDEC;
  }
  else {
    uint64_t v6 = sub_10041FCAC;
  }
  return swift_task_switch(v6, *(void *)(v2 + 112), 0LL);
}

uint64_t sub_10041FCAC()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v1 + *(int *)(_s14descr1005DD3D1C12ErrorRequestVMa(0LL) + 20);
  uint64_t v3 = type metadata accessor for CodableError(0LL);
  uint64_t v4 = sub_100183F14( &qword_100647700,  (uint64_t (*)(uint64_t))&type metadata accessor for CodableError,  (uint64_t)&protocol conformance descriptor for CodableError);
  uint64_t v5 = swift_allocError(v3, v4, 0LL, 0LL);
  v0[17] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(v6, v2, v3);
  uint64_t v7 = (void *)swift_task_alloc(dword_100654E5C);
  v0[18] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10041FD70;
  return sub_100420620(v5);
}

uint64_t sub_10041FD70()
{
  uint64_t v1 = *(void *)(*v0 + 136);
  uint64_t v3 = *(void *)(*v0 + 96);
  uint64_t v2 = *(void *)(*v0 + 104);
  uint64_t v4 = *(void *)(*v0 + 72);
  uint64_t v6 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 144));
  swift_errorRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_10041FDEC()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10041FE34(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100183098(&qword_100650B60);
  uint64_t v87 = *(void *)(v4 - 8);
  uint64_t v88 = v4;
  __chkstk_darwin(v4);
  uint64_t v76 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100183098(&qword_1006457D8);
  uint64_t v82 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100183098(&qword_100654E48);
  uint64_t v79 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  os_log_type_t v85 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100183098(&qword_100654ED0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for NWError(0LL);
  uint64_t v86 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v77 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v78 = (char *)&v73 - v17;
  uint64_t v18 = sub_100183098(&qword_100650C58);
  uint64_t v83 = *(void *)(v18 - 8);
  uint64_t v84 = v18;
  __chkstk_darwin(v18);
  uint64_t v81 = (char *)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100644370 != -1) {
    swift_once(&qword_100644370, sub_10042322C);
  }
  uint64_t v20 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v20, (uint64_t)qword_100654D20);
  swift_errorRetain(a1);
  uint64_t v21 = swift_errorRetain(a1);
  uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.error.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v80 = v9;
  if (v24)
  {
    uint64_t v74 = v14;
    uint64_t v25 = swift_slowAlloc(12LL, -1LL);
    id v75 = v8;
    uint64_t v26 = (uint8_t *)v25;
    os_log_type_t v73 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v26 = 138412290;
    swift_errorRetain(a1);
    uint64_t v27 = v6;
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = _swift_stdlib_bridgeErrorToNSError(a1);
    uint64_t v89 = v30;
    uint64_t v14 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, v26 + 4, v26 + 12);
    uint64_t v31 = v73;
    *os_log_type_t v73 = v30;
    a1 = v29;
    uint64_t v2 = v28;
    uint64_t v6 = v27;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Receive handler error %@", v26, 0xCu);
    uint64_t v32 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v31, 1LL, v32);
    swift_slowDealloc(v31, -1LL, -1LL);
    uint64_t v33 = v26;
    uint64_t v8 = v75;
    swift_slowDealloc(v33, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  uint64_t v34 = v83;
  uint64_t v35 = v84;
  uint64_t v36 = v81;
  (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))( v81,  v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_handlerContinuation,  v84);
  SFProgressContinuation.fail(with:)(a1, v35);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v35);
  uint64_t v89 = a1;
  swift_errorRetain(a1);
  uint64_t v37 = sub_100183098(&qword_100645710);
  char v38 = swift_dynamicCast(v13, &v89, v37, v14, 6LL);
  uint64_t v39 = v86;
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v86 + 56);
  if ((v38 & 1) != 0)
  {
    v40(v13, 0LL, 1LL, v14);
    uint64_t v41 = v78;
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v78, v13, v14);
    uint64_t v42 = (unsigned int *)v77;
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v77, v41, v14);
    if ((*(unsigned int (**)(unsigned int *, uint64_t))(v39 + 88))(v42, v14) == enum case for NWError.posix(_:))
    {
      uint64_t v43 = *(void (**)(unsigned int *, uint64_t))(v39 + 96);
      uint64_t v44 = v14;
      v43(v42, v14);
      uint64_t v45 = *v42;
      int v46 = POSIXErrorCode.rawValue.getter(v45);
      if (v46 == POSIXErrorCode.rawValue.getter(89LL)
        || (int v47 = POSIXErrorCode.rawValue.getter(v45), v47 == POSIXErrorCode.rawValue.getter(54LL))
        || (int v48 = POSIXErrorCode.rawValue.getter(v45), v48 == POSIXErrorCode.rawValue.getter(96LL))
        || (int v49 = POSIXErrorCode.rawValue.getter(v45), v49 == POSIXErrorCode.rawValue.getter(57LL)))
      {
        uint64_t v50 = type metadata accessor for CancellationError(0LL);
        uint64_t v51 = sub_100183F14( &qword_100646848,  (uint64_t (*)(uint64_t))&type metadata accessor for CancellationError,  (uint64_t)&protocol conformance descriptor for CancellationError);
        a1 = swift_allocError(v50, v51, 0LL, 0LL);
        CancellationError.init()();
      }

      else
      {
        swift_errorRetain(a1);
      }

      uint64_t v53 = v79;
      uint64_t v52 = v80;
      uint64_t v54 = v85;
      (*(void (**)(char *, uint64_t, uint64_t))(v79 + 16))( v85,  v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_askContinuation,  v80);
      swift_errorRetain(a1);
      SFProgressContinuation.cancel(_:)(a1, v52);
      swift_errorRelease(a1);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v52);
      uint64_t v55 = v82;
      (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))( v8,  v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_transferContinuation,  v6);
      swift_errorRetain(a1);
      SFProgressContinuation.cancel(_:)(a1, v6);
      swift_errorRelease(a1);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v8, v6);
      uint64_t v56 = v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_exchangeContinuation;
      swift_beginAccess( v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_exchangeContinuation,  &v89,  32LL,  0LL);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v87 + 48))(v56, 1LL, v88))
      {
        (*(void (**)(char *, uint64_t))(v86 + 8))(v78, v44);
        swift_endAccess(&v89);
        return swift_errorRelease(a1);
      }

      else
      {
        uint64_t v69 = v87;
        uint64_t v70 = v76;
        uint64_t v71 = v56;
        uint64_t v72 = v88;
        (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v76, v71, v88);
        swift_endAccess(&v89);
        swift_errorRetain(a1);
        SFProgressContinuation.cancel(_:)(a1, v72);
        swift_errorRelease(a1);
        swift_errorRelease(a1);
        (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v72);
        return (*(uint64_t (**)(char *, uint64_t))(v86 + 8))(v78, v44);
      }
    }

    uint64_t v58 = v14;
    uint64_t v59 = *(void (**)(char *, uint64_t))(v39 + 8);
    v59(v41, v58);
    v59((char *)v42, v58);
  }

  else
  {
    v40(v13, 1LL, 1LL, v14);
    sub_100187100((uint64_t)v13, &qword_100654ED0);
  }

  uint64_t v60 = v79;
  uint64_t v61 = v80;
  uint64_t v62 = v85;
  (*(void (**)(char *, uint64_t, uint64_t))(v79 + 16))( v85,  v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_askContinuation,  v80);
  SFProgressContinuation.cancel(_:)(a1, v61);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v62, v61);
  uint64_t v63 = v82;
  (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))( v8,  v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_transferContinuation,  v6);
  SFProgressContinuation.cancel(_:)(a1, v6);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v8, v6);
  uint64_t v64 = v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_exchangeContinuation;
  swift_beginAccess( v2 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_exchangeContinuation,  &v89,  0LL,  0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v87 + 48))(v64, 1LL, v88);
  if (!(_DWORD)result)
  {
    uint64_t v65 = v87;
    uint64_t v66 = v76;
    uint64_t v67 = v64;
    uint64_t v68 = v88;
    (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v76, v67, v88);
    SFProgressContinuation.cancel(_:)(a1, v68);
    return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v66, v68);
  }

  return result;
}

uint64_t sub_100420620(uint64_t a1)
{
  v2[22] = a1;
  v2[23] = v1;
  uint64_t v3 = sub_100183098(&qword_100650C58);
  v2[24] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[25] = v4;
  v2[26] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for SDAirDropServerConnection(0LL);
  v2[27] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[28] = v6;
  v2[29] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v7 = static AirDropActor.shared;
  v2[30] = static AirDropActor.shared;
  return swift_task_switch(sub_10042070C, v7, 0LL);
}

uint64_t sub_10042070C()
{
  if (qword_100644370 != -1) {
    swift_once(&qword_100644370, sub_10042322C);
  }
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_100186DE4(v2, (uint64_t)qword_100654D20);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void *)(v0 + 176);
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v7 = 138412290;
    if (v6)
    {
      swift_errorRetain(v1);
      uint64_t v6 = _swift_stdlib_bridgeErrorToNSError(v1);
      uint64_t v9 = v7 + 12;
      *(void *)(v0 + 168) = v6;
      uint64_t v10 = v0 + 168;
      uint64_t v11 = v0 + 176;
    }

    else
    {
      uint64_t v10 = v0 + 160;
      uint64_t v9 = v7 + 12;
      *(void *)(v0 + 160) = 0LL;
      uint64_t v11 = v0 + 168;
    }

    UnsafeMutableRawBufferPointer.copyMemory(from:)(v10, v11, v7 + 4, v9);
    *uint64_t v8 = v6;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Receive handler stop - error: %@", v7, 0xCu);
    uint64_t v12 = sub_100183098(&qword_1006454E0);
    swift_arrayDestroy(v8, 1LL, v12);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v13 = *(void *)(v0 + 216);
  uint64_t v14 = *(void *)(v0 + 224);
  uint64_t v15 = *(void *)(v0 + 184);
  if (*(void *)(v0 + 176))
  {
    swift_errorRetain(v1);
    sub_10041FE34(v1);
    uint64_t v16 = v15 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_askConnection;
    swift_beginAccess(v16, v0 + 112, 0LL, 0LL);
    uint64_t v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    if (!v17(v16, 1LL, v13))
    {
      uint64_t v18 = *(void *)(v0 + 232);
      sub_1001A4B84(v16, v18, type metadata accessor for SDAirDropServerConnection);
      sub_1003E8564(1);
      sub_1001A4BC8(v18, type metadata accessor for SDAirDropServerConnection);
    }

    uint64_t v19 = *(void *)(v0 + 216);
    uint64_t v20 = *(void *)(v0 + 184) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_uploadConnection;
    swift_beginAccess(v20, v0 + 136, 0LL, 0LL);
    if (!v17(v20, 1LL, v19))
    {
      uint64_t v21 = *(void *)(v0 + 232);
      sub_1001A4B84(v20, v21, type metadata accessor for SDAirDropServerConnection);
      sub_1003E8564(1);
      sub_1001A4BC8(v21, type metadata accessor for SDAirDropServerConnection);
    }

    uint64_t v22 = *(void *)(v0 + 216);
    uint64_t v23 = *(void *)(v0 + 184) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_exchangeConnection;
    swift_beginAccess(v23, v0 + 88, 0LL, 0LL);
    if (v17(v23, 1LL, v22))
    {
      swift_errorRelease(v1);
    }

    else
    {
      uint64_t v36 = *(void *)(v0 + 232);
      sub_1001A4B84(v23, v36, type metadata accessor for SDAirDropServerConnection);
      sub_1003E8564(1);
      swift_errorRelease(v1);
      sub_1001A4BC8(v36, type metadata accessor for SDAirDropServerConnection);
    }
  }

  else
  {
    uint64_t v24 = v15 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_askConnection;
    swift_beginAccess(v24, v0 + 16, 0LL, 0LL);
    uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    if (!v25(v24, 1LL, v13))
    {
      uint64_t v26 = *(void *)(v0 + 232);
      sub_1001A4B84(v24, v26, type metadata accessor for SDAirDropServerConnection);
      sub_1003E8564(1);
      sub_1001A4BC8(v26, type metadata accessor for SDAirDropServerConnection);
    }

    uint64_t v27 = *(void *)(v0 + 216);
    uint64_t v28 = *(void *)(v0 + 184) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_uploadConnection;
    swift_beginAccess(v28, v0 + 40, 0LL, 0LL);
    if (!v25(v28, 1LL, v27))
    {
      uint64_t v29 = *(void *)(v0 + 232);
      sub_1001A4B84(v28, v29, type metadata accessor for SDAirDropServerConnection);
      sub_1003E8564(0);
      sub_1001A4BC8(v29, type metadata accessor for SDAirDropServerConnection);
    }

    uint64_t v30 = *(void *)(v0 + 216);
    uint64_t v31 = *(void *)(v0 + 184) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_exchangeConnection;
    swift_beginAccess(v31, v0 + 64, 0LL, 0LL);
    if (!v25(v31, 1LL, v30))
    {
      uint64_t v32 = *(void *)(v0 + 232);
      sub_1001A4B84(v31, v32, type metadata accessor for SDAirDropServerConnection);
      sub_1003E8564(0);
      sub_1001A4BC8(v32, type metadata accessor for SDAirDropServerConnection);
    }

    uint64_t v34 = *(void *)(v0 + 200);
    uint64_t v33 = *(void *)(v0 + 208);
    uint64_t v35 = *(void *)(v0 + 192);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))( v33,  *(void *)(v0 + 184) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_handlerContinuation,  v35);
    *(_BYTE *)(v0 + 27sub_10018709C(v0 + 2) = 1;
    SFProgressContinuation.finish(with:)(v0 + 272, v35);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
  }

  uint64_t v37 = *(void *)(v0 + 184);
  uint64_t v38 = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_receiveCompressionAdapter;
  *(void *)(v0 + 248) = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_receiveCompressionAdapter;
  uint64_t v39 = *(void *)(v37 + v38);
  *(void *)(v0 + 256) = v39;
  if (v39)
  {
    uint64_t v40 = dword_1006456A4;
    swift_retain(v39);
    uint64_t v41 = (void *)swift_task_alloc(v40);
    *(void *)(v0 + 264) = v41;
    *uint64_t v41 = v0;
    v41[1] = sub_100420CC4;
    return sub_1001963D8();
  }

  else
  {
    uint64_t v43 = *(void *)(v0 + 232);
    uint64_t v44 = *(void *)(v0 + 208);
    *(void *)(v37 + v38) = 0LL;
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100420CC4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 256LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 240LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 264LL));
  swift_release(v1);
  return swift_task_switch(sub_100420D58, v2, 0LL);
}

uint64_t sub_100420D58()
{
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v2 + v1);
  uint64_t v4 = *(void *)(v0 + 232);
  uint64_t v5 = *(void *)(v0 + 208);
  *(void *)(v2 + v1) = 0LL;
  swift_release(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100420DE0(uint64_t a1)
{
  v2[8] = a1;
  void v2[9] = v1;
  unint64_t v3 = (*(void *)(*(void *)(sub_100183098(&qword_100650B48) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[10] = swift_task_alloc(v3);
  v2[11] = swift_task_alloc(v3);
  uint64_t v4 = type metadata accessor for CodableError(0LL);
  v2[12] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[13] = v5;
  v2[14] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for SFAirDropReceive.Failure(0LL);
  v2[15] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[16] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[17] = swift_task_alloc(v8);
  v2[18] = swift_task_alloc(v8);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v9 = static AirDropActor.shared;
  v2[19] = static AirDropActor.shared;
  return swift_task_switch(sub_100420EE0, v9, 0LL);
}

uint64_t sub_100420EE0()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[16];
  uint64_t v5 = v0[8];
  swift_errorRetain(v5);
  SFAirDropReceive.Failure.init(_:)(v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 88))(v1, v3);
  uint64_t v8 = v0[16];
  uint64_t v9 = v0[17];
  uint64_t v10 = v0[15];
  if (v6 != enum case for SFAirDropReceive.Failure.unexpected(_:))
  {
    (*(void (**)(void, uint64_t, __n128))(v8 + 8))(v0[17], v10, v7);
    goto LABEL_9;
  }

  uint64_t v12 = v0[13];
  uint64_t v11 = v0[14];
  uint64_t v13 = v0[12];
  (*(void (**)(void, uint64_t))(v8 + 96))(v0[17], v10);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v11, v9, v13);
  uint64_t v15 = CodableError.domain.getter(v14);
  uint64_t v17 = v16;
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NearbyPeerPaymentError");
  if (v15 == v19 && v17 == v18)
  {
    swift_bridgeObjectRelease_n(v17, 2LL);
  }

  else
  {
    uint64_t v21 = v18;
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v19, v18, 0LL);
    *(void *)&double v23 = swift_bridgeObjectRelease(v21).n128_u64[0];
    __n128 v24 = swift_bridgeObjectRelease(v17, v23);
    if ((v22 & 1) == 0)
    {
      (*(void (**)(void, void, __n128))(v0[13] + 8LL))(v0[14], v0[12], v24);
LABEL_9:
      uint64_t v25 = v0[10];
      uint64_t v26 = v0[9] + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_askConnection;
      swift_beginAccess(v26, v0 + 2, 0LL, 0LL);
      sub_1001915A4(v26, v25, &qword_100650B48);
      uint64_t v27 = (void *)swift_task_alloc(dword_100654E24);
      v0[21] = v27;
      *uint64_t v27 = v0;
      v27[1] = sub_100421228;
      return sub_1004232BC(v0[10]);
    }
  }

  uint64_t v29 = v0[11];
  uint64_t v30 = v0[9] + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_askConnection;
  swift_beginAccess(v30, v0 + 5, 0LL, 0LL);
  sub_1001915A4(v30, v29, &qword_100650B48);
  uint64_t v31 = (void *)swift_task_alloc(dword_100654E7C);
  v0[20] = v31;
  *uint64_t v31 = v0;
  v31[1] = sub_100421104;
  return sub_100426308(v0[11]);
}

uint64_t sub_100421104()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 160));
  uint64_t v3 = *(void *)(v2 + 152);
  uint64_t v4 = *(void *)(v2 + 88);
  if (v0)
  {
    swift_errorRelease(v0);
    sub_100187100(v4, &qword_100650B48);
    uint64_t v5 = sub_100429B80;
  }

  else
  {
    sub_100187100(v4, &qword_100650B48);
    uint64_t v5 = sub_10042119C;
  }

  return swift_task_switch(v5, v3, 0LL);
}

uint64_t sub_10042119C()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 88);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 128) + 8LL))(v2, *(void *)(v0 + 120));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100421228()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 168));
  uint64_t v3 = *(void *)(v2 + 152);
  uint64_t v4 = *(void *)(v2 + 80);
  if (v0)
  {
    swift_errorRelease(v0);
    sub_100187100(v4, &qword_100650B48);
    uint64_t v5 = sub_100429B84;
  }

  else
  {
    sub_100187100(v4, &qword_100650B48);
    uint64_t v5 = sub_1004212C0;
  }

  return swift_task_switch(v5, v3, 0LL);
}

uint64_t sub_1004212C0()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 88);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 128) + 8LL))(v2, *(void *)(v0 + 120));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10042133C(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for SDAirDropMessage(0LL);
  v2[7] = v3;
  v2[8] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100183098(&qword_100650B48);
  void v2[9] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for SDAirDropServerConnection(0LL);
  v2[10] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[11] = v6;
  v2[12] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v7 = static AirDropActor.shared;
  v2[13] = static AirDropActor.shared;
  return swift_task_switch(sub_100421418, v7, 0LL);
}

uint64_t sub_100421418()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 48) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_exchangeConnection;
  swift_beginAccess(v4, v0 + 16, 0LL, 0LL);
  sub_1001915A4(v4, v3, &qword_100650B48);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1LL, v1) == 1)
  {
    sub_100187100(*(void *)(v0 + 72), &qword_100650B48);
    if (qword_100644370 != -1) {
      swift_once(&qword_100644370, sub_10042322C);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    uint64_t v6 = sub_100186DE4(v5, (uint64_t)qword_100654D20);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "No exchange connection for exchange response!", v9, 2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    uint64_t v10 = type metadata accessor for SFAirDropReceive.Failure(0LL);
    uint64_t v11 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
    swift_allocError(v10, v11, 0LL, 0LL);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v10 - 8) + 104LL))( v12,  enum case for SFAirDropReceive.Failure.badRequest(_:),  v10);
    swift_willThrow(v13);
    uint64_t v15 = *(void *)(v0 + 64);
    uint64_t v14 = *(void *)(v0 + 72);
    swift_task_dealloc(*(void *)(v0 + 96));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v17 = *(void *)(v0 + 64);
    uint64_t v18 = *(void *)(v0 + 56);
    uint64_t v19 = *(void *)(v0 + 40);
    sub_1001A4B40(*(void *)(v0 + 72), *(void *)(v0 + 96), type metadata accessor for SDAirDropServerConnection);
    sub_1001A4B84(v19, v17, _s14descr1005DEB71C16ExchangeResponseVMa);
    swift_storeEnumTagMultiPayload(v17, v18, 9LL);
    uint64_t v20 = (void *)swift_task_alloc(dword_100653384);
    *(void *)(v0 + 11sub_10018709C(v0 + 2) = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_100421674;
    return sub_1003E89C8(*(void *)(v0 + 64));
  }

uint64_t sub_100421674()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 112);
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void *)(v2 + 104);
  sub_1001A4BC8(*(void *)(v2 + 64), type metadata accessor for SDAirDropMessage);
  if (v0) {
    uint64_t v5 = sub_1004219F8;
  }
  else {
    uint64_t v5 = sub_1004216F4;
  }
  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_1004216F4(uint64_t a1, uint64_t a2)
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong( *(void *)(v2 + 48) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_delegate,  a2);
  *(void *)(v2 + 128) = Strong;
  if (Strong)
  {
    uint64_t v4 = *(void *)(v2 + 48) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_serverConnectionIdentity;
    uint64_t v5 = (void *)swift_task_alloc(dword_10064973C);
    *(void *)(v2 + 136) = v5;
    *uint64_t v5 = v2;
    v5[1] = sub_10042187C;
    return sub_10022EC74(v4, 0LL);
  }

  else
  {
    if (qword_100644370 != -1) {
      swift_once(&qword_100644370, sub_10042322C);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    uint64_t v8 = sub_100186DE4(v7, (uint64_t)qword_100654D20);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Cancelling EXCHANGE connection", v11, 2u);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    uint64_t v12 = *(void *)(v2 + 96);
    uint64_t v14 = *(void *)(v2 + 64);
    uint64_t v13 = *(void *)(v2 + 72);

    sub_1003E8564(0);
    sub_1001A4BC8(v12, type metadata accessor for SDAirDropServerConnection);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v2 + 8))();
  }

uint64_t sub_10042187C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 128LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 104LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 136LL));
  swift_unknownObjectRelease(v1);
  return swift_task_switch(sub_1004218DC, v2, 0LL);
}

uint64_t sub_1004218DC()
{
  if (qword_100644370 != -1) {
    swift_once(&qword_100644370, sub_10042322C);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_100654D20);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Cancelling EXCHANGE connection", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 96);
  uint64_t v8 = *(void *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 72);

  sub_1003E8564(0);
  sub_1001A4BC8(v6, type metadata accessor for SDAirDropServerConnection);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004219F8()
{
  if (qword_100644370 != -1) {
    swift_once(&qword_100644370, sub_10042322C);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_100654D20);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Cancelling EXCHANGE connection", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 96);

  sub_1003E8564(0);
  sub_1001A4BC8(v6, type metadata accessor for SDAirDropServerConnection);
  uint64_t v8 = *(void *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 96));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100421B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 23sub_10018709C(v0 + 2) = a6;
  *(void *)(v7 + 240) = v6;
  *(void *)(v7 + 2swift_weakDestroy(v0 + 16) = a4;
  *(void *)(v7 + 224) = a5;
  *(void *)(v7 + 200) = a2;
  *(void *)(v7 + 208) = a3;
  *(void *)(v7 + 19sub_10018709C(v0 + 2) = a1;
  sub_100429B24(a1, v7 + 104);
  __int128 v8 = *(_OWORD *)(v7 + 128);
  *(_OWORD *)(v7 + 248) = *(_OWORD *)(v7 + 112);
  __int128 v9 = *(_OWORD *)(v7 + 144);
  *(_OWORD *)(v7 + 264) = v8;
  *(_OWORD *)(v7 + 280) = v9;
  uint64_t v10 = *(void *)(v7 + 176);
  *(void *)(v7 + 296) = *(void *)(v7 + 160);
  *(void *)(v7 + 304) = v10;
  uint64_t v11 = sub_100183098(&qword_100650B48);
  *(void *)(v7 + 31sub_10018709C(v0 + 2) = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SDAirDropServerConnection(0LL);
  *(void *)(v7 + 320) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v7 + 328) = v13;
  unint64_t v14 = (*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v7 + 336) = swift_task_alloc(v14);
  *(void *)(v7 + 344) = swift_task_alloc(v14);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v15 = static AirDropActor.shared;
  *(void *)(v7 + 35sub_10018709C(v0 + 2) = static AirDropActor.shared;
  return swift_task_switch(sub_100421C14, v15, 0LL);
}

uint64_t sub_100421C14()
{
  uint64_t v1 = *(void *)(v0 + 88);
  *(void *)(v0 + 360) = v1;
  if (!v1) {
    goto LABEL_4;
  }
  uint64_t v2 = *(void *)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 328);
  uint64_t v4 = *(void *)(v0 + 312);
  uint64_t v5 = *(void *)(v0 + 232);
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v6 = *(const char **)(v0 + 24);
  __int128 v8 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 368) = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 384) = v8;
  *(_OWORD *)(v0 + 400) = *(_OWORD *)(v0 + 64);
  uint64_t v9 = *(void *)(v0 + 96);
  *(void *)(v0 + 4sub_100429B24(*(void *)(v0 + 192), v0 + 16) = *(void *)(v0 + 80);
  *(void *)(v0 + 424) = v9;
  sub_1001915A4(v5, v4, &qword_100650B48);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1LL, v2) == 1)
  {
    sub_100187100(*(void *)(v0 + 312), &qword_100650B48);
LABEL_4:
    uint64_t v10 = type metadata accessor for SFAirDropReceive.Failure(0LL);
    uint64_t v11 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
    swift_allocError(v10, v11, 0LL, 0LL);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v10 - 8) + 104LL))( v12,  enum case for SFAirDropReceive.Failure.badRequest(_:),  v10);
    swift_willThrow(v13);
LABEL_5:
    uint64_t v14 = *(void *)(v0 + 336);
    uint64_t v15 = *(void *)(v0 + 312);
    swift_task_dealloc(*(void *)(v0 + 344));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v17 = *(void *)(v0 + 224);
  sub_1001A4B40(*(void *)(v0 + 312), *(void *)(v0 + 344), type metadata accessor for SDAirDropServerConnection);
  if (v17)
  {
    sub_10025F56C( *(void **)(v0 + 192),  (void (*)(void, void, void, void, void, void, void, void, void, void, void))sub_10025F43C);
    if (v6)
    {
      uint64_t v19 = *(void *)(v0 + 216);
      uint64_t v18 = *(const char **)(v0 + 224);
      else {
        uint64_t v20 = v7 & 0xFFFFFFFFFFFFLL;
      }
      swift_bridgeObjectRetain(v6);
      if (v20)
      {
        *(void *)(v0 + 600) = v18;
        *(void *)(v0 + 59sub_10018709C(v0 + 2) = v6;
        *(void *)(v0 + 584) = v6;
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v6);
        if (v18)
        {
          int v46 = (char *)&dword_100649B38 + dword_100649B38;
          uint64_t v21 = (void *)swift_task_alloc(unk_100649B3C);
          *(void *)(v0 + 608) = v21;
          *uint64_t v21 = v0;
          v21[1] = sub_1004230A8;
          __asm { BR              X8; sub_1002409FC }
        }

        swift_bridgeObjectRelease(v6);
        if (qword_100644370 != -1) {
          swift_once(&qword_100644370, sub_10042322C);
        }
        uint64_t v38 = type metadata accessor for Logger(0LL);
        uint64_t v39 = sub_100186DE4(v38, (uint64_t)qword_100654D20);
        uint64_t v33 = (os_log_s *)Logger.logObject.getter(v39);
        os_log_type_t v34 = static os_log_type_t.error.getter(v33);
        if (!os_log_type_enabled(v33, v34)) {
          goto LABEL_28;
        }
        uint64_t v35 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v35 = 0;
        uint64_t v36 = "Missing appleID/contactID for IDENTITY-SHARE";
LABEL_27:
        _os_log_impl((void *)&_mh_execute_header, v33, v34, v36, v35, 2u);
        swift_slowDealloc(v35, -1LL, -1LL);
LABEL_28:
        uint64_t v40 = *(void *)(v0 + 344);
        uint64_t v41 = *(void **)(v0 + 192);

        uint64_t v42 = type metadata accessor for SFAirDropReceive.Failure(0LL);
        uint64_t v43 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
        swift_allocError(v42, v43, 0LL, 0LL);
        uint64_t v45 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v42 - 8) + 104LL))( v44,  enum case for SFAirDropReceive.Failure.badRequest(_:),  v42);
        swift_willThrow(v45);
        sub_10025F56C( v41,  (void (*)(void, void, void, void, void, void, void, void, void, void, void))sub_10025F4D4);
        sub_1001A4BC8(v40, type metadata accessor for SDAirDropServerConnection);
        swift_bridgeObjectRelease(v6);
        goto LABEL_5;
      }

      swift_bridgeObjectRetain(v18);
    }

    else
    {
      uint64_t v18 = *(const char **)(v0 + 224);
      swift_bridgeObjectRetain(v18);
      uint64_t v19 = *(void *)(v0 + 216);
    }

    *(void *)(v0 + 544) = v6;
    *(void *)(v0 + 536) = v18;
    *(void *)(v0 + 528) = v19;
    unint64_t v30 = *(void *)(v0 + 208);
    if (v30 >> 60 == 15)
    {
      swift_bridgeObjectRelease(v18);
      if (qword_100644370 != -1) {
        swift_once(&qword_100644370, sub_10042322C);
      }
      uint64_t v31 = type metadata accessor for Logger(0LL);
      uint64_t v32 = sub_100186DE4(v31, (uint64_t)qword_100654D20);
      uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
      os_log_type_t v34 = static os_log_type_t.error.getter(v33);
      if (!os_log_type_enabled(v33, v34)) {
        goto LABEL_28;
      }
      uint64_t v35 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v35 = 0;
      uint64_t v36 = "Missing vCardData to resolve missing appleID";
      goto LABEL_27;
    }

    sub_1001A4C04(*(void *)(v0 + 200), v30);
    int v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100649B40 + dword_100649B40);
    uint64_t v37 = (void *)swift_task_alloc(unk_100649B44);
    *(void *)(v0 + 55sub_10018709C(v0 + 2) = v37;
    *uint64_t v37 = v0;
    v37[1] = sub_100422D24;
    return v47(*(void *)(v0 + 200), *(void *)(v0 + 208), 0LL, 0LL);
  }

  else
  {
    unint64_t v22 = *(void *)(v0 + 296);
    double v23 = *(const char **)(v0 + 304);
    unint64_t v25 = *(void *)(v0 + 280);
    uint64_t v24 = *(void *)(v0 + 288);
    unint64_t v27 = *(void *)(v0 + 264);
    uint64_t v26 = *(void *)(v0 + 272);
    uint64_t v28 = *(const char **)(v0 + 248);
    uint64_t v29 = *(void *)(v0 + 256);
    *(void *)(v0 + 43sub_10018709C(v0 + 2) = *(void *)(*(void *)(v0 + 240)
                                      + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_deviceStatus);
    swift_bridgeObjectRetain(v28);
    sub_1001A4C04(v29, v27);
    sub_10019BA8C(v26, v25);
    sub_10019BA8C(v24, v22);
    swift_bridgeObjectRetain(v23);
    return swift_task_switch(sub_100422144, 0LL, 0LL);
  }

uint64_t sub_100422144()
{
  if (*(void *)(v0 + 376) >> 60 == 15LL)
  {
    uint64_t v1 = *(void *)(v0 + 352);
    uint64_t v2 = sub_100422324;
  }

  else
  {
    uint64_t v3 = *(void *)(v0 + 336);
    uint64_t v4 = *(void *)(v0 + 320);
    sub_1001A4B84(*(void *)(v0 + 344), v3, type metadata accessor for SDAirDropServerConnection);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v3, v4);
    if (EnumCaseMultiPayload)
    {
      uint64_t v6 = *(void **)(v0 + 432);
      uint64_t v8 = *(void *)(v0 + 368);
      unint64_t v7 = *(void *)(v0 + 376);
      uint64_t v9 = *(void *)(v0 + 352);
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v10 = *(void *)(v0 + 336);
        sub_10019BA8C(*(void *)(v0 + 368), *(void *)(v0 + 376));
        sub_1001A4BC8(v10, type metadata accessor for SDAirDropServerConnection);
        *(void *)(v0 + 480) = sub_1002E0C5C(v6);
        *(void *)(v0 + 488) = v11;
        *(void *)(v0 + 496) = v12;
        sub_100189B0C(v8, v7);
        uint64_t v2 = sub_1004228CC;
      }

      else
      {
        uint64_t v18 = *(uint64_t **)(v0 + 336);
        uint64_t v19 = *v18;
        sub_10019BA8C(*(void *)(v0 + 368), *(void *)(v0 + 376));
        swift_release(v19);
        uint64_t v20 = (char *)v18 + *(int *)(sub_100183098(&qword_100649710) + 48);
        *(void *)(v0 + 504) = sub_1002E0C5C(v6);
        *(void *)(v0 + 51sub_10018709C(v0 + 2) = v21;
        *(void *)(v0 + 520) = v22;
        sub_100189B0C(v8, v7);
        uint64_t v23 = type metadata accessor for UUID(0LL);
        (*(void (**)(char *, uint64_t))(*(void *)(v23 - 8) + 8LL))(v20, v23);
        uint64_t v2 = sub_100422AF8;
      }
    }

    else
    {
      uint64_t v13 = *(void **)(v0 + 432);
      uint64_t v15 = *(void *)(v0 + 368);
      unint64_t v14 = *(void *)(v0 + 376);
      uint64_t v9 = *(void *)(v0 + 352);
      uint64_t v16 = **(void **)(v0 + 336);
      sub_10019BA8C(v15, v14);
      sub_1002E10F8(v13, (uint64_t *)v25);
      __int128 v17 = v25[1];
      *(_OWORD *)(v0 + 440) = v25[0];
      *(_OWORD *)(v0 + 456) = v17;
      *(void *)(v0 + 47sub_10018709C(v0 + 2) = v26;
      swift_release(v16);
      sub_100189B0C(v15, v14);
      uint64_t v2 = sub_100422548;
    }

    uint64_t v1 = v9;
  }

  return swift_task_switch(v2, v1, 0LL);
}

uint64_t sub_100422324()
{
  *(void *)(v0 + 544) = 0LL;
  *(_OWORD *)(v0 + 528) = 0u;
  unint64_t v1 = *(void *)(v0 + 208);
  if (v1 >> 60 == 15)
  {
    swift_bridgeObjectRelease(0LL);
    if (qword_100644370 != -1) {
      swift_once(&qword_100644370, sub_10042322C);
    }
    uint64_t v2 = type metadata accessor for Logger(0LL);
    uint64_t v3 = sub_100186DE4(v2, (uint64_t)qword_100654D20);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing vCardData to resolve missing appleID", v6, 2u);
      swift_slowDealloc(v6, -1LL, -1LL);
    }

    uint64_t v7 = *(void *)(v0 + 344);
    uint64_t v8 = *(void **)(v0 + 192);

    uint64_t v9 = type metadata accessor for SFAirDropReceive.Failure(0LL);
    uint64_t v10 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
    swift_allocError(v9, v10, 0LL, 0LL);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v9 - 8) + 104LL))( v11,  enum case for SFAirDropReceive.Failure.badRequest(_:),  v9);
    swift_willThrow(v12);
    sub_10025F56C( v8,  (void (*)(void, void, void, void, void, void, void, void, void, void, void))sub_10025F4D4);
    sub_1001A4BC8(v7, type metadata accessor for SDAirDropServerConnection);
    swift_bridgeObjectRelease(0LL);
    uint64_t v13 = *(void *)(v0 + 336);
    uint64_t v14 = *(void *)(v0 + 312);
    swift_task_dealloc(*(void *)(v0 + 344));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    sub_1001A4C04(*(void *)(v0 + 200), v1);
    __int128 v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100649B40 + dword_100649B40);
    uint64_t v16 = (void *)swift_task_alloc(unk_100649B44);
    *(void *)(v0 + 55sub_10018709C(v0 + 2) = v16;
    *uint64_t v16 = v0;
    v16[1] = sub_100422D24;
    return v17(*(void *)(v0 + 200), *(void *)(v0 + 208), 0LL, 0LL);
  }

uint64_t sub_100422548()
{
  uint64_t v1 = *(void *)(v0 + 448);
  *(void *)&double v2 = swift_bridgeObjectRelease((const char *)*(void *)(v0 + 472)).n128_u64[0];
  if (v1)
  {
    uint64_t v4 = *(void *)(v0 + 456);
    uint64_t v3 = *(const char **)(v0 + 464);
    os_log_type_t v5 = *(const char **)(v0 + 448);
    uint64_t v6 = ((unint64_t)v5 >> 56) & 0xF;
    uint64_t v7 = *(const char **)(v0 + 224);
    if (v6)
    {
      *(void *)(v0 + 600) = v3;
      *(void *)(v0 + 59sub_10018709C(v0 + 2) = v5;
      *(void *)(v0 + 584) = v5;
      swift_bridgeObjectRetain(v7, v2);
      swift_bridgeObjectRetain(v5);
      if (v3)
      {
        uint64_t v28 = (char *)&dword_100649B38 + dword_100649B38;
        uint64_t v8 = (void *)swift_task_alloc(unk_100649B3C);
        *(void *)(v0 + 608) = v8;
        *uint64_t v8 = v0;
        v8[1] = sub_1004230A8;
        __asm { BR              X8; sub_1002409FC }
      }

      swift_bridgeObjectRelease(v5);
      if (qword_100644370 != -1) {
        swift_once(&qword_100644370, sub_10042322C);
      }
      uint64_t v18 = type metadata accessor for Logger(0LL);
      uint64_t v19 = sub_100186DE4(v18, (uint64_t)qword_100654D20);
      uint64_t v12 = (os_log_s *)Logger.logObject.getter(v19);
      os_log_type_t v13 = static os_log_type_t.error.getter(v12);
      if (!os_log_type_enabled(v12, v13)) {
        goto LABEL_20;
      }
      uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v14 = 0;
      uint64_t v15 = "Missing appleID/contactID for IDENTITY-SHARE";
      goto LABEL_19;
    }

    swift_bridgeObjectRetain(v7, v2);
  }

  else
  {
    os_log_type_t v5 = 0LL;
    uint64_t v4 = *(void *)(v0 + 456);
    uint64_t v3 = *(const char **)(v0 + 464);
  }

  *(void *)(v0 + 544) = v5;
  *(void *)(v0 + 536) = v3;
  *(void *)(v0 + 528) = v4;
  unint64_t v9 = *(void *)(v0 + 208);
  if (v9 >> 60 != 15)
  {
    sub_1001A4C04(*(void *)(v0 + 200), v9);
    uint64_t v29 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100649B40 + dword_100649B40);
    uint64_t v16 = (void *)swift_task_alloc(unk_100649B44);
    *(void *)(v0 + 55sub_10018709C(v0 + 2) = v16;
    *uint64_t v16 = v0;
    v16[1] = sub_100422D24;
    return v29(*(void *)(v0 + 200), *(void *)(v0 + 208), 0LL, 0LL);
  }

  swift_bridgeObjectRelease(v3, v2);
  if (qword_100644370 != -1) {
    swift_once(&qword_100644370, sub_10042322C);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = sub_100186DE4(v10, (uint64_t)qword_100654D20);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.error.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v14 = 0;
    uint64_t v15 = "Missing vCardData to resolve missing appleID";
LABEL_19:
    _os_log_impl((void *)&_mh_execute_header, v12, v13, v15, v14, 2u);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

uint64_t sub_1004228CC()
{
  *(void *)&double v1 = swift_bridgeObjectRelease((const char *)*(void *)(v0 + 496)).n128_u64[0];
  uint64_t v3 = *(void *)(v0 + 480);
  double v2 = *(const char **)(v0 + 488);
  *(void *)(v0 + 544) = 0LL;
  *(void *)(v0 + 536) = v2;
  *(void *)(v0 + 528) = v3;
  unint64_t v4 = *(void *)(v0 + 208);
  if (v4 >> 60 == 15)
  {
    swift_bridgeObjectRelease(v2, v1);
    if (qword_100644370 != -1) {
      swift_once(&qword_100644370, sub_10042322C);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    uint64_t v6 = sub_100186DE4(v5, (uint64_t)qword_100654D20);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      unint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Missing vCardData to resolve missing appleID", v9, 2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    uint64_t v10 = *(void *)(v0 + 344);
    uint64_t v11 = *(void **)(v0 + 192);

    uint64_t v12 = type metadata accessor for SFAirDropReceive.Failure(0LL);
    uint64_t v13 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
    swift_allocError(v12, v13, 0LL, 0LL);
    uint64_t v15 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v12 - 8) + 104LL))( v14,  enum case for SFAirDropReceive.Failure.badRequest(_:),  v12);
    swift_willThrow(v15);
    sub_10025F56C( v11,  (void (*)(void, void, void, void, void, void, void, void, void, void, void))sub_10025F4D4);
    sub_1001A4BC8(v10, type metadata accessor for SDAirDropServerConnection);
    swift_bridgeObjectRelease(0LL);
    uint64_t v16 = *(void *)(v0 + 336);
    uint64_t v17 = *(void *)(v0 + 312);
    swift_task_dealloc(*(void *)(v0 + 344));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    sub_1001A4C04(*(void *)(v0 + 200), v4);
    uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100649B40 + dword_100649B40);
    uint64_t v19 = (void *)swift_task_alloc(unk_100649B44);
    *(void *)(v0 + 55sub_10018709C(v0 + 2) = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_100422D24;
    return v20(*(void *)(v0 + 200), *(void *)(v0 + 208), 0LL, 0LL);
  }

uint64_t sub_100422AF8()
{
  *(void *)&double v1 = swift_bridgeObjectRelease((const char *)*(void *)(v0 + 520)).n128_u64[0];
  uint64_t v3 = *(void *)(v0 + 504);
  double v2 = *(const char **)(v0 + 512);
  *(void *)(v0 + 544) = 0LL;
  *(void *)(v0 + 536) = v2;
  *(void *)(v0 + 528) = v3;
  unint64_t v4 = *(void *)(v0 + 208);
  if (v4 >> 60 == 15)
  {
    swift_bridgeObjectRelease(v2, v1);
    if (qword_100644370 != -1) {
      swift_once(&qword_100644370, sub_10042322C);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    uint64_t v6 = sub_100186DE4(v5, (uint64_t)qword_100654D20);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      unint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Missing vCardData to resolve missing appleID", v9, 2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    uint64_t v10 = *(void *)(v0 + 344);
    uint64_t v11 = *(void **)(v0 + 192);

    uint64_t v12 = type metadata accessor for SFAirDropReceive.Failure(0LL);
    uint64_t v13 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
    swift_allocError(v12, v13, 0LL, 0LL);
    uint64_t v15 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v12 - 8) + 104LL))( v14,  enum case for SFAirDropReceive.Failure.badRequest(_:),  v12);
    swift_willThrow(v15);
    sub_10025F56C( v11,  (void (*)(void, void, void, void, void, void, void, void, void, void, void))sub_10025F4D4);
    sub_1001A4BC8(v10, type metadata accessor for SDAirDropServerConnection);
    swift_bridgeObjectRelease(0LL);
    uint64_t v16 = *(void *)(v0 + 336);
    uint64_t v17 = *(void *)(v0 + 312);
    swift_task_dealloc(*(void *)(v0 + 344));
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    sub_1001A4C04(*(void *)(v0 + 200), v4);
    uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_100649B40 + dword_100649B40);
    uint64_t v19 = (void *)swift_task_alloc(unk_100649B44);
    *(void *)(v0 + 55sub_10018709C(v0 + 2) = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_100422D24;
    return v20(*(void *)(v0 + 200), *(void *)(v0 + 208), 0LL, 0LL);
  }

uint64_t sub_100422D24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v3;
  uint64_t v5 = *(void *)(*v3 + 552);
  *(void *)(v4 + 560) = a1;
  *(void *)(v4 + 568) = a2;
  *(void *)(v4 + 576) = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    uint64_t v6 = *(void *)(v4 + 352);
    swift_bridgeObjectRelease(*(const char **)(v4 + 536));
    uint64_t v7 = sub_10042301C;
    uint64_t v8 = v6;
  }

  else
  {
    uint64_t v8 = *(void *)(v4 + 352);
    uint64_t v7 = sub_100422DA8;
  }

  return swift_task_switch(v7, v8, 0LL);
}

uint64_t sub_100422DA8()
{
  double v1 = *(const char **)(v0 + 568);
  uint64_t v2 = *(const char **)(v0 + 544);
  sub_100189B0C(*(void *)(v0 + 200), *(void *)(v0 + 208));
  *(void *)&double v3 = swift_bridgeObjectRelease(v2).n128_u64[0];
  if (v1)
  {
    double v1 = *(const char **)(v0 + 568);
    uint64_t v4 = *(void *)(v0 + 536);
    *(void *)(v0 + 600) = v4;
    *(void *)(v0 + 59sub_10018709C(v0 + 2) = v1;
    *(void *)(v0 + 584) = v1;
    swift_bridgeObjectRetain(v1, v3);
    if (v4)
    {
      uint64_t v21 = (char *)&dword_100649B38 + dword_100649B38;
      uint64_t v6 = (void *)swift_task_alloc(unk_100649B3C);
      *(void *)(v0 + 608) = v6;
      *uint64_t v6 = v0;
      v6[1] = sub_1004230A8;
      __asm { BR              X8; sub_1002409FC }
    }

    swift_bridgeObjectRelease(v1, v5);
  }

  else
  {
    swift_bridgeObjectRelease(*(const char **)(v0 + 536), v3);
  }

  if (qword_100644370 != -1) {
    swift_once(&qword_100644370, sub_10042322C);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = sub_100186DE4(v7, (uint64_t)qword_100654D20);
  unint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.error.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Missing appleID/contactID for IDENTITY-SHARE", v11, 2u);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  uint64_t v12 = *(void *)(v0 + 344);
  uint64_t v13 = *(void **)(v0 + 192);

  uint64_t v14 = type metadata accessor for SFAirDropReceive.Failure(0LL);
  uint64_t v15 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
  swift_allocError(v14, v15, 0LL, 0LL);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v14 - 8) + 104LL))( v16,  enum case for SFAirDropReceive.Failure.badRequest(_:),  v14);
  swift_willThrow(v17);
  sub_10025F56C( v13,  (void (*)(void, void, void, void, void, void, void, void, void, void, void))sub_10025F4D4);
  sub_1001A4BC8(v12, type metadata accessor for SDAirDropServerConnection);
  swift_bridgeObjectRelease(v1);
  uint64_t v18 = *(void *)(v0 + 336);
  uint64_t v19 = *(void *)(v0 + 312);
  swift_task_dealloc(*(void *)(v0 + 344));
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10042301C()
{
  double v1 = *(const char **)(v0 + 544);
  uint64_t v2 = *(void *)(v0 + 344);
  double v3 = *(void **)(v0 + 192);
  sub_100189B0C(*(void *)(v0 + 200), *(void *)(v0 + 208));
  sub_10025F56C( v3,  (void (*)(void, void, void, void, void, void, void, void, void, void, void))sub_10025F4D4);
  sub_1001A4BC8(v2, type metadata accessor for SDAirDropServerConnection);
  swift_bridgeObjectRelease(v1);
  uint64_t v4 = *(void *)(v0 + 336);
  uint64_t v5 = *(void *)(v0 + 312);
  swift_task_dealloc(*(void *)(v0 + 344));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004230A8()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 608LL);
  *(void *)(*(void *)v1 + 616LL) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = (const char *)v2[75];
  uint64_t v5 = (const char *)v2[73];
  uint64_t v6 = v2[44];
  *(void *)&double v7 = swift_bridgeObjectRelease(v5).n128_u64[0];
  swift_bridgeObjectRelease(v4, v7);
  if (v0) {
    uint64_t v8 = sub_1004231AC;
  }
  else {
    uint64_t v8 = sub_10042312C;
  }
  return swift_task_switch(v8, v6, 0LL);
}

uint64_t sub_10042312C()
{
  uint64_t v1 = *(const char **)(v0 + 592);
  uint64_t v3 = *(void *)(v0 + 336);
  uint64_t v2 = *(void *)(v0 + 344);
  uint64_t v4 = *(void *)(v0 + 312);
  sub_10025F56C( *(void **)(v0 + 192),  (void (*)(void, void, void, void, void, void, void, void, void, void, void))sub_10025F4D4);
  sub_1001A4BC8(v2, type metadata accessor for SDAirDropServerConnection);
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004231AC()
{
  uint64_t v1 = *(const char **)(v0 + 592);
  uint64_t v2 = *(void *)(v0 + 344);
  sub_10025F56C( *(void **)(v0 + 192),  (void (*)(void, void, void, void, void, void, void, void, void, void, void))sub_10025F4D4);
  sub_1001A4BC8(v2, type metadata accessor for SDAirDropServerConnection);
  swift_bridgeObjectRelease(v1);
  uint64_t v3 = *(void *)(v0 + 336);
  uint64_t v4 = *(void *)(v0 + 312);
  swift_task_dealloc(*(void *)(v0 + 344));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10042322C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_100186DFC(v0, qword_100654D20);
  uint64_t v1 = sub_100186DE4(v0, (uint64_t)qword_100654D20);
  if (qword_100643FD8 != -1) {
    swift_once(&qword_100643FD8, sub_10023A408);
  }
  uint64_t v2 = sub_100186DE4(v0, (uint64_t)qword_1006695F8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_1004232BC(uint64_t a1)
{
  v2[2] = a1;
  void v2[3] = v1;
  uint64_t v3 = sub_100183098(&qword_100650B48);
  v2[4] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for SDAirDropServerConnection(0LL);
  v2[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[6] = v5;
  v2[7] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v6 = static AirDropActor.shared;
  v2[8] = static AirDropActor.shared;
  return swift_task_switch(sub_100423374, v6, 0LL);
}

uint64_t sub_100423374()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 32);
  sub_1001915A4(*(void *)(v0 + 16), v3, &qword_100650B48);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1LL, v1) == 1)
  {
    sub_100187100(*(void *)(v0 + 32), &qword_100650B48);
    if (qword_100644370 != -1) {
      swift_once(&qword_100644370, sub_10042322C);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_100186DE4(v4, (uint64_t)qword_100654D20);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing connection", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    uint64_t v9 = *(void *)(v0 + 32);
    swift_task_dealloc(*(void *)(v0 + 56));
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    sub_1001A4B40(*(void *)(v0 + 32), *(void *)(v0 + 56), type metadata accessor for SDAirDropServerConnection);
    uint64_t v11 = (void *)swift_task_alloc(dword_10065338C);
    *(void *)(v0 + 7sub_10018709C(v0 + 2) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_1004234FC;
    return sub_1003E8EB4();
  }

uint64_t sub_1004234FC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 72);
  *(void *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))sub_100429B88;
  }
  else {
    uint64_t v4 = sub_100423560;
  }
  return swift_task_switch(v4, *(void *)(v2 + 64), 0LL);
}

uint64_t sub_100423560(uint64_t a1, uint64_t a2)
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong( *(void *)(v2 + 24) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_delegate,  a2);
  *(void *)(v2 + 88) = Strong;
  if (Strong)
  {
    uint64_t v4 = *(void *)(v2 + 24) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_serverConnectionIdentity;
    uint64_t v5 = (void *)swift_task_alloc(dword_10064973C);
    *(void *)(v2 + 96) = v5;
    *uint64_t v5 = v2;
    v5[1] = sub_100423618;
    return sub_10022EC74(v4, 0LL);
  }

  else
  {
    sub_1001A4BC8(*(void *)(v2 + 56), type metadata accessor for SDAirDropServerConnection);
    uint64_t v7 = *(void *)(v2 + 32);
    swift_task_dealloc(*(void *)(v2 + 56));
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v2 + 8))();
  }

uint64_t sub_100423618()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 64LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 96LL));
  swift_unknownObjectRelease(v1);
  return swift_task_switch(sub_100429B74, v2, 0LL);
}

uint64_t sub_100423678(uint64_t a1, uint64_t a2)
{
  v2[20] = a1;
  v2[21] = a2;
  uint64_t v3 = type metadata accessor for SDAirDropMessage(0LL);
  v2[22] = v3;
  v2[23] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v4 = static AirDropActor.shared;
  v2[24] = static AirDropActor.shared;
  return swift_task_switch(sub_100423708, v4, 0LL);
}

uint64_t sub_100423708()
{
  if (qword_100644370 != -1) {
    swift_once(&qword_100644370, sub_10042322C);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_100186DE4(v1, (uint64_t)qword_100654D20);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Sending non-contact response, finish DISCOVER", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 160);

  uint64_t v7 = *(void **)(v6 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_deviceStatus);
  if ((sub_1002DF104() & 1) != 0
    && (id v8 = [v7 someComputerName]) != 0)
  {
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v12 = v11;
  }

  else
  {
    uint64_t v10 = 0LL;
    uint64_t v12 = 0LL;
  }

  *(_OWORD *)(v0 + sub_100429B24(*(void *)(v0 + 192), v0 + 16) = xmmword_1004CD540;
  *(void *)(v0 + 3sub_10018709C(v0 + 2) = v10;
  *(void *)(v0 + 40) = v12;
  *(_OWORD *)(v0 + 48) = xmmword_1004CD540;
  *(void *)(v0 + 7sub_10018709C(v0 + 2) = 0LL;
  *(void *)(v0 + 80) = 0LL;
  *(void *)(v0 + 64) = 0LL;
  *(_OWORD *)(v0 + 88) = xmmword_1004DB760;
  *(void *)(v0 + 104) = 0xF000000000000000LL;
  *(void *)(v0 + 11sub_10018709C(v0 + 2) = 0LL;
  *(void *)(v0 + 120) = 0LL;
  *(void *)(v0 + 128) = 0LL;
  *(_BYTE *)(v0 + 136) = 1;
  *(void *)(v0 + 144) = 0LL;
  *(void *)(v0 + 15sub_10018709C(v0 + 2) = 0LL;
  uint64_t v13 = static AirDropActor.shared;
  *(void *)(v0 + 200) = static AirDropActor.shared;
  return swift_task_switch(sub_100423890, v13, 0LL);
}

uint64_t sub_100423890()
{
  uint64_t v2 = v0[22];
  uint64_t v1 = (void *)v0[23];
  memmove(v1, v0 + 2, 0x90uLL);
  swift_storeEnumTagMultiPayload(v1, v2, 3LL);
  sub_1002650C0(v0 + 2);
  uint64_t v3 = (void *)swift_task_alloc(dword_100653384);
  v0[26] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100423918;
  return sub_1003E89C8(v0[23]);
}

uint64_t sub_100423918()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 208);
  uint64_t v4 = *(void *)(*v1 + 184);
  *(void *)(*v1 + 2sub_100429B24(*(void *)(v0 + 192), v0 + 16) = v0;
  swift_task_dealloc(v3);
  sub_1001A4BC8(v4, type metadata accessor for SDAirDropMessage);
  if (v0) {
    uint64_t v5 = sub_100423A8C;
  }
  else {
    uint64_t v5 = sub_100423998;
  }
  return swift_task_switch(v5, *(void *)(v2 + 200), 0LL);
}

uint64_t sub_100423998(uint64_t a1, uint64_t a2)
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong( v2[20] + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_delegate,  a2);
  v2[28] = Strong;
  if (!Strong) {
    return swift_task_switch(sub_100423AE0, v2[24], 0LL);
  }
  uint64_t v4 = v2[20] + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_serverConnectionIdentity;
  uint64_t v5 = (void *)swift_task_alloc(dword_10064973C);
  v2[29] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100423A34;
  return sub_10022EC74(v4, 0LL);
}

uint64_t sub_100423A34()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 224);
  swift_task_dealloc(*(void *)(*v0 + 232));
  swift_unknownObjectRelease(v2);
  return swift_task_switch(sub_100423AE0, *(void *)(v1 + 192), 0LL);
}

uint64_t sub_100423A8C()
{
  return swift_task_switch(sub_100423AA0, *(void *)(v0 + 192), 0LL);
}

uint64_t sub_100423AA0()
{
  uint64_t v1 = *(void *)(v0 + 184);
  sub_100265178((uint64_t *)(v0 + 16));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100423AE0()
{
  uint64_t v1 = *(void *)(v0 + 184);
  sub_100265178((uint64_t *)(v0 + 16));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100423B20(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  uint64_t v4 = sub_100183098(&qword_1006475B8);
  v3[8] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = _s14descr1005DF7D1C10AskRequestVMa(0LL);
  void v3[9] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[10] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[11] = swift_task_alloc(v7);
  v3[12] = swift_task_alloc(v7);
  v3[13] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for SDAirDropMessage(0LL);
  v3[14] = v8;
  v3[15] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v9 = (*(void *)(*(void *)(sub_100183098(&qword_100647608) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[16] = swift_task_alloc(v9);
  v3[17] = swift_task_alloc(v9);
  v3[18] = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for SFAirDropReceive.AcceptContext(0LL);
  v3[19] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[20] = v11;
  v3[21] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SFAirDropReceive.AskResponse(0LL);
  v3[22] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v3[23] = v13;
  unint64_t v14 = (*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[24] = swift_task_alloc(v14);
  v3[25] = swift_task_alloc(v14);
  if (qword_100643F28 != -1) {
    swift_once(&qword_100643F28, sub_100205C24);
  }
  uint64_t v15 = static AirDropActor.shared;
  v3[26] = static AirDropActor.shared;
  return swift_task_switch(sub_100423CBC, v15, 0LL);
}

uint64_t sub_100423CBC()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void (**)(uint64_t, void, uint64_t))(v3 + 104);
  v5(v1, enum case for SFAirDropReceive.AskResponse.decline(_:), v2);
  uint64_t v6 = sub_100183F14( &qword_100654E80,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.AskResponse,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.AskResponse);
  LOBYTE(v4) = dispatch thunk of static Equatable.== infix(_:_:)(v4, v1, v2, v6);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v7(v1, v2);
  if ((v4 & 1) != 0) {
    goto LABEL_4;
  }
  uint64_t v8 = *(void *)(v0 + 200);
  uint64_t v9 = *(void *)(v0 + 176);
  uint64_t v10 = *(void *)(v0 + 40);
  v5(v8, enum case for SFAirDropReceive.AskResponse.error(_:), v9);
  LOBYTE(v10) = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v9, v6);
  v7(v8, v9);
  if ((v10 & 1) != 0
    || (uint64_t v11 = *(void *)(v0 + 200),
        uint64_t v12 = *(void *)(v0 + 176),
        uint64_t v13 = *(void *)(v0 + 40),
        v5(v11, enum case for SFAirDropReceive.AskResponse.mixedTypes(_:), v12),
        char v14 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v11, v12, v6),
        v7(v11, v12),
        (v14 & 1) != 0))
  {
LABEL_4:
    if (qword_100644370 != -1) {
      swift_once(&qword_100644370, sub_10042322C);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    uint64_t v16 = sub_100186DE4(v15, (uint64_t)qword_100654D20);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "User did not accept request, invalidating connection",  v19,  2u);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    uint64_t v20 = *(void *)(v0 + 48);

    uint64_t v21 = type metadata accessor for SFAirDropReceive.Failure(0LL);
    uint64_t v22 = sub_100183F14( &qword_100649730,  (uint64_t (*)(uint64_t))&type metadata accessor for SFAirDropReceive.Failure,  (uint64_t)&protocol conformance descriptor for SFAirDropReceive.Failure);
    swift_allocError(v21, v22, 0LL, 0LL);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v21 - 8) + 104LL))( v23,  enum case for SFAirDropReceive.Failure.declined(_:),  v21);
    swift_willThrow(v24);
    sub_100424BF0(v20);
    uint64_t v25 = *(void *)(v0 + 192);
    uint64_t v26 = *(void *)(v0 + 168);
    uint64_t v28 = *(void *)(v0 + 136);
    uint64_t v27 = *(void *)(v0 + 144);
    uint64_t v30 = *(void *)(v0 + 120);
    uint64_t v29 = *(void *)(v0 + 128);
    uint64_t v32 = *(void *)(v0 + 96);
    uint64_t v31 = *(void *)(v0 + 104);
    uint64_t v33 = *(void *)(v0 + 88);
    uint64_t v93 = *(void *)(v0 + 64);
    swift_task_dealloc(*(void *)(v0 + 200));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v93);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v36 = *(void *)(v0 + 184);
  uint64_t v35 = *(void *)(v0 + 192);
  uint64_t v37 = *(void *)(v0 + 176);
  (*(void (**)(uint64_t, void, uint64_t))(v36 + 16))(v35, *(void *)(v0 + 40), v37);
  int v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 88))(v35, v37);
  uint64_t v39 = *(void *)(v0 + 192);
  if (v38 == enum case for SFAirDropReceive.AskResponse.accept(_:))
  {
    uint64_t v40 = *(void *)(v0 + 160);
    uint64_t v41 = *(void *)(v0 + 168);
    uint64_t v42 = *(void *)(v0 + 152);
    uint64_t v43 = *(void *)(v0 + 56);
    (*(void (**)(void, void))(*(void *)(v0 + 184) + 96LL))( *(void *)(v0 + 192),  *(void *)(v0 + 176));
    uint64_t v44 = sub_100183098(&qword_100646590);
    uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v41, v39 + *(int *)(v44 + 48), v42);
    *(_BYTE *)(v43 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_shouldExtractMedia) = SFAirDropReceive.AcceptContext.shouldExtractMedia.getter(v45) & 1;
    uint64_t v46 = SFAirDropReceive.AcceptContext.customPayload.getter();
    unint64_t v48 = v47;
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v42);
    uint64_t v49 = type metadata accessor for SFAirDropReceive.ItemDestination(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8LL))(v39, v49);
  }

  else
  {
    v7(*(void *)(v0 + 192), *(void *)(v0 + 176));
    uint64_t v46 = 0LL;
    unint64_t v48 = 0xF000000000000000LL;
  }

  *(void *)(v0 + 2sub_100429B24(*(void *)(v0 + 192), v0 + 16) = v46;
  *(void *)(v0 + 224) = v48;
  uint64_t v51 = *(void *)(v0 + 72);
  uint64_t v50 = *(void *)(v0 + 80);
  uint64_t v52 = *(void *)(v0 + 56);
  uint64_t v53 = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_askRequest;
  *(void *)(v0 + 23sub_10018709C(v0 + 2) = OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_askRequest;
  uint64_t v54 = v52 + v53;
  __n128 v55 = swift_beginAccess(v52 + v53, v0 + 16, 0LL, 0LL);
  uint64_t v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v50 + 48);
  *(void *)(v0 + 240) = v56;
  if (v56(v54, 1LL, v51, v55)) {
    goto LABEL_17;
  }
  uint64_t v57 = *(void *)(v0 + 144);
  sub_1001915A4(v54 + *(int *)(*(void *)(v0 + 72) + 20LL), v57, &qword_100647608);
  uint64_t v58 = type metadata accessor for SFAirDrop.TransferType(0LL);
  uint64_t v59 = *(void *)(v58 - 8);
  uint64_t v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v57, 1LL, v58);
  uint64_t v61 = *(void *)(v0 + 144);
  if ((_DWORD)v60 == 1)
  {
    sub_100187100(*(void *)(v0 + 144), &qword_100647608);
LABEL_17:
    uint64_t v67 = *(void *)(v0 + 56);
    uint64_t v65 = *(void *)(v67 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_idsSessionID);
    uint64_t v66 = *(const char **)(v67 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_idsSessionID + 8);
    swift_bridgeObjectRetain(v66);
    sub_10040AAB0();
    uint64_t v91 = v68;
    uint64_t v64 = v69;
    uint64_t v90 = sub_10040F588();
    uint64_t v63 = v70;
    goto LABEL_18;
  }

  char v62 = SFAirDrop.TransferType.isOnlyExchange.getter(v60);
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v61, v58);
  if ((v62 & 1) == 0) {
    goto LABEL_17;
  }
  uint64_t v90 = 0LL;
  uint64_t v91 = 0LL;
  uint64_t v63 = 0LL;
  uint64_t v64 = 0LL;
  uint64_t v65 = 0LL;
  uint64_t v66 = 0LL;
LABEL_18:
  *(void *)(v0 + 256) = v64;
  *(void *)(v0 + 264) = v66;
  *(void *)(v0 + 248) = v63;
  uint64_t v71 = *(void **)(*(void *)(v0 + 56) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_deviceStatus);
  id v72 = [v71 computerName];
  if (v72)
  {
    os_log_type_t v73 = v72;
    uint64_t v88 = v65;
    uint64_t v89 = v64;
    uint64_t v92 = v46;
    unint64_t v94 = v48;
    uint64_t v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
    id v75 = v74;

    *(void *)(v0 + 27sub_10018709C(v0 + 2) = v75;
    id v76 = [v71 modelName];
    if (v76)
    {
      uint64_t v77 = v76;
      uint64_t v79 = *(void *)(v0 + 112);
      uint64_t v78 = *(void *)(v0 + 120);
      uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
      uint64_t v82 = v81;

      *(void *)(v0 + 280) = v82;
      unint64_t v83 = sub_10025F338();
      uint64_t v84 = (void *)static NSUserDefaults.airdrop.getter(v83);
      char v85 = SFAirDropUserDefaults.contactShareAfterAirDropEnabled.getter();

      *(void *)uint64_t v78 = v87;
      *(void *)(v78 + 8) = v75;
      *(void *)(v78 + sub_100429B24(*(void *)(v0 + 192), v0 + 16) = v80;
      *(void *)(v78 + 24) = v82;
      *(_BYTE *)(v78 + 3sub_10018709C(v0 + 2) = v85 & 1;
      *(void *)(v78 + 40) = v88;
      *(void *)(v78 + 48) = v66;
      *(void *)(v78 + 56) = v91;
      *(void *)(v78 + 64) = v89;
      *(void *)(v78 + 7sub_10018709C(v0 + 2) = v90;
      *(void *)(v78 + 80) = v63;
      *(void *)(v78 + 88) = v92;
      *(void *)(v78 + 96) = v94;
      swift_storeEnumTagMultiPayload(v78, v79, 5LL);
      sub_1001A4C04(v92, v94);
      swift_bridgeObjectRetain(v63);
      swift_bridgeObjectRetain(v75);
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRetain(v66);
      swift_bridgeObjectRetain(v89);
      sub_1001A4C04(v92, v94);
      uint64_t v86 = (void *)swift_task_alloc(dword_100653384);
      *(void *)(v0 + 288) = v86;
      *uint64_t v86 = v0;
      v86[1] = sub_100424354;
      return sub_1003E89C8(*(void *)(v0 + 120));
    }
  }

  else
  {
    sub_100189B0C(v46, v48);
    __break(1u);
  }

  uint64_t result = sub_100189B0C(v92, v94);
  __break(1u);
  return result;
}

uint64_t sub_100424354()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 288);
  *(void *)(*v1 + 296) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void *)(v2 + 208);
  sub_1001A4BC8(*(void *)(v2 + 120), type metadata accessor for SDAirDropMessage);
  if (v0) {
    uint64_t v5 = sub_100424AD0;
  }
  else {
    uint64_t v5 = sub_1004243D4;
  }
  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_1004243D4()
{
  uint64_t v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  sub_1001915A4(*(void *)(v0 + 56) + *(void *)(v0 + 232), v2, &qword_1006475B8);
  if (v1(v2, 1LL, v3) != 1)
  {
    uint64_t v4 = *(void *)(v0 + 104);
    uint64_t v5 = *(void *)(v0 + 72);
    sub_1001A4B40(*(void *)(v0 + 64), v4, _s14descr1005DF7D1C10AskRequestVMa);
    uint64_t v6 = *(void *)(v4 + *(int *)(v5 + 48));
    uint64_t v7 = *(void *)(v0 + 104);
    if (v6)
    {
      uint64_t v8 = *(void *)(v6 + 16);
      sub_1001A4B84(v7, *(void *)(v0 + 96), _s14descr1005DF7D1C10AskRequestVMa);
      if (v8)
      {
        sub_1001A4BC8(*(void *)(v0 + 96), _s14descr1005DF7D1C10AskRequestVMa);
LABEL_6:
        uint64_t v9 = *(void *)(v0 + 88);
        sub_1001A4B84(*(void *)(v0 + 104), v9, _s14descr1005DF7D1C10AskRequestVMa);
        sub_1001A4BC8(v9, _s14descr1005DF7D1C10AskRequestVMa);
LABEL_7:
        if (qword_100644370 != -1) {
          swift_once(&qword_100644370, sub_10042322C);
        }
        uint64_t v10 = type metadata accessor for Logger(0LL);
        uint64_t v11 = sub_100186DE4(v10, (uint64_t)qword_100654D20);
        uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
        os_log_type_t v13 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v12, v13))
        {
          char v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)char v14 = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, v13, "Staring decompression adapter", v14, 2u);
          swift_slowDealloc(v14, -1LL, -1LL);
        }

        uint64_t v16 = *(const char **)(v0 + 272);
        uint64_t v15 = *(const char **)(v0 + 280);
        os_log_type_t v18 = *(const char **)(v0 + 256);
        uint64_t v17 = *(const char **)(v0 + 264);
        uint64_t v19 = *(const char **)(v0 + 248);
        uint64_t v21 = *(void *)(v0 + 216);
        unint64_t v20 = *(void *)(v0 + 224);
        uint64_t v22 = *(void *)(v0 + 104);

        *(void *)&double v23 = swift_bridgeObjectRelease(v16).n128_u64[0];
        *(void *)&double v24 = swift_bridgeObjectRelease(v15, v23).n128_u64[0];
        *(void *)&double v25 = swift_bridgeObjectRelease(v19, v24).n128_u64[0];
        *(void *)&double v26 = swift_bridgeObjectRelease(v18, v25).n128_u64[0];
        swift_bridgeObjectRelease(v17, v26);
        sub_100189B0C(v21, v20);
        sub_100189B0C(v21, v20);
        sub_1001A4BC8(v22, _s14descr1005DF7D1C10AskRequestVMa);
        goto LABEL_28;
      }

      uint64_t v27 = *(void *)(v0 + 136);
      uint64_t v28 = *(void *)(v0 + 72);
      sub_1001915A4(*(void *)(v0 + 96) + *(int *)(v28 + 20), v27, &qword_100647608);
      uint64_t v29 = type metadata accessor for SFAirDrop.TransferType(0LL);
      uint64_t v30 = *(void *)(v29 - 8);
      uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
      int v32 = v31(v27, 1LL, v29);
      uint64_t v33 = *(void *)(v0 + 136);
      uint64_t v34 = *(void *)(v0 + 96);
      if (v32 == 1)
      {
        sub_1001A4BC8(*(void *)(v0 + 96), _s14descr1005DF7D1C10AskRequestVMa);
        sub_100187100(v33, &qword_100647608);
      }

      else
      {
        SFAirDrop.TransferType.exchangeType.getter();
        uint64_t v36 = v35;
        sub_1001A4BC8(v34, _s14descr1005DF7D1C10AskRequestVMa);
        (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v33, v29);
        if (v36)
        {
          swift_bridgeObjectRelease(v36);
          goto LABEL_6;
        }
      }

      uint64_t v37 = *(void *)(v0 + 128);
      uint64_t v38 = *(void *)(v0 + 88);
      sub_1001A4B84(*(void *)(v0 + 104), v38, _s14descr1005DF7D1C10AskRequestVMa);
      sub_1001915A4(v38 + *(int *)(v28 + 20), v37, &qword_100647608);
      uint64_t v39 = v31(v37, 1LL, v29);
      uint64_t v40 = *(void *)(v0 + 128);
      uint64_t v41 = *(void *)(v0 + 88);
      if ((_DWORD)v39 == 1)
      {
        sub_1001A4BC8(*(void *)(v0 + 88), _s14descr1005DF7D1C10AskRequestVMa);
        sub_100187100(v40, &qword_100647608);
      }

      else
      {
        char v42 = SFAirDrop.TransferType.isCustom.getter(v39);
        sub_1001A4BC8(v41, _s14descr1005DF7D1C10AskRequestVMa);
        (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v40, v29);
        if ((v42 & 1) != 0) {
          goto LABEL_7;
        }
      }

      uint64_t v7 = *(void *)(v0 + 104);
    }

    sub_1001A4BC8(v7, _s14descr1005DF7D1C10AskRequestVMa);
    goto LABEL_21;
  }

  sub_100187100(*(void *)(v0 + 64), &qword_1006475B8);
LABEL_21:
  if (qword_100644370 != -1) {
    swift_once(&qword_100644370, sub_10042322C);
  }
  uint64_t v43 = type metadata accessor for Logger(0LL);
  uint64_t v44 = sub_100186DE4(v43, (uint64_t)qword_100654D20);
  uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
  os_log_type_t v46 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v45, v46))
  {
    unint64_t v47 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v47 = 0;
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "No files to receive or exchanges", v47, 2u);
    swift_slowDealloc(v47, -1LL, -1LL);
  }

  uint64_t v48 = *(void *)(v0 + 56);

  uint64_t Strong = swift_unknownObjectWeakLoadStrong( v48 + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_delegate,  v49);
  *(void *)(v0 + 304) = Strong;
  if (Strong)
  {
    uint64_t v51 = *(void *)(v0 + 56) + OBJC_IVAR____TtC16DaemoniOSLibrary23SDAirDropReceiveHandler_serverConnectionIdentity;
    uint64_t v52 = (void *)swift_task_alloc(dword_10064973C);
    *(void *)(v0 + 31sub_10018709C(v0 + 2) = v52;
    void *v52 = v0;
    v52[1] = sub_100424954;
    return sub_10022EC74(v51, 0LL);
  }

  uint64_t v54 = *(const char **)(v0 + 272);
  __n128 v55 = *(const char **)(v0 + 280);
  uint64_t v57 = *(const char **)(v0 + 256);
  uint64_t v56 = *(const char **)(v0 + 264);
  uint64_t v58 = *(const char **)(v0 + 248);
  uint64_t v60 = *(void *)(v0 + 216);
  unint64_t v59 = *(void *)(v0 + 224);
  sub_100189B0C(v60, v59);
  *(void *)&double v61 = swift_bridgeObjectRelease(v54).n128_u64[0];
  *(void *)&double v62 = swift_bridgeObjectRelease(v55, v61).n128_u64[0];
  *(void *)&double v63 = swift_bridgeObjectRelease(v56, v62).n128_u64[0];
  *(void *)&double v64 = swift_bridgeObjectRelease(v57, v63).n128_u64[0];
  swift_bridgeObjectRelease(v58, v64);
  sub_100189B0C(v60, v59);
LABEL_28:
  uint64_t v65 = *(void *)(v0 + 192);
  uint64_t v66 = *(void *)(v0 + 200);
  uint64_t v67 = *(void *)(v0 + 168);
  uint64_t v69 = *(void *)(v0 + 136);
  uint64_t v68 = *(void *)(v0 + 144);
  uint64_t v71 = *(void *)(v0 + 120);
  uint64_t v70 = *(void *)(v0 + 128);
  uint64_t v73 = *(void *)(v0 + 96);
  uint64_t v72 = *(void *)(v0 + 104);
  uint64_t v74 = *(void *)(v0 + 88);
  uint64_t v75 = *(void *)(v0 + 64);
  sub_100424BF0(*(void *)(v0 + 48));
  swift_task_dealloc(v66);
  swift_task_dealloc(v65);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  return (*(uint64_t (**)(void))(v0 + 8))();
}