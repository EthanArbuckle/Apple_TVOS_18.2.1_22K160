void sub_100004930(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  os_log_s *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  void *v15;
  v3 = a2;
  v5 = v3;
  if (v3)
  {
    v6 = ne_log_obj(v3, v4);
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v11 = *(void *)(a1 + 32);
      v12 = 138412546;
      v13 = v11;
      v14 = 2112;
      v15 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%@ provider failed to process signal request error %@",  (uint8_t *)&v12,  0x16u);
    }

    v8 = *(void **)(a1 + 32);
    v9 = *(void **)(a1 + 40);
    v10 = v5;
  }

  else
  {
    v8 = *(void **)(a1 + 32);
    v9 = *(void **)(a1 + 40);
    v10 = 0LL;
  }

  sub_100004A14(v8, v10, v9);
}

void sub_100004A14(void *a1, void *a2, void *a3)
{
  if (a1)
  {
    id v5 = a3;
    id v6 = a2;
    v7 = (void *)objc_claimAutoreleasedReturnValue([a1 managerObjectFactory]);
    id v8 = (id)objc_claimAutoreleasedReturnValue([v7 managerObject]);

    [v8 handleProviderError:v6 forMessageID:v5];
  }
}

void sub_100004A98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = ne_log_obj(a1, a2);
  v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 138412290;
    uint64_t v10 = v8;
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%@ provider stopped", (uint8_t *)&v9, 0xCu);
  }

  id v5 = *(void **)(a1 + 32);
  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 managerObjectFactory]);
    v7 = (void *)objc_claimAutoreleasedReturnValue([v6 managerObject]);

    [v7 handleProviderStopped];
  }

void sub_100004B70(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (v3)
  {
    uint64_t v6 = ne_log_obj(v3, v4);
    v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v11 = 138412546;
      uint64_t v12 = v10;
      __int16 v13 = 2112;
      v14 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%@ failed to start the provider, error %@",  (uint8_t *)&v11,  0x16u);
    }

    uint64_t v8 = *(void **)(a1 + 32);
    int v9 = v5;
  }

  else
  {
    uint64_t v8 = *(void **)(a1 + 32);
    int v9 = 0LL;
  }

  sub_100004C54(v8, v9);
}

void sub_100004C54(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1 managerObjectFactory]);
    id v5 = (id)objc_claimAutoreleasedReturnValue([v4 managerObject]);

    [v5 handleProviderError:v3];
  }

void sub_100004CBC(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([a1 managerObjectFactory]);
    id v4 = (id)objc_claimAutoreleasedReturnValue([v3 managerObject]);

    [v4 handleProviderInstallationStatus:a2];
  }

void sub_100004D14(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___NEAppPushPluginDriver));
  v2 = (void *)qword_1000CFB88;
  qword_1000CFB88 = v1;
}

void sub_100004D48(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___NEAppPushPluginManager));
  v2 = (void *)qword_1000CFB78;
  qword_1000CFB78 = v1;
}

void sub_100004F44(uint64_t a1, char a2, void *a3, void *a4)
{
  id v7 = a3;
  id v9 = a4;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v8, 24LL, 1);
  }
  int v11 = (dispatch_queue_s *)Property;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100005030;
  block[3] = &unk_1000BD450;
  char v19 = a2;
  uint64_t v12 = *(void **)(a1 + 40);
  block[4] = *(void *)(a1 + 32);
  id v17 = v7;
  id v18 = v12;
  id v16 = v9;
  id v13 = v7;
  id v14 = v9;
  dispatch_async(v11, block);
}

void sub_100005030(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    int v3 = [*(id *)(a1 + 40) pid];
    id v4 = objc_alloc(&OBJC_CLASS___NSArray);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uuid]);
    uint64_t v6 = -[NSArray initWithObjects:](v4, "initWithObjects:", v5, 0LL);
    sub_10007F950(v2, v3, v6);

    id v7 = -[NSArray initWithObjects:](objc_alloc(&OBJC_CLASS___NSArray), "initWithObjects:", *(void *)(a1 + 40), 0LL);
    sub_10007F940(*(void *)(a1 + 32), v7);

    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v8, 32LL, 1);
    }
    uint64_t v10 = (dispatch_queue_s *)Property;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100005224;
    block[3] = &unk_1000BED58;
    char v19 = (NSError *)*(id *)(a1 + 56);
    id v18 = *(id *)(a1 + 48);
    dispatch_async(v10, block);

    int v11 = v19;
  }

  else
  {
    id v13 = -[NSError initWithDomain:code:userInfo:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithDomain:code:userInfo:",  @"NEAgentErrorDomain",  2LL,  0LL);
    id v14 = *(id *)(a1 + 32);
    if (v14) {
      id v14 = objc_getProperty(v14, v12, 32LL, 1);
    }
    v15 = (dispatch_queue_s *)v14;
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_100005210;
    v20[3] = &unk_1000BED58;
    id v16 = *(id *)(a1 + 56);
    v21 = v13;
    id v22 = v16;
    int v11 = v13;
    dispatch_async(v15, v20);
  }
}

uint64_t sub_100005210(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

uint64_t sub_100005224(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  *(void *)(a1 + 32));
}

LABEL_46:
    v63 = 0LL;
    goto LABEL_47;
  }

  id v18 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  0LL);
  if (!v18)
  {
    v45 = ne_log_obj(0LL, v19);
    v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      v75 = v9;
      v76 = 2080;
      v77 = "-[NESMAlwaysOnSession initWithConfiguration:andServer:]";
      v44 = "%@:%s: Failed to allocate VPN session retry counters";
      goto LABEL_32;
    }

    goto LABEL_46;
  }

  v20 = v18;
  objc_storeStrong((id *)&v9->_VPNSessionRetryCounters, v18);
  v21 = nwi_state_copy();
  if (v21)
  {
    id v22 = v21;
    interface_names = nwi_state_get_interface_names(v21, 0LL, 0LL);
    if ((_DWORD)interface_names && (v24 = interface_names, (v25 = calloc(interface_names, 8uLL)) != 0LL))
    {
      v26 = v25;
      v71 = v20;
      v72 = v17;
      v27 = nwi_state_get_interface_names(v22, v25, v24);
      v70 = v26;
      if (v27)
      {
        v29 = (uint64_t *)v26;
        v30 = 0LL;
        v31 = v27;
        *(void *)&v28 = 138412802LL;
        v69 = v28;
        do
        {
          v32 = *v29;
          if (*v29
            && (ifstate = nwi_state_get_ifstate(v22, *v29)) != 0
            && (v34 = ifstate, !nwi_ifstate_get_vpn_server())
            && (nwi_ifstate_get_flags(v34) & 3) != 0
            && (nwi_ifstate_get_flags(v34) & 4) != 0)
          {
            v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v32));
            v37 = sub_1000092E4((NESMIKEv2VPNSession *)v9, v36);
            v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);

            if (v35)
            {
              if (-[NSMutableDictionary count](v72, "count"))
              {
                -[os_log_s setIsSecondaryInterface:](v35, "setIsSecondaryInterface:", 1LL);
                -[os_log_s setIsSecondaryConnection:](v35, "setIsSecondaryConnection:", 1LL);
              }

              v38 = v36;
              v39 = -[NSMutableDictionary setObject:forKeyedSubscript:]( v72,  "setObject:forKeyedSubscript:",  v35,  v36,  v69);
              v41 = ne_log_obj(v39, v40);
              v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
              if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = v69;
                v75 = v9;
                v76 = 2080;
                v77 = "-[NESMAlwaysOnSession initWithConfiguration:andServer:]";
                v78 = 2112;
                v79 = v38;
                _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_INFO,  "%@:%s: Set up VPN Session over %@",  buf,  0x20u);
              }

              v36 = v38;
            }
          }

          else
          {
            v35 = v30;
          }

          ++v29;
          v30 = v35;
          --v31;
        }

        while (v31);
      }

      else
      {
        v35 = 0LL;
      }

      free(v70);
      v20 = v71;
      id v17 = v72;
    }

    else
    {
      v35 = 0LL;
    }

    nwi_state_release(v22);
  }

  else
  {
    v35 = 0LL;
  }

  objc_storeStrong((id *)&v9->_VPNSessions, v17);
  sub_10000952C(v9, v46);
  v47 = -[NEPolicySession initWithSessionName:]( objc_alloc(&OBJC_CLASS___NEPolicySession),  "initWithSessionName:",  @"AOVPN control");
  -[NESMSession setControlPolicySession:](v9, "setControlPolicySession:", v47);

  v48 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession controlPolicySession](v9, "controlPolicySession"));
  if (!v48)
  {
    v64 = ne_log_obj(v49, v50);
    v65 = (void *)objc_claimAutoreleasedReturnValue(v64);
    if (!os_log_type_enabled((os_log_t)v65, OS_LOG_TYPE_ERROR))
    {
LABEL_45:

      goto LABEL_46;
    }

    *(_WORD *)buf = 0;
    v66 = "Failed to create the control policy session";
LABEL_49:
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v65, OS_LOG_TYPE_ERROR, v66, buf, 2u);
    goto LABEL_45;
  }

  v51 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession controlPolicySession](v9, "controlPolicySession"));
  [v51 setPriority:100];

  v52 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession controlPolicySession](v9, "controlPolicySession"));
  [v52 lockSessionToCurrentProcess];

  v53 = -[NEPolicySession initWithSessionName:]( objc_alloc(&OBJC_CLASS___NEPolicySession),  "initWithSessionName:",  @"AOVPN high");
  -[NESMSession setHighPolicySession:](v9, "setHighPolicySession:", v53);

  v54 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession highPolicySession](v9, "highPolicySession"));
  if (!v54)
  {
    v67 = ne_log_obj(v55, v56);
    v65 = (void *)objc_claimAutoreleasedReturnValue(v67);
    if (!os_log_type_enabled((os_log_t)v65, OS_LOG_TYPE_ERROR)) {
      goto LABEL_45;
    }
    *(_WORD *)buf = 0;
    v66 = "Failed to create AOVPN high policy session";
    goto LABEL_49;
  }

  v57 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession highPolicySession](v9, "highPolicySession"));
  [v57 setPriority:400];

  v58 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession highPolicySession](v9, "highPolicySession"));
  [v58 lockSessionToCurrentProcess];

  v9->_carrierBundleIMSUseIPSec = 0;
  v9->_carrierBundleNATKeepAliveIntervalOverCell = 110;
  v59 = objc_alloc(&OBJC_CLASS___CoreTelephonyClient);
  v60 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession queue](v9, "queue"));
  v61 = -[CoreTelephonyClient initWithQueue:](v59, "initWithQueue:", v60);
  CTClient = v9->_CTClient;
  v9->_CTClient = v61;

  -[CoreTelephonyClient setDelegate:](v9->_CTClient, "setDelegate:", v9);
LABEL_41:
  v63 = v9;
LABEL_47:

  return v63;
}

      v24 = 0LL;
LABEL_71:
    }
  }

LABEL_10:
  v20.receiver = self;
  v20.super_class = (Class)&OBJC_CLASS___NESMAlwaysOnSession;
  if (!-[NESMSession handleUpdateConfiguration:](&v20, "handleUpdateConfiguration:", v4))
  {
LABEL_15:
    v15 = 0;
    goto LABEL_16;
  }

  sub_10000816C(self, v11);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v4 alwaysOnVPN]);
  id v13 = [v12 isEnabled];

  if (v13)
  {
    id v14 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(-[NESMSession queue](self, "queue"));
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_10000A128;
    v18[3] = &unk_1000BEBE0;
    v18[4] = self;
    char v19 = v4;
    dispatch_async(v14, v18);
  }

  v15 = 1;
LABEL_16:

  return v15;
}

LABEL_14:
  remote_connection = xpc_dictionary_get_remote_connection(v29);
  v27 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
  xpc_connection_send_message(v27, xdict);
}
}

  (*((void (**)(id, uint64_t))v6 + 2))(v6, 1LL);
  int v11 = *(dispatch_object_s **)(a1 + 32);
  if (v11)
  {
    objc_setProperty_atomic_copy(v11, v10, 0LL, 408LL);
    int v11 = *(dispatch_object_s **)(a1 + 32);
    if (v11) {
      int v11 = (dispatch_object_s *)objc_getProperty(v11, v12, 376LL, 1);
    }
  }

  dispatch_resume(v11);
}

    id v13 = 0LL;
LABEL_15:

    goto LABEL_16;
  }

  id v13 = 0LL;
LABEL_16:

  return v13;
}
}

void sub_100006814( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41, uint64_t a42, uint64_t a43, uint64_t a44, char a45, uint64_t a46, uint64_t a47, uint64_t a48, char a49, uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

void sub_1000079A4(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void **)(a1 + 384);
    if (v2)
    {
      id v45 = 0LL;
      int v3 = (void *)objc_claimAutoreleasedReturnValue([v2 getSubscriptionInfoWithError:&v45]);
      id v4 = v45;
      if (v4)
      {
        id v6 = v4;
        uint64_t v7 = ne_log_obj(v4, v5);
        uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          id v48 = v6;
          _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Failed to getCarrierSubscriptionInfo - %@",  buf,  0xCu);
        }
      }

      else
      {
        uint64_t v8 = (os_log_s *)[[CTBundle alloc] initWithBundleType:1];
        __int128 v41 = 0u;
        __int128 v42 = 0u;
        __int128 v43 = 0u;
        __int128 v44 = 0u;
        id obj = (id)objc_claimAutoreleasedReturnValue([v3 subscriptions]);
        id v9 = [obj countByEnumeratingWithState:&v41 objects:v46 count:16];
        if (v9)
        {
          id v10 = v9;
          v37 = v3;
          id v6 = 0LL;
          uint64_t v11 = *(void *)v42;
          do
          {
            uint64_t v12 = 0LL;
            do
            {
              id v13 = v6;
              if (*(void *)v42 != v11) {
                objc_enumerationMutation(obj);
              }
              uint64_t v14 = *(void *)(*((void *)&v41 + 1) + 8LL * (void)v12);
              v15 = *(void **)(a1 + 384);
              id v40 = v6;
              id v16 = [v15 copyCarrierBundleValue:v14 keyHierarchy:&off_1000C1680 bundleType:v8 error:&v40];
              id v6 = v40;

              if (v6)
              {
                uint64_t v19 = ne_log_obj(v17, v18);
                v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
                if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412290;
                  id v48 = v6;
                  _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "Failed to get Carrier Bundle UseIPSec setting - %@",  buf,  0xCu);
                }
              }

              else if (v16)
              {
                uint64_t v21 = objc_opt_class(&OBJC_CLASS___NSNumber);
                if ((objc_opt_isKindOfClass(v16, v21) & 1) != 0)
                {
                  id v22 = v16;
                  uint64_t v24 = ne_log_obj(v22, v23);
                  v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
                  if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)buf = 138412290;
                    id v48 = v22;
                    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "Retrieved Carrier Bundle UseIPSec setting: %@",  buf,  0xCu);
                  }

                  unsigned __int8 v26 = [v22 BOOLValue];
                  if ((v26 & 1) != 0)
                  {

                    id v6 = 0LL;
                    char v28 = 1;
                    goto LABEL_25;
                  }
                }
              }

              uint64_t v12 = (char *)v12 + 1;
            }

            while (v10 != v12);
            id v27 = [obj countByEnumeratingWithState:&v41 objects:v46 count:16];
            id v10 = v27;
          }

          while (v27);
          char v28 = 0;
LABEL_25:
          int v3 = v37;
        }

        else
        {
          char v28 = 0;
          id v6 = 0LL;
        }

        *(_BYTE *)(a1 + 352) = v28;
      }
    }

    v29 = -[CoreTelephonyClient initWithQueue:](objc_alloc(&OBJC_CLASS___CoreTelephonyClient), "initWithQueue:", 0LL);
    v30 = v29;
    if (v29)
    {
      id v39 = 0LL;
      unsigned int v31 = -[CoreTelephonyClient getNATTKeepAliveOverCellForPreferredDataContext:]( v29,  "getNATTKeepAliveOverCellForPreferredDataContext:",  &v39);
      id v32 = v39;
      v34 = v32;
      if (v32)
      {
        uint64_t v35 = ne_log_obj(v32, v33);
        v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          id v48 = v34;
          _os_log_error_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_ERROR,  "Failed to query Cellular NATTKeepAlive: %@",  buf,  0xCu);
        }

        unsigned int v31 = 0;
      }

      *(_DWORD *)(a1 + 356) = v31;
    }
  }

void sub_100007D78(uint64_t a1, const char *a2)
{
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 400LL, 1);
  }
  int v3 = (void *)objc_claimAutoreleasedReturnValue([Property allValues]);
  id v4 = [v3 countByEnumeratingWithState:&v41 objects:v45 count:16];
  if (v4)
  {
    id v6 = v4;
    uint64_t v7 = *(void *)v42;
    *(void *)&__int128 v5 = 138412802LL;
    __int128 v38 = v5;
    id v39 = v3;
    do
    {
      uint64_t v8 = 0LL;
      do
      {
        if (*(void *)v42 != v7) {
          objc_enumerationMutation(v3);
        }
        id v9 = *(void **)(*((void *)&v41 + 1) + 8LL * (void)v8);
        if ((objc_msgSend(v9, "isSecondaryConnection", v38) & 1) == 0
          && [v9 status] == 3)
        {
          id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 configuration]);
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 alwaysOnVPN]);
          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 applicationExceptions]);
          id v13 = [v12 count];

          if (v13)
          {
            uint64_t v16 = ne_log_obj(v14, v15);
            uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
            {
              uint64_t v18 = *(void *)(a1 + 32);
              uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v9 interfaceName]);
              *(_DWORD *)buf = v38;
              *(void *)&uint8_t buf[4] = v18;
              *(_WORD *)&buf[12] = 2112;
              *(void *)&buf[14] = v19;
              *(_WORD *)&buf[22] = 2080;
              v47 = "-[NESMAlwaysOnSession handleInstalledAppsChanged]_block_invoke";
              _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "%@[%@]:%s: Installing Application Exception data policies",  buf,  0x20u);
            }

            v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) policySession]);
            uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v9 interfaceName]);
            id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
            uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 alwaysOnVPN]);
            uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v23 applicationExceptions]);
            id v25 = v21;
            id v26 = v24;
            id v27 = v26;
            if (v20)
            {
              *(void *)buf = _NSConcreteStackBlock;
              *(void *)&buf[8] = 3221225472LL;
              *(void *)&buf[16] = sub_100044210;
              v47 = (const char *)&unk_1000BDF50;
              id v48 = v20;
              id v28 = v25;
              id v49 = v28;
              id v29 = v27;
              id v50 = v29;
              char v51 = 1;
              char v30 = sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, buf);

              int v3 = v39;
              if ((v30 & 1) != 0) {
                goto LABEL_18;
              }
            }

            else
            {

              int v3 = v39;
            }

            uint64_t v33 = ne_log_obj(v31, v32);
            v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
            if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
            {
              uint64_t v35 = *(void *)(a1 + 32);
              v36 = (void *)objc_claimAutoreleasedReturnValue([v9 interfaceName]);
              *(_DWORD *)buf = v38;
              *(void *)&uint8_t buf[4] = v35;
              *(_WORD *)&buf[12] = 2112;
              *(void *)&buf[14] = v36;
              *(_WORD *)&buf[22] = 2080;
              v47 = "-[NESMAlwaysOnSession handleInstalledAppsChanged]_block_invoke";
              _os_log_error_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_ERROR,  "%@[%@]:%s: Application Exception data policies install failed",  buf,  0x20u);
            }
          }
        }

LABEL_18:
        uint64_t v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v37 = [v3 countByEnumeratingWithState:&v41 objects:v45 count:16];
      id v6 = v37;
    }

    while (v37);
  }
}

  if (self) {
    v20 = objc_getProperty(self, v13, 16LL, 1);
  }
  else {
    v20 = 0LL;
  }
  id v22 = (void *)objc_claimAutoreleasedReturnValue([v20 authenticationPlugin]);
  if (self) {
    uint64_t v23 = objc_getProperty(self, v21, 16LL, 1);
  }
  else {
    uint64_t v23 = 0LL;
  }
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v23 connectParameters]);
  id v25 = v24;
  if (v22)
  {
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    v30[2] = sub_1000166E4;
    v30[3] = &unk_1000BEA88;
    v30[4] = v22;
    id v26 = v24;
    id v27 = (void *)objc_claimAutoreleasedReturnValue([v22 remotePluginObjectWithErrorHandler:v30]);
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472LL;
    v29[2] = sub_100016780;
    v29[3] = &unk_1000BD7A8;
    v29[4] = v22;
    [v27 authenticateWithParameters:v26 completionHandler:v29];
  }

LABEL_25:
}

  uint64_t v31 = objc_alloc(v8);
  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([a1 uid]);
  uint64_t v33 = [v31 initWithPluginType:v5 pluginVersion:1 pluginClass:a2 pluginInfo:v25 userID:v32];

  if (v33) {
    goto LABEL_25;
  }
  v36 = ne_log_obj(v34, v35);
  id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412802;
    id v50 = a1;
    char v51 = 2112;
    v52 = (uint64_t)v5;
    v53 = 2048;
    v54 = a2;
    _os_log_error_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "%@: Failed to create a neagent instance for plugin type %@, class %ld",  buf,  0x20u);
  }

LABEL_24:
  uint64_t v33 = 0LL;
LABEL_25:

  if (v33)
  {
    __int128 v41 = ne_log_obj(v39, v40);
    __int128 v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      id v50 = a1;
      char v51 = 2048;
      v52 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "%@: Creating a filter plugin with class %ld",  buf,  0x16u);
    }

    __int128 v43 = objc_alloc(&OBJC_CLASS___NEFilterPlugin);
    __int128 v44 = (void *)objc_claimAutoreleasedReturnValue([a1 queue]);
    id v45 = -[NEPlugin initWithAgent:delegateQueue:andDelegate:]( v43,  "initWithAgent:delegateQueue:andDelegate:",  v33,  v44,  a1);
  }

  else
  {
    id v45 = 0LL;
  }

  return v45;
}

id sub_10000813C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) startWithCommand:0 isOnDemand:0];
}

void sub_10000816C(void *a1, uint64_t a2)
{
  if (!a1) {
    return;
  }
  uint64_t v3 = ne_log_obj(a1, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Setting up Always-On VPN control policies",  buf,  2u);
  }

  __int128 v5 = (void *)objc_claimAutoreleasedReturnValue([a1 controlPolicySession]);
  [v5 removeAllPolicies];

  id v6 = (void *)objc_claimAutoreleasedReturnValue([a1 highPolicySession]);
  [v6 removeAllPolicies];

  [a1 setDefaultDropType:0];
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
  if (v7)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 alwaysOnVPN]);

    if (!v9)
    {
LABEL_29:
      LOBYTE(v7) = 0;
      goto LABEL_36;
    }

    uint64_t v65 = 2LL;
    id v10 = (void *)objc_claimAutoreleasedReturnValue([a1 controlPolicySession]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
    id Property = (id)objc_claimAutoreleasedReturnValue([a1 server]);
    uint64_t v14 = Property;
    if (Property) {
      id Property = objc_getProperty(Property, v13, 80LL, 1);
    }
    id v15 = Property;
    char v16 = sub_100059260((uint64_t)v10, v11, 0x32u, &v65, v15);

    if ((v16 & 1) == 0)
    {
      uint64_t v19 = ne_log_obj(v17, v18);
      v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "AlwaysOnVPN evaluateConfiguration failed",  buf,  2u);
      }
    }

    if (v65) {
      objc_msgSend(a1, "setDefaultDropType:");
    }
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([a1 highPolicySession]);
    id v22 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
    id v23 = (id)objc_claimAutoreleasedReturnValue([a1 server]);
    id v25 = v23;
    if (v23) {
      id v23 = objc_getProperty(v23, v24, 80LL, 1);
    }
    id v26 = v23;
    BOOL v27 = sub_10005B15C(v21, v22, 0x32u, &v65);

    if (!v27)
    {
      uint64_t v30 = ne_log_obj(v28, v29);
      uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_ERROR,  "AlwaysOnVPN evaluateConfiguration failed",  buf,  2u);
      }
    }

    if (v65) {
      objc_msgSend(a1, "setDefaultDropType:");
    }
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v32 alwaysOnVPN]);
    unsigned __int8 v34 = [v33 isEnabled];

    if ((v34 & 1) != 0)
    {
LABEL_35:
      LOBYTE(v7) = 1;
      goto LABEL_36;
    }

    uint64_t v35 = objc_claimAutoreleasedReturnValue([a1 server]);
    if (!v35) {
      goto LABEL_28;
    }
    v36 = (void *)v35;
    id v37 = SCPreferencesCreate( kCFAllocatorDefault,  @"NEHelper control settings",  @"/Library/Preferences/com.apple.networkextension.control.plist");
    if (v37)
    {
      __int128 v38 = v37;
      Value = (const __CFBoolean *)SCPreferencesGetValue(v37, @"AOVPNDropAll");
      CFTypeID TypeID = CFBooleanGetTypeID();
      if (Value && CFGetTypeID(Value) == TypeID)
      {
        int v41 = CFBooleanGetValue(Value);
        CFRelease(v38);

        if (!v41)
        {
LABEL_28:
          [a1 setDefaultDropType:0];
          goto LABEL_29;
        }

        goto LABEL_32;
      }

      CFRelease(v38);
    }

LABEL_32:
    uint64_t v44 = ne_log_obj(v42, v43);
    id v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      id v46 = [a1 defaultDropType];
      *(_DWORD *)buf = 134218240;
      *(void *)v67 = v46;
      *(_WORD *)&v67[8] = 1024;
      *(_DWORD *)&v67[10] = 1;
      _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "AOVPNDropAll set, IP Drop-All enabled <%ld> persistFeature <%d>",  buf,  0x12u);
    }

    goto LABEL_35;
  }

LABEL_36:
  [a1 setIsDropPersistent:1];
  v47 = (void *)objc_claimAutoreleasedReturnValue([a1 controlPolicySession]);
  unsigned __int8 v48 = [v47 apply];

  if ((v48 & 1) == 0)
  {
    uint64_t v51 = ne_log_obj(v49, v50);
    v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_ERROR,  "AlwaysOnVPN Could not apply control policies",  buf,  2u);
    }
  }

  v53 = (void *)objc_claimAutoreleasedReturnValue([a1 highPolicySession]);
  unsigned __int8 v54 = [v53 apply];

  if ((v54 & 1) == 0)
  {
    uint64_t v57 = ne_log_obj(v55, v56);
    v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_ERROR,  "AlwaysOnVPN Could not apply High control policies",  buf,  2u);
    }
  }

  uint64_t v59 = ne_log_obj(v55, v56);
  v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
  if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v61 = [a1 defaultDropType];
    unsigned int v62 = [a1 isDropPersistent];
    v63 = "Non-Persistent";
    if (v62) {
      v63 = "Persistent";
    }
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)v67 = v61;
    *(_WORD *)&v67[4] = 2080;
    *(void *)&v67[6] = v63;
    _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "AlwaysOnVPN setting IP Drop-All to %d (%s)",  buf,  0x12u);
  }

  v64 = (void *)objc_claimAutoreleasedReturnValue([a1 server]);
  sub_10005241C(v64, @"drop_all_feature_always_on_vpn", (char)v7);
}

void sub_100008708(uint64_t a1, const char *a2)
{
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 400LL, 1);
  }
  id v4 = Property;
  id v5 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v5)
  {
    id v7 = v5;
    uint64_t v8 = *(void *)v14;
    do
    {
      id v9 = 0LL;
      do
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v4);
        }
        uint64_t v10 = *(void *)(*((void *)&v13 + 1) + 8LL * (void)v9);
        id v11 = *(id *)(a1 + 32);
        if (v11) {
          id v11 = objc_getProperty(v11, v6, 400LL, 1);
        }
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", v10, (void)v13));
        [v12 handleNetworkConfigurationChange:*(void *)(a1 + 40)];

        id v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v7);
  }
}

void sub_10000883C(uint64_t a1)
{
  uint64_t v2 = nwi_state_copy();
  if (!v2)
  {
    id v13 = 0LL;
    uint64_t v55 = 0LL;
    uint64_t v12 = 0LL;
    goto LABEL_54;
  }

  uint64_t v4 = v2;
  uint64_t interface_names = nwi_state_get_interface_names(v2, 0LL, 0LL);
  if ((_DWORD)interface_names)
  {
    uint64_t v6 = interface_names;
    id v7 = calloc(interface_names, 8uLL);
    if (v7)
    {
      uint64_t v8 = v7;
      unsigned int v9 = nwi_state_get_interface_names(v4, v7, v6);
      if (v9)
      {
        uint64_t v11 = 0LL;
        uint64_t v12 = 0LL;
        v95 = 0LL;
        id v13 = 0LL;
        uint64_t v98 = v9;
        *(void *)&__int128 v10 = 138412802LL;
        __int128 v91 = v10;
        v92 = v8;
        uint64_t v93 = v4;
        uint64_t v94 = a1;
        do
        {
          uint64_t v14 = v8[v11];
          if (v14)
          {
            uint64_t ifstate = nwi_state_get_ifstate(v4, v14);
            if (ifstate)
            {
              uint64_t v16 = ifstate;
              if (!nwi_ifstate_get_vpn_server()
                && (nwi_ifstate_get_flags(v16) & 3) != 0
                && (nwi_ifstate_get_flags(v16) & 4) != 0)
              {
                v96 = v13;
                v97 = v12;
                uint64_t v17 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  nwi_ifstate_get_ifname(v16));
                uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
                uint64_t v19 = *(void **)(a1 + 32);
                id v21 = v18;
                if (v19)
                {
                  uint64_t v115 = 0LL;
                  __int128 v111 = 0u;
                  __int128 v112 = 0u;
                  __int128 v113 = 0u;
                  __int128 v114 = 0u;
                  id v22 = objc_getProperty(v19, v20, 400LL, 1);
                  id v23 = [v22 countByEnumeratingWithState:&v111 objects:v122 count:16];
                  if (v23)
                  {
                    id v25 = v23;
                    id v26 = 0LL;
                    uint64_t v27 = *(void *)v112;
                    while (2)
                    {
                      for (i = 0LL; i != v25; i = (char *)i + 1)
                      {
                        uint64_t v29 = v26;
                        if (*(void *)v112 != v27) {
                          objc_enumerationMutation(v22);
                        }
                        id v30 = objc_msgSend( objc_getProperty(v19, v24, 400, 1),  "objectForKeyedSubscript:",  *(void *)(*((void *)&v111 + 1) + 8 * (void)i));
                        id v26 = (void *)objc_claimAutoreleasedReturnValue(v30);

                        if (v26)
                        {
                          if ([v26 virtualInterface])
                          {
                            uint64_t v31 = NEVirtualInterfaceCopyName([v26 virtualInterface]);
                            uint64_t v115 = v31;
                            if (v31)
                            {
                              id v32 = [v21 isEqualToString:v31];
                              if ((_DWORD)v32)
                              {
                                uint64_t v34 = ne_log_obj(v32, v33);
                                uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
                                if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
                                {
                                  *(_DWORD *)buf = v91;
                                  v117 = v19;
                                  __int16 v118 = 2080;
                                  v119 = "-[NESMAlwaysOnSession isVirtualInterface:]";
                                  __int16 v120 = 2112;
                                  id v121 = v21;
                                  _os_log_debug_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEBUG,  "%@:%s: ifName %@ is a virtual interface)",  buf,  0x20u);
                                }

                                myCFRelease(&v115);
                                uint64_t v38 = ne_log_obj(v36, v37);
                                id v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
                                uint64_t v4 = v93;
                                a1 = v94;
                                uint64_t v8 = v92;
                                if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
                                {
                                  uint64_t v53 = *(void *)(v94 + 32);
                                  *(_DWORD *)v122 = v91;
                                  uint64_t v123 = v53;
                                  __int16 v124 = 2080;
                                  v125 = "-[NESMAlwaysOnSession handleChangeEventForInterface:newFlags:previousFlags:]_block_invoke";
                                  __int16 v126 = 2112;
                                  id v127 = v21;
                                  _os_log_debug_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEBUG,  "%@:%s: ifName %@ is a virtual interface, SKIP!",  v122,  0x20u);
                                }

                                id v13 = v96;
                                uint64_t v12 = v97;
                                goto LABEL_49;
                              }

                              myCFRelease(&v115);
                            }
                          }
                        }
                      }

                      id v25 = [v22 countByEnumeratingWithState:&v111 objects:v122 count:16];
                      if (v25) {
                        continue;
                      }
                      break;
                    }
                  }

                  else
                  {
                    id v26 = 0LL;
                  }
                }

                uint64_t v4 = v93;
                a1 = v94;
                id Property = *(id *)(v94 + 32);
                uint64_t v12 = v97;
                if (Property) {
                  id Property = objc_getProperty(Property, v40, 400LL, 1);
                }
                uint64_t v8 = v92;
                id v42 = Property;
                uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v42 objectForKeyedSubscript:v21]);

                if (v43)
                {
                  if (v97)
                  {
                    [v43 setIsSecondaryInterface:1];
                    id v13 = v43;
                  }

                  else
                  {
                    id v13 = v43;
                    [v13 setIsSecondaryInterface:0];
                    uint64_t v12 = v13;
                  }
                }

                else
                {
                  uint64_t v44 = sub_1000092E4(*(NESMIKEv2VPNSession **)(v94 + 32), v21);
                  id v45 = (void *)objc_claimAutoreleasedReturnValue(v44);

                  if (v45)
                  {
                    id v46 = v97;
                    if (!v97) {
                      id v46 = v45;
                    }
                    id v47 = [v45 setIsSecondaryInterface:v97 != 0];
                    uint64_t v49 = ne_log_obj(v47, v48);
                    uint64_t v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
                    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v54 = *(void *)(v94 + 32);
                      *(_DWORD *)v122 = v91;
                      uint64_t v123 = v54;
                      __int16 v124 = 2080;
                      v125 = "-[NESMAlwaysOnSession handleChangeEventForInterface:newFlags:previousFlags:]_block_invoke";
                      __int16 v126 = 2112;
                      id v127 = v21;
                      _os_log_debug_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEBUG,  "%@:%s: Set up VPN Session over %@",  v122,  0x20u);
                    }

                    id v52 = *(id *)(v94 + 32);
                    if (v52) {
                      id v52 = objc_getProperty(v52, v51, 400LL, 1);
                    }
                    objc_msgSend(v52, "setObject:forKeyedSubscript:", v45, v21, v91);
                    [v45 handleInitializeState];
                    v95 = v45;
                    uint64_t v12 = v46;
                    id v13 = 0LL;
                  }

                  else
                  {
                    id v13 = 0LL;
                    v95 = 0LL;
                  }
                }

LABEL_49:
              }
            }
          }

          ++v11;
        }

        while (v11 != v98);
        free(v8);
        uint64_t v55 = v95;
        goto LABEL_53;
      }

      free(v8);
    }
  }

  id v13 = 0LL;
  uint64_t v55 = 0LL;
  uint64_t v12 = 0LL;
LABEL_53:
  nwi_state_release(v4);
LABEL_54:
  sub_10000952C(*(void **)(a1 + 32), v3);
  sub_1000096D4(*(void **)(a1 + 32), v56);
  id v58 = *(id *)(a1 + 32);
  if (v58) {
    id v58 = objc_getProperty(v58, v57, 400LL, 1);
  }
  uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "objectForKeyedSubscript:", *(void *)(a1 + 40), v91));
  uint64_t v61 = ne_log_obj(v59, v60);
  unsigned int v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
  v63 = v62;
  if (v59)
  {
    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v82 = *(void *)(a1 + 32);
      id v83 = [*(id *)(a1 + 40) UTF8String];
      unsigned int v84 = [v59 state];
      *(_DWORD *)v122 = 138413058;
      uint64_t v123 = v82;
      __int16 v124 = 2080;
      v125 = "-[NESMAlwaysOnSession handleChangeEventForInterface:newFlags:previousFlags:]_block_invoke";
      __int16 v126 = 2080;
      id v127 = v83;
      __int16 v128 = 1024;
      unsigned int v129 = v84;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEBUG,  "%@:%s: checking for %s (vpn_session state %d)",  v122,  0x26u);
    }

    sub_100009924(*(void **)(a1 + 32), v59);
    uint64_t v64 = *(void *)(a1 + 48);
    if ((v64 & 3) != 0 && (v64 & 4) != 0)
    {
      id v65 = [v59 state];
      switch((unint64_t)v65)
      {
        case 1uLL:
          uint64_t v73 = ne_log_obj(v65, v66);
          v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
          if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v89 = *(void *)(a1 + 32);
            if (v89) {
              int v90 = *(_BYTE *)(v89 + 353) & 1;
            }
            else {
              int v90 = 0;
            }
            *(_DWORD *)v122 = 138412802;
            uint64_t v123 = v89;
            __int16 v124 = 2080;
            v125 = "-[NESMAlwaysOnSession handleChangeEventForInterface:newFlags:previousFlags:]_block_invoke_2";
            __int16 v126 = 1024;
            LODWORD(v127) = v90;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEBUG,  "%@:%s: Starting VPN Session (stopped %d)",  v122,  0x1Cu);
          }

          v75 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v59 queue]);
          v102[0] = _NSConcreteStackBlock;
          v102[1] = 3221225472LL;
          v102[2] = sub_100009BA8;
          v102[3] = &unk_1000BEBE0;
          v102[4] = *(void *)(a1 + 32);
          id v103 = v59;
          dispatch_async(v75, v102);

          v71 = v103;
          goto LABEL_69;
        case 2uLL:
          uint64_t v76 = ne_log_obj(v65, v66);
          v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(v76);
          if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v88 = *(void *)(a1 + 32);
            *(_DWORD *)v122 = 138412546;
            uint64_t v123 = v88;
            __int16 v124 = 2080;
            v125 = "-[NESMAlwaysOnSession handleChangeEventForInterface:newFlags:previousFlags:]_block_invoke";
            _os_log_debug_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_DEBUG,  "%@:%s: calling handleNetworkPrepareResult",  v122,  0x16u);
          }

          v78 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v59 queue]);
          v104[0] = _NSConcreteStackBlock;
          v104[1] = 3221225472LL;
          v104[2] = sub_100009B9C;
          v104[3] = &unk_1000BEBE0;
          id v105 = v59;
          id v106 = *(id *)(a1 + 40);
          dispatch_async(v78, v104);

          v71 = v105;
          goto LABEL_69;
        case 4uLL:
        case 6uLL:
          uint64_t v67 = ne_log_obj(v65, v66);
          v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
          if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v87 = *(void *)(a1 + 32);
            *(_DWORD *)v122 = 138412546;
            uint64_t v123 = v87;
            __int16 v124 = 2080;
            v125 = "-[NESMAlwaysOnSession handleChangeEventForInterface:newFlags:previousFlags:]_block_invoke";
            _os_log_debug_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEBUG,  "%@:%s: calling handleInterfaceAvailable",  v122,  0x16u);
          }

          v69 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v59 queue]);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472LL;
          block[2] = sub_1000099E4;
          block[3] = &unk_1000BE8B0;
          uint64_t v70 = *(void *)(a1 + 32);
          uint64_t v110 = *(void *)(a1 + 56);
          void block[4] = v70;
          id v108 = v59;
          id v109 = *(id *)(a1 + 40);
          dispatch_async(v69, block);

          v71 = v108;
          goto LABEL_69;
        default:
          uint64_t v79 = ne_log_obj(v65, v66);
          v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v79);
          if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v80 = *(void *)(a1 + 32);
            unsigned int v81 = [v59 state];
            *(_DWORD *)v122 = 138412802;
            uint64_t v123 = v80;
            __int16 v124 = 2080;
            v125 = "-[NESMAlwaysOnSession handleChangeEventForInterface:newFlags:previousFlags:]_block_invoke_2";
            __int16 v126 = 1024;
            LODWORD(v127) = v81;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEBUG,  "%@:%s: no handling for state %d",  v122,  0x1Cu);
          }

          goto LABEL_67;
      }
    }

    v72 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v59 queue]);
    v99[0] = _NSConcreteStackBlock;
    v99[1] = 3221225472LL;
    v99[2] = sub_100009C10;
    v99[3] = &unk_1000BEBE0;
    id v100 = v59;
    id v101 = *(id *)(a1 + 40);
    dispatch_async(v72, v99);

    v71 = v100;
LABEL_69:
  }

  else
  {
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      uint64_t v85 = *(void *)(a1 + 32);
      v86 = *(void **)(a1 + 40);
      *(_DWORD *)v122 = 138412802;
      uint64_t v123 = v85;
      __int16 v124 = 2080;
      v125 = "-[NESMAlwaysOnSession handleChangeEventForInterface:newFlags:previousFlags:]_block_invoke";
      __int16 v126 = 2112;
      id v127 = v86;
      _os_log_error_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_ERROR,  "%@:%s: no vpn session for %@",  v122,  0x20u);
    }

    _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, v84, buf, 0xCu);
    goto LABEL_50;
  }

  unsigned int v81 = ne_log_obj(v3, v4);
  v180 = (os_log_t)objc_claimAutoreleasedReturnValue(v81);
  if (os_log_type_enabled(v180, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl( (void *)&_mh_execute_header,  v180,  OS_LOG_TYPE_ERROR,  "Cannot set policies for DNS Proxy provider, no process identity available for the provider",  buf,  2u);
  }

  uint64_t v82 = 0LL;
LABEL_52:

  return v82;
}

    uint64_t v49 = v66;
  }

  else
  {
    uint64_t v49 = 0LL;
  }

  return v49;
}

LABEL_67:
  }
}

      uint64_t v87 = 0;
      goto LABEL_68;
    }

    if (Type != 3)
    {
      unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([v4 tunnelOverheadBytes]);
      __int128 v10 = [v9 intValue];

      uint64_t v11 = [v3 getVirtualInterfaceMTU:v4];
      if ((int)v11 >= 1)
      {
        uint64_t v12 = (int)v11;
        id v13 = NEVirtualInterfaceSetMTU([v3 virtualInterface], v11);
        if ((_DWORD)v13) {
          goto LABEL_15;
        }
        __int128 v15 = ne_log_obj(v13, v14);
        uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
          goto LABEL_14;
        }
        *(_DWORD *)buf = 138412546;
        v163 = v3;
        v164 = 1024;
        LODWORD(v165) = v12;
        uint64_t v17 = "%@: failed to set the MTU to %d";
        goto LABEL_130;
      }

      if ((int)v10 >= 1)
      {
        uint64_t v18 = NEVirtualInterfaceSetMTUOverhead([v3 virtualInterface], v10);
        if (!(_DWORD)v18)
        {
          v20 = ne_log_obj(v18, v19);
          uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
          if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
LABEL_14:

            goto LABEL_15;
          }

          *(_DWORD *)buf = 138412546;
          v163 = v3;
          v164 = 1024;
          LODWORD(v165) = (_DWORD)v10;
          uint64_t v17 = "%@: failed to set the MTU overhead to %d";
LABEL_130:
          _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, v17, buf, 0x12u);
          goto LABEL_14;
        }
      }
    }

NESMIKEv2VPNSession *sub_1000092E4(NESMIKEv2VPNSession *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = sub_100009C50((uint64_t)a1, v3);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    if (!v5) {
      goto LABEL_9;
    }
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession configuration](a1, "configuration"));
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 alwaysOnVPN]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 interfaceProtocolMapping]);
    unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:v5]);

    if (v9)
    {
      __int128 v10 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession configuration](a1, "configuration"));
      id v11 = [v10 copy];

      uint64_t v12 = objc_alloc(&OBJC_CLASS___NESMIKEv2VPNSession);
      id v13 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession server](a1, "server"));
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v11 alwaysOnVPN]);
      __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 interfaceProtocolMapping]);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:v5]);
      if (v12)
      {
        *(void *)id v22 = v12;
        *(void *)&v22[8] = &OBJC_CLASS___NESMIKEv2VPNSession;
        uint64_t v12 = (NESMIKEv2VPNSession *)objc_msgSendSuper2( (objc_super *)v22,  "initWithConfiguration:andServer:andProtocol:andPluginType:andSessionType:sessionQ ueue:messageQueue:tunnelKind:parent:",  v11,  v13,  v16,  @"com.apple.NetworkExtension.IKEv2Provider",  3,  0,  0,  1,  a1);
      }

      id v17 = -[NESMVPNSession setInterfaceName:](v12, "setInterfaceName:", v3);
      uint64_t v19 = ne_log_obj(v17, v18);
      v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)id v22 = 138412802;
        *(void *)&v22[4] = a1;
        *(_WORD *)&v22[12] = 2080;
        *(void *)&v22[14] = "-[NESMAlwaysOnSession createVPNSession:]";
        __int16 v23 = 2112;
        id v24 = v3;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "%@:%s: Created VPN Session over %@",  v22,  0x20u);
      }

      a1 = v12;
    }

    else
    {
LABEL_9:
      a1 = 0LL;
    }
  }

  return a1;
}

void sub_10000952C(void *a1, const char *a2)
{
  if (a1 && !objc_getProperty(a1, a2, 360LL, 1))
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([a1 getIDSNetworkAgentDomain]);
    objc_setProperty_atomic(a1, v4, v3, 376LL);

    uint64_t v7 = ne_log_obj(v5, v6);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      int v15 = 138412546;
      id Property = objc_getProperty(a1, v9, 376LL, 1);
      __int16 v17 = 2112;
      uint64_t v18 = @"clientchannel";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "Watching <%@, %@> path",  (uint8_t *)&v15,  0x16u);
    }

    id v10 = objc_alloc_init(&OBJC_CLASS___NWParameters);
    objc_msgSend( v10,  "requireNetworkAgentWithDomain:type:",  objc_getProperty(a1, v11, 376, 1),  @"clientchannel");
    uint64_t v12 = -[NWPathEvaluator initWithEndpoint:parameters:]( objc_alloc(&OBJC_CLASS___NWPathEvaluator),  "initWithEndpoint:parameters:",  0LL,  v10);
    objc_setProperty_atomic(a1, v13, v12, 360LL);

    objc_msgSend( objc_getProperty(a1, v14, 360, 1),  "addObserver:forKeyPath:options:context:",  a1,  @"path",  5,  0);
  }

void sub_1000096D4(void *a1, const char *a2)
{
  if (a1)
  {
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    id v3 = objc_getProperty(a1, a2, 400LL, 1);
    id v4 = [v3 countByEnumeratingWithState:&v30 objects:v35 count:16];
    if (v4)
    {
      id v6 = v4;
      uint64_t v7 = 0LL;
      uint64_t v8 = *(void *)v31;
      do
      {
        for (i = 0LL; i != v6; i = (char *)i + 1)
        {
          if (*(void *)v31 != v8) {
            objc_enumerationMutation(v3);
          }
          id v10 = objc_msgSend( objc_getProperty(a1, v5, 400, 1),  "objectForKeyedSubscript:",  *(void *)(*((void *)&v30 + 1) + 8 * (void)i));
          SEL v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 pluginConfigurationEntities]);

          if (v12 && (!v7 || ([v11 isSecondaryInterface] & 1) == 0))
          {
            id v13 = v11;

            uint64_t v7 = v13;
          }
        }

        id v6 = [v3 countByEnumeratingWithState:&v30 objects:v35 count:16];
      }

      while (v6);
    }

    else
    {
      uint64_t v7 = 0LL;
    }

    __int128 v28 = 0u;
    __int128 v29 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    id v15 = objc_getProperty(a1, v14, 400LL, 1);
    id v16 = [v15 countByEnumeratingWithState:&v26 objects:v34 count:16];
    if (v16)
    {
      id v18 = v16;
      uint64_t v19 = *(void *)v27;
      do
      {
        for (j = 0LL; j != v18; j = (char *)j + 1)
        {
          if (*(void *)v27 != v19) {
            objc_enumerationMutation(v15);
          }
          uint64_t v21 = *(void *)(*((void *)&v26 + 1) + 8LL * (void)j);
          id Property = objc_getProperty(a1, v17, 400LL, 1);
          __int16 v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(Property, "objectForKeyedSubscript:", v21, (void)v26));
          id v24 = v23;
          if (v23 == v7)
          {
            __int16 v23 = v7;
            uint64_t v25 = 0LL;
          }

          else
          {
            uint64_t v25 = 1LL;
          }

          [v23 setIsSecondaryConnection:v25];
        }

        id v18 = [v15 countByEnumeratingWithState:&v26 objects:v34 count:16];
      }

      while (v18);
    }
  }

void sub_100009924(void *a1, void *a2)
{
  id v9 = a2;
  if (a1)
  {
    if (objc_getProperty(a1, v3, 408LL, 1))
    {
      id v4 = (void *)objc_claimAutoreleasedReturnValue([v9 interfaceName]);

      if (v4)
      {
        id v6 = objc_getProperty(a1, v5, 408LL, 1);
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v9 interfaceName]);
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:v7]);

        if (v8)
        {
          v8[1] = 0LL;
          v8[2] = 0LL;
        }
      }
    }
  }
}

void sub_1000099E4(uint64_t a1)
{
  if ((*(void *)(a1 + 56) & 3LL) == 0 || (*(void *)(a1 + 56) & 4LL) == 0)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) policySession]);
    id v4 = (unsigned int *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) primaryTunnelPlugin]);
    int v5 = sub_100016694(v4);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) primaryTunnelPlugin]);
    id v8 = sub_100015D14(v6, v7);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    id v10 = *(void **)(a1 + 48);
    SEL v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) protocol]);
    LOBYTE(v5) = sub_100042A2C((uint64_t)v3, v5, v9, v10, (char)[v11 enableRevocationCheck]);

    if ((v5 & 1) == 0)
    {
      uint64_t v14 = ne_log_obj(v12, v13);
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = *(void *)(a1 + 32);
        id v18 = (unsigned int *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) primaryTunnelPlugin]);
        int v19 = 138412802;
        uint64_t v20 = v17;
        __int16 v21 = 2080;
        id v22 = "-[NESMAlwaysOnSession handleChangeEventForInterface:newFlags:previousFlags:]_block_invoke";
        __int16 v23 = 1024;
        unsigned int v24 = sub_100016694(v18);
        _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%@:%s: failed to add Tunnel Control Policies for pid %d",  (uint8_t *)&v19,  0x1Cu);
      }
    }
  }

  id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) stateHandler]);
  [v16 handleInterfaceAvailable:*(void *)(a1 + 48) changed:0];
}

id sub_100009B9C(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleNetworkPrepareResult:*(void *)(a1 + 40)];
}

_BYTE *sub_100009BA8(uint64_t a1, const char *a2)
{
  result = *(_BYTE **)(a1 + 32);
  if (!result)
  {
    id Property = 0LL;
    id v4 = *(void **)(a1 + 40);
    return [v4 handleStartMessage:Property];
  }

  if ((result[353] & 1) == 0)
  {
    id v4 = *(void **)(a1 + 40);
    id Property = objc_getProperty(result, a2, 392LL, 1);
    return [v4 handleStartMessage:Property];
  }

  return result;
}

void sub_100009C10(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateHandler]);
  [v2 handleInterfaceUnavailable:*(void *)(a1 + 40)];
}

CFStringRef sub_100009C50(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v5 = v3;
  if (!a1)
  {
    uint64_t v13 = 0LL;
    goto LABEL_21;
  }

  __int16 v21 = 0;
  if (!v3)
  {
    uint64_t v14 = ne_log_obj(0LL, v4);
    SEL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412546;
      uint64_t v23 = a1;
      __int16 v24 = 2080;
      uint64_t v25 = "-[NESMAlwaysOnSession getConfigurationIndex:]";
      id v15 = "%@:%s: null ifName";
      id v16 = v11;
      uint32_t v17 = 22;
LABEL_18:
      _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, v15, buf, v17);
      goto LABEL_19;
    }

    goto LABEL_19;
  }

  id v6 = v3;
  uint64_t v7 = NEGetInterfaceType([v6 UTF8String], (char *)&v21 + 1, &v21);
  if (!(_DWORD)v7)
  {
    uint64_t v18 = ne_log_obj(v7, v8);
    SEL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412802;
      uint64_t v23 = a1;
      __int16 v24 = 2080;
      uint64_t v25 = "-[NESMAlwaysOnSession getConfigurationIndex:]";
      __int16 v26 = 2112;
      id v27 = v6;
      id v15 = "%@:%s: Failed to get interface type for %@";
LABEL_17:
      id v16 = v11;
      uint32_t v17 = 32;
      goto LABEL_18;
    }

LABEL_19:
    uint64_t v13 = 0LL;
    goto LABEL_20;
  }

  if (HIBYTE(v21))
  {
    int v9 = v21;
    uint64_t v10 = ne_log_obj(v7, v8);
    SEL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);
    if (v9)
    {
      uint64_t v13 = @"AlwaysOnVPNInterfaceWiFi";
      if (v12)
      {
        *(_DWORD *)buf = 138413058;
        uint64_t v23 = a1;
        __int16 v24 = 2080;
        uint64_t v25 = "-[NESMAlwaysOnSession getConfigurationIndex:]";
        __int16 v26 = 2112;
        id v27 = v6;
        __int16 v28 = 2112;
        __int128 v29 = @"AlwaysOnVPNInterfaceWiFi";
LABEL_14:
        _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "%@:%s: ifName %@: cfg index %@",  buf,  0x2Au);
        goto LABEL_20;
      }

      goto LABEL_20;
    }

    if (v12)
    {
      *(_DWORD *)buf = 138412802;
      uint64_t v23 = a1;
      __int16 v24 = 2080;
      uint64_t v25 = "-[NESMAlwaysOnSession getConfigurationIndex:]";
      __int16 v26 = 2112;
      id v27 = v6;
      id v15 = "%@:%s: ifName %@: Unsupported interface type";
      goto LABEL_17;
    }

    goto LABEL_19;
  }

  uint64_t v19 = ne_log_obj(v7, v8);
  SEL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
  uint64_t v13 = @"AlwaysOnVPNInterfaceCellular";
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138413058;
    uint64_t v23 = a1;
    __int16 v24 = 2080;
    uint64_t v25 = "-[NESMAlwaysOnSession getConfigurationIndex:]";
    __int16 v26 = 2112;
    id v27 = v6;
    __int16 v28 = 2112;
    __int128 v29 = @"AlwaysOnVPNInterfaceCellular";
    goto LABEL_14;
  }

    LOBYTE(self) = 0;
    goto LABEL_25;
  }

  __int16 v28 = ne_log_obj(0LL, v4);
  __int128 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    int v41 = self;
    _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_INFO,  "%@ configuration is removed/app uninstalled",  buf,  0xCu);
  }

  if (self)
  {
    self->_refCount = 0;
    sub_100012A44(self, v30);
    sub_100012AB0(self, v31);
    sub_100010EBC((uint64_t)self, v32);
    goto LABEL_19;
  }

  if ([a1 type] == 1)
  {
    uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
    id v39 = (void *)objc_claimAutoreleasedReturnValue([v38 VPN]);
    id v40 = (void *)objc_claimAutoreleasedReturnValue([v39 exceptionApps]);

    if (v40)
    {
      int v41 = [a1 tunnelKind];
      id v42 = (_DWORD *)objc_claimAutoreleasedReturnValue([a1 policySession]);
      uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
      uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v43 VPN]);
      id v45 = (void *)objc_claimAutoreleasedReturnValue([v44 exceptionApps]);
      if (v41 == (id)1)
      {
        id v46 = (void *)objc_claimAutoreleasedReturnValue([a1 server]);
        id v47 = (void *)objc_claimAutoreleasedReturnValue([v46 primaryPhysicalInterface]);
        uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([v47 interfaceName]);
        uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([a1 uid]);
        sub_10003B1CC((uint64_t)v42, v45, v48, (int)[v49 intValue]);
      }

      else
      {
        id v46 = (void *)objc_claimAutoreleasedReturnValue([a1 uid]);
        uint64_t v50 = [v46 intValue];
        uint64_t v51 = v45;
        id v52 = v53;
        if (v42 && isa_nsarray(v51) && v42[2] == 1)
        {
          uint64_t v54 = _NSConcreteStackBlock;
          uint64_t v55 = 3221225472LL;
          uint64_t v56 = sub_10003BB68;
          uint64_t v57 = &unk_1000BDCF8;
          id v58 = v42;
          uint64_t v59 = v52;
          uint64_t v60 = v51;
          uint64_t v61 = v50;
          sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, &v54);
        }
      }
    }
  }

  if ([a1 parentType] == (id)2)
  {
    __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([a1 parent]);
    if ((_DWORD)v23 && [a1 type] == 1)
    {
      uint64_t v25 = (void *)NEVirtualInterfaceCopyName([a1 virtualInterface]);
      __int16 v26 = a1;
      id v27 = v25;
      __int128 v29 = v27;
      if (v24)
      {
        if (v27)
        {
          __int128 v30 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v24 queue]);
          *(void *)buf = _NSConcreteStackBlock;
          *(void *)&buf[8] = 3221225472LL;
          *(void *)&buf[16] = sub_100086774;
          v69 = (const char *)&unk_1000BE900;
          uint64_t v70 = v29;
          v71 = v24;
          v72 = v26;
          dispatch_async(v30, buf);

          __int128 v31 = v70;
        }

        else
        {
          uint64_t v66 = ne_log_obj(0LL, v28);
          __int128 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 136315138;
            *(void *)&uint8_t buf[4] = "-[NESMIKEv2VPNFallbackSession handleSetConfigurationResult:tunnelInterfaceName:]";
            _os_log_fault_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_FAULT,  "%s called with null tunnelInterfaceName",  buf,  0xCu);
          }
        }
      }
    }
  }

  __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([a1 stateHandler]);
  [v32 handleSetConfigurationResult:v23];

  if ((v23 & 1) != 0) {
    __int128 v33 = 0LL;
  }
  else {
    __int128 v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NEAgentErrorDomain",  1LL,  0LL));
  }
  sub_100023778(a1, v33);
}

      uint64_t v20 = [v13 copyLegacyDictionary];
      id v22 = v20;
      if (v20)
      {
        uint64_t v23 = ne_log_obj(v20, v21);
        __int16 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v34 = v11;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "%@: Setting proxies", buf, 0xCu);
        }

        uint64_t v25 = NEVirtualInterfaceSetProxies([v11 virtualInterface], v22);
        if (!(_DWORD)v25)
        {
          id v27 = ne_log_obj(v25, v26);
          __int16 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            uint64_t v34 = v11;
            _os_log_error_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "%@: failed to set the proxy configuration",  buf,  0xCu);
          }
        }
      }

LABEL_27:
      __int128 v29 = *(void **)(a1 + 32);
      goto LABEL_28;
    }

LABEL_22:
      BOOL v12 = 0;
LABEL_23:

      if (v9 == ++v10) {
        return v12 & 1;
      }
    }

    __int16 v28 = CFArrayGetValueAtIndex(theArray, v10);
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    __int128 v29 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s destinationAddress](v14, "destinationAddress"));

    __int128 v30 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s destinationNetworkPrefixLength](v14, "destinationNetworkPrefixLength"));
    __int128 v31 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s gatewayAddress](v14, "gatewayAddress"));

    __int128 v32 = NEVirtualInterfaceAddIPv6Route([a1 virtualInterface], v29, v30, v31, a3);
    if ((_DWORD)v32) {
      goto LABEL_23;
    }
    uint64_t v34 = ne_log_obj(v32, v33);
    uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v44 = a1;
      _os_log_error_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "%@: failed to add an IPv6 route",  buf,  0xCu);
    }

    uint64_t v38 = ne_log_obj(v36, v37);
    uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_19;
    }
    *(_DWORD *)buf = 138413314;
    uint64_t v44 = a1;
    id v45 = 2112;
    id v46 = v41;
    id v47 = 2112;
    uint64_t v48 = v29;
    uint64_t v49 = 2112;
    uint64_t v50 = v30;
    uint64_t v51 = 2112;
    id v52 = v31;
    __int16 v26 = v25;
    id v27 = "%@: failed to add an IPv6 %@ route of %@/%@ -> %@";
    goto LABEL_26;
  }

  BOOL v12 = 1;
  return v12 & 1;
}

        id v22 = v15;
LABEL_33:

        id v40 = 2LL;
LABEL_34:
        int v41 = *(void **)(a1 + 32);
        if (v41 && objc_getProperty(v41, v39, 8LL, 1))
        {
          id Property = *(dispatch_queue_s **)(a1 + 32);
          if (Property)
          {
            id Property = (dispatch_queue_s *)objc_getProperty(Property, v42, 40LL, 1);
            uint64_t v44 = *(void *)(a1 + 32);
          }

          else
          {
            uint64_t v44 = 0LL;
          }

          v113[0] = _NSConcreteStackBlock;
          v113[1] = 3221225472LL;
          v113[2] = sub_10008D978;
          v113[3] = &unk_1000BEB20;
          v113[4] = v44;
          v113[5] = v40;
          id v45 = v113;
LABEL_99:
          dispatch_async(Property, v45);
          goto LABEL_100;
        }

        goto LABEL_100;
      }
    }

    else if (v5)
    {
      goto LABEL_100;
    }
  }

  if (![*(id *)(a1 + 40) state])
  {
    uint64_t v89 = *(void *)(a1 + 32);
    int v90 = v89 ? *(id *)(v89 + 48) : 0LL;
    __int128 v91 = [*(id *)(a1 + 48) slotID];
    if (v90 == v91)
    {
      uint64_t v93 = ne_log_obj(v91, v92);
      uint64_t v94 = (os_log_s *)objc_claimAutoreleasedReturnValue(v93);
      if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
      {
        id v100 = *(void *)(a1 + 32);
        if (v100) {
          id v101 = *(void **)(v100 + 48);
        }
        else {
          id v101 = 0LL;
        }
        *(_DWORD *)buf = 138412546;
        v132 = v100;
        v133 = 2048;
        v134 = v101;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_DEBUG,  "%@ Slot ID [%ld] is inactive",  buf,  0x16u);
      }

      v96 = *(void *)(a1 + 32);
      if (v96)
      {
        *(void *)(v96 + 48) = 0LL;
        v97 = *(void **)(a1 + 32);
        if (v97)
        {
          if (objc_getProperty(v97, v95, 8LL, 1))
          {
            id Property = *(dispatch_queue_s **)(a1 + 32);
            if (Property)
            {
              id Property = (dispatch_queue_s *)objc_getProperty(Property, v98, 40LL, 1);
              v99 = *(void *)(a1 + 32);
            }

            else
            {
              v99 = 0LL;
            }

            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472LL;
            block[2] = sub_10008D9AC;
            block[3] = &unk_1000BEC08;
            void block[4] = v99;
            id v45 = block;
            goto LABEL_99;
          }
        }
      }
    }
  }

LABEL_20:
LABEL_21:
  return v13;
}
}

    id v16 = 0LL;
    uint64_t v18 = 0LL;
    goto LABEL_17;
  }

LABEL_21:
    if (!--v10) {
      goto LABEL_108;
    }
  }

  uint64_t v14 = v12;
  if (sysctl(v120, 6u, v12, &v119, 0LL, 0LL) < 0)
  {
    id v15 = *__error();
    id v16 = v14;
    uint32_t v17 = v15;
    free(v16);
    if (v17 != 12)
    {
      __int128 v30 = strerror_r(v17, (char *)buf, 0x80uLL);
      if ((_DWORD)v30) {
        buf[0] = 0;
      }
      __int128 v32 = ne_log_obj(v30, v31);
      loga = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
      if (os_log_type_enabled(loga, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)v131 = 67109378;
        *(_DWORD *)&v131[4] = v17;
        *(_WORD *)&v131[8] = 2080;
        *(void *)&v131[10] = buf;
        _os_log_fault_impl( (void *)&_mh_execute_header,  loga,  OS_LOG_TYPE_FAULT,  "Unable to get routing table: [%d] %s",  v131,  0x12u);
      }

      goto LABEL_21;
    }

    uint64_t v20 = ne_log_obj(v18, v19);
    __int16 v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "Unable to get routing table because allocated buffer was too small",  buf,  2u);
    }

    goto LABEL_20;
  }

  id v46 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v39 = v46;
  uint64_t v48 = (unint64_t)v14 + v119;
  uint64_t v49 = (unsigned __int16 *)v14;
  logb = v14;
  while (2)
  {
    uint64_t v50 = (unsigned __int8 *)(v49 + 46);
    if ((unint64_t)(v49 + 46) > v48)
    {
      v97 = ne_log_obj(v46, v47);
      uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue(v97);
      if (!os_log_type_enabled((os_log_t)v98, OS_LOG_TYPE_ERROR))
      {
LABEL_97:

        break;
      }

      *(_WORD *)buf = 0;
      v99 = "Not enough data to read rtm";
LABEL_110:
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v98, OS_LOG_TYPE_ERROR, v99, buf, 2u);
      goto LABEL_97;
    }

    uint64_t v51 = *v49;
    if ((unint64_t)v49 + v51 > v48)
    {
      id v100 = ne_log_obj(v46, v47);
      uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue(v100);
      if (!os_log_type_enabled((os_log_t)v98, OS_LOG_TYPE_ERROR)) {
        goto LABEL_97;
      }
      *(_WORD *)buf = 0;
      v99 = "Not enough data to read routing table message";
      goto LABEL_110;
    }

    if ((_DWORD)v6 != v49[2] || (*((_DWORD *)v49 + 2) & 0x1800801) != 0x801 || (~*((_DWORD *)v49 + 3) & 7) != 0) {
      goto LABEL_68;
    }
    id v52 = v6;
    uint64_t v53 = objc_opt_self(&OBJC_CLASS___NESMLegacySession);
    uint64_t v55 = ne_log_obj(v53, v54);
    uint64_t v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "Attempting to parse route", buf, 2u);
    }

    uint64_t v59 = 0LL;
    memset(v130, 0, sizeof(v130));
    memset(v129, 0, sizeof(v129));
    id v127 = 0u;
    __int16 v128 = 0u;
    v125 = 0u;
    __int16 v126 = 0u;
    uint64_t v123 = 0u;
    __int16 v124 = 0u;
    memset(buf, 0, sizeof(buf));
    while (2)
    {
      uint64_t v60 = *v50;
      if (v60 >= 0x81)
      {
        uint64_t v70 = ne_log_obj(v57, v58);
        v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
        if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
        {
          uint64_t v93 = *v50;
          *(_DWORD *)v131 = 67109120;
          *(_DWORD *)&v131[4] = v93;
          _os_log_error_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_ERROR,  "sockaddr size %u is too large!",  v131,  8u);
        }

        id v6 = v52;
        goto LABEL_65;
      }

      uint64_t v57 = memcpy(&buf[v59], v50, *v50);
      uint64_t v61 = ((v60 - 1) & 0xFFFFFFFC) + 4LL;
      if (!v60) {
        uint64_t v61 = 4LL;
      }
      v50 += v61;
      v59 += 128LL;
      if (v59 != 384) {
        continue;
      }
      break;
    }

    if (v129[1] != 18)
    {
      v71 = ne_log_obj(v57, v58);
      v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(v71);
      id v6 = v52;
      if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v131 = 67109120;
        *(_DWORD *)&v131[4] = v129[1];
        _os_log_debug_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "Gateway family %u is wrong!", v131, 8u);
      }

void sub_100009F0C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) copyExtendedStatus];
  if (v2)
  {
    id v3 = v2;
    [*(id *)(a1 + 40) setObject:v2 forKeyedSubscript:*(void *)(a1 + 48)];
    id v2 = v3;
  }
}

uint64_t sub_100009F54(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100009F64(uint64_t a1)
{
}

void sub_100009F6C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) copyStatistics];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  int v5 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"BytesIn"]);
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) += [v6 unsignedLongLongValue];

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) objectForKeyedSubscript:@"BytesOut"]);
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) += [v7 unsignedLongLongValue];

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) objectForKeyedSubscript:@"PacketsIn"]);
    *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) += [v8 unsignedLongLongValue];

    int v9 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) objectForKeyedSubscript:@"PacketsOut"]);
    *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) += [v9 unsignedLongLongValue];

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) objectForKeyedSubscript:@"ErrorsIn"]);
    *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) += [v10 unsignedLongLongValue];

    id v11 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) objectForKeyedSubscript:@"ErrorsOut"]);
    *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) += [v11 unsignedLongLongValue];
  }

void sub_10000A128(uint64_t a1, const char *a2)
{
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 400LL, 1);
  }
  id v4 = Property;
  id v5 = [v4 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v5)
  {
    id v7 = v5;
    uint64_t v8 = *(void *)v21;
    do
    {
      int v9 = 0LL;
      do
      {
        if (*(void *)v21 != v8) {
          objc_enumerationMutation(v4);
        }
        uint64_t v10 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)v9);
        id v11 = *(id *)(a1 + 32);
        if (v11) {
          id v11 = objc_getProperty(v11, v6, 400LL, 1);
        }
        BOOL v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:v10]);
        uint64_t v13 = sub_100009C50(*(void *)(a1 + 32), v10);
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
        if (v14)
        {
          id v15 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v12 queue]);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472LL;
          block[2] = sub_10000A300;
          block[3] = &unk_1000BE900;
          id v17 = *(id *)(a1 + 40);
          id v18 = v12;
          id v19 = v14;
          dispatch_async(v15, block);
        }

        int v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v4 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }

    while (v7);
  }
}

void sub_10000A300(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) copy];
  uint64_t v3 = *(void **)(a1 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 alwaysOnVPN]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 interfaceProtocolMapping]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:*(void *)(a1 + 48)]);
  id v11 = v2;
  id v7 = v6;
  if (v3)
  {
    [v3 setConfiguration:v11];
    [v3 setProtocol:v7];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v11 VPN]);
    unsigned int v9 = [v8 isEnabled];

    if (v9)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 stateHandler]);
      [v10 handleUpdateConfiguration];
    }
  }
}

void sub_10000A3EC(uint64_t a1, const char *a2)
{
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 400LL, 1);
  }
  id obj = Property;
  id v4 = [obj countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v4)
  {
    id v6 = v4;
    uint64_t v7 = *(void *)v18;
    do
    {
      uint64_t v8 = 0LL;
      do
      {
        if (*(void *)v18 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = *(void *)(*((void *)&v17 + 1) + 8LL * (void)v8);
        id v10 = *(id *)(a1 + 32);
        if (v10) {
          id v10 = objc_getProperty(v10, v5, 400LL, 1);
        }
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:v9]);
        BOOL v12 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v11 queue]);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_10000A58C;
        block[3] = &unk_1000BEC08;
        id v16 = v11;
        id v13 = v11;
        dispatch_async(v12, block);

        uint64_t v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [obj countByEnumeratingWithState:&v17 objects:v21 count:16];
    }

    while (v6);
  }
}

void sub_10000A58C(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateHandler]);
  [v1 handleWakeup];
}

id sub_10000A5BC(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleStopMessageWithReason:*(unsigned int *)(a1 + 40)];
}

id sub_10000A5CC(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleStartMessage:*(void *)(a1 + 40)];
}

id sub_10000A5D8(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleInitializeState];
}

void sub_10000A63C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) policySession]);
  int v3 = *(_DWORD *)(a1 + 64);
  id v5 = sub_100015D14(*(id *)(a1 + 40), v4);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) interfaceName]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) protocol]);
  LOBYTE(v3) = sub_100042A2C((uint64_t)v2, v3, v6, v7, (char)[v8 enableRevocationCheck]);

  if ((v3 & 1) == 0)
  {
    uint64_t v11 = ne_log_obj(v9, v10);
    BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *(void *)(a1 + 32);
      int v15 = *(_DWORD *)(a1 + 64);
      int v16 = 138412802;
      uint64_t v17 = v14;
      __int16 v18 = 2080;
      __int128 v19 = "-[NESMAlwaysOnSession didStartWithPIDForSession:andVPNSession:andPID:error:]_block_invoke";
      __int16 v20 = 1024;
      int v21 = v15;
      _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "%@:%s: failed to add Tunnel Control Policies for pid %d",  (uint8_t *)&v16,  0x1Cu);
    }
  }

  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) stateHandler]);
  [v13 handlePlugin:*(void *)(a1 + 40) didStartWithPID:*(unsigned int *)(a1 + 64) error:*(void *)(a1 + 56)];
}

void sub_10000A7B4(uint64_t a1, const char *a2)
{
  int v3 = *(void **)(a1 + 32);
  id v4 = (void *)NEVirtualInterfaceCopyName(*(void *)(a1 + 48));
  sub_10007C308(v3, v4);

  id v5 = *(void **)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  uint64_t v7 = v6;
  if (!v5) {
    goto LABEL_10;
  }
  id v8 = [v6 virtualInterface];
  if (!v8)
  {
    uint64_t v21 = ne_log_obj(0LL, v9);
    __int128 v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
    if (!os_log_type_enabled((os_log_t)v22, OS_LOG_TYPE_ERROR))
    {
LABEL_9:

LABEL_10:
LABEL_21:
      uint64_t v35 = ne_log_obj(v26, v27);
      uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        uint64_t v37 = *(void *)(a1 + 32);
        uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) interfaceName]);
        *(_DWORD *)buf = 138412802;
        *(void *)&uint8_t buf[4] = v37;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v38;
        *(_WORD *)&buf[22] = 2080;
        id v52 = "-[NESMAlwaysOnSession installForSession:]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_ERROR,  "%@[%@]:%s: applyTunnelDataPolicy failed",  buf,  0x20u);
      }

      goto LABEL_24;
    }

    __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v7 interfaceName]);
    *(_DWORD *)buf = 138412802;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v23;
    *(_WORD *)&buf[22] = 2080;
    id v52 = "-[NESMAlwaysOnSession applyTunnelDataPolicyForSession:]";
    __int16 v24 = "%@[%@]:%s: NULL virtual interface";
LABEL_26:
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v22, OS_LOG_TYPE_ERROR, v24, buf, 0x20u);

    goto LABEL_9;
  }

  uint64_t v10 = NEVirtualInterfaceCopyName(v8);
  uint64_t v50 = v10;
  if (!v10)
  {
    uint64_t v25 = ne_log_obj(0LL, v11);
    __int128 v22 = (void *)objc_claimAutoreleasedReturnValue(v25);
    if (!os_log_type_enabled((os_log_t)v22, OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
    __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v7 interfaceName]);
    *(_DWORD *)buf = 138412802;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v23;
    *(_WORD *)&buf[22] = 2080;
    id v52 = "-[NESMAlwaysOnSession applyTunnelDataPolicyForSession:]";
    __int16 v24 = "%@[%@]:%s: NULL virtual interface name";
    goto LABEL_26;
  }

  BOOL v12 = (void *)v10;
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v5 configuration]);
  id v45 = sub_10005791C((uint64_t)&OBJC_CLASS___NEPolicySession, v13);

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v5 configuration]);
  id v44 = sub_100057888((uint64_t)&OBJC_CLASS___NEPolicySession, v14);

  uint64_t v49 = (_DWORD *)objc_claimAutoreleasedReturnValue([v5 policySession]);
  int v15 = (void *)objc_claimAutoreleasedReturnValue([v7 interfaceName]);
  unsigned __int8 v43 = [v7 isSecondaryConnection];
  int v16 = (void *)objc_claimAutoreleasedReturnValue([v7 pluginConfigurationEntities]);
  uint64_t v17 = objc_claimAutoreleasedReturnValue([v16 DNSSettings]);
  __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([v7 pluginConfigurationEntities]);
  __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v18 proxySettings]);
  unsigned __int8 v20 = [v19 enabled];
  uint64_t v48 = v16;
  id v46 = v18;
  if ((v20 & 1) != 0)
  {
    unsigned __int8 v41 = 1;
  }

  else
  {
    id v40 = (void *)objc_claimAutoreleasedReturnValue([v7 protocol]);
    id v39 = (void *)objc_claimAutoreleasedReturnValue([v40 proxySettings]);
    unsigned __int8 v41 = [v39 enabled];
  }

  id v47 = (void *)v17;
  BOOL v42 = v17 != 0;
  __int16 v28 = (void *)objc_claimAutoreleasedReturnValue([v5 configuration]);
  __int128 v29 = (void *)objc_claimAutoreleasedReturnValue([v28 alwaysOnVPN]);
  __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([v29 applicationExceptions]);
  id v31 = v12;
  id v32 = v15;
  id v33 = v30;
  char v34 = (char)v49;
  if (v49)
  {
    if (isa_nsstring(v31) && isa_nsstring(v32) && v49[2] == 3)
    {
      *(void *)buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&buf[16] = sub_100043414;
      id v52 = (const char *)&unk_1000BDF28;
      uint64_t v53 = v49;
      unsigned __int8 v59 = v43;
      id v54 = v32;
      id v57 = v45;
      id v58 = v44;
      id v55 = v33;
      unsigned __int8 v60 = v41;
      id v56 = v31;
      BOOL v61 = v42;
      char v34 = sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, buf);
    }

    else
    {
      char v34 = 0;
    }
  }

  if ((v20 & 1) == 0)
  {
  }

  myCFRelease(&v50);
  if ((v34 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_24:
  CFRelease(*(CFTypeRef *)(a1 + 48));
}

void sub_10000AC88(uint64_t a1, const char *a2)
{
  int v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) policySession]);
  sub_10002C144(v3, *(void **)(a1 + 40));

  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) policySession]);
  sub_10002C2B4((uint64_t)v4, *(void **)(a1 + 40));

  id v5 = *(void **)(a1 + 32);
  id v6 = (__CFString *)(id)NEVirtualInterfaceCopyName(*(void *)(a1 + 48));
  id v8 = v6;
  if (v5)
  {
    uint64_t v9 = ne_log_obj(v6, v7);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = @"[nil]";
      if (v8) {
        uint64_t v11 = v8;
      }
      int v15 = 138412546;
      int v16 = v5;
      __int16 v17 = 2112;
      __int16 v18 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%@: Request to remove network agent from %@",  (uint8_t *)&v15,  0x16u);
    }

    BOOL v12 = (void *)objc_claimAutoreleasedReturnValue([v5 networkAgentInterfaces]);
    int v13 = isa_nsarray(v12);

    if (v13)
    {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v5 networkAgentInterfaces]);
      [v14 removeObject:v8];

      sub_100078DB4(v5);
    }
  }

  CFRelease(*(CFTypeRef *)(a1 + 48));
}

void sub_10000ADFC(uint64_t a1)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) policySession]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) interfaceName]);
  int v3 = *(void **)(a1 + 48);
  id v4 = v2;
  id v5 = v3;
  if (v6)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_1000422E4;
    v7[3] = &unk_1000BDED8;
    v7[4] = v6;
    id v8 = v4;
    id v9 = v5;
    sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, v7);
  }
}

void sub_10000AED8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) policySession]);
  int v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) interfaceName]);
  sub_10002C08C(v2, v3);

  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) policySession]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) interfaceName]);
  sub_10002C1FC(v5, v4);
}

_BYTE *sub_10000AF6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = ne_log_obj(a1, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) interfaceName]);
    int v11 = 138412802;
    uint64_t v12 = v9;
    __int16 v13 = 2112;
    uint64_t v14 = v10;
    __int16 v15 = 2080;
    int v16 = "-[NESMAlwaysOnSession alwaysOnRetry:]_block_invoke";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%@[%@]:%s: Retrying now",  (uint8_t *)&v11,  0x20u);
  }

  result = *(_BYTE **)(a1 + 32);
  if (result)
  {
    if ((result[353] & 1) != 0) {
      return result;
    }
    uint64_t v7 = *(void **)(a1 + 40);
    id Property = objc_getProperty(result, v5, 392LL, 1);
  }

  else
  {
    id Property = 0LL;
    uint64_t v7 = *(void **)(a1 + 40);
  }

  return [v7 handleStartMessage:Property];
}

void sub_10000B090(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3 && (*(_BYTE *)(v3 + 353) & 1) != 0
    || (id v4 = *(void **)(a1 + 40),
        id v5 = objc_claimAutoreleasedReturnValue([v4 interfaceName]),
        LODWORD(v4) = objc_msgSend(v4, "isInterfaceIPAvailable:", objc_msgSend(v5, "UTF8String")),
        v5,
        !(_DWORD)v4))
  {
    uint64_t v12 = ne_log_obj(a1, a2);
    __int16 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v14 = *(void *)(a1 + 32);
      __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) interfaceName]);
      int v18 = 138412802;
      uint64_t v19 = v14;
      __int16 v20 = 2112;
      uint64_t v21 = v15;
      __int16 v22 = 2080;
      __int128 v23 = "-[NESMAlwaysOnSession alwaysOnRetry:]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%@[%@]:%s: Session stopped or interface down, no retry",  (uint8_t *)&v18,  0x20u);
    }
  }

  else
  {
    uint64_t v6 = ne_log_obj(a1, a2);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) interfaceName]);
      int v18 = 138412802;
      uint64_t v19 = v16;
      __int16 v20 = 2112;
      uint64_t v21 = v17;
      __int16 v22 = 2080;
      __int128 v23 = "-[NESMAlwaysOnSession alwaysOnRetry:]_block_invoke";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%@[%@]:%s: Retrying now",  (uint8_t *)&v18,  0x20u);
    }

    uint64_t v9 = *(void **)(a1 + 32);
    uint64_t v10 = *(void **)(a1 + 40);
    if (v9) {
      id Property = objc_getProperty(v9, v8, 392LL, 1);
    }
    else {
      id Property = 0LL;
    }
    [v10 handleStartMessage:Property];
  }

id sub_10000B274(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) status];
  [*(id *)(a1 + 32) setStatus:*(unsigned int *)(a1 + 40)];
  id result = [*(id *)(a1 + 32) status];
  if ((_DWORD)result == v2) {
    return [*(id *)(a1 + 32) notifyChangedExtendedStatus];
  }
  return result;
}

id sub_10000B4B4()
{
  if (qword_1000CFBA0 != -1) {
    dispatch_once(&qword_1000CFBA0, &stru_1000BD4E8);
  }
  return (id)qword_1000CFB98;
}

void sub_10000B4F8(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___NESMProviderManager);
  unsigned int v2 = (void *)qword_1000CFB98;
  qword_1000CFB98 = (uint64_t)v1;
}

void sub_10000B520(uint64_t a1)
{
  v8[0] = 0LL;
  v8[1] = v8;
  v8[2] = 0x3032000000LL;
  v8[3] = sub_10000B668;
  v8[4] = sub_10000B690;
  id v9 = objc_retainBlock(*(id *)(a1 + 40));
  unsigned int v2 = *(void **)(a1 + 32);
  if (v2) {
    unsigned int v2 = (void *)v2[2];
  }
  uint64_t v3 = v2;
  xpc_event_publisher_set_handler();

  id v4 = *(void **)(a1 + 32);
  if (v4) {
    id v4 = (void *)v4[2];
  }
  id v5 = v4;
  xpc_event_publisher_set_error_handler();

  uint64_t v6 = *(void **)(a1 + 32);
  if (v6) {
    uint64_t v6 = (void *)v6[2];
  }
  uint64_t v7 = v6;
  xpc_event_publisher_activate();

  _Block_object_dispose(v8, 8);
}

void sub_10000B650( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

id sub_10000B668(uint64_t a1, uint64_t a2)
{
  id result = objc_retainBlock(*(id *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_10000B690(uint64_t a1)
{
}

void sub_10000B698(uint64_t a1, int a2, char *a3, void *a4)
{
  id v6 = a4;
  id v8 = v6;
  switch(a2)
  {
    case 2:
      uint64_t v24 = ne_log_obj(v6, v7);
      uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Starting system extension listener",  buf,  2u);
      }

      uint64_t v26 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
      if (v26)
      {
        (*(void (**)(void))(v26 + 16))();
        uint64_t v27 = *(void *)(*(void *)(a1 + 40) + 8LL);
        __int16 v28 = *(void **)(v27 + 40);
        *(void *)(v27 + 40) = 0LL;
      }

      break;
    case 1:
      uint64_t v29 = ne_log_obj(v6, v7);
      __int128 v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        uint64_t v76 = a3;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "NESMProviderManager event publisher received a remove action with event subscription %llu",  buf,  0xCu);
      }

      id v47 = v8;

      uint64_t v31 = *(void *)(a1 + 32);
      if (v31)
      {
        id v32 = sub_10000C208((id *)objc_alloc(&OBJC_CLASS___NESMProviderRegistration), a3, 0LL);
        __int128 v66 = 0u;
        __int128 v67 = 0u;
        __int128 v64 = 0u;
        __int128 v65 = 0u;
        id obj = *(id *)(v31 + 24);
        id v51 = [obj countByEnumeratingWithState:&v64 objects:buf count:16];
        if (v51)
        {
          uint64_t v49 = *(void *)v65;
          uint64_t v50 = v31;
          do
          {
            uint64_t v33 = 0LL;
            do
            {
              if (*(void *)v65 != v49) {
                objc_enumerationMutation(obj);
              }
              uint64_t v52 = v33;
              uint64_t v54 = *(void *)(*((void *)&v64 + 1) + 8 * v33);
              char v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v31 + 24) objectForKeyedSubscript:v47]);
              __int128 v60 = 0u;
              __int128 v61 = 0u;
              __int128 v62 = 0u;
              __int128 v63 = 0u;
              id v35 = [v34 countByEnumeratingWithState:&v60 objects:v74 count:16];
              if (v35)
              {
                id v36 = v35;
                uint64_t v37 = *(void *)v61;
                do
                {
                  for (i = 0LL; i != v36; i = (char *)i + 1)
                  {
                    if (*(void *)v61 != v37) {
                      objc_enumerationMutation(v34);
                    }
                    uint64_t v39 = *(void *)(*((void *)&v60 + 1) + 8LL * (void)i);
                    id v40 = (void *)objc_claimAutoreleasedReturnValue([v34 objectForKeyedSubscript:v39]);
                    id v41 = [v40 indexOfObject:v32];
                    if (v41 != (id)0x7FFFFFFFFFFFFFFFLL)
                    {
                      id v43 = v41;
                      uint64_t v44 = ne_log_obj(v41, v42);
                      id v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
                      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)v68 = 134218498;
                        v69 = a3;
                        __int16 v70 = 2112;
                        uint64_t v71 = v54;
                        __int16 v72 = 2112;
                        uint64_t v73 = v39;
                        _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "Removing event subscription %llu for plugin %@ with extension point %@",  v68,  0x20u);
                      }

                      [v40 removeObjectAtIndex:v43];
                    }
                  }

                  id v36 = [v34 countByEnumeratingWithState:&v60 objects:v74 count:16];
                }

                while (v36);
              }

              uint64_t v33 = v52 + 1;
              uint64_t v31 = v50;
            }

            while ((id)(v52 + 1) != v51);
            id v51 = [obj countByEnumeratingWithState:&v64 objects:buf count:16];
          }

          while (v51);
        }
      }

      id v8 = v47;
      break;
    case 0:
      uint64_t v9 = ne_log_obj(v6, v7);
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        uint64_t v76 = a3;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "NESMProviderManager event publisher received an add action with event subscription %llu",  buf,  0xCu);
      }

      string = xpc_dictionary_get_string(v8, "NEProviderBundleIdentifier");
      xpc_object_t array = xpc_dictionary_get_array(v8, "NEExtensionPoints");
      uint64_t v13 = objc_claimAutoreleasedReturnValue(array);
      __int16 v15 = (void *)v13;
      if (string && *string)
      {
        uint64_t v16 = -[NSString initWithCString:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithCString:encoding:",  string,  4LL);
        uint64_t v18 = ne_log_obj(v16, v17);
        uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v76 = (const char *)v16;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Failed to find the expected code directory hashes for %@, it does not appear to be a registered system extension",  buf,  0xCu);
        }

        if (v15 && (xpc_type_t type = xpc_get_type(v15), type == (xpc_type_t)&_xpc_type_array))
        {
          applier[0] = _NSConcreteStackBlock;
          applier[1] = 3221225472LL;
          applier[2] = sub_10000BD48;
          applier[3] = &unk_1000BD510;
          applier[4] = *(void *)(a1 + 32);
          id v58 = string;
          unsigned __int8 v59 = a3;
          uint64_t v16 = v16;
          id v56 = v16;
          id v57 = 0LL;
          xpc_array_apply(v15, applier);
        }

        else
        {
          uint64_t v22 = ne_log_obj(type, v21);
          __int128 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            uint64_t v76 = "com.apple.networkextension.provider.matching";
            __int16 v77 = 2080;
            v78 = string;
            _os_log_error_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "Got a %s event subscription for provider %s without any extension points",  buf,  0x16u);
          }
        }
      }

      else
      {
        uint64_t v46 = ne_log_obj(v13, v14);
        uint64_t v16 = (NSString *)objc_claimAutoreleasedReturnValue(v46);
        if (os_log_type_enabled((os_log_t)v16, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315138;
          uint64_t v76 = "com.apple.networkextension.provider.matching";
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v16,  OS_LOG_TYPE_ERROR,  "Got a %s event subscription with a NULL or empty provider bundle identifier",  buf,  0xCu);
        }
      }

      break;
  }
}

void sub_10000BC64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = ne_log_obj();
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
  {
    int v9 = 136315138;
    uint64_t v10 = xpc_strerror(a2);
    _os_log_fault_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "Event publisher encountered an error: %s",  (uint8_t *)&v9,  0xCu);
  }

  uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
  if (v6)
  {
    (*(void (**)(void))(v6 + 16))();
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8LL);
    id v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = 0LL;
  }

uint64_t sub_10000BD48(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (!v5 || xpc_get_type(v5) != (xpc_type_t)&_xpc_type_string)
  {
    size_t length = xpc_string_get_length(v6);
    if (length)
    {
      uint64_t v9 = ne_log_obj(length, v8);
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v43 = a1[7];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "NEExtensionPoints";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v43;
        *(_WORD *)&buf[22] = 2048;
        uint64_t v49 = a2;
        _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Got a %s event subscription for provider %s with an invalid extension point at index %lu",  buf,  0x20u);
      }

LABEL_6:
      uint64_t v11 = 0LL;
      goto LABEL_26;
    }
  }

  uint64_t v12 = -[NSString initWithCString:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithCString:encoding:",  xpc_string_get_string_ptr(v6),  4LL);
  uint64_t v13 = a1[4];
  uint64_t v14 = v12;
  uint64_t v10 = (os_log_s *)v14;
  if (!v13)
  {

    goto LABEL_28;
  }

  if (!-[NSString isEqualToString:](v14, "isEqualToString:", @"com.apple.networkextension.filter-data")
    && (-[os_log_s isEqualToString:]( v10,  "isEqualToString:",  @"com.apple.networkextension.filter-packet") & 1) == 0 && (-[os_log_s isEqualToString:]( v10,  "isEqualToString:",  @"com.apple.networkextension.packet-tunnel") & 1) == 0 && !-[os_log_s isEqualToString:]( v10,  "isEqualToString:",  @"com.apple.networkextension.app-proxy"))
  {
    unsigned __int8 v38 = -[os_log_s isEqualToString:]( v10,  "isEqualToString:",  @"com.apple.networkextension.dns-proxy");

    if ((v38 & 1) != 0) {
      goto LABEL_13;
    }
LABEL_28:
    uint64_t v41 = ne_log_obj(v39, v40);
    uint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      uint64_t v44 = a1[7];
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "NEExtensionPoints";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v44;
      *(_WORD *)&buf[22] = 2048;
      uint64_t v49 = a2;
      LOWORD(v50) = 2112;
      *(void *)((char *)&v50 + 2) = v10;
      _os_log_error_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_ERROR,  "Got a %s event subscription for provider %s with an unknown extension point at index %lu: %@",  buf,  0x2Au);
    }

    goto LABEL_6;
  }

LABEL_13:
  __int16 v15 = (void *)a1[8];
  uint64_t v16 = a1[4];
  uint64_t v17 = (void *)a1[5];
  uint64_t v18 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  xpc_string_get_string_ptr(v6));
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  __int16 v20 = (void *)a1[6];
  id v21 = v17;
  id v22 = v19;
  if (v16)
  {
    id v23 = v20;
    uint64_t v25 = ne_log_obj(v23, v24);
    uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218498;
      *(void *)&uint8_t buf[4] = v15;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v21;
      *(_WORD *)&buf[22] = 2112;
      uint64_t v49 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Adding event subscription %llu for provider %@ with extension point %@",  buf,  0x20u);
    }

    uint64_t v27 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([*(id *)(v16 + 24) objectForKeyedSubscript:v21]);
    if (!v27)
    {
      uint64_t v27 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      [*(id *)(v16 + 24) setObject:v27 forKeyedSubscript:v21];
    }

    __int16 v28 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v27, "objectForKeyedSubscript:", v22));
    if (!v28)
    {
      __int16 v28 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v27, "setObject:forKeyedSubscript:", v28, v22);
    }

    id v45 = v22;
    uint64_t v46 = v10;
    uint64_t v29 = sub_10000C208((id *)objc_alloc(&OBJC_CLASS___NESMProviderRegistration), v15, v23);

    if (-[NSMutableArray indexOfObject:](v28, "indexOfObject:", v29) == (id)0x7FFFFFFFFFFFFFFFLL) {
      -[NSMutableArray addObject:](v28, "addObject:", v29);
    }
    id v30 = sub_10004F238((uint64_t)&OBJC_CLASS___NESMServer);
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
    v47[0] = _NSConcreteStackBlock;
    v47[1] = 3221225472LL;
    v47[2] = sub_10000C284;
    v47[3] = &unk_1000BD588;
    v47[4] = v16;
    id v32 = v21;
    id v33 = v21;
    id v35 = v47;
    if (v31)
    {
      id Property = (dispatch_queue_s *)objc_getProperty(v31, v34, 88LL, 1);
      *(void *)buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&buf[16] = sub_100052EB0;
      uint64_t v49 = &unk_1000BED30;
      *(void *)&__int128 v50 = v31;
      *((void *)&v50 + 1) = v33;
      id v51 = v35;
      dispatch_async(Property, buf);
    }

    id v21 = v32;
    id v22 = v45;
    uint64_t v10 = v46;
  }

  uint64_t v11 = 1LL;
LABEL_26:

  return v11;
}

    [*(id *)(a1 + 56) addPointer:v5];
    if ([*(id *)(a1 + 56) count] != (id)1) {
      goto LABEL_15;
    }
    uint64_t v8 = 2;
    goto LABEL_8;
  }
}

  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dnsRedirectionDetector]);
  if (v6 != v7)
  {

    goto LABEL_54;
  }

  uint64_t v8 = [*(id *)(a1 + 48) isEqualToString:@"status"];

  if (v8)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dnsRedirectionDetector]);
    uint64_t v10 = [v9 status];

    if (v10 == (id)2)
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dnsRedirectionDetector]);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 resolvedEndpoints]);
      uint64_t v13 = [v12 count];

      if (v13)
      {
        __int128 v66 = 0u;
        __int128 v67 = 0u;
        __int128 v64 = 0u;
        __int128 v65 = 0u;
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dnsRedirectionDetector]);
        __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 resolvedEndpoints]);

        uint64_t v16 = [v15 countByEnumeratingWithState:&v64 objects:v68 count:16];
        if (v16)
        {
          uint64_t v18 = v16;
          id v5 = 0LL;
          uint64_t v19 = *(void *)v65;
          do
          {
            __int16 v20 = 0LL;
            id v21 = v5;
            do
            {
              if (*(void *)v65 != v19) {
                objc_enumerationMutation(v15);
              }
              id v22 = *(NEOnDemandRuleConnect **)(*((void *)&v64 + 1) + 8LL * (void)v20);
              id v23 = ne_log_obj(v16, v17);
              uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v25 = *(NEOnDemandRuleConnect **)(a1 + 40);
                *(_DWORD *)buf = 138412546;
                __int16 v70 = v25;
                uint64_t v71 = 2112;
                __int16 v72 = v22;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "%@: Found redirected address %@",  buf,  0x16u);
              }

              uint64_t v26 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) lastPrimaryInterface]);
              NEHelperCacheAddRedirectedAddress( [v26 UTF8String],  -[NEOnDemandRuleConnect address](v22, "address"));

              id v5 = (NEOnDemandRuleConnect *)objc_claimAutoreleasedReturnValue(-[NEOnDemandRuleConnect hostname](v22, "hostname"));
              __int16 v20 = (char *)v20 + 1;
              id v21 = v5;
            }

            while (v18 != v20);
            uint64_t v16 = [v15 countByEnumeratingWithState:&v64 objects:v68 count:16];
            uint64_t v18 = v16;
          }

          while (v16);
        }

        else
        {
          id v5 = 0LL;
        }
      }

      else
      {
        id v5 = 0LL;
      }

      sub_100078D48(*(void **)(a1 + 40));
      [*(id *)(a1 + 40) setDnsRedirectionTransaction:0];
      id Property = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) server]);
      id v55 = Property;
      if (Property) {
        id Property = objc_getProperty(Property, v54, 64LL, 1);
      }
      __int16 v28 = Property;

      if (v5) {
        id v56 = -[NSDictionary initWithObjectsAndKeys:]( objc_alloc(&OBJC_CLASS___NSDictionary),  "initWithObjectsAndKeys:",  v5,  @"redirectedAddress",  0LL);
      }
      else {
        id v56 = objc_alloc_init(&OBJC_CLASS___NSDictionary);
      }
      id v58 = v56;
      unsigned __int8 v59 = ne_log_obj(v56, v57);
      __int128 v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        __int16 v70 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "Caching DNS redirector result: %@",  buf,  0xCu);
      }

      __int128 v61 = (void *)objc_claimAutoreleasedReturnValue(+[NENetworkPropertiesCache sharedCache](&OBJC_CLASS___NENetworkPropertiesCache, "sharedCache"));
      [v61 setProperties:v58 forNetworkPath:v28];

LABEL_53:
    }
  }

id *sub_10000C208(id *a1, void *a2, void *a3)
{
  id v6 = a3;
  if (a1)
  {
    v9.receiver = a1;
    v9.super_class = (Class)&OBJC_CLASS___NESMProviderRegistration;
    uint64_t v7 = (id *)objc_msgSendSuper2(&v9, "init");
    a1 = v7;
    if (v7)
    {
      v7[1] = a2;
      objc_storeStrong(v7 + 2, a3);
    }
  }

  return a1;
}

void sub_10000C284(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    id v5 = *(dispatch_queue_s **)(v4 + 8);
  }
  else {
    id v5 = 0LL;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10000C310;
  block[3] = &unk_1000BEC08;
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v5, block);
}

void sub_10000C310(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    __int128 v9 = 0u;
    __int128 v10 = 0u;
    __int128 v7 = 0u;
    __int128 v8 = 0u;
    id v2 = *(id *)(a1 + 32);
    id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = *(void *)v8;
      do
      {
        id v6 = 0LL;
        do
        {
          if (*(void *)v8 != v5) {
            objc_enumerationMutation(v2);
          }
          objc_msgSend(*(id *)(*((void *)&v7 + 1) + 8 * (void)v6), "handleInstalledAppsChanged", (void)v7);
          id v6 = (char *)v6 + 1;
        }

        while (v4 != v6);
        id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
      }

      while (v4);
    }
  }

void sub_10000C408(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2) {
    id v2 = (void *)v2[3];
  }
  id v3 = *(void **)(a1 + 40);
  uint64_t v5 = v2;
  if (v3) {
    id Property = objc_getProperty(v3, v4, 104LL, 1);
  }
  else {
    id Property = 0LL;
  }
  id v7 = Property;
  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:v7]);
  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:*(void *)(a1 + 48)]);

  if ([v9 count])
  {
    xpc_object_t v11 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_string( v11, "extension-point", (const char *)[*(id *)(a1 + 48) UTF8String]);
    id v12 = [v9 copy];
    sub_10000C5DC(*(void *)(a1 + 32), v11, 0LL, v12, *(void **)(a1 + 40), *(void **)(a1 + 56));
  }

  else
  {
    uint64_t v13 = ne_log_obj(0LL, v10);
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v15 = *(void **)(a1 + 40);
      if (v15) {
        __int16 v15 = (void *)v15[6];
      }
      uint64_t v16 = v15;
      uint64_t v17 = *(void *)(a1 + 48);
      int v18 = 138412546;
      uint64_t v19 = v16;
      __int16 v20 = 2112;
      uint64_t v21 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Cannot launch plugin type %@ for extension point %@, no provider is registered",  (uint8_t *)&v18,  0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
}

void sub_10000C5DC(uint64_t a1, void *a2, id a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a4;
  uint64_t v13 = a5;
  id v14 = a6;
  if (a1)
  {
    id v15 = [v12 count];
    if (v15 == a3)
    {
      uint64_t v17 = ne_log_obj(v15, v16);
      int v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        if (v13) {
          __int16 v28 = (void *)v13[6];
        }
        else {
          __int16 v28 = 0LL;
        }
        id v29 = v28;
        *(_DWORD *)buf = 138412290;
        id v38 = v29;
        _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Failed to launch %@", buf, 0xCu);
      }

      (*((void (**)(id, void, void, void))v14 + 2))(v14, 0LL, 0LL, 0LL);
    }

    else
    {
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v12 objectAtIndexedSubscript:a3]);
      if (v19) {
        uint64_t v20 = v19[1];
      }
      else {
        uint64_t v20 = 0LL;
      }

      id Property = (id)objc_claimAutoreleasedReturnValue([v12 objectAtIndexedSubscript:a3]);
      id v23 = Property;
      if (Property) {
        id Property = objc_getProperty(Property, v22, 16LL, 1);
      }
      id v24 = Property;

      uint64_t v26 = *(void *)(a1 + 8);
      uint64_t v25 = *(void *)(a1 + 16);
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472LL;
      v30[2] = sub_10000C82C;
      v30[3] = &unk_1000BD5D8;
      v30[4] = a1;
      id v31 = v11;
      id v36 = a3;
      id v32 = v12;
      id v33 = v13;
      id v34 = v24;
      id v35 = v14;
      id v27 = v24;
      xpc_event_publisher_fire_with_reply(v25, v20, v31, v26, v30);
    }
  }
}

void sub_10000C82C(uint64_t a1, void *a2)
{
  xpc_type_t v3 = a2;
  xpc_type_t v5 = v3;
  if (v3 && (xpc_type_t v3 = xpc_get_type(v3), v3 == (xpc_type_t)&_xpc_type_dictionary))
  {
    id v9 = -[NEProcessIdentity initFromXPCMessage:]( objc_alloc(&OBJC_CLASS___NEProcessIdentity),  "initFromXPCMessage:",  v5);
    if (v9)
    {
      [*(id *)(a1 + 64) count];
      uint64_t v10 = *(void *)(a1 + 56);

      if (v10)
      {
        xpc_object_t value = xpc_dictionary_get_value(v5, "listener-endpoint");
        xpc_type_t type = (xpc_type_t)objc_claimAutoreleasedReturnValue(value);
        xpc_type_t v16 = type;
        if (type && (xpc_type_t type = xpc_get_type(type), type == (xpc_type_t)&_xpc_type_endpoint))
        {
          id v23 = objc_alloc_init(&OBJC_CLASS___NSXPCListenerEndpoint);
          -[NSXPCListenerEndpoint _setEndpoint:](v23, "_setEndpoint:", v16);
          (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
        }

        else
        {
          uint64_t v17 = ne_log_obj(type, v15);
          int v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            int v26 = 134217984;
            xpc_type_t v27 = v16;
            _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "Missing endpoint (%p), in launch event reply",  (uint8_t *)&v26,  0xCu);
          }

          (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
        }
      }

      else
      {
        uint64_t v21 = ne_log_obj(v11, v12);
        id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          id v24 = *(void **)(a1 + 56);
          if (v24) {
            id v24 = (void *)v24[6];
          }
          uint64_t v25 = v24;
          int v26 = 138412290;
          xpc_type_t v27 = v25;
          _os_log_error_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "Rejecting agent %@ because it does not satisfy the code signature requirements",  (uint8_t *)&v26,  0xCu);
        }

        sub_10000C5DC( *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 80) + 1LL,  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 72));
      }
    }

    else
    {
      uint64_t v19 = ne_log_obj(0LL, v8);
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v26) = 0;
        _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "Failed to create the extension's process identity from the launch event reply",  (uint8_t *)&v26,  2u);
      }

      (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
    }
  }

  else
  {
    uint64_t v6 = ne_log_obj(v3, v4);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v26) = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Got an invalid event reply",  (uint8_t *)&v26,  2u);
    }

    sub_10000C5DC( *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 80) + 1LL,  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 72));
  }
}

uint64_t sub_10000CB18(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a1)
  {
    uint64_t v6 = objc_claimAutoreleasedReturnValue( +[NELaunchServices pluginClassToExtensionPoint:]( &OBJC_CLASS___NELaunchServices,  "pluginClassToExtensionPoint:",  a3));
    uint64_t v8 = (void *)v6;
    if (v6)
    {
      uint64_t v9 = ne_log_obj(v6, v7);
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)id v34 = 138412546;
        *(void *)&v34[4] = v5;
        *(_WORD *)&v34[12] = 2112;
        *(void *)&v34[14] = v8;
        _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Checking for %@ - %@", v34, 0x16u);
      }

      *(void *)id v34 = 0LL;
      *(void *)&v34[8] = v34;
      *(void *)&v34[16] = 0x3032000000LL;
      id v35 = sub_10000CD70;
      id v36 = sub_10000CD80;
      id v37 = 0LL;
      uint64_t v11 = *(dispatch_queue_s **)(a1 + 8);
      uint64_t v20 = _NSConcreteStackBlock;
      uint64_t v21 = 3221225472LL;
      id v22 = sub_10000CD88;
      id v23 = &unk_1000BE738;
      xpc_type_t v27 = v34;
      uint64_t v24 = a1;
      id v12 = v5;
      id v25 = v12;
      id v13 = v8;
      id v26 = v13;
      dispatch_sync(v11, &v20);
      uint64_t v16 = ne_log_obj(v14, v15);
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        id v18 = objc_msgSend(*(id *)(*(void *)&v34[8] + 40), "count", v20, v21, v22, v23, v24, v25);
        *(_DWORD *)buf = 134218498;
        id v29 = v18;
        __int16 v30 = 2112;
        id v31 = v12;
        __int16 v32 = 2112;
        id v33 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Found %lu registrations for %@ (%@)",  buf,  0x20u);
      }

      a1 = [*(id *)(*(void *)&v34[8] + 40) count] != 0;
      _Block_object_dispose(v34, 8);
    }

    else
    {
      a1 = 0LL;
    }
  }

  return a1;
}

void sub_10000CD48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_10000CD70(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10000CD80(uint64_t a1)
{
}

void sub_10000CD88(void *a1)
{
  id v2 = (void *)a1[4];
  if (v2) {
    id v2 = (void *)v2[3];
  }
  uint64_t v3 = a1[5];
  uint64_t v4 = v2;
  id v8 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v3]);
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:a1[6]]);
  uint64_t v6 = *(void *)(a1[7] + 8LL);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_10000CE04(uint64_t a1)
{
  uint64_t v3 = dispatch_group_create();
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v2, 40LL, 1);
  }
  id obj = Property;
  id v5 = [obj countByEnumeratingWithState:&v22 objects:v29 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v23;
    do
    {
      id v8 = 0LL;
      do
      {
        if (*(void *)v23 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = *(void **)(*((void *)&v22 + 1) + 8LL * (void)v8);
        dispatch_group_enter(v3);
        uint64_t v10 = *(void **)(a1 + 40);
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472LL;
        v20[2] = sub_10000D048;
        v20[3] = &unk_1000BEC08;
        uint64_t v21 = v3;
        id v11 = v10;
        id v13 = v20;
        if (v9)
        {
          uint64_t v14 = (dispatch_queue_s *)objc_getProperty(v9, v12, 24LL, 1);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472LL;
          block[2] = sub_10000D05C;
          block[3] = &unk_1000BED30;
          void block[4] = v9;
          __int16 v28 = v13;
          id v27 = v11;
          dispatch_async(v14, block);
        }

        id v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [obj countByEnumeratingWithState:&v22 objects:v29 count:16];
    }

    while (v6);
  }

  uint64_t v15 = *(void *)(a1 + 32);
  if (v15) {
    uint64_t v16 = *(dispatch_queue_s **)(v15 + 8);
  }
  else {
    uint64_t v16 = 0LL;
  }
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_10000D050;
  v18[3] = &unk_1000BE868;
  id v19 = *(id *)(a1 + 48);
  dispatch_group_notify(v3, v16, v18);
}

void sub_10000D048(uint64_t a1)
{
}

uint64_t sub_10000D050(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10000D05C(void *a1, const char *a2)
{
  id Property = (id)a1[4];
  if (Property) {
    id Property = objc_getProperty(Property, a2, 8LL, 1);
  }
  if ([Property count])
  {
    id v5 = (id)a1[4];
    if (v5) {
      id v5 = objc_getProperty(v5, v4, 8LL, 1);
    }
    id v6 = [v5 indexOfObject:a1[5]];
    if (v6 != (id)0x7FFFFFFFFFFFFFFFLL)
    {
      id v8 = v6;
      id v9 = (id)a1[4];
      if (v9) {
        id v9 = objc_getProperty(v9, v7, 8LL, 1);
      }
      [v9 removeObjectAtIndex:v8];
      id v11 = (id)a1[4];
      if (v11) {
        id v11 = objc_getProperty(v11, v10, 8LL, 1);
      }
      if (![v11 count])
      {
        id v13 = (id)a1[4];
        if (v13) {
          id v13 = objc_getProperty(v13, v12, 16LL, 1);
        }
        uint64_t v15 = (void (**)(void))v13;
        uint64_t v16 = (void *)a1[4];
        if (v16) {
          objc_setProperty_atomic_copy(v16, v14, 0LL, 16LL);
        }
        v15[2](v15);
      }
    }
  }

  return (*(uint64_t (**)(void))(a1[6] + 16LL))();
}

void sub_10000D414(_Unwind_Exception *a1)
{
}

void sub_10000DA78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

uint64_t sub_10000E238(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 appVPN]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uid]);
  objc_msgSend(v3, "updateAppRulesForUID:", objc_msgSend(v4, "unsignedIntValue"));

  [*(id *)(a1 + 32) resetPerAppPolicy];
  return sub_10007B8E8(*(void *)(a1 + 32), 1);
}

uint64_t sub_10000E2B4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 appVPN]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uid]);
  objc_msgSend(v3, "updateAppRulesForUID:", objc_msgSend(v4, "unsignedIntValue"));

  [*(id *)(a1 + 32) resetPerAppPolicy];
  return sub_10007B8E8(*(void *)(a1 + 32), 1);
}

void sub_10000E330(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    if ((a2 & 1) != 0)
    {
      id v5 = 0LL;
      (*(void (**)(uint64_t, void))(v3 + 16))(v3, 0LL);
    }

    else
    {
      id v5 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NEAgentErrorDomain",  1LL,  0LL));
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
      [WeakRetained setPluginConfigurationEntities:0];

      (*(void (**)(void, id))(*(void *)(a1 + 32) + 16LL))(*(void *)(a1 + 32), v5);
    }
  }

void sub_10000E3C8(uint64_t a1, id a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v6 = WeakRetained;
  if ((_DWORD)a2 && WeakRetained)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained policySession]);
    sub_10002EB18((uint64_t)v4);

    a2 = [v6 resetPerAppPolicy];
    id WeakRetained = v6;
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained stateHandler]);
  [v5 handleSetConfigurationResult:a2];
}

uint64_t sub_10000E444(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  keysToRemove = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
  NetworkServiceEntity = (__CFString *)SCDynamicStoreKeyCreateNetworkServiceEntity( kCFAllocatorDefault,  kSCDynamicStoreDomainState,  (CFStringRef)[v4 UUIDString],  kSCEntNetProxies);

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);
  id v8 = (__CFString *)SCDynamicStoreKeyCreateNetworkServiceEntity( kCFAllocatorDefault,  kSCDynamicStoreDomainState,  (CFStringRef)[v7 UUIDString],  kSCEntNetDNS);

  id v9 = *(void **)(a1 + 32);
  if (!v9 || !v9[85])
  {
    SCDynamicStoreRef v10 = SCDynamicStoreCreate(kCFAllocatorDefault, @"NESMFlowDivertSession state", 0LL, 0LL);
    uint64_t v11 = *(void *)(a1 + 32);
    if (v11)
    {
      *(void *)(v11 + 680) = v10;
      id v9 = *(void **)(a1 + 32);
    }

    else
    {
      id v9 = 0LL;
    }
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue([v9 pluginConfigurationEntities]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 proxySettings]);

  uint64_t v14 = *(void **)(a1 + 32);
  if (v13) {
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 pluginConfigurationEntities]);
  }
  else {
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 protocol]);
  }
  uint64_t v16 = v15;
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v15 proxySettings]);
  id v18 = [v17 copyLegacyDictionary];

  if (isa_nsdictionary(v18))
  {
    id v20 = [v18 mutableCopy];
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v19, 688LL, 1);
    }
    __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([Property controlUnit]);
    [v20 setObject:v22 forKeyedSubscript:kSCPropNetProxiesServiceSpecific];
  }

  else
  {
    id v20 = v18;
  }

  else {
    -[NSMutableArray addObject:](keysToRemove, "addObject:", NetworkServiceEntity);
  }
  BOOL v23 = sub_10000E8C0(*(void *)(a1 + 32), v20, NetworkServiceEntity);
  __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pluginConfigurationEntities]);
  __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([v24 DNSSettings]);

  if (v25)
  {
    id v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pluginConfigurationEntities]);
    id v27 = (void *)objc_claimAutoreleasedReturnValue([v26 DNSSettings]);
    id v28 = [v27 copyLegacyDictionary];
  }

  else
  {
    v46[0] = @"10.0.0.10";
    v46[1] = @"fe80::1";
    CFStringRef v47 = kSCPropNetDNSServerAddresses;
    id v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v46, 2LL));
    uint64_t v48 = v26;
    id v28 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v48,  &v47,  1LL));
  }

  id v30 = [v28 mutableCopy];
  id v31 = *(id *)(a1 + 32);
  if (v31) {
    id v31 = objc_getProperty(v31, v29, 688LL, 1);
  }
  __int16 v32 = (void *)objc_claimAutoreleasedReturnValue([v31 controlUnit]);
  [v30 setObject:v32 forKeyedSubscript:kSCPropNetDNSServiceIdentifier];

  -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v30, v8);
  BOOL v33 = sub_10000E8C0(*(void *)(a1 + 32), v30, v8);
  if (!v33 || !v23)
  {
    uint64_t v34 = ne_log_large_obj();
    id v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      uint64_t v43 = v2;
      __int16 v44 = 2112;
      id v45 = keysToRemove;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Setting %@, removing %@", buf, 0x16u);
    }

    uint64_t v36 = *(void *)(a1 + 32);
    if (v36) {
      id v37 = *(const __SCDynamicStore **)(v36 + 680);
    }
    else {
      id v37 = 0LL;
    }
    SCDynamicStoreSetMultiple(v37, (CFDictionaryRef)v2, (CFArrayRef)keysToRemove, 0LL);
  }

  uint64_t v38 = 4LL;
  if (v23) {
    uint64_t v38 = 0LL;
  }
  if (v33) {
    uint64_t v39 = v38;
  }
  else {
    uint64_t v39 = v38 | 2;
  }

  return v39;
}

BOOL sub_10000E8C0(uint64_t a1, void *a2, const __CFString *a3)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v4 = *(const __SCDynamicStore **)(a1 + 680);
  id v5 = a2;
  CFPropertyListRef v8 = SCDynamicStoreCopyValue(v4, a3);
  LODWORD(a3) = myCFEqual(v8, v5);

  BOOL v6 = (_DWORD)a3 != 0;
  myCFRelease(&v8);
  return v6;
}

uint64_t sub_10000E940(const char *a1, int32_t a2, char *a3, int32_t a4)
{
  UErrorCode pErrorCode = U_ZERO_ERROR;
  UIDNAInfo v15 = (UIDNAInfo)xmmword_10009E7E0;
  CFPropertyListRef v8 = uidna_openUTS46(0x22u, &pErrorCode);
  uint64_t v9 = uidna_nameToASCII_UTF8(v8, a1, a2, a3, a4, &v15, &pErrorCode);
  uidna_close(v8);
  if (pErrorCode)
  {
    id v12 = (os_log_s *)ne_log_obj(v10, v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      id v18 = a1;
      __int16 v19 = 1024;
      unsigned __int32 errors = pErrorCode;
      id v13 = "Failed to punycode label - uidna_nameToASCII_UTF8(%s) failed errorCode %d";
LABEL_9:
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, v13, buf, 0x12u);
      return 0LL;
    }

    return 0LL;
  }

  if (v15.errors)
  {
    id v12 = (os_log_s *)ne_log_obj(v10, v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      id v18 = a1;
      __int16 v19 = 1024;
      unsigned __int32 errors = v15.errors;
      id v13 = "Failed to punycode label - uidna_nameToASCII_UTF8(%s) failed info.errors 0x%08X";
      goto LABEL_9;
    }

    return 0LL;
  }

  return v9;
}

LABEL_25:
  return (char)self;
}

  __int128 v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  [v25 setObject:*(void *)(a1 + 72) forKeyedSubscript:@"service-domains"];
  [v25 setObject:&__kCFBooleanTrue forKeyedSubscript:@"service-probe-failed"];
  id v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) onDemandDomainCache]);
  [v26 addObject:v25];
  __int128 v22 = 0LL;
LABEL_26:

  sub_10007A194(*(void **)(a1 + 64));
}
}

void sub_10000F960( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10001088C(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if ((*(_BYTE *)(a1 + 354) & 1) == 0)
    {
      uint64_t v3 = ne_log_obj(a1, a2);
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        int v8 = 138412290;
        uint64_t v9 = a1;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%@: unable to request install as provider is not installed",  (uint8_t *)&v8,  0xCu);
      }

LABEL_12:
      return;
    }

    if (*(_DWORD *)(a1 + 356) == 1 || (_DWORD)a2 != 0)
    {
      uint64_t v6 = ne_log_obj(a1, a2);
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        int v8 = 138412290;
        uint64_t v9 = a1;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%@: requesting install", (uint8_t *)&v8, 0xCu);
      }

      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue([(id)a1 server]);
      -[os_log_s requestInstallForSession:withParentSession:exclusive:]( v4,  "requestInstallForSession:withParentSession:exclusive:",  a1,  0LL,  0LL);
      goto LABEL_12;
    }
  }

      return;
    }

    id v18 = objc_msgSend(objc_getProperty(a1, v17, 16, 1), "configuration");
    __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    id v20 = objc_claimAutoreleasedReturnValue([v19 externalIdentifier]);
    if (v20)
    {
      __int128 v22 = (void *)v20;
      BOOL v23 = objc_msgSend(objc_getProperty(a1, v21, 16, 1), "waitForPerApp");

      if (v23)
      {
        id v26 = ne_log_obj(v24, v25);
        id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          id v29 = objc_getProperty(a1, v28, 16LL, 1);
          CFStringRef v47 = 138412290;
          uint64_t v48 = v29;
          id v30 = "%@: Ignore restart for perApp session - no appRule or app not installed";
LABEL_11:
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, v30, (uint8_t *)&v47, 0xCu);
          goto LABEL_12;
        }

        goto LABEL_12;
      }
    }

    else
    {
    }

    uint64_t v34 = objc_msgSend(objc_getProperty(a1, v25, 16, 1), "startMessage");
    id v35 = (void *)objc_claimAutoreleasedReturnValue(v34);

    if (v35)
    {
      id v37 = objc_getProperty(a1, v36, 16LL, 1);
      uint64_t v39 = objc_msgSend(objc_getProperty(a1, v38, 16, 1), "startMessage");
      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
      [v37 handleStartMessage:v40];

      uint64_t v42 = objc_getProperty(a1, v41, 16LL, 1);
      __int16 v44 = objc_msgSend(objc_getProperty(a1, v43, 16, 1), "startMessage");
      id v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
      [v42 createConnectParametersWithStartMessage:v45];
    }

    objc_msgSend(objc_getProperty(a1, v36, 16, 1), "setRestartPending:", 0);
    objc_msgSend(objc_getProperty(a1, v46, 16, 1), "setState:", 2);
  }

  objc_sync_exit(v6);
}

uint64_t sub_1000109CC(id self, const char *a2)
{
  if (!self) {
    return 0LL;
  }
  if (*((void *)self + 51) == 1LL && *((void *)self + 50) != 1LL)
  {
    uint64_t v3 = 1LL;
    id v5 = objc_getProperty(self, a2, 376LL, 1);
    if (!v5) {
      return v3;
    }
    uint64_t v7 = v5;
    id Property = objc_getProperty(self, v6, 376LL, 1);
    if (!Property || (id v10 = objc_getProperty(Property, v9, 16LL, 1)) == 0LL)
    {
LABEL_20:

      return v3;
    }

    id v12 = v10;
    id v13 = objc_getProperty(self, v11, 416LL, 1);

    if (v13) {
      return v3;
    }
    uint64_t v14 = objc_alloc_init(&OBJC_CLASS___NEPolicySession);
    objc_setProperty_atomic(self, v15, v14, 416LL);

    id v17 = objc_msgSend(objc_getProperty(self, v16, 416, 1), "setPriority:", 300);
    uint64_t v19 = ne_log_obj(v17, v18);
    id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([self configuration]);
      uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([v53 appPush]);
      id v55 = (void *)objc_claimAutoreleasedReturnValue([v54 providerBundleIdentifier]);
      id v56 = (void *)objc_claimAutoreleasedReturnValue([self configuration]);
      id v57 = (void *)objc_claimAutoreleasedReturnValue([v56 applicationIdentifier]);
      int v61 = 138412802;
      id v62 = self;
      __int16 v63 = 2112;
      id v64 = v55;
      __int16 v65 = 2112;
      id v66 = v57;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "%@ setting up the scoping policies for [%@]:[%@]",  (uint8_t *)&v61,  0x20u);
    }

    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([self configuration]);
    __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v21 appPush]);
    BOOL v23 = (void *)objc_claimAutoreleasedReturnValue([v22 providerBundleIdentifier]);
    id v25 = objc_getProperty(self, v24, 376LL, 1);
    if (v25) {
      id v25 = objc_getProperty(v25, v26, 16LL, 1);
    }
    id v27 = v25;
    BOOL v28 = sub_100011450((uint64_t)self, v23, v27);

    if (v28)
    {
      id v31 = (void *)objc_claimAutoreleasedReturnValue([self configuration]);
      __int16 v32 = (void *)objc_claimAutoreleasedReturnValue([v31 applicationIdentifier]);
      id v34 = objc_getProperty(self, v33, 376LL, 1);
      if (v34) {
        id v34 = objc_getProperty(v34, v35, 16LL, 1);
      }
      id v36 = v34;
      BOOL v37 = sub_100011450((uint64_t)self, v32, v36);

      if (v37)
      {
        uint64_t v3 = (uint64_t)objc_msgSend(objc_getProperty(self, v39, 416, 1), "apply");
        uint64_t v41 = ne_log_obj(v3, v40);
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v41);
        if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_DEBUG))
        {
          int v61 = 138412290;
          id v62 = self;
          _os_log_debug_impl( (void *)&_mh_execute_header,  (os_log_t)v7,  OS_LOG_TYPE_DEBUG,  "%@ applied scoping policy",  (uint8_t *)&v61,  0xCu);
        }

        goto LABEL_20;
      }

      uint64_t v51 = ne_log_obj(v38, v39);
      uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
      if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
        goto LABEL_26;
      }
      __int16 v44 = (void *)objc_claimAutoreleasedReturnValue([self configuration]);
      id v45 = (void *)objc_claimAutoreleasedReturnValue([v44 applicationIdentifier]);
      id v59 = objc_getProperty(self, v58, 376LL, 1);
      if (v59) {
        id v59 = objc_getProperty(v59, v60, 16LL, 1);
      }
      id v46 = v59;
      int v61 = 138412802;
      id v62 = self;
      __int16 v63 = 2112;
      id v64 = v45;
      __int16 v65 = 2112;
      id v66 = v46;
      _os_log_error_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_ERROR,  "%@ failed to add policy for %@ [interface:%@]",  (uint8_t *)&v61,  0x20u);
    }

    else
    {
      uint64_t v42 = ne_log_obj(v29, v30);
      uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
      if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
LABEL_26:

        sub_100010FC8(self, v52);
        return 0LL;
      }

      __int16 v44 = (void *)objc_claimAutoreleasedReturnValue([self configuration]);
      id v45 = (void *)objc_claimAutoreleasedReturnValue([v44 appPush]);
      id v46 = (id)objc_claimAutoreleasedReturnValue([v45 providerBundleIdentifier]);
      id v48 = objc_getProperty(self, v47, 376LL, 1);
      if (v48) {
        id v48 = objc_getProperty(v48, v49, 16LL, 1);
      }
      id v50 = v48;
      int v61 = 138412802;
      id v62 = self;
      __int16 v63 = 2112;
      id v64 = v46;
      __int16 v65 = 2112;
      id v66 = v50;
      _os_log_error_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_ERROR,  "%@ failed to add policy for %@ [interface:%@]",  (uint8_t *)&v61,  0x20u);
    }

    goto LABEL_26;
  }

  return 1LL;
}

void sub_100010EBC(uint64_t a1, uint64_t a2)
{
  if (a1 && !*(_DWORD *)(a1 + 356))
  {
    uint64_t v3 = ne_log_obj(a1, a2);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v10 = 138412290;
      uint64_t v11 = a1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%@ exiting session", (uint8_t *)&v10, 0xCu);
    }

    sub_1000110BC((_BYTE *)a1, v5);
    objc_msgSend(objc_getProperty((id)a1, v6, 392, 1), "removeAllObjects");
    sub_10001118C((void *)a1, v7);
    sub_100011268((void *)a1, v8);
    sub_1000113B4(a1);
    sub_100010FC8((void *)a1, v9);
    *(void *)(a1 + 400) = 0LL;
    *(void *)(a1 + 40_Block_object_dispose(va, 8) = 0LL;
  }

void sub_100010FC8(void *a1, const char *a2)
{
  if (a1 && objc_getProperty(a1, a2, 416LL, 1))
  {
    objc_msgSend(objc_getProperty(a1, v3, 416, 1), "removeAllPolicies");
    objc_msgSend(objc_getProperty(a1, v4, 416, 1), "apply");
    objc_setProperty_atomic(a1, v5, 0LL, 416LL);
    uint64_t v8 = ne_log_obj(v6, v7);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      int v10 = 138412290;
      uint64_t v11 = a1;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "%@ removed scoping policies",  (uint8_t *)&v10,  0xCu);
    }
  }

void sub_1000110BC(_BYTE *a1, uint64_t a2)
{
  if (a1 && (a1[353] & 1) != 0)
  {
    uint64_t v3 = ne_log_obj(a1, a2);
    SEL v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v6 = 138412290;
      uint64_t v7 = a1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%@: requesting uninstall", (uint8_t *)&v6, 0xCu);
    }

    SEL v5 = (void *)objc_claimAutoreleasedReturnValue([a1 server]);
    [v5 requestUninstallForSession:a1];
  }

void sub_10001118C(void *a1, const char *a2)
{
  if (a1 && objc_getProperty(a1, a2, 360LL, 1))
  {
    objc_msgSend(objc_getProperty(a1, v3, 360, 1), "invalidate");
    objc_setProperty_atomic(a1, v4, 0LL, 360LL);
    uint64_t v7 = ne_log_obj(v5, v6);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      int v9 = 138412290;
      int v10 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%@: invalidated provider wake timer",  (uint8_t *)&v9,  0xCu);
    }
  }

void sub_100011268(void *a1, const char *a2)
{
  if (a1 && objc_getProperty(a1, a2, 384LL, 1))
  {
    id Property = objc_getProperty(a1, v3, 384LL, 1);
    if (Property)
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([Property remotePluginObject]);
      [v6 stopWithReason:4];
    }

    uint64_t v7 = ne_log_obj(Property, v5);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      int v9 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
      int v10 = (void *)objc_claimAutoreleasedReturnValue([v9 appPush]);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 providerBundleIdentifier]);
      int v12 = 138412802;
      id v13 = a1;
      __int16 v14 = 2112;
      SEL v15 = v11;
      __int16 v16 = 2080;
      uint64_t v17 = ne_session_stop_reason_to_string(4LL);
      _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "%@ stopping app push provider [%@] with reason [%s]",  (uint8_t *)&v12,  0x20u);
    }
  }

void sub_1000113B4(uint64_t a1)
{
  if (a1 && *(void *)(a1 + 400) == 1LL)
  {
    *(void *)(a1 + 400) = 2LL;
    id v1 = sub_100080244((uint64_t)&OBJC_CLASS___NEWiFiManager);
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
    if (v2)
    {
      block[1] = 3221225472LL;
      block[2] = sub_100080410;
      block[3] = &unk_1000BEC08;
      void block[4] = v2;
      id v3 = v2;
      block[0] = _NSConcreteStackBlock;
      dispatch_async(&_dispatch_main_q, block);
      uint64_t v2 = v3;
    }
  }

BOOL sub_100011450(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v27 = 0LL;
  BOOL v28 = &v27;
  uint64_t v29 = 0x2020000000LL;
  char v30 = 1;
  id v7 = v5;
  id v31 = 0LL;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[LSBundleRecord bundleRecordWithBundleIdentifier:allowPlaceholder:error:]( &OBJC_CLASS___LSBundleRecord,  "bundleRecordWithBundleIdentifier:allowPlaceholder:error:",  v7,  0LL,  &v31));
  id v9 = v31;
  uint64_t v11 = v9;
  if (v8) {
    BOOL v12 = v9 == 0LL;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12)
  {
    SEL v15 = (void *)objc_claimAutoreleasedReturnValue([v8 machOUUIDs]);
  }

  else
  {
    uint64_t v13 = ne_log_obj(v9, v10);
    __int16 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412802;
      uint64_t v33 = a1;
      __int16 v34 = 2112;
      id v35 = v7;
      __int16 v36 = 2112;
      BOOL v37 = v11;
      _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%@ failed to get bundle record for [%@], error: %@",  buf,  0x20u);
    }

    SEL v15 = 0LL;
  }

  if (v15 && (id v16 = [v15 count]) != 0)
  {
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_1000116EC;
    v22[3] = &unk_1000BD678;
    int v26 = 20000;
    id v18 = (id)objc_claimAutoreleasedReturnValue( +[NEPolicyResult scopeSocketToInterfaceName:]( &OBJC_CLASS___NEPolicyResult,  "scopeSocketToInterfaceName:",  v6));
    id v23 = v18;
    uint64_t v24 = a1;
    id v25 = &v27;
    [v15 enumerateObjectsUsingBlock:v22];
    BOOL v19 = *((_BYTE *)v28 + 24) != 0;
  }

  else
  {
    uint64_t v20 = ne_log_obj(v16, v17);
    id v18 = (id)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled((os_log_t)v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      uint64_t v33 = a1;
      __int16 v34 = 2112;
      id v35 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v18,  OS_LOG_TYPE_ERROR,  "%@ failed to get MachO UUIDs for [%@]",  buf,  0x16u);
    }

    BOOL v19 = 0LL;
  }

  _Block_object_dispose(&v27, 8);
  return v19;
}

void sub_1000116C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void sub_1000116EC(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6 = a2;
  id v7 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  v6));

  -[NSMutableArray addObject:](v7, "addObject:", v8);
  id v10 = [[NEPolicy alloc] initWithOrder:*(unsigned int *)(a1 + 56) result:*(void *)(a1 + 32) conditions:v7];
  id Property = *(id *)(a1 + 40);
  if (Property) {
    id Property = objc_getProperty(Property, v9, 416LL, 1);
  }
  id v12 = [Property addPolicy:v10];
  uint64_t v14 = ne_log_obj(v12, v13);
  SEL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  id v16 = v15;
  if (v12)
  {
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = *(void *)(a1 + 40);
      int v19 = 138412546;
      uint64_t v20 = v17;
      __int16 v21 = 2112;
      id v22 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "%@ successfully added policy: %@",  (uint8_t *)&v19,  0x16u);
    }
  }

  else
  {
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)(a1 + 40);
      int v19 = 138412546;
      uint64_t v20 = v18;
      __int16 v21 = 2112;
      id v22 = v10;
      _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "%@ failed to add policy: %@",  (uint8_t *)&v19,  0x16u);
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
    *a4 = 1;
  }
}

void sub_1000118B8(void *a1, const char *a2)
{
  if (a1 && objc_getProperty(a1, a2, 384LL, 1))
  {
    id Property = objc_getProperty(a1, v3, 384LL, 1);
    sub_100015E44(Property, v5);
    uint64_t v8 = ne_log_obj(v6, v7);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 appPush]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 providerBundleIdentifier]);
      int v13 = 138412546;
      uint64_t v14 = a1;
      __int16 v15 = 2112;
      id v16 = v12;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "%@ disposing app push provider [%@]",  (uint8_t *)&v13,  0x16u);
    }
  }

void sub_1000119D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = ne_log_obj(a1, a2);
  SEL v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = *(void **)(a1 + 32);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 configuration]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 application]);
    *(_DWORD *)buf = 138412546;
    uint64_t v17 = v5;
    __int16 v18 = 2112;
    int v19 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%@ reporting incoming call for app [%@]",  buf,  0x16u);
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  *(void *)(a1 + 40)));
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 identifier]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 UUIDString]);
  [v8 setObject:v11 forKeyedSubscript:@"ap-push-config-uuid"];

  id v12 = objc_alloc_init(&OBJC_CLASS___CXNetworkExtensionMessageController);
  int v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 application]);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_100011BA0;
  v15[3] = &unk_1000BD6C8;
  v15[4] = *(void *)(a1 + 32);
  [v12 sendNetworkExtensionMessage:v8 forBundleIdentifier:v14 completion:v15];
}

void sub_100011BA0(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v7 = ne_log_obj(v5, v6);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = v8;
  if (a2)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v12 = 138412290;
      uint64_t v13 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%@ reported incoming call to CallKit",  (uint8_t *)&v12,  0xCu);
    }
  }

  else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    int v12 = 138412546;
    uint64_t v13 = v11;
    __int16 v14 = 2112;
    id v15 = v5;
    _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%@ failed to report incoming call to CallKit, error: %@",  (uint8_t *)&v12,  0x16u);
  }
}

void sub_100011CB8(void *a1, uint64_t a2)
{
  uint64_t v3 = ne_log_obj(a1, a2);
  SEL v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = a1[4];
    uint64_t v17 = a1[5];
    int v20 = 138412546;
    uint64_t v21 = v16;
    __int16 v22 = 2112;
    uint64_t v23 = v17;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%@ searching completion handler for message ID: [%@]",  (uint8_t *)&v20,  0x16u);
  }

  id Property = (id)a1[4];
  if (Property) {
    id Property = objc_getProperty(Property, v5, 392LL, 1);
  }
  uint64_t v7 = (void (**)(void, void))objc_claimAutoreleasedReturnValue([Property objectForKeyedSubscript:a1[5]]);
  uint64_t v9 = ne_log_obj(v7, v8);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  uint64_t v11 = v10;
  if (v7)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = a1[4];
      uint64_t v13 = a1[5];
      int v20 = 138412546;
      uint64_t v21 = v12;
      __int16 v22 = 2112;
      uint64_t v23 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%@ delivering error to the app for message ID: [%@]",  (uint8_t *)&v20,  0x16u);
    }

    v7[2](v7, a1[6]);
    id v15 = (id)a1[4];
    if (v15) {
      id v15 = objc_getProperty(v15, v14, 392LL, 1);
    }
    [v15 removeObjectForKey:a1[5]];
  }

  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = a1[4];
      uint64_t v19 = a1[5];
      int v20 = 138412546;
      uint64_t v21 = v18;
      __int16 v22 = 2112;
      uint64_t v23 = v19;
      _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "%@ failed to find completion handler for message ID [%@]",  (uint8_t *)&v20,  0x16u);
    }
  }
}

void sub_100011E8C(void *a1, const char *a2)
{
  if (a1)
  {
    if (objc_getProperty(a1, a2, 360LL, 1))
    {
      objc_msgSend(objc_getProperty(a1, v3, 360, 1), "cancel");
    }

    else
    {
      SEL v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"com.apple.networkextension[NEAppPushSession-ProviderWakeTimer-%@]",  a1));
      id v5 = -[SWWakingTimer initWithIdentifier:](objc_alloc(&OBJC_CLASS___SWWakingTimer), "initWithIdentifier:", v4);
      objc_setProperty_atomic(a1, v6, v5, 360LL);
    }

    objc_initWeak(&location, a1);
    id v8 = objc_getProperty(a1, v7, 360LL, 1);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([a1 queue]);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_100012098;
    v14[3] = &unk_1000BD6A0;
    objc_copyWeak(&v15, &location);
    [v8 scheduleWithFireInterval:v9 leewayInterval:v14 queue:60.0 handler:5.0];

    uint64_t v12 = ne_log_obj(v10, v11);
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v18 = a1;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%@: started provider wake timer", buf, 0xCu);
    }

    objc_destroyWeak(&v15);
    objc_destroyWeak(&location);
  }

void sub_10001205C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_100012098(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  self = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v3 = ne_log_obj(WeakRetained, v2);
    SEL v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412290;
      id v10 = self;
      _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%@: waking provider", buf, 0xCu);
    }

    id Property = objc_getProperty(self, v5, 384LL, 1);
    if (Property)
    {
      SEL v7 = (void *)objc_claimAutoreleasedReturnValue([Property remotePluginObject]);
      [v7 sendTimerEvent];
    }

    sub_100011E8C(self);
  }
}

void sub_100012184(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    objc_setProperty_atomic(v3, a2, 0LL, 384LL);
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4)
    {
      if (*(_DWORD *)(v4 + 356)) {
        sub_10001088C(v4, 1LL);
      }
    }
  }

void sub_1000121E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && *(_DWORD *)(v2 + 356))
  {
    uint64_t v4 = ne_log_obj(a1, a2);
    SEL v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v8 = 138412290;
      uint64_t v9 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "%@: re-trying to start the provider",  (uint8_t *)&v8,  0xCu);
    }

    sub_1000122A4(*(void *)(a1 + 32), v7);
  }

void sub_1000122A4(uint64_t a1, uint64_t a2)
{
  if (a1 && (*(_BYTE *)(a1 + 353) & 1) != 0)
  {
    uint64_t v3 = ne_log_obj(a1, a2);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      int v43 = *(_DWORD *)(a1 + 356);
      *(_DWORD *)buf = 138412546;
      *(void *)&uint8_t buf[4] = a1;
      __int16 v46 = 1024;
      LODWORD(v47) = v43;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%@: startProvider (reference count [%d])",  buf,  0x12u);
    }

    uint64_t v6 = sub_1000109CC((id)a1, v5);
    if ((v6 & 1) == 0)
    {
      uint64_t v8 = ne_log_obj(v6, v7);
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = a1;
        _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%@ failed to set the scoping policy",  buf,  0xCu);
      }
    }

    if (!objc_getProperty((id)a1, v7, 384LL, 1))
    {
      uint64_t v11 = (objc_class *)objc_opt_class(&OBJC_CLASS___NEAgent);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 configuration]);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 appPush]);
      __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v13 pluginType]);

      id v15 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 configuration]);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 appPush]);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 providerBundleIdentifier]);

      if (v17)
      {
        uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NELaunchServices pluginProxyWithIdentifier:type:pluginClass:extensionPoint:]( &OBJC_CLASS___NELaunchServices,  "pluginProxyWithIdentifier:type:pluginClass:extensionPoint:",  v17,  v14,  7LL,  0LL));
        if (v21)
        {
          id v22 = objc_alloc(v11);
          __int16 v44 = @"extension-identifier";
          *(void *)buf = v17;
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  buf,  &v44,  1LL));
          uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 uid]);
          id v25 = (os_log_s *)[v22 initWithPluginType:v14 pluginVersion:1 pluginClass:7 pluginInfo:v23 userID:v24];

          if (v25)
          {
            int v26 = objc_alloc(&OBJC_CLASS___NEAppPushPlugin);
            uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 queue]);
            BOOL v28 = -[NEPlugin initWithAgent:delegateQueue:andDelegate:]( v26,  "initWithAgent:delegateQueue:andDelegate:",  v25,  v27,  a1);
            objc_setProperty_atomic((id)a1, v29, v28, 384LL);
          }
        }

        else
        {
          uint64_t v31 = ne_log_obj(0LL, v20);
          id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            *(void *)&uint8_t buf[4] = a1;
            __int16 v46 = 2112;
            SEL v47 = v17;
            _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "%@: Plugin %@ is not available in launch services",  buf,  0x16u);
          }
        }
      }

      else
      {
        uint64_t v30 = ne_log_obj(v18, v19);
        uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = a1;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "%@: Failed to find the provider bundle identifier",  buf,  0xCu);
        }
      }
    }

    if (objc_getProperty((id)a1, v10, 384LL, 1))
    {
      uint64_t v33 = objc_getProperty((id)a1, v32, 384LL, 1);
      __int16 v34 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 configuration]);
      sub_100014E78(v33, v34);

      uint64_t v37 = ne_log_obj(v35, v36);
      uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 configuration]);
        uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v39 appPush]);
        uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v40 providerBundleIdentifier]);
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = a1;
        __int16 v46 = 2112;
        SEL v47 = v41;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_INFO,  "%@: starting app push provider [%@]",  buf,  0x16u);
      }
    }

    else
    {
      uint64_t v42 = ne_log_obj(0LL, v32);
      uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = a1;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_INFO,  "%@: failed to initilaize the plugin",  buf,  0xCu);
      }
    }
  }

uint64_t sub_100012754(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100012764(uint64_t a1)
{
}

void sub_10001276C(uint64_t a1, void *a2)
{
  id v3 = a2;
  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 32));
  if (v3)
  {
    uint64_t v17 = @"AppPushSendCallInfoErrorCode";
    SEL v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v3 code]));
    uint64_t v18 = v5;
    uint64_t v6 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v18,  &v17,  1LL));
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }

  else
  {
    id v15 = @"AppPushSendCallInfoErrorCode";
    uint64_t v16 = &off_1000C17A0;
    uint64_t v9 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v16,  &v15,  1LL));
    uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8LL);
    SEL v5 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;
  }

  uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  if (v11)
  {
    uint64_t v12 = (void *)_CFXPCCreateXPCObjectFromCFObject(v11);
    xpc_dictionary_set_value(reply, "SessionAppPushSendMessageResult", v12);
  }

  xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
  __int16 v14 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
  xpc_connection_send_message(v14, reply);
}

void sub_1000128D8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  id v4 = objc_retainBlock(*(id *)(a1 + 48));
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 392LL, 1);
  }
  [Property setObject:v4 forKeyedSubscript:v2];

  id v7 = *(id *)(a1 + 32);
  if (v7)
  {
    id v7 = objc_getProperty(v7, v6, 384LL, 1);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void **)(a1 + 40);
      id v10 = v2;
      id v11 = v9;
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v8 remotePluginObject]);
      [v12 sendOutgoingCallMessage:v11 andMessageID:v10];
    }
  }

  uint64_t v13 = ne_log_obj(v7, v6);
  __int16 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v15 = *(void *)(a1 + 32);
    int v16 = 138412546;
    uint64_t v17 = v15;
    __int16 v18 = 2112;
    uint64_t v19 = v2;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "%@ added completion handler for message ID: [%@]",  (uint8_t *)&v16,  0x16u);
  }
}

void sub_100012A44(void *a1, const char *a2)
{
  if (a1)
  {
    if (objc_getProperty(a1, a2, 368LL, 1))
    {
      objc_msgSend(objc_getProperty(a1, v3, 368, 1), "removeObserver:forKeyPath:", a1, @"status");
      objc_setProperty_atomic(a1, v4, 0LL, 368LL);
    }
  }

void sub_100012AB0(void *a1, const char *a2)
{
  if (a1 && objc_getProperty(a1, a2, 376LL, 1))
  {
    id Property = objc_getProperty(a1, v3, 376LL, 1);
    if (Property)
    {
      uint64_t v6 = Property;
      [*((id *)Property + 3) setDelegate:0];
      id v7 = (void *)v6[3];
      v6[3] = 0LL;

      uint64_t v8 = (void *)v6[4];
      v6[4] = 0LL;

      objc_setProperty_atomic(v6, v9, 0LL, 8LL);
      objc_setProperty_atomic(v6, v10, 0LL, 16LL);
    }

    objc_setProperty_atomic(a1, v5, 0LL, 376LL);
  }

void sub_100012B64(uint64_t a1, const char *a2)
{
  if (a1 && !objc_getProperty((id)a1, a2, 368LL, 1))
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 configuration]);
    SEL v4 = (void *)objc_claimAutoreleasedReturnValue([v3 appPush]);
    uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 matchSSIDs]);
    if (v5)
    {
      uint64_t v6 = (void *)v5;
      id v7 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 configuration]);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 appPush]);
      SEL v9 = (void *)objc_claimAutoreleasedReturnValue([v8 matchSSIDs]);
      id v10 = [v9 count];

      if (v10)
      {
        id v25 = objc_alloc_init(&OBJC_CLASS___NWNetworkDescription);
        id v11 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 configuration]);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 appPush]);
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 matchSSIDs]);
        __int16 v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v13));
        [v25 setSsidOptions:v14];

        id v15 = objc_alloc_init(&OBJC_CLASS___NWParameters);
        [v15 setRequiredInterfaceType:1];
        int v16 = (void *)objc_claimAutoreleasedReturnValue( +[NWMonitor monitorWithNetworkDescription:endpoint:parameters:]( &OBJC_CLASS___NWMonitor,  "monitorWithNetworkDescription:endpoint:parameters:",  v25,  0LL,  v15));
        objc_setProperty_atomic((id)a1, v17, v16, 368LL);

        objc_msgSend( objc_getProperty((id)a1, v18, 368, 1),  "addObserver:forKeyPath:options:context:",  a1,  @"status",  5,  0);
        return;
      }
    }

    else
    {
    }

    if (*(void *)(a1 + 400) == 1LL)
    {
      --*(_DWORD *)(a1 + 356);
      sub_1000113B4(a1);
      sub_100010EBC(a1, v19);
      uint64_t v21 = sub_1000109CC((id)a1, v20);
      if ((v21 & 1) == 0)
      {
        uint64_t v23 = ne_log_obj(v21, v22);
        uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v27 = a1;
          _os_log_error_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "%@ failed to set the scoping policy",  buf,  0xCu);
        }
      }
    }
  }

void sub_100012E2C(void *a1, const char *a2)
{
  if (!a1 || objc_getProperty(a1, a2, 376LL, 1)) {
    return;
  }
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
  SEL v4 = (void *)objc_claimAutoreleasedReturnValue([v3 appPush]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 matchPrivateLTENetworks]);
  if (v5)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 appPush]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 matchPrivateLTENetworks]);
    id v9 = [v8 count];

    if (v9)
    {
      id v10 = objc_alloc(&OBJC_CLASS___NEPrivateLTEMonitor);
      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
      uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v40 appPush]);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v39 matchPrivateLTENetworks]);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([a1 queue]);
      id v38 = v11;
      id v13 = v12;
      if (v10)
      {
        v41.receiver = v10;
        v41.super_class = (Class)&OBJC_CLASS___NEPrivateLTEMonitor;
        id v10 = (NEPrivateLTEMonitor *)objc_msgSendSuper2(&v41, "init");
        if (v10)
        {
          __int16 v14 = -[CoreTelephonyClient initWithQueue:]( objc_alloc(&OBJC_CLASS___CoreTelephonyClient),  "initWithQueue:",  v13);
          coreTelephonyClient = v10->_coreTelephonyClient;
          v10->_coreTelephonyClient = v14;

          objc_storeStrong((id *)&v10->_privateLTENetworks, v11);
          -[CoreTelephonyClient setDelegate:](v10->_coreTelephonyClient, "setDelegate:", v10);
          objc_setProperty_atomic(v10, v16, v13, 40LL);
          objc_setProperty_atomic(v10, v17, 0LL, 16LL);
          v10->_activeSlotID = 0LL;
          uint64_t v50 = 0LL;
          uint64_t v51 = &v50;
          uint64_t v52 = 0x3032000000LL;
          uint64_t v53 = sub_10008D9D4;
          uint64_t v54 = sub_10008D9E4;
          SEL v18 = v10->_coreTelephonyClient;
          id v49 = 0LL;
          uint64_t v19 = v18;
          uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( -[CoreTelephonyClient getCurrentDataSubscriptionContextSync:]( v19,  "getCurrentDataSubscriptionContextSync:",  &v49));
          id v21 = v49;

          id v55 = v20;
          if (!v51[5] || v21)
          {
            if (v21)
            {
              uint64_t v30 = ne_log_obj(v22, v23);
              uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
              if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)block = 138412546;
                *(void *)&void block[4] = v10;
                *(_WORD *)&block[12] = 2112;
                *(void *)&block[14] = v21;
                _os_log_error_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_ERROR,  "%@ failed to get current data subscription context, error: %@",  block,  0x16u);
              }
            }
          }

          else
          {
            uint64_t v43 = 0LL;
            __int16 v44 = &v43;
            uint64_t v45 = 0x3032000000LL;
            __int16 v46 = sub_10008D9D4;
            SEL v47 = sub_10008D9E4;
            uint64_t v24 = v10->_coreTelephonyClient;
            uint64_t v25 = v51[5];
            id v42 = 0LL;
            int v26 = (void *)objc_claimAutoreleasedReturnValue( -[CoreTelephonyClient getConnectionState:connectionType:error:]( v24,  "getConnectionState:connectionType:error:",  v25,  0LL,  &v42));
            id v21 = v42;
            id v48 = v26;

            if (!v44[5] || v21)
            {
              if (v21)
              {
                uint64_t v32 = ne_log_obj(v27, v28);
                uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
                if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)block = 138412546;
                  *(void *)&void block[4] = v10;
                  *(_WORD *)&block[12] = 2112;
                  *(void *)&block[14] = v21;
                  _os_log_error_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "%@ failed to get current data connection status, error: %@",  block,  0x16u);
                }
              }
            }

            else
            {
              id Property = (dispatch_queue_s *)objc_getProperty(v10, v28, 40LL, 1);
              *(void *)block = _NSConcreteStackBlock;
              *(void *)&block[8] = 3221225472LL;
              *(void *)&block[16] = sub_10008D9EC;
              id v57 = &unk_1000BEAF8;
              SEL v58 = v10;
              id v59 = &v50;
              __int128 v60 = &v43;
              dispatch_async(Property, block);
            }

            _Block_object_dispose(&v43, 8);
          }

          _Block_object_dispose(&v50, 8);
        }
      }

      objc_setProperty_atomic(a1, v34, v10, 376LL);
      id v36 = objc_getProperty(a1, v35, 376LL, 1);
      if (v36) {
        objc_setProperty_atomic(v36, v37, a1, 8LL);
      }
      return;
    }
  }

  else
  {
  }

  if (a1[51] == 1LL) {
    [a1 didReceiveStatusChangeWithInterface:2];
  }
}

void sub_10001333C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100013378(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = ne_log_obj(a1, a2);
    SEL v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      unint64_t v5 = *(void *)(v2 + 400);
      objc_opt_self(&OBJC_CLASS___NESMAppPushSession);
      if (v5 > 2) {
        id v7 = @"unknown";
      }
      else {
        id v7 = off_1000BD710[v5];
      }
      unint64_t v8 = (unint64_t)objc_msgSend(objc_getProperty((id)v2, v6, 368, 1), "status");
      objc_opt_self(&OBJC_CLASS___NESMAppPushSession);
      if (v8 > 2) {
        uint64_t v9 = @"unknown";
      }
      else {
        uint64_t v9 = off_1000BD710[v8];
      }
      int v10 = *(_DWORD *)(v2 + 356);
      *(_DWORD *)uint64_t v27 = 138413058;
      *(void *)&v27[4] = v2;
      *(_WORD *)&v27[12] = 2112;
      *(void *)&v27[14] = v7;
      *(_WORD *)&v27[22] = 2112;
      BOOL v28 = v9;
      LOWORD(v29) = 1024;
      *(_DWORD *)((char *)&v29 + 2) = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%@ Wi-Fi SSID match status changed from '%@' to '%@' [ref count:%u]",  v27,  0x26u);
    }

    id v12 = objc_msgSend(objc_getProperty((id)v2, v11, 368, 1), "status");
    if (v12 == (id)2)
    {
      if (*(void *)(v2 + 400) == 1LL)
      {
        --*(_DWORD *)(v2 + 356);
        sub_1000113B4(v2);
        sub_100010EBC(v2, v20);
        uint64_t v22 = sub_1000109CC((id)v2, v21);
        if ((v22 & 1) == 0)
        {
          uint64_t v24 = ne_log_obj(v22, v23);
          uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v27 = 138412290;
            *(void *)&v27[4] = v2;
            _os_log_error_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "%@ failed to set the scoping policy",  v27,  0xCu);
          }
        }
      }
    }

    else if (v12 == (id)1 && *(void *)(v2 + 400) != 1LL)
    {
      ++*(_DWORD *)(v2 + 356);
      *(void *)(v2 + 400) = 1LL;
      id v13 = sub_100080244((uint64_t)&OBJC_CLASS___NEWiFiManager);
      uint64_t v14 = objc_claimAutoreleasedReturnValue(v13);
      uint64_t v15 = (void *)v14;
      if (v14)
      {
        *(void *)uint64_t v27 = _NSConcreteStackBlock;
        *(void *)&v27[8] = 3221225472LL;
        *(void *)&v27[16] = sub_1000802B0;
        BOOL v28 = (const __CFString *)&unk_1000BEC08;
        uint64_t v29 = v14;
        dispatch_async(&_dispatch_main_q, v27);
      }

      uint64_t v18 = ne_log_obj(v16, v17);
      uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        int v26 = *(_DWORD *)(v2 + 356);
        *(_DWORD *)uint64_t v27 = 138412546;
        *(void *)&v27[4] = v2;
        *(_WORD *)&v27[12] = 1024;
        *(_DWORD *)&v27[14] = v26;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "%@ requesting install for Wi-Fi match [ref count:%u]",  v27,  0x12u);
      }

      sub_10001088C(v2, 0LL);
    }
  }

void sub_10001369C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && *(_DWORD *)(v2 + 356) && (*(_BYTE *)(v2 + 353) & 1) == 0)
  {
    uint64_t v4 = ne_log_obj(a1, a2);
    unint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%@: requesting install", (uint8_t *)&v7, 0xCu);
    }

    sub_10001088C(*(void *)(a1 + 32), 1LL);
  }

void sub_100013774(uint64_t a1, const char *a2)
{
}

void sub_100013E0C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_100013F04;
    v8[3] = &unk_1000BD820;
    unint64_t v5 = &v9;
    id v9 = *(id *)(a1 + 48);
    [v2 plugin:v3 didSetConfiguration:v4 completionHandler:v8];
  }

  else
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_100013F10;
    v6[3] = &unk_1000BD820;
    unint64_t v5 = &v7;
    id v7 = *(id *)(a1 + 48);
    [v2 pluginDidClearConfiguration:v3 completionHandler:v6];
  }
}

uint64_t sub_100013F04(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100013F10(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100013F1C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    int v4 = *(_DWORD *)(v3 + 64);
  }
  else {
    int v4 = 0;
  }
  if (v2 != v4)
  {
    *(_DWORD *)(v3 + 64) = v2;
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
    [v5 plugin:*(void *)(a1 + 32) didSetStatus:*(unsigned int *)(a1 + 48) andDisconnectError:*(void *)(a1 + 40)];
  }

void sub_100013FA0(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 pluginDidDetachIPC:*(void *)(a1 + 32)];
}

void sub_100013FE0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100014078;
  v5[3] = &unk_1000BD7F8;
  id v6 = *(id *)(a1 + 48);
  [v2 plugin:v3 didRequestVirtualInterfaceWithParameters:v4 completionHandler:v5];
}

void sub_100014078(uint64_t a1, NEVirtualInterfaceParameters *a2)
{
  if (a2) {
    a2 = -[NEVirtualInterfaceParameters initWithVirtualInterface:]( objc_alloc(&OBJC_CLASS___NEVirtualInterfaceParameters),  "initWithVirtualInterface:",  a2);
  }
  uint64_t v3 = a2;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100014190(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  id v4 = v2;
  if (v2) {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 pluginDidRequestFlowDivertControlSocket:*(void *)(a1 + 32)]);
  }
  else {
    uint64_t v3 = 0LL;
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10001460C(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v3 plugin:*(void *)(a1 + 32) didApplySettings:*(void *)(a1 + 40)]);
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100014668(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 pluginDidRequestAgentClientServer:*(void *)(a1 + 32)];
}

void sub_1000146A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (v2 != v4)
  {
    *(void *)(v3 + 64) = v2;
    id v9 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
    id v5 = *(void **)(a1 + 40);
    if (v5)
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 domain]);
      unsigned int v7 = [v6 isEqualToString:NEFilterErrorDomain];

      if (v7) {
        uint64_t v8 = (uint64_t)[*(id *)(a1 + 40) code];
      }
      else {
        uint64_t v8 = 1LL;
      }
    }

    else
    {
      uint64_t v8 = 0LL;
    }

    [v9 plugin:*(void *)(a1 + 32) didSetStatus:*(void *)(a1 + 48) andError:v8];
  }

void sub_100014788(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v3 pluginDidRequestPacketFilterChannel:*(void *)(a1 + 32)]);
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000147E4(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v3 pluginDidRequestContentFilterSocket:*(void *)(a1 + 32)]);
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100014C3C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 handleProviderInstallationStatus:*(void *)(a1 + 32) status:*(void *)(a1 + 40)];
}

void sub_100014C7C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 handleProviderStopped:*(void *)(a1 + 32)];
}

void sub_100014CBC(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 didExtensionExit:*(void *)(a1 + 32)];
}

void sub_100014CFC(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 plugin:*(void *)(a1 + 32) didReceivePushToTalkMessageWithUserInfo:*(void *)(a1 + 40)];
}

void sub_100014D3C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 plugin:*(void *)(a1 + 32) didReceiveIncomingCallWithUserInfo:*(void *)(a1 + 40)];
}

void sub_100014D7C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 plugin:*(void *)(a1 + 32) didReceiveProviderError:*(void *)(a1 + 40) forMessageID:*(void *)(a1 + 48)];
}

void sub_100014DC0(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 plugin:*(void *)(a1 + 32) didReceiveProviderError:*(void *)(a1 + 40)];
}

_BYTE *sub_100014E00(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pluginConnection]);

  if (v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pluginConnection]);
    [v3 invalidate];

    [*(id *)(a1 + 32) setPluginConnection:0];
  }

  id result = *(_BYTE **)(a1 + 32);
  if (result)
  {
    if ((result[16] & 1) != 0) {
      return [result handlePluginFailedWithError:0];
    }
  }

  return result;
}

BOOL sub_100014E78(_BYTE *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1 delegate]);
    objc_initWeak(&location, v4);

    if ((a1[16] & 1) != 0)
    {
      if ((int)objc_msgSend(a1, "extension_pid") >= 1)
      {
        SEL v11 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1 delegateQueue]);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_1000150A0;
        block[3] = &unk_1000BE6C0;
        void block[4] = a1;
        objc_copyWeak(&v17, &location);
        dispatch_async(v11, block);

        objc_destroyWeak(&v17);
      }
    }

    else
    {
      uint64_t v7 = ne_log_obj(v5, v6);
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v20 = a1;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%@: Sending start command", buf, 0xCu);
      }

      id v10 = objc_getProperty(a1, v9, 24LL, 1);
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472LL;
      v13[2] = sub_1000151B8;
      v13[3] = &unk_1000BD780;
      objc_copyWeak(&v15, &location);
      v13[4] = a1;
      id v14 = v3;
      [v10 startWithCompletionHandler:v13];

      objc_destroyWeak(&v15);
    }

    objc_destroyWeak(&location);
  }

  return a1 != 0LL;
}

void sub_100015070(_Unwind_Exception *a1)
{
}

void sub_1000150A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = ne_log_obj(a1, a2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void **)(a1 + 32);
    int v11 = 138412546;
    id v12 = v5;
    __int16 v13 = 1024;
    unsigned int v14 = objc_msgSend(v5, "extension_pid");
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%@: startWithConfiguration already has a non-zero PID (%d), calling didStartWithPid",  (uint8_t *)&v11,  0x12u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v7 = *(void **)(a1 + 32);
  id v9 = sub_100015D14(v7, v8);
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  [WeakRetained plugin:v7 didInitializeWithUUIDs:v10];

  objc_msgSend( WeakRetained,  "plugin:didStartWithPID:error:",  *(void *)(a1 + 32),  objc_msgSend(*(id *)(a1 + 32), "extension_pid"),  0);
}

void sub_1000151B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v9 = WeakRetained;
  uint64_t v10 = *(void *)(a1 + 32);
  if (!v5 && v6)
  {
    if (v10) {
      id Property = objc_getProperty(*(id *)(a1 + 32), v8, 24LL, 1);
    }
    else {
      id Property = 0LL;
    }
    unsigned int v12 = [Property isLocal];
    uint64_t v13 = *(void *)(a1 + 32);
    __int16 v70 = v9;
    if (v12)
    {
      id v15 = v6;
      if (v13 && (uint64_t v16 = objc_getProperty((id)v13, v14, 24LL, 1)) != 0LL && (v17 = v16[7] - 2LL, v17 <= 5))
      {
        id v18 = objc_alloc((Class)objc_opt_class(*off_1000BD868[v17]));
        uint64_t v20 = objc_getProperty((id)v13, v19, 24LL, 1);
        if (v20) {
          id v21 = (void *)v20[6];
        }
        else {
          id v21 = 0LL;
        }
        id v22 = v21;
        uint64_t v24 = objc_getProperty((id)v13, v23, 24LL, 1);
        if (v24) {
          uint64_t v26 = v24[7];
        }
        else {
          uint64_t v26 = 0LL;
        }
        uint64_t v27 = objc_getProperty((id)v13, v25, 24LL, 1);
        v68 = v15;
        if (v27) {
          BOOL v28 = (void *)v27[9];
        }
        else {
          BOOL v28 = 0LL;
        }
        id v29 = v28;
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v29 firstObject]);
        uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([(id)v13 delegateQueue]);
        id v32 = [v18 initWithPluginType:v22 pluginClass:v26 pluginEndpoint:v68 pluginProcessIdentity:v30 queue:v31 factory:v13];

        if (v32)
        {
          id v35 = [(id)objc_opt_class(v32) conformsToProtocol:&OBJC_PROTOCOL___NEPluginDriver];
          if ((v35 & 1) != 0)
          {
            objc_storeStrong((id *)(v13 + 8), v32);

LABEL_23:
            uint64_t v45 = *(void **)(a1 + 32);
            v73[0] = _NSConcreteStackBlock;
            v73[1] = 3221225472LL;
            v73[2] = sub_10001581C;
            v73[3] = &unk_1000BD730;
            v73[4] = v45;
            id v46 = v70;
            id v74 = v46;
            SEL v47 = (void *)objc_claimAutoreleasedReturnValue([v45 remotePluginObjectWithErrorHandler:v73]);
            uint64_t v48 = *(void *)(a1 + 40);
            v71[0] = _NSConcreteStackBlock;
            v71[1] = 3221225472LL;
            v71[2] = sub_1000158F4;
            v71[3] = &unk_1000BD758;
            v71[4] = *(void *)(a1 + 32);
            id v72 = v46;
            [v47 startWithConfiguration:v48 completionHandler:v71];

LABEL_37:
            id v9 = v70;
            goto LABEL_38;
          }

          uint64_t v60 = ne_log_obj(v35, v36);
          uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
          if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          {
            __int16 v63 = (objc_class *)objc_opt_class(v32);
            id v64 = NSStringFromClass(v63);
            __int16 v65 = (void *)objc_claimAutoreleasedReturnValue(v64);
            id v66 = NSStringFromProtocol((Protocol *)&OBJC_PROTOCOL___NEPluginDriver);
            __int128 v67 = (void *)objc_claimAutoreleasedReturnValue(v66);
            *(_DWORD *)buf = 138412546;
            *(void *)&uint8_t buf[4] = v65;
            *(_WORD *)&_BYTE buf[12] = 2112;
            *(void *)&buf[14] = v67;
            _os_log_error_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_ERROR,  "Driver class (%@) does not conform to protocol %@",  buf,  0x16u);
          }
        }

        else
        {
          uint64_t v51 = ne_log_obj(v33, v34);
          uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
          if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          {
            uint64_t v54 = objc_getProperty((id)v13, v53, 24LL, 1);
            if (v54) {
              id v55 = (void *)v54[6];
            }
            else {
              id v55 = 0LL;
            }
            id v56 = v55;
            SEL v58 = objc_getProperty((id)v13, v57, 24LL, 1);
            if (v58) {
              uint64_t v59 = v58[7];
            }
            else {
              uint64_t v59 = 0LL;
            }
            *(_DWORD *)buf = 138412802;
            *(void *)&uint8_t buf[4] = v56;
            *(_WORD *)&_BYTE buf[12] = 2048;
            *(void *)&buf[14] = v59;
            *(_WORD *)&buf[22] = 2048;
            __int16 v77 = v68;
            _os_log_error_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_ERROR,  "Failed to create a plugin driver, xpc_type_t type = %@, class = %ld, endpoint = %p",  buf,  0x20u);
          }
        }
      }

      else
      {
      }
    }

    else
    {
      id v69 = v6;
      if (v13)
      {
        objc_initWeak(&location, (id)v13);
        *(void *)buf = _NSConcreteStackBlock;
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&buf[16] = sub_100015D48;
        __int16 v77 = &unk_1000BDA58;
        objc_copyWeak(v78, &location);
        uint64_t v37 = objc_retainBlock(buf);
        id v38 = -[NSXPCConnection initWithListenerEndpoint:]( objc_alloc(&OBJC_CLASS___NSXPCConnection),  "initWithListenerEndpoint:",  v69);
        uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([(id)v13 managerInterface]);
        if (v39)
        {
          -[NSXPCConnection setExportedInterface:](v38, "setExportedInterface:", v39);
          -[NSXPCConnection setExportedObject:](v38, "setExportedObject:", v13);
        }

        uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([(id)v13 remotePluginInterface]);
        uint64_t v41 = objc_opt_class(&OBJC_CLASS___NSArray);
        id v42 = +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  v41,  objc_opt_class(&OBJC_CLASS___NEProcessIdentity),  0LL);
        uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
        [v40 setClasses:v43 forSelector:"startWithConfiguration:completionHandler:" argumentIndex:1 ofReply:1];
        -[NSXPCConnection setRemoteObjectInterface:](v38, "setRemoteObjectInterface:", v40);
        -[NSXPCConnection setInterruptionHandler:](v38, "setInterruptionHandler:", v37);
        -[NSXPCConnection setInvalidationHandler:](v38, "setInvalidationHandler:", v37);
        -[NSXPCConnection resume](v38, "resume");
        __int16 v44 = *(void **)(v13 + 48);
        *(void *)(v13 + 4_Block_object_dispose(va, 8) = v38;

        objc_destroyWeak(v78);
        objc_destroyWeak(&location);

        goto LABEL_23;
      }
    }

    uint64_t v61 = ne_log_obj(v49, v50);
    id v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_ERROR,  "Failed to create the plugin driver",  buf,  2u);
    }

    [v70 plugin:*(void *)(a1 + 32) didStartWithPID:0 error:0];
    goto LABEL_37;
  }

  [WeakRetained plugin:v10 didStartWithPID:0 error:v5];
LABEL_38:
}

void sub_1000157EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, id a26)
{
}

void sub_10001581C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = ne_log_obj(v3, v4);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%@: Got an XPC connection error while starting the plugin: %@",  (uint8_t *)&v8,  0x16u);
  }

  [*(id *)(a1 + 40) plugin:*(void *)(a1 + 32) didStartWithPID:0 error:v3];
}

void sub_1000158F4(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegateQueue]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1000159A8;
  v10[3] = &unk_1000BEC30;
  char v14 = a2;
  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = *(void **)(a1 + 40);
  id v11 = v5;
  uint64_t v12 = v7;
  id v13 = v8;
  id v9 = v5;
  dispatch_async(v6, v10);
}

void sub_1000159A8(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 56);
  if ([*(id *)(a1 + 32) count]
    && ((v4 = *(void **)(a1 + 40)) == 0LL || (id v5 = objc_getProperty(v4, v3, 24LL, 1)) == 0LL
      ? (id v6 = 0LL)
      : (id v6 = (void *)v5[9]),
        id v7 = v6,
        v7,
        !v7))
  {
    id v38 = *(void **)(a1 + 32);
    id Property = *(id *)(a1 + 40);
    if (Property) {
      id Property = objc_getProperty(Property, v3, 24LL, 1);
    }
    sub_10007F940((uint64_t)Property, v38);
    if (!v2) {
      goto LABEL_26;
    }
  }

  else if (!v2)
  {
LABEL_26:
    [*(id *)(a1 + 48) plugin:*(void *)(a1 + 40) didStartWithPID:0 error:0];
    return;
  }

  id v8 = sub_100015CE0(*(id *)(a1 + 40), v3);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  id v10 = [v9 count];

  if (!v10) {
    goto LABEL_26;
  }
  id v12 = sub_100015CE0(*(id *)(a1 + 40), v11);
  id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  char v14 = (void *)objc_claimAutoreleasedReturnValue([v13 firstObject]);
  objc_msgSend(*(id *)(a1 + 40), "setExtension_pid:", objc_msgSend(v14, "pid"));

  id v15 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  id v17 = sub_100015CE0(*(id *)(a1 + 40), v16);
  id v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
  id v19 = [v18 countByEnumeratingWithState:&v40 objects:v46 count:16];
  if (v19)
  {
    id v20 = v19;
    uint64_t v21 = *(void *)v41;
    do
    {
      for (i = 0LL; i != v20; i = (char *)i + 1)
      {
        if (*(void *)v41 != v21) {
          objc_enumerationMutation(v18);
        }
        SEL v23 = *(void **)(*((void *)&v40 + 1) + 8LL * (void)i);
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "uuid", (void)v40));

        if (v24)
        {
          uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v23 uuid]);
          -[NSMutableArray addObject:](v15, "addObject:", v25);
        }
      }

      id v20 = [v18 countByEnumeratingWithState:&v40 objects:v46 count:16];
    }

    while (v20);
  }

  if (-[NSMutableArray count](v15, "count"))
  {
    uint64_t v27 = *(void **)(a1 + 40);
    if (v27)
    {
      id v28 = objc_getProperty(v27, v26, 24LL, 1);
      id v29 = v15;
      if (v28)
      {
        uint64_t v31 = v29;
        id v32 = (dispatch_queue_s *)objc_getProperty(v28, v30, 24LL, 1);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_10007FFE0;
        block[3] = &unk_1000BEBE0;
        void block[4] = v28;
        uint64_t v45 = v31;
        dispatch_sync(v32, block);
      }
    }

    else
    {
      uint64_t v39 = v15;
    }
  }

  uint64_t v34 = *(void **)(a1 + 40);
  uint64_t v33 = *(void **)(a1 + 48);
  id v35 = sub_100015D14(v34, v26);
  uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
  [v33 plugin:v34 didInitializeWithUUIDs:v36];

  objc_msgSend( *(id *)(a1 + 48),  "plugin:didStartWithPID:error:",  *(void *)(a1 + 40),  objc_msgSend(*(id *)(a1 + 40), "extension_pid"),  0);
  [*(id *)(a1 + 40) setStarted:1];
}

id sub_100015CE0(id a1, const char *a2)
{
  if (a1)
  {
    id Property = objc_getProperty(a1, a2, 24LL, 1);
    if (Property) {
      id v3 = (void *)Property[9];
    }
    else {
      id v3 = 0LL;
    }
    a1 = v3;
  }

  return a1;
}

id sub_100015D14(id a1, const char *a2)
{
  if (a1)
  {
    id Property = objc_getProperty(a1, a2, 24LL, 1);
    if (Property) {
      id v3 = (void *)Property[8];
    }
    else {
      id v3 = 0LL;
    }
    a1 = v3;
  }

  return a1;
}

void sub_100015D48(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v4 = ne_log_obj(WeakRetained, v2);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v7) = 138412290;
      *(void *)((char *)&v7 + 4) = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%@: Tearing down plugin connection",  (uint8_t *)&v7,  0xCu);
    }

    id v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v3 delegateQueue]);
    *(void *)&__int128 v7 = _NSConcreteStackBlock;
    *((void *)&v7 + 1) = 3221225472LL;
    id v8 = sub_100014E00;
    id v9 = &unk_1000BEC08;
    id v10 = v3;
    dispatch_async(v6, &v7);
  }
}

void sub_100015E44(_BYTE *self, const char *a2)
{
  if (self)
  {
    self[16] = 0;
    id v3 = (void *)*((void *)self + 1);
    if (v3)
    {
      id v4 = v3;
      if ([v4 conformsToProtocol:&OBJC_PROTOCOL___NEAgentSessionDelegate])
      {
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 3221225472LL;
        v10[2] = sub_100015F90;
        v10[3] = &unk_1000BEC08;
        void v10[4] = self;
        [v4 handleDisposeWithCompletionHandler:v10];

        return;
      }
    }

    id Property = objc_getProperty(self, a2, 24LL, 1);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100016004;
    v9[3] = &unk_1000BEA88;
    v9[4] = self;
    __int128 v7 = v9;
    if (Property)
    {
      id v8 = (dispatch_queue_s *)objc_getProperty(Property, v6, 24LL, 1);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10007FA58;
      block[3] = &unk_1000BED58;
      void block[4] = Property;
      id v12 = v7;
      dispatch_sync(v8, block);
    }
  }

void sub_100015F90(uint64_t a1)
{
  uint64_t v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegateQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000162E4;
  block[3] = &unk_1000BEC08;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async(v2, block);
}

void sub_100016004(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pluginConnection]);

  if (v2)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pluginConnection]);
    [v4 invalidate];

    [*(id *)(a1 + 32) setPluginConnection:0];
  }

  id v5 = *(void **)(a1 + 32);
  if (v5
    && (id Property = objc_getProperty(v5, v3, 24LL, 1)) != 0LL
    && Property[5] == 1LL
    && ((v7 = Property[7], v7 != 5) ? (BOOL v8 = v7 == 2) : (BOOL v8 = 1),
        v8 && objc_msgSend(*(id *)(a1 + 32), "extension_pid")))
  {
    id v9 = objc_msgSend(*(id *)(a1 + 32), "extension_pid");
    int v10 = (int)v9;
    uint64_t v12 = ne_log_obj(v9, v11);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v24 = v10;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Killing extension, pid %d", buf, 8u);
    }

    char v14 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegateQueue]);
    dispatch_source_t v15 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_proc, v10, 0x80000000uLL, v14);

    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472LL;
    handler[2] = sub_10001621C;
    handler[3] = &unk_1000BEDA8;
    int v22 = v10;
    uint64_t v16 = *(void *)(a1 + 32);
    dispatch_source_t v20 = v15;
    uint64_t v21 = v16;
    id v17 = v15;
    dispatch_source_set_event_handler(v17, handler);
    dispatch_resume(v17);
    kill((pid_t)objc_msgSend(*(id *)(a1 + 32), "extension_pid"), 9);
  }

  else
  {
    id v18 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
    [v18 pluginDidDispose:*(void *)(a1 + 32)];
  }

void sub_10001621C(uint64_t a1)
{
  uint64_t v4 = ne_log_obj(v2, v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(a1 + 48);
    v8[0] = 67109120;
    v8[1] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Process %d exited", (uint8_t *)v8, 8u);
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) delegate]);
  [v7 pluginDidDispose:*(void *)(a1 + 40)];
}

void sub_1000162E4(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 pluginDidDispose:*(void *)(a1 + 32)];
}

void sub_100016324(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    id v4 = (id)objc_claimAutoreleasedReturnValue([a1 remotePluginObject]);
    [v4 updateConfiguration:v3];
  }

void sub_100016378(void *a1)
{
  if (a1)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_10001641C;
    v4[3] = &unk_1000BEA88;
    v4[4] = a1;
    id v2 = (void *)objc_claimAutoreleasedReturnValue([a1 remotePluginObjectWithErrorHandler:v4]);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_1000164B8;
    v3[3] = &unk_1000BEC08;
    v3[4] = a1;
    [v2 sleepWithCompletionHandler:v3];
  }

void sub_10001641C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegateQueue]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10001656C;
  v6[3] = &unk_1000BEBE0;
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v3;
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_1000164B8(uint64_t a1)
{
  id v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegateQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10001652C;
  block[3] = &unk_1000BEC08;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async(v2, block);
}

void sub_10001652C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 pluginDidAcknowledgeSleep:*(void *)(a1 + 32)];
}

void sub_10001656C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = ne_log_obj(a1, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    int v8 = 138412546;
    uint64_t v9 = v6;
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%@: Got an XPC error while sending sleep event: %@",  (uint8_t *)&v8,  0x16u);
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v5 pluginDidAcknowledgeSleep:*(void *)(a1 + 32)];
}

void sub_10001663C(void *a1)
{
  if (a1)
  {
    id v1 = (id)objc_claimAutoreleasedReturnValue([a1 remotePluginObject]);
    [v1 wakeup];
  }

void sub_100016670(void *a1, const char *a2)
{
  if (a1)
  {
    id Property = objc_getProperty(a1, a2, 24LL, 1);
    sub_10007F9D4(Property, v3);
  }

unsigned int *sub_100016694(unsigned int *result)
{
  if (result)
  {
    id v1 = result;
    if (objc_msgSend(result, "extension_pid"))
    {
      return (unsigned int *)objc_msgSend(v1, "extension_pid");
    }

    else
    {
      id result = (unsigned int *)objc_getProperty(v1, v2, 24LL, 1);
      if (result) {
        return (unsigned int *)result[4];
      }
    }
  }

  return result;
}

void sub_1000166E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegateQueue]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10001686C;
  v6[3] = &unk_1000BEBE0;
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v3;
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_100016780(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  uint64_t v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegateQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100016824;
  block[3] = &unk_1000BEDA8;
  void block[4] = *(void *)(a1 + 32);
  id v9 = v5;
  int v10 = a3;
  id v7 = v5;
  dispatch_async(v6, block);
}

void sub_100016824(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 plugin:*(void *)(a1 + 32) didFinishAuthenticationWithResults:*(void *)(a1 + 40) status:*(unsigned int *)(a1 + 48) andError:0];
}

void sub_10001686C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = ne_log_obj(a1, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    int v8 = 138412546;
    uint64_t v9 = v6;
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%@: Got an error on the XPC connection while authenticating: %@",  (uint8_t *)&v8,  0x16u);
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v5 plugin:*(void *)(a1 + 32) didFinishAuthenticationWithResults:0 status:0 andError:*(void *)(a1 + 40)];
}

void sub_100016944(void *a1)
{
  if (a1)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_1000169E8;
    v4[3] = &unk_1000BEA88;
    v4[4] = a1;
    id v2 = (void *)objc_claimAutoreleasedReturnValue([a1 remotePluginObjectWithErrorHandler:v4]);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_100016A84;
    v3[3] = &unk_1000BD7D0;
    v3[4] = a1;
    [v2 attachIPCWithCompletionHandler:v3];
  }

void sub_1000169E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegateQueue]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100016B7C;
  v6[3] = &unk_1000BEBE0;
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v3;
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_100016A84(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegateQueue]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100016B20;
  v6[3] = &unk_1000BEBE0;
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v3;
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_100016B20(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _endpoint]);
  [v4 plugin:v2 didAttachIPCWithEndpoint:v3];
}

void sub_100016B7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = ne_log_obj(a1, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    int v8 = 138412546;
    uint64_t v9 = v6;
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%@: Got an XPC connection error while attaching IPC: %@",  (uint8_t *)&v8,  0x16u);
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v5 plugin:*(void *)(a1 + 32) didAttachIPCWithEndpoint:0];
}

void sub_100016C50(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = ne_log_obj(v3, v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%@: Got an XPC connection error while setting the App UUID map: %@",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_100016D18(void *a1, void *a2)
{
  if (a1)
  {
    if (a2)
    {
      id v3 = a2;
      id v6 = (id)objc_claimAutoreleasedReturnValue([a1 remotePluginObject]);
      id v4 = v3;
      uint64_t v5 = (const char *)[v4 UTF8String];

      [v6 setDelegateInterface:if_nametoindex(v5)];
    }
  }

void sub_100016D90(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegateQueue]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100016F0C;
  v6[3] = &unk_1000BEBE0;
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v3;
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_100016E2C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegateQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100016EF8;
  block[3] = &unk_1000BED30;
  id v8 = *(id *)(a1 + 40);
  id v13 = v6;
  id v14 = v8;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_100016EF8(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

void sub_100016F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = ne_log_obj(a1, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    int v8 = 138412546;
    uint64_t v9 = v6;
    __int16 v10 = 2112;
    uint64_t v11 = v7;
    _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%@: Got an XPC connection error while getting a client connection: %@",  (uint8_t *)&v8,  0x16u);
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v5 plugin:*(void *)(a1 + 32) didSetStatus:0 andError:1];
}

LABEL_23:
        -[NESMVPNSession setStatus:](self, "setStatus:", v16);
        break;
    }
  }

  id v38 = 1LL;
LABEL_30:
  objc_sync_exit(v1);

  return v38;
}

    v153 = (void *)nw_array_create();
    v154 = 1;
LABEL_24:
    v158 = 0u;
    v159 = 0u;
    v156 = 0u;
    v157 = 0u;
    id v35 = objc_msgSend(objc_getProperty(selfa, v27, 408, 1), "relays");
    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
    uint64_t v37 = [v36 countByEnumeratingWithState:&v156 objects:v165 count:16];
    if (v37)
    {
      id v38 = *(void *)v157;
      do
      {
        for (j = 0LL; j != v37; j = (char *)j + 1)
        {
          if (*(void *)v157 != v38) {
            objc_enumerationMutation(v36);
          }
          __int128 v40 = *(void **)(*((void *)&v156 + 1) + 8LL * (void)j);
          if ((v28 & 1) != 0) {
            __int128 v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v156 + 1) + 8 * (void)j) HTTP2RelayURL]);
          }
          else {
            __int128 v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v156 + 1) + 8 * (void)j) HTTP3RelayURL]);
          }
          __int128 v42 = v41;
          __int128 v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "absoluteString", selfa));

          if (v43)
          {
            __int16 v44 = sub_100074F8C(v43, v40);
            uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
            nw_array_append(v155, v45);
            if (v154)
            {
              id v46 = (void *)objc_claimAutoreleasedReturnValue([v40 HTTP2RelayURL]);
              SEL v47 = (void *)objc_claimAutoreleasedReturnValue([v46 absoluteString]);

              if (v47)
              {
                uint64_t v48 = sub_100074F8C(v47, v40);
                uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
                nw_array_append(v153, v49);
              }
            }

            else
            {
              SEL v47 = 0LL;
            }
          }
        }

        uint64_t v37 = [v36 countByEnumeratingWithState:&v156 objects:v165 count:16];
      }

      while (v37);
    }

    if (!v154)
    {
      sub_100074304(selfa, v50);
      goto LABEL_68;
    }

    fallback_privacy_proxy = (void *)nw_proxy_config_create_fallback_privacy_proxy(v153);
    objc_setProperty_atomic(selfa, v52, fallback_privacy_proxy, 368LL);

    id Property = objc_getProperty(selfa, v53, 368LL, 1);
    nw_proxy_config_set_ignore_privacy_stance(Property, 1LL);
    id v56 = objc_getProperty(selfa, v55, 368LL, 1);
    nw_proxy_config_set_use_over_privacy_proxy(v56, 1LL);
    SEL v57 = objc_alloc(&OBJC_CLASS___NERelayNetworkAgent);
    SEL v58 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession configuration](selfa, "configuration"));
    uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([v58 identifier]);
    uint64_t v60 = -[NERelayNetworkAgent initWithConfigUUID:sessionType:name:]( v57,  "initWithConfigUUID:sessionType:name:",  v59,  -[NESMRelaySession type](selfa, "type"),  @"h2-fallback");
    objc_setProperty_atomic(selfa, v61, v60, 376LL);

    objc_msgSend(objc_getProperty(selfa, v62, 376, 1), "setActive:", 1);
    __int16 v63 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession configuration](selfa, "configuration"));
    id v64 = (void *)objc_claimAutoreleasedReturnValue([v63 name]);
    objc_msgSend(objc_getProperty(selfa, v65, 376, 1), "setConfigurationName:", v64);

    id v66 = objc_alloc(&OBJC_CLASS___NWNetworkAgentRegistration);
    v68 = objc_getProperty(selfa, v67, 376LL, 1);
    id v69 = -[NWNetworkAgentRegistration initWithNetworkAgentClass:]( v66,  "initWithNetworkAgentClass:",  objc_opt_class(v68));
    objc_setProperty_atomic(selfa, v70, v69, 384LL);

    id v72 = objc_getProperty(selfa, v71, 368LL, 1);
    id v74 = objc_msgSend(objc_getProperty(selfa, v73, 376, 1), "proxyConfig");
    v75 = (void *)objc_claimAutoreleasedReturnValue(v74);
    is_equal = nw_proxy_config_is_equal(v75, v72);

    if ((is_equal & 1) == 0) {
      objc_msgSend(objc_getProperty(selfa, v77, 376, 1), "setProxyConfig:", v72);
    }
    *(void *)&v174 = 0LL;
    *((void *)&v174 + 1) = &v174;
    v175 = 0x3032000000LL;
    v176 = sub_100074C44;
    v177 = sub_100074C54;
    v178 = 0LL;
    v78 = (void *)objc_claimAutoreleasedReturnValue( +[NEFileHandleMaintainer sharedMaintainer]( &OBJC_CLASS___NEFileHandleMaintainer,  "sharedMaintainer",  selfa));
    v164[0] = _NSConcreteStackBlock;
    v164[1] = 3221225472LL;
    v164[2] = sub_1000765B8;
    v164[3] = &unk_1000BE670;
    v164[4] = selfa;
    v164[5] = &v174;
    [v78 iterateFileHandlesWithBlock:v164];

    uint64_t v79 = *(void **)(*((void *)&v174 + 1) + 40LL);
    if (v79) {
      unsigned int v81 = (void *)objc_claimAutoreleasedReturnValue([v79 agentUUID]);
    }
    else {
      unsigned int v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
    }
    uint64_t v82 = objc_getProperty(selfa, v80, 376LL, 1);
    [v82 setAgentUUID:v81];

    uint64_t v87 = *(void **)(*((void *)&v174 + 1) + 40LL);
    if (v87)
    {
      uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue([v87 handle]);
      uint64_t v89 = dup((int)[v88 fileDescriptor]);

      __int128 v91 = objc_getProperty(selfa, v90, 384LL, 1);
      uint64_t v93 = objc_getProperty(selfa, v92, 376LL, 1);
      uint64_t v94 = [v91 setRegisteredNetworkAgent:v93 fileDescriptor:v89];

      v96 = selfa;
      if ((v94 & 1) == 0)
      {
        close(v89);
        sub_100078DB4(selfa);
      }
    }

    else
    {
      v96 = selfa;
      sub_100078DB4(selfa);
    }

    v97 = objc_getProperty(v96, v95, 384LL, 1);
    uint64_t v98 = [v97 isRegistered];

    if ((v98 & 1) != 0)
    {
      id v100 = selfa;
      if ((is_equal & 1) != 0)
      {
LABEL_67:
        sub_100074844(v100);
        _Block_object_dispose(&v174, 8);

LABEL_68:
        if (v28) {
          default_privacy_proxy = (void *)nw_proxy_config_create_fallback_privacy_proxy(v155);
        }
        else {
          default_privacy_proxy = (void *)nw_proxy_config_create_default_privacy_proxy(v155);
        }
        v130 = default_privacy_proxy;
        objc_setProperty_atomic(selfa, v129, default_privacy_proxy, 360LL);

        v132 = objc_getProperty(selfa, v131, 360LL, 1);
        nw_proxy_config_set_ignore_privacy_stance(v132, 1LL);
        v134 = objc_getProperty(selfa, v133, 360LL, 1);
        nw_proxy_config_set_use_over_privacy_proxy(v134, 1LL);
        if (v154)
        {
          v136 = objc_msgSend(objc_getProperty(selfa, v135, 376, 1), "agentUUID");
          v137 = (void *)objc_claimAutoreleasedReturnValue(v136);
          v138 = v137 == 0LL;

          if (!v138)
          {
            v139 = objc_msgSend(objc_getProperty(selfa, v135, 376, 1), "agentUUID");
            v140 = (void *)objc_claimAutoreleasedReturnValue(v139);
            [v140 getUUIDBytes:&v174];

            v142 = objc_getProperty(selfa, v141, 360LL, 1);
            nw_proxy_config_set_fallback_proxy_agent(v142, &v174);
          }
        }

        v143 = objc_msgSend(objc_getProperty(selfa, v135, 408, 1), "relays");
        v144 = (void *)objc_claimAutoreleasedReturnValue(v143);
        v145 = (void *)objc_claimAutoreleasedReturnValue([v144 lastObject]);

        v146 = (void *)objc_claimAutoreleasedReturnValue([v145 dnsOverHTTPSURL]);
        if (v146)
        {
        }

        else if (!sub_100075298(selfa, v147))
        {
LABEL_78:

          goto LABEL_19;
        }

        sub_10007532C((unsigned __int16 *)selfa, (const char *)1);
        goto LABEL_78;
      }

      id v101 = objc_getProperty(selfa, v99, 384LL, 1);
      id v103 = objc_getProperty(selfa, v102, 376LL, 1);
      v104 = [v101 updateNetworkAgent:v103];

      if (v104)
      {
        v107 = ne_log_obj(v105, v106);
        id v108 = (os_log_s *)objc_claimAutoreleasedReturnValue(v107);
        if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v110 = objc_getProperty(selfa, v109, 376LL, 1);
          __int128 v111 = (void *)objc_claimAutoreleasedReturnValue([v110 agentUUID]);
          *(_DWORD *)v168 = 138412802;
          v169 = selfa;
          v170 = 1042;
          v171 = 16;
          v172 = 2098;
          v173 = v111;
          _os_log_impl( (void *)&_mh_execute_header,  v108,  OS_LOG_TYPE_DEFAULT,  "%@: Updated fallback relay network agent %{public,uuid_t}.16P",  v168,  0x1Cu);
        }
      }

      else
      {
        __int16 v126 = ne_log_obj(v105, v106);
        id v108 = (os_log_s *)objc_claimAutoreleasedReturnValue(v126);
        if (os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
        {
          v148 = objc_getProperty(selfa, v127, 376LL, 1);
          v149 = (void *)objc_claimAutoreleasedReturnValue([v148 agentUUID]);
          *(_DWORD *)v168 = 138412802;
          v169 = selfa;
          v170 = 1042;
          v171 = 16;
          v172 = 2098;
          v173 = v149;
          _os_log_error_impl( (void *)&_mh_execute_header,  v108,  OS_LOG_TYPE_ERROR,  "%@: Update failed for fallback relay network agent %{public,uuid_t}.16P",  v168,  0x1Cu);
        }
      }
    }

    else
    {
      __int128 v112 = objc_getProperty(selfa, v99, 384LL, 1);
      __int128 v114 = objc_getProperty(selfa, v113, 376LL, 1);
      uint64_t v115 = [v112 registerNetworkAgent:v114];

      if (v115)
      {
        __int16 v118 = ne_log_obj(v116, v117);
        id v108 = (os_log_s *)objc_claimAutoreleasedReturnValue(v118);
        if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v120 = objc_getProperty(selfa, v119, 376LL, 1);
          id v121 = (void *)objc_claimAutoreleasedReturnValue([v120 agentUUID]);
          *(_DWORD *)v168 = 138412802;
          v169 = selfa;
          v170 = 1042;
          v171 = 16;
          v172 = 2098;
          v173 = v121;
          _os_log_impl( (void *)&_mh_execute_header,  v108,  OS_LOG_TYPE_DEFAULT,  "%@: Registered fallback relay network agent %{public,uuid_t}.16P",  v168,  0x1Cu);
        }
      }

      else
      {
        v122 = ne_log_obj(v116, v117);
        id v108 = (os_log_s *)objc_claimAutoreleasedReturnValue(v122);
        if (os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
        {
          __int16 v124 = objc_getProperty(selfa, v123, 376LL, 1);
          v125 = (void *)objc_claimAutoreleasedReturnValue([v124 agentUUID]);
          *(_DWORD *)v168 = 138412802;
          v169 = selfa;
          v170 = 1042;
          v171 = 16;
          v172 = 2098;
          v173 = v125;
          _os_log_error_impl( (void *)&_mh_execute_header,  v108,  OS_LOG_TYPE_ERROR,  "%@: Registration failed for fallback relay network agent %{public,uuid_t}.16P",  v168,  0x1Cu);
        }
      }
    }

    id v100 = selfa;
    goto LABEL_67;
  }

  id v83 = ne_log_obj(v25, v26);
  unsigned int v84 = (os_log_s *)objc_claimAutoreleasedReturnValue(v83);
  if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
  {
    LODWORD(v174) = 138412290;
    *(void *)((char *)&v174 + 4) = selfa;
    _os_log_error_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_ERROR,  "%@ Invalid proxy hops, no consistent HTTP version supported",  (uint8_t *)&v174,  0xCu);
  }

  objc_setProperty_atomic(selfa, v85, 0LL, 360LL);
  objc_setProperty_atomic(selfa, v86, 0LL, 368LL);
LABEL_19:
  sub_100074B54(selfa, 1);
  uint64_t v31 = objc_getProperty(selfa, v30, 408LL, 1);
  if (v31)
  {
    uint64_t v33 = v31;
    uint64_t v34 = objc_getProperty(selfa, v32, 360LL, 1) == 0LL;

    if (!v34)
    {
      -[NESMSession setStatus:](selfa, "setStatus:", 3LL);
      return;
    }
  }

  xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(v8);
  uint64_t v52 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
  xpc_connection_send_message(v52, reply);
}
}
      }

      else
      {
      }
    }

    if ((*(_BYTE *)(a1 + 357) & 1) == 0) {
      return;
    }
    int v24 = 0;
    uint64_t v25 = 5000000000LL;
    goto LABEL_29;
  }

LABEL_24:
  if (*(void *)(a1 + 40))
  {
    int v24 = -[NSDictionary initWithDictionary:copyItems:]( objc_alloc(&OBJC_CLASS___NSDictionary),  "initWithDictionary:copyItems:",  *(void *)(a1 + 40),  1LL);
    uint64_t v25 = *(void **)(a1 + 32);
    if (v25) {
      objc_setProperty_atomic(v25, v23, v24, 448LL);
    }
  }

  else
  {
    uint64_t v26 = *(void **)(a1 + 32);
    if (v26) {
      objc_setProperty_atomic(v26, v10, 0LL, 448LL);
    }
  }

  uint64_t v27 = ne_log_obj(v26, v10);
  id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    id v29 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    id v35 = v29;
    _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "%@: Updating agent on fallback interface change",  buf,  0xCu);
  }

  sub_1000877D4(*(void **)(a1 + 32), 0, 1);
}

LABEL_24:
  -[NESMVPNSession applyNWPathOverridesIfNeeded](self, "applyNWPathOverridesIfNeeded");
LABEL_25:
}

  if (-[NESMVPNSession type](self, "type") == 2)
  {
    int v22 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession configuration](self, "configuration"));
    SEL v23 = (void *)objc_claimAutoreleasedReturnValue([v22 appVPN]);
    int v24 = (void *)objc_claimAutoreleasedReturnValue([v23 protocol]);
    -[NESMVPNSession setProtocol:](self, "setProtocol:", v24);

    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v5 appVPN]);
  }

  else
  {
    uint64_t v26 = -[NESMVPNSession type](self, "type");
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession configuration](self, "configuration"));
    id v28 = v27;
    if (v26 != 6)
    {
      __int128 v40 = (void *)objc_claimAutoreleasedReturnValue([v27 VPN]);
      __int128 v41 = (void *)objc_claimAutoreleasedReturnValue([v40 protocol]);
      -[NESMVPNSession setProtocol:](self, "setProtocol:", v41);

      __int128 v42 = (void *)objc_claimAutoreleasedReturnValue([v5 VPN]);
      LODWORD(v40) = [v42 isEnabled];

      if (!(_DWORD)v40) {
        goto LABEL_30;
      }
      goto LABEL_29;
    }

    id v29 = (void *)objc_claimAutoreleasedReturnValue([v27 dnsProxy]);
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v29 protocol]);
    -[NESMVPNSession setProtocol:](self, "setProtocol:", v30);

    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v5 dnsProxy]);
  }

  uint64_t v31 = v25;
  id v32 = [v25 isEnabled];

  if ((v32 & 1) != 0)
  {
LABEL_29:
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession stateHandler](self, "stateHandler"));
    [v33 handleUpdateConfiguration];
  }

  objc_setProperty_atomic_copy(v8, v7, *(id *)(a1 + 48), 408LL);
LABEL_25:
  dispatch_source_t v20 = (void *)objc_claimAutoreleasedReturnValue([v8 queue]);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472LL;
  v24[2] = sub_100023FF8;
  v24[3] = &unk_1000BDA58;
  objc_copyWeak(&v25, v2);
  uint64_t v21 = NECreateTimerSource(v20, 5LL, v24);
  SEL v23 = (void *)objc_claimAutoreleasedReturnValue(v21);
  if (v8) {
    objc_setProperty_atomic(v8, v22, v23, 416LL);
  }

  objc_destroyWeak(&v25);
LABEL_28:
}

  return v34;
}

    a1 = 0LL;
    goto LABEL_25;
  }

  uint64_t v21 = *(uint64_t (**)(uint64_t, id, void *))qword_1000CFBD8;
  int v22 = (void *)objc_claimAutoreleasedReturnValue([v9 identifier]);
  SEL v23 = v21(v17, [v22 UUIDString], a1);

  if (!v23)
  {
    uint64_t v34 = ne_log_obj(v24, v25);
    id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    *(_DWORD *)buf = 138412546;
    id v38 = a1;
    uint64_t v39 = 1024;
    __int128 v40 = v17;
    dispatch_source_t v20 = "%@: Failed to create a legacy bridge with type %d for configuration";
    id v32 = v19;
    uint64_t v33 = 18;
    goto LABEL_22;
  }

  a1[46] = v23;
  uint64_t v26 = objc_alloc(&OBJC_CLASS___NESMPolicySession);
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v9 identifier]);
  id v28 = [v9 grade];
  if (v26) {
    id v29 = sub_10002E7FC((id *)&v26->super.isa, v27, a5, v28, (void *)1, (void *)1);
  }
  else {
    id v29 = 0LL;
  }
  [a1 setPolicySession:v29];

  sub_10007AFD4(a1);
LABEL_25:

  return a1;
}

    uint64_t v11 = (os_log_s *)v7;
  }
}

    -[NESMSession setConfiguration:](self, "setConfiguration:", v16);
    -[NESMSession setConfigurationSignature:](self, "setConfigurationSignature:", v6);
    sub_10007B8E8((uint64_t)self, 1);
    goto LABEL_25;
  }

  id v14 = 0;
LABEL_26:

  return v14;
}

LABEL_37:
          id v62 = ne_log_obj(v7, v8);
          uint64_t v34 = (id)objc_claimAutoreleasedReturnValue(v62);
          if (os_log_type_enabled((os_log_t)v34, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            uint64_t v115 = self;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v34,  OS_LOG_TYPE_ERROR,  "%@: Failed to create an NEAgent",  buf,  0xCu);
          }

          uint64_t v25 = 0LL;
          goto LABEL_68;
        }

        id v14 = (objc_class *)v18;
        v113[0] = @"plugin-requirement";
        v113[1] = @"extension-identifier";
        *(void *)&__int16 v118 = v12;
        *((void *)&v118 + 1) = v11;
        dispatch_source_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v118,  v113,  2LL));
LABEL_18:
        int v22 = objc_alloc(v14);
        SEL v23 = -[NESMVPNSession agentPluginClass](self, "agentPluginClass");
        int v24 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession uid](self, "uid"));
        uint64_t v25 = [v22 initWithPluginType:v10 pluginVersion:1 pluginClass:v23 pluginInfo:v20 userID:v24];

        goto LABEL_19;
      }

      uint64_t v21 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v21,  "setObject:forKeyedSubscript:",  v11,  @"extension-identifier");
      if (!v12)
      {
LABEL_12:
        if (-[NSMutableDictionary count](v21, "count")) {
          dispatch_source_t v20 = -[NSDictionary initWithDictionary:](objc_alloc(&OBJC_CLASS___NSDictionary), "initWithDictionary:", v21);
        }
        else {
          dispatch_source_t v20 = 0LL;
        }

        goto LABEL_18;
      }
    }

    else
    {
      uint64_t v21 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      if (!v12) {
        goto LABEL_12;
      }
    }

    -[NSMutableDictionary setObject:forKeyedSubscript:]( v21,  "setObject:forKeyedSubscript:",  v12,  @"plugin-requirement");
    goto LABEL_12;
  }

  return 1;
}

        id v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  ifa_name,  v49));
        id v29 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v17, "objectForKeyedSubscript:", v28));

        if (!v29) {
          break;
        }
      }
    }

void sub_100018D38(_Unwind_Exception *a1)
{
}

LABEL_56:
      goto LABEL_57;
    }

    uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v45, "objectForKeyedSubscript:", v48));
    uint64_t v52 = kSCPropNetVPNRemoteAddress;
    uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([v51 objectForKeyedSubscript:kSCPropNetVPNRemoteAddress]);
    uint64_t v54 = isa_nsstring(v53);

    if (v54)
    {
      id v55 = (void *)objc_claimAutoreleasedReturnValue([v51 objectForKeyedSubscript:v52]);
      id v56 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession connectParameters](self, "connectParameters"));
      [v56 setObject:v55 forKeyedSubscript:@"ServerAddress"];
    }

    SEL v57 = kSCPropNetVPNAuthName;
    SEL v58 = (void *)objc_claimAutoreleasedReturnValue([v51 objectForKeyedSubscript:kSCPropNetVPNAuthName]);
    uint64_t v59 = isa_nsstring(v58);

    if (v59)
    {
      uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue([v51 objectForKeyedSubscript:v57]);
      uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession connectParameters](self, "connectParameters"));
      [v61 setObject:v60 forKeyedSubscript:@"AccountName"];
    }

    id v62 = kSCPropNetVPNAuthPassword;
    __int16 v63 = (void *)objc_claimAutoreleasedReturnValue([v51 objectForKeyedSubscript:kSCPropNetVPNAuthPassword]);
    id v64 = isa_nsstring(v63);

    if (v64)
    {
      __int16 v65 = (void *)objc_claimAutoreleasedReturnValue([v51 objectForKeyedSubscript:v62]);
      id v66 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession connectParameters](self, "connectParameters"));
      [v66 setObject:v65 forKeyedSubscript:@"Password"];
    }

    __int128 v67 = kSCPropNetVPNAuthenticationMethod;
    v68 = (void *)objc_claimAutoreleasedReturnValue([v51 objectForKeyedSubscript:kSCPropNetVPNAuthenticationMethod]);
    id v69 = isa_nsstring(v68);

    if (!v69)
    {
LABEL_47:
      uint64_t v89 = kSCPropNetVPNDisconnectOnIdle;
      int v90 = (void *)objc_claimAutoreleasedReturnValue([v51 objectForKeyedSubscript:kSCPropNetVPNDisconnectOnIdle]);
      if (isa_nsnumber())
      {
        __int128 v91 = kSCPropNetVPNDisconnectOnIdleTimer;
        v92 = (void *)objc_claimAutoreleasedReturnValue([v51 objectForKeyedSubscript:kSCPropNetVPNDisconnectOnIdleTimer]);
        uint64_t v93 = isa_nsnumber();

        if (!v93)
        {
LABEL_52:

          goto LABEL_53;
        }

        int v90 = (void *)objc_claimAutoreleasedReturnValue([v51 objectForKeyedSubscript:v89]);
        if ([v90 BOOLValue])
        {
          uint64_t v94 = (void *)objc_claimAutoreleasedReturnValue([v51 objectForKeyedSubscript:v91]);
          v95 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession connectParameters](self, "connectParameters"));
          [v95 setObject:v94 forKeyedSubscript:@"IdleTimer"];
        }
      }

      goto LABEL_52;
    }

    __int16 v70 = (void *)objc_claimAutoreleasedReturnValue([v51 objectForKeyedSubscript:v67]);
    if ([v70 isEqualToString:kSCValNetVPNAuthenticationMethodPassword])
    {
      uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession connectParameters](self, "connectParameters"));
      [v71 setObject:@"Password" forKeyedSubscript:@"AuthMethod"];
    }

    else
    {
      unsigned int v84 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession connectParameters](self, "connectParameters"));
      [v84 setObject:@"Certificate" forKeyedSubscript:@"AuthMethod"];

      uint64_t v85 = kSCPropNetVPNLocalCertificate;
      v86 = (void *)objc_claimAutoreleasedReturnValue([v51 objectForKeyedSubscript:kSCPropNetVPNLocalCertificate]);
      uint64_t v87 = isa_nsdata();

      if (!v87) {
        goto LABEL_46;
      }
      uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue([v51 objectForKeyedSubscript:v85]);
      uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession connectParameters](self, "connectParameters"));
      [v88 setObject:v71 forKeyedSubscript:@"CertificateRef"];
    }

LABEL_46:
    goto LABEL_47;
  }

  id v72 = [v33 type];

  if (v72 == (id)5 && v5)
  {
    uint64_t v34 = (void *)_CFXPCCreateCFObjectFromXPCObject(v5);
    uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue([v34 objectForKeyedSubscript:NEVPNConnectionStartOptionUsername]);
    id v74 = isa_nsstring(v73);

    if (v74)
    {
      v75 = (void *)objc_claimAutoreleasedReturnValue([v34 objectForKeyedSubscript:NEVPNConnectionStartOptionUsername]);
      uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession connectParameters](self, "connectParameters"));
      [v76 setObject:v75 forKeyedSubscript:@"AccountName"];
    }

    __int16 v77 = (void *)objc_claimAutoreleasedReturnValue([v34 objectForKeyedSubscript:NEVPNConnectionStartOptionPassword]);
    v78 = isa_nsstring(v77);

    if (v78)
    {
      uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue([v34 objectForKeyedSubscript:NEVPNConnectionStartOptionPassword]);
      uint64_t v80 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession connectParameters](self, "connectParameters"));
      [v80 setObject:v79 forKeyedSubscript:@"Password"];
    }

    uint64_t v45 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession connectParameters](self, "connectParameters"));
    -[NSMutableDictionary addEntriesFromDictionary:](v45, "addEntriesFromDictionary:", v34);
    goto LABEL_56;
  }

LABEL_58:
  if (-[NESMSession isOnDemand](self, "isOnDemand"))
  {
    id v101 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession pluginType](self, "pluginType"));
    v102 = +[NETunnelProviderProtocol isLegacyPluginType:]( &OBJC_CLASS___NETunnelProviderProtocol,  "isLegacyPluginType:",  v101);

    if (v102)
    {
      id v103 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession connectParameters](self, "connectParameters"));
      v104 = (void *)objc_claimAutoreleasedReturnValue([v103 objectForKeyedSubscript:@"IdleTimer"]);

      if (!v104)
      {
        id v105 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession connectParameters](self, "connectParameters"));
        [v105 setObject:&off_1000C17D0 forKeyedSubscript:@"IdleTimer"];
      }

      if (v5)
      {
        string = xpc_dictionary_get_string(v5, "match-domain");
        v107 = xpc_dictionary_get_string(v5, "match-hostname");
        if (string)
        {
          id v108 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", string));
          id v109 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession connectParameters](self, "connectParameters"));
          [v109 setObject:v108 forKeyedSubscript:@"OnDemandMatchDomain"];
        }

        if (v107)
        {
          uint64_t v110 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v107));
          __int128 v111 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession connectParameters](self, "connectParameters"));
          [v111 setObject:v110 forKeyedSubscript:@"OnDemandHostName"];
        }
      }

      __int128 v112 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession configuration](self, "configuration"));
      __int128 v113 = (void *)objc_claimAutoreleasedReturnValue([v112 appVPN]);

      if (v113)
      {
        if ((int)xpc_dictionary_get_int64(xdict, "SessionPID") >= 1)
        {
          __int128 v114 = NECopySigningIdentifierForPID();
          if (v114)
          {
            uint64_t v115 = (const void *)v114;
            v116 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession configuration](self, "configuration"));
            v117 = (void *)objc_claimAutoreleasedReturnValue([v116 appVPN]);
            __int16 v118 = [v117 copyAppRuleBySigningIdentifier:v115];

            if (v118)
            {
              v119 = (void *)objc_claimAutoreleasedReturnValue([v118 matchSigningIdentifier]);
              __int16 v120 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession connectParameters](self, "connectParameters"));
              [v120 setObject:v119 forKeyedSubscript:@"AppRuleID"];
            }

            CFRelease(v115);
          }
        }
      }
    }
  }
}

LABEL_17:
  uint64_t v26 = xpc_dictionary_get_remote_connection(v4);
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
  id v28 = xpc_dictionary_create_reply(v4);
  xpc_connection_send_message((xpc_connection_t)v27, v28);

LABEL_18:
LABEL_20:
}
    }
  }
}

    free(v8);
  }

  CFRelease(v4);
}

  uint64_t v33 = 0LL;
LABEL_18:

  return v33;
}

    id v13 = ne_log_obj(v4, v5);
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v16 = "No";
      if ((_DWORD)v2) {
        uint64_t v16 = "Yes";
      }
      *(_DWORD *)buf = 136315138;
      int v22 = v16;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "Path Controller needs roaming monitor: %s",  buf,  0xCu);
    }
  }

  return v2;
}

LABEL_7:
  xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(xdict);
  uint64_t v11 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
  xpc_connection_send_message(v11, reply);
}

    return 0LL;
  }

  id v5 = 1LL;
  uint64_t v6 = objc_msgSend(objc_getProperty(a1, v4, 24, 1), "apply");
  if ((v6 & 1) == 0)
  {
    int v8 = ne_log_obj(v6, v7);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v14 = 0;
      __int16 v10 = "Failed to apply policies with Low priority";
      uint64_t v11 = (uint8_t *)&v14;
LABEL_11:
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, v10, v11, 2u);
      goto LABEL_7;
    }

    goto LABEL_7;
  }

  return v5;
}

  id v28 = (void *)qword_1000CFBC8;
  qword_1000CFBC8 = (uint64_t)v2;
}

  id v12 = ne_log_obj(v10, v11);
  id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    if (self) {
      dispatch_source_t v15 = objc_getProperty(self, v14, 16LL, 1);
    }
    else {
      dispatch_source_t v15 = 0LL;
    }
    uint64_t v16 = (objc_class *)objc_opt_class(self);
    id v17 = NSStringFromClass(v16);
    id v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    *(_DWORD *)buf = 138412546;
    int v22 = v15;
    SEL v23 = 2112;
    int v24 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%@ in state %@: skipping a transition to running, because the plugin reasserted us",  buf,  0x16u);
  }
}

  if (v3)
  {
    uint64_t v9 = *(void *)(a1 + 48);
    __int16 v10 = objc_opt_class(&OBJC_CLASS___NSHTTPURLResponse);
    if ((objc_opt_isKindOfClass(v9, v10) & 1) == 0
      || (char *)[*(id *)(a1 + 48) statusCode] - 200 < (char *)0x64)
    {
      return;
    }
  }

  uint64_t v11 = *(void **)(a1 + 56);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) onDemandDomainCache]);

  if (v11 != v12) {
    return;
  }
  id v29 = 0u;
  uint64_t v30 = 0u;
  uint64_t v27 = 0u;
  id v28 = 0u;
  id v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "onDemandDomainCache", 0));
  id v14 = [v13 countByEnumeratingWithState:&v27 objects:v32 count:16];
  if (!v14)
  {
LABEL_22:

    goto LABEL_25;
  }

  dispatch_source_t v15 = v14;
  uint64_t v16 = *(void *)v28;
LABEL_13:
  id v17 = 0LL;
  while (1)
  {
    if (*(void *)v28 != v16) {
      objc_enumerationMutation(v13);
    }
    id v18 = *(void **)(*((void *)&v27 + 1) + 8 * v17);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:@"service-domains"]);
    if ((isa_nsarray(v19) & 1) == 0)
    {

      goto LABEL_20;
    }

    dispatch_source_t v20 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:@"service-domains"]);
    uint64_t v21 = [v20 isEqualToArray:*(void *)(a1 + 72)];

    if ((v21 & 1) != 0) {
      break;
    }
LABEL_20:
    if (v15 == (id)++v17)
    {
      dispatch_source_t v15 = [v13 countByEnumeratingWithState:&v27 objects:v32 count:16];
      if (v15) {
        goto LABEL_13;
      }
      goto LABEL_22;
    }
  }

  int v22 = v18;
  SEL v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) onDemandDomainCache]);
  int v24 = [v23 indexOfObject:v22];

  if (v22)
  {
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v22));
    [v25 setObject:&__kCFBooleanTrue forKeyedSubscript:@"service-probe-failed"];
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) onDemandDomainCache]);
    [v26 replaceObjectAtIndex:v24 withObject:v25];
    goto LABEL_26;
  }

LABEL_4:
  return v12;
}

LABEL_5:
}

  __int16 v10 = objc_claimAutoreleasedReturnValue([Property authenticationPlugin]);
  if (!v10)
  {
LABEL_14:
    if (self) {
      int v24 = objc_getProperty(self, v11, 16LL, 1);
    }
    else {
      int v24 = 0LL;
    }
    uint64_t v25 = 3LL;
    goto LABEL_22;
  }

  id v12 = (void *)v10;
  if (self) {
    id v13 = objc_getProperty(self, v11, 16LL, 1);
  }
  else {
    id v13 = 0LL;
  }
  id v14 = objc_claimAutoreleasedReturnValue([v13 connectParameters]);
  if (!v14) {
    goto LABEL_24;
  }
  uint64_t v16 = (void *)v14;
  if (self) {
    id v17 = objc_getProperty(self, v15, 16LL, 1);
  }
  else {
    id v17 = 0LL;
  }
  id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 connectParameters]);
  id v19 = objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:@"Password"]);
  if (!v19)
  {

LABEL_24:
    goto LABEL_25;
  }

  uint64_t v21 = (void *)v19;
  if (self) {
    int v22 = objc_getProperty(self, v20, 16LL, 1);
  }
  else {
    int v22 = 0LL;
  }
  SEL v23 = (void *)objc_claimAutoreleasedReturnValue([v22 extensibleSSOProvider]);

  if (!v23) {
    goto LABEL_14;
  }
LABEL_25:
  if (self) {
    int v24 = objc_getProperty(self, v11, 16LL, 1);
  }
  else {
    int v24 = 0LL;
  }
  uint64_t v25 = 7LL;
LABEL_22:
  [v24 setState:v25];
}

  if (!v8)
  {
LABEL_6:
    id v12 = 0LL;
    goto LABEL_11;
  }

LABEL_15:
        LOBYTE(v6) = 0;
      }
    }

    uint64_t v21 = [v3 virtualInterface];
    int v22 = (void *)objc_claimAutoreleasedReturnValue([v4 tunnelRemoteAddress]);
    LODWORD(v21) = NEVirtualInterfaceSetVPNServerAddress(v21, v22);

    if (!(_DWORD)v21)
    {
      uint64_t v25 = ne_log_obj(v23, v24);
      uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v163 = v3;
        _os_log_error_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "%@: failed to set the VPN server's remote address",  buf,  0xCu);
      }
    }

    goto LABEL_19;
  }

  return result;
}
}

    __int16 v10 = (os_log_s *)v4;
    id v17 = objc_sync_enter(v10);
    if (*((_DWORD *)v10 + 89))
    {
      id v19 = ne_log_obj(v17, v18);
      dispatch_source_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = *((_DWORD *)v10 + 89);
        uint64_t v50 = 67109120;
        LODWORD(v51) = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "De-allocating control unit %u",  (uint8_t *)&v50,  8u);
      }

      int v22 = *((_DWORD *)v10 + 89);
      objc_opt_self(&OBJC_CLASS___NESMFilterSession);
      os_unfair_lock_lock(&stru_1000CFC00);
      dword_1000CFC04 &= ~v22 | 0xE0000000;
      os_unfair_lock_unlock(&stru_1000CFC00);
      *((_DWORD *)v10 + 89) = 0;
    }

    objc_sync_exit(v10);

    goto LABEL_51;
  }

  if ([v4 type] == 1)
  {
    SEL v23 = (void *)objc_claimAutoreleasedReturnValue([v4 configuration]);
    int v24 = [v23 grade];

    if (v24 != (id)1)
    {
      if (v5)
      {
        if (objc_getProperty(v5, v26, 208LL, 1) != v4) {
          goto LABEL_52;
        }
        objc_setProperty_atomic(v5, v37, 0LL, 208LL);
      }

      else if (v4)
      {
        goto LABEL_52;
      }

      id v38 = ne_log_obj(v25, v26);
      __int16 v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v50 = 138412546;
        uint64_t v51 = v5;
        uint64_t v52 = 2112;
        uint64_t v53 = v4;
        uint64_t v11 = "%@: Deregister Personal VPN Session: %@";
        goto LABEL_50;
      }

      goto LABEL_51;
    }

    if (v5)
    {
      if (objc_getProperty(v5, v26, 192LL, 1) != v4) {
        goto LABEL_52;
      }
      objc_setProperty_atomic(v5, v27, 0LL, 192LL);
    }

    else if (v4)
    {
      goto LABEL_52;
    }

    id v28 = [v4 setIsDeregisteredEnterpriseVPNSession:1];
    uint64_t v30 = ne_log_obj(v28, v29);
    __int16 v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v50 = 138412546;
      uint64_t v51 = v5;
      uint64_t v52 = 2112;
      uint64_t v53 = v4;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%@: Deregister Enterprise VPN Session: %@",  (uint8_t *)&v50,  0x16u);
    }

    goto LABEL_51;
  }

  if ([v4 type] == 2)
  {
    uint64_t v31 = [v4 setIsDeregisteredAppVPNSession:1];
    uint64_t v33 = ne_log_obj(v31, v32);
    __int16 v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v50 = 138412546;
      uint64_t v51 = v5;
      uint64_t v52 = 2112;
      uint64_t v53 = v4;
      uint64_t v11 = "%@: Deregister App VPN Session: %@";
      goto LABEL_50;
    }

  uint64_t v36 = 0u;
  uint64_t v37 = 0u;
  uint64_t v34 = 0u;
  id v35 = 0u;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v11, 120LL, 1);
  }
  id obj = Property;
  id v29 = [obj countByEnumeratingWithState:&v34 objects:v40 count:16];
  if (v29)
  {
    id v28 = *(void *)v35;
    do
    {
      for (i = 0LL; i != v29; i = (char *)i + 1)
      {
        if (*(void *)v35 != v28) {
          objc_enumerationMutation(obj);
        }
        dispatch_source_t v15 = *(void *)(*((void *)&v34 + 1) + 8LL * (void)i);
        uint64_t v30 = 0u;
        uint64_t v31 = 0u;
        id v32 = 0u;
        uint64_t v33 = 0u;
        uint64_t v16 = *(id *)(a1 + 32);
        if (v16) {
          uint64_t v16 = objc_getProperty(v16, v13, 120LL, 1);
        }
        id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:v15]);
        id v18 = [v17 countByEnumeratingWithState:&v30 objects:v39 count:16];
        if (v18)
        {
          dispatch_source_t v20 = v18;
          uint64_t v21 = *(void *)v31;
          do
          {
            for (j = 0LL; j != v20; j = (char *)j + 1)
            {
              if (*(void *)v31 != v21) {
                objc_enumerationMutation(v17);
              }
              SEL v23 = *(void *)(*((void *)&v30 + 1) + 8LL * (void)j);
              int v24 = *(id *)(a1 + 32);
              if (v24) {
                int v24 = objc_getProperty(v24, v19, 120LL, 1);
              }
              uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:v15]);
              uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:v23]);

              [v26 handleNetworkConfigurationChange:v6];
            }

            dispatch_source_t v20 = [v17 countByEnumeratingWithState:&v30 objects:v39 count:16];
          }

          while (v20);
        }
      }

      id v29 = [obj countByEnumeratingWithState:&v34 objects:v40 count:16];
    }

    while (v29);
  }
}

      int v24 = 0LL;
LABEL_16:
      uint64_t v25 = +[NEProcessInfo copyUUIDsForExecutable:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForExecutable:",  @"/System/Library/Frameworks/CoreTelephony.framework/Support/CommCenter");
      uint64_t v27 = v25;
      if (!v25)
      {
        __int128 v41 = ne_log_obj(0LL, v26);
        __int128 v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315138;
          *(void *)uint64_t v87 = "/System/Library/Frameworks/CoreTelephony.framework/Support/CommCenter";
          _os_log_error_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_ERROR,  "Failed to get UUIDs for %s daemon",  buf,  0xCu);
        }

        uint64_t v85 = 0;
        goto LABEL_72;
      }

      unsigned int v84 = v25;
      id v29 = +[NEProcessInfo copyUUIDsForExecutable:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForExecutable:",  @"/Applications/InCallService.app/InCallService");
      if (!v29)
      {
        __int128 v43 = ne_log_obj(0LL, v28);
        __int16 v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315138;
          *(void *)uint64_t v87 = "/Applications/InCallService.app/InCallService";
          _os_log_error_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_ERROR,  "Failed to get UUIDs for %s daemon",  buf,  0xCu);
        }

        uint64_t v85 = 0;
        id v38 = 0LL;
        uint64_t v27 = v84;
        goto LABEL_71;
      }

      id v83 = +[NEProcessInfo copyUUIDsForExecutable:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForExecutable:",  @"/System/Library/Frameworks/CoreTelephony.framework/Support/CommCenterMobileHelper");
      if (!v83)
      {
        uint64_t v45 = ne_log_obj(0LL, v30);
        id v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315138;
          *(void *)uint64_t v87 = "/System/Library/Frameworks/CoreTelephony.framework/Support/CommCenterMobileHelper";
          _os_log_error_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_ERROR,  "Failed to get UUIDs for %s daemon",  buf,  0xCu);
        }

        uint64_t v85 = 0;
        id v38 = v29;
        SEL v47 = 0LL;
        uint64_t v27 = v84;
        goto LABEL_70;
      }

      uint64_t v82 = +[NEProcessInfo copyUUIDsForExecutable:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForExecutable:",  @"/System/Library/PrivateFrameworks/GeoServices.framework/geod");
      if (!v82)
      {
        uint64_t v48 = ne_log_obj(0LL, v31);
        uint64_t v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
        SEL v47 = v83;
        if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315138;
          *(void *)uint64_t v87 = "/System/Library/PrivateFrameworks/GeoServices.framework/geod";
          _os_log_error_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_ERROR,  "Failed to get UUIDs for %s daemon",  buf,  0xCu);
        }

        uint64_t v85 = 0;
        id v38 = v29;
        uint64_t v27 = v84;
        uint64_t v50 = 0LL;
        goto LABEL_69;
      }

      uint64_t v79 = +[NEProcessInfo copyNEHelperUUIDs](&OBJC_CLASS___NEProcessInfo, "copyNEHelperUUIDs");
      id v32 = -[NSUUID initWithUUIDString:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDString:",  @"67A03811-DB0A-594E-C2AE-8B0517EDF26F");
      uint64_t v93 = v32;
      unsigned int v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v93, 1LL));

      uint64_t v33 = -[NSUUID initWithUUIDString:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDString:",  @"569F2700-CAF9-483D-B19D-7AF406DCE15E");
      v92 = v33;
      uint64_t v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v92, 1LL));

      uint64_t v34 = +[NEProcessInfo copyDNSUUIDs](&OBJC_CLASS___NEProcessInfo, "copyDNSUUIDs");
      if (!v34)
      {
        uint64_t v85 = 0;
        id v38 = v29;
        SEL v47 = v83;
        uint64_t v27 = v84;
        uint64_t v50 = v82;
LABEL_68:

LABEL_69:
LABEL_70:

LABEL_71:
LABEL_72:

        id v18 = v85;
        goto LABEL_73;
      }

      v78 = v34;
      uint64_t v36 = ne_log_obj(v34, v35);
      uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315906;
        *(void *)uint64_t v87 = "-[NEPolicySession(AlwaysOnVPN) addCellularServicesExceptionPoliciesWithOrder:action:useIPSec:pr"
                         "iority:primaryPhysicalInterface:isAOVPN:policyIDList:]";
        *(_WORD *)&v87[8] = 2112;
        *(void *)&v87[10] = v19;
        uint64_t v88 = 2048;
        uint64_t v89 = a4;
        int v90 = 2112;
        __int128 v91 = @"CellularServices";
        _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_INFO,  "%s: Adding %@ <priority %ld> Exceptions policy for %@",  buf,  0x2Au);
      }

      if (a4 == 100)
      {
        id v38 = v29;
        uint64_t v39 = sub_100054464(a1, a2, 1, 0LL, v29, 1, 0LL, 0, 0LL, 0, 0LL, v19, v24, 0, v16);
        if ((v39 & 1) != 0)
        {
          uint64_t v85 = 1;
LABEL_52:
          uint64_t v27 = v84;
LABEL_66:
          uint64_t v50 = v82;
          SEL v47 = v83;
          goto LABEL_67;
        }

        __int16 v65 = ne_log_obj(v39, v40);
        id v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
        SEL v47 = v83;
        uint64_t v27 = v84;
        uint64_t v50 = v82;
        if (!os_log_type_enabled(v66, OS_LOG_TYPE_ERROR)) {
          goto LABEL_48;
        }
        *(_DWORD *)buf = 138412546;
        *(void *)uint64_t v87 = v19;
        *(_WORD *)&v87[8] = 2112;
        *(void *)&v87[10] = @"CellularServices";
        id v74 = "Failed to add %@ policy for %@ (InCallService/InCallService)";
        goto LABEL_60;
      }

      uint64_t v51 = sub_100054464(a1, a2, 1, v81, v84, 1, 0LL, 0, 0LL, 0, 0LL, v19, v24, 0, v16);
      id v38 = v29;
      if ((v51 & 1) == 0)
      {
        __int128 v67 = ne_log_obj(v51, v52);
        v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412546;
          *(void *)uint64_t v87 = v19;
          *(_WORD *)&v87[8] = 2112;
          *(void *)&v87[10] = @"CellularServices";
          _os_log_error_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_ERROR,  "Failed to add %@ policy for %@ (CommCenter/IMS)",  buf,  0x16u);
        }

        uint64_t v85 = 0;
        goto LABEL_52;
      }

      uint64_t v53 = sub_100054464(a1, a2, 1, v80, v84, 1, 0LL, 0, 0LL, 0, 0LL, v19, v24, 0, v16);
      uint64_t v27 = v84;
      if ((v53 & 1) != 0)
      {
        id v55 = sub_100057628(a1, a2, v84, v79, v19, v24, v16);
        if ((v55 & 1) != 0)
        {
          SEL v57 = sub_1000547C4(a1, a2, 1, v81, 1, 0LL, 0LL, 0, 0, v19, v24, v16);
          if ((v57 & 1) != 0)
          {
            if (v13)
            {
              uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:]( &OBJC_CLASS___NEPolicyResult,  "tunnelIPToInterfaceName:secondaryResultType:",  v13,  1LL));

              SEL v47 = v83;
              uint64_t v60 = sub_100054464(a1, a2, 1, 0LL, v83, 1, 0LL, 0, v13, 0, 0LL, v59, v24, 1, v16);
              id v19 = v59;
              if ((v60 & 1) != 0)
              {
LABEL_45:
                id v62 = a1;
                uint64_t v50 = v82;
                __int16 v63 = sub_100054464( v62,  a2,  1,  v47,  v82,  1,  0LL,  0,  v13,  0,  @"com.apple.GeoServices.CountryCode",  v19,  v24,  1,  v16);
                if ((v63 & 1) != 0)
                {
                  uint64_t v85 = 1;
LABEL_67:
                  uint64_t v34 = v78;
                  goto LABEL_68;
                }

                __int16 v77 = ne_log_obj(v63, v64);
                id v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v77);
                if (!os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
                {
LABEL_48:

                  uint64_t v85 = 0;
                  goto LABEL_67;
                }

                *(_DWORD *)buf = 138412546;
                *(void *)uint64_t v87 = v19;
                *(_WORD *)&v87[8] = 2112;
                *(void *)&v87[10] = @"CellularServices";
                id v74 = "Failed to add %@ policy for %@ (geod/CommCenterMobileHelper)";
LABEL_60:
                _os_log_error_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_ERROR, v74, buf, 0x16u);
                goto LABEL_48;
              }
            }

            else
            {
              SEL v47 = v83;
              uint64_t v60 = sub_100054464(a1, a2, 1, 0LL, v83, 1, 0LL, 0, 0LL, 0, 0LL, v19, v24, 1, v16);
              if ((v60 & 1) != 0) {
                goto LABEL_45;
              }
            }

            v75 = ne_log_obj(v60, v61);
            __int16 v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
            if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412546;
              *(void *)uint64_t v87 = v19;
              *(_WORD *)&v87[8] = 2112;
              *(void *)&v87[10] = @"CellularServices";
              uint64_t v71 = "Failed to add %@ policy for %@ (CommCenterMobileHelper/IMS)";
              goto LABEL_64;
            }

      id v4 = 21LL;
      goto LABEL_21;
    }

    if ((_DWORD)v4 == 1206)
    {
LABEL_20:
      id v4 = 28LL;
      goto LABEL_21;
    }

    if ((_DWORD)v4 != 1302) {
      goto LABEL_28;
    }
    id v4 = 18LL;
  }

    dispatch_source_t v20 = 0LL;
    goto LABEL_12;
  }

  if (v14)
  {
    dispatch_source_t v15 = objc_getProperty(v14, v12, 80LL, 1);
    uint64_t v16 = *(void *)(a1 + 32);
  }

  else
  {
    uint64_t v16 = 0LL;
    dispatch_source_t v15 = 0LL;
  }

  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  v23[2] = sub_10007FCA0;
  v23[3] = &unk_1000BE7F0;
  v23[4] = v16;
  int v24 = *(id *)(a1 + 40);
  id v17 = (void *)objc_claimAutoreleasedReturnValue([v15 remoteObjectProxyWithErrorHandler:v23]);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_10007FD78;
  v21[3] = &unk_1000BE7F0;
  id v18 = *(void **)(a1 + 40);
  v21[4] = *(void *)(a1 + 32);
  int v22 = v18;
  [v17 disposeWithCompletionHandler:v21];

  id v19 = v24;
LABEL_13:
}

LABEL_16:
    myCFRelease(&v10);
    myCFRelease(&v9);
    goto LABEL_17;
  }

  LOBYTE(v6) = 0;
LABEL_17:

  return (char)v6;
}

      dispatch_source_t v20 = 0LL;
LABEL_17:
      uint64_t v21 = +[NEProcessInfo copyUUIDsForExecutable:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForExecutable:",  @"/System/Library/PrivateFrameworks/VisualVoicemail.framework/vmd");
      SEL v23 = ne_log_obj(v21, v22);
      int v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      uint64_t v25 = v24;
      if (v21)
      {
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          uint64_t v26 = "";
          *(_DWORD *)buf = 136315906;
          *(void *)uint64_t v34 = "-[NEPolicySession(AlwaysOnVPN) addVoiceMailExceptionWithOrder:action:isHighPriority:isAOVPN:policyIDList:]";
          if (a4) {
            uint64_t v26 = " <at HIGH priority>";
          }
          *(_WORD *)&v34[8] = 2112;
          *(void *)&v34[10] = v16;
          id v35 = 2112;
          uint64_t v36 = @"VoiceMail";
          uint64_t v37 = 2080;
          id v38 = v26;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "%s: Adding %@ Exceptions policy for %@%s",  buf,  0x2Au);
        }

        uint64_t v27 = sub_100054464(a1, a2, 1, 0LL, v21, 1, 0LL, 0, 0LL, 0, 0LL, v16, v20, 0, 0LL);
        if ((v27 & 1) != 0)
        {
          id v32 = 1;
LABEL_31:

          dispatch_source_t v15 = v32;
          goto LABEL_32;
        }

        id v29 = ne_log_obj(v27, v28);
        uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)uint64_t v34 = "-[NEPolicySession(AlwaysOnVPN) addVoiceMailExceptionWithOrder:action:isHighPriority:isAOVPN:policyIDList:]";
          *(_WORD *)&v34[8] = 2112;
          *(void *)&v34[10] = v16;
          id v35 = 2112;
          uint64_t v36 = @"VoiceMail";
          _os_log_error_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "%s: Failed to add %@ policy for %@",  buf,  0x20u);
        }
      }

      else
      {
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)uint64_t v34 = "-[NEPolicySession(AlwaysOnVPN) addVoiceMailExceptionWithOrder:action:isHighPriority:isAOVPN:policyIDList:]";
          *(_WORD *)&v34[8] = 2112;
          *(void *)&v34[10] = @"VoiceMail";
          _os_log_error_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "%s: failed to get UUIDs for %@ daemon",  buf,  0x16u);
        }
      }

      id v32 = 0;
      goto LABEL_31;
    }

    id v17 = ne_log_obj(v11, v12);
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)uint64_t v34 = a3;
      *(_WORD *)&v34[4] = 2112;
      *(void *)&v34[6] = @"VoiceMail";
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Invalid action %d for %@", buf, 0x12u);
    }

    goto LABEL_12;
  }

  dispatch_source_t v15 = 1LL;
LABEL_32:

  return v15;
}

      uint64_t v16 = v9;
      id v18 = objc_getProperty(self, v17, 16LL, 1);
LABEL_17:
      id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 configuration]);
      sub_100014E78(v16, v19);

      return;
    }

        goto LABEL_17;
      }

      if (a1 <= 7)
      {
        id v17 = ne_log_obj(CString, v10);
        id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          id v18 = 136315138;
          id v19 = v8;
          _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&v18, 0xCu);
        }

        goto LABEL_16;
      }
    }
}

    close(v15);
    goto LABEL_17;
  }

  if ((v15 & 0x80000000) == 0)
  {
    uint64_t v33 = -[NSFileHandle initWithFileDescriptor:closeOnDealloc:]( objc_alloc(&OBJC_CLASS___NSFileHandle),  "initWithFileDescriptor:closeOnDealloc:",  v15,  1LL);
    goto LABEL_18;
  }

LABEL_33:
      id v13 = 3LL;
      goto LABEL_34;
    }

    if (v16 == 200)
    {
      id v13 = 4LL;
      goto LABEL_34;
    }

    if (v16 == 201)
    {
      id v13 = 5LL;
      goto LABEL_34;
    }

    if (v16 != 300) {
      goto LABEL_33;
    }
    id v13 = 23LL;
  }

  else
  {
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v10 domain]);
    id v18 = [v17 isEqualToString:@"IKEv2ProviderDisconnectionErrorDomain"];

    if (!v18) {
      goto LABEL_33;
    }
    id v13 = (uint64_t)[v10 code];
  }

        return;
      }

      if (!os_log_type_enabled(v7, OS_LOG_TYPE_FAULT)) {
        goto LABEL_33;
      }
      *(_WORD *)buf = 0;
      id v13 = "request uninstall configuration operation array is empty";
      id v14 = v8;
      dispatch_source_t v15 = 2;
    }

    else
    {
      id v12 = ne_log_obj(0LL, v3);
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)) {
        goto LABEL_33;
      }
      *(_DWORD *)buf = 136315138;
      id v56 = "-[NESMIKEv2VPNFallbackSession requestUninstall]";
      id v13 = "%s called with null self.configurationOperationArray";
      id v14 = v8;
      dispatch_source_t v15 = 12;
    }

    _os_log_fault_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, v13, buf, v15);
    goto LABEL_33;
  }

LABEL_34:
  -[NESMVPNSession setLastDisconnectError:](self, "setLastDisconnectError:", v10);
LABEL_35:
  id v19 = v8;
  __int128 v42 = v19;
  if (self)
  {
    uint64_t v21 = ne_log_obj(v19, v20);
    int v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      __int16 v44 = self;
      uint64_t v45 = 1024;
      LODWORD(v46) = a4;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%@: didSetStatus - %d", buf, 0x12u);
    }

    switch(a4)
    {
      case 0:
        SEL v23 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession stateHandler](self, "stateHandler"));
        [v23 handlePlugin:v42 statusDidChangeToDisconnectedWithReason:v13];

        int v24 = (CoreTelephonyClient *)objc_claimAutoreleasedReturnValue(-[NESMSession configuration](self, "configuration"));
        uint64_t v25 = objc_claimAutoreleasedReturnValue(-[CoreTelephonyClient appVPN](v24, "appVPN"));
        if (!v25)
        {
          uint64_t v30 = 0LL;
LABEL_54:

          goto LABEL_55;
        }

        uint64_t v26 = (void *)v25;
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession configuration](self, "configuration"));
        id v28 = (void *)objc_claimAutoreleasedReturnValue([v27 appVPN]);
        id v29 = (void *)objc_claimAutoreleasedReturnValue([v28 protocol]);
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v29 sliceUUID]);

        if (v30)
        {
          uint64_t v31 = self->_coreTelephonyClient;
          if (v31)
          {
            uint64_t v33 = v31;
            id Property = objc_getProperty(self, v32, 496LL, 1);

            if (Property)
            {
              uint64_t v37 = ne_log_obj(v35, v36);
              id v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
              if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
              {
                __int128 v40 = objc_getProperty(self, v39, 496LL, 1);
                *(_DWORD *)buf = 138412802;
                __int16 v44 = self;
                uint64_t v45 = 2112;
                id v46 = v30;
                SEL v47 = 2112;
                uint64_t v48 = v40;
                _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_INFO,  "%@: VPN Slice deactivate - sliceUUID %@ : sliceInterfaceName %@ ",  buf,  0x20u);
              }

              int v24 = self->_coreTelephonyClient;
              -[CoreTelephonyClient requestSliceDeactivation:]( v24,  "requestSliceDeactivation:",  objc_getProperty(self, v41, 496LL, 1));
              goto LABEL_54;
            }
          }
        }

        v26->_retryCount = 0LL;
LABEL_35:

        if ((interval & 0x8000000000000000LL) == 0)
        {
          if (interval)
          {
            uint64_t v45 = ne_log_obj(v38, v39);
            id v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
            if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession interfaceName](v20, "interfaceName"));
              *(_DWORD *)buf = 138413058;
              *(void *)&uint8_t buf[4] = v5;
              *(_WORD *)&_BYTE buf[12] = 2112;
              *(void *)&buf[14] = v50;
              *(_WORD *)&buf[22] = 2080;
              id v83 = "-[NESMAlwaysOnSession alwaysOnRetry:]";
              LOWORD(v84) = 2048;
              *(void *)((char *)&v84 + 2) = interval;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEBUG,  "%@[%@]:%s: Retrying in %ld Secs",  buf,  0x2Au);
            }

            SEL v47 = dispatch_time(0LL, 1000000000 * interval);
            uint64_t v48 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(-[NESMSession queue](v20, "queue"));
            *(void *)buf = _NSConcreteStackBlock;
            *(void *)&buf[8] = 3221225472LL;
            *(void *)&buf[16] = sub_10000B090;
            id v83 = (const char *)&unk_1000BEBE0;
            *(void *)&unsigned int v84 = v5;
            *((void *)&v84 + 1) = v20;
            dispatch_after(v47, v48, buf);

            goto LABEL_42;
          }

  id v74 = v40;

LABEL_36:
  uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession policySession](v2, "policySession"));
  SEL v47 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession configuration](v2, "configuration"));
  uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([v47 appVPN]);
  obja = (id)objc_claimAutoreleasedReturnValue([v48 appRules]);
  uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession pluginPIDArray](v2, "pluginPIDArray"));
  uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession pluginConfigurationEntities](v2, "pluginConfigurationEntities"));
  uint64_t v50 = objc_claimAutoreleasedReturnValue([v49 DNSSettings]);
  uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession pluginConfigurationEntities](v2, "pluginConfigurationEntities"));
  uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([v51 proxySettings]);
  uint64_t v53 = [v52 enabled];
  __int16 v77 = v48;
  uint64_t v79 = v47;
  uint64_t v76 = v49;
  if ((v53 & 1) != 0)
  {
    uint64_t v54 = 1;
  }

  else
  {
    uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession protocol](v2, "protocol"));
    id v72 = (void *)objc_claimAutoreleasedReturnValue([v73 proxySettings]);
    uint64_t v54 = [v72 enabled];
  }

  v75 = (void *)v50;
  id v55 = v50 != 0;
  id v56 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession configuration](v2, "configuration"));
  SEL v57 = (void *)objc_claimAutoreleasedReturnValue([v56 appVPN]);
  SEL v58 = (void *)objc_claimAutoreleasedReturnValue([v57 excludedDomains]);
  uint64_t v59 = sub_10003C574((uint64_t)v87, obja, v83, v82, v55, v54, v74, v4, v58);

  if ((v53 & 1) == 0)
  {
  }

  uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession configuration](v80, "configuration"));
  uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue([v60 VPN]);
  id v62 = (void *)objc_claimAutoreleasedReturnValue([v61 exceptionApps]);

  if (v62)
  {
    __int16 v63 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession policySession](v80, "policySession"));
    uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession configuration](v80, "configuration"));
    id v64 = (void *)objc_claimAutoreleasedReturnValue([v88 VPN]);
    __int16 v65 = (void *)objc_claimAutoreleasedReturnValue([v64 exceptionApps]);
    id v66 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession server](v80, "server"));
    __int128 v67 = (void *)objc_claimAutoreleasedReturnValue([v66 primaryPhysicalInterface]);
    v68 = (void *)objc_claimAutoreleasedReturnValue([v67 interfaceName]);
    id v69 = v4;
    __int16 v70 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession uid](v80, "uid"));
    sub_10003B1CC((uint64_t)v63, v65, v68, (int)[v70 intValue]);

    id v4 = v69;
  }

LABEL_46:
  return v59;
}

    id v29 = 0LL;
LABEL_28:
    if (NEVirtualInterfaceUpdateAdHocServiceReturnChanges( [v29 virtualInterface],  &v32,  *(unsigned __int8 *)(a1 + 40))) {
      return (id)v32;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

  is_extra_vpn_logging_enabled = nelog_is_extra_vpn_logging_enabled();
  if ((_DWORD)is_extra_vpn_logging_enabled)
  {
    __int128 v41 = ne_log_obj(is_extra_vpn_logging_enabled, v40);
    __int128 v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v44 = 138412290;
      uint64_t v45 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "service configuration %@",  (uint8_t *)&v44,  0xCu);
    }
  }

  return v8;
}

  v36.receiver = self;
  v36.super_class = (Class)&OBJC_CLASS___NESMIKEv2VPNSession;
  -[NESMVPNSession createConnectParametersWithStartMessage:](&v36, "createConnectParametersWithStartMessage:", v4);
}

LABEL_55:
        break;
      case 1:
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession stateHandler](self, "stateHandler"));
        [v30 handlePluginStatusDidChangeToContacting:v42];
        goto LABEL_55;
      case 2:
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession stateHandler](self, "stateHandler"));
        [v30 handlePluginStatusDidChangeToAuthenticating:v42];
        goto LABEL_55;
      case 3:
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession stateHandler](self, "stateHandler"));
        [v30 handlePluginStatusDidChangeToNegotiating:v42];
        goto LABEL_55;
      case 4:
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession stateHandler](self, "stateHandler"));
        [v30 handlePluginStatusDidChangeToConnected:v42];
        goto LABEL_55;
      case 5:
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession stateHandler](self, "stateHandler"));
        [v30 handlePluginStatusDidChangeToReasserting:v42];
        goto LABEL_55;
      case 6:
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession stateHandler](self, "stateHandler"));
        [v30 handlePlugin:v42 statusDidChangeToDisconnectingWithReason:v13];
        goto LABEL_55;
      case 7:
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession stateHandler](self, "stateHandler"));
        [v30 handlePluginStatusDidChangeToUpdating:v42];
        goto LABEL_55;
      default:
        break;
    }
  }
}

    SEL v47 = 0LL;
LABEL_59:

    goto LABEL_60;
  }

  SEL v47 = 0LL;
LABEL_60:

  return v47;
}

              uint64_t v21 = v71;
              id v17 = v72;
LABEL_56:

              int v22 = 0LL;
              uint64_t v16 = v73;
              goto LABEL_57;
            }

            id v4 = (id)v36;
            a1 = v80;
            uint64_t v6 = v81;
LABEL_45:

            uint64_t v26 = v70 + 1;
            uint64_t v21 = v71;
            id v17 = v72;
            uint64_t v25 = v68;
          }

          while ((id)(v70 + 1) != v69);
          int v24 = [v23 countByEnumeratingWithState:&v92 objects:v99 count:16];
          if (v24) {
            continue;
          }
          break;
        }

        v96 = v19;
        uint64_t v16 = v73;
      }

      if ((!*(_BYTE *)(a1 + 60)
         || sub_1000355D4( *(void *)(a1 + 32),  v4,  *(_DWORD *)(a1 + 56),  *(void **)(a1 + 48),  v83,  v6,  &v96))
        && sub_10002C620(v4))
      {
        __int16 v63 = ne_log_large_obj();
        SEL v23 = (id)objc_claimAutoreleasedReturnValue(v63);
        if (os_log_type_enabled((os_log_t)v23, OS_LOG_TYPE_DEBUG))
        {
          __int128 v67 = *(void *)(a1 + 40);
          *(_DWORD *)buf = 138412546;
          id v101 = v67;
          v102 = 2112;
          id v103 = v6;
          _os_log_debug_impl( (void *)&_mh_execute_header,  (os_log_t)v23,  OS_LOG_TYPE_DEBUG,  "control Policy IDs added %@: %@",  buf,  0x16u);
        }

        int v22 = 1LL;
LABEL_57:
      }

      else
      {
        int v22 = 0LL;
      }
    }

    else
    {
      int v22 = 0LL;
    }
  }

  else
  {
    int v22 = 0LL;
  }

  return v22;
}

LABEL_42:
          goto LABEL_36;
        }
      }

      id v56 = ne_log_obj(v23, v24);
      id v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      {
        uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue([v8 ethernetAddress]);
        id v62 = (void *)objc_claimAutoreleasedReturnValue([v8 mtu]);
        *(_DWORD *)buf = 134218240;
        *(void *)&uint8_t buf[4] = v61;
        *(_WORD *)&_BYTE buf[12] = 2048;
        *(void *)&buf[14] = v62;
        _os_log_error_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_ERROR,  "Cannot create a user ethernet interface without a ethernet address (%p) or an MTU (%p)",  buf,  0x16u);
      }
    }

    else
    {
      uint64_t v54 = ne_log_obj(v15, v16);
      id v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&uint8_t buf[4] = v10;
        _os_log_error_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_ERROR,  "Cannot create a virtual interface with unknown type %ld",  buf,  0xCu);
      }
    }

    (*((void (**)(id, void))v9 + 2))(v9, 0LL);
    goto LABEL_36;
  }

  if (v10 == (char *)1 && -[NESMVPNSession type](self, "type") == 2)
  {
    id v18 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession primaryTunnelPlugin](self, "primaryTunnelPlugin"));
    dispatch_source_t v20 = v18;
    v22 = v18 && (id Property = objc_getProperty(v18, v19, 24LL, 1)) != 0LL && Property[5] == 1LL;
  }

  else
  {
    int v22 = 0LL;
  }

  uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession queue](self, "queue"));
  -[NESMVPNSession setVirtualInterface:]( self,  "setVirtualInterface:",  NEVirtualInterfaceCreateNexusExtended(kCFAllocatorDefault, v10, v53, self, 1LL, v22, 0LL, 4096LL, 0LL, 0, 0LL));

  if (-[NESMVPNSession virtualInterface](self, "virtualInterface"))
  {
    NEVirtualInterfaceEnableFlowswitch(-[NESMVPNSession virtualInterface](self, "virtualInterface"), 1LL);
    v17[2](v17);
  }

  (*((void (**)(id, NEVirtualInterface_s *))v9 + 2))( v9,  -[NESMVPNSession virtualInterface](self, "virtualInterface"));
LABEL_36:
}
    }

    int v24 = [obj countByEnumeratingWithState:&v134 objects:v154 count:16];
  }

  while (v24);
LABEL_48:

  v133 = 0u;
  v132 = 0u;
  v131 = 0u;
  v130 = 0u;
  __int128 v112 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary keyEnumerator](v115, "keyEnumerator"));
  id v55 = [v112 countByEnumeratingWithState:&v130 objects:buf count:16];
  if (v55)
  {
    id v56 = v55;
    SEL v57 = *(void *)v131;
    do
    {
      for (j = 0LL; j != v56; j = (char *)j + 1)
      {
        if (*(void *)v131 != v57) {
          objc_enumerationMutation(v112);
        }
        uint64_t v59 = *(void **)(*((void *)&v130 + 1) + 8LL * (void)j);
        __int16 v126 = 0u;
        id v127 = 0u;
        __int16 v128 = 0u;
        unsigned int v129 = 0u;
        uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary keyEnumerator](v115, "keyEnumerator", v106));
        uint64_t v61 = [v60 countByEnumeratingWithState:&v126 objects:v146 count:16];
        if (v61)
        {
          id v62 = v61;
          __int16 v63 = *(void *)v127;
          do
          {
            for (k = 0LL; k != v62; k = (char *)k + 1)
            {
              if (*(void *)v127 != v63) {
                objc_enumerationMutation(v60);
              }
              __int16 v65 = *(void *)(*((void *)&v126 + 1) + 8LL * (void)k);
              if (([v59 isEqual:v65] & 1) == 0)
              {
                id v66 = (void *)objc_claimAutoreleasedReturnValue([v59 commonPrefixWithString:v65 options:2]);
                if ([v66 length]) {
                  -[NSMutableDictionary setObject:forKeyedSubscript:](v22, "setObject:forKeyedSubscript:", v66, v66);
                }
              }
            }

            id v62 = [v60 countByEnumeratingWithState:&v126 objects:v146 count:16];
          }

          while (v62);
        }
      }

      id v56 = [v112 countByEnumeratingWithState:&v130 objects:buf count:16];
    }

    while (v56);
  }

  __int128 v67 = -[NSMutableDictionary count](v22, "count");
  if (!v67)
  {
    __int128 v67 = -[NSMutableDictionary count](v115, "count");
    if (v67 == (id)1)
    {
      id v69 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allKeys](v115, "allKeys"));
      __int16 v70 = (void *)objc_claimAutoreleasedReturnValue([v69 objectAtIndexedSubscript:0]);

      -[NSMutableDictionary setObject:forKeyedSubscript:](v22, "setObject:forKeyedSubscript:", v70, v70);
    }
  }

  uint64_t v71 = ne_log_obj(v67, v68);
  id v72 = (os_log_s *)objc_claimAutoreleasedReturnValue(v71);
  id v12 = v108;
  if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
  {
    v102 = -[NSMutableDictionary count](v22, "count");
    id v103 = -[NSMutableDictionary count](v114, "count");
    v104 = -[NSMutableDictionary count](v115, "count");
    *(_DWORD *)v138 = 134218752;
    v139 = v102;
    v140 = 2048;
    v141 = v103;
    v142 = 2048;
    v143 = v104;
    v144 = 2048;
    v145 = v111;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_DEBUG,  "perApp VPN domain - Derived %lu unique prefixes, %lu unique domains, %lu reversed domains, %lu total bytes",  v138,  0x2Au);
  }

  if (-[NSMutableDictionary count](v114, "count"))
  {
    uint64_t v73 = -[NSMutableDictionary count](v22, "count");
    id v74 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allKeys](v114, "allKeys"));
  }

  else
  {
    uint64_t v73 = 0LL;
    id v74 = 0LL;
  }

  v75 = -[NETrie initWithDomains:prefixCount:reverse:partialSearchAllowed:partialSearchTerminator:extra_bytes:]( objc_alloc(&OBJC_CLASS___NETrie),  "initWithDomains:prefixCount:reverse:partialSearchAllowed:partialSearchTerminator:extra_bytes:",  v74,  v73,  1LL,  1LL,  46LL,  40LL);
  __int16 v77 = v75;
  if (!v75)
  {
    __int128 v91 = ne_log_obj(0LL, v76);
    uint64_t v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v91);
    uint64_t v9 = v106;
    int v8 = v107;
    if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v155 = 138412546;
      *(void *)&v155[4] = a1;
      *(_WORD *)&v155[12] = 2080;
      *(void *)&v155[14] = "-[NESMPolicySession getDomainTrie:matchSigningIdentifier:appRules:masterSession:]";
      _os_log_error_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_ERROR,  "%@: %s - failed to build domain trie",  v155,  0x16u);
    }

    goto LABEL_95;
  }

  -[NETrie trie](v75, "trie");
  -[NETrie trie](v77, "trie");
  *(_DWORD *)(v125 + 4) = v124 - 40;
  -[NETrie trie](v77, "trie");
  *(_DWORD *)(v125 + _Block_object_dispose(va, 8) = v123;
  -[NETrie trie](v77, "trie");
  *(_DWORD *)(v125 + 12) = v122;
  -[NETrie trie](v77, "trie");
  *(_DWORD *)(v125 + 16) = v121;
  -[NETrie trie](v77, "trie");
  *(_DWORD *)(v125 + 20) = v120;
  -[NETrie trie](v77, "trie");
  *(_DWORD *)(v125 + 24) = v119;
  -[NETrie trie](v77, "trie");
  *(_DWORD *)(v125 + 2_Block_object_dispose(va, 8) = v118;
  *(void *)(v125 + 32) = 0x30000002ELL;
  v78 = objc_alloc(&OBJC_CLASS___NSData);
  -[NETrie trie](v77, "trie");
  uint64_t v79 = -[NSData initWithBytes:length:](v78, "initWithBytes:length:", v125, v117);
  uint64_t v9 = v106;
  uint64_t v80 = v106;
  os_unfair_lock_assert_owner((os_unfair_lock_t)&unk_1000CFBB0);
  uint64_t v82 = objc_msgSend(objc_getProperty(v108, v81, 16, 1), "addDomainTrieWithData:", v79);
  int v8 = v107;
  if (v82)
  {
    id v13 = (uint64_t)v82;
    is_debug_logging_enabled = nelog_is_debug_logging_enabled();
    if ((_DWORD)is_debug_logging_enabled)
    {
      v86 = ne_log_obj(is_debug_logging_enabled, v85);
      uint64_t v87 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
      if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
      {
        id Property = objc_getProperty(v108, v88, 48LL, 1);
        *(_DWORD *)v155 = 138413058;
        *(void *)&v155[4] = v108;
        *(_WORD *)&v155[12] = 2080;
        *(void *)&v155[14] = "-[NESMPolicyMasterSession addDomainTrieWithData:matchSigningIdentifier:]";
        *(_WORD *)&v155[22] = 2048;
        *(void *)&v155[24] = v13;
        LOWORD(v156) = 2112;
        *(void *)((char *)&v156 + 2) = Property;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_DEBUG,  "%@: %s - Added domain trie - ID %lu %@",  v155,  0x2Au);
      }
    }

    uint64_t v89 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v13,  v106));
    objc_msgSend(objc_getProperty(v108, v90, 48, 1), "setObject:forKeyedSubscript:", v89, v80);
  }

  else
  {
    v92 = ne_log_obj(0LL, v83);
    uint64_t v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v92);
    if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v155 = 138412546;
      *(void *)&v155[4] = v108;
      *(_WORD *)&v155[12] = 2080;
      *(void *)&v155[14] = "-[NESMPolicyMasterSession addDomainTrieWithData:matchSigningIdentifier:]";
      _os_log_error_impl( (void *)&_mh_execute_header,  v89,  OS_LOG_TYPE_ERROR,  "%@: %s - Failed to add domain trie",  v155,  0x16u);
    }

    id v13 = 0LL;
  }

  if (!v13)
  {
    v97 = *__error();
    uint64_t v98 = strerror_r(v97, (char *)v155, 0x80uLL);
    if ((_DWORD)v98) {
      v155[0] = 0;
    }
    id v100 = ne_log_obj(v98, v99);
    id v101 = (os_log_s *)objc_claimAutoreleasedReturnValue(v100);
    if (os_log_type_enabled(v101, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)v151 = v97;
      *(_WORD *)&v151[4] = 2080;
      *(void *)&v151[6] = v155;
      _os_log_fault_impl( (void *)&_mh_execute_header,  v101,  OS_LOG_TYPE_FAULT,  "Failed to add domain trie: [%d] %s",  buf,  0x12u);
    }

LABEL_95:
    id v13 = 0LL;
    goto LABEL_96;
  }

  v95 = ne_log_obj(v93, v94);
  v96 = (os_log_s *)objc_claimAutoreleasedReturnValue(v95);
  if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
  {
    -[NETrie trie](v77, "trie");
    *(_DWORD *)v155 = 134218240;
    *(void *)&v155[4] = v116;
    *(_WORD *)&v155[12] = 2048;
    *(void *)&v155[14] = v13;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v96,  OS_LOG_TYPE_DEBUG,  "Added domain trie of length %zu <id %lu>",  v155,  0x16u);
  }

LABEL_96:
  __int16 v10 = v109;
LABEL_46:

  return v13;
}

  uint64_t v34 = ne_log_obj(Property, v8);
  id v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v36 = a1[5];
    uint64_t v37 = [v36 type];
    id v38 = (void *)objc_claimAutoreleasedReturnValue([a1[5] configuration]);
    uint64_t v39 = [v38 grade];
    __int128 v40 = (void *)objc_claimAutoreleasedReturnValue([a1[5] configuration]);
    __int128 v41 = (void *)objc_claimAutoreleasedReturnValue([v40 VPN]);
    *(_DWORD *)buf = 138413058;
    v254 = v36;
    v255 = 1024;
    *(_DWORD *)v256 = v37;
    *(_WORD *)&v256[4] = 1024;
    *(_DWORD *)&v256[6] = v39;
    LOWORD(v257) = 1024;
    *(_DWORD *)((char *)&v257 + 2) = [v41 isEnabled];
    _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "Failed to register session: %@ type: %d grade: %d vpn enabled: %d",  buf,  0x1Eu);
  }

  uint64_t v31 = (void (**)(id, uint64_t))a1[6];
  if (v31)
  {
    id v32 = 0LL;
    goto LABEL_46;
  }

            v203 = v55;
            if (v51)
            {
              id v62 = objc_getProperty(self, v48, 440LL, 1);
              if (v62)
              {
                __int16 v63 = v62;
                id v64 = v9;
                __int16 v65 = 0;
                goto LABEL_50;
              }
            }

            id v66 = objc_getProperty(self, v48, 440LL, 1);
            __int128 v67 = v51 != v66;
            if (v51 == v66)
            {
              if (v51)
              {
                id v64 = v9;
                __int16 v63 = 0LL;
                __int16 v65 = 1;
LABEL_50:
                v68 = v10;
                if (objc_getProperty(self, v48, 440LL, 1))
                {
                  id v69 = (void *)objc_claimAutoreleasedReturnValue([v51 interfaceName]);
                  __int16 v70 = self;
                  id v72 = objc_msgSend(objc_getProperty(self, v71, 440, 1), "interfaceName");
                  uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue(v72);
                  __int128 v67 = [v69 isEqualToString:v73];

                  uint64_t v21 = v208;
                  if (!v65)
                  {
LABEL_53:
                    uint64_t v9 = v64;
                    self = v70;
                    __int16 v10 = v68;
                    id v12 = v206;
                    uint64_t v53 = &selRef_setName_;
LABEL_54:

                    if ((v196 & 1) != 0) {
                      goto LABEL_55;
                    }
                    goto LABEL_61;
                  }
                }

                else
                {
                  __int16 v70 = self;
                  __int128 v67 = 0;
                  if (!v65) {
                    goto LABEL_53;
                  }
                }

                goto LABEL_53;
              }
            }

            else
            {

              if (v51)
              {
                __int16 v63 = 0LL;
                __int128 v67 = 1;
                goto LABEL_54;
              }
            }

            uint64_t v51 = 0LL;
            if (v196)
            {
LABEL_55:

              if ((v199 & 1) == 0) {
                goto LABEL_56;
              }
              goto LABEL_62;
            }

void sub_10001E420(_Unwind_Exception *a1)
{
}

void sub_10001E90C(_Unwind_Exception *a1)
{
}

void sub_10001EA28(_Unwind_Exception *a1)
{
}

LABEL_41:
          uint64_t v52 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(-[NESMSession queue](v20, "queue"));
          *(void *)buf = _NSConcreteStackBlock;
          *(void *)&buf[8] = 3221225472LL;
          *(void *)&buf[16] = sub_10000AF6C;
          id v83 = (const char *)&unk_1000BEBE0;
          *(void *)&unsigned int v84 = v5;
          *((void *)&v84 + 1) = v20;
          dispatch_async(v52, buf);

LABEL_42:
          goto LABEL_43;
        }

        goto LABEL_26;
      }

      id v29 = 0;
    }

    __int128 v43 = ne_log_obj(v27, v28);
    __int16 v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession interfaceName](v20, "interfaceName"));
      *(_DWORD *)buf = 138412802;
      *(void *)&uint8_t buf[4] = v5;
      *(_WORD *)&_BYTE buf[12] = 2112;
      *(void *)&buf[14] = v51;
      *(_WORD *)&buf[22] = 2080;
      id v83 = "-[NESMAlwaysOnSession nextRetryIntervalForSession:]";
      _os_log_debug_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "%@[%@]:%s: Retrying now", buf, 0x20u);
    }

    if (v29)
    {

      goto LABEL_41;
    }

    interval = 0LL;
    v26->_interval = *(void *)(v5 + 416);
    goto LABEL_34;
  }

  if ((id)-[NESMVPNSession parentType](self, "parentType") != (id)2) {
    goto LABEL_45;
  }
  id v5 = objc_claimAutoreleasedReturnValue(-[NESMVPNSession parent](self, "parent"));
  id v14 = self;
  int v8 = v14;
  if (v5 && v14)
  {
    dispatch_source_t v15 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([(id)v5 queue]);
    *(void *)buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&buf[16] = sub_100085BF0;
    id v83 = (const char *)&unk_1000BEDA8;
    *(void *)&unsigned int v84 = v5;
    uint64_t v16 = v8;
    *((void *)&v84 + 1) = v16;
    uint64_t v85 = v3;
    dispatch_async(v15, buf);

    id v17 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([(id)v5 queue]);
    block = _NSConcreteStackBlock;
    __int16 v77 = 3221225472LL;
    v78 = sub_100085E74;
    uint64_t v79 = &unk_1000BEBE0;
    uint64_t v80 = v5;
    unsigned int v81 = v16;
    dispatch_async(v17, &block);
  }

LABEL_44:
LABEL_45:
  uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession configuration](self, "configuration"));
  uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([v53 VPN]);
  id v55 = (void *)objc_claimAutoreleasedReturnValue([v54 protocol]);
  id v56 = [v55 includeAllNetworks];

  if (!v56)
  {
LABEL_52:
    uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession configuration](self, "configuration"));
    id v62 = objc_claimAutoreleasedReturnValue([v61 appVPN]);
    if (v62)
    {
      __int16 v63 = (void *)v62;
      id v64 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession configuration](self, "configuration"));
      __int16 v65 = (void *)objc_claimAutoreleasedReturnValue([v64 appVPN]);
      id v66 = (void *)objc_claimAutoreleasedReturnValue([v65 protocol]);
      __int128 v67 = (void *)objc_claimAutoreleasedReturnValue([v66 sliceUUID]);

      if ((_DWORD)v3 == 1 && v67)
      {
        if (self)
        {
          objc_setProperty_atomic(self, v68, 0LL, 496LL);
          self->_coreTelephonyConnType = 36;
          objc_setProperty_atomic(self, v69, 0LL, 504LL);
          self->_slicePendingStartPluginPid = 0;
          objc_setProperty_atomic(self, v70, 0LL, 512LL);
        }
      }
    }

    else
    {
    }

    return;
  }

  SEL v57 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession configuration](self, "configuration"));
  SEL v58 = (void *)objc_claimAutoreleasedReturnValue([v57 VPN]);
  uint64_t v59 = [v58 isOnDemandEnabled];

  if ((v59 & 1) != 0)
  {
    if ((_DWORD)v3 == 1)
    {
      -[NESMVPNSession setStopped:](self, "setStopped:", 1LL);
      return;
    }

    goto LABEL_52;
  }

  if ((_DWORD)v3 != 1)
  {
    if ((_DWORD)v3 == 3)
    {
      sub_100022CD0(self, v60);
      return;
    }

    goto LABEL_52;
  }

  uint64_t v71 = -[NESMVPNSession stopped](self, "stopped");
  if (v71)
  {
    uint64_t v73 = ne_log_obj(v71, v72);
    id v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412546;
      *(void *)&uint8_t buf[4] = self;
      *(_WORD *)&_BYTE buf[12] = 2080;
      *(void *)&buf[14] = "-[NESMVPNSession setStatus:]";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEBUG,  "%@:%s: Session stopped, no retry",  buf,  0x16u);
    }
  }

  else
  {
    sub_100022D34(self, v72);
  }

      if (v85 == (id)++v20)
      {
        uint64_t v85 = [v18 countByEnumeratingWithState:&v87 objects:v95 count:16];
        if (!v85) {
          goto LABEL_46;
        }
        goto LABEL_12;
      }
    }
  }

  id v13 = ne_log_obj(v10, v11);
  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v98 = v9;
    _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Failed to load the current configurations: %@",  buf,  0xCu);
  }

LABEL_48:
  __int16 v77 = *(void *)(*(void *)(a1 + 40) + 8LL);
  v78 = *(void **)(v77 + 40);
  *(void *)(v77 + 40) = 0LL;
}

LABEL_30:
  uint64_t v34 = -[NESMVPNSession resetPerAppPolicy](self, "resetPerAppPolicy");
  if (!v34)
  {
    uint64_t v36 = ne_log_obj(v34, v35);
    uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v45 = self;
      _os_log_error_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "%@: Failed to reset the per-app policy after a configuration update, disconnecting",  buf,  0xCu);
    }

    id v38 = (void *)objc_claimAutoreleasedReturnValue(-[NESMVPNSession stateHandler](self, "stateHandler"));
    [v38 handleStop];
  }

  uint64_t v16 = 1;
LABEL_35:

  return v16;
}
}
  }

LABEL_35:
    id v74 = 0;
    goto LABEL_36;
  }

  return v27;
}

    uint64_t v25 = ne_log_obj(v9, v8);
    uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = a1[4];
      id v28 = a1[5];
      *(_DWORD *)buf = 138412546;
      v254 = v27;
      v255 = 2112;
      *(void *)v256 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "%@: Register Always-On VPN Session: %@",  buf,  0x16u);
    }

    uint64_t v30 = a1[4];
    if (v30) {
      objc_setProperty_atomic(v30, v29, a1[5], 176LL);
    }
    goto LABEL_39;
  }

  xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
  id v28 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
  xpc_connection_send_message(v28, reply);
}

void sub_100021958(void *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a5;
  if (a1)
  {
    id v11 = a4;
    uint64_t v13 = ne_log_obj(v11, v12);
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t v39 = 138412802;
      *(void *)&v39[4] = a1;
      *(_WORD *)&v39[12] = 2080;
      *(void *)&v39[14] = "-[NESMVPNSession handlePluginStart:pid:error:physicalInterface:interfaceRanked:]";
      *(_WORD *)&v39[22] = 2112;
      id v40 = v10;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "%@: %s - Starting on physicalInterface %@",  v39,  0x20u);
    }

    if (!v10) {
      goto LABEL_21;
    }
    char v15 = [a1 proxyEnabled:v10];
    id Property = (id)objc_claimAutoreleasedReturnValue([a1 server]);
    id v18 = Property;
    if (Property) {
      id Property = objc_getProperty(Property, v17, 72LL, 1);
    }
    id v19 = Property;
    dispatch_source_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:v10]);

    if (v20)
    {
      id v21 = (id)objc_claimAutoreleasedReturnValue([a1 server]);
      SEL v23 = v21;
      if (v21) {
        id v21 = objc_getProperty(v21, v22, 72LL, 1);
      }
      id v24 = v21;
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:v10]);
      uint64_t flags = (uint64_t)[v25 unsignedLongLongValue];

      uint64_t v29 = ne_log_obj(v27, v28);
      uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_19;
      }
      *(_DWORD *)uint64_t v39 = 138413058;
      *(void *)&v39[4] = a1;
      *(_WORD *)&v39[12] = 2080;
      *(void *)&v39[14] = "-[NESMVPNSession handlePluginStart:pid:error:physicalInterface:interfaceRanked:]";
      *(_WORD *)&v39[22] = 2112;
      id v40 = v10;
      LOWORD(v41) = 2048;
      *(void *)((char *)&v41 + 2) = flags;
      uint64_t v31 = "%@: %s - physicalInterface %@ - ranked interface flags %llX";
    }

    else
    {
      uint64_t v32 = nwi_state_copy();
      if (v32)
      {
        uint64_t v34 = v32;
        uint64_t ifstate = nwi_state_get_ifstate(v32, [v10 UTF8String]);
        if (ifstate) {
          uint64_t flags = nwi_ifstate_get_flags(ifstate);
        }
        else {
          uint64_t flags = 0LL;
        }
        uint64_t v32 = nwi_state_release(v34);
      }

      else
      {
        uint64_t flags = 0LL;
      }

      uint64_t v36 = ne_log_obj(v32, v33);
      uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_19;
      }
      *(_DWORD *)uint64_t v39 = 138413058;
      *(void *)&v39[4] = a1;
      *(_WORD *)&v39[12] = 2080;
      *(void *)&v39[14] = "-[NESMVPNSession handlePluginStart:pid:error:physicalInterface:interfaceRanked:]";
      *(_WORD *)&v39[22] = 2112;
      id v40 = v10;
      LOWORD(v41) = 2048;
      *(void *)((char *)&v41 + 2) = flags;
      uint64_t v31 = "%@: %s - physicalInterface %@ - non-ranked interface flags %llX";
    }

    _os_log_debug_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, v31, v39, 0x2Au);
LABEL_19:

    sub_100021CB0(a1, (flags & 4) != 0, v15, v10);
    uint64_t v37 = objc_opt_class(&OBJC_CLASS___NEFlowDivertPlugin);
    if ((objc_opt_isKindOfClass(v9, v37) & 1) != 0) {
      sub_100016D18(v9, v10);
    }
LABEL_21:
    id v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "stateHandler", *(_OWORD *)v39, *(void *)&v39[16], v40, v41));
    [v38 handlePlugin:v9 didStartWithPID:a3 error:v11];
  }
}

void sub_100021CB0(void *a1, char a2, char a3, void *a4)
{
  id v53 = a4;
  if (!a1) {
    goto LABEL_29;
  }
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
  int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 VPN]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 protocol]);
  unsigned int v10 = [v9 includeAllNetworks];

  if (!v10)
  {
    uint64_t v24 = objc_claimAutoreleasedReturnValue([a1 policySession]);
    id v25 = (id)objc_claimAutoreleasedReturnValue([a1 pluginPIDArray]);
    id v35 = v53;
    uint64_t v36 = v35;
    if (v24)
    {
      int v37 = *(_DWORD *)(v24 + 8);
      if (v37 == 2 || v37 == 1 && *(void *)(v24 + 32) != 2LL)
      {
        uint64_t v54 = _NSConcreteStackBlock;
        uint64_t v55 = 3221225472LL;
        id v56 = sub_10003414C;
        SEL v57 = &unk_1000BDC80;
        SEL v58 = (_DWORD *)v24;
        id v59 = v35;
        id v60 = v25;
        LOBYTE(v61) = a2;
        BYTE1(v61) = a3;
        sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, &v54);
      }
    }

    goto LABEL_18;
  }

  uint64_t v11 = objc_claimAutoreleasedReturnValue([a1 primaryTunnelPlugin]);
  if (v11)
  {
    uint64_t v12 = (void *)v11;
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([a1 primaryTunnelPlugin]);
    if (sub_100016694((unsigned int *)v13))
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue([a1 primaryTunnelPlugin]);
      id v16 = sub_100015D14(v14, v15);
      id v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
      id v18 = [v17 count];

      if (!v18) {
        goto LABEL_8;
      }
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([a1 policySession]);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([a1 primaryTunnelPlugin]);
      int v19 = sub_100016694((unsigned int *)v13);
      dispatch_source_t v20 = (void *)objc_claimAutoreleasedReturnValue([a1 server]);
      id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 primaryPhysicalInterface]);
      int v22 = (void *)objc_claimAutoreleasedReturnValue([v21 interfaceName]);
      sub_100034988((uint64_t)v12, v19, v22, a2, a3);
    }
  }

LABEL_8:
  uint64_t v23 = objc_claimAutoreleasedReturnValue([a1 authenticationPlugin]);
  if (v23)
  {
    uint64_t v24 = v23;
    id v25 = (id)objc_claimAutoreleasedReturnValue([a1 authenticationPlugin]);
    if (!sub_100016694((unsigned int *)v25))
    {
LABEL_18:

      goto LABEL_19;
    }

    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([a1 authenticationPlugin]);
    id v28 = sub_100015D14(v26, v27);
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
    id v30 = [v29 count];

    if (v30)
    {
      uint64_t v24 = objc_claimAutoreleasedReturnValue([a1 policySession]);
      id v25 = (id)objc_claimAutoreleasedReturnValue([a1 authenticationPlugin]);
      int v31 = sub_100016694((unsigned int *)v25);
      uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([a1 server]);
      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v32 primaryPhysicalInterface]);
      uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v33 interfaceName]);
      sub_100034988(v24, v31, v34, a2, a3);

      goto LABEL_18;
    }
  }

LABEL_29:
}

LABEL_30:
        goto LABEL_31;
      }
    }

    else if (!v47)
    {
      uint64_t v48 = 0LL;
      goto LABEL_69;
    }

    if ([v47 count]) {
      id v83 = (char)v79;
    }
    else {
      id v83 = 1;
    }
    if ((v83 & 1) == 0)
    {
      v95 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithBlock:]( &OBJC_CLASS___NSPredicate,  "predicateWithBlock:",  &stru_1000BD910));
      uint64_t v48 = (id)objc_claimAutoreleasedReturnValue([v47 filteredArrayUsingPredicate:v95]);

      uint64_t v98 = ne_log_obj(v96, v97);
      v99 = (os_log_s *)objc_claimAutoreleasedReturnValue(v98);
      if (os_log_type_enabled(v99, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = v3;
        *(_WORD *)&_BYTE buf[12] = 2112;
        *(void *)&buf[14] = v48;
        _os_log_impl( (void *)&_mh_execute_header,  v99,  OS_LOG_TYPE_INFO,  "%@: Using per-app match domains as search domains: %@",  buf,  0x16u);
      }

      goto LABEL_69;
    }

    goto LABEL_68;
  }

  return result;
}

    -[NSMutableDictionary setObject:forKeyedSubscript:]( v6,  "setObject:forKeyedSubscript:",  &off_1000C1818,  kSCPropNetIPSecOnDemandEnabled);
    goto LABEL_30;
  }

  uint64_t v7 = v5;
  int v8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v4 configuration]);
  unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([v9 name]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v10, kSCPropUserDefinedName);

  if (nelog_is_info_logging_enabled()) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v6,  "setObject:forKeyedSubscript:",  &off_1000C1818,  kSCPropNetPPPVerboseLogging);
  }
  -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v6, kSCEntNetPPP);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v7 IPv4Settings]);

  if (v11)
  {
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v7 IPv4Settings]);
    uint64_t v13 = [v12 copyLegacyDictionary];
    -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v13, kSCEntNetIPv4);
  }

  id v14 = (void *)objc_claimAutoreleasedReturnValue([v7 IPv6Settings]);

  if (v14)
  {
    char v15 = (void *)objc_claimAutoreleasedReturnValue([v7 IPv6Settings]);
    id v16 = [v15 copyLegacyDictionary];
    -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v16, kSCEntNetIPv6);
  }

  id v17 = (void *)objc_claimAutoreleasedReturnValue([v7 DNSSettings]);

  if (v17)
  {
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v7 DNSSettings]);
    int v19 = [v18 copyLegacyDictionary];
    -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v19, kSCEntNetDNS);
  }

  dispatch_source_t v20 = (void *)objc_claimAutoreleasedReturnValue([v7 proxySettings]);

  if (v20)
  {
    id v21 = (void *)objc_claimAutoreleasedReturnValue([v7 proxySettings]);
    int v22 = [v21 copyLegacyDictionary];
    -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v22, kSCEntNetProxies);
  }

  if ([v7 type] == (id)2)
  {
    uint64_t v23 = [v7 copyLegacyIPSecDictionary];
    -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", v23, kSCEntNetIPSec);
  }

  if (v8)
  {
LABEL_33:
    id v46 = @"NetworkExtension";
    id v35 = (void *)objc_claimAutoreleasedReturnValue([v4 configuration]);
    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v35 identifier]);
    int v37 = (void *)objc_claimAutoreleasedReturnValue([v36 UUIDString]);
    SEL v47 = v37;
    id v38 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v47,  &v46,  1LL));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v8,  "setObject:forKeyedSubscript:",  v38,  @"EnvironmentVariables");
  }

        goto LABEL_30;
      }

      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        uint64_t v13 = "request install configuration operation array is empty";
        id v14 = v8;
        char v15 = 2;
        goto LABEL_11;
      }
    }

    else
    {
      uint64_t v12 = ne_log_obj(0LL, v3);
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136315138;
        id v59 = "-[NESMIKEv2VPNFallbackSession requestInstall]";
        uint64_t v13 = "%s called with null self.configurationOperationArray";
        id v14 = v8;
        char v15 = 12;
LABEL_11:
        _os_log_fault_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, v13, buf, v15);
      }
    }

uint64_t sub_100022194(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = ne_log_obj(a1, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v7 = 138412290;
    uint64_t v8 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%@: Re-setting policies because the installed apps changed",  (uint8_t *)&v7,  0xCu);
  }

  [*(id *)(a1 + 32) resetPerAppPolicy];
  return sub_10007B8E8(*(void *)(a1 + 32), 1);
}

void sub_10002224C(void *a1)
{
  if (a1)
  {
    if (([a1 stopped] & 1) != 0
      || (uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]),
          uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 VPN]),
          id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 protocol]),
          unsigned int v5 = [v4 includeAllNetworks],
          v4,
          v3,
          v2,
          !v5))
    {
      sub_1000229A0(a1);
    }

    else
    {
      [a1 setDefaultDropType:3];
      uint64_t v84 = 3LL;
      if (!objc_getProperty(a1, v6, 424LL, 1))
      {
        int v7 = (void *)objc_claimAutoreleasedReturnValue([a1 getIDSNetworkAgentDomain]);
        objc_setProperty_atomic(a1, v8, v7, 440LL);

        uint64_t v11 = ne_log_obj(v9, v10);
        uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412546;
          id Property = (const char *)objc_getProperty(a1, v13, 440LL, 1);
          __int16 v87 = 2112;
          v88[0] = @"clientchannel";
          _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "Watching Nexus <%@, %@> path",  buf,  0x16u);
        }

        id v14 = objc_alloc_init(&OBJC_CLASS___NWParameters);
        objc_msgSend( v14,  "requireNetworkAgentWithDomain:type:",  objc_getProperty(a1, v15, 440, 1),  @"clientchannel");
        id v16 = -[NWPathEvaluator initWithEndpoint:parameters:]( objc_alloc(&OBJC_CLASS___NWPathEvaluator),  "initWithEndpoint:parameters:",  0LL,  v14);
        objc_setProperty_atomic(a1, v17, v16, 424LL);

        objc_msgSend( objc_getProperty(a1, v18, 424, 1),  "addObserver:forKeyPath:options:context:",  a1,  @"path",  5,  0);
      }

      int v19 = (void *)objc_claimAutoreleasedReturnValue([a1 controlPolicySession]);
      [v19 removeAllPolicies];

      dispatch_source_t v20 = (void *)objc_claimAutoreleasedReturnValue([a1 highPolicySession]);
      [v20 removeAllPolicies];

      unsigned int v21 = 50;
      unsigned int v83 = 50;
      int v22 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 VPN]);
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v23 protocol]);
      unsigned int v25 = [v24 excludeLocalNetworks];

      if (v25)
      {
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([a1 controlPolicySession]);
        BOOL v27 = sub_1000568E4(v26, &v83, 0LL, 100LL, 0LL);

        if (!v27)
        {
          uint64_t v30 = ne_log_obj(v28, v29);
          int v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315138;
            id Property = "-[NESMVPNSession setDefaultDropAll]";
            _os_log_error_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_ERROR,  "%s: VPN addLocalNetworksExceptionWithOrder failed for Control priority",  buf,  0xCu);
          }
        }

        [a1 setDefaultDropType:3];
        unsigned int v21 = v83;
      }

      uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([a1 controlPolicySession]);
      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
      id v34 = (id)objc_claimAutoreleasedReturnValue([a1 server]);
      uint64_t v36 = v34;
      if (v34) {
        id v34 = objc_getProperty(v34, v35, 80LL, 1);
      }
      id v37 = v34;
      char v38 = sub_100059260((uint64_t)v32, v33, v21, &v84, v37);

      if ((v38 & 1) == 0)
      {
        uint64_t v41 = ne_log_obj(v39, v40);
        __int128 v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_ERROR,  "VPN-includeAllNetworks evaluateConfiguration failed",  buf,  2u);
        }
      }

      id v43 = [a1 defaultDropType];
      unsigned int v44 = 50;
      unsigned int v83 = 50;
      uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
      id v46 = (void *)objc_claimAutoreleasedReturnValue([v45 VPN]);
      SEL v47 = (void *)objc_claimAutoreleasedReturnValue([v46 protocol]);
      unsigned int v48 = [v47 excludeLocalNetworks];

      if (v48)
      {
        uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([a1 highPolicySession]);
        BOOL v50 = sub_1000568E4(v49, &v83, 0LL, 400LL, 0LL);

        if (!v50)
        {
          uint64_t v53 = ne_log_obj(v51, v52);
          uint64_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
          if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315138;
            id Property = "-[NESMVPNSession setDefaultDropAll]";
            _os_log_error_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_ERROR,  "%s: VPN addLocalNetworksExceptionWithOrder failed for HighRestricted priority",  buf,  0xCu);
          }
        }

        [a1 setDefaultDropType:3];
        unsigned int v44 = v83;
      }

      uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue([a1 highPolicySession]);
      id v56 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
      BOOL v57 = sub_10005B15C(v55, v56, v44, &v84);

      if (!v57)
      {
        uint64_t v60 = ne_log_obj(v58, v59);
        unsigned int v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_ERROR,  "VPN-includeAllNetworks evaluateConfiguration (High) failed",  buf,  2u);
        }
      }

      id v62 = [a1 defaultDropType];
      __int16 v63 = (void *)objc_claimAutoreleasedReturnValue([a1 controlPolicySession]);
      unsigned __int8 v64 = [v63 apply];

      if ((v64 & 1) == 0)
      {
        uint64_t v67 = ne_log_obj(v65, v66);
        v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_ERROR,  "VPN Could not apply control policies",  buf,  2u);
        }
      }

      id v69 = (void *)objc_claimAutoreleasedReturnValue([a1 highPolicySession]);
      unsigned __int8 v70 = [v69 apply];

      if ((v70 & 1) == 0)
      {
        uint64_t v73 = ne_log_obj(v71, v72);
        id v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
        if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_ERROR,  "VPN Could not apply High control policies",  buf,  2u);
        }
      }

      id v75 = [a1 setIsDropPersistent:0];
      uint64_t v77 = ne_log_obj(v75, v76);
      v78 = (os_log_s *)objc_claimAutoreleasedReturnValue(v77);
      if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v79 = [a1 defaultDropType];
        unsigned int v80 = [a1 isDropPersistent];
        unsigned int v81 = "Non-Persistent";
        id Property = "-[NESMVPNSession setDefaultDropAll]";
        *(_DWORD *)buf = 136315650;
        if (v80) {
          unsigned int v81 = "Persistent";
        }
        __int16 v87 = 1024;
        LODWORD(v88[0]) = v79;
        WORD2(v88[0]) = 2080;
        *(void *)((char *)v88 + 6) = v81;
        _os_log_impl( (void *)&_mh_execute_header,  v78,  OS_LOG_TYPE_DEFAULT,  "%s: VPN setting IP Drop-All to %d (%s)",  buf,  0x1Cu);
      }

      uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue([a1 server]);
      sub_10005241C(v82, 0LL, 0);
    }
  }

void sub_1000229A0(void *a1)
{
  if (a1)
  {
    [a1 setDefaultDropType:0];
    id v2 = [a1 setIsDropPersistent:0];
    uint64_t v4 = ne_log_obj(v2, v3);
    unsigned int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v6 = [a1 defaultDropType];
      unsigned int v7 = [a1 isDropPersistent];
      SEL v8 = "Non-Persistent";
      *(void *)&v24[4] = "-[NESMVPNSession unsetDefaultDropAll]";
      *(_DWORD *)uint64_t v24 = 136315650;
      if (v7) {
        SEL v8 = "Persistent";
      }
      *(_WORD *)&v24[12] = 1024;
      *(_DWORD *)&v24[14] = v6;
      __int16 v25 = 2080;
      uint64_t v26 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%s: VPN setting IP Drop-All to %d (%s)",  v24,  0x1Cu);
    }

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([a1 server]);
    sub_10005241C(v9, 0LL, 0);

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([a1 controlPolicySession]);
    [v10 removeAllPolicies];

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([a1 controlPolicySession]);
    unsigned __int8 v12 = [v11 apply];

    if ((v12 & 1) == 0)
    {
      uint64_t v15 = ne_log_obj(v13, v14);
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v24 = 0;
        _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "VPN Could not apply control policies cleanup",  v24,  2u);
      }
    }

    SEL v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "highPolicySession", *(_OWORD *)v24));
    [v17 removeAllPolicies];

    SEL v18 = (void *)objc_claimAutoreleasedReturnValue([a1 highPolicySession]);
    unsigned __int8 v19 = [v18 apply];

    if ((v19 & 1) == 0)
    {
      uint64_t v22 = ne_log_obj(v20, v21);
      uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v24 = 0;
        _os_log_error_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "VPN Could not apply high policies cleanup",  v24,  2u);
      }
    }

    sub_100022BD4(a1, v21);
  }

void sub_100022BD4(void *a1, const char *a2)
{
  if (a1)
  {
    if (objc_getProperty(a1, a2, 424LL, 1))
    {
      objc_msgSend(objc_getProperty(a1, v3, 424, 1), "removeObserver:forKeyPath:", a1, @"path");
      objc_setProperty_atomic(a1, v4, 0LL, 424LL);
    }

    a1[54] = 0LL;
    unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([a1 policySession]);
    char v7 = sub_10002F198(v5, v6);

    if ((v7 & 1) == 0)
    {
      uint64_t v10 = ne_log_obj(v8, v9);
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)unsigned __int8 v12 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to clear Nexus policy", v12, 2u);
      }
    }

    objc_setProperty_atomic(a1, v9, 0LL, 440LL);
  }

void *sub_100022CD0(void *result, const char *a2)
{
  if (result)
  {
    id v2 = result;
    id result = objc_getProperty(result, a2, 456LL, 1);
    if (result)
    {
      id Property = objc_getProperty(v2, v3, 456LL, 1);
      if (Property) {
        Property[1] = 0LL;
      }
      id result = objc_getProperty(v2, v5, 456LL, 1);
      if (result) {
        result[2] = 0LL;
      }
    }
  }

  return result;
}

void sub_100022D34(void *a1, const char *a2)
{
  if (a1)
  {
    id v3 = objc_getProperty(a1, a2, 448LL, 1);
    if (v3)
    {
    }

    else if ((sub_10002307C((uint64_t)a1) & 1) == 0)
    {
      id Property = objc_getProperty(a1, v4, 456LL, 1);
      if (Property)
      {
        char v7 = objc_getProperty(a1, v6, 456LL, 1);
        if (v7 && (uint64_t v9 = v7[1], v7, v9))
        {
          uint64_t v10 = objc_getProperty(a1, v8, 456LL, 1);
          if (v10)
          {
            uint64_t v12 = v10[2];
            v10[2] = v12 + 1;

            if (v12 >= 3)
            {
              uint64_t v13 = objc_getProperty(a1, v11, 456LL, 1);
              if (v13) {
                v13[1] *= 2LL;
              }
              uint64_t v15 = objc_getProperty(a1, v14, 456LL, 1);
              if (v15)
              {
                uint64_t v17 = v15[1];

                if (v17 >= 601)
                {
                  SEL v18 = objc_getProperty(a1, v16, 456LL, 1);
                  if (v18) {
                    v18[1] = 600LL;
                  }
                }
              }

              unsigned __int8 v19 = objc_getProperty(a1, v16, 456LL, 1);
              if (v19) {
                v19[2] = 0LL;
              }
            }
          }

          id Property = objc_getProperty(a1, v11, 456LL, 1);
          if (Property) {
            uint64_t v20 = Property[1];
          }
          else {
            uint64_t v20 = 0LL;
          }
        }

        else
        {
          unsigned int v21 = objc_getProperty(a1, v8, 456LL, 1);
          if (v21) {
            v21[1] = 1LL;
          }
          uint64_t v20 = 1LL;
          id Property = objc_getProperty(a1, v22, 456LL, 1);
          if (Property)
          {
            Property[2] = 0LL;
            uint64_t v20 = 1LL;
          }
        }
      }

      else
      {
        uint64_t v20 = -1LL;
      }

      uint64_t v23 = ne_log_obj(Property, v6);
      uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      __int16 v25 = v24;
      if (v20 < 0)
      {
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412546;
          int v31 = a1;
          __int16 v32 = 2080;
          uint64_t v33 = "-[NESMVPNSession retry]";
          _os_log_error_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "%@:%s: failed to get retry interval",  buf,  0x16u);
        }
      }

      else
      {
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412802;
          int v31 = a1;
          __int16 v32 = 2080;
          uint64_t v33 = "-[NESMVPNSession retry]";
          __int16 v34 = 2048;
          uint64_t v35 = v20;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "%@:%s: Retrying in %ld Secs", buf, 0x20u);
        }

        __int16 v25 = (os_log_s *)objc_claimAutoreleasedReturnValue([a1 queue]);
        v29[0] = _NSConcreteStackBlock;
        v29[1] = 3221225472LL;
        v29[2] = sub_100023244;
        v29[3] = &unk_1000BEC08;
        v29[4] = a1;
        uint64_t v26 = NECreateTimerSource(v25, v20, v29);
        BOOL v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
        objc_setProperty_atomic(a1, v28, v27, 448LL);
      }
    }
  }

uint64_t sub_10002307C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    id v2 = [(id)result stopped];
    if ((v2 & 1) == 0)
    {
      id v2 = [v1 status];
      if ((_DWORD)v2 == 1)
      {
        SEL v4 = (void *)objc_claimAutoreleasedReturnValue([v1 server]);
        unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 primaryPhysicalInterface]);
        uint64_t v6 = objc_claimAutoreleasedReturnValue([v5 interfaceName]);
        if (v6)
        {
          char v7 = (void *)v6;
          uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v1 server]);
          uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 primaryPhysicalInterface]);
          id v10 = objc_claimAutoreleasedReturnValue([v9 interfaceName]);
          unsigned int v11 = objc_msgSend(v1, "isInterfaceIPAvailable:", objc_msgSend(v10, "UTF8String"));

          if (v11) {
            return 0LL;
          }
        }

        else
        {
        }
      }
    }

    uint64_t v12 = ne_log_obj(v2, v3);
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v1 server]);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 primaryPhysicalInterface]);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 interfaceName]);
      int v17 = 138412802;
      SEL v18 = v1;
      __int16 v19 = 2080;
      uint64_t v20 = "-[NESMVPNSession skipRetry]";
      __int16 v21 = 2112;
      uint64_t v22 = v16;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%@:%s: Skip retry, session already running, stopped or no network - primary interface %@",  (uint8_t *)&v17,  0x20u);
    }

    return 1LL;
  }

  return result;
}

void sub_100023244(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(dispatch_source_s **)(a1 + 32);
  if (v3)
  {
    id Property = objc_getProperty(v3, a2, 448LL, 1);
    uint64_t v3 = *(dispatch_source_s **)(a1 + 32);
    if (Property)
    {
      if (v3) {
        uint64_t v3 = (dispatch_source_s *)objc_getProperty(v3, v4, 448LL, 1);
      }
      dispatch_source_cancel(v3);
      uint64_t v3 = *(dispatch_source_s **)(a1 + 32);
      if (v3)
      {
        objc_setProperty_atomic(v3, v6, 0LL, 448LL);
        uint64_t v3 = *(dispatch_source_s **)(a1 + 32);
      }
    }
  }

  uint64_t v7 = sub_10002307C((uint64_t)v3);
  if ((_DWORD)v7)
  {
    sub_100022CD0(*(void **)(a1 + 32), v8);
  }

  else
  {
    uint64_t v9 = ne_log_obj(v7, v8);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v14 = 138412546;
      uint64_t v15 = v11;
      __int16 v16 = 2080;
      int v17 = "-[NESMVPNSession retry]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%@:%s: Retrying now", (uint8_t *)&v14, 0x16u);
    }

    uint64_t v12 = *(void **)(a1 + 32);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 lastStartMessage]);
    [v12 handleStartMessage:v13];
  }

id sub_1000233A4(uint64_t a1)
{
  uint64_t v3 = 0LL;
  id result = [*(id *)(a1 + 32) virtualInterface];
  if (result)
  {
    NEVirtualInterfaceRemoveAllAddresses([*(id *)(a1 + 32) virtualInterface]);
    NEVirtualInterfaceRemoveAllRoutes([*(id *)(a1 + 32) virtualInterface], 1, 1);
    NEVirtualInterfaceSetIPv4Router([*(id *)(a1 + 32) virtualInterface], 0);
    NEVirtualInterfaceSetIPv6Router([*(id *)(a1 + 32) virtualInterface], 0);
    NEVirtualInterfaceSetAsPrimary([*(id *)(a1 + 32) virtualInterface], 0);
    NEVirtualInterfaceSetVPNServerAddress([*(id *)(a1 + 32) virtualInterface], 0);
    NEVirtualInterfaceSetDNSDomain([*(id *)(a1 + 32) virtualInterface], 0);
    NEVirtualInterfaceSetDNSServers([*(id *)(a1 + 32) virtualInterface], 0);
    NEVirtualInterfaceSetDNSSearchDomains([*(id *)(a1 + 32) virtualInterface], 0);
    NEVirtualInterfaceSetDNSSupplementalMatchDomains([*(id *)(a1 + 32) virtualInterface], 0);
    NEVirtualInterfaceSetDNSSupplementalMatchDomainsNoSearch([*(id *)(a1 + 32) virtualInterface], 0);
    NEVirtualInterfaceSetProxies([*(id *)(a1 + 32) virtualInterface], 0);
    if (NEVirtualInterfaceUpdateAdHocServiceReturnChanges( [*(id *)(a1 + 32) virtualInterface],  &v3,  *(unsigned __int8 *)(a1 + 40))) {
      return (id)v3;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

void sub_1000234B8(uint64_t a1, uint64_t a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = ne_log_obj(a1, a2);
    unsigned int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      int v14 = 138412290;
      uint64_t v15 = v13;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "%@: failed to update the service in the dynamic store while clearing the configuration",  (uint8_t *)&v14,  0xCu);
    }
  }

  if ([*(id *)(a1 + 32) parentType] == (id)2)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) parent]);
    sub_100086878(v6, *(void **)(a1 + 32));
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateHandler]);
  [v7 handleClearConfigurationResult:a2];

  sub_100023668(*(void **)(a1 + 32));
  sub_10007C480(*(void **)(a1 + 32), v8);
  if (!*(_BYTE *)(a1 + 40))
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) policySession]);
    sub_10002EC00((uint64_t)v9);

    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) policySession]);
    sub_10002BCE0((uint64_t)v10);

    if (![*(id *)(a1 + 32) virtualInterface])
    {
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) policySession]);
      sub_10002BE7C((uint64_t)v12);

      if ((a2 & 1) != 0) {
        goto LABEL_10;
      }
LABEL_12:
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NEAgentErrorDomain",  1LL,  0LL));
      goto LABEL_13;
    }
  }

  if ((a2 & 1) == 0) {
    goto LABEL_12;
  }
LABEL_10:
  uint64_t v11 = 0LL;
LABEL_13:
  sub_100023778(*(void **)(a1 + 32), v11);
}

void sub_100023668(void *a1)
{
  if (a1)
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([a1 dnsAgentRegistration]);
    unsigned int v3 = [v2 isRegistered];

    if (v3)
    {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1 dnsAgentRegistration]);
      [v4 unregisterNetworkAgent];

      uint64_t v7 = ne_log_obj(v5, v6);
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = 138412290;
        uint64_t v12 = a1;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%@: Unregistered DNS network agent",  (uint8_t *)&v11,  0xCu);
      }
    }

    [a1 setDnsAgentRegistration:0];
    [a1 setDnsAgent:0];
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([a1 policySession]);
    sub_10002BEDC(v9, v10);
  }

void sub_100023778(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1 setConfigurationCompletionHandlerArray]);

    if (v4)
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([a1 setConfigurationCompletionHandlerArray]);
      id v8 = [v7 count];

      if (v8)
      {
        int v11 = (void *)objc_claimAutoreleasedReturnValue([a1 setConfigurationCompletionHandlerArray]);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectAtIndexedSubscript:0]);

        uint64_t v15 = ne_log_obj(v13, v14);
        __int16 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
        int v17 = v16;
        if (v12)
        {
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            SEL v18 = (os_log_s *)objc_claimAutoreleasedReturnValue([a1 interfaceName]);
            id Property = objc_getProperty(v12, v19, 8LL, 1);
            id v21 = objc_retainBlock(Property);
            int v36 = 138412802;
            id v37 = a1;
            __int16 v38 = 2112;
            uint64_t v39 = v18;
            __int16 v40 = 2112;
            id v41 = v21;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "%@: config request: popping handler [%@] %@",  (uint8_t *)&v36,  0x20u);
          }

          id v23 = objc_getProperty(v12, v22, 8LL, 1);
          if (v23)
          {
            uint64_t v25 = ne_log_obj(v23, v24);
            uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
            {
              id v28 = objc_getProperty(v12, v27, 8LL, 1);
              uint64_t v29 = (os_log_s *)objc_retainBlock(v28);
              int v36 = 138412546;
              id v37 = a1;
              __int16 v38 = 2112;
              uint64_t v39 = v29;
              _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "%@: config request: calling completionHandler %@",  (uint8_t *)&v36,  0x16u);
            }

            int v31 = (void (**)(id, id))objc_getProperty(v12, v30, 8LL, 1);
            v31[2](v31, v3);
          }

          int v17 = (os_log_s *)objc_claimAutoreleasedReturnValue([a1 setConfigurationCompletionHandlerArray]);
          -[os_log_s removeObject:](v17, "removeObject:", v12);
        }

        else if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue([a1 interfaceName]);
          int v36 = 138412546;
          id v37 = a1;
          __int16 v38 = 2112;
          uint64_t v39 = v35;
          _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%@: No config request completion handler [%@]",  (uint8_t *)&v36,  0x16u);
        }

        goto LABEL_19;
      }

      uint64_t v34 = ne_log_obj(v9, v10);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v34);
      if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_ERROR))
      {
        int v17 = (os_log_s *)objc_claimAutoreleasedReturnValue([a1 interfaceName]);
        int v36 = 138412546;
        id v37 = a1;
        __int16 v38 = 2112;
        uint64_t v39 = v17;
        uint64_t v33 = "%@: config request handler array empty [%@]";
        goto LABEL_16;
      }
    }

    else
    {
      uint64_t v32 = ne_log_obj(v5, v6);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v32);
      if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_ERROR))
      {
        int v17 = (os_log_s *)objc_claimAutoreleasedReturnValue([a1 interfaceName]);
        int v36 = 138412546;
        id v37 = a1;
        __int16 v38 = 2112;
        uint64_t v39 = v17;
        uint64_t v33 = "%@: config request (pop) handler array nil [%@]";
LABEL_16:
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v12, OS_LOG_TYPE_ERROR, v33, (uint8_t *)&v36, 0x16u);
LABEL_19:
      }
    }
  }
}

void sub_100023AD0(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!v2) {
    return;
  }
  *(void *)(v2 + 400) &= ~*(void *)(a1 + 40);
  uint64_t v4 = *(void **)(a1 + 32);
  if (!v4 || v4[50] || !objc_getProperty(v4, a2, 408LL, 1)) {
    return;
  }
  id v6 = *(id *)(a1 + 32);
  if (v6)
  {
    if (objc_getProperty(v6, v5, 416LL, 1))
    {
      id Property = *(dispatch_source_s **)(a1 + 32);
      if (Property) {
        id Property = (dispatch_source_s *)objc_getProperty(Property, v7, 416LL, 1);
      }
      dispatch_source_cancel(Property);
      id v6 = *(id *)(a1 + 32);
      if (!v6) {
        goto LABEL_14;
      }
      objc_setProperty_atomic(v6, v9, 0LL, 416LL);
    }

    id v6 = *(id *)(a1 + 32);
    if (v6) {
      id v6 = objc_getProperty(v6, v7, 408LL, 1);
    }
  }

void sub_100023BDC(id *a1)
{
  uint64_t v2 = a1 + 6;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    id Property = (dispatch_object_s *)objc_getProperty(WeakRetained, v4, 376LL, 1);
    dispatch_suspend(Property);
    uint64_t v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v5 queue]);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    _DWORD v8[2] = sub_100023CE0;
    v8[3] = &unk_1000BD938;
    objc_copyWeak(&v12, v2);
    id v10 = a1[4];
    id v9 = v5;
    id v11 = a1[5];
    dispatch_sync(v7, v8);

    objc_destroyWeak(&v12);
  }
}

void sub_100023CE0(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 56);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
  if (!v4)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    if (WeakRetained) {
      id Property = (dispatch_object_s *)objc_getProperty(WeakRetained, v12, 376LL, 1);
    }
    else {
      id Property = 0LL;
    }
    dispatch_resume(Property);
    goto LABEL_28;
  }

  char v5 = v4;
  id v6 = objc_loadWeakRetained(v2);
  id v8 = v6;
  if (v6) {
    v6[50] = 0LL;
  }
  if ((v5 & 2) != 0)
  {
    uint64_t v9 = ne_log_obj(v6, v7);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v27 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%@: waiting for DNS to change", buf, 0xCu);
    }

    if (v8) {
      v8[50] |= 2uLL;
    }
  }

  if ((v5 & 1) == 0)
  {
    if ((v5 & 4) == 0)
    {
      if (!v8) {
        goto LABEL_25;
      }
      goto LABEL_24;
    }

    goto LABEL_20;
  }

  uint64_t v14 = ne_log_obj(v6, v7);
  uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    uint64_t v16 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v27 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "%@: waiting for NWI to change", buf, 0xCu);
  }

  if (!v8)
  {
    if ((v5 & 4) == 0) {
      goto LABEL_25;
    }
    goto LABEL_20;
  }

  v8[50] |= 1uLL;
  if ((v5 & 4) != 0)
  {
LABEL_20:
    uint64_t v17 = ne_log_obj(v6, v7);
    SEL v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v27 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "%@: waiting for proxies to change", buf, 0xCu);
    }

    if (!v8) {
      goto LABEL_25;
    }
    v8[50] |= 4uLL;
  }

void sub_100023FDC(_Unwind_Exception *a1)
{
}

void sub_100023FF8(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));

  if (WeakRetained)
  {
    id v3 = objc_loadWeakRetained(v1);
    uint64_t v5 = ne_log_obj(v3, v4);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      if (v3) {
        uint64_t v7 = v3[50];
      }
      else {
        LODWORD(v7) = 0;
      }
      int v16 = 138412546;
      uint64_t v17 = v3;
      __int16 v18 = 1024;
      int v19 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_INFO,  "%@: timed out while waiting for network configuration to change (pending uint64_t flags = 0x%x)",  (uint8_t *)&v16,  0x12u);
    }

    if (v3)
    {
      v3[50] = 0LL;
      if (objc_getProperty(v3, v8, 408LL, 1))
      {
        id Property = (void (**)(id, uint64_t))objc_getProperty(v3, v9, 408LL, 1);
        Property[2](Property, 1LL);
        objc_setProperty_atomic_copy(v3, v11, 0LL, 408LL);
      }

      id v12 = (dispatch_source_s *)objc_getProperty(v3, v9, 416LL, 1);
      dispatch_source_cancel(v12);
      objc_setProperty_atomic(v3, v13, 0LL, 416LL);
      uint64_t v15 = (dispatch_object_s *)objc_getProperty(v3, v14, 376LL, 1);
    }

    else
    {
      dispatch_source_cancel(0LL);
      uint64_t v15 = 0LL;
    }

    dispatch_resume(v15);
  }

void sub_100024188(void *a1, uint64_t a2)
{
  if (!a1) {
    return;
  }
  int v2 = a2;
  uint64_t v4 = ne_log_obj(a1, a2);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%@: handleSetConfigurationResult - result %d",  buf,  0x12u);
  }

  if ([a1 virtualInterface]
    && ([a1 sessionType] == 1 || objc_msgSend(a1, "sessionType") == 2))
  {
    id v6 = (void *)NEVirtualInterfaceCopyName([a1 virtualInterface]);
    sub_10007C308(a1, v6);
  }

  if (v2 && [a1 resetPerAppPolicy])
  {
    if ([a1 type] == 1)
    {
      if ([a1 tunnelKind] == (id)2)
      {
        id v7 = [a1 virtualInterface];
        if (v7)
        {
          id v9 = v7;
          uint64_t v10 = NEVirtualInterfaceCopyName(v7);
          if (v10)
          {
            id v12 = (void *)v10;
            SEL v13 = (void *)NEVirtualInterfaceCopyDelegateInterfaceName([a1 virtualInterface]);
            if (!v13)
            {
              SEL v14 = (void *)objc_claimAutoreleasedReturnValue([a1 server]);
              uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 primaryCellularInterface]);
              SEL v13 = (void *)objc_claimAutoreleasedReturnValue([v15 interfaceName]);

              if (!v13)
              {
                uint64_t v64 = ne_log_obj(v16, v17);
                uint64_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
                if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412546;
                  *(void *)&uint8_t buf[4] = a1;
                  *(_WORD *)&_BYTE buf[12] = 2080;
                  *(void *)&buf[14] = "-[NESMVPNSession applyFallbackTunnelDataPolicies]";
                  _os_log_error_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_ERROR,  "%@:%s: NULL delegate interface name",  buf,  0x16u);
                }

                uint64_t v23 = 0LL;
                goto LABEL_59;
              }
            }

            __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([a1 pluginConfigurationEntities]);
            int v19 = (void *)objc_claimAutoreleasedReturnValue([v18 DNSSettings]);
            uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 matchDomains]);

            if (v20)
            {
              uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v18 DNSSettings]);
              SEL v22 = (void *)objc_claimAutoreleasedReturnValue([v21 matchDomains]);
            }

            else
            {
              uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([a1 protocol]);
              BOOL v50 = (void *)objc_claimAutoreleasedReturnValue([v21 DNSSettings]);
              SEL v22 = (void *)objc_claimAutoreleasedReturnValue([v50 matchDomains]);
            }

            uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([v18 IPv4Settings]);
            if (!v51) {
              goto LABEL_52;
            }
            uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([v18 IPv4Settings]);
            unsigned __int8 v53 = [v52 hasDefaultRoute];

            if ((v53 & 1) != 0)
            {
              unsigned __int8 v67 = 1;
              goto LABEL_53;
            }

            uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([v18 IPv6Settings]);

            if (v54)
            {
              uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue([v18 IPv6Settings]);
              unsigned __int8 v67 = [v55 hasDefaultRoute];
            }

            else
            {
LABEL_52:
              unsigned __int8 v67 = 0;
            }

LABEL_53:
            id v56 = (void *)NEVirtualInterfaceCopyRoutes(v9, 0LL);
            BOOL v57 = (void *)NEVirtualInterfaceCopyRoutes(v9, 1LL);
            uint64_t v58 = (os_log_s *)objc_claimAutoreleasedReturnValue([a1 policySession]);
            id v59 = v12;
            uint64_t v60 = v13;
            id v61 = v56;
            id v62 = v57;
            id v63 = v22;
            if (v58 && isa_nsstring(v59) && *((_DWORD *)v58 + 2) == 1)
            {
              *(void *)buf = _NSConcreteStackBlock;
              *(void *)&buf[8] = 3221225472LL;
              *(void *)&buf[16] = sub_100036C9C;
              id v69 = (const char *)&unk_1000BDD20;
              unsigned __int8 v70 = v58;
              id v71 = v59;
              id v72 = v62;
              uint64_t v73 = v60;
              unsigned __int8 v76 = v67;
              id v74 = v61;
              id v75 = v63;
              uint64_t v23 = sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, buf);
            }

            else
            {
              uint64_t v23 = 0LL;
            }

LABEL_59:
            goto LABEL_60;
          }

          uint64_t v48 = ne_log_obj(0LL, v11);
          uint64_t v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
          if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
          {
            uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue([a1 interfaceName]);
            *(_DWORD *)buf = 138412802;
            *(void *)&uint8_t buf[4] = a1;
            *(_WORD *)&_BYTE buf[12] = 2112;
            *(void *)&buf[14] = v65;
            *(_WORD *)&buf[22] = 2080;
            id v69 = "-[NESMVPNSession applyFallbackTunnelDataPolicies]";
            _os_log_error_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_ERROR,  "%@[%@]:%s: NULL virtual interface name",  buf,  0x20u);
          }

          id v12 = 0LL;
        }

        else
        {
          uint64_t v46 = ne_log_obj(0LL, v8);
          id v12 = (void *)objc_claimAutoreleasedReturnValue(v46);
          if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_ERROR))
          {
            SEL v47 = (void *)objc_claimAutoreleasedReturnValue([a1 interfaceName]);
            *(_DWORD *)buf = 138412802;
            *(void *)&uint8_t buf[4] = a1;
            *(_WORD *)&_BYTE buf[12] = 2112;
            *(void *)&buf[14] = v47;
            *(_WORD *)&buf[22] = 2080;
            id v69 = "-[NESMVPNSession applyFallbackTunnelDataPolicies]";
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v12,  OS_LOG_TYPE_ERROR,  "%@[%@]:%s: NULL virtual interface",  buf,  0x20u);
          }
        }

        uint64_t v23 = 0LL;
LABEL_60:

        goto LABEL_19;
      }

      uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v34 VPN]);
      int v36 = (void *)objc_claimAutoreleasedReturnValue([v35 protocol]);
      unsigned int v37 = [v36 enforceRoutes];

      if (v37)
      {
        __int16 v38 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
        uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v38 VPN]);
        __int16 v40 = (void *)objc_claimAutoreleasedReturnValue([v39 protocol]);
        unsigned __int8 v41 = [v40 includeAllNetworks];

        if ((v41 & 1) == 0)
        {
          uint64_t v23 = sub_10002498C(a1);
          goto LABEL_19;
        }

        uint64_t v44 = ne_log_obj(v42, v43);
        uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = a1;
          _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "%@: Ignoring enforceRoutes because includeAllNetworks is set",  buf,  0xCu);
        }
      }
    }

    uint64_t v23 = 1LL;
  }

  else
  {
    uint64_t v23 = 0LL;
  }

uint64_t sub_10002498C(void *a1)
{
  id v2 = [a1 virtualInterface];
  if (!v2)
  {
    uint64_t v21 = ne_log_obj(0LL, v3);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
LABEL_14:
      uint64_t v20 = 0LL;
      goto LABEL_15;
    }

    SEL v22 = (os_log_s *)objc_claimAutoreleasedReturnValue([a1 interfaceName]);
    *(_DWORD *)buf = 138412802;
    uint64_t v39 = a1;
    __int16 v40 = 2112;
    unsigned __int8 v41 = (const char *)v22;
    __int16 v42 = 2080;
    uint64_t v43 = "-[NESMVPNSession applyTunnelRouteEnforcementPolicies]";
    uint64_t v23 = "%@[%@]:%s: NULL virtual interface";
    uint64_t v24 = v6;
    uint32_t v25 = 32;
    goto LABEL_8;
  }

  uint64_t v4 = NEVirtualInterfaceCopyName(v2);
  if (!v4)
  {
    uint64_t v26 = ne_log_obj(0LL, v5);
    id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      SEL v30 = (char *)objc_claimAutoreleasedReturnValue([a1 interfaceName]);
      *(_DWORD *)buf = 138412802;
      uint64_t v39 = a1;
      __int16 v40 = 2112;
      unsigned __int8 v41 = v30;
      __int16 v42 = 2080;
      uint64_t v43 = "-[NESMVPNSession applyTunnelRouteEnforcementPolicies]";
      _os_log_error_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "%@[%@]:%s: NULL virtual interface name",  buf,  0x20u);
    }

    id v6 = 0LL;
    goto LABEL_14;
  }

  id v6 = (os_log_s *)v4;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a1 server]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 primaryPhysicalInterface]);
  uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 interfaceName]);

  if (!v9)
  {
    uint64_t v9 = NEVirtualInterfaceCopyDelegateInterfaceName([a1 virtualInterface]);
    if (!v9)
    {
      uint64_t v28 = ne_log_obj(0LL, v10);
      SEL v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        goto LABEL_13;
      }
      *(_DWORD *)buf = 138412546;
      uint64_t v39 = a1;
      __int16 v40 = 2080;
      unsigned __int8 v41 = "-[NESMVPNSession applyTunnelRouteEnforcementPolicies]";
      uint64_t v23 = "%@:%s: NULL delegate interface name";
      uint64_t v24 = v22;
      uint32_t v25 = 22;
LABEL_8:
      _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, v23, buf, v25);
LABEL_13:

      goto LABEL_14;
    }
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([a1 pluginConfigurationEntities]);
  unsigned int v37 = (void *)objc_claimAutoreleasedReturnValue([a1 policySession]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([a1 pluginPIDArray]);
  int v36 = (void *)objc_claimAutoreleasedReturnValue([v11 IPv4Settings]);
  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v36 includedRoutes]);
  uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v11 IPv6Settings]);
  SEL v13 = (void *)objc_claimAutoreleasedReturnValue([v35 includedRoutes]);
  uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v11 IPv4Settings]);
  SEL v14 = (void *)objc_claimAutoreleasedReturnValue([v34 excludedRoutes]);
  int v31 = (void *)objc_claimAutoreleasedReturnValue([v11 IPv6Settings]);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v31 excludedRoutes]);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
  uint64_t v17 = (void *)v9;
  uint64_t v33 = (void *)v9;
  __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([v16 VPN]);
  int v19 = (void *)objc_claimAutoreleasedReturnValue([v18 protocol]);
  uint64_t v20 = sub_100037690((uint64_t)v37, v6, v17, v12, v32, v13, v14, v15, (char)[v19 excludeLocalNetworks]);

LABEL_15:
  return v20;
}

uint64_t sub_100024D3C(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  id v2 = [a1 virtualInterface];
  if (!v2)
  {
    uint64_t v13 = ne_log_obj(0LL, v3);
    SEL v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    if (!os_log_type_enabled((os_log_t)v14, OS_LOG_TYPE_ERROR))
    {
LABEL_9:

      return 0LL;
    }

    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([a1 interfaceName]);
    *(_DWORD *)buf = 138412802;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&_BYTE buf[12] = 2112;
    *(void *)&buf[14] = v15;
    *(_WORD *)&buf[22] = 2080;
    uint64_t v48 = "-[NESMVPNSession applyTunnelDataPolicies]";
    uint64_t v16 = "%@[%@]:%s: NULL virtual interface";
LABEL_31:
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v14, OS_LOG_TYPE_ERROR, v16, buf, 0x20u);

    goto LABEL_9;
  }

  uint64_t v4 = NEVirtualInterfaceCopyName(v2);
  uint64_t v46 = v4;
  if (!v4)
  {
    uint64_t v17 = ne_log_obj(0LL, v5);
    SEL v14 = (void *)objc_claimAutoreleasedReturnValue(v17);
    if (!os_log_type_enabled((os_log_t)v14, OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([a1 interfaceName]);
    *(_DWORD *)buf = 138412802;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&_BYTE buf[12] = 2112;
    *(void *)&buf[14] = v15;
    *(_WORD *)&buf[22] = 2080;
    uint64_t v48 = "-[NESMVPNSession applyTunnelDataPolicies]";
    uint64_t v16 = "%@[%@]:%s: NULL virtual interface name";
    goto LABEL_31;
  }

  id v6 = (void *)v4;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a1 server]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 primaryPhysicalInterface]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 interfaceName]);
  if (v9)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([a1 server]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 primaryPhysicalInterface]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 interfaceName]);
  }

  else
  {
    id v12 = 0LL;
  }

  if (!v12)
  {
    id v12 = (void *)NEVirtualInterfaceCopyDelegateInterfaceName([a1 virtualInterface]);
    if (!v12)
    {
      uint64_t v33 = ne_log_obj(0LL, v19);
      uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = a1;
        *(_WORD *)&_BYTE buf[12] = 2080;
        *(void *)&buf[14] = "-[NESMVPNSession applyTunnelDataPolicies]";
        _os_log_error_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_ERROR,  "%@:%s: NULL delegate interface name",  buf,  0x16u);
      }

      myCFRelease(&v46);
      return 0LL;
    }
  }

  uint64_t v45 = (_DWORD *)objc_claimAutoreleasedReturnValue([a1 policySession]);
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([a1 pluginConfigurationEntities]);
  uint64_t v21 = objc_claimAutoreleasedReturnValue([v20 DNSSettings]);
  SEL v22 = (void *)objc_claimAutoreleasedReturnValue([a1 pluginConfigurationEntities]);
  uint64_t v44 = v20;
  unsigned __int8 v41 = (void *)objc_claimAutoreleasedReturnValue([v22 proxySettings]);
  __int16 v42 = v22;
  unsigned __int8 v40 = [v41 enabled];
  if ((v40 & 1) != 0)
  {
    unsigned __int8 v37 = 1;
  }

  else
  {
    int v36 = (void *)objc_claimAutoreleasedReturnValue([a1 protocol]);
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v36 proxySettings]);
    unsigned __int8 v37 = [v35 enabled];
  }

  uint64_t v43 = (void *)v21;
  BOOL v39 = v21 != 0;
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v23 VPN]);
  uint32_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 protocol]);
  unsigned __int8 v38 = [v25 excludeLocalNetworks];
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
  id v27 = (void *)objc_claimAutoreleasedReturnValue([v26 VPN]);
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v27 protocol]);
  unsigned __int8 v29 = [v28 excludeCellularServices];
  id v30 = v6;
  id v31 = v12;
  uint64_t v18 = (uint64_t)v45;
  if (v45)
  {
    if (isa_nsstring(v30) && isa_nsstring(v31) && v45[2] == 1)
    {
      *(void *)buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&buf[16] = sub_10003646C;
      uint64_t v48 = (const char *)&unk_1000BDCF8;
      uint64_t v49 = v45;
      id v50 = v30;
      unsigned __int8 v52 = v38;
      unsigned __int8 v53 = v29;
      id v51 = v31;
      unsigned __int8 v54 = v37;
      BOOL v55 = v39;
      uint64_t v18 = sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, buf);
    }

    else
    {
      uint64_t v18 = 0LL;
    }
  }

  if ((v40 & 1) == 0)
  {
  }

  myCFRelease(&v46);
  return v18;
}

void *sub_1000251F8(void *result)
{
  if (result)
  {
    id v2 = result;
    id v3 = [result virtualInterface];
    if (v3) {
      uint64_t v4 = (void *)NEVirtualInterfaceCopyName(v3);
    }
    else {
      uint64_t v4 = 0LL;
    }
    if (([v2 isSecondaryConnection] & 1) != 0 || objc_msgSend(v2, "tunnelKind") == (id)2)
    {
      char v5 = 0;
      id v6 = 0LL;
LABEL_20:
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v2 policySession]);
      uint64_t v16 = sub_100045EC0((uint64_t)v15, v4, v6, v5);

      return (void *)v16;
    }

    id v7 = (void *)objc_claimAutoreleasedReturnValue([v2 pluginConfigurationEntities]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 DNSSettings]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v8 matchDomains]);

    if (!v6)
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v2 protocol]);
      uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([v9 DNSSettings]);
      id v6 = (void *)objc_claimAutoreleasedReturnValue([v1 matchDomains]);
    }

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v7 IPv4Settings]);
    unsigned __int8 v11 = [v10 hasDefaultRoute];
    if ((v11 & 1) != 0
      || (uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([v7 IPv6Settings]),
          [v1 hasDefaultRoute]))
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v7 DNSSettings]);
      if (v12)
      {
        char v5 = 1;
      }

      else
      {
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v2 protocol]);
        SEL v14 = (void *)objc_claimAutoreleasedReturnValue([v13 DNSSettings]);
        char v5 = v14 != 0LL;
      }

      if ((v11 & 1) != 0) {
        goto LABEL_19;
      }
    }

    else
    {
      char v5 = 0;
    }

LABEL_19:
    goto LABEL_20;
  }

  return result;
}

id sub_1000253A0(uint64_t a1)
{
  uint64_t v32 = 0LL;
  id result = [*(id *)(a1 + 32) virtualInterface];
  if (result)
  {
    id v3 = *(void **)(a1 + 32);
    if (!v3) {
      goto LABEL_34;
    }
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pluginConfigurationEntities]);
    char v5 = (void *)objc_claimAutoreleasedReturnValue([v4 IPv4Settings]);
    if (!v5)
    {
      char v5 = (void *)objc_claimAutoreleasedReturnValue([v3 pluginConfigurationEntities]);
      id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 IPv6Settings]);
      if (!v6)
      {
        id v30 = (void *)objc_claimAutoreleasedReturnValue([v3 pluginConfigurationEntities]);
        id v31 = (void *)objc_claimAutoreleasedReturnValue([v30 tunnelRemoteAddress]);

        if (!v31) {
          goto LABEL_10;
        }
        goto LABEL_7;
      }
    }

LABEL_7:
    uint64_t v9 = ne_log_obj(v7, v8);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v34 = v3;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%@: Resetting the virtual interface", buf, 0xCu);
    }

    NEVirtualInterfaceRemoveAllAddresses([v3 virtualInterface]);
    NEVirtualInterfaceRemoveAllRoutes([v3 virtualInterface], 1, 1);
    NEVirtualInterfaceSetIPv4Router([v3 virtualInterface], 0);
    NEVirtualInterfaceSetIPv6Router([v3 virtualInterface], 0);
    NEVirtualInterfaceSetAsPrimary([v3 virtualInterface], 0);
LABEL_10:
    unsigned __int8 v11 = *(void **)(a1 + 32);
    if (v11)
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pluginConfigurationEntities]);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 proxySettings]);
      if (!v13)
      {
        SEL v14 = (void *)objc_claimAutoreleasedReturnValue([v11 protocol]);
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v14 proxySettings]);
      }

      if (([v11 isSecondaryConnection] & 1) == 0)
      {
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v13 matchDomains]);
        if ([v15 count])
        {
LABEL_18:

          goto LABEL_19;
        }

        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v12 DNSSettings]);
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 matchDomains]);
        id v18 = [v17 count];

        if (v18)
        {
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v12 DNSSettings]);
          uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v15 matchDomains]);
          [v13 setMatchDomains:v19];

          goto LABEL_18;
        }
      }

id sub_100025730(uint64_t a1)
{
  uint64_t v100 = 0LL;
  id result = [*(id *)(a1 + 32) virtualInterface];
  if (result)
  {
    id v3 = *(void **)(a1 + 32);
    if (!v3)
    {
      id v51 = 0LL;
LABEL_32:
      if (NEVirtualInterfaceUpdateAdHocServiceReturnChanges( [v51 virtualInterface],  &v100,  *(unsigned __int8 *)(a1 + 40))) {
        return (id)v100;
      }
      else {
        return 0LL;
      }
    }

    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pluginConfigurationEntities]);
    char v5 = (void *)objc_claimAutoreleasedReturnValue([v4 DNSSettings]);

    if (!v5)
    {
      sub_100023668(v3);
LABEL_31:

      id v51 = *(void **)(a1 + 32);
      goto LABEL_32;
    }

    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 DNSSettings]);
    uint64_t v7 = objc_opt_class(&OBJC_CLASS___NEDNSOverTLSSettings);
    if ((objc_opt_isKindOfClass(v6, v7) & 1) != 0)
    {

LABEL_8:
      uint64_t v13 = ne_log_obj(v8, v9);
      SEL v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = v3;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%@: Setting Encrypted DNS", buf, 0xCu);
      }

      uint64_t v15 = objc_alloc(&OBJC_CLASS___NEDNSSettingsNetworkAgent);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v3 configuration]);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 identifier]);
      id v18 = -[NEDNSSettingsNetworkAgent initWithConfigUUID:sessionType:name:]( v15,  "initWithConfigUUID:sessionType:name:",  v17,  [v3 type],  0);
      [v3 setDnsAgent:v18];

      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v3 dnsAgent]);
      [v19 setActive:1];

      id v20 = (void *)objc_claimAutoreleasedReturnValue([v4 DNSSettings]);
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v3 dnsAgent]);
      [v21 setSettings:v20];

      SEL v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v3 dnsAgent]);
      [v23 setAgentUUID:v22];

      uint64_t v24 = objc_alloc(&OBJC_CLASS___NWNetworkAgentRegistration);
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v3 dnsAgent]);
      uint64_t v26 = -[NWNetworkAgentRegistration initWithNetworkAgentClass:]( v24,  "initWithNetworkAgentClass:",  objc_opt_class(v25));
      [v3 setDnsAgentRegistration:v26];

      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v3 dnsAgentRegistration]);
      LODWORD(v25) = [v27 isRegistered];

      uint64_t v30 = ne_log_obj(v28, v29);
      id v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
      BOOL v32 = os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v25)
      {
        if (v32)
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v3;
          _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "%@: Updated DNS network agent",  buf,  0xCu);
        }

        uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v3 dnsAgentRegistration]);
        uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v3 dnsAgent]);
        [v33 updateNetworkAgent:v34];
      }

      else
      {
        if (v32)
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v3;
          _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "%@: Registered DNS network agent",  buf,  0xCu);
        }

        uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v3 dnsAgentRegistration]);
        uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v3 dnsAgent]);
        [v33 registerNetworkAgent:v34];
      }

      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v4 DNSSettings]);
      int v36 = (void *)objc_claimAutoreleasedReturnValue([v35 matchDomains]);

      if (v36)
      {
        unsigned __int8 v37 = (void *)objc_claimAutoreleasedReturnValue([v4 DNSSettings]);
        unsigned __int8 v38 = (void *)objc_claimAutoreleasedReturnValue([v37 matchDomains]);
      }

      else
      {
        unsigned __int8 v37 = (void *)objc_claimAutoreleasedReturnValue([v3 protocol]);
        BOOL v39 = (void *)objc_claimAutoreleasedReturnValue([v37 DNSSettings]);
        unsigned __int8 v38 = (void *)objc_claimAutoreleasedReturnValue([v39 matchDomains]);
      }

      if ([v3 tunnelKind] == (id)1) {
        char v40 = [v3 isSecondaryConnection] ^ 1;
      }
      else {
        char v40 = 0;
      }
      unsigned __int8 v41 = (os_log_s *)objc_claimAutoreleasedReturnValue([v3 policySession]);
      __int16 v42 = (void *)objc_claimAutoreleasedReturnValue([v3 dnsAgent]);
      uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v42 agentUUID]);
      uint64_t v44 = (void *)NEVirtualInterfaceCopyName([v3 virtualInterface]);
      id v45 = v43;
      id v46 = v44;
      id v47 = v38;
      if (v41 && v45 && v46 && *((_DWORD *)v41 + 2) == 1)
      {
        *(void *)buf = _NSConcreteStackBlock;
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&buf[16] = sub_10003611C;
        v102 = &unk_1000BDCD0;
        id v103 = v41;
        id v104 = v45;
        id v105 = v47;
        char v107 = v40;
        id v106 = v46;
        sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, buf);
      }

      id v48 = 0LL;
      uint64_t v49 = 0LL;
      id v50 = 0LL;
      goto LABEL_29;
    }

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v4 DNSSettings]);
    uint64_t v11 = objc_opt_class(&OBJC_CLASS___NEDNSOverHTTPSSettings);
    char isKindOfClass = objc_opt_isKindOfClass(v10, v11);

    if ((isKindOfClass & 1) != 0) {
      goto LABEL_8;
    }
    uint64_t v52 = ne_log_obj(v8, v9);
    unsigned __int8 v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
    if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_INFO, "%@: Setting DNS", buf, 0xCu);
    }

    sub_100023668(v3);
    unsigned __int8 v54 = (void *)objc_claimAutoreleasedReturnValue([v4 DNSSettings]);
    BOOL v55 = (void *)objc_claimAutoreleasedReturnValue([v54 domainName]);

    if (v55)
    {
      id v56 = (void *)objc_claimAutoreleasedReturnValue([v4 DNSSettings]);
      id v50 = (void *)objc_claimAutoreleasedReturnValue([v56 domainName]);
    }

    else
    {
      id v56 = (void *)objc_claimAutoreleasedReturnValue([v3 protocol]);
      BOOL v57 = (void *)objc_claimAutoreleasedReturnValue([v56 DNSSettings]);
      id v50 = (void *)objc_claimAutoreleasedReturnValue([v57 domainName]);
    }

    uint64_t v58 = NEVirtualInterfaceSetDNSDomain([v3 virtualInterface], v50);
    if (!(_DWORD)v58)
    {
      uint64_t v60 = ne_log_obj(v58, v59);
      id v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
      if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = v3;
        _os_log_error_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_ERROR,  "%@: failed to set the DNS domain",  buf,  0xCu);
      }
    }

    id v62 = (void *)objc_claimAutoreleasedReturnValue([v4 DNSSettings]);
    id v63 = (void *)objc_claimAutoreleasedReturnValue([v62 servers]);

    if (v63)
    {
      uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue([v4 DNSSettings]);
      uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v64 servers]);
    }

    else
    {
      uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue([v3 protocol]);
      uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue([v64 DNSSettings]);
      uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v65 servers]);
    }

    uint64_t v66 = NEVirtualInterfaceSetDNSServers([v3 virtualInterface], v49);
    if (!(_DWORD)v66)
    {
      uint64_t v68 = ne_log_obj(v66, v67);
      id v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(v68);
      if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = v3;
        _os_log_error_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_ERROR,  "%@: failed to set the DNS servers",  buf,  0xCu);
      }
    }

    unsigned __int8 v70 = (void *)objc_claimAutoreleasedReturnValue([v4 DNSSettings]);
    id v71 = (void *)objc_claimAutoreleasedReturnValue([v70 searchDomains]);

    if (v71)
    {
      id v72 = (void *)objc_claimAutoreleasedReturnValue([v4 DNSSettings]);
      uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue([v72 searchDomains]);
    }

    else
    {
      id v72 = (void *)objc_claimAutoreleasedReturnValue([v3 protocol]);
      id v74 = (void *)objc_claimAutoreleasedReturnValue([v72 DNSSettings]);
      uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue([v74 searchDomains]);
    }

    id v75 = (void *)objc_claimAutoreleasedReturnValue([v4 DNSSettings]);
    unsigned __int8 v76 = (void *)objc_claimAutoreleasedReturnValue([v75 matchDomains]);

    if (v76)
    {
      uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue([v4 DNSSettings]);
      id v47 = (id)objc_claimAutoreleasedReturnValue([v77 matchDomains]);

      v78 = (void *)objc_claimAutoreleasedReturnValue([v4 DNSSettings]);
      id v79 = [v78 matchDomainsNoSearch];
    }

    else
    {
      unsigned int v80 = (void *)objc_claimAutoreleasedReturnValue([v3 protocol]);
      unsigned int v81 = (void *)objc_claimAutoreleasedReturnValue([v80 DNSSettings]);
      id v47 = (id)objc_claimAutoreleasedReturnValue([v81 matchDomains]);

      v78 = (void *)objc_claimAutoreleasedReturnValue([v3 protocol]);
      uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue([v78 DNSSettings]);
      id v79 = [v82 matchDomainsNoSearch];
    }

    if (v73)
    {
      if ([v73 count] || !v47)
      {
LABEL_68:
        id v48 = v73;
LABEL_69:
        uint64_t v84 = NEVirtualInterfaceSetDNSSearchDomains([v3 virtualInterface], v48);
        if (!(_DWORD)v84)
        {
          uint64_t v86 = ne_log_obj(v84, v85);
          __int16 v87 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
          if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = v3;
            _os_log_error_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_ERROR,  "%@: failed to set the DNS search domains",  buf,  0xCu);
          }
        }

        if (([v3 isSecondaryConnection] & 1) != 0
          || [v3 tunnelKind] == (id)2)
        {
          goto LABEL_30;
        }

        uint64_t matched = NEVirtualInterfaceSetDNSSupplementalMatchDomains([v3 virtualInterface], v47);
        if (!(_DWORD)matched)
        {
          uint64_t v90 = ne_log_obj(matched, v89);
          __int128 v91 = (os_log_s *)objc_claimAutoreleasedReturnValue(v90);
          if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = v3;
            _os_log_error_impl( (void *)&_mh_execute_header,  v91,  OS_LOG_TYPE_ERROR,  "%@: failed to set the supplemental match domains",  buf,  0xCu);
          }
        }

        uint64_t v92 = NEVirtualInterfaceSetDNSSupplementalMatchDomainsNoSearch([v3 virtualInterface], v79);
        if ((_DWORD)v92) {
          goto LABEL_30;
        }
        uint64_t v94 = ne_log_obj(v92, v93);
        unsigned __int8 v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v94);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v3;
          _os_log_error_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_ERROR,  "%@: failed to set the supplemental match domains NoSearch flag",  buf,  0xCu);
        }

id sub_10002626C(uint64_t a1)
{
  uint64_t v160 = 0LL;
  id result = [*(id *)(a1 + 32) virtualInterface];
  if (result)
  {
    id v3 = *(void **)(a1 + 32);
    if (!v3)
    {
      v145 = 0LL;
LABEL_125:
      if (NEVirtualInterfaceUpdateAdHocServiceReturnChanges( [v145 virtualInterface],  &v160,  *(unsigned __int8 *)(a1 + 40))) {
        return (id)v160;
      }
      else {
        return 0LL;
      }
    }

    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pluginConfigurationEntities]);
    uint64_t Type = NEVirtualInterfaceGetType([v3 virtualInterface]);
    uint64_t v6 = ne_log_obj(Type, v5);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v163 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%@: Setting up the virtual interface", buf, 0xCu);
    }

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v4 tunnelRemoteAddress]);
    if (!v8)
    {
LABEL_19:
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v4 IPv4Settings]);

      uint64_t v28 = &AnalyticsSendEventLazy_ptr;
      uint64_t v154 = a1;
      v155 = v4;
      if (!v27) {
        goto LABEL_67;
      }
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v4 IPv4Settings]);
      CFArrayRef theArray = (CFArrayRef)objc_claimAutoreleasedReturnValue([v29 includedRoutes]);

      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v4 IPv4Settings]);
      CFNumberRef v150 = (CFNumberRef)objc_claimAutoreleasedReturnValue([v30 excludedRoutes]);

      id v31 = (void *)objc_claimAutoreleasedReturnValue([v4 IPv4Settings]);
      number = +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v31 hasDefaultRoute]);

      BOOL v32 = (void *)objc_claimAutoreleasedReturnValue([v4 IPv4Settings]);
      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v32 addresses]);

      uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v4 IPv4Settings]);
      CFArrayRef v35 = (CFArrayRef)objc_claimAutoreleasedReturnValue([v34 subnetMasks]);

      if (v33)
      {
        CFIndex Count = CFArrayGetCount((CFArrayRef)v33);
        if (v35)
        {
LABEL_22:
          CFIndex v38 = CFArrayGetCount(v35);
          goto LABEL_25;
        }
      }

      else
      {
        CFIndex Count = 0LL;
        if (v35) {
          goto LABEL_22;
        }
      }

      CFIndex v38 = 0LL;
LABEL_25:
      if (Count < 1)
      {
        unsigned int v80 = (void *)objc_claimAutoreleasedReturnValue([v4 IPv4Settings]);
        id v81 = [v80 configMethod];

        if (v81 == (id)1)
        {
          uint64_t v82 = NEVirtualInterfaceSetIPv4ConfigurationMethod([v3 virtualInterface], 2);
          if (!(_DWORD)v82)
          {
            uint64_t v84 = ne_log_obj(v82, v83);
            uint64_t v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
            if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
            {
              uint64_t v146 = NEVirtualInterfaceGetType([v3 virtualInterface]);
              *(_DWORD *)buf = 138412546;
              v163 = v3;
              __int16 v164 = 2048;
              uint64_t v165 = v146;
              _os_log_error_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_ERROR,  "%@: failed to set the configuration method to DHCP for interface with type %ld",  buf,  0x16u);
            }

            goto LABEL_59;
          }
        }
      }

      else
      {
        CFIndex v39 = 0LL;
        CFIndex v40 = 0LL;
        *(void *)&__int128 v36 = 138412546LL;
        __int128 v148 = v36;
        unsigned __int8 v41 = @"255.0.0.0";
        CFArrayRef v156 = v35;
        do
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex((CFArrayRef)v33, v40);
          if (!v40 && Type == 1)
          {
            uint64_t v43 = NEVirtualInterfaceSetIPv4Router([v3 virtualInterface], ValueAtIndex);
            if (!(_DWORD)v43)
            {
              uint64_t v45 = ne_log_obj(v43, v44);
              id v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
              if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                v163 = v3;
                _os_log_error_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_ERROR,  "%@: failed to set the IPv4 router to remote address",  buf,  0xCu);
              }

              uint64_t v49 = ne_log_obj(v47, v48);
              id v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
              if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = v148;
                v163 = v3;
                __int16 v164 = 2112;
                uint64_t v165 = (uint64_t)ValueAtIndex;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEBUG,  "%@: failed to set the IPv4 router to %@",  buf,  0x16u);
              }
            }
          }

          id v51 = 0LL;
          if (v35 && v39 < v38) {
            id v51 = (const __CFString *)CFArrayGetValueAtIndex(v35, v39++);
          }
          if (v51) {
            uint64_t v52 = v51;
          }
          else {
            uint64_t v52 = v41;
          }
          uint64_t v53 = NEVirtualInterfaceAddAddress(objc_msgSend(v3, "virtualInterface", v148), ValueAtIndex, v52);
          if (!(_DWORD)v53)
          {
            CFIndex v55 = Count;
            id v56 = v33;
            CFIndex v57 = v38;
            uint64_t v58 = v41;
            uint64_t v59 = ne_log_obj(v53, v54);
            uint64_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
            if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v163 = v3;
              _os_log_error_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_ERROR,  "%@: failed to add IPv4 address and netmask",  buf,  0xCu);
            }

            uint64_t v63 = ne_log_obj(v61, v62);
            uint64_t v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
            if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412802;
              v163 = v3;
              __int16 v164 = 2112;
              uint64_t v165 = (uint64_t)ValueAtIndex;
              __int16 v166 = 2112;
              v167 = v52;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEBUG,  "%@: failed to add address %@ netmask %@",  buf,  0x20u);
            }

            unsigned __int8 v41 = v58;
            CFIndex v38 = v57;
            uint64_t v33 = v56;
            CFIndex Count = v55;
            CFArrayRef v35 = v156;
          }

          ++v40;
        }

        while (Count != v40);
        uint64_t v4 = v155;
        uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue([v155 IPv4Settings]);
        uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue([v65 router]);

        uint64_t v28 = &AnalyticsSendEventLazy_ptr;
        if (v66)
        {
          if (Type == 3)
          {
            id v67 = [v3 virtualInterface];
            uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue([v155 IPv4Settings]);
            id v69 = (void *)objc_claimAutoreleasedReturnValue([v68 router]);
            LODWORD(v67) = NEVirtualInterfaceSetIPv4Router(v67, v69);

            if (!(_DWORD)v67)
            {
              uint64_t v72 = ne_log_obj(v70, v71);
              uint64_t v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(v72);
              if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                v163 = v3;
                _os_log_error_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_ERROR,  "%@: failed to set the IPv4 router",  buf,  0xCu);
              }

              uint64_t v76 = ne_log_obj(v74, v75);
              uint64_t v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(v76);
              if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
              {
                v78 = (void *)objc_claimAutoreleasedReturnValue([v155 IPv4Settings]);
                id v79 = (void *)objc_claimAutoreleasedReturnValue([v78 router]);
                *(_DWORD *)buf = v148;
                v163 = v3;
                __int16 v164 = 2112;
                uint64_t v165 = (uint64_t)v79;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_DEBUG,  "%@: failed to set the IPv4 router to %@",  buf,  0x16u);
              }

LABEL_59:
            }
          }
        }
      }

      if (([v3 isSecondaryConnection] & 1) == 0)
      {
        sub_1000276B0(v3, theArray, 0, 2);
        sub_1000276B0(v3, v150, 1u, 2);
        if (number)
        {
          int valuePtr = 0;
          uint64_t Value = CFNumberGetValue((CFNumberRef)number, kCFNumberIntType, &valuePtr);
          int v86 = valuePtr;
          BOOL v87 = valuePtr != 0;
          uint64_t v89 = ne_log_obj(Value, v88);
          uint64_t v90 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
          if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
          {
            __int128 v91 = @"not primary";
            if (v86) {
              __int128 v91 = @"primary";
            }
            *(_DWORD *)buf = 138412546;
            v163 = v3;
            __int16 v164 = 2112;
            uint64_t v165 = (uint64_t)v91;
            _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEFAULT, "%@: %@ for IPv4", buf, 0x16u);
          }

LABEL_68:
          uint64_t v92 = (void *)objc_claimAutoreleasedReturnValue([v4 IPv6Settings]);

          if (!v92)
          {
            a1 = v154;
            goto LABEL_110;
          }

          BOOL v159 = v87;
          uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue([v4 IPv6Settings]);
          CFArrayRef v157 = (CFArrayRef)objc_claimAutoreleasedReturnValue([v93 includedRoutes]);

          uint64_t v94 = (void *)objc_claimAutoreleasedReturnValue([v4 IPv6Settings]);
          CFArrayRef theArraya = (CFArrayRef)objc_claimAutoreleasedReturnValue([v94 excludedRoutes]);

          v95 = v28[219];
          uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue([v4 IPv6Settings]);
          v151 = (const __CFNumber *)objc_msgSend(v95, "numberWithBool:", objc_msgSend(v96, "hasDefaultRoute"));

          uint64_t v97 = (void *)objc_claimAutoreleasedReturnValue([v4 IPv6Settings]);
          uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue([v97 addresses]);

          v99 = (void *)objc_claimAutoreleasedReturnValue([v4 IPv6Settings]);
          uint64_t v100 = (void *)objc_claimAutoreleasedReturnValue([v99 networkPrefixLengths]);

          if (v98)
          {
            CFIndex v101 = CFArrayGetCount((CFArrayRef)v98);
            if (v100)
            {
LABEL_71:
              CFIndex v102 = CFArrayGetCount((CFArrayRef)v100);
              goto LABEL_75;
            }
          }

          else
          {
            CFIndex v101 = 0LL;
            if (v100) {
              goto LABEL_71;
            }
          }

          CFIndex v102 = 0LL;
LABEL_75:
          if (v101 >= 1)
          {
            CFIndex v103 = 0LL;
            CFIndex v104 = 0LL;
            while (1)
            {
              id v105 = (void *)CFArrayGetValueAtIndex((CFArrayRef)v98, v104);
              id v106 = 0LL;
              if (v100 && v103 < v102)
              {
                char v107 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v100, v103);
                *(_DWORD *)buf = 128;
                CFNumberGetValue(v107, kCFNumberIntType, buf);
                id v106 = (const __CFString *)NECreateIPv6AddressMaskStringFromPrefix(*(unsigned int *)buf);
                ++v103;
              }

              uint64_t v108 = NEVirtualInterfaceAddAddress([v3 virtualInterface], v105, v106);
              if (!(_DWORD)v108) {
                break;
              }
              if (v106) {
                goto LABEL_82;
              }
LABEL_83:
              if (v101 == ++v104) {
                goto LABEL_99;
              }
            }

            uint64_t v110 = ne_log_obj(v108, v109);
            __int128 v111 = (os_log_s *)objc_claimAutoreleasedReturnValue(v110);
            if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v163 = v3;
              _os_log_error_impl( (void *)&_mh_execute_header,  v111,  OS_LOG_TYPE_ERROR,  "%@: failed to add IPv6 address and netmask",  buf,  0xCu);
            }

            uint64_t v114 = ne_log_obj(v112, v113);
            uint64_t v115 = (os_log_s *)objc_claimAutoreleasedReturnValue(v114);
            if (os_log_type_enabled(v115, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412802;
              v163 = v3;
              __int16 v164 = 2112;
              uint64_t v165 = (uint64_t)v105;
              __int16 v166 = 2112;
              v167 = v106;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v115,  OS_LOG_TYPE_DEBUG,  "%@: failed to add address %@ netmask %@",  buf,  0x20u);
            }

            if (!v106) {
              goto LABEL_83;
            }
LABEL_82:
            CFRelease(v106);
            goto LABEL_83;
          }

          v116 = (void *)objc_claimAutoreleasedReturnValue([v4 IPv6Settings]);
          id v117 = [v116 configMethod];

          if (v117 == (id)1)
          {
            uint64_t v118 = NEVirtualInterfaceSetIPv6ConfigurationMethod([v3 virtualInterface], 2);
            if ((_DWORD)v118) {
              goto LABEL_99;
            }
            uint64_t v120 = ne_log_obj(v118, v119);
            id v121 = (os_log_s *)objc_claimAutoreleasedReturnValue(v120);
            if (!os_log_type_enabled(v121, OS_LOG_TYPE_ERROR)) {
              goto LABEL_98;
            }
            uint64_t v122 = NEVirtualInterfaceGetType([v3 virtualInterface]);
            *(_DWORD *)buf = 138412546;
            v163 = v3;
            __int16 v164 = 2048;
            uint64_t v165 = v122;
            uint64_t v123 = "%@: failed to set the configuration method to Automatic for interface with type %ld";
          }

          else
          {
            __int16 v124 = (void *)objc_claimAutoreleasedReturnValue([v4 IPv6Settings]);
            id v125 = [v124 configMethod];

            if (v125 != (id)3
              || (uint64_t v126 = NEVirtualInterfaceSetIPv6ConfigurationMethod([v3 virtualInterface], 3),
                  (_DWORD)v126))
            {
LABEL_99:
              if ([v3 isSecondaryConnection])
              {
                a1 = v154;
                uint64_t v4 = v155;
                BOOL v87 = v159;
              }

              else
              {
                sub_1000276B0(v3, v157, 0, 30);
                sub_1000276B0(v3, theArraya, 1u, 30);
                BOOL v87 = v159;
                if (v151) {
                  char v129 = v159;
                }
                else {
                  char v129 = 1;
                }
                a1 = v154;
                uint64_t v4 = v155;
                if ((v129 & 1) == 0)
                {
                  int valuePtr = 0;
                  uint64_t v130 = CFNumberGetValue(v151, kCFNumberIntType, &valuePtr);
                  int v131 = valuePtr;
                  BOOL v87 = valuePtr != 0;
                  uint64_t v133 = ne_log_obj(v130, v132);
                  v134 = (os_log_s *)objc_claimAutoreleasedReturnValue(v133);
                  if (os_log_type_enabled(v134, OS_LOG_TYPE_DEFAULT))
                  {
                    v135 = @"not primary";
                    if (v131) {
                      v135 = @"primary";
                    }
                    *(_DWORD *)buf = 138412546;
                    v163 = v3;
                    __int16 v164 = 2112;
                    uint64_t v165 = (uint64_t)v135;
                    _os_log_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_DEFAULT, "%@: %@ for IPv6", buf, 0x16u);
                  }
                }
              }

              id v21 = 1;
LABEL_67:
              objc_setProperty_atomic(self, v48, v23, *((int *)v53 + 708));
              objc_setProperty_atomic(self, v74, v51, 440LL);
LABEL_68:
              uint64_t v75 = ne_log_obj(v52, v48);
              uint64_t v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
              if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
              {
                if (self) {
                  v95 = objc_getProperty(self, v77, *((int *)v53 + 708), 1);
                }
                else {
                  v95 = 0LL;
                }
                uint64_t v97 = (void *)objc_claimAutoreleasedReturnValue([v95 interfaceName]);
                uint64_t v98 = v21;
                if (self) {
                  v99 = objc_getProperty(self, v96, 440LL, 1);
                }
                else {
                  v99 = 0LL;
                }
                uint64_t v100 = (void *)objc_claimAutoreleasedReturnValue([v99 interfaceName]);
                *(_DWORD *)buf = 138412546;
                *(void *)v219 = v97;
                *(_WORD *)&v219[8] = 2112;
                v220 = (uint64_t)v100;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_DEBUG,  "Fallback interface set to %@ from %@",  buf,  0x16u);

                id v21 = v98;
              }

              uint64_t v24 = 1;
              goto LABEL_70;
            }

            CFIndex v55 = 0LL;
            if (!v24)
            {
              LOBYTE(v204) = 1;
              v199 = 0;
              v196 = 0;
              goto LABEL_42;
            }

            v204 = 1;
LABEL_32:
            CFIndex v57 = objc_getProperty(self, v48, *((int *)v53 + 708), 1);
            if (v57)
            {
              v202 = v55;
              v194 = v57;
              uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue([v23 interfaceName]);
              uint64_t v60 = objc_getProperty(self, v59, *((int *)v53 + 708), 1);
              uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue([v60 interfaceName]);
              if ([v58 isEqualToString:v61])
              {

                if (v204) {
                int v12 = v206;
                }
                goto LABEL_65;
              }

              v191 = v61;
              v192 = v60;
              v193 = v58;
              v199 = 1;
              v196 = 1;
              int v12 = v206;
              CFIndex v55 = v202;
            }

            else
            {
              v199 = 1;
              v194 = 0LL;
              v196 = 0;
              int v12 = v206;
            }

LABEL_110:
              if ([v3 isSecondaryConnection])
              {
                NEVirtualInterfaceSetAsPrimary([v3 virtualInterface], 0);
                id v136 = [v3 virtualInterface];
                uint64_t v137 = 1LL;
              }

              else
              {
                id v138 = [v3 tunnelKind];
                id v139 = [v3 virtualInterface];
                if (!v87)
                {
                  NEVirtualInterfaceSetAsPrimary(v139, 0LL);
                  id v140 = [v3 virtualInterface];
                  if (v138 == (id)1) {
                    NEVirtualInterfaceSetRankLast(v140, 1LL);
                  }
                  else {
                    NEVirtualInterfaceSetRankNever(v140, 1LL);
                  }
                  v141 = (void *)objc_claimAutoreleasedReturnValue([v3 configuration]);
                  id v142 = [v141 grade];

                  id v143 = [v3 virtualInterface];
                  if (v142 == (id)1) {
                    uint64_t v144 = 100LL;
                  }
                  else {
                    uint64_t v144 = 200LL;
                  }
                  NEVirtualInterfaceSetServiceIndex(v143, v144);
                  goto LABEL_124;
                }

                if (v138 != (id)1)
                {
                  NEVirtualInterfaceSetRankNever(v139, 1LL);
                  goto LABEL_124;
                }

                NEVirtualInterfaceSetAsPrimary(v139, 1LL);
                id v136 = [v3 virtualInterface];
                uint64_t v137 = 0LL;
              }

              NEVirtualInterfaceSetRankLast(v136, v137);
LABEL_124:

              v145 = *(void **)(a1 + 32);
              goto LABEL_125;
            }

            uint64_t v128 = ne_log_obj(v126, v127);
            id v121 = (os_log_s *)objc_claimAutoreleasedReturnValue(v128);
            if (!os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
            {
LABEL_98:

              goto LABEL_99;
            }

            uint64_t v147 = NEVirtualInterfaceGetType([v3 virtualInterface]);
            *(_DWORD *)buf = 138412546;
            v163 = v3;
            __int16 v164 = 2048;
            uint64_t v165 = v147;
            uint64_t v123 = "%@: failed to set the configuration method to LinkLocalOnly for interface with type %ld";
          }

          _os_log_error_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_ERROR, v123, buf, 0x16u);
          goto LABEL_98;
        }
      }

                        if (a3
                          && ((-[NSMutableArray count](v153, "count") != 0LL) | v146 & 1
                           || -[NSMutableArray count](v68, "count")))
                        {
                          uint64_t v93 = -[NSArray initWithObjects:]( objc_alloc(&OBJC_CLASS___NSArray),  "initWithObjects:",  v63,  v65,  v18,  0LL);
                          v16[2](v16, v93, 1LL);
                        }

                        v186 = 0u;
                        v187 = 0u;
                        v184 = 0u;
                        v185 = 0u;
                        uint64_t v94 = v151;
                        v95 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v94,  "countByEnumeratingWithState:objects:count:",  &v184,  v239,  16LL);
                        if (v95)
                        {
                          uint64_t v96 = v95;
                          uint64_t v97 = *(void *)v185;
                          do
                          {
                            for (mm = 0LL; mm != v96; mm = (char *)mm + 1)
                            {
                              if (*(void *)v185 != v97) {
                                objc_enumerationMutation(v94);
                              }
                              v99 = -[NSArray initWithObjects:]( objc_alloc(&OBJC_CLASS___NSArray),  "initWithObjects:",  v63,  v65,  *(void *)(*((void *)&v184 + 1) + 8LL * (void)mm),  v18,  0LL);
                              v163[2](v163, v99);
                            }

                            uint64_t v96 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v94,  "countByEnumeratingWithState:objects:count:",  &v184,  v239,  16LL);
                          }

                          while (v96);
                        }

                        uint64_t v64 = v154 + 1;
                        CFIndex v38 = v148;
                        uint64_t v60 = v149;
                      }

                      while ((id)(v154 + 1) != v152);
                      v152 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v145,  "countByEnumeratingWithState:objects:count:",  &v204,  v244,  16LL);
                      if (!v152)
                      {
                        SEL v22 = v153;
                        uint64_t v33 = v158;
                        goto LABEL_180;
                      }
                    }
                  }

                  if (-[NSMutableArray count](v22, "count"))
                  {
                    v182 = 0u;
                    v183 = 0u;
                    v180 = 0u;
                    v181 = 0u;
                    uint64_t v100 = v22;
                    v162 = -[NSArray countByEnumeratingWithState:objects:count:]( v100,  "countByEnumeratingWithState:objects:count:",  &v180,  v238,  16LL);
                    if (v162)
                    {
                      CFIndex v101 = *(void *)v181;
                      uint64_t v160 = v100;
                      CFArrayRef v157 = *(void *)v181;
                      do
                      {
                        for (nn = 0LL; nn != v162; nn = (char *)nn + 1)
                        {
                          if (*(void *)v181 != v101) {
                            objc_enumerationMutation(v100);
                          }
                          CFIndex v103 = *(void *)(*((void *)&v180 + 1) + 8LL * (void)nn);
                          if (-[NSMutableArray count](v33, "count"))
                          {
                            v178 = 0u;
                            v179 = 0u;
                            v176 = 0u;
                            v177 = 0u;
                            CFIndex v104 = v33;
                            id v105 = -[NSArray countByEnumeratingWithState:objects:count:]( v104,  "countByEnumeratingWithState:objects:count:",  &v176,  v237,  16LL);
                            if (v105)
                            {
                              id v106 = v105;
                              char v107 = *(void *)v177;
                              do
                              {
                                for (i1 = 0LL; i1 != v106; i1 = (char *)i1 + 1)
                                {
                                  if (*(void *)v177 != v107) {
                                    objc_enumerationMutation(v104);
                                  }
                                  uint64_t v109 = -[NSArray initWithObjects:]( objc_alloc(&OBJC_CLASS___NSArray),  "initWithObjects:",  v63,  v103,  *(void *)(*((void *)&v176 + 1) + 8LL * (void)i1),  v18,  0LL);
                                  v16[2](v16, v109, 0LL);
                                }

                                id v106 = -[NSArray countByEnumeratingWithState:objects:count:]( v104,  "countByEnumeratingWithState:objects:count:",  &v176,  v237,  16LL);
                              }

                              while (v106);
                              uint64_t v33 = v158;
                              uint64_t v100 = v160;
                              CFIndex v101 = v157;
                            }
                          }

                          else
                          {
                            CFIndex v104 = -[NSArray initWithObjects:]( objc_alloc(&OBJC_CLASS___NSArray),  "initWithObjects:",  v63,  v103,  v18,  0LL);
                            v16[2](v16, v104, 0LL);
                          }

                          SEL v22 = v153;
                        }

                        v162 = -[NSArray countByEnumeratingWithState:objects:count:]( v100,  "countByEnumeratingWithState:objects:count:",  &v180,  v238,  16LL);
                      }

                      while (v162);
                    }
                  }

                  else if ((v146 & 1) != 0)
                  {
                    uint64_t v110 = (void *)objc_claimAutoreleasedReturnValue([v60 matchDomains]);
                    __int128 v111 = (void *)objc_claimAutoreleasedReturnValue([v60 matchSigningIdentifier]);
                    uint64_t v112 = sub_1000334A0(v143, v110, v111, obj, v142);

                    if (!v112) {
                      goto LABEL_167;
                    }
                    uint64_t v100 = (NSArray *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition domainFilter:]( &OBJC_CLASS___NEPolicyCondition,  "domainFilter:",  v112));
                    if (-[NSMutableArray count](v33, "count"))
                    {
                      v174 = 0u;
                      v175 = 0u;
                      v172 = 0u;
                      v173 = 0u;
                      uint64_t v113 = v33;
                      uint64_t v114 = -[NSArray countByEnumeratingWithState:objects:count:]( v113,  "countByEnumeratingWithState:objects:count:",  &v172,  v236,  16LL);
                      if (v114)
                      {
                        uint64_t v115 = v114;
                        v116 = *(void *)v173;
                        do
                        {
                          for (i2 = 0LL; i2 != v115; i2 = (char *)i2 + 1)
                          {
                            if (*(void *)v173 != v116) {
                              objc_enumerationMutation(v113);
                            }
                            uint64_t v118 = -[NSArray initWithObjects:]( objc_alloc(&OBJC_CLASS___NSArray),  "initWithObjects:",  v63,  v100,  *(void *)(*((void *)&v172 + 1) + 8LL * (void)i2),  v18,  0LL);
                            v16[2](v16, v118, 0LL);
                          }

                          uint64_t v115 = -[NSArray countByEnumeratingWithState:objects:count:]( v113,  "countByEnumeratingWithState:objects:count:",  &v172,  v236,  16LL);
                        }

                        while (v115);
                        uint64_t v33 = v158;
                      }
                    }

                    else
                    {
                      uint64_t v113 = -[NSArray initWithObjects:]( objc_alloc(&OBJC_CLASS___NSArray),  "initWithObjects:",  v63,  v100,  v18,  0LL);
                      v16[2](v16, v113, 0LL);
                    }
                  }

                  else if (-[NSMutableArray count](v33, "count"))
                  {
                    v170 = 0u;
                    v171 = 0u;
                    v168 = 0u;
                    v169 = 0u;
                    uint64_t v100 = v33;
                    uint64_t v119 = -[NSArray countByEnumeratingWithState:objects:count:]( v100,  "countByEnumeratingWithState:objects:count:",  &v168,  v235,  16LL);
                    if (v119)
                    {
                      uint64_t v120 = v119;
                      id v121 = *(void *)v169;
                      do
                      {
                        for (i3 = 0LL; i3 != v120; i3 = (char *)i3 + 1)
                        {
                          if (*(void *)v169 != v121) {
                            objc_enumerationMutation(v100);
                          }
                          uint64_t v123 = -[NSArray initWithObjects:]( objc_alloc(&OBJC_CLASS___NSArray),  "initWithObjects:",  v63,  *(void *)(*((void *)&v168 + 1) + 8LL * (void)i3),  v18,  0LL);
                          v16[2](v16, v123, 0LL);
                        }

                        uint64_t v120 = -[NSArray countByEnumeratingWithState:objects:count:]( v100,  "countByEnumeratingWithState:objects:count:",  &v168,  v235,  16LL);
                      }

                      while (v120);
                      uint64_t v33 = v158;
                    }
                  }

                  else
                  {
                    uint64_t v100 = -[NSArray initWithObjects:]( objc_alloc(&OBJC_CLASS___NSArray),  "initWithObjects:",  v63,  v18,  0LL);
                    v16[2](v16, v100, 0LL);
                  }

LABEL_167:
                  if (a3
                    && ((-[NSMutableArray count](v22, "count") != 0LL) | v146 & 1
                     || -[NSMutableArray count](v33, "count")))
                  {
                    __int16 v124 = -[NSArray initWithObjects:]( objc_alloc(&OBJC_CLASS___NSArray),  "initWithObjects:",  v63,  v18,  0LL);
                    v16[2](v16, v124, 1LL);
                  }

                  __int16 v166 = 0u;
                  v167 = 0u;
                  __int16 v164 = 0u;
                  uint64_t v165 = 0u;
                  v145 = v151;
                  id v125 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v145,  "countByEnumeratingWithState:objects:count:",  &v164,  v234,  16LL);
                  if (v125)
                  {
                    uint64_t v126 = v125;
                    uint64_t v127 = *(void *)v165;
                    do
                    {
                      for (i4 = 0LL; i4 != v126; i4 = (char *)i4 + 1)
                      {
                        if (*(void *)v165 != v127) {
                          objc_enumerationMutation(v145);
                        }
                        char v129 = -[NSArray initWithObjects:]( objc_alloc(&OBJC_CLASS___NSArray),  "initWithObjects:",  v63,  *(void *)(*((void *)&v164 + 1) + 8LL * (void)i4),  v18,  0LL);
                        v163[2](v163, v129);
                      }

                      uint64_t v126 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v145,  "countByEnumeratingWithState:objects:count:",  &v164,  v234,  16LL);
                    }

                    while (v126);
                    uint64_t v33 = v158;
                  }

                  CFIndex v38 = v148;
                  uint64_t v60 = v149;
LABEL_180:

                  uint64_t v61 = v141 + 1;
                  uint64_t v17 = &AnalyticsSendEventLazy_ptr;
                }

                while ((id)(v141 + 1) != v140);
                id v140 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v137,  "countByEnumeratingWithState:objects:count:",  &v208,  v245,  16LL);
              }

              while (v140);
            }
          }

          else
          {
            CFIndex v38 = v148;
          }

          uint64_t v19 = v136 + 1;
        }

        while ((id)(v136 + 1) != v134);
        v134 = [obj countByEnumeratingWithState:&v230 objects:v250 count:16];
      }

      while (v134);
    }

    uint64_t v15 = v131;
  }
}

void sub_1000270E0(uint64_t a1, uint64_t a2)
{
  if (!(_DWORD)a2)
  {
    uint64_t v13 = ne_log_obj(a1, a2);
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v42 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v42;
      _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%@: failed to set the tunnel configuration",  buf,  0xCu);
    }

    goto LABEL_9;
  }

  id v4 = [*(id *)(a1 + 32) parentType];
  if (v4 != (id)1)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) policySession]);
    sub_10002EB18((uint64_t)v6);

    uint64_t v7 = *(void **)(a1 + 32);
    if (v7)
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pluginConfigurationEntities]);
      xpc_object_t v9 = xpc_dictionary_create(0LL, 0LL, 0LL);
      if (NEVirtualInterfaceIsPrimary([v7 virtualInterface]))
      {
        xpc_object_t v10 = xpc_dictionary_create(0LL, 0LL, 0LL);
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 IPv4Settings]);
        if (v11) {
          int v12 = +[NESMSession copyDefaultRouteCacheIsIPv6:]( &OBJC_CLASS___NESMSession,  "copyDefaultRouteCacheIsIPv6:",  0LL);
        }
        else {
          int v12 = 0LL;
        }

        *(void *)buf = v12;
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v8 IPv6Settings]);
        if (v28) {
          uint64_t v29 = +[NESMSession copyDefaultRouteCacheIsIPv6:]( &OBJC_CLASS___NESMSession,  "copyDefaultRouteCacheIsIPv6:",  1LL);
        }
        else {
          uint64_t v29 = 0LL;
        }

        *(void *)uu = v29;
        if (v12)
        {
          uint64_t v30 = (void *)_CFXPCCreateXPCObjectFromCFObject(v12);
          xpc_dictionary_set_value(v10, "ipv4-subnets", v30);
        }

        if (v29)
        {
          id v31 = (void *)_CFXPCCreateXPCObjectFromCFObject(v29);
          xpc_dictionary_set_value(v10, "ipv6-subnets", v31);
        }

        myCFRelease(buf);
        myCFRelease(uu);
        xpc_dictionary_set_value(v9, "included-routes", v10);
      }

      else
      {
        *(void *)buf = NEVirtualInterfaceCopyIPv4Routes([v7 virtualInterface], 0);
        *(void *)uu = NEVirtualInterfaceCopyIPv4Routes([v7 virtualInterface], 1);
        uint64_t v48 = NEVirtualInterfaceCopyIPv6Routes([v7 virtualInterface], 0);
        uint64_t v47 = NEVirtualInterfaceCopyIPv6Routes([v7 virtualInterface], 1);
        unint64_t v18 = +[NESMSession copyRouteCacheFromRoutes:isIPv6:]( &OBJC_CLASS___NESMSession,  "copyRouteCacheFromRoutes:isIPv6:",  *(void *)buf,  0LL);
        unint64_t v46 = v18;
        unint64_t v19 = +[NESMSession copyRouteCacheFromRoutes:isIPv6:]( &OBJC_CLASS___NESMSession,  "copyRouteCacheFromRoutes:isIPv6:",  *(void *)uu,  0LL);
        unint64_t v45 = v19;
        unint64_t v20 = +[NESMSession copyRouteCacheFromRoutes:isIPv6:]( &OBJC_CLASS___NESMSession,  "copyRouteCacheFromRoutes:isIPv6:",  v48,  1LL);
        unint64_t v44 = v20;
        unint64_t v21 = +[NESMSession copyRouteCacheFromRoutes:isIPv6:]( &OBJC_CLASS___NESMSession,  "copyRouteCacheFromRoutes:isIPv6:",  v47,  1LL);
        unint64_t v43 = v21;
        myCFRelease(buf);
        myCFRelease(uu);
        myCFRelease(&v48);
        myCFRelease(&v47);
        if (v18 | v20)
        {
          xpc_object_t v22 = xpc_dictionary_create(0LL, 0LL, 0LL);
          if (v18)
          {
            uint64_t v23 = (void *)_CFXPCCreateXPCObjectFromCFObject(v18);
            xpc_dictionary_set_value(v22, "ipv4-subnets", v23);
          }

          if (v20)
          {
            uint64_t v24 = (void *)_CFXPCCreateXPCObjectFromCFObject(v20);
            xpc_dictionary_set_value(v22, "ipv6-subnets", v24);
          }

          xpc_dictionary_set_value(v9, "included-routes", v22);
        }

        if (v19 | v21)
        {
          xpc_object_t v25 = xpc_dictionary_create(0LL, 0LL, 0LL);
          if (v19)
          {
            uint64_t v26 = (void *)_CFXPCCreateXPCObjectFromCFObject(v19);
            xpc_dictionary_set_value(v25, "ipv4-subnets", v26);
          }

          if (v21)
          {
            uint64_t v27 = (void *)_CFXPCCreateXPCObjectFromCFObject(v21);
            xpc_dictionary_set_value(v25, "ipv6-subnets", v27);
          }

          xpc_dictionary_set_value(v9, "excluded-routes", v25);
        }

        myCFRelease(&v46);
        myCFRelease(&v45);
        myCFRelease(&v44);
        myCFRelease(&v43);
      }

      BOOL v32 = (void *)objc_claimAutoreleasedReturnValue([v7 configuration]);
      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v32 identifier]);
      [v33 getUUIDBytes:uu];

      uuid_unparse(uu, (char *)buf);
      NEHelperCacheSetRoutes(buf, v9);

      uint64_t v34 = *(void **)(a1 + 32);
      if (v34)
      {
        id v4 = [*(id *)(a1 + 32) isSecondaryConnection];
        if ((v4 & 1) == 0)
        {
          id v4 = [v34 tunnelKind];
          if (v4 != (id)2)
          {
            uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue([v34 pluginConfigurationEntities]);
            CFArrayRef v35 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s DNSSettings](v14, "DNSSettings"));
            __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v35 matchDomains]);

            if (!v36)
            {
              unsigned __int8 v37 = (void *)objc_claimAutoreleasedReturnValue([v34 protocol]);
              CFIndex v38 = (void *)objc_claimAutoreleasedReturnValue([v37 DNSSettings]);
              __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v38 matchDomains]);
            }

            CFIndex v39 = (void *)objc_claimAutoreleasedReturnValue([v34 configuration]);
            CFIndex v40 = (void *)objc_claimAutoreleasedReturnValue([v39 identifier]);
            [v40 getUUIDBytes:uu];

            uuid_unparse(uu, (char *)buf);
            unsigned __int8 v41 = (void *)_CFXPCCreateXPCObjectFromCFObject(v36);
            NEHelperCacheSetMatchDomains(buf, v41);

LABEL_9:
          }
        }
      }
    }
  }

  uint64_t v15 = ne_log_obj(v4, v5);
  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    uint64_t v17 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    *(void *)&uint8_t buf[4] = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "%@: Finished setting the tunnel configuration",  buf,  0xCu);
  }

  sub_100024188(*(void **)(a1 + 32), a2);
}

uint64_t sub_1000276B0(void *a1, CFArrayRef theArray, unsigned int a3, int a4)
{
  if (!theArray) {
    return 1LL;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    CFIndex v9 = Count;
    CFIndex v10 = 0LL;
    id v11 = @"included";
    if (a3) {
      id v11 = @"excluded";
    }
    unsigned __int8 v41 = v11;
    char v12 = 1;
    while (a4 != 30)
    {
      if (a4 != 2)
      {
        uint64_t v39 = ne_log_obj(Count, v8);
        uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412546;
          unint64_t v44 = a1;
          __int16 v45 = 1024;
          LODWORD(v46) = a4;
          _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%@: INET Family (%d) not supported",  buf,  0x12u);
        }

        goto LABEL_22;
      }

      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v10);
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(ValueAtIndex);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s destinationAddress](v14, "destinationAddress"));

      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s destinationSubnetMask](v14, "destinationSubnetMask"));
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s gatewayAddress](v14, "gatewayAddress"));

      uint64_t v18 = NEVirtualInterfaceAddIPv4Route([a1 virtualInterface], v15, v16, v17, a3);
      if ((_DWORD)v18) {
        goto LABEL_23;
      }
      uint64_t v20 = ne_log_obj(v18, v19);
      unint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        unint64_t v44 = a1;
        _os_log_error_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%@: failed to add an IPv4 route",  buf,  0xCu);
      }

      uint64_t v24 = ne_log_obj(v22, v23);
      xpc_object_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138413314;
        unint64_t v44 = a1;
        __int16 v45 = 2112;
        unint64_t v46 = v41;
        __int16 v47 = 2112;
        uint64_t v48 = v15;
        __int16 v49 = 2112;
        id v50 = v16;
        __int16 v51 = 2112;
        uint64_t v52 = v17;
        uint64_t v26 = v25;
        uint64_t v27 = "%@: failed to add an IPv4 %@ route of %@/%@ -> %@";
LABEL_26:
        _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, v27, buf, 0x34u);
      }

BOOL sub_100027A9C(id a1, id a2, NSDictionary *a3)
{
  return objc_msgSend(a2, "length", a3) != 0;
}

void sub_100027AC0(void *a1)
{
  if (a1)
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([a1 setConfigurationCompletionHandlerArray]);

    if (v2)
    {
      uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NESetConfigurationCompletionOperation);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([a1 pluginCompletionHandler]);
      if (v5) {
        objc_setProperty_atomic_copy(v5, v6, v7, 8LL);
      }

      id v8 = [a1 setPluginCompletionHandler:0];
      uint64_t v10 = ne_log_obj(v8, v9);
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([a1 interfaceName]);
        if (v5) {
          id Property = objc_getProperty(v5, v12, 8LL, 1);
        }
        else {
          id Property = 0LL;
        }
        id v15 = objc_retainBlock(Property);
        int v19 = 138412802;
        uint64_t v20 = a1;
        __int16 v21 = 2112;
        uint64_t v22 = v13;
        __int16 v23 = 2112;
        id v24 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%@: config request: pushing handler [%@] %@",  (uint8_t *)&v19,  0x20u);
      }

      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([a1 setConfigurationCompletionHandlerArray]);
      [v16 addObject:v5];
    }

    else
    {
      uint64_t v17 = ne_log_obj(v3, v4);
      uint64_t v5 = (NESetConfigurationCompletionOperation *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_ERROR))
      {
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([a1 interfaceName]);
        int v19 = 138412546;
        uint64_t v20 = a1;
        __int16 v21 = 2112;
        uint64_t v22 = v18;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v5,  OS_LOG_TYPE_ERROR,  "%@: config request (push) handler array nil [%@]",  (uint8_t *)&v19,  0x16u);
      }
    }
  }

uint64_t sub_100027CB0(uint64_t a1)
{
  if ([*(id *)(a1 + 32) virtualInterface])
  {
    uint64_t v2 = NEVirtualInterfaceSetDelegateInterface( [*(id *)(a1 + 32) virtualInterface],  *(void *)(a1 + 40));
    if (!(_DWORD)v2)
    {
      uint64_t v17 = ne_log_obj(v2, v3);
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        int v19 = *(void **)(a1 + 32);
        uint64_t v20 = *(os_log_s **)(a1 + 40);
        int v22 = 138412546;
        __int16 v23 = v19;
        __int16 v24 = 2112;
        xpc_object_t v25 = v20;
        _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%@: failed to set delegate interface to %@",  (uint8_t *)&v22,  0x16u);
      }

      goto LABEL_13;
    }

    uint64_t v4 = *(void **)(a1 + 40);
    if (v4)
    {
      uint64_t v5 = *(void **)(a1 + 32);
      uint64_t v6 = v4;
      if (v5)
      {
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 pluginConfigurationEntities]);
        id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 tunnelRemoteAddress]);

        if (v8)
        {
          unsigned __int8 v9 = NEGetAddressFamilyFromString(v8);
          if (v9)
          {
            unsigned __int8 v10 = v9;
            id v11 = v6;
            char v12 = (void *)NECopyInterfaceAddress(-[os_log_s UTF8String](v11, "UTF8String"), v10);
            [v5 setDelegateInterfaceAddress:v12];

            uint64_t v15 = ne_log_obj(v13, v14);
            uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
            {
              __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v5 delegateInterfaceAddress]);
              int v22 = 138412802;
              __int16 v23 = v5;
              __int16 v24 = 2112;
              xpc_object_t v25 = v11;
              __int16 v26 = 2112;
              uint64_t v27 = v21;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "%@: IP address for %@ is %@",  (uint8_t *)&v22,  0x20u);
            }
          }
        }
      }

LABEL_13:
    }
  }

  return 0LL;
}
}

void sub_100027E98(uint64_t a1, uint64_t a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = ne_log_obj(a1, a2);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412290;
      uint64_t v7 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "%@: failed to update the service in the dynamic store after manager set the delegate interface",  (uint8_t *)&v6,  0xCu);
    }
  }

void sub_100027F44(uint64_t a1, void *a2, int a3, void *a4, void *a5)
{
  id v9 = a2;
  unsigned __int8 v10 = a4;
  id v11 = a5;
  uint64_t v13 = ne_log_obj(v11, v12);
  uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    uint64_t v15 = *(void **)(a1 + 32);
    uint64_t v16 = *(void *)(a1 + 40);
    uint64_t v17 = @"nil";
    if (v10) {
      uint64_t v18 = v10;
    }
    else {
      uint64_t v18 = @"nil";
    }
    if (v11) {
      uint64_t v17 = v11;
    }
    int v59 = 138413570;
    uint64_t v60 = v15;
    __int16 v61 = 2112;
    uint64_t v62 = v16;
    __int16 v63 = 1024;
    *(_DWORD *)uint64_t v64 = (_DWORD)v9;
    *(_WORD *)&v64[4] = 1024;
    *(_DWORD *)&v64[6] = a3;
    *(_WORD *)uint64_t v65 = 2112;
    *(void *)&v65[2] = v18;
    __int16 v66 = 2112;
    id v67 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "%@: VPN Slice request callback - sliceUUID %@ : context %X type %d slice-ifname %@ error %@",  (uint8_t *)&v59,  0x36u);
  }

  if (v11)
  {
    uint64_t v21 = ne_log_obj(v19, v20);
    int v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      __int16 v51 = *(void **)(a1 + 32);
      uint64_t v52 = *(void *)(a1 + 40);
      uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([v51 server]);
      uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([v53 primaryPhysicalInterface]);
      CFIndex v55 = (void *)objc_claimAutoreleasedReturnValue([v54 interfaceName]);
      int v59 = 138413058;
      uint64_t v60 = v51;
      __int16 v61 = 2112;
      uint64_t v62 = v52;
      __int16 v63 = 2112;
      *(void *)uint64_t v64 = v55;
      *(_WORD *)&v64[8] = 2112;
      *(void *)uint64_t v65 = v11;
      _os_log_error_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "%@: VPN Slice - Failed to request slice for sliceUUID %@ - fallback to default interface %@ <%@>",  (uint8_t *)&v59,  0x2Au);
    }

    __int16 v23 = *(void **)(a1 + 32);
    uint64_t v24 = *(unsigned int *)(a1 + 64);
    __int16 v26 = *(void **)(a1 + 48);
    xpc_object_t v25 = *(void **)(a1 + 56);
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v23 server]);
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v27 primaryPhysicalInterface]);
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v28 interfaceName]);
    sub_100021958(v23, v26, v24, v25, v29);

    goto LABEL_30;
  }

  uint64_t v30 = *(void *)(a1 + 32);
  if (v30)
  {
    *(_DWORD *)(v30 + 360) = a3;
    id v31 = *(void **)(a1 + 32);
    if (v10)
    {
LABEL_14:
      if (v31) {
        objc_setProperty_atomic(v31, v20, v10, 496LL);
      }
      uint64_t v32 = ne_log_obj(v31, v20);
      uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        CFArrayRef v35 = *(void **)(a1 + 32);
        uint64_t v36 = *(void *)(a1 + 40);
        if (v35) {
          id Property = objc_getProperty(*(id *)(a1 + 32), v34, 496LL, 1);
        }
        else {
          id Property = 0LL;
        }
        int v59 = 138412802;
        uint64_t v60 = v35;
        __int16 v61 = 2112;
        uint64_t v62 = v36;
        __int16 v63 = 2112;
        *(void *)uint64_t v64 = Property;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_INFO,  "%@: VPN Slice request completed - sliceUUID %@ : %@ ",  (uint8_t *)&v59,  0x20u);
      }

      uint64_t v39 = *(void **)(a1 + 32);
      if (v39) {
        id v40 = objc_getProperty(*(id *)(a1 + 32), v38, 496LL, 1);
      }
      else {
        id v40 = 0LL;
      }
      [v39 setDelegateInterfaceName:v40];
      uint64_t v42 = *(void **)(a1 + 32);
      uint64_t v43 = *(unsigned int *)(a1 + 64);
      __int16 v45 = *(void **)(a1 + 48);
      unint64_t v44 = *(void **)(a1 + 56);
      if (v42)
      {
        id v46 = objc_getProperty(v42, v41, 496LL, 1);
        __int16 v47 = v42;
        uint64_t v48 = v45;
        uint64_t v49 = v43;
        id v50 = v44;
      }

      else
      {
        __int16 v47 = 0LL;
        uint64_t v48 = v45;
        uint64_t v49 = v43;
        id v50 = v44;
        id v46 = 0LL;
      }

      sub_100021958(v47, v48, v49, v50, v46);
      goto LABEL_30;
    }
  }

  else
  {
    id v31 = 0LL;
    if (v10) {
      goto LABEL_14;
    }
  }

  if (v31)
  {
    objc_setProperty_atomic(v31, v20, *(id *)(a1 + 48), 504LL);
    uint64_t v57 = *(void *)(a1 + 32);
    if (v57)
    {
      *(_DWORD *)(v57 + 364) = *(_DWORD *)(a1 + 64);
      uint64_t v58 = *(void **)(a1 + 32);
      if (v58) {
        objc_setProperty_atomic(v58, v56, *(id *)(a1 + 56), 512LL);
      }
    }
  }

void sub_100028308(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) parentType];
  uint64_t v3 = *(void **)(a1 + 32);
  if (v2 == (id)1)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) interfaceName]);
    [v3 setDelegateInterfaceName:v4];
  }

  else
  {
    id v5 = [*(id *)(a1 + 32) tunnelKind];
    int v6 = *(void **)(a1 + 32);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 server]);
    id v8 = v7;
    if (v5 == (id)2) {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 primaryCellularInterface]);
    }
    else {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 primaryPhysicalInterface]);
    }
    unsigned __int8 v10 = v9;
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 interfaceName]);
    [v6 setDelegateInterfaceName:v11];

    sub_1000251F8(*(void **)(a1 + 32));
  }

  uint64_t IsVPN = NEVirtualInterfaceIsVPN([*(id *)(a1 + 32) virtualInterface], 1);
  int v13 = IsVPN;
  uint64_t v15 = ne_log_obj(IsVPN, v14);
  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  uint64_t v17 = v16;
  if (v13)
  {
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "Marked the virtual interface as VPN",  buf,  2u);
    }
  }

  else if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__int16 v23 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "Failed to mark the virtual interface as VPN",  v23,  2u);
  }

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) protocol]);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 identifier]);
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 UUIDString]);

  if ([*(id *)(a1 + 32) tunnelKind] == (id)2)
  {
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@-FB", v20));
    NEVirtualInterfaceSetServiceID([*(id *)(a1 + 32) virtualInterface], v21);
  }

  else
  {
    NEVirtualInterfaceSetServiceID([*(id *)(a1 + 32) virtualInterface], v20);
  }
}

uint64_t sub_100028500(uint64_t a1, uint64_t a2)
{
  if ((_DWORD)a2)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) controlSocket]);
    id v6 = [v5 fileDescriptor];
    id v7 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) name]);
    objc_msgSend( *(id *)(a1 + 32),  "setVirtualInterface:",  NEVirtualInterfaceCreateUserEthernet( kCFAllocatorDefault,  v3,  v4,  v6,  objc_msgSend(v7, "UTF8String"),  objc_msgSend(*(id *)(a1 + 40), "userEthernetController")));

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    uint64_t v8 = ne_log_obj(a1, a2);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v11 = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "Failed to create a user ethernet interface",  v11,  2u);
    }
  }

  return (*(uint64_t (**)(void, id))(*(void *)(a1 + 56) + 16))( *(void *)(a1 + 56),  [*(id *)(a1 + 32) virtualInterface]);
}

void sub_100028640(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) policySession]);
  sub_10002BE00(v3, v2);
}

uint64_t sub_100028684(uint64_t a1)
{
  uint64_t v4 = ne_log_obj(v2, v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = inputNotification2String(*(unsigned int *)(a1 + 40));
    int v9 = 138412546;
    uint64_t v10 = v6;
    __int16 v11 = 2080;
    uint64_t v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%@: Handling a %s event", (uint8_t *)&v9, 0x16u);
  }

  return sub_10007B8E8(*(void *)(a1 + 32), *(_DWORD *)(a1 + 40) == 1);
}

void sub_100028760(uint64_t a1)
{
  if ([*(id *)(a1 + 32) parentType] == (id)1) {
    return;
  }
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    id v4 = objc_getProperty(v3, v2, 496LL, 1);
    id v5 = *(void **)(a1 + 32);
    if (v4)
    {
      uint64_t v6 = v4;
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) server]);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 primaryPhysicalInterface]);
      if ([v8 type] == (id)1)
      {
        int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) server]);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 primaryPhysicalInterface]);
        __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 interfaceName]);
        uint64_t v12 = *(void **)(a1 + 40);

        id v5 = *(void **)(a1 + 32);
        if (v11 == v12)
        {
          uint64_t v14 = *(void **)(a1 + 40);
          if (v5)
          {
            id Property = objc_getProperty(*(id *)(a1 + 32), v13, 496LL, 1);
            uint64_t v16 = *(void *)(a1 + 48);
            uint64_t v17 = v5;
            uint64_t v18 = v14;
          }

          else
          {
            uint64_t v16 = *(void *)(a1 + 48);
            uint64_t v17 = 0LL;
            uint64_t v18 = *(void **)(a1 + 40);
            id Property = 0LL;
          }

          sub_100028B00(v17, v18, Property, v16);
          return;
        }
      }

      else
      {

        id v5 = *(void **)(a1 + 32);
      }
    }
  }

  else
  {
    id v5 = 0LL;
  }

  uint64_t v19 = objc_opt_class(&OBJC_CLASS___NESMVPNSession);
  if ((objc_opt_isKindOfClass(v5, v19) & 1) != 0 && [*(id *)(a1 + 32) tunnelKind] == (id)2)
  {
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) server]);
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 primaryCellularInterface]);
  }

  else
  {
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) server]);
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 primaryPhysicalInterface]);
  }

  int v22 = v21;
  id v39 = (id)objc_claimAutoreleasedReturnValue([v21 interfaceName]);

  __int16 v23 = (void *)NEVirtualInterfaceCopyDelegateInterfaceName([*(id *)(a1 + 32) virtualInterface]);
  if (([v23 isEqualToString:v39] & 1) == 0)
  {
    id v24 = v39;

    [*(id *)(a1 + 32) setDelegateInterfaceName:v24];
    __int16 v23 = v24;
  }

  xpc_object_t v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) primaryTunnelPlugin]);
  uint64_t v26 = objc_opt_class(&OBJC_CLASS___NEFlowDivertPlugin);
  if ((objc_opt_isKindOfClass(v25, v26) & 1) != 0 && sub_100016694((unsigned int *)v25))
  {
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) server]);
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v27 primaryPhysicalInterface]);
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v28 interfaceName]);
    sub_100016D18(v25, v29);
  }

  char v30 = [*(id *)(a1 + 32) proxyEnabled:*(void *)(a1 + 40)];
  uint64_t v31 = *(void *)(a1 + 48);
  sub_100021CB0(*(void **)(a1 + 32), (v31 & 4) != 0, v30, v39);
  if (([*(id *)(a1 + 40) hasPrefix:@"utun"] & 1) == 0
    && ([*(id *)(a1 + 40) hasPrefix:@"ipsec"] & 1) == 0)
  {
    if ((v31 & 4) != 0)
    {
      uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v32 VPN]);
      if ([v33 isOnDemandEnabled])
      {
      }

      else
      {
        uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
        CFArrayRef v35 = (void *)objc_claimAutoreleasedReturnValue([v34 VPN]);
        uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v35 protocol]);
        unsigned int v37 = [v36 includeAllNetworks];

        if (v37) {
          sub_100022D34(*(void **)(a1 + 32), v38);
        }
      }
    }

    sub_100028B00(*(void **)(a1 + 32), *(void **)(a1 + 40), v23, *(void *)(a1 + 48));
  }
}

void sub_100028B00(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v13 = a2;
  id v7 = a3;
  uint64_t v8 = v7;
  if (a1)
  {
    if (v7)
    {
      unsigned int v9 = [v7 isEqualToString:v13];
      char v10 = v9;
      if ((a4 & 3) == 0 && v9)
      {
        __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([a1 stateHandler]);
        [v11 handleInterfaceUnavailable:v13];
LABEL_12:

        goto LABEL_13;
      }

      if ((a4 & 3) != 0)
      {
        __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([a1 stateHandler]);
        if ((v10 & 1) != 0)
        {
          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([a1 delegateInterfaceAddress]);
          objc_msgSend( v11,  "handleInterfaceAvailable:changed:",  v13,  objc_msgSend(a1, "interface:hasIPAddress:currentFlags:", v8, v12, a4) ^ 1);

          goto LABEL_12;
        }

LABEL_11:
        [v11 handleInterfaceAvailable:v13 changed:0];
        goto LABEL_12;
      }
    }

    else if ((a4 & 3) != 0)
    {
      __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([a1 stateHandler]);
      goto LABEL_11;
    }
  }

      id v7 = 0LL;
      goto LABEL_12;
    }
  }

  return 0LL;
}
}

void sub_100028C14(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateHandler]);
  [v2 handleUserSwitch];
}

void sub_100028C5C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateHandler]);
  [v2 handleUserLogout];
}

void sub_100028CA4(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateHandler]);
  [v2 handleWakeup];
}

void sub_100028CEC(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) protocol]);
  if ([v5 disconnectOnWake])
  {
    double v2 = *(double *)(a1 + 40);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) protocol]);
    double v4 = (double)(int)[v3 disconnectOnWakeTimeout];

    if (v2 <= v4) {
      return;
    }
    [*(id *)(a1 + 32) setLastStopReason:2];
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateHandler]);
    [v5 handleStop];
  }
}

void sub_100028D98(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateHandler]);
  [v1 handleSleep];
}

id *sub_100028DC8(id *result)
{
  if (*((_DWORD *)result + 10) == 32) {
    return (id *)[result[4] invalidate];
  }
  return result;
}

void sub_100028DE0(uint64_t a1)
{
  id v14 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) policySession]);
  id v3 = *(id *)(a1 + 40);
  id v4 = v14;
  if (!v14)
  {

LABEL_5:
    uint64_t v9 = ne_log_obj(v7, v8);
    char v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      *(_DWORD *)uint64_t v16 = 138412546;
      *(void *)&v16[4] = v13;
      *(_WORD *)&v16[12] = 2080;
      *(void *)&v16[14] = "-[NESMVPNSession addDefaultDropPolicyForPluginUUIDs:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "%@:%s: Failed to add Drop Control Policies for VPN Session",  v16,  0x16u);
    }

    return;
  }

  if (v3)
  {
    id v4 = [v3 count];
    if (v4)
    {
      *(void *)uint64_t v16 = _NSConcreteStackBlock;
      *(void *)&v16[8] = 3221225472LL;
      *(void *)&v16[16] = sub_100041FE8;
      uint64_t v17 = &unk_1000BDAC8;
      id v18 = v14;
      id v5 = v3;
      id v19 = v5;
      char v6 = sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, v16);

      if ((v6 & 1) != 0) {
        return;
      }
      goto LABEL_5;
    }
  }

  uint64_t v11 = ne_log_obj(v4, v2);
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Skip, no UUIDs", buf, 2u);
  }
}

id sub_100028FCC(uint64_t a1, const char *a2)
{
  id v3 = *(void (***)(void))(a1 + 32);
  if (v3)
  {
    id Property = objc_getProperty(v3, a2, 464LL, 1);
    id v3 = *(void (***)(void))(a1 + 32);
    if (Property)
    {
      if (v3) {
        id v3 = (void (**)(void))objc_getProperty(v3, v4, 464LL, 1);
      }
      v3[2]();
      id v3 = *(void (***)(void))(a1 + 32);
      if (v3)
      {
        objc_setProperty_atomic_copy(v3, v6, 0LL, 464LL);
        id v3 = *(void (***)(void))(a1 + 32);
      }
    }
  }

  return [v3 setStatus:*(unsigned int *)(a1 + 40)];
}

void sub_100029040(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1 setConfigurationCompletionHandlerArray]);
    id v3 = [v2 count];

    if (v3)
    {
      uint64_t v6 = ne_log_obj(v4, v5);
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([a1 setConfigurationCompletionHandlerArray]);
        *(_DWORD *)buf = 138412546;
        id v39 = a1;
        __int16 v40 = 2048;
        id v41 = [v36 count];
        _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%@: Disconnected session has %lu stale completionHandler(s)",  buf,  0x16u);
      }

      +[NEDiagnosticReport logInternalError:subType:context:]( &OBJC_CLASS___NEDiagnosticReport,  "logInternalError:subType:context:",  @"SessionManager",  @"StaleConfigCompletionHandler",  0LL);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NEAgentErrorDomain",  1LL,  0LL));
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([a1 setConfigurationCompletionHandlerArray]);
      id v10 = [v9 count];

      if (v10)
      {
        *(void *)&__int128 v11 = 138412546LL;
        __int128 v37 = v11;
        while (1)
        {
          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "setConfigurationCompletionHandlerArray", v37));
          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 objectAtIndexedSubscript:0]);

          if (!v13) {
            break;
          }
          uint64_t v16 = ne_log_obj(v14, v15);
          uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            id v18 = (void *)objc_claimAutoreleasedReturnValue([a1 interfaceName]);
            id Property = objc_getProperty(v13, v19, 8LL, 1);
            id v21 = objc_retainBlock(Property);
            *(_DWORD *)buf = 138412802;
            id v39 = a1;
            __int16 v40 = 2112;
            id v41 = v18;
            __int16 v42 = 2112;
            id v43 = v21;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "%@: config request: popping handler [%@] %@",  buf,  0x20u);
          }

          id v23 = objc_getProperty(v13, v22, 8LL, 1);
          if (v23)
          {
            uint64_t v25 = ne_log_obj(v23, v24);
            uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
            {
              id v28 = objc_getProperty(v13, v27, 8LL, 1);
              id v29 = objc_retainBlock(v28);
              *(_DWORD *)buf = v37;
              id v39 = a1;
              __int16 v40 = 2112;
              id v41 = v29;
              _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "%@: config request: calling completionHandler %@",  buf,  0x16u);
            }

            uint64_t v31 = (void (**)(id, void *))objc_getProperty(v13, v30, 8LL, 1);
            v31[2](v31, v8);
          }

          uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([a1 setConfigurationCompletionHandlerArray]);
          [v32 removeObject:v13];

          uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([a1 setConfigurationCompletionHandlerArray]);
          id v34 = [v33 count];

          if (!v34) {
            goto LABEL_17;
          }
        }

        CFArrayRef v35 = (void *)objc_claimAutoreleasedReturnValue([a1 setConfigurationCompletionHandlerArray]);
        [v35 removeAllObjects];
      }

id sub_10002B004(id self, const char *a2)
{
  id v2 = self;
  if (!self) {
    return v2;
  }
  id Property = objc_getProperty(self, a2, 688LL, 1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(Property);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 controlUnit]);
  if (![v5 unsignedIntValue])
  {

    return 0LL;
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v2 configuration]);
  uint64_t v7 = objc_claimAutoreleasedReturnValue([v6 externalIdentifier]);
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    unsigned __int8 v9 = [v2 waitForPerApp];

    if ((v9 & 1) == 0) {
      goto LABEL_9;
    }
    return 0LL;
  }

LABEL_9:
  uint64_t v12 = ne_log_obj(v10, v11);
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v2 configuration]);
    id v39 = (void *)objc_claimAutoreleasedReturnValue([v38 externalIdentifier]);
    __int16 v40 = (void *)objc_claimAutoreleasedReturnValue([v2 configuration]);
    id v41 = (void *)objc_claimAutoreleasedReturnValue([v40 dnsProxy]);
    __int16 v42 = (void *)objc_claimAutoreleasedReturnValue([v41 perApp]);
    id v43 = [v42 copyCachedMachOUUIDs];
    *(_DWORD *)buf = 136315650;
    __int16 v51 = "-[NESMDNSProxySession resetPolicies]";
    __int16 v52 = 2112;
    uint64_t v53 = v39;
    __int16 v54 = 2112;
    id v55 = v43;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "%s: resetPolicies - <%@> UUIDs %@",  buf,  0x20u);
  }

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v2 policySession]);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v2 primaryTunnelPlugin]);
  id v17 = sub_100015CE0(v15, v16);
  id v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
  SEL v19 = (void *)objc_claimAutoreleasedReturnValue([v18 firstObject]);
  id v21 = objc_getProperty(v2, v20, 688LL, 1);
  SEL v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
  id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 controlUnit]);
  int v47 = [v23 unsignedIntValue];
  id v24 = (id)objc_claimAutoreleasedReturnValue([v2 server]);
  uint64_t v26 = v24;
  if (v24) {
    id v24 = objc_getProperty(v24, v25, 80LL, 1);
  }
  id v49 = v24;
  id v48 = objc_getProperty(v2, v27, 728LL, 1);
  id v28 = (void *)objc_claimAutoreleasedReturnValue([v2 configuration]);
  id v29 = (void *)objc_claimAutoreleasedReturnValue([v28 externalIdentifier]);
  if (v29)
  {
    id v46 = v18;
    uint64_t v30 = (uint64_t)v14;
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v2 configuration]);
    __int16 v45 = v15;
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v31 dnsProxy]);
    unint64_t v44 = v26;
    uint64_t v33 = v23;
    id v34 = v22;
    CFArrayRef v35 = v19;
    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v32 perApp]);
    id v2 = (id)sub_100044228(v30, v35, v47, v49, v48, v36);

    SEL v19 = v35;
    SEL v22 = v34;
    id v23 = v33;
    uint64_t v26 = v44;

    uint64_t v15 = v45;
    uint64_t v14 = (void *)v30;
    id v18 = v46;
  }

  else
  {
    id v2 = (id)sub_100044228((uint64_t)v14, v19, v47, v49, v48, 0LL);
  }

  return v2;
}

void sub_10002B38C(void *a1)
{
  if (a1)
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([a1 primaryTunnelPlugin]);

    if (v2)
    {
      uint64_t v3 = dns_configuration_copy();
      if (v3)
      {
        uint64_t v4 = v3;
        SEL v19 = a1;
        SEL v20 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        if (*(int *)(v4 + 12) >= 1)
        {
          uint64_t v5 = 0LL;
          do
          {
            uint64_t v6 = *(void *)(*(void *)(v4 + 16) + 8 * v5);
            uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
            if (*(int *)(v6 + 8) >= 1)
            {
              uint64_t v8 = 0LL;
              do
              {
                unsigned __int8 v9 = (void *)NECreateAddressString(*(void *)(*(void *)(v6 + 12) + 8 * v8));
                if (v9) {
                  -[NSMutableArray addObject:](v7, "addObject:", v9);
                }

                ++v8;
              }

              while (v8 < *(int *)(v6 + 8));
            }

            uint64_t v10 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
            int v11 = *(_DWORD *)(v6 + 24);
            if (v11 >= 1)
            {
              for (uint64_t i = 0LL; i < v11; ++i)
              {
                if (*(void *)(*(void *)(v6 + 28) + 8 * i))
                {
                  uint64_t v13 = -[NSString initWithUTF8String:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithUTF8String:",  *(void *)(*(void *)(v6 + 28) + 8 * i));
                  if (v13) {
                    -[NSMutableArray addObject:](v10, "addObject:", v13);
                  }

                  int v11 = *(_DWORD *)(v6 + 24);
                }
              }
            }

            uint64_t v14 = -[NEDNSSettings initWithServers:](objc_alloc(&OBJC_CLASS___NEDNSSettings), "initWithServers:", v7);
            if (v14)
            {
              if (*(void *)v6)
              {
                uint64_t v15 = -[NSString initWithUTF8String:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithUTF8String:",  *(void *)v6);
                -[NEDNSSettings setDomainName:](v14, "setDomainName:", v15);
              }

              -[NEDNSSettings setSearchDomains:](v14, "setSearchDomains:", v10, v19);
              -[NSMutableArray addObject:](v20, "addObject:", v14);
            }

            ++v5;
          }

          while (v5 < *(int *)(v4 + 12));
        }

        dns_configuration_free(v4);
        if (v20)
        {
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v19 primaryTunnelPlugin]);
          if (v16)
          {
            id v17 = v20;
            id v18 = (void *)objc_claimAutoreleasedReturnValue([v16 remotePluginObject]);
            [v18 setSystemDNSSettings:v17];
          }
        }
      }
    }
  }

void sub_10002B5C8(uint64_t a1, void *a2)
{
  uint64_t v4 = a2;
  if (a1)
  {
    uint64_t v5 = *(dispatch_source_s **)(a1 + 720);
    uint64_t v7 = v4;
    if (v5) {
      BOOL v6 = v5 == v4;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6) {
      dispatch_source_cancel(v5);
    }
    objc_storeStrong((id *)(a1 + 720), a2);
    uint64_t v4 = v7;
  }
}

void sub_10002B638(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = WeakRetained;
  if (WeakRetained)
  {
    id v3 = [WeakRetained status];
    if ((_DWORD)v3 == 1)
    {
      uint64_t v5 = ne_log_obj(v3, v4);
      BOOL v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 138412290;
        uint64_t v8 = v2;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%@: restarting", (uint8_t *)&v7, 0xCu);
      }

      [v2 restartSession];
    }
  }
}

void sub_10002B700(id a1)
{
  if (!mach_timebase_info(&info))
  {
    if (info.numer) {
      BOOL v1 = info.denom == 0;
    }
    else {
      BOOL v1 = 1;
    }
    if (!v1) {
      qword_1000CF740 = 1000000000 * (unint64_t)info.denom / info.numer;
    }
  }

void sub_10002B74C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && (*(_BYTE *)(v2 + 696) & 1) != 0)
  {
    uint64_t v4 = ne_log_obj(a1, a2);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v6 = *(void **)(a1 + 32);
      int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 configuration]);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 name]);
      int v18 = 138412546;
      SEL v19 = v6;
      __int16 v20 = 2112;
      id v21 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%@: Re-setting policies because the installed apps or configuration changed for %@",  (uint8_t *)&v18,  0x16u);
    }

    id v10 = sub_10002B004(*(id *)(a1 + 32), v9);
    if ((v10 & 1) == 0)
    {
      uint64_t v12 = ne_log_obj(v10, v11);
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = *(void **)(a1 + 32);
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 configuration]);
        id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 name]);
        int v18 = 138412546;
        SEL v19 = v15;
        __int16 v20 = 2112;
        id v21 = v17;
        _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "%@: failed to update the DNSProxy policies after installed applications or configuration changed for %@",  (uint8_t *)&v18,  0x16u);
      }

      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateHandler]);
      [v14 handleStop];
    }
  }

void sub_10002B8F4(uint64_t a1)
{
}

uint64_t sub_10002BC80(uint64_t result)
{
  if (result)
  {
    v1[0] = _NSConcreteStackBlock;
    v1[1] = 3221225472LL;
    v1[2] = sub_10002E020;
    v1[3] = &unk_1000BDAA0;
    v1[4] = result;
    return sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, v1);
  }

  return result;
}

uint64_t sub_10002BCE0(uint64_t result)
{
  if (result)
  {
    v1[0] = _NSConcreteStackBlock;
    v1[1] = 3221225472LL;
    v1[2] = sub_10002DC74;
    v1[3] = &unk_1000BDAA0;
    v1[4] = result;
    return sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, v1);
  }

  return result;
}

uint64_t sub_10002BD40(uint64_t result)
{
  if (result)
  {
    v1[0] = _NSConcreteStackBlock;
    v1[1] = 3221225472LL;
    v1[2] = sub_10002DA94;
    v1[3] = &unk_1000BDAA0;
    v1[4] = result;
    return sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, v1);
  }

  return result;
}

uint64_t sub_10002BDA0(uint64_t result)
{
  if (result)
  {
    v1[0] = _NSConcreteStackBlock;
    v1[1] = 3221225472LL;
    v1[2] = sub_10002D8B4;
    v1[3] = &unk_1000BDAA0;
    v1[4] = result;
    return sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, v1);
  }

  return result;
}

id sub_10002BE00(id result, const char *a2)
{
  if (result)
  {
    id v2 = result;
    id result = objc_msgSend(objc_getProperty(result, a2, 104, 1), "count");
    if (result)
    {
      v3[0] = _NSConcreteStackBlock;
      v3[1] = 3221225472LL;
      v3[2] = sub_10002D7A4;
      v3[3] = &unk_1000BDAA0;
      v3[4] = v2;
      return (id)sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, v3);
    }
  }

  return result;
}

uint64_t sub_10002BE7C(uint64_t result)
{
  if (result)
  {
    v1[0] = _NSConcreteStackBlock;
    v1[1] = 3221225472LL;
    v1[2] = sub_10002D46C;
    v1[3] = &unk_1000BDAA0;
    v1[4] = result;
    return sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, v1);
  }

  return result;
}

id sub_10002BEDC(id result, const char *a2)
{
  if (result)
  {
    id v2 = result;
    id result = objc_msgSend(objc_getProperty(result, a2, 136, 1), "count");
    if (result)
    {
      uint64_t v3 = ne_log_large_obj(result);
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        id Property = objc_getProperty(v2, v5, 136LL, 1);
        _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "DNS policy IDs to be removed: %@",  buf,  0xCu);
      }

      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472LL;
      v6[2] = sub_10002D400;
      v6[3] = &unk_1000BDAA0;
      void v6[4] = v2;
      return (id)sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, v6);
    }
  }

  return result;
}

uint64_t sub_10002BFE8(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  objc_opt_self(a1);
  if (qword_1000CFBC0 != -1) {
    dispatch_once(&qword_1000CFBC0, &stru_1000BDA78);
  }
  if (qword_1000CFBB8)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1000CFBB0);
    uint64_t v4 = v3[2](v3, qword_1000CFBB8);
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1000CFBB0);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  return v4;
}

void sub_10002C08C(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    if (v3)
    {
      id v7 = v3;
      id v5 = objc_msgSend(objc_getProperty(a1, v4, 168, 1), "objectForKeyedSubscript:", v3);
      BOOL v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

      id v3 = v7;
      if (v6)
      {
        v8[0] = _NSConcreteStackBlock;
        v8[1] = 3221225472LL;
        _DWORD v8[2] = sub_10002C9A4;
        v8[3] = &unk_1000BDAC8;
        id v9 = v7;
        id v10 = a1;
        sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, v8);

        id v3 = v7;
      }
    }
  }
}

void sub_10002C144(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    if (v3)
    {
      id v7 = v3;
      id v5 = objc_msgSend(objc_getProperty(a1, v4, 176, 1), "objectForKeyedSubscript:", v3);
      BOOL v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

      id v3 = v7;
      if (v6)
      {
        v8[0] = _NSConcreteStackBlock;
        v8[1] = 3221225472LL;
        _DWORD v8[2] = sub_10002C858;
        v8[3] = &unk_1000BDAC8;
        id v9 = v7;
        id v10 = a1;
        sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, v8);

        id v3 = v7;
      }
    }
  }
}

void sub_10002C1FC(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    if (v3)
    {
      id v7 = v3;
      id v5 = objc_msgSend(objc_getProperty(a1, v4, 160, 1), "objectForKeyedSubscript:", v3);
      BOOL v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

      id v3 = v7;
      if (v6)
      {
        v8[0] = _NSConcreteStackBlock;
        v8[1] = 3221225472LL;
        _DWORD v8[2] = sub_10002C70C;
        v8[3] = &unk_1000BDAC8;
        id v9 = v7;
        id v10 = a1;
        sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, v8);

        id v3 = v7;
      }
    }
  }
}

void sub_10002C2B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v5[1] = 3221225472LL;
    v5[2] = sub_10002C338;
    v5[3] = &unk_1000BDAC8;
    void v5[4] = a1;
    id v4 = v3;
    v5[0] = _NSConcreteStackBlock;
    id v6 = v3;
    sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, v5);

    id v3 = v4;
  }
}

void *sub_10002C338(uint64_t a1, void *a2)
{
  return sub_10002C348(*(void **)(a1 + 32), *(void **)(a1 + 40), a2);
}

void *sub_10002C348(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v7 = a3;
  uint64_t v8 = 0LL;
  if (a1)
  {
    if (v5)
    {
      id v9 = objc_msgSend(objc_getProperty(a1, v6, 216, 1), "objectForKeyedSubscript:", v5);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v9);

      if (v8)
      {
        uint64_t v12 = ne_log_obj(v10, v11);
        uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          id v19 = objc_msgSend(objc_getProperty(a1, v14, 216, 1), "objectForKeyedSubscript:", v5);
          __int16 v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
          int v21 = 138412546;
          id v22 = v5;
          __int16 v23 = 2112;
          id v24 = v20;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "Policy IDs to be removed for %@: %@",  (uint8_t *)&v21,  0x16u);
        }

        id v16 = objc_msgSend(objc_getProperty(a1, v15, 216, 1), "objectForKeyedSubscript:", v5);
        id v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
        if (sub_10002C4C8(v7, v17)) {
          uint64_t v8 = (void *)sub_10002C620(v7);
        }
        else {
          uint64_t v8 = 0LL;
        }
      }
    }
  }

  return v8;
}

BOOL sub_10002C4C8(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    os_unfair_lock_assert_owner((os_unfair_lock_t)&unk_1000CFBB0);
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    id v4 = v3;
    id v5 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v5)
    {
      id v7 = v5;
      uint64_t v8 = *(void *)v14;
      do
      {
        id v9 = 0LL;
        do
        {
          if (*(void *)v14 != v8) {
            objc_enumerationMutation(v4);
          }
          uint64_t v10 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)v9);
          id v11 = objc_getProperty(a1, v6, 16LL, 1);
          objc_msgSend(v11, "removePolicyWithID:", objc_msgSend(v10, "unsignedIntegerValue", (void)v13));

          id v9 = (char *)v9 + 1;
        }

        while (v7 != v9);
        id v7 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }

      while (v7);
    }

    [v4 removeAllObjects];
  }

  return a1 != 0LL;
}

uint64_t sub_10002C620(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  os_unfair_lock_assert_owner((os_unfair_lock_t)&unk_1000CFBB0);
  id v3 = objc_msgSend(objc_getProperty(a1, v2, 16, 1), "apply");
  if ((v3 & 1) == 0)
  {
    uint64_t v12 = ne_log_obj(v3, v4);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      uint64_t v10 = "Failed to apply policies";
      id v11 = buf;
      goto LABEL_11;
    }

uint64_t sub_10002C70C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = ne_log_large_obj(v3);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    id Property = *(id *)(a1 + 40);
    if (Property) {
      id Property = objc_getProperty(Property, v6, 160LL, 1);
    }
    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([Property objectForKeyedSubscript:*(void *)(a1 + 32)]);
    int v15 = 138412546;
    uint64_t v16 = v13;
    __int16 v17 = 2112;
    int v18 = v14;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "drop control Policy IDs to be removed for %@: %@",  (uint8_t *)&v15,  0x16u);
  }

  id v8 = *(id *)(a1 + 40);
  if (v8) {
    id v8 = objc_getProperty(v8, v7, 160LL, 1);
  }
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:*(void *)(a1 + 32)]);
  if (sub_10002C4C8(v3, v9)) {
    uint64_t v10 = sub_10002C620(v3);
  }
  else {
    uint64_t v10 = 0LL;
  }

  return v10;
}

uint64_t sub_10002C858(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = ne_log_obj(v3, v4);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v14 = *(void *)(a1 + 32);
    id Property = *(id *)(a1 + 40);
    if (Property) {
      id Property = objc_getProperty(Property, v7, 176LL, 1);
    }
    int v15 = (void *)objc_claimAutoreleasedReturnValue([Property objectForKeyedSubscript:*(void *)(a1 + 32)]);
    int v16 = 138412546;
    uint64_t v17 = v14;
    __int16 v18 = 2112;
    id v19 = v15;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Policy IDs to be removed for %@: %@",  (uint8_t *)&v16,  0x16u);
  }

  id v9 = *(id *)(a1 + 40);
  if (v9) {
    id v9 = objc_getProperty(v9, v8, 176LL, 1);
  }
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:*(void *)(a1 + 32)]);
  if (sub_10002C4C8(v3, v10)) {
    uint64_t v11 = sub_10002C620(v3);
  }
  else {
    uint64_t v11 = 0LL;
  }

  return v11;
}

uint64_t sub_10002C9A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = ne_log_large_obj(v3);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    id Property = *(id *)(a1 + 40);
    if (Property) {
      id Property = objc_getProperty(Property, v6, 168LL, 1);
    }
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([Property objectForKeyedSubscript:*(void *)(a1 + 32)]);
    int v15 = 138412546;
    uint64_t v16 = v13;
    __int16 v17 = 2112;
    __int16 v18 = v14;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "control Policy IDs to be removed for %@: %@",  (uint8_t *)&v15,  0x16u);
  }

  id v8 = *(id *)(a1 + 40);
  if (v8) {
    id v8 = objc_getProperty(v8, v7, 168LL, 1);
  }
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:*(void *)(a1 + 32)]);
  if (sub_10002C4C8(v3, v9)) {
    uint64_t v10 = sub_10002C620(v3);
  }
  else {
    uint64_t v10 = 0LL;
  }

  return v10;
}

void sub_10002CAF0(id a1)
{
  BOOL v1 = objc_alloc(&OBJC_CLASS___NESMPolicyMasterSession);
  if (!v1)
  {
    id v39 = 0LL;
    id v2 = 0LL;
    goto LABEL_8;
  }

  v42.receiver = v1;
  v42.super_class = (Class)&OBJC_CLASS___NESMPolicyMasterSession;
  id v2 = objc_msgSendSuper2(&v42, "init");
  if (v2)
  {
    id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v4 = (void *)*((void *)v2 + 4);
    *((void *)v2 + 4) = v3;

    uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    id v6 = (void *)*((void *)v2 + 5);
    *((void *)v2 + 5) = v5;

    uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    id v8 = (void *)*((void *)v2 + 6);
    *((void *)v2 + 6) = v7;

    id v9 = -[NEPolicySession initWithSessionName:]( objc_alloc(&OBJC_CLASS___NEPolicySession),  "initWithSessionName:",  @"MasterSession");
    uint64_t v10 = (void *)*((void *)v2 + 2);
    *((void *)v2 + 2) = v9;

    uint64_t v11 = (void *)*((void *)v2 + 2);
    if (!v11
      || ([v11 lockSessionToCurrentProcess],
          [*((id *)v2 + 2) setPriority:200],
          uint64_t v12 = -[NEPolicySession initWithSessionName:]( objc_alloc(&OBJC_CLASS___NEPolicySession),  "initWithSessionName:",  @"LowPrioritySession"),  v13 = (void *)*((void *)v2 + 3),  *((void *)v2 + 3) = v12,  v13,  (v14 = (void *)*((void *)v2 + 3)) == 0LL))
    {
      id v39 = 0LL;
      goto LABEL_8;
    }

    [v14 lockSessionToCurrentProcess];
    [*((id *)v2 + 3) setPriority:500];
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1000CFBB0);
    id v41 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", 40LL));
    id v15 = objc_alloc(&OBJC_CLASS___NEPolicy);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
    __int16 v45 = v16;
    __int16 v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v45, 1LL));
    id v18 = [v15 initWithOrder:15 result:v41 conditions:v17];
    id Property = objc_getProperty(v2, v19, 40LL, 1);
    sub_10002CECC((BOOL)v2, v18, Property);

    int v21 = -[NSUUID initWithUUIDBytes:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDBytes:",  &ne_privacy_proxy_netagent_id);
    id v22 = -[NSUUID initWithUUIDBytes:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDBytes:",  &ne_privacy_dns_netagent_id);
    __int16 v23 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult removeNetworkAgentUUID:]( &OBJC_CLASS___NEPolicyResult,  "removeNetworkAgentUUID:",  v21));
    id v24 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult removeNetworkAgentUUID:]( &OBJC_CLASS___NEPolicyResult,  "removeNetworkAgentUUID:",  v22));
    id v25 = objc_alloc(&OBJC_CLASS___NEPolicy);
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
    unint64_t v44 = v26;
    SEL v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v44, 1LL));
    id v28 = [v25 initWithOrder:25 result:v23 conditions:v27];
    id v30 = objc_getProperty(v2, v29, 40LL, 1);
    sub_10002CECC((BOOL)v2, v28, v30);

    id v31 = objc_alloc(&OBJC_CLASS___NEPolicy);
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
    id v43 = v32;
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v43, 1LL));
    id v34 = [v31 initWithOrder:35 result:v24 conditions:v33];
    id v36 = objc_getProperty(v2, v35, 40LL, 1);
    sub_10002CECC((BOOL)v2, v34, v36);

    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1000CFBB0);
    uint64_t v37 = objc_claimAutoreleasedReturnValue(+[NSPointerArray weakObjectsPointerArray](&OBJC_CLASS___NSPointerArray, "weakObjectsPointerArray"));
    uint64_t v38 = (void *)*((void *)v2 + 7);
    *((void *)v2 + 7) = v37;
  }

  id v39 = v2;
  id v2 = v39;
LABEL_8:

  __int16 v40 = (void *)qword_1000CFBB8;
  qword_1000CFBB8 = (uint64_t)v39;
}

BOOL sub_10002CECC(BOOL a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    os_unfair_lock_assert_owner((os_unfair_lock_t)&unk_1000CFBB0);
    id v8 = objc_msgSend(objc_getProperty((id)a1, v7, 24, 1), "addPolicy:storeLocally:", v5, 0);
    a1 = v8 != 0LL;
    uint64_t is_debug_logging_enabled = nelog_is_debug_logging_enabled();
    int v11 = is_debug_logging_enabled;
    if (v8)
    {
      if ((_DWORD)is_debug_logging_enabled)
      {
        uint64_t v12 = ne_log_obj(is_debug_logging_enabled, v10);
        uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          int v19 = 134218242;
          id v20 = v8;
          __int16 v21 = 2112;
          id v22 = v5;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "Added policy ID %lu to Low priority: %@",  (uint8_t *)&v19,  0x16u);
        }
      }

      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v8));
      [v6 addObject:v14];
    }

    else
    {
      uint64_t v15 = ne_log_obj(is_debug_logging_enabled, v10);
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      BOOL v16 = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
      if (v11)
      {
        if (v16)
        {
          int v19 = 138412290;
          id v20 = v5;
          _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Failed to add policy to Low priority: %@",  (uint8_t *)&v19,  0xCu);
        }
      }

      else if (v16)
      {
        id v18 = (void *)objc_claimAutoreleasedReturnValue([v5 descriptionWithIndent:0 options:2]);
        int v19 = 138412290;
        id v20 = v18;
        _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Failed to add policy to Low priority: %@",  (uint8_t *)&v19,  0xCu);
      }
    }
  }

  return a1;
}

BOOL sub_10002D0CC(id a1, NESMPolicyMasterSession *a2)
{
  id Property = a2;
  uint64_t v4 = Property;
  if (Property) {
    id Property = (NESMPolicyMasterSession *)objc_getProperty(Property, v3, 48LL, 1);
  }
  if (-[NESMPolicyMasterSession count](Property, "count") && v4)
  {
    uint64_t is_debug_logging_enabled = nelog_is_debug_logging_enabled();
    if ((_DWORD)is_debug_logging_enabled)
    {
      uint64_t v7 = ne_log_obj(is_debug_logging_enabled, v6);
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)id v36 = 138412802;
        uint64_t v37 = v4;
        __int16 v38 = 2080;
        id v39 = "-[NESMPolicyMasterSession removeAllDomainTries]";
        __int16 v40 = 2112;
        id v41 = objc_getProperty(v4, v9, 48LL, 1);
        _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "%@: %s - deleting all IDs %@",  v36,  0x20u);
      }
    }

    os_unfair_lock_assert_owner((os_unfair_lock_t)&unk_1000CFBB0);
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    id v11 = objc_msgSend(objc_getProperty(v4, v10, 48, 1), "allValues");
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    id v13 = [v12 countByEnumeratingWithState:&v32 objects:v36 count:16];
    if (v13)
    {
      id v15 = v13;
      uint64_t v16 = *(void *)v33;
      *(void *)&__int128 v14 = 138413058LL;
      __int128 v31 = v14;
      do
      {
        __int16 v17 = 0LL;
        do
        {
          if (*(void *)v33 != v16) {
            objc_enumerationMutation(v12);
          }
          id v18 = objc_msgSend(*(id *)(*((void *)&v32 + 1) + 8 * (void)v17), "integerValue", v31);
          os_unfair_lock_assert_owner((os_unfair_lock_t)&unk_1000CFBB0);
          id v20 = objc_msgSend(objc_getProperty(v4, v19, 16, 1), "removeDomainTrieWithID:", v18);
          if ((v20 & 1) != 0)
          {
            uint64_t v22 = nelog_is_debug_logging_enabled();
            if (!(_DWORD)v22) {
              goto LABEL_21;
            }
            uint64_t v24 = ne_log_obj(v22, v23);
            id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
            {
              id v27 = objc_getProperty(v4, v26, 48LL, 1);
              *(_DWORD *)buf = v31;
              id v43 = v4;
              __int16 v44 = 2080;
              __int16 v45 = "-[NESMPolicyMasterSession removeDomainTrieWithID:ids:]";
              __int16 v46 = 2048;
              id v47 = v18;
              __int16 v48 = 2112;
              id v49 = v27;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "%@: %s - Deleted domain trie - ID %lu %@",  buf,  0x2Au);
            }
          }

          else
          {
            uint64_t v28 = ne_log_obj(v20, v21);
            id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412802;
              id v43 = v4;
              __int16 v44 = 2080;
              __int16 v45 = "-[NESMPolicyMasterSession removeDomainTrieWithID:ids:]";
              __int16 v46 = 2048;
              id v47 = v18;
              _os_log_error_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "%@: %s - Failed to delete domain trie - ID %lu",  buf,  0x20u);
            }
          }

LABEL_21:
          __int16 v17 = (char *)v17 + 1;
        }

        while (v15 != v17);
        id v15 = [v12 countByEnumeratingWithState:&v32 objects:v36 count:16];
      }

      while (v15);
    }

    objc_msgSend(objc_getProperty(v4, v29, 48, 1), "removeAllObjects");
  }

  return 1;
}

uint64_t sub_10002D400(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v5 = *(void **)(a1 + 32);
  if (v5) {
    id Property = objc_getProperty(v5, v3, 136LL, 1);
  }
  else {
    id Property = 0LL;
  }
  if (sub_10002C4C8(v4, Property)) {
    uint64_t v7 = sub_10002C620(v4);
  }
  else {
    uint64_t v7 = 0LL;
  }

  return v7;
}

uint64_t sub_10002D46C(uint64_t a1, void *a2)
{
  id v4 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 112LL, 1);
  }
  id v6 = [Property count];
  id v8 = v6;
  if (v6)
  {
    uint64_t v9 = ne_log_large_obj(v6);
    SEL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      id v25 = *(id *)(a1 + 32);
      if (v25) {
        id v25 = objc_getProperty(v25, v11, 112LL, 1);
      }
      int v27 = 138412290;
      id v28 = v25;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "Skip policy IDs to be removed: %@",  (uint8_t *)&v27,  0xCu);
    }

    id v13 = *(void **)(a1 + 32);
    if (v13) {
      id v14 = objc_getProperty(v13, v12, 112LL, 1);
    }
    else {
      id v14 = 0LL;
    }
    sub_10002C4C8(v4, v14);
  }

  id v15 = *(id *)(a1 + 32);
  if (v15) {
    id v15 = objc_getProperty(v15, v7, 120LL, 1);
  }
  id v16 = [v15 count];
  if (v16)
  {
    uint64_t v17 = ne_log_large_obj(v16);
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      id v26 = *(id *)(a1 + 32);
      if (v26) {
        id v26 = objc_getProperty(v26, v19, 120LL, 1);
      }
      int v27 = 138412290;
      id v28 = v26;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "Low skip policy IDs to be removed: %@",  (uint8_t *)&v27,  0xCu);
    }

    uint64_t v21 = *(void **)(a1 + 32);
    if (v21) {
      id v22 = objc_getProperty(v21, v20, 120LL, 1);
    }
    else {
      id v22 = 0LL;
    }
    sub_10002D64C(v4, v22);
  }

  else if (!v8)
  {
    uint64_t v23 = 1LL;
    goto LABEL_17;
  }

  uint64_t v23 = sub_10002C620(v4);
LABEL_17:

  return v23;
}

BOOL sub_10002D64C(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    os_unfair_lock_assert_owner((os_unfair_lock_t)&unk_1000CFBB0);
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    id v4 = v3;
    id v5 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v5)
    {
      id v7 = v5;
      uint64_t v8 = *(void *)v14;
      do
      {
        uint64_t v9 = 0LL;
        do
        {
          if (*(void *)v14 != v8) {
            objc_enumerationMutation(v4);
          }
          SEL v10 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)v9);
          id v11 = objc_getProperty(a1, v6, 24LL, 1);
          objc_msgSend(v11, "removePolicyWithID:", objc_msgSend(v10, "unsignedIntegerValue", (void)v13));

          uint64_t v9 = (char *)v9 + 1;
        }

        while (v7 != v9);
        id v7 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }

      while (v7);
    }

    [v4 removeAllObjects];
  }

  return a1 != 0LL;
}

uint64_t sub_10002D7A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = ne_log_large_obj(v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v6, 104LL, 1);
    }
    int v13 = 138412290;
    id v14 = Property;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "drop control Policy IDs to be removed: %@",  (uint8_t *)&v13,  0xCu);
  }

  uint64_t v8 = *(void **)(a1 + 32);
  if (v8) {
    id v9 = objc_getProperty(v8, v7, 104LL, 1);
  }
  else {
    id v9 = 0LL;
  }
  if (sub_10002C4C8(v3, v9)) {
    uint64_t v10 = sub_10002C620(v3);
  }
  else {
    uint64_t v10 = 0LL;
  }

  return v10;
}

uint64_t sub_10002D8B4(uint64_t a1, void *a2)
{
  id v4 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 88LL, 1);
  }
  id v7 = [Property count];
  if (v7)
  {
    uint64_t v8 = ne_log_large_obj();
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      id v23 = *(id *)(a1 + 32);
      if (v23) {
        id v23 = objc_getProperty(v23, v10, 88LL, 1);
      }
      int v25 = 138412290;
      id v26 = v23;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "On Demand Policy IDs to be removed for %@",  (uint8_t *)&v25,  0xCu);
    }

    uint64_t v12 = *(void **)(a1 + 32);
    if (v12) {
      id v13 = objc_getProperty(v12, v11, 88LL, 1);
    }
    else {
      id v13 = 0LL;
    }
    sub_10002C4C8(v4, v13);
  }

  id v14 = *(id *)(a1 + 32);
  if (v14) {
    id v14 = objc_getProperty(v14, v6, 96LL, 1);
  }
  if ([v14 count])
  {
    uint64_t v15 = ne_log_large_obj();
    __int128 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      id v24 = *(id *)(a1 + 32);
      if (v24) {
        id v24 = objc_getProperty(v24, v17, 96LL, 1);
      }
      int v25 = 138412290;
      id v26 = v24;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "Low On Demand Policy IDs to be removed for %@",  (uint8_t *)&v25,  0xCu);
    }

    SEL v19 = *(void **)(a1 + 32);
    if (v19) {
      id v20 = objc_getProperty(v19, v18, 96LL, 1);
    }
    else {
      id v20 = 0LL;
    }
    sub_10002D64C(v4, v20);
  }

  else if (!v7)
  {
    uint64_t v21 = 1LL;
    goto LABEL_17;
  }

  uint64_t v21 = sub_10002C620(v4);
LABEL_17:

  return v21;
}

uint64_t sub_10002DA94(uint64_t a1, void *a2)
{
  id v4 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 64LL, 1);
  }
  id v6 = [Property count];
  id v8 = v6;
  if (v6)
  {
    uint64_t v9 = ne_log_large_obj(v6);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      id v25 = *(id *)(a1 + 32);
      if (v25) {
        id v25 = objc_getProperty(v25, v11, 64LL, 1);
      }
      int v27 = 138412290;
      id v28 = v25;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "Control Policy IDs to be removed: %@",  (uint8_t *)&v27,  0xCu);
    }

    id v13 = *(void **)(a1 + 32);
    if (v13) {
      id v14 = objc_getProperty(v13, v12, 64LL, 1);
    }
    else {
      id v14 = 0LL;
    }
    sub_10002C4C8(v4, v14);
  }

  id v15 = *(id *)(a1 + 32);
  if (v15) {
    id v15 = objc_getProperty(v15, v7, 72LL, 1);
  }
  id v16 = [v15 count];
  if (v16)
  {
    uint64_t v17 = ne_log_large_obj(v16);
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      id v26 = *(id *)(a1 + 32);
      if (v26) {
        id v26 = objc_getProperty(v26, v19, 72LL, 1);
      }
      int v27 = 138412290;
      id v28 = v26;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "Low control Policy IDs to be removed: %@",  (uint8_t *)&v27,  0xCu);
    }

    uint64_t v21 = *(void **)(a1 + 32);
    if (v21) {
      id v22 = objc_getProperty(v21, v20, 72LL, 1);
    }
    else {
      id v22 = 0LL;
    }
    sub_10002D64C(v4, v22);
  }

  else if (!v8)
  {
    uint64_t v23 = 1LL;
    goto LABEL_17;
  }

  uint64_t v23 = sub_10002C620(v4);
LABEL_17:

  return v23;
}

uint64_t sub_10002DC74(uint64_t a1, void *a2)
{
  id v4 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 48LL, 1);
  }
  id v7 = [Property count];
  if (v7)
  {
    uint64_t v8 = ne_log_large_obj();
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      id v21 = *(id *)(a1 + 32);
      if (v21) {
        id v21 = objc_getProperty(v21, v10, 48LL, 1);
      }
      int v23 = 138412290;
      id v24 = v21;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "Policy IDs to be removed: %@",  (uint8_t *)&v23,  0xCu);
    }

    id v11 = *(id *)(a1 + 32);
    if (v4)
    {
      sub_10002DE64((uint64_t)v4, v11, 0);
      id v11 = *(id *)(a1 + 32);
    }

    if (v11) {
      id v11 = objc_getProperty(v11, (SEL)v11, 48LL, 1);
    }
    sub_10002C4C8(v4, v11);
  }

  id v12 = *(id *)(a1 + 32);
  if (v12) {
    id v12 = objc_getProperty(v12, v6, 56LL, 1);
  }
  if ([v12 count])
  {
    uint64_t v13 = ne_log_large_obj();
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      id v22 = *(id *)(a1 + 32);
      if (v22) {
        id v22 = objc_getProperty(v22, v15, 56LL, 1);
      }
      int v23 = 138412290;
      id v24 = v22;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "Low Policy IDs to be removed: %@",  (uint8_t *)&v23,  0xCu);
    }

    uint64_t v17 = *(void **)(a1 + 32);
    if (v17) {
      id v18 = objc_getProperty(v17, v16, 56LL, 1);
    }
    else {
      id v18 = 0LL;
    }
    sub_10002D64C(v4, v18);
  }

  else if (!v7)
  {
    uint64_t v19 = 1LL;
    goto LABEL_19;
  }

  uint64_t v19 = sub_10002C620(v4);
LABEL_19:

  return v19;
}

void sub_10002DE64(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  os_unfair_lock_assert_owner((os_unfair_lock_t)&unk_1000CFBB0);
  [*(id *)(a1 + 56) compact];
  if (![*(id *)(a1 + 56) count])
  {
LABEL_5:
    if ((a3 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_6;
  }

  uint64_t v6 = 0LL;
  while (1)
  {
    id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) pointerAtIndex:v6]);

    if (v7 == v5) {
      break;
    }
  }

  if ((v6 != 0x7FFFFFFFFFFFFFFFLL) != a3)
  {
    if (!a3)
    {
      [*(id *)(a1 + 56) removePointerAtIndex:v6];
      if ([*(id *)(a1 + 56) count]) {
        goto LABEL_15;
      }
      int v8 = 1;
LABEL_8:
      int v16 = v8;
      uint64_t v9 = sysctlbyname("net.necp.pass_loopback", 0LL, 0LL, &v16, 4uLL);
      if ((_DWORD)v9)
      {
        uint64_t v11 = ne_log_obj(v9, v10);
        id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          int v13 = v16;
          id v14 = __error();
          id v15 = strerror(*v14);
          *(_DWORD *)buf = 67109378;
          int v18 = v13;
          __int16 v19 = 2080;
          id v20 = v15;
          _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "Failed to set the loopback pass mode to %u: %s",  buf,  0x12u);
        }
      }

      goto LABEL_15;
    }

uint64_t sub_10002E020(uint64_t a1, void *a2)
{
  id v4 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 184LL, 1);
  }
  id v6 = [Property count];
  BOOL v8 = v6 != 0LL;
  if (v6)
  {
    __int128 v67 = 0u;
    __int128 v68 = 0u;
    __int128 v65 = 0u;
    __int128 v66 = 0u;
    id v9 = *(id *)(a1 + 32);
    if (v9) {
      id v9 = objc_getProperty(v9, v7, 184LL, 1);
    }
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 allKeys]);
    id v11 = [v10 countByEnumeratingWithState:&v65 objects:v71 count:16];
    if (v11)
    {
      id v13 = v11;
      uint64_t v14 = *(void *)v66;
      do
      {
        for (uint64_t i = 0LL; i != v13; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v66 != v14) {
            objc_enumerationMutation(v10);
          }
          uint64_t v16 = *(void *)(*((void *)&v65 + 1) + 8LL * (void)i);
          id v17 = *(id *)(a1 + 32);
          if (v17) {
            id v17 = objc_getProperty(v17, v12, 184LL, 1);
          }
          int v18 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:v16]);
          sub_10002C4C8(v4, v18);
        }

        id v13 = [v10 countByEnumeratingWithState:&v65 objects:v71 count:16];
      }

      while (v13);
    }

    id v20 = *(id *)(a1 + 32);
    if (v20) {
      id v20 = objc_getProperty(v20, v19, 184LL, 1);
    }
    [v20 removeAllObjects];
  }

  id v21 = *(id *)(a1 + 32);
  if (v21) {
    id v21 = objc_getProperty(v21, v7, 192LL, 1);
  }
  if ([v21 count])
  {
    __int128 v63 = 0u;
    __int128 v64 = 0u;
    __int128 v61 = 0u;
    __int128 v62 = 0u;
    id v23 = *(id *)(a1 + 32);
    if (v23) {
      id v23 = objc_getProperty(v23, v22, 192LL, 1);
    }
    id v24 = (void *)objc_claimAutoreleasedReturnValue([v23 allKeys]);
    id v25 = [v24 countByEnumeratingWithState:&v61 objects:v70 count:16];
    if (v25)
    {
      id v27 = v25;
      uint64_t v28 = *(void *)v62;
      do
      {
        for (j = 0LL; j != v27; j = (char *)j + 1)
        {
          if (*(void *)v62 != v28) {
            objc_enumerationMutation(v24);
          }
          uint64_t v30 = *(void *)(*((void *)&v61 + 1) + 8LL * (void)j);
          id v31 = *(id *)(a1 + 32);
          if (v31) {
            id v31 = objc_getProperty(v31, v26, 192LL, 1);
          }
          __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([v31 objectForKeyedSubscript:v30]);
          sub_10002C4C8(v4, v32);
        }

        id v27 = [v24 countByEnumeratingWithState:&v61 objects:v70 count:16];
      }

      while (v27);
    }

    id v34 = *(id *)(a1 + 32);
    if (v34) {
      id v34 = objc_getProperty(v34, v33, 192LL, 1);
    }
    [v34 removeAllObjects];
    BOOL v8 = 1;
  }

  id v35 = *(id *)(a1 + 32);
  if (v35) {
    id v35 = objc_getProperty(v35, v22, 200LL, 1);
  }
  if ([v35 count])
  {
    __int128 v59 = 0u;
    __int128 v60 = 0u;
    __int128 v57 = 0u;
    __int128 v58 = 0u;
    id v37 = *(id *)(a1 + 32);
    if (v37) {
      id v37 = objc_getProperty(v37, v36, 200LL, 1);
    }
    __int16 v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "allKeys", (void)v57));
    id v39 = [v38 countByEnumeratingWithState:&v57 objects:v69 count:16];
    if (v39)
    {
      id v41 = v39;
      uint64_t v42 = *(void *)v58;
      do
      {
        for (k = 0LL; k != v41; k = (char *)k + 1)
        {
          if (*(void *)v58 != v42) {
            objc_enumerationMutation(v38);
          }
          uint64_t v44 = *(void *)(*((void *)&v57 + 1) + 8LL * (void)k);
          id v45 = *(id *)(a1 + 32);
          if (v45) {
            id v45 = objc_getProperty(v45, v40, 200LL, 1);
          }
          __int16 v46 = (void *)objc_claimAutoreleasedReturnValue([v45 objectForKeyedSubscript:v44]);
          sub_10002C4C8(v4, v46);
        }

        id v41 = [v38 countByEnumeratingWithState:&v57 objects:v69 count:16];
      }

      while (v41);
    }

    id v48 = *(id *)(a1 + 32);
    if (v48) {
      id v48 = objc_getProperty(v48, v47, 200LL, 1);
    }
    [v48 removeAllObjects];
    BOOL v8 = 1;
  }

  id v49 = *(id *)(a1 + 32);
  if (v49) {
    id v49 = objc_getProperty(v49, v36, 208LL, 1);
  }
  [v49 removeAllObjects];
  id v51 = *(id *)(a1 + 32);
  if (v51) {
    id v51 = objc_getProperty(v51, v50, 48LL, 1);
  }
  if ([v51 count])
  {
    uint64_t v53 = *(void **)(a1 + 32);
    if (v53) {
      id v54 = objc_getProperty(v53, v52, 48LL, 1);
    }
    else {
      id v54 = 0LL;
    }
    sub_10002C4C8(v4, v54);
  }

  else if (!v8)
  {
    uint64_t v55 = 1LL;
    goto LABEL_62;
  }

  uint64_t v55 = sub_10002C620(v4);
LABEL_62:

  return v55;
}

void sub_10002E434(BOOL a1, void *a2, void *a3)
{
  if (a1)
  {
    id v5 = a3;
    id v6 = a2;
    id v8 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", 20LL));
    id v7 = [[NEPolicy alloc] initWithOrder:10 result:v8 conditions:v6];

    sub_10002CECC(a1, v7, v5);
  }

void sub_10002E4D8(BOOL a1, void *a2, void *a3)
{
  if (a1)
  {
    id v5 = a3;
    id v6 = a2;
    id v8 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", 30LL));
    id v7 = [[NEPolicy alloc] initWithOrder:10 result:v8 conditions:v6];

    sub_10002CECC(a1, v7, v5);
  }

BOOL sub_10002E57C(BOOL a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    os_unfair_lock_assert_owner((os_unfair_lock_t)&unk_1000CFBB0);
    id v8 = objc_msgSend(objc_getProperty((id)a1, v7, 16, 1), "addPolicy:storeLocally:", v5, 0);
    a1 = v8 != 0LL;
    uint64_t is_debug_logging_enabled = nelog_is_debug_logging_enabled();
    int v11 = is_debug_logging_enabled;
    if (v8)
    {
      if ((_DWORD)is_debug_logging_enabled)
      {
        uint64_t v12 = ne_log_obj(is_debug_logging_enabled, v10);
        id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          int v19 = 134218242;
          id v20 = v8;
          __int16 v21 = 2112;
          id v22 = v5;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "Added policy ID %lu: %@",  (uint8_t *)&v19,  0x16u);
        }
      }

      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v8));
      [v6 addObject:v14];
    }

    else
    {
      uint64_t v15 = ne_log_obj(is_debug_logging_enabled, v10);
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      BOOL v16 = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
      if (v11)
      {
        if (v16)
        {
          int v19 = 138412290;
          id v20 = v5;
          _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Failed to add policy: %@",  (uint8_t *)&v19,  0xCu);
        }
      }

      else if (v16)
      {
        int v18 = (void *)objc_claimAutoreleasedReturnValue([v5 descriptionWithIndent:0 options:2]);
        int v19 = 138412290;
        id v20 = v18;
        _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Failed to add policy: %@",  (uint8_t *)&v19,  0xCu);
      }
    }
  }

  return a1;
}

uint64_t sub_10002E77C(void *a1, void *a2)
{
  id v3 = a2;
  os_unfair_lock_assert_owner((os_unfair_lock_t)&unk_1000CFBB0);
  id v5 = objc_msgSend(objc_getProperty(a1, v4, 48, 1), "objectForKeyedSubscript:", v3);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  else {
    uint64_t v7 = 0LL;
  }

  return v7;
}

id *sub_10002E7FC(id *a1, void *a2, int a3, void *a4, void *a5, void *a6)
{
  id v12 = a2;
  if (a1)
  {
    v57.receiver = a1;
    v57.super_class = (Class)&OBJC_CLASS___NESMPolicySession;
    id v13 = (id *)objc_msgSendSuper2(&v57, "init");
    a1 = v13;
    if (v13)
    {
      objc_storeStrong(v13 + 2, a2);
      *((_DWORD *)a1 + 2) = a3;
      a1[3] = a4;
      a1[4] = a5;
      a1[5] = a6;
      uint64_t v14 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      id v15 = a1[6];
      a1[6] = v14;

      BOOL v16 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      id v17 = a1[7];
      a1[7] = v16;

      int v18 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      id v19 = a1[8];
      a1[8] = v18;

      id v20 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      id v21 = a1[9];
      a1[9] = v20;

      id v22 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      id v23 = a1[10];
      a1[10] = v22;

      id v24 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      id v25 = a1[11];
      a1[11] = v24;

      id v26 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      id v27 = a1[12];
      a1[12] = v26;

      uint64_t v28 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      id v29 = a1[13];
      a1[13] = v28;

      uint64_t v30 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      id v31 = a1[14];
      a1[14] = v30;

      __int128 v32 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      id v33 = a1[15];
      a1[15] = v32;

      id v34 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      id v35 = a1[17];
      a1[17] = v34;

      id v36 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      id v37 = a1[18];
      a1[18] = v36;

      __int16 v38 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      id v39 = a1[19];
      a1[19] = v38;

      __int16 v40 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      id v41 = a1[20];
      a1[20] = v40;

      uint64_t v42 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      id v43 = a1[21];
      a1[21] = v42;

      uint64_t v44 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      id v45 = a1[22];
      a1[22] = v44;

      __int16 v46 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      id v47 = a1[23];
      a1[23] = v46;

      id v48 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      id v49 = a1[24];
      a1[24] = v48;

      id v50 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      id v51 = a1[25];
      a1[25] = v50;

      __int16 v52 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      id v53 = a1[26];
      a1[26] = v52;

      id v54 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      id v55 = a1[27];
      a1[27] = v54;
    }
  }

  return a1;
}

uint64_t sub_10002EA48(uint64_t result)
{
  if (result)
  {
    BOOL v1 = (void *)result;
    int v2 = *(_DWORD *)(result + 8) - 1;
    id result = 0LL;
    switch(v2)
    {
      case 0:
        uint64_t v3 = v1[3];
        if (v1[4] == 2LL)
        {
          BOOL v4 = v3 == 1;
          unsigned int v5 = 15500;
          unsigned int v6 = 10000;
          goto LABEL_12;
        }

        BOOL v7 = v1[5] == 1LL;
        if (v1[5] == 1LL) {
          unsigned int v8 = 16300;
        }
        else {
          unsigned int v8 = 17000;
        }
        if (v7) {
          unsigned int v9 = 10800;
        }
        else {
          unsigned int v9 = 14000;
        }
        if (v3 == 1) {
          id result = v9;
        }
        else {
          id result = v8;
        }
        break;
      case 1:
        id result = 500LL;
        break;
      case 2:
        id result = 250LL;
        break;
      case 3:
        BOOL v4 = v1[3] == 3LL;
        unsigned int v5 = 1500;
        unsigned int v6 = 2000;
        goto LABEL_12;
      case 4:
        return result;
      case 5:
        id result = 19000LL;
        break;
      case 6:
        BOOL v4 = v1[3] == 1LL;
        unsigned int v5 = 19700;
        unsigned int v6 = 19500;
LABEL_12:
        if (v4) {
          id result = v6;
        }
        else {
          id result = v5;
        }
        break;
      case 8:
        id result = 5000LL;
        break;
      default:
        id result = 20000LL;
        break;
    }
  }

  return result;
}

uint64_t sub_10002EB18(uint64_t result)
{
  if (result)
  {
    v1[0] = _NSConcreteStackBlock;
    v1[1] = 3221225472LL;
    v1[2] = sub_10002EB78;
    v1[3] = &unk_1000BDAA0;
    v1[4] = result;
    return sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, v1);
  }

  return result;
}

id sub_10002EB78(uint64_t a1, void *a2)
{
  id v4 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 16LL, 1);
  }
  if (v4)
  {
    id v6 = Property;
    os_unfair_lock_assert_owner((os_unfair_lock_t)&unk_1000CFBB0);
    id v8 = objc_msgSend(objc_getProperty(v4, v7, 16, 1), "registerServiceUUID:", v6);
  }

  else
  {
    id v8 = 0LL;
  }

  return v8;
}

uint64_t sub_10002EC00(uint64_t result)
{
  if (result)
  {
    v1[0] = _NSConcreteStackBlock;
    v1[1] = 3221225472LL;
    v1[2] = sub_10002EC60;
    v1[3] = &unk_1000BDAA0;
    v1[4] = result;
    return sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, v1);
  }

  return result;
}

id sub_10002EC60(uint64_t a1, void *a2)
{
  id v4 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 16LL, 1);
  }
  if (v4)
  {
    id v6 = Property;
    os_unfair_lock_assert_owner((os_unfair_lock_t)&unk_1000CFBB0);
    id v8 = objc_msgSend(objc_getProperty(v4, v7, 16, 1), "unregisterServiceUUID:", v6);
  }

  else
  {
    id v8 = 0LL;
  }

  return v8;
}

uint64_t sub_10002ECE8(uint64_t result)
{
  if (result)
  {
    v1[0] = _NSConcreteStackBlock;
    v1[1] = 3221225472LL;
    v1[2] = sub_10002ED48;
    v1[3] = &unk_1000BDAA0;
    v1[4] = result;
    return sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, v1);
  }

  return result;
}

uint64_t sub_10002ED48(uint64_t a1, void *a2)
{
  id v4 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 80LL, 1);
  }
  id v6 = [Property count];
  if (v6)
  {
    uint64_t v7 = ne_log_large_obj(v6);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      id v15 = *(id *)(a1 + 32);
      if (v15) {
        id v15 = objc_getProperty(v15, v9, 80LL, 1);
      }
      int v16 = 138412290;
      id v17 = v15;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "Tunnel Policy IDs to be removed: %@",  (uint8_t *)&v16,  0xCu);
    }

    int v11 = *(void **)(a1 + 32);
    if (v11) {
      id v12 = objc_getProperty(v11, v10, 80LL, 1);
    }
    else {
      id v12 = 0LL;
    }
    sub_10002C4C8(v4, v12);
    uint64_t v13 = sub_10002C620(v4);
  }

  else
  {
    uint64_t v13 = 1LL;
  }

  return v13;
}

BOOL sub_10002EE70(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = ne_log_large_obj(v3);
  unsigned int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    id v34 = *(void **)(a1 + 32);
    if (v34)
    {
      id Property = objc_getProperty(v34, v6, 48LL, 1);
      if (v3)
      {
LABEL_27:
        id v36 = objc_getProperty(v3, v6, 32LL, 1);
LABEL_28:
        int v38 = 138412546;
        id v39 = Property;
        __int16 v40 = 2112;
        id v41 = v36;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "Policy IDs to be removed: %@, plus pathRule filter policies %@",  (uint8_t *)&v38,  0x16u);
        goto LABEL_2;
      }
    }

    else
    {
      id Property = 0LL;
      if (v3) {
        goto LABEL_27;
      }
    }

    id v36 = 0LL;
    goto LABEL_28;
  }

LABEL_2:
  uint64_t v8 = ne_log_large_obj(v7);
  unsigned int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    id v37 = *(id *)(a1 + 32);
    if (v37) {
      id v37 = objc_getProperty(v37, v10, 56LL, 1);
    }
    int v38 = 138412290;
    id v39 = v37;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "Policy IDs to be removed: %@ from Low Priority",  (uint8_t *)&v38,  0xCu);
  }

  if (!v3 || (v3[2] = 0, v13 = objc_getProperty(v3, v12, 32LL, 1), !(BOOL v11 = sub_10002C4C8(v3, v13))))
  {
    uint64_t v14 = ne_log_obj(v11, v12);
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v3_Block_object_dispose(va, 8) = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "Failed to remove pathRule filter policies",  (uint8_t *)&v38,  2u);
    }
  }

  int v16 = *(void **)(a1 + 32);
  if (v16) {
    id v17 = objc_getProperty(v16, v12, 48LL, 1);
  }
  else {
    id v17 = 0LL;
  }
  BOOL v18 = sub_10002C4C8(v3, v17);
  BOOL v20 = v18;
  if (!v18)
  {
    uint64_t v21 = ne_log_obj(v18, v19);
    id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v3_Block_object_dispose(va, 8) = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "Failed to remove filter policies",  (uint8_t *)&v38,  2u);
    }
  }

  id v23 = *(void **)(a1 + 32);
  if (v23) {
    id v24 = objc_getProperty(v23, v19, 56LL, 1);
  }
  else {
    id v24 = 0LL;
  }
  BOOL v25 = sub_10002D64C(v3, v24);
  if (!v25)
  {
    uint64_t v27 = ne_log_obj(v25, v26);
    uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v3_Block_object_dispose(va, 8) = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "Failed to remove Low priority filter policies",  (uint8_t *)&v38,  2u);
    }

    BOOL v20 = 0LL;
  }

  uint64_t v29 = sub_10002C620(v3);
  if ((v29 & 1) == 0)
  {
    uint64_t v31 = ne_log_obj(v29, v30);
    __int128 v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v3_Block_object_dispose(va, 8) = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "Failed to apply filter policies",  (uint8_t *)&v38,  2u);
    }

    BOOL v20 = 0LL;
  }

  return v20;
}

uint64_t sub_10002F198(void *a1, const char *a2)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v3 = 1LL;
  if (objc_msgSend(objc_getProperty(a1, a2, 128, 1), "count"))
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_10002F228;
    v5[3] = &unk_1000BDAA0;
    void v5[4] = a1;
    return sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, v5);
  }

  return v3;
}

uint64_t sub_10002F228(uint64_t a1, void *a2)
{
  id v4 = a2;
  unsigned int v5 = *(void **)(a1 + 32);
  if (v5) {
    id Property = objc_getProperty(v5, v3, 128LL, 1);
  }
  else {
    id Property = 0LL;
  }
  if (sub_10002C4C8(v4, Property)) {
    uint64_t v7 = sub_10002C620(v4);
  }
  else {
    uint64_t v7 = 0LL;
  }

  return v7;
}

BOOL sub_10002F294(id a1, NESMPolicyMasterSession *a2)
{
  if (a2) {
    id Property = objc_getProperty(a2, (SEL)a2, 48LL, 1);
  }
  else {
    id Property = 0LL;
  }
  return [Property count] != 0;
}

uint64_t sub_10002F2CC(uint64_t a1, void *a2)
{
  id v4 = a2;
  unsigned int v5 = *(void **)(a1 + 32);
  if (v5) {
    id Property = objc_getProperty(v5, v3, 88LL, 1);
  }
  else {
    id Property = 0LL;
  }
  sub_10002C4C8(v4, Property);
  uint64_t v8 = *(void **)(a1 + 32);
  if (v8) {
    id v9 = objc_getProperty(v8, v7, 96LL, 1);
  }
  else {
    id v9 = 0LL;
  }
  sub_10002D64C(v4, v9);
  uint64_t v10 = &AnalyticsSendEventLazy_ptr;
  BOOL v11 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition uid:](&OBJC_CLASS___NEPolicyCondition, "uid:", *(unsigned int *)(a1 + 88)));
  id obj = v4;
  v216 = v11;
  if ((*(void *)(a1 + 80) & 0xFFFFFFFFFFFFFFFELL) == 2
    || [*(id *)(a1 + 40) action] == (id)4
    || [*(id *)(a1 + 40) action] == (id)2)
  {
    id v12 = [*(id *)(a1 + 40) action];
    if (v12 == (id)2 && (id v12 = [*(id *)(a1 + 48) count]) != 0)
    {
      uint64_t v14 = ne_log_obj(v12, v13);
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "Adding Disconnect On Demand policies to skip privacy proxies for internal domains",  buf,  2u);
      }

      uint64_t v16 = a1;
      if (*(void *)(a1 + 56)) {
        id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](&OBJC_CLASS___NEPolicyCondition, "scopedInterface:"));
      }
      else {
        id v17 = 0LL;
      }
      id v34 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition clientFlags:](&OBJC_CLASS___NEPolicyCondition, "clientFlags:", 0x10000LL));
      [v34 setNegative:1];
      __int128 v243 = 0u;
      __int128 v244 = 0u;
      __int128 v241 = 0u;
      __int128 v242 = 0u;
      id obja = *(id *)(v16 + 48);
      id v35 = [obja countByEnumeratingWithState:&v241 objects:v278 count:16];
      if (v35)
      {
        id v36 = v35;
        uint64_t v37 = *(void *)v242;
        do
        {
          int v38 = 0LL;
          do
          {
            if (*(void *)v242 != v37) {
              objc_enumerationMutation(obja);
            }
            uint64_t v39 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10[171], "domain:", *(void *)(*((void *)&v241 + 1)
                                                                                                + 8LL * (void)v38)));
            __int16 v40 = (void *)v39;
            if (v216)
            {
              v277[0] = v216;
              v277[1] = v39;
              v277[2] = v34;
              id v41 = v277;
              uint64_t v42 = 3LL;
            }

            else
            {
              v276[0] = v39;
              v276[1] = v34;
              id v41 = v276;
              uint64_t v42 = 2LL;
            }

            uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v41,  v42));
            id v45 = *(void **)(v16 + 32);
            if (v45) {
              id v46 = objc_getProperty(v45, v43, 96LL, 1);
            }
            else {
              id v46 = 0LL;
            }
            sub_10002E434((BOOL)v4, v44, v46);
            if (v17)
            {
              id v47 = (void *)objc_claimAutoreleasedReturnValue([v44 arrayByAddingObject:v17]);

              id v49 = *(void **)(v16 + 32);
              if (v49) {
                id v50 = objc_getProperty(v49, v48, 96LL, 1);
              }
              else {
                id v50 = 0LL;
              }
              sub_10002E434((BOOL)v4, v47, v50);
              uint64_t v44 = v47;
            }

            int v38 = (char *)v38 + 1;
            uint64_t v10 = &AnalyticsSendEventLazy_ptr;
          }

          while (v36 != v38);
          id v51 = [obja countByEnumeratingWithState:&v241 objects:v278 count:16];
          id v36 = v51;
        }

        while (v51);
      }

      BOOL v11 = v216;
    }

    else
    {
      uint64_t v18 = ne_log_obj(v12, v13);
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        uint64_t v19 = *(void *)(a1 + 80);
        id v20 = [*(id *)(a1 + 40) action];
        *(_DWORD *)buf = 134218240;
        uint64_t v273 = v19;
        __int16 v274 = 2048;
        id v275 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "No On Demand policies (pause %ld, action %ld)",  buf,  0x16u);
      }
    }

    sub_10002C620(v4);
    uint64_t v52 = 1LL;
    goto LABEL_45;
  }

  id v21 = [*(id *)(a1 + 40) action];
  if (v21 == (id)3)
  {
    id v24 = *(id *)(a1 + 40);
    __int128 v237 = 0u;
    __int128 v238 = 0u;
    __int128 v239 = 0u;
    __int128 v240 = 0u;
    id v54 = (void *)objc_claimAutoreleasedReturnValue([v24 connectionRules]);
    id v200 = [v54 countByEnumeratingWithState:&v237 objects:v265 count:16];
    if (!v200) {
      goto LABEL_174;
    }
    int v202 = 0;
    int v214 = 0;
    id v198 = v24;
    uint64_t v199 = *(void *)v238;
    v197 = v54;
    while (1)
    {
      for (id i = 0LL; i != v200; id i = v107 + 1)
      {
        if (*(void *)v238 != v199) {
          objc_enumerationMutation(v54);
        }
        v201 = (char *)i;
        id v56 = *(void **)(*((void *)&v237 + 1) + 8LL * (void)i);
        v210 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
        __int128 v233 = 0u;
        __int128 v234 = 0u;
        __int128 v235 = 0u;
        __int128 v236 = 0u;
        objc_super v57 = (void *)objc_claimAutoreleasedReturnValue([v56 matchDomains]);
        id v58 = [v57 countByEnumeratingWithState:&v233 objects:v264 count:16];
        if (v58)
        {
          id v59 = v58;
          uint64_t v60 = *(void *)v234;
          do
          {
            for (j = 0LL; j != v59; j = (char *)j + 1)
            {
              if (*(void *)v234 != v60) {
                objc_enumerationMutation(v57);
              }
              __int128 v62 = *(void **)(*((void *)&v233 + 1) + 8LL * (void)j);
              __int128 v63 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet characterSetWithCharactersInString:]( &OBJC_CLASS___NSCharacterSet,  "characterSetWithCharactersInString:",  @"*."));
              __int128 v64 = (void *)objc_claimAutoreleasedReturnValue([v62 stringByTrimmingCharactersInSet:v63]);
              if (v64) {
                [v210 addObject:v64];
              }
            }

            id v59 = [v57 countByEnumeratingWithState:&v233 objects:v264 count:16];
          }

          while (v59);
        }

        if ([v56 action] == (id)1)
        {
          __int128 v65 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult netAgentUUID:]( &OBJC_CLASS___NEPolicyResult,  "netAgentUUID:",  *(void *)(a1 + 64)));
          __int128 v229 = 0u;
          __int128 v230 = 0u;
          __int128 v231 = 0u;
          __int128 v232 = 0u;
          id v211 = v210;
          id v4 = obj;
          uint64_t v10 = &AnalyticsSendEventLazy_ptr;
          id v208 = [v211 countByEnumeratingWithState:&v229 objects:v263 count:16];
          if (v208)
          {
            uint64_t v206 = *(void *)v230;
            int v66 = v214;
            do
            {
              id v67 = 0LL;
              do
              {
                if (*(void *)v230 != v206) {
                  objc_enumerationMutation(v211);
                }
                v212 = (char *)v67;
                uint64_t v68 = *(void *)(*((void *)&v229 + 1) + 8LL * (void)v67);
                v217 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](&OBJC_CLASS___NEPolicyCondition, "domain:", v68));
                int v215 = v66;
                uint64_t v69 = sub_10002EA48(*(void *)(a1 + 32)) + 2 * v66 + 2110;
                __int128 v225 = 0u;
                __int128 v226 = 0u;
                __int128 v227 = 0u;
                __int128 v228 = 0u;
                uint64_t v70 = a1;
                id v71 = *(id *)(a1 + 72);
                id v72 = [v71 countByEnumeratingWithState:&v225 objects:v262 count:16];
                if (v72)
                {
                  id v73 = v72;
                  uint64_t v74 = *(void *)v226;
                  do
                  {
                    uint64_t v75 = 0LL;
                    do
                    {
                      if (*(void *)v226 != v74) {
                        objc_enumerationMutation(v71);
                      }
                      uint64_t v76 = *(void **)(*((void *)&v225 + 1) + 8LL * (void)v75);
                      if (isa_nsstring(v76) && [v76 hasSuffix:v68])
                      {
                        uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](&OBJC_CLASS___NEPolicyCondition, "domain:", v76));
                        v261 = v77;
                        v78 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v261,  1LL));

                        id v80 = [[NEPolicy alloc] initWithOrder:v69 result:v65 conditions:v78];
                        id v81 = *(void **)(v70 + 32);
                        if (v81) {
                          id v82 = objc_getProperty(v81, v79, 88LL, 1);
                        }
                        else {
                          id v82 = 0LL;
                        }
                        sub_10002E57C((BOOL)obj, v80, v82);

                        uint64_t v69 = (v69 + 1);
                      }

                      uint64_t v75 = (char *)v75 + 1;
                    }

                    while (v73 != v75);
                    id v83 = [v71 countByEnumeratingWithState:&v225 objects:v262 count:16];
                    id v73 = v83;
                  }

                  while (v83);
                }

                if (v216)
                {
                  v260[0] = v217;
                  v260[1] = v216;
                  objc_opt_self(&OBJC_CLASS___NESMPolicySession);
                  uint64_t v10 = &AnalyticsSendEventLazy_ptr;
                  uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  0LL,  0LL));
                  v260[2] = v84;
                  uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v260,  3LL));

                  id v87 = [[NEPolicy alloc] initWithOrder:v69 result:v65 conditions:v85];
                  a1 = v70;
                  uint64_t v88 = *(void **)(v70 + 32);
                  id v4 = obj;
                  uint64_t v89 = v212;
                  if (v88) {
                    id v90 = objc_getProperty(v88, v86, 88LL, 1);
                  }
                  else {
                    id v90 = 0LL;
                  }
                  int v91 = v215;
                  sub_10002E57C((BOOL)obj, v87, v90);

                  if (*(void *)(a1 + 80) == 1LL)
                  {
                    v259[0] = v217;
                    v259[1] = v216;
                    objc_opt_self(&OBJC_CLASS___NESMPolicySession);
                    uint64_t v92 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  300LL,  899LL));
                    v259[2] = v92;
                    uint64_t v93 = v259;
                  }

                  else
                  {
                    v258[0] = v217;
                    v258[1] = v216;
                    objc_opt_self(&OBJC_CLASS___NESMPolicySession);
                    uint64_t v92 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  200LL,  899LL));
                    v258[2] = v92;
                    uint64_t v93 = v258;
                  }

                  uint64_t v99 = (v69 + 1);
                  uint64_t v100 = 3LL;
                }

                else
                {
                  v257[0] = v217;
                  objc_opt_self(&OBJC_CLASS___NESMPolicySession);
                  uint64_t v10 = &AnalyticsSendEventLazy_ptr;
                  uint64_t v94 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  0LL,  0LL));
                  v257[1] = v94;
                  uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v257,  2LL));

                  id v96 = [[NEPolicy alloc] initWithOrder:v69 result:v65 conditions:v85];
                  a1 = v70;
                  uint64_t v97 = *(void **)(v70 + 32);
                  id v4 = obj;
                  uint64_t v89 = v212;
                  if (v97) {
                    id v98 = objc_getProperty(v97, v95, 88LL, 1);
                  }
                  else {
                    id v98 = 0LL;
                  }
                  int v91 = v215;
                  sub_10002E57C((BOOL)obj, v96, v98);

                  if (*(void *)(a1 + 80) == 1LL)
                  {
                    v256[0] = v217;
                    objc_opt_self(&OBJC_CLASS___NESMPolicySession);
                    uint64_t v92 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  300LL,  899LL));
                    v256[1] = v92;
                    uint64_t v93 = v256;
                  }

                  else
                  {
                    v255[0] = v217;
                    objc_opt_self(&OBJC_CLASS___NESMPolicySession);
                    uint64_t v92 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  200LL,  899LL));
                    v255[1] = v92;
                    uint64_t v93 = v255;
                  }

                  uint64_t v99 = (v69 + 1);
                  uint64_t v100 = 2LL;
                }

                CFIndex v101 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v93,  v100));

                id v103 = [[NEPolicy alloc] initWithOrder:v99 result:v65 conditions:v101];
                CFIndex v104 = *(void **)(a1 + 32);
                if (v104) {
                  id v105 = objc_getProperty(v104, v102, 88LL, 1);
                }
                else {
                  id v105 = 0LL;
                }
                sub_10002E57C((BOOL)v4, v103, v105);

                int v66 = v91 + 1;
                id v67 = v89 + 1;
              }

              while (v67 != v208);
              id v106 = [v211 countByEnumeratingWithState:&v229 objects:v263 count:16];
              id v208 = v106;
            }

            while (v106);
            int v214 = v66;
          }
        }

        else
        {
          id v4 = obj;
          uint64_t v10 = &AnalyticsSendEventLazy_ptr;
          char v107 = v201;
          if ([v56 action] != (id)2) {
            goto LABEL_157;
          }
          if (*(void *)(a1 + 32)) {
            uint64_t v108 = 20000LL;
          }
          else {
            uint64_t v108 = 0LL;
          }
          __int128 v65 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", v108));
          id v211 = (id)objc_claimAutoreleasedReturnValue( +[NEPolicyResult removeNetworkAgentUUID:]( &OBJC_CLASS___NEPolicyResult,  "removeNetworkAgentUUID:",  *(void *)(a1 + 64)));
          v207 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult scopeToDirectInterface]( &OBJC_CLASS___NEPolicyResult,  "scopeToDirectInterface"));
          if (*(void *)(a1 + 32)) {
            int v109 = 20100;
          }
          else {
            int v109 = 100;
          }
          int v218 = v109;
          __int128 v221 = 0u;
          __int128 v222 = 0u;
          __int128 v223 = 0u;
          __int128 v224 = 0u;
          id v204 = v210;
          id v209 = [v204 countByEnumeratingWithState:&v221 objects:v254 count:16];
          if (v209)
          {
            uint64_t v205 = *(void *)v222;
            int v110 = v202;
            do
            {
              id v111 = 0LL;
              int v112 = 2 * v110;
              int v203 = v110;
              do
              {
                if (*(void *)v222 != v205) {
                  objc_enumerationMutation(v204);
                }
                uint64_t v113 = (char *)v111;
                uint64_t v114 = objc_claimAutoreleasedReturnValue([v10[171] domain:*(void *)(*((void *)&v221 + 1) + 8 * (void)v111)]);
                int v213 = sub_10002EA48(*(void *)(a1 + 32));
                uint64_t v115 = a1;
                uint64_t v116 = (v213 + v112 + 10);
                uint64_t v117 = (v218 + v112);
                if (v216)
                {
                  uint64_t v118 = (void *)v114;
                  v253[0] = v114;
                  v253[1] = v216;
                  objc_opt_self(&OBJC_CLASS___NESMPolicySession);
                  uint64_t v119 = (void *)objc_claimAutoreleasedReturnValue([v10[171] trafficClassStart:0 end:0]);
                  v253[2] = v119;
                  uint64_t v120 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v253,  3LL));

                  id v122 = [[NEPolicy alloc] initWithOrder:v116 result:v65 conditions:v120];
                  uint64_t v123 = *(void **)(v115 + 32);
                  a1 = v115;
                  if (v123) {
                    id v124 = objc_getProperty(v123, v121, 88LL, 1);
                  }
                  else {
                    id v124 = 0LL;
                  }
                  id v125 = v113;
                  sub_10002E57C((BOOL)obj, v122, v124);

                  id v127 = [[NEPolicy alloc] initWithOrder:v117 result:v211 conditions:v120];
                  uint64_t v128 = *(void **)(a1 + 32);
                  char v129 = v118;
                  if (v128) {
                    id v130 = objc_getProperty(v128, v126, 88LL, 1);
                  }
                  else {
                    id v130 = 0LL;
                  }
                  sub_10002E57C((BOOL)obj, v127, v130);

                  if (*(void *)(a1 + 80) == 1LL)
                  {
                    v252[0] = v118;
                    v252[1] = v216;
                    objc_opt_self(&OBJC_CLASS___NESMPolicySession);
                    int v131 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  300LL,  899LL));
                    v252[2] = v131;
                    uint64_t v132 = v252;
                  }

                  else
                  {
                    v251[0] = v118;
                    v251[1] = v216;
                    objc_opt_self(&OBJC_CLASS___NESMPolicySession);
                    int v131 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  200LL,  899LL));
                    v251[2] = v131;
                    uint64_t v132 = v251;
                  }

                  uint64_t v146 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v132,  3LL));

                  id v148 = [[NEPolicy alloc] initWithOrder:(v213 + v112 + 11) result:v65 conditions:v146];
                  v149 = *(void **)(a1 + 32);
                  if (v149) {
                    id v150 = objc_getProperty(v149, v147, 88LL, 1);
                  }
                  else {
                    id v150 = 0LL;
                  }
                  sub_10002E57C((BOOL)obj, v148, v150);

                  id v152 = [[NEPolicy alloc] initWithOrder:(v218 + v112 + 1) result:v211 conditions:v146];
                  v153 = *(void **)(a1 + 32);
                  if (v153) {
                    id v154 = objc_getProperty(v153, v151, 88LL, 1);
                  }
                  else {
                    id v154 = 0LL;
                  }
                  sub_10002E57C((BOOL)obj, v152, v154);

                  id v155 = objc_alloc(&OBJC_CLASS___NEPolicy);
                  v250[0] = v129;
                  v250[1] = v216;
                  CFArrayRef v156 = (void **)v250;
                  uint64_t v157 = 2LL;
                }

                else
                {
                  uint64_t v133 = (void *)v114;
                  v249[0] = v114;
                  objc_opt_self(&OBJC_CLASS___NESMPolicySession);
                  v134 = (void *)objc_claimAutoreleasedReturnValue([v10[171] trafficClassStart:0 end:0]);
                  v249[1] = v134;
                  v135 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v249,  2LL));

                  id v137 = [[NEPolicy alloc] initWithOrder:v116 result:v65 conditions:v135];
                  id v138 = *(void **)(v115 + 32);
                  a1 = v115;
                  if (v138) {
                    id v139 = objc_getProperty(v138, v136, 88LL, 1);
                  }
                  else {
                    id v139 = 0LL;
                  }
                  id v125 = v113;
                  sub_10002E57C((BOOL)obj, v137, v139);

                  id v141 = [[NEPolicy alloc] initWithOrder:v117 result:v211 conditions:v135];
                  id v142 = *(void **)(a1 + 32);
                  char v129 = v133;
                  if (v142) {
                    id v143 = objc_getProperty(v142, v140, 88LL, 1);
                  }
                  else {
                    id v143 = 0LL;
                  }
                  sub_10002E57C((BOOL)obj, v141, v143);

                  if (*(void *)(a1 + 80) == 1LL)
                  {
                    v248[0] = v133;
                    objc_opt_self(&OBJC_CLASS___NESMPolicySession);
                    uint64_t v144 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  300LL,  899LL));
                    v248[1] = v144;
                    v145 = v248;
                  }

                  else
                  {
                    v247[0] = v133;
                    objc_opt_self(&OBJC_CLASS___NESMPolicySession);
                    uint64_t v144 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  200LL,  899LL));
                    v247[1] = v144;
                    v145 = v247;
                  }

                  uint64_t v146 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v145,  2LL));

                  id v159 = [[NEPolicy alloc] initWithOrder:(v213 + v112 + 11) result:v65 conditions:v146];
                  uint64_t v160 = *(void **)(a1 + 32);
                  if (v160) {
                    id v161 = objc_getProperty(v160, v158, 88LL, 1);
                  }
                  else {
                    id v161 = 0LL;
                  }
                  sub_10002E57C((BOOL)obj, v159, v161);

                  id v163 = [[NEPolicy alloc] initWithOrder:(v218 + v112 + 1) result:v211 conditions:v146];
                  __int16 v164 = *(void **)(a1 + 32);
                  if (v164) {
                    id v165 = objc_getProperty(v164, v162, 88LL, 1);
                  }
                  else {
                    id v165 = 0LL;
                  }
                  sub_10002E57C((BOOL)obj, v163, v165);

                  id v155 = objc_alloc(&OBJC_CLASS___NEPolicy);
                  v246 = v129;
                  CFArrayRef v156 = &v246;
                  uint64_t v157 = 1LL;
                }

                __int16 v166 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v156,  v157));
                id v168 = [v155 initWithOrder:80 result:v207 conditions:v166];
                v169 = *(void **)(a1 + 32);
                if (v169) {
                  id v170 = objc_getProperty(v169, v167, 96LL, 1);
                }
                else {
                  id v170 = 0LL;
                }
                sub_10002CECC((BOOL)obj, v168, v170);

                id v111 = v125 + 1;
                v112 += 2;
                uint64_t v10 = &AnalyticsSendEventLazy_ptr;
              }

              while (v209 != v111);
              int v110 = v203 + (_DWORD)v111;
              id v171 = [v204 countByEnumeratingWithState:&v221 objects:v254 count:16];
              id v209 = v171;
            }

            while (v171);
          }

          else
          {
            int v110 = v202;
          }

          int v202 = v110;
        }

        id v54 = v197;
        id v24 = v198;
        char v107 = v201;
LABEL_157:
      }

      id v200 = [v54 countByEnumeratingWithState:&v237 objects:v265 count:16];
      if (!v200) {
        goto LABEL_174;
      }
    }
  }

  if (v21 == (id)1)
  {
    int v22 = sub_10002EA48(*(void *)(a1 + 32));
    uint64_t v23 = (v22 + 10);
    id v24 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](&OBJC_CLASS___NEPolicyResult, "netAgentUUID:", *(void *)(a1 + 64)));
    if (v11)
    {
      v271[0] = v11;
      objc_opt_self(&OBJC_CLASS___NESMPolicySession);
      BOOL v25 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  0LL,  0LL));
      v271[1] = v25;
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v271, 2LL));

      id v28 = [[NEPolicy alloc] initWithOrder:v23 result:v24 conditions:v26];
      uint64_t v29 = *(void **)(a1 + 32);
      if (v29) {
        id v30 = objc_getProperty(v29, v27, 88LL, 1);
      }
      else {
        id v30 = 0LL;
      }
      sub_10002E57C((BOOL)v4, v28, v30);

      uint64_t v31 = (v22 + 11);
      if (*(void *)(a1 + 80) == 1LL)
      {
        v270[0] = v11;
        objc_opt_self(&OBJC_CLASS___NESMPolicySession);
        uint64_t v10 = &AnalyticsSendEventLazy_ptr;
        __int128 v32 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  300LL,  899LL));
        v270[1] = v32;
        id v33 = v270;
      }

      else
      {
        v269[0] = v11;
        objc_opt_self(&OBJC_CLASS___NESMPolicySession);
        uint64_t v10 = &AnalyticsSendEventLazy_ptr;
        __int128 v32 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  200LL,  899LL));
        v269[1] = v32;
        id v33 = v269;
      }

      id v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v33, 2LL));
    }

    else
    {
      objc_opt_self(&OBJC_CLASS___NESMPolicySession);
      v172 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  0LL,  0LL));
      v268 = v172;
      v173 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v268, 1LL));

      id v175 = [[NEPolicy alloc] initWithOrder:v23 result:v24 conditions:v173];
      v176 = *(void **)(a1 + 32);
      if (v176) {
        id v177 = objc_getProperty(v176, v174, 88LL, 1);
      }
      else {
        id v177 = 0LL;
      }
      sub_10002E57C((BOOL)v4, v175, v177);

      uint64_t v31 = (v22 + 11);
      uint64_t v178 = *(void *)(a1 + 80);
      objc_opt_self(&OBJC_CLASS___NESMPolicySession);
      uint64_t v10 = &AnalyticsSendEventLazy_ptr;
      if (v178 == 1)
      {
        v179 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  300LL,  899LL));
        v267 = v179;
        v180 = &v267;
      }

      else
      {
        v179 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  200LL,  899LL));
        v266 = v179;
        v180 = &v266;
      }

      id v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v180, 1LL));
    }

    id v182 = [[NEPolicy alloc] initWithOrder:v31 result:v24 conditions:v54];
    v183 = *(void **)(a1 + 32);
    if (v183) {
      id v184 = objc_getProperty(v183, v181, 88LL, 1);
    }
    else {
      id v184 = 0LL;
    }
    sub_10002E57C((BOOL)v4, v182, v184);

    v186 = *(void **)(a1 + 32);
    if (v186) {
      id v187 = objc_getProperty(v186, v185, 96LL, 1);
    }
    else {
      id v187 = 0LL;
    }
    sub_10002E434((BOOL)v4, v54, v187);
LABEL_174:

    if (*(_BYTE *)(a1 + 92))
    {
      v188 = (void *)objc_claimAutoreleasedReturnValue([v10[171] localNetworks]);
      v189 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult removeNetworkAgentUUID:]( &OBJC_CLASS___NEPolicyResult,  "removeNetworkAgentUUID:",  *(void *)(a1 + 64)));
      id v190 = objc_alloc(&OBJC_CLASS___NEPolicy);
      uint64_t v191 = sub_10002EA48(*(void *)(a1 + 32)) + 30;
      v245 = v188;
      v192 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v245, 1LL));
      id v194 = [v190 initWithOrder:v191 result:v189 conditions:v192];
      v195 = *(void **)(a1 + 32);
      if (v195) {
        id v196 = objc_getProperty(v195, v193, 88LL, 1);
      }
      else {
        id v196 = 0LL;
      }
      sub_10002E57C((BOOL)v4, v194, v196);
    }

    uint64_t v52 = sub_10002C620(v4);
    BOOL v11 = v216;
  }

  else
  {
    uint64_t v52 = 0LL;
  }

LABEL_45:
  return v52;
}

  if (v67)
  {
    if (v22 == (char *)1)
    {
      uint64_t v42 = kSCPropNetIPSecXAuthPassword;
      id v43 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v29,  "objectForKeyedSubscript:",  kSCPropNetIPSecXAuthPassword));
      uint64_t v44 = isa_nsstring(v43);

      if ((v44 & 1) == 0)
      {
        id v45 = v29;
LABEL_52:
        -[NSMutableDictionary setObject:forKeyedSubscript:](v45, "setObject:forKeyedSubscript:", v67, v42);
      }
    }

    else if (v22 == (char *)2)
    {
      uint64_t v42 = kSCPropNetPPPAuthPassword;
      id v46 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v30,  "objectForKeyedSubscript:",  kSCPropNetPPPAuthPassword));
      id v47 = isa_nsstring(v46);

      if ((v47 & 1) == 0)
      {
        id v45 = v30;
        goto LABEL_52;
      }
    }
  }

  if (v35)
  {
    id v48 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v29,  "objectForKeyedSubscript:",  kSCPropNetIPSecSharedSecret));
    id v49 = isa_nsstring(v48);

    if ((v49 & 1) == 0) {
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v29,  "setObject:forKeyedSubscript:",  v35,  kSCPropNetIPSecSharedSecret);
    }
  }

  if (v21 && v22 == (char *)1)
  {
    if (!v29) {
      uint64_t v29 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    }
    id v50 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v21,  "objectForKeyedSubscript:",  NEVPNConnectionStartOptionUsername));
    id v51 = isa_nsstring(v50);

    if (v51)
    {
      uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v21,  "objectForKeyedSubscript:",  NEVPNConnectionStartOptionUsername));
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v29,  "setObject:forKeyedSubscript:",  v52,  kSCPropNetIPSecXAuthName);
    }

    id v53 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v21,  "objectForKeyedSubscript:",  NEVPNConnectionStartOptionPassword));
    id v54 = isa_nsstring(v53);

    if (v54)
    {
      id v55 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v21,  "objectForKeyedSubscript:",  NEVPNConnectionStartOptionPassword));
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v29,  "setObject:forKeyedSubscript:",  v55,  kSCPropNetIPSecXAuthName);
    }

    *(void *)buf = NEVPNConnectionStartOptionPassword;
    uint64_t v74 = NEVPNConnectionStartOptionUsername;
    id v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", buf, 2LL));
    -[NSMutableDictionary removeObjectsForKeys:](v21, "removeObjectsForKeys:", v56);
  }

  else if (!v21)
  {
    if (-[NSMutableDictionary count](v29, "count") || -[NSMutableDictionary count](v30, "count")) {
      objc_super v57 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    }
    else {
      objc_super v57 = 0LL;
    }
    goto LABEL_67;
  }

  objc_super v57 = v21;
LABEL_67:
  if (-[NSMutableDictionary count](v30, "count")) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v57, "setObject:forKeyedSubscript:", v30, kSCEntNetPPP);
  }
  if (v29 && -[NSMutableDictionary count](v29, "count")) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v57, "setObject:forKeyedSubscript:", v29, kSCEntNetIPSec);
  }
  id v58 = v57;

  id Property = objc_getProperty(self, v59, 360LL, 1);
LABEL_73:
  if ([Property type] == (id)2)
  {
    __int128 v62 = xpc_dictionary_copy_mach_send(v66, "SessionBootstrapPort");
    __int128 v63 = xpc_dictionary_copy_mach_send(v66, "SessionAuditSessionPort");
  }

  else
  {
    __int128 v62 = 0;
    __int128 v63 = 0;
  }

  if (self) {
    objc_setProperty_atomic(self, v61, v58, 384LL);
  }
  v69[0] = _NSConcreteStackBlock;
  v69[1] = 3221225472LL;
  v69[2] = sub_1000638F8;
  v69[3] = &unk_1000BE350;
  v69[4] = self;
  v69[5] = v64;
  uint64_t v70 = v62;
  id v71 = v63;
  sub_10005EEA8((uint64_t)self, v69);
}

      goto LABEL_46;
    default:
      goto LABEL_46;
  }

uint64_t sub_100030858(uint64_t a1, void *a2)
{
  id v4 = a2;
  unsigned int v5 = *(void **)(a1 + 32);
  if (v5) {
    id Property = objc_getProperty(v5, v3, 88LL, 1);
  }
  else {
    id Property = 0LL;
  }
  sub_10002C4C8(v4, Property);
  uint64_t v8 = *(void **)(a1 + 32);
  if (v8) {
    id v9 = objc_getProperty(v8, v7, 96LL, 1);
  }
  else {
    id v9 = 0LL;
  }
  id v10 = (id)sub_10002D64C(v4, v9);
  if ((*(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL) == 2
    || (id v10 = [*(id *)(a1 + 40) action], v10 == (id)4)
    || (id v10 = [*(id *)(a1 + 40) action], v10 == (id)2))
  {
    uint64_t v12 = ne_log_obj(v10, v11);
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = a1;
      uint64_t v15 = *(void *)(a1 + 72);
      id v16 = [*(id *)(v14 + 40) action];
      *(_DWORD *)buf = 134218240;
      uint64_t v231 = v15;
      __int16 v232 = 2048;
      id v233 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "No On Demand policies (pause %ld, action %ld)",  buf,  0x16u);
    }

    sub_10002C620(v4);
    uint64_t v17 = 1LL;
    goto LABEL_11;
  }

  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition uid:](&OBJC_CLASS___NEPolicyCondition, "uid:", *(unsigned int *)(a1 + 80)));
  v183 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition fallbackTraffic](&OBJC_CLASS___NEPolicyCondition, "fallbackTraffic"));
  id v182 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition scopedInterface:]( &OBJC_CLASS___NEPolicyCondition,  "scopedInterface:",  *(void *)(a1 + 48)));
  id v20 = [*(id *)(a1 + 40) action];
  BOOL v181 = (BOOL)v4;
  id v21 = (uint64_t *)a1;
  uint64_t v178 = v19;
  if (v20 == (id)3)
  {
    id v35 = *(id *)(a1 + 40);
    __int128 v200 = 0u;
    __int128 v201 = 0u;
    __int128 v202 = 0u;
    __int128 v203 = 0u;
    id v158 = v35;
    id obj = (id)objc_claimAutoreleasedReturnValue([v35 connectionRules]);
    id v161 = [obj countByEnumeratingWithState:&v200 objects:v223 count:16];
    if (!v161) {
      goto LABEL_132;
    }
    int v163 = 0;
    int v36 = 0;
    uint64_t v160 = *(void *)v201;
    while (1)
    {
      uint64_t v37 = 0LL;
      do
      {
        if (*(void *)v201 != v160) {
          objc_enumerationMutation(obj);
        }
        uint64_t v162 = v37;
        int v38 = *(void **)(*((void *)&v200 + 1) + 8 * v37);
        v172 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
        __int128 v196 = 0u;
        __int128 v197 = 0u;
        __int128 v198 = 0u;
        __int128 v199 = 0u;
        uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v38 matchDomains]);
        id v40 = [v39 countByEnumeratingWithState:&v196 objects:v222 count:16];
        if (v40)
        {
          id v41 = v40;
          uint64_t v42 = *(void *)v197;
          do
          {
            for (id i = 0LL; i != v41; id i = (char *)i + 1)
            {
              if (*(void *)v197 != v42) {
                objc_enumerationMutation(v39);
              }
              uint64_t v44 = *(void **)(*((void *)&v196 + 1) + 8LL * (void)i);
              id v45 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet characterSetWithCharactersInString:]( &OBJC_CLASS___NSCharacterSet,  "characterSetWithCharactersInString:",  @"*."));
              id v46 = (void *)objc_claimAutoreleasedReturnValue([v44 stringByTrimmingCharactersInSet:v45]);
              if (v46) {
                [v172 addObject:v46];
              }
            }

            id v41 = [v39 countByEnumeratingWithState:&v196 objects:v222 count:16];
          }

          while (v41);
        }

        if ([v38 action] == (id)1)
        {
          id v47 = v21;
          id v48 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](&OBJC_CLASS___NEPolicyResult, "netAgentUUID:", v21[7]));
          __int128 v192 = 0u;
          __int128 v193 = 0u;
          __int128 v194 = 0u;
          __int128 v195 = 0u;
          id v173 = v172;
          id v4 = (id)v181;
          id v170 = [v173 countByEnumeratingWithState:&v192 objects:v221 count:16];
          if (v170)
          {
            uint64_t v168 = *(void *)v193;
            do
            {
              uint64_t v49 = 0LL;
              do
              {
                if (*(void *)v193 != v168) {
                  objc_enumerationMutation(v173);
                }
                uint64_t v174 = v49;
                uint64_t v50 = *(void *)(*((void *)&v192 + 1) + 8 * v49);
                v179 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](&OBJC_CLASS___NEPolicyCondition, "domain:", v50));
                int v176 = v36;
                uint64_t v51 = sub_10002EA48(v47[4]) + 2 * v36 + 2110;
                __int128 v188 = 0u;
                __int128 v189 = 0u;
                __int128 v190 = 0u;
                __int128 v191 = 0u;
                id v52 = (id)v47[8];
                id v53 = [v52 countByEnumeratingWithState:&v188 objects:v220 count:16];
                if (v53)
                {
                  id v54 = v53;
                  uint64_t v55 = *(void *)v189;
                  do
                  {
                    id v56 = 0LL;
                    do
                    {
                      if (*(void *)v189 != v55) {
                        objc_enumerationMutation(v52);
                      }
                      objc_super v57 = *(void **)(*((void *)&v188 + 1) + 8LL * (void)v56);
                      if (isa_nsstring(v57) && [v57 hasSuffix:v50])
                      {
                        v219[0] = v183;
                        id v58 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](&OBJC_CLASS___NEPolicyCondition, "domain:", v57));
                        v219[1] = v58;
                        v219[2] = v182;
                        id v59 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v219,  3LL));

                        id v61 = [[NEPolicy alloc] initWithOrder:v51 result:v48 conditions:v59];
                        __int128 v62 = (void *)v21[4];
                        if (v62) {
                          id v63 = objc_getProperty(v62, v60, 88LL, 1);
                        }
                        else {
                          id v63 = 0LL;
                        }
                        sub_10002E57C(v181, v61, v63);

                        uint64_t v51 = (v51 + 1);
                      }

                      id v56 = (char *)v56 + 1;
                    }

                    while (v54 != v56);
                    id v64 = [v52 countByEnumeratingWithState:&v188 objects:v220 count:16];
                    id v54 = v64;
                  }

                  while (v64);
                }

                if (v178)
                {
                  v218[0] = v183;
                  v218[1] = v179;
                  v218[2] = v178;
                  objc_opt_self(&OBJC_CLASS___NESMPolicySession);
                  __int128 v65 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  0LL,  0LL));
                  v218[3] = v65;
                  v218[4] = v182;
                  int v66 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v218,  5LL));

                  id v68 = [[NEPolicy alloc] initWithOrder:v51 result:v48 conditions:v66];
                  id v47 = v21;
                  uint64_t v69 = (void *)v21[4];
                  id v4 = (id)v181;
                  if (v69) {
                    id v70 = objc_getProperty(v69, v67, 88LL, 1);
                  }
                  else {
                    id v70 = 0LL;
                  }
                  sub_10002E57C(v181, v68, v70);

                  if (v21[9] == 1)
                  {
                    v217[0] = v183;
                    v217[1] = v179;
                    v217[2] = v178;
                    objc_opt_self(&OBJC_CLASS___NESMPolicySession);
                    id v71 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  300LL,  899LL));
                    v217[3] = v71;
                    id v72 = v217;
                  }

                  else
                  {
                    v216[0] = v183;
                    v216[1] = v179;
                    v216[2] = v178;
                    objc_opt_self(&OBJC_CLASS___NESMPolicySession);
                    id v71 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  200LL,  899LL));
                    v216[3] = v71;
                    id v72 = v216;
                  }

                  uint64_t v79 = (v51 + 1);
                  v72[4] = v182;
                }

                else
                {
                  v215[0] = v183;
                  v215[1] = v179;
                  objc_opt_self(&OBJC_CLASS___NESMPolicySession);
                  id v73 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  0LL,  0LL));
                  v215[2] = v73;
                  v215[3] = v182;
                  int v66 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v215,  4LL));

                  id v75 = [[NEPolicy alloc] initWithOrder:v51 result:v48 conditions:v66];
                  id v47 = v21;
                  uint64_t v76 = (void *)v21[4];
                  id v4 = (id)v181;
                  if (v76) {
                    id v77 = objc_getProperty(v76, v74, 88LL, 1);
                  }
                  else {
                    id v77 = 0LL;
                  }
                  sub_10002E57C(v181, v75, v77);

                  if (v21[9] == 1)
                  {
                    v214[0] = v183;
                    v214[1] = v179;
                    objc_opt_self(&OBJC_CLASS___NESMPolicySession);
                    id v71 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  300LL,  899LL));
                    v214[2] = v71;
                    v78 = v214;
                  }

                  else
                  {
                    v213[0] = v183;
                    v213[1] = v179;
                    objc_opt_self(&OBJC_CLASS___NESMPolicySession);
                    id v71 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  200LL,  899LL));
                    v213[2] = v71;
                    v78 = v213;
                  }

                  uint64_t v79 = (v51 + 1);
                  v78[3] = v182;
                }

                id v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:"));

                id v82 = [[NEPolicy alloc] initWithOrder:v79 result:v48 conditions:v80];
                id v83 = (void *)v47[4];
                if (v83) {
                  id v84 = objc_getProperty(v83, v81, 88LL, 1);
                }
                else {
                  id v84 = 0LL;
                }
                sub_10002E57C((BOOL)v4, v82, v84);

                int v36 = v176 + 1;
                uint64_t v49 = v174 + 1;
              }

              while ((id)(v174 + 1) != v170);
              id v85 = [v173 countByEnumeratingWithState:&v192 objects:v221 count:16];
              id v170 = v85;
            }

            while (v85);
          }
        }

        else
        {
          id v4 = (id)v181;
          uint64_t v19 = v178;
          if ([v38 action] != (id)2) {
            goto LABEL_130;
          }
          int v177 = v36;
          if (v21[4]) {
            uint64_t v86 = 20000LL;
          }
          else {
            uint64_t v86 = 0LL;
          }
          id v48 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", v86));
          id v173 = (id)objc_claimAutoreleasedReturnValue( +[NEPolicyResult removeNetworkAgentUUID:]( &OBJC_CLASS___NEPolicyResult,  "removeNetworkAgentUUID:",  v21[7]));
          v167 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult scopeToDirectInterface]( &OBJC_CLASS___NEPolicyResult,  "scopeToDirectInterface"));
          if (v21[4]) {
            int v87 = 20200;
          }
          else {
            int v87 = 200;
          }
          int v175 = v87;
          __int128 v184 = 0u;
          __int128 v185 = 0u;
          __int128 v186 = 0u;
          __int128 v187 = 0u;
          id v165 = v172;
          id v169 = [v165 countByEnumeratingWithState:&v184 objects:v212 count:16];
          if (v169)
          {
            uint64_t v166 = *(void *)v185;
            int v88 = v163;
            do
            {
              uint64_t v89 = 0LL;
              int v90 = 2 * v88;
              int v164 = v88;
              do
              {
                if (*(void *)v185 != v166) {
                  objc_enumerationMutation(v165);
                }
                uint64_t v171 = v89;
                uint64_t v91 = objc_claimAutoreleasedReturnValue( +[NEPolicyCondition domain:]( &OBJC_CLASS___NEPolicyCondition,  "domain:",  *(void *)(*((void *)&v184 + 1) + 8 * v89)));
                int v92 = sub_10002EA48(v21[4]);
                uint64_t v93 = (v92 + v90 + 10);
                uint64_t v94 = (v175 + v90);
                v180 = (void *)v91;
                if (v178)
                {
                  v211[0] = v183;
                  v211[1] = v91;
                  v211[2] = v178;
                  objc_opt_self(&OBJC_CLASS___NESMPolicySession);
                  v95 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  0LL,  0LL));
                  v211[3] = v95;
                  v211[4] = v182;
                  id v96 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v211,  5LL));

                  id v98 = [[NEPolicy alloc] initWithOrder:v93 result:v48 conditions:v96];
                  uint64_t v99 = (void *)v21[4];
                  if (v99) {
                    id v100 = objc_getProperty(v99, v97, 88LL, 1);
                  }
                  else {
                    id v100 = 0LL;
                  }
                  sub_10002E57C(v181, v98, v100);

                  id v102 = [[NEPolicy alloc] initWithOrder:v94 result:v173 conditions:v96];
                  id v103 = (void *)v21[4];
                  if (v103) {
                    id v104 = objc_getProperty(v103, v101, 88LL, 1);
                  }
                  else {
                    id v104 = 0LL;
                  }
                  sub_10002E57C(v181, v102, v104);

                  if (v21[9] == 1)
                  {
                    v210[0] = v183;
                    v210[1] = v180;
                    v210[2] = v178;
                    objc_opt_self(&OBJC_CLASS___NESMPolicySession);
                    id v105 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  300LL,  899LL));
                    v210[3] = v105;
                    id v106 = v210;
                  }

                  else
                  {
                    v209[0] = v183;
                    v209[1] = v180;
                    v209[2] = v178;
                    objc_opt_self(&OBJC_CLASS___NESMPolicySession);
                    id v105 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  200LL,  899LL));
                    v209[3] = v105;
                    id v106 = v209;
                  }

                  uint64_t v119 = (v92 + v90 + 11);
                  v106[4] = v182;
                  uint64_t v120 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:"));

                  id v122 = [[NEPolicy alloc] initWithOrder:v119 result:v48 conditions:v120];
                  uint64_t v123 = (void *)v21[4];
                  if (v123) {
                    id v124 = objc_getProperty(v123, v121, 88LL, 1);
                  }
                  else {
                    id v124 = 0LL;
                  }
                  sub_10002E57C(v181, v122, v124);

                  id v126 = [[NEPolicy alloc] initWithOrder:(v175 + v90 + 1) result:v173 conditions:v120];
                  id v127 = (void *)v21[4];
                  if (v127) {
                    id v128 = objc_getProperty(v127, v125, 88LL, 1);
                  }
                  else {
                    id v128 = 0LL;
                  }
                  sub_10002E57C(v181, v126, v128);

                  id v129 = objc_alloc(&OBJC_CLASS___NEPolicy);
                  v208[0] = v183;
                  v208[1] = v180;
                  v208[2] = v178;
                  v208[3] = v182;
                  id v130 = v208;
                  uint64_t v131 = 4LL;
                }

                else
                {
                  v207[0] = v183;
                  v207[1] = v91;
                  objc_opt_self(&OBJC_CLASS___NESMPolicySession);
                  char v107 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  0LL,  0LL));
                  v207[2] = v107;
                  v207[3] = v182;
                  uint64_t v108 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v207,  4LL));

                  id v110 = [[NEPolicy alloc] initWithOrder:v93 result:v48 conditions:v108];
                  id v111 = (void *)v21[4];
                  if (v111) {
                    id v112 = objc_getProperty(v111, v109, 88LL, 1);
                  }
                  else {
                    id v112 = 0LL;
                  }
                  sub_10002E57C(v181, v110, v112);

                  id v114 = [[NEPolicy alloc] initWithOrder:v94 result:v173 conditions:v108];
                  uint64_t v115 = (void *)v21[4];
                  if (v115) {
                    id v116 = objc_getProperty(v115, v113, 88LL, 1);
                  }
                  else {
                    id v116 = 0LL;
                  }
                  sub_10002E57C(v181, v114, v116);

                  if (v21[9] == 1)
                  {
                    v206[0] = v183;
                    v206[1] = v180;
                    objc_opt_self(&OBJC_CLASS___NESMPolicySession);
                    uint64_t v117 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  300LL,  899LL));
                    v206[2] = v117;
                    uint64_t v118 = v206;
                  }

                  else
                  {
                    v205[0] = v183;
                    v205[1] = v180;
                    objc_opt_self(&OBJC_CLASS___NESMPolicySession);
                    uint64_t v117 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  200LL,  899LL));
                    v205[2] = v117;
                    uint64_t v118 = v205;
                  }

                  uint64_t v132 = (v92 + v90 + 11);
                  v118[3] = v182;
                  uint64_t v120 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:"));

                  id v134 = [[NEPolicy alloc] initWithOrder:v132 result:v48 conditions:v120];
                  v135 = (void *)v21[4];
                  if (v135) {
                    id v136 = objc_getProperty(v135, v133, 88LL, 1);
                  }
                  else {
                    id v136 = 0LL;
                  }
                  sub_10002E57C(v181, v134, v136);

                  id v138 = [[NEPolicy alloc] initWithOrder:(v175 + v90 + 1) result:v173 conditions:v120];
                  id v139 = (void *)v21[4];
                  if (v139) {
                    id v140 = objc_getProperty(v139, v137, 88LL, 1);
                  }
                  else {
                    id v140 = 0LL;
                  }
                  sub_10002E57C(v181, v138, v140);

                  id v129 = objc_alloc(&OBJC_CLASS___NEPolicy);
                  v204[0] = v183;
                  v204[1] = v180;
                  v204[2] = v182;
                  id v130 = v204;
                  uint64_t v131 = 3LL;
                }

                id v141 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v130,  v131));
                id v143 = [v129 initWithOrder:80 result:v167 conditions:v141];
                uint64_t v144 = (void *)v21[4];
                if (v144) {
                  id v145 = objc_getProperty(v144, v142, 96LL, 1);
                }
                else {
                  id v145 = 0LL;
                }
                sub_10002CECC(v181, v143, v145);

                uint64_t v89 = v171 + 1;
                v90 += 2;
              }

              while (v169 != (id)(v171 + 1));
              int v88 = v164 + v89;
              id v146 = [v165 countByEnumeratingWithState:&v184 objects:v212 count:16];
              id v169 = v146;
            }

            while (v146);
          }

          else
          {
            int v88 = v163;
          }

          int v163 = v88;

          int v36 = v177;
        }

        uint64_t v19 = v178;
LABEL_130:

        uint64_t v37 = v162 + 1;
      }

      while ((id)(v162 + 1) != v161);
      id v161 = [obj countByEnumeratingWithState:&v200 objects:v223 count:16];
      if (!v161)
      {
LABEL_132:
        uint64_t v27 = v158;
        goto LABEL_145;
      }
    }
  }

  if (v20 == (id)1)
  {
    int v22 = sub_10002EA48(*(void *)(a1 + 32));
    uint64_t v23 = (v22 + 10);
    uint64_t v24 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](&OBJC_CLASS___NEPolicyResult, "netAgentUUID:", *(void *)(a1 + 56)));
    if (v19)
    {
      v229[0] = v183;
      v229[1] = v19;
      objc_opt_self(&OBJC_CLASS___NESMPolicySession);
      BOOL v25 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  0LL,  0LL));
      v229[2] = v25;
      v229[3] = v182;
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v229, 4LL));

      uint64_t v27 = (void *)v24;
      id v29 = [[NEPolicy alloc] initWithOrder:v23 result:v24 conditions:v26];
      id v30 = *(void **)(a1 + 32);
      if (v30) {
        id v31 = objc_getProperty(v30, v28, 88LL, 1);
      }
      else {
        id v31 = 0LL;
      }
      sub_10002E57C((BOOL)v4, v29, v31);

      uint64_t v32 = (v22 + 11);
      if (*(void *)(a1 + 72) == 1LL)
      {
        v228[0] = v183;
        v228[1] = v178;
        objc_opt_self(&OBJC_CLASS___NESMPolicySession);
        id v33 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  300LL,  899LL));
        v228[2] = v33;
        id v34 = v228;
      }

      else
      {
        v227[0] = v183;
        v227[1] = v178;
        objc_opt_self(&OBJC_CLASS___NESMPolicySession);
        id v33 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  200LL,  899LL));
        v227[2] = v33;
        id v34 = v227;
      }

      v34[3] = v182;
    }

    else
    {
      v226[0] = v183;
      objc_opt_self(&OBJC_CLASS___NESMPolicySession);
      uint64_t v147 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  0LL,  0LL));
      v226[1] = v147;
      v226[2] = v182;
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v226, 3LL));

      uint64_t v27 = (void *)v24;
      id v149 = [[NEPolicy alloc] initWithOrder:v23 result:v24 conditions:v26];
      id v150 = *(void **)(a1 + 32);
      if (v150) {
        id v151 = objc_getProperty(v150, v148, 88LL, 1);
      }
      else {
        id v151 = 0LL;
      }
      sub_10002E57C((BOOL)v4, v149, v151);

      uint64_t v32 = (v22 + 11);
      if (*(void *)(a1 + 72) == 1LL)
      {
        v225[0] = v183;
        objc_opt_self(&OBJC_CLASS___NESMPolicySession);
        id v33 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  300LL,  899LL));
        v225[1] = v33;
        id v152 = v225;
      }

      else
      {
        v224[0] = v183;
        objc_opt_self(&OBJC_CLASS___NESMPolicySession);
        id v33 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  200LL,  899LL));
        v224[1] = v33;
        id v152 = v224;
      }

      v152[2] = v182;
    }

    uint64_t v153 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:"));

    id obj = (id)v153;
    id v155 = [[NEPolicy alloc] initWithOrder:v32 result:v27 conditions:v153];
    CFArrayRef v156 = (void *)v21[4];
    if (v156) {
      id v157 = objc_getProperty(v156, v154, 88LL, 1);
    }
    else {
      id v157 = 0LL;
    }
    uint64_t v19 = v178;
    sub_10002E57C((BOOL)v4, v155, v157);

LABEL_145:
    uint64_t v17 = sub_10002C620(v4);
  }

  else
  {
    uint64_t v17 = 0LL;
  }

LABEL_11:
  return v17;
}

uint64_t sub_100031BE4(uint64_t a1, void *a2)
{
  id v4 = a2;
  unsigned int v5 = *(void **)(a1 + 32);
  if (v5) {
    id Property = objc_getProperty(v5, v3, 88LL, 1);
  }
  else {
    id Property = 0LL;
  }
  sub_10002C4C8(v4, Property);
  uint64_t v8 = *(void **)(a1 + 32);
  if (v8) {
    id v9 = objc_getProperty(v8, v7, 96LL, 1);
  }
  else {
    id v9 = 0LL;
  }
  sub_10002D64C(v4, v9);
  if ([*(id *)(a1 + 40) action] == (id)4 || objc_msgSend(*(id *)(a1 + 40), "action") == (id)2)
  {
    if ([*(id *)(a1 + 40) action] == (id)2)
    {
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void **)(a1 + 48);
      uint64_t v12 = *(void **)(a1 + 56);
      v59[0] = _NSConcreteStackBlock;
      v59[1] = 3221225472LL;
      v59[2] = sub_100032054;
      v59[3] = &unk_1000BDBA0;
      id v13 = v4;
      uint64_t v14 = *(void *)(a1 + 32);
      id v60 = v13;
      uint64_t v61 = v14;
      sub_1000320B0(v10, v11, 0, 1, 0LL, v12, v13, v59, &stru_1000BDBE0);
    }

    sub_10002C620(v4);
    uint64_t v15 = 1LL;
  }

  else
  {
    id v45 = v4;
    id v43 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](&OBJC_CLASS___NEPolicyResult, "netAgentUUID:", *(void *)(a1 + 64)));
    uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
    id v16 = +[NEPolicyResult skipWithOrder:]( &OBJC_CLASS___NEPolicyResult,  "skipWithOrder:",  sub_10002EA48(*(void *)(a1 + 32)) + 250);
    id v41 = (void *)objc_claimAutoreleasedReturnValue(v16);
    unsigned int v42 = sub_10002EA48(*(void *)(a1 + 32)) + 10;
    __int128 v55 = 0u;
    __int128 v56 = 0u;
    __int128 v57 = 0u;
    __int128 v58 = 0u;
    uint64_t v17 = (void *)a1;
    id v18 = *(id *)(a1 + 72);
    id v19 = [v18 countByEnumeratingWithState:&v55 objects:v63 count:16];
    if (v19)
    {
      id v20 = v19;
      uint64_t v21 = *(void *)v56;
      do
      {
        int v22 = 0LL;
        do
        {
          if (*(void *)v56 != v21) {
            objc_enumerationMutation(v18);
          }
          uint64_t v23 = *(void **)(*((void *)&v55 + 1) + 8LL * (void)v22);
          if (isa_nsstring(v23))
          {
            uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet characterSetWithCharactersInString:]( &OBJC_CLASS___NSCharacterSet,  "characterSetWithCharactersInString:",  @"*."));
            BOOL v25 = (void *)objc_claimAutoreleasedReturnValue([v23 stringByTrimmingCharactersInSet:v24]);
            if ([v25 length])
            {
              v62[0] = v44;
              uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](&OBJC_CLASS___NEPolicyCondition, "domain:", v25));
              v62[1] = v26;
              uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v62,  2LL));

              id v29 = [[NEPolicy alloc] initWithOrder:v42 result:v43 conditions:v27];
              id v30 = (void *)v17[4];
              if (v30) {
                id v31 = objc_getProperty(v30, v28, 88LL, 1);
              }
              else {
                id v31 = 0LL;
              }
              sub_10002E57C((BOOL)v45, v29, v31);
            }
          }

          int v22 = (char *)v22 + 1;
        }

        while (v20 != v22);
        id v32 = [v18 countByEnumeratingWithState:&v55 objects:v63 count:16];
        id v20 = v32;
      }

      while (v32);
    }

    uint64_t v33 = v17[4];
    id v35 = (void *)v17[6];
    id v34 = (void *)v17[7];
    v50[0] = _NSConcreteStackBlock;
    v50[1] = 3221225472LL;
    v50[2] = sub_100033324;
    v50[3] = &unk_1000BDC08;
    id v4 = v45;
    unsigned int v54 = v42;
    id v51 = v45;
    id v52 = v43;
    uint64_t v53 = v17[4];
    v46[0] = _NSConcreteStackBlock;
    v46[1] = 3221225472LL;
    void v46[2] = sub_1000333E0;
    v46[3] = &unk_1000BDC30;
    id v36 = v51;
    uint64_t v37 = v17[4];
    id v47 = v36;
    uint64_t v48 = v37;
    id v49 = v41;
    id v38 = v41;
    id v39 = v43;
    sub_1000320B0(v33, v35, 0, 1, 0LL, v34, v36, v50, v46);
    uint64_t v15 = sub_10002C620(v36);
  }

  return v15;
}

void sub_100032054(uint64_t a1, void *a2)
{
  id v7 = a2;
  uint64_t v5 = *(void *)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  if (v4) {
    id Property = objc_getProperty(v4, v3, 96LL, 1);
  }
  else {
    id Property = 0LL;
  }
  sub_10002E434(v5, v7, Property);
}

void sub_1000320B0(uint64_t a1, void *a2, int a3, int a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  id v130 = a2;
  id v15 = a5;
  id v132 = a6;
  id v142 = a7;
  id v16 = a8;
  int v163 = a9;
  uint64_t v143 = a1;
  if (a1)
  {
    uint64_t v131 = v15;
    uint64_t v17 = &AnalyticsSendEventLazy_ptr;
    if (a4) {
      id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
    }
    else {
      id v18 = 0LL;
    }
    __int128 v233 = 0u;
    __int128 v232 = 0u;
    __int128 v231 = 0u;
    __int128 v230 = 0u;
    id obj = v130;
    id v134 = [obj countByEnumeratingWithState:&v230 objects:v250 count:16];
    if (v134)
    {
      char v146 = 0;
      uint64_t v133 = *(void *)v231;
      do
      {
        uint64_t v19 = 0LL;
        do
        {
          if (*(void *)v231 != v133)
          {
            uint64_t v20 = v19;
            objc_enumerationMutation(obj);
            uint64_t v19 = v20;
          }

          uint64_t v136 = v19;
          uint64_t v21 = *(void **)(*((void *)&v230 + 1) + 8 * v19);
          id v138 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
          int v22 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
          id v158 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
          id v148 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
          id v151 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v21 cachedMachOUUIDs]);
          id v149 = v21;
          if ([v23 count] && objc_msgSend(v131, "count"))
          {
            v228[0] = _NSConcreteStackBlock;
            v228[1] = 3221225472LL;
            v228[2] = sub_100033480;
            v228[3] = &unk_1000BDE88;
            id v229 = v131;
            uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithBlock:](&OBJC_CLASS___NSPredicate, "predicateWithBlock:", v228));
            uint64_t v25 = objc_claimAutoreleasedReturnValue([v23 filteredArrayUsingPredicate:v24]);
            uint64_t v26 = v23;
            uint64_t v23 = (void *)v25;
          }

          v135 = v23;
          if (isa_nsarray(v23))
          {
            __int128 v227 = 0u;
            __int128 v226 = 0u;
            __int128 v225 = 0u;
            __int128 v224 = 0u;
            id v27 = v23;
            id v28 = [v27 countByEnumeratingWithState:&v224 objects:v249 count:16];
            if (v28)
            {
              id v29 = v28;
              uint64_t v30 = *(void *)v225;
              do
              {
                for (id i = 0LL; i != v29; id i = (char *)i + 1)
                {
                  if (*(void *)v225 != v30) {
                    objc_enumerationMutation(v27);
                  }
                  id v32 = (void *)objc_claimAutoreleasedReturnValue( [v17[171] effectiveApplication:*(void *)(*((void *)&v224 + 1) + 8 * (void)i)]);
                  -[NSMutableArray addObject:](v138, "addObject:", v32);
                }

                id v29 = [v27 countByEnumeratingWithState:&v224 objects:v249 count:16];
              }

              while (v29);
            }

            uint64_t v21 = v149;
          }

          uint64_t v33 = v158;
          if (-[NSMutableArray count](v138, "count"))
          {
            id v34 = (void *)objc_claimAutoreleasedReturnValue([v21 matchDomains]);
            int v35 = isa_nsarray(v34);

            if (v35)
            {
              id v36 = (void *)objc_claimAutoreleasedReturnValue([v21 matchDomains]);
              id v37 = [v36 count];

              if ((unint64_t)v37 <= 0xFA)
              {
                __int128 v223 = 0u;
                __int128 v222 = 0u;
                __int128 v221 = 0u;
                __int128 v220 = 0u;
                id v39 = (void *)objc_claimAutoreleasedReturnValue([v21 matchDomains]);
                id v40 = [v39 countByEnumeratingWithState:&v220 objects:v248 count:16];
                if (v40)
                {
                  id v41 = v40;
                  uint64_t v42 = *(void *)v221;
                  do
                  {
                    for (j = 0LL; j != v41; j = (char *)j + 1)
                    {
                      if (*(void *)v221 != v42) {
                        objc_enumerationMutation(v39);
                      }
                      uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue( [v17[171] domain:*(void *)(*((void *)&v220 + 1) + 8 * (void)j)]);
                      -[NSMutableArray addObject:](v22, "addObject:", v44);
                    }

                    id v41 = [v39 countByEnumeratingWithState:&v220 objects:v248 count:16];
                  }

                  while (v41);
                }

                uint64_t v33 = v158;
              }

              else
              {
                char v146 = 1;
              }
            }

            id v45 = (void *)objc_claimAutoreleasedReturnValue([v149 matchAccountIdentifiers]);
            int v46 = isa_nsarray(v45);

            if (v46)
            {
              __int128 v219 = 0u;
              __int128 v218 = 0u;
              __int128 v217 = 0u;
              __int128 v216 = 0u;
              id v47 = (void *)objc_claimAutoreleasedReturnValue([v149 matchAccountIdentifiers]);
              id v48 = [v47 countByEnumeratingWithState:&v216 objects:v247 count:16];
              if (v48)
              {
                id v49 = v48;
                uint64_t v50 = *(void *)v217;
                do
                {
                  for (k = 0LL; k != v49; k = (char *)k + 1)
                  {
                    if (*(void *)v217 != v50) {
                      objc_enumerationMutation(v47);
                    }
                    id v52 = (void *)objc_claimAutoreleasedReturnValue( [v17[171] accountIdentifier:*(void *)(*((void *)&v216 + 1) + 8 * (void)k)]);
                    -[NSMutableArray addObject:](v158, "addObject:", v52);
                  }

                  id v49 = [v47 countByEnumeratingWithState:&v216 objects:v247 count:16];
                }

                while (v49);
              }

              uint64_t v33 = v158;
            }

            int v53 = isa_nsarray(v132);
            if (v163 && v53)
            {
              __int128 v215 = 0u;
              __int128 v214 = 0u;
              __int128 v213 = 0u;
              __int128 v212 = 0u;
              id v54 = v132;
              id v55 = [v54 countByEnumeratingWithState:&v212 objects:v246 count:16];
              if (v55)
              {
                id v56 = v55;
                uint64_t v57 = *(void *)v213;
                do
                {
                  for (m = 0LL; m != v56; m = (char *)m + 1)
                  {
                    if (*(void *)v213 != v57) {
                      objc_enumerationMutation(v54);
                    }
                    id v59 = (void *)objc_claimAutoreleasedReturnValue( [v17[171] domain:*(void *)(*((void *)&v212 + 1) + 8 * (void)m)]);
                    -[NSMutableArray addObject:](v151, "addObject:", v59);
                  }

                  id v56 = [v54 countByEnumeratingWithState:&v212 objects:v246 count:16];
                }

                while (v56);
              }

              uint64_t v33 = v158;
            }

            __int128 v211 = 0u;
            __int128 v209 = 0u;
            __int128 v210 = 0u;
            __int128 v208 = 0u;
            id v137 = v138;
            id v38 = v148;
            id v60 = v149;
            id v140 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v137,  "countByEnumeratingWithState:objects:count:",  &v208,  v245,  16LL);
            if (v140)
            {
              uint64_t v139 = *(void *)v209;
              uint64_t v153 = v22;
              do
              {
                uint64_t v61 = 0LL;
                do
                {
                  if (*(void *)v209 != v139)
                  {
                    uint64_t v62 = v61;
                    objc_enumerationMutation(v137);
                    uint64_t v61 = v62;
                  }

                  uint64_t v141 = v61;
                  uint64_t v63 = *(void *)(*((void *)&v208 + 1) + 8 * v61);
                  if (-[NSMutableArray count](v38, "count"))
                  {
                    __int128 v206 = 0u;
                    __int128 v207 = 0u;
                    __int128 v204 = 0u;
                    __int128 v205 = 0u;
                    id v145 = v38;
                    id v152 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v145,  "countByEnumeratingWithState:objects:count:",  &v204,  v244,  16LL);
                    if (!v152) {
                      goto LABEL_180;
                    }
                    uint64_t v150 = *(void *)v205;
                    while (1)
                    {
                      uint64_t v64 = 0LL;
                      do
                      {
                        if (*(void *)v205 != v150) {
                          objc_enumerationMutation(v145);
                        }
                        uint64_t v154 = v64;
                        uint64_t v65 = *(void *)(*((void *)&v204 + 1) + 8 * v64);
                        if (-[NSMutableArray count](v153, "count"))
                        {
                          __int128 v202 = 0u;
                          __int128 v203 = 0u;
                          __int128 v200 = 0u;
                          __int128 v201 = 0u;
                          int v66 = v153;
                          id v159 = -[NSArray countByEnumeratingWithState:objects:count:]( v66,  "countByEnumeratingWithState:objects:count:",  &v200,  v243,  16LL);
                          if (v159)
                          {
                            uint64_t v67 = *(void *)v201;
                            id v68 = v158;
                            uint64_t v155 = *(void *)v201;
                            CFArrayRef v156 = v66;
                            do
                            {
                              for (n = 0LL; n != v159; n = (char *)n + 1)
                              {
                                if (*(void *)v201 != v67) {
                                  objc_enumerationMutation(v66);
                                }
                                uint64_t v70 = *(void *)(*((void *)&v200 + 1) + 8LL * (void)n);
                                if (-[NSMutableArray count](v68, "count"))
                                {
                                  id v161 = n;
                                  __int128 v198 = 0u;
                                  __int128 v199 = 0u;
                                  __int128 v196 = 0u;
                                  __int128 v197 = 0u;
                                  id v71 = v68;
                                  id v72 = -[NSArray countByEnumeratingWithState:objects:count:]( v71,  "countByEnumeratingWithState:objects:count:",  &v196,  v242,  16LL);
                                  if (v72)
                                  {
                                    id v73 = v72;
                                    uint64_t v74 = *(void *)v197;
                                    do
                                    {
                                      for (iid i = 0LL; ii != v73; iid i = (char *)ii + 1)
                                      {
                                        if (*(void *)v197 != v74) {
                                          objc_enumerationMutation(v71);
                                        }
                                        uint64_t v76 = -[NSArray initWithObjects:]( objc_alloc(&OBJC_CLASS___NSArray),  "initWithObjects:",  v63,  v65,  v70,  *(void *)(*((void *)&v196 + 1) + 8LL * (void)ii),  v18,  0LL);
                                        v16[2](v16, v76, 0LL);
                                      }

                                      id v73 = -[NSArray countByEnumeratingWithState:objects:count:]( v71,  "countByEnumeratingWithState:objects:count:",  &v196,  v242,  16LL);
                                    }

                                    while (v73);
                                    int v66 = v156;
                                    id v68 = v158;
                                    uint64_t v67 = v155;
                                  }

                                  n = v161;
                                }

                                else
                                {
                                  id v71 = -[NSArray initWithObjects:]( objc_alloc(&OBJC_CLASS___NSArray),  "initWithObjects:",  v63,  v65,  v70,  v18,  0LL);
                                  v16[2](v16, v71, 0LL);
                                }
                              }

                              id v159 = -[NSArray countByEnumeratingWithState:objects:count:]( v66,  "countByEnumeratingWithState:objects:count:",  &v200,  v243,  16LL);
                            }

                            while (v159);
                          }

                          else
                          {
                            id v68 = v158;
                          }

LABEL_109:
                          goto LABEL_110;
                        }

                        if ((v146 & 1) == 0)
                        {
                          id v68 = v158;
                          if (-[NSMutableArray count](v158, "count"))
                          {
                            __int128 v190 = 0u;
                            __int128 v191 = 0u;
                            __int128 v188 = 0u;
                            __int128 v189 = 0u;
                            int v66 = v158;
                            id v87 = -[NSArray countByEnumeratingWithState:objects:count:]( v66,  "countByEnumeratingWithState:objects:count:",  &v188,  v240,  16LL);
                            if (v87)
                            {
                              id v88 = v87;
                              uint64_t v89 = v66;
                              uint64_t v90 = *(void *)v189;
                              do
                              {
                                for (jj = 0LL; jj != v88; jj = (char *)jj + 1)
                                {
                                  if (*(void *)v189 != v90) {
                                    objc_enumerationMutation(v89);
                                  }
                                  int v92 = -[NSArray initWithObjects:]( objc_alloc(&OBJC_CLASS___NSArray),  "initWithObjects:",  v63,  v65,  *(void *)(*((void *)&v188 + 1) + 8LL * (void)jj),  v18,  0LL);
                                  v16[2](v16, v92, 0LL);
                                }

                                id v88 = -[NSArray countByEnumeratingWithState:objects:count:]( v89,  "countByEnumeratingWithState:objects:count:",  &v188,  v240,  16LL);
                              }

                              while (v88);
                              id v68 = v158;
                              int v66 = v89;
                            }
                          }

                          else
                          {
                            int v66 = -[NSArray initWithObjects:]( objc_alloc(&OBJC_CLASS___NSArray),  "initWithObjects:",  v63,  v65,  v18,  0LL);
                            v16[2](v16, v66, 0LL);
                          }

                          goto LABEL_109;
                        }

                        id v77 = (void *)objc_claimAutoreleasedReturnValue([v60 matchDomains]);
                        v78 = (void *)objc_claimAutoreleasedReturnValue([v60 matchSigningIdentifier]);
                        uint64_t v79 = sub_1000334A0(v143, v77, v78, obj, v142);

                        id v68 = v158;
                        if (v79)
                        {
                          int v66 = (NSArray *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition domainFilter:]( &OBJC_CLASS___NEPolicyCondition,  "domainFilter:",  v79));
                          if (-[NSMutableArray count](v158, "count"))
                          {
                            __int128 v194 = 0u;
                            __int128 v195 = 0u;
                            __int128 v192 = 0u;
                            __int128 v193 = 0u;
                            id v80 = v158;
                            id v81 = -[NSArray countByEnumeratingWithState:objects:count:]( v80,  "countByEnumeratingWithState:objects:count:",  &v192,  v241,  16LL);
                            if (v81)
                            {
                              id v82 = v81;
                              id v83 = v66;
                              uint64_t v84 = *(void *)v193;
                              do
                              {
                                for (kk = 0LL; kk != v82; kk = (char *)kk + 1)
                                {
                                  if (*(void *)v193 != v84) {
                                    objc_enumerationMutation(v80);
                                  }
                                  uint64_t v86 = -[NSArray initWithObjects:]( objc_alloc(&OBJC_CLASS___NSArray),  "initWithObjects:",  v63,  v65,  v83,  *(void *)(*((void *)&v192 + 1) + 8LL * (void)kk),  v18,  0LL);
                                  v16[2](v16, v86, 0LL);
                                }

                                id v82 = -[NSArray countByEnumeratingWithState:objects:count:]( v80,  "countByEnumeratingWithState:objects:count:",  &v192,  v241,  16LL);
                              }

                              while (v82);
                              id v68 = v158;
                              int v66 = v83;
                            }
                          }

                          else
                          {
                            id v80 = -[NSArray initWithObjects:]( objc_alloc(&OBJC_CLASS___NSArray),  "initWithObjects:",  v63,  v65,  v66,  v18,  0LL);
                            v16[2](v16, v80, 0LL);
                          }

                          goto LABEL_109;
                        }

void sub_100033324(uint64_t a1, void *a2)
{
  id v12 = a2;
  uint64_t v3 = *(void *)(a1 + 32);
  id v5 = [[NEPolicy alloc] initWithOrder:*(unsigned int *)(a1 + 56) result:*(void *)(a1 + 40) conditions:v12];
  id v6 = *(void **)(a1 + 48);
  if (v6) {
    id Property = objc_getProperty(v6, v4, 88LL, 1);
  }
  else {
    id Property = 0LL;
  }
  sub_10002E57C(v3, v5, Property);

  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void **)(a1 + 48);
  if (v10) {
    id v11 = objc_getProperty(v10, v8, 96LL, 1);
  }
  else {
    id v11 = 0LL;
  }
  sub_10002E434(v9, v12, v11);
}

void sub_1000333E0(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = a2;
  id v8 = [[NEPolicy alloc] initWithOrder:sub_10002EA48(a1[5]) + 5 result:a1[6] conditions:v4];

  id v6 = (void *)a1[5];
  if (v6) {
    id Property = objc_getProperty(v6, v5, 88LL, 1);
  }
  else {
    id Property = 0LL;
  }
  sub_10002E57C(v3, v8, Property);
}

uint64_t sub_100033480(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) containsObject:a2] ^ 1;
}

uint64_t sub_1000334A0(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  id v12 = v11;
  if (!v11) {
    goto LABEL_45;
  }
  uint64_t v13 = sub_10002E77C(v11, v9);
  if (v13) {
    goto LABEL_46;
  }
  os_unfair_lock_assert_owner((os_unfair_lock_t)&unk_1000CFBB0);
  if (objc_msgSend(objc_getProperty(v12, v14, 48, 1), "count"))
  {
    id v15 = 0LL;
    *(void *)uint64_t v155 = 0LL;
    while (1)
    {
      id v16 = v15;
      id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NEVPNApp findRuleWithSameDomains:matchSigningIdentifier:startIndex:]( &OBJC_CLASS___NEVPNApp,  "findRuleWithSameDomains:matchSigningIdentifier:startIndex:",  v10,  v9,  v155));

      if (!v15) {
        break;
      }
      uint64_t v17 = sub_10002E77C(v12, v15);
      if (v17)
      {
        uint64_t v13 = v17;
        id v18 = v9;
        os_unfair_lock_assert_owner((os_unfair_lock_t)&unk_1000CFBB0);
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v13));
        objc_msgSend(objc_getProperty(v12, v20, 48, 1), "setObject:forKeyedSubscript:", v19, v18);

        goto LABEL_46;
      }
    }
  }

  if (!v8 || ![v8 count])
  {
LABEL_45:
    uint64_t v13 = 0LL;
    goto LABEL_46;
  }

  uint64_t v108 = v12;
  id v109 = v10;
  id v106 = v9;
  id v107 = v8;
  id v21 = v8;
  id v114 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v115 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  int v22 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  memset(v168, 0, sizeof(v168));
  __int128 v167 = 0u;
  __int128 v166 = 0u;
  __int128 v165 = 0u;
  __int128 v164 = 0u;
  __int128 v163 = 0u;
  __int128 v162 = 0u;
  __int128 v161 = 0u;
  __int128 v160 = 0u;
  __int128 v159 = 0u;
  __int128 v158 = 0u;
  __int128 v157 = 0u;
  __int128 v156 = 0u;
  memset(v155, 0, sizeof(v155));
  __int128 v134 = 0u;
  __int128 v135 = 0u;
  __int128 v136 = 0u;
  __int128 v137 = 0u;
  id obj = v21;
  id v23 = [obj countByEnumeratingWithState:&v134 objects:v154 count:16];
  if (!v23)
  {
    uint64_t v111 = 0LL;
    goto LABEL_48;
  }

  id v24 = v23;
  uint64_t v111 = 0LL;
  uint64_t v25 = *(void *)v135;
  do
  {
    for (id i = 0LL; i != v24; id i = (char *)i + 1)
    {
      if (*(void *)v135 != v25) {
        objc_enumerationMutation(obj);
      }
      id v27 = objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*((void *)&v134 + 1) + 8 * (void)i), "lowercaseString", v106));
      id v28 = (uint8_t *)[v27 UTF8String];
      size_t v29 = strlen((const char *)v28);
      int v30 = v29;
      uint64_t v32 = ne_log_obj(v29, v31);
      uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412802;
        *(void *)id v151 = a1;
        *(_WORD *)&v151[8] = 2080;
        *(void *)&v151[10] = v28;
        __int16 v152 = 1024;
        int v153 = v30;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "%@ perApp VPN domain %s <%d>",  buf,  0x1Cu);
      }

      BOOL v34 = *v28 == 46;
      if (*v28 == 46) {
        ++v28;
      }
      uint64_t v35 = (v30 - v34);
      LODWORD(v130) = 0;
      has_high_asciid i = ne_trie_has_high_ascii(v28, (int)v35);
      if (!(_DWORD)has_high_ascii) {
        goto LABEL_30;
      }
      uint64_t v38 = ne_log_obj(has_high_ascii, v37);
      id v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)id v151 = v28;
        *(_WORD *)&v151[8] = 1024;
        *(_DWORD *)&v151[10] = v35;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEBUG,  "perApp VPN domain - puny-coding %s <%d>",  buf,  0x12u);
      }

      uint64_t v40 = ne_tracker_validate_domain(v28, v35, sub_10000E940, buf, 253LL, &v130);
      if ((_DWORD)v40) {
        BOOL v42 = (int)v130 < 1;
      }
      else {
        BOOL v42 = 1;
      }
      if (!v42 && (int)v130 < 254)
      {
        buf[v130] = 0;
        uint64_t v43 = ne_log_obj(v40, v41);
        uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)char v146 = 136315394;
          uint64_t v147 = v28;
          __int16 v148 = 2080;
          id v149 = buf;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEBUG,  "perApp VPN domain - puny-coded %s -> %s",  v146,  0x16u);
        }

        id v28 = buf;
LABEL_30:
        unsigned int v45 = strlen((const char *)v28);
        if (v45 - 255 >= 0xFFFFFF02)
        {
          uint64_t v47 = v45 - 1LL;
          id v48 = v155;
          do
            *v48++ = v28[v47--];
          while (v47 != -1);
          int v46 = v155;
          v155[v45] = 0;
        }

        else
        {
          int v46 = 0LL;
        }

        id v49 = -[NSString initWithCString:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithCString:encoding:",  v46,  4LL);
        uint64_t v50 = -[NSString initWithCString:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithCString:encoding:",  v28,  4LL);
        id v51 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v115, "objectForKeyedSubscript:", v49));

        if (!v51) {
          -[NSMutableDictionary setObject:forKeyedSubscript:](v115, "setObject:forKeyedSubscript:", v50, v49);
        }
        id v52 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v114, "objectForKeyedSubscript:", v50));

        if (!v52)
        {
          -[NSMutableDictionary setObject:forKeyedSubscript:](v114, "setObject:forKeyedSubscript:", v50, v50);
          v111 += -[NSString length](v50, "length");
        }

        goto LABEL_42;
      }

      uint64_t v53 = ne_log_obj(v40, v41);
      id v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)char v146 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "Failed to puny-code domain", v146, 2u);
      }

uint64_t sub_10003414C(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v86 = sub_10002EA48(*(void *)(a1 + 32));
  uint64_t v4 = ((uint64_t (*)(void))ne_log_large_obj)();
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    id Property = *(id *)(a1 + 32);
    uint64_t v70 = *(void *)(a1 + 40);
    if (Property) {
      id Property = objc_getProperty(Property, v6, 64LL, 1);
    }
    int buffer = 138412546;
    uint64_t v94 = v70;
    __int16 v95 = 2112;
    id v96 = Property;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "control Policy IDs to be removed %@: %@",  (uint8_t *)&buffer,  0x16u);
  }

  id v8 = *(void **)(a1 + 32);
  if (v8) {
    id v9 = objc_getProperty(v8, v7, 64LL, 1);
  }
  else {
    id v9 = 0LL;
  }
  BOOL v10 = sub_10002C4C8(v3, v9);
  uint64_t v11 = ne_log_large_obj(v10);
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    id v71 = *(id *)(a1 + 32);
    uint64_t v72 = *(void *)(a1 + 40);
    if (v71) {
      id v71 = objc_getProperty(v71, v13, 72LL, 1);
    }
    int buffer = 138412546;
    uint64_t v94 = v72;
    __int16 v95 = 2112;
    id v96 = v71;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "low control Policy IDs to be removed %@: %@",  (uint8_t *)&buffer,  0x16u);
  }

  id v15 = *(void **)(a1 + 32);
  if (v15) {
    id v16 = objc_getProperty(v15, v14, 72LL, 1);
  }
  else {
    id v16 = 0LL;
  }
  sub_10002D64C(v3, v16);
  if (isa_nsarray(*(void *)(a1 + 48))
    && [*(id *)(a1 + 48) count]
    && *(void *)(a1 + 40))
  {
    id v80 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult scopeSocketToInterfaceName:]( &OBJC_CLASS___NEPolicyResult,  "scopeSocketToInterfaceName:"));
    uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:]( &OBJC_CLASS___NEPolicyResult,  "tunnelIPToInterfaceName:secondaryResultType:",  *(void *)(a1 + 40),  1LL));
    if (*(_BYTE *)(a1 + 56))
    {
      uint64_t v17 = sub_1000348A8(*(void *)(a1 + 32), *(void **)(a1 + 40), @"DNSAgent");
      uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue(v17);
      uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](&OBJC_CLASS___NEPolicyResult, "netAgentUUID:"));
    }

    else
    {
      uint64_t v85 = 0LL;
      uint64_t v76 = 0LL;
    }

    if (*(_BYTE *)(a1 + 57))
    {
      SEL v20 = sub_1000348A8(*(void *)(a1 + 32), *(void **)(a1 + 40), @"ProxyAgent");
      id v75 = (void *)objc_claimAutoreleasedReturnValue(v20);
      uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](&OBJC_CLASS___NEPolicyResult, "netAgentUUID:"));
    }

    else
    {
      uint64_t v84 = 0LL;
      id v75 = 0LL;
    }

    __int128 v89 = 0u;
    __int128 v90 = 0u;
    __int128 v87 = 0u;
    __int128 v88 = 0u;
    id obj = *(id *)(a1 + 48);
    id v21 = [obj countByEnumeratingWithState:&v87 objects:v97 count:16];
    if (v21)
    {
      id v22 = v21;
      unsigned int v83 = v86 + 2;
      uint64_t v23 = v86 + 6;
      uint64_t v24 = *(void *)v88;
      uint64_t v25 = &AnalyticsSendEventLazy_ptr;
      unsigned int v78 = v86 + 6;
      uint64_t v77 = *(void *)v88;
      do
      {
        uint64_t v26 = 0LL;
        id v81 = v22;
        do
        {
          if (*(void *)v88 != v24) {
            objc_enumerationMutation(obj);
          }
          id v27 = *(void **)(*((void *)&v87 + 1) + 8LL * (void)v26);
          if (proc_pidinfo((int)objc_msgSend(v27, "intValue", v75, v76), 17, 1uLL, &buffer, 56) == 56)
          {
            id v28 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", &buffer);
            size_t v29 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectivePID:]( NEPolicyCondition,  "effectivePID:",  [v27 intValue]));
            v92[0] = v29;
            int v30 = v25;
            uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  v28));
            v92[1] = v31;
            uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v92,  2LL));

            if (*(_BYTE *)(a1 + 56))
            {
              id v34 = [objc_alloc((Class)v30[170]) initWithOrder:v86 result:v85 conditions:v32];
              uint64_t v35 = *(void **)(a1 + 32);
              if (v35) {
                id v36 = objc_getProperty(v35, v33, 64LL, 1);
              }
              else {
                id v36 = 0LL;
              }
              sub_10002E57C((BOOL)v3, v34, v36);
            }

            if (*(_BYTE *)(a1 + 57))
            {
              id v38 = [objc_alloc((Class)v30[170]) initWithOrder:v83 result:v84 conditions:v32];
              id v39 = *(void **)(a1 + 32);
              if (v39) {
                id v40 = objc_getProperty(v39, v37, 64LL, 1);
              }
              else {
                id v40 = 0LL;
              }
              sub_10002E57C((BOOL)v3, v38, v40);
            }

            id v42 = [objc_alloc((Class)v30[170]) initWithOrder:v23 result:v80 conditions:v32];
            uint64_t v43 = *(void **)(a1 + 32);
            if (v43) {
              id v44 = objc_getProperty(v43, v41, 64LL, 1);
            }
            else {
              id v44 = 0LL;
            }
            sub_10002E57C((BOOL)v3, v42, v44);

            unsigned int v45 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectivePID:]( NEPolicyCondition,  "effectivePID:",  [v27 intValue]));
            v91[0] = v45;
            int v46 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  v28));
            v91[1] = v46;
            uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition scopedInterface:]( &OBJC_CLASS___NEPolicyCondition,  "scopedInterface:",  *(void *)(a1 + 40)));
            v91[2] = v47;
            id v48 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v91,  3LL));

            uint64_t v23 = v78;
            uint64_t v25 = v30;
            if (*(_BYTE *)(a1 + 56))
            {
              id v50 = [objc_alloc((Class)v30[170]) initWithOrder:v86 result:v85 conditions:v48];
              id v51 = *(void **)(a1 + 32);
              if (v51) {
                id v52 = objc_getProperty(v51, v49, 64LL, 1);
              }
              else {
                id v52 = 0LL;
              }
              sub_10002E57C((BOOL)v3, v50, v52);
            }

            if (*(_BYTE *)(a1 + 57))
            {
              id v54 = [objc_alloc((Class)v30[170]) initWithOrder:v83 result:v84 conditions:v48];
              id v55 = *(void **)(a1 + 32);
              if (v55) {
                id v56 = objc_getProperty(v55, v53, 64LL, 1);
              }
              else {
                id v56 = 0LL;
              }
              sub_10002E57C((BOOL)v3, v54, v56);
            }

            id v58 = [objc_alloc((Class)v30[170]) initWithOrder:v78 result:v79 conditions:v48];
            id v59 = *(void **)(a1 + 32);
            if (v59) {
              id v60 = objc_getProperty(v59, v57, 64LL, 1);
            }
            else {
              id v60 = 0LL;
            }
            sub_10002E57C((BOOL)v3, v58, v60);

            id v62 = *(void **)(a1 + 32);
            if (v62) {
              id v63 = objc_getProperty(v62, v61, 72LL, 1);
            }
            else {
              id v63 = 0LL;
            }
            id v22 = v81;
            sub_10002E434((BOOL)v3, v48, v63);

            uint64_t v24 = v77;
          }

          uint64_t v26 = (char *)v26 + 1;
        }

        while (v22 != v26);
        id v64 = [obj countByEnumeratingWithState:&v87 objects:v97 count:16];
        id v22 = v64;
      }

      while (v64);
    }

    uint64_t v65 = sub_10002C620(v3);
    uint64_t v18 = v65;
    if ((_DWORD)v65)
    {
      uint64_t v66 = ne_log_large_obj(v65);
      id v67 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
      {
        id v73 = *(id *)(a1 + 32);
        uint64_t v74 = *(void *)(a1 + 40);
        if (v73) {
          id v73 = objc_getProperty(v73, v68, 64LL, 1);
        }
        int buffer = 138412546;
        uint64_t v94 = v74;
        __int16 v95 = 2112;
        id v96 = v73;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_DEBUG,  "control Policy IDs added %@: %@",  (uint8_t *)&buffer,  0x16u);
      }
    }
  }

  else
  {
    sub_10002C620(v3);
    uint64_t v18 = 1LL;
  }

  return v18;
}

NSUUID *sub_1000348A8(uint64_t a1, void *a2, void *a3)
{
  id v3 = 0LL;
  if (a1 && a2)
  {
    id v5 = a3;
    id v6 = a2;
    id v7 = -[NSString initWithFormat:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"%@-@%@", v5, v6);

    id v8 = -[NSString UTF8String](v7, "UTF8String");
    CC_LONG v9 = strlen(v8);
    CC_SHA256(v8, v9, md);
    id v3 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", md);
  }

  return v3;
}

void sub_100034988(uint64_t a1, int a2, void *a3, char a4, char a5)
{
  id v9 = a3;
  uint64_t v11 = v9;
  if (a1)
  {
    if (a2)
    {
      if (*(_DWORD *)(a1 + 8) == 1)
      {
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472LL;
        v14[2] = sub_100034A94;
        v14[3] = &unk_1000BDCA8;
        void v14[4] = a1;
        id v15 = v9;
        char v17 = a4;
        char v18 = a5;
        int v16 = a2;
        sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, v14);
      }
    }

    else
    {
      uint64_t v12 = ne_log_obj(v9, v10);
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "No pid or mach-O UUIDs available for VPN plugin, cannot install VPN control pass policies",  buf,  2u);
      }
    }
  }
}

uint64_t sub_100034A94(uint64_t a1, void *a2)
{
  id v4 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 64LL, 1);
  }
  id v6 = Property;
  uint64_t v7 = ne_log_large_obj(v6);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    id v87 = *(id *)(a1 + 32);
    uint64_t v88 = *(void *)(a1 + 40);
    if (v87) {
      id v87 = objc_getProperty(v87, v9, 64LL, 1);
    }
    int buffer = 138412546;
    uint64_t v124 = v88;
    __int16 v125 = 2112;
    id v126 = v87;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "control pass Policy IDs to be removed %@: %@",  (uint8_t *)&buffer,  0x16u);
  }

  BOOL v10 = sub_10002C4C8(v4, v6);
  uint64_t v11 = ne_log_large_obj(v10);
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    id v89 = *(id *)(a1 + 32);
    uint64_t v90 = *(void *)(a1 + 40);
    if (v89) {
      id v89 = objc_getProperty(v89, v13, 72LL, 1);
    }
    int buffer = 138412546;
    uint64_t v124 = v90;
    __int16 v125 = 2112;
    id v126 = v89;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "low control Policy IDs to be removed %@: %@",  (uint8_t *)&buffer,  0x16u);
  }

  id v15 = *(void **)(a1 + 32);
  if (v15) {
    id v16 = objc_getProperty(v15, v14, 72LL, 1);
  }
  else {
    id v16 = 0LL;
  }
  sub_10002D64C(v4, v16);
  id v17 = +[NEProcessInfo copyDNSUUIDs](&OBJC_CLASS___NEProcessInfo, "copyDNSUUIDs");
  if (v17)
  {
    id v18 = +[NEProcessInfo copyNEHelperUUIDs](&OBJC_CLASS___NEProcessInfo, "copyNEHelperUUIDs");
    if (!v18)
    {
      uint64_t v23 = 0LL;
LABEL_70:

      goto LABEL_71;
    }

    unsigned int v101 = sub_10002EA48(*(void *)(a1 + 32));
    unsigned int v114 = v101 + 2;
    id v105 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:]( &OBJC_CLASS___NEPolicyResult,  "tunnelIPToInterfaceName:secondaryResultType:",  *(void *)(a1 + 40),  1LL));
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult scopeSocketToInterfaceName:]( &OBJC_CLASS___NEPolicyResult,  "scopeSocketToInterfaceName:",  *(void *)(a1 + 40)));
    if (*(_BYTE *)(a1 + 52))
    {
      SEL v20 = sub_1000348A8(*(void *)(a1 + 32), *(void **)(a1 + 40), @"DNSAgent");
      id v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      id v22 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](&OBJC_CLASS___NEPolicyResult, "netAgentUUID:", v21));
    }

    else
    {
      id v22 = 0LL;
      id v21 = 0LL;
    }

    if (*(_BYTE *)(a1 + 53))
    {
      uint64_t v24 = sub_1000348A8(*(void *)(a1 + 32), *(void **)(a1 + 40), @"ProxyAgent");
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      id v102 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](&OBJC_CLASS___NEPolicyResult, "netAgentUUID:", v25));
    }

    else
    {
      id v102 = 0LL;
      uint64_t v25 = 0LL;
    }

    if (proc_pidinfo(*(_DWORD *)(a1 + 48), 17, 1uLL, &buffer, 56) == 56)
    {
      uint64_t v100 = v25;
      uint64_t v26 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", &buffer);
      if (v26)
      {
        id v27 = v26;
        uint64_t v98 = v22;
        int v97 = v21;
        id v28 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        size_t v29 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  v27));
        -[NSMutableArray addObject:](v28, "addObject:", v29);

        int v30 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition realApplication:](&OBJC_CLASS___NEPolicyCondition, "realApplication:", v27));
        -[NSMutableArray addObject:](v28, "addObject:", v30);

        uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition scopedInterface:]( &OBJC_CLASS___NEPolicyCondition,  "scopedInterface:",  *(void *)(a1 + 40)));
        -[NSMutableArray addObject:](v28, "addObject:", v31);

        uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectivePID:]( &OBJC_CLASS___NEPolicyCondition,  "effectivePID:",  *(unsigned int *)(a1 + 48)));
        -[NSMutableArray addObject:](v28, "addObject:", v32);

        id v33 = [[NEPolicy alloc] initWithOrder:v101 + 2 result:v105 conditions:v28];
        BOOL v34 = sub_10002E57C((BOOL)v4, v33, v6);

        id v103 = v27;
        if (v34)
        {
          unsigned int v114 = v101 + 3;
          uint64_t v35 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);

          id v36 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  v27));
          -[NSMutableArray addObject:](v35, "addObject:", v36);

          uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition realApplication:]( &OBJC_CLASS___NEPolicyCondition,  "realApplication:",  v27));
          -[NSMutableArray addObject:](v35, "addObject:", v37);

          id v38 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
          -[NSMutableArray addObject:](v35, "addObject:", v38);

          id v39 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectivePID:]( &OBJC_CLASS___NEPolicyCondition,  "effectivePID:",  *(unsigned int *)(a1 + 48)));
          -[NSMutableArray addObject:](v35, "addObject:", v39);

          id v40 = [[NEPolicy alloc] initWithOrder:v101 + 3 result:v19 conditions:v35];
          LODWORD(v39) = sub_10002E57C((BOOL)v4, v40, v6);

          if ((_DWORD)v39)
          {
            __int16 v95 = v17;
            if (v98)
            {
              id v42 = [[NEPolicy alloc] initWithOrder:v101 result:v98 conditions:v35];
              uint64_t v43 = *(void **)(a1 + 32);
              if (v43) {
                id v44 = objc_getProperty(v43, v41, 64LL, 1);
              }
              else {
                id v44 = 0LL;
              }
              sub_10002E57C((BOOL)v4, v42, v44);
            }

            if (v102)
            {
              id v46 = [[NEPolicy alloc] initWithOrder:v101 + 1 result:v102 conditions:v35];
              uint64_t v47 = *(void **)(a1 + 32);
              if (v47) {
                id v48 = objc_getProperty(v47, v45, 64LL, 1);
              }
              else {
                id v48 = 0LL;
              }
              sub_10002E57C((BOOL)v4, v46, v48);
            }

            uint64_t v93 = v35;
            id v94 = v18;
            id v104 = v6;
            __int128 v112 = 0u;
            __int128 v113 = 0u;
            __int128 v110 = 0u;
            __int128 v111 = 0u;
            id obj = v18;
            id v49 = [obj countByEnumeratingWithState:&v110 objects:v122 count:16];
            if (v49)
            {
              id v50 = v49;
              uint64_t v51 = *(void *)v111;
              while (2)
              {
                for (id i = 0LL; i != v50; id i = (char *)i + 1)
                {
                  if (*(void *)v111 != v51) {
                    objc_enumerationMutation(obj);
                  }
                  uint64_t v53 = *(void *)(*((void *)&v110 + 1) + 8LL * (void)i);
                  id v54 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
                  id v55 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  v103));
                  -[NSMutableArray addObject:](v54, "addObject:", v55);

                  id v56 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition realApplication:]( &OBJC_CLASS___NEPolicyCondition,  "realApplication:",  v53));
                  -[NSMutableArray addObject:](v54, "addObject:", v56);

                  uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
                  -[NSMutableArray addObject:](v54, "addObject:", v57);

                  id v58 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](&OBJC_CLASS___NEPolicyCondition, "entitlement"));
                  -[NSMutableArray addObject:](v54, "addObject:", v58);

                  id v59 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectivePID:]( &OBJC_CLASS___NEPolicyCondition,  "effectivePID:",  *(unsigned int *)(a1 + 48)));
                  -[NSMutableArray addObject:](v54, "addObject:", v59);

                  id v60 = [[NEPolicy alloc] initWithOrder:v101 + 4 result:v105 conditions:v54];
                  LODWORD(v53) = sub_10002E57C((BOOL)v4, v60, v104);

                  if (!(_DWORD)v53)
                  {
                    uint64_t v23 = 0LL;
                    id v6 = v104;
                    id v18 = v94;
                    id v17 = v95;
                    id v21 = v97;
                    id v22 = v98;
                    uint64_t v25 = v100;
                    uint64_t v35 = v93;
                    goto LABEL_67;
                  }
                }

                id v50 = [obj countByEnumeratingWithState:&v110 objects:v122 count:16];
                if (v50) {
                  continue;
                }
                break;
              }
            }

            __int128 v108 = 0u;
            __int128 v109 = 0u;
            __int128 v106 = 0u;
            __int128 v107 = 0u;
            id obj = v95;
            id v61 = [obj countByEnumeratingWithState:&v106 objects:v121 count:16];
            id v62 = v100;
            id v63 = &AnalyticsSendEventLazy_ptr;
            if (v61)
            {
              id v64 = v61;
              uint64_t v96 = *(void *)v107;
              while (2)
              {
                for (j = 0LL; j != v64; j = (char *)j + 1)
                {
                  if (*(void *)v107 != v96) {
                    objc_enumerationMutation(obj);
                  }
                  uint64_t v66 = *(void *)(*((void *)&v106 + 1) + 8LL * (void)j);
                  id v67 = objc_alloc_init((Class)v63[214]);
                  uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  v103));
                  [v67 addObject:v68];

                  uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition realApplication:]( &OBJC_CLASS___NEPolicyCondition,  "realApplication:",  v66));
                  [v67 addObject:v69];

                  uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
                  [v67 addObject:v70];

                  id v71 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](&OBJC_CLASS___NEPolicyCondition, "entitlement"));
                  [v67 addObject:v71];

                  uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectivePID:]( &OBJC_CLASS___NEPolicyCondition,  "effectivePID:",  *(unsigned int *)(a1 + 48)));
                  [v67 addObject:v72];

                  id v73 = [[NEPolicy alloc] initWithOrder:v101 + 5 result:v105 conditions:v67];
                  LODWORD(v6_Block_object_dispose(va, 8) = sub_10002E57C((BOOL)v4, v73, v104);

                  if (!(_DWORD)v68)
                  {

                    uint64_t v23 = 0LL;
                    id v6 = v104;
                    uint64_t v35 = v93;
                    id v18 = v94;
                    id v21 = v97;
                    id v22 = v98;
                    uint64_t v25 = v62;
                    id v17 = v95;
                    goto LABEL_67;
                  }

                  if (v98)
                  {
                    id v74 = [[NEPolicy alloc] initWithOrder:v101 result:v98 conditions:v67];
                    sub_10002E57C((BOOL)v4, v74, v104);
                  }

                  id v62 = v100;
                  id v63 = &AnalyticsSendEventLazy_ptr;
                }

                id v64 = [obj countByEnumeratingWithState:&v106 objects:v121 count:16];
                if (v64) {
                  continue;
                }
                break;
              }
            }

            unsigned int v114 = v101 + 6;
            id v75 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectivePID:]( &OBJC_CLASS___NEPolicyCondition,  "effectivePID:",  *(unsigned int *)(a1 + 48)));
            v120[0] = v75;
            uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
            v120[1] = v76;
            unsigned int v78 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v120,  2LL));
            uint64_t v79 = *(void **)(a1 + 32);
            if (v79) {
              id v80 = objc_getProperty(v79, v77, 72LL, 1);
            }
            else {
              id v80 = 0LL;
            }
            id v17 = v95;
            sub_10002E434((BOOL)v4, v78, v80);

            uint64_t v81 = *(void *)(a1 + 32);
            unsigned int v82 = *(_DWORD *)(a1 + 48);
            unsigned __int16 v119 = v103;
            unsigned int v83 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v119,  1LL));
            unsigned int v84 = v82;
            id v6 = v104;
            LODWORD(v81) = sub_1000355D4(v81, v4, v84, v83, v105, v104, &v114);

            if ((_DWORD)v81)
            {
              uint64_t v85 = sub_10002C620(v4);
              id v21 = v97;
              id v22 = v98;
              uint64_t v25 = v100;
              uint64_t v35 = v93;
              if ((_DWORD)v85)
              {
                uint64_t v86 = ne_log_large_obj(v85);
                id obj = (id)objc_claimAutoreleasedReturnValue(v86);
                if (os_log_type_enabled((os_log_t)obj, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v92 = *(void *)(a1 + 40);
                  *(_DWORD *)buf = 138412546;
                  uint64_t v116 = v92;
                  __int16 v117 = 2112;
                  unsigned __int16 v118 = v104;
                  _os_log_debug_impl( (void *)&_mh_execute_header,  (os_log_t)obj,  OS_LOG_TYPE_DEBUG,  "control pass Policy IDs added %@: %@",  buf,  0x16u);
                }

                uint64_t v23 = 1LL;
                id v18 = v94;
LABEL_67:
              }

              else
              {
                uint64_t v23 = 0LL;
                id v18 = v94;
              }

              goto LABEL_68;
            }

            uint64_t v23 = 0LL;
            uint64_t v35 = v93;
            id v18 = v94;
          }

          else
          {
            uint64_t v23 = 0LL;
          }
        }

        else
        {
          uint64_t v23 = 0LL;
          uint64_t v35 = v28;
        }

        id v21 = v97;
        id v22 = v98;
        uint64_t v25 = v100;
LABEL_68:

        goto LABEL_69;
      }

      uint64_t v23 = 0LL;
    }

    else
    {
      uint64_t v23 = 0LL;
    }

LABEL_69:
    goto LABEL_70;
  }

  uint64_t v23 = 0LL;
LABEL_71:

  return v23;
}

uint64_t sub_1000355D4(uint64_t a1, void *a2, unsigned int a3, void *a4, void *a5, void *a6, unsigned int *a7)
{
  id v115 = a2;
  id v12 = a4;
  id v114 = a5;
  id v113 = a6;
  if (a1)
  {
    id v13 = +[NEProcessInfo copyDNSUUIDs](&OBJC_CLASS___NEProcessInfo, "copyDNSUUIDs");
    if (v13)
    {
      id v14 = +[NEProcessInfo copyUUIDsForExecutable:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForExecutable:",  @"/usr/libexec/securityd");
      id v16 = v14;
      if (v14)
      {
        id v108 = v12;
        uint64_t v17 = ne_log_obj(v14, v15);
        id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "Adding DNS policies for securityd",  buf,  2u);
        }

        __int128 v146 = 0u;
        __int128 v147 = 0u;
        __int128 v144 = 0u;
        __int128 v145 = 0u;
        __int128 v106 = v16;
        id v19 = v16;
        __int128 v107 = v19;
        id v99 = [v19 countByEnumeratingWithState:&v144 objects:v156 count:16];
        id v109 = v13;
        if (v99)
        {
          uint64_t v20 = *(void *)v145;
          uint64_t v95 = *(void *)v145;
          do
          {
            uint64_t v21 = 0LL;
            do
            {
              if (*(void *)v145 != v20) {
                objc_enumerationMutation(v19);
              }
              uint64_t v102 = v21;
              uint64_t v22 = *(void *)(*((void *)&v144 + 1) + 8 * v21);
              __int128 v140 = 0u;
              __int128 v141 = 0u;
              __int128 v142 = 0u;
              __int128 v143 = 0u;
              id obj = v13;
              id v23 = [obj countByEnumeratingWithState:&v140 objects:v155 count:16];
              if (v23)
              {
                id v24 = v23;
                uint64_t v25 = *(void *)v141;
                while (2)
                {
                  for (id i = 0LL; i != v24; id i = (char *)i + 1)
                  {
                    if (*(void *)v141 != v25) {
                      objc_enumerationMutation(obj);
                    }
                    uint64_t v27 = *(void *)(*((void *)&v140 + 1) + 8LL * (void)i);
                    id v28 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
                    size_t v29 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  v22));
                    -[NSMutableArray addObject:](v28, "addObject:", v29);

                    int v30 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition realApplication:]( &OBJC_CLASS___NEPolicyCondition,  "realApplication:",  v27));
                    -[NSMutableArray addObject:](v28, "addObject:", v30);

                    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
                    -[NSMutableArray addObject:](v28, "addObject:", v31);

                    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](&OBJC_CLASS___NEPolicyCondition, "entitlement"));
                    -[NSMutableArray addObject:](v28, "addObject:", v32);

                    id v33 = [[NEPolicy alloc] initWithOrder:*a7 result:v114 conditions:v28];
                    LODWORD(v27) = sub_10002E57C((BOOL)v115, v33, v113);

                    if (!(_DWORD)v27)
                    {
LABEL_79:
                      id v12 = v108;
                      id v13 = v109;
                      id v16 = v106;
                      id v55 = v107;
LABEL_80:

                      uint64_t v90 = 0LL;
                      goto LABEL_81;
                    }

                    ++*a7;
                  }

                  id v24 = [obj countByEnumeratingWithState:&v140 objects:v155 count:16];
                  if (v24) {
                    continue;
                  }
                  break;
                }
              }

              uint64_t v21 = v102 + 1;
              id v13 = v109;
              id v19 = v107;
              uint64_t v20 = v95;
            }

            while ((id)(v102 + 1) != v99);
            id v99 = [v107 countByEnumeratingWithState:&v144 objects:v156 count:16];
          }

          while (v99);
        }

        uint64_t v36 = ne_log_obj(v34, v35);
        uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "Adding securityd policies for neagent",  buf,  2u);
        }

        __int128 v138 = 0u;
        __int128 v139 = 0u;
        __int128 v136 = 0u;
        __int128 v137 = 0u;
        id v38 = v12;
        id v100 = [v38 countByEnumeratingWithState:&v136 objects:v154 count:16];
        if (v100)
        {
          uint64_t v39 = *(void *)v137;
          id v103 = v38;
          uint64_t v96 = *(void *)v137;
          do
          {
            id v40 = 0LL;
            do
            {
              if (*(void *)v137 != v39) {
                objc_enumerationMutation(v38);
              }
              uint64_t v41 = *(void *)(*((void *)&v136 + 1) + 8LL * (void)v40);
              __int128 v132 = 0u;
              __int128 v133 = 0u;
              __int128 v134 = 0u;
              __int128 v135 = 0u;
              id obj = v19;
              id v42 = [obj countByEnumeratingWithState:&v132 objects:v153 count:16];
              if (v42)
              {
                id v43 = v42;
                uint64_t v44 = *(void *)v133;
                while (2)
                {
                  for (j = 0LL; j != v43; j = (char *)j + 1)
                  {
                    if (*(void *)v133 != v44) {
                      objc_enumerationMutation(obj);
                    }
                    uint64_t v46 = *(void *)(*((void *)&v132 + 1) + 8LL * (void)j);
                    id v28 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
                    uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  v41));
                    -[NSMutableArray addObject:](v28, "addObject:", v47);

                    id v48 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectivePID:]( &OBJC_CLASS___NEPolicyCondition,  "effectivePID:",  a3));
                    -[NSMutableArray addObject:](v28, "addObject:", v48);

                    id v49 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](&OBJC_CLASS___NEPolicyCondition, "entitlement"));
                    -[NSMutableArray addObject:](v28, "addObject:", v49);

                    id v50 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition realApplication:]( &OBJC_CLASS___NEPolicyCondition,  "realApplication:",  v46));
                    -[NSMutableArray addObject:](v28, "addObject:", v50);

                    uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
                    -[NSMutableArray addObject:](v28, "addObject:", v51);

                    id v52 = [[NEPolicy alloc] initWithOrder:*a7 result:v114 conditions:v28];
                    LODWORD(v49) = sub_10002E57C((BOOL)v115, v52, v113);

                    if (!(_DWORD)v49)
                    {
                      id v55 = v103;
                      id v16 = v106;
                      id v12 = v108;
                      id v13 = v109;
                      goto LABEL_80;
                    }

                    ++*a7;
                  }

                  id v43 = [obj countByEnumeratingWithState:&v132 objects:v153 count:16];
                  if (v43) {
                    continue;
                  }
                  break;
                }
              }

              id v40 = (char *)v40 + 1;
              id v38 = v103;
              id v19 = v107;
              id v12 = v108;
              uint64_t v39 = v96;
            }

            while (v40 != v100);
            id v100 = [v103 countByEnumeratingWithState:&v136 objects:v154 count:16];
          }

          while (v100);
        }

        id v53 = +[NEProcessInfo copyUUIDsForExecutable:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForExecutable:",  @"/usr/libexec/trustd");
        id v55 = v53;
        if (v53)
        {
          id v104 = v38;
          uint64_t v56 = ne_log_obj(v53, v54);
          uint64_t v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
          id v13 = v109;
          if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEBUG,  "Adding DNS policies for trustd",  buf,  2u);
          }

          __int128 v130 = 0u;
          __int128 v131 = 0u;
          __int128 v128 = 0u;
          __int128 v129 = 0u;
          id v58 = v55;
          int v97 = (char *)[v58 countByEnumeratingWithState:&v128 objects:v152 count:16];
          unsigned int v101 = v58;
          if (v97)
          {
            uint64_t v59 = *(void *)v129;
            __int128 v107 = v55;
            uint64_t v93 = *(void *)v129;
            do
            {
              id v60 = 0LL;
              do
              {
                if (*(void *)v129 != v59) {
                  objc_enumerationMutation(v58);
                }
                id obja = v60;
                uint64_t v61 = *(void *)(*((void *)&v128 + 1) + 8LL * (void)v60);
                __int128 v124 = 0u;
                __int128 v125 = 0u;
                __int128 v126 = 0u;
                __int128 v127 = 0u;
                id v28 = (NSMutableArray *)v13;
                id v62 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v28,  "countByEnumeratingWithState:objects:count:",  &v124,  v151,  16LL);
                if (v62)
                {
                  id v63 = v62;
                  uint64_t v64 = *(void *)v125;
                  while (2)
                  {
                    for (k = 0LL; k != v63; k = (char *)k + 1)
                    {
                      if (*(void *)v125 != v64) {
                        objc_enumerationMutation(v28);
                      }
                      uint64_t v66 = *(void *)(*((void *)&v124 + 1) + 8LL * (void)k);
                      id v67 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
                      uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  v61));
                      -[NSMutableArray addObject:](v67, "addObject:", v68);

                      uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition realApplication:]( &OBJC_CLASS___NEPolicyCondition,  "realApplication:",  v66));
                      -[NSMutableArray addObject:](v67, "addObject:", v69);

                      uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition allInterfaces]( &OBJC_CLASS___NEPolicyCondition,  "allInterfaces"));
                      -[NSMutableArray addObject:](v67, "addObject:", v70);

                      id v71 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](&OBJC_CLASS___NEPolicyCondition, "entitlement"));
                      -[NSMutableArray addObject:](v67, "addObject:", v71);

                      id v72 = [[NEPolicy alloc] initWithOrder:*a7 result:v114 conditions:v67];
                      LODWORD(v6_Block_object_dispose(va, 8) = sub_10002E57C((BOOL)v115, v72, v113);

                      if (!(_DWORD)v68)
                      {
                        id obj = v101;
LABEL_78:

                        goto LABEL_79;
                      }

                      ++*a7;
                    }

                    id v63 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v28,  "countByEnumeratingWithState:objects:count:",  &v124,  v151,  16LL);
                    if (v63) {
                      continue;
                    }
                    break;
                  }
                }

                id v60 = obja + 1;
                id v58 = v101;
                id v12 = v108;
                id v13 = v109;
                id v55 = v107;
                uint64_t v59 = v93;
              }

              while (obja + 1 != v97);
              int v97 = (char *)[v101 countByEnumeratingWithState:&v128 objects:v152 count:16];
            }

            while (v97);
          }

          uint64_t v75 = ne_log_obj(v73, v74);
          uint64_t v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
          if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_DEBUG,  "Adding trustd policies for neagent",  buf,  2u);
          }

          __int128 v122 = 0u;
          __int128 v123 = 0u;
          __int128 v120 = 0u;
          __int128 v121 = 0u;
          id obj = v104;
          id v94 = [obj countByEnumeratingWithState:&v120 objects:v150 count:16];
          if (v94)
          {
            __int128 v107 = v55;
            uint64_t v77 = *(void *)v121;
            uint64_t v92 = *(void *)v121;
            while (2)
            {
              uint64_t v78 = 0LL;
              do
              {
                if (*(void *)v121 != v77) {
                  objc_enumerationMutation(obj);
                }
                uint64_t v98 = v78;
                uint64_t v105 = *(void *)(*((void *)&v120 + 1) + 8 * v78);
                __int128 v116 = 0u;
                __int128 v117 = 0u;
                __int128 v118 = 0u;
                __int128 v119 = 0u;
                id v28 = (NSMutableArray *)v58;
                id v79 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v28,  "countByEnumeratingWithState:objects:count:",  &v116,  v149,  16LL);
                if (v79)
                {
                  id v80 = v79;
                  uint64_t v81 = *(void *)v117;
LABEL_65:
                  uint64_t v82 = 0LL;
                  while (1)
                  {
                    if (*(void *)v117 != v81) {
                      objc_enumerationMutation(v28);
                    }
                    uint64_t v83 = *(void *)(*((void *)&v116 + 1) + 8 * v82);
                    id v67 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
                    unsigned int v84 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  v105));
                    -[NSMutableArray addObject:](v67, "addObject:", v84);

                    uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectivePID:]( &OBJC_CLASS___NEPolicyCondition,  "effectivePID:",  a3));
                    -[NSMutableArray addObject:](v67, "addObject:", v85);

                    uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](&OBJC_CLASS___NEPolicyCondition, "entitlement"));
                    -[NSMutableArray addObject:](v67, "addObject:", v86);

                    id v87 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition realApplication:]( &OBJC_CLASS___NEPolicyCondition,  "realApplication:",  v83));
                    -[NSMutableArray addObject:](v67, "addObject:", v87);

                    uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
                    -[NSMutableArray addObject:](v67, "addObject:", v88);

                    id v89 = [[NEPolicy alloc] initWithOrder:*a7 result:v114 conditions:v67];
                    LODWORD(v86) = sub_10002E57C((BOOL)v115, v89, v113);

                    if (!(_DWORD)v86) {
                      goto LABEL_78;
                    }
                    ++*a7;

                    if (v80 == (id)++v82)
                    {
                      id v80 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v28,  "countByEnumeratingWithState:objects:count:",  &v116,  v149,  16LL);
                      if (v80) {
                        goto LABEL_65;
                      }
                      break;
                    }
                  }
                }

                uint64_t v78 = v98 + 1;
                id v12 = v108;
                id v58 = v101;
                uint64_t v77 = v92;
              }

              while ((id)(v98 + 1) != v94);
              uint64_t v90 = 1LL;
              id v94 = [obj countByEnumeratingWithState:&v120 objects:v150 count:16];
              if (v94) {
                continue;
              }
              break;
            }

            id v13 = v109;
            id v16 = v106;
            id v55 = v107;
          }

          else
          {
            uint64_t v90 = 1LL;
            id v16 = v106;
          }

LABEL_81:
        }

        else
        {
          uint64_t v90 = 0LL;
          id v13 = v109;
          id v16 = v106;
        }
      }

      else
      {
        uint64_t v90 = 0LL;
      }
    }

    else
    {
      uint64_t v90 = 0LL;
    }
  }

  else
  {
    uint64_t v90 = 0LL;
  }

  return v90;
}

                  uint64_t v17 = v87;
                  goto LABEL_82;
                }

                if (-[NSMutableArray count](v10, "count"))
                {
                  id v99 = 0u;
                  id v100 = 0u;
                  int v97 = 0u;
                  uint64_t v98 = 0u;
                  uint64_t v91 = v10;
                  uint64_t v59 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v91,  "countByEnumeratingWithState:objects:count:",  &v97,  v131,  16LL);
                  if (v59)
                  {
                    id v60 = v59;
                    uint64_t v61 = *(void *)v98;
                    do
                    {
                      id v62 = 0LL;
                      do
                      {
                        if (*(void *)v98 != v61) {
                          objc_enumerationMutation(v91);
                        }
                        id v63 = *(void *)(*((void *)&v97 + 1) + 8LL * (void)v62);
                        v130[0] = v93;
                        v130[1] = v36;
                        v130[2] = v63;
                        v130[3] = v6;
                        uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v130,  4LL));
                        uint64_t v66 = [[NEPolicy alloc] initWithOrder:v7 result:v94 conditions:v64];
                        id v67 = *(void **)(a1 + 32);
                        if (v67) {
                          uint64_t v68 = objc_getProperty(v67, v65, 48LL, 1);
                        }
                        else {
                          uint64_t v68 = 0LL;
                        }
                        sub_10002E57C((BOOL)v96, v66, v68);

                        id v62 = (char *)v62 + 1;
                      }

                      while (v60 != v62);
                      uint64_t v69 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v91,  "countByEnumeratingWithState:objects:count:",  &v97,  v131,  16LL);
                      id v60 = v69;
                    }

                    while (v69);
                  }

                  goto LABEL_81;
                }

                v129[0] = v93;
                v129[1] = v36;
                v129[2] = v6;
                uint64_t v91 = (NSMutableArray *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v129,  3LL));
                id v71 = [[NEPolicy alloc] initWithOrder:v7 result:v94 conditions:v91];
                id v72 = *(void **)(a1 + 32);
                if (v72) {
                  uint64_t v73 = objc_getProperty(v72, v70, 48LL, 1);
                }
                else {
                  uint64_t v73 = 0LL;
                }
                uint64_t v17 = v87;
                sub_10002E57C((BOOL)v96, v71, v73);

LABEL_82:
                uint64_t v34 = v86 + 1;
              }

              while ((id)(v86 + 1) != v85);
              uint64_t v74 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v82,  "countByEnumeratingWithState:objects:count:",  &v109,  v136,  16LL);
              uint64_t v85 = v74;
            }

            while (v74);
          }
        }

        id v8 = v80 + 1;
      }

      while ((id)(v80 + 1) != v79);
      id v79 = [obj countByEnumeratingWithState:&v125 objects:v140 count:16];
    }

    while (v79);
  }

  uint64_t v75 = sub_10002C620(v96);
  return v75;
}

                        uint64_t v65 = [v54 weakAdvisory];
                        if (v19[355])
                        {
                          if (v65 != (v19[356] != 0))
                          {
                            uint64_t v66 = v19[356] != 0;
LABEL_86:
                            [v54 setWeakAdvisory:v66];
                            id v33 = 1;
                          }
                        }

                        else if ((v65 & 1) != 0)
                        {
                          uint64_t v66 = 0LL;
                          goto LABEL_86;
                        }

                        id v13 = v171;
                        goto LABEL_88;
                      }

                      uint64_t v54 = v174;
                      if (v60) {
                        goto LABEL_75;
                      }
                    }

                    else
                    {
                    }

                    [v54 setPredictedInterfaceArray:0];
                    goto LABEL_80;
                  }

                  uint64_t v54 = v174;
                  if (v21)
                  {
LABEL_67:
                    uint64_t v56 = -[NSMutableArray initWithArray:]( objc_alloc(&OBJC_CLASS___NSMutableArray),  "initWithArray:",  v21);
                    [v54 setAdvisoryInterfaceArray:v56];

                    goto LABEL_72;
                  }
                }

                else
                {
                }

                [v54 setAdvisoryInterfaceArray:0];
                goto LABEL_72;
              }
            }

uint64_t sub_10003611C(uint64_t a1, void *a2)
{
  id v34 = a2;
  id v4 = *(void **)(a1 + 32);
  if (v4) {
    id Property = objc_getProperty(v4, v3, 136LL, 1);
  }
  else {
    id Property = 0LL;
  }
  sub_10002C4C8(v34, Property);
  id v7 = *(id *)(a1 + 32);
  if (v7) {
    id v7 = objc_getProperty(v7, v6, 136LL, 1);
  }
  id v33 = v7;
  uint64_t v8 = sub_10002EA48(*(void *)(a1 + 32)) + 10;
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](&OBJC_CLASS___NEPolicyResult, "netAgentUUID:", *(void *)(a1 + 40)));
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  uint64_t v32 = a1;
  id v10 = *(id *)(a1 + 48);
  id v11 = [v10 countByEnumeratingWithState:&v35 objects:v45 count:16];
  if (v11)
  {
    id v12 = v11;
    char v13 = 0;
    uint64_t v14 = *(void *)v36;
    do
    {
      for (id i = 0LL; i != v12; id i = (char *)i + 1)
      {
        if (*(void *)v36 != v14) {
          objc_enumerationMutation(v10);
        }
        id v16 = *(void **)(*((void *)&v35 + 1) + 8LL * (void)i);
        if ([v16 length])
        {
          uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](&OBJC_CLASS___NEPolicyCondition, "domain:", v16));
          id v18 = objc_alloc(&OBJC_CLASS___NEPolicy);
          uint64_t v44 = v17;
          char v13 = 1;
          id v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v44,  1LL));
          id v20 = [v18 initWithOrder:v8 result:v9 conditions:v19];

          sub_10002E57C((BOOL)v34, v20, v33);
        }
      }

      id v12 = [v10 countByEnumeratingWithState:&v35 objects:v45 count:16];
    }

    while (v12);
  }

  else
  {
    char v13 = 0;
  }

  if (*(_BYTE *)(v32 + 64) && (v13 & 1) == 0)
  {
    id v21 = [[NEPolicy alloc] initWithOrder:v8 result:v9 conditions:&__NSArray0__struct];
    sub_10002E57C((BOOL)v34, v21, v33);
  }

  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition scopedInterface:]( &OBJC_CLASS___NEPolicyCondition,  "scopedInterface:",  *(void *)(v32 + 56)));
  id v23 = objc_alloc(&OBJC_CLASS___NEPolicy);
  id v43 = v22;
  id v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v43, 1LL));
  id v25 = [v23 initWithOrder:v8 result:v9 conditions:v24];

  sub_10002E57C((BOOL)v34, v25, v33);
  uint64_t v26 = sub_10002C620(v34);
  uint64_t v27 = v26;
  if ((_DWORD)v26)
  {
    uint64_t v28 = ne_log_large_obj(v26);
    size_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v31 = *(void *)(v32 + 56);
      *(_DWORD *)buf = 138412546;
      uint64_t v40 = v31;
      __int16 v41 = 2112;
      id v42 = v33;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "DNS Policy IDs added for %@: %@",  buf,  0x16u);
    }
  }

  return v27;
}

uint64_t sub_10003646C(uint64_t a1, void *a2)
{
  id v4 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 80LL, 1);
  }
  id v6 = Property;
  uint64_t v7 = ne_log_large_obj(v6);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v77 = *(const char **)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    id v94 = v77;
    __int16 v95 = 2112;
    id v96 = v6;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "Tunnel data Policy IDs to be removed %@: %@",  buf,  0x16u);
  }

  sub_10002C4C8(v4, v6);
  id v10 = *(void **)(a1 + 32);
  if (v10 && objc_getProperty(v10, v9, 16LL, 1))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    unsigned int v88 = sub_10002EA48(v11) + 100;
    if (*(_BYTE *)(a1 + 56))
    {
      if (v4)
      {
        id v13 = objc_getProperty(v4, v12, 16LL, 1);
        uint64_t v11 = *(void *)(a1 + 32);
      }

      else
      {
        id v13 = 0LL;
      }

      if (v11) {
        uint64_t v14 = 18000LL;
      }
      else {
        uint64_t v14 = 0LL;
      }
      BOOL v15 = sub_1000568E4(v13, &v88, v14, 200LL, v6);
      BOOL v16 = v15;
      uint64_t v18 = ne_log_obj(v15, v17);
      id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      id v20 = v19;
      if (v16)
      {
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315138;
          id v94 = "-[NESMPolicySession setTunnelDataPoliciesForInterfaceName:outgoingInterfaceName:hasDNS:hasProxy:hasExclu"
                "deLocalNetworks:hasExcludeCellularServices:]_block_invoke";
          _os_log_debug_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "%s: VPN addLocalNetworksExceptionWithOrder succeeded for PrivilegedTunnel priority",  buf,  0xCu);
        }
      }

      else if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        id v94 = "-[NESMPolicySession setTunnelDataPoliciesForInterfaceName:outgoingInterfaceName:hasDNS:hasProxy:hasExclude"
              "LocalNetworks:hasExcludeCellularServices:]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "%s: VPN addLocalNetworksExceptionWithOrder failed for PrivilegedTunnel priority",  buf,  0xCu);
      }
    }

    if (v4) {
      id v22 = objc_getProperty(v4, v12, 16LL, 1);
    }
    else {
      id v22 = 0LL;
    }
    id v23 = v22;
    id v24 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", 0LL));
    BOOL v25 = sub_1000549EC((BOOL)v23, &v88, v24, v6);

    if (!v25)
    {
      uint64_t v28 = ne_log_obj(v26, v27);
      size_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_ERROR,  "Failed to add icmpv6 exception for data",  buf,  2u);
      }
    }

    if (*(_BYTE *)(a1 + 57))
    {
      if (v4) {
        id v30 = objc_getProperty(v4, v27, 16LL, 1);
      }
      else {
        id v30 = 0LL;
      }
      uint64_t v31 = sub_100055BA4(v30, &v88, 1LL, 0, 0, v6);
      if ((v31 & 1) == 0)
      {
        uint64_t v33 = ne_log_obj(v31, v32);
        id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_ERROR,  "Failed to add VoiceMail exception for data",  buf,  2u);
        }
      }

      if (v4) {
        id v35 = objc_getProperty(v4, v32, 16LL, 1);
      }
      else {
        id v35 = 0LL;
      }
      uint64_t v36 = sub_100058490(v35, &v88, 1LL, *(void **)(a1 + 48), 0, v6);
      if ((v36 & 1) == 0)
      {
        uint64_t v38 = ne_log_obj(v36, v37);
        uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_ERROR,  "Failed to add CellularServices exception for data",  buf,  2u);
        }
      }
    }

    if (*(_BYTE *)(a1 + 56)) {
      uint64_t v40 = 0LL;
    }
    else {
      uint64_t v40 = &off_1000C1998;
    }
    id v42 = v40;
    if (v4) {
      id v43 = objc_getProperty(v4, v41, 16LL, 1);
    }
    else {
      id v43 = 0LL;
    }
    unsigned int v44 = v88;
    id v45 = v43;
    uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", 0LL));
    sub_10005B5D8(v45, v44, v42, v46, v6);

    if (*(_BYTE *)(a1 + 58))
    {
      uint64_t v47 = sub_1000348A8(*(void *)(a1 + 32), *(void **)(a1 + 40), @"ProxyAgent");
      uint64_t v48 = objc_claimAutoreleasedReturnValue(v47);
    }

    else
    {
      uint64_t v48 = 0LL;
    }

    if (*(_BYTE *)(a1 + 59))
    {
      id v49 = sub_1000348A8(*(void *)(a1 + 32), *(void **)(a1 + 40), @"DNSAgent");
      uint64_t v50 = objc_claimAutoreleasedReturnValue(v49);
      uint64_t v51 = v50;
      if (v50) {
        uint64_t v50 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](&OBJC_CLASS___NEPolicyResult, "netAgentUUID:", v50));
      }
    }

    else
    {
      uint64_t v50 = 0LL;
      uint64_t v51 = 0LL;
    }

    uint64_t v82 = (void *)v51;
    uint64_t v83 = (void *)v48;
    uint64_t v85 = (void *)v50;
    if (v48) {
      uint64_t v87 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](&OBJC_CLASS___NEPolicyResult, "netAgentUUID:", v48));
    }
    else {
      uint64_t v87 = 0LL;
    }
    int v81 = sub_10002EA48(*(void *)(a1 + 32));
    uint64_t v52 = objc_claimAutoreleasedReturnValue( +[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:]( &OBJC_CLASS___NEPolicyResult,  "tunnelIPToInterfaceName:secondaryResultType:",  *(void *)(a1 + 40),  1LL));
    uint64_t v53 = objc_claimAutoreleasedReturnValue( +[NEPolicyResult scopeSocketToInterfaceName:]( &OBJC_CLASS___NEPolicyResult,  "scopeSocketToInterfaceName:",  *(void *)(a1 + 40)));
    uint64_t v54 = sub_10002EA48(*(void *)(a1 + 32)) + 350;
    id v55 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition scopedInterface:]( &OBJC_CLASS___NEPolicyCondition,  "scopedInterface:",  *(void *)(a1 + 40)));
    uint64_t v92 = v55;
    uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v92, 1LL));

    unsigned int v84 = (void *)v52;
    id v57 = [[NEPolicy alloc] initWithOrder:v54 result:v52 conditions:v56];
    LODWORD(v55) = sub_10002E57C((BOOL)v4, v57, v6);

    uint64_t v86 = (void *)v53;
    if ((_DWORD)v55)
    {
      id v80 = v42;
      uint64_t v58 = sub_10002EA48(*(void *)(a1 + 32)) + 400;
      uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
      uint64_t v91 = v59;
      id v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v91, 1LL));

      id v61 = [[NEPolicy alloc] initWithOrder:v58 result:v53 conditions:v60];
      LODWORD(v5_Block_object_dispose(va, 8) = sub_10002E57C((BOOL)v4, v61, v6);

      if ((_DWORD)v58)
      {
        id v62 = v83;
        if (v85)
        {
          id v63 = objc_alloc(&OBJC_CLASS___NEPolicy);
          id v79 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
          uint64_t v90 = v79;
          uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v90,  1LL));
          id v65 = [v63 initWithOrder:(v81 + 10) result:v85 conditions:v64];
          sub_10002E57C((BOOL)v4, v65, v6);
        }

        uint64_t v66 = v85;
        id v67 = (void *)v87;
        if (v87)
        {
          id v68 = objc_alloc(&OBJC_CLASS___NEPolicy);
          uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
          id v89 = v69;
          uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v89,  1LL));
          id v71 = [v68 initWithOrder:(v81 + 20) result:v87 conditions:v70];
          sub_10002E57C((BOOL)v4, v71, v6);

          id v67 = (void *)v87;
        }

        uint64_t v72 = sub_10002C620(v4);
        if ((_DWORD)v72)
        {
          uint64_t v73 = ne_log_large_obj(v72);
          uint64_t v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
          id v42 = v80;
          if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v78 = *(const char **)(a1 + 48);
            *(_DWORD *)buf = 138412546;
            id v94 = v78;
            __int16 v95 = 2112;
            id v96 = v6;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEBUG,  "tunnel data Policy IDs added %@: %@",  buf,  0x16u);
          }

          uint64_t v21 = 1LL;
        }

        else
        {
          uint64_t v21 = 0LL;
          id v42 = v80;
        }

        uint64_t v75 = v82;
        goto LABEL_69;
      }

      uint64_t v21 = 0LL;
      id v42 = v80;
    }

    else
    {
      uint64_t v21 = 0LL;
      id v60 = v56;
    }

    uint64_t v75 = v82;
    id v62 = v83;
    uint64_t v66 = v85;
    id v67 = (void *)v87;
LABEL_69:

    goto LABEL_70;
  }

  uint64_t v21 = 0LL;
LABEL_70:

  return v21;
}

uint64_t sub_100036C9C(uint64_t a1, void *a2)
{
  id v90 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 80LL, 1);
  }
  id v5 = Property;
  uint64_t v6 = ne_log_large_obj(v5);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v73 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    uint64_t v112 = v73;
    __int16 v113 = 2112;
    id v114 = v5;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "Tunnel data Policy IDs to be removed %@: %@",  buf,  0x16u);
  }

  sub_10002C4C8(v90, v5);
  id v9 = *(void **)(a1 + 32);
  if (v9 && objc_getProperty(v9, v8, 16LL, 1))
  {
    uint64_t v10 = sub_10002EA48(*(void *)(a1 + 32)) + 200;
    uint64_t v11 = *(void **)(a1 + 48);
    id v12 = &AnalyticsSendEventLazy_ptr;
    uint64_t v88 = a1;
    id v89 = v5;
    if (v11)
    {
      __int128 v101 = 0u;
      __int128 v102 = 0u;
      __int128 v99 = 0u;
      __int128 v100 = 0u;
      id obj = v11;
      id v83 = [obj countByEnumeratingWithState:&v99 objects:v110 count:16];
      if (v83)
      {
        uint64_t v81 = *(void *)v100;
        uint64_t v13 = kSCPropNetIPv4RouteDestinationAddress;
        uint64_t v79 = kSCPropNetIPv4RouteSubnetMask;
        uint64_t v77 = kSCPropNetIPv6RouteDestinationAddress;
        uint64_t v75 = kSCPropNetIPv6RoutePrefixLength;
        while (2)
        {
          uint64_t v14 = 0LL;
          unint64_t v85 = v10;
          do
          {
            if (*(void *)v100 != v81) {
              objc_enumerationMutation(obj);
            }
            BOOL v15 = *(void **)(*((void *)&v99 + 1) + 8LL * (void)v14);
            BOOL v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "valueForKey:", v13, v75));

            if (v16)
            {
              uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:v13]);
              uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NWAddressEndpoint endpointWithHostname:port:]( &OBJC_CLASS___NWAddressEndpoint,  "endpointWithHostname:port:",  v17,  @"0"));
              id v19 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:v79]);
              LOBYTE(v20) = NEGetPrefixForIPv4NetmaskString();
            }

            else
            {
              uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:v77]);
              uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NWAddressEndpoint endpointWithHostname:port:]( &OBJC_CLASS___NWAddressEndpoint,  "endpointWithHostname:port:",  v17,  @"0"));
              uint64_t v20 = NEGetIntFromDictionary(v15, v75, 0LL);
            }

            uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition flowRemoteAddress:prefix:]( &OBJC_CLASS___NEPolicyCondition,  "flowRemoteAddress:prefix:",  v18,  v20));
            id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition scopedInterface:]( &OBJC_CLASS___NEPolicyCondition,  "scopedInterface:",  *(void *)(v88 + 56)));
            v109[0] = v22;
            id v23 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition fallbackTraffic](&OBJC_CLASS___NEPolicyCondition, "fallbackTraffic"));
            v109[1] = v23;
            v109[2] = v21;
            id v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v109,  3LL));

            BOOL v25 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult scopeSocketToInterfaceName:]( &OBJC_CLASS___NEPolicyResult,  "scopeSocketToInterfaceName:",  *(void *)(v88 + 56)));
            id v26 = [[NEPolicy alloc] initWithOrder:(char *)v14 + v85 result:v25 conditions:v24];
            BOOL v27 = sub_10002E57C((BOOL)v90, v26, v89);

            if (!v27)
            {
              uint64_t v47 = 0LL;
              id v5 = v89;
              goto LABEL_59;
            }

            uint64_t v14 = (char *)v14 + 1;
          }

          while (v83 != v14);
          uint64_t v10 = (v85 + (_DWORD)v14);
          id v83 = [obj countByEnumeratingWithState:&v99 objects:v110 count:16];
          if (v83) {
            continue;
          }
          break;
        }
      }

      a1 = v88;
      id v5 = v89;
      id v12 = &AnalyticsSendEventLazy_ptr;
    }

    id obj = (id)objc_claimAutoreleasedReturnValue([v12[172] scopeSocketToInterfaceName:*(void *)(a1 + 40)]);
    if (!*(_BYTE *)(a1 + 80))
    {
      uint64_t v48 = *(void **)(a1 + 64);
      if (v48)
      {
        __int128 v97 = 0u;
        __int128 v98 = 0u;
        __int128 v95 = 0u;
        __int128 v96 = 0u;
        id v86 = v48;
        id v84 = [v86 countByEnumeratingWithState:&v95 objects:v108 count:16];
        if (v84)
        {
          uint64_t v82 = *(void *)v96;
          uint64_t v49 = kSCPropNetIPv4RouteDestinationAddress;
          uint64_t v80 = kSCPropNetIPv4RouteSubnetMask;
          uint64_t v78 = kSCPropNetIPv6RouteDestinationAddress;
          uint64_t v76 = kSCPropNetIPv6RoutePrefixLength;
          while (2)
          {
            uint64_t v50 = 0LL;
            uint64_t v51 = v10;
            do
            {
              if (*(void *)v96 != v82) {
                objc_enumerationMutation(v86);
              }
              uint64_t v52 = *(void **)(*((void *)&v95 + 1) + 8LL * (void)v50);
              uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "valueForKey:", v49, v76));

              if (v53)
              {
                uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([v52 objectForKeyedSubscript:v49]);
                id v55 = (void *)objc_claimAutoreleasedReturnValue( +[NWAddressEndpoint endpointWithHostname:port:]( &OBJC_CLASS___NWAddressEndpoint,  "endpointWithHostname:port:",  v54,  @"0"));
                uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v52 objectForKeyedSubscript:v80]);
                LOBYTE(v57) = NEGetPrefixForIPv4NetmaskString();
              }

              else
              {
                uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([v52 objectForKeyedSubscript:v78]);
                id v55 = (void *)objc_claimAutoreleasedReturnValue( +[NWAddressEndpoint endpointWithHostname:port:]( &OBJC_CLASS___NWAddressEndpoint,  "endpointWithHostname:port:",  v54,  @"0"));
                uint64_t v57 = NEGetIntFromDictionary(v52, v76, 0LL);
              }

              uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition flowRemoteAddress:prefix:]( &OBJC_CLASS___NEPolicyCondition,  "flowRemoteAddress:prefix:",  v55,  v57));
              uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition scopedInterface:]( &OBJC_CLASS___NEPolicyCondition,  "scopedInterface:",  *(void *)(v88 + 56)));
              v107[0] = v59;
              id v60 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition fallbackTraffic](&OBJC_CLASS___NEPolicyCondition, "fallbackTraffic"));
              v107[1] = v60;
              v107[2] = v58;
              id v61 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v107,  3LL));

              id v62 = [[NEPolicy alloc] initWithOrder:(char *)v50 + v51 result:obj conditions:v61];
              BOOL v63 = sub_10002E57C((BOOL)v90, v62, v89);

              if (!v63)
              {
LABEL_57:
                uint64_t v47 = 0LL;
                id v5 = v89;
                goto LABEL_58;
              }

              uint64_t v50 = (char *)v50 + 1;
            }

            while (v84 != v50);
            uint64_t v10 = (v51 + (_DWORD)v50);
            id v84 = [v86 countByEnumeratingWithState:&v95 objects:v108 count:16];
            if (v84) {
              continue;
            }
            break;
          }
        }

        uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition flowRemoteAddressEmpty]( &OBJC_CLASS___NEPolicyCondition,  "flowRemoteAddressEmpty"));
        [v64 setNegative:1];
        id v65 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition scopedInterface:]( &OBJC_CLASS___NEPolicyCondition,  "scopedInterface:",  *(void *)(v88 + 56)));
        v106[0] = v65;
        uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition fallbackTraffic](&OBJC_CLASS___NEPolicyCondition, "fallbackTraffic"));
        v106[1] = v66;
        v106[2] = v64;
        id v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v106, 3LL));

        id v68 = objc_alloc(&OBJC_CLASS___NEPolicy);
        uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult scopeSocketToInterfaceName:]( &OBJC_CLASS___NEPolicyResult,  "scopeSocketToInterfaceName:",  *(void *)(v88 + 56)));
        id v70 = [v68 initWithOrder:v10 result:v69 conditions:v67];
        id v5 = v89;
        BOOL v71 = sub_10002E57C((BOOL)v90, v70, v89);

        if (!v71) {
          goto LABEL_55;
        }
        uint64_t v10 = (v10 + 1);
        a1 = v88;
      }
    }

    uint64_t v28 = *(void **)(a1 + 72);
    if (v28)
    {
      __int128 v93 = 0u;
      __int128 v94 = 0u;
      __int128 v91 = 0u;
      __int128 v92 = 0u;
      id v86 = v28;
      id v29 = [v86 countByEnumeratingWithState:&v91 objects:v105 count:16];
      if (v29)
      {
        id v30 = v29;
        uint64_t v31 = *(void *)v92;
        while (2)
        {
          for (id i = 0LL; i != v30; id i = (char *)i + 1)
          {
            if (*(void *)v92 != v31) {
              objc_enumerationMutation(v86);
            }
            uint64_t v33 = *(void **)(*((void *)&v91 + 1) + 8LL * (void)i);
            id v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet characterSetWithCharactersInString:]( &OBJC_CLASS___NSCharacterSet,  "characterSetWithCharactersInString:",  @"*."));
            id v35 = (void *)objc_claimAutoreleasedReturnValue([v33 stringByTrimmingCharactersInSet:v34]);
            if (v35)
            {
              uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](&OBJC_CLASS___NEPolicyCondition, "domain:", v35));
              uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition scopedInterface:]( &OBJC_CLASS___NEPolicyCondition,  "scopedInterface:",  *(void *)(a1 + 56)));
              v104[0] = v37;
              uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition fallbackTraffic](&OBJC_CLASS___NEPolicyCondition, "fallbackTraffic"));
              v104[1] = v38;
              v104[2] = v36;
              uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v104,  3LL));

              id v40 = [[NEPolicy alloc] initWithOrder:v10 result:obj conditions:v39];
              LODWORD(v3_Block_object_dispose(va, 8) = sub_10002E57C((BOOL)v90, v40, v89);

              if (!(_DWORD)v38)
              {

                goto LABEL_57;
              }

              uint64_t v10 = (v10 + 1);
              a1 = v88;
            }
          }

          id v30 = [v86 countByEnumeratingWithState:&v91 objects:v105 count:16];
          if (v30) {
            continue;
          }
          break;
        }
      }

      id v5 = v89;
    }

    if (!*(_BYTE *)(a1 + 80)) {
      goto LABEL_63;
    }
    __int16 v41 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition scopedInterface:]( &OBJC_CLASS___NEPolicyCondition,  "scopedInterface:",  *(void *)(a1 + 56)));
    v103[0] = v41;
    id v42 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition fallbackTraffic](&OBJC_CLASS___NEPolicyCondition, "fallbackTraffic"));
    v103[1] = v42;
    id v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v103, 2LL));

    id v44 = [[NEPolicy alloc] initWithOrder:v10 result:obj conditions:v43];
    LODWORD(v42) = sub_10002E57C((BOOL)v90, v44, v5);

    if ((_DWORD)v42)
    {
LABEL_63:
      uint64_t v45 = sub_10002C620(v90);
      if ((_DWORD)v45)
      {
        uint64_t v46 = ne_log_large_obj(v45);
        id v86 = (id)objc_claimAutoreleasedReturnValue(v46);
        if (os_log_type_enabled((os_log_t)v86, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v74 = *(void *)(a1 + 40);
          *(_DWORD *)buf = 138412546;
          uint64_t v112 = v74;
          __int16 v113 = 2112;
          id v114 = v5;
          _os_log_debug_impl( (void *)&_mh_execute_header,  (os_log_t)v86,  OS_LOG_TYPE_DEBUG,  "tunnel data Policy IDs added %@: %@",  buf,  0x16u);
        }

        uint64_t v47 = 1LL;
LABEL_58:

        goto LABEL_59;
      }
    }

uint64_t sub_100037690( uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, char a9)
{
  id v16 = a2;
  id v17 = a3;
  id v18 = a4;
  id v19 = a5;
  id v20 = a6;
  id v21 = a7;
  id v22 = a8;
  if (a1)
  {
    if (isa_nsstring(v16) && isa_nsstring(v17) && *(_DWORD *)(a1 + 8) == 1)
    {
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472LL;
      v24[2] = sub_100037834;
      v24[3] = &unk_1000BDD48;
      void v24[4] = a1;
      id v25 = v16;
      char v32 = a9;
      id v26 = v18;
      id v27 = v17;
      id v28 = v21;
      id v29 = v22;
      id v30 = v19;
      id v31 = v20;
      a1 = sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, v24);
    }

    else
    {
      a1 = 0LL;
    }
  }

  return a1;
}

uint64_t sub_100037834(uint64_t a1, void *a2)
{
  self = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 80LL, 1);
  }
  id v5 = Property;
  uint64_t v6 = ne_log_large_obj(v5);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    __int128 v142 = *(const char **)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    __int128 v240 = v142;
    __int16 v241 = 2112;
    id v242 = v5;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "Route Enforcement Policy IDs to be removed %@: %@",  buf,  0x16u);
  }

  sub_10002C4C8(self, v5);
  id v9 = *(void **)(a1 + 32);
  if (!v9 || !objc_getProperty(v9, v8, 16LL, 1))
  {
    uint64_t v35 = 0LL;
    goto LABEL_120;
  }

  int v10 = sub_10002EA48(*(void *)(a1 + 32));
  uint64_t v11 = (v10 + 265);
  unsigned int v221 = v10 + 200;
  __int128 v200 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
  __int128 v199 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", v11));
  if (*(_BYTE *)(a1 + 96))
  {
    id v13 = self;
    if (self) {
      id v13 = objc_getProperty(self, v12, 16LL, 1);
    }
    BOOL v14 = sub_1000568E4(v13, &v221, v11, 200LL, v5);
    if (!v14)
    {
      uint64_t v38 = ne_log_obj(v14, v15);
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        __int128 v240 = "-[NESMPolicySession setTunnelRouteEnforecementPoliciesForInterfaceName:outgoingInterfaceName:agentPIDs:in"
               "cludeIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%s: VPN addLocalNetworksExceptionWithOrder failed for PrivilegedTunnel priority",  buf,  0xCu);
      }

      uint64_t v35 = 0LL;
      goto LABEL_119;
    }
  }

  __int128 v198 = v5;
  int v185 = v10;
  __int128 v219 = 0u;
  __int128 v220 = 0u;
  __int128 v217 = 0u;
  __int128 v218 = 0u;
  uint64_t v186 = a1;
  id v16 = *(id *)(a1 + 48);
  id v17 = [v16 countByEnumeratingWithState:&v217 objects:v238 count:16];
  id v18 = &AnalyticsSendEventLazy_ptr;
  id v19 = &AnalyticsSendEventLazy_ptr;
  if (v17)
  {
    id v20 = v17;
    id v21 = 0LL;
    uint64_t v22 = *(void *)v218;
    id v23 = self;
    do
    {
      id v24 = 0LL;
      id v25 = v21;
      do
      {
        if (*(void *)v218 != v22) {
          objc_enumerationMutation(v16);
        }
        id v26 = *(void **)(*((void *)&v217 + 1) + 8LL * (void)v24);
        v237[0] = v200;
        id v27 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectivePID:]( NEPolicyCondition,  "effectivePID:",  [v26 intValue]));
        v237[1] = v27;
        id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue([v18[202] arrayWithObjects:v237 count:2]);

        id v28 = v19;
        id v29 = objc_alloc((Class)v19[170]);
        unsigned int v30 = v221;
        id v31 = [v29 initWithOrder:v221 result:v199 conditions:v21];
        BOOL v32 = sub_10002E57C((BOOL)self, v31, v198);

        if (!v32)
        {
          uint64_t v36 = ne_log_obj(v33, v34);
          uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315138;
            __int128 v240 = "-[NESMPolicySession setTunnelRouteEnforecementPoliciesForInterfaceName:outgoingInterfaceName:agentPID"
                   "s:includeIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:]_block_invoke";
            _os_log_error_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "%s: VPN adding tunnel agent skip policy failed",  buf,  0xCu);
          }

          uint64_t v35 = 0LL;
          id v5 = v198;
          goto LABEL_119;
        }

        id v24 = (char *)v24 + 1;
        id v25 = v21;
        id v19 = v28;
        id v18 = &AnalyticsSendEventLazy_ptr;
      }

      while (v20 != v24);
      id v20 = [v16 countByEnumeratingWithState:&v217 objects:v238 count:16];
    }

    while (v20);
  }

  else
  {
    unsigned int v30 = v221;
    id v23 = self;
  }

  unsigned int v221 = v30 + 1;
  uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition fallbackTraffic](&OBJC_CLASS___NEPolicyCondition, "fallbackTraffic"));
  v236[0] = v200;
  v236[1] = v39;
  id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue([v18[202] arrayWithObjects:v236 count:2]);
  id v40 = [objc_alloc((Class)v19[170]) initWithOrder:v30 + 1 result:v199 conditions:v21];
  BOOL v41 = sub_10002E57C((BOOL)v23, v40, v198);

  if (!v41)
  {
    uint64_t v141 = ne_log_obj(v42, v43);
    log = (os_log_s *)objc_claimAutoreleasedReturnValue(v141);
    if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      __int128 v240 = "-[NESMPolicySession setTunnelRouteEnforecementPoliciesForInterfaceName:outgoingInterfaceName:agentPIDs:incl"
             "udeIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_ERROR,  "%s: VPN adding fallback traffic skip policy failed",  buf,  0xCu);
    }

    uint64_t v35 = 0LL;
    id v5 = v198;
    goto LABEL_118;
  }

  unsigned int v221 = v30 + 2;
  if (v23) {
    id v44 = objc_getProperty(v23, v43, 16LL, 1);
  }
  else {
    id v44 = 0LL;
  }
  id v45 = v44;
  uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", 0LL));
  BOOL v47 = sub_1000549EC((BOOL)v45, &v221, v46, v198);

  if (!v47)
  {
    uint64_t v50 = ne_log_obj(v48, v49);
    uint64_t v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_ERROR,  "Failed to add icmpv6 exception for data",  buf,  2u);
    }
  }

  ++v221;
  if (v23) {
    id v52 = objc_getProperty(v23, v49, 16LL, 1);
  }
  else {
    id v52 = 0LL;
  }
  uint64_t v53 = sub_100058490(v52, &v221, 1LL, *(void **)(v186 + 56), 0, v198);
  if ((v53 & 1) == 0)
  {
    uint64_t v55 = ne_log_obj(v53, v54);
    uint64_t v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      __int128 v240 = "-[NESMPolicySession setTunnelRouteEnforecementPoliciesForInterfaceName:outgoingInterfaceName:agentPIDs:incl"
             "udeIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_ERROR,  "%s: Failed to add CellularServices exception for data",  buf,  0xCu);
    }
  }

  __int128 v182 = v39;
  unsigned int v221 = v185 + 250;
  log = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition scopedInterface:]( &OBJC_CLASS___NEPolicyCondition,  "scopedInterface:",  *(void *)(v186 + 56)));
  __int128 v193 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult scopeSocketToInterfaceName:]( &OBJC_CLASS___NEPolicyResult,  "scopeSocketToInterfaceName:",  *(void *)(v186 + 56)));
  __int128 v213 = 0u;
  __int128 v214 = 0u;
  __int128 v215 = 0u;
  __int128 v216 = 0u;
  id obj = *(id *)(v186 + 64);
  id v57 = [obj countByEnumeratingWithState:&v213 objects:v235 count:16];
  if (v57)
  {
    id v58 = v57;
    uint64_t v59 = *(void *)v214;
    uint64_t v187 = *(void *)v214;
    do
    {
      id v60 = 0LL;
      id v190 = v58;
      do
      {
        if (*(void *)v214 != v59) {
          objc_enumerationMutation(obj);
        }
        id v61 = *(void **)(*((void *)&v213 + 1) + 8LL * (void)v60);
        if (([v61 isDefaultRoute] & 1) == 0)
        {
          id v62 = (void *)objc_claimAutoreleasedReturnValue([v61 destinationAddress]);
          uint64_t v63 = objc_claimAutoreleasedReturnValue( +[NWAddressEndpoint endpointWithHostname:port:]( &OBJC_CLASS___NWAddressEndpoint,  "endpointWithHostname:port:",  v62,  @"0"));

          uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue([v61 destinationSubnetMask]);
          LOBYTE(v62) = NEGetPrefixForIPv4NetmaskString();

          __int128 v196 = (void *)v63;
          id v65 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition flowRemoteAddress:prefix:]( &OBJC_CLASS___NEPolicyCondition,  "flowRemoteAddress:prefix:",  v63,  v62));
          v234[0] = v65;
          v234[1] = v200;
          uint64_t v66 = (os_log_s *)objc_claimAutoreleasedReturnValue([v18[202] arrayWithObjects:v234 count:2]);

          id v67 = objc_alloc((Class)v19[170]);
          unsigned int v68 = v221;
          id v69 = [v67 initWithOrder:v221 result:v193 conditions:v66];
          LOBYTE(v63) = sub_10002E57C((BOOL)v23, v69, v198);

          if ((v63 & 1) == 0)
          {
            uint64_t v143 = ne_log_obj(v70, v71);
            __int128 v144 = (os_log_s *)objc_claimAutoreleasedReturnValue(v143);
            if (os_log_type_enabled(v144, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315138;
              __int128 v240 = "-[NESMPolicySession setTunnelRouteEnforecementPoliciesForInterfaceName:outgoingInterfaceName:agentP"
                     "IDs:includeIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:]_block_invoke";
              _os_log_error_impl( (void *)&_mh_execute_header,  v144,  OS_LOG_TYPE_ERROR,  "%s: VPN adding excluded IPv4 route policy failed",  buf,  0xCu);
            }

            uint64_t v35 = 0LL;
            uint64_t v39 = v182;
            uint64_t v87 = v65;
            id v5 = v198;
            uint64_t v88 = v66;
            goto LABEL_117;
          }

          v233[0] = v65;
          v233[1] = log;
          id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue([v18[202] arrayWithObjects:v233 count:2]);

          id v72 = [objc_alloc((Class)v19[170]) initWithOrder:v68 + 1 result:v199 conditions:v21];
          BOOL v73 = sub_10002E57C((BOOL)v23, v72, v198);

          if (!v73)
          {
            uint64_t v87 = v65;
            uint64_t v145 = ne_log_obj(v74, v75);
            __int128 v144 = (os_log_s *)objc_claimAutoreleasedReturnValue(v145);
            if (!os_log_type_enabled(v144, OS_LOG_TYPE_ERROR))
            {
LABEL_98:
              uint64_t v35 = 0LL;
              uint64_t v88 = v21;
              uint64_t v39 = v182;
              id v5 = v198;
              goto LABEL_117;
            }

            *(_DWORD *)buf = 136315138;
            __int128 v240 = "-[NESMPolicySession setTunnelRouteEnforecementPoliciesForInterfaceName:outgoingInterfaceName:agentPID"
                   "s:includeIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:]_block_invoke";
            __int128 v146 = "%s: VPN adding excluded IPv4 route skip policy failed";
LABEL_129:
            _os_log_error_impl((void *)&_mh_execute_header, v144, OS_LOG_TYPE_ERROR, v146, buf, 0xCu);
            goto LABEL_98;
          }

          id v18 = &AnalyticsSendEventLazy_ptr;
          id v23 = self;
          uint64_t v59 = v187;
          id v58 = v190;
        }

        id v60 = (char *)v60 + 1;
      }

      while (v58 != v60);
      id v58 = [obj countByEnumeratingWithState:&v213 objects:v235 count:16];
    }

    while (v58);
  }

  __int128 v211 = 0u;
  __int128 v212 = 0u;
  __int128 v209 = 0u;
  __int128 v210 = 0u;
  id obj = *(id *)(v186 + 72);
  id v76 = [obj countByEnumeratingWithState:&v209 objects:v232 count:16];
  if (v76)
  {
    id v77 = v76;
    uint64_t v78 = *(void *)v210;
    uint64_t v188 = *(void *)v210;
    id v5 = v198;
    do
    {
      uint64_t v79 = 0LL;
      id v191 = v77;
      do
      {
        if (*(void *)v210 != v78) {
          objc_enumerationMutation(obj);
        }
        uint64_t v80 = *(void **)(*((void *)&v209 + 1) + 8LL * (void)v79);
        if (([v80 isDefaultRoute] & 1) == 0)
        {
          uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue([v80 destinationAddress]);
          uint64_t v82 = v19;
          uint64_t v83 = objc_claimAutoreleasedReturnValue( +[NWAddressEndpoint endpointWithHostname:port:]( &OBJC_CLASS___NWAddressEndpoint,  "endpointWithHostname:port:",  v81,  @"0"));

          id v84 = (void *)objc_claimAutoreleasedReturnValue([v80 destinationNetworkPrefixLength]);
          id v85 = [v84 unsignedCharValue];

          __int128 v196 = (void *)v83;
          uint64_t v86 = v83;
          id v18 = &AnalyticsSendEventLazy_ptr;
          uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition flowRemoteAddress:prefix:]( &OBJC_CLASS___NEPolicyCondition,  "flowRemoteAddress:prefix:",  v86,  v85));
          v231[0] = v87;
          v231[1] = v200;
          uint64_t v88 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v231,  2LL));

          id v89 = objc_alloc((Class)v82[170]);
          unsigned int v90 = v221;
          id v91 = [v89 initWithOrder:v221 result:v193 conditions:v88];
          BOOL v92 = sub_10002E57C((BOOL)v23, v91, v198);

          if (!v92)
          {
            uint64_t v147 = ne_log_obj(v93, v94);
            __int128 v144 = (os_log_s *)objc_claimAutoreleasedReturnValue(v147);
            if (os_log_type_enabled(v144, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315138;
              __int128 v240 = "-[NESMPolicySession setTunnelRouteEnforecementPoliciesForInterfaceName:outgoingInterfaceName:agentP"
                     "IDs:includeIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:]_block_invoke";
              _os_log_error_impl( (void *)&_mh_execute_header,  v144,  OS_LOG_TYPE_ERROR,  "%s: VPN adding excluded IPv6 route policy failed",  buf,  0xCu);
            }

            uint64_t v35 = 0LL;
            uint64_t v39 = v182;
            goto LABEL_117;
          }

          v230[0] = v87;
          v230[1] = log;
          id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v230,  2LL));

          id v95 = [objc_alloc((Class)v82[170]) initWithOrder:v90 + 1 result:v199 conditions:v21];
          BOOL v96 = sub_10002E57C((BOOL)v23, v95, v198);

          __int128 v99 = v87;
          if (!v96)
          {
            uint64_t v148 = ne_log_obj(v97, v98);
            __int128 v144 = (os_log_s *)objc_claimAutoreleasedReturnValue(v148);
            if (!os_log_type_enabled(v144, OS_LOG_TYPE_ERROR)) {
              goto LABEL_98;
            }
            *(_DWORD *)buf = 136315138;
            __int128 v240 = "-[NESMPolicySession setTunnelRouteEnforecementPoliciesForInterfaceName:outgoingInterfaceName:agentPID"
                   "s:includeIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:]_block_invoke";
            __int128 v146 = "%s: VPN adding excluded IPv6 route skip policy failed";
            goto LABEL_129;
          }

          id v19 = v82;

          id v23 = self;
          uint64_t v78 = v188;
          id v77 = v191;
        }

        uint64_t v79 = (char *)v79 + 1;
      }

      while (v77 != v79);
      id v77 = [obj countByEnumeratingWithState:&v209 objects:v232 count:16];
    }

    while (v77);
  }

  unsigned int v221 = v185 + 255;
  id obj = (id)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition scopedInterface:]( &OBJC_CLASS___NEPolicyCondition,  "scopedInterface:",  *(void *)(v186 + 40)));
  __int128 v196 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult scopeSocketToInterfaceName:]( &OBJC_CLASS___NEPolicyResult,  "scopeSocketToInterfaceName:",  *(void *)(v186 + 40)));
  uint64_t v189 = objc_claimAutoreleasedReturnValue( +[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:]( &OBJC_CLASS___NEPolicyResult,  "tunnelIPToInterfaceName:secondaryResultType:",  *(void *)(v186 + 40),  1LL));
  __int128 v205 = 0u;
  __int128 v206 = 0u;
  __int128 v207 = 0u;
  __int128 v208 = 0u;
  id v100 = *(id *)(v186 + 80);
  id v101 = [v100 countByEnumeratingWithState:&v205 objects:v229 count:16];
  id v177 = v101;
  if (!v101) {
    goto LABEL_74;
  }
  uint64_t v102 = *(void *)v206;
  id v103 = v101;
  id v183 = v100;
  uint64_t v178 = *(void *)v206;
  while (2)
  {
    id v104 = 0LL;
    id v180 = v103;
    do
    {
      if (*(void *)v206 != v102) {
        objc_enumerationMutation(v100);
      }
      uint64_t v105 = *(void **)(*((void *)&v205 + 1) + 8LL * (void)v104);
      if (([v105 isDefaultRoute] & 1) == 0)
      {
        __int128 v106 = (void *)objc_claimAutoreleasedReturnValue([v105 destinationAddress]);
        uint64_t v107 = objc_claimAutoreleasedReturnValue( +[NWAddressEndpoint endpointWithHostname:port:]( &OBJC_CLASS___NWAddressEndpoint,  "endpointWithHostname:port:",  v106,  @"0"));

        id v108 = (void *)objc_claimAutoreleasedReturnValue([v105 destinationSubnetMask]);
        unsigned __int8 v109 = NEGetPrefixForIPv4NetmaskString();

        __int128 v192 = (void *)v107;
        __int128 v110 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition flowRemoteAddress:prefix:]( &OBJC_CLASS___NEPolicyCondition,  "flowRemoteAddress:prefix:",  v107,  v109));
        v228[0] = v110;
        v228[1] = obj;
        uint64_t v88 = (os_log_s *)objc_claimAutoreleasedReturnValue([v18[202] arrayWithObjects:v228 count:2]);

        id v111 = objc_alloc((Class)v19[170]);
        unsigned int v112 = v221;
        id v113 = [v111 initWithOrder:v221 result:v189 conditions:v88];
        id v5 = v198;
        BOOL v114 = sub_10002E57C((BOOL)v23, v113, v198);

        if (v114)
        {
          v227[0] = v110;
          v227[1] = v200;
          id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue([v18[202] arrayWithObjects:v227 count:2]);

          id v117 = [objc_alloc((Class)v19[170]) initWithOrder:v112 + 1 result:v196 conditions:v21];
          BOOL v118 = sub_10002E57C((BOOL)v23, v117, v198);

          if (v118)
          {

            id v18 = &AnalyticsSendEventLazy_ptr;
            id v23 = self;
            id v100 = v183;
            uint64_t v102 = v178;
            id v103 = v180;
            goto LABEL_72;
          }

          uint64_t v152 = ne_log_obj(v119, v120);
          uint64_t v150 = (os_log_s *)objc_claimAutoreleasedReturnValue(v152);
          __int128 v144 = (os_log_s *)v183;
          if (os_log_type_enabled(v150, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315138;
            __int128 v240 = "-[NESMPolicySession setTunnelRouteEnforecementPoliciesForInterfaceName:outgoingInterfaceName:agentPID"
                   "s:includeIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:]_block_invoke";
            int v153 = "%s: VPN adding included IPv4 route socket scoping policy failed";
            goto LABEL_133;
          }

LABEL_115:
          uint64_t v88 = v21;
          uint64_t v39 = v182;
          id v5 = v198;
        }

        else
        {
          uint64_t v149 = ne_log_obj(v115, v116);
          uint64_t v150 = (os_log_s *)objc_claimAutoreleasedReturnValue(v149);
          if (os_log_type_enabled(v150, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315138;
            __int128 v240 = "-[NESMPolicySession setTunnelRouteEnforecementPoliciesForInterfaceName:outgoingInterfaceName:agentPID"
                   "s:includeIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:]_block_invoke";
            id v151 = "%s: VPN adding included IPv4 route pass policy failed";
LABEL_131:
            _os_log_error_impl((void *)&_mh_execute_header, v150, OS_LOG_TYPE_ERROR, v151, buf, 0xCu);
          }

LABEL_113:
          uint64_t v39 = v182;
          __int128 v144 = (os_log_s *)v183;
        }

        uint64_t v87 = (void *)v189;

        uint64_t v35 = 0LL;
        goto LABEL_117;
      }

        goto LABEL_47;
      }

      uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue([v73 configuration]);
      uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue([v74 VPN]);
      id v76 = [v75 isEnabled];

      if (!v76) {
        goto LABEL_42;
      }
      id v77 = a1[4];
      if (v77)
      {
        uint64_t v78 = objc_getProperty(v77, v8, 192LL, 1);
        if (v78)
        {
          uint64_t v79 = v78;
          uint64_t v80 = a1[4];
          uint64_t v81 = v80 ? objc_getProperty(v80, v8, 192LL, 1) : 0LL;
          uint64_t v82 = a1[5];

          if (v81 != v82)
          {
            uint64_t v83 = a1[4];
            if (v83) {
              uint64_t v83 = objc_getProperty(v83, v8, 192LL, 1);
            }
            id v84 = v83;
            [v84 stopIfNecessaryWithReason:33];
          }
        }

        id v77 = a1[4];
        if (v77)
        {
          objc_setProperty_atomic(v77, v8, a1[5], 192LL);
          id v77 = a1[4];
          if (v77)
          {
            id v77 = objc_getProperty(v77, v8, 208LL, 1);
            if (v77)
            {
              id v85 = v77;
              uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue([a1[5] configuration]);
              uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue([v86 VPN]);
              uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue([v87 protocol]);
              if ([v88 includeAllNetworks])
              {

LABEL_148:
                id v177 = ne_log_obj(v77, v8);
                uint64_t v178 = (os_log_s *)objc_claimAutoreleasedReturnValue(v177);
                if (os_log_type_enabled(v178, OS_LOG_TYPE_DEFAULT))
                {
                  __int128 v238 = a1[4];
                  __int128 v243 = (id)objc_claimAutoreleasedReturnValue([a1[5] configuration]);
                  __int128 v240 = (void *)objc_claimAutoreleasedReturnValue([v243 VPN]);
                  uint64_t v179 = (void *)objc_claimAutoreleasedReturnValue([v240 protocol]);
                  else {
                    id v181 = "";
                  }
                  __int128 v182 = a1[4];
                  id v183 = a1[5];
                  if (v182) {
                    __int128 v182 = objc_getProperty(v182, v180, 208LL, 1);
                  }
                  __int128 v184 = v182;
                  int v185 = (void *)objc_claimAutoreleasedReturnValue([v184 configuration]);
                  uint64_t v186 = (void *)objc_claimAutoreleasedReturnValue([v185 VPN]);
                  uint64_t v187 = (void *)objc_claimAutoreleasedReturnValue([v186 protocol]);
                  uint64_t v189 = [v187 includeAllNetworks];
                  id v190 = a1[4];
                  if (v190) {
                    id v190 = objc_getProperty(v190, v188, 208LL, 1);
                  }
                  id v191 = "";
                  if (v189) {
                    id v191 = "IncludeAllNetworks ";
                  }
                  *(_DWORD *)buf = 138413314;
                  v254 = v238;
                  v255 = 2080;
                  *(void *)v256 = v181;
                  *(_WORD *)&v256[8] = 2112;
                  v257 = v183;
                  v258 = 2080;
                  v259 = v191;
                  v260 = 2112;
                  v261 = v190;
                  _os_log_impl( (void *)&_mh_execute_header,  v178,  OS_LOG_TYPE_DEFAULT,  "%@: Register Enterprise %sVPN Session %@: stopping Personal %sVPN session %@",  buf,  0x34u);
                }

                __int128 v193 = a1[4];
                if (v193) {
                  __int128 v193 = objc_getProperty(v193, v192, 208LL, 1);
                }
                id v60 = v193;
                __int128 v195 = a1[4];
                if (v195)
                {
                  objc_setProperty_atomic(v195, v194, 0LL, 208LL);
                  __int128 v196 = a1[4];
                }

                else
                {
                  __int128 v196 = 0LL;
                }

                v250[0] = _NSConcreteStackBlock;
                v250[1] = 3221225472LL;
                void v250[2] = sub_10004B244;
                v250[3] = &unk_1000BED30;
                v250[4] = v196;
                v251 = a1[5];
                v252 = a1[6];
                [v60 stopIfNecessaryWithReason:33 withCompletionHandler:v250];

                goto LABEL_113;
              }

              uint64_t v171 = a1[4];
              if (v171) {
                uint64_t v171 = objc_getProperty(v171, v89, 208LL, 1);
              }
              __int128 v172 = v171;
              uint64_t v173 = (void *)objc_claimAutoreleasedReturnValue([v172 configuration]);
              uint64_t v174 = (void *)objc_claimAutoreleasedReturnValue([v173 VPN]);
              __int128 v175 = (void *)objc_claimAutoreleasedReturnValue([v174 protocol]);
              __int128 v176 = [v175 includeAllNetworks];

              if ((v176 & 1) != 0) {
                goto LABEL_148;
              }
            }
          }
        }
      }

      __int128 v197 = ne_log_obj(v77, v8);
      id v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v197);
      if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v198 = a1[4];
        __int128 v199 = a1[5];
        *(_DWORD *)buf = 138412546;
        v254 = v198;
        v255 = 2112;
        *(void *)v256 = v199;
        __int128 v106 = "%@: Register Enterprise VPN Session: %@";
        goto LABEL_166;
      }

LABEL_72:
      id v104 = (char *)v104 + 1;
    }

    while (v103 != v104);
    id v103 = [v100 countByEnumeratingWithState:&v205 objects:v229 count:16];
    if (v103) {
      continue;
    }
    break;
  }

  uint64_t v50 = NEPolicySetDropPriorityLevel(0LL, 0LL);
  id v52 = ne_log_obj(v50, v51);
  uint64_t v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
  if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "applyIPDefaultDrop: IP Drop-All disabled due to disableDefaultDropAfterBoot",  buf,  2u);
  }

  return v8;
}

LABEL_74:
  __int128 v203 = 0u;
  __int128 v204 = 0u;
  __int128 v201 = 0u;
  __int128 v202 = 0u;
  id v121 = *(id *)(v186 + 88);
  id v122 = [v121 countByEnumeratingWithState:&v201 objects:v226 count:16];
  if (v122)
  {
    id v123 = v122;
    uint64_t v124 = *(void *)v202;
    id v183 = v121;
    uint64_t v179 = *(void *)v202;
LABEL_76:
    uint64_t v125 = 0LL;
    id v181 = v123;
    while (1)
    {
      if (*(void *)v202 != v124) {
        objc_enumerationMutation(v121);
      }
      __int128 v126 = *(void **)(*((void *)&v201 + 1) + 8 * v125);
      if (([v126 isDefaultRoute] & 1) == 0)
      {
        __int128 v127 = (void *)objc_claimAutoreleasedReturnValue([v126 destinationAddress]);
        uint64_t v128 = objc_claimAutoreleasedReturnValue( +[NWAddressEndpoint endpointWithHostname:port:]( &OBJC_CLASS___NWAddressEndpoint,  "endpointWithHostname:port:",  v127,  @"0"));

        __int128 v129 = (void *)objc_claimAutoreleasedReturnValue([v126 destinationNetworkPrefixLength]);
        id v130 = [v129 unsignedCharValue];

        __int128 v192 = (void *)v128;
        __int128 v110 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition flowRemoteAddress:prefix:]( &OBJC_CLASS___NEPolicyCondition,  "flowRemoteAddress:prefix:",  v128,  v130));
        v225[0] = v110;
        v225[1] = obj;
        uint64_t v88 = (os_log_s *)objc_claimAutoreleasedReturnValue([v18[202] arrayWithObjects:v225 count:2]);

        id v131 = objc_alloc((Class)v19[170]);
        unsigned int v132 = v221;
        id v133 = [v131 initWithOrder:v221 result:v189 conditions:v88];
        id v5 = v198;
        BOOL v134 = sub_10002E57C((BOOL)v23, v133, v198);

        if (!v134)
        {
          uint64_t v170 = ne_log_obj(v135, v136);
          uint64_t v150 = (os_log_s *)objc_claimAutoreleasedReturnValue(v170);
          if (!os_log_type_enabled(v150, OS_LOG_TYPE_ERROR)) {
            goto LABEL_113;
          }
          *(_DWORD *)buf = 136315138;
          __int128 v240 = "-[NESMPolicySession setTunnelRouteEnforecementPoliciesForInterfaceName:outgoingInterfaceName:agentPIDs:"
                 "includeIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:]_block_invoke";
          id v151 = "%s: VPN adding included IPv6 route pass policy failed";
          goto LABEL_131;
        }

        v224[0] = v110;
        v224[1] = v200;
        id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue([v18[202] arrayWithObjects:v224 count:2]);

        id v137 = [objc_alloc((Class)v19[170]) initWithOrder:v132 + 1 result:v196 conditions:v21];
        BOOL v138 = sub_10002E57C((BOOL)v23, v137, v198);

        if (!v138)
        {
          uint64_t v171 = ne_log_obj(v139, v140);
          uint64_t v150 = (os_log_s *)objc_claimAutoreleasedReturnValue(v171);
          __int128 v144 = (os_log_s *)v183;
          if (!os_log_type_enabled(v150, OS_LOG_TYPE_ERROR)) {
            goto LABEL_115;
          }
          *(_DWORD *)buf = 136315138;
          __int128 v240 = "-[NESMPolicySession setTunnelRouteEnforecementPoliciesForInterfaceName:outgoingInterfaceName:agentPIDs:"
                 "includeIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:]_block_invoke";
          int v153 = "%s: VPN adding included IPv6 route socket scoping policy failed";
LABEL_133:
          _os_log_error_impl((void *)&_mh_execute_header, v150, OS_LOG_TYPE_ERROR, v153, buf, 0xCu);
          goto LABEL_115;
        }

        id v18 = &AnalyticsSendEventLazy_ptr;
        id v23 = self;
        id v121 = v183;
        uint64_t v124 = v179;
        id v123 = v181;
      }

      if (v123 == (id)++v125)
      {
        id v123 = [v121 countByEnumeratingWithState:&v201 objects:v226 count:16];
        if (v123) {
          goto LABEL_76;
        }

        uint64_t v39 = v182;
        goto LABEL_104;
      }
    }
  }

  uint64_t v39 = v182;
  if (v177)
  {
LABEL_104:
    unsigned int v221 = v185 + 260;
    uint64_t v154 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition flowRemoteAddressEmpty]( &OBJC_CLASS___NEPolicyCondition,  "flowRemoteAddressEmpty"));
    [v154 setNegative:1];
    uint64_t v155 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyRouteRule routeRuleWithAction:forInterfaceName:]( &OBJC_CLASS___NEPolicyRouteRule,  "routeRuleWithAction:forInterfaceName:",  2LL,  *(void *)(v186 + 40)));
    __int128 v223 = v155;
    __int128 v156 = (void *)objc_claimAutoreleasedReturnValue([v18[202] arrayWithObjects:&v223 count:1]);

    __int128 v184 = v154;
    v222[0] = v154;
    v222[1] = v200;
    uint64_t v88 = (os_log_s *)objc_claimAutoreleasedReturnValue([v18[202] arrayWithObjects:v222 count:2]);

    id v157 = objc_alloc((Class)v19[170]);
    uint64_t v158 = v221;
    __int128 v159 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult routeRules:](&OBJC_CLASS___NEPolicyResult, "routeRules:", v156));
    id v161 = [v157 initWithOrder:v158 result:v159 conditions:v88];
    __int128 v162 = *(void **)(v186 + 32);
    if (v162) {
      id v163 = objc_getProperty(v162, v160, 48LL, 1);
    }
    else {
      id v163 = 0LL;
    }
    id v5 = v198;
    uint64_t v87 = (void *)v189;
    BOOL v164 = sub_10002E57C((BOOL)self, v161, v163);

    if (v164)
    {

      id v21 = v88;
      id v23 = self;
      goto LABEL_108;
    }

    uint64_t v174 = ne_log_obj(v165, v166);
    __int128 v175 = (os_log_s *)objc_claimAutoreleasedReturnValue(v174);
    if (os_log_type_enabled(v175, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      __int128 v240 = "-[NESMPolicySession setTunnelRouteEnforecementPoliciesForInterfaceName:outgoingInterfaceName:agentPIDs:incl"
             "udeIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v175,  OS_LOG_TYPE_ERROR,  "%s: VPN adding interface default deny policy failed",  buf,  0xCu);
    }

    uint64_t v35 = 0LL;
    __int128 v144 = (os_log_s *)v184;
  }

  else
  {
LABEL_108:
    uint64_t v167 = sub_10002C620(v23);
    if ((v167 & 1) != 0)
    {
      uint64_t v169 = ne_log_large_obj(v167);
      __int128 v144 = (os_log_s *)objc_claimAutoreleasedReturnValue(v169);
      id v5 = v198;
      uint64_t v87 = (void *)v189;
      if (os_log_type_enabled(v144, OS_LOG_TYPE_DEBUG))
      {
        __int128 v176 = *(const char **)(v186 + 40);
        *(_DWORD *)buf = 138412546;
        __int128 v240 = v176;
        __int16 v241 = 2112;
        id v242 = v198;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v144,  OS_LOG_TYPE_DEBUG,  "Route Enforcement Policy IDs added %@: %@",  buf,  0x16u);
      }

      uint64_t v35 = 1LL;
    }

    else
    {
      uint64_t v173 = ne_log_obj(v167, v168);
      __int128 v144 = (os_log_s *)objc_claimAutoreleasedReturnValue(v173);
      id v5 = v198;
      uint64_t v87 = (void *)v189;
      if (os_log_type_enabled(v144, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        __int128 v240 = "-[NESMPolicySession setTunnelRouteEnforecementPoliciesForInterfaceName:outgoingInterfaceName:agentPIDs:in"
               "cludeIPv4Routes:includeIPv6Routes:excludeIPv4Routes:excludeIPv6Routes:hasExcludeLocalNetworks:]_block_invoke";
        _os_log_error_impl( (void *)&_mh_execute_header,  v144,  OS_LOG_TYPE_ERROR,  "%s: VPN applying added policies failed",  buf,  0xCu);
      }

      uint64_t v35 = 0LL;
    }

    uint64_t v88 = v21;
  }

        break;
      case 3LL:
        id v20 = xpc_dictionary_get_int64(v6, "SessionStopReason");
        uint64_t v22 = ne_log_obj(v20, v21);
        id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)id v69 = 138412802;
          *(void *)&v69[4] = self;
          *(_WORD *)&v69[12] = 2112;
          *(void *)&v69[14] = v7;
          uint64_t v70 = 1024;
          LODWORD(v71) = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "%@: Received a stop command from %@ with reason %d",  v69,  0x1Cu);
        }

        kdebug_trace(726990884LL, 0LL, 0LL, 0LL, 0LL);
        id v24 = -[NESMSession isStopAllowed:](self, "isStopAllowed:", v6);
        if (v24)
        {
          if (!-[NESMSession status](self, "status") || -[NESMSession status](self, "status") == 1) {
            sub_1000922C8(v7, v26);
          }
          -[NESMSession handleStopMessageWithReason:](self, "handleStopMessageWithReason:", v20);
          break;
        }

        id v43 = ne_log_obj(v24, v25);
        id v17 = (void *)objc_claimAutoreleasedReturnValue(v43);
        if (os_log_type_enabled((os_log_t)v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)id v69 = 138412546;
          *(void *)&v69[4] = self;
          *(_WORD *)&v69[12] = 2112;
          *(void *)&v69[14] = v7;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v17,  OS_LOG_TYPE_DEFAULT,  "%@: %@ is not allowed to stop this session",  v69,  0x16u);
        }

        goto LABEL_74;
      case 4LL:
        id v27 = ne_log_obj(int64, v9);
        id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)id v69 = 138412546;
          *(void *)&v69[4] = self;
          *(_WORD *)&v69[12] = 2112;
          *(void *)&v69[14] = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "%@: Received an IPC establish request from %@",  v69,  0x16u);
        }

        kdebug_trace(726990888LL, 0LL, 0LL, 0LL, 0LL);
        -[NESMSession handleEstablishIPCMessage:](self, "handleEstablishIPCMessage:", v6);
        break;
      case 5LL:
        id v29 = ne_log_obj(int64, v9);
        unsigned int v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)id v69 = 138412546;
          *(void *)&v69[4] = self;
          *(_WORD *)&v69[12] = 2112;
          *(void *)&v69[14] = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "%@: Received a security session info request from %@",  v69,  0x16u);
        }

        kdebug_trace(726990892LL, 0LL, 0LL, 0LL, 0LL);
        -[NESMSession handleSecuritySessionInfoRequest:](self, "handleSecuritySessionInfoRequest:", v6);
        break;
      case 6LL:
        id v31 = xpc_dictionary_get_int64(v6, "SessionInfoType");
        uint64_t v33 = ne_log_obj(v31, v32);
        uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)id v69 = 138412802;
          *(void *)&v69[4] = self;
          *(_WORD *)&v69[12] = 2080;
          *(void *)&v69[14] = ne_session_info_type_to_string(v31);
          uint64_t v70 = 2112;
          uint64_t v71 = v7;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEBUG,  "%@: Received a info fetch request with type %s from %@",  v69,  0x20u);
        }

        kdebug_trace(726990896LL, 0LL, 0LL, 0LL, 0LL);
        if (!v7) {
          goto LABEL_34;
        }
        uint64_t v35 = v7[3];
        if ((v35 & 1) != 0 && (_DWORD)v31 != 4) {
          goto LABEL_35;
        }
        if ((v35 & 2) != 0) {
          goto LABEL_81;
        }
LABEL_34:
        if ((_DWORD)v31 == 4) {
          goto LABEL_35;
        }
LABEL_81:
        -[NESMSession handleGetInfoMessage:withType:](self, "handleGetInfoMessage:withType:", v6, v31);
        break;
      case 7LL:
        uint64_t v39 = xpc_dictionary_get_int64(v6, "SessionInfoType");
        BOOL v41 = ne_log_obj(v39, v40);
        uint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)id v69 = 138412802;
          *(void *)&v69[4] = self;
          *(_WORD *)&v69[12] = 2080;
          *(void *)&v69[14] = ne_session_info_type_to_string(v39);
          uint64_t v70 = 2112;
          uint64_t v71 = v7;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEBUG,  "%@: Received a send info request with type %s from %@",  v69,  0x20u);
        }

        kdebug_trace(726990988LL, 0LL, 0LL, 0LL, 0LL);
        -[NESMSession handleSendInfoMessage:withType:](self, "handleSendInfoMessage:withType:", v6, v39);
        break;
      default:
        break;
    }
  }

  else if ((v10 & 0xFFFFFFFFFFFFFFFELL) == 4)
  {
LABEL_35:
    xpc_object_t reply = xpc_dictionary_create_reply(v6);
    xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(v6);
    uint64_t v38 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
    xpc_connection_send_message(v38, reply);
  }
}

LABEL_117:
  id v21 = v88;
LABEL_118:

LABEL_119:
LABEL_120:

  return v35;
}

BOOL sub_100038CC0(_DWORD *a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = a3;
  uint64_t v7 = v6;
  BOOL v8 = 0LL;
  if (a1 && v5)
  {
    if (a1[2] == 4)
    {
      if (!v6)
      {
        uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
        -[NSMutableArray addObject:](v7, "addObject:", v9);
      }

      id v10 = objc_alloc(&OBJC_CLASS___NEPolicy);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult passWithFlags:](&OBJC_CLASS___NEPolicyResult, "passWithFlags:", 1LL));
      id v12 = [v10 initWithOrder:100 result:v11 conditions:v7];
      id Property = objc_getProperty(a1, v13, 56LL, 1);
      BOOL v8 = sub_10002CECC((BOOL)v5, v12, Property);
    }

    else
    {
      BOOL v8 = 0LL;
    }
  }

  return v8;
}

uint64_t sub_100038DD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = ne_log_large_obj(v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v6, 48LL, 1);
    }
    *(_DWORD *)buf = 136315394;
    uint64_t v155 = "-[NESMPolicySession setPolicyForContentFilterControlUnit:providerProcessIdentity:uid:settings:limitToProcess:"
           "perApp:disableEncryptedDNSSettings:]_block_invoke";
    __int16 v156 = 2112;
    id v157 = Property;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "%s: Policy IDs to be removed: %@",  buf,  0x16u);
  }

  BOOL v8 = *(void **)(a1 + 32);
  if (v8) {
    id v9 = objc_getProperty(v8, v7, 48LL, 1);
  }
  else {
    id v9 = 0LL;
  }
  sub_10002C4C8(v3, v9);
  uint64_t v11 = *(void **)(a1 + 32);
  if (v11) {
    id v12 = objc_getProperty(v11, v10, 56LL, 1);
  }
  else {
    id v12 = 0LL;
  }
  sub_10002D64C(v3, v12);
  if (v3) {
    v3[2] = *(_DWORD *)(a1 + 72);
  }
  uint64_t v13 = *(unsigned int *)(a1 + 72);
  unsigned int v14 = v13 & 0x1FFFFFFF;
  if ((v13 & 0x1FFFFFFF) < 2)
  {
    int v15 = 0;
  }

  else
  {
    int v15 = 0;
    do
    {
      ++v15;
      BOOL v16 = v14 > 3;
      v14 >>= 1;
    }

    while (v16);
  }

  uint64_t v126 = sub_10002EA48(*(void *)(a1 + 32)) + 1010 * v15;
  id v123 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult filterWithControlUnit:](&OBJC_CLASS___NEPolicyResult, "filterWithControlUnit:", v13));
  uint64_t v120 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult drop](&OBJC_CLASS___NEPolicyResult, "drop"));
  uint64_t v128 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult skipWithOrder:]( &OBJC_CLASS___NEPolicyResult,  "skipWithOrder:",  (v126 + 1010)));
  if (*(_BYTE *)(a1 + 80))
  {
LABEL_14:
    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    uint64_t isKindOfClass = NEResourcesCopyContentFilterExclusionList();
    id v19 = (_UNKNOWN **)isKindOfClass;
    __int128 v127 = v3;
    if (!isKindOfClass
      || (uint64_t v20 = objc_opt_class(&OBJC_CLASS___NSArray),
          uint64_t isKindOfClass = objc_opt_isKindOfClass(v19, v20),
          (isKindOfClass & 1) == 0))
    {
      uint64_t v21 = ne_log_large_obj(isKindOfClass);
      uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        id v115 = *(id *)(a1 + 32);
        if (v115) {
          id v115 = objc_getProperty(v115, v23, 48LL, 1);
        }
        *(_DWORD *)buf = 138412290;
        uint64_t v155 = (const char *)v115;
        _os_log_error_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "Content filter exclusion list not found: %@",  buf,  0xCu);
      }

      id v19 = &off_1000C1698;
    }

    __int128 v145 = 0u;
    __int128 v146 = 0u;
    __int128 v143 = 0u;
    __int128 v144 = 0u;
    id obj = v19;
    id v24 = [obj countByEnumeratingWithState:&v143 objects:v151 count:16];
    if (v24)
    {
      id v25 = v24;
      uint64_t v26 = *(void *)v144;
      do
      {
        for (id i = 0LL; i != v25; id i = (char *)i + 1)
        {
          if (*(void *)v144 != v26) {
            objc_enumerationMutation(obj);
          }
          uint64_t v28 = *(void *)(*((void *)&v143 + 1) + 8LL * (void)i);
          id v29 = +[NEProcessInfo copyUUIDsForExecutable:](&OBJC_CLASS___NEProcessInfo, "copyUUIDsForExecutable:", v28);
          unsigned int v30 = v29;
          if (v29 && [v29 count]
            || (id v31 = +[NEProcessInfo copyUUIDsForBundleID:uid:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForBundleID:uid:",  v28,  *(unsigned int *)(a1 + 76)),  v30,  (v30 = v31) != 0LL))
          {
            if ([v30 count]) {
              [v17 addObjectsFromArray:v30];
            }
          }
        }

        id v25 = [obj countByEnumeratingWithState:&v143 objects:v151 count:16];
      }

      while (v25);
    }

    __int128 v141 = 0u;
    __int128 v142 = 0u;
    __int128 v139 = 0u;
    __int128 v140 = 0u;
    id v125 = v17;
    id v32 = [v125 countByEnumeratingWithState:&v139 objects:v150 count:16];
    if (v32)
    {
      id v33 = v32;
      uint64_t v34 = *(void *)v140;
      do
      {
        uint64_t v35 = 0LL;
        do
        {
          if (*(void *)v140 != v34) {
            objc_enumerationMutation(v125);
          }
          uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  *(void *)(*((void *)&v139 + 1) + 8LL * (void)v35)));
          v149[0] = v36;
          uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition platformBinary](&OBJC_CLASS___NEPolicyCondition, "platformBinary"));
          v149[1] = v37;
          uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
          v149[2] = v38;
          uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v149,  3LL));

          id v41 = [[NEPolicy alloc] initWithOrder:v126 result:v128 conditions:v39];
          uint64_t v42 = *(void **)(a1 + 32);
          if (v42) {
            id v43 = objc_getProperty(v42, v40, 48LL, 1);
          }
          else {
            id v43 = 0LL;
          }
          sub_10002E57C((BOOL)v127, v41, v43);

          uint64_t v35 = (char *)v35 + 1;
        }

        while (v33 != v35);
        id v44 = [v125 countByEnumeratingWithState:&v139 objects:v150 count:16];
        id v33 = v44;
      }

      while (v44);
    }

    __int128 v137 = 0u;
    __int128 v138 = 0u;
    __int128 v135 = 0u;
    __int128 v136 = 0u;
    id v119 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) rules]);
    id v45 = [v119 countByEnumeratingWithState:&v135 objects:v148 count:16];
    if (v45)
    {
      id v46 = v45;
      uint64_t v122 = *(void *)v136;
      unsigned int v47 = 2;
      while (2)
      {
        uint64_t v48 = 0LL;
        if (v47 <= 0x3EA) {
          uint64_t v49 = (void *)(1002 - v47);
        }
        else {
          uint64_t v49 = 0LL;
        }
        unsigned int v118 = v47;
        int v121 = v126 + v47;
        do
        {
          if (*(void *)v136 != v122) {
            objc_enumerationMutation(v119);
          }
          if (v49 == v48)
          {
            unsigned int v47 = v118 + (_DWORD)v48;
            goto LABEL_63;
          }

          uint64_t v50 = *(void **)(*((void *)&v135 + 1) + 8LL * (void)v48);
          id v51 = v123;
          id v52 = [v50 action];
          uint64_t v53 = v128;
          if (v52 == (id)1 || (id v54 = [v50 action], v53 = v120, v54 == (id)2))
          {
            id v55 = v53;

            id v51 = v55;
          }

          uint64_t v56 = *(void **)(a1 + 32);
          id v57 = (void *)objc_claimAutoreleasedReturnValue([v50 networkRule]);
          id v58 = (void *)objc_claimAutoreleasedReturnValue([v50 networkRule]);
          sub_1000399F8(v56, v57, (uint64_t)[v58 matchProtocol], v127, v51, v121 + (_DWORD)v48, 0);

          uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([v50 networkRule]);
          [v59 appliesToLoopback];

          uint64_t v48 = (char *)v48 + 1;
        }

        while (v46 != v48);
        unsigned int v47 = v118 + (_DWORD)v48;
        id v46 = [v119 countByEnumeratingWithState:&v135 objects:v148 count:16];
        if (v46) {
          continue;
        }
        break;
      }
    }

    else
    {
      unsigned int v47 = 2;
    }

LABEL_63:
    id v69 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition uid:](&OBJC_CLASS___NEPolicyCondition, "uid:", 0LL));
    [v69 setNegative:1];
    uint64_t v147 = v69;
    uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v147, 1LL));
    id v72 = v123;
    id v73 = *(id *)(a1 + 56);
    if (v73)
    {
      id v74 = [v73 defaultAction];
      uint64_t v75 = v128;
      if (v74 == (id)1 || (id v73 = [*(id *)(a1 + 56) defaultAction], v75 = v120, v73 == (id)2))
      {
        id v76 = v75;

        id v72 = v76;
      }
    }

    uint64_t v77 = v47 + v126;
    uint64_t v78 = *(void *)(a1 + 64);
    uint64_t v79 = ne_log_obj(v73, v71);
    uint64_t v80 = (os_log_s *)objc_claimAutoreleasedReturnValue(v79);
    BOOL v81 = os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG);
    if (v78)
    {
      if (v81)
      {
        *(_DWORD *)buf = 136315138;
        uint64_t v155 = "-[NESMPolicySession setPolicyForContentFilterControlUnit:providerProcessIdentity:uid:settings:limitToProc"
               "ess:perApp:disableEncryptedDNSSettings:]_block_invoke";
        _os_log_debug_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_DEBUG,  "%s: Installing perApp Content Filter policies",  buf,  0xCu);
      }

      uint64_t v82 = *(void *)(a1 + 32);
      uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) appRules]);
      v129[0] = _NSConcreteStackBlock;
      v129[1] = 3221225472LL;
      v129[2] = sub_10003A128;
      v129[3] = &unk_1000BDD70;
      id v84 = v70;
      uint64_t v85 = *(void *)(a1 + 32);
      id v130 = v84;
      uint64_t v131 = v85;
      id v3 = v127;
      id v132 = v127;
      int v134 = v77;
      id v133 = v72;
      sub_1000320B0(v82, v83, 0, 0, 0LL, 0LL, v132, v129, 0LL);
    }

    else
    {
      if (v81)
      {
        *(_DWORD *)buf = 136315138;
        uint64_t v155 = "-[NESMPolicySession setPolicyForContentFilterControlUnit:providerProcessIdentity:uid:settings:limitToProc"
               "ess:perApp:disableEncryptedDNSSettings:]_block_invoke";
        _os_log_debug_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_DEBUG,  "%s: Installing system-wide Content Filter policies",  buf,  0xCu);
      }

      BOOL v96 = sub_100038CC0(*(_DWORD **)(a1 + 32), v127, 0LL);
      if (!v96)
      {
        uint64_t v103 = ne_log_obj(v96, v97);
        uint64_t v94 = (os_log_s *)objc_claimAutoreleasedReturnValue(v103);
        if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_ERROR,  "Failed to install content filter pass policies",  buf,  2u);
        }

        uint64_t v68 = 0LL;
        goto LABEL_85;
      }

      id v99 = [[NEPolicy alloc] initWithOrder:v77 result:v72 conditions:v70];
      id v100 = *(void **)(a1 + 32);
      if (v100) {
        id v101 = objc_getProperty(v100, v98, 48LL, 1);
      }
      else {
        id v101 = 0LL;
      }
      id v3 = v127;
      BOOL v102 = sub_10002E57C((BOOL)v127, v99, v101);

      if (!v102)
      {
LABEL_81:
        uint64_t v68 = 0LL;
LABEL_86:

        goto LABEL_87;
      }
    }

    uint64_t v86 = sub_10002C620(v3);
    if ((_DWORD)v86)
    {
      uint64_t v88 = ne_log_obj(v86, v87);
      id v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v88);
      if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
      {
        id v116 = *(id *)(a1 + 32);
        if (v116) {
          id v116 = objc_getProperty(v116, v90, 48LL, 1);
        }
        *(_DWORD *)buf = 136315394;
        uint64_t v155 = "-[NESMPolicySession setPolicyForContentFilterControlUnit:providerProcessIdentity:uid:settings:limitToProc"
               "ess:perApp:disableEncryptedDNSSettings:]_block_invoke";
        __int16 v156 = 2112;
        id v157 = v116;
        _os_log_debug_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEBUG, "%s: Policy IDs added: %@", buf, 0x16u);
      }

      uint64_t v93 = ne_log_obj(v91, v92);
      uint64_t v94 = (os_log_s *)objc_claimAutoreleasedReturnValue(v93);
      if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
      {
        id v117 = *(id *)(a1 + 32);
        if (v117) {
          id v117 = objc_getProperty(v117, v95, 56LL, 1);
        }
        *(_DWORD *)buf = 136315394;
        uint64_t v155 = "-[NESMPolicySession setPolicyForContentFilterControlUnit:providerProcessIdentity:uid:settings:limitToProc"
               "ess:perApp:disableEncryptedDNSSettings:]_block_invoke";
        __int16 v156 = 2112;
        id v157 = v117;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_DEBUG,  "%s: Policy IDs added at Low priority: %@",  buf,  0x16u);
      }

      uint64_t v68 = 1LL;
LABEL_85:

      id v3 = v127;
      goto LABEL_86;
    }

    goto LABEL_81;
  }

  id v60 = *(void **)(a1 + 40);
  if (!v60)
  {
    uint64_t v105 = *(void **)(a1 + 48);
    if (v105)
    {
      __int128 v106 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectivePID:version:]( NEPolicyCondition,  "effectivePID:version:",  [v105 pid],  objc_msgSend(*(id *)(a1 + 48), "pidVersion")));
      v152[0] = v106;
      uint64_t v107 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition delegateIsPlatformBinary]( &OBJC_CLASS___NEPolicyCondition,  "delegateIsPlatformBinary"));
      v152[1] = v107;
      id v108 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
      v152[2] = v108;
      unsigned __int8 v109 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v152, 3LL));

      id v111 = [[NEPolicy alloc] initWithOrder:v126 result:v128 conditions:v109];
      unsigned int v112 = *(void **)(a1 + 32);
      if (v112) {
        id v113 = objc_getProperty(v112, v110, 48LL, 1);
      }
      else {
        id v113 = 0LL;
      }
      sub_10002E57C((BOOL)v3, v111, v113);
    }

    goto LABEL_14;
  }

  id v61 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectivePID:version:]( NEPolicyCondition,  "effectivePID:version:",  [v60 pid],  objc_msgSend(*(id *)(a1 + 40), "pidVersion")));
  v153[0] = v61;
  id v62 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
  v153[1] = v62;
  uint64_t v63 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v153, 2LL));

  id v125 = (id)v63;
  id v65 = [[NEPolicy alloc] initWithOrder:v126 result:v123 conditions:v63];
  uint64_t v66 = *(void **)(a1 + 32);
  if (v66) {
    id v67 = objc_getProperty(v66, v64, 48LL, 1);
  }
  else {
    id v67 = 0LL;
  }
  sub_10002E57C((BOOL)v3, v65, v67);

  if (v3)
  {
    sub_10002DE64((uint64_t)v3, *(void **)(a1 + 32), 1);
    uint64_t v68 = sub_10002C620(v3);
  }

  else
  {
    uint64_t v68 = 0LL;
  }

LABEL_87:
  return v68;
}

              uint64_t v50 = v387;
            }

            unsigned __int8 v109 = [v34 denyAll];
            v375 = v35;
            v376 = v33;
            if ((_DWORD)v109)
            {
              id v111 = ne_log_obj(v109, v110);
              unsigned int v112 = (os_log_s *)objc_claimAutoreleasedReturnValue(v111);
              if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                v504 = v35;
                _os_log_impl( (void *)&_mh_execute_header,  v112,  OS_LOG_TYPE_DEFAULT,  "Adding drop policy for %@",  buf,  0xCu);
              }

              id v113 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult drop](&OBJC_CLASS___NEPolicyResult, "drop"));
              if (!v113)
              {
LABEL_182:

                goto LABEL_183;
              }
            }

            else
            {
              BOOL v114 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:v35]);
              else {
                id v113 = 0LL;
              }

              if (!v113) {
                goto LABEL_182;
              }
            }

            if (isa_nsarray(v378))
            {
              v468 = 0u;
              v467 = 0u;
              v466 = 0u;
              v465 = 0u;
              id v115 = v378;
              id v116 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v115,  "countByEnumeratingWithState:objects:count:",  &v465,  v499,  16LL);
              if (v116)
              {
                id v117 = v116;
                unsigned int v118 = *(void *)v466;
                do
                {
                  for (j = 0LL; j != v117; j = (char *)j + 1)
                  {
                    if (*(void *)v466 != v118) {
                      objc_enumerationMutation(v115);
                    }
                    uint64_t v120 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  *(void *)(*((void *)&v465 + 1) + 8LL * (void)j)));
                    -[NSMutableArray addObject:](v38, "addObject:", v120);
                  }

                  id v117 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v115,  "countByEnumeratingWithState:objects:count:",  &v465,  v499,  16LL);
                }

                while (v117);
              }

              uint64_t v50 = v387;
            }

            if (!-[NSMutableArray count](v38, "count")) {
              goto LABEL_182;
            }
            int v121 = v399;
            uint64_t v122 = (void *)objc_claimAutoreleasedReturnValue([v399 matchDomains]);
            id v123 = isa_nsarray(v122);

            if (v123)
            {
              v464 = 0u;
              v463 = 0u;
              v462 = 0u;
              v461 = 0u;
              uint64_t v124 = (void *)objc_claimAutoreleasedReturnValue([v399 matchDomains]);
              id v125 = [v124 countByEnumeratingWithState:&v461 objects:v498 count:16];
              if (v125)
              {
                uint64_t v126 = v125;
                __int128 v127 = *(void *)v462;
                do
                {
                  for (k = 0LL; k != v126; k = (char *)k + 1)
                  {
                    if (*(void *)v462 != v127) {
                      objc_enumerationMutation(v124);
                    }
                    __int128 v129 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition domain:]( &OBJC_CLASS___NEPolicyCondition,  "domain:",  *(void *)(*((void *)&v461 + 1) + 8LL * (void)k)));
                    -[NSMutableArray addObject:](v384, "addObject:", v129);
                  }

                  uint64_t v126 = [v124 countByEnumeratingWithState:&v461 objects:v498 count:16];
                }

                while (v126);
              }

              int v121 = v399;
            }

            id v130 = (void *)objc_claimAutoreleasedReturnValue([v121 matchAccountIdentifiers]);
            uint64_t v131 = isa_nsarray(v130);

            if (v131)
            {
              v460 = 0u;
              v458 = 0u;
              v459 = 0u;
              v457 = 0u;
              id v132 = (void *)objc_claimAutoreleasedReturnValue([v121 matchAccountIdentifiers]);
              id v133 = [v132 countByEnumeratingWithState:&v457 objects:v497 count:16];
              if (v133)
              {
                int v134 = v133;
                __int128 v135 = *(void *)v458;
                do
                {
                  for (m = 0LL; m != v134; m = (char *)m + 1)
                  {
                    if (*(void *)v458 != v135) {
                      objc_enumerationMutation(v132);
                    }
                    __int128 v137 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition accountIdentifier:]( &OBJC_CLASS___NEPolicyCondition,  "accountIdentifier:",  *(void *)(*((void *)&v457 + 1) + 8LL * (void)m)));
                    -[NSMutableArray addObject:](v387, "addObject:", v137);
                  }

                  int v134 = [v132 countByEnumeratingWithState:&v457 objects:v497 count:16];
                }

                while (v134);
              }
            }

            v455 = 0u;
            v456 = 0u;
            v453 = 0u;
            v454 = 0u;
            v381 = v38;
            __int128 v138 = v387;
            v383 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v381,  "countByEnumeratingWithState:objects:count:",  &v453,  v496,  16LL);
            if (!v383)
            {
LABEL_181:
              uint64_t v38 = v381;

LABEL_183:
              uint64_t v35 = v375;
              id v33 = v376;
              goto LABEL_184;
            }

            v382 = *(void *)v454;
            while (2)
            {
              __int128 v139 = 0LL;
LABEL_129:
              if (*(void *)v454 != v382) {
                objc_enumerationMutation(v381);
              }
              v385 = v139;
              __int128 v140 = *(void *)(*((void *)&v453 + 1) + 8 * v139);
              if (-[NSMutableArray count](v384, "count"))
              {
                v451 = 0u;
                v452 = 0u;
                v449 = 0u;
                v450 = 0u;
                v389 = v384;
                v396 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v389,  "countByEnumeratingWithState:objects:count:",  &v449,  v495,  16LL);
                if (v396)
                {
                  v392 = *(id *)v450;
                  do
                  {
                    for (n = 0LL; n != v396; n = (char *)n + 1)
                    {
                      if (*(id *)v450 != v392) {
                        objc_enumerationMutation(v389);
                      }
                      __int128 v142 = *(void *)(*((void *)&v449 + 1) + 8LL * (void)n);
                      if (-[NSMutableArray count](v138, "count"))
                      {
                        v400 = n;
                        v447 = 0u;
                        v448 = 0u;
                        v445 = 0u;
                        v446 = 0u;
                        __int128 v143 = v138;
                        __int128 v144 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v143,  "countByEnumeratingWithState:objects:count:",  &v445,  v494,  16LL);
                        if (v144)
                        {
                          __int128 v145 = v144;
                          __int128 v146 = *(void *)v446;
                          do
                          {
                            for (iid i = 0LL; ii != v145; iid i = (char *)ii + 1)
                            {
                              if (*(void *)v446 != v146) {
                                objc_enumerationMutation(v143);
                              }
                              uint64_t v148 = *(void *)(*((void *)&v445 + 1) + 8LL * (void)ii);
                              v493[0] = v140;
                              v493[1] = v142;
                              v493[2] = v148;
                              v493[3] = v409;
                              uint64_t v149 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v493,  4LL));
                              id v151 = [[NEPolicy alloc] initWithOrder:v406 result:v113 conditions:v149];
                              uint64_t v152 = *(id *)(v411 + 32);
                              if (v152) {
                                uint64_t v152 = objc_getProperty(v152, v150, 48LL, 1);
                              }
                              int v153 = v152;
                              sub_10002E57C((BOOL)self, v151, v153);

                              uint64_t v155 = [[NEPolicy alloc] initWithOrder:v403 result:v410 conditions:v149];
                              __int16 v156 = *(id *)(v411 + 32);
                              if (v156) {
                                __int16 v156 = objc_getProperty(v156, v154, 48LL, 1);
                              }
                              id v157 = v156;
                              sub_10002E57C((BOOL)self, v155, v157);
                            }

                            __int128 v145 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v143,  "countByEnumeratingWithState:objects:count:",  &v445,  v494,  16LL);
                          }

                          while (v145);
                          a1 = v411;
                          id v3 = self;
                          __int128 v138 = v387;
                        }

                        n = v400;
                      }

                      else
                      {
                        v492[0] = v140;
                        v492[1] = v142;
                        v492[2] = v409;
                        __int128 v143 = (NSMutableArray *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v492,  3LL));
                        __int128 v159 = [[NEPolicy alloc] initWithOrder:v406 result:v113 conditions:v143];
                        __int128 v160 = *(id *)(a1 + 32);
                        if (v160) {
                          __int128 v160 = objc_getProperty(v160, v158, 48LL, 1);
                        }
                        id v161 = v160;
                        sub_10002E57C((BOOL)v3, v159, v161);

                        id v163 = [[NEPolicy alloc] initWithOrder:v403 result:v410 conditions:v143];
                        BOOL v164 = *(id *)(a1 + 32);
                        if (v164) {
                          BOOL v164 = objc_getProperty(v164, v162, 48LL, 1);
                        }
                        uint64_t v165 = v164;
                        sub_10002E57C((BOOL)v3, v163, v165);
                      }
                    }

                    v396 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v389,  "countByEnumeratingWithState:objects:count:",  &v449,  v495,  16LL);
                  }

                  while (v396);
                }

                goto LABEL_172;
              }

              if (-[NSMutableArray count](v138, "count"))
              {
                v443 = 0u;
                v444 = 0u;
                v441 = 0u;
                v442 = 0u;
                v389 = v138;
                uint64_t v166 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v389,  "countByEnumeratingWithState:objects:count:",  &v441,  v491,  16LL);
                if (v166)
                {
                  uint64_t v167 = v166;
                  uint64_t v168 = *(void *)v442;
                  do
                  {
                    for (jj = 0LL; jj != v167; jj = (char *)jj + 1)
                    {
                      if (*(void *)v442 != v168) {
                        objc_enumerationMutation(v389);
                      }
                      uint64_t v170 = *(void *)(*((void *)&v441 + 1) + 8LL * (void)jj);
                      v490[0] = v140;
                      v490[1] = v170;
                      v490[2] = v409;
                      uint64_t v171 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v490,  3LL));
                      uint64_t v173 = [[NEPolicy alloc] initWithOrder:v406 result:v113 conditions:v171];
                      uint64_t v174 = *(id *)(a1 + 32);
                      if (v174) {
                        uint64_t v174 = objc_getProperty(v174, v172, 48LL, 1);
                      }
                      __int128 v175 = v174;
                      sub_10002E57C((BOOL)v3, v173, v175);

                      id v177 = [[NEPolicy alloc] initWithOrder:v403 result:v410 conditions:v171];
                      uint64_t v178 = *(id *)(a1 + 32);
                      if (v178) {
                        uint64_t v178 = objc_getProperty(v178, v176, 48LL, 1);
                      }
                      uint64_t v179 = v178;
                      sub_10002E57C((BOOL)v3, v177, v179);
                    }

                    uint64_t v167 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v389,  "countByEnumeratingWithState:objects:count:",  &v441,  v491,  16LL);
                  }

                  while (v167);
                }

                __int128 v138 = v387;
LABEL_172:
                __int128 v139 = v385;
              }

              else
              {
                v489[0] = v140;
                v489[1] = v409;
                v389 = (NSMutableArray *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v489,  2LL));
                id v181 = [[NEPolicy alloc] initWithOrder:v406 result:v113 conditions:v389];
                __int128 v182 = *(id *)(a1 + 32);
                if (v182) {
                  __int128 v182 = objc_getProperty(v182, v180, 48LL, 1);
                }
                id v183 = v182;
                sub_10002E57C((BOOL)v3, v181, v183);

                int v185 = [[NEPolicy alloc] initWithOrder:v403 result:v410 conditions:v389];
                uint64_t v186 = *(id *)(a1 + 32);
                if (v186) {
                  uint64_t v186 = objc_getProperty(v186, v184, 48LL, 1);
                }
                uint64_t v187 = v186;
                sub_10002E57C((BOOL)v3, v185, v187);
              }

              if ((id)++v139 == v383)
              {
                uint64_t v188 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v381,  "countByEnumeratingWithState:objects:count:",  &v453,  v496,  16LL);
                v383 = v188;
                if (!v188) {
                  goto LABEL_181;
                }
                continue;
              }

              goto LABEL_129;
            }
          }

          uint64_t v80 = [v34 multicastPreferenceSet];
          BOOL v81 = *(id *)(a1 + 32);
          v391 = v80;
          if (v81)
          {
            if (v80) {
              uint64_t v82 = 192LL;
            }
            else {
              uint64_t v82 = 184LL;
            }
            BOOL v81 = objc_getProperty(v81, v79, v82, 1);
          }

          uint64_t v83 = (NSMutableArray *)v81;

          id v84 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(-[NSMutableArray objectForKeyedSubscript:](v83, "objectForKeyedSubscript:", v35));
          uint64_t v63 = sub_10003AE5C( *(void *)(a1 + 32),  v399,  (uint64_t)[v399 isIdentifierExternal],  *(unsigned int *)(a1 + 96));
          v395 = v83;
          if (v84)
          {
            if (v391) {
              uint64_t v85 = v371;
            }
            else {
              uint64_t v85 = v372;
            }
            [v85 removeObject:v35];
            uint64_t v87 = *(id *)(a1 + 32);
            if (v87) {
              uint64_t v87 = objc_getProperty(v87, v86, 208LL, 1);
            }
            uint64_t v88 = v87;
            id v89 = (void *)objc_claimAutoreleasedReturnValue([v88 objectForKeyedSubscript:v35]);

            unsigned int v90 = [v89 isEqualToArray:v63];
            if ((v90 & 1) != 0)
            {
              uint64_t v59 = v84;
              uint64_t v34 = v399;
LABEL_86:

              id v58 = v395;
              goto LABEL_87;
            }

            id v95 = ne_log_obj(v90, v91);
            BOOL v96 = (os_log_s *)objc_claimAutoreleasedReturnValue(v95);
            if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412546;
              v504 = v35;
              v505 = 2112;
              v506 = v84;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v96,  OS_LOG_TYPE_DEBUG,  "Deny Policy IDs to be removed for %@: %@",  buf,  0x16u);
            }

            sub_10002C4C8(v3, v84);
            uint64_t v83 = v395;
          }

          uint64_t v97 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);

          uint64_t v98 = v83;
          id v99 = v97;
          -[NSMutableArray setObject:forKeyedSubscript:](v98, "setObject:forKeyedSubscript:", v97, v35);
          id v101 = *(id *)(a1 + 32);
          if (v101) {
            id v101 = objc_getProperty(v101, v100, 208LL, 1);
          }
          uint64_t v34 = v399;
          BOOL v102 = v101;
          [v102 setObject:v63 forKeyedSubscript:v35];

          uint64_t v59 = v99;
          sub_10003D27C( *(void *)(a1 + 32),  v399,  1,  v3,  *(unsigned int *)(a1 + 96),  v99,  &v477,  *(void **)(a1 + 56),  *(void **)(a1 + 64));
          uint64_t v105 = ne_log_obj(v103, v104);
          id v89 = (void *)objc_claimAutoreleasedReturnValue(v105);
          __int128 v106 = os_log_type_enabled((os_log_t)v89, OS_LOG_TYPE_DEBUG);
          if (v391)
          {
            if (!v106) {
              goto LABEL_86;
            }
            *(_DWORD *)buf = 138412546;
            v504 = v35;
            v505 = 2112;
            v506 = v59;
            uint64_t v107 = (os_log_s *)v89;
            id v108 = "Silent deny Policy IDs added for %@: %@";
          }

          else
          {
            if (!v106) {
              goto LABEL_86;
            }
            *(_DWORD *)buf = 138412546;
            v504 = v35;
            v505 = 2112;
            v506 = v59;
            uint64_t v107 = (os_log_s *)v89;
            id v108 = "Deny Policy IDs added for %@: %@";
          }

          _os_log_debug_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEBUG, v108, buf, 0x16u);
          goto LABEL_86;
        }

        uint64_t v48 = *(id *)(a1 + 32);
        if (v48) {
          uint64_t v48 = objc_getProperty(v48, v47, 184LL, 1);
        }
        uint64_t v49 = v48;
        uint64_t v38 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([v49 objectForKeyedSubscript:v35]);

        if (v38)
        {
          [v372 removeObject:v35];
        }

        else
        {
          uint64_t v38 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
          uint64_t v93 = *(id *)(a1 + 32);
          if (v93) {
            uint64_t v93 = objc_getProperty(v93, v92, 184LL, 1);
          }
          uint64_t v94 = v93;
          [v94 setObject:v38 forKeyedSubscript:v35];

          sub_10003D27C( *(void *)(a1 + 32),  v34,  1,  v3,  *(unsigned int *)(a1 + 96),  v38,  &v477,  *(void **)(a1 + 56),  *(void **)(a1 + 64));
        }

void sub_1000399F8(void *a1, void *a2, uint64_t a3, void *a4, void *a5, unsigned int a6, int a7)
{
  id v92 = a2;
  id v12 = a4;
  id v13 = a5;
  if (a1)
  {
    unsigned int v14 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    int v15 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
    -[NSMutableArray addObject:](v14, "addObject:", v15);

    if (a3 == 1)
    {
      uint64_t v16 = 6LL;
    }

    else
    {
      if (a3 != 2) {
        goto LABEL_7;
      }
      uint64_t v16 = 17LL;
    }

    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition ipProtocol:](&OBJC_CLASS___NEPolicyCondition, "ipProtocol:", v16));
    -[NSMutableArray addObject:](v14, "addObject:", v17);

LABEL_7:
    id v18 = [v92 matchDirection];
    BOOL v91 = (BOOL)v12;
    int v19 = a7;
    if (v18 == (id)2)
    {
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition isInbound](&OBJC_CLASS___NEPolicyCondition, "isInbound"));
      [v20 setNegative:1];
    }

    else
    {
      if (v18 != (id)1)
      {
LABEL_12:
        uint64_t v21 = objc_claimAutoreleasedReturnValue([v92 matchRemoteHostOrNetworkEndpoint]);
        uint64_t v89 = a3;
        if (!v21) {
          goto LABEL_17;
        }
        uint64_t v22 = (void *)v21;
        id v23 = (nw_endpoint *)objc_claimAutoreleasedReturnValue([v92 matchRemoteHostOrNetworkEndpoint]);
        id v24 = v13;
        nw_endpoint_type_t type = nw_endpoint_get_type(v23);

        BOOL v26 = type == nw_endpoint_type_host;
        id v13 = v24;
        if (v26)
        {
          id v27 = (nw_endpoint *)objc_claimAutoreleasedReturnValue([v92 matchRemoteHostOrNetworkEndpoint]);
          uint64_t v28 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  nw_endpoint_get_hostname(v27));
          id v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
          unsigned int v30 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](&OBJC_CLASS___NEPolicyCondition, "domain:", v29));
          -[NSMutableArray addObject:](v14, "addObject:", v30);

          id v31 = (nw_endpoint *)objc_claimAutoreleasedReturnValue([v92 matchRemoteHostOrNetworkEndpoint]);
          uint64_t port = nw_endpoint_get_port(v31);

          if ((_DWORD)port)
          {
            id v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  port));
            uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v33 stringValue]);
            uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue( +[NWAddressEndpoint endpointWithHostname:port:]( &OBJC_CLASS___NWAddressEndpoint,  "endpointWithHostname:port:",  @"0.0.0.0",  v34));
            uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition flowRemoteAddress:prefix:]( &OBJC_CLASS___NEPolicyCondition,  "flowRemoteAddress:prefix:",  v35,  0LL));
            id v37 = (id)objc_claimAutoreleasedReturnValue(-[NSMutableArray arrayByAddingObject:](v14, "arrayByAddingObject:", v36));

            uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  port));
            uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v38 stringValue]);
            id v40 = (void *)objc_claimAutoreleasedReturnValue( +[NWAddressEndpoint endpointWithHostname:port:]( &OBJC_CLASS___NWAddressEndpoint,  "endpointWithHostname:port:",  @"::",  v39));
            id v41 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition flowRemoteAddress:prefix:]( &OBJC_CLASS___NEPolicyCondition,  "flowRemoteAddress:prefix:",  v40,  0LL));
            uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray arrayByAddingObject:](v14, "arrayByAddingObject:", v41));

            id v13 = v24;
            id v43 = [[NEPolicy alloc] initWithOrder:a6 result:v24 conditions:v37];
            id Property = objc_getProperty(a1, v44, 48LL, 1);
            sub_10002E57C(v91, v43, Property);

            id v46 = [[NEPolicy alloc] initWithOrder:a6 result:v24 conditions:v42];
            id v48 = objc_getProperty(a1, v47, 48LL, 1);
            sub_10002E57C(v91, v46, v48);

            id v12 = (id)v91;
            goto LABEL_33;
          }

          id v71 = objc_alloc(&OBJC_CLASS___NEPolicy);
          uint64_t v72 = a6;
          id v13 = v24;
          id v73 = v24;
        }

        else
        {
LABEL_17:
          uint64_t v49 = objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "matchRemoteHostOrNetworkEndpoint", a3));
          if (v49)
          {
            uint64_t v50 = (void *)v49;
            id v51 = (nw_endpoint *)objc_claimAutoreleasedReturnValue([v92 matchRemoteHostOrNetworkEndpoint]);
            nw_endpoint_type_t v52 = nw_endpoint_get_type(v51);

            if (v52 == nw_endpoint_type_address)
            {
              uint64_t v53 = (nw_endpoint *)objc_claimAutoreleasedReturnValue([v92 matchRemoteHostOrNetworkEndpoint]);
              address = nw_endpoint_get_address(v53);

              id v55 = [v92 matchRemotePrefix];
              unsigned __int8 v56 = v55;
              if (v55 == (id)0x7FFFFFFFFFFFFFFFLL)
              {
                if (address->sa_family == 30) {
                  unsigned __int8 v56 = 0x80;
                }
                else {
                  unsigned __int8 v56 = 32;
                }
              }

              id v57 = (void *)objc_claimAutoreleasedReturnValue([v92 matchRemoteHostOrNetworkEndpoint]);
              id v58 = (void *)objc_claimAutoreleasedReturnValue( +[NWEndpoint endpointWithCEndpoint:]( &OBJC_CLASS___NWEndpoint,  "endpointWithCEndpoint:",  v57));
              uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition flowRemoteAddress:prefix:]( &OBJC_CLASS___NEPolicyCondition,  "flowRemoteAddress:prefix:",  v58,  v56));
              -[NSMutableArray addObject:](v14, "addObject:", v59);

              NEIsWildcardAddress(address);
            }
          }

          uint64_t v60 = objc_claimAutoreleasedReturnValue([v92 matchLocalNetworkEndpoint]);
          if (v60)
          {
            id v61 = (void *)v60;
            id v62 = (nw_endpoint *)objc_claimAutoreleasedReturnValue([v92 matchLocalNetworkEndpoint]);
            nw_endpoint_type_t v63 = nw_endpoint_get_type(v62);

            if (v63 == nw_endpoint_type_address)
            {
              uint64_t v64 = (nw_endpoint *)objc_claimAutoreleasedReturnValue([v92 matchLocalNetworkEndpoint]);
              id v65 = nw_endpoint_get_address(v64);

              id v66 = [v92 matchLocalPrefix];
              unsigned __int8 v67 = v66;
              if (v66 == (id)0x7FFFFFFFFFFFFFFFLL)
              {
                if (v65->sa_family == 30) {
                  unsigned __int8 v67 = 0x80;
                }
                else {
                  unsigned __int8 v67 = 32;
                }
              }

              uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue([v92 matchLocalNetworkEndpoint]);
              id v69 = (void *)objc_claimAutoreleasedReturnValue( +[NWEndpoint endpointWithCEndpoint:]( &OBJC_CLASS___NWEndpoint,  "endpointWithCEndpoint:",  v68));
              uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition flowLocalAddress:prefix:]( &OBJC_CLASS___NEPolicyCondition,  "flowLocalAddress:prefix:",  v69,  v67));
              -[NSMutableArray addObject:](v14, "addObject:", v70);

              NEIsWildcardAddress(v65);
            }
          }

          id v71 = objc_alloc(&OBJC_CLASS___NEPolicy);
          uint64_t v72 = a6;
          id v73 = v13;
        }

        id v37 = objc_msgSend(v71, "initWithOrder:result:conditions:", v72, v73, v14, v89);
        id v75 = objc_getProperty(a1, v74, 48LL, 1);
        id v12 = (id)v91;
        sub_10002E57C(v91, v37, v75);
LABEL_33:

        if (!v19)
        {
LABEL_42:

          goto LABEL_43;
        }

        uint64_t v76 = objc_claimAutoreleasedReturnValue([v92 matchRemoteHostOrNetworkEndpoint]);
        if (!v76
          || (uint64_t v77 = (void *)v76,
              uint64_t v78 = (nw_endpoint *)objc_claimAutoreleasedReturnValue([v92 matchRemoteHostOrNetworkEndpoint]),
              int v79 = nw_endpoint_get_port(v78),
              v78,
              v77,
              !v79))
        {
          uint64_t v80 = v14;
          if (!v80)
          {
LABEL_41:

            goto LABEL_42;
          }

LABEL_40:
          id v84 = objc_getProperty(a1, v83, 56LL, 1);
          sub_10002E434((BOOL)v12, v80, v84);
          goto LABEL_41;
        }

        uint64_t v80 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        BOOL v81 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
        -[NSMutableArray addObject:](v80, "addObject:", v81);

        if (v89 == 1)
        {
          uint64_t v82 = 6LL;
        }

        else
        {
          if (v89 != 2) {
            goto LABEL_47;
          }
          uint64_t v82 = 17LL;
        }

        uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition ipProtocol:](&OBJC_CLASS___NEPolicyCondition, "ipProtocol:", v82, v89));
        -[NSMutableArray addObject:](v80, "addObject:", v85);

LABEL_47:
        uint64_t v86 = (nw_endpoint *)objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "matchRemoteHostOrNetworkEndpoint", v89));
        id v87 = +[NEPolicyCondition schemeUsingPort:]( &OBJC_CLASS___NEPolicyCondition,  "schemeUsingPort:",  nw_endpoint_get_port(v86));
        uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue(v87);
        -[NSMutableArray addObject:](v80, "addObject:", v88);

        if (!v80) {
          goto LABEL_41;
        }
        goto LABEL_40;
      }

      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition isInbound](&OBJC_CLASS___NEPolicyCondition, "isInbound"));
    }

    -[NSMutableArray addObject:](v14, "addObject:", v20);

    goto LABEL_12;
  }

  id v130 = 0;
LABEL_44:

LABEL_95:
LABEL_96:

  return v130;
}

      id v32 = 0LL;
      goto LABEL_26;
    }

    IONetworkInterfaceObject = IOEthernetControllerGetIONetworkInterfaceObject(a1);
    if ((_DWORD)IONetworkInterfaceObject)
    {
      CFid Property = (void *)IORegistryEntryCreateCFProperty( IONetworkInterfaceObject,  @"BSD Name",  kCFAllocatorDefault,  0);
      CFTypeID TypeID = CFStringGetTypeID();
      if (CFProperty)
      {
        id v12 = TypeID;
        CFTypeID TypeID = CFGetTypeID(CFProperty);
        if (TypeID == v12)
        {
          if (a2) {
            id v13 = (void *)a2[1];
          }
          else {
            id v13 = 0LL;
          }
          unsigned int v14 = v13;
          [v14 setName:CFProperty];

          BSDSocket = IOEthernetControllerGetBSDSocket(a1);
          if ((BSDSocket & 0x80000000) != 0)
          {
            id v33 = ne_log_obj(BSDSocket, v16);
            id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)__strerrbuf = 0;
              _os_log_error_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "Failed to get the kernel control socket of the user ethernet controller",  (uint8_t *)__strerrbuf,  2u);
            }

            goto LABEL_34;
          }

          id v17 = BSDSocket;
          id v18 = -[NSFileHandle initWithFileDescriptor:closeOnDealloc:]( objc_alloc(&OBJC_CLASS___NSFileHandle),  "initWithFileDescriptor:closeOnDealloc:",  BSDSocket,  0LL);
          [v14 setControlSocket:v18];

          if (setsockopt(v17, 0xFFFF, 4097, &v43, 4u))
          {
            int v19 = *__error();
            uint64_t v20 = strerror_r(v19, __strerrbuf, 0x80uLL);
            if ((_DWORD)v20) {
              __strerrbuf[0] = 0;
            }
            uint64_t v22 = ne_log_obj(v20, v21);
            id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
            if (!os_log_type_enabled(v23, OS_LOG_TYPE_FAULT)) {
              goto LABEL_34;
            }
            *(_DWORD *)buf = 67109378;
            id v45 = v19;
            id v46 = 2080;
            SEL v47 = __strerrbuf;
            id v24 = "Failed to set the kernel control socket send buffer size: [%d] %s";
          }

          else
          {
            uint64_t v34 = setsockopt(v17, 0xFFFF, 4098, &v43, 4u);
            if (!(_DWORD)v34)
            {
              id v40 = ne_log_obj(v34, v35);
              id v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
              if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v14 name]);
                *(_DWORD *)__strerrbuf = 138412290;
                uint64_t v49 = v42;
                _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "Created user ethernet interface %@",  (uint8_t *)__strerrbuf,  0xCu);
              }

              [v14 setUserEthernetController:a1];
              id v27 = 1LL;
              if (a2) {
                goto LABEL_25;
              }
              goto LABEL_40;
            }

            uint64_t v36 = *__error();
            id v37 = strerror_r(v36, __strerrbuf, 0x80uLL);
            if ((_DWORD)v37) {
              __strerrbuf[0] = 0;
            }
            uint64_t v39 = ne_log_obj(v37, v38);
            id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
            if (!os_log_type_enabled(v23, OS_LOG_TYPE_FAULT)) {
              goto LABEL_34;
            }
            *(_DWORD *)buf = 67109378;
            id v45 = v36;
            id v46 = 2080;
            SEL v47 = __strerrbuf;
            id v24 = "Failed to set the kernel control socket receive buffer size: [%d] %s";
          }

          _os_log_fault_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, v24, buf, 0x12u);
LABEL_34:

LABEL_24:
          CFRelease(a1);
          id v27 = 0LL;
          if (a2) {
            goto LABEL_25;
          }
          goto LABEL_40;
        }
      }

      uint64_t v28 = ne_log_obj(TypeID, v11);
      id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__strerrbuf = 0;
        unsigned int v30 = "Failed to get the BSD name of the user ethernet controller";
LABEL_36:
        _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, v30, (uint8_t *)__strerrbuf, 2u);
      }
    }

    else
    {
      id v31 = ne_log_obj(IONetworkInterfaceObject, v8);
      id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__strerrbuf = 0;
        unsigned int v30 = "Failed to get the IO object for the user ethernet controller";
        goto LABEL_36;
      }
    }

    unsigned int v14 = 0LL;
    goto LABEL_24;
  }

  id v25 = ne_log_obj(isKindOfClass, v6);
  BOOL v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__strerrbuf = 0;
    _os_log_error_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "No completion object was provided",  (uint8_t *)__strerrbuf,  2u);
  }

  if (a1) {
    CFRelease(a1);
  }
LABEL_27:
}

LABEL_43:
}

  id result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10003A128(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 mutableCopy];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 arrayByAddingObjectsFromArray:v4]);

  uint64_t v9 = ne_log_obj(v7, v8);
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    int v20 = 136315394;
    uint64_t v21 = "-[NESMPolicySession setPolicyForContentFilterControlUnit:providerProcessIdentity:uid:settings:limitToProcess:p"
          "erApp:disableEncryptedDNSSettings:]_block_invoke";
    __int16 v22 = 2112;
    id v23 = v6;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%s: Installing perApp Content Filter policy %@",  (uint8_t *)&v20,  0x16u);
  }

  BOOL v11 = sub_100038CC0(*(_DWORD **)(a1 + 40), *(void **)(a1 + 48), v6);
  if (!v11)
  {
    uint64_t v13 = ne_log_obj(v11, v12);
    unsigned int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v20) = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Failed to install content filter pass policies",  (uint8_t *)&v20,  2u);
    }
  }

  uint64_t v15 = *(void *)(a1 + 48);
  id v17 = [[NEPolicy alloc] initWithOrder:*(unsigned int *)(a1 + 64) result:*(void *)(a1 + 56) conditions:v6];
  id v18 = *(void **)(a1 + 40);
  if (v18) {
    id Property = objc_getProperty(v18, v16, 48LL, 1);
  }
  else {
    id Property = 0LL;
  }
  sub_10002E57C(v15, v17, Property);
}

uint64_t sub_10003A2C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = ne_log_large_obj(v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v6, 152LL, 1);
    }
    *(_DWORD *)buf = 136315394;
    BOOL v26 = "-[NESMPolicySession setPerAppDropPolicy:]_block_invoke";
    __int16 v27 = 2112;
    id v28 = Property;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "%s: Policy IDs to be removed: %@",  buf,  0x16u);
  }

  uint64_t v8 = *(void **)(a1 + 32);
  if (v8) {
    id v9 = objc_getProperty(v8, v7, 152LL, 1);
  }
  else {
    id v9 = 0LL;
  }
  sub_10002D64C(v3, v9);
  uint64_t v10 = *(void *)(a1 + 32);
  BOOL v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) appRules]);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_10003A4D0;
  v22[3] = &unk_1000BDBA0;
  id v12 = v3;
  uint64_t v13 = *(void *)(a1 + 32);
  id v23 = v12;
  uint64_t v24 = v13;
  sub_1000320B0(v10, v11, 0, 0, 0LL, 0LL, v12, v22, 0LL);

  uint64_t v16 = ne_log_obj(v14, v15);
  id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    id v21 = *(id *)(a1 + 32);
    if (v21) {
      id v21 = objc_getProperty(v21, v18, 152LL, 1);
    }
    *(_DWORD *)buf = 136315394;
    BOOL v26 = "-[NESMPolicySession setPerAppDropPolicy:]_block_invoke";
    __int16 v27 = 2112;
    id v28 = v21;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "%s: Policy IDs added at Low priority: %@",  buf,  0x16u);
  }

  return 1LL;
}

void sub_10003A4D0(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  uint64_t v7 = ne_log_obj(v5, v6);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    int v16 = 136315394;
    id v17 = "-[NESMPolicySession setPerAppDropPolicy:]_block_invoke";
    __int16 v18 = 2112;
    id v19 = v5;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "%s: Installing perApp drop policy %@",  (uint8_t *)&v16,  0x16u);
  }

  if ((a3 & 1) == 0)
  {
    uint64_t v9 = *(void *)(a1 + 32);
    id v10 = objc_alloc(&OBJC_CLASS___NEPolicy);
    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult drop](&OBJC_CLASS___NEPolicyResult, "drop"));
    id v13 = [v10 initWithOrder:10000 result:v11 conditions:v5];
    uint64_t v14 = *(void **)(a1 + 40);
    if (v14) {
      id Property = objc_getProperty(v14, v12, 152LL, 1);
    }
    else {
      id Property = 0LL;
    }
    sub_10002CECC(v9, v13, Property);
  }
}

id sub_10003A620(id result, const char *a2)
{
  if (result)
  {
    int v2 = result;
    id result = objc_msgSend(objc_getProperty(result, a2, 152, 1), "count");
    if (result)
    {
      uint64_t v3 = ne_log_large_obj(result);
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v8 = "-[NESMPolicySession removePerAppDropPolicy]";
        __int16 v9 = 2112;
        id Property = objc_getProperty(v2, v5, 152LL, 1);
        _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s: policy IDs to be removed: %@",  buf,  0x16u);
      }

      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472LL;
      v6[2] = sub_10003A740;
      v6[3] = &unk_1000BDAA0;
      void v6[4] = v2;
      return (id)sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, v6);
    }
  }

  return result;
}

uint64_t sub_10003A740(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v5 = *(void **)(a1 + 32);
  if (v5) {
    id Property = objc_getProperty(v5, v3, 152LL, 1);
  }
  else {
    id Property = 0LL;
  }
  if (sub_10002D64C(v4, Property)) {
    uint64_t v7 = sub_10002C620(v4);
  }
  else {
    uint64_t v7 = 0LL;
  }

  return v7;
}

uint64_t sub_10003A7AC(uint64_t a1, void *a2)
{
  id v52 = a2;
  uint64_t v3 = ne_log_large_obj(v52);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v5, 144LL, 1);
    }
    *(_DWORD *)buf = 136315394;
    id v65 = "-[NESMPolicySession setDefaultDropExclusionPolicy]_block_invoke";
    __int16 v66 = 2112;
    id v67 = Property;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s: Policy IDs to be removed: %@",  buf,  0x16u);
  }

  uint64_t v7 = *(void **)(a1 + 32);
  if (v7) {
    id v8 = objc_getProperty(v7, v6, 144LL, 1);
  }
  else {
    id v8 = 0LL;
  }
  sub_10002D64C(v52, v8);
  uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  uint64_t isKindOfClass = NEResourcesCopyContentFilterDefaultDropExclusionList();
  BOOL v11 = (void *)isKindOfClass;
  if (isKindOfClass
    && (uint64_t v12 = objc_opt_class(&OBJC_CLASS___NSArray),
        uint64_t isKindOfClass = objc_opt_isKindOfClass(v11, v12),
        (isKindOfClass & 1) != 0))
  {
    __int128 v59 = 0u;
    __int128 v60 = 0u;
    __int128 v57 = 0u;
    __int128 v58 = 0u;
    uint64_t v49 = v11;
    id v13 = v11;
    id v14 = [v13 countByEnumeratingWithState:&v57 objects:v63 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v58;
      do
      {
        for (id i = 0LL; i != v15; id i = (char *)i + 1)
        {
          if (*(void *)v58 != v16) {
            objc_enumerationMutation(v13);
          }
          __int16 v18 = *(void **)(*((void *)&v57 + 1) + 8LL * (void)i);
          id v19 = +[NEProcessInfo copyUUIDsForExecutable:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForExecutable:",  v18,  v49);
          id v21 = v19;
          if (v19 && (id v19 = [v19 count]) != 0)
          {
            if ([v21 count]) {
              [v50 addObjectsFromArray:v21];
            }
          }

          else
          {
            uint64_t v22 = ne_log_obj(v19, v20);
            id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136315394;
              id v65 = "-[NESMPolicySession setDefaultDropExclusionPolicy]_block_invoke";
              __int16 v66 = 2112;
              id v67 = v18;
              _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "%s: Failed to resolve path %@ to Mach-o UUIDs",  buf,  0x16u);
            }
          }
        }

        id v15 = [v13 countByEnumeratingWithState:&v57 objects:v63 count:16];
      }

      while (v15);
    }

    __int128 v55 = 0u;
    __int128 v56 = 0u;
    __int128 v53 = 0u;
    __int128 v54 = 0u;
    id obj = v50;
    id v24 = [obj countByEnumeratingWithState:&v53 objects:v62 count:16];
    if (v24)
    {
      id v25 = v24;
      uint64_t v26 = *(void *)v54;
      do
      {
        __int16 v27 = 0LL;
        do
        {
          if (*(void *)v54 != v26) {
            objc_enumerationMutation(obj);
          }
          id v28 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  *(void *)(*((void *)&v53 + 1) + 8LL * (void)v27),  v49));
          v61[0] = v28;
          id v29 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition platformBinary](&OBJC_CLASS___NEPolicyCondition, "platformBinary"));
          v61[1] = v29;
          unsigned int v30 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
          v61[2] = v30;
          id v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v61, 3LL));

          id v32 = objc_alloc(&OBJC_CLASS___NEPolicy);
          id v33 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult passWithFlags:](&OBJC_CLASS___NEPolicyResult, "passWithFlags:", 1LL));
          id v34 = [v32 initWithOrder:101 result:v33 conditions:v31];

          uint64_t v36 = *(void **)(a1 + 32);
          if (v36) {
            id v37 = objc_getProperty(v36, v35, 144LL, 1);
          }
          else {
            id v37 = 0LL;
          }
          sub_10002CECC((BOOL)v52, v34, v37);

          __int16 v27 = (char *)v27 + 1;
        }

        while (v25 != v27);
        id v38 = [obj countByEnumeratingWithState:&v53 objects:v62 count:16];
        id v25 = v38;
      }

      while (v38);
    }

    uint64_t v41 = ne_log_obj(v39, v40);
    uint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
    {
      id v48 = *(id *)(a1 + 32);
      BOOL v11 = v49;
      if (v48) {
        id v48 = objc_getProperty(v48, v43, 144LL, 1);
      }
      *(_DWORD *)buf = 136315394;
      id v65 = "-[NESMPolicySession setDefaultDropExclusionPolicy]_block_invoke";
      __int16 v66 = 2112;
      id v67 = v48;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEBUG,  "%s: Policy IDs added at Low priority: %@",  buf,  0x16u);
      uint64_t v44 = 1LL;
    }

    else
    {
      uint64_t v44 = 1LL;
      BOOL v11 = v49;
    }
  }

  else
  {
    uint64_t v45 = ne_log_obj(isKindOfClass, v10);
    uint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      id v65 = "-[NESMPolicySession setDefaultDropExclusionPolicy]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_INFO,  "%s: Content filter exclusion list not found",  buf,  0xCu);
    }

    uint64_t v44 = 0LL;
  }

  return v44;
}

id sub_10003ACD0(id result, const char *a2)
{
  if (result)
  {
    int v2 = result;
    id result = objc_msgSend(objc_getProperty(result, a2, 144, 1), "count");
    if (result)
    {
      uint64_t v3 = ne_log_large_obj(result);
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        id v8 = "-[NESMPolicySession removeDefaultDropExclusionPolicy]";
        __int16 v9 = 2112;
        id Property = objc_getProperty(v2, v5, 144LL, 1);
        _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "%s: policy IDs to be removed: %@",  buf,  0x16u);
      }

      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472LL;
      v6[2] = sub_10003ADF0;
      v6[3] = &unk_1000BDAA0;
      void v6[4] = v2;
      return (id)sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, v6);
    }
  }

  return result;
}

uint64_t sub_10003ADF0(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v5 = *(void **)(a1 + 32);
  if (v5) {
    id Property = objc_getProperty(v5, v3, 144LL, 1);
  }
  else {
    id Property = 0LL;
  }
  if (sub_10002D64C(v4, Property)) {
    uint64_t v7 = sub_10002C620(v4);
  }
  else {
    uint64_t v7 = 0LL;
  }

  return v7;
}

NSMutableArray *sub_10003AE5C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 0LL;
  }
  id v6 = a2;
  uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 matchSigningIdentifier]);
  __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([v6 matchPath]);

  uint64_t v10 = (void *)NEHelperCacheCopyAppUUIDMappingForUIDExtended( a4,  [v8 UTF8String],  objc_msgSend(v9, "UTF8String"),  a3);
  BOOL v11 = v10;
  if (v10 && xpc_get_type(v10) == (xpc_type_t)&_xpc_type_array)
  {
    applier[0] = _NSConcreteStackBlock;
    applier[1] = 3221225472LL;
    applier[2] = sub_10003AF80;
    applier[3] = &unk_1000BEA60;
    id v14 = v7;
    xpc_array_apply(v11, applier);
  }

  return v7;
}

uint64_t sub_10003AF80(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = v4;
  if (v4 && xpc_get_type(v4) == (xpc_type_t)&_xpc_type_uuid)
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", xpc_uuid_get_bytes(v5));
    [v6 addObject:v7];
  }

  return 1LL;
}

void sub_10003B00C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1 && [v5 count])
  {
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int16 v18 = v6;
    id v7 = v6;
    id v8 = [v7 countByEnumeratingWithState:&v19 objects:v25 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v20;
      do
      {
        for (id i = 0LL; i != v9; id i = (char *)i + 1)
        {
          if (*(void *)v20 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)i);
          id v13 = sub_10003AE5C(a1, v12, 0LL, a3);
          if (!-[NSMutableArray count](v13, "count"))
          {
            uint64_t v15 = ne_log_obj(0LL, v14);
            uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            {
              id v17 = (void *)objc_claimAutoreleasedReturnValue([v12 matchSigningIdentifier]);
              *(_DWORD *)buf = 138412290;
              id v24 = v17;
              _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "No Mach-O UUIDs found for app rule %@",  buf,  0xCu);
            }
          }

          [v12 setCachedMachOUUIDs:v13];
        }

        id v9 = [v7 countByEnumeratingWithState:&v19 objects:v25 count:16];
      }

      while (v9);
    }

    id v6 = v18;
  }
}

void sub_10003B1CC(uint64_t a1, void *a2, void *a3, int a4)
{
  id v8 = a2;
  id v7 = a3;
  if (a1 && isa_nsarray(v8) && *(_DWORD *)(a1 + 8) == 1)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_10003B2A0;
    v9[3] = &unk_1000BDCF8;
    v9[4] = a1;
    id v10 = v7;
    id v11 = v8;
    int v12 = a4;
    sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, v9);
  }
}

uint64_t sub_10003B2A0(uint64_t a1, void *a2)
{
  id v93 = a2;
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3) {
    id Property = objc_getProperty(v3, v2, 48LL, 1);
  }
  else {
    id Property = 0LL;
  }
  sub_10002C4C8(v93, Property);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult scopeSocketToInterfaceName:]( &OBJC_CLASS___NEPolicyResult,  "scopeSocketToInterfaceName:",  *(void *)(a1 + 40)));
  int v6 = sub_10002EA48(*(void *)(a1 + 32));
  __int128 v122 = 0u;
  __int128 v123 = 0u;
  __int128 v124 = 0u;
  __int128 v125 = 0u;
  id obj = *(id *)(a1 + 48);
  id v78 = [obj countByEnumeratingWithState:&v122 objects:v137 count:16];
  if (v78)
  {
    uint64_t v7 = (v6 + 100);
    uint64_t v77 = *(void *)v123;
    do
    {
      uint64_t v8 = 0LL;
      do
      {
        if (*(void *)v123 != v77) {
          objc_enumerationMutation(obj);
        }
        uint64_t v79 = v8;
        id v9 = *(void **)(*((void *)&v122 + 1) + 8 * v8);
        uint64_t v82 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        id v10 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        id v11 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        uint64_t v80 = sub_10003AE5C(*(void *)(a1 + 32), v9, 0LL, *(unsigned int *)(a1 + 56));
        id v87 = v11;
        if (isa_nsarray(v80))
        {
          __int128 v120 = 0u;
          __int128 v121 = 0u;
          __int128 v118 = 0u;
          __int128 v119 = 0u;
          int v12 = v80;
          id v13 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v12,  "countByEnumeratingWithState:objects:count:",  &v118,  v136,  16LL);
          if (v13)
          {
            id v14 = v13;
            uint64_t v15 = *(void *)v119;
            do
            {
              for (id i = 0LL; i != v14; id i = (char *)i + 1)
              {
                if (*(void *)v119 != v15) {
                  objc_enumerationMutation(v12);
                }
                id v17 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  *(void *)(*((void *)&v118 + 1) + 8LL * (void)i)));
                -[NSMutableArray addObject:](v82, "addObject:", v17);
              }

              id v14 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v12,  "countByEnumeratingWithState:objects:count:",  &v118,  v136,  16LL);
            }

            while (v14);
          }

          id v11 = v87;
        }

        if (-[NSMutableArray count](v82, "count"))
        {
          __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([v9 matchDomains]);
          int v19 = isa_nsarray(v18);

          if (v19)
          {
            __int128 v116 = 0u;
            __int128 v117 = 0u;
            __int128 v114 = 0u;
            __int128 v115 = 0u;
            __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v9 matchDomains]);
            id v21 = [v20 countByEnumeratingWithState:&v114 objects:v135 count:16];
            if (v21)
            {
              id v22 = v21;
              uint64_t v23 = *(void *)v115;
              do
              {
                for (j = 0LL; j != v22; j = (char *)j + 1)
                {
                  if (*(void *)v115 != v23) {
                    objc_enumerationMutation(v20);
                  }
                  id v25 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition domain:]( &OBJC_CLASS___NEPolicyCondition,  "domain:",  *(void *)(*((void *)&v114 + 1) + 8LL * (void)j)));
                  -[NSMutableArray addObject:](v10, "addObject:", v25);
                }

                id v22 = [v20 countByEnumeratingWithState:&v114 objects:v135 count:16];
              }

              while (v22);
            }

            id v11 = v87;
          }

          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v9 matchAccountIdentifiers]);
          int v27 = isa_nsarray(v26);

          if (v27)
          {
            __int128 v112 = 0u;
            __int128 v113 = 0u;
            __int128 v110 = 0u;
            __int128 v111 = 0u;
            id v28 = (void *)objc_claimAutoreleasedReturnValue([v9 matchAccountIdentifiers]);
            id v29 = [v28 countByEnumeratingWithState:&v110 objects:v134 count:16];
            if (v29)
            {
              id v30 = v29;
              uint64_t v31 = *(void *)v111;
              do
              {
                for (k = 0LL; k != v30; k = (char *)k + 1)
                {
                  if (*(void *)v111 != v31) {
                    objc_enumerationMutation(v28);
                  }
                  id v33 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition accountIdentifier:]( &OBJC_CLASS___NEPolicyCondition,  "accountIdentifier:",  *(void *)(*((void *)&v110 + 1) + 8LL * (void)k)));
                  -[NSMutableArray addObject:](v11, "addObject:", v33);
                }

                id v30 = [v28 countByEnumeratingWithState:&v110 objects:v134 count:16];
              }

              while (v30);
            }
          }

          __int128 v108 = 0u;
          __int128 v109 = 0u;
          __int128 v106 = 0u;
          __int128 v107 = 0u;
          BOOL v81 = v82;
          id v84 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v81,  "countByEnumeratingWithState:objects:count:",  &v106,  v133,  16LL);
          if (v84)
          {
            uint64_t v83 = *(void *)v107;
            uint64_t v86 = v10;
            do
            {
              id v34 = 0LL;
              do
              {
                if (*(void *)v107 != v83) {
                  objc_enumerationMutation(v81);
                }
                uint64_t v85 = v34;
                uint64_t v35 = *(void *)(*((void *)&v106 + 1) + 8LL * (void)v34);
                if (-[NSMutableArray count](v86, "count"))
                {
                  __int128 v104 = 0u;
                  __int128 v105 = 0u;
                  __int128 v102 = 0u;
                  __int128 v103 = 0u;
                  unsigned int v90 = v86;
                  id v36 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v90,  "countByEnumeratingWithState:objects:count:",  &v102,  v132,  16LL);
                  if (v36)
                  {
                    id v37 = v36;
                    uint64_t v38 = *(void *)v103;
                    uint64_t v88 = *(void *)v103;
                    do
                    {
                      uint64_t v39 = 0LL;
                      id v89 = v37;
                      do
                      {
                        if (*(void *)v103 != v38) {
                          objc_enumerationMutation(v90);
                        }
                        uint64_t v40 = *(void *)(*((void *)&v102 + 1) + 8LL * (void)v39);
                        if (-[NSMutableArray count](v11, "count"))
                        {
                          __int128 v100 = 0u;
                          __int128 v101 = 0u;
                          __int128 v98 = 0u;
                          __int128 v99 = 0u;
                          uint64_t v41 = v11;
                          id v42 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v41,  "countByEnumeratingWithState:objects:count:",  &v98,  v131,  16LL);
                          if (v42)
                          {
                            id v43 = v42;
                            BOOL v91 = v39;
                            uint64_t v44 = *(void *)v99;
                            do
                            {
                              uint64_t v45 = 0LL;
                              do
                              {
                                if (*(void *)v99 != v44) {
                                  objc_enumerationMutation(v41);
                                }
                                uint64_t v46 = *(void *)(*((void *)&v98 + 1) + 8LL * (void)v45);
                                v130[0] = v35;
                                v130[1] = v40;
                                v130[2] = v46;
                                SEL v47 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v130,  3LL));
                                id v49 = [[NEPolicy alloc] initWithOrder:v7 result:v5 conditions:v47];
                                uint64_t v50 = *(void **)(a1 + 32);
                                if (v50) {
                                  id v51 = objc_getProperty(v50, v48, 48LL, 1);
                                }
                                else {
                                  id v51 = 0LL;
                                }
                                sub_10002E57C((BOOL)v93, v49, v51);

                                uint64_t v45 = (char *)v45 + 1;
                              }

                              while (v43 != v45);
                              id v52 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v41,  "countByEnumeratingWithState:objects:count:",  &v98,  v131,  16LL);
                              id v43 = v52;
                            }

                            while (v52);
                            id v11 = v87;
                            uint64_t v38 = v88;
                            id v37 = v89;
                            uint64_t v39 = v91;
                          }
                        }

                        else
                        {
                          v129[0] = v35;
                          v129[1] = v40;
                          uint64_t v41 = (NSMutableArray *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v129,  2LL));
                          id v54 = [[NEPolicy alloc] initWithOrder:v7 result:v5 conditions:v41];
                          __int128 v55 = *(void **)(a1 + 32);
                          if (v55) {
                            id v56 = objc_getProperty(v55, v53, 48LL, 1);
                          }
                          else {
                            id v56 = 0LL;
                          }
                          sub_10002E57C((BOOL)v93, v54, v56);
                        }

                        uint64_t v39 = (char *)v39 + 1;
                      }

                      while (v39 != v37);
                      id v57 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v90,  "countByEnumeratingWithState:objects:count:",  &v102,  v132,  16LL);
                      id v37 = v57;
                    }

                    while (v57);
                  }

LABEL_80:
                  id v34 = v85;
                  id v10 = v86;
                  goto LABEL_81;
                }

                if (-[NSMutableArray count](v11, "count"))
                {
                  __int128 v96 = 0u;
                  __int128 v97 = 0u;
                  __int128 v94 = 0u;
                  __int128 v95 = 0u;
                  unsigned int v90 = v11;
                  id v58 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v90,  "countByEnumeratingWithState:objects:count:",  &v94,  v128,  16LL);
                  if (v58)
                  {
                    id v59 = v58;
                    uint64_t v60 = *(void *)v95;
                    do
                    {
                      id v61 = 0LL;
                      do
                      {
                        if (*(void *)v95 != v60) {
                          objc_enumerationMutation(v90);
                        }
                        uint64_t v62 = *(void *)(*((void *)&v94 + 1) + 8LL * (void)v61);
                        v127[0] = v35;
                        v127[1] = v62;
                        nw_endpoint_type_t v63 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v127,  2LL));
                        id v65 = [[NEPolicy alloc] initWithOrder:v7 result:v5 conditions:v63];
                        __int16 v66 = *(void **)(a1 + 32);
                        if (v66) {
                          id v67 = objc_getProperty(v66, v64, 48LL, 1);
                        }
                        else {
                          id v67 = 0LL;
                        }
                        sub_10002E57C((BOOL)v93, v65, v67);

                        id v61 = (char *)v61 + 1;
                      }

                      while (v59 != v61);
                      id v68 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v90,  "countByEnumeratingWithState:objects:count:",  &v94,  v128,  16LL);
                      id v59 = v68;
                    }

                    while (v68);
                  }

                  goto LABEL_80;
                }

                uint64_t v126 = v35;
                unsigned int v90 = (NSMutableArray *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v126,  1LL));
                id v70 = [[NEPolicy alloc] initWithOrder:v7 result:v5 conditions:v90];
                id v71 = *(void **)(a1 + 32);
                if (v71) {
                  id v72 = objc_getProperty(v71, v69, 48LL, 1);
                }
                else {
                  id v72 = 0LL;
                }
                id v10 = v86;
                sub_10002E57C((BOOL)v93, v70, v72);

LABEL_81:
                id v34 = (char *)v34 + 1;
              }

              while (v34 != v84);
              id v73 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v81,  "countByEnumeratingWithState:objects:count:",  &v106,  v133,  16LL);
              id v84 = v73;
            }

            while (v73);
          }
        }

        uint64_t v8 = v79 + 1;
      }

      while ((id)(v79 + 1) != v78);
      id v78 = [obj countByEnumeratingWithState:&v122 objects:v137 count:16];
    }

    while (v78);
  }

  uint64_t v74 = sub_10002C620(v93);
  return v74;
}

  uint64_t v150 = ne_log_obj(v31, v32);
  id v151 = (os_log_s *)objc_claimAutoreleasedReturnValue(v150);
  if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v167 = selfa;
    _os_log_error_impl( (void *)&_mh_execute_header,  v151,  OS_LOG_TYPE_ERROR,  "%@ relay is not ready, not moving to connected",  buf,  0xCu);
  }
}

uint64_t sub_10003BB68(uint64_t a1, void *a2)
{
  id v96 = a2;
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3) {
    id Property = objc_getProperty(v3, v2, 48LL, 1);
  }
  else {
    id Property = 0LL;
  }
  sub_10002C4C8(v96, Property);
  __int128 v94 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult scopeSocketToInterfaceName:]( &OBJC_CLASS___NEPolicyResult,  "scopeSocketToInterfaceName:",  *(void *)(a1 + 40)));
  int v5 = sub_10002EA48(*(void *)(a1 + 32));
  id v93 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition fallbackTraffic](&OBJC_CLASS___NEPolicyCondition, "fallbackTraffic"));
  int v6 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition scopedInterface:]( &OBJC_CLASS___NEPolicyCondition,  "scopedInterface:",  *(void *)(a1 + 40)));
  __int128 v125 = 0u;
  __int128 v126 = 0u;
  __int128 v127 = 0u;
  __int128 v128 = 0u;
  id obj = *(id *)(a1 + 48);
  id v79 = [obj countByEnumeratingWithState:&v125 objects:v140 count:16];
  if (v79)
  {
    uint64_t v7 = (v5 + 100);
    uint64_t v78 = *(void *)v126;
    do
    {
      uint64_t v8 = 0LL;
      do
      {
        if (*(void *)v126 != v78) {
          objc_enumerationMutation(obj);
        }
        uint64_t v80 = v8;
        id v9 = *(void **)(*((void *)&v125 + 1) + 8 * v8);
        uint64_t v83 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        id v87 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        id v10 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        BOOL v81 = sub_10003AE5C(*(void *)(a1 + 32), v9, 0LL, *(unsigned int *)(a1 + 56));
        if (isa_nsarray(v81))
        {
          __int128 v123 = 0u;
          __int128 v124 = 0u;
          __int128 v121 = 0u;
          __int128 v122 = 0u;
          id v11 = v81;
          id v12 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v11,  "countByEnumeratingWithState:objects:count:",  &v121,  v139,  16LL);
          if (v12)
          {
            id v13 = v12;
            uint64_t v14 = *(void *)v122;
            do
            {
              for (id i = 0LL; i != v13; id i = (char *)i + 1)
              {
                if (*(void *)v122 != v14) {
                  objc_enumerationMutation(v11);
                }
                uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  *(void *)(*((void *)&v121 + 1) + 8LL * (void)i)));
                -[NSMutableArray addObject:](v83, "addObject:", v16);
              }

              id v13 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v11,  "countByEnumeratingWithState:objects:count:",  &v121,  v139,  16LL);
            }

            while (v13);
          }
        }

        id v17 = v87;
        if (-[NSMutableArray count](v83, "count"))
        {
          __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([v9 matchDomains]);
          int v19 = isa_nsarray(v18);

          if (v19)
          {
            __int128 v119 = 0u;
            __int128 v120 = 0u;
            __int128 v117 = 0u;
            __int128 v118 = 0u;
            __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v9 matchDomains]);
            id v21 = [v20 countByEnumeratingWithState:&v117 objects:v138 count:16];
            if (v21)
            {
              id v22 = v21;
              uint64_t v23 = *(void *)v118;
              do
              {
                for (j = 0LL; j != v22; j = (char *)j + 1)
                {
                  if (*(void *)v118 != v23) {
                    objc_enumerationMutation(v20);
                  }
                  id v25 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition domain:]( &OBJC_CLASS___NEPolicyCondition,  "domain:",  *(void *)(*((void *)&v117 + 1) + 8LL * (void)j)));
                  -[NSMutableArray addObject:](v87, "addObject:", v25);
                }

                id v22 = [v20 countByEnumeratingWithState:&v117 objects:v138 count:16];
              }

              while (v22);
            }

            id v17 = v87;
          }

          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v9 matchAccountIdentifiers]);
          int v27 = isa_nsarray(v26);

          if (v27)
          {
            __int128 v115 = 0u;
            __int128 v116 = 0u;
            __int128 v113 = 0u;
            __int128 v114 = 0u;
            id v28 = (void *)objc_claimAutoreleasedReturnValue([v9 matchAccountIdentifiers]);
            id v29 = [v28 countByEnumeratingWithState:&v113 objects:v137 count:16];
            if (v29)
            {
              id v30 = v29;
              uint64_t v31 = *(void *)v114;
              do
              {
                for (k = 0LL; k != v30; k = (char *)k + 1)
                {
                  if (*(void *)v114 != v31) {
                    objc_enumerationMutation(v28);
                  }
                  id v33 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition accountIdentifier:]( &OBJC_CLASS___NEPolicyCondition,  "accountIdentifier:",  *(void *)(*((void *)&v113 + 1) + 8LL * (void)k)));
                  -[NSMutableArray addObject:](v10, "addObject:", v33);
                }

                id v30 = [v28 countByEnumeratingWithState:&v113 objects:v137 count:16];
              }

              while (v30);
            }

            id v17 = v87;
          }

          __int128 v111 = 0u;
          __int128 v112 = 0u;
          __int128 v109 = 0u;
          __int128 v110 = 0u;
          uint64_t v82 = v83;
          id v85 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v82,  "countByEnumeratingWithState:objects:count:",  &v109,  v136,  16LL);
          if (v85)
          {
            uint64_t v84 = *(void *)v110;
            uint64_t v88 = v10;
            do
            {
              uint64_t v34 = 0LL;
              do
              {
                if (*(void *)v110 != v84)
                {
                  uint64_t v35 = v34;
                  objc_enumerationMutation(v82);
                  uint64_t v34 = v35;
                }

                uint64_t v86 = v34;
                uint64_t v36 = *(void *)(*((void *)&v109 + 1) + 8 * v34);
                if (-[NSMutableArray count](v87, "count"))
                {
                  __int128 v107 = 0u;
                  __int128 v108 = 0u;
                  __int128 v105 = 0u;
                  __int128 v106 = 0u;
                  BOOL v91 = v87;
                  id v37 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v91,  "countByEnumeratingWithState:objects:count:",  &v105,  v135,  16LL);
                  if (v37)
                  {
                    id v38 = v37;
                    uint64_t v39 = *(void *)v106;
                    uint64_t v89 = *(void *)v106;
                    do
                    {
                      uint64_t v40 = 0LL;
                      id v90 = v38;
                      do
                      {
                        if (*(void *)v106 != v39) {
                          objc_enumerationMutation(v91);
                        }
                        uint64_t v41 = *(void *)(*((void *)&v105 + 1) + 8LL * (void)v40);
                        if (-[NSMutableArray count](v10, "count"))
                        {
                          id v92 = v40;
                          __int128 v103 = 0u;
                          __int128 v104 = 0u;
                          __int128 v101 = 0u;
                          __int128 v102 = 0u;
                          id v42 = v10;
                          id v43 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v42,  "countByEnumeratingWithState:objects:count:",  &v101,  v134,  16LL);
                          if (v43)
                          {
                            id v44 = v43;
                            uint64_t v45 = *(void *)v102;
                            do
                            {
                              uint64_t v46 = 0LL;
                              do
                              {
                                if (*(void *)v102 != v45) {
                                  objc_enumerationMutation(v42);
                                }
                                uint64_t v47 = *(void *)(*((void *)&v101 + 1) + 8LL * (void)v46);
                                v133[0] = v93;
                                v133[1] = v36;
                                v133[2] = v41;
                                v133[3] = v47;
                                v133[4] = v6;
                                id v48 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v133,  5LL));
                                id v50 = [[NEPolicy alloc] initWithOrder:v7 result:v94 conditions:v48];
                                id v51 = *(void **)(a1 + 32);
                                if (v51) {
                                  id v52 = objc_getProperty(v51, v49, 48LL, 1);
                                }
                                else {
                                  id v52 = 0LL;
                                }
                                sub_10002E57C((BOOL)v96, v50, v52);

                                uint64_t v46 = (char *)v46 + 1;
                              }

                              while (v44 != v46);
                              id v53 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v42,  "countByEnumeratingWithState:objects:count:",  &v101,  v134,  16LL);
                              id v44 = v53;
                            }

                            while (v53);
                            id v10 = v88;
                            uint64_t v39 = v89;
                            id v38 = v90;
                          }

                          uint64_t v40 = v92;
                        }

                        else
                        {
                          v132[0] = v93;
                          v132[1] = v36;
                          v132[2] = v41;
                          v132[3] = v6;
                          id v42 = (NSMutableArray *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v132,  4LL));
                          id v55 = [[NEPolicy alloc] initWithOrder:v7 result:v94 conditions:v42];
                          id v56 = *(void **)(a1 + 32);
                          if (v56) {
                            id v57 = objc_getProperty(v56, v54, 48LL, 1);
                          }
                          else {
                            id v57 = 0LL;
                          }
                          sub_10002E57C((BOOL)v96, v55, v57);
                        }

                        uint64_t v40 = (char *)v40 + 1;
                      }

                      while (v40 != v38);
                      id v58 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v91,  "countByEnumeratingWithState:objects:count:",  &v105,  v135,  16LL);
                      id v38 = v58;
                    }

                    while (v58);
                  }

NSUUID *sub_10003C4A0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = 0LL;
  if (a1 && (_DWORD)a2)
  {
    id v5 = a3;
    int v6 = -[NSString initWithFormat:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"%@-@%u", v5, a2);

    uint64_t v7 = -[NSString UTF8String](v6, "UTF8String");
    CC_LONG v8 = strlen(v7);
    CC_SHA256(v7, v8, md);
    uint64_t v3 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", md);
  }

  return v3;
}

uint64_t sub_10003C574( uint64_t a1, void *a2, void *a3, void *a4, char a5, char a6, char a7, void *a8, void *a9)
{
  id v16 = a2;
  id v17 = a3;
  id v18 = a4;
  id v19 = a8;
  id v20 = a9;
  if (a1 && ([v16 count] || objc_msgSend(v19, "count")) && *(_DWORD *)(a1 + 8) == 2)
  {
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472LL;
    v23[2] = sub_10003C6E4;
    v23[3] = &unk_1000BDDE8;
    id v24 = v17;
    uint64_t v25 = a1;
    char v30 = a6;
    char v31 = a5;
    char v32 = a7;
    id v26 = v19;
    id v27 = v18;
    id v28 = v16;
    id v29 = v20;
    uint64_t v21 = sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, v23);
  }

  else
  {
    uint64_t v21 = 0LL;
  }

  return v21;
}

uint64_t sub_10003C6E4(uint64_t a1, void *a2)
{
  id v89 = a2;
  uint64_t v3 = ne_log_large_obj(v89);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v73 = *(void *)(a1 + 32);
    id Property = *(id *)(a1 + 40);
    if (Property) {
      id Property = objc_getProperty(Property, v5, 48LL, 1);
    }
    int buffer = 138412546;
    uint64_t v118 = v73;
    __int16 v119 = 2112;
    id v120 = Property;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Policy IDs to be removed for %@: %@",  (uint8_t *)&buffer,  0x16u);
  }

  uint64_t v7 = *(void **)(a1 + 40);
  if (v7) {
    id v8 = objc_getProperty(v7, v6, 48LL, 1);
  }
  else {
    id v8 = 0LL;
  }
  sub_10002C4C8(v89, v8);
  if (*(_BYTE *)(a1 + 80))
  {
    id v9 = sub_1000348A8(*(void *)(a1 + 40), *(void **)(a1 + 32), @"ProxyAgent");
    uint64_t v10 = objc_claimAutoreleasedReturnValue(v9);
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  if (*(_BYTE *)(a1 + 81))
  {
    id v11 = sub_1000348A8(*(void *)(a1 + 40), *(void **)(a1 + 32), @"DNSAgent");
    uint64_t v12 = objc_claimAutoreleasedReturnValue(v11);
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  id v87 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
  if (v12)
  {
    uint64_t v13 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](&OBJC_CLASS___NEPolicyResult, "netAgentUUID:", v12));
    if (v10)
    {
LABEL_12:
      uint64_t v14 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](&OBJC_CLASS___NEPolicyResult, "netAgentUUID:", v10));
      goto LABEL_15;
    }
  }

  else
  {
    uint64_t v13 = 0LL;
    if (v10) {
      goto LABEL_12;
    }
  }

  uint64_t v14 = 0LL;
LABEL_15:
  uint64_t v82 = (void *)v12;
  uint64_t v83 = (void *)v10;
  uint64_t v80 = (void *)v14;
  BOOL v81 = (void *)v13;
  if (*(_BYTE *)(a1 + 82))
  {
    uint64_t v78 = 0LL;
LABEL_18:
    id v85 = 0LL;
    goto LABEL_19;
  }

  uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult scopeSocketToInterfaceName:]( &OBJC_CLASS___NEPolicyResult,  "scopeSocketToInterfaceName:",  *(void *)(a1 + 32)));
  if (*(_BYTE *)(a1 + 82)) {
    goto LABEL_18;
  }
  id v85 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:]( &OBJC_CLASS___NEPolicyResult,  "tunnelIPToInterfaceName:secondaryResultType:",  *(void *)(a1 + 32),  0LL));
LABEL_19:
  id v15 = +[NEPolicyResult skipWithOrder:]( &OBJC_CLASS___NEPolicyResult,  "skipWithOrder:",  sub_10002EA48(*(void *)(a1 + 40)) + 250);
  uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue(v15);
  unsigned int v16 = sub_10002EA48(*(void *)(a1 + 40));
  unsigned int v76 = v16 + 100;
  unsigned int v77 = v16 + 20;
  int32x2_t v84 = vadd_s32(vdup_n_s32(v16), (int32x2_t)0xA00000065LL);
  __int128 v110 = 0u;
  __int128 v111 = 0u;
  __int128 v112 = 0u;
  __int128 v113 = 0u;
  uint64_t v91 = a1;
  id v17 = *(id *)(a1 + 48);
  id v18 = [v17 countByEnumeratingWithState:&v110 objects:v123 count:16];
  if (v18)
  {
    id v19 = v18;
    uint64_t v20 = *(void *)v111;
    do
    {
      uint64_t v21 = 0LL;
      do
      {
        if (*(void *)v111 != v20) {
          objc_enumerationMutation(v17);
        }
        id v22 = *(void **)(*((void *)&v110 + 1) + 8LL * (void)v21);
        if (isa_nsstring(v22))
        {
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet characterSetWithCharactersInString:]( &OBJC_CLASS___NSCharacterSet,  "characterSetWithCharactersInString:",  @"*."));
          id v24 = (void *)objc_claimAutoreleasedReturnValue([v22 stringByTrimmingCharactersInSet:v23]);
          if ([v24 length])
          {
            v122[0] = v87;
            uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](&OBJC_CLASS___NEPolicyCondition, "domain:", v24));
            v122[1] = v25;
            id v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v122,  2LL));

            id v28 = [[NEPolicy alloc] initWithOrder:v84.u32[0] result:v85 conditions:v26];
            id v29 = *(void **)(v91 + 40);
            if (v29) {
              id v30 = objc_getProperty(v29, v27, 48LL, 1);
            }
            else {
              id v30 = 0LL;
            }
            sub_10002E57C((BOOL)v89, v28, v30);
          }
        }

        uint64_t v21 = (char *)v21 + 1;
      }

      while (v19 != v21);
      id v31 = [v17 countByEnumeratingWithState:&v110 objects:v123 count:16];
      id v19 = v31;
    }

    while (v31);
  }

  __int128 v108 = 0u;
  __int128 v109 = 0u;
  __int128 v106 = 0u;
  __int128 v107 = 0u;
  id v32 = *(id *)(v91 + 56);
  id v33 = [v32 countByEnumeratingWithState:&v106 objects:v121 count:16];
  if (v33)
  {
    id v34 = v33;
    uint64_t v35 = 0LL;
    uint64_t v36 = *(void *)v107;
    do
    {
      id v37 = 0LL;
      do
      {
        if (*(void *)v107 != v36) {
          objc_enumerationMutation(v32);
        }
        id v38 = *(void **)(*((void *)&v106 + 1) + 8LL * (void)v37);
        if (proc_pidinfo((int)[v38 intValue], 17, 1uLL, &buffer, 56) == 56)
        {
          uint64_t v39 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", &buffer);
          if (!v35) {
            uint64_t v35 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
          }
          -[NSMutableArray addObject:](v35, "addObject:", v39);
          uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectivePID:]( NEPolicyCondition,  "effectivePID:",  [v38 intValue]));
          v116[0] = v40;
          uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  v39));
          v116[1] = v41;
          id v42 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
          v116[2] = v42;
          id v43 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v116,  3LL));

          id v45 = [[NEPolicy alloc] initWithOrder:sub_10002EA48(*(void *)(v91 + 40)) + 150 result:v88 conditions:v43];
          uint64_t v46 = *(void **)(v91 + 40);
          if (v46) {
            id v47 = objc_getProperty(v46, v44, 48LL, 1);
          }
          else {
            id v47 = 0LL;
          }
          sub_10002E57C((BOOL)v89, v45, v47);
        }

        id v37 = (char *)v37 + 1;
      }

      while (v34 != v37);
      id v48 = [v32 countByEnumeratingWithState:&v106 objects:v121 count:16];
      id v34 = v48;
    }

    while (v48);
  }

  else
  {
    uint64_t v35 = 0LL;
  }

  uint64_t v49 = *(void *)(v91 + 40);
  id v51 = *(void **)(v91 + 64);
  id v50 = *(void **)(v91 + 72);
  v96[0] = _NSConcreteStackBlock;
  v96[1] = 3221225472LL;
  v96[2] = sub_10003CFA8;
  v96[3] = &unk_1000BDDC0;
  id v79 = v78;
  id v97 = v79;
  id v52 = v89;
  unsigned int v103 = v76;
  uint64_t v53 = *(void *)(v91 + 40);
  id v98 = v52;
  uint64_t v99 = v53;
  id v86 = v85;
  id v100 = v86;
  id v90 = v81;
  id v101 = v90;
  int32x2_t v104 = v84;
  id v54 = v80;
  id v102 = v54;
  unsigned int v105 = v77;
  v92[0] = _NSConcreteStackBlock;
  v92[1] = 3221225472LL;
  void v92[2] = sub_10003D1DC;
  v92[3] = &unk_1000BDC30;
  id v55 = v52;
  uint64_t v56 = *(void *)(v91 + 40);
  id v93 = v55;
  uint64_t v94 = v56;
  id v57 = v88;
  id v95 = v57;
  sub_1000320B0(v49, v51, 1, 1, v35, v50, v55, v96, v92);
  id v58 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyRouteRule routeRuleWithAction:forInterfaceName:]( &OBJC_CLASS___NEPolicyRouteRule,  "routeRuleWithAction:forInterfaceName:",  2LL,  *(void *)(v91 + 32)));
  __int128 v115 = v58;
  id v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v115, 1LL));

  uint64_t v60 = sub_10002EA48(*(void *)(v91 + 40)) + 200;
  uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult routeRules:](&OBJC_CLASS___NEPolicyResult, "routeRules:", v59));
  __int128 v114 = v87;
  uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v114, 1LL));
  id v64 = [[NEPolicy alloc] initWithOrder:v60 result:v61 conditions:v62];
  id v65 = *(void **)(v91 + 40);
  if (v65) {
    id v66 = objc_getProperty(v65, v63, 48LL, 1);
  }
  else {
    id v66 = 0LL;
  }
  sub_10002E57C((BOOL)v55, v64, v66);

  uint64_t v67 = sub_10002C620(v55);
  uint64_t v68 = ne_log_large_obj(v67);
  id v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(v68);
  if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v75 = *(void *)(v91 + 32);
    id v74 = *(id *)(v91 + 40);
    if (v74) {
      id v74 = objc_getProperty(v74, v70, 48LL, 1);
    }
    int buffer = 138412546;
    uint64_t v118 = v75;
    __int16 v119 = 2112;
    id v120 = v74;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_DEBUG,  "Policy IDs added for %@: %@",  (uint8_t *)&buffer,  0x16u);
  }

  return v67;
}

void sub_10003CFA8(uint64_t a1, void *a2, char a3)
{
  id v33 = a2;
  if ((a3 & 1) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = objc_alloc(&OBJC_CLASS___NEPolicy);
    int v7 = sub_10002EA48(*(void *)(a1 + 48));
    uint64_t v8 = (v7 + 150);
    id v9 = (id)objc_claimAutoreleasedReturnValue( +[NEPolicyResult skipWithOrder:]( &OBJC_CLASS___NEPolicyResult,  "skipWithOrder:",  (v7 + 250)));
    id v11 = [v6 initWithOrder:v8 result:v9 conditions:v33];
    uint64_t v12 = *(void **)(a1 + 48);
    if (v12) {
      id Property = objc_getProperty(v12, v10, 48LL, 1);
    }
    else {
      id Property = 0LL;
    }
    sub_10002E57C(v5, v11, Property);

LABEL_21:
    goto LABEL_22;
  }

  if (*(void *)(a1 + 32))
  {
    uint64_t v14 = *(void *)(a1 + 40);
    id v16 = [[NEPolicy alloc] initWithOrder:*(unsigned int *)(a1 + 80) result:*(void *)(a1 + 32) conditions:v33];
    id v17 = *(void **)(a1 + 48);
    if (v17) {
      id v18 = objc_getProperty(v17, v15, 48LL, 1);
    }
    else {
      id v18 = 0LL;
    }
    sub_10002E57C(v14, v16, v18);
  }

  if (*(void *)(a1 + 56))
  {
    uint64_t v19 = *(void *)(a1 + 40);
    id v21 = [[NEPolicy alloc] initWithOrder:*(unsigned int *)(a1 + 84) result:*(void *)(a1 + 56) conditions:v33];
    id v22 = *(void **)(a1 + 48);
    if (v22) {
      id v23 = objc_getProperty(v22, v20, 48LL, 1);
    }
    else {
      id v23 = 0LL;
    }
    sub_10002E57C(v19, v21, v23);
  }

  if (*(void *)(a1 + 64))
  {
    uint64_t v24 = *(void *)(a1 + 40);
    id v26 = [[NEPolicy alloc] initWithOrder:*(unsigned int *)(a1 + 88) result:*(void *)(a1 + 64) conditions:v33];
    id v27 = *(void **)(a1 + 48);
    if (v27) {
      id v28 = objc_getProperty(v27, v25, 48LL, 1);
    }
    else {
      id v28 = 0LL;
    }
    sub_10002E57C(v24, v26, v28);
  }

  if (*(void *)(a1 + 72))
  {
    uint64_t v29 = *(void *)(a1 + 40);
    id v9 = [[NEPolicy alloc] initWithOrder:*(unsigned int *)(a1 + 92) result:*(void *)(a1 + 72) conditions:v33];
    id v31 = *(void **)(a1 + 48);
    if (v31) {
      id v32 = objc_getProperty(v31, v30, 48LL, 1);
    }
    else {
      id v32 = 0LL;
    }
    sub_10002E57C(v29, v9, v32);
    goto LABEL_21;
  }

LABEL_22:
}

  return v13;
}
}

    id Property = objc_getProperty(v18, v10, 360LL, 1);
    goto LABEL_23;
  }

  uint64_t v78 = 0LL;
  uint64_t v24 = 0LL;
LABEL_25:
  id v74 = v24;
  if (v21 < 0)
  {
    id v72 = 0;
    id v28 = v78;
    if (v24) {
      goto LABEL_44;
    }
  }

  else
  {
    uint64_t v25 = CFArrayGetValueAtIndex(v17, v21);
    id v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
    id v27 = (void *)objc_claimAutoreleasedReturnValue([v26 objectForKeyedSubscript:kSCPropNetOverridePrimary]);
    else {
      id v72 = 0;
    }
    id v31 = (const __CFDictionary *)CFArrayGetValueAtIndex(v17, v21);
    id v32 = (void *)objc_claimAutoreleasedReturnValue([v18 configuration]);
    id v33 = (void *)objc_claimAutoreleasedReturnValue([v32 identifier]);
    id v28 = v78;
    if (v31)
    {
      id v70 = v26;
      id v34 = xpc_dictionary_create(0LL, 0LL, 0LL);
      if (NEGetIntFromDictionary(v31, kSCPropNetOverridePrimary, 0LL))
      {
        uint64_t v35 = xpc_dictionary_create(0LL, 0LL, 0LL);
        uint64_t v36 = +[NESMSession copyDefaultRouteCacheIsIPv6:]( &OBJC_CLASS___NESMSession,  "copyDefaultRouteCacheIsIPv6:",  0LL);
        *(void *)out = v36;
        if (v36)
        {
          id v37 = (void *)_CFXPCCreateXPCObjectFromCFObject(v36);
          xpc_dictionary_set_value(v35, "ipv4-subnets", v37);

          id v28 = v78;
        }

        myCFRelease(out);
        xpc_dictionary_set_value(v34, "included-routes", v35);
      }

      else
      {
        uint64_t Value = CFDictionaryGetValue(v31, kSCPropNetIPv4AdditionalRoutes);
        uint64_t v39 = CFDictionaryGetValue(v31, kSCPropNetIPv4ExcludedRoutes);
        uint64_t v40 = +[NESMSession copyRouteCacheFromRoutes:isIPv6:]( &OBJC_CLASS___NESMSession,  "copyRouteCacheFromRoutes:isIPv6:",  Value,  0LL);
        *(void *)out = v40;
        uint64_t v41 = +[NESMSession copyRouteCacheFromRoutes:isIPv6:]( &OBJC_CLASS___NESMSession,  "copyRouteCacheFromRoutes:isIPv6:",  v39,  0LL);
        *(void *)uu = v41;
        if (v40)
        {
          id v42 = xpc_dictionary_create(0LL, 0LL, 0LL);
          id v43 = (void *)_CFXPCCreateXPCObjectFromCFObject(v40);
          xpc_dictionary_set_value(v42, "ipv4-subnets", v43);

          xpc_dictionary_set_value(v34, "included-routes", v42);
        }

        if (v41)
        {
          id v44 = xpc_dictionary_create(0LL, 0LL, 0LL);
          id v45 = (void *)_CFXPCCreateXPCObjectFromCFObject(v41);
          xpc_dictionary_set_value(v44, "ipv4-subnets", v45);

          xpc_dictionary_set_value(v34, "excluded-routes", v44);
        }

        myCFRelease(out);
        myCFRelease(uu);
        id v28 = v78;
      }

      objc_msgSend(v33, "getUUIDBytes:", uu, v70);
      uuid_unparse(uu, out);
      NEHelperCacheSetRoutes(out, v34);

      id v26 = v71;
    }

    id v18 = v75;
    uint64_t v19 = v80;
    uint64_t v20 = idx;
    if (v24)
    {
LABEL_44:
      uint64_t v46 = [v24 copyLegacyDictionary];
      uint64_t v29 = theArray;
      if (![v46 count]) {
        goto LABEL_49;
      }
      if (v13 < 0)
      {
        CFArrayAppendValue(a2, kSCEntNetDNS);
        CFArrayAppendValue(theArray, v46);
        uint64_t v13 = CFArrayGetCount(theArray) - 1;
      }

      else
      {
        id v47 = CFArrayGetValueAtIndex(theArray, v13);
        id v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
        [v46 addEntriesFromDictionary:v48];
        CFArraySetValueAtIndex(theArray, v13, v46);

        uint64_t v19 = v80;
      }

      if (!v72)
      {
        uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v46 objectForKeyedSubscript:kSCPropNetDNSSupplementalMatchDomains]);
        unsigned int v76 = (void *)objc_claimAutoreleasedReturnValue([v46 objectForKeyedSubscript:kSCPropNetDNSSupplementalMatchOrders]);
        if ((isa_nsarray(v49) & 1) != 0)
        {
          uint64_t v24 = v49;
        }

        else
        {
          uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v46 objectForKeyedSubscript:kSCPropNetDNSSearchDomains]);
        }

        uint64_t v20 = idx;
        if (isa_nsarray(v24))
        {
          id v50 = (void *)objc_claimAutoreleasedReturnValue([v18 configuration]);
          id v51 = (void *)objc_claimAutoreleasedReturnValue([v50 identifier]);
          [v51 getUUIDBytes:uu];

          id v28 = v78;
          uuid_unparse(uu, out);
          id v52 = (void *)_CFXPCCreateXPCObjectFromCFObject(v24);
          NEHelperCacheSetMatchDomains(out, v52);
        }

        uint64_t v19 = v80;
      }

      else
      {
LABEL_49:
        unsigned int v76 = 0LL;
        uint64_t v24 = 0LL;
      }

      if (v28) {
        goto LABEL_58;
      }
LABEL_30:
      id v30 = v73;
      goto LABEL_66;
    }
  }

  unsigned int v76 = 0LL;
  uint64_t v29 = theArray;
  if (!v28) {
    goto LABEL_30;
  }
LABEL_58:
  uint64_t v53 = [v28 copyLegacyDictionary];
  id v54 = kSCPropNetProxiesSupplementalMatchDomains;
  id v55 = (void *)objc_claimAutoreleasedReturnValue([v53 objectForKeyedSubscript:kSCPropNetProxiesSupplementalMatchDomains]);
  if ((isa_nsarray(v55) & 1) == 0)
  {
    if (isa_nsarray(v24))
    {
      [v53 setObject:v24 forKeyedSubscript:v54];
    }
  }

  if (v20 < 0)
  {
    CFArrayAppendValue(a2, kSCEntNetProxies);
    CFArrayAppendValue(v29, v53);
    uint64_t v20 = CFArrayGetCount(v29) - 1;
  }

  else
  {
    uint64_t v56 = CFArrayGetValueAtIndex(v29, v20);
    id v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
    [v53 addEntriesFromDictionary:v57];
    CFArraySetValueAtIndex(v29, v20, v53);
  }

  id v30 = v73;
  idx = v20;

  uint64_t v19 = v80;
LABEL_66:
  if (v30 == 2)
  {
    if ((v79 & 0x8000000000000000LL) == 0)
    {
      id v58 = -[NSMutableDictionary initWithDictionary:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithDictionary:",  CFArrayGetValueAtIndex(v29, v79));
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v58,  "setObject:forKeyedSubscript:",  &off_1000C1830,  kSCPropNetOverridePrimary);
      id v85 = kSCPropNetIPv4AdditionalRoutes;
      id v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v85, 1LL));
      -[NSMutableDictionary removeObjectsForKeys:](v58, "removeObjectsForKeys:", v59);

      uint64_t v19 = v80;
      CFArraySetValueAtIndex(v29, v79, v58);
    }

    if ((v19 & 0x8000000000000000LL) == 0)
    {
      uint64_t v60 = -[NSMutableDictionary initWithDictionary:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithDictionary:",  CFArrayGetValueAtIndex(v29, v19));
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v60,  "setObject:forKeyedSubscript:",  &off_1000C1830,  kSCPropNetOverridePrimary);
      int32x2_t v84 = kSCPropNetIPv6AdditionalRoutes;
      uint64_t v61 = v19;
      uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v84, 1LL));
      -[NSMutableDictionary removeObjectsForKeys:](v60, "removeObjectsForKeys:", v62);

      CFArraySetValueAtIndex(v29, v61, v60);
    }

    if ((v13 & 0x8000000000000000LL) == 0)
    {
      uint64_t v63 = -[NSMutableDictionary initWithDictionary:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithDictionary:",  CFArrayGetValueAtIndex(v29, v13));
      v83[0] = kSCPropNetDNSSupplementalMatchDomains;
      v83[1] = kSCPropNetDNSSupplementalMatchDomainsNoSearch;
      id v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v83, 2LL));
      -[NSMutableDictionary removeObjectsForKeys:](v63, "removeObjectsForKeys:", v64);

      CFArraySetValueAtIndex(v29, v13, v63);
    }

    if ((idx & 0x8000000000000000LL) == 0)
    {
      id v65 = -[NSMutableDictionary initWithDictionary:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithDictionary:",  CFArrayGetValueAtIndex(v29, idx));
      uint64_t v82 = kSCPropNetProxiesSupplementalMatchDomains;
      id v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v82, 1LL));
      -[NSMutableDictionary removeObjectsForKeys:](v65, "removeObjectsForKeys:", v66);

      CFArraySetValueAtIndex(v29, idx, v65);
    }
  }

  is_extra_vpn_logging_enabled = nelog_is_extra_vpn_logging_enabled();
  if ((_DWORD)is_extra_vpn_logging_enabled)
  {
    uint64_t v68 = ne_log_large_obj(is_extra_vpn_logging_enabled);
    id v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(v68);
    if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)out = 138412546;
      *(void *)&out[4] = a2;
      *(_WORD *)&out[12] = 2112;
      *(void *)&out[14] = v29;
      _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_INFO,  "names %@, dictionaries %@",  (uint8_t *)out,  0x16u);
    }
  }
}
}
}

void sub_10003D1DC(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = a2;
  id v8 = [[NEPolicy alloc] initWithOrder:sub_10002EA48(a1[5]) + 5 result:a1[6] conditions:v4];

  id v6 = (void *)a1[5];
  if (v6) {
    id Property = objc_getProperty(v6, v5, 48LL, 1);
  }
  else {
    id Property = 0LL;
  }
  sub_10002E57C(v3, v8, Property);
}

void sub_10003D27C( uint64_t a1, void *a2, int a3, void *a4, uint64_t a5, void *a6, _BYTE *a7, void *a8, void *a9)
{
  id v15 = a2;
  id v253 = a4;
  id v252 = a6;
  id v231 = a8;
  id v230 = a9;
  self = (id)a1;
  if (a1)
  {
    unsigned int v16 = [v15 multicastPreferenceSet];
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v15 matchSigningIdentifier]);
    unsigned int v18 = [v17 isEqualToString:@"PathRuleDefaultNonSystemIdentifier"];

    id v229 = v15;
    unsigned int v227 = v18;
    if ((v18 & 1) != 0)
    {
      uint64_t v19 = 0LL;
      uint64_t v20 = 0LL;
      id v21 = 0LL;
    }

    else
    {
      id v21 = sub_10003AE5C(a1, v15, (uint64_t)[v15 isIdentifierExternal], a5);
      id v22 = -[NSMutableArray count](v21, "count");
      if (v22)
      {
        uint64_t v24 = ne_log_obj(v22, v23);
        uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          id v26 = (void *)objc_claimAutoreleasedReturnValue([v15 matchSigningIdentifier]);
          *(_DWORD *)buf = 138412546;
          v322 = v26;
          __int16 v323 = 2112;
          v324 = v21;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "UUID: Found for %@: %@", buf, 0x16u);
        }

        id v27 = (void *)objc_claimAutoreleasedReturnValue([v15 matchDomains]);
        int v28 = isa_nsarray(v27);

        if (v28)
        {
          unsigned int v29 = v16;
          uint64_t v20 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
          __int128 v283 = 0u;
          __int128 v284 = 0u;
          __int128 v285 = 0u;
          __int128 v286 = 0u;
          id v30 = (void *)objc_claimAutoreleasedReturnValue([v15 matchDomains]);
          id v31 = [v30 countByEnumeratingWithState:&v283 objects:v320 count:16];
          if (v31)
          {
            id v32 = v31;
            uint64_t v33 = *(void *)v284;
            do
            {
              for (id i = 0LL; i != v32; id i = (char *)i + 1)
              {
                if (*(void *)v284 != v33) {
                  objc_enumerationMutation(v30);
                }
                uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition domain:]( &OBJC_CLASS___NEPolicyCondition,  "domain:",  *(void *)(*((void *)&v283 + 1) + 8LL * (void)i)));
                -[NSMutableArray addObject:](v20, "addObject:", v35);
              }

              id v32 = [v30 countByEnumeratingWithState:&v283 objects:v320 count:16];
            }

            while (v32);
          }

          id v15 = v229;
          unsigned int v16 = v29;
        }

        else
        {
          uint64_t v20 = 0LL;
        }

        uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v15 matchAccountIdentifiers]);
        int v37 = isa_nsarray(v36);

        if (v37)
        {
          unsigned int v224 = v16;
          uint64_t v19 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
          __int128 v279 = 0u;
          __int128 v280 = 0u;
          __int128 v281 = 0u;
          __int128 v282 = 0u;
          id v38 = (void *)objc_claimAutoreleasedReturnValue([v15 matchAccountIdentifiers]);
          id v39 = [v38 countByEnumeratingWithState:&v279 objects:v319 count:16];
          if (v39)
          {
            id v40 = v39;
            uint64_t v41 = *(void *)v280;
            do
            {
              for (j = 0LL; j != v40; j = (char *)j + 1)
              {
                if (*(void *)v280 != v41) {
                  objc_enumerationMutation(v38);
                }
                id v43 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition accountIdentifier:]( &OBJC_CLASS___NEPolicyCondition,  "accountIdentifier:",  *(void *)(*((void *)&v279 + 1) + 8LL * (void)j)));
                -[NSMutableArray addObject:](v19, "addObject:", v43);
              }

              id v40 = [v38 countByEnumeratingWithState:&v279 objects:v319 count:16];
            }

            while (v40);
          }

          unsigned int v16 = v224;
        }

        else
        {
          uint64_t v19 = 0LL;
        }
      }

      else
      {
        uint64_t v19 = 0LL;
        uint64_t v20 = 0LL;
      }
    }

    __int128 v236 = v20;
    unsigned int v228 = a5;
    v254 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
    id v44 = &AnalyticsSendEventLazy_ptr;
    if (!*a7)
    {
      unsigned int v225 = v16;
      __int128 v222 = a7;
      __int128 v223 = v21;
      id v45 = (void *)objc_claimAutoreleasedReturnValue( +[NWAddressEndpoint endpointWithHostname:port:]( &OBJC_CLASS___NWAddressEndpoint,  "endpointWithHostname:port:",  @"224.0.0.0",  @"0"));
      __int128 v237 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition remoteAddress:prefix:]( &OBJC_CLASS___NEPolicyCondition,  "remoteAddress:prefix:",  v45,  4LL));

      uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue( +[NWAddressEndpoint endpointWithHostname:port:]( &OBJC_CLASS___NWAddressEndpoint,  "endpointWithHostname:port:",  @"ff00::",  @"0"));
      uint64_t v47 = objc_claimAutoreleasedReturnValue( +[NEPolicyCondition remoteAddress:prefix:]( &OBJC_CLASS___NEPolicyCondition,  "remoteAddress:prefix:",  v46,  8LL));

      id v48 = (void *)objc_claimAutoreleasedReturnValue( +[NWAddressEndpoint endpointWithHostname:port:]( &OBJC_CLASS___NWAddressEndpoint,  "endpointWithHostname:port:",  @"255.255.255.255",  @"0"));
      uint64_t v49 = objc_claimAutoreleasedReturnValue( +[NEPolicyCondition remoteAddress:prefix:]( &OBJC_CLASS___NEPolicyCondition,  "remoteAddress:prefix:",  v48,  32LL));

      id v50 = (void *)objc_claimAutoreleasedReturnValue( +[NWAddressEndpoint endpointWithHostname:port:]( &OBJC_CLASS___NWAddressEndpoint,  "endpointWithHostname:port:",  @"224.0.0.0",  @"0"));
      uint64_t v51 = objc_claimAutoreleasedReturnValue( +[NEPolicyCondition localAddress:prefix:]( &OBJC_CLASS___NEPolicyCondition,  "localAddress:prefix:",  v50,  4LL));

      id v52 = (void *)objc_claimAutoreleasedReturnValue( +[NWAddressEndpoint endpointWithHostname:port:]( &OBJC_CLASS___NWAddressEndpoint,  "endpointWithHostname:port:",  @"ff00::",  @"0"));
      uint64_t v53 = objc_claimAutoreleasedReturnValue( +[NEPolicyCondition localAddress:prefix:]( &OBJC_CLASS___NEPolicyCondition,  "localAddress:prefix:",  v52,  8LL));

      id v54 = (void *)objc_claimAutoreleasedReturnValue( +[NWAddressEndpoint endpointWithHostname:port:]( &OBJC_CLASS___NWAddressEndpoint,  "endpointWithHostname:port:",  @"255.255.255.255",  @"0"));
      uint64_t v55 = objc_claimAutoreleasedReturnValue( +[NEPolicyCondition localAddress:prefix:]( &OBJC_CLASS___NEPolicyCondition,  "localAddress:prefix:",  v54,  32LL));

      v318[0] = v237;
      __int128 v220 = (void *)v49;
      unsigned int v221 = (void *)v47;
      v318[1] = v47;
      v318[2] = v49;
      __int128 v218 = (void *)v53;
      __int128 v219 = (void *)v51;
      v318[3] = v51;
      v318[4] = v53;
      __int128 v217 = (void *)v55;
      v318[5] = v55;
      uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v318, 6LL));
      id v57 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition localNetworks](&OBJC_CLASS___NEPolicyCondition, "localNetworks"));
      id v58 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition ipProtocol:](&OBJC_CLASS___NEPolicyCondition, "ipProtocol:", 0LL));
      [v58 setNegative:1];
      id v59 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition isSystemProxyConnection]( &OBJC_CLASS___NEPolicyCondition,  "isSystemProxyConnection"));
      [v59 setNegative:1];
      uint64_t v60 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult dropWithFlags:](&OBJC_CLASS___NEPolicyResult, "dropWithFlags:", 1LL));
      uint64_t v61 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult dropWithFlags:](&OBJC_CLASS___NEPolicyResult, "dropWithFlags:", 3LL));
      v317[0] = v254;
      __int128 v215 = v59;
      __int128 v216 = v58;
      v317[1] = v58;
      v317[2] = v59;
      v317[3] = v57;
      uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v317, 4LL));
      id v63 = [[NEPolicy alloc] initWithOrder:18090 result:v60 conditions:v62];
      id Property = objc_getProperty(self, v64, 48LL, 1);
      sub_10002E57C((BOOL)v253, v63, Property);

      v245 = (void *)v61;
      id v66 = [[NEPolicy alloc] initWithOrder:18104 result:v61 conditions:v62];
      id v68 = objc_getProperty(self, v67, 48LL, 1);
      sub_10002E57C((BOOL)v253, v66, v68);

      __int128 v277 = 0u;
      __int128 v278 = 0u;
      __int128 v275 = 0u;
      __int128 v276 = 0u;
      id obj = v56;
      id v69 = [obj countByEnumeratingWithState:&v275 objects:v316 count:16];
      if (v69)
      {
        id v70 = v69;
        uint64_t v71 = *(void *)v276;
        do
        {
          for (k = 0LL; k != v70; k = (char *)k + 1)
          {
            if (*(void *)v276 != v71) {
              objc_enumerationMutation(obj);
            }
            uint64_t v73 = *(void *)(*((void *)&v275 + 1) + 8LL * (void)k);
            v315[0] = v254;
            v315[1] = v73;
            id v74 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v315,  2LL));
            id v75 = [[NEPolicy alloc] initWithOrder:18092 result:v60 conditions:v74];
            id v77 = objc_getProperty(self, v76, 48LL, 1);
            sub_10002E57C((BOOL)v253, v75, v77);

            id v78 = [[NEPolicy alloc] initWithOrder:18106 result:v61 conditions:v74];
            id v80 = objc_getProperty(self, v79, 48LL, 1);
            sub_10002E57C((BOOL)v253, v78, v80);
          }

          id v70 = [obj countByEnumeratingWithState:&v275 objects:v316 count:16];
        }

        while (v70);
      }

      __int128 v214 = (void *)v60;

      BOOL v81 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](&OBJC_CLASS___NEPolicyResult, "netAgentUUID:", v230));
      id v82 = objc_alloc(&OBJC_CLASS___NEPolicy);
      v314 = v254;
      uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v314, 1LL));
      id v84 = [v82 initWithOrder:18092 result:v81 conditions:v83];
      id v86 = objc_getProperty(self, v85, 48LL, 1);
      sub_10002E57C((BOOL)v253, v84, v86);

      id v87 = objc_alloc(&OBJC_CLASS___NEPolicy);
      v313 = v254;
      uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v313, 1LL));
      id v89 = [v87 initWithOrder:18106 result:v81 conditions:v88];
      id v91 = objc_getProperty(self, v90, 48LL, 1);
      sub_10002E57C((BOOL)v253, v89, v91);

      id v92 = objc_alloc(&OBJC_CLASS___NEPolicy);
      id v93 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", 18120LL));
      v312 = v254;
      uint64_t v94 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v312, 1LL));
      id v95 = [v92 initWithOrder:18075 result:v93 conditions:v94];
      id v97 = objc_getProperty(self, v96, 48LL, 1);
      sub_10002E57C((BOOL)v253, v95, v97);

      id v98 = objc_alloc(&OBJC_CLASS___NEPolicy);
      uint64_t v99 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", 18120LL));
      v311[0] = v254;
      id v100 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition customEntitlement:]( &OBJC_CLASS___NEPolicyCondition,  "customEntitlement:",  @"com.apple.developer.media-device-discovery-extension"));
      v311[1] = v100;
      id v101 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v311, 2LL));
      id v102 = (void *)v99;
      id v103 = [v98 initWithOrder:18085 result:v99 conditions:v101];
      id v105 = objc_getProperty(self, v104, 48LL, 1);
      sub_10002E57C((BOOL)v253, v103, v105);

      id v106 = objc_alloc(&OBJC_CLASS___NEPolicy);
      __int128 v107 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", 18120LL));
      v310[0] = v254;
      __int128 v108 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition customEntitlement:]( &OBJC_CLASS___NEPolicyCondition,  "customEntitlement:",  @"com.apple.developer.media-device-discovery-extension"));
      v310[1] = v108;
      __int128 v109 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v310, 2LL));
      id v110 = [v106 initWithOrder:18099 result:v107 conditions:v109];
      id v112 = objc_getProperty(self, v111, 48LL, 1);
      sub_10002E57C((BOOL)v253, v110, v112);

      __int128 v234 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition isListener](&OBJC_CLASS___NEPolicyCondition, "isListener"));
      id v232 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition isInbound](&OBJC_CLASS___NEPolicyCondition, "isInbound"));
      __int128 v226 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition hasSignedResult](&OBJC_CLASS___NEPolicyCondition, "hasSignedResult"));
      id v113 = objc_alloc(&OBJC_CLASS___NEPolicy);
      __int128 v114 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", 18091LL));
      v309[0] = v234;
      v309[1] = v254;
      __int128 v115 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v309, 2LL));
      id v116 = [v113 initWithOrder:18085 result:v114 conditions:v115];
      id v118 = objc_getProperty(self, v117, 48LL, 1);
      sub_10002E57C((BOOL)v253, v116, v118);

      id v119 = objc_alloc(&OBJC_CLASS___NEPolicy);
      id v120 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", 18091LL));
      v308[0] = v232;
      v308[1] = v254;
      __int128 v121 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v308, 2LL));
      id v122 = [v119 initWithOrder:18085 result:v120 conditions:v121];
      id v124 = objc_getProperty(self, v123, 48LL, 1);
      sub_10002E57C((BOOL)v253, v122, v124);

      id v125 = objc_alloc(&OBJC_CLASS___NEPolicy);
      __int128 v126 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", 18091LL));
      v307[0] = v226;
      v307[1] = v254;
      __int128 v127 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v307, 2LL));
      id v128 = [v125 initWithOrder:18085 result:v126 conditions:v127];
      id v130 = objc_getProperty(self, v129, 48LL, 1);
      sub_10002E57C((BOOL)v253, v128, v130);

      id v131 = objc_alloc(&OBJC_CLASS___NEPolicy);
      id v132 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", 18105LL));
      v306[0] = v234;
      v306[1] = v254;
      id v133 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v306, 2LL));
      id v134 = [v131 initWithOrder:18099 result:v132 conditions:v133];
      id v136 = objc_getProperty(self, v135, 48LL, 1);
      sub_10002E57C((BOOL)v253, v134, v136);

      id v137 = objc_alloc(&OBJC_CLASS___NEPolicy);
      __int128 v138 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", 18105LL));
      v305[0] = v232;
      v305[1] = v254;
      __int128 v139 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v305, 2LL));
      id v140 = [v137 initWithOrder:18099 result:v138 conditions:v139];
      id v142 = objc_getProperty(self, v141, 48LL, 1);
      sub_10002E57C((BOOL)v253, v140, v142);

      id v143 = objc_alloc(&OBJC_CLASS___NEPolicy);
      __int128 v144 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", 18105LL));
      v304[0] = v226;
      v304[1] = v254;
      __int128 v145 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v304, 2LL));
      id v146 = [v143 initWithOrder:18099 result:v144 conditions:v145];
      id v148 = objc_getProperty(self, v147, 48LL, 1);
      sub_10002E57C((BOOL)v253, v146, v148);

      __int128 v273 = 0u;
      __int128 v274 = 0u;
      __int128 v271 = 0u;
      __int128 v272 = 0u;
      id v239 = v231;
      id v247 = [v239 countByEnumeratingWithState:&v271 objects:v303 count:16];
      if (v247)
      {
        uint64_t v243 = *(void *)v272;
        do
        {
          for (m = 0LL; m != v247; m = (char *)m + 1)
          {
            if (*(void *)v272 != v243) {
              objc_enumerationMutation(v239);
            }
            uint64_t v150 = *(void **)(*((void *)&v271 + 1) + 8LL * (void)m);
            if ([v150 addressFamily] == (id)30) {
              uint64_t v151 = 128LL;
            }
            else {
              uint64_t v151 = 32LL;
            }
            uint64_t v152 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition remoteAddress:prefix:]( &OBJC_CLASS___NEPolicyCondition,  "remoteAddress:prefix:",  v150,  v151));
            id v153 = objc_alloc(&OBJC_CLASS___NEPolicy);
            uint64_t v154 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", 18091LL));
            v302[0] = v152;
            v302[1] = v254;
            uint64_t v155 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v302,  2LL));
            id v156 = [v153 initWithOrder:18085 result:v154 conditions:v155];
            id v158 = objc_getProperty(self, v157, 48LL, 1);
            sub_10002E57C((BOOL)v253, v156, v158);

            id v159 = objc_alloc(&OBJC_CLASS___NEPolicy);
            __int128 v160 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", 18105LL));
            v301[0] = v152;
            v301[1] = v254;
            id v161 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v301,  2LL));
            id v162 = [v159 initWithOrder:18099 result:v160 conditions:v161];
            id v164 = objc_getProperty(self, v163, 48LL, 1);
            sub_10002E57C((BOOL)v253, v162, v164);
          }

          id v247 = [v239 countByEnumeratingWithState:&v271 objects:v303 count:16];
        }

        while (v247);
      }

      *__int128 v222 = 1;
      id v44 = &AnalyticsSendEventLazy_ptr;
      unsigned int v16 = v225;
      id v21 = v223;
    }

    if (v16) {
      unsigned int v165 = 18094;
    }
    else {
      unsigned int v165 = 18080;
    }
    if (a3) {
      uint64_t v166 = v165;
    }
    else {
      uint64_t v166 = 18120LL;
    }
    uint64_t v167 = (void *)objc_claimAutoreleasedReturnValue([v44[172] skipWithOrder:v166]);
    __int128 v267 = 0u;
    __int128 v268 = 0u;
    __int128 v269 = 0u;
    __int128 v270 = 0u;
    __int128 v233 = v21;
    id obja = v19;
    __int128 v238 = (char *)-[NSMutableArray countByEnumeratingWithState:objects:count:]( v233,  "countByEnumeratingWithState:objects:count:",  &v267,  v300,  16LL);
    if (v238)
    {
      uint64_t v235 = *(void *)v268;
      do
      {
        uint64_t v168 = 0LL;
        do
        {
          if (*(void *)v268 != v235) {
            objc_enumerationMutation(v233);
          }
          __int128 v240 = v168;
          uint64_t v169 = *(void *)(*((void *)&v267 + 1) + 8LL * (void)v168);
          uint64_t v170 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  v169));
          uint64_t v171 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition realApplication:]( &OBJC_CLASS___NEPolicyCondition,  "realApplication:",  v169));
          if (-[NSMutableArray count](v236, "count"))
          {
            __int128 v265 = 0u;
            __int128 v266 = 0u;
            __int128 v263 = 0u;
            __int128 v264 = 0u;
            __int128 v172 = v236;
            id v248 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v172,  "countByEnumeratingWithState:objects:count:",  &v263,  v299,  16LL);
            if (v248)
            {
              __int128 v244 = v172;
              uint64_t v246 = *(void *)v264;
              do
              {
                for (id n = 0LL; n != v248; id n = (char *)n + 1)
                {
                  if (*(void *)v264 != v246) {
                    objc_enumerationMutation(v172);
                  }
                  uint64_t v174 = *(void *)(*((void *)&v263 + 1) + 8LL * (void)n);
                  if (-[NSMutableArray count](v19, "count"))
                  {
                    selfa = n;
                    __int128 v261 = 0u;
                    __int128 v262 = 0u;
                    __int128 v259 = 0u;
                    __int128 v260 = 0u;
                    __int128 v175 = v19;
                    id v176 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v175,  "countByEnumeratingWithState:objects:count:",  &v259,  v298,  16LL);
                    if (v176)
                    {
                      id v177 = v176;
                      uint64_t v178 = *(void *)v260;
                      do
                      {
                        for (iid i = 0LL; ii != v177; iid i = (char *)ii + 1)
                        {
                          if (*(void *)v260 != v178) {
                            objc_enumerationMutation(v175);
                          }
                          uint64_t v180 = *(void *)(*((void *)&v259 + 1) + 8LL * (void)ii);
                          if ((a3 & 1) != 0)
                          {
                            v297[0] = v170;
                            v297[1] = v171;
                            v297[2] = v174;
                            v297[3] = v180;
                            v297[4] = v254;
                            id v181 = v297;
                            uint64_t v182 = 5LL;
                          }

                          else
                          {
                            v296[0] = v170;
                            v296[1] = v174;
                            v296[2] = v180;
                            v296[3] = v254;
                            id v181 = v296;
                            uint64_t v182 = 4LL;
                          }

                          id v183 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v181,  v182));
                          id v184 = [[NEPolicy alloc] initWithOrder:18070 result:v167 conditions:v183];
                          sub_10002E57C((BOOL)v253, v184, v252);
                        }

                        id v177 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v175,  "countByEnumeratingWithState:objects:count:",  &v259,  v298,  16LL);
                      }

                      while (v177);
                      uint64_t v19 = obja;
                      __int128 v172 = v244;
                    }

                    id n = selfa;
                  }

                  else
                  {
                    if ((a3 & 1) != 0)
                    {
                      v295[0] = v170;
                      v295[1] = v171;
                      v295[2] = v174;
                      v295[3] = v254;
                      int v185 = v295;
                      uint64_t v186 = 4LL;
                    }

                    else
                    {
                      v294[0] = v170;
                      v294[1] = v174;
                      v294[2] = v254;
                      int v185 = v294;
                      uint64_t v186 = 3LL;
                    }

                    __int128 v175 = (NSMutableArray *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v185,  v186));
                    id v187 = [[NEPolicy alloc] initWithOrder:18070 result:v167 conditions:v175];
                    sub_10002E57C((BOOL)v253, v187, v252);
                  }
                }

                id v248 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v172,  "countByEnumeratingWithState:objects:count:",  &v263,  v299,  16LL);
              }

              while (v248);
            }
          }

          else if (-[NSMutableArray count](v19, "count"))
          {
            __int128 v257 = 0u;
            __int128 v258 = 0u;
            __int128 v255 = 0u;
            __int128 v256 = 0u;
            __int128 v172 = v19;
            id v188 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v172,  "countByEnumeratingWithState:objects:count:",  &v255,  v293,  16LL);
            if (v188)
            {
              id v189 = v188;
              uint64_t v190 = *(void *)v256;
              do
              {
                id v191 = v172;
                for (jj = 0LL; jj != v189; jj = (char *)jj + 1)
                {
                  if (*(void *)v256 != v190) {
                    objc_enumerationMutation(v191);
                  }
                  uint64_t v193 = *(void *)(*((void *)&v255 + 1) + 8LL * (void)jj);
                  if ((a3 & 1) != 0)
                  {
                    v292[0] = v170;
                    v292[1] = v171;
                    v292[2] = v193;
                    v292[3] = v254;
                    __int128 v194 = v292;
                    uint64_t v195 = 4LL;
                  }

                  else
                  {
                    v291[0] = v170;
                    v291[1] = v193;
                    v291[2] = v254;
                    __int128 v194 = v291;
                    uint64_t v195 = 3LL;
                  }

                  __int128 v196 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v194,  v195));
                  id v197 = [[NEPolicy alloc] initWithOrder:18070 result:v167 conditions:v196];
                  sub_10002E57C((BOOL)v253, v197, v252);
                }

                __int128 v172 = v191;
                id v189 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v191,  "countByEnumeratingWithState:objects:count:",  &v255,  v293,  16LL);
              }

              while (v189);
            }
          }

          else
          {
            if ((a3 & 1) != 0)
            {
              v290[0] = v170;
              v290[1] = v171;
              v290[2] = v254;
              __int128 v198 = v290;
              uint64_t v199 = 3LL;
            }

            else
            {
              v289[0] = v170;
              v289[1] = v254;
              __int128 v198 = v289;
              uint64_t v199 = 2LL;
            }

            __int128 v172 = (NSMutableArray *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v198,  v199));
            id v200 = [[NEPolicy alloc] initWithOrder:18070 result:v167 conditions:v172];
            sub_10002E57C((BOOL)v253, v200, v252);
          }

          uint64_t v168 = v240 + 1;
        }

        while (v240 + 1 != v238);
        __int128 v238 = (char *)-[NSMutableArray countByEnumeratingWithState:objects:count:]( v233,  "countByEnumeratingWithState:objects:count:",  &v267,  v300,  16LL);
      }

      while (v238);
    }

    int v201 = a3;
    if (!v228) {
      int v201 = 0;
    }
    if ((v201 & v227) == 1)
    {
      id v202 = objc_alloc(&OBJC_CLASS___NEPolicy);
      __int128 v203 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", 18120LL));
      v288[0] = v254;
      __int128 v204 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition delegateIsPlatformBinary]( &OBJC_CLASS___NEPolicyCondition,  "delegateIsPlatformBinary"));
      v288[1] = v204;
      __int128 v205 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v288, 2LL));
      id v206 = [v202 initWithOrder:18072 result:v203 conditions:v205];
      sub_10002E57C((BOOL)v253, v206, v252);

      __int128 v207 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition flowRemoteAddressEmpty]( &OBJC_CLASS___NEPolicyCondition,  "flowRemoteAddressEmpty"));
      [v207 setNegative:1];
      __int128 v208 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectivePID:](&OBJC_CLASS___NEPolicyCondition, "effectivePID:", 0LL));
      [v208 setNegative:1];
      __int128 v209 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition uid:](&OBJC_CLASS___NEPolicyCondition, "uid:", v228));
      id v210 = objc_alloc(&OBJC_CLASS___NEPolicy);
      __int128 v211 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", 18080LL));
      v287[0] = v254;
      v287[1] = v207;
      v287[2] = v208;
      v287[3] = v209;
      __int128 v212 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v287, 4LL));
      id v213 = [v210 initWithOrder:18074 result:v211 conditions:v212];
      sub_10002E57C((BOOL)v253, v213, v252);
    }

    id v15 = v229;
  }
}

uint64_t sub_10003EA74(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = ne_log_large_obj(v3);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v6, 48LL, 1);
    }
    id v367 = Property;
    if (v3) {
      id v368 = objc_getProperty(v3, v366, 32LL, 1);
    }
    else {
      id v368 = 0LL;
    }
    v369 = (NSMutableArray *)v368;
    *(_DWORD *)buf = 138412546;
    id v504 = v367;
    __int16 v505 = 2112;
    v506 = v369;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "Policy IDs to be removed: %@ and %@",  buf,  0x16u);
  }

  id v8 = *(id *)(a1 + 32);
  if (v8) {
    id v8 = objc_getProperty(v8, v7, 48LL, 1);
  }
  id v9 = v8;
  sub_10002C4C8(v3, v9);

  if (v3)
  {
    id v11 = objc_getProperty(v3, v10, 32LL, 1);
    sub_10002C4C8(v3, v11);
  }

  else
  {
    id v11 = 0LL;
  }

  int v12 = sub_10002EA48(*(void *)(a1 + 32));
  v410 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult skipWithOrder:]( &OBJC_CLASS___NEPolicyResult,  "skipWithOrder:",  (v12 + 130)));
  v409 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
  id v14 = *(id *)(a1 + 32);
  if (v14) {
    id v14 = objc_getProperty(v14, v13, 184LL, 1);
  }
  id v15 = v14;
  unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue([v15 allKeys]);
  id v372 = [v16 mutableCopy];

  id v18 = *(id *)(a1 + 32);
  if (v18) {
    id v18 = objc_getProperty(v18, v17, 192LL, 1);
  }
  id v19 = v18;
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 allKeys]);
  id v371 = [v20 mutableCopy];

  id v22 = *(id *)(a1 + 32);
  if (v22) {
    id v22 = objc_getProperty(v22, v21, 200LL, 1);
  }
  id v23 = v22;
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v23 allKeys]);
  id v370 = [v24 mutableCopy];

  char v477 = 0;
  __int128 v473 = 0u;
  __int128 v474 = 0u;
  __int128 v475 = 0u;
  __int128 v476 = 0u;
  id v25 = *(id *)(a1 + 40);
  id v26 = [v25 countByEnumeratingWithState:&v473 objects:v502 count:16];
  uint64_t v411 = a1;
  if (v26)
  {
    id v27 = v26;
    uint64_t v28 = *(void *)v474;
    do
    {
      for (id i = 0LL; i != v27; id i = (char *)i + 1)
      {
        if (*(void *)v474 != v28) {
          objc_enumerationMutation(v25);
        }
        id v30 = *(void **)(*((void *)&v473 + 1) + 8LL * (void)i);
        id v31 = (void *)objc_claimAutoreleasedReturnValue([v30 matchSigningIdentifier]);
        if ([v31 isEqualToString:@"PathRuleDefaultNonSystemIdentifier"])
        {
          unsigned __int8 v32 = [v30 denyMulticast];

          if ((v32 & 1) != 0)
          {
            int v373 = 1;
            goto LABEL_24;
          }
        }

        else
        {
        }
      }

      id v27 = [v25 countByEnumeratingWithState:&v473 objects:v502 count:16];
    }

    while (v27);
    int v373 = 0;
LABEL_24:
    a1 = v411;
  }

  else
  {
    int v373 = 0;
  }

  __int128 v472 = 0u;
  __int128 v471 = 0u;
  __int128 v470 = 0u;
  __int128 v469 = 0u;
  id obj = *(id *)(a1 + 40);
  self = v3;
  id v380 = [obj countByEnumeratingWithState:&v469 objects:v501 count:16];
  if (v380)
  {
    unsigned int v406 = v12 + 100;
    unsigned int v403 = v12 + 110;
    unsigned int v374 = v12 + 120;
    uint64_t v379 = *(void *)v470;
    do
    {
      uint64_t v33 = 0LL;
      do
      {
        if (*(void *)v470 != v379) {
          objc_enumerationMutation(obj);
        }
        id v34 = *(void **)(*((void *)&v469 + 1) + 8LL * (void)v33);
        uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v34 matchSigningIdentifier]);
        uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v34 matchSigningIdentifier]);
        unsigned int v37 = [v36 isEqualToString:@"PathRuleDefaultIdentifier"];

        if (v37)
        {
          id v38 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:v35]);
          if (isa_nsarray(v38))
          {
            id v39 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult routeRules:](&OBJC_CLASS___NEPolicyResult, "routeRules:", v38));
            v500 = v409;
            id v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v500,  1LL));
            id v42 = [[NEPolicy alloc] initWithOrder:v374 result:v39 conditions:v40];
            id v43 = *(id *)(a1 + 32);
            if (v43) {
              id v43 = objc_getProperty(v43, v41, 48LL, 1);
            }
            id v44 = v43;
            sub_10002E57C((BOOL)v3, v42, v44);
          }

          goto LABEL_184;
        }

        id v45 = (void *)objc_claimAutoreleasedReturnValue([v34 matchSigningIdentifier]);
        unsigned int v46 = [v45 isEqualToString:@"PathRuleDefaultNonSystemIdentifier"];

        if (!v46)
        {
          id v38 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
          v384 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
          id v50 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
          v378 = sub_10003AE5C( *(void *)(a1 + 32),  v34,  (uint64_t)[v34 isIdentifierExternal],  *(unsigned int *)(a1 + 96));
          v387 = v50;
          v399 = v34;
          if (![v34 denyMulticast]
            || (uint64_t v52 = objc_claimAutoreleasedReturnValue([v34 temporaryAllowMulticastNetworkName])) != 0
            && (uint64_t v53 = (void *)v52,
                id v54 = (void *)objc_claimAutoreleasedReturnValue([v34 temporaryAllowMulticastNetworkName]),
                unsigned __int8 v55 = [v54 isEqualToString:*(void *)(a1 + 72)],
                v54,
                v53,
                (v55 & 1) != 0))
          {
            if (v373)
            {
              id v56 = *(id *)(a1 + 32);
              if (v56) {
                id v56 = objc_getProperty(v56, v51, 200LL, 1);
              }
              id v57 = v56;
              id v58 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([v57 objectForKeyedSubscript:v35]);

              id v59 = sub_10003AE5C( *(void *)(a1 + 32),  v34,  (uint64_t)[v34 isIdentifierExternal],  *(unsigned int *)(a1 + 96));
              if (v58)
              {
                [v370 removeObject:v35];
                id v61 = *(id *)(a1 + 32);
                if (v61) {
                  id v61 = objc_getProperty(v61, v60, 208LL, 1);
                }
                id v62 = v61;
                id v63 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([v62 objectForKeyedSubscript:v35]);

                id v64 = -[NSMutableArray isEqualToArray:](v63, "isEqualToArray:", v59);
                if ((v64 & 1) == 0)
                {
                  uint64_t v66 = ne_log_obj(v64, v65);
                  SEL v67 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
                  if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
                  {
                    v397 = v59;
                    id v189 = (void *)objc_claimAutoreleasedReturnValue([v34 matchSigningIdentifier]);
                    *(_DWORD *)buf = 138412546;
                    id v504 = v189;
                    __int16 v505 = 2112;
                    v506 = v58;
                    _os_log_debug_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_DEBUG,  "Allow Policy IDs to be removed for %@: %@",  buf,  0x16u);

                    id v59 = v397;
                  }

                  sub_10002C4C8(v3, v58);
                  goto LABEL_55;
                }
              }

              else
              {
LABEL_55:
                id v68 = v59;
                id v69 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);

                id v71 = *(id *)(a1 + 32);
                if (v71) {
                  id v71 = objc_getProperty(v71, v70, 200LL, 1);
                }
                id v72 = v71;
                id v58 = v69;
                [v72 setObject:v69 forKeyedSubscript:v35];

                id v74 = *(id *)(a1 + 32);
                if (v74) {
                  id v74 = objc_getProperty(v74, v73, 208LL, 1);
                }
                id v59 = v68;
                id v75 = v74;
                [v75 setObject:v68 forKeyedSubscript:v35];

                sub_10003D27C( *(void *)(a1 + 32),  v34,  0,  v3,  *(unsigned int *)(a1 + 96),  v58,  &v477,  *(void **)(a1 + 56),  *(void **)(a1 + 64));
                uint64_t v78 = ne_log_obj(v76, v77);
                id v63 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(v78);
                if (os_log_type_enabled((os_log_t)v63, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 138412546;
                  id v504 = v35;
                  __int16 v505 = 2112;
                  v506 = v58;
                  _os_log_debug_impl( (void *)&_mh_execute_header,  (os_log_t)v63,  OS_LOG_TYPE_DEBUG,  "Allow Policy IDs added for %@: %@",  buf,  0x16u);
                }
              }

LABEL_184:
LABEL_185:
        uint64_t v33 = (char *)v33 + 1;
      }

      while (v33 != v380);
      id v190 = [obj countByEnumeratingWithState:&v469 objects:v501 count:16];
      id v380 = v190;
    }

    while (v190);
  }

  if (![v372 count]) {
    goto LABEL_217;
  }
  __int128 v439 = 0u;
  __int128 v440 = 0u;
  __int128 v437 = 0u;
  __int128 v438 = 0u;
  id v191 = v372;
  id v192 = [v191 countByEnumeratingWithState:&v437 objects:v488 count:16];
  if (!v192) {
    goto LABEL_216;
  }
  id v194 = v192;
  uint64_t v195 = *(void *)v438;
  do
  {
    __int128 v196 = 0LL;
    do
    {
      if (*(void *)v438 != v195) {
        objc_enumerationMutation(v191);
      }
      id v197 = *(void **)(*((void *)&v437 + 1) + 8LL * (void)v196);
      id v198 = *(id *)(v411 + 32);
      if (v198) {
        id v198 = objc_getProperty(v198, v193, 184LL, 1);
      }
      id v199 = v198;
      id v200 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([v199 objectForKeyedSubscript:v197]);

      uint64_t v203 = ne_log_obj(v201, v202);
      __int128 v204 = (os_log_s *)objc_claimAutoreleasedReturnValue(v203);
      if (os_log_type_enabled(v204, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412546;
        id v504 = v197;
        __int16 v505 = 2112;
        v506 = v200;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v204,  OS_LOG_TYPE_DEBUG,  "Deny Policy IDs to be removed for %@: %@",  buf,  0x16u);
      }

      sub_10002C4C8(self, v200);
      id v206 = *(id *)(v411 + 32);
      if (v206) {
        id v206 = objc_getProperty(v206, v205, 184LL, 1);
      }
      id v207 = v206;
      [v207 setObject:0 forKeyedSubscript:v197];

      id v209 = *(id *)(v411 + 32);
      if (v209) {
        id v209 = objc_getProperty(v209, v208, 200LL, 1);
      }
      id v210 = v209;
      __int128 v211 = (void *)objc_claimAutoreleasedReturnValue([v210 objectForKeyedSubscript:v197]);
      if (v211)
      {

LABEL_206:
        goto LABEL_210;
      }

      id v213 = *(id *)(v411 + 32);
      if (v213) {
        id v213 = objc_getProperty(v213, v212, 192LL, 1);
      }
      id v214 = v213;
      __int128 v215 = (void *)objc_claimAutoreleasedReturnValue([v214 objectForKeyedSubscript:v197]);

      if (!v215)
      {
        id v217 = *(id *)(v411 + 32);
        if (v217) {
          id v217 = objc_getProperty(v217, v216, 208LL, 1);
        }
        id v210 = v217;
        [v210 setObject:0 forKeyedSubscript:v197];
        goto LABEL_206;
      }

LABEL_210:
      __int128 v196 = (char *)v196 + 1;
      uint64_t v3 = self;
    }

    while (v194 != v196);
    id v218 = [v191 countByEnumeratingWithState:&v437 objects:v488 count:16];
    id v194 = v218;
  }

  while (v218);
LABEL_216:

  a1 = v411;
LABEL_217:
  if (![v371 count]) {
    goto LABEL_244;
  }
  __int128 v435 = 0u;
  __int128 v436 = 0u;
  __int128 v433 = 0u;
  __int128 v434 = 0u;
  id v219 = v371;
  id v220 = [v219 countByEnumeratingWithState:&v433 objects:v487 count:16];
  if (!v220) {
    goto LABEL_243;
  }
  id v222 = v220;
  uint64_t v223 = *(void *)v434;
  while (2)
  {
    unsigned int v224 = 0LL;
    while (2)
    {
      if (*(void *)v434 != v223) {
        objc_enumerationMutation(v219);
      }
      unsigned int v225 = *(void **)(*((void *)&v433 + 1) + 8LL * (void)v224);
      id v226 = *(id *)(v411 + 32);
      if (v226) {
        id v226 = objc_getProperty(v226, v221, 192LL, 1);
      }
      id v227 = v226;
      unsigned int v228 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([v227 objectForKeyedSubscript:v225]);

      uint64_t v231 = ne_log_obj(v229, v230);
      id v232 = (os_log_s *)objc_claimAutoreleasedReturnValue(v231);
      if (os_log_type_enabled(v232, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412546;
        id v504 = v225;
        __int16 v505 = 2112;
        v506 = v228;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v232,  OS_LOG_TYPE_DEBUG,  "Silent deny Policy IDs to be removed for %@: %@",  buf,  0x16u);
      }

      sub_10002C4C8(self, v228);
      id v234 = *(id *)(v411 + 32);
      if (v234) {
        id v234 = objc_getProperty(v234, v233, 184LL, 1);
      }
      id v235 = v234;
      [v235 setObject:0 forKeyedSubscript:v225];

      id v237 = *(id *)(v411 + 32);
      if (v237) {
        id v237 = objc_getProperty(v237, v236, 200LL, 1);
      }
      id v238 = v237;
      id v239 = (void *)objc_claimAutoreleasedReturnValue([v238 objectForKeyedSubscript:v225]);
      if (v239)
      {

        goto LABEL_233;
      }

      id v241 = *(id *)(v411 + 32);
      if (v241) {
        id v241 = objc_getProperty(v241, v240, 184LL, 1);
      }
      id v242 = v241;
      uint64_t v243 = (void *)objc_claimAutoreleasedReturnValue([v242 objectForKeyedSubscript:v225]);

      if (!v243)
      {
        id v245 = *(id *)(v411 + 32);
        if (v245) {
          id v245 = objc_getProperty(v245, v244, 208LL, 1);
        }
        id v238 = v245;
        [v238 setObject:0 forKeyedSubscript:v225];
LABEL_233:
      }

      unsigned int v224 = (char *)v224 + 1;
      uint64_t v3 = self;
      if (v222 != v224) {
        continue;
      }
      break;
    }

    id v246 = [v219 countByEnumeratingWithState:&v433 objects:v487 count:16];
    id v222 = v246;
    if (v246) {
      continue;
    }
    break;
  }

LABEL_243:
  a1 = v411;
LABEL_244:
  if (![v370 count]) {
    goto LABEL_271;
  }
  __int128 v431 = 0u;
  __int128 v432 = 0u;
  __int128 v429 = 0u;
  __int128 v430 = 0u;
  id v248 = v370;
  id v249 = [v248 countByEnumeratingWithState:&v429 objects:v486 count:16];
  if (!v249) {
    goto LABEL_270;
  }
  id v251 = v249;
  uint64_t v252 = *(void *)v430;
  while (2)
  {
    id v253 = 0LL;
    while (2)
    {
      if (*(void *)v430 != v252) {
        objc_enumerationMutation(v248);
      }
      v254 = *(void **)(*((void *)&v429 + 1) + 8LL * (void)v253);
      id v255 = *(id *)(v411 + 32);
      if (v255) {
        id v255 = objc_getProperty(v255, v250, 200LL, 1);
      }
      id v256 = v255;
      __int128 v257 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([v256 objectForKeyedSubscript:v254]);

      uint64_t v260 = ne_log_obj(v258, v259);
      __int128 v261 = (os_log_s *)objc_claimAutoreleasedReturnValue(v260);
      if (os_log_type_enabled(v261, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412546;
        id v504 = v254;
        __int16 v505 = 2112;
        v506 = v257;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v261,  OS_LOG_TYPE_DEBUG,  "Allow Policy IDs to be removed for %@: %@",  buf,  0x16u);
      }

      sub_10002C4C8(self, v257);
      id v263 = *(id *)(v411 + 32);
      if (v263) {
        id v263 = objc_getProperty(v263, v262, 200LL, 1);
      }
      id v264 = v263;
      [v264 setObject:0 forKeyedSubscript:v254];

      id v266 = *(id *)(v411 + 32);
      if (v266) {
        id v266 = objc_getProperty(v266, v265, 184LL, 1);
      }
      id v267 = v266;
      __int128 v268 = (void *)objc_claimAutoreleasedReturnValue([v267 objectForKeyedSubscript:v254]);
      if (v268)
      {

        goto LABEL_260;
      }

      id v270 = *(id *)(v411 + 32);
      if (v270) {
        id v270 = objc_getProperty(v270, v269, 192LL, 1);
      }
      id v271 = v270;
      __int128 v272 = (void *)objc_claimAutoreleasedReturnValue([v271 objectForKeyedSubscript:v254]);

      if (!v272)
      {
        id v274 = *(id *)(v411 + 32);
        if (v274) {
          id v274 = objc_getProperty(v274, v273, 208LL, 1);
        }
        id v267 = v274;
        [v267 setObject:0 forKeyedSubscript:v254];
LABEL_260:
      }

      id v253 = (char *)v253 + 1;
      uint64_t v3 = self;
      if (v251 != v253) {
        continue;
      }
      break;
    }

    id v275 = [v248 countByEnumeratingWithState:&v429 objects:v486 count:16];
    id v251 = v275;
    if (v275) {
      continue;
    }
    break;
  }

LABEL_270:
  a1 = v411;
LABEL_271:
  if (!v477)
  {
    id v276 = *(id *)(a1 + 32);
    if (v276) {
      id v276 = objc_getProperty(v276, v247, 184LL, 1);
    }
    id v277 = v276;
    if ([v277 count])
    {

      goto LABEL_279;
    }

    id v279 = *(id *)(a1 + 32);
    if (v279) {
      id v279 = objc_getProperty(v279, v278, 192LL, 1);
    }
    id v280 = v279;
    id v281 = [v280 count];

    if (v281) {
LABEL_279:
    }
      sub_10003D27C( *(void *)(a1 + 32),  0LL,  1,  v3,  *(unsigned int *)(a1 + 96),  0LL,  &v477,  *(void **)(a1 + 56),  *(void **)(a1 + 64));
  }

  if (*(void *)(a1 + 64))
  {
    id v282 = [*(id *)(a1 + 80) count];
    if (v282)
    {
      if (*(void *)(a1 + 32)) {
        uint64_t v284 = 20020LL;
      }
      else {
        uint64_t v284 = 20LL;
      }
      unsigned int v398 = v284;
      if (!*(_BYTE *)(a1 + 100))
      {
        uint64_t v285 = ne_log_obj(v282, v283);
        __int128 v286 = (os_log_s *)objc_claimAutoreleasedReturnValue(v285);
        if (os_log_type_enabled(v286, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v286,  OS_LOG_TYPE_DEBUG,  "Installing skip fallback policy for background traffic",  buf,  2u);
        }

        if (*(void *)(a1 + 32)) {
          int v287 = 20000;
        }
        else {
          int v287 = 0;
        }
        uint64_t v288 = v287 | 5u;
        v289 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", v287 | 0x1Eu));
        v290 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition trafficClassStart:end:]( &OBJC_CLASS___NEPolicyCondition,  "trafficClassStart:end:",  100LL,  299LL));
        id v291 = objc_alloc(&OBJC_CLASS___NEPolicy);
        v485 = v290;
        v292 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v485,  1LL));
        id v294 = [v291 initWithOrder:v288 result:v289 conditions:v292];
        id v295 = *(id *)(a1 + 32);
        if (v295) {
          id v295 = objc_getProperty(v295, v293, 48LL, 1);
        }
        id v296 = v295;
        sub_10002E57C((BOOL)v3, v294, v296);

        uint64_t v284 = v398;
      }

      if ([*(id *)(a1 + 88) count])
      {
        if (*(void *)(a1 + 32)) {
          int v297 = 20000;
        }
        else {
          int v297 = 0;
        }
        v298 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", v297 | 0x1Eu));
        __int128 v425 = 0u;
        __int128 v426 = 0u;
        __int128 v427 = 0u;
        __int128 v428 = 0u;
        id v393 = *(id *)(a1 + 88);
        id v299 = [v393 countByEnumeratingWithState:&v425 objects:v484 count:16];
        id v404 = v299;
        if (v299)
        {
          uint64_t v301 = v297 | 0xAu;
          uint64_t v401 = *(void *)v426;
          do
          {
            uint64_t v302 = 0LL;
            do
            {
              if (*(void *)v426 != v401) {
                objc_enumerationMutation(v393);
              }
              uint64_t v407 = v302;
              v303 = *(void **)(*((void *)&v425 + 1) + 8 * v302);
              uint64_t v304 = ne_log_obj(v299, v300);
              v305 = (os_log_s *)objc_claimAutoreleasedReturnValue(v304);
              if (os_log_type_enabled(v305, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 138412290;
                id v504 = v303;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v305,  OS_LOG_TYPE_DEBUG,  "Installing skip fallback policy for %@",  buf,  0xCu);
              }

              id v306 = +[NEProcessInfo copyUUIDsForBundleID:uid:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForBundleID:uid:",  v303,  *(unsigned int *)(a1 + 96));
              __int128 v421 = 0u;
              __int128 v422 = 0u;
              __int128 v423 = 0u;
              __int128 v424 = 0u;
              id v307 = v306;
              id v308 = [v307 countByEnumeratingWithState:&v421 objects:v483 count:16];
              if (v308)
              {
                id v309 = v308;
                uint64_t v310 = *(void *)v422;
                do
                {
                  for (kk = 0LL; kk != v309; kk = (char *)kk + 1)
                  {
                    if (*(void *)v422 != v310) {
                      objc_enumerationMutation(v307);
                    }
                    v312 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  *(void *)(*((void *)&v421 + 1) + 8LL * (void)kk)));
                    if (v312)
                    {
                      id v313 = objc_alloc(&OBJC_CLASS___NEPolicy);
                      v482 = v312;
                      uint64_t v314 = a1;
                      v315 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v482,  1LL));
                      id v317 = [v313 initWithOrder:v301 result:v298 conditions:v315];
                      id v318 = *(id *)(v314 + 32);
                      if (v318) {
                        id v318 = objc_getProperty(v318, v316, 48LL, 1);
                      }
                      id v319 = v318;
                      sub_10002E57C((BOOL)self, v317, v319);

                      a1 = v411;
                    }
                  }

                  id v309 = [v307 countByEnumeratingWithState:&v421 objects:v483 count:16];
                }

                while (v309);
              }

              uint64_t v302 = v407 + 1;
              uint64_t v3 = self;
            }

            while ((id)(v407 + 1) != v404);
            id v299 = [v393 countByEnumeratingWithState:&v425 objects:v484 count:16];
            id v404 = v299;
          }

          while (v299);
        }

        uint64_t v284 = v398;
      }

      v405 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult netAgentUUID:]( &OBJC_CLASS___NEPolicyResult,  "netAgentUUID:",  *(void *)(a1 + 64)));
      __int128 v417 = 0u;
      __int128 v418 = 0u;
      __int128 v419 = 0u;
      __int128 v420 = 0u;
      id v390 = *(id *)(a1 + 80);
      id v320 = [v390 countByEnumeratingWithState:&v417 objects:v481 count:16];
      if (v320)
      {
        id v321 = v320;
        uint64_t v322 = *(void *)v418;
        __int16 v323 = &AnalyticsSendEventLazy_ptr;
        uint64_t v386 = *(void *)v418;
        do
        {
          id v324 = 0LL;
          id v388 = v321;
          do
          {
            if (*(void *)v418 != v322) {
              objc_enumerationMutation(v390);
            }
            v325 = *(void **)(*((void *)&v417 + 1) + 8LL * (void)v324);
            id v326 = [v325 isEqualToString:@"PathRuleDefaultIdentifier"];
            if ((_DWORD)v326)
            {
              uint64_t v328 = ne_log_obj(v326, v327);
              v329 = (os_log_s *)objc_claimAutoreleasedReturnValue(v328);
              if (os_log_type_enabled(v329, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v329,  OS_LOG_TYPE_DEBUG,  "Installing default fallback policy",  buf,  2u);
              }

              uint64_t v3 = [objc_alloc((Class)v323[170]) initWithOrder:v284 result:v405 conditions:0];
              id v331 = *(id *)(a1 + 32);
              if (v331) {
                id v331 = objc_getProperty(v331, v330, 48LL, 1);
              }
              id v332 = v331;
              sub_10002E57C((BOOL)self, v3, v332);
            }

            else
            {
              if (v3)
              {
                if (v3[2])
                {
                  uint64_t v3 = (id)objc_claimAutoreleasedReturnValue( +[NEPolicyResult filterWithControlUnit:]( &OBJC_CLASS___NEPolicyResult,  "filterWithControlUnit:"));
                }

                else
                {
                  uint64_t v3 = 0LL;
                }
              }

              id v394 = v324;
              uint64_t v333 = ne_log_obj(v326, v327);
              v334 = (os_log_s *)objc_claimAutoreleasedReturnValue(v333);
              if (os_log_type_enabled(v334, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 138412290;
                id v504 = v325;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v334,  OS_LOG_TYPE_DEBUG,  "Installing fallback policy for %@",  buf,  0xCu);
              }

              id v335 = +[NEProcessInfo copyUUIDsForBundleID:uid:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForBundleID:uid:",  v325,  *(unsigned int *)(a1 + 96));
              __int128 v413 = 0u;
              __int128 v414 = 0u;
              __int128 v415 = 0u;
              __int128 v416 = 0u;
              id v336 = v335;
              id v408 = [v336 countByEnumeratingWithState:&v413 objects:v480 count:16];
              if (v408)
              {
                uint64_t v337 = *(void *)v414;
                uint64_t v402 = *(void *)v414;
                do
                {
                  v338 = 0LL;
                  do
                  {
                    if (*(void *)v414 != v337) {
                      objc_enumerationMutation(v336);
                    }
                    v339 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  *(void *)(*((void *)&v413 + 1) + 8LL * (void)v338)));
                    if (v339)
                    {
                      id v340 = objc_alloc((Class)v323[170]);
                      v479 = v339;
                      v341 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v479,  1LL));
                      id v343 = [v340 initWithOrder:v284 result:v405 conditions:v341];
                      id v344 = *(id *)(v411 + 32);
                      if (v344) {
                        id v344 = objc_getProperty(v344, v342, 48LL, 1);
                      }
                      id v345 = v344;
                      sub_10002E57C((BOOL)self, v343, v345);

                      if (v3)
                      {
                        id v346 = v336;
                        v347 = v323;
                        id v348 = objc_alloc((Class)v323[170]);
                        v478[0] = v339;
                        v349 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition allInterfaces]( &OBJC_CLASS___NEPolicyCondition,  "allInterfaces"));
                        v478[1] = v349;
                        v350 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v478,  2LL));
                        id v352 = [v348 initWithOrder:v284 result:v3 conditions:v350];
                        if (self)
                        {
                          id v353 = objc_getProperty(self, v351, 32LL, 1);
                          sub_10002E57C((BOOL)self, v352, v353);
                        }

                        else
                        {
                          sub_10002E57C(0LL, v352, 0LL);
                          id v353 = 0LL;
                        }

                        uint64_t v284 = v398;
                        __int16 v323 = v347;
                        id v336 = v346;
                        uint64_t v337 = v402;
                      }
                    }

                    v338 = (char *)v338 + 1;
                  }

                  while (v408 != v338);
                  id v354 = [v336 countByEnumeratingWithState:&v413 objects:v480 count:16];
                  id v408 = v354;
                }

                while (v354);
              }

              a1 = v411;
              id v332 = v336;
              uint64_t v322 = v386;
              id v321 = v388;
              id v324 = v394;
            }

            id v324 = (char *)v324 + 1;
            uint64_t v3 = self;
          }

          while (v324 != v321);
          id v321 = [v390 countByEnumeratingWithState:&v417 objects:v481 count:16];
        }

        while (v321);
      }
    }
  }

  uint64_t v355 = sub_10002C620(v3);
  uint64_t v357 = v355;
  if ((v355 & 1) != 0)
  {
    uint64_t v358 = ne_log_large_obj(v355);
    v359 = (os_log_s *)objc_claimAutoreleasedReturnValue(v358);
    if (os_log_type_enabled(v359, OS_LOG_TYPE_DEBUG))
    {
      id v361 = *(id *)(a1 + 32);
      if (v361) {
        id v361 = objc_getProperty(v361, v360, 48LL, 1);
      }
      id v362 = v361;
      *(_DWORD *)buf = 138412290;
      id v504 = v362;
      _os_log_debug_impl((void *)&_mh_execute_header, v359, OS_LOG_TYPE_DEBUG, "Policy IDs added: %@", buf, 0xCu);
    }
  }

  else
  {
    uint64_t v363 = ne_log_obj(v355, v356);
    v359 = (os_log_s *)objc_claimAutoreleasedReturnValue(v363);
    if (os_log_type_enabled(v359, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v359,  OS_LOG_TYPE_ERROR,  "Failed to apply path controller policies",  buf,  2u);
    }
  }

  return v357;
}

uint64_t sub_100040F9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = ne_log_large_obj();
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v6, 48LL, 1);
    }
    *(_DWORD *)buf = 138412290;
    id v54 = Property;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Policy IDs to be removed: %@", buf, 0xCu);
  }

  id v8 = *(void **)(a1 + 32);
  if (v8) {
    id v9 = objc_getProperty(v8, v7, 48LL, 1);
  }
  else {
    id v9 = 0LL;
  }
  sub_10002C4C8(v3, v9);
  int v10 = sub_10002EA48(*(void *)(a1 + 32));
  id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult divertSocketToControlUnit:]( &OBJC_CLASS___NEPolicyResult,  "divertSocketToControlUnit:",  *(unsigned int *)(a1 + 64)));
  if (*(_BYTE *)(a1 + 68))
  {
    int v12 = sub_10003C4A0(*(void *)(a1 + 32), *(unsigned int *)(a1 + 64), @"ProxyAgent");
    uint64_t v13 = objc_claimAutoreleasedReturnValue(v12);
  }

  else
  {
    uint64_t v13 = 0LL;
  }

  int v14 = v10 + 102;
  if (*(_BYTE *)(a1 + 69)
    && (id v15 = sub_10003C4A0(*(void *)(a1 + 32), *(unsigned int *)(a1 + 64), @"DNSAgent"),
        (uint64_t v16 = objc_claimAutoreleasedReturnValue(v15)) != 0))
  {
    id v39 = (void *)v16;
    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](&OBJC_CLASS___NEPolicyResult, "netAgentUUID:"));
  }

  else
  {
    id v17 = 0LL;
    id v39 = 0LL;
  }

  id v40 = (void *)v13;
  if (v13) {
    id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](&OBJC_CLASS___NEPolicyResult, "netAgentUUID:", v13));
  }
  else {
    id v18 = 0LL;
  }
  unsigned int v19 = sub_10002EA48(*(void *)(a1 + 32));
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", v19 + 103));
  uint64_t v36 = *(void **)(a1 + 40);
  id v21 = *(void **)(a1 + 56);
  unsigned int v37 = *(void **)(a1 + 48);
  uint64_t v38 = *(void *)(a1 + 32);
  v45[0] = _NSConcreteStackBlock;
  v45[1] = 3221225472LL;
  v45[2] = sub_10004134C;
  v45[3] = &unk_1000BDE38;
  id v46 = v3;
  int v51 = v14;
  id v22 = v11;
  uint64_t v23 = *(void *)(a1 + 32);
  id v47 = v22;
  uint64_t v48 = v23;
  id v24 = v17;
  id v49 = v24;
  id v25 = v18;
  id v50 = v25;
  int32x2_t v52 = vadd_s32(vdup_n_s32(v19), (int32x2_t)0x140000000ALL);
  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472LL;
  v41[2] = sub_100041488;
  v41[3] = &unk_1000BDC30;
  id v26 = v46;
  uint64_t v27 = *(void *)(a1 + 32);
  id v42 = v26;
  uint64_t v43 = v27;
  id v28 = v20;
  id v44 = v28;
  sub_1000320B0(v38, v36, 0, 1, v37, v21, v26, v45, v41);
  uint64_t v29 = sub_10002C620(v26);
  uint64_t v30 = ne_log_large_obj();
  id v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
  {
    id v35 = *(id *)(a1 + 32);
    if (v35) {
      id v35 = objc_getProperty(v35, v32, 48LL, 1);
    }
    *(_DWORD *)buf = 138412290;
    id v54 = v35;
    _os_log_debug_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "Policy IDs added: %@", buf, 0xCu);
  }

  return v29;
}

void sub_10004134C(uint64_t a1, void *a2)
{
  id v18 = a2;
  uint64_t v3 = *(void *)(a1 + 32);
  id v5 = [[NEPolicy alloc] initWithOrder:*(unsigned int *)(a1 + 72) result:*(void *)(a1 + 40) conditions:v18];
  id v6 = *(void **)(a1 + 48);
  if (v6) {
    id Property = objc_getProperty(v6, v4, 48LL, 1);
  }
  else {
    id Property = 0LL;
  }
  sub_10002E57C(v3, v5, Property);

  if (*(void *)(a1 + 56))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    id v10 = [[NEPolicy alloc] initWithOrder:*(unsigned int *)(a1 + 76) result:*(void *)(a1 + 56) conditions:v18];
    id v11 = *(void **)(a1 + 48);
    if (v11) {
      id v12 = objc_getProperty(v11, v9, 48LL, 1);
    }
    else {
      id v12 = 0LL;
    }
    sub_10002E57C(v8, v10, v12);
  }

  if (*(void *)(a1 + 64))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    id v15 = [[NEPolicy alloc] initWithOrder:*(unsigned int *)(a1 + 80) result:*(void *)(a1 + 64) conditions:v18];
    uint64_t v16 = *(void **)(a1 + 48);
    if (v16) {
      id v17 = objc_getProperty(v16, v14, 48LL, 1);
    }
    else {
      id v17 = 0LL;
    }
    sub_10002E57C(v13, v15, v17);
  }
}

void sub_100041488(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = a2;
  id v8 = [[NEPolicy alloc] initWithOrder:sub_10002EA48(a1[5]) result:a1[6] conditions:v4];

  id v6 = (void *)a1[5];
  if (v6) {
    id Property = objc_getProperty(v6, v5, 48LL, 1);
  }
  else {
    id Property = 0LL;
  }
  sub_10002E57C(v3, v8, Property);
}

uint64_t sub_100041528(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = ne_log_large_obj(v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v6, 48LL, 1);
    }
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = Property;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "Policy IDs to be removed: %@",  (uint8_t *)&buf,  0xCu);
  }

  uint64_t v8 = ne_log_large_obj(v7);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    id v77 = *(id *)(a1 + 32);
    if (v77) {
      id v77 = objc_getProperty(v77, v10, 56LL, 1);
    }
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v77;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "Low priority Policy IDs to be removed: %@",  (uint8_t *)&buf,  0xCu);
  }

  id v12 = *(void **)(a1 + 32);
  if (v12) {
    id v13 = objc_getProperty(v12, v11, 48LL, 1);
  }
  else {
    id v13 = 0LL;
  }
  sub_10002C4C8(v3, v13);
  id v15 = *(void **)(a1 + 32);
  if (v15) {
    id v16 = objc_getProperty(v15, v14, 56LL, 1);
  }
  else {
    id v16 = 0LL;
  }
  sub_10002D64C(v3, v16);
  unsigned int v17 = *(_DWORD *)(a1 + 72);
  uint64_t v18 = *(void *)(a1 + 32);
  unsigned int v19 = sub_10002EA48(v18) + 5 * (v17 - 1);
  if (*(_BYTE *)(a1 + 76)) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = v19 + 160;
  }
  if (*(_BYTE *)(a1 + 76)) {
    uint64_t v21 = (1 << (v17 - 1)) | 0x80000000;
  }
  else {
    uint64_t v21 = v17;
  }
  id v117 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult divertSocketToControlUnit:]( &OBJC_CLASS___NEPolicyResult,  "divertSocketToControlUnit:",  v21));
  id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult skipWithOrder:]( &OBJC_CLASS___NEPolicyResult,  "skipWithOrder:",  (v20 + 4)));
  self = v3;
  id v109 = v22;
  if (*(void *)(a1 + 40))
  {
    if (v18) {
      uint64_t v23 = 1490LL;
    }
    else {
      uint64_t v23 = 0LL;
    }
    id v24 = objc_alloc(&OBJC_CLASS___NSArray);
    id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uuid]);
    id v26 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  v25));
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectivePID:version:]( NEPolicyCondition,  "effectivePID:version:",  [*(id *)(a1 + 40) pid],  objc_msgSend(*(id *)(a1 + 40), "pidVersion")));
    id v28 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition delegateIsPlatformBinary]( &OBJC_CLASS___NEPolicyCondition,  "delegateIsPlatformBinary"));
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
    uint64_t v30 = -[NSArray initWithObjects:](v24, "initWithObjects:", v26, v27, v28, v29, 0LL);

    id v32 = [[NEPolicy alloc] initWithOrder:v23 result:v22 conditions:v30];
    uint64_t v33 = *(void **)(a1 + 32);
    if (v33) {
      id v34 = objc_getProperty(v33, v31, 48LL, 1);
    }
    else {
      id v34 = 0LL;
    }
    id v3 = self;
    sub_10002E57C((BOOL)self, v32, v34);
  }

  unsigned int v127 = v20;
  id v36 = +[NEProcessInfo copyUUIDsForExecutable:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForExecutable:",  @"/usr/libexec/captiveagent");
  if (v36)
  {
    if (v3) {
      id v37 = objc_getProperty(v3, v35, 16LL, 1);
    }
    else {
      id v37 = 0LL;
    }
    id v39 = v37;
    id v40 = *(id *)(a1 + 32);
    if (v40) {
      id v40 = objc_getProperty(v40, v38, 48LL, 1);
    }
    char v41 = sub_100054464(v39, &v127, 0, 0LL, v36, 0, 0LL, 0, 0LL, 1, 0LL, v22, 0LL, 0, v40);

    if ((v41 & 1) != 0)
    {
      id v44 = self;
      if (self) {
        id v44 = objc_getProperty(self, v43, 16LL, 1);
      }
      id v46 = v44;
      id v47 = *(void **)(a1 + 48);
      id v48 = *(id *)(a1 + 32);
      if (v48) {
        id v48 = objc_getProperty(v48, v45, 48LL, 1);
      }
      BOOL v49 = sub_10005856C(v46, v47, &v127, 1, 1, 0LL, v22, 0, v48, 0, 0);

      if (v49)
      {
        if (if_nametoindex("llw0"))
        {
          int32x2_t v52 = objc_alloc(&OBJC_CLASS___NSArray);
          uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", "llw0"));
          id v54 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition scopedInterface:]( &OBJC_CLASS___NEPolicyCondition,  "scopedInterface:",  v53));
          unsigned __int8 v55 = -[NSArray initWithObjects:](v52, "initWithObjects:", v54, 0LL);

          id v57 = [[NEPolicy alloc] initWithOrder:v20 result:v22 conditions:v55];
          id v58 = *(void **)(a1 + 32);
          if (v58) {
            id v59 = objc_getProperty(v58, v56, 48LL, 1);
          }
          else {
            id v59 = 0LL;
          }
          sub_10002E57C((BOOL)self, v57, v59);
        }

        id v106 = v36;
        __int128 v125 = 0u;
        __int128 v126 = 0u;
        __int128 v123 = 0u;
        __int128 v124 = 0u;
        id obj = *(id *)(a1 + 56);
        id v115 = [obj countByEnumeratingWithState:&v123 objects:v130 count:16];
        unsigned int v60 = 0;
        if (v115)
        {
          uint64_t v112 = *(void *)v124;
          uint64_t v61 = a1;
          do
          {
            for (id i = 0LL; i != v115; id i = (char *)i + 1)
            {
              if (*(void *)v124 != v112) {
                objc_enumerationMutation(obj);
              }
              id v63 = *(void **)(*((void *)&v123 + 1) + 8LL * (void)i);
              *((void *)&buf + 1) = 0LL;
              if ([v63 matchProtocol])
              {
                uint64_t v64 = (uint64_t)[v63 matchProtocol];
                uint64_t v65 = 1LL;
              }

              else
              {
                *((void *)&buf + 1) = 2LL;
                uint64_t v64 = 1LL;
                uint64_t v65 = 2LL;
              }

              uint64_t v66 = 0LL;
              *(void *)&__int128 buf = v64;
              uint64_t v67 = 8 * v65;
              do
              {
                sub_1000399F8(*(void **)(v61 + 32), v63, *(void *)&v130[v66 - 8], self, v109, v20, 0);
                v66 += 8LL;
              }

              while (v67 != v66);
              v60 |= [v63 appliesToLoopback];
            }

            a1 = v61;
            id v115 = [obj countByEnumeratingWithState:&v123 objects:v130 count:16];
          }

          while (v115);
        }

        if (*(_BYTE *)(a1 + 77))
        {
          id v68 = sub_10003C4A0(*(void *)(a1 + 32), *(unsigned int *)(a1 + 72), @"ProxyAgent");
          uint64_t v69 = objc_claimAutoreleasedReturnValue(v68);
        }

        else
        {
          uint64_t v69 = 0LL;
        }

        id v3 = self;
        if (*(_BYTE *)(a1 + 78))
        {
          uint64_t v78 = sub_10003C4A0(*(void *)(a1 + 32), *(unsigned int *)(a1 + 72), @"DNSAgent");
          SEL v79 = (void *)objc_claimAutoreleasedReturnValue(v78);
          if (v79) {
            unsigned int v80 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](&OBJC_CLASS___NEPolicyResult, "netAgentUUID:", v79));
          }
          else {
            unsigned int v80 = 0LL;
          }
        }

        else
        {
          unsigned int v80 = 0LL;
          SEL v79 = 0LL;
        }

        uint64_t v105 = (os_log_s *)v69;
        if (v69) {
          id v116 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](&OBJC_CLASS___NEPolicyResult, "netAgentUUID:", v69));
        }
        else {
          id v116 = 0LL;
        }
        __int128 v121 = 0u;
        __int128 v122 = 0u;
        __int128 v119 = 0u;
        __int128 v120 = 0u;
        id v107 = *(id *)(a1 + 64);
        id obja = [v107 countByEnumeratingWithState:&v119 objects:v128 count:16];
        if (obja)
        {
          unsigned int v81 = v20 + 3;
          unsigned int v82 = v20 + 2;
          uint64_t v108 = *(void *)v120;
          do
          {
            uint64_t v83 = 0LL;
            do
            {
              if (*(void *)v120 != v108) {
                objc_enumerationMutation(v107);
              }
              id v84 = *(void **)(*((void *)&v119 + 1) + 8 * v83);
              *((void *)&buf + 1) = 0LL;
              unsigned int v114 = v60;
              uint64_t v113 = v83;
              if ([v84 matchProtocol])
              {
                uint64_t v85 = (uint64_t)[v84 matchProtocol];
                uint64_t v86 = 1LL;
              }

              else
              {
                *((void *)&buf + 1) = 2LL;
                uint64_t v85 = 1LL;
                uint64_t v86 = 2LL;
              }

              uint64_t v87 = 0LL;
              *(void *)&__int128 buf = v85;
              uint64_t v88 = 8 * v86;
              do
              {
                if (v80) {
                  sub_1000399F8(*(void **)(a1 + 32), v84, *(void *)&v130[v87 - 8], v3, v80, v82, 0);
                }
                if (v116)
                {
                  id v89 = *(void **)(a1 + 32);
                  uint64_t v90 = a1;
                  uint64_t v91 = *(void *)&v130[v87 - 8];
                  id v3 = self;
                  sub_1000399F8(v89, v84, v91, self, v116, v82, 0);
                }

                else
                {
                  uint64_t v90 = a1;
                  uint64_t v91 = *(void *)&v130[v87 - 8];
                  id v3 = self;
                }

                sub_1000399F8(*(void **)(v90 + 32), v84, v91, v3, v117, v81, 1);
                v87 += 8LL;
                a1 = v90;
              }

              while (v88 != v87);
              unsigned int v60 = [v84 appliesToLoopback] | v114;
              uint64_t v83 = v113 + 1;
            }

            while ((id)(v113 + 1) != obja);
            id obja = [v107 countByEnumeratingWithState:&v119 objects:v128 count:16];
          }

          while (obja);
        }

        if (v3 && (v60 & 1) != 0) {
          sub_10002DE64((uint64_t)v3, *(void **)(a1 + 32), 1);
        }
        uint64_t v94 = ne_log_obj(v92, v93);
        uint64_t v95 = (os_log_s *)objc_claimAutoreleasedReturnValue(v94);
        if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
        {
          id v103 = *(id *)(a1 + 32);
          if (v103) {
            id v103 = objc_getProperty(v103, v96, 48LL, 1);
          }
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = v103;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_DEBUG,  "Policy IDs added: %@",  (uint8_t *)&buf,  0xCu);
        }

        uint64_t v99 = ne_log_obj(v97, v98);
        id v100 = (os_log_s *)objc_claimAutoreleasedReturnValue(v99);
        if (os_log_type_enabled(v100, OS_LOG_TYPE_DEBUG))
        {
          id v104 = *(id *)(a1 + 32);
          if (v104) {
            id v104 = objc_getProperty(v104, v101, 56LL, 1);
          }
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = v104;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v100,  OS_LOG_TYPE_DEBUG,  "Policy IDs added at Low priority: %@",  (uint8_t *)&buf,  0xCu);
        }

        uint64_t v72 = sub_10002C620(v3);
        id v22 = v109;
        id v71 = v105;
        id v36 = v106;
        goto LABEL_94;
      }

      uint64_t v75 = ne_log_obj(v50, v51);
      id v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
      if (!os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
      {
LABEL_55:
        uint64_t v72 = 0LL;
        id v3 = self;
        goto LABEL_94;
      }

      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = "-[NESMPolicySession setFlowDivertPoliciesForNetworkRules:excludeRules:flowDivertCo"
                                      "ntrolUnit:hasDNS:hasProxy:providerProcessIdentity:isFullyTransparent:captiveNetwor"
                                      "kPluginBundleIDs:]_block_invoke";
      id v74 = "%s: Captive app traffic exception policies failed";
    }

    else
    {
      uint64_t v73 = ne_log_obj(v42, v43);
      id v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
      if (!os_log_type_enabled(v71, OS_LOG_TYPE_ERROR)) {
        goto LABEL_55;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = "-[NESMPolicySession setFlowDivertPoliciesForNetworkRules:excludeRules:flowDivertCo"
                                      "ntrolUnit:hasDNS:hasProxy:providerProcessIdentity:isFullyTransparent:captiveNetwor"
                                      "kPluginBundleIDs:]_block_invoke";
      id v74 = "%s: Captive agent traffic exception policies failed";
    }

    _os_log_error_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, v74, (uint8_t *)&buf, 0xCu);
    goto LABEL_55;
  }

  uint64_t v70 = ne_log_obj(0LL, v35);
  id v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
  if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "-[NESMPolicySession setFlowDivertPoliciesForNetworkRules:excludeRules:flowDivertCont"
                                    "rolUnit:hasDNS:hasProxy:providerProcessIdentity:isFullyTransparent:captiveNetworkPlu"
                                    "ginBundleIDs:]_block_invoke";
    _os_log_error_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_ERROR,  "%s: Failed to get UUIDs for captiveagent",  (uint8_t *)&buf,  0xCu);
  }

  uint64_t v72 = 0LL;
LABEL_94:

  return v72;
}

uint64_t sub_100041FE8(uint64_t a1, void *a2)
{
  id v32 = a2;
  uint64_t v3 = ne_log_large_obj();
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v5, 104LL, 1);
    }
    *(_DWORD *)__int128 buf = 138412290;
    id v39 = Property;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "drop control Policy IDs to be removed %@",  buf,  0xCu);
  }

  uint64_t v7 = *(void **)(a1 + 32);
  if (v7) {
    id v8 = objc_getProperty(v7, v6, 104LL, 1);
  }
  else {
    id v8 = 0LL;
  }
  sub_10002C4C8(v32, v8);
  uint64_t v9 = *(void *)(a1 + 32);
  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult drop](&OBJC_CLASS___NEPolicyResult, "drop"));
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  id obj = *(id *)(a1 + 40);
  id v11 = [obj countByEnumeratingWithState:&v33 objects:v37 count:16];
  if (v11)
  {
    id v12 = v11;
    if (v9) {
      uint64_t v13 = 20000LL;
    }
    else {
      uint64_t v13 = 0LL;
    }
    uint64_t v14 = *(void *)v34;
    do
    {
      id v15 = 0LL;
      do
      {
        if (*(void *)v34 != v14) {
          objc_enumerationMutation(obj);
        }
        uint64_t v16 = *(void *)(*((void *)&v33 + 1) + 8LL * (void)v15);
        unsigned int v17 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  v16));
        -[NSMutableArray addObject:](v17, "addObject:", v18);

        id v20 = [[NEPolicy alloc] initWithOrder:(char *)v15 + v13 result:v10 conditions:v17];
        uint64_t v21 = *(void **)(a1 + 32);
        if (v21) {
          id v22 = objc_getProperty(v21, v19, 104LL, 1);
        }
        else {
          id v22 = 0LL;
        }
        BOOL v23 = sub_10002E57C((BOOL)v32, v20, v22);

        if (!v23)
        {
          uint64_t v27 = 0LL;
          goto LABEL_23;
        }

        id v15 = (char *)v15 + 1;
      }

      while (v12 != v15);
      uint64_t v13 = (v13 + (_DWORD)v15);
      id v24 = [obj countByEnumeratingWithState:&v33 objects:v37 count:16];
      id v12 = v24;
    }

    while (v24);
  }

  if (sub_10002C620(v32))
  {
    uint64_t v25 = ne_log_large_obj();
    id obj = (id)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled((os_log_t)obj, OS_LOG_TYPE_DEBUG))
    {
      id v30 = *(id *)(a1 + 32);
      if (v30) {
        id v30 = objc_getProperty(v30, v26, 104LL, 1);
      }
      *(_DWORD *)__int128 buf = 138412290;
      id v39 = v30;
      _os_log_debug_impl( (void *)&_mh_execute_header,  (os_log_t)obj,  OS_LOG_TYPE_DEBUG,  "drop control Policy IDs added %@",  buf,  0xCu);
    }

    uint64_t v27 = 1LL;
LABEL_23:
  }

  else
  {
    uint64_t v27 = 0LL;
  }

  return v27;
}

uint64_t sub_1000422E4(uint64_t a1, void *a2)
{
  id v34 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 160LL, 1);
  }
  __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([Property objectForKeyedSubscript:*(void *)(a1 + 40)]);
  if (!v35)
  {
    id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    id v7 = *(id *)(a1 + 32);
    if (v7) {
      id v7 = objc_getProperty(v7, v5, 160LL, 1);
    }
    [v7 setObject:v6 forKeyedSubscript:*(void *)(a1 + 40)];

    id v9 = *(id *)(a1 + 32);
    if (v9) {
      id v9 = objc_getProperty(v9, v8, 160LL, 1);
    }
    __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:*(void *)(a1 + 40)]);
    uint64_t v11 = ne_log_obj(v35, v10);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      id v32 = *(void **)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v42 = v32;
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CREATE LIST for %@", buf, 0xCu);
    }
  }

  uint64_t v13 = ne_log_large_obj();
  uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v42 = v35;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "drop control Policy IDs to be removed %@",  buf,  0xCu);
  }

  sub_10002C4C8(v34, v35);
  int v15 = sub_10002EA48(*(void *)(a1 + 32));
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult drop](&OBJC_CLASS___NEPolicyResult, "drop"));
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  id obj = *(id *)(a1 + 48);
  id v17 = [obj countByEnumeratingWithState:&v36 objects:v40 count:16];
  if (v17)
  {
    id v18 = v17;
    unsigned int v19 = v15 + 30;
    uint64_t v20 = *(void *)v37;
    while (2)
    {
      for (id i = 0LL; i != v18; id i = (char *)i + 1)
      {
        if (*(void *)v37 != v20) {
          objc_enumerationMutation(obj);
        }
        uint64_t v22 = *(void *)(*((void *)&v36 + 1) + 8LL * (void)i);
        BOOL v23 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        id v24 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  v22));
        -[NSMutableArray addObject:](v23, "addObject:", v24);

        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition realApplication:](&OBJC_CLASS___NEPolicyCondition, "realApplication:", v22));
        -[NSMutableArray addObject:](v23, "addObject:", v25);

        id v26 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
        -[NSMutableArray addObject:](v23, "addObject:", v26);

        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](&OBJC_CLASS___NEPolicyCondition, "entitlement"));
        -[NSMutableArray addObject:](v23, "addObject:", v27);

        id v28 = [[NEPolicy alloc] initWithOrder:(char *)i + v19 result:v16 conditions:v23];
        LODWORD(v27) = sub_10002E57C((BOOL)v34, v28, v35);

        if (!(_DWORD)v27)
        {
          uint64_t v30 = 0LL;
          goto LABEL_26;
        }
      }

      v19 += i;
      id v18 = [obj countByEnumeratingWithState:&v36 objects:v40 count:16];
      if (v18) {
        continue;
      }
      break;
    }
  }

  if (sub_10002C620(v34))
  {
    uint64_t v29 = ne_log_large_obj();
    id obj = (id)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled((os_log_t)obj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v42 = v35;
      _os_log_debug_impl( (void *)&_mh_execute_header,  (os_log_t)obj,  OS_LOG_TYPE_DEBUG,  "drop control Policy IDs added %@",  buf,  0xCu);
    }

    uint64_t v30 = 1LL;
LABEL_26:
  }

  else
  {
    uint64_t v30 = 0LL;
  }

  return v30;
}

uint64_t sub_1000426C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (a1)
  {
    if ((*(_DWORD *)(a1 + 8) | 2) == 3)
    {
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472LL;
      v9[2] = sub_1000427BC;
      v9[3] = &unk_1000BDAC8;
      v9[4] = a1;
      id v10 = v3;
      a1 = sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, v9);
    }

    else
    {
      uint64_t v6 = ne_log_obj(v3, v4);
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Failed to install Nexus policies, master session is nil or not AlwaysOn VPN / VPN ",  buf,  2u);
      }

      a1 = 0LL;
    }
  }

  return a1;
}

uint64_t sub_1000427BC(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v5 = *(void **)(a1 + 32);
  if (!v5 || (id v6 = objc_getProperty(v5, v3, 128LL, 1)) == 0LL)
  {
    id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    id v9 = *(void **)(a1 + 32);
    if (v9) {
      objc_setProperty_atomic(v9, v7, v8, 128LL);
    }

    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v10, 128LL, 1);
    }
    id v6 = Property;
  }

  uint64_t v12 = ne_log_large_obj();
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    int v24 = 138412290;
    id v25 = v6;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "Nexus Policy IDs to be removed: %@",  (uint8_t *)&v24,  0xCu);
  }

  sub_10002C4C8(v4, v6);
  if (*(void *)(a1 + 40))
  {
    uint64_t v14 = sub_10002EA48(*(void *)(a1 + 32)) + 40;
    int v15 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](&OBJC_CLASS___NEPolicyResult, "pass"));
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition scopedInterface:]( &OBJC_CLASS___NEPolicyCondition,  "scopedInterface:",  *(void *)(a1 + 40)));
    id v28 = v16;
    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v28, 1LL));

    id v18 = [[NEPolicy alloc] initWithOrder:v14 result:v15 conditions:v17];
    LODWORD(v16) = sub_10002E57C((BOOL)v4, v18, v6);

    if ((_DWORD)v16 && sub_10002C620(v4))
    {
      uint64_t v19 = ne_log_large_obj();
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        BOOL v23 = *(void **)(a1 + 40);
        int v24 = 138412546;
        id v25 = v23;
        __int16 v26 = 2112;
        id v27 = v6;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "Nexus Policy IDs added for %@: %@",  (uint8_t *)&v24,  0x16u);
      }

      uint64_t v21 = 1LL;
    }

    else
    {
      uint64_t v21 = 0LL;
    }
  }

  else
  {
    uint64_t v21 = 1LL;
  }

  return v21;
}

uint64_t sub_100042A2C(uint64_t a1, int a2, void *a3, void *a4, char a5)
{
  id v9 = a3;
  id v10 = a4;
  if (!a1) {
    goto LABEL_8;
  }
  if (![v9 count])
  {
    uint64_t v13 = ne_log_obj(0LL, v11);
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "No mach-O UUIDs available for VPN plugin, cannot install AOVPN control policies",  buf,  2u);
    }

    goto LABEL_8;
  }

  if (*(_DWORD *)(a1 + 8) != 3)
  {
LABEL_8:
    uint64_t v12 = 0LL;
    goto LABEL_9;
  }

  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_100042B64;
  v16[3] = &unk_1000BDF00;
  v16[4] = a1;
  id v17 = v10;
  id v18 = v9;
  int v19 = a2;
  char v20 = a5;
  uint64_t v12 = sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, v16);

LABEL_9:
  return v12;
}

uint64_t sub_100042B64(uint64_t a1, void *a2)
{
  id v4 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 168LL, 1);
  }
  id v6 = (void *)objc_claimAutoreleasedReturnValue([Property objectForKeyedSubscript:*(void *)(a1 + 40)]);
  if (!v6)
  {
    id v7 = v4;
    id v9 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    id v10 = *(id *)(a1 + 32);
    if (v10) {
      id v10 = objc_getProperty(v10, v8, 168LL, 1);
    }
    [v10 setObject:v9 forKeyedSubscript:*(void *)(a1 + 40)];

    id v12 = *(id *)(a1 + 32);
    if (v12) {
      id v12 = objc_getProperty(v12, v11, 168LL, 1);
    }
    id v4 = v7;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:*(void *)(a1 + 40)]);
  }

  uint64_t v13 = ne_log_large_obj();
  uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    id v65 = *(id *)(a1 + 32);
    uint64_t v66 = *(void *)(a1 + 40);
    if (v65) {
      id v65 = objc_getProperty(v65, v15, 64LL, 1);
    }
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v101 = v66;
    __int16 v102 = 2112;
    id v103 = v65;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "control Policy IDs to be removed %@: %@",  buf,  0x16u);
  }

  sub_10002C4C8(v4, v6);
  id v16 = +[NEProcessInfo copyDNSUUIDs](&OBJC_CLASS___NEProcessInfo, "copyDNSUUIDs");
  if (v16)
  {
    id v17 = +[NEProcessInfo copyNEHelperUUIDs](&OBJC_CLASS___NEProcessInfo, "copyNEHelperUUIDs");
    if (v17)
    {
      int v18 = sub_10002EA48(*(void *)(a1 + 32));
      uint64_t v19 = (v18 + 10);
      unsigned int v96 = v18 + 10;
      uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:]( &OBJC_CLASS___NEPolicyResult,  "tunnelIPToInterfaceName:secondaryResultType:",  *(void *)(a1 + 40),  1LL));
      char v20 = sub_1000348A8(*(void *)(a1 + 32), *(void **)(a1 + 40), @"DNSAgent");
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      if (v21) {
        uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](&OBJC_CLASS___NEPolicyResult, "netAgentUUID:", v21));
      }
      else {
        uint64_t v78 = 0LL;
      }
      __int128 v94 = 0u;
      __int128 v95 = 0u;
      __int128 v92 = 0u;
      __int128 v93 = 0u;
      id v23 = *(id *)(a1 + 48);
      id v24 = [v23 countByEnumeratingWithState:&v92 objects:v99 count:16];
      if (v24)
      {
        uint64_t v73 = v16;
        unsigned int v75 = v18 + 5;
        uint64_t v25 = *(void *)v93;
        uint64_t v80 = a1;
        unsigned int v81 = v6;
        id v71 = v21;
        id v72 = v17;
        uint64_t v68 = *(void *)v93;
        while (2)
        {
          uint64_t v26 = 0LL;
          id v69 = v24;
          do
          {
            if (*(void *)v93 != v25) {
              objc_enumerationMutation(v23);
            }
            uint64_t v70 = v26;
            uint64_t v27 = *(void *)(*((void *)&v92 + 1) + 8 * v26);
            id v28 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
            uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  v27));
            -[NSMutableArray addObject:](v28, "addObject:", v29);

            uint64_t v82 = v27;
            uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition realApplication:]( &OBJC_CLASS___NEPolicyCondition,  "realApplication:",  v27));
            -[NSMutableArray addObject:](v28, "addObject:", v30);

            id v31 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
            -[NSMutableArray addObject:](v28, "addObject:", v31);

            id v32 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](&OBJC_CLASS___NEPolicyCondition, "entitlement"));
            -[NSMutableArray addObject:](v28, "addObject:", v32);

            __int128 v33 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectivePID:]( &OBJC_CLASS___NEPolicyCondition,  "effectivePID:",  *(unsigned int *)(a1 + 56)));
            -[NSMutableArray addObject:](v28, "addObject:", v33);

            id v74 = v28;
            id v34 = [[NEPolicy alloc] initWithOrder:v19 result:v83 conditions:v28];
            LODWORD(v2_Block_object_dispose(va, 8) = sub_10002E57C((BOOL)v4, v34, v6);

            if (!(_DWORD)v28) {
              goto LABEL_56;
            }
            if (v78)
            {
              id v35 = [[NEPolicy alloc] initWithOrder:v75 result:v78 conditions:v74];
              sub_10002E57C((BOOL)v4, v35, v6);
            }

            BOOL v36 = (BOOL)v4;
            uint64_t v19 = (v19 + 1);
            __int128 v90 = 0u;
            __int128 v91 = 0u;
            __int128 v88 = 0u;
            __int128 v89 = 0u;
            id v79 = v17;
            id v37 = [v79 countByEnumeratingWithState:&v88 objects:v98 count:16];
            if (v37)
            {
              id v38 = v37;
              uint64_t v39 = *(void *)v89;
              while (2)
              {
                id v40 = 0LL;
                uint64_t v41 = v19;
                do
                {
                  if (*(void *)v89 != v39) {
                    objc_enumerationMutation(v79);
                  }
                  uint64_t v42 = *(void *)(*((void *)&v88 + 1) + 8LL * (void)v40);
                  uint64_t v43 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
                  id v44 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  v82));
                  -[NSMutableArray addObject:](v43, "addObject:", v44);

                  id v45 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition realApplication:]( &OBJC_CLASS___NEPolicyCondition,  "realApplication:",  v42));
                  -[NSMutableArray addObject:](v43, "addObject:", v45);

                  id v46 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
                  -[NSMutableArray addObject:](v43, "addObject:", v46);

                  id v47 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](&OBJC_CLASS___NEPolicyCondition, "entitlement"));
                  -[NSMutableArray addObject:](v43, "addObject:", v47);

                  id v48 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectivePID:]( &OBJC_CLASS___NEPolicyCondition,  "effectivePID:",  *(unsigned int *)(v80 + 56)));
                  -[NSMutableArray addObject:](v43, "addObject:", v48);

                  id v49 = [[NEPolicy alloc] initWithOrder:(char *)v40 + v41 result:v83 conditions:v43];
                  BOOL v50 = sub_10002E57C(v36, v49, v81);

                  if (!v50)
                  {
                    id v4 = (id)v36;
                    id v6 = v81;
                    goto LABEL_55;
                  }

                  id v40 = (char *)v40 + 1;
                }

                while (v38 != v40);
                uint64_t v19 = (v41 + (_DWORD)v40);
                id v38 = [v79 countByEnumeratingWithState:&v88 objects:v98 count:16];
                if (v38) {
                  continue;
                }
                break;
              }
            }

            __int128 v86 = 0u;
            __int128 v87 = 0u;
            __int128 v84 = 0u;
            __int128 v85 = 0u;
            id v79 = v73;
            id v51 = [v79 countByEnumeratingWithState:&v84 objects:v97 count:16];
            if (v51)
            {
              id v52 = v51;
              uint64_t v76 = *(void *)v85;
              id v4 = (id)v36;
              a1 = v80;
              id v6 = v81;
LABEL_35:
              uint64_t v53 = 0LL;
              uint64_t v77 = v19;
              while (1)
              {
                if (*(void *)v85 != v76) {
                  objc_enumerationMutation(v79);
                }
                uint64_t v54 = *(void *)(*((void *)&v84 + 1) + 8 * v53);
                uint64_t v43 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
                unsigned __int8 v55 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  v82));
                -[NSMutableArray addObject:](v43, "addObject:", v55);

                id v56 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition realApplication:]( &OBJC_CLASS___NEPolicyCondition,  "realApplication:",  v54));
                -[NSMutableArray addObject:](v43, "addObject:", v56);

                id v57 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
                -[NSMutableArray addObject:](v43, "addObject:", v57);

                id v58 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](&OBJC_CLASS___NEPolicyCondition, "entitlement"));
                -[NSMutableArray addObject:](v43, "addObject:", v58);

                id v59 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectivePID:]( &OBJC_CLASS___NEPolicyCondition,  "effectivePID:",  *(unsigned int *)(v80 + 56)));
                -[NSMutableArray addObject:](v43, "addObject:", v59);

                id v60 = [[NEPolicy alloc] initWithOrder:v77 + v53 result:v83 conditions:v43];
                BOOL v61 = sub_10002E57C((BOOL)v4, v60, v81);

                if (!v61) {
                  break;
                }
                if (v78)
                {
                  id v62 = [[NEPolicy alloc] initWithOrder:v75 result:v78 conditions:v43];
                  sub_10002E57C((BOOL)v4, v62, v81);
                }

                if (v52 == (id)++v53)
                {
                  uint64_t v19 = (v77 + v53);
                  id v52 = [v79 countByEnumeratingWithState:&v84 objects:v97 count:16];
                  if (v52) {
                    goto LABEL_35;
                  }
                  goto LABEL_45;
                }
              }

uint64_t sub_100043414(uint64_t a1, void *a2)
{
  id v4 = a2;
  unsigned int v107 = 0;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 176LL, 1);
  }
  uint64_t v6 = objc_claimAutoreleasedReturnValue([Property objectForKeyedSubscript:*(void *)(a1 + 40)]);
  id v7 = (void *)v6;
  if (!v6)
  {
    id v9 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    id v10 = *(id *)(a1 + 32);
    if (v10) {
      id v10 = objc_getProperty(v10, v8, 176LL, 1);
    }
    [v10 setObject:v9 forKeyedSubscript:*(void *)(a1 + 40)];

    id v12 = *(id *)(a1 + 32);
    if (v12) {
      id v12 = objc_getProperty(v12, v11, 176LL, 1);
    }
    uint64_t v6 = objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:*(void *)(a1 + 40)]);
    id v7 = (void *)v6;
  }

  uint64_t v13 = ne_log_large_obj(v6);
  uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v93 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v120 = v93;
    __int16 v121 = 2112;
    __int128 v122 = v7;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "Policy IDs to be removed %@: %@",  buf,  0x16u);
  }

  sub_10002C4C8(v4, v7);
  id v16 = *(void **)(a1 + 32);
  if (v16 && objc_getProperty(v16, v15, 16LL, 1))
  {
    id v17 = *(void **)(a1 + 32);
    int v18 = sub_10002EA48((uint64_t)v17);
    int v20 = v18;
    if (*(_BYTE *)(a1 + 80))
    {
      sub_10002C348(v17, *(void **)(a1 + 40), v4);
    }

    else
    {
      unsigned int v107 = v18 + 50;
      if (v4) {
        id v22 = objc_getProperty(v4, v19, 16LL, 1);
      }
      else {
        id v22 = 0LL;
      }
      id v23 = v22;
      id v24 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", 0LL));
      BOOL v25 = sub_1000549EC((BOOL)v23, &v107, v24, v7);

      if (!v25)
      {
        uint64_t v28 = ne_log_obj(v26, v27);
        uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_error_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_ERROR,  "Failed to add icmpv6 exception for data",  buf,  2u);
        }
      }

      if (v4) {
        id v30 = objc_getProperty(v4, v27, 16LL, 1);
      }
      else {
        id v30 = 0LL;
      }
      uint64_t v31 = sub_100055BA4(v30, &v107, *(void *)(a1 + 64), 0, 1, v7);
      if ((v31 & 1) == 0)
      {
        uint64_t v33 = ne_log_obj(v31, v32);
        id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_error_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_ERROR,  "Failed to add VoiceMail exception for data",  buf,  2u);
        }
      }

      if (v4) {
        id v35 = objc_getProperty(v4, v32, 16LL, 1);
      }
      else {
        id v35 = 0LL;
      }
      uint64_t v36 = sub_100058490(v35, &v107, *(void *)(a1 + 72), *(void **)(a1 + 40), 1, v7);
      if ((v36 & 1) == 0)
      {
        uint64_t v38 = ne_log_obj(v36, v37);
        uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_error_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_ERROR,  "Failed to add CellularServices exception for data",  buf,  2u);
        }
      }

      uint64_t v40 = sub_100043F54(*(_DWORD **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48), 1, v4);
      if ((v40 & 1) == 0)
      {
        uint64_t v42 = ne_log_obj(v40, v41);
        uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_error_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_ERROR,  "Failed to add Application exceptions for data",  buf,  2u);
        }
      }
    }

    if (*(_BYTE *)(a1 + 81))
    {
      id v44 = sub_1000348A8(*(void *)(a1 + 32), *(void **)(a1 + 56), @"ProxyAgent");
      id v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
    }

    else
    {
      id v45 = 0LL;
    }

    if (*(_BYTE *)(a1 + 82))
    {
      id v46 = sub_1000348A8(*(void *)(a1 + 32), *(void **)(a1 + 56), @"DNSAgent");
      uint64_t v47 = objc_claimAutoreleasedReturnValue(v46);
      if (v47)
      {
        uint64_t v104 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](&OBJC_CLASS___NEPolicyResult, "netAgentUUID:", v47));
        if (!v45) {
          goto LABEL_48;
        }
LABEL_46:
        uint64_t v48 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](&OBJC_CLASS___NEPolicyResult, "netAgentUUID:", v45));
        goto LABEL_49;
      }

      uint64_t v104 = 0LL;
      if (v45) {
        goto LABEL_46;
      }
    }

    else
    {
      uint64_t v104 = 0LL;
      uint64_t v47 = 0LL;
      if (v45) {
        goto LABEL_46;
      }
    }

LABEL_48:
    uint64_t v48 = 0LL;
LABEL_49:
    id v106 = (void *)v48;
    id v103 = (void *)v47;
    unsigned int v100 = v20 + 205;
    unsigned int v101 = v20 + 210;
    id v49 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult tunnelIPToInterfaceName:secondaryResultType:]( &OBJC_CLASS___NEPolicyResult,  "tunnelIPToInterfaceName:secondaryResultType:",  *(void *)(a1 + 56),  1LL));
    uint64_t v50 = objc_claimAutoreleasedReturnValue( +[NEPolicyResult scopeSocketToInterfaceName:]( &OBJC_CLASS___NEPolicyResult,  "scopeSocketToInterfaceName:",  *(void *)(a1 + 56)));
    uint64_t v105 = (void *)v50;
    if (*(_BYTE *)(a1 + 80))
    {
      uint64_t v51 = v50;
      __int16 v102 = v45;
      unsigned int v107 = v20 + 215;
      id v52 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition scopedInterface:]( &OBJC_CLASS___NEPolicyCondition,  "scopedInterface:",  *(void *)(a1 + 56)));
      uint64_t v118 = v52;
      uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v118, 1LL));

      uint64_t v54 = v49;
      id v55 = [[NEPolicy alloc] initWithOrder:(v20 + 215) result:v49 conditions:v53];
      LODWORD(v52) = sub_10002E57C((BOOL)v4, v55, v7);

      if ((_DWORD)v52)
      {
        unsigned int v107 = v20 + 220;
        id v56 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition scopedInterface:]( &OBJC_CLASS___NEPolicyCondition,  "scopedInterface:",  *(void *)(a1 + 40)));
        id v117 = v56;
        uint64_t v57 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v117, 1LL));

        id v58 = [[NEPolicy alloc] initWithOrder:(v20 + 220) result:v51 conditions:v57];
        BOOL v59 = sub_10002E57C((BOOL)v4, v58, v7);

        if (v59)
        {
          uint64_t v99 = (void *)v57;
          id v60 = (void *)v104;
          id v49 = v54;
          if (v104)
          {
            id v61 = objc_alloc(&OBJC_CLASS___NEPolicy);
            id v62 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition scopedInterface:]( &OBJC_CLASS___NEPolicyCondition,  "scopedInterface:",  *(void *)(a1 + 56)));
            id v116 = v62;
            uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v116,  1LL));
            id v64 = [v61 initWithOrder:v100 result:v104 conditions:v63];
            sub_10002E57C((BOOL)v4, v64, v7);
          }

          id v45 = v102;
          if (v106)
          {
            id v65 = objc_alloc(&OBJC_CLASS___NEPolicy);
            uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition scopedInterface:]( &OBJC_CLASS___NEPolicyCondition,  "scopedInterface:",  *(void *)(a1 + 56)));
            id v115 = v66;
            uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v115,  1LL));
            id v68 = [v65 initWithOrder:v101 result:v106 conditions:v67];
            sub_10002E57C((BOOL)v4, v68, v7);
          }

          if (v104)
          {
            id v69 = objc_alloc(&OBJC_CLASS___NEPolicy);
            uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition scopedInterface:]( &OBJC_CLASS___NEPolicyCondition,  "scopedInterface:",  *(void *)(a1 + 40)));
            unsigned int v114 = v70;
            id v71 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v114,  1LL));
            id v72 = [v69 initWithOrder:v100 result:v104 conditions:v71];
            sub_10002E57C((BOOL)v4, v72, v7);
          }

          uint64_t v73 = v106;
          if (v106)
          {
            id v74 = objc_alloc(&OBJC_CLASS___NEPolicy);
            unsigned int v75 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition scopedInterface:]( &OBJC_CLASS___NEPolicyCondition,  "scopedInterface:",  *(void *)(a1 + 40)));
            uint64_t v113 = v75;
            uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v113,  1LL));
            id v77 = [v74 initWithOrder:v101 result:v106 conditions:v76];
            uint64_t v53 = v99;
LABEL_67:
            sub_10002E57C((BOOL)v4, v77, v7);

            __int128 v92 = v103;
            id v60 = (void *)v104;
            uint64_t v73 = v106;
            goto LABEL_76;
          }

          uint64_t v53 = v99;
          goto LABEL_75;
        }

        uint64_t v21 = 0LL;
        uint64_t v53 = (void *)v57;
      }

      else
      {
        uint64_t v21 = 0LL;
      }

      __int128 v92 = v103;
      id v60 = (void *)v104;
      uint64_t v73 = v106;
      id v49 = v54;
      id v45 = v102;
LABEL_81:

      goto LABEL_82;
    }

    unsigned int v107 = v20 + 225;
    uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition scopedInterface:]( &OBJC_CLASS___NEPolicyCondition,  "scopedInterface:",  *(void *)(a1 + 56)));
    uint64_t v112 = v78;
    uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v112, 1LL));

    id v79 = [[NEPolicy alloc] initWithOrder:(v20 + 225) result:v49 conditions:v53];
    LODWORD(v7_Block_object_dispose(va, 8) = sub_10002E57C((BOOL)v4, v79, v7);

    if ((_DWORD)v78)
    {
      unsigned int v107 = v20 + 230;
      uint64_t v80 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition scopedInterface:]( &OBJC_CLASS___NEPolicyCondition,  "scopedInterface:",  *(void *)(a1 + 40)));
      uint64_t v111 = v80;
      unsigned int v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v111, 1LL));

      id v82 = [[NEPolicy alloc] initWithOrder:(v20 + 230) result:v105 conditions:v81];
      BOOL v83 = sub_10002E57C((BOOL)v4, v82, v7);

      if (!v83)
      {
        uint64_t v21 = 0LL;
        uint64_t v53 = v81;
        goto LABEL_73;
      }

      unsigned int v107 = v20 + 235;
      __int128 v84 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
      uint64_t v110 = v84;
      uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v110, 1LL));

      id v85 = [[NEPolicy alloc] initWithOrder:(v20 + 235) result:v49 conditions:v53];
      BOOL v86 = sub_10002E57C((BOOL)v4, v85, v7);

      if (v86)
      {
        id v60 = (void *)v104;
        if (v104)
        {
          id v87 = objc_alloc(&OBJC_CLASS___NEPolicy);
          __int128 v88 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
          id v109 = v88;
          __int128 v89 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v109,  1LL));
          id v90 = [v87 initWithOrder:v100 result:v104 conditions:v89];
          sub_10002E57C((BOOL)v4, v90, v7);
        }

        uint64_t v73 = v106;
        if (v106)
        {
          id v91 = objc_alloc(&OBJC_CLASS___NEPolicy);
          unsigned int v75 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
          uint64_t v108 = v75;
          uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v108,  1LL));
          id v77 = [v91 initWithOrder:v101 result:v106 conditions:v76];
          goto LABEL_67;
        }
    }

    else
    {
      id v60 = 0;
      id v17 = v107;
    }

    if ((v60 & 1) == 0)
    {
      unsigned int v100 = ne_log_obj(v63, v64);
      unsigned int v101 = (os_log_s *)objc_claimAutoreleasedReturnValue(v100);
      id v23 = v115;
      if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
      {
        __int128 buf = 136315650;
        id v143 = "-[NEPolicySession(AlwaysOnVPN) addAllowedCaptiveNetworkPluginsWithResult:order:allowCaptiveWebSheet:allow"
               "AllCaptiveNetworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyIDList:incrementOrder:checkEntitlement:]";
        id v144 = 2112;
        id v145 = v46;
        uint64_t v146 = 2112;
        SEL v147 = @"com.apple.WebSheet";
        _os_log_error_impl( (void *)&_mh_execute_header,  v101,  OS_LOG_TYPE_ERROR,  "%s: Failed to add %@ com.apple.WebKit.Networking policy for %@",  (uint8_t *)&buf,  0x20u);
      }

      id v130 = 0;
      uint64_t v36 = v127;
      id v35 = v122;
      goto LABEL_44;
    }

    id v23 = v115;
    id v24 = a10;
    a8 = v105;
LABEL_51:
    if ((a5 & 1) != 0 || v17 && (uint64_t v19 = (__CFString *)[v17 count]) != 0)
    {
      if (v16)
      {
        id v65 = v16;
        uint64_t v66 = v17;
        uint64_t v112 = v18;
        uint64_t v67 = v18;
        id v106 = v21;
        id obja = v67;
        if (!v67) {
          id obja = (__CFString *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](&OBJC_CLASS___NEPolicyResult, "pass"));
        }
        id v116 = v23;
        uint64_t v110 = v21;
        __int128 v124 = v24;
        if (a8)
        {
          id v68 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", &unk_10009E7AB);
          id v69 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult removeNetworkAgentUUID:]( &OBJC_CLASS___NEPolicyResult,  "removeNetworkAgentUUID:",  v68));
        }

        else
        {
          id v69 = 0LL;
        }

        id v74 = v106;
        id v137 = 0u;
        __int128 v138 = 0u;
        uint64_t v135 = 0u;
        id v136 = 0u;
        unsigned int v75 = v65;
        uint64_t v76 = [v75 countByEnumeratingWithState:&v135 objects:&buf count:16];
        id v77 = obja;
        if (v76)
        {
          uint64_t v78 = v76;
          uint64_t v108 = v17;
          __int128 v119 = v16;
          id v79 = 0LL;
          id v128 = *(void *)v136;
          uint64_t v80 = v75;
          __int16 v121 = v66;
          __int128 v123 = v75;
          while (2)
          {
            for (j = 0LL; j != v78; j = (char *)j + 1)
            {
              id v82 = v79;
              if (*(void *)v136 != v128) {
                objc_enumerationMutation(v80);
              }
              id v79 = *(id *)(*((void *)&v135 + 1) + 8LL * (void)j);

              if ((a5 & 1) == 0)
              {
                if (!v66) {
                  continue;
                }
                BOOL v83 = (void *)objc_claimAutoreleasedReturnValue([v66 objectForKeyedSubscript:v79]);

                if (!v83) {
                  continue;
                }
              }

              __int128 v84 = +[NEProcessInfo copyUUIDsForBundleID:uid:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForBundleID:uid:",  v79,  0LL);
              BOOL v86 = v84;
              if (v84 && (__int128 v84 = [v84 count]) != 0)
              {
                id v87 = ne_log_obj(v84, v85);
                __int128 v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(v87);
                if (os_log_type_enabled(v88, OS_LOG_TYPE_INFO))
                {
                  LODWORD(v139[0]) = 136315906;
                  *(void *)((char *)v139 + 4) = "-[NEPolicySession(AlwaysOnVPN) addRegisteredCNP:order:allowAllCaptiveN"
                                                  "etworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyIDList"
                                                  ":incrementOrder:]";
                  WORD2(v139[1]) = 2112;
                  *(void *)((char *)&v139[1] + 6) = obja;
                  HIWORD(v139[2]) = 2112;
                  v139[3] = v79;
                  LOWORD(v140) = 2112;
                  *(void *)((char *)&v140 + 2) = v86;
                  _os_log_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_INFO,  "%s: Adding %@ policy for %@, UUIDs %@",  (uint8_t *)v139,  0x2Au);
                }

                __int128 v89 = sub_100054464(v125, a3, v124, 0LL, v86, 1, 0LL, 0, 0LL, 0, 0LL, obja, v69, 0, v106);
                if ((v89 & 1) == 0)
                {
                  uint64_t v95 = ne_log_obj(v89, v90);
                  uint64_t v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(v95);
                  if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(v139[0]) = 136315650;
                    *(void *)((char *)v139 + 4) = "-[NEPolicySession(AlwaysOnVPN) addRegisteredCNP:order:allowAllCaptiv"
                                                    "eNetworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyID"
                                                    "List:incrementOrder:]";
                    WORD2(v139[1]) = 2112;
                    id v77 = obja;
                    *(void *)((char *)&v139[1] + 6) = obja;
                    HIWORD(v139[2]) = 2112;
                    v139[3] = v79;
                    _os_log_error_impl( (void *)&_mh_execute_header,  v97,  OS_LOG_TYPE_ERROR,  "%s: Failed to add %@ policy for %@",  (uint8_t *)v139,  0x20u);
                    id v16 = v119;
                    id v23 = v116;
                  }

                  else
                  {
                    id v16 = v119;
                    id v77 = obja;
                    id v23 = v116;
                  }

                  uint64_t v66 = v121;
                  id v74 = v106;
LABEL_93:

                  LOBYTE(v139[0]) = 0;
                  unsigned int v75 = v123;

                  id v17 = v108;
                  goto LABEL_94;
                }

                id v91 = sub_100054464( v125,  a3,  v124,  0LL,  v86,  0,  @"com.apple.developer.networking.HotspotHelper",  0,  0LL,  0,  0LL,  obja,  v69,  0,  v106);
                uint64_t v66 = v121;
                uint64_t v80 = v123;
                if ((v91 & 1) == 0)
                {
                  unsigned int v96 = ne_log_obj(v91, v92);
                  uint64_t v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(v96);
                  if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
                  {
                    LODWORD(v139[0]) = 136315650;
                    *(void *)((char *)v139 + 4) = "-[NEPolicySession(AlwaysOnVPN) addRegisteredCNP:order:allowAllCaptiv"
                                                    "eNetworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyID"
                                                    "List:incrementOrder:]";
                    WORD2(v139[1]) = 2112;
                    *(void *)((char *)&v139[1] + 6) = obja;
                    HIWORD(v139[2]) = 2112;
                    v139[3] = v79;
                    _os_log_error_impl( (void *)&_mh_execute_header,  v97,  OS_LOG_TYPE_ERROR,  "%s: Failed to add %@ policy (custom captive entitlement) for %@",  (uint8_t *)v139,  0x20u);
                  }

                  id v16 = v119;
                  id v23 = v116;
                  goto LABEL_93;
                }
              }

              else
              {
                uint64_t v93 = ne_log_obj(v84, v85);
                uint64_t v94 = (os_log_s *)objc_claimAutoreleasedReturnValue(v93);
                if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
                {
                  LODWORD(v139[0]) = 136315394;
                  *(void *)((char *)v139 + 4) = "-[NEPolicySession(AlwaysOnVPN) addRegisteredCNP:order:allowAllCaptiveN"
                                                  "etworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyIDList"
                                                  ":incrementOrder:]";
                  WORD2(v139[1]) = 2112;
                  *(void *)((char *)&v139[1] + 6) = v79;
                  _os_log_debug_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_DEBUG,  "%s: Plugin %@ does not exist, may have been uninstalled",  (uint8_t *)v139,  0x16u);
                }
              }
            }

            uint64_t v78 = [v80 countByEnumeratingWithState:&v135 objects:&buf count:16];
            if (v78) {
              continue;
            }
            break;
          }

          id v16 = v119;
          unsigned int v75 = v80;
          id v17 = v108;
        }

        LOBYTE(v139[0]) = 1;
        id v23 = v116;
LABEL_94:

        id v130 = (v139[0] & 1) != 0;
        uint64_t v21 = v110;
        int v18 = v112;
        goto LABEL_95;
      }

      uint64_t v73 = ne_log_obj(v19, v20);
      id v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
      if (!os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_62;
      }
      __int128 buf = 136315138;
      id v143 = "-[NEPolicySession(AlwaysOnVPN) addAllowedCaptiveNetworkPluginsWithResult:order:allowCaptiveWebSheet:allowAl"
             "lCaptiveNetworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyIDList:incrementOrder:checkEntitlement:]";
      id v72 = "%s: No registered Captive Network Plugins";
    }

    else
    {
      uint64_t v70 = ne_log_obj(v19, v20);
      id v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
      if (!os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
      {
LABEL_62:

        id v130 = 1;
        goto LABEL_95;
      }

      __int128 buf = 136315138;
      id v143 = "-[NEPolicySession(AlwaysOnVPN) addAllowedCaptiveNetworkPluginsWithResult:order:allowCaptiveWebSheet:allowAl"
             "lCaptiveNetworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyIDList:incrementOrder:checkEntitlement:]";
      id v72 = "%s: No configuration for Captive Plugins";
    }

    _os_log_debug_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEBUG, v72, (uint8_t *)&buf, 0xCu);
    goto LABEL_62;
  }

LABEL_75:
        __int128 v92 = v103;
LABEL_76:
        uint64_t v94 = sub_10002C620(v4);
        if ((_DWORD)v94)
        {
          uint64_t v95 = ne_log_large_obj(v94);
          unsigned int v96 = (os_log_s *)objc_claimAutoreleasedReturnValue(v95);
          if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v98 = *(void *)(a1 + 40);
            *(_DWORD *)__int128 buf = 138412546;
            uint64_t v120 = v98;
            __int16 v121 = 2112;
            __int128 v122 = v7;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v96,  OS_LOG_TYPE_DEBUG,  "Policy IDs added %@: %@",  buf,  0x16u);
          }

          uint64_t v21 = 1LL;
        }

        else
        {
          uint64_t v21 = 0LL;
        }

        goto LABEL_81;
      }
    }

    uint64_t v21 = 0LL;
LABEL_73:
    __int128 v92 = v103;
    id v60 = (void *)v104;
    uint64_t v73 = v106;
    goto LABEL_81;
  }

  uint64_t v21 = 0LL;
LABEL_82:

  return v21;
}

uint64_t sub_100043F54(_DWORD *a1, void *a2, void *a3, int a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  id v12 = v11;
  uint64_t v13 = 0LL;
  if (a1 && v11)
  {
    if (isa_nsstring(v9) && a1[2] == 3)
    {
      id v15 = objc_msgSend(objc_getProperty(a1, v14, 216, 1), "objectForKeyedSubscript:", v9);
      id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      if (!v16)
      {
        id v17 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        objc_msgSend(objc_getProperty(a1, v18, 216, 1), "setObject:forKeyedSubscript:", v17, v9);

        id v20 = objc_msgSend(objc_getProperty(a1, v19, 216, 1), "objectForKeyedSubscript:", v9);
        id v16 = (void *)objc_claimAutoreleasedReturnValue(v20);
      }

      uint64_t v21 = ne_log_large_obj();
      id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 138412546;
        id v34 = v9;
        __int16 v35 = 2112;
        uint64_t v36 = v16;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "Application Exception Tunnel Policy IDs to be removed %@: %@",  buf,  0x16u);
      }

      sub_10002C4C8(v12, v16);
      if (v10
        && [v10 count]
        && (*(_DWORD *)__int128 buf = sub_10002EA48((uint64_t)a1) + 170,
            id Property = objc_getProperty(v12, v23, 16LL, 1),
            uint64_t v25 = sub_100056200(Property, (unsigned int *)buf, v10, v9, 200LL, a4, v16),
            (v25 & 1) == 0))
      {
        uint64_t v29 = ne_log_obj(v25, v26);
        id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)id v32 = 0;
          _os_log_error_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "Failed to add application exceptions",  v32,  2u);
        }
      }

      else if (sub_10002C620(v12))
      {
        uint64_t v27 = ne_log_large_obj();
        uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = 138412546;
          id v34 = v9;
          __int16 v35 = 2112;
          uint64_t v36 = v16;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "Application Exception Tunnel Policy IDs added %@: %@",  buf,  0x16u);
        }

        uint64_t v13 = 1LL;
        goto LABEL_21;
      }

      uint64_t v13 = 0LL;
LABEL_21:

      goto LABEL_22;
    }

    uint64_t v13 = 0LL;
  }

uint64_t sub_100044210(uint64_t a1, void *a2)
{
  return sub_100043F54( *(_DWORD **)(a1 + 32),  *(void **)(a1 + 40),  *(void **)(a1 + 48),  *(unsigned __int8 *)(a1 + 56),  a2);
}

uint64_t sub_100044228(uint64_t a1, void *a2, int a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a4;
  id v13 = a5;
  id v14 = a6;
  if (a1 && *(_DWORD *)(a1 + 8) == 6)
  {
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_100044348;
    v17[3] = &unk_1000BDF78;
    id v18 = v11;
    uint64_t v19 = a1;
    id v20 = v12;
    id v21 = v13;
    int v23 = a3;
    id v22 = v14;
    uint64_t v15 = sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, v17);
  }

  else
  {
    uint64_t v15 = 0LL;
  }

  return v15;
}

uint64_t sub_100044348(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (*(void *)(a1 + 32))
  {
    uint64_t v6 = sub_10002EA48(*(void *)(a1 + 40));
    int v7 = v6;
    uint64_t v8 = ne_log_large_obj(v6);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      id Property = *(id *)(a1 + 40);
      if (Property) {
        id Property = objc_getProperty(Property, v10, 48LL, 1);
      }
      *(_DWORD *)__int128 buf = 136315394;
      id v206 = "-[NESMPolicySession setPoliciesForDNSProxyProcess:withFlowDivertControlUnit:captiveNetworkPluginBundleIDs:l"
             "imitToProcess:perApp:]_block_invoke";
      __int16 v207 = 2112;
      id v208 = Property;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "%s: Policy IDs to be removed: %@",  buf,  0x16u);
    }

    id v12 = *(void **)(a1 + 40);
    if (v12) {
      id v13 = objc_getProperty(v12, v11, 48LL, 1);
    }
    else {
      id v13 = 0LL;
    }
    sub_10002C4C8(v5, v13);
    uint64_t v15 = *(void **)(a1 + 40);
    if (v15) {
      id v16 = objc_getProperty(v15, v14, 56LL, 1);
    }
    else {
      id v16 = 0LL;
    }
    sub_10002D64C(v5, v16);
    os_log_t v180 = (os_log_t)objc_claimAutoreleasedReturnValue( +[NEPolicyResult skipWithOrder:]( &OBJC_CLASS___NEPolicyResult,  "skipWithOrder:",  (v7 + 150)));
    unsigned int v195 = v7 + 20;
    id v18 = +[NEProcessInfo copyUUIDsForExecutable:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForExecutable:",  @"/usr/libexec/captiveagent");
    if (v18)
    {
      if (v5) {
        id v19 = objc_getProperty(v5, v17, 16LL, 1);
      }
      else {
        id v19 = 0LL;
      }
      id v21 = v19;
      id v22 = *(id *)(a1 + 40);
      if (v22) {
        id v22 = objc_getProperty(v22, v20, 48LL, 1);
      }
      char v23 = sub_100054464(v21, &v195, 0, 0LL, v18, 0, 0LL, 0, 0LL, 1, 0LL, v180, 0LL, 0, v22);

      if ((v23 & 1) != 0)
      {
        if (v5) {
          id v26 = objc_getProperty(v5, v25, 16LL, 1);
        }
        else {
          id v26 = 0LL;
        }
        id v28 = v26;
        id v29 = *(id *)(a1 + 40);
        id v30 = *(void **)(a1 + 48);
        if (v29) {
          id v29 = objc_getProperty(v29, v27, 48LL, 1);
        }
        BOOL v31 = sub_10005856C(v28, v30, &v195, 1, 1, 0LL, v180, 0, v29, 0, 0);

        if (v31)
        {
          id v175 = v18;
          uint64_t v34 = (v7 + 120);
          int v170 = v7;
          uint64_t v35 = (v7 + 130);
          uint64_t v36 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
          uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue( +[NWAddressEndpoint endpointWithHostname:port:]( &OBJC_CLASS___NWAddressEndpoint,  "endpointWithHostname:port:",  @"0.0.0.0",  @"53"));
          uint64_t v38 = objc_claimAutoreleasedReturnValue( +[NEPolicyCondition remoteAddress:prefix:]( &OBJC_CLASS___NEPolicyCondition,  "remoteAddress:prefix:",  v37,  0LL));

          uint64_t v39 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", v35));
          id v40 = objc_alloc(&OBJC_CLASS___NEPolicy);
          log = (os_log_s *)v36;
          v204[0] = v36;
          v204[1] = v38;
          uint64_t v41 = v39;
          id v173 = (void *)v38;
          uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v204,  2LL));
          id v43 = [v40 initWithOrder:v34 result:v41 conditions:v42];

          id v45 = *(void **)(a1 + 40);
          if (v45) {
            id v46 = objc_getProperty(v45, v44, 48LL, 1);
          }
          else {
            id v46 = 0LL;
          }
          uint64_t v169 = v43;
          sub_10002E57C((BOOL)v5, v43, v46);
          uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue( +[NWAddressEndpoint endpointWithHostname:port:]( &OBJC_CLASS___NWAddressEndpoint,  "endpointWithHostname:port:",  @"::",  @"53"));
          uint64_t v48 = objc_claimAutoreleasedReturnValue( +[NEPolicyCondition remoteAddress:prefix:]( &OBJC_CLASS___NEPolicyCondition,  "remoteAddress:prefix:",  v47,  0LL));

          id v49 = objc_alloc(&OBJC_CLASS___NEPolicy);
          v203[0] = log;
          v203[1] = v48;
          uint64_t v168 = (void *)v48;
          uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v203,  2LL));
          id v51 = [v49 initWithOrder:v34 result:v41 conditions:v50];

          uint64_t v53 = *(void **)(a1 + 40);
          if (v53) {
            id v54 = objc_getProperty(v53, v52, 48LL, 1);
          }
          else {
            id v54 = 0LL;
          }
          sub_10002E57C((BOOL)v5, v51, v54);
          id v55 = objc_alloc(&OBJC_CLASS___NEPolicy);
          uint64_t v202 = log;
          id v56 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v202,  1LL));
          id v57 = [v55 initWithOrder:v34 result:v180 conditions:v56];

          BOOL v59 = *(void **)(a1 + 40);
          __int128 v172 = (void *)v41;
          if (v59) {
            id v60 = objc_getProperty(v59, v58, 48LL, 1);
          }
          else {
            id v60 = 0LL;
          }
          id v166 = v57;
          id v167 = v51;
          sub_10002E57C((BOOL)v5, v57, v60);
          id v61 = v5;
          if (!*(void *)(a1 + 56) && *(void *)(a1 + 32))
          {
            id v62 = objc_alloc(&OBJC_CLASS___NSArray);
            id obja = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uuid]);
            uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  obja));
            id v64 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectivePID:version:]( NEPolicyCondition,  "effectivePID:version:",  [*(id *)(a1 + 32) pid],  objc_msgSend(*(id *)(a1 + 32), "pidVersion")));
            id v65 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition delegateIsPlatformBinary]( &OBJC_CLASS___NEPolicyCondition,  "delegateIsPlatformBinary"));
            uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
            uint64_t v67 = -[NSArray initWithObjects:](v62, "initWithObjects:", v63, v64, v65, v66, 0LL);

            id v69 = [[NEPolicy alloc] initWithOrder:v35 result:v180 conditions:v67];
            uint64_t v70 = *(void **)(a1 + 40);
            if (v70) {
              id v71 = objc_getProperty(v70, v68, 48LL, 1);
            }
            else {
              id v71 = 0LL;
            }
            sub_10002E57C((BOOL)v61, v69, v71);
            char v72 = 1;
            do
            {
              char v73 = v72;
              if ((v72 & 1) != 0) {
                unsigned int v74 = 10000;
              }
              else {
                unsigned int v74 = 15500;
              }
              if (*(void *)(a1 + 40)) {
                uint64_t v75 = v74;
              }
              else {
                uint64_t v75 = 0LL;
              }
              uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult skipWithOrder:]( &OBJC_CLASS___NEPolicyResult,  "skipWithOrder:",  (v75 + 800)));
              id v78 = [[NEPolicy alloc] initWithOrder:v75 result:v76 conditions:v67];
              id v79 = *(void **)(a1 + 40);
              if (v79) {
                id v80 = objc_getProperty(v79, v77, 48LL, 1);
              }
              else {
                id v80 = 0LL;
              }
              sub_10002E57C((BOOL)v61, v78, v80);

              char v72 = 0;
            }

            while ((v73 & 1) != 0);
          }

          __int128 v89 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
          uint64_t isKindOfClass = NEResourcesCopyContentFilterExclusionList();
          id v91 = (_UNKNOWN **)isKindOfClass;
          if (!isKindOfClass
            || (uint64_t v92 = objc_opt_class(&OBJC_CLASS___NSArray),
                uint64_t isKindOfClass = objc_opt_isKindOfClass(v91, v92),
                (isKindOfClass & 1) == 0))
          {
            uint64_t v93 = ne_log_large_obj(isKindOfClass);
            uint64_t v94 = (os_log_s *)objc_claimAutoreleasedReturnValue(v93);
            if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
            {
              id v162 = *(id *)(a1 + 40);
              if (v162) {
                id v162 = objc_getProperty(v162, v95, 48LL, 1);
              }
              *(_DWORD *)__int128 buf = 138412290;
              id v206 = (const char *)v162;
              _os_log_error_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_ERROR,  "Content filter exclusion list not found: %@",  buf,  0xCu);
            }

            id v91 = &off_1000C16B0;
          }

          __int128 v193 = 0u;
          __int128 v194 = 0u;
          __int128 v191 = 0u;
          __int128 v192 = 0u;
          id obj = v91;
          id v96 = [obj countByEnumeratingWithState:&v191 objects:v201 count:16];
          if (v96)
          {
            id v97 = v96;
            uint64_t v98 = *(void *)v192;
            do
            {
              for (id i = 0LL; i != v97; id i = (char *)i + 1)
              {
                if (*(void *)v192 != v98) {
                  objc_enumerationMutation(obj);
                }
                unsigned int v100 = *(void **)(*((void *)&v191 + 1) + 8LL * (void)i);
                if (([v100 isEqualToString:@"/usr/sbin/mDNSResponder"] & 1) == 0)
                {
                  id v101 = +[NEProcessInfo copyUUIDsForExecutable:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForExecutable:",  v100);
                  __int16 v102 = v101;
                  if (v101 && [v101 count]) {
                    -[NSMutableArray addObjectsFromArray:](v89, "addObjectsFromArray:", v102);
                  }
                }
              }

              id v97 = [obj countByEnumeratingWithState:&v191 objects:v201 count:16];
            }

            while (v97);
          }

          __int128 v189 = 0u;
          __int128 v190 = 0u;
          __int128 v187 = 0u;
          __int128 v188 = 0u;
          id v103 = v89;
          id v104 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v103,  "countByEnumeratingWithState:objects:count:",  &v187,  v200,  16LL);
          if (v104)
          {
            id v105 = v104;
            uint64_t v106 = *(void *)v188;
            do
            {
              unsigned int v107 = 0LL;
              do
              {
                if (*(void *)v188 != v106) {
                  objc_enumerationMutation(v103);
                }
                uint64_t v108 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  *(void *)(*((void *)&v187 + 1) + 8LL * (void)v107)));
                id v109 = objc_alloc(&OBJC_CLASS___NEPolicy);
                v199[0] = log;
                v199[1] = v108;
                uint64_t v110 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v199,  2LL));
                id v111 = [v109 initWithOrder:v35 result:v180 conditions:v110];

                uint64_t v113 = *(void **)(a1 + 40);
                if (v113) {
                  id v114 = objc_getProperty(v113, v112, 48LL, 1);
                }
                else {
                  id v114 = 0LL;
                }
                sub_10002E57C((BOOL)v61, v111, v114);

                unsigned int v107 = (char *)v107 + 1;
              }

              while (v105 != v107);
              id v115 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v103,  "countByEnumeratingWithState:objects:count:",  &v187,  v200,  16LL);
              id v105 = v115;
            }

            while (v115);
          }

          uint64_t v116 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](&OBJC_CLASS___NEPolicyCondition, "domain:", @"ipv4only.arpa"));
          id v117 = objc_alloc(&OBJC_CLASS___NEPolicy);
          v198[0] = log;
          v198[1] = v116;
          uint64_t v118 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v198,  2LL));
          id v119 = [v117 initWithOrder:v35 result:v180 conditions:v118];

          __int16 v121 = *(void **)(a1 + 40);
          if (v121) {
            id v122 = objc_getProperty(v121, v120, 48LL, 1);
          }
          else {
            id v122 = 0LL;
          }
          __int128 v123 = v61;
          id v18 = v175;
          id v164 = v119;
          sub_10002E57C((BOOL)v61, v119, v122);
          __int128 v124 = -[NSMutableArray initWithObjects:]( objc_alloc(&OBJC_CLASS___NSMutableArray),  "initWithObjects:",  log,  0LL);
          __int128 v125 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition uid:](&OBJC_CLASS___NEPolicyCondition, "uid:", 0LL));
          [v125 setNegative:1];
          id v176 = v124;
          id v163 = v125;
          -[NSMutableArray addObject:](v124, "addObject:", v125);
          id v174 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult divertSocketToControlUnit:]( &OBJC_CLASS___NEPolicyResult,  "divertSocketToControlUnit:",  *(unsigned int *)(a1 + 72)));
          uint64_t v126 = *(void *)(a1 + 64);
          uint64_t v128 = ne_log_obj(v174, v127);
          SEL v129 = (os_log_s *)objc_claimAutoreleasedReturnValue(v128);
          BOOL v130 = os_log_type_enabled(v129, OS_LOG_TYPE_DEBUG);
          id v165 = (void *)v116;
          if (v126)
          {
            if (v130)
            {
              *(_DWORD *)__int128 buf = 136315138;
              id v206 = "-[NESMPolicySession setPoliciesForDNSProxyProcess:withFlowDivertControlUnit:captiveNetworkPluginBun"
                     "dleIDs:limitToProcess:perApp:]_block_invoke";
              _os_log_debug_impl( (void *)&_mh_execute_header,  v129,  OS_LOG_TYPE_DEBUG,  "%s: Installing perApp DNSProxy policies",  buf,  0xCu);
            }

            uint64_t v131 = *(void *)(a1 + 40);
            id v132 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) appRules]);
            v181[0] = _NSConcreteStackBlock;
            v181[1] = 3221225472LL;
            v181[2] = sub_10004527C;
            v181[3] = &unk_1000BDD70;
            id v133 = v176;
            id v182 = v176;
            id v183 = v61;
            int v186 = v170 + 140;
            id v134 = v174;
            id v135 = v174;
            uint64_t v136 = *(void *)(a1 + 40);
            id v184 = v135;
            uint64_t v185 = v136;
            sub_1000320B0(v131, v132, 0, 1, 0LL, 0LL, v183, v181, 0LL);

            id v137 = v182;
            uint64_t v139 = v172;
            __int128 v138 = v173;
            uint64_t v140 = v168;
            SEL v141 = v164;
          }

          else
          {
            if (v130)
            {
              *(_DWORD *)__int128 buf = 136315138;
              id v206 = "-[NESMPolicySession setPoliciesForDNSProxyProcess:withFlowDivertControlUnit:captiveNetworkPluginBun"
                     "dleIDs:limitToProcess:perApp:]_block_invoke";
              _os_log_debug_impl( (void *)&_mh_execute_header,  v129,  OS_LOG_TYPE_DEBUG,  "%s: Installing DNSProxy policies",  buf,  0xCu);
            }

            if (v61) {
              id v143 = objc_getProperty(v61, v142, 16LL, 1);
            }
            else {
              id v143 = 0LL;
            }
            id v145 = v143;
            uint64_t v146 = *(void **)(a1 + 40);
            if (v146) {
              id v147 = objc_getProperty(v146, v144, 48LL, 1);
            }
            else {
              id v147 = 0LL;
            }
            sub_10005B5D8(v145, v170 + 139, 0LL, v180, v147);

            uint64_t v171 = (NSMutableArray *)[[NEPolicy alloc] initWithOrder:(v170 + 140) result:v174 conditions:v176];
            uint64_t v149 = *(void **)(a1 + 40);
            if (v149) {
              id v150 = objc_getProperty(v149, v148, 48LL, 1);
            }
            else {
              id v150 = 0LL;
            }
            sub_10002E57C((BOOL)v61, v171, v150);
            id v151 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
            id v197 = v151;
            id v153 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v197,  1LL));
            uint64_t v154 = *(void **)(a1 + 40);
            if (v154) {
              id v155 = objc_getProperty(v154, v152, 56LL, 1);
            }
            else {
              id v155 = 0LL;
            }
            sub_10002E4D8((BOOL)v61, v153, v155);

            id v156 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
            v196[0] = v156;
            id v157 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition flowRemoteAddressEmpty]( &OBJC_CLASS___NEPolicyCondition,  "flowRemoteAddressEmpty"));
            v196[1] = v157;
            id v159 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v196,  2LL));
            id v160 = *(void **)(a1 + 40);
            if (v160) {
              id v161 = objc_getProperty(v160, v158, 56LL, 1);
            }
            else {
              id v161 = 0LL;
            }
            __int128 v123 = v61;
            sub_10002E434((BOOL)v61, v159, v161);

            uint64_t v139 = v172;
            __int128 v138 = v173;
            uint64_t v140 = v168;
            SEL v141 = v164;
            id v134 = v174;
            id v133 = v176;
            id v137 = v171;
          }

          uint64_t v82 = sub_10002C620(v123);
          id v5 = v123;
          goto LABEL_51;
        }

        uint64_t v86 = ne_log_obj(v32, v33);
        log = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
        if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 136315138;
          id v206 = "-[NESMPolicySession setPoliciesForDNSProxyProcess:withFlowDivertControlUnit:captiveNetworkPluginBundleI"
                 "Ds:limitToProcess:perApp:]_block_invoke";
          __int128 v84 = "%s: Captive app traffic exception policies failed";
          goto LABEL_49;
        }

LABEL_50:
        uint64_t v82 = 0LL;
LABEL_51:

        goto LABEL_52;
      }

      uint64_t v85 = ne_log_obj(v24, v25);
      log = (os_log_s *)objc_claimAutoreleasedReturnValue(v85);
      if (!os_log_type_enabled(log, OS_LOG_TYPE_ERROR)) {
        goto LABEL_50;
      }
      *(_DWORD *)__int128 buf = 136315138;
      id v206 = "-[NESMPolicySession setPoliciesForDNSProxyProcess:withFlowDivertControlUnit:captiveNetworkPluginBundleIDs:l"
             "imitToProcess:perApp:]_block_invoke";
      __int128 v84 = "%s: Captive agent traffic exception policies failed";
    }

    else
    {
      uint64_t v83 = ne_log_obj(0LL, v17);
      log = (os_log_s *)objc_claimAutoreleasedReturnValue(v83);
      if (!os_log_type_enabled(log, OS_LOG_TYPE_ERROR)) {
        goto LABEL_50;
      }
      *(_DWORD *)__int128 buf = 136315138;
      id v206 = "-[NESMPolicySession setPoliciesForDNSProxyProcess:withFlowDivertControlUnit:captiveNetworkPluginBundleIDs:l"
             "imitToProcess:perApp:]_block_invoke";
      __int128 v84 = "%s: Failed to get UUIDs for captiveagent";
    }

                  if (!v36)
                  {
                    uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyRouteRule routeRuleWithAction:forType:]( &OBJC_CLASS___NEPolicyRouteRule,  "routeRuleWithAction:forType:",  2LL,  3LL));
                    [v33 addObject:v42];
                    id v26 = v101;
                    uint64_t v25 = v29;
                    goto LABEL_58;
                  }

                  uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v30 configuration]);
                  if ([v42 grade] != (id)2)
                  {

                    id v26 = v101;
                    uint64_t v25 = v29;
                    goto LABEL_57;
                  }

                  id v43 = (void *)objc_claimAutoreleasedReturnValue([v31 matchSigningIdentifier]);
                  id v26 = v101;
                  uint64_t v25 = v29;
                  if ([v43 isEqualToString:@"PathRuleDefaultIdentifier"])
                  {

                    goto LABEL_58;
                  }

                  id v44 = [v31 wifiBehavior];
                  id v45 = [v32 wifiBehavior];

                  uint64_t v41 = v44 == v45;
                  id v10 = v100;
                  if (!v41)
                  {
LABEL_57:
                    uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyRouteRule routeRuleWithAction:forType:]( &OBJC_CLASS___NEPolicyRouteRule,  "routeRuleWithAction:forType:",  1LL,  3LL));
                    [v33 addObject:v42];
LABEL_58:
                  }

                  if ([v33 count]) {
                    id v46 = v33;
                  }
                  else {
                    id v46 = 0LL;
                  }
                }

                else
                {
                  id v46 = 0LL;
                  uint64_t v25 = v29;
                }

                uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue([v31 matchSigningIdentifier]);
                [v104 setObject:v46 forKeyedSubscript:v47];
              }

              uint64_t v27 = (char *)v27 + 1;
            }

            while (v25 != v27);
            uint64_t v48 = [obj countByEnumeratingWithState:&v111 objects:v120 count:16];
            uint64_t v25 = v48;
          }

          while (v48);
        }
      }

      id v109 = 0u;
      uint64_t v110 = 0u;
      unsigned int v107 = 0u;
      uint64_t v108 = 0u;
      id v49 = *(id *)(v10 + 32);
      if (v49) {
        id v49 = objc_getProperty(v49, v11, 368LL, 1);
      }
      uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v49 pathRules]);
      id v51 = [v50 countByEnumeratingWithState:&v107 objects:v119 count:16];
      if (v51)
      {
        id v52 = v51;
        uint64_t v53 = *(void *)v108;
        while (2)
        {
          for (j = 0LL; j != v52; j = (char *)j + 1)
          {
            if (*(void *)v108 != v53) {
              objc_enumerationMutation(v50);
            }
            id v55 = *(void **)(*((void *)&v107 + 1) + 8LL * (void)j);
            id v56 = (void *)objc_claimAutoreleasedReturnValue([v55 matchSigningIdentifier]);
            id v57 = [v56 isEqualToString:@"PathRuleDefaultIdentifier"];

            if ((v57 & 1) == 0)
            {
              id v58 = objc_claimAutoreleasedReturnValue([v55 matchSigningIdentifier]);
              BOOL v59 = (void *)ne_copy_cached_uuids_for_bundle_identifier( [v58 UTF8String],  objc_msgSend(v55, "isIdentifierExternal"));

              if (!v59)
              {
                id v62 = ne_log_obj(v60, v61);
                uint64_t v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
                if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
                {
                  id v64 = *(void *)(v100 + 32);
                  id v65 = (void *)objc_claimAutoreleasedReturnValue([v55 matchSigningIdentifier]);
                  *(_DWORD *)__int128 buf = 138412546;
                  *(void *)&uint8_t buf[4] = v64;
                  *(_WORD *)&_BYTE buf[12] = 2112;
                  *(void *)&buf[14] = v65;
                  _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEFAULT,  "%@: No UUIDs in the cache for %@, populating the cache from the path rules",  buf,  0x16u);
                }

                uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v100 + 32) configuration]);
                uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue([v66 identifier]);
                [v67 getUUIDBytes:v122];

                id v68 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v100 + 32) uid]);
                NEHelperCachePopulateUUIDsForConfiguration(v122, [v68 intValue]);

                goto LABEL_85;
              }
            }
          }

          id v52 = [v50 countByEnumeratingWithState:&v107 objects:v119 count:16];
          if (v52) {
            continue;
          }
          break;
        }
      }

void sub_10004527C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 mutableCopy];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 arrayByAddingObjectsFromArray:v4]);

  uint64_t v9 = ne_log_obj(v7, v8);
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    int v26 = 136315394;
    uint64_t v27 = "-[NESMPolicySession setPoliciesForDNSProxyProcess:withFlowDivertControlUnit:captiveNetworkPluginBundleIDs:limi"
          "tToProcess:perApp:]_block_invoke";
    __int16 v28 = 2112;
    id v29 = v6;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%s: Installing perApp DNSProxy policy %@",  (uint8_t *)&v26,  0x16u);
  }

  uint64_t v11 = *(void *)(a1 + 40);
  id v13 = [[NEPolicy alloc] initWithOrder:*(unsigned int *)(a1 + 64) result:*(void *)(a1 + 48) conditions:v6];
  id v14 = *(void **)(a1 + 56);
  if (v14) {
    id Property = objc_getProperty(v14, v12, 48LL, 1);
  }
  else {
    id Property = 0LL;
  }
  sub_10002E57C(v11, v13, Property);

  uint64_t v17 = *(void *)(a1 + 40);
  id v18 = *(void **)(a1 + 56);
  if (v18) {
    id v19 = objc_getProperty(v18, v16, 56LL, 1);
  }
  else {
    id v19 = 0LL;
  }
  sub_10002E4D8(v17, v6, v19);
  id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition flowRemoteAddressEmpty](&OBJC_CLASS___NEPolicyCondition, "flowRemoteAddressEmpty"));
  id v21 = (void *)objc_claimAutoreleasedReturnValue([v6 arrayByAddingObject:v20]);

  uint64_t v23 = *(void *)(a1 + 40);
  uint64_t v24 = *(void **)(a1 + 56);
  if (v24) {
    id v25 = objc_getProperty(v24, v22, 56LL, 1);
  }
  else {
    id v25 = 0LL;
  }
  sub_10002E434(v23, v21, v25);
}

uint64_t sub_100045454(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v5 = *(void **)(a1 + 32);
  if (v5) {
    id Property = objc_getProperty(v5, v3, 48LL, 1);
  }
  else {
    id Property = 0LL;
  }
  sub_10002C4C8(v4, Property);
  uint64_t v8 = *(void **)(a1 + 32);
  if (v8) {
    id v9 = objc_getProperty(v8, v7, 56LL, 1);
  }
  else {
    id v9 = 0LL;
  }
  sub_10002D64C(v4, v9);
  unsigned int v133 = sub_10002EA48(*(void *)(a1 + 32));
  unsigned int v118 = v133;
  unsigned int v119 = v133 + 32;
  id v10 = &AnalyticsSendEventLazy_ptr;
  uint64_t v112 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](&OBJC_CLASS___NEPolicyResult, "netAgentUUID:", *(void *)(a1 + 40)));
  id v111 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition flowRemoteAddressEmpty]( &OBJC_CLASS___NEPolicyCondition,  "flowRemoteAddressEmpty"));
  BOOL v116 = (BOOL)v4;
  uint64_t v117 = a1;
  if (![*(id *)(a1 + 48) count])
  {
LABEL_27:
    id v35 = objc_alloc(&OBJC_CLASS___NEPolicy);
    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
    uint64_t v142 = v36;
    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v142, 1LL));
    id v38 = [v35 initWithOrder:v119 result:v112 conditions:v37];

    id v40 = *(void **)(a1 + 32);
    if (v40) {
      id v41 = objc_getProperty(v40, v39, 48LL, 1);
    }
    else {
      id v41 = 0LL;
    }
    sub_10002E57C((BOOL)v4, v38, v41);
    ++v119;
    uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
    v141[0] = v42;
    v141[1] = v111;
    id v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v141, 2LL));
    id v45 = *(void **)(a1 + 32);
    if (v45) {
      id v46 = objc_getProperty(v45, v43, 56LL, 1);
    }
    else {
      id v46 = 0LL;
    }
    sub_10002E434((BOOL)v4, v44, v46);

    goto LABEL_32;
  }

  __int128 v131 = 0u;
  __int128 v132 = 0u;
  __int128 v129 = 0u;
  __int128 v130 = 0u;
  id v11 = *(id *)(a1 + 48);
  id v12 = [v11 countByEnumeratingWithState:&v129 objects:v145 count:16];
  if (!v12)
  {

    goto LABEL_27;
  }

  id v13 = v12;
  char v14 = 0;
  uint64_t v15 = *(void *)v130;
  do
  {
    id v16 = 0LL;
    id obj = v13;
    do
    {
      if (*(void *)v130 != v15) {
        objc_enumerationMutation(v11);
      }
      uint64_t v17 = *(void **)(*((void *)&v129 + 1) + 8LL * (void)v16);
      if ([v17 length])
      {
        id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet characterSetWithCharactersInString:]( &OBJC_CLASS___NSCharacterSet,  "characterSetWithCharactersInString:",  @"*."));
        id v19 = (void *)objc_claimAutoreleasedReturnValue([v17 stringByTrimmingCharactersInSet:v18]);
        if (v19)
        {
          id v20 = v11;
          id v21 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](&OBJC_CLASS___NEPolicyCondition, "domain:", v19));
          id v22 = objc_alloc(&OBJC_CLASS___NEPolicy);
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
          v144[0] = v23;
          v144[1] = v21;
          uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v144,  2LL));
          id v25 = [v22 initWithOrder:v119 result:v112 conditions:v24];

          uint64_t v27 = *(void **)(v117 + 32);
          if (v27) {
            id v28 = objc_getProperty(v27, v26, 48LL, 1);
          }
          else {
            id v28 = 0LL;
          }
          sub_10002E57C(v116, v25, v28);
          id v29 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
          v143[0] = v29;
          v143[1] = v21;
          v143[2] = v111;
          BOOL v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v143,  3LL));
          uint64_t v32 = *(void **)(v117 + 32);
          if (v32) {
            id v33 = objc_getProperty(v32, v30, 56LL, 1);
          }
          else {
            id v33 = 0LL;
          }
          ++v119;
          sub_10002E434(v116, v31, v33);

          id v4 = (id)v116;
          char v14 = 1;
          id v11 = v20;
          id v13 = obj;
        }

        a1 = v117;
      }

      id v16 = (char *)v16 + 1;
    }

    while (v13 != v16);
    id v34 = [v11 countByEnumeratingWithState:&v129 objects:v145 count:16];
    id v13 = v34;
  }

  while (v34);

  id v10 = &AnalyticsSendEventLazy_ptr;
  if ((v14 & 1) == 0) {
    goto LABEL_27;
  }
LABEL_32:
  uint64_t v120 = (void *)objc_claimAutoreleasedReturnValue([v10[172] skipWithOrder:v119]);
  uint64_t v47 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v48 = +[NEProcessInfo copyUUIDsForExecutable:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForExecutable:",  @"/usr/libexec/configd");
  -[NSMutableArray addObjectsFromArray:](v47, "addObjectsFromArray:", v48);

  id v49 = +[NEProcessInfo copyUUIDsForExecutable:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForExecutable:",  @"/usr/libexec/captiveagent");
  -[NSMutableArray addObjectsFromArray:](v47, "addObjectsFromArray:", v49);

  id v50 = +[NEProcessInfo copyUUIDsForExecutable:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForExecutable:",  @"/System/Library/Frameworks/CoreTelephony.framework/Support/CommCenter");
  -[NSMutableArray addObjectsFromArray:](v47, "addObjectsFromArray:", v50);

  id v51 = +[NEProcessInfo copyUUIDsForExecutable:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForExecutable:",  @"/Applications/InCallService.app/InCallService");
  -[NSMutableArray addObjectsFromArray:](v47, "addObjectsFromArray:", v51);

  id v52 = +[NEProcessInfo copyUUIDsForExecutable:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForExecutable:",  @"/System/Library/Frameworks/CoreTelephony.framework/Support/CommCenterMobileHelper");
  -[NSMutableArray addObjectsFromArray:](v47, "addObjectsFromArray:", v52);

  uint64_t v53 = -[NSUUID initWithUUIDString:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDString:",  @"569F2700-CAF9-483D-B19D-7AF406DCE15E");
  -[NSMutableArray addObject:](v47, "addObject:", v53);

  id v54 = -[NSUUID initWithUUIDString:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDString:",  @"67A03811-DB0A-594E-C2AE-8B0517EDF26F");
  -[NSMutableArray addObject:](v47, "addObject:", v54);

  __int128 v127 = 0u;
  __int128 v128 = 0u;
  __int128 v125 = 0u;
  __int128 v126 = 0u;
  id obja = v47;
  id v55 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obja,  "countByEnumeratingWithState:objects:count:",  &v125,  v140,  16LL);
  if (v55)
  {
    id v56 = v55;
    uint64_t v57 = *(void *)v126;
    do
    {
      id v58 = 0LL;
      do
      {
        if (*(void *)v126 != v57) {
          objc_enumerationMutation(obja);
        }
        BOOL v59 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  *(void *)(*((void *)&v125 + 1) + 8LL * (void)v58)));
        id v60 = objc_alloc(&OBJC_CLASS___NEPolicy);
        id v61 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
        v139[0] = v61;
        v139[1] = v59;
        id v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v139, 2LL));
        id v63 = [v60 initWithOrder:v118 result:v120 conditions:v62];

        id v65 = *(void **)(a1 + 32);
        if (v65) {
          id v66 = objc_getProperty(v65, v64, 48LL, 1);
        }
        else {
          id v66 = 0LL;
        }
        sub_10002E57C((BOOL)v4, v63, v66);

        id v58 = (char *)v58 + 1;
      }

      while (v56 != v58);
      id v67 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obja,  "countByEnumeratingWithState:objects:count:",  &v125,  v140,  16LL);
      id v56 = v67;
    }

    while (v67);
  }

  id v68 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](&OBJC_CLASS___NEPolicyCondition, "domain:", @"ipv4only.arpa"));
  id v69 = objc_alloc(&OBJC_CLASS___NEPolicy);
  uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
  v138[0] = v70;
  v138[1] = v68;
  id v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v138, 2LL));
  id v72 = [v69 initWithOrder:v118 result:v120 conditions:v71];

  unsigned int v74 = *(void **)(a1 + 32);
  if (v74) {
    id v75 = objc_getProperty(v74, v73, 48LL, 1);
  }
  else {
    id v75 = 0LL;
  }
  sub_10002E57C((BOOL)v4, v72, v75);
  id v76 = [*(id *)(a1 + 56) count];
  if (v76)
  {
    id v109 = v72;
    uint64_t v110 = v68;
    uint64_t v78 = ne_log_obj(v76, v77);
    id v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
    if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
    {
      id v80 = *(const char **)(a1 + 56);
      *(_DWORD *)__int128 buf = 138412290;
      id v137 = v80;
      _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_INFO,  "Excluding domains from DNS settings: %@",  buf,  0xCu);
    }

    __int128 v123 = 0u;
    __int128 v124 = 0u;
    __int128 v121 = 0u;
    __int128 v122 = 0u;
    id v113 = *(id *)(a1 + 56);
    id v81 = [v113 countByEnumeratingWithState:&v121 objects:v135 count:16];
    if (v81)
    {
      id v82 = v81;
      uint64_t v83 = *(void *)v122;
      do
      {
        __int128 v84 = 0LL;
        do
        {
          if (*(void *)v122 != v83) {
            objc_enumerationMutation(v113);
          }
          uint64_t v85 = *(void **)(*((void *)&v121 + 1) + 8LL * (void)v84);
          uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet characterSetWithCharactersInString:]( &OBJC_CLASS___NSCharacterSet,  "characterSetWithCharactersInString:",  @"*."));
          id v87 = (void *)objc_claimAutoreleasedReturnValue([v85 stringByTrimmingCharactersInSet:v86]);
          if (v87)
          {
            __int128 v88 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](&OBJC_CLASS___NEPolicyCondition, "domain:", v87));
            id v89 = objc_alloc(&OBJC_CLASS___NEPolicy);
            id v90 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
            v134[0] = v90;
            v134[1] = v88;
            id v91 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v134,  2LL));
            id v92 = [v89 initWithOrder:v118 result:v120 conditions:v91];

            a1 = v117;
            uint64_t v94 = *(void **)(v117 + 32);
            if (v94) {
              id v95 = objc_getProperty(v94, v93, 48LL, 1);
            }
            else {
              id v95 = 0LL;
            }
            sub_10002E57C(v116, v92, v95);
          }

          __int128 v84 = (char *)v84 + 1;
        }

        while (v82 != v84);
        id v96 = [v113 countByEnumeratingWithState:&v121 objects:v135 count:16];
        id v82 = v96;
      }

      while (v96);
    }

    id v4 = (id)v116;
    id v72 = v109;
    id v68 = v110;
  }

  if (v4) {
    id v97 = objc_getProperty(v4, v77, 16LL, 1);
  }
  else {
    id v97 = 0LL;
  }
  id v99 = v97;
  unsigned int v100 = *(void **)(a1 + 64);
  id v101 = *(id *)(a1 + 32);
  if (v101) {
    id v101 = objc_getProperty(v101, v98, 48LL, 1);
  }
  BOOL v102 = sub_10005856C(v99, v100, &v133, 1, 1, 0LL, v120, 0, v101, 0, 0);

  if (!v102)
  {
    uint64_t v105 = ne_log_obj(v103, v104);
    uint64_t v106 = (os_log_s *)objc_claimAutoreleasedReturnValue(v105);
    if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v137 = "-[NESMPolicySession setPoliciesForDNSSettingsWithAgentUUID:matchDomains:exceptionDomains:captiveNetworkPlug"
             "inBundleIDs:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v106,  OS_LOG_TYPE_ERROR,  "%s: Captive app traffic exception policies failed",  buf,  0xCu);
    }
  }

  uint64_t v107 = sub_10002C620(v4);

  return v107;
}

uint64_t sub_100045EC0(uint64_t a1, void *a2, void *a3, char a4)
{
  id v7 = a2;
  id v8 = a3;
  if (a1)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100045F90;
    v11[3] = &unk_1000BDF50;
    v11[4] = a1;
    id v12 = v7;
    char v14 = a4;
    id v13 = v8;
    uint64_t v9 = sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, v11);
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  return v9;
}

uint64_t sub_100045F90(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(void *)(a1 + 32)) {
    int v5 = 19499;
  }
  else {
    int v5 = 0;
  }
  unsigned int v76 = v5;
  if (*(void *)(a1 + 32)) {
    uint64_t v6 = 19999LL;
  }
  else {
    uint64_t v6 = 0LL;
  }
  uint64_t v7 = ne_log_large_obj(v3);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v9, 112LL, 1);
    }
    *(_DWORD *)__int128 buf = 138412290;
    id v90 = Property;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "Skip policy IDs to be removed %@",  buf,  0xCu);
  }

  id v11 = *(void **)(a1 + 32);
  if (v11) {
    id v12 = objc_getProperty(v11, v10, 112LL, 1);
  }
  else {
    id v12 = 0LL;
  }
  BOOL v13 = sub_10002C4C8(v4, v12);
  uint64_t v14 = ne_log_large_obj(v13);
  uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    id v70 = *(id *)(a1 + 32);
    if (v70) {
      id v70 = objc_getProperty(v70, v16, 120LL, 1);
    }
    *(_DWORD *)__int128 buf = 138412290;
    id v90 = v70;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "Low skip policy IDs to be removed %@",  buf,  0xCu);
  }

  uint64_t v18 = ne_log_large_obj(v17);
  id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
  {
    id v71 = *(id *)(a1 + 32);
    if (v71)
    {
      id v71 = objc_getProperty(v71, v20, 120LL, 1);
      uint64_t v72 = *(void *)(a1 + 32);
    }

    else
    {
      uint64_t v72 = 0LL;
    }

    *(_DWORD *)__int128 buf = 138412546;
    id v90 = v71;
    __int16 v91 = 2048;
    uint64_t v92 = v72;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "Removing low skip policy IDs: %@ (self %p)",  buf,  0x16u);
  }

  id v22 = *(void **)(a1 + 32);
  if (v22) {
    id v23 = objc_getProperty(v22, v21, 120LL, 1);
  }
  else {
    id v23 = 0LL;
  }
  sub_10002D64C(v4, v23);
  uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", v6));
  id v77 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition flowRemoteAddressEmpty](&OBJC_CLASS___NEPolicyCondition, "flowRemoteAddressEmpty"));
  if (*(void *)(a1 + 40))
  {
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](&OBJC_CLASS___NEPolicyCondition, "scopedInterface:"));
    id v25 = objc_alloc(&OBJC_CLASS___NEPolicy);
    __int128 v88 = v24;
    int v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v88, 1LL));
    id v27 = [v25 initWithOrder:v76 result:v78 conditions:v26];

    id v29 = *(void **)(a1 + 32);
    if (v29) {
      id v30 = objc_getProperty(v29, v28, 112LL, 1);
    }
    else {
      id v30 = 0LL;
    }
    sub_10002E57C((BOOL)v4, v27, v30);
    v87[0] = v24;
    v87[1] = v77;
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v87, 2LL));
    id v33 = *(void **)(a1 + 32);
    if (v33) {
      id v34 = objc_getProperty(v33, v31, 120LL, 1);
    }
    else {
      id v34 = 0LL;
    }
    sub_10002E434((BOOL)v4, v32, v34);
  }

  int v35 = *(unsigned __int8 *)(a1 + 56);
  int v75 = v35;
  __int128 v81 = 0u;
  __int128 v82 = 0u;
  __int128 v79 = 0u;
  __int128 v80 = 0u;
  id v36 = *(id *)(a1 + 48);
  id v37 = [v36 countByEnumeratingWithState:&v79 objects:v86 count:16];
  if (v37)
  {
    id v38 = v37;
    char v39 = 0;
    uint64_t v40 = *(void *)v80;
    do
    {
      id v41 = 0LL;
      do
      {
        if (*(void *)v80 != v40) {
          objc_enumerationMutation(v36);
        }
        uint64_t v42 = *(void **)(*((void *)&v79 + 1) + 8LL * (void)v41);
        if ([v42 length])
        {
          id v43 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](&OBJC_CLASS___NEPolicyCondition, "domain:", v42));
          id v44 = objc_alloc(&OBJC_CLASS___NEPolicy);
          uint64_t v85 = v43;
          id v45 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v85,  1LL));
          id v46 = [v44 initWithOrder:v76 result:v78 conditions:v45];

          id v48 = *(void **)(a1 + 32);
          if (v48) {
            id v49 = objc_getProperty(v48, v47, 112LL, 1);
          }
          else {
            id v49 = 0LL;
          }
          sub_10002E57C((BOOL)v4, v46, v49);
          v84[0] = v43;
          v84[1] = v77;
          id v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v84, 2LL));
          id v52 = *(void **)(a1 + 32);
          if (v52) {
            id v53 = objc_getProperty(v52, v50, 120LL, 1);
          }
          else {
            id v53 = 0LL;
          }
          sub_10002E434((BOOL)v4, v51, v53);

          char v39 = 1;
        }

        id v41 = (char *)v41 + 1;
      }

      while (v38 != v41);
      id v54 = [v36 countByEnumeratingWithState:&v79 objects:v86 count:16];
      id v38 = v54;
    }

    while (v54);
  }

  else
  {
    char v39 = 0;
  }

  if (v75)
  {
    if ((v39 & 1) == 0)
    {
LABEL_41:
      id v57 = [[NEPolicy alloc] initWithOrder:v76 result:v78 conditions:&__NSArray0__struct];
      id v58 = *(void **)(a1 + 32);
      if (v58) {
        id v59 = objc_getProperty(v58, v56, 112LL, 1);
      }
      else {
        id v59 = 0LL;
      }
      sub_10002E57C((BOOL)v4, v57, v59);
      uint64_t v83 = v77;
      id v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v83, 1LL));
      id v62 = *(void **)(a1 + 32);
      if (v62) {
        id v63 = objc_getProperty(v62, v60, 120LL, 1);
      }
      else {
        id v63 = 0LL;
      }
      sub_10002E434((BOOL)v4, v61, v63);
    }
  }

  uint64_t v64 = ne_log_large_obj(v55);
  id v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
  if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
  {
    id v73 = *(id *)(a1 + 32);
    if (v73)
    {
      id v73 = objc_getProperty(v73, v66, 120LL, 1);
      uint64_t v74 = *(void *)(a1 + 32);
    }

    else
    {
      uint64_t v74 = 0LL;
    }

    *(_DWORD *)__int128 buf = 138412546;
    id v90 = v73;
    __int16 v91 = 2048;
    uint64_t v92 = v74;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEBUG,  "Adding low skip policy IDs: %@ (self %p)",  buf,  0x16u);
  }

  uint64_t v67 = sub_10002C620(v4);
  return v67;
}

void sub_1000465E0( void *a1, int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, unsigned int a11)
{
  id v94 = a3;
  id v95 = a4;
  id v106 = a5;
  id v17 = a6;
  id v103 = a7;
  id v100 = a8;
  id v99 = a9;
  id v98 = a10;
  if (!a1) {
    goto LABEL_59;
  }
  uint64_t v18 = a1;
  id v19 = [v95 count];
  id v21 = &AnalyticsSendEventLazy_ptr;
  id v22 = &AnalyticsSendEventLazy_ptr;
  self = a1;
  BOOL v105 = (BOOL)v17;
  if (v19)
  {
    uint64_t v23 = ne_log_obj(v19, v20);
    uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v121 = v95;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Excluding domains from relay: %@", buf, 0xCu);
    }

    __int128 v113 = 0u;
    __int128 v114 = 0u;
    __int128 v111 = 0u;
    __int128 v112 = 0u;
    id obj = v95;
    id v25 = [obj countByEnumeratingWithState:&v111 objects:v119 count:16];
    if (v25)
    {
      id v26 = v25;
      uint64_t v27 = *(void *)v112;
      do
      {
        for (id i = 0LL; i != v26; id i = (char *)i + 1)
        {
          if (*(void *)v112 != v27) {
            objc_enumerationMutation(obj);
          }
          id v29 = *(void **)(*((void *)&v111 + 1) + 8LL * (void)i);
          id v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet characterSetWithCharactersInString:]( &OBJC_CLASS___NSCharacterSet,  "characterSetWithCharactersInString:",  @"*."));
          BOOL v31 = (void *)objc_claimAutoreleasedReturnValue([v29 stringByTrimmingCharactersInSet:v30]);
          uint64_t v32 = v31;
          if (v31)
          {
            buf[0] = 0;
            id v33 = v31;
            address_from_string = (void *)nw_endpoint_create_address_from_string( [v33 UTF8String],  "0",  buf);
            if (address_from_string)
            {
              int v35 = (void *)objc_claimAutoreleasedReturnValue( +[NWAddressEndpoint endpointWithCEndpoint:]( &OBJC_CLASS___NWAddressEndpoint,  "endpointWithCEndpoint:",  address_from_string));
              id v36 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition flowRemoteAddress:prefix:]( &OBJC_CLASS___NEPolicyCondition,  "flowRemoteAddress:prefix:",  v35,  buf[0]));
              int v37 = buf[0];
              if (buf[0] >= 0x81u)
              {
                int v37 = 128;
                buf[0] = 0x80;
              }

              uint64_t v38 = (a2 + 266 - 2 * v37);
            }

            else
            {
              id v36 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](&OBJC_CLASS___NEPolicyCondition, "domain:", v33));
              char v39 = (void *)objc_claimAutoreleasedReturnValue([v33 componentsSeparatedByString:@"."]);
              unsigned int v40 = [v39 count];

              int v41 = 4 - 2 * v40;
              if (v40 > 7) {
                int v41 = -10;
              }
              if (v40 < 3) {
                int v41 = 0;
              }
              uint64_t v38 = (a2 + 10 + v41);
            }

            uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
            v118[0] = v42;
            v118[1] = v36;
            id v43 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v118,  2LL));

            if (v106)
            {
              uint64_t v44 = objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "arrayByAddingObjectsFromArray:"));

              id v43 = (void *)v44;
            }

            id v45 = [[NEPolicy alloc] initWithOrder:v38 result:v103 conditions:v43];
            id Property = objc_getProperty(self, v46, 48LL, 1);
            sub_10002E57C(v105, v45, Property);

            id v21 = &AnalyticsSendEventLazy_ptr;
          }
        }

        id v26 = [obj countByEnumeratingWithState:&v111 objects:v119 count:16];
      }

      while (v26);
    }

    uint64_t v18 = self;
    id v17 = (id)v105;
    id v22 = &AnalyticsSendEventLazy_ptr;
  }

  if (![v94 count]) {
    goto LABEL_54;
  }
  __int128 v109 = 0u;
  __int128 v110 = 0u;
  __int128 v107 = 0u;
  __int128 v108 = 0u;
  id v48 = v94;
  id v49 = [v48 countByEnumeratingWithState:&v107 objects:v117 count:16];
  if (!v49)
  {

LABEL_54:
    __int128 v81 = (void *)objc_claimAutoreleasedReturnValue([v21[171] allInterfaces]);
    id v115 = v81;
    __int128 v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v115, 1LL));

    if (v106)
    {
      uint64_t v83 = objc_claimAutoreleasedReturnValue(objc_msgSend(v82, "arrayByAddingObjectsFromArray:"));

      __int128 v82 = (void *)v83;
    }

    id v84 = [objc_alloc((Class)v22[170]) initWithOrder:(a2 + 266) result:v100 conditions:v82];
    id v86 = objc_getProperty(v18, v85, 48LL, 1);
    sub_10002E57C((BOOL)v17, v84, v86);

    if (v99)
    {
      id v87 = [objc_alloc((Class)v22[170]) initWithOrder:(a2 + 266) result:v99 conditions:v82];
      id v89 = objc_getProperty(v18, v88, 48LL, 1);
      sub_10002E57C((BOOL)v17, v87, v89);
    }

    id v90 = [objc_alloc((Class)v22[170]) initWithOrder:a11 result:v98 conditions:v82];
    id v92 = objc_getProperty(v18, v91, 48LL, 1);
    sub_10002E57C((BOOL)v17, v90, v92);

    goto LABEL_59;
  }

  id v50 = v49;
  char v51 = 0;
  uint64_t v52 = *(void *)v108;
  uint64_t v96 = *(void *)v108;
  id v97 = v48;
  do
  {
    id v53 = 0LL;
    id v101 = v50;
    do
    {
      if (*(void *)v108 != v52) {
        objc_enumerationMutation(v48);
      }
      id v54 = *(void **)(*((void *)&v107 + 1) + 8LL * (void)v53);
      if ([v54 length])
      {
        uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet characterSetWithCharactersInString:]( &OBJC_CLASS___NSCharacterSet,  "characterSetWithCharactersInString:",  @"*."));
        id v56 = (void *)objc_claimAutoreleasedReturnValue([v54 stringByTrimmingCharactersInSet:v55]);
        id v57 = v56;
        if (v56)
        {
          buf[0] = 0;
          id v58 = (void *)nw_endpoint_create_address_from_string([v56 UTF8String], "0", buf);
          if (v58)
          {
            id v59 = (void *)objc_claimAutoreleasedReturnValue( +[NWAddressEndpoint endpointWithCEndpoint:]( &OBJC_CLASS___NWAddressEndpoint,  "endpointWithCEndpoint:",  v58));
            id v60 = (void *)objc_claimAutoreleasedReturnValue([v21[171] flowRemoteAddress:v59 prefix:buf[0]]);
            int v61 = buf[0];
            if (buf[0] >= 0x81u)
            {
              int v61 = 128;
              buf[0] = 0x80;
            }

            uint64_t v62 = (a2 + 266 - 2 * v61);
          }

          else
          {
            id v60 = (void *)objc_claimAutoreleasedReturnValue([v21[171] domain:v57]);
            id v63 = (void *)objc_claimAutoreleasedReturnValue([v57 componentsSeparatedByString:@"."]);
            unsigned int v64 = [v63 count];

            int v65 = 4 - 2 * v64;
            if (v64 > 7) {
              int v65 = -10;
            }
            if (v64 < 3) {
              int v65 = 0;
            }
            uint64_t v62 = (a2 + 10 + v65);
          }

          id v66 = (void *)objc_claimAutoreleasedReturnValue([v21[171] allInterfaces]);
          v116[0] = v66;
          v116[1] = v60;
          uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v116,  2LL));

          if (v106)
          {
            uint64_t v68 = objc_claimAutoreleasedReturnValue(objc_msgSend(v67, "arrayByAddingObjectsFromArray:"));

            uint64_t v67 = (void *)v68;
          }

          id v69 = [[NEPolicy alloc] initWithOrder:v62 result:v100 conditions:v67];
          id v71 = objc_getProperty(self, v70, 48LL, 1);
          sub_10002E57C(v105, v69, v71);

          if (v99)
          {
            id v72 = [[NEPolicy alloc] initWithOrder:v62 result:v99 conditions:v67];
            id v74 = objc_getProperty(self, v73, 48LL, 1);
            sub_10002E57C(v105, v72, v74);
          }

          id v75 = [[NEPolicy alloc] initWithOrder:(v62 + 1) result:v103 conditions:v67];
          char v51 = 1;
          id v77 = objc_getProperty(self, v76, 48LL, 1);
          sub_10002E57C(v105, v75, v77);

          id v78 = [[NEPolicy alloc] initWithOrder:a11 result:v98 conditions:v67];
          id v80 = objc_getProperty(self, v79, 48LL, 1);
          sub_10002E57C(v105, v78, v80);

          id v21 = &AnalyticsSendEventLazy_ptr;
          uint64_t v52 = v96;
          id v48 = v97;
          id v50 = v101;
        }
      }

      id v53 = (char *)v53 + 1;
    }

    while (v50 != v53);
    id v50 = [v48 countByEnumeratingWithState:&v107 objects:v117 count:16];
  }

  while (v50);

  uint64_t v18 = self;
  id v17 = (id)v105;
  id v22 = &AnalyticsSendEventLazy_ptr;
  if ((v51 & 1) == 0) {
    goto LABEL_54;
  }
LABEL_59:
}

uint64_t sub_100046E60(void *a1, void *a2)
{
  id v4 = a2;
  int v5 = (void *)a1[4];
  if (v5) {
    id Property = objc_getProperty(v5, v3, 48LL, 1);
  }
  else {
    id Property = 0LL;
  }
  sub_10002C4C8(v4, Property);
  id v8 = (void *)a1[4];
  if (v8) {
    id v9 = objc_getProperty(v8, v7, 56LL, 1);
  }
  else {
    id v9 = 0LL;
  }
  id v10 = v4;
  sub_10002D64C(v4, v9);
  unsigned int v116 = sub_10002EA48(a1[4]);
  unsigned int v101 = v116;
  id v100 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", v116 + 573));
  id v11 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v12 = +[NEProcessInfo copyUUIDsForExecutable:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForExecutable:",  @"/usr/libexec/configd");
  -[NSMutableArray addObjectsFromArray:](v11, "addObjectsFromArray:", v12);

  id v13 = +[NEProcessInfo copyUUIDsForExecutable:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForExecutable:",  @"/usr/sbin/mDNSResponder");
  -[NSMutableArray addObjectsFromArray:](v11, "addObjectsFromArray:", v13);

  id v14 = +[NEProcessInfo copyUUIDsForExecutable:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForExecutable:",  @"/usr/libexec/captiveagent");
  -[NSMutableArray addObjectsFromArray:](v11, "addObjectsFromArray:", v14);

  id v15 = +[NEProcessInfo copyUUIDsForExecutable:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForExecutable:",  @"/System/Library/Frameworks/CoreTelephony.framework/Support/CommCenter");
  -[NSMutableArray addObjectsFromArray:](v11, "addObjectsFromArray:", v15);

  id v16 = +[NEProcessInfo copyUUIDsForExecutable:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForExecutable:",  @"/Applications/InCallService.app/InCallService");
  -[NSMutableArray addObjectsFromArray:](v11, "addObjectsFromArray:", v16);

  id v17 = +[NEProcessInfo copyUUIDsForExecutable:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForExecutable:",  @"/System/Library/Frameworks/CoreTelephony.framework/Support/CommCenterMobileHelper");
  -[NSMutableArray addObjectsFromArray:](v11, "addObjectsFromArray:", v17);

  uint64_t v18 = -[NSUUID initWithUUIDString:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDString:",  @"569F2700-CAF9-483D-B19D-7AF406DCE15E");
  -[NSMutableArray addObject:](v11, "addObject:", v18);

  id v19 = -[NSUUID initWithUUIDString:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDString:",  @"67A03811-DB0A-594E-C2AE-8B0517EDF26F");
  -[NSMutableArray addObject:](v11, "addObject:", v19);

  __int128 v114 = 0u;
  __int128 v115 = 0u;
  __int128 v112 = 0u;
  __int128 v113 = 0u;
  id obj = v11;
  id v20 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v112,  v123,  16LL);
  id v21 = a1;
  if (v20)
  {
    id v22 = v20;
    uint64_t v23 = *(void *)v113;
    do
    {
      uint64_t v24 = 0LL;
      do
      {
        if (*(void *)v113 != v23) {
          objc_enumerationMutation(obj);
        }
        id v25 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  *(void *)(*((void *)&v112 + 1) + 8LL * (void)v24)));
        id v26 = objc_alloc(&OBJC_CLASS___NEPolicy);
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
        v122[0] = v27;
        v122[1] = v25;
        id v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v122, 2LL));
        id v29 = [v26 initWithOrder:v101 result:v100 conditions:v28];

        a1 = v21;
        BOOL v31 = (void *)v21[4];
        if (v31) {
          id v32 = objc_getProperty(v31, v30, 48LL, 1);
        }
        else {
          id v32 = 0LL;
        }
        sub_10002E57C((BOOL)v10, v29, v32);

        uint64_t v24 = (char *)v24 + 1;
      }

      while (v22 != v24);
      id v33 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v112,  v123,  16LL);
      id v22 = v33;
    }

    while (v33);
  }

  uint64_t v34 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition domain:](&OBJC_CLASS___NEPolicyCondition, "domain:", @"ipv4only.arpa"));
  id v35 = objc_alloc(&OBJC_CLASS___NEPolicy);
  id v36 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
  v121[0] = v36;
  v121[1] = v34;
  int v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v121, 2LL));
  uint64_t v38 = v100;
  id v39 = [v35 initWithOrder:v101 result:v100 conditions:v37];

  int v41 = (void *)a1[4];
  if (v41) {
    id v42 = objc_getProperty(v41, v40, 48LL, 1);
  }
  else {
    id v42 = 0LL;
  }
  id v43 = v10;
  sub_10002E57C((BOOL)v10, v39, v42);
  id v98 = (void *)v34;
  if (v10) {
    id v45 = objc_getProperty(v10, v44, 16LL, 1);
  }
  else {
    id v45 = 0LL;
  }
  id v47 = v45;
  id v48 = (id)a1[4];
  id v49 = (void *)a1[5];
  if (v48) {
    id v48 = objc_getProperty(v48, v46, 48LL, 1);
  }
  BOOL v50 = sub_10005856C(v47, v49, &v116, 1, 1, 0LL, v100, 0, v48, 0, 0);

  if (!v50)
  {
    uint64_t v53 = ne_log_obj(v51, v52);
    id v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v120 = "-[NESMPolicySession setPoliciesForRelayWithAgentUUID:dnsAgentUUID:matchDomains:excludedDomains:perApp:capti"
             "veNetworkPluginBundleIDs:]_block_invoke";
      _os_log_error_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_ERROR,  "%s: Captive app traffic exception policies failed",  buf,  0xCu);
    }
  }

  id v97 = v39;
  uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition allowsUnsafeSocketAccess]( &OBJC_CLASS___NEPolicyCondition,  "allowsUnsafeSocketAccess"));
  [v55 setNegative:1];
  id v56 = objc_alloc(&OBJC_CLASS___NEPolicy);
  id v57 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", v101 + 34));
  id v58 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
  v118[0] = v58;
  id v59 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition usesModernNetworkAPI](&OBJC_CLASS___NEPolicyCondition, "usesModernNetworkAPI"));
  v118[1] = v59;
  void v118[2] = v55;
  uint64_t v96 = v55;
  id v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v118, 3LL));
  id v61 = [v56 initWithOrder:v101 + 32 result:v57 conditions:v60];

  id v63 = v21;
  unsigned int v64 = (void *)v21[4];
  if (v64) {
    id v65 = objc_getProperty(v64, v62, 48LL, 1);
  }
  else {
    id v65 = 0LL;
  }
  sub_10002E57C((BOOL)v43, v61, v65);
  id v66 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](&OBJC_CLASS___NEPolicyResult, "netAgentUUID:", v21[6]));
  if (v21[7]) {
    uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult netAgentUUID:](&OBJC_CLASS___NEPolicyResult, "netAgentUUID:"));
  }
  else {
    uint64_t v67 = 0LL;
  }
  id v95 = v61;
  uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult divertSocketToControlUnit:]( &OBJC_CLASS___NEPolicyResult,  "divertSocketToControlUnit:",  0xFFFFFFFLL));
  id v69 = (void *)v21[8];
  if (v69)
  {
    uint64_t v70 = v21[4];
    id v71 = (void *)objc_claimAutoreleasedReturnValue([v69 appRules]);
    v102[0] = _NSConcreteStackBlock;
    v102[1] = 3221225472LL;
    v102[2] = sub_100047718;
    v102[3] = &unk_1000BDFC8;
    v102[4] = v63[4];
    unsigned int v110 = v101 + 37;
    uint64_t v38 = v100;
    id v103 = (id)v63[9];
    id v104 = (id)v63[10];
    id v105 = v43;
    id v106 = v100;
    id v107 = v66;
    id v108 = v67;
    id v109 = v68;
    unsigned int v111 = v101 + 33;
    sub_1000320B0(v70, v71, 0, 1, 0LL, 0LL, v105, v102, 0LL);

    SEL v73 = v97;
    id v72 = v98;
    id v74 = v67;
    id v75 = v68;
    id v77 = v95;
    SEL v76 = v96;
  }

  else
  {
    id v92 = v68;
    uint64_t v93 = v67;
    id v94 = v66;
    id v78 = objc_alloc(&OBJC_CLASS___NEPolicy);
    SEL v79 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult drop](&OBJC_CLASS___NEPolicyResult, "drop"));
    id v80 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
    v117[0] = v80;
    __int128 v81 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition domain:]( &OBJC_CLASS___NEPolicyCondition,  "domain:",  @"use-application-dns.net"));
    v117[1] = v81;
    __int128 v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v117, 2LL));
    id v83 = [v78 initWithOrder:v101 + 574 result:v79 conditions:v82];

    SEL v85 = (void *)v21[4];
    if (v85) {
      id v86 = objc_getProperty(v85, v84, 48LL, 1);
    }
    else {
      id v86 = 0LL;
    }
    SEL v73 = v97;
    id v72 = v98;
    id v77 = v95;
    SEL v76 = v96;
    id v66 = v94;
    sub_10002E57C((BOOL)v43, v83, v86);
    id v87 = (void *)v21[4];
    SEL v88 = (void *)v21[9];
    id v89 = (void *)v21[10];
    id v75 = v92;
    id v74 = v93;
    sub_1000465E0(v87, v101 + 305, v88, v89, 0LL, v43, v100, v94, v93, v92, v101 + 33);
  }

  uint64_t v90 = sub_10002C620(v43);

  return v90;
}

void sub_100047718(uint64_t a1, void *a2)
{
}

LABEL_51:
    goto LABEL_52;
  }

  uint64_t v34 = [v4 type];
  if ((_DWORD)v34 == 5)
  {
    id v36 = ne_log_obj(v34, v35);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v50 = 138412546;
      uint64_t v51 = v5;
      uint64_t v52 = 2112;
      uint64_t v53 = v4;
      id v11 = "%@: Deregister Path Controller Session: %@";
      goto LABEL_50;
    }

    goto LABEL_51;
  }

  id v39 = [v4 type];
  if ((_DWORD)v39 == 6)
  {
    if (v5)
    {
      if (objc_getProperty(v5, v40, 232LL, 1) != v4) {
        goto LABEL_52;
      }
      objc_setProperty_atomic(v5, v41, 0LL, 232LL);
    }

    else if (v4)
    {
      goto LABEL_52;
    }

    id v42 = ne_log_obj(v39, v40);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v50 = 138412546;
      uint64_t v51 = v5;
      uint64_t v52 = 2112;
      uint64_t v53 = v4;
      id v11 = "%@: Deregister DNS Proxy Session: %@";
      goto LABEL_50;
    }

    goto LABEL_51;
  }

  id v43 = [v4 type];
  if ((_DWORD)v43 == 7)
  {
    id v45 = ne_log_obj(v43, v44);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v50 = 138412546;
      uint64_t v51 = v5;
      uint64_t v52 = 2112;
      uint64_t v53 = v4;
      id v11 = "%@: Deregister DNS Settings Session: %@";
      goto LABEL_50;
    }

    goto LABEL_51;
  }

  SEL v46 = [v4 type];
  if ((_DWORD)v46 == 9)
  {
    id v48 = ne_log_obj(v46, v47);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v50 = 138412546;
      uint64_t v51 = v5;
      uint64_t v52 = 2112;
      uint64_t v53 = v4;
      id v11 = "%@: Deregister Relay Session: %@";
      goto LABEL_50;
    }

    goto LABEL_51;
  }

LABEL_52:
  objc_sync_exit(v5);
}

void sub_100048A44(_Unwind_Exception *a1)
{
}

LABEL_9:
  id v17 = 0;
LABEL_10:
  uint64_t v18 = ne_log_obj(Property, v16);
  id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412546;
    id v89 = v14;
    uint64_t v90 = 2112;
    SEL v91 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "%@: Request to install session is superceded by registered sessions: %@",  buf,  0x16u);
  }

  if (v17) {
    [v8 installPendedOnQueue];
  }
  id v20 = 0;
LABEL_44:
  objc_sync_exit(v14);

  return v20;
}

      free(v8);
    }
  }

  LODWORD(v6) = 0;
LABEL_11:
  id v14 = (void *)objc_claimAutoreleasedReturnValue([a1 primaryPhysicalInterface]);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 interfaceName]);
  id v16 = [v15 length];

  if (!v16) {
    LODWORD(v6) = 1;
  }
LABEL_13:
  unsigned int v111 = sub_10004CB98(v4);
  if (v4) {
    nwi_state_release(v4);
  }
  if ((objc_msgSend(objc_getProperty(a1, v17, 72, 1), "isEqualToDictionary:", v111) & (v2 ^ 1) & 1) != 0
    || ((v6 ^ 1) & 1) != 0)
  {
    goto LABEL_95;
  }

  uint64_t v18 = v111;
  __int128 v115 = v18;
  if (!objc_getProperty(a1, v19, 72LL, 1)) {
    goto LABEL_59;
  }
  id v155 = 0u;
  id v156 = 0u;
  id v153 = 0u;
  uint64_t v154 = 0u;
  id obj = objc_getProperty(a1, v20, 72LL, 1);
  unsigned int v116 = [obj countByEnumeratingWithState:&v153 objects:v171 count:16];
  if (!v116) {
    goto LABEL_58;
  }
  __int128 v113 = *(void *)v154;
  do
  {
    for (id i = 0LL; i != v116; id i = (char *)i + 1)
    {
      if (*(void *)v154 != v113) {
        objc_enumerationMutation(obj);
      }
      uint64_t v23 = *(const char **)(*((void *)&v153 + 1) + 8LL * (void)i);
      uint64_t v24 = objc_msgSend(objc_getProperty(a1, v21, 72, 1), "objectForKeyedSubscript:", v23);
      id v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      id v26 = (const char *)[v25 unsignedLongLongValue];

      if (v18)
      {
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v18, "objectForKeyedSubscript:", v23));
        uint64_t v18 = (NSDictionary *)[v27 unsignedLongLongValue];
      }

      uint64_t is_debug_logging_enabled = nelog_is_debug_logging_enabled();
      if ((_DWORD)is_debug_logging_enabled)
      {
        id v30 = ne_log_obj(is_debug_logging_enabled, v29);
        BOOL v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = 138412802;
          id v164 = v23;
          id v165 = 2048;
          id v166 = v26;
          id v167 = 2048;
          uint64_t v168 = v18;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEBUG,  "Interface %@: flags %llx -> %llx",  buf,  0x20u);
        }
      }

      __int128 v129 = v18;
      id v32 = (void *)objc_claimAutoreleasedReturnValue([a1 primaryPhysicalInterface]);
      id v33 = (void *)objc_claimAutoreleasedReturnValue([v32 interfaceName]);
      uint64_t v34 = [v33 isEqualToString:v23];

      id v36 = "Secondary";
      if (v34
        && (id v35 = objc_msgSend(objc_getProperty(a1, v21, 168, 1), "isEqualToString:", v23),
            id v36 = "Primary",
            (v35 & 1) == 0))
      {
        uint64_t v38 = ne_log_obj(v35, v21);
        id v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
        {
          id Property = (const char *)objc_getProperty(a1, v40, 168LL, 1);
          *(_DWORD *)__int128 buf = 138412546;
          id v164 = Property;
          id v165 = 2112;
          id v166 = v23;
          _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_INFO,  "Primary physical interface changed: %@ -> %@",  buf,  0x16u);
        }

        int v37 = v129;
      }

      else
      {
        int v37 = v129;
      }

      id v42 = ne_log_obj(v35, v21);
      id v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 136315394;
        id v164 = v36;
        id v165 = 2112;
        id v166 = v23;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "%s Interface %@: flags changed", buf, 0x16u);
      }

LABEL_39:
      unsigned int v118 = i;
      id v151 = 0u;
      id v152 = 0u;
      uint64_t v149 = 0u;
      id v150 = 0u;
      uint64_t v120 = objc_getProperty(a1, v21, 120LL, 1);
      __int128 v124 = [v120 countByEnumeratingWithState:&v149 objects:v170 count:16];
      if (v124)
      {
        __int128 v122 = *(id *)v150;
        do
        {
          id v45 = 0LL;
          do
          {
            if (*(id *)v150 != v122) {
              objc_enumerationMutation(v120);
            }
            __int128 v126 = v45;
            SEL v46 = *(void *)(*((void *)&v149 + 1) + 8 * v45);
            id v145 = 0u;
            uint64_t v146 = 0u;
            id v147 = 0u;
            uint64_t v148 = 0u;
            id v47 = objc_msgSend(objc_getProperty(a1, v44, 120, 1), "objectForKeyedSubscript:", v46);
            __int128 v130 = (id)objc_claimAutoreleasedReturnValue(v47);
            id v48 = [v130 countByEnumeratingWithState:&v145 objects:v169 count:16];
            if (v48)
            {
              BOOL v50 = v48;
              uint64_t v51 = *(void *)v146;
              do
              {
                uint64_t v52 = 0LL;
                do
                {
                  if (*(void *)v146 != v51) {
                    objc_enumerationMutation(v130);
                  }
                  uint64_t v53 = *(void *)(*((void *)&v145 + 1) + 8LL * (void)v52);
                  id v54 = ne_log_obj(v48, v49);
                  uint64_t v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
                  if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
                  {
                    id v57 = objc_msgSend(objc_getProperty(a1, v56, 120, 1), "objectForKeyedSubscript:", v46);
                    id v58 = v26;
                    id v59 = (void *)objc_claimAutoreleasedReturnValue(v57);
                    id v60 = (char *)objc_claimAutoreleasedReturnValue([v59 objectForKeyedSubscript:v53]);
                    *(_DWORD *)__int128 buf = 138412546;
                    id v164 = v23;
                    id v165 = 2112;
                    id v166 = v60;
                    _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_INFO,  "Passing interface (%@) change event to %@",  buf,  0x16u);

                    id v26 = v58;
                    int v37 = v129;
                  }

                  uint64_t v62 = objc_msgSend(objc_getProperty(a1, v61, 120, 1), "objectForKeyedSubscript:", v46);
                  id v63 = (void *)objc_claimAutoreleasedReturnValue(v62);
                  unsigned int v64 = (void *)objc_claimAutoreleasedReturnValue([v63 objectForKeyedSubscript:v53]);
                  [v64 handleChangeEventForInterface:v23 newFlags:v37 previousFlags:v26];

                  uint64_t v52 = (char *)v52 + 1;
                }

                while (v50 != v52);
                id v48 = [v130 countByEnumeratingWithState:&v145 objects:v169 count:16];
                BOOL v50 = v48;
              }

              while (v48);
            }

            id v45 = v126 + 1;
          }

          while ((id)(v126 + 1) != v124);
          __int128 v124 = [v120 countByEnumeratingWithState:&v149 objects:v170 count:16];
        }

        while (v124);
      }

      id i = v118;
LABEL_56:
      uint64_t v18 = v115;
    }

    unsigned int v116 = [obj countByEnumeratingWithState:&v153 objects:v171 count:16];
  }

  while (v116);
LABEL_58:

LABEL_59:
  if (v18)
  {
    id v143 = 0u;
    id v144 = 0u;
    SEL v141 = 0u;
    uint64_t v142 = 0u;
    id v65 = v18;
    id v66 = -[NSDictionary countByEnumeratingWithState:objects:count:]( v65,  "countByEnumeratingWithState:objects:count:",  &v141,  buf,  16LL);
    if (v66)
    {
      uint64_t v67 = v66;
      uint64_t v68 = *(void *)v142;
      uint64_t v117 = v65;
      __int128 v114 = *(void *)v142;
      do
      {
        id v69 = 0LL;
        unsigned int v119 = v67;
        do
        {
          if (*(void *)v142 != v68) {
            objc_enumerationMutation(v65);
          }
          uint64_t v70 = *(void *)(*((void *)&v141 + 1) + 8LL * (void)v69);
          id v71 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v65, "objectForKeyedSubscript:", v70));
          __int128 v131 = [v71 unsignedLongLongValue];

          if (!objc_getProperty(a1, v72, 72LL, 1)
            || (id v74 = objc_msgSend(objc_getProperty(a1, v73, 72, 1), "objectForKeyedSubscript:", v70),
                id v75 = (void *)objc_claimAutoreleasedReturnValue(v74),
                v75,
                !v75))
          {
            SEL v76 = nelog_is_debug_logging_enabled();
            if ((_DWORD)v76)
            {
              id v78 = ne_log_obj(v76, v77);
              SEL v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
              if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)id v159 = 138412546;
                id v160 = v70;
                id v161 = 2048;
                id v162 = v131;
                _os_log_debug_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEBUG,  "Interface %@ showed up with flags %llx",  v159,  0x16u);
              }
            }

            if ((v131 & 3) != 0)
            {
              id v121 = v69;
              id v80 = ne_log_obj(v76, v77);
              __int128 v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
              if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)id v159 = 138412290;
                id v160 = v70;
                _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_INFO,  "Interface %@ showed up with an address",  v159,  0xCu);
              }

              uint64_t v139 = 0u;
              uint64_t v140 = 0u;
              id v137 = 0u;
              __int128 v138 = 0u;
              __int128 v123 = objc_getProperty(a1, v82, 120LL, 1);
              __int128 v127 = [v123 countByEnumeratingWithState:&v137 objects:v158 count:16];
              if (v127)
              {
                __int128 v125 = *(void *)v138;
                do
                {
                  id v84 = 0LL;
                  do
                  {
                    if (*(void *)v138 != v125) {
                      objc_enumerationMutation(v123);
                    }
                    __int128 v128 = v84;
                    SEL v85 = *(void *)(*((void *)&v137 + 1) + 8 * v84);
                    unsigned int v133 = 0u;
                    id v134 = 0u;
                    id v135 = 0u;
                    uint64_t v136 = 0u;
                    id v86 = objc_msgSend(objc_getProperty(a1, v83, 120, 1), "objectForKeyedSubscript:", v85);
                    id v87 = (void *)objc_claimAutoreleasedReturnValue(v86);
                    SEL v88 = [v87 countByEnumeratingWithState:&v133 objects:v157 count:16];
                    if (v88)
                    {
                      uint64_t v90 = v88;
                      SEL v91 = *(void *)v134;
                      do
                      {
                        id v92 = 0LL;
                        do
                        {
                          if (*(void *)v134 != v91) {
                            objc_enumerationMutation(v87);
                          }
                          uint64_t v93 = *(void *)(*((void *)&v133 + 1) + 8LL * (void)v92);
                          id v94 = ne_log_obj(v88, v89);
                          id v95 = (os_log_s *)objc_claimAutoreleasedReturnValue(v94);
                          if (os_log_type_enabled(v95, OS_LOG_TYPE_INFO))
                          {
                            id v97 = objc_msgSend(objc_getProperty(a1, v96, 120, 1), "objectForKeyedSubscript:", v85);
                            id v98 = (void *)objc_claimAutoreleasedReturnValue(v97);
                            id v99 = (void *)objc_claimAutoreleasedReturnValue([v98 objectForKeyedSubscript:v93]);
                            *(_DWORD *)id v159 = 138412546;
                            id v160 = v70;
                            id v161 = 2112;
                            id v162 = v99;
                            _os_log_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_INFO,  "Passing interface (%@) change event to %@",  v159,  0x16u);
                          }

                          unsigned int v101 = objc_msgSend(objc_getProperty(a1, v100, 120, 1), "objectForKeyedSubscript:", v85);
                          BOOL v102 = (void *)objc_claimAutoreleasedReturnValue(v101);
                          id v103 = (void *)objc_claimAutoreleasedReturnValue([v102 objectForKeyedSubscript:v93]);
                          [v103 handleChangeEventForInterface:v70 newFlags:v131 previousFlags:0];

                          id v92 = (char *)v92 + 1;
                        }

                        while (v90 != v92);
                        SEL v88 = [v87 countByEnumeratingWithState:&v133 objects:v157 count:16];
                        uint64_t v90 = v88;
                      }

                      while (v88);
                    }

                    id v84 = v128 + 1;
                  }

                  while ((id)(v128 + 1) != v127);
                  __int128 v127 = [v123 countByEnumeratingWithState:&v137 objects:v158 count:16];
                }

                while (v127);
              }

              id v65 = v117;
              uint64_t v67 = v119;
              uint64_t v68 = v114;
              id v69 = v121;
            }
          }

          id v69 = (char *)v69 + 1;
        }

        while (v69 != v67);
        uint64_t v67 = -[NSDictionary countByEnumeratingWithState:objects:count:]( v65,  "countByEnumeratingWithState:objects:count:",  &v141,  buf,  16LL);
      }

      while (v67);
    }

    uint64_t v18 = v115;
  }

  objc_setProperty_atomic(a1, v104, v18, 72LL);
  id v105 = (void *)objc_claimAutoreleasedReturnValue([a1 primaryPhysicalInterface]);
  id v106 = (void *)objc_claimAutoreleasedReturnValue([v105 interfaceName]);
  objc_setProperty_atomic(a1, v107, v106, 168LL);

LABEL_95:
}
}
}

      uint64_t v7 = 0LL;
      goto LABEL_10;
    }

    return 0LL;
  }

  int v2 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 VPN]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
  int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 VPN]);
LABEL_8:
  uint64_t v6 = v5;
  uint64_t v7 = [v5 isEnabled];

LABEL_10:
  return v7;
}

void sub_100049300(_Unwind_Exception *a1)
{
}

void sub_1000497B0(_Unwind_Exception *a1)
{
}

id sub_1000499B0(uint64_t a1)
{
  return [*(id *)(a1 + 32) uninstallOnQueue];
}

id sub_1000499B8(uint64_t a1)
{
  return [*(id *)(a1 + 32) uninstallOnQueue];
}

void sub_1000499C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(id *)(a1 + 32);
  objc_sync_enter(v7);
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v8, 120LL, 1);
  }
  id v10 = Property;
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:*(void *)(a1 + 40)]);

  if (v11)
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [*(id *)(a1 + 48) type]));
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:v14]);

    if (v15 == *(void **)(a1 + 48))
    {
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472LL;
      v30[2] = sub_100049CAC;
      v30[3] = &unk_1000BED30;
      v30[4] = *(void *)(a1 + 32);
      id v31 = v15;
      id v32 = *(id *)(a1 + 56);
      [v31 handleUpdateConfiguration:v5 withCompletionHandler:v30];
    }

    else
    {
      uint64_t v18 = ne_log_obj(v16, v17);
      id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = *(void *)(a1 + 40);
        id v22 = *(void **)(a1 + 48);
        uint64_t v24 = *(void *)(a1 + 32);
        unsigned int v25 = [v22 type];
        uint64_t v26 = *(void *)(a1 + 48);
        *(_DWORD *)__int128 buf = 138413314;
        uint64_t v34 = v24;
        __int16 v35 = 2112;
        id v36 = v22;
        __int16 v37 = 2112;
        uint64_t v38 = v23;
        __int16 v39 = 1024;
        unsigned int v40 = v25;
        __int16 v41 = 2112;
        uint64_t v42 = v26;
        _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "%@: Failed to register session %@, session with ID %@ and type %d is different: %@",  buf,  0x30u);
      }

      (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    }
  }

  else
  {
    uint64_t v20 = ne_log_obj(v12, v13);
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = *(void *)(a1 + 40);
      uint64_t v27 = *(void **)(a1 + 48);
      uint64_t v29 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412802;
      uint64_t v34 = v29;
      __int16 v35 = 2112;
      id v36 = v27;
      __int16 v37 = 2112;
      uint64_t v38 = v28;
      _os_log_error_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%@: Failed to register session %@, session with ID %@ not found",  buf,  0x20u);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  objc_sync_exit(v7);
}

void sub_100049C80(_Unwind_Exception *a1)
{
}

void sub_100049CAC(uint64_t a1, const char *a2)
{
  id v3 = *(void **)(a1 + 32);
  if (v3)
  {
    id Property = (dispatch_queue_s *)objc_getProperty(v3, a2, 88LL, 1);
    uint64_t v5 = *(void *)(a1 + 32);
  }

  else
  {
    uint64_t v5 = 0LL;
    id Property = 0LL;
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100049D5C;
  block[3] = &unk_1000BED30;
  void block[4] = v5;
  id v7 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  dispatch_async(Property, block);
}

void sub_100049D5C(id *a1)
{
  id obj = a1[4];
  objc_sync_enter(obj);
  if ([a1[5] type] != 3)
  {
    id v33 = a1[4];
    if (v33)
    {
      id Property = objc_getProperty(v33, v3, 176LL, 1);
      if (Property) {
        goto LABEL_42;
      }
    }

    unsigned int v42 = [a1[5] type];
    id v43 = a1[5];
    if (v42 == 4)
    {
      uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v43 configuration]);
      id v45 = (void *)objc_claimAutoreleasedReturnValue([v44 contentFilter]);
      unsigned int v46 = [v45 isEnabled];

      if (!v46) {
        goto LABEL_42;
      }
      id v47 = (void *)objc_claimAutoreleasedReturnValue([a1[5] configuration]);
      id v48 = (void *)objc_claimAutoreleasedReturnValue([v47 externalIdentifier]);

      if (!v48)
      {
        id v50 = a1[4];
        if (v50)
        {
          id v51 = objc_getProperty(v50, v49, 224LL, 1);
          if (v51)
          {
            uint64_t v53 = v51;
            id v54 = a1[4];
            id v55 = v54 ? objc_getProperty(v54, v52, 224LL, 1) : 0LL;
            id v56 = a1[5];

            if (v55 != v56)
            {
              id v57 = a1[4];
              if (v57) {
                id v57 = objc_getProperty(v57, v52, 224LL, 1);
              }
              id v58 = v57;
              [v58 stopIfNecessaryWithReason:33];
            }
          }

          id v59 = a1[4];
          if (v59) {
            objc_setProperty_atomic(v59, v52, a1[5], 224LL);
          }
        }
      }

      id v60 = a1[5];
      uint64_t v61 = sub_1000708F4(v60);
      if ((v61 & 1) != 0)
      {
        uint64_t v63 = ne_log_obj(v61, v62);
        unsigned int v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
        {
          id v65 = a1[4];
          id v66 = (void *)objc_claimAutoreleasedReturnValue([v60 configuration]);
          uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue([v66 name]);
          id v68 = a1[5];
          *(_DWORD *)__int128 buf = 138412802;
          id v254 = v65;
          __int16 v255 = 2112;
          *(void *)id v256 = v67;
          *(_WORD *)&v256[8] = 2112;
          id v257 = v68;
          _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "%@: <%@> Register Filter Session: %@",  buf,  0x20u);
        }
      }

      else
      {
        uint64_t v132 = ne_log_obj(v61, v62);
        unsigned int v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v132);
        if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
        {
          id v221 = a1[4];
          id v222 = (void *)objc_claimAutoreleasedReturnValue([v60 configuration]);
          uint64_t v223 = (void *)objc_claimAutoreleasedReturnValue([v222 name]);
          *(_DWORD *)__int128 buf = 138412546;
          id v254 = v221;
          __int16 v255 = 2112;
          *(void *)id v256 = v223;
          _os_log_error_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_ERROR,  "%@: <%@> Failed to allocate a control unit",  buf,  0x16u);
        }
      }

      (*((void (**)(void))a1[6] + 2))();
      goto LABEL_113;
    }

    unsigned int v69 = [v43 type];
    id v70 = a1[5];
    if (v69 == 1)
    {
      id v71 = (void *)objc_claimAutoreleasedReturnValue([v70 configuration]);
      id v72 = [v71 grade];

      id v73 = a1[5];
      if (v72 != (id)1)
      {
        id v107 = (void *)objc_claimAutoreleasedReturnValue([v73 configuration]);
        id v108 = (void *)objc_claimAutoreleasedReturnValue([v107 VPN]);
        unsigned int v109 = [v108 isEnabled];

        if (!v109) {
          goto LABEL_42;
        }
        uint64_t v110 = ne_log_obj(Property, v8);
        unsigned int v111 = (os_log_s *)objc_claimAutoreleasedReturnValue(v110);
        if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
        {
          id v112 = a1[4];
          *(_DWORD *)__int128 buf = 138412290;
          id v254 = v112;
          _os_log_impl( (void *)&_mh_execute_header,  v111,  OS_LOG_TYPE_DEFAULT,  "%@: Register Personal VPN Session enabled",  buf,  0xCu);
        }

        __int128 v248 = 0u;
        __int128 v249 = 0u;
        __int128 v246 = 0u;
        __int128 v247 = 0u;
        id v114 = a1[4];
        if (v114) {
          id v114 = objc_getProperty(v114, v113, 120LL, 1);
        }
        id v242 = v114;
        __int128 v115 = 0LL;
        id v117 = [v242 countByEnumeratingWithState:&v246 objects:v264 count:16];
        if (v117)
        {
          unsigned int v118 = *(void **)v247;
          while (2)
          {
            for (id i = 0LL; i != v117; id i = (char *)i + 1)
            {
              uint64_t v120 = *(void *)(*((void *)&v246 + 1) + 8LL * (void)i);
              id v121 = a1[4];
              if (v121) {
                id v121 = objc_getProperty(v121, v116, 120LL, 1);
              }
              id v122 = v121;
              __int128 v123 = (void *)objc_claimAutoreleasedReturnValue([v122 objectForKeyedSubscript:v120]);
              __int128 v124 = (void *)objc_claimAutoreleasedReturnValue([v123 objectForKeyedSubscript:&off_1000C17E8]);

              __int128 v125 = (void *)objc_claimAutoreleasedReturnValue([v124 configuration]);
              LODWORD(v123) = [v125 grade] == (id)1;

              if ((_DWORD)v123)
              {
                id v60 = v124;

                __int128 v126 = (void *)objc_claimAutoreleasedReturnValue([v60 configuration]);
                __int128 v127 = (void *)objc_claimAutoreleasedReturnValue([v126 VPN]);
                __int128 v128 = (void *)objc_claimAutoreleasedReturnValue([v127 protocol]);
                unsigned __int8 v129 = [v128 includeAllNetworks];

                if ((v129 & 1) != 0)
                {

                  int v131 = 0;
                  goto LABEL_133;
                }

                __int128 v115 = v60;
              }
            }

            id v117 = [v242 countByEnumeratingWithState:&v246 objects:v264 count:16];
            if (v117) {
              continue;
            }
            break;
          }

          if (!v115)
          {
            id v60 = 0LL;
            goto LABEL_187;
          }

          id v242 = (id)objc_claimAutoreleasedReturnValue([a1[5] configuration]);
          id v117 = (id)objc_claimAutoreleasedReturnValue([v242 VPN]);
          unsigned int v118 = (void *)objc_claimAutoreleasedReturnValue([v117 protocol]);
          if (([v118 includeAllNetworks] & 1) == 0)
          {

            goto LABEL_186;
          }

          int v131 = 1;
          id v60 = v115;
LABEL_133:
          id v159 = (void *)objc_claimAutoreleasedReturnValue([v60 configuration]);
          id v160 = (void *)objc_claimAutoreleasedReturnValue([v159 VPN]);
          BOOL v161 = [v160 isEnabled]

          if (v131)
          {

            if (!v161) {
              goto LABEL_187;
            }
          }

          else if (!v161)
          {
            goto LABEL_187;
          }

          uint64_t v200 = ne_log_obj(v170, v130);
          uint64_t v201 = (os_log_s *)objc_claimAutoreleasedReturnValue(v200);
          if (os_log_type_enabled(v201, OS_LOG_TYPE_DEFAULT))
          {
            id v239 = a1[4];
            id v244 = (id)objc_claimAutoreleasedReturnValue([a1[5] configuration]);
            id v241 = (void *)objc_claimAutoreleasedReturnValue([v244 VPN]);
            uint64_t v202 = (void *)objc_claimAutoreleasedReturnValue([v241 protocol]);
            else {
              uint64_t v203 = "";
            }
            id v204 = a1[5];
            __int128 v205 = (void *)objc_claimAutoreleasedReturnValue([v60 configuration]);
            id v206 = (void *)objc_claimAutoreleasedReturnValue([v205 VPN]);
            __int16 v207 = (void *)objc_claimAutoreleasedReturnValue([v206 protocol]);
            unsigned int v208 = [v207 includeAllNetworks];
            unsigned int v209 = [v60 status];
            id v210 = "";
            if (v208) {
              id v210 = "IncludeAllNetworks ";
            }
            *(_DWORD *)__int128 buf = 138413570;
            id v254 = v239;
            __int16 v255 = 2080;
            *(void *)id v256 = v203;
            *(_WORD *)&v256[8] = 2112;
            id v257 = v204;
            __int16 v258 = 2080;
            uint64_t v259 = v210;
            __int16 v260 = 2112;
            id v261 = v60;
            __int16 v262 = 1024;
            unsigned int v263 = v209;
            _os_log_impl( (void *)&_mh_execute_header,  v201,  OS_LOG_TYPE_DEFAULT,  "%@: Failed to register Personal %sVPN Session %@ due to Enterprise %sVPN session %@ (status %d)",  buf,  0x3Au);
          }

          __int128 v211 = (void *)objc_claimAutoreleasedReturnValue([a1[5] configuration]);
          __int128 v212 = (void *)objc_claimAutoreleasedReturnValue([v211 VPN]);
          unsigned int v213 = [v212 isOnDemandEnabled];

          if (v213) {
            [a1[5] pauseOnDemand];
          }
          id v214 = (void (**)(id, void))a1[6];
          if (v214) {
            v214[2](v214, 0LL);
          }
        }

        else
        {
LABEL_186:

          id v60 = v115;
LABEL_187:
          id v224 = a1[4];
          if (v224)
          {
            id v225 = objc_getProperty(v224, v130, 208LL, 1);
            if (v225)
            {
              id v226 = v225;
              id v227 = a1[4];
              if (v227) {
                id v227 = objc_getProperty(v227, v130, 208LL, 1);
              }
              BOOL v228 = v227 == a1[5];

              if (!v228)
              {
                id v229 = a1[4];
                if (v229) {
                  id v229 = objc_getProperty(v229, v130, 208LL, 1);
                }
                id v230 = v229;
                [v230 stopIfNecessaryWithReason:33];
              }
            }

            id v224 = a1[4];
            if (v224) {
              objc_setProperty_atomic(v224, v130, a1[5], 208LL);
            }
          }

          uint64_t v231 = ne_log_obj(v224, v130);
          id v232 = (os_log_s *)objc_claimAutoreleasedReturnValue(v231);
          if (os_log_type_enabled(v232, OS_LOG_TYPE_DEFAULT))
          {
            id v233 = a1[4];
            id v234 = a1[5];
            *(_DWORD *)__int128 buf = 138412546;
            id v254 = v233;
            __int16 v255 = 2112;
            *(void *)id v256 = v234;
            _os_log_impl( (void *)&_mh_execute_header,  v232,  OS_LOG_TYPE_DEFAULT,  "%@: Register Personal VPN Session: %@",  buf,  0x16u);
          }

          id v235 = (void *)objc_claimAutoreleasedReturnValue([a1[5] configuration]);
          __int128 v236 = (void *)objc_claimAutoreleasedReturnValue([v235 VPN]);
          unsigned int v237 = [v236 isOnDemandEnabled];

          if (v237) {
            [a1[5] unpauseOnDemand];
          }
          (*((void (**)(void))a1[6] + 2))();
        }

LABEL_167:
LABEL_39:
      id v31 = (void (**)(id, uint64_t))a1[6];
      uint64_t v32 = 1LL;
LABEL_46:
      v31[2](v31, v32);
      goto LABEL_47;
    }

    unsigned int v90 = [v70 type];
    id v91 = a1[5];
    if (v90 == 2)
    {
      id v92 = (void *)objc_claimAutoreleasedReturnValue([v91 configuration]);
      id v93 = [v92 grade];
      if (v93 != (id)1)
      {
        BOOL v1 = (void *)objc_claimAutoreleasedReturnValue([a1[5] configuration]);
        if ([v1 grade] != (id)3)
        {

          goto LABEL_42;
        }
      }

      id v94 = (void *)objc_claimAutoreleasedReturnValue([a1[5] configuration]);
      id v95 = (void *)objc_claimAutoreleasedReturnValue([v94 appVPN]);
      unsigned int v96 = [v95 isEnabled];

      if (v93 == (id)1)
      {

        if (!v96) {
          goto LABEL_42;
        }
      }

      else
      {

        if ((v96 & 1) == 0) {
          goto LABEL_42;
        }
      }

      id v154 = [a1[5] setIsDeregisteredAppVPNSession:0];
      uint64_t v156 = ne_log_obj(v154, v155);
      id v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v156);
      if (!os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_167;
      }
      id v157 = a1[4];
      id v158 = a1[5];
      *(_DWORD *)__int128 buf = 138412546;
      id v254 = v157;
      __int16 v255 = 2112;
      *(void *)id v256 = v158;
      id v106 = "%@: Register App VPN Session: %@";
    }

    else
    {
      unsigned int v97 = [v91 type];
      id v98 = a1[5];
      if (v97 == 5)
      {
        id v99 = (void *)objc_claimAutoreleasedReturnValue([v98 configuration]);
        id v100 = (void *)objc_claimAutoreleasedReturnValue([v99 pathController]);
        unsigned int v101 = [v100 isEnabled];

        if (!v101) {
          goto LABEL_42;
        }
        uint64_t v102 = ne_log_obj(Property, v8);
        id v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);
        if (!os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_167;
        }
        id v104 = a1[4];
        id v105 = a1[5];
        *(_DWORD *)__int128 buf = 138412546;
        id v254 = v104;
        __int16 v255 = 2112;
        *(void *)id v256 = v105;
        id v106 = "%@: Register Path Controller Session: %@";
      }

      else
      {
        unsigned int v133 = [v98 type];
        id v134 = a1[5];
        if (v133 == 6)
        {
          id v135 = (void *)objc_claimAutoreleasedReturnValue([v134 configuration]);
          uint64_t v136 = (void *)objc_claimAutoreleasedReturnValue([v135 dnsProxy]);
          unsigned int v137 = [v136 isEnabled];

          if (!v137) {
            goto LABEL_42;
          }
          __int128 v138 = (void *)objc_claimAutoreleasedReturnValue([a1[5] configuration]);
          uint64_t v139 = (void *)objc_claimAutoreleasedReturnValue([v138 externalIdentifier]);

          if (!v139)
          {
            id v140 = a1[4];
            if (v140)
            {
              id v142 = objc_getProperty(v140, v141, 232LL, 1);
              if (v142)
              {
                id v143 = v142;
                id v144 = a1[4];
                id v145 = v144 ? objc_getProperty(v144, v141, 232LL, 1) : 0LL;
                id v146 = a1[5];

                if (v145 != v146)
                {
                  id v147 = a1[4];
                  if (v147) {
                    id v147 = objc_getProperty(v147, v141, 232LL, 1);
                  }
                  id v148 = v147;
                  [v148 stopIfNecessaryWithReason:33];
                }
              }

              id v140 = a1[4];
              if (v140) {
                objc_setProperty_atomic(v140, v141, a1[5], 232LL);
              }
            }
          }

          uint64_t v149 = ne_log_obj(v140, v141);
          id v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v149);
          if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
          {
            id v150 = a1[4];
            id v151 = (void *)objc_claimAutoreleasedReturnValue([a1[5] configuration]);
            id v152 = (void *)objc_claimAutoreleasedReturnValue([v151 name]);
            id v153 = a1[5];
            *(_DWORD *)__int128 buf = 138412802;
            id v254 = v150;
            __int16 v255 = 2112;
            *(void *)id v256 = v152;
            *(_WORD *)&v256[8] = 2112;
            id v257 = v153;
            _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_DEFAULT,  "%@: <%@> Register DNS Proxy Session: %@",  buf,  0x20u);
          }

          goto LABEL_167;
        }

        unsigned int v162 = [v134 type];
        id v163 = a1[5];
        if (v162 != 7)
        {
          id Property = [v163 type];
          if ((_DWORD)Property != 9) {
            goto LABEL_42;
          }
          __int128 v215 = (void *)objc_claimAutoreleasedReturnValue([a1[5] configuration]);
          __int128 v216 = (void *)objc_claimAutoreleasedReturnValue([v215 relay]);
          unsigned int v217 = [v216 isEnabled];

          if (!v217) {
            goto LABEL_42;
          }
          uint64_t v218 = ne_log_obj(Property, v8);
          id v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v218);
          if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
          {
            id v219 = a1[4];
            id v220 = a1[5];
            *(_DWORD *)__int128 buf = 138412546;
            id v254 = v219;
            __int16 v255 = 2112;
            *(void *)id v256 = v220;
            id v106 = "%@: Register Relay Session: %@";
            goto LABEL_166;
          }

          goto LABEL_167;
        }

        id v164 = (void *)objc_claimAutoreleasedReturnValue([v163 configuration]);
        id v165 = (void *)objc_claimAutoreleasedReturnValue([v164 dnsSettings]);
        unsigned int v166 = [v165 isEnabled];

        if (!v166) {
          goto LABEL_42;
        }
        uint64_t v167 = ne_log_obj(Property, v8);
        id v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v167);
        if (!os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_167;
        }
        id v168 = a1[4];
        id v169 = a1[5];
        *(_DWORD *)__int128 buf = 138412546;
        id v254 = v168;
        __int16 v255 = 2112;
        *(void *)id v256 = v169;
        id v106 = "%@: Register DNS Settings Session: %@";
      }
    }

LABEL_166:
    _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, v106, buf, 0x16u);
    goto LABEL_167;
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue([a1[5] configuration]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 alwaysOnVPN]);
  unsigned int v6 = [v5 isEnabled];

  if (v6)
  {
    id v9 = a1[4];
    if (!v9) {
      goto LABEL_35;
    }
    id v10 = objc_getProperty(v9, v8, 176LL, 1);
    if (v10)
    {
      id v11 = v10;
      id v12 = a1[4];
      id v13 = v12 ? objc_getProperty(v12, v8, 176LL, 1) : 0LL;
      id v14 = a1[5];

      if (v13 != v14)
      {
        id v15 = a1[4];
        if (v15) {
          id v15 = objc_getProperty(v15, v8, 176LL, 1);
        }
        id v16 = v15;
        [v16 stopIfNecessaryWithReason:33];
      }
    }

    id v9 = a1[4];
    if (!v9) {
      goto LABEL_35;
    }
    id v17 = objc_getProperty(v9, v8, 192LL, 1);
    id v9 = a1[4];
    if (v17)
    {
      if (v9) {
        id v9 = objc_getProperty(v9, v8, 192LL, 1);
      }
      id v18 = v9;
      [v18 stopIfNecessaryWithReason:33];

      id v9 = a1[4];
      if (!v9) {
        goto LABEL_35;
      }
      objc_setProperty_atomic(v9, v8, 0LL, 192LL);
      id v9 = a1[4];
    }

    if (v9)
    {
      id v19 = objc_getProperty(v9, v8, 208LL, 1);
      id v9 = a1[4];
      if (v19)
      {
        if (v9) {
          id v9 = objc_getProperty(v9, v8, 208LL, 1);
        }
        id v20 = v9;
        [v20 stopIfNecessaryWithReason:33];

        id v9 = a1[4];
        if (!v9) {
          goto LABEL_35;
        }
        objc_setProperty_atomic(v9, v8, 0LL, 208LL);
        id v9 = a1[4];
      }

      if (v9)
      {
        id v21 = objc_getProperty(v9, v8, 232LL, 1);
        id v9 = a1[4];
        if (v21)
        {
          if (v9) {
            id v9 = objc_getProperty(v9, v8, 232LL, 1);
          }
          id v22 = v9;
          [v22 stopIfNecessaryWithReason:33];

          id v9 = a1[4];
          if (!v9) {
            goto LABEL_35;
          }
          objc_setProperty_atomic(v9, v8, 0LL, 232LL);
          id v9 = a1[4];
        }

        if (v9)
        {
          id v9 = objc_getProperty(v9, v8, 224LL, 1);
          if (v9)
          {
            id v23 = a1[4];
            if (v23) {
              id v23 = objc_getProperty(v23, v8, 224LL, 1);
            }
            id v24 = v23;
            [v24 stopIfNecessaryWithReason:33];

            id v9 = a1[4];
            if (v9) {
              objc_setProperty_atomic(v9, v8, 0LL, 224LL);
            }
          }
        }
      }
    }

LABEL_47:
  objc_sync_exit(obj);
}

    id v19 = v19->ifa_next;
    if (!v19)
    {
      unsigned int v46 = v57;
      id v9 = v50;
      id v11 = v54;
      goto LABEL_51;
    }
  }

  id v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v19->ifa_name));
  id v31 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](&OBJC_CLASS___NEPolicyCondition, "scopedInterface:", v30));

  uint64_t v32 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v55 = (void *)v31;
  id v60 = v31;
  id v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v60, 1LL));
  uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray arrayByAddingObjectsFromArray:](v32, "arrayByAddingObjectsFromArray:", v33));

  __int16 v35 = [[NEPolicy alloc] initWithOrder:v53 result:v10 conditions:v34];
  id v36 = [v56 addPolicy:v35];
  uint64_t is_debug_logging_enabled = nelog_is_debug_logging_enabled();
  uint64_t v38 = is_debug_logging_enabled;
  unsigned int v40 = ne_log_obj(is_debug_logging_enabled, v39);
  __int16 v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
  unsigned int v42 = v41;
  if (v36)
  {
    if (v38)
    {
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = v49;
        id v59 = v35;
        _os_log_debug_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "Added policy: %@", buf, 0xCu);
      }
    }

    else if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
    {
      id v43 = (void *)objc_claimAutoreleasedReturnValue([v35 descriptionWithIndent:0 options:2]);
      *(_DWORD *)__int128 buf = v49;
      id v59 = v43;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);
    }

    if (v54)
    {
      uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v36));
      [v54 addObject:v44];
    }

    id v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v19->ifa_name));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v17, "setObject:forKeyedSubscript:", &off_1000C1800, v45);

    id v22 = v51;
    id v10 = v52;
    goto LABEL_47;
  }

  id v47 = os_log_type_enabled(v41, OS_LOG_TYPE_ERROR);
  if (v38)
  {
    id v11 = v54;
    if (v47)
    {
      *(_DWORD *)__int128 buf = v49;
      id v59 = v35;
      _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);
    }
  }

  else
  {
    id v11 = v54;
    if (v47)
    {
      id v48 = (void *)objc_claimAutoreleasedReturnValue([v35 descriptionWithIndent:0 options:2]);
      *(_DWORD *)__int128 buf = v49;
      id v59 = v48;
      _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);

      id v11 = v54;
    }
  }

  id v9 = v50;
  id v10 = v52;
LABEL_17:

LABEL_18:
}

    id v12 = 0LL;
    id v33 = v59;
    goto LABEL_54;
  }

  if (sa_family != 30) {
    goto LABEL_47;
  }
  id v58 = v35;
  unsigned int v40 = 16LL;
LABEL_35:
  __int16 v41 = v36 >> 3;
  unsigned int v42 = objc_claimAutoreleasedReturnValue(-[os_log_s allValues](v10, "allValues"));
  id v43 = 4LL;
  if (a3) {
    id v43 = 8LL;
  }
  uint64_t v44 = v40 - v41;
  id obja = (id)v42;
  if (v40 <= v41)
  {
    id v12 = 0LL;
    goto LABEL_53;
  }

  id v45 = (void *)v42;
  id v57 = v31;
  uint64_t v62 = v7;
  unsigned int v46 = 0;
  id v47 = &v38->sa_len + v43;
  id v48 = &v38->sa_len + v43 + v41;
  id v49 = v40;
  while (1)
  {
    arc4random_buf(v48, v44);
    id v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v47, v49));
LABEL_44:

    if (v46++ >= 0x1F)
    {
      id v12 = 0LL;
      id v7 = v62;
      goto LABEL_52;
    }
  }

  id v12 = v50;
  objc_opt_self(&OBJC_CLASS___NESMRelaySession);
  if (!v12)
  {
LABEL_43:

    id v45 = obja;
    id v49 = v40;
    goto LABEL_44;
  }

  sub_100076554((uint64_t)&OBJC_CLASS___NESMRelaySession);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1000CFC18);
  if ([(id)qword_1000CFC08 containsObject:v12])
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1000CFC18);
    goto LABEL_43;
  }

  [(id)qword_1000CFC08 addObject:v12];
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1000CFC18);

  if (!v10)
  {
    uint64_t v52 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    objc_setProperty_atomic(a1, v53, v52, *v60);

    id v10 = (os_log_s *)objc_getProperty(a1, v54, *v60, 1);
  }

  id v7 = v62;
  -[os_log_s setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v12, v62, v57);
  sub_1000763F8(a1, v62);
LABEL_52:
  id v31 = v57;
LABEL_53:
  __int16 v35 = v58;
  id v33 = v59;

LABEL_54:
LABEL_55:

LABEL_56:
LABEL_57:

  return v12;
}

void sub_10004B1BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

void sub_10004B244(uint64_t a1, const char *a2)
{
  id v3 = *(void **)(a1 + 32);
  if (v3)
  {
    id Property = (dispatch_queue_s *)objc_getProperty(v3, a2, 88LL, 1);
    uint64_t v5 = *(void *)(a1 + 32);
  }

  else
  {
    uint64_t v5 = 0LL;
    id Property = 0LL;
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10004B2F4;
  block[3] = &unk_1000BED30;
  void block[4] = v5;
  id v7 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  dispatch_async(Property, block);
}

uint64_t sub_10004B2F4(void *a1, uint64_t a2)
{
  uint64_t v3 = ne_log_obj(a1, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = a1[5];
    int v8 = 138412546;
    uint64_t v9 = v5;
    __int16 v10 = 2112;
    uint64_t v11 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%@: Register Enterprise VPN Session: %@",  (uint8_t *)&v8,  0x16u);
  }

  return (*(uint64_t (**)(void))(a1[6] + 16LL))();
}

void sub_10004B3B4(void *a1)
{
  if (a1)
  {
    self = a1;
    objc_sync_enter(self);
    if (objc_getProperty(self, v1, 248LL, 1))
    {
      id v3 = objc_getProperty(self, v2, 248LL, 1);
      [v3 removeObserver:self forKeyPath:@"path"];

      objc_setProperty_atomic(self, v4, 0LL, 248LL);
    }

    if (objc_getProperty(self, v2, 256LL, 1))
    {
      id v6 = objc_getProperty(self, v5, 256LL, 1);
      [v6 removeObserver:self forKeyPath:@"path"];

      objc_setProperty_atomic(self, v7, 0LL, 256LL);
    }

    if (objc_getProperty(self, v5, 264LL, 1))
    {
      id v9 = objc_getProperty(self, v8, 264LL, 1);
      [v9 removeObserver:self forKeyPath:@"path"];

      objc_setProperty_atomic(self, v10, 0LL, 264LL);
    }

    int v11 = self[5];
    if ((v11 & 0x80000000) == 0)
    {
      notify_cancel(v11);
      self[5] = -1;
    }

    *((_BYTE *)self + 11) = 0;
    objc_sync_exit(self);
  }

void sub_10004B510( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10004B524(void *a1)
{
  if (a1)
  {
    self = a1;
    objc_sync_enter(self);
    if (objc_getProperty(self, v1, 136LL, 1))
    {
      id v3 = (io_object_t *)objc_getProperty(self, v2, 136LL, 1);
      SEL v4 = v3;
      if (v3)
      {
        if (v3[2])
        {
          IODeregisterForSystemPower(v3 + 3);
          IONotificationPortSetDispatchQueue(*((IONotificationPortRef *)v4 + 8), 0LL);
          IONotificationPortDestroy(*((IONotificationPortRef *)v4 + 8));
          IOServiceClose(v4[2]);
        }
      }

      objc_setProperty_atomic(self, v5, 0LL, 136LL);
    }

    self[12] = 0;
    objc_sync_exit(self);
  }

void sub_10004B5E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10004B5F8(void *a1)
{
  if (a1)
  {
    self = a1;
    objc_sync_enter(self);
    int v1 = *((_DWORD *)self + 6);
    if ((v1 & 0x80000000) == 0)
    {
      notify_cancel(v1);
      *((_DWORD *)self + 6) = -1;
    }

    int v2 = (const __SCDynamicStore *)*((void *)self + 19);
    if (v2)
    {
      SCDynamicStoreSetDispatchQueue(v2, 0LL);
      CFRelease(*((CFTypeRef *)self + 19));
      *((void *)self + 19) = 0LL;
      objc_setProperty_atomic(self, v3, 0LL, 160LL);
    }

    *((_BYTE *)self + 13) = 0;
    objc_sync_exit(self);
  }

void sub_10004B698( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10004B6AC(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isEqualToString:@"path"])
  {
    SEL v4 = *(void **)(a1 + 40);
    SEL v3 = *(void **)(a1 + 48);
    if (v3) {
      id Property = objc_getProperty(v3, v2, 248LL, 1);
    }
    else {
      id Property = 0LL;
    }
    if ([v4 isEqual:Property])
    {
      id v7 = *(id *)(a1 + 48);
      if (v7) {
        id v7 = objc_getProperty(v7, v6, 248LL, 1);
      }
      int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 path]);
      id v9 = [v8 status];

      if (v9 == (id)1)
      {
        id v11 = *(id *)(a1 + 48);
        if (v11) {
          id v11 = objc_getProperty(v11, v10, 248LL, 1);
        }
        id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 path]);
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 interface]);
      }

      else
      {
        id v13 = 0LL;
      }

      uint64_t v24 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) primaryPhysicalInterface]);
      uint64_t v26 = (void *)v24;
      if (v24 || !v13)
      {
        uint64_t v27 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) primaryPhysicalInterface]);
        if (!v27)
        {

          goto LABEL_54;
        }

        id v28 = (void *)v27;
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) primaryPhysicalInterface]);
        id v30 = (void *)objc_claimAutoreleasedReturnValue([v29 interfaceName]);
        id v31 = (void *)objc_claimAutoreleasedReturnValue([v13 interfaceName]);
        unsigned __int8 v32 = [v30 isEqualToString:v31];

        if ((v32 & 1) != 0) {
          goto LABEL_54;
        }
      }

      uint64_t v33 = ne_log_obj(v24, v25);
      uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) primaryPhysicalInterface]);
        id v36 = (void *)objc_claimAutoreleasedReturnValue([v35 interfaceName]);
        unsigned int v37 = (void *)objc_claimAutoreleasedReturnValue([v13 interfaceName]);
        *(_DWORD *)__int128 buf = 138412546;
        __int128 v124 = v36;
        __int16 v125 = 2112;
        __int128 v126 = v37;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Changing primary physical interface: %@ => %@",  buf,  0x16u);
      }

      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) primaryPhysicalInterface]);
      unsigned int v39 = (void *)objc_claimAutoreleasedReturnValue([v38 interfaceName]);

      if (v39)
      {
        unsigned int v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) primaryPhysicalInterface]);
        id v41 = objc_claimAutoreleasedReturnValue([v40 interfaceName]);
        NEHelperCacheClearRedirectedAddresses([v41 UTF8String]);
      }

      [*(id *)(a1 + 48) setPrimaryPhysicalInterface:v13];
      id v43 = *(id *)(a1 + 48);
      if (v43) {
        id v43 = objc_getProperty(v43, v42, 248LL, 1);
      }
      uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v43 path]);
      unsigned int v46 = (void *)objc_claimAutoreleasedReturnValue([v44 cPath]);
      id v47 = *(void **)(a1 + 48);
      if (v47) {
        objc_setProperty_atomic(v47, v45, v46, 64LL);
      }

      sub_10004BFE4(*(void **)(a1 + 48), 1LL);
LABEL_54:
      id v76 = *(id *)(a1 + 48);
      if (v76) {
        id v76 = objc_getProperty(v76, v25, 248LL, 1);
      }
      id v77 = (void *)objc_claimAutoreleasedReturnValue([v76 path]);
      id v78 = [v77 status];

      id v80 = *(void **)(a1 + 48);
      if (!v80)
      {
        __int128 v119 = 0u;
        __int128 v120 = 0u;
        __int128 v117 = 0u;
        __int128 v118 = 0u;
        goto LABEL_61;
      }

      if ((id)v80[6] == v78)
      {
        __int128 v119 = 0u;
        __int128 v120 = 0u;
        __int128 v117 = 0u;
        __int128 v118 = 0u;
      }

      else
      {
        v80[6] = v78;
        id v80 = *(void **)(a1 + 48);
        __int128 v117 = 0u;
        __int128 v118 = 0u;
        __int128 v119 = 0u;
        __int128 v120 = 0u;
        if (!v80)
        {
LABEL_61:
          id v81 = v80;
          id v82 = [v81 countByEnumeratingWithState:&v117 objects:v122 count:16];
          if (v82)
          {
            id v83 = v82;
            uint64_t v84 = *(void *)v118;
            do
            {
              for (id i = 0LL; i != v83; id i = (char *)i + 1)
              {
                if (*(void *)v118 != v84) {
                  objc_enumerationMutation(v81);
                }
                id v86 = *(void **)(*((void *)&v117 + 1) + 8LL * (void)i);
                if (v78 == (id)1)
                {
                  id v87 = (void *)objc_claimAutoreleasedReturnValue([v13 interfaceName]);
                  [v86 satisfyPathResult:v87];
                }

                else
                {
                  [*(id *)(*((void *)&v117 + 1) + 8 * (void)i) satisfyPathResult:0];
                }
              }

              id v83 = [v81 countByEnumeratingWithState:&v117 objects:v122 count:16];
            }

            while (v83);
          }

          id v89 = *(id *)(a1 + 48);
          if (!v89) {
            goto LABEL_100;
          }
          ptrdiff_t v90 = 272LL;
LABEL_99:
          id v89 = objc_getProperty(v89, v88, v90, 1);
LABEL_100:
          objc_msgSend(v89, "removeAllObjects", (void)v113);
          goto LABEL_101;
        }
      }

      id v80 = objc_getProperty(v80, v79, 272LL, 1);
      goto LABEL_61;
    }

    id v15 = *(void **)(a1 + 40);
    id v14 = *(void **)(a1 + 48);
    if (v14) {
      id v16 = objc_getProperty(v14, v6, 256LL, 1);
    }
    else {
      id v16 = 0LL;
    }
    if ([v15 isEqual:v16])
    {
      id v18 = *(id *)(a1 + 48);
      if (v18) {
        id v18 = objc_getProperty(v18, v17, 256LL, 1);
      }
      id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 path]);
      id v20 = [v19 status];

      if (v20 == (id)1)
      {
        id v22 = *(id *)(a1 + 48);
        if (v22) {
          id v22 = objc_getProperty(v22, v21, 256LL, 1);
        }
        id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 path]);
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v23 interface]);
      }

      else
      {
        id v13 = 0LL;
      }

      uint64_t v58 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) primaryCellularInterface]);
      id v60 = (void *)v58;
      if (v58 || !v13)
      {
        uint64_t v61 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) primaryCellularInterface]);
        if (!v61)
        {

          goto LABEL_82;
        }

        uint64_t v62 = (void *)v61;
        uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) primaryCellularInterface]);
        unsigned int v64 = (void *)objc_claimAutoreleasedReturnValue([v63 interfaceName]);
        id v65 = (void *)objc_claimAutoreleasedReturnValue([v13 interfaceName]);
        unsigned __int8 v66 = [v64 isEqualToString:v65];

        if ((v66 & 1) != 0) {
          goto LABEL_82;
        }
      }

      uint64_t v67 = ne_log_obj(v58, v59);
      id v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
      if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v69 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) primaryCellularInterface]);
        id v70 = (void *)objc_claimAutoreleasedReturnValue([v69 interfaceName]);
        id v71 = (void *)objc_claimAutoreleasedReturnValue([v13 interfaceName]);
        *(_DWORD *)__int128 buf = 138412546;
        __int128 v124 = v70;
        __int16 v125 = 2112;
        __int128 v126 = v71;
        _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEFAULT,  "Changing primary cellular interface: %@ => %@",  buf,  0x16u);
      }

      id v72 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) primaryCellularInterface]);
      id v73 = (void *)objc_claimAutoreleasedReturnValue([v72 interfaceName]);

      if (v73)
      {
        id v74 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) primaryCellularInterface]);
        id v75 = objc_claimAutoreleasedReturnValue([v74 interfaceName]);
        NEHelperCacheClearRedirectedAddresses([v75 UTF8String]);
      }

      [*(id *)(a1 + 48) setPrimaryCellularInterface:v13];
LABEL_82:
      id v105 = *(void **)(a1 + 48);
      if (!v105)
      {
        __int128 v115 = 0u;
        __int128 v116 = 0u;
        __int128 v113 = 0u;
        __int128 v114 = 0u;
        goto LABEL_87;
      }

      if ((id)v105[7] == v20)
      {
        __int128 v115 = 0u;
        __int128 v116 = 0u;
        __int128 v113 = 0u;
        __int128 v114 = 0u;
      }

      else
      {
        v105[7] = v20;
        id v105 = *(void **)(a1 + 48);
        __int128 v113 = 0u;
        __int128 v114 = 0u;
        __int128 v115 = 0u;
        __int128 v116 = 0u;
        if (!v105)
        {
LABEL_87:
          id v106 = v105;
          id v107 = [v106 countByEnumeratingWithState:&v113 objects:v121 count:16];
          if (v107)
          {
            id v108 = v107;
            uint64_t v109 = *(void *)v114;
            do
            {
              for (j = 0LL; j != v108; j = (char *)j + 1)
              {
                if (*(void *)v114 != v109) {
                  objc_enumerationMutation(v106);
                }
                unsigned int v111 = *(void **)(*((void *)&v113 + 1) + 8LL * (void)j);
                if (v20 == (id)1)
                {
                  id v112 = (void *)objc_claimAutoreleasedReturnValue([v13 interfaceName]);
                  [v111 satisfyPathResult:v112];
                }

                else
                {
                  objc_msgSend( *(id *)(*((void *)&v113 + 1) + 8 * (void)j),  "satisfyPathResult:",  0,  (void)v113);
                }
              }

              id v108 = [v106 countByEnumeratingWithState:&v113 objects:v121 count:16];
            }

            while (v108);
          }

          id v89 = *(id *)(a1 + 48);
          if (!v89) {
            goto LABEL_100;
          }
          ptrdiff_t v90 = 280LL;
          goto LABEL_99;
        }
      }

      id v105 = objc_getProperty(v105, v59, 280LL, 1);
      goto LABEL_87;
    }

    id v49 = *(void **)(a1 + 40);
    id v48 = *(void **)(a1 + 48);
    if (v48) {
      id v50 = objc_getProperty(v48, v17, 264LL, 1);
    }
    else {
      id v50 = 0LL;
    }
    if ([v49 isEqual:v50])
    {
      id v52 = *(id *)(a1 + 48);
      if (v52) {
        id v52 = objc_getProperty(v52, v51, 264LL, 1);
      }
      uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([v52 path]);
      id v54 = [v53 status];

      if (v54 == (id)1)
      {
        id v56 = *(id *)(a1 + 48);
        if (v56) {
          id v56 = objc_getProperty(v56, v55, 264LL, 1);
        }
        id v57 = (void *)objc_claimAutoreleasedReturnValue([v56 path]);
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v57 interface]);
      }

      else
      {
        id v13 = 0LL;
      }

      uint64_t v91 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) primaryWiFiInterface]);
      id v93 = (void *)v91;
      if (!v91 && v13) {
        goto LABEL_78;
      }
      uint64_t v94 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) primaryWiFiInterface]);
      if (!v94)
      {

        goto LABEL_101;
      }

      id v95 = (void *)v94;
      unsigned int v96 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) primaryWiFiInterface]);
      unsigned int v97 = (void *)objc_claimAutoreleasedReturnValue([v96 interfaceName]);
      id v98 = (void *)objc_claimAutoreleasedReturnValue([v13 interfaceName]);
      unsigned __int8 v99 = [v97 isEqualToString:v98];

      if ((v99 & 1) == 0)
      {
LABEL_78:
        uint64_t v100 = ne_log_obj(v91, v92);
        unsigned int v101 = (os_log_s *)objc_claimAutoreleasedReturnValue(v100);
        if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v102 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) primaryWiFiInterface]);
          id v103 = (void *)objc_claimAutoreleasedReturnValue([v102 interfaceName]);
          id v104 = (void *)objc_claimAutoreleasedReturnValue([v13 interfaceName]);
          *(_DWORD *)__int128 buf = 138412546;
          __int128 v124 = v103;
          __int16 v125 = 2112;
          __int128 v126 = v104;
          _os_log_impl( (void *)&_mh_execute_header,  v101,  OS_LOG_TYPE_DEFAULT,  "Changing primary wifi interface: %@ => %@",  buf,  0x16u);
        }

        [*(id *)(a1 + 48) setPrimaryWiFiInterface:v13];
      }

LABEL_101:
    }
  }

void sub_10004BFE4(void *a1, uint64_t a2)
{
  if (!a1) {
    return;
  }
  int v2 = a2;
  uint64_t v3 = nwi_state_copy(a1, a2);
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t interface_names = nwi_state_get_interface_names(v3, 0LL, 0LL);
    uint64_t v6 = interface_names;
    id v7 = calloc(interface_names, 8uLL);
    if (v7)
    {
      int v8 = v7;
      unsigned int v9 = nwi_state_get_interface_names(v4, v7, v6);
      if (v9)
      {
        uint64_t v10 = 0LL;
        unint64_t v11 = v9;
        BOOL v12 = 1;
        while (1)
        {
          uint64_t v6 = v8[v10];
          uint64_t ifstate = nwi_state_get_ifstate(v4, v6);
          if (!nwi_ifstate_get_vpn_server(ifstate)) {
            break;
          }
          BOOL v12 = ++v10 < v11;
          if (v11 == v10) {
            goto LABEL_9;
          }
        }

        id v108 = (void *)objc_claimAutoreleasedReturnValue([a1 primaryPhysicalInterface]);
        uint64_t v109 = (void *)objc_claimAutoreleasedReturnValue([v108 interfaceName]);
        uint64_t v110 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v6));
        LODWORD(v6) = [v109 isEqualToString:v110];

        free(v8);
        if (v12) {
          goto LABEL_13;
        }
        goto LABEL_11;
      }

NSDictionary *sub_10004CB98(uint64_t a1)
{
  if (a1)
  {
    uint64_t interface_names = nwi_state_get_interface_names(a1, 0LL, 0LL);
    if ((_DWORD)interface_names)
    {
      uint64_t v3 = interface_names;
      uint64_t v4 = (char *)calloc(interface_names, 8uLL);
      if (v4)
      {
        SEL v5 = v4;
        unsigned int v6 = nwi_state_get_interface_names(a1, v4, v3);
        if (v6)
        {
          uint64_t v7 = 0LL;
          int v8 = 0LL;
          uint64_t v9 = 8LL * v6;
          do
          {
            uint64_t ifstate = nwi_state_get_ifstate(a1, *(void *)&v5[v7]);
            if (ifstate)
            {
              uint64_t v11 = ifstate;
              if (!nwi_ifstate_get_vpn_server())
              {
                if (!v8) {
                  int v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
                }
                BOOL v12 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  nwi_ifstate_get_ifname(v11));
                id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
                id v14 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:v13]);

                if (!v14)
                {
                  id v15 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  nwi_ifstate_get_flags(v11));
                  id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
                  id v17 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  nwi_ifstate_get_ifname(v11));
                  id v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
                  [v8 setObject:v16 forKeyedSubscript:v18];
                }
              }
            }

            v7 += 8LL;
          }

          while (v9 != v7);
          free(v5);
          if (v8)
          {
            SEL v19 = -[NSDictionary initWithDictionary:](objc_alloc(&OBJC_CLASS___NSDictionary), "initWithDictionary:", v8);

            return v19;
          }
        }

        else
        {
          free(v5);
        }
      }
    }
  }

  return 0LL;
}

void sub_10004CD3C(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 280LL, 1);
  }
  if (([Property containsObject:*(void *)(a1 + 40)] & 1) == 0)
  {
    id v5 = *(id *)(a1 + 32);
    if (v5) {
      id v5 = objc_getProperty(v5, v4, 280LL, 1);
    }
    [v5 addObject:*(void *)(a1 + 40)];
  }

  unsigned int v6 = *(void **)(a1 + 32);
  if (v6)
  {
    id v7 = objc_getProperty(v6, v4, 256LL, 1);
    uint64_t v8 = *(void *)(a1 + 32);
  }

  else
  {
    uint64_t v8 = 0LL;
    id v7 = 0LL;
  }

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10004CE14;
  v9[3] = &unk_1000BE1C0;
  v9[4] = v8;
  id v10 = *(id *)(a1 + 40);
  [v7 satisfyPathAgentsWithCompletionHandler:v9];
}

void sub_10004CE14(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v6 = a3;
  if (v8)
  {
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v5, 280LL, 1);
    }
    [Property removeObject:*(void *)(a1 + 40)];
    [*(id *)(a1 + 40) satisfyPathResult:0];
  }
}

void sub_10004CE84(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 272LL, 1);
  }
  if (([Property containsObject:*(void *)(a1 + 40)] & 1) == 0)
  {
    id v5 = *(id *)(a1 + 32);
    if (v5) {
      id v5 = objc_getProperty(v5, v4, 272LL, 1);
    }
    [v5 addObject:*(void *)(a1 + 40)];
  }

  id v6 = *(void **)(a1 + 32);
  if (v6)
  {
    id v7 = objc_getProperty(v6, v4, 248LL, 1);
    uint64_t v8 = *(void *)(a1 + 32);
  }

  else
  {
    uint64_t v8 = 0LL;
    id v7 = 0LL;
  }

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10004CF5C;
  v9[3] = &unk_1000BE1C0;
  v9[4] = v8;
  id v10 = *(id *)(a1 + 40);
  [v7 satisfyPathAgentsWithCompletionHandler:v9];
}

void sub_10004CF5C(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v6 = a3;
  if (v8)
  {
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v5, 272LL, 1);
    }
    [Property removeObject:*(void *)(a1 + 40)];
    [*(id *)(a1 + 40) satisfyPathResult:0];
  }
}

void sub_10004CFCC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = ne_log_large_obj(v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v27 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Got a configuration change callback with configuration IDs %@",  buf,  0xCu);
  }

  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id obj = v3;
  id v6 = [obj countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v22;
    id v8 = (id *)(a1 + 32);
    do
    {
      uint64_t v9 = 0LL;
      do
      {
        if (*(void *)v22 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = *(void *)(*((void *)&v21 + 1) + 8LL * (void)v9);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NEConfigurationManager sharedManagerForAllUsers]( &OBJC_CLASS___NEConfigurationManager,  "sharedManagerForAllUsers"));
        id WeakRetained = objc_loadWeakRetained(v8);
        id v14 = WeakRetained;
        if (WeakRetained) {
          id Property = objc_getProperty(WeakRetained, v13, 88LL, 1);
        }
        else {
          id Property = 0LL;
        }
        id v16 = Property;
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472LL;
        v19[2] = sub_10004F0D8;
        v19[3] = &unk_1000BE018;
        objc_copyWeak(&v20, v8);
        v19[4] = v10;
        [v11 loadConfigurationWithID:v10 withCompletionQueue:v16 handler:v19];

        objc_destroyWeak(&v20);
        uint64_t v9 = (char *)v9 + 1;
      }

      while (v6 != v9);
      id v17 = [obj countByEnumeratingWithState:&v21 objects:v25 count:16];
      id v6 = v17;
    }

    while (v17);
  }
}

void sub_10004D1E4(_Unwind_Exception *a1)
{
}

void sub_10004D200(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = ne_log_obj(a1, a2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v19[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Handling SIGTERM", (uint8_t *)v19, 2u);
  }

  id v5 = *(void **)(a1 + 32);
  id v6 = &stru_1000BE060;
  if (v5)
  {
    id v7 = v5;
    objc_sync_enter(v7);
    uint64_t v9 = (_xpc_connection_s *)objc_getProperty(v7, v8, 96LL, 1);
    xpc_connection_suspend(v9);

    uint64_t v11 = (_xpc_connection_s *)objc_getProperty(v7, v10, 104LL, 1);
    xpc_connection_suspend(v11);

    id v13 = (_xpc_connection_s *)objc_getProperty(v7, v12, 112LL, 1);
    xpc_connection_suspend(v13);

    sub_10004B3B4(v7);
    sub_10004B524(v7);
    sub_10004B5F8(v7);
    id v14 = (int *)v7;
    objc_sync_enter(v14);
    notify_cancel(v14[7]);
    notify_cancel(v14[8]);
    notify_cancel(v14[9]);
    objc_sync_exit(v14);

    if ((v14[2] & 1) != 0) {
      id v15 = (void *)CNPluginMonitorStop();
    }
    if (!*((void *)v14 + 37)) {
      sub_10004F0C8(v15);
    }
    id Property = (dispatch_queue_s *)objc_getProperty(v14, v16, 88LL, 1);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_10004EECC;
    v19[3] = &unk_1000BEC08;
    v19[4] = v14;
    dispatch_async(Property, v19);
    objc_setProperty_atomic_copy(v14, v18, &stru_1000BE060, 304LL);
    objc_sync_exit(v14);
  }
}

void sub_10004D3C8(_Unwind_Exception *a1)
{
}

void sub_10004D3EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    id v6 = v3;
    xpc_type_t type = xpc_get_type(v3);
    uint64_t v4 = v6;
    if (type == (xpc_type_t)&_xpc_type_connection)
    {
      sub_10004D97C(*(void **)(a1 + 32), v6);
      uint64_t v4 = v6;
    }
  }
}

void sub_10004D44C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    connectioid n = v3;
    BOOL v4 = xpc_get_type(v3) == (xpc_type_t)&_xpc_type_connection;
    id v3 = connection;
    if (v4)
    {
      xpc_connection_set_context(connection, "com.apple.nesessionmanager.flow-divert-token");
      sub_10004D97C(*(void **)(a1 + 32), connection);
      id v3 = connection;
    }
  }
}

void sub_10004D4B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v10 = v3;
    BOOL v4 = xpc_get_type(v3) == (xpc_type_t)&_xpc_type_connection;
    id v3 = v10;
    if (v4)
    {
      id v5 = *(void **)(a1 + 32);
      id v7 = (_xpc_connection_s *)v10;
      if (v5)
      {
        id Property = (dispatch_queue_s *)objc_getProperty(v5, v6, 88LL, 1);
        xpc_connection_set_target_queue(v7, Property);
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472LL;
        handler[2] = sub_10004D588;
        handler[3] = &unk_1000BE0F8;
        uint64_t v9 = v7;
        SEL v12 = v9;
        id v13 = v5;
        xpc_connection_set_event_handler(v9, handler);
        xpc_connection_resume(v9);
      }

      id v3 = v10;
    }
  }
}

void sub_10004D588(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = v3;
  if (!v3 || xpc_get_type(v3) != (xpc_type_t)&_xpc_type_dictionary)
  {
    id v5 = *(_xpc_connection_s **)(a1 + 32);
LABEL_4:
    xpc_connection_cancel(v5);
    goto LABEL_5;
  }

  int64_t int64 = xpc_dictionary_get_int64(v4, "SessionClientType");
  id v5 = *(_xpc_connection_s **)(a1 + 32);
  pid_t pid = xpc_connection_get_pid(v5);
  memset(buffer, 0, sizeof(buffer));
  uint64_t v8 = proc_name(pid, buffer, 0x100u);
  uint64_t v10 = ne_log_obj(v8, v9);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 136315394;
    id v13 = buffer;
    __int16 v14 = 1024;
    pid_t v15 = pid;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Got a new agent client connection from %s(%d)",  (uint8_t *)&v12,  0x12u);
  }

  sub_10004D6E0(*(void **)(a1 + 40), *(void **)(a1 + 32), v4);
LABEL_5:
}

void sub_10004D6E0(void *a1, void *a2, void *a3)
{
  connectioid n = a2;
  id v6 = a3;
  if (a1)
  {
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    id v7 = objc_getProperty(a1, v5, 120LL, 1);
    id v29 = [v7 countByEnumeratingWithState:&v38 objects:v43 count:16];
    if (v29)
    {
      uint64_t v9 = *(void *)v39;
      id v31 = v7;
      uint64_t v28 = *(void *)v39;
      do
      {
        uint64_t v10 = 0LL;
        do
        {
          if (*(void *)v39 != v9) {
            objc_enumerationMutation(v7);
          }
          uint64_t v30 = v10;
          uint64_t v11 = *(void *)(*((void *)&v38 + 1) + 8 * v10);
          __int128 v34 = 0u;
          __int128 v35 = 0u;
          __int128 v36 = 0u;
          __int128 v37 = 0u;
          id v12 = objc_msgSend(objc_getProperty(a1, v8, 120, 1), "objectForKeyedSubscript:", v11);
          id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
          id v14 = [v13 countByEnumeratingWithState:&v34 objects:v42 count:16];
          if (v14)
          {
            id v15 = v14;
            uint64_t v16 = *(void *)v35;
            while (2)
            {
              for (id i = 0LL; i != v15; id i = (char *)i + 1)
              {
                if (*(void *)v35 != v16) {
                  objc_enumerationMutation(v13);
                }
                SEL v18 = *(void **)(*((void *)&v34 + 1) + 8LL * (void)i);
                if ([v18 intValue] == 4)
                {
                  id v20 = objc_msgSend(objc_getProperty(a1, v19, 120, 1), "objectForKeyedSubscript:", v11);
                  __int128 v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
                  __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKeyedSubscript:v18]);
                  unsigned int v23 = [v22 handleAgentClientConnection:connection WithMessage:v6];

                  if (v23)
                  {

                    goto LABEL_22;
                  }
                }
              }

              id v15 = [v13 countByEnumeratingWithState:&v34 objects:v42 count:16];
              if (v15) {
                continue;
              }
              break;
            }
          }

          uint64_t v10 = v30 + 1;
          id v7 = v31;
          uint64_t v9 = v28;
        }

        while ((id)(v30 + 1) != v29);
        id v29 = [v31 countByEnumeratingWithState:&v38 objects:v43 count:16];
      }

      while (v29);
    }

    uint64_t v26 = ne_log_obj(v24, v25);
    id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "No filter session claimed the connection request",  buf,  2u);
    }

    xpc_connection_cancel(connection);
  }

void sub_10004D97C(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    kdebug_trace(726990852LL, 0LL, 0LL, 0LL, 0LL);
    uint64_t v12 = 0LL;
    id v13 = &v12;
    uint64_t v14 = 0x3032000000LL;
    id v15 = sub_10004DAC0;
    uint64_t v16 = sub_10004DAD0;
    id v4 = v3;
    id v17 = v4;
    id v6 = (dispatch_queue_s *)objc_getProperty(a1, v5, 88LL, 1);
    xpc_connection_set_target_queue((xpc_connection_t)v4, v6);

    id v7 = (_xpc_connection_s *)v13[5];
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472LL;
    handler[2] = sub_10004DAD8;
    handler[3] = &unk_1000BE0D0;
    uint64_t v11 = &v12;
    id v9 = v4;
    uint64_t v10 = a1;
    xpc_connection_set_event_handler(v7, handler);
    xpc_connection_resume((xpc_connection_t)v13[5]);

    _Block_object_dispose(&v12, 8);
  }
}

void sub_10004DAA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10004DAC0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10004DAD0(uint64_t a1)
{
}

void sub_10004DAD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  kdebug_trace(726990856LL, 0LL, 0LL, 0LL, 0LL);
  if (!v3 || xpc_get_type(v3) != (xpc_type_t)&_xpc_type_dictionary)
  {
LABEL_20:
    uint64_t v27 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v28 = *(void **)(v27 + 40);
    *(void *)(v27 + 40) = 0LL;

    goto LABEL_21;
  }

  int64_t int64 = xpc_dictionary_get_int64(v3, "SessionClientType");
  context = (const char *)xpc_connection_get_context(*(xpc_connection_t *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL));
  if (context)
  {
    if (!strcmp(context, "com.apple.nesessionmanager.flow-divert-token") && int64 != 1)
    {
      pid_t pid = xpc_connection_get_pid(*(xpc_connection_t *)(a1 + 32));
      __int128 v127 = 0u;
      __int128 v128 = 0u;
      __int128 v125 = 0u;
      __int128 v126 = 0u;
      __int128 v123 = 0u;
      __int128 v124 = 0u;
      __int128 v121 = 0u;
      __int128 v122 = 0u;
      __int128 v119 = 0u;
      __int128 v120 = 0u;
      __int128 v117 = 0u;
      __int128 v118 = 0u;
      __int128 v115 = 0u;
      __int128 v116 = 0u;
      __int128 buffer = 0u;
      __int128 v114 = 0u;
      uint64_t v23 = proc_name(pid, &buffer, 0x100u);
      int64_t int64 = 0LL;
LABEL_17:
      uint64_t v25 = ne_log_obj(v23, v24);
      uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 134217984;
        *(void *)&uint8_t buf[4] = int64;
        _os_log_error_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "Cancelling connection with invalid client type: %lld",  buf,  0xCu);
      }

      xpc_connection_cancel(*(xpc_connection_t *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL));
      goto LABEL_20;
    }
  }

  pid_t v7 = xpc_connection_get_pid(*(xpc_connection_t *)(a1 + 32));
  __int128 v127 = 0u;
  __int128 v128 = 0u;
  __int128 v125 = 0u;
  __int128 v126 = 0u;
  __int128 v123 = 0u;
  __int128 v124 = 0u;
  __int128 v121 = 0u;
  __int128 v122 = 0u;
  __int128 v119 = 0u;
  __int128 v120 = 0u;
  __int128 v117 = 0u;
  __int128 v118 = 0u;
  __int128 v115 = 0u;
  __int128 v116 = 0u;
  __int128 buffer = 0u;
  __int128 v114 = 0u;
  uint64_t v23 = proc_name(v7, &buffer, 0x100u);
  switch(int64)
  {
    case 1LL:
      uint64_t v8 = ne_log_obj(v23, v24);
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 136315394;
        *(void *)&uint8_t buf[4] = &buffer;
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Got a new session client connection from %s(%d)",  buf,  0x12u);
      }

      uint64_t v10 = *(_BYTE **)(a1 + 40);
      uint64_t v11 = (_xpc_connection_s *)*(id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
      if (v10)
      {
        id v12 = v3;
        id v13 = xpc_dictionary_get_uuid(v12, "SessionIdentifier");
        int64_t v14 = xpc_dictionary_get_int64(v12, "SessionConfigType");

        if (v13
          && (id v15 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", v13)) != 0LL)
        {
          id v17 = v15;
          id v18 = objc_msgSend(objc_getProperty(v10, v16, 120, 1), "objectForKeyedSubscript:", v15);
          SEL v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
          id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v14));
          __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:v20]);

          xpc_connection_suspend(v11);
          if (v21)
          {
            [v21 addClientConnection:v11];
          }

          else
          {
            *(void *)__int128 buf = _NSConcreteStackBlock;
            *(void *)&buf[8] = 3221225472LL;
            *(void *)&uint8_t buf[16] = sub_10004E648;
            id v131 = (const char *)&unk_1000BE198;
            uint64_t v132 = v11;
            __int128 v133 = v17;
            int v134 = v14;
            sub_10004E744(v10, v133, v14, buf);
          }
        }

        else
        {
          uint64_t v76 = ne_log_obj(v15, v16);
          uint64_t v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(v76);
          if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_error_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_ERROR,  "Session client request is missing a configuration ID, canceling new connection ",  buf,  2u);
          }

          xpc_connection_cancel(v11);
        }
      }

      goto LABEL_82;
    case 2LL:
      uint64_t v29 = ne_log_obj(v23, v24);
      uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 136315394;
        *(void *)&uint8_t buf[4] = &buffer;
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Got a new agent client connection from %s(%d)",  buf,  0x12u);
      }

      sub_10004D6E0(*(void **)(a1 + 40), *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), v3);
      goto LABEL_21;
    case 3LL:
      uint64_t v31 = ne_log_obj(v23, v24);
      unsigned __int8 v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 136315394;
        *(void *)&uint8_t buf[4] = &buffer;
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Got a new client connection for mapping an interface to the provider UUID from %s(%d)",  buf,  0x12u);
      }

      uint64_t v33 = *(void **)(a1 + 40);
      __int128 v34 = (_xpc_connection_s *)*(id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
      id v98 = v3;
      id v35 = v3;
      __int128 v36 = v35;
      if (v33)
      {
        xpc_object_t original = v35;
        connectioid n = v34;
        __int128 v37 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  xpc_dictionary_get_string(v35, "InterfaceMapInfo"));
        id v38 = (id)objc_claimAutoreleasedReturnValue(v37);
        *(void *)uuid = 0LL;
        uint64_t v136 = 0LL;
        __int128 v109 = 0u;
        __int128 v110 = 0u;
        __int128 v111 = 0u;
        __int128 v112 = 0u;
        id obj = objc_getProperty(v33, v39, 120LL, 1);
        id v101 = [obj countByEnumeratingWithState:&v109 objects:buf count:16];
        if (v101)
        {
          uint64_t v100 = *(void *)v110;
          p_vtable = &OBJC_CLASS___NESMVPNSessionRetryCounter.vtable;
          id v103 = v33;
          do
          {
            uint64_t v42 = 0LL;
            do
            {
              if (*(void *)v110 != v100) {
                objc_enumerationMutation(obj);
              }
              uint64_t v102 = v42;
              uint64_t v43 = *(void *)(*((void *)&v109 + 1) + 8 * v42);
              __int128 v105 = 0u;
              __int128 v106 = 0u;
              __int128 v107 = 0u;
              __int128 v108 = 0u;
              id v44 = objc_msgSend(objc_getProperty(v33, v40, 120, 1), "objectForKeyedSubscript:", v43);
              id v104 = (id)objc_claimAutoreleasedReturnValue(v44);
              id v45 = [v104 countByEnumeratingWithState:&v105 objects:v129 count:16];
              if (v45)
              {
                id v47 = v45;
                uint64_t v48 = *(void *)v106;
                do
                {
                  uint64_t v49 = 0LL;
                  do
                  {
                    if (*(void *)v106 != v48) {
                      objc_enumerationMutation(v104);
                    }
                    uint64_t v50 = *(void *)(*((void *)&v105 + 1) + 8LL * (void)v49);
                    id v51 = objc_msgSend(objc_getProperty(v33, v46, 120, 1), "objectForKeyedSubscript:", v43);
                    id v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
                    uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([v52 objectForKeyedSubscript:v50]);

                    uint64_t v54 = objc_opt_class(p_vtable + 422);
                    if ((objc_opt_isKindOfClass(v53, v54) & 1) != 0 && [v53 virtualInterface])
                    {
                      id v55 = [v53 copyTunnelInterfaceName];
                      if (v55 == v38)
                      {
                        id v56 = p_vtable;
                        id v57 = v38;
                        uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue([v53 primaryTunnelPlugin]);
                        id v60 = sub_100015D14(v58, v59);
                        SEL v61 = (void *)objc_claimAutoreleasedReturnValue(v60);

                        if ([v61 count])
                        {
                          id v62 = (void *)objc_claimAutoreleasedReturnValue([v61 firstObject]);
                          [v62 getUUIDBytes:uuid];
                        }

                        id v38 = v57;
                        p_vtable = v56;
                        uint64_t v33 = v103;
                      }
                    }

                    uint64_t v49 = (char *)v49 + 1;
                  }

                  while (v47 != v49);
                  id v47 = [v104 countByEnumeratingWithState:&v105 objects:v129 count:16];
                }

                while (v47);
              }

              uint64_t v42 = v102 + 1;
            }

            while ((id)(v102 + 1) != v101);
            id v101 = [obj countByEnumeratingWithState:&v109 objects:buf count:16];
          }

          while (v101);
        }

        __int128 v36 = original;
        xpc_object_t reply = xpc_dictionary_create_reply(original);
        xpc_dictionary_set_uuid(reply, "MachOUUID", uuid);
        __int128 v34 = connection;
        xpc_connection_send_message(connection, reply);
      }

      id v3 = v98;
      goto LABEL_21;
    case 4LL:
      uint64_t v64 = ne_log_obj(v23, v24);
      id v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 136315394;
        *(void *)&uint8_t buf[4] = &buffer;
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEFAULT,  "Got a new client connection for DeviceCommunicationException %s(%d)",  buf,  0x12u);
      }

      id v66 = *(void **)(a1 + 40);
      uint64_t v11 = (_xpc_connection_s *)*(id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
      if (!v66) {
        goto LABEL_82;
      }
      id v67 = v3;
      xpc_object_t v68 = xpc_dictionary_create_reply(v67);
      BOOL v69 = xpc_dictionary_get_BOOL(v67, "DeviceCommunicationExceptionEnable");

      if (!v11) {
        goto LABEL_79;
      }
      xpc_type_t value = (xpc_type_t)xpc_connection_copy_entitlement_value(v11, "com.apple.private.networkextension.test-control");
      id v74 = value;
      if (value && (xpc_type_t value = xpc_get_type(value), value == (xpc_type_t)&_xpc_type_BOOL))
      {
        xpc_type_t value = (xpc_type_t)xpc_BOOL_get_value(v74);
        int v75 = (int)value;
      }

      else
      {
        int v75 = 0;
      }

      uint64_t v78 = ne_log_obj(value, v73);
      SEL v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v94 = "not ";
        if (v75) {
          uint64_t v94 = "";
        }
        id v95 = "disable";
        *(void *)&uint8_t buf[4] = "-[NESMServer handleDeviceCommunicationException:initialMessage:]";
        *(_DWORD *)__int128 buf = 136315650;
        *(void *)&buf[14] = v94;
        *(_WORD *)&_BYTE buf[12] = 2080;
        if (v69) {
          id v95 = "enable";
        }
        *(_WORD *)&buf[22] = 2080;
        id v131 = v95;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEBUG,  "%s: process %sallowed to %s DeviceCommunication exception",  buf,  0x20u);
      }

      if (!v75) {
        goto LABEL_79;
      }
      if (!objc_getProperty(v66, v71, 344LL, 1))
      {
        id v81 = -[NEPolicySession initWithSessionName:]( objc_alloc(&OBJC_CLASS___NEPolicySession),  "initWithSessionName:",  @"NESMServer Control");
        objc_setProperty_atomic(v66, v82, v81, 344LL);

        if (objc_getProperty(v66, v83, 344LL, 1))
        {
          objc_msgSend(objc_getProperty(v66, v84, 344, 1), "setPriority:", 100);
          objc_msgSend(objc_getProperty(v66, v85, 344, 1), "lockSessionToCurrentProcess");
        }

        else
        {
          uint64_t v86 = ne_log_obj(0LL, v84);
          id v87 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
          if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_error_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_ERROR,  "Failed to create NESMServer control policy session",  buf,  2u);
          }
        }
      }

      if (v69)
      {
        *(_DWORD *)__int128 buf = 1;
        id Property = objc_getProperty(v66, v80, 344LL, 1);
        if (!Property) {
          goto LABEL_79;
        }
        id v88 = objc_getProperty(v66, v71, 344LL, 1);
        id Property = (id)sub_100056EA8(v88, (unsigned int *)buf);
        if (!(_DWORD)Property) {
          goto LABEL_79;
        }
LABEL_78:
        id Property = objc_msgSend(objc_getProperty(v66, v71, 344, 1), "apply");
        BOOL v89 = (int)Property;
        goto LABEL_80;
      }

      id Property = objc_getProperty(v66, v80, 344LL, 1);
      if (Property)
      {
        id Property = objc_msgSend(objc_getProperty(v66, v71, 344, 1), "removeAllPolicies");
        if ((_DWORD)Property) {
          goto LABEL_78;
        }
      }

LABEL_79:
      BOOL v89 = 0;
LABEL_80:
      uint64_t v90 = ne_log_obj(Property, v71);
      uint64_t v91 = (os_log_s *)objc_claimAutoreleasedReturnValue(v90);
      if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v92 = "disable";
        if (v69) {
          uint64_t v92 = "enable";
        }
        uint64_t v93 = "failed";
        *(void *)&uint8_t buf[4] = "-[NESMServer handleDeviceCommunicationException:initialMessage:]";
        *(_DWORD *)__int128 buf = 136315650;
        *(void *)&buf[14] = v92;
        *(_WORD *)&_BYTE buf[12] = 2080;
        if (v89) {
          uint64_t v93 = "succeeded";
        }
        *(_WORD *)&buf[22] = 2080;
        id v131 = v93;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v91,  OS_LOG_TYPE_DEBUG,  "%s: DeviceCommunication exception %s %s",  buf,  0x20u);
      }

      xpc_dictionary_set_BOOL(v68, "DeviceCommunicationExceptionResult", v89);
      xpc_connection_send_message(v11, v68);

LABEL_82:
LABEL_21:

      return;
    default:
      goto LABEL_17;
  }

  sub_100078DB4(self);
}

void sub_10004E648(uint64_t a1, void *a2)
{
  if (a2)
  {
    [a2 addClientConnection:*(void *)(a1 + 32)];
  }

  else
  {
    uint64_t v3 = ne_log_obj(a1, 0LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v6 = *(_DWORD *)(a1 + 48);
      int v7 = 138412546;
      uint64_t v8 = v5;
      __int16 v9 = 1024;
      int v10 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "Failed to add a pending session request or failed to load session for %@ (%d), canceling new connection",  (uint8_t *)&v7,  0x12u);
    }

    xpc_connection_resume(*(xpc_connection_t *)(a1 + 32));
    xpc_connection_cancel(*(xpc_connection_t *)(a1 + 32));
  }

void sub_10004E744(_BYTE *a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  uint64_t v8 = a4;
  if (a1)
  {
    __int16 v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a3));
    id v11 = objc_msgSend(objc_getProperty(a1, v10, 128, 1), "objectForKeyedSubscript:", v7);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    id v13 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:v9]);

    uint64_t v16 = ne_log_obj(v14, v15);
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      int v37 = 67109378;
      *(_DWORD *)id v38 = a3;
      *(_WORD *)&v38[4] = 2112;
      *(void *)&v38[6] = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Adding a pending session for type %d and id %@",  (uint8_t *)&v37,  0x12u);
    }

    if (!v13)
    {
      id v18 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      if (!v18)
      {
        v8[2](v8, 0LL);
LABEL_16:

        goto LABEL_17;
      }

      id v13 = v18;
      id v20 = objc_msgSend(objc_getProperty(a1, v19, 128, 1), "objectForKeyedSubscript:", v7);
      __int128 v21 = (void *)objc_claimAutoreleasedReturnValue(v20);

      if (!v21)
      {
        uint64_t v23 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        objc_msgSend(objc_getProperty(a1, v24, 128, 1), "setObject:forKeyedSubscript:", v23, v7);
      }

      id v25 = objc_msgSend(objc_getProperty(a1, v22, 128, 1), "objectForKeyedSubscript:", v7);
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
      [v26 setObject:v13 forKeyedSubscript:v9];
    }

    uint64_t v27 = objc_retainBlock(v8);
    -[NSMutableArray addObject:](v13, "addObject:", v27);

    id v28 = -[NSMutableArray count](v13, "count");
    if (v28 == (id)1 && (a1[9] & 1) != 0 && (a1[10] & 1) != 0)
    {
      uint64_t v35 = ne_log_obj(1LL, v29);
      __int128 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        int v37 = 67109378;
        *(_DWORD *)id v38 = a3;
        *(_WORD *)&v38[4] = 2112;
        *(void *)&v38[6] = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "Loading session for new client with type %d and ID %@",  (uint8_t *)&v37,  0x12u);
      }

      sub_10004EA5C(a1, a3, v7);
    }

    else
    {
      uint64_t v30 = ne_log_obj(v28, v29);
      uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        id v32 = -[NSMutableArray count](v13, "count");
        int v33 = a1[9] & 1;
        int v34 = a1[10] & 1;
        int v37 = 134218496;
        *(void *)id v38 = v32;
        *(_WORD *)&v38[8] = 1024;
        *(_DWORD *)&v38[10] = v33;
        __int16 v39 = 1024;
        int v40 = v34;
        _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Queuing pending session request because there are already pending requests (%lu) or because the file handles h ave not yet been received (%d), or because the provider manager has not fully started (%d)",  (uint8_t *)&v37,  0x18u);
      }
    }

    goto LABEL_16;
  }

void sub_10004EA5C(void *a1, int a2, void *a3)
{
  id v5 = a3;
  int v6 = (void *)objc_claimAutoreleasedReturnValue( +[NEConfigurationManager sharedManagerForAllUsers]( &OBJC_CLASS___NEConfigurationManager,  "sharedManagerForAllUsers"));
  id Property = objc_getProperty(a1, v7, 88LL, 1);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10004EB28;
  v10[3] = &unk_1000BE148;
  void v10[4] = a1;
  id v9 = v5;
  id v11 = v9;
  int v12 = a2;
  [v6 loadConfigurationAndUserWithID:v9 withCompletionQueue:Property handler:v10];
}

void sub_10004EB28(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v10 = a4;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v9, 128LL, 1);
  }
  int v12 = (void *)objc_claimAutoreleasedReturnValue([Property objectForKeyedSubscript:*(void *)(a1 + 40)]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48)));
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:v13]);

  if (v14)
  {
    if (v7)
    {
      [v7 applyOverrides];
      id v17 = (void *)objc_claimAutoreleasedReturnValue( +[NESMSession sessionWithConfiguration:andType:andServer:]( &OBJC_CLASS___NESMSession,  "sessionWithConfiguration:andType:andServer:",  v7,  *(unsigned int *)(a1 + 48),  *(void *)(a1 + 32)));
LABEL_11:
      kdebug_trace(726990860LL, 0LL, 0LL, 0LL, 0LL);
      id v26 = *(id *)(a1 + 32);
      if (v26) {
        id v26 = objc_getProperty(v26, v25, 128LL, 1);
      }
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 objectForKeyedSubscript:*(void *)(a1 + 40)]);
      id v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48)));
      [v27 removeObjectForKey:v28];

      if (v17)
      {
        id v30 = *(id *)(a1 + 32);
        if (v30) {
          id v30 = objc_getProperty(v30, v29, 120LL, 1);
        }
        uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v30 objectForKeyedSubscript:*(void *)(a1 + 40)]);

        if (!v31)
        {
          int v34 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  0LL);
          id v35 = *(id *)(a1 + 32);
          if (v35) {
            id v35 = objc_getProperty(v35, v33, 120LL, 1);
          }
          [v35 setObject:v34 forKeyedSubscript:*(void *)(a1 + 40)];
        }

        id v36 = *(id *)(a1 + 32);
        if (v36) {
          id v36 = objc_getProperty(v36, v32, 120LL, 1);
        }
        int v37 = (void *)objc_claimAutoreleasedReturnValue([v36 objectForKeyedSubscript:*(void *)(a1 + 40)]);
        id v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48)));
        [v37 setObject:v17 forKeyedSubscript:v38];

        [v17 setConfigurationUserUUIDs:v8];
      }

      __int128 v47 = 0u;
      __int128 v48 = 0u;
      __int128 v45 = 0u;
      __int128 v46 = 0u;
      id v39 = v14;
      id v40 = [v39 countByEnumeratingWithState:&v45 objects:v49 count:16];
      if (v40)
      {
        id v41 = v40;
        uint64_t v42 = *(void *)v46;
        do
        {
          for (id i = 0LL; i != v41; id i = (char *)i + 1)
          {
            if (*(void *)v46 != v42) {
              objc_enumerationMutation(v39);
            }
            (*(void (**)(void))(*(void *)(*((void *)&v45 + 1) + 8LL * (void)i) + 16LL))(*(void *)(*((void *)&v45 + 1) + 8LL * (void)i));
          }

          id v41 = [v39 countByEnumeratingWithState:&v45 objects:v49 count:16];
        }

        while (v41);
      }

      goto LABEL_31;
    }

    uint64_t v18 = ne_log_obj(v15, v16);
    SEL v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
    if (v10)
    {
      if (v20)
      {
        uint64_t v21 = *(void *)(a1 + 40);
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v51 = v21;
        __int16 v52 = 2048;
        id v53 = [v10 code];
        __int128 v22 = "Failed to load configuration with ID %@: %ld";
        uint64_t v23 = v19;
        uint32_t v24 = 22;
LABEL_33:
        _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, v22, buf, v24);
      }
    }

    else if (v20)
    {
      uint64_t v44 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v51 = v44;
      __int128 v22 = "Failed to load configuration with ID %@";
      uint64_t v23 = v19;
      uint32_t v24 = 12;
      goto LABEL_33;
    }

    id v17 = 0LL;
    goto LABEL_11;
  }

LABEL_31:
}

  id v67 = 0LL;
LABEL_32:
  if ((unint64_t)(v22 - 1) <= 1)
  {
    int v33 = objc_msgSend(objc_getProperty(self, v32, 360, 1), "sharedSecretKeychainItem");
    int v34 = objc_claimAutoreleasedReturnValue(v33);

    id v25 = (void *)v34;
  }

  if (v25) {
    id v35 = [v25 copyPassword];
  }
  else {
    id v35 = 0LL;
  }
  if (v68)
  {
    if (v22 == (char *)1)
    {
      id v36 = kSCPropNetIPSecXAuthName;
      int v37 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v29,  "objectForKeyedSubscript:",  kSCPropNetIPSecXAuthName));
      id v38 = isa_nsstring(v37);

      if ((v38 & 1) != 0) {
        goto LABEL_45;
      }
      id v39 = v29;
      goto LABEL_44;
    }

    if (v22 == (char *)2)
    {
      id v36 = kSCPropNetPPPAuthName;
      id v40 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v30,  "objectForKeyedSubscript:",  kSCPropNetPPPAuthName));
      id v41 = isa_nsstring(v40);

      if ((v41 & 1) == 0)
      {
        id v39 = v30;
LABEL_44:
        -[NSMutableDictionary setObject:forKeyedSubscript:](v39, "setObject:forKeyedSubscript:", v68, v36);
      }
    }
  }

void sub_10004EECC(uint64_t a1, const char *a2)
{
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 120LL, 1);
  }
  id obj = Property;
  id v4 = [obj countByEnumeratingWithState:&v26 objects:v31 count:16];
  if (v4)
  {
    id v6 = v4;
    uint64_t v21 = *(void *)v27;
    do
    {
      for (id i = 0LL; i != v6; id i = (char *)i + 1)
      {
        if (*(void *)v27 != v21) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void *)(*((void *)&v26 + 1) + 8LL * (void)i);
        __int128 v22 = 0u;
        __int128 v23 = 0u;
        __int128 v24 = 0u;
        __int128 v25 = 0u;
        id v9 = *(id *)(a1 + 32);
        if (v9) {
          id v9 = objc_getProperty(v9, v5, 120LL, 1);
        }
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v8]);
        id v11 = [v10 countByEnumeratingWithState:&v22 objects:v30 count:16];
        if (v11)
        {
          id v13 = v11;
          uint64_t v14 = *(void *)v23;
          do
          {
            for (j = 0LL; j != v13; j = (char *)j + 1)
            {
              if (*(void *)v23 != v14) {
                objc_enumerationMutation(v10);
              }
              uint64_t v16 = *(void *)(*((void *)&v22 + 1) + 8LL * (void)j);
              id v17 = *(id *)(a1 + 32);
              if (v17) {
                id v17 = objc_getProperty(v17, v12, 120LL, 1);
              }
              uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:v8]);
              SEL v19 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:v16]);

              [v19 stopIfNecessaryWithReason:1];
            }

            id v13 = [v10 countByEnumeratingWithState:&v22 objects:v30 count:16];
          }

          while (v13);
        }
      }

      id v6 = [obj countByEnumeratingWithState:&v26 objects:v31 count:16];
    }

    while (v6);
  }
}

void sub_10004F0C8(id a1)
{
}

void sub_10004F0D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v6 = WeakRetained;
  if (WeakRetained) {
    id WeakRetained = objc_getProperty(WeakRetained, v5, 120LL, 1);
  }
  id v7 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained objectForKeyedSubscript:*(void *)(a1 + 32)]);

  if (v7)
  {
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    id v8 = v7;
    id v9 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v15;
      do
      {
        int v12 = 0LL;
        do
        {
          if (*(void *)v15 != v11) {
            objc_enumerationMutation(v8);
          }
          id v13 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v8,  "objectForKeyedSubscript:",  *(void *)(*((void *)&v14 + 1) + 8 * (void)v12),  (void)v14));
          [v3 applyOverrides];
          [v13 handleUpdateConfiguration:v3 withCompletionHandler:0];

          int v12 = (char *)v12 + 1;
        }

        while (v10 != v12);
        id v10 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }

      while (v10);
    }
  }
}

id sub_10004F238(uint64_t a1)
{
  if (qword_1000CFBD0 != -1) {
    dispatch_once(&qword_1000CFBD0, &stru_1000BE0A8);
  }
  return (id)qword_1000CFBC8;
}

void sub_10004F27C(id a1)
{
  int v1 = objc_alloc(&OBJC_CLASS___NESMServer);
  if (!v1)
  {
LABEL_6:
    int v2 = 0LL;
    goto LABEL_7;
  }

  v47.receiver = v1;
  v47.super_class = (Class)&OBJC_CLASS___NESMServer;
  int v2 = objc_msgSendSuper2(&v47, "init");
  if (v2)
  {
    dispatch_queue_attr_t v3 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    id v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v3);
    dispatch_queue_t v5 = dispatch_queue_create("NESMServer queue", v4);
    id v6 = (void *)*((void *)v2 + 11);
    *((void *)v2 + 11) = v5;

    xpc_connection_t mach_service = xpc_connection_create_mach_service("com.apple.nesessionmanager", 0LL, 1uLL);
    id v8 = (void *)*((void *)v2 + 12);
    *((void *)v2 + 12) = mach_service;

    xpc_connection_t v9 = xpc_connection_create_mach_service("com.apple.nesessionmanager.flow-divert-token", 0LL, 1uLL);
    id v10 = (void *)*((void *)v2 + 13);
    *((void *)v2 + 13) = v9;

    xpc_connection_t v11 = xpc_connection_create_mach_service("com.apple.nesessionmanager.content-filter", 0LL, 1uLL);
    int v12 = (void *)*((void *)v2 + 14);
    *((void *)v2 + 14) = v11;

    id v13 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  0LL);
    __int128 v14 = (void *)*((void *)v2 + 15);
    *((void *)v2 + 15) = v13;

    __int128 v15 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  0LL);
    __int128 v16 = (void *)*((void *)v2 + 16);
    *((void *)v2 + 16) = v15;

    uint64_t v17 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    uint64_t v18 = (void *)*((void *)v2 + 34);
    *((void *)v2 + 34) = v17;

    *((_DWORD *)v2 + 5) = -1;
    *(void *)(v2 + 2_Block_object_dispose(va, 8) = -1LL;
    *(void *)(v2 + 36) = -1LL;
    SEL v19 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  0LL);
    BOOL v20 = (void *)*((void *)v2 + 40);
    *((void *)v2 + 40) = v19;

    objc_initWeak(&location, v2);
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NEConfigurationManager sharedManagerForAllUsers]( &OBJC_CLASS___NEConfigurationManager,  "sharedManagerForAllUsers"));
    uint64_t v22 = *((void *)v2 + 11);
    v44[0] = _NSConcreteStackBlock;
    v44[1] = 3221225472LL;
    v44[2] = sub_10004CFCC;
    v44[3] = &unk_1000BE040;
    objc_copyWeak(&v45, &location);
    [v21 setChangedQueue:v22 andHandler:v44];

    dispatch_source_t v23 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_signal,  0xFuLL,  0LL,  *((dispatch_queue_t *)v2 + 11));
    __int128 v24 = (void *)*((void *)v2 + 18);
    *((void *)v2 + 1_Block_object_dispose(va, 8) = v23;

    __int128 v25 = (dispatch_source_s *)*((void *)v2 + 18);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472LL;
    handler[2] = sub_10004D200;
    handler[3] = &unk_1000BEC08;
    __int128 v26 = v2;
    uint64_t v43 = v26;
    dispatch_source_set_event_handler(v25, handler);
    dispatch_resume(*((dispatch_object_t *)v2 + 18));
    __int128 v27 = (void *)*((void *)v2 + 12);
    if (v27)
    {
      if (xpc_get_type(v27) == (xpc_type_t)&_xpc_type_connection)
      {
        __int128 v29 = (void *)*((void *)v2 + 14);
        if (v29)
        {
          if (xpc_get_type(v29) == (xpc_type_t)&_xpc_type_connection)
          {
            id v30 = (void *)*((void *)v2 + 13);
            if (v30)
            {
              if (xpc_get_type(v30) == (xpc_type_t)&_xpc_type_connection)
              {
                xpc_connection_set_target_queue(*((xpc_connection_t *)v2 + 12), *((dispatch_queue_t *)v2 + 11));
                uint64_t v31 = (_xpc_connection_s *)*((void *)v2 + 12);
                v40[0] = _NSConcreteStackBlock;
                v40[1] = 3221225472LL;
                v40[2] = sub_10004D3EC;
                v40[3] = &unk_1000BE088;
                id v32 = v26;
                id v41 = v32;
                xpc_connection_set_event_handler(v31, v40);
                xpc_connection_set_target_queue(*((xpc_connection_t *)v2 + 13), *((dispatch_queue_t *)v2 + 11));
                int v33 = (_xpc_connection_s *)*((void *)v2 + 13);
                v38[0] = _NSConcreteStackBlock;
                v38[1] = 3221225472LL;
                v38[2] = sub_10004D44C;
                v38[3] = &unk_1000BE088;
                int v34 = v32;
                id v39 = v34;
                xpc_connection_set_event_handler(v33, v38);
                xpc_connection_set_target_queue(*((xpc_connection_t *)v2 + 14), *((dispatch_queue_t *)v2 + 11));
                id v35 = (_xpc_connection_s *)*((void *)v2 + 14);
                v36[0] = _NSConcreteStackBlock;
                v36[1] = 3221225472LL;
                v36[2] = sub_10004D4B4;
                v36[3] = &unk_1000BE088;
                int v2 = v34;
                id v37 = v2;
                xpc_connection_set_event_handler(v35, v36);

                objc_destroyWeak(&v45);
                objc_destroyWeak(&location);
                goto LABEL_7;
              }
            }
          }
        }
      }
    }

    objc_destroyWeak(&v45);
    objc_destroyWeak(&location);

    goto LABEL_6;
  }

void sub_10004F644(_Unwind_Exception *a1)
{
}

void sub_10004F66C(uint64_t a1, const char *a2)
{
  id Property = *(dispatch_queue_s **)(a1 + 32);
  if (Property)
  {
    id Property = (dispatch_queue_s *)objc_getProperty(Property, a2, 88LL, 1);
    uint64_t v4 = *(void *)(a1 + 32);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000511EC;
  block[3] = &unk_1000BEC08;
  void block[4] = v4;
  dispatch_async(Property, block);
}

void sub_10004F6E8(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2 != -1) {
    goto LABEL_8;
  }
  out_tokeid n = -1;
  uint64_t v3 = notify_register_check("com.apple.nesessionmanager.info", &out_token);
  if ((_DWORD)v3)
  {
    uint64_t v5 = ne_log_obj(v3, v4);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v13 = "com.apple.nesessionmanager.info";
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Failed to register for the %s notification",  buf,  0xCu);
    }

    int v2 = *(_DWORD *)(a1 + 40);
  }

  else
  {
    int v2 = out_token;
    *(_DWORD *)(a1 + 40) = out_token;
  }

  if (v2 != -1)
  {
LABEL_8:
    uint64_t v7 = notify_set_state(v2, *(void *)(a1 + 288));
    if ((_DWORD)v7)
    {
      uint64_t v9 = ne_log_obj(v7, v8);
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315138;
        id v13 = "com.apple.nesessionmanager.info";
        _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Failed to set the state for the %s notification",  buf,  0xCu);
      }
    }

    else
    {
      notify_post("com.apple.nesessionmanager.info");
    }
  }

void sub_10004F850(uint64_t a1, xpc_object_t xdict)
{
  string = xpc_dictionary_get_string(xdict, _xpc_event_key_name);
  uint64_t v4 = strcmp(string, "com.apple.networkextension.apps-changed");
  if (!(_DWORD)v4)
  {
    uint64_t v6 = ne_log_obj(v4, v5);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Handling Installed Apps Changed notification",  buf,  2u);
    }

    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v8, 120LL, 1);
    }
    id obj = Property;
    id v10 = [obj countByEnumeratingWithState:&v32 objects:v38 count:16];
    if (v10)
    {
      id v12 = v10;
      uint64_t v27 = *(void *)v33;
      do
      {
        for (id i = 0LL; i != v12; id i = (char *)i + 1)
        {
          if (*(void *)v33 != v27) {
            objc_enumerationMutation(obj);
          }
          uint64_t v14 = *(void *)(*((void *)&v32 + 1) + 8LL * (void)i);
          __int128 v28 = 0u;
          __int128 v29 = 0u;
          __int128 v30 = 0u;
          __int128 v31 = 0u;
          id v15 = *(id *)(a1 + 32);
          if (v15) {
            id v15 = objc_getProperty(v15, v11, 120LL, 1);
          }
          __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:v14]);
          id v17 = [v16 countByEnumeratingWithState:&v28 objects:v37 count:16];
          if (v17)
          {
            id v19 = v17;
            uint64_t v20 = *(void *)v29;
            do
            {
              for (j = 0LL; j != v19; j = (char *)j + 1)
              {
                if (*(void *)v29 != v20) {
                  objc_enumerationMutation(v16);
                }
                uint64_t v22 = *(void *)(*((void *)&v28 + 1) + 8LL * (void)j);
                id v23 = *(id *)(a1 + 32);
                if (v23) {
                  id v23 = objc_getProperty(v23, v18, 120LL, 1);
                }
                __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:v14]);
                __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:v22]);

                [v25 handleInstalledAppsChanged];
              }

              id v19 = [v16 countByEnumeratingWithState:&v28 objects:v37 count:16];
            }

            while (v19);
          }
        }

        id v12 = [obj countByEnumeratingWithState:&v32 objects:v38 count:16];
      }

      while (v12);
    }
  }

void sub_10004FAB4(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 == 1)
  {
    uint64_t v5 = (void *)CNPluginMonitorEventCopyDisplayIDs(a3);
    id Property = *(id *)(a1 + 32);
    if (v5)
    {
      if (Property) {
        id Property = objc_getProperty(Property, v4, 80LL, 1);
      }
      id v7 = [Property isEqualToArray:v5];
    }

    else
    {
      if (!Property || (id v9 = objc_getProperty(Property, v4, 80LL, 1)) == 0LL)
      {
LABEL_34:

        return;
      }
    }

    uint64_t v10 = ne_log_obj(v7, v8);
    xpc_connection_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 136315394;
      id v45 = "-[NESMServer registerForCaptiveNetworkPluginChanges]_block_invoke";
      __int16 v46 = 2112;
      objc_super v47 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "%s: CNPluginMonitor - got new apps %@",  buf,  0x16u);
    }

    id v13 = *(id *)(a1 + 32);
    __int128 v31 = v5;
    if (v13)
    {
      objc_setProperty_atomic(v13, v12, v5, 80LL);
      id v13 = *(id *)(a1 + 32);
      __int128 v38 = 0u;
      __int128 v39 = 0u;
      __int128 v40 = 0u;
      __int128 v41 = 0u;
      if (v13) {
        id v13 = objc_getProperty(v13, v14, 120LL, 1);
      }
    }

    else
    {
      __int128 v40 = 0u;
      __int128 v41 = 0u;
      __int128 v38 = 0u;
      __int128 v39 = 0u;
    }

    id obj = v13;
    id v15 = [obj countByEnumeratingWithState:&v38 objects:v43 count:16];
    if (v15)
    {
      id v17 = v15;
      uint64_t v33 = *(void *)v39;
      do
      {
        for (id i = 0LL; i != v17; id i = (char *)i + 1)
        {
          if (*(void *)v39 != v33) {
            objc_enumerationMutation(obj);
          }
          uint64_t v19 = *(void *)(*((void *)&v38 + 1) + 8LL * (void)i);
          __int128 v34 = 0u;
          __int128 v35 = 0u;
          __int128 v36 = 0u;
          __int128 v37 = 0u;
          id v20 = *(id *)(a1 + 32);
          if (v20) {
            id v20 = objc_getProperty(v20, v16, 120LL, 1);
          }
          uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKeyedSubscript:v19]);
          id v22 = [v21 countByEnumeratingWithState:&v34 objects:v42 count:16];
          if (v22)
          {
            id v24 = v22;
            uint64_t v25 = *(void *)v35;
            do
            {
              for (j = 0LL; j != v24; j = (char *)j + 1)
              {
                if (*(void *)v35 != v25) {
                  objc_enumerationMutation(v21);
                }
                uint64_t v27 = *(void *)(*((void *)&v34 + 1) + 8LL * (void)j);
                id v28 = *(id *)(a1 + 32);
                if (v28) {
                  id v28 = objc_getProperty(v28, v23, 120LL, 1);
                }
                __int128 v29 = (void *)objc_claimAutoreleasedReturnValue([v28 objectForKeyedSubscript:v19]);
                __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([v29 objectForKeyedSubscript:v27]);
                [v30 handleCaptiveNetworkPluginsChanged];
              }

              id v24 = [v21 countByEnumeratingWithState:&v34 objects:v42 count:16];
            }

            while (v24);
          }
        }

        id v17 = [obj countByEnumeratingWithState:&v38 objects:v43 count:16];
      }

      while (v17);
    }

    uint64_t v5 = v31;
    goto LABEL_34;
  }

void sub_10004FD9C(uint64_t a1, void *a2)
{
  int v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = v3;
  if (v2)
  {
    string = xpc_dictionary_get_string(v3, _xpc_event_key_name);
    id v7 = string;
    if (string)
    {
      string = (const char *)strcmp(string, "SessionManager");
      if (!(_DWORD)string)
      {
        int64_t int64 = xpc_dictionary_get_int64(v4, "network-origin-notification");
        uint64_t v12 = ne_log_obj(int64, v11);
        id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = inputNotification2String(int64);
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Received a %s event",  (uint8_t *)&buf,  0xCu);
        }

        if ((_DWORD)int64 == 1)
        {
          if ((ne_session_vod_evaluate_connection_present() & 1) == 0)
          {
            id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NENetworkPropertiesCache sharedCache]( &OBJC_CLASS___NENetworkPropertiesCache,  "sharedCache"));
            [v15 clear];
          }
        }

        else if ((_DWORD)int64 == 6)
        {
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NENetworkPropertiesCache sharedCache](&OBJC_CLASS___NENetworkPropertiesCache, "sharedCache"));
          [v14 rotateEncryptionKey];

          goto LABEL_6;
        }

        v20[0] = 0LL;
        v20[1] = v20;
        v20[2] = 0x3032000000LL;
        v20[3] = sub_10004DAC0;
        void v20[4] = sub_10004DAD0;
        id v21 = (id)os_transaction_create("com.apple.nesessionmanager.loadConfigurations");
        __int128 v16 = (void *)objc_claimAutoreleasedReturnValue( +[NEConfigurationManager sharedManagerForAllUsers]( &OBJC_CLASS___NEConfigurationManager,  "sharedManagerForAllUsers"));
        id v18 = objc_getProperty(v2, v17, 88LL, 1);
        *(void *)&__int128 buf = _NSConcreteStackBlock;
        *((void *)&buf + 1) = 3221225472LL;
        id v23 = sub_100050058;
        id v24 = &unk_1000BE2D8;
        uint64_t v25 = v2;
        __int128 v26 = v20;
        int v27 = int64;
        [v16 loadConfigurations:0 withFilter:0 completionQueue:v18 completionHandler:&buf];

        _Block_object_dispose(v20, 8);
        goto LABEL_6;
      }
    }

    uint64_t v8 = ne_log_obj(string, v6);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = "";
      if (v7) {
        uint64_t v19 = v7;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v19;
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "Got an unexpected network detection event with name %s",  (uint8_t *)&buf,  0xCu);
    }
  }

void sub_100050038( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100050058(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a5;
  uint64_t v12 = v10;
  SEL v79 = v9;
  if (!v9)
  {
    __int128 v93 = 0u;
    __int128 v94 = 0u;
    __int128 v91 = 0u;
    __int128 v92 = 0u;
    id v82 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v91, v96, 16, 0);
    if (!v82) {
      goto LABEL_48;
    }
    uint64_t v80 = *(void *)v92;
    id v81 = v8;
    id v15 = @"UserMap";
LABEL_7:
    uint64_t v16 = 0LL;
    while (1)
    {
      if (*(void *)v92 != v80) {
        objc_enumerationMutation(v8);
      }
      uint64_t v83 = v16;
      SEL v17 = *(void **)(*((void *)&v91 + 1) + 8 * v16);
      __int128 v87 = 0u;
      __int128 v88 = 0u;
      __int128 v89 = 0u;
      __int128 v90 = 0u;
      id v18 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:v15]);
      id v85 = [v18 countByEnumeratingWithState:&v87 objects:v95 count:16];
      if (v85) {
        break;
      }
LABEL_46:

      uint64_t v16 = v83 + 1;
      id v8 = v81;
      if ((id)(v83 + 1) == v82)
      {
        id v82 = [v81 countByEnumeratingWithState:&v91 objects:v96 count:16];
        if (!v82) {
          goto LABEL_48;
        }
        goto LABEL_7;
      }
    }

    uint64_t v19 = *(void *)v88;
LABEL_12:
    uint64_t v20 = 0LL;
    while (1)
    {
      if (*(void *)v88 != v19) {
        objc_enumerationMutation(v18);
      }
      uint64_t v21 = *(void *)(*((void *)&v87 + 1) + 8 * v20);
      id v22 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:v15]);
      id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 objectForKeyedSubscript:v21]);

      id v24 = (void *)objc_claimAutoreleasedReturnValue([v17 identifier]);
      uint64_t v86 = v23;
      LODWORD(v22) = [v23 containsObject:v24];

      if (!(_DWORD)v22) {
        goto LABEL_44;
      }
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v17 alwaysOnVPN]);

      if (v25)
      {
        __int128 v26 = *(_BYTE **)(a1 + 32);
        int v27 = (void *)objc_claimAutoreleasedReturnValue([v17 identifier]);
        sub_100050688(v26, v27, 3LL, *(_DWORD *)(a1 + 48));
      }

      id v28 = (void *)objc_claimAutoreleasedReturnValue([v17 contentFilter]);

      if (v28)
      {
        __int128 v29 = *(_BYTE **)(a1 + 32);
        __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([v17 identifier]);
        sub_100050688(v29, v30, 4LL, *(_DWORD *)(a1 + 48));
      }

      uint64_t v31 = objc_claimAutoreleasedReturnValue([v17 VPN]);
      if (v31)
      {
        __int128 v32 = (void *)v31;
        uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v17 VPN]);
        if ([v33 isEnabled])
        {
          uint64_t v34 = v19;
          uint64_t v35 = a1;
          __int128 v36 = v18;
          __int128 v37 = v15;
          __int128 v38 = v12;
          __int128 v39 = (void *)objc_claimAutoreleasedReturnValue([v17 VPN]);
          unsigned int v84 = [v39 isOnDemandEnabled];

          uint64_t v12 = v38;
          id v15 = v37;
          id v18 = v36;
          a1 = v35;
          uint64_t v19 = v34;

          if (!v84) {
            goto LABEL_26;
          }
          __int128 v40 = *(_BYTE **)(a1 + 32);
          __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([v17 identifier]);
          sub_100050688(v40, v32, 1LL, *(_DWORD *)(a1 + 48));
        }

        else
        {
        }
      }

LABEL_26:
      uint64_t v41 = objc_claimAutoreleasedReturnValue([v17 appVPN]);
      if (v41)
      {
        uint64_t v42 = (void *)v41;
        uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v17 appVPN]);
        unsigned int v44 = [v43 isEnabled];

        if (v44)
        {
          id v45 = *(_BYTE **)(a1 + 32);
          __int16 v46 = (void *)objc_claimAutoreleasedReturnValue([v17 identifier]);
          sub_100050688(v45, v46, 2LL, *(_DWORD *)(a1 + 48));
        }
      }

      uint64_t v47 = objc_claimAutoreleasedReturnValue([v17 pathController]);
      if (v47)
      {
        __int128 v48 = (void *)v47;
        uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v17 pathController]);
        unsigned int v50 = [v49 isEnabled];

        if (v50)
        {
          uint64_t v51 = *(_BYTE **)(a1 + 32);
          __int16 v52 = (void *)objc_claimAutoreleasedReturnValue([v17 identifier]);
          sub_100050688(v51, v52, 5LL, *(_DWORD *)(a1 + 48));
        }
      }

      uint64_t v53 = objc_claimAutoreleasedReturnValue([v17 dnsProxy]);
      if (v53)
      {
        uint64_t v54 = (void *)v53;
        id v55 = (void *)objc_claimAutoreleasedReturnValue([v17 dnsProxy]);
        unsigned int v56 = [v55 isEnabled];

        if (v56)
        {
          id v57 = *(_BYTE **)(a1 + 32);
          uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue([v17 identifier]);
          sub_100050688(v57, v58, 6LL, *(_DWORD *)(a1 + 48));
        }
      }

      uint64_t v59 = objc_claimAutoreleasedReturnValue([v17 dnsSettings]);
      if (v59)
      {
        id v60 = (void *)v59;
        SEL v61 = (void *)objc_claimAutoreleasedReturnValue([v17 dnsSettings]);
        unsigned int v62 = [v61 isEnabled];

        if (v62)
        {
          uint64_t v63 = *(_BYTE **)(a1 + 32);
          uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue([v17 identifier]);
          sub_100050688(v63, v64, 7LL, *(_DWORD *)(a1 + 48));
        }
      }

      uint64_t v65 = objc_claimAutoreleasedReturnValue([v17 appPush]);
      if (v65)
      {
        id v66 = (void *)v65;
        id v67 = (void *)objc_claimAutoreleasedReturnValue([v17 appPush]);
        unsigned int v68 = [v67 isEnabled];

        if (v68)
        {
          BOOL v69 = *(_BYTE **)(a1 + 32);
          uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue([v17 identifier]);
          sub_100050688(v69, v70, 8LL, *(_DWORD *)(a1 + 48));
        }
      }

      uint64_t v71 = objc_claimAutoreleasedReturnValue([v17 relay]);
      if (v71)
      {
        SEL v72 = (void *)v71;
        uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue([v17 relay]);
        unsigned int v74 = [v73 isEnabled];

        if (v74)
        {
          int v75 = *(_BYTE **)(a1 + 32);
          uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue([v17 identifier]);
          sub_100050688(v75, v76, 9LL, *(_DWORD *)(a1 + 48));
        }
      }
  }

            unsigned int v56 = objc_getProperty(self, v48, *((int *)v53 + 708), 1);
            if (v23 != v56)
            {

              if ((v24 & 1) != 0)
              {
LABEL_65:
                goto LABEL_67;
              }

void sub_100050688(_BYTE *a1, void *a2, uint64_t a3, int a4)
{
  id v7 = a2;
  if (a1)
  {
    v16[0] = 0LL;
    v16[1] = v16;
    v16[2] = 0x3032000000LL;
    v16[3] = sub_10004DAC0;
    v16[4] = sub_10004DAD0;
    id v17 = (id)os_transaction_create("com.apple.nesessionmanager.notifySession");
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_100050814;
    v14[3] = &unk_1000BE2B0;
    int v15 = a4;
    void v14[4] = v16;
    id v8 = objc_retainBlock(v14);
    id v10 = objc_getProperty(a1, v9, 120LL, 1);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:v7]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a3));
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:v12]);

    if (v13) {
      ((void (*)(void *, void *))v8[2])(v8, v13);
    }
    else {
      sub_10004E744(a1, v7, a3, v8);
    }

    _Block_object_dispose(v16, 8);
  }
}

void sub_1000507FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100050814(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0LL;
}

void sub_10005084C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(_DWORD **)(a1 + 32);
  if (v3)
  {
    if (v3[7] == (_DWORD)a2) {
      goto LABEL_3;
    }
    if (v3[8] == (_DWORD)a2)
    {
      uint64_t v8 = ne_log_obj(a1, a2);
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = 2LL;
        goto LABEL_15;
      }

      *(_WORD *)__int128 buf = 0;
      id v7 = "DNS changed";
      uint64_t v6 = 2LL;
      goto LABEL_8;
    }

    int v9 = v3[9];
LABEL_10:
    if (v9 != (_DWORD)a2) {
      return;
    }
    uint64_t v10 = ne_log_obj(a1, a2);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Proxies changed", buf, 2u);
    }

    uint64_t v6 = 4LL;
    goto LABEL_15;
  }

  if ((_DWORD)a2)
  {
    int v9 = 0;
    goto LABEL_10;
  }

LABEL_3:
  uint64_t v4 = ne_log_obj(a1, a2);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  uint64_t v6 = 1LL;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__int128 buf = 0;
    id v7 = "NWI changed";
    uint64_t v6 = 1LL;
LABEL_8:
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, v7, buf, 2u);
  }

  uint64_t v10 = 2LL;
LABEL_6:
  sub_1000714E4((id *)v9, (const char *)v10);
}

void sub_100050B54(uint64_t a1, int a2)
{
  dispatch_time_t v5 = dispatch_time(0LL, 250000000LL);
  uint64_t v6 = *(void **)(a1 + 32);
  if (v6) {
    id Property = (dispatch_queue_s *)objc_getProperty(v6, v4, 88LL, 1);
  }
  else {
    id Property = 0LL;
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  _DWORD v8[2] = sub_100050C0C;
  v8[3] = &unk_1000BE238;
  id v9 = *(id *)(a1 + 40);
  int v10 = a2;
  dispatch_after(v5, Property, v8);
}

uint64_t sub_100050C0C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(unsigned int *)(a1 + 40));
}

void sub_100050C20(uint64_t a1, int token)
{
  uint64_t state64 = 0LL;
  uint64_t state = notify_get_state(token, &state64);
  uint64_t v5 = ne_log_obj(state, v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v25 = "Locked";
    if (!state64) {
      uint64_t v25 = "Unlocked";
    }
    *(_DWORD *)__int128 buf = 134218242;
    uint64_t v40 = state64;
    __int16 v41 = 2080;
    uint64_t v42 = v25;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Got a SpringBoard lock state event with uint64_t state = %llu (%s)",  buf,  0x16u);
  }

  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v7, 120LL, 1);
  }
  id obj = Property;
  id v9 = [obj countByEnumeratingWithState:&v32 objects:v38 count:16];
  if (v9)
  {
    id v11 = v9;
    uint64_t v27 = *(void *)v33;
    do
    {
      for (id i = 0LL; i != v11; id i = (char *)i + 1)
      {
        if (*(void *)v33 != v27) {
          objc_enumerationMutation(obj);
        }
        uint64_t v13 = *(void *)(*((void *)&v32 + 1) + 8LL * (void)i);
        __int128 v28 = 0u;
        __int128 v29 = 0u;
        __int128 v30 = 0u;
        __int128 v31 = 0u;
        id v14 = *(id *)(a1 + 32);
        if (v14) {
          id v14 = objc_getProperty(v14, v10, 120LL, 1);
        }
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKeyedSubscript:v13]);
        id v16 = [v15 countByEnumeratingWithState:&v28 objects:v37 count:16];
        if (v16)
        {
          id v18 = v16;
          uint64_t v19 = *(void *)v29;
          do
          {
            for (j = 0LL; j != v18; j = (char *)j + 1)
            {
              if (*(void *)v29 != v19) {
                objc_enumerationMutation(v15);
              }
              uint64_t v21 = *(void *)(*((void *)&v28 + 1) + 8LL * (void)j);
              id v22 = *(id *)(a1 + 32);
              if (state64)
              {
                if (v22) {
                  id v22 = objc_getProperty(v22, v17, 120LL, 1);
                }
                uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 objectForKeyedSubscript:v13]);
                id v24 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:v21]);
                [v24 handleDeviceLock];
              }

              else
              {
                if (v22) {
                  id v22 = objc_getProperty(v22, v17, 120LL, 1);
                }
                uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 objectForKeyedSubscript:v13]);
                id v24 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:v21]);
                [v24 handleDeviceUnlock];
              }
            }

            id v18 = [v15 countByEnumeratingWithState:&v28 objects:v37 count:16];
          }

          while (v18);
        }
      }

      id v11 = [obj countByEnumeratingWithState:&v32 objects:v38 count:16];
    }

    while (v11);
  }
}

void sub_100050EE8(void *a1)
{
  id v1 = a1;
  [v1 prohibitNetworkAgentsWithDomain:@"NetworkExtension" type:@"VPN"];
  [v1 prohibitNetworkAgentsWithDomain:@"NetworkExtension" type:@"AppVPN"];
  [v1 prohibitNetworkAgentsWithDomain:@"NetworkExtension" type:@"AOVPN"];
}

void sub_100050F54(uint64_t a1)
{
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    id obj = objc_getProperty(v3, v2, 120LL, 1);
    id v27 = [obj countByEnumeratingWithState:&v33 objects:v40 count:16];
    if (v27)
    {
      uint64_t v26 = *(void *)v34;
      do
      {
        uint64_t v5 = 0LL;
        do
        {
          if (*(void *)v34 != v26) {
            objc_enumerationMutation(obj);
          }
          uint64_t v28 = v5;
          uint64_t v6 = *(void *)(*((void *)&v33 + 1) + 8 * v5);
          __int128 v29 = 0u;
          __int128 v30 = 0u;
          __int128 v31 = 0u;
          __int128 v32 = 0u;
          id v7 = objc_msgSend(objc_getProperty(v3, v4, 120, 1), "objectForKeyedSubscript:", v6);
          uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
          id v9 = [v8 countByEnumeratingWithState:&v29 objects:v39 count:16];
          if (v9)
          {
            id v11 = v9;
            uint64_t v12 = *(void *)v30;
            do
            {
              uint64_t v13 = 0LL;
              do
              {
                if (*(void *)v30 != v12) {
                  objc_enumerationMutation(v8);
                }
                uint64_t v14 = *(void *)(*((void *)&v29 + 1) + 8LL * (void)v13);
                uint64_t v15 = ne_log_obj(v9, v10);
                id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
                if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
                {
                  id v18 = objc_msgSend(objc_getProperty(v3, v17, 120, 1), "objectForKeyedSubscript:", v6);
                  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
                  id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:v14]);
                  *(_DWORD *)__int128 buf = 138412290;
                  __int128 v38 = v20;
                  _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "Passing ranked interface change event to %@",  buf,  0xCu);
                }

                id v22 = objc_msgSend(objc_getProperty(v3, v21, 120, 1), "objectForKeyedSubscript:", v6);
                uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
                id v24 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:v14]);
                [v24 handleChangeEventForRankedInterfaces];

                uint64_t v13 = (char *)v13 + 1;
              }

              while (v11 != v13);
              id v9 = [v8 countByEnumeratingWithState:&v29 objects:v39 count:16];
              id v11 = v9;
            }

            while (v9);
          }

          uint64_t v5 = v28 + 1;
        }

        while ((id)(v28 + 1) != v27);
        id v27 = [obj countByEnumeratingWithState:&v33 objects:v40 count:16];
      }

      while (v27);
    }
  }

void sub_1000511EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3 && (*(_BYTE *)(v3 + 10) & 1) != 0)
  {
    uint64_t v9 = ne_log_obj(a1, a2);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Ignoring provider manager started because it did not start in time",  buf,  2u);
    }
  }

  else
  {
    uint64_t v4 = ne_log_obj(a1, a2);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Provider manager started", v11, 2u);
    }

    uint64_t v7 = *(void *)(a1 + 32);
    if (v7)
    {
      *(_BYTE *)(v7 + 10) = 1;
      uint64_t v8 = *(void **)(a1 + 32);
    }

    else
    {
      uint64_t v8 = 0LL;
    }

    sub_1000512CC(v8, v6);
  }

void sub_1000512CC(id self, const char *a2)
{
  if (self && (*((_BYTE *)self + 9) & 1) != 0 && (*((_BYTE *)self + 10) & 1) != 0)
  {
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    id obj = objc_getProperty(self, a2, 128LL, 1);
    id v19 = [obj countByEnumeratingWithState:&v25 objects:v34 count:16];
    if (v19)
    {
      uint64_t v18 = *(void *)v26;
      do
      {
        uint64_t v4 = 0LL;
        do
        {
          if (*(void *)v26 != v18) {
            objc_enumerationMutation(obj);
          }
          uint64_t v20 = v4;
          uint64_t v5 = *(void **)(*((void *)&v25 + 1) + 8 * v4);
          __int128 v21 = 0u;
          __int128 v22 = 0u;
          __int128 v23 = 0u;
          __int128 v24 = 0u;
          id v6 = objc_msgSend(objc_getProperty(self, v3, 128, 1), "objectForKeyedSubscript:", v5);
          uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
          id v8 = [v7 countByEnumeratingWithState:&v21 objects:v33 count:16];
          if (v8)
          {
            id v10 = v8;
            uint64_t v11 = *(void *)v22;
            do
            {
              uint64_t v12 = 0LL;
              do
              {
                if (*(void *)v22 != v11) {
                  objc_enumerationMutation(v7);
                }
                uint64_t v13 = *(void **)(*((void *)&v21 + 1) + 8LL * (void)v12);
                uint64_t v14 = ne_log_obj(v8, v9);
                uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
                if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
                {
                  unsigned int v16 = [v13 intValue];
                  *(_DWORD *)__int128 buf = 67109378;
                  unsigned int v30 = v16;
                  __int16 v31 = 2112;
                  __int128 v32 = v5;
                  _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Loading pending session with type %d and ID %@",  buf,  0x12u);
                }

                sub_10004EA5C(self, (int)[v13 intValue], v5);
                uint64_t v12 = (char *)v12 + 1;
              }

              while (v10 != v12);
              id v8 = [v7 countByEnumeratingWithState:&v21 objects:v33 count:16];
              id v10 = v8;
            }

            while (v8);
          }

          uint64_t v4 = v20 + 1;
        }

        while ((id)(v20 + 1) != v19);
        id v19 = [obj countByEnumeratingWithState:&v25 objects:v34 count:16];
      }

      while (v19);
    }
  }

void sub_100051524(uint64_t a1, const char *a2)
{
  id Property = *(dispatch_queue_s **)(a1 + 32);
  if (Property)
  {
    id Property = (dispatch_queue_s *)objc_getProperty(Property, a2, 88LL, 1);
    uint64_t v4 = *(void *)(a1 + 32);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10005167C;
  block[3] = &unk_1000BEC08;
  void block[4] = v4;
  dispatch_async(Property, block);
}

void sub_1000515A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = ne_log_obj(a1, a2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)id v10 = 0;
    _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "File handles were not received and/or provider manager was not started in time, loading pending sessions",  v10,  2u);
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    id v6 = *(dispatch_source_s **)(v5 + 312);
    if (!v6 || (dispatch_source_cancel(v6), sub_100051668(*(void *)(a1 + 32)), (uint64_t v5 = *(void *)(a1 + 32)) != 0))
    {
      *(_BYTE *)(v5 + 9) = 1;
      uint64_t v7 = *(void *)(a1 + 32);
      if (v7) {
        *(_BYTE *)(v7 + 10) = 1;
      }
    }
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](&OBJC_CLASS___NEFileHandleMaintainer, "sharedMaintainer"));
  [v8 commit];

  sub_1000512CC(*(id *)(a1 + 32), v9);
}

void sub_100051668(uint64_t a1)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 312), 0LL);
  }
}

void sub_10005167C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = *(void *)(a1 + 32);
  if (!v3
    || (a1 = *(void *)(v3 + 312)) != 0
    && (dispatch_source_cancel((dispatch_source_t)a1),
        sub_100051668(*(void *)(v2 + 32)),
        (uint64_t v3 = *(void *)(v2 + 32)) == 0))
  {
LABEL_6:
    uint64_t v4 = ne_log_obj(a1, a2);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Received file handles", buf, 2u);
    }

    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](&OBJC_CLASS___NEFileHandleMaintainer, "sharedMaintainer"));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1000517BC;
    v10[3] = &unk_1000BE698;
    void v10[4] = *(void *)(v2 + 32);
    [v6 iterateFileHandlesWithBlock:v10];

    sub_1000512CC(*(id *)(v2 + 32), v7);
    return;
  }

  if ((*(_BYTE *)(v3 + 9) & 1) == 0)
  {
    *(_BYTE *)(v3 + 9) = 1;
    goto LABEL_6;
  }

  uint64_t v8 = ne_log_obj(a1, a2);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Ignoring received file handles because they were not received in time",  buf,  2u);
  }
}

uint64_t sub_1000517BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NENetworkAgentRegistrationFileHandle);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    id v5 = v3;
    uint64_t v7 = ne_log_obj(v5, v6);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 sessionType]);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 configurationIdentifier]);
      *(_DWORD *)__int128 buf = 138412546;
      __int128 v21 = v9;
      __int16 v22 = 2112;
      __int128 v23 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Creating a pending session request from file handle for type %@ and id %@",  buf,  0x16u);
    }

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v5 description]);
    uint64_t v12 = *(_BYTE **)(a1 + 32);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v5 configurationIdentifier]);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v5 sessionType]);
    id v15 = [v14 intValue];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_10005197C;
    v18[3] = &unk_1000BE120;
    id v19 = v11;
    id v16 = v11;
    sub_10004E744(v12, v13, (uint64_t)v15, v18);
  }

  return 1LL;
}

void sub_10005197C(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v3 = ne_log_obj(a1, 0LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = 138412290;
      uint64_t v7 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "Failed to load session for file handle %@",  (uint8_t *)&v6,  0xCu);
    }
  }

void sub_100051A28(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 120LL, 1);
  }
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([Property objectForKeyedSubscript:*(void *)(a1 + 40)]);
  if (v5)
  {
    int v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48)));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:v6]);

    uint64_t v10 = ne_log_obj(v8, v9);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = 138412290;
      v19[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Removing session %@", (uint8_t *)&v18, 0xCu);
    }

    [v7 removeAllClients];
    [v7 dropServer];
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48)));
    [v5 removeObjectForKey:v12];

    if (![v5 count])
    {
      id v14 = *(id *)(a1 + 32);
      if (v14) {
        id v14 = objc_getProperty(v14, v13, 120LL, 1);
      }
      [v14 removeObjectForKey:*(void *)(a1 + 40)];
    }
  }

  else
  {
    uint64_t v15 = ne_log_obj(0LL, v4);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = *(_DWORD *)(a1 + 48);
      uint64_t v17 = *(void *)(a1 + 40);
      int v18 = 67109378;
      LODWORD(v19[0]) = v16;
      WORD2(v19[0]) = 2112;
      *(void *)((char *)v19 + 6) = v17;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v7,  OS_LOG_TYPE_DEFAULT,  "Cannot remove session with type %d: no sessions for id %@",  (uint8_t *)&v18,  0x12u);
    }
  }
}

void sub_100051BF8(uint64_t a1)
{
}

void sub_100051C0C(void *a1, const char *a2)
{
  if (a1)
  {
    id Property = (dispatch_queue_s *)objc_getProperty(a1, a2, 88LL, 1);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100051C78;
    block[3] = &unk_1000BEC08;
    void block[4] = a1;
    dispatch_async(Property, block);
  }

void sub_100051C78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = ne_log_obj(a1, a2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5) {
      LODWORD(v5) = *(_DWORD *)(v5 + 16);
    }
    v12[0] = 67109120;
    v12[1] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "ackSleep with ack count = %d", (uint8_t *)v12, 8u);
  }

  uint64_t v7 = *(void *)(a1 + 32);
  if (v7)
  {
    int v8 = *(_DWORD *)(v7 + 16);
    BOOL v9 = __OFSUB__(v8, 1);
    int v10 = v8 - 1;
    if (v10 < 0 == v9)
    {
      *(_DWORD *)(v7 + 16) = v10;
      id Property = *(_DWORD **)(a1 + 32);
      if (Property)
      {
        if (Property[4]) {
          return;
        }
        id Property = objc_getProperty(Property, v6, 136LL, 1);
      }

      sub_100086B60((time_t *)Property, (uint64_t)v6);
    }
  }

void sub_100051D5C(void *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    uint64_t v4 = objc_sync_enter(v3);
    if (a2)
    {
      unint64_t v6 = v3[37];
      if (v6 < -a2 && a2 < 0) {
        uint64_t v8 = -(uint64_t)v6;
      }
      else {
        uint64_t v8 = a2;
      }
      unint64_t v9 = v6 + v8;
      v3[37] = v9;
      if (v9) {
        BOOL v10 = v6 == 0;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10)
      {
        v3[36] |= 1uLL;
        uint64_t v17 = ne_log_obj(v4, v5);
        int v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_INFO,  "Active session count is greater than 0, setting hasActiveSessions flag",  buf,  2u);
        }

        sub_10004F6E8((uint64_t)v3);
      }

      else
      {
        if (v9) {
          BOOL v11 = 1;
        }
        else {
          BOOL v11 = v6 == 0;
        }
        if (!v11)
        {
          v3[36] &= ~1uLL;
          uint64_t v12 = ne_log_obj(v4, v5);
          uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            v19[0] = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "Active session count is equal to 0, clearing hasActiveSessions flag",  (uint8_t *)v19,  2u);
          }

          sub_10004F6E8((uint64_t)v3);
          if (objc_getProperty(v3, v14, 304LL, 1))
          {
            int v16 = (void (**)(void))objc_getProperty(v3, v15, 304LL, 1);
            v16[2]();
          }
        }
      }
    }

    objc_sync_exit(v3);
  }

void sub_100051EC0(_Unwind_Exception *a1)
{
}

uint64_t sub_100051EDC(void *a1, const char *a2, uint64_t a3)
{
  if (!a1) {
    return 0LL;
  }
  __int128 v71 = 0u;
  __int128 v72 = 0u;
  __int128 v69 = 0u;
  __int128 v70 = 0u;
  id v6 = objc_getProperty(a1, a2, 120LL, 1);
  id v57 = [v6 countByEnumeratingWithState:&v69 objects:v80 count:16];
  if (v57)
  {
    id obj = v6;
    uint64_t v63 = a3;
    uint64_t v64 = 0LL;
    uint64_t v8 = 0LL;
    char v61 = 1;
    uint64_t v56 = *(void *)v70;
    do
    {
      uint64_t v9 = 0LL;
      do
      {
        if (*(void *)v70 != v56) {
          objc_enumerationMutation(obj);
        }
        uint64_t v58 = v9;
        uint64_t v10 = *(void *)(*((void *)&v69 + 1) + 8 * v9);
        __int128 v65 = 0u;
        __int128 v66 = 0u;
        __int128 v67 = 0u;
        __int128 v68 = 0u;
        id v11 = objc_msgSend(objc_getProperty(a1, v7, 120, 1), "objectForKeyedSubscript:", v10);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        id v13 = [v12 countByEnumeratingWithState:&v65 objects:v79 count:16];
        if (v13)
        {
          id v15 = v13;
          uint64_t v16 = *(void *)v66;
          do
          {
            uint64_t v17 = 0LL;
            do
            {
              if (*(void *)v66 != v16) {
                objc_enumerationMutation(v12);
              }
              uint64_t v18 = *(void *)(*((void *)&v65 + 1) + 8LL * (void)v17);
              id v19 = objc_msgSend(objc_getProperty(a1, v14, 120, 1), "objectForKeyedSubscript:", v10);
              uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
              __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKeyedSubscript:v18]);

              if (v21)
              {
                if ([v21 supportsDefaultDrop])
                {
                  id v22 = [v21 disableDefaultDropAfterBoot];
                  if ((v22 & 1) == 0)
                  {
                    uint64_t v24 = ne_log_obj(v22, v23);
                    __int128 v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
                    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
                    {
                      id v60 = (void *)objc_claimAutoreleasedReturnValue([v21 configuration]);
                      unsigned int v62 = (void *)objc_claimAutoreleasedReturnValue([v60 name]);
                      unsigned int v59 = [v21 supportsDefaultDrop];
                      unsigned int v38 = [v21 disableDefaultDropAfterBoot];
                      *(_DWORD *)__int128 buf = 67109890;
                      *(_DWORD *)unsigned int v74 = 0;
                      *(_WORD *)&v74[4] = 2112;
                      *(void *)&v74[6] = v62;
                      __int16 v75 = 1024;
                      unsigned int v76 = v59;
                      __int16 v77 = 1024;
                      unsigned int v78 = v38;
                      _os_log_debug_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "applyIPDefaultDrop: disableDefaultDropAfterBoot %d - session %@ <supportsDefaultDrop %d> <disabl eDefaultDropAfterBoot %d>",  buf,  0x1Eu);
                    }

                    char v61 = 0;
                  }
                }

                if (objc_msgSend(v21, "isDropPersistent", obj) == (_DWORD)a2
                  && (!v63 || (uint64_t)[v21 defaultDropType] <= v63))
                {
                  switch((unint64_t)[v21 defaultDropType])
                  {
                    case 2uLL:
                      if (v8) {
                        BOOL v26 = v8 <= 2;
                      }
                      else {
                        BOOL v26 = 0;
                      }
                      int v27 = !v26;
                      BOOL v28 = v27 == 0;
                      __int128 v29 = v64;
                      if (!v28) {
                        __int128 v29 = @"High";
                      }
                      uint64_t v64 = v29;
                      uint64_t v30 = 2LL;
                      goto LABEL_54;
                    case 3uLL:
                      if (v8) {
                        BOOL v35 = v8 <= 3;
                      }
                      else {
                        BOOL v35 = 0;
                      }
                      int v36 = !v35;
                      BOOL v28 = v36 == 0;
                      __int128 v37 = v64;
                      if (!v28) {
                        __int128 v37 = @"Default";
                      }
                      uint64_t v64 = v37;
                      uint64_t v30 = 3LL;
                      goto LABEL_54;
                    case 4uLL:
                      if (v8) {
                        BOOL v31 = v8 <= 4;
                      }
                      else {
                        BOOL v31 = 0;
                      }
                      int v32 = !v31;
                      BOOL v28 = v32 == 0;
                      __int128 v33 = v64;
                      if (!v28) {
                        __int128 v33 = @"Low";
                      }
                      uint64_t v64 = v33;
                      uint64_t v30 = 4LL;
LABEL_54:
                      if (!v28) {
                        uint64_t v8 = v30;
                      }
                      break;
                    case 5uLL:
                      __int128 v34 = v64;
                      if (!v8) {
                        __int128 v34 = @"Last";
                      }
                      uint64_t v64 = v34;
                      if (!v8) {
                        uint64_t v8 = 5LL;
                      }
                      break;
                    default:
                      break;
                  }
                }
              }

              uint64_t v17 = (char *)v17 + 1;
            }

            while (v15 != v17);
            id v15 = [v12 countByEnumeratingWithState:&v65 objects:v79 count:16];
          }

          while (v15);
        }

        uint64_t v9 = v58 + 1;
      }

      while ((id)(v58 + 1) != v57);
      id v57 = [obj countByEnumeratingWithState:&v69 objects:v80 count:16];
    }

    while (v57);

    if (v8 && v64)
    {
      uint64_t v39 = NEPolicySetDropPriorityLevel(v64, a2);
      uint64_t v41 = ne_log_obj(v39, v40);
      uint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
      char v43 = v61;
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)unsigned int v74 = v64;
        unsigned int v44 = "applyIPDefaultDrop: IP Drop-All enabled <%@>";
        id v45 = v42;
        uint32_t v46 = 12;
LABEL_69:
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, v44, buf, v46);
        goto LABEL_70;
      }

      goto LABEL_70;
    }

    char v43 = v61;
    if (v63) {
      goto LABEL_71;
    }
LABEL_67:
    uint64_t v47 = NEPolicySetDropPriorityLevel(0LL, a2);
    uint64_t v49 = ne_log_obj(v47, v48);
    uint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      unsigned int v44 = "applyIPDefaultDrop: IP Drop-All disabled";
      id v45 = v42;
      uint32_t v46 = 2;
      goto LABEL_69;
    }

LABEL_70:
LABEL_71:
    if ((v43 & 1) == 0) {
      return v8;
    }
    goto LABEL_72;
  }

  uint64_t v8 = 0LL;
  if (!a3)
  {
    char v43 = 1;
    goto LABEL_67;
  }

void sub_10005241C(void *a1, const char *a2, char a3)
{
  if (a1)
  {
    id Property = (dispatch_queue_s *)objc_getProperty(a1, a2, 88LL, 1);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10005249C;
    block[3] = &unk_1000BE288;
    void block[4] = a1;
    void block[5] = a2;
    char v8 = a3;
    dispatch_async(Property, block);
  }

void sub_10005249C(uint64_t a1)
{
  uint64_t v3 = sub_100051EDC(*(void **)(a1 + 32), (const char *)1, 0LL);
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4) {
    uint64_t v4 = NEPolicyPersistDropAllFeature(v4, *(unsigned __int8 *)(a1 + 48));
  }
  uint64_t v5 = ne_log_obj(v4, v2);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 134217984;
    uint64_t v12 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "applyIPDefaultDrop: Persistent IP Drop-All level <%ld>",  (uint8_t *)&v11,  0xCu);
  }

  uint64_t v7 = sub_100051EDC(*(void **)(a1 + 32), 0LL, v3);
  uint64_t v9 = ne_log_obj(v7, v8);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 134217984;
    uint64_t v12 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "applyIPDefaultDrop: non-Persistent IP Drop-All level <%ld>",  (uint8_t *)&v11,  0xCu);
  }
}

void sub_1000525C8(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v5 = -[NSNumber initWithUnsignedLong:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithUnsignedLong:", a3);
      id v6 = -[NSNumber initWithUnsignedLong:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithUnsignedLong:", a2);
      id v7 = a1;
      objc_sync_enter(v7);
      self = v7;
      id v9 = objc_getProperty(v7, v8, 320LL, 1);
      [v9 setObject:v6 forKeyedSubscript:v5];
      __int128 v34 = v6;

      id v11 = objc_getProperty(self, v10, 320LL, 1);
      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithDictionary:",  v11));

      __int128 v48 = 0u;
      __int128 v49 = 0u;
      __int128 v46 = 0u;
      __int128 v47 = 0u;
      id obj = objc_getProperty(self, v12, 120LL, 1);
      id v37 = [obj countByEnumeratingWithState:&v46 objects:v51 count:16];
      if (v37)
      {
        uint64_t v36 = *(void *)v47;
        do
        {
          for (id i = 0LL; i != v37; id i = (char *)i + 1)
          {
            if (*(void *)v47 != v36) {
              objc_enumerationMutation(obj);
            }
            uint64_t v14 = *(void *)(*((void *)&v46 + 1) + 8LL * (void)i);
            __int128 v42 = 0u;
            __int128 v43 = 0u;
            __int128 v44 = 0u;
            __int128 v45 = 0u;
            id v15 = objc_getProperty(self, v13, 120LL, 1);
            id v39 = (id)objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:v14]);

            id v16 = [v39 countByEnumeratingWithState:&v42 objects:v50 count:16];
            id v18 = v16;
            if (v16)
            {
              uint64_t v19 = *(void *)v43;
              do
              {
                uint64_t v20 = 0LL;
                do
                {
                  if (*(void *)v43 != v19) {
                    objc_enumerationMutation(v39);
                  }
                  uint64_t v21 = *(void *)(*((void *)&v42 + 1) + 8LL * (void)v20);
                  uint64_t v22 = ne_log_obj(v16, v17);
                  uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
                  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
                  {
                    __int128 v25 = v5;
                    id v26 = objc_getProperty(self, v24, 120LL, 1);
                    int v27 = (void *)objc_claimAutoreleasedReturnValue([v26 objectForKeyedSubscript:v14]);
                    BOOL v28 = (char *)objc_claimAutoreleasedReturnValue([v27 objectForKeyedSubscript:v21]);
                    *(_DWORD *)__int128 buf = 138412290;
                    uint64_t v53 = v28;
                    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "Passing fallback interface change event to %@",  buf,  0xCu);

                    uint64_t v5 = v25;
                  }

                  id v30 = objc_getProperty(self, v29, 120LL, 1);
                  BOOL v31 = (void *)objc_claimAutoreleasedReturnValue([v30 objectForKeyedSubscript:v14]);
                  int v32 = (void *)objc_claimAutoreleasedReturnValue([v31 objectForKeyedSubscript:v21]);
                  [v32 handleChangeEventForFallbackInterfaces:v40];

                  uint64_t v20 = (char *)v20 + 1;
                }

                while (v18 != v20);
                id v16 = [v39 countByEnumeratingWithState:&v42 objects:v50 count:16];
                id v18 = v16;
              }

              while (v16);
            }
          }

          id v37 = [obj countByEnumeratingWithState:&v46 objects:v51 count:16];
        }

        while (v37);
      }

      objc_sync_exit(self);
    }

    else
    {
      uint64_t v33 = ne_log_obj(a1, 0LL);
      uint64_t v5 = (NSNumber *)objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)__int128 buf = 136315138;
        uint64_t v53 = "-[NESMServer addFallbackInterface:predictedInterfaceIndex:]";
        _os_log_fault_impl( (void *)&_mh_execute_header,  (os_log_t)v5,  OS_LOG_TYPE_FAULT,  "%s called with null fallbackInterfaceIndex",  buf,  0xCu);
      }
    }
  }

void sub_1000529B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id obj)
{
}

void sub_1000529F8(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        oslog = -[NSNumber initWithUnsignedLong:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithUnsignedLong:", a3);
        id v4 = a1;
        objc_sync_enter(v4);
        self = v4;
        id v6 = objc_getProperty(v4, v5, 320LL, 1);
        id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:oslog]);

        if (v7)
        {
          id v9 = objc_getProperty(self, v8, 320LL, 1);
          [v9 removeObjectForKey:oslog];

          id v11 = objc_getProperty(self, v10, 320LL, 1);
          id v12 = [v11 count];

          if (v12)
          {
            id v14 = objc_getProperty(self, v13, 320LL, 1);
            id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithDictionary:",  v14));
          }

          else
          {
            id v15 = 0LL;
          }

          __int128 v51 = 0u;
          __int128 v52 = 0u;
          __int128 v49 = 0u;
          __int128 v50 = 0u;
          id obj = objc_getProperty(self, v13, 120LL, 1);
          id v41 = [obj countByEnumeratingWithState:&v49 objects:v54 count:16];
          if (v41)
          {
            uint64_t v40 = *(void *)v50;
            do
            {
              for (id i = 0LL; i != v41; id i = (char *)i + 1)
              {
                if (*(void *)v50 != v40) {
                  objc_enumerationMutation(obj);
                }
                uint64_t v17 = *(void *)(*((void *)&v49 + 1) + 8LL * (void)i);
                __int128 v45 = 0u;
                __int128 v46 = 0u;
                __int128 v47 = 0u;
                __int128 v48 = 0u;
                id v18 = objc_getProperty(self, v16, 120LL, 1);
                id v43 = (id)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:v17]);

                id v19 = [v43 countByEnumeratingWithState:&v45 objects:v53 count:16];
                id v21 = v19;
                if (v19)
                {
                  uint64_t v22 = *(void *)v46;
                  do
                  {
                    uint64_t v23 = 0LL;
                    do
                    {
                      if (*(void *)v46 != v22) {
                        objc_enumerationMutation(v43);
                      }
                      uint64_t v24 = *(void *)(*((void *)&v45 + 1) + 8LL * (void)v23);
                      uint64_t v25 = ne_log_obj(v19, v20);
                      id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
                      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
                      {
                        id v28 = objc_getProperty(self, v27, 120LL, 1);
                        SEL v29 = (void *)objc_claimAutoreleasedReturnValue([v28 objectForKeyedSubscript:v17]);
                        id v30 = (char *)objc_claimAutoreleasedReturnValue([v29 objectForKeyedSubscript:v24]);
                        *(_DWORD *)__int128 buf = 138412290;
                        uint64_t v56 = v30;
                        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_INFO,  "Passing fallback interface change event to %@",  buf,  0xCu);
                      }

                      id v32 = objc_getProperty(self, v31, 120LL, 1);
                      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v32 objectForKeyedSubscript:v17]);
                      __int128 v34 = (void *)objc_claimAutoreleasedReturnValue([v33 objectForKeyedSubscript:v24]);
                      [v34 handleChangeEventForFallbackInterfaces:v15];

                      uint64_t v23 = (char *)v23 + 1;
                    }

                    while (v21 != v23);
                    id v19 = [v43 countByEnumeratingWithState:&v45 objects:v53 count:16];
                    id v21 = v19;
                  }

                  while (v19);
                }
              }

              id v41 = [obj countByEnumeratingWithState:&v49 objects:v54 count:16];
            }

            while (v41);
          }
        }

        objc_sync_exit(self);

        goto LABEL_26;
      }

      uint64_t v37 = ne_log_obj(a1, a2);
      oslog = (NSNumber *)objc_claimAutoreleasedReturnValue(v37);
      if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)__int128 buf = 136315138;
        uint64_t v56 = "-[NESMServer removeFallbackInterface:predictedInterfaceIndex:]";
        uint64_t v36 = "%s called with null predictedInterfaceIndex";
        goto LABEL_32;
      }
    }

    else
    {
      uint64_t v35 = ne_log_obj(a1, 0LL);
      oslog = (NSNumber *)objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled((os_log_t)oslog, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)__int128 buf = 136315138;
        uint64_t v56 = "-[NESMServer removeFallbackInterface:predictedInterfaceIndex:]";
        uint64_t v36 = "%s called with null fallbackInterfaceIndex";
LABEL_32:
        _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)oslog, OS_LOG_TYPE_FAULT, v36, buf, 0xCu);
      }
    }

void sub_100052E70( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id obj)
{
}

void sub_100052EB0(void *a1, const char *a2)
{
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  id Property = (id)a1[4];
  if (Property) {
    id Property = objc_getProperty(Property, a2, 120LL, 1);
  }
  id obj = Property;
  id v21 = [obj countByEnumeratingWithState:&v27 objects:v32 count:16];
  SEL v5 = 0LL;
  if (v21)
  {
    uint64_t v20 = *(void *)v28;
    do
    {
      uint64_t v6 = 0LL;
      do
      {
        if (*(void *)v28 != v20) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void *)(*((void *)&v27 + 1) + 8 * v6);
        __int128 v23 = 0u;
        __int128 v24 = 0u;
        __int128 v25 = 0u;
        __int128 v26 = 0u;
        id v8 = (id)a1[4];
        if (v8) {
          id v8 = objc_getProperty(v8, v4, 120LL, 1);
        }
        uint64_t v22 = v6;
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:v7]);
        id v10 = [v9 countByEnumeratingWithState:&v23 objects:v31 count:16];
        if (v10)
        {
          id v12 = v10;
          uint64_t v13 = *(void *)v24;
          do
          {
            for (id i = 0LL; i != v12; id i = (char *)i + 1)
            {
              if (*(void *)v24 != v13) {
                objc_enumerationMutation(v9);
              }
              uint64_t v15 = *(void *)(*((void *)&v23 + 1) + 8LL * (void)i);
              id v16 = (id)a1[4];
              if (v16) {
                id v16 = objc_getProperty(v16, v11, 120LL, 1);
              }
              uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:v7]);
              id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:v15]);

              if ([v18 hasProviderWithBundleIdentifier:a1[5]])
              {
                if (!v5) {
                  SEL v5 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
                }
                -[NSMutableArray addObject:](v5, "addObject:", v18);
              }
            }

            id v12 = [v9 countByEnumeratingWithState:&v23 objects:v31 count:16];
          }

          while (v12);
        }

        uint64_t v6 = v22 + 1;
      }

      while ((id)(v22 + 1) != v21);
      id v21 = [obj countByEnumeratingWithState:&v27 objects:v32 count:16];
    }

    while (v21);
  }

  (*(void (**)(void))(a1[6] + 16LL))();
}

void sub_1000530F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = sub_10000B4B4();
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    _DWORD v12[2] = sub_100053228;
    v12[3] = &unk_1000BED30;
    v12[4] = a1;
    id v13 = v5;
    id v14 = v6;
    id v9 = v13;
    id v10 = v12;
    if (v8)
    {
      id v11 = (dispatch_queue_s *)v8[1];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10000CE04;
      block[3] = &unk_1000BED30;
      void block[4] = v8;
      id v16 = v9;
      uint64_t v17 = v10;
      dispatch_async(v11, block);
    }
  }
}

void sub_100053228(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3) {
    id Property = (dispatch_queue_s *)objc_getProperty(v3, a2, 88LL, 1);
  }
  else {
    id Property = 0LL;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000532D0;
  block[3] = &unk_1000BED30;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32);
  id v8 = v5;
  uint64_t v9 = v6;
  id v10 = *(id *)(a1 + 48);
  dispatch_async(Property, block);
}

uint64_t sub_1000532D0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
  id v3 = [v2 grade];

  if (v3 == (id)1)
  {
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    id Property = *(id *)(a1 + 40);
    if (Property) {
      id Property = objc_getProperty(Property, v4, 120LL, 1);
    }
    id obj = Property;
    id v6 = [obj countByEnumeratingWithState:&v21 objects:v25 count:16];
    if (v6)
    {
      id v8 = v6;
      uint64_t v9 = *(void *)v22;
      do
      {
        id v10 = 0LL;
        do
        {
          if (*(void *)v22 != v9) {
            objc_enumerationMutation(obj);
          }
          uint64_t v11 = *(void *)(*((void *)&v21 + 1) + 8LL * (void)v10);
          id v12 = *(id *)(a1 + 40);
          if (v12) {
            id v12 = objc_getProperty(v12, v7, 120LL, 1);
          }
          id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:v11]);
          id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:&off_1000C17E8]);

          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 configuration]);
          if ([v15 grade] == (id)2)
          {
            id v16 = (void *)objc_claimAutoreleasedReturnValue([v14 configuration]);
            uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 VPN]);
            unsigned int v18 = [v17 isOnDemandEnabled];

            if (v18) {
              [v14 unpauseOnDemand];
            }
          }

          else
          {
          }

          id v10 = (char *)v10 + 1;
        }

        while (v8 != v10);
        id v8 = [obj countByEnumeratingWithState:&v21 objects:v25 count:16];
      }

      while (v8);
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000534B0(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    id v5 = (unsigned __int8 *)(a1 + 40);
    int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 == (*(_BYTE *)(v3 + 14) & 1)) {
      return;
    }
    *(_BYTE *)(v3 + 14) = v4;
    id Property = *(id *)(a1 + 32);
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    if (Property) {
      id Property = objc_getProperty(Property, a2, 120LL, 1);
    }
  }

  else
  {
    id v5 = (unsigned __int8 *)(a1 + 40);
    if (!*(_BYTE *)(a1 + 40)) {
      return;
    }
    id Property = 0LL;
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    __int128 v39 = 0u;
    __int128 v40 = 0u;
  }

  id obj = Property;
  id v31 = [obj countByEnumeratingWithState:&v39 objects:v48 count:16];
  if (v31)
  {
    uint64_t v30 = *(void *)v40;
    do
    {
      uint64_t v8 = 0LL;
      do
      {
        if (*(void *)v40 != v30) {
          objc_enumerationMutation(obj);
        }
        uint64_t v34 = *(void *)(*((void *)&v39 + 1) + 8 * v8);
        __int128 v35 = 0u;
        __int128 v36 = 0u;
        __int128 v37 = 0u;
        __int128 v38 = 0u;
        id v9 = *(id *)(a1 + 32);
        uint64_t v32 = v8;
        if (v9) {
          id v9 = objc_getProperty(v9, v7, 120LL, 1);
        }
        id v33 = (id)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v34]);
        id v10 = [v33 countByEnumeratingWithState:&v35 objects:v47 count:16];
        if (v10)
        {
          id v12 = v10;
          uint64_t v13 = *(void *)v36;
          do
          {
            id v14 = 0LL;
            do
            {
              if (*(void *)v36 != v13) {
                objc_enumerationMutation(v33);
              }
              uint64_t v15 = *(void *)(*((void *)&v35 + 1) + 8LL * (void)v14);
              uint64_t v16 = ne_log_obj(v10, v11);
              uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
              if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
              {
                uint64_t v19 = v13;
                uint64_t v20 = v5;
                if (*(_BYTE *)(a1 + 40)) {
                  __int128 v21 = "enabled";
                }
                else {
                  __int128 v21 = "disabled";
                }
                id v22 = *(id *)(a1 + 32);
                if (v22) {
                  id v22 = objc_getProperty(v22, v18, 120LL, 1);
                }
                __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v22 objectForKeyedSubscript:v34]);
                __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:v15]);
                *(_DWORD *)__int128 buf = 136315394;
                __int128 v44 = v21;
                __int16 v45 = 2112;
                __int128 v46 = v24;
                _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "Passing fallback %s event to %@",  buf,  0x16u);

                id v5 = v20;
                uint64_t v13 = v19;
              }

              id v26 = *(id *)(a1 + 32);
              if (v26) {
                id v26 = objc_getProperty(v26, v25, 120LL, 1);
              }
              __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([v26 objectForKeyedSubscript:v34]);
              __int128 v28 = (void *)objc_claimAutoreleasedReturnValue([v27 objectForKeyedSubscript:v15]);
              [v28 handleChangeEventForFallback:*v5];

              id v14 = (char *)v14 + 1;
            }

            while (v12 != v14);
            id v10 = [v33 countByEnumeratingWithState:&v35 objects:v47 count:16];
            id v12 = v10;
          }

          while (v10);
        }

        uint64_t v8 = v32 + 1;
      }

      while ((id)(v32 + 1) != v31);
      id v31 = [obj countByEnumeratingWithState:&v39 objects:v48 count:16];
    }

    while (v31);
  }
}

uint64_t sub_1000537D0( void *a1, unsigned int *a2, void *a3, void *a4, int a5, void *a6, int a7, void *a8, void *a9, void *a10, unsigned __int16 a11, char a12, void *a13, void *a14, void *a15, char a16, void *a17, char a18)
{
  id v21 = a3;
  id v22 = a4;
  id v97 = a6;
  id v96 = a8;
  id v102 = a9;
  __int128 v23 = v22;
  __int128 v24 = v21;
  id v106 = a10;
  id v95 = a13;
  id v105 = a14;
  id v109 = a15;
  id v108 = a17;
  __int128 v25 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  if (v21) {
    id v26 = v21;
  }
  else {
    id v26 = v23;
  }
  id v104 = v26;
  __int128 v27 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectiveApplication:](&OBJC_CLASS___NEPolicyCondition, "effectiveApplication:"));
  -[NSMutableArray addObject:](v25, "addObject:", v27);

  if (v23)
  {
    __int128 v28 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition realApplication:](&OBJC_CLASS___NEPolicyCondition, "realApplication:", v23));
    -[NSMutableArray addObject:](v25, "addObject:", v28);
  }

  __int128 v29 = v102;
  if (!v102 || (a16 & 1) != 0) {
    uint64_t v30 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
  }
  else {
    uint64_t v30 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](&OBJC_CLASS___NEPolicyCondition, "scopedInterface:", v102));
  }
  id v31 = (void *)v30;
  uint64_t v32 = v95;
  -[NSMutableArray addObject:](v25, "addObject:", v30);

  if (a7)
  {
    id v33 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition uid:](&OBJC_CLASS___NEPolicyCondition, "uid:", 0LL));
    -[NSMutableArray addObject:](v25, "addObject:", v33);
  }

  if (a5)
  {
    uint64_t v34 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](&OBJC_CLASS___NEPolicyCondition, "entitlement"));
  }

  else
  {
    if (![v97 length]) {
      goto LABEL_17;
    }
    uint64_t v34 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition customEntitlement:](&OBJC_CLASS___NEPolicyCondition, "customEntitlement:", v97));
  }

  __int128 v35 = (void *)v34;
  -[NSMutableArray addObject:](v25, "addObject:", v34);

LABEL_17:
  if (v106)
  {
    __int128 v36 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition signingIdentifier:](&OBJC_CLASS___NEPolicyCondition, "signingIdentifier:"));
    -[NSMutableArray addObject:](v25, "addObject:", v36);
  }

  id v98 = v25;
  if (a11)
  {
    __int128 v37 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition ipProtocol:](&OBJC_CLASS___NEPolicyCondition, "ipProtocol:", a11));
    -[NSMutableArray addObject:](v25, "addObject:", v37);
  }

  if (a12)
  {
    __int128 v38 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition platformBinary](&OBJC_CLASS___NEPolicyCondition, "platformBinary"));
    -[NSMutableArray addObject:](v25, "addObject:", v38);

    __int128 v39 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition delegateIsPlatformBinary]( &OBJC_CLASS___NEPolicyCondition,  "delegateIsPlatformBinary"));
    -[NSMutableArray addObject:](v25, "addObject:", v39);
  }

  if (v95)
  {
    __int128 v40 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition accountIdentifier:](&OBJC_CLASS___NEPolicyCondition, "accountIdentifier:", v95));
    -[NSMutableArray addObject:](v25, "addObject:", v40);
  }

  if (v109)
  {
    id obja = [[NEPolicy alloc] initWithOrder:*a2 result:v109 conditions:v25];
    id v41 = objc_msgSend(a1, "addPolicy:");
    uint64_t is_debug_logging_enabled = nelog_is_debug_logging_enabled();
    int v43 = is_debug_logging_enabled;
    uint64_t v45 = ne_log_obj(is_debug_logging_enabled, v44);
    __int128 v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
    __int128 v47 = v46;
    if (!v41)
    {
      BOOL v48 = os_log_type_enabled(v46, OS_LOG_TYPE_ERROR);
      if (v43)
      {
        if (v48)
        {
          *(_DWORD *)__int128 buf = 138412290;
          id v117 = obja;
LABEL_46:
          _os_log_error_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);
        }

LABEL_107:
        uint64_t v88 = 0LL;
        goto LABEL_108;
      }

      if (!v48) {
        goto LABEL_107;
      }
      __int128 v90 = (void *)objc_claimAutoreleasedReturnValue([obja descriptionWithIndent:0 options:2]);
      *(_DWORD *)__int128 buf = 138412290;
      id v117 = v90;
LABEL_98:
      _os_log_error_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);

      __int128 v25 = v98;
      goto LABEL_107;
    }

    if (v43)
    {
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v117 = obja;
        _os_log_debug_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "Added policy: %@", buf, 0xCu);
      }
    }

    else if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
    {
      __int128 v49 = (void *)objc_claimAutoreleasedReturnValue([obja descriptionWithIndent:0 options:2]);
      *(_DWORD *)__int128 buf = 138412290;
      id v117 = v49;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);
    }

    if (v108)
    {
      __int128 v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v41));
      [v108 addObject:v50];
    }

    if (a18) {
      ++*a2;
    }
  }

  id obja = [[NEPolicy alloc] initWithOrder:*a2 result:v105 conditions:v25];
  id v51 = objc_msgSend(a1, "addPolicy:");
  uint64_t v52 = nelog_is_debug_logging_enabled();
  int v53 = v52;
  uint64_t v55 = ne_log_obj(v52, v54);
  uint64_t v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
  __int128 v47 = v56;
  if (!v51)
  {
    BOOL v57 = os_log_type_enabled(v56, OS_LOG_TYPE_ERROR);
    if (v53)
    {
      if (v57)
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v117 = obja;
        goto LABEL_46;
      }

      goto LABEL_107;
    }

    if (!v57) {
      goto LABEL_107;
    }
    __int128 v90 = (void *)objc_claimAutoreleasedReturnValue([obja descriptionWithIndent:0 options:2]);
    *(_DWORD *)__int128 buf = 138412290;
    id v117 = v90;
    goto LABEL_98;
  }

  if (v53)
  {
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v117 = obja;
      _os_log_debug_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "Added policy: %@", buf, 0xCu);
    }
  }

  else if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
  {
    uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue([obja descriptionWithIndent:0 options:2]);
    *(_DWORD *)__int128 buf = 138412290;
    id v117 = v58;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);
  }

  if (v108)
  {
    unsigned int v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v51));
    [v108 addObject:v59];
  }

  if (a18) {
    ++*a2;
  }
  __int128 v113 = 0u;
  __int128 v114 = 0u;
  __int128 v111 = 0u;
  __int128 v112 = 0u;
  id obja = v96;
  id v60 = [obja countByEnumeratingWithState:&v111 objects:v115 count:16];
  if (!v60)
  {
    uint64_t v88 = 1LL;
    goto LABEL_90;
  }

  id v61 = v60;
  __int128 v94 = v23;
  uint64_t v99 = *(void *)v112;
  while (2)
  {
    for (id i = 0LL; i != v61; id i = (char *)i + 1)
    {
      if (*(void *)v112 != v99) {
        objc_enumerationMutation(obja);
      }
      uint64_t v63 = *(void *)(*((void *)&v111 + 1) + 8LL * (void)i);
      __int128 v47 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  v104));
      -[os_log_s addObject:](v47, "addObject:", v64);

      __int128 v65 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition realApplication:](&OBJC_CLASS___NEPolicyCondition, "realApplication:", v63));
      -[os_log_s addObject:](v47, "addObject:", v65);

      if (v29) {
        uint64_t v66 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition scopedInterface:](&OBJC_CLASS___NEPolicyCondition, "scopedInterface:", v29));
      }
      else {
        uint64_t v66 = objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
      }
      __int128 v67 = (void *)v66;
      -[os_log_s addObject:](v47, "addObject:", v66);

      if (a5)
      {
        __int128 v68 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](&OBJC_CLASS___NEPolicyCondition, "entitlement"));
        -[os_log_s addObject:](v47, "addObject:", v68);
      }

      if (v106)
      {
        __int128 v69 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition signingIdentifier:]( &OBJC_CLASS___NEPolicyCondition,  "signingIdentifier:",  v106));
        -[os_log_s addObject:](v47, "addObject:", v69);
      }

      if (v109)
      {
        id v70 = [[NEPolicy alloc] initWithOrder:*a2 result:v109 conditions:v47];
        id v71 = [a1 addPolicy:v70];
        uint64_t v72 = nelog_is_debug_logging_enabled();
        int v73 = v72;
        uint64_t v75 = ne_log_obj(v72, v74);
        unsigned int v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
        __int16 v77 = v76;
        if (!v71)
        {
          BOOL v91 = os_log_type_enabled(v76, OS_LOG_TYPE_ERROR);
          if (v73)
          {
            __int128 v24 = v21;
            __int128 v23 = v94;
            uint64_t v32 = v95;
            if (v91)
            {
              *(_DWORD *)__int128 buf = 138412290;
              id v117 = v70;
              goto LABEL_102;
            }

LABEL_106:
            __int128 v29 = v102;
            goto LABEL_107;
          }

          __int128 v24 = v21;
          __int128 v23 = v94;
          uint64_t v32 = v95;
          if (!v91) {
            goto LABEL_106;
          }
LABEL_109:
          __int128 v93 = (void *)objc_claimAutoreleasedReturnValue([v70 descriptionWithIndent:0 options:2]);
          *(_DWORD *)__int128 buf = 138412290;
          id v117 = v93;
          _os_log_error_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);

          __int128 v25 = v98;
          goto LABEL_106;
        }

        if (v73)
        {
          if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 138412290;
            id v117 = v70;
            _os_log_debug_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "Added policy: %@", buf, 0xCu);
          }
        }

        else if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
        {
          unsigned int v78 = (void *)objc_claimAutoreleasedReturnValue([v70 descriptionWithIndent:0 options:2]);
          *(_DWORD *)__int128 buf = 138412290;
          id v117 = v78;
          _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);
        }

        if (v108)
        {
          SEL v79 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v71));
          [v108 addObject:v79];
        }

        if (a18) {
          ++*a2;
        }
      }

      id v70 = [[NEPolicy alloc] initWithOrder:*a2 result:v105 conditions:v47];
      id v80 = [a1 addPolicy:v70];
      uint64_t v81 = nelog_is_debug_logging_enabled();
      int v82 = v81;
      uint64_t v84 = ne_log_obj(v81, v83);
      id v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
      __int16 v77 = v85;
      if (!v80)
      {
        BOOL v89 = os_log_type_enabled(v85, OS_LOG_TYPE_ERROR);
        if (v82)
        {
          __int128 v24 = v21;
          __int128 v23 = v94;
          uint64_t v32 = v95;
          if (v89)
          {
            *(_DWORD *)__int128 buf = 138412290;
            id v117 = v70;
LABEL_102:
            _os_log_error_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_ERROR,  "Failed to add policy: %@",  buf,  0xCu);
            goto LABEL_106;
          }

          goto LABEL_106;
        }

        __int128 v24 = v21;
        __int128 v23 = v94;
        uint64_t v32 = v95;
        if (!v89) {
          goto LABEL_106;
        }
        goto LABEL_109;
      }

      if (v82)
      {
        if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = 138412290;
          id v117 = v70;
          _os_log_debug_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "Added policy: %@", buf, 0xCu);
        }
      }

      else if (os_log_type_enabled(v85, OS_LOG_TYPE_INFO))
      {
        uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue([v70 descriptionWithIndent:0 options:2]);
        *(_DWORD *)__int128 buf = 138412290;
        id v117 = v86;
        _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);
      }

      if (v108)
      {
        __int128 v87 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v80));
        [v108 addObject:v87];
      }

      __int128 v29 = v102;
      if (a18) {
        ++*a2;
      }
    }

    id v61 = [obja countByEnumeratingWithState:&v111 objects:v115 count:16];
    uint64_t v88 = 1LL;
    if (v61) {
      continue;
    }
    break;
  }

  __int128 v24 = v21;
  __int128 v23 = v94;
LABEL_90:
  uint64_t v32 = v95;
LABEL_108:

  return v88;
}

uint64_t sub_100054464( void *a1, unsigned int *a2, int a3, void *a4, void *a5, int a6, void *a7, int a8, void *a9, char a10, void *a11, void *a12, void *a13, char a14, void *a15)
{
  id v19 = a4;
  id v20 = a5;
  id v48 = a7;
  id v47 = a9;
  id v21 = a11;
  id v46 = a12;
  id v45 = a13;
  id v22 = a15;
  if (a1
    && (unsigned int v57 = *a2, v20)
    && (id v23 = +[NEProcessInfo copyDNSUUIDs](&OBJC_CLASS___NEProcessInfo, "copyDNSUUIDs")) != 0LL)
  {
    __int128 v24 = v23;
    __int128 v55 = 0u;
    __int128 v56 = 0u;
    __int128 v53 = 0u;
    __int128 v54 = 0u;
    id v25 = v20;
    id v39 = [v25 countByEnumeratingWithState:&v53 objects:v59 count:16];
    if (v39)
    {
      uint64_t v40 = *(void *)v54;
      id v37 = v20;
      id v38 = v19;
      id v35 = v25;
      id v36 = v21;
      while (2)
      {
        uint64_t v26 = 0LL;
        do
        {
          if (*(void *)v54 != v40) {
            objc_enumerationMutation(v25);
          }
          uint64_t v41 = v26;
          __int128 v27 = *(void **)(*((void *)&v53 + 1) + 8 * v26);
          unsigned int v57 = *a2;
          if (!sub_1000537D0( a1,  &v57,  0LL,  v27,  a6,  v48,  a8,  v24,  v47,  0LL,  0,  a10,  v21,  v46,  v45,  a14,  v22,  a3))
          {
LABEL_29:

            uint64_t v33 = 0LL;
            goto LABEL_30;
          }

          if (v19)
          {
            __int128 v51 = 0u;
            __int128 v52 = 0u;
            __int128 v49 = 0u;
            __int128 v50 = 0u;
            id v28 = v19;
            id v29 = [v28 countByEnumeratingWithState:&v49 objects:v58 count:16];
            if (v29)
            {
              id v30 = v29;
              uint64_t v31 = *(void *)v50;
              while (2)
              {
                for (id i = 0LL; i != v30; id i = (char *)i + 1)
                {
                  if (*(void *)v50 != v31) {
                    objc_enumerationMutation(v28);
                  }
                  if ((sub_1000537D0( a1,  &v57,  *(void **)(*((void *)&v49 + 1) + 8LL * (void)i),  v27,  a6,  v48,  a8,  v24,  v47,  0LL,  0,  a10,  0LL,  v46,  v45,  a14,  v22,  a3) & 1) == 0)
                  {

                    id v20 = v37;
                    id v19 = v38;
                    id v25 = v35;
                    id v21 = v36;
                    goto LABEL_29;
                  }
                }

                id v30 = [v28 countByEnumeratingWithState:&v49 objects:v58 count:16];
                if (v30) {
                  continue;
                }
                break;
              }
            }

            id v20 = v37;
            id v19 = v38;
            id v25 = v35;
            id v21 = v36;
          }

          if (a3) {
            *a2 = v57;
          }
          uint64_t v26 = v41 + 1;
        }

        while ((id)(v41 + 1) != v39);
        id v39 = [v25 countByEnumeratingWithState:&v53 objects:v59 count:16];
        if (v39) {
          continue;
        }
        break;
      }
    }

    if ((a3 & 1) == 0) {
      *a2 = v57;
    }
    uint64_t v33 = 1LL;
LABEL_30:
  }

  else
  {
    uint64_t v33 = 0LL;
  }

  return v33;
}

uint64_t sub_1000547C4( void *a1, unsigned int *a2, int a3, void *a4, int a5, void *a6, void *a7, unsigned __int16 a8, char a9, void *a10, void *a11, void *a12)
{
  id v17 = a4;
  id v34 = a6;
  id v33 = a7;
  id v18 = a10;
  id v19 = a11;
  id v20 = a12;
  unsigned int v39 = *a2;
  if (!v17) {
    goto LABEL_4;
  }
  if (a9)
  {
    id v21 = +[NEProcessInfo copyDNSUUIDs](&OBJC_CLASS___NEProcessInfo, "copyDNSUUIDs");
    if (!v21)
    {
LABEL_4:
      uint64_t v22 = 0LL;
      goto LABEL_21;
    }
  }

  else
  {
    id v21 = 0LL;
  }

  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  id v29 = v17;
  id obj = v17;
  id v23 = [obj countByEnumeratingWithState:&v35 objects:v40 count:16];
  if (v23)
  {
    id v24 = v23;
    uint64_t v25 = *(void *)v36;
    while (2)
    {
      for (id i = 0LL; i != v24; id i = (char *)i + 1)
      {
        if (*(void *)v36 != v25) {
          objc_enumerationMutation(obj);
        }
        __int128 v27 = *(void **)(*((void *)&v35 + 1) + 8LL * (void)i);
        unsigned int v39 = *a2;
        if ((sub_1000537D0(a1, &v39, v27, 0LL, a5, 0LL, 0, v21, v34, v33, a8, 0, 0LL, v18, v19, 0, v20, a3) & 1) == 0)
        {

          uint64_t v22 = 0LL;
          goto LABEL_20;
        }

        if (a3) {
          *a2 = v39;
        }
      }

      id v24 = [obj countByEnumeratingWithState:&v35 objects:v40 count:16];
      if (v24) {
        continue;
      }
      break;
    }
  }

  if ((a3 & 1) == 0) {
    *a2 = v39;
  }
  uint64_t v22 = 1LL;
LABEL_20:
  id v17 = v29;

LABEL_21:
  return v22;
}

BOOL sub_1000549EC(BOOL a1, unsigned int *a2, void *a3, void *a4)
{
  id v45 = a4;
  if (!a1)
  {
    uint64_t v26 = v45;
    goto LABEL_33;
  }

  id v7 = a3;
  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition ipProtocol:](&OBJC_CLASS___NEPolicyCondition, "ipProtocol:", 58LL));
  -[NSMutableArray addObject:](v8, "addObject:", v9);

  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
  -[NSMutableArray addObject:](v8, "addObject:", v10);

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition effectivePID:](&OBJC_CLASS___NEPolicyCondition, "effectivePID:", 0LL));
  [v11 setNegative:1];
  -[NSMutableArray addObject:](v8, "addObject:", v11);
  id v12 = objc_alloc(&OBJC_CLASS___NEPolicy);
  uint64_t v13 = *a2;
  id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult skipWithOrder:]( &OBJC_CLASS___NEPolicyResult,  "skipWithOrder:",  (v13 + 2)));
  id v15 = [v12 initWithOrder:v13 result:v14 conditions:v8];

  id v16 = [(id)a1 addPolicy:v15];
  uint64_t is_debug_logging_enabled = nelog_is_debug_logging_enabled();
  int v18 = is_debug_logging_enabled;
  uint64_t v20 = ne_log_obj(is_debug_logging_enabled, v19);
  id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
  uint64_t v22 = v21;
  if (v16)
  {
    BOOL v23 = os_log_type_enabled(v21, OS_LOG_TYPE_INFO);
    if (v18)
    {
      if (v23)
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v47 = v15;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);
      }
    }

    else if (v23)
    {
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v15 descriptionWithIndent:0 options:2]);
      *(_DWORD *)__int128 buf = 138412290;
      id v47 = v25;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);
    }

    uint64_t v26 = v45;
    if (!v45) {
      goto LABEL_17;
    }
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v16));
    [v45 addObject:v22];
  }

  else
  {
    BOOL v24 = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
    if (v18)
    {
      if (v24)
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v47 = v15;
        _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);
      }
    }

    else if (v24)
    {
      int v43 = (void *)objc_claimAutoreleasedReturnValue([v15 descriptionWithIndent:0 options:2]);
      *(_DWORD *)__int128 buf = 138412290;
      id v47 = v43;
      _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);
    }

    uint64_t v26 = v45;
  }

LABEL_17:
  ++*a2;
  __int128 v27 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);

  id v28 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition ipProtocol:](&OBJC_CLASS___NEPolicyCondition, "ipProtocol:", 58LL));
  -[NSMutableArray addObject:](v27, "addObject:", v28);

  id v29 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
  -[NSMutableArray addObject:](v27, "addObject:", v29);

  id v30 = [[NEPolicy alloc] initWithOrder:*a2 result:v7 conditions:v27];
  id v31 = [(id)a1 addPolicy:v30];
  a1 = v31 != 0LL;
  uint64_t v32 = nelog_is_debug_logging_enabled();
  int v33 = v32;
  uint64_t v35 = ne_log_obj(v32, v34);
  __int128 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
  __int128 v37 = v36;
  if (v31)
  {
    BOOL v38 = os_log_type_enabled(v36, OS_LOG_TYPE_INFO);
    if (v33)
    {
      if (v38)
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v47 = v30;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);
      }
    }

    else if (v38)
    {
      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v30 descriptionWithIndent:0 options:2]);
      *(_DWORD *)__int128 buf = 138412290;
      id v47 = v40;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);
    }

    if (v26)
    {
      uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v31));
      [v26 addObject:v41];
    }

    ++*a2;
  }

  else
  {
    BOOL v39 = os_log_type_enabled(v36, OS_LOG_TYPE_ERROR);
    if (v33)
    {
      if (v39)
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v47 = v30;
        _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);
      }
    }

    else if (v39)
    {
      uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v30 descriptionWithIndent:0 options:2]);
      *(_DWORD *)__int128 buf = 138412290;
      id v47 = v44;
      _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);
    }
  }

LABEL_33:
  return a1;
}

uint64_t sub_100054F3C(void *a1, unsigned int *a2, int a3, void *a4, void *a5)
{
  id v7 = @"53";
  id v40 = a4;
  id v8 = a5;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  id v9 = [&off_1000C16C8 countByEnumeratingWithState:&v41 objects:v48 count:16];
  if (v9)
  {
    id v11 = v9;
    id v12 = 0LL;
    uint64_t v13 = *(void *)v42;
    *(void *)&__int128 v10 = 138412290LL;
    __int128 v36 = v10;
    while (2)
    {
      id v14 = 0LL;
      id v15 = v12;
      do
      {
        if (*(void *)v42 != v13) {
          objc_enumerationMutation(&off_1000C16C8);
        }
        uint64_t v16 = *(void *)(*((void *)&v41 + 1) + 8LL * (void)v14);
        id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array", v36));

        id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
        [v12 addObject:v17];

        int v18 = (void *)objc_claimAutoreleasedReturnValue( +[NWAddressEndpoint endpointWithHostname:port:]( &OBJC_CLASS___NWAddressEndpoint,  "endpointWithHostname:port:",  v16,  @"53"));
        if (a3) {
          uint64_t v19 = objc_claimAutoreleasedReturnValue( +[NEPolicyCondition localAddress:prefix:]( &OBJC_CLASS___NEPolicyCondition,  "localAddress:prefix:",  v18,  0LL));
        }
        else {
          uint64_t v19 = objc_claimAutoreleasedReturnValue( +[NEPolicyCondition remoteAddress:prefix:]( &OBJC_CLASS___NEPolicyCondition,  "remoteAddress:prefix:",  v18,  0LL));
        }
        uint64_t v20 = (void *)v19;
        [v12 addObject:v19];

        id v21 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition ipProtocol:](&OBJC_CLASS___NEPolicyCondition, "ipProtocol:", 17LL));
        [v12 addObject:v21];

        id v22 = [[NEPolicy alloc] initWithOrder:*a2 result:v40 conditions:v12];
        id v23 = [a1 addPolicy:v22];
        uint64_t is_debug_logging_enabled = nelog_is_debug_logging_enabled();
        int v25 = is_debug_logging_enabled;
        uint64_t v27 = ne_log_obj(is_debug_logging_enabled, v26);
        id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
        id v29 = v28;
        if (!v23)
        {
          BOOL v32 = os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);
          if (v25)
          {
            if (v32)
            {
              *(_DWORD *)__int128 buf = v36;
              id v47 = v22;
              _os_log_error_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_ERROR,  "Failed to add policy: %@",  buf,  0xCu);
            }
          }

          else if (v32)
          {
            uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v22 descriptionWithIndent:0 options:2]);
            *(_DWORD *)__int128 buf = v36;
            id v47 = v35;
            _os_log_error_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_ERROR,  "Failed to add policy: %@",  buf,  0xCu);
          }

          unsigned __int8 v45 = 0;
          goto LABEL_28;
        }

        if (v25)
        {
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = v36;
            id v47 = v22;
            _os_log_debug_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "Added policy: %@", buf, 0xCu);
          }
        }

        else if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          id v30 = (void *)objc_claimAutoreleasedReturnValue([v22 descriptionWithIndent:0 options:2]);
          *(_DWORD *)__int128 buf = v36;
          id v47 = v30;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);
        }

        if (v8)
        {
          id v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v23));
          [v8 addObject:v31];
        }

        id v14 = (char *)v14 + 1;
        id v15 = v12;
      }

      while (v11 != v14);
      id v11 = [&off_1000C16C8 countByEnumeratingWithState:&v41 objects:v48 count:16];
      if (v11) {
        continue;
      }
      break;
    }
  }

  else
  {
    id v12 = 0LL;
  }

  unsigned __int8 v45 = 1;
LABEL_28:

  uint64_t v33 = v45;
  return v33;
}

uint64_t sub_10005533C(void *a1, unsigned int *a2, void *a3, void *a4, void *a5, int a6)
{
  id v10 = a3;
  id v11 = a4;
  id v39 = a5;
  BOOL v38 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](&OBJC_CLASS___NEPolicyResult, "pass"));
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  id v12 = [&off_1000C16E0 countByEnumeratingWithState:&v40 objects:v48 count:16];
  if (v12)
  {
    id v13 = v12;
    id v14 = 0LL;
    uint64_t v15 = *(void *)v41;
    if (v10) {
      id v16 = v10;
    }
    else {
      id v16 = v11;
    }
    id v36 = v16;
    while (2)
    {
      id v17 = 0LL;
      int v18 = v14;
      do
      {
        if (*(void *)v41 != v15) {
          objc_enumerationMutation(&off_1000C16E0);
        }
        uint64_t v19 = *(void *)(*((void *)&v40 + 1) + 8LL * (void)v17);
        id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));

        if (v11)
        {
          uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  v36));
          [v14 addObject:v20];

          id v21 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition realApplication:]( &OBJC_CLASS___NEPolicyCondition,  "realApplication:",  v11));
          [v14 addObject:v21];
        }

        id v22 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
        [v14 addObject:v22];

        id v23 = (void *)objc_claimAutoreleasedReturnValue( +[NWAddressEndpoint endpointWithHostname:port:]( &OBJC_CLASS___NWAddressEndpoint,  "endpointWithHostname:port:",  v19,  v39));
        if (a6) {
          uint64_t v24 = objc_claimAutoreleasedReturnValue( +[NEPolicyCondition localAddress:prefix:]( &OBJC_CLASS___NEPolicyCondition,  "localAddress:prefix:",  v23,  0LL));
        }
        else {
          uint64_t v24 = objc_claimAutoreleasedReturnValue( +[NEPolicyCondition remoteAddress:prefix:]( &OBJC_CLASS___NEPolicyCondition,  "remoteAddress:prefix:",  v23,  0LL));
        }
        int v25 = (void *)v24;
        [v14 addObject:v24];

        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](&OBJC_CLASS___NEPolicyCondition, "entitlement"));
        [v14 addObject:v26];

        id v27 = [[NEPolicy alloc] initWithOrder:*a2 result:v38 conditions:v14];
        id v28 = [a1 addPolicy:v27];

        uint64_t v31 = ne_log_obj(v29, v30);
        BOOL v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
        uint64_t v33 = v32;
        if (!v28)
        {
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 136315138;
            unsigned __int8 v45 = "-[NEPolicySession(AlwaysOnVPN) addPortPoliciesWithOrder:eAppUUID:appUUID:port:local:]";
            _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "%s: addPolicy failed", buf, 0xCu);
          }

          uint64_t v34 = 0LL;
          goto LABEL_24;
        }

        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = 136315394;
          unsigned __int8 v45 = "-[NEPolicySession(AlwaysOnVPN) addPortPoliciesWithOrder:eAppUUID:appUUID:port:local:]";
          __int16 v46 = 2112;
          id v47 = v14;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "%s: Added Bonjour policy %@",  buf,  0x16u);
        }

        ++*a2;
        id v17 = (char *)v17 + 1;
        int v18 = v14;
      }

      while (v13 != v17);
      id v13 = [&off_1000C16E0 countByEnumeratingWithState:&v40 objects:v48 count:16];
      if (v13) {
        continue;
      }
      break;
    }

    uint64_t v34 = 1LL;
  }

  else
  {
    id v14 = 0LL;
    uint64_t v34 = 1LL;
  }

uint64_t sub_1000556E4(void *a1, unsigned int *a2)
{
  id v4 = +[NEProcessInfo copyDNSUUIDs](&OBJC_CLASS___NEProcessInfo, "copyDNSUUIDs");
  id v5 = v4;
  if (v4)
  {
    __int128 v43 = 0u;
    __int128 v44 = 0u;
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    id v6 = (NSUUID *)v4;
    id v7 = -[NSUUID countByEnumeratingWithState:objects:count:]( v6,  "countByEnumeratingWithState:objects:count:",  &v41,  v50,  16LL);
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v42;
      id v36 = v5;
      while (2)
      {
        for (id i = 0LL; i != v8; id i = (char *)i + 1)
        {
          if (*(void *)v42 != v9) {
            objc_enumerationMutation(v6);
          }
          id v11 = *(void **)(*((void *)&v41 + 1) + 8LL * (void)i);
          if (!sub_10005533C(a1, a2, 0LL, v11, @"5353", 1)
            || !sub_10005533C(a1, a2, 0LL, v11, @"5353", 0))
          {
            uint64_t v34 = 0LL;
            goto LABEL_40;
          }

          id v12 = -[NSUUID initWithUUIDString:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDString:",  @"979C0A62-49FE-4739-BDCB-CAC584AC832D");
          if (!sub_10005533C(a1, a2, v12, v11, @"5353", 1)
            || !sub_10005533C(a1, a2, v12, v11, @"5353", 0))
          {
            uint64_t v34 = 0LL;
            goto LABEL_39;
          }
        }

        id v8 = -[NSUUID countByEnumeratingWithState:objects:count:]( v6,  "countByEnumeratingWithState:objects:count:",  &v41,  v50,  16LL);
        id v5 = v36;
        if (v8) {
          continue;
        }
        break;
      }
    }

    uint64_t has_internal_content = os_variant_has_internal_content("com.apple.networkextension");
    if ((_DWORD)has_internal_content)
    {
      id v36 = v5;
      uint64_t v15 = ne_log_obj(has_internal_content, v14);
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315394;
        id v47 = "-[NEPolicySession(AlwaysOnVPN) addBonjourWithOrder:]";
        __int16 v48 = 2112;
        __int128 v49 = @"/usr/local/bin/dnssdutil";
        _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "%s: Adding pass policy Bonjour traffic for %@",  buf,  0x16u);
      }

      id v18 = +[NEProcessInfo copyUUIDsForExecutable:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForExecutable:",  @"/usr/local/bin/dnssdutil");
      if (!v18)
      {
        uint64_t v19 = ne_log_obj(0LL, v17);
        uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = 136315394;
          id v47 = "-[NEPolicySession(AlwaysOnVPN) addBonjourWithOrder:]";
          __int16 v48 = 2112;
          __int128 v49 = @"/usr/local/bin/dnssdutil";
          _os_log_debug_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "%s: failed to get UUIDs for %@",  buf,  0x16u);
        }
      }

      __int128 v39 = 0u;
      __int128 v40 = 0u;
      __int128 v37 = 0u;
      __int128 v38 = 0u;
      id v12 = (NSUUID *)v18;
      id v21 = -[NSUUID countByEnumeratingWithState:objects:count:]( v12,  "countByEnumeratingWithState:objects:count:",  &v37,  v45,  16LL);
      if (v21)
      {
        id v22 = v21;
        uint64_t v23 = *(void *)v38;
        do
        {
          for (j = 0LL; j != v22; j = (char *)j + 1)
          {
            if (*(void *)v38 != v23) {
              objc_enumerationMutation(v12);
            }
            int v25 = *(void **)(*((void *)&v37 + 1) + 8LL * (void)j);
            uint64_t v26 = sub_10005533C(a1, a2, 0LL, v25, @"5353", 1);
            if ((v26 & 1) == 0)
            {
              uint64_t v28 = ne_log_obj(v26, v27);
              uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
              if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)__int128 buf = 136315394;
                id v47 = "-[NEPolicySession(AlwaysOnVPN) addBonjourWithOrder:]";
                __int16 v48 = 2112;
                __int128 v49 = @"/usr/local/bin/dnssdutil";
                _os_log_debug_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "%s: failed to add policy for local address for %@",  buf,  0x16u);
              }
            }

            uint64_t v30 = sub_10005533C(a1, a2, 0LL, v25, @"5353", 0);
            if ((v30 & 1) == 0)
            {
              uint64_t v32 = ne_log_obj(v30, v31);
              uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
              if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)__int128 buf = 136315394;
                id v47 = "-[NEPolicySession(AlwaysOnVPN) addBonjourWithOrder:]";
                __int16 v48 = 2112;
                __int128 v49 = @"/usr/local/bin/dnssdutil";
                _os_log_debug_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "%s: failed to add policy for remote address for %@",  buf,  0x16u);
              }
            }
          }

          id v22 = -[NSUUID countByEnumeratingWithState:objects:count:]( v12,  "countByEnumeratingWithState:objects:count:",  &v37,  v45,  16LL);
        }

        while (v22);
      }

      uint64_t v34 = 1LL;
      id v6 = v12;
LABEL_39:

LABEL_40:
      id v5 = v36;
    }

    else
    {
      uint64_t v34 = 1LL;
    }
  }

  else
  {
    uint64_t v34 = 0LL;
  }

  return v34;
}

uint64_t sub_100055BA4(void *a1, unsigned int *a2, uint64_t a3, int a4, int a5, void *a6)
{
  id v11 = a6;
  id v13 = v11;
  if (!a1)
  {
LABEL_12:
    uint64_t v15 = 0LL;
    goto LABEL_32;
  }

  if (a3)
  {
    if (a3 == 2)
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult drop](&OBJC_CLASS___NEPolicyResult, "drop"));
      goto LABEL_16;
    }

    if (a3 == 1)
    {
      if ((a4 & 1) != 0) {
        uint64_t v14 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](&OBJC_CLASS___NEPolicyResult, "pass"));
      }
      else {
        uint64_t v14 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", 0LL));
      }
      id v16 = (void *)v14;
      if (a5)
      {
        uint64_t v19 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", &unk_10009E7AB);
        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult removeNetworkAgentUUID:]( &OBJC_CLASS___NEPolicyResult,  "removeNetworkAgentUUID:",  v19));

        goto LABEL_17;
      }

BOOL sub_100055F34(void *a1, unsigned int *a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  uint64_t v9 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
  -[NSMutableArray addObject:](v9, "addObject:", v10);

  id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition customEntitlement:]( &OBJC_CLASS___NEPolicyCondition,  "customEntitlement:",  @"com.apple.private.application-service-browse"));
  -[NSMutableArray addObject:](v9, "addObject:", v11);

  id v12 = [[NEPolicy alloc] initWithOrder:*a2 result:v8 conditions:v9];
  id v13 = [a1 addPolicy:v12];
  uint64_t is_debug_logging_enabled = nelog_is_debug_logging_enabled();
  int v15 = is_debug_logging_enabled;
  uint64_t v17 = ne_log_obj(is_debug_logging_enabled, v16);
  id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  uint64_t v19 = v18;
  if (v13)
  {
    if (v15)
    {
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        int v25 = 138412290;
        id v26 = v12;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "Added ApplicationServiceBrowse exception policy: %@",  (uint8_t *)&v25,  0xCu);
      }
    }

    else if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      id v21 = (void *)objc_claimAutoreleasedReturnValue([v12 descriptionWithIndent:0 options:2]);
      int v25 = 138412290;
      id v26 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "Added ApplicationServiceBrowse exceptionpolicy: %@",  (uint8_t *)&v25,  0xCu);
    }

    if (v7)
    {
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v13));
      [v7 addObject:v22];
    }

    ++*a2;
  }

  else
  {
    BOOL v20 = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
    if (v15)
    {
      if (v20)
      {
        int v25 = 138412290;
        id v26 = v12;
        _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "Failed to add policy for ApplicationServiceBrowse exception: %@",  (uint8_t *)&v25,  0xCu);
      }
    }

    else if (v20)
    {
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v12 descriptionWithIndent:0 options:2]);
      int v25 = 138412290;
      id v26 = v24;
      _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "Failed to add policy for ApplicationServiceBrowse exception: %@",  (uint8_t *)&v25,  0xCu);
    }
  }

  return v13 != 0LL;
}

uint64_t sub_100056200(void *a1, unsigned int *a2, void *a3, void *a4, uint64_t a5, int a6, void *a7)
{
  id v10 = a3;
  id v56 = a4;
  id v11 = a7;
  if (a1)
  {
    if ([v10 count])
    {
      uint64_t v58 = v11;
      __int128 v64 = 0u;
      __int128 v65 = 0u;
      __int128 v62 = 0u;
      __int128 v63 = 0u;
      id obj = (id)objc_claimAutoreleasedReturnValue([v10 allKeys]);
      id v12 = [obj countByEnumeratingWithState:&v62 objects:v79 count:16];
      if (v12)
      {
        id v13 = v12;
        id v60 = 0LL;
        uint64_t v14 = 0LL;
        int v15 = &AnalyticsSendEventLazy_ptr;
        uint64_t v16 = *(void *)v63;
        uint64_t v51 = *(void *)v63;
        id v52 = v10;
        unsigned int v57 = a1;
        while (2)
        {
          for (id i = 0LL; i != v13; id i = (char *)i + 1)
          {
            if (*(void *)v63 != v16) {
              objc_enumerationMutation(obj);
            }
            id v18 = *(void **)(*((void *)&v62 + 1) + 8LL * (void)i);
            id v19 = [v15[176] copyUUIDsForBundleID:v18 uid:0];
            id v21 = v19;
            if (v19 && (id v19 = [v19 count]) != 0)
            {
              uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:v18]);
              unsigned int v23 = *a2;
              unsigned int v61 = *a2;
              unsigned int v24 = [v22 isLimitedToUDP];
              if (v24)
              {
                *(_DWORD *)__int128 buf = v23 - 1;
                int v25 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult skipWithOrder:]( &OBJC_CLASS___NEPolicyResult,  "skipWithOrder:",  v23 + 1));

                id v11 = v58;
                if (!sub_100054F3C(a1, (unsigned int *)buf, 1, v25, v58)
                  || !sub_100054F3C(a1, (unsigned int *)buf, 0, v25, v58))
                {
                  unsigned __int8 v66 = 0;
LABEL_48:

                  goto LABEL_49;
                }

                unsigned __int16 v26 = 17;
                uint64_t v14 = v25;
              }

              else
              {
                unsigned __int16 v26 = 0;
              }

              if (a5 == 200) {
                uint64_t v28 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", 0LL));
              }
              else {
                uint64_t v28 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](&OBJC_CLASS___NEPolicyResult, "pass"));
              }
              int v25 = (void *)v28;

              if (a6)
              {
                uint64_t v29 = -[NSUUID initWithUUIDBytes:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDBytes:",  &unk_10009E7AB);
                uint64_t v30 = objc_claimAutoreleasedReturnValue( +[NEPolicyResult removeNetworkAgentUUID:]( &OBJC_CLASS___NEPolicyResult,  "removeNetworkAgentUUID:",  v29));

                id v60 = (NSUUID *)v30;
              }

              else
              {
                uint64_t v29 = v60;
                id v60 = 0LL;
              }

              uint64_t v33 = ne_log_obj(v31, v32);
              uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
              if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)__int128 buf = 136316162;
                __int128 v68 = "-[NEPolicySession(AlwaysOnVPN) addApplicationExceptionWithOrder:applicationExceptions:delegateInte"
                      "rfaceName:priority:isAOVPN:policyIDList:]";
                __int16 v69 = 2112;
                id v70 = v25;
                __int16 v71 = 2048;
                uint64_t v72 = a5;
                __int16 v73 = 2112;
                uint64_t v74 = v18;
                __int16 v75 = 2112;
                unsigned int v76 = v21;
                _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_INFO,  "%s: Adding %@ Exceptions policy <priority %ld> for %@, UUIDs %@",  buf,  0x34u);
              }

              id v11 = v58;
              uint64_t v35 = sub_1000547C4(v57, &v61, 0, v21, 0, v56, v18, v26, v24 ^ 1, v25, v60, v58);
              if ((v35 & 1) == 0)
              {
                uint64_t v45 = ne_log_obj(v35, v36);
                __int16 v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
                if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)__int128 buf = 136315906;
                  __int128 v68 = "-[NEPolicySession(AlwaysOnVPN) addApplicationExceptionWithOrder:applicationExceptions:delegateIn"
                        "terfaceName:priority:isAOVPN:policyIDList:]";
                  __int16 v69 = 2112;
                  id v70 = v25;
                  __int16 v71 = 2048;
                  uint64_t v72 = a5;
                  __int16 v73 = 2112;
                  uint64_t v74 = v18;
                  _os_log_error_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_ERROR,  "%s: Failed to add %@ policy <priority %ld> for %@",  buf,  0x2Au);
                }

                unsigned __int8 v66 = 0;
                id v10 = v52;
                goto LABEL_48;
              }

              if (a5 == 200)
              {
                __int16 v37 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult scopeSocketToInterfaceName:]( &OBJC_CLASS___NEPolicyResult,  "scopeSocketToInterfaceName:",  v56));

                uint64_t v40 = ne_log_obj(v38, v39);
                __int128 v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
                if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)__int128 buf = 136316418;
                  __int128 v42 = @"<Any>";
                  if (v24) {
                    __int128 v42 = @"UDP";
                  }
                  __int128 v68 = "-[NEPolicySession(AlwaysOnVPN) addApplicationExceptionWithOrder:applicationExceptions:delegateIn"
                        "terfaceName:priority:isAOVPN:policyIDList:]";
                  __int16 v69 = 2112;
                  id v70 = v37;
                  __int16 v71 = 2048;
                  uint64_t v72 = 200LL;
                  __int16 v73 = 2112;
                  uint64_t v74 = v18;
                  __int16 v75 = 2112;
                  unsigned int v76 = v21;
                  __int16 v77 = 2112;
                  unsigned int v78 = v42;
                  _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_INFO,  "%s: Adding %@ Exceptions policy <priority %ld> for %@, UUIDs %@ - %@ protocol",  buf,  0x3Eu);
                }

                a1 = v57;
                uint64_t v43 = sub_1000547C4(v57, &v61, 0, v21, 0, 0LL, v18, v26, v24 ^ 1, v37, v60, v58);
                uint64_t v16 = v51;
                if ((v43 & 1) == 0)
                {
                  uint64_t v47 = ne_log_obj(v43, v44);
                  __int16 v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
                  id v10 = v52;
                  if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)__int128 buf = 136315906;
                    __int128 v68 = "-[NEPolicySession(AlwaysOnVPN) addApplicationExceptionWithOrder:applicationExceptions:delegate"
                          "InterfaceName:priority:isAOVPN:policyIDList:]";
                    __int16 v69 = 2112;
                    id v70 = v37;
                    __int16 v71 = 2048;
                    uint64_t v72 = 200LL;
                    __int16 v73 = 2112;
                    uint64_t v74 = v18;
                    _os_log_error_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_ERROR,  "%s: Failed to add %@ policy <priority %ld> for %@",  buf,  0x2Au);
                  }

                  unsigned __int8 v66 = 0;
                  int v25 = v37;
                  id v11 = v58;
                  goto LABEL_48;
                }

                int v25 = v37;
                id v10 = v52;
              }

              else
              {
                uint64_t v16 = v51;
                id v10 = v52;
                a1 = v57;
              }

              uint64_t v14 = v25;
              int v15 = &AnalyticsSendEventLazy_ptr;
            }

            else
            {
              uint64_t v27 = ne_log_obj(v19, v20);
              uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(v27);
              if (os_log_type_enabled((os_log_t)v22, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)__int128 buf = 136315394;
                __int128 v68 = "-[NEPolicySession(AlwaysOnVPN) addApplicationExceptionWithOrder:applicationExceptions:delegateInte"
                      "rfaceName:priority:isAOVPN:policyIDList:]";
                __int16 v69 = 2112;
                id v70 = v18;
                _os_log_debug_impl( (void *)&_mh_execute_header,  (os_log_t)v22,  OS_LOG_TYPE_DEBUG,  "%s: Application %@ does not exist, may have been uninstalled",  buf,  0x16u);
              }
            }
          }

          id v13 = [obj countByEnumeratingWithState:&v62 objects:v79 count:16];
          if (v13) {
            continue;
          }
          break;
        }
      }

      else
      {
        id v60 = 0LL;
        uint64_t v14 = 0LL;
      }

      unsigned __int8 v66 = 1;
      id v11 = v58;
    }

    else
    {
      unsigned __int8 v66 = 0;
    }

BOOL sub_1000568E4(void *a1, unsigned int *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  if (!a1)
  {
    BOOL v27 = 0LL;
    goto LABEL_41;
  }

  if (a4 == 400 || a4 == 100) {
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](&OBJC_CLASS___NEPolicyResult, "pass"));
  }
  else {
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", a3));
  }
  id v11 = v10;
  id v12 = v10;
  if (a4 != 100 && a4 != 400)
  {

    goto LABEL_17;
  }

  if (a4 != 100)
  {
LABEL_17:
    uint64_t v28 = ne_log_obj(v13, v14);
    uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315650;
      id v52 = "-[NEPolicySession(AlwaysOnVPN) addLocalNetworksExceptionWithOrder:skipOrder:priority:policyIDList:]";
      __int16 v53 = 2112;
      id v54 = v12;
      __int16 v55 = 1024;
      int v56 = a4;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEBUG,  "%s: Adding policy %@ for local networks (priority %d)",  buf,  0x1Cu);
    }

    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition localNetworksWithFlags:]( &OBJC_CLASS___NEPolicyCondition,  "localNetworksWithFlags:",  1LL));
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces", v30));
    v50[1] = v31;
    unsigned int v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v50, 2LL));

    int v25 = (char *)[[NEPolicy alloc] initWithOrder:*a2 result:v12 conditions:v24];
    id v32 = [a1 addPolicy:v25];
    uint64_t is_debug_logging_enabled = nelog_is_debug_logging_enabled();
    int v34 = is_debug_logging_enabled;
    uint64_t v36 = ne_log_obj(is_debug_logging_enabled, v35);
    __int16 v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    uint64_t v38 = v37;
    if (v32)
    {
      if (v34)
      {
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = 138412290;
          id v52 = v25;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEBUG,  "Added local networks policy: %@",  buf,  0xCu);
        }
      }

      else if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        uint64_t v40 = (char *)objc_claimAutoreleasedReturnValue([v25 descriptionWithIndent:0 options:2]);
        *(_DWORD *)__int128 buf = 138412290;
        id v52 = v40;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "Added local networks policy: %@", buf, 0xCu);
      }

      if (v9)
      {
        __int128 v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v32));
        [v9 addObject:v41];

        ++*a2;
        __int128 v42 = a1;
        uint64_t v43 = a2;
        uint64_t v44 = v12;
        uint64_t v45 = v9;
      }

      else
      {
        ++*a2;
        __int128 v42 = a1;
        uint64_t v43 = a2;
        uint64_t v44 = v12;
        uint64_t v45 = 0LL;
      }

      BOOL v27 = sub_100055F34(v42, v43, v44, v45);
      goto LABEL_40;
    }

    BOOL v39 = os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
    if (v34)
    {
      if (v39)
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v52 = v25;
        _os_log_error_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_ERROR,  "Failed to add policy for local networks: %@",  buf,  0xCu);
      }
    }

    else if (v39)
    {
      uint64_t v49 = (char *)objc_claimAutoreleasedReturnValue([v25 descriptionWithIndent:0 options:2]);
      *(_DWORD *)__int128 buf = 138412290;
      id v52 = v49;
      _os_log_error_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_ERROR,  "Failed to add policy for local networks: %@",  buf,  0xCu);
    }

    goto LABEL_39;
  }

  uint64_t v15 = ne_log_obj(v13, v14);
  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136315138;
    id v52 = "-[NEPolicySession(AlwaysOnVPN) addLocalNetworksExceptionWithOrder:skipOrder:priority:policyIDList:]";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "%s: Adding pass policy for Bonjour traffic",  buf,  0xCu);
  }

  uint64_t v17 = sub_1000556E4(a1, a2);
  if (!(_DWORD)v17)
  {
    BOOL v27 = 0LL;
    int v25 = 0LL;
    unsigned int v24 = 0LL;
    goto LABEL_40;
  }

  uint64_t v19 = ne_log_obj(v17, v18);
  uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136315138;
    id v52 = "-[NEPolicySession(AlwaysOnVPN) addLocalNetworksExceptionWithOrder:skipOrder:priority:policyIDList:]";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "%s: adding policy for TCP listeners",  buf,  0xCu);
  }

  id v21 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
  v57[0] = v21;
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition ipProtocol:](&OBJC_CLASS___NEPolicyCondition, "ipProtocol:", 6LL));
  v57[1] = v22;
  unsigned int v23 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition isListener](&OBJC_CLASS___NEPolicyCondition, "isListener"));
  v57[2] = v23;
  unsigned int v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v57, 3LL));

  int v25 = (char *)[[NEPolicy alloc] initWithOrder:*a2 result:v12 conditions:v24];
  if (![a1 addPolicy:v25])
  {
    uint64_t v46 = ne_log_obj(0LL, v26);
    uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v52 = "-[NEPolicySession(AlwaysOnVPN) addLocalNetworksExceptionWithOrder:skipOrder:priority:policyIDList:]";
      _os_log_error_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_ERROR,  "%s: failed to add policy for TCP listeners",  buf,  0xCu);
    }

LABEL_39:
    BOOL v27 = 0LL;
    goto LABEL_40;
  }

  ++*a2;
  BOOL v27 = 1LL;
LABEL_40:

LABEL_41:
  return v27;
}

uint64_t sub_100056EA8(void *a1, unsigned int *a2)
{
  if (!a1) {
    return 0LL;
  }
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](&OBJC_CLASS___NEPolicyResult, "pass"));
  uint64_t v6 = ne_log_obj(v4, v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 136315138;
    uint64_t v58 = "-[NEPolicySession(AlwaysOnVPN) addDeviceCommunicationExceptionWithOrder:]";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "%s: Adding pass policy for Bonjour traffic",  buf,  0xCu);
  }

  uint64_t v8 = sub_1000556E4(a1, a2);
  if ((_DWORD)v8)
  {
    uint64_t v10 = ne_log_obj(v8, v9);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v58 = "-[NEPolicySession(AlwaysOnVPN) addDeviceCommunicationExceptionWithOrder:]";
      _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "%s: Adding policy for TCP listeners",  buf,  0xCu);
    }

    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
    v65[0] = v12;
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition ipProtocol:](&OBJC_CLASS___NEPolicyCondition, "ipProtocol:", 6LL));
    v65[1] = v13;
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition isListener](&OBJC_CLASS___NEPolicyCondition, "isListener"));
    v65[2] = v14;
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v65, 3LL));

    uint64_t v16 = (char *)[[NEPolicy alloc] initWithOrder:*a2 result:v4 conditions:v15];
    id v17 = [a1 addPolicy:v16];
    if (v17)
    {
      ++*a2;
      uint64_t v19 = ne_log_obj(v17, v18);
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315906;
        uint64_t v58 = "-[NEPolicySession(AlwaysOnVPN) addDeviceCommunicationExceptionWithOrder:]";
        __int16 v59 = 2112;
        id v60 = v4;
        __int16 v61 = 2080;
        __int128 v62 = "com.apple.remotepairing.devicecommunication";
        __int16 v63 = 1024;
        int v64 = 0;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "%s: Adding policy %@ for account id %s (priority %d)",  buf,  0x26u);
      }

      id v21 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
      v56[0] = v21;
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](&OBJC_CLASS___NEPolicyCondition, "entitlement"));
      v56[1] = v22;
      unsigned int v23 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition accountIdentifier:]( &OBJC_CLASS___NEPolicyCondition,  "accountIdentifier:",  @"com.apple.remotepairing.devicecommunication"));
      v56[2] = v23;
      unsigned int v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v56, 3LL));

      int v25 = (char *)[[NEPolicy alloc] initWithOrder:*a2 result:v4 conditions:v24];
      id v26 = [a1 addPolicy:v25];
      uint64_t is_debug_logging_enabled = nelog_is_debug_logging_enabled();
      int v28 = is_debug_logging_enabled;
      uint64_t v30 = ne_log_obj(is_debug_logging_enabled, v29);
      uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
      id v32 = v31;
      if (!v26)
      {
        BOOL v36 = os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
        if (v28)
        {
          if (v36)
          {
            *(_DWORD *)__int128 buf = 138412290;
            uint64_t v58 = v25;
            _os_log_error_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "Failed to add policy for DeviceCommunication account id: %@",  buf,  0xCu);
          }
        }

        else if (v36)
        {
          __int16 v53 = (char *)objc_claimAutoreleasedReturnValue([v25 descriptionWithIndent:0 options:2]);
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v58 = v53;
          _os_log_error_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "Failed to add policy for DeviceCommunication account id: %@",  buf,  0xCu);
        }

        uint64_t v33 = 0LL;
        uint64_t v16 = v25;
        uint64_t v15 = v24;
        goto LABEL_42;
      }

      if (v28)
      {
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v58 = v25;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "Added DeviceCommunication account id policy: %@",  buf,  0xCu);
        }
      }

      else if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        __int16 v37 = (char *)objc_claimAutoreleasedReturnValue([v25 descriptionWithIndent:0 options:2]);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v58 = v37;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_INFO,  "Added DeviceCommunication account id policy: %@",  buf,  0xCu);
      }

      ++*a2;
      uint64_t v40 = ne_log_obj(v38, v39);
      __int128 v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315394;
        uint64_t v58 = "-[NEPolicySession(AlwaysOnVPN) addDeviceCommunicationExceptionWithOrder:]";
        __int16 v59 = 2112;
        id v60 = v4;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEBUG,  "%s: Adding policy %@ for DeviceCommunication DIRECTLINK interfaces",  buf,  0x16u);
      }

      __int128 v42 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition scopedInterfaceFlags:eflags:xflags:]( &OBJC_CLASS___NEPolicyCondition,  "scopedInterfaceFlags:eflags:xflags:",  0LL,  0x20000000LL,  0LL));
      __int16 v55 = v42;
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v55, 1LL));

      uint64_t v16 = (char *)[[NEPolicy alloc] initWithOrder:*a2 result:v4 conditions:v15];
      id v43 = [a1 addPolicy:v16];
      uint64_t v44 = nelog_is_debug_logging_enabled();
      int v45 = v44;
      uint64_t v47 = ne_log_obj(v44, v46);
      __int16 v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
      uint64_t v49 = v48;
      if (v43)
      {
        if (v45)
        {
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 138412290;
            uint64_t v58 = v16;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEBUG,  "Added DeviceCommunication DIRECTLINK policy: %@",  buf,  0xCu);
          }
        }

        else if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
        {
          uint64_t v51 = (char *)objc_claimAutoreleasedReturnValue([v16 descriptionWithIndent:0 options:2]);
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v58 = v51;
          _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_INFO,  "Added DeviceCommunication DIRECTLINK policy: %@",  buf,  0xCu);
        }

        ++*a2;
        uint64_t v33 = 1LL;
        goto LABEL_42;
      }

      BOOL v50 = os_log_type_enabled(v48, OS_LOG_TYPE_ERROR);
      if (v45)
      {
        if (v50)
        {
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v58 = v16;
          _os_log_error_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_ERROR,  "Failed to add policy for DeviceCommunication DIRECTLINK: %@",  buf,  0xCu);
        }
      }

      else if (v50)
      {
        id v54 = (char *)objc_claimAutoreleasedReturnValue([v16 descriptionWithIndent:0 options:2]);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v58 = v54;
        _os_log_error_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_ERROR,  "Failed to add policy for DeviceCommunication DIRECTLINK: %@",  buf,  0xCu);
      }
    }

    else
    {
      uint64_t v34 = ne_log_obj(0LL, v18);
      uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 136315138;
        uint64_t v58 = "-[NEPolicySession(AlwaysOnVPN) addDeviceCommunicationExceptionWithOrder:]";
        _os_log_error_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "%s: failed to add policy for TCP listeners",  buf,  0xCu);
      }
    }

    uint64_t v33 = 0LL;
LABEL_42:

    goto LABEL_43;
  }

  uint64_t v33 = 0LL;
LABEL_43:

  return v33;
}

uint64_t sub_100057628(void *a1, unsigned int *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  if (v14)
  {
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    id v19 = v14;
    id v30 = [v19 countByEnumeratingWithState:&v39 objects:v44 count:16];
    if (v30)
    {
      uint64_t v20 = *(void *)v40;
      id v33 = v14;
      id v34 = v13;
      id v32 = v19;
      uint64_t v29 = *(void *)v40;
      do
      {
        uint64_t v21 = 0LL;
        do
        {
          if (*(void *)v40 != v20) {
            objc_enumerationMutation(v19);
          }
          uint64_t v31 = v21;
          uint64_t v22 = *(void **)(*((void *)&v39 + 1) + 8 * v21);
          __int128 v35 = 0u;
          __int128 v36 = 0u;
          __int128 v37 = 0u;
          __int128 v38 = 0u;
          id v23 = v13;
          id v24 = [v23 countByEnumeratingWithState:&v35 objects:v43 count:16];
          if (v24)
          {
            id v25 = v24;
            uint64_t v26 = *(void *)v36;
            while (2)
            {
              for (id i = 0LL; i != v25; id i = (char *)i + 1)
              {
                if (*(void *)v36 != v26) {
                  objc_enumerationMutation(v23);
                }
                if ((sub_1000537D0( a1,  a2,  *(void **)(*((void *)&v35 + 1) + 8LL * (void)i),  v22,  1,  0LL,  0,  0LL,  0LL,  0LL,  0,  0,  0LL,  v15,  v16,  0,  v17,  1) & 1) == 0)
                {

                  uint64_t v18 = 0LL;
                  id v14 = v33;
                  id v13 = v34;
                  id v19 = v32;
                  goto LABEL_21;
                }
              }

              id v25 = [v23 countByEnumeratingWithState:&v35 objects:v43 count:16];
              if (v25) {
                continue;
              }
              break;
            }
          }

          uint64_t v21 = v31 + 1;
          id v14 = v33;
          id v13 = v34;
          id v19 = v32;
          uint64_t v20 = v29;
        }

        while ((id)(v31 + 1) != v30);
        uint64_t v18 = 1LL;
        id v30 = [v32 countByEnumeratingWithState:&v39 objects:v44 count:16];
      }

      while (v30);
    }

    else
    {
      uint64_t v18 = 1LL;
    }

LABEL_21:
  }

  else
  {
    uint64_t v18 = 0LL;
  }

  return v18;
}

  if (!self)
  {
    uint64_t v8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    goto LABEL_24;
  }

  if (!objc_getProperty(self, v6, 472LL, 1))
  {
    uint64_t v8 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    objc_setProperty_atomic(self, v9, v8, 472LL);
LABEL_24:
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  if (self) {
    id Property = objc_getProperty(self, v10, 472LL, 1);
  }
  else {
    id Property = 0LL;
  }
  id v13 = Property;
  id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v4));
  [v13 setObject:v11 forKeyedSubscript:v14];

LABEL_28:
  return 1;
}

    id v11 = (os_log_s *)v7;
  }

id sub_100057888(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 alwaysOnVPN]);

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 serviceExceptions]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"CellularServices"]);

  if (v6) {
    id v7 = [v6 action];
  }
  else {
    id v7 = 0LL;
  }

  return v7;
}

id sub_10005791C(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 alwaysOnVPN]);

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 serviceExceptions]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:@"VoiceMail"]);

  if (v6) {
    id v7 = [v6 action];
  }
  else {
    id v7 = 0LL;
  }

  return v7;
}

uint64_t sub_1000579B0(void *a1, unsigned int *a2, uint64_t a3, int a4, int a5)
{
  if (a4) {
    uint64_t v5 = 400LL;
  }
  else {
    uint64_t v5 = 100LL;
  }
  uint64_t v6 = sub_100057A44(a1, a2, a3, v5, 0LL, a5, 0LL);
  uint64_t v8 = v6;
  if ((v6 & 1) == 0)
  {
    uint64_t v9 = ne_log_obj(v6, v7);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v12[0] = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Failed to handle CellularServices exception - Control policies",  (uint8_t *)v12,  2u);
    }
  }

  return v8;
}

uint64_t sub_100057A44(void *a1, unsigned int *a2, uint64_t a3, uint64_t a4, void *a5, int a6, void *a7)
{
  id v13 = a5;
  id v14 = a7;
  id v16 = v14;
  if (a3)
  {
    if (a3 == 2)
    {
      id v19 = (id)objc_claimAutoreleasedReturnValue(+[NEPolicyResult drop](&OBJC_CLASS___NEPolicyResult, "drop"));
      goto LABEL_15;
    }

    if (a3 == 1)
    {
      if (a4 == 400 || a4 == 100) {
        id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](&OBJC_CLASS___NEPolicyResult, "pass"));
      }
      else {
        id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult skipWithOrder:](&OBJC_CLASS___NEPolicyResult, "skipWithOrder:", 0LL));
      }
      uint64_t v22 = v17;
      id v19 = v17;

      if (a6)
      {
        id v23 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", &unk_10009E7AB);
        id v24 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult removeNetworkAgentUUID:]( &OBJC_CLASS___NEPolicyResult,  "removeNetworkAgentUUID:",  v23));

        goto LABEL_16;
      }

LABEL_65:
            unsigned __int8 v85 = 0;
            goto LABEL_66;
          }

          uint64_t v73 = ne_log_obj(v57, v58);
          id v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
          if (!os_log_type_enabled(v70, OS_LOG_TYPE_ERROR)) {
            goto LABEL_65;
          }
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)__int128 v87 = v19;
          *(_WORD *)&v87[8] = 2112;
          *(void *)&v87[10] = @"CellularServices";
          __int16 v71 = "Failed to add %@ policy for %@ (IMSUUIDs as effective UUIDs)";
        }

        else
        {
          uint64_t v72 = ne_log_obj(v55, v56);
          id v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(v72);
          if (!os_log_type_enabled(v70, OS_LOG_TYPE_ERROR)) {
            goto LABEL_65;
          }
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)__int128 v87 = v19;
          *(_WORD *)&v87[8] = 2112;
          *(void *)&v87[10] = @"CellularServices";
          __int16 v71 = "Failed to add %@ policy for %@ (NEHelper/CommCenter)";
        }
      }

      else
      {
        uint64_t v69 = ne_log_obj(v53, v54);
        id v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);
        if (!os_log_type_enabled(v70, OS_LOG_TYPE_ERROR)) {
          goto LABEL_65;
        }
        *(_DWORD *)__int128 buf = 138412546;
        *(void *)__int128 v87 = v19;
        *(_WORD *)&v87[8] = 2112;
        *(void *)&v87[10] = @"CellularServices";
        __int16 v71 = "Failed to add %@ policy for %@ (CommCenter/MMS)";
      }

      id v14 = logb;
LABEL_66:

      uint64_t v72 = 0LL;
      goto LABEL_67;
    }

    __int128 v62 = link_ntoa((const sockaddr_dl *)v129);
    uint64_t v64 = ne_log_obj(v62, v63);
    uint64_t v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
    uint64_t v6 = v52;
    if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
    {
      __int128 v94 = "NULL";
      if (v62) {
        __int128 v94 = v62;
      }
      *(_DWORD *)id v131 = 67110914;
      *(_DWORD *)&v131[4] = v129[0];
      *(_WORD *)&v131[8] = 1024;
      *(_DWORD *)&v131[10] = v129[1];
      *(_WORD *)&v131[14] = 1024;
      *(_DWORD *)&v131[16] = *(unsigned __int16 *)&v129[2];
      *(_WORD *)&v131[20] = 1024;
      *(_DWORD *)&v131[22] = v129[4];
      *(_WORD *)&v131[26] = 1024;
      *(_DWORD *)&v131[28] = v129[5];
      *(_WORD *)&v131[32] = 1024;
      *(_DWORD *)&v131[34] = v129[6];
      *(_WORD *)&v131[38] = 1024;
      *(_DWORD *)&v131[40] = v129[7];
      *(_WORD *)&v131[44] = 2080;
      *(void *)&v131[46] = v94;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEBUG,  "Gateway: length %u, family %u, index %u, type %u, name length %u, address length %u, selector length %u, string %s",  v131,  0x36u);
    }

    unsigned __int8 v66 = strcmp(v62, __s2);
    id v14 = logb;
    if ((_DWORD)v66)
    {
      __int128 v68 = ne_log_obj(v66, v67);
      uint64_t v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(v68);
      if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)id v131 = 136315394;
        *(void *)&v131[4] = v62;
        *(_WORD *)&v131[12] = 2080;
        *(void *)&v131[14] = __s2;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_DEBUG,  "Gateway interface string %s doesn't match %s",  v131,  0x16u);
      }

      goto LABEL_66;
    }

    if (buf[1] != 2)
    {
      __int128 v92 = ne_log_obj(v66, v67);
      uint64_t v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(v92);
      if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)id v131 = 67109120;
        *(_DWORD *)&v131[4] = buf[1];
        _os_log_error_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_ERROR,  "Destination address family %u is wrong!",  v131,  8u);
      }

      goto LABEL_66;
    }

    uint64_t v73 = NECreateAddressString(buf);
    uint64_t v75 = ne_log_obj(v73, v74);
    unsigned int v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)id v131 = 67109634;
      *(_DWORD *)&v131[4] = buf[0];
      *(_WORD *)&v131[8] = 1024;
      *(_DWORD *)&v131[10] = buf[1];
      *(_WORD *)&v131[14] = 2112;
      *(void *)&v131[16] = v73;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_DEBUG,  "Destination: length %u, family %u, string %@",  v131,  0x18u);
    }

    id v79 = ne_log_obj(v77, v78);
    id v80 = (os_log_s *)objc_claimAutoreleasedReturnValue(v79);
    uint64_t v81 = v80;
    __int128 v113 = (void *)v73;
    if (v73)
    {
      if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)id v131 = 67109376;
        *(_DWORD *)&v131[4] = v130[0];
        *(_WORD *)&v131[8] = 1024;
        *(_DWORD *)&v131[10] = v130[1];
        _os_log_debug_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_DEBUG,  "Netmask: length %u, family %u",  v131,  0xEu);
      }

      *(_WORD *)id v130 = 528;
      id v82 = NECreateAddressString(v130);
      uint64_t v84 = ne_log_obj(v82, v83);
      unsigned __int8 v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
      if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)id v131 = 138412290;
        *(void *)&v131[4] = v82;
        _os_log_debug_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEBUG, "Netmask: string %@", v131, 0xCu);
      }

      if (v82)
      {
        __int16 v88 = (os_log_s *)v82;
        uint64_t v89 = v113;
        __int16 v90 = -[NEIPv4Route initWithDestinationAddress:subnetMask:]( objc_alloc(&OBJC_CLASS___NEIPv4Route),  "initWithDestinationAddress:subnetMask:",  v113,  v88);
        BOOL v91 = v88;
        uint64_t v72 = v90;
        goto LABEL_92;
      }

      id v95 = ne_log_obj(v86, v87);
      id v96 = (os_log_s *)objc_claimAutoreleasedReturnValue(v95);
      if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)id v131 = 0;
        _os_log_error_impl( (void *)&_mh_execute_header,  v96,  OS_LOG_TYPE_ERROR,  "Netmask address string is nil!",  v131,  2u);
      }

      BOOL v91 = 0LL;
    }

    else
    {
      if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)id v131 = 0;
        _os_log_error_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_ERROR,  "Destination address string is nil!",  v131,  2u);
      }

      BOOL v91 = v81;
    }

    uint64_t v72 = 0LL;
    uint64_t v89 = v113;
LABEL_92:

    if (v72) {
      -[NSMutableArray addObject:](v39, "addObject:", v72);
    }
LABEL_67:

    uint64_t v51 = *v49;
LABEL_68:
    uint64_t v49 = (unsigned __int16 *)((char *)v49 + v51);
    break;
  }

LABEL_64:
      _os_log_error_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_ERROR, v71, buf, 0x16u);
      goto LABEL_65;
    }

    uint64_t v20 = ne_log_obj(v14, v15);
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 67109378;
      *(_DWORD *)__int128 v87 = a3;
      *(_WORD *)&v87[4] = 2112;
      *(void *)&v87[6] = @"CellularServices";
      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Invalid action %d for %@", buf, 0x12u);
    }

    uint64_t v18 = 0LL;
  }

  else
  {
    uint64_t v18 = 1LL;
  }

LABEL_73:
  return v18;
}

          goto LABEL_32;
        }

uint64_t sub_100058490(void *a1, unsigned int *a2, uint64_t a3, void *a4, int a5, void *a6)
{
  id v11 = a4;
  id v12 = a6;
  if (!a1)
  {
LABEL_7:
    uint64_t v15 = 0LL;
    goto LABEL_8;
  }

  uint64_t v13 = sub_100057A44(a1, a2, a3, 200LL, v11, a5, v12);
  if ((v13 & 1) == 0)
  {
    uint64_t v16 = ne_log_obj(v13, v14);
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v19 = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Failed to handle CellularServices exception - Data policies",  v19,  2u);
    }

    goto LABEL_7;
  }

  uint64_t v15 = 1LL;
LABEL_8:

  return v15;
}

BOOL sub_10005856C( void *a1, void *a2, unsigned int *a3, int a4, char a5, void *a6, void *a7, int a8, void *a9, unsigned __int8 a10, unsigned __int8 a11)
{
  id v16 = a2;
  id v17 = a6;
  uint64_t v18 = a7;
  id v19 = a9;
  uint64_t v21 = v19;
  __int128 v125 = a1;
  if (!a1)
  {
    BOOL v130 = 0;
    goto LABEL_96;
  }

  if (v18)
  {
    if (a8)
    {
LABEL_4:
      uint64_t v22 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", &unk_10009E7AB);
      id v23 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult removeNetworkAgentUUID:]( &OBJC_CLASS___NEPolicyResult,  "removeNetworkAgentUUID:",  v22));

      goto LABEL_7;
    }
  }

  else
  {
    id v19 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](&OBJC_CLASS___NEPolicyResult, "pass"));
    uint64_t v18 = v19;
    if (a8) {
      goto LABEL_4;
    }
  }

  id v23 = 0LL;
LABEL_7:
  int v24 = a10;
  if (!a4) {
    goto LABEL_51;
  }
  id v25 = (const __CFString *)+[NEProcessInfo copyUUIDsForBundleID:uid:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForBundleID:uid:",  @"com.apple.WebSheet",  0LL);
  uint64_t v27 = ne_log_obj(v25, v26);
  uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
  {
    int buf = 136315650;
    __int128 v143 = "-[NEPolicySession(AlwaysOnVPN) addAllowedCaptiveNetworkPluginsWithResult:order:allowCaptiveWebSheet:allowAllC"
           "aptiveNetworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyIDList:incrementOrder:checkEntitlement:]";
    __int16 v144 = 2112;
    __int128 v145 = @"com.apple.WebSheet";
    __int16 v146 = 2112;
    __int128 v147 = v25;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "%s: UUIDs for %@ - %@",  (uint8_t *)&buf,  0x20u);
  }

  __int128 v127 = (__CFString *)v25;

  id v29 = (__CFString *)+[NEProcessInfo copyUUIDsForBundleID:uid:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForBundleID:uid:",  @"com.apple.WebKit.Networking",  0LL);
  uint64_t v31 = ne_log_obj(v29, v30);
  id v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
  {
    int buf = 136315650;
    __int128 v143 = "-[NEPolicySession(AlwaysOnVPN) addAllowedCaptiveNetworkPluginsWithResult:order:allowCaptiveWebSheet:allowAllC"
           "aptiveNetworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyIDList:incrementOrder:checkEntitlement:]";
    __int16 v144 = 2112;
    __int128 v145 = @"com.apple.WebKit.Networking";
    __int16 v146 = 2112;
    __int128 v147 = v29;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "%s: UUIDs for %@ - %@",  (uint8_t *)&buf,  0x20u);
  }

  id v118 = v16;

  if (v29 && (id v33 = -[__CFString count](v29, "count")) != 0LL)
  {
    uint64_t v35 = v29;
    uint64_t v36 = v127;
    if (!v127) {
      goto LABEL_40;
    }
  }

  else
  {
    uint64_t v35 = (__CFString *)+[NEProcessInfo copyUUIDsForExecutable:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForExecutable:",  @"/System/Library/Frameworks/WebKit.framework/XPCServices/com.apple.WebKit.Networking.xpc/com.apple.WebKit.Networking");

    uint64_t v39 = ne_log_obj(v37, v38);
    uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
    uint64_t v36 = v127;
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
    {
      int buf = 136315650;
      __int128 v143 = "-[NEPolicySession(AlwaysOnVPN) addAllowedCaptiveNetworkPluginsWithResult:order:allowCaptiveWebSheet:allowAl"
             "lCaptiveNetworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyIDList:incrementOrder:checkEntitlement:]";
      __int16 v144 = 2112;
      __int128 v145 = @"/System/Library/Frameworks/WebKit.framework/XPCServices/com.apple.WebKit.Networking.xpc/com.apple.WebKit.Networking";
      __int16 v146 = 2112;
      __int128 v147 = v35;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEBUG,  "%s: UUIDs for %@ - %@",  (uint8_t *)&buf,  0x20u);
    }

    if (!v127) {
      goto LABEL_40;
    }
  }

  if (v35)
  {
    __int128 v122 = v35;
    uint64_t v41 = ne_log_obj(v33, v34);
    __int128 v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
    {
      int buf = 136315650;
      __int128 v143 = "-[NEPolicySession(AlwaysOnVPN) addAllowedCaptiveNetworkPluginsWithResult:order:allowCaptiveWebSheet:allowAl"
             "lCaptiveNetworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyIDList:incrementOrder:checkEntitlement:]";
      __int16 v144 = 2112;
      __int128 v145 = v18;
      __int16 v146 = 2112;
      __int128 v147 = @"com.apple.WebSheet";
      _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_INFO,  "%s: Adding %@ policy for %@",  (uint8_t *)&buf,  0x20u);
    }

    uint64_t v36 = v127;
    uint64_t v43 = sub_100054464(v125, a3, a10, 0LL, v127, a11, 0LL, 0, 0LL, 1, 0LL, v18, v23, 0, v21);
    if ((v43 & 1) == 0)
    {
      uint64_t v61 = ne_log_obj(v43, v44);
      __int128 v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
      if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
      {
        int buf = 136315650;
        __int128 v143 = "-[NEPolicySession(AlwaysOnVPN) addAllowedCaptiveNetworkPluginsWithResult:order:allowCaptiveWebSheet:allow"
               "AllCaptiveNetworkPlugins:allowedCaptiveNetworkPlugins:result:isAOVPN:policyIDList:incrementOrder:checkEntitlement:]";
        __int16 v144 = 2112;
        __int128 v145 = v18;
        __int16 v146 = 2112;
        __int128 v147 = @"com.apple.WebSheet";
        _os_log_error_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_ERROR,  "%s: Failed to add %@ policy for %@",  (uint8_t *)&buf,  0x20u);
      }

      BOOL v130 = 0;
      goto LABEL_44;
    }

    id v107 = v17;
    int v105 = a8;
    __int128 v120 = v127;
    uint64_t v45 = v35;
    uint64_t v46 = v18;
    __int128 v115 = v23;
    id v47 = v23;
    uint64_t v48 = v21;
    id v49 = +[NEProcessInfo copyDNSUUIDs](&OBJC_CLASS___NEProcessInfo, "copyDNSUUIDs");
    id v117 = v45;
    if (v49)
    {
      __int128 v140 = 0u;
      __int128 v141 = 0u;
      memset(v139, 0, sizeof(v139));
      id obj = v45;
      id v103 = -[__CFString countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  v139,  &buf,  16LL);
      if (v103)
      {
        uint64_t v50 = *(void *)v139[2];
        id v109 = v21;
        __int128 v111 = v18;
        uint64_t v102 = *(void *)v139[2];
        do
        {
          uint64_t v51 = 0LL;
          do
          {
            if (*(void *)v139[2] != v50)
            {
              uint64_t v52 = v51;
              objc_enumerationMutation(obj);
              uint64_t v51 = v52;
            }

            uint64_t v104 = v51;
            uint64_t v53 = *(void **)(v139[1] + 8 * v51);
            __int128 v131 = 0u;
            __int128 v132 = 0u;
            __int128 v133 = 0u;
            __int128 v134 = 0u;
            uint64_t v54 = v120;
            id v55 = -[__CFString countByEnumeratingWithState:objects:count:]( v54,  "countByEnumeratingWithState:objects:count:",  &v131,  &v135,  16LL);
            if (v55)
            {
              id v56 = v55;
              uint64_t v57 = *(void *)v132;
              while (2)
              {
                for (id i = 0LL; i != v56; id i = (char *)i + 1)
                {
                  if (*(void *)v132 != v57) {
                    objc_enumerationMutation(v54);
                  }
                  if ((sub_1000537D0( v125,  a3,  *(void **)(*((void *)&v131 + 1) + 8LL * (void)i),  v53,  a11,  0LL,  0,  v49,  0LL,  0LL,  0,  1,  0LL,  v46,  v47,  0,  v48,  a10) & 1) == 0)
                  {

                    char v60 = 0;
                    id v16 = v118;
                    id v17 = v107;
                    uint64_t v21 = v109;
                    uint64_t v18 = v111;
                    goto LABEL_48;
                  }
                }

                id v56 = -[__CFString countByEnumeratingWithState:objects:count:]( v54,  "countByEnumeratingWithState:objects:count:",  &v131,  &v135,  16LL);
                if (v56) {
                  continue;
                }
                break;
              }
            }

            uint64_t v51 = v104 + 1;
            id v16 = v118;
            id v17 = v107;
            uint64_t v21 = v109;
            uint64_t v18 = v111;
            uint64_t v50 = v102;
          }

          while ((id)(v104 + 1) != v103);
          id v59 = -[__CFString countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  v139,  &buf,  16LL);
          uint64_t v50 = v102;
          char v60 = 1;
          id v103 = v59;
        }

        while (v59);
      }

      else
      {
        char v60 = 1;
        id v17 = v107;
      }

uint64_t sub_100059260(uint64_t a1, void *a2, unsigned int a3, uint64_t *a4, void *a5)
{
  id v9 = a2;
  id v10 = a5;
  if (!a1) {
    goto LABEL_38;
  }
  unsigned int v292 = a3;
  id v11 = v9;
  id v12 = +[NEProcessInfo copyUUIDsForExecutable:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForExecutable:",  @"/usr/libexec/nesessionmanager");
  id v13 = [v12 count];
  if (!v13) {
    goto LABEL_12;
  }
  uint64_t v15 = ne_log_obj(v13, v14);
  id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 136315138;
    id v294 = "-[NEPolicySession(AlwaysOnVPN) addSessionManagerWithOrder:]";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "%s: Adding PASS policy for nesessionmanager",  buf,  0xCu);
  }

  id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](&OBJC_CLASS___NEPolicyResult, "pass"));
  char v18 = sub_100054464((void *)a1, &v292, 1, 0LL, v12, 1, 0LL, 1, 0LL, 0, 0LL, v17, 0LL, 0, 0LL);

  if ((v18 & 1) == 0)
  {
    uint64_t v27 = ne_log_obj(v19, v20);
    uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315138;
      id v294 = "-[NEPolicySession(AlwaysOnVPN) addSessionManagerWithOrder:]";
      _os_log_error_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "%s: Failed to add PASS policy for nesessionmanager",  buf,  0xCu);
    }

LABEL_12:
    uint64_t v31 = ne_log_obj(v29, v30);
    id v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
    if (!os_log_type_enabled((os_log_t)v32, OS_LOG_TYPE_ERROR))
    {
LABEL_34:

      uint64_t v68 = ne_log_obj(v66, v67);
      uint64_t v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(v68);
      if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315138;
        id v294 = "-[NEPolicySession(AlwaysOnVPN) evaluateConfiguration:startOrder:IMSUseIPSec:dropAllLevel:captiveNetworkPlugins:]";
        _os_log_error_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_ERROR,  "%s: evaluateConfigurationEssential failed",  buf,  0xCu);
      }

      goto LABEL_37;
    }

    *(_DWORD *)int buf = 136315138;
    id v294 = "-[NEPolicySession(AlwaysOnVPN) evaluateConfigurationEssentialwithOrder:order:]";
    id v33 = "%s: addSessionManagerWithOrder failed";
LABEL_40:
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v32, OS_LOG_TYPE_ERROR, v33, buf, 0xCu);
    goto LABEL_34;
  }

  id v21 = v11;
  uint64_t v22 = v21;
  if (v21
    && (id v23 = (void *)objc_claimAutoreleasedReturnValue([v21 alwaysOnVPN]), v23, v23))
  {
    int v24 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", &unk_10009E7AB);
    uint64_t v25 = objc_claimAutoreleasedReturnValue(+[NEPolicyResult removeNetworkAgentUUID:](&OBJC_CLASS___NEPolicyResult, "removeNetworkAgentUUID:", v24));

    uint64_t v26 = (void *)v25;
  }

  else
  {
    uint64_t v26 = 0LL;
  }

  id v34 = +[NEProcessInfo copyUUIDsForExecutable:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForExecutable:",  @"/usr/libexec/configd");
  id v35 = [v34 count];
  if (!v35) {
    goto LABEL_33;
  }
  int v287 = a4;
  uint64_t v37 = ne_log_obj(v35, v36);
  uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 136315138;
    id v294 = "-[NEPolicySession(AlwaysOnVPN) addConfigdWithOrder:order:needConfigdPassAll:policyIDList:]";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEBUG,  "%s: Adding PASS policy for configd",  buf,  0xCu);
  }

  uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](&OBJC_CLASS___NEPolicyResult, "pass"));
  char v40 = sub_100054464((void *)a1, &v292, 1, 0LL, v34, 1, 0LL, 1, 0LL, 0, 0LL, v39, v26, 0, 0LL);

  uint64_t v43 = ne_log_obj(v41, v42);
  uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
  uint64_t v45 = v44;
  if ((v40 & 1) == 0)
  {
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315138;
      id v294 = "-[NEPolicySession(AlwaysOnVPN) addConfigdWithOrder:order:needConfigdPassAll:policyIDList:]";
      _os_log_error_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_ERROR,  "%s: Failed to add PASS policy for configd",  buf,  0xCu);
    }

    goto LABEL_32;
  }

  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 136315138;
    id v294 = "-[NEPolicySession(AlwaysOnVPN) addConfigdWithOrder:order:needConfigdPassAll:policyIDList:]";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEBUG,  "%s: Adding PASS policy for captiveagent",  buf,  0xCu);
  }

  uint64_t v45 = (os_log_s *)+[NEProcessInfo copyUUIDsForExecutable:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForExecutable:",  @"/usr/libexec/captiveagent");
  if (!v45)
  {
    uint64_t v59 = ne_log_obj(0LL, v46);
    char v60 = (void *)objc_claimAutoreleasedReturnValue(v59);
    if (!os_log_type_enabled((os_log_t)v60, OS_LOG_TYPE_ERROR))
    {
LABEL_31:

LABEL_32:
LABEL_33:

      uint64_t v65 = ne_log_obj(v63, v64);
      id v32 = (void *)objc_claimAutoreleasedReturnValue(v65);
      if (!os_log_type_enabled((os_log_t)v32, OS_LOG_TYPE_ERROR)) {
        goto LABEL_34;
      }
      *(_DWORD *)int buf = 136315138;
      id v294 = "-[NEPolicySession(AlwaysOnVPN) evaluateConfigurationEssentialwithOrder:order:]";
      id v33 = "%s: addConfigdWithOrder failed";
      goto LABEL_40;
    }

    *(_DWORD *)int buf = 136315138;
    id v294 = "-[NEPolicySession(AlwaysOnVPN) addConfigdWithOrder:order:needConfigdPassAll:policyIDList:]";
    uint64_t v61 = "%s: Failed to get UUIDs for captiveagent";
LABEL_83:
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v60, OS_LOG_TYPE_ERROR, v61, buf, 0xCu);
    goto LABEL_31;
  }

  id v47 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](&OBJC_CLASS___NEPolicyResult, "pass"));
  char v48 = sub_100054464((void *)a1, &v292, 1, 0LL, v45, 1, 0LL, 0, 0LL, 0, 0LL, v47, v26, 0, 0LL);

  if ((v48 & 1) == 0)
  {
    uint64_t v62 = ne_log_obj(v49, v50);
    char v60 = (void *)objc_claimAutoreleasedReturnValue(v62);
    if (!os_log_type_enabled((os_log_t)v60, OS_LOG_TYPE_ERROR)) {
      goto LABEL_31;
    }
    *(_DWORD *)int buf = 136315138;
    id v294 = "-[NEPolicySession(AlwaysOnVPN) addConfigdWithOrder:order:needConfigdPassAll:policyIDList:]";
    uint64_t v61 = "%s: Failed to add PASS policy for captiveagent";
    goto LABEL_83;
  }

  id v51 = v22;
  uint64_t v52 = &AnalyticsSendEventLazy_ptr;
  id v53 = +[NEProcessInfo copyUUIDsForExecutable:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForExecutable:",  @"/System/Library/Frameworks/CoreTelephony.framework/Support/CommCenter");
  if (![v53 count])
  {

LABEL_77:
    uint64_t v130 = ne_log_obj(v71, v72);
    id v32 = (void *)objc_claimAutoreleasedReturnValue(v130);
    if (!os_log_type_enabled((os_log_t)v32, OS_LOG_TYPE_ERROR)) {
      goto LABEL_34;
    }
    *(_DWORD *)int buf = 136315138;
    id v294 = "-[NEPolicySession(AlwaysOnVPN) evaluateConfigurationEssentialwithOrder:order:]";
    id v33 = "%s: addCommCenterPathWithOrder failed";
    goto LABEL_40;
  }

  uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([v51 alwaysOnVPN]);

  if (v54)
  {
    uint64_t v57 = &AnalyticsSendEventLazy_ptr;
    uint64_t v58 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", &unk_10009E7AB);
    uint64_t v288 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyResult removeNetworkAgentUUID:]( &OBJC_CLASS___NEPolicyResult,  "removeNetworkAgentUUID:",  v58));

    uint64_t v52 = &AnalyticsSendEventLazy_ptr;
  }

  else
  {
    uint64_t v288 = 0LL;
    uint64_t v57 = &AnalyticsSendEventLazy_ptr;
  }

  uint64_t v73 = ne_log_obj(v55, v56);
  uint64_t v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
  if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v305 = 136315138;
    id v306 = "-[NEPolicySession(AlwaysOnVPN) addCommCenterPathPassWithOrder:order:]";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEBUG,  "%s: Adding PASS policy for CommCenter Path",  v305,  0xCu);
  }

  __int128 v303 = 0u;
  __int128 v304 = 0u;
  __int128 v301 = 0u;
  __int128 v302 = 0u;
  id v75 = v53;
  id v76 = [v75 countByEnumeratingWithState:&v301 objects:buf count:16];
  if (!v76) {
    goto LABEL_57;
  }
  id v77 = v76;
  id v280 = v9;
  id obj = v75;
  __int128 v273 = v51;
  uint64_t v78 = *(void *)v302;
  uint64_t v79 = v292;
  while (2)
  {
    for (id i = 0LL; i != v77; id i = (char *)i + 1)
    {
      if (*(void *)v302 != v78) {
        objc_enumerationMutation(obj);
      }
      uint64_t v81 = *(void *)(*((void *)&v301 + 1) + 8LL * (void)i);
      id v82 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      id v83 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  v81));
      -[NSMutableArray addObject:](v82, "addObject:", v83);

      id v84 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition realApplication:](&OBJC_CLASS___NEPolicyCondition, "realApplication:", v81));
      -[NSMutableArray addObject:](v82, "addObject:", v84);

      uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
      -[NSMutableArray addObject:](v82, "addObject:", v85);

      uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](&OBJC_CLASS___NEPolicyCondition, "entitlement"));
      -[NSMutableArray addObject:](v82, "addObject:", v86);

      uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition ipProtocol:](&OBJC_CLASS___NEPolicyCondition, "ipProtocol:", 0LL));
      -[NSMutableArray addObject:](v82, "addObject:", v87);

      __int16 v88 = v288;
      if (v288)
      {
        id v89 = [[NEPolicy alloc] initWithOrder:v79 result:v288 conditions:v82];
        if (![(id)a1 addPolicy:v89])
        {
          unsigned int v292 = v79;
          uint64_t v129 = ne_log_obj(0LL, v90);
          __int128 v127 = (os_log_s *)objc_claimAutoreleasedReturnValue(v129);
          if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v305 = 136315138;
            id v306 = "-[NEPolicySession(AlwaysOnVPN) addCommCenterPathPassWithOrder:order:]";
            uint64_t v128 = "%s: Failed to add removeNetworkAgent policy for CommCenter path";
            goto LABEL_106;
          }

LABEL_76:
          id v9 = v280;
          goto LABEL_77;
        }

        uint64_t v79 = (v79 + 1);
      }

      id v91 = objc_alloc(&OBJC_CLASS___NEPolicy);
      uint64_t v92 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](&OBJC_CLASS___NEPolicyResult, "pass"));
      id v89 = [v91 initWithOrder:v79 result:v92 conditions:v82];

      if (![(id)a1 addPolicy:v89])
      {
        unsigned int v292 = v79;
        uint64_t v126 = ne_log_obj(0LL, v93);
        __int128 v127 = (os_log_s *)objc_claimAutoreleasedReturnValue(v126);
        __int16 v88 = v288;
        if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v305 = 136315138;
          id v306 = "-[NEPolicySession(AlwaysOnVPN) addCommCenterPathPassWithOrder:order:]";
          uint64_t v128 = "%s: Failed to add Pass policy for CommCenter path";
LABEL_106:
          _os_log_error_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_ERROR, v128, v305, 0xCu);
          goto LABEL_76;
        }

        goto LABEL_76;
      }

      uint64_t v79 = (v79 + 1);
    }

    id v77 = [obj countByEnumeratingWithState:&v301 objects:buf count:16];
    if (v77) {
      continue;
    }
    break;
  }

  unsigned int v292 = v79;
  id v9 = v280;
  uint64_t v57 = &AnalyticsSendEventLazy_ptr;
  uint64_t v52 = &AnalyticsSendEventLazy_ptr;
  id v51 = v273;
  id v75 = obj;
LABEL_57:

  id v94 = [v52[176] copyDNSUUIDs];
  if (!v94)
  {
LABEL_80:
    uint64_t v131 = ne_log_obj(v94, v95);
    id v32 = (void *)objc_claimAutoreleasedReturnValue(v131);
    if (!os_log_type_enabled((os_log_t)v32, OS_LOG_TYPE_ERROR)) {
      goto LABEL_34;
    }
    *(_DWORD *)int buf = 136315138;
    id v294 = "-[NEPolicySession(AlwaysOnVPN) evaluateConfigurationEssentialwithOrder:order:]";
    id v33 = "%s: addmDNSResponderWithOrder failed";
    goto LABEL_40;
  }

  __int128 v303 = 0u;
  __int128 v304 = 0u;
  __int128 v301 = 0u;
  __int128 v302 = 0u;
  id v96 = v94;
  id v97 = [v96 countByEnumeratingWithState:&v301 objects:buf count:16];
  if (v97)
  {
    id v98 = v97;
    id v274 = v51;
    id v277 = v10;
    id v281 = v9;
    id obja = *(id *)v302;
    uint64_t v289 = v292;
    while (2)
    {
      for (j = 0LL; j != v98; j = (char *)j + 1)
      {
        if (*(id *)v302 != obja) {
          objc_enumerationMutation(v96);
        }
        uint64_t v100 = v96;
        uint64_t v101 = *(void *)(*((void *)&v301 + 1) + 8LL * (void)j);
        uint64_t v102 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        id v103 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition effectiveApplication:]( &OBJC_CLASS___NEPolicyCondition,  "effectiveApplication:",  v101));
        -[NSMutableArray addObject:](v102, "addObject:", v103);

        uint64_t v104 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition realApplication:]( &OBJC_CLASS___NEPolicyCondition,  "realApplication:",  v101));
        -[NSMutableArray addObject:](v102, "addObject:", v104);

        int v105 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
        -[NSMutableArray addObject:](v102, "addObject:", v105);

        id v106 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](&OBJC_CLASS___NEPolicyCondition, "entitlement"));
        -[NSMutableArray addObject:](v102, "addObject:", v106);

        id v107 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition ipProtocol:](&OBJC_CLASS___NEPolicyCondition, "ipProtocol:", 0LL));
        -[NSMutableArray addObject:](v102, "addObject:", v107);

        id v108 = objc_alloc(&OBJC_CLASS___NEPolicy);
        id v109 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](&OBJC_CLASS___NEPolicyResult, "pass"));
        id v110 = [v108 initWithOrder:(char *)j + v289 result:v109 conditions:v102];
        id v111 = [(id)a1 addPolicy:v110];

        if (!v111)
        {

          id v10 = v277;
          id v9 = v281;
          goto LABEL_80;
        }

        id v96 = v100;
      }

      uint64_t v289 = (v289 + (_DWORD)j);
      id v98 = [v100 countByEnumeratingWithState:&v301 objects:buf count:16];
      if (v98) {
        continue;
      }
      break;
    }

    unsigned int v292 = v289;
    id v10 = v277;
    id v9 = v281;
    uint64_t v57 = &AnalyticsSendEventLazy_ptr;
    id v51 = v274;
  }

  id v112 = v51;
  __int128 v113 = (void *)objc_claimAutoreleasedReturnValue([v112 alwaysOnVPN]);

  id objb = v113;
  if (!v113)
  {
    id v282 = v9;
    __int128 v132 = (void *)objc_claimAutoreleasedReturnValue([v112 VPN]);
    __int128 v133 = (void *)objc_claimAutoreleasedReturnValue([v132 protocol]);
    unsigned int v134 = [v133 excludeLocalNetworks];

    if (v134)
    {
      __int128 v135 = (void *)objc_claimAutoreleasedReturnValue([v112 VPN]);
      __int128 v136 = (void *)objc_claimAutoreleasedReturnValue([v135 protocol]);
      unsigned int v137 = [v136 excludeDeviceCommunication];

      uint64_t v138 = v137 ^ 1;
      uint64_t v271 = 1LL;
    }

    else
    {
      uint64_t v138 = 0LL;
      uint64_t v271 = 0LL;
    }

    __int128 v142 = (void *)objc_claimAutoreleasedReturnValue([v112 VPN]);
    __int128 v143 = (void *)objc_claimAutoreleasedReturnValue([v142 protocol]);
    unsigned int v144 = [v143 excludeCellularServices];

    __int128 v145 = (void *)objc_claimAutoreleasedReturnValue([v112 VPN]);
    __int16 v146 = (void *)objc_claimAutoreleasedReturnValue([v145 protocol]);
    unsigned int v147 = [v146 excludeAPNs];

    __int128 v148 = (void *)objc_claimAutoreleasedReturnValue([v112 VPN]);
    __int128 v149 = (void *)objc_claimAutoreleasedReturnValue([v148 protocol]);
    unsigned int v150 = [v149 excludeDeviceCommunication];

    if (v150) {
      uint64_t v151 = 1LL;
    }
    else {
      uint64_t v151 = v138;
    }
    id v275 = (id)v151;
    id v9 = v282;
    if ((v147 | v134) == 1)
    {
      uint64_t v152 = ne_log_obj(v116, v117);
      __int128 v153 = (os_log_s *)objc_claimAutoreleasedReturnValue(v152);
      if (os_log_type_enabled(v153, OS_LOG_TYPE_INFO))
      {
        __int128 v154 = "";
        __int128 v155 = "APNS ";
        if (!v147) {
          __int128 v155 = "";
        }
        if (v134) {
          __int128 v154 = "Sharingd ";
        }
        *(_DWORD *)int buf = 136315394;
        id v294 = v155;
        __int16 v295 = 2080;
        id v296 = (const __CFString *)v154;
        _os_log_impl( (void *)&_mh_execute_header,  v153,  OS_LOG_TYPE_INFO,  "Installing VPN Service Exceptions <%s%s>",  buf,  0x16u);
      }
    }

    id v290 = (id)v144;
    if (!v147)
    {
LABEL_123:
      if (v134)
      {
        id v184 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](&OBJC_CLASS___NEPolicyResult, "pass"));
        id v185 = +[NEProcessInfo copyUUIDsForExecutable:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForExecutable:",  @"/usr/libexec/sharingd");
        uint64_t v187 = ne_log_obj(v185, v186);
        __int128 v188 = (os_log_s *)objc_claimAutoreleasedReturnValue(v187);
        unsigned int v189 = v188;
        if (!v185)
        {
          if (os_log_type_enabled(v188, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v305 = 136315394;
            id v306 = "-[NEPolicySession(AlwaysOnVPN) addSharingdExceptionWithOrder:action:]";
            __int16 v307 = 2112;
            id v308 = @"sharingd";
            _os_log_error_impl( (void *)&_mh_execute_header,  v189,  OS_LOG_TYPE_ERROR,  "%s: failed to get UUIDs for %@ daemon",  v305,  0x16u);
          }

LABEL_142:
          uint64_t v197 = ne_log_obj(v195, v196);
          unsigned __int8 v176 = (os_log_s *)objc_claimAutoreleasedReturnValue(v197);
          if (os_log_type_enabled(v176, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)int buf = 0;
            _os_log_error_impl( (void *)&_mh_execute_header,  v176,  OS_LOG_TYPE_ERROR,  "Failed to handle sharingd-8770 exception",  buf,  2u);
          }

          __int128 v113 = 0LL;
LABEL_145:
          uint64_t v141 = (uint64_t)v290;

          goto LABEL_146;
        }

        if (os_log_type_enabled(v188, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)v305 = 136315650;
          id v306 = "-[NEPolicySession(AlwaysOnVPN) addSharingdExceptionWithOrder:action:]";
          __int16 v307 = 2112;
          id v308 = v184;
          __int16 v309 = 2112;
          uint64_t v310 = @"sharingd";
          _os_log_impl( (void *)&_mh_execute_header,  v189,  OS_LOG_TYPE_INFO,  "%s: Adding %@ Exceptions policy for %@",  v305,  0x20u);
        }

        id v278 = v10;

        __int128 v303 = 0u;
        __int128 v304 = 0u;
        __int128 v301 = 0u;
        __int128 v302 = 0u;
        unsigned int v189 = (os_log_s *)v185;
        id v190 = -[os_log_s countByEnumeratingWithState:objects:count:]( v189,  "countByEnumeratingWithState:objects:count:",  &v301,  buf,  16LL);
        if (v190)
        {
          id v191 = v190;
          uint64_t v192 = *(void *)v302;
          while (2)
          {
            for (k = 0LL; k != v191; k = (char *)k + 1)
            {
              if (*(void *)v302 != v192) {
                objc_enumerationMutation(v189);
              }
              __int128 v194 = *(void **)(*((void *)&v301 + 1) + 8LL * (void)k);
              if (!sub_10005533C((void *)a1, &v292, 0LL, v194, @"8770", 1)
                || !sub_10005533C((void *)a1, &v292, 0LL, v194, @"8770", 0))
              {
                id v10 = v278;
                id v9 = v282;
                goto LABEL_142;
              }
            }

            id v191 = -[os_log_s countByEnumeratingWithState:objects:count:]( v189,  "countByEnumeratingWithState:objects:count:",  &v301,  buf,  16LL);
            if (v191) {
              continue;
            }
            break;
          }
        }

        id v10 = v278;
        id v9 = v282;
      }

      __int128 v113 = 0LL;
      goto LABEL_138;
    }

    __int128 v156 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](&OBJC_CLASS___NEPolicyResult, "pass"));
    id v157 = +[NEProcessInfo copyUUIDsForExecutable:]( &OBJC_CLASS___NEProcessInfo,  "copyUUIDsForExecutable:",  @"/System/Library/PrivateFrameworks/ApplePushService.framework/apsd");
    uint64_t v159 = ne_log_obj(v157, v158);
    uint64_t v160 = (os_log_s *)objc_claimAutoreleasedReturnValue(v159);
    __int16 v161 = v160;
    if (v157)
    {
      if (os_log_type_enabled(v160, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 136315650;
        id v294 = "-[NEPolicySession(AlwaysOnVPN) addAPSDExceptionWithOrder:action:]";
        __int16 v295 = 2112;
        id v296 = v156;
        __int16 v297 = 2112;
        v298 = @"APSD";
        _os_log_impl( (void *)&_mh_execute_header,  v161,  OS_LOG_TYPE_INFO,  "%s: Adding %@ Exceptions policy for %@",  buf,  0x20u);
      }

      uint64_t v162 = sub_100054464((void *)a1, &v292, 1, 0LL, v157, 1, 0LL, 0, 0LL, 0, 0LL, v156, 0LL, 0, 0LL);
      if ((v162 & 1) != 0)
      {

LABEL_122:
        goto LABEL_123;
      }

      uint64_t v180 = ne_log_obj(v162, v163);
      __int16 v161 = (os_log_s *)objc_claimAutoreleasedReturnValue(v180);
      if (!os_log_type_enabled(v161, OS_LOG_TYPE_ERROR))
      {
LABEL_120:

        uint64_t v183 = ne_log_obj(v181, v182);
        __int128 v156 = (__CFString *)objc_claimAutoreleasedReturnValue(v183);
        if (os_log_type_enabled((os_log_t)v156, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int buf = 0;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v156,  OS_LOG_TYPE_ERROR,  "Failed to handle apsd exception",  buf,  2u);
        }

        goto LABEL_122;
      }

      *(_DWORD *)int buf = 136315650;
      id v294 = "-[NEPolicySession(AlwaysOnVPN) addAPSDExceptionWithOrder:action:]";
      __int16 v295 = 2112;
      id v296 = v156;
      __int16 v297 = 2112;
      v298 = @"APSD";
      uint64_t v177 = "%s: Failed to add %@ policy for %@";
      id v178 = v161;
      uint32_t v179 = 32;
    }

    else
    {
      if (!os_log_type_enabled(v160, OS_LOG_TYPE_ERROR)) {
        goto LABEL_120;
      }
      *(_DWORD *)int buf = 136315394;
      id v294 = "-[NEPolicySession(AlwaysOnVPN) addAPSDExceptionWithOrder:action:]";
      __int16 v295 = 2112;
      id v296 = @"APSD";
      uint64_t v177 = "%s: failed to get UUIDs for %@ daemon";
      id v178 = v161;
      uint32_t v179 = 22;
    }

    _os_log_error_impl((void *)&_mh_execute_header, v178, OS_LOG_TYPE_ERROR, v177, buf, v179);
    goto LABEL_120;
  }

  __int128 v114 = (void *)objc_claimAutoreleasedReturnValue([v112 alwaysOnVPN]);
  __int128 v115 = (void *)objc_claimAutoreleasedReturnValue([v114 serviceExceptions]);

  if (v115)
  {
    uint64_t v118 = ne_log_obj(v116, v117);
    id v119 = (os_log_s *)objc_claimAutoreleasedReturnValue(v118);
    if (os_log_type_enabled(v119, OS_LOG_TYPE_INFO))
    {
      __int128 v120 = (void *)objc_claimAutoreleasedReturnValue([v112 alwaysOnVPN]);
      id v121 = (char *)objc_claimAutoreleasedReturnValue([v120 serviceExceptions]);
      *(_DWORD *)int buf = 138412290;
      id v294 = v121;
      _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_INFO, "Service Exceptions %@", buf, 0xCu);
    }

    id v122 = v112;
    objc_opt_self(&OBJC_CLASS___NEPolicySession);
    __int128 v123 = (void *)objc_claimAutoreleasedReturnValue([v122 alwaysOnVPN]);

    int v124 = (void *)objc_claimAutoreleasedReturnValue([v123 serviceExceptions]);
    __int128 v125 = (void *)objc_claimAutoreleasedReturnValue([v124 objectForKeyedSubscript:@"AirPrint"]);

    if (v125) {
      uint64_t v271 = (uint64_t)[v125 action];
    }
    else {
      uint64_t v271 = 0LL;
    }

    id v290 = sub_100057888((uint64_t)&OBJC_CLASS___NEPolicySession, v122);
    id v164 = v122;
    objc_opt_self(&OBJC_CLASS___NEPolicySession);
    __int16 v165 = (void *)objc_claimAutoreleasedReturnValue([v164 alwaysOnVPN]);

    unsigned int v166 = (void *)objc_claimAutoreleasedReturnValue([v165 serviceExceptions]);
    __int16 v167 = (void *)objc_claimAutoreleasedReturnValue([v166 objectForKeyedSubscript:@"DeviceCommunication"]);

    if (v167) {
      id v168 = [v167 action];
    }
    else {
      id v168 = 0LL;
    }

    id v169 = (void *)objc_claimAutoreleasedReturnValue([v164 alwaysOnVPN]);
    uint64_t v170 = (void *)objc_claimAutoreleasedReturnValue([v169 serviceExceptions]);
    id v171 = (void *)objc_claimAutoreleasedReturnValue([v170 objectForKeyedSubscript:@"AirDrop"]);
    id v275 = v168;
    if (v171)
    {

      goto LABEL_114;
    }

    id v172 = (void *)objc_claimAutoreleasedReturnValue([v164 alwaysOnVPN]);
    id v173 = (void *)objc_claimAutoreleasedReturnValue([v172 serviceExceptions]);
    id v174 = (void *)objc_claimAutoreleasedReturnValue([v173 objectForKeyedSubscript:@"AirPlay"]);

    if (v174)
    {
LABEL_114:
      uint64_t v175 = ne_log_obj(v116, v117);
      unsigned __int8 v176 = (os_log_s *)objc_claimAutoreleasedReturnValue(v175);
      if (os_log_type_enabled(v176, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315138;
        id v294 = "-[NEPolicySession(AlwaysOnVPN) addServiceExceptionsWithOrder:configuration:IMSUseIPSec:dropAllLevel:]";
        _os_log_error_impl( (void *)&_mh_execute_header,  v176,  OS_LOG_TYPE_ERROR,  "%s: AirDrop / AirPlay Service Exception not supported yet",  buf,  0xCu);
      }

      __int128 v113 = objb;
      goto LABEL_145;
    }

    __int128 v113 = objb;
LABEL_138:
    uint64_t v141 = (uint64_t)v290;
LABEL_146:
    if (v275 == (id)1 && (uint64_t v116 = sub_100056EA8((void *)a1, &v292), (v116 & 1) == 0))
    {
      uint64_t v198 = ne_log_obj(v116, v117);
      id v199 = (os_log_s *)objc_claimAutoreleasedReturnValue(v198);
      uint64_t v57 = &AnalyticsSendEventLazy_ptr;
      if (os_log_type_enabled(v199, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_error_impl( (void *)&_mh_execute_header,  v199,  OS_LOG_TYPE_ERROR,  "Failed to handle device communication exception",  buf,  2u);
      }

      id v139 = v112;
    }

    else
    {
      id v139 = v112;
      uint64_t v57 = &AnalyticsSendEventLazy_ptr;
    }

    uint64_t v140 = v271;
  }

  else
  {
    id v139 = v112;
    uint64_t v140 = 0LL;
    uint64_t v141 = 0LL;
  }

  uint64_t v200 = v140;
  if (!(v140 | v141))
  {
    unsigned int v208 = v139;
    goto LABEL_204;
  }

  uint64_t v201 = ne_log_obj(v116, v117);
  uint64_t v202 = (os_log_s *)objc_claimAutoreleasedReturnValue(v201);
  if (os_log_type_enabled(v202, OS_LOG_TYPE_INFO))
  {
    uint64_t v203 = "";
    id v204 = "AirPrint ";
    if (!v200) {
      id v204 = "";
    }
    if (v141) {
      uint64_t v203 = "CellularServices ";
    }
    *(_DWORD *)int buf = 136315394;
    id v294 = v204;
    __int16 v295 = 2080;
    id v296 = (const __CFString *)v203;
    _os_log_impl( (void *)&_mh_execute_header,  v202,  OS_LOG_TYPE_INFO,  "Installing VPN Service Exceptions <%s%s>",  buf,  0x16u);
  }

  if (v200 == 2)
  {
    id v279 = v10;
    id v283 = v9;
    uint64_t v213 = objc_claimAutoreleasedReturnValue([v57[172] drop]);
    id v276 = 0LL;
    unsigned int v208 = v139;
    goto LABEL_170;
  }

  BOOL v207 = v200 == 1;
  unsigned int v208 = v139;
  if (!v207) {
    goto LABEL_204;
  }
  uint64_t v209 = ne_log_obj(v205, v206);
  id v210 = (os_log_s *)objc_claimAutoreleasedReturnValue(v209);
  if (os_log_type_enabled(v210, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 136315138;
    id v294 = "-[NEPolicySession(AlwaysOnVPN) addAirPrintExceptionWithOrder:action:isAOVPN:]";
    _os_log_debug_impl( (void *)&_mh_execute_header,  v210,  OS_LOG_TYPE_DEBUG,  "%s: Adding pass policy for Bonjour traffic",  buf,  0xCu);
  }

  uint64_t v211 = sub_1000556E4((void *)a1, &v292);
  if ((v211 & 1) != 0)
  {
    id v279 = v10;
    id v283 = v9;
    uint64_t v213 = objc_claimAutoreleasedReturnValue([v57[172] pass]);
    if (v113)
    {
      id v214 = v57[172];
      __int128 v215 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", &unk_10009E7AB);
      id v276 = (__CFString *)objc_claimAutoreleasedReturnValue([v214 removeNetworkAgentUUID:v215]);
    }

    else
    {
      id v276 = 0LL;
    }

LABEL_170:
    uint64_t v291 = v141;
    __int128 v216 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition allInterfaces](&OBJC_CLASS___NEPolicyCondition, "allInterfaces"));
    *(void *)&__int128 v301 = v216;
    unsigned int v217 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyCondition entitlement](&OBJC_CLASS___NEPolicyCondition, "entitlement"));
    *((void *)&v301 + 1) = v217;
    uint64_t v218 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyCondition accountIdentifier:]( &OBJC_CLASS___NEPolicyCondition,  "accountIdentifier:",  @"com.apple.PrintKit.PrinterTool"));
    *(void *)&__int128 v302 = v218;
    uint64_t v219 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v301, 3LL));

    id v220 = objc_alloc(&OBJC_CLASS___NEPolicy);
    uint64_t v221 = v292;
    id v270 = [v220 initWithOrder:v292 result:v213 conditions:v219];
    uint64_t v223 = ne_log_obj(v270, v222);
    id v224 = (os_log_s *)objc_claimAutoreleasedReturnValue(v223);
    if (os_log_type_enabled(v224, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136315906;
      id v294 = "-[NEPolicySession(AlwaysOnVPN) addAirPrintExceptionWithOrder:action:isAOVPN:]";
      __int16 v295 = 2112;
      id v296 = v276;
      __int16 v297 = 2080;
      v298 = "com.apple.PrintKit.PrinterTool";
      __int16 v299 = 1024;
      int v300 = 0;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v224,  OS_LOG_TYPE_DEBUG,  "%s: Adding policy %@ for account id %s (priority %d)",  buf,  0x26u);
    }

    id v225 = (char *)[[NEPolicy alloc] initWithOrder:v221 result:v276 conditions:v219];
    id v226 = [(id)a1 addPolicy:v225];
    uint64_t is_debug_logging_enabled = nelog_is_debug_logging_enabled();
    int v228 = is_debug_logging_enabled;
    uint64_t v230 = ne_log_obj(is_debug_logging_enabled, v229);
    uint64_t v231 = (os_log_s *)objc_claimAutoreleasedReturnValue(v230);
    id v232 = v231;
    __int128 v272 = (void *)v219;
    if (v226)
    {
      id v9 = v283;
      if (v228)
      {
        if (os_log_type_enabled(v231, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 138412290;
          id v294 = v225;
          _os_log_debug_impl((void *)&_mh_execute_header, v232, OS_LOG_TYPE_DEBUG, "Added policy: %@", buf, 0xCu);
        }
      }

      else if (os_log_type_enabled(v231, OS_LOG_TYPE_INFO))
      {
        id v235 = (char *)objc_claimAutoreleasedReturnValue([v225 descriptionWithIndent:0 options:2]);
        *(_DWORD *)int buf = 138412290;
        id v294 = v235;
        _os_log_impl((void *)&_mh_execute_header, v232, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);
      }

      unsigned int v292 = v221 + 1;
      uint64_t v238 = ne_log_obj(v236, v237);
      id v239 = (os_log_s *)objc_claimAutoreleasedReturnValue(v238);
      if (os_log_type_enabled(v239, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136315906;
        id v294 = "-[NEPolicySession(AlwaysOnVPN) addAirPrintExceptionWithOrder:action:isAOVPN:]";
        __int16 v295 = 2112;
        id v296 = (const __CFString *)v213;
        __int16 v297 = 2080;
        v298 = "com.apple.PrintKit.PrinterTool";
        __int16 v299 = 1024;
        int v300 = 0;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v239,  OS_LOG_TYPE_DEBUG,  "%s: Adding policy %@ for account id %s (priority %d)",  buf,  0x26u);
      }

      id v225 = (char *)[[NEPolicy alloc] initWithOrder:(v221 + 1) result:v213 conditions:v272];
      id v240 = [(id)a1 addPolicy:v225];
      uint64_t v241 = nelog_is_debug_logging_enabled();
      int v242 = v241;
      uint64_t v244 = ne_log_obj(v241, v243);
      id v245 = (os_log_s *)objc_claimAutoreleasedReturnValue(v244);
      id v232 = v245;
      if (v240)
      {
        __int128 v246 = (void *)v213;
        id v10 = v279;
        if (v242)
        {
          if (os_log_type_enabled(v245, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 138412290;
            id v294 = v225;
            _os_log_debug_impl((void *)&_mh_execute_header, v232, OS_LOG_TYPE_DEBUG, "Added policy: %@", buf, 0xCu);
          }
        }

        else if (os_log_type_enabled(v245, OS_LOG_TYPE_INFO))
        {
          __int128 v248 = (char *)objc_claimAutoreleasedReturnValue([v225 descriptionWithIndent:0 options:2]);
          *(_DWORD *)int buf = 138412290;
          id v294 = v248;
          _os_log_impl((void *)&_mh_execute_header, v232, OS_LOG_TYPE_INFO, "Added policy: %@", buf, 0xCu);
        }

        unsigned int v292 = v221 + 2;
        __int128 v113 = objb;
        uint64_t v141 = v291;
        goto LABEL_204;
      }

      id v234 = (void *)v213;
      BOOL v247 = os_log_type_enabled(v245, OS_LOG_TYPE_ERROR);
      if (v242)
      {
        if (v247)
        {
          *(_DWORD *)int buf = 138412290;
          id v294 = v225;
          _os_log_error_impl( (void *)&_mh_execute_header,  v232,  OS_LOG_TYPE_ERROR,  "Failed to add policy: %@",  buf,  0xCu);
        }
      }

      else if (v247)
      {
        __int128 v269 = (char *)objc_claimAutoreleasedReturnValue([v225 descriptionWithIndent:0 options:2]);
        *(_DWORD *)int buf = 138412290;
        id v294 = v269;
        _os_log_error_impl((void *)&_mh_execute_header, v232, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);
      }
    }

    else
    {
      BOOL v233 = os_log_type_enabled(v231, OS_LOG_TYPE_ERROR);
      id v234 = (void *)v213;
      if (v228)
      {
        if (v233)
        {
          *(_DWORD *)int buf = 138412290;
          id v294 = v225;
          _os_log_error_impl( (void *)&_mh_execute_header,  v232,  OS_LOG_TYPE_ERROR,  "Failed to add policy: %@",  buf,  0xCu);
        }
      }

      else if (v233)
      {
        __int128 v268 = (char *)objc_claimAutoreleasedReturnValue([v225 descriptionWithIndent:0 options:2]);
        *(_DWORD *)int buf = 138412290;
        id v294 = v268;
        _os_log_error_impl((void *)&_mh_execute_header, v232, OS_LOG_TYPE_ERROR, "Failed to add policy: %@", buf, 0xCu);
      }

      id v9 = v283;
    }

    id v10 = v279;

    __int128 v113 = objb;
    uint64_t v141 = v291;
  }

  uint64_t v249 = ne_log_obj(v211, v212);
  v250 = (os_log_s *)objc_claimAutoreleasedReturnValue(v249);
  if (os_log_type_enabled(v250, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int buf = 0;
    _os_log_error_impl( (void *)&_mh_execute_header,  v250,  OS_LOG_TYPE_ERROR,  "Failed to handle AirPrint exception",  buf,  2u);
  }

LABEL_204:
  uint64_t v251 = sub_1000579B0((void *)a1, &v292, v141, 0, v113 != 0LL);
  if ((v251 & 1) != 0)
  {
    if (v287)
    {
      uint64_t v253 = 2LL;
      if (v141 == 1) {
        uint64_t v253 = 3LL;
      }
      *int v287 = v253;
    }
  }

  else
  {
    uint64_t v254 = ne_log_obj(v251, v252);
    __int16 v255 = (os_log_s *)objc_claimAutoreleasedReturnValue(v254);
    if (os_log_type_enabled(v255, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v255,  OS_LOG_TYPE_ERROR,  "Failed to handle CellularServices exception - Control",  buf,  2u);
    }
  }

  id v256 = (void *)objc_claimAutoreleasedReturnValue([v208 alwaysOnVPN]);
  if (v256)
  {
    id v257 = (void *)objc_claimAutoreleasedReturnValue([v208 alwaysOnVPN]);
    int v258 = [v257 isAllowCaptiveWebSheet];

    uint64_t v259 = (void *)objc_claimAutoreleasedReturnValue([v208 alwaysOnVPN]);
    char v260 = [v259 isAllowAllCaptiveNetworkPlugins];

    id v261 = (void *)objc_claimAutoreleasedReturnValue([v208 alwaysOnVPN]);
    id v256 = (void *)objc_claimAutoreleasedReturnValue([v261 allowedCaptiveNetworkPlugins]);
  }

  else
  {
    char v260 = 1;
    int v258 = 1;
  }

  __int16 v262 = (void *)objc_claimAutoreleasedReturnValue([v208 alwaysOnVPN]);
  BOOL v263 = sub_10005856C((void *)a1, v10, &v292, v258, v260, v256, 0LL, v262 != 0LL, 0LL, 1u, 1u);

  if (v263)
  {

    a1 = 1LL;
    goto LABEL_38;
  }

  uint64_t v266 = ne_log_obj(v264, v265);
  id v267 = (os_log_s *)objc_claimAutoreleasedReturnValue(v266);
  if (os_log_type_enabled(v267, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 136315138;
    id v294 = "-[NEPolicySession(AlwaysOnVPN) evaluateConfiguration:startOrder:IMSUseIPSec:dropAllLevel:captiveNetworkPlugins:]";
    _os_log_error_impl( (void *)&_mh_execute_header,  v267,  OS_LOG_TYPE_ERROR,  "%s: addAllowedCaptiveNetworkPluginsToPolicySession failed",  buf,  0xCu);
  }

LABEL_37:
  a1 = 0LL;
LABEL_38:

  return a1;
}

BOOL sub_10005B15C(void *a1, void *a2, unsigned int a3, uint64_t *a4)
{
  id v7 = a2;
  uint64_t v8 = v7;
  if (a1)
  {
    unsigned int v52 = a3;
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 alwaysOnVPN]);

    if (v9)
    {
      uint64_t v10 = (uint64_t)sub_10005791C((uint64_t)&OBJC_CLASS___NEPolicySession, v8);
      uint64_t v11 = (uint64_t)sub_100057888((uint64_t)&OBJC_CLASS___NEPolicySession, v8);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v8 alwaysOnVPN]);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 applicationExceptions]);
    }

    else
    {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v8 VPN]);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 protocol]);
      unsigned int v16 = [v15 excludeCellularServices];

      uint64_t v11 = v16;
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v8 VPN]);
      char v18 = (void *)objc_claimAutoreleasedReturnValue([v17 protocol]);
      unsigned int v19 = [v18 excludeLocalNetworks];
      uint64_t v20 = &off_1000C19C0;
      if (v19) {
        uint64_t v20 = 0LL;
      }
      id v21 = v20;

      id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](&OBJC_CLASS___NEPolicyResult, "pass"));
      sub_10005B5D8(a1, a3, v21, v12, 0LL);

      id v13 = 0LL;
      uint64_t v10 = v11;
    }

    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[NEPolicyResult pass](&OBJC_CLASS___NEPolicyResult, "pass"));
    BOOL v23 = sub_1000549EC((BOOL)a1, &v52, v22, 0LL);

    if (!v23)
    {
      uint64_t v26 = ne_log_obj(v24, v25);
      uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_error_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "Failed to add icmpv6 exception - policies at High Priority",  buf,  2u);
      }
    }

    if (v10 | v11)
    {
      uint64_t v28 = ne_log_obj(v24, v25);
      uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        uint64_t v30 = "";
        uint64_t v31 = "VoiceMail ";
        if (!v10) {
          uint64_t v31 = "";
        }
        if (v11) {
          uint64_t v30 = "CellularServices ";
        }
        *(_DWORD *)int buf = 136315394;
        uint64_t v54 = v31;
        __int16 v55 = 2080;
        uint64_t v56 = v30;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_INFO,  "Installing VPN Service Exceptions - policies at High Priority <%s%s>",  buf,  0x16u);
      }
    }

    uint64_t v32 = sub_100055BA4(a1, &v52, v10, 1, v9 != 0LL, 0LL);
    if ((v32 & 1) == 0)
    {
      uint64_t v34 = ne_log_obj(v32, v33);
      id v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_error_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "Failed to handle VoiceMail exception - policies at High Priority",  buf,  2u);
      }
    }

    uint64_t v36 = sub_1000579B0(a1, &v52, v11, 1, v9 != 0LL);
    if ((v36 & 1) != 0)
    {
      if (a4)
      {
        uint64_t v38 = 2LL;
        if (v11 == 1) {
          uint64_t v38 = 3LL;
        }
        *a4 = v38;
      }
    }

    else
    {
      uint64_t v39 = ne_log_obj(v36, v37);
      char v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_error_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_ERROR,  "Failed to handle CellularServices exception - policies at High Priority",  buf,  2u);
      }
    }

    if (v13)
    {
      id v41 = [v13 count];
      if (v41)
      {
        uint64_t v43 = ne_log_obj(v41, v42);
        uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)int buf = 138412290;
          uint64_t v54 = (const char *)v13;
          _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_INFO,  "Installing VPN Application Exceptions - policies at High Priority %@",  buf,  0xCu);
        }

        uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v8 alwaysOnVPN]);
        char v46 = sub_100056200(a1, &v52, v13, 0LL, 400LL, v45 != 0LL, 0LL);

        if ((v46 & 1) == 0)
        {
          uint64_t v49 = ne_log_obj(v47, v48);
          uint64_t v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
          if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)int buf = 0;
            _os_log_error_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_ERROR,  "Failed to add application exceptions- policies at High Priority",  buf,  2u);
          }
        }
      }
    }
  }

  return a1 != 0LL;
}

void sub_10005B5D8(void *a1, unsigned int a2, void *a3, void *a4, void *a5)
{
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  uint64_t v56 = a1;
  if (!a1) {
    goto LABEL_18;
  }
  uint64_t v57 = 0LL;
  uint64_t v12 = nwi_state_copy();
  uint64_t v13 = v12;
  if (!v12)
  {
    LODWORD(v15) = 0;
    goto LABEL_8;
  }

  uint64_t interface_names = nwi_state_get_interface_names(v12, 0LL, 0LL);
  uint64_t v15 = interface_names;
  if (!(_DWORD)interface_names)
  {
LABEL_8:
    unsigned int v16 = 0LL;
    goto LABEL_9;
  }

  unsigned int v16 = calloc(interface_names, 8uLL);
  if (v16)
  {
    LODWORD(v15) = nwi_state_get_interface_names(v13, v16, v15);
    if ((_DWORD)v15) {
      goto LABEL_9;
    }
    free(v16);
    goto LABEL_8;
  }

  LODWORD(v15) = 0;
LABEL_9:
  id v17 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  if (v9 && [v9 count]) {
    -[NSMutableDictionary addEntriesFromDictionary:](v17, "addEntriesFromDictionary:", v9);
  }
  if (getifaddrs(&v57))
  {
    if (!v16) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }

  unsigned int v53 = a2;
  unsigned int v19 = v57;
  if (!v57)
  {
    char v46 = 0LL;
LABEL_51:
    freeifaddrs(v46);
    if (!v16) {
      goto LABEL_15;
    }
LABEL_14:
    free(v16);
LABEL_15:
    if (v13) {
      nwi_state_release(v13);
    }
    goto LABEL_17;
  }

  uint64_t v54 = v11;
  id v50 = v9;
  if ((_DWORD)v15) {
    BOOL v20 = v16 == 0LL;
  }
  else {
    BOOL v20 = 1;
  }
  int v21 = !v20;
  uint64_t v22 = v15;
  *(void *)&__int128 v18 = 138412290LL;
  __int128 v49 = v18;
  uint64_t v51 = v15;
  id v52 = v10;
  while (1)
  {
    ifa_name = v19->ifa_name;
    if (ifa_name && *ifa_name)
    {
      int sa_family = v19->ifa_addr->sa_family;
      if (sa_family == 30 || sa_family == 2)
      {
        uint64_t v26 = v22;
        uint64_t v27 = (const char **)v16;
        if (v21)
        {
          while (strcmp(ifa_name, *v27))
          {
            ++v27;
            if (!--v26) {
              goto LABEL_37;
            }
          }

          goto LABEL_47;
        }

id sub_10005CC68(uint64_t a1, const char *a2)
{
  id result = *(id *)(a1 + 32);
  if (result)
  {
    id result = objc_getProperty(result, a2, 16LL, 1);
    if (result) {
      return [*(id *)(a1 + 32) handleTimeout];
    }
  }

  return result;
}

void sub_10005D3B0(void *a1, const char *a2)
{
  if (a1)
  {
    id v3 = objc_msgSend(objc_getProperty(a1, a2, 16, 1), "restartPending");
    if ((_DWORD)v3)
    {
      uint64_t v5 = ne_log_obj(v3, v4);
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        id v7 = (objc_class *)objc_opt_class(a1);
        uint64_t v8 = NSStringFromClass(v7);
        id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
        int v20 = 138412546;
        int v21 = a1;
        __int16 v22 = 2112;
        BOOL v23 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%@ in state %@: restarting",  (uint8_t *)&v20,  0x16u);
      }

      objc_msgSend(objc_getProperty(a1, v10, 16, 1), "setRestartPending:", 0);
      id Property = objc_getProperty(a1, v11, 16LL, 1);
      BOOL v14 = sub_100071F00(Property, v13);
      id v16 = objc_getProperty(a1, v15, 16LL, 1);
      if (v14)
      {
        uint64_t v17 = 2LL;
      }

      else
      {
        [v16 setLastStopReason:6];
        id v16 = objc_getProperty(a1, v19, 16LL, 1);
        uint64_t v17 = 1LL;
      }

      sub_1000714E4((id *)v16, (const char *)v17);
    }

    else
    {
      __int128 v18 = (id *)objc_getProperty(a1, v4, 16LL, 1);
      sub_1000714E4(v18, (const char *)1);
    }
  }

void sub_10005D540(uint64_t a1, const char *a2)
{
}

void sub_10005EDB0(_Unwind_Exception *a1)
{
}

void sub_10005EE28(uint64_t a1)
{
  if (qword_1000CFBE0 != -1) {
    dispatch_once(&qword_1000CFBE0, &stru_1000BE370);
  }
  uint64_t v2 = *(void (**)(uint64_t, void))(qword_1000CFBD8 + 168);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3) {
      uint64_t v4 = *(void *)(v3 + 368);
    }
    else {
      uint64_t v4 = 0LL;
    }
    v2(v4, *(void *)(a1 + 40));
  }

void sub_10005EEA8(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v2 = a2;
    Maiid n = CFRunLoopGetMain();
    CFRunLoopPerformBlock(Main, kCFRunLoopDefaultMode, v2);

    uint64_t v4 = CFRunLoopGetMain();
    CFRunLoopWakeUp(v4);
  }

void sub_10005EEF0(id a1)
{
  id v1 = CFURLCreateFromFileSystemRepresentation( kCFAllocatorDefault,  (const UInt8 *)"/System/Library/SystemConfiguration/PPPController.bundle",  56LL,  0);
  id v2 = CFBundleCreate(kCFAllocatorDefault, v1);
  qword_1000CFBE8 = (uint64_t)v2;
  if (!v2)
  {
    uint64_t v6 = ne_log_obj(0LL, v3);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    if (!os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_ERROR))
    {
LABEL_7:

      goto LABEL_8;
    }

    LOWORD(v10[0]) = 0;
    uint64_t v8 = "Failed to create a CFBundle for PPPController.bundle";
LABEL_10:
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v7, OS_LOG_TYPE_ERROR, v8, (uint8_t *)v10, 2u);
    goto LABEL_7;
  }

  DataPointerForName = (uint64_t (*)(_OWORD *, uint64_t))CFBundleGetDataPointerForName( v2,  @"ne_sm_bridge_copy_functions");
  if (!DataPointerForName)
  {
    uint64_t v9 = ne_log_obj(0LL, v5);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v9);
    if (!os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_7;
    }
    LOWORD(v10[0]) = 0;
    uint64_t v8 = "Failed to get the copy functions function pointer from PPPController.bundle";
    goto LABEL_10;
  }

  v10[2] = *(_OWORD *)off_1000BE3B0;
  v10[3] = *(_OWORD *)off_1000BE3C0;
  void v10[4] = *(_OWORD *)off_1000BE3D0;
  void v10[5] = *(_OWORD *)off_1000BE3E0;
  v10[0] = *(_OWORD *)&off_1000BE390;
  v10[1] = *(_OWORD *)off_1000BE3A0;
  qword_1000CFBD8 = DataPointerForName(v10, qword_1000CFBE8);
LABEL_8:
  CFRelease(v1);
}

void sub_10005F01C(int a1, CFStringRef format, va_list arguments)
{
  uint64_t v4 = CFStringCreateWithFormatAndArguments(kCFAllocatorDefault, 0LL, format, arguments);
  CFIndex Length = CFStringGetLength(v4);
  CFIndex v6 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  id v7 = (char *)malloc(v6);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t CString = CFStringGetCString(v4, v7, v6, 0x8000100u);
    if ((_DWORD)CString)
    {
      if (a1 <= 3)
      {
        uint64_t v11 = ne_log_obj(CString, v10);
        uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          int v18 = 136315138;
          SEL v19 = v8;
          _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v18, 0xCu);
        }

        goto LABEL_16;
      }

      if (a1 <= 5)
      {
        uint64_t v13 = ne_log_obj(CString, v10);
        uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          int v18 = 136315138;
          SEL v19 = v8;
          BOOL v14 = v12;
          os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
LABEL_12:
          _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s", (uint8_t *)&v18, 0xCu);
          goto LABEL_16;
        }

        goto LABEL_16;
      }

      if (a1 == 6)
      {
        uint64_t v16 = ne_log_obj(CString, v10);
        uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          int v18 = 136315138;
          SEL v19 = v8;
          BOOL v14 = v12;
          os_log_type_t v15 = OS_LOG_TYPE_INFO;
          goto LABEL_12;
        }

uint64_t sub_10005F240(int a1)
{
  if (a1 < 6) {
    return 1LL;
  }
  if (a1 == 6) {
    return nelog_is_info_logging_enabled();
  }
  return nelog_is_debug_logging_enabled();
}

NSMutableDictionary *sub_10005F26C(void *a1)
{
  id Property = a1;
  uint64_t v4 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v3, 360LL, 1);
  }
  uint64_t v5 = Property;
  CFIndex v6 = (NSMutableDictionary *)[v5 copyLegacyDictionary];
  if ([v5 type] != (id)2)
  {
    if ([v5 type] != (id)1) {
      goto LABEL_32;
    }
    v48[0] = kSCPropNetIPSecXAuthPassword;
    v48[1] = kSCPropNetIPSecXAuthPasswordEncryption;
    v48[2] = kSCPropNetIPSecSharedSecret;
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v48, 3LL));
    -[NSMutableDictionary removeObjectsForKeys:](v6, "removeObjectsForKeys:", v24);

    if (v4 && v4[88] == 2)
    {
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v4 configuration]);
      id v1 = (void *)objc_claimAutoreleasedReturnValue([v24 appVPN]);
      if ([v1 isOnDemandEnabled])
      {

        goto LABEL_29;
      }

      int v25 = 1;
    }

    else
    {
      int v25 = 0;
    }

    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v4 configuration]);
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 VPN]);
    unsigned int v28 = [v27 isOnDemandEnabled];

    if (v25)
    {

      if ((v28 & 1) == 0)
      {
LABEL_30:
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v4 configuration]);
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v29 payloadInfo]);
        uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v30 profileIdentifier]);

        if (v31)
        {
          uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v4 configuration]);
          uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v32 payloadInfo]);
          uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v33 profileIdentifier]);
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v6,  "setObject:forKeyedSubscript:",  v34,  @"ProfileIdentifier");
        }

LABEL_32:
        uint64_t v8 = v6;
        if (!v6) {
          goto LABEL_34;
        }
        goto LABEL_33;
      }
    }

    else if (!v28)
    {
      goto LABEL_30;
    }

LABEL_33:
  if (self) {
    uint64_t v43 = objc_getProperty(self, v28, 16LL, 1);
  }
  else {
    uint64_t v43 = 0LL;
  }
  int v44 = (_DWORD *)objc_claimAutoreleasedReturnValue([v43 primaryTunnelPlugin]);
  if (!v44 || (char v46 = v44[16], v44, !v46))
  {
    BOOL v47 = ne_log_obj(v44, v45);
    uint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      if (self) {
        id v50 = objc_getProperty(self, v49, 16LL, 1);
      }
      else {
        id v50 = 0LL;
      }
      uint64_t v51 = (objc_class *)objc_opt_class(self);
      id v52 = NSStringFromClass(v51);
      unsigned int v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
      uint64_t v56 = 138412546;
      uint64_t v57 = v50;
      uint64_t v58 = 2112;
      id v59 = v53;
      _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "%@ in state %@: plugin already disconnected, disposing all plugins",  (uint8_t *)&v56,  0x16u);
    }

    if (self) {
      __int16 v55 = objc_getProperty(self, v54, 16LL, 1);
    }
    else {
      __int16 v55 = 0LL;
    }
    [v55 setState:8];
  }
}

      [*(id *)(v3 + 32) setMatchedRule:v17];
      sub_1000775B0(*(id *)(v3 + 32));
      [*(id *)(v3 + 32) notifyChangedExtendedStatus];
      goto LABEL_33;
    }
  }

  if ((v8 & 1) == 0)
  {
    int v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v3 + 32) onDemandMonitor]);

    if (v18)
    {
      int v21 = ne_log_obj(v19, v20);
      id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        id v23 = *(void *)(v3 + 32);
        *(_DWORD *)int buf = 138412290;
        uint64_t v72 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%@: Disabling VPN On Demand", buf, 0xCu);
      }

      sub_10007C13C(*(void **)(v3 + 32));
      else {
        uint64_t v24 = 0LL;
      }
      uint64_t v37 = objc_claimAutoreleasedReturnValue([*(id *)(v3 + 32) matchedRule]);
      if (v37 | v24)
      {
        int v38 = (void *)v37;
        uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v3 + 32) matchedRule]);
        uint64_t v40 = [v39 isEqual:v24];

        if ((v40 & 1) == 0)
        {
          [*(id *)(v3 + 32) setMatchedRule:v24];
          sub_1000775B0(*(id *)(v3 + 32));
          [*(id *)(v3 + 32) notifyChangedExtendedStatus];
        }

        goto LABEL_71;
      }

          goto LABEL_33;
        }

        uint64_t v31 = objc_msgSend(objc_getProperty(a1, v30, 360, 1), "objectAtIndexedSubscript:", 0);
        uint64_t v32 = (id)objc_claimAutoreleasedReturnValue(v31);
        uint64_t v34 = v32 == objc_getProperty(v8, v33, 24LL, 1);

        id v36 = objc_msgSend(objc_getProperty(a1, v35, 360, 1), "objectAtIndexedSubscript:", v34);
        uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
        if (v37)
        {
          int v38 = v37[4];

          if ((unint64_t)(v38 - 3) < 3)
          {
            id Property = objc_getProperty(v8, v40, 24LL, 1);
            if (Property) {
              id Property = objc_getProperty(Property, v42, 24LL, 1);
            }
            uint64_t v43 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([Property queue]);
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472LL;
            block[2] = sub_100083B08;
            block[3] = &unk_1000BEC08;
            int v44 = v8;
            uint64_t v54 = v44;
            dispatch_async(v43, block);

            char v46 = objc_getProperty(v44, v45, 24LL, 1);
            if (v46) {
              void v46[4] = 1LL;
            }
            objc_msgSend(objc_getProperty(a1, v47, 408, 1), "removeObject:", v44);
            uint64_t v48 = v54;
            goto LABEL_32;
          }

          if (v38 != 2)
          {
            if (v38 != 1) {
              goto LABEL_33;
            }
            a1[50] = 2LL;
            id v50 = objc_getProperty(v8, v40, 24LL, 1);
            if (v50) {
              void v50[4] = 2LL;
            }
            uint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue([a1 server]);
            -[os_log_s requestUninstallForSession:](v48, "requestUninstallForSession:", a1);
            goto LABEL_32;
          }

          uint64_t v51 = ne_log_obj(v39, v40);
          uint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
          if (os_log_type_enabled(v48, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)int buf = 0;
            id v52 = "child sesssion is in requested uninstallation state";
LABEL_43:
            _os_log_fault_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_FAULT, v52, buf, 2u);
            goto LABEL_32;
          }

          goto LABEL_32;
        }

      if (qword_1000CFC60 != -1) {
        dispatch_once(&qword_1000CFC60, &stru_1000BECB8);
      }
      uint64_t v39 = self->_status;
      if (v39 == 1)
      {
        -[NESMSession setLastConnectedDuration:](self, "setLastConnectedDuration:", 0LL);
        if (-[NESMSession connectTime](self, "connectTime"))
        {
          uint64_t v40 = (unint64_t)(*(double *)&qword_1000CFC58 * (double)mach_absolute_time());
          uint64_t v41 = v40 - -[NESMSession connectTime](self, "connectTime");
          if (-[NESMSession maxConnectTime](self, "maxConnectTime") < v41) {
            -[NESMSession setMaxConnectTime:](self, "setMaxConnectTime:", v41);
          }
          -[NESMSession setLastConnectedDuration:](self, "setLastConnectedDuration:", v41);
        }

        -[NESMSession setConnectTime:](self, "setConnectTime:", 0LL);
        uint64_t v42 = -[NESMSession lastStopReason](self, "lastStopReason") == 32;
        uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession server](self, "server"));
        v83[0] = _NSConcreteStackBlock;
        v83[1] = 3221225472LL;
        v83[2] = sub_100092098;
        v83[3] = &unk_1000BECE0;
        id v84 = v42;
        v83[4] = self;
        sub_1000530F0((uint64_t)v43, self, v83);
      }

      else
      {
        if (v39 != 3) {
          goto LABEL_43;
        }
        -[NESMSession setConnectTime:]( self,  "setConnectTime:",  (unint64_t)(*(double *)&qword_1000CFC58 * (double)mach_absolute_time()));
        unsigned int v28 = (uint64_t)-[NESMSession setLastStopReason:](self, "setLastStopReason:", 0LL);
      }

      uint64_t v39 = self->_status;
LABEL_43:
      int v44 = ne_log_obj(v28, v29);
      uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
      char v46 = os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);
      if (v39 > 1)
      {
        if (!v46) {
          goto LABEL_49;
        }
        id v52 = ne_session_status_to_string(self->_status);
        *(_DWORD *)int buf = 138412546;
        *(void *)&uint8_t buf[4] = self;
        *(_WORD *)&_BYTE buf[12] = 2080;
        *(void *)&buf[14] = v52;
        __int128 v49 = "%@: status changed to %s";
        id v50 = v45;
        uint64_t v51 = 22;
      }

      else
      {
        if (!v46) {
          goto LABEL_49;
        }
        BOOL v47 = ne_session_status_to_string(self->_status);
        uint64_t v48 = ne_session_stop_reason_to_string(-[NESMSession lastStopReason](self, "lastStopReason"));
        *(_DWORD *)int buf = 138412802;
        *(void *)&uint8_t buf[4] = self;
        *(_WORD *)&_BYTE buf[12] = 2080;
        *(void *)&buf[14] = v47;
        *(_WORD *)&buf[22] = 2080;
        uint64_t v87 = (void *)v48;
        __int128 v49 = "%@: status changed to %s, last stop reason %s";
        id v50 = v45;
        uint64_t v51 = 32;
      }

      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, v49, buf, v51);
LABEL_49:

      unsigned int v53 = objc_alloc_init(&OBJC_CLASS___NSDate);
      -[NESMSession setLastStatusChangeTime:](self, "setLastStatusChangeTime:", v53);

      xpc_dictionary_set_int64(v10, "SessionNotificationType", 1LL);
      uint64_t v81 = 0u;
      id v82 = 0u;
      uint64_t v79 = 0u;
      id v80 = 0u;
      __int16 v55 = objc_getProperty(self, v54, 48LL, 1);
      uint64_t v56 = [v55 countByEnumeratingWithState:&v79 objects:v85 count:16];
      if (v56)
      {
        uint64_t v58 = v56;
        id v59 = *(void *)v80;
        do
        {
          for (id i = 0LL; i != v58; id i = (char *)i + 1)
          {
            if (*(void *)v80 != v59) {
              objc_enumerationMutation(v55);
            }
            id Property = *(id *)(*((void *)&v79 + 1) + 8LL * (void)i);
            if (Property) {
              id Property = objc_getProperty(Property, v57, 16LL, 1);
            }
            xpc_connection_send_message((xpc_connection_t)Property, v10);
          }

          uint64_t v58 = [v55 countByEnumeratingWithState:&v79 objects:v85 count:16];
        }

        while (v58);

        if (!self) {
          goto LABEL_78;
        }
      }

      else
      {
      }

      uint64_t v62 = objc_opt_class(&OBJC_CLASS___NESMVPNSession);
      if ((objc_opt_isKindOfClass(self, v62) & 1) != 0)
      {
        uint64_t v63 = self;
        if ((-[NESMSession type](v63, "type") == 1
           || -[NESMSession type](v63, "type") == 2
           || -[NESMSession type](v63, "type") == 3)
          && -[NESMSession status](v63, "status"))
        {
          if (qword_1000CFC50 != -1) {
            dispatch_once(&qword_1000CFC50, &stru_1000BEC98);
          }
          uint64_t v64 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
          uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession configuration](v63, "configuration"));
          uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue([v65 identifier]);
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v64,  "setObject:forKeyedSubscript:",  v66,  @"identifier");

          uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  -[NESMSession status](v63, "status")));
          -[NSMutableDictionary setObject:forKeyedSubscript:](v64, "setObject:forKeyedSubscript:", v67, @"status");

          -[NSMutableDictionary setObject:forKeyedSubscript:]( v64,  "setObject:forKeyedSubscript:",  &stru_1000BF3D0,  @"tunnel-intf");
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v64,  "setObject:forKeyedSubscript:",  &stru_1000BF3D0,  @"delegate-intf");
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v64,  "setObject:forKeyedSubscript:",  &stru_1000BF3D0,  @"delegate-intf-type");
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v64,  "setObject:forKeyedSubscript:",  &off_1000C1980,  @"duration");
          uint64_t v68 = -[NESMSession copyTunnelInterfaceName](v63, "copyTunnelInterfaceName");
          if (v68)
          {
            -[NSMutableDictionary setObject:forKeyedSubscript:]( v64,  "setObject:forKeyedSubscript:",  v68,  @"tunnel-intf");
            uint64_t v69 = (void *)NEVirtualInterfaceCopyDelegateInterfaceName(-[NESMSession virtualInterface](v63, "virtualInterface"));
            if (v69)
            {
              -[NSMutableDictionary setObject:forKeyedSubscript:]( v64,  "setObject:forKeyedSubscript:",  v69,  @"delegate-intf");
              uint64_t v70 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  NEVirtualInterfaceGetDelegateInterfaceFunctionalType(-[NESMSession virtualInterface](v63, "virtualInterface")));
              uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue(v70);
              -[NSMutableDictionary setObject:forKeyedSubscript:]( v64,  "setObject:forKeyedSubscript:",  v71,  @"delegate-intf-type");
            }
          }

          uint64_t v72 = (id)-[NESMSession status](v63, "status");
          if ((_DWORD)v72 == 1)
          {
            uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  -[NESMSession lastConnectedDuration](v63, "lastConnectedDuration")));
            -[NSMutableDictionary setObject:forKeyedSubscript:]( v64,  "setObject:forKeyedSubscript:",  v74,  @"duration");
          }

          id v75 = ne_log_obj(v72, v73);
          id v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
          if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint64_t v90 = 138412546;
            id v91 = v63;
            uint64_t v92 = 2112;
            uint64_t v93 = v64;
            _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_INFO,  "%@: submitting event dictionary to powerlog %@",  v90,  0x16u);
          }

          id v77 = (dispatch_queue_s *)qword_1000CFC48;
          *(void *)int buf = _NSConcreteStackBlock;
          *(void *)&buf[8] = 3221225472LL;
          *(void *)&uint8_t buf[16] = sub_1000920AC;
          uint64_t v87 = &unk_1000BEBE0;
          __int16 v88 = @"VPN status change";
          id v89 = v64;
          uint64_t v78 = v64;
          dispatch_async(v77, buf);
        }
      }

void sub_10005F7B4(void *a1, int a2)
{
  uint64_t v3 = a1;
  uint64_t v5 = v3;
  if (a2
    || (!v3 ? (id Property = 0) : (id Property = objc_getProperty(v3, v4, 360, 1)), [Property type] != (id)1))
  {
    id v11 = 0LL;
  }

  else
  {
    if (qword_1000CFBE0 != -1) {
      dispatch_once(&qword_1000CFBE0, &stru_1000BE370);
    }
    if (v5) {
      uint64_t v7 = v5[46];
    }
    else {
      uint64_t v7 = 0LL;
    }
    uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t))(qword_1000CFBD8 + 96))(v7);
    if (isa_nsdictionary(v8))
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:kSCEntNetIPSec]);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"LastCause"]);

      if (isa_nsnumber(v10)) {
        id v11 = +[NEVPNConnection createDisconnectErrorWithDomain:code:]( NEVPNConnection,  "createDisconnectErrorWithDomain:code:",  @"NEVPNConnectionErrorDomainIPSec",  [v10 unsignedIntValue]);
      }
      else {
        id v11 = 0LL;
      }
    }

    else
    {
      id v11 = 0LL;
    }
  }

  uint64_t v12 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v5 queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100060BA4;
  block[3] = &unk_1000BEDA8;
  id v16 = v5;
  id v17 = v11;
  int v18 = a2;
  id v13 = v11;
  BOOL v14 = v5;
  dispatch_async(v12, block);
}

void sub_10005F980(void *a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([a1 server]);
  sub_100051C0C(v2, v1);
}

void sub_10005F9AC(void *a1, const __CFArray *a2, __CFArray *a3)
{
  uint64_t v5 = a1;
  uint64_t v7 = v5;
  if (v5)
  {
    id v8 = objc_msgSend(objc_getProperty(v5, v6, 360, 1), "type");
    int v73 = v7[88];
  }

  else
  {
    id v8 = [0 type];
    int v73 = 0;
  }

  id v75 = v7;
  CFArrayRef theArray = a3;
  CFIndex Count = CFArrayGetCount(a2);
  if (Count < 1)
  {
    CFIndex v79 = -1LL;
    uint64_t v80 = -1LL;
    CFIndex idx = -1LL;
    CFIndex v13 = -1LL;
  }

  else
  {
    CFIndex v11 = Count;
    CFIndex v12 = 0LL;
    CFIndex v13 = -1LL;
    uint64_t v80 = -1LL;
    CFIndex idx = -1LL;
    CFIndex v79 = -1LL;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, v12);
      if (CFEqual(ValueAtIndex, kSCEntNetDNS))
      {
        CFIndex v13 = v12;
      }

      else if (CFEqual(ValueAtIndex, kSCEntNetProxies))
      {
        CFIndex idx = v12;
      }

      else if (CFEqual(ValueAtIndex, kSCEntNetIPv4))
      {
        CFIndex v79 = v12;
      }

      else
      {
        int v15 = CFEqual(ValueAtIndex, kSCEntNetIPv6);
        uint64_t v16 = v80;
        if (v15) {
          uint64_t v16 = v12;
        }
        uint64_t v80 = v16;
      }

      ++v12;
    }

    while (v11 != v12);
  }

  if (v8 == (id)2)
  {
    int v18 = v7;
    id v17 = theArray;
    CFIndex v19 = v80;
    CFIndex v20 = idx;
    CFIndex v21 = v79;
    if (!v75) {
      goto LABEL_20;
    }
    goto LABEL_22;
  }

  int v18 = v7;
  id v17 = theArray;
  CFIndex v19 = v80;
  CFIndex v20 = idx;
  CFIndex v21 = v79;
  if (v8 == (id)1)
  {
    if (!v75)
    {
LABEL_20:
      id Property = 0LL;
LABEL_23:
      id v23 = Property;
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v23 DNSSettings]);
      uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue([v23 proxySettings]);

      goto LABEL_25;
    }

id sub_1000603DC(void *a1, const void *a2)
{
  id v3 = a1;
  if (!CFEqual(a2, kSCPropNetIPSecXAuthPassword))
  {
    if (!CFEqual(a2, kSCPropNetIPSecSharedSecret))
    {
LABEL_19:
      id v12 = 0LL;
      goto LABEL_20;
    }

    if (v3) {
      id Property = objc_getProperty(v3, v7, 360LL, 1);
    }
    else {
      id Property = 0LL;
    }
    if ([Property type] == (id)1)
    {
      if (v3)
      {
LABEL_10:
        id v10 = objc_getProperty(v3, v9, 360LL, 1);
LABEL_11:
        CFIndex v6 = (void *)objc_claimAutoreleasedReturnValue([v10 sharedSecretKeychainItem]);
        goto LABEL_12;
      }
    }

    else
    {
      if (v3) {
        id v13 = objc_getProperty(v3, v9, 360LL, 1);
      }
      else {
        id v13 = 0LL;
      }
      if ([v13 type] != (id)2) {
        goto LABEL_19;
      }
      if (v3) {
        goto LABEL_10;
      }
    }

    id v10 = 0LL;
    goto LABEL_11;
  }

  if (v3) {
    id v5 = objc_getProperty(v3, v4, 360LL, 1);
  }
  else {
    id v5 = 0LL;
  }
  CFIndex v6 = (void *)objc_claimAutoreleasedReturnValue([v5 passwordKeychainItem]);
LABEL_12:
  CFIndex v11 = v6;
  if (!v6) {
    goto LABEL_19;
  }
  id v12 = [v6 copyPassword];

LABEL_20:
  return v12;
}

void sub_100060514(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = (id)objc_claimAutoreleasedReturnValue([v3 server]);
  [v4 requestInstallForSession:v3 withParentSession:0 exclusive:a2];
}

void sub_100060564(void *a1)
{
  id v1 = a1;
  id v2 = (id)objc_claimAutoreleasedReturnValue([v1 server]);
  [v2 requestUninstallForSession:v1];
}

void sub_1000605A8(void *a1, const char *a2)
{
  id v3 = a1;
  if (a2)
  {
    size_t v4 = strlen(a2);
    if (v4)
    {
      size_t v5 = v4;
      size_t v6 = v4 + 73;
      uint64_t v7 = (char *)malloc(v4 + 73);
      if (v7)
      {
        id v8 = v7;
        strlcpy(v7, "prefs:root=General&path=ManagedConfigurationList/ProfileError&profileID=", v6);
        strlcat(v8, a2, v6);
        CFURLRef v9 = CFURLCreateWithBytes(0LL, (const UInt8 *)v8, v5 + 72, 0x8000100u, 0LL);
        free(v8);
        id v10 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v3 queue]);
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472LL;
        _DWORD v12[2] = sub_100060A88;
        v12[3] = &unk_1000BEBE0;
        CFURLRef v13 = v9;
        id v14 = v3;
        CFIndex v11 = v9;
        dispatch_async(v10, v12);
      }
    }
  }
}

void sub_1000606D0(void *a1, uint64_t a2)
{
  id v3 = a1;
  size_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v3 queue]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100060764;
  v6[3] = &unk_1000BEB20;
  id v7 = v3;
  uint64_t v8 = a2;
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_100060764(uint64_t a1)
{
  if (!CFEqual(*(CFTypeRef *)(a1 + 40), kSCPropNetIPSecXAuthPassword))
  {
    if (CFEqual(*(CFTypeRef *)(a1 + 40), kSCPropNetIPSecSharedSecret))
    {
      id Property = *(id *)(a1 + 32);
      if (Property) {
        id Property = objc_getProperty(Property, v5, 360LL, 1);
      }
      id v8 = [Property type];
      id v9 = *(id *)(a1 + 32);
      if (v8 == (id)1) {
        goto LABEL_13;
      }
      if (v9) {
        id v9 = objc_getProperty(v9, v7, 360LL, 1);
      }
      if ([v9 type] == (id)2)
      {
        id v9 = *(id *)(a1 + 32);
LABEL_13:
        if (v9) {
          id v9 = objc_getProperty(v9, v7, 360LL, 1);
        }
        size_t v4 = (void *)objc_claimAutoreleasedReturnValue([v9 sharedSecretKeychainItem]);
        goto LABEL_16;
      }
    }

    id v10 = 0LL;
    goto LABEL_22;
  }

  id v3 = *(id *)(a1 + 32);
  if (v3) {
    id v3 = objc_getProperty(v3, v2, 360LL, 1);
  }
  size_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 passwordKeychainItem]);
LABEL_16:
  id v10 = v4;
  if (v4)
  {
    CFIndex v11 = (void *)objc_claimAutoreleasedReturnValue([v4 identifier]);

    if (v11)
    {
      uint64_t v14 = ne_log_obj(v12, v13);
      int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *(void *)(a1 + 32);
        uint64_t v17 = *(void *)(a1 + 40);
        *(_DWORD *)int buf = 138412546;
        uint64_t v27 = v16;
        __int16 v28 = 2112;
        uint64_t v29 = v17;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%@ throwing away saved %@", buf, 0x16u);
      }

      [v10 setIdentifier:0];
      int v18 = (void *)objc_claimAutoreleasedReturnValue( +[NEConfigurationManager sharedManagerForAllUsers]( &OBJC_CLASS___NEConfigurationManager,  "sharedManagerForAllUsers"));
      CFIndex v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
      CFIndex v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472LL;
      v23[2] = sub_1000609B4;
      v23[3] = &unk_1000BE3F8;
      id v21 = *(id *)(a1 + 32);
      uint64_t v22 = *(void *)(a1 + 40);
      id v24 = v21;
      uint64_t v25 = v22;
      [v18 saveConfiguration:v19 withCompletionQueue:v20 handler:v23];
    }
  }

void sub_1000609B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (v3)
  {
    uint64_t v6 = ne_log_obj(v3, v4);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      int v10 = 138412802;
      uint64_t v11 = v8;
      __int16 v12 = 2112;
      uint64_t v13 = v9;
      __int16 v14 = 2112;
      int v15 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%@ failed to clear saved %@: %@",  (uint8_t *)&v10,  0x20u);
    }
  }
}

void sub_100060A88(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](&OBJC_CLASS___LSApplicationWorkspace, "defaultWorkspace"));
  unsigned int v3 = [v2 openSensitiveURL:*(void *)(a1 + 32) withOptions:0];

  uint64_t v6 = ne_log_obj(v4, v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
  if (v3)
  {
    if (v8)
    {
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      int v14 = 138412546;
      uint64_t v15 = v9;
      __int16 v16 = 2112;
      uint64_t v17 = v10;
      uint64_t v11 = "%@ launched profile janitor with URL %@";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, v11, (uint8_t *)&v14, 0x16u);
    }
  }

  else if (v8)
  {
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    int v14 = 138412546;
    uint64_t v15 = v12;
    __int16 v16 = 2112;
    uint64_t v17 = v13;
    uint64_t v11 = "%@ failed to launch profile janitor with URL %@";
    goto LABEL_6;
  }
}

id sub_100060BA4(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) setLastDisconnectError:*(void *)(a1 + 40)];
  uint64_t v3 = *(unsigned int *)(a1 + 48);
  return result;
}

void sub_100060BF0(uint64_t a1)
{
  if ([*(id *)(a1 + 32) type] == 2)
  {
    id v25 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
    id v2 = (void *)objc_claimAutoreleasedReturnValue([v25 appVPN]);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 appRules]);
    if ([v3 count])
    {
      unsigned int v4 = [*(id *)(a1 + 32) isActive];

      if (v4)
      {
        uint64_t v5 = sub_100060EAC(*(void **)(a1 + 32));
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
        uint64_t v7 = isa_nsstring(v6);
        if ((_DWORD)v7)
        {
          uint64_t v9 = ne_log_obj(v7, v8);
          uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v11 = *(void *)(a1 + 32);
            *(_DWORD *)int buf = 138412546;
            uint64_t v27 = v11;
            __int16 v28 = 2112;
            uint64_t v29 = v6;
            _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%@: Re-setting policies because the installed apps changed for tunnel %@",  buf,  0x16u);
          }

          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) policySession]);
          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
          int v14 = (void *)objc_claimAutoreleasedReturnValue([v13 appVPN]);
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 appRules]);
          __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uid]);
          sub_10003B00C((uint64_t)v12, v15, (uint64_t)[v16 intValue]);

          uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) policySession]);
          int v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
          CFIndex v19 = (void *)objc_claimAutoreleasedReturnValue([v18 appVPN]);
          CFIndex v20 = (void *)objc_claimAutoreleasedReturnValue([v19 appRules]);
          LOBYTE(v16) = sub_100061180(*(void **)(a1 + 32));
          char v21 = sub_100061248(*(void **)(a1 + 32));
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
          id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 appVPN]);
          id v24 = (void *)objc_claimAutoreleasedReturnValue([v23 excludedDomains]);
          sub_10003C574((uint64_t)v17, v20, v6, 0LL, (char)v16, v21, 0, 0LL, v24);
        }
      }
    }

    else
    {
    }
  }

__CFString *sub_100060EAC(void *a1)
{
  if (a1)
  {
    *(void *)int buf = 0LL;
    id v2 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 identifier]);
    NetworkServiceEntity = (__CFString *)SCDynamicStoreKeyCreateNetworkServiceEntity( kCFAllocatorDefault,  kSCDynamicStoreDomainState,  (CFStringRef)[v3 UUIDString],  kSCEntNetIPv4);

    char v21 = NetworkServiceEntity;
    if (!NetworkServiceEntity) {
      goto LABEL_8;
    }
    uint64_t v5 = (const __CFDictionary *)SCDynamicStoreCopyValue(0LL, NetworkServiceEntity);
    *(void *)int buf = v5;
    if (!v5) {
      goto LABEL_7;
    }
    NetworkServiceEntity = (__CFString *)CFDictionaryGetValue(v5, kSCPropInterfaceName);
    CFTypeID TypeID = CFStringGetTypeID();
    if (!NetworkServiceEntity) {
      goto LABEL_8;
    }
    if (CFGetTypeID(NetworkServiceEntity) == TypeID) {
      CFRetain(NetworkServiceEntity);
    }
    else {
LABEL_7:
    }
      NetworkServiceEntity = 0LL;
LABEL_8:
    myCFRelease(buf);
    myCFRelease(&v21);
    if (NetworkServiceEntity
      && !-[__CFString isEqualToString:](NetworkServiceEntity, "isEqualToString:", &stru_1000BF3D0))
    {
      goto LABEL_17;
    }

    *(void *)int buf = 0LL;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 identifier]);
    uint64_t v9 = SCDynamicStoreKeyCreateNetworkServiceEntity( kCFAllocatorDefault,  kSCDynamicStoreDomainState,  (CFStringRef)[v8 UUIDString],  kSCEntNetIPv6);

    char v21 = (__CFString *)v9;
    if (!v9) {
      goto LABEL_15;
    }
    uint64_t v10 = (const __CFDictionary *)SCDynamicStoreCopyValue(0LL, v9);
    *(void *)int buf = v10;
    if (v10
      && (Value = (__CFString *)CFDictionaryGetValue(v10, kSCPropInterfaceName), CFTypeID v12 = CFStringGetTypeID(), Value)
      && CFGetTypeID(Value) == v12)
    {
      CFRetain(Value);
    }

    else
    {
LABEL_15:
      uint64_t Value = NetworkServiceEntity;
    }

    myCFRelease(buf);
    uint64_t v13 = myCFRelease(&v21);
    NetworkServiceEntity = Value;
    if (Value)
    {
LABEL_17:
      id v15 = -[__CFString isEqualToString:](NetworkServiceEntity, "isEqualToString:", &stru_1000BF3D0);
      if (!(_DWORD)v15) {
        return NetworkServiceEntity;
      }
      uint64_t v17 = ne_log_obj(v15, v16);
      int v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 138412290;
        *(void *)&uint8_t buf[4] = a1;
        _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%@: received empty interface name",  buf,  0xCu);
      }
    }

    else
    {
      uint64_t v19 = ne_log_obj(v13, v14);
      int v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 138412290;
        *(void *)&uint8_t buf[4] = a1;
        _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%@: failed to query interface name",  buf,  0xCu);
      }

      NetworkServiceEntity = 0LL;
    }

    return NetworkServiceEntity;
  }

  return (__CFString *)0LL;
}

CFStringRef sub_100061180(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  CFPropertyListRef v6 = 0LL;
  id v1 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 identifier]);
  NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity( kCFAllocatorDefault,  kSCDynamicStoreDomainState,  (CFStringRef)[v2 UUIDString],  kSCEntNetDNS);

  uint64_t v5 = NetworkServiceEntity;
  if (NetworkServiceEntity)
  {
    CFPropertyListRef v6 = SCDynamicStoreCopyValue(0LL, NetworkServiceEntity);
    NetworkServiceEntity = (const __CFString *)(v6 != 0LL);
  }

  myCFRelease(&v6);
  myCFRelease(&v5);
  return NetworkServiceEntity;
}

unint64_t sub_100061248(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v7 = 0LL;
  id v1 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 identifier]);
  unint64_t NetworkServiceEntity = (unint64_t)SCDynamicStoreKeyCreateNetworkServiceEntity( kCFAllocatorDefault,  kSCDynamicStoreDomainState,  (CFStringRef)[v2 UUIDString],  kSCEntNetProxies);

  unint64_t v6 = NetworkServiceEntity;
  if (NetworkServiceEntity)
  {
    unsigned int v4 = (const __CFString *)SCDynamicStoreCopyValue(0LL, (CFStringRef)NetworkServiceEntity);
    unint64_t NetworkServiceEntity = (unint64_t)v4;
    uint64_t v7 = v4;
    if (v4) {
      unint64_t NetworkServiceEntity = NEGetIntFromDictionary(v4, kSCPropNetProxiesHTTPEnable, 0LL)
    }
                          || NEGetIntFromDictionary( NetworkServiceEntity,  kSCPropNetProxiesHTTPSEnable,  0LL)
                          || NEGetIntFromDictionary( NetworkServiceEntity,  kSCPropNetProxiesProxyAutoConfigEnable,  0LL) != 0;
  }

  myCFRelease(&v7);
  myCFRelease(&v6);
  return NetworkServiceEntity;
}

void sub_100061370(uint64_t a1)
{
  if (qword_1000CFBE0 != -1) {
    dispatch_once(&qword_1000CFBE0, &stru_1000BE370);
  }
  id v2 = *(void (**)(uint64_t))(qword_1000CFBD8 + 160);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3) {
      uint64_t v4 = *(void *)(v3 + 368);
    }
    else {
      uint64_t v4 = 0LL;
    }
    v2(v4);
  }

void sub_1000613EC(uint64_t a1)
{
  if (qword_1000CFBE0 != -1) {
    dispatch_once(&qword_1000CFBE0, &stru_1000BE370);
  }
  id v2 = *(void (**)(uint64_t))(qword_1000CFBD8 + 152);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3) {
      uint64_t v4 = *(void *)(v3 + 368);
    }
    else {
      uint64_t v4 = 0LL;
    }
    v2(v4);
  }

void sub_100061468(uint64_t a1)
{
  if (qword_1000CFBE0 != -1) {
    dispatch_once(&qword_1000CFBE0, &stru_1000BE370);
  }
  id v2 = *(void (**)(uint64_t))(qword_1000CFBD8 + 144);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3) {
      uint64_t v4 = *(void *)(v3 + 368);
    }
    else {
      uint64_t v4 = 0LL;
    }
    v2(v4);
  }

void sub_1000614E4(uint64_t a1)
{
  if (qword_1000CFBE0 != -1) {
    dispatch_once(&qword_1000CFBE0, &stru_1000BE370);
  }
  id v2 = *(void (**)(uint64_t))(qword_1000CFBD8 + 136);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3) {
      uint64_t v4 = *(void *)(v3 + 368);
    }
    else {
      uint64_t v4 = 0LL;
    }
    v2(v4);
  }

void sub_100061560(uint64_t a1)
{
  if (qword_1000CFBE0 != -1) {
    dispatch_once(&qword_1000CFBE0, &stru_1000BE370);
  }
  id v2 = *(void (**)(uint64_t))(qword_1000CFBD8 + 128);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3) {
      uint64_t v4 = *(void *)(v3 + 368);
    }
    else {
      uint64_t v4 = 0LL;
    }
    v2(v4);
  }

void sub_1000615DC(uint64_t a1)
{
  if (qword_1000CFBE0 != -1) {
    dispatch_once(&qword_1000CFBE0, &stru_1000BE370);
  }
  uint64_t v2 = qword_1000CFBD8;
  if (*(void *)(qword_1000CFBD8 + 120))
  {
    uint64_t v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000616B4;
    block[3] = &unk_1000BEC08;
    void block[4] = *(void *)(a1 + 32);
    dispatch_async(v3, block);

    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      uint64_t v5 = *(void *)(v4 + 368);
    }
    else {
      uint64_t v5 = 0LL;
    }
    (*(void (**)(uint64_t))(v2 + 120))(v5);
  }

void sub_1000616B4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) policySession]);
  sub_10002EC00((uint64_t)v2);

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) policySession]);
  sub_10002BCE0((uint64_t)v3);

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) policySession]);
  sub_10002BE7C((uint64_t)v4);

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) policySession]);
  sub_10002ECE8((uint64_t)v5);

  sub_10007C480(*(void **)(a1 + 32), v6);
  uint64_t v8 = *(void **)(a1 + 32);
  if (v8) {
    objc_setProperty_atomic(v8, v7, 0LL, 376LL);
  }
}

void sub_100061758(uint64_t a1)
{
  if (qword_1000CFBE0 != -1) {
    dispatch_once(&qword_1000CFBE0, &stru_1000BE370);
  }
  uint64_t v2 = *(void (**)(uint64_t))(qword_1000CFBD8 + 112);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3) {
      uint64_t v4 = *(void *)(v3 + 368);
    }
    else {
      uint64_t v4 = 0LL;
    }
    v2(v4);
    id v5 = sub_100061854(*(void **)(a1 + 32));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    uint64_t v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100061A3C;
    v9[3] = &unk_1000BEBE0;
    v9[4] = *(void *)(a1 + 32);
    id v10 = v6;
    id v8 = v6;
    dispatch_async(v7, v9);
  }

id sub_100061854(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  if (qword_1000CFBE0 != -1) {
    dispatch_once(&qword_1000CFBE0, &stru_1000BE370);
  }
  uint64_t v2 = *(void (**)(void, _DWORD *))(qword_1000CFBD8 + 176);
  if (!v2) {
    return 0LL;
  }
  v2(a1[46], v19);
  if (objc_msgSend(objc_getProperty(a1, v3, 360, 1), "type") == (id)2)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v19[0]));
    v18[0] = v5;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v19[1]));
    v18[1] = v6;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v18, 2LL));
  }

  else
  {
    id v9 = objc_msgSend(objc_getProperty(a1, v4, 360, 1), "type");
    if (v9 != (id)1)
    {
      uint64_t v7 = 0LL;
      goto LABEL_12;
    }

    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v19[0]));
    uint64_t v17 = v5;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v17, 1LL));
  }

LABEL_12:
  uint64_t v11 = ne_log_obj(v9, v10);
  CFTypeID v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    int v13 = 138412546;
    uint64_t v14 = a1;
    __int16 v15 = 2112;
    uint64_t v16 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "%@: bridge_functions->get_agent_pids() returned PIDs %@",  (uint8_t *)&v13,  0x16u);
  }

  return v7;
}

void sub_100061A3C(uint64_t a1, const char *a2)
{
  SEL v3 = *(void **)(a1 + 32);
  if (v3)
  {
    objc_setProperty_atomic(v3, a2, *(id *)(a1 + 40), 376LL);
    SEL v3 = *(void **)(a1 + 32);
  }

  uint64_t v4 = sub_100060EAC(v3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  uint64_t v6 = isa_nsstring(v5);
  if ((_DWORD)v6)
  {
    uint64_t v8 = ne_log_obj(v6, v7);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void **)(a1 + 32);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 server]);
      CFTypeID v12 = (void *)objc_claimAutoreleasedReturnValue([v11 primaryPhysicalInterface]);
      int v13 = (void *)objc_claimAutoreleasedReturnValue([v12 interfaceName]);
      *(_DWORD *)int buf = 138412802;
      *(void *)&uint8_t buf[4] = v10;
      __int16 v74 = 2112;
      id v75 = v5;
      __int16 v76 = 2112;
      id v77 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%@: installing rules on tunnel %@ primary %@",  buf,  0x20u);
    }

    id v14 = v5;
    uint64_t IsVPN = NEVirtualInterfaceNameIsVPN([v14 UTF8String], 1);
    int v16 = IsVPN;
    uint64_t v18 = ne_log_obj(IsVPN, v17);
    uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    CFIndex v20 = v19;
    if (v16)
    {
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 138412290;
        *(void *)&uint8_t buf[4] = v14;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "Marked the %@ interface as VPN",  buf,  0xCu);
      }
    }

    else if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 138412290;
      *(void *)&uint8_t buf[4] = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "Failed to mark the %@ interface as VPN",  buf,  0xCu);
    }

    char v21 = *(_DWORD **)(a1 + 32);
    id v22 = v14;
    if (v21)
    {
      if (v21[88] == 2)
      {
        char v23 = 0;
        id v24 = 0LL;
      }

      else
      {
        id v25 = (void *)objc_claimAutoreleasedReturnValue([v21 configuration]);
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 identifier]);
        unint64_t NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity( kCFAllocatorDefault,  kSCDynamicStoreDomainState,  (CFStringRef)[v26 UUIDString],  kSCEntNetDNS);

        *(void *)int buf = NetworkServiceEntity;
        if (NetworkServiceEntity) {
          __int16 v28 = (void *)SCDynamicStoreCopyValue(0LL, NetworkServiceEntity);
        }
        else {
          __int16 v28 = 0LL;
        }
        myCFRelease(buf);
        id v24 = (void *)objc_claimAutoreleasedReturnValue([v28 objectForKeyedSubscript:kSCPropNetDNSSupplementalMatchDomains]);
        if (v28)
        {
          uint64_t v29 = (__CFString *)sub_100062DF0(v21);
          int v30 = (void *)objc_claimAutoreleasedReturnValue( -[__CFString objectForKeyedSubscript:]( v29,  "objectForKeyedSubscript:",  kSCPropNetOverridePrimary));
          char v23 = [v30 BOOLValue];
        }

        else
        {
          char v23 = 0;
        }
      }

      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v21 policySession]);
      sub_100045EC0((uint64_t)v31, v22, v24, v23);
    }

    sub_10007C308(*(void **)(a1 + 32), v22);
    uint64_t v32 = *(_DWORD **)(a1 + 32);
    if (v32)
    {
      int v33 = v32[88];
      if (v33 == 1)
      {
        id v46 = (void *)objc_claimAutoreleasedReturnValue([v32 configuration]);
        BOOL v47 = (void *)objc_claimAutoreleasedReturnValue([v46 VPN]);
        uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([v47 protocol]);
        unsigned int v49 = [v48 enforceRoutes];

        if (v49)
        {
          id v50 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
          uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([v50 VPN]);
          id v52 = (void *)objc_claimAutoreleasedReturnValue([v51 protocol]);
          unsigned __int8 v53 = [v52 includeAllNetworks];

          if ((v53 & 1) != 0)
          {
            uint64_t v56 = ne_log_obj(v54, v55);
            uint64_t v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
            if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v58 = *(void *)(a1 + 32);
              *(_DWORD *)int buf = 138412290;
              *(void *)&uint8_t buf[4] = v58;
              _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "%@: Ignoring enforceRoutes because includeAllNetworks is set",  buf,  0xCu);
            }
          }

          else
          {
            sub_1000620C0(*(void **)(a1 + 32), v22);
          }
        }
      }

      else if (v33 == 2)
      {
        xpc_object_t v34 = (void *)objc_claimAutoreleasedReturnValue([v32 policySession]);
        xpc_object_t v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
        id v36 = (void *)objc_claimAutoreleasedReturnValue([v35 appVPN]);
        uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v36 appRules]);
        int v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uid]);
        sub_10003B00C((uint64_t)v34, v37, (uint64_t)[v38 intValue]);

        uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) policySession]);
        uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
        uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v71 appVPN]);
        uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v40 appRules]);
        LOBYTE(v3_Block_object_dispose(va, 8) = sub_100061180(*(void **)(a1 + 32));
        char v42 = sub_100061248(*(void **)(a1 + 32));
        BOOL v72 = v5;
        uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
        xpc_object_t v44 = (void *)objc_claimAutoreleasedReturnValue([v43 appVPN]);
        uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v44 excludedDomains]);
        sub_10003C574((uint64_t)v39, v41, v22, 0LL, (char)v38, v42, 0, 0LL, v45);

        id v5 = v72;
      }
    }
  }

  if ([*(id *)(a1 + 32) type] == 1)
  {
    id v59 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
    uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue([v59 VPN]);
    CFIndex v61 = (void *)objc_claimAutoreleasedReturnValue([v60 exceptionApps]);

    if (v61)
    {
      uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) policySession]);
      uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
      uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue([v63 VPN]);
      uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue([v64 exceptionApps]);
      uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) server]);
      uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue([v66 primaryPhysicalInterface]);
      uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue([v67 interfaceName]);
      uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uid]);
      sub_10003B1CC((uint64_t)v62, v65, v68, (int)[v69 intValue]);
    }
  }

  uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) policySession]);
  sub_10002EB18((uint64_t)v70);
}

void sub_1000620C0(void *a1, void *a2)
{
  id v118 = a2;
  if (!a1) {
    goto LABEL_108;
  }
  if (objc_msgSend(objc_getProperty(a1, v3, 360, 1), "type") != (id)2)
  {
    if (objc_msgSend(objc_getProperty(a1, v4, 360, 1), "type") != (id)1) {
      goto LABEL_108;
    }
    int v33 = (__CFString *)sub_100062DF0(a1);
    xpc_object_t v35 = v33;
    if (v33)
    {
      id v36 = (void *)objc_claimAutoreleasedReturnValue( -[__CFString objectForKeyedSubscript:]( v33,  "objectForKeyedSubscript:",  kSCPropNetIPv4AdditionalRoutes));
      if (v36)
      {
        int v38 = v36;
        uint64_t v39 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [v36 count]);
        memset(v131, 0, 64);
        id v40 = v38;
        id v41 = [v40 countByEnumeratingWithState:v131 objects:buf count:16];
        if (v41)
        {
          id v42 = v41;
          uint64_t v43 = **(void **)&v131[16];
          do
          {
            for (id i = 0LL; i != v42; id i = (char *)i + 1)
            {
              if (**(void **)&v131[16] != v43) {
                objc_enumerationMutation(v40);
              }
              id v45 = -[NEIPv4Route initFromLegacyDictionary:]( objc_alloc(&OBJC_CLASS___NEIPv4Route),  "initFromLegacyDictionary:",  *(void *)(*(void *)&v131[8] + 8LL * (void)i));
              -[NSMutableArray addObject:](v39, "addObject:", v45);
            }

            id v42 = [v40 countByEnumeratingWithState:v131 objects:buf count:16];
          }

          while (v42);
        }

LABEL_106:
        if (v39) {
          goto LABEL_107;
        }
        goto LABEL_108;
      }

      uint64_t v102 = ne_log_obj(0LL, v37);
      id v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);
      if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_error_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_ERROR,  "Failed to get included routes dictionary",  buf,  2u);
      }

      id v40 = 0LL;
    }

    else
    {
      uint64_t v101 = ne_log_obj(0LL, v34);
      id v40 = (id)objc_claimAutoreleasedReturnValue(v101);
      if (os_log_type_enabled((os_log_t)v40, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v40,  OS_LOG_TYPE_ERROR,  "Unable to get IPv4 dictionary from dynamic store",  buf,  2u);
      }
    }

    uint64_t v39 = 0LL;
    goto LABEL_106;
  }

  id v5 = (const char *)[v118 UTF8String];
  uint64_t v6 = if_nametoindex(v5);
  uint64_t v8 = ne_log_obj(v6, v7);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)int buf = 138412802;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&_BYTE buf[12] = 2080;
    *(void *)&buf[14] = v5;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)&uint8_t buf[24] = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "%@: Getting routes for interface %s[%u]",  buf,  0x1Cu);
  }

  __s2 = (char *)v5;

  *(_OWORD *)__int128 v120 = xmmword_10009E7BC;
  uint64_t v121 = 7LL;
  int v10 = 3;
  while (1)
  {
    size_t v119 = 0LL;
    if (sysctl(v120, 6u, 0LL, &v119, 0LL, 0LL) < 0)
    {
      int log = *__error();
      uint64_t v22 = strerror_r(log, (char *)buf, 0x80uLL);
      if ((_DWORD)v22) {
        buf[0] = 0;
      }
      uint64_t v24 = ne_log_obj(v22, v23);
      char v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (!os_log_type_enabled(v21, OS_LOG_TYPE_FAULT)) {
        goto LABEL_20;
      }
      *(_DWORD *)uint64_t v131 = 67109378;
      *(_DWORD *)&v131[4] = log;
      *(_WORD *)&v131[8] = 2080;
      *(void *)&v131[10] = buf;
      id v25 = v131;
      uint64_t v26 = v21;
      uint64_t v27 = "Unable to get size estimate for routing table: [%d] %s";
      uint32_t v28 = 18;
      goto LABEL_29;
    }

    size_t v11 = 5 * v119 >= 4 ? ((((5 * v119) >> 2) - 1) | 3) + 1 : 4LL;
    size_t v119 = v11;
    CFTypeID v12 = (os_log_s *)malloc(v11);
    if (v12) {
      break;
    }
    uint64_t v29 = ne_log_obj(0LL, v13);
    char v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 134217984;
      *(void *)&uint8_t buf[4] = v119;
      id v25 = buf;
      uint64_t v26 = v21;
      uint64_t v27 = "malloc(%zu) failed";
      uint32_t v28 = 12;
LABEL_29:
      _os_log_fault_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, v27, v25, v28);
    }

LABEL_98:
  free(v14);
  if (!v39) {
    goto LABEL_108;
  }
LABEL_107:
  uint64_t v104 = (void *)objc_claimAutoreleasedReturnValue([a1 policySession]);
  int v105 = (void *)objc_claimAutoreleasedReturnValue([a1 server]);
  id v106 = (void *)objc_claimAutoreleasedReturnValue([v105 primaryPhysicalInterface]);
  id v107 = (void *)objc_claimAutoreleasedReturnValue([v106 interfaceName]);
  id v109 = objc_getProperty(a1, v108, 376LL, 1);
  id v110 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
  id v111 = (void *)objc_claimAutoreleasedReturnValue([v110 VPN]);
  id v112 = (void *)objc_claimAutoreleasedReturnValue([v111 protocol]);
  sub_100037690((uint64_t)v104, v118, v107, v109, v39, 0, 0, 0, (char)[v112 excludeLocalNetworks]);

LABEL_108:
}

CFStringRef sub_100062DF0(void *a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 identifier]);
  unint64_t NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity( kCFAllocatorDefault,  kSCDynamicStoreDomainState,  (CFStringRef)[v2 UUIDString],  kSCEntNetIPv4);

  id v5 = NetworkServiceEntity;
  if (NetworkServiceEntity) {
    unint64_t NetworkServiceEntity = (const __CFString *)SCDynamicStoreCopyValue(0LL, NetworkServiceEntity);
  }
  myCFRelease(&v5);
  return NetworkServiceEntity;
}

void sub_100062E98(uint64_t a1)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 32));
  if (qword_1000CFBE0 != -1) {
    dispatch_once(&qword_1000CFBE0, &stru_1000BE370);
  }
  int v3 = *(_DWORD *)(a1 + 48);
  if (v3 == 3)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    if (v8) {
      uint64_t v9 = *(void *)(v8 + 368);
    }
    else {
      uint64_t v9 = 0LL;
    }
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void))(qword_1000CFBD8 + 104))(v9, *(void *)(a1 + 32));
  }

  else
  {
    if (v3 == 2)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t))(qword_1000CFBD8 + 96);
    }

    else
    {
      if (v3 != 1) {
        goto LABEL_35;
      }
      uint64_t v4 = *(uint64_t (**)(uint64_t))(qword_1000CFBD8 + 88);
    }

    uint64_t v5 = *(void *)(a1 + 40);
    if (v5) {
      uint64_t v6 = *(void *)(v5 + 368);
    }
    else {
      uint64_t v6 = 0LL;
    }
    uint64_t v7 = v4(v6);
  }

  int v10 = (void *)v7;
  if (v7)
  {
    uint64_t v11 = _CFXPCCreateXPCObjectFromCFObject(v7);
    CFTypeID v12 = (void *)v11;
    if (*(_DWORD *)(a1 + 48) == 2 && v11)
    {
      if ((sub_100077340(*(void **)(a1 + 40)) & 1) != 0
        || sub_100077444(*(void **)(a1 + 40)))
      {
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) matchedRule]);

        if (v13)
        {
          xpc_object_t dictionary = xpc_dictionary_get_dictionary(v12, "VPN");
          int v15 = (void *)objc_claimAutoreleasedReturnValue(dictionary);
          os_log_t v16 = v15;
          if (v15 && xpc_get_type(v15) == (xpc_type_t)&_xpc_type_dictionary
            || (xpc_object_t v17 = xpc_dictionary_create(0LL, 0LL, 0LL),
                v16,
                xpc_dictionary_set_value(v12, "VPN", v17),
                (os_log_t v16 = v17) != 0LL))
          {
            if (xpc_get_type(v16) == (xpc_type_t)&_xpc_type_dictionary)
            {
              uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) matchedRule]);
              xpc_dictionary_set_int64(v16, "OnDemandAction", (int64_t)[v18 action]);
            }
          }
        }
      }

      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) lastDisconnectError]);
      if (v19)
      {
        id v29 = 0LL;
        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v19,  1LL,  &v29));
        id v21 = v29;
        uint64_t v23 = v21;
        if (v20)
        {
          id v24 = v20;
          xpc_dictionary_set_data( v12,  "LastDisconnectError",  [v24 bytes],  (size_t)objc_msgSend(v24, "length"));
        }

        else
        {
          uint64_t v25 = ne_log_obj(v21, v22);
          uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 138412290;
            uint64_t v31 = v23;
            _os_log_error_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "Failed to serialize the last disconnect error: %@",  buf,  0xCu);
          }
        }
      }
    }

    xpc_dictionary_set_value(reply, "SessionInfo", v12);
  }

void sub_1000631D0(uint64_t a1)
{
  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 32));
  uint64_t v7 = 0LL;
  if (qword_1000CFBE0 != -1) {
    dispatch_once(&qword_1000CFBE0, &stru_1000BE370);
  }
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = *(void *)(v3 + 368);
  }
  else {
    uint64_t v4 = 0LL;
  }
  (*(void (**)(uint64_t, void, char *, uint64_t *))(qword_1000CFBD8 + 72))( v4,  *(void *)(a1 + 32),  (char *)&v7 + 4,  &v7);
  if (bootstrap_port) {
    xpc_dictionary_set_mach_send(reply, "SessionBootstrapPort", HIDWORD(v7));
  }
  if ((_DWORD)v7) {
    xpc_dictionary_set_mach_send(reply, "SessionAuditSessionPort", v7);
  }
  xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
  uint64_t v6 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue(remote_connection);
  xpc_connection_send_message(v6, reply);
}

void sub_1000632C0(uint64_t a1)
{
  id v2 = sub_100061854(*(void **)(a1 + 32));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  int v10 = _NSConcreteStackBlock;
  uint64_t v11 = 3221225472LL;
  CFTypeID v12 = sub_1000633D4;
  uint64_t v13 = &unk_1000BEBE0;
  uint64_t v14 = *(void *)(a1 + 32);
  id v5 = v3;
  id v15 = v5;
  dispatch_async(v4, &v10);

  if (qword_1000CFBE0 != -1) {
    dispatch_once(&qword_1000CFBE0, &stru_1000BE370);
  }
  uint64_t v6 = *(void (**)(uint64_t, id, void))(qword_1000CFBD8 + 16);
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    uint64_t v8 = *(void *)(v7 + 368);
  }
  else {
    uint64_t v8 = 0LL;
  }
  id v9 = *(id *)(a1 + 40);
  v6(v8, objc_msgSend(v9, "UTF8String", v10, v11, v12, v13, v14), *(void *)(a1 + 48));
}

void sub_1000633D4(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    objc_setProperty_atomic(v3, a2, *(id *)(a1 + 40), 376LL);
    uint64_t v3 = *(void **)(a1 + 32);
  }

  if ([v3 type] == 1)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 VPN]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 exceptionApps]);

    if (v6)
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) policySession]);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 VPN]);
      int v10 = (void *)objc_claimAutoreleasedReturnValue([v9 exceptionApps]);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) server]);
      CFTypeID v12 = (void *)objc_claimAutoreleasedReturnValue([v11 primaryPhysicalInterface]);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 interfaceName]);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uid]);
      sub_10003B1CC((uint64_t)v7, v10, v13, (int)[v14 intValue]);
    }

    id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
    os_log_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 VPN]);
    xpc_object_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 protocol]);
    unsigned int v18 = [v17 enforceRoutes];

    if (v18)
    {
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 VPN]);
      id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 protocol]);
      unsigned __int8 v22 = [v21 includeAllNetworks];

      if ((v22 & 1) != 0)
      {
        uint64_t v25 = ne_log_obj(v23, v24);
        uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v27 = *(void **)(a1 + 32);
          int v37 = 138412290;
          int v38 = v27;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "%@: Ignoring enforceRoutes because includeAllNetworks is set",  (uint8_t *)&v37,  0xCu);
        }
      }

      else
      {
        uint32_t v28 = sub_100060EAC(*(void **)(a1 + 32));
        uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
        uint64_t v29 = isa_nsstring(v26);
        if ((_DWORD)v29)
        {
          uint64_t v31 = ne_log_obj(v29, v30);
          uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
          {
            int v33 = *(void **)(a1 + 32);
            uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v33 server]);
            xpc_object_t v35 = (void *)objc_claimAutoreleasedReturnValue([v34 primaryPhysicalInterface]);
            id v36 = (void *)objc_claimAutoreleasedReturnValue([v35 interfaceName]);
            int v37 = 138412802;
            int v38 = v33;
            __int16 v39 = 2112;
            id v40 = v26;
            __int16 v41 = 2112;
            id v42 = v36;
            _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "%@: Re-setting route enforcement policies due to interface change event for tunnel %@ primary %@",  (uint8_t *)&v37,  0x20u);
          }

          sub_1000620C0(*(void **)(a1 + 32), v26);
        }
      }
    }
  }

id sub_1000636E4(uint64_t a1)
{
  return sub_10007C56C(*(id *)(a1 + 32), 0LL);
}

uint64_t sub_1000636F0(uint64_t a1)
{
  if (qword_1000CFBE0 != -1) {
    dispatch_once(&qword_1000CFBE0, &stru_1000BE370);
  }
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    uint64_t v3 = *(void *)(v2 + 368);
  }
  else {
    uint64_t v3 = 0LL;
  }
  return (*(uint64_t (**)(uint64_t))(qword_1000CFBD8 + 48))(v3);
}

uint64_t sub_10006375C(uint64_t a1)
{
  if (qword_1000CFBE0 != -1) {
    dispatch_once(&qword_1000CFBE0, &stru_1000BE370);
  }
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    uint64_t v3 = *(void *)(v2 + 368);
  }
  else {
    uint64_t v3 = 0LL;
  }
  return (*(uint64_t (**)(uint64_t, double))(qword_1000CFBD8 + 40))(v3, *(double *)(a1 + 40));
}

void sub_1000637CC(uint64_t a1)
{
  if (qword_1000CFBE0 != -1) {
    dispatch_once(&qword_1000CFBE0, &stru_1000BE370);
  }
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    uint64_t v3 = *(void *)(v2 + 368);
  }
  else {
    uint64_t v3 = 0LL;
  }
  if (((*(uint64_t (**)(uint64_t))(qword_1000CFBD8 + 24))(v3) & 1) == 0)
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) server]);
    sub_100051C0C(v5, v4);
  }

id sub_100063870(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) status];
  if ((_DWORD)result != 1)
  {
    if (qword_1000CFBE0 != -1) {
      dispatch_once(&qword_1000CFBE0, &stru_1000BE370);
    }
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3) {
      uint64_t v4 = *(void *)(v3 + 368);
    }
    else {
      uint64_t v4 = 0LL;
    }
    return (id)(*(uint64_t (**)(uint64_t))(qword_1000CFBD8 + 64))(v4);
  }

  return result;
}

void sub_1000638F8(uint64_t a1, const char *a2)
{
  uint64_t v4 = a1 + 32;
  id Property = *(void **)(a1 + 32);
  id v5 = *(uint64_t (**)(uint64_t, void *, id, id, void, void, id))(*(void *)(v4 + 8) + 56LL);
  if (Property)
  {
    uint64_t v6 = Property[46];
    id Property = objc_getProperty(Property, a2, 384LL, 1);
    uint64_t v7 = *(void **)(a1 + 32);
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v6 = 0LL;
  }

  uint64_t v8 = Property;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 uid]);
  id v10 = [v9 unsignedIntValue];
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) gid]);
  char v12 = v5( v6,  v8,  v10,  [v11 unsignedIntValue],  *(unsigned int *)(a1 + 48),  *(unsigned int *)(a1 + 52),  objc_msgSend(*(id *)(a1 + 32), "isOnDemand"));

  if ((v12 & 1) != 0)
  {
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void (**)(uint64_t, void *))(*(void *)(a1 + 40) + 80LL);
    if (v13) {
      uint64_t v15 = *(void *)(v13 + 368);
    }
    else {
      uint64_t v15 = 0LL;
    }
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472LL;
    v32[2] = sub_100063B90;
    v32[3] = &unk_1000BEC08;
    v32[4] = v13;
    v14(v15, v32);
  }

  else
  {
    sub_10005F7B4(*(void **)(a1 + 32), 0);
  }

  mach_port_name_t v16 = *(_DWORD *)(a1 + 48);
  if (v16)
  {
    uint64_t v17 = mach_port_deallocate(mach_task_self_, v16);
    if ((_DWORD)v17)
    {
      uint64_t v19 = ne_log_obj(v17, v18);
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = *(void *)(a1 + 32);
        uint64_t v27 = __error();
        uint32_t v28 = strerror(*v27);
        *(_DWORD *)int buf = 138412546;
        uint64_t v34 = v26;
        __int16 v35 = 2080;
        id v36 = v28;
        _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "%@: Failed to deallocate the bootstrap mach port: %s",  buf,  0x16u);
      }
    }
  }

  mach_port_name_t v21 = *(_DWORD *)(a1 + 52);
  if (v21)
  {
    uint64_t v22 = mach_port_deallocate(mach_task_self_, v21);
    if ((_DWORD)v22)
    {
      uint64_t v24 = ne_log_obj(v22, v23);
      uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        uint64_t v29 = *(void *)(a1 + 32);
        uint64_t v30 = __error();
        uint64_t v31 = strerror(*v30);
        *(_DWORD *)int buf = 138412546;
        uint64_t v34 = v29;
        __int16 v35 = 2080;
        id v36 = v31;
        _os_log_error_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "%@: Failed to deallocate the audit session mach port: %s",  buf,  0x16u);
      }
    }
  }

void sub_100063B90(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = ne_log_obj(a1, a2);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v5 = 138412290;
      uint64_t v6 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%@ is now disposable", (uint8_t *)&v5, 0xCu);
    }
  }

void *sub_100063C34(void *a1, void *a2, void *a3, void *a4, int a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  if (!a1) {
    goto LABEL_25;
  }
  v36.receiver = a1;
  v36.super_class = (Class)&OBJC_CLASS___NESMLegacySession;
  id v12 = objc_msgSendSuper2(&v36, "initWithConfiguration:andServer:", v9, v10);
  a1 = v12;
  if (!v12) {
    goto LABEL_25;
  }
  *((_DWORD *)v12 + 8_Block_object_dispose(va, 8) = a5;
  objc_storeStrong((id *)v12 + 45, a4);
  if (!v11)
  {
    uint64_t v18 = ne_log_obj(v13, v14);
    uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    *(_DWORD *)int buf = 138412290;
    int v38 = a1;
    uint64_t v20 = "%@: Failed to create a legacy session because the given configuration is not a VPN configuration";
    goto LABEL_21;
  }

  id v15 = [v11 type];
  if (v15 != (id)1)
  {
    if (v15 == (id)2)
    {
      uint64_t v17 = 3LL;
      goto LABEL_10;
    }

    uint64_t v30 = ne_log_obj(v15, v16);
    uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    *(_DWORD *)int buf = 138412290;
    int v38 = a1;
    uint64_t v20 = "%@: Failed to create a legacy session because the given configuration is not a IKEv1 or L2TP configuration";
LABEL_21:
    uint64_t v32 = v19;
    uint32_t v33 = 12;
LABEL_22:
    _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, v20, buf, v33);
    goto LABEL_24;
  }

  uint64_t v17 = 1LL;
LABEL_10:
  if (qword_1000CFBE0 != -1) {
    dispatch_once(&qword_1000CFBE0, &stru_1000BE370);
  }
  if (!qword_1000CFBD8)
  {
    uint64_t v31 = ne_log_obj(v15, v16);
    uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 138412290;
      int v38 = a1;
      uint64_t v20 = "%@: Failed to get the legacy bridge functions";
      goto LABEL_21;
    }

void sub_10006402C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2) {
    uint64_t v2 = (void *)v2[13];
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    objc_storeStrong((id *)(v4 + 104), 0LL);
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v5, 32LL, 1);
    }
  }

  else
  {
    id Property = 0LL;
  }

  uint64_t v7 = (dispatch_queue_s *)Property;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100064114;
  v10[3] = &unk_1000BED58;
  id v8 = *(id *)(a1 + 40);
  id v11 = v3;
  id v12 = v8;
  id v9 = v3;
  dispatch_async(v7, v10);
}

uint64_t sub_100064114(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  *(void *)(a1 + 32));
}

id *sub_100064128(id *a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  if (a1)
  {
    id v8 = a4;
    id v9 = -[NEProcessIdentity initFromXPCMessage:]( objc_alloc(&OBJC_CLASS___NEProcessIdentity),  "initFromXPCMessage:",  v8);
    xpc_object_t value = xpc_dictionary_get_value(v8, "SessionOptions");
    id v11 = (void *)objc_claimAutoreleasedReturnValue(value);

    if (v11 && (xpc_type_t v12 = xpc_get_type(v11), v12 == (xpc_type_t)&_xpc_type_dictionary))
    {
      xpc_object_t v17 = xpc_dictionary_get_value(v11, "listener-endpoint");
      xpc_type_t type = (xpc_type_t)objc_claimAutoreleasedReturnValue(v17);
      id v15 = type;
      if (type && (xpc_type_t type = xpc_get_type(type), type == (xpc_type_t)&_xpc_type_endpoint))
      {
        mach_port_name_t v21 = objc_alloc_init(&OBJC_CLASS___NSXPCListenerEndpoint);
        -[NSXPCListenerEndpoint _setEndpoint:](v21, "_setEndpoint:", v15);
        v30.receiver = a1;
        v30.super_class = (Class)&OBJC_CLASS___NETestAgent;
        uint64_t v22 = (id *)objc_msgSendSuper2( &v30,  "initWithPluginType:pluginVersion:pluginClass:pluginInfo:userID:",  v7,  1,  a3,  0,  0);
        uint64_t v23 = v22;
        if (v22)
        {
          objc_storeStrong(v22 + 13, v21);
          int v24 = [v9 pid];
          uint64_t v25 = objc_alloc(&OBJC_CLASS___NSArray);
          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v9 uuid]);
          uint64_t v27 = -[NSArray initWithObjects:](v25, "initWithObjects:", v26, 0LL);
          sub_10007F950((uint64_t)v23, v24, v27);

          id v28 = -[NSArray initWithObjects:](objc_alloc(&OBJC_CLASS___NSArray), "initWithObjects:", v9, 0LL);
          objc_storeStrong(v23 + 9, v28);
        }

        a1 = v23;
        uint64_t v16 = a1;
      }

      else
      {
        uint64_t v20 = ne_log_obj(type, v19);
        mach_port_name_t v21 = (NSXPCListenerEndpoint *)objc_claimAutoreleasedReturnValue(v20);
        if (os_log_type_enabled((os_log_t)v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 134217984;
          uint64_t v32 = v15;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v21,  OS_LOG_TYPE_ERROR,  "Missing endpoint (%p) in start message",  buf,  0xCu);
        }

        uint64_t v16 = 0LL;
      }
    }

    else
    {
      uint64_t v14 = ne_log_obj(v12, v13);
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "No start options available", buf, 2u);
      }

      uint64_t v16 = 0LL;
    }
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  return v16;
}

uint64_t start()
{
  errorint buf = 0LL;
  uint64_t v0 = sandbox_init("com.apple.nesessionmanager", 1uLL, &errorbuf);
  if ((v0 & 0x80000000) != 0)
  {
    uint64_t v109 = ne_log_obj(v0, v1);
    id v110 = (os_log_s *)objc_claimAutoreleasedReturnValue(v109);
    if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "com.apple.nesessionmanager";
      *(_WORD *)&_BYTE buf[12] = 2080;
      *(void *)&buf[14] = errorbuf;
      _os_log_error_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_ERROR, "sandbox_init %s failed: %s", buf, 0x16u);
    }

    sandbox_free_error(errorbuf);
    exit(1);
  }

  context = objc_autoreleasePoolPush();
  id v2 = sub_10004F238((uint64_t)&OBJC_CLASS___NESMServer);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = v3;
  if (v3)
  {
    int v5 = v3;
    uint64_t v6 = objc_sync_enter(v5);
    uint64_t v8 = ne_log_obj(v6, v7);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "NESMServer starting", buf, 2u);
    }

    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](&OBJC_CLASS___NEFileHandleMaintainer, "sharedMaintainer"));
    *(void *)int buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&uint8_t buf[16] = sub_100051524;
    __int128 v115 = &unk_1000BEC08;
    uint64_t v116 = (int *)v5;
    [v10 startOwnerModeWithEventName:@"com.apple.networkextension.file-descriptor-maintainer" handlesReceivedCallback:buf];

    id Property = objc_getProperty(v5, v11, 88LL, 1);
    *(void *)&__int128 v118 = _NSConcreteStackBlock;
    *((void *)&v118 + 1) = 3221225472LL;
    size_t v119 = sub_1000515A0;
    __int128 v120 = &unk_1000BEC08;
    uint64_t v121 = (int *)v5;
    uint64_t v13 = NECreateTimerSource(Property, 5LL, &v118);
    uint64_t v14 = objc_claimAutoreleasedReturnValue(v13);
    id v15 = (void *)v5[39];
    v5[39] = v14;

    xpc_object_t v16 = xpc_dictionary_create(0LL, 0LL, 0LL);
    pid_t v17 = getpid();
    xpc_dictionary_set_int64(v16, "nesm-pid", v17);
    xpc_set_event("com.apple.networkextension.file-descriptor-maintainer", "init", v16);

    uint64_t v19 = (_xpc_connection_s *)objc_getProperty(v5, v18, 96LL, 1);
    xpc_connection_resume(v19);

    mach_port_name_t v21 = (_xpc_connection_s *)objc_getProperty(v5, v20, 104LL, 1);
    xpc_connection_resume(v21);

    uint64_t v23 = (_xpc_connection_s *)objc_getProperty(v5, v22, 112LL, 1);
    xpc_connection_resume(v23);

    id v24 = sub_10000B4B4();
    uint64_t v25 = (int *)objc_claimAutoreleasedReturnValue(v24);
    v113[0] = _NSConcreteStackBlock;
    v113[1] = 3221225472LL;
    v113[2] = sub_10004F66C;
    v113[3] = &unk_1000BEC08;
    v113[4] = v5;
    uint64_t v26 = v113;
    uint64_t v27 = v26;
    if (v25)
    {
      id v28 = (dispatch_queue_s *)*((void *)v25 + 1);
      *(void *)int buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&uint8_t buf[16] = sub_10000B520;
      __int128 v115 = &unk_1000BED58;
      uint64_t v116 = v25;
      uint64_t v117 = v26;
      dispatch_async(v28, buf);
    }

    uint64_t v29 = v5;
    objc_sync_enter(v29);
    id v30 = objc_alloc_init(&OBJC_CLASS___NWParameters);
    sub_100050EE8(v30);
    uint64_t v31 = -[NWPathEvaluator initWithEndpoint:parameters:]( objc_alloc(&OBJC_CLASS___NWPathEvaluator),  "initWithEndpoint:parameters:",  0LL,  v30);
    objc_setProperty_atomic(v29, v32, v31, 248LL);

    id v34 = objc_getProperty(v29, v33, 248LL, 1);
    [v34 addObserver:v29 forKeyPath:@"path" options:5 context:0];

    id v35 = objc_alloc_init(&OBJC_CLASS___NWParameters);
    [v35 setRequiredInterfaceType:2];
    sub_100050EE8(v35);
    objc_super v36 = -[NWPathEvaluator initWithEndpoint:parameters:]( objc_alloc(&OBJC_CLASS___NWPathEvaluator),  "initWithEndpoint:parameters:",  0LL,  v35);
    objc_setProperty_atomic(v29, v37, v36, 256LL);

    id v39 = objc_getProperty(v29, v38, 256LL, 1);
    [v39 addObserver:v29 forKeyPath:@"path" options:5 context:0];

    id v40 = objc_alloc_init(&OBJC_CLASS___NWParameters);
    [v40 setRequiredInterfaceType:1];
    sub_100050EE8(v40);
    __int16 v41 = -[NWPathEvaluator initWithEndpoint:parameters:]( objc_alloc(&OBJC_CLASS___NWPathEvaluator),  "initWithEndpoint:parameters:",  0LL,  v40);
    objc_setProperty_atomic(v29, v42, v41, 264LL);

    id v44 = objc_getProperty(v29, v43, 264LL, 1);
    [v44 addObserver:v29 forKeyPath:@"path" options:5 context:0];

    if ((*((_BYTE *)v29 + 11) & 1) == 0)
    {
      *((_BYTE *)v29 + 11) = 1;
      uint64_t v47 = nwi_state_copy(v45, v46);
      unint64_t v48 = sub_10004CB98(v47);
      objc_setProperty_atomic(v29, v49, v48, 72LL);

      if (v47) {
        uint64_t v50 = nwi_state_release(v47);
      }
      notify_key = (const char *)nwi_state_get_notify_key(v50);
      uint64_t v53 = (dispatch_queue_s *)objc_getProperty(v29, v52, 88LL, 1);
      *(void *)int buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&uint8_t buf[16] = sub_100050F54;
      __int128 v115 = &unk_1000BE1E8;
      uint64_t v116 = v29;
      uint32_t v54 = notify_register_dispatch(notify_key, v29 + 5, v53, buf);

      if (v54)
      {
        uint64_t v57 = ne_log_obj(v55, v56);
        uint64_t v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
        if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v11_Block_object_dispose(va, 8) = 67109120;
          DWORD1(v11_Block_object_dispose(va, 8) = v54;
          _os_log_error_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_ERROR,  "Failed to register for NWI notifications: %u",  (uint8_t *)&v118,  8u);
        }
      }
    }

    objc_sync_exit(v29);
    uint64_t v59 = v29;
    objc_sync_enter(v59);
    if ((v59[3] & 1) == 0)
    {
      *((_BYTE *)v59 + 12) = 1;
      unsigned int v60 = objc_alloc(&OBJC_CLASS___NESMPowerManager);
      id v62 = objc_getProperty(v59, v61, 88LL, 1);
      id v63 = v62;
      uint64_t v64 = v59;
      id v65 = v63;
      if (v60)
      {
        *(void *)int buf = v60;
        *(void *)&buf[8] = &OBJC_CLASS___NESMPowerManager;
        uint64_t v66 = (NESMPowerManager *)objc_msgSendSuper2((objc_super *)buf, "init");
        unsigned int v60 = v66;
        if (v66)
        {
          objc_storeWeak((id *)&v66->_delegate, v64);
          objc_storeStrong((id *)&v60->_queue, v62);
          v60->_powerState = 2LL;
          v60->_sleepDate = -1LL;
        }
      }

      objc_setProperty_atomic(v64, v67, v60, 136LL);
      id v69 = objc_getProperty(v64, v68, 136LL, 1);
      id v70 = v69;
      if (v69)
      {
        io_connect_t v71 = IORegisterForSystemPower( v69,  (IONotificationPortRef *)v69 + 8,  (IOServiceInterestCallback)sub_100086CF8,  (io_object_t *)v69 + 3);
        *((_DWORD *)v70 + 2) = v71;
        if (v71)
        {
          uint64_t v73 = (IONotificationPort *)*((void *)v70 + 8);
          uint64_t v74 = (dispatch_queue_s *)objc_getProperty(v70, v72, 48LL, 1);
          IONotificationPortSetDispatchQueue(v73, v74);
        }
      }
    }

    objc_sync_exit(v59);

    uint64_t v75 = v59;
    objc_sync_enter(v75);
    if ((*((_BYTE *)v75 + 13) & 1) == 0)
    {
      *((_BYTE *)v75 + 13) = 1;
      if (dlopen("/System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices", 16))
      {
        id v77 = objc_getProperty(v75, v76, 88LL, 1);
        uint64_t v78 = (const char *)kSBSLockStateNotifyKey;
        uint64_t v79 = (dispatch_queue_s *)v77;
        *(void *)int buf = _NSConcreteStackBlock;
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&uint8_t buf[16] = sub_100050C20;
        __int128 v115 = &unk_1000BE1E8;
        uint64_t v116 = v75;
        uint32_t v80 = notify_register_dispatch(v78, v75 + 6, v79, buf);

        if (v80)
        {
          uint64_t v83 = ne_log_obj(v81, v82);
          uint64_t v84 = (os_log_s *)objc_claimAutoreleasedReturnValue(v83);
          if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v11_Block_object_dispose(va, 8) = 67109120;
            DWORD1(v11_Block_object_dispose(va, 8) = v80;
            _os_log_error_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_ERROR,  "Failed to register for user state notifications: %u",  (uint8_t *)&v118,  8u);
          }
        }
      }
    }

    objc_sync_exit(v75);

    uint64_t v85 = v75;
    objc_sync_enter(v85);
    *(void *)&__int128 v118 = _NSConcreteStackBlock;
    *((void *)&v118 + 1) = 3221225472LL;
    size_t v119 = sub_10005084C;
    __int128 v120 = &unk_1000BE1E8;
    uint64_t v121 = v85;
    uint64_t v86 = objc_retainBlock(&v118);
    __int16 v88 = (dispatch_queue_s *)objc_getProperty(v85, v87, 88LL, 1);
    notify_register_dispatch("com.apple.system.config.network_change.nwi", v85 + 7, v88, v86);

    uint64_t v90 = (dispatch_queue_s *)objc_getProperty(v85, v89, 88LL, 1);
    notify_register_dispatch("com.apple.system.config.network_change.dns", v85 + 8, v90, v86);

    uint64_t v92 = (dispatch_queue_s *)objc_getProperty(v85, v91, 88LL, 1);
    *(void *)int buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&uint8_t buf[16] = sub_100050B54;
    __int128 v115 = &unk_1000BE260;
    uint64_t v116 = v85;
    int v93 = v86;
    uint64_t v117 = v93;
    notify_register_dispatch("com.apple.system.config.proxy_change", v85 + 9, v92, buf);

    objc_sync_exit(v85);
    sub_10004F6E8((uint64_t)v85);
    uint64_t v95 = (dispatch_queue_s *)objc_getProperty(v85, v94, 88LL, 1);
    *(void *)int buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&uint8_t buf[16] = sub_10004FD9C;
    __int128 v115 = &unk_1000BE088;
    uint64_t v116 = v85;
    xpc_set_event_stream_handler("com.apple.networkextension.network-detection", v95, buf);
    *((_BYTE *)v85 + _Block_object_dispose(va, 8) = &_CNPluginMonitorStart != 0LL;
    if (&_CNPluginMonitorStart)
    {
      id v98 = objc_getProperty(v85, v97, 88LL, 1);
      *(void *)int buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&uint8_t buf[16] = sub_10004FAB4;
      __int128 v115 = &unk_1000BE300;
      uint64_t v116 = v85;
      uint64_t v99 = CNPluginMonitorStart(0LL, v98, buf);
      int v100 = v99;
      uint64_t v102 = ne_log_obj(v99, v101);
      id v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);
      uint64_t v104 = v103;
      if (v100)
      {
        if (os_log_type_enabled(v103, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(v11_Block_object_dispose(va, 8) = 136315138;
          *(void *)((char *)&v118 + 4) = "-[NESMServer registerForCaptiveNetworkPluginChanges]";
          _os_log_debug_impl( (void *)&_mh_execute_header,  v104,  OS_LOG_TYPE_DEBUG,  "%s: Started CNPluginMonitor",  (uint8_t *)&v118,  0xCu);
        }
      }

      else if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v11_Block_object_dispose(va, 8) = 136315138;
        *(void *)((char *)&v118 + 4) = "-[NESMServer registerForCaptiveNetworkPluginChanges]";
        _os_log_error_impl( (void *)&_mh_execute_header,  v104,  OS_LOG_TYPE_ERROR,  "%s: Failed to start CNPluginMonitor",  (uint8_t *)&v118,  0xCu);
      }
    }

    else
    {
      uint64_t v105 = ne_log_obj(v96, v97);
      uint64_t v104 = (os_log_s *)objc_claimAutoreleasedReturnValue(v105);
      if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v104,  OS_LOG_TYPE_DEFAULT,  "Captive Plugin Monitor is not available",  buf,  2u);
      }
    }

    id v107 = (dispatch_queue_s *)objc_getProperty(v85, v106, 88LL, 1);
    *(void *)int buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&uint8_t buf[16] = sub_10004F850;
    __int128 v115 = &unk_1000BE088;
    uint64_t v116 = v85;
    xpc_set_event_stream_handler("com.apple.notifyd.matching", v107, buf);
    signal(13, (void (__cdecl *)(int))1);
    objc_sync_exit(v85);
  }

  objc_autoreleasePoolPop(context);
  CFRunLoopRun();
  return 0LL;
}

void sub_100064EF4(_Unwind_Exception *a1)
{
}

id sub_100068264(uint64_t a1, const char *a2)
{
  id result = *(id *)(a1 + 32);
  if (result)
  {
    id result = objc_getProperty(result, a2, 32LL, 1);
    if (result)
    {
      uint64_t v5 = ne_log_obj(result, v4);
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = *(void *)(a1 + 40);
        if (v7) {
          uint64_t v9 = *(void *)(v7 + 24);
        }
        else {
          uint64_t v9 = 0LL;
        }
        id v10 = (objc_class *)objc_opt_class(v7);
        SEL v11 = NSStringFromClass(v10);
        xpc_type_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        int v17 = 138412802;
        uint64_t v18 = v8;
        __int16 v19 = 2048;
        uint64_t v20 = v9;
        __int16 v21 = 2112;
        SEL v22 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%@: State timer (%llu seconds) fired in state %@",  (uint8_t *)&v17,  0x20u);
      }

      id Property = *(dispatch_source_s **)(a1 + 32);
      if (Property) {
        id Property = (dispatch_source_s *)objc_getProperty(Property, v13, 32LL, 1);
      }
      dispatch_source_cancel(Property);
      id result = *(id *)(a1 + 32);
      if (result)
      {
        objc_setProperty_atomic(result, v15, 0LL, 32LL);
        id result = *(id *)(a1 + 32);
        if (result)
        {
          id result = objc_getProperty(result, v16, 16LL, 1);
          if (result) {
            return [*(id *)(a1 + 32) handleTimeout];
          }
        }
      }
    }
  }

  return result;
}

void sub_100069118(void *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    objc_setProperty_atomic(a1, v3, 0LL, 48LL);
    if (!v4)
    {
      uint64_t v7 = ne_log_obj(v5, v6);
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        id Property = objc_getProperty(a1, v9, 16LL, 1);
        SEL v11 = (objc_class *)objc_opt_class(a1);
        xpc_type_t v12 = NSStringFromClass(v11);
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
        int v16 = 138412546;
        id v17 = Property;
        __int16 v18 = 2112;
        __int16 v19 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%@ in state %@: no start message available",  (uint8_t *)&v16,  0x16u);
      }
    }

    id v14 = objc_getProperty(a1, v6, 16LL, 1);
    [v14 setState:1];
    if (v4)
    {
      id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 stateHandler]);
      [v15 handleStartMessage:v4];
    }
  }
}

uint64_t sub_100069C6C(uint64_t a1)
{
  return sub_10007B8E8(*(void *)(a1 + 32), 1);
}

void sub_10006A3E0(void *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = ne_log_obj(a1, a2);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id Property = objc_getProperty(a1, v5, 16LL, 1);
      uint64_t v7 = (objc_class *)objc_opt_class(a1);
      uint64_t v8 = NSStringFromClass(v7);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      id v11 = objc_msgSend(objc_getProperty(a1, v10, 16, 1), "sessionType");
      int v47 = 138412802;
      id v48 = Property;
      __int16 v49 = 2112;
      uint64_t v50 = v9;
      __int16 v51 = 2080;
      uint64_t v52 = ne_session_type_to_string(v11);
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%@ in state %@: restart %s session",  (uint8_t *)&v47,  0x20u);
    }

    id v13 = objc_msgSend(objc_getProperty(a1, v12, 16, 1), "configuration");
    id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    unsigned __int8 v15 = [v14 isEnabled];

    if ((v15 & 1) == 0)
    {
      uint64_t v31 = ne_log_obj(v16, v17);
      uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        id v33 = objc_getProperty(a1, v32, 16LL, 1);
        int v47 = 138412290;
        id v48 = v33;
        id v30 = "%@: Ignore restart because the configuration is not enabled";
        goto LABEL_11;
      }

void sub_10006A6FC(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 16LL, 1);
  }
  unsigned int v5 = [Property restartPending];
  id v6 = *(id *)(a1 + 32);
  if (v5)
  {
    sub_10006A3E0(v6, (uint64_t)v4);
  }

  else
  {
    if (v6) {
      id v6 = objc_getProperty(v6, v4, 16LL, 1);
    }
    [v6 setState:1];
  }

id sub_10006D970(uint64_t a1)
{
  v9[0] = *(void *)(a1 + 32);
  v8[0] = @"tunnelType";
  v8[1] = @"OnDemandConfiguration";
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 64)));
  v9[1] = v2;
  _DWORD v8[2] = @"OnDemandConnection";
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 65)));
  v9[2] = v3;
  v8[3] = @"tunnelConnectDuration";
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 40)));
  v9[3] = v4;
  void v8[4] = @"tunnelDataCount";
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *(void *)(a1 + 56) + *(void *)(a1 + 48)));
  v9[4] = v5;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v9,  v8,  5LL));

  return v6;
}

void sub_10006DAAC(id a1)
{
  if (!mach_timebase_info(&info))
  {
    LODWORD(v1) = info.numer;
    LODWORD(v2) = info.denom;
    *(double *)&qword_1000CFBF8 = (double)v1 / (double)v2 / 1000.0 / 1000000.0;
  }

void sub_10006DB00(id a1, unint64_t a2, NSArray *a3)
{
  uint64_t v3 = ne_log_obj(a1, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    id v6 = "-[NESMIKEv2VPNSession setStatus:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%s: user acknowledged VPN notification",  (uint8_t *)&v5,  0xCu);
  }
}

LABEL_27:
        id v35 = objc_getProperty(self, v23, 376LL, 1);
LABEL_28:
        [v35 handleStartMessage:v4];
LABEL_29:

        goto LABEL_30;
      }
    }

    objc_setProperty_atomic(self, v20, 0LL, 368LL);
    goto LABEL_15;
  }

  uint64_t v7 = (void *)v6;
  uint64_t v8 = -[NESMFilterSession waitForPerApp](self, "waitForPerApp");

  if (!v8) {
    goto LABEL_9;
  }
  id v11 = ne_log_obj(v9, v10);
  SEL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 138412290;
    id v63 = self;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%@: Ignore Start for perApp Content Filter - no appRule or app not installed",  buf,  0xCu);
  }

  if (self) {
    id v14 = objc_getProperty(self, v13, 376LL, 1);
  }
  else {
    id v14 = 0LL;
  }
  [v14 handleStop];
LABEL_30:
}

uint64_t sub_10006FBB4(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  BOOL v2 = sub_1000700D4((void *)a1);
  if (!v2)
  {
    uint64_t v11 = ne_log_obj(v2, v3);
    SEL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      id v40 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 configuration]);
      SEL v41 = (void *)objc_claimAutoreleasedReturnValue([v40 name]);
      id v42 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 configuration]);
      SEL v43 = (void *)objc_claimAutoreleasedReturnValue([v42 externalIdentifier]);
      id v44 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 configuration]);
      uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v44 contentFilter]);
      SEL v46 = (void *)objc_claimAutoreleasedReturnValue([v45 perApp]);
      id v47 = [v46 copyCachedMachOUUIDs];
      *(_DWORD *)int buf = 136315906;
      *(void *)&uint8_t buf[4] = "-[NESMFilterSession resetPolicies]";
      *(_WORD *)&_BYTE buf[12] = 2112;
      *(void *)&buf[14] = v41;
      *(_WORD *)&buf[22] = 2112;
      uint64_t v64 = v43;
      LOWORD(v65) = 2112;
      *(void *)((char *)&v65 + 2) = v47;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "%s: resetPolicies - <%@> <%@> UUIDs %@ <Skip - plugin not ready>",  buf,  0x2Au);
    }

    uint64_t v10 = 0LL;
    goto LABEL_28;
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 configuration]);
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 externalIdentifier]);
  if (!v5)
  {

    goto LABEL_10;
  }

  id v6 = (void *)v5;
  unsigned __int8 v7 = [(id)a1 waitForPerApp];

  if ((v7 & 1) == 0)
  {
LABEL_10:
    uint64_t v13 = ne_log_obj(v8, v9);
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      id v48 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 configuration]);
      __int16 v49 = (void *)objc_claimAutoreleasedReturnValue([v48 name]);
      uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 configuration]);
      __int16 v51 = (void *)objc_claimAutoreleasedReturnValue([v50 externalIdentifier]);
      uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 configuration]);
      uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([v52 contentFilter]);
      uint32_t v54 = (void *)objc_claimAutoreleasedReturnValue([v53 perApp]);
      id v55 = [v54 copyCachedMachOUUIDs];
      *(_DWORD *)int buf = 136315906;
      *(void *)&uint8_t buf[4] = "-[NESMFilterSession resetPolicies]";
      *(_WORD *)&_BYTE buf[12] = 2112;
      *(void *)&buf[14] = v49;
      *(_WORD *)&buf[22] = 2112;
      uint64_t v64 = v51;
      LOWORD(v65) = 2112;
      *(void *)((char *)&v65 + 2) = v55;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "%s: resetPolicies - <%@> <%@> UUIDs %@",  buf,  0x2Au);
    }

    SEL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue([(id)a1 policySession]);
    int v15 = *(_DWORD *)(a1 + 356);
    id Property = objc_getProperty((id)a1, v16, 400LL, 1);
    id v19 = sub_100015CE0(Property, v18);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v20 firstObject]);
    SEL v22 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 uid]);
    unsigned int v58 = [v22 intValue];
    id v24 = objc_getProperty((id)a1, v23, 360LL, 1);
    id v26 = objc_getProperty((id)a1, v25, 368LL, 1);
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 configuration]);
    id v28 = (void *)objc_claimAutoreleasedReturnValue([v27 externalIdentifier]);
    SEL v61 = v22;
    id v62 = v20;
    unsigned int v60 = v27;
    int v59 = v15;
    if (v28)
    {
      uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 configuration]);
      uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v57 contentFilter]);
      id v29 = (void *)objc_claimAutoreleasedReturnValue([v56 perApp]);
    }

    else
    {
      id v29 = 0LL;
    }

    id v30 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 configuration]);
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v30 contentFilter]);
    [v31 disableEncryptedDNSSettings];
    id v32 = v21;
    id v33 = v24;
    id v34 = v26;
    id v35 = v29;
    objc_super v36 = v35;
    if (v12 && *((_DWORD *)v12 + 2) == 4)
    {
      if (v34) {
        BOOL v37 = v35 == 0LL;
      }
      else {
        BOOL v37 = 1;
      }
      *(void *)int buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472LL;
      char v38 = !v37;
      *(void *)&uint8_t buf[16] = sub_100038DD0;
      uint64_t v64 = &unk_1000BDD98;
      *(void *)&__int128 v65 = v12;
      int v69 = v59;
      char v71 = v38;
      *((void *)&v65 + 1) = v34;
      id v66 = v32;
      unsigned int v70 = v58;
      id v67 = v33;
      id v68 = v36;
      uint64_t v10 = sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, buf);
    }

    else
    {
      uint64_t v10 = 0LL;
    }

    if (v28)
    {
    }

LABEL_28:
    return v10;
  }

  return 0LL;
}

BOOL sub_1000700D4(void *a1)
{
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 pluginType]);

  uint64_t v6 = ne_log_obj(v4, v5);
  unsigned __int8 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v34 = 138412802;
    id v35 = a1;
    __int16 v36 = 2112;
    BOOL v37 = v3;
    __int16 v38 = 1024;
    int v39 = 1;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%@: Check Filter Plugin installation for %@ (isIP %d)",  (uint8_t *)&v34,  0x1Cu);
  }

  if (v3)
  {
    if (a1[49] == 5LL)
    {
      uint64_t v10 = ne_log_obj(v8, v9);
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v34 = 138412290;
        id v35 = a1;
        SEL v12 = "%@: Filter Plugin is being updated";
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v34, 0xCu);
      }
    }

    else
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
      int v15 = (void *)objc_claimAutoreleasedReturnValue([v14 contentFilter]);
      unsigned __int8 v16 = [v15 isEnabled];

      if ((v16 & 1) != 0)
      {
        id v19 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 contentFilter]);
        __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v20 provider]);
        if ([v21 filterSockets])
        {
        }

        else
        {
          id v24 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
          SEL v25 = (void *)objc_claimAutoreleasedReturnValue([v24 contentFilter]);
          id v26 = (void *)objc_claimAutoreleasedReturnValue([v25 provider]);
          unsigned __int8 v27 = [v26 filterBrowsers];

          if ((v27 & 1) == 0)
          {
            uint64_t v33 = ne_log_obj(v28, v29);
            uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
            if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_14;
            }
            int v34 = 138412290;
            id v35 = a1;
            SEL v12 = "%@: filterSockets (and filterBrowsers) is not enabled";
            goto LABEL_13;
          }
        }

        uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NELaunchServices pluginProxyWithIdentifier:type:pluginClass:extensionPoint:]( &OBJC_CLASS___NELaunchServices,  "pluginProxyWithIdentifier:type:pluginClass:extensionPoint:",  0LL,  v3,  4LL,  0LL));
        if (!v11)
        {
          uint64_t v31 = ne_log_obj(0LL, v30);
          id v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
          {
            int v34 = 138412290;
            id v35 = a1;
            _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "%@: Filter Plugin is not available in launch services",  (uint8_t *)&v34,  0xCu);
          }
        }

        BOOL v13 = v11 != 0LL;
        goto LABEL_15;
      }

      uint64_t v22 = ne_log_obj(v17, v18);
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v34 = 138412290;
        id v35 = a1;
        SEL v12 = "%@: Configuration is not enabled";
        goto LABEL_13;
      }
    }

id sub_100070400(uint64_t a1)
{
  return [*(id *)(a1 + 32) startWithCommand:0 isOnDemand:0];
}

void sub_100070430(_BYTE *a1, char a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 contentFilter]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 provider]);
  if ([v6 disableDefaultDrop] & 1) != 0 || (a2)
  {

    goto LABEL_11;
  }

  BOOL v7 = sub_1000700D4(a1);

  if (!v7)
  {
LABEL_11:
    id v22 = [a1 setDefaultDropType:0];
    uint64_t v24 = ne_log_obj(v22, v23);
    SEL v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v51) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Filter removing perApp Drop policies",  (uint8_t *)&v51,  2u);
    }

    id v26 = (void *)objc_claimAutoreleasedReturnValue([a1 policySession]);
    sub_10003A620(v26, v27);

    a1[353] = 0;
    goto LABEL_14;
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
  uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 externalIdentifier]);
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
    SEL v12 = (void *)objc_claimAutoreleasedReturnValue([v11 contentFilter]);
    BOOL v13 = (void *)objc_claimAutoreleasedReturnValue([v12 perApp]);

    if (v13)
    {
      id v14 = [a1 waitForPerApp];
      char v15 = (char)v14;
      uint64_t v17 = ne_log_obj(v14, v16);
      uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      if ((v15 & 1) != 0)
      {
        if (v19)
        {
          LOWORD(v51) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Filter removing perApp Drop policies",  (uint8_t *)&v51,  2u);
        }

        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([a1 policySession]);
        sub_10003A620(v20, v21);

        a1[353] = 0;
      }

      else
      {
        if (v19)
        {
          LOWORD(v51) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Filter installing perApp Drop policies",  (uint8_t *)&v51,  2u);
        }

        int v39 = (void *)objc_claimAutoreleasedReturnValue([a1 policySession]);
        id v40 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
        SEL v41 = (void *)objc_claimAutoreleasedReturnValue([v40 contentFilter]);
        id v42 = (id)objc_claimAutoreleasedReturnValue([v41 perApp]);
        SEL v43 = v42;
        if (v39)
        {
          if (v42)
          {
            uint64_t v44 = objc_claimAutoreleasedReturnValue([v42 appRules]);
            if (v44)
            {
              uint64_t v45 = (void *)v44;
              SEL v46 = (void *)objc_claimAutoreleasedReturnValue([v43 appRules]);
              id v47 = [v46 count];

              if (v47)
              {
                __int16 v51 = _NSConcreteStackBlock;
                *(void *)&__int128 v52 = 3221225472LL;
                *((void *)&v52 + 1) = sub_10003A2C8;
                uint64_t v53 = &unk_1000BDAC8;
                uint32_t v54 = v39;
                id v55 = v43;
                sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, &v51);
              }
            }
          }
        }

        a1[353] = 1;
      }
    }
  }

  else
  {
  }

  id v48 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
  __int16 v49 = (void *)objc_claimAutoreleasedReturnValue([v48 externalIdentifier]);
  if (v49)
  {
    char v50 = a1[353];

    if ((v50 & 1) == 0)
    {
      [a1 setDefaultDropType:0];
LABEL_14:
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([a1 policySession]);
      sub_10003ACD0(v28, v29);
      char v30 = 0;
      goto LABEL_15;
    }
  }

  else
  {
  }

  [a1 setDefaultDropType:5];
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([a1 policySession]);
  if (v28)
  {
    __int16 v51 = _NSConcreteStackBlock;
    *(void *)&__int128 v52 = 3221225472LL;
    *((void *)&v52 + 1) = sub_10003A7AC;
    uint64_t v53 = &unk_1000BDAA0;
    uint32_t v54 = v28;
    sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, &v51);
  }

  char v30 = 1;
LABEL_15:

  id v31 = [a1 setIsDropPersistent:1];
  uint64_t v33 = ne_log_obj(v31, v32);
  int v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v35 = [a1 defaultDropType];
    unsigned int v36 = [a1 isDropPersistent];
    BOOL v37 = "Non-Persistent";
    if (v36) {
      BOOL v37 = "Persistent";
    }
    LODWORD(v51) = 67109378;
    HIDWORD(v51) = v35;
    LOWORD(v52) = 2080;
    *(void *)((char *)&v52 + 2) = v37;
    _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Filter setting IP Drop-All to %d (%s)",  (uint8_t *)&v51,  0x12u);
  }

  __int16 v38 = (void *)objc_claimAutoreleasedReturnValue([a1 server]);
  sub_10005241C(v38, @"drop_all_feature_content_filter", v30);
}

uint64_t sub_1000708F4(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  unint64_t v1 = a1;
  objc_sync_enter(v1);
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue([v1 configuration]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 externalIdentifier]);
  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v1 configuration]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 contentFilter]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 perApp]);
    BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([v6 appRules]);
    id v8 = [v7 count];

    if (!v8)
    {
      uint64_t v11 = ne_log_obj(v9, v10);
      SEL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v13 = (void *)objc_claimAutoreleasedReturnValue([v1 configuration]);
        id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 name]);
        int v57 = 138412290;
        id v58 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Fail to allocate control unit - perApp Content Filter missing appRules for %@",  (uint8_t *)&v57,  0xCu);
      }

      goto LABEL_29;
    }
  }

  else
  {
  }

  char v15 = (void *)objc_claimAutoreleasedReturnValue([v1 configuration]);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 contentFilter]);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 provider]);
  if ([v17 filterSockets])
  {
    int v18 = v1[89];

    if (!v18)
    {
LABEL_13:
      id v23 = (id)objc_claimAutoreleasedReturnValue([v1 configuration]);
      objc_opt_self(&OBJC_CLASS___NESMFilterSession);
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v23 contentFilter]);
      SEL v25 = (void *)objc_claimAutoreleasedReturnValue([v24 provider]);
      int v26 = sub_100070EC8((uint64_t)&OBJC_CLASS___NESMFilterSession, v25);

      unsigned __int8 v27 = (void *)objc_claimAutoreleasedReturnValue([v23 contentFilter]);
      if ((uint64_t)[v27 grade] <= 0)
      {
      }

      else
      {
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v23 contentFilter]);
        uint64_t v29 = (uint64_t)[v28 grade];

        if (v29 < 3)
        {
          os_unfair_lock_lock(&stru_1000CFC00);
          uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v23 externalIdentifier]);

          if (v32)
          {
            unsigned int v35 = 0;
            while (((dword_1000CFC04 >> v35) & 1) != 0)
            {
              if (++v35 == 7)
              {
                uint64_t v36 = ne_log_obj(v33, v34);
                BOOL v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
                if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v23 name]);
                  int v57 = 138412290;
                  id v58 = v56;
                  _os_log_error_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "allocateFilterControlUnitForConfiguration: <%@> no more slot",  (uint8_t *)&v57,  0xCu);
                }

                unsigned int v35 = 8;
                break;
              }
            }
          }

          else
          {
            unsigned int v35 = 7;
          }

          uint64_t v42 = ne_log_obj(v33, v34);
          SEL v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v23 name]);
            int v57 = 138412546;
            id v58 = v44;
            __int16 v59 = 1024;
            int v60 = v35;
            _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "allocateFilterControlUnitForConfiguration: <%@> slot %d",  (uint8_t *)&v57,  0x12u);
          }

          if (v35 < 8)
          {
            dword_1000CFC04 |= 1 << v35;
            os_unfair_lock_unlock(&stru_1000CFC00);

            uint64_t v49 = ne_log_obj(v47, v48);
            char v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
            int v51 = (1 << v35) | v26;
            if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
            {
              int v57 = 67109120;
              LODWORD(v5_Block_object_dispose(va, 8) = v51;
              _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "Allocated control unit %u",  (uint8_t *)&v57,  8u);
            }

            v1[89] = v51;
            goto LABEL_23;
          }

          uint64_t v52 = ne_log_obj(v45, v46);
          uint64_t v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
          if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
          {
            id v55 = (void *)objc_claimAutoreleasedReturnValue([v23 name]);
            int v57 = 138412546;
            id v58 = v55;
            __int16 v59 = 1024;
            int v60 = dword_1000CFC04;
            _os_log_error_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_ERROR,  "allocateFilterControlUnitForConfiguration: <%@> Failed to allocate a control unit, unitMap = %x",  (uint8_t *)&v57,  0x12u);
          }

          os_unfair_lock_unlock(&stru_1000CFC00);
LABEL_28:

LABEL_29:
          uint64_t v38 = 0LL;
          goto LABEL_30;
        }
      }

      uint64_t v39 = ne_log_obj(v30, v31);
      id v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        uint32_t v54 = (void *)objc_claimAutoreleasedReturnValue([v23 contentFilter]);
        int v57 = 134217984;
        id v58 = [v54 grade];
        _os_log_error_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_ERROR,  "Failed to allocate a control unit, configuration has an invalid filter grade: %ld",  (uint8_t *)&v57,  0xCu);
      }

      goto LABEL_28;
    }
  }

  else
  {
    BOOL v19 = (void *)objc_claimAutoreleasedReturnValue([v1 configuration]);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 contentFilter]);
    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v20 provider]);
    if ([v21 filterBrowsers])
    {
      int v22 = v1[89];

      if (!v22) {
        goto LABEL_13;
      }
    }

    else
    {
    }
  }

void sub_100070E9C(_Unwind_Exception *a1)
{
}

uint64_t sub_100070EC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  if ([v3 filterBrowsers] && !objc_msgSend(v3, "filterSockets"))
  {
    LODWORD(v4) = 0x80000000;
  }

  else if (([v3 filterBrowsers] & 1) != 0 {
         || ([v3 filterSockets] & 1) == 0)
  }
  {
    if ([v3 filterBrowsers])
    {
      LODWORD(v4) = 0;
    }

    else if ([v3 filterSockets])
    {
      LODWORD(v4) = 0;
    }

    else
    {
      LODWORD(v4) = -1073741824;
    }
  }

  else
  {
    LODWORD(v4) = 0x40000000;
  }

  else {
    uint64_t v4 = v4;
  }

  return v4;
}

void sub_100070F78(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 56) == 1 && (uint64_t v2 = *(void *)(a1 + 32)) != 0 && (*(_BYTE *)(v2 + 354) & 1) != 0)
  {
    uint64_t pid = xpc_connection_get_pid(*(xpc_connection_t *)(a1 + 40));
    uint64_t v5 = *(void **)(a1 + 32);
    if (v5) {
      id Property = objc_getProperty(v5, v3, 400LL, 1);
    }
    else {
      id Property = 0LL;
    }
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_10007111C;
    v10[3] = &unk_1000BE4F8;
    id v11 = *(id *)(a1 + 48);
    BOOL v7 = v10;
    if (Property)
    {
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472LL;
      v14[2] = sub_100016D90;
      v14[3] = &unk_1000BEA88;
      void v14[4] = Property;
      id v8 = (void *)objc_claimAutoreleasedReturnValue([Property remotePluginObjectWithErrorHandler:v14]);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472LL;
      _DWORD v12[2] = sub_100016E2C;
      v12[3] = &unk_1000BD848;
      void v12[4] = Property;
      BOOL v13 = v7;
      [v8 getFilterClientConnectionWithCompletionHandler:pid completionHandler:v12];
    }
  }

  else
  {
    xpc_object_t message = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 48));
    xpc_dictionary_set_int64(message, "error", 3LL);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 40), message);
  }

void sub_10007111C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 32));
  xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(*(xpc_object_t *)(a1 + 32));
  xpc_type_t type = (xpc_type_t)objc_claimAutoreleasedReturnValue(remote_connection);
  xpc_type_t v11 = type;
  if (reply)
  {
    xpc_type_t type = xpc_get_type(reply);
    if (type == (xpc_type_t)&_xpc_type_dictionary && v11 != 0LL)
    {
      xpc_type_t type = xpc_get_type(v11);
      if (type == (xpc_type_t)&_xpc_type_connection)
      {
        if (v5
          && (xpc_type_t type = (xpc_type_t)objc_claimAutoreleasedReturnValue([v5 _endpoint])) != 0
          && (v15 = type, xpc_type_t v16 = xpc_get_type(type), v15, v16 == (xpc_type_t)&_xpc_type_endpoint))
        {
          uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v5 _endpoint]);
          xpc_dictionary_set_value(reply, "new-connection", v20);

          if (!v6) {
            goto LABEL_18;
          }
        }

        else
        {
          uint64_t v17 = ne_log_obj(type, v10);
          int v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v21) = 0;
            _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "Failed to get a valid XPC endpoint from the filter plugin",  (uint8_t *)&v21,  2u);
          }

          xpc_dictionary_set_int64(reply, "error", 3LL);
          if (!v6) {
            goto LABEL_18;
          }
        }

        id v19 = v6;
        xpc_dictionary_set_data(reply, "crypto-key", [v19 bytes], (size_t)objc_msgSend(v19, "length"));
LABEL_18:
        xpc_connection_send_message(v11, reply);
        goto LABEL_10;
      }
    }
  }

  uint64_t v13 = ne_log_obj(type, v10);
  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    int v21 = 134218240;
    xpc_object_t v22 = reply;
    __int16 v23 = 2048;
    xpc_type_t v24 = v11;
    _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Failed to create a reply (%p) or a connection to send it over (%p) when sending the filter connection to the client",  (uint8_t *)&v21,  0x16u);
  }

LABEL_10:
}

id sub_100071364(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = ne_log_obj(a1, a2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v8 = 138412290;
    uint64_t v9 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%@: Handling installed apps change",  (uint8_t *)&v8,  0xCu);
  }

  sub_10006FBB4(*(void *)(a1 + 32));
  id v6 = *(_BYTE **)(a1 + 32);
  if (v6)
  {
    sub_100070430(v6, 0);
    id v6 = *(_BYTE **)(a1 + 32);
  }

  return [v6 restartSession];
}

id sub_100071428(uint64_t a1)
{
  uint64_t v2 = *(_BYTE **)(a1 + 32);
  if (v2)
  {
    sub_100070430(v2, 0);
    uint64_t v2 = *(_BYTE **)(a1 + 32);
  }

  return [v2 startWithCommand:0 isOnDemand:0];
}

void sub_100071460(void *self, const char *a2)
{
  if (self)
  {
    if ((_DWORD)a2)
    {
      self[54] = 500LL;
      self[55] = 0LL;
    }

    if (objc_getProperty(self, a2, 424LL, 1))
    {
      id Property = (dispatch_source_s *)objc_getProperty(self, v3, 424LL, 1);
      dispatch_source_cancel(Property);
      objc_setProperty_atomic(self, v5, 0LL, 424LL);
    }
  }

void sub_1000714E4(id *self, const char *a2)
{
  if (self && self[49] != a2)
  {
    if (!objc_getProperty(self, a2, 384LL, 1)
      || (id v5 = objc_getProperty(self, v4, 384LL, 1),
          id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a2)),
          BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:v6]),
          v5,
          v6,
          !v7))
    {
      uint64_t v8 = objc_claimAutoreleasedReturnValue(+[NESMFilterSessionState stateWithType:](&OBJC_CLASS___NESMFilterSessionState, "stateWithType:", a2));
      if (!v8) {
        __assert_rtn("-[NESMFilterSession setState:]", "NESMFilterSession.m", 333, "0");
      }
      BOOL v7 = (void *)v8;
      if (!objc_getProperty(self, v9, 384LL, 1))
      {
        xpc_type_t v11 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        objc_setProperty_atomic(self, v12, v11, 384LL);
      }

      id v13 = objc_getProperty(self, v10, 384LL, 1);
      id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a2));
      [v13 setObject:v7 forKeyedSubscript:v14];
    }

    id v15 = self[49];
    [self[47] leave];
    self[49] = (id)a2;
    id v16 = self[47];
    self[47] = v7;
    id v17 = v7;

    [self[47] enterWithSession:self];
    if (v15)
    {
      switch((unint64_t)self[49])
      {
        case 1uLL:
          if ((*((_BYTE *)self + 355) & 1) == 0 && [self lastStopReason] != 6)
          {
            sub_100071788(self, v18);
            goto LABEL_20;
          }

          uint64_t v19 = 1LL;
          sub_100070430(self, 1);
          uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([self server]);
          [v20 deregisterSession:self];

          break;
        case 2uLL:
          uint64_t v19 = 2LL;
          break;
        case 3uLL:
          sub_100071460(self, (const char *)1);
          uint64_t v19 = 3LL;
          break;
        case 4uLL:
          uint64_t v19 = 5LL;
          break;
        default:
LABEL_20:
          uint64_t v19 = 1LL;
          break;
      }

      [self setStatus:v19];
    }
  }

void sub_100071788(void *a1, const char *a2)
{
  if (objc_getProperty(a1, a2, 424LL, 1))
  {
    id Property = (dispatch_source_s *)objc_getProperty(a1, v3, 424LL, 1);
    dispatch_source_cancel(Property);
    objc_setProperty_atomic(a1, v5, 0LL, 424LL);
  }

  unint64_t v6 = a1[54];
  if (v6 >> 5 <= 0x752)
  {
    unint64_t v7 = a1[55];
    if (v7 < 3)
    {
      unint64_t v8 = v7 + 1;
    }

    else
    {
      unint64_t v8 = 0LL;
      a1[54] = 4 * v6;
    }

    a1[55] = v8;
  }

  uint64_t v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1 queue]);
  uint64_t v10 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, v9);

  dispatch_time_t v11 = dispatch_time(0LL, 1000000LL * a1[54]);
  dispatch_source_set_timer(v10, v11, 0xFFFFFFFFFFFFFFFFLL, 0x1388uLL);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_1000718FC;
  v14[3] = &unk_1000BEBE0;
  void v14[4] = a1;
  id v15 = v10;
  SEL v12 = v10;
  dispatch_source_set_event_handler(v12, v14);
  dispatch_resume(v12);
  objc_setProperty_atomic(a1, v13, v12, 424LL);
}

void sub_1000718FC(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(_BYTE **)(a1 + 32);
  if (v3)
  {
    if ((v3[355] & 1) == 0)
    {
      id Property = objc_getProperty(v3, a2, 416LL, 1);
      if (Property)
      {
        uint64_t v6 = ne_log_obj(Property, v5);
        unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = *(void *)(a1 + 32);
          int v12 = 138412290;
          uint64_t v13 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%@: Restarting", (uint8_t *)&v12, 0xCu);
        }

        uint64_t v10 = *(void **)(a1 + 32);
        if (v10) {
          id v11 = objc_getProperty(*(id *)(a1 + 32), v9, 416LL, 1);
        }
        else {
          id v11 = 0LL;
        }
        [v10 handleStartMessage:v11];
      }
    }
  }

  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 40));
}

NEFilterPlugin *sub_100071A08(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 pluginType]);

  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NEAgent);
  uint64_t v8 = (objc_class *)v6;
  if (a2 == 4)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 contentFilter]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 provider]);
    uint64_t v12 = objc_claimAutoreleasedReturnValue([v11 filterDataProviderBundleIdentifier]);
  }

  else
  {
    if (a2 != 6)
    {
LABEL_9:
      uint64_t v23 = ne_log_obj(v6, v7);
      xpc_type_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 138412546;
        char v50 = a1;
        __int16 v51 = 2048;
        uint64_t v52 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "%@: Configuration does not have a provider bundle identifier for class %ld",  buf,  0x16u);
      }

      uint64_t v13 = 0LL;
      SEL v25 = 0LL;
      goto LABEL_18;
    }

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 contentFilter]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 provider]);
    uint64_t v12 = objc_claimAutoreleasedReturnValue([v11 filterPacketProviderBundleIdentifier]);
  }

  uint64_t v13 = (void *)v12;

  if (!v13) {
    goto LABEL_9;
  }
  id v14 = sub_10000B4B4();
  id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  int v16 = sub_10000CB18((uint64_t)v15, v13, a2);

  if (v16)
  {
    uint64_t v8 = (objc_class *)objc_opt_class(&OBJC_CLASS___NESMAgent);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 contentFilter]);
    int v21 = (void *)objc_claimAutoreleasedReturnValue([v20 provider]);
    if (a2 == 4) {
      uint64_t v22 = objc_claimAutoreleasedReturnValue([v21 dataProviderDesignatedRequirement]);
    }
    else {
      uint64_t v22 = objc_claimAutoreleasedReturnValue([v21 packetProviderDesignatedRequirement]);
    }
    uint64_t v28 = (void *)v22;

    if (!v28)
    {
      uint64_t v38 = ne_log_obj(v29, v30);
      SEL v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 138412802;
        char v50 = a1;
        __int16 v51 = 2112;
        uint64_t v52 = (uint64_t)v5;
        __int16 v53 = 2048;
        uint64_t v54 = a2;
        _os_log_error_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "%@: Cannot create agent for plugin type %@ (class %ld), missing designated requirement",  buf,  0x20u);
      }

      goto LABEL_24;
    }

    v47[0] = @"plugin-requirement";
    v47[1] = @"extension-identifier";
    v48[0] = v28;
    v48[1] = v13;
    SEL v25 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v48,  v47,  2LL));
  }

  else
  {
    uint64_t v26 = ne_log_obj(v17, v18);
    unsigned __int8 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 138412546;
      char v50 = a1;
      __int16 v51 = 2112;
      uint64_t v52 = (uint64_t)v13;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "%@: System Extension %@ is not currently registered",  buf,  0x16u);
    }

    v47[0] = @"extension-identifier";
    v48[0] = v13;
    SEL v25 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v48,  v47,  1LL));
  }

BOOL sub_100071F00(void *a1, const char *a2)
{
  if (!a1) {
    return 0LL;
  }
  id v3 = objc_getProperty(a1, a2, 400LL, 1);
  if (v3) {
    goto LABEL_7;
  }
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 contentFilter]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 provider]);
  if ([v6 filterSockets])
  {

LABEL_6:
    id v11 = sub_100071A08(a1, 4LL);
    id v3 = (id)objc_claimAutoreleasedReturnValue(v11);
    objc_setProperty_atomic(a1, v12, v3, 400LL);
LABEL_7:

    goto LABEL_8;
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 contentFilter]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 provider]);
  unsigned __int8 v10 = [v9 filterBrowsers];

  if ((v10 & 1) != 0) {
    goto LABEL_6;
  }
LABEL_8:
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 contentFilter]);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 provider]);
  unsigned int v16 = [v15 filterPackets];

  if (v16)
  {
    uint64_t v18 = sub_100071A08(a1, 6LL);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    objc_setProperty_atomic(a1, v20, v19, 408LL);
  }

  uint64_t v21 = 1LL;
  if (!objc_getProperty(a1, v17, 400LL, 1)) {
    return objc_getProperty(a1, v22, 408LL, 1) != 0LL;
  }
  return v21;
}

void sub_10007385C(_Unwind_Exception *a1)
{
}

int64_t sub_1000741E0(id a1, id a2, id a3)
{
  return (int64_t)[a3 compare:a2];
}

void sub_1000741EC(void *a1, const char *a2)
{
  if (a1)
  {
    if (objc_getProperty(a1, a2, 424LL, 1))
    {
      objc_msgSend( objc_getProperty(a1, v3, 424, 1),  "removeObserver:forKeyPath:",  a1,  @"bestAvailableNetworkDescription");
      objc_setProperty_atomic(a1, v4, 0LL, 424LL);
    }

    id Property = objc_getProperty(a1, v3, 416LL, 1);
    if (Property)
    {
      uint64_t v7 = ne_log_obj(Property, v6);
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        int v10 = 138412290;
        id v11 = a1;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%@ End Relay On Demand monitor transaction",  (uint8_t *)&v10,  0xCu);
      }

      objc_setProperty_atomic(a1, v9, 0LL, 416LL);
    }
  }

void sub_100074304(void *a1, const char *a2)
{
  if (a1 && objc_getProperty(a1, a2, 376LL, 1))
  {
    if (objc_msgSend(objc_getProperty(a1, v3, 384, 1), "isRegistered"))
    {
      id v5 = objc_msgSend(objc_getProperty(a1, v4, 384, 1), "unregisterNetworkAgent");
      uint64_t v7 = ne_log_obj(v5, v6);
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = 138412290;
        id v11 = a1;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%@: Unregistered fallback relay network agent",  (uint8_t *)&v10,  0xCu);
      }
    }

    objc_setProperty_atomic(a1, v4, 0LL, 384LL);
    sub_100074844(a1);
    objc_setProperty_atomic(a1, v9, 0LL, 376LL);
  }

void sub_10007441C(void *a1, const char *a2)
{
  if (a1 && objc_getProperty(a1, a2, 392LL, 1))
  {
    if (objc_msgSend(objc_getProperty(a1, v3, 400, 1), "isRegistered"))
    {
      id v5 = objc_msgSend(objc_getProperty(a1, v4, 400, 1), "unregisterNetworkAgent");
      uint64_t v7 = ne_log_obj(v5, v6);
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = 138412290;
        id v11 = a1;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%@: Unregistered relay DNS network agent",  (uint8_t *)&v10,  0xCu);
      }
    }

    objc_setProperty_atomic(a1, v4, 0LL, 400LL);
    sub_100074534(a1);
    objc_setProperty_atomic(a1, v9, 0LL, 392LL);
  }

void sub_100074534(void *a1)
{
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_1000747B4;
  v22[3] = &unk_1000BE698;
  void v22[4] = a1;
  uint64_t v2 = objc_retainBlock(v22);
  if (objc_msgSend(objc_getProperty(a1, v3, 400, 1), "isRegistered"))
  {
    id v4 = objc_alloc(&OBJC_CLASS___NENetworkAgentRegistrationFileHandle);
    id v6 = objc_getProperty(a1, v5, 400LL, 1);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [a1 type]));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
    SEL v9 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
    id v11 = objc_msgSend(objc_getProperty(a1, v10, 392, 1), "agentUUID");
    SEL v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    id v13 = [v4 initWithNetworkAgentRegistration:v6 sessionType:v7 configurationIdentifier:v9 agentUUID:v12 name:@"dns-settings"];

    if (v13)
    {
      unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue( +[NEFileHandleMaintainer sharedMaintainer]( &OBJC_CLASS___NEFileHandleMaintainer,  "sharedMaintainer"));
      [v16 setFileHandle:v13 matchingPredicate:v2];
    }

    else
    {
      uint64_t v17 = ne_log_obj(v14, v15);
      uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        SEL v20 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 name]);
        *(_DWORD *)int buf = 138412290;
        xpc_type_t v24 = v21;
        _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "Failed to create a file handle for relay DNS agent for configuration %@",  buf,  0xCu);
      }

      unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue( +[NEFileHandleMaintainer sharedMaintainer]( &OBJC_CLASS___NEFileHandleMaintainer,  "sharedMaintainer"));
      [v16 removeFileHandleMatchingPredicate:v2];
    }
  }

  else
  {
    id v13 = (id)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](&OBJC_CLASS___NEFileHandleMaintainer, "sharedMaintainer"));
    [v13 removeFileHandleMatchingPredicate:v2];
  }

  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](&OBJC_CLASS___NEFileHandleMaintainer, "sharedMaintainer"));
  [v19 commit];
}

uint64_t sub_1000747B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NENetworkAgentRegistrationFileHandle);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) == 0) {
    goto LABEL_6;
  }
  id v6 = v3;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v5, 392LL, 1);
  }
  unsigned __int8 v8 = [Property matchesFileHandle:v6];

  if ((v8 & 1) != 0) {
    uint64_t v9 = 1LL;
  }
  else {
LABEL_6:
  }
    uint64_t v9 = 0LL;

  return v9;
}

void sub_100074844(void *a1)
{
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_100074AC4;
  v22[3] = &unk_1000BE698;
  void v22[4] = a1;
  uint64_t v2 = objc_retainBlock(v22);
  if (objc_msgSend(objc_getProperty(a1, v3, 384, 1), "isRegistered"))
  {
    id v4 = objc_alloc(&OBJC_CLASS___NENetworkAgentRegistrationFileHandle);
    id v6 = objc_getProperty(a1, v5, 384LL, 1);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [a1 type]));
    unsigned __int8 v8 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
    id v11 = objc_msgSend(objc_getProperty(a1, v10, 376, 1), "agentUUID");
    SEL v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    id v13 = [v4 initWithNetworkAgentRegistration:v6 sessionType:v7 configurationIdentifier:v9 agentUUID:v12 name:@"h2-fallback"];

    if (v13)
    {
      unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue( +[NEFileHandleMaintainer sharedMaintainer]( &OBJC_CLASS___NEFileHandleMaintainer,  "sharedMaintainer"));
      [v16 setFileHandle:v13 matchingPredicate:v2];
    }

    else
    {
      uint64_t v17 = ne_log_obj(v14, v15);
      uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        SEL v20 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 name]);
        *(_DWORD *)int buf = 138412290;
        xpc_type_t v24 = v21;
        _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "Failed to create a file handle for fallback relay agent for configuration %@",  buf,  0xCu);
      }

      unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue( +[NEFileHandleMaintainer sharedMaintainer]( &OBJC_CLASS___NEFileHandleMaintainer,  "sharedMaintainer"));
      [v16 removeFileHandleMatchingPredicate:v2];
    }
  }

  else
  {
    id v13 = (id)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](&OBJC_CLASS___NEFileHandleMaintainer, "sharedMaintainer"));
    [v13 removeFileHandleMatchingPredicate:v2];
  }

  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](&OBJC_CLASS___NEFileHandleMaintainer, "sharedMaintainer"));
  [v19 commit];
}

uint64_t sub_100074AC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NENetworkAgentRegistrationFileHandle);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) == 0) {
    goto LABEL_6;
  }
  id v6 = v3;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v5, 376LL, 1);
  }
  unsigned __int8 v8 = [Property matchesFileHandle:v6];

  if ((v8 & 1) != 0) {
    uint64_t v9 = 1LL;
  }
  else {
LABEL_6:
  }
    uint64_t v9 = 0LL;

  return v9;
}

void sub_100074B54(void *a1, char a2)
{
  if (a1)
  {
    v8[0] = 0LL;
    v8[1] = v8;
    _DWORD v8[2] = 0x3032000000LL;
    v8[3] = sub_100074C44;
    void v8[4] = sub_100074C54;
    id v9 = (id)os_transaction_create("com.apple.nesessionmanager.relay.updatePolicies");
    uint64_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1 queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100074C5C;
    block[3] = &unk_1000BEAB0;
    char v6 = a2;
    char v7 = 1;
    void block[4] = a1;
    void block[5] = v8;
    dispatch_async(v4, block);

    _Block_object_dispose(v8, 8);
  }

void sub_100074C2C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100074C44(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100074C54(uint64_t a1)
{
}

void sub_100074C5C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    sub_10007C208(*(void **)(a1 + 32));
    sub_10007AFD4(*(void **)(a1 + 32));
  }

  if (*(_BYTE *)(a1 + 49))
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 relay]);
    unsigned int v4 = [v3 isEnabled];

    id Property = *(id *)(a1 + 32);
    if (v4)
    {
      if (Property) {
        id Property = objc_getProperty(Property, v5, 408LL, 1);
      }
      id v8 = (id)objc_claimAutoreleasedReturnValue([Property excludedDomains]);
      id v9 = *(void **)(a1 + 32);
      if (v9 && objc_getProperty(v9, v7, 432LL, 1))
      {
        id v11 = *(id *)(a1 + 32);
        if (v8)
        {
          if (v11) {
            id v12 = objc_getProperty(v11, v10, 432LL, 1);
          }
          else {
            id v12 = 0LL;
          }
          uint64_t v13 = objc_claimAutoreleasedReturnValue([v8 arrayByAddingObjectsFromArray:v12]);

          id v8 = (id)v13;
        }

        else
        {
          if (v11) {
            id v11 = objc_getProperty(v11, v10, 432LL, 1);
          }
          id v8 = v11;
        }
      }

      uint64_t v15 = (_DWORD *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) policySession]);
      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) networkAgent]);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v38 agentUUID]);
      id v18 = *(id *)(a1 + 32);
      if (v18) {
        id v18 = objc_getProperty(v18, v16, 392LL, 1);
      }
      SEL v20 = (void *)objc_claimAutoreleasedReturnValue([v18 agentUUID]);
      id v21 = *(id *)(a1 + 32);
      if (v21) {
        id v21 = objc_getProperty(v21, v19, 408LL, 1);
      }
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v21 matchDomains]);
      id v24 = *(id *)(a1 + 32);
      if (v24) {
        id v24 = objc_getProperty(v24, v22, 408LL, 1);
      }
      SEL v25 = (void *)objc_claimAutoreleasedReturnValue([v24 perApp]);
      id v26 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) server]);
      uint64_t v28 = v26;
      if (v26) {
        id v26 = objc_getProperty(v26, v27, 80LL, 1);
      }
      id v29 = v26;
      id v30 = v17;
      id v31 = v20;
      id v32 = v23;
      id v14 = v8;
      id v33 = v25;
      id v34 = v29;
      uint64_t v35 = v34;
      if (v15 && v15[2] == 9)
      {
        v39[0] = _NSConcreteStackBlock;
        v39[1] = 3221225472LL;
        v39[2] = sub_100046E60;
        v39[3] = &unk_1000BDFF0;
        v39[4] = v15;
        id v40 = v34;
        id v41 = v30;
        id v42 = v31;
        id v43 = v33;
        id v44 = v32;
        id v45 = v14;
        sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, v39);
      }
    }

    else
    {
      id v14 = (id)objc_claimAutoreleasedReturnValue([Property policySession]);
      sub_10002BCE0((uint64_t)v14);
    }
  }

  uint64_t v36 = *(void *)(*(void *)(a1 + 40) + 8LL);
  BOOL v37 = *(void **)(v36 + 40);
  *(void *)(v36 + 40) = 0LL;
}

id sub_100074F8C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v28 = v3;
  nw_endpoint_t url = nw_endpoint_create_url((const char *)[v3 UTF8String]);
  masque = (void *)nw_proxy_hop_create_masque();
  nw_proxy_hop_set_masque_version(masque, 2LL);
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  char v7 = (void *)objc_claimAutoreleasedReturnValue([v4 additionalHTTPHeaderFields]);
  id v8 = [v7 countByEnumeratingWithState:&v37 objects:v43 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v38;
    do
    {
      id v11 = 0LL;
      do
      {
        if (*(void *)v38 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(void **)(*((void *)&v37 + 1) + 8LL * (void)v11);
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v4 additionalHTTPHeaderFields]);
        id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:v12]);

        nw_proxy_hop_add_extra_header(masque, [v12 UTF8String], objc_msgSend(v14, "UTF8String"));
        id v11 = (char *)v11 + 1;
      }

      while (v9 != v11);
      id v9 = [v7 countByEnumeratingWithState:&v37 objects:v43 count:16];
    }

    while (v9);
  }

  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v4 rawPublicKeys]);
  id v16 = [v15 countByEnumeratingWithState:&v33 objects:v42 count:16];
  if (v16)
  {
    id v17 = v16;
    uint64_t v18 = *(void *)v34;
    do
    {
      uint64_t v19 = 0LL;
      do
      {
        if (*(void *)v34 != v18) {
          objc_enumerationMutation(v15);
        }
        nw_proxy_hop_add_server_raw_public_key( masque,  [*(id *)(*((void *)&v33 + 1) + 8 * (void)v19) bytes],  objc_msgSend(*(id *)(*((void *)&v33 + 1) + 8 * (void)v19), "length"));
        uint64_t v19 = (char *)v19 + 1;
      }

      while (v17 != v19);
      id v17 = [v15 countByEnumeratingWithState:&v33 objects:v42 count:16];
    }

    while (v17);
  }

  SEL v20 = (void *)objc_claimAutoreleasedReturnValue([v4 identityReference]);
  if (v20)
  {
    id v21 = (void *)objc_claimAutoreleasedReturnValue([v4 identityReference]);
    nw_proxy_hop_set_client_identity_reference(masque, v21);
  }

  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v4 certificateReferences]);
  id v23 = [v22 countByEnumeratingWithState:&v29 objects:v41 count:16];
  if (v23)
  {
    id v24 = v23;
    uint64_t v25 = *(void *)v30;
    do
    {
      id v26 = 0LL;
      do
      {
        if (*(void *)v30 != v25) {
          objc_enumerationMutation(v22);
        }
        nw_proxy_hop_add_client_certificate_reference(masque, *(void *)(*((void *)&v29 + 1) + 8LL * (void)v26));
        id v26 = (char *)v26 + 1;
      }

      while (v24 != v26);
      id v24 = [v22 countByEnumeratingWithState:&v29 objects:v41 count:16];
    }

    while (v24);
  }

  return masque;
}

BOOL sub_100075298(void *a1, const char *a2)
{
  if (!a1) {
    return 0LL;
  }
  BOOL v2 = 1LL;
  id v3 = objc_msgSend(objc_getProperty(a1, a2, 408, 1), "relays");
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  SEL v5 = (void *)objc_claimAutoreleasedReturnValue([v4 lastObject]);

  char v6 = (void *)objc_claimAutoreleasedReturnValue([v5 syntheticDNSAnswerIPv4Prefix]);
  if (!v6)
  {
    char v7 = (void *)objc_claimAutoreleasedReturnValue([v5 syntheticDNSAnswerIPv6Prefix]);
    BOOL v2 = v7 != 0LL;
  }

  return v2;
}

void sub_10007532C(unsigned __int16 *a1, const char *a2)
{
  int v69 = (int)a2;
  id v3 = objc_msgSend(objc_getProperty(a1, a2, 408, 1), "relays");
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  SEL v5 = (void *)objc_claimAutoreleasedReturnValue([v4 lastObject]);

  char v7 = (void *)objc_claimAutoreleasedReturnValue([v5 dnsOverHTTPSURL]);
  if (v7)
  {
    id v8 = -[NEDNSOverHTTPSSettings initWithServers:]( objc_alloc(&OBJC_CLASS___NEDNSOverHTTPSSettings),  "initWithServers:",  &__NSArray0__struct);
    -[NEDNSSettings setServerURL:](v8, "setServerURL:", v7);
    id v10 = objc_msgSend(objc_getProperty(a1, v9, 408, 1), "matchDomains");
    id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    -[NEDNSSettings setMatchDomains:](v8, "setMatchDomains:", v11);

    id v12 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 identifier]);
    -[NEDNSSettings setProxyAgentUUID:](v8, "setProxyAgentUUID:", v13);

    goto LABEL_3;
  }

  if (!sub_100075298(a1, v6)) {
    goto LABEL_22;
  }
  if (a1[177])
  {
    __int128 v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"127.0.0.1:%u",  a1[177]));
    __int128 v36 = objc_alloc(&OBJC_CLASS___NEDNSSettings);
    uint64_t v78 = v35;
    __int128 v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v78, 1LL));
    id v8 = -[NEDNSSettings initWithServers:](v36, "initWithServers:", v37);

    id v39 = objc_msgSend(objc_getProperty(a1, v38, 408, 1), "matchDomains");
    __int128 v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
    -[NEDNSSettings setMatchDomains:](v8, "setMatchDomains:", v40);

LABEL_3:
    if (v8)
    {
      id v14 = objc_alloc(&OBJC_CLASS___NEDNSSettingsNetworkAgent);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 identifier]);
      id v17 = -[NEDNSSettingsNetworkAgent initWithConfigUUID:sessionType:name:]( v14,  "initWithConfigUUID:sessionType:name:",  v16,  [a1 type],  @"dns-settings");
      objc_setProperty_atomic(a1, v18, v17, 392LL);

      objc_msgSend(objc_getProperty(a1, v19, 392, 1), "setActive:", 1);
      SEL v20 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
      id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 name]);
      objc_msgSend(objc_getProperty(a1, v22, 392, 1), "setConfigurationName:", v21);

      id v23 = objc_alloc(&OBJC_CLASS___NWNetworkAgentRegistration);
      id Property = objc_getProperty(a1, v24, 392LL, 1);
      id v26 = -[NWNetworkAgentRegistration initWithNetworkAgentClass:]( v23,  "initWithNetworkAgentClass:",  objc_opt_class(Property));
      objc_setProperty_atomic(a1, v27, v26, 400LL);

      objc_msgSend(objc_getProperty(a1, v28, 392, 1), "setSettings:", v8);
      receive_handler = 0LL;
      uint64_t p_receive_handler = (uint64_t)&receive_handler;
      uint64_t v74 = 0x3032000000LL;
      uint64_t v75 = sub_100074C44;
      __int16 v76 = sub_100074C54;
      id v77 = 0LL;
      if (!v69) {
        goto LABEL_10;
      }
      __int128 v29 = (void *)objc_claimAutoreleasedReturnValue( +[NEFileHandleMaintainer sharedMaintainer]( &OBJC_CLASS___NEFileHandleMaintainer,  "sharedMaintainer"));
      v70[0] = _NSConcreteStackBlock;
      v70[1] = 3221225472LL;
      v70[2] = sub_100075A8C;
      v70[3] = &unk_1000BE670;
      v70[4] = a1;
      v70[5] = &receive_handler;
      [v29 iterateFileHandlesWithBlock:v70];

      __int128 v30 = *(void **)(p_receive_handler + 40);
      if (v30)
      {
        __int128 v31 = (void *)objc_claimAutoreleasedReturnValue([v30 agentUUID]);
        id v33 = objc_getProperty(a1, v32, 392LL, 1);
        [v33 setAgentUUID:v31];
      }

      else
      {
LABEL_10:
        __int128 v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
        id v33 = objc_getProperty(a1, v41, 392LL, 1);
        [v33 setAgentUUID:v31];
      }

      id v43 = *(void **)(p_receive_handler + 40);
      if (v43)
      {
        id v44 = (void *)objc_claimAutoreleasedReturnValue([v43 handle]);
        uint64_t v45 = dup((int)[v44 fileDescriptor]);

        id v47 = objc_getProperty(a1, v46, 400LL, 1);
        id v49 = objc_getProperty(a1, v48, 392LL, 1);
        unsigned __int8 v50 = [v47 setRegisteredNetworkAgent:v49 fileDescriptor:v45];

        if ((v50 & 1) == 0) {
          close(v45);
        }
      }

      id v51 = objc_getProperty(a1, v42, 400LL, 1);
      unsigned __int8 v52 = [v51 isRegistered];

      if ((v52 & 1) != 0)
      {
        id v55 = objc_getProperty(a1, v54, 400LL, 1);
        id v57 = objc_getProperty(a1, v56, 392LL, 1);
        [v55 updateNetworkAgent:v57];
      }

      else
      {
        uint64_t v58 = ne_log_obj(v53, v54);
        __int16 v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = a1;
          _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_DEFAULT,  "%@: Registered relay DNS network agent",  (uint8_t *)&buf,  0xCu);
        }

        id v55 = objc_getProperty(a1, v60, 400LL, 1);
        id v57 = objc_getProperty(a1, v61, 392LL, 1);
        [v55 registerNetworkAgent:v57];
      }

      if (v69) {
        sub_100074534(a1);
      }
      _Block_object_dispose(&receive_handler, 8);
    }

    goto LABEL_22;
  }

  if (!objc_getProperty(a1, v34, 440LL, 1) && sub_100075298(a1, v62))
  {
    nw_parameters_t secure_udp = nw_parameters_create_secure_udp( _nw_parameters_configure_protocol_disable,  _nw_parameters_configure_protocol_default_configuration);
    uint64_t v64 = (void *)nw_connection_group_create_with_parameters();
    nw_connection_group_set_connection_limit(v64, 10LL);
    receive_handler = _NSConcreteStackBlock;
    uint64_t p_receive_handler = 3221225472LL;
    uint64_t v74 = (uint64_t)sub_100075B2C;
    uint64_t v75 = (uint64_t (*)(uint64_t, uint64_t))&unk_1000BE568;
    __int16 v76 = (void (*)(uint64_t))a1;
    id v65 = v64;
    id v77 = v65;
    nw_connection_group_set_receive_handler((nw_connection_group_t)v65, 0xFFFFFFFF, 1, &receive_handler);
    id v66 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1 queue]);
    nw_connection_group_set_queue((nw_connection_group_t)v65, v66);

    objc_initWeak(&location, a1);
    *(void *)&__int128 buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472LL;
    uint32_t v80 = sub_100075DF4;
    uint64_t v81 = &unk_1000BE590;
    objc_copyWeak(&v83, &location);
    id v67 = v65;
    id v82 = v67;
    nw_connection_group_set_state_changed_handler((nw_connection_group_t)v67, &buf);
    objc_setProperty_atomic(a1, v68, v67, 440LL);
    nw_connection_group_start((nw_connection_group_t)v67);

    objc_destroyWeak(&v83);
    objc_destroyWeak(&location);
  }

void sub_100075A48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, char a18)
{
}

uint64_t sub_100075A8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NENetworkAgentRegistrationFileHandle);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    id v6 = v3;
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v5, 392LL, 1);
    }
    unsigned int v8 = [Property matchesFileHandle:v6];
    if (v8)
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
      id v10 = *(void **)(v9 + 40);
      *(void *)(v9 + 40) = v6;
      id v6 = v10;
    }

    uint64_t v11 = v8 ^ 1;
  }

  else
  {
    uint64_t v11 = 1LL;
  }

  return v11;
}

void sub_100075B2C(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7 = a2;
  unsigned int v8 = a3;
  uint64_t v9 = v8;
  if (!v7 || !a4) {
    goto LABEL_20;
  }
  __int128 v35 = v8;
  id v36 = v7;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  id v34 = [[NEDNSPacket alloc] initFromData:v7];
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v34 queries]);
  id v11 = [v10 countByEnumeratingWithState:&v37 objects:v45 count:16];
  if (!v11) {
    goto LABEL_17;
  }
  id v12 = v11;
  uint64_t v13 = *(void *)v38;
  do
  {
    for (id i = 0LL; i != v12; id i = (char *)i + 1)
    {
      if (*(void *)v38 != v13) {
        objc_enumerationMutation(v10);
      }
      uint64_t v15 = *(void **)(*((void *)&v37 + 1) + 8LL * (void)i);
      if ([v15 recordType] == (id)1)
      {
        id v16 = *(void **)(a1 + 32);
        id v17 = (void *)objc_claimAutoreleasedReturnValue([v15 name]);
        SEL v18 = v16;
        SEL v19 = v17;
        int v20 = 0;
      }

      else
      {
        id v21 = [v15 recordType];
        if (v21 != (id)28) {
          goto LABEL_13;
        }
        id v23 = *(void **)(a1 + 32);
        id v17 = (void *)objc_claimAutoreleasedReturnValue([v15 name]);
        SEL v18 = v23;
        SEL v19 = v17;
        int v20 = 1;
      }

      id v24 = sub_100075E78(v18, v19, v20);
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      [v15 setAnswerData:v25];

      id v21 = [v15 setAnswerTTL:15];
LABEL_13:
      uint64_t v26 = ne_log_obj(v21, v22);
      SEL v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        SEL v28 = (void *)objc_claimAutoreleasedReturnValue([v15 answerData]);
        __int128 v29 = (void *)objc_claimAutoreleasedReturnValue([v15 name]);
        *(_DWORD *)__int128 buf = 138412546;
        id v42 = v28;
        __int16 v43 = 2112;
        id v44 = v29;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEBUG,  "Generated synthetic DNS answer %@ for name %@",  buf,  0x16u);
      }
    }

    id v12 = [v10 countByEnumeratingWithState:&v37 objects:v45 count:16];
  }

  while (v12);
LABEL_17:

  __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([v34 createResponse]);
  __int128 v31 = v30;
  uint64_t v9 = v35;
  if (v30)
  {
    SEL v32 = *(nw_connection_group **)(a1 + 40);
    id v33 = (dispatch_data_s *)[v30 _createDispatchData];
    nw_connection_group_reply(v32, v35, _nw_content_context_default_message, v33);
  }

  id v7 = v36;
LABEL_20:
}

void sub_100075DF4(uint64_t a1, int a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && a2 == 2 && !a3)
  {
    id v7 = WeakRetained;
    WeakRetained[177] = nw_connection_group_get_port(*(void *)(a1 + 32));
    sub_10007532C(v7, 0LL);
    sub_100074B54(v7, 0);
    id WeakRetained = v7;
  }
}

id sub_100075E78(void *a1, void *a2, int a3)
{
  id v5 = a2;
  id v7 = v5;
  if (!a1)
  {
    id v12 = 0LL;
    goto LABEL_57;
  }

  if (!v5)
  {
    uint64_t v56 = ne_log_obj(0LL, v6);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      char v71 = "-[NESMRelaySession getSyntheticAddressForHostname:ipv6:]";
      _os_log_fault_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%s called with null hostname", buf, 0xCu);
    }

    id v12 = 0LL;
    goto LABEL_56;
  }

  if (a3) {
    unsigned int v8 = &OBJC_IVAR___NESMRelaySession__synthesizedIPv6Addresses;
  }
  else {
    unsigned int v8 = &OBJC_IVAR___NESMRelaySession__synthesizedIPv4Addresses;
  }
  uint64_t v9 = (os_log_s *)objc_getProperty(a1, v6, *v8, 1);
  id v10 = v9;
  if (v9)
  {
    uint64_t v11 = objc_claimAutoreleasedReturnValue(-[os_log_s objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", v7));
    if (v11)
    {
      id v12 = (id)v11;
      sub_1000763F8(a1, v7);
      goto LABEL_56;
    }
  }

  SEL v60 = v8;
  if ((unint64_t)-[os_log_s count](v10, "count") >= 0x100)
  {
    SEL v61 = v10;
    id v14 = objc_msgSend(objc_getProperty(a1, v13, 464, 1), "subarrayWithRange:", 0, 128);
    __int128 v65 = 0u;
    __int128 v66 = 0u;
    __int128 v67 = 0u;
    __int128 v68 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue(v14);
    id v15 = [obj countByEnumeratingWithState:&v65 objects:v69 count:16];
    if (v15)
    {
      id v17 = v15;
      uint64_t v18 = *(void *)v66;
      do
      {
        for (id i = 0LL; i != v17; id i = (char *)i + 1)
        {
          if (*(void *)v66 != v18) {
            objc_enumerationMutation(obj);
          }
          uint64_t v20 = *(void *)(*((void *)&v65 + 1) + 8LL * (void)i);
          id v21 = objc_msgSend(objc_getProperty(a1, v16, 448, 1), "objectForKeyedSubscript:", v20);
          id v23 = (void *)objc_claimAutoreleasedReturnValue(v21);
          if (v23)
          {
            sub_1000764E8((uint64_t)&OBJC_CLASS___NESMRelaySession, v23);
            objc_msgSend(objc_getProperty(a1, v24, 448, 1), "setObject:forKeyedSubscript:", 0, v20);
          }

          id v25 = objc_msgSend(objc_getProperty(a1, v22, 456, 1), "objectForKeyedSubscript:", v20);
          SEL v27 = (void *)objc_claimAutoreleasedReturnValue(v25);
          if (v27)
          {
            sub_1000764E8((uint64_t)&OBJC_CLASS___NESMRelaySession, v27);
            objc_msgSend(objc_getProperty(a1, v28, 456, 1), "setObject:forKeyedSubscript:", 0, v20);
          }

          objc_msgSend(objc_getProperty(a1, v26, 464, 1), "removeObject:", v20);
        }

        id v17 = [obj countByEnumeratingWithState:&v65 objects:v69 count:16];
      }

      while (v17);
    }

    id v10 = v61;
  }

  id v29 = objc_msgSend(objc_getProperty(a1, v13, 408, 1), "relays");
  __int128 v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
  __int128 v31 = (void *)objc_claimAutoreleasedReturnValue([v30 lastObject]);

  if ((a3 & 1) != 0) {
    SEL v32 = (void *)objc_claimAutoreleasedReturnValue([v31 syntheticDNSAnswerIPv6Prefix]);
  }
  else {
    SEL v32 = (void *)objc_claimAutoreleasedReturnValue([v31 syntheticDNSAnswerIPv4Prefix]);
  }
  id v33 = v32;
  if (!v32)
  {
    id v12 = 0LL;
    goto LABEL_55;
  }

  buf[0] = 0;
  address_from_string = (nw_endpoint *)nw_endpoint_create_address_from_string([v32 UTF8String], "0", buf);
  __int128 v35 = address_from_string;
  id v12 = 0LL;
  if (!address_from_string) {
    goto LABEL_54;
  }
  unint64_t v36 = buf[0];
  if (buf[0] < 8u) {
    goto LABEL_54;
  }
  __int16 v59 = v33;
  address = nw_endpoint_get_address(address_from_string);
  if (!address) {
    goto LABEL_47;
  }
  __int128 v38 = address;
  int sa_family = address->sa_family;
  if (!a3)
  {
    if (sa_family == 2)
    {
      uint64_t v58 = v35;
      unint64_t v40 = 4LL;
      goto LABEL_35;
    }

void sub_1000763F8(void *a1, void *a2)
{
  id v12 = a2;
  if (!objc_getProperty(a1, v3, 464LL, 1))
  {
    id v5 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    objc_setProperty_atomic(a1, v6, v5, 464LL);
  }

  id v7 = objc_msgSend(objc_getProperty(a1, v4, 464, 1), "lastObject");
  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  unsigned __int8 v9 = [v8 isEqualToString:v12];

  if ((v9 & 1) == 0)
  {
    objc_msgSend(objc_getProperty(a1, v11, 464, 1), "addObject:", v12);
  }
}

void sub_1000764E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  sub_100076554((uint64_t)&OBJC_CLASS___NESMRelaySession);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1000CFC18);
  [(id)qword_1000CFC08 removeObject:v3];
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1000CFC18);
}

void sub_100076554(uint64_t a1)
{
  if (qword_1000CFC10 != -1) {
    dispatch_once(&qword_1000CFC10, &stru_1000BE540);
  }
}

void sub_100076590(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  BOOL v2 = (void *)qword_1000CFC08;
  qword_1000CFC08 = (uint64_t)v1;
}

uint64_t sub_1000765B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NENetworkAgentRegistrationFileHandle);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    id v6 = v3;
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v5, 376LL, 1);
    }
    unsigned int v8 = [Property matchesFileHandle:v6];
    if (v8)
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
      id v10 = *(void **)(v9 + 40);
      *(void *)(v9 + 40) = v6;
      id v6 = v10;
    }

    uint64_t v11 = v8 ^ 1;
  }

  else
  {
    uint64_t v11 = 1LL;
  }

  return v11;
}

void sub_100076658(uint64_t a1)
{
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 relay]);

  if (v3) {
    [*(id *)(a1 + 32) startWithCommand:0 isOnDemand:0];
  }
}

void sub_1000766C0(void *a1, const char *a2)
{
  if (!a1) {
    return;
  }
  BOOL v2 = a1;
  sub_1000741EC(a1, a2);
  id v4 = objc_msgSend(objc_getProperty(v2, v3, 408, 1), "onDemandRules");
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  if (!v5)
  {
    id v47 = (id)objc_claimAutoreleasedReturnValue([v2 server]);
    [v47 requestInstallForSession:v2 withParentSession:0 exclusive:0];

    return;
  }

  id v7 = objc_msgSend(objc_getProperty(v2, v6, 408, 1), "onDemandRules");
  uint64_t v8 = objc_claimAutoreleasedReturnValue(v7);
  if (!v8)
  {
    id v10 = 0LL;
    goto LABEL_32;
  }

  uint64_t v9 = (void *)v8;
  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  if (![v9 count])
  {
    id v29 = objc_alloc_init(&OBJC_CLASS___NWNetworkDescription);
    [v10 addObject:v29];

    goto LABEL_21;
  }

  id v46 = v2;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  id v11 = v9;
  id v12 = [v11 countByEnumeratingWithState:&v48 objects:buf count:16];
  if (!v12) {
    goto LABEL_17;
  }
  id v13 = v12;
  uint64_t v14 = *(void *)v49;
  do
  {
    for (id i = 0LL; i != v13; id i = (char *)i + 1)
    {
      if (*(void *)v49 != v14) {
        objc_enumerationMutation(v11);
      }
      id v16 = v10;
      id v17 = *(void **)(*((void *)&v48 + 1) + 8LL * (void)i);
      id v18 = objc_alloc_init(&OBJC_CLASS___NWNetworkDescription);
      id v19 = [v17 interfaceTypeMatch];
      if (v19 == (id)3)
      {
        uint64_t v20 = &off_1000C1848;
      }

      else
      {
        if (v19 != (id)2) {
          goto LABEL_15;
        }
        uint64_t v20 = &off_1000C1860;
      }

      id v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v20));
      [v18 setInterfaceTypeOptions:v21];

LABEL_15:
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v17 DNSSearchDomainMatch]);
      id v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v22));
      [v18 setDnsSearchDomainOptions:v23];

      SEL v24 = (void *)objc_claimAutoreleasedReturnValue([v17 DNSServerAddressMatch]);
      id v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v24));
      [v18 setDnsServerAddressOptions:v25];

      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v17 SSIDMatch]);
      SEL v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v26));
      [v18 setSsidOptions:v27];

      SEL v28 = (void *)objc_claimAutoreleasedReturnValue([v17 probeURL]);
      [v18 setProbeURL:v28];

      id v10 = v16;
      [v16 addObject:v18];
    }

    id v13 = [v11 countByEnumeratingWithState:&v48 objects:buf count:16];
  }

  while (v13);
LABEL_17:

  BOOL v2 = v46;
LABEL_21:

  if (v10)
  {
    id v30 = objc_alloc_init(&OBJC_CLASS___NWParameters);
    __int128 v31 = (void *)objc_claimAutoreleasedReturnValue( +[NWMonitor monitorWithNetworkDescriptionArray:endpoint:parameters:]( &OBJC_CLASS___NWMonitor,  "monitorWithNetworkDescriptionArray:endpoint:parameters:",  v10,  0LL,  v30));
    objc_setProperty_atomic(v2, v32, v31, 424LL);

    if (objc_getProperty(v2, v33, 424LL, 1))
    {
      if (!objc_getProperty(v2, v34, 416LL, 1))
      {
        uint64_t v36 = ne_log_obj(0LL, v35);
        __int128 v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 138412290;
          SEL v53 = v2;
          _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_INFO,  "%@ Begin Relay On Demand monitor transaction",  buf,  0xCu);
        }

        __int128 v38 = objc_alloc(&OBJC_CLASS___NSString);
        __int128 v39 = (void *)objc_claimAutoreleasedReturnValue([v2 configuration]);
        unint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v39 identifier]);
        unint64_t v41 = -[NSString initWithFormat:]( v38,  "initWithFormat:",  @"com.apple.nesessionmanager.RelayOnDemandMonitor.%@",  v40);

        uint64_t v42 = (void *)os_transaction_create(-[NSString UTF8String](v41, "UTF8String"));
        objc_setProperty_atomic(v2, v43, v42, 416LL);
      }

      objc_msgSend( objc_getProperty(v2, v35, 424, 1),  "addObserver:forKeyPath:options:context:",  v2,  @"bestAvailableNetworkDescription",  5,  0);
    }

    else
    {
      uint64_t v44 = ne_log_obj(0LL, v34);
      uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412290;
        SEL v53 = v2;
        _os_log_error_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_ERROR,  "%@ Relay On Demand monitor creation failed",  buf,  0xCu);
      }
    }
  }

void sub_100076CF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100076D08(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100076D18(uint64_t a1)
{
}

void sub_100076D20(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 32);
  SEL v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) onDemandMonitor]);
  if (v2 != v3)
  {

    goto LABEL_6;
  }

  unsigned int v4 = [*(id *)(a1 + 48) isEqualToString:@"bestAvailableNetworkDescription"];

  if (v4)
  {
    else {
      id v5 = 0LL;
    }
    SEL v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) onDemandMonitor]);
    id v28 = (id)objc_claimAutoreleasedReturnValue([v27 bestAvailableNetworkDescription]);

    if (!v28)
    {
      uint64_t v38 = ne_log_obj(v29, v30);
      __int128 v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v40 = *(NEOnDemandRuleConnect **)(a1 + 40);
        *(_DWORD *)__int128 buf = 138412290;
        unsigned int v70 = v40;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "%@: Matched no on demand rule", buf, 0xCu);
      }

      goto LABEL_39;
    }

    __int128 v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) onDemandMonitor]);
    SEL v32 = (void *)objc_claimAutoreleasedReturnValue([v31 networkDescriptionArray]);
    id v33 = [v32 indexOfObject:v28];

    unsigned int v34 = [*(id *)(a1 + 40) type];
    __int128 v35 = *(void **)(a1 + 40);
    if (v34 == 1)
    {
      uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v35 configuration]);
      __int128 v37 = (void *)objc_claimAutoreleasedReturnValue([v36 VPN]);
    }

    else
    {
      if ([v35 type] != 2)
      {
        __int128 v39 = 0LL;
LABEL_31:
        if ((sub_100077340(*(void **)(a1 + 40)) & 1) == 0
          && sub_100077444(*(void **)(a1 + 40)))
        {
          uint64_t v42 = sub_10007753C(*(void *)(a1 + 40), v39);

          __int128 v39 = (os_log_s *)v42;
        }

        id v43 = -[os_log_s count](v39, "count");
        if (v43 > v33)
        {
          uint64_t v45 = objc_claimAutoreleasedReturnValue(-[os_log_s objectAtIndex:](v39, "objectAtIndex:", v33));

          id v5 = (NEOnDemandRuleConnect *)v45;
        }

        uint64_t v46 = ne_log_obj(v43, v44);
        id v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
        {
          __int128 v48 = *(NEOnDemandRuleConnect **)(a1 + 40);
          *(_DWORD *)__int128 buf = 138412546;
          unsigned int v70 = v48;
          __int16 v71 = 2112;
          BOOL v72 = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "%@: Matched on demand rule %@",  buf,  0x16u);
        }

LABEL_39:
        uint64_t v49 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) matchedRule]);
        if (v49 | (unint64_t)v5)
        {
          __int128 v50 = (void *)v49;
          __int128 v51 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) matchedRule]);
          unsigned __int8 v52 = [v51 isEqual:v5];

          if ((v52 & 1) == 0)
          {
            [*(id *)(a1 + 40) setMatchedRule:v5];
            sub_1000775B0(*(id *)(a1 + 40));
            [*(id *)(a1 + 40) notifyChangedExtendedStatus];
          }
        }

        goto LABEL_53;
      }

      uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) configuration]);
      __int128 v37 = (void *)objc_claimAutoreleasedReturnValue([v36 appVPN]);
    }

    unint64_t v41 = v37;
    __int128 v39 = (os_log_s *)objc_claimAutoreleasedReturnValue([v37 onDemandRules]);

    goto LABEL_31;
  }

LABEL_54:
  uint64_t v62 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v63 = *(void **)(v62 + 40);
  *(void *)(v62 + 40) = 0LL;
}

id sub_100077340(void *a1)
{
  if (a1 && ([a1 disableOnDemand] & 1) == 0)
  {
    if ([a1 type] == 1)
    {
      BOOL v2 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
      SEL v3 = (void *)objc_claimAutoreleasedReturnValue([v2 VPN]);
      if ([v3 isOnDemandEnabled])
      {
        unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
        id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 VPN]);
LABEL_9:
        id v6 = v5;
        id v7 = [v5 isEnabled];

LABEL_12:
        return v7;
      }

      goto LABEL_11;
    }

    if ([a1 type] == 2)
    {
      BOOL v2 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
      SEL v3 = (void *)objc_claimAutoreleasedReturnValue([v2 appVPN]);
      if ([v3 isOnDemandEnabled])
      {
        unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
        id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 appVPN]);
        goto LABEL_9;
      }

id sub_100077444(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  if ([a1 type] != 1)
  {
    if ([a1 type] == 2)
    {
      BOOL v2 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
      SEL v3 = (void *)objc_claimAutoreleasedReturnValue([v2 appVPN]);
      if ([v3 isDisconnectOnDemandEnabled])
      {
        unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
        id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 appVPN]);
        goto LABEL_8;
      }

uint64_t sub_10007753C(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0LL;
  }
  id v2 = a2;
  SEL v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithBlock:](&OBJC_CLASS___NSPredicate, "predicateWithBlock:", &stru_1000BE778));
  uint64_t v4 = objc_claimAutoreleasedReturnValue([v2 filteredArrayUsingPredicate:v3]);

  return v4;
}

id sub_1000775B0(id result)
{
  if (!result) {
    return result;
  }
  id val = result;
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([result server]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 primaryPhysicalInterface]);
  SEL v3 = (void *)objc_claimAutoreleasedReturnValue([v2 interfaceName]);
  uint64_t v4 = val;
  [val setLastPrimaryInterface:v3];

  [val setFailedConnectCountWithinInterval:0];
  sub_100078DB4(val);
  if ([val type] == 1)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([val configuration]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 identifier]);
    id v7 = (id)objc_claimAutoreleasedReturnValue([v6 UUIDString]);
    uint64_t v8 = objc_opt_class(&OBJC_CLASS___NESMVPNSession);
    if ((objc_opt_isKindOfClass(val, v8) & 1) != 0 && [val tunnelKind] == (id)2) {
      uint64_t v9 = @"%@-TMP-FB-[^/]+";
    }
    else {
      uint64_t v9 = @"%@-TMP-[^/]+";
    }
    id v10 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v9, v7));
    out[0] = (id)SCDynamicStoreKeyCreateNetworkServiceEntity( kCFAllocatorDefault,  kSCDynamicStoreDomainState,  v10,  kSCEntNetDNS);
    CFArrayRef v11 = SCDynamicStoreCopyKeyList(0LL, (CFStringRef)out[0]);
    myCFRelease(out);
    id v12 = -[__CFArray mutableCopy](v11, "mutableCopy");
    [val setStaleOnDemandDNSKeys:v12];

    uint64_t v4 = val;
  }

  id v13 = (void *)objc_claimAutoreleasedReturnValue([v4 matchedRule]);
  if ([v13 action] == (id)3)
  {
    uint64_t v14 = val;
    unsigned int v15 = [val type];

    if (v15 == 1)
    {
      id v176 = (id)objc_claimAutoreleasedReturnValue([val matchedRule]);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([val server]);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 primaryCellularInterface]);
      if (v17)
      {
        id v18 = (void *)objc_claimAutoreleasedReturnValue([val lastPrimaryInterface]);
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([val server]);
        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 primaryCellularInterface]);
        id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 interfaceName]);
        unsigned __int8 v22 = [v18 isEqualToString:v21];

        if ((v22 & 1) != 0) {
          goto LABEL_49;
        }
      }

      else
      {
      }

      SEL v27 = (void *)objc_claimAutoreleasedReturnValue([val server]);
      uint64_t v29 = v27;
      if (v27) {
        id Property = objc_getProperty(v27, v28, 64LL, 1);
      }
      else {
        id Property = 0LL;
      }
      id v31 = Property;

      SEL v32 = (void *)objc_claimAutoreleasedReturnValue(+[NENetworkPropertiesCache sharedCache](&OBJC_CLASS___NENetworkPropertiesCache, "sharedCache"));
      id v33 = [v32 copyPropertiesForNetworkPath:v31];

      if (v33)
      {
        uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v33 objectForKeyedSubscript:@"redirectedAddress"]);
        uint64_t v38 = ne_log_obj(v36, v37);
        __int128 v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(out[0]) = 138412290;
          *(id *)((char *)out + 4) = v36;
          _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "Using cached DNS redirector result: %@",  (uint8_t *)out,  0xCu);
        }

        id v41 = (id)objc_claimAutoreleasedReturnValue( +[NWAddressEndpoint endpointWithHostname:port:]( &OBJC_CLASS___NWAddressEndpoint,  "endpointWithHostname:port:",  v36,  @"0"));
        if (v41)
        {
          id v42 = objc_claimAutoreleasedReturnValue([val lastPrimaryInterface]);
          NEHelperCacheAddRedirectedAddress([v42 UTF8String], objc_msgSend(v41, "address"));
        }

        else
        {
          uint64_t v65 = ne_log_obj(0LL, v40);
          id v42 = (id)objc_claimAutoreleasedReturnValue(v65);
          if (os_log_type_enabled((os_log_t)v42, OS_LOG_TYPE_ERROR))
          {
            LODWORD(out[0]) = 138412290;
            *(id *)((char *)out + 4) = v36;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v42,  OS_LOG_TYPE_ERROR,  "Failed to create an address endpoint from %@",  (uint8_t *)out,  0xCu);
          }

          id v41 = 0LL;
        }
      }

      else
      {
        uint64_t v43 = ne_log_obj(v34, v35);
        uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(out[0]) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "Starting DNS redirection detection",  (uint8_t *)out,  2u);
        }

        uint32_t v45 = arc4random_uniform(0x15u);
        uint32_t v46 = arc4random_uniform(0x15u);
        sub_100078D48(val);
        id v47 = (void *)objc_claimAutoreleasedReturnValue([val dnsRedirectionTransaction]);
        BOOL v48 = v47 == 0LL;

        if (v48)
        {
          uint64_t v49 = objc_alloc(&OBJC_CLASS___NSString);
          __int128 v50 = (void *)objc_claimAutoreleasedReturnValue([val configuration]);
          __int128 v51 = (void *)objc_claimAutoreleasedReturnValue([v50 identifier]);
          unsigned __int8 v52 = -[NSString initWithFormat:]( v49,  "initWithFormat:",  @"com.apple.nesessionmanager.dnsRedirection.%@",  v51);

          SEL v53 = (void *)os_transaction_create(-[NSString UTF8String](v52, "UTF8String"));
          [val setDnsRedirectionTransaction:v53];
        }

        uint64_t v54 = v45 + 8;
        if ((int)v54 < 1)
        {
          uint64_t v54 = 0LL;
        }

        else
        {
          id v55 = out;
          uint64_t v56 = v54;
          do
          {
            *(_BYTE *)id v55 = aAbcdefghijklmn[arc4random_uniform(0x1FF1u) % 0x25];
            id v55 = (id *)((char *)v55 + 1);
            --v56;
          }

          while (v56);
        }

        *((_BYTE *)out + v54) = 46;
        if ((int)(v46 + 8) < 1)
        {
          uint64_t v57 = v54 + 1;
        }

        else
        {
          uint64_t v57 = v46 + v54 + 9;
          do
            *((_BYTE *)out + ++v54) = aAbcdefghijklmn[arc4random_uniform(0x1FF1u) % 0x25];
          while (v57 - 1 != v54);
        }

        strncpy((char *)out + v57, ".com", 255 - v54);
        uint64_t v58 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", out));
        uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue( +[NWHostEndpoint endpointWithHostname:port:]( &OBJC_CLASS___NWHostEndpoint,  "endpointWithHostname:port:",  v58,  @"80"));

        id v41 = objc_alloc_init(&OBJC_CLASS___NWParameters);
        [v41 setRequiredAddressFamily:2];
        uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([val lastPrimaryInterface]);
        LOBYTE(v5_Block_object_dispose(va, 8) = v59 == 0LL;

        if ((v58 & 1) == 0)
        {
          SEL v60 = objc_alloc(&OBJC_CLASS___NWInterface);
          SEL v61 = (void *)objc_claimAutoreleasedReturnValue([val lastPrimaryInterface]);
          uint64_t v62 = -[NWInterface initWithInterfaceName:](v60, "initWithInterfaceName:", v61);
          [v41 setRequiredInterface:v62];
        }

        id v63 = -[NWResolver initWithEndpoint:parameters:]( objc_alloc(&OBJC_CLASS___NWResolver),  "initWithEndpoint:parameters:",  v36,  v41);
        [val setDnsRedirectionDetector:v63];

        __int128 v64 = (void *)objc_claimAutoreleasedReturnValue([val dnsRedirectionDetector]);
        if (!v64) {
          goto LABEL_47;
        }
        id v42 = (id)objc_claimAutoreleasedReturnValue([val dnsRedirectionDetector]);
        [v42 addObserver:val forKeyPath:@"status" options:5 context:0];
      }

LABEL_47:
LABEL_48:

LABEL_49:
      uint64_t v181 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      objc_msgSend(val, "setOnDemandDomainCache:");
      __int128 v205 = 0u;
      __int128 v206 = 0u;
      __int128 v203 = 0u;
      __int128 v204 = 0u;
      id obj = (id)objc_claimAutoreleasedReturnValue([v176 connectionRules]);
      id v187 = [obj countByEnumeratingWithState:&v203 objects:out count:16];
      if (v187)
      {
        uint64_t v185 = *(void *)v204;
        uint64_t v178 = kSCPropNetDNSServiceIdentifier;
        do
        {
          uint64_t v66 = 0LL;
          do
          {
            if (*(void *)v204 != v185)
            {
              uint64_t v67 = v66;
              objc_enumerationMutation(obj);
              uint64_t v66 = v67;
            }

            uint64_t v191 = v66;
            __int128 v68 = *(void **)(*((void *)&v203 + 1) + 8 * v66);
            int v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
            __int128 v201 = 0u;
            __int128 v202 = 0u;
            __int128 v199 = 0u;
            __int128 v200 = 0u;
            unsigned int v70 = (void *)objc_claimAutoreleasedReturnValue([v68 matchDomains]);
            id v71 = [v70 countByEnumeratingWithState:&v199 objects:uu count:16];
            if (v71)
            {
              uint64_t v72 = *(void *)v200;
              do
              {
                for (id i = 0LL; i != v71; id i = (char *)i + 1)
                {
                  if (*(void *)v200 != v72) {
                    objc_enumerationMutation(v70);
                  }
                  uint64_t v74 = *(void **)(*((void *)&v199 + 1) + 8LL * (void)i);
                  uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet characterSetWithCharactersInString:]( &OBJC_CLASS___NSCharacterSet,  "characterSetWithCharactersInString:",  @"*."));
                  __int16 v76 = (void *)objc_claimAutoreleasedReturnValue([v74 stringByTrimmingCharactersInSet:v75]);
                  if (v76) {
                    [v69 addObject:v76];
                  }
                }

                id v71 = [v70 countByEnumeratingWithState:&v199 objects:uu count:16];
              }

              while (v71);
            }

            if ([v68 action] == (id)1)
            {
              id v77 = (void *)objc_claimAutoreleasedReturnValue([v68 probeURL]);
              int v78 = isa_nsurl();

              if (v78)
              {
                uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue([v68 probeURL]);
                uint32_t v80 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableURLRequest requestWithURL:]( &OBJC_CLASS___NSMutableURLRequest,  "requestWithURL:",  v79));

                if (v80)
                {
                  uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue([val lastPrimaryInterface]);
                  [v80 setBoundInterfaceIdentifier:v81];

                  id v82 = (void *)objc_claimAutoreleasedReturnValue( +[NSURLSessionConfiguration defaultSessionConfiguration]( &OBJC_CLASS___NSURLSessionConfiguration,  "defaultSessionConfiguration"));
                  id v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSOperationQueue mainQueue](&OBJC_CLASS___NSOperationQueue, "mainQueue"));
                  uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue( +[NSURLSession sessionWithConfiguration:delegate:delegateQueue:]( &OBJC_CLASS___NSURLSession,  "sessionWithConfiguration:delegate:delegateQueue:",  v82,  0LL,  v83));

                  v196[0] = _NSConcreteStackBlock;
                  v196[1] = 3221225472LL;
                  void v196[2] = sub_10007A084;
                  v196[3] = &unk_1000BE710;
                  v196[4] = val;
                  uint64_t v197 = v181;
                  id v198 = v69;
                  uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue([v84 dataTaskWithRequest:v80 completionHandler:v196]);
                  [v85 resume];
                  [v84 finishTasksAndInvalidate];
                }
              }
            }

            if ([v68 action] == (id)1)
            {
              uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue([v68 useDNSServers]);
              int v87 = isa_nsarray(v86);

              if (v87)
              {
                __int16 v88 = (void *)objc_claimAutoreleasedReturnValue([v68 useDNSServers]);
                SEL v89 = (void *)objc_claimAutoreleasedReturnValue([val configuration]);
                uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue([v89 identifier]);
                SEL v91 = (void *)objc_claimAutoreleasedReturnValue([v90 UUIDString]);
                id v92 = v88;
                id v93 = v91;
                SEL v94 = v93;
                do
                {
                  unsigned int v95 = __ldxr((unsigned int *)&unk_1000CF868);
                  signed int v96 = v95 + 1;
                }

                while (__stxr(v95 + 1, (unsigned int *)&unk_1000CF868));
                if (isa_nsstring(v93) && isa_nsarray(v92))
                {
                  uint64_t v97 = objc_opt_class(&OBJC_CLASS___NESMVPNSession);
                  uint64_t v98 = (v96 % 1000 + 1000);
                  if ((objc_opt_isKindOfClass(val, v97) & 1) != 0 && [val tunnelKind] == (id)2)
                  {
                    uint64_t v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v98));
                    serviceID = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-TMP-FB-%@",  v94,  v99));
                  }

                  else
                  {
                    uint64_t v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v98));
                    serviceID = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-TMP-%@",  v94,  v99));
                  }

                  unint64_t NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity( kCFAllocatorDefault,  kSCDynamicStoreDomainState,  serviceID,  kSCEntNetDNS);
                  BOOL v207 = NetworkServiceEntity;
                  v218[0] = kSCPropNetDNSServerAddresses;
                  v218[1] = v178;
                  v219[0] = v92;
                  uint64_t v101 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v98));
                  v219[1] = v101;
                  xpc_object_t value = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v219,  v218,  2LL));

                  if (NetworkServiceEntity && value)
                  {
                    if (SCDynamicStoreSetValue(0LL, NetworkServiceEntity, value))
                    {
                      uint64_t v102 = (void *)objc_claimAutoreleasedReturnValue([val staleOnDemandDNSKeys]);
                      unsigned int v177 = [v102 containsObject:NetworkServiceEntity];

                      if (v177)
                      {
                        id v103 = (void *)objc_claimAutoreleasedReturnValue([val staleOnDemandDNSKeys]);
                        [v103 removeObject:NetworkServiceEntity];
                      }
                    }

                    else
                    {
                      uint64_t v98 = 0LL;
                    }
                  }

                  myCFRelease(&v207);
                }

                else
                {
                  uint64_t v98 = 0LL;
                }

                if ((_DWORD)v98)
                {
                  uint64_t v104 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
                  [v104 setObject:v69 forKeyedSubscript:@"service-domains"];
                  uint64_t v105 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v98));
                  [v104 setObject:v105 forKeyedSubscript:@"service-dns-service"];

                  -[NSMutableArray addObject:](v181, "addObject:", v104);
                }
              }
            }

            uint64_t v66 = v191 + 1;
          }

          while ((id)(v191 + 1) != v187);
          id v187 = [obj countByEnumeratingWithState:&v203 objects:out count:16];
        }

        while (v187);
      }

      sub_10007A194(val);
      goto LABEL_91;
    }
  }

  else
  {

    uint64_t v14 = val;
  }

  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v14 lastPrimaryInterface]);

  if (v23)
  {
    SEL v24 = (void *)objc_claimAutoreleasedReturnValue([val configuration]);
    id v25 = (void *)objc_claimAutoreleasedReturnValue([v24 identifier]);
    [v25 getUUIDBytes:uu];

    uuid_unparse(uu, (char *)out);
    id v26 = objc_claimAutoreleasedReturnValue([val lastPrimaryInterface]);
    NEHelperCacheSetDomainDictionaries(out, [v26 UTF8String], 0);
  }

LABEL_91:
  SEL v106 = (void *)objc_claimAutoreleasedReturnValue([val matchedRule]);
  if (v106)
  {
    id v107 = (void *)objc_claimAutoreleasedReturnValue([val uid]);
    uint64_t v108 = (uint64_t)[v107 unsignedIntValue];

    if (!(_DWORD)v108)
    {
      unsigned int v109 = NEGetConsoleUserUID();
      if (v109) {
        uint64_t v108 = v109;
      }
      else {
        uint64_t v108 = 501LL;
      }
    }

    id v110 = sub_100079F24((uint64_t)val);
    uint64_t v192 = (void *)objc_claimAutoreleasedReturnValue(v110);
    id v111 = val;
    if ([val type] == 1)
    {
      uint64_t v112 = objc_opt_class(&OBJC_CLASS___NESMVPNSession);
      if ((objc_opt_isKindOfClass(val, v112) & 1) != 0 && [val tunnelKind] == (id)2)
      {
        __int128 v113 = (_DWORD *)objc_claimAutoreleasedReturnValue([val policySession]);
        __int128 v114 = (void *)objc_claimAutoreleasedReturnValue([val matchedRule]);
        __int128 v115 = (void *)objc_claimAutoreleasedReturnValue([val networkAgent]);
        uint64_t v116 = (void *)objc_claimAutoreleasedReturnValue([v115 agentUUID]);
        id v117 = [val onDemandPauseLevelInternal];
        __int128 v118 = (void *)objc_claimAutoreleasedReturnValue([val lastPrimaryInterface]);
        id v119 = v114;
        id v120 = v116;
        id v121 = v118;
        id v122 = v192;
        if (v113 && v120 && v113[2] == 1)
        {
          out[0] = _NSConcreteStackBlock;
          out[1] = (id)3221225472LL;
          out[2] = sub_100030858;
          out[3] = &unk_1000BDB78;
          out[4] = v113;
          id v214 = v117;
          id v210 = v119;
          LODWORD(v215) = v108;
          id v211 = v121;
          id v212 = v120;
          id v213 = v122;
          sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, out);
        }
      }

      else
      {
        __int128 v142 = (void *)objc_claimAutoreleasedReturnValue([val configuration]);
        __int128 v143 = (void *)objc_claimAutoreleasedReturnValue([v142 VPN]);
        unsigned int v144 = (void *)objc_claimAutoreleasedReturnValue([v143 protocol]);
        __int128 v145 = (void *)objc_claimAutoreleasedReturnValue([v144 DNSSettings]);
        __int16 v146 = (void *)objc_claimAutoreleasedReturnValue([v145 matchDomains]);

        if (![v146 count])
        {
          unsigned int v147 = (void *)objc_claimAutoreleasedReturnValue([val configuration]);
          __int128 v148 = (void *)objc_claimAutoreleasedReturnValue([v147 identifier]);
          [v148 getUUIDBytes:out];

          uint64_t matched = ne_session_service_copy_cached_match_domains(out, [val type]);
          unsigned int v150 = (void *)matched;
          if (matched)
          {
            uint64_t v151 = _CFXPCCreateCFObjectFromXPCObject(matched);

            __int16 v146 = (void *)v151;
          }
        }

        unsigned int v189 = (_DWORD *)objc_claimAutoreleasedReturnValue([val policySession]);
        uint64_t v152 = (void *)objc_claimAutoreleasedReturnValue([val matchedRule]);
        uint64_t v186 = (void *)objc_claimAutoreleasedReturnValue([val networkAgent]);
        __int128 v153 = (void *)objc_claimAutoreleasedReturnValue([v186 agentUUID]);
        id v154 = [val onDemandPauseLevelInternal];
        __int128 v155 = (void *)objc_claimAutoreleasedReturnValue([val lastPrimaryInterface]);
        id obja = (id)objc_claimAutoreleasedReturnValue([val configuration]);
        uint64_t v182 = (void *)objc_claimAutoreleasedReturnValue([obja VPN]);
        __int128 v156 = (void *)objc_claimAutoreleasedReturnValue([v182 protocol]);
        unsigned __int8 v157 = [v156 excludeLocalNetworks];
        id v158 = v152;
        id v159 = v153;
        id v160 = v155;
        id v161 = v192;
        id v162 = v146;
        if (v189 && v159 && v189[2] == 1)
        {
          out[0] = _NSConcreteStackBlock;
          out[1] = (id)3221225472LL;
          out[2] = sub_10002F2CC;
          out[3] = &unk_1000BDB50;
          int v216 = v108;
          out[4] = v189;
          id v215 = v154;
          id v210 = v158;
          id v211 = v162;
          id v212 = v160;
          id v213 = v159;
          id v214 = v161;
          unsigned __int8 v217 = v157;
          sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, out);
        }
      }
    }

    else
    {
      if ([val type] != 2)
      {
LABEL_123:
        uint64_t v163 = (void *)objc_claimAutoreleasedReturnValue([v111 matchedRule]);
        BOOL v164 = [v163 action] == (id)2;

        if (v164)
        {
          uint64_t v167 = ne_log_obj(v165, v166);
          id v168 = (os_log_s *)objc_claimAutoreleasedReturnValue(v167);
          if (os_log_type_enabled(v168, OS_LOG_TYPE_DEFAULT))
          {
            id v169 = (void *)objc_claimAutoreleasedReturnValue([val matchedRule]);
            LODWORD(out[0]) = 138412546;
            *(id *)((char *)out + 4) = val;
            WORD2(out[1]) = 2112;
            *(id *)((char *)&out[1] + 6) = v169;
            _os_log_impl( (void *)&_mh_execute_header,  v168,  OS_LOG_TYPE_DEFAULT,  "%@: On Demand disconnect, current matched rule is %@",  (uint8_t *)out,  0x16u);
          }

          xpc_object_t v170 = xpc_dictionary_create(0LL, 0LL, 0LL);
          xpc_dictionary_set_int64(v170, "SessionCommandType", 3LL);
          xpc_dictionary_set_int64(v170, "SessionStopReason", 39LL);
          objc_initWeak(out, val);
          id v171 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([val messageQueue]);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472LL;
          block[2] = sub_100079FCC;
          block[3] = &unk_1000BE6C0;
          objc_copyWeak(&v195, out);
          id v194 = v170;
          id v172 = v170;
          dispatch_async(v171, block);

          objc_destroyWeak(&v195);
          objc_destroyWeak(out);
        }

        goto LABEL_128;
      }

      __int128 v124 = (void *)objc_claimAutoreleasedReturnValue([val policySession]);
      __int128 v125 = (void *)objc_claimAutoreleasedReturnValue([val configuration]);
      __int128 v126 = (void *)objc_claimAutoreleasedReturnValue([v125 appVPN]);
      __int128 v127 = (void *)objc_claimAutoreleasedReturnValue([v126 appRules]);
      sub_10003B00C((uint64_t)v124, v127, v108);

      __int128 v128 = (_DWORD *)objc_claimAutoreleasedReturnValue([val policySession]);
      uint64_t v129 = (void *)objc_claimAutoreleasedReturnValue([val matchedRule]);
      uint64_t v130 = (void *)objc_claimAutoreleasedReturnValue([val configuration]);
      uint64_t v131 = (void *)objc_claimAutoreleasedReturnValue([v130 appVPN]);
      __int128 v132 = (void *)objc_claimAutoreleasedReturnValue([v131 appRules]);
      __int128 v133 = (void *)objc_claimAutoreleasedReturnValue([val networkAgent]);
      unsigned int v134 = (void *)objc_claimAutoreleasedReturnValue([v133 agentUUID]);
      __int128 v135 = (void *)objc_claimAutoreleasedReturnValue([val configuration]);
      __int128 v188 = (void *)objc_claimAutoreleasedReturnValue([v135 appVPN]);
      __int128 v136 = (void *)objc_claimAutoreleasedReturnValue([v188 excludedDomains]);
      id v137 = v129;
      id v138 = v132;
      id v139 = v134;
      id v140 = v192;
      id v141 = v136;
      if (v128 && ([v138 count] || objc_msgSend(v140, "count")) && v139 && v128[2] == 2)
      {
        out[0] = _NSConcreteStackBlock;
        out[1] = (id)3221225472LL;
        out[2] = sub_100031BE4;
        out[3] = &unk_1000BDC58;
        out[4] = v128;
        id v210 = v137;
        id v211 = v138;
        id v212 = v141;
        id v213 = v139;
        id v214 = v140;
        sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, out);
      }
    }

    id v111 = val;
    goto LABEL_123;
  }

  __int128 v123 = (void *)objc_claimAutoreleasedReturnValue([val policySession]);
  sub_10002BDA0((uint64_t)v123);

LABEL_128:
  BOOL v173 = [val type] == 1;
  id result = val;
  if (v173)
  {
    id v174 = (void *)objc_claimAutoreleasedReturnValue([val staleOnDemandDNSKeys]);

    if (v174)
    {
      uint64_t v175 = (const __CFArray *)objc_claimAutoreleasedReturnValue([val staleOnDemandDNSKeys]);
      SCDynamicStoreSetMultiple(0LL, 0LL, v175, 0LL);
    }

    return [val setStaleOnDemandDNSKeys:0];
  }

  return result;
}

void sub_100078D2C(_Unwind_Exception *a1)
{
}

void sub_100078D48(void *a1)
{
  if (a1)
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([a1 dnsRedirectionDetector]);

    if (v2)
    {
      SEL v3 = (void *)objc_claimAutoreleasedReturnValue([a1 dnsRedirectionDetector]);
      [v3 removeObserver:a1 forKeyPath:@"status"];

      [a1 setDnsRedirectionDetector:0];
    }
  }

void sub_100078DB4(void *a1)
{
  if (a1)
  {
    uint64_t v2 = objc_claimAutoreleasedReturnValue([a1 networkAgentRegistration]);
    if (v2)
    {
      SEL v3 = (void *)v2;
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgent]);

      if (v4)
      {
        if ([a1 type] == 1)
        {
          id v5 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
          id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 VPN]);
        }

        else if ([a1 type] == 2)
        {
          id v5 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
          id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 appVPN]);
        }

        else if ([a1 type] == 3)
        {
          id v5 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
          id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 alwaysOnVPN]);
        }

        else if ([a1 type] == 4)
        {
          id v5 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
          id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 contentFilter]);
        }

        else if ([a1 type] == 5)
        {
          id v5 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
          id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 pathController]);
        }

        else
        {
          if ([a1 type] != 7)
          {
            if ([a1 type] == 9)
            {
              uint64_t v152 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
              __int128 v153 = (void *)objc_claimAutoreleasedReturnValue([v152 relay]);
              unsigned int v154 = [v153 isEnabled];

              if (v154)
              {
LABEL_17:
                if (([a1 disableOnDemand] & 1) == 0)
                {
                  if ([a1 type] == 1)
                  {
                    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
                    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 VPN]);
LABEL_20:
                    CFArrayRef v11 = v10;
                    unint64_t v12 = (unint64_t)[v10 isOnDemandEnabled];

                    goto LABEL_25;
                  }

                  if ([a1 type] == 2
                    && [a1 onDemandPauseLevelInternal] != (id)2
                    && [a1 onDemandPauseLevelInternal] != (id)3)
                  {
                    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
                    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 appVPN]);
                    goto LABEL_20;
                  }
                }

                unint64_t v12 = 0LL;
LABEL_25:
                unsigned int v13 = [a1 status];
                if ([a1 type] == 5)
                {
                  BOOL v14 = 1;
                  if (!(_DWORD)v12) {
                    goto LABEL_39;
                  }
                }

                else
                {
                  else {
                    int v15 = 0;
                  }
                  if (v15 == 1)
                  {
                    id v16 = (void *)objc_claimAutoreleasedReturnValue([a1 matchedRule]);
                    BOOL v14 = [v16 action] == (id)3;

                    if (!(_DWORD)v12) {
                      goto LABEL_39;
                    }
                  }

                  else
                  {
                    BOOL v14 = 0;
                    if (!(_DWORD)v12) {
                      goto LABEL_39;
                    }
                  }
                }

                if ([a1 type] == 2)
                {
                  BOOL v17 = 1;
                  goto LABEL_40;
                }

                if ([a1 type] == 1)
                {
                  id v18 = (void *)objc_claimAutoreleasedReturnValue([a1 matchedRule]);
                  BOOL v17 = [v18 action] == (id)1;

                  goto LABEL_40;
                }

LABEL_39:
                BOOL v17 = 0;
LABEL_40:
                unsigned int v175 = v14;
                unsigned int v173 = v17;
                if ([a1 type] != 5)
                {
                  if ([a1 type] == 7)
                  {
                    id v26 = a1;
                    SEL v27 = (void *)objc_claimAutoreleasedReturnValue([v26 networkAgent]);
                    id v28 = (void *)objc_claimAutoreleasedReturnValue([v27 settings]);
                    id Property = objc_getProperty(v26, v29, 360LL, 1);
                    id v31 = (void *)objc_claimAutoreleasedReturnValue(Property);
                    unsigned __int8 v32 = [v28 isEqual:v31];
                    char v33 = v32 ^ 1;

                    if ((v32 & 1) == 0)
                    {
                      id v35 = objc_getProperty(v26, v34, 360LL, 1);
                      uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
                      [v27 setSettings:v36];
                    }
                  }

                  else if ([a1 type] == 9)
                  {
                    id v37 = a1;
                    id v39 = objc_getProperty(v37, v38, 360LL, 1);
                    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
                    id v41 = (void *)objc_claimAutoreleasedReturnValue([v37 networkAgent]);

                    id v42 = (void *)objc_claimAutoreleasedReturnValue([v41 proxyConfig]);
                    char is_equal = nw_proxy_config_is_equal(v42, v40);
                    char v33 = is_equal ^ 1;

                    if ((is_equal & 1) == 0) {
                      [v41 setProxyConfig:v40];
                    }
                  }

                  else
                  {
                    char v33 = 0;
                  }

LABEL_88:
                  id v67 = [a1 status];
                  __int128 v68 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgent]);
                  unsigned int v69 = [v68 lastStatus];

                  if (v69 == (_DWORD)v67)
                  {
                    if ((v33 & 1) != 0) {
                      goto LABEL_106;
                    }
                  }

                  else
                  {
                    unsigned int v70 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgent]);
                    [v70 setLastStatus:v67];

                    if (v69 != 2 || (_DWORD)v67 == 3) {
                      char v72 = v33;
                    }
                    else {
                      char v72 = 1;
                    }
                    if ((v72 & 1) != 0) {
                      goto LABEL_106;
                    }
                  }

                  uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgentRegistration]);
                  if (![v73 isRegistered])
                  {
LABEL_105:

                    goto LABEL_106;
                  }

                  uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgent]);
                  if (((v13 == 3) ^ [v74 isActive]))
                  {
LABEL_104:

                    goto LABEL_105;
                  }

                  unsigned int v75 = v13;
                  __int16 v76 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgent]);
                  if (v175 != [v76 isVoluntary])
                  {
LABEL_103:

                    unsigned int v13 = v75;
                    goto LABEL_104;
                  }

                  id v77 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgent]);
                  if ((_DWORD)v12 != [v77 isUserActivated])
                  {

                    goto LABEL_103;
                  }

                  id v162 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgent]);
                  unsigned int v163 = [v162 isKernelActivated];

                  unsigned int v13 = v75;
                  if (v173 == v163) {
                    goto LABEL_125;
                  }
LABEL_106:
                  int v78 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgent]);
                  [v78 setActive:v13 == 3];

                  uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgent]);
                  [v79 setVoluntary:v175];

                  uint32_t v80 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgent]);
                  [v80 setUserActivated:v12];

                  uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgent]);
                  [v81 setKernelActivated:v173];

                  id v82 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgentRegistration]);
                  LODWORD(v7_Block_object_dispose(va, 8) = [v82 isRegistered];

                  if ((_DWORD)v78)
                  {
                    uint64_t v85 = ne_log_obj(v83, v84);
                    uint64_t v86 = (os_log_s *)objc_claimAutoreleasedReturnValue(v85);
                    if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
                    {
                      int v87 = "inactive";
                      if (v13 == 3) {
                        int v87 = "active";
                      }
                      __int16 v88 = "voluntary";
                      if (!v175) {
                        __int16 v88 = "compulsory";
                      }
                      SEL v89 = "not-user-activiated";
                      *(_DWORD *)__int128 buf = 138413314;
                      uint64_t v191 = a1;
                      if ((_DWORD)v12) {
                        SEL v89 = "user-activated";
                      }
                      __int16 v192 = 2080;
                      id v193 = v87;
                      uint64_t v90 = "kernel-activated";
                      __int16 v194 = 2080;
                      id v195 = v88;
                      __int16 v196 = 2080;
                      uint64_t v197 = v89;
                      if (!v173) {
                        uint64_t v90 = "not-kernel-activated";
                      }
                      __int16 v198 = 2080;
                      __int128 v199 = v90;
                      _os_log_impl( (void *)&_mh_execute_header,  v86,  OS_LOG_TYPE_DEFAULT,  "%@: Updated network agent (%s, %s, %s, %s)",  buf,  0x34u);
                    }

                    SEL v91 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgentRegistration]);
                    id v92 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgent]);
                    [v91 updateNetworkAgent:v92];
                  }

                  else
                  {
                    id v93 = [a1 lastStopReason];
                    if ((_DWORD)v93 == 32)
                    {
LABEL_125:
                      uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue([a1 registeredNetworkAgentInterfaces]);
                      uint64_t v99 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithArray:]( &OBJC_CLASS___NSMutableArray,  "arrayWithArray:",  v98));

                      __int128 v182 = 0u;
                      __int128 v183 = 0u;
                      __int128 v180 = 0u;
                      __int128 v181 = 0u;
                      int v100 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgentInterfaces]);
                      id v101 = [v100 countByEnumeratingWithState:&v180 objects:v189 count:16];
                      if (v101)
                      {
                        id v102 = v101;
                        uint64_t v103 = *(void *)v181;
                        do
                        {
                          for (id i = 0LL; i != v102; id i = (char *)i + 1)
                          {
                            if (*(void *)v181 != v103) {
                              objc_enumerationMutation(v100);
                            }
                            uint64_t v105 = *(const char **)(*((void *)&v180 + 1) + 8LL * (void)i);
                            SEL v106 = (void *)objc_claimAutoreleasedReturnValue([a1 registeredNetworkAgentInterfaces]);
                            unsigned __int8 v107 = [v106 containsObject:v105];

                            if ((v107 & 1) == 0)
                            {
                              uint64_t v108 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgentRegistration]);
                              unsigned int v109 = [v108 addNetworkAgentToInterfaceNamed:v105];

                              uint64_t v112 = ne_log_obj(v110, v111);
                              __int128 v113 = (os_log_s *)objc_claimAutoreleasedReturnValue(v112);
                              BOOL v114 = os_log_type_enabled(v113, OS_LOG_TYPE_INFO);
                              if (v109)
                              {
                                if (v114)
                                {
                                  *(_DWORD *)__int128 buf = 138412546;
                                  uint64_t v191 = a1;
                                  __int16 v192 = 2112;
                                  id v193 = v105;
                                  _os_log_impl( (void *)&_mh_execute_header,  v113,  OS_LOG_TYPE_INFO,  "%@: Added network agent to %@",  buf,  0x16u);
                                }

                                [v99 addObject:v105];
                              }

                              else
                              {
                                if (v114)
                                {
                                  *(_DWORD *)__int128 buf = 138412546;
                                  uint64_t v191 = a1;
                                  __int16 v192 = 2112;
                                  id v193 = v105;
                                  _os_log_impl( (void *)&_mh_execute_header,  v113,  OS_LOG_TYPE_INFO,  "%@: Failed to add network agent to %@",  buf,  0x16u);
                                }
                              }
                            }
                          }

                          id v102 = [v100 countByEnumeratingWithState:&v180 objects:v189 count:16];
                        }

                        while (v102);
                      }

                      __int128 v178 = 0u;
                      __int128 v179 = 0u;
                      __int128 v176 = 0u;
                      __int128 v177 = 0u;
                      __int128 v115 = (void *)objc_claimAutoreleasedReturnValue([a1 registeredNetworkAgentInterfaces]);
                      id v116 = [v115 countByEnumeratingWithState:&v176 objects:v188 count:16];
                      if (v116)
                      {
                        id v117 = v116;
                        uint64_t v118 = *(void *)v177;
                        do
                        {
                          for (j = 0LL; j != v117; j = (char *)j + 1)
                          {
                            if (*(void *)v177 != v118) {
                              objc_enumerationMutation(v115);
                            }
                            id v120 = *(const char **)(*((void *)&v176 + 1) + 8LL * (void)j);
                            id v121 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgentInterfaces]);
                            unsigned __int8 v122 = [v121 containsObject:v120];

                            if ((v122 & 1) == 0)
                            {
                              __int128 v123 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgentRegistration]);
                              unsigned int v124 = [v123 removeNetworkAgentFromInterfaceNamed:v120];

                              uint64_t v127 = ne_log_obj(v125, v126);
                              __int128 v128 = (os_log_s *)objc_claimAutoreleasedReturnValue(v127);
                              BOOL v129 = os_log_type_enabled(v128, OS_LOG_TYPE_INFO);
                              if (v124)
                              {
                                if (v129)
                                {
                                  *(_DWORD *)__int128 buf = 138412546;
                                  uint64_t v191 = a1;
                                  __int16 v192 = 2112;
                                  id v193 = v120;
                                  uint64_t v130 = v128;
                                  uint64_t v131 = "%@: Removed network agent from %@";
                                  goto LABEL_151;
                                }
                              }

                              else if (v129)
                              {
                                *(_DWORD *)__int128 buf = 138412546;
                                uint64_t v191 = a1;
                                __int16 v192 = 2112;
                                id v193 = v120;
                                uint64_t v130 = v128;
                                uint64_t v131 = "%@: Failed to remove network agent from %@";
LABEL_151:
                                _os_log_impl((void *)&_mh_execute_header, v130, OS_LOG_TYPE_INFO, v131, buf, 0x16u);
                              }

                              [v99 removeObject:v120];
                              continue;
                            }
                          }

                          id v117 = [v115 countByEnumeratingWithState:&v176 objects:v188 count:16];
                        }

                        while (v117);
                      }

                      [a1 setRegisteredNetworkAgentInterfaces:v99];
                      goto LABEL_181;
                    }

                    uint64_t v95 = ne_log_obj(v93, v94);
                    signed int v96 = (os_log_s *)objc_claimAutoreleasedReturnValue(v95);
                    if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
                    {
                      uint64_t v97 = "inactive";
                      if (v13 == 3) {
                        uint64_t v97 = "active";
                      }
                      *(_DWORD *)__int128 buf = 138412546;
                      uint64_t v191 = a1;
                      __int16 v192 = 2080;
                      id v193 = v97;
                      _os_log_impl( (void *)&_mh_execute_header,  v96,  OS_LOG_TYPE_DEFAULT,  "%@: Registered network agent (%s)",  buf,  0x16u);
                    }

                    SEL v91 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgentRegistration]);
                    id v92 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgent]);
                    [v91 registerNetworkAgent:v92];
                  }

                  goto LABEL_125;
                }

                unsigned int v171 = v13;
                uint64_t v19 = a1;
                id v174 = (void *)objc_claimAutoreleasedReturnValue([v19 networkAgent]);
                unsigned int v172 = v12;
                if (v19[355])
                {
                  uint64_t v20 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
                  id v21 = v20;
                  if (*((void *)v19 + 54))
                  {
                    unsigned __int8 v22 = objc_alloc(&OBJC_CLASS___NSNumber);
                    SEL v24 = -[NSNumber initWithUnsignedLong:]( v22,  "initWithUnsignedLong:",  objc_msgSend(objc_getProperty(v19, v23, 432, 1), "interfaceIndex"));
                    -[NSMutableArray addObject:](v21, "addObject:", v24);
                  }

                  else
                  {
                    -[NSMutableArray addObject:](v20, "addObject:", &off_1000C1950);
                  }

                  if (objc_getProperty(v19, v25, 448LL, 1))
                  {
                    __int128 v186 = 0u;
                    __int128 v187 = 0u;
                    __int128 v184 = 0u;
                    __int128 v185 = 0u;
                    id v45 = objc_getProperty(v19, v44, 448LL, 1);
                    id v46 = [v45 countByEnumeratingWithState:&v184 objects:buf count:16];
                    if (v46)
                    {
                      id v48 = v46;
                      uint64_t v49 = *(void *)v185;
                      do
                      {
                        for (k = 0LL; k != v48; k = (char *)k + 1)
                        {
                          if (*(void *)v185 != v49) {
                            objc_enumerationMutation(v45);
                          }
                          id v51 = objc_msgSend( objc_getProperty(v19, v47, 448, 1),  "objectForKeyedSubscript:",  *(void *)(*((void *)&v184 + 1) + 8 * (void)k));
                          uint64_t v52 = objc_claimAutoreleasedReturnValue(v51);
                          if (!v52) {
                            abort();
                          }
                          SEL v53 = (void *)v52;
                          -[NSMutableArray addObject:](v21, "addObject:", v52);
                        }

                        id v48 = [v45 countByEnumeratingWithState:&v184 objects:buf count:16];
                      }

                      while (v48);
                    }
                  }
                }

                else
                {
                  id v21 = 0LL;
                }

                uint64_t v54 = v174;
                id v55 = (void *)objc_claimAutoreleasedReturnValue([v174 advisoryInterfaceArray]);
                if (!v55 && v21) {
                  goto LABEL_67;
                }
                uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue([v174 advisoryInterfaceArray]);
                uint64_t v58 = v57;
                if (!v57 || v21)
                {
                  __int128 v132 = (void *)objc_claimAutoreleasedReturnValue([v174 advisoryInterfaceArray]);
                  id v133 = [v132 count];
                  id v134 = -[NSMutableArray count](v21, "count");

                  if (v133 == v134)
                  {
                    uint64_t v54 = v174;
                    if (!v21 || (__int128 v135 = (char *)-[NSMutableArray count](v21, "count")) == 0LL)
                    {
                      char v33 = 0;
                      goto LABEL_73;
                    }

                    __int128 v136 = v135;
                    id v137 = 0LL;
                    while (1)
                    {
                      id v138 = (void *)objc_claimAutoreleasedReturnValue([v54 advisoryInterfaceArray]);
                      id v139 = (void *)objc_claimAutoreleasedReturnValue([v138 objectAtIndexedSubscript:v137]);
                      id v140 = [v139 unsignedIntegerValue];
                      id v141 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableArray objectAtIndexedSubscript:]( v21,  "objectAtIndexedSubscript:",  v137));
                      id v142 = [v141 unsignedIntegerValue];

                      if (v140 != v142) {
                        break;
                      }
                      char v33 = 0;
                      ++v137;
                      uint64_t v54 = v174;
                      if (v136 == v137) {
                        goto LABEL_73;
                      }
                    }

                    BOOL v164 = -[NSMutableArray initWithArray:]( objc_alloc(&OBJC_CLASS___NSMutableArray),  "initWithArray:",  v21);
                    uint64_t v54 = v174;
                    [v174 setAdvisoryInterfaceArray:v164];

LABEL_72:
                    char v33 = 1;
LABEL_73:
                    uint64_t v59 = sub_10008CB08((uint64_t)v19);
                    SEL v60 = (void *)objc_claimAutoreleasedReturnValue(v59);
                    SEL v61 = (void *)objc_claimAutoreleasedReturnValue([v54 predictedInterfaceArray]);
                    if (!v61 && v60)
                    {
LABEL_75:
                      uint64_t v62 = -[NSMutableArray initWithArray:]( objc_alloc(&OBJC_CLASS___NSMutableArray),  "initWithArray:",  v60);
                      [v54 setPredictedInterfaceArray:v62];

LABEL_80:
                      char v33 = 1;
                      unint64_t v12 = v172;
                      goto LABEL_81;
                    }

                    id v63 = (void *)objc_claimAutoreleasedReturnValue([v54 predictedInterfaceArray]);
                    __int128 v64 = v63;
                    if (!v63 || v60)
                    {
                      __int128 v143 = (void *)objc_claimAutoreleasedReturnValue([v54 predictedInterfaceArray]);
                      id v144 = [v143 count];
                      id v145 = [v60 count];

                      if (v144 == v145)
                      {
                        unint64_t v12 = v172;
                        uint64_t v54 = v174;
                        if (v60)
                        {
                          id v169 = (char *)[v60 count];
                          if (v169)
                          {
                            xpc_object_t v170 = v60;
                            __int16 v146 = 0LL;
                            while (1)
                            {
                              unsigned int v147 = (void *)objc_claimAutoreleasedReturnValue([v54 predictedInterfaceArray]);
                              __int128 v148 = (void *)objc_claimAutoreleasedReturnValue([v147 objectAtIndexedSubscript:v146]);
                              id v149 = [v148 unsignedIntegerValue];
                              unsigned int v150 = (void *)objc_claimAutoreleasedReturnValue([v170 objectAtIndexedSubscript:v146]);
                              id v151 = [v150 unsignedIntegerValue];

                              if (v149 != v151) {
                                break;
                              }
                              ++v146;
                              uint64_t v54 = v174;
                              if (v169 == v146) {
                                goto LABEL_188;
                              }
                            }

                            uint64_t v165 = objc_alloc(&OBJC_CLASS___NSMutableArray);
                            uint64_t v166 = sub_10008CB08((uint64_t)v19);
                            uint64_t v167 = (void *)objc_claimAutoreleasedReturnValue(v166);
                            id v168 = -[NSMutableArray initWithArray:](v165, "initWithArray:", v167);
                            uint64_t v54 = v174;
                            [v174 setPredictedInterfaceArray:v168];

                            char v33 = 1;
LABEL_188:
                            unint64_t v12 = v172;
                            SEL v60 = v170;
                          }
                        }

LABEL_177:
            __int128 v155 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgentRegistration]);
            unsigned int v156 = [v155 isRegistered];

            if (v156)
            {
              uint64_t v159 = ne_log_obj(v157, v158);
              id v160 = (os_log_s *)objc_claimAutoreleasedReturnValue(v159);
              if (os_log_type_enabled(v160, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__int128 buf = 138412290;
                uint64_t v191 = a1;
                _os_log_impl( (void *)&_mh_execute_header,  v160,  OS_LOG_TYPE_DEFAULT,  "%@: Unregistered network agent",  buf,  0xCu);
              }

              id v161 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgentRegistration]);
              [v161 unregisterNetworkAgent];

              [a1 setRegisteredNetworkAgentInterfaces:0];
            }

LABEL_181:
            sub_10007A5E0(a1);
            return;
          }

          id v5 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
          id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 dnsSettings]);
        }

        id v7 = v6;
        unsigned __int8 v8 = [v6 isEnabled];

        if ((v8 & 1) != 0) {
          goto LABEL_17;
        }
        goto LABEL_177;
      }
    }
  }

id sub_100079F24(uint64_t a1)
{
  if (a1
    && (uint64_t v1 = SCPreferencesCreate( kCFAllocatorDefault,  @"NEHelper control settings",  @"/Library/Preferences/com.apple.networkextension.control.plist")) != 0LL)
  {
    uint64_t v2 = v1;
    uint64_t Value = (void *)SCPreferencesGetValue(v1, @"CriticalDomains");
    NEInitCFTypes();
    else {
      id v4 = 0LL;
    }
    CFRelease(v2);
  }

  else
  {
    id v4 = 0LL;
  }

  return v4;
}

void sub_100079FCC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v4 = WeakRetained;
    SEL v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10007A074;
    block[3] = &unk_1000BEBE0;
    id v6 = v4;
    id v7 = *(id *)(a1 + 32);
    dispatch_sync(v3, block);

    id WeakRetained = v4;
  }
}

id sub_10007A074(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleCommand:*(void *)(a1 + 40) fromClient:0];
}

void sub_10007A084(id *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1[4] queue]);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_10007A2C8;
  v16[3] = &unk_1000BE6E8;
  id v17 = v7;
  id v18 = v9;
  id v19 = v8;
  id v11 = a1[5];
  id v12 = a1[4];
  id v20 = v11;
  id v21 = v12;
  id v22 = a1[6];
  id v13 = v8;
  id v14 = v9;
  id v15 = v7;
  dispatch_async(v10, v16);
}

void sub_10007A194(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1 onDemandDomainCache]);

    if (v2)
    {
      SEL v3 = (void *)objc_claimAutoreleasedReturnValue([a1 lastPrimaryInterface]);

      if (v3)
      {
        id v4 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
        id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 identifier]);
        [v5 getUUIDBytes:uu];

        uuid_unparse(uu, out);
        id v6 = (void *)objc_claimAutoreleasedReturnValue([a1 onDemandDomainCache]);
        id v7 = [v6 count];

        if (v7)
        {
          id v8 = (void *)objc_claimAutoreleasedReturnValue([a1 onDemandDomainCache]);
          id v9 = (void *)_CFXPCCreateXPCObjectFromCFObject();
        }

        else
        {
          id v9 = 0LL;
        }

        id v10 = objc_claimAutoreleasedReturnValue([a1 lastPrimaryInterface]);
        NEHelperCacheSetDomainDictionaries(out, [v10 UTF8String], v9);
      }
    }
  }

void sub_10007A2C8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 domain]);
    if (([v4 isEqualToString:NSURLErrorDomain] & 1) == 0)
    {
LABEL_6:

      goto LABEL_7;
    }

    id v5 = [*(id *)(a1 + 40) code];

    if (v5 == (id)-1202LL)
    {
      uint64_t v8 = ne_log_obj(v6, v7);
      id v4 = (void *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v4,  OS_LOG_TYPE_DEFAULT,  "VPN On Demand required URL string probe failed due to untrusted server certificate",  buf,  2u);
      }

      goto LABEL_6;
    }
  }

void sub_10007A5E0(void *a1)
{
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472LL;
  v35[2] = sub_10007AA00;
  v35[3] = &unk_1000BE698;
  v35[4] = a1;
  uint64_t v2 = objc_retainBlock(v35);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgentRegistration]);
  unsigned int v4 = [v3 isRegistered];

  if (v4)
  {
    if ([a1 type] == 1)
    {
      uint64_t v5 = objc_opt_class(&OBJC_CLASS___NESMVPNSession);
      if ((objc_opt_isKindOfClass(a1, v5) & 1) != 0 && [a1 parentType] == (id)2)
      {
        if ([a1 tunnelKind] == (id)1) {
          uint64_t v6 = @"Primary Tunnel";
        }
        else {
          uint64_t v6 = @"Fallback Tunnel";
        }
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      id v15 = objc_alloc(&OBJC_CLASS___NENetworkAgentRegistrationFileHandle);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgentRegistration]);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [a1 type]));
      id v11 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 identifier]);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgent]);
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 agentUUID]);
      id v7 = [v15 initWithNetworkAgentRegistration:v9 sessionType:v10 configurationIdentifier:v12 agentUUID:v14 name:v6];
    }

    else
    {
      id v8 = objc_alloc(&OBJC_CLASS___NENetworkAgentRegistrationFileHandle);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgentRegistration]);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [a1 type]));
      id v11 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 identifier]);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgent]);
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 agentUUID]);
      id v7 = [v8 initWithNetworkAgentRegistration:v9 sessionType:v10 configurationIdentifier:v12 agentUUID:v14 name:0];
    }

    if (v7)
    {
      id v18 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgent]);
      unsigned int v19 = [v18 isActive];

      uint64_t v20 = v19;
      unsigned __int8 v21 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgent]);
      unsigned int v22 = [v21 isVoluntary];

      if (v22) {
        v20 |= 2uLL;
      }
      SEL v23 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgent]);
      unsigned int v24 = [v23 isUserActivated];

      if (v24) {
        uint64_t v25 = v20 | 4;
      }
      else {
        uint64_t v25 = v20;
      }
      id v26 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgent]);
      unsigned int v27 = [v26 isKernelActivated];

      if (v27) {
        uint64_t v28 = v25 | 8;
      }
      else {
        uint64_t v28 = v25;
      }
      [v7 setAgentFlags:v28];
      __int128 v29 = (void *)objc_claimAutoreleasedReturnValue( +[NEFileHandleMaintainer sharedMaintainer]( &OBJC_CLASS___NEFileHandleMaintainer,  "sharedMaintainer"));
      [v29 setFileHandle:v7 matchingPredicate:v2];
    }

    else
    {
      uint64_t v30 = ne_log_obj(v16, v17);
      id v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        char v33 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
        uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v33 name]);
        *(_DWORD *)__int128 buf = 138412290;
        id v37 = v34;
        _os_log_error_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_ERROR,  "Failed to create a file handle for on-demand agent for configuration %@",  buf,  0xCu);
      }

      __int128 v29 = (void *)objc_claimAutoreleasedReturnValue( +[NEFileHandleMaintainer sharedMaintainer]( &OBJC_CLASS___NEFileHandleMaintainer,  "sharedMaintainer"));
      [v29 removeFileHandleMatchingPredicate:v2];
    }
  }

  else
  {
    id v7 = (id)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](&OBJC_CLASS___NEFileHandleMaintainer, "sharedMaintainer"));
    [v7 removeFileHandleMatchingPredicate:v2];
  }

  unsigned __int8 v32 = (void *)objc_claimAutoreleasedReturnValue(+[NEFileHandleMaintainer sharedMaintainer](&OBJC_CLASS___NEFileHandleMaintainer, "sharedMaintainer"));
  [v32 commit];
}

BOOL sub_10007AA00(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NENetworkAgentRegistrationFileHandle);
  BOOL v9 = 0;
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    uint64_t v5 = *(void **)(a1 + 32);
    id v6 = v3;
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 networkAgent]);
    unsigned __int8 v8 = [v7 matchesFileHandle:v6];

    if ((v8 & 1) != 0) {
      BOOL v9 = 1;
    }
  }

  return v9;
}

BOOL sub_10007AA90(id a1, id a2, NSDictionary *a3)
{
  return objc_msgSend(a2, "action", a3) == (id)2;
}

void sub_10007AAB0(uint64_t a1, int a2, uint64_t a3, const char *a4)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    xpc_object_t v7 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_int64(v7, "SessionPID", a2);
    xpc_object_t v8 = xpc_dictionary_create(0LL, 0LL, 0LL);
    BOOL v9 = v8;
    if (v8)
    {
      xpc_dictionary_set_BOOL(v8, "is-on-demand", 1);
      if (a4) {
        xpc_dictionary_set_string(v9, "match-hostname", a4);
      }
      xpc_dictionary_set_value(v7, "SessionOptions", v9);
    }

    uint64_t v10 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10007ABF0;
    block[3] = &unk_1000BEDA8;
    int v15 = a2;
    id v13 = WeakRetained;
    id v14 = v7;
    id v11 = v7;
    dispatch_async(v10, block);
  }
}

id sub_10007ABF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = ne_log_obj(a1, a2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 48);
    int v8 = 138412546;
    uint64_t v9 = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%@: got On Demand start message from pid %d",  (uint8_t *)&v8,  0x12u);
  }

  return [*(id *)(a1 + 32) startWithCommand:*(void *)(a1 + 40) isOnDemand:1];
}

void sub_10007ACB0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  int v8 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10007AF00;
    block[3] = &unk_1000BE900;
    id v11 = v8;
    id v12 = v5;
    id v13 = v6;
    dispatch_async(v9, block);
  }
}

void sub_10007AD88(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([WeakRetained queue]);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_10007AE40;
    v7[3] = &unk_1000BEBE0;
    id v8 = v5;
    id v9 = v3;
    dispatch_async(v6, v7);
  }
}

void sub_10007AE40(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  if (v1)
  {
    if (objc_getProperty(v1, v2, 480LL, 1))
    {
      objc_msgSend(objc_getProperty(v1, v4, 480, 1), "removeObjectForKey:", v3);
      sub_100088808((uint64_t)v1, v5);
    }

    else
    {
      uint64_t v6 = ne_log_obj(0LL, v4);
      xpc_object_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)id v8 = 0;
        _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "fallbackAssertions dictionary is nil",  v8,  2u);
      }
    }
  }
}

void sub_10007AF00(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 48);
  id v3 = *(id *)(a1 + 40);
  id v5 = v2;
  if (v1)
  {
    if (objc_getProperty(v1, v4, 480LL, 1))
    {
      objc_msgSend(objc_getProperty(v1, v6, 480, 1), "setObject:forKeyedSubscript:", v5, v3);
      sub_100088808((uint64_t)v1, v7);
    }

    else
    {
      uint64_t v8 = ne_log_obj(0LL, v6);
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__int16 v10 = 0;
        _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "fallbackAssertions dictionary is nil",  v10,  2u);
      }
    }
  }
}

void sub_10007AFD4(void *a1)
{
  if (a1)
  {
    id v2 = [a1 type];
    uint64_t v49 = 0LL;
    __int128 v50 = &v49;
    uint64_t v51 = 0x3032000000LL;
    uint64_t v52 = sub_100076D08;
    SEL v53 = sub_100076D18;
    id v54 = 0LL;
    int v4 = (int)v2;
    switch((int)v2)
    {
      case 1:
        uint64_t v5 = objc_opt_class(&OBJC_CLASS___NESMVPNSession);
        if ((objc_opt_isKindOfClass(a1, v5) & 1) != 0 && [a1 parentType] == (id)2)
        {
          if ([a1 tunnelKind] == (id)1) {
            uint64_t v6 = @"Primary Tunnel";
          }
          else {
            uint64_t v6 = @"Fallback Tunnel";
          }
        }

        else
        {
          uint64_t v6 = 0LL;
        }

        id v21 = objc_alloc(&OBJC_CLASS___NEVPNNetworkAgent);
        id v8 = (id)objc_claimAutoreleasedReturnValue([a1 configuration]);
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
        __int16 v10 = (NEDNSSettingsNetworkAgent *)[v21 initWithConfigUUID:v9 sessionType:1 name:v6];
        [a1 setNetworkAgent:v10];
        goto LABEL_19;
      case 2:
        id v7 = objc_alloc(&OBJC_CLASS___NEAppVPNNetworkAgent);
        id v8 = (id)objc_claimAutoreleasedReturnValue([a1 configuration]);
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
        __int16 v10 = (NEDNSSettingsNetworkAgent *)[v7 initWithConfigUUID:v9 sessionType:2 name:0];
        [a1 setNetworkAgent:v10];
        goto LABEL_19;
      case 3:
        id v11 = objc_alloc(&OBJC_CLASS___NEAOVPNNetworkAgent);
        id v8 = (id)objc_claimAutoreleasedReturnValue([a1 configuration]);
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
        __int16 v10 = (NEDNSSettingsNetworkAgent *)[v11 initWithConfigUUID:v9 sessionType:3 name:0];
        [a1 setNetworkAgent:v10];
        goto LABEL_19;
      case 4:
        id v12 = objc_alloc(&OBJC_CLASS___NEContentFilterNetworkAgent);
        id v8 = (id)objc_claimAutoreleasedReturnValue([a1 configuration]);
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
        __int16 v10 = (NEDNSSettingsNetworkAgent *)[v12 initWithConfigUUID:v9 sessionType:4 name:0];
        [a1 setNetworkAgent:v10];
        goto LABEL_19;
      case 5:
        id v13 = objc_alloc(&OBJC_CLASS___NEPathControllerNetworkAgent);
        id v14 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
        int v15 = (void *)objc_claimAutoreleasedReturnValue([v14 identifier]);
        id v16 = [v13 initWithConfigUUID:v15 sessionType:5 name:0];
        [a1 setNetworkAgent:v16];

        id v8 = (id)objc_claimAutoreleasedReturnValue([a1 networkAgent]);
        objc_initWeak(&location, a1);
        *(void *)&__int128 buf = _NSConcreteStackBlock;
        *((void *)&buf + 1) = 3221225472LL;
        uint64_t v59 = sub_10007ACB0;
        SEL v60 = &unk_1000BE620;
        objc_copyWeak(&v61, &location);
        [v8 setAssertHandler:&buf];
        from[0] = _NSConcreteStackBlock;
        from[1] = (id)3221225472LL;
        from[2] = sub_10007AD88;
        from[3] = &unk_1000BE648;
        objc_copyWeak(&v56, &location);
        [v8 setUnassertHandler:from];
        objc_destroyWeak(&v56);
        objc_destroyWeak(&v61);
        objc_destroyWeak(&location);

        goto LABEL_20;
      case 7:
        unsigned int v19 = objc_alloc(&OBJC_CLASS___NEDNSSettingsNetworkAgent);
        id v8 = (id)objc_claimAutoreleasedReturnValue([a1 configuration]);
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
        __int16 v10 = -[NEDNSSettingsNetworkAgent initWithConfigUUID:sessionType:name:]( v19,  "initWithConfigUUID:sessionType:name:",  v9,  7LL,  0LL);
        [a1 setNetworkAgent:v10];
        goto LABEL_19;
      case 9:
        uint64_t v20 = objc_alloc(&OBJC_CLASS___NERelayNetworkAgent);
        id v8 = (id)objc_claimAutoreleasedReturnValue([a1 configuration]);
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
        __int16 v10 = -[NERelayNetworkAgent initWithDelegate:configUUID:sessionType:name:]( v20,  "initWithDelegate:configUUID:sessionType:name:",  a1,  v9,  9LL,  0LL);
        [a1 setNetworkAgent:v10];
LABEL_19:

LABEL_20:
        unsigned int v22 = objc_alloc(&OBJC_CLASS___NWNetworkAgentRegistration);
        SEL v23 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgent]);
        unsigned int v24 = -[NWNetworkAgentRegistration initWithNetworkAgentClass:]( v22,  "initWithNetworkAgentClass:",  objc_opt_class(v23));
        [a1 setNetworkAgentRegistration:v24];

        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[NEFileHandleMaintainer sharedMaintainer]( &OBJC_CLASS___NEFileHandleMaintainer,  "sharedMaintainer"));
        v48[0] = _NSConcreteStackBlock;
        v48[1] = 3221225472LL;
        void v48[2] = sub_10007B834;
        void v48[3] = &unk_1000BE670;
        v48[4] = a1;
        v48[5] = &v49;
        [v25 iterateFileHandlesWithBlock:v48];

        id v26 = (void *)v50[5];
        if (v26)
        {
          unint64_t v27 = (unint64_t)[v26 agentFlags];
          uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([(id)v50[5] agentUUID]);
          __int128 v29 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgent]);
          [v29 setAgentUUID:v28];

          uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgent]);
          [v30 setActive:v27 & 1];

          id v31 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgent]);
          [v31 setVoluntary:(v27 >> 1) & 1];

          unsigned __int8 v32 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgent]);
          [v32 setUserActivated:(v27 >> 2) & 1];

          char v33 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgent]);
          [v33 setKernelActivated:(v27 >> 3) & 1];
        }

        else
        {
          if (v4 == 9)
          {
            char v33 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
            uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v33 identifier]);
            id v35 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgent]);
            [v35 setAgentUUID:v34];
          }

          else
          {
            char v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
            uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgent]);
            [v34 setAgentUUID:v33];
          }
        }

        uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
        id v37 = (void *)objc_claimAutoreleasedReturnValue([v36 name]);
        SEL v38 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgent]);
        [v38 setConfigurationName:v37];

        id v39 = (id)objc_claimAutoreleasedReturnValue([a1 networkAgent]);
        objc_initWeak(from, a1);
        *(void *)&__int128 buf = _NSConcreteStackBlock;
        *((void *)&buf + 1) = 3221225472LL;
        uint64_t v59 = sub_10007AAB0;
        SEL v60 = &unk_1000BE5F8;
        objc_copyWeak(&v61, from);
        [v39 setStartHandler:&buf];
        objc_destroyWeak(&v61);
        objc_destroyWeak(from);

        uint64_t v40 = (void *)v50[5];
        if (v40)
        {
          id v41 = (void *)objc_claimAutoreleasedReturnValue([v40 handle]);
          uint64_t v42 = dup((int)[v41 fileDescriptor]);

          uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgentRegistration]);
          uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgent]);
          unsigned __int8 v45 = [v43 setRegisteredNetworkAgent:v44 fileDescriptor:v42];

          if ((v45 & 1) == 0)
          {
            close(v42);
            sub_100078DB4(a1);
          }
        }

        else
        {
          sub_100078DB4(a1);
        }

        id v46 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1 queue]);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_10007B8DC;
        block[3] = &unk_1000BEC08;
        void block[4] = a1;
        dispatch_async(v46, block);

        break;
      default:
        uint64_t v17 = ne_log_obj(v2, v3);
        id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = a1;
          _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%@: session type does not support NWNetworkAgent",  (uint8_t *)&buf,  0xCu);
        }

        break;
    }

    _Block_object_dispose(&v49, 8);
  }

void sub_10007B7C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, id location)
{
}

uint64_t sub_10007B834(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NENetworkAgentRegistrationFileHandle);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    id v5 = v3;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) networkAgent]);
    unsigned int v7 = [v6 matchesFileHandle:v5];

    if (v7)
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
      id v9 = *(void **)(v8 + 40);
      *(void *)(v8 + 40) = v5;
      id v5 = v9;
    }

    uint64_t v10 = v7 ^ 1;
  }

  else
  {
    uint64_t v10 = 1LL;
  }

  return v10;
}

uint64_t sub_10007B8DC(uint64_t a1)
{
  return sub_10007B8E8(*(void *)(a1 + 32), 0);
}

uint64_t sub_10007B8E8(uint64_t result, char a2)
{
  if (result)
  {
    id v3 = (void *)result;
    uint64_t v4 = objc_opt_class(&OBJC_CLASS___NESMIKEv2VPNFallbackSession);
    id result = objc_opt_isKindOfClass(v3, v4);
    if ((result & 1) == 0)
    {
      uint64_t v6 = ne_log_obj(result, v5);
      unsigned int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v11 = v3;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%@: Resetting VPN On Demand", buf, 0xCu);
      }

      if ([v3 type] == 1
        || (id result = (uint64_t)[v3 type], (_DWORD)result == 2))
      {
        v8[0] = _NSConcreteStackBlock;
        v8[1] = 3221225472LL;
        _DWORD v8[2] = sub_10007BA14;
        v8[3] = &unk_1000BE7A0;
        void v8[4] = v3;
        char v9 = a2;
        return (uint64_t)[v3 checkPluginInstalledWithCompletionHandler:v8];
      }
    }
  }

  return result;
}

void sub_10007BA14(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v3 = a1;
  uint64_t v4 = ne_log_obj(a1, a2);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = @"is not";
    uint64_t v7 = *(void *)(v3 + 32);
    if (v2) {
      uint64_t v6 = @"is";
    }
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v72 = v7;
    __int16 v73 = 2112;
    uint64_t v74 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%@: Plugin %@ installed", buf, 0x16u);
  }

  [*(id *)(v3 + 32) setDisableOnDemand:v2 ^ 1u];
  else {
    unsigned int v8 = sub_100077444(*(void **)(v3 + 32));
  }
  int v9 = *(unsigned __int8 *)(v3 + 40);
  unsigned int v10 = [*(id *)(v3 + 32) type];
  if (v9) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v10 == 2;
  }
  char v12 = v11;
  if (v11 || !v8)
  {
    if ((v12 & 1) != 0) {
      goto LABEL_20;
    }
  }

  else
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v3 + 32) onDemandMonitor]);

    if (!v13)
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v3 + 32) onDemandMonitor]);

      if (!v14) {
        goto LABEL_34;
      }
LABEL_20:
      sub_10007C13C(*(void **)(v3 + 32));
      if ([*(id *)(v3 + 32) type] == 2)
      {
        unint64_t v17 = objc_alloc_init(&OBJC_CLASS___NEOnDemandRuleConnect);
        if ((v12 & 1) != 0) {
          goto LABEL_32;
        }
      }

      else
      {
        unint64_t v17 = 0LL;
        if ((v12 & 1) != 0) {
          goto LABEL_32;
        }
      }

      uint64_t v25 = objc_claimAutoreleasedReturnValue([*(id *)(v3 + 32) matchedRule]);
      if (!(v25 | v17)
        || (id v26 = (void *)v25,
            unint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v3 + 32) matchedRule]),
            unsigned __int8 v28 = [v27 isEqual:v17],
            v27,
            v26,
            (v28 & 1) != 0))
      {
LABEL_33:

        if (!v8) {
          return;
        }
LABEL_34:
        uint64_t v29 = ne_log_obj(v15, v16);
        uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v31 = *(void *)(v3 + 32);
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v72 = v31;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%@: Enabling VPN On Demand", buf, 0xCu);
        }

        unsigned __int8 v32 = *(void **)(v3 + 32);
        if (v32)
        {
          if ([*(id *)(v3 + 32) type] == 1)
          {
            char v33 = (void *)objc_claimAutoreleasedReturnValue([v32 configuration]);
            uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v33 VPN]);
          }

          else
          {
            if ([v32 type] != 2)
            {
              uint64_t v36 = 0LL;
LABEL_48:
              if ((sub_100077340(v32) & 1) == 0 && sub_100077444(v32))
              {
                uint64_t v41 = sub_10007753C((uint64_t)v32, v36);

                uint64_t v36 = (void *)v41;
              }

              uint64_t v24 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
              if (![v36 count])
              {
                id v42 = objc_alloc_init(&OBJC_CLASS___NWNetworkDescription);
                [(id)v24 addObject:v42];
                goto LABEL_66;
              }

              __int128 v69 = 0u;
              __int128 v70 = 0u;
              __int128 v67 = 0u;
              __int128 v68 = 0u;
              id v42 = v36;
              id v43 = [v42 countByEnumeratingWithState:&v67 objects:buf count:16];
              if (v43)
              {
                id v44 = v43;
                unsigned int v65 = v36;
                uint64_t v66 = v3;
                uint64_t v45 = *(void *)v68;
                while (1)
                {
                  for (id i = 0LL; i != v44; id i = (char *)i + 1)
                  {
                    if (*(void *)v68 != v45) {
                      objc_enumerationMutation(v42);
                    }
                    id v47 = (void *)v24;
                    id v48 = *(void **)(*((void *)&v67 + 1) + 8LL * (void)i);
                    id v49 = objc_alloc_init(&OBJC_CLASS___NWNetworkDescription);
                    id v50 = [v48 interfaceTypeMatch];
                    if (v50 == (id)3)
                    {
                      uint64_t v51 = &off_1000C1878;
                    }

                    else
                    {
                      if (v50 != (id)2) {
                        goto LABEL_62;
                      }
                      uint64_t v51 = &off_1000C1890;
                    }

                    uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue( +[NSSet setWithObject:]( &OBJC_CLASS___NSSet,  "setWithObject:",  v51,  v65,  v66,  (void)v67));
                    [v49 setInterfaceTypeOptions:v52];

LABEL_62:
                    SEL v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "DNSSearchDomainMatch", v65, v66));
                    id v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v53));
                    [v49 setDnsSearchDomainOptions:v54];

                    id v55 = (void *)objc_claimAutoreleasedReturnValue([v48 DNSServerAddressMatch]);
                    id v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v55));
                    [v49 setDnsServerAddressOptions:v56];

                    uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue([v48 SSIDMatch]);
                    uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v57));
                    [v49 setSsidOptions:v58];

                    uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([v48 probeURL]);
                    [v49 setProbeURL:v59];

                    uint64_t v24 = (uint64_t)v47;
                    [v47 addObject:v49];
                  }

                  id v44 = [v42 countByEnumeratingWithState:&v67 objects:buf count:16];
                  if (!v44)
                  {
                    uint64_t v36 = v65;
                    uint64_t v3 = v66;
                    break;
                  }
                }
              }

LABEL_66:
              if (v24)
              {
                id v60 = objc_alloc_init(&OBJC_CLASS___NWParameters);
                [v60 prohibitNetworkAgentsWithDomain:@"NetworkExtension" type:@"VPN"];
                [v60 prohibitNetworkAgentsWithDomain:@"NetworkExtension" type:@"AppVPN"];
                [v60 prohibitNetworkAgentsWithDomain:@"NetworkExtension" type:@"AOVPN"];
                uint64_t v61 = *(void *)(v3 + 32);
                uint64_t v62 = objc_opt_class(&OBJC_CLASS___NESMVPNSession);
                if ((objc_opt_isKindOfClass(v61, v62) & 1) != 0
                  && [*(id *)(v3 + 32) tunnelKind] == (id)2)
                {
                  [v60 setRequiredInterfaceType:2];
                }

                id v63 = (void *)objc_claimAutoreleasedReturnValue( +[NWMonitor monitorWithNetworkDescriptionArray:endpoint:parameters:]( &OBJC_CLASS___NWMonitor,  "monitorWithNetworkDescriptionArray:endpoint:parameters:",  v24,  0LL,  v60));
                [*(id *)(v3 + 32) setOnDemandMonitor:v63];

                __int128 v64 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v3 + 32) onDemandMonitor]);
                [v64 addObserver:*(void *)(v3 + 32) forKeyPath:@"bestAvailableNetworkDescription" options:5 context:0];
              }

              goto LABEL_71;
            }

            char v33 = (void *)objc_claimAutoreleasedReturnValue([v32 configuration]);
            uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v33 appVPN]);
          }

          id v35 = v34;
          uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v34 onDemandRules]);

          goto LABEL_48;
        }

        goto LABEL_46;
      }

void sub_10007C13C(void *a1)
{
  if (a1)
  {
    int v2 = (void *)objc_claimAutoreleasedReturnValue([a1 onDemandMonitor]);

    if (v2)
    {
      uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1 onDemandMonitor]);
      [v3 removeObserver:a1 forKeyPath:@"bestAvailableNetworkDescription"];

      [a1 setOnDemandMonitor:0];
    }
  }

void sub_10007C1A8(void *a1)
{
  if (a1)
  {
    int v2 = (void *)objc_claimAutoreleasedReturnValue([a1 onDemandPauseTimerSource]);

    if (v2)
    {
      uint64_t v3 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([a1 onDemandPauseTimerSource]);
      dispatch_source_cancel(v3);

      [a1 setOnDemandPauseTimerSource:0];
    }
  }

void sub_10007C208(void *a1)
{
  if (a1)
  {
    int v2 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgentRegistration]);
    unsigned int v3 = [v2 isRegistered];

    if (v3)
    {
      uint64_t v6 = ne_log_obj(v4, v5);
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 138412290;
        unsigned int v10 = a1;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%@: Unregistered network agent",  (uint8_t *)&v9,  0xCu);
      }

      unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgentRegistration]);
      [v8 unregisterNetworkAgent];

      [a1 setRegisteredNetworkAgentInterfaces:0];
      [a1 setNetworkAgentRegistration:0];
    }

    sub_10007A5E0(a1);
  }

void sub_10007C308(void *a1, void *a2)
{
  unsigned int v3 = a2;
  uint64_t v5 = v3;
  if (a1)
  {
    uint64_t v6 = ne_log_obj(v3, v4);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      unsigned int v8 = @"[nil]";
      if (v5) {
        unsigned int v8 = v5;
      }
      int v15 = 138412546;
      uint64_t v16 = a1;
      __int16 v17 = 2112;
      id v18 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%@: Request to add network agent to %@",  (uint8_t *)&v15,  0x16u);
    }

    if (isa_nsstring(v5))
    {
      if (-[__CFString length](v5, "length"))
      {
        int v9 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgentInterfaces]);
        unsigned __int8 v10 = [v9 containsObject:v5];

        if ((v10 & 1) == 0)
        {
          BOOL v11 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgentInterfaces]);
          char v12 = isa_nsarray(v11);

          if ((v12 & 1) == 0)
          {
            id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
            [a1 setNetworkAgentInterfaces:v13];
          }

          id v14 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgentInterfaces]);
          [v14 addObject:v5];

          sub_100078DB4(a1);
        }
      }
    }
  }
}

void sub_10007C480(void *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = ne_log_obj(a1, a2);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v8 = 138412290;
      int v9 = a1;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "%@: Request to clear network agent from all interfaces",  (uint8_t *)&v8,  0xCu);
    }

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgentInterfaces]);
    int v6 = isa_nsarray(v5);

    if (v6)
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([a1 networkAgentInterfaces]);
      [v7 removeAllObjects];

      sub_100078DB4(a1);
    }
  }

id sub_10007C56C(id result, id a2)
{
  if (result)
  {
    uint64_t v3 = result;
    id v4 = [result failedConnectCountWithinInterval];
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 onDemandPauseTimerSource]);

    if (v5)
    {
      int v6 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([v3 onDemandPauseTimerSource]);
      dispatch_source_cancel(v6);

      [v3 setOnDemandPauseTimerSource:0];
    }

    if (a2 == (id)2)
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 queue]);
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472LL;
      v15[2] = sub_10007C710;
      v15[3] = &unk_1000BEB20;
      v15[4] = v3;
      void v15[5] = v4;
      uint64_t v8 = NECreateTimerSource(v7, 10LL, v15);
      int v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      [v3 setOnDemandPauseTimerSource:v9];
    }

    id v10 = [v3 onDemandPauseLevelInternal];
    if (v10 != a2)
    {
      uint64_t v12 = ne_log_obj(v10, v11);
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        id v14 = [v3 onDemandPauseLevelInternal];
        *(_DWORD *)__int128 buf = 138412802;
        __int16 v17 = v3;
        __int16 v18 = 2048;
        id v19 = v14;
        __int16 v20 = 2048;
        uint64_t v21 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "%@: Changing pause level %ld -> %ld",  buf,  0x20u);
      }

      [v3 setOnDemandPauseLevelInternal:a2];
    }

    return sub_1000775B0(v3);
  }

  return result;
}

void sub_10007C710(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) onDemandPauseLevelInternal];
  if (v2)
  {
    if (*(uint64_t *)(a1 + 40) > 3)
    {
      uint64_t v4 = ne_log_obj(v2, v3);
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        int v9 = 138412290;
        uint64_t v10 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%@: Clearing damping of on-demand.",  (uint8_t *)&v9,  0xCu);
      }

      sub_10007C56C(*(void *)(a1 + 32), 0LL);
      [*(id *)(a1 + 32) setFailedConnectCountWithinInterval:0];
    }

    else
    {
      sub_10007C56C(*(void *)(a1 + 32), 1LL);
    }
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) onDemandPauseTimerSource]);

  if (v7)
  {
    uint64_t v8 = (dispatch_source_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) onDemandPauseTimerSource]);
    dispatch_source_cancel(v8);

    [*(id *)(a1 + 32) setOnDemandPauseTimerSource:0];
  }

void sub_10007CA08( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_10007CAF4(uint64_t a1, char a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v6 = WeakRetained;
  if (!WeakRetained || (a2 & 1) == 0)
  {
LABEL_10:
    __int16 v17 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
    goto LABEL_11;
  }

  id Property = objc_getProperty(WeakRetained, v5, 688LL, 1);
  uint64_t v8 = objc_claimAutoreleasedReturnValue(Property);
  if (!v8) {
    goto LABEL_7;
  }
  uint64_t v10 = (void *)v8;
  id v11 = objc_getProperty(v6, v9, 688LL, 1);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 controlUnit]);
  unsigned int v14 = [v13 unsignedIntValue];

  if (!v14)
  {
LABEL_7:
    uint64_t v15 = ne_log_obj(v8, v9);
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "Invalid flow divert control unit",  (uint8_t *)&buf,  2u);
    }

    goto LABEL_10;
  }

  if ([*(id *)(a1 + 32) isFullyTransparent])
  {
    BOOL v55 = 0;
    LODWORD(v51) = 0;
  }

  else
  {
    __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([v6 pluginConfigurationEntities]);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 DNSSettings]);
    BOOL v20 = v19 != 0LL;

    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v6 pluginConfigurationEntities]);
    unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue([v21 proxySettings]);
    BOOL v55 = v20;
    if ([v22 enabled])
    {
      LODWORD(v51) = 1;
    }

    else
    {
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v6 protocol]);
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v23 proxySettings]);
      LODWORD(v51) = [v24 enabled];
    }
  }

  uint64_t v25 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "policySession", v51));
  id v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) includedNetworkRules]);
  unint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) excludedNetworkRules]);
  id v29 = objc_getProperty(v6, v28, 688LL, 1);
  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
  uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue([v30 controlUnit]);
  unsigned int v54 = [v58 unsignedIntValue];
  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v6 primaryTunnelPlugin]);
  id v33 = sub_100015CE0(v31, v32);
  uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
  id v35 = (void *)objc_claimAutoreleasedReturnValue([v34 firstObject]);
  unsigned __int8 v53 = [*(id *)(a1 + 32) isFullyTransparent];
  id v36 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) server]);
  SEL v38 = v36;
  uint64_t v59 = v30;
  id v56 = v34;
  uint64_t v57 = v31;
  id v39 = (void *)v25;
  if (v36) {
    id v36 = objc_getProperty(v36, v37, 80LL, 1);
  }
  id v40 = v36;
  id v41 = v26;
  id v42 = v27;
  id v43 = v35;
  id v44 = v40;
  if (v39)
  {
    *(void *)&__int128 buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472LL;
    uint64_t v61 = sub_100041528;
    uint64_t v62 = &unk_1000BDEB0;
    id v63 = v39;
    unsigned int v68 = v54;
    unsigned __int8 v69 = v53;
    id v64 = v43;
    id v65 = v44;
    id v66 = v42;
    char v70 = v52;
    BOOL v71 = v55;
    id v67 = v41;
    uint64_t v45 = v39;
    char v46 = sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, &buf);
  }

  else
  {
    uint64_t v45 = 0LL;
    char v46 = 0;
  }

  if ((v46 & 1) == 0)
  {
    uint64_t v49 = ne_log_obj(v47, v48);
    id v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_ERROR,  "%@: Failed to set the flow divert policies",  (uint8_t *)&buf,  0xCu);
    }
  }

  __int16 v17 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
LABEL_11:
  v17();
}

void sub_10007DCD8(void *a1, const char *a2)
{
  if (a1)
  {
    if (objc_getProperty(a1, a2, 384LL, 1))
    {
      objc_msgSend( objc_getProperty(a1, v3, 384, 1),  "removeObserver:forKeyPath:",  a1,  @"bestAvailableNetworkDescription");
      objc_setProperty_atomic(a1, v4, 0LL, 384LL);
    }

    id Property = objc_getProperty(a1, v3, 392LL, 1);
    if (Property)
    {
      uint64_t v7 = ne_log_obj(Property, v6);
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        int v10 = 138412290;
        id v11 = a1;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "%@ End DNS On Demand monitor transaction",  (uint8_t *)&v10,  0xCu);
      }

      objc_setProperty_atomic(a1, v9, 0LL, 392LL);
    }
  }

void sub_10007DDF0(void *a1, char a2)
{
  if (a1)
  {
    v8[0] = 0LL;
    v8[1] = v8;
    _DWORD v8[2] = 0x3032000000LL;
    v8[3] = sub_10007DEE0;
    void v8[4] = sub_10007DEF0;
    id v9 = (id)os_transaction_create("com.apple.nesessionmanager.DNSSettings.updatePolicies");
    SEL v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1 queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10007DEF8;
    block[3] = &unk_1000BEAB0;
    char v6 = a2;
    char v7 = 1;
    void block[4] = a1;
    void block[5] = v8;
    dispatch_async(v4, block);

    _Block_object_dispose(v8, 8);
  }

void sub_10007DEC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10007DEE0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10007DEF0(uint64_t a1)
{
}

void sub_10007DEF8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    sub_10007C208(*(void **)(a1 + 32));
    sub_10007AFD4(*(void **)(a1 + 32));
  }

  if (*(_BYTE *)(a1 + 49))
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 dnsSettings]);
    unsigned int v4 = [v3 isEnabled];

    uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) policySession]);
    char v6 = (_DWORD *)v5;
    if (v4)
    {
      id v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) networkAgent]);
      char v7 = (void *)objc_claimAutoreleasedReturnValue([v26 agentUUID]);
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v25 dnsSettings]);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 settings]);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 matchDomains]);
      id Property = *(id *)(a1 + 32);
      if (Property)
      {
        id Property = objc_getProperty(Property, v10, 376LL, 1);
        id v13 = *(void **)(a1 + 32);
      }

      else
      {
        id v13 = 0LL;
      }

      id v14 = Property;
      id v15 = (id)objc_claimAutoreleasedReturnValue([v13 server]);
      __int16 v17 = v15;
      if (v15) {
        id v15 = objc_getProperty(v15, v16, 80LL, 1);
      }
      id v18 = v15;
      id v19 = v7;
      id v20 = v11;
      id v21 = v14;
      id v22 = v18;
      if (v6 && v6[2] == 7)
      {
        v27[0] = _NSConcreteStackBlock;
        v27[1] = 3221225472LL;
        v27[2] = sub_100045454;
        v27[3] = &unk_1000BDFA0;
        v27[4] = v6;
        id v28 = v19;
        id v29 = v20;
        id v30 = v21;
        id v31 = v22;
        sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, v27);
      }
    }

    else
    {
      sub_10002BCE0(v5);
    }
  }

  uint64_t v23 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v24 = *(void **)(v23 + 40);
  *(void *)(v23 + 40) = 0LL;
}

void sub_10007E154(uint64_t a1)
{
  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
  uint64_t v2 = objc_claimAutoreleasedReturnValue([v7 dnsSettings]);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 dnsSettings]);
    char v6 = (void *)objc_claimAutoreleasedReturnValue([v5 settings]);

    if (v6) {
      [*(id *)(a1 + 32) startWithCommand:0 isOnDemand:0];
    }
  }

  else
  {
  }

void sub_10007E22C(void *a1, const char *a2)
{
  if (a1)
  {
    uint64_t v2 = a1;
    sub_10007DCD8(a1, a2);
    if (objc_getProperty(v2, v3, 368LL, 1))
    {
      if (!objc_getProperty(v2, v4, 368LL, 1))
      {
        uint64_t v5 = 0LL;
        goto LABEL_32;
      }

      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
      if (objc_msgSend(objc_getProperty(v2, v6, 368, 1), "count"))
      {
        __int128 v47 = 0u;
        __int128 v48 = 0u;
        __int128 v45 = 0u;
        __int128 v46 = 0u;
        id v43 = v2;
        id v8 = objc_getProperty(v2, v7, 368LL, 1);
        id v9 = [v8 countByEnumeratingWithState:&v45 objects:buf count:16];
        if (!v9) {
          goto LABEL_17;
        }
        id v10 = v9;
        uint64_t v11 = *(void *)v46;
        while (1)
        {
          uint64_t v12 = 0LL;
          do
          {
            if (*(void *)v46 != v11) {
              objc_enumerationMutation(v8);
            }
            id v13 = v5;
            id v14 = *(void **)(*((void *)&v45 + 1) + 8LL * (void)v12);
            id v15 = objc_alloc_init(&OBJC_CLASS___NWNetworkDescription);
            id v16 = [v14 interfaceTypeMatch];
            if (v16 == (id)3)
            {
              __int16 v17 = &off_1000C18A8;
            }

            else
            {
              if (v16 != (id)2) {
                goto LABEL_15;
              }
              __int16 v17 = &off_1000C18C0;
            }

            id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v17));
            [v15 setInterfaceTypeOptions:v18];

LABEL_15:
            id v19 = (void *)objc_claimAutoreleasedReturnValue([v14 DNSSearchDomainMatch]);
            id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v19));
            [v15 setDnsSearchDomainOptions:v20];

            id v21 = (void *)objc_claimAutoreleasedReturnValue([v14 DNSServerAddressMatch]);
            id v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v21));
            [v15 setDnsServerAddressOptions:v22];

            uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v14 SSIDMatch]);
            uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v23));
            [v15 setSsidOptions:v24];

            uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v14 probeURL]);
            [v15 setProbeURL:v25];

            uint64_t v5 = v13;
            [v13 addObject:v15];

            uint64_t v12 = (char *)v12 + 1;
          }

          while (v10 != v12);
          id v10 = [v8 countByEnumeratingWithState:&v45 objects:buf count:16];
          if (!v10)
          {
LABEL_17:

            uint64_t v2 = v43;
            if (!v5) {
              goto LABEL_32;
            }
            goto LABEL_22;
          }
        }
      }

      id v26 = objc_alloc_init(&OBJC_CLASS___NWNetworkDescription);
      [v5 addObject:v26];

      if (!v5) {
        goto LABEL_32;
      }
LABEL_22:
      id v27 = objc_alloc_init(&OBJC_CLASS___NWParameters);
      id v28 = (void *)objc_claimAutoreleasedReturnValue( +[NWMonitor monitorWithNetworkDescriptionArray:endpoint:parameters:]( &OBJC_CLASS___NWMonitor,  "monitorWithNetworkDescriptionArray:endpoint:parameters:",  v5,  0LL,  v27));
      objc_setProperty_atomic(v2, v29, v28, 384LL);

      if (objc_getProperty(v2, v30, 384LL, 1))
      {
        if (!objc_getProperty(v2, v31, 392LL, 1))
        {
          uint64_t v33 = ne_log_obj(0LL, v32);
          uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)__int128 buf = 138412290;
            id v50 = v2;
            _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_INFO,  "%@ Begin DNS On Demand monitor transaction",  buf,  0xCu);
          }

          id v35 = objc_alloc(&OBJC_CLASS___NSString);
          id v36 = (void *)objc_claimAutoreleasedReturnValue([v2 configuration]);
          uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v36 identifier]);
          SEL v38 = -[NSString initWithFormat:]( v35,  "initWithFormat:",  @"com.apple.nesessionmanager.DNSOnDemandMonitor.%@",  v37);

          id v39 = (void *)os_transaction_create(-[NSString UTF8String](v38, "UTF8String"));
          objc_setProperty_atomic(v2, v40, v39, 392LL);
        }

        objc_msgSend( objc_getProperty(v2, v32, 384, 1),  "addObserver:forKeyPath:options:context:",  v2,  @"bestAvailableNetworkDescription",  5,  0);
      }

      else
      {
        uint64_t v41 = ne_log_obj(0LL, v31);
        id v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 138412290;
          id v50 = v2;
          _os_log_error_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_ERROR,  "%@ DNS On Demand monitor creation failed",  buf,  0xCu);
        }
      }

LABEL_32:
    }

    else
    {
      id v44 = (id)objc_claimAutoreleasedReturnValue([v2 server]);
      [v44 requestInstallForSession:v2 withParentSession:0 exclusive:0];
    }
  }

void sub_10007E770(const void *a1, void *a2)
{
  int v43 = 0x200000;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS____NECompletion);
  uint64_t isKindOfClass = objc_opt_isKindOfClass(a2, v4);
  if ((isKindOfClass & 1) != 0)
  {
    if (!a1)
    {
      uint64_t v27 = 0LL;
      id v14 = 0LL;
      if (a2)
      {
LABEL_25:
        uint64_t v32 = a2[2];
LABEL_26:
        (*(void (**)(uint64_t, uint64_t))(v32 + 16))(v32, v27);

        goto LABEL_27;
      }

void sub_10007EE1C(uint64_t a1, const char *a2)
{
  SEL v3 = *(void **)(a1 + 32);
  if (!v3 || (id v4 = objc_getProperty(v3, a2, 32LL, 1)) == 0LL) {
    __assert_rtn("-[NEAgent startWithCompletionHandler:]_block_invoke", "NEAgent.m", 153, "self.callbackQueue != NULL");
  }

  uint64_t v7 = ne_log_obj(v5, v6);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%@: starting", (uint8_t *)&buf, 0xCu);
  }

  uint64_t v11 = -[NSXPCConnection initWithMachServiceName:options:]( objc_alloc(&OBJC_CLASS___NSXPCConnection),  "initWithMachServiceName:options:",  @"com.apple.neagent",  0LL);
  CFTypeID v12 = *(void **)(a1 + 32);
  if (v12) {
    objc_setProperty_atomic(v12, v10, v11, 80LL);
  }

  id v14 = *(void **)(a1 + 32);
  if (v14 && v14[5])
  {
    id v15 = objc_msgSend(objc_getProperty(v14, v13, 80, 1), "_xpcConnection");
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    xpc_connection_set_instance(v16, &g_provider_host_primary_neagent_instance_id);
  }

  else
  {
    uuid_generate(out);
    uuid_unparse(out, (char *)&buf);
    uint64_t v19 = ne_log_obj(v17, v18);
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      uint64_t v21 = *(void *)(a1 + 32);
      *(_DWORD *)id v50 = 138412546;
      *(void *)&void v50[4] = v21;
      *(_WORD *)&v50[12] = 2080;
      *(void *)&v50[14] = &buf;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "%@: starting with instance ID %s", v50, 0x16u);
    }

    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v22, 80LL, 1);
    }
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([Property _xpcConnection]);
    xpc_connection_set_oneshot_instance(v16, out);
  }

  v48[0] = _NSConcreteStackBlock;
  v48[1] = 3221225472LL;
  void v48[2] = sub_10007F24C;
  void v48[3] = &unk_1000BEC08;
  v48[4] = *(void *)(a1 + 32);
  uint64_t v25 = objc_retainBlock(v48);
  id v26 = *(id *)(a1 + 32);
  if (v26) {
    id v26 = objc_getProperty(v26, v24, 80LL, 1);
  }
  [v26 setInvalidationHandler:v25];
  id v28 = *(id *)(a1 + 32);
  if (v28) {
    id v28 = objc_getProperty(v28, v27, 80LL, 1);
  }
  [v28 setInterruptionHandler:v25];
  SEL v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___NEAgentControl));
  SEL v30 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v31 = objc_opt_class(&OBJC_CLASS___NSArray);
  __int16 v46 = -[NSSet initWithObjects:](v30, "initWithObjects:", v31, objc_opt_class(&OBJC_CLASS___NSUUID), 0LL);
  objc_msgSend(v29, "setClasses:forSelector:argumentIndex:ofReply:");
  id v33 = *(id *)(a1 + 32);
  if (v33) {
    id v33 = objc_getProperty(v33, v32, 80LL, 1);
  }
  [v33 setRemoteObjectInterface:v29];
  id v35 = *(id *)(a1 + 32);
  if (v35) {
    id v35 = objc_getProperty(v35, v34, 80LL, 1);
  }
  __int128 v47 = v25;
  [v35 resume];
  int v36 = *(void **)(a1 + 32);
  id v38 = *(id *)(a1 + 40);
  if (v36)
  {
    id v39 = objc_getProperty(v36, v37, 80LL, 1);
    *(void *)&__int128 buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472LL;
    BOOL v55 = sub_10007F2F8;
    id v56 = &unk_1000BE7F0;
    uint64_t v57 = v36;
    id v40 = v38;
    id v58 = v40;
    uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v39 remoteObjectProxyWithErrorHandler:&buf]);
    uint64_t v43 = v36[5];
    uint64_t v42 = v36[6];
    uint64_t v44 = v36[7];
    uint64_t v45 = v36[12];
    *(void *)id v50 = _NSConcreteStackBlock;
    *(void *)&v50[8] = 3221225472LL;
    *(void *)&v50[16] = sub_10007F43C;
    uint64_t v51 = &unk_1000BE840;
    char v52 = v36;
    id v53 = v40;
    [v41 setupWithPluginType:v42 pluginVersion:v43 pluginClass:v44 pluginInfo:v45 completionHandler:v50];
  }
}

void sub_10007F24C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = ne_log_obj(a1, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v7 = 138412290;
    uint64_t v8 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%@: XPC connection went away",  (uint8_t *)&v7,  0xCu);
  }

  sub_10007F9D4(*(void **)(a1 + 32), v6);
}

void sub_10007F2F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = ne_log_obj(v3, v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    uint64_t v12 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v17 = v12;
    __int16 v18 = 2112;
    id v19 = v3;
    _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%@: Got an XPC error while waiting for a setup command response: %@",  buf,  0x16u);
  }

  uint64_t v8 = *(void **)(a1 + 32);
  if (v8) {
    id Property = (dispatch_queue_s *)objc_getProperty(v8, v7, 32LL, 1);
  }
  else {
    id Property = 0LL;
  }
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10007FA44;
  v13[3] = &unk_1000BED58;
  id v10 = *(id *)(a1 + 40);
  id v14 = v3;
  id v15 = v10;
  id v11 = v3;
  dispatch_async(Property, v13);
}

void sub_10007F43C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v10 = a4;
  id v11 = *(void **)(a1 + 32);
  if (v11)
  {
    id Property = (dispatch_queue_s *)objc_getProperty(v11, v9, 24LL, 1);
    uint64_t v13 = *(void *)(a1 + 32);
  }

  else
  {
    uint64_t v13 = 0LL;
    id Property = 0LL;
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10007F548;
  block[3] = &unk_1000BE818;
  id v19 = v7;
  uint64_t v20 = v13;
  id v21 = v10;
  id v14 = *(id *)(a1 + 40);
  id v22 = v8;
  id v23 = v14;
  id v15 = v8;
  id v16 = v10;
  id v17 = v7;
  dispatch_async(Property, block);
}

void sub_10007F548(uint64_t a1)
{
  id v3 = (NSError *)*(id *)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4 && v4[5]) {
    goto LABEL_11;
  }
  uint64_t v6 = objc_alloc(&OBJC_CLASS___NEProcessIdentity);
  id Property = *(id *)(a1 + 40);
  if (Property) {
    id Property = objc_getProperty(Property, v5, 80LL, 1);
  }
  id v8 = (void *)objc_claimAutoreleasedReturnValue([Property _xpcConnection]);
  id v9 = -[NEProcessIdentity initFromXPCConnection:](v6, "initFromXPCConnection:", v8);

  if (v9)
  {
    uint64_t v12 = -[NSArray initWithObjects:](objc_alloc(&OBJC_CLASS___NSArray), "initWithObjects:", v9, 0LL);
    sub_10007F940(*(void *)(a1 + 40), v12);
  }

  else
  {
    uint64_t v13 = ne_log_obj(v10, v11);
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Failed to create a process identity from the agent XPC connection",  buf,  2u);
    }

    id v15 = -[NSError initWithDomain:code:userInfo:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithDomain:code:userInfo:",  @"NEAgentErrorDomain",  1LL,  0LL);
    id v3 = v15;
  }

  uint64_t v4 = *(void **)(a1 + 40);
  if (v4) {
LABEL_11:
  }
    uint64_t v4 = objc_getProperty(v4, v2, 80LL, 1);
  id v16 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue([v4 _xpcConnection]);
  __int16 v18 = v16;
  if (v16)
  {
    uint64_t v19 = *(void *)(a1 + 40);
    pid_t pid = xpc_connection_get_pid(v16);
    sub_10007F950(v19, pid, *(void **)(a1 + 48));
    xpc_type_t type = (xpc_type_t)xpc_connection_copy_entitlement_value(v18, "com.apple.private.neagent");
    id v23 = (NSError *)type;
    if (!type
      || (xpc_type_t type = xpc_get_type(type), type != (xpc_type_t)&_xpc_type_BOOL)
      || (xpc_type_t type = (xpc_type_t)xpc_BOOL_get_value(v23), (type & 1) == 0))
    {
      uint64_t v24 = ne_log_obj(type, v22);
      uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        uint64_t v38 = *(void *)(a1 + 40);
        if (v38) {
          LODWORD(v3_Block_object_dispose(va, 8) = *(_DWORD *)(v38 + 16);
        }
        *(_DWORD *)__int128 buf = 67109120;
        LODWORD(v44) = v38;
        _os_log_error_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "Terminating neagent connection from un-entitled process %d",  buf,  8u);
      }

      id v26 = -[NSError initWithDomain:code:userInfo:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithDomain:code:userInfo:",  @"NEAgentErrorDomain",  1LL,  0LL);
      id v3 = v26;
    }
  }

  else
  {
    uint64_t v27 = ne_log_obj(0LL, v17);
    id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "Terminating neagent connection because the XPC connection is NULL",  buf,  2u);
    }

    id v23 = v3;
    id v3 = -[NSError initWithDomain:code:userInfo:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithDomain:code:userInfo:",  @"NEAgentErrorDomain",  1LL,  0LL);
  }

  if (v3)
  {
    uint64_t v31 = ne_log_obj(v29, v30);
    uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      uint64_t v37 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v44 = v37;
      __int16 v45 = 2112;
      __int16 v46 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "%@: Tearing down XPC connection due to setup error: %@",  buf,  0x16u);
    }

    sub_10007F9D4(*(void **)(a1 + 40), v33);
  }

  uint64_t v34 = *(void **)(a1 + 40);
  if (v34) {
    id v35 = (dispatch_queue_s *)objc_getProperty(v34, v30, 32LL, 1);
  }
  else {
    id v35 = 0LL;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10007FA30;
  block[3] = &unk_1000BED30;
  id v42 = *(id *)(a1 + 64);
  id v40 = v3;
  id v41 = *(id *)(a1 + 56);
  int v36 = v3;
  dispatch_async(v35, block);
}

void sub_10007F940(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 72), a2);
  }
}

void sub_10007F950(uint64_t a1, int a2, void *a3)
{
  id v8 = a3;
  if (a1)
  {
    *(_DWORD *)(a1 + 16) = a2;
    objc_storeStrong((id *)(a1 + 64), a3);
    uint64_t v6 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@[%d]",  *(void *)(a1 + 48),  *(unsigned int *)(a1 + 16)));
    id v7 = *(void **)(a1 + 8);
    *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
  }
}

void sub_10007F9D4(void *a1, const char *a2)
{
  if (a1)
  {
    if (objc_getProperty(a1, a2, 80LL, 1))
    {
      objc_msgSend(objc_getProperty(a1, v3, 80, 1), "invalidate");
      objc_setProperty_atomic(a1, v4, 0LL, 80LL);
    }
  }

uint64_t sub_10007FA30(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

uint64_t sub_10007FA44(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_10007FA58(uint64_t a1, const char *a2)
{
  id v3 = *(void **)(a1 + 32);
  if (!v3 || (id v4 = objc_getProperty(v3, a2, 32LL, 1)) == 0LL) {
    __assert_rtn( "-[NEAgent disposeWithCompletionHandler:]_block_invoke",  "NEAgent.m",  204,  "self.callbackQueue != NULL");
  }

  uint64_t v7 = ne_log_obj(v5, v6);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v28 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%@: disposing", buf, 0xCu);
  }

  uint64_t v11 = *(void **)(a1 + 32);
  if (!v11) {
    goto LABEL_15;
  }
  id Property = objc_getProperty(v11, v10, 80LL, 1);
  id v14 = *(void **)(a1 + 32);
  if (!Property)
  {
    if (v14)
    {
      uint64_t v20 = (dispatch_queue_s *)objc_getProperty(v14, v12, 32LL, 1);
LABEL_12:
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10007FC90;
      block[3] = &unk_1000BE868;
      id v26 = *(id *)(a1 + 40);
      dispatch_async(v20, block);
      uint64_t v19 = v26;
      goto LABEL_13;
    }

uint64_t sub_10007FC90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10007FCA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = ne_log_obj(v3, v4);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138412546;
    uint64_t v9 = v7;
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%@: Got an error on the XPC connection while waiting for dispose to complete: %@",  (uint8_t *)&v8,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10007FD78(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = *(void **)(a1 + 32);
  if (v5)
  {
    id Property = (dispatch_queue_s *)objc_getProperty(v5, v3, 24LL, 1);
    uint64_t v7 = *(void *)(a1 + 32);
  }

  else
  {
    uint64_t v7 = 0LL;
    id Property = 0LL;
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10007FE38;
  block[3] = &unk_1000BED30;
  id v10 = v4;
  uint64_t v11 = v7;
  id v12 = *(id *)(a1 + 40);
  id v8 = v4;
  dispatch_async(Property, block);
}

void sub_10007FE38(id *a1, uint64_t a2)
{
  if (a1[4])
  {
    uint64_t v3 = ne_log_obj(a1, a2);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      id v13 = a1[4];
      id v12 = a1[5];
      *(_DWORD *)__int128 buf = 138412546;
      id v18 = v12;
      __int16 v19 = 2112;
      id v20 = v13;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%@: disposed with error: %@", buf, 0x16u);
    }
  }

  uint64_t v5 = ne_log_obj(a1, a2);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = a1[5];
    *(_DWORD *)__int128 buf = 138412290;
    id v18 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%@: disposed, tearing down agent connection",  buf,  0xCu);
  }

  sub_10007F9D4(a1[5], v8);
  id v10 = a1[5];
  if (v10) {
    id Property = (dispatch_queue_s *)objc_getProperty(v10, v9, 32LL, 1);
  }
  else {
    id Property = 0LL;
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_10007FFD0;
  v14[3] = &unk_1000BED58;
  id v16 = a1[6];
  id v15 = a1[4];
  dispatch_async(Property, v14);
}

uint64_t sub_10007FFD0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_10007FFE0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    uint64_t v3 = *(void **)(v2 + 64);
  }
  else {
    uint64_t v3 = 0LL;
  }
  id v4 = (NSMutableArray *)[v3 mutableCopy];
  if (!v4) {
    id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  }
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v5 = *(id *)(a1 + 40);
  id v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v15;
    do
    {
      for (id i = 0LL; i != v7; id i = (char *)i + 1)
      {
        if (*(void *)v15 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v14 + 1) + 8LL * (void)i);
      }

      id v7 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }

    while (v7);
  }

  if (-[NSMutableArray count](v4, "count"))
  {
    uint64_t v11 = -[NSArray initWithArray:](objc_alloc(&OBJC_CLASS___NSArray), "initWithArray:", v4);
    uint64_t v12 = *(void *)(a1 + 32);
    id v13 = *(void **)(v12 + 64);
    *(void *)(v12 + 64) = v11;
  }
}

void sub_10008018C(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v3 = ne_log_obj(a1, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = "TRUE";
    if (!v2) {
      id v5 = "FALSE";
    }
    int v6 = 136315138;
    id v7 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[NEWiFiManager] Wi-Fi WoW state change callback called, isEnabled:[%s]",  (uint8_t *)&v6,  0xCu);
  }
}

id sub_100080244(uint64_t a1)
{
  if (qword_1000CFC28 != -1) {
    dispatch_once(&qword_1000CFC28, &stru_1000BE888);
  }
  return (id)qword_1000CFC20;
}

void sub_100080288(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___NEWiFiManager);
  int v2 = (void *)qword_1000CFC20;
  qword_1000CFC20 = (uint64_t)v1;
}

void sub_1000802B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && *(void *)(v2 + 16)
    || (uint64_t v3 = WiFiManagerClientCreate(kCFAllocatorDefault, 0LL), (v4 = *(void *)(a1 + 32)) != 0)
    && (*(void *)(v4 + 16) = v3, (uint64_t v2 = *(void *)(a1 + 32)) != 0)
    && *(void *)(v2 + 16))
  {
    ++*(void *)(v2 + 8);
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5 && *(void *)(v5 + 8) == 1LL)
    {
      WiFiManagerClientSetWoWState(*(void *)(v5 + 16), 1LL);
      uint64_t v6 = *(void *)(a1 + 32);
      if (v6) {
        uint64_t v7 = *(void *)(v6 + 16);
      }
      else {
        uint64_t v7 = 0LL;
      }
      WiFiManagerClientRegisterWowStateChangedCallback(v7, sub_10008018C, v6);
      uint64_t v8 = *(void *)(a1 + 32);
      if (v8) {
        uint64_t v9 = *(void *)(v8 + 16);
      }
      else {
        uint64_t v9 = 0LL;
      }
      Maiid n = CFRunLoopGetMain();
      uint64_t v11 = WiFiManagerClientScheduleWithRunLoop(v9, Main, kCFRunLoopDefaultMode);
      uint64_t v13 = ne_log_obj(v11, v12);
      __int128 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        uint64_t v15 = *(void *)(a1 + 32);
        int v16 = 138412290;
        uint64_t v17 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%@ enabled Wi-Fi WoW", (uint8_t *)&v16, 0xCu);
      }
    }
  }

void sub_100080410(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      *(void *)(v1 + _Block_object_dispose(va, 8) = v2 - 1;
      uint64_t v3 = *(void *)(a1 + 32);
      if (v3)
      {
        if (!*(void *)(v3 + 8))
        {
          uint64_t v4 = *(void *)(v3 + 16);
          if (v4)
          {
            WiFiManagerClientSetWoWState(v4, 0LL);
            WiFiManagerClientRegisterWowStateChangedCallback(*(void *)(v3 + 16), 0LL, 0LL);
            uint64_t v5 = *(void *)(v3 + 16);
            Maiid n = CFRunLoopGetMain();
            WiFiManagerClientUnscheduleFromRunLoop(v5, Main, kCFRunLoopDefaultMode);
            CFRelease(*(CFTypeRef *)(v3 + 16));
            *(void *)(v3 + _Block_object_dispose(va, 8) = 0LL;
            *(void *)(v3 + 16) = 0LL;
            uint64_t v9 = ne_log_obj(v7, v8);
            uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
            if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            {
              int v11 = 138412290;
              uint64_t v12 = v3;
              _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "%@ disabled Wi-Fi WoW",  (uint8_t *)&v11,  0xCu);
            }
          }
        }
      }
    }
  }

LABEL_28:
  [v16 setObject:v20 forKeyedSubscript:@"VPN"];
  id v23 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:@"ConnectionStatistics"]);
  id v24 = isa_nsdictionary(v23);

  if (v24)
  {
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:@"ConnectionStatistics"]);
    id v26 = (NSMutableDictionary *)[v25 mutableCopy];
  }

  else
  {
    id v26 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  }

  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  -[NESMSession connectCount](v2, "connectCount")));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v26, "setObject:forKeyedSubscript:", v27, @"ConnectCount");

  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  -[NESMSession connectedCount](v2, "connectedCount")));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v26, "setObject:forKeyedSubscript:", v28, @"ConnectedCount");

  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  -[NESMSession disconnectedCount](v2, "disconnectedCount")));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v26,  "setObject:forKeyedSubscript:",  v29,  @"DisconnectedCount");

  SEL v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  -[NESMSession maxConnectTime](v2, "maxConnectTime")));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v26, "setObject:forKeyedSubscript:", v30, @"MaxConnectTime");

  [v16 setObject:v26 forKeyedSubscript:@"ConnectionStatistics"];
  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  -[NESMSession status](v2, "status")));
  [v16 setObject:v31 forKeyedSubscript:@"NEStatus"];

  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  -[NESMSession SCNCStatus](v2, "SCNCStatus")));
  [v16 setObject:v32 forKeyedSubscript:@"Status"];

  id v33 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession lastDisconnectError](v2, "lastDisconnectError"));
  if (v33)
  {
    uint64_t v43 = 0LL;
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v33,  1LL,  &v43));
    id v35 = v43;
    uint64_t v37 = v35;
    if (v34)
    {
      [v16 setObject:v34 forKeyedSubscript:@"LastDisconnectError"];
    }

    else
    {
      uint64_t v38 = ne_log_obj(v35, v36);
      id v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412290;
        __int16 v45 = v37;
        _os_log_error_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_ERROR,  "Failed to serialize the last disconnect error: %@",  buf,  0xCu);
      }
    }
  }

  id v40 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession lastStatusChangeTime](v2, "lastStatusChangeTime"));

  if (v40)
  {
    id v41 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession lastStatusChangeTime](v2, "lastStatusChangeTime"));
    [v16 setObject:v41 forKeyedSubscript:@"LastStatusChangeTime"];
  }

LABEL_41:
  return v16;
}

void sub_100083060(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  id v4 = (id)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:0]);
  id v6 = v4;
  if (v4) {
    id v4 = objc_getProperty(v4, v5, 24LL, 1);
  }
  [v4 handleNetworkConfigurationChange:*(void *)(a1 + 40)];
}

void sub_1000830C8(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  id v4 = (id)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:1]);
  id v6 = v4;
  if (v4) {
    id v4 = objc_getProperty(v4, v5, 24LL, 1);
  }
  [v4 handleNetworkConfigurationChange:*(void *)(a1 + 40)];
}

void sub_100083130(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property && (id Property = objc_getProperty(Property, a2, 24LL, 1)) != 0LL)
  {
    id v4 = Property;
    id Property = objc_getProperty(Property, v3, 24LL, 1);
  }

  else
  {
    id v4 = 0LL;
  }

  [Property uninstallOnQueue];
}

void sub_100083188(void *a1, const char *a2)
{
  if (a1)
  {
    if (objc_getProperty(a1, a2, 408LL, 1))
    {
      id v4 = objc_msgSend(objc_getProperty(a1, v3, 408, 1), "count");
      uint64_t v6 = ne_log_obj(v4, v5);
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      uint64_t v8 = v7;
      if (v4)
      {
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v10 = a1[50] - 2LL;
          if (v10 > 3) {
            int v11 = @"Uninstalled";
          }
          else {
            int v11 = off_1000BE9C0[v10];
          }
          id v16 = objc_msgSend(objc_getProperty(a1, v9, 360, 1), "objectAtIndexedSubscript:", 0);
          uint64_t v17 = objc_claimAutoreleasedReturnValue(v16);
          __int16 v19 = (void *)v17;
          if (v17 && (unint64_t v20 = *(void *)(v17 + 32) - 2LL, v20 <= 3)) {
            id v21 = off_1000BE9C0[v20];
          }
          else {
            id v21 = @"Uninstalled";
          }
          id v22 = objc_msgSend(objc_getProperty(a1, v18, 360, 1), "objectAtIndexedSubscript:", 1);
          uint64_t v23 = objc_claimAutoreleasedReturnValue(v22);
          id v24 = (void *)v23;
          if (v23 && (unint64_t v25 = *(void *)(v23 + 32) - 2LL, v25 <= 3)) {
            id v26 = off_1000BE9C0[v25];
          }
          else {
            id v26 = @"Uninstalled";
          }
          *(_DWORD *)__int128 buf = 138413058;
          uint64_t v59 = (const char *)a1;
          __int16 v60 = 2112;
          uint64_t v61 = v11;
          __int16 v62 = 2112;
          id v63 = v21;
          __int16 v64 = 2112;
          id v65 = v26;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%@:Request install, parent session(%@), primary session(%@), fallback session(%@)",  buf,  0x2Au);
        }

        id v28 = objc_msgSend(objc_getProperty(a1, v27, 408, 1), "objectAtIndexedSubscript:", 0);
        uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
        uint64_t v8 = v29;
        if (v29 && *((void *)v29 + 2) == 3LL)
        {
          switch(a1[50])
          {
            case 1LL:
            case 2LL:
              a1[50] = 3LL;
              id Property = objc_getProperty(v29, v30, 24LL, 1);
              if (Property) {
                Property[4] = 3LL;
              }
              uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue([a1 server]);
              -[os_log_s requestInstallForSession:withParentSession:exclusive:]( v32,  "requestInstallForSession:withParentSession:exclusive:",  a1,  0LL,  *((_BYTE *)v8 + 8) & 1);
              goto LABEL_29;
            case 3LL:
              uint64_t v34 = ne_log_obj(v29, v30);
              uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
              if (!os_log_type_enabled(v32, OS_LOG_TYPE_FAULT)) {
                goto LABEL_29;
              }
              *(_WORD *)__int128 buf = 0;
              id v35 = "parent session is in requested installation state";
              goto LABEL_45;
            case 4LL:
              id v36 = objc_getProperty(v29, v30, 24LL, 1);
              if (v36) {
                id v36 = objc_getProperty(v36, v37, 24LL, 1);
              }
              uint64_t v38 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v36 queue]);
              block[0] = _NSConcreteStackBlock;
              block[1] = 3221225472LL;
              block[2] = sub_100083B60;
              block[3] = &unk_1000BEC08;
              id v39 = v8;
              uint64_t v57 = v39;
              dispatch_async(v38, block);

              id v41 = objc_getProperty(v39, v40, 24LL, 1);
              if (v41) {
                void v41[4] = 4LL;
              }
              objc_msgSend(objc_getProperty(a1, v42, 408, 1), "removeObject:", v39);
              uint64_t v32 = v57;
              goto LABEL_29;
            case 5LL:
              id v43 = objc_getProperty(v29, v30, 24LL, 1);
              if (v43) {
                id v43 = objc_getProperty(v43, v44, 24LL, 1);
              }
              __int16 v45 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v43 queue]);
              uint64_t v51 = _NSConcreteStackBlock;
              uint64_t v52 = 3221225472LL;
              id v53 = sub_100083BB8;
              unsigned int v54 = &unk_1000BEC08;
              __int16 v46 = v8;
              BOOL v55 = v46;
              dispatch_async(v45, &v51);

              __int128 v48 = objc_getProperty(v46, v47, 24LL, 1);
              if (v48) {
                v48[4] = 5LL;
              }
              id v50 = objc_getProperty(a1, v49, 408LL, 1);
              objc_msgSend(v50, "removeObject:", v46, v51, v52, v53, v54);
              uint64_t v32 = v55;
              goto LABEL_29;
            default:
              goto LABEL_30;
          }
        }

        uint64_t v33 = ne_log_obj(v29, v30);
        uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)__int128 buf = 0;
          id v35 = "bad operation request state";
LABEL_45:
          _os_log_fault_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, v35, buf, 2u);
        }

void sub_100083678(void *a1, const char *a2)
{
  if (a1)
  {
    if (objc_getProperty(a1, a2, 408LL, 1))
    {
      id v4 = objc_msgSend(objc_getProperty(a1, v3, 408, 1), "count");
      uint64_t v6 = ne_log_obj(v4, v5);
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      uint64_t v8 = v7;
      if (v4)
      {
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v10 = a1[50] - 2LL;
          if (v10 > 3) {
            int v11 = @"Uninstalled";
          }
          else {
            int v11 = off_1000BE9C0[v10];
          }
          id v16 = objc_msgSend(objc_getProperty(a1, v9, 360, 1), "objectAtIndexedSubscript:", 0);
          uint64_t v17 = objc_claimAutoreleasedReturnValue(v16);
          __int16 v19 = (void *)v17;
          if (v17 && (unint64_t v20 = *(void *)(v17 + 32) - 2LL, v20 <= 3)) {
            id v21 = off_1000BE9C0[v20];
          }
          else {
            id v21 = @"Uninstalled";
          }
          id v22 = objc_msgSend(objc_getProperty(a1, v18, 360, 1), "objectAtIndexedSubscript:", 1);
          uint64_t v23 = objc_claimAutoreleasedReturnValue(v22);
          id v24 = (void *)v23;
          if (v23 && (unint64_t v25 = *(void *)(v23 + 32) - 2LL, v25 <= 3)) {
            id v26 = off_1000BE9C0[v25];
          }
          else {
            id v26 = @"Uninstalled";
          }
          *(_DWORD *)__int128 buf = 138413058;
          id v56 = (const char *)a1;
          __int16 v57 = 2112;
          id v58 = v11;
          __int16 v59 = 2112;
          __int16 v60 = v21;
          __int16 v61 = 2112;
          __int16 v62 = v26;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%@:Request uninstall, parent session(%@), primary session(%@), fallback session(%@)",  buf,  0x2Au);
        }

        id v28 = objc_msgSend(objc_getProperty(a1, v27, 408, 1), "objectAtIndexedSubscript:", 0);
        uint64_t v29 = objc_claimAutoreleasedReturnValue(v28);
        uint64_t v8 = (os_log_s *)v29;
        if (!v29 || *(void *)(v29 + 16) != 2LL)
        {
          uint64_t v49 = ne_log_obj(v29, v30);
          __int128 v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
          if (os_log_type_enabled(v48, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)__int128 buf = 0;
            uint64_t v52 = "bad operation request state";
            goto LABEL_43;
          }

void sub_100083B08(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property && (id Property = objc_getProperty(Property, a2, 24LL, 1)) != 0LL)
  {
    id v4 = Property;
    id Property = objc_getProperty(Property, v3, 24LL, 1);
  }

  else
  {
    id v4 = 0LL;
  }

  [Property uninstallOnQueue];
}

void sub_100083B60(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property && (id Property = objc_getProperty(Property, a2, 24LL, 1)) != 0LL)
  {
    id v4 = Property;
    id Property = objc_getProperty(Property, v3, 24LL, 1);
  }

  else
  {
    id v4 = 0LL;
  }

  [Property installPended];
}

void sub_100083BB8(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property && (id Property = objc_getProperty(Property, a2, 24LL, 1)) != 0LL)
  {
    id v4 = Property;
    id Property = objc_getProperty(Property, v3, 24LL, 1);
  }

  else
  {
    id v4 = 0LL;
  }

  [Property install];
}

void sub_100083C10(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property && (id Property = objc_getProperty(Property, a2, 24LL, 1)) != 0LL)
  {
    id v4 = Property;
    id Property = objc_getProperty(Property, v3, 24LL, 1);
  }

  else
  {
    id v4 = 0LL;
  }

  [Property installPended];
}

void sub_100083C68(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  id v4 = (id)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:*(void *)(a1 + 40)]);
  id v6 = v4;
  if (v4) {
    id v4 = objc_getProperty(v4, v5, 24LL, 1);
  }
  [v4 install];
}

void sub_100083CCC(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property && (id Property = objc_getProperty(Property, a2, 24LL, 1)) != 0LL)
  {
    id v4 = Property;
    id Property = objc_getProperty(Property, v3, 24LL, 1);
  }

  else
  {
    id v4 = 0LL;
  }

  [Property install];
}

uint64_t sub_100083D24(uint64_t result, int a2, uint64_t a3)
{
  if (result)
  {
    unsigned int v3 = a3;
    switch(a2)
    {
      case 0:
        id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a3));
        unsigned int v5 = [&off_1000C16F8 containsObject:v4];

        if (v5) {
          return v3;
        }
        else {
          return 0LL;
        }
      case 1:
        id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a3));
        unsigned int v7 = [&off_1000C1758 containsObject:v6];

        if (v7) {
          return v3;
        }
        else {
          return 1LL;
        }
      case 2:
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a3));
        unsigned int v9 = [&off_1000C1710 containsObject:v8];

        BOOL v10 = v9 == 0;
        unsigned int v11 = 2;
        goto LABEL_15;
      case 3:
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a3));
        unsigned int v13 = [&__NSArray0__struct containsObject:v12];

        BOOL v10 = v13 == 0;
        unsigned int v11 = 3;
        goto LABEL_15;
      case 4:
        __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a3));
        unsigned int v15 = [&off_1000C1728 containsObject:v14];

        BOOL v10 = v15 == 0;
        unsigned int v11 = 4;
        goto LABEL_15;
      case 5:
        id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a3));
        unsigned int v17 = [&off_1000C1740 containsObject:v16];

        BOOL v10 = v17 == 0;
        unsigned int v11 = 5;
LABEL_15:
        if (v10) {
          id result = v11;
        }
        else {
          id result = v3;
        }
        break;
      default:
        id result = 0LL;
        break;
    }
  }

  return result;
}

void sub_100083EE0(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  id v4 = (id)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:0]);
  id v6 = v4;
  if (v4) {
    id v4 = objc_getProperty(v4, v5, 24LL, 1);
  }
  [v4 handleNetworkDetectionNotification:*(unsigned int *)(a1 + 40)];
}

void sub_100083F48(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  id v4 = (id)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:1]);
  id v6 = v4;
  if (v4) {
    id v4 = objc_getProperty(v4, v5, 24LL, 1);
  }
  [v4 handleNetworkDetectionNotification:*(unsigned int *)(a1 + 40)];
}

void sub_100083FB0(void *a1, const char *a2)
{
  id Property = (id)a1[4];
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  id v4 = (id)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:0]);
  id v6 = v4;
  if (v4) {
    id v4 = objc_getProperty(v4, v5, 24LL, 1);
  }
  [v4 handleChangeEventForInterface:a1[5] newFlags:a1[6] previousFlags:a1[7]];
}

void sub_10008401C(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  id v4 = (id)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:0]);
  id v6 = v4;
  if (v4) {
    id v4 = objc_getProperty(v4, v5, 24LL, 1);
  }
  [v4 handleUpdateConfiguration:0];

  id v8 = *(id *)(a1 + 32);
  if (v8) {
    id v8 = objc_getProperty(v8, v7, 360LL, 1);
  }
  id v9 = (id)objc_claimAutoreleasedReturnValue([v8 objectAtIndexedSubscript:0]);
  unsigned int v11 = v9;
  if (v9) {
    id v9 = objc_getProperty(v9, v10, 24LL, 1);
  }
  sub_10007C13C(v9);

  id v13 = *(id *)(a1 + 32);
  if (v13) {
    id v13 = objc_getProperty(v13, v12, 360LL, 1);
  }
  id v14 = (id)objc_claimAutoreleasedReturnValue([v13 objectAtIndexedSubscript:0]);
  id v16 = v14;
  if (v14) {
    id v14 = objc_getProperty(v14, v15, 24LL, 1);
  }
  sub_10007C208(v14);

  id v18 = *(id *)(a1 + 32);
  if (v18) {
    id v18 = objc_getProperty(v18, v17, 360LL, 1);
  }
  id v19 = (id)objc_claimAutoreleasedReturnValue([v18 objectAtIndexedSubscript:0]);
  id v21 = v19;
  if (v19) {
    id v19 = objc_getProperty(v19, v20, 24LL, 1);
  }
  sub_10007C1A8(v19);
}

void sub_10008414C(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  id v4 = (id)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:1]);
  id v6 = v4;
  if (v4) {
    id v4 = objc_getProperty(v4, v5, 24LL, 1);
  }
  [v4 handleUpdateConfiguration:0];

  id v8 = *(id *)(a1 + 32);
  if (v8) {
    id v8 = objc_getProperty(v8, v7, 360LL, 1);
  }
  id v9 = (id)objc_claimAutoreleasedReturnValue([v8 objectAtIndexedSubscript:1]);
  unsigned int v11 = v9;
  if (v9) {
    id v9 = objc_getProperty(v9, v10, 24LL, 1);
  }
  sub_10007C13C(v9);

  id v13 = *(id *)(a1 + 32);
  if (v13) {
    id v13 = objc_getProperty(v13, v12, 360LL, 1);
  }
  id v14 = (id)objc_claimAutoreleasedReturnValue([v13 objectAtIndexedSubscript:1]);
  id v16 = v14;
  if (v14) {
    id v14 = objc_getProperty(v14, v15, 24LL, 1);
  }
  sub_10007C208(v14);

  id v18 = *(id *)(a1 + 32);
  if (v18) {
    id v18 = objc_getProperty(v18, v17, 360LL, 1);
  }
  id v19 = (id)objc_claimAutoreleasedReturnValue([v18 objectAtIndexedSubscript:1]);
  id v21 = v19;
  if (v19) {
    id v19 = objc_getProperty(v19, v20, 24LL, 1);
  }
  sub_10007C1A8(v19);
}

void sub_10008427C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) VPN]);
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([v2 protocol]);
  id v11 = [v3 copy];

  [v11 setTunnelKind:1];
  id v4 = [*(id *)(a1 + 32) copy];
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 VPN]);
  [v5 setProtocol:v11];

  id Property = *(id *)(a1 + 40);
  if (Property) {
    id Property = objc_getProperty(Property, v6, 360LL, 1);
  }
  id v8 = (id)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:0]);
  BOOL v10 = v8;
  if (v8) {
    id v8 = objc_getProperty(v8, v9, 24LL, 1);
  }
  [v8 handleUpdateConfiguration:v4];
}

void sub_100084354(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) VPN]);
  unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue([v2 protocol]);
  id v11 = [v3 copy];

  [v11 setTunnelKind:2];
  id v4 = [*(id *)(a1 + 32) copy];
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 VPN]);
  [v5 setProtocol:v11];

  id Property = *(id *)(a1 + 40);
  if (Property) {
    id Property = objc_getProperty(Property, v6, 360LL, 1);
  }
  id v8 = (id)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:1]);
  BOOL v10 = v8;
  if (v8) {
    id v8 = objc_getProperty(v8, v9, 24LL, 1);
  }
  [v8 handleUpdateConfiguration:v4];
}

void sub_10008442C(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  id v3 = (id)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:0]);
  id v5 = v3;
  if (v3) {
    id v3 = objc_getProperty(v3, v4, 24LL, 1);
  }
  [v3 handleUserSwitch];
}

void sub_100084484(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  id v3 = (id)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:1]);
  id v5 = v3;
  if (v3) {
    id v3 = objc_getProperty(v3, v4, 24LL, 1);
  }
  [v3 handleUserSwitch];
}

void sub_1000844DC(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  id v3 = (id)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:0]);
  id v5 = v3;
  if (v3) {
    id v3 = objc_getProperty(v3, v4, 24LL, 1);
  }
  [v3 handleUserLogout];
}

void sub_100084534(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  id v3 = (id)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:1]);
  id v5 = v3;
  if (v3) {
    id v3 = objc_getProperty(v3, v4, 24LL, 1);
  }
  [v3 handleUserLogout];
}

void sub_10008458C(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  id v4 = (id)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:0]);
  id v6 = v4;
  if (v4) {
    id v4 = objc_getProperty(v4, v5, 24LL, 1);
  }
  [v4 handleSleepTime:*(double *)(a1 + 40)];
}

void sub_1000845F4(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  id v4 = (id)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:1]);
  id v6 = v4;
  if (v4) {
    id v4 = objc_getProperty(v4, v5, 24LL, 1);
  }
  [v4 handleSleepTime:*(double *)(a1 + 40)];
}

void sub_10008465C(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  id v3 = (id)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:0]);
  id v5 = v3;
  if (v3) {
    id v3 = objc_getProperty(v3, v4, 24LL, 1);
  }
  [v3 handleSleep];
}

void sub_1000846B4(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  id v3 = (id)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:1]);
  id v5 = v3;
  if (v3) {
    id v3 = objc_getProperty(v3, v4, 24LL, 1);
  }
  [v3 handleSleep];
}

void sub_10008470C(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  id v3 = (id)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:0]);
  id v5 = v3;
  if (v3) {
    id v3 = objc_getProperty(v3, v4, 24LL, 1);
  }
  [v3 handleWakeup];
}

void sub_100084764(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  id v3 = (id)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:1]);
  id v5 = v3;
  if (v3) {
    id v3 = objc_getProperty(v3, v4, 24LL, 1);
  }
  [v3 handleWakeup];
}

void sub_1000847BC(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  id v4 = (id)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:0]);
  id v6 = v4;
  if (v4) {
    id v4 = objc_getProperty(v4, v5, 24LL, 1);
  }
  [v4 handleStopMessageWithReason:*(unsigned int *)(a1 + 40)];
}

void sub_100084824(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  id v4 = (id)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:1]);
  id v6 = v4;
  if (v4) {
    id v4 = objc_getProperty(v4, v5, 24LL, 1);
  }
  [v4 handleStopMessageWithReason:*(unsigned int *)(a1 + 40)];
}

void sub_10008488C(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  id v4 = (id)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:0]);
  id v6 = v4;
  if (v4) {
    id v4 = objc_getProperty(v4, v5, 24LL, 1);
  }
  [v4 handleStartMessage:*(void *)(a1 + 40)];
}

void sub_1000848F4(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  id v3 = (id)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:0]);
  id v5 = v3;
  if (v3) {
    id v3 = objc_getProperty(v3, v4, 24LL, 1);
  }
  [v3 handleInitializeState];
}

void sub_10008494C(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  id v3 = (id)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:1]);
  id v5 = v3;
  if (v3) {
    id v3 = objc_getProperty(v3, v4, 24LL, 1);
  }
  [v3 handleInitializeState];
}

void sub_1000849A4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) server]);
  if (v2 != v3)
  {

    return;
  }

  unsigned int v4 = [*(id *)(a1 + 48) isEqualToString:@"primaryCellularInterface"];

  if (v4)
  {
    uint64_t v7 = ne_log_obj(v5, v6);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) server]);
      BOOL v10 = (void *)objc_claimAutoreleasedReturnValue([v9 primaryCellularInterface]);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 interfaceName]);
      if (v11)
      {
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) server]);
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 primaryCellularInterface]);
        id v14 = (__CFString *)objc_claimAutoreleasedReturnValue([v13 interfaceName]);
        *(_DWORD *)__int128 buf = 138412290;
        id v56 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Primary cellular interface changed to %@",  buf,  0xCu);
      }

      else
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v56 = @"none";
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Primary cellular interface changed to %@",  buf,  0xCu);
      }
    }

    id Property = *(id *)(a1 + 40);
    if (Property) {
      id Property = objc_getProperty(Property, v15, 360LL, 1);
    }
    id v17 = (id)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:1]);
    id v19 = v17;
    if (v17) {
      id v17 = objc_getProperty(v17, v18, 24LL, 1);
    }
    id v20 = v17;

    id v22 = *(id *)(a1 + 40);
    if (v22) {
      id v22 = objc_getProperty(v22, v21, 384LL, 1);
    }
    id v23 = v22;
    id v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) server]);
    unint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 primaryCellularInterface]);

    uint64_t v28 = nwi_state_copy(v26, v27);
    if (v28)
    {
      uint64_t v30 = v28;
      id v31 = (void *)objc_claimAutoreleasedReturnValue([v23 interfaceName]);

      if (v31
        && (id v32 = objc_claimAutoreleasedReturnValue([v23 interfaceName]),
            uint64_t ifstate = nwi_state_get_ifstate(v30, [v32 UTF8String]),
            v32,
            ifstate))
      {
        uint64_t flags = nwi_ifstate_get_flags(ifstate);
      }

      else
      {
        uint64_t flags = 0LL;
      }

      SEL v35 = (void *)objc_claimAutoreleasedReturnValue([v25 interfaceName]);
      if (v35)
      {
        id v36 = [v25 interfaceIndex];
        id v37 = [v23 interfaceIndex];

        if (v36 == v37)
        {
          SEL v35 = 0LL;
        }

        else
        {
          id v38 = objc_claimAutoreleasedReturnValue([v25 interfaceName]);
          SEL v35 = (void *)nwi_state_get_ifstate(v30, [v38 UTF8String]);

          if (v35) {
            SEL v35 = (void *)nwi_ifstate_get_flags(v35);
          }
        }
      }

      nwi_state_release(v30);
      if (!v23) {
        goto LABEL_29;
      }
    }

    else
    {
      uint64_t flags = 0LL;
      SEL v35 = 0LL;
      if (!v23)
      {
LABEL_29:
        if (v25)
        {
          id v42 = [v25 interfaceIndex];
          if (v42 != [v23 interfaceIndex])
          {
            id v43 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v20 queue]);
            v46[0] = _NSConcreteStackBlock;
            v46[1] = 3221225472LL;
            void v46[2] = sub_100084EA8;
            v46[3] = &unk_1000BE8D8;
            id v47 = v20;
            id v48 = v25;
            uint64_t v49 = v35;
            dispatch_async(v43, v46);
          }
        }

        uint64_t v44 = *(void **)(a1 + 40);
        if (v44)
        {
          objc_setProperty_atomic(v44, v29, v25, 384LL);
          uint64_t v45 = *(void *)(a1 + 40);
          if (v45)
          {
            *(void *)(v45 + 392) = v35;
            uint64_t v44 = *(void **)(a1 + 40);
          }

          else
          {
            uint64_t v44 = 0LL;
          }
        }

        sub_100084EF4((uint64_t *)v44, (uint64_t)v29);

        return;
      }
    }

    uint64_t v39 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v20 queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100084E44;
    block[3] = &unk_1000BE8B0;
    id v51 = v20;
    id v40 = v23;
    uint64_t v41 = *(void *)(a1 + 40);
    id v52 = v40;
    uint64_t v53 = v41;
    uint64_t v54 = flags;
    dispatch_async(v39, block);

    goto LABEL_29;
  }

void sub_100084E44(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) interfaceName]);
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4) {
    uint64_t v5 = *(void *)(v4 + 392);
  }
  else {
    uint64_t v5 = 0LL;
  }
  id v6 = (id)v3;
  [v2 handleChangeEventForInterface:v3 newFlags:*(void *)(a1 + 56) previousFlags:v5];
}

void sub_100084EA8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) interfaceName]);
  [v2 handleChangeEventForInterface:v3 newFlags:*(void *)(a1 + 48) previousFlags:0];
}

void sub_100084EF4(uint64_t *a1, uint64_t a2)
{
  if (!a1) {
    return;
  }
  uint64_t v3 = ne_log_obj(a1, a2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = objc_msgSend(objc_getProperty(a1, v5, 360, 1), "objectAtIndexedSubscript:", 0);
    id Property = (id)objc_claimAutoreleasedReturnValue(v6);
    id v9 = Property;
    if (Property) {
      id Property = objc_getProperty(Property, v8, 40LL, 1);
    }
    BOOL v10 = "NO";
    if (Property) {
      id v11 = "YES";
    }
    else {
      id v11 = "NO";
    }
    id v12 = objc_msgSend(objc_getProperty(a1, v8, 360, 1), "objectAtIndexedSubscript:", 1);
    id v13 = (id)objc_claimAutoreleasedReturnValue(v12);
    unsigned int v15 = v13;
    if (v13) {
      id v13 = objc_getProperty(v13, v14, 40LL, 1);
    }
    if (v13) {
      BOOL v10 = "YES";
    }
    id v16 = objc_msgSend(objc_getProperty(a1, v14, 384, 1), "interfaceName");
    id v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    uint64_t v18 = a1[46];
    uint64_t v19 = a1[47];
    int v45 = 138413570;
    __int16 v46 = a1;
    __int16 v47 = 2080;
    id v48 = v11;
    __int16 v49 = 2080;
    id v50 = v10;
    __int16 v51 = 2112;
    id v52 = v17;
    __int16 v53 = 2048;
    uint64_t v54 = v18;
    __int16 v55 = 2048;
    uint64_t v56 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%@ primary tunnel %s, fallback tunnel %s, cellular %@, predicted: %lu, advisory: %lu",  (uint8_t *)&v45,  0x3Eu);
  }

  id v21 = objc_msgSend(objc_getProperty(a1, v20, 360, 1), "objectAtIndexedSubscript:", 0);
  id v22 = (id)objc_claimAutoreleasedReturnValue(v21);
  id v24 = v22;
  if (v22) {
    id v22 = objc_getProperty(v22, v23, 40LL, 1);
  }
  id v25 = [v22 interfaceIndex];

  id v27 = objc_msgSend(objc_getProperty(a1, v26, 360, 1), "objectAtIndexedSubscript:", 1);
  id v28 = (id)objc_claimAutoreleasedReturnValue(v27);
  uint64_t v30 = v28;
  if (v28) {
    id v28 = objc_getProperty(v28, v29, 40LL, 1);
  }
  id v31 = [v28 interfaceIndex];

  if (!v25) {
    goto LABEL_37;
  }
  if (v31)
  {
    id v33 = (id)a1[46];
    if (!v33 || (id v34 = (id)a1[47]) == 0LL || v33 != v25 || v34 != v31)
    {
      SEL v35 = (void *)objc_claimAutoreleasedReturnValue([a1 server]);
      sub_1000525C8(v35, (uint64_t)v31, (uint64_t)v25);

      a1[46] = (uint64_t)v25;
LABEL_30:
      id v43 = &OBJC_IVAR___NESMIKEv2VPNFallbackSession__advisoryInterfaceIndex;
LABEL_34:
      *(uint64_t *)((char *)a1 + *v43) = (uint64_t)v31;
      return;
    }

    return;
  }

  if (!objc_getProperty(a1, v32, 384LL, 1))
  {
LABEL_37:
    if (a1[47] && a1[46])
    {
      uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([a1 server]);
      id v43 = &OBJC_IVAR___NESMIKEv2VPNFallbackSession__predicatedInterfaceIndex;
      sub_1000529F8(v44, a1[47], a1[46]);

      id v31 = 0LL;
      a1[47] = 0LL;
      goto LABEL_34;
    }

    return;
  }

  id v37 = (id)a1[46];
  if (!v37
    || (id v38 = (id)a1[47]) == 0LL
    || v37 != v25
    || v38 != objc_msgSend(objc_getProperty(a1, v36, 384, 1), "interfaceIndex"))
  {
    uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([a1 server]);
    id v41 = objc_msgSend(objc_getProperty(a1, v40, 384, 1), "interfaceIndex");
    sub_1000525C8(v39, (uint64_t)v41, (uint64_t)v25);

    a1[46] = (uint64_t)v25;
    id v31 = objc_msgSend(objc_getProperty(a1, v42, 384, 1), "interfaceIndex");
    goto LABEL_30;
  }

void sub_1000852BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 == (*(_BYTE *)(v3 + 352) & 1)) {
      return;
    }
    *(_BYTE *)(v3 + 352) = v4;
  }

  else if (!*(_BYTE *)(a1 + 40))
  {
    return;
  }

  uint64_t v5 = ne_log_obj(a1, a2);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = "not";
    if (v7 && (*(_BYTE *)(v7 + 352) & 1) != 0) {
      id v8 = "";
    }
    int v11 = 138412546;
    uint64_t v12 = v7;
    __int16 v13 = 2080;
    id v14 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%@ fallback is %s active", (uint8_t *)&v11, 0x16u);
  }

  BOOL v10 = *(_BYTE **)(a1 + 32);
  if (v10)
  {
    if ((v10[352] & 1) != 0) {
      sub_1000853E4(v10, v9);
    }
  }

void sub_1000853E4(id self, const char *a2)
{
  if (self && (*((_BYTE *)self + 352) & 1) != 0)
  {
    id v5 = objc_msgSend(objc_getProperty(self, a2, 360, 1), "objectAtIndexedSubscript:", 0);
    uint64_t v6 = objc_claimAutoreleasedReturnValue(v5);
    id v36 = (id)v6;
    if (v6 && *(_DWORD *)(v6 + 8) == 2)
    {
      char v8 = 0;
    }

    else
    {
      id v2 = objc_getProperty(self, v7, 360LL, 1);
      id v9 = (_DWORD *)objc_claimAutoreleasedReturnValue([v2 objectAtIndexedSubscript:0]);
      uint64_t v3 = v9;
      if (!v9 || v9[2] != 3)
      {

        return;
      }

      char v8 = 1;
    }

    id v10 = objc_msgSend(objc_getProperty(self, v7, 360, 1), "objectAtIndexedSubscript:", 1);
    uint64_t v11 = objc_claimAutoreleasedReturnValue(v10);
    __int16 v13 = (void *)v11;
    if (v11 && *(_DWORD *)(v11 + 8) == 1
      || (id v15 = objc_msgSend(objc_getProperty(self, v12, 360, 1), "objectAtIndexedSubscript:", 1),
          (id v16 = (_DWORD *)objc_claimAutoreleasedReturnValue(v15)) == 0LL))
    {

      if ((v8 & 1) != 0)
      {
      }

LABEL_18:
      id v18 = objc_msgSend(objc_getProperty(self, v14, 360, 1), "objectAtIndexedSubscript:", 1);
      id Property = (id)objc_claimAutoreleasedReturnValue(v18);
      id v21 = Property;
      if (Property) {
        id Property = objc_getProperty(Property, v20, 24LL, 1);
      }
      id v22 = Property;

      if (sub_100077340(self))
      {
        id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 matchedRule]);
        if ([v23 action] == (id)2)
        {
          unsigned __int8 v24 = sub_100077340(self);

          if ((v24 & 1) != 0)
          {
LABEL_34:

            return;
          }
        }

        else
        {
          id v25 = (void *)objc_claimAutoreleasedReturnValue([v22 matchedRule]);
          if ([v25 action] == (id)4)
          {
            unsigned __int8 v26 = sub_100077340(self);

            if ((v26 & 1) != 0) {
              goto LABEL_34;
            }
          }

          else
          {
          }
        }
      }

      else if ((sub_100077340(self) & 1) != 0)
      {
        goto LABEL_34;
      }

      xpc_object_t v27 = xpc_dictionary_create(0LL, 0LL, 0LL);
      pid_t v28 = getpid();
      xpc_dictionary_set_int64(v27, "SessionPID", v28);
      id v30 = objc_msgSend(objc_getProperty(self, v29, 360, 1), "objectAtIndexedSubscript:", 1);
      id v31 = (id)objc_claimAutoreleasedReturnValue(v30);
      id v33 = v31;
      if (v31) {
        id v31 = objc_getProperty(v31, v32, 24LL, 1);
      }
      id v34 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v31 queue]);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100085704;
      block[3] = &unk_1000BEBE0;
      void block[4] = self;
      id v38 = v27;
      id v35 = v27;
      dispatch_async(v34, block);

      goto LABEL_34;
    }

    int v17 = v16[2];

    if ((v8 & 1) != 0)
    {
    }

    if (!v17) {
      goto LABEL_18;
    }
  }

void sub_100085704(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  id v4 = (id)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:1]);
  id v6 = v4;
  if (v4) {
    id v4 = objc_getProperty(v4, v5, 24LL, 1);
  }
  [v4 startWithCommand:*(void *)(a1 + 40) isOnDemand:0];
}

void sub_100085770(void *a1)
{
  if (a1)
  {
    id v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1 queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000857E0;
    block[3] = &unk_1000BEC08;
    void block[4] = a1;
    dispatch_async(v2, block);
  }

void sub_1000857E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1)
  {
    id v2 = 0LL;
LABEL_6:
    id v4 = (id)objc_claimAutoreleasedReturnValue([v2 server]);
    sub_100051C0C(v4, v3);

    return;
  }

  --*(_DWORD *)(v1 + 356);
  id v2 = *(_DWORD **)(a1 + 32);
  if (!v2 || !v2[89]) {
    goto LABEL_6;
  }
}

void sub_10008584C(uint64_t a1, const char *a2)
{
  id v4 = *(id *)(a1 + 32);
  id Property = *(id *)(a1 + 40);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  id v5 = (void *)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:0]);
  uint64_t v7 = v5;
  if (v5) {
    id v8 = objc_getProperty(v5, v6, 24LL, 1);
  }
  else {
    id v8 = 0LL;
  }

  if (v4 == v8) {
    __assert_rtn( "-[NESMIKEv2VPNFallbackSession prepareNetwork:]_block_invoke",  "NESMIKEv2VPNFallbackSession.m",  581,  "0");
  }
  id v11 = *(id *)(a1 + 32);
  id v10 = *(id *)(a1 + 40);
  if (v10) {
    id v10 = objc_getProperty(v10, v9, 360LL, 1);
  }
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v10 objectAtIndexedSubscript:1]);
  id v14 = v12;
  if (v12) {
    id v15 = objc_getProperty(v12, v13, 24LL, 1);
  }
  else {
    id v15 = 0LL;
  }

  if (v11 == v15)
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) server]);
    if (v16) {
      uint64_t v17 = v16[7];
    }
    else {
      uint64_t v17 = 0LL;
    }

    id v19 = *(id *)(a1 + 40);
    if (v19) {
      id v19 = objc_getProperty(v19, v18, 384LL, 1);
    }
    id v21 = (void *)objc_claimAutoreleasedReturnValue([v19 interfaceName]);
    id v22 = *(id *)(a1 + 40);
    if (v22) {
      id v22 = objc_getProperty(v22, v20, 360LL, 1);
    }
    id v23 = (id)objc_claimAutoreleasedReturnValue([v22 objectAtIndexedSubscript:1]);
    id v25 = v23;
    if (v23) {
      id v23 = objc_getProperty(v23, v24, 24LL, 1);
    }
    unsigned __int8 v26 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v23 queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100085A2C;
    block[3] = &unk_1000BE8D8;
    void block[4] = *(void *)(a1 + 40);
    id v29 = v21;
    uint64_t v30 = v17;
    id v27 = v21;
    dispatch_async(v26, block);
  }

void sub_100085A2C(void *a1, const char *a2)
{
  id v5 = a1 + 4;
  id Property = (id)a1[4];
  uint64_t v4 = v5[1];
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  id v6 = (id)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:1]);
  id v8 = v6;
  if (v6) {
    id v6 = objc_getProperty(v6, v7, 24LL, 1);
  }
  [v6 setInterfaceName:v4];

  uint64_t v10 = a1[6];
  if ((v10 | 2) != 3 || !a1[5])
  {
    id v15 = (id)a1[4];
    if (v15) {
      id v15 = objc_getProperty(v15, v9, 360LL, 1);
    }
    id v12 = (id)objc_claimAutoreleasedReturnValue([v15 objectAtIndexedSubscript:1]);
    id v27 = v12;
    if (v12) {
      id v12 = objc_getProperty(v12, v16, 24LL, 1);
    }
    uint64_t v14 = 0LL;
    goto LABEL_19;
  }

  if (v10 == 3)
  {
    id v17 = (id)a1[4];
    if (v17) {
      id v17 = objc_getProperty(v17, v9, 360LL, 1);
    }
    id v18 = (id)objc_claimAutoreleasedReturnValue([v17 objectAtIndexedSubscript:1]);
    id v27 = v18;
    if (v18) {
      id v18 = objc_getProperty(v18, v19, 24LL, 1);
    }
    id v21 = (void *)objc_claimAutoreleasedReturnValue([v18 server]);
    id v22 = (id)a1[4];
    if (v22) {
      id v22 = objc_getProperty(v22, v20, 360LL, 1);
    }
    id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 objectAtIndexedSubscript:1]);
    id v25 = v23;
    if (v23) {
      id v26 = objc_getProperty(v23, v24, 24LL, 1);
    }
    else {
      id v26 = 0LL;
    }
    [v21 satisfyCellularPathForSession:v26];

    goto LABEL_20;
  }

  if (v10 == 1)
  {
    id v11 = (id)a1[4];
    if (v11) {
      id v11 = objc_getProperty(v11, v9, 360LL, 1);
    }
    id v12 = (id)objc_claimAutoreleasedReturnValue([v11 objectAtIndexedSubscript:1]);
    id v27 = v12;
    if (v12) {
      id v12 = objc_getProperty(v12, v13, 24LL, 1);
    }
    uint64_t v14 = a1[5];
LABEL_19:
    [v12 handleNetworkPrepareResult:v14];
LABEL_20:
  }

id sub_100085BF0(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:0]);
  id v6 = v4;
  if (v4) {
    id v7 = objc_getProperty(v4, v5, 24LL, 1);
  }
  else {
    id v7 = 0LL;
  }
  id v8 = *(id *)(a1 + 40);

  int v10 = *(_DWORD *)(a1 + 48);
  id v11 = *(id *)(a1 + 32);
  if (v7 == v8)
  {
    if (v11) {
      id v11 = objc_getProperty(v11, v9, 360LL, 1);
    }
    uint64_t v12 = 0LL;
  }

  else
  {
    if (v11) {
      id v11 = objc_getProperty(v11, v9, 360LL, 1);
    }
    uint64_t v12 = 1LL;
  }

  __int16 v13 = (_DWORD *)objc_claimAutoreleasedReturnValue([v11 objectAtIndexedSubscript:v12]);
  if (v13) {
    v13[2] = v10;
  }

  uint64_t v16 = ne_log_obj(v14, v15);
  id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    id v18 = *(void **)(a1 + 32);
    id v20 = *(id *)(a1 + 40);
    if (v18)
    {
      id v21 = objc_msgSend(objc_getProperty(v18, v19, 360, 1), "objectAtIndexedSubscript:", 0);
      id v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      unsigned __int8 v24 = v22;
      if (v22) {
        id v25 = objc_getProperty(v22, v23, 24LL, 1);
      }
      else {
        id v25 = 0LL;
      }

      if (v25 == v20)
      {
        id v32 = @"Primary Tunnel";
      }

      else
      {
        id v27 = objc_msgSend(objc_getProperty(v18, v26, 360, 1), "objectAtIndexedSubscript:", 1);
        pid_t v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
        uint64_t v30 = v28;
        if (v28) {
          id v31 = objc_getProperty(v28, v29, 24LL, 1);
        }
        else {
          id v31 = 0LL;
        }

        if (v31 == v20) {
          id v32 = @"Fallback Tunnel";
        }
        else {
          id v32 = &stru_1000BF3D0;
        }
      }
    }

    else
    {
      id v32 = 0LL;
    }

    id v33 = v32;
    uint64_t v34 = ne_session_status_to_string(*(unsigned int *)(a1 + 48));
    int v37 = 138412802;
    id v38 = v18;
    __int16 v39 = 2112;
    SEL v40 = v33;
    __int16 v41 = 2080;
    uint64_t v42 = v34;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "%@[%@]: VPN Status to Parent: %s",  (uint8_t *)&v37,  0x20u);
  }

  unsigned int v35 = [*(id *)(a1 + 32) status];
  [*(id *)(a1 + 32) setStatus:*(unsigned int *)(a1 + 48)];
  id result = [*(id *)(a1 + 32) status];
  if ((_DWORD)result == v35) {
    return [*(id *)(a1 + 32) notifyChangedExtendedStatus];
  }
  return result;
}

void sub_100085E74(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:0]);
  id v6 = v4;
  if (v4) {
    id v7 = objc_getProperty(v4, v5, 24LL, 1);
  }
  else {
    id v7 = 0LL;
  }
  id v8 = *(id *)(a1 + 40);

  if (v7 == v8) {
    sub_1000853E4(*(id *)(a1 + 32), v9);
  }
}

void sub_100085F04(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:0]);
  id v6 = v4;
  if (v4) {
    id v7 = objc_getProperty(v4, v5, 24LL, 1);
  }
  else {
    id v7 = 0LL;
  }
  id v8 = *(id *)(a1 + 40);

  id v10 = *(id *)(a1 + 32);
  if (v7 == v8)
  {
    if (v10) {
      id v10 = objc_getProperty(v10, v9, 360LL, 1);
    }
    uint64_t v11 = 1LL;
  }

  else
  {
    if (v10) {
      id v10 = objc_getProperty(v10, v9, 360LL, 1);
    }
    uint64_t v11 = 0LL;
  }

  uint64_t v12 = (_DWORD *)objc_claimAutoreleasedReturnValue([v10 objectAtIndexedSubscript:v11]);
  if (!v12 || (unsigned int v13 = v12[2], v12, v13 <= 5) && ((1 << v13) & 0x23) != 0) {
    [*(id *)(a1 + 32) setLastStopReason:*(unsigned int *)(a1 + 48)];
  }
}

void sub_100086008(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:0]);
  id v6 = v4;
  if (v4) {
    id v7 = objc_getProperty(v4, v5, 24LL, 1);
  }
  else {
    id v7 = 0LL;
  }
  id v8 = *(id *)(a1 + 40);

  id v10 = *(id *)(a1 + 32);
  if (v7 == v8)
  {
    if (v10) {
      id v10 = objc_getProperty(v10, v9, 360LL, 1);
    }
    uint64_t v11 = 1LL;
  }

  else
  {
    if (v10) {
      id v10 = objc_getProperty(v10, v9, 360LL, 1);
    }
    uint64_t v11 = 0LL;
  }

  uint64_t v12 = (_DWORD *)objc_claimAutoreleasedReturnValue([v10 objectAtIndexedSubscript:v11]);
  if (!v12 || (unsigned int v13 = v12[2], v12, v13 <= 5) && ((1 << v13) & 0x23) != 0) {
    [*(id *)(a1 + 32) setLastDisconnectError:*(void *)(a1 + 48)];
  }
}

void sub_10008610C(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NEIKEv2FallbackConfigurationOperation);
  uint64_t v4 = v2;
  if (v2)
  {
    v2->_requestState = 3LL;
    v2->_exclusive = *(_BYTE *)(a1 + 48);
  }

  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 360LL, 1);
  }
  id v6 = (void *)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:0]);
  id v8 = v6;
  if (v6) {
    id v9 = objc_getProperty(v6, v7, 24LL, 1);
  }
  else {
    id v9 = 0LL;
  }
  id v10 = *(id *)(a1 + 40);

  id v12 = *(id *)(a1 + 32);
  if (v9 == v10)
  {
    if (v12) {
      id v12 = objc_getProperty(v12, v11, 360LL, 1);
    }
    uint64_t v13 = 0LL;
  }

  else
  {
    if (v12) {
      id v12 = objc_getProperty(v12, v11, 360LL, 1);
    }
    uint64_t v13 = 1LL;
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v12 objectAtIndexedSubscript:v13]);
  if (v4) {
    objc_setProperty_atomic(v4, v14, v15, 24LL);
  }

  id v17 = *(id *)(a1 + 32);
  if (v17) {
    id v17 = objc_getProperty(v17, v16, 408LL, 1);
  }
  [v17 addObject:v4];
  id v19 = *(id *)(a1 + 32);
  if (v19) {
    id v19 = objc_getProperty(v19, v18, 408LL, 1);
  }
  id v20 = [v19 count];
  if (v20 == (id)1)
  {
    sub_100083188(*(void **)(a1 + 32), v21);
  }

  else
  {
    uint64_t v22 = ne_log_obj(v20, v21);
    id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      id v25 = *(id *)(a1 + 32);
      if (v25) {
        id v25 = objc_getProperty(v25, v24, 408LL, 1);
      }
      int v26 = 134217984;
      id v27 = [v25 count];
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "queuing request to install, operations count - %lu",  (uint8_t *)&v26,  0xCu);
    }
  }
}

void sub_1000862F4(uint64_t a1, char a2)
{
  uint64_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000863C0;
  block[3] = &unk_1000BE978;
  char v10 = a2;
  id v5 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v7 = v5;
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  dispatch_async(v4, block);
}

id sub_1000863B4(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleStartMessage:*(void *)(a1 + 40)];
}

void sub_1000863C0(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v3 = kdebug_trace(726990904LL, 0LL, 0LL, 0LL, 0LL);
    uint64_t v5 = ne_log_obj(v3, v4);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v22 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%@: Successfully registered", buf, 0xCu);
    }

    id v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) queue]);
    uint64_t v15 = _NSConcreteStackBlock;
    uint64_t v16 = 3221225472LL;
    id v17 = sub_100086588;
    id v18 = &unk_1000BEBE0;
    id v19 = *(id *)(a1 + 48);
    id v20 = *(id *)(a1 + 56);
    dispatch_async(v8, &v15);
  }

  else
  {
    uint64_t v9 = ne_log_obj(a1, a2);
    char v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v22 = v11;
      __int16 v23 = 2112;
      uint64_t v24 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%@: Rejected start command from %@",  buf,  0x16u);
    }

    sub_1000922C8(*(void **)(a1 + 40), v13);
    [*(id *)(a1 + 32) removeAllClients];
  }

  uint64_t v14 = (dispatch_object_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "messageQueue", v15, v16, v17, v18));
  dispatch_resume(v14);
}

id sub_100086588(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleStartMessage:*(void *)(a1 + 40)];
}

void sub_100086594(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NEIKEv2FallbackConfigurationOperation);
  uint64_t v4 = v2;
  if (v2) {
    v2->_requestState = 2LL;
  }
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 360LL, 1);
  }
  id v6 = (void *)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:0]);
  id v8 = v6;
  if (v6) {
    id v9 = objc_getProperty(v6, v7, 24LL, 1);
  }
  else {
    id v9 = 0LL;
  }
  id v10 = *(id *)(a1 + 40);

  id v12 = *(id *)(a1 + 32);
  if (v9 == v10)
  {
    if (v12) {
      id v12 = objc_getProperty(v12, v11, 360LL, 1);
    }
    uint64_t v13 = 0LL;
  }

  else
  {
    if (v12) {
      id v12 = objc_getProperty(v12, v11, 360LL, 1);
    }
    uint64_t v13 = 1LL;
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v12 objectAtIndexedSubscript:v13]);
  if (v4) {
    objc_setProperty_atomic(v4, v14, v15, 24LL);
  }

  id v17 = *(id *)(a1 + 32);
  if (v17) {
    id v17 = objc_getProperty(v17, v16, 408LL, 1);
  }
  [v17 addObject:v4];
  id v19 = *(id *)(a1 + 32);
  if (v19) {
    id v19 = objc_getProperty(v19, v18, 408LL, 1);
  }
  id v20 = [v19 count];
  if (v20 == (id)1)
  {
    sub_100083678(*(void **)(a1 + 32), v21);
  }

  else
  {
    uint64_t v22 = ne_log_obj(v20, v21);
    __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      id v25 = *(id *)(a1 + 32);
      if (v25) {
        id v25 = objc_getProperty(v25, v24, 408LL, 1);
      }
      int v26 = 134217984;
      id v27 = [v25 count];
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_INFO,  "queuing request to uninstall, operations count - %lu",  (uint8_t *)&v26,  0xCu);
    }
  }
}

void sub_100086774(uint64_t a1)
{
  newuint64_t Value = -[NWInterface initWithInterfaceName:]( objc_alloc(&OBJC_CLASS___NWInterface),  "initWithInterfaceName:",  *(void *)(a1 + 32));
  id Property = *(id *)(a1 + 40);
  if (Property) {
    id Property = objc_getProperty(Property, v2, 360LL, 1);
  }
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:0]);
  id v6 = v4;
  if (v4) {
    id v7 = objc_getProperty(v4, v5, 24LL, 1);
  }
  else {
    id v7 = 0LL;
  }
  id v8 = *(id *)(a1 + 48);

  id v10 = *(id *)(a1 + 40);
  if (v7 == v8)
  {
    if (v10) {
      id v10 = objc_getProperty(v10, v9, 360LL, 1);
    }
    uint64_t v11 = 0LL;
  }

  else
  {
    if (v10) {
      id v10 = objc_getProperty(v10, v9, 360LL, 1);
    }
    uint64_t v11 = 1LL;
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 objectAtIndexedSubscript:v11]);
  uint64_t v14 = v12;
  if (v12) {
    objc_setProperty_atomic(v12, v13, newValue, 40LL);
  }

  sub_100084EF4(*(uint64_t **)(a1 + 40), v15);
}

void sub_100086878(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = v3;
  if (a1)
  {
    if (v3)
    {
      id v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1 queue]);
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472LL;
      v9[2] = sub_1000869A4;
      v9[3] = &unk_1000BEBE0;
      v9[4] = a1;
      id v10 = v5;
      dispatch_async(v6, v9);
    }

    else
    {
      uint64_t v7 = ne_log_obj(0LL, v4);
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)__int128 buf = 136315138;
        id v12 = "-[NESMIKEv2VPNFallbackSession handleClearConfigurationResult:]";
        _os_log_fault_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "%s called with null session", buf, 0xCu);
      }
    }
  }
}

void sub_1000869A4(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 360LL, 1);
  }
  id v4 = (id)objc_claimAutoreleasedReturnValue([Property objectAtIndexedSubscript:0]);
  id v6 = v4;
  if (v4) {
    id v4 = objc_getProperty(v4, v5, 24LL, 1);
  }
  id v7 = v4;
  id v9 = v7;
  if (v7 == *(id *)(a1 + 40))
  {
    id v19 = *(id *)(a1 + 32);
    if (v19) {
      id v19 = objc_getProperty(v19, v8, 360LL, 1);
    }
    id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 objectAtIndexedSubscript:0]);
    uint64_t v22 = v20;
    if (v20) {
      id v23 = objc_getProperty(v20, v21, 40LL, 1);
    }
    else {
      id v23 = 0LL;
    }

    if (v23)
    {
      id v17 = *(id *)(a1 + 32);
      if (v17) {
        id v17 = objc_getProperty(v17, v10, 360LL, 1);
      }
      uint64_t v18 = 0LL;
      goto LABEL_22;
    }
  }

  else
  {
  }

  id v11 = *(id *)(a1 + 32);
  if (v11) {
    id v11 = objc_getProperty(v11, v10, 360LL, 1);
  }
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectAtIndexedSubscript:1]);
  uint64_t v14 = v12;
  if (!v12) {
    goto LABEL_24;
  }
  id v15 = objc_getProperty(v12, v13, 40LL, 1);

  if (v15)
  {
    id v17 = *(id *)(a1 + 32);
    if (v17) {
      id v17 = objc_getProperty(v17, v16, 360LL, 1);
    }
    uint64_t v18 = 1LL;
LABEL_22:
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v17 objectAtIndexedSubscript:v18]);
    uint64_t v14 = v24;
    if (v24) {
      objc_setProperty_atomic(v24, v25, 0LL, 40LL);
    }
LABEL_24:
  }

  sub_100084EF4(*(uint64_t **)(a1 + 32), (uint64_t)v16);
}

void sub_100086B60(time_t *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = ne_log_obj(a1, a2);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      time_t v5 = a1[5];
      if (v5 == -1) {
        time_t v5 = 0LL;
      }
      int v18 = 134217984;
      time_t v19 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Ready to sleep, sleepDate %lld",  (uint8_t *)&v18,  0xCu);
    }

    if (objc_getProperty(a1, v6, 56LL, 1))
    {
      id Property = (dispatch_source_s *)objc_getProperty(a1, v7, 56LL, 1);
      dispatch_source_cancel(Property);
      objc_setProperty_atomic(a1, v9, 0LL, 56LL);
    }

    if (objc_getProperty(a1, v7, 32LL, 1))
    {
      if (a1[5] == -1)
      {
        time_t v11 = time(a1 + 5);
        uint64_t v13 = ne_log_obj(v11, v12);
        uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          time_t v15 = a1[5];
          int v18 = 134217984;
          time_t v19 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "Enter sleep state after full wake, %ld",  (uint8_t *)&v18,  0xCu);
        }
      }

      uint64_t v16 = (void (**)(void))objc_getProperty(a1, v10, 32LL, 1);
      v16[2]();
      objc_setProperty_atomic_copy(a1, v17, 0LL, 32LL);
    }
  }

void sub_100086CF8(void *a1, uint64_t a2, int a3, void *a4)
{
  SEL v6 = a1;
  id v8 = v6;
  if (a3 > -536870145)
  {
    if (a3 == -536870144)
    {
      sub_100086EF4((uint64_t)v6, 2LL);
    }

    else if (a3 == -536870112 && v6)
    {
      objc_setProperty_atomic_copy(v6, v7, 0LL, 32LL);
    }
  }

  else if (a3 == -536870288)
  {
    if (v6) {
      id WeakRetained = objc_loadWeakRetained(v6 + 3);
    }
    else {
      id WeakRetained = 0LL;
    }
    unsigned int v11 = [WeakRetained canSleep];

    if (v11)
    {
      if (v8) {
        io_connect_t v12 = *((_DWORD *)v8 + 2);
      }
      else {
        io_connect_t v12 = 0;
      }
      IOAllowPowerChange(v12, (intptr_t)a4);
    }

    else
    {
      if (v8) {
        io_connect_t v13 = *((_DWORD *)v8 + 2);
      }
      else {
        io_connect_t v13 = 0;
      }
      IOCancelPowerChange(v13, (intptr_t)a4);
    }
  }

  else if (a3 == -536870272)
  {
    objc_initWeak(&location, v6);
    newValue[0] = _NSConcreteStackBlock;
    newValue[1] = 3221225472LL;
    newValue[2] = sub_100086EB0;
    newValue[3] = &unk_1000BE9E8;
    objc_copyWeak(v15, &location);
    v15[1] = a4;
    if (v8) {
      objc_setProperty_atomic_copy(v8, v9, newValue, 32LL);
    }
    sub_100086EF4((uint64_t)v8, 1LL);
    objc_destroyWeak(v15);
    objc_destroyWeak(&location);
  }
}

void sub_100086E90(_Unwind_Exception *a1)
{
}

void sub_100086EB0(uint64_t a1)
{
  id WeakRetained = (io_connect_t *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v3 = WeakRetained;
    IOAllowPowerChange(WeakRetained[2], *(void *)(a1 + 40));
    id WeakRetained = v3;
  }
}

void sub_100086EF4(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 24));
    id v7 = WeakRetained;
    if (v4 != a2)
    {
      uint64_t v8 = ne_log_obj(WeakRetained, v6);
      SEL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__int128 buf = 67109376;
        LODWORD(v24[0]) = v4;
        WORD2(v24[0]) = 1024;
        *(_DWORD *)((char *)v24 + 6) = a2;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Setting power state from %d to %d", buf, 0xEu);
      }

      *(void *)(a1 + 16) = a2;
      if (a2 == 1)
      {
        if ([v7 handleSleep])
        {
          if (!objc_getProperty((id)a1, v10, 56LL, 1))
          {
            id Property = objc_getProperty((id)a1, v11, 48LL, 1);
            v22[0] = _NSConcreteStackBlock;
            v22[1] = 3221225472LL;
            v22[2] = sub_100087118;
            v22[3] = &unk_1000BEC08;
            void v22[4] = a1;
            uint64_t v13 = NECreateTimerSource(Property, 10LL, v22);
            uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
            objc_setProperty_atomic((id)a1, v15, v14, 56LL);
          }
        }

        else
        {
          sub_100086B60((time_t *)a1, (uint64_t)v10);
        }
      }

      else
      {
        if (*(void *)(a1 + 40) != -1LL)
        {
          time_t v16 = time(0LL);
          double v17 = difftime(v16, *(void *)(a1 + 40));
          uint64_t v20 = ne_log_obj(v18, v19);
          id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)__int128 buf = 134217984;
            *(double *)uint64_t v24 = v17;
            _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "System slept for %f seconds (including dark wake time during sleep)",  buf,  0xCu);
          }

          *(void *)(a1 + 40) = -1LL;
          [v7 handleSleepTime:v17];
        }

        if (v4 == 1) {
          [v7 handleWakeup];
        }
      }
    }
  }

void sub_100087118(uint64_t a1, uint64_t a2)
{
}

id *sub_10008742C(id *result, const char *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    if (objc_getProperty(result, a2, 16LL, 1))
    {
      objc_msgSend(objc_getProperty(v2, v3, 16, 1), "removeObserver:forKeyPath:", v2, @"status");
      objc_setProperty_atomic(v2, v4, 0LL, 16LL);
    }

    id Property = objc_getProperty(v2, v3, 32LL, 1);
    if (Property)
    {
      uint64_t v7 = ne_log_obj(Property, v6);
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)id v10 = 0;
        _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "End SSID monitor transaction", v10, 2u);
      }

      objc_setProperty_atomic(v2, v9, 0LL, 32LL);
    }

    return (id *)objc_storeWeak(v2 + 5, 0LL);
  }

  return result;
}

void sub_10008750C(void *a1, void *a2, int a3)
{
  id v6 = a2;
  if (!a1) {
    goto LABEL_24;
  }
  id Property = objc_getProperty(a1, v5, 408LL, 1);
  if (a3)
  {
    if (Property != v6
      && (objc_msgSend(objc_getProperty(a1, v8, 408, 1), "isEqualToString:", v6) & 1) == 0)
    {
      objc_setProperty_atomic(a1, v9, v6, 408LL);
      sub_1000877D4(a1, 1, 0);
    }

    goto LABEL_24;
  }

  id v10 = Property;
  if (v10 == v6)
  {

    goto LABEL_10;
  }

  io_connect_t v12 = v10;
  unsigned int v13 = objc_msgSend(objc_getProperty(a1, v11, 408, 1), "isEqualToString:", v6);

  if (v13)
  {
LABEL_10:
    objc_setProperty_atomic(a1, v14, 0LL, 408LL);
    sub_1000877D4(a1, 1, 0);
  }

  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  SEL v15 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
  time_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 pathController]);
  double v17 = (void *)objc_claimAutoreleasedReturnValue([v16 pathRules]);

  id v18 = [v17 countByEnumeratingWithState:&v29 objects:v33 count:16];
  if (!v18)
  {
LABEL_23:

    goto LABEL_24;
  }

  id v19 = v18;
  char v20 = 0;
  uint64_t v21 = *(void *)v30;
  do
  {
    for (id i = 0LL; i != v19; id i = (char *)i + 1)
    {
      if (*(void *)v30 != v21) {
        objc_enumerationMutation(v17);
      }
      id v23 = *(void **)(*((void *)&v29 + 1) + 8LL * (void)i);
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v23 temporaryAllowMulticastNetworkName]);
      unsigned int v25 = [v24 isEqualToString:v6];

      if (v25)
      {
        [v23 setTemporaryAllowMulticastNetworkName:0];
        char v20 = 1;
      }
    }

    id v19 = [v17 countByEnumeratingWithState:&v29 objects:v33 count:16];
  }

  while (v19);

  if ((v20 & 1) != 0)
  {
    double v17 = (void *)objc_claimAutoreleasedReturnValue( +[NEConfigurationManager sharedManagerForAllUsers]( &OBJC_CLASS___NEConfigurationManager,  "sharedManagerForAllUsers"));
    int v26 = (void *)objc_claimAutoreleasedReturnValue([a1 configuration]);
    id v27 = (void *)objc_claimAutoreleasedReturnValue([a1 queue]);
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472LL;
    v28[2] = sub_1000878CC;
    v28[3] = &unk_1000BEA88;
    v28[4] = a1;
    [v17 saveConfiguration:v26 withCompletionQueue:v27 handler:v28];

    goto LABEL_23;
  }

void sub_1000877D4(void *a1, char a2, char a3)
{
  if (a1)
  {
    v10[0] = 0LL;
    v10[1] = v10;
    v10[2] = 0x3032000000LL;
    v10[3] = sub_1000879DC;
    void v10[4] = sub_1000879EC;
    id v11 = (id)os_transaction_create("com.apple.nesessionmanager.pathController.updatePolicies");
    id v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1 queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000879F4;
    block[3] = &unk_1000BEAB0;
    char v8 = a3;
    char v9 = a2;
    void block[4] = a1;
    void block[5] = v10;
    dispatch_async(v6, block);

    _Block_object_dispose(v10, 8);
  }

void sub_1000878B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1000878CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = ne_log_obj(v3, v4);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v10 = 138412546;
      uint64_t v11 = v8;
      __int16 v12 = 2112;
      id v13 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "%@ failed to save configuration to clear temporary SSID rules: %@",  (uint8_t *)&v10,  0x16u);
    }
  }

  else if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    int v10 = 138412290;
    uint64_t v11 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "%@ saved configuration to clear temporary SSID rules",  (uint8_t *)&v10,  0xCu);
  }
}

uint64_t sub_1000879DC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000879EC(uint64_t a1)
{
}

void sub_1000879F4(uint64_t a1, const char *a2)
{
  uint64_t v2 = a1;
  if (*(_BYTE *)(a1 + 48)) {
    sub_100078DB4(*(void **)(a1 + 32));
  }
  if (*(_BYTE *)(v2 + 49))
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v2 + 32) configuration]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 pathController]);
    uint64_t v5 = v2;
    unsigned int v6 = [v4 isEnabled];

    if (v6)
    {
      v122[0] = 0LL;
      v122[1] = 0LL;
      uint64_t v104 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      id Property = *(id *)(v5 + 32);
      uint64_t v9 = &selRef_setName_;
      uint64_t v10 = v5;
      if (Property) {
        id Property = objc_getProperty(Property, v7, 368LL, 1);
      }
      uint64_t v100 = v5;
      if (([Property ignoreRouteRules] & 1) == 0)
      {
        __int128 v117 = 0u;
        __int128 v118 = 0u;
        __int128 v115 = 0u;
        __int128 v116 = 0u;
        id v12 = *(id *)(v5 + 32);
        if (v12) {
          id v12 = objc_getProperty(v12, v11, 368LL, 1);
        }
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 pathRules]);
        id v14 = [v13 countByEnumeratingWithState:&v115 objects:v121 count:16];
        if (v14)
        {
          id v15 = v14;
          uint64_t v16 = *(void *)v116;
          while (2)
          {
            for (id i = 0LL; i != v15; id i = (char *)i + 1)
            {
              if (*(void *)v116 != v16) {
                objc_enumerationMutation(v13);
              }
              id v18 = *(void **)(*((void *)&v115 + 1) + 8LL * (void)i);
              id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 matchSigningIdentifier]);
              unsigned int v20 = [v19 isEqualToString:@"PathRuleDefaultIdentifier"];

              if (v20)
              {
                id v102 = v18;
                goto LABEL_21;
              }
            }

            id v15 = [v13 countByEnumeratingWithState:&v115 objects:v121 count:16];
            if (v15) {
              continue;
            }
            break;
          }

          id v102 = 0LL;
LABEL_21:
          uint64_t v10 = v100;
          uint64_t v9 = &selRef_setName_;
        }

        else
        {
          id v102 = 0LL;
        }

        __int128 v113 = 0u;
        __int128 v114 = 0u;
        __int128 v111 = 0u;
        __int128 v112 = 0u;
        id v23 = *(id *)(v10 + 32);
        if (v23) {
          id v23 = objc_getProperty(v23, v22, *((int *)v9 + 702), 1);
        }
        id obj = (id)objc_claimAutoreleasedReturnValue([v23 pathRules]);
        id v24 = [obj countByEnumeratingWithState:&v111 objects:v120 count:16];
        if (v24)
        {
          id v25 = v24;
          uint64_t v26 = *(void *)v112;
          uint64_t v101 = *(void *)v112;
          do
          {
            id v27 = 0LL;
            do
            {
              if (*(void *)v112 != v26) {
                objc_enumerationMutation(obj);
              }
              pid_t v28 = *(void **)(*((void *)&v111 + 1) + 8LL * (void)v27);
              if (([v28 denyAll] & 1) == 0)
              {
                id v29 = v25;
                __int128 v30 = *(void **)(v10 + 32);
                id v31 = v28;
                id v32 = v102;
                if (v30)
                {
                  id v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
                  if ([v31 cellularBehavior])
                  {
                    if ([v31 cellularBehavior] == (id)1)
                    {
                      BOOL v35 = 0;
                    }

                    else
                    {
                      [v31 cellularBehavior];
                      BOOL v35 = 1;
                    }
                  }

                  else
                  {
                    BOOL v35 = objc_msgSend(objc_getProperty(v30, v34, 392, 1), "status") != (id)1;
                  }

                  if (![v31 wifiBehavior] || objc_msgSend(v31, "wifiBehavior") == (id)2)
                  {
                    BOOL v36 = 1;
                    if (v35) {
                      goto LABEL_40;
                    }
LABEL_44:
                    uint64_t v39 = 2LL;
LABEL_48:
                    int v37 = (void *)objc_claimAutoreleasedReturnValue( +[NEPolicyRouteRule routeRuleWithAction:forType:]( &OBJC_CLASS___NEPolicyRouteRule,  "routeRuleWithAction:forType:",  v39,  2LL));
                    [v33 addObject:v37];
LABEL_49:

                    goto LABEL_50;
                  }

                  BOOL v36 = [v31 wifiBehavior] != (id)1;
                  if (!v35) {
                    goto LABEL_44;
                  }
LABEL_40:
                  int v37 = (void *)objc_claimAutoreleasedReturnValue([v30 configuration]);
                  if ([v37 grade] != (id)2)
                  {

                    goto LABEL_47;
                  }

                  id v38 = (void *)objc_claimAutoreleasedReturnValue([v31 matchSigningIdentifier]);
                  if ([v38 isEqualToString:@"PathRuleDefaultIdentifier"])
                  {

                    goto LABEL_49;
                  }

                  id v99 = [v31 cellularBehavior];
                  id v40 = [v32 cellularBehavior];

                  BOOL v41 = v99 == v40;
                  uint64_t v10 = v100;
                  if (!v41)
                  {
LABEL_47:
                    uint64_t v39 = 1LL;
                    goto LABEL_48;
                  }

LABEL_85:
      uint64_t v70 = objc_claimAutoreleasedReturnValue([*(id *)(v100 + 32) policySession]);
      id v71 = *(id *)(v100 + 32);
      if (v71) {
        id v71 = objc_getProperty(v71, v69, 368LL, 1);
      }
      __int16 v73 = (void *)objc_claimAutoreleasedReturnValue([v71 pathRules]);
      id v74 = *(id *)(v100 + 32);
      if (v74) {
        id v74 = objc_getProperty(v74, v72, 496LL, 1);
      }
      id obja = (id)v70;
      id v76 = v74;
      id v77 = *(id *)(v100 + 32);
      if (v77)
      {
        id v77 = objc_getProperty(v77, v75, 408LL, 1);
        int v78 = *(_BYTE **)(v100 + 32);
      }

      else
      {
        int v78 = 0LL;
      }

      id v79 = v77;
      uint64_t v81 = sub_1000883C8(v78, v80);
      id v82 = (void *)objc_claimAutoreleasedReturnValue(v81);
      id v83 = sub_100088580(*(_BYTE **)(v100 + 32), 0LL);
      uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue(v83);
      char v86 = sub_100088778(*(void *)(v100 + 32), v85);
      int v87 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v100 + 32) networkAgent]);
      __int16 v88 = (void *)objc_claimAutoreleasedReturnValue([v87 agentUUID]);
      int v103 = NEGetConsoleUserUID();
      id v89 = v73;
      id v90 = v76;
      id v91 = v79;
      id v92 = v104;
      id v93 = v82;
      id v94 = v84;
      id v95 = v88;
      signed int v96 = obja;
      if (obja && isa_nsarray(v89) && isa_nsdictionary(v92) && *((_DWORD *)obja + 2) == 5)
      {
        *(void *)__int128 buf = _NSConcreteStackBlock;
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&uint8_t buf[16] = sub_10003EA74;
        unsigned int v124 = &unk_1000BDE10;
        id v125 = obja;
        id v126 = v89;
        id v127 = v92;
        int v133 = v103;
        id v128 = v90;
        id v129 = v95;
        id v130 = v91;
        id v131 = v93;
        BOOL v134 = (v86 & 0x10) != 0;
        id v132 = v94;
        signed int v96 = obja;
        sub_10002BFE8((uint64_t)&OBJC_CLASS___NESMPolicyMasterSession, buf);
      }

      uint64_t v2 = v100;
    }

    else
    {
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v5 + 32) policySession]);
      sub_10002BC80((uint64_t)v21);

      uint64_t v2 = v5;
    }
  }

  sub_100088808(*(void *)(v2 + 32), a2);
  uint64_t v97 = *(void *)(*(void *)(v2 + 40) + 8LL);
  uint64_t v98 = *(void **)(v97 + 40);
  *(void *)(v97 + 40) = 0LL;
}

_UNKNOWN **sub_1000883C8(_BYTE *a1, const char *a2)
{
  if (!a1) {
    goto LABEL_6;
  }
  id v3 = objc_msgSend(objc_getProperty(a1, a2, 392, 1), "status");
  if (!objc_getProperty(a1, v4, 432LL, 1)) {
    goto LABEL_6;
  }
  unsigned int v6 = 0LL;
  if ((a1[355] & 1) != 0 && v3 != (id)1)
  {
    if ((sub_100088778((uint64_t)a1, v5) & 2) == 0)
    {
LABEL_6:
      unsigned int v6 = 0LL;
      return v6;
    }

    if ((sub_100088778((uint64_t)a1, v7) & 8) != 0)
    {
      unsigned int v6 = &off_1000C1770;
    }

    else
    {
      id v10 = objc_getProperty(a1, v9, 472LL, 1);
      if ([v10 count])
      {
        id v11 = sub_100088580(a1, (const char *)1);
        id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        id v14 = +[NSMutableSet setWithArray:]( &OBJC_CLASS___NSMutableSet,  "setWithArray:",  objc_getProperty(a1, v13, 456LL, 1));
        id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
        if (v12)
        {
          id v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v12));
          [v15 minusSet:v19];
        }

        [v15 intersectSet:v10];
        unsigned int v6 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue([v15 allObjects]);
      }

      else
      {
        unsigned int v6 = 0LL;
      }
    }
  }

  return v6;
}

id sub_100088580(_BYTE *a1, const char *a2)
{
  if (!a1) {
    return 0LL;
  }
  char v2 = (char)a2;
  id v4 = objc_msgSend(objc_getProperty(a1, a2, 392, 1), "status");
  if ((v2 & 1) != 0)
  {
LABEL_3:
    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    id v7 = +[NEPathController copyAggregatePathRules](&OBJC_CLASS___NEPathController, "copyAggregatePathRules");
    id v8 = [v7 countByEnumeratingWithState:&v21 objects:v25 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v22;
      do
      {
        for (id i = 0LL; i != v9; id i = (char *)i + 1)
        {
          if (*(void *)v22 != v10) {
            objc_enumerationMutation(v7);
          }
          id v12 = *(void **)(*((void *)&v21 + 1) + 8LL * (void)i);
          if ((objc_msgSend(v12, "denyCellularFallback", (void)v21) & 1) != 0
            || [v12 cellularBehavior] == (id)1)
          {
            SEL v13 = (void *)objc_claimAutoreleasedReturnValue([v12 matchSigningIdentifier]);
            [v6 addObject:v13];
          }
        }

        id v9 = [v7 countByEnumeratingWithState:&v21 objects:v25 count:16];
      }

      while (v9);
    }

    if ([v6 count]) {
      id v14 = v6;
    }
    else {
      id v14 = 0LL;
    }

    return v14;
  }

  id v15 = v4;
  id v18 = objc_getProperty(a1, v17, 432LL, 1);
  if (!v18) {
    return 0LL;
  }
  char v19 = a1[355];

  id v14 = 0LL;
  if ((v19 & 1) != 0 && v15 != (id)1) {
    goto LABEL_3;
  }
  return v14;
}

uint64_t sub_100088778(uint64_t result, const char *a2)
{
  if (result)
  {
    char v2 = (void *)result;
    if (objc_msgSend(objc_getProperty((id)result, a2, 368, 1), "cellularFallbackFlags"))
    {
      return (uint64_t)objc_msgSend(objc_getProperty(v2, v3, 368, 1), "cellularFallbackFlags");
    }

    else
    {
      id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 configuration]);
      id v5 = [v4 grade];

      if (v5 == (id)2)
      {
        id result = ne_session_fallback_default();
        if ((result & 1) == 0) {
          return 6LL;
        }
      }

      else
      {
        return 0LL;
      }
    }
  }

  return result;
}

void sub_100088808(uint64_t a1, const char *a2)
{
  if (a1)
  {
    if (objc_msgSend(objc_getProperty((id)a1, a2, 480, 1), "count"))
    {
      id v4 = sub_1000883C8((_BYTE *)a1, v3);
      id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      if ([v5 count])
      {
        id v6 = v5;
        pid_t v28 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        __int128 v35 = 0u;
        __int128 v36 = 0u;
        __int128 v37 = 0u;
        __int128 v38 = 0u;
        id v7 = v6;
        id v8 = [v7 countByEnumeratingWithState:&v35 objects:v40 count:16];
        if (v8)
        {
          id v9 = v8;
          uint64_t v10 = 0LL;
          uint64_t v11 = *(void *)v36;
          do
          {
            for (id i = 0LL; i != v9; id i = (char *)i + 1)
            {
              SEL v13 = v10;
              if (*(void *)v36 != v11) {
                objc_enumerationMutation(v7);
              }
              uint64_t v10 = (void *)NEHelperCacheCopyAppUUIDMapping( [*(id *)(*((void *)&v35 + 1) + 8 * (void)i) UTF8String], 0);

              if (v10 && xpc_get_type(v10) == (xpc_type_t)&_xpc_type_array)
              {
                applier[0] = _NSConcreteStackBlock;
                applier[1] = 3221225472LL;
                applier[2] = sub_100088E14;
                applier[3] = &unk_1000BEA60;
                uint64_t v34 = v28;
                xpc_array_apply(v10, applier);
              }
            }

            id v9 = [v7 countByEnumeratingWithState:&v35 objects:v40 count:16];
          }

          while (v9);
        }

        __int128 v29 = 0u;
        __int128 v30 = 0u;
        __int128 v31 = 0u;
        __int128 v32 = 0u;
        id v15 = objc_getProperty((id)a1, v14, 480LL, 1);
        id v16 = [v15 countByEnumeratingWithState:&v29 objects:v39 count:16];
        if (v16)
        {
          id v18 = v16;
          uint64_t v19 = *(void *)v30;
LABEL_17:
          uint64_t v20 = 0LL;
          while (1)
          {
            if (*(void *)v30 != v19) {
              objc_enumerationMutation(v15);
            }
            id v21 = objc_msgSend( objc_getProperty((id)a1, v17, 480, 1),  "objectForKeyedSubscript:",  *(void *)(*((void *)&v29 + 1) + 8 * v20));
            __int128 v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
            unsigned __int8 v23 = -[NSMutableArray containsObject:](v28, "containsObject:", v22);

            if ((v23 & 1) != 0) {
              break;
            }
            if (v18 == (id)++v20)
            {
              id v18 = [v15 countByEnumeratingWithState:&v29 objects:v39 count:16];
              if (v18) {
                goto LABEL_17;
              }
              goto LABEL_23;
            }
          }

          if ((*(_BYTE *)(a1 + 357) & 1) != 0) {
            return;
          }
          char v24 = 1;
          int64_t v25 = 500000000LL;
LABEL_29:
          *(_BYTE *)(a1 + 357) = v24;
          if (*(_DWORD *)(a1 + 360) == -1)
          {
            sub_100088B8C(a1);
          }

          else
          {
            uint64_t v26 = (dispatch_source_s *)objc_getProperty((id)a1, v3, 488LL, 1);
            dispatch_time_t v27 = dispatch_time(0LL, v25);
            dispatch_source_set_timer(v26, v27, 0xFFFFFFFFFFFFFFFFLL, 0x5F5E100uLL);
          }

          return;
        }

void sub_100088B8C(uint64_t a1)
{
  if (a1)
  {
    char v2 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 server]);
    id v4 = v2;
    if (v2)
    {
      char v5 = *(_BYTE *)(a1 + 357) & 1;
      id Property = (dispatch_queue_s *)objc_getProperty(v2, v3, 88LL, 1);
      *(void *)block = _NSConcreteStackBlock;
      *(void *)&block[8] = 3221225472LL;
      *(void *)&block[16] = sub_1000534B0;
      unsigned __int8 v23 = &unk_1000BECE0;
      char v24 = v4;
      char v25 = v5;
      dispatch_async(Property, block);
    }

    if (*(_DWORD *)(a1 + 360) == -1)
    {
      uint64_t v7 = notify_register_check("com.apple.networkextension.fallback_in_use", (int *)(a1 + 360));
      if ((_DWORD)v7)
      {
        uint64_t v9 = ne_log_obj(v7, v8);
        uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)block = 136315138;
          *(void *)&void block[4] = "com.apple.networkextension.fallback_in_use";
          _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "notify_register_check for %s failed",  block,  0xCu);
        }

        *(_DWORD *)(a1 + 360) = -1;
      }
    }

    int v11 = *(_DWORD *)(a1 + 360);
    if (v11 != -1)
    {
      uint64_t state64 = 0LL;
      char v12 = *(_BYTE *)(a1 + 357);
      uint64_t state = notify_get_state(v11, &state64);
      if (!(_DWORD)state)
      {
        uint64_t v15 = v12 & 1;
        if (state64 == v15 || (uint64_t state = notify_set_state(*(_DWORD *)(a1 + 360), v15), (_DWORD)state))
        {
          uint64_t v16 = ne_log_obj(state, v14);
          double v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)block = 134218240;
            *(void *)&void block[4] = state64;
            *(_WORD *)&block[12] = 2048;
            *(void *)&block[14] = v15;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "Won't post notification (old uint64_t state = %llu, new uint64_t state = %llu)",  block,  0x16u);
          }
        }

        else
        {
          uint64_t v18 = ne_log_obj(state, v14);
          uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
          {
            uint64_t v20 = "";
            if (!(_DWORD)v15) {
              uint64_t v20 = " not";
            }
            *(_DWORD *)block = 136315138;
            *(void *)&void block[4] = v20;
            _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "Posting notification that fallback is%s in use",  block,  0xCu);
          }

          notify_post("com.apple.networkextension.fallback_in_use");
        }
      }
    }
  }

uint64_t sub_100088E14(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  char v5 = v4;
  if (v4 && xpc_get_type(v4) == (xpc_type_t)&_xpc_type_uuid)
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", xpc_uuid_get_bytes(v5));
    [v6 addObject:v7];
  }

  return 1LL;
}

LABEL_61:
            if (!v199)
            {
LABEL_56:
              if ((v204 & 1) != 0) {

              }
              if ((v67 & 1) != 0) {
                goto LABEL_59;
              }
              goto LABEL_90;
            }

LABEL_62:
            if ((v204 & 1) != 0) {
            if ((v67 & 1) != 0)
            }
              goto LABEL_65;
LABEL_90:
            char v24 = 0;
LABEL_70:

            goto LABEL_71;
          }

          id v21 = 1;
        }

        else
        {
          unsigned __int8 v23 = 0LL;
          if (v45)
          {
            char v24 = 0;
            id v21 = v208;
            uint64_t v53 = &selRef_setName_;
            goto LABEL_26;
          }

          if (!v51)
          {
            char v24 = 0;
            id v51 = 0LL;
            uint64_t v10 = v198;
            uint64_t v9 = v201;
            self = 0LL;
            char v12 = v206;
            id v21 = v208;
            goto LABEL_70;
          }

          id v21 = 1;
          uint64_t v10 = v198;
          uint64_t v9 = v201;
          self = 0LL;
          char v12 = v206;
        }

        uint64_t v53 = &selRef_setName_;
        goto LABEL_68;
      }
    }

    else
    {
    }

    id v51 = 0LL;
    char v24 = 0;
    unsigned __int8 v23 = 0LL;
    id v21 = v208;
    uint64_t v53 = &selRef_setName_;
    if (!self)
    {
      unsigned __int8 v23 = 0LL;
      goto LABEL_70;
    }

    goto LABEL_26;
  }

  unsigned __int8 v23 = (id)v22;
  char v24 = 0;
LABEL_71:

LABEL_72:
  if (self) {
    int v78 = objc_getProperty(self, v26, 512LL, 1);
  }
  else {
    int v78 = 0LL;
  }
  id v79 = v78;
  uint32_t v80 = &selRef_setName_;
  if (v79 == v10)
  {
    id v82 = [v9 isEqualToString:@"considerAlternateUpdate"];

    if (!v82) {
      goto LABEL_165;
    }
    if (self) {
      uint64_t v85 = objc_getProperty(self, v84, 512LL, 1);
    }
    else {
      uint64_t v85 = 0LL;
    }
    uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue([v85 considerAlternateUpdate]);
    int v87 = ne_log_obj(v81, v86);
    __int16 v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(v87);
    if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)uint64_t v219 = v81;
      _os_log_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_DEFAULT,  "Consider alternate update, new advice: %@",  buf,  0xCu);
    }

    __int128 v205 = (void *)objc_claimAutoreleasedReturnValue([v81 applications]);
    id v89 = [v81 level];
    uint64_t v197 = v81;
    if (self)
    {
      if ((id)self->_level == v89) {
        goto LABEL_120;
      }
      self->_level = (int64_t)v89;
      if (v89 == (id)2)
      {
        if (self->_fallbackEnabled)
        {
          if (!self->_weakFallback)
          {
LABEL_120:
            id v195 = v24;
            id v121 = v205;
            __int128 v123 = objc_getProperty(self, v122, 504LL, 1);
            if (v123)
            {
              id v125 = v123;
              id v126 = objc_getProperty(self, v124, 512LL, 1);
              if (v126)
              {
                id v128 = v126;
                uint64_t v209 = v21;
                id v129 = objc_getProperty(self, v127, 472LL, 1);

                if (v129)
                {
                  __int128 v200 = v10;
                  id v130 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
                  id v212 = 0u;
                  id v213 = 0u;
                  id v214 = 0u;
                  id v215 = 0u;
                  id v131 = v121;
                  id v132 = [v131 countByEnumeratingWithState:&v212 objects:buf count:16];
                  if (v132)
                  {
                    int v133 = v132;
                    BOOL v207 = v12;
                    BOOL v134 = 0;
                    __int128 v135 = *(void *)v213;
                    do
                    {
                      for (id i = 0LL; i != v133; id i = (char *)i + 1)
                      {
                        if (*(void *)v213 != v135) {
                          objc_enumerationMutation(v131);
                        }
                        id v137 = *(void **)(*((void *)&v212 + 1) + 8LL * (void)i);
                        id v138 = (void *)objc_claimAutoreleasedReturnValue([v137 bundleIdentifier]);
                        if (v138)
                        {
                          [v130 addObject:v138];
                          if ([v137 state] == (id)2
                            && (objc_msgSend( objc_getProperty(self, v139, 456, 1),  "containsObject:",  v138) & 1) == 0)
                          {
                            BOOL v134 = 1;
                            objc_msgSend(objc_getProperty(self, v140, 456, 1), "addObject:", v138);
                          }

                          else if ([v137 state] == (id)1 {
                                 && objc_msgSend( objc_getProperty(self, v141, 456, 1),  "containsObject:",  v138))
                          }
                          {
                            BOOL v134 = 1;
                            objc_msgSend(objc_getProperty(self, v142, 456, 1), "removeObject:", v138);
                          }

                          if ([v137 state] == (id)1
                            && (objc_msgSend( objc_getProperty(self, v143, 464, 1),  "containsObject:",  v138) & 1) == 0)
                          {
                            BOOL v134 = 1;
                            objc_msgSend(objc_getProperty(self, v144, 464, 1), "addObject:", v138);
                          }

                          else if ([v137 state] == (id)2 {
                                 && objc_msgSend( objc_getProperty(self, v145, 464, 1),  "containsObject:",  v138))
                          }
                          {
                            BOOL v134 = 1;
                            objc_msgSend(objc_getProperty(self, v146, 464, 1), "removeObject:", v138);
                          }
                        }
                      }

                      int v133 = [v131 countByEnumeratingWithState:&v212 objects:buf count:16];
                    }

                    while (v133);

                    uint64_t v81 = v197;
                    uint64_t v10 = v200;
                    char v12 = v207;
                    char v24 = v195;
                    id v149 = v130;
                    if ((v134 & 1) != 0)
                    {
                      unsigned int v150 = ne_log_obj(v147, v148);
                      id v151 = (os_log_s *)objc_claimAutoreleasedReturnValue(v150);
                      if (os_log_type_enabled(v151, OS_LOG_TYPE_DEBUG))
                      {
                        __int128 v188 = (NESMPathControllerSession *)objc_getProperty(self, v152, 456LL, 1);
                        *(_DWORD *)int v216 = 138412290;
                        unsigned __int8 v217 = v188;
                        _os_log_debug_impl( (void *)&_mh_execute_header,  v151,  OS_LOG_TYPE_DEBUG,  "Foreground apps changed to %@",  v216,  0xCu);
                      }

                      __int128 v155 = ne_log_obj(v153, v154);
                      unsigned int v156 = (os_log_s *)objc_claimAutoreleasedReturnValue(v155);
                      if (os_log_type_enabled(v156, OS_LOG_TYPE_DEBUG))
                      {
                        unsigned int v189 = (NESMPathControllerSession *)objc_getProperty(self, v157, 464LL, 1);
                        *(_DWORD *)int v216 = 138412290;
                        unsigned __int8 v217 = v189;
                        _os_log_debug_impl( (void *)&_mh_execute_header,  v156,  OS_LOG_TYPE_DEBUG,  "Background running apps changed to %@",  v216,  0xCu);
                      }

                      id v160 = ne_log_obj(v158, v159);
                      id v161 = (os_log_s *)objc_claimAutoreleasedReturnValue(v160);
                      if (os_log_type_enabled(v161, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)int v216 = 138412290;
                        unsigned __int8 v217 = self;
                        _os_log_impl( (void *)&_mh_execute_header,  v161,  OS_LOG_TYPE_DEFAULT,  "%@: Updating policies on app state change",  v216,  0xCu);
                      }

                      sub_1000877D4(self, 1, 0);
                      uint64_t v81 = v197;
                    }
                  }

                  else
                  {

                    uint64_t v10 = v200;
                    char v24 = v195;
                    id v149 = v130;
                  }

                  id v21 = v209;
                  uint32_t v80 = &selRef_setName_;
                  if ((objc_msgSend(objc_getProperty(self, v148, 472, 1), "isEqualToSet:", v149) & 1) == 0)
                  {
                    objc_setProperty_atomic(self, v162, v149, 472LL);
                    uint64_t v165 = ne_log_obj(v163, v164);
                    uint64_t v166 = (os_log_s *)objc_claimAutoreleasedReturnValue(v165);
                    if (os_log_type_enabled(v166, OS_LOG_TYPE_DEBUG))
                    {
                      __int128 v187 = (NESMPathControllerSession *)objc_getProperty(self, v167, 472LL, 1);
                      *(_DWORD *)int v216 = 138412290;
                      unsigned __int8 v217 = v187;
                      _os_log_debug_impl( (void *)&_mh_execute_header,  v166,  OS_LOG_TYPE_DEBUG,  "Fallback allowed apps changed to %@",  v216,  0xCu);
                    }

                    xpc_object_t v170 = ne_log_obj(v168, v169);
                    unsigned int v171 = (os_log_s *)objc_claimAutoreleasedReturnValue(v170);
                    if (os_log_type_enabled(v171, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)int v216 = 138412290;
                      unsigned __int8 v217 = self;
                      _os_log_impl( (void *)&_mh_execute_header,  v171,  OS_LOG_TYPE_DEFAULT,  "%@: Updating policies on fallback app change",  v216,  0xCu);
                    }

                    sub_1000877D4(self, 1, 0);
                  }

                  goto LABEL_163;
                }

                id v21 = v209;
              }

              else
              {
              }

              char v24 = v195;
            }

        uint64_t v15 = (NESMIKEv2VPNSession *)v21;
        goto LABEL_63;
      }

      goto LABEL_64;
    case 3:
      __int128 v31 = +[NESMAlwaysOnSession hasRequiredFrameworks](&OBJC_CLASS___NESMAlwaysOnSession, "hasRequiredFrameworks");
      if (!v31)
      {
        id v48 = ne_log_obj(v31, v32);
        id v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
        if (!os_log_type_enabled(v49, OS_LOG_TYPE_FAULT)) {
          goto LABEL_45;
        }
        *(_WORD *)__int128 buf = 0;
        id v50 = "Cannot create an Always On VPN session, some required frameworks are missing";
        goto LABEL_66;
      }

      uint64_t v15 = (NESMIKEv2VPNSession *)objc_claimAutoreleasedReturnValue([v7 alwaysOnVPN]);

      if (v15)
      {
        id v33 = &OBJC_CLASS___NESMAlwaysOnSession;
        goto LABEL_37;
      }

      goto LABEL_64;
    case 4:
      uint64_t v15 = (NESMIKEv2VPNSession *)objc_claimAutoreleasedReturnValue([v7 contentFilter]);
      if (!v15) {
        goto LABEL_64;
      }
      uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v7 contentFilter]);
      __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([v34 provider]);
      __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v7 contentFilter]);
      __int128 v37 = (void *)objc_claimAutoreleasedReturnValue([v36 provider]);
      if ([v37 filterSockets])
      {

LABEL_22:
LABEL_23:
        id v33 = &OBJC_CLASS___NESMFilterSession;
        goto LABEL_37;
      }

      __int16 v59 = (void *)objc_claimAutoreleasedReturnValue([v7 contentFilter]);
      uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue([v59 provider]);
      uint64_t v61 = [v60 filterPackets];

      if ((v61 & 1) != 0) {
        goto LABEL_23;
      }
LABEL_46:
      uint64_t v15 = 0LL;
LABEL_64:
      -[NESMVPNSession handleInitializeState](v15, "handleInitializeState");

      return v15;
    case 5:
      uint64_t v15 = (NESMIKEv2VPNSession *)objc_claimAutoreleasedReturnValue([v7 pathController]);

      if (!v15) {
        goto LABEL_64;
      }
      id v33 = &OBJC_CLASS___NESMPathControllerSession;
      goto LABEL_37;
    case 6:
      uint64_t v15 = (NESMIKEv2VPNSession *)objc_claimAutoreleasedReturnValue([v7 dnsProxy]);

      if (v15)
      {
        __int128 v38 = objc_alloc(&OBJC_CLASS___NESMDNSProxySession);
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v7 dnsProxy]);
        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 protocol]);
        uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v7 dnsProxy]);
        id v40 = (void *)objc_claimAutoreleasedReturnValue([v39 protocol]);
        BOOL v41 = (void *)objc_claimAutoreleasedReturnValue([v40 pluginType]);
        uint64_t v15 = -[NESMDNSProxySession initWithConfiguration:andServer:andProtocol:andPluginType:]( v38,  "initWithConfiguration:andServer:andProtocol:andPluginType:",  v7,  v8,  v20,  v41);

LABEL_63:
      }

      goto LABEL_64;
    case 7:
      uint64_t v42 = +[NESMDNSSettingsSession hasRequiredFrameworks]( &OBJC_CLASS___NESMDNSSettingsSession,  "hasRequiredFrameworks");
      if (v42)
      {
        uint64_t v15 = (NESMIKEv2VPNSession *)objc_claimAutoreleasedReturnValue([v7 dnsSettings]);

        if (!v15) {
          goto LABEL_64;
        }
        id v33 = &OBJC_CLASS___NESMDNSSettingsSession;
        goto LABEL_37;
      }

      id v51 = ne_log_obj(v42, v43);
      id v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
      if (!os_log_type_enabled(v49, OS_LOG_TYPE_FAULT)) {
        goto LABEL_45;
      }
      *(_WORD *)__int128 buf = 0;
      id v50 = "Cannot create a DNS Settings session, some required frameworks are missing";
      goto LABEL_66;
    case 8:
      id v44 = +[NESMAppPushSession hasRequiredFrameworks](&OBJC_CLASS___NESMAppPushSession, "hasRequiredFrameworks");
      if (v44)
      {
        uint64_t v15 = (NESMIKEv2VPNSession *)objc_claimAutoreleasedReturnValue([v7 appPush]);

        if (!v15) {
          goto LABEL_64;
        }
        id v33 = &OBJC_CLASS___NESMAppPushSession;
        goto LABEL_37;
      }

      id v52 = ne_log_obj(v44, v45);
      id v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
      if (!os_log_type_enabled(v49, OS_LOG_TYPE_FAULT)) {
        goto LABEL_45;
      }
      *(_WORD *)__int128 buf = 0;
      id v50 = "Cannot create an App Push session, some required frameworks are missing";
      goto LABEL_66;
    case 9:
      id v46 = +[NESMRelaySession hasRequiredFrameworks](&OBJC_CLASS___NESMRelaySession, "hasRequiredFrameworks");
      if (v46)
      {
        uint64_t v15 = (NESMIKEv2VPNSession *)objc_claimAutoreleasedReturnValue([v7 relay]);

        if (v15)
        {
          id v33 = &OBJC_CLASS___NESMRelaySession;
LABEL_37:
          uint64_t v15 = (NESMIKEv2VPNSession *)[[v33 alloc] initWithConfiguration:v7 andServer:v8];
        }

        goto LABEL_64;
      }

      uint64_t v53 = ne_log_obj(v46, v47);
      id v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)__int128 buf = 0;
        id v50 = "Cannot create an Relay session, some required frameworks are missing";
LABEL_66:
        _os_log_fault_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_FAULT, v50, buf, 2u);
      }

LABEL_163:
            goto LABEL_164;
          }
        }

        else
        {
          uint64_t v105 = ne_log_obj(2LL, v90);
          SEL v106 = (os_log_s *)objc_claimAutoreleasedReturnValue(v105);
          if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v106,  OS_LOG_TYPE_DEFAULT,  "Begin strong fallback advisory",  buf,  2u);
          }

          __int128 v107 = objc_alloc(&OBJC_CLASS___NSString);
          __int128 v108 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession configuration](self, "configuration"));
          __int128 v109 = (void *)objc_claimAutoreleasedReturnValue([v108 identifier]);
          __int128 v110 = -[NSString initWithFormat:]( v107,  "initWithFormat:",  @"com.apple.nesessionmanager.strongFallback.%@",  v109);

          __int128 v111 = (void *)os_transaction_create(-[NSString UTF8String](v110, "UTF8String"));
          objc_setProperty_atomic(self, v112, v111, 424LL);

          id v21 = 1;
        }

        id v94 = 0;
        self->_fallbackEnabled = 1;
LABEL_119:
        self->_weakFallback = v94;
        char v24 = 1;
        goto LABEL_120;
      }

      if (v89 == (id)1)
      {
        if (self->_fallbackEnabled)
        {
          if (self->_weakFallback)
          {
            uint32_t v80 = &selRef_setName_;
            goto LABEL_120;
          }
        }

        else
        {
          __int128 v113 = ne_log_obj(1LL, v90);
          __int128 v114 = (os_log_s *)objc_claimAutoreleasedReturnValue(v113);
          if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v114,  OS_LOG_TYPE_DEFAULT,  "Begin weak fallback advisory",  buf,  2u);
          }

          __int128 v115 = objc_alloc(&OBJC_CLASS___NSString);
          __int128 v116 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession configuration](self, "configuration"));
          __int128 v117 = (void *)objc_claimAutoreleasedReturnValue([v116 identifier]);
          __int128 v118 = -[NSString initWithFormat:]( v115,  "initWithFormat:",  @"com.apple.nesessionmanager.weakFallback.%@",  v117);

          id v119 = (void *)os_transaction_create(-[NSString UTF8String](v118, "UTF8String"));
          objc_setProperty_atomic(self, v120, v119, 424LL);

          id v21 = 1;
        }

        id v94 = 1;
        self->_fallbackEnabled = 1;
        uint32_t v80 = &selRef_setName_;
        goto LABEL_119;
      }

      if (v89) {
        goto LABEL_120;
      }
    }

    else if (!v89)
    {
      id v190 = v205;
      goto LABEL_163;
    }

    if (!self->_fallbackEnabled) {
      goto LABEL_120;
    }
    id v91 = ne_log_obj(v89, v90);
    id v92 = (os_log_s *)objc_claimAutoreleasedReturnValue(v91);
    if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEFAULT, "End fallback advisory", buf, 2u);
    }

    objc_setProperty_atomic(self, v93, 0LL, 424LL);
    id v94 = 0;
    self->_fallbackEnabled = 0;
    id v21 = 1;
    goto LABEL_119;
  }

  uint64_t v81 = v79;
LABEL_164:

LABEL_165:
  unsigned int v172 = v24;
  unsigned int v173 = *((int *)v80 + 706);
  id v174 = 3LL;
  if (!*((_BYTE *)&self->super.super.isa + v173))
  {
    id v83 = objc_msgSend(objc_getProperty(self, v84, 368, 1), "hasNonDefaultRules");
    if ((_DWORD)v83) {
      id v174 = 3LL;
    }
    else {
      id v174 = 1LL;
    }
  }

  unsigned int v175 = v21;
  __int128 v176 = ne_log_obj(v83, v84);
  __int128 v177 = (os_log_s *)objc_claimAutoreleasedReturnValue(v176);
  if (os_log_type_enabled(v177, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v178 = ne_session_status_to_string(v174);
    __int128 v179 = *((unsigned __int8 *)&self->super.super.isa + v173);
    __int128 v181 = objc_msgSend(objc_getProperty(self, v180, 368, 1), "hasNonDefaultRules");
    *(_DWORD *)__int128 buf = 138413058;
    *(void *)uint64_t v219 = self;
    *(_WORD *)&v219[8] = 2080;
    id v220 = v178;
    uint64_t v221 = 1024;
    uint64_t v222 = v179;
    uint64_t v223 = 1024;
    id v224 = v181;
    _os_log_impl( (void *)&_mh_execute_header,  v177,  OS_LOG_TYPE_DEFAULT,  "Will update session %@ status to %s (fallback %u non-default %u)",  buf,  0x22u);
  }

  __int128 v182 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(-[NESMSession queue](self, "queue"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10008B3A8;
  block[3] = &unk_1000BED80;
  void block[4] = self;
  id v211 = v174;
  dispatch_async(v182, block);

  if ((v172 | v175) == 1)
  {
    __int128 v185 = ne_log_obj(v183, v184);
    __int128 v186 = (os_log_s *)objc_claimAutoreleasedReturnValue(v185);
    if (os_log_type_enabled(v186, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109376;
      *(_DWORD *)uint64_t v219 = v175;
      *(_WORD *)&v219[4] = 1024;
      *(_DWORD *)&v219[6] = v172;
      _os_log_impl( (void *)&_mh_execute_header,  v186,  OS_LOG_TYPE_DEFAULT,  "Updating on KVO change, policies=%d, agent=%d",  buf,  0xEu);
    }

    sub_1000877D4(self, v175, v172);
  }
}

id sub_10008B3A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = ne_log_obj(a1, a2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = ne_session_status_to_string(*(unsigned int *)(a1 + 40));
    int v8 = 138412546;
    uint64_t v9 = v5;
    __int16 v10 = 2080;
    uint64_t v11 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Session %@ status changing to %s after update",  (uint8_t *)&v8,  0x16u);
  }

  return [*(id *)(a1 + 32) setStatus:*(unsigned int *)(a1 + 40)];
}

void sub_10008B474(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    id v4 = objc_getProperty(v3, a2, 448LL, 1);
    if (v4 && !*(void *)(a1 + 40)) {
      goto LABEL_23;
    }
    uint64_t v5 = *(void **)(a1 + 32);
    if (v5)
    {
      id v6 = objc_getProperty(v5, a2, 448LL, 1);
      if (v6) {
        goto LABEL_6;
      }
    }
  }

  else
  {
    id v4 = 0LL;
  }

  if (*(void *)(a1 + 40)) {
    goto LABEL_23;
  }
  id v6 = 0LL;
LABEL_6:
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 448LL, 1);
  }
  id v8 = [Property count];
  id v9 = [*(id *)(a1 + 40) count];

  if (v8 != v9) {
    goto LABEL_24;
  }
  uint64_t v11 = *(void **)(a1 + 40);
  if (!v11) {
    return;
  }
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  id v4 = v11;
  id v12 = [v4 countByEnumeratingWithState:&v30 objects:v36 count:16];
  if (!v12)
  {
LABEL_20:

    return;
  }

  id v13 = v12;
  uint64_t v14 = *(void *)v31;
LABEL_12:
  uint64_t v15 = 0LL;
  while (1)
  {
    if (*(void *)v31 != v14) {
      objc_enumerationMutation(v4);
    }
    uint64_t v16 = *(void *)(*((void *)&v30 + 1) + 8 * v15);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v16, (void)v30));
    id v19 = *(id *)(a1 + 32);
    if (v19) {
      id v19 = objc_getProperty(v19, v17, 448LL, 1);
    }
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:v16]);
    id v21 = [v18 unsignedIntegerValue];
    id v22 = [v20 unsignedIntegerValue];

    if (v21 != v22) {
      break;
    }
    if (v13 == (id)++v15)
    {
      id v13 = [v4 countByEnumeratingWithState:&v30 objects:v36 count:16];
      if (v13) {
        goto LABEL_12;
      }
      goto LABEL_20;
    }
  }

void sub_10008B730(void *a1, const char *a2)
{
  if (a1)
  {
    if (objc_getProperty(a1, a2, 392LL, 1))
    {
      objc_msgSend(objc_getProperty(a1, v3, 392, 1), "removeObserver:forKeyPath:", a1, @"status");
      objc_setProperty_atomic(a1, v4, 0LL, 392LL);
    }

    id Property = objc_getProperty(a1, v3, 416LL, 1);
    if (Property)
    {
      uint64_t v7 = ne_log_obj(Property, v6);
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__int16 v10 = 0;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "End roaming monitor transaction",  v10,  2u);
      }

      objc_setProperty_atomic(a1, v9, 0LL, 416LL);
    }
  }

void sub_10008B814(uint64_t a1, const char *a2)
{
  int v8 = *(_DWORD *)(a1 + 360);
  if (v8 != -1)
  {
    notify_cancel(v8);
    *(_DWORD *)(a1 + 360) = -1;
  }

  id Property = (dispatch_source_s *)objc_getProperty((id)a1, v7, 488LL, 1);
  dispatch_source_cancel(Property);
  objc_setProperty_atomic((id)a1, v10, 0LL, 488LL);
  if (objc_getProperty((id)a1, v11, 504LL, 1))
  {
    objc_msgSend((id)a1, "didStopTrackingNOI:", objc_getProperty((id)a1, v12, 512, 1));
    objc_msgSend(objc_getProperty((id)a1, v13, 504, 1), "setDelegate:", 0);
    objc_msgSend(objc_getProperty((id)a1, v14, 504, 1), "destroy");
    objc_setProperty_atomic((id)a1, v15, 0LL, 504LL);
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 server]);
  [v16 removeObserver:a1 forKeyPath:@"primaryCellularInterface"];

  double v17 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 server]);
  [v17 removeObserver:a1 forKeyPath:@"primaryPhysicalInterface"];

  *(_BYTE *)(a1 + 35_Block_object_dispose(va, 8) = 0;
}

uint64_t sub_10008B9A0(id self, const char *a2)
{
  uint64_t v2 = (uint64_t)self;
  if (self)
  {
    uint64_t v20 = 0LL;
    id v21 = &v20;
    uint64_t v22 = 0x3032000000LL;
    unsigned __int8 v23 = sub_1000879DC;
    char v24 = sub_1000879EC;
    id v25 = 0LL;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    id v3 = objc_msgSend(objc_getProperty(self, a2, 368, 1), "pathRules");
    SEL v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    id v5 = [v4 countByEnumeratingWithState:&v26 objects:v30 count:16];
    if (v5)
    {
      uint64_t v6 = *(void *)v27;
      while (2)
      {
        uint64_t v7 = 0LL;
        do
        {
          if (*(void *)v27 != v6) {
            objc_enumerationMutation(v4);
          }
          if ([*(id *)(*((void *)&v26 + 1) + 8 * (void)v7) denyMulticast])
          {

            default_evaluator = (void *)nw_path_create_default_evaluator();
            SEL v10 = (void *)nw_path_evaluator_copy_path(default_evaluator);

            v19[0] = _NSConcreteStackBlock;
            v19[1] = 3221225472LL;
            _DWORD v19[2] = sub_10008BC04;
            v19[3] = &unk_1000BEA38;
            v19[4] = &v20;
            nw_path_enumerate_resolver_configs(v10, v19);

            goto LABEL_12;
          }

          uint64_t v7 = (char *)v7 + 1;
        }

        while (v5 != v7);
        id v5 = [v4 countByEnumeratingWithState:&v26 objects:v30 count:16];
        if (v5) {
          continue;
        }
        break;
      }
    }

LABEL_12:
    id v11 = (id)v21[5];
    id v12 = objc_getProperty((id)v2, v8, 496LL, 1);
    if (v11 == v12)
    {
    }

    else
    {
      SEL v14 = v12;
      SEL v15 = (void *)v21[5];
      id v16 = objc_getProperty((id)v2, v13, 496LL, 1);
      LOBYTE(v15) = [v15 isEqual:v16];

      if ((v15 & 1) == 0)
      {
        objc_setProperty_atomic((id)v2, v17, (id)v21[5], 496LL);
        uint64_t v2 = 1LL;
LABEL_17:
        _Block_object_dispose(&v20, 8);

        return v2;
      }
    }

    uint64_t v2 = 0LL;
    goto LABEL_17;
  }

  return v2;
}

void sub_10008BBD8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10008BC04(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!nw_resolver_config_get_protocol())
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_10008BC80;
    v5[3] = &unk_1000BEA10;
    void v5[4] = *(void *)(a1 + 32);
    nw_resolver_config_enumerate_name_servers(v3, v5);
  }

  return 1LL;
}

uint64_t sub_10008BC80(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a2));
  SEL v4 = (void *)objc_claimAutoreleasedReturnValue( +[NWAddressEndpoint endpointWithHostname:port:]( &OBJC_CLASS___NWAddressEndpoint,  "endpointWithHostname:port:",  v3,  @"0"));

  id v5 = [v4 copyCEndpoint];
  evaluator_for_endpoint = (void *)nw_path_create_evaluator_for_endpoint(v5, 0LL);

  uint64_t v7 = (void *)nw_path_evaluator_copy_path(evaluator_for_endpoint);
  int is_direct = nw_path_is_direct();

  if (is_direct)
  {
    SEL v9 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
    if (!v9)
    {
      SEL v10 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8LL);
      id v12 = *(void **)(v11 + 40);
      *(void *)(v11 + 40) = v10;

      SEL v9 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
    }

    [v9 addObject:v4];
  }

  return 1LL;
}

id sub_10008BD74()
{
  return (id)qword_1000CFC30;
}

Class sub_10008BD80()
{
  if (qword_1000CFC40 != -1) {
    dispatch_once(&qword_1000CFC40, &stru_1000BEAD0);
  }
  Class result = objc_getClass("NWNetworkOfInterestManager");
  qword_1000CFC30 = (uint64_t)result;
  off_1000CF8D0 = (uint64_t (*)())sub_10008BD74;
  return result;
}

void sub_10008BDDC(id a1)
{
  qword_1000CFC38 = (uint64_t)dlopen( "/System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomPresentationFeed.f ramework/SymptomPresentationFeed",  2);
  if (!qword_1000CFC38) {
    NSLog(&CFSTR("### Failed to Soft Link: /System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomPresentationF"
  }
                 "eed.framework/SymptomPresentationFeed").isa);
}

void sub_10008BE14(uint64_t a1)
{
}

uint64_t sub_10008BE1C(id self, const char *a2)
{
  uint64_t v2 = (uint64_t)self;
  if (self)
  {
    char v3 = (char)a2;
    id v4 = objc_msgSend(objc_getProperty(self, a2, 368, 1), "ignoreRouteRules");
    if ((v4 & 1) != 0)
    {
      uint64_t v2 = 0LL;
    }

    else
    {
      if ((v3 & 1) != 0) {
        unsigned int v6 = 0;
      }
      else {
        unsigned int v6 = (sub_100088778(v2, v5) >> 1) & 1;
      }
      __int128 v19 = 0u;
      __int128 v20 = 0u;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      id v7 = objc_msgSend(objc_getProperty((id)v2, v5, 368, 1), "pathRules", 0);
      int v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      id v9 = [v8 countByEnumeratingWithState:&v17 objects:v23 count:16];
      if (v9)
      {
        id v10 = v9;
        uint64_t v11 = *(void *)v18;
        while (2)
        {
          id v12 = 0LL;
          do
          {
            if (*(void *)v18 != v11) {
              objc_enumerationMutation(v8);
            }
            if (![*(id *)(*((void *)&v17 + 1) + 8 * (void)v12) cellularBehavior])
            {

              uint64_t v2 = 1LL;
              goto LABEL_17;
            }

            id v12 = (char *)v12 + 1;
          }

          while (v10 != v12);
          id v10 = [v8 countByEnumeratingWithState:&v17 objects:v23 count:16];
          if (v10) {
            continue;
          }
          break;
        }
      }

      uint64_t v2 = v6 != 0;
    }

void sub_10008BFE4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
  char v3 = (void *)objc_claimAutoreleasedReturnValue([v2 pathController]);
  if ([v3 hasNonDefaultRules])
  {
  }

  else
  {
    char v6 = ne_session_fallback_advisory();

    if ((v6 & 1) == 0) {
      return;
    }
  }

  uint64_t v7 = ne_log_obj(v4, v5);
  int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    int v16 = 138412290;
    uint64_t v17 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%@: Handling installed apps change, restarting",  (uint8_t *)&v16,  0xCu);
  }

  xpc_object_t v10 = xpc_dictionary_create(0LL, 0LL, 0LL);
  xpc_object_t v11 = xpc_dictionary_create(0LL, 0LL, 0LL);
  uint64_t v13 = v11;
  if (v11)
  {
    xpc_dictionary_set_BOOL(v11, "stop-current-session", 1);
  }

  else
  {
    uint64_t v14 = ne_log_obj(0LL, v12);
    SEL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v16) = 0;
      _os_log_fault_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_FAULT,  "xpc_dictionary_create failed",  (uint8_t *)&v16,  2u);
    }
  }

  xpc_dictionary_set_value(v10, "SessionOptions", v13);
  [*(id *)(a1 + 32) startWithCommand:v10 isOnDemand:0];
}

void sub_10008C18C(uint64_t a1, const char *a2)
{
}

void sub_10008C1CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = ne_log_obj(a1, a2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = inputNotification2String(*(unsigned int *)(a1 + 40));
    int v10 = 138412546;
    uint64_t v11 = v5;
    __int16 v12 = 2080;
    uint64_t v13 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%@: Handling %s notification, starting",  (uint8_t *)&v10,  0x16u);
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) configuration]);
  int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 pathController]);
  if ([v8 hasNonDefaultRules])
  {
  }

  else
  {
    char v9 = ne_session_fallback_advisory();

    if ((v9 & 1) == 0) {
      return;
    }
  }

  [*(id *)(a1 + 32) startWithCommand:0 isOnDemand:0];
}

uint64_t sub_10008C2E0(id self, const char *a2)
{
  uint64_t v2 = (uint64_t)self;
  if (self)
  {
    uint64_t v3 = (uint64_t)objc_msgSend(objc_getProperty(self, a2, 368, 1), "ignoreFallback");
    v2 = (v3 & 1) == 0 && (uint64_t v3 = sub_100088778(v2, v4), (v3 & 2) != 0);
    uint64_t v5 = ne_log_obj(v3, v4);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      int v8 = "No";
      if ((_DWORD)v2) {
        int v8 = "Yes";
      }
      int v9 = 136315138;
      int v10 = v8;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Path Controller needs fallback notifications: %s",  (uint8_t *)&v9,  0xCu);
    }
  }

  return v2;
}

void sub_10008C3D8(void *a1, const char *a2)
{
  if (!a1) {
    return;
  }
  __int128 v82 = 0u;
  __int128 v83 = 0u;
  __int128 v80 = 0u;
  __int128 v81 = 0u;
  id v3 = objc_msgSend(objc_getProperty(a1, a2, 368, 1), "pathRules");
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  id v5 = [v4 countByEnumeratingWithState:&v80 objects:v89 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = 0LL;
    uint64_t v8 = *(void *)v81;
    do
    {
      for (id i = 0LL; i != v6; id i = (char *)i + 1)
      {
        if (*(void *)v81 != v8) {
          objc_enumerationMutation(v4);
        }
        int v10 = *(void **)(*((void *)&v80 + 1) + 8LL * (void)i);
        if (([v10 multicastPreferenceSet] & 1) == 0)
        {
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 temporaryAllowMulticastNetworkName]);

          if (v11)
          {
            if (!v7) {
              uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
            }
            __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v10 temporaryAllowMulticastNetworkName]);
            unsigned __int8 v13 = -[NSMutableArray containsObject:](v7, "containsObject:", v12);

            if ((v13 & 1) == 0)
            {
              uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v10 temporaryAllowMulticastNetworkName]);
              -[NSMutableArray addObject:](v7, "addObject:", v14);
            }
          }
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v80 objects:v89 count:16];
    }

    while (v6);
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  __int128 v78 = 0u;
  __int128 v79 = 0u;
  __int128 v76 = 0u;
  __int128 v77 = 0u;
  id v16 = objc_getProperty(a1, v15, 400LL, 1);
  id v17 = [v16 countByEnumeratingWithState:&v76 objects:v88 count:16];
  if (!v17)
  {
    __int128 v20 = 0LL;
    goto LABEL_34;
  }

  id v19 = v17;
  __int128 v20 = 0LL;
  uint64_t v21 = *(void *)v77;
  do
  {
    for (j = 0LL; j != v19; j = (char *)j + 1)
    {
      if (*(void *)v77 != v21) {
        objc_enumerationMutation(v16);
      }
      unsigned __int8 v23 = *(void **)(*((void *)&v76 + 1) + 8LL * (void)j);
      if (v23)
      {
        if ((-[NSMutableArray containsObject:]( v7,  "containsObject:",  objc_getProperty(*(id *)(*((void *)&v76 + 1) + 8LL * (void)j), v18, 24LL, 1)) & 1) != 0)
        {
          id Property = objc_getProperty(v23, v24, 24LL, 1);
LABEL_25:
          -[NSMutableArray removeObject:](v7, "removeObject:", Property);
          continue;
        }
      }

      else
      {
        unsigned __int8 v26 = -[NSMutableArray containsObject:](v7, "containsObject:", 0LL);
        id Property = 0LL;
        if ((v26 & 1) != 0) {
          goto LABEL_25;
        }
      }

      sub_10008742C((id *)v23, v24);
      if (!v20) {
        __int128 v20 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      }
      -[NSMutableArray addObject:](v20, "addObject:", v23);
    }

    id v19 = [v16 countByEnumeratingWithState:&v76 objects:v88 count:16];
  }

  while (v19);
LABEL_34:

  __int128 v74 = 0u;
  __int128 v75 = 0u;
  __int128 v72 = 0u;
  __int128 v73 = 0u;
  id obj = v20;
  id v27 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v72,  v87,  16LL);
  __int128 v29 = &selRef_setName_;
  if (v27)
  {
    id v30 = v27;
    uint64_t v31 = *(void *)v73;
    do
    {
      for (k = 0LL; k != v30; k = (char *)k + 1)
      {
        if (*(void *)v73 != v31) {
          objc_enumerationMutation(obj);
        }
        objc_msgSend( objc_getProperty(a1, v28, 400, 1),  "removeObject:",  *(void *)(*((void *)&v72 + 1) + 8 * (void)k));
      }

      id v30 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v72,  v87,  16LL);
    }

    while (v30);
  }

  if (-[NSMutableArray count](v7, "count"))
  {
    if (!objc_getProperty(a1, v33, 400LL, 1))
    {
      uint64_t v34 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      objc_setProperty_atomic(a1, v35, v34, 400LL);
    }

    __int128 v70 = 0u;
    __int128 v71 = 0u;
    __int128 v68 = 0u;
    __int128 v69 = 0u;
    uint64_t v64 = v7;
    id v67 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v64,  "countByEnumeratingWithState:objects:count:",  &v68,  v86,  16LL);
    if (v67)
    {
      uint64_t v66 = *(void *)v69;
      do
      {
        __int128 v36 = 0LL;
        do
        {
          if (*(void *)v69 != v66) {
            objc_enumerationMutation(v64);
          }
          __int128 v37 = *(void **)(*((void *)&v68 + 1) + 8LL * (void)v36);
          __int128 v38 = objc_alloc(&OBJC_CLASS___NESMPathControllerSSIDWatcher);
          id v39 = v37;
          id v40 = a1;
          if (v38 && v39)
          {
            v85.receiver = v38;
            v85.super_class = (Class)&OBJC_CLASS___NESMPathControllerSSIDWatcher;
            BOOL v41 = (NESMPathControllerSSIDWatcher *)objc_msgSendSuper2(&v85, "init");
            if (v41)
            {
              __int128 v38 = v41;
              objc_storeStrong((id *)&v41->_ssid, v37);
              objc_storeWeak((id *)&v38->_parentSession, v40);
              id v43 = objc_alloc_init(&OBJC_CLASS___NWNetworkDescription);
              *(void *)id v90 = v39;
              id v44 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v90,  1LL));
              id v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v44));
              [v43 setSsidOptions:v45];

              id v46 = objc_alloc_init(&OBJC_CLASS___NWParameters);
              [v46 setRequiredInterfaceType:1];
              __int16 v47 = (void *)objc_claimAutoreleasedReturnValue( +[NWMonitor monitorWithNetworkDescription:endpoint:parameters:]( &OBJC_CLASS___NWMonitor,  "monitorWithNetworkDescription:endpoint:parameters:",  v43,  0LL,  v46));
              objc_setProperty_atomic(v38, v48, v47, 16LL);

              if (objc_getProperty(v38, v49, 16LL, 1))
              {
                if (!objc_getProperty(v38, v50, 32LL, 1))
                {
                  uint64_t v52 = ne_log_obj(0LL, v51);
                  uint64_t v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
                  if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
                  {
                    *(_WORD *)__int128 buf = 0;
                    _os_log_debug_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEBUG,  "Begin SSID monitor transaction",  buf,  2u);
                  }

                  uint64_t v54 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"com.apple.nesessionmanager.SSIDMonitor");
                  __int16 v55 = (void *)os_transaction_create(-[NSString UTF8String](v54, "UTF8String"));
                  objc_setProperty_atomic(v38, v56, v55, 32LL);

                  __int128 v29 = &selRef_setName_;
                }

                v38->_hasBeenAssociated = 0;
                sub_10008750C(v40, v39, 1);
                objc_msgSend( objc_getProperty(v38, v57, 16, 1),  "addObserver:forKeyPath:options:context:",  v38,  @"status",  5,  0);
                id v58 = v38;
              }

              else
              {
                uint64_t v59 = ne_log_obj(0LL, v50);
                uint64_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
                if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)__int128 buf = 0;
                  _os_log_error_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_ERROR,  "SSID monitor creation failed",  buf,  2u);
                }

                id v58 = 0LL;
              }
            }

            else
            {
              uint64_t v62 = ne_log_obj(0LL, v42);
              id v43 = (id)objc_claimAutoreleasedReturnValue(v62);
              if (os_log_type_enabled((os_log_t)v43, OS_LOG_TYPE_FAULT))
              {
                *(_WORD *)id v90 = 0;
                _os_log_fault_impl( (void *)&_mh_execute_header,  (os_log_t)v43,  OS_LOG_TYPE_FAULT,  "[super init] failed",  v90,  2u);
              }

              __int128 v38 = 0LL;
              id v58 = 0LL;
            }
          }

          else
          {
            id v58 = 0LL;
          }

          if (v58) {
            objc_msgSend(objc_getProperty(v40, v61, *((int *)v29 + 713), 1), "addObject:", v58);
          }

          __int128 v36 = (char *)v36 + 1;
        }

        while (v67 != v36);
        id v63 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v64,  "countByEnumeratingWithState:objects:count:",  &v68,  v86,  16LL);
        id v67 = v63;
      }

      while (v63);
    }
  }
}

NSMutableArray *sub_10008CB08(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 355)) {
    return (NSMutableArray *)0LL;
  }
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v3 = v2;
  if (*(void *)(a1 + 440))
  {
    uint64_t v4 = objc_alloc(&OBJC_CLASS___NSNumber);
    id v6 = -[NSNumber initWithUnsignedLong:]( v4,  "initWithUnsignedLong:",  objc_msgSend(objc_getProperty((id)a1, v5, 440, 1), "interfaceIndex"));
    -[NSMutableArray addObject:](v3, "addObject:", v6);
  }

  else
  {
    -[NSMutableArray addObject:](v2, "addObject:", &off_1000C1950);
  }

  if (objc_getProperty((id)a1, v7, 448LL, 1))
  {
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    id v10 = objc_getProperty((id)a1, v9, 448LL, 1);
    id v11 = [v10 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v16;
      do
      {
        uint64_t v14 = 0LL;
        do
        {
          if (*(void *)v16 != v13) {
            objc_enumerationMutation(v10);
          }
          -[NSMutableArray addObject:]( v3,  "addObject:",  *(void *)(*((void *)&v15 + 1) + 8LL * (void)v14),  (void)v15);
          uint64_t v14 = (char *)v14 + 1;
        }

        while (v12 != v14);
        id v12 = [v10 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }

      while (v12);
    }
  }

  return v3;
}

void sub_10008CDFC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v8 = v6;
  if (a1)
  {
    uint64_t v9 = ne_log_obj(v6, v7);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v12 = [v8 state];
      if (v12 > 3) {
        uint64_t v13 = @"Unknown";
      }
      else {
        uint64_t v13 = off_1000BEB68[v12];
      }
      *(_DWORD *)__int128 buf = 138412802;
      uint64_t v18 = a1;
      __int16 v19 = 2112;
      __int128 v20 = v13;
      __int16 v21 = 2048;
      id v22 = [v5 slotID];
      _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "%@ cellular data connection became %@ for slot id %ld",  buf,  0x20u);
    }

    id v11 = *(void **)(a1 + 24);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_10008CF7C;
    v14[3] = &unk_1000BEB48;
    void v14[4] = a1;
    id v15 = v8;
    id v16 = v5;
    [v11 copyCellInfo:v16 completion:v14];
  }
}

void sub_10008CF7C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v8 = ne_log_obj(v6, v7);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v23 = *(void *)(a1 + 32);
    char v24 = (void *)objc_claimAutoreleasedReturnValue([v5 legacyInfo]);
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v132 = v23;
    __int16 v133 = 2112;
    id v134 = v24;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "%@ received cell info %@", buf, 0x16u);
  }

  if (v6)
  {
    uint64_t v12 = ne_log_obj(v10, v11);
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v46 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v132 = v46;
      __int16 v133 = 2112;
      id v134 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "%@ failed to copy cellular info, error: %@",  buf,  0x16u);
    }

    goto LABEL_100;
  }

  if ([*(id *)(a1 + 40) state] == 2)
  {
    uint64_t v14 = *(void *)(a1 + 32);
    if (v14)
    {
      if (v5 && !*(void *)(v14 + 48))
      {
        __int128 v118 = 0u;
        __int128 v119 = 0u;
        __int128 v120 = 0u;
        __int128 v121 = 0u;
        id v15 = (void *)objc_claimAutoreleasedReturnValue([v5 legacyInfo]);
        id v16 = [v15 countByEnumeratingWithState:&v118 objects:buf count:16];
        if (v16)
        {
          id v17 = v16;
          uint64_t v18 = *(void *)v119;
LABEL_13:
          uint64_t v19 = 0LL;
          while (1)
          {
            if (*(void *)v119 != v18) {
              objc_enumerationMutation(v15);
            }
            __int128 v20 = *(void **)(*((void *)&v118 + 1) + 8 * v19);
            uint64_t v21 = objc_opt_class(&OBJC_CLASS___NSDictionary);
            if ((objc_opt_isKindOfClass(v20, v21) & 1) != 0) {
              break;
            }
            if (v17 == (id)++v19)
            {
              id v17 = [v15 countByEnumeratingWithState:&v118 objects:buf count:16];
              if (v17) {
                goto LABEL_13;
              }
              goto LABEL_19;
            }
          }

          id v22 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKeyedSubscript:kCTCellMonitorMCC]);
          if (!v22 || (uint64_t v25 = objc_opt_class(&OBJC_CLASS___NSNumber), (objc_opt_isKindOfClass(v22, v25) & 1) == 0))
          {
            unsigned __int8 v26 = 0LL;
LABEL_32:

            goto LABEL_33;
          }

          unsigned __int8 v26 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKeyedSubscript:kCTCellMonitorMNC]);
          if (!v26) {
            goto LABEL_32;
          }
          uint64_t v27 = objc_opt_class(&OBJC_CLASS___NSNumber);
          if ((objc_opt_isKindOfClass(v26, v27) & 1) == 0) {
            goto LABEL_32;
          }
          __int128 v28 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKeyedSubscript:kCTCellMonitorBandInfo]);
          if (v28)
          {
            __int128 v29 = v28;
            uint64_t v30 = objc_opt_class(&OBJC_CLASS___NSNumber);
            if ((objc_opt_isKindOfClass(v29, v30) & 1) != 0)
            {
              id obj = v29;
              id v31 = [v29 isEqualToNumber:&off_1000C1968];
              int v106 = (int)v31;
              if ((_DWORD)v31)
              {
                uint64_t isKindOfClass = objc_claimAutoreleasedReturnValue([v20 objectForKeyedSubscript:kCTCellMonitorTAC]);
                SEL v35 = (void *)isKindOfClass;
                if (!isKindOfClass
                  || (uint64_t v36 = objc_opt_class(&OBJC_CLASS___NSNumber),
                      uint64_t isKindOfClass = objc_opt_isKindOfClass(v35, v36),
                      (isKindOfClass & 1) == 0))
                {
                  uint64_t v54 = v35;
                  uint64_t v55 = ne_log_obj(isKindOfClass, v34);
                  SEL v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
                  if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)__int128 v123 = 138412290;
                    uint64_t v124 = v14;
                    _os_log_error_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_ERROR,  "%@ failed to get TAC for CBRS network",  v123,  0xCu);
                  }

LABEL_72:
                  __int128 v28 = obj;
                  goto LABEL_73;
                }

                int v103 = v35;
                uint64_t v37 = ne_log_obj(isKindOfClass, v34);
                __int128 v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
                if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)__int128 v123 = 138413058;
                  uint64_t v124 = v14;
                  __int16 v125 = 2112;
                  id v126 = v22;
                  __int16 v127 = 2112;
                  id v128 = v26;
                  __int16 v129 = 2112;
                  id v130 = v103;
                  _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_INFO,  "%@ found CBRS(Band 48) network (MCC:%@ MNC:%@ TAC:%@)",  v123,  0x2Au);
                }
              }

              else
              {
                uint64_t v47 = ne_log_obj(v31, v32);
                __int128 v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
                if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)__int128 v123 = 138412290;
                  uint64_t v124 = v14;
                  _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_INFO,  "%@ this is not a CBRS network",  v123,  0xCu);
                }

                int v103 = 0LL;
              }

              if (objc_opt_class(&OBJC_CLASS___MCProfileConnection)
                && (SEL v48 = (void *)objc_claimAutoreleasedReturnValue( +[MCProfileConnection sharedConnection]( MCProfileConnection,  "sharedConnection")),  v49 = [v48 isSupervised],  v48,  v49))
              {
                uint64_t v52 = ne_log_obj(v50, v51);
                uint64_t v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
                if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)__int128 v123 = 138412290;
                  uint64_t v124 = v14;
                  _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_INFO,  "%@ this is a supervised device",  v123,  0xCu);
                }

                char v105 = 1;
              }

              else
              {
                char v105 = 0;
              }

              id v110 = [v22 integerValue];
              id v109 = [v26 integerValue];
              id v15 = v103;
              if (v106) {
                uint64_t v104 = (uint64_t)[v103 integerValue];
              }
              else {
                uint64_t v104 = -1LL;
              }
              __int128 v117 = 0u;
              __int128 v115 = 0u;
              __int128 v116 = 0u;
              __int128 v114 = 0u;
              id obj = *(id *)(v14 + 32);
              id v111 = [obj countByEnumeratingWithState:&v114 objects:v122 count:16];
              if (v111)
              {
                id v102 = v26;
                uint64_t v108 = *(void *)v115;
                while (2)
                {
                  for (id i = 0LL; i != v111; id i = (char *)i + 1)
                  {
                    if (*(void *)v115 != v108) {
                      objc_enumerationMutation(obj);
                    }
                    id v58 = *(void **)(*((void *)&v114 + 1) + 8LL * (void)i);
                    uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "mobileCountryCode", v102));
                    id v60 = [v59 integerValue];

                    uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue([v58 mobileNetworkCode]);
                    id v62 = [v61 integerValue];

                    if (v110 == v60 && v109 == v62)
                    {
                      if ((v105 & 1) != 0
                        || v106
                        && (uint64_t v66 = objc_claimAutoreleasedReturnValue([v58 trackingAreaCode])) != 0
                        && (id v67 = (void *)v66,
                            __int128 v68 = (void *)objc_claimAutoreleasedReturnValue([v58 trackingAreaCode]),
                            id v69 = [v68 integerValue],
                            v68,
                            v67,
                            (id)v104 == v69))
                      {
                        uint64_t v70 = ne_log_obj(v63, v64);
                        __int128 v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
                        if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
                        {
                          *(_DWORD *)__int128 v123 = 138412290;
                          uint64_t v124 = v14;
                          _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_INFO,  "%@ found matching LTE network",  v123,  0xCu);
                        }

                        uint64_t v74 = ne_log_obj(v72, v73);
                        __int128 v75 = (os_log_s *)objc_claimAutoreleasedReturnValue(v74);
                        if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
                        {
                          uint64_t v84 = *(void *)(a1 + 32);
                          objc_super v85 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) interfaceName]);
                          id v86 = [*(id *)(a1 + 48) slotID];
                          *(_DWORD *)__int128 buf = 138412802;
                          uint64_t v132 = v84;
                          __int16 v133 = 2112;
                          id v134 = v85;
                          __int16 v135 = 2048;
                          id v136 = v86;
                          _os_log_debug_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEBUG,  "%@ found configured private LTE network match (interface:[%@] Slot ID:[%ld])",  buf,  0x20u);
                        }

                        __int128 v77 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) interfaceName]);
                        __int128 v78 = *(void **)(a1 + 32);
                        if (v78) {
                          objc_setProperty_atomic(v78, v76, v77, 16LL);
                        }

                        id v79 = [*(id *)(a1 + 48) slotID];
                        uint64_t v81 = *(void *)(a1 + 32);
                        if (v81) {
                          *(void *)(v81 + 4_Block_object_dispose(va, 8) = v79;
                        }
                        uint64_t v82 = ne_log_obj(v79, v80);
                        __int128 v83 = (os_log_s *)objc_claimAutoreleasedReturnValue(v82);
                        if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
                        {
                          uint64_t v87 = *(void *)(a1 + 32);
                          if (v87) {
                            __int16 v88 = *(void **)(v87 + 48);
                          }
                          else {
                            __int16 v88 = 0LL;
                          }
                          *(_DWORD *)__int128 buf = 138412546;
                          uint64_t v132 = v87;
                          __int16 v133 = 2048;
                          id v134 = v88;
                          _os_log_debug_impl( (void *)&_mh_execute_header,  v83,  OS_LOG_TYPE_DEBUG,  "%@ Slot ID [%ld] is active",  buf,  0x16u);
                        }

                        uint64_t v40 = 1LL;
                        goto LABEL_34;
                      }
                    }
                  }

                  id v111 = [obj countByEnumeratingWithState:&v114 objects:v122 count:16];
                  if (v111) {
                    continue;
                  }
                  break;
                }

                unsigned __int8 v26 = v102;
                id v15 = v103;
              }

              goto LABEL_72;
            }

            __int128 v28 = v29;
          }

LABEL_100:
}

id sub_10008D978(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 8LL, 1);
  }
  return [Property didReceiveStatusChangeWithInterface:*(void *)(a1 + 40)];
}

id sub_10008D9AC(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 8LL, 1);
  }
  return [Property didReceiveStatusChangeWithInterface:2];
}

uint64_t sub_10008D9D4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10008D9E4(uint64_t a1)
{
}

void sub_10008D9EC(uint64_t *a1)
{
}

LABEL_5:
  if (xpc_get_type(v8) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_6;
  }
  uint64_t v12 = xpc_dictionary_get_BOOL(v8, "is-on-demand");
LABEL_11:
  -[NESMSession setIsOnDemand:](self, "setIsOnDemand:", v12);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", euid));
  -[NESMSession setUID:](self, "setUID:", v13);

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", int64));
  -[NESMSession setGid:](self, "setGid:", v14);

  self->_lastStopReasoid n = 0;
  if (-[NESMSession type](self, "type") == 1) {
    sub_10007C56C(self, 0LL);
  }
  if (-[NESMSession isOnDemand](self, "isOnDemand"))
  {
    string = xpc_dictionary_get_string(v8, "match-hostname");
    id v16 = (char *)proc_name(v11, &buffer, 0x100u);
    if ((int)v16 <= 0)
    {
      uint64_t v18 = ne_log_obj(v16, v17);
      uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        id v31 = __error();
        uint64_t v32 = strerror(*v31);
        __int128 v33 = 138412546;
        uint64_t v34 = self;
        SEL v35 = 2080;
        p___int128 buffer = (int *)v32;
        _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "%@ failed to obtain the triggering process' name: %s",  (uint8_t *)&v33,  0x16u);
      }

      id v16 = strncpy((char *)&buffer, "<unknown>", 0x100uLL);
    }

    __int128 v20 = ne_log_obj(v16, v17);
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      id v22 = "<none>";
      __int128 v33 = 138413058;
      if (string) {
        id v22 = string;
      }
      uint64_t v34 = self;
      SEL v35 = 2080;
      p___int128 buffer = &buffer;
      uint64_t v37 = 1024;
      __int128 v38 = v11;
      id v39 = 2080;
      uint64_t v40 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "%@ starting on demand from process %s (%d) matching hostname %s",  (uint8_t *)&v33,  0x26u);
    }
  }

  uint64_t is_debug_logging_enabled = nelog_is_debug_logging_enabled();
  char v24 = is_debug_logging_enabled;
  uint64_t v25 = ne_log_large_obj(is_debug_logging_enabled);
  unsigned __int8 v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
  uint64_t v27 = v26;
  if (v24)
  {
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      __int128 v28 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession configuration](self, "configuration"));
      __int128 buffer = 138412546;
      uint64_t v42 = self;
      id v43 = 2112;
      uint64_t v44 = v28;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEBUG,  "%@ starting with configuration: %@",  (uint8_t *)&buffer,  0x16u);
    }
  }

  else if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
  {
    __int128 v29 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession configuration](self, "configuration"));
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v29 descriptionWithOptions:2]);
    __int128 buffer = 138412546;
    uint64_t v42 = self;
    id v43 = 2112;
    uint64_t v44 = v30;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_INFO,  "%@ starting with configuration: %@",  (uint8_t *)&buffer,  0x16u);
  }

  -[NESMSession setStatus:](self, "setStatus:", 2LL);
}

LABEL_78:
      goto LABEL_79;
    }

    -[NESMSession setDisconnectedCount:]( self,  "setDisconnectedCount:",  (char *)-[NESMSession disconnectedCount](self, "disconnectedCount") + 1);
    __int128 v28 = (uint64_t)sub_100077340(self);
    if (!(_DWORD)v28) {
      goto LABEL_32;
    }
    if (-[NESMSession failedConnectCountWithinInterval](self, "failedConnectCountWithinInterval"))
    {
      __int128 v28 = objc_claimAutoreleasedReturnValue(-[NESMSession firstFailedConnectTime](self, "firstFailedConnectTime"));
      if (!v28) {
        goto LABEL_32;
      }
      uint64_t v32 = (void *)v28;
      __int128 v33 = (void *)objc_claimAutoreleasedReturnValue(-[NESMSession firstFailedConnectTime](self, "firstFailedConnectTime"));
      [v33 timeIntervalSinceNow];
      SEL v35 = v34 + 1.0;

      if (v35 < 0.0) {
        goto LABEL_32;
      }
      uint64_t v36 = -[NESMSession failedConnectCountWithinInterval](self, "failedConnectCountWithinInterval") + 1;
      uint64_t v37 = self;
    }

    else
    {
      __int128 v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      -[NESMSession setFirstFailedConnectTime:](self, "setFirstFailedConnectTime:", v38);

      uint64_t v37 = self;
      uint64_t v36 = 1LL;
    }

    __int128 v28 = (uint64_t)-[NESMSession setFailedConnectCountWithinInterval:](v37, "setFailedConnectCountWithinInterval:", v36);
    goto LABEL_32;
  }

void sub_100090164(_Unwind_Exception *a1)
{
}

void sub_10009039C(_Unwind_Exception *a1)
{
}

void sub_1000904B4(_Unwind_Exception *a1)
{
}

void sub_100091554(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 52) || sub_100077340(*(void **)(a1 + 32)))
  {
    uint64_t v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000915F8;
    block[3] = &unk_1000BEDA8;
    id v3 = *(void **)(a1 + 40);
    void block[4] = *(void *)(a1 + 32);
    id v5 = v3;
    int v6 = *(_DWORD *)(a1 + 48);
    dispatch_sync(v2, block);
  }

void sub_1000915F8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = objc_alloc(&OBJC_CLASS___NESMSessionClient);
  if (v4
    && (uint64_t v5 = *(unsigned int *)(a1 + 48),
        v15.receiver = v4,
        v15.super_class = (Class)&OBJC_CLASS___NESMSessionClient,
        (int v6 = objc_msgSendSuper2(&v15, "init")) != 0))
  {
    uint64_t v13 = v6;
    if (proc_name(v5, buffer, 0x100u) < 1) {
      uint64_t v7 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"<unknown-name>[%d]",  v5,  v12);
    }
    else {
      uint64_t v7 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%s[%d]", buffer, v5);
    }
    uint64_t v9 = objc_claimAutoreleasedReturnValue(v7);
    uint64_t v10 = (void *)v13[1];
    v13[1] = v9;

    uint64_t v11 = (void *)v13[2];
    v13[2] = 0LL;

    id v8 = v13;
  }

  else
  {
    id v8 = 0LL;
  }

  id v14 = v8;
  [v2 handleCommand:v3 fromClient:v8];
}

void sub_100091724(uint64_t a1, uint64_t a2)
{
  switch(*(_DWORD *)(a1 + 40))
  {
    case 0x1F:
      uint64_t v3 = ne_log_obj(a1, a2);
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v25 = v5;
        int v6 = "%@: configuration is now disabled, stopping";
        goto LABEL_12;
      }

      break;
    case 0x20:
      uint64_t v7 = ne_log_obj(a1, a2);
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 32);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v25 = v8;
        int v6 = "%@: configuration has been removed, stopping";
        goto LABEL_12;
      }

      break;
    case 0x21:
      uint64_t v9 = ne_log_obj(a1, a2);
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a1 + 32);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v25 = v10;
        int v6 = "%@ has been superceded, stopping";
        goto LABEL_12;
      }

      break;
    case 0x25:
      uint64_t v17 = ne_log_obj(a1, a2);
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = *(void *)(a1 + 32);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v25 = v18;
        int v6 = "%@: configuration has changed, stopping";
LABEL_12:
        objc_super v15 = v4;
        uint32_t v16 = 12;
        goto LABEL_13;
      }

      break;
    default:
      uint64_t v11 = ne_log_obj(a1, a2);
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        uint64_t v13 = ne_session_stop_reason_to_string(*(unsigned int *)(a1 + 40));
        uint64_t v14 = *(int *)(a1 + 40);
        *(_DWORD *)__int128 buf = 138412802;
        uint64_t v25 = v12;
        __int16 v26 = 2080;
        uint64_t v27 = v13;
        __int16 v28 = 2048;
        uint64_t v29 = v14;
        int v6 = "%@: %s (%lld), stopping";
        objc_super v15 = v4;
        uint32_t v16 = 32;
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v6, buf, v16);
      }

      break;
  }

  if ([*(id *)(a1 + 32) status] == 1
    || ![*(id *)(a1 + 32) status])
  {
    id v19 = sub_10004F238((uint64_t)&OBJC_CLASS___NESMServer);
    __int128 v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    uint64_t v21 = *(void **)(a1 + 32);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_1000919B4;
    v22[3] = &unk_1000BED80;
    void v22[4] = v21;
    int v23 = *(_DWORD *)(a1 + 40);
    sub_1000530F0((uint64_t)v20, v21, v22);
  }

  else
  {
    [*(id *)(a1 + 32) handleStopMessageWithReason:*(unsigned int *)(a1 + 40)];
  }

id sub_1000919B4(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleStopMessageWithReason:*(unsigned int *)(a1 + 40)];
}

id sub_1000919C4(uint64_t a1)
{
  return [*(id *)(a1 + 32) uninstall];
}

id sub_1000919CC(uint64_t a1)
{
  return [*(id *)(a1 + 32) installPended];
}

uint64_t sub_1000919D4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_100091A10(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if ([*(id *)(a1 + 40) type] == 1)
    {
      uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) VPN]);

      if (v2)
      {
        uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) configuration]);
        uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 VPN]);
        uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 protocol]);
        id v6 = [v5 type];
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) VPN]);
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 protocol]);
        id v9 = [v8 type];

        if (v6 == v9)
        {
          uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) configuration]);
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 VPN]);
          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 protocol]);
          if ([v12 type] == (id)5)
          {
            uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) configuration]);
            uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 VPN]);
            objc_super v15 = (void *)objc_claimAutoreleasedReturnValue([v14 protocol]);
            unsigned int v51 = [v15 enableFallback];
            uint32_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) VPN]);
            uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 protocol]);
            unsigned int v18 = [v17 enableFallback];

            if (v51 != v18)
            {
              uint64_t v19 = 32LL;
              int v20 = 1;
              int v21 = 1;
              goto LABEL_32;
            }
          }

          else
          {
          }

          goto LABEL_28;
        }
      }
    }

    else if ([*(id *)(a1 + 40) type] == 2)
    {
      id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) appVPN]);

      if (v22)
      {
        int v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) configuration]);
        char v24 = (void *)objc_claimAutoreleasedReturnValue([v23 appVPN]);
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 protocol]);
        id v26 = [v25 type];
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) appVPN]);
        __int16 v28 = (void *)objc_claimAutoreleasedReturnValue([v27 protocol]);
        id v29 = [v28 type];

        if (v26 == v29) {
          goto LABEL_28;
        }
      }
    }

    else
    {
      if ([*(id *)(a1 + 40) type] == 3)
      {
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) alwaysOnVPN]);
      }

      else if ([*(id *)(a1 + 40) type] == 4)
      {
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) contentFilter]);
      }

      else if ([*(id *)(a1 + 40) type] == 5)
      {
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pathController]);
      }

      else if ([*(id *)(a1 + 40) type] == 6)
      {
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dnsProxy]);
      }

      else if ([*(id *)(a1 + 40) type] == 7)
      {
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dnsSettings]);
      }

      else if ([*(id *)(a1 + 40) type] == 8)
      {
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) appPush]);
      }

      else
      {
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) relay]);
      }

      id v31 = v30;

      if (v31)
      {
LABEL_28:
        uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) configuration]);
        if ([v32 isEnabled])
        {
          unsigned int v33 = [*(id *)(a1 + 32) isEnabled];

          if (!v33)
          {
            int v20 = 0;
            int v21 = 0;
            uint64_t v19 = 31LL;
            goto LABEL_32;
          }
        }

        else
        {
        }

        [*(id *)(a1 + 40) handleUpdateConfiguration:*(void *)(a1 + 32)];
        goto LABEL_43;
      }
    }
  }

  int v21 = 0;
  uint64_t v19 = 32LL;
  int v20 = 1;
LABEL_32:
  uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) server]);
  [v34 deregisterSession:*(void *)(a1 + 40)];

  [*(id *)(a1 + 40) stopIfNecessaryWithReason:v19];
  SEL v35 = *(void **)(a1 + 40);
  if (!v20)
  {
    [v35 handleUpdateConfiguration:*(void *)(a1 + 32)];
    if (!v21) {
      goto LABEL_43;
    }
    goto LABEL_38;
  }

  uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v35 server]);
  unsigned int v37 = [*(id *)(a1 + 40) type];
  __int128 v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) configuration]);
  id v40 = (id)objc_claimAutoreleasedReturnValue([v38 identifier]);
  if (v36)
  {
    id Property = (dispatch_queue_s *)objc_getProperty(v36, v39, 88LL, 1);
    block = _NSConcreteStackBlock;
    uint64_t v56 = 3221225472LL;
    SEL v57 = sub_100051A28;
    id v58 = &unk_1000BEDA8;
    uint64_t v59 = v36;
    id v60 = v40;
    LODWORD(v61) = v37;
    dispatch_async(Property, &block);
  }

  [*(id *)(a1 + 40) handleUpdateConfiguration:0];
  sub_10007C13C(*(void **)(a1 + 40));
  sub_10007C208(*(void **)(a1 + 40));
  sub_10007C1A8(*(void **)(a1 + 40));
  if ((v21 & 1) != 0)
  {
LABEL_38:
    uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) configuration]);
    id v43 = (void *)objc_claimAutoreleasedReturnValue([v42 identifier]);

    unsigned int v44 = [*(id *)(a1 + 40) type];
    id v45 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) server]);
    v52[0] = _NSConcreteStackBlock;
    v52[1] = 3221225472LL;
    v52[2] = sub_100091FDC;
    v52[3] = &unk_1000BED08;
    id v53 = v43;
    unsigned int v54 = v44;
    id v46 = v43;
    SEL v48 = v52;
    if (v45)
    {
      unsigned int v49 = (dispatch_queue_s *)objc_getProperty(v45, v47, 88LL, 1);
      block = _NSConcreteStackBlock;
      uint64_t v56 = 3221225472LL;
      SEL v57 = sub_100051BF8;
      id v58 = &unk_1000BE170;
      uint64_t v59 = v45;
      id v60 = v46;
      unsigned int v62 = v44;
      uint64_t v61 = v48;
      dispatch_async(v49, &block);
    }
  }

void sub_100091FDC(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v3 = ne_log_obj(a1, 0LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v6 = *(_DWORD *)(a1 + 40);
      int v7 = 138412546;
      uint64_t v8 = v5;
      __int16 v9 = 1024;
      int v10 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "Failed to add a pending session request or failed to load session for %@ (%d)",  (uint8_t *)&v7,  0x12u);
    }
  }

id *sub_100092098(id *result)
{
  if (*((_BYTE *)result + 40)) {
    return (id *)[result[4] invalidate];
  }
  return result;
}

uint64_t sub_1000920AC(uint64_t a1)
{
  uint64_t result = PLShouldLogRegisteredEvent(145LL, *(void *)(a1 + 32));
  if ((_DWORD)result) {
    return PLLogRegisteredEvent(145LL, *(void *)(a1 + 32), *(void *)(a1 + 40), 0LL);
  }
  return result;
}

void sub_1000920F0(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.networkextension.powerlog", 0LL);
  uint64_t v2 = (void *)qword_1000CFC48;
  qword_1000CFC48 = (uint64_t)v1;
}

void sub_10009211C(id a1)
{
  if (!mach_timebase_info(&info))
  {
    LODWORD(v1) = info.numer;
    LODWORD(v2) = info.denom;
    *(double *)&qword_1000CFC58 = (double)v1 / (double)v2 / 1000.0 / 1000000.0;
  }

id sub_100092170(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleNetworkPrepareResult:0];
}

id sub_10009217C(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleNetworkPrepareResult:*(void *)(a1 + 40)];
}

id sub_100092188(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleNetworkPrepareResult:*(void *)(a1 + 40)];
}

void sub_100092194(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) type];
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2 == 1)
  {
    uint64_t v4 = objc_opt_class(&OBJC_CLASS___NESMVPNSession);
    if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0 && [*(id *)(a1 + 32) tunnelKind] == (id)2)
    {
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastPrimaryInterface]);
      int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) server]);
      int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 primaryCellularInterface]);
      goto LABEL_10;
    }

    uint64_t v8 = *(void **)(a1 + 32);
  }

  else
  {
    uint64_t v8 = *(void **)(a1 + 32);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v8 lastPrimaryInterface]);
  int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) server]);
  int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 primaryPhysicalInterface]);
LABEL_10:
  __int16 v9 = v7;
  int v10 = (void *)objc_claimAutoreleasedReturnValue([v7 interfaceName]);
  unsigned __int8 v11 = [v5 isEqualToString:v10];

  if ((v11 & 1) == 0)
  {
    uint64_t v12 = *(void **)(a1 + 32);
    if (v12) {
      sub_1000775B0(v12);
    }
  }

void sub_1000922C8(void *a1, const char *a2)
{
  if (a1)
  {
    if (objc_getProperty(a1, a2, 16LL, 1))
    {
      xpc_object_t message = xpc_dictionary_create(0LL, 0LL, 0LL);
      xpc_dictionary_set_int64(message, "SessionNotificationType", 1LL);
      id Property = (_xpc_connection_s *)objc_getProperty(a1, v3, 16LL, 1);
      xpc_connection_send_message(Property, message);
    }
  }

BOOL sub_100092350(uint64_t a1, xpc_object_t xdict)
{
  if (!a1) {
    return 0LL;
  }
  xpc_object_t value = xpc_dictionary_get_value(xdict, "SessionOptions");
  SEL v3 = (void *)objc_claimAutoreleasedReturnValue(value);
  uint64_t v4 = v3;
  BOOL v5 = v3 && xpc_get_type(v3) == (xpc_type_t)&_xpc_type_dictionary && xpc_dictionary_get_BOOL(v4, "is-on-demand");

  return v5;
}

void sub_1000923D0(uint64_t a1, char a2)
{
  uint64_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10009247C;
  v6[3] = &unk_1000BEC30;
  char v9 = a2;
  BOOL v5 = *(void **)(a1 + 40);
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v5;
  id v8 = *(id *)(a1 + 48);
  dispatch_async(v4, v6);
}

void sub_10009247C(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 56))
  {
    uint64_t v3 = kdebug_trace(726990904LL, 0LL, 0LL, 0LL, 0LL);
    uint64_t v5 = ne_log_obj(v3, v4);
    int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v14 = 138412290;
      uint64_t v15 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%@: Successfully registered",  (uint8_t *)&v14,  0xCu);
    }

    [*(id *)(a1 + 32) handleStartMessage:*(void *)(a1 + 48)];
  }

  else
  {
    uint64_t v8 = ne_log_obj(a1, a2);
    char v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void *)(a1 + 40);
      int v14 = 138412546;
      uint64_t v15 = v10;
      __int16 v16 = 2112;
      uint64_t v17 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%@: Rejected start command from %@",  (uint8_t *)&v14,  0x16u);
    }

    sub_1000922C8(*(void **)(a1 + 40), v12);
    [*(id *)(a1 + 32) removeAllClients];
  }

  uint64_t v13 = (dispatch_object_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) messageQueue]);
  dispatch_resume(v13);
}

id sub_1000925DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = ne_log_obj(a1, a2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v22 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@: Removing all clients", buf, 0xCu);
  }

  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v6, 48LL, 1);
  }
  id v8 = Property;
  id v9 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v17;
    do
    {
      uint64_t v12 = 0LL;
      do
      {
        if (*(void *)v17 != v11) {
          objc_enumerationMutation(v8);
        }
        sub_100092744(*(void *)(*((void *)&v16 + 1) + 8LL * (void)v12));
        uint64_t v12 = (char *)v12 + 1;
      }

      while (v10 != v12);
      id v10 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }

    while (v10);
  }

  id v14 = *(id *)(a1 + 32);
  if (v14) {
    id v14 = objc_getProperty(v14, v13, 48LL, 1);
  }
  return objc_msgSend(v14, "removeAllObjects", (void)v16);
}

void sub_100092744(uint64_t a1)
{
  if (a1)
  {
    unsigned int v2 = *(_xpc_connection_s **)(a1 + 16);
    if (v2)
    {
      xpc_connection_cancel(v2);
      unsigned int v2 = *(_xpc_connection_s **)(a1 + 16);
    }

    *(void *)(a1 + 16) = 0LL;
  }

void sub_10009277C(uint64_t a1)
{
  uint64_t v22 = 0LL;
  int v23 = &v22;
  uint64_t v24 = 0x3032000000LL;
  uint64_t v25 = sub_100092A7C;
  id v26 = sub_100092A8C;
  unsigned int v2 = objc_alloc(&OBJC_CLASS___NESMSessionClient);
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = v3;
  if (v2)
  {
    v28.receiver = v2;
    v28.super_class = (Class)&OBJC_CLASS___NESMSessionClient;
    unsigned int v2 = (NESMSessionClient *)objc_msgSendSuper2(&v28, "init");
    if (v2)
    {
      uint64_t pid = xpc_connection_get_pid(v4);
      context = (const char *)xpc_connection_get_context(v4);
      if (proc_name(pid, &buffer, 0x100u) < 1) {
        uint64_t v7 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"<unknown-name>[%d]",  pid));
      }
      else {
        uint64_t v7 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%s[%d]", &buffer, pid));
      }
      descriptioid n = v2->_description;
      v2->_descriptioid n = (NSString *)v7;

      objc_storeStrong((id *)&v2->_connection, v3);
      v2->_permissions = 0LL;
      if (context && !strcmp(context, "com.apple.nesessionmanager.flow-divert-token")) {
        v2->_permissions = 1LL;
      }
      id v9 = (void *)xpc_connection_copy_entitlement_value(v4, "com.apple.private.network.socket-delegate");
      id v10 = v9;
      if (v9 && xpc_get_type(v9) == (xpc_type_t)&_xpc_type_BOOL && xpc_BOOL_get_value(v10)) {
        v2->_permissions |= 2uLL;
      }
    }
  }

  uint64_t v27 = v2;
  uint64_t v13 = ne_log_obj(v11, v12);
  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(a1 + 40);
    uint64_t v16 = v23[5];
    int buffer = 138412546;
    uint64_t v30 = v15;
    __int16 v31 = 2112;
    uint64_t v32 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%@: Adding a connection for client %@",  (uint8_t *)&buffer,  0x16u);
  }

  kdebug_trace(726990864LL, 0LL, 0LL, 0LL, 0LL);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_100092A94;
  handler[3] = &unk_1000BEBB8;
  __int128 v17 = *(_xpc_connection_s **)(a1 + 32);
  void handler[4] = *(void *)(a1 + 40);
  handler[5] = &v22;
  xpc_connection_set_event_handler(v17, handler);
  id Property = *(id *)(a1 + 40);
  if (Property) {
    id Property = objc_getProperty(Property, v18, 48LL, 1);
  }
  id v20 = Property;
  [v20 addObject:v23[5]];

  xpc_connection_resume(*(xpc_connection_t *)(a1 + 32));
  _Block_object_dispose(&v22, 8);
}

void sub_100092A58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100092A7C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100092A8C(uint64_t a1)
{
}

void sub_100092A94(uint64_t a1, void *a2)
{
  id v3 = a2;
  kdebug_trace(726990872LL, 0LL, 0LL, 0LL, 0LL);
  uint64_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) messageQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100092B50;
  block[3] = &unk_1000BEB90;
  uint64_t v5 = *(void *)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v8 = v3;
  uint64_t v9 = v5;
  id v6 = v3;
  dispatch_async(v4, block);
}

void sub_100092B50(uint64_t a1)
{
  unsigned int v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100092BDC;
  block[3] = &unk_1000BEB90;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = v3;
  uint64_t v7 = v4;
  uint64_t v8 = *(void *)(a1 + 48);
  dispatch_sync(v2, block);
}

void sub_100092BDC(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 32);
  if (!v2)
  {
    uint64_t v5 = 0LL;
    goto LABEL_5;
  }

  xpc_type_t type = xpc_get_type(v2);
  if (type != (xpc_type_t)&_xpc_type_error)
  {
    uint64_t v5 = *(void *)(a1 + 32);
LABEL_5:
    [*(id *)(a1 + 40) handleCommand:v5 fromClient:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
    return;
  }

  uint64_t v6 = ne_log_obj(type, v4);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    int v14 = 138412546;
    uint64_t v15 = v8;
    __int16 v16 = 2112;
    uint64_t v17 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%@: Removing a connection for client %@",  (uint8_t *)&v14,  0x16u);
  }

  kdebug_trace(726990868LL, 0LL, 0LL, 0LL, 0LL);
  sub_100092744(*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL));
  id Property = *(id *)(a1 + 40);
  if (Property) {
    id Property = objc_getProperty(Property, v10, 48LL, 1);
  }
  [Property removeObject:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = 0LL;
}

id objc_msgSend_URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:");
}

id objc_msgSend_initAndShowAlertWithHeader_message_alternateMessage_defaultMessage_noBoldDefault_usePrivacyIcon_extensionItem_callbackQueue_callbackHandler_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initAndShowAlertWithHeader:message:alternateMessage:defaultMessage:noBoldDefault:usePrivacyIcon:extensionItem :callbackQueue:callbackHandler:");
}

id objc_msgSend_initWithConfiguration_andServer_andProtocol_andPluginType_andSessionType_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithConfiguration:andServer:andProtocol:andPluginType:andSessionType:");
}

id objc_msgSend_initWithConfiguration_andServer_andProtocol_andPluginType_andSessionType_sessionQueue_messageQueue_tunnelKind_parent_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithConfiguration:andServer:andProtocol:andPluginType:andSessionType:sessionQueue:messageQueue:tunnelKind:parent:");
}

id objc_msgSend_initWithDomains_prefixCount_reverse_partialSearchAllowed_partialSearchTerminator_extra_bytes_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithDomains:prefixCount:reverse:partialSearchAllowed:partialSearchTerminator:extra_bytes:");
}

id objc_msgSend_initWithNetworkAgentRegistration_sessionType_configurationIdentifier_agentUUID_name_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithNetworkAgentRegistration:sessionType:configurationIdentifier:agentUUID:name:");
}

id objc_msgSend_initWithPluginType_pluginClass_pluginEndpoint_pluginProcessIdentity_queue_factory_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPluginType:pluginClass:pluginEndpoint:pluginProcessIdentity:queue:factory:");
}

id objc_msgSend_setupWithPluginType_pluginVersion_pluginClass_pluginInfo_completionHandler_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setupWithPluginType:pluginVersion:pluginClass:pluginInfo:completionHandler:");
}

id objc_msgSend_wifiBehavior(void *a1, const char *a2, ...)
{
  return [a1 wifiBehavior];
}